
23-RTC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005954  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000148  08005a60  08005a60  00006a60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ba8  08005ba8  000070a8  2**0
                  CONTENTS
  4 .ARM          00000000  08005ba8  08005ba8  000070a8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005ba8  08005ba8  000070a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005ba8  08005ba8  00006ba8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005bac  08005bac  00006bac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000a8  20000000  08005bb0  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000036c  200000a8  08005c58  000070a8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000414  08005c58  00007414  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000070a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d6a7  00000000  00000000  000070d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002af7  00000000  00000000  00014778  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d58  00000000  00000000  00017270  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a3a  00000000  00000000  00017fc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019998  00000000  00000000  00018a02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000139de  00000000  00000000  0003239a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00088b0d  00000000  00000000  00045d78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ce885  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003cd8  00000000  00000000  000ce8c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000045  00000000  00000000  000d25a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000a8 	.word	0x200000a8
 8000128:	00000000 	.word	0x00000000
 800012c:	08005a48 	.word	0x08005a48

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000ac 	.word	0x200000ac
 8000148:	08005a48 	.word	0x08005a48

0800014c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000152:	4b0c      	ldr	r3, [pc, #48]	@ (8000184 <MX_DMA_Init+0x38>)
 8000154:	695b      	ldr	r3, [r3, #20]
 8000156:	4a0b      	ldr	r2, [pc, #44]	@ (8000184 <MX_DMA_Init+0x38>)
 8000158:	f043 0301 	orr.w	r3, r3, #1
 800015c:	6153      	str	r3, [r2, #20]
 800015e:	4b09      	ldr	r3, [pc, #36]	@ (8000184 <MX_DMA_Init+0x38>)
 8000160:	695b      	ldr	r3, [r3, #20]
 8000162:	f003 0301 	and.w	r3, r3, #1
 8000166:	607b      	str	r3, [r7, #4]
 8000168:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800016a:	2200      	movs	r2, #0
 800016c:	2100      	movs	r1, #0
 800016e:	200f      	movs	r0, #15
 8000170:	f001 f83d 	bl	80011ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000174:	200f      	movs	r0, #15
 8000176:	f001 f856 	bl	8001226 <HAL_NVIC_EnableIRQ>

}
 800017a:	bf00      	nop
 800017c:	3708      	adds	r7, #8
 800017e:	46bd      	mov	sp, r7
 8000180:	bd80      	pop	{r7, pc}
 8000182:	bf00      	nop
 8000184:	40021000 	.word	0x40021000

08000188 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000188:	b580      	push	{r7, lr}
 800018a:	b088      	sub	sp, #32
 800018c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800018e:	f107 0310 	add.w	r3, r7, #16
 8000192:	2200      	movs	r2, #0
 8000194:	601a      	str	r2, [r3, #0]
 8000196:	605a      	str	r2, [r3, #4]
 8000198:	609a      	str	r2, [r3, #8]
 800019a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800019c:	4b3b      	ldr	r3, [pc, #236]	@ (800028c <MX_GPIO_Init+0x104>)
 800019e:	699b      	ldr	r3, [r3, #24]
 80001a0:	4a3a      	ldr	r2, [pc, #232]	@ (800028c <MX_GPIO_Init+0x104>)
 80001a2:	f043 0320 	orr.w	r3, r3, #32
 80001a6:	6193      	str	r3, [r2, #24]
 80001a8:	4b38      	ldr	r3, [pc, #224]	@ (800028c <MX_GPIO_Init+0x104>)
 80001aa:	699b      	ldr	r3, [r3, #24]
 80001ac:	f003 0320 	and.w	r3, r3, #32
 80001b0:	60fb      	str	r3, [r7, #12]
 80001b2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80001b4:	4b35      	ldr	r3, [pc, #212]	@ (800028c <MX_GPIO_Init+0x104>)
 80001b6:	699b      	ldr	r3, [r3, #24]
 80001b8:	4a34      	ldr	r2, [pc, #208]	@ (800028c <MX_GPIO_Init+0x104>)
 80001ba:	f043 0304 	orr.w	r3, r3, #4
 80001be:	6193      	str	r3, [r2, #24]
 80001c0:	4b32      	ldr	r3, [pc, #200]	@ (800028c <MX_GPIO_Init+0x104>)
 80001c2:	699b      	ldr	r3, [r3, #24]
 80001c4:	f003 0304 	and.w	r3, r3, #4
 80001c8:	60bb      	str	r3, [r7, #8]
 80001ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80001cc:	4b2f      	ldr	r3, [pc, #188]	@ (800028c <MX_GPIO_Init+0x104>)
 80001ce:	699b      	ldr	r3, [r3, #24]
 80001d0:	4a2e      	ldr	r2, [pc, #184]	@ (800028c <MX_GPIO_Init+0x104>)
 80001d2:	f043 0308 	orr.w	r3, r3, #8
 80001d6:	6193      	str	r3, [r2, #24]
 80001d8:	4b2c      	ldr	r3, [pc, #176]	@ (800028c <MX_GPIO_Init+0x104>)
 80001da:	699b      	ldr	r3, [r3, #24]
 80001dc:	f003 0308 	and.w	r3, r3, #8
 80001e0:	607b      	str	r3, [r7, #4]
 80001e2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 80001e4:	2200      	movs	r2, #0
 80001e6:	2106      	movs	r1, #6
 80001e8:	4829      	ldr	r0, [pc, #164]	@ (8000290 <MX_GPIO_Init+0x108>)
 80001ea:	f001 fc5d 	bl	8001aa8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 80001ee:	2201      	movs	r2, #1
 80001f0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80001f4:	4826      	ldr	r0, [pc, #152]	@ (8000290 <MX_GPIO_Init+0x108>)
 80001f6:	f001 fc57 	bl	8001aa8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA1 PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 80001fa:	2306      	movs	r3, #6
 80001fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80001fe:	2301      	movs	r3, #1
 8000200:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000202:	2300      	movs	r3, #0
 8000204:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000206:	2302      	movs	r3, #2
 8000208:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800020a:	f107 0310 	add.w	r3, r7, #16
 800020e:	4619      	mov	r1, r3
 8000210:	481f      	ldr	r0, [pc, #124]	@ (8000290 <MX_GPIO_Init+0x108>)
 8000212:	f001 fac5 	bl	80017a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000216:	2320      	movs	r3, #32
 8000218:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800021a:	4b1e      	ldr	r3, [pc, #120]	@ (8000294 <MX_GPIO_Init+0x10c>)
 800021c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800021e:	2301      	movs	r3, #1
 8000220:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000222:	f107 0310 	add.w	r3, r7, #16
 8000226:	4619      	mov	r1, r3
 8000228:	4819      	ldr	r0, [pc, #100]	@ (8000290 <MX_GPIO_Init+0x108>)
 800022a:	f001 fab9 	bl	80017a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800022e:	2301      	movs	r3, #1
 8000230:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000232:	4b18      	ldr	r3, [pc, #96]	@ (8000294 <MX_GPIO_Init+0x10c>)
 8000234:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000236:	2301      	movs	r3, #1
 8000238:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800023a:	f107 0310 	add.w	r3, r7, #16
 800023e:	4619      	mov	r1, r3
 8000240:	4815      	ldr	r0, [pc, #84]	@ (8000298 <MX_GPIO_Init+0x110>)
 8000242:	f001 faad 	bl	80017a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000246:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800024a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800024c:	2311      	movs	r3, #17
 800024e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000250:	2300      	movs	r3, #0
 8000252:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000254:	2302      	movs	r3, #2
 8000256:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000258:	f107 0310 	add.w	r3, r7, #16
 800025c:	4619      	mov	r1, r3
 800025e:	480c      	ldr	r0, [pc, #48]	@ (8000290 <MX_GPIO_Init+0x108>)
 8000260:	f001 fa9e 	bl	80017a0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000264:	2200      	movs	r2, #0
 8000266:	2100      	movs	r1, #0
 8000268:	2006      	movs	r0, #6
 800026a:	f000 ffc0 	bl	80011ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800026e:	2006      	movs	r0, #6
 8000270:	f000 ffd9 	bl	8001226 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000274:	2200      	movs	r2, #0
 8000276:	2100      	movs	r1, #0
 8000278:	2017      	movs	r0, #23
 800027a:	f000 ffb8 	bl	80011ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800027e:	2017      	movs	r0, #23
 8000280:	f000 ffd1 	bl	8001226 <HAL_NVIC_EnableIRQ>

}
 8000284:	bf00      	nop
 8000286:	3720      	adds	r7, #32
 8000288:	46bd      	mov	sp, r7
 800028a:	bd80      	pop	{r7, pc}
 800028c:	40021000 	.word	0x40021000
 8000290:	40010800 	.word	0x40010800
 8000294:	10210000 	.word	0x10210000
 8000298:	40010c00 	.word	0x40010c00

0800029c <LED_Control>:

/* USER CODE BEGIN 2 */
void LED_Control(uint8_t device, uint8_t cmd)
{
 800029c:	b580      	push	{r7, lr}
 800029e:	b082      	sub	sp, #8
 80002a0:	af00      	add	r7, sp, #0
 80002a2:	4603      	mov	r3, r0
 80002a4:	460a      	mov	r2, r1
 80002a6:	71fb      	strb	r3, [r7, #7]
 80002a8:	4613      	mov	r3, r2
 80002aa:	71bb      	strb	r3, [r7, #6]
	if (device == LED1)
 80002ac:	79fb      	ldrb	r3, [r7, #7]
 80002ae:	2b01      	cmp	r3, #1
 80002b0:	d111      	bne.n	80002d6 <LED_Control+0x3a>
	{
		if (cmd == ON)
 80002b2:	79bb      	ldrb	r3, [r7, #6]
 80002b4:	2b01      	cmp	r3, #1
 80002b6:	d105      	bne.n	80002c4 <LED_Control+0x28>
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 80002b8:	2201      	movs	r2, #1
 80002ba:	2102      	movs	r1, #2
 80002bc:	4812      	ldr	r0, [pc, #72]	@ (8000308 <LED_Control+0x6c>)
 80002be:	f001 fbf3 	bl	8001aa8 <HAL_GPIO_WritePin>
		else if (cmd == OFF)
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
		}
	}
}
 80002c2:	e01c      	b.n	80002fe <LED_Control+0x62>
		else if (cmd == OFF)
 80002c4:	79bb      	ldrb	r3, [r7, #6]
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	d119      	bne.n	80002fe <LED_Control+0x62>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 80002ca:	2200      	movs	r2, #0
 80002cc:	2102      	movs	r1, #2
 80002ce:	480e      	ldr	r0, [pc, #56]	@ (8000308 <LED_Control+0x6c>)
 80002d0:	f001 fbea 	bl	8001aa8 <HAL_GPIO_WritePin>
}
 80002d4:	e013      	b.n	80002fe <LED_Control+0x62>
	else if (device == LED2)
 80002d6:	79fb      	ldrb	r3, [r7, #7]
 80002d8:	2b02      	cmp	r3, #2
 80002da:	d110      	bne.n	80002fe <LED_Control+0x62>
		if (cmd == ON)
 80002dc:	79bb      	ldrb	r3, [r7, #6]
 80002de:	2b01      	cmp	r3, #1
 80002e0:	d105      	bne.n	80002ee <LED_Control+0x52>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 80002e2:	2201      	movs	r2, #1
 80002e4:	2104      	movs	r1, #4
 80002e6:	4808      	ldr	r0, [pc, #32]	@ (8000308 <LED_Control+0x6c>)
 80002e8:	f001 fbde 	bl	8001aa8 <HAL_GPIO_WritePin>
}
 80002ec:	e007      	b.n	80002fe <LED_Control+0x62>
		else if (cmd == OFF)
 80002ee:	79bb      	ldrb	r3, [r7, #6]
 80002f0:	2b00      	cmp	r3, #0
 80002f2:	d104      	bne.n	80002fe <LED_Control+0x62>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 80002f4:	2200      	movs	r2, #0
 80002f6:	2104      	movs	r1, #4
 80002f8:	4803      	ldr	r0, [pc, #12]	@ (8000308 <LED_Control+0x6c>)
 80002fa:	f001 fbd5 	bl	8001aa8 <HAL_GPIO_WritePin>
}
 80002fe:	bf00      	nop
 8000300:	3708      	adds	r7, #8
 8000302:	46bd      	mov	sp, r7
 8000304:	bd80      	pop	{r7, pc}
 8000306:	bf00      	nop
 8000308:	40010800 	.word	0x40010800

0800030c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800030c:	b580      	push	{r7, lr}
 800030e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000310:	4b12      	ldr	r3, [pc, #72]	@ (800035c <MX_I2C1_Init+0x50>)
 8000312:	4a13      	ldr	r2, [pc, #76]	@ (8000360 <MX_I2C1_Init+0x54>)
 8000314:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000316:	4b11      	ldr	r3, [pc, #68]	@ (800035c <MX_I2C1_Init+0x50>)
 8000318:	4a12      	ldr	r2, [pc, #72]	@ (8000364 <MX_I2C1_Init+0x58>)
 800031a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800031c:	4b0f      	ldr	r3, [pc, #60]	@ (800035c <MX_I2C1_Init+0x50>)
 800031e:	2200      	movs	r2, #0
 8000320:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000322:	4b0e      	ldr	r3, [pc, #56]	@ (800035c <MX_I2C1_Init+0x50>)
 8000324:	2200      	movs	r2, #0
 8000326:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000328:	4b0c      	ldr	r3, [pc, #48]	@ (800035c <MX_I2C1_Init+0x50>)
 800032a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800032e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000330:	4b0a      	ldr	r3, [pc, #40]	@ (800035c <MX_I2C1_Init+0x50>)
 8000332:	2200      	movs	r2, #0
 8000334:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000336:	4b09      	ldr	r3, [pc, #36]	@ (800035c <MX_I2C1_Init+0x50>)
 8000338:	2200      	movs	r2, #0
 800033a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800033c:	4b07      	ldr	r3, [pc, #28]	@ (800035c <MX_I2C1_Init+0x50>)
 800033e:	2200      	movs	r2, #0
 8000340:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000342:	4b06      	ldr	r3, [pc, #24]	@ (800035c <MX_I2C1_Init+0x50>)
 8000344:	2200      	movs	r2, #0
 8000346:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000348:	4804      	ldr	r0, [pc, #16]	@ (800035c <MX_I2C1_Init+0x50>)
 800034a:	f001 fbdd 	bl	8001b08 <HAL_I2C_Init>
 800034e:	4603      	mov	r3, r0
 8000350:	2b00      	cmp	r3, #0
 8000352:	d001      	beq.n	8000358 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000354:	f000 f8ed 	bl	8000532 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000358:	bf00      	nop
 800035a:	bd80      	pop	{r7, pc}
 800035c:	200000c4 	.word	0x200000c4
 8000360:	40005400 	.word	0x40005400
 8000364:	000186a0 	.word	0x000186a0

08000368 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	b08a      	sub	sp, #40	@ 0x28
 800036c:	af00      	add	r7, sp, #0
 800036e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000370:	f107 0314 	add.w	r3, r7, #20
 8000374:	2200      	movs	r2, #0
 8000376:	601a      	str	r2, [r3, #0]
 8000378:	605a      	str	r2, [r3, #4]
 800037a:	609a      	str	r2, [r3, #8]
 800037c:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	681b      	ldr	r3, [r3, #0]
 8000382:	4a1d      	ldr	r2, [pc, #116]	@ (80003f8 <HAL_I2C_MspInit+0x90>)
 8000384:	4293      	cmp	r3, r2
 8000386:	d132      	bne.n	80003ee <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000388:	4b1c      	ldr	r3, [pc, #112]	@ (80003fc <HAL_I2C_MspInit+0x94>)
 800038a:	699b      	ldr	r3, [r3, #24]
 800038c:	4a1b      	ldr	r2, [pc, #108]	@ (80003fc <HAL_I2C_MspInit+0x94>)
 800038e:	f043 0308 	orr.w	r3, r3, #8
 8000392:	6193      	str	r3, [r2, #24]
 8000394:	4b19      	ldr	r3, [pc, #100]	@ (80003fc <HAL_I2C_MspInit+0x94>)
 8000396:	699b      	ldr	r3, [r3, #24]
 8000398:	f003 0308 	and.w	r3, r3, #8
 800039c:	613b      	str	r3, [r7, #16]
 800039e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80003a0:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80003a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80003a6:	2312      	movs	r3, #18
 80003a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80003aa:	2303      	movs	r3, #3
 80003ac:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003ae:	f107 0314 	add.w	r3, r7, #20
 80003b2:	4619      	mov	r1, r3
 80003b4:	4812      	ldr	r0, [pc, #72]	@ (8000400 <HAL_I2C_MspInit+0x98>)
 80003b6:	f001 f9f3 	bl	80017a0 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 80003ba:	4b12      	ldr	r3, [pc, #72]	@ (8000404 <HAL_I2C_MspInit+0x9c>)
 80003bc:	685b      	ldr	r3, [r3, #4]
 80003be:	627b      	str	r3, [r7, #36]	@ 0x24
 80003c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80003c2:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 80003c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80003c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80003ca:	f043 0302 	orr.w	r3, r3, #2
 80003ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80003d0:	4a0c      	ldr	r2, [pc, #48]	@ (8000404 <HAL_I2C_MspInit+0x9c>)
 80003d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80003d4:	6053      	str	r3, [r2, #4]

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80003d6:	4b09      	ldr	r3, [pc, #36]	@ (80003fc <HAL_I2C_MspInit+0x94>)
 80003d8:	69db      	ldr	r3, [r3, #28]
 80003da:	4a08      	ldr	r2, [pc, #32]	@ (80003fc <HAL_I2C_MspInit+0x94>)
 80003dc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80003e0:	61d3      	str	r3, [r2, #28]
 80003e2:	4b06      	ldr	r3, [pc, #24]	@ (80003fc <HAL_I2C_MspInit+0x94>)
 80003e4:	69db      	ldr	r3, [r3, #28]
 80003e6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80003ea:	60fb      	str	r3, [r7, #12]
 80003ec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80003ee:	bf00      	nop
 80003f0:	3728      	adds	r7, #40	@ 0x28
 80003f2:	46bd      	mov	sp, r7
 80003f4:	bd80      	pop	{r7, pc}
 80003f6:	bf00      	nop
 80003f8:	40005400 	.word	0x40005400
 80003fc:	40021000 	.word	0x40021000
 8000400:	40010c00 	.word	0x40010c00
 8000404:	40010000 	.word	0x40010000

08000408 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800040c:	f000 fd92 	bl	8000f34 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000410:	f000 f832 	bl	8000478 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000414:	f7ff feb8 	bl	8000188 <MX_GPIO_Init>
  MX_DMA_Init();
 8000418:	f7ff fe98 	bl	800014c <MX_DMA_Init>
  MX_USART1_UART_Init();
 800041c:	f000 fcaa 	bl	8000d74 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8000420:	f7ff ff74 	bl	800030c <MX_I2C1_Init>
  MX_RTC_Init();
 8000424:	f000 f9da 	bl	80007dc <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  //HAL_UART_Receive_IT(&huart1, RX1_Buffer, 4);
  //HAL_UART_Receive_DMA(&huart1, RX1_Buffer, 1);
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);
 8000428:	4b0e      	ldr	r3, [pc, #56]	@ (8000464 <main+0x5c>)
 800042a:	681b      	ldr	r3, [r3, #0]
 800042c:	68da      	ldr	r2, [r3, #12]
 800042e:	4b0d      	ldr	r3, [pc, #52]	@ (8000464 <main+0x5c>)
 8000430:	681b      	ldr	r3, [r3, #0]
 8000432:	f042 0210 	orr.w	r2, r2, #16
 8000436:	60da      	str	r2, [r3, #12]
  HAL_UART_Receive_DMA(&huart1, RX1_Buffer, DMA_BUF_SIZE);
 8000438:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800043c:	490a      	ldr	r1, [pc, #40]	@ (8000468 <main+0x60>)
 800043e:	4809      	ldr	r0, [pc, #36]	@ (8000464 <main+0x5c>)
 8000440:	f003 fc19 	bl	8003c76 <HAL_UART_Receive_DMA>
  printf("The system has been initialized!\n");
 8000444:	4809      	ldr	r0, [pc, #36]	@ (800046c <main+0x64>)
 8000446:	f004 fc5d 	bl	8004d04 <puts>
  OLED_Init();
 800044a:	f000 f8a9 	bl	80005a0 <OLED_Init>
  printf("The OLED has been initialized!\n");
 800044e:	4808      	ldr	r0, [pc, #32]	@ (8000470 <main+0x68>)
 8000450:	f004 fc58 	bl	8004d04 <puts>
  OLED_Test();
 8000454:	f000 f9a4 	bl	80007a0 <OLED_Test>
  //printf("The IWDG has been initialized!\n");
  printf("The WWDG has been initialized!\n");
 8000458:	4806      	ldr	r0, [pc, #24]	@ (8000474 <main+0x6c>)
 800045a:	f004 fc53 	bl	8004d04 <puts>
  while (1)
  {
	  //IWDG_Test();
	  //printf("HELLO WORLD!\n");
	  //HAL_Delay(1000);
	  RTC_Test();
 800045e:	f000 fa2b 	bl	80008b8 <RTC_Test>
 8000462:	e7fc      	b.n	800045e <main+0x56>
 8000464:	20000238 	.word	0x20000238
 8000468:	20000118 	.word	0x20000118
 800046c:	08005a60 	.word	0x08005a60
 8000470:	08005a84 	.word	0x08005a84
 8000474:	08005aa4 	.word	0x08005aa4

08000478 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	b094      	sub	sp, #80	@ 0x50
 800047c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800047e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000482:	2228      	movs	r2, #40	@ 0x28
 8000484:	2100      	movs	r1, #0
 8000486:	4618      	mov	r0, r3
 8000488:	f004 fd1c 	bl	8004ec4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800048c:	f107 0314 	add.w	r3, r7, #20
 8000490:	2200      	movs	r2, #0
 8000492:	601a      	str	r2, [r3, #0]
 8000494:	605a      	str	r2, [r3, #4]
 8000496:	609a      	str	r2, [r3, #8]
 8000498:	60da      	str	r2, [r3, #12]
 800049a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800049c:	1d3b      	adds	r3, r7, #4
 800049e:	2200      	movs	r2, #0
 80004a0:	601a      	str	r2, [r3, #0]
 80004a2:	605a      	str	r2, [r3, #4]
 80004a4:	609a      	str	r2, [r3, #8]
 80004a6:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80004a8:	2309      	movs	r3, #9
 80004aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80004ac:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80004b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80004b2:	2300      	movs	r3, #0
 80004b4:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004b6:	2301      	movs	r3, #1
 80004b8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80004ba:	2301      	movs	r3, #1
 80004bc:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004be:	2302      	movs	r3, #2
 80004c0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80004c2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80004c6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80004c8:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80004cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004ce:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80004d2:	4618      	mov	r0, r3
 80004d4:	f001 ffd0 	bl	8002478 <HAL_RCC_OscConfig>
 80004d8:	4603      	mov	r3, r0
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d001      	beq.n	80004e2 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80004de:	f000 f828 	bl	8000532 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004e2:	230f      	movs	r3, #15
 80004e4:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004e6:	2302      	movs	r3, #2
 80004e8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004ea:	2300      	movs	r3, #0
 80004ec:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80004ee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80004f2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004f4:	2300      	movs	r3, #0
 80004f6:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80004f8:	f107 0314 	add.w	r3, r7, #20
 80004fc:	2102      	movs	r1, #2
 80004fe:	4618      	mov	r0, r3
 8000500:	f002 fa3c 	bl	800297c <HAL_RCC_ClockConfig>
 8000504:	4603      	mov	r3, r0
 8000506:	2b00      	cmp	r3, #0
 8000508:	d001      	beq.n	800050e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800050a:	f000 f812 	bl	8000532 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800050e:	2301      	movs	r3, #1
 8000510:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000512:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000516:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000518:	1d3b      	adds	r3, r7, #4
 800051a:	4618      	mov	r0, r3
 800051c:	f002 fbbc 	bl	8002c98 <HAL_RCCEx_PeriphCLKConfig>
 8000520:	4603      	mov	r3, r0
 8000522:	2b00      	cmp	r3, #0
 8000524:	d001      	beq.n	800052a <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000526:	f000 f804 	bl	8000532 <Error_Handler>
  }
}
 800052a:	bf00      	nop
 800052c:	3750      	adds	r7, #80	@ 0x50
 800052e:	46bd      	mov	sp, r7
 8000530:	bd80      	pop	{r7, pc}

08000532 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000532:	b480      	push	{r7}
 8000534:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000536:	b672      	cpsid	i
}
 8000538:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800053a:	bf00      	nop
 800053c:	e7fd      	b.n	800053a <Error_Handler+0x8>
	...

08000540 <WriteCmd>:
#include "oled.h"
#include "codetab.h"

void WriteCmd(unsigned char I2C_Command)//写命令
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b086      	sub	sp, #24
 8000544:	af04      	add	r7, sp, #16
 8000546:	4603      	mov	r3, r0
 8000548:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1,OLED0561_ADD,COM,I2C_MEMADD_SIZE_8BIT,&I2C_Command,1,1000);
 800054a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800054e:	9302      	str	r3, [sp, #8]
 8000550:	2301      	movs	r3, #1
 8000552:	9301      	str	r3, [sp, #4]
 8000554:	1dfb      	adds	r3, r7, #7
 8000556:	9300      	str	r3, [sp, #0]
 8000558:	2301      	movs	r3, #1
 800055a:	2200      	movs	r2, #0
 800055c:	2178      	movs	r1, #120	@ 0x78
 800055e:	4803      	ldr	r0, [pc, #12]	@ (800056c <WriteCmd+0x2c>)
 8000560:	f001 fc16 	bl	8001d90 <HAL_I2C_Mem_Write>
}
 8000564:	bf00      	nop
 8000566:	3708      	adds	r7, #8
 8000568:	46bd      	mov	sp, r7
 800056a:	bd80      	pop	{r7, pc}
 800056c:	200000c4 	.word	0x200000c4

08000570 <WriteDat>:

void WriteDat(unsigned char I2C_Data)//写数据
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b086      	sub	sp, #24
 8000574:	af04      	add	r7, sp, #16
 8000576:	4603      	mov	r3, r0
 8000578:	71fb      	strb	r3, [r7, #7]
		HAL_I2C_Mem_Write(&hi2c1,OLED0561_ADD,DAT,I2C_MEMADD_SIZE_8BIT,&I2C_Data,1,1000);
 800057a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800057e:	9302      	str	r3, [sp, #8]
 8000580:	2301      	movs	r3, #1
 8000582:	9301      	str	r3, [sp, #4]
 8000584:	1dfb      	adds	r3, r7, #7
 8000586:	9300      	str	r3, [sp, #0]
 8000588:	2301      	movs	r3, #1
 800058a:	2240      	movs	r2, #64	@ 0x40
 800058c:	2178      	movs	r1, #120	@ 0x78
 800058e:	4803      	ldr	r0, [pc, #12]	@ (800059c <WriteDat+0x2c>)
 8000590:	f001 fbfe 	bl	8001d90 <HAL_I2C_Mem_Write>
}
 8000594:	bf00      	nop
 8000596:	3708      	adds	r7, #8
 8000598:	46bd      	mov	sp, r7
 800059a:	bd80      	pop	{r7, pc}
 800059c:	200000c4 	.word	0x200000c4

080005a0 <OLED_Init>:

void OLED_Init(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0
	HAL_Delay(100); //这里的延时很重要
 80005a4:	2064      	movs	r0, #100	@ 0x64
 80005a6:	f000 fd27 	bl	8000ff8 <HAL_Delay>

	WriteCmd(0xAE); //display off
 80005aa:	20ae      	movs	r0, #174	@ 0xae
 80005ac:	f7ff ffc8 	bl	8000540 <WriteCmd>
	WriteCmd(0x20);	//Set Memory Addressing Mode
 80005b0:	2020      	movs	r0, #32
 80005b2:	f7ff ffc5 	bl	8000540 <WriteCmd>
	WriteCmd(0x10);	//00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80005b6:	2010      	movs	r0, #16
 80005b8:	f7ff ffc2 	bl	8000540 <WriteCmd>
	WriteCmd(0xb0);	//Set Page Start Address for Page Addressing Mode,0-7
 80005bc:	20b0      	movs	r0, #176	@ 0xb0
 80005be:	f7ff ffbf 	bl	8000540 <WriteCmd>
	WriteCmd(0xc8);	//Set COM Output Scan Direction
 80005c2:	20c8      	movs	r0, #200	@ 0xc8
 80005c4:	f7ff ffbc 	bl	8000540 <WriteCmd>
	WriteCmd(0x00); //---set low column address
 80005c8:	2000      	movs	r0, #0
 80005ca:	f7ff ffb9 	bl	8000540 <WriteCmd>
	WriteCmd(0x10); //---set high column address
 80005ce:	2010      	movs	r0, #16
 80005d0:	f7ff ffb6 	bl	8000540 <WriteCmd>
	WriteCmd(0x40); //--set start line address
 80005d4:	2040      	movs	r0, #64	@ 0x40
 80005d6:	f7ff ffb3 	bl	8000540 <WriteCmd>
	WriteCmd(0x81); //--set contrast control register
 80005da:	2081      	movs	r0, #129	@ 0x81
 80005dc:	f7ff ffb0 	bl	8000540 <WriteCmd>
	WriteCmd(0xff); //亮度调节 0x00~0xff
 80005e0:	20ff      	movs	r0, #255	@ 0xff
 80005e2:	f7ff ffad 	bl	8000540 <WriteCmd>
	WriteCmd(0xa1); //--set segment re-map 0 to 127
 80005e6:	20a1      	movs	r0, #161	@ 0xa1
 80005e8:	f7ff ffaa 	bl	8000540 <WriteCmd>
	WriteCmd(0xa6); //--set normal display
 80005ec:	20a6      	movs	r0, #166	@ 0xa6
 80005ee:	f7ff ffa7 	bl	8000540 <WriteCmd>
	WriteCmd(0xa8); //--set multiplex ratio(1 to 64)
 80005f2:	20a8      	movs	r0, #168	@ 0xa8
 80005f4:	f7ff ffa4 	bl	8000540 <WriteCmd>
	WriteCmd(0x3F); //
 80005f8:	203f      	movs	r0, #63	@ 0x3f
 80005fa:	f7ff ffa1 	bl	8000540 <WriteCmd>
	WriteCmd(0xa4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80005fe:	20a4      	movs	r0, #164	@ 0xa4
 8000600:	f7ff ff9e 	bl	8000540 <WriteCmd>
	WriteCmd(0xd3); //-set display offset
 8000604:	20d3      	movs	r0, #211	@ 0xd3
 8000606:	f7ff ff9b 	bl	8000540 <WriteCmd>
	WriteCmd(0x00); //-not offset
 800060a:	2000      	movs	r0, #0
 800060c:	f7ff ff98 	bl	8000540 <WriteCmd>
	WriteCmd(0xd5); //--set display clock divide ratio/oscillator frequency
 8000610:	20d5      	movs	r0, #213	@ 0xd5
 8000612:	f7ff ff95 	bl	8000540 <WriteCmd>
	WriteCmd(0xf0); //--set divide ratio
 8000616:	20f0      	movs	r0, #240	@ 0xf0
 8000618:	f7ff ff92 	bl	8000540 <WriteCmd>
	WriteCmd(0xd9); //--set pre-charge period
 800061c:	20d9      	movs	r0, #217	@ 0xd9
 800061e:	f7ff ff8f 	bl	8000540 <WriteCmd>
	WriteCmd(0x22); //
 8000622:	2022      	movs	r0, #34	@ 0x22
 8000624:	f7ff ff8c 	bl	8000540 <WriteCmd>
	WriteCmd(0xda); //--set com pins hardware configuration
 8000628:	20da      	movs	r0, #218	@ 0xda
 800062a:	f7ff ff89 	bl	8000540 <WriteCmd>
	WriteCmd(0x12);
 800062e:	2012      	movs	r0, #18
 8000630:	f7ff ff86 	bl	8000540 <WriteCmd>
	WriteCmd(0xdb); //--set vcomh
 8000634:	20db      	movs	r0, #219	@ 0xdb
 8000636:	f7ff ff83 	bl	8000540 <WriteCmd>
	WriteCmd(0x20); //0x20,0.77xVcc
 800063a:	2020      	movs	r0, #32
 800063c:	f7ff ff80 	bl	8000540 <WriteCmd>
	WriteCmd(0x8d); //--set DC-DC enable
 8000640:	208d      	movs	r0, #141	@ 0x8d
 8000642:	f7ff ff7d 	bl	8000540 <WriteCmd>
	WriteCmd(0x14); //
 8000646:	2014      	movs	r0, #20
 8000648:	f7ff ff7a 	bl	8000540 <WriteCmd>
	WriteCmd(0xaf); //--turn on oled panel
 800064c:	20af      	movs	r0, #175	@ 0xaf
 800064e:	f7ff ff77 	bl	8000540 <WriteCmd>
}
 8000652:	bf00      	nop
 8000654:	bd80      	pop	{r7, pc}

08000656 <OLED_SetPos>:

void OLED_SetPos(unsigned char x, unsigned char y) //设置起始点坐标
{
 8000656:	b580      	push	{r7, lr}
 8000658:	b082      	sub	sp, #8
 800065a:	af00      	add	r7, sp, #0
 800065c:	4603      	mov	r3, r0
 800065e:	460a      	mov	r2, r1
 8000660:	71fb      	strb	r3, [r7, #7]
 8000662:	4613      	mov	r3, r2
 8000664:	71bb      	strb	r3, [r7, #6]
	WriteCmd(0xb0+y);
 8000666:	79bb      	ldrb	r3, [r7, #6]
 8000668:	3b50      	subs	r3, #80	@ 0x50
 800066a:	b2db      	uxtb	r3, r3
 800066c:	4618      	mov	r0, r3
 800066e:	f7ff ff67 	bl	8000540 <WriteCmd>
	WriteCmd(((x&0xf0)>>4)|0x10);
 8000672:	79fb      	ldrb	r3, [r7, #7]
 8000674:	091b      	lsrs	r3, r3, #4
 8000676:	b2db      	uxtb	r3, r3
 8000678:	f043 0310 	orr.w	r3, r3, #16
 800067c:	b2db      	uxtb	r3, r3
 800067e:	4618      	mov	r0, r3
 8000680:	f7ff ff5e 	bl	8000540 <WriteCmd>
	WriteCmd((x&0x0f)|0x01);
 8000684:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000688:	f003 030e 	and.w	r3, r3, #14
 800068c:	b25b      	sxtb	r3, r3
 800068e:	f043 0301 	orr.w	r3, r3, #1
 8000692:	b25b      	sxtb	r3, r3
 8000694:	b2db      	uxtb	r3, r3
 8000696:	4618      	mov	r0, r3
 8000698:	f7ff ff52 	bl	8000540 <WriteCmd>
}
 800069c:	bf00      	nop
 800069e:	3708      	adds	r7, #8
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}

080006a4 <OLED_Fill>:

void OLED_Fill(unsigned char fill_Data)//全屏填充
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b084      	sub	sp, #16
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	4603      	mov	r3, r0
 80006ac:	71fb      	strb	r3, [r7, #7]
	unsigned char m,n;
	for(m=0;m<8;m++)
 80006ae:	2300      	movs	r3, #0
 80006b0:	73fb      	strb	r3, [r7, #15]
 80006b2:	e01c      	b.n	80006ee <OLED_Fill+0x4a>
	{
		WriteCmd(0xb0+m);		//page0-page1
 80006b4:	7bfb      	ldrb	r3, [r7, #15]
 80006b6:	3b50      	subs	r3, #80	@ 0x50
 80006b8:	b2db      	uxtb	r3, r3
 80006ba:	4618      	mov	r0, r3
 80006bc:	f7ff ff40 	bl	8000540 <WriteCmd>
		WriteCmd(0x00);		//low column start address
 80006c0:	2000      	movs	r0, #0
 80006c2:	f7ff ff3d 	bl	8000540 <WriteCmd>
		WriteCmd(0x10);		//high column start address
 80006c6:	2010      	movs	r0, #16
 80006c8:	f7ff ff3a 	bl	8000540 <WriteCmd>
		for(n=0;n<128;n++)
 80006cc:	2300      	movs	r3, #0
 80006ce:	73bb      	strb	r3, [r7, #14]
 80006d0:	e006      	b.n	80006e0 <OLED_Fill+0x3c>
		{
			WriteDat(fill_Data);
 80006d2:	79fb      	ldrb	r3, [r7, #7]
 80006d4:	4618      	mov	r0, r3
 80006d6:	f7ff ff4b 	bl	8000570 <WriteDat>
		for(n=0;n<128;n++)
 80006da:	7bbb      	ldrb	r3, [r7, #14]
 80006dc:	3301      	adds	r3, #1
 80006de:	73bb      	strb	r3, [r7, #14]
 80006e0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	daf4      	bge.n	80006d2 <OLED_Fill+0x2e>
	for(m=0;m<8;m++)
 80006e8:	7bfb      	ldrb	r3, [r7, #15]
 80006ea:	3301      	adds	r3, #1
 80006ec:	73fb      	strb	r3, [r7, #15]
 80006ee:	7bfb      	ldrb	r3, [r7, #15]
 80006f0:	2b07      	cmp	r3, #7
 80006f2:	d9df      	bls.n	80006b4 <OLED_Fill+0x10>
		}
	}
}
 80006f4:	bf00      	nop
 80006f6:	bf00      	nop
 80006f8:	3710      	adds	r7, #16
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}

080006fe <OLED_CLS>:

void OLED_CLS(void)//清屏
{
 80006fe:	b580      	push	{r7, lr}
 8000700:	af00      	add	r7, sp, #0
	OLED_Fill(0x00);
 8000702:	2000      	movs	r0, #0
 8000704:	f7ff ffce 	bl	80006a4 <OLED_Fill>
}
 8000708:	bf00      	nop
 800070a:	bd80      	pop	{r7, pc}

0800070c <OLED_ShowCN>:
}

// Parameters     : x,y -- 起始点坐标(x:0~127, y:0~7); N:汉字在.h中的索引
// Description    : 显示ASCII_8x16.h中的汉字,16*16点阵
void OLED_ShowCN(unsigned char x, unsigned char y, unsigned char N)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b084      	sub	sp, #16
 8000710:	af00      	add	r7, sp, #0
 8000712:	4603      	mov	r3, r0
 8000714:	71fb      	strb	r3, [r7, #7]
 8000716:	460b      	mov	r3, r1
 8000718:	71bb      	strb	r3, [r7, #6]
 800071a:	4613      	mov	r3, r2
 800071c:	717b      	strb	r3, [r7, #5]
	unsigned char wm=0;
 800071e:	2300      	movs	r3, #0
 8000720:	73fb      	strb	r3, [r7, #15]
	unsigned int  adder=32*N;
 8000722:	797b      	ldrb	r3, [r7, #5]
 8000724:	015b      	lsls	r3, r3, #5
 8000726:	60bb      	str	r3, [r7, #8]
	OLED_SetPos(x , y);
 8000728:	79ba      	ldrb	r2, [r7, #6]
 800072a:	79fb      	ldrb	r3, [r7, #7]
 800072c:	4611      	mov	r1, r2
 800072e:	4618      	mov	r0, r3
 8000730:	f7ff ff91 	bl	8000656 <OLED_SetPos>
	for(wm = 0;wm < 16;wm++)
 8000734:	2300      	movs	r3, #0
 8000736:	73fb      	strb	r3, [r7, #15]
 8000738:	e00c      	b.n	8000754 <OLED_ShowCN+0x48>
	{
		WriteDat(F16x16[adder]);
 800073a:	4a18      	ldr	r2, [pc, #96]	@ (800079c <OLED_ShowCN+0x90>)
 800073c:	68bb      	ldr	r3, [r7, #8]
 800073e:	4413      	add	r3, r2
 8000740:	781b      	ldrb	r3, [r3, #0]
 8000742:	4618      	mov	r0, r3
 8000744:	f7ff ff14 	bl	8000570 <WriteDat>
		adder += 1;
 8000748:	68bb      	ldr	r3, [r7, #8]
 800074a:	3301      	adds	r3, #1
 800074c:	60bb      	str	r3, [r7, #8]
	for(wm = 0;wm < 16;wm++)
 800074e:	7bfb      	ldrb	r3, [r7, #15]
 8000750:	3301      	adds	r3, #1
 8000752:	73fb      	strb	r3, [r7, #15]
 8000754:	7bfb      	ldrb	r3, [r7, #15]
 8000756:	2b0f      	cmp	r3, #15
 8000758:	d9ef      	bls.n	800073a <OLED_ShowCN+0x2e>
	}
	OLED_SetPos(x,y + 1);
 800075a:	79bb      	ldrb	r3, [r7, #6]
 800075c:	3301      	adds	r3, #1
 800075e:	b2da      	uxtb	r2, r3
 8000760:	79fb      	ldrb	r3, [r7, #7]
 8000762:	4611      	mov	r1, r2
 8000764:	4618      	mov	r0, r3
 8000766:	f7ff ff76 	bl	8000656 <OLED_SetPos>
	for(wm = 0;wm < 16;wm++)
 800076a:	2300      	movs	r3, #0
 800076c:	73fb      	strb	r3, [r7, #15]
 800076e:	e00c      	b.n	800078a <OLED_ShowCN+0x7e>
	{
		WriteDat(F16x16[adder]);
 8000770:	4a0a      	ldr	r2, [pc, #40]	@ (800079c <OLED_ShowCN+0x90>)
 8000772:	68bb      	ldr	r3, [r7, #8]
 8000774:	4413      	add	r3, r2
 8000776:	781b      	ldrb	r3, [r3, #0]
 8000778:	4618      	mov	r0, r3
 800077a:	f7ff fef9 	bl	8000570 <WriteDat>
		adder += 1;
 800077e:	68bb      	ldr	r3, [r7, #8]
 8000780:	3301      	adds	r3, #1
 8000782:	60bb      	str	r3, [r7, #8]
	for(wm = 0;wm < 16;wm++)
 8000784:	7bfb      	ldrb	r3, [r7, #15]
 8000786:	3301      	adds	r3, #1
 8000788:	73fb      	strb	r3, [r7, #15]
 800078a:	7bfb      	ldrb	r3, [r7, #15]
 800078c:	2b0f      	cmp	r3, #15
 800078e:	d9ef      	bls.n	8000770 <OLED_ShowCN+0x64>
	}
}
 8000790:	bf00      	nop
 8000792:	bf00      	nop
 8000794:	3710      	adds	r7, #16
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	20000000 	.word	0x20000000

080007a0 <OLED_Test>:
	 	OLED_ShowChar(x+(size2/2)*t,y,temp+'0',size2);
	}
}

void OLED_Test()
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b082      	sub	sp, #8
 80007a4:	af00      	add	r7, sp, #0
	OLED_CLS();
 80007a6:	f7ff ffaa 	bl	80006fe <OLED_CLS>
	//OLED_ShowStr(0, 0, (unsigned char *) "hello world", 2);
	//OLED_DrawBMP(0,0,128,7,BMP1);
	for (int i = 0; i < 2; i++)
 80007aa:	2300      	movs	r3, #0
 80007ac:	607b      	str	r3, [r7, #4]
 80007ae:	e00c      	b.n	80007ca <OLED_Test+0x2a>
	{
		OLED_ShowCN(i * 16, 2, i);
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	b2db      	uxtb	r3, r3
 80007b4:	011b      	lsls	r3, r3, #4
 80007b6:	b2db      	uxtb	r3, r3
 80007b8:	687a      	ldr	r2, [r7, #4]
 80007ba:	b2d2      	uxtb	r2, r2
 80007bc:	2102      	movs	r1, #2
 80007be:	4618      	mov	r0, r3
 80007c0:	f7ff ffa4 	bl	800070c <OLED_ShowCN>
	for (int i = 0; i < 2; i++)
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	3301      	adds	r3, #1
 80007c8:	607b      	str	r3, [r7, #4]
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	2b01      	cmp	r3, #1
 80007ce:	ddef      	ble.n	80007b0 <OLED_Test+0x10>
	}
}
 80007d0:	bf00      	nop
 80007d2:	bf00      	nop
 80007d4:	3708      	adds	r7, #8
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
	...

080007dc <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b082      	sub	sp, #8
 80007e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80007e2:	1d3b      	adds	r3, r7, #4
 80007e4:	2100      	movs	r1, #0
 80007e6:	460a      	mov	r2, r1
 80007e8:	801a      	strh	r2, [r3, #0]
 80007ea:	460a      	mov	r2, r1
 80007ec:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 80007ee:	2300      	movs	r3, #0
 80007f0:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80007f2:	4b1d      	ldr	r3, [pc, #116]	@ (8000868 <MX_RTC_Init+0x8c>)
 80007f4:	4a1d      	ldr	r2, [pc, #116]	@ (800086c <MX_RTC_Init+0x90>)
 80007f6:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 80007f8:	4b1b      	ldr	r3, [pc, #108]	@ (8000868 <MX_RTC_Init+0x8c>)
 80007fa:	f04f 32ff 	mov.w	r2, #4294967295
 80007fe:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_NONE;
 8000800:	4b19      	ldr	r3, [pc, #100]	@ (8000868 <MX_RTC_Init+0x8c>)
 8000802:	2200      	movs	r2, #0
 8000804:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000806:	4818      	ldr	r0, [pc, #96]	@ (8000868 <MX_RTC_Init+0x8c>)
 8000808:	f002 fbb2 	bl	8002f70 <HAL_RTC_Init>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <MX_RTC_Init+0x3a>
  {
    Error_Handler();
 8000812:	f7ff fe8e 	bl	8000532 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000816:	2300      	movs	r3, #0
 8000818:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 800081a:	2300      	movs	r3, #0
 800081c:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 800081e:	2300      	movs	r3, #0
 8000820:	71bb      	strb	r3, [r7, #6]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000822:	1d3b      	adds	r3, r7, #4
 8000824:	2201      	movs	r2, #1
 8000826:	4619      	mov	r1, r3
 8000828:	480f      	ldr	r0, [pc, #60]	@ (8000868 <MX_RTC_Init+0x8c>)
 800082a:	f002 fc2d 	bl	8003088 <HAL_RTC_SetTime>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <MX_RTC_Init+0x5c>
  {
    Error_Handler();
 8000834:	f7ff fe7d 	bl	8000532 <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_SATURDAY;
 8000838:	2306      	movs	r3, #6
 800083a:	703b      	strb	r3, [r7, #0]
  DateToUpdate.Month = RTC_MONTH_FEBRUARY;
 800083c:	2302      	movs	r3, #2
 800083e:	707b      	strb	r3, [r7, #1]
  DateToUpdate.Date = 0x7;
 8000840:	2307      	movs	r3, #7
 8000842:	70bb      	strb	r3, [r7, #2]
  DateToUpdate.Year = 0x25;
 8000844:	2325      	movs	r3, #37	@ 0x25
 8000846:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 8000848:	463b      	mov	r3, r7
 800084a:	2201      	movs	r2, #1
 800084c:	4619      	mov	r1, r3
 800084e:	4806      	ldr	r0, [pc, #24]	@ (8000868 <MX_RTC_Init+0x8c>)
 8000850:	f002 fd8a 	bl	8003368 <HAL_RTC_SetDate>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <MX_RTC_Init+0x82>
  {
    Error_Handler();
 800085a:	f7ff fe6a 	bl	8000532 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800085e:	bf00      	nop
 8000860:	3708      	adds	r7, #8
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	2000021c 	.word	0x2000021c
 800086c:	40002800 	.word	0x40002800

08000870 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b084      	sub	sp, #16
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	4a0b      	ldr	r2, [pc, #44]	@ (80008ac <HAL_RTC_MspInit+0x3c>)
 800087e:	4293      	cmp	r3, r2
 8000880:	d110      	bne.n	80008a4 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8000882:	f001 fded 	bl	8002460 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8000886:	4b0a      	ldr	r3, [pc, #40]	@ (80008b0 <HAL_RTC_MspInit+0x40>)
 8000888:	69db      	ldr	r3, [r3, #28]
 800088a:	4a09      	ldr	r2, [pc, #36]	@ (80008b0 <HAL_RTC_MspInit+0x40>)
 800088c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8000890:	61d3      	str	r3, [r2, #28]
 8000892:	4b07      	ldr	r3, [pc, #28]	@ (80008b0 <HAL_RTC_MspInit+0x40>)
 8000894:	69db      	ldr	r3, [r3, #28]
 8000896:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800089a:	60fb      	str	r3, [r7, #12]
 800089c:	68fb      	ldr	r3, [r7, #12]
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800089e:	4b05      	ldr	r3, [pc, #20]	@ (80008b4 <HAL_RTC_MspInit+0x44>)
 80008a0:	2201      	movs	r2, #1
 80008a2:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80008a4:	bf00      	nop
 80008a6:	3710      	adds	r7, #16
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	40002800 	.word	0x40002800
 80008b0:	40021000 	.word	0x40021000
 80008b4:	4242043c 	.word	0x4242043c

080008b8 <RTC_Test>:
  }
}

/* USER CODE BEGIN 1 */
void RTC_Test()
{
 80008b8:	b5b0      	push	{r4, r5, r7, lr}
 80008ba:	b086      	sub	sp, #24
 80008bc:	af04      	add	r7, sp, #16
	RTC_TimeTypeDef time = { 0 };
 80008be:	1d3b      	adds	r3, r7, #4
 80008c0:	2100      	movs	r1, #0
 80008c2:	460a      	mov	r2, r1
 80008c4:	801a      	strh	r2, [r3, #0]
 80008c6:	460a      	mov	r2, r1
 80008c8:	709a      	strb	r2, [r3, #2]
	RTC_DateTypeDef data = { 0 };
 80008ca:	2300      	movs	r3, #0
 80008cc:	603b      	str	r3, [r7, #0]
	HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN);
 80008ce:	1d3b      	adds	r3, r7, #4
 80008d0:	2200      	movs	r2, #0
 80008d2:	4619      	mov	r1, r3
 80008d4:	4811      	ldr	r0, [pc, #68]	@ (800091c <RTC_Test+0x64>)
 80008d6:	f002 fc6f 	bl	80031b8 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &data, RTC_FORMAT_BIN);
 80008da:	463b      	mov	r3, r7
 80008dc:	2200      	movs	r2, #0
 80008de:	4619      	mov	r1, r3
 80008e0:	480e      	ldr	r0, [pc, #56]	@ (800091c <RTC_Test+0x64>)
 80008e2:	f002 fdf7 	bl	80034d4 <HAL_RTC_GetDate>
	printf("%04d-%02d-%02d %02d:%02d:%02d\n", 2000+data.Year, data.Month, data.Date, time.Hours, time.Minutes, time.Seconds);
 80008e6:	78fb      	ldrb	r3, [r7, #3]
 80008e8:	f503 61fa 	add.w	r1, r3, #2000	@ 0x7d0
 80008ec:	787b      	ldrb	r3, [r7, #1]
 80008ee:	461c      	mov	r4, r3
 80008f0:	78bb      	ldrb	r3, [r7, #2]
 80008f2:	461d      	mov	r5, r3
 80008f4:	793b      	ldrb	r3, [r7, #4]
 80008f6:	797a      	ldrb	r2, [r7, #5]
 80008f8:	79b8      	ldrb	r0, [r7, #6]
 80008fa:	9002      	str	r0, [sp, #8]
 80008fc:	9201      	str	r2, [sp, #4]
 80008fe:	9300      	str	r3, [sp, #0]
 8000900:	462b      	mov	r3, r5
 8000902:	4622      	mov	r2, r4
 8000904:	4806      	ldr	r0, [pc, #24]	@ (8000920 <RTC_Test+0x68>)
 8000906:	f004 f98d 	bl	8004c24 <iprintf>
	HAL_Delay(1000);
 800090a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800090e:	f000 fb73 	bl	8000ff8 <HAL_Delay>
}
 8000912:	bf00      	nop
 8000914:	3708      	adds	r7, #8
 8000916:	46bd      	mov	sp, r7
 8000918:	bdb0      	pop	{r4, r5, r7, pc}
 800091a:	bf00      	nop
 800091c:	2000021c 	.word	0x2000021c
 8000920:	08005ac4 	.word	0x08005ac4

08000924 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000924:	b480      	push	{r7}
 8000926:	b085      	sub	sp, #20
 8000928:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800092a:	4b15      	ldr	r3, [pc, #84]	@ (8000980 <HAL_MspInit+0x5c>)
 800092c:	699b      	ldr	r3, [r3, #24]
 800092e:	4a14      	ldr	r2, [pc, #80]	@ (8000980 <HAL_MspInit+0x5c>)
 8000930:	f043 0301 	orr.w	r3, r3, #1
 8000934:	6193      	str	r3, [r2, #24]
 8000936:	4b12      	ldr	r3, [pc, #72]	@ (8000980 <HAL_MspInit+0x5c>)
 8000938:	699b      	ldr	r3, [r3, #24]
 800093a:	f003 0301 	and.w	r3, r3, #1
 800093e:	60bb      	str	r3, [r7, #8]
 8000940:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000942:	4b0f      	ldr	r3, [pc, #60]	@ (8000980 <HAL_MspInit+0x5c>)
 8000944:	69db      	ldr	r3, [r3, #28]
 8000946:	4a0e      	ldr	r2, [pc, #56]	@ (8000980 <HAL_MspInit+0x5c>)
 8000948:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800094c:	61d3      	str	r3, [r2, #28]
 800094e:	4b0c      	ldr	r3, [pc, #48]	@ (8000980 <HAL_MspInit+0x5c>)
 8000950:	69db      	ldr	r3, [r3, #28]
 8000952:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000956:	607b      	str	r3, [r7, #4]
 8000958:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800095a:	4b0a      	ldr	r3, [pc, #40]	@ (8000984 <HAL_MspInit+0x60>)
 800095c:	685b      	ldr	r3, [r3, #4]
 800095e:	60fb      	str	r3, [r7, #12]
 8000960:	68fb      	ldr	r3, [r7, #12]
 8000962:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000966:	60fb      	str	r3, [r7, #12]
 8000968:	68fb      	ldr	r3, [r7, #12]
 800096a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800096e:	60fb      	str	r3, [r7, #12]
 8000970:	4a04      	ldr	r2, [pc, #16]	@ (8000984 <HAL_MspInit+0x60>)
 8000972:	68fb      	ldr	r3, [r7, #12]
 8000974:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000976:	bf00      	nop
 8000978:	3714      	adds	r7, #20
 800097a:	46bd      	mov	sp, r7
 800097c:	bc80      	pop	{r7}
 800097e:	4770      	bx	lr
 8000980:	40021000 	.word	0x40021000
 8000984:	40010000 	.word	0x40010000

08000988 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800098c:	bf00      	nop
 800098e:	e7fd      	b.n	800098c <NMI_Handler+0x4>

08000990 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000994:	bf00      	nop
 8000996:	e7fd      	b.n	8000994 <HardFault_Handler+0x4>

08000998 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800099c:	bf00      	nop
 800099e:	e7fd      	b.n	800099c <MemManage_Handler+0x4>

080009a0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009a4:	bf00      	nop
 80009a6:	e7fd      	b.n	80009a4 <BusFault_Handler+0x4>

080009a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009ac:	bf00      	nop
 80009ae:	e7fd      	b.n	80009ac <UsageFault_Handler+0x4>

080009b0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009b4:	bf00      	nop
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bc80      	pop	{r7}
 80009ba:	4770      	bx	lr

080009bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009c0:	bf00      	nop
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bc80      	pop	{r7}
 80009c6:	4770      	bx	lr

080009c8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009cc:	bf00      	nop
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bc80      	pop	{r7}
 80009d2:	4770      	bx	lr

080009d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009d8:	f000 faf2 	bl	8000fc0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009dc:	bf00      	nop
 80009de:	bd80      	pop	{r7, pc}

080009e0 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80009e4:	2001      	movs	r0, #1
 80009e6:	f001 f877 	bl	8001ad8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80009ea:	bf00      	nop
 80009ec:	bd80      	pop	{r7, pc}
	...

080009f0 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80009f4:	4802      	ldr	r0, [pc, #8]	@ (8000a00 <DMA1_Channel5_IRQHandler+0x10>)
 80009f6:	f000 fd9f 	bl	8001538 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80009fa:	bf00      	nop
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	20000280 	.word	0x20000280

08000a04 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8000a08:	2020      	movs	r0, #32
 8000a0a:	f001 f865 	bl	8001ad8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000a0e:	bf00      	nop
 8000a10:	bd80      	pop	{r7, pc}
	...

08000a14 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000a18:	4803      	ldr	r0, [pc, #12]	@ (8000a28 <USART1_IRQHandler+0x14>)
 8000a1a:	f003 f951 	bl	8003cc0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  UART_IRQHandler(&huart1);
 8000a1e:	4802      	ldr	r0, [pc, #8]	@ (8000a28 <USART1_IRQHandler+0x14>)
 8000a20:	f000 f8b4 	bl	8000b8c <UART_IRQHandler>
  /* USER CODE END USART1_IRQn 1 */
}
 8000a24:	bf00      	nop
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	20000238 	.word	0x20000238

08000a2c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 1 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b082      	sub	sp, #8
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	4603      	mov	r3, r0
 8000a34:	80fb      	strh	r3, [r7, #6]
	static uint32_t oldUWTick = 0;
	if ((uwTick - oldUWTick) < 200) return;
 8000a36:	4b19      	ldr	r3, [pc, #100]	@ (8000a9c <HAL_GPIO_EXTI_Callback+0x70>)
 8000a38:	681a      	ldr	r2, [r3, #0]
 8000a3a:	4b19      	ldr	r3, [pc, #100]	@ (8000aa0 <HAL_GPIO_EXTI_Callback+0x74>)
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	1ad3      	subs	r3, r2, r3
 8000a40:	2bc7      	cmp	r3, #199	@ 0xc7
 8000a42:	d927      	bls.n	8000a94 <HAL_GPIO_EXTI_Callback+0x68>
	oldUWTick = uwTick;
 8000a44:	4b15      	ldr	r3, [pc, #84]	@ (8000a9c <HAL_GPIO_EXTI_Callback+0x70>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	4a15      	ldr	r2, [pc, #84]	@ (8000aa0 <HAL_GPIO_EXTI_Callback+0x74>)
 8000a4a:	6013      	str	r3, [r2, #0]
	if (GPIO_Pin == GPIO_PIN_5)
 8000a4c:	88fb      	ldrh	r3, [r7, #6]
 8000a4e:	2b20      	cmp	r3, #32
 8000a50:	d10e      	bne.n	8000a70 <HAL_GPIO_EXTI_Callback+0x44>
	{
		LED_Control(LED1, ON);
 8000a52:	2101      	movs	r1, #1
 8000a54:	2001      	movs	r0, #1
 8000a56:	f7ff fc21 	bl	800029c <LED_Control>
		LED_Control(LED2, ON);
 8000a5a:	2101      	movs	r1, #1
 8000a5c:	2002      	movs	r0, #2
 8000a5e:	f7ff fc1d 	bl	800029c <LED_Control>
		Key_Value = GPIO_PIN_5;
 8000a62:	4b10      	ldr	r3, [pc, #64]	@ (8000aa4 <HAL_GPIO_EXTI_Callback+0x78>)
 8000a64:	2220      	movs	r2, #32
 8000a66:	701a      	strb	r2, [r3, #0]
		printf("GPIO pin 5 has pressed\n");
 8000a68:	480f      	ldr	r0, [pc, #60]	@ (8000aa8 <HAL_GPIO_EXTI_Callback+0x7c>)
 8000a6a:	f004 f94b 	bl	8004d04 <puts>
 8000a6e:	e012      	b.n	8000a96 <HAL_GPIO_EXTI_Callback+0x6a>
	}
	else if (GPIO_Pin == GPIO_PIN_0)
 8000a70:	88fb      	ldrh	r3, [r7, #6]
 8000a72:	2b01      	cmp	r3, #1
 8000a74:	d10f      	bne.n	8000a96 <HAL_GPIO_EXTI_Callback+0x6a>
	{
		LED_Control(LED1, OFF);
 8000a76:	2100      	movs	r1, #0
 8000a78:	2001      	movs	r0, #1
 8000a7a:	f7ff fc0f 	bl	800029c <LED_Control>
		LED_Control(LED2, OFF);
 8000a7e:	2100      	movs	r1, #0
 8000a80:	2002      	movs	r0, #2
 8000a82:	f7ff fc0b 	bl	800029c <LED_Control>
		Key_Value = GPIO_PIN_0;
 8000a86:	4b07      	ldr	r3, [pc, #28]	@ (8000aa4 <HAL_GPIO_EXTI_Callback+0x78>)
 8000a88:	2201      	movs	r2, #1
 8000a8a:	701a      	strb	r2, [r3, #0]
		printf("GPIO pin 0 has pressed\n");
 8000a8c:	4807      	ldr	r0, [pc, #28]	@ (8000aac <HAL_GPIO_EXTI_Callback+0x80>)
 8000a8e:	f004 f939 	bl	8004d04 <puts>
 8000a92:	e000      	b.n	8000a96 <HAL_GPIO_EXTI_Callback+0x6a>
	if ((uwTick - oldUWTick) < 200) return;
 8000a94:	bf00      	nop
	}
}
 8000a96:	3708      	adds	r7, #8
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	200002c4 	.word	0x200002c4
 8000aa0:	20000230 	.word	0x20000230
 8000aa4:	20000219 	.word	0x20000219
 8000aa8:	08005ae4 	.word	0x08005ae4
 8000aac:	08005afc 	.word	0x08005afc

08000ab0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b084      	sub	sp, #16
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1)
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	4a12      	ldr	r2, [pc, #72]	@ (8000b08 <HAL_UART_RxCpltCallback+0x58>)
 8000abe:	4293      	cmp	r3, r2
 8000ac0:	d11e      	bne.n	8000b00 <HAL_UART_RxCpltCallback+0x50>
	{
		//HAL_UART_Transmit(&huart1, RX1_Buffer, 4, HAL_MAX_DELAY);
		//HAL_UART_Receive_IT(&huart1, RX1_Buffer, 4);
//		HAL_UART_Transmit_DMA(huart, RX1_Buffer, 1);
//		HAL_UART_Receive_IT(huart, RX1_Buffer, 1);
		uint8_t length = DMA_BUF_SIZE - RX1_OffSet;
 8000ac2:	4b12      	ldr	r3, [pc, #72]	@ (8000b0c <HAL_UART_RxCpltCallback+0x5c>)
 8000ac4:	781b      	ldrb	r3, [r3, #0]
 8000ac6:	425b      	negs	r3, r3
 8000ac8:	73fb      	strb	r3, [r7, #15]
		HAL_UART_Transmit(huart, RX1_Buffer + RX1_OffSet, length, HAL_MAX_DELAY);
 8000aca:	4b10      	ldr	r3, [pc, #64]	@ (8000b0c <HAL_UART_RxCpltCallback+0x5c>)
 8000acc:	781b      	ldrb	r3, [r3, #0]
 8000ace:	461a      	mov	r2, r3
 8000ad0:	4b0f      	ldr	r3, [pc, #60]	@ (8000b10 <HAL_UART_RxCpltCallback+0x60>)
 8000ad2:	18d1      	adds	r1, r2, r3
 8000ad4:	7bfb      	ldrb	r3, [r7, #15]
 8000ad6:	b29a      	uxth	r2, r3
 8000ad8:	f04f 33ff 	mov.w	r3, #4294967295
 8000adc:	6878      	ldr	r0, [r7, #4]
 8000ade:	f003 f83f 	bl	8003b60 <HAL_UART_Transmit>
		printf("\n");
 8000ae2:	200a      	movs	r0, #10
 8000ae4:	f004 f8b0 	bl	8004c48 <putchar>
		printf("RX1_OffSet=%d\n", RX1_OffSet + length);
 8000ae8:	4b08      	ldr	r3, [pc, #32]	@ (8000b0c <HAL_UART_RxCpltCallback+0x5c>)
 8000aea:	781b      	ldrb	r3, [r3, #0]
 8000aec:	461a      	mov	r2, r3
 8000aee:	7bfb      	ldrb	r3, [r7, #15]
 8000af0:	4413      	add	r3, r2
 8000af2:	4619      	mov	r1, r3
 8000af4:	4807      	ldr	r0, [pc, #28]	@ (8000b14 <HAL_UART_RxCpltCallback+0x64>)
 8000af6:	f004 f895 	bl	8004c24 <iprintf>
		RX1_OffSet = 0;
 8000afa:	4b04      	ldr	r3, [pc, #16]	@ (8000b0c <HAL_UART_RxCpltCallback+0x5c>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	701a      	strb	r2, [r3, #0]
	}
}
 8000b00:	bf00      	nop
 8000b02:	3710      	adds	r7, #16
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	40013800 	.word	0x40013800
 8000b0c:	20000218 	.word	0x20000218
 8000b10:	20000118 	.word	0x20000118
 8000b14:	08005b14 	.word	0x08005b14

08000b18 <HAL_UART_RxHalfCpltCallback>:

void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b084      	sub	sp, #16
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1)
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	4a15      	ldr	r2, [pc, #84]	@ (8000b7c <HAL_UART_RxHalfCpltCallback+0x64>)
 8000b26:	4293      	cmp	r3, r2
 8000b28:	d124      	bne.n	8000b74 <HAL_UART_RxHalfCpltCallback+0x5c>
	{
		uint8_t length = DMA_BUF_SIZE / 2 - RX1_OffSet;
 8000b2a:	4b15      	ldr	r3, [pc, #84]	@ (8000b80 <HAL_UART_RxHalfCpltCallback+0x68>)
 8000b2c:	781a      	ldrb	r2, [r3, #0]
 8000b2e:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 8000b32:	1a9b      	subs	r3, r3, r2
 8000b34:	73fb      	strb	r3, [r7, #15]
		//printf("HLength=%d\n", length);
		HAL_UART_Transmit(huart, RX1_Buffer + RX1_OffSet, length, HAL_MAX_DELAY);
 8000b36:	4b12      	ldr	r3, [pc, #72]	@ (8000b80 <HAL_UART_RxHalfCpltCallback+0x68>)
 8000b38:	781b      	ldrb	r3, [r3, #0]
 8000b3a:	461a      	mov	r2, r3
 8000b3c:	4b11      	ldr	r3, [pc, #68]	@ (8000b84 <HAL_UART_RxHalfCpltCallback+0x6c>)
 8000b3e:	18d1      	adds	r1, r2, r3
 8000b40:	7bfb      	ldrb	r3, [r7, #15]
 8000b42:	b29a      	uxth	r2, r3
 8000b44:	f04f 33ff 	mov.w	r3, #4294967295
 8000b48:	6878      	ldr	r0, [r7, #4]
 8000b4a:	f003 f809 	bl	8003b60 <HAL_UART_Transmit>
		printf("\n");
 8000b4e:	200a      	movs	r0, #10
 8000b50:	f004 f87a 	bl	8004c48 <putchar>
		printf("RX1_OffSet=%d\n", RX1_OffSet + length);
 8000b54:	4b0a      	ldr	r3, [pc, #40]	@ (8000b80 <HAL_UART_RxHalfCpltCallback+0x68>)
 8000b56:	781b      	ldrb	r3, [r3, #0]
 8000b58:	461a      	mov	r2, r3
 8000b5a:	7bfb      	ldrb	r3, [r7, #15]
 8000b5c:	4413      	add	r3, r2
 8000b5e:	4619      	mov	r1, r3
 8000b60:	4809      	ldr	r0, [pc, #36]	@ (8000b88 <HAL_UART_RxHalfCpltCallback+0x70>)
 8000b62:	f004 f85f 	bl	8004c24 <iprintf>
		RX1_OffSet += length;
 8000b66:	4b06      	ldr	r3, [pc, #24]	@ (8000b80 <HAL_UART_RxHalfCpltCallback+0x68>)
 8000b68:	781a      	ldrb	r2, [r3, #0]
 8000b6a:	7bfb      	ldrb	r3, [r7, #15]
 8000b6c:	4413      	add	r3, r2
 8000b6e:	b2da      	uxtb	r2, r3
 8000b70:	4b03      	ldr	r3, [pc, #12]	@ (8000b80 <HAL_UART_RxHalfCpltCallback+0x68>)
 8000b72:	701a      	strb	r2, [r3, #0]
	}
}
 8000b74:	bf00      	nop
 8000b76:	3710      	adds	r7, #16
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	40013800 	.word	0x40013800
 8000b80:	20000218 	.word	0x20000218
 8000b84:	20000118 	.word	0x20000118
 8000b88:	08005b14 	.word	0x08005b14

08000b8c <UART_IRQHandler>:

void UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b084      	sub	sp, #16
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1)
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	4a1e      	ldr	r2, [pc, #120]	@ (8000c14 <UART_IRQHandler+0x88>)
 8000b9a:	4293      	cmp	r3, r2
 8000b9c:	d136      	bne.n	8000c0c <UART_IRQHandler+0x80>
	{
		if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) != RESET)
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	f003 0310 	and.w	r3, r3, #16
 8000ba8:	2b10      	cmp	r3, #16
 8000baa:	d12f      	bne.n	8000c0c <UART_IRQHandler+0x80>
		{
			__HAL_UART_CLEAR_IDLEFLAG(huart);
 8000bac:	2300      	movs	r3, #0
 8000bae:	60bb      	str	r3, [r7, #8]
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	60bb      	str	r3, [r7, #8]
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	685b      	ldr	r3, [r3, #4]
 8000bbe:	60bb      	str	r3, [r7, #8]
 8000bc0:	68bb      	ldr	r3, [r7, #8]
			uint8_t length = DMA_BUF_SIZE - __HAL_DMA_GET_COUNTER(&hdma_usart1_rx) - RX1_OffSet;
 8000bc2:	4b15      	ldr	r3, [pc, #84]	@ (8000c18 <UART_IRQHandler+0x8c>)
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	685b      	ldr	r3, [r3, #4]
 8000bc8:	b2da      	uxtb	r2, r3
 8000bca:	4b14      	ldr	r3, [pc, #80]	@ (8000c1c <UART_IRQHandler+0x90>)
 8000bcc:	781b      	ldrb	r3, [r3, #0]
 8000bce:	4413      	add	r3, r2
 8000bd0:	b2db      	uxtb	r3, r3
 8000bd2:	425b      	negs	r3, r3
 8000bd4:	73fb      	strb	r3, [r7, #15]
			HAL_UART_Transmit(huart, RX1_Buffer + RX1_OffSet, length, HAL_MAX_DELAY);
 8000bd6:	4b11      	ldr	r3, [pc, #68]	@ (8000c1c <UART_IRQHandler+0x90>)
 8000bd8:	781b      	ldrb	r3, [r3, #0]
 8000bda:	461a      	mov	r2, r3
 8000bdc:	4b10      	ldr	r3, [pc, #64]	@ (8000c20 <UART_IRQHandler+0x94>)
 8000bde:	18d1      	adds	r1, r2, r3
 8000be0:	7bfb      	ldrb	r3, [r7, #15]
 8000be2:	b29a      	uxth	r2, r3
 8000be4:	f04f 33ff 	mov.w	r3, #4294967295
 8000be8:	6878      	ldr	r0, [r7, #4]
 8000bea:	f002 ffb9 	bl	8003b60 <HAL_UART_Transmit>
			printf("\n");
 8000bee:	200a      	movs	r0, #10
 8000bf0:	f004 f82a 	bl	8004c48 <putchar>
			printf("Idle Length=%d\n", length);
 8000bf4:	7bfb      	ldrb	r3, [r7, #15]
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	480a      	ldr	r0, [pc, #40]	@ (8000c24 <UART_IRQHandler+0x98>)
 8000bfa:	f004 f813 	bl	8004c24 <iprintf>
			RX1_OffSet += length;
 8000bfe:	4b07      	ldr	r3, [pc, #28]	@ (8000c1c <UART_IRQHandler+0x90>)
 8000c00:	781a      	ldrb	r2, [r3, #0]
 8000c02:	7bfb      	ldrb	r3, [r7, #15]
 8000c04:	4413      	add	r3, r2
 8000c06:	b2da      	uxtb	r2, r3
 8000c08:	4b04      	ldr	r3, [pc, #16]	@ (8000c1c <UART_IRQHandler+0x90>)
 8000c0a:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8000c0c:	bf00      	nop
 8000c0e:	3710      	adds	r7, #16
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	40013800 	.word	0x40013800
 8000c18:	20000280 	.word	0x20000280
 8000c1c:	20000218 	.word	0x20000218
 8000c20:	20000118 	.word	0x20000118
 8000c24:	08005b24 	.word	0x08005b24

08000c28 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b086      	sub	sp, #24
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	60f8      	str	r0, [r7, #12]
 8000c30:	60b9      	str	r1, [r7, #8]
 8000c32:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c34:	2300      	movs	r3, #0
 8000c36:	617b      	str	r3, [r7, #20]
 8000c38:	e00a      	b.n	8000c50 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000c3a:	f3af 8000 	nop.w
 8000c3e:	4601      	mov	r1, r0
 8000c40:	68bb      	ldr	r3, [r7, #8]
 8000c42:	1c5a      	adds	r2, r3, #1
 8000c44:	60ba      	str	r2, [r7, #8]
 8000c46:	b2ca      	uxtb	r2, r1
 8000c48:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c4a:	697b      	ldr	r3, [r7, #20]
 8000c4c:	3301      	adds	r3, #1
 8000c4e:	617b      	str	r3, [r7, #20]
 8000c50:	697a      	ldr	r2, [r7, #20]
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	429a      	cmp	r2, r3
 8000c56:	dbf0      	blt.n	8000c3a <_read+0x12>
  }

  return len;
 8000c58:	687b      	ldr	r3, [r7, #4]
}
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	3718      	adds	r7, #24
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}

08000c62 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c62:	b580      	push	{r7, lr}
 8000c64:	b086      	sub	sp, #24
 8000c66:	af00      	add	r7, sp, #0
 8000c68:	60f8      	str	r0, [r7, #12]
 8000c6a:	60b9      	str	r1, [r7, #8]
 8000c6c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c6e:	2300      	movs	r3, #0
 8000c70:	617b      	str	r3, [r7, #20]
 8000c72:	e009      	b.n	8000c88 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000c74:	68bb      	ldr	r3, [r7, #8]
 8000c76:	1c5a      	adds	r2, r3, #1
 8000c78:	60ba      	str	r2, [r7, #8]
 8000c7a:	781b      	ldrb	r3, [r3, #0]
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f000 f921 	bl	8000ec4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c82:	697b      	ldr	r3, [r7, #20]
 8000c84:	3301      	adds	r3, #1
 8000c86:	617b      	str	r3, [r7, #20]
 8000c88:	697a      	ldr	r2, [r7, #20]
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	429a      	cmp	r2, r3
 8000c8e:	dbf1      	blt.n	8000c74 <_write+0x12>
  }
  return len;
 8000c90:	687b      	ldr	r3, [r7, #4]
}
 8000c92:	4618      	mov	r0, r3
 8000c94:	3718      	adds	r7, #24
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}

08000c9a <_close>:

int _close(int file)
{
 8000c9a:	b480      	push	{r7}
 8000c9c:	b083      	sub	sp, #12
 8000c9e:	af00      	add	r7, sp, #0
 8000ca0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000ca2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	370c      	adds	r7, #12
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bc80      	pop	{r7}
 8000cae:	4770      	bx	lr

08000cb0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b083      	sub	sp, #12
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
 8000cb8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000cba:	683b      	ldr	r3, [r7, #0]
 8000cbc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000cc0:	605a      	str	r2, [r3, #4]
  return 0;
 8000cc2:	2300      	movs	r3, #0
}
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	370c      	adds	r7, #12
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bc80      	pop	{r7}
 8000ccc:	4770      	bx	lr

08000cce <_isatty>:

int _isatty(int file)
{
 8000cce:	b480      	push	{r7}
 8000cd0:	b083      	sub	sp, #12
 8000cd2:	af00      	add	r7, sp, #0
 8000cd4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000cd6:	2301      	movs	r3, #1
}
 8000cd8:	4618      	mov	r0, r3
 8000cda:	370c      	adds	r7, #12
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bc80      	pop	{r7}
 8000ce0:	4770      	bx	lr

08000ce2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ce2:	b480      	push	{r7}
 8000ce4:	b085      	sub	sp, #20
 8000ce6:	af00      	add	r7, sp, #0
 8000ce8:	60f8      	str	r0, [r7, #12]
 8000cea:	60b9      	str	r1, [r7, #8]
 8000cec:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000cee:	2300      	movs	r3, #0
}
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	3714      	adds	r7, #20
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bc80      	pop	{r7}
 8000cf8:	4770      	bx	lr
	...

08000cfc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b086      	sub	sp, #24
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d04:	4a14      	ldr	r2, [pc, #80]	@ (8000d58 <_sbrk+0x5c>)
 8000d06:	4b15      	ldr	r3, [pc, #84]	@ (8000d5c <_sbrk+0x60>)
 8000d08:	1ad3      	subs	r3, r2, r3
 8000d0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d0c:	697b      	ldr	r3, [r7, #20]
 8000d0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d10:	4b13      	ldr	r3, [pc, #76]	@ (8000d60 <_sbrk+0x64>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d102      	bne.n	8000d1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d18:	4b11      	ldr	r3, [pc, #68]	@ (8000d60 <_sbrk+0x64>)
 8000d1a:	4a12      	ldr	r2, [pc, #72]	@ (8000d64 <_sbrk+0x68>)
 8000d1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d1e:	4b10      	ldr	r3, [pc, #64]	@ (8000d60 <_sbrk+0x64>)
 8000d20:	681a      	ldr	r2, [r3, #0]
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	4413      	add	r3, r2
 8000d26:	693a      	ldr	r2, [r7, #16]
 8000d28:	429a      	cmp	r2, r3
 8000d2a:	d207      	bcs.n	8000d3c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d2c:	f004 f918 	bl	8004f60 <__errno>
 8000d30:	4603      	mov	r3, r0
 8000d32:	220c      	movs	r2, #12
 8000d34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d36:	f04f 33ff 	mov.w	r3, #4294967295
 8000d3a:	e009      	b.n	8000d50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d3c:	4b08      	ldr	r3, [pc, #32]	@ (8000d60 <_sbrk+0x64>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d42:	4b07      	ldr	r3, [pc, #28]	@ (8000d60 <_sbrk+0x64>)
 8000d44:	681a      	ldr	r2, [r3, #0]
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	4413      	add	r3, r2
 8000d4a:	4a05      	ldr	r2, [pc, #20]	@ (8000d60 <_sbrk+0x64>)
 8000d4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d4e:	68fb      	ldr	r3, [r7, #12]
}
 8000d50:	4618      	mov	r0, r3
 8000d52:	3718      	adds	r7, #24
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	20005000 	.word	0x20005000
 8000d5c:	00000400 	.word	0x00000400
 8000d60:	20000234 	.word	0x20000234
 8000d64:	20000418 	.word	0x20000418

08000d68 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d6c:	bf00      	nop
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bc80      	pop	{r7}
 8000d72:	4770      	bx	lr

08000d74 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000d78:	4b11      	ldr	r3, [pc, #68]	@ (8000dc0 <MX_USART1_UART_Init+0x4c>)
 8000d7a:	4a12      	ldr	r2, [pc, #72]	@ (8000dc4 <MX_USART1_UART_Init+0x50>)
 8000d7c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000d7e:	4b10      	ldr	r3, [pc, #64]	@ (8000dc0 <MX_USART1_UART_Init+0x4c>)
 8000d80:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000d84:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d86:	4b0e      	ldr	r3, [pc, #56]	@ (8000dc0 <MX_USART1_UART_Init+0x4c>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000d8c:	4b0c      	ldr	r3, [pc, #48]	@ (8000dc0 <MX_USART1_UART_Init+0x4c>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000d92:	4b0b      	ldr	r3, [pc, #44]	@ (8000dc0 <MX_USART1_UART_Init+0x4c>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000d98:	4b09      	ldr	r3, [pc, #36]	@ (8000dc0 <MX_USART1_UART_Init+0x4c>)
 8000d9a:	220c      	movs	r2, #12
 8000d9c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d9e:	4b08      	ldr	r3, [pc, #32]	@ (8000dc0 <MX_USART1_UART_Init+0x4c>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000da4:	4b06      	ldr	r3, [pc, #24]	@ (8000dc0 <MX_USART1_UART_Init+0x4c>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000daa:	4805      	ldr	r0, [pc, #20]	@ (8000dc0 <MX_USART1_UART_Init+0x4c>)
 8000dac:	f002 fe88 	bl	8003ac0 <HAL_UART_Init>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d001      	beq.n	8000dba <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000db6:	f7ff fbbc 	bl	8000532 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000dba:	bf00      	nop
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	20000238 	.word	0x20000238
 8000dc4:	40013800 	.word	0x40013800

08000dc8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b088      	sub	sp, #32
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd0:	f107 0310 	add.w	r3, r7, #16
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	601a      	str	r2, [r3, #0]
 8000dd8:	605a      	str	r2, [r3, #4]
 8000dda:	609a      	str	r2, [r3, #8]
 8000ddc:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	4a33      	ldr	r2, [pc, #204]	@ (8000eb0 <HAL_UART_MspInit+0xe8>)
 8000de4:	4293      	cmp	r3, r2
 8000de6:	d15f      	bne.n	8000ea8 <HAL_UART_MspInit+0xe0>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000de8:	4b32      	ldr	r3, [pc, #200]	@ (8000eb4 <HAL_UART_MspInit+0xec>)
 8000dea:	699b      	ldr	r3, [r3, #24]
 8000dec:	4a31      	ldr	r2, [pc, #196]	@ (8000eb4 <HAL_UART_MspInit+0xec>)
 8000dee:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000df2:	6193      	str	r3, [r2, #24]
 8000df4:	4b2f      	ldr	r3, [pc, #188]	@ (8000eb4 <HAL_UART_MspInit+0xec>)
 8000df6:	699b      	ldr	r3, [r3, #24]
 8000df8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000dfc:	60fb      	str	r3, [r7, #12]
 8000dfe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e00:	4b2c      	ldr	r3, [pc, #176]	@ (8000eb4 <HAL_UART_MspInit+0xec>)
 8000e02:	699b      	ldr	r3, [r3, #24]
 8000e04:	4a2b      	ldr	r2, [pc, #172]	@ (8000eb4 <HAL_UART_MspInit+0xec>)
 8000e06:	f043 0304 	orr.w	r3, r3, #4
 8000e0a:	6193      	str	r3, [r2, #24]
 8000e0c:	4b29      	ldr	r3, [pc, #164]	@ (8000eb4 <HAL_UART_MspInit+0xec>)
 8000e0e:	699b      	ldr	r3, [r3, #24]
 8000e10:	f003 0304 	and.w	r3, r3, #4
 8000e14:	60bb      	str	r3, [r7, #8]
 8000e16:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000e18:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000e1c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e1e:	2302      	movs	r3, #2
 8000e20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e22:	2303      	movs	r3, #3
 8000e24:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e26:	f107 0310 	add.w	r3, r7, #16
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	4822      	ldr	r0, [pc, #136]	@ (8000eb8 <HAL_UART_MspInit+0xf0>)
 8000e2e:	f000 fcb7 	bl	80017a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000e32:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000e36:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e3c:	2301      	movs	r3, #1
 8000e3e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e40:	f107 0310 	add.w	r3, r7, #16
 8000e44:	4619      	mov	r1, r3
 8000e46:	481c      	ldr	r0, [pc, #112]	@ (8000eb8 <HAL_UART_MspInit+0xf0>)
 8000e48:	f000 fcaa 	bl	80017a0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8000e4c:	4b1b      	ldr	r3, [pc, #108]	@ (8000ebc <HAL_UART_MspInit+0xf4>)
 8000e4e:	4a1c      	ldr	r2, [pc, #112]	@ (8000ec0 <HAL_UART_MspInit+0xf8>)
 8000e50:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e52:	4b1a      	ldr	r3, [pc, #104]	@ (8000ebc <HAL_UART_MspInit+0xf4>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e58:	4b18      	ldr	r3, [pc, #96]	@ (8000ebc <HAL_UART_MspInit+0xf4>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000e5e:	4b17      	ldr	r3, [pc, #92]	@ (8000ebc <HAL_UART_MspInit+0xf4>)
 8000e60:	2280      	movs	r2, #128	@ 0x80
 8000e62:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e64:	4b15      	ldr	r3, [pc, #84]	@ (8000ebc <HAL_UART_MspInit+0xf4>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e6a:	4b14      	ldr	r3, [pc, #80]	@ (8000ebc <HAL_UART_MspInit+0xf4>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8000e70:	4b12      	ldr	r3, [pc, #72]	@ (8000ebc <HAL_UART_MspInit+0xf4>)
 8000e72:	2220      	movs	r2, #32
 8000e74:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000e76:	4b11      	ldr	r3, [pc, #68]	@ (8000ebc <HAL_UART_MspInit+0xf4>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000e7c:	480f      	ldr	r0, [pc, #60]	@ (8000ebc <HAL_UART_MspInit+0xf4>)
 8000e7e:	f000 f9ed 	bl	800125c <HAL_DMA_Init>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d001      	beq.n	8000e8c <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 8000e88:	f7ff fb53 	bl	8000532 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	4a0b      	ldr	r2, [pc, #44]	@ (8000ebc <HAL_UART_MspInit+0xf4>)
 8000e90:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000e92:	4a0a      	ldr	r2, [pc, #40]	@ (8000ebc <HAL_UART_MspInit+0xf4>)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000e98:	2200      	movs	r2, #0
 8000e9a:	2100      	movs	r1, #0
 8000e9c:	2025      	movs	r0, #37	@ 0x25
 8000e9e:	f000 f9a6 	bl	80011ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000ea2:	2025      	movs	r0, #37	@ 0x25
 8000ea4:	f000 f9bf 	bl	8001226 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000ea8:	bf00      	nop
 8000eaa:	3720      	adds	r7, #32
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	40013800 	.word	0x40013800
 8000eb4:	40021000 	.word	0x40021000
 8000eb8:	40010800 	.word	0x40010800
 8000ebc:	20000280 	.word	0x20000280
 8000ec0:	40020058 	.word	0x40020058

08000ec4 <__io_putchar>:
  }
}

/* USER CODE BEGIN 1 */
int __io_putchar(int ch)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000ecc:	1d39      	adds	r1, r7, #4
 8000ece:	f04f 33ff 	mov.w	r3, #4294967295
 8000ed2:	2201      	movs	r2, #1
 8000ed4:	4803      	ldr	r0, [pc, #12]	@ (8000ee4 <__io_putchar+0x20>)
 8000ed6:	f002 fe43 	bl	8003b60 <HAL_UART_Transmit>
  return ch;
 8000eda:	687b      	ldr	r3, [r7, #4]
}
 8000edc:	4618      	mov	r0, r3
 8000ede:	3708      	adds	r7, #8
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	20000238 	.word	0x20000238

08000ee8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ee8:	f7ff ff3e 	bl	8000d68 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000eec:	480b      	ldr	r0, [pc, #44]	@ (8000f1c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000eee:	490c      	ldr	r1, [pc, #48]	@ (8000f20 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000ef0:	4a0c      	ldr	r2, [pc, #48]	@ (8000f24 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000ef2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ef4:	e002      	b.n	8000efc <LoopCopyDataInit>

08000ef6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ef6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ef8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000efa:	3304      	adds	r3, #4

08000efc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000efc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000efe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f00:	d3f9      	bcc.n	8000ef6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f02:	4a09      	ldr	r2, [pc, #36]	@ (8000f28 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000f04:	4c09      	ldr	r4, [pc, #36]	@ (8000f2c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f08:	e001      	b.n	8000f0e <LoopFillZerobss>

08000f0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f0c:	3204      	adds	r2, #4

08000f0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f10:	d3fb      	bcc.n	8000f0a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f12:	f004 f82b 	bl	8004f6c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f16:	f7ff fa77 	bl	8000408 <main>
  bx lr
 8000f1a:	4770      	bx	lr
  ldr r0, =_sdata
 8000f1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f20:	200000a8 	.word	0x200000a8
  ldr r2, =_sidata
 8000f24:	08005bb0 	.word	0x08005bb0
  ldr r2, =_sbss
 8000f28:	200000a8 	.word	0x200000a8
  ldr r4, =_ebss
 8000f2c:	20000414 	.word	0x20000414

08000f30 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f30:	e7fe      	b.n	8000f30 <ADC1_2_IRQHandler>
	...

08000f34 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f38:	4b08      	ldr	r3, [pc, #32]	@ (8000f5c <HAL_Init+0x28>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	4a07      	ldr	r2, [pc, #28]	@ (8000f5c <HAL_Init+0x28>)
 8000f3e:	f043 0310 	orr.w	r3, r3, #16
 8000f42:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f44:	2003      	movs	r0, #3
 8000f46:	f000 f947 	bl	80011d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f4a:	200f      	movs	r0, #15
 8000f4c:	f000 f808 	bl	8000f60 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f50:	f7ff fce8 	bl	8000924 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f54:	2300      	movs	r3, #0
}
 8000f56:	4618      	mov	r0, r3
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	40022000 	.word	0x40022000

08000f60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f68:	4b12      	ldr	r3, [pc, #72]	@ (8000fb4 <HAL_InitTick+0x54>)
 8000f6a:	681a      	ldr	r2, [r3, #0]
 8000f6c:	4b12      	ldr	r3, [pc, #72]	@ (8000fb8 <HAL_InitTick+0x58>)
 8000f6e:	781b      	ldrb	r3, [r3, #0]
 8000f70:	4619      	mov	r1, r3
 8000f72:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f76:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f000 f95f 	bl	8001242 <HAL_SYSTICK_Config>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d001      	beq.n	8000f8e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	e00e      	b.n	8000fac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	2b0f      	cmp	r3, #15
 8000f92:	d80a      	bhi.n	8000faa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f94:	2200      	movs	r2, #0
 8000f96:	6879      	ldr	r1, [r7, #4]
 8000f98:	f04f 30ff 	mov.w	r0, #4294967295
 8000f9c:	f000 f927 	bl	80011ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fa0:	4a06      	ldr	r2, [pc, #24]	@ (8000fbc <HAL_InitTick+0x5c>)
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	e000      	b.n	8000fac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000faa:	2301      	movs	r3, #1
}
 8000fac:	4618      	mov	r0, r3
 8000fae:	3708      	adds	r7, #8
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	20000040 	.word	0x20000040
 8000fb8:	20000048 	.word	0x20000048
 8000fbc:	20000044 	.word	0x20000044

08000fc0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fc4:	4b05      	ldr	r3, [pc, #20]	@ (8000fdc <HAL_IncTick+0x1c>)
 8000fc6:	781b      	ldrb	r3, [r3, #0]
 8000fc8:	461a      	mov	r2, r3
 8000fca:	4b05      	ldr	r3, [pc, #20]	@ (8000fe0 <HAL_IncTick+0x20>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	4413      	add	r3, r2
 8000fd0:	4a03      	ldr	r2, [pc, #12]	@ (8000fe0 <HAL_IncTick+0x20>)
 8000fd2:	6013      	str	r3, [r2, #0]
}
 8000fd4:	bf00      	nop
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bc80      	pop	{r7}
 8000fda:	4770      	bx	lr
 8000fdc:	20000048 	.word	0x20000048
 8000fe0:	200002c4 	.word	0x200002c4

08000fe4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
  return uwTick;
 8000fe8:	4b02      	ldr	r3, [pc, #8]	@ (8000ff4 <HAL_GetTick+0x10>)
 8000fea:	681b      	ldr	r3, [r3, #0]
}
 8000fec:	4618      	mov	r0, r3
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bc80      	pop	{r7}
 8000ff2:	4770      	bx	lr
 8000ff4:	200002c4 	.word	0x200002c4

08000ff8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b084      	sub	sp, #16
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001000:	f7ff fff0 	bl	8000fe4 <HAL_GetTick>
 8001004:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001010:	d005      	beq.n	800101e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001012:	4b0a      	ldr	r3, [pc, #40]	@ (800103c <HAL_Delay+0x44>)
 8001014:	781b      	ldrb	r3, [r3, #0]
 8001016:	461a      	mov	r2, r3
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	4413      	add	r3, r2
 800101c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800101e:	bf00      	nop
 8001020:	f7ff ffe0 	bl	8000fe4 <HAL_GetTick>
 8001024:	4602      	mov	r2, r0
 8001026:	68bb      	ldr	r3, [r7, #8]
 8001028:	1ad3      	subs	r3, r2, r3
 800102a:	68fa      	ldr	r2, [r7, #12]
 800102c:	429a      	cmp	r2, r3
 800102e:	d8f7      	bhi.n	8001020 <HAL_Delay+0x28>
  {
  }
}
 8001030:	bf00      	nop
 8001032:	bf00      	nop
 8001034:	3710      	adds	r7, #16
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	20000048 	.word	0x20000048

08001040 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001040:	b480      	push	{r7}
 8001042:	b085      	sub	sp, #20
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	f003 0307 	and.w	r3, r3, #7
 800104e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001050:	4b0c      	ldr	r3, [pc, #48]	@ (8001084 <__NVIC_SetPriorityGrouping+0x44>)
 8001052:	68db      	ldr	r3, [r3, #12]
 8001054:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001056:	68ba      	ldr	r2, [r7, #8]
 8001058:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800105c:	4013      	ands	r3, r2
 800105e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001064:	68bb      	ldr	r3, [r7, #8]
 8001066:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001068:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800106c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001070:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001072:	4a04      	ldr	r2, [pc, #16]	@ (8001084 <__NVIC_SetPriorityGrouping+0x44>)
 8001074:	68bb      	ldr	r3, [r7, #8]
 8001076:	60d3      	str	r3, [r2, #12]
}
 8001078:	bf00      	nop
 800107a:	3714      	adds	r7, #20
 800107c:	46bd      	mov	sp, r7
 800107e:	bc80      	pop	{r7}
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop
 8001084:	e000ed00 	.word	0xe000ed00

08001088 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800108c:	4b04      	ldr	r3, [pc, #16]	@ (80010a0 <__NVIC_GetPriorityGrouping+0x18>)
 800108e:	68db      	ldr	r3, [r3, #12]
 8001090:	0a1b      	lsrs	r3, r3, #8
 8001092:	f003 0307 	and.w	r3, r3, #7
}
 8001096:	4618      	mov	r0, r3
 8001098:	46bd      	mov	sp, r7
 800109a:	bc80      	pop	{r7}
 800109c:	4770      	bx	lr
 800109e:	bf00      	nop
 80010a0:	e000ed00 	.word	0xe000ed00

080010a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010a4:	b480      	push	{r7}
 80010a6:	b083      	sub	sp, #12
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	4603      	mov	r3, r0
 80010ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	db0b      	blt.n	80010ce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010b6:	79fb      	ldrb	r3, [r7, #7]
 80010b8:	f003 021f 	and.w	r2, r3, #31
 80010bc:	4906      	ldr	r1, [pc, #24]	@ (80010d8 <__NVIC_EnableIRQ+0x34>)
 80010be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010c2:	095b      	lsrs	r3, r3, #5
 80010c4:	2001      	movs	r0, #1
 80010c6:	fa00 f202 	lsl.w	r2, r0, r2
 80010ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80010ce:	bf00      	nop
 80010d0:	370c      	adds	r7, #12
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bc80      	pop	{r7}
 80010d6:	4770      	bx	lr
 80010d8:	e000e100 	.word	0xe000e100

080010dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010dc:	b480      	push	{r7}
 80010de:	b083      	sub	sp, #12
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	4603      	mov	r3, r0
 80010e4:	6039      	str	r1, [r7, #0]
 80010e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	db0a      	blt.n	8001106 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	b2da      	uxtb	r2, r3
 80010f4:	490c      	ldr	r1, [pc, #48]	@ (8001128 <__NVIC_SetPriority+0x4c>)
 80010f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010fa:	0112      	lsls	r2, r2, #4
 80010fc:	b2d2      	uxtb	r2, r2
 80010fe:	440b      	add	r3, r1
 8001100:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001104:	e00a      	b.n	800111c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	b2da      	uxtb	r2, r3
 800110a:	4908      	ldr	r1, [pc, #32]	@ (800112c <__NVIC_SetPriority+0x50>)
 800110c:	79fb      	ldrb	r3, [r7, #7]
 800110e:	f003 030f 	and.w	r3, r3, #15
 8001112:	3b04      	subs	r3, #4
 8001114:	0112      	lsls	r2, r2, #4
 8001116:	b2d2      	uxtb	r2, r2
 8001118:	440b      	add	r3, r1
 800111a:	761a      	strb	r2, [r3, #24]
}
 800111c:	bf00      	nop
 800111e:	370c      	adds	r7, #12
 8001120:	46bd      	mov	sp, r7
 8001122:	bc80      	pop	{r7}
 8001124:	4770      	bx	lr
 8001126:	bf00      	nop
 8001128:	e000e100 	.word	0xe000e100
 800112c:	e000ed00 	.word	0xe000ed00

08001130 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001130:	b480      	push	{r7}
 8001132:	b089      	sub	sp, #36	@ 0x24
 8001134:	af00      	add	r7, sp, #0
 8001136:	60f8      	str	r0, [r7, #12]
 8001138:	60b9      	str	r1, [r7, #8]
 800113a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	f003 0307 	and.w	r3, r3, #7
 8001142:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001144:	69fb      	ldr	r3, [r7, #28]
 8001146:	f1c3 0307 	rsb	r3, r3, #7
 800114a:	2b04      	cmp	r3, #4
 800114c:	bf28      	it	cs
 800114e:	2304      	movcs	r3, #4
 8001150:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001152:	69fb      	ldr	r3, [r7, #28]
 8001154:	3304      	adds	r3, #4
 8001156:	2b06      	cmp	r3, #6
 8001158:	d902      	bls.n	8001160 <NVIC_EncodePriority+0x30>
 800115a:	69fb      	ldr	r3, [r7, #28]
 800115c:	3b03      	subs	r3, #3
 800115e:	e000      	b.n	8001162 <NVIC_EncodePriority+0x32>
 8001160:	2300      	movs	r3, #0
 8001162:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001164:	f04f 32ff 	mov.w	r2, #4294967295
 8001168:	69bb      	ldr	r3, [r7, #24]
 800116a:	fa02 f303 	lsl.w	r3, r2, r3
 800116e:	43da      	mvns	r2, r3
 8001170:	68bb      	ldr	r3, [r7, #8]
 8001172:	401a      	ands	r2, r3
 8001174:	697b      	ldr	r3, [r7, #20]
 8001176:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001178:	f04f 31ff 	mov.w	r1, #4294967295
 800117c:	697b      	ldr	r3, [r7, #20]
 800117e:	fa01 f303 	lsl.w	r3, r1, r3
 8001182:	43d9      	mvns	r1, r3
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001188:	4313      	orrs	r3, r2
         );
}
 800118a:	4618      	mov	r0, r3
 800118c:	3724      	adds	r7, #36	@ 0x24
 800118e:	46bd      	mov	sp, r7
 8001190:	bc80      	pop	{r7}
 8001192:	4770      	bx	lr

08001194 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	3b01      	subs	r3, #1
 80011a0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80011a4:	d301      	bcc.n	80011aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011a6:	2301      	movs	r3, #1
 80011a8:	e00f      	b.n	80011ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011aa:	4a0a      	ldr	r2, [pc, #40]	@ (80011d4 <SysTick_Config+0x40>)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	3b01      	subs	r3, #1
 80011b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011b2:	210f      	movs	r1, #15
 80011b4:	f04f 30ff 	mov.w	r0, #4294967295
 80011b8:	f7ff ff90 	bl	80010dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011bc:	4b05      	ldr	r3, [pc, #20]	@ (80011d4 <SysTick_Config+0x40>)
 80011be:	2200      	movs	r2, #0
 80011c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011c2:	4b04      	ldr	r3, [pc, #16]	@ (80011d4 <SysTick_Config+0x40>)
 80011c4:	2207      	movs	r2, #7
 80011c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011c8:	2300      	movs	r3, #0
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	3708      	adds	r7, #8
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	e000e010 	.word	0xe000e010

080011d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011e0:	6878      	ldr	r0, [r7, #4]
 80011e2:	f7ff ff2d 	bl	8001040 <__NVIC_SetPriorityGrouping>
}
 80011e6:	bf00      	nop
 80011e8:	3708      	adds	r7, #8
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}

080011ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011ee:	b580      	push	{r7, lr}
 80011f0:	b086      	sub	sp, #24
 80011f2:	af00      	add	r7, sp, #0
 80011f4:	4603      	mov	r3, r0
 80011f6:	60b9      	str	r1, [r7, #8]
 80011f8:	607a      	str	r2, [r7, #4]
 80011fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011fc:	2300      	movs	r3, #0
 80011fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001200:	f7ff ff42 	bl	8001088 <__NVIC_GetPriorityGrouping>
 8001204:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001206:	687a      	ldr	r2, [r7, #4]
 8001208:	68b9      	ldr	r1, [r7, #8]
 800120a:	6978      	ldr	r0, [r7, #20]
 800120c:	f7ff ff90 	bl	8001130 <NVIC_EncodePriority>
 8001210:	4602      	mov	r2, r0
 8001212:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001216:	4611      	mov	r1, r2
 8001218:	4618      	mov	r0, r3
 800121a:	f7ff ff5f 	bl	80010dc <__NVIC_SetPriority>
}
 800121e:	bf00      	nop
 8001220:	3718      	adds	r7, #24
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}

08001226 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001226:	b580      	push	{r7, lr}
 8001228:	b082      	sub	sp, #8
 800122a:	af00      	add	r7, sp, #0
 800122c:	4603      	mov	r3, r0
 800122e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001230:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001234:	4618      	mov	r0, r3
 8001236:	f7ff ff35 	bl	80010a4 <__NVIC_EnableIRQ>
}
 800123a:	bf00      	nop
 800123c:	3708      	adds	r7, #8
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}

08001242 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001242:	b580      	push	{r7, lr}
 8001244:	b082      	sub	sp, #8
 8001246:	af00      	add	r7, sp, #0
 8001248:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800124a:	6878      	ldr	r0, [r7, #4]
 800124c:	f7ff ffa2 	bl	8001194 <SysTick_Config>
 8001250:	4603      	mov	r3, r0
}
 8001252:	4618      	mov	r0, r3
 8001254:	3708      	adds	r7, #8
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
	...

0800125c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800125c:	b480      	push	{r7}
 800125e:	b085      	sub	sp, #20
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001264:	2300      	movs	r3, #0
 8001266:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d101      	bne.n	8001272 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800126e:	2301      	movs	r3, #1
 8001270:	e043      	b.n	80012fa <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	461a      	mov	r2, r3
 8001278:	4b22      	ldr	r3, [pc, #136]	@ (8001304 <HAL_DMA_Init+0xa8>)
 800127a:	4413      	add	r3, r2
 800127c:	4a22      	ldr	r2, [pc, #136]	@ (8001308 <HAL_DMA_Init+0xac>)
 800127e:	fba2 2303 	umull	r2, r3, r2, r3
 8001282:	091b      	lsrs	r3, r3, #4
 8001284:	009a      	lsls	r2, r3, #2
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	4a1f      	ldr	r2, [pc, #124]	@ (800130c <HAL_DMA_Init+0xb0>)
 800128e:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	2202      	movs	r2, #2
 8001294:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80012a6:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80012aa:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80012b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	68db      	ldr	r3, [r3, #12]
 80012ba:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	695b      	ldr	r3, [r3, #20]
 80012c6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012cc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	69db      	ldr	r3, [r3, #28]
 80012d2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80012d4:	68fa      	ldr	r2, [r7, #12]
 80012d6:	4313      	orrs	r3, r2
 80012d8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	68fa      	ldr	r2, [r7, #12]
 80012e0:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	2200      	movs	r2, #0
 80012e6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	2201      	movs	r2, #1
 80012ec:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	2200      	movs	r2, #0
 80012f4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80012f8:	2300      	movs	r3, #0
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	3714      	adds	r7, #20
 80012fe:	46bd      	mov	sp, r7
 8001300:	bc80      	pop	{r7}
 8001302:	4770      	bx	lr
 8001304:	bffdfff8 	.word	0xbffdfff8
 8001308:	cccccccd 	.word	0xcccccccd
 800130c:	40020000 	.word	0x40020000

08001310 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b086      	sub	sp, #24
 8001314:	af00      	add	r7, sp, #0
 8001316:	60f8      	str	r0, [r7, #12]
 8001318:	60b9      	str	r1, [r7, #8]
 800131a:	607a      	str	r2, [r7, #4]
 800131c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800131e:	2300      	movs	r3, #0
 8001320:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001328:	2b01      	cmp	r3, #1
 800132a:	d101      	bne.n	8001330 <HAL_DMA_Start_IT+0x20>
 800132c:	2302      	movs	r3, #2
 800132e:	e04b      	b.n	80013c8 <HAL_DMA_Start_IT+0xb8>
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	2201      	movs	r2, #1
 8001334:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800133e:	b2db      	uxtb	r3, r3
 8001340:	2b01      	cmp	r3, #1
 8001342:	d13a      	bne.n	80013ba <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	2202      	movs	r2, #2
 8001348:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	2200      	movs	r2, #0
 8001350:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	681a      	ldr	r2, [r3, #0]
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f022 0201 	bic.w	r2, r2, #1
 8001360:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	687a      	ldr	r2, [r7, #4]
 8001366:	68b9      	ldr	r1, [r7, #8]
 8001368:	68f8      	ldr	r0, [r7, #12]
 800136a:	f000 f9eb 	bl	8001744 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001372:	2b00      	cmp	r3, #0
 8001374:	d008      	beq.n	8001388 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	681a      	ldr	r2, [r3, #0]
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f042 020e 	orr.w	r2, r2, #14
 8001384:	601a      	str	r2, [r3, #0]
 8001386:	e00f      	b.n	80013a8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	681a      	ldr	r2, [r3, #0]
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f022 0204 	bic.w	r2, r2, #4
 8001396:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	681a      	ldr	r2, [r3, #0]
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f042 020a 	orr.w	r2, r2, #10
 80013a6:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	681a      	ldr	r2, [r3, #0]
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f042 0201 	orr.w	r2, r2, #1
 80013b6:	601a      	str	r2, [r3, #0]
 80013b8:	e005      	b.n	80013c6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	2200      	movs	r2, #0
 80013be:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80013c2:	2302      	movs	r3, #2
 80013c4:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80013c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80013c8:	4618      	mov	r0, r3
 80013ca:	3718      	adds	r7, #24
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}

080013d0 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b085      	sub	sp, #20
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80013d8:	2300      	movs	r3, #0
 80013da:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80013e2:	b2db      	uxtb	r3, r3
 80013e4:	2b02      	cmp	r3, #2
 80013e6:	d008      	beq.n	80013fa <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	2204      	movs	r2, #4
 80013ec:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	2200      	movs	r2, #0
 80013f2:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80013f6:	2301      	movs	r3, #1
 80013f8:	e020      	b.n	800143c <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	681a      	ldr	r2, [r3, #0]
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f022 020e 	bic.w	r2, r2, #14
 8001408:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	681a      	ldr	r2, [r3, #0]
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f022 0201 	bic.w	r2, r2, #1
 8001418:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001422:	2101      	movs	r1, #1
 8001424:	fa01 f202 	lsl.w	r2, r1, r2
 8001428:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	2201      	movs	r2, #1
 800142e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	2200      	movs	r2, #0
 8001436:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800143a:	7bfb      	ldrb	r3, [r7, #15]
}
 800143c:	4618      	mov	r0, r3
 800143e:	3714      	adds	r7, #20
 8001440:	46bd      	mov	sp, r7
 8001442:	bc80      	pop	{r7}
 8001444:	4770      	bx	lr
	...

08001448 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001448:	b580      	push	{r7, lr}
 800144a:	b084      	sub	sp, #16
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001450:	2300      	movs	r3, #0
 8001452:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800145a:	b2db      	uxtb	r3, r3
 800145c:	2b02      	cmp	r3, #2
 800145e:	d005      	beq.n	800146c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	2204      	movs	r2, #4
 8001464:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8001466:	2301      	movs	r3, #1
 8001468:	73fb      	strb	r3, [r7, #15]
 800146a:	e051      	b.n	8001510 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	681a      	ldr	r2, [r3, #0]
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f022 020e 	bic.w	r2, r2, #14
 800147a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	681a      	ldr	r2, [r3, #0]
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f022 0201 	bic.w	r2, r2, #1
 800148a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4a22      	ldr	r2, [pc, #136]	@ (800151c <HAL_DMA_Abort_IT+0xd4>)
 8001492:	4293      	cmp	r3, r2
 8001494:	d029      	beq.n	80014ea <HAL_DMA_Abort_IT+0xa2>
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	4a21      	ldr	r2, [pc, #132]	@ (8001520 <HAL_DMA_Abort_IT+0xd8>)
 800149c:	4293      	cmp	r3, r2
 800149e:	d022      	beq.n	80014e6 <HAL_DMA_Abort_IT+0x9e>
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4a1f      	ldr	r2, [pc, #124]	@ (8001524 <HAL_DMA_Abort_IT+0xdc>)
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d01a      	beq.n	80014e0 <HAL_DMA_Abort_IT+0x98>
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	4a1e      	ldr	r2, [pc, #120]	@ (8001528 <HAL_DMA_Abort_IT+0xe0>)
 80014b0:	4293      	cmp	r3, r2
 80014b2:	d012      	beq.n	80014da <HAL_DMA_Abort_IT+0x92>
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4a1c      	ldr	r2, [pc, #112]	@ (800152c <HAL_DMA_Abort_IT+0xe4>)
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d00a      	beq.n	80014d4 <HAL_DMA_Abort_IT+0x8c>
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	4a1b      	ldr	r2, [pc, #108]	@ (8001530 <HAL_DMA_Abort_IT+0xe8>)
 80014c4:	4293      	cmp	r3, r2
 80014c6:	d102      	bne.n	80014ce <HAL_DMA_Abort_IT+0x86>
 80014c8:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80014cc:	e00e      	b.n	80014ec <HAL_DMA_Abort_IT+0xa4>
 80014ce:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80014d2:	e00b      	b.n	80014ec <HAL_DMA_Abort_IT+0xa4>
 80014d4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80014d8:	e008      	b.n	80014ec <HAL_DMA_Abort_IT+0xa4>
 80014da:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80014de:	e005      	b.n	80014ec <HAL_DMA_Abort_IT+0xa4>
 80014e0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80014e4:	e002      	b.n	80014ec <HAL_DMA_Abort_IT+0xa4>
 80014e6:	2310      	movs	r3, #16
 80014e8:	e000      	b.n	80014ec <HAL_DMA_Abort_IT+0xa4>
 80014ea:	2301      	movs	r3, #1
 80014ec:	4a11      	ldr	r2, [pc, #68]	@ (8001534 <HAL_DMA_Abort_IT+0xec>)
 80014ee:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	2201      	movs	r2, #1
 80014f4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	2200      	movs	r2, #0
 80014fc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001504:	2b00      	cmp	r3, #0
 8001506:	d003      	beq.n	8001510 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800150c:	6878      	ldr	r0, [r7, #4]
 800150e:	4798      	blx	r3
    } 
  }
  return status;
 8001510:	7bfb      	ldrb	r3, [r7, #15]
}
 8001512:	4618      	mov	r0, r3
 8001514:	3710      	adds	r7, #16
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	40020008 	.word	0x40020008
 8001520:	4002001c 	.word	0x4002001c
 8001524:	40020030 	.word	0x40020030
 8001528:	40020044 	.word	0x40020044
 800152c:	40020058 	.word	0x40020058
 8001530:	4002006c 	.word	0x4002006c
 8001534:	40020000 	.word	0x40020000

08001538 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b084      	sub	sp, #16
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001554:	2204      	movs	r2, #4
 8001556:	409a      	lsls	r2, r3
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	4013      	ands	r3, r2
 800155c:	2b00      	cmp	r3, #0
 800155e:	d04f      	beq.n	8001600 <HAL_DMA_IRQHandler+0xc8>
 8001560:	68bb      	ldr	r3, [r7, #8]
 8001562:	f003 0304 	and.w	r3, r3, #4
 8001566:	2b00      	cmp	r3, #0
 8001568:	d04a      	beq.n	8001600 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f003 0320 	and.w	r3, r3, #32
 8001574:	2b00      	cmp	r3, #0
 8001576:	d107      	bne.n	8001588 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	681a      	ldr	r2, [r3, #0]
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f022 0204 	bic.w	r2, r2, #4
 8001586:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4a66      	ldr	r2, [pc, #408]	@ (8001728 <HAL_DMA_IRQHandler+0x1f0>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d029      	beq.n	80015e6 <HAL_DMA_IRQHandler+0xae>
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4a65      	ldr	r2, [pc, #404]	@ (800172c <HAL_DMA_IRQHandler+0x1f4>)
 8001598:	4293      	cmp	r3, r2
 800159a:	d022      	beq.n	80015e2 <HAL_DMA_IRQHandler+0xaa>
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a63      	ldr	r2, [pc, #396]	@ (8001730 <HAL_DMA_IRQHandler+0x1f8>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d01a      	beq.n	80015dc <HAL_DMA_IRQHandler+0xa4>
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4a62      	ldr	r2, [pc, #392]	@ (8001734 <HAL_DMA_IRQHandler+0x1fc>)
 80015ac:	4293      	cmp	r3, r2
 80015ae:	d012      	beq.n	80015d6 <HAL_DMA_IRQHandler+0x9e>
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a60      	ldr	r2, [pc, #384]	@ (8001738 <HAL_DMA_IRQHandler+0x200>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d00a      	beq.n	80015d0 <HAL_DMA_IRQHandler+0x98>
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4a5f      	ldr	r2, [pc, #380]	@ (800173c <HAL_DMA_IRQHandler+0x204>)
 80015c0:	4293      	cmp	r3, r2
 80015c2:	d102      	bne.n	80015ca <HAL_DMA_IRQHandler+0x92>
 80015c4:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80015c8:	e00e      	b.n	80015e8 <HAL_DMA_IRQHandler+0xb0>
 80015ca:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80015ce:	e00b      	b.n	80015e8 <HAL_DMA_IRQHandler+0xb0>
 80015d0:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80015d4:	e008      	b.n	80015e8 <HAL_DMA_IRQHandler+0xb0>
 80015d6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80015da:	e005      	b.n	80015e8 <HAL_DMA_IRQHandler+0xb0>
 80015dc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80015e0:	e002      	b.n	80015e8 <HAL_DMA_IRQHandler+0xb0>
 80015e2:	2340      	movs	r3, #64	@ 0x40
 80015e4:	e000      	b.n	80015e8 <HAL_DMA_IRQHandler+0xb0>
 80015e6:	2304      	movs	r3, #4
 80015e8:	4a55      	ldr	r2, [pc, #340]	@ (8001740 <HAL_DMA_IRQHandler+0x208>)
 80015ea:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	f000 8094 	beq.w	800171e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015fa:	6878      	ldr	r0, [r7, #4]
 80015fc:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80015fe:	e08e      	b.n	800171e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001604:	2202      	movs	r2, #2
 8001606:	409a      	lsls	r2, r3
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	4013      	ands	r3, r2
 800160c:	2b00      	cmp	r3, #0
 800160e:	d056      	beq.n	80016be <HAL_DMA_IRQHandler+0x186>
 8001610:	68bb      	ldr	r3, [r7, #8]
 8001612:	f003 0302 	and.w	r3, r3, #2
 8001616:	2b00      	cmp	r3, #0
 8001618:	d051      	beq.n	80016be <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f003 0320 	and.w	r3, r3, #32
 8001624:	2b00      	cmp	r3, #0
 8001626:	d10b      	bne.n	8001640 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	681a      	ldr	r2, [r3, #0]
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f022 020a 	bic.w	r2, r2, #10
 8001636:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2201      	movs	r2, #1
 800163c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4a38      	ldr	r2, [pc, #224]	@ (8001728 <HAL_DMA_IRQHandler+0x1f0>)
 8001646:	4293      	cmp	r3, r2
 8001648:	d029      	beq.n	800169e <HAL_DMA_IRQHandler+0x166>
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	4a37      	ldr	r2, [pc, #220]	@ (800172c <HAL_DMA_IRQHandler+0x1f4>)
 8001650:	4293      	cmp	r3, r2
 8001652:	d022      	beq.n	800169a <HAL_DMA_IRQHandler+0x162>
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a35      	ldr	r2, [pc, #212]	@ (8001730 <HAL_DMA_IRQHandler+0x1f8>)
 800165a:	4293      	cmp	r3, r2
 800165c:	d01a      	beq.n	8001694 <HAL_DMA_IRQHandler+0x15c>
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4a34      	ldr	r2, [pc, #208]	@ (8001734 <HAL_DMA_IRQHandler+0x1fc>)
 8001664:	4293      	cmp	r3, r2
 8001666:	d012      	beq.n	800168e <HAL_DMA_IRQHandler+0x156>
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a32      	ldr	r2, [pc, #200]	@ (8001738 <HAL_DMA_IRQHandler+0x200>)
 800166e:	4293      	cmp	r3, r2
 8001670:	d00a      	beq.n	8001688 <HAL_DMA_IRQHandler+0x150>
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4a31      	ldr	r2, [pc, #196]	@ (800173c <HAL_DMA_IRQHandler+0x204>)
 8001678:	4293      	cmp	r3, r2
 800167a:	d102      	bne.n	8001682 <HAL_DMA_IRQHandler+0x14a>
 800167c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001680:	e00e      	b.n	80016a0 <HAL_DMA_IRQHandler+0x168>
 8001682:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001686:	e00b      	b.n	80016a0 <HAL_DMA_IRQHandler+0x168>
 8001688:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800168c:	e008      	b.n	80016a0 <HAL_DMA_IRQHandler+0x168>
 800168e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001692:	e005      	b.n	80016a0 <HAL_DMA_IRQHandler+0x168>
 8001694:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001698:	e002      	b.n	80016a0 <HAL_DMA_IRQHandler+0x168>
 800169a:	2320      	movs	r3, #32
 800169c:	e000      	b.n	80016a0 <HAL_DMA_IRQHandler+0x168>
 800169e:	2302      	movs	r3, #2
 80016a0:	4a27      	ldr	r2, [pc, #156]	@ (8001740 <HAL_DMA_IRQHandler+0x208>)
 80016a2:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	2200      	movs	r2, #0
 80016a8:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d034      	beq.n	800171e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016b8:	6878      	ldr	r0, [r7, #4]
 80016ba:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80016bc:	e02f      	b.n	800171e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016c2:	2208      	movs	r2, #8
 80016c4:	409a      	lsls	r2, r3
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	4013      	ands	r3, r2
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d028      	beq.n	8001720 <HAL_DMA_IRQHandler+0x1e8>
 80016ce:	68bb      	ldr	r3, [r7, #8]
 80016d0:	f003 0308 	and.w	r3, r3, #8
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d023      	beq.n	8001720 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	681a      	ldr	r2, [r3, #0]
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f022 020e 	bic.w	r2, r2, #14
 80016e6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80016f0:	2101      	movs	r1, #1
 80016f2:	fa01 f202 	lsl.w	r2, r1, r2
 80016f6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2201      	movs	r2, #1
 80016fc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2201      	movs	r2, #1
 8001702:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	2200      	movs	r2, #0
 800170a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001712:	2b00      	cmp	r3, #0
 8001714:	d004      	beq.n	8001720 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800171a:	6878      	ldr	r0, [r7, #4]
 800171c:	4798      	blx	r3
    }
  }
  return;
 800171e:	bf00      	nop
 8001720:	bf00      	nop
}
 8001722:	3710      	adds	r7, #16
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}
 8001728:	40020008 	.word	0x40020008
 800172c:	4002001c 	.word	0x4002001c
 8001730:	40020030 	.word	0x40020030
 8001734:	40020044 	.word	0x40020044
 8001738:	40020058 	.word	0x40020058
 800173c:	4002006c 	.word	0x4002006c
 8001740:	40020000 	.word	0x40020000

08001744 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001744:	b480      	push	{r7}
 8001746:	b085      	sub	sp, #20
 8001748:	af00      	add	r7, sp, #0
 800174a:	60f8      	str	r0, [r7, #12]
 800174c:	60b9      	str	r1, [r7, #8]
 800174e:	607a      	str	r2, [r7, #4]
 8001750:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800175a:	2101      	movs	r1, #1
 800175c:	fa01 f202 	lsl.w	r2, r1, r2
 8001760:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	683a      	ldr	r2, [r7, #0]
 8001768:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	2b10      	cmp	r3, #16
 8001770:	d108      	bne.n	8001784 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	687a      	ldr	r2, [r7, #4]
 8001778:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	68ba      	ldr	r2, [r7, #8]
 8001780:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001782:	e007      	b.n	8001794 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	68ba      	ldr	r2, [r7, #8]
 800178a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	687a      	ldr	r2, [r7, #4]
 8001792:	60da      	str	r2, [r3, #12]
}
 8001794:	bf00      	nop
 8001796:	3714      	adds	r7, #20
 8001798:	46bd      	mov	sp, r7
 800179a:	bc80      	pop	{r7}
 800179c:	4770      	bx	lr
	...

080017a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b08b      	sub	sp, #44	@ 0x2c
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
 80017a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80017aa:	2300      	movs	r3, #0
 80017ac:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80017ae:	2300      	movs	r3, #0
 80017b0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017b2:	e169      	b.n	8001a88 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80017b4:	2201      	movs	r2, #1
 80017b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017b8:	fa02 f303 	lsl.w	r3, r2, r3
 80017bc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	69fa      	ldr	r2, [r7, #28]
 80017c4:	4013      	ands	r3, r2
 80017c6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80017c8:	69ba      	ldr	r2, [r7, #24]
 80017ca:	69fb      	ldr	r3, [r7, #28]
 80017cc:	429a      	cmp	r2, r3
 80017ce:	f040 8158 	bne.w	8001a82 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	4a9a      	ldr	r2, [pc, #616]	@ (8001a40 <HAL_GPIO_Init+0x2a0>)
 80017d8:	4293      	cmp	r3, r2
 80017da:	d05e      	beq.n	800189a <HAL_GPIO_Init+0xfa>
 80017dc:	4a98      	ldr	r2, [pc, #608]	@ (8001a40 <HAL_GPIO_Init+0x2a0>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d875      	bhi.n	80018ce <HAL_GPIO_Init+0x12e>
 80017e2:	4a98      	ldr	r2, [pc, #608]	@ (8001a44 <HAL_GPIO_Init+0x2a4>)
 80017e4:	4293      	cmp	r3, r2
 80017e6:	d058      	beq.n	800189a <HAL_GPIO_Init+0xfa>
 80017e8:	4a96      	ldr	r2, [pc, #600]	@ (8001a44 <HAL_GPIO_Init+0x2a4>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d86f      	bhi.n	80018ce <HAL_GPIO_Init+0x12e>
 80017ee:	4a96      	ldr	r2, [pc, #600]	@ (8001a48 <HAL_GPIO_Init+0x2a8>)
 80017f0:	4293      	cmp	r3, r2
 80017f2:	d052      	beq.n	800189a <HAL_GPIO_Init+0xfa>
 80017f4:	4a94      	ldr	r2, [pc, #592]	@ (8001a48 <HAL_GPIO_Init+0x2a8>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d869      	bhi.n	80018ce <HAL_GPIO_Init+0x12e>
 80017fa:	4a94      	ldr	r2, [pc, #592]	@ (8001a4c <HAL_GPIO_Init+0x2ac>)
 80017fc:	4293      	cmp	r3, r2
 80017fe:	d04c      	beq.n	800189a <HAL_GPIO_Init+0xfa>
 8001800:	4a92      	ldr	r2, [pc, #584]	@ (8001a4c <HAL_GPIO_Init+0x2ac>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d863      	bhi.n	80018ce <HAL_GPIO_Init+0x12e>
 8001806:	4a92      	ldr	r2, [pc, #584]	@ (8001a50 <HAL_GPIO_Init+0x2b0>)
 8001808:	4293      	cmp	r3, r2
 800180a:	d046      	beq.n	800189a <HAL_GPIO_Init+0xfa>
 800180c:	4a90      	ldr	r2, [pc, #576]	@ (8001a50 <HAL_GPIO_Init+0x2b0>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d85d      	bhi.n	80018ce <HAL_GPIO_Init+0x12e>
 8001812:	2b12      	cmp	r3, #18
 8001814:	d82a      	bhi.n	800186c <HAL_GPIO_Init+0xcc>
 8001816:	2b12      	cmp	r3, #18
 8001818:	d859      	bhi.n	80018ce <HAL_GPIO_Init+0x12e>
 800181a:	a201      	add	r2, pc, #4	@ (adr r2, 8001820 <HAL_GPIO_Init+0x80>)
 800181c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001820:	0800189b 	.word	0x0800189b
 8001824:	08001875 	.word	0x08001875
 8001828:	08001887 	.word	0x08001887
 800182c:	080018c9 	.word	0x080018c9
 8001830:	080018cf 	.word	0x080018cf
 8001834:	080018cf 	.word	0x080018cf
 8001838:	080018cf 	.word	0x080018cf
 800183c:	080018cf 	.word	0x080018cf
 8001840:	080018cf 	.word	0x080018cf
 8001844:	080018cf 	.word	0x080018cf
 8001848:	080018cf 	.word	0x080018cf
 800184c:	080018cf 	.word	0x080018cf
 8001850:	080018cf 	.word	0x080018cf
 8001854:	080018cf 	.word	0x080018cf
 8001858:	080018cf 	.word	0x080018cf
 800185c:	080018cf 	.word	0x080018cf
 8001860:	080018cf 	.word	0x080018cf
 8001864:	0800187d 	.word	0x0800187d
 8001868:	08001891 	.word	0x08001891
 800186c:	4a79      	ldr	r2, [pc, #484]	@ (8001a54 <HAL_GPIO_Init+0x2b4>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d013      	beq.n	800189a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001872:	e02c      	b.n	80018ce <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	68db      	ldr	r3, [r3, #12]
 8001878:	623b      	str	r3, [r7, #32]
          break;
 800187a:	e029      	b.n	80018d0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	68db      	ldr	r3, [r3, #12]
 8001880:	3304      	adds	r3, #4
 8001882:	623b      	str	r3, [r7, #32]
          break;
 8001884:	e024      	b.n	80018d0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	68db      	ldr	r3, [r3, #12]
 800188a:	3308      	adds	r3, #8
 800188c:	623b      	str	r3, [r7, #32]
          break;
 800188e:	e01f      	b.n	80018d0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	68db      	ldr	r3, [r3, #12]
 8001894:	330c      	adds	r3, #12
 8001896:	623b      	str	r3, [r7, #32]
          break;
 8001898:	e01a      	b.n	80018d0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	689b      	ldr	r3, [r3, #8]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d102      	bne.n	80018a8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80018a2:	2304      	movs	r3, #4
 80018a4:	623b      	str	r3, [r7, #32]
          break;
 80018a6:	e013      	b.n	80018d0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	689b      	ldr	r3, [r3, #8]
 80018ac:	2b01      	cmp	r3, #1
 80018ae:	d105      	bne.n	80018bc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80018b0:	2308      	movs	r3, #8
 80018b2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	69fa      	ldr	r2, [r7, #28]
 80018b8:	611a      	str	r2, [r3, #16]
          break;
 80018ba:	e009      	b.n	80018d0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80018bc:	2308      	movs	r3, #8
 80018be:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	69fa      	ldr	r2, [r7, #28]
 80018c4:	615a      	str	r2, [r3, #20]
          break;
 80018c6:	e003      	b.n	80018d0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80018c8:	2300      	movs	r3, #0
 80018ca:	623b      	str	r3, [r7, #32]
          break;
 80018cc:	e000      	b.n	80018d0 <HAL_GPIO_Init+0x130>
          break;
 80018ce:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80018d0:	69bb      	ldr	r3, [r7, #24]
 80018d2:	2bff      	cmp	r3, #255	@ 0xff
 80018d4:	d801      	bhi.n	80018da <HAL_GPIO_Init+0x13a>
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	e001      	b.n	80018de <HAL_GPIO_Init+0x13e>
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	3304      	adds	r3, #4
 80018de:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80018e0:	69bb      	ldr	r3, [r7, #24]
 80018e2:	2bff      	cmp	r3, #255	@ 0xff
 80018e4:	d802      	bhi.n	80018ec <HAL_GPIO_Init+0x14c>
 80018e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018e8:	009b      	lsls	r3, r3, #2
 80018ea:	e002      	b.n	80018f2 <HAL_GPIO_Init+0x152>
 80018ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018ee:	3b08      	subs	r3, #8
 80018f0:	009b      	lsls	r3, r3, #2
 80018f2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80018f4:	697b      	ldr	r3, [r7, #20]
 80018f6:	681a      	ldr	r2, [r3, #0]
 80018f8:	210f      	movs	r1, #15
 80018fa:	693b      	ldr	r3, [r7, #16]
 80018fc:	fa01 f303 	lsl.w	r3, r1, r3
 8001900:	43db      	mvns	r3, r3
 8001902:	401a      	ands	r2, r3
 8001904:	6a39      	ldr	r1, [r7, #32]
 8001906:	693b      	ldr	r3, [r7, #16]
 8001908:	fa01 f303 	lsl.w	r3, r1, r3
 800190c:	431a      	orrs	r2, r3
 800190e:	697b      	ldr	r3, [r7, #20]
 8001910:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800191a:	2b00      	cmp	r3, #0
 800191c:	f000 80b1 	beq.w	8001a82 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001920:	4b4d      	ldr	r3, [pc, #308]	@ (8001a58 <HAL_GPIO_Init+0x2b8>)
 8001922:	699b      	ldr	r3, [r3, #24]
 8001924:	4a4c      	ldr	r2, [pc, #304]	@ (8001a58 <HAL_GPIO_Init+0x2b8>)
 8001926:	f043 0301 	orr.w	r3, r3, #1
 800192a:	6193      	str	r3, [r2, #24]
 800192c:	4b4a      	ldr	r3, [pc, #296]	@ (8001a58 <HAL_GPIO_Init+0x2b8>)
 800192e:	699b      	ldr	r3, [r3, #24]
 8001930:	f003 0301 	and.w	r3, r3, #1
 8001934:	60bb      	str	r3, [r7, #8]
 8001936:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001938:	4a48      	ldr	r2, [pc, #288]	@ (8001a5c <HAL_GPIO_Init+0x2bc>)
 800193a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800193c:	089b      	lsrs	r3, r3, #2
 800193e:	3302      	adds	r3, #2
 8001940:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001944:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001946:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001948:	f003 0303 	and.w	r3, r3, #3
 800194c:	009b      	lsls	r3, r3, #2
 800194e:	220f      	movs	r2, #15
 8001950:	fa02 f303 	lsl.w	r3, r2, r3
 8001954:	43db      	mvns	r3, r3
 8001956:	68fa      	ldr	r2, [r7, #12]
 8001958:	4013      	ands	r3, r2
 800195a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	4a40      	ldr	r2, [pc, #256]	@ (8001a60 <HAL_GPIO_Init+0x2c0>)
 8001960:	4293      	cmp	r3, r2
 8001962:	d013      	beq.n	800198c <HAL_GPIO_Init+0x1ec>
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	4a3f      	ldr	r2, [pc, #252]	@ (8001a64 <HAL_GPIO_Init+0x2c4>)
 8001968:	4293      	cmp	r3, r2
 800196a:	d00d      	beq.n	8001988 <HAL_GPIO_Init+0x1e8>
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	4a3e      	ldr	r2, [pc, #248]	@ (8001a68 <HAL_GPIO_Init+0x2c8>)
 8001970:	4293      	cmp	r3, r2
 8001972:	d007      	beq.n	8001984 <HAL_GPIO_Init+0x1e4>
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	4a3d      	ldr	r2, [pc, #244]	@ (8001a6c <HAL_GPIO_Init+0x2cc>)
 8001978:	4293      	cmp	r3, r2
 800197a:	d101      	bne.n	8001980 <HAL_GPIO_Init+0x1e0>
 800197c:	2303      	movs	r3, #3
 800197e:	e006      	b.n	800198e <HAL_GPIO_Init+0x1ee>
 8001980:	2304      	movs	r3, #4
 8001982:	e004      	b.n	800198e <HAL_GPIO_Init+0x1ee>
 8001984:	2302      	movs	r3, #2
 8001986:	e002      	b.n	800198e <HAL_GPIO_Init+0x1ee>
 8001988:	2301      	movs	r3, #1
 800198a:	e000      	b.n	800198e <HAL_GPIO_Init+0x1ee>
 800198c:	2300      	movs	r3, #0
 800198e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001990:	f002 0203 	and.w	r2, r2, #3
 8001994:	0092      	lsls	r2, r2, #2
 8001996:	4093      	lsls	r3, r2
 8001998:	68fa      	ldr	r2, [r7, #12]
 800199a:	4313      	orrs	r3, r2
 800199c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800199e:	492f      	ldr	r1, [pc, #188]	@ (8001a5c <HAL_GPIO_Init+0x2bc>)
 80019a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019a2:	089b      	lsrs	r3, r3, #2
 80019a4:	3302      	adds	r3, #2
 80019a6:	68fa      	ldr	r2, [r7, #12]
 80019a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d006      	beq.n	80019c6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80019b8:	4b2d      	ldr	r3, [pc, #180]	@ (8001a70 <HAL_GPIO_Init+0x2d0>)
 80019ba:	689a      	ldr	r2, [r3, #8]
 80019bc:	492c      	ldr	r1, [pc, #176]	@ (8001a70 <HAL_GPIO_Init+0x2d0>)
 80019be:	69bb      	ldr	r3, [r7, #24]
 80019c0:	4313      	orrs	r3, r2
 80019c2:	608b      	str	r3, [r1, #8]
 80019c4:	e006      	b.n	80019d4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80019c6:	4b2a      	ldr	r3, [pc, #168]	@ (8001a70 <HAL_GPIO_Init+0x2d0>)
 80019c8:	689a      	ldr	r2, [r3, #8]
 80019ca:	69bb      	ldr	r3, [r7, #24]
 80019cc:	43db      	mvns	r3, r3
 80019ce:	4928      	ldr	r1, [pc, #160]	@ (8001a70 <HAL_GPIO_Init+0x2d0>)
 80019d0:	4013      	ands	r3, r2
 80019d2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d006      	beq.n	80019ee <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80019e0:	4b23      	ldr	r3, [pc, #140]	@ (8001a70 <HAL_GPIO_Init+0x2d0>)
 80019e2:	68da      	ldr	r2, [r3, #12]
 80019e4:	4922      	ldr	r1, [pc, #136]	@ (8001a70 <HAL_GPIO_Init+0x2d0>)
 80019e6:	69bb      	ldr	r3, [r7, #24]
 80019e8:	4313      	orrs	r3, r2
 80019ea:	60cb      	str	r3, [r1, #12]
 80019ec:	e006      	b.n	80019fc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80019ee:	4b20      	ldr	r3, [pc, #128]	@ (8001a70 <HAL_GPIO_Init+0x2d0>)
 80019f0:	68da      	ldr	r2, [r3, #12]
 80019f2:	69bb      	ldr	r3, [r7, #24]
 80019f4:	43db      	mvns	r3, r3
 80019f6:	491e      	ldr	r1, [pc, #120]	@ (8001a70 <HAL_GPIO_Init+0x2d0>)
 80019f8:	4013      	ands	r3, r2
 80019fa:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d006      	beq.n	8001a16 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001a08:	4b19      	ldr	r3, [pc, #100]	@ (8001a70 <HAL_GPIO_Init+0x2d0>)
 8001a0a:	685a      	ldr	r2, [r3, #4]
 8001a0c:	4918      	ldr	r1, [pc, #96]	@ (8001a70 <HAL_GPIO_Init+0x2d0>)
 8001a0e:	69bb      	ldr	r3, [r7, #24]
 8001a10:	4313      	orrs	r3, r2
 8001a12:	604b      	str	r3, [r1, #4]
 8001a14:	e006      	b.n	8001a24 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001a16:	4b16      	ldr	r3, [pc, #88]	@ (8001a70 <HAL_GPIO_Init+0x2d0>)
 8001a18:	685a      	ldr	r2, [r3, #4]
 8001a1a:	69bb      	ldr	r3, [r7, #24]
 8001a1c:	43db      	mvns	r3, r3
 8001a1e:	4914      	ldr	r1, [pc, #80]	@ (8001a70 <HAL_GPIO_Init+0x2d0>)
 8001a20:	4013      	ands	r3, r2
 8001a22:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d021      	beq.n	8001a74 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001a30:	4b0f      	ldr	r3, [pc, #60]	@ (8001a70 <HAL_GPIO_Init+0x2d0>)
 8001a32:	681a      	ldr	r2, [r3, #0]
 8001a34:	490e      	ldr	r1, [pc, #56]	@ (8001a70 <HAL_GPIO_Init+0x2d0>)
 8001a36:	69bb      	ldr	r3, [r7, #24]
 8001a38:	4313      	orrs	r3, r2
 8001a3a:	600b      	str	r3, [r1, #0]
 8001a3c:	e021      	b.n	8001a82 <HAL_GPIO_Init+0x2e2>
 8001a3e:	bf00      	nop
 8001a40:	10320000 	.word	0x10320000
 8001a44:	10310000 	.word	0x10310000
 8001a48:	10220000 	.word	0x10220000
 8001a4c:	10210000 	.word	0x10210000
 8001a50:	10120000 	.word	0x10120000
 8001a54:	10110000 	.word	0x10110000
 8001a58:	40021000 	.word	0x40021000
 8001a5c:	40010000 	.word	0x40010000
 8001a60:	40010800 	.word	0x40010800
 8001a64:	40010c00 	.word	0x40010c00
 8001a68:	40011000 	.word	0x40011000
 8001a6c:	40011400 	.word	0x40011400
 8001a70:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001a74:	4b0b      	ldr	r3, [pc, #44]	@ (8001aa4 <HAL_GPIO_Init+0x304>)
 8001a76:	681a      	ldr	r2, [r3, #0]
 8001a78:	69bb      	ldr	r3, [r7, #24]
 8001a7a:	43db      	mvns	r3, r3
 8001a7c:	4909      	ldr	r1, [pc, #36]	@ (8001aa4 <HAL_GPIO_Init+0x304>)
 8001a7e:	4013      	ands	r3, r2
 8001a80:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001a82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a84:	3301      	adds	r3, #1
 8001a86:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	681a      	ldr	r2, [r3, #0]
 8001a8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a8e:	fa22 f303 	lsr.w	r3, r2, r3
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	f47f ae8e 	bne.w	80017b4 <HAL_GPIO_Init+0x14>
  }
}
 8001a98:	bf00      	nop
 8001a9a:	bf00      	nop
 8001a9c:	372c      	adds	r7, #44	@ 0x2c
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bc80      	pop	{r7}
 8001aa2:	4770      	bx	lr
 8001aa4:	40010400 	.word	0x40010400

08001aa8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b083      	sub	sp, #12
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
 8001ab0:	460b      	mov	r3, r1
 8001ab2:	807b      	strh	r3, [r7, #2]
 8001ab4:	4613      	mov	r3, r2
 8001ab6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ab8:	787b      	ldrb	r3, [r7, #1]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d003      	beq.n	8001ac6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001abe:	887a      	ldrh	r2, [r7, #2]
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001ac4:	e003      	b.n	8001ace <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001ac6:	887b      	ldrh	r3, [r7, #2]
 8001ac8:	041a      	lsls	r2, r3, #16
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	611a      	str	r2, [r3, #16]
}
 8001ace:	bf00      	nop
 8001ad0:	370c      	adds	r7, #12
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bc80      	pop	{r7}
 8001ad6:	4770      	bx	lr

08001ad8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b082      	sub	sp, #8
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	4603      	mov	r3, r0
 8001ae0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001ae2:	4b08      	ldr	r3, [pc, #32]	@ (8001b04 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ae4:	695a      	ldr	r2, [r3, #20]
 8001ae6:	88fb      	ldrh	r3, [r7, #6]
 8001ae8:	4013      	ands	r3, r2
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d006      	beq.n	8001afc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001aee:	4a05      	ldr	r2, [pc, #20]	@ (8001b04 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001af0:	88fb      	ldrh	r3, [r7, #6]
 8001af2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001af4:	88fb      	ldrh	r3, [r7, #6]
 8001af6:	4618      	mov	r0, r3
 8001af8:	f7fe ff98 	bl	8000a2c <HAL_GPIO_EXTI_Callback>
  }
}
 8001afc:	bf00      	nop
 8001afe:	3708      	adds	r7, #8
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}
 8001b04:	40010400 	.word	0x40010400

08001b08 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b084      	sub	sp, #16
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d101      	bne.n	8001b1a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001b16:	2301      	movs	r3, #1
 8001b18:	e12b      	b.n	8001d72 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001b20:	b2db      	uxtb	r3, r3
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d106      	bne.n	8001b34 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2200      	movs	r2, #0
 8001b2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001b2e:	6878      	ldr	r0, [r7, #4]
 8001b30:	f7fe fc1a 	bl	8000368 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2224      	movs	r2, #36	@ 0x24
 8001b38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	681a      	ldr	r2, [r3, #0]
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f022 0201 	bic.w	r2, r2, #1
 8001b4a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	681a      	ldr	r2, [r3, #0]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001b5a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	681a      	ldr	r2, [r3, #0]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001b6a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001b6c:	f001 f84e 	bl	8002c0c <HAL_RCC_GetPCLK1Freq>
 8001b70:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	4a81      	ldr	r2, [pc, #516]	@ (8001d7c <HAL_I2C_Init+0x274>)
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d807      	bhi.n	8001b8c <HAL_I2C_Init+0x84>
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	4a80      	ldr	r2, [pc, #512]	@ (8001d80 <HAL_I2C_Init+0x278>)
 8001b80:	4293      	cmp	r3, r2
 8001b82:	bf94      	ite	ls
 8001b84:	2301      	movls	r3, #1
 8001b86:	2300      	movhi	r3, #0
 8001b88:	b2db      	uxtb	r3, r3
 8001b8a:	e006      	b.n	8001b9a <HAL_I2C_Init+0x92>
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	4a7d      	ldr	r2, [pc, #500]	@ (8001d84 <HAL_I2C_Init+0x27c>)
 8001b90:	4293      	cmp	r3, r2
 8001b92:	bf94      	ite	ls
 8001b94:	2301      	movls	r3, #1
 8001b96:	2300      	movhi	r3, #0
 8001b98:	b2db      	uxtb	r3, r3
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d001      	beq.n	8001ba2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	e0e7      	b.n	8001d72 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	4a78      	ldr	r2, [pc, #480]	@ (8001d88 <HAL_I2C_Init+0x280>)
 8001ba6:	fba2 2303 	umull	r2, r3, r2, r3
 8001baa:	0c9b      	lsrs	r3, r3, #18
 8001bac:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	68ba      	ldr	r2, [r7, #8]
 8001bbe:	430a      	orrs	r2, r1
 8001bc0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	6a1b      	ldr	r3, [r3, #32]
 8001bc8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	4a6a      	ldr	r2, [pc, #424]	@ (8001d7c <HAL_I2C_Init+0x274>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d802      	bhi.n	8001bdc <HAL_I2C_Init+0xd4>
 8001bd6:	68bb      	ldr	r3, [r7, #8]
 8001bd8:	3301      	adds	r3, #1
 8001bda:	e009      	b.n	8001bf0 <HAL_I2C_Init+0xe8>
 8001bdc:	68bb      	ldr	r3, [r7, #8]
 8001bde:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001be2:	fb02 f303 	mul.w	r3, r2, r3
 8001be6:	4a69      	ldr	r2, [pc, #420]	@ (8001d8c <HAL_I2C_Init+0x284>)
 8001be8:	fba2 2303 	umull	r2, r3, r2, r3
 8001bec:	099b      	lsrs	r3, r3, #6
 8001bee:	3301      	adds	r3, #1
 8001bf0:	687a      	ldr	r2, [r7, #4]
 8001bf2:	6812      	ldr	r2, [r2, #0]
 8001bf4:	430b      	orrs	r3, r1
 8001bf6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	69db      	ldr	r3, [r3, #28]
 8001bfe:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001c02:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	495c      	ldr	r1, [pc, #368]	@ (8001d7c <HAL_I2C_Init+0x274>)
 8001c0c:	428b      	cmp	r3, r1
 8001c0e:	d819      	bhi.n	8001c44 <HAL_I2C_Init+0x13c>
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	1e59      	subs	r1, r3, #1
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	005b      	lsls	r3, r3, #1
 8001c1a:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c1e:	1c59      	adds	r1, r3, #1
 8001c20:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001c24:	400b      	ands	r3, r1
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d00a      	beq.n	8001c40 <HAL_I2C_Init+0x138>
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	1e59      	subs	r1, r3, #1
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	005b      	lsls	r3, r3, #1
 8001c34:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c38:	3301      	adds	r3, #1
 8001c3a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c3e:	e051      	b.n	8001ce4 <HAL_I2C_Init+0x1dc>
 8001c40:	2304      	movs	r3, #4
 8001c42:	e04f      	b.n	8001ce4 <HAL_I2C_Init+0x1dc>
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	689b      	ldr	r3, [r3, #8]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d111      	bne.n	8001c70 <HAL_I2C_Init+0x168>
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	1e58      	subs	r0, r3, #1
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6859      	ldr	r1, [r3, #4]
 8001c54:	460b      	mov	r3, r1
 8001c56:	005b      	lsls	r3, r3, #1
 8001c58:	440b      	add	r3, r1
 8001c5a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c5e:	3301      	adds	r3, #1
 8001c60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	bf0c      	ite	eq
 8001c68:	2301      	moveq	r3, #1
 8001c6a:	2300      	movne	r3, #0
 8001c6c:	b2db      	uxtb	r3, r3
 8001c6e:	e012      	b.n	8001c96 <HAL_I2C_Init+0x18e>
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	1e58      	subs	r0, r3, #1
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6859      	ldr	r1, [r3, #4]
 8001c78:	460b      	mov	r3, r1
 8001c7a:	009b      	lsls	r3, r3, #2
 8001c7c:	440b      	add	r3, r1
 8001c7e:	0099      	lsls	r1, r3, #2
 8001c80:	440b      	add	r3, r1
 8001c82:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c86:	3301      	adds	r3, #1
 8001c88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	bf0c      	ite	eq
 8001c90:	2301      	moveq	r3, #1
 8001c92:	2300      	movne	r3, #0
 8001c94:	b2db      	uxtb	r3, r3
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d001      	beq.n	8001c9e <HAL_I2C_Init+0x196>
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	e022      	b.n	8001ce4 <HAL_I2C_Init+0x1dc>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	689b      	ldr	r3, [r3, #8]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d10e      	bne.n	8001cc4 <HAL_I2C_Init+0x1bc>
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	1e58      	subs	r0, r3, #1
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6859      	ldr	r1, [r3, #4]
 8001cae:	460b      	mov	r3, r1
 8001cb0:	005b      	lsls	r3, r3, #1
 8001cb2:	440b      	add	r3, r1
 8001cb4:	fbb0 f3f3 	udiv	r3, r0, r3
 8001cb8:	3301      	adds	r3, #1
 8001cba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cbe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001cc2:	e00f      	b.n	8001ce4 <HAL_I2C_Init+0x1dc>
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	1e58      	subs	r0, r3, #1
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6859      	ldr	r1, [r3, #4]
 8001ccc:	460b      	mov	r3, r1
 8001cce:	009b      	lsls	r3, r3, #2
 8001cd0:	440b      	add	r3, r1
 8001cd2:	0099      	lsls	r1, r3, #2
 8001cd4:	440b      	add	r3, r1
 8001cd6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001cda:	3301      	adds	r3, #1
 8001cdc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ce0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001ce4:	6879      	ldr	r1, [r7, #4]
 8001ce6:	6809      	ldr	r1, [r1, #0]
 8001ce8:	4313      	orrs	r3, r2
 8001cea:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	69da      	ldr	r2, [r3, #28]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6a1b      	ldr	r3, [r3, #32]
 8001cfe:	431a      	orrs	r2, r3
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	430a      	orrs	r2, r1
 8001d06:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	689b      	ldr	r3, [r3, #8]
 8001d0e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001d12:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001d16:	687a      	ldr	r2, [r7, #4]
 8001d18:	6911      	ldr	r1, [r2, #16]
 8001d1a:	687a      	ldr	r2, [r7, #4]
 8001d1c:	68d2      	ldr	r2, [r2, #12]
 8001d1e:	4311      	orrs	r1, r2
 8001d20:	687a      	ldr	r2, [r7, #4]
 8001d22:	6812      	ldr	r2, [r2, #0]
 8001d24:	430b      	orrs	r3, r1
 8001d26:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	68db      	ldr	r3, [r3, #12]
 8001d2e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	695a      	ldr	r2, [r3, #20]
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	699b      	ldr	r3, [r3, #24]
 8001d3a:	431a      	orrs	r2, r3
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	430a      	orrs	r2, r1
 8001d42:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	681a      	ldr	r2, [r3, #0]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f042 0201 	orr.w	r2, r2, #1
 8001d52:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2200      	movs	r2, #0
 8001d58:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2220      	movs	r2, #32
 8001d5e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2200      	movs	r2, #0
 8001d66:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001d70:	2300      	movs	r3, #0
}
 8001d72:	4618      	mov	r0, r3
 8001d74:	3710      	adds	r7, #16
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}
 8001d7a:	bf00      	nop
 8001d7c:	000186a0 	.word	0x000186a0
 8001d80:	001e847f 	.word	0x001e847f
 8001d84:	003d08ff 	.word	0x003d08ff
 8001d88:	431bde83 	.word	0x431bde83
 8001d8c:	10624dd3 	.word	0x10624dd3

08001d90 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b088      	sub	sp, #32
 8001d94:	af02      	add	r7, sp, #8
 8001d96:	60f8      	str	r0, [r7, #12]
 8001d98:	4608      	mov	r0, r1
 8001d9a:	4611      	mov	r1, r2
 8001d9c:	461a      	mov	r2, r3
 8001d9e:	4603      	mov	r3, r0
 8001da0:	817b      	strh	r3, [r7, #10]
 8001da2:	460b      	mov	r3, r1
 8001da4:	813b      	strh	r3, [r7, #8]
 8001da6:	4613      	mov	r3, r2
 8001da8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001daa:	f7ff f91b 	bl	8000fe4 <HAL_GetTick>
 8001dae:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001db6:	b2db      	uxtb	r3, r3
 8001db8:	2b20      	cmp	r3, #32
 8001dba:	f040 80d9 	bne.w	8001f70 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001dbe:	697b      	ldr	r3, [r7, #20]
 8001dc0:	9300      	str	r3, [sp, #0]
 8001dc2:	2319      	movs	r3, #25
 8001dc4:	2201      	movs	r2, #1
 8001dc6:	496d      	ldr	r1, [pc, #436]	@ (8001f7c <HAL_I2C_Mem_Write+0x1ec>)
 8001dc8:	68f8      	ldr	r0, [r7, #12]
 8001dca:	f000 f971 	bl	80020b0 <I2C_WaitOnFlagUntilTimeout>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d001      	beq.n	8001dd8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001dd4:	2302      	movs	r3, #2
 8001dd6:	e0cc      	b.n	8001f72 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001dde:	2b01      	cmp	r3, #1
 8001de0:	d101      	bne.n	8001de6 <HAL_I2C_Mem_Write+0x56>
 8001de2:	2302      	movs	r3, #2
 8001de4:	e0c5      	b.n	8001f72 <HAL_I2C_Mem_Write+0x1e2>
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	2201      	movs	r2, #1
 8001dea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f003 0301 	and.w	r3, r3, #1
 8001df8:	2b01      	cmp	r3, #1
 8001dfa:	d007      	beq.n	8001e0c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	681a      	ldr	r2, [r3, #0]
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f042 0201 	orr.w	r2, r2, #1
 8001e0a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	681a      	ldr	r2, [r3, #0]
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001e1a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	2221      	movs	r2, #33	@ 0x21
 8001e20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	2240      	movs	r2, #64	@ 0x40
 8001e28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	2200      	movs	r2, #0
 8001e30:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	6a3a      	ldr	r2, [r7, #32]
 8001e36:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001e3c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e42:	b29a      	uxth	r2, r3
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	4a4d      	ldr	r2, [pc, #308]	@ (8001f80 <HAL_I2C_Mem_Write+0x1f0>)
 8001e4c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001e4e:	88f8      	ldrh	r0, [r7, #6]
 8001e50:	893a      	ldrh	r2, [r7, #8]
 8001e52:	8979      	ldrh	r1, [r7, #10]
 8001e54:	697b      	ldr	r3, [r7, #20]
 8001e56:	9301      	str	r3, [sp, #4]
 8001e58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e5a:	9300      	str	r3, [sp, #0]
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	68f8      	ldr	r0, [r7, #12]
 8001e60:	f000 f890 	bl	8001f84 <I2C_RequestMemoryWrite>
 8001e64:	4603      	mov	r3, r0
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d052      	beq.n	8001f10 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e081      	b.n	8001f72 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e6e:	697a      	ldr	r2, [r7, #20]
 8001e70:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001e72:	68f8      	ldr	r0, [r7, #12]
 8001e74:	f000 fa36 	bl	80022e4 <I2C_WaitOnTXEFlagUntilTimeout>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d00d      	beq.n	8001e9a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e82:	2b04      	cmp	r3, #4
 8001e84:	d107      	bne.n	8001e96 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	681a      	ldr	r2, [r3, #0]
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001e94:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001e96:	2301      	movs	r3, #1
 8001e98:	e06b      	b.n	8001f72 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e9e:	781a      	ldrb	r2, [r3, #0]
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eaa:	1c5a      	adds	r2, r3, #1
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001eb4:	3b01      	subs	r3, #1
 8001eb6:	b29a      	uxth	r2, r3
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ec0:	b29b      	uxth	r3, r3
 8001ec2:	3b01      	subs	r3, #1
 8001ec4:	b29a      	uxth	r2, r3
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	695b      	ldr	r3, [r3, #20]
 8001ed0:	f003 0304 	and.w	r3, r3, #4
 8001ed4:	2b04      	cmp	r3, #4
 8001ed6:	d11b      	bne.n	8001f10 <HAL_I2C_Mem_Write+0x180>
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d017      	beq.n	8001f10 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ee4:	781a      	ldrb	r2, [r3, #0]
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ef0:	1c5a      	adds	r2, r3, #1
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001efa:	3b01      	subs	r3, #1
 8001efc:	b29a      	uxth	r2, r3
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f06:	b29b      	uxth	r3, r3
 8001f08:	3b01      	subs	r3, #1
 8001f0a:	b29a      	uxth	r2, r3
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d1aa      	bne.n	8001e6e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f18:	697a      	ldr	r2, [r7, #20]
 8001f1a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001f1c:	68f8      	ldr	r0, [r7, #12]
 8001f1e:	f000 fa29 	bl	8002374 <I2C_WaitOnBTFFlagUntilTimeout>
 8001f22:	4603      	mov	r3, r0
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d00d      	beq.n	8001f44 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f2c:	2b04      	cmp	r3, #4
 8001f2e:	d107      	bne.n	8001f40 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	681a      	ldr	r2, [r3, #0]
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001f3e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001f40:	2301      	movs	r3, #1
 8001f42:	e016      	b.n	8001f72 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	681a      	ldr	r2, [r3, #0]
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001f52:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	2220      	movs	r2, #32
 8001f58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	2200      	movs	r2, #0
 8001f60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	2200      	movs	r2, #0
 8001f68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	e000      	b.n	8001f72 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001f70:	2302      	movs	r3, #2
  }
}
 8001f72:	4618      	mov	r0, r3
 8001f74:	3718      	adds	r7, #24
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}
 8001f7a:	bf00      	nop
 8001f7c:	00100002 	.word	0x00100002
 8001f80:	ffff0000 	.word	0xffff0000

08001f84 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b088      	sub	sp, #32
 8001f88:	af02      	add	r7, sp, #8
 8001f8a:	60f8      	str	r0, [r7, #12]
 8001f8c:	4608      	mov	r0, r1
 8001f8e:	4611      	mov	r1, r2
 8001f90:	461a      	mov	r2, r3
 8001f92:	4603      	mov	r3, r0
 8001f94:	817b      	strh	r3, [r7, #10]
 8001f96:	460b      	mov	r3, r1
 8001f98:	813b      	strh	r3, [r7, #8]
 8001f9a:	4613      	mov	r3, r2
 8001f9c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	681a      	ldr	r2, [r3, #0]
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001fac:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001fae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fb0:	9300      	str	r3, [sp, #0]
 8001fb2:	6a3b      	ldr	r3, [r7, #32]
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001fba:	68f8      	ldr	r0, [r7, #12]
 8001fbc:	f000 f878 	bl	80020b0 <I2C_WaitOnFlagUntilTimeout>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d00d      	beq.n	8001fe2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fd0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001fd4:	d103      	bne.n	8001fde <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001fdc:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001fde:	2303      	movs	r3, #3
 8001fe0:	e05f      	b.n	80020a2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001fe2:	897b      	ldrh	r3, [r7, #10]
 8001fe4:	b2db      	uxtb	r3, r3
 8001fe6:	461a      	mov	r2, r3
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001ff0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001ff2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ff4:	6a3a      	ldr	r2, [r7, #32]
 8001ff6:	492d      	ldr	r1, [pc, #180]	@ (80020ac <I2C_RequestMemoryWrite+0x128>)
 8001ff8:	68f8      	ldr	r0, [r7, #12]
 8001ffa:	f000 f8d3 	bl	80021a4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001ffe:	4603      	mov	r3, r0
 8002000:	2b00      	cmp	r3, #0
 8002002:	d001      	beq.n	8002008 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002004:	2301      	movs	r3, #1
 8002006:	e04c      	b.n	80020a2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002008:	2300      	movs	r3, #0
 800200a:	617b      	str	r3, [r7, #20]
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	695b      	ldr	r3, [r3, #20]
 8002012:	617b      	str	r3, [r7, #20]
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	699b      	ldr	r3, [r3, #24]
 800201a:	617b      	str	r3, [r7, #20]
 800201c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800201e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002020:	6a39      	ldr	r1, [r7, #32]
 8002022:	68f8      	ldr	r0, [r7, #12]
 8002024:	f000 f95e 	bl	80022e4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002028:	4603      	mov	r3, r0
 800202a:	2b00      	cmp	r3, #0
 800202c:	d00d      	beq.n	800204a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002032:	2b04      	cmp	r3, #4
 8002034:	d107      	bne.n	8002046 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	681a      	ldr	r2, [r3, #0]
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002044:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002046:	2301      	movs	r3, #1
 8002048:	e02b      	b.n	80020a2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800204a:	88fb      	ldrh	r3, [r7, #6]
 800204c:	2b01      	cmp	r3, #1
 800204e:	d105      	bne.n	800205c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002050:	893b      	ldrh	r3, [r7, #8]
 8002052:	b2da      	uxtb	r2, r3
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	611a      	str	r2, [r3, #16]
 800205a:	e021      	b.n	80020a0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800205c:	893b      	ldrh	r3, [r7, #8]
 800205e:	0a1b      	lsrs	r3, r3, #8
 8002060:	b29b      	uxth	r3, r3
 8002062:	b2da      	uxtb	r2, r3
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800206a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800206c:	6a39      	ldr	r1, [r7, #32]
 800206e:	68f8      	ldr	r0, [r7, #12]
 8002070:	f000 f938 	bl	80022e4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002074:	4603      	mov	r3, r0
 8002076:	2b00      	cmp	r3, #0
 8002078:	d00d      	beq.n	8002096 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800207e:	2b04      	cmp	r3, #4
 8002080:	d107      	bne.n	8002092 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	681a      	ldr	r2, [r3, #0]
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002090:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002092:	2301      	movs	r3, #1
 8002094:	e005      	b.n	80020a2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002096:	893b      	ldrh	r3, [r7, #8]
 8002098:	b2da      	uxtb	r2, r3
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80020a0:	2300      	movs	r3, #0
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	3718      	adds	r7, #24
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}
 80020aa:	bf00      	nop
 80020ac:	00010002 	.word	0x00010002

080020b0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b084      	sub	sp, #16
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	60f8      	str	r0, [r7, #12]
 80020b8:	60b9      	str	r1, [r7, #8]
 80020ba:	603b      	str	r3, [r7, #0]
 80020bc:	4613      	mov	r3, r2
 80020be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80020c0:	e048      	b.n	8002154 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020c8:	d044      	beq.n	8002154 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020ca:	f7fe ff8b 	bl	8000fe4 <HAL_GetTick>
 80020ce:	4602      	mov	r2, r0
 80020d0:	69bb      	ldr	r3, [r7, #24]
 80020d2:	1ad3      	subs	r3, r2, r3
 80020d4:	683a      	ldr	r2, [r7, #0]
 80020d6:	429a      	cmp	r2, r3
 80020d8:	d302      	bcc.n	80020e0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d139      	bne.n	8002154 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80020e0:	68bb      	ldr	r3, [r7, #8]
 80020e2:	0c1b      	lsrs	r3, r3, #16
 80020e4:	b2db      	uxtb	r3, r3
 80020e6:	2b01      	cmp	r3, #1
 80020e8:	d10d      	bne.n	8002106 <I2C_WaitOnFlagUntilTimeout+0x56>
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	695b      	ldr	r3, [r3, #20]
 80020f0:	43da      	mvns	r2, r3
 80020f2:	68bb      	ldr	r3, [r7, #8]
 80020f4:	4013      	ands	r3, r2
 80020f6:	b29b      	uxth	r3, r3
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	bf0c      	ite	eq
 80020fc:	2301      	moveq	r3, #1
 80020fe:	2300      	movne	r3, #0
 8002100:	b2db      	uxtb	r3, r3
 8002102:	461a      	mov	r2, r3
 8002104:	e00c      	b.n	8002120 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	699b      	ldr	r3, [r3, #24]
 800210c:	43da      	mvns	r2, r3
 800210e:	68bb      	ldr	r3, [r7, #8]
 8002110:	4013      	ands	r3, r2
 8002112:	b29b      	uxth	r3, r3
 8002114:	2b00      	cmp	r3, #0
 8002116:	bf0c      	ite	eq
 8002118:	2301      	moveq	r3, #1
 800211a:	2300      	movne	r3, #0
 800211c:	b2db      	uxtb	r3, r3
 800211e:	461a      	mov	r2, r3
 8002120:	79fb      	ldrb	r3, [r7, #7]
 8002122:	429a      	cmp	r2, r3
 8002124:	d116      	bne.n	8002154 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	2200      	movs	r2, #0
 800212a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	2220      	movs	r2, #32
 8002130:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	2200      	movs	r2, #0
 8002138:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002140:	f043 0220 	orr.w	r2, r3, #32
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	2200      	movs	r2, #0
 800214c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002150:	2301      	movs	r3, #1
 8002152:	e023      	b.n	800219c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002154:	68bb      	ldr	r3, [r7, #8]
 8002156:	0c1b      	lsrs	r3, r3, #16
 8002158:	b2db      	uxtb	r3, r3
 800215a:	2b01      	cmp	r3, #1
 800215c:	d10d      	bne.n	800217a <I2C_WaitOnFlagUntilTimeout+0xca>
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	695b      	ldr	r3, [r3, #20]
 8002164:	43da      	mvns	r2, r3
 8002166:	68bb      	ldr	r3, [r7, #8]
 8002168:	4013      	ands	r3, r2
 800216a:	b29b      	uxth	r3, r3
 800216c:	2b00      	cmp	r3, #0
 800216e:	bf0c      	ite	eq
 8002170:	2301      	moveq	r3, #1
 8002172:	2300      	movne	r3, #0
 8002174:	b2db      	uxtb	r3, r3
 8002176:	461a      	mov	r2, r3
 8002178:	e00c      	b.n	8002194 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	699b      	ldr	r3, [r3, #24]
 8002180:	43da      	mvns	r2, r3
 8002182:	68bb      	ldr	r3, [r7, #8]
 8002184:	4013      	ands	r3, r2
 8002186:	b29b      	uxth	r3, r3
 8002188:	2b00      	cmp	r3, #0
 800218a:	bf0c      	ite	eq
 800218c:	2301      	moveq	r3, #1
 800218e:	2300      	movne	r3, #0
 8002190:	b2db      	uxtb	r3, r3
 8002192:	461a      	mov	r2, r3
 8002194:	79fb      	ldrb	r3, [r7, #7]
 8002196:	429a      	cmp	r2, r3
 8002198:	d093      	beq.n	80020c2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800219a:	2300      	movs	r3, #0
}
 800219c:	4618      	mov	r0, r3
 800219e:	3710      	adds	r7, #16
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bd80      	pop	{r7, pc}

080021a4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b084      	sub	sp, #16
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	60f8      	str	r0, [r7, #12]
 80021ac:	60b9      	str	r1, [r7, #8]
 80021ae:	607a      	str	r2, [r7, #4]
 80021b0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80021b2:	e071      	b.n	8002298 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	695b      	ldr	r3, [r3, #20]
 80021ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80021c2:	d123      	bne.n	800220c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	681a      	ldr	r2, [r3, #0]
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80021d2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80021dc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	2200      	movs	r2, #0
 80021e2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	2220      	movs	r2, #32
 80021e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	2200      	movs	r2, #0
 80021f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021f8:	f043 0204 	orr.w	r2, r3, #4
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	2200      	movs	r2, #0
 8002204:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002208:	2301      	movs	r3, #1
 800220a:	e067      	b.n	80022dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002212:	d041      	beq.n	8002298 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002214:	f7fe fee6 	bl	8000fe4 <HAL_GetTick>
 8002218:	4602      	mov	r2, r0
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	1ad3      	subs	r3, r2, r3
 800221e:	687a      	ldr	r2, [r7, #4]
 8002220:	429a      	cmp	r2, r3
 8002222:	d302      	bcc.n	800222a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d136      	bne.n	8002298 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800222a:	68bb      	ldr	r3, [r7, #8]
 800222c:	0c1b      	lsrs	r3, r3, #16
 800222e:	b2db      	uxtb	r3, r3
 8002230:	2b01      	cmp	r3, #1
 8002232:	d10c      	bne.n	800224e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	695b      	ldr	r3, [r3, #20]
 800223a:	43da      	mvns	r2, r3
 800223c:	68bb      	ldr	r3, [r7, #8]
 800223e:	4013      	ands	r3, r2
 8002240:	b29b      	uxth	r3, r3
 8002242:	2b00      	cmp	r3, #0
 8002244:	bf14      	ite	ne
 8002246:	2301      	movne	r3, #1
 8002248:	2300      	moveq	r3, #0
 800224a:	b2db      	uxtb	r3, r3
 800224c:	e00b      	b.n	8002266 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	699b      	ldr	r3, [r3, #24]
 8002254:	43da      	mvns	r2, r3
 8002256:	68bb      	ldr	r3, [r7, #8]
 8002258:	4013      	ands	r3, r2
 800225a:	b29b      	uxth	r3, r3
 800225c:	2b00      	cmp	r3, #0
 800225e:	bf14      	ite	ne
 8002260:	2301      	movne	r3, #1
 8002262:	2300      	moveq	r3, #0
 8002264:	b2db      	uxtb	r3, r3
 8002266:	2b00      	cmp	r3, #0
 8002268:	d016      	beq.n	8002298 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	2200      	movs	r2, #0
 800226e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	2220      	movs	r2, #32
 8002274:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	2200      	movs	r2, #0
 800227c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002284:	f043 0220 	orr.w	r2, r3, #32
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	2200      	movs	r2, #0
 8002290:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002294:	2301      	movs	r3, #1
 8002296:	e021      	b.n	80022dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	0c1b      	lsrs	r3, r3, #16
 800229c:	b2db      	uxtb	r3, r3
 800229e:	2b01      	cmp	r3, #1
 80022a0:	d10c      	bne.n	80022bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	695b      	ldr	r3, [r3, #20]
 80022a8:	43da      	mvns	r2, r3
 80022aa:	68bb      	ldr	r3, [r7, #8]
 80022ac:	4013      	ands	r3, r2
 80022ae:	b29b      	uxth	r3, r3
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	bf14      	ite	ne
 80022b4:	2301      	movne	r3, #1
 80022b6:	2300      	moveq	r3, #0
 80022b8:	b2db      	uxtb	r3, r3
 80022ba:	e00b      	b.n	80022d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	699b      	ldr	r3, [r3, #24]
 80022c2:	43da      	mvns	r2, r3
 80022c4:	68bb      	ldr	r3, [r7, #8]
 80022c6:	4013      	ands	r3, r2
 80022c8:	b29b      	uxth	r3, r3
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	bf14      	ite	ne
 80022ce:	2301      	movne	r3, #1
 80022d0:	2300      	moveq	r3, #0
 80022d2:	b2db      	uxtb	r3, r3
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	f47f af6d 	bne.w	80021b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80022da:	2300      	movs	r3, #0
}
 80022dc:	4618      	mov	r0, r3
 80022de:	3710      	adds	r7, #16
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}

080022e4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b084      	sub	sp, #16
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	60f8      	str	r0, [r7, #12]
 80022ec:	60b9      	str	r1, [r7, #8]
 80022ee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80022f0:	e034      	b.n	800235c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80022f2:	68f8      	ldr	r0, [r7, #12]
 80022f4:	f000 f886 	bl	8002404 <I2C_IsAcknowledgeFailed>
 80022f8:	4603      	mov	r3, r0
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d001      	beq.n	8002302 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80022fe:	2301      	movs	r3, #1
 8002300:	e034      	b.n	800236c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002302:	68bb      	ldr	r3, [r7, #8]
 8002304:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002308:	d028      	beq.n	800235c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800230a:	f7fe fe6b 	bl	8000fe4 <HAL_GetTick>
 800230e:	4602      	mov	r2, r0
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	1ad3      	subs	r3, r2, r3
 8002314:	68ba      	ldr	r2, [r7, #8]
 8002316:	429a      	cmp	r2, r3
 8002318:	d302      	bcc.n	8002320 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800231a:	68bb      	ldr	r3, [r7, #8]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d11d      	bne.n	800235c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	695b      	ldr	r3, [r3, #20]
 8002326:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800232a:	2b80      	cmp	r3, #128	@ 0x80
 800232c:	d016      	beq.n	800235c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	2200      	movs	r2, #0
 8002332:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	2220      	movs	r2, #32
 8002338:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	2200      	movs	r2, #0
 8002340:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002348:	f043 0220 	orr.w	r2, r3, #32
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	2200      	movs	r2, #0
 8002354:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002358:	2301      	movs	r3, #1
 800235a:	e007      	b.n	800236c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	695b      	ldr	r3, [r3, #20]
 8002362:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002366:	2b80      	cmp	r3, #128	@ 0x80
 8002368:	d1c3      	bne.n	80022f2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800236a:	2300      	movs	r3, #0
}
 800236c:	4618      	mov	r0, r3
 800236e:	3710      	adds	r7, #16
 8002370:	46bd      	mov	sp, r7
 8002372:	bd80      	pop	{r7, pc}

08002374 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b084      	sub	sp, #16
 8002378:	af00      	add	r7, sp, #0
 800237a:	60f8      	str	r0, [r7, #12]
 800237c:	60b9      	str	r1, [r7, #8]
 800237e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002380:	e034      	b.n	80023ec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002382:	68f8      	ldr	r0, [r7, #12]
 8002384:	f000 f83e 	bl	8002404 <I2C_IsAcknowledgeFailed>
 8002388:	4603      	mov	r3, r0
 800238a:	2b00      	cmp	r3, #0
 800238c:	d001      	beq.n	8002392 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800238e:	2301      	movs	r3, #1
 8002390:	e034      	b.n	80023fc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002392:	68bb      	ldr	r3, [r7, #8]
 8002394:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002398:	d028      	beq.n	80023ec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800239a:	f7fe fe23 	bl	8000fe4 <HAL_GetTick>
 800239e:	4602      	mov	r2, r0
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	1ad3      	subs	r3, r2, r3
 80023a4:	68ba      	ldr	r2, [r7, #8]
 80023a6:	429a      	cmp	r2, r3
 80023a8:	d302      	bcc.n	80023b0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80023aa:	68bb      	ldr	r3, [r7, #8]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d11d      	bne.n	80023ec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	695b      	ldr	r3, [r3, #20]
 80023b6:	f003 0304 	and.w	r3, r3, #4
 80023ba:	2b04      	cmp	r3, #4
 80023bc:	d016      	beq.n	80023ec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	2200      	movs	r2, #0
 80023c2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	2220      	movs	r2, #32
 80023c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	2200      	movs	r2, #0
 80023d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023d8:	f043 0220 	orr.w	r2, r3, #32
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	2200      	movs	r2, #0
 80023e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80023e8:	2301      	movs	r3, #1
 80023ea:	e007      	b.n	80023fc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	695b      	ldr	r3, [r3, #20]
 80023f2:	f003 0304 	and.w	r3, r3, #4
 80023f6:	2b04      	cmp	r3, #4
 80023f8:	d1c3      	bne.n	8002382 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80023fa:	2300      	movs	r3, #0
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	3710      	adds	r7, #16
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}

08002404 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002404:	b480      	push	{r7}
 8002406:	b083      	sub	sp, #12
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	695b      	ldr	r3, [r3, #20]
 8002412:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002416:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800241a:	d11b      	bne.n	8002454 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002424:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2200      	movs	r2, #0
 800242a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2220      	movs	r2, #32
 8002430:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2200      	movs	r2, #0
 8002438:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002440:	f043 0204 	orr.w	r2, r3, #4
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2200      	movs	r2, #0
 800244c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002450:	2301      	movs	r3, #1
 8002452:	e000      	b.n	8002456 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002454:	2300      	movs	r3, #0
}
 8002456:	4618      	mov	r0, r3
 8002458:	370c      	adds	r7, #12
 800245a:	46bd      	mov	sp, r7
 800245c:	bc80      	pop	{r7}
 800245e:	4770      	bx	lr

08002460 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002460:	b480      	push	{r7}
 8002462:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8002464:	4b03      	ldr	r3, [pc, #12]	@ (8002474 <HAL_PWR_EnableBkUpAccess+0x14>)
 8002466:	2201      	movs	r2, #1
 8002468:	601a      	str	r2, [r3, #0]
}
 800246a:	bf00      	nop
 800246c:	46bd      	mov	sp, r7
 800246e:	bc80      	pop	{r7}
 8002470:	4770      	bx	lr
 8002472:	bf00      	nop
 8002474:	420e0020 	.word	0x420e0020

08002478 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b086      	sub	sp, #24
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d101      	bne.n	800248a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002486:	2301      	movs	r3, #1
 8002488:	e272      	b.n	8002970 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f003 0301 	and.w	r3, r3, #1
 8002492:	2b00      	cmp	r3, #0
 8002494:	f000 8087 	beq.w	80025a6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002498:	4b92      	ldr	r3, [pc, #584]	@ (80026e4 <HAL_RCC_OscConfig+0x26c>)
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	f003 030c 	and.w	r3, r3, #12
 80024a0:	2b04      	cmp	r3, #4
 80024a2:	d00c      	beq.n	80024be <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80024a4:	4b8f      	ldr	r3, [pc, #572]	@ (80026e4 <HAL_RCC_OscConfig+0x26c>)
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	f003 030c 	and.w	r3, r3, #12
 80024ac:	2b08      	cmp	r3, #8
 80024ae:	d112      	bne.n	80024d6 <HAL_RCC_OscConfig+0x5e>
 80024b0:	4b8c      	ldr	r3, [pc, #560]	@ (80026e4 <HAL_RCC_OscConfig+0x26c>)
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80024bc:	d10b      	bne.n	80024d6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024be:	4b89      	ldr	r3, [pc, #548]	@ (80026e4 <HAL_RCC_OscConfig+0x26c>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d06c      	beq.n	80025a4 <HAL_RCC_OscConfig+0x12c>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d168      	bne.n	80025a4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80024d2:	2301      	movs	r3, #1
 80024d4:	e24c      	b.n	8002970 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80024de:	d106      	bne.n	80024ee <HAL_RCC_OscConfig+0x76>
 80024e0:	4b80      	ldr	r3, [pc, #512]	@ (80026e4 <HAL_RCC_OscConfig+0x26c>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a7f      	ldr	r2, [pc, #508]	@ (80026e4 <HAL_RCC_OscConfig+0x26c>)
 80024e6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024ea:	6013      	str	r3, [r2, #0]
 80024ec:	e02e      	b.n	800254c <HAL_RCC_OscConfig+0xd4>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d10c      	bne.n	8002510 <HAL_RCC_OscConfig+0x98>
 80024f6:	4b7b      	ldr	r3, [pc, #492]	@ (80026e4 <HAL_RCC_OscConfig+0x26c>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4a7a      	ldr	r2, [pc, #488]	@ (80026e4 <HAL_RCC_OscConfig+0x26c>)
 80024fc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002500:	6013      	str	r3, [r2, #0]
 8002502:	4b78      	ldr	r3, [pc, #480]	@ (80026e4 <HAL_RCC_OscConfig+0x26c>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4a77      	ldr	r2, [pc, #476]	@ (80026e4 <HAL_RCC_OscConfig+0x26c>)
 8002508:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800250c:	6013      	str	r3, [r2, #0]
 800250e:	e01d      	b.n	800254c <HAL_RCC_OscConfig+0xd4>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002518:	d10c      	bne.n	8002534 <HAL_RCC_OscConfig+0xbc>
 800251a:	4b72      	ldr	r3, [pc, #456]	@ (80026e4 <HAL_RCC_OscConfig+0x26c>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4a71      	ldr	r2, [pc, #452]	@ (80026e4 <HAL_RCC_OscConfig+0x26c>)
 8002520:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002524:	6013      	str	r3, [r2, #0]
 8002526:	4b6f      	ldr	r3, [pc, #444]	@ (80026e4 <HAL_RCC_OscConfig+0x26c>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a6e      	ldr	r2, [pc, #440]	@ (80026e4 <HAL_RCC_OscConfig+0x26c>)
 800252c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002530:	6013      	str	r3, [r2, #0]
 8002532:	e00b      	b.n	800254c <HAL_RCC_OscConfig+0xd4>
 8002534:	4b6b      	ldr	r3, [pc, #428]	@ (80026e4 <HAL_RCC_OscConfig+0x26c>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a6a      	ldr	r2, [pc, #424]	@ (80026e4 <HAL_RCC_OscConfig+0x26c>)
 800253a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800253e:	6013      	str	r3, [r2, #0]
 8002540:	4b68      	ldr	r3, [pc, #416]	@ (80026e4 <HAL_RCC_OscConfig+0x26c>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a67      	ldr	r2, [pc, #412]	@ (80026e4 <HAL_RCC_OscConfig+0x26c>)
 8002546:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800254a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d013      	beq.n	800257c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002554:	f7fe fd46 	bl	8000fe4 <HAL_GetTick>
 8002558:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800255a:	e008      	b.n	800256e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800255c:	f7fe fd42 	bl	8000fe4 <HAL_GetTick>
 8002560:	4602      	mov	r2, r0
 8002562:	693b      	ldr	r3, [r7, #16]
 8002564:	1ad3      	subs	r3, r2, r3
 8002566:	2b64      	cmp	r3, #100	@ 0x64
 8002568:	d901      	bls.n	800256e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800256a:	2303      	movs	r3, #3
 800256c:	e200      	b.n	8002970 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800256e:	4b5d      	ldr	r3, [pc, #372]	@ (80026e4 <HAL_RCC_OscConfig+0x26c>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002576:	2b00      	cmp	r3, #0
 8002578:	d0f0      	beq.n	800255c <HAL_RCC_OscConfig+0xe4>
 800257a:	e014      	b.n	80025a6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800257c:	f7fe fd32 	bl	8000fe4 <HAL_GetTick>
 8002580:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002582:	e008      	b.n	8002596 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002584:	f7fe fd2e 	bl	8000fe4 <HAL_GetTick>
 8002588:	4602      	mov	r2, r0
 800258a:	693b      	ldr	r3, [r7, #16]
 800258c:	1ad3      	subs	r3, r2, r3
 800258e:	2b64      	cmp	r3, #100	@ 0x64
 8002590:	d901      	bls.n	8002596 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002592:	2303      	movs	r3, #3
 8002594:	e1ec      	b.n	8002970 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002596:	4b53      	ldr	r3, [pc, #332]	@ (80026e4 <HAL_RCC_OscConfig+0x26c>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d1f0      	bne.n	8002584 <HAL_RCC_OscConfig+0x10c>
 80025a2:	e000      	b.n	80025a6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f003 0302 	and.w	r3, r3, #2
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d063      	beq.n	800267a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80025b2:	4b4c      	ldr	r3, [pc, #304]	@ (80026e4 <HAL_RCC_OscConfig+0x26c>)
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	f003 030c 	and.w	r3, r3, #12
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d00b      	beq.n	80025d6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80025be:	4b49      	ldr	r3, [pc, #292]	@ (80026e4 <HAL_RCC_OscConfig+0x26c>)
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	f003 030c 	and.w	r3, r3, #12
 80025c6:	2b08      	cmp	r3, #8
 80025c8:	d11c      	bne.n	8002604 <HAL_RCC_OscConfig+0x18c>
 80025ca:	4b46      	ldr	r3, [pc, #280]	@ (80026e4 <HAL_RCC_OscConfig+0x26c>)
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d116      	bne.n	8002604 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025d6:	4b43      	ldr	r3, [pc, #268]	@ (80026e4 <HAL_RCC_OscConfig+0x26c>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f003 0302 	and.w	r3, r3, #2
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d005      	beq.n	80025ee <HAL_RCC_OscConfig+0x176>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	691b      	ldr	r3, [r3, #16]
 80025e6:	2b01      	cmp	r3, #1
 80025e8:	d001      	beq.n	80025ee <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80025ea:	2301      	movs	r3, #1
 80025ec:	e1c0      	b.n	8002970 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025ee:	4b3d      	ldr	r3, [pc, #244]	@ (80026e4 <HAL_RCC_OscConfig+0x26c>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	695b      	ldr	r3, [r3, #20]
 80025fa:	00db      	lsls	r3, r3, #3
 80025fc:	4939      	ldr	r1, [pc, #228]	@ (80026e4 <HAL_RCC_OscConfig+0x26c>)
 80025fe:	4313      	orrs	r3, r2
 8002600:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002602:	e03a      	b.n	800267a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	691b      	ldr	r3, [r3, #16]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d020      	beq.n	800264e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800260c:	4b36      	ldr	r3, [pc, #216]	@ (80026e8 <HAL_RCC_OscConfig+0x270>)
 800260e:	2201      	movs	r2, #1
 8002610:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002612:	f7fe fce7 	bl	8000fe4 <HAL_GetTick>
 8002616:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002618:	e008      	b.n	800262c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800261a:	f7fe fce3 	bl	8000fe4 <HAL_GetTick>
 800261e:	4602      	mov	r2, r0
 8002620:	693b      	ldr	r3, [r7, #16]
 8002622:	1ad3      	subs	r3, r2, r3
 8002624:	2b02      	cmp	r3, #2
 8002626:	d901      	bls.n	800262c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002628:	2303      	movs	r3, #3
 800262a:	e1a1      	b.n	8002970 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800262c:	4b2d      	ldr	r3, [pc, #180]	@ (80026e4 <HAL_RCC_OscConfig+0x26c>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f003 0302 	and.w	r3, r3, #2
 8002634:	2b00      	cmp	r3, #0
 8002636:	d0f0      	beq.n	800261a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002638:	4b2a      	ldr	r3, [pc, #168]	@ (80026e4 <HAL_RCC_OscConfig+0x26c>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	695b      	ldr	r3, [r3, #20]
 8002644:	00db      	lsls	r3, r3, #3
 8002646:	4927      	ldr	r1, [pc, #156]	@ (80026e4 <HAL_RCC_OscConfig+0x26c>)
 8002648:	4313      	orrs	r3, r2
 800264a:	600b      	str	r3, [r1, #0]
 800264c:	e015      	b.n	800267a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800264e:	4b26      	ldr	r3, [pc, #152]	@ (80026e8 <HAL_RCC_OscConfig+0x270>)
 8002650:	2200      	movs	r2, #0
 8002652:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002654:	f7fe fcc6 	bl	8000fe4 <HAL_GetTick>
 8002658:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800265a:	e008      	b.n	800266e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800265c:	f7fe fcc2 	bl	8000fe4 <HAL_GetTick>
 8002660:	4602      	mov	r2, r0
 8002662:	693b      	ldr	r3, [r7, #16]
 8002664:	1ad3      	subs	r3, r2, r3
 8002666:	2b02      	cmp	r3, #2
 8002668:	d901      	bls.n	800266e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800266a:	2303      	movs	r3, #3
 800266c:	e180      	b.n	8002970 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800266e:	4b1d      	ldr	r3, [pc, #116]	@ (80026e4 <HAL_RCC_OscConfig+0x26c>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f003 0302 	and.w	r3, r3, #2
 8002676:	2b00      	cmp	r3, #0
 8002678:	d1f0      	bne.n	800265c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f003 0308 	and.w	r3, r3, #8
 8002682:	2b00      	cmp	r3, #0
 8002684:	d03a      	beq.n	80026fc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	699b      	ldr	r3, [r3, #24]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d019      	beq.n	80026c2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800268e:	4b17      	ldr	r3, [pc, #92]	@ (80026ec <HAL_RCC_OscConfig+0x274>)
 8002690:	2201      	movs	r2, #1
 8002692:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002694:	f7fe fca6 	bl	8000fe4 <HAL_GetTick>
 8002698:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800269a:	e008      	b.n	80026ae <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800269c:	f7fe fca2 	bl	8000fe4 <HAL_GetTick>
 80026a0:	4602      	mov	r2, r0
 80026a2:	693b      	ldr	r3, [r7, #16]
 80026a4:	1ad3      	subs	r3, r2, r3
 80026a6:	2b02      	cmp	r3, #2
 80026a8:	d901      	bls.n	80026ae <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80026aa:	2303      	movs	r3, #3
 80026ac:	e160      	b.n	8002970 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026ae:	4b0d      	ldr	r3, [pc, #52]	@ (80026e4 <HAL_RCC_OscConfig+0x26c>)
 80026b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026b2:	f003 0302 	and.w	r3, r3, #2
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d0f0      	beq.n	800269c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80026ba:	2001      	movs	r0, #1
 80026bc:	f000 face 	bl	8002c5c <RCC_Delay>
 80026c0:	e01c      	b.n	80026fc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026c2:	4b0a      	ldr	r3, [pc, #40]	@ (80026ec <HAL_RCC_OscConfig+0x274>)
 80026c4:	2200      	movs	r2, #0
 80026c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026c8:	f7fe fc8c 	bl	8000fe4 <HAL_GetTick>
 80026cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026ce:	e00f      	b.n	80026f0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026d0:	f7fe fc88 	bl	8000fe4 <HAL_GetTick>
 80026d4:	4602      	mov	r2, r0
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	1ad3      	subs	r3, r2, r3
 80026da:	2b02      	cmp	r3, #2
 80026dc:	d908      	bls.n	80026f0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80026de:	2303      	movs	r3, #3
 80026e0:	e146      	b.n	8002970 <HAL_RCC_OscConfig+0x4f8>
 80026e2:	bf00      	nop
 80026e4:	40021000 	.word	0x40021000
 80026e8:	42420000 	.word	0x42420000
 80026ec:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026f0:	4b92      	ldr	r3, [pc, #584]	@ (800293c <HAL_RCC_OscConfig+0x4c4>)
 80026f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026f4:	f003 0302 	and.w	r3, r3, #2
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d1e9      	bne.n	80026d0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f003 0304 	and.w	r3, r3, #4
 8002704:	2b00      	cmp	r3, #0
 8002706:	f000 80a6 	beq.w	8002856 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800270a:	2300      	movs	r3, #0
 800270c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800270e:	4b8b      	ldr	r3, [pc, #556]	@ (800293c <HAL_RCC_OscConfig+0x4c4>)
 8002710:	69db      	ldr	r3, [r3, #28]
 8002712:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002716:	2b00      	cmp	r3, #0
 8002718:	d10d      	bne.n	8002736 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800271a:	4b88      	ldr	r3, [pc, #544]	@ (800293c <HAL_RCC_OscConfig+0x4c4>)
 800271c:	69db      	ldr	r3, [r3, #28]
 800271e:	4a87      	ldr	r2, [pc, #540]	@ (800293c <HAL_RCC_OscConfig+0x4c4>)
 8002720:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002724:	61d3      	str	r3, [r2, #28]
 8002726:	4b85      	ldr	r3, [pc, #532]	@ (800293c <HAL_RCC_OscConfig+0x4c4>)
 8002728:	69db      	ldr	r3, [r3, #28]
 800272a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800272e:	60bb      	str	r3, [r7, #8]
 8002730:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002732:	2301      	movs	r3, #1
 8002734:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002736:	4b82      	ldr	r3, [pc, #520]	@ (8002940 <HAL_RCC_OscConfig+0x4c8>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800273e:	2b00      	cmp	r3, #0
 8002740:	d118      	bne.n	8002774 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002742:	4b7f      	ldr	r3, [pc, #508]	@ (8002940 <HAL_RCC_OscConfig+0x4c8>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a7e      	ldr	r2, [pc, #504]	@ (8002940 <HAL_RCC_OscConfig+0x4c8>)
 8002748:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800274c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800274e:	f7fe fc49 	bl	8000fe4 <HAL_GetTick>
 8002752:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002754:	e008      	b.n	8002768 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002756:	f7fe fc45 	bl	8000fe4 <HAL_GetTick>
 800275a:	4602      	mov	r2, r0
 800275c:	693b      	ldr	r3, [r7, #16]
 800275e:	1ad3      	subs	r3, r2, r3
 8002760:	2b64      	cmp	r3, #100	@ 0x64
 8002762:	d901      	bls.n	8002768 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002764:	2303      	movs	r3, #3
 8002766:	e103      	b.n	8002970 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002768:	4b75      	ldr	r3, [pc, #468]	@ (8002940 <HAL_RCC_OscConfig+0x4c8>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002770:	2b00      	cmp	r3, #0
 8002772:	d0f0      	beq.n	8002756 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	68db      	ldr	r3, [r3, #12]
 8002778:	2b01      	cmp	r3, #1
 800277a:	d106      	bne.n	800278a <HAL_RCC_OscConfig+0x312>
 800277c:	4b6f      	ldr	r3, [pc, #444]	@ (800293c <HAL_RCC_OscConfig+0x4c4>)
 800277e:	6a1b      	ldr	r3, [r3, #32]
 8002780:	4a6e      	ldr	r2, [pc, #440]	@ (800293c <HAL_RCC_OscConfig+0x4c4>)
 8002782:	f043 0301 	orr.w	r3, r3, #1
 8002786:	6213      	str	r3, [r2, #32]
 8002788:	e02d      	b.n	80027e6 <HAL_RCC_OscConfig+0x36e>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	68db      	ldr	r3, [r3, #12]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d10c      	bne.n	80027ac <HAL_RCC_OscConfig+0x334>
 8002792:	4b6a      	ldr	r3, [pc, #424]	@ (800293c <HAL_RCC_OscConfig+0x4c4>)
 8002794:	6a1b      	ldr	r3, [r3, #32]
 8002796:	4a69      	ldr	r2, [pc, #420]	@ (800293c <HAL_RCC_OscConfig+0x4c4>)
 8002798:	f023 0301 	bic.w	r3, r3, #1
 800279c:	6213      	str	r3, [r2, #32]
 800279e:	4b67      	ldr	r3, [pc, #412]	@ (800293c <HAL_RCC_OscConfig+0x4c4>)
 80027a0:	6a1b      	ldr	r3, [r3, #32]
 80027a2:	4a66      	ldr	r2, [pc, #408]	@ (800293c <HAL_RCC_OscConfig+0x4c4>)
 80027a4:	f023 0304 	bic.w	r3, r3, #4
 80027a8:	6213      	str	r3, [r2, #32]
 80027aa:	e01c      	b.n	80027e6 <HAL_RCC_OscConfig+0x36e>
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	68db      	ldr	r3, [r3, #12]
 80027b0:	2b05      	cmp	r3, #5
 80027b2:	d10c      	bne.n	80027ce <HAL_RCC_OscConfig+0x356>
 80027b4:	4b61      	ldr	r3, [pc, #388]	@ (800293c <HAL_RCC_OscConfig+0x4c4>)
 80027b6:	6a1b      	ldr	r3, [r3, #32]
 80027b8:	4a60      	ldr	r2, [pc, #384]	@ (800293c <HAL_RCC_OscConfig+0x4c4>)
 80027ba:	f043 0304 	orr.w	r3, r3, #4
 80027be:	6213      	str	r3, [r2, #32]
 80027c0:	4b5e      	ldr	r3, [pc, #376]	@ (800293c <HAL_RCC_OscConfig+0x4c4>)
 80027c2:	6a1b      	ldr	r3, [r3, #32]
 80027c4:	4a5d      	ldr	r2, [pc, #372]	@ (800293c <HAL_RCC_OscConfig+0x4c4>)
 80027c6:	f043 0301 	orr.w	r3, r3, #1
 80027ca:	6213      	str	r3, [r2, #32]
 80027cc:	e00b      	b.n	80027e6 <HAL_RCC_OscConfig+0x36e>
 80027ce:	4b5b      	ldr	r3, [pc, #364]	@ (800293c <HAL_RCC_OscConfig+0x4c4>)
 80027d0:	6a1b      	ldr	r3, [r3, #32]
 80027d2:	4a5a      	ldr	r2, [pc, #360]	@ (800293c <HAL_RCC_OscConfig+0x4c4>)
 80027d4:	f023 0301 	bic.w	r3, r3, #1
 80027d8:	6213      	str	r3, [r2, #32]
 80027da:	4b58      	ldr	r3, [pc, #352]	@ (800293c <HAL_RCC_OscConfig+0x4c4>)
 80027dc:	6a1b      	ldr	r3, [r3, #32]
 80027de:	4a57      	ldr	r2, [pc, #348]	@ (800293c <HAL_RCC_OscConfig+0x4c4>)
 80027e0:	f023 0304 	bic.w	r3, r3, #4
 80027e4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	68db      	ldr	r3, [r3, #12]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d015      	beq.n	800281a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027ee:	f7fe fbf9 	bl	8000fe4 <HAL_GetTick>
 80027f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027f4:	e00a      	b.n	800280c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027f6:	f7fe fbf5 	bl	8000fe4 <HAL_GetTick>
 80027fa:	4602      	mov	r2, r0
 80027fc:	693b      	ldr	r3, [r7, #16]
 80027fe:	1ad3      	subs	r3, r2, r3
 8002800:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002804:	4293      	cmp	r3, r2
 8002806:	d901      	bls.n	800280c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002808:	2303      	movs	r3, #3
 800280a:	e0b1      	b.n	8002970 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800280c:	4b4b      	ldr	r3, [pc, #300]	@ (800293c <HAL_RCC_OscConfig+0x4c4>)
 800280e:	6a1b      	ldr	r3, [r3, #32]
 8002810:	f003 0302 	and.w	r3, r3, #2
 8002814:	2b00      	cmp	r3, #0
 8002816:	d0ee      	beq.n	80027f6 <HAL_RCC_OscConfig+0x37e>
 8002818:	e014      	b.n	8002844 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800281a:	f7fe fbe3 	bl	8000fe4 <HAL_GetTick>
 800281e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002820:	e00a      	b.n	8002838 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002822:	f7fe fbdf 	bl	8000fe4 <HAL_GetTick>
 8002826:	4602      	mov	r2, r0
 8002828:	693b      	ldr	r3, [r7, #16]
 800282a:	1ad3      	subs	r3, r2, r3
 800282c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002830:	4293      	cmp	r3, r2
 8002832:	d901      	bls.n	8002838 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002834:	2303      	movs	r3, #3
 8002836:	e09b      	b.n	8002970 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002838:	4b40      	ldr	r3, [pc, #256]	@ (800293c <HAL_RCC_OscConfig+0x4c4>)
 800283a:	6a1b      	ldr	r3, [r3, #32]
 800283c:	f003 0302 	and.w	r3, r3, #2
 8002840:	2b00      	cmp	r3, #0
 8002842:	d1ee      	bne.n	8002822 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002844:	7dfb      	ldrb	r3, [r7, #23]
 8002846:	2b01      	cmp	r3, #1
 8002848:	d105      	bne.n	8002856 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800284a:	4b3c      	ldr	r3, [pc, #240]	@ (800293c <HAL_RCC_OscConfig+0x4c4>)
 800284c:	69db      	ldr	r3, [r3, #28]
 800284e:	4a3b      	ldr	r2, [pc, #236]	@ (800293c <HAL_RCC_OscConfig+0x4c4>)
 8002850:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002854:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	69db      	ldr	r3, [r3, #28]
 800285a:	2b00      	cmp	r3, #0
 800285c:	f000 8087 	beq.w	800296e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002860:	4b36      	ldr	r3, [pc, #216]	@ (800293c <HAL_RCC_OscConfig+0x4c4>)
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	f003 030c 	and.w	r3, r3, #12
 8002868:	2b08      	cmp	r3, #8
 800286a:	d061      	beq.n	8002930 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	69db      	ldr	r3, [r3, #28]
 8002870:	2b02      	cmp	r3, #2
 8002872:	d146      	bne.n	8002902 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002874:	4b33      	ldr	r3, [pc, #204]	@ (8002944 <HAL_RCC_OscConfig+0x4cc>)
 8002876:	2200      	movs	r2, #0
 8002878:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800287a:	f7fe fbb3 	bl	8000fe4 <HAL_GetTick>
 800287e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002880:	e008      	b.n	8002894 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002882:	f7fe fbaf 	bl	8000fe4 <HAL_GetTick>
 8002886:	4602      	mov	r2, r0
 8002888:	693b      	ldr	r3, [r7, #16]
 800288a:	1ad3      	subs	r3, r2, r3
 800288c:	2b02      	cmp	r3, #2
 800288e:	d901      	bls.n	8002894 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002890:	2303      	movs	r3, #3
 8002892:	e06d      	b.n	8002970 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002894:	4b29      	ldr	r3, [pc, #164]	@ (800293c <HAL_RCC_OscConfig+0x4c4>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800289c:	2b00      	cmp	r3, #0
 800289e:	d1f0      	bne.n	8002882 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6a1b      	ldr	r3, [r3, #32]
 80028a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80028a8:	d108      	bne.n	80028bc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80028aa:	4b24      	ldr	r3, [pc, #144]	@ (800293c <HAL_RCC_OscConfig+0x4c4>)
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	689b      	ldr	r3, [r3, #8]
 80028b6:	4921      	ldr	r1, [pc, #132]	@ (800293c <HAL_RCC_OscConfig+0x4c4>)
 80028b8:	4313      	orrs	r3, r2
 80028ba:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028bc:	4b1f      	ldr	r3, [pc, #124]	@ (800293c <HAL_RCC_OscConfig+0x4c4>)
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6a19      	ldr	r1, [r3, #32]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028cc:	430b      	orrs	r3, r1
 80028ce:	491b      	ldr	r1, [pc, #108]	@ (800293c <HAL_RCC_OscConfig+0x4c4>)
 80028d0:	4313      	orrs	r3, r2
 80028d2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028d4:	4b1b      	ldr	r3, [pc, #108]	@ (8002944 <HAL_RCC_OscConfig+0x4cc>)
 80028d6:	2201      	movs	r2, #1
 80028d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028da:	f7fe fb83 	bl	8000fe4 <HAL_GetTick>
 80028de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80028e0:	e008      	b.n	80028f4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028e2:	f7fe fb7f 	bl	8000fe4 <HAL_GetTick>
 80028e6:	4602      	mov	r2, r0
 80028e8:	693b      	ldr	r3, [r7, #16]
 80028ea:	1ad3      	subs	r3, r2, r3
 80028ec:	2b02      	cmp	r3, #2
 80028ee:	d901      	bls.n	80028f4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80028f0:	2303      	movs	r3, #3
 80028f2:	e03d      	b.n	8002970 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80028f4:	4b11      	ldr	r3, [pc, #68]	@ (800293c <HAL_RCC_OscConfig+0x4c4>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d0f0      	beq.n	80028e2 <HAL_RCC_OscConfig+0x46a>
 8002900:	e035      	b.n	800296e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002902:	4b10      	ldr	r3, [pc, #64]	@ (8002944 <HAL_RCC_OscConfig+0x4cc>)
 8002904:	2200      	movs	r2, #0
 8002906:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002908:	f7fe fb6c 	bl	8000fe4 <HAL_GetTick>
 800290c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800290e:	e008      	b.n	8002922 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002910:	f7fe fb68 	bl	8000fe4 <HAL_GetTick>
 8002914:	4602      	mov	r2, r0
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	1ad3      	subs	r3, r2, r3
 800291a:	2b02      	cmp	r3, #2
 800291c:	d901      	bls.n	8002922 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800291e:	2303      	movs	r3, #3
 8002920:	e026      	b.n	8002970 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002922:	4b06      	ldr	r3, [pc, #24]	@ (800293c <HAL_RCC_OscConfig+0x4c4>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800292a:	2b00      	cmp	r3, #0
 800292c:	d1f0      	bne.n	8002910 <HAL_RCC_OscConfig+0x498>
 800292e:	e01e      	b.n	800296e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	69db      	ldr	r3, [r3, #28]
 8002934:	2b01      	cmp	r3, #1
 8002936:	d107      	bne.n	8002948 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002938:	2301      	movs	r3, #1
 800293a:	e019      	b.n	8002970 <HAL_RCC_OscConfig+0x4f8>
 800293c:	40021000 	.word	0x40021000
 8002940:	40007000 	.word	0x40007000
 8002944:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002948:	4b0b      	ldr	r3, [pc, #44]	@ (8002978 <HAL_RCC_OscConfig+0x500>)
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6a1b      	ldr	r3, [r3, #32]
 8002958:	429a      	cmp	r2, r3
 800295a:	d106      	bne.n	800296a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002966:	429a      	cmp	r2, r3
 8002968:	d001      	beq.n	800296e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800296a:	2301      	movs	r3, #1
 800296c:	e000      	b.n	8002970 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800296e:	2300      	movs	r3, #0
}
 8002970:	4618      	mov	r0, r3
 8002972:	3718      	adds	r7, #24
 8002974:	46bd      	mov	sp, r7
 8002976:	bd80      	pop	{r7, pc}
 8002978:	40021000 	.word	0x40021000

0800297c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b084      	sub	sp, #16
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
 8002984:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d101      	bne.n	8002990 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800298c:	2301      	movs	r3, #1
 800298e:	e0d0      	b.n	8002b32 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002990:	4b6a      	ldr	r3, [pc, #424]	@ (8002b3c <HAL_RCC_ClockConfig+0x1c0>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f003 0307 	and.w	r3, r3, #7
 8002998:	683a      	ldr	r2, [r7, #0]
 800299a:	429a      	cmp	r2, r3
 800299c:	d910      	bls.n	80029c0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800299e:	4b67      	ldr	r3, [pc, #412]	@ (8002b3c <HAL_RCC_ClockConfig+0x1c0>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f023 0207 	bic.w	r2, r3, #7
 80029a6:	4965      	ldr	r1, [pc, #404]	@ (8002b3c <HAL_RCC_ClockConfig+0x1c0>)
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	4313      	orrs	r3, r2
 80029ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029ae:	4b63      	ldr	r3, [pc, #396]	@ (8002b3c <HAL_RCC_ClockConfig+0x1c0>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f003 0307 	and.w	r3, r3, #7
 80029b6:	683a      	ldr	r2, [r7, #0]
 80029b8:	429a      	cmp	r2, r3
 80029ba:	d001      	beq.n	80029c0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80029bc:	2301      	movs	r3, #1
 80029be:	e0b8      	b.n	8002b32 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f003 0302 	and.w	r3, r3, #2
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d020      	beq.n	8002a0e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f003 0304 	and.w	r3, r3, #4
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d005      	beq.n	80029e4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80029d8:	4b59      	ldr	r3, [pc, #356]	@ (8002b40 <HAL_RCC_ClockConfig+0x1c4>)
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	4a58      	ldr	r2, [pc, #352]	@ (8002b40 <HAL_RCC_ClockConfig+0x1c4>)
 80029de:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80029e2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f003 0308 	and.w	r3, r3, #8
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d005      	beq.n	80029fc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80029f0:	4b53      	ldr	r3, [pc, #332]	@ (8002b40 <HAL_RCC_ClockConfig+0x1c4>)
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	4a52      	ldr	r2, [pc, #328]	@ (8002b40 <HAL_RCC_ClockConfig+0x1c4>)
 80029f6:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80029fa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029fc:	4b50      	ldr	r3, [pc, #320]	@ (8002b40 <HAL_RCC_ClockConfig+0x1c4>)
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	689b      	ldr	r3, [r3, #8]
 8002a08:	494d      	ldr	r1, [pc, #308]	@ (8002b40 <HAL_RCC_ClockConfig+0x1c4>)
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f003 0301 	and.w	r3, r3, #1
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d040      	beq.n	8002a9c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	2b01      	cmp	r3, #1
 8002a20:	d107      	bne.n	8002a32 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a22:	4b47      	ldr	r3, [pc, #284]	@ (8002b40 <HAL_RCC_ClockConfig+0x1c4>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d115      	bne.n	8002a5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	e07f      	b.n	8002b32 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	2b02      	cmp	r3, #2
 8002a38:	d107      	bne.n	8002a4a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a3a:	4b41      	ldr	r3, [pc, #260]	@ (8002b40 <HAL_RCC_ClockConfig+0x1c4>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d109      	bne.n	8002a5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a46:	2301      	movs	r3, #1
 8002a48:	e073      	b.n	8002b32 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a4a:	4b3d      	ldr	r3, [pc, #244]	@ (8002b40 <HAL_RCC_ClockConfig+0x1c4>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f003 0302 	and.w	r3, r3, #2
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d101      	bne.n	8002a5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	e06b      	b.n	8002b32 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a5a:	4b39      	ldr	r3, [pc, #228]	@ (8002b40 <HAL_RCC_ClockConfig+0x1c4>)
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	f023 0203 	bic.w	r2, r3, #3
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	4936      	ldr	r1, [pc, #216]	@ (8002b40 <HAL_RCC_ClockConfig+0x1c4>)
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a6c:	f7fe faba 	bl	8000fe4 <HAL_GetTick>
 8002a70:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a72:	e00a      	b.n	8002a8a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a74:	f7fe fab6 	bl	8000fe4 <HAL_GetTick>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	1ad3      	subs	r3, r2, r3
 8002a7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d901      	bls.n	8002a8a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a86:	2303      	movs	r3, #3
 8002a88:	e053      	b.n	8002b32 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a8a:	4b2d      	ldr	r3, [pc, #180]	@ (8002b40 <HAL_RCC_ClockConfig+0x1c4>)
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	f003 020c 	and.w	r2, r3, #12
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	009b      	lsls	r3, r3, #2
 8002a98:	429a      	cmp	r2, r3
 8002a9a:	d1eb      	bne.n	8002a74 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a9c:	4b27      	ldr	r3, [pc, #156]	@ (8002b3c <HAL_RCC_ClockConfig+0x1c0>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f003 0307 	and.w	r3, r3, #7
 8002aa4:	683a      	ldr	r2, [r7, #0]
 8002aa6:	429a      	cmp	r2, r3
 8002aa8:	d210      	bcs.n	8002acc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002aaa:	4b24      	ldr	r3, [pc, #144]	@ (8002b3c <HAL_RCC_ClockConfig+0x1c0>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f023 0207 	bic.w	r2, r3, #7
 8002ab2:	4922      	ldr	r1, [pc, #136]	@ (8002b3c <HAL_RCC_ClockConfig+0x1c0>)
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002aba:	4b20      	ldr	r3, [pc, #128]	@ (8002b3c <HAL_RCC_ClockConfig+0x1c0>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f003 0307 	and.w	r3, r3, #7
 8002ac2:	683a      	ldr	r2, [r7, #0]
 8002ac4:	429a      	cmp	r2, r3
 8002ac6:	d001      	beq.n	8002acc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	e032      	b.n	8002b32 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f003 0304 	and.w	r3, r3, #4
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d008      	beq.n	8002aea <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ad8:	4b19      	ldr	r3, [pc, #100]	@ (8002b40 <HAL_RCC_ClockConfig+0x1c4>)
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	68db      	ldr	r3, [r3, #12]
 8002ae4:	4916      	ldr	r1, [pc, #88]	@ (8002b40 <HAL_RCC_ClockConfig+0x1c4>)
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f003 0308 	and.w	r3, r3, #8
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d009      	beq.n	8002b0a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002af6:	4b12      	ldr	r3, [pc, #72]	@ (8002b40 <HAL_RCC_ClockConfig+0x1c4>)
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	691b      	ldr	r3, [r3, #16]
 8002b02:	00db      	lsls	r3, r3, #3
 8002b04:	490e      	ldr	r1, [pc, #56]	@ (8002b40 <HAL_RCC_ClockConfig+0x1c4>)
 8002b06:	4313      	orrs	r3, r2
 8002b08:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002b0a:	f000 f821 	bl	8002b50 <HAL_RCC_GetSysClockFreq>
 8002b0e:	4602      	mov	r2, r0
 8002b10:	4b0b      	ldr	r3, [pc, #44]	@ (8002b40 <HAL_RCC_ClockConfig+0x1c4>)
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	091b      	lsrs	r3, r3, #4
 8002b16:	f003 030f 	and.w	r3, r3, #15
 8002b1a:	490a      	ldr	r1, [pc, #40]	@ (8002b44 <HAL_RCC_ClockConfig+0x1c8>)
 8002b1c:	5ccb      	ldrb	r3, [r1, r3]
 8002b1e:	fa22 f303 	lsr.w	r3, r2, r3
 8002b22:	4a09      	ldr	r2, [pc, #36]	@ (8002b48 <HAL_RCC_ClockConfig+0x1cc>)
 8002b24:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002b26:	4b09      	ldr	r3, [pc, #36]	@ (8002b4c <HAL_RCC_ClockConfig+0x1d0>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f7fe fa18 	bl	8000f60 <HAL_InitTick>

  return HAL_OK;
 8002b30:	2300      	movs	r3, #0
}
 8002b32:	4618      	mov	r0, r3
 8002b34:	3710      	adds	r7, #16
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}
 8002b3a:	bf00      	nop
 8002b3c:	40022000 	.word	0x40022000
 8002b40:	40021000 	.word	0x40021000
 8002b44:	08005b34 	.word	0x08005b34
 8002b48:	20000040 	.word	0x20000040
 8002b4c:	20000044 	.word	0x20000044

08002b50 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b50:	b480      	push	{r7}
 8002b52:	b087      	sub	sp, #28
 8002b54:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002b56:	2300      	movs	r3, #0
 8002b58:	60fb      	str	r3, [r7, #12]
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	60bb      	str	r3, [r7, #8]
 8002b5e:	2300      	movs	r3, #0
 8002b60:	617b      	str	r3, [r7, #20]
 8002b62:	2300      	movs	r3, #0
 8002b64:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002b66:	2300      	movs	r3, #0
 8002b68:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002b6a:	4b1e      	ldr	r3, [pc, #120]	@ (8002be4 <HAL_RCC_GetSysClockFreq+0x94>)
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	f003 030c 	and.w	r3, r3, #12
 8002b76:	2b04      	cmp	r3, #4
 8002b78:	d002      	beq.n	8002b80 <HAL_RCC_GetSysClockFreq+0x30>
 8002b7a:	2b08      	cmp	r3, #8
 8002b7c:	d003      	beq.n	8002b86 <HAL_RCC_GetSysClockFreq+0x36>
 8002b7e:	e027      	b.n	8002bd0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002b80:	4b19      	ldr	r3, [pc, #100]	@ (8002be8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002b82:	613b      	str	r3, [r7, #16]
      break;
 8002b84:	e027      	b.n	8002bd6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	0c9b      	lsrs	r3, r3, #18
 8002b8a:	f003 030f 	and.w	r3, r3, #15
 8002b8e:	4a17      	ldr	r2, [pc, #92]	@ (8002bec <HAL_RCC_GetSysClockFreq+0x9c>)
 8002b90:	5cd3      	ldrb	r3, [r2, r3]
 8002b92:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d010      	beq.n	8002bc0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002b9e:	4b11      	ldr	r3, [pc, #68]	@ (8002be4 <HAL_RCC_GetSysClockFreq+0x94>)
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	0c5b      	lsrs	r3, r3, #17
 8002ba4:	f003 0301 	and.w	r3, r3, #1
 8002ba8:	4a11      	ldr	r2, [pc, #68]	@ (8002bf0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002baa:	5cd3      	ldrb	r3, [r2, r3]
 8002bac:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	4a0d      	ldr	r2, [pc, #52]	@ (8002be8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002bb2:	fb03 f202 	mul.w	r2, r3, r2
 8002bb6:	68bb      	ldr	r3, [r7, #8]
 8002bb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bbc:	617b      	str	r3, [r7, #20]
 8002bbe:	e004      	b.n	8002bca <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	4a0c      	ldr	r2, [pc, #48]	@ (8002bf4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002bc4:	fb02 f303 	mul.w	r3, r2, r3
 8002bc8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	613b      	str	r3, [r7, #16]
      break;
 8002bce:	e002      	b.n	8002bd6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002bd0:	4b05      	ldr	r3, [pc, #20]	@ (8002be8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002bd2:	613b      	str	r3, [r7, #16]
      break;
 8002bd4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002bd6:	693b      	ldr	r3, [r7, #16]
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	371c      	adds	r7, #28
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bc80      	pop	{r7}
 8002be0:	4770      	bx	lr
 8002be2:	bf00      	nop
 8002be4:	40021000 	.word	0x40021000
 8002be8:	007a1200 	.word	0x007a1200
 8002bec:	08005b4c 	.word	0x08005b4c
 8002bf0:	08005b5c 	.word	0x08005b5c
 8002bf4:	003d0900 	.word	0x003d0900

08002bf8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002bfc:	4b02      	ldr	r3, [pc, #8]	@ (8002c08 <HAL_RCC_GetHCLKFreq+0x10>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
}
 8002c00:	4618      	mov	r0, r3
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bc80      	pop	{r7}
 8002c06:	4770      	bx	lr
 8002c08:	20000040 	.word	0x20000040

08002c0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002c10:	f7ff fff2 	bl	8002bf8 <HAL_RCC_GetHCLKFreq>
 8002c14:	4602      	mov	r2, r0
 8002c16:	4b05      	ldr	r3, [pc, #20]	@ (8002c2c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	0a1b      	lsrs	r3, r3, #8
 8002c1c:	f003 0307 	and.w	r3, r3, #7
 8002c20:	4903      	ldr	r1, [pc, #12]	@ (8002c30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c22:	5ccb      	ldrb	r3, [r1, r3]
 8002c24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	bd80      	pop	{r7, pc}
 8002c2c:	40021000 	.word	0x40021000
 8002c30:	08005b44 	.word	0x08005b44

08002c34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002c38:	f7ff ffde 	bl	8002bf8 <HAL_RCC_GetHCLKFreq>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	4b05      	ldr	r3, [pc, #20]	@ (8002c54 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	0adb      	lsrs	r3, r3, #11
 8002c44:	f003 0307 	and.w	r3, r3, #7
 8002c48:	4903      	ldr	r1, [pc, #12]	@ (8002c58 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c4a:	5ccb      	ldrb	r3, [r1, r3]
 8002c4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c50:	4618      	mov	r0, r3
 8002c52:	bd80      	pop	{r7, pc}
 8002c54:	40021000 	.word	0x40021000
 8002c58:	08005b44 	.word	0x08005b44

08002c5c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	b085      	sub	sp, #20
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002c64:	4b0a      	ldr	r3, [pc, #40]	@ (8002c90 <RCC_Delay+0x34>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a0a      	ldr	r2, [pc, #40]	@ (8002c94 <RCC_Delay+0x38>)
 8002c6a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c6e:	0a5b      	lsrs	r3, r3, #9
 8002c70:	687a      	ldr	r2, [r7, #4]
 8002c72:	fb02 f303 	mul.w	r3, r2, r3
 8002c76:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002c78:	bf00      	nop
  }
  while (Delay --);
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	1e5a      	subs	r2, r3, #1
 8002c7e:	60fa      	str	r2, [r7, #12]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d1f9      	bne.n	8002c78 <RCC_Delay+0x1c>
}
 8002c84:	bf00      	nop
 8002c86:	bf00      	nop
 8002c88:	3714      	adds	r7, #20
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bc80      	pop	{r7}
 8002c8e:	4770      	bx	lr
 8002c90:	20000040 	.word	0x20000040
 8002c94:	10624dd3 	.word	0x10624dd3

08002c98 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b086      	sub	sp, #24
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	613b      	str	r3, [r7, #16]
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f003 0301 	and.w	r3, r3, #1
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d07d      	beq.n	8002db0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002cb8:	4b4f      	ldr	r3, [pc, #316]	@ (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cba:	69db      	ldr	r3, [r3, #28]
 8002cbc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d10d      	bne.n	8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cc4:	4b4c      	ldr	r3, [pc, #304]	@ (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cc6:	69db      	ldr	r3, [r3, #28]
 8002cc8:	4a4b      	ldr	r2, [pc, #300]	@ (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002cce:	61d3      	str	r3, [r2, #28]
 8002cd0:	4b49      	ldr	r3, [pc, #292]	@ (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cd2:	69db      	ldr	r3, [r3, #28]
 8002cd4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cd8:	60bb      	str	r3, [r7, #8]
 8002cda:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ce0:	4b46      	ldr	r3, [pc, #280]	@ (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d118      	bne.n	8002d1e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002cec:	4b43      	ldr	r3, [pc, #268]	@ (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a42      	ldr	r2, [pc, #264]	@ (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002cf2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002cf6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002cf8:	f7fe f974 	bl	8000fe4 <HAL_GetTick>
 8002cfc:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cfe:	e008      	b.n	8002d12 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d00:	f7fe f970 	bl	8000fe4 <HAL_GetTick>
 8002d04:	4602      	mov	r2, r0
 8002d06:	693b      	ldr	r3, [r7, #16]
 8002d08:	1ad3      	subs	r3, r2, r3
 8002d0a:	2b64      	cmp	r3, #100	@ 0x64
 8002d0c:	d901      	bls.n	8002d12 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002d0e:	2303      	movs	r3, #3
 8002d10:	e06d      	b.n	8002dee <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d12:	4b3a      	ldr	r3, [pc, #232]	@ (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d0f0      	beq.n	8002d00 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002d1e:	4b36      	ldr	r3, [pc, #216]	@ (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d20:	6a1b      	ldr	r3, [r3, #32]
 8002d22:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002d26:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d02e      	beq.n	8002d8c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002d36:	68fa      	ldr	r2, [r7, #12]
 8002d38:	429a      	cmp	r2, r3
 8002d3a:	d027      	beq.n	8002d8c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002d3c:	4b2e      	ldr	r3, [pc, #184]	@ (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d3e:	6a1b      	ldr	r3, [r3, #32]
 8002d40:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002d44:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002d46:	4b2e      	ldr	r3, [pc, #184]	@ (8002e00 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002d48:	2201      	movs	r2, #1
 8002d4a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002d4c:	4b2c      	ldr	r3, [pc, #176]	@ (8002e00 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002d4e:	2200      	movs	r2, #0
 8002d50:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002d52:	4a29      	ldr	r2, [pc, #164]	@ (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	f003 0301 	and.w	r3, r3, #1
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d014      	beq.n	8002d8c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d62:	f7fe f93f 	bl	8000fe4 <HAL_GetTick>
 8002d66:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d68:	e00a      	b.n	8002d80 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d6a:	f7fe f93b 	bl	8000fe4 <HAL_GetTick>
 8002d6e:	4602      	mov	r2, r0
 8002d70:	693b      	ldr	r3, [r7, #16]
 8002d72:	1ad3      	subs	r3, r2, r3
 8002d74:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d901      	bls.n	8002d80 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002d7c:	2303      	movs	r3, #3
 8002d7e:	e036      	b.n	8002dee <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d80:	4b1d      	ldr	r3, [pc, #116]	@ (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d82:	6a1b      	ldr	r3, [r3, #32]
 8002d84:	f003 0302 	and.w	r3, r3, #2
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d0ee      	beq.n	8002d6a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d8c:	4b1a      	ldr	r3, [pc, #104]	@ (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d8e:	6a1b      	ldr	r3, [r3, #32]
 8002d90:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	4917      	ldr	r1, [pc, #92]	@ (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002d9e:	7dfb      	ldrb	r3, [r7, #23]
 8002da0:	2b01      	cmp	r3, #1
 8002da2:	d105      	bne.n	8002db0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002da4:	4b14      	ldr	r3, [pc, #80]	@ (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002da6:	69db      	ldr	r3, [r3, #28]
 8002da8:	4a13      	ldr	r2, [pc, #76]	@ (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002daa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002dae:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f003 0302 	and.w	r3, r3, #2
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d008      	beq.n	8002dce <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002dbc:	4b0e      	ldr	r3, [pc, #56]	@ (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	689b      	ldr	r3, [r3, #8]
 8002dc8:	490b      	ldr	r1, [pc, #44]	@ (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f003 0310 	and.w	r3, r3, #16
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d008      	beq.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002dda:	4b07      	ldr	r3, [pc, #28]	@ (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	68db      	ldr	r3, [r3, #12]
 8002de6:	4904      	ldr	r1, [pc, #16]	@ (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002de8:	4313      	orrs	r3, r2
 8002dea:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002dec:	2300      	movs	r3, #0
}
 8002dee:	4618      	mov	r0, r3
 8002df0:	3718      	adds	r7, #24
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}
 8002df6:	bf00      	nop
 8002df8:	40021000 	.word	0x40021000
 8002dfc:	40007000 	.word	0x40007000
 8002e00:	42420440 	.word	0x42420440

08002e04 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b088      	sub	sp, #32
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	617b      	str	r3, [r7, #20]
 8002e10:	2300      	movs	r3, #0
 8002e12:	61fb      	str	r3, [r7, #28]
 8002e14:	2300      	movs	r3, #0
 8002e16:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	60fb      	str	r3, [r7, #12]
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2b10      	cmp	r3, #16
 8002e24:	d00a      	beq.n	8002e3c <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2b10      	cmp	r3, #16
 8002e2a:	f200 808a 	bhi.w	8002f42 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2b01      	cmp	r3, #1
 8002e32:	d045      	beq.n	8002ec0 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2b02      	cmp	r3, #2
 8002e38:	d075      	beq.n	8002f26 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8002e3a:	e082      	b.n	8002f42 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8002e3c:	4b46      	ldr	r3, [pc, #280]	@ (8002f58 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8002e42:	4b45      	ldr	r3, [pc, #276]	@ (8002f58 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d07b      	beq.n	8002f46 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	0c9b      	lsrs	r3, r3, #18
 8002e52:	f003 030f 	and.w	r3, r3, #15
 8002e56:	4a41      	ldr	r2, [pc, #260]	@ (8002f5c <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8002e58:	5cd3      	ldrb	r3, [r2, r3]
 8002e5a:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d015      	beq.n	8002e92 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002e66:	4b3c      	ldr	r3, [pc, #240]	@ (8002f58 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	0c5b      	lsrs	r3, r3, #17
 8002e6c:	f003 0301 	and.w	r3, r3, #1
 8002e70:	4a3b      	ldr	r2, [pc, #236]	@ (8002f60 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8002e72:	5cd3      	ldrb	r3, [r2, r3]
 8002e74:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d00d      	beq.n	8002e9c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002e80:	4a38      	ldr	r2, [pc, #224]	@ (8002f64 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	fbb2 f2f3 	udiv	r2, r2, r3
 8002e88:	693b      	ldr	r3, [r7, #16]
 8002e8a:	fb02 f303 	mul.w	r3, r2, r3
 8002e8e:	61fb      	str	r3, [r7, #28]
 8002e90:	e004      	b.n	8002e9c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002e92:	693b      	ldr	r3, [r7, #16]
 8002e94:	4a34      	ldr	r2, [pc, #208]	@ (8002f68 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8002e96:	fb02 f303 	mul.w	r3, r2, r3
 8002e9a:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002e9c:	4b2e      	ldr	r3, [pc, #184]	@ (8002f58 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ea4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002ea8:	d102      	bne.n	8002eb0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8002eaa:	69fb      	ldr	r3, [r7, #28]
 8002eac:	61bb      	str	r3, [r7, #24]
      break;
 8002eae:	e04a      	b.n	8002f46 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8002eb0:	69fb      	ldr	r3, [r7, #28]
 8002eb2:	005b      	lsls	r3, r3, #1
 8002eb4:	4a2d      	ldr	r2, [pc, #180]	@ (8002f6c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002eb6:	fba2 2303 	umull	r2, r3, r2, r3
 8002eba:	085b      	lsrs	r3, r3, #1
 8002ebc:	61bb      	str	r3, [r7, #24]
      break;
 8002ebe:	e042      	b.n	8002f46 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8002ec0:	4b25      	ldr	r3, [pc, #148]	@ (8002f58 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002ec2:	6a1b      	ldr	r3, [r3, #32]
 8002ec4:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002ecc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002ed0:	d108      	bne.n	8002ee4 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	f003 0302 	and.w	r3, r3, #2
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d003      	beq.n	8002ee4 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8002edc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002ee0:	61bb      	str	r3, [r7, #24]
 8002ee2:	e01f      	b.n	8002f24 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002eea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002eee:	d109      	bne.n	8002f04 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8002ef0:	4b19      	ldr	r3, [pc, #100]	@ (8002f58 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002ef2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ef4:	f003 0302 	and.w	r3, r3, #2
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d003      	beq.n	8002f04 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8002efc:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8002f00:	61bb      	str	r3, [r7, #24]
 8002f02:	e00f      	b.n	8002f24 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002f0a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002f0e:	d11c      	bne.n	8002f4a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8002f10:	4b11      	ldr	r3, [pc, #68]	@ (8002f58 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d016      	beq.n	8002f4a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8002f1c:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8002f20:	61bb      	str	r3, [r7, #24]
      break;
 8002f22:	e012      	b.n	8002f4a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8002f24:	e011      	b.n	8002f4a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8002f26:	f7ff fe85 	bl	8002c34 <HAL_RCC_GetPCLK2Freq>
 8002f2a:	4602      	mov	r2, r0
 8002f2c:	4b0a      	ldr	r3, [pc, #40]	@ (8002f58 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	0b9b      	lsrs	r3, r3, #14
 8002f32:	f003 0303 	and.w	r3, r3, #3
 8002f36:	3301      	adds	r3, #1
 8002f38:	005b      	lsls	r3, r3, #1
 8002f3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f3e:	61bb      	str	r3, [r7, #24]
      break;
 8002f40:	e004      	b.n	8002f4c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002f42:	bf00      	nop
 8002f44:	e002      	b.n	8002f4c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002f46:	bf00      	nop
 8002f48:	e000      	b.n	8002f4c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002f4a:	bf00      	nop
    }
  }
  return (frequency);
 8002f4c:	69bb      	ldr	r3, [r7, #24]
}
 8002f4e:	4618      	mov	r0, r3
 8002f50:	3720      	adds	r7, #32
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}
 8002f56:	bf00      	nop
 8002f58:	40021000 	.word	0x40021000
 8002f5c:	08005b60 	.word	0x08005b60
 8002f60:	08005b70 	.word	0x08005b70
 8002f64:	007a1200 	.word	0x007a1200
 8002f68:	003d0900 	.word	0x003d0900
 8002f6c:	aaaaaaab 	.word	0xaaaaaaab

08002f70 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b084      	sub	sp, #16
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8002f78:	2300      	movs	r3, #0
 8002f7a:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d101      	bne.n	8002f86 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8002f82:	2301      	movs	r3, #1
 8002f84:	e07a      	b.n	800307c <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	7c5b      	ldrb	r3, [r3, #17]
 8002f8a:	b2db      	uxtb	r3, r3
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d105      	bne.n	8002f9c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2200      	movs	r2, #0
 8002f94:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002f96:	6878      	ldr	r0, [r7, #4]
 8002f98:	f7fd fc6a 	bl	8000870 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2202      	movs	r2, #2
 8002fa0:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002fa2:	6878      	ldr	r0, [r7, #4]
 8002fa4:	f000 faea 	bl	800357c <HAL_RTC_WaitForSynchro>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d004      	beq.n	8002fb8 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2204      	movs	r2, #4
 8002fb2:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	e061      	b.n	800307c <HAL_RTC_Init+0x10c>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002fb8:	6878      	ldr	r0, [r7, #4]
 8002fba:	f000 fba3 	bl	8003704 <RTC_EnterInitMode>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d004      	beq.n	8002fce <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2204      	movs	r2, #4
 8002fc8:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e056      	b.n	800307c <HAL_RTC_Init+0x10c>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	685a      	ldr	r2, [r3, #4]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f022 0207 	bic.w	r2, r2, #7
 8002fdc:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	689b      	ldr	r3, [r3, #8]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d005      	beq.n	8002ff2 <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8002fe6:	4b27      	ldr	r3, [pc, #156]	@ (8003084 <HAL_RTC_Init+0x114>)
 8002fe8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fea:	4a26      	ldr	r2, [pc, #152]	@ (8003084 <HAL_RTC_Init+0x114>)
 8002fec:	f023 0301 	bic.w	r3, r3, #1
 8002ff0:	6313      	str	r3, [r2, #48]	@ 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8002ff2:	4b24      	ldr	r3, [pc, #144]	@ (8003084 <HAL_RTC_Init+0x114>)
 8002ff4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ff6:	f423 7260 	bic.w	r2, r3, #896	@ 0x380
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	689b      	ldr	r3, [r3, #8]
 8002ffe:	4921      	ldr	r1, [pc, #132]	@ (8003084 <HAL_RTC_Init+0x114>)
 8003000:	4313      	orrs	r3, r2
 8003002:	62cb      	str	r3, [r1, #44]	@ 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	f1b3 3fff 	cmp.w	r3, #4294967295
 800300c:	d003      	beq.n	8003016 <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	60fb      	str	r3, [r7, #12]
 8003014:	e00e      	b.n	8003034 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8003016:	2001      	movs	r0, #1
 8003018:	f7ff fef4 	bl	8002e04 <HAL_RCCEx_GetPeriphCLKFreq>
 800301c:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d104      	bne.n	800302e <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2204      	movs	r2, #4
 8003028:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 800302a:	2301      	movs	r3, #1
 800302c:	e026      	b.n	800307c <HAL_RTC_Init+0x10c>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	3b01      	subs	r3, #1
 8003032:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	0c1a      	lsrs	r2, r3, #16
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f002 020f 	and.w	r2, r2, #15
 8003040:	609a      	str	r2, [r3, #8]
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	68fa      	ldr	r2, [r7, #12]
 8003048:	b292      	uxth	r2, r2
 800304a:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 800304c:	6878      	ldr	r0, [r7, #4]
 800304e:	f000 fb81 	bl	8003754 <RTC_ExitInitMode>
 8003052:	4603      	mov	r3, r0
 8003054:	2b00      	cmp	r3, #0
 8003056:	d004      	beq.n	8003062 <HAL_RTC_Init+0xf2>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2204      	movs	r2, #4
 800305c:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 800305e:	2301      	movs	r3, #1
 8003060:	e00c      	b.n	800307c <HAL_RTC_Init+0x10c>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2200      	movs	r2, #0
 8003066:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2201      	movs	r2, #1
 800306c:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2201      	movs	r2, #1
 8003072:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2201      	movs	r2, #1
 8003078:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 800307a:	2300      	movs	r3, #0
  }
}
 800307c:	4618      	mov	r0, r3
 800307e:	3710      	adds	r7, #16
 8003080:	46bd      	mov	sp, r7
 8003082:	bd80      	pop	{r7, pc}
 8003084:	40006c00 	.word	0x40006c00

08003088 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003088:	b590      	push	{r4, r7, lr}
 800308a:	b087      	sub	sp, #28
 800308c:	af00      	add	r7, sp, #0
 800308e:	60f8      	str	r0, [r7, #12]
 8003090:	60b9      	str	r1, [r7, #8]
 8003092:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 8003094:	2300      	movs	r3, #0
 8003096:	617b      	str	r3, [r7, #20]
 8003098:	2300      	movs	r3, #0
 800309a:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d002      	beq.n	80030a8 <HAL_RTC_SetTime+0x20>
 80030a2:	68bb      	ldr	r3, [r7, #8]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d101      	bne.n	80030ac <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 80030a8:	2301      	movs	r3, #1
 80030aa:	e080      	b.n	80031ae <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	7c1b      	ldrb	r3, [r3, #16]
 80030b0:	2b01      	cmp	r3, #1
 80030b2:	d101      	bne.n	80030b8 <HAL_RTC_SetTime+0x30>
 80030b4:	2302      	movs	r3, #2
 80030b6:	e07a      	b.n	80031ae <HAL_RTC_SetTime+0x126>
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	2201      	movs	r2, #1
 80030bc:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	2202      	movs	r2, #2
 80030c2:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d113      	bne.n	80030f2 <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80030ca:	68bb      	ldr	r3, [r7, #8]
 80030cc:	781b      	ldrb	r3, [r3, #0]
 80030ce:	461a      	mov	r2, r3
 80030d0:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 80030d4:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 80030d8:	68bb      	ldr	r3, [r7, #8]
 80030da:	785b      	ldrb	r3, [r3, #1]
 80030dc:	4619      	mov	r1, r3
 80030de:	460b      	mov	r3, r1
 80030e0:	011b      	lsls	r3, r3, #4
 80030e2:	1a5b      	subs	r3, r3, r1
 80030e4:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80030e6:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 80030e8:	68ba      	ldr	r2, [r7, #8]
 80030ea:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80030ec:	4413      	add	r3, r2
 80030ee:	617b      	str	r3, [r7, #20]
 80030f0:	e01e      	b.n	8003130 <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80030f2:	68bb      	ldr	r3, [r7, #8]
 80030f4:	781b      	ldrb	r3, [r3, #0]
 80030f6:	4618      	mov	r0, r3
 80030f8:	f000 fb71 	bl	80037de <RTC_Bcd2ToByte>
 80030fc:	4603      	mov	r3, r0
 80030fe:	461a      	mov	r2, r3
 8003100:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 8003104:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	785b      	ldrb	r3, [r3, #1]
 800310c:	4618      	mov	r0, r3
 800310e:	f000 fb66 	bl	80037de <RTC_Bcd2ToByte>
 8003112:	4603      	mov	r3, r0
 8003114:	461a      	mov	r2, r3
 8003116:	4613      	mov	r3, r2
 8003118:	011b      	lsls	r3, r3, #4
 800311a:	1a9b      	subs	r3, r3, r2
 800311c:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 800311e:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	789b      	ldrb	r3, [r3, #2]
 8003124:	4618      	mov	r0, r3
 8003126:	f000 fb5a 	bl	80037de <RTC_Bcd2ToByte>
 800312a:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 800312c:	4423      	add	r3, r4
 800312e:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8003130:	6979      	ldr	r1, [r7, #20]
 8003132:	68f8      	ldr	r0, [r7, #12]
 8003134:	f000 fa7f 	bl	8003636 <RTC_WriteTimeCounter>
 8003138:	4603      	mov	r3, r0
 800313a:	2b00      	cmp	r3, #0
 800313c:	d007      	beq.n	800314e <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	2204      	movs	r2, #4
 8003142:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	2200      	movs	r2, #0
 8003148:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	e02f      	b.n	80031ae <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	685a      	ldr	r2, [r3, #4]
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f022 0205 	bic.w	r2, r2, #5
 800315c:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 800315e:	68f8      	ldr	r0, [r7, #12]
 8003160:	f000 fa90 	bl	8003684 <RTC_ReadAlarmCounter>
 8003164:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8003166:	693b      	ldr	r3, [r7, #16]
 8003168:	f1b3 3fff 	cmp.w	r3, #4294967295
 800316c:	d018      	beq.n	80031a0 <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 800316e:	693a      	ldr	r2, [r7, #16]
 8003170:	697b      	ldr	r3, [r7, #20]
 8003172:	429a      	cmp	r2, r3
 8003174:	d214      	bcs.n	80031a0 <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8003176:	693b      	ldr	r3, [r7, #16]
 8003178:	f503 33a8 	add.w	r3, r3, #86016	@ 0x15000
 800317c:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 8003180:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8003182:	6939      	ldr	r1, [r7, #16]
 8003184:	68f8      	ldr	r0, [r7, #12]
 8003186:	f000 fa96 	bl	80036b6 <RTC_WriteAlarmCounter>
 800318a:	4603      	mov	r3, r0
 800318c:	2b00      	cmp	r3, #0
 800318e:	d007      	beq.n	80031a0 <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	2204      	movs	r2, #4
 8003194:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	2200      	movs	r2, #0
 800319a:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 800319c:	2301      	movs	r3, #1
 800319e:	e006      	b.n	80031ae <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	2201      	movs	r2, #1
 80031a4:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	2200      	movs	r2, #0
 80031aa:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 80031ac:	2300      	movs	r3, #0
  }
}
 80031ae:	4618      	mov	r0, r3
 80031b0:	371c      	adds	r7, #28
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd90      	pop	{r4, r7, pc}
	...

080031b8 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b088      	sub	sp, #32
 80031bc:	af00      	add	r7, sp, #0
 80031be:	60f8      	str	r0, [r7, #12]
 80031c0:	60b9      	str	r1, [r7, #8]
 80031c2:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 80031c4:	2300      	movs	r3, #0
 80031c6:	61bb      	str	r3, [r7, #24]
 80031c8:	2300      	movs	r3, #0
 80031ca:	61fb      	str	r3, [r7, #28]
 80031cc:	2300      	movs	r3, #0
 80031ce:	617b      	str	r3, [r7, #20]
 80031d0:	2300      	movs	r3, #0
 80031d2:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d002      	beq.n	80031e0 <HAL_RTC_GetTime+0x28>
 80031da:	68bb      	ldr	r3, [r7, #8]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d101      	bne.n	80031e4 <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 80031e0:	2301      	movs	r3, #1
 80031e2:	e0b5      	b.n	8003350 <HAL_RTC_GetTime+0x198>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	f003 0304 	and.w	r3, r3, #4
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d001      	beq.n	80031f6 <HAL_RTC_GetTime+0x3e>
  {
    return HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
 80031f4:	e0ac      	b.n	8003350 <HAL_RTC_GetTime+0x198>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 80031f6:	68f8      	ldr	r0, [r7, #12]
 80031f8:	f000 f9ed 	bl	80035d6 <RTC_ReadTimeCounter>
 80031fc:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 80031fe:	69bb      	ldr	r3, [r7, #24]
 8003200:	4a55      	ldr	r2, [pc, #340]	@ (8003358 <HAL_RTC_GetTime+0x1a0>)
 8003202:	fba2 2303 	umull	r2, r3, r2, r3
 8003206:	0adb      	lsrs	r3, r3, #11
 8003208:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 800320a:	69ba      	ldr	r2, [r7, #24]
 800320c:	4b52      	ldr	r3, [pc, #328]	@ (8003358 <HAL_RTC_GetTime+0x1a0>)
 800320e:	fba3 1302 	umull	r1, r3, r3, r2
 8003212:	0adb      	lsrs	r3, r3, #11
 8003214:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 8003218:	fb01 f303 	mul.w	r3, r1, r3
 800321c:	1ad3      	subs	r3, r2, r3
 800321e:	4a4f      	ldr	r2, [pc, #316]	@ (800335c <HAL_RTC_GetTime+0x1a4>)
 8003220:	fba2 2303 	umull	r2, r3, r2, r3
 8003224:	095b      	lsrs	r3, r3, #5
 8003226:	b2da      	uxtb	r2, r3
 8003228:	68bb      	ldr	r3, [r7, #8]
 800322a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 800322c:	69bb      	ldr	r3, [r7, #24]
 800322e:	4a4a      	ldr	r2, [pc, #296]	@ (8003358 <HAL_RTC_GetTime+0x1a0>)
 8003230:	fba2 1203 	umull	r1, r2, r2, r3
 8003234:	0ad2      	lsrs	r2, r2, #11
 8003236:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 800323a:	fb01 f202 	mul.w	r2, r1, r2
 800323e:	1a9a      	subs	r2, r3, r2
 8003240:	4b46      	ldr	r3, [pc, #280]	@ (800335c <HAL_RTC_GetTime+0x1a4>)
 8003242:	fba3 1302 	umull	r1, r3, r3, r2
 8003246:	0959      	lsrs	r1, r3, #5
 8003248:	460b      	mov	r3, r1
 800324a:	011b      	lsls	r3, r3, #4
 800324c:	1a5b      	subs	r3, r3, r1
 800324e:	009b      	lsls	r3, r3, #2
 8003250:	1ad1      	subs	r1, r2, r3
 8003252:	b2ca      	uxtb	r2, r1
 8003254:	68bb      	ldr	r3, [r7, #8]
 8003256:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 8003258:	693b      	ldr	r3, [r7, #16]
 800325a:	2b17      	cmp	r3, #23
 800325c:	d955      	bls.n	800330a <HAL_RTC_GetTime+0x152>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 800325e:	693b      	ldr	r3, [r7, #16]
 8003260:	4a3f      	ldr	r2, [pc, #252]	@ (8003360 <HAL_RTC_GetTime+0x1a8>)
 8003262:	fba2 2303 	umull	r2, r3, r2, r3
 8003266:	091b      	lsrs	r3, r3, #4
 8003268:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 800326a:	6939      	ldr	r1, [r7, #16]
 800326c:	4b3c      	ldr	r3, [pc, #240]	@ (8003360 <HAL_RTC_GetTime+0x1a8>)
 800326e:	fba3 2301 	umull	r2, r3, r3, r1
 8003272:	091a      	lsrs	r2, r3, #4
 8003274:	4613      	mov	r3, r2
 8003276:	005b      	lsls	r3, r3, #1
 8003278:	4413      	add	r3, r2
 800327a:	00db      	lsls	r3, r3, #3
 800327c:	1aca      	subs	r2, r1, r3
 800327e:	b2d2      	uxtb	r2, r2
 8003280:	68bb      	ldr	r3, [r7, #8]
 8003282:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8003284:	68f8      	ldr	r0, [r7, #12]
 8003286:	f000 f9fd 	bl	8003684 <RTC_ReadAlarmCounter>
 800328a:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 800328c:	69fb      	ldr	r3, [r7, #28]
 800328e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003292:	d008      	beq.n	80032a6 <HAL_RTC_GetTime+0xee>
 8003294:	69fa      	ldr	r2, [r7, #28]
 8003296:	69bb      	ldr	r3, [r7, #24]
 8003298:	429a      	cmp	r2, r3
 800329a:	d904      	bls.n	80032a6 <HAL_RTC_GetTime+0xee>
    {
      counter_alarm -= counter_time;
 800329c:	69fa      	ldr	r2, [r7, #28]
 800329e:	69bb      	ldr	r3, [r7, #24]
 80032a0:	1ad3      	subs	r3, r2, r3
 80032a2:	61fb      	str	r3, [r7, #28]
 80032a4:	e002      	b.n	80032ac <HAL_RTC_GetTime+0xf4>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 80032a6:	f04f 33ff 	mov.w	r3, #4294967295
 80032aa:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 80032ac:	697b      	ldr	r3, [r7, #20]
 80032ae:	4a2d      	ldr	r2, [pc, #180]	@ (8003364 <HAL_RTC_GetTime+0x1ac>)
 80032b0:	fb02 f303 	mul.w	r3, r2, r3
 80032b4:	69ba      	ldr	r2, [r7, #24]
 80032b6:	1ad3      	subs	r3, r2, r3
 80032b8:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 80032ba:	69b9      	ldr	r1, [r7, #24]
 80032bc:	68f8      	ldr	r0, [r7, #12]
 80032be:	f000 f9ba 	bl	8003636 <RTC_WriteTimeCounter>
 80032c2:	4603      	mov	r3, r0
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d001      	beq.n	80032cc <HAL_RTC_GetTime+0x114>
    {
      return HAL_ERROR;
 80032c8:	2301      	movs	r3, #1
 80032ca:	e041      	b.n	8003350 <HAL_RTC_GetTime+0x198>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 80032cc:	69fb      	ldr	r3, [r7, #28]
 80032ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032d2:	d00c      	beq.n	80032ee <HAL_RTC_GetTime+0x136>
    {
      counter_alarm += counter_time;
 80032d4:	69fa      	ldr	r2, [r7, #28]
 80032d6:	69bb      	ldr	r3, [r7, #24]
 80032d8:	4413      	add	r3, r2
 80032da:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80032dc:	69f9      	ldr	r1, [r7, #28]
 80032de:	68f8      	ldr	r0, [r7, #12]
 80032e0:	f000 f9e9 	bl	80036b6 <RTC_WriteAlarmCounter>
 80032e4:	4603      	mov	r3, r0
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d00a      	beq.n	8003300 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 80032ea:	2301      	movs	r3, #1
 80032ec:	e030      	b.n	8003350 <HAL_RTC_GetTime+0x198>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80032ee:	69f9      	ldr	r1, [r7, #28]
 80032f0:	68f8      	ldr	r0, [r7, #12]
 80032f2:	f000 f9e0 	bl	80036b6 <RTC_WriteAlarmCounter>
 80032f6:	4603      	mov	r3, r0
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d001      	beq.n	8003300 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 80032fc:	2301      	movs	r3, #1
 80032fe:	e027      	b.n	8003350 <HAL_RTC_GetTime+0x198>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 8003300:	6979      	ldr	r1, [r7, #20]
 8003302:	68f8      	ldr	r0, [r7, #12]
 8003304:	f000 fa88 	bl	8003818 <RTC_DateUpdate>
 8003308:	e003      	b.n	8003312 <HAL_RTC_GetTime+0x15a>
  }
  else
  {
    sTime->Hours = hours;
 800330a:	693b      	ldr	r3, [r7, #16]
 800330c:	b2da      	uxtb	r2, r3
 800330e:	68bb      	ldr	r3, [r7, #8]
 8003310:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d01a      	beq.n	800334e <HAL_RTC_GetTime+0x196>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 8003318:	68bb      	ldr	r3, [r7, #8]
 800331a:	781b      	ldrb	r3, [r3, #0]
 800331c:	4618      	mov	r0, r3
 800331e:	f000 fa41 	bl	80037a4 <RTC_ByteToBcd2>
 8003322:	4603      	mov	r3, r0
 8003324:	461a      	mov	r2, r3
 8003326:	68bb      	ldr	r3, [r7, #8]
 8003328:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 800332a:	68bb      	ldr	r3, [r7, #8]
 800332c:	785b      	ldrb	r3, [r3, #1]
 800332e:	4618      	mov	r0, r3
 8003330:	f000 fa38 	bl	80037a4 <RTC_ByteToBcd2>
 8003334:	4603      	mov	r3, r0
 8003336:	461a      	mov	r2, r3
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 800333c:	68bb      	ldr	r3, [r7, #8]
 800333e:	789b      	ldrb	r3, [r3, #2]
 8003340:	4618      	mov	r0, r3
 8003342:	f000 fa2f 	bl	80037a4 <RTC_ByteToBcd2>
 8003346:	4603      	mov	r3, r0
 8003348:	461a      	mov	r2, r3
 800334a:	68bb      	ldr	r3, [r7, #8]
 800334c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800334e:	2300      	movs	r3, #0
}
 8003350:	4618      	mov	r0, r3
 8003352:	3720      	adds	r7, #32
 8003354:	46bd      	mov	sp, r7
 8003356:	bd80      	pop	{r7, pc}
 8003358:	91a2b3c5 	.word	0x91a2b3c5
 800335c:	88888889 	.word	0x88888889
 8003360:	aaaaaaab 	.word	0xaaaaaaab
 8003364:	00015180 	.word	0x00015180

08003368 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b088      	sub	sp, #32
 800336c:	af00      	add	r7, sp, #0
 800336e:	60f8      	str	r0, [r7, #12]
 8003370:	60b9      	str	r1, [r7, #8]
 8003372:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 8003374:	2300      	movs	r3, #0
 8003376:	61fb      	str	r3, [r7, #28]
 8003378:	2300      	movs	r3, #0
 800337a:	61bb      	str	r3, [r7, #24]
 800337c:	2300      	movs	r3, #0
 800337e:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d002      	beq.n	800338c <HAL_RTC_SetDate+0x24>
 8003386:	68bb      	ldr	r3, [r7, #8]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d101      	bne.n	8003390 <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 800338c:	2301      	movs	r3, #1
 800338e:	e097      	b.n	80034c0 <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	7c1b      	ldrb	r3, [r3, #16]
 8003394:	2b01      	cmp	r3, #1
 8003396:	d101      	bne.n	800339c <HAL_RTC_SetDate+0x34>
 8003398:	2302      	movs	r3, #2
 800339a:	e091      	b.n	80034c0 <HAL_RTC_SetDate+0x158>
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	2201      	movs	r2, #1
 80033a0:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	2202      	movs	r2, #2
 80033a6:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d10c      	bne.n	80033c8 <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 80033ae:	68bb      	ldr	r3, [r7, #8]
 80033b0:	78da      	ldrb	r2, [r3, #3]
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 80033b6:	68bb      	ldr	r3, [r7, #8]
 80033b8:	785a      	ldrb	r2, [r3, #1]
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 80033be:	68bb      	ldr	r3, [r7, #8]
 80033c0:	789a      	ldrb	r2, [r3, #2]
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	739a      	strb	r2, [r3, #14]
 80033c6:	e01a      	b.n	80033fe <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	78db      	ldrb	r3, [r3, #3]
 80033cc:	4618      	mov	r0, r3
 80033ce:	f000 fa06 	bl	80037de <RTC_Bcd2ToByte>
 80033d2:	4603      	mov	r3, r0
 80033d4:	461a      	mov	r2, r3
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 80033da:	68bb      	ldr	r3, [r7, #8]
 80033dc:	785b      	ldrb	r3, [r3, #1]
 80033de:	4618      	mov	r0, r3
 80033e0:	f000 f9fd 	bl	80037de <RTC_Bcd2ToByte>
 80033e4:	4603      	mov	r3, r0
 80033e6:	461a      	mov	r2, r3
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	789b      	ldrb	r3, [r3, #2]
 80033f0:	4618      	mov	r0, r3
 80033f2:	f000 f9f4 	bl	80037de <RTC_Bcd2ToByte>
 80033f6:	4603      	mov	r3, r0
 80033f8:	461a      	mov	r2, r3
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	7bdb      	ldrb	r3, [r3, #15]
 8003402:	4618      	mov	r0, r3
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	7b59      	ldrb	r1, [r3, #13]
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	7b9b      	ldrb	r3, [r3, #14]
 800340c:	461a      	mov	r2, r3
 800340e:	f000 fadf 	bl	80039d0 <RTC_WeekDayNum>
 8003412:	4603      	mov	r3, r0
 8003414:	461a      	mov	r2, r3
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	7b1a      	ldrb	r2, [r3, #12]
 800341e:	68bb      	ldr	r3, [r7, #8]
 8003420:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8003422:	68f8      	ldr	r0, [r7, #12]
 8003424:	f000 f8d7 	bl	80035d6 <RTC_ReadTimeCounter>
 8003428:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 800342a:	69fb      	ldr	r3, [r7, #28]
 800342c:	4a26      	ldr	r2, [pc, #152]	@ (80034c8 <HAL_RTC_SetDate+0x160>)
 800342e:	fba2 2303 	umull	r2, r3, r2, r3
 8003432:	0adb      	lsrs	r3, r3, #11
 8003434:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	2b18      	cmp	r3, #24
 800343a:	d93a      	bls.n	80034b2 <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 800343c:	697b      	ldr	r3, [r7, #20]
 800343e:	4a23      	ldr	r2, [pc, #140]	@ (80034cc <HAL_RTC_SetDate+0x164>)
 8003440:	fba2 2303 	umull	r2, r3, r2, r3
 8003444:	091b      	lsrs	r3, r3, #4
 8003446:	4a22      	ldr	r2, [pc, #136]	@ (80034d0 <HAL_RTC_SetDate+0x168>)
 8003448:	fb02 f303 	mul.w	r3, r2, r3
 800344c:	69fa      	ldr	r2, [r7, #28]
 800344e:	1ad3      	subs	r3, r2, r3
 8003450:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8003452:	69f9      	ldr	r1, [r7, #28]
 8003454:	68f8      	ldr	r0, [r7, #12]
 8003456:	f000 f8ee 	bl	8003636 <RTC_WriteTimeCounter>
 800345a:	4603      	mov	r3, r0
 800345c:	2b00      	cmp	r3, #0
 800345e:	d007      	beq.n	8003470 <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	2204      	movs	r2, #4
 8003464:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	2200      	movs	r2, #0
 800346a:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 800346c:	2301      	movs	r3, #1
 800346e:	e027      	b.n	80034c0 <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8003470:	68f8      	ldr	r0, [r7, #12]
 8003472:	f000 f907 	bl	8003684 <RTC_ReadAlarmCounter>
 8003476:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8003478:	69bb      	ldr	r3, [r7, #24]
 800347a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800347e:	d018      	beq.n	80034b2 <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 8003480:	69ba      	ldr	r2, [r7, #24]
 8003482:	69fb      	ldr	r3, [r7, #28]
 8003484:	429a      	cmp	r2, r3
 8003486:	d214      	bcs.n	80034b2 <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8003488:	69bb      	ldr	r3, [r7, #24]
 800348a:	f503 33a8 	add.w	r3, r3, #86016	@ 0x15000
 800348e:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 8003492:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8003494:	69b9      	ldr	r1, [r7, #24]
 8003496:	68f8      	ldr	r0, [r7, #12]
 8003498:	f000 f90d 	bl	80036b6 <RTC_WriteAlarmCounter>
 800349c:	4603      	mov	r3, r0
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d007      	beq.n	80034b2 <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	2204      	movs	r2, #4
 80034a6:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	2200      	movs	r2, #0
 80034ac:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 80034ae:	2301      	movs	r3, #1
 80034b0:	e006      	b.n	80034c0 <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	2201      	movs	r2, #1
 80034b6:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	2200      	movs	r2, #0
 80034bc:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80034be:	2300      	movs	r3, #0
}
 80034c0:	4618      	mov	r0, r3
 80034c2:	3720      	adds	r7, #32
 80034c4:	46bd      	mov	sp, r7
 80034c6:	bd80      	pop	{r7, pc}
 80034c8:	91a2b3c5 	.word	0x91a2b3c5
 80034cc:	aaaaaaab 	.word	0xaaaaaaab
 80034d0:	00015180 	.word	0x00015180

080034d4 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b086      	sub	sp, #24
 80034d8:	af00      	add	r7, sp, #0
 80034da:	60f8      	str	r0, [r7, #12]
 80034dc:	60b9      	str	r1, [r7, #8]
 80034de:	607a      	str	r2, [r7, #4]
  RTC_TimeTypeDef stime = {0U};
 80034e0:	f107 0314 	add.w	r3, r7, #20
 80034e4:	2100      	movs	r1, #0
 80034e6:	460a      	mov	r2, r1
 80034e8:	801a      	strh	r2, [r3, #0]
 80034ea:	460a      	mov	r2, r1
 80034ec:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d002      	beq.n	80034fa <HAL_RTC_GetDate+0x26>
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d101      	bne.n	80034fe <HAL_RTC_GetDate+0x2a>
  {
    return HAL_ERROR;
 80034fa:	2301      	movs	r3, #1
 80034fc:	e03a      	b.n	8003574 <HAL_RTC_GetDate+0xa0>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 80034fe:	f107 0314 	add.w	r3, r7, #20
 8003502:	2200      	movs	r2, #0
 8003504:	4619      	mov	r1, r3
 8003506:	68f8      	ldr	r0, [r7, #12]
 8003508:	f7ff fe56 	bl	80031b8 <HAL_RTC_GetTime>
 800350c:	4603      	mov	r3, r0
 800350e:	2b00      	cmp	r3, #0
 8003510:	d001      	beq.n	8003516 <HAL_RTC_GetDate+0x42>
  {
    return HAL_ERROR;
 8003512:	2301      	movs	r3, #1
 8003514:	e02e      	b.n	8003574 <HAL_RTC_GetDate+0xa0>
  }

  /* Fill the structure fields with the read parameters */
  sDate->WeekDay  = hrtc->DateToUpdate.WeekDay;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	7b1a      	ldrb	r2, [r3, #12]
 800351a:	68bb      	ldr	r3, [r7, #8]
 800351c:	701a      	strb	r2, [r3, #0]
  sDate->Year     = hrtc->DateToUpdate.Year;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	7bda      	ldrb	r2, [r3, #15]
 8003522:	68bb      	ldr	r3, [r7, #8]
 8003524:	70da      	strb	r2, [r3, #3]
  sDate->Month    = hrtc->DateToUpdate.Month;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	7b5a      	ldrb	r2, [r3, #13]
 800352a:	68bb      	ldr	r3, [r7, #8]
 800352c:	705a      	strb	r2, [r3, #1]
  sDate->Date     = hrtc->DateToUpdate.Date;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	7b9a      	ldrb	r2, [r3, #14]
 8003532:	68bb      	ldr	r3, [r7, #8]
 8003534:	709a      	strb	r2, [r3, #2]

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d01a      	beq.n	8003572 <HAL_RTC_GetDate+0x9e>
  {
    /* Convert the date structure parameters to BCD format */
    sDate->Year   = (uint8_t)RTC_ByteToBcd2(sDate->Year);
 800353c:	68bb      	ldr	r3, [r7, #8]
 800353e:	78db      	ldrb	r3, [r3, #3]
 8003540:	4618      	mov	r0, r3
 8003542:	f000 f92f 	bl	80037a4 <RTC_ByteToBcd2>
 8003546:	4603      	mov	r3, r0
 8003548:	461a      	mov	r2, r3
 800354a:	68bb      	ldr	r3, [r7, #8]
 800354c:	70da      	strb	r2, [r3, #3]
    sDate->Month  = (uint8_t)RTC_ByteToBcd2(sDate->Month);
 800354e:	68bb      	ldr	r3, [r7, #8]
 8003550:	785b      	ldrb	r3, [r3, #1]
 8003552:	4618      	mov	r0, r3
 8003554:	f000 f926 	bl	80037a4 <RTC_ByteToBcd2>
 8003558:	4603      	mov	r3, r0
 800355a:	461a      	mov	r2, r3
 800355c:	68bb      	ldr	r3, [r7, #8]
 800355e:	705a      	strb	r2, [r3, #1]
    sDate->Date   = (uint8_t)RTC_ByteToBcd2(sDate->Date);
 8003560:	68bb      	ldr	r3, [r7, #8]
 8003562:	789b      	ldrb	r3, [r3, #2]
 8003564:	4618      	mov	r0, r3
 8003566:	f000 f91d 	bl	80037a4 <RTC_ByteToBcd2>
 800356a:	4603      	mov	r3, r0
 800356c:	461a      	mov	r2, r3
 800356e:	68bb      	ldr	r3, [r7, #8]
 8003570:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8003572:	2300      	movs	r3, #0
}
 8003574:	4618      	mov	r0, r3
 8003576:	3718      	adds	r7, #24
 8003578:	46bd      	mov	sp, r7
 800357a:	bd80      	pop	{r7, pc}

0800357c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b084      	sub	sp, #16
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003584:	2300      	movs	r3, #0
 8003586:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d101      	bne.n	8003592 <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 800358e:	2301      	movs	r3, #1
 8003590:	e01d      	b.n	80035ce <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	685a      	ldr	r2, [r3, #4]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f022 0208 	bic.w	r2, r2, #8
 80035a0:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 80035a2:	f7fd fd1f 	bl	8000fe4 <HAL_GetTick>
 80035a6:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 80035a8:	e009      	b.n	80035be <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80035aa:	f7fd fd1b 	bl	8000fe4 <HAL_GetTick>
 80035ae:	4602      	mov	r2, r0
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	1ad3      	subs	r3, r2, r3
 80035b4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80035b8:	d901      	bls.n	80035be <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 80035ba:	2303      	movs	r3, #3
 80035bc:	e007      	b.n	80035ce <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	f003 0308 	and.w	r3, r3, #8
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d0ee      	beq.n	80035aa <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 80035cc:	2300      	movs	r3, #0
}
 80035ce:	4618      	mov	r0, r3
 80035d0:	3710      	adds	r7, #16
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}

080035d6 <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 80035d6:	b480      	push	{r7}
 80035d8:	b087      	sub	sp, #28
 80035da:	af00      	add	r7, sp, #0
 80035dc:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 80035de:	2300      	movs	r3, #0
 80035e0:	827b      	strh	r3, [r7, #18]
 80035e2:	2300      	movs	r3, #0
 80035e4:	823b      	strh	r3, [r7, #16]
 80035e6:	2300      	movs	r3, #0
 80035e8:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 80035ea:	2300      	movs	r3, #0
 80035ec:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	699b      	ldr	r3, [r3, #24]
 80035f4:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	69db      	ldr	r3, [r3, #28]
 80035fc:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	699b      	ldr	r3, [r3, #24]
 8003604:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 8003606:	8a7a      	ldrh	r2, [r7, #18]
 8003608:	8a3b      	ldrh	r3, [r7, #16]
 800360a:	429a      	cmp	r2, r3
 800360c:	d008      	beq.n	8003620 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 800360e:	8a3b      	ldrh	r3, [r7, #16]
 8003610:	041a      	lsls	r2, r3, #16
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	69db      	ldr	r3, [r3, #28]
 8003618:	b29b      	uxth	r3, r3
 800361a:	4313      	orrs	r3, r2
 800361c:	617b      	str	r3, [r7, #20]
 800361e:	e004      	b.n	800362a <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8003620:	8a7b      	ldrh	r3, [r7, #18]
 8003622:	041a      	lsls	r2, r3, #16
 8003624:	89fb      	ldrh	r3, [r7, #14]
 8003626:	4313      	orrs	r3, r2
 8003628:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 800362a:	697b      	ldr	r3, [r7, #20]
}
 800362c:	4618      	mov	r0, r3
 800362e:	371c      	adds	r7, #28
 8003630:	46bd      	mov	sp, r7
 8003632:	bc80      	pop	{r7}
 8003634:	4770      	bx	lr

08003636 <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 8003636:	b580      	push	{r7, lr}
 8003638:	b084      	sub	sp, #16
 800363a:	af00      	add	r7, sp, #0
 800363c:	6078      	str	r0, [r7, #4]
 800363e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003640:	2300      	movs	r3, #0
 8003642:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003644:	6878      	ldr	r0, [r7, #4]
 8003646:	f000 f85d 	bl	8003704 <RTC_EnterInitMode>
 800364a:	4603      	mov	r3, r0
 800364c:	2b00      	cmp	r3, #0
 800364e:	d002      	beq.n	8003656 <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 8003650:	2301      	movs	r3, #1
 8003652:	73fb      	strb	r3, [r7, #15]
 8003654:	e011      	b.n	800367a <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	683a      	ldr	r2, [r7, #0]
 800365c:	0c12      	lsrs	r2, r2, #16
 800365e:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	683a      	ldr	r2, [r7, #0]
 8003666:	b292      	uxth	r2, r2
 8003668:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 800366a:	6878      	ldr	r0, [r7, #4]
 800366c:	f000 f872 	bl	8003754 <RTC_ExitInitMode>
 8003670:	4603      	mov	r3, r0
 8003672:	2b00      	cmp	r3, #0
 8003674:	d001      	beq.n	800367a <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 8003676:	2301      	movs	r3, #1
 8003678:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800367a:	7bfb      	ldrb	r3, [r7, #15]
}
 800367c:	4618      	mov	r0, r3
 800367e:	3710      	adds	r7, #16
 8003680:	46bd      	mov	sp, r7
 8003682:	bd80      	pop	{r7, pc}

08003684 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 8003684:	b480      	push	{r7}
 8003686:	b085      	sub	sp, #20
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 800368c:	2300      	movs	r3, #0
 800368e:	81fb      	strh	r3, [r7, #14]
 8003690:	2300      	movs	r3, #0
 8003692:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	6a1b      	ldr	r3, [r3, #32]
 800369a:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036a2:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 80036a4:	89fb      	ldrh	r3, [r7, #14]
 80036a6:	041a      	lsls	r2, r3, #16
 80036a8:	89bb      	ldrh	r3, [r7, #12]
 80036aa:	4313      	orrs	r3, r2
}
 80036ac:	4618      	mov	r0, r3
 80036ae:	3714      	adds	r7, #20
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bc80      	pop	{r7}
 80036b4:	4770      	bx	lr

080036b6 <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 80036b6:	b580      	push	{r7, lr}
 80036b8:	b084      	sub	sp, #16
 80036ba:	af00      	add	r7, sp, #0
 80036bc:	6078      	str	r0, [r7, #4]
 80036be:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80036c0:	2300      	movs	r3, #0
 80036c2:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80036c4:	6878      	ldr	r0, [r7, #4]
 80036c6:	f000 f81d 	bl	8003704 <RTC_EnterInitMode>
 80036ca:	4603      	mov	r3, r0
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d002      	beq.n	80036d6 <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 80036d0:	2301      	movs	r3, #1
 80036d2:	73fb      	strb	r3, [r7, #15]
 80036d4:	e011      	b.n	80036fa <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	683a      	ldr	r2, [r7, #0]
 80036dc:	0c12      	lsrs	r2, r2, #16
 80036de:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	683a      	ldr	r2, [r7, #0]
 80036e6:	b292      	uxth	r2, r2
 80036e8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80036ea:	6878      	ldr	r0, [r7, #4]
 80036ec:	f000 f832 	bl	8003754 <RTC_ExitInitMode>
 80036f0:	4603      	mov	r3, r0
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d001      	beq.n	80036fa <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 80036f6:	2301      	movs	r3, #1
 80036f8:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80036fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80036fc:	4618      	mov	r0, r3
 80036fe:	3710      	adds	r7, #16
 8003700:	46bd      	mov	sp, r7
 8003702:	bd80      	pop	{r7, pc}

08003704 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b084      	sub	sp, #16
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800370c:	2300      	movs	r3, #0
 800370e:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8003710:	f7fd fc68 	bl	8000fe4 <HAL_GetTick>
 8003714:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003716:	e009      	b.n	800372c <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8003718:	f7fd fc64 	bl	8000fe4 <HAL_GetTick>
 800371c:	4602      	mov	r2, r0
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	1ad3      	subs	r3, r2, r3
 8003722:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003726:	d901      	bls.n	800372c <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8003728:	2303      	movs	r3, #3
 800372a:	e00f      	b.n	800374c <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	f003 0320 	and.w	r3, r3, #32
 8003736:	2b00      	cmp	r3, #0
 8003738:	d0ee      	beq.n	8003718 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	685a      	ldr	r2, [r3, #4]
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f042 0210 	orr.w	r2, r2, #16
 8003748:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 800374a:	2300      	movs	r3, #0
}
 800374c:	4618      	mov	r0, r3
 800374e:	3710      	adds	r7, #16
 8003750:	46bd      	mov	sp, r7
 8003752:	bd80      	pop	{r7, pc}

08003754 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b084      	sub	sp, #16
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800375c:	2300      	movs	r3, #0
 800375e:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	685a      	ldr	r2, [r3, #4]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f022 0210 	bic.w	r2, r2, #16
 800376e:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8003770:	f7fd fc38 	bl	8000fe4 <HAL_GetTick>
 8003774:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003776:	e009      	b.n	800378c <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8003778:	f7fd fc34 	bl	8000fe4 <HAL_GetTick>
 800377c:	4602      	mov	r2, r0
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	1ad3      	subs	r3, r2, r3
 8003782:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003786:	d901      	bls.n	800378c <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8003788:	2303      	movs	r3, #3
 800378a:	e007      	b.n	800379c <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	f003 0320 	and.w	r3, r3, #32
 8003796:	2b00      	cmp	r3, #0
 8003798:	d0ee      	beq.n	8003778 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 800379a:	2300      	movs	r3, #0
}
 800379c:	4618      	mov	r0, r3
 800379e:	3710      	adds	r7, #16
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bd80      	pop	{r7, pc}

080037a4 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80037a4:	b480      	push	{r7}
 80037a6:	b085      	sub	sp, #20
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	4603      	mov	r3, r0
 80037ac:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80037ae:	2300      	movs	r3, #0
 80037b0:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 80037b2:	e005      	b.n	80037c0 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	3301      	adds	r3, #1
 80037b8:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 80037ba:	79fb      	ldrb	r3, [r7, #7]
 80037bc:	3b0a      	subs	r3, #10
 80037be:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 80037c0:	79fb      	ldrb	r3, [r7, #7]
 80037c2:	2b09      	cmp	r3, #9
 80037c4:	d8f6      	bhi.n	80037b4 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	b2db      	uxtb	r3, r3
 80037ca:	011b      	lsls	r3, r3, #4
 80037cc:	b2da      	uxtb	r2, r3
 80037ce:	79fb      	ldrb	r3, [r7, #7]
 80037d0:	4313      	orrs	r3, r2
 80037d2:	b2db      	uxtb	r3, r3
}
 80037d4:	4618      	mov	r0, r3
 80037d6:	3714      	adds	r7, #20
 80037d8:	46bd      	mov	sp, r7
 80037da:	bc80      	pop	{r7}
 80037dc:	4770      	bx	lr

080037de <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80037de:	b480      	push	{r7}
 80037e0:	b085      	sub	sp, #20
 80037e2:	af00      	add	r7, sp, #0
 80037e4:	4603      	mov	r3, r0
 80037e6:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 80037e8:	2300      	movs	r3, #0
 80037ea:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 80037ec:	79fb      	ldrb	r3, [r7, #7]
 80037ee:	091b      	lsrs	r3, r3, #4
 80037f0:	b2db      	uxtb	r3, r3
 80037f2:	461a      	mov	r2, r3
 80037f4:	4613      	mov	r3, r2
 80037f6:	009b      	lsls	r3, r3, #2
 80037f8:	4413      	add	r3, r2
 80037fa:	005b      	lsls	r3, r3, #1
 80037fc:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 80037fe:	79fb      	ldrb	r3, [r7, #7]
 8003800:	f003 030f 	and.w	r3, r3, #15
 8003804:	b2da      	uxtb	r2, r3
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	b2db      	uxtb	r3, r3
 800380a:	4413      	add	r3, r2
 800380c:	b2db      	uxtb	r3, r3
}
 800380e:	4618      	mov	r0, r3
 8003810:	3714      	adds	r7, #20
 8003812:	46bd      	mov	sp, r7
 8003814:	bc80      	pop	{r7}
 8003816:	4770      	bx	lr

08003818 <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b086      	sub	sp, #24
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
 8003820:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 8003822:	2300      	movs	r3, #0
 8003824:	617b      	str	r3, [r7, #20]
 8003826:	2300      	movs	r3, #0
 8003828:	613b      	str	r3, [r7, #16]
 800382a:	2300      	movs	r3, #0
 800382c:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 800382e:	2300      	movs	r3, #0
 8003830:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	7bdb      	ldrb	r3, [r3, #15]
 8003836:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	7b5b      	ldrb	r3, [r3, #13]
 800383c:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	7b9b      	ldrb	r3, [r3, #14]
 8003842:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 8003844:	2300      	movs	r3, #0
 8003846:	60bb      	str	r3, [r7, #8]
 8003848:	e06f      	b.n	800392a <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	2b01      	cmp	r3, #1
 800384e:	d011      	beq.n	8003874 <RTC_DateUpdate+0x5c>
 8003850:	693b      	ldr	r3, [r7, #16]
 8003852:	2b03      	cmp	r3, #3
 8003854:	d00e      	beq.n	8003874 <RTC_DateUpdate+0x5c>
 8003856:	693b      	ldr	r3, [r7, #16]
 8003858:	2b05      	cmp	r3, #5
 800385a:	d00b      	beq.n	8003874 <RTC_DateUpdate+0x5c>
 800385c:	693b      	ldr	r3, [r7, #16]
 800385e:	2b07      	cmp	r3, #7
 8003860:	d008      	beq.n	8003874 <RTC_DateUpdate+0x5c>
 8003862:	693b      	ldr	r3, [r7, #16]
 8003864:	2b08      	cmp	r3, #8
 8003866:	d005      	beq.n	8003874 <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 8003868:	693b      	ldr	r3, [r7, #16]
 800386a:	2b0a      	cmp	r3, #10
 800386c:	d002      	beq.n	8003874 <RTC_DateUpdate+0x5c>
 800386e:	693b      	ldr	r3, [r7, #16]
 8003870:	2b0c      	cmp	r3, #12
 8003872:	d117      	bne.n	80038a4 <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	2b1e      	cmp	r3, #30
 8003878:	d803      	bhi.n	8003882 <RTC_DateUpdate+0x6a>
      {
        day++;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	3301      	adds	r3, #1
 800387e:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8003880:	e050      	b.n	8003924 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 8003882:	693b      	ldr	r3, [r7, #16]
 8003884:	2b0c      	cmp	r3, #12
 8003886:	d005      	beq.n	8003894 <RTC_DateUpdate+0x7c>
        {
          month++;
 8003888:	693b      	ldr	r3, [r7, #16]
 800388a:	3301      	adds	r3, #1
 800388c:	613b      	str	r3, [r7, #16]
          day = 1U;
 800388e:	2301      	movs	r3, #1
 8003890:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8003892:	e047      	b.n	8003924 <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 8003894:	2301      	movs	r3, #1
 8003896:	613b      	str	r3, [r7, #16]
          day = 1U;
 8003898:	2301      	movs	r3, #1
 800389a:	60fb      	str	r3, [r7, #12]
          year++;
 800389c:	697b      	ldr	r3, [r7, #20]
 800389e:	3301      	adds	r3, #1
 80038a0:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 80038a2:	e03f      	b.n	8003924 <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 80038a4:	693b      	ldr	r3, [r7, #16]
 80038a6:	2b04      	cmp	r3, #4
 80038a8:	d008      	beq.n	80038bc <RTC_DateUpdate+0xa4>
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	2b06      	cmp	r3, #6
 80038ae:	d005      	beq.n	80038bc <RTC_DateUpdate+0xa4>
 80038b0:	693b      	ldr	r3, [r7, #16]
 80038b2:	2b09      	cmp	r3, #9
 80038b4:	d002      	beq.n	80038bc <RTC_DateUpdate+0xa4>
 80038b6:	693b      	ldr	r3, [r7, #16]
 80038b8:	2b0b      	cmp	r3, #11
 80038ba:	d10c      	bne.n	80038d6 <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	2b1d      	cmp	r3, #29
 80038c0:	d803      	bhi.n	80038ca <RTC_DateUpdate+0xb2>
      {
        day++;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	3301      	adds	r3, #1
 80038c6:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 80038c8:	e02c      	b.n	8003924 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 80038ca:	693b      	ldr	r3, [r7, #16]
 80038cc:	3301      	adds	r3, #1
 80038ce:	613b      	str	r3, [r7, #16]
        day = 1U;
 80038d0:	2301      	movs	r3, #1
 80038d2:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 80038d4:	e026      	b.n	8003924 <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 80038d6:	693b      	ldr	r3, [r7, #16]
 80038d8:	2b02      	cmp	r3, #2
 80038da:	d123      	bne.n	8003924 <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	2b1b      	cmp	r3, #27
 80038e0:	d803      	bhi.n	80038ea <RTC_DateUpdate+0xd2>
      {
        day++;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	3301      	adds	r3, #1
 80038e6:	60fb      	str	r3, [r7, #12]
 80038e8:	e01c      	b.n	8003924 <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	2b1c      	cmp	r3, #28
 80038ee:	d111      	bne.n	8003914 <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 80038f0:	697b      	ldr	r3, [r7, #20]
 80038f2:	b29b      	uxth	r3, r3
 80038f4:	4618      	mov	r0, r3
 80038f6:	f000 f839 	bl	800396c <RTC_IsLeapYear>
 80038fa:	4603      	mov	r3, r0
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d003      	beq.n	8003908 <RTC_DateUpdate+0xf0>
        {
          day++;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	3301      	adds	r3, #1
 8003904:	60fb      	str	r3, [r7, #12]
 8003906:	e00d      	b.n	8003924 <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 8003908:	693b      	ldr	r3, [r7, #16]
 800390a:	3301      	adds	r3, #1
 800390c:	613b      	str	r3, [r7, #16]
          day = 1U;
 800390e:	2301      	movs	r3, #1
 8003910:	60fb      	str	r3, [r7, #12]
 8003912:	e007      	b.n	8003924 <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	2b1d      	cmp	r3, #29
 8003918:	d104      	bne.n	8003924 <RTC_DateUpdate+0x10c>
      {
        month++;
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	3301      	adds	r3, #1
 800391e:	613b      	str	r3, [r7, #16]
        day = 1U;
 8003920:	2301      	movs	r3, #1
 8003922:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 8003924:	68bb      	ldr	r3, [r7, #8]
 8003926:	3301      	adds	r3, #1
 8003928:	60bb      	str	r3, [r7, #8]
 800392a:	68ba      	ldr	r2, [r7, #8]
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	429a      	cmp	r2, r3
 8003930:	d38b      	bcc.n	800384a <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 8003932:	697b      	ldr	r3, [r7, #20]
 8003934:	b2da      	uxtb	r2, r3
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 800393a:	693b      	ldr	r3, [r7, #16]
 800393c:	b2da      	uxtb	r2, r3
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	b2da      	uxtb	r2, r3
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 800394a:	693b      	ldr	r3, [r7, #16]
 800394c:	b2db      	uxtb	r3, r3
 800394e:	68fa      	ldr	r2, [r7, #12]
 8003950:	b2d2      	uxtb	r2, r2
 8003952:	4619      	mov	r1, r3
 8003954:	6978      	ldr	r0, [r7, #20]
 8003956:	f000 f83b 	bl	80039d0 <RTC_WeekDayNum>
 800395a:	4603      	mov	r3, r0
 800395c:	461a      	mov	r2, r3
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	731a      	strb	r2, [r3, #12]
}
 8003962:	bf00      	nop
 8003964:	3718      	adds	r7, #24
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}
	...

0800396c <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 800396c:	b480      	push	{r7}
 800396e:	b083      	sub	sp, #12
 8003970:	af00      	add	r7, sp, #0
 8003972:	4603      	mov	r3, r0
 8003974:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 8003976:	88fb      	ldrh	r3, [r7, #6]
 8003978:	f003 0303 	and.w	r3, r3, #3
 800397c:	b29b      	uxth	r3, r3
 800397e:	2b00      	cmp	r3, #0
 8003980:	d001      	beq.n	8003986 <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 8003982:	2300      	movs	r3, #0
 8003984:	e01d      	b.n	80039c2 <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 8003986:	88fb      	ldrh	r3, [r7, #6]
 8003988:	4a10      	ldr	r2, [pc, #64]	@ (80039cc <RTC_IsLeapYear+0x60>)
 800398a:	fba2 1203 	umull	r1, r2, r2, r3
 800398e:	0952      	lsrs	r2, r2, #5
 8003990:	2164      	movs	r1, #100	@ 0x64
 8003992:	fb01 f202 	mul.w	r2, r1, r2
 8003996:	1a9b      	subs	r3, r3, r2
 8003998:	b29b      	uxth	r3, r3
 800399a:	2b00      	cmp	r3, #0
 800399c:	d001      	beq.n	80039a2 <RTC_IsLeapYear+0x36>
  {
    return 1U;
 800399e:	2301      	movs	r3, #1
 80039a0:	e00f      	b.n	80039c2 <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 80039a2:	88fb      	ldrh	r3, [r7, #6]
 80039a4:	4a09      	ldr	r2, [pc, #36]	@ (80039cc <RTC_IsLeapYear+0x60>)
 80039a6:	fba2 1203 	umull	r1, r2, r2, r3
 80039aa:	09d2      	lsrs	r2, r2, #7
 80039ac:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80039b0:	fb01 f202 	mul.w	r2, r1, r2
 80039b4:	1a9b      	subs	r3, r3, r2
 80039b6:	b29b      	uxth	r3, r3
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d101      	bne.n	80039c0 <RTC_IsLeapYear+0x54>
  {
    return 1U;
 80039bc:	2301      	movs	r3, #1
 80039be:	e000      	b.n	80039c2 <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 80039c0:	2300      	movs	r3, #0
  }
}
 80039c2:	4618      	mov	r0, r3
 80039c4:	370c      	adds	r7, #12
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bc80      	pop	{r7}
 80039ca:	4770      	bx	lr
 80039cc:	51eb851f 	.word	0x51eb851f

080039d0 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 80039d0:	b480      	push	{r7}
 80039d2:	b085      	sub	sp, #20
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
 80039d8:	460b      	mov	r3, r1
 80039da:	70fb      	strb	r3, [r7, #3]
 80039dc:	4613      	mov	r3, r2
 80039de:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 80039e0:	2300      	movs	r3, #0
 80039e2:	60bb      	str	r3, [r7, #8]
 80039e4:	2300      	movs	r3, #0
 80039e6:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 80039ee:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 80039f0:	78fb      	ldrb	r3, [r7, #3]
 80039f2:	2b02      	cmp	r3, #2
 80039f4:	d82d      	bhi.n	8003a52 <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 80039f6:	78fa      	ldrb	r2, [r7, #3]
 80039f8:	4613      	mov	r3, r2
 80039fa:	005b      	lsls	r3, r3, #1
 80039fc:	4413      	add	r3, r2
 80039fe:	00db      	lsls	r3, r3, #3
 8003a00:	1a9b      	subs	r3, r3, r2
 8003a02:	4a2c      	ldr	r2, [pc, #176]	@ (8003ab4 <RTC_WeekDayNum+0xe4>)
 8003a04:	fba2 2303 	umull	r2, r3, r2, r3
 8003a08:	085a      	lsrs	r2, r3, #1
 8003a0a:	78bb      	ldrb	r3, [r7, #2]
 8003a0c:	441a      	add	r2, r3
 8003a0e:	68bb      	ldr	r3, [r7, #8]
 8003a10:	441a      	add	r2, r3
 8003a12:	68bb      	ldr	r3, [r7, #8]
 8003a14:	3b01      	subs	r3, #1
 8003a16:	089b      	lsrs	r3, r3, #2
 8003a18:	441a      	add	r2, r3
 8003a1a:	68bb      	ldr	r3, [r7, #8]
 8003a1c:	3b01      	subs	r3, #1
 8003a1e:	4926      	ldr	r1, [pc, #152]	@ (8003ab8 <RTC_WeekDayNum+0xe8>)
 8003a20:	fba1 1303 	umull	r1, r3, r1, r3
 8003a24:	095b      	lsrs	r3, r3, #5
 8003a26:	1ad2      	subs	r2, r2, r3
 8003a28:	68bb      	ldr	r3, [r7, #8]
 8003a2a:	3b01      	subs	r3, #1
 8003a2c:	4922      	ldr	r1, [pc, #136]	@ (8003ab8 <RTC_WeekDayNum+0xe8>)
 8003a2e:	fba1 1303 	umull	r1, r3, r1, r3
 8003a32:	09db      	lsrs	r3, r3, #7
 8003a34:	4413      	add	r3, r2
 8003a36:	1d1a      	adds	r2, r3, #4
 8003a38:	4b20      	ldr	r3, [pc, #128]	@ (8003abc <RTC_WeekDayNum+0xec>)
 8003a3a:	fba3 1302 	umull	r1, r3, r3, r2
 8003a3e:	1ad1      	subs	r1, r2, r3
 8003a40:	0849      	lsrs	r1, r1, #1
 8003a42:	440b      	add	r3, r1
 8003a44:	0899      	lsrs	r1, r3, #2
 8003a46:	460b      	mov	r3, r1
 8003a48:	00db      	lsls	r3, r3, #3
 8003a4a:	1a5b      	subs	r3, r3, r1
 8003a4c:	1ad3      	subs	r3, r2, r3
 8003a4e:	60fb      	str	r3, [r7, #12]
 8003a50:	e029      	b.n	8003aa6 <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8003a52:	78fa      	ldrb	r2, [r7, #3]
 8003a54:	4613      	mov	r3, r2
 8003a56:	005b      	lsls	r3, r3, #1
 8003a58:	4413      	add	r3, r2
 8003a5a:	00db      	lsls	r3, r3, #3
 8003a5c:	1a9b      	subs	r3, r3, r2
 8003a5e:	4a15      	ldr	r2, [pc, #84]	@ (8003ab4 <RTC_WeekDayNum+0xe4>)
 8003a60:	fba2 2303 	umull	r2, r3, r2, r3
 8003a64:	085a      	lsrs	r2, r3, #1
 8003a66:	78bb      	ldrb	r3, [r7, #2]
 8003a68:	441a      	add	r2, r3
 8003a6a:	68bb      	ldr	r3, [r7, #8]
 8003a6c:	441a      	add	r2, r3
 8003a6e:	68bb      	ldr	r3, [r7, #8]
 8003a70:	089b      	lsrs	r3, r3, #2
 8003a72:	441a      	add	r2, r3
 8003a74:	68bb      	ldr	r3, [r7, #8]
 8003a76:	4910      	ldr	r1, [pc, #64]	@ (8003ab8 <RTC_WeekDayNum+0xe8>)
 8003a78:	fba1 1303 	umull	r1, r3, r1, r3
 8003a7c:	095b      	lsrs	r3, r3, #5
 8003a7e:	1ad2      	subs	r2, r2, r3
 8003a80:	68bb      	ldr	r3, [r7, #8]
 8003a82:	490d      	ldr	r1, [pc, #52]	@ (8003ab8 <RTC_WeekDayNum+0xe8>)
 8003a84:	fba1 1303 	umull	r1, r3, r1, r3
 8003a88:	09db      	lsrs	r3, r3, #7
 8003a8a:	4413      	add	r3, r2
 8003a8c:	1c9a      	adds	r2, r3, #2
 8003a8e:	4b0b      	ldr	r3, [pc, #44]	@ (8003abc <RTC_WeekDayNum+0xec>)
 8003a90:	fba3 1302 	umull	r1, r3, r3, r2
 8003a94:	1ad1      	subs	r1, r2, r3
 8003a96:	0849      	lsrs	r1, r1, #1
 8003a98:	440b      	add	r3, r1
 8003a9a:	0899      	lsrs	r1, r3, #2
 8003a9c:	460b      	mov	r3, r1
 8003a9e:	00db      	lsls	r3, r3, #3
 8003aa0:	1a5b      	subs	r3, r3, r1
 8003aa2:	1ad3      	subs	r3, r2, r3
 8003aa4:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	b2db      	uxtb	r3, r3
}
 8003aaa:	4618      	mov	r0, r3
 8003aac:	3714      	adds	r7, #20
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bc80      	pop	{r7}
 8003ab2:	4770      	bx	lr
 8003ab4:	38e38e39 	.word	0x38e38e39
 8003ab8:	51eb851f 	.word	0x51eb851f
 8003abc:	24924925 	.word	0x24924925

08003ac0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b082      	sub	sp, #8
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d101      	bne.n	8003ad2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ace:	2301      	movs	r3, #1
 8003ad0:	e042      	b.n	8003b58 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ad8:	b2db      	uxtb	r3, r3
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d106      	bne.n	8003aec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ae6:	6878      	ldr	r0, [r7, #4]
 8003ae8:	f7fd f96e 	bl	8000dc8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2224      	movs	r2, #36	@ 0x24
 8003af0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	68da      	ldr	r2, [r3, #12]
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003b02:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003b04:	6878      	ldr	r0, [r7, #4]
 8003b06:	f000 ff3d 	bl	8004984 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	691a      	ldr	r2, [r3, #16]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003b18:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	695a      	ldr	r2, [r3, #20]
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003b28:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	68da      	ldr	r2, [r3, #12]
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003b38:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2220      	movs	r2, #32
 8003b44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2220      	movs	r2, #32
 8003b4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2200      	movs	r2, #0
 8003b54:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003b56:	2300      	movs	r3, #0
}
 8003b58:	4618      	mov	r0, r3
 8003b5a:	3708      	adds	r7, #8
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	bd80      	pop	{r7, pc}

08003b60 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b08a      	sub	sp, #40	@ 0x28
 8003b64:	af02      	add	r7, sp, #8
 8003b66:	60f8      	str	r0, [r7, #12]
 8003b68:	60b9      	str	r1, [r7, #8]
 8003b6a:	603b      	str	r3, [r7, #0]
 8003b6c:	4613      	mov	r3, r2
 8003b6e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003b70:	2300      	movs	r3, #0
 8003b72:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b7a:	b2db      	uxtb	r3, r3
 8003b7c:	2b20      	cmp	r3, #32
 8003b7e:	d175      	bne.n	8003c6c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d002      	beq.n	8003b8c <HAL_UART_Transmit+0x2c>
 8003b86:	88fb      	ldrh	r3, [r7, #6]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d101      	bne.n	8003b90 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	e06e      	b.n	8003c6e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	2200      	movs	r2, #0
 8003b94:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	2221      	movs	r2, #33	@ 0x21
 8003b9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003b9e:	f7fd fa21 	bl	8000fe4 <HAL_GetTick>
 8003ba2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	88fa      	ldrh	r2, [r7, #6]
 8003ba8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	88fa      	ldrh	r2, [r7, #6]
 8003bae:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	689b      	ldr	r3, [r3, #8]
 8003bb4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003bb8:	d108      	bne.n	8003bcc <HAL_UART_Transmit+0x6c>
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	691b      	ldr	r3, [r3, #16]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d104      	bne.n	8003bcc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003bc6:	68bb      	ldr	r3, [r7, #8]
 8003bc8:	61bb      	str	r3, [r7, #24]
 8003bca:	e003      	b.n	8003bd4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003bcc:	68bb      	ldr	r3, [r7, #8]
 8003bce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003bd4:	e02e      	b.n	8003c34 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	9300      	str	r3, [sp, #0]
 8003bda:	697b      	ldr	r3, [r7, #20]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	2180      	movs	r1, #128	@ 0x80
 8003be0:	68f8      	ldr	r0, [r7, #12]
 8003be2:	f000 fc1a 	bl	800441a <UART_WaitOnFlagUntilTimeout>
 8003be6:	4603      	mov	r3, r0
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d005      	beq.n	8003bf8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	2220      	movs	r2, #32
 8003bf0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003bf4:	2303      	movs	r3, #3
 8003bf6:	e03a      	b.n	8003c6e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003bf8:	69fb      	ldr	r3, [r7, #28]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d10b      	bne.n	8003c16 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003bfe:	69bb      	ldr	r3, [r7, #24]
 8003c00:	881b      	ldrh	r3, [r3, #0]
 8003c02:	461a      	mov	r2, r3
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003c0c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003c0e:	69bb      	ldr	r3, [r7, #24]
 8003c10:	3302      	adds	r3, #2
 8003c12:	61bb      	str	r3, [r7, #24]
 8003c14:	e007      	b.n	8003c26 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003c16:	69fb      	ldr	r3, [r7, #28]
 8003c18:	781a      	ldrb	r2, [r3, #0]
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003c20:	69fb      	ldr	r3, [r7, #28]
 8003c22:	3301      	adds	r3, #1
 8003c24:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003c2a:	b29b      	uxth	r3, r3
 8003c2c:	3b01      	subs	r3, #1
 8003c2e:	b29a      	uxth	r2, r3
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003c38:	b29b      	uxth	r3, r3
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d1cb      	bne.n	8003bd6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	9300      	str	r3, [sp, #0]
 8003c42:	697b      	ldr	r3, [r7, #20]
 8003c44:	2200      	movs	r2, #0
 8003c46:	2140      	movs	r1, #64	@ 0x40
 8003c48:	68f8      	ldr	r0, [r7, #12]
 8003c4a:	f000 fbe6 	bl	800441a <UART_WaitOnFlagUntilTimeout>
 8003c4e:	4603      	mov	r3, r0
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d005      	beq.n	8003c60 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	2220      	movs	r2, #32
 8003c58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003c5c:	2303      	movs	r3, #3
 8003c5e:	e006      	b.n	8003c6e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	2220      	movs	r2, #32
 8003c64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003c68:	2300      	movs	r3, #0
 8003c6a:	e000      	b.n	8003c6e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003c6c:	2302      	movs	r3, #2
  }
}
 8003c6e:	4618      	mov	r0, r3
 8003c70:	3720      	adds	r7, #32
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bd80      	pop	{r7, pc}

08003c76 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003c76:	b580      	push	{r7, lr}
 8003c78:	b084      	sub	sp, #16
 8003c7a:	af00      	add	r7, sp, #0
 8003c7c:	60f8      	str	r0, [r7, #12]
 8003c7e:	60b9      	str	r1, [r7, #8]
 8003c80:	4613      	mov	r3, r2
 8003c82:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003c8a:	b2db      	uxtb	r3, r3
 8003c8c:	2b20      	cmp	r3, #32
 8003c8e:	d112      	bne.n	8003cb6 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c90:	68bb      	ldr	r3, [r7, #8]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d002      	beq.n	8003c9c <HAL_UART_Receive_DMA+0x26>
 8003c96:	88fb      	ldrh	r3, [r7, #6]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d101      	bne.n	8003ca0 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	e00b      	b.n	8003cb8 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8003ca6:	88fb      	ldrh	r3, [r7, #6]
 8003ca8:	461a      	mov	r2, r3
 8003caa:	68b9      	ldr	r1, [r7, #8]
 8003cac:	68f8      	ldr	r0, [r7, #12]
 8003cae:	f000 fc0d 	bl	80044cc <UART_Start_Receive_DMA>
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	e000      	b.n	8003cb8 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003cb6:	2302      	movs	r3, #2
  }
}
 8003cb8:	4618      	mov	r0, r3
 8003cba:	3710      	adds	r7, #16
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	bd80      	pop	{r7, pc}

08003cc0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b0ba      	sub	sp, #232	@ 0xe8
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	68db      	ldr	r3, [r3, #12]
 8003cd8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	695b      	ldr	r3, [r3, #20]
 8003ce2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003cec:	2300      	movs	r3, #0
 8003cee:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003cf2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003cf6:	f003 030f 	and.w	r3, r3, #15
 8003cfa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003cfe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d10f      	bne.n	8003d26 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003d06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d0a:	f003 0320 	and.w	r3, r3, #32
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d009      	beq.n	8003d26 <HAL_UART_IRQHandler+0x66>
 8003d12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d16:	f003 0320 	and.w	r3, r3, #32
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d003      	beq.n	8003d26 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003d1e:	6878      	ldr	r0, [r7, #4]
 8003d20:	f000 fd72 	bl	8004808 <UART_Receive_IT>
      return;
 8003d24:	e25b      	b.n	80041de <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003d26:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	f000 80de 	beq.w	8003eec <HAL_UART_IRQHandler+0x22c>
 8003d30:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003d34:	f003 0301 	and.w	r3, r3, #1
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d106      	bne.n	8003d4a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003d3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d40:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	f000 80d1 	beq.w	8003eec <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003d4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d4e:	f003 0301 	and.w	r3, r3, #1
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d00b      	beq.n	8003d6e <HAL_UART_IRQHandler+0xae>
 8003d56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d005      	beq.n	8003d6e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d66:	f043 0201 	orr.w	r2, r3, #1
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003d6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d72:	f003 0304 	and.w	r3, r3, #4
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d00b      	beq.n	8003d92 <HAL_UART_IRQHandler+0xd2>
 8003d7a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003d7e:	f003 0301 	and.w	r3, r3, #1
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d005      	beq.n	8003d92 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d8a:	f043 0202 	orr.w	r2, r3, #2
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003d92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d96:	f003 0302 	and.w	r3, r3, #2
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d00b      	beq.n	8003db6 <HAL_UART_IRQHandler+0xf6>
 8003d9e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003da2:	f003 0301 	and.w	r3, r3, #1
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d005      	beq.n	8003db6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dae:	f043 0204 	orr.w	r2, r3, #4
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003db6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003dba:	f003 0308 	and.w	r3, r3, #8
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d011      	beq.n	8003de6 <HAL_UART_IRQHandler+0x126>
 8003dc2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003dc6:	f003 0320 	and.w	r3, r3, #32
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d105      	bne.n	8003dda <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003dce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003dd2:	f003 0301 	and.w	r3, r3, #1
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d005      	beq.n	8003de6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dde:	f043 0208 	orr.w	r2, r3, #8
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	f000 81f2 	beq.w	80041d4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003df0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003df4:	f003 0320 	and.w	r3, r3, #32
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d008      	beq.n	8003e0e <HAL_UART_IRQHandler+0x14e>
 8003dfc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e00:	f003 0320 	and.w	r3, r3, #32
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d002      	beq.n	8003e0e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003e08:	6878      	ldr	r0, [r7, #4]
 8003e0a:	f000 fcfd 	bl	8004808 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	695b      	ldr	r3, [r3, #20]
 8003e14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	bf14      	ite	ne
 8003e1c:	2301      	movne	r3, #1
 8003e1e:	2300      	moveq	r3, #0
 8003e20:	b2db      	uxtb	r3, r3
 8003e22:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e2a:	f003 0308 	and.w	r3, r3, #8
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d103      	bne.n	8003e3a <HAL_UART_IRQHandler+0x17a>
 8003e32:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d04f      	beq.n	8003eda <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003e3a:	6878      	ldr	r0, [r7, #4]
 8003e3c:	f000 fc07 	bl	800464e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	695b      	ldr	r3, [r3, #20]
 8003e46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d041      	beq.n	8003ed2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	3314      	adds	r3, #20
 8003e54:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e58:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003e5c:	e853 3f00 	ldrex	r3, [r3]
 8003e60:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003e64:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003e68:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003e6c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	3314      	adds	r3, #20
 8003e76:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003e7a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003e7e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e82:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003e86:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003e8a:	e841 2300 	strex	r3, r2, [r1]
 8003e8e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003e92:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d1d9      	bne.n	8003e4e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d013      	beq.n	8003eca <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ea6:	4a7e      	ldr	r2, [pc, #504]	@ (80040a0 <HAL_UART_IRQHandler+0x3e0>)
 8003ea8:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003eae:	4618      	mov	r0, r3
 8003eb0:	f7fd faca 	bl	8001448 <HAL_DMA_Abort_IT>
 8003eb4:	4603      	mov	r3, r0
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d016      	beq.n	8003ee8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ebe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ec0:	687a      	ldr	r2, [r7, #4]
 8003ec2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003ec4:	4610      	mov	r0, r2
 8003ec6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ec8:	e00e      	b.n	8003ee8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003eca:	6878      	ldr	r0, [r7, #4]
 8003ecc:	f000 f993 	bl	80041f6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ed0:	e00a      	b.n	8003ee8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003ed2:	6878      	ldr	r0, [r7, #4]
 8003ed4:	f000 f98f 	bl	80041f6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ed8:	e006      	b.n	8003ee8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003eda:	6878      	ldr	r0, [r7, #4]
 8003edc:	f000 f98b 	bl	80041f6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003ee6:	e175      	b.n	80041d4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ee8:	bf00      	nop
    return;
 8003eea:	e173      	b.n	80041d4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ef0:	2b01      	cmp	r3, #1
 8003ef2:	f040 814f 	bne.w	8004194 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003ef6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003efa:	f003 0310 	and.w	r3, r3, #16
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	f000 8148 	beq.w	8004194 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003f04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f08:	f003 0310 	and.w	r3, r3, #16
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	f000 8141 	beq.w	8004194 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003f12:	2300      	movs	r3, #0
 8003f14:	60bb      	str	r3, [r7, #8]
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	60bb      	str	r3, [r7, #8]
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	60bb      	str	r3, [r7, #8]
 8003f26:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	695b      	ldr	r3, [r3, #20]
 8003f2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	f000 80b6 	beq.w	80040a4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003f44:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	f000 8145 	beq.w	80041d8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003f52:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003f56:	429a      	cmp	r2, r3
 8003f58:	f080 813e 	bcs.w	80041d8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003f62:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f68:	699b      	ldr	r3, [r3, #24]
 8003f6a:	2b20      	cmp	r3, #32
 8003f6c:	f000 8088 	beq.w	8004080 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	330c      	adds	r3, #12
 8003f76:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f7a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003f7e:	e853 3f00 	ldrex	r3, [r3]
 8003f82:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003f86:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003f8a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003f8e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	330c      	adds	r3, #12
 8003f98:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003f9c:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003fa0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fa4:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003fa8:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003fac:	e841 2300 	strex	r3, r2, [r1]
 8003fb0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003fb4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d1d9      	bne.n	8003f70 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	3314      	adds	r3, #20
 8003fc2:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fc4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003fc6:	e853 3f00 	ldrex	r3, [r3]
 8003fca:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003fcc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003fce:	f023 0301 	bic.w	r3, r3, #1
 8003fd2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	3314      	adds	r3, #20
 8003fdc:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003fe0:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003fe4:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fe6:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003fe8:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003fec:	e841 2300 	strex	r3, r2, [r1]
 8003ff0:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003ff2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d1e1      	bne.n	8003fbc <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	3314      	adds	r3, #20
 8003ffe:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004000:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004002:	e853 3f00 	ldrex	r3, [r3]
 8004006:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004008:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800400a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800400e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	3314      	adds	r3, #20
 8004018:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800401c:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800401e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004020:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004022:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004024:	e841 2300 	strex	r3, r2, [r1]
 8004028:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800402a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800402c:	2b00      	cmp	r3, #0
 800402e:	d1e3      	bne.n	8003ff8 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2220      	movs	r2, #32
 8004034:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2200      	movs	r2, #0
 800403c:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	330c      	adds	r3, #12
 8004044:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004046:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004048:	e853 3f00 	ldrex	r3, [r3]
 800404c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800404e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004050:	f023 0310 	bic.w	r3, r3, #16
 8004054:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	330c      	adds	r3, #12
 800405e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004062:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004064:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004066:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004068:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800406a:	e841 2300 	strex	r3, r2, [r1]
 800406e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004070:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004072:	2b00      	cmp	r3, #0
 8004074:	d1e3      	bne.n	800403e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800407a:	4618      	mov	r0, r3
 800407c:	f7fd f9a8 	bl	80013d0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2202      	movs	r2, #2
 8004084:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800408e:	b29b      	uxth	r3, r3
 8004090:	1ad3      	subs	r3, r2, r3
 8004092:	b29b      	uxth	r3, r3
 8004094:	4619      	mov	r1, r3
 8004096:	6878      	ldr	r0, [r7, #4]
 8004098:	f000 f8b6 	bl	8004208 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800409c:	e09c      	b.n	80041d8 <HAL_UART_IRQHandler+0x518>
 800409e:	bf00      	nop
 80040a0:	08004713 	.word	0x08004713
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80040ac:	b29b      	uxth	r3, r3
 80040ae:	1ad3      	subs	r3, r2, r3
 80040b0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80040b8:	b29b      	uxth	r3, r3
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	f000 808e 	beq.w	80041dc <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80040c0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	f000 8089 	beq.w	80041dc <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	330c      	adds	r3, #12
 80040d0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040d4:	e853 3f00 	ldrex	r3, [r3]
 80040d8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80040da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040dc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80040e0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	330c      	adds	r3, #12
 80040ea:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80040ee:	647a      	str	r2, [r7, #68]	@ 0x44
 80040f0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040f2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80040f4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80040f6:	e841 2300 	strex	r3, r2, [r1]
 80040fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80040fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d1e3      	bne.n	80040ca <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	3314      	adds	r3, #20
 8004108:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800410a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800410c:	e853 3f00 	ldrex	r3, [r3]
 8004110:	623b      	str	r3, [r7, #32]
   return(result);
 8004112:	6a3b      	ldr	r3, [r7, #32]
 8004114:	f023 0301 	bic.w	r3, r3, #1
 8004118:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	3314      	adds	r3, #20
 8004122:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004126:	633a      	str	r2, [r7, #48]	@ 0x30
 8004128:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800412a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800412c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800412e:	e841 2300 	strex	r3, r2, [r1]
 8004132:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004134:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004136:	2b00      	cmp	r3, #0
 8004138:	d1e3      	bne.n	8004102 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2220      	movs	r2, #32
 800413e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2200      	movs	r2, #0
 8004146:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	330c      	adds	r3, #12
 800414e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004150:	693b      	ldr	r3, [r7, #16]
 8004152:	e853 3f00 	ldrex	r3, [r3]
 8004156:	60fb      	str	r3, [r7, #12]
   return(result);
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	f023 0310 	bic.w	r3, r3, #16
 800415e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	330c      	adds	r3, #12
 8004168:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800416c:	61fa      	str	r2, [r7, #28]
 800416e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004170:	69b9      	ldr	r1, [r7, #24]
 8004172:	69fa      	ldr	r2, [r7, #28]
 8004174:	e841 2300 	strex	r3, r2, [r1]
 8004178:	617b      	str	r3, [r7, #20]
   return(result);
 800417a:	697b      	ldr	r3, [r7, #20]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d1e3      	bne.n	8004148 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2202      	movs	r2, #2
 8004184:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004186:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800418a:	4619      	mov	r1, r3
 800418c:	6878      	ldr	r0, [r7, #4]
 800418e:	f000 f83b 	bl	8004208 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004192:	e023      	b.n	80041dc <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004194:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004198:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800419c:	2b00      	cmp	r3, #0
 800419e:	d009      	beq.n	80041b4 <HAL_UART_IRQHandler+0x4f4>
 80041a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80041a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d003      	beq.n	80041b4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80041ac:	6878      	ldr	r0, [r7, #4]
 80041ae:	f000 fac4 	bl	800473a <UART_Transmit_IT>
    return;
 80041b2:	e014      	b.n	80041de <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80041b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80041b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d00e      	beq.n	80041de <HAL_UART_IRQHandler+0x51e>
 80041c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80041c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d008      	beq.n	80041de <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80041cc:	6878      	ldr	r0, [r7, #4]
 80041ce:	f000 fb03 	bl	80047d8 <UART_EndTransmit_IT>
    return;
 80041d2:	e004      	b.n	80041de <HAL_UART_IRQHandler+0x51e>
    return;
 80041d4:	bf00      	nop
 80041d6:	e002      	b.n	80041de <HAL_UART_IRQHandler+0x51e>
      return;
 80041d8:	bf00      	nop
 80041da:	e000      	b.n	80041de <HAL_UART_IRQHandler+0x51e>
      return;
 80041dc:	bf00      	nop
  }
}
 80041de:	37e8      	adds	r7, #232	@ 0xe8
 80041e0:	46bd      	mov	sp, r7
 80041e2:	bd80      	pop	{r7, pc}

080041e4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80041e4:	b480      	push	{r7}
 80041e6:	b083      	sub	sp, #12
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80041ec:	bf00      	nop
 80041ee:	370c      	adds	r7, #12
 80041f0:	46bd      	mov	sp, r7
 80041f2:	bc80      	pop	{r7}
 80041f4:	4770      	bx	lr

080041f6 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80041f6:	b480      	push	{r7}
 80041f8:	b083      	sub	sp, #12
 80041fa:	af00      	add	r7, sp, #0
 80041fc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80041fe:	bf00      	nop
 8004200:	370c      	adds	r7, #12
 8004202:	46bd      	mov	sp, r7
 8004204:	bc80      	pop	{r7}
 8004206:	4770      	bx	lr

08004208 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004208:	b480      	push	{r7}
 800420a:	b083      	sub	sp, #12
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
 8004210:	460b      	mov	r3, r1
 8004212:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004214:	bf00      	nop
 8004216:	370c      	adds	r7, #12
 8004218:	46bd      	mov	sp, r7
 800421a:	bc80      	pop	{r7}
 800421c:	4770      	bx	lr

0800421e <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800421e:	b580      	push	{r7, lr}
 8004220:	b09c      	sub	sp, #112	@ 0x70
 8004222:	af00      	add	r7, sp, #0
 8004224:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800422a:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f003 0320 	and.w	r3, r3, #32
 8004236:	2b00      	cmp	r3, #0
 8004238:	d172      	bne.n	8004320 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800423a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800423c:	2200      	movs	r2, #0
 800423e:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004240:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	330c      	adds	r3, #12
 8004246:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004248:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800424a:	e853 3f00 	ldrex	r3, [r3]
 800424e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004250:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004252:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004256:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004258:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	330c      	adds	r3, #12
 800425e:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8004260:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004262:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004264:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004266:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004268:	e841 2300 	strex	r3, r2, [r1]
 800426c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800426e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004270:	2b00      	cmp	r3, #0
 8004272:	d1e5      	bne.n	8004240 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004274:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	3314      	adds	r3, #20
 800427a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800427c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800427e:	e853 3f00 	ldrex	r3, [r3]
 8004282:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004284:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004286:	f023 0301 	bic.w	r3, r3, #1
 800428a:	667b      	str	r3, [r7, #100]	@ 0x64
 800428c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	3314      	adds	r3, #20
 8004292:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8004294:	647a      	str	r2, [r7, #68]	@ 0x44
 8004296:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004298:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800429a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800429c:	e841 2300 	strex	r3, r2, [r1]
 80042a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80042a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d1e5      	bne.n	8004274 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80042a8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	3314      	adds	r3, #20
 80042ae:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042b2:	e853 3f00 	ldrex	r3, [r3]
 80042b6:	623b      	str	r3, [r7, #32]
   return(result);
 80042b8:	6a3b      	ldr	r3, [r7, #32]
 80042ba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80042be:	663b      	str	r3, [r7, #96]	@ 0x60
 80042c0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	3314      	adds	r3, #20
 80042c6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80042c8:	633a      	str	r2, [r7, #48]	@ 0x30
 80042ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042cc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80042ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80042d0:	e841 2300 	strex	r3, r2, [r1]
 80042d4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80042d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d1e5      	bne.n	80042a8 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80042dc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80042de:	2220      	movs	r2, #32
 80042e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042e4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80042e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042e8:	2b01      	cmp	r3, #1
 80042ea:	d119      	bne.n	8004320 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042ec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	330c      	adds	r3, #12
 80042f2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042f4:	693b      	ldr	r3, [r7, #16]
 80042f6:	e853 3f00 	ldrex	r3, [r3]
 80042fa:	60fb      	str	r3, [r7, #12]
   return(result);
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	f023 0310 	bic.w	r3, r3, #16
 8004302:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004304:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	330c      	adds	r3, #12
 800430a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800430c:	61fa      	str	r2, [r7, #28]
 800430e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004310:	69b9      	ldr	r1, [r7, #24]
 8004312:	69fa      	ldr	r2, [r7, #28]
 8004314:	e841 2300 	strex	r3, r2, [r1]
 8004318:	617b      	str	r3, [r7, #20]
   return(result);
 800431a:	697b      	ldr	r3, [r7, #20]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d1e5      	bne.n	80042ec <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004320:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004322:	2200      	movs	r2, #0
 8004324:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004326:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004328:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800432a:	2b01      	cmp	r3, #1
 800432c:	d106      	bne.n	800433c <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800432e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004330:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004332:	4619      	mov	r1, r3
 8004334:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8004336:	f7ff ff67 	bl	8004208 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800433a:	e002      	b.n	8004342 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800433c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800433e:	f7fc fbb7 	bl	8000ab0 <HAL_UART_RxCpltCallback>
}
 8004342:	bf00      	nop
 8004344:	3770      	adds	r7, #112	@ 0x70
 8004346:	46bd      	mov	sp, r7
 8004348:	bd80      	pop	{r7, pc}

0800434a <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800434a:	b580      	push	{r7, lr}
 800434c:	b084      	sub	sp, #16
 800434e:	af00      	add	r7, sp, #0
 8004350:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004356:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	2201      	movs	r2, #1
 800435c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004362:	2b01      	cmp	r3, #1
 8004364:	d108      	bne.n	8004378 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800436a:	085b      	lsrs	r3, r3, #1
 800436c:	b29b      	uxth	r3, r3
 800436e:	4619      	mov	r1, r3
 8004370:	68f8      	ldr	r0, [r7, #12]
 8004372:	f7ff ff49 	bl	8004208 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004376:	e002      	b.n	800437e <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8004378:	68f8      	ldr	r0, [r7, #12]
 800437a:	f7fc fbcd 	bl	8000b18 <HAL_UART_RxHalfCpltCallback>
}
 800437e:	bf00      	nop
 8004380:	3710      	adds	r7, #16
 8004382:	46bd      	mov	sp, r7
 8004384:	bd80      	pop	{r7, pc}

08004386 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004386:	b580      	push	{r7, lr}
 8004388:	b084      	sub	sp, #16
 800438a:	af00      	add	r7, sp, #0
 800438c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800438e:	2300      	movs	r3, #0
 8004390:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004396:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004398:	68bb      	ldr	r3, [r7, #8]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	695b      	ldr	r3, [r3, #20]
 800439e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	bf14      	ite	ne
 80043a6:	2301      	movne	r3, #1
 80043a8:	2300      	moveq	r3, #0
 80043aa:	b2db      	uxtb	r3, r3
 80043ac:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80043ae:	68bb      	ldr	r3, [r7, #8]
 80043b0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80043b4:	b2db      	uxtb	r3, r3
 80043b6:	2b21      	cmp	r3, #33	@ 0x21
 80043b8:	d108      	bne.n	80043cc <UART_DMAError+0x46>
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d005      	beq.n	80043cc <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80043c0:	68bb      	ldr	r3, [r7, #8]
 80043c2:	2200      	movs	r2, #0
 80043c4:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 80043c6:	68b8      	ldr	r0, [r7, #8]
 80043c8:	f000 f91a 	bl	8004600 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80043cc:	68bb      	ldr	r3, [r7, #8]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	695b      	ldr	r3, [r3, #20]
 80043d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	bf14      	ite	ne
 80043da:	2301      	movne	r3, #1
 80043dc:	2300      	moveq	r3, #0
 80043de:	b2db      	uxtb	r3, r3
 80043e0:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80043e2:	68bb      	ldr	r3, [r7, #8]
 80043e4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80043e8:	b2db      	uxtb	r3, r3
 80043ea:	2b22      	cmp	r3, #34	@ 0x22
 80043ec:	d108      	bne.n	8004400 <UART_DMAError+0x7a>
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d005      	beq.n	8004400 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	2200      	movs	r2, #0
 80043f8:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 80043fa:	68b8      	ldr	r0, [r7, #8]
 80043fc:	f000 f927 	bl	800464e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004400:	68bb      	ldr	r3, [r7, #8]
 8004402:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004404:	f043 0210 	orr.w	r2, r3, #16
 8004408:	68bb      	ldr	r3, [r7, #8]
 800440a:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800440c:	68b8      	ldr	r0, [r7, #8]
 800440e:	f7ff fef2 	bl	80041f6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004412:	bf00      	nop
 8004414:	3710      	adds	r7, #16
 8004416:	46bd      	mov	sp, r7
 8004418:	bd80      	pop	{r7, pc}

0800441a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800441a:	b580      	push	{r7, lr}
 800441c:	b086      	sub	sp, #24
 800441e:	af00      	add	r7, sp, #0
 8004420:	60f8      	str	r0, [r7, #12]
 8004422:	60b9      	str	r1, [r7, #8]
 8004424:	603b      	str	r3, [r7, #0]
 8004426:	4613      	mov	r3, r2
 8004428:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800442a:	e03b      	b.n	80044a4 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800442c:	6a3b      	ldr	r3, [r7, #32]
 800442e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004432:	d037      	beq.n	80044a4 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004434:	f7fc fdd6 	bl	8000fe4 <HAL_GetTick>
 8004438:	4602      	mov	r2, r0
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	1ad3      	subs	r3, r2, r3
 800443e:	6a3a      	ldr	r2, [r7, #32]
 8004440:	429a      	cmp	r2, r3
 8004442:	d302      	bcc.n	800444a <UART_WaitOnFlagUntilTimeout+0x30>
 8004444:	6a3b      	ldr	r3, [r7, #32]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d101      	bne.n	800444e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800444a:	2303      	movs	r3, #3
 800444c:	e03a      	b.n	80044c4 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	68db      	ldr	r3, [r3, #12]
 8004454:	f003 0304 	and.w	r3, r3, #4
 8004458:	2b00      	cmp	r3, #0
 800445a:	d023      	beq.n	80044a4 <UART_WaitOnFlagUntilTimeout+0x8a>
 800445c:	68bb      	ldr	r3, [r7, #8]
 800445e:	2b80      	cmp	r3, #128	@ 0x80
 8004460:	d020      	beq.n	80044a4 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004462:	68bb      	ldr	r3, [r7, #8]
 8004464:	2b40      	cmp	r3, #64	@ 0x40
 8004466:	d01d      	beq.n	80044a4 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f003 0308 	and.w	r3, r3, #8
 8004472:	2b08      	cmp	r3, #8
 8004474:	d116      	bne.n	80044a4 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004476:	2300      	movs	r3, #0
 8004478:	617b      	str	r3, [r7, #20]
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	617b      	str	r3, [r7, #20]
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	685b      	ldr	r3, [r3, #4]
 8004488:	617b      	str	r3, [r7, #20]
 800448a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800448c:	68f8      	ldr	r0, [r7, #12]
 800448e:	f000 f8de 	bl	800464e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	2208      	movs	r2, #8
 8004496:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	2200      	movs	r2, #0
 800449c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80044a0:	2301      	movs	r3, #1
 80044a2:	e00f      	b.n	80044c4 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	681a      	ldr	r2, [r3, #0]
 80044aa:	68bb      	ldr	r3, [r7, #8]
 80044ac:	4013      	ands	r3, r2
 80044ae:	68ba      	ldr	r2, [r7, #8]
 80044b0:	429a      	cmp	r2, r3
 80044b2:	bf0c      	ite	eq
 80044b4:	2301      	moveq	r3, #1
 80044b6:	2300      	movne	r3, #0
 80044b8:	b2db      	uxtb	r3, r3
 80044ba:	461a      	mov	r2, r3
 80044bc:	79fb      	ldrb	r3, [r7, #7]
 80044be:	429a      	cmp	r2, r3
 80044c0:	d0b4      	beq.n	800442c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80044c2:	2300      	movs	r3, #0
}
 80044c4:	4618      	mov	r0, r3
 80044c6:	3718      	adds	r7, #24
 80044c8:	46bd      	mov	sp, r7
 80044ca:	bd80      	pop	{r7, pc}

080044cc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b098      	sub	sp, #96	@ 0x60
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	60f8      	str	r0, [r7, #12]
 80044d4:	60b9      	str	r1, [r7, #8]
 80044d6:	4613      	mov	r3, r2
 80044d8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80044da:	68ba      	ldr	r2, [r7, #8]
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	88fa      	ldrh	r2, [r7, #6]
 80044e4:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	2200      	movs	r2, #0
 80044ea:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	2222      	movs	r2, #34	@ 0x22
 80044f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044f8:	4a3e      	ldr	r2, [pc, #248]	@ (80045f4 <UART_Start_Receive_DMA+0x128>)
 80044fa:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004500:	4a3d      	ldr	r2, [pc, #244]	@ (80045f8 <UART_Start_Receive_DMA+0x12c>)
 8004502:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004508:	4a3c      	ldr	r2, [pc, #240]	@ (80045fc <UART_Start_Receive_DMA+0x130>)
 800450a:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004510:	2200      	movs	r2, #0
 8004512:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8004514:	f107 0308 	add.w	r3, r7, #8
 8004518:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	3304      	adds	r3, #4
 8004524:	4619      	mov	r1, r3
 8004526:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004528:	681a      	ldr	r2, [r3, #0]
 800452a:	88fb      	ldrh	r3, [r7, #6]
 800452c:	f7fc fef0 	bl	8001310 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8004530:	2300      	movs	r3, #0
 8004532:	613b      	str	r3, [r7, #16]
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	613b      	str	r3, [r7, #16]
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	685b      	ldr	r3, [r3, #4]
 8004542:	613b      	str	r3, [r7, #16]
 8004544:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	691b      	ldr	r3, [r3, #16]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d019      	beq.n	8004582 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	330c      	adds	r3, #12
 8004554:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004556:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004558:	e853 3f00 	ldrex	r3, [r3]
 800455c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800455e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004560:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004564:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	330c      	adds	r3, #12
 800456c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800456e:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8004570:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004572:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8004574:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004576:	e841 2300 	strex	r3, r2, [r1]
 800457a:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800457c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800457e:	2b00      	cmp	r3, #0
 8004580:	d1e5      	bne.n	800454e <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	3314      	adds	r3, #20
 8004588:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800458a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800458c:	e853 3f00 	ldrex	r3, [r3]
 8004590:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004592:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004594:	f043 0301 	orr.w	r3, r3, #1
 8004598:	657b      	str	r3, [r7, #84]	@ 0x54
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	3314      	adds	r3, #20
 80045a0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80045a2:	63ba      	str	r2, [r7, #56]	@ 0x38
 80045a4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045a6:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80045a8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80045aa:	e841 2300 	strex	r3, r2, [r1]
 80045ae:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80045b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d1e5      	bne.n	8004582 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	3314      	adds	r3, #20
 80045bc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045be:	69bb      	ldr	r3, [r7, #24]
 80045c0:	e853 3f00 	ldrex	r3, [r3]
 80045c4:	617b      	str	r3, [r7, #20]
   return(result);
 80045c6:	697b      	ldr	r3, [r7, #20]
 80045c8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80045cc:	653b      	str	r3, [r7, #80]	@ 0x50
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	3314      	adds	r3, #20
 80045d4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80045d6:	627a      	str	r2, [r7, #36]	@ 0x24
 80045d8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045da:	6a39      	ldr	r1, [r7, #32]
 80045dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80045de:	e841 2300 	strex	r3, r2, [r1]
 80045e2:	61fb      	str	r3, [r7, #28]
   return(result);
 80045e4:	69fb      	ldr	r3, [r7, #28]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d1e5      	bne.n	80045b6 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 80045ea:	2300      	movs	r3, #0
}
 80045ec:	4618      	mov	r0, r3
 80045ee:	3760      	adds	r7, #96	@ 0x60
 80045f0:	46bd      	mov	sp, r7
 80045f2:	bd80      	pop	{r7, pc}
 80045f4:	0800421f 	.word	0x0800421f
 80045f8:	0800434b 	.word	0x0800434b
 80045fc:	08004387 	.word	0x08004387

08004600 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004600:	b480      	push	{r7}
 8004602:	b089      	sub	sp, #36	@ 0x24
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	330c      	adds	r3, #12
 800460e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	e853 3f00 	ldrex	r3, [r3]
 8004616:	60bb      	str	r3, [r7, #8]
   return(result);
 8004618:	68bb      	ldr	r3, [r7, #8]
 800461a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800461e:	61fb      	str	r3, [r7, #28]
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	330c      	adds	r3, #12
 8004626:	69fa      	ldr	r2, [r7, #28]
 8004628:	61ba      	str	r2, [r7, #24]
 800462a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800462c:	6979      	ldr	r1, [r7, #20]
 800462e:	69ba      	ldr	r2, [r7, #24]
 8004630:	e841 2300 	strex	r3, r2, [r1]
 8004634:	613b      	str	r3, [r7, #16]
   return(result);
 8004636:	693b      	ldr	r3, [r7, #16]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d1e5      	bne.n	8004608 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2220      	movs	r2, #32
 8004640:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8004644:	bf00      	nop
 8004646:	3724      	adds	r7, #36	@ 0x24
 8004648:	46bd      	mov	sp, r7
 800464a:	bc80      	pop	{r7}
 800464c:	4770      	bx	lr

0800464e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800464e:	b480      	push	{r7}
 8004650:	b095      	sub	sp, #84	@ 0x54
 8004652:	af00      	add	r7, sp, #0
 8004654:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	330c      	adds	r3, #12
 800465c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800465e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004660:	e853 3f00 	ldrex	r3, [r3]
 8004664:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004666:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004668:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800466c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	330c      	adds	r3, #12
 8004674:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004676:	643a      	str	r2, [r7, #64]	@ 0x40
 8004678:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800467a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800467c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800467e:	e841 2300 	strex	r3, r2, [r1]
 8004682:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004684:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004686:	2b00      	cmp	r3, #0
 8004688:	d1e5      	bne.n	8004656 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	3314      	adds	r3, #20
 8004690:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004692:	6a3b      	ldr	r3, [r7, #32]
 8004694:	e853 3f00 	ldrex	r3, [r3]
 8004698:	61fb      	str	r3, [r7, #28]
   return(result);
 800469a:	69fb      	ldr	r3, [r7, #28]
 800469c:	f023 0301 	bic.w	r3, r3, #1
 80046a0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	3314      	adds	r3, #20
 80046a8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80046aa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80046ac:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046ae:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80046b0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80046b2:	e841 2300 	strex	r3, r2, [r1]
 80046b6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80046b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d1e5      	bne.n	800468a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046c2:	2b01      	cmp	r3, #1
 80046c4:	d119      	bne.n	80046fa <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	330c      	adds	r3, #12
 80046cc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	e853 3f00 	ldrex	r3, [r3]
 80046d4:	60bb      	str	r3, [r7, #8]
   return(result);
 80046d6:	68bb      	ldr	r3, [r7, #8]
 80046d8:	f023 0310 	bic.w	r3, r3, #16
 80046dc:	647b      	str	r3, [r7, #68]	@ 0x44
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	330c      	adds	r3, #12
 80046e4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80046e6:	61ba      	str	r2, [r7, #24]
 80046e8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046ea:	6979      	ldr	r1, [r7, #20]
 80046ec:	69ba      	ldr	r2, [r7, #24]
 80046ee:	e841 2300 	strex	r3, r2, [r1]
 80046f2:	613b      	str	r3, [r7, #16]
   return(result);
 80046f4:	693b      	ldr	r3, [r7, #16]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d1e5      	bne.n	80046c6 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2220      	movs	r2, #32
 80046fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2200      	movs	r2, #0
 8004706:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004708:	bf00      	nop
 800470a:	3754      	adds	r7, #84	@ 0x54
 800470c:	46bd      	mov	sp, r7
 800470e:	bc80      	pop	{r7}
 8004710:	4770      	bx	lr

08004712 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004712:	b580      	push	{r7, lr}
 8004714:	b084      	sub	sp, #16
 8004716:	af00      	add	r7, sp, #0
 8004718:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800471e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	2200      	movs	r2, #0
 8004724:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	2200      	movs	r2, #0
 800472a:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800472c:	68f8      	ldr	r0, [r7, #12]
 800472e:	f7ff fd62 	bl	80041f6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004732:	bf00      	nop
 8004734:	3710      	adds	r7, #16
 8004736:	46bd      	mov	sp, r7
 8004738:	bd80      	pop	{r7, pc}

0800473a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800473a:	b480      	push	{r7}
 800473c:	b085      	sub	sp, #20
 800473e:	af00      	add	r7, sp, #0
 8004740:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004748:	b2db      	uxtb	r3, r3
 800474a:	2b21      	cmp	r3, #33	@ 0x21
 800474c:	d13e      	bne.n	80047cc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	689b      	ldr	r3, [r3, #8]
 8004752:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004756:	d114      	bne.n	8004782 <UART_Transmit_IT+0x48>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	691b      	ldr	r3, [r3, #16]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d110      	bne.n	8004782 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6a1b      	ldr	r3, [r3, #32]
 8004764:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	881b      	ldrh	r3, [r3, #0]
 800476a:	461a      	mov	r2, r3
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004774:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6a1b      	ldr	r3, [r3, #32]
 800477a:	1c9a      	adds	r2, r3, #2
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	621a      	str	r2, [r3, #32]
 8004780:	e008      	b.n	8004794 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6a1b      	ldr	r3, [r3, #32]
 8004786:	1c59      	adds	r1, r3, #1
 8004788:	687a      	ldr	r2, [r7, #4]
 800478a:	6211      	str	r1, [r2, #32]
 800478c:	781a      	ldrb	r2, [r3, #0]
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004798:	b29b      	uxth	r3, r3
 800479a:	3b01      	subs	r3, #1
 800479c:	b29b      	uxth	r3, r3
 800479e:	687a      	ldr	r2, [r7, #4]
 80047a0:	4619      	mov	r1, r3
 80047a2:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d10f      	bne.n	80047c8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	68da      	ldr	r2, [r3, #12]
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80047b6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	68da      	ldr	r2, [r3, #12]
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80047c6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80047c8:	2300      	movs	r3, #0
 80047ca:	e000      	b.n	80047ce <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80047cc:	2302      	movs	r3, #2
  }
}
 80047ce:	4618      	mov	r0, r3
 80047d0:	3714      	adds	r7, #20
 80047d2:	46bd      	mov	sp, r7
 80047d4:	bc80      	pop	{r7}
 80047d6:	4770      	bx	lr

080047d8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b082      	sub	sp, #8
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	68da      	ldr	r2, [r3, #12]
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80047ee:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2220      	movs	r2, #32
 80047f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80047f8:	6878      	ldr	r0, [r7, #4]
 80047fa:	f7ff fcf3 	bl	80041e4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80047fe:	2300      	movs	r3, #0
}
 8004800:	4618      	mov	r0, r3
 8004802:	3708      	adds	r7, #8
 8004804:	46bd      	mov	sp, r7
 8004806:	bd80      	pop	{r7, pc}

08004808 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b08c      	sub	sp, #48	@ 0x30
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004816:	b2db      	uxtb	r3, r3
 8004818:	2b22      	cmp	r3, #34	@ 0x22
 800481a:	f040 80ae 	bne.w	800497a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	689b      	ldr	r3, [r3, #8]
 8004822:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004826:	d117      	bne.n	8004858 <UART_Receive_IT+0x50>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	691b      	ldr	r3, [r3, #16]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d113      	bne.n	8004858 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004830:	2300      	movs	r3, #0
 8004832:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004838:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	685b      	ldr	r3, [r3, #4]
 8004840:	b29b      	uxth	r3, r3
 8004842:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004846:	b29a      	uxth	r2, r3
 8004848:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800484a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004850:	1c9a      	adds	r2, r3, #2
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	629a      	str	r2, [r3, #40]	@ 0x28
 8004856:	e026      	b.n	80048a6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800485c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800485e:	2300      	movs	r3, #0
 8004860:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	689b      	ldr	r3, [r3, #8]
 8004866:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800486a:	d007      	beq.n	800487c <UART_Receive_IT+0x74>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	689b      	ldr	r3, [r3, #8]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d10a      	bne.n	800488a <UART_Receive_IT+0x82>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	691b      	ldr	r3, [r3, #16]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d106      	bne.n	800488a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	685b      	ldr	r3, [r3, #4]
 8004882:	b2da      	uxtb	r2, r3
 8004884:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004886:	701a      	strb	r2, [r3, #0]
 8004888:	e008      	b.n	800489c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	b2db      	uxtb	r3, r3
 8004892:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004896:	b2da      	uxtb	r2, r3
 8004898:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800489a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048a0:	1c5a      	adds	r2, r3, #1
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80048aa:	b29b      	uxth	r3, r3
 80048ac:	3b01      	subs	r3, #1
 80048ae:	b29b      	uxth	r3, r3
 80048b0:	687a      	ldr	r2, [r7, #4]
 80048b2:	4619      	mov	r1, r3
 80048b4:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d15d      	bne.n	8004976 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	68da      	ldr	r2, [r3, #12]
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f022 0220 	bic.w	r2, r2, #32
 80048c8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	68da      	ldr	r2, [r3, #12]
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80048d8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	695a      	ldr	r2, [r3, #20]
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f022 0201 	bic.w	r2, r2, #1
 80048e8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2220      	movs	r2, #32
 80048ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2200      	movs	r2, #0
 80048f6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048fc:	2b01      	cmp	r3, #1
 80048fe:	d135      	bne.n	800496c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2200      	movs	r2, #0
 8004904:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	330c      	adds	r3, #12
 800490c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800490e:	697b      	ldr	r3, [r7, #20]
 8004910:	e853 3f00 	ldrex	r3, [r3]
 8004914:	613b      	str	r3, [r7, #16]
   return(result);
 8004916:	693b      	ldr	r3, [r7, #16]
 8004918:	f023 0310 	bic.w	r3, r3, #16
 800491c:	627b      	str	r3, [r7, #36]	@ 0x24
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	330c      	adds	r3, #12
 8004924:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004926:	623a      	str	r2, [r7, #32]
 8004928:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800492a:	69f9      	ldr	r1, [r7, #28]
 800492c:	6a3a      	ldr	r2, [r7, #32]
 800492e:	e841 2300 	strex	r3, r2, [r1]
 8004932:	61bb      	str	r3, [r7, #24]
   return(result);
 8004934:	69bb      	ldr	r3, [r7, #24]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d1e5      	bne.n	8004906 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f003 0310 	and.w	r3, r3, #16
 8004944:	2b10      	cmp	r3, #16
 8004946:	d10a      	bne.n	800495e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004948:	2300      	movs	r3, #0
 800494a:	60fb      	str	r3, [r7, #12]
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	60fb      	str	r3, [r7, #12]
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	685b      	ldr	r3, [r3, #4]
 800495a:	60fb      	str	r3, [r7, #12]
 800495c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004962:	4619      	mov	r1, r3
 8004964:	6878      	ldr	r0, [r7, #4]
 8004966:	f7ff fc4f 	bl	8004208 <HAL_UARTEx_RxEventCallback>
 800496a:	e002      	b.n	8004972 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800496c:	6878      	ldr	r0, [r7, #4]
 800496e:	f7fc f89f 	bl	8000ab0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004972:	2300      	movs	r3, #0
 8004974:	e002      	b.n	800497c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004976:	2300      	movs	r3, #0
 8004978:	e000      	b.n	800497c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800497a:	2302      	movs	r3, #2
  }
}
 800497c:	4618      	mov	r0, r3
 800497e:	3730      	adds	r7, #48	@ 0x30
 8004980:	46bd      	mov	sp, r7
 8004982:	bd80      	pop	{r7, pc}

08004984 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b084      	sub	sp, #16
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	691b      	ldr	r3, [r3, #16]
 8004992:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	68da      	ldr	r2, [r3, #12]
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	430a      	orrs	r2, r1
 80049a0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	689a      	ldr	r2, [r3, #8]
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	691b      	ldr	r3, [r3, #16]
 80049aa:	431a      	orrs	r2, r3
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	695b      	ldr	r3, [r3, #20]
 80049b0:	4313      	orrs	r3, r2
 80049b2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	68db      	ldr	r3, [r3, #12]
 80049ba:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80049be:	f023 030c 	bic.w	r3, r3, #12
 80049c2:	687a      	ldr	r2, [r7, #4]
 80049c4:	6812      	ldr	r2, [r2, #0]
 80049c6:	68b9      	ldr	r1, [r7, #8]
 80049c8:	430b      	orrs	r3, r1
 80049ca:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	695b      	ldr	r3, [r3, #20]
 80049d2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	699a      	ldr	r2, [r3, #24]
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	430a      	orrs	r2, r1
 80049e0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	4a2c      	ldr	r2, [pc, #176]	@ (8004a98 <UART_SetConfig+0x114>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d103      	bne.n	80049f4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80049ec:	f7fe f922 	bl	8002c34 <HAL_RCC_GetPCLK2Freq>
 80049f0:	60f8      	str	r0, [r7, #12]
 80049f2:	e002      	b.n	80049fa <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80049f4:	f7fe f90a 	bl	8002c0c <HAL_RCC_GetPCLK1Freq>
 80049f8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80049fa:	68fa      	ldr	r2, [r7, #12]
 80049fc:	4613      	mov	r3, r2
 80049fe:	009b      	lsls	r3, r3, #2
 8004a00:	4413      	add	r3, r2
 8004a02:	009a      	lsls	r2, r3, #2
 8004a04:	441a      	add	r2, r3
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	685b      	ldr	r3, [r3, #4]
 8004a0a:	009b      	lsls	r3, r3, #2
 8004a0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a10:	4a22      	ldr	r2, [pc, #136]	@ (8004a9c <UART_SetConfig+0x118>)
 8004a12:	fba2 2303 	umull	r2, r3, r2, r3
 8004a16:	095b      	lsrs	r3, r3, #5
 8004a18:	0119      	lsls	r1, r3, #4
 8004a1a:	68fa      	ldr	r2, [r7, #12]
 8004a1c:	4613      	mov	r3, r2
 8004a1e:	009b      	lsls	r3, r3, #2
 8004a20:	4413      	add	r3, r2
 8004a22:	009a      	lsls	r2, r3, #2
 8004a24:	441a      	add	r2, r3
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	685b      	ldr	r3, [r3, #4]
 8004a2a:	009b      	lsls	r3, r3, #2
 8004a2c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004a30:	4b1a      	ldr	r3, [pc, #104]	@ (8004a9c <UART_SetConfig+0x118>)
 8004a32:	fba3 0302 	umull	r0, r3, r3, r2
 8004a36:	095b      	lsrs	r3, r3, #5
 8004a38:	2064      	movs	r0, #100	@ 0x64
 8004a3a:	fb00 f303 	mul.w	r3, r0, r3
 8004a3e:	1ad3      	subs	r3, r2, r3
 8004a40:	011b      	lsls	r3, r3, #4
 8004a42:	3332      	adds	r3, #50	@ 0x32
 8004a44:	4a15      	ldr	r2, [pc, #84]	@ (8004a9c <UART_SetConfig+0x118>)
 8004a46:	fba2 2303 	umull	r2, r3, r2, r3
 8004a4a:	095b      	lsrs	r3, r3, #5
 8004a4c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004a50:	4419      	add	r1, r3
 8004a52:	68fa      	ldr	r2, [r7, #12]
 8004a54:	4613      	mov	r3, r2
 8004a56:	009b      	lsls	r3, r3, #2
 8004a58:	4413      	add	r3, r2
 8004a5a:	009a      	lsls	r2, r3, #2
 8004a5c:	441a      	add	r2, r3
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	685b      	ldr	r3, [r3, #4]
 8004a62:	009b      	lsls	r3, r3, #2
 8004a64:	fbb2 f2f3 	udiv	r2, r2, r3
 8004a68:	4b0c      	ldr	r3, [pc, #48]	@ (8004a9c <UART_SetConfig+0x118>)
 8004a6a:	fba3 0302 	umull	r0, r3, r3, r2
 8004a6e:	095b      	lsrs	r3, r3, #5
 8004a70:	2064      	movs	r0, #100	@ 0x64
 8004a72:	fb00 f303 	mul.w	r3, r0, r3
 8004a76:	1ad3      	subs	r3, r2, r3
 8004a78:	011b      	lsls	r3, r3, #4
 8004a7a:	3332      	adds	r3, #50	@ 0x32
 8004a7c:	4a07      	ldr	r2, [pc, #28]	@ (8004a9c <UART_SetConfig+0x118>)
 8004a7e:	fba2 2303 	umull	r2, r3, r2, r3
 8004a82:	095b      	lsrs	r3, r3, #5
 8004a84:	f003 020f 	and.w	r2, r3, #15
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	440a      	add	r2, r1
 8004a8e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004a90:	bf00      	nop
 8004a92:	3710      	adds	r7, #16
 8004a94:	46bd      	mov	sp, r7
 8004a96:	bd80      	pop	{r7, pc}
 8004a98:	40013800 	.word	0x40013800
 8004a9c:	51eb851f 	.word	0x51eb851f

08004aa0 <std>:
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	b510      	push	{r4, lr}
 8004aa4:	4604      	mov	r4, r0
 8004aa6:	e9c0 3300 	strd	r3, r3, [r0]
 8004aaa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004aae:	6083      	str	r3, [r0, #8]
 8004ab0:	8181      	strh	r1, [r0, #12]
 8004ab2:	6643      	str	r3, [r0, #100]	@ 0x64
 8004ab4:	81c2      	strh	r2, [r0, #14]
 8004ab6:	6183      	str	r3, [r0, #24]
 8004ab8:	4619      	mov	r1, r3
 8004aba:	2208      	movs	r2, #8
 8004abc:	305c      	adds	r0, #92	@ 0x5c
 8004abe:	f000 fa01 	bl	8004ec4 <memset>
 8004ac2:	4b0d      	ldr	r3, [pc, #52]	@ (8004af8 <std+0x58>)
 8004ac4:	6224      	str	r4, [r4, #32]
 8004ac6:	6263      	str	r3, [r4, #36]	@ 0x24
 8004ac8:	4b0c      	ldr	r3, [pc, #48]	@ (8004afc <std+0x5c>)
 8004aca:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004acc:	4b0c      	ldr	r3, [pc, #48]	@ (8004b00 <std+0x60>)
 8004ace:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004ad0:	4b0c      	ldr	r3, [pc, #48]	@ (8004b04 <std+0x64>)
 8004ad2:	6323      	str	r3, [r4, #48]	@ 0x30
 8004ad4:	4b0c      	ldr	r3, [pc, #48]	@ (8004b08 <std+0x68>)
 8004ad6:	429c      	cmp	r4, r3
 8004ad8:	d006      	beq.n	8004ae8 <std+0x48>
 8004ada:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004ade:	4294      	cmp	r4, r2
 8004ae0:	d002      	beq.n	8004ae8 <std+0x48>
 8004ae2:	33d0      	adds	r3, #208	@ 0xd0
 8004ae4:	429c      	cmp	r4, r3
 8004ae6:	d105      	bne.n	8004af4 <std+0x54>
 8004ae8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004aec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004af0:	f000 ba60 	b.w	8004fb4 <__retarget_lock_init_recursive>
 8004af4:	bd10      	pop	{r4, pc}
 8004af6:	bf00      	nop
 8004af8:	08004d15 	.word	0x08004d15
 8004afc:	08004d37 	.word	0x08004d37
 8004b00:	08004d6f 	.word	0x08004d6f
 8004b04:	08004d93 	.word	0x08004d93
 8004b08:	200002c8 	.word	0x200002c8

08004b0c <stdio_exit_handler>:
 8004b0c:	4a02      	ldr	r2, [pc, #8]	@ (8004b18 <stdio_exit_handler+0xc>)
 8004b0e:	4903      	ldr	r1, [pc, #12]	@ (8004b1c <stdio_exit_handler+0x10>)
 8004b10:	4803      	ldr	r0, [pc, #12]	@ (8004b20 <stdio_exit_handler+0x14>)
 8004b12:	f000 b869 	b.w	8004be8 <_fwalk_sglue>
 8004b16:	bf00      	nop
 8004b18:	2000004c 	.word	0x2000004c
 8004b1c:	0800584d 	.word	0x0800584d
 8004b20:	2000005c 	.word	0x2000005c

08004b24 <cleanup_stdio>:
 8004b24:	6841      	ldr	r1, [r0, #4]
 8004b26:	4b0c      	ldr	r3, [pc, #48]	@ (8004b58 <cleanup_stdio+0x34>)
 8004b28:	b510      	push	{r4, lr}
 8004b2a:	4299      	cmp	r1, r3
 8004b2c:	4604      	mov	r4, r0
 8004b2e:	d001      	beq.n	8004b34 <cleanup_stdio+0x10>
 8004b30:	f000 fe8c 	bl	800584c <_fflush_r>
 8004b34:	68a1      	ldr	r1, [r4, #8]
 8004b36:	4b09      	ldr	r3, [pc, #36]	@ (8004b5c <cleanup_stdio+0x38>)
 8004b38:	4299      	cmp	r1, r3
 8004b3a:	d002      	beq.n	8004b42 <cleanup_stdio+0x1e>
 8004b3c:	4620      	mov	r0, r4
 8004b3e:	f000 fe85 	bl	800584c <_fflush_r>
 8004b42:	68e1      	ldr	r1, [r4, #12]
 8004b44:	4b06      	ldr	r3, [pc, #24]	@ (8004b60 <cleanup_stdio+0x3c>)
 8004b46:	4299      	cmp	r1, r3
 8004b48:	d004      	beq.n	8004b54 <cleanup_stdio+0x30>
 8004b4a:	4620      	mov	r0, r4
 8004b4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b50:	f000 be7c 	b.w	800584c <_fflush_r>
 8004b54:	bd10      	pop	{r4, pc}
 8004b56:	bf00      	nop
 8004b58:	200002c8 	.word	0x200002c8
 8004b5c:	20000330 	.word	0x20000330
 8004b60:	20000398 	.word	0x20000398

08004b64 <global_stdio_init.part.0>:
 8004b64:	b510      	push	{r4, lr}
 8004b66:	4b0b      	ldr	r3, [pc, #44]	@ (8004b94 <global_stdio_init.part.0+0x30>)
 8004b68:	4c0b      	ldr	r4, [pc, #44]	@ (8004b98 <global_stdio_init.part.0+0x34>)
 8004b6a:	4a0c      	ldr	r2, [pc, #48]	@ (8004b9c <global_stdio_init.part.0+0x38>)
 8004b6c:	4620      	mov	r0, r4
 8004b6e:	601a      	str	r2, [r3, #0]
 8004b70:	2104      	movs	r1, #4
 8004b72:	2200      	movs	r2, #0
 8004b74:	f7ff ff94 	bl	8004aa0 <std>
 8004b78:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004b7c:	2201      	movs	r2, #1
 8004b7e:	2109      	movs	r1, #9
 8004b80:	f7ff ff8e 	bl	8004aa0 <std>
 8004b84:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004b88:	2202      	movs	r2, #2
 8004b8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b8e:	2112      	movs	r1, #18
 8004b90:	f7ff bf86 	b.w	8004aa0 <std>
 8004b94:	20000400 	.word	0x20000400
 8004b98:	200002c8 	.word	0x200002c8
 8004b9c:	08004b0d 	.word	0x08004b0d

08004ba0 <__sfp_lock_acquire>:
 8004ba0:	4801      	ldr	r0, [pc, #4]	@ (8004ba8 <__sfp_lock_acquire+0x8>)
 8004ba2:	f000 ba08 	b.w	8004fb6 <__retarget_lock_acquire_recursive>
 8004ba6:	bf00      	nop
 8004ba8:	20000409 	.word	0x20000409

08004bac <__sfp_lock_release>:
 8004bac:	4801      	ldr	r0, [pc, #4]	@ (8004bb4 <__sfp_lock_release+0x8>)
 8004bae:	f000 ba03 	b.w	8004fb8 <__retarget_lock_release_recursive>
 8004bb2:	bf00      	nop
 8004bb4:	20000409 	.word	0x20000409

08004bb8 <__sinit>:
 8004bb8:	b510      	push	{r4, lr}
 8004bba:	4604      	mov	r4, r0
 8004bbc:	f7ff fff0 	bl	8004ba0 <__sfp_lock_acquire>
 8004bc0:	6a23      	ldr	r3, [r4, #32]
 8004bc2:	b11b      	cbz	r3, 8004bcc <__sinit+0x14>
 8004bc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004bc8:	f7ff bff0 	b.w	8004bac <__sfp_lock_release>
 8004bcc:	4b04      	ldr	r3, [pc, #16]	@ (8004be0 <__sinit+0x28>)
 8004bce:	6223      	str	r3, [r4, #32]
 8004bd0:	4b04      	ldr	r3, [pc, #16]	@ (8004be4 <__sinit+0x2c>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d1f5      	bne.n	8004bc4 <__sinit+0xc>
 8004bd8:	f7ff ffc4 	bl	8004b64 <global_stdio_init.part.0>
 8004bdc:	e7f2      	b.n	8004bc4 <__sinit+0xc>
 8004bde:	bf00      	nop
 8004be0:	08004b25 	.word	0x08004b25
 8004be4:	20000400 	.word	0x20000400

08004be8 <_fwalk_sglue>:
 8004be8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004bec:	4607      	mov	r7, r0
 8004bee:	4688      	mov	r8, r1
 8004bf0:	4614      	mov	r4, r2
 8004bf2:	2600      	movs	r6, #0
 8004bf4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004bf8:	f1b9 0901 	subs.w	r9, r9, #1
 8004bfc:	d505      	bpl.n	8004c0a <_fwalk_sglue+0x22>
 8004bfe:	6824      	ldr	r4, [r4, #0]
 8004c00:	2c00      	cmp	r4, #0
 8004c02:	d1f7      	bne.n	8004bf4 <_fwalk_sglue+0xc>
 8004c04:	4630      	mov	r0, r6
 8004c06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004c0a:	89ab      	ldrh	r3, [r5, #12]
 8004c0c:	2b01      	cmp	r3, #1
 8004c0e:	d907      	bls.n	8004c20 <_fwalk_sglue+0x38>
 8004c10:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004c14:	3301      	adds	r3, #1
 8004c16:	d003      	beq.n	8004c20 <_fwalk_sglue+0x38>
 8004c18:	4629      	mov	r1, r5
 8004c1a:	4638      	mov	r0, r7
 8004c1c:	47c0      	blx	r8
 8004c1e:	4306      	orrs	r6, r0
 8004c20:	3568      	adds	r5, #104	@ 0x68
 8004c22:	e7e9      	b.n	8004bf8 <_fwalk_sglue+0x10>

08004c24 <iprintf>:
 8004c24:	b40f      	push	{r0, r1, r2, r3}
 8004c26:	b507      	push	{r0, r1, r2, lr}
 8004c28:	4906      	ldr	r1, [pc, #24]	@ (8004c44 <iprintf+0x20>)
 8004c2a:	ab04      	add	r3, sp, #16
 8004c2c:	6808      	ldr	r0, [r1, #0]
 8004c2e:	f853 2b04 	ldr.w	r2, [r3], #4
 8004c32:	6881      	ldr	r1, [r0, #8]
 8004c34:	9301      	str	r3, [sp, #4]
 8004c36:	f000 fadf 	bl	80051f8 <_vfiprintf_r>
 8004c3a:	b003      	add	sp, #12
 8004c3c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004c40:	b004      	add	sp, #16
 8004c42:	4770      	bx	lr
 8004c44:	20000058 	.word	0x20000058

08004c48 <putchar>:
 8004c48:	4b02      	ldr	r3, [pc, #8]	@ (8004c54 <putchar+0xc>)
 8004c4a:	4601      	mov	r1, r0
 8004c4c:	6818      	ldr	r0, [r3, #0]
 8004c4e:	6882      	ldr	r2, [r0, #8]
 8004c50:	f000 be85 	b.w	800595e <_putc_r>
 8004c54:	20000058 	.word	0x20000058

08004c58 <_puts_r>:
 8004c58:	6a03      	ldr	r3, [r0, #32]
 8004c5a:	b570      	push	{r4, r5, r6, lr}
 8004c5c:	4605      	mov	r5, r0
 8004c5e:	460e      	mov	r6, r1
 8004c60:	6884      	ldr	r4, [r0, #8]
 8004c62:	b90b      	cbnz	r3, 8004c68 <_puts_r+0x10>
 8004c64:	f7ff ffa8 	bl	8004bb8 <__sinit>
 8004c68:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004c6a:	07db      	lsls	r3, r3, #31
 8004c6c:	d405      	bmi.n	8004c7a <_puts_r+0x22>
 8004c6e:	89a3      	ldrh	r3, [r4, #12]
 8004c70:	0598      	lsls	r0, r3, #22
 8004c72:	d402      	bmi.n	8004c7a <_puts_r+0x22>
 8004c74:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004c76:	f000 f99e 	bl	8004fb6 <__retarget_lock_acquire_recursive>
 8004c7a:	89a3      	ldrh	r3, [r4, #12]
 8004c7c:	0719      	lsls	r1, r3, #28
 8004c7e:	d502      	bpl.n	8004c86 <_puts_r+0x2e>
 8004c80:	6923      	ldr	r3, [r4, #16]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d135      	bne.n	8004cf2 <_puts_r+0x9a>
 8004c86:	4621      	mov	r1, r4
 8004c88:	4628      	mov	r0, r5
 8004c8a:	f000 f8c5 	bl	8004e18 <__swsetup_r>
 8004c8e:	b380      	cbz	r0, 8004cf2 <_puts_r+0x9a>
 8004c90:	f04f 35ff 	mov.w	r5, #4294967295
 8004c94:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004c96:	07da      	lsls	r2, r3, #31
 8004c98:	d405      	bmi.n	8004ca6 <_puts_r+0x4e>
 8004c9a:	89a3      	ldrh	r3, [r4, #12]
 8004c9c:	059b      	lsls	r3, r3, #22
 8004c9e:	d402      	bmi.n	8004ca6 <_puts_r+0x4e>
 8004ca0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004ca2:	f000 f989 	bl	8004fb8 <__retarget_lock_release_recursive>
 8004ca6:	4628      	mov	r0, r5
 8004ca8:	bd70      	pop	{r4, r5, r6, pc}
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	da04      	bge.n	8004cb8 <_puts_r+0x60>
 8004cae:	69a2      	ldr	r2, [r4, #24]
 8004cb0:	429a      	cmp	r2, r3
 8004cb2:	dc17      	bgt.n	8004ce4 <_puts_r+0x8c>
 8004cb4:	290a      	cmp	r1, #10
 8004cb6:	d015      	beq.n	8004ce4 <_puts_r+0x8c>
 8004cb8:	6823      	ldr	r3, [r4, #0]
 8004cba:	1c5a      	adds	r2, r3, #1
 8004cbc:	6022      	str	r2, [r4, #0]
 8004cbe:	7019      	strb	r1, [r3, #0]
 8004cc0:	68a3      	ldr	r3, [r4, #8]
 8004cc2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004cc6:	3b01      	subs	r3, #1
 8004cc8:	60a3      	str	r3, [r4, #8]
 8004cca:	2900      	cmp	r1, #0
 8004ccc:	d1ed      	bne.n	8004caa <_puts_r+0x52>
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	da11      	bge.n	8004cf6 <_puts_r+0x9e>
 8004cd2:	4622      	mov	r2, r4
 8004cd4:	210a      	movs	r1, #10
 8004cd6:	4628      	mov	r0, r5
 8004cd8:	f000 f85f 	bl	8004d9a <__swbuf_r>
 8004cdc:	3001      	adds	r0, #1
 8004cde:	d0d7      	beq.n	8004c90 <_puts_r+0x38>
 8004ce0:	250a      	movs	r5, #10
 8004ce2:	e7d7      	b.n	8004c94 <_puts_r+0x3c>
 8004ce4:	4622      	mov	r2, r4
 8004ce6:	4628      	mov	r0, r5
 8004ce8:	f000 f857 	bl	8004d9a <__swbuf_r>
 8004cec:	3001      	adds	r0, #1
 8004cee:	d1e7      	bne.n	8004cc0 <_puts_r+0x68>
 8004cf0:	e7ce      	b.n	8004c90 <_puts_r+0x38>
 8004cf2:	3e01      	subs	r6, #1
 8004cf4:	e7e4      	b.n	8004cc0 <_puts_r+0x68>
 8004cf6:	6823      	ldr	r3, [r4, #0]
 8004cf8:	1c5a      	adds	r2, r3, #1
 8004cfa:	6022      	str	r2, [r4, #0]
 8004cfc:	220a      	movs	r2, #10
 8004cfe:	701a      	strb	r2, [r3, #0]
 8004d00:	e7ee      	b.n	8004ce0 <_puts_r+0x88>
	...

08004d04 <puts>:
 8004d04:	4b02      	ldr	r3, [pc, #8]	@ (8004d10 <puts+0xc>)
 8004d06:	4601      	mov	r1, r0
 8004d08:	6818      	ldr	r0, [r3, #0]
 8004d0a:	f7ff bfa5 	b.w	8004c58 <_puts_r>
 8004d0e:	bf00      	nop
 8004d10:	20000058 	.word	0x20000058

08004d14 <__sread>:
 8004d14:	b510      	push	{r4, lr}
 8004d16:	460c      	mov	r4, r1
 8004d18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d1c:	f000 f8fc 	bl	8004f18 <_read_r>
 8004d20:	2800      	cmp	r0, #0
 8004d22:	bfab      	itete	ge
 8004d24:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004d26:	89a3      	ldrhlt	r3, [r4, #12]
 8004d28:	181b      	addge	r3, r3, r0
 8004d2a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004d2e:	bfac      	ite	ge
 8004d30:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004d32:	81a3      	strhlt	r3, [r4, #12]
 8004d34:	bd10      	pop	{r4, pc}

08004d36 <__swrite>:
 8004d36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d3a:	461f      	mov	r7, r3
 8004d3c:	898b      	ldrh	r3, [r1, #12]
 8004d3e:	4605      	mov	r5, r0
 8004d40:	05db      	lsls	r3, r3, #23
 8004d42:	460c      	mov	r4, r1
 8004d44:	4616      	mov	r6, r2
 8004d46:	d505      	bpl.n	8004d54 <__swrite+0x1e>
 8004d48:	2302      	movs	r3, #2
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d50:	f000 f8d0 	bl	8004ef4 <_lseek_r>
 8004d54:	89a3      	ldrh	r3, [r4, #12]
 8004d56:	4632      	mov	r2, r6
 8004d58:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004d5c:	81a3      	strh	r3, [r4, #12]
 8004d5e:	4628      	mov	r0, r5
 8004d60:	463b      	mov	r3, r7
 8004d62:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004d66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004d6a:	f000 b8e7 	b.w	8004f3c <_write_r>

08004d6e <__sseek>:
 8004d6e:	b510      	push	{r4, lr}
 8004d70:	460c      	mov	r4, r1
 8004d72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d76:	f000 f8bd 	bl	8004ef4 <_lseek_r>
 8004d7a:	1c43      	adds	r3, r0, #1
 8004d7c:	89a3      	ldrh	r3, [r4, #12]
 8004d7e:	bf15      	itete	ne
 8004d80:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004d82:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004d86:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004d8a:	81a3      	strheq	r3, [r4, #12]
 8004d8c:	bf18      	it	ne
 8004d8e:	81a3      	strhne	r3, [r4, #12]
 8004d90:	bd10      	pop	{r4, pc}

08004d92 <__sclose>:
 8004d92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d96:	f000 b89d 	b.w	8004ed4 <_close_r>

08004d9a <__swbuf_r>:
 8004d9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d9c:	460e      	mov	r6, r1
 8004d9e:	4614      	mov	r4, r2
 8004da0:	4605      	mov	r5, r0
 8004da2:	b118      	cbz	r0, 8004dac <__swbuf_r+0x12>
 8004da4:	6a03      	ldr	r3, [r0, #32]
 8004da6:	b90b      	cbnz	r3, 8004dac <__swbuf_r+0x12>
 8004da8:	f7ff ff06 	bl	8004bb8 <__sinit>
 8004dac:	69a3      	ldr	r3, [r4, #24]
 8004dae:	60a3      	str	r3, [r4, #8]
 8004db0:	89a3      	ldrh	r3, [r4, #12]
 8004db2:	071a      	lsls	r2, r3, #28
 8004db4:	d501      	bpl.n	8004dba <__swbuf_r+0x20>
 8004db6:	6923      	ldr	r3, [r4, #16]
 8004db8:	b943      	cbnz	r3, 8004dcc <__swbuf_r+0x32>
 8004dba:	4621      	mov	r1, r4
 8004dbc:	4628      	mov	r0, r5
 8004dbe:	f000 f82b 	bl	8004e18 <__swsetup_r>
 8004dc2:	b118      	cbz	r0, 8004dcc <__swbuf_r+0x32>
 8004dc4:	f04f 37ff 	mov.w	r7, #4294967295
 8004dc8:	4638      	mov	r0, r7
 8004dca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004dcc:	6823      	ldr	r3, [r4, #0]
 8004dce:	6922      	ldr	r2, [r4, #16]
 8004dd0:	b2f6      	uxtb	r6, r6
 8004dd2:	1a98      	subs	r0, r3, r2
 8004dd4:	6963      	ldr	r3, [r4, #20]
 8004dd6:	4637      	mov	r7, r6
 8004dd8:	4283      	cmp	r3, r0
 8004dda:	dc05      	bgt.n	8004de8 <__swbuf_r+0x4e>
 8004ddc:	4621      	mov	r1, r4
 8004dde:	4628      	mov	r0, r5
 8004de0:	f000 fd34 	bl	800584c <_fflush_r>
 8004de4:	2800      	cmp	r0, #0
 8004de6:	d1ed      	bne.n	8004dc4 <__swbuf_r+0x2a>
 8004de8:	68a3      	ldr	r3, [r4, #8]
 8004dea:	3b01      	subs	r3, #1
 8004dec:	60a3      	str	r3, [r4, #8]
 8004dee:	6823      	ldr	r3, [r4, #0]
 8004df0:	1c5a      	adds	r2, r3, #1
 8004df2:	6022      	str	r2, [r4, #0]
 8004df4:	701e      	strb	r6, [r3, #0]
 8004df6:	6962      	ldr	r2, [r4, #20]
 8004df8:	1c43      	adds	r3, r0, #1
 8004dfa:	429a      	cmp	r2, r3
 8004dfc:	d004      	beq.n	8004e08 <__swbuf_r+0x6e>
 8004dfe:	89a3      	ldrh	r3, [r4, #12]
 8004e00:	07db      	lsls	r3, r3, #31
 8004e02:	d5e1      	bpl.n	8004dc8 <__swbuf_r+0x2e>
 8004e04:	2e0a      	cmp	r6, #10
 8004e06:	d1df      	bne.n	8004dc8 <__swbuf_r+0x2e>
 8004e08:	4621      	mov	r1, r4
 8004e0a:	4628      	mov	r0, r5
 8004e0c:	f000 fd1e 	bl	800584c <_fflush_r>
 8004e10:	2800      	cmp	r0, #0
 8004e12:	d0d9      	beq.n	8004dc8 <__swbuf_r+0x2e>
 8004e14:	e7d6      	b.n	8004dc4 <__swbuf_r+0x2a>
	...

08004e18 <__swsetup_r>:
 8004e18:	b538      	push	{r3, r4, r5, lr}
 8004e1a:	4b29      	ldr	r3, [pc, #164]	@ (8004ec0 <__swsetup_r+0xa8>)
 8004e1c:	4605      	mov	r5, r0
 8004e1e:	6818      	ldr	r0, [r3, #0]
 8004e20:	460c      	mov	r4, r1
 8004e22:	b118      	cbz	r0, 8004e2c <__swsetup_r+0x14>
 8004e24:	6a03      	ldr	r3, [r0, #32]
 8004e26:	b90b      	cbnz	r3, 8004e2c <__swsetup_r+0x14>
 8004e28:	f7ff fec6 	bl	8004bb8 <__sinit>
 8004e2c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004e30:	0719      	lsls	r1, r3, #28
 8004e32:	d422      	bmi.n	8004e7a <__swsetup_r+0x62>
 8004e34:	06da      	lsls	r2, r3, #27
 8004e36:	d407      	bmi.n	8004e48 <__swsetup_r+0x30>
 8004e38:	2209      	movs	r2, #9
 8004e3a:	602a      	str	r2, [r5, #0]
 8004e3c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004e40:	f04f 30ff 	mov.w	r0, #4294967295
 8004e44:	81a3      	strh	r3, [r4, #12]
 8004e46:	e033      	b.n	8004eb0 <__swsetup_r+0x98>
 8004e48:	0758      	lsls	r0, r3, #29
 8004e4a:	d512      	bpl.n	8004e72 <__swsetup_r+0x5a>
 8004e4c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004e4e:	b141      	cbz	r1, 8004e62 <__swsetup_r+0x4a>
 8004e50:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004e54:	4299      	cmp	r1, r3
 8004e56:	d002      	beq.n	8004e5e <__swsetup_r+0x46>
 8004e58:	4628      	mov	r0, r5
 8004e5a:	f000 f8af 	bl	8004fbc <_free_r>
 8004e5e:	2300      	movs	r3, #0
 8004e60:	6363      	str	r3, [r4, #52]	@ 0x34
 8004e62:	89a3      	ldrh	r3, [r4, #12]
 8004e64:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004e68:	81a3      	strh	r3, [r4, #12]
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	6063      	str	r3, [r4, #4]
 8004e6e:	6923      	ldr	r3, [r4, #16]
 8004e70:	6023      	str	r3, [r4, #0]
 8004e72:	89a3      	ldrh	r3, [r4, #12]
 8004e74:	f043 0308 	orr.w	r3, r3, #8
 8004e78:	81a3      	strh	r3, [r4, #12]
 8004e7a:	6923      	ldr	r3, [r4, #16]
 8004e7c:	b94b      	cbnz	r3, 8004e92 <__swsetup_r+0x7a>
 8004e7e:	89a3      	ldrh	r3, [r4, #12]
 8004e80:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004e84:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004e88:	d003      	beq.n	8004e92 <__swsetup_r+0x7a>
 8004e8a:	4621      	mov	r1, r4
 8004e8c:	4628      	mov	r0, r5
 8004e8e:	f000 fd2a 	bl	80058e6 <__smakebuf_r>
 8004e92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004e96:	f013 0201 	ands.w	r2, r3, #1
 8004e9a:	d00a      	beq.n	8004eb2 <__swsetup_r+0x9a>
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	60a2      	str	r2, [r4, #8]
 8004ea0:	6962      	ldr	r2, [r4, #20]
 8004ea2:	4252      	negs	r2, r2
 8004ea4:	61a2      	str	r2, [r4, #24]
 8004ea6:	6922      	ldr	r2, [r4, #16]
 8004ea8:	b942      	cbnz	r2, 8004ebc <__swsetup_r+0xa4>
 8004eaa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004eae:	d1c5      	bne.n	8004e3c <__swsetup_r+0x24>
 8004eb0:	bd38      	pop	{r3, r4, r5, pc}
 8004eb2:	0799      	lsls	r1, r3, #30
 8004eb4:	bf58      	it	pl
 8004eb6:	6962      	ldrpl	r2, [r4, #20]
 8004eb8:	60a2      	str	r2, [r4, #8]
 8004eba:	e7f4      	b.n	8004ea6 <__swsetup_r+0x8e>
 8004ebc:	2000      	movs	r0, #0
 8004ebe:	e7f7      	b.n	8004eb0 <__swsetup_r+0x98>
 8004ec0:	20000058 	.word	0x20000058

08004ec4 <memset>:
 8004ec4:	4603      	mov	r3, r0
 8004ec6:	4402      	add	r2, r0
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d100      	bne.n	8004ece <memset+0xa>
 8004ecc:	4770      	bx	lr
 8004ece:	f803 1b01 	strb.w	r1, [r3], #1
 8004ed2:	e7f9      	b.n	8004ec8 <memset+0x4>

08004ed4 <_close_r>:
 8004ed4:	b538      	push	{r3, r4, r5, lr}
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	4d05      	ldr	r5, [pc, #20]	@ (8004ef0 <_close_r+0x1c>)
 8004eda:	4604      	mov	r4, r0
 8004edc:	4608      	mov	r0, r1
 8004ede:	602b      	str	r3, [r5, #0]
 8004ee0:	f7fb fedb 	bl	8000c9a <_close>
 8004ee4:	1c43      	adds	r3, r0, #1
 8004ee6:	d102      	bne.n	8004eee <_close_r+0x1a>
 8004ee8:	682b      	ldr	r3, [r5, #0]
 8004eea:	b103      	cbz	r3, 8004eee <_close_r+0x1a>
 8004eec:	6023      	str	r3, [r4, #0]
 8004eee:	bd38      	pop	{r3, r4, r5, pc}
 8004ef0:	20000404 	.word	0x20000404

08004ef4 <_lseek_r>:
 8004ef4:	b538      	push	{r3, r4, r5, lr}
 8004ef6:	4604      	mov	r4, r0
 8004ef8:	4608      	mov	r0, r1
 8004efa:	4611      	mov	r1, r2
 8004efc:	2200      	movs	r2, #0
 8004efe:	4d05      	ldr	r5, [pc, #20]	@ (8004f14 <_lseek_r+0x20>)
 8004f00:	602a      	str	r2, [r5, #0]
 8004f02:	461a      	mov	r2, r3
 8004f04:	f7fb feed 	bl	8000ce2 <_lseek>
 8004f08:	1c43      	adds	r3, r0, #1
 8004f0a:	d102      	bne.n	8004f12 <_lseek_r+0x1e>
 8004f0c:	682b      	ldr	r3, [r5, #0]
 8004f0e:	b103      	cbz	r3, 8004f12 <_lseek_r+0x1e>
 8004f10:	6023      	str	r3, [r4, #0]
 8004f12:	bd38      	pop	{r3, r4, r5, pc}
 8004f14:	20000404 	.word	0x20000404

08004f18 <_read_r>:
 8004f18:	b538      	push	{r3, r4, r5, lr}
 8004f1a:	4604      	mov	r4, r0
 8004f1c:	4608      	mov	r0, r1
 8004f1e:	4611      	mov	r1, r2
 8004f20:	2200      	movs	r2, #0
 8004f22:	4d05      	ldr	r5, [pc, #20]	@ (8004f38 <_read_r+0x20>)
 8004f24:	602a      	str	r2, [r5, #0]
 8004f26:	461a      	mov	r2, r3
 8004f28:	f7fb fe7e 	bl	8000c28 <_read>
 8004f2c:	1c43      	adds	r3, r0, #1
 8004f2e:	d102      	bne.n	8004f36 <_read_r+0x1e>
 8004f30:	682b      	ldr	r3, [r5, #0]
 8004f32:	b103      	cbz	r3, 8004f36 <_read_r+0x1e>
 8004f34:	6023      	str	r3, [r4, #0]
 8004f36:	bd38      	pop	{r3, r4, r5, pc}
 8004f38:	20000404 	.word	0x20000404

08004f3c <_write_r>:
 8004f3c:	b538      	push	{r3, r4, r5, lr}
 8004f3e:	4604      	mov	r4, r0
 8004f40:	4608      	mov	r0, r1
 8004f42:	4611      	mov	r1, r2
 8004f44:	2200      	movs	r2, #0
 8004f46:	4d05      	ldr	r5, [pc, #20]	@ (8004f5c <_write_r+0x20>)
 8004f48:	602a      	str	r2, [r5, #0]
 8004f4a:	461a      	mov	r2, r3
 8004f4c:	f7fb fe89 	bl	8000c62 <_write>
 8004f50:	1c43      	adds	r3, r0, #1
 8004f52:	d102      	bne.n	8004f5a <_write_r+0x1e>
 8004f54:	682b      	ldr	r3, [r5, #0]
 8004f56:	b103      	cbz	r3, 8004f5a <_write_r+0x1e>
 8004f58:	6023      	str	r3, [r4, #0]
 8004f5a:	bd38      	pop	{r3, r4, r5, pc}
 8004f5c:	20000404 	.word	0x20000404

08004f60 <__errno>:
 8004f60:	4b01      	ldr	r3, [pc, #4]	@ (8004f68 <__errno+0x8>)
 8004f62:	6818      	ldr	r0, [r3, #0]
 8004f64:	4770      	bx	lr
 8004f66:	bf00      	nop
 8004f68:	20000058 	.word	0x20000058

08004f6c <__libc_init_array>:
 8004f6c:	b570      	push	{r4, r5, r6, lr}
 8004f6e:	2600      	movs	r6, #0
 8004f70:	4d0c      	ldr	r5, [pc, #48]	@ (8004fa4 <__libc_init_array+0x38>)
 8004f72:	4c0d      	ldr	r4, [pc, #52]	@ (8004fa8 <__libc_init_array+0x3c>)
 8004f74:	1b64      	subs	r4, r4, r5
 8004f76:	10a4      	asrs	r4, r4, #2
 8004f78:	42a6      	cmp	r6, r4
 8004f7a:	d109      	bne.n	8004f90 <__libc_init_array+0x24>
 8004f7c:	f000 fd64 	bl	8005a48 <_init>
 8004f80:	2600      	movs	r6, #0
 8004f82:	4d0a      	ldr	r5, [pc, #40]	@ (8004fac <__libc_init_array+0x40>)
 8004f84:	4c0a      	ldr	r4, [pc, #40]	@ (8004fb0 <__libc_init_array+0x44>)
 8004f86:	1b64      	subs	r4, r4, r5
 8004f88:	10a4      	asrs	r4, r4, #2
 8004f8a:	42a6      	cmp	r6, r4
 8004f8c:	d105      	bne.n	8004f9a <__libc_init_array+0x2e>
 8004f8e:	bd70      	pop	{r4, r5, r6, pc}
 8004f90:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f94:	4798      	blx	r3
 8004f96:	3601      	adds	r6, #1
 8004f98:	e7ee      	b.n	8004f78 <__libc_init_array+0xc>
 8004f9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f9e:	4798      	blx	r3
 8004fa0:	3601      	adds	r6, #1
 8004fa2:	e7f2      	b.n	8004f8a <__libc_init_array+0x1e>
 8004fa4:	08005ba8 	.word	0x08005ba8
 8004fa8:	08005ba8 	.word	0x08005ba8
 8004fac:	08005ba8 	.word	0x08005ba8
 8004fb0:	08005bac 	.word	0x08005bac

08004fb4 <__retarget_lock_init_recursive>:
 8004fb4:	4770      	bx	lr

08004fb6 <__retarget_lock_acquire_recursive>:
 8004fb6:	4770      	bx	lr

08004fb8 <__retarget_lock_release_recursive>:
 8004fb8:	4770      	bx	lr
	...

08004fbc <_free_r>:
 8004fbc:	b538      	push	{r3, r4, r5, lr}
 8004fbe:	4605      	mov	r5, r0
 8004fc0:	2900      	cmp	r1, #0
 8004fc2:	d040      	beq.n	8005046 <_free_r+0x8a>
 8004fc4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004fc8:	1f0c      	subs	r4, r1, #4
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	bfb8      	it	lt
 8004fce:	18e4      	addlt	r4, r4, r3
 8004fd0:	f000 f8de 	bl	8005190 <__malloc_lock>
 8004fd4:	4a1c      	ldr	r2, [pc, #112]	@ (8005048 <_free_r+0x8c>)
 8004fd6:	6813      	ldr	r3, [r2, #0]
 8004fd8:	b933      	cbnz	r3, 8004fe8 <_free_r+0x2c>
 8004fda:	6063      	str	r3, [r4, #4]
 8004fdc:	6014      	str	r4, [r2, #0]
 8004fde:	4628      	mov	r0, r5
 8004fe0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004fe4:	f000 b8da 	b.w	800519c <__malloc_unlock>
 8004fe8:	42a3      	cmp	r3, r4
 8004fea:	d908      	bls.n	8004ffe <_free_r+0x42>
 8004fec:	6820      	ldr	r0, [r4, #0]
 8004fee:	1821      	adds	r1, r4, r0
 8004ff0:	428b      	cmp	r3, r1
 8004ff2:	bf01      	itttt	eq
 8004ff4:	6819      	ldreq	r1, [r3, #0]
 8004ff6:	685b      	ldreq	r3, [r3, #4]
 8004ff8:	1809      	addeq	r1, r1, r0
 8004ffa:	6021      	streq	r1, [r4, #0]
 8004ffc:	e7ed      	b.n	8004fda <_free_r+0x1e>
 8004ffe:	461a      	mov	r2, r3
 8005000:	685b      	ldr	r3, [r3, #4]
 8005002:	b10b      	cbz	r3, 8005008 <_free_r+0x4c>
 8005004:	42a3      	cmp	r3, r4
 8005006:	d9fa      	bls.n	8004ffe <_free_r+0x42>
 8005008:	6811      	ldr	r1, [r2, #0]
 800500a:	1850      	adds	r0, r2, r1
 800500c:	42a0      	cmp	r0, r4
 800500e:	d10b      	bne.n	8005028 <_free_r+0x6c>
 8005010:	6820      	ldr	r0, [r4, #0]
 8005012:	4401      	add	r1, r0
 8005014:	1850      	adds	r0, r2, r1
 8005016:	4283      	cmp	r3, r0
 8005018:	6011      	str	r1, [r2, #0]
 800501a:	d1e0      	bne.n	8004fde <_free_r+0x22>
 800501c:	6818      	ldr	r0, [r3, #0]
 800501e:	685b      	ldr	r3, [r3, #4]
 8005020:	4408      	add	r0, r1
 8005022:	6010      	str	r0, [r2, #0]
 8005024:	6053      	str	r3, [r2, #4]
 8005026:	e7da      	b.n	8004fde <_free_r+0x22>
 8005028:	d902      	bls.n	8005030 <_free_r+0x74>
 800502a:	230c      	movs	r3, #12
 800502c:	602b      	str	r3, [r5, #0]
 800502e:	e7d6      	b.n	8004fde <_free_r+0x22>
 8005030:	6820      	ldr	r0, [r4, #0]
 8005032:	1821      	adds	r1, r4, r0
 8005034:	428b      	cmp	r3, r1
 8005036:	bf01      	itttt	eq
 8005038:	6819      	ldreq	r1, [r3, #0]
 800503a:	685b      	ldreq	r3, [r3, #4]
 800503c:	1809      	addeq	r1, r1, r0
 800503e:	6021      	streq	r1, [r4, #0]
 8005040:	6063      	str	r3, [r4, #4]
 8005042:	6054      	str	r4, [r2, #4]
 8005044:	e7cb      	b.n	8004fde <_free_r+0x22>
 8005046:	bd38      	pop	{r3, r4, r5, pc}
 8005048:	20000410 	.word	0x20000410

0800504c <sbrk_aligned>:
 800504c:	b570      	push	{r4, r5, r6, lr}
 800504e:	4e0f      	ldr	r6, [pc, #60]	@ (800508c <sbrk_aligned+0x40>)
 8005050:	460c      	mov	r4, r1
 8005052:	6831      	ldr	r1, [r6, #0]
 8005054:	4605      	mov	r5, r0
 8005056:	b911      	cbnz	r1, 800505e <sbrk_aligned+0x12>
 8005058:	f000 fcd8 	bl	8005a0c <_sbrk_r>
 800505c:	6030      	str	r0, [r6, #0]
 800505e:	4621      	mov	r1, r4
 8005060:	4628      	mov	r0, r5
 8005062:	f000 fcd3 	bl	8005a0c <_sbrk_r>
 8005066:	1c43      	adds	r3, r0, #1
 8005068:	d103      	bne.n	8005072 <sbrk_aligned+0x26>
 800506a:	f04f 34ff 	mov.w	r4, #4294967295
 800506e:	4620      	mov	r0, r4
 8005070:	bd70      	pop	{r4, r5, r6, pc}
 8005072:	1cc4      	adds	r4, r0, #3
 8005074:	f024 0403 	bic.w	r4, r4, #3
 8005078:	42a0      	cmp	r0, r4
 800507a:	d0f8      	beq.n	800506e <sbrk_aligned+0x22>
 800507c:	1a21      	subs	r1, r4, r0
 800507e:	4628      	mov	r0, r5
 8005080:	f000 fcc4 	bl	8005a0c <_sbrk_r>
 8005084:	3001      	adds	r0, #1
 8005086:	d1f2      	bne.n	800506e <sbrk_aligned+0x22>
 8005088:	e7ef      	b.n	800506a <sbrk_aligned+0x1e>
 800508a:	bf00      	nop
 800508c:	2000040c 	.word	0x2000040c

08005090 <_malloc_r>:
 8005090:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005094:	1ccd      	adds	r5, r1, #3
 8005096:	f025 0503 	bic.w	r5, r5, #3
 800509a:	3508      	adds	r5, #8
 800509c:	2d0c      	cmp	r5, #12
 800509e:	bf38      	it	cc
 80050a0:	250c      	movcc	r5, #12
 80050a2:	2d00      	cmp	r5, #0
 80050a4:	4606      	mov	r6, r0
 80050a6:	db01      	blt.n	80050ac <_malloc_r+0x1c>
 80050a8:	42a9      	cmp	r1, r5
 80050aa:	d904      	bls.n	80050b6 <_malloc_r+0x26>
 80050ac:	230c      	movs	r3, #12
 80050ae:	6033      	str	r3, [r6, #0]
 80050b0:	2000      	movs	r0, #0
 80050b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80050b6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800518c <_malloc_r+0xfc>
 80050ba:	f000 f869 	bl	8005190 <__malloc_lock>
 80050be:	f8d8 3000 	ldr.w	r3, [r8]
 80050c2:	461c      	mov	r4, r3
 80050c4:	bb44      	cbnz	r4, 8005118 <_malloc_r+0x88>
 80050c6:	4629      	mov	r1, r5
 80050c8:	4630      	mov	r0, r6
 80050ca:	f7ff ffbf 	bl	800504c <sbrk_aligned>
 80050ce:	1c43      	adds	r3, r0, #1
 80050d0:	4604      	mov	r4, r0
 80050d2:	d158      	bne.n	8005186 <_malloc_r+0xf6>
 80050d4:	f8d8 4000 	ldr.w	r4, [r8]
 80050d8:	4627      	mov	r7, r4
 80050da:	2f00      	cmp	r7, #0
 80050dc:	d143      	bne.n	8005166 <_malloc_r+0xd6>
 80050de:	2c00      	cmp	r4, #0
 80050e0:	d04b      	beq.n	800517a <_malloc_r+0xea>
 80050e2:	6823      	ldr	r3, [r4, #0]
 80050e4:	4639      	mov	r1, r7
 80050e6:	4630      	mov	r0, r6
 80050e8:	eb04 0903 	add.w	r9, r4, r3
 80050ec:	f000 fc8e 	bl	8005a0c <_sbrk_r>
 80050f0:	4581      	cmp	r9, r0
 80050f2:	d142      	bne.n	800517a <_malloc_r+0xea>
 80050f4:	6821      	ldr	r1, [r4, #0]
 80050f6:	4630      	mov	r0, r6
 80050f8:	1a6d      	subs	r5, r5, r1
 80050fa:	4629      	mov	r1, r5
 80050fc:	f7ff ffa6 	bl	800504c <sbrk_aligned>
 8005100:	3001      	adds	r0, #1
 8005102:	d03a      	beq.n	800517a <_malloc_r+0xea>
 8005104:	6823      	ldr	r3, [r4, #0]
 8005106:	442b      	add	r3, r5
 8005108:	6023      	str	r3, [r4, #0]
 800510a:	f8d8 3000 	ldr.w	r3, [r8]
 800510e:	685a      	ldr	r2, [r3, #4]
 8005110:	bb62      	cbnz	r2, 800516c <_malloc_r+0xdc>
 8005112:	f8c8 7000 	str.w	r7, [r8]
 8005116:	e00f      	b.n	8005138 <_malloc_r+0xa8>
 8005118:	6822      	ldr	r2, [r4, #0]
 800511a:	1b52      	subs	r2, r2, r5
 800511c:	d420      	bmi.n	8005160 <_malloc_r+0xd0>
 800511e:	2a0b      	cmp	r2, #11
 8005120:	d917      	bls.n	8005152 <_malloc_r+0xc2>
 8005122:	1961      	adds	r1, r4, r5
 8005124:	42a3      	cmp	r3, r4
 8005126:	6025      	str	r5, [r4, #0]
 8005128:	bf18      	it	ne
 800512a:	6059      	strne	r1, [r3, #4]
 800512c:	6863      	ldr	r3, [r4, #4]
 800512e:	bf08      	it	eq
 8005130:	f8c8 1000 	streq.w	r1, [r8]
 8005134:	5162      	str	r2, [r4, r5]
 8005136:	604b      	str	r3, [r1, #4]
 8005138:	4630      	mov	r0, r6
 800513a:	f000 f82f 	bl	800519c <__malloc_unlock>
 800513e:	f104 000b 	add.w	r0, r4, #11
 8005142:	1d23      	adds	r3, r4, #4
 8005144:	f020 0007 	bic.w	r0, r0, #7
 8005148:	1ac2      	subs	r2, r0, r3
 800514a:	bf1c      	itt	ne
 800514c:	1a1b      	subne	r3, r3, r0
 800514e:	50a3      	strne	r3, [r4, r2]
 8005150:	e7af      	b.n	80050b2 <_malloc_r+0x22>
 8005152:	6862      	ldr	r2, [r4, #4]
 8005154:	42a3      	cmp	r3, r4
 8005156:	bf0c      	ite	eq
 8005158:	f8c8 2000 	streq.w	r2, [r8]
 800515c:	605a      	strne	r2, [r3, #4]
 800515e:	e7eb      	b.n	8005138 <_malloc_r+0xa8>
 8005160:	4623      	mov	r3, r4
 8005162:	6864      	ldr	r4, [r4, #4]
 8005164:	e7ae      	b.n	80050c4 <_malloc_r+0x34>
 8005166:	463c      	mov	r4, r7
 8005168:	687f      	ldr	r7, [r7, #4]
 800516a:	e7b6      	b.n	80050da <_malloc_r+0x4a>
 800516c:	461a      	mov	r2, r3
 800516e:	685b      	ldr	r3, [r3, #4]
 8005170:	42a3      	cmp	r3, r4
 8005172:	d1fb      	bne.n	800516c <_malloc_r+0xdc>
 8005174:	2300      	movs	r3, #0
 8005176:	6053      	str	r3, [r2, #4]
 8005178:	e7de      	b.n	8005138 <_malloc_r+0xa8>
 800517a:	230c      	movs	r3, #12
 800517c:	4630      	mov	r0, r6
 800517e:	6033      	str	r3, [r6, #0]
 8005180:	f000 f80c 	bl	800519c <__malloc_unlock>
 8005184:	e794      	b.n	80050b0 <_malloc_r+0x20>
 8005186:	6005      	str	r5, [r0, #0]
 8005188:	e7d6      	b.n	8005138 <_malloc_r+0xa8>
 800518a:	bf00      	nop
 800518c:	20000410 	.word	0x20000410

08005190 <__malloc_lock>:
 8005190:	4801      	ldr	r0, [pc, #4]	@ (8005198 <__malloc_lock+0x8>)
 8005192:	f7ff bf10 	b.w	8004fb6 <__retarget_lock_acquire_recursive>
 8005196:	bf00      	nop
 8005198:	20000408 	.word	0x20000408

0800519c <__malloc_unlock>:
 800519c:	4801      	ldr	r0, [pc, #4]	@ (80051a4 <__malloc_unlock+0x8>)
 800519e:	f7ff bf0b 	b.w	8004fb8 <__retarget_lock_release_recursive>
 80051a2:	bf00      	nop
 80051a4:	20000408 	.word	0x20000408

080051a8 <__sfputc_r>:
 80051a8:	6893      	ldr	r3, [r2, #8]
 80051aa:	b410      	push	{r4}
 80051ac:	3b01      	subs	r3, #1
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	6093      	str	r3, [r2, #8]
 80051b2:	da07      	bge.n	80051c4 <__sfputc_r+0x1c>
 80051b4:	6994      	ldr	r4, [r2, #24]
 80051b6:	42a3      	cmp	r3, r4
 80051b8:	db01      	blt.n	80051be <__sfputc_r+0x16>
 80051ba:	290a      	cmp	r1, #10
 80051bc:	d102      	bne.n	80051c4 <__sfputc_r+0x1c>
 80051be:	bc10      	pop	{r4}
 80051c0:	f7ff bdeb 	b.w	8004d9a <__swbuf_r>
 80051c4:	6813      	ldr	r3, [r2, #0]
 80051c6:	1c58      	adds	r0, r3, #1
 80051c8:	6010      	str	r0, [r2, #0]
 80051ca:	7019      	strb	r1, [r3, #0]
 80051cc:	4608      	mov	r0, r1
 80051ce:	bc10      	pop	{r4}
 80051d0:	4770      	bx	lr

080051d2 <__sfputs_r>:
 80051d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051d4:	4606      	mov	r6, r0
 80051d6:	460f      	mov	r7, r1
 80051d8:	4614      	mov	r4, r2
 80051da:	18d5      	adds	r5, r2, r3
 80051dc:	42ac      	cmp	r4, r5
 80051de:	d101      	bne.n	80051e4 <__sfputs_r+0x12>
 80051e0:	2000      	movs	r0, #0
 80051e2:	e007      	b.n	80051f4 <__sfputs_r+0x22>
 80051e4:	463a      	mov	r2, r7
 80051e6:	4630      	mov	r0, r6
 80051e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80051ec:	f7ff ffdc 	bl	80051a8 <__sfputc_r>
 80051f0:	1c43      	adds	r3, r0, #1
 80051f2:	d1f3      	bne.n	80051dc <__sfputs_r+0xa>
 80051f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080051f8 <_vfiprintf_r>:
 80051f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051fc:	460d      	mov	r5, r1
 80051fe:	4614      	mov	r4, r2
 8005200:	4698      	mov	r8, r3
 8005202:	4606      	mov	r6, r0
 8005204:	b09d      	sub	sp, #116	@ 0x74
 8005206:	b118      	cbz	r0, 8005210 <_vfiprintf_r+0x18>
 8005208:	6a03      	ldr	r3, [r0, #32]
 800520a:	b90b      	cbnz	r3, 8005210 <_vfiprintf_r+0x18>
 800520c:	f7ff fcd4 	bl	8004bb8 <__sinit>
 8005210:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005212:	07d9      	lsls	r1, r3, #31
 8005214:	d405      	bmi.n	8005222 <_vfiprintf_r+0x2a>
 8005216:	89ab      	ldrh	r3, [r5, #12]
 8005218:	059a      	lsls	r2, r3, #22
 800521a:	d402      	bmi.n	8005222 <_vfiprintf_r+0x2a>
 800521c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800521e:	f7ff feca 	bl	8004fb6 <__retarget_lock_acquire_recursive>
 8005222:	89ab      	ldrh	r3, [r5, #12]
 8005224:	071b      	lsls	r3, r3, #28
 8005226:	d501      	bpl.n	800522c <_vfiprintf_r+0x34>
 8005228:	692b      	ldr	r3, [r5, #16]
 800522a:	b99b      	cbnz	r3, 8005254 <_vfiprintf_r+0x5c>
 800522c:	4629      	mov	r1, r5
 800522e:	4630      	mov	r0, r6
 8005230:	f7ff fdf2 	bl	8004e18 <__swsetup_r>
 8005234:	b170      	cbz	r0, 8005254 <_vfiprintf_r+0x5c>
 8005236:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005238:	07dc      	lsls	r4, r3, #31
 800523a:	d504      	bpl.n	8005246 <_vfiprintf_r+0x4e>
 800523c:	f04f 30ff 	mov.w	r0, #4294967295
 8005240:	b01d      	add	sp, #116	@ 0x74
 8005242:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005246:	89ab      	ldrh	r3, [r5, #12]
 8005248:	0598      	lsls	r0, r3, #22
 800524a:	d4f7      	bmi.n	800523c <_vfiprintf_r+0x44>
 800524c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800524e:	f7ff feb3 	bl	8004fb8 <__retarget_lock_release_recursive>
 8005252:	e7f3      	b.n	800523c <_vfiprintf_r+0x44>
 8005254:	2300      	movs	r3, #0
 8005256:	9309      	str	r3, [sp, #36]	@ 0x24
 8005258:	2320      	movs	r3, #32
 800525a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800525e:	2330      	movs	r3, #48	@ 0x30
 8005260:	f04f 0901 	mov.w	r9, #1
 8005264:	f8cd 800c 	str.w	r8, [sp, #12]
 8005268:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8005414 <_vfiprintf_r+0x21c>
 800526c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005270:	4623      	mov	r3, r4
 8005272:	469a      	mov	sl, r3
 8005274:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005278:	b10a      	cbz	r2, 800527e <_vfiprintf_r+0x86>
 800527a:	2a25      	cmp	r2, #37	@ 0x25
 800527c:	d1f9      	bne.n	8005272 <_vfiprintf_r+0x7a>
 800527e:	ebba 0b04 	subs.w	fp, sl, r4
 8005282:	d00b      	beq.n	800529c <_vfiprintf_r+0xa4>
 8005284:	465b      	mov	r3, fp
 8005286:	4622      	mov	r2, r4
 8005288:	4629      	mov	r1, r5
 800528a:	4630      	mov	r0, r6
 800528c:	f7ff ffa1 	bl	80051d2 <__sfputs_r>
 8005290:	3001      	adds	r0, #1
 8005292:	f000 80a7 	beq.w	80053e4 <_vfiprintf_r+0x1ec>
 8005296:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005298:	445a      	add	r2, fp
 800529a:	9209      	str	r2, [sp, #36]	@ 0x24
 800529c:	f89a 3000 	ldrb.w	r3, [sl]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	f000 809f 	beq.w	80053e4 <_vfiprintf_r+0x1ec>
 80052a6:	2300      	movs	r3, #0
 80052a8:	f04f 32ff 	mov.w	r2, #4294967295
 80052ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80052b0:	f10a 0a01 	add.w	sl, sl, #1
 80052b4:	9304      	str	r3, [sp, #16]
 80052b6:	9307      	str	r3, [sp, #28]
 80052b8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80052bc:	931a      	str	r3, [sp, #104]	@ 0x68
 80052be:	4654      	mov	r4, sl
 80052c0:	2205      	movs	r2, #5
 80052c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80052c6:	4853      	ldr	r0, [pc, #332]	@ (8005414 <_vfiprintf_r+0x21c>)
 80052c8:	f000 fbb0 	bl	8005a2c <memchr>
 80052cc:	9a04      	ldr	r2, [sp, #16]
 80052ce:	b9d8      	cbnz	r0, 8005308 <_vfiprintf_r+0x110>
 80052d0:	06d1      	lsls	r1, r2, #27
 80052d2:	bf44      	itt	mi
 80052d4:	2320      	movmi	r3, #32
 80052d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80052da:	0713      	lsls	r3, r2, #28
 80052dc:	bf44      	itt	mi
 80052de:	232b      	movmi	r3, #43	@ 0x2b
 80052e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80052e4:	f89a 3000 	ldrb.w	r3, [sl]
 80052e8:	2b2a      	cmp	r3, #42	@ 0x2a
 80052ea:	d015      	beq.n	8005318 <_vfiprintf_r+0x120>
 80052ec:	4654      	mov	r4, sl
 80052ee:	2000      	movs	r0, #0
 80052f0:	f04f 0c0a 	mov.w	ip, #10
 80052f4:	9a07      	ldr	r2, [sp, #28]
 80052f6:	4621      	mov	r1, r4
 80052f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80052fc:	3b30      	subs	r3, #48	@ 0x30
 80052fe:	2b09      	cmp	r3, #9
 8005300:	d94b      	bls.n	800539a <_vfiprintf_r+0x1a2>
 8005302:	b1b0      	cbz	r0, 8005332 <_vfiprintf_r+0x13a>
 8005304:	9207      	str	r2, [sp, #28]
 8005306:	e014      	b.n	8005332 <_vfiprintf_r+0x13a>
 8005308:	eba0 0308 	sub.w	r3, r0, r8
 800530c:	fa09 f303 	lsl.w	r3, r9, r3
 8005310:	4313      	orrs	r3, r2
 8005312:	46a2      	mov	sl, r4
 8005314:	9304      	str	r3, [sp, #16]
 8005316:	e7d2      	b.n	80052be <_vfiprintf_r+0xc6>
 8005318:	9b03      	ldr	r3, [sp, #12]
 800531a:	1d19      	adds	r1, r3, #4
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	9103      	str	r1, [sp, #12]
 8005320:	2b00      	cmp	r3, #0
 8005322:	bfbb      	ittet	lt
 8005324:	425b      	neglt	r3, r3
 8005326:	f042 0202 	orrlt.w	r2, r2, #2
 800532a:	9307      	strge	r3, [sp, #28]
 800532c:	9307      	strlt	r3, [sp, #28]
 800532e:	bfb8      	it	lt
 8005330:	9204      	strlt	r2, [sp, #16]
 8005332:	7823      	ldrb	r3, [r4, #0]
 8005334:	2b2e      	cmp	r3, #46	@ 0x2e
 8005336:	d10a      	bne.n	800534e <_vfiprintf_r+0x156>
 8005338:	7863      	ldrb	r3, [r4, #1]
 800533a:	2b2a      	cmp	r3, #42	@ 0x2a
 800533c:	d132      	bne.n	80053a4 <_vfiprintf_r+0x1ac>
 800533e:	9b03      	ldr	r3, [sp, #12]
 8005340:	3402      	adds	r4, #2
 8005342:	1d1a      	adds	r2, r3, #4
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	9203      	str	r2, [sp, #12]
 8005348:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800534c:	9305      	str	r3, [sp, #20]
 800534e:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8005418 <_vfiprintf_r+0x220>
 8005352:	2203      	movs	r2, #3
 8005354:	4650      	mov	r0, sl
 8005356:	7821      	ldrb	r1, [r4, #0]
 8005358:	f000 fb68 	bl	8005a2c <memchr>
 800535c:	b138      	cbz	r0, 800536e <_vfiprintf_r+0x176>
 800535e:	2240      	movs	r2, #64	@ 0x40
 8005360:	9b04      	ldr	r3, [sp, #16]
 8005362:	eba0 000a 	sub.w	r0, r0, sl
 8005366:	4082      	lsls	r2, r0
 8005368:	4313      	orrs	r3, r2
 800536a:	3401      	adds	r4, #1
 800536c:	9304      	str	r3, [sp, #16]
 800536e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005372:	2206      	movs	r2, #6
 8005374:	4829      	ldr	r0, [pc, #164]	@ (800541c <_vfiprintf_r+0x224>)
 8005376:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800537a:	f000 fb57 	bl	8005a2c <memchr>
 800537e:	2800      	cmp	r0, #0
 8005380:	d03f      	beq.n	8005402 <_vfiprintf_r+0x20a>
 8005382:	4b27      	ldr	r3, [pc, #156]	@ (8005420 <_vfiprintf_r+0x228>)
 8005384:	bb1b      	cbnz	r3, 80053ce <_vfiprintf_r+0x1d6>
 8005386:	9b03      	ldr	r3, [sp, #12]
 8005388:	3307      	adds	r3, #7
 800538a:	f023 0307 	bic.w	r3, r3, #7
 800538e:	3308      	adds	r3, #8
 8005390:	9303      	str	r3, [sp, #12]
 8005392:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005394:	443b      	add	r3, r7
 8005396:	9309      	str	r3, [sp, #36]	@ 0x24
 8005398:	e76a      	b.n	8005270 <_vfiprintf_r+0x78>
 800539a:	460c      	mov	r4, r1
 800539c:	2001      	movs	r0, #1
 800539e:	fb0c 3202 	mla	r2, ip, r2, r3
 80053a2:	e7a8      	b.n	80052f6 <_vfiprintf_r+0xfe>
 80053a4:	2300      	movs	r3, #0
 80053a6:	f04f 0c0a 	mov.w	ip, #10
 80053aa:	4619      	mov	r1, r3
 80053ac:	3401      	adds	r4, #1
 80053ae:	9305      	str	r3, [sp, #20]
 80053b0:	4620      	mov	r0, r4
 80053b2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80053b6:	3a30      	subs	r2, #48	@ 0x30
 80053b8:	2a09      	cmp	r2, #9
 80053ba:	d903      	bls.n	80053c4 <_vfiprintf_r+0x1cc>
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d0c6      	beq.n	800534e <_vfiprintf_r+0x156>
 80053c0:	9105      	str	r1, [sp, #20]
 80053c2:	e7c4      	b.n	800534e <_vfiprintf_r+0x156>
 80053c4:	4604      	mov	r4, r0
 80053c6:	2301      	movs	r3, #1
 80053c8:	fb0c 2101 	mla	r1, ip, r1, r2
 80053cc:	e7f0      	b.n	80053b0 <_vfiprintf_r+0x1b8>
 80053ce:	ab03      	add	r3, sp, #12
 80053d0:	9300      	str	r3, [sp, #0]
 80053d2:	462a      	mov	r2, r5
 80053d4:	4630      	mov	r0, r6
 80053d6:	4b13      	ldr	r3, [pc, #76]	@ (8005424 <_vfiprintf_r+0x22c>)
 80053d8:	a904      	add	r1, sp, #16
 80053da:	f3af 8000 	nop.w
 80053de:	4607      	mov	r7, r0
 80053e0:	1c78      	adds	r0, r7, #1
 80053e2:	d1d6      	bne.n	8005392 <_vfiprintf_r+0x19a>
 80053e4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80053e6:	07d9      	lsls	r1, r3, #31
 80053e8:	d405      	bmi.n	80053f6 <_vfiprintf_r+0x1fe>
 80053ea:	89ab      	ldrh	r3, [r5, #12]
 80053ec:	059a      	lsls	r2, r3, #22
 80053ee:	d402      	bmi.n	80053f6 <_vfiprintf_r+0x1fe>
 80053f0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80053f2:	f7ff fde1 	bl	8004fb8 <__retarget_lock_release_recursive>
 80053f6:	89ab      	ldrh	r3, [r5, #12]
 80053f8:	065b      	lsls	r3, r3, #25
 80053fa:	f53f af1f 	bmi.w	800523c <_vfiprintf_r+0x44>
 80053fe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005400:	e71e      	b.n	8005240 <_vfiprintf_r+0x48>
 8005402:	ab03      	add	r3, sp, #12
 8005404:	9300      	str	r3, [sp, #0]
 8005406:	462a      	mov	r2, r5
 8005408:	4630      	mov	r0, r6
 800540a:	4b06      	ldr	r3, [pc, #24]	@ (8005424 <_vfiprintf_r+0x22c>)
 800540c:	a904      	add	r1, sp, #16
 800540e:	f000 f87d 	bl	800550c <_printf_i>
 8005412:	e7e4      	b.n	80053de <_vfiprintf_r+0x1e6>
 8005414:	08005b72 	.word	0x08005b72
 8005418:	08005b78 	.word	0x08005b78
 800541c:	08005b7c 	.word	0x08005b7c
 8005420:	00000000 	.word	0x00000000
 8005424:	080051d3 	.word	0x080051d3

08005428 <_printf_common>:
 8005428:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800542c:	4616      	mov	r6, r2
 800542e:	4698      	mov	r8, r3
 8005430:	688a      	ldr	r2, [r1, #8]
 8005432:	690b      	ldr	r3, [r1, #16]
 8005434:	4607      	mov	r7, r0
 8005436:	4293      	cmp	r3, r2
 8005438:	bfb8      	it	lt
 800543a:	4613      	movlt	r3, r2
 800543c:	6033      	str	r3, [r6, #0]
 800543e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005442:	460c      	mov	r4, r1
 8005444:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005448:	b10a      	cbz	r2, 800544e <_printf_common+0x26>
 800544a:	3301      	adds	r3, #1
 800544c:	6033      	str	r3, [r6, #0]
 800544e:	6823      	ldr	r3, [r4, #0]
 8005450:	0699      	lsls	r1, r3, #26
 8005452:	bf42      	ittt	mi
 8005454:	6833      	ldrmi	r3, [r6, #0]
 8005456:	3302      	addmi	r3, #2
 8005458:	6033      	strmi	r3, [r6, #0]
 800545a:	6825      	ldr	r5, [r4, #0]
 800545c:	f015 0506 	ands.w	r5, r5, #6
 8005460:	d106      	bne.n	8005470 <_printf_common+0x48>
 8005462:	f104 0a19 	add.w	sl, r4, #25
 8005466:	68e3      	ldr	r3, [r4, #12]
 8005468:	6832      	ldr	r2, [r6, #0]
 800546a:	1a9b      	subs	r3, r3, r2
 800546c:	42ab      	cmp	r3, r5
 800546e:	dc2b      	bgt.n	80054c8 <_printf_common+0xa0>
 8005470:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005474:	6822      	ldr	r2, [r4, #0]
 8005476:	3b00      	subs	r3, #0
 8005478:	bf18      	it	ne
 800547a:	2301      	movne	r3, #1
 800547c:	0692      	lsls	r2, r2, #26
 800547e:	d430      	bmi.n	80054e2 <_printf_common+0xba>
 8005480:	4641      	mov	r1, r8
 8005482:	4638      	mov	r0, r7
 8005484:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005488:	47c8      	blx	r9
 800548a:	3001      	adds	r0, #1
 800548c:	d023      	beq.n	80054d6 <_printf_common+0xae>
 800548e:	6823      	ldr	r3, [r4, #0]
 8005490:	6922      	ldr	r2, [r4, #16]
 8005492:	f003 0306 	and.w	r3, r3, #6
 8005496:	2b04      	cmp	r3, #4
 8005498:	bf14      	ite	ne
 800549a:	2500      	movne	r5, #0
 800549c:	6833      	ldreq	r3, [r6, #0]
 800549e:	f04f 0600 	mov.w	r6, #0
 80054a2:	bf08      	it	eq
 80054a4:	68e5      	ldreq	r5, [r4, #12]
 80054a6:	f104 041a 	add.w	r4, r4, #26
 80054aa:	bf08      	it	eq
 80054ac:	1aed      	subeq	r5, r5, r3
 80054ae:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80054b2:	bf08      	it	eq
 80054b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80054b8:	4293      	cmp	r3, r2
 80054ba:	bfc4      	itt	gt
 80054bc:	1a9b      	subgt	r3, r3, r2
 80054be:	18ed      	addgt	r5, r5, r3
 80054c0:	42b5      	cmp	r5, r6
 80054c2:	d11a      	bne.n	80054fa <_printf_common+0xd2>
 80054c4:	2000      	movs	r0, #0
 80054c6:	e008      	b.n	80054da <_printf_common+0xb2>
 80054c8:	2301      	movs	r3, #1
 80054ca:	4652      	mov	r2, sl
 80054cc:	4641      	mov	r1, r8
 80054ce:	4638      	mov	r0, r7
 80054d0:	47c8      	blx	r9
 80054d2:	3001      	adds	r0, #1
 80054d4:	d103      	bne.n	80054de <_printf_common+0xb6>
 80054d6:	f04f 30ff 	mov.w	r0, #4294967295
 80054da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054de:	3501      	adds	r5, #1
 80054e0:	e7c1      	b.n	8005466 <_printf_common+0x3e>
 80054e2:	2030      	movs	r0, #48	@ 0x30
 80054e4:	18e1      	adds	r1, r4, r3
 80054e6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80054ea:	1c5a      	adds	r2, r3, #1
 80054ec:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80054f0:	4422      	add	r2, r4
 80054f2:	3302      	adds	r3, #2
 80054f4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80054f8:	e7c2      	b.n	8005480 <_printf_common+0x58>
 80054fa:	2301      	movs	r3, #1
 80054fc:	4622      	mov	r2, r4
 80054fe:	4641      	mov	r1, r8
 8005500:	4638      	mov	r0, r7
 8005502:	47c8      	blx	r9
 8005504:	3001      	adds	r0, #1
 8005506:	d0e6      	beq.n	80054d6 <_printf_common+0xae>
 8005508:	3601      	adds	r6, #1
 800550a:	e7d9      	b.n	80054c0 <_printf_common+0x98>

0800550c <_printf_i>:
 800550c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005510:	7e0f      	ldrb	r7, [r1, #24]
 8005512:	4691      	mov	r9, r2
 8005514:	2f78      	cmp	r7, #120	@ 0x78
 8005516:	4680      	mov	r8, r0
 8005518:	460c      	mov	r4, r1
 800551a:	469a      	mov	sl, r3
 800551c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800551e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005522:	d807      	bhi.n	8005534 <_printf_i+0x28>
 8005524:	2f62      	cmp	r7, #98	@ 0x62
 8005526:	d80a      	bhi.n	800553e <_printf_i+0x32>
 8005528:	2f00      	cmp	r7, #0
 800552a:	f000 80d3 	beq.w	80056d4 <_printf_i+0x1c8>
 800552e:	2f58      	cmp	r7, #88	@ 0x58
 8005530:	f000 80ba 	beq.w	80056a8 <_printf_i+0x19c>
 8005534:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005538:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800553c:	e03a      	b.n	80055b4 <_printf_i+0xa8>
 800553e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005542:	2b15      	cmp	r3, #21
 8005544:	d8f6      	bhi.n	8005534 <_printf_i+0x28>
 8005546:	a101      	add	r1, pc, #4	@ (adr r1, 800554c <_printf_i+0x40>)
 8005548:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800554c:	080055a5 	.word	0x080055a5
 8005550:	080055b9 	.word	0x080055b9
 8005554:	08005535 	.word	0x08005535
 8005558:	08005535 	.word	0x08005535
 800555c:	08005535 	.word	0x08005535
 8005560:	08005535 	.word	0x08005535
 8005564:	080055b9 	.word	0x080055b9
 8005568:	08005535 	.word	0x08005535
 800556c:	08005535 	.word	0x08005535
 8005570:	08005535 	.word	0x08005535
 8005574:	08005535 	.word	0x08005535
 8005578:	080056bb 	.word	0x080056bb
 800557c:	080055e3 	.word	0x080055e3
 8005580:	08005675 	.word	0x08005675
 8005584:	08005535 	.word	0x08005535
 8005588:	08005535 	.word	0x08005535
 800558c:	080056dd 	.word	0x080056dd
 8005590:	08005535 	.word	0x08005535
 8005594:	080055e3 	.word	0x080055e3
 8005598:	08005535 	.word	0x08005535
 800559c:	08005535 	.word	0x08005535
 80055a0:	0800567d 	.word	0x0800567d
 80055a4:	6833      	ldr	r3, [r6, #0]
 80055a6:	1d1a      	adds	r2, r3, #4
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	6032      	str	r2, [r6, #0]
 80055ac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80055b0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80055b4:	2301      	movs	r3, #1
 80055b6:	e09e      	b.n	80056f6 <_printf_i+0x1ea>
 80055b8:	6833      	ldr	r3, [r6, #0]
 80055ba:	6820      	ldr	r0, [r4, #0]
 80055bc:	1d19      	adds	r1, r3, #4
 80055be:	6031      	str	r1, [r6, #0]
 80055c0:	0606      	lsls	r6, r0, #24
 80055c2:	d501      	bpl.n	80055c8 <_printf_i+0xbc>
 80055c4:	681d      	ldr	r5, [r3, #0]
 80055c6:	e003      	b.n	80055d0 <_printf_i+0xc4>
 80055c8:	0645      	lsls	r5, r0, #25
 80055ca:	d5fb      	bpl.n	80055c4 <_printf_i+0xb8>
 80055cc:	f9b3 5000 	ldrsh.w	r5, [r3]
 80055d0:	2d00      	cmp	r5, #0
 80055d2:	da03      	bge.n	80055dc <_printf_i+0xd0>
 80055d4:	232d      	movs	r3, #45	@ 0x2d
 80055d6:	426d      	negs	r5, r5
 80055d8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80055dc:	230a      	movs	r3, #10
 80055de:	4859      	ldr	r0, [pc, #356]	@ (8005744 <_printf_i+0x238>)
 80055e0:	e011      	b.n	8005606 <_printf_i+0xfa>
 80055e2:	6821      	ldr	r1, [r4, #0]
 80055e4:	6833      	ldr	r3, [r6, #0]
 80055e6:	0608      	lsls	r0, r1, #24
 80055e8:	f853 5b04 	ldr.w	r5, [r3], #4
 80055ec:	d402      	bmi.n	80055f4 <_printf_i+0xe8>
 80055ee:	0649      	lsls	r1, r1, #25
 80055f0:	bf48      	it	mi
 80055f2:	b2ad      	uxthmi	r5, r5
 80055f4:	2f6f      	cmp	r7, #111	@ 0x6f
 80055f6:	6033      	str	r3, [r6, #0]
 80055f8:	bf14      	ite	ne
 80055fa:	230a      	movne	r3, #10
 80055fc:	2308      	moveq	r3, #8
 80055fe:	4851      	ldr	r0, [pc, #324]	@ (8005744 <_printf_i+0x238>)
 8005600:	2100      	movs	r1, #0
 8005602:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005606:	6866      	ldr	r6, [r4, #4]
 8005608:	2e00      	cmp	r6, #0
 800560a:	bfa8      	it	ge
 800560c:	6821      	ldrge	r1, [r4, #0]
 800560e:	60a6      	str	r6, [r4, #8]
 8005610:	bfa4      	itt	ge
 8005612:	f021 0104 	bicge.w	r1, r1, #4
 8005616:	6021      	strge	r1, [r4, #0]
 8005618:	b90d      	cbnz	r5, 800561e <_printf_i+0x112>
 800561a:	2e00      	cmp	r6, #0
 800561c:	d04b      	beq.n	80056b6 <_printf_i+0x1aa>
 800561e:	4616      	mov	r6, r2
 8005620:	fbb5 f1f3 	udiv	r1, r5, r3
 8005624:	fb03 5711 	mls	r7, r3, r1, r5
 8005628:	5dc7      	ldrb	r7, [r0, r7]
 800562a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800562e:	462f      	mov	r7, r5
 8005630:	42bb      	cmp	r3, r7
 8005632:	460d      	mov	r5, r1
 8005634:	d9f4      	bls.n	8005620 <_printf_i+0x114>
 8005636:	2b08      	cmp	r3, #8
 8005638:	d10b      	bne.n	8005652 <_printf_i+0x146>
 800563a:	6823      	ldr	r3, [r4, #0]
 800563c:	07df      	lsls	r7, r3, #31
 800563e:	d508      	bpl.n	8005652 <_printf_i+0x146>
 8005640:	6923      	ldr	r3, [r4, #16]
 8005642:	6861      	ldr	r1, [r4, #4]
 8005644:	4299      	cmp	r1, r3
 8005646:	bfde      	ittt	le
 8005648:	2330      	movle	r3, #48	@ 0x30
 800564a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800564e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005652:	1b92      	subs	r2, r2, r6
 8005654:	6122      	str	r2, [r4, #16]
 8005656:	464b      	mov	r3, r9
 8005658:	4621      	mov	r1, r4
 800565a:	4640      	mov	r0, r8
 800565c:	f8cd a000 	str.w	sl, [sp]
 8005660:	aa03      	add	r2, sp, #12
 8005662:	f7ff fee1 	bl	8005428 <_printf_common>
 8005666:	3001      	adds	r0, #1
 8005668:	d14a      	bne.n	8005700 <_printf_i+0x1f4>
 800566a:	f04f 30ff 	mov.w	r0, #4294967295
 800566e:	b004      	add	sp, #16
 8005670:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005674:	6823      	ldr	r3, [r4, #0]
 8005676:	f043 0320 	orr.w	r3, r3, #32
 800567a:	6023      	str	r3, [r4, #0]
 800567c:	2778      	movs	r7, #120	@ 0x78
 800567e:	4832      	ldr	r0, [pc, #200]	@ (8005748 <_printf_i+0x23c>)
 8005680:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005684:	6823      	ldr	r3, [r4, #0]
 8005686:	6831      	ldr	r1, [r6, #0]
 8005688:	061f      	lsls	r7, r3, #24
 800568a:	f851 5b04 	ldr.w	r5, [r1], #4
 800568e:	d402      	bmi.n	8005696 <_printf_i+0x18a>
 8005690:	065f      	lsls	r7, r3, #25
 8005692:	bf48      	it	mi
 8005694:	b2ad      	uxthmi	r5, r5
 8005696:	6031      	str	r1, [r6, #0]
 8005698:	07d9      	lsls	r1, r3, #31
 800569a:	bf44      	itt	mi
 800569c:	f043 0320 	orrmi.w	r3, r3, #32
 80056a0:	6023      	strmi	r3, [r4, #0]
 80056a2:	b11d      	cbz	r5, 80056ac <_printf_i+0x1a0>
 80056a4:	2310      	movs	r3, #16
 80056a6:	e7ab      	b.n	8005600 <_printf_i+0xf4>
 80056a8:	4826      	ldr	r0, [pc, #152]	@ (8005744 <_printf_i+0x238>)
 80056aa:	e7e9      	b.n	8005680 <_printf_i+0x174>
 80056ac:	6823      	ldr	r3, [r4, #0]
 80056ae:	f023 0320 	bic.w	r3, r3, #32
 80056b2:	6023      	str	r3, [r4, #0]
 80056b4:	e7f6      	b.n	80056a4 <_printf_i+0x198>
 80056b6:	4616      	mov	r6, r2
 80056b8:	e7bd      	b.n	8005636 <_printf_i+0x12a>
 80056ba:	6833      	ldr	r3, [r6, #0]
 80056bc:	6825      	ldr	r5, [r4, #0]
 80056be:	1d18      	adds	r0, r3, #4
 80056c0:	6961      	ldr	r1, [r4, #20]
 80056c2:	6030      	str	r0, [r6, #0]
 80056c4:	062e      	lsls	r6, r5, #24
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	d501      	bpl.n	80056ce <_printf_i+0x1c2>
 80056ca:	6019      	str	r1, [r3, #0]
 80056cc:	e002      	b.n	80056d4 <_printf_i+0x1c8>
 80056ce:	0668      	lsls	r0, r5, #25
 80056d0:	d5fb      	bpl.n	80056ca <_printf_i+0x1be>
 80056d2:	8019      	strh	r1, [r3, #0]
 80056d4:	2300      	movs	r3, #0
 80056d6:	4616      	mov	r6, r2
 80056d8:	6123      	str	r3, [r4, #16]
 80056da:	e7bc      	b.n	8005656 <_printf_i+0x14a>
 80056dc:	6833      	ldr	r3, [r6, #0]
 80056de:	2100      	movs	r1, #0
 80056e0:	1d1a      	adds	r2, r3, #4
 80056e2:	6032      	str	r2, [r6, #0]
 80056e4:	681e      	ldr	r6, [r3, #0]
 80056e6:	6862      	ldr	r2, [r4, #4]
 80056e8:	4630      	mov	r0, r6
 80056ea:	f000 f99f 	bl	8005a2c <memchr>
 80056ee:	b108      	cbz	r0, 80056f4 <_printf_i+0x1e8>
 80056f0:	1b80      	subs	r0, r0, r6
 80056f2:	6060      	str	r0, [r4, #4]
 80056f4:	6863      	ldr	r3, [r4, #4]
 80056f6:	6123      	str	r3, [r4, #16]
 80056f8:	2300      	movs	r3, #0
 80056fa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80056fe:	e7aa      	b.n	8005656 <_printf_i+0x14a>
 8005700:	4632      	mov	r2, r6
 8005702:	4649      	mov	r1, r9
 8005704:	4640      	mov	r0, r8
 8005706:	6923      	ldr	r3, [r4, #16]
 8005708:	47d0      	blx	sl
 800570a:	3001      	adds	r0, #1
 800570c:	d0ad      	beq.n	800566a <_printf_i+0x15e>
 800570e:	6823      	ldr	r3, [r4, #0]
 8005710:	079b      	lsls	r3, r3, #30
 8005712:	d413      	bmi.n	800573c <_printf_i+0x230>
 8005714:	68e0      	ldr	r0, [r4, #12]
 8005716:	9b03      	ldr	r3, [sp, #12]
 8005718:	4298      	cmp	r0, r3
 800571a:	bfb8      	it	lt
 800571c:	4618      	movlt	r0, r3
 800571e:	e7a6      	b.n	800566e <_printf_i+0x162>
 8005720:	2301      	movs	r3, #1
 8005722:	4632      	mov	r2, r6
 8005724:	4649      	mov	r1, r9
 8005726:	4640      	mov	r0, r8
 8005728:	47d0      	blx	sl
 800572a:	3001      	adds	r0, #1
 800572c:	d09d      	beq.n	800566a <_printf_i+0x15e>
 800572e:	3501      	adds	r5, #1
 8005730:	68e3      	ldr	r3, [r4, #12]
 8005732:	9903      	ldr	r1, [sp, #12]
 8005734:	1a5b      	subs	r3, r3, r1
 8005736:	42ab      	cmp	r3, r5
 8005738:	dcf2      	bgt.n	8005720 <_printf_i+0x214>
 800573a:	e7eb      	b.n	8005714 <_printf_i+0x208>
 800573c:	2500      	movs	r5, #0
 800573e:	f104 0619 	add.w	r6, r4, #25
 8005742:	e7f5      	b.n	8005730 <_printf_i+0x224>
 8005744:	08005b83 	.word	0x08005b83
 8005748:	08005b94 	.word	0x08005b94

0800574c <__sflush_r>:
 800574c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005752:	0716      	lsls	r6, r2, #28
 8005754:	4605      	mov	r5, r0
 8005756:	460c      	mov	r4, r1
 8005758:	d454      	bmi.n	8005804 <__sflush_r+0xb8>
 800575a:	684b      	ldr	r3, [r1, #4]
 800575c:	2b00      	cmp	r3, #0
 800575e:	dc02      	bgt.n	8005766 <__sflush_r+0x1a>
 8005760:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005762:	2b00      	cmp	r3, #0
 8005764:	dd48      	ble.n	80057f8 <__sflush_r+0xac>
 8005766:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005768:	2e00      	cmp	r6, #0
 800576a:	d045      	beq.n	80057f8 <__sflush_r+0xac>
 800576c:	2300      	movs	r3, #0
 800576e:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005772:	682f      	ldr	r7, [r5, #0]
 8005774:	6a21      	ldr	r1, [r4, #32]
 8005776:	602b      	str	r3, [r5, #0]
 8005778:	d030      	beq.n	80057dc <__sflush_r+0x90>
 800577a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800577c:	89a3      	ldrh	r3, [r4, #12]
 800577e:	0759      	lsls	r1, r3, #29
 8005780:	d505      	bpl.n	800578e <__sflush_r+0x42>
 8005782:	6863      	ldr	r3, [r4, #4]
 8005784:	1ad2      	subs	r2, r2, r3
 8005786:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005788:	b10b      	cbz	r3, 800578e <__sflush_r+0x42>
 800578a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800578c:	1ad2      	subs	r2, r2, r3
 800578e:	2300      	movs	r3, #0
 8005790:	4628      	mov	r0, r5
 8005792:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005794:	6a21      	ldr	r1, [r4, #32]
 8005796:	47b0      	blx	r6
 8005798:	1c43      	adds	r3, r0, #1
 800579a:	89a3      	ldrh	r3, [r4, #12]
 800579c:	d106      	bne.n	80057ac <__sflush_r+0x60>
 800579e:	6829      	ldr	r1, [r5, #0]
 80057a0:	291d      	cmp	r1, #29
 80057a2:	d82b      	bhi.n	80057fc <__sflush_r+0xb0>
 80057a4:	4a28      	ldr	r2, [pc, #160]	@ (8005848 <__sflush_r+0xfc>)
 80057a6:	410a      	asrs	r2, r1
 80057a8:	07d6      	lsls	r6, r2, #31
 80057aa:	d427      	bmi.n	80057fc <__sflush_r+0xb0>
 80057ac:	2200      	movs	r2, #0
 80057ae:	6062      	str	r2, [r4, #4]
 80057b0:	6922      	ldr	r2, [r4, #16]
 80057b2:	04d9      	lsls	r1, r3, #19
 80057b4:	6022      	str	r2, [r4, #0]
 80057b6:	d504      	bpl.n	80057c2 <__sflush_r+0x76>
 80057b8:	1c42      	adds	r2, r0, #1
 80057ba:	d101      	bne.n	80057c0 <__sflush_r+0x74>
 80057bc:	682b      	ldr	r3, [r5, #0]
 80057be:	b903      	cbnz	r3, 80057c2 <__sflush_r+0x76>
 80057c0:	6560      	str	r0, [r4, #84]	@ 0x54
 80057c2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80057c4:	602f      	str	r7, [r5, #0]
 80057c6:	b1b9      	cbz	r1, 80057f8 <__sflush_r+0xac>
 80057c8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80057cc:	4299      	cmp	r1, r3
 80057ce:	d002      	beq.n	80057d6 <__sflush_r+0x8a>
 80057d0:	4628      	mov	r0, r5
 80057d2:	f7ff fbf3 	bl	8004fbc <_free_r>
 80057d6:	2300      	movs	r3, #0
 80057d8:	6363      	str	r3, [r4, #52]	@ 0x34
 80057da:	e00d      	b.n	80057f8 <__sflush_r+0xac>
 80057dc:	2301      	movs	r3, #1
 80057de:	4628      	mov	r0, r5
 80057e0:	47b0      	blx	r6
 80057e2:	4602      	mov	r2, r0
 80057e4:	1c50      	adds	r0, r2, #1
 80057e6:	d1c9      	bne.n	800577c <__sflush_r+0x30>
 80057e8:	682b      	ldr	r3, [r5, #0]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d0c6      	beq.n	800577c <__sflush_r+0x30>
 80057ee:	2b1d      	cmp	r3, #29
 80057f0:	d001      	beq.n	80057f6 <__sflush_r+0xaa>
 80057f2:	2b16      	cmp	r3, #22
 80057f4:	d11d      	bne.n	8005832 <__sflush_r+0xe6>
 80057f6:	602f      	str	r7, [r5, #0]
 80057f8:	2000      	movs	r0, #0
 80057fa:	e021      	b.n	8005840 <__sflush_r+0xf4>
 80057fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005800:	b21b      	sxth	r3, r3
 8005802:	e01a      	b.n	800583a <__sflush_r+0xee>
 8005804:	690f      	ldr	r7, [r1, #16]
 8005806:	2f00      	cmp	r7, #0
 8005808:	d0f6      	beq.n	80057f8 <__sflush_r+0xac>
 800580a:	0793      	lsls	r3, r2, #30
 800580c:	bf18      	it	ne
 800580e:	2300      	movne	r3, #0
 8005810:	680e      	ldr	r6, [r1, #0]
 8005812:	bf08      	it	eq
 8005814:	694b      	ldreq	r3, [r1, #20]
 8005816:	1bf6      	subs	r6, r6, r7
 8005818:	600f      	str	r7, [r1, #0]
 800581a:	608b      	str	r3, [r1, #8]
 800581c:	2e00      	cmp	r6, #0
 800581e:	ddeb      	ble.n	80057f8 <__sflush_r+0xac>
 8005820:	4633      	mov	r3, r6
 8005822:	463a      	mov	r2, r7
 8005824:	4628      	mov	r0, r5
 8005826:	6a21      	ldr	r1, [r4, #32]
 8005828:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800582c:	47e0      	blx	ip
 800582e:	2800      	cmp	r0, #0
 8005830:	dc07      	bgt.n	8005842 <__sflush_r+0xf6>
 8005832:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005836:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800583a:	f04f 30ff 	mov.w	r0, #4294967295
 800583e:	81a3      	strh	r3, [r4, #12]
 8005840:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005842:	4407      	add	r7, r0
 8005844:	1a36      	subs	r6, r6, r0
 8005846:	e7e9      	b.n	800581c <__sflush_r+0xd0>
 8005848:	dfbffffe 	.word	0xdfbffffe

0800584c <_fflush_r>:
 800584c:	b538      	push	{r3, r4, r5, lr}
 800584e:	690b      	ldr	r3, [r1, #16]
 8005850:	4605      	mov	r5, r0
 8005852:	460c      	mov	r4, r1
 8005854:	b913      	cbnz	r3, 800585c <_fflush_r+0x10>
 8005856:	2500      	movs	r5, #0
 8005858:	4628      	mov	r0, r5
 800585a:	bd38      	pop	{r3, r4, r5, pc}
 800585c:	b118      	cbz	r0, 8005866 <_fflush_r+0x1a>
 800585e:	6a03      	ldr	r3, [r0, #32]
 8005860:	b90b      	cbnz	r3, 8005866 <_fflush_r+0x1a>
 8005862:	f7ff f9a9 	bl	8004bb8 <__sinit>
 8005866:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d0f3      	beq.n	8005856 <_fflush_r+0xa>
 800586e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005870:	07d0      	lsls	r0, r2, #31
 8005872:	d404      	bmi.n	800587e <_fflush_r+0x32>
 8005874:	0599      	lsls	r1, r3, #22
 8005876:	d402      	bmi.n	800587e <_fflush_r+0x32>
 8005878:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800587a:	f7ff fb9c 	bl	8004fb6 <__retarget_lock_acquire_recursive>
 800587e:	4628      	mov	r0, r5
 8005880:	4621      	mov	r1, r4
 8005882:	f7ff ff63 	bl	800574c <__sflush_r>
 8005886:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005888:	4605      	mov	r5, r0
 800588a:	07da      	lsls	r2, r3, #31
 800588c:	d4e4      	bmi.n	8005858 <_fflush_r+0xc>
 800588e:	89a3      	ldrh	r3, [r4, #12]
 8005890:	059b      	lsls	r3, r3, #22
 8005892:	d4e1      	bmi.n	8005858 <_fflush_r+0xc>
 8005894:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005896:	f7ff fb8f 	bl	8004fb8 <__retarget_lock_release_recursive>
 800589a:	e7dd      	b.n	8005858 <_fflush_r+0xc>

0800589c <__swhatbuf_r>:
 800589c:	b570      	push	{r4, r5, r6, lr}
 800589e:	460c      	mov	r4, r1
 80058a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80058a4:	4615      	mov	r5, r2
 80058a6:	2900      	cmp	r1, #0
 80058a8:	461e      	mov	r6, r3
 80058aa:	b096      	sub	sp, #88	@ 0x58
 80058ac:	da0c      	bge.n	80058c8 <__swhatbuf_r+0x2c>
 80058ae:	89a3      	ldrh	r3, [r4, #12]
 80058b0:	2100      	movs	r1, #0
 80058b2:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80058b6:	bf14      	ite	ne
 80058b8:	2340      	movne	r3, #64	@ 0x40
 80058ba:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80058be:	2000      	movs	r0, #0
 80058c0:	6031      	str	r1, [r6, #0]
 80058c2:	602b      	str	r3, [r5, #0]
 80058c4:	b016      	add	sp, #88	@ 0x58
 80058c6:	bd70      	pop	{r4, r5, r6, pc}
 80058c8:	466a      	mov	r2, sp
 80058ca:	f000 f87d 	bl	80059c8 <_fstat_r>
 80058ce:	2800      	cmp	r0, #0
 80058d0:	dbed      	blt.n	80058ae <__swhatbuf_r+0x12>
 80058d2:	9901      	ldr	r1, [sp, #4]
 80058d4:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80058d8:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80058dc:	4259      	negs	r1, r3
 80058de:	4159      	adcs	r1, r3
 80058e0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80058e4:	e7eb      	b.n	80058be <__swhatbuf_r+0x22>

080058e6 <__smakebuf_r>:
 80058e6:	898b      	ldrh	r3, [r1, #12]
 80058e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80058ea:	079d      	lsls	r5, r3, #30
 80058ec:	4606      	mov	r6, r0
 80058ee:	460c      	mov	r4, r1
 80058f0:	d507      	bpl.n	8005902 <__smakebuf_r+0x1c>
 80058f2:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80058f6:	6023      	str	r3, [r4, #0]
 80058f8:	6123      	str	r3, [r4, #16]
 80058fa:	2301      	movs	r3, #1
 80058fc:	6163      	str	r3, [r4, #20]
 80058fe:	b003      	add	sp, #12
 8005900:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005902:	466a      	mov	r2, sp
 8005904:	ab01      	add	r3, sp, #4
 8005906:	f7ff ffc9 	bl	800589c <__swhatbuf_r>
 800590a:	9f00      	ldr	r7, [sp, #0]
 800590c:	4605      	mov	r5, r0
 800590e:	4639      	mov	r1, r7
 8005910:	4630      	mov	r0, r6
 8005912:	f7ff fbbd 	bl	8005090 <_malloc_r>
 8005916:	b948      	cbnz	r0, 800592c <__smakebuf_r+0x46>
 8005918:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800591c:	059a      	lsls	r2, r3, #22
 800591e:	d4ee      	bmi.n	80058fe <__smakebuf_r+0x18>
 8005920:	f023 0303 	bic.w	r3, r3, #3
 8005924:	f043 0302 	orr.w	r3, r3, #2
 8005928:	81a3      	strh	r3, [r4, #12]
 800592a:	e7e2      	b.n	80058f2 <__smakebuf_r+0xc>
 800592c:	89a3      	ldrh	r3, [r4, #12]
 800592e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005932:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005936:	81a3      	strh	r3, [r4, #12]
 8005938:	9b01      	ldr	r3, [sp, #4]
 800593a:	6020      	str	r0, [r4, #0]
 800593c:	b15b      	cbz	r3, 8005956 <__smakebuf_r+0x70>
 800593e:	4630      	mov	r0, r6
 8005940:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005944:	f000 f852 	bl	80059ec <_isatty_r>
 8005948:	b128      	cbz	r0, 8005956 <__smakebuf_r+0x70>
 800594a:	89a3      	ldrh	r3, [r4, #12]
 800594c:	f023 0303 	bic.w	r3, r3, #3
 8005950:	f043 0301 	orr.w	r3, r3, #1
 8005954:	81a3      	strh	r3, [r4, #12]
 8005956:	89a3      	ldrh	r3, [r4, #12]
 8005958:	431d      	orrs	r5, r3
 800595a:	81a5      	strh	r5, [r4, #12]
 800595c:	e7cf      	b.n	80058fe <__smakebuf_r+0x18>

0800595e <_putc_r>:
 800595e:	b570      	push	{r4, r5, r6, lr}
 8005960:	460d      	mov	r5, r1
 8005962:	4614      	mov	r4, r2
 8005964:	4606      	mov	r6, r0
 8005966:	b118      	cbz	r0, 8005970 <_putc_r+0x12>
 8005968:	6a03      	ldr	r3, [r0, #32]
 800596a:	b90b      	cbnz	r3, 8005970 <_putc_r+0x12>
 800596c:	f7ff f924 	bl	8004bb8 <__sinit>
 8005970:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005972:	07d8      	lsls	r0, r3, #31
 8005974:	d405      	bmi.n	8005982 <_putc_r+0x24>
 8005976:	89a3      	ldrh	r3, [r4, #12]
 8005978:	0599      	lsls	r1, r3, #22
 800597a:	d402      	bmi.n	8005982 <_putc_r+0x24>
 800597c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800597e:	f7ff fb1a 	bl	8004fb6 <__retarget_lock_acquire_recursive>
 8005982:	68a3      	ldr	r3, [r4, #8]
 8005984:	3b01      	subs	r3, #1
 8005986:	2b00      	cmp	r3, #0
 8005988:	60a3      	str	r3, [r4, #8]
 800598a:	da05      	bge.n	8005998 <_putc_r+0x3a>
 800598c:	69a2      	ldr	r2, [r4, #24]
 800598e:	4293      	cmp	r3, r2
 8005990:	db12      	blt.n	80059b8 <_putc_r+0x5a>
 8005992:	b2eb      	uxtb	r3, r5
 8005994:	2b0a      	cmp	r3, #10
 8005996:	d00f      	beq.n	80059b8 <_putc_r+0x5a>
 8005998:	6823      	ldr	r3, [r4, #0]
 800599a:	1c5a      	adds	r2, r3, #1
 800599c:	6022      	str	r2, [r4, #0]
 800599e:	701d      	strb	r5, [r3, #0]
 80059a0:	b2ed      	uxtb	r5, r5
 80059a2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80059a4:	07da      	lsls	r2, r3, #31
 80059a6:	d405      	bmi.n	80059b4 <_putc_r+0x56>
 80059a8:	89a3      	ldrh	r3, [r4, #12]
 80059aa:	059b      	lsls	r3, r3, #22
 80059ac:	d402      	bmi.n	80059b4 <_putc_r+0x56>
 80059ae:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80059b0:	f7ff fb02 	bl	8004fb8 <__retarget_lock_release_recursive>
 80059b4:	4628      	mov	r0, r5
 80059b6:	bd70      	pop	{r4, r5, r6, pc}
 80059b8:	4629      	mov	r1, r5
 80059ba:	4622      	mov	r2, r4
 80059bc:	4630      	mov	r0, r6
 80059be:	f7ff f9ec 	bl	8004d9a <__swbuf_r>
 80059c2:	4605      	mov	r5, r0
 80059c4:	e7ed      	b.n	80059a2 <_putc_r+0x44>
	...

080059c8 <_fstat_r>:
 80059c8:	b538      	push	{r3, r4, r5, lr}
 80059ca:	2300      	movs	r3, #0
 80059cc:	4d06      	ldr	r5, [pc, #24]	@ (80059e8 <_fstat_r+0x20>)
 80059ce:	4604      	mov	r4, r0
 80059d0:	4608      	mov	r0, r1
 80059d2:	4611      	mov	r1, r2
 80059d4:	602b      	str	r3, [r5, #0]
 80059d6:	f7fb f96b 	bl	8000cb0 <_fstat>
 80059da:	1c43      	adds	r3, r0, #1
 80059dc:	d102      	bne.n	80059e4 <_fstat_r+0x1c>
 80059de:	682b      	ldr	r3, [r5, #0]
 80059e0:	b103      	cbz	r3, 80059e4 <_fstat_r+0x1c>
 80059e2:	6023      	str	r3, [r4, #0]
 80059e4:	bd38      	pop	{r3, r4, r5, pc}
 80059e6:	bf00      	nop
 80059e8:	20000404 	.word	0x20000404

080059ec <_isatty_r>:
 80059ec:	b538      	push	{r3, r4, r5, lr}
 80059ee:	2300      	movs	r3, #0
 80059f0:	4d05      	ldr	r5, [pc, #20]	@ (8005a08 <_isatty_r+0x1c>)
 80059f2:	4604      	mov	r4, r0
 80059f4:	4608      	mov	r0, r1
 80059f6:	602b      	str	r3, [r5, #0]
 80059f8:	f7fb f969 	bl	8000cce <_isatty>
 80059fc:	1c43      	adds	r3, r0, #1
 80059fe:	d102      	bne.n	8005a06 <_isatty_r+0x1a>
 8005a00:	682b      	ldr	r3, [r5, #0]
 8005a02:	b103      	cbz	r3, 8005a06 <_isatty_r+0x1a>
 8005a04:	6023      	str	r3, [r4, #0]
 8005a06:	bd38      	pop	{r3, r4, r5, pc}
 8005a08:	20000404 	.word	0x20000404

08005a0c <_sbrk_r>:
 8005a0c:	b538      	push	{r3, r4, r5, lr}
 8005a0e:	2300      	movs	r3, #0
 8005a10:	4d05      	ldr	r5, [pc, #20]	@ (8005a28 <_sbrk_r+0x1c>)
 8005a12:	4604      	mov	r4, r0
 8005a14:	4608      	mov	r0, r1
 8005a16:	602b      	str	r3, [r5, #0]
 8005a18:	f7fb f970 	bl	8000cfc <_sbrk>
 8005a1c:	1c43      	adds	r3, r0, #1
 8005a1e:	d102      	bne.n	8005a26 <_sbrk_r+0x1a>
 8005a20:	682b      	ldr	r3, [r5, #0]
 8005a22:	b103      	cbz	r3, 8005a26 <_sbrk_r+0x1a>
 8005a24:	6023      	str	r3, [r4, #0]
 8005a26:	bd38      	pop	{r3, r4, r5, pc}
 8005a28:	20000404 	.word	0x20000404

08005a2c <memchr>:
 8005a2c:	4603      	mov	r3, r0
 8005a2e:	b510      	push	{r4, lr}
 8005a30:	b2c9      	uxtb	r1, r1
 8005a32:	4402      	add	r2, r0
 8005a34:	4293      	cmp	r3, r2
 8005a36:	4618      	mov	r0, r3
 8005a38:	d101      	bne.n	8005a3e <memchr+0x12>
 8005a3a:	2000      	movs	r0, #0
 8005a3c:	e003      	b.n	8005a46 <memchr+0x1a>
 8005a3e:	7804      	ldrb	r4, [r0, #0]
 8005a40:	3301      	adds	r3, #1
 8005a42:	428c      	cmp	r4, r1
 8005a44:	d1f6      	bne.n	8005a34 <memchr+0x8>
 8005a46:	bd10      	pop	{r4, pc}

08005a48 <_init>:
 8005a48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a4a:	bf00      	nop
 8005a4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a4e:	bc08      	pop	{r3}
 8005a50:	469e      	mov	lr, r3
 8005a52:	4770      	bx	lr

08005a54 <_fini>:
 8005a54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a56:	bf00      	nop
 8005a58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a5a:	bc08      	pop	{r3}
 8005a5c:	469e      	mov	lr, r3
 8005a5e:	4770      	bx	lr
