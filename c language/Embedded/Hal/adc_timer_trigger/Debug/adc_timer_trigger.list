
adc_timer_trigger.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000646c  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003b8  08006580  08006580  00007580  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006938  08006938  000081d4  2**0
                  CONTENTS
  4 .ARM          00000008  08006938  08006938  00007938  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006940  08006940  000081d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006940  08006940  00007940  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006944  08006944  00007944  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08006948  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000230  200001d4  08006b1c  000081d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000404  08006b1c  00008404  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000081d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c699  00000000  00000000  000081fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001dc9  00000000  00000000  00014896  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d40  00000000  00000000  00016660  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a55  00000000  00000000  000173a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018f9a  00000000  00000000  00017df5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f2b0  00000000  00000000  00030d8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090e78  00000000  00000000  0004003f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d0eb7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004920  00000000  00000000  000d0efc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  000d581c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d4 	.word	0x200001d4
 800012c:	00000000 	.word	0x00000000
 8000130:	08006564 	.word	0x08006564

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001d8 	.word	0x200001d8
 800014c:	08006564 	.word	0x08006564

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_frsub>:
 8000a88:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000a8c:	e002      	b.n	8000a94 <__addsf3>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_fsub>:
 8000a90:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000a94 <__addsf3>:
 8000a94:	0042      	lsls	r2, r0, #1
 8000a96:	bf1f      	itttt	ne
 8000a98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a9c:	ea92 0f03 	teqne	r2, r3
 8000aa0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa8:	d06a      	beq.n	8000b80 <__addsf3+0xec>
 8000aaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab2:	bfc1      	itttt	gt
 8000ab4:	18d2      	addgt	r2, r2, r3
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	4048      	eorgt	r0, r1
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	bfb8      	it	lt
 8000abe:	425b      	neglt	r3, r3
 8000ac0:	2b19      	cmp	r3, #25
 8000ac2:	bf88      	it	hi
 8000ac4:	4770      	bxhi	lr
 8000ac6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ace:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000ada:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000ade:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000ae2:	bf18      	it	ne
 8000ae4:	4249      	negne	r1, r1
 8000ae6:	ea92 0f03 	teq	r2, r3
 8000aea:	d03f      	beq.n	8000b6c <__addsf3+0xd8>
 8000aec:	f1a2 0201 	sub.w	r2, r2, #1
 8000af0:	fa41 fc03 	asr.w	ip, r1, r3
 8000af4:	eb10 000c 	adds.w	r0, r0, ip
 8000af8:	f1c3 0320 	rsb	r3, r3, #32
 8000afc:	fa01 f103 	lsl.w	r1, r1, r3
 8000b00:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b04:	d502      	bpl.n	8000b0c <__addsf3+0x78>
 8000b06:	4249      	negs	r1, r1
 8000b08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b0c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000b10:	d313      	bcc.n	8000b3a <__addsf3+0xa6>
 8000b12:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000b16:	d306      	bcc.n	8000b26 <__addsf3+0x92>
 8000b18:	0840      	lsrs	r0, r0, #1
 8000b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1e:	f102 0201 	add.w	r2, r2, #1
 8000b22:	2afe      	cmp	r2, #254	@ 0xfe
 8000b24:	d251      	bcs.n	8000bca <__addsf3+0x136>
 8000b26:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000b2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2e:	bf08      	it	eq
 8000b30:	f020 0001 	biceq.w	r0, r0, #1
 8000b34:	ea40 0003 	orr.w	r0, r0, r3
 8000b38:	4770      	bx	lr
 8000b3a:	0049      	lsls	r1, r1, #1
 8000b3c:	eb40 0000 	adc.w	r0, r0, r0
 8000b40:	3a01      	subs	r2, #1
 8000b42:	bf28      	it	cs
 8000b44:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000b48:	d2ed      	bcs.n	8000b26 <__addsf3+0x92>
 8000b4a:	fab0 fc80 	clz	ip, r0
 8000b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b52:	ebb2 020c 	subs.w	r2, r2, ip
 8000b56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5a:	bfaa      	itet	ge
 8000b5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b60:	4252      	neglt	r2, r2
 8000b62:	4318      	orrge	r0, r3
 8000b64:	bfbc      	itt	lt
 8000b66:	40d0      	lsrlt	r0, r2
 8000b68:	4318      	orrlt	r0, r3
 8000b6a:	4770      	bx	lr
 8000b6c:	f092 0f00 	teq	r2, #0
 8000b70:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000b74:	bf06      	itte	eq
 8000b76:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000b7a:	3201      	addeq	r2, #1
 8000b7c:	3b01      	subne	r3, #1
 8000b7e:	e7b5      	b.n	8000aec <__addsf3+0x58>
 8000b80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	bf18      	it	ne
 8000b8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8e:	d021      	beq.n	8000bd4 <__addsf3+0x140>
 8000b90:	ea92 0f03 	teq	r2, r3
 8000b94:	d004      	beq.n	8000ba0 <__addsf3+0x10c>
 8000b96:	f092 0f00 	teq	r2, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	4608      	moveq	r0, r1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea90 0f01 	teq	r0, r1
 8000ba4:	bf1c      	itt	ne
 8000ba6:	2000      	movne	r0, #0
 8000ba8:	4770      	bxne	lr
 8000baa:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000bae:	d104      	bne.n	8000bba <__addsf3+0x126>
 8000bb0:	0040      	lsls	r0, r0, #1
 8000bb2:	bf28      	it	cs
 8000bb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000bbe:	bf3c      	itt	cc
 8000bc0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000bc4:	4770      	bxcc	lr
 8000bc6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000bca:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000bce:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bd2:	4770      	bx	lr
 8000bd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd8:	bf16      	itet	ne
 8000bda:	4608      	movne	r0, r1
 8000bdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be0:	4601      	movne	r1, r0
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	bf06      	itte	eq
 8000be6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bea:	ea90 0f01 	teqeq	r0, r1
 8000bee:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_ui2f>:
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e004      	b.n	8000c04 <__aeabi_i2f+0x8>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_i2f>:
 8000bfc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000c00:	bf48      	it	mi
 8000c02:	4240      	negmi	r0, r0
 8000c04:	ea5f 0c00 	movs.w	ip, r0
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000c10:	4601      	mov	r1, r0
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	e01c      	b.n	8000c52 <__aeabi_l2f+0x2a>

08000c18 <__aeabi_ul2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e00a      	b.n	8000c3c <__aeabi_l2f+0x14>
 8000c26:	bf00      	nop

08000c28 <__aeabi_l2f>:
 8000c28:	ea50 0201 	orrs.w	r2, r0, r1
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__aeabi_l2f+0x14>
 8000c36:	4240      	negs	r0, r0
 8000c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3c:	ea5f 0c01 	movs.w	ip, r1
 8000c40:	bf02      	ittt	eq
 8000c42:	4684      	moveq	ip, r0
 8000c44:	4601      	moveq	r1, r0
 8000c46:	2000      	moveq	r0, #0
 8000c48:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000c4c:	bf08      	it	eq
 8000c4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000c52:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000c56:	fabc f28c 	clz	r2, ip
 8000c5a:	3a08      	subs	r2, #8
 8000c5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c60:	db10      	blt.n	8000c84 <__aeabi_l2f+0x5c>
 8000c62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c66:	4463      	add	r3, ip
 8000c68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	f020 0001 	biceq.w	r0, r0, #1
 8000c82:	4770      	bx	lr
 8000c84:	f102 0220 	add.w	r2, r2, #32
 8000c88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c94:	fa21 f202 	lsr.w	r2, r1, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca2:	4770      	bx	lr

08000ca4 <__aeabi_fmul>:
 8000ca4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ca8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cac:	bf1e      	ittt	ne
 8000cae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cb2:	ea92 0f0c 	teqne	r2, ip
 8000cb6:	ea93 0f0c 	teqne	r3, ip
 8000cba:	d06f      	beq.n	8000d9c <__aeabi_fmul+0xf8>
 8000cbc:	441a      	add	r2, r3
 8000cbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000cc2:	0240      	lsls	r0, r0, #9
 8000cc4:	bf18      	it	ne
 8000cc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cca:	d01e      	beq.n	8000d0a <__aeabi_fmul+0x66>
 8000ccc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000cd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000cdc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ce0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000ce4:	bf3e      	ittt	cc
 8000ce6:	0049      	lslcc	r1, r1, #1
 8000ce8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cec:	005b      	lslcc	r3, r3, #1
 8000cee:	ea40 0001 	orr.w	r0, r0, r1
 8000cf2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000cf6:	2afd      	cmp	r2, #253	@ 0xfd
 8000cf8:	d81d      	bhi.n	8000d36 <__aeabi_fmul+0x92>
 8000cfa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000cfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d02:	bf08      	it	eq
 8000d04:	f020 0001 	biceq.w	r0, r0, #1
 8000d08:	4770      	bx	lr
 8000d0a:	f090 0f00 	teq	r0, #0
 8000d0e:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000d12:	bf08      	it	eq
 8000d14:	0249      	lsleq	r1, r1, #9
 8000d16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d1e:	3a7f      	subs	r2, #127	@ 0x7f
 8000d20:	bfc2      	ittt	gt
 8000d22:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000d26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d2a:	4770      	bxgt	lr
 8000d2c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	3a01      	subs	r2, #1
 8000d36:	dc5d      	bgt.n	8000df4 <__aeabi_fmul+0x150>
 8000d38:	f112 0f19 	cmn.w	r2, #25
 8000d3c:	bfdc      	itt	le
 8000d3e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000d42:	4770      	bxle	lr
 8000d44:	f1c2 0200 	rsb	r2, r2, #0
 8000d48:	0041      	lsls	r1, r0, #1
 8000d4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d4e:	f1c2 0220 	rsb	r2, r2, #32
 8000d52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d5a:	f140 0000 	adc.w	r0, r0, #0
 8000d5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d62:	bf08      	it	eq
 8000d64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d68:	4770      	bx	lr
 8000d6a:	f092 0f00 	teq	r2, #0
 8000d6e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000d72:	bf02      	ittt	eq
 8000d74:	0040      	lsleq	r0, r0, #1
 8000d76:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000d7a:	3a01      	subeq	r2, #1
 8000d7c:	d0f9      	beq.n	8000d72 <__aeabi_fmul+0xce>
 8000d7e:	ea40 000c 	orr.w	r0, r0, ip
 8000d82:	f093 0f00 	teq	r3, #0
 8000d86:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000d8a:	bf02      	ittt	eq
 8000d8c:	0049      	lsleq	r1, r1, #1
 8000d8e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000d92:	3b01      	subeq	r3, #1
 8000d94:	d0f9      	beq.n	8000d8a <__aeabi_fmul+0xe6>
 8000d96:	ea41 010c 	orr.w	r1, r1, ip
 8000d9a:	e78f      	b.n	8000cbc <__aeabi_fmul+0x18>
 8000d9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000da0:	ea92 0f0c 	teq	r2, ip
 8000da4:	bf18      	it	ne
 8000da6:	ea93 0f0c 	teqne	r3, ip
 8000daa:	d00a      	beq.n	8000dc2 <__aeabi_fmul+0x11e>
 8000dac:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000db0:	bf18      	it	ne
 8000db2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000db6:	d1d8      	bne.n	8000d6a <__aeabi_fmul+0xc6>
 8000db8:	ea80 0001 	eor.w	r0, r0, r1
 8000dbc:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000dc0:	4770      	bx	lr
 8000dc2:	f090 0f00 	teq	r0, #0
 8000dc6:	bf17      	itett	ne
 8000dc8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000dcc:	4608      	moveq	r0, r1
 8000dce:	f091 0f00 	teqne	r1, #0
 8000dd2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000dd6:	d014      	beq.n	8000e02 <__aeabi_fmul+0x15e>
 8000dd8:	ea92 0f0c 	teq	r2, ip
 8000ddc:	d101      	bne.n	8000de2 <__aeabi_fmul+0x13e>
 8000dde:	0242      	lsls	r2, r0, #9
 8000de0:	d10f      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000de2:	ea93 0f0c 	teq	r3, ip
 8000de6:	d103      	bne.n	8000df0 <__aeabi_fmul+0x14c>
 8000de8:	024b      	lsls	r3, r1, #9
 8000dea:	bf18      	it	ne
 8000dec:	4608      	movne	r0, r1
 8000dee:	d108      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000df0:	ea80 0001 	eor.w	r0, r0, r1
 8000df4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000df8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e00:	4770      	bx	lr
 8000e02:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e06:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000e0a:	4770      	bx	lr

08000e0c <__aeabi_fdiv>:
 8000e0c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000e10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e14:	bf1e      	ittt	ne
 8000e16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e1a:	ea92 0f0c 	teqne	r2, ip
 8000e1e:	ea93 0f0c 	teqne	r3, ip
 8000e22:	d069      	beq.n	8000ef8 <__aeabi_fdiv+0xec>
 8000e24:	eba2 0203 	sub.w	r2, r2, r3
 8000e28:	ea80 0c01 	eor.w	ip, r0, r1
 8000e2c:	0249      	lsls	r1, r1, #9
 8000e2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e32:	d037      	beq.n	8000ea4 <__aeabi_fdiv+0x98>
 8000e34:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000e38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e40:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000e44:	428b      	cmp	r3, r1
 8000e46:	bf38      	it	cc
 8000e48:	005b      	lslcc	r3, r3, #1
 8000e4a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000e4e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000e52:	428b      	cmp	r3, r1
 8000e54:	bf24      	itt	cs
 8000e56:	1a5b      	subcs	r3, r3, r1
 8000e58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e60:	bf24      	itt	cs
 8000e62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e6e:	bf24      	itt	cs
 8000e70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e7c:	bf24      	itt	cs
 8000e7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e86:	011b      	lsls	r3, r3, #4
 8000e88:	bf18      	it	ne
 8000e8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e8e:	d1e0      	bne.n	8000e52 <__aeabi_fdiv+0x46>
 8000e90:	2afd      	cmp	r2, #253	@ 0xfd
 8000e92:	f63f af50 	bhi.w	8000d36 <__aeabi_fmul+0x92>
 8000e96:	428b      	cmp	r3, r1
 8000e98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e9c:	bf08      	it	eq
 8000e9e:	f020 0001 	biceq.w	r0, r0, #1
 8000ea2:	4770      	bx	lr
 8000ea4:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000ea8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eac:	327f      	adds	r2, #127	@ 0x7f
 8000eae:	bfc2      	ittt	gt
 8000eb0:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000eb4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eb8:	4770      	bxgt	lr
 8000eba:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ebe:	f04f 0300 	mov.w	r3, #0
 8000ec2:	3a01      	subs	r2, #1
 8000ec4:	e737      	b.n	8000d36 <__aeabi_fmul+0x92>
 8000ec6:	f092 0f00 	teq	r2, #0
 8000eca:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000ece:	bf02      	ittt	eq
 8000ed0:	0040      	lsleq	r0, r0, #1
 8000ed2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000ed6:	3a01      	subeq	r2, #1
 8000ed8:	d0f9      	beq.n	8000ece <__aeabi_fdiv+0xc2>
 8000eda:	ea40 000c 	orr.w	r0, r0, ip
 8000ede:	f093 0f00 	teq	r3, #0
 8000ee2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ee6:	bf02      	ittt	eq
 8000ee8:	0049      	lsleq	r1, r1, #1
 8000eea:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000eee:	3b01      	subeq	r3, #1
 8000ef0:	d0f9      	beq.n	8000ee6 <__aeabi_fdiv+0xda>
 8000ef2:	ea41 010c 	orr.w	r1, r1, ip
 8000ef6:	e795      	b.n	8000e24 <__aeabi_fdiv+0x18>
 8000ef8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000efc:	ea92 0f0c 	teq	r2, ip
 8000f00:	d108      	bne.n	8000f14 <__aeabi_fdiv+0x108>
 8000f02:	0242      	lsls	r2, r0, #9
 8000f04:	f47f af7d 	bne.w	8000e02 <__aeabi_fmul+0x15e>
 8000f08:	ea93 0f0c 	teq	r3, ip
 8000f0c:	f47f af70 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f10:	4608      	mov	r0, r1
 8000f12:	e776      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f14:	ea93 0f0c 	teq	r3, ip
 8000f18:	d104      	bne.n	8000f24 <__aeabi_fdiv+0x118>
 8000f1a:	024b      	lsls	r3, r1, #9
 8000f1c:	f43f af4c 	beq.w	8000db8 <__aeabi_fmul+0x114>
 8000f20:	4608      	mov	r0, r1
 8000f22:	e76e      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f24:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000f28:	bf18      	it	ne
 8000f2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000f2e:	d1ca      	bne.n	8000ec6 <__aeabi_fdiv+0xba>
 8000f30:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000f34:	f47f af5c 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f38:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000f3c:	f47f af3c 	bne.w	8000db8 <__aeabi_fmul+0x114>
 8000f40:	e75f      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f42:	bf00      	nop

08000f44 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b08a      	sub	sp, #40	@ 0x28
 8000f48:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000f4a:	f000 fb5f 	bl	800160c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000f4e:	f000 f849 	bl	8000fe4 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000f52:	f000 f94d 	bl	80011f0 <MX_GPIO_Init>
	MX_ADC1_Init();
 8000f56:	f000 f895 	bl	8001084 <MX_ADC1_Init>
	MX_TIM3_Init();
 8000f5a:	f000 f8d1 	bl	8001100 <MX_TIM3_Init>
	MX_USART1_UART_Init();
 8000f5e:	f000 f91d 	bl	800119c <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start(&htim3);
 8000f62:	481a      	ldr	r0, [pc, #104]	@ (8000fcc <main+0x88>)
 8000f64:	f002 f814 	bl	8002f90 <HAL_TIM_Base_Start>

	HAL_ADC_Start(&hadc1);
 8000f68:	4819      	ldr	r0, [pc, #100]	@ (8000fd0 <main+0x8c>)
 8000f6a:	f000 fc89 	bl	8001880 <HAL_ADC_Start>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000f6e:	f04f 31ff 	mov.w	r1, #4294967295
 8000f72:	4817      	ldr	r0, [pc, #92]	@ (8000fd0 <main+0x8c>)
 8000f74:	f000 fd32 	bl	80019dc <HAL_ADC_PollForConversion>

		uint32_t dr = HAL_ADC_GetValue(&hadc1);
 8000f78:	4815      	ldr	r0, [pc, #84]	@ (8000fd0 <main+0x8c>)
 8000f7a:	f000 fe35 	bl	8001be8 <HAL_ADC_GetValue>
 8000f7e:	6278      	str	r0, [r7, #36]	@ 0x24

		float voltage = dr * (3.3f - 0.0f) / 4095.0f;
 8000f80:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8000f82:	f7ff fe37 	bl	8000bf4 <__aeabi_ui2f>
 8000f86:	4603      	mov	r3, r0
 8000f88:	4912      	ldr	r1, [pc, #72]	@ (8000fd4 <main+0x90>)
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f7ff fe8a 	bl	8000ca4 <__aeabi_fmul>
 8000f90:	4603      	mov	r3, r0
 8000f92:	4911      	ldr	r1, [pc, #68]	@ (8000fd8 <main+0x94>)
 8000f94:	4618      	mov	r0, r3
 8000f96:	f7ff ff39 	bl	8000e0c <__aeabi_fdiv>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	623b      	str	r3, [r7, #32]

		char buffer[32];

		sprintf(buffer, "%.3f\n", voltage);
 8000f9e:	6a38      	ldr	r0, [r7, #32]
 8000fa0:	f7ff fa42 	bl	8000428 <__aeabi_f2d>
 8000fa4:	4602      	mov	r2, r0
 8000fa6:	460b      	mov	r3, r1
 8000fa8:	4638      	mov	r0, r7
 8000faa:	490c      	ldr	r1, [pc, #48]	@ (8000fdc <main+0x98>)
 8000fac:	f003 f9a6 	bl	80042fc <siprintf>

		HAL_UART_Transmit(&huart1, (uint8_t *) buffer, strlen(buffer), HAL_MAX_DELAY);
 8000fb0:	463b      	mov	r3, r7
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f7ff f8cc 	bl	8000150 <strlen>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	b29a      	uxth	r2, r3
 8000fbc:	4639      	mov	r1, r7
 8000fbe:	f04f 33ff 	mov.w	r3, #4294967295
 8000fc2:	4807      	ldr	r0, [pc, #28]	@ (8000fe0 <main+0x9c>)
 8000fc4:	f002 faa8 	bl	8003518 <HAL_UART_Transmit>
	while (1) {
 8000fc8:	bf00      	nop
 8000fca:	e7d0      	b.n	8000f6e <main+0x2a>
 8000fcc:	20000220 	.word	0x20000220
 8000fd0:	200001f0 	.word	0x200001f0
 8000fd4:	40533333 	.word	0x40533333
 8000fd8:	457ff000 	.word	0x457ff000
 8000fdc:	08006580 	.word	0x08006580
 8000fe0:	20000268 	.word	0x20000268

08000fe4 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b094      	sub	sp, #80	@ 0x50
 8000fe8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000fea:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000fee:	2228      	movs	r2, #40	@ 0x28
 8000ff0:	2100      	movs	r1, #0
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f003 f9e5 	bl	80043c2 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000ff8:	f107 0314 	add.w	r3, r7, #20
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	601a      	str	r2, [r3, #0]
 8001000:	605a      	str	r2, [r3, #4]
 8001002:	609a      	str	r2, [r3, #8]
 8001004:	60da      	str	r2, [r3, #12]
 8001006:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8001008:	1d3b      	adds	r3, r7, #4
 800100a:	2200      	movs	r2, #0
 800100c:	601a      	str	r2, [r3, #0]
 800100e:	605a      	str	r2, [r3, #4]
 8001010:	609a      	str	r2, [r3, #8]
 8001012:	60da      	str	r2, [r3, #12]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001014:	2302      	movs	r3, #2
 8001016:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001018:	2301      	movs	r3, #1
 800101a:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800101c:	2310      	movs	r3, #16
 800101e:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001020:	2300      	movs	r3, #0
 8001022:	647b      	str	r3, [r7, #68]	@ 0x44
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001024:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001028:	4618      	mov	r0, r3
 800102a:	f001 f9e5 	bl	80023f8 <HAL_RCC_OscConfig>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d001      	beq.n	8001038 <SystemClock_Config+0x54>
		Error_Handler();
 8001034:	f000 f8f2 	bl	800121c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001038:	230f      	movs	r3, #15
 800103a:	617b      	str	r3, [r7, #20]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800103c:	2300      	movs	r3, #0
 800103e:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001040:	2300      	movs	r3, #0
 8001042:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001044:	2300      	movs	r3, #0
 8001046:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001048:	2300      	movs	r3, #0
 800104a:	627b      	str	r3, [r7, #36]	@ 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 800104c:	f107 0314 	add.w	r3, r7, #20
 8001050:	2100      	movs	r1, #0
 8001052:	4618      	mov	r0, r3
 8001054:	f001 fc52 	bl	80028fc <HAL_RCC_ClockConfig>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d001      	beq.n	8001062 <SystemClock_Config+0x7e>
		Error_Handler();
 800105e:	f000 f8dd 	bl	800121c <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001062:	2302      	movs	r3, #2
 8001064:	607b      	str	r3, [r7, #4]
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8001066:	2300      	movs	r3, #0
 8001068:	60fb      	str	r3, [r7, #12]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 800106a:	1d3b      	adds	r3, r7, #4
 800106c:	4618      	mov	r0, r3
 800106e:	f001 fdd3 	bl	8002c18 <HAL_RCCEx_PeriphCLKConfig>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d001      	beq.n	800107c <SystemClock_Config+0x98>
		Error_Handler();
 8001078:	f000 f8d0 	bl	800121c <Error_Handler>
	}
}
 800107c:	bf00      	nop
 800107e:	3750      	adds	r7, #80	@ 0x50
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}

08001084 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8001084:	b580      	push	{r7, lr}
 8001086:	b084      	sub	sp, #16
 8001088:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 800108a:	1d3b      	adds	r3, r7, #4
 800108c:	2200      	movs	r2, #0
 800108e:	601a      	str	r2, [r3, #0]
 8001090:	605a      	str	r2, [r3, #4]
 8001092:	609a      	str	r2, [r3, #8]

	/* USER CODE END ADC1_Init 1 */

	/** Common config
	 */
	hadc1.Instance = ADC1;
 8001094:	4b18      	ldr	r3, [pc, #96]	@ (80010f8 <MX_ADC1_Init+0x74>)
 8001096:	4a19      	ldr	r2, [pc, #100]	@ (80010fc <MX_ADC1_Init+0x78>)
 8001098:	601a      	str	r2, [r3, #0]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800109a:	4b17      	ldr	r3, [pc, #92]	@ (80010f8 <MX_ADC1_Init+0x74>)
 800109c:	2200      	movs	r2, #0
 800109e:	609a      	str	r2, [r3, #8]
	hadc1.Init.ContinuousConvMode = DISABLE;
 80010a0:	4b15      	ldr	r3, [pc, #84]	@ (80010f8 <MX_ADC1_Init+0x74>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	731a      	strb	r2, [r3, #12]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010a6:	4b14      	ldr	r3, [pc, #80]	@ (80010f8 <MX_ADC1_Init+0x74>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	751a      	strb	r2, [r3, #20]
	hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 80010ac:	4b12      	ldr	r3, [pc, #72]	@ (80010f8 <MX_ADC1_Init+0x74>)
 80010ae:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80010b2:	61da      	str	r2, [r3, #28]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010b4:	4b10      	ldr	r3, [pc, #64]	@ (80010f8 <MX_ADC1_Init+0x74>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	605a      	str	r2, [r3, #4]
	hadc1.Init.NbrOfConversion = 1;
 80010ba:	4b0f      	ldr	r3, [pc, #60]	@ (80010f8 <MX_ADC1_Init+0x74>)
 80010bc:	2201      	movs	r2, #1
 80010be:	611a      	str	r2, [r3, #16]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 80010c0:	480d      	ldr	r0, [pc, #52]	@ (80010f8 <MX_ADC1_Init+0x74>)
 80010c2:	f000 fb05 	bl	80016d0 <HAL_ADC_Init>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d001      	beq.n	80010d0 <MX_ADC1_Init+0x4c>
		Error_Handler();
 80010cc:	f000 f8a6 	bl	800121c <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_0;
 80010d0:	2300      	movs	r3, #0
 80010d2:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 80010d4:	2301      	movs	r3, #1
 80010d6:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 80010d8:	2301      	movs	r3, #1
 80010da:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80010dc:	1d3b      	adds	r3, r7, #4
 80010de:	4619      	mov	r1, r3
 80010e0:	4805      	ldr	r0, [pc, #20]	@ (80010f8 <MX_ADC1_Init+0x74>)
 80010e2:	f000 fd8d 	bl	8001c00 <HAL_ADC_ConfigChannel>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d001      	beq.n	80010f0 <MX_ADC1_Init+0x6c>
		Error_Handler();
 80010ec:	f000 f896 	bl	800121c <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 80010f0:	bf00      	nop
 80010f2:	3710      	adds	r7, #16
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	200001f0 	.word	0x200001f0
 80010fc:	40012400 	.word	0x40012400

08001100 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8001100:	b580      	push	{r7, lr}
 8001102:	b086      	sub	sp, #24
 8001104:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001106:	f107 0308 	add.w	r3, r7, #8
 800110a:	2200      	movs	r2, #0
 800110c:	601a      	str	r2, [r3, #0]
 800110e:	605a      	str	r2, [r3, #4]
 8001110:	609a      	str	r2, [r3, #8]
 8001112:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001114:	463b      	mov	r3, r7
 8001116:	2200      	movs	r2, #0
 8001118:	601a      	str	r2, [r3, #0]
 800111a:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 800111c:	4b1d      	ldr	r3, [pc, #116]	@ (8001194 <MX_TIM3_Init+0x94>)
 800111e:	4a1e      	ldr	r2, [pc, #120]	@ (8001198 <MX_TIM3_Init+0x98>)
 8001120:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 7;
 8001122:	4b1c      	ldr	r3, [pc, #112]	@ (8001194 <MX_TIM3_Init+0x94>)
 8001124:	2207      	movs	r2, #7
 8001126:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001128:	4b1a      	ldr	r3, [pc, #104]	@ (8001194 <MX_TIM3_Init+0x94>)
 800112a:	2200      	movs	r2, #0
 800112c:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 999;
 800112e:	4b19      	ldr	r3, [pc, #100]	@ (8001194 <MX_TIM3_Init+0x94>)
 8001130:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001134:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001136:	4b17      	ldr	r3, [pc, #92]	@ (8001194 <MX_TIM3_Init+0x94>)
 8001138:	2200      	movs	r2, #0
 800113a:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800113c:	4b15      	ldr	r3, [pc, #84]	@ (8001194 <MX_TIM3_Init+0x94>)
 800113e:	2280      	movs	r2, #128	@ 0x80
 8001140:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 8001142:	4814      	ldr	r0, [pc, #80]	@ (8001194 <MX_TIM3_Init+0x94>)
 8001144:	f001 fed4 	bl	8002ef0 <HAL_TIM_Base_Init>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d001      	beq.n	8001152 <MX_TIM3_Init+0x52>
		Error_Handler();
 800114e:	f000 f865 	bl	800121c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001152:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001156:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 8001158:	f107 0308 	add.w	r3, r7, #8
 800115c:	4619      	mov	r1, r3
 800115e:	480d      	ldr	r0, [pc, #52]	@ (8001194 <MX_TIM3_Init+0x94>)
 8001160:	f001 ff60 	bl	8003024 <HAL_TIM_ConfigClockSource>
 8001164:	4603      	mov	r3, r0
 8001166:	2b00      	cmp	r3, #0
 8001168:	d001      	beq.n	800116e <MX_TIM3_Init+0x6e>
		Error_Handler();
 800116a:	f000 f857 	bl	800121c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800116e:	2320      	movs	r3, #32
 8001170:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001172:	2300      	movs	r3, #0
 8001174:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8001176:	463b      	mov	r3, r7
 8001178:	4619      	mov	r1, r3
 800117a:	4806      	ldr	r0, [pc, #24]	@ (8001194 <MX_TIM3_Init+0x94>)
 800117c:	f002 f91e 	bl	80033bc <HAL_TIMEx_MasterConfigSynchronization>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	d001      	beq.n	800118a <MX_TIM3_Init+0x8a>
			!= HAL_OK) {
		Error_Handler();
 8001186:	f000 f849 	bl	800121c <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 800118a:	bf00      	nop
 800118c:	3718      	adds	r7, #24
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	20000220 	.word	0x20000220
 8001198:	40000400 	.word	0x40000400

0800119c <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 800119c:	b580      	push	{r7, lr}
 800119e:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 80011a0:	4b11      	ldr	r3, [pc, #68]	@ (80011e8 <MX_USART1_UART_Init+0x4c>)
 80011a2:	4a12      	ldr	r2, [pc, #72]	@ (80011ec <MX_USART1_UART_Init+0x50>)
 80011a4:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 80011a6:	4b10      	ldr	r3, [pc, #64]	@ (80011e8 <MX_USART1_UART_Init+0x4c>)
 80011a8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80011ac:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80011ae:	4b0e      	ldr	r3, [pc, #56]	@ (80011e8 <MX_USART1_UART_Init+0x4c>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 80011b4:	4b0c      	ldr	r3, [pc, #48]	@ (80011e8 <MX_USART1_UART_Init+0x4c>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 80011ba:	4b0b      	ldr	r3, [pc, #44]	@ (80011e8 <MX_USART1_UART_Init+0x4c>)
 80011bc:	2200      	movs	r2, #0
 80011be:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 80011c0:	4b09      	ldr	r3, [pc, #36]	@ (80011e8 <MX_USART1_UART_Init+0x4c>)
 80011c2:	220c      	movs	r2, #12
 80011c4:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011c6:	4b08      	ldr	r3, [pc, #32]	@ (80011e8 <MX_USART1_UART_Init+0x4c>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80011cc:	4b06      	ldr	r3, [pc, #24]	@ (80011e8 <MX_USART1_UART_Init+0x4c>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 80011d2:	4805      	ldr	r0, [pc, #20]	@ (80011e8 <MX_USART1_UART_Init+0x4c>)
 80011d4:	f002 f950 	bl	8003478 <HAL_UART_Init>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d001      	beq.n	80011e2 <MX_USART1_UART_Init+0x46>
		Error_Handler();
 80011de:	f000 f81d 	bl	800121c <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 80011e2:	bf00      	nop
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	20000268 	.word	0x20000268
 80011ec:	40013800 	.word	0x40013800

080011f0 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80011f0:	b480      	push	{r7}
 80011f2:	b083      	sub	sp, #12
 80011f4:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80011f6:	4b08      	ldr	r3, [pc, #32]	@ (8001218 <MX_GPIO_Init+0x28>)
 80011f8:	699b      	ldr	r3, [r3, #24]
 80011fa:	4a07      	ldr	r2, [pc, #28]	@ (8001218 <MX_GPIO_Init+0x28>)
 80011fc:	f043 0304 	orr.w	r3, r3, #4
 8001200:	6193      	str	r3, [r2, #24]
 8001202:	4b05      	ldr	r3, [pc, #20]	@ (8001218 <MX_GPIO_Init+0x28>)
 8001204:	699b      	ldr	r3, [r3, #24]
 8001206:	f003 0304 	and.w	r3, r3, #4
 800120a:	607b      	str	r3, [r7, #4]
 800120c:	687b      	ldr	r3, [r7, #4]

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 800120e:	bf00      	nop
 8001210:	370c      	adds	r7, #12
 8001212:	46bd      	mov	sp, r7
 8001214:	bc80      	pop	{r7}
 8001216:	4770      	bx	lr
 8001218:	40021000 	.word	0x40021000

0800121c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001220:	b672      	cpsid	i
}
 8001222:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001224:	bf00      	nop
 8001226:	e7fd      	b.n	8001224 <Error_Handler+0x8>

08001228 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001228:	b480      	push	{r7}
 800122a:	b085      	sub	sp, #20
 800122c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800122e:	4b15      	ldr	r3, [pc, #84]	@ (8001284 <HAL_MspInit+0x5c>)
 8001230:	699b      	ldr	r3, [r3, #24]
 8001232:	4a14      	ldr	r2, [pc, #80]	@ (8001284 <HAL_MspInit+0x5c>)
 8001234:	f043 0301 	orr.w	r3, r3, #1
 8001238:	6193      	str	r3, [r2, #24]
 800123a:	4b12      	ldr	r3, [pc, #72]	@ (8001284 <HAL_MspInit+0x5c>)
 800123c:	699b      	ldr	r3, [r3, #24]
 800123e:	f003 0301 	and.w	r3, r3, #1
 8001242:	60bb      	str	r3, [r7, #8]
 8001244:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001246:	4b0f      	ldr	r3, [pc, #60]	@ (8001284 <HAL_MspInit+0x5c>)
 8001248:	69db      	ldr	r3, [r3, #28]
 800124a:	4a0e      	ldr	r2, [pc, #56]	@ (8001284 <HAL_MspInit+0x5c>)
 800124c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001250:	61d3      	str	r3, [r2, #28]
 8001252:	4b0c      	ldr	r3, [pc, #48]	@ (8001284 <HAL_MspInit+0x5c>)
 8001254:	69db      	ldr	r3, [r3, #28]
 8001256:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800125a:	607b      	str	r3, [r7, #4]
 800125c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800125e:	4b0a      	ldr	r3, [pc, #40]	@ (8001288 <HAL_MspInit+0x60>)
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	60fb      	str	r3, [r7, #12]
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800126a:	60fb      	str	r3, [r7, #12]
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001272:	60fb      	str	r3, [r7, #12]
 8001274:	4a04      	ldr	r2, [pc, #16]	@ (8001288 <HAL_MspInit+0x60>)
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800127a:	bf00      	nop
 800127c:	3714      	adds	r7, #20
 800127e:	46bd      	mov	sp, r7
 8001280:	bc80      	pop	{r7}
 8001282:	4770      	bx	lr
 8001284:	40021000 	.word	0x40021000
 8001288:	40010000 	.word	0x40010000

0800128c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b088      	sub	sp, #32
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001294:	f107 0310 	add.w	r3, r7, #16
 8001298:	2200      	movs	r2, #0
 800129a:	601a      	str	r2, [r3, #0]
 800129c:	605a      	str	r2, [r3, #4]
 800129e:	609a      	str	r2, [r3, #8]
 80012a0:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	4a14      	ldr	r2, [pc, #80]	@ (80012f8 <HAL_ADC_MspInit+0x6c>)
 80012a8:	4293      	cmp	r3, r2
 80012aa:	d121      	bne.n	80012f0 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80012ac:	4b13      	ldr	r3, [pc, #76]	@ (80012fc <HAL_ADC_MspInit+0x70>)
 80012ae:	699b      	ldr	r3, [r3, #24]
 80012b0:	4a12      	ldr	r2, [pc, #72]	@ (80012fc <HAL_ADC_MspInit+0x70>)
 80012b2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80012b6:	6193      	str	r3, [r2, #24]
 80012b8:	4b10      	ldr	r3, [pc, #64]	@ (80012fc <HAL_ADC_MspInit+0x70>)
 80012ba:	699b      	ldr	r3, [r3, #24]
 80012bc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80012c0:	60fb      	str	r3, [r7, #12]
 80012c2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012c4:	4b0d      	ldr	r3, [pc, #52]	@ (80012fc <HAL_ADC_MspInit+0x70>)
 80012c6:	699b      	ldr	r3, [r3, #24]
 80012c8:	4a0c      	ldr	r2, [pc, #48]	@ (80012fc <HAL_ADC_MspInit+0x70>)
 80012ca:	f043 0304 	orr.w	r3, r3, #4
 80012ce:	6193      	str	r3, [r2, #24]
 80012d0:	4b0a      	ldr	r3, [pc, #40]	@ (80012fc <HAL_ADC_MspInit+0x70>)
 80012d2:	699b      	ldr	r3, [r3, #24]
 80012d4:	f003 0304 	and.w	r3, r3, #4
 80012d8:	60bb      	str	r3, [r7, #8]
 80012da:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80012dc:	2301      	movs	r3, #1
 80012de:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012e0:	2303      	movs	r3, #3
 80012e2:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012e4:	f107 0310 	add.w	r3, r7, #16
 80012e8:	4619      	mov	r1, r3
 80012ea:	4805      	ldr	r0, [pc, #20]	@ (8001300 <HAL_ADC_MspInit+0x74>)
 80012ec:	f000 ff00 	bl	80020f0 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 80012f0:	bf00      	nop
 80012f2:	3720      	adds	r7, #32
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	40012400 	.word	0x40012400
 80012fc:	40021000 	.word	0x40021000
 8001300:	40010800 	.word	0x40010800

08001304 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001304:	b480      	push	{r7}
 8001306:	b085      	sub	sp, #20
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4a09      	ldr	r2, [pc, #36]	@ (8001338 <HAL_TIM_Base_MspInit+0x34>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d10b      	bne.n	800132e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001316:	4b09      	ldr	r3, [pc, #36]	@ (800133c <HAL_TIM_Base_MspInit+0x38>)
 8001318:	69db      	ldr	r3, [r3, #28]
 800131a:	4a08      	ldr	r2, [pc, #32]	@ (800133c <HAL_TIM_Base_MspInit+0x38>)
 800131c:	f043 0302 	orr.w	r3, r3, #2
 8001320:	61d3      	str	r3, [r2, #28]
 8001322:	4b06      	ldr	r3, [pc, #24]	@ (800133c <HAL_TIM_Base_MspInit+0x38>)
 8001324:	69db      	ldr	r3, [r3, #28]
 8001326:	f003 0302 	and.w	r3, r3, #2
 800132a:	60fb      	str	r3, [r7, #12]
 800132c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 800132e:	bf00      	nop
 8001330:	3714      	adds	r7, #20
 8001332:	46bd      	mov	sp, r7
 8001334:	bc80      	pop	{r7}
 8001336:	4770      	bx	lr
 8001338:	40000400 	.word	0x40000400
 800133c:	40021000 	.word	0x40021000

08001340 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b088      	sub	sp, #32
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001348:	f107 0310 	add.w	r3, r7, #16
 800134c:	2200      	movs	r2, #0
 800134e:	601a      	str	r2, [r3, #0]
 8001350:	605a      	str	r2, [r3, #4]
 8001352:	609a      	str	r2, [r3, #8]
 8001354:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4a1c      	ldr	r2, [pc, #112]	@ (80013cc <HAL_UART_MspInit+0x8c>)
 800135c:	4293      	cmp	r3, r2
 800135e:	d131      	bne.n	80013c4 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001360:	4b1b      	ldr	r3, [pc, #108]	@ (80013d0 <HAL_UART_MspInit+0x90>)
 8001362:	699b      	ldr	r3, [r3, #24]
 8001364:	4a1a      	ldr	r2, [pc, #104]	@ (80013d0 <HAL_UART_MspInit+0x90>)
 8001366:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800136a:	6193      	str	r3, [r2, #24]
 800136c:	4b18      	ldr	r3, [pc, #96]	@ (80013d0 <HAL_UART_MspInit+0x90>)
 800136e:	699b      	ldr	r3, [r3, #24]
 8001370:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001374:	60fb      	str	r3, [r7, #12]
 8001376:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001378:	4b15      	ldr	r3, [pc, #84]	@ (80013d0 <HAL_UART_MspInit+0x90>)
 800137a:	699b      	ldr	r3, [r3, #24]
 800137c:	4a14      	ldr	r2, [pc, #80]	@ (80013d0 <HAL_UART_MspInit+0x90>)
 800137e:	f043 0304 	orr.w	r3, r3, #4
 8001382:	6193      	str	r3, [r2, #24]
 8001384:	4b12      	ldr	r3, [pc, #72]	@ (80013d0 <HAL_UART_MspInit+0x90>)
 8001386:	699b      	ldr	r3, [r3, #24]
 8001388:	f003 0304 	and.w	r3, r3, #4
 800138c:	60bb      	str	r3, [r7, #8]
 800138e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001390:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001394:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001396:	2302      	movs	r3, #2
 8001398:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800139a:	2303      	movs	r3, #3
 800139c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800139e:	f107 0310 	add.w	r3, r7, #16
 80013a2:	4619      	mov	r1, r3
 80013a4:	480b      	ldr	r0, [pc, #44]	@ (80013d4 <HAL_UART_MspInit+0x94>)
 80013a6:	f000 fea3 	bl	80020f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80013aa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80013ae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013b0:	2300      	movs	r3, #0
 80013b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b4:	2300      	movs	r3, #0
 80013b6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013b8:	f107 0310 	add.w	r3, r7, #16
 80013bc:	4619      	mov	r1, r3
 80013be:	4805      	ldr	r0, [pc, #20]	@ (80013d4 <HAL_UART_MspInit+0x94>)
 80013c0:	f000 fe96 	bl	80020f0 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 80013c4:	bf00      	nop
 80013c6:	3720      	adds	r7, #32
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	40013800 	.word	0x40013800
 80013d0:	40021000 	.word	0x40021000
 80013d4:	40010800 	.word	0x40010800

080013d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80013dc:	bf00      	nop
 80013de:	e7fd      	b.n	80013dc <NMI_Handler+0x4>

080013e0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013e4:	bf00      	nop
 80013e6:	e7fd      	b.n	80013e4 <HardFault_Handler+0x4>

080013e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013e8:	b480      	push	{r7}
 80013ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013ec:	bf00      	nop
 80013ee:	e7fd      	b.n	80013ec <MemManage_Handler+0x4>

080013f0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013f4:	bf00      	nop
 80013f6:	e7fd      	b.n	80013f4 <BusFault_Handler+0x4>

080013f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013fc:	bf00      	nop
 80013fe:	e7fd      	b.n	80013fc <UsageFault_Handler+0x4>

08001400 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001404:	bf00      	nop
 8001406:	46bd      	mov	sp, r7
 8001408:	bc80      	pop	{r7}
 800140a:	4770      	bx	lr

0800140c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001410:	bf00      	nop
 8001412:	46bd      	mov	sp, r7
 8001414:	bc80      	pop	{r7}
 8001416:	4770      	bx	lr

08001418 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800141c:	bf00      	nop
 800141e:	46bd      	mov	sp, r7
 8001420:	bc80      	pop	{r7}
 8001422:	4770      	bx	lr

08001424 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001428:	f000 f936 	bl	8001698 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800142c:	bf00      	nop
 800142e:	bd80      	pop	{r7, pc}

08001430 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0
  return 1;
 8001434:	2301      	movs	r3, #1
}
 8001436:	4618      	mov	r0, r3
 8001438:	46bd      	mov	sp, r7
 800143a:	bc80      	pop	{r7}
 800143c:	4770      	bx	lr

0800143e <_kill>:

int _kill(int pid, int sig)
{
 800143e:	b580      	push	{r7, lr}
 8001440:	b082      	sub	sp, #8
 8001442:	af00      	add	r7, sp, #0
 8001444:	6078      	str	r0, [r7, #4]
 8001446:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001448:	f003 f80e 	bl	8004468 <__errno>
 800144c:	4603      	mov	r3, r0
 800144e:	2216      	movs	r2, #22
 8001450:	601a      	str	r2, [r3, #0]
  return -1;
 8001452:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001456:	4618      	mov	r0, r3
 8001458:	3708      	adds	r7, #8
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}

0800145e <_exit>:

void _exit (int status)
{
 800145e:	b580      	push	{r7, lr}
 8001460:	b082      	sub	sp, #8
 8001462:	af00      	add	r7, sp, #0
 8001464:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001466:	f04f 31ff 	mov.w	r1, #4294967295
 800146a:	6878      	ldr	r0, [r7, #4]
 800146c:	f7ff ffe7 	bl	800143e <_kill>
  while (1) {}    /* Make sure we hang here */
 8001470:	bf00      	nop
 8001472:	e7fd      	b.n	8001470 <_exit+0x12>

08001474 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b086      	sub	sp, #24
 8001478:	af00      	add	r7, sp, #0
 800147a:	60f8      	str	r0, [r7, #12]
 800147c:	60b9      	str	r1, [r7, #8]
 800147e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001480:	2300      	movs	r3, #0
 8001482:	617b      	str	r3, [r7, #20]
 8001484:	e00a      	b.n	800149c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001486:	f3af 8000 	nop.w
 800148a:	4601      	mov	r1, r0
 800148c:	68bb      	ldr	r3, [r7, #8]
 800148e:	1c5a      	adds	r2, r3, #1
 8001490:	60ba      	str	r2, [r7, #8]
 8001492:	b2ca      	uxtb	r2, r1
 8001494:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001496:	697b      	ldr	r3, [r7, #20]
 8001498:	3301      	adds	r3, #1
 800149a:	617b      	str	r3, [r7, #20]
 800149c:	697a      	ldr	r2, [r7, #20]
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	429a      	cmp	r2, r3
 80014a2:	dbf0      	blt.n	8001486 <_read+0x12>
  }

  return len;
 80014a4:	687b      	ldr	r3, [r7, #4]
}
 80014a6:	4618      	mov	r0, r3
 80014a8:	3718      	adds	r7, #24
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}

080014ae <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80014ae:	b580      	push	{r7, lr}
 80014b0:	b086      	sub	sp, #24
 80014b2:	af00      	add	r7, sp, #0
 80014b4:	60f8      	str	r0, [r7, #12]
 80014b6:	60b9      	str	r1, [r7, #8]
 80014b8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014ba:	2300      	movs	r3, #0
 80014bc:	617b      	str	r3, [r7, #20]
 80014be:	e009      	b.n	80014d4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80014c0:	68bb      	ldr	r3, [r7, #8]
 80014c2:	1c5a      	adds	r2, r3, #1
 80014c4:	60ba      	str	r2, [r7, #8]
 80014c6:	781b      	ldrb	r3, [r3, #0]
 80014c8:	4618      	mov	r0, r3
 80014ca:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014ce:	697b      	ldr	r3, [r7, #20]
 80014d0:	3301      	adds	r3, #1
 80014d2:	617b      	str	r3, [r7, #20]
 80014d4:	697a      	ldr	r2, [r7, #20]
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	429a      	cmp	r2, r3
 80014da:	dbf1      	blt.n	80014c0 <_write+0x12>
  }
  return len;
 80014dc:	687b      	ldr	r3, [r7, #4]
}
 80014de:	4618      	mov	r0, r3
 80014e0:	3718      	adds	r7, #24
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}

080014e6 <_close>:

int _close(int file)
{
 80014e6:	b480      	push	{r7}
 80014e8:	b083      	sub	sp, #12
 80014ea:	af00      	add	r7, sp, #0
 80014ec:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80014ee:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014f2:	4618      	mov	r0, r3
 80014f4:	370c      	adds	r7, #12
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bc80      	pop	{r7}
 80014fa:	4770      	bx	lr

080014fc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b083      	sub	sp, #12
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
 8001504:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800150c:	605a      	str	r2, [r3, #4]
  return 0;
 800150e:	2300      	movs	r3, #0
}
 8001510:	4618      	mov	r0, r3
 8001512:	370c      	adds	r7, #12
 8001514:	46bd      	mov	sp, r7
 8001516:	bc80      	pop	{r7}
 8001518:	4770      	bx	lr

0800151a <_isatty>:

int _isatty(int file)
{
 800151a:	b480      	push	{r7}
 800151c:	b083      	sub	sp, #12
 800151e:	af00      	add	r7, sp, #0
 8001520:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001522:	2301      	movs	r3, #1
}
 8001524:	4618      	mov	r0, r3
 8001526:	370c      	adds	r7, #12
 8001528:	46bd      	mov	sp, r7
 800152a:	bc80      	pop	{r7}
 800152c:	4770      	bx	lr

0800152e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800152e:	b480      	push	{r7}
 8001530:	b085      	sub	sp, #20
 8001532:	af00      	add	r7, sp, #0
 8001534:	60f8      	str	r0, [r7, #12]
 8001536:	60b9      	str	r1, [r7, #8]
 8001538:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800153a:	2300      	movs	r3, #0
}
 800153c:	4618      	mov	r0, r3
 800153e:	3714      	adds	r7, #20
 8001540:	46bd      	mov	sp, r7
 8001542:	bc80      	pop	{r7}
 8001544:	4770      	bx	lr
	...

08001548 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b086      	sub	sp, #24
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001550:	4a14      	ldr	r2, [pc, #80]	@ (80015a4 <_sbrk+0x5c>)
 8001552:	4b15      	ldr	r3, [pc, #84]	@ (80015a8 <_sbrk+0x60>)
 8001554:	1ad3      	subs	r3, r2, r3
 8001556:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001558:	697b      	ldr	r3, [r7, #20]
 800155a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800155c:	4b13      	ldr	r3, [pc, #76]	@ (80015ac <_sbrk+0x64>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d102      	bne.n	800156a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001564:	4b11      	ldr	r3, [pc, #68]	@ (80015ac <_sbrk+0x64>)
 8001566:	4a12      	ldr	r2, [pc, #72]	@ (80015b0 <_sbrk+0x68>)
 8001568:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800156a:	4b10      	ldr	r3, [pc, #64]	@ (80015ac <_sbrk+0x64>)
 800156c:	681a      	ldr	r2, [r3, #0]
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	4413      	add	r3, r2
 8001572:	693a      	ldr	r2, [r7, #16]
 8001574:	429a      	cmp	r2, r3
 8001576:	d207      	bcs.n	8001588 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001578:	f002 ff76 	bl	8004468 <__errno>
 800157c:	4603      	mov	r3, r0
 800157e:	220c      	movs	r2, #12
 8001580:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001582:	f04f 33ff 	mov.w	r3, #4294967295
 8001586:	e009      	b.n	800159c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001588:	4b08      	ldr	r3, [pc, #32]	@ (80015ac <_sbrk+0x64>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800158e:	4b07      	ldr	r3, [pc, #28]	@ (80015ac <_sbrk+0x64>)
 8001590:	681a      	ldr	r2, [r3, #0]
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	4413      	add	r3, r2
 8001596:	4a05      	ldr	r2, [pc, #20]	@ (80015ac <_sbrk+0x64>)
 8001598:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800159a:	68fb      	ldr	r3, [r7, #12]
}
 800159c:	4618      	mov	r0, r3
 800159e:	3718      	adds	r7, #24
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	20005000 	.word	0x20005000
 80015a8:	00000400 	.word	0x00000400
 80015ac:	200002b0 	.word	0x200002b0
 80015b0:	20000408 	.word	0x20000408

080015b4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015b8:	bf00      	nop
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bc80      	pop	{r7}
 80015be:	4770      	bx	lr

080015c0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80015c0:	f7ff fff8 	bl	80015b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015c4:	480b      	ldr	r0, [pc, #44]	@ (80015f4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80015c6:	490c      	ldr	r1, [pc, #48]	@ (80015f8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80015c8:	4a0c      	ldr	r2, [pc, #48]	@ (80015fc <LoopFillZerobss+0x16>)
  movs r3, #0
 80015ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015cc:	e002      	b.n	80015d4 <LoopCopyDataInit>

080015ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015d2:	3304      	adds	r3, #4

080015d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015d8:	d3f9      	bcc.n	80015ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015da:	4a09      	ldr	r2, [pc, #36]	@ (8001600 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80015dc:	4c09      	ldr	r4, [pc, #36]	@ (8001604 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80015de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015e0:	e001      	b.n	80015e6 <LoopFillZerobss>

080015e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015e4:	3204      	adds	r2, #4

080015e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015e8:	d3fb      	bcc.n	80015e2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80015ea:	f002 ff43 	bl	8004474 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80015ee:	f7ff fca9 	bl	8000f44 <main>
  bx lr
 80015f2:	4770      	bx	lr
  ldr r0, =_sdata
 80015f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015f8:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80015fc:	08006948 	.word	0x08006948
  ldr r2, =_sbss
 8001600:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001604:	20000404 	.word	0x20000404

08001608 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001608:	e7fe      	b.n	8001608 <ADC1_2_IRQHandler>
	...

0800160c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001610:	4b08      	ldr	r3, [pc, #32]	@ (8001634 <HAL_Init+0x28>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4a07      	ldr	r2, [pc, #28]	@ (8001634 <HAL_Init+0x28>)
 8001616:	f043 0310 	orr.w	r3, r3, #16
 800161a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800161c:	2003      	movs	r0, #3
 800161e:	f000 fd33 	bl	8002088 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001622:	200f      	movs	r0, #15
 8001624:	f000 f808 	bl	8001638 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001628:	f7ff fdfe 	bl	8001228 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800162c:	2300      	movs	r3, #0
}
 800162e:	4618      	mov	r0, r3
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	40022000 	.word	0x40022000

08001638 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b082      	sub	sp, #8
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001640:	4b12      	ldr	r3, [pc, #72]	@ (800168c <HAL_InitTick+0x54>)
 8001642:	681a      	ldr	r2, [r3, #0]
 8001644:	4b12      	ldr	r3, [pc, #72]	@ (8001690 <HAL_InitTick+0x58>)
 8001646:	781b      	ldrb	r3, [r3, #0]
 8001648:	4619      	mov	r1, r3
 800164a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800164e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001652:	fbb2 f3f3 	udiv	r3, r2, r3
 8001656:	4618      	mov	r0, r3
 8001658:	f000 fd3d 	bl	80020d6 <HAL_SYSTICK_Config>
 800165c:	4603      	mov	r3, r0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d001      	beq.n	8001666 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001662:	2301      	movs	r3, #1
 8001664:	e00e      	b.n	8001684 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	2b0f      	cmp	r3, #15
 800166a:	d80a      	bhi.n	8001682 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800166c:	2200      	movs	r2, #0
 800166e:	6879      	ldr	r1, [r7, #4]
 8001670:	f04f 30ff 	mov.w	r0, #4294967295
 8001674:	f000 fd13 	bl	800209e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001678:	4a06      	ldr	r2, [pc, #24]	@ (8001694 <HAL_InitTick+0x5c>)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800167e:	2300      	movs	r3, #0
 8001680:	e000      	b.n	8001684 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001682:	2301      	movs	r3, #1
}
 8001684:	4618      	mov	r0, r3
 8001686:	3708      	adds	r7, #8
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}
 800168c:	20000000 	.word	0x20000000
 8001690:	20000008 	.word	0x20000008
 8001694:	20000004 	.word	0x20000004

08001698 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001698:	b480      	push	{r7}
 800169a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800169c:	4b05      	ldr	r3, [pc, #20]	@ (80016b4 <HAL_IncTick+0x1c>)
 800169e:	781b      	ldrb	r3, [r3, #0]
 80016a0:	461a      	mov	r2, r3
 80016a2:	4b05      	ldr	r3, [pc, #20]	@ (80016b8 <HAL_IncTick+0x20>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4413      	add	r3, r2
 80016a8:	4a03      	ldr	r2, [pc, #12]	@ (80016b8 <HAL_IncTick+0x20>)
 80016aa:	6013      	str	r3, [r2, #0]
}
 80016ac:	bf00      	nop
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bc80      	pop	{r7}
 80016b2:	4770      	bx	lr
 80016b4:	20000008 	.word	0x20000008
 80016b8:	200002b4 	.word	0x200002b4

080016bc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016bc:	b480      	push	{r7}
 80016be:	af00      	add	r7, sp, #0
  return uwTick;
 80016c0:	4b02      	ldr	r3, [pc, #8]	@ (80016cc <HAL_GetTick+0x10>)
 80016c2:	681b      	ldr	r3, [r3, #0]
}
 80016c4:	4618      	mov	r0, r3
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bc80      	pop	{r7}
 80016ca:	4770      	bx	lr
 80016cc:	200002b4 	.word	0x200002b4

080016d0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b086      	sub	sp, #24
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016d8:	2300      	movs	r3, #0
 80016da:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80016dc:	2300      	movs	r3, #0
 80016de:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80016e0:	2300      	movs	r3, #0
 80016e2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80016e4:	2300      	movs	r3, #0
 80016e6:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d101      	bne.n	80016f2 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80016ee:	2301      	movs	r3, #1
 80016f0:	e0be      	b.n	8001870 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	689b      	ldr	r3, [r3, #8]
 80016f6:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d109      	bne.n	8001714 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	2200      	movs	r2, #0
 8001704:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	2200      	movs	r2, #0
 800170a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800170e:	6878      	ldr	r0, [r7, #4]
 8001710:	f7ff fdbc 	bl	800128c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001714:	6878      	ldr	r0, [r7, #4]
 8001716:	f000 fbc5 	bl	8001ea4 <ADC_ConversionStop_Disable>
 800171a:	4603      	mov	r3, r0
 800171c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001722:	f003 0310 	and.w	r3, r3, #16
 8001726:	2b00      	cmp	r3, #0
 8001728:	f040 8099 	bne.w	800185e <HAL_ADC_Init+0x18e>
 800172c:	7dfb      	ldrb	r3, [r7, #23]
 800172e:	2b00      	cmp	r3, #0
 8001730:	f040 8095 	bne.w	800185e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001738:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800173c:	f023 0302 	bic.w	r3, r3, #2
 8001740:	f043 0202 	orr.w	r2, r3, #2
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001750:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	7b1b      	ldrb	r3, [r3, #12]
 8001756:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001758:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800175a:	68ba      	ldr	r2, [r7, #8]
 800175c:	4313      	orrs	r3, r2
 800175e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	689b      	ldr	r3, [r3, #8]
 8001764:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001768:	d003      	beq.n	8001772 <HAL_ADC_Init+0xa2>
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	689b      	ldr	r3, [r3, #8]
 800176e:	2b01      	cmp	r3, #1
 8001770:	d102      	bne.n	8001778 <HAL_ADC_Init+0xa8>
 8001772:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001776:	e000      	b.n	800177a <HAL_ADC_Init+0xaa>
 8001778:	2300      	movs	r3, #0
 800177a:	693a      	ldr	r2, [r7, #16]
 800177c:	4313      	orrs	r3, r2
 800177e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	7d1b      	ldrb	r3, [r3, #20]
 8001784:	2b01      	cmp	r3, #1
 8001786:	d119      	bne.n	80017bc <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	7b1b      	ldrb	r3, [r3, #12]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d109      	bne.n	80017a4 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	699b      	ldr	r3, [r3, #24]
 8001794:	3b01      	subs	r3, #1
 8001796:	035a      	lsls	r2, r3, #13
 8001798:	693b      	ldr	r3, [r7, #16]
 800179a:	4313      	orrs	r3, r2
 800179c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80017a0:	613b      	str	r3, [r7, #16]
 80017a2:	e00b      	b.n	80017bc <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017a8:	f043 0220 	orr.w	r2, r3, #32
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017b4:	f043 0201 	orr.w	r2, r3, #1
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	693a      	ldr	r2, [r7, #16]
 80017cc:	430a      	orrs	r2, r1
 80017ce:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	689a      	ldr	r2, [r3, #8]
 80017d6:	4b28      	ldr	r3, [pc, #160]	@ (8001878 <HAL_ADC_Init+0x1a8>)
 80017d8:	4013      	ands	r3, r2
 80017da:	687a      	ldr	r2, [r7, #4]
 80017dc:	6812      	ldr	r2, [r2, #0]
 80017de:	68b9      	ldr	r1, [r7, #8]
 80017e0:	430b      	orrs	r3, r1
 80017e2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	689b      	ldr	r3, [r3, #8]
 80017e8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80017ec:	d003      	beq.n	80017f6 <HAL_ADC_Init+0x126>
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	689b      	ldr	r3, [r3, #8]
 80017f2:	2b01      	cmp	r3, #1
 80017f4:	d104      	bne.n	8001800 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	691b      	ldr	r3, [r3, #16]
 80017fa:	3b01      	subs	r3, #1
 80017fc:	051b      	lsls	r3, r3, #20
 80017fe:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001806:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	68fa      	ldr	r2, [r7, #12]
 8001810:	430a      	orrs	r2, r1
 8001812:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	689a      	ldr	r2, [r3, #8]
 800181a:	4b18      	ldr	r3, [pc, #96]	@ (800187c <HAL_ADC_Init+0x1ac>)
 800181c:	4013      	ands	r3, r2
 800181e:	68ba      	ldr	r2, [r7, #8]
 8001820:	429a      	cmp	r2, r3
 8001822:	d10b      	bne.n	800183c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2200      	movs	r2, #0
 8001828:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800182e:	f023 0303 	bic.w	r3, r3, #3
 8001832:	f043 0201 	orr.w	r2, r3, #1
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800183a:	e018      	b.n	800186e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001840:	f023 0312 	bic.w	r3, r3, #18
 8001844:	f043 0210 	orr.w	r2, r3, #16
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001850:	f043 0201 	orr.w	r2, r3, #1
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001858:	2301      	movs	r3, #1
 800185a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800185c:	e007      	b.n	800186e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001862:	f043 0210 	orr.w	r2, r3, #16
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 800186a:	2301      	movs	r3, #1
 800186c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800186e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001870:	4618      	mov	r0, r3
 8001872:	3718      	adds	r7, #24
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}
 8001878:	ffe1f7fd 	.word	0xffe1f7fd
 800187c:	ff1f0efe 	.word	0xff1f0efe

08001880 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b084      	sub	sp, #16
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001888:	2300      	movs	r3, #0
 800188a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001892:	2b01      	cmp	r3, #1
 8001894:	d101      	bne.n	800189a <HAL_ADC_Start+0x1a>
 8001896:	2302      	movs	r3, #2
 8001898:	e098      	b.n	80019cc <HAL_ADC_Start+0x14c>
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	2201      	movs	r2, #1
 800189e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80018a2:	6878      	ldr	r0, [r7, #4]
 80018a4:	f000 faa4 	bl	8001df0 <ADC_Enable>
 80018a8:	4603      	mov	r3, r0
 80018aa:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80018ac:	7bfb      	ldrb	r3, [r7, #15]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	f040 8087 	bne.w	80019c2 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018b8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80018bc:	f023 0301 	bic.w	r3, r3, #1
 80018c0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a41      	ldr	r2, [pc, #260]	@ (80019d4 <HAL_ADC_Start+0x154>)
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d105      	bne.n	80018de <HAL_ADC_Start+0x5e>
 80018d2:	4b41      	ldr	r3, [pc, #260]	@ (80019d8 <HAL_ADC_Start+0x158>)
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d115      	bne.n	800190a <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018e2:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d026      	beq.n	8001946 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018fc:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001900:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001908:	e01d      	b.n	8001946 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800190e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4a2f      	ldr	r2, [pc, #188]	@ (80019d8 <HAL_ADC_Start+0x158>)
 800191c:	4293      	cmp	r3, r2
 800191e:	d004      	beq.n	800192a <HAL_ADC_Start+0xaa>
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a2b      	ldr	r2, [pc, #172]	@ (80019d4 <HAL_ADC_Start+0x154>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d10d      	bne.n	8001946 <HAL_ADC_Start+0xc6>
 800192a:	4b2b      	ldr	r3, [pc, #172]	@ (80019d8 <HAL_ADC_Start+0x158>)
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001932:	2b00      	cmp	r3, #0
 8001934:	d007      	beq.n	8001946 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800193a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800193e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800194a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800194e:	2b00      	cmp	r3, #0
 8001950:	d006      	beq.n	8001960 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001956:	f023 0206 	bic.w	r2, r3, #6
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800195e:	e002      	b.n	8001966 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2200      	movs	r2, #0
 8001964:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	2200      	movs	r2, #0
 800196a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f06f 0202 	mvn.w	r2, #2
 8001976:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	689b      	ldr	r3, [r3, #8]
 800197e:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001982:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001986:	d113      	bne.n	80019b0 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800198c:	4a11      	ldr	r2, [pc, #68]	@ (80019d4 <HAL_ADC_Start+0x154>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d105      	bne.n	800199e <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001992:	4b11      	ldr	r3, [pc, #68]	@ (80019d8 <HAL_ADC_Start+0x158>)
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800199a:	2b00      	cmp	r3, #0
 800199c:	d108      	bne.n	80019b0 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	689a      	ldr	r2, [r3, #8]
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 80019ac:	609a      	str	r2, [r3, #8]
 80019ae:	e00c      	b.n	80019ca <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	689a      	ldr	r2, [r3, #8]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 80019be:	609a      	str	r2, [r3, #8]
 80019c0:	e003      	b.n	80019ca <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	2200      	movs	r2, #0
 80019c6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 80019ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80019cc:	4618      	mov	r0, r3
 80019ce:	3710      	adds	r7, #16
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	40012800 	.word	0x40012800
 80019d8:	40012400 	.word	0x40012400

080019dc <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80019dc:	b590      	push	{r4, r7, lr}
 80019de:	b087      	sub	sp, #28
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
 80019e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80019e6:	2300      	movs	r3, #0
 80019e8:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80019ea:	2300      	movs	r3, #0
 80019ec:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 80019ee:	2300      	movs	r3, #0
 80019f0:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80019f2:	f7ff fe63 	bl	80016bc <HAL_GetTick>
 80019f6:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	689b      	ldr	r3, [r3, #8]
 80019fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d00b      	beq.n	8001a1e <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a0a:	f043 0220 	orr.w	r2, r3, #32
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	2200      	movs	r2, #0
 8001a16:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	e0d3      	b.n	8001bc6 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d131      	bne.n	8001a90 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a32:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d12a      	bne.n	8001a90 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001a3a:	e021      	b.n	8001a80 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a42:	d01d      	beq.n	8001a80 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d007      	beq.n	8001a5a <HAL_ADC_PollForConversion+0x7e>
 8001a4a:	f7ff fe37 	bl	80016bc <HAL_GetTick>
 8001a4e:	4602      	mov	r2, r0
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	1ad3      	subs	r3, r2, r3
 8001a54:	683a      	ldr	r2, [r7, #0]
 8001a56:	429a      	cmp	r2, r3
 8001a58:	d212      	bcs.n	8001a80 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f003 0302 	and.w	r3, r3, #2
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d10b      	bne.n	8001a80 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a6c:	f043 0204 	orr.w	r2, r3, #4
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2200      	movs	r2, #0
 8001a78:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 8001a7c:	2303      	movs	r3, #3
 8001a7e:	e0a2      	b.n	8001bc6 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f003 0302 	and.w	r3, r3, #2
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d0d6      	beq.n	8001a3c <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001a8e:	e070      	b.n	8001b72 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001a90:	4b4f      	ldr	r3, [pc, #316]	@ (8001bd0 <HAL_ADC_PollForConversion+0x1f4>)
 8001a92:	681c      	ldr	r4, [r3, #0]
 8001a94:	2002      	movs	r0, #2
 8001a96:	f001 f975 	bl	8002d84 <HAL_RCCEx_GetPeriphCLKFreq>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	6919      	ldr	r1, [r3, #16]
 8001aa6:	4b4b      	ldr	r3, [pc, #300]	@ (8001bd4 <HAL_ADC_PollForConversion+0x1f8>)
 8001aa8:	400b      	ands	r3, r1
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d118      	bne.n	8001ae0 <HAL_ADC_PollForConversion+0x104>
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	68d9      	ldr	r1, [r3, #12]
 8001ab4:	4b48      	ldr	r3, [pc, #288]	@ (8001bd8 <HAL_ADC_PollForConversion+0x1fc>)
 8001ab6:	400b      	ands	r3, r1
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d111      	bne.n	8001ae0 <HAL_ADC_PollForConversion+0x104>
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	6919      	ldr	r1, [r3, #16]
 8001ac2:	4b46      	ldr	r3, [pc, #280]	@ (8001bdc <HAL_ADC_PollForConversion+0x200>)
 8001ac4:	400b      	ands	r3, r1
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d108      	bne.n	8001adc <HAL_ADC_PollForConversion+0x100>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	68d9      	ldr	r1, [r3, #12]
 8001ad0:	4b43      	ldr	r3, [pc, #268]	@ (8001be0 <HAL_ADC_PollForConversion+0x204>)
 8001ad2:	400b      	ands	r3, r1
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d101      	bne.n	8001adc <HAL_ADC_PollForConversion+0x100>
 8001ad8:	2314      	movs	r3, #20
 8001ada:	e020      	b.n	8001b1e <HAL_ADC_PollForConversion+0x142>
 8001adc:	2329      	movs	r3, #41	@ 0x29
 8001ade:	e01e      	b.n	8001b1e <HAL_ADC_PollForConversion+0x142>
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	6919      	ldr	r1, [r3, #16]
 8001ae6:	4b3d      	ldr	r3, [pc, #244]	@ (8001bdc <HAL_ADC_PollForConversion+0x200>)
 8001ae8:	400b      	ands	r3, r1
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d106      	bne.n	8001afc <HAL_ADC_PollForConversion+0x120>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	68d9      	ldr	r1, [r3, #12]
 8001af4:	4b3a      	ldr	r3, [pc, #232]	@ (8001be0 <HAL_ADC_PollForConversion+0x204>)
 8001af6:	400b      	ands	r3, r1
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d00d      	beq.n	8001b18 <HAL_ADC_PollForConversion+0x13c>
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	6919      	ldr	r1, [r3, #16]
 8001b02:	4b38      	ldr	r3, [pc, #224]	@ (8001be4 <HAL_ADC_PollForConversion+0x208>)
 8001b04:	400b      	ands	r3, r1
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d108      	bne.n	8001b1c <HAL_ADC_PollForConversion+0x140>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	68d9      	ldr	r1, [r3, #12]
 8001b10:	4b34      	ldr	r3, [pc, #208]	@ (8001be4 <HAL_ADC_PollForConversion+0x208>)
 8001b12:	400b      	ands	r3, r1
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d101      	bne.n	8001b1c <HAL_ADC_PollForConversion+0x140>
 8001b18:	2354      	movs	r3, #84	@ 0x54
 8001b1a:	e000      	b.n	8001b1e <HAL_ADC_PollForConversion+0x142>
 8001b1c:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8001b1e:	fb02 f303 	mul.w	r3, r2, r3
 8001b22:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001b24:	e021      	b.n	8001b6a <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b2c:	d01a      	beq.n	8001b64 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d007      	beq.n	8001b44 <HAL_ADC_PollForConversion+0x168>
 8001b34:	f7ff fdc2 	bl	80016bc <HAL_GetTick>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	697b      	ldr	r3, [r7, #20]
 8001b3c:	1ad3      	subs	r3, r2, r3
 8001b3e:	683a      	ldr	r2, [r7, #0]
 8001b40:	429a      	cmp	r2, r3
 8001b42:	d20f      	bcs.n	8001b64 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	693a      	ldr	r2, [r7, #16]
 8001b48:	429a      	cmp	r2, r3
 8001b4a:	d90b      	bls.n	8001b64 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b50:	f043 0204 	orr.w	r2, r3, #4
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 8001b60:	2303      	movs	r3, #3
 8001b62:	e030      	b.n	8001bc6 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	3301      	adds	r3, #1
 8001b68:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	693a      	ldr	r2, [r7, #16]
 8001b6e:	429a      	cmp	r2, r3
 8001b70:	d8d9      	bhi.n	8001b26 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f06f 0212 	mvn.w	r2, #18
 8001b7a:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b80:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	689b      	ldr	r3, [r3, #8]
 8001b8e:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001b92:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001b96:	d115      	bne.n	8001bc4 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d111      	bne.n	8001bc4 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ba4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bb0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d105      	bne.n	8001bc4 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bbc:	f043 0201 	orr.w	r2, r3, #1
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001bc4:	2300      	movs	r3, #0
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	371c      	adds	r7, #28
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd90      	pop	{r4, r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	20000000 	.word	0x20000000
 8001bd4:	24924924 	.word	0x24924924
 8001bd8:	00924924 	.word	0x00924924
 8001bdc:	12492492 	.word	0x12492492
 8001be0:	00492492 	.word	0x00492492
 8001be4:	00249249 	.word	0x00249249

08001be8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b083      	sub	sp, #12
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	370c      	adds	r7, #12
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bc80      	pop	{r7}
 8001bfe:	4770      	bx	lr

08001c00 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001c00:	b480      	push	{r7}
 8001c02:	b085      	sub	sp, #20
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
 8001c08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001c18:	2b01      	cmp	r3, #1
 8001c1a:	d101      	bne.n	8001c20 <HAL_ADC_ConfigChannel+0x20>
 8001c1c:	2302      	movs	r3, #2
 8001c1e:	e0dc      	b.n	8001dda <HAL_ADC_ConfigChannel+0x1da>
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2201      	movs	r2, #1
 8001c24:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	2b06      	cmp	r3, #6
 8001c2e:	d81c      	bhi.n	8001c6a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	685a      	ldr	r2, [r3, #4]
 8001c3a:	4613      	mov	r3, r2
 8001c3c:	009b      	lsls	r3, r3, #2
 8001c3e:	4413      	add	r3, r2
 8001c40:	3b05      	subs	r3, #5
 8001c42:	221f      	movs	r2, #31
 8001c44:	fa02 f303 	lsl.w	r3, r2, r3
 8001c48:	43db      	mvns	r3, r3
 8001c4a:	4019      	ands	r1, r3
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	6818      	ldr	r0, [r3, #0]
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	685a      	ldr	r2, [r3, #4]
 8001c54:	4613      	mov	r3, r2
 8001c56:	009b      	lsls	r3, r3, #2
 8001c58:	4413      	add	r3, r2
 8001c5a:	3b05      	subs	r3, #5
 8001c5c:	fa00 f203 	lsl.w	r2, r0, r3
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	430a      	orrs	r2, r1
 8001c66:	635a      	str	r2, [r3, #52]	@ 0x34
 8001c68:	e03c      	b.n	8001ce4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	2b0c      	cmp	r3, #12
 8001c70:	d81c      	bhi.n	8001cac <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	685a      	ldr	r2, [r3, #4]
 8001c7c:	4613      	mov	r3, r2
 8001c7e:	009b      	lsls	r3, r3, #2
 8001c80:	4413      	add	r3, r2
 8001c82:	3b23      	subs	r3, #35	@ 0x23
 8001c84:	221f      	movs	r2, #31
 8001c86:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8a:	43db      	mvns	r3, r3
 8001c8c:	4019      	ands	r1, r3
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	6818      	ldr	r0, [r3, #0]
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	685a      	ldr	r2, [r3, #4]
 8001c96:	4613      	mov	r3, r2
 8001c98:	009b      	lsls	r3, r3, #2
 8001c9a:	4413      	add	r3, r2
 8001c9c:	3b23      	subs	r3, #35	@ 0x23
 8001c9e:	fa00 f203 	lsl.w	r2, r0, r3
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	430a      	orrs	r2, r1
 8001ca8:	631a      	str	r2, [r3, #48]	@ 0x30
 8001caa:	e01b      	b.n	8001ce4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	685a      	ldr	r2, [r3, #4]
 8001cb6:	4613      	mov	r3, r2
 8001cb8:	009b      	lsls	r3, r3, #2
 8001cba:	4413      	add	r3, r2
 8001cbc:	3b41      	subs	r3, #65	@ 0x41
 8001cbe:	221f      	movs	r2, #31
 8001cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc4:	43db      	mvns	r3, r3
 8001cc6:	4019      	ands	r1, r3
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	6818      	ldr	r0, [r3, #0]
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	685a      	ldr	r2, [r3, #4]
 8001cd0:	4613      	mov	r3, r2
 8001cd2:	009b      	lsls	r3, r3, #2
 8001cd4:	4413      	add	r3, r2
 8001cd6:	3b41      	subs	r3, #65	@ 0x41
 8001cd8:	fa00 f203 	lsl.w	r2, r0, r3
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	430a      	orrs	r2, r1
 8001ce2:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	2b09      	cmp	r3, #9
 8001cea:	d91c      	bls.n	8001d26 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	68d9      	ldr	r1, [r3, #12]
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	681a      	ldr	r2, [r3, #0]
 8001cf6:	4613      	mov	r3, r2
 8001cf8:	005b      	lsls	r3, r3, #1
 8001cfa:	4413      	add	r3, r2
 8001cfc:	3b1e      	subs	r3, #30
 8001cfe:	2207      	movs	r2, #7
 8001d00:	fa02 f303 	lsl.w	r3, r2, r3
 8001d04:	43db      	mvns	r3, r3
 8001d06:	4019      	ands	r1, r3
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	6898      	ldr	r0, [r3, #8]
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	681a      	ldr	r2, [r3, #0]
 8001d10:	4613      	mov	r3, r2
 8001d12:	005b      	lsls	r3, r3, #1
 8001d14:	4413      	add	r3, r2
 8001d16:	3b1e      	subs	r3, #30
 8001d18:	fa00 f203 	lsl.w	r2, r0, r3
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	430a      	orrs	r2, r1
 8001d22:	60da      	str	r2, [r3, #12]
 8001d24:	e019      	b.n	8001d5a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	6919      	ldr	r1, [r3, #16]
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	681a      	ldr	r2, [r3, #0]
 8001d30:	4613      	mov	r3, r2
 8001d32:	005b      	lsls	r3, r3, #1
 8001d34:	4413      	add	r3, r2
 8001d36:	2207      	movs	r2, #7
 8001d38:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3c:	43db      	mvns	r3, r3
 8001d3e:	4019      	ands	r1, r3
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	6898      	ldr	r0, [r3, #8]
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	681a      	ldr	r2, [r3, #0]
 8001d48:	4613      	mov	r3, r2
 8001d4a:	005b      	lsls	r3, r3, #1
 8001d4c:	4413      	add	r3, r2
 8001d4e:	fa00 f203 	lsl.w	r2, r0, r3
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	430a      	orrs	r2, r1
 8001d58:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	2b10      	cmp	r3, #16
 8001d60:	d003      	beq.n	8001d6a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001d66:	2b11      	cmp	r3, #17
 8001d68:	d132      	bne.n	8001dd0 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4a1d      	ldr	r2, [pc, #116]	@ (8001de4 <HAL_ADC_ConfigChannel+0x1e4>)
 8001d70:	4293      	cmp	r3, r2
 8001d72:	d125      	bne.n	8001dc0 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	689b      	ldr	r3, [r3, #8]
 8001d7a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d126      	bne.n	8001dd0 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	689a      	ldr	r2, [r3, #8]
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8001d90:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	2b10      	cmp	r3, #16
 8001d98:	d11a      	bne.n	8001dd0 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001d9a:	4b13      	ldr	r3, [pc, #76]	@ (8001de8 <HAL_ADC_ConfigChannel+0x1e8>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4a13      	ldr	r2, [pc, #76]	@ (8001dec <HAL_ADC_ConfigChannel+0x1ec>)
 8001da0:	fba2 2303 	umull	r2, r3, r2, r3
 8001da4:	0c9a      	lsrs	r2, r3, #18
 8001da6:	4613      	mov	r3, r2
 8001da8:	009b      	lsls	r3, r3, #2
 8001daa:	4413      	add	r3, r2
 8001dac:	005b      	lsls	r3, r3, #1
 8001dae:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001db0:	e002      	b.n	8001db8 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001db2:	68bb      	ldr	r3, [r7, #8]
 8001db4:	3b01      	subs	r3, #1
 8001db6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001db8:	68bb      	ldr	r3, [r7, #8]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d1f9      	bne.n	8001db2 <HAL_ADC_ConfigChannel+0x1b2>
 8001dbe:	e007      	b.n	8001dd0 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dc4:	f043 0220 	orr.w	r2, r3, #32
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001dcc:	2301      	movs	r3, #1
 8001dce:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001dd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	3714      	adds	r7, #20
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bc80      	pop	{r7}
 8001de2:	4770      	bx	lr
 8001de4:	40012400 	.word	0x40012400
 8001de8:	20000000 	.word	0x20000000
 8001dec:	431bde83 	.word	0x431bde83

08001df0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b084      	sub	sp, #16
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	689b      	ldr	r3, [r3, #8]
 8001e06:	f003 0301 	and.w	r3, r3, #1
 8001e0a:	2b01      	cmp	r3, #1
 8001e0c:	d040      	beq.n	8001e90 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	689a      	ldr	r2, [r3, #8]
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f042 0201 	orr.w	r2, r2, #1
 8001e1c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001e1e:	4b1f      	ldr	r3, [pc, #124]	@ (8001e9c <ADC_Enable+0xac>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4a1f      	ldr	r2, [pc, #124]	@ (8001ea0 <ADC_Enable+0xb0>)
 8001e24:	fba2 2303 	umull	r2, r3, r2, r3
 8001e28:	0c9b      	lsrs	r3, r3, #18
 8001e2a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001e2c:	e002      	b.n	8001e34 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001e2e:	68bb      	ldr	r3, [r7, #8]
 8001e30:	3b01      	subs	r3, #1
 8001e32:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001e34:	68bb      	ldr	r3, [r7, #8]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d1f9      	bne.n	8001e2e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001e3a:	f7ff fc3f 	bl	80016bc <HAL_GetTick>
 8001e3e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001e40:	e01f      	b.n	8001e82 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001e42:	f7ff fc3b 	bl	80016bc <HAL_GetTick>
 8001e46:	4602      	mov	r2, r0
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	1ad3      	subs	r3, r2, r3
 8001e4c:	2b02      	cmp	r3, #2
 8001e4e:	d918      	bls.n	8001e82 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	689b      	ldr	r3, [r3, #8]
 8001e56:	f003 0301 	and.w	r3, r3, #1
 8001e5a:	2b01      	cmp	r3, #1
 8001e5c:	d011      	beq.n	8001e82 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e62:	f043 0210 	orr.w	r2, r3, #16
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e6e:	f043 0201 	orr.w	r2, r3, #1
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2200      	movs	r2, #0
 8001e7a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e007      	b.n	8001e92 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	689b      	ldr	r3, [r3, #8]
 8001e88:	f003 0301 	and.w	r3, r3, #1
 8001e8c:	2b01      	cmp	r3, #1
 8001e8e:	d1d8      	bne.n	8001e42 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001e90:	2300      	movs	r3, #0
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	3710      	adds	r7, #16
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	20000000 	.word	0x20000000
 8001ea0:	431bde83 	.word	0x431bde83

08001ea4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b084      	sub	sp, #16
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001eac:	2300      	movs	r3, #0
 8001eae:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	689b      	ldr	r3, [r3, #8]
 8001eb6:	f003 0301 	and.w	r3, r3, #1
 8001eba:	2b01      	cmp	r3, #1
 8001ebc:	d12e      	bne.n	8001f1c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	689a      	ldr	r2, [r3, #8]
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f022 0201 	bic.w	r2, r2, #1
 8001ecc:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001ece:	f7ff fbf5 	bl	80016bc <HAL_GetTick>
 8001ed2:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001ed4:	e01b      	b.n	8001f0e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001ed6:	f7ff fbf1 	bl	80016bc <HAL_GetTick>
 8001eda:	4602      	mov	r2, r0
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	1ad3      	subs	r3, r2, r3
 8001ee0:	2b02      	cmp	r3, #2
 8001ee2:	d914      	bls.n	8001f0e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	689b      	ldr	r3, [r3, #8]
 8001eea:	f003 0301 	and.w	r3, r3, #1
 8001eee:	2b01      	cmp	r3, #1
 8001ef0:	d10d      	bne.n	8001f0e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ef6:	f043 0210 	orr.w	r2, r3, #16
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f02:	f043 0201 	orr.w	r2, r3, #1
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	e007      	b.n	8001f1e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	689b      	ldr	r3, [r3, #8]
 8001f14:	f003 0301 	and.w	r3, r3, #1
 8001f18:	2b01      	cmp	r3, #1
 8001f1a:	d0dc      	beq.n	8001ed6 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001f1c:	2300      	movs	r3, #0
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	3710      	adds	r7, #16
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}
	...

08001f28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b085      	sub	sp, #20
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	f003 0307 	and.w	r3, r3, #7
 8001f36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f38:	4b0c      	ldr	r3, [pc, #48]	@ (8001f6c <__NVIC_SetPriorityGrouping+0x44>)
 8001f3a:	68db      	ldr	r3, [r3, #12]
 8001f3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f3e:	68ba      	ldr	r2, [r7, #8]
 8001f40:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001f44:	4013      	ands	r3, r2
 8001f46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f4c:	68bb      	ldr	r3, [r7, #8]
 8001f4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f50:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001f54:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f5a:	4a04      	ldr	r2, [pc, #16]	@ (8001f6c <__NVIC_SetPriorityGrouping+0x44>)
 8001f5c:	68bb      	ldr	r3, [r7, #8]
 8001f5e:	60d3      	str	r3, [r2, #12]
}
 8001f60:	bf00      	nop
 8001f62:	3714      	adds	r7, #20
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bc80      	pop	{r7}
 8001f68:	4770      	bx	lr
 8001f6a:	bf00      	nop
 8001f6c:	e000ed00 	.word	0xe000ed00

08001f70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f70:	b480      	push	{r7}
 8001f72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f74:	4b04      	ldr	r3, [pc, #16]	@ (8001f88 <__NVIC_GetPriorityGrouping+0x18>)
 8001f76:	68db      	ldr	r3, [r3, #12]
 8001f78:	0a1b      	lsrs	r3, r3, #8
 8001f7a:	f003 0307 	and.w	r3, r3, #7
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bc80      	pop	{r7}
 8001f84:	4770      	bx	lr
 8001f86:	bf00      	nop
 8001f88:	e000ed00 	.word	0xe000ed00

08001f8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b083      	sub	sp, #12
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	4603      	mov	r3, r0
 8001f94:	6039      	str	r1, [r7, #0]
 8001f96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	db0a      	blt.n	8001fb6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	b2da      	uxtb	r2, r3
 8001fa4:	490c      	ldr	r1, [pc, #48]	@ (8001fd8 <__NVIC_SetPriority+0x4c>)
 8001fa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001faa:	0112      	lsls	r2, r2, #4
 8001fac:	b2d2      	uxtb	r2, r2
 8001fae:	440b      	add	r3, r1
 8001fb0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fb4:	e00a      	b.n	8001fcc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	b2da      	uxtb	r2, r3
 8001fba:	4908      	ldr	r1, [pc, #32]	@ (8001fdc <__NVIC_SetPriority+0x50>)
 8001fbc:	79fb      	ldrb	r3, [r7, #7]
 8001fbe:	f003 030f 	and.w	r3, r3, #15
 8001fc2:	3b04      	subs	r3, #4
 8001fc4:	0112      	lsls	r2, r2, #4
 8001fc6:	b2d2      	uxtb	r2, r2
 8001fc8:	440b      	add	r3, r1
 8001fca:	761a      	strb	r2, [r3, #24]
}
 8001fcc:	bf00      	nop
 8001fce:	370c      	adds	r7, #12
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bc80      	pop	{r7}
 8001fd4:	4770      	bx	lr
 8001fd6:	bf00      	nop
 8001fd8:	e000e100 	.word	0xe000e100
 8001fdc:	e000ed00 	.word	0xe000ed00

08001fe0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b089      	sub	sp, #36	@ 0x24
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	60f8      	str	r0, [r7, #12]
 8001fe8:	60b9      	str	r1, [r7, #8]
 8001fea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	f003 0307 	and.w	r3, r3, #7
 8001ff2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ff4:	69fb      	ldr	r3, [r7, #28]
 8001ff6:	f1c3 0307 	rsb	r3, r3, #7
 8001ffa:	2b04      	cmp	r3, #4
 8001ffc:	bf28      	it	cs
 8001ffe:	2304      	movcs	r3, #4
 8002000:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002002:	69fb      	ldr	r3, [r7, #28]
 8002004:	3304      	adds	r3, #4
 8002006:	2b06      	cmp	r3, #6
 8002008:	d902      	bls.n	8002010 <NVIC_EncodePriority+0x30>
 800200a:	69fb      	ldr	r3, [r7, #28]
 800200c:	3b03      	subs	r3, #3
 800200e:	e000      	b.n	8002012 <NVIC_EncodePriority+0x32>
 8002010:	2300      	movs	r3, #0
 8002012:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002014:	f04f 32ff 	mov.w	r2, #4294967295
 8002018:	69bb      	ldr	r3, [r7, #24]
 800201a:	fa02 f303 	lsl.w	r3, r2, r3
 800201e:	43da      	mvns	r2, r3
 8002020:	68bb      	ldr	r3, [r7, #8]
 8002022:	401a      	ands	r2, r3
 8002024:	697b      	ldr	r3, [r7, #20]
 8002026:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002028:	f04f 31ff 	mov.w	r1, #4294967295
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	fa01 f303 	lsl.w	r3, r1, r3
 8002032:	43d9      	mvns	r1, r3
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002038:	4313      	orrs	r3, r2
         );
}
 800203a:	4618      	mov	r0, r3
 800203c:	3724      	adds	r7, #36	@ 0x24
 800203e:	46bd      	mov	sp, r7
 8002040:	bc80      	pop	{r7}
 8002042:	4770      	bx	lr

08002044 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b082      	sub	sp, #8
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	3b01      	subs	r3, #1
 8002050:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002054:	d301      	bcc.n	800205a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002056:	2301      	movs	r3, #1
 8002058:	e00f      	b.n	800207a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800205a:	4a0a      	ldr	r2, [pc, #40]	@ (8002084 <SysTick_Config+0x40>)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	3b01      	subs	r3, #1
 8002060:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002062:	210f      	movs	r1, #15
 8002064:	f04f 30ff 	mov.w	r0, #4294967295
 8002068:	f7ff ff90 	bl	8001f8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800206c:	4b05      	ldr	r3, [pc, #20]	@ (8002084 <SysTick_Config+0x40>)
 800206e:	2200      	movs	r2, #0
 8002070:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002072:	4b04      	ldr	r3, [pc, #16]	@ (8002084 <SysTick_Config+0x40>)
 8002074:	2207      	movs	r2, #7
 8002076:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002078:	2300      	movs	r3, #0
}
 800207a:	4618      	mov	r0, r3
 800207c:	3708      	adds	r7, #8
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}
 8002082:	bf00      	nop
 8002084:	e000e010 	.word	0xe000e010

08002088 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b082      	sub	sp, #8
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002090:	6878      	ldr	r0, [r7, #4]
 8002092:	f7ff ff49 	bl	8001f28 <__NVIC_SetPriorityGrouping>
}
 8002096:	bf00      	nop
 8002098:	3708      	adds	r7, #8
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}

0800209e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800209e:	b580      	push	{r7, lr}
 80020a0:	b086      	sub	sp, #24
 80020a2:	af00      	add	r7, sp, #0
 80020a4:	4603      	mov	r3, r0
 80020a6:	60b9      	str	r1, [r7, #8]
 80020a8:	607a      	str	r2, [r7, #4]
 80020aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80020ac:	2300      	movs	r3, #0
 80020ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020b0:	f7ff ff5e 	bl	8001f70 <__NVIC_GetPriorityGrouping>
 80020b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020b6:	687a      	ldr	r2, [r7, #4]
 80020b8:	68b9      	ldr	r1, [r7, #8]
 80020ba:	6978      	ldr	r0, [r7, #20]
 80020bc:	f7ff ff90 	bl	8001fe0 <NVIC_EncodePriority>
 80020c0:	4602      	mov	r2, r0
 80020c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020c6:	4611      	mov	r1, r2
 80020c8:	4618      	mov	r0, r3
 80020ca:	f7ff ff5f 	bl	8001f8c <__NVIC_SetPriority>
}
 80020ce:	bf00      	nop
 80020d0:	3718      	adds	r7, #24
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}

080020d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020d6:	b580      	push	{r7, lr}
 80020d8:	b082      	sub	sp, #8
 80020da:	af00      	add	r7, sp, #0
 80020dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020de:	6878      	ldr	r0, [r7, #4]
 80020e0:	f7ff ffb0 	bl	8002044 <SysTick_Config>
 80020e4:	4603      	mov	r3, r0
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	3708      	adds	r7, #8
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}
	...

080020f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b08b      	sub	sp, #44	@ 0x2c
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
 80020f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80020fa:	2300      	movs	r3, #0
 80020fc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80020fe:	2300      	movs	r3, #0
 8002100:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002102:	e169      	b.n	80023d8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002104:	2201      	movs	r2, #1
 8002106:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002108:	fa02 f303 	lsl.w	r3, r2, r3
 800210c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	69fa      	ldr	r2, [r7, #28]
 8002114:	4013      	ands	r3, r2
 8002116:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002118:	69ba      	ldr	r2, [r7, #24]
 800211a:	69fb      	ldr	r3, [r7, #28]
 800211c:	429a      	cmp	r2, r3
 800211e:	f040 8158 	bne.w	80023d2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	4a9a      	ldr	r2, [pc, #616]	@ (8002390 <HAL_GPIO_Init+0x2a0>)
 8002128:	4293      	cmp	r3, r2
 800212a:	d05e      	beq.n	80021ea <HAL_GPIO_Init+0xfa>
 800212c:	4a98      	ldr	r2, [pc, #608]	@ (8002390 <HAL_GPIO_Init+0x2a0>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d875      	bhi.n	800221e <HAL_GPIO_Init+0x12e>
 8002132:	4a98      	ldr	r2, [pc, #608]	@ (8002394 <HAL_GPIO_Init+0x2a4>)
 8002134:	4293      	cmp	r3, r2
 8002136:	d058      	beq.n	80021ea <HAL_GPIO_Init+0xfa>
 8002138:	4a96      	ldr	r2, [pc, #600]	@ (8002394 <HAL_GPIO_Init+0x2a4>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d86f      	bhi.n	800221e <HAL_GPIO_Init+0x12e>
 800213e:	4a96      	ldr	r2, [pc, #600]	@ (8002398 <HAL_GPIO_Init+0x2a8>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d052      	beq.n	80021ea <HAL_GPIO_Init+0xfa>
 8002144:	4a94      	ldr	r2, [pc, #592]	@ (8002398 <HAL_GPIO_Init+0x2a8>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d869      	bhi.n	800221e <HAL_GPIO_Init+0x12e>
 800214a:	4a94      	ldr	r2, [pc, #592]	@ (800239c <HAL_GPIO_Init+0x2ac>)
 800214c:	4293      	cmp	r3, r2
 800214e:	d04c      	beq.n	80021ea <HAL_GPIO_Init+0xfa>
 8002150:	4a92      	ldr	r2, [pc, #584]	@ (800239c <HAL_GPIO_Init+0x2ac>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d863      	bhi.n	800221e <HAL_GPIO_Init+0x12e>
 8002156:	4a92      	ldr	r2, [pc, #584]	@ (80023a0 <HAL_GPIO_Init+0x2b0>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d046      	beq.n	80021ea <HAL_GPIO_Init+0xfa>
 800215c:	4a90      	ldr	r2, [pc, #576]	@ (80023a0 <HAL_GPIO_Init+0x2b0>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d85d      	bhi.n	800221e <HAL_GPIO_Init+0x12e>
 8002162:	2b12      	cmp	r3, #18
 8002164:	d82a      	bhi.n	80021bc <HAL_GPIO_Init+0xcc>
 8002166:	2b12      	cmp	r3, #18
 8002168:	d859      	bhi.n	800221e <HAL_GPIO_Init+0x12e>
 800216a:	a201      	add	r2, pc, #4	@ (adr r2, 8002170 <HAL_GPIO_Init+0x80>)
 800216c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002170:	080021eb 	.word	0x080021eb
 8002174:	080021c5 	.word	0x080021c5
 8002178:	080021d7 	.word	0x080021d7
 800217c:	08002219 	.word	0x08002219
 8002180:	0800221f 	.word	0x0800221f
 8002184:	0800221f 	.word	0x0800221f
 8002188:	0800221f 	.word	0x0800221f
 800218c:	0800221f 	.word	0x0800221f
 8002190:	0800221f 	.word	0x0800221f
 8002194:	0800221f 	.word	0x0800221f
 8002198:	0800221f 	.word	0x0800221f
 800219c:	0800221f 	.word	0x0800221f
 80021a0:	0800221f 	.word	0x0800221f
 80021a4:	0800221f 	.word	0x0800221f
 80021a8:	0800221f 	.word	0x0800221f
 80021ac:	0800221f 	.word	0x0800221f
 80021b0:	0800221f 	.word	0x0800221f
 80021b4:	080021cd 	.word	0x080021cd
 80021b8:	080021e1 	.word	0x080021e1
 80021bc:	4a79      	ldr	r2, [pc, #484]	@ (80023a4 <HAL_GPIO_Init+0x2b4>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d013      	beq.n	80021ea <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80021c2:	e02c      	b.n	800221e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	68db      	ldr	r3, [r3, #12]
 80021c8:	623b      	str	r3, [r7, #32]
          break;
 80021ca:	e029      	b.n	8002220 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	68db      	ldr	r3, [r3, #12]
 80021d0:	3304      	adds	r3, #4
 80021d2:	623b      	str	r3, [r7, #32]
          break;
 80021d4:	e024      	b.n	8002220 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	68db      	ldr	r3, [r3, #12]
 80021da:	3308      	adds	r3, #8
 80021dc:	623b      	str	r3, [r7, #32]
          break;
 80021de:	e01f      	b.n	8002220 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	68db      	ldr	r3, [r3, #12]
 80021e4:	330c      	adds	r3, #12
 80021e6:	623b      	str	r3, [r7, #32]
          break;
 80021e8:	e01a      	b.n	8002220 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	689b      	ldr	r3, [r3, #8]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d102      	bne.n	80021f8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80021f2:	2304      	movs	r3, #4
 80021f4:	623b      	str	r3, [r7, #32]
          break;
 80021f6:	e013      	b.n	8002220 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	689b      	ldr	r3, [r3, #8]
 80021fc:	2b01      	cmp	r3, #1
 80021fe:	d105      	bne.n	800220c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002200:	2308      	movs	r3, #8
 8002202:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	69fa      	ldr	r2, [r7, #28]
 8002208:	611a      	str	r2, [r3, #16]
          break;
 800220a:	e009      	b.n	8002220 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800220c:	2308      	movs	r3, #8
 800220e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	69fa      	ldr	r2, [r7, #28]
 8002214:	615a      	str	r2, [r3, #20]
          break;
 8002216:	e003      	b.n	8002220 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002218:	2300      	movs	r3, #0
 800221a:	623b      	str	r3, [r7, #32]
          break;
 800221c:	e000      	b.n	8002220 <HAL_GPIO_Init+0x130>
          break;
 800221e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002220:	69bb      	ldr	r3, [r7, #24]
 8002222:	2bff      	cmp	r3, #255	@ 0xff
 8002224:	d801      	bhi.n	800222a <HAL_GPIO_Init+0x13a>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	e001      	b.n	800222e <HAL_GPIO_Init+0x13e>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	3304      	adds	r3, #4
 800222e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002230:	69bb      	ldr	r3, [r7, #24]
 8002232:	2bff      	cmp	r3, #255	@ 0xff
 8002234:	d802      	bhi.n	800223c <HAL_GPIO_Init+0x14c>
 8002236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002238:	009b      	lsls	r3, r3, #2
 800223a:	e002      	b.n	8002242 <HAL_GPIO_Init+0x152>
 800223c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800223e:	3b08      	subs	r3, #8
 8002240:	009b      	lsls	r3, r3, #2
 8002242:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002244:	697b      	ldr	r3, [r7, #20]
 8002246:	681a      	ldr	r2, [r3, #0]
 8002248:	210f      	movs	r1, #15
 800224a:	693b      	ldr	r3, [r7, #16]
 800224c:	fa01 f303 	lsl.w	r3, r1, r3
 8002250:	43db      	mvns	r3, r3
 8002252:	401a      	ands	r2, r3
 8002254:	6a39      	ldr	r1, [r7, #32]
 8002256:	693b      	ldr	r3, [r7, #16]
 8002258:	fa01 f303 	lsl.w	r3, r1, r3
 800225c:	431a      	orrs	r2, r3
 800225e:	697b      	ldr	r3, [r7, #20]
 8002260:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800226a:	2b00      	cmp	r3, #0
 800226c:	f000 80b1 	beq.w	80023d2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002270:	4b4d      	ldr	r3, [pc, #308]	@ (80023a8 <HAL_GPIO_Init+0x2b8>)
 8002272:	699b      	ldr	r3, [r3, #24]
 8002274:	4a4c      	ldr	r2, [pc, #304]	@ (80023a8 <HAL_GPIO_Init+0x2b8>)
 8002276:	f043 0301 	orr.w	r3, r3, #1
 800227a:	6193      	str	r3, [r2, #24]
 800227c:	4b4a      	ldr	r3, [pc, #296]	@ (80023a8 <HAL_GPIO_Init+0x2b8>)
 800227e:	699b      	ldr	r3, [r3, #24]
 8002280:	f003 0301 	and.w	r3, r3, #1
 8002284:	60bb      	str	r3, [r7, #8]
 8002286:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002288:	4a48      	ldr	r2, [pc, #288]	@ (80023ac <HAL_GPIO_Init+0x2bc>)
 800228a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800228c:	089b      	lsrs	r3, r3, #2
 800228e:	3302      	adds	r3, #2
 8002290:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002294:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002296:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002298:	f003 0303 	and.w	r3, r3, #3
 800229c:	009b      	lsls	r3, r3, #2
 800229e:	220f      	movs	r2, #15
 80022a0:	fa02 f303 	lsl.w	r3, r2, r3
 80022a4:	43db      	mvns	r3, r3
 80022a6:	68fa      	ldr	r2, [r7, #12]
 80022a8:	4013      	ands	r3, r2
 80022aa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	4a40      	ldr	r2, [pc, #256]	@ (80023b0 <HAL_GPIO_Init+0x2c0>)
 80022b0:	4293      	cmp	r3, r2
 80022b2:	d013      	beq.n	80022dc <HAL_GPIO_Init+0x1ec>
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	4a3f      	ldr	r2, [pc, #252]	@ (80023b4 <HAL_GPIO_Init+0x2c4>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d00d      	beq.n	80022d8 <HAL_GPIO_Init+0x1e8>
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	4a3e      	ldr	r2, [pc, #248]	@ (80023b8 <HAL_GPIO_Init+0x2c8>)
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d007      	beq.n	80022d4 <HAL_GPIO_Init+0x1e4>
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	4a3d      	ldr	r2, [pc, #244]	@ (80023bc <HAL_GPIO_Init+0x2cc>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d101      	bne.n	80022d0 <HAL_GPIO_Init+0x1e0>
 80022cc:	2303      	movs	r3, #3
 80022ce:	e006      	b.n	80022de <HAL_GPIO_Init+0x1ee>
 80022d0:	2304      	movs	r3, #4
 80022d2:	e004      	b.n	80022de <HAL_GPIO_Init+0x1ee>
 80022d4:	2302      	movs	r3, #2
 80022d6:	e002      	b.n	80022de <HAL_GPIO_Init+0x1ee>
 80022d8:	2301      	movs	r3, #1
 80022da:	e000      	b.n	80022de <HAL_GPIO_Init+0x1ee>
 80022dc:	2300      	movs	r3, #0
 80022de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80022e0:	f002 0203 	and.w	r2, r2, #3
 80022e4:	0092      	lsls	r2, r2, #2
 80022e6:	4093      	lsls	r3, r2
 80022e8:	68fa      	ldr	r2, [r7, #12]
 80022ea:	4313      	orrs	r3, r2
 80022ec:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80022ee:	492f      	ldr	r1, [pc, #188]	@ (80023ac <HAL_GPIO_Init+0x2bc>)
 80022f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022f2:	089b      	lsrs	r3, r3, #2
 80022f4:	3302      	adds	r3, #2
 80022f6:	68fa      	ldr	r2, [r7, #12]
 80022f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002304:	2b00      	cmp	r3, #0
 8002306:	d006      	beq.n	8002316 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002308:	4b2d      	ldr	r3, [pc, #180]	@ (80023c0 <HAL_GPIO_Init+0x2d0>)
 800230a:	689a      	ldr	r2, [r3, #8]
 800230c:	492c      	ldr	r1, [pc, #176]	@ (80023c0 <HAL_GPIO_Init+0x2d0>)
 800230e:	69bb      	ldr	r3, [r7, #24]
 8002310:	4313      	orrs	r3, r2
 8002312:	608b      	str	r3, [r1, #8]
 8002314:	e006      	b.n	8002324 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002316:	4b2a      	ldr	r3, [pc, #168]	@ (80023c0 <HAL_GPIO_Init+0x2d0>)
 8002318:	689a      	ldr	r2, [r3, #8]
 800231a:	69bb      	ldr	r3, [r7, #24]
 800231c:	43db      	mvns	r3, r3
 800231e:	4928      	ldr	r1, [pc, #160]	@ (80023c0 <HAL_GPIO_Init+0x2d0>)
 8002320:	4013      	ands	r3, r2
 8002322:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800232c:	2b00      	cmp	r3, #0
 800232e:	d006      	beq.n	800233e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002330:	4b23      	ldr	r3, [pc, #140]	@ (80023c0 <HAL_GPIO_Init+0x2d0>)
 8002332:	68da      	ldr	r2, [r3, #12]
 8002334:	4922      	ldr	r1, [pc, #136]	@ (80023c0 <HAL_GPIO_Init+0x2d0>)
 8002336:	69bb      	ldr	r3, [r7, #24]
 8002338:	4313      	orrs	r3, r2
 800233a:	60cb      	str	r3, [r1, #12]
 800233c:	e006      	b.n	800234c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800233e:	4b20      	ldr	r3, [pc, #128]	@ (80023c0 <HAL_GPIO_Init+0x2d0>)
 8002340:	68da      	ldr	r2, [r3, #12]
 8002342:	69bb      	ldr	r3, [r7, #24]
 8002344:	43db      	mvns	r3, r3
 8002346:	491e      	ldr	r1, [pc, #120]	@ (80023c0 <HAL_GPIO_Init+0x2d0>)
 8002348:	4013      	ands	r3, r2
 800234a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002354:	2b00      	cmp	r3, #0
 8002356:	d006      	beq.n	8002366 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002358:	4b19      	ldr	r3, [pc, #100]	@ (80023c0 <HAL_GPIO_Init+0x2d0>)
 800235a:	685a      	ldr	r2, [r3, #4]
 800235c:	4918      	ldr	r1, [pc, #96]	@ (80023c0 <HAL_GPIO_Init+0x2d0>)
 800235e:	69bb      	ldr	r3, [r7, #24]
 8002360:	4313      	orrs	r3, r2
 8002362:	604b      	str	r3, [r1, #4]
 8002364:	e006      	b.n	8002374 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002366:	4b16      	ldr	r3, [pc, #88]	@ (80023c0 <HAL_GPIO_Init+0x2d0>)
 8002368:	685a      	ldr	r2, [r3, #4]
 800236a:	69bb      	ldr	r3, [r7, #24]
 800236c:	43db      	mvns	r3, r3
 800236e:	4914      	ldr	r1, [pc, #80]	@ (80023c0 <HAL_GPIO_Init+0x2d0>)
 8002370:	4013      	ands	r3, r2
 8002372:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800237c:	2b00      	cmp	r3, #0
 800237e:	d021      	beq.n	80023c4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002380:	4b0f      	ldr	r3, [pc, #60]	@ (80023c0 <HAL_GPIO_Init+0x2d0>)
 8002382:	681a      	ldr	r2, [r3, #0]
 8002384:	490e      	ldr	r1, [pc, #56]	@ (80023c0 <HAL_GPIO_Init+0x2d0>)
 8002386:	69bb      	ldr	r3, [r7, #24]
 8002388:	4313      	orrs	r3, r2
 800238a:	600b      	str	r3, [r1, #0]
 800238c:	e021      	b.n	80023d2 <HAL_GPIO_Init+0x2e2>
 800238e:	bf00      	nop
 8002390:	10320000 	.word	0x10320000
 8002394:	10310000 	.word	0x10310000
 8002398:	10220000 	.word	0x10220000
 800239c:	10210000 	.word	0x10210000
 80023a0:	10120000 	.word	0x10120000
 80023a4:	10110000 	.word	0x10110000
 80023a8:	40021000 	.word	0x40021000
 80023ac:	40010000 	.word	0x40010000
 80023b0:	40010800 	.word	0x40010800
 80023b4:	40010c00 	.word	0x40010c00
 80023b8:	40011000 	.word	0x40011000
 80023bc:	40011400 	.word	0x40011400
 80023c0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80023c4:	4b0b      	ldr	r3, [pc, #44]	@ (80023f4 <HAL_GPIO_Init+0x304>)
 80023c6:	681a      	ldr	r2, [r3, #0]
 80023c8:	69bb      	ldr	r3, [r7, #24]
 80023ca:	43db      	mvns	r3, r3
 80023cc:	4909      	ldr	r1, [pc, #36]	@ (80023f4 <HAL_GPIO_Init+0x304>)
 80023ce:	4013      	ands	r3, r2
 80023d0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80023d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023d4:	3301      	adds	r3, #1
 80023d6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	681a      	ldr	r2, [r3, #0]
 80023dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023de:	fa22 f303 	lsr.w	r3, r2, r3
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	f47f ae8e 	bne.w	8002104 <HAL_GPIO_Init+0x14>
  }
}
 80023e8:	bf00      	nop
 80023ea:	bf00      	nop
 80023ec:	372c      	adds	r7, #44	@ 0x2c
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bc80      	pop	{r7}
 80023f2:	4770      	bx	lr
 80023f4:	40010400 	.word	0x40010400

080023f8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b086      	sub	sp, #24
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d101      	bne.n	800240a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002406:	2301      	movs	r3, #1
 8002408:	e272      	b.n	80028f0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f003 0301 	and.w	r3, r3, #1
 8002412:	2b00      	cmp	r3, #0
 8002414:	f000 8087 	beq.w	8002526 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002418:	4b92      	ldr	r3, [pc, #584]	@ (8002664 <HAL_RCC_OscConfig+0x26c>)
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	f003 030c 	and.w	r3, r3, #12
 8002420:	2b04      	cmp	r3, #4
 8002422:	d00c      	beq.n	800243e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002424:	4b8f      	ldr	r3, [pc, #572]	@ (8002664 <HAL_RCC_OscConfig+0x26c>)
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	f003 030c 	and.w	r3, r3, #12
 800242c:	2b08      	cmp	r3, #8
 800242e:	d112      	bne.n	8002456 <HAL_RCC_OscConfig+0x5e>
 8002430:	4b8c      	ldr	r3, [pc, #560]	@ (8002664 <HAL_RCC_OscConfig+0x26c>)
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002438:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800243c:	d10b      	bne.n	8002456 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800243e:	4b89      	ldr	r3, [pc, #548]	@ (8002664 <HAL_RCC_OscConfig+0x26c>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002446:	2b00      	cmp	r3, #0
 8002448:	d06c      	beq.n	8002524 <HAL_RCC_OscConfig+0x12c>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d168      	bne.n	8002524 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002452:	2301      	movs	r3, #1
 8002454:	e24c      	b.n	80028f0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800245e:	d106      	bne.n	800246e <HAL_RCC_OscConfig+0x76>
 8002460:	4b80      	ldr	r3, [pc, #512]	@ (8002664 <HAL_RCC_OscConfig+0x26c>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a7f      	ldr	r2, [pc, #508]	@ (8002664 <HAL_RCC_OscConfig+0x26c>)
 8002466:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800246a:	6013      	str	r3, [r2, #0]
 800246c:	e02e      	b.n	80024cc <HAL_RCC_OscConfig+0xd4>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d10c      	bne.n	8002490 <HAL_RCC_OscConfig+0x98>
 8002476:	4b7b      	ldr	r3, [pc, #492]	@ (8002664 <HAL_RCC_OscConfig+0x26c>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4a7a      	ldr	r2, [pc, #488]	@ (8002664 <HAL_RCC_OscConfig+0x26c>)
 800247c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002480:	6013      	str	r3, [r2, #0]
 8002482:	4b78      	ldr	r3, [pc, #480]	@ (8002664 <HAL_RCC_OscConfig+0x26c>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4a77      	ldr	r2, [pc, #476]	@ (8002664 <HAL_RCC_OscConfig+0x26c>)
 8002488:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800248c:	6013      	str	r3, [r2, #0]
 800248e:	e01d      	b.n	80024cc <HAL_RCC_OscConfig+0xd4>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002498:	d10c      	bne.n	80024b4 <HAL_RCC_OscConfig+0xbc>
 800249a:	4b72      	ldr	r3, [pc, #456]	@ (8002664 <HAL_RCC_OscConfig+0x26c>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4a71      	ldr	r2, [pc, #452]	@ (8002664 <HAL_RCC_OscConfig+0x26c>)
 80024a0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80024a4:	6013      	str	r3, [r2, #0]
 80024a6:	4b6f      	ldr	r3, [pc, #444]	@ (8002664 <HAL_RCC_OscConfig+0x26c>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4a6e      	ldr	r2, [pc, #440]	@ (8002664 <HAL_RCC_OscConfig+0x26c>)
 80024ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024b0:	6013      	str	r3, [r2, #0]
 80024b2:	e00b      	b.n	80024cc <HAL_RCC_OscConfig+0xd4>
 80024b4:	4b6b      	ldr	r3, [pc, #428]	@ (8002664 <HAL_RCC_OscConfig+0x26c>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a6a      	ldr	r2, [pc, #424]	@ (8002664 <HAL_RCC_OscConfig+0x26c>)
 80024ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80024be:	6013      	str	r3, [r2, #0]
 80024c0:	4b68      	ldr	r3, [pc, #416]	@ (8002664 <HAL_RCC_OscConfig+0x26c>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a67      	ldr	r2, [pc, #412]	@ (8002664 <HAL_RCC_OscConfig+0x26c>)
 80024c6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80024ca:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d013      	beq.n	80024fc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024d4:	f7ff f8f2 	bl	80016bc <HAL_GetTick>
 80024d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024da:	e008      	b.n	80024ee <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024dc:	f7ff f8ee 	bl	80016bc <HAL_GetTick>
 80024e0:	4602      	mov	r2, r0
 80024e2:	693b      	ldr	r3, [r7, #16]
 80024e4:	1ad3      	subs	r3, r2, r3
 80024e6:	2b64      	cmp	r3, #100	@ 0x64
 80024e8:	d901      	bls.n	80024ee <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80024ea:	2303      	movs	r3, #3
 80024ec:	e200      	b.n	80028f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024ee:	4b5d      	ldr	r3, [pc, #372]	@ (8002664 <HAL_RCC_OscConfig+0x26c>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d0f0      	beq.n	80024dc <HAL_RCC_OscConfig+0xe4>
 80024fa:	e014      	b.n	8002526 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024fc:	f7ff f8de 	bl	80016bc <HAL_GetTick>
 8002500:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002502:	e008      	b.n	8002516 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002504:	f7ff f8da 	bl	80016bc <HAL_GetTick>
 8002508:	4602      	mov	r2, r0
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	1ad3      	subs	r3, r2, r3
 800250e:	2b64      	cmp	r3, #100	@ 0x64
 8002510:	d901      	bls.n	8002516 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002512:	2303      	movs	r3, #3
 8002514:	e1ec      	b.n	80028f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002516:	4b53      	ldr	r3, [pc, #332]	@ (8002664 <HAL_RCC_OscConfig+0x26c>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800251e:	2b00      	cmp	r3, #0
 8002520:	d1f0      	bne.n	8002504 <HAL_RCC_OscConfig+0x10c>
 8002522:	e000      	b.n	8002526 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002524:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f003 0302 	and.w	r3, r3, #2
 800252e:	2b00      	cmp	r3, #0
 8002530:	d063      	beq.n	80025fa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002532:	4b4c      	ldr	r3, [pc, #304]	@ (8002664 <HAL_RCC_OscConfig+0x26c>)
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	f003 030c 	and.w	r3, r3, #12
 800253a:	2b00      	cmp	r3, #0
 800253c:	d00b      	beq.n	8002556 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800253e:	4b49      	ldr	r3, [pc, #292]	@ (8002664 <HAL_RCC_OscConfig+0x26c>)
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	f003 030c 	and.w	r3, r3, #12
 8002546:	2b08      	cmp	r3, #8
 8002548:	d11c      	bne.n	8002584 <HAL_RCC_OscConfig+0x18c>
 800254a:	4b46      	ldr	r3, [pc, #280]	@ (8002664 <HAL_RCC_OscConfig+0x26c>)
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002552:	2b00      	cmp	r3, #0
 8002554:	d116      	bne.n	8002584 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002556:	4b43      	ldr	r3, [pc, #268]	@ (8002664 <HAL_RCC_OscConfig+0x26c>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f003 0302 	and.w	r3, r3, #2
 800255e:	2b00      	cmp	r3, #0
 8002560:	d005      	beq.n	800256e <HAL_RCC_OscConfig+0x176>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	691b      	ldr	r3, [r3, #16]
 8002566:	2b01      	cmp	r3, #1
 8002568:	d001      	beq.n	800256e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800256a:	2301      	movs	r3, #1
 800256c:	e1c0      	b.n	80028f0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800256e:	4b3d      	ldr	r3, [pc, #244]	@ (8002664 <HAL_RCC_OscConfig+0x26c>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	695b      	ldr	r3, [r3, #20]
 800257a:	00db      	lsls	r3, r3, #3
 800257c:	4939      	ldr	r1, [pc, #228]	@ (8002664 <HAL_RCC_OscConfig+0x26c>)
 800257e:	4313      	orrs	r3, r2
 8002580:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002582:	e03a      	b.n	80025fa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	691b      	ldr	r3, [r3, #16]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d020      	beq.n	80025ce <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800258c:	4b36      	ldr	r3, [pc, #216]	@ (8002668 <HAL_RCC_OscConfig+0x270>)
 800258e:	2201      	movs	r2, #1
 8002590:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002592:	f7ff f893 	bl	80016bc <HAL_GetTick>
 8002596:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002598:	e008      	b.n	80025ac <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800259a:	f7ff f88f 	bl	80016bc <HAL_GetTick>
 800259e:	4602      	mov	r2, r0
 80025a0:	693b      	ldr	r3, [r7, #16]
 80025a2:	1ad3      	subs	r3, r2, r3
 80025a4:	2b02      	cmp	r3, #2
 80025a6:	d901      	bls.n	80025ac <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80025a8:	2303      	movs	r3, #3
 80025aa:	e1a1      	b.n	80028f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025ac:	4b2d      	ldr	r3, [pc, #180]	@ (8002664 <HAL_RCC_OscConfig+0x26c>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f003 0302 	and.w	r3, r3, #2
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d0f0      	beq.n	800259a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025b8:	4b2a      	ldr	r3, [pc, #168]	@ (8002664 <HAL_RCC_OscConfig+0x26c>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	695b      	ldr	r3, [r3, #20]
 80025c4:	00db      	lsls	r3, r3, #3
 80025c6:	4927      	ldr	r1, [pc, #156]	@ (8002664 <HAL_RCC_OscConfig+0x26c>)
 80025c8:	4313      	orrs	r3, r2
 80025ca:	600b      	str	r3, [r1, #0]
 80025cc:	e015      	b.n	80025fa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025ce:	4b26      	ldr	r3, [pc, #152]	@ (8002668 <HAL_RCC_OscConfig+0x270>)
 80025d0:	2200      	movs	r2, #0
 80025d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025d4:	f7ff f872 	bl	80016bc <HAL_GetTick>
 80025d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025da:	e008      	b.n	80025ee <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025dc:	f7ff f86e 	bl	80016bc <HAL_GetTick>
 80025e0:	4602      	mov	r2, r0
 80025e2:	693b      	ldr	r3, [r7, #16]
 80025e4:	1ad3      	subs	r3, r2, r3
 80025e6:	2b02      	cmp	r3, #2
 80025e8:	d901      	bls.n	80025ee <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80025ea:	2303      	movs	r3, #3
 80025ec:	e180      	b.n	80028f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025ee:	4b1d      	ldr	r3, [pc, #116]	@ (8002664 <HAL_RCC_OscConfig+0x26c>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f003 0302 	and.w	r3, r3, #2
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d1f0      	bne.n	80025dc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f003 0308 	and.w	r3, r3, #8
 8002602:	2b00      	cmp	r3, #0
 8002604:	d03a      	beq.n	800267c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	699b      	ldr	r3, [r3, #24]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d019      	beq.n	8002642 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800260e:	4b17      	ldr	r3, [pc, #92]	@ (800266c <HAL_RCC_OscConfig+0x274>)
 8002610:	2201      	movs	r2, #1
 8002612:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002614:	f7ff f852 	bl	80016bc <HAL_GetTick>
 8002618:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800261a:	e008      	b.n	800262e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800261c:	f7ff f84e 	bl	80016bc <HAL_GetTick>
 8002620:	4602      	mov	r2, r0
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	1ad3      	subs	r3, r2, r3
 8002626:	2b02      	cmp	r3, #2
 8002628:	d901      	bls.n	800262e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800262a:	2303      	movs	r3, #3
 800262c:	e160      	b.n	80028f0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800262e:	4b0d      	ldr	r3, [pc, #52]	@ (8002664 <HAL_RCC_OscConfig+0x26c>)
 8002630:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002632:	f003 0302 	and.w	r3, r3, #2
 8002636:	2b00      	cmp	r3, #0
 8002638:	d0f0      	beq.n	800261c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800263a:	2001      	movs	r0, #1
 800263c:	f000 face 	bl	8002bdc <RCC_Delay>
 8002640:	e01c      	b.n	800267c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002642:	4b0a      	ldr	r3, [pc, #40]	@ (800266c <HAL_RCC_OscConfig+0x274>)
 8002644:	2200      	movs	r2, #0
 8002646:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002648:	f7ff f838 	bl	80016bc <HAL_GetTick>
 800264c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800264e:	e00f      	b.n	8002670 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002650:	f7ff f834 	bl	80016bc <HAL_GetTick>
 8002654:	4602      	mov	r2, r0
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	1ad3      	subs	r3, r2, r3
 800265a:	2b02      	cmp	r3, #2
 800265c:	d908      	bls.n	8002670 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800265e:	2303      	movs	r3, #3
 8002660:	e146      	b.n	80028f0 <HAL_RCC_OscConfig+0x4f8>
 8002662:	bf00      	nop
 8002664:	40021000 	.word	0x40021000
 8002668:	42420000 	.word	0x42420000
 800266c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002670:	4b92      	ldr	r3, [pc, #584]	@ (80028bc <HAL_RCC_OscConfig+0x4c4>)
 8002672:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002674:	f003 0302 	and.w	r3, r3, #2
 8002678:	2b00      	cmp	r3, #0
 800267a:	d1e9      	bne.n	8002650 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f003 0304 	and.w	r3, r3, #4
 8002684:	2b00      	cmp	r3, #0
 8002686:	f000 80a6 	beq.w	80027d6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800268a:	2300      	movs	r3, #0
 800268c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800268e:	4b8b      	ldr	r3, [pc, #556]	@ (80028bc <HAL_RCC_OscConfig+0x4c4>)
 8002690:	69db      	ldr	r3, [r3, #28]
 8002692:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002696:	2b00      	cmp	r3, #0
 8002698:	d10d      	bne.n	80026b6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800269a:	4b88      	ldr	r3, [pc, #544]	@ (80028bc <HAL_RCC_OscConfig+0x4c4>)
 800269c:	69db      	ldr	r3, [r3, #28]
 800269e:	4a87      	ldr	r2, [pc, #540]	@ (80028bc <HAL_RCC_OscConfig+0x4c4>)
 80026a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80026a4:	61d3      	str	r3, [r2, #28]
 80026a6:	4b85      	ldr	r3, [pc, #532]	@ (80028bc <HAL_RCC_OscConfig+0x4c4>)
 80026a8:	69db      	ldr	r3, [r3, #28]
 80026aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026ae:	60bb      	str	r3, [r7, #8]
 80026b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026b2:	2301      	movs	r3, #1
 80026b4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026b6:	4b82      	ldr	r3, [pc, #520]	@ (80028c0 <HAL_RCC_OscConfig+0x4c8>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d118      	bne.n	80026f4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026c2:	4b7f      	ldr	r3, [pc, #508]	@ (80028c0 <HAL_RCC_OscConfig+0x4c8>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4a7e      	ldr	r2, [pc, #504]	@ (80028c0 <HAL_RCC_OscConfig+0x4c8>)
 80026c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026ce:	f7fe fff5 	bl	80016bc <HAL_GetTick>
 80026d2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026d4:	e008      	b.n	80026e8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026d6:	f7fe fff1 	bl	80016bc <HAL_GetTick>
 80026da:	4602      	mov	r2, r0
 80026dc:	693b      	ldr	r3, [r7, #16]
 80026de:	1ad3      	subs	r3, r2, r3
 80026e0:	2b64      	cmp	r3, #100	@ 0x64
 80026e2:	d901      	bls.n	80026e8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80026e4:	2303      	movs	r3, #3
 80026e6:	e103      	b.n	80028f0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026e8:	4b75      	ldr	r3, [pc, #468]	@ (80028c0 <HAL_RCC_OscConfig+0x4c8>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d0f0      	beq.n	80026d6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	68db      	ldr	r3, [r3, #12]
 80026f8:	2b01      	cmp	r3, #1
 80026fa:	d106      	bne.n	800270a <HAL_RCC_OscConfig+0x312>
 80026fc:	4b6f      	ldr	r3, [pc, #444]	@ (80028bc <HAL_RCC_OscConfig+0x4c4>)
 80026fe:	6a1b      	ldr	r3, [r3, #32]
 8002700:	4a6e      	ldr	r2, [pc, #440]	@ (80028bc <HAL_RCC_OscConfig+0x4c4>)
 8002702:	f043 0301 	orr.w	r3, r3, #1
 8002706:	6213      	str	r3, [r2, #32]
 8002708:	e02d      	b.n	8002766 <HAL_RCC_OscConfig+0x36e>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	68db      	ldr	r3, [r3, #12]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d10c      	bne.n	800272c <HAL_RCC_OscConfig+0x334>
 8002712:	4b6a      	ldr	r3, [pc, #424]	@ (80028bc <HAL_RCC_OscConfig+0x4c4>)
 8002714:	6a1b      	ldr	r3, [r3, #32]
 8002716:	4a69      	ldr	r2, [pc, #420]	@ (80028bc <HAL_RCC_OscConfig+0x4c4>)
 8002718:	f023 0301 	bic.w	r3, r3, #1
 800271c:	6213      	str	r3, [r2, #32]
 800271e:	4b67      	ldr	r3, [pc, #412]	@ (80028bc <HAL_RCC_OscConfig+0x4c4>)
 8002720:	6a1b      	ldr	r3, [r3, #32]
 8002722:	4a66      	ldr	r2, [pc, #408]	@ (80028bc <HAL_RCC_OscConfig+0x4c4>)
 8002724:	f023 0304 	bic.w	r3, r3, #4
 8002728:	6213      	str	r3, [r2, #32]
 800272a:	e01c      	b.n	8002766 <HAL_RCC_OscConfig+0x36e>
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	68db      	ldr	r3, [r3, #12]
 8002730:	2b05      	cmp	r3, #5
 8002732:	d10c      	bne.n	800274e <HAL_RCC_OscConfig+0x356>
 8002734:	4b61      	ldr	r3, [pc, #388]	@ (80028bc <HAL_RCC_OscConfig+0x4c4>)
 8002736:	6a1b      	ldr	r3, [r3, #32]
 8002738:	4a60      	ldr	r2, [pc, #384]	@ (80028bc <HAL_RCC_OscConfig+0x4c4>)
 800273a:	f043 0304 	orr.w	r3, r3, #4
 800273e:	6213      	str	r3, [r2, #32]
 8002740:	4b5e      	ldr	r3, [pc, #376]	@ (80028bc <HAL_RCC_OscConfig+0x4c4>)
 8002742:	6a1b      	ldr	r3, [r3, #32]
 8002744:	4a5d      	ldr	r2, [pc, #372]	@ (80028bc <HAL_RCC_OscConfig+0x4c4>)
 8002746:	f043 0301 	orr.w	r3, r3, #1
 800274a:	6213      	str	r3, [r2, #32]
 800274c:	e00b      	b.n	8002766 <HAL_RCC_OscConfig+0x36e>
 800274e:	4b5b      	ldr	r3, [pc, #364]	@ (80028bc <HAL_RCC_OscConfig+0x4c4>)
 8002750:	6a1b      	ldr	r3, [r3, #32]
 8002752:	4a5a      	ldr	r2, [pc, #360]	@ (80028bc <HAL_RCC_OscConfig+0x4c4>)
 8002754:	f023 0301 	bic.w	r3, r3, #1
 8002758:	6213      	str	r3, [r2, #32]
 800275a:	4b58      	ldr	r3, [pc, #352]	@ (80028bc <HAL_RCC_OscConfig+0x4c4>)
 800275c:	6a1b      	ldr	r3, [r3, #32]
 800275e:	4a57      	ldr	r2, [pc, #348]	@ (80028bc <HAL_RCC_OscConfig+0x4c4>)
 8002760:	f023 0304 	bic.w	r3, r3, #4
 8002764:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	68db      	ldr	r3, [r3, #12]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d015      	beq.n	800279a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800276e:	f7fe ffa5 	bl	80016bc <HAL_GetTick>
 8002772:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002774:	e00a      	b.n	800278c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002776:	f7fe ffa1 	bl	80016bc <HAL_GetTick>
 800277a:	4602      	mov	r2, r0
 800277c:	693b      	ldr	r3, [r7, #16]
 800277e:	1ad3      	subs	r3, r2, r3
 8002780:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002784:	4293      	cmp	r3, r2
 8002786:	d901      	bls.n	800278c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002788:	2303      	movs	r3, #3
 800278a:	e0b1      	b.n	80028f0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800278c:	4b4b      	ldr	r3, [pc, #300]	@ (80028bc <HAL_RCC_OscConfig+0x4c4>)
 800278e:	6a1b      	ldr	r3, [r3, #32]
 8002790:	f003 0302 	and.w	r3, r3, #2
 8002794:	2b00      	cmp	r3, #0
 8002796:	d0ee      	beq.n	8002776 <HAL_RCC_OscConfig+0x37e>
 8002798:	e014      	b.n	80027c4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800279a:	f7fe ff8f 	bl	80016bc <HAL_GetTick>
 800279e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027a0:	e00a      	b.n	80027b8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027a2:	f7fe ff8b 	bl	80016bc <HAL_GetTick>
 80027a6:	4602      	mov	r2, r0
 80027a8:	693b      	ldr	r3, [r7, #16]
 80027aa:	1ad3      	subs	r3, r2, r3
 80027ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d901      	bls.n	80027b8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80027b4:	2303      	movs	r3, #3
 80027b6:	e09b      	b.n	80028f0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027b8:	4b40      	ldr	r3, [pc, #256]	@ (80028bc <HAL_RCC_OscConfig+0x4c4>)
 80027ba:	6a1b      	ldr	r3, [r3, #32]
 80027bc:	f003 0302 	and.w	r3, r3, #2
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d1ee      	bne.n	80027a2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80027c4:	7dfb      	ldrb	r3, [r7, #23]
 80027c6:	2b01      	cmp	r3, #1
 80027c8:	d105      	bne.n	80027d6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027ca:	4b3c      	ldr	r3, [pc, #240]	@ (80028bc <HAL_RCC_OscConfig+0x4c4>)
 80027cc:	69db      	ldr	r3, [r3, #28]
 80027ce:	4a3b      	ldr	r2, [pc, #236]	@ (80028bc <HAL_RCC_OscConfig+0x4c4>)
 80027d0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80027d4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	69db      	ldr	r3, [r3, #28]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	f000 8087 	beq.w	80028ee <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80027e0:	4b36      	ldr	r3, [pc, #216]	@ (80028bc <HAL_RCC_OscConfig+0x4c4>)
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	f003 030c 	and.w	r3, r3, #12
 80027e8:	2b08      	cmp	r3, #8
 80027ea:	d061      	beq.n	80028b0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	69db      	ldr	r3, [r3, #28]
 80027f0:	2b02      	cmp	r3, #2
 80027f2:	d146      	bne.n	8002882 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027f4:	4b33      	ldr	r3, [pc, #204]	@ (80028c4 <HAL_RCC_OscConfig+0x4cc>)
 80027f6:	2200      	movs	r2, #0
 80027f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027fa:	f7fe ff5f 	bl	80016bc <HAL_GetTick>
 80027fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002800:	e008      	b.n	8002814 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002802:	f7fe ff5b 	bl	80016bc <HAL_GetTick>
 8002806:	4602      	mov	r2, r0
 8002808:	693b      	ldr	r3, [r7, #16]
 800280a:	1ad3      	subs	r3, r2, r3
 800280c:	2b02      	cmp	r3, #2
 800280e:	d901      	bls.n	8002814 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002810:	2303      	movs	r3, #3
 8002812:	e06d      	b.n	80028f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002814:	4b29      	ldr	r3, [pc, #164]	@ (80028bc <HAL_RCC_OscConfig+0x4c4>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800281c:	2b00      	cmp	r3, #0
 800281e:	d1f0      	bne.n	8002802 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6a1b      	ldr	r3, [r3, #32]
 8002824:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002828:	d108      	bne.n	800283c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800282a:	4b24      	ldr	r3, [pc, #144]	@ (80028bc <HAL_RCC_OscConfig+0x4c4>)
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	689b      	ldr	r3, [r3, #8]
 8002836:	4921      	ldr	r1, [pc, #132]	@ (80028bc <HAL_RCC_OscConfig+0x4c4>)
 8002838:	4313      	orrs	r3, r2
 800283a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800283c:	4b1f      	ldr	r3, [pc, #124]	@ (80028bc <HAL_RCC_OscConfig+0x4c4>)
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6a19      	ldr	r1, [r3, #32]
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800284c:	430b      	orrs	r3, r1
 800284e:	491b      	ldr	r1, [pc, #108]	@ (80028bc <HAL_RCC_OscConfig+0x4c4>)
 8002850:	4313      	orrs	r3, r2
 8002852:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002854:	4b1b      	ldr	r3, [pc, #108]	@ (80028c4 <HAL_RCC_OscConfig+0x4cc>)
 8002856:	2201      	movs	r2, #1
 8002858:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800285a:	f7fe ff2f 	bl	80016bc <HAL_GetTick>
 800285e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002860:	e008      	b.n	8002874 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002862:	f7fe ff2b 	bl	80016bc <HAL_GetTick>
 8002866:	4602      	mov	r2, r0
 8002868:	693b      	ldr	r3, [r7, #16]
 800286a:	1ad3      	subs	r3, r2, r3
 800286c:	2b02      	cmp	r3, #2
 800286e:	d901      	bls.n	8002874 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002870:	2303      	movs	r3, #3
 8002872:	e03d      	b.n	80028f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002874:	4b11      	ldr	r3, [pc, #68]	@ (80028bc <HAL_RCC_OscConfig+0x4c4>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800287c:	2b00      	cmp	r3, #0
 800287e:	d0f0      	beq.n	8002862 <HAL_RCC_OscConfig+0x46a>
 8002880:	e035      	b.n	80028ee <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002882:	4b10      	ldr	r3, [pc, #64]	@ (80028c4 <HAL_RCC_OscConfig+0x4cc>)
 8002884:	2200      	movs	r2, #0
 8002886:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002888:	f7fe ff18 	bl	80016bc <HAL_GetTick>
 800288c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800288e:	e008      	b.n	80028a2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002890:	f7fe ff14 	bl	80016bc <HAL_GetTick>
 8002894:	4602      	mov	r2, r0
 8002896:	693b      	ldr	r3, [r7, #16]
 8002898:	1ad3      	subs	r3, r2, r3
 800289a:	2b02      	cmp	r3, #2
 800289c:	d901      	bls.n	80028a2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800289e:	2303      	movs	r3, #3
 80028a0:	e026      	b.n	80028f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028a2:	4b06      	ldr	r3, [pc, #24]	@ (80028bc <HAL_RCC_OscConfig+0x4c4>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d1f0      	bne.n	8002890 <HAL_RCC_OscConfig+0x498>
 80028ae:	e01e      	b.n	80028ee <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	69db      	ldr	r3, [r3, #28]
 80028b4:	2b01      	cmp	r3, #1
 80028b6:	d107      	bne.n	80028c8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80028b8:	2301      	movs	r3, #1
 80028ba:	e019      	b.n	80028f0 <HAL_RCC_OscConfig+0x4f8>
 80028bc:	40021000 	.word	0x40021000
 80028c0:	40007000 	.word	0x40007000
 80028c4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80028c8:	4b0b      	ldr	r3, [pc, #44]	@ (80028f8 <HAL_RCC_OscConfig+0x500>)
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6a1b      	ldr	r3, [r3, #32]
 80028d8:	429a      	cmp	r2, r3
 80028da:	d106      	bne.n	80028ea <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028e6:	429a      	cmp	r2, r3
 80028e8:	d001      	beq.n	80028ee <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80028ea:	2301      	movs	r3, #1
 80028ec:	e000      	b.n	80028f0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80028ee:	2300      	movs	r3, #0
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	3718      	adds	r7, #24
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}
 80028f8:	40021000 	.word	0x40021000

080028fc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b084      	sub	sp, #16
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
 8002904:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d101      	bne.n	8002910 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800290c:	2301      	movs	r3, #1
 800290e:	e0d0      	b.n	8002ab2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002910:	4b6a      	ldr	r3, [pc, #424]	@ (8002abc <HAL_RCC_ClockConfig+0x1c0>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f003 0307 	and.w	r3, r3, #7
 8002918:	683a      	ldr	r2, [r7, #0]
 800291a:	429a      	cmp	r2, r3
 800291c:	d910      	bls.n	8002940 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800291e:	4b67      	ldr	r3, [pc, #412]	@ (8002abc <HAL_RCC_ClockConfig+0x1c0>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f023 0207 	bic.w	r2, r3, #7
 8002926:	4965      	ldr	r1, [pc, #404]	@ (8002abc <HAL_RCC_ClockConfig+0x1c0>)
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	4313      	orrs	r3, r2
 800292c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800292e:	4b63      	ldr	r3, [pc, #396]	@ (8002abc <HAL_RCC_ClockConfig+0x1c0>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f003 0307 	and.w	r3, r3, #7
 8002936:	683a      	ldr	r2, [r7, #0]
 8002938:	429a      	cmp	r2, r3
 800293a:	d001      	beq.n	8002940 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800293c:	2301      	movs	r3, #1
 800293e:	e0b8      	b.n	8002ab2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f003 0302 	and.w	r3, r3, #2
 8002948:	2b00      	cmp	r3, #0
 800294a:	d020      	beq.n	800298e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f003 0304 	and.w	r3, r3, #4
 8002954:	2b00      	cmp	r3, #0
 8002956:	d005      	beq.n	8002964 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002958:	4b59      	ldr	r3, [pc, #356]	@ (8002ac0 <HAL_RCC_ClockConfig+0x1c4>)
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	4a58      	ldr	r2, [pc, #352]	@ (8002ac0 <HAL_RCC_ClockConfig+0x1c4>)
 800295e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002962:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f003 0308 	and.w	r3, r3, #8
 800296c:	2b00      	cmp	r3, #0
 800296e:	d005      	beq.n	800297c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002970:	4b53      	ldr	r3, [pc, #332]	@ (8002ac0 <HAL_RCC_ClockConfig+0x1c4>)
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	4a52      	ldr	r2, [pc, #328]	@ (8002ac0 <HAL_RCC_ClockConfig+0x1c4>)
 8002976:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800297a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800297c:	4b50      	ldr	r3, [pc, #320]	@ (8002ac0 <HAL_RCC_ClockConfig+0x1c4>)
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	689b      	ldr	r3, [r3, #8]
 8002988:	494d      	ldr	r1, [pc, #308]	@ (8002ac0 <HAL_RCC_ClockConfig+0x1c4>)
 800298a:	4313      	orrs	r3, r2
 800298c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f003 0301 	and.w	r3, r3, #1
 8002996:	2b00      	cmp	r3, #0
 8002998:	d040      	beq.n	8002a1c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	2b01      	cmp	r3, #1
 80029a0:	d107      	bne.n	80029b2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029a2:	4b47      	ldr	r3, [pc, #284]	@ (8002ac0 <HAL_RCC_ClockConfig+0x1c4>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d115      	bne.n	80029da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
 80029b0:	e07f      	b.n	8002ab2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	2b02      	cmp	r3, #2
 80029b8:	d107      	bne.n	80029ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029ba:	4b41      	ldr	r3, [pc, #260]	@ (8002ac0 <HAL_RCC_ClockConfig+0x1c4>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d109      	bne.n	80029da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029c6:	2301      	movs	r3, #1
 80029c8:	e073      	b.n	8002ab2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029ca:	4b3d      	ldr	r3, [pc, #244]	@ (8002ac0 <HAL_RCC_ClockConfig+0x1c4>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f003 0302 	and.w	r3, r3, #2
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d101      	bne.n	80029da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029d6:	2301      	movs	r3, #1
 80029d8:	e06b      	b.n	8002ab2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029da:	4b39      	ldr	r3, [pc, #228]	@ (8002ac0 <HAL_RCC_ClockConfig+0x1c4>)
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	f023 0203 	bic.w	r2, r3, #3
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	4936      	ldr	r1, [pc, #216]	@ (8002ac0 <HAL_RCC_ClockConfig+0x1c4>)
 80029e8:	4313      	orrs	r3, r2
 80029ea:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029ec:	f7fe fe66 	bl	80016bc <HAL_GetTick>
 80029f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029f2:	e00a      	b.n	8002a0a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029f4:	f7fe fe62 	bl	80016bc <HAL_GetTick>
 80029f8:	4602      	mov	r2, r0
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	1ad3      	subs	r3, r2, r3
 80029fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d901      	bls.n	8002a0a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a06:	2303      	movs	r3, #3
 8002a08:	e053      	b.n	8002ab2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a0a:	4b2d      	ldr	r3, [pc, #180]	@ (8002ac0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	f003 020c 	and.w	r2, r3, #12
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	009b      	lsls	r3, r3, #2
 8002a18:	429a      	cmp	r2, r3
 8002a1a:	d1eb      	bne.n	80029f4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a1c:	4b27      	ldr	r3, [pc, #156]	@ (8002abc <HAL_RCC_ClockConfig+0x1c0>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f003 0307 	and.w	r3, r3, #7
 8002a24:	683a      	ldr	r2, [r7, #0]
 8002a26:	429a      	cmp	r2, r3
 8002a28:	d210      	bcs.n	8002a4c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a2a:	4b24      	ldr	r3, [pc, #144]	@ (8002abc <HAL_RCC_ClockConfig+0x1c0>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f023 0207 	bic.w	r2, r3, #7
 8002a32:	4922      	ldr	r1, [pc, #136]	@ (8002abc <HAL_RCC_ClockConfig+0x1c0>)
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	4313      	orrs	r3, r2
 8002a38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a3a:	4b20      	ldr	r3, [pc, #128]	@ (8002abc <HAL_RCC_ClockConfig+0x1c0>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f003 0307 	and.w	r3, r3, #7
 8002a42:	683a      	ldr	r2, [r7, #0]
 8002a44:	429a      	cmp	r2, r3
 8002a46:	d001      	beq.n	8002a4c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002a48:	2301      	movs	r3, #1
 8002a4a:	e032      	b.n	8002ab2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f003 0304 	and.w	r3, r3, #4
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d008      	beq.n	8002a6a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a58:	4b19      	ldr	r3, [pc, #100]	@ (8002ac0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	68db      	ldr	r3, [r3, #12]
 8002a64:	4916      	ldr	r1, [pc, #88]	@ (8002ac0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a66:	4313      	orrs	r3, r2
 8002a68:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f003 0308 	and.w	r3, r3, #8
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d009      	beq.n	8002a8a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002a76:	4b12      	ldr	r3, [pc, #72]	@ (8002ac0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	691b      	ldr	r3, [r3, #16]
 8002a82:	00db      	lsls	r3, r3, #3
 8002a84:	490e      	ldr	r1, [pc, #56]	@ (8002ac0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a86:	4313      	orrs	r3, r2
 8002a88:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002a8a:	f000 f821 	bl	8002ad0 <HAL_RCC_GetSysClockFreq>
 8002a8e:	4602      	mov	r2, r0
 8002a90:	4b0b      	ldr	r3, [pc, #44]	@ (8002ac0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	091b      	lsrs	r3, r3, #4
 8002a96:	f003 030f 	and.w	r3, r3, #15
 8002a9a:	490a      	ldr	r1, [pc, #40]	@ (8002ac4 <HAL_RCC_ClockConfig+0x1c8>)
 8002a9c:	5ccb      	ldrb	r3, [r1, r3]
 8002a9e:	fa22 f303 	lsr.w	r3, r2, r3
 8002aa2:	4a09      	ldr	r2, [pc, #36]	@ (8002ac8 <HAL_RCC_ClockConfig+0x1cc>)
 8002aa4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002aa6:	4b09      	ldr	r3, [pc, #36]	@ (8002acc <HAL_RCC_ClockConfig+0x1d0>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f7fe fdc4 	bl	8001638 <HAL_InitTick>

  return HAL_OK;
 8002ab0:	2300      	movs	r3, #0
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	3710      	adds	r7, #16
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}
 8002aba:	bf00      	nop
 8002abc:	40022000 	.word	0x40022000
 8002ac0:	40021000 	.word	0x40021000
 8002ac4:	08006588 	.word	0x08006588
 8002ac8:	20000000 	.word	0x20000000
 8002acc:	20000004 	.word	0x20000004

08002ad0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b087      	sub	sp, #28
 8002ad4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	60fb      	str	r3, [r7, #12]
 8002ada:	2300      	movs	r3, #0
 8002adc:	60bb      	str	r3, [r7, #8]
 8002ade:	2300      	movs	r3, #0
 8002ae0:	617b      	str	r3, [r7, #20]
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002aea:	4b1e      	ldr	r3, [pc, #120]	@ (8002b64 <HAL_RCC_GetSysClockFreq+0x94>)
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	f003 030c 	and.w	r3, r3, #12
 8002af6:	2b04      	cmp	r3, #4
 8002af8:	d002      	beq.n	8002b00 <HAL_RCC_GetSysClockFreq+0x30>
 8002afa:	2b08      	cmp	r3, #8
 8002afc:	d003      	beq.n	8002b06 <HAL_RCC_GetSysClockFreq+0x36>
 8002afe:	e027      	b.n	8002b50 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002b00:	4b19      	ldr	r3, [pc, #100]	@ (8002b68 <HAL_RCC_GetSysClockFreq+0x98>)
 8002b02:	613b      	str	r3, [r7, #16]
      break;
 8002b04:	e027      	b.n	8002b56 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	0c9b      	lsrs	r3, r3, #18
 8002b0a:	f003 030f 	and.w	r3, r3, #15
 8002b0e:	4a17      	ldr	r2, [pc, #92]	@ (8002b6c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002b10:	5cd3      	ldrb	r3, [r2, r3]
 8002b12:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d010      	beq.n	8002b40 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002b1e:	4b11      	ldr	r3, [pc, #68]	@ (8002b64 <HAL_RCC_GetSysClockFreq+0x94>)
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	0c5b      	lsrs	r3, r3, #17
 8002b24:	f003 0301 	and.w	r3, r3, #1
 8002b28:	4a11      	ldr	r2, [pc, #68]	@ (8002b70 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002b2a:	5cd3      	ldrb	r3, [r2, r3]
 8002b2c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	4a0d      	ldr	r2, [pc, #52]	@ (8002b68 <HAL_RCC_GetSysClockFreq+0x98>)
 8002b32:	fb03 f202 	mul.w	r2, r3, r2
 8002b36:	68bb      	ldr	r3, [r7, #8]
 8002b38:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b3c:	617b      	str	r3, [r7, #20]
 8002b3e:	e004      	b.n	8002b4a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	4a0c      	ldr	r2, [pc, #48]	@ (8002b74 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002b44:	fb02 f303 	mul.w	r3, r2, r3
 8002b48:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002b4a:	697b      	ldr	r3, [r7, #20]
 8002b4c:	613b      	str	r3, [r7, #16]
      break;
 8002b4e:	e002      	b.n	8002b56 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002b50:	4b05      	ldr	r3, [pc, #20]	@ (8002b68 <HAL_RCC_GetSysClockFreq+0x98>)
 8002b52:	613b      	str	r3, [r7, #16]
      break;
 8002b54:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b56:	693b      	ldr	r3, [r7, #16]
}
 8002b58:	4618      	mov	r0, r3
 8002b5a:	371c      	adds	r7, #28
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bc80      	pop	{r7}
 8002b60:	4770      	bx	lr
 8002b62:	bf00      	nop
 8002b64:	40021000 	.word	0x40021000
 8002b68:	007a1200 	.word	0x007a1200
 8002b6c:	080065a0 	.word	0x080065a0
 8002b70:	080065b0 	.word	0x080065b0
 8002b74:	003d0900 	.word	0x003d0900

08002b78 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b7c:	4b02      	ldr	r3, [pc, #8]	@ (8002b88 <HAL_RCC_GetHCLKFreq+0x10>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
}
 8002b80:	4618      	mov	r0, r3
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bc80      	pop	{r7}
 8002b86:	4770      	bx	lr
 8002b88:	20000000 	.word	0x20000000

08002b8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002b90:	f7ff fff2 	bl	8002b78 <HAL_RCC_GetHCLKFreq>
 8002b94:	4602      	mov	r2, r0
 8002b96:	4b05      	ldr	r3, [pc, #20]	@ (8002bac <HAL_RCC_GetPCLK1Freq+0x20>)
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	0a1b      	lsrs	r3, r3, #8
 8002b9c:	f003 0307 	and.w	r3, r3, #7
 8002ba0:	4903      	ldr	r1, [pc, #12]	@ (8002bb0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ba2:	5ccb      	ldrb	r3, [r1, r3]
 8002ba4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ba8:	4618      	mov	r0, r3
 8002baa:	bd80      	pop	{r7, pc}
 8002bac:	40021000 	.word	0x40021000
 8002bb0:	08006598 	.word	0x08006598

08002bb4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002bb8:	f7ff ffde 	bl	8002b78 <HAL_RCC_GetHCLKFreq>
 8002bbc:	4602      	mov	r2, r0
 8002bbe:	4b05      	ldr	r3, [pc, #20]	@ (8002bd4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	0adb      	lsrs	r3, r3, #11
 8002bc4:	f003 0307 	and.w	r3, r3, #7
 8002bc8:	4903      	ldr	r1, [pc, #12]	@ (8002bd8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002bca:	5ccb      	ldrb	r3, [r1, r3]
 8002bcc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	bd80      	pop	{r7, pc}
 8002bd4:	40021000 	.word	0x40021000
 8002bd8:	08006598 	.word	0x08006598

08002bdc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	b085      	sub	sp, #20
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002be4:	4b0a      	ldr	r3, [pc, #40]	@ (8002c10 <RCC_Delay+0x34>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a0a      	ldr	r2, [pc, #40]	@ (8002c14 <RCC_Delay+0x38>)
 8002bea:	fba2 2303 	umull	r2, r3, r2, r3
 8002bee:	0a5b      	lsrs	r3, r3, #9
 8002bf0:	687a      	ldr	r2, [r7, #4]
 8002bf2:	fb02 f303 	mul.w	r3, r2, r3
 8002bf6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002bf8:	bf00      	nop
  }
  while (Delay --);
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	1e5a      	subs	r2, r3, #1
 8002bfe:	60fa      	str	r2, [r7, #12]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d1f9      	bne.n	8002bf8 <RCC_Delay+0x1c>
}
 8002c04:	bf00      	nop
 8002c06:	bf00      	nop
 8002c08:	3714      	adds	r7, #20
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bc80      	pop	{r7}
 8002c0e:	4770      	bx	lr
 8002c10:	20000000 	.word	0x20000000
 8002c14:	10624dd3 	.word	0x10624dd3

08002c18 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b086      	sub	sp, #24
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002c20:	2300      	movs	r3, #0
 8002c22:	613b      	str	r3, [r7, #16]
 8002c24:	2300      	movs	r3, #0
 8002c26:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f003 0301 	and.w	r3, r3, #1
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d07d      	beq.n	8002d30 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002c34:	2300      	movs	r3, #0
 8002c36:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c38:	4b4f      	ldr	r3, [pc, #316]	@ (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c3a:	69db      	ldr	r3, [r3, #28]
 8002c3c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d10d      	bne.n	8002c60 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c44:	4b4c      	ldr	r3, [pc, #304]	@ (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c46:	69db      	ldr	r3, [r3, #28]
 8002c48:	4a4b      	ldr	r2, [pc, #300]	@ (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c4a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c4e:	61d3      	str	r3, [r2, #28]
 8002c50:	4b49      	ldr	r3, [pc, #292]	@ (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c52:	69db      	ldr	r3, [r3, #28]
 8002c54:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c58:	60bb      	str	r3, [r7, #8]
 8002c5a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c60:	4b46      	ldr	r3, [pc, #280]	@ (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d118      	bne.n	8002c9e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c6c:	4b43      	ldr	r3, [pc, #268]	@ (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a42      	ldr	r2, [pc, #264]	@ (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c72:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c76:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c78:	f7fe fd20 	bl	80016bc <HAL_GetTick>
 8002c7c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c7e:	e008      	b.n	8002c92 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c80:	f7fe fd1c 	bl	80016bc <HAL_GetTick>
 8002c84:	4602      	mov	r2, r0
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	1ad3      	subs	r3, r2, r3
 8002c8a:	2b64      	cmp	r3, #100	@ 0x64
 8002c8c:	d901      	bls.n	8002c92 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002c8e:	2303      	movs	r3, #3
 8002c90:	e06d      	b.n	8002d6e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c92:	4b3a      	ldr	r3, [pc, #232]	@ (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d0f0      	beq.n	8002c80 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002c9e:	4b36      	ldr	r3, [pc, #216]	@ (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ca0:	6a1b      	ldr	r3, [r3, #32]
 8002ca2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002ca6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d02e      	beq.n	8002d0c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002cb6:	68fa      	ldr	r2, [r7, #12]
 8002cb8:	429a      	cmp	r2, r3
 8002cba:	d027      	beq.n	8002d0c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002cbc:	4b2e      	ldr	r3, [pc, #184]	@ (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cbe:	6a1b      	ldr	r3, [r3, #32]
 8002cc0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002cc4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002cc6:	4b2e      	ldr	r3, [pc, #184]	@ (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002cc8:	2201      	movs	r2, #1
 8002cca:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002ccc:	4b2c      	ldr	r3, [pc, #176]	@ (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002cce:	2200      	movs	r2, #0
 8002cd0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002cd2:	4a29      	ldr	r2, [pc, #164]	@ (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	f003 0301 	and.w	r3, r3, #1
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d014      	beq.n	8002d0c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ce2:	f7fe fceb 	bl	80016bc <HAL_GetTick>
 8002ce6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ce8:	e00a      	b.n	8002d00 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cea:	f7fe fce7 	bl	80016bc <HAL_GetTick>
 8002cee:	4602      	mov	r2, r0
 8002cf0:	693b      	ldr	r3, [r7, #16]
 8002cf2:	1ad3      	subs	r3, r2, r3
 8002cf4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d901      	bls.n	8002d00 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002cfc:	2303      	movs	r3, #3
 8002cfe:	e036      	b.n	8002d6e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d00:	4b1d      	ldr	r3, [pc, #116]	@ (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d02:	6a1b      	ldr	r3, [r3, #32]
 8002d04:	f003 0302 	and.w	r3, r3, #2
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d0ee      	beq.n	8002cea <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d0c:	4b1a      	ldr	r3, [pc, #104]	@ (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d0e:	6a1b      	ldr	r3, [r3, #32]
 8002d10:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	4917      	ldr	r1, [pc, #92]	@ (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002d1e:	7dfb      	ldrb	r3, [r7, #23]
 8002d20:	2b01      	cmp	r3, #1
 8002d22:	d105      	bne.n	8002d30 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d24:	4b14      	ldr	r3, [pc, #80]	@ (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d26:	69db      	ldr	r3, [r3, #28]
 8002d28:	4a13      	ldr	r2, [pc, #76]	@ (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d2a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d2e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f003 0302 	and.w	r3, r3, #2
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d008      	beq.n	8002d4e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002d3c:	4b0e      	ldr	r3, [pc, #56]	@ (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	689b      	ldr	r3, [r3, #8]
 8002d48:	490b      	ldr	r1, [pc, #44]	@ (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f003 0310 	and.w	r3, r3, #16
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d008      	beq.n	8002d6c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002d5a:	4b07      	ldr	r3, [pc, #28]	@ (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	68db      	ldr	r3, [r3, #12]
 8002d66:	4904      	ldr	r1, [pc, #16]	@ (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002d6c:	2300      	movs	r3, #0
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	3718      	adds	r7, #24
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}
 8002d76:	bf00      	nop
 8002d78:	40021000 	.word	0x40021000
 8002d7c:	40007000 	.word	0x40007000
 8002d80:	42420440 	.word	0x42420440

08002d84 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b088      	sub	sp, #32
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	617b      	str	r3, [r7, #20]
 8002d90:	2300      	movs	r3, #0
 8002d92:	61fb      	str	r3, [r7, #28]
 8002d94:	2300      	movs	r3, #0
 8002d96:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8002d98:	2300      	movs	r3, #0
 8002d9a:	60fb      	str	r3, [r7, #12]
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2b10      	cmp	r3, #16
 8002da4:	d00a      	beq.n	8002dbc <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2b10      	cmp	r3, #16
 8002daa:	f200 808a 	bhi.w	8002ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2b01      	cmp	r3, #1
 8002db2:	d045      	beq.n	8002e40 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2b02      	cmp	r3, #2
 8002db8:	d075      	beq.n	8002ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8002dba:	e082      	b.n	8002ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8002dbc:	4b46      	ldr	r3, [pc, #280]	@ (8002ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8002dc2:	4b45      	ldr	r3, [pc, #276]	@ (8002ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d07b      	beq.n	8002ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	0c9b      	lsrs	r3, r3, #18
 8002dd2:	f003 030f 	and.w	r3, r3, #15
 8002dd6:	4a41      	ldr	r2, [pc, #260]	@ (8002edc <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8002dd8:	5cd3      	ldrb	r3, [r2, r3]
 8002dda:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d015      	beq.n	8002e12 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002de6:	4b3c      	ldr	r3, [pc, #240]	@ (8002ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	0c5b      	lsrs	r3, r3, #17
 8002dec:	f003 0301 	and.w	r3, r3, #1
 8002df0:	4a3b      	ldr	r2, [pc, #236]	@ (8002ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8002df2:	5cd3      	ldrb	r3, [r2, r3]
 8002df4:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d00d      	beq.n	8002e1c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002e00:	4a38      	ldr	r2, [pc, #224]	@ (8002ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	fbb2 f2f3 	udiv	r2, r2, r3
 8002e08:	693b      	ldr	r3, [r7, #16]
 8002e0a:	fb02 f303 	mul.w	r3, r2, r3
 8002e0e:	61fb      	str	r3, [r7, #28]
 8002e10:	e004      	b.n	8002e1c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002e12:	693b      	ldr	r3, [r7, #16]
 8002e14:	4a34      	ldr	r2, [pc, #208]	@ (8002ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8002e16:	fb02 f303 	mul.w	r3, r2, r3
 8002e1a:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002e1c:	4b2e      	ldr	r3, [pc, #184]	@ (8002ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e24:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002e28:	d102      	bne.n	8002e30 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8002e2a:	69fb      	ldr	r3, [r7, #28]
 8002e2c:	61bb      	str	r3, [r7, #24]
      break;
 8002e2e:	e04a      	b.n	8002ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8002e30:	69fb      	ldr	r3, [r7, #28]
 8002e32:	005b      	lsls	r3, r3, #1
 8002e34:	4a2d      	ldr	r2, [pc, #180]	@ (8002eec <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002e36:	fba2 2303 	umull	r2, r3, r2, r3
 8002e3a:	085b      	lsrs	r3, r3, #1
 8002e3c:	61bb      	str	r3, [r7, #24]
      break;
 8002e3e:	e042      	b.n	8002ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8002e40:	4b25      	ldr	r3, [pc, #148]	@ (8002ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002e42:	6a1b      	ldr	r3, [r3, #32]
 8002e44:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002e4c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002e50:	d108      	bne.n	8002e64 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	f003 0302 	and.w	r3, r3, #2
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d003      	beq.n	8002e64 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8002e5c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002e60:	61bb      	str	r3, [r7, #24]
 8002e62:	e01f      	b.n	8002ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002e6a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002e6e:	d109      	bne.n	8002e84 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8002e70:	4b19      	ldr	r3, [pc, #100]	@ (8002ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002e72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e74:	f003 0302 	and.w	r3, r3, #2
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d003      	beq.n	8002e84 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8002e7c:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8002e80:	61bb      	str	r3, [r7, #24]
 8002e82:	e00f      	b.n	8002ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002e8a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002e8e:	d11c      	bne.n	8002eca <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8002e90:	4b11      	ldr	r3, [pc, #68]	@ (8002ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d016      	beq.n	8002eca <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8002e9c:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8002ea0:	61bb      	str	r3, [r7, #24]
      break;
 8002ea2:	e012      	b.n	8002eca <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8002ea4:	e011      	b.n	8002eca <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8002ea6:	f7ff fe85 	bl	8002bb4 <HAL_RCC_GetPCLK2Freq>
 8002eaa:	4602      	mov	r2, r0
 8002eac:	4b0a      	ldr	r3, [pc, #40]	@ (8002ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	0b9b      	lsrs	r3, r3, #14
 8002eb2:	f003 0303 	and.w	r3, r3, #3
 8002eb6:	3301      	adds	r3, #1
 8002eb8:	005b      	lsls	r3, r3, #1
 8002eba:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ebe:	61bb      	str	r3, [r7, #24]
      break;
 8002ec0:	e004      	b.n	8002ecc <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002ec2:	bf00      	nop
 8002ec4:	e002      	b.n	8002ecc <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002ec6:	bf00      	nop
 8002ec8:	e000      	b.n	8002ecc <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002eca:	bf00      	nop
    }
  }
  return (frequency);
 8002ecc:	69bb      	ldr	r3, [r7, #24]
}
 8002ece:	4618      	mov	r0, r3
 8002ed0:	3720      	adds	r7, #32
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}
 8002ed6:	bf00      	nop
 8002ed8:	40021000 	.word	0x40021000
 8002edc:	080065b4 	.word	0x080065b4
 8002ee0:	080065c4 	.word	0x080065c4
 8002ee4:	007a1200 	.word	0x007a1200
 8002ee8:	003d0900 	.word	0x003d0900
 8002eec:	aaaaaaab 	.word	0xaaaaaaab

08002ef0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b082      	sub	sp, #8
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d101      	bne.n	8002f02 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	e041      	b.n	8002f86 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f08:	b2db      	uxtb	r3, r3
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d106      	bne.n	8002f1c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2200      	movs	r2, #0
 8002f12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002f16:	6878      	ldr	r0, [r7, #4]
 8002f18:	f7fe f9f4 	bl	8001304 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2202      	movs	r2, #2
 8002f20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681a      	ldr	r2, [r3, #0]
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	3304      	adds	r3, #4
 8002f2c:	4619      	mov	r1, r3
 8002f2e:	4610      	mov	r0, r2
 8002f30:	f000 f940 	bl	80031b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2201      	movs	r2, #1
 8002f38:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2201      	movs	r2, #1
 8002f40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2201      	movs	r2, #1
 8002f48:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2201      	movs	r2, #1
 8002f50:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2201      	movs	r2, #1
 8002f58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2201      	movs	r2, #1
 8002f60:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2201      	movs	r2, #1
 8002f68:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2201      	movs	r2, #1
 8002f70:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2201      	movs	r2, #1
 8002f78:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2201      	movs	r2, #1
 8002f80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002f84:	2300      	movs	r3, #0
}
 8002f86:	4618      	mov	r0, r3
 8002f88:	3708      	adds	r7, #8
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}
	...

08002f90 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002f90:	b480      	push	{r7}
 8002f92:	b085      	sub	sp, #20
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f9e:	b2db      	uxtb	r3, r3
 8002fa0:	2b01      	cmp	r3, #1
 8002fa2:	d001      	beq.n	8002fa8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	e032      	b.n	800300e <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2202      	movs	r2, #2
 8002fac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a18      	ldr	r2, [pc, #96]	@ (8003018 <HAL_TIM_Base_Start+0x88>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d00e      	beq.n	8002fd8 <HAL_TIM_Base_Start+0x48>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002fc2:	d009      	beq.n	8002fd8 <HAL_TIM_Base_Start+0x48>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a14      	ldr	r2, [pc, #80]	@ (800301c <HAL_TIM_Base_Start+0x8c>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d004      	beq.n	8002fd8 <HAL_TIM_Base_Start+0x48>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a13      	ldr	r2, [pc, #76]	@ (8003020 <HAL_TIM_Base_Start+0x90>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d111      	bne.n	8002ffc <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	689b      	ldr	r3, [r3, #8]
 8002fde:	f003 0307 	and.w	r3, r3, #7
 8002fe2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	2b06      	cmp	r3, #6
 8002fe8:	d010      	beq.n	800300c <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	681a      	ldr	r2, [r3, #0]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f042 0201 	orr.w	r2, r2, #1
 8002ff8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ffa:	e007      	b.n	800300c <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	681a      	ldr	r2, [r3, #0]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f042 0201 	orr.w	r2, r2, #1
 800300a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800300c:	2300      	movs	r3, #0
}
 800300e:	4618      	mov	r0, r3
 8003010:	3714      	adds	r7, #20
 8003012:	46bd      	mov	sp, r7
 8003014:	bc80      	pop	{r7}
 8003016:	4770      	bx	lr
 8003018:	40012c00 	.word	0x40012c00
 800301c:	40000400 	.word	0x40000400
 8003020:	40000800 	.word	0x40000800

08003024 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b084      	sub	sp, #16
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
 800302c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800302e:	2300      	movs	r3, #0
 8003030:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003038:	2b01      	cmp	r3, #1
 800303a:	d101      	bne.n	8003040 <HAL_TIM_ConfigClockSource+0x1c>
 800303c:	2302      	movs	r3, #2
 800303e:	e0b4      	b.n	80031aa <HAL_TIM_ConfigClockSource+0x186>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2201      	movs	r2, #1
 8003044:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2202      	movs	r2, #2
 800304c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	689b      	ldr	r3, [r3, #8]
 8003056:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003058:	68bb      	ldr	r3, [r7, #8]
 800305a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800305e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003066:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	68ba      	ldr	r2, [r7, #8]
 800306e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003078:	d03e      	beq.n	80030f8 <HAL_TIM_ConfigClockSource+0xd4>
 800307a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800307e:	f200 8087 	bhi.w	8003190 <HAL_TIM_ConfigClockSource+0x16c>
 8003082:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003086:	f000 8086 	beq.w	8003196 <HAL_TIM_ConfigClockSource+0x172>
 800308a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800308e:	d87f      	bhi.n	8003190 <HAL_TIM_ConfigClockSource+0x16c>
 8003090:	2b70      	cmp	r3, #112	@ 0x70
 8003092:	d01a      	beq.n	80030ca <HAL_TIM_ConfigClockSource+0xa6>
 8003094:	2b70      	cmp	r3, #112	@ 0x70
 8003096:	d87b      	bhi.n	8003190 <HAL_TIM_ConfigClockSource+0x16c>
 8003098:	2b60      	cmp	r3, #96	@ 0x60
 800309a:	d050      	beq.n	800313e <HAL_TIM_ConfigClockSource+0x11a>
 800309c:	2b60      	cmp	r3, #96	@ 0x60
 800309e:	d877      	bhi.n	8003190 <HAL_TIM_ConfigClockSource+0x16c>
 80030a0:	2b50      	cmp	r3, #80	@ 0x50
 80030a2:	d03c      	beq.n	800311e <HAL_TIM_ConfigClockSource+0xfa>
 80030a4:	2b50      	cmp	r3, #80	@ 0x50
 80030a6:	d873      	bhi.n	8003190 <HAL_TIM_ConfigClockSource+0x16c>
 80030a8:	2b40      	cmp	r3, #64	@ 0x40
 80030aa:	d058      	beq.n	800315e <HAL_TIM_ConfigClockSource+0x13a>
 80030ac:	2b40      	cmp	r3, #64	@ 0x40
 80030ae:	d86f      	bhi.n	8003190 <HAL_TIM_ConfigClockSource+0x16c>
 80030b0:	2b30      	cmp	r3, #48	@ 0x30
 80030b2:	d064      	beq.n	800317e <HAL_TIM_ConfigClockSource+0x15a>
 80030b4:	2b30      	cmp	r3, #48	@ 0x30
 80030b6:	d86b      	bhi.n	8003190 <HAL_TIM_ConfigClockSource+0x16c>
 80030b8:	2b20      	cmp	r3, #32
 80030ba:	d060      	beq.n	800317e <HAL_TIM_ConfigClockSource+0x15a>
 80030bc:	2b20      	cmp	r3, #32
 80030be:	d867      	bhi.n	8003190 <HAL_TIM_ConfigClockSource+0x16c>
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d05c      	beq.n	800317e <HAL_TIM_ConfigClockSource+0x15a>
 80030c4:	2b10      	cmp	r3, #16
 80030c6:	d05a      	beq.n	800317e <HAL_TIM_ConfigClockSource+0x15a>
 80030c8:	e062      	b.n	8003190 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80030da:	f000 f950 	bl	800337e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	689b      	ldr	r3, [r3, #8]
 80030e4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80030e6:	68bb      	ldr	r3, [r7, #8]
 80030e8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80030ec:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	68ba      	ldr	r2, [r7, #8]
 80030f4:	609a      	str	r2, [r3, #8]
      break;
 80030f6:	e04f      	b.n	8003198 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003108:	f000 f939 	bl	800337e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	689a      	ldr	r2, [r3, #8]
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800311a:	609a      	str	r2, [r3, #8]
      break;
 800311c:	e03c      	b.n	8003198 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800312a:	461a      	mov	r2, r3
 800312c:	f000 f8b0 	bl	8003290 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	2150      	movs	r1, #80	@ 0x50
 8003136:	4618      	mov	r0, r3
 8003138:	f000 f907 	bl	800334a <TIM_ITRx_SetConfig>
      break;
 800313c:	e02c      	b.n	8003198 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800314a:	461a      	mov	r2, r3
 800314c:	f000 f8ce 	bl	80032ec <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	2160      	movs	r1, #96	@ 0x60
 8003156:	4618      	mov	r0, r3
 8003158:	f000 f8f7 	bl	800334a <TIM_ITRx_SetConfig>
      break;
 800315c:	e01c      	b.n	8003198 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800316a:	461a      	mov	r2, r3
 800316c:	f000 f890 	bl	8003290 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	2140      	movs	r1, #64	@ 0x40
 8003176:	4618      	mov	r0, r3
 8003178:	f000 f8e7 	bl	800334a <TIM_ITRx_SetConfig>
      break;
 800317c:	e00c      	b.n	8003198 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681a      	ldr	r2, [r3, #0]
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4619      	mov	r1, r3
 8003188:	4610      	mov	r0, r2
 800318a:	f000 f8de 	bl	800334a <TIM_ITRx_SetConfig>
      break;
 800318e:	e003      	b.n	8003198 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003190:	2301      	movs	r3, #1
 8003192:	73fb      	strb	r3, [r7, #15]
      break;
 8003194:	e000      	b.n	8003198 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003196:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2201      	movs	r2, #1
 800319c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2200      	movs	r2, #0
 80031a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80031a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80031aa:	4618      	mov	r0, r3
 80031ac:	3710      	adds	r7, #16
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bd80      	pop	{r7, pc}
	...

080031b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80031b4:	b480      	push	{r7}
 80031b6:	b085      	sub	sp, #20
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
 80031bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	4a2f      	ldr	r2, [pc, #188]	@ (8003284 <TIM_Base_SetConfig+0xd0>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d00b      	beq.n	80031e4 <TIM_Base_SetConfig+0x30>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80031d2:	d007      	beq.n	80031e4 <TIM_Base_SetConfig+0x30>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	4a2c      	ldr	r2, [pc, #176]	@ (8003288 <TIM_Base_SetConfig+0xd4>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d003      	beq.n	80031e4 <TIM_Base_SetConfig+0x30>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	4a2b      	ldr	r2, [pc, #172]	@ (800328c <TIM_Base_SetConfig+0xd8>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d108      	bne.n	80031f6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80031ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	68fa      	ldr	r2, [r7, #12]
 80031f2:	4313      	orrs	r3, r2
 80031f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	4a22      	ldr	r2, [pc, #136]	@ (8003284 <TIM_Base_SetConfig+0xd0>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d00b      	beq.n	8003216 <TIM_Base_SetConfig+0x62>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003204:	d007      	beq.n	8003216 <TIM_Base_SetConfig+0x62>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	4a1f      	ldr	r2, [pc, #124]	@ (8003288 <TIM_Base_SetConfig+0xd4>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d003      	beq.n	8003216 <TIM_Base_SetConfig+0x62>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	4a1e      	ldr	r2, [pc, #120]	@ (800328c <TIM_Base_SetConfig+0xd8>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d108      	bne.n	8003228 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800321c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	68db      	ldr	r3, [r3, #12]
 8003222:	68fa      	ldr	r2, [r7, #12]
 8003224:	4313      	orrs	r3, r2
 8003226:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	695b      	ldr	r3, [r3, #20]
 8003232:	4313      	orrs	r3, r2
 8003234:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	68fa      	ldr	r2, [r7, #12]
 800323a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	689a      	ldr	r2, [r3, #8]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	681a      	ldr	r2, [r3, #0]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	4a0d      	ldr	r2, [pc, #52]	@ (8003284 <TIM_Base_SetConfig+0xd0>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d103      	bne.n	800325c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	691a      	ldr	r2, [r3, #16]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2201      	movs	r2, #1
 8003260:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	691b      	ldr	r3, [r3, #16]
 8003266:	f003 0301 	and.w	r3, r3, #1
 800326a:	2b00      	cmp	r3, #0
 800326c:	d005      	beq.n	800327a <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	691b      	ldr	r3, [r3, #16]
 8003272:	f023 0201 	bic.w	r2, r3, #1
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	611a      	str	r2, [r3, #16]
  }
}
 800327a:	bf00      	nop
 800327c:	3714      	adds	r7, #20
 800327e:	46bd      	mov	sp, r7
 8003280:	bc80      	pop	{r7}
 8003282:	4770      	bx	lr
 8003284:	40012c00 	.word	0x40012c00
 8003288:	40000400 	.word	0x40000400
 800328c:	40000800 	.word	0x40000800

08003290 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003290:	b480      	push	{r7}
 8003292:	b087      	sub	sp, #28
 8003294:	af00      	add	r7, sp, #0
 8003296:	60f8      	str	r0, [r7, #12]
 8003298:	60b9      	str	r1, [r7, #8]
 800329a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	6a1b      	ldr	r3, [r3, #32]
 80032a0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	6a1b      	ldr	r3, [r3, #32]
 80032a6:	f023 0201 	bic.w	r2, r3, #1
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	699b      	ldr	r3, [r3, #24]
 80032b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80032b4:	693b      	ldr	r3, [r7, #16]
 80032b6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80032ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	011b      	lsls	r3, r3, #4
 80032c0:	693a      	ldr	r2, [r7, #16]
 80032c2:	4313      	orrs	r3, r2
 80032c4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80032c6:	697b      	ldr	r3, [r7, #20]
 80032c8:	f023 030a 	bic.w	r3, r3, #10
 80032cc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80032ce:	697a      	ldr	r2, [r7, #20]
 80032d0:	68bb      	ldr	r3, [r7, #8]
 80032d2:	4313      	orrs	r3, r2
 80032d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	693a      	ldr	r2, [r7, #16]
 80032da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	697a      	ldr	r2, [r7, #20]
 80032e0:	621a      	str	r2, [r3, #32]
}
 80032e2:	bf00      	nop
 80032e4:	371c      	adds	r7, #28
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bc80      	pop	{r7}
 80032ea:	4770      	bx	lr

080032ec <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80032ec:	b480      	push	{r7}
 80032ee:	b087      	sub	sp, #28
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	60f8      	str	r0, [r7, #12]
 80032f4:	60b9      	str	r1, [r7, #8]
 80032f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	6a1b      	ldr	r3, [r3, #32]
 80032fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	6a1b      	ldr	r3, [r3, #32]
 8003302:	f023 0210 	bic.w	r2, r3, #16
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	699b      	ldr	r3, [r3, #24]
 800330e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003310:	693b      	ldr	r3, [r7, #16]
 8003312:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003316:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	031b      	lsls	r3, r3, #12
 800331c:	693a      	ldr	r2, [r7, #16]
 800331e:	4313      	orrs	r3, r2
 8003320:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003322:	697b      	ldr	r3, [r7, #20]
 8003324:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003328:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800332a:	68bb      	ldr	r3, [r7, #8]
 800332c:	011b      	lsls	r3, r3, #4
 800332e:	697a      	ldr	r2, [r7, #20]
 8003330:	4313      	orrs	r3, r2
 8003332:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	693a      	ldr	r2, [r7, #16]
 8003338:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	697a      	ldr	r2, [r7, #20]
 800333e:	621a      	str	r2, [r3, #32]
}
 8003340:	bf00      	nop
 8003342:	371c      	adds	r7, #28
 8003344:	46bd      	mov	sp, r7
 8003346:	bc80      	pop	{r7}
 8003348:	4770      	bx	lr

0800334a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800334a:	b480      	push	{r7}
 800334c:	b085      	sub	sp, #20
 800334e:	af00      	add	r7, sp, #0
 8003350:	6078      	str	r0, [r7, #4]
 8003352:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	689b      	ldr	r3, [r3, #8]
 8003358:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003360:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003362:	683a      	ldr	r2, [r7, #0]
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	4313      	orrs	r3, r2
 8003368:	f043 0307 	orr.w	r3, r3, #7
 800336c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	68fa      	ldr	r2, [r7, #12]
 8003372:	609a      	str	r2, [r3, #8]
}
 8003374:	bf00      	nop
 8003376:	3714      	adds	r7, #20
 8003378:	46bd      	mov	sp, r7
 800337a:	bc80      	pop	{r7}
 800337c:	4770      	bx	lr

0800337e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800337e:	b480      	push	{r7}
 8003380:	b087      	sub	sp, #28
 8003382:	af00      	add	r7, sp, #0
 8003384:	60f8      	str	r0, [r7, #12]
 8003386:	60b9      	str	r1, [r7, #8]
 8003388:	607a      	str	r2, [r7, #4]
 800338a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	689b      	ldr	r3, [r3, #8]
 8003390:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003392:	697b      	ldr	r3, [r7, #20]
 8003394:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003398:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	021a      	lsls	r2, r3, #8
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	431a      	orrs	r2, r3
 80033a2:	68bb      	ldr	r3, [r7, #8]
 80033a4:	4313      	orrs	r3, r2
 80033a6:	697a      	ldr	r2, [r7, #20]
 80033a8:	4313      	orrs	r3, r2
 80033aa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	697a      	ldr	r2, [r7, #20]
 80033b0:	609a      	str	r2, [r3, #8]
}
 80033b2:	bf00      	nop
 80033b4:	371c      	adds	r7, #28
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bc80      	pop	{r7}
 80033ba:	4770      	bx	lr

080033bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80033bc:	b480      	push	{r7}
 80033be:	b085      	sub	sp, #20
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
 80033c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80033cc:	2b01      	cmp	r3, #1
 80033ce:	d101      	bne.n	80033d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80033d0:	2302      	movs	r3, #2
 80033d2:	e046      	b.n	8003462 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2201      	movs	r2, #1
 80033d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2202      	movs	r2, #2
 80033e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	689b      	ldr	r3, [r3, #8]
 80033f2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80033fa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	68fa      	ldr	r2, [r7, #12]
 8003402:	4313      	orrs	r3, r2
 8003404:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	68fa      	ldr	r2, [r7, #12]
 800340c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4a16      	ldr	r2, [pc, #88]	@ (800346c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d00e      	beq.n	8003436 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003420:	d009      	beq.n	8003436 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4a12      	ldr	r2, [pc, #72]	@ (8003470 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d004      	beq.n	8003436 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4a10      	ldr	r2, [pc, #64]	@ (8003474 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d10c      	bne.n	8003450 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003436:	68bb      	ldr	r3, [r7, #8]
 8003438:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800343c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	68ba      	ldr	r2, [r7, #8]
 8003444:	4313      	orrs	r3, r2
 8003446:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	68ba      	ldr	r2, [r7, #8]
 800344e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2201      	movs	r2, #1
 8003454:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2200      	movs	r2, #0
 800345c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003460:	2300      	movs	r3, #0
}
 8003462:	4618      	mov	r0, r3
 8003464:	3714      	adds	r7, #20
 8003466:	46bd      	mov	sp, r7
 8003468:	bc80      	pop	{r7}
 800346a:	4770      	bx	lr
 800346c:	40012c00 	.word	0x40012c00
 8003470:	40000400 	.word	0x40000400
 8003474:	40000800 	.word	0x40000800

08003478 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b082      	sub	sp, #8
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d101      	bne.n	800348a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003486:	2301      	movs	r3, #1
 8003488:	e042      	b.n	8003510 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003490:	b2db      	uxtb	r3, r3
 8003492:	2b00      	cmp	r3, #0
 8003494:	d106      	bne.n	80034a4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2200      	movs	r2, #0
 800349a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800349e:	6878      	ldr	r0, [r7, #4]
 80034a0:	f7fd ff4e 	bl	8001340 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2224      	movs	r2, #36	@ 0x24
 80034a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	68da      	ldr	r2, [r3, #12]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80034ba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80034bc:	6878      	ldr	r0, [r7, #4]
 80034be:	f000 f971 	bl	80037a4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	691a      	ldr	r2, [r3, #16]
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80034d0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	695a      	ldr	r2, [r3, #20]
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80034e0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	68da      	ldr	r2, [r3, #12]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80034f0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2200      	movs	r2, #0
 80034f6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2220      	movs	r2, #32
 80034fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2220      	movs	r2, #32
 8003504:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2200      	movs	r2, #0
 800350c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800350e:	2300      	movs	r3, #0
}
 8003510:	4618      	mov	r0, r3
 8003512:	3708      	adds	r7, #8
 8003514:	46bd      	mov	sp, r7
 8003516:	bd80      	pop	{r7, pc}

08003518 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b08a      	sub	sp, #40	@ 0x28
 800351c:	af02      	add	r7, sp, #8
 800351e:	60f8      	str	r0, [r7, #12]
 8003520:	60b9      	str	r1, [r7, #8]
 8003522:	603b      	str	r3, [r7, #0]
 8003524:	4613      	mov	r3, r2
 8003526:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003528:	2300      	movs	r3, #0
 800352a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003532:	b2db      	uxtb	r3, r3
 8003534:	2b20      	cmp	r3, #32
 8003536:	d175      	bne.n	8003624 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d002      	beq.n	8003544 <HAL_UART_Transmit+0x2c>
 800353e:	88fb      	ldrh	r3, [r7, #6]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d101      	bne.n	8003548 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003544:	2301      	movs	r3, #1
 8003546:	e06e      	b.n	8003626 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	2200      	movs	r2, #0
 800354c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	2221      	movs	r2, #33	@ 0x21
 8003552:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003556:	f7fe f8b1 	bl	80016bc <HAL_GetTick>
 800355a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	88fa      	ldrh	r2, [r7, #6]
 8003560:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	88fa      	ldrh	r2, [r7, #6]
 8003566:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	689b      	ldr	r3, [r3, #8]
 800356c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003570:	d108      	bne.n	8003584 <HAL_UART_Transmit+0x6c>
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	691b      	ldr	r3, [r3, #16]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d104      	bne.n	8003584 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800357a:	2300      	movs	r3, #0
 800357c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	61bb      	str	r3, [r7, #24]
 8003582:	e003      	b.n	800358c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003584:	68bb      	ldr	r3, [r7, #8]
 8003586:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003588:	2300      	movs	r3, #0
 800358a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800358c:	e02e      	b.n	80035ec <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	9300      	str	r3, [sp, #0]
 8003592:	697b      	ldr	r3, [r7, #20]
 8003594:	2200      	movs	r2, #0
 8003596:	2180      	movs	r1, #128	@ 0x80
 8003598:	68f8      	ldr	r0, [r7, #12]
 800359a:	f000 f848 	bl	800362e <UART_WaitOnFlagUntilTimeout>
 800359e:	4603      	mov	r3, r0
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d005      	beq.n	80035b0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	2220      	movs	r2, #32
 80035a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80035ac:	2303      	movs	r3, #3
 80035ae:	e03a      	b.n	8003626 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80035b0:	69fb      	ldr	r3, [r7, #28]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d10b      	bne.n	80035ce <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80035b6:	69bb      	ldr	r3, [r7, #24]
 80035b8:	881b      	ldrh	r3, [r3, #0]
 80035ba:	461a      	mov	r2, r3
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80035c4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80035c6:	69bb      	ldr	r3, [r7, #24]
 80035c8:	3302      	adds	r3, #2
 80035ca:	61bb      	str	r3, [r7, #24]
 80035cc:	e007      	b.n	80035de <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80035ce:	69fb      	ldr	r3, [r7, #28]
 80035d0:	781a      	ldrb	r2, [r3, #0]
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80035d8:	69fb      	ldr	r3, [r7, #28]
 80035da:	3301      	adds	r3, #1
 80035dc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80035e2:	b29b      	uxth	r3, r3
 80035e4:	3b01      	subs	r3, #1
 80035e6:	b29a      	uxth	r2, r3
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80035f0:	b29b      	uxth	r3, r3
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d1cb      	bne.n	800358e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	9300      	str	r3, [sp, #0]
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	2200      	movs	r2, #0
 80035fe:	2140      	movs	r1, #64	@ 0x40
 8003600:	68f8      	ldr	r0, [r7, #12]
 8003602:	f000 f814 	bl	800362e <UART_WaitOnFlagUntilTimeout>
 8003606:	4603      	mov	r3, r0
 8003608:	2b00      	cmp	r3, #0
 800360a:	d005      	beq.n	8003618 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	2220      	movs	r2, #32
 8003610:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003614:	2303      	movs	r3, #3
 8003616:	e006      	b.n	8003626 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	2220      	movs	r2, #32
 800361c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003620:	2300      	movs	r3, #0
 8003622:	e000      	b.n	8003626 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003624:	2302      	movs	r3, #2
  }
}
 8003626:	4618      	mov	r0, r3
 8003628:	3720      	adds	r7, #32
 800362a:	46bd      	mov	sp, r7
 800362c:	bd80      	pop	{r7, pc}

0800362e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800362e:	b580      	push	{r7, lr}
 8003630:	b086      	sub	sp, #24
 8003632:	af00      	add	r7, sp, #0
 8003634:	60f8      	str	r0, [r7, #12]
 8003636:	60b9      	str	r1, [r7, #8]
 8003638:	603b      	str	r3, [r7, #0]
 800363a:	4613      	mov	r3, r2
 800363c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800363e:	e03b      	b.n	80036b8 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003640:	6a3b      	ldr	r3, [r7, #32]
 8003642:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003646:	d037      	beq.n	80036b8 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003648:	f7fe f838 	bl	80016bc <HAL_GetTick>
 800364c:	4602      	mov	r2, r0
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	1ad3      	subs	r3, r2, r3
 8003652:	6a3a      	ldr	r2, [r7, #32]
 8003654:	429a      	cmp	r2, r3
 8003656:	d302      	bcc.n	800365e <UART_WaitOnFlagUntilTimeout+0x30>
 8003658:	6a3b      	ldr	r3, [r7, #32]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d101      	bne.n	8003662 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800365e:	2303      	movs	r3, #3
 8003660:	e03a      	b.n	80036d8 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	68db      	ldr	r3, [r3, #12]
 8003668:	f003 0304 	and.w	r3, r3, #4
 800366c:	2b00      	cmp	r3, #0
 800366e:	d023      	beq.n	80036b8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003670:	68bb      	ldr	r3, [r7, #8]
 8003672:	2b80      	cmp	r3, #128	@ 0x80
 8003674:	d020      	beq.n	80036b8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003676:	68bb      	ldr	r3, [r7, #8]
 8003678:	2b40      	cmp	r3, #64	@ 0x40
 800367a:	d01d      	beq.n	80036b8 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f003 0308 	and.w	r3, r3, #8
 8003686:	2b08      	cmp	r3, #8
 8003688:	d116      	bne.n	80036b8 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800368a:	2300      	movs	r3, #0
 800368c:	617b      	str	r3, [r7, #20]
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	617b      	str	r3, [r7, #20]
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	617b      	str	r3, [r7, #20]
 800369e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80036a0:	68f8      	ldr	r0, [r7, #12]
 80036a2:	f000 f81d 	bl	80036e0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	2208      	movs	r2, #8
 80036aa:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	2200      	movs	r2, #0
 80036b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80036b4:	2301      	movs	r3, #1
 80036b6:	e00f      	b.n	80036d8 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	681a      	ldr	r2, [r3, #0]
 80036be:	68bb      	ldr	r3, [r7, #8]
 80036c0:	4013      	ands	r3, r2
 80036c2:	68ba      	ldr	r2, [r7, #8]
 80036c4:	429a      	cmp	r2, r3
 80036c6:	bf0c      	ite	eq
 80036c8:	2301      	moveq	r3, #1
 80036ca:	2300      	movne	r3, #0
 80036cc:	b2db      	uxtb	r3, r3
 80036ce:	461a      	mov	r2, r3
 80036d0:	79fb      	ldrb	r3, [r7, #7]
 80036d2:	429a      	cmp	r2, r3
 80036d4:	d0b4      	beq.n	8003640 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80036d6:	2300      	movs	r3, #0
}
 80036d8:	4618      	mov	r0, r3
 80036da:	3718      	adds	r7, #24
 80036dc:	46bd      	mov	sp, r7
 80036de:	bd80      	pop	{r7, pc}

080036e0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80036e0:	b480      	push	{r7}
 80036e2:	b095      	sub	sp, #84	@ 0x54
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	330c      	adds	r3, #12
 80036ee:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036f2:	e853 3f00 	ldrex	r3, [r3]
 80036f6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80036f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036fa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80036fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	330c      	adds	r3, #12
 8003706:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003708:	643a      	str	r2, [r7, #64]	@ 0x40
 800370a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800370c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800370e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003710:	e841 2300 	strex	r3, r2, [r1]
 8003714:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003716:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003718:	2b00      	cmp	r3, #0
 800371a:	d1e5      	bne.n	80036e8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	3314      	adds	r3, #20
 8003722:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003724:	6a3b      	ldr	r3, [r7, #32]
 8003726:	e853 3f00 	ldrex	r3, [r3]
 800372a:	61fb      	str	r3, [r7, #28]
   return(result);
 800372c:	69fb      	ldr	r3, [r7, #28]
 800372e:	f023 0301 	bic.w	r3, r3, #1
 8003732:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	3314      	adds	r3, #20
 800373a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800373c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800373e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003740:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003742:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003744:	e841 2300 	strex	r3, r2, [r1]
 8003748:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800374a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800374c:	2b00      	cmp	r3, #0
 800374e:	d1e5      	bne.n	800371c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003754:	2b01      	cmp	r3, #1
 8003756:	d119      	bne.n	800378c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	330c      	adds	r3, #12
 800375e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	e853 3f00 	ldrex	r3, [r3]
 8003766:	60bb      	str	r3, [r7, #8]
   return(result);
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	f023 0310 	bic.w	r3, r3, #16
 800376e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	330c      	adds	r3, #12
 8003776:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003778:	61ba      	str	r2, [r7, #24]
 800377a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800377c:	6979      	ldr	r1, [r7, #20]
 800377e:	69ba      	ldr	r2, [r7, #24]
 8003780:	e841 2300 	strex	r3, r2, [r1]
 8003784:	613b      	str	r3, [r7, #16]
   return(result);
 8003786:	693b      	ldr	r3, [r7, #16]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d1e5      	bne.n	8003758 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2220      	movs	r2, #32
 8003790:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2200      	movs	r2, #0
 8003798:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800379a:	bf00      	nop
 800379c:	3754      	adds	r7, #84	@ 0x54
 800379e:	46bd      	mov	sp, r7
 80037a0:	bc80      	pop	{r7}
 80037a2:	4770      	bx	lr

080037a4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b084      	sub	sp, #16
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	691b      	ldr	r3, [r3, #16]
 80037b2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	68da      	ldr	r2, [r3, #12]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	430a      	orrs	r2, r1
 80037c0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	689a      	ldr	r2, [r3, #8]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	691b      	ldr	r3, [r3, #16]
 80037ca:	431a      	orrs	r2, r3
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	695b      	ldr	r3, [r3, #20]
 80037d0:	4313      	orrs	r3, r2
 80037d2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	68db      	ldr	r3, [r3, #12]
 80037da:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80037de:	f023 030c 	bic.w	r3, r3, #12
 80037e2:	687a      	ldr	r2, [r7, #4]
 80037e4:	6812      	ldr	r2, [r2, #0]
 80037e6:	68b9      	ldr	r1, [r7, #8]
 80037e8:	430b      	orrs	r3, r1
 80037ea:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	695b      	ldr	r3, [r3, #20]
 80037f2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	699a      	ldr	r2, [r3, #24]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	430a      	orrs	r2, r1
 8003800:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4a2c      	ldr	r2, [pc, #176]	@ (80038b8 <UART_SetConfig+0x114>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d103      	bne.n	8003814 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800380c:	f7ff f9d2 	bl	8002bb4 <HAL_RCC_GetPCLK2Freq>
 8003810:	60f8      	str	r0, [r7, #12]
 8003812:	e002      	b.n	800381a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003814:	f7ff f9ba 	bl	8002b8c <HAL_RCC_GetPCLK1Freq>
 8003818:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800381a:	68fa      	ldr	r2, [r7, #12]
 800381c:	4613      	mov	r3, r2
 800381e:	009b      	lsls	r3, r3, #2
 8003820:	4413      	add	r3, r2
 8003822:	009a      	lsls	r2, r3, #2
 8003824:	441a      	add	r2, r3
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	009b      	lsls	r3, r3, #2
 800382c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003830:	4a22      	ldr	r2, [pc, #136]	@ (80038bc <UART_SetConfig+0x118>)
 8003832:	fba2 2303 	umull	r2, r3, r2, r3
 8003836:	095b      	lsrs	r3, r3, #5
 8003838:	0119      	lsls	r1, r3, #4
 800383a:	68fa      	ldr	r2, [r7, #12]
 800383c:	4613      	mov	r3, r2
 800383e:	009b      	lsls	r3, r3, #2
 8003840:	4413      	add	r3, r2
 8003842:	009a      	lsls	r2, r3, #2
 8003844:	441a      	add	r2, r3
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	009b      	lsls	r3, r3, #2
 800384c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003850:	4b1a      	ldr	r3, [pc, #104]	@ (80038bc <UART_SetConfig+0x118>)
 8003852:	fba3 0302 	umull	r0, r3, r3, r2
 8003856:	095b      	lsrs	r3, r3, #5
 8003858:	2064      	movs	r0, #100	@ 0x64
 800385a:	fb00 f303 	mul.w	r3, r0, r3
 800385e:	1ad3      	subs	r3, r2, r3
 8003860:	011b      	lsls	r3, r3, #4
 8003862:	3332      	adds	r3, #50	@ 0x32
 8003864:	4a15      	ldr	r2, [pc, #84]	@ (80038bc <UART_SetConfig+0x118>)
 8003866:	fba2 2303 	umull	r2, r3, r2, r3
 800386a:	095b      	lsrs	r3, r3, #5
 800386c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003870:	4419      	add	r1, r3
 8003872:	68fa      	ldr	r2, [r7, #12]
 8003874:	4613      	mov	r3, r2
 8003876:	009b      	lsls	r3, r3, #2
 8003878:	4413      	add	r3, r2
 800387a:	009a      	lsls	r2, r3, #2
 800387c:	441a      	add	r2, r3
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	009b      	lsls	r3, r3, #2
 8003884:	fbb2 f2f3 	udiv	r2, r2, r3
 8003888:	4b0c      	ldr	r3, [pc, #48]	@ (80038bc <UART_SetConfig+0x118>)
 800388a:	fba3 0302 	umull	r0, r3, r3, r2
 800388e:	095b      	lsrs	r3, r3, #5
 8003890:	2064      	movs	r0, #100	@ 0x64
 8003892:	fb00 f303 	mul.w	r3, r0, r3
 8003896:	1ad3      	subs	r3, r2, r3
 8003898:	011b      	lsls	r3, r3, #4
 800389a:	3332      	adds	r3, #50	@ 0x32
 800389c:	4a07      	ldr	r2, [pc, #28]	@ (80038bc <UART_SetConfig+0x118>)
 800389e:	fba2 2303 	umull	r2, r3, r2, r3
 80038a2:	095b      	lsrs	r3, r3, #5
 80038a4:	f003 020f 	and.w	r2, r3, #15
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	440a      	add	r2, r1
 80038ae:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80038b0:	bf00      	nop
 80038b2:	3710      	adds	r7, #16
 80038b4:	46bd      	mov	sp, r7
 80038b6:	bd80      	pop	{r7, pc}
 80038b8:	40013800 	.word	0x40013800
 80038bc:	51eb851f 	.word	0x51eb851f

080038c0 <__cvt>:
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80038c6:	461d      	mov	r5, r3
 80038c8:	bfbb      	ittet	lt
 80038ca:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 80038ce:	461d      	movlt	r5, r3
 80038d0:	2300      	movge	r3, #0
 80038d2:	232d      	movlt	r3, #45	@ 0x2d
 80038d4:	b088      	sub	sp, #32
 80038d6:	4614      	mov	r4, r2
 80038d8:	bfb8      	it	lt
 80038da:	4614      	movlt	r4, r2
 80038dc:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80038de:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 80038e0:	7013      	strb	r3, [r2, #0]
 80038e2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80038e4:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 80038e8:	f023 0820 	bic.w	r8, r3, #32
 80038ec:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80038f0:	d005      	beq.n	80038fe <__cvt+0x3e>
 80038f2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80038f6:	d100      	bne.n	80038fa <__cvt+0x3a>
 80038f8:	3601      	adds	r6, #1
 80038fa:	2302      	movs	r3, #2
 80038fc:	e000      	b.n	8003900 <__cvt+0x40>
 80038fe:	2303      	movs	r3, #3
 8003900:	aa07      	add	r2, sp, #28
 8003902:	9204      	str	r2, [sp, #16]
 8003904:	aa06      	add	r2, sp, #24
 8003906:	e9cd a202 	strd	sl, r2, [sp, #8]
 800390a:	e9cd 3600 	strd	r3, r6, [sp]
 800390e:	4622      	mov	r2, r4
 8003910:	462b      	mov	r3, r5
 8003912:	f000 fe6d 	bl	80045f0 <_dtoa_r>
 8003916:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800391a:	4607      	mov	r7, r0
 800391c:	d119      	bne.n	8003952 <__cvt+0x92>
 800391e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8003920:	07db      	lsls	r3, r3, #31
 8003922:	d50e      	bpl.n	8003942 <__cvt+0x82>
 8003924:	eb00 0906 	add.w	r9, r0, r6
 8003928:	2200      	movs	r2, #0
 800392a:	2300      	movs	r3, #0
 800392c:	4620      	mov	r0, r4
 800392e:	4629      	mov	r1, r5
 8003930:	f7fd f83a 	bl	80009a8 <__aeabi_dcmpeq>
 8003934:	b108      	cbz	r0, 800393a <__cvt+0x7a>
 8003936:	f8cd 901c 	str.w	r9, [sp, #28]
 800393a:	2230      	movs	r2, #48	@ 0x30
 800393c:	9b07      	ldr	r3, [sp, #28]
 800393e:	454b      	cmp	r3, r9
 8003940:	d31e      	bcc.n	8003980 <__cvt+0xc0>
 8003942:	4638      	mov	r0, r7
 8003944:	9b07      	ldr	r3, [sp, #28]
 8003946:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8003948:	1bdb      	subs	r3, r3, r7
 800394a:	6013      	str	r3, [r2, #0]
 800394c:	b008      	add	sp, #32
 800394e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003952:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003956:	eb00 0906 	add.w	r9, r0, r6
 800395a:	d1e5      	bne.n	8003928 <__cvt+0x68>
 800395c:	7803      	ldrb	r3, [r0, #0]
 800395e:	2b30      	cmp	r3, #48	@ 0x30
 8003960:	d10a      	bne.n	8003978 <__cvt+0xb8>
 8003962:	2200      	movs	r2, #0
 8003964:	2300      	movs	r3, #0
 8003966:	4620      	mov	r0, r4
 8003968:	4629      	mov	r1, r5
 800396a:	f7fd f81d 	bl	80009a8 <__aeabi_dcmpeq>
 800396e:	b918      	cbnz	r0, 8003978 <__cvt+0xb8>
 8003970:	f1c6 0601 	rsb	r6, r6, #1
 8003974:	f8ca 6000 	str.w	r6, [sl]
 8003978:	f8da 3000 	ldr.w	r3, [sl]
 800397c:	4499      	add	r9, r3
 800397e:	e7d3      	b.n	8003928 <__cvt+0x68>
 8003980:	1c59      	adds	r1, r3, #1
 8003982:	9107      	str	r1, [sp, #28]
 8003984:	701a      	strb	r2, [r3, #0]
 8003986:	e7d9      	b.n	800393c <__cvt+0x7c>

08003988 <__exponent>:
 8003988:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800398a:	2900      	cmp	r1, #0
 800398c:	bfb6      	itet	lt
 800398e:	232d      	movlt	r3, #45	@ 0x2d
 8003990:	232b      	movge	r3, #43	@ 0x2b
 8003992:	4249      	neglt	r1, r1
 8003994:	2909      	cmp	r1, #9
 8003996:	7002      	strb	r2, [r0, #0]
 8003998:	7043      	strb	r3, [r0, #1]
 800399a:	dd29      	ble.n	80039f0 <__exponent+0x68>
 800399c:	f10d 0307 	add.w	r3, sp, #7
 80039a0:	461d      	mov	r5, r3
 80039a2:	270a      	movs	r7, #10
 80039a4:	fbb1 f6f7 	udiv	r6, r1, r7
 80039a8:	461a      	mov	r2, r3
 80039aa:	fb07 1416 	mls	r4, r7, r6, r1
 80039ae:	3430      	adds	r4, #48	@ 0x30
 80039b0:	f802 4c01 	strb.w	r4, [r2, #-1]
 80039b4:	460c      	mov	r4, r1
 80039b6:	2c63      	cmp	r4, #99	@ 0x63
 80039b8:	4631      	mov	r1, r6
 80039ba:	f103 33ff 	add.w	r3, r3, #4294967295
 80039be:	dcf1      	bgt.n	80039a4 <__exponent+0x1c>
 80039c0:	3130      	adds	r1, #48	@ 0x30
 80039c2:	1e94      	subs	r4, r2, #2
 80039c4:	f803 1c01 	strb.w	r1, [r3, #-1]
 80039c8:	4623      	mov	r3, r4
 80039ca:	1c41      	adds	r1, r0, #1
 80039cc:	42ab      	cmp	r3, r5
 80039ce:	d30a      	bcc.n	80039e6 <__exponent+0x5e>
 80039d0:	f10d 0309 	add.w	r3, sp, #9
 80039d4:	1a9b      	subs	r3, r3, r2
 80039d6:	42ac      	cmp	r4, r5
 80039d8:	bf88      	it	hi
 80039da:	2300      	movhi	r3, #0
 80039dc:	3302      	adds	r3, #2
 80039de:	4403      	add	r3, r0
 80039e0:	1a18      	subs	r0, r3, r0
 80039e2:	b003      	add	sp, #12
 80039e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80039e6:	f813 6b01 	ldrb.w	r6, [r3], #1
 80039ea:	f801 6f01 	strb.w	r6, [r1, #1]!
 80039ee:	e7ed      	b.n	80039cc <__exponent+0x44>
 80039f0:	2330      	movs	r3, #48	@ 0x30
 80039f2:	3130      	adds	r1, #48	@ 0x30
 80039f4:	7083      	strb	r3, [r0, #2]
 80039f6:	70c1      	strb	r1, [r0, #3]
 80039f8:	1d03      	adds	r3, r0, #4
 80039fa:	e7f1      	b.n	80039e0 <__exponent+0x58>

080039fc <_printf_float>:
 80039fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a00:	b091      	sub	sp, #68	@ 0x44
 8003a02:	460c      	mov	r4, r1
 8003a04:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8003a08:	4616      	mov	r6, r2
 8003a0a:	461f      	mov	r7, r3
 8003a0c:	4605      	mov	r5, r0
 8003a0e:	f000 fce1 	bl	80043d4 <_localeconv_r>
 8003a12:	6803      	ldr	r3, [r0, #0]
 8003a14:	4618      	mov	r0, r3
 8003a16:	9308      	str	r3, [sp, #32]
 8003a18:	f7fc fb9a 	bl	8000150 <strlen>
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	930e      	str	r3, [sp, #56]	@ 0x38
 8003a20:	f8d8 3000 	ldr.w	r3, [r8]
 8003a24:	9009      	str	r0, [sp, #36]	@ 0x24
 8003a26:	3307      	adds	r3, #7
 8003a28:	f023 0307 	bic.w	r3, r3, #7
 8003a2c:	f103 0208 	add.w	r2, r3, #8
 8003a30:	f894 a018 	ldrb.w	sl, [r4, #24]
 8003a34:	f8d4 b000 	ldr.w	fp, [r4]
 8003a38:	f8c8 2000 	str.w	r2, [r8]
 8003a3c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003a40:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8003a44:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003a46:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8003a4a:	f04f 32ff 	mov.w	r2, #4294967295
 8003a4e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8003a52:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8003a56:	4b9c      	ldr	r3, [pc, #624]	@ (8003cc8 <_printf_float+0x2cc>)
 8003a58:	f7fc ffd8 	bl	8000a0c <__aeabi_dcmpun>
 8003a5c:	bb70      	cbnz	r0, 8003abc <_printf_float+0xc0>
 8003a5e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8003a62:	f04f 32ff 	mov.w	r2, #4294967295
 8003a66:	4b98      	ldr	r3, [pc, #608]	@ (8003cc8 <_printf_float+0x2cc>)
 8003a68:	f7fc ffb2 	bl	80009d0 <__aeabi_dcmple>
 8003a6c:	bb30      	cbnz	r0, 8003abc <_printf_float+0xc0>
 8003a6e:	2200      	movs	r2, #0
 8003a70:	2300      	movs	r3, #0
 8003a72:	4640      	mov	r0, r8
 8003a74:	4649      	mov	r1, r9
 8003a76:	f7fc ffa1 	bl	80009bc <__aeabi_dcmplt>
 8003a7a:	b110      	cbz	r0, 8003a82 <_printf_float+0x86>
 8003a7c:	232d      	movs	r3, #45	@ 0x2d
 8003a7e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003a82:	4a92      	ldr	r2, [pc, #584]	@ (8003ccc <_printf_float+0x2d0>)
 8003a84:	4b92      	ldr	r3, [pc, #584]	@ (8003cd0 <_printf_float+0x2d4>)
 8003a86:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8003a8a:	bf94      	ite	ls
 8003a8c:	4690      	movls	r8, r2
 8003a8e:	4698      	movhi	r8, r3
 8003a90:	2303      	movs	r3, #3
 8003a92:	f04f 0900 	mov.w	r9, #0
 8003a96:	6123      	str	r3, [r4, #16]
 8003a98:	f02b 0304 	bic.w	r3, fp, #4
 8003a9c:	6023      	str	r3, [r4, #0]
 8003a9e:	4633      	mov	r3, r6
 8003aa0:	4621      	mov	r1, r4
 8003aa2:	4628      	mov	r0, r5
 8003aa4:	9700      	str	r7, [sp, #0]
 8003aa6:	aa0f      	add	r2, sp, #60	@ 0x3c
 8003aa8:	f000 f9d4 	bl	8003e54 <_printf_common>
 8003aac:	3001      	adds	r0, #1
 8003aae:	f040 8090 	bne.w	8003bd2 <_printf_float+0x1d6>
 8003ab2:	f04f 30ff 	mov.w	r0, #4294967295
 8003ab6:	b011      	add	sp, #68	@ 0x44
 8003ab8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003abc:	4642      	mov	r2, r8
 8003abe:	464b      	mov	r3, r9
 8003ac0:	4640      	mov	r0, r8
 8003ac2:	4649      	mov	r1, r9
 8003ac4:	f7fc ffa2 	bl	8000a0c <__aeabi_dcmpun>
 8003ac8:	b148      	cbz	r0, 8003ade <_printf_float+0xe2>
 8003aca:	464b      	mov	r3, r9
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	bfb8      	it	lt
 8003ad0:	232d      	movlt	r3, #45	@ 0x2d
 8003ad2:	4a80      	ldr	r2, [pc, #512]	@ (8003cd4 <_printf_float+0x2d8>)
 8003ad4:	bfb8      	it	lt
 8003ad6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8003ada:	4b7f      	ldr	r3, [pc, #508]	@ (8003cd8 <_printf_float+0x2dc>)
 8003adc:	e7d3      	b.n	8003a86 <_printf_float+0x8a>
 8003ade:	6863      	ldr	r3, [r4, #4]
 8003ae0:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8003ae4:	1c5a      	adds	r2, r3, #1
 8003ae6:	d13f      	bne.n	8003b68 <_printf_float+0x16c>
 8003ae8:	2306      	movs	r3, #6
 8003aea:	6063      	str	r3, [r4, #4]
 8003aec:	2200      	movs	r2, #0
 8003aee:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8003af2:	6023      	str	r3, [r4, #0]
 8003af4:	9206      	str	r2, [sp, #24]
 8003af6:	aa0e      	add	r2, sp, #56	@ 0x38
 8003af8:	e9cd a204 	strd	sl, r2, [sp, #16]
 8003afc:	aa0d      	add	r2, sp, #52	@ 0x34
 8003afe:	9203      	str	r2, [sp, #12]
 8003b00:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8003b04:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8003b08:	6863      	ldr	r3, [r4, #4]
 8003b0a:	4642      	mov	r2, r8
 8003b0c:	9300      	str	r3, [sp, #0]
 8003b0e:	4628      	mov	r0, r5
 8003b10:	464b      	mov	r3, r9
 8003b12:	910a      	str	r1, [sp, #40]	@ 0x28
 8003b14:	f7ff fed4 	bl	80038c0 <__cvt>
 8003b18:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8003b1a:	4680      	mov	r8, r0
 8003b1c:	2947      	cmp	r1, #71	@ 0x47
 8003b1e:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8003b20:	d128      	bne.n	8003b74 <_printf_float+0x178>
 8003b22:	1cc8      	adds	r0, r1, #3
 8003b24:	db02      	blt.n	8003b2c <_printf_float+0x130>
 8003b26:	6863      	ldr	r3, [r4, #4]
 8003b28:	4299      	cmp	r1, r3
 8003b2a:	dd40      	ble.n	8003bae <_printf_float+0x1b2>
 8003b2c:	f1aa 0a02 	sub.w	sl, sl, #2
 8003b30:	fa5f fa8a 	uxtb.w	sl, sl
 8003b34:	4652      	mov	r2, sl
 8003b36:	3901      	subs	r1, #1
 8003b38:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8003b3c:	910d      	str	r1, [sp, #52]	@ 0x34
 8003b3e:	f7ff ff23 	bl	8003988 <__exponent>
 8003b42:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8003b44:	4681      	mov	r9, r0
 8003b46:	1813      	adds	r3, r2, r0
 8003b48:	2a01      	cmp	r2, #1
 8003b4a:	6123      	str	r3, [r4, #16]
 8003b4c:	dc02      	bgt.n	8003b54 <_printf_float+0x158>
 8003b4e:	6822      	ldr	r2, [r4, #0]
 8003b50:	07d2      	lsls	r2, r2, #31
 8003b52:	d501      	bpl.n	8003b58 <_printf_float+0x15c>
 8003b54:	3301      	adds	r3, #1
 8003b56:	6123      	str	r3, [r4, #16]
 8003b58:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d09e      	beq.n	8003a9e <_printf_float+0xa2>
 8003b60:	232d      	movs	r3, #45	@ 0x2d
 8003b62:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003b66:	e79a      	b.n	8003a9e <_printf_float+0xa2>
 8003b68:	2947      	cmp	r1, #71	@ 0x47
 8003b6a:	d1bf      	bne.n	8003aec <_printf_float+0xf0>
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d1bd      	bne.n	8003aec <_printf_float+0xf0>
 8003b70:	2301      	movs	r3, #1
 8003b72:	e7ba      	b.n	8003aea <_printf_float+0xee>
 8003b74:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003b78:	d9dc      	bls.n	8003b34 <_printf_float+0x138>
 8003b7a:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8003b7e:	d118      	bne.n	8003bb2 <_printf_float+0x1b6>
 8003b80:	2900      	cmp	r1, #0
 8003b82:	6863      	ldr	r3, [r4, #4]
 8003b84:	dd0b      	ble.n	8003b9e <_printf_float+0x1a2>
 8003b86:	6121      	str	r1, [r4, #16]
 8003b88:	b913      	cbnz	r3, 8003b90 <_printf_float+0x194>
 8003b8a:	6822      	ldr	r2, [r4, #0]
 8003b8c:	07d0      	lsls	r0, r2, #31
 8003b8e:	d502      	bpl.n	8003b96 <_printf_float+0x19a>
 8003b90:	3301      	adds	r3, #1
 8003b92:	440b      	add	r3, r1
 8003b94:	6123      	str	r3, [r4, #16]
 8003b96:	f04f 0900 	mov.w	r9, #0
 8003b9a:	65a1      	str	r1, [r4, #88]	@ 0x58
 8003b9c:	e7dc      	b.n	8003b58 <_printf_float+0x15c>
 8003b9e:	b913      	cbnz	r3, 8003ba6 <_printf_float+0x1aa>
 8003ba0:	6822      	ldr	r2, [r4, #0]
 8003ba2:	07d2      	lsls	r2, r2, #31
 8003ba4:	d501      	bpl.n	8003baa <_printf_float+0x1ae>
 8003ba6:	3302      	adds	r3, #2
 8003ba8:	e7f4      	b.n	8003b94 <_printf_float+0x198>
 8003baa:	2301      	movs	r3, #1
 8003bac:	e7f2      	b.n	8003b94 <_printf_float+0x198>
 8003bae:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8003bb2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8003bb4:	4299      	cmp	r1, r3
 8003bb6:	db05      	blt.n	8003bc4 <_printf_float+0x1c8>
 8003bb8:	6823      	ldr	r3, [r4, #0]
 8003bba:	6121      	str	r1, [r4, #16]
 8003bbc:	07d8      	lsls	r0, r3, #31
 8003bbe:	d5ea      	bpl.n	8003b96 <_printf_float+0x19a>
 8003bc0:	1c4b      	adds	r3, r1, #1
 8003bc2:	e7e7      	b.n	8003b94 <_printf_float+0x198>
 8003bc4:	2900      	cmp	r1, #0
 8003bc6:	bfcc      	ite	gt
 8003bc8:	2201      	movgt	r2, #1
 8003bca:	f1c1 0202 	rsble	r2, r1, #2
 8003bce:	4413      	add	r3, r2
 8003bd0:	e7e0      	b.n	8003b94 <_printf_float+0x198>
 8003bd2:	6823      	ldr	r3, [r4, #0]
 8003bd4:	055a      	lsls	r2, r3, #21
 8003bd6:	d407      	bmi.n	8003be8 <_printf_float+0x1ec>
 8003bd8:	6923      	ldr	r3, [r4, #16]
 8003bda:	4642      	mov	r2, r8
 8003bdc:	4631      	mov	r1, r6
 8003bde:	4628      	mov	r0, r5
 8003be0:	47b8      	blx	r7
 8003be2:	3001      	adds	r0, #1
 8003be4:	d12b      	bne.n	8003c3e <_printf_float+0x242>
 8003be6:	e764      	b.n	8003ab2 <_printf_float+0xb6>
 8003be8:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003bec:	f240 80dc 	bls.w	8003da8 <_printf_float+0x3ac>
 8003bf0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	f7fc fed6 	bl	80009a8 <__aeabi_dcmpeq>
 8003bfc:	2800      	cmp	r0, #0
 8003bfe:	d033      	beq.n	8003c68 <_printf_float+0x26c>
 8003c00:	2301      	movs	r3, #1
 8003c02:	4631      	mov	r1, r6
 8003c04:	4628      	mov	r0, r5
 8003c06:	4a35      	ldr	r2, [pc, #212]	@ (8003cdc <_printf_float+0x2e0>)
 8003c08:	47b8      	blx	r7
 8003c0a:	3001      	adds	r0, #1
 8003c0c:	f43f af51 	beq.w	8003ab2 <_printf_float+0xb6>
 8003c10:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8003c14:	4543      	cmp	r3, r8
 8003c16:	db02      	blt.n	8003c1e <_printf_float+0x222>
 8003c18:	6823      	ldr	r3, [r4, #0]
 8003c1a:	07d8      	lsls	r0, r3, #31
 8003c1c:	d50f      	bpl.n	8003c3e <_printf_float+0x242>
 8003c1e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003c22:	4631      	mov	r1, r6
 8003c24:	4628      	mov	r0, r5
 8003c26:	47b8      	blx	r7
 8003c28:	3001      	adds	r0, #1
 8003c2a:	f43f af42 	beq.w	8003ab2 <_printf_float+0xb6>
 8003c2e:	f04f 0900 	mov.w	r9, #0
 8003c32:	f108 38ff 	add.w	r8, r8, #4294967295
 8003c36:	f104 0a1a 	add.w	sl, r4, #26
 8003c3a:	45c8      	cmp	r8, r9
 8003c3c:	dc09      	bgt.n	8003c52 <_printf_float+0x256>
 8003c3e:	6823      	ldr	r3, [r4, #0]
 8003c40:	079b      	lsls	r3, r3, #30
 8003c42:	f100 8102 	bmi.w	8003e4a <_printf_float+0x44e>
 8003c46:	68e0      	ldr	r0, [r4, #12]
 8003c48:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8003c4a:	4298      	cmp	r0, r3
 8003c4c:	bfb8      	it	lt
 8003c4e:	4618      	movlt	r0, r3
 8003c50:	e731      	b.n	8003ab6 <_printf_float+0xba>
 8003c52:	2301      	movs	r3, #1
 8003c54:	4652      	mov	r2, sl
 8003c56:	4631      	mov	r1, r6
 8003c58:	4628      	mov	r0, r5
 8003c5a:	47b8      	blx	r7
 8003c5c:	3001      	adds	r0, #1
 8003c5e:	f43f af28 	beq.w	8003ab2 <_printf_float+0xb6>
 8003c62:	f109 0901 	add.w	r9, r9, #1
 8003c66:	e7e8      	b.n	8003c3a <_printf_float+0x23e>
 8003c68:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	dc38      	bgt.n	8003ce0 <_printf_float+0x2e4>
 8003c6e:	2301      	movs	r3, #1
 8003c70:	4631      	mov	r1, r6
 8003c72:	4628      	mov	r0, r5
 8003c74:	4a19      	ldr	r2, [pc, #100]	@ (8003cdc <_printf_float+0x2e0>)
 8003c76:	47b8      	blx	r7
 8003c78:	3001      	adds	r0, #1
 8003c7a:	f43f af1a 	beq.w	8003ab2 <_printf_float+0xb6>
 8003c7e:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8003c82:	ea59 0303 	orrs.w	r3, r9, r3
 8003c86:	d102      	bne.n	8003c8e <_printf_float+0x292>
 8003c88:	6823      	ldr	r3, [r4, #0]
 8003c8a:	07d9      	lsls	r1, r3, #31
 8003c8c:	d5d7      	bpl.n	8003c3e <_printf_float+0x242>
 8003c8e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003c92:	4631      	mov	r1, r6
 8003c94:	4628      	mov	r0, r5
 8003c96:	47b8      	blx	r7
 8003c98:	3001      	adds	r0, #1
 8003c9a:	f43f af0a 	beq.w	8003ab2 <_printf_float+0xb6>
 8003c9e:	f04f 0a00 	mov.w	sl, #0
 8003ca2:	f104 0b1a 	add.w	fp, r4, #26
 8003ca6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003ca8:	425b      	negs	r3, r3
 8003caa:	4553      	cmp	r3, sl
 8003cac:	dc01      	bgt.n	8003cb2 <_printf_float+0x2b6>
 8003cae:	464b      	mov	r3, r9
 8003cb0:	e793      	b.n	8003bda <_printf_float+0x1de>
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	465a      	mov	r2, fp
 8003cb6:	4631      	mov	r1, r6
 8003cb8:	4628      	mov	r0, r5
 8003cba:	47b8      	blx	r7
 8003cbc:	3001      	adds	r0, #1
 8003cbe:	f43f aef8 	beq.w	8003ab2 <_printf_float+0xb6>
 8003cc2:	f10a 0a01 	add.w	sl, sl, #1
 8003cc6:	e7ee      	b.n	8003ca6 <_printf_float+0x2aa>
 8003cc8:	7fefffff 	.word	0x7fefffff
 8003ccc:	080065c6 	.word	0x080065c6
 8003cd0:	080065ca 	.word	0x080065ca
 8003cd4:	080065ce 	.word	0x080065ce
 8003cd8:	080065d2 	.word	0x080065d2
 8003cdc:	080065d6 	.word	0x080065d6
 8003ce0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003ce2:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8003ce6:	4553      	cmp	r3, sl
 8003ce8:	bfa8      	it	ge
 8003cea:	4653      	movge	r3, sl
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	4699      	mov	r9, r3
 8003cf0:	dc36      	bgt.n	8003d60 <_printf_float+0x364>
 8003cf2:	f04f 0b00 	mov.w	fp, #0
 8003cf6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003cfa:	f104 021a 	add.w	r2, r4, #26
 8003cfe:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003d00:	930a      	str	r3, [sp, #40]	@ 0x28
 8003d02:	eba3 0309 	sub.w	r3, r3, r9
 8003d06:	455b      	cmp	r3, fp
 8003d08:	dc31      	bgt.n	8003d6e <_printf_float+0x372>
 8003d0a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003d0c:	459a      	cmp	sl, r3
 8003d0e:	dc3a      	bgt.n	8003d86 <_printf_float+0x38a>
 8003d10:	6823      	ldr	r3, [r4, #0]
 8003d12:	07da      	lsls	r2, r3, #31
 8003d14:	d437      	bmi.n	8003d86 <_printf_float+0x38a>
 8003d16:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003d18:	ebaa 0903 	sub.w	r9, sl, r3
 8003d1c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003d1e:	ebaa 0303 	sub.w	r3, sl, r3
 8003d22:	4599      	cmp	r9, r3
 8003d24:	bfa8      	it	ge
 8003d26:	4699      	movge	r9, r3
 8003d28:	f1b9 0f00 	cmp.w	r9, #0
 8003d2c:	dc33      	bgt.n	8003d96 <_printf_float+0x39a>
 8003d2e:	f04f 0800 	mov.w	r8, #0
 8003d32:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003d36:	f104 0b1a 	add.w	fp, r4, #26
 8003d3a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003d3c:	ebaa 0303 	sub.w	r3, sl, r3
 8003d40:	eba3 0309 	sub.w	r3, r3, r9
 8003d44:	4543      	cmp	r3, r8
 8003d46:	f77f af7a 	ble.w	8003c3e <_printf_float+0x242>
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	465a      	mov	r2, fp
 8003d4e:	4631      	mov	r1, r6
 8003d50:	4628      	mov	r0, r5
 8003d52:	47b8      	blx	r7
 8003d54:	3001      	adds	r0, #1
 8003d56:	f43f aeac 	beq.w	8003ab2 <_printf_float+0xb6>
 8003d5a:	f108 0801 	add.w	r8, r8, #1
 8003d5e:	e7ec      	b.n	8003d3a <_printf_float+0x33e>
 8003d60:	4642      	mov	r2, r8
 8003d62:	4631      	mov	r1, r6
 8003d64:	4628      	mov	r0, r5
 8003d66:	47b8      	blx	r7
 8003d68:	3001      	adds	r0, #1
 8003d6a:	d1c2      	bne.n	8003cf2 <_printf_float+0x2f6>
 8003d6c:	e6a1      	b.n	8003ab2 <_printf_float+0xb6>
 8003d6e:	2301      	movs	r3, #1
 8003d70:	4631      	mov	r1, r6
 8003d72:	4628      	mov	r0, r5
 8003d74:	920a      	str	r2, [sp, #40]	@ 0x28
 8003d76:	47b8      	blx	r7
 8003d78:	3001      	adds	r0, #1
 8003d7a:	f43f ae9a 	beq.w	8003ab2 <_printf_float+0xb6>
 8003d7e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8003d80:	f10b 0b01 	add.w	fp, fp, #1
 8003d84:	e7bb      	b.n	8003cfe <_printf_float+0x302>
 8003d86:	4631      	mov	r1, r6
 8003d88:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003d8c:	4628      	mov	r0, r5
 8003d8e:	47b8      	blx	r7
 8003d90:	3001      	adds	r0, #1
 8003d92:	d1c0      	bne.n	8003d16 <_printf_float+0x31a>
 8003d94:	e68d      	b.n	8003ab2 <_printf_float+0xb6>
 8003d96:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8003d98:	464b      	mov	r3, r9
 8003d9a:	4631      	mov	r1, r6
 8003d9c:	4628      	mov	r0, r5
 8003d9e:	4442      	add	r2, r8
 8003da0:	47b8      	blx	r7
 8003da2:	3001      	adds	r0, #1
 8003da4:	d1c3      	bne.n	8003d2e <_printf_float+0x332>
 8003da6:	e684      	b.n	8003ab2 <_printf_float+0xb6>
 8003da8:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8003dac:	f1ba 0f01 	cmp.w	sl, #1
 8003db0:	dc01      	bgt.n	8003db6 <_printf_float+0x3ba>
 8003db2:	07db      	lsls	r3, r3, #31
 8003db4:	d536      	bpl.n	8003e24 <_printf_float+0x428>
 8003db6:	2301      	movs	r3, #1
 8003db8:	4642      	mov	r2, r8
 8003dba:	4631      	mov	r1, r6
 8003dbc:	4628      	mov	r0, r5
 8003dbe:	47b8      	blx	r7
 8003dc0:	3001      	adds	r0, #1
 8003dc2:	f43f ae76 	beq.w	8003ab2 <_printf_float+0xb6>
 8003dc6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003dca:	4631      	mov	r1, r6
 8003dcc:	4628      	mov	r0, r5
 8003dce:	47b8      	blx	r7
 8003dd0:	3001      	adds	r0, #1
 8003dd2:	f43f ae6e 	beq.w	8003ab2 <_printf_float+0xb6>
 8003dd6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8003dda:	2200      	movs	r2, #0
 8003ddc:	2300      	movs	r3, #0
 8003dde:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003de2:	f7fc fde1 	bl	80009a8 <__aeabi_dcmpeq>
 8003de6:	b9c0      	cbnz	r0, 8003e1a <_printf_float+0x41e>
 8003de8:	4653      	mov	r3, sl
 8003dea:	f108 0201 	add.w	r2, r8, #1
 8003dee:	4631      	mov	r1, r6
 8003df0:	4628      	mov	r0, r5
 8003df2:	47b8      	blx	r7
 8003df4:	3001      	adds	r0, #1
 8003df6:	d10c      	bne.n	8003e12 <_printf_float+0x416>
 8003df8:	e65b      	b.n	8003ab2 <_printf_float+0xb6>
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	465a      	mov	r2, fp
 8003dfe:	4631      	mov	r1, r6
 8003e00:	4628      	mov	r0, r5
 8003e02:	47b8      	blx	r7
 8003e04:	3001      	adds	r0, #1
 8003e06:	f43f ae54 	beq.w	8003ab2 <_printf_float+0xb6>
 8003e0a:	f108 0801 	add.w	r8, r8, #1
 8003e0e:	45d0      	cmp	r8, sl
 8003e10:	dbf3      	blt.n	8003dfa <_printf_float+0x3fe>
 8003e12:	464b      	mov	r3, r9
 8003e14:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8003e18:	e6e0      	b.n	8003bdc <_printf_float+0x1e0>
 8003e1a:	f04f 0800 	mov.w	r8, #0
 8003e1e:	f104 0b1a 	add.w	fp, r4, #26
 8003e22:	e7f4      	b.n	8003e0e <_printf_float+0x412>
 8003e24:	2301      	movs	r3, #1
 8003e26:	4642      	mov	r2, r8
 8003e28:	e7e1      	b.n	8003dee <_printf_float+0x3f2>
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	464a      	mov	r2, r9
 8003e2e:	4631      	mov	r1, r6
 8003e30:	4628      	mov	r0, r5
 8003e32:	47b8      	blx	r7
 8003e34:	3001      	adds	r0, #1
 8003e36:	f43f ae3c 	beq.w	8003ab2 <_printf_float+0xb6>
 8003e3a:	f108 0801 	add.w	r8, r8, #1
 8003e3e:	68e3      	ldr	r3, [r4, #12]
 8003e40:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8003e42:	1a5b      	subs	r3, r3, r1
 8003e44:	4543      	cmp	r3, r8
 8003e46:	dcf0      	bgt.n	8003e2a <_printf_float+0x42e>
 8003e48:	e6fd      	b.n	8003c46 <_printf_float+0x24a>
 8003e4a:	f04f 0800 	mov.w	r8, #0
 8003e4e:	f104 0919 	add.w	r9, r4, #25
 8003e52:	e7f4      	b.n	8003e3e <_printf_float+0x442>

08003e54 <_printf_common>:
 8003e54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e58:	4616      	mov	r6, r2
 8003e5a:	4698      	mov	r8, r3
 8003e5c:	688a      	ldr	r2, [r1, #8]
 8003e5e:	690b      	ldr	r3, [r1, #16]
 8003e60:	4607      	mov	r7, r0
 8003e62:	4293      	cmp	r3, r2
 8003e64:	bfb8      	it	lt
 8003e66:	4613      	movlt	r3, r2
 8003e68:	6033      	str	r3, [r6, #0]
 8003e6a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003e6e:	460c      	mov	r4, r1
 8003e70:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003e74:	b10a      	cbz	r2, 8003e7a <_printf_common+0x26>
 8003e76:	3301      	adds	r3, #1
 8003e78:	6033      	str	r3, [r6, #0]
 8003e7a:	6823      	ldr	r3, [r4, #0]
 8003e7c:	0699      	lsls	r1, r3, #26
 8003e7e:	bf42      	ittt	mi
 8003e80:	6833      	ldrmi	r3, [r6, #0]
 8003e82:	3302      	addmi	r3, #2
 8003e84:	6033      	strmi	r3, [r6, #0]
 8003e86:	6825      	ldr	r5, [r4, #0]
 8003e88:	f015 0506 	ands.w	r5, r5, #6
 8003e8c:	d106      	bne.n	8003e9c <_printf_common+0x48>
 8003e8e:	f104 0a19 	add.w	sl, r4, #25
 8003e92:	68e3      	ldr	r3, [r4, #12]
 8003e94:	6832      	ldr	r2, [r6, #0]
 8003e96:	1a9b      	subs	r3, r3, r2
 8003e98:	42ab      	cmp	r3, r5
 8003e9a:	dc2b      	bgt.n	8003ef4 <_printf_common+0xa0>
 8003e9c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003ea0:	6822      	ldr	r2, [r4, #0]
 8003ea2:	3b00      	subs	r3, #0
 8003ea4:	bf18      	it	ne
 8003ea6:	2301      	movne	r3, #1
 8003ea8:	0692      	lsls	r2, r2, #26
 8003eaa:	d430      	bmi.n	8003f0e <_printf_common+0xba>
 8003eac:	4641      	mov	r1, r8
 8003eae:	4638      	mov	r0, r7
 8003eb0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003eb4:	47c8      	blx	r9
 8003eb6:	3001      	adds	r0, #1
 8003eb8:	d023      	beq.n	8003f02 <_printf_common+0xae>
 8003eba:	6823      	ldr	r3, [r4, #0]
 8003ebc:	6922      	ldr	r2, [r4, #16]
 8003ebe:	f003 0306 	and.w	r3, r3, #6
 8003ec2:	2b04      	cmp	r3, #4
 8003ec4:	bf14      	ite	ne
 8003ec6:	2500      	movne	r5, #0
 8003ec8:	6833      	ldreq	r3, [r6, #0]
 8003eca:	f04f 0600 	mov.w	r6, #0
 8003ece:	bf08      	it	eq
 8003ed0:	68e5      	ldreq	r5, [r4, #12]
 8003ed2:	f104 041a 	add.w	r4, r4, #26
 8003ed6:	bf08      	it	eq
 8003ed8:	1aed      	subeq	r5, r5, r3
 8003eda:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8003ede:	bf08      	it	eq
 8003ee0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	bfc4      	itt	gt
 8003ee8:	1a9b      	subgt	r3, r3, r2
 8003eea:	18ed      	addgt	r5, r5, r3
 8003eec:	42b5      	cmp	r5, r6
 8003eee:	d11a      	bne.n	8003f26 <_printf_common+0xd2>
 8003ef0:	2000      	movs	r0, #0
 8003ef2:	e008      	b.n	8003f06 <_printf_common+0xb2>
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	4652      	mov	r2, sl
 8003ef8:	4641      	mov	r1, r8
 8003efa:	4638      	mov	r0, r7
 8003efc:	47c8      	blx	r9
 8003efe:	3001      	adds	r0, #1
 8003f00:	d103      	bne.n	8003f0a <_printf_common+0xb6>
 8003f02:	f04f 30ff 	mov.w	r0, #4294967295
 8003f06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f0a:	3501      	adds	r5, #1
 8003f0c:	e7c1      	b.n	8003e92 <_printf_common+0x3e>
 8003f0e:	2030      	movs	r0, #48	@ 0x30
 8003f10:	18e1      	adds	r1, r4, r3
 8003f12:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003f16:	1c5a      	adds	r2, r3, #1
 8003f18:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003f1c:	4422      	add	r2, r4
 8003f1e:	3302      	adds	r3, #2
 8003f20:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003f24:	e7c2      	b.n	8003eac <_printf_common+0x58>
 8003f26:	2301      	movs	r3, #1
 8003f28:	4622      	mov	r2, r4
 8003f2a:	4641      	mov	r1, r8
 8003f2c:	4638      	mov	r0, r7
 8003f2e:	47c8      	blx	r9
 8003f30:	3001      	adds	r0, #1
 8003f32:	d0e6      	beq.n	8003f02 <_printf_common+0xae>
 8003f34:	3601      	adds	r6, #1
 8003f36:	e7d9      	b.n	8003eec <_printf_common+0x98>

08003f38 <_printf_i>:
 8003f38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003f3c:	7e0f      	ldrb	r7, [r1, #24]
 8003f3e:	4691      	mov	r9, r2
 8003f40:	2f78      	cmp	r7, #120	@ 0x78
 8003f42:	4680      	mov	r8, r0
 8003f44:	460c      	mov	r4, r1
 8003f46:	469a      	mov	sl, r3
 8003f48:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003f4a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003f4e:	d807      	bhi.n	8003f60 <_printf_i+0x28>
 8003f50:	2f62      	cmp	r7, #98	@ 0x62
 8003f52:	d80a      	bhi.n	8003f6a <_printf_i+0x32>
 8003f54:	2f00      	cmp	r7, #0
 8003f56:	f000 80d3 	beq.w	8004100 <_printf_i+0x1c8>
 8003f5a:	2f58      	cmp	r7, #88	@ 0x58
 8003f5c:	f000 80ba 	beq.w	80040d4 <_printf_i+0x19c>
 8003f60:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003f64:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003f68:	e03a      	b.n	8003fe0 <_printf_i+0xa8>
 8003f6a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003f6e:	2b15      	cmp	r3, #21
 8003f70:	d8f6      	bhi.n	8003f60 <_printf_i+0x28>
 8003f72:	a101      	add	r1, pc, #4	@ (adr r1, 8003f78 <_printf_i+0x40>)
 8003f74:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003f78:	08003fd1 	.word	0x08003fd1
 8003f7c:	08003fe5 	.word	0x08003fe5
 8003f80:	08003f61 	.word	0x08003f61
 8003f84:	08003f61 	.word	0x08003f61
 8003f88:	08003f61 	.word	0x08003f61
 8003f8c:	08003f61 	.word	0x08003f61
 8003f90:	08003fe5 	.word	0x08003fe5
 8003f94:	08003f61 	.word	0x08003f61
 8003f98:	08003f61 	.word	0x08003f61
 8003f9c:	08003f61 	.word	0x08003f61
 8003fa0:	08003f61 	.word	0x08003f61
 8003fa4:	080040e7 	.word	0x080040e7
 8003fa8:	0800400f 	.word	0x0800400f
 8003fac:	080040a1 	.word	0x080040a1
 8003fb0:	08003f61 	.word	0x08003f61
 8003fb4:	08003f61 	.word	0x08003f61
 8003fb8:	08004109 	.word	0x08004109
 8003fbc:	08003f61 	.word	0x08003f61
 8003fc0:	0800400f 	.word	0x0800400f
 8003fc4:	08003f61 	.word	0x08003f61
 8003fc8:	08003f61 	.word	0x08003f61
 8003fcc:	080040a9 	.word	0x080040a9
 8003fd0:	6833      	ldr	r3, [r6, #0]
 8003fd2:	1d1a      	adds	r2, r3, #4
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	6032      	str	r2, [r6, #0]
 8003fd8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003fdc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	e09e      	b.n	8004122 <_printf_i+0x1ea>
 8003fe4:	6833      	ldr	r3, [r6, #0]
 8003fe6:	6820      	ldr	r0, [r4, #0]
 8003fe8:	1d19      	adds	r1, r3, #4
 8003fea:	6031      	str	r1, [r6, #0]
 8003fec:	0606      	lsls	r6, r0, #24
 8003fee:	d501      	bpl.n	8003ff4 <_printf_i+0xbc>
 8003ff0:	681d      	ldr	r5, [r3, #0]
 8003ff2:	e003      	b.n	8003ffc <_printf_i+0xc4>
 8003ff4:	0645      	lsls	r5, r0, #25
 8003ff6:	d5fb      	bpl.n	8003ff0 <_printf_i+0xb8>
 8003ff8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003ffc:	2d00      	cmp	r5, #0
 8003ffe:	da03      	bge.n	8004008 <_printf_i+0xd0>
 8004000:	232d      	movs	r3, #45	@ 0x2d
 8004002:	426d      	negs	r5, r5
 8004004:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004008:	230a      	movs	r3, #10
 800400a:	4859      	ldr	r0, [pc, #356]	@ (8004170 <_printf_i+0x238>)
 800400c:	e011      	b.n	8004032 <_printf_i+0xfa>
 800400e:	6821      	ldr	r1, [r4, #0]
 8004010:	6833      	ldr	r3, [r6, #0]
 8004012:	0608      	lsls	r0, r1, #24
 8004014:	f853 5b04 	ldr.w	r5, [r3], #4
 8004018:	d402      	bmi.n	8004020 <_printf_i+0xe8>
 800401a:	0649      	lsls	r1, r1, #25
 800401c:	bf48      	it	mi
 800401e:	b2ad      	uxthmi	r5, r5
 8004020:	2f6f      	cmp	r7, #111	@ 0x6f
 8004022:	6033      	str	r3, [r6, #0]
 8004024:	bf14      	ite	ne
 8004026:	230a      	movne	r3, #10
 8004028:	2308      	moveq	r3, #8
 800402a:	4851      	ldr	r0, [pc, #324]	@ (8004170 <_printf_i+0x238>)
 800402c:	2100      	movs	r1, #0
 800402e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004032:	6866      	ldr	r6, [r4, #4]
 8004034:	2e00      	cmp	r6, #0
 8004036:	bfa8      	it	ge
 8004038:	6821      	ldrge	r1, [r4, #0]
 800403a:	60a6      	str	r6, [r4, #8]
 800403c:	bfa4      	itt	ge
 800403e:	f021 0104 	bicge.w	r1, r1, #4
 8004042:	6021      	strge	r1, [r4, #0]
 8004044:	b90d      	cbnz	r5, 800404a <_printf_i+0x112>
 8004046:	2e00      	cmp	r6, #0
 8004048:	d04b      	beq.n	80040e2 <_printf_i+0x1aa>
 800404a:	4616      	mov	r6, r2
 800404c:	fbb5 f1f3 	udiv	r1, r5, r3
 8004050:	fb03 5711 	mls	r7, r3, r1, r5
 8004054:	5dc7      	ldrb	r7, [r0, r7]
 8004056:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800405a:	462f      	mov	r7, r5
 800405c:	42bb      	cmp	r3, r7
 800405e:	460d      	mov	r5, r1
 8004060:	d9f4      	bls.n	800404c <_printf_i+0x114>
 8004062:	2b08      	cmp	r3, #8
 8004064:	d10b      	bne.n	800407e <_printf_i+0x146>
 8004066:	6823      	ldr	r3, [r4, #0]
 8004068:	07df      	lsls	r7, r3, #31
 800406a:	d508      	bpl.n	800407e <_printf_i+0x146>
 800406c:	6923      	ldr	r3, [r4, #16]
 800406e:	6861      	ldr	r1, [r4, #4]
 8004070:	4299      	cmp	r1, r3
 8004072:	bfde      	ittt	le
 8004074:	2330      	movle	r3, #48	@ 0x30
 8004076:	f806 3c01 	strble.w	r3, [r6, #-1]
 800407a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800407e:	1b92      	subs	r2, r2, r6
 8004080:	6122      	str	r2, [r4, #16]
 8004082:	464b      	mov	r3, r9
 8004084:	4621      	mov	r1, r4
 8004086:	4640      	mov	r0, r8
 8004088:	f8cd a000 	str.w	sl, [sp]
 800408c:	aa03      	add	r2, sp, #12
 800408e:	f7ff fee1 	bl	8003e54 <_printf_common>
 8004092:	3001      	adds	r0, #1
 8004094:	d14a      	bne.n	800412c <_printf_i+0x1f4>
 8004096:	f04f 30ff 	mov.w	r0, #4294967295
 800409a:	b004      	add	sp, #16
 800409c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80040a0:	6823      	ldr	r3, [r4, #0]
 80040a2:	f043 0320 	orr.w	r3, r3, #32
 80040a6:	6023      	str	r3, [r4, #0]
 80040a8:	2778      	movs	r7, #120	@ 0x78
 80040aa:	4832      	ldr	r0, [pc, #200]	@ (8004174 <_printf_i+0x23c>)
 80040ac:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80040b0:	6823      	ldr	r3, [r4, #0]
 80040b2:	6831      	ldr	r1, [r6, #0]
 80040b4:	061f      	lsls	r7, r3, #24
 80040b6:	f851 5b04 	ldr.w	r5, [r1], #4
 80040ba:	d402      	bmi.n	80040c2 <_printf_i+0x18a>
 80040bc:	065f      	lsls	r7, r3, #25
 80040be:	bf48      	it	mi
 80040c0:	b2ad      	uxthmi	r5, r5
 80040c2:	6031      	str	r1, [r6, #0]
 80040c4:	07d9      	lsls	r1, r3, #31
 80040c6:	bf44      	itt	mi
 80040c8:	f043 0320 	orrmi.w	r3, r3, #32
 80040cc:	6023      	strmi	r3, [r4, #0]
 80040ce:	b11d      	cbz	r5, 80040d8 <_printf_i+0x1a0>
 80040d0:	2310      	movs	r3, #16
 80040d2:	e7ab      	b.n	800402c <_printf_i+0xf4>
 80040d4:	4826      	ldr	r0, [pc, #152]	@ (8004170 <_printf_i+0x238>)
 80040d6:	e7e9      	b.n	80040ac <_printf_i+0x174>
 80040d8:	6823      	ldr	r3, [r4, #0]
 80040da:	f023 0320 	bic.w	r3, r3, #32
 80040de:	6023      	str	r3, [r4, #0]
 80040e0:	e7f6      	b.n	80040d0 <_printf_i+0x198>
 80040e2:	4616      	mov	r6, r2
 80040e4:	e7bd      	b.n	8004062 <_printf_i+0x12a>
 80040e6:	6833      	ldr	r3, [r6, #0]
 80040e8:	6825      	ldr	r5, [r4, #0]
 80040ea:	1d18      	adds	r0, r3, #4
 80040ec:	6961      	ldr	r1, [r4, #20]
 80040ee:	6030      	str	r0, [r6, #0]
 80040f0:	062e      	lsls	r6, r5, #24
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	d501      	bpl.n	80040fa <_printf_i+0x1c2>
 80040f6:	6019      	str	r1, [r3, #0]
 80040f8:	e002      	b.n	8004100 <_printf_i+0x1c8>
 80040fa:	0668      	lsls	r0, r5, #25
 80040fc:	d5fb      	bpl.n	80040f6 <_printf_i+0x1be>
 80040fe:	8019      	strh	r1, [r3, #0]
 8004100:	2300      	movs	r3, #0
 8004102:	4616      	mov	r6, r2
 8004104:	6123      	str	r3, [r4, #16]
 8004106:	e7bc      	b.n	8004082 <_printf_i+0x14a>
 8004108:	6833      	ldr	r3, [r6, #0]
 800410a:	2100      	movs	r1, #0
 800410c:	1d1a      	adds	r2, r3, #4
 800410e:	6032      	str	r2, [r6, #0]
 8004110:	681e      	ldr	r6, [r3, #0]
 8004112:	6862      	ldr	r2, [r4, #4]
 8004114:	4630      	mov	r0, r6
 8004116:	f000 f9d4 	bl	80044c2 <memchr>
 800411a:	b108      	cbz	r0, 8004120 <_printf_i+0x1e8>
 800411c:	1b80      	subs	r0, r0, r6
 800411e:	6060      	str	r0, [r4, #4]
 8004120:	6863      	ldr	r3, [r4, #4]
 8004122:	6123      	str	r3, [r4, #16]
 8004124:	2300      	movs	r3, #0
 8004126:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800412a:	e7aa      	b.n	8004082 <_printf_i+0x14a>
 800412c:	4632      	mov	r2, r6
 800412e:	4649      	mov	r1, r9
 8004130:	4640      	mov	r0, r8
 8004132:	6923      	ldr	r3, [r4, #16]
 8004134:	47d0      	blx	sl
 8004136:	3001      	adds	r0, #1
 8004138:	d0ad      	beq.n	8004096 <_printf_i+0x15e>
 800413a:	6823      	ldr	r3, [r4, #0]
 800413c:	079b      	lsls	r3, r3, #30
 800413e:	d413      	bmi.n	8004168 <_printf_i+0x230>
 8004140:	68e0      	ldr	r0, [r4, #12]
 8004142:	9b03      	ldr	r3, [sp, #12]
 8004144:	4298      	cmp	r0, r3
 8004146:	bfb8      	it	lt
 8004148:	4618      	movlt	r0, r3
 800414a:	e7a6      	b.n	800409a <_printf_i+0x162>
 800414c:	2301      	movs	r3, #1
 800414e:	4632      	mov	r2, r6
 8004150:	4649      	mov	r1, r9
 8004152:	4640      	mov	r0, r8
 8004154:	47d0      	blx	sl
 8004156:	3001      	adds	r0, #1
 8004158:	d09d      	beq.n	8004096 <_printf_i+0x15e>
 800415a:	3501      	adds	r5, #1
 800415c:	68e3      	ldr	r3, [r4, #12]
 800415e:	9903      	ldr	r1, [sp, #12]
 8004160:	1a5b      	subs	r3, r3, r1
 8004162:	42ab      	cmp	r3, r5
 8004164:	dcf2      	bgt.n	800414c <_printf_i+0x214>
 8004166:	e7eb      	b.n	8004140 <_printf_i+0x208>
 8004168:	2500      	movs	r5, #0
 800416a:	f104 0619 	add.w	r6, r4, #25
 800416e:	e7f5      	b.n	800415c <_printf_i+0x224>
 8004170:	080065d8 	.word	0x080065d8
 8004174:	080065e9 	.word	0x080065e9

08004178 <std>:
 8004178:	2300      	movs	r3, #0
 800417a:	b510      	push	{r4, lr}
 800417c:	4604      	mov	r4, r0
 800417e:	e9c0 3300 	strd	r3, r3, [r0]
 8004182:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004186:	6083      	str	r3, [r0, #8]
 8004188:	8181      	strh	r1, [r0, #12]
 800418a:	6643      	str	r3, [r0, #100]	@ 0x64
 800418c:	81c2      	strh	r2, [r0, #14]
 800418e:	6183      	str	r3, [r0, #24]
 8004190:	4619      	mov	r1, r3
 8004192:	2208      	movs	r2, #8
 8004194:	305c      	adds	r0, #92	@ 0x5c
 8004196:	f000 f914 	bl	80043c2 <memset>
 800419a:	4b0d      	ldr	r3, [pc, #52]	@ (80041d0 <std+0x58>)
 800419c:	6224      	str	r4, [r4, #32]
 800419e:	6263      	str	r3, [r4, #36]	@ 0x24
 80041a0:	4b0c      	ldr	r3, [pc, #48]	@ (80041d4 <std+0x5c>)
 80041a2:	62a3      	str	r3, [r4, #40]	@ 0x28
 80041a4:	4b0c      	ldr	r3, [pc, #48]	@ (80041d8 <std+0x60>)
 80041a6:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80041a8:	4b0c      	ldr	r3, [pc, #48]	@ (80041dc <std+0x64>)
 80041aa:	6323      	str	r3, [r4, #48]	@ 0x30
 80041ac:	4b0c      	ldr	r3, [pc, #48]	@ (80041e0 <std+0x68>)
 80041ae:	429c      	cmp	r4, r3
 80041b0:	d006      	beq.n	80041c0 <std+0x48>
 80041b2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80041b6:	4294      	cmp	r4, r2
 80041b8:	d002      	beq.n	80041c0 <std+0x48>
 80041ba:	33d0      	adds	r3, #208	@ 0xd0
 80041bc:	429c      	cmp	r4, r3
 80041be:	d105      	bne.n	80041cc <std+0x54>
 80041c0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80041c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80041c8:	f000 b978 	b.w	80044bc <__retarget_lock_init_recursive>
 80041cc:	bd10      	pop	{r4, pc}
 80041ce:	bf00      	nop
 80041d0:	0800433d 	.word	0x0800433d
 80041d4:	0800435f 	.word	0x0800435f
 80041d8:	08004397 	.word	0x08004397
 80041dc:	080043bb 	.word	0x080043bb
 80041e0:	200002b8 	.word	0x200002b8

080041e4 <stdio_exit_handler>:
 80041e4:	4a02      	ldr	r2, [pc, #8]	@ (80041f0 <stdio_exit_handler+0xc>)
 80041e6:	4903      	ldr	r1, [pc, #12]	@ (80041f4 <stdio_exit_handler+0x10>)
 80041e8:	4803      	ldr	r0, [pc, #12]	@ (80041f8 <stdio_exit_handler+0x14>)
 80041ea:	f000 b869 	b.w	80042c0 <_fwalk_sglue>
 80041ee:	bf00      	nop
 80041f0:	2000000c 	.word	0x2000000c
 80041f4:	08005e2d 	.word	0x08005e2d
 80041f8:	2000001c 	.word	0x2000001c

080041fc <cleanup_stdio>:
 80041fc:	6841      	ldr	r1, [r0, #4]
 80041fe:	4b0c      	ldr	r3, [pc, #48]	@ (8004230 <cleanup_stdio+0x34>)
 8004200:	b510      	push	{r4, lr}
 8004202:	4299      	cmp	r1, r3
 8004204:	4604      	mov	r4, r0
 8004206:	d001      	beq.n	800420c <cleanup_stdio+0x10>
 8004208:	f001 fe10 	bl	8005e2c <_fflush_r>
 800420c:	68a1      	ldr	r1, [r4, #8]
 800420e:	4b09      	ldr	r3, [pc, #36]	@ (8004234 <cleanup_stdio+0x38>)
 8004210:	4299      	cmp	r1, r3
 8004212:	d002      	beq.n	800421a <cleanup_stdio+0x1e>
 8004214:	4620      	mov	r0, r4
 8004216:	f001 fe09 	bl	8005e2c <_fflush_r>
 800421a:	68e1      	ldr	r1, [r4, #12]
 800421c:	4b06      	ldr	r3, [pc, #24]	@ (8004238 <cleanup_stdio+0x3c>)
 800421e:	4299      	cmp	r1, r3
 8004220:	d004      	beq.n	800422c <cleanup_stdio+0x30>
 8004222:	4620      	mov	r0, r4
 8004224:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004228:	f001 be00 	b.w	8005e2c <_fflush_r>
 800422c:	bd10      	pop	{r4, pc}
 800422e:	bf00      	nop
 8004230:	200002b8 	.word	0x200002b8
 8004234:	20000320 	.word	0x20000320
 8004238:	20000388 	.word	0x20000388

0800423c <global_stdio_init.part.0>:
 800423c:	b510      	push	{r4, lr}
 800423e:	4b0b      	ldr	r3, [pc, #44]	@ (800426c <global_stdio_init.part.0+0x30>)
 8004240:	4c0b      	ldr	r4, [pc, #44]	@ (8004270 <global_stdio_init.part.0+0x34>)
 8004242:	4a0c      	ldr	r2, [pc, #48]	@ (8004274 <global_stdio_init.part.0+0x38>)
 8004244:	4620      	mov	r0, r4
 8004246:	601a      	str	r2, [r3, #0]
 8004248:	2104      	movs	r1, #4
 800424a:	2200      	movs	r2, #0
 800424c:	f7ff ff94 	bl	8004178 <std>
 8004250:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004254:	2201      	movs	r2, #1
 8004256:	2109      	movs	r1, #9
 8004258:	f7ff ff8e 	bl	8004178 <std>
 800425c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004260:	2202      	movs	r2, #2
 8004262:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004266:	2112      	movs	r1, #18
 8004268:	f7ff bf86 	b.w	8004178 <std>
 800426c:	200003f0 	.word	0x200003f0
 8004270:	200002b8 	.word	0x200002b8
 8004274:	080041e5 	.word	0x080041e5

08004278 <__sfp_lock_acquire>:
 8004278:	4801      	ldr	r0, [pc, #4]	@ (8004280 <__sfp_lock_acquire+0x8>)
 800427a:	f000 b920 	b.w	80044be <__retarget_lock_acquire_recursive>
 800427e:	bf00      	nop
 8004280:	200003f9 	.word	0x200003f9

08004284 <__sfp_lock_release>:
 8004284:	4801      	ldr	r0, [pc, #4]	@ (800428c <__sfp_lock_release+0x8>)
 8004286:	f000 b91b 	b.w	80044c0 <__retarget_lock_release_recursive>
 800428a:	bf00      	nop
 800428c:	200003f9 	.word	0x200003f9

08004290 <__sinit>:
 8004290:	b510      	push	{r4, lr}
 8004292:	4604      	mov	r4, r0
 8004294:	f7ff fff0 	bl	8004278 <__sfp_lock_acquire>
 8004298:	6a23      	ldr	r3, [r4, #32]
 800429a:	b11b      	cbz	r3, 80042a4 <__sinit+0x14>
 800429c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80042a0:	f7ff bff0 	b.w	8004284 <__sfp_lock_release>
 80042a4:	4b04      	ldr	r3, [pc, #16]	@ (80042b8 <__sinit+0x28>)
 80042a6:	6223      	str	r3, [r4, #32]
 80042a8:	4b04      	ldr	r3, [pc, #16]	@ (80042bc <__sinit+0x2c>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d1f5      	bne.n	800429c <__sinit+0xc>
 80042b0:	f7ff ffc4 	bl	800423c <global_stdio_init.part.0>
 80042b4:	e7f2      	b.n	800429c <__sinit+0xc>
 80042b6:	bf00      	nop
 80042b8:	080041fd 	.word	0x080041fd
 80042bc:	200003f0 	.word	0x200003f0

080042c0 <_fwalk_sglue>:
 80042c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80042c4:	4607      	mov	r7, r0
 80042c6:	4688      	mov	r8, r1
 80042c8:	4614      	mov	r4, r2
 80042ca:	2600      	movs	r6, #0
 80042cc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80042d0:	f1b9 0901 	subs.w	r9, r9, #1
 80042d4:	d505      	bpl.n	80042e2 <_fwalk_sglue+0x22>
 80042d6:	6824      	ldr	r4, [r4, #0]
 80042d8:	2c00      	cmp	r4, #0
 80042da:	d1f7      	bne.n	80042cc <_fwalk_sglue+0xc>
 80042dc:	4630      	mov	r0, r6
 80042de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80042e2:	89ab      	ldrh	r3, [r5, #12]
 80042e4:	2b01      	cmp	r3, #1
 80042e6:	d907      	bls.n	80042f8 <_fwalk_sglue+0x38>
 80042e8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80042ec:	3301      	adds	r3, #1
 80042ee:	d003      	beq.n	80042f8 <_fwalk_sglue+0x38>
 80042f0:	4629      	mov	r1, r5
 80042f2:	4638      	mov	r0, r7
 80042f4:	47c0      	blx	r8
 80042f6:	4306      	orrs	r6, r0
 80042f8:	3568      	adds	r5, #104	@ 0x68
 80042fa:	e7e9      	b.n	80042d0 <_fwalk_sglue+0x10>

080042fc <siprintf>:
 80042fc:	b40e      	push	{r1, r2, r3}
 80042fe:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004302:	b500      	push	{lr}
 8004304:	b09c      	sub	sp, #112	@ 0x70
 8004306:	ab1d      	add	r3, sp, #116	@ 0x74
 8004308:	9002      	str	r0, [sp, #8]
 800430a:	9006      	str	r0, [sp, #24]
 800430c:	9107      	str	r1, [sp, #28]
 800430e:	9104      	str	r1, [sp, #16]
 8004310:	4808      	ldr	r0, [pc, #32]	@ (8004334 <siprintf+0x38>)
 8004312:	4909      	ldr	r1, [pc, #36]	@ (8004338 <siprintf+0x3c>)
 8004314:	f853 2b04 	ldr.w	r2, [r3], #4
 8004318:	9105      	str	r1, [sp, #20]
 800431a:	6800      	ldr	r0, [r0, #0]
 800431c:	a902      	add	r1, sp, #8
 800431e:	9301      	str	r3, [sp, #4]
 8004320:	f001 fc08 	bl	8005b34 <_svfiprintf_r>
 8004324:	2200      	movs	r2, #0
 8004326:	9b02      	ldr	r3, [sp, #8]
 8004328:	701a      	strb	r2, [r3, #0]
 800432a:	b01c      	add	sp, #112	@ 0x70
 800432c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004330:	b003      	add	sp, #12
 8004332:	4770      	bx	lr
 8004334:	20000018 	.word	0x20000018
 8004338:	ffff0208 	.word	0xffff0208

0800433c <__sread>:
 800433c:	b510      	push	{r4, lr}
 800433e:	460c      	mov	r4, r1
 8004340:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004344:	f000 f86c 	bl	8004420 <_read_r>
 8004348:	2800      	cmp	r0, #0
 800434a:	bfab      	itete	ge
 800434c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800434e:	89a3      	ldrhlt	r3, [r4, #12]
 8004350:	181b      	addge	r3, r3, r0
 8004352:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004356:	bfac      	ite	ge
 8004358:	6563      	strge	r3, [r4, #84]	@ 0x54
 800435a:	81a3      	strhlt	r3, [r4, #12]
 800435c:	bd10      	pop	{r4, pc}

0800435e <__swrite>:
 800435e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004362:	461f      	mov	r7, r3
 8004364:	898b      	ldrh	r3, [r1, #12]
 8004366:	4605      	mov	r5, r0
 8004368:	05db      	lsls	r3, r3, #23
 800436a:	460c      	mov	r4, r1
 800436c:	4616      	mov	r6, r2
 800436e:	d505      	bpl.n	800437c <__swrite+0x1e>
 8004370:	2302      	movs	r3, #2
 8004372:	2200      	movs	r2, #0
 8004374:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004378:	f000 f840 	bl	80043fc <_lseek_r>
 800437c:	89a3      	ldrh	r3, [r4, #12]
 800437e:	4632      	mov	r2, r6
 8004380:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004384:	81a3      	strh	r3, [r4, #12]
 8004386:	4628      	mov	r0, r5
 8004388:	463b      	mov	r3, r7
 800438a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800438e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004392:	f000 b857 	b.w	8004444 <_write_r>

08004396 <__sseek>:
 8004396:	b510      	push	{r4, lr}
 8004398:	460c      	mov	r4, r1
 800439a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800439e:	f000 f82d 	bl	80043fc <_lseek_r>
 80043a2:	1c43      	adds	r3, r0, #1
 80043a4:	89a3      	ldrh	r3, [r4, #12]
 80043a6:	bf15      	itete	ne
 80043a8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80043aa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80043ae:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80043b2:	81a3      	strheq	r3, [r4, #12]
 80043b4:	bf18      	it	ne
 80043b6:	81a3      	strhne	r3, [r4, #12]
 80043b8:	bd10      	pop	{r4, pc}

080043ba <__sclose>:
 80043ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80043be:	f000 b80d 	b.w	80043dc <_close_r>

080043c2 <memset>:
 80043c2:	4603      	mov	r3, r0
 80043c4:	4402      	add	r2, r0
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d100      	bne.n	80043cc <memset+0xa>
 80043ca:	4770      	bx	lr
 80043cc:	f803 1b01 	strb.w	r1, [r3], #1
 80043d0:	e7f9      	b.n	80043c6 <memset+0x4>
	...

080043d4 <_localeconv_r>:
 80043d4:	4800      	ldr	r0, [pc, #0]	@ (80043d8 <_localeconv_r+0x4>)
 80043d6:	4770      	bx	lr
 80043d8:	20000158 	.word	0x20000158

080043dc <_close_r>:
 80043dc:	b538      	push	{r3, r4, r5, lr}
 80043de:	2300      	movs	r3, #0
 80043e0:	4d05      	ldr	r5, [pc, #20]	@ (80043f8 <_close_r+0x1c>)
 80043e2:	4604      	mov	r4, r0
 80043e4:	4608      	mov	r0, r1
 80043e6:	602b      	str	r3, [r5, #0]
 80043e8:	f7fd f87d 	bl	80014e6 <_close>
 80043ec:	1c43      	adds	r3, r0, #1
 80043ee:	d102      	bne.n	80043f6 <_close_r+0x1a>
 80043f0:	682b      	ldr	r3, [r5, #0]
 80043f2:	b103      	cbz	r3, 80043f6 <_close_r+0x1a>
 80043f4:	6023      	str	r3, [r4, #0]
 80043f6:	bd38      	pop	{r3, r4, r5, pc}
 80043f8:	200003f4 	.word	0x200003f4

080043fc <_lseek_r>:
 80043fc:	b538      	push	{r3, r4, r5, lr}
 80043fe:	4604      	mov	r4, r0
 8004400:	4608      	mov	r0, r1
 8004402:	4611      	mov	r1, r2
 8004404:	2200      	movs	r2, #0
 8004406:	4d05      	ldr	r5, [pc, #20]	@ (800441c <_lseek_r+0x20>)
 8004408:	602a      	str	r2, [r5, #0]
 800440a:	461a      	mov	r2, r3
 800440c:	f7fd f88f 	bl	800152e <_lseek>
 8004410:	1c43      	adds	r3, r0, #1
 8004412:	d102      	bne.n	800441a <_lseek_r+0x1e>
 8004414:	682b      	ldr	r3, [r5, #0]
 8004416:	b103      	cbz	r3, 800441a <_lseek_r+0x1e>
 8004418:	6023      	str	r3, [r4, #0]
 800441a:	bd38      	pop	{r3, r4, r5, pc}
 800441c:	200003f4 	.word	0x200003f4

08004420 <_read_r>:
 8004420:	b538      	push	{r3, r4, r5, lr}
 8004422:	4604      	mov	r4, r0
 8004424:	4608      	mov	r0, r1
 8004426:	4611      	mov	r1, r2
 8004428:	2200      	movs	r2, #0
 800442a:	4d05      	ldr	r5, [pc, #20]	@ (8004440 <_read_r+0x20>)
 800442c:	602a      	str	r2, [r5, #0]
 800442e:	461a      	mov	r2, r3
 8004430:	f7fd f820 	bl	8001474 <_read>
 8004434:	1c43      	adds	r3, r0, #1
 8004436:	d102      	bne.n	800443e <_read_r+0x1e>
 8004438:	682b      	ldr	r3, [r5, #0]
 800443a:	b103      	cbz	r3, 800443e <_read_r+0x1e>
 800443c:	6023      	str	r3, [r4, #0]
 800443e:	bd38      	pop	{r3, r4, r5, pc}
 8004440:	200003f4 	.word	0x200003f4

08004444 <_write_r>:
 8004444:	b538      	push	{r3, r4, r5, lr}
 8004446:	4604      	mov	r4, r0
 8004448:	4608      	mov	r0, r1
 800444a:	4611      	mov	r1, r2
 800444c:	2200      	movs	r2, #0
 800444e:	4d05      	ldr	r5, [pc, #20]	@ (8004464 <_write_r+0x20>)
 8004450:	602a      	str	r2, [r5, #0]
 8004452:	461a      	mov	r2, r3
 8004454:	f7fd f82b 	bl	80014ae <_write>
 8004458:	1c43      	adds	r3, r0, #1
 800445a:	d102      	bne.n	8004462 <_write_r+0x1e>
 800445c:	682b      	ldr	r3, [r5, #0]
 800445e:	b103      	cbz	r3, 8004462 <_write_r+0x1e>
 8004460:	6023      	str	r3, [r4, #0]
 8004462:	bd38      	pop	{r3, r4, r5, pc}
 8004464:	200003f4 	.word	0x200003f4

08004468 <__errno>:
 8004468:	4b01      	ldr	r3, [pc, #4]	@ (8004470 <__errno+0x8>)
 800446a:	6818      	ldr	r0, [r3, #0]
 800446c:	4770      	bx	lr
 800446e:	bf00      	nop
 8004470:	20000018 	.word	0x20000018

08004474 <__libc_init_array>:
 8004474:	b570      	push	{r4, r5, r6, lr}
 8004476:	2600      	movs	r6, #0
 8004478:	4d0c      	ldr	r5, [pc, #48]	@ (80044ac <__libc_init_array+0x38>)
 800447a:	4c0d      	ldr	r4, [pc, #52]	@ (80044b0 <__libc_init_array+0x3c>)
 800447c:	1b64      	subs	r4, r4, r5
 800447e:	10a4      	asrs	r4, r4, #2
 8004480:	42a6      	cmp	r6, r4
 8004482:	d109      	bne.n	8004498 <__libc_init_array+0x24>
 8004484:	f002 f86e 	bl	8006564 <_init>
 8004488:	2600      	movs	r6, #0
 800448a:	4d0a      	ldr	r5, [pc, #40]	@ (80044b4 <__libc_init_array+0x40>)
 800448c:	4c0a      	ldr	r4, [pc, #40]	@ (80044b8 <__libc_init_array+0x44>)
 800448e:	1b64      	subs	r4, r4, r5
 8004490:	10a4      	asrs	r4, r4, #2
 8004492:	42a6      	cmp	r6, r4
 8004494:	d105      	bne.n	80044a2 <__libc_init_array+0x2e>
 8004496:	bd70      	pop	{r4, r5, r6, pc}
 8004498:	f855 3b04 	ldr.w	r3, [r5], #4
 800449c:	4798      	blx	r3
 800449e:	3601      	adds	r6, #1
 80044a0:	e7ee      	b.n	8004480 <__libc_init_array+0xc>
 80044a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80044a6:	4798      	blx	r3
 80044a8:	3601      	adds	r6, #1
 80044aa:	e7f2      	b.n	8004492 <__libc_init_array+0x1e>
 80044ac:	08006940 	.word	0x08006940
 80044b0:	08006940 	.word	0x08006940
 80044b4:	08006940 	.word	0x08006940
 80044b8:	08006944 	.word	0x08006944

080044bc <__retarget_lock_init_recursive>:
 80044bc:	4770      	bx	lr

080044be <__retarget_lock_acquire_recursive>:
 80044be:	4770      	bx	lr

080044c0 <__retarget_lock_release_recursive>:
 80044c0:	4770      	bx	lr

080044c2 <memchr>:
 80044c2:	4603      	mov	r3, r0
 80044c4:	b510      	push	{r4, lr}
 80044c6:	b2c9      	uxtb	r1, r1
 80044c8:	4402      	add	r2, r0
 80044ca:	4293      	cmp	r3, r2
 80044cc:	4618      	mov	r0, r3
 80044ce:	d101      	bne.n	80044d4 <memchr+0x12>
 80044d0:	2000      	movs	r0, #0
 80044d2:	e003      	b.n	80044dc <memchr+0x1a>
 80044d4:	7804      	ldrb	r4, [r0, #0]
 80044d6:	3301      	adds	r3, #1
 80044d8:	428c      	cmp	r4, r1
 80044da:	d1f6      	bne.n	80044ca <memchr+0x8>
 80044dc:	bd10      	pop	{r4, pc}

080044de <quorem>:
 80044de:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044e2:	6903      	ldr	r3, [r0, #16]
 80044e4:	690c      	ldr	r4, [r1, #16]
 80044e6:	4607      	mov	r7, r0
 80044e8:	42a3      	cmp	r3, r4
 80044ea:	db7e      	blt.n	80045ea <quorem+0x10c>
 80044ec:	3c01      	subs	r4, #1
 80044ee:	00a3      	lsls	r3, r4, #2
 80044f0:	f100 0514 	add.w	r5, r0, #20
 80044f4:	f101 0814 	add.w	r8, r1, #20
 80044f8:	9300      	str	r3, [sp, #0]
 80044fa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80044fe:	9301      	str	r3, [sp, #4]
 8004500:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004504:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004508:	3301      	adds	r3, #1
 800450a:	429a      	cmp	r2, r3
 800450c:	fbb2 f6f3 	udiv	r6, r2, r3
 8004510:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004514:	d32e      	bcc.n	8004574 <quorem+0x96>
 8004516:	f04f 0a00 	mov.w	sl, #0
 800451a:	46c4      	mov	ip, r8
 800451c:	46ae      	mov	lr, r5
 800451e:	46d3      	mov	fp, sl
 8004520:	f85c 3b04 	ldr.w	r3, [ip], #4
 8004524:	b298      	uxth	r0, r3
 8004526:	fb06 a000 	mla	r0, r6, r0, sl
 800452a:	0c1b      	lsrs	r3, r3, #16
 800452c:	0c02      	lsrs	r2, r0, #16
 800452e:	fb06 2303 	mla	r3, r6, r3, r2
 8004532:	f8de 2000 	ldr.w	r2, [lr]
 8004536:	b280      	uxth	r0, r0
 8004538:	b292      	uxth	r2, r2
 800453a:	1a12      	subs	r2, r2, r0
 800453c:	445a      	add	r2, fp
 800453e:	f8de 0000 	ldr.w	r0, [lr]
 8004542:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004546:	b29b      	uxth	r3, r3
 8004548:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800454c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8004550:	b292      	uxth	r2, r2
 8004552:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8004556:	45e1      	cmp	r9, ip
 8004558:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800455c:	f84e 2b04 	str.w	r2, [lr], #4
 8004560:	d2de      	bcs.n	8004520 <quorem+0x42>
 8004562:	9b00      	ldr	r3, [sp, #0]
 8004564:	58eb      	ldr	r3, [r5, r3]
 8004566:	b92b      	cbnz	r3, 8004574 <quorem+0x96>
 8004568:	9b01      	ldr	r3, [sp, #4]
 800456a:	3b04      	subs	r3, #4
 800456c:	429d      	cmp	r5, r3
 800456e:	461a      	mov	r2, r3
 8004570:	d32f      	bcc.n	80045d2 <quorem+0xf4>
 8004572:	613c      	str	r4, [r7, #16]
 8004574:	4638      	mov	r0, r7
 8004576:	f001 f979 	bl	800586c <__mcmp>
 800457a:	2800      	cmp	r0, #0
 800457c:	db25      	blt.n	80045ca <quorem+0xec>
 800457e:	4629      	mov	r1, r5
 8004580:	2000      	movs	r0, #0
 8004582:	f858 2b04 	ldr.w	r2, [r8], #4
 8004586:	f8d1 c000 	ldr.w	ip, [r1]
 800458a:	fa1f fe82 	uxth.w	lr, r2
 800458e:	fa1f f38c 	uxth.w	r3, ip
 8004592:	eba3 030e 	sub.w	r3, r3, lr
 8004596:	4403      	add	r3, r0
 8004598:	0c12      	lsrs	r2, r2, #16
 800459a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800459e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80045a2:	b29b      	uxth	r3, r3
 80045a4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80045a8:	45c1      	cmp	r9, r8
 80045aa:	ea4f 4022 	mov.w	r0, r2, asr #16
 80045ae:	f841 3b04 	str.w	r3, [r1], #4
 80045b2:	d2e6      	bcs.n	8004582 <quorem+0xa4>
 80045b4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80045b8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80045bc:	b922      	cbnz	r2, 80045c8 <quorem+0xea>
 80045be:	3b04      	subs	r3, #4
 80045c0:	429d      	cmp	r5, r3
 80045c2:	461a      	mov	r2, r3
 80045c4:	d30b      	bcc.n	80045de <quorem+0x100>
 80045c6:	613c      	str	r4, [r7, #16]
 80045c8:	3601      	adds	r6, #1
 80045ca:	4630      	mov	r0, r6
 80045cc:	b003      	add	sp, #12
 80045ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80045d2:	6812      	ldr	r2, [r2, #0]
 80045d4:	3b04      	subs	r3, #4
 80045d6:	2a00      	cmp	r2, #0
 80045d8:	d1cb      	bne.n	8004572 <quorem+0x94>
 80045da:	3c01      	subs	r4, #1
 80045dc:	e7c6      	b.n	800456c <quorem+0x8e>
 80045de:	6812      	ldr	r2, [r2, #0]
 80045e0:	3b04      	subs	r3, #4
 80045e2:	2a00      	cmp	r2, #0
 80045e4:	d1ef      	bne.n	80045c6 <quorem+0xe8>
 80045e6:	3c01      	subs	r4, #1
 80045e8:	e7ea      	b.n	80045c0 <quorem+0xe2>
 80045ea:	2000      	movs	r0, #0
 80045ec:	e7ee      	b.n	80045cc <quorem+0xee>
	...

080045f0 <_dtoa_r>:
 80045f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045f4:	4614      	mov	r4, r2
 80045f6:	461d      	mov	r5, r3
 80045f8:	69c7      	ldr	r7, [r0, #28]
 80045fa:	b097      	sub	sp, #92	@ 0x5c
 80045fc:	4683      	mov	fp, r0
 80045fe:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8004602:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8004604:	b97f      	cbnz	r7, 8004626 <_dtoa_r+0x36>
 8004606:	2010      	movs	r0, #16
 8004608:	f000 fe02 	bl	8005210 <malloc>
 800460c:	4602      	mov	r2, r0
 800460e:	f8cb 001c 	str.w	r0, [fp, #28]
 8004612:	b920      	cbnz	r0, 800461e <_dtoa_r+0x2e>
 8004614:	21ef      	movs	r1, #239	@ 0xef
 8004616:	4ba8      	ldr	r3, [pc, #672]	@ (80048b8 <_dtoa_r+0x2c8>)
 8004618:	48a8      	ldr	r0, [pc, #672]	@ (80048bc <_dtoa_r+0x2cc>)
 800461a:	f001 fc67 	bl	8005eec <__assert_func>
 800461e:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8004622:	6007      	str	r7, [r0, #0]
 8004624:	60c7      	str	r7, [r0, #12]
 8004626:	f8db 301c 	ldr.w	r3, [fp, #28]
 800462a:	6819      	ldr	r1, [r3, #0]
 800462c:	b159      	cbz	r1, 8004646 <_dtoa_r+0x56>
 800462e:	685a      	ldr	r2, [r3, #4]
 8004630:	2301      	movs	r3, #1
 8004632:	4093      	lsls	r3, r2
 8004634:	604a      	str	r2, [r1, #4]
 8004636:	608b      	str	r3, [r1, #8]
 8004638:	4658      	mov	r0, fp
 800463a:	f000 fedf 	bl	80053fc <_Bfree>
 800463e:	2200      	movs	r2, #0
 8004640:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004644:	601a      	str	r2, [r3, #0]
 8004646:	1e2b      	subs	r3, r5, #0
 8004648:	bfaf      	iteee	ge
 800464a:	2300      	movge	r3, #0
 800464c:	2201      	movlt	r2, #1
 800464e:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8004652:	9303      	strlt	r3, [sp, #12]
 8004654:	bfa8      	it	ge
 8004656:	6033      	strge	r3, [r6, #0]
 8004658:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800465c:	4b98      	ldr	r3, [pc, #608]	@ (80048c0 <_dtoa_r+0x2d0>)
 800465e:	bfb8      	it	lt
 8004660:	6032      	strlt	r2, [r6, #0]
 8004662:	ea33 0308 	bics.w	r3, r3, r8
 8004666:	d112      	bne.n	800468e <_dtoa_r+0x9e>
 8004668:	f242 730f 	movw	r3, #9999	@ 0x270f
 800466c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800466e:	6013      	str	r3, [r2, #0]
 8004670:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8004674:	4323      	orrs	r3, r4
 8004676:	f000 8550 	beq.w	800511a <_dtoa_r+0xb2a>
 800467a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800467c:	f8df a244 	ldr.w	sl, [pc, #580]	@ 80048c4 <_dtoa_r+0x2d4>
 8004680:	2b00      	cmp	r3, #0
 8004682:	f000 8552 	beq.w	800512a <_dtoa_r+0xb3a>
 8004686:	f10a 0303 	add.w	r3, sl, #3
 800468a:	f000 bd4c 	b.w	8005126 <_dtoa_r+0xb36>
 800468e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004692:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8004696:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800469a:	2200      	movs	r2, #0
 800469c:	2300      	movs	r3, #0
 800469e:	f7fc f983 	bl	80009a8 <__aeabi_dcmpeq>
 80046a2:	4607      	mov	r7, r0
 80046a4:	b158      	cbz	r0, 80046be <_dtoa_r+0xce>
 80046a6:	2301      	movs	r3, #1
 80046a8:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80046aa:	6013      	str	r3, [r2, #0]
 80046ac:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80046ae:	b113      	cbz	r3, 80046b6 <_dtoa_r+0xc6>
 80046b0:	4b85      	ldr	r3, [pc, #532]	@ (80048c8 <_dtoa_r+0x2d8>)
 80046b2:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80046b4:	6013      	str	r3, [r2, #0]
 80046b6:	f8df a214 	ldr.w	sl, [pc, #532]	@ 80048cc <_dtoa_r+0x2dc>
 80046ba:	f000 bd36 	b.w	800512a <_dtoa_r+0xb3a>
 80046be:	ab14      	add	r3, sp, #80	@ 0x50
 80046c0:	9301      	str	r3, [sp, #4]
 80046c2:	ab15      	add	r3, sp, #84	@ 0x54
 80046c4:	9300      	str	r3, [sp, #0]
 80046c6:	4658      	mov	r0, fp
 80046c8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80046cc:	f001 f97e 	bl	80059cc <__d2b>
 80046d0:	f3c8 560a 	ubfx	r6, r8, #20, #11
 80046d4:	4681      	mov	r9, r0
 80046d6:	2e00      	cmp	r6, #0
 80046d8:	d077      	beq.n	80047ca <_dtoa_r+0x1da>
 80046da:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80046de:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80046e0:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80046e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80046e8:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80046ec:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80046f0:	9712      	str	r7, [sp, #72]	@ 0x48
 80046f2:	4619      	mov	r1, r3
 80046f4:	2200      	movs	r2, #0
 80046f6:	4b76      	ldr	r3, [pc, #472]	@ (80048d0 <_dtoa_r+0x2e0>)
 80046f8:	f7fb fd36 	bl	8000168 <__aeabi_dsub>
 80046fc:	a368      	add	r3, pc, #416	@ (adr r3, 80048a0 <_dtoa_r+0x2b0>)
 80046fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004702:	f7fb fee9 	bl	80004d8 <__aeabi_dmul>
 8004706:	a368      	add	r3, pc, #416	@ (adr r3, 80048a8 <_dtoa_r+0x2b8>)
 8004708:	e9d3 2300 	ldrd	r2, r3, [r3]
 800470c:	f7fb fd2e 	bl	800016c <__adddf3>
 8004710:	4604      	mov	r4, r0
 8004712:	4630      	mov	r0, r6
 8004714:	460d      	mov	r5, r1
 8004716:	f7fb fe75 	bl	8000404 <__aeabi_i2d>
 800471a:	a365      	add	r3, pc, #404	@ (adr r3, 80048b0 <_dtoa_r+0x2c0>)
 800471c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004720:	f7fb feda 	bl	80004d8 <__aeabi_dmul>
 8004724:	4602      	mov	r2, r0
 8004726:	460b      	mov	r3, r1
 8004728:	4620      	mov	r0, r4
 800472a:	4629      	mov	r1, r5
 800472c:	f7fb fd1e 	bl	800016c <__adddf3>
 8004730:	4604      	mov	r4, r0
 8004732:	460d      	mov	r5, r1
 8004734:	f7fc f980 	bl	8000a38 <__aeabi_d2iz>
 8004738:	2200      	movs	r2, #0
 800473a:	4607      	mov	r7, r0
 800473c:	2300      	movs	r3, #0
 800473e:	4620      	mov	r0, r4
 8004740:	4629      	mov	r1, r5
 8004742:	f7fc f93b 	bl	80009bc <__aeabi_dcmplt>
 8004746:	b140      	cbz	r0, 800475a <_dtoa_r+0x16a>
 8004748:	4638      	mov	r0, r7
 800474a:	f7fb fe5b 	bl	8000404 <__aeabi_i2d>
 800474e:	4622      	mov	r2, r4
 8004750:	462b      	mov	r3, r5
 8004752:	f7fc f929 	bl	80009a8 <__aeabi_dcmpeq>
 8004756:	b900      	cbnz	r0, 800475a <_dtoa_r+0x16a>
 8004758:	3f01      	subs	r7, #1
 800475a:	2f16      	cmp	r7, #22
 800475c:	d853      	bhi.n	8004806 <_dtoa_r+0x216>
 800475e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004762:	4b5c      	ldr	r3, [pc, #368]	@ (80048d4 <_dtoa_r+0x2e4>)
 8004764:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800476c:	f7fc f926 	bl	80009bc <__aeabi_dcmplt>
 8004770:	2800      	cmp	r0, #0
 8004772:	d04a      	beq.n	800480a <_dtoa_r+0x21a>
 8004774:	2300      	movs	r3, #0
 8004776:	3f01      	subs	r7, #1
 8004778:	930f      	str	r3, [sp, #60]	@ 0x3c
 800477a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800477c:	1b9b      	subs	r3, r3, r6
 800477e:	1e5a      	subs	r2, r3, #1
 8004780:	bf46      	itte	mi
 8004782:	f1c3 0801 	rsbmi	r8, r3, #1
 8004786:	2300      	movmi	r3, #0
 8004788:	f04f 0800 	movpl.w	r8, #0
 800478c:	9209      	str	r2, [sp, #36]	@ 0x24
 800478e:	bf48      	it	mi
 8004790:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8004792:	2f00      	cmp	r7, #0
 8004794:	db3b      	blt.n	800480e <_dtoa_r+0x21e>
 8004796:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004798:	970e      	str	r7, [sp, #56]	@ 0x38
 800479a:	443b      	add	r3, r7
 800479c:	9309      	str	r3, [sp, #36]	@ 0x24
 800479e:	2300      	movs	r3, #0
 80047a0:	930a      	str	r3, [sp, #40]	@ 0x28
 80047a2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80047a4:	2b09      	cmp	r3, #9
 80047a6:	d866      	bhi.n	8004876 <_dtoa_r+0x286>
 80047a8:	2b05      	cmp	r3, #5
 80047aa:	bfc4      	itt	gt
 80047ac:	3b04      	subgt	r3, #4
 80047ae:	9320      	strgt	r3, [sp, #128]	@ 0x80
 80047b0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80047b2:	bfc8      	it	gt
 80047b4:	2400      	movgt	r4, #0
 80047b6:	f1a3 0302 	sub.w	r3, r3, #2
 80047ba:	bfd8      	it	le
 80047bc:	2401      	movle	r4, #1
 80047be:	2b03      	cmp	r3, #3
 80047c0:	d864      	bhi.n	800488c <_dtoa_r+0x29c>
 80047c2:	e8df f003 	tbb	[pc, r3]
 80047c6:	382b      	.short	0x382b
 80047c8:	5636      	.short	0x5636
 80047ca:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80047ce:	441e      	add	r6, r3
 80047d0:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80047d4:	2b20      	cmp	r3, #32
 80047d6:	bfc1      	itttt	gt
 80047d8:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80047dc:	fa08 f803 	lslgt.w	r8, r8, r3
 80047e0:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80047e4:	fa24 f303 	lsrgt.w	r3, r4, r3
 80047e8:	bfd6      	itet	le
 80047ea:	f1c3 0320 	rsble	r3, r3, #32
 80047ee:	ea48 0003 	orrgt.w	r0, r8, r3
 80047f2:	fa04 f003 	lslle.w	r0, r4, r3
 80047f6:	f7fb fdf5 	bl	80003e4 <__aeabi_ui2d>
 80047fa:	2201      	movs	r2, #1
 80047fc:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8004800:	3e01      	subs	r6, #1
 8004802:	9212      	str	r2, [sp, #72]	@ 0x48
 8004804:	e775      	b.n	80046f2 <_dtoa_r+0x102>
 8004806:	2301      	movs	r3, #1
 8004808:	e7b6      	b.n	8004778 <_dtoa_r+0x188>
 800480a:	900f      	str	r0, [sp, #60]	@ 0x3c
 800480c:	e7b5      	b.n	800477a <_dtoa_r+0x18a>
 800480e:	427b      	negs	r3, r7
 8004810:	930a      	str	r3, [sp, #40]	@ 0x28
 8004812:	2300      	movs	r3, #0
 8004814:	eba8 0807 	sub.w	r8, r8, r7
 8004818:	930e      	str	r3, [sp, #56]	@ 0x38
 800481a:	e7c2      	b.n	80047a2 <_dtoa_r+0x1b2>
 800481c:	2300      	movs	r3, #0
 800481e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004820:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004822:	2b00      	cmp	r3, #0
 8004824:	dc35      	bgt.n	8004892 <_dtoa_r+0x2a2>
 8004826:	2301      	movs	r3, #1
 8004828:	461a      	mov	r2, r3
 800482a:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800482e:	9221      	str	r2, [sp, #132]	@ 0x84
 8004830:	e00b      	b.n	800484a <_dtoa_r+0x25a>
 8004832:	2301      	movs	r3, #1
 8004834:	e7f3      	b.n	800481e <_dtoa_r+0x22e>
 8004836:	2300      	movs	r3, #0
 8004838:	930b      	str	r3, [sp, #44]	@ 0x2c
 800483a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800483c:	18fb      	adds	r3, r7, r3
 800483e:	9308      	str	r3, [sp, #32]
 8004840:	3301      	adds	r3, #1
 8004842:	2b01      	cmp	r3, #1
 8004844:	9307      	str	r3, [sp, #28]
 8004846:	bfb8      	it	lt
 8004848:	2301      	movlt	r3, #1
 800484a:	2100      	movs	r1, #0
 800484c:	2204      	movs	r2, #4
 800484e:	f8db 001c 	ldr.w	r0, [fp, #28]
 8004852:	f102 0514 	add.w	r5, r2, #20
 8004856:	429d      	cmp	r5, r3
 8004858:	d91f      	bls.n	800489a <_dtoa_r+0x2aa>
 800485a:	6041      	str	r1, [r0, #4]
 800485c:	4658      	mov	r0, fp
 800485e:	f000 fd8d 	bl	800537c <_Balloc>
 8004862:	4682      	mov	sl, r0
 8004864:	2800      	cmp	r0, #0
 8004866:	d139      	bne.n	80048dc <_dtoa_r+0x2ec>
 8004868:	4602      	mov	r2, r0
 800486a:	f240 11af 	movw	r1, #431	@ 0x1af
 800486e:	4b1a      	ldr	r3, [pc, #104]	@ (80048d8 <_dtoa_r+0x2e8>)
 8004870:	e6d2      	b.n	8004618 <_dtoa_r+0x28>
 8004872:	2301      	movs	r3, #1
 8004874:	e7e0      	b.n	8004838 <_dtoa_r+0x248>
 8004876:	2401      	movs	r4, #1
 8004878:	2300      	movs	r3, #0
 800487a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800487c:	9320      	str	r3, [sp, #128]	@ 0x80
 800487e:	f04f 33ff 	mov.w	r3, #4294967295
 8004882:	2200      	movs	r2, #0
 8004884:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8004888:	2312      	movs	r3, #18
 800488a:	e7d0      	b.n	800482e <_dtoa_r+0x23e>
 800488c:	2301      	movs	r3, #1
 800488e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004890:	e7f5      	b.n	800487e <_dtoa_r+0x28e>
 8004892:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004894:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8004898:	e7d7      	b.n	800484a <_dtoa_r+0x25a>
 800489a:	3101      	adds	r1, #1
 800489c:	0052      	lsls	r2, r2, #1
 800489e:	e7d8      	b.n	8004852 <_dtoa_r+0x262>
 80048a0:	636f4361 	.word	0x636f4361
 80048a4:	3fd287a7 	.word	0x3fd287a7
 80048a8:	8b60c8b3 	.word	0x8b60c8b3
 80048ac:	3fc68a28 	.word	0x3fc68a28
 80048b0:	509f79fb 	.word	0x509f79fb
 80048b4:	3fd34413 	.word	0x3fd34413
 80048b8:	08006607 	.word	0x08006607
 80048bc:	0800661e 	.word	0x0800661e
 80048c0:	7ff00000 	.word	0x7ff00000
 80048c4:	08006603 	.word	0x08006603
 80048c8:	080065d7 	.word	0x080065d7
 80048cc:	080065d6 	.word	0x080065d6
 80048d0:	3ff80000 	.word	0x3ff80000
 80048d4:	08006718 	.word	0x08006718
 80048d8:	08006676 	.word	0x08006676
 80048dc:	f8db 301c 	ldr.w	r3, [fp, #28]
 80048e0:	6018      	str	r0, [r3, #0]
 80048e2:	9b07      	ldr	r3, [sp, #28]
 80048e4:	2b0e      	cmp	r3, #14
 80048e6:	f200 80a4 	bhi.w	8004a32 <_dtoa_r+0x442>
 80048ea:	2c00      	cmp	r4, #0
 80048ec:	f000 80a1 	beq.w	8004a32 <_dtoa_r+0x442>
 80048f0:	2f00      	cmp	r7, #0
 80048f2:	dd33      	ble.n	800495c <_dtoa_r+0x36c>
 80048f4:	4b86      	ldr	r3, [pc, #536]	@ (8004b10 <_dtoa_r+0x520>)
 80048f6:	f007 020f 	and.w	r2, r7, #15
 80048fa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80048fe:	05f8      	lsls	r0, r7, #23
 8004900:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004904:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8004908:	ea4f 1427 	mov.w	r4, r7, asr #4
 800490c:	d516      	bpl.n	800493c <_dtoa_r+0x34c>
 800490e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004912:	4b80      	ldr	r3, [pc, #512]	@ (8004b14 <_dtoa_r+0x524>)
 8004914:	2603      	movs	r6, #3
 8004916:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800491a:	f7fb ff07 	bl	800072c <__aeabi_ddiv>
 800491e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004922:	f004 040f 	and.w	r4, r4, #15
 8004926:	4d7b      	ldr	r5, [pc, #492]	@ (8004b14 <_dtoa_r+0x524>)
 8004928:	b954      	cbnz	r4, 8004940 <_dtoa_r+0x350>
 800492a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800492e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004932:	f7fb fefb 	bl	800072c <__aeabi_ddiv>
 8004936:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800493a:	e028      	b.n	800498e <_dtoa_r+0x39e>
 800493c:	2602      	movs	r6, #2
 800493e:	e7f2      	b.n	8004926 <_dtoa_r+0x336>
 8004940:	07e1      	lsls	r1, r4, #31
 8004942:	d508      	bpl.n	8004956 <_dtoa_r+0x366>
 8004944:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004948:	e9d5 2300 	ldrd	r2, r3, [r5]
 800494c:	f7fb fdc4 	bl	80004d8 <__aeabi_dmul>
 8004950:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004954:	3601      	adds	r6, #1
 8004956:	1064      	asrs	r4, r4, #1
 8004958:	3508      	adds	r5, #8
 800495a:	e7e5      	b.n	8004928 <_dtoa_r+0x338>
 800495c:	f000 80d2 	beq.w	8004b04 <_dtoa_r+0x514>
 8004960:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004964:	427c      	negs	r4, r7
 8004966:	4b6a      	ldr	r3, [pc, #424]	@ (8004b10 <_dtoa_r+0x520>)
 8004968:	f004 020f 	and.w	r2, r4, #15
 800496c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004970:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004974:	f7fb fdb0 	bl	80004d8 <__aeabi_dmul>
 8004978:	2602      	movs	r6, #2
 800497a:	2300      	movs	r3, #0
 800497c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004980:	4d64      	ldr	r5, [pc, #400]	@ (8004b14 <_dtoa_r+0x524>)
 8004982:	1124      	asrs	r4, r4, #4
 8004984:	2c00      	cmp	r4, #0
 8004986:	f040 80b2 	bne.w	8004aee <_dtoa_r+0x4fe>
 800498a:	2b00      	cmp	r3, #0
 800498c:	d1d3      	bne.n	8004936 <_dtoa_r+0x346>
 800498e:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8004992:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004994:	2b00      	cmp	r3, #0
 8004996:	f000 80b7 	beq.w	8004b08 <_dtoa_r+0x518>
 800499a:	2200      	movs	r2, #0
 800499c:	4620      	mov	r0, r4
 800499e:	4629      	mov	r1, r5
 80049a0:	4b5d      	ldr	r3, [pc, #372]	@ (8004b18 <_dtoa_r+0x528>)
 80049a2:	f7fc f80b 	bl	80009bc <__aeabi_dcmplt>
 80049a6:	2800      	cmp	r0, #0
 80049a8:	f000 80ae 	beq.w	8004b08 <_dtoa_r+0x518>
 80049ac:	9b07      	ldr	r3, [sp, #28]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	f000 80aa 	beq.w	8004b08 <_dtoa_r+0x518>
 80049b4:	9b08      	ldr	r3, [sp, #32]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	dd37      	ble.n	8004a2a <_dtoa_r+0x43a>
 80049ba:	1e7b      	subs	r3, r7, #1
 80049bc:	4620      	mov	r0, r4
 80049be:	9304      	str	r3, [sp, #16]
 80049c0:	2200      	movs	r2, #0
 80049c2:	4629      	mov	r1, r5
 80049c4:	4b55      	ldr	r3, [pc, #340]	@ (8004b1c <_dtoa_r+0x52c>)
 80049c6:	f7fb fd87 	bl	80004d8 <__aeabi_dmul>
 80049ca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80049ce:	9c08      	ldr	r4, [sp, #32]
 80049d0:	3601      	adds	r6, #1
 80049d2:	4630      	mov	r0, r6
 80049d4:	f7fb fd16 	bl	8000404 <__aeabi_i2d>
 80049d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80049dc:	f7fb fd7c 	bl	80004d8 <__aeabi_dmul>
 80049e0:	2200      	movs	r2, #0
 80049e2:	4b4f      	ldr	r3, [pc, #316]	@ (8004b20 <_dtoa_r+0x530>)
 80049e4:	f7fb fbc2 	bl	800016c <__adddf3>
 80049e8:	4605      	mov	r5, r0
 80049ea:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80049ee:	2c00      	cmp	r4, #0
 80049f0:	f040 809a 	bne.w	8004b28 <_dtoa_r+0x538>
 80049f4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80049f8:	2200      	movs	r2, #0
 80049fa:	4b4a      	ldr	r3, [pc, #296]	@ (8004b24 <_dtoa_r+0x534>)
 80049fc:	f7fb fbb4 	bl	8000168 <__aeabi_dsub>
 8004a00:	4602      	mov	r2, r0
 8004a02:	460b      	mov	r3, r1
 8004a04:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004a08:	462a      	mov	r2, r5
 8004a0a:	4633      	mov	r3, r6
 8004a0c:	f7fb fff4 	bl	80009f8 <__aeabi_dcmpgt>
 8004a10:	2800      	cmp	r0, #0
 8004a12:	f040 828e 	bne.w	8004f32 <_dtoa_r+0x942>
 8004a16:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004a1a:	462a      	mov	r2, r5
 8004a1c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8004a20:	f7fb ffcc 	bl	80009bc <__aeabi_dcmplt>
 8004a24:	2800      	cmp	r0, #0
 8004a26:	f040 8127 	bne.w	8004c78 <_dtoa_r+0x688>
 8004a2a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8004a2e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8004a32:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	f2c0 8163 	blt.w	8004d00 <_dtoa_r+0x710>
 8004a3a:	2f0e      	cmp	r7, #14
 8004a3c:	f300 8160 	bgt.w	8004d00 <_dtoa_r+0x710>
 8004a40:	4b33      	ldr	r3, [pc, #204]	@ (8004b10 <_dtoa_r+0x520>)
 8004a42:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004a46:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004a4a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8004a4e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	da03      	bge.n	8004a5c <_dtoa_r+0x46c>
 8004a54:	9b07      	ldr	r3, [sp, #28]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	f340 8100 	ble.w	8004c5c <_dtoa_r+0x66c>
 8004a5c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8004a60:	4656      	mov	r6, sl
 8004a62:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004a66:	4620      	mov	r0, r4
 8004a68:	4629      	mov	r1, r5
 8004a6a:	f7fb fe5f 	bl	800072c <__aeabi_ddiv>
 8004a6e:	f7fb ffe3 	bl	8000a38 <__aeabi_d2iz>
 8004a72:	4680      	mov	r8, r0
 8004a74:	f7fb fcc6 	bl	8000404 <__aeabi_i2d>
 8004a78:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004a7c:	f7fb fd2c 	bl	80004d8 <__aeabi_dmul>
 8004a80:	4602      	mov	r2, r0
 8004a82:	460b      	mov	r3, r1
 8004a84:	4620      	mov	r0, r4
 8004a86:	4629      	mov	r1, r5
 8004a88:	f7fb fb6e 	bl	8000168 <__aeabi_dsub>
 8004a8c:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8004a90:	9d07      	ldr	r5, [sp, #28]
 8004a92:	f806 4b01 	strb.w	r4, [r6], #1
 8004a96:	eba6 040a 	sub.w	r4, r6, sl
 8004a9a:	42a5      	cmp	r5, r4
 8004a9c:	4602      	mov	r2, r0
 8004a9e:	460b      	mov	r3, r1
 8004aa0:	f040 8116 	bne.w	8004cd0 <_dtoa_r+0x6e0>
 8004aa4:	f7fb fb62 	bl	800016c <__adddf3>
 8004aa8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004aac:	4604      	mov	r4, r0
 8004aae:	460d      	mov	r5, r1
 8004ab0:	f7fb ffa2 	bl	80009f8 <__aeabi_dcmpgt>
 8004ab4:	2800      	cmp	r0, #0
 8004ab6:	f040 80f8 	bne.w	8004caa <_dtoa_r+0x6ba>
 8004aba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004abe:	4620      	mov	r0, r4
 8004ac0:	4629      	mov	r1, r5
 8004ac2:	f7fb ff71 	bl	80009a8 <__aeabi_dcmpeq>
 8004ac6:	b118      	cbz	r0, 8004ad0 <_dtoa_r+0x4e0>
 8004ac8:	f018 0f01 	tst.w	r8, #1
 8004acc:	f040 80ed 	bne.w	8004caa <_dtoa_r+0x6ba>
 8004ad0:	4649      	mov	r1, r9
 8004ad2:	4658      	mov	r0, fp
 8004ad4:	f000 fc92 	bl	80053fc <_Bfree>
 8004ad8:	2300      	movs	r3, #0
 8004ada:	7033      	strb	r3, [r6, #0]
 8004adc:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8004ade:	3701      	adds	r7, #1
 8004ae0:	601f      	str	r7, [r3, #0]
 8004ae2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	f000 8320 	beq.w	800512a <_dtoa_r+0xb3a>
 8004aea:	601e      	str	r6, [r3, #0]
 8004aec:	e31d      	b.n	800512a <_dtoa_r+0xb3a>
 8004aee:	07e2      	lsls	r2, r4, #31
 8004af0:	d505      	bpl.n	8004afe <_dtoa_r+0x50e>
 8004af2:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004af6:	f7fb fcef 	bl	80004d8 <__aeabi_dmul>
 8004afa:	2301      	movs	r3, #1
 8004afc:	3601      	adds	r6, #1
 8004afe:	1064      	asrs	r4, r4, #1
 8004b00:	3508      	adds	r5, #8
 8004b02:	e73f      	b.n	8004984 <_dtoa_r+0x394>
 8004b04:	2602      	movs	r6, #2
 8004b06:	e742      	b.n	800498e <_dtoa_r+0x39e>
 8004b08:	9c07      	ldr	r4, [sp, #28]
 8004b0a:	9704      	str	r7, [sp, #16]
 8004b0c:	e761      	b.n	80049d2 <_dtoa_r+0x3e2>
 8004b0e:	bf00      	nop
 8004b10:	08006718 	.word	0x08006718
 8004b14:	080066f0 	.word	0x080066f0
 8004b18:	3ff00000 	.word	0x3ff00000
 8004b1c:	40240000 	.word	0x40240000
 8004b20:	401c0000 	.word	0x401c0000
 8004b24:	40140000 	.word	0x40140000
 8004b28:	4b70      	ldr	r3, [pc, #448]	@ (8004cec <_dtoa_r+0x6fc>)
 8004b2a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8004b2c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004b30:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004b34:	4454      	add	r4, sl
 8004b36:	2900      	cmp	r1, #0
 8004b38:	d045      	beq.n	8004bc6 <_dtoa_r+0x5d6>
 8004b3a:	2000      	movs	r0, #0
 8004b3c:	496c      	ldr	r1, [pc, #432]	@ (8004cf0 <_dtoa_r+0x700>)
 8004b3e:	f7fb fdf5 	bl	800072c <__aeabi_ddiv>
 8004b42:	4633      	mov	r3, r6
 8004b44:	462a      	mov	r2, r5
 8004b46:	f7fb fb0f 	bl	8000168 <__aeabi_dsub>
 8004b4a:	4656      	mov	r6, sl
 8004b4c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004b50:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004b54:	f7fb ff70 	bl	8000a38 <__aeabi_d2iz>
 8004b58:	4605      	mov	r5, r0
 8004b5a:	f7fb fc53 	bl	8000404 <__aeabi_i2d>
 8004b5e:	4602      	mov	r2, r0
 8004b60:	460b      	mov	r3, r1
 8004b62:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004b66:	f7fb faff 	bl	8000168 <__aeabi_dsub>
 8004b6a:	4602      	mov	r2, r0
 8004b6c:	460b      	mov	r3, r1
 8004b6e:	3530      	adds	r5, #48	@ 0x30
 8004b70:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004b74:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004b78:	f806 5b01 	strb.w	r5, [r6], #1
 8004b7c:	f7fb ff1e 	bl	80009bc <__aeabi_dcmplt>
 8004b80:	2800      	cmp	r0, #0
 8004b82:	d163      	bne.n	8004c4c <_dtoa_r+0x65c>
 8004b84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004b88:	2000      	movs	r0, #0
 8004b8a:	495a      	ldr	r1, [pc, #360]	@ (8004cf4 <_dtoa_r+0x704>)
 8004b8c:	f7fb faec 	bl	8000168 <__aeabi_dsub>
 8004b90:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004b94:	f7fb ff12 	bl	80009bc <__aeabi_dcmplt>
 8004b98:	2800      	cmp	r0, #0
 8004b9a:	f040 8087 	bne.w	8004cac <_dtoa_r+0x6bc>
 8004b9e:	42a6      	cmp	r6, r4
 8004ba0:	f43f af43 	beq.w	8004a2a <_dtoa_r+0x43a>
 8004ba4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8004ba8:	2200      	movs	r2, #0
 8004baa:	4b53      	ldr	r3, [pc, #332]	@ (8004cf8 <_dtoa_r+0x708>)
 8004bac:	f7fb fc94 	bl	80004d8 <__aeabi_dmul>
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004bb6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004bba:	4b4f      	ldr	r3, [pc, #316]	@ (8004cf8 <_dtoa_r+0x708>)
 8004bbc:	f7fb fc8c 	bl	80004d8 <__aeabi_dmul>
 8004bc0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004bc4:	e7c4      	b.n	8004b50 <_dtoa_r+0x560>
 8004bc6:	4631      	mov	r1, r6
 8004bc8:	4628      	mov	r0, r5
 8004bca:	f7fb fc85 	bl	80004d8 <__aeabi_dmul>
 8004bce:	4656      	mov	r6, sl
 8004bd0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004bd4:	9413      	str	r4, [sp, #76]	@ 0x4c
 8004bd6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004bda:	f7fb ff2d 	bl	8000a38 <__aeabi_d2iz>
 8004bde:	4605      	mov	r5, r0
 8004be0:	f7fb fc10 	bl	8000404 <__aeabi_i2d>
 8004be4:	4602      	mov	r2, r0
 8004be6:	460b      	mov	r3, r1
 8004be8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004bec:	f7fb fabc 	bl	8000168 <__aeabi_dsub>
 8004bf0:	4602      	mov	r2, r0
 8004bf2:	460b      	mov	r3, r1
 8004bf4:	3530      	adds	r5, #48	@ 0x30
 8004bf6:	f806 5b01 	strb.w	r5, [r6], #1
 8004bfa:	42a6      	cmp	r6, r4
 8004bfc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004c00:	f04f 0200 	mov.w	r2, #0
 8004c04:	d124      	bne.n	8004c50 <_dtoa_r+0x660>
 8004c06:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8004c0a:	4b39      	ldr	r3, [pc, #228]	@ (8004cf0 <_dtoa_r+0x700>)
 8004c0c:	f7fb faae 	bl	800016c <__adddf3>
 8004c10:	4602      	mov	r2, r0
 8004c12:	460b      	mov	r3, r1
 8004c14:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004c18:	f7fb feee 	bl	80009f8 <__aeabi_dcmpgt>
 8004c1c:	2800      	cmp	r0, #0
 8004c1e:	d145      	bne.n	8004cac <_dtoa_r+0x6bc>
 8004c20:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004c24:	2000      	movs	r0, #0
 8004c26:	4932      	ldr	r1, [pc, #200]	@ (8004cf0 <_dtoa_r+0x700>)
 8004c28:	f7fb fa9e 	bl	8000168 <__aeabi_dsub>
 8004c2c:	4602      	mov	r2, r0
 8004c2e:	460b      	mov	r3, r1
 8004c30:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004c34:	f7fb fec2 	bl	80009bc <__aeabi_dcmplt>
 8004c38:	2800      	cmp	r0, #0
 8004c3a:	f43f aef6 	beq.w	8004a2a <_dtoa_r+0x43a>
 8004c3e:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8004c40:	1e73      	subs	r3, r6, #1
 8004c42:	9313      	str	r3, [sp, #76]	@ 0x4c
 8004c44:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8004c48:	2b30      	cmp	r3, #48	@ 0x30
 8004c4a:	d0f8      	beq.n	8004c3e <_dtoa_r+0x64e>
 8004c4c:	9f04      	ldr	r7, [sp, #16]
 8004c4e:	e73f      	b.n	8004ad0 <_dtoa_r+0x4e0>
 8004c50:	4b29      	ldr	r3, [pc, #164]	@ (8004cf8 <_dtoa_r+0x708>)
 8004c52:	f7fb fc41 	bl	80004d8 <__aeabi_dmul>
 8004c56:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004c5a:	e7bc      	b.n	8004bd6 <_dtoa_r+0x5e6>
 8004c5c:	d10c      	bne.n	8004c78 <_dtoa_r+0x688>
 8004c5e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004c62:	2200      	movs	r2, #0
 8004c64:	4b25      	ldr	r3, [pc, #148]	@ (8004cfc <_dtoa_r+0x70c>)
 8004c66:	f7fb fc37 	bl	80004d8 <__aeabi_dmul>
 8004c6a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004c6e:	f7fb feb9 	bl	80009e4 <__aeabi_dcmpge>
 8004c72:	2800      	cmp	r0, #0
 8004c74:	f000 815b 	beq.w	8004f2e <_dtoa_r+0x93e>
 8004c78:	2400      	movs	r4, #0
 8004c7a:	4625      	mov	r5, r4
 8004c7c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004c7e:	4656      	mov	r6, sl
 8004c80:	43db      	mvns	r3, r3
 8004c82:	9304      	str	r3, [sp, #16]
 8004c84:	2700      	movs	r7, #0
 8004c86:	4621      	mov	r1, r4
 8004c88:	4658      	mov	r0, fp
 8004c8a:	f000 fbb7 	bl	80053fc <_Bfree>
 8004c8e:	2d00      	cmp	r5, #0
 8004c90:	d0dc      	beq.n	8004c4c <_dtoa_r+0x65c>
 8004c92:	b12f      	cbz	r7, 8004ca0 <_dtoa_r+0x6b0>
 8004c94:	42af      	cmp	r7, r5
 8004c96:	d003      	beq.n	8004ca0 <_dtoa_r+0x6b0>
 8004c98:	4639      	mov	r1, r7
 8004c9a:	4658      	mov	r0, fp
 8004c9c:	f000 fbae 	bl	80053fc <_Bfree>
 8004ca0:	4629      	mov	r1, r5
 8004ca2:	4658      	mov	r0, fp
 8004ca4:	f000 fbaa 	bl	80053fc <_Bfree>
 8004ca8:	e7d0      	b.n	8004c4c <_dtoa_r+0x65c>
 8004caa:	9704      	str	r7, [sp, #16]
 8004cac:	4633      	mov	r3, r6
 8004cae:	461e      	mov	r6, r3
 8004cb0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004cb4:	2a39      	cmp	r2, #57	@ 0x39
 8004cb6:	d107      	bne.n	8004cc8 <_dtoa_r+0x6d8>
 8004cb8:	459a      	cmp	sl, r3
 8004cba:	d1f8      	bne.n	8004cae <_dtoa_r+0x6be>
 8004cbc:	9a04      	ldr	r2, [sp, #16]
 8004cbe:	3201      	adds	r2, #1
 8004cc0:	9204      	str	r2, [sp, #16]
 8004cc2:	2230      	movs	r2, #48	@ 0x30
 8004cc4:	f88a 2000 	strb.w	r2, [sl]
 8004cc8:	781a      	ldrb	r2, [r3, #0]
 8004cca:	3201      	adds	r2, #1
 8004ccc:	701a      	strb	r2, [r3, #0]
 8004cce:	e7bd      	b.n	8004c4c <_dtoa_r+0x65c>
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	4b09      	ldr	r3, [pc, #36]	@ (8004cf8 <_dtoa_r+0x708>)
 8004cd4:	f7fb fc00 	bl	80004d8 <__aeabi_dmul>
 8004cd8:	2200      	movs	r2, #0
 8004cda:	2300      	movs	r3, #0
 8004cdc:	4604      	mov	r4, r0
 8004cde:	460d      	mov	r5, r1
 8004ce0:	f7fb fe62 	bl	80009a8 <__aeabi_dcmpeq>
 8004ce4:	2800      	cmp	r0, #0
 8004ce6:	f43f aebc 	beq.w	8004a62 <_dtoa_r+0x472>
 8004cea:	e6f1      	b.n	8004ad0 <_dtoa_r+0x4e0>
 8004cec:	08006718 	.word	0x08006718
 8004cf0:	3fe00000 	.word	0x3fe00000
 8004cf4:	3ff00000 	.word	0x3ff00000
 8004cf8:	40240000 	.word	0x40240000
 8004cfc:	40140000 	.word	0x40140000
 8004d00:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8004d02:	2a00      	cmp	r2, #0
 8004d04:	f000 80db 	beq.w	8004ebe <_dtoa_r+0x8ce>
 8004d08:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8004d0a:	2a01      	cmp	r2, #1
 8004d0c:	f300 80bf 	bgt.w	8004e8e <_dtoa_r+0x89e>
 8004d10:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8004d12:	2a00      	cmp	r2, #0
 8004d14:	f000 80b7 	beq.w	8004e86 <_dtoa_r+0x896>
 8004d18:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8004d1c:	4646      	mov	r6, r8
 8004d1e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8004d20:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004d22:	2101      	movs	r1, #1
 8004d24:	441a      	add	r2, r3
 8004d26:	4658      	mov	r0, fp
 8004d28:	4498      	add	r8, r3
 8004d2a:	9209      	str	r2, [sp, #36]	@ 0x24
 8004d2c:	f000 fc1a 	bl	8005564 <__i2b>
 8004d30:	4605      	mov	r5, r0
 8004d32:	b15e      	cbz	r6, 8004d4c <_dtoa_r+0x75c>
 8004d34:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	dd08      	ble.n	8004d4c <_dtoa_r+0x75c>
 8004d3a:	42b3      	cmp	r3, r6
 8004d3c:	bfa8      	it	ge
 8004d3e:	4633      	movge	r3, r6
 8004d40:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004d42:	eba8 0803 	sub.w	r8, r8, r3
 8004d46:	1af6      	subs	r6, r6, r3
 8004d48:	1ad3      	subs	r3, r2, r3
 8004d4a:	9309      	str	r3, [sp, #36]	@ 0x24
 8004d4c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004d4e:	b1f3      	cbz	r3, 8004d8e <_dtoa_r+0x79e>
 8004d50:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	f000 80b7 	beq.w	8004ec6 <_dtoa_r+0x8d6>
 8004d58:	b18c      	cbz	r4, 8004d7e <_dtoa_r+0x78e>
 8004d5a:	4629      	mov	r1, r5
 8004d5c:	4622      	mov	r2, r4
 8004d5e:	4658      	mov	r0, fp
 8004d60:	f000 fcbe 	bl	80056e0 <__pow5mult>
 8004d64:	464a      	mov	r2, r9
 8004d66:	4601      	mov	r1, r0
 8004d68:	4605      	mov	r5, r0
 8004d6a:	4658      	mov	r0, fp
 8004d6c:	f000 fc10 	bl	8005590 <__multiply>
 8004d70:	4649      	mov	r1, r9
 8004d72:	9004      	str	r0, [sp, #16]
 8004d74:	4658      	mov	r0, fp
 8004d76:	f000 fb41 	bl	80053fc <_Bfree>
 8004d7a:	9b04      	ldr	r3, [sp, #16]
 8004d7c:	4699      	mov	r9, r3
 8004d7e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004d80:	1b1a      	subs	r2, r3, r4
 8004d82:	d004      	beq.n	8004d8e <_dtoa_r+0x79e>
 8004d84:	4649      	mov	r1, r9
 8004d86:	4658      	mov	r0, fp
 8004d88:	f000 fcaa 	bl	80056e0 <__pow5mult>
 8004d8c:	4681      	mov	r9, r0
 8004d8e:	2101      	movs	r1, #1
 8004d90:	4658      	mov	r0, fp
 8004d92:	f000 fbe7 	bl	8005564 <__i2b>
 8004d96:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004d98:	4604      	mov	r4, r0
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	f000 81c9 	beq.w	8005132 <_dtoa_r+0xb42>
 8004da0:	461a      	mov	r2, r3
 8004da2:	4601      	mov	r1, r0
 8004da4:	4658      	mov	r0, fp
 8004da6:	f000 fc9b 	bl	80056e0 <__pow5mult>
 8004daa:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004dac:	4604      	mov	r4, r0
 8004dae:	2b01      	cmp	r3, #1
 8004db0:	f300 808f 	bgt.w	8004ed2 <_dtoa_r+0x8e2>
 8004db4:	9b02      	ldr	r3, [sp, #8]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	f040 8087 	bne.w	8004eca <_dtoa_r+0x8da>
 8004dbc:	9b03      	ldr	r3, [sp, #12]
 8004dbe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	f040 8083 	bne.w	8004ece <_dtoa_r+0x8de>
 8004dc8:	9b03      	ldr	r3, [sp, #12]
 8004dca:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004dce:	0d1b      	lsrs	r3, r3, #20
 8004dd0:	051b      	lsls	r3, r3, #20
 8004dd2:	b12b      	cbz	r3, 8004de0 <_dtoa_r+0x7f0>
 8004dd4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004dd6:	f108 0801 	add.w	r8, r8, #1
 8004dda:	3301      	adds	r3, #1
 8004ddc:	9309      	str	r3, [sp, #36]	@ 0x24
 8004dde:	2301      	movs	r3, #1
 8004de0:	930a      	str	r3, [sp, #40]	@ 0x28
 8004de2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	f000 81aa 	beq.w	800513e <_dtoa_r+0xb4e>
 8004dea:	6923      	ldr	r3, [r4, #16]
 8004dec:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004df0:	6918      	ldr	r0, [r3, #16]
 8004df2:	f000 fb6b 	bl	80054cc <__hi0bits>
 8004df6:	f1c0 0020 	rsb	r0, r0, #32
 8004dfa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004dfc:	4418      	add	r0, r3
 8004dfe:	f010 001f 	ands.w	r0, r0, #31
 8004e02:	d071      	beq.n	8004ee8 <_dtoa_r+0x8f8>
 8004e04:	f1c0 0320 	rsb	r3, r0, #32
 8004e08:	2b04      	cmp	r3, #4
 8004e0a:	dd65      	ble.n	8004ed8 <_dtoa_r+0x8e8>
 8004e0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004e0e:	f1c0 001c 	rsb	r0, r0, #28
 8004e12:	4403      	add	r3, r0
 8004e14:	4480      	add	r8, r0
 8004e16:	4406      	add	r6, r0
 8004e18:	9309      	str	r3, [sp, #36]	@ 0x24
 8004e1a:	f1b8 0f00 	cmp.w	r8, #0
 8004e1e:	dd05      	ble.n	8004e2c <_dtoa_r+0x83c>
 8004e20:	4649      	mov	r1, r9
 8004e22:	4642      	mov	r2, r8
 8004e24:	4658      	mov	r0, fp
 8004e26:	f000 fcb5 	bl	8005794 <__lshift>
 8004e2a:	4681      	mov	r9, r0
 8004e2c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	dd05      	ble.n	8004e3e <_dtoa_r+0x84e>
 8004e32:	4621      	mov	r1, r4
 8004e34:	461a      	mov	r2, r3
 8004e36:	4658      	mov	r0, fp
 8004e38:	f000 fcac 	bl	8005794 <__lshift>
 8004e3c:	4604      	mov	r4, r0
 8004e3e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d053      	beq.n	8004eec <_dtoa_r+0x8fc>
 8004e44:	4621      	mov	r1, r4
 8004e46:	4648      	mov	r0, r9
 8004e48:	f000 fd10 	bl	800586c <__mcmp>
 8004e4c:	2800      	cmp	r0, #0
 8004e4e:	da4d      	bge.n	8004eec <_dtoa_r+0x8fc>
 8004e50:	1e7b      	subs	r3, r7, #1
 8004e52:	4649      	mov	r1, r9
 8004e54:	9304      	str	r3, [sp, #16]
 8004e56:	220a      	movs	r2, #10
 8004e58:	2300      	movs	r3, #0
 8004e5a:	4658      	mov	r0, fp
 8004e5c:	f000 faf0 	bl	8005440 <__multadd>
 8004e60:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004e62:	4681      	mov	r9, r0
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	f000 816c 	beq.w	8005142 <_dtoa_r+0xb52>
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	4629      	mov	r1, r5
 8004e6e:	220a      	movs	r2, #10
 8004e70:	4658      	mov	r0, fp
 8004e72:	f000 fae5 	bl	8005440 <__multadd>
 8004e76:	9b08      	ldr	r3, [sp, #32]
 8004e78:	4605      	mov	r5, r0
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	dc61      	bgt.n	8004f42 <_dtoa_r+0x952>
 8004e7e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004e80:	2b02      	cmp	r3, #2
 8004e82:	dc3b      	bgt.n	8004efc <_dtoa_r+0x90c>
 8004e84:	e05d      	b.n	8004f42 <_dtoa_r+0x952>
 8004e86:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004e88:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8004e8c:	e746      	b.n	8004d1c <_dtoa_r+0x72c>
 8004e8e:	9b07      	ldr	r3, [sp, #28]
 8004e90:	1e5c      	subs	r4, r3, #1
 8004e92:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004e94:	42a3      	cmp	r3, r4
 8004e96:	bfbf      	itttt	lt
 8004e98:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8004e9a:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 8004e9c:	1ae3      	sublt	r3, r4, r3
 8004e9e:	18d2      	addlt	r2, r2, r3
 8004ea0:	bfa8      	it	ge
 8004ea2:	1b1c      	subge	r4, r3, r4
 8004ea4:	9b07      	ldr	r3, [sp, #28]
 8004ea6:	bfbe      	ittt	lt
 8004ea8:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8004eaa:	920e      	strlt	r2, [sp, #56]	@ 0x38
 8004eac:	2400      	movlt	r4, #0
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	bfb5      	itete	lt
 8004eb2:	eba8 0603 	sublt.w	r6, r8, r3
 8004eb6:	4646      	movge	r6, r8
 8004eb8:	2300      	movlt	r3, #0
 8004eba:	9b07      	ldrge	r3, [sp, #28]
 8004ebc:	e730      	b.n	8004d20 <_dtoa_r+0x730>
 8004ebe:	4646      	mov	r6, r8
 8004ec0:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8004ec2:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8004ec4:	e735      	b.n	8004d32 <_dtoa_r+0x742>
 8004ec6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004ec8:	e75c      	b.n	8004d84 <_dtoa_r+0x794>
 8004eca:	2300      	movs	r3, #0
 8004ecc:	e788      	b.n	8004de0 <_dtoa_r+0x7f0>
 8004ece:	9b02      	ldr	r3, [sp, #8]
 8004ed0:	e786      	b.n	8004de0 <_dtoa_r+0x7f0>
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	930a      	str	r3, [sp, #40]	@ 0x28
 8004ed6:	e788      	b.n	8004dea <_dtoa_r+0x7fa>
 8004ed8:	d09f      	beq.n	8004e1a <_dtoa_r+0x82a>
 8004eda:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004edc:	331c      	adds	r3, #28
 8004ede:	441a      	add	r2, r3
 8004ee0:	4498      	add	r8, r3
 8004ee2:	441e      	add	r6, r3
 8004ee4:	9209      	str	r2, [sp, #36]	@ 0x24
 8004ee6:	e798      	b.n	8004e1a <_dtoa_r+0x82a>
 8004ee8:	4603      	mov	r3, r0
 8004eea:	e7f6      	b.n	8004eda <_dtoa_r+0x8ea>
 8004eec:	9b07      	ldr	r3, [sp, #28]
 8004eee:	9704      	str	r7, [sp, #16]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	dc20      	bgt.n	8004f36 <_dtoa_r+0x946>
 8004ef4:	9308      	str	r3, [sp, #32]
 8004ef6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004ef8:	2b02      	cmp	r3, #2
 8004efa:	dd1e      	ble.n	8004f3a <_dtoa_r+0x94a>
 8004efc:	9b08      	ldr	r3, [sp, #32]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	f47f aebc 	bne.w	8004c7c <_dtoa_r+0x68c>
 8004f04:	4621      	mov	r1, r4
 8004f06:	2205      	movs	r2, #5
 8004f08:	4658      	mov	r0, fp
 8004f0a:	f000 fa99 	bl	8005440 <__multadd>
 8004f0e:	4601      	mov	r1, r0
 8004f10:	4604      	mov	r4, r0
 8004f12:	4648      	mov	r0, r9
 8004f14:	f000 fcaa 	bl	800586c <__mcmp>
 8004f18:	2800      	cmp	r0, #0
 8004f1a:	f77f aeaf 	ble.w	8004c7c <_dtoa_r+0x68c>
 8004f1e:	2331      	movs	r3, #49	@ 0x31
 8004f20:	4656      	mov	r6, sl
 8004f22:	f806 3b01 	strb.w	r3, [r6], #1
 8004f26:	9b04      	ldr	r3, [sp, #16]
 8004f28:	3301      	adds	r3, #1
 8004f2a:	9304      	str	r3, [sp, #16]
 8004f2c:	e6aa      	b.n	8004c84 <_dtoa_r+0x694>
 8004f2e:	9c07      	ldr	r4, [sp, #28]
 8004f30:	9704      	str	r7, [sp, #16]
 8004f32:	4625      	mov	r5, r4
 8004f34:	e7f3      	b.n	8004f1e <_dtoa_r+0x92e>
 8004f36:	9b07      	ldr	r3, [sp, #28]
 8004f38:	9308      	str	r3, [sp, #32]
 8004f3a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	f000 8104 	beq.w	800514a <_dtoa_r+0xb5a>
 8004f42:	2e00      	cmp	r6, #0
 8004f44:	dd05      	ble.n	8004f52 <_dtoa_r+0x962>
 8004f46:	4629      	mov	r1, r5
 8004f48:	4632      	mov	r2, r6
 8004f4a:	4658      	mov	r0, fp
 8004f4c:	f000 fc22 	bl	8005794 <__lshift>
 8004f50:	4605      	mov	r5, r0
 8004f52:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d05a      	beq.n	800500e <_dtoa_r+0xa1e>
 8004f58:	4658      	mov	r0, fp
 8004f5a:	6869      	ldr	r1, [r5, #4]
 8004f5c:	f000 fa0e 	bl	800537c <_Balloc>
 8004f60:	4606      	mov	r6, r0
 8004f62:	b928      	cbnz	r0, 8004f70 <_dtoa_r+0x980>
 8004f64:	4602      	mov	r2, r0
 8004f66:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8004f6a:	4b83      	ldr	r3, [pc, #524]	@ (8005178 <_dtoa_r+0xb88>)
 8004f6c:	f7ff bb54 	b.w	8004618 <_dtoa_r+0x28>
 8004f70:	692a      	ldr	r2, [r5, #16]
 8004f72:	f105 010c 	add.w	r1, r5, #12
 8004f76:	3202      	adds	r2, #2
 8004f78:	0092      	lsls	r2, r2, #2
 8004f7a:	300c      	adds	r0, #12
 8004f7c:	f000 ffa8 	bl	8005ed0 <memcpy>
 8004f80:	2201      	movs	r2, #1
 8004f82:	4631      	mov	r1, r6
 8004f84:	4658      	mov	r0, fp
 8004f86:	f000 fc05 	bl	8005794 <__lshift>
 8004f8a:	462f      	mov	r7, r5
 8004f8c:	4605      	mov	r5, r0
 8004f8e:	f10a 0301 	add.w	r3, sl, #1
 8004f92:	9307      	str	r3, [sp, #28]
 8004f94:	9b08      	ldr	r3, [sp, #32]
 8004f96:	4453      	add	r3, sl
 8004f98:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004f9a:	9b02      	ldr	r3, [sp, #8]
 8004f9c:	f003 0301 	and.w	r3, r3, #1
 8004fa0:	930a      	str	r3, [sp, #40]	@ 0x28
 8004fa2:	9b07      	ldr	r3, [sp, #28]
 8004fa4:	4621      	mov	r1, r4
 8004fa6:	3b01      	subs	r3, #1
 8004fa8:	4648      	mov	r0, r9
 8004faa:	9302      	str	r3, [sp, #8]
 8004fac:	f7ff fa97 	bl	80044de <quorem>
 8004fb0:	4639      	mov	r1, r7
 8004fb2:	9008      	str	r0, [sp, #32]
 8004fb4:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8004fb8:	4648      	mov	r0, r9
 8004fba:	f000 fc57 	bl	800586c <__mcmp>
 8004fbe:	462a      	mov	r2, r5
 8004fc0:	9009      	str	r0, [sp, #36]	@ 0x24
 8004fc2:	4621      	mov	r1, r4
 8004fc4:	4658      	mov	r0, fp
 8004fc6:	f000 fc6d 	bl	80058a4 <__mdiff>
 8004fca:	68c2      	ldr	r2, [r0, #12]
 8004fcc:	4606      	mov	r6, r0
 8004fce:	bb02      	cbnz	r2, 8005012 <_dtoa_r+0xa22>
 8004fd0:	4601      	mov	r1, r0
 8004fd2:	4648      	mov	r0, r9
 8004fd4:	f000 fc4a 	bl	800586c <__mcmp>
 8004fd8:	4602      	mov	r2, r0
 8004fda:	4631      	mov	r1, r6
 8004fdc:	4658      	mov	r0, fp
 8004fde:	920c      	str	r2, [sp, #48]	@ 0x30
 8004fe0:	f000 fa0c 	bl	80053fc <_Bfree>
 8004fe4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004fe6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8004fe8:	9e07      	ldr	r6, [sp, #28]
 8004fea:	ea43 0102 	orr.w	r1, r3, r2
 8004fee:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004ff0:	4319      	orrs	r1, r3
 8004ff2:	d110      	bne.n	8005016 <_dtoa_r+0xa26>
 8004ff4:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8004ff8:	d029      	beq.n	800504e <_dtoa_r+0xa5e>
 8004ffa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	dd02      	ble.n	8005006 <_dtoa_r+0xa16>
 8005000:	9b08      	ldr	r3, [sp, #32]
 8005002:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8005006:	9b02      	ldr	r3, [sp, #8]
 8005008:	f883 8000 	strb.w	r8, [r3]
 800500c:	e63b      	b.n	8004c86 <_dtoa_r+0x696>
 800500e:	4628      	mov	r0, r5
 8005010:	e7bb      	b.n	8004f8a <_dtoa_r+0x99a>
 8005012:	2201      	movs	r2, #1
 8005014:	e7e1      	b.n	8004fda <_dtoa_r+0x9ea>
 8005016:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005018:	2b00      	cmp	r3, #0
 800501a:	db04      	blt.n	8005026 <_dtoa_r+0xa36>
 800501c:	9920      	ldr	r1, [sp, #128]	@ 0x80
 800501e:	430b      	orrs	r3, r1
 8005020:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005022:	430b      	orrs	r3, r1
 8005024:	d120      	bne.n	8005068 <_dtoa_r+0xa78>
 8005026:	2a00      	cmp	r2, #0
 8005028:	dded      	ble.n	8005006 <_dtoa_r+0xa16>
 800502a:	4649      	mov	r1, r9
 800502c:	2201      	movs	r2, #1
 800502e:	4658      	mov	r0, fp
 8005030:	f000 fbb0 	bl	8005794 <__lshift>
 8005034:	4621      	mov	r1, r4
 8005036:	4681      	mov	r9, r0
 8005038:	f000 fc18 	bl	800586c <__mcmp>
 800503c:	2800      	cmp	r0, #0
 800503e:	dc03      	bgt.n	8005048 <_dtoa_r+0xa58>
 8005040:	d1e1      	bne.n	8005006 <_dtoa_r+0xa16>
 8005042:	f018 0f01 	tst.w	r8, #1
 8005046:	d0de      	beq.n	8005006 <_dtoa_r+0xa16>
 8005048:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800504c:	d1d8      	bne.n	8005000 <_dtoa_r+0xa10>
 800504e:	2339      	movs	r3, #57	@ 0x39
 8005050:	9a02      	ldr	r2, [sp, #8]
 8005052:	7013      	strb	r3, [r2, #0]
 8005054:	4633      	mov	r3, r6
 8005056:	461e      	mov	r6, r3
 8005058:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800505c:	3b01      	subs	r3, #1
 800505e:	2a39      	cmp	r2, #57	@ 0x39
 8005060:	d052      	beq.n	8005108 <_dtoa_r+0xb18>
 8005062:	3201      	adds	r2, #1
 8005064:	701a      	strb	r2, [r3, #0]
 8005066:	e60e      	b.n	8004c86 <_dtoa_r+0x696>
 8005068:	2a00      	cmp	r2, #0
 800506a:	dd07      	ble.n	800507c <_dtoa_r+0xa8c>
 800506c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005070:	d0ed      	beq.n	800504e <_dtoa_r+0xa5e>
 8005072:	9a02      	ldr	r2, [sp, #8]
 8005074:	f108 0301 	add.w	r3, r8, #1
 8005078:	7013      	strb	r3, [r2, #0]
 800507a:	e604      	b.n	8004c86 <_dtoa_r+0x696>
 800507c:	9b07      	ldr	r3, [sp, #28]
 800507e:	9a07      	ldr	r2, [sp, #28]
 8005080:	f803 8c01 	strb.w	r8, [r3, #-1]
 8005084:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005086:	4293      	cmp	r3, r2
 8005088:	d028      	beq.n	80050dc <_dtoa_r+0xaec>
 800508a:	4649      	mov	r1, r9
 800508c:	2300      	movs	r3, #0
 800508e:	220a      	movs	r2, #10
 8005090:	4658      	mov	r0, fp
 8005092:	f000 f9d5 	bl	8005440 <__multadd>
 8005096:	42af      	cmp	r7, r5
 8005098:	4681      	mov	r9, r0
 800509a:	f04f 0300 	mov.w	r3, #0
 800509e:	f04f 020a 	mov.w	r2, #10
 80050a2:	4639      	mov	r1, r7
 80050a4:	4658      	mov	r0, fp
 80050a6:	d107      	bne.n	80050b8 <_dtoa_r+0xac8>
 80050a8:	f000 f9ca 	bl	8005440 <__multadd>
 80050ac:	4607      	mov	r7, r0
 80050ae:	4605      	mov	r5, r0
 80050b0:	9b07      	ldr	r3, [sp, #28]
 80050b2:	3301      	adds	r3, #1
 80050b4:	9307      	str	r3, [sp, #28]
 80050b6:	e774      	b.n	8004fa2 <_dtoa_r+0x9b2>
 80050b8:	f000 f9c2 	bl	8005440 <__multadd>
 80050bc:	4629      	mov	r1, r5
 80050be:	4607      	mov	r7, r0
 80050c0:	2300      	movs	r3, #0
 80050c2:	220a      	movs	r2, #10
 80050c4:	4658      	mov	r0, fp
 80050c6:	f000 f9bb 	bl	8005440 <__multadd>
 80050ca:	4605      	mov	r5, r0
 80050cc:	e7f0      	b.n	80050b0 <_dtoa_r+0xac0>
 80050ce:	9b08      	ldr	r3, [sp, #32]
 80050d0:	2700      	movs	r7, #0
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	bfcc      	ite	gt
 80050d6:	461e      	movgt	r6, r3
 80050d8:	2601      	movle	r6, #1
 80050da:	4456      	add	r6, sl
 80050dc:	4649      	mov	r1, r9
 80050de:	2201      	movs	r2, #1
 80050e0:	4658      	mov	r0, fp
 80050e2:	f000 fb57 	bl	8005794 <__lshift>
 80050e6:	4621      	mov	r1, r4
 80050e8:	4681      	mov	r9, r0
 80050ea:	f000 fbbf 	bl	800586c <__mcmp>
 80050ee:	2800      	cmp	r0, #0
 80050f0:	dcb0      	bgt.n	8005054 <_dtoa_r+0xa64>
 80050f2:	d102      	bne.n	80050fa <_dtoa_r+0xb0a>
 80050f4:	f018 0f01 	tst.w	r8, #1
 80050f8:	d1ac      	bne.n	8005054 <_dtoa_r+0xa64>
 80050fa:	4633      	mov	r3, r6
 80050fc:	461e      	mov	r6, r3
 80050fe:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005102:	2a30      	cmp	r2, #48	@ 0x30
 8005104:	d0fa      	beq.n	80050fc <_dtoa_r+0xb0c>
 8005106:	e5be      	b.n	8004c86 <_dtoa_r+0x696>
 8005108:	459a      	cmp	sl, r3
 800510a:	d1a4      	bne.n	8005056 <_dtoa_r+0xa66>
 800510c:	9b04      	ldr	r3, [sp, #16]
 800510e:	3301      	adds	r3, #1
 8005110:	9304      	str	r3, [sp, #16]
 8005112:	2331      	movs	r3, #49	@ 0x31
 8005114:	f88a 3000 	strb.w	r3, [sl]
 8005118:	e5b5      	b.n	8004c86 <_dtoa_r+0x696>
 800511a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800511c:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800517c <_dtoa_r+0xb8c>
 8005120:	b11b      	cbz	r3, 800512a <_dtoa_r+0xb3a>
 8005122:	f10a 0308 	add.w	r3, sl, #8
 8005126:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8005128:	6013      	str	r3, [r2, #0]
 800512a:	4650      	mov	r0, sl
 800512c:	b017      	add	sp, #92	@ 0x5c
 800512e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005132:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005134:	2b01      	cmp	r3, #1
 8005136:	f77f ae3d 	ble.w	8004db4 <_dtoa_r+0x7c4>
 800513a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800513c:	930a      	str	r3, [sp, #40]	@ 0x28
 800513e:	2001      	movs	r0, #1
 8005140:	e65b      	b.n	8004dfa <_dtoa_r+0x80a>
 8005142:	9b08      	ldr	r3, [sp, #32]
 8005144:	2b00      	cmp	r3, #0
 8005146:	f77f aed6 	ble.w	8004ef6 <_dtoa_r+0x906>
 800514a:	4656      	mov	r6, sl
 800514c:	4621      	mov	r1, r4
 800514e:	4648      	mov	r0, r9
 8005150:	f7ff f9c5 	bl	80044de <quorem>
 8005154:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8005158:	9b08      	ldr	r3, [sp, #32]
 800515a:	f806 8b01 	strb.w	r8, [r6], #1
 800515e:	eba6 020a 	sub.w	r2, r6, sl
 8005162:	4293      	cmp	r3, r2
 8005164:	ddb3      	ble.n	80050ce <_dtoa_r+0xade>
 8005166:	4649      	mov	r1, r9
 8005168:	2300      	movs	r3, #0
 800516a:	220a      	movs	r2, #10
 800516c:	4658      	mov	r0, fp
 800516e:	f000 f967 	bl	8005440 <__multadd>
 8005172:	4681      	mov	r9, r0
 8005174:	e7ea      	b.n	800514c <_dtoa_r+0xb5c>
 8005176:	bf00      	nop
 8005178:	08006676 	.word	0x08006676
 800517c:	080065fa 	.word	0x080065fa

08005180 <_free_r>:
 8005180:	b538      	push	{r3, r4, r5, lr}
 8005182:	4605      	mov	r5, r0
 8005184:	2900      	cmp	r1, #0
 8005186:	d040      	beq.n	800520a <_free_r+0x8a>
 8005188:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800518c:	1f0c      	subs	r4, r1, #4
 800518e:	2b00      	cmp	r3, #0
 8005190:	bfb8      	it	lt
 8005192:	18e4      	addlt	r4, r4, r3
 8005194:	f000 f8e6 	bl	8005364 <__malloc_lock>
 8005198:	4a1c      	ldr	r2, [pc, #112]	@ (800520c <_free_r+0x8c>)
 800519a:	6813      	ldr	r3, [r2, #0]
 800519c:	b933      	cbnz	r3, 80051ac <_free_r+0x2c>
 800519e:	6063      	str	r3, [r4, #4]
 80051a0:	6014      	str	r4, [r2, #0]
 80051a2:	4628      	mov	r0, r5
 80051a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80051a8:	f000 b8e2 	b.w	8005370 <__malloc_unlock>
 80051ac:	42a3      	cmp	r3, r4
 80051ae:	d908      	bls.n	80051c2 <_free_r+0x42>
 80051b0:	6820      	ldr	r0, [r4, #0]
 80051b2:	1821      	adds	r1, r4, r0
 80051b4:	428b      	cmp	r3, r1
 80051b6:	bf01      	itttt	eq
 80051b8:	6819      	ldreq	r1, [r3, #0]
 80051ba:	685b      	ldreq	r3, [r3, #4]
 80051bc:	1809      	addeq	r1, r1, r0
 80051be:	6021      	streq	r1, [r4, #0]
 80051c0:	e7ed      	b.n	800519e <_free_r+0x1e>
 80051c2:	461a      	mov	r2, r3
 80051c4:	685b      	ldr	r3, [r3, #4]
 80051c6:	b10b      	cbz	r3, 80051cc <_free_r+0x4c>
 80051c8:	42a3      	cmp	r3, r4
 80051ca:	d9fa      	bls.n	80051c2 <_free_r+0x42>
 80051cc:	6811      	ldr	r1, [r2, #0]
 80051ce:	1850      	adds	r0, r2, r1
 80051d0:	42a0      	cmp	r0, r4
 80051d2:	d10b      	bne.n	80051ec <_free_r+0x6c>
 80051d4:	6820      	ldr	r0, [r4, #0]
 80051d6:	4401      	add	r1, r0
 80051d8:	1850      	adds	r0, r2, r1
 80051da:	4283      	cmp	r3, r0
 80051dc:	6011      	str	r1, [r2, #0]
 80051de:	d1e0      	bne.n	80051a2 <_free_r+0x22>
 80051e0:	6818      	ldr	r0, [r3, #0]
 80051e2:	685b      	ldr	r3, [r3, #4]
 80051e4:	4408      	add	r0, r1
 80051e6:	6010      	str	r0, [r2, #0]
 80051e8:	6053      	str	r3, [r2, #4]
 80051ea:	e7da      	b.n	80051a2 <_free_r+0x22>
 80051ec:	d902      	bls.n	80051f4 <_free_r+0x74>
 80051ee:	230c      	movs	r3, #12
 80051f0:	602b      	str	r3, [r5, #0]
 80051f2:	e7d6      	b.n	80051a2 <_free_r+0x22>
 80051f4:	6820      	ldr	r0, [r4, #0]
 80051f6:	1821      	adds	r1, r4, r0
 80051f8:	428b      	cmp	r3, r1
 80051fa:	bf01      	itttt	eq
 80051fc:	6819      	ldreq	r1, [r3, #0]
 80051fe:	685b      	ldreq	r3, [r3, #4]
 8005200:	1809      	addeq	r1, r1, r0
 8005202:	6021      	streq	r1, [r4, #0]
 8005204:	6063      	str	r3, [r4, #4]
 8005206:	6054      	str	r4, [r2, #4]
 8005208:	e7cb      	b.n	80051a2 <_free_r+0x22>
 800520a:	bd38      	pop	{r3, r4, r5, pc}
 800520c:	20000400 	.word	0x20000400

08005210 <malloc>:
 8005210:	4b02      	ldr	r3, [pc, #8]	@ (800521c <malloc+0xc>)
 8005212:	4601      	mov	r1, r0
 8005214:	6818      	ldr	r0, [r3, #0]
 8005216:	f000 b825 	b.w	8005264 <_malloc_r>
 800521a:	bf00      	nop
 800521c:	20000018 	.word	0x20000018

08005220 <sbrk_aligned>:
 8005220:	b570      	push	{r4, r5, r6, lr}
 8005222:	4e0f      	ldr	r6, [pc, #60]	@ (8005260 <sbrk_aligned+0x40>)
 8005224:	460c      	mov	r4, r1
 8005226:	6831      	ldr	r1, [r6, #0]
 8005228:	4605      	mov	r5, r0
 800522a:	b911      	cbnz	r1, 8005232 <sbrk_aligned+0x12>
 800522c:	f000 fe40 	bl	8005eb0 <_sbrk_r>
 8005230:	6030      	str	r0, [r6, #0]
 8005232:	4621      	mov	r1, r4
 8005234:	4628      	mov	r0, r5
 8005236:	f000 fe3b 	bl	8005eb0 <_sbrk_r>
 800523a:	1c43      	adds	r3, r0, #1
 800523c:	d103      	bne.n	8005246 <sbrk_aligned+0x26>
 800523e:	f04f 34ff 	mov.w	r4, #4294967295
 8005242:	4620      	mov	r0, r4
 8005244:	bd70      	pop	{r4, r5, r6, pc}
 8005246:	1cc4      	adds	r4, r0, #3
 8005248:	f024 0403 	bic.w	r4, r4, #3
 800524c:	42a0      	cmp	r0, r4
 800524e:	d0f8      	beq.n	8005242 <sbrk_aligned+0x22>
 8005250:	1a21      	subs	r1, r4, r0
 8005252:	4628      	mov	r0, r5
 8005254:	f000 fe2c 	bl	8005eb0 <_sbrk_r>
 8005258:	3001      	adds	r0, #1
 800525a:	d1f2      	bne.n	8005242 <sbrk_aligned+0x22>
 800525c:	e7ef      	b.n	800523e <sbrk_aligned+0x1e>
 800525e:	bf00      	nop
 8005260:	200003fc 	.word	0x200003fc

08005264 <_malloc_r>:
 8005264:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005268:	1ccd      	adds	r5, r1, #3
 800526a:	f025 0503 	bic.w	r5, r5, #3
 800526e:	3508      	adds	r5, #8
 8005270:	2d0c      	cmp	r5, #12
 8005272:	bf38      	it	cc
 8005274:	250c      	movcc	r5, #12
 8005276:	2d00      	cmp	r5, #0
 8005278:	4606      	mov	r6, r0
 800527a:	db01      	blt.n	8005280 <_malloc_r+0x1c>
 800527c:	42a9      	cmp	r1, r5
 800527e:	d904      	bls.n	800528a <_malloc_r+0x26>
 8005280:	230c      	movs	r3, #12
 8005282:	6033      	str	r3, [r6, #0]
 8005284:	2000      	movs	r0, #0
 8005286:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800528a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005360 <_malloc_r+0xfc>
 800528e:	f000 f869 	bl	8005364 <__malloc_lock>
 8005292:	f8d8 3000 	ldr.w	r3, [r8]
 8005296:	461c      	mov	r4, r3
 8005298:	bb44      	cbnz	r4, 80052ec <_malloc_r+0x88>
 800529a:	4629      	mov	r1, r5
 800529c:	4630      	mov	r0, r6
 800529e:	f7ff ffbf 	bl	8005220 <sbrk_aligned>
 80052a2:	1c43      	adds	r3, r0, #1
 80052a4:	4604      	mov	r4, r0
 80052a6:	d158      	bne.n	800535a <_malloc_r+0xf6>
 80052a8:	f8d8 4000 	ldr.w	r4, [r8]
 80052ac:	4627      	mov	r7, r4
 80052ae:	2f00      	cmp	r7, #0
 80052b0:	d143      	bne.n	800533a <_malloc_r+0xd6>
 80052b2:	2c00      	cmp	r4, #0
 80052b4:	d04b      	beq.n	800534e <_malloc_r+0xea>
 80052b6:	6823      	ldr	r3, [r4, #0]
 80052b8:	4639      	mov	r1, r7
 80052ba:	4630      	mov	r0, r6
 80052bc:	eb04 0903 	add.w	r9, r4, r3
 80052c0:	f000 fdf6 	bl	8005eb0 <_sbrk_r>
 80052c4:	4581      	cmp	r9, r0
 80052c6:	d142      	bne.n	800534e <_malloc_r+0xea>
 80052c8:	6821      	ldr	r1, [r4, #0]
 80052ca:	4630      	mov	r0, r6
 80052cc:	1a6d      	subs	r5, r5, r1
 80052ce:	4629      	mov	r1, r5
 80052d0:	f7ff ffa6 	bl	8005220 <sbrk_aligned>
 80052d4:	3001      	adds	r0, #1
 80052d6:	d03a      	beq.n	800534e <_malloc_r+0xea>
 80052d8:	6823      	ldr	r3, [r4, #0]
 80052da:	442b      	add	r3, r5
 80052dc:	6023      	str	r3, [r4, #0]
 80052de:	f8d8 3000 	ldr.w	r3, [r8]
 80052e2:	685a      	ldr	r2, [r3, #4]
 80052e4:	bb62      	cbnz	r2, 8005340 <_malloc_r+0xdc>
 80052e6:	f8c8 7000 	str.w	r7, [r8]
 80052ea:	e00f      	b.n	800530c <_malloc_r+0xa8>
 80052ec:	6822      	ldr	r2, [r4, #0]
 80052ee:	1b52      	subs	r2, r2, r5
 80052f0:	d420      	bmi.n	8005334 <_malloc_r+0xd0>
 80052f2:	2a0b      	cmp	r2, #11
 80052f4:	d917      	bls.n	8005326 <_malloc_r+0xc2>
 80052f6:	1961      	adds	r1, r4, r5
 80052f8:	42a3      	cmp	r3, r4
 80052fa:	6025      	str	r5, [r4, #0]
 80052fc:	bf18      	it	ne
 80052fe:	6059      	strne	r1, [r3, #4]
 8005300:	6863      	ldr	r3, [r4, #4]
 8005302:	bf08      	it	eq
 8005304:	f8c8 1000 	streq.w	r1, [r8]
 8005308:	5162      	str	r2, [r4, r5]
 800530a:	604b      	str	r3, [r1, #4]
 800530c:	4630      	mov	r0, r6
 800530e:	f000 f82f 	bl	8005370 <__malloc_unlock>
 8005312:	f104 000b 	add.w	r0, r4, #11
 8005316:	1d23      	adds	r3, r4, #4
 8005318:	f020 0007 	bic.w	r0, r0, #7
 800531c:	1ac2      	subs	r2, r0, r3
 800531e:	bf1c      	itt	ne
 8005320:	1a1b      	subne	r3, r3, r0
 8005322:	50a3      	strne	r3, [r4, r2]
 8005324:	e7af      	b.n	8005286 <_malloc_r+0x22>
 8005326:	6862      	ldr	r2, [r4, #4]
 8005328:	42a3      	cmp	r3, r4
 800532a:	bf0c      	ite	eq
 800532c:	f8c8 2000 	streq.w	r2, [r8]
 8005330:	605a      	strne	r2, [r3, #4]
 8005332:	e7eb      	b.n	800530c <_malloc_r+0xa8>
 8005334:	4623      	mov	r3, r4
 8005336:	6864      	ldr	r4, [r4, #4]
 8005338:	e7ae      	b.n	8005298 <_malloc_r+0x34>
 800533a:	463c      	mov	r4, r7
 800533c:	687f      	ldr	r7, [r7, #4]
 800533e:	e7b6      	b.n	80052ae <_malloc_r+0x4a>
 8005340:	461a      	mov	r2, r3
 8005342:	685b      	ldr	r3, [r3, #4]
 8005344:	42a3      	cmp	r3, r4
 8005346:	d1fb      	bne.n	8005340 <_malloc_r+0xdc>
 8005348:	2300      	movs	r3, #0
 800534a:	6053      	str	r3, [r2, #4]
 800534c:	e7de      	b.n	800530c <_malloc_r+0xa8>
 800534e:	230c      	movs	r3, #12
 8005350:	4630      	mov	r0, r6
 8005352:	6033      	str	r3, [r6, #0]
 8005354:	f000 f80c 	bl	8005370 <__malloc_unlock>
 8005358:	e794      	b.n	8005284 <_malloc_r+0x20>
 800535a:	6005      	str	r5, [r0, #0]
 800535c:	e7d6      	b.n	800530c <_malloc_r+0xa8>
 800535e:	bf00      	nop
 8005360:	20000400 	.word	0x20000400

08005364 <__malloc_lock>:
 8005364:	4801      	ldr	r0, [pc, #4]	@ (800536c <__malloc_lock+0x8>)
 8005366:	f7ff b8aa 	b.w	80044be <__retarget_lock_acquire_recursive>
 800536a:	bf00      	nop
 800536c:	200003f8 	.word	0x200003f8

08005370 <__malloc_unlock>:
 8005370:	4801      	ldr	r0, [pc, #4]	@ (8005378 <__malloc_unlock+0x8>)
 8005372:	f7ff b8a5 	b.w	80044c0 <__retarget_lock_release_recursive>
 8005376:	bf00      	nop
 8005378:	200003f8 	.word	0x200003f8

0800537c <_Balloc>:
 800537c:	b570      	push	{r4, r5, r6, lr}
 800537e:	69c6      	ldr	r6, [r0, #28]
 8005380:	4604      	mov	r4, r0
 8005382:	460d      	mov	r5, r1
 8005384:	b976      	cbnz	r6, 80053a4 <_Balloc+0x28>
 8005386:	2010      	movs	r0, #16
 8005388:	f7ff ff42 	bl	8005210 <malloc>
 800538c:	4602      	mov	r2, r0
 800538e:	61e0      	str	r0, [r4, #28]
 8005390:	b920      	cbnz	r0, 800539c <_Balloc+0x20>
 8005392:	216b      	movs	r1, #107	@ 0x6b
 8005394:	4b17      	ldr	r3, [pc, #92]	@ (80053f4 <_Balloc+0x78>)
 8005396:	4818      	ldr	r0, [pc, #96]	@ (80053f8 <_Balloc+0x7c>)
 8005398:	f000 fda8 	bl	8005eec <__assert_func>
 800539c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80053a0:	6006      	str	r6, [r0, #0]
 80053a2:	60c6      	str	r6, [r0, #12]
 80053a4:	69e6      	ldr	r6, [r4, #28]
 80053a6:	68f3      	ldr	r3, [r6, #12]
 80053a8:	b183      	cbz	r3, 80053cc <_Balloc+0x50>
 80053aa:	69e3      	ldr	r3, [r4, #28]
 80053ac:	68db      	ldr	r3, [r3, #12]
 80053ae:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80053b2:	b9b8      	cbnz	r0, 80053e4 <_Balloc+0x68>
 80053b4:	2101      	movs	r1, #1
 80053b6:	fa01 f605 	lsl.w	r6, r1, r5
 80053ba:	1d72      	adds	r2, r6, #5
 80053bc:	4620      	mov	r0, r4
 80053be:	0092      	lsls	r2, r2, #2
 80053c0:	f000 fdb2 	bl	8005f28 <_calloc_r>
 80053c4:	b160      	cbz	r0, 80053e0 <_Balloc+0x64>
 80053c6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80053ca:	e00e      	b.n	80053ea <_Balloc+0x6e>
 80053cc:	2221      	movs	r2, #33	@ 0x21
 80053ce:	2104      	movs	r1, #4
 80053d0:	4620      	mov	r0, r4
 80053d2:	f000 fda9 	bl	8005f28 <_calloc_r>
 80053d6:	69e3      	ldr	r3, [r4, #28]
 80053d8:	60f0      	str	r0, [r6, #12]
 80053da:	68db      	ldr	r3, [r3, #12]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d1e4      	bne.n	80053aa <_Balloc+0x2e>
 80053e0:	2000      	movs	r0, #0
 80053e2:	bd70      	pop	{r4, r5, r6, pc}
 80053e4:	6802      	ldr	r2, [r0, #0]
 80053e6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80053ea:	2300      	movs	r3, #0
 80053ec:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80053f0:	e7f7      	b.n	80053e2 <_Balloc+0x66>
 80053f2:	bf00      	nop
 80053f4:	08006607 	.word	0x08006607
 80053f8:	08006687 	.word	0x08006687

080053fc <_Bfree>:
 80053fc:	b570      	push	{r4, r5, r6, lr}
 80053fe:	69c6      	ldr	r6, [r0, #28]
 8005400:	4605      	mov	r5, r0
 8005402:	460c      	mov	r4, r1
 8005404:	b976      	cbnz	r6, 8005424 <_Bfree+0x28>
 8005406:	2010      	movs	r0, #16
 8005408:	f7ff ff02 	bl	8005210 <malloc>
 800540c:	4602      	mov	r2, r0
 800540e:	61e8      	str	r0, [r5, #28]
 8005410:	b920      	cbnz	r0, 800541c <_Bfree+0x20>
 8005412:	218f      	movs	r1, #143	@ 0x8f
 8005414:	4b08      	ldr	r3, [pc, #32]	@ (8005438 <_Bfree+0x3c>)
 8005416:	4809      	ldr	r0, [pc, #36]	@ (800543c <_Bfree+0x40>)
 8005418:	f000 fd68 	bl	8005eec <__assert_func>
 800541c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005420:	6006      	str	r6, [r0, #0]
 8005422:	60c6      	str	r6, [r0, #12]
 8005424:	b13c      	cbz	r4, 8005436 <_Bfree+0x3a>
 8005426:	69eb      	ldr	r3, [r5, #28]
 8005428:	6862      	ldr	r2, [r4, #4]
 800542a:	68db      	ldr	r3, [r3, #12]
 800542c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005430:	6021      	str	r1, [r4, #0]
 8005432:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005436:	bd70      	pop	{r4, r5, r6, pc}
 8005438:	08006607 	.word	0x08006607
 800543c:	08006687 	.word	0x08006687

08005440 <__multadd>:
 8005440:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005444:	4607      	mov	r7, r0
 8005446:	460c      	mov	r4, r1
 8005448:	461e      	mov	r6, r3
 800544a:	2000      	movs	r0, #0
 800544c:	690d      	ldr	r5, [r1, #16]
 800544e:	f101 0c14 	add.w	ip, r1, #20
 8005452:	f8dc 3000 	ldr.w	r3, [ip]
 8005456:	3001      	adds	r0, #1
 8005458:	b299      	uxth	r1, r3
 800545a:	fb02 6101 	mla	r1, r2, r1, r6
 800545e:	0c1e      	lsrs	r6, r3, #16
 8005460:	0c0b      	lsrs	r3, r1, #16
 8005462:	fb02 3306 	mla	r3, r2, r6, r3
 8005466:	b289      	uxth	r1, r1
 8005468:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800546c:	4285      	cmp	r5, r0
 800546e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005472:	f84c 1b04 	str.w	r1, [ip], #4
 8005476:	dcec      	bgt.n	8005452 <__multadd+0x12>
 8005478:	b30e      	cbz	r6, 80054be <__multadd+0x7e>
 800547a:	68a3      	ldr	r3, [r4, #8]
 800547c:	42ab      	cmp	r3, r5
 800547e:	dc19      	bgt.n	80054b4 <__multadd+0x74>
 8005480:	6861      	ldr	r1, [r4, #4]
 8005482:	4638      	mov	r0, r7
 8005484:	3101      	adds	r1, #1
 8005486:	f7ff ff79 	bl	800537c <_Balloc>
 800548a:	4680      	mov	r8, r0
 800548c:	b928      	cbnz	r0, 800549a <__multadd+0x5a>
 800548e:	4602      	mov	r2, r0
 8005490:	21ba      	movs	r1, #186	@ 0xba
 8005492:	4b0c      	ldr	r3, [pc, #48]	@ (80054c4 <__multadd+0x84>)
 8005494:	480c      	ldr	r0, [pc, #48]	@ (80054c8 <__multadd+0x88>)
 8005496:	f000 fd29 	bl	8005eec <__assert_func>
 800549a:	6922      	ldr	r2, [r4, #16]
 800549c:	f104 010c 	add.w	r1, r4, #12
 80054a0:	3202      	adds	r2, #2
 80054a2:	0092      	lsls	r2, r2, #2
 80054a4:	300c      	adds	r0, #12
 80054a6:	f000 fd13 	bl	8005ed0 <memcpy>
 80054aa:	4621      	mov	r1, r4
 80054ac:	4638      	mov	r0, r7
 80054ae:	f7ff ffa5 	bl	80053fc <_Bfree>
 80054b2:	4644      	mov	r4, r8
 80054b4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80054b8:	3501      	adds	r5, #1
 80054ba:	615e      	str	r6, [r3, #20]
 80054bc:	6125      	str	r5, [r4, #16]
 80054be:	4620      	mov	r0, r4
 80054c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80054c4:	08006676 	.word	0x08006676
 80054c8:	08006687 	.word	0x08006687

080054cc <__hi0bits>:
 80054cc:	4603      	mov	r3, r0
 80054ce:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80054d2:	bf3a      	itte	cc
 80054d4:	0403      	lslcc	r3, r0, #16
 80054d6:	2010      	movcc	r0, #16
 80054d8:	2000      	movcs	r0, #0
 80054da:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80054de:	bf3c      	itt	cc
 80054e0:	021b      	lslcc	r3, r3, #8
 80054e2:	3008      	addcc	r0, #8
 80054e4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80054e8:	bf3c      	itt	cc
 80054ea:	011b      	lslcc	r3, r3, #4
 80054ec:	3004      	addcc	r0, #4
 80054ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80054f2:	bf3c      	itt	cc
 80054f4:	009b      	lslcc	r3, r3, #2
 80054f6:	3002      	addcc	r0, #2
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	db05      	blt.n	8005508 <__hi0bits+0x3c>
 80054fc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8005500:	f100 0001 	add.w	r0, r0, #1
 8005504:	bf08      	it	eq
 8005506:	2020      	moveq	r0, #32
 8005508:	4770      	bx	lr

0800550a <__lo0bits>:
 800550a:	6803      	ldr	r3, [r0, #0]
 800550c:	4602      	mov	r2, r0
 800550e:	f013 0007 	ands.w	r0, r3, #7
 8005512:	d00b      	beq.n	800552c <__lo0bits+0x22>
 8005514:	07d9      	lsls	r1, r3, #31
 8005516:	d421      	bmi.n	800555c <__lo0bits+0x52>
 8005518:	0798      	lsls	r0, r3, #30
 800551a:	bf49      	itett	mi
 800551c:	085b      	lsrmi	r3, r3, #1
 800551e:	089b      	lsrpl	r3, r3, #2
 8005520:	2001      	movmi	r0, #1
 8005522:	6013      	strmi	r3, [r2, #0]
 8005524:	bf5c      	itt	pl
 8005526:	2002      	movpl	r0, #2
 8005528:	6013      	strpl	r3, [r2, #0]
 800552a:	4770      	bx	lr
 800552c:	b299      	uxth	r1, r3
 800552e:	b909      	cbnz	r1, 8005534 <__lo0bits+0x2a>
 8005530:	2010      	movs	r0, #16
 8005532:	0c1b      	lsrs	r3, r3, #16
 8005534:	b2d9      	uxtb	r1, r3
 8005536:	b909      	cbnz	r1, 800553c <__lo0bits+0x32>
 8005538:	3008      	adds	r0, #8
 800553a:	0a1b      	lsrs	r3, r3, #8
 800553c:	0719      	lsls	r1, r3, #28
 800553e:	bf04      	itt	eq
 8005540:	091b      	lsreq	r3, r3, #4
 8005542:	3004      	addeq	r0, #4
 8005544:	0799      	lsls	r1, r3, #30
 8005546:	bf04      	itt	eq
 8005548:	089b      	lsreq	r3, r3, #2
 800554a:	3002      	addeq	r0, #2
 800554c:	07d9      	lsls	r1, r3, #31
 800554e:	d403      	bmi.n	8005558 <__lo0bits+0x4e>
 8005550:	085b      	lsrs	r3, r3, #1
 8005552:	f100 0001 	add.w	r0, r0, #1
 8005556:	d003      	beq.n	8005560 <__lo0bits+0x56>
 8005558:	6013      	str	r3, [r2, #0]
 800555a:	4770      	bx	lr
 800555c:	2000      	movs	r0, #0
 800555e:	4770      	bx	lr
 8005560:	2020      	movs	r0, #32
 8005562:	4770      	bx	lr

08005564 <__i2b>:
 8005564:	b510      	push	{r4, lr}
 8005566:	460c      	mov	r4, r1
 8005568:	2101      	movs	r1, #1
 800556a:	f7ff ff07 	bl	800537c <_Balloc>
 800556e:	4602      	mov	r2, r0
 8005570:	b928      	cbnz	r0, 800557e <__i2b+0x1a>
 8005572:	f240 1145 	movw	r1, #325	@ 0x145
 8005576:	4b04      	ldr	r3, [pc, #16]	@ (8005588 <__i2b+0x24>)
 8005578:	4804      	ldr	r0, [pc, #16]	@ (800558c <__i2b+0x28>)
 800557a:	f000 fcb7 	bl	8005eec <__assert_func>
 800557e:	2301      	movs	r3, #1
 8005580:	6144      	str	r4, [r0, #20]
 8005582:	6103      	str	r3, [r0, #16]
 8005584:	bd10      	pop	{r4, pc}
 8005586:	bf00      	nop
 8005588:	08006676 	.word	0x08006676
 800558c:	08006687 	.word	0x08006687

08005590 <__multiply>:
 8005590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005594:	4614      	mov	r4, r2
 8005596:	690a      	ldr	r2, [r1, #16]
 8005598:	6923      	ldr	r3, [r4, #16]
 800559a:	460f      	mov	r7, r1
 800559c:	429a      	cmp	r2, r3
 800559e:	bfa2      	ittt	ge
 80055a0:	4623      	movge	r3, r4
 80055a2:	460c      	movge	r4, r1
 80055a4:	461f      	movge	r7, r3
 80055a6:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80055aa:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80055ae:	68a3      	ldr	r3, [r4, #8]
 80055b0:	6861      	ldr	r1, [r4, #4]
 80055b2:	eb0a 0609 	add.w	r6, sl, r9
 80055b6:	42b3      	cmp	r3, r6
 80055b8:	b085      	sub	sp, #20
 80055ba:	bfb8      	it	lt
 80055bc:	3101      	addlt	r1, #1
 80055be:	f7ff fedd 	bl	800537c <_Balloc>
 80055c2:	b930      	cbnz	r0, 80055d2 <__multiply+0x42>
 80055c4:	4602      	mov	r2, r0
 80055c6:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80055ca:	4b43      	ldr	r3, [pc, #268]	@ (80056d8 <__multiply+0x148>)
 80055cc:	4843      	ldr	r0, [pc, #268]	@ (80056dc <__multiply+0x14c>)
 80055ce:	f000 fc8d 	bl	8005eec <__assert_func>
 80055d2:	f100 0514 	add.w	r5, r0, #20
 80055d6:	462b      	mov	r3, r5
 80055d8:	2200      	movs	r2, #0
 80055da:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80055de:	4543      	cmp	r3, r8
 80055e0:	d321      	bcc.n	8005626 <__multiply+0x96>
 80055e2:	f107 0114 	add.w	r1, r7, #20
 80055e6:	f104 0214 	add.w	r2, r4, #20
 80055ea:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80055ee:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80055f2:	9302      	str	r3, [sp, #8]
 80055f4:	1b13      	subs	r3, r2, r4
 80055f6:	3b15      	subs	r3, #21
 80055f8:	f023 0303 	bic.w	r3, r3, #3
 80055fc:	3304      	adds	r3, #4
 80055fe:	f104 0715 	add.w	r7, r4, #21
 8005602:	42ba      	cmp	r2, r7
 8005604:	bf38      	it	cc
 8005606:	2304      	movcc	r3, #4
 8005608:	9301      	str	r3, [sp, #4]
 800560a:	9b02      	ldr	r3, [sp, #8]
 800560c:	9103      	str	r1, [sp, #12]
 800560e:	428b      	cmp	r3, r1
 8005610:	d80c      	bhi.n	800562c <__multiply+0x9c>
 8005612:	2e00      	cmp	r6, #0
 8005614:	dd03      	ble.n	800561e <__multiply+0x8e>
 8005616:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800561a:	2b00      	cmp	r3, #0
 800561c:	d05a      	beq.n	80056d4 <__multiply+0x144>
 800561e:	6106      	str	r6, [r0, #16]
 8005620:	b005      	add	sp, #20
 8005622:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005626:	f843 2b04 	str.w	r2, [r3], #4
 800562a:	e7d8      	b.n	80055de <__multiply+0x4e>
 800562c:	f8b1 a000 	ldrh.w	sl, [r1]
 8005630:	f1ba 0f00 	cmp.w	sl, #0
 8005634:	d023      	beq.n	800567e <__multiply+0xee>
 8005636:	46a9      	mov	r9, r5
 8005638:	f04f 0c00 	mov.w	ip, #0
 800563c:	f104 0e14 	add.w	lr, r4, #20
 8005640:	f85e 7b04 	ldr.w	r7, [lr], #4
 8005644:	f8d9 3000 	ldr.w	r3, [r9]
 8005648:	fa1f fb87 	uxth.w	fp, r7
 800564c:	b29b      	uxth	r3, r3
 800564e:	fb0a 330b 	mla	r3, sl, fp, r3
 8005652:	4463      	add	r3, ip
 8005654:	f8d9 c000 	ldr.w	ip, [r9]
 8005658:	0c3f      	lsrs	r7, r7, #16
 800565a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800565e:	fb0a c707 	mla	r7, sl, r7, ip
 8005662:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8005666:	b29b      	uxth	r3, r3
 8005668:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800566c:	4572      	cmp	r2, lr
 800566e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8005672:	f849 3b04 	str.w	r3, [r9], #4
 8005676:	d8e3      	bhi.n	8005640 <__multiply+0xb0>
 8005678:	9b01      	ldr	r3, [sp, #4]
 800567a:	f845 c003 	str.w	ip, [r5, r3]
 800567e:	9b03      	ldr	r3, [sp, #12]
 8005680:	3104      	adds	r1, #4
 8005682:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8005686:	f1b9 0f00 	cmp.w	r9, #0
 800568a:	d021      	beq.n	80056d0 <__multiply+0x140>
 800568c:	46ae      	mov	lr, r5
 800568e:	f04f 0a00 	mov.w	sl, #0
 8005692:	682b      	ldr	r3, [r5, #0]
 8005694:	f104 0c14 	add.w	ip, r4, #20
 8005698:	f8bc b000 	ldrh.w	fp, [ip]
 800569c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80056a0:	b29b      	uxth	r3, r3
 80056a2:	fb09 770b 	mla	r7, r9, fp, r7
 80056a6:	4457      	add	r7, sl
 80056a8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80056ac:	f84e 3b04 	str.w	r3, [lr], #4
 80056b0:	f85c 3b04 	ldr.w	r3, [ip], #4
 80056b4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80056b8:	f8be 3000 	ldrh.w	r3, [lr]
 80056bc:	4562      	cmp	r2, ip
 80056be:	fb09 330a 	mla	r3, r9, sl, r3
 80056c2:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80056c6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80056ca:	d8e5      	bhi.n	8005698 <__multiply+0x108>
 80056cc:	9f01      	ldr	r7, [sp, #4]
 80056ce:	51eb      	str	r3, [r5, r7]
 80056d0:	3504      	adds	r5, #4
 80056d2:	e79a      	b.n	800560a <__multiply+0x7a>
 80056d4:	3e01      	subs	r6, #1
 80056d6:	e79c      	b.n	8005612 <__multiply+0x82>
 80056d8:	08006676 	.word	0x08006676
 80056dc:	08006687 	.word	0x08006687

080056e0 <__pow5mult>:
 80056e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80056e4:	4615      	mov	r5, r2
 80056e6:	f012 0203 	ands.w	r2, r2, #3
 80056ea:	4607      	mov	r7, r0
 80056ec:	460e      	mov	r6, r1
 80056ee:	d007      	beq.n	8005700 <__pow5mult+0x20>
 80056f0:	4c25      	ldr	r4, [pc, #148]	@ (8005788 <__pow5mult+0xa8>)
 80056f2:	3a01      	subs	r2, #1
 80056f4:	2300      	movs	r3, #0
 80056f6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80056fa:	f7ff fea1 	bl	8005440 <__multadd>
 80056fe:	4606      	mov	r6, r0
 8005700:	10ad      	asrs	r5, r5, #2
 8005702:	d03d      	beq.n	8005780 <__pow5mult+0xa0>
 8005704:	69fc      	ldr	r4, [r7, #28]
 8005706:	b97c      	cbnz	r4, 8005728 <__pow5mult+0x48>
 8005708:	2010      	movs	r0, #16
 800570a:	f7ff fd81 	bl	8005210 <malloc>
 800570e:	4602      	mov	r2, r0
 8005710:	61f8      	str	r0, [r7, #28]
 8005712:	b928      	cbnz	r0, 8005720 <__pow5mult+0x40>
 8005714:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8005718:	4b1c      	ldr	r3, [pc, #112]	@ (800578c <__pow5mult+0xac>)
 800571a:	481d      	ldr	r0, [pc, #116]	@ (8005790 <__pow5mult+0xb0>)
 800571c:	f000 fbe6 	bl	8005eec <__assert_func>
 8005720:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005724:	6004      	str	r4, [r0, #0]
 8005726:	60c4      	str	r4, [r0, #12]
 8005728:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800572c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005730:	b94c      	cbnz	r4, 8005746 <__pow5mult+0x66>
 8005732:	f240 2171 	movw	r1, #625	@ 0x271
 8005736:	4638      	mov	r0, r7
 8005738:	f7ff ff14 	bl	8005564 <__i2b>
 800573c:	2300      	movs	r3, #0
 800573e:	4604      	mov	r4, r0
 8005740:	f8c8 0008 	str.w	r0, [r8, #8]
 8005744:	6003      	str	r3, [r0, #0]
 8005746:	f04f 0900 	mov.w	r9, #0
 800574a:	07eb      	lsls	r3, r5, #31
 800574c:	d50a      	bpl.n	8005764 <__pow5mult+0x84>
 800574e:	4631      	mov	r1, r6
 8005750:	4622      	mov	r2, r4
 8005752:	4638      	mov	r0, r7
 8005754:	f7ff ff1c 	bl	8005590 <__multiply>
 8005758:	4680      	mov	r8, r0
 800575a:	4631      	mov	r1, r6
 800575c:	4638      	mov	r0, r7
 800575e:	f7ff fe4d 	bl	80053fc <_Bfree>
 8005762:	4646      	mov	r6, r8
 8005764:	106d      	asrs	r5, r5, #1
 8005766:	d00b      	beq.n	8005780 <__pow5mult+0xa0>
 8005768:	6820      	ldr	r0, [r4, #0]
 800576a:	b938      	cbnz	r0, 800577c <__pow5mult+0x9c>
 800576c:	4622      	mov	r2, r4
 800576e:	4621      	mov	r1, r4
 8005770:	4638      	mov	r0, r7
 8005772:	f7ff ff0d 	bl	8005590 <__multiply>
 8005776:	6020      	str	r0, [r4, #0]
 8005778:	f8c0 9000 	str.w	r9, [r0]
 800577c:	4604      	mov	r4, r0
 800577e:	e7e4      	b.n	800574a <__pow5mult+0x6a>
 8005780:	4630      	mov	r0, r6
 8005782:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005786:	bf00      	nop
 8005788:	080066e0 	.word	0x080066e0
 800578c:	08006607 	.word	0x08006607
 8005790:	08006687 	.word	0x08006687

08005794 <__lshift>:
 8005794:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005798:	460c      	mov	r4, r1
 800579a:	4607      	mov	r7, r0
 800579c:	4691      	mov	r9, r2
 800579e:	6923      	ldr	r3, [r4, #16]
 80057a0:	6849      	ldr	r1, [r1, #4]
 80057a2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80057a6:	68a3      	ldr	r3, [r4, #8]
 80057a8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80057ac:	f108 0601 	add.w	r6, r8, #1
 80057b0:	42b3      	cmp	r3, r6
 80057b2:	db0b      	blt.n	80057cc <__lshift+0x38>
 80057b4:	4638      	mov	r0, r7
 80057b6:	f7ff fde1 	bl	800537c <_Balloc>
 80057ba:	4605      	mov	r5, r0
 80057bc:	b948      	cbnz	r0, 80057d2 <__lshift+0x3e>
 80057be:	4602      	mov	r2, r0
 80057c0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80057c4:	4b27      	ldr	r3, [pc, #156]	@ (8005864 <__lshift+0xd0>)
 80057c6:	4828      	ldr	r0, [pc, #160]	@ (8005868 <__lshift+0xd4>)
 80057c8:	f000 fb90 	bl	8005eec <__assert_func>
 80057cc:	3101      	adds	r1, #1
 80057ce:	005b      	lsls	r3, r3, #1
 80057d0:	e7ee      	b.n	80057b0 <__lshift+0x1c>
 80057d2:	2300      	movs	r3, #0
 80057d4:	f100 0114 	add.w	r1, r0, #20
 80057d8:	f100 0210 	add.w	r2, r0, #16
 80057dc:	4618      	mov	r0, r3
 80057de:	4553      	cmp	r3, sl
 80057e0:	db33      	blt.n	800584a <__lshift+0xb6>
 80057e2:	6920      	ldr	r0, [r4, #16]
 80057e4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80057e8:	f104 0314 	add.w	r3, r4, #20
 80057ec:	f019 091f 	ands.w	r9, r9, #31
 80057f0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80057f4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80057f8:	d02b      	beq.n	8005852 <__lshift+0xbe>
 80057fa:	468a      	mov	sl, r1
 80057fc:	2200      	movs	r2, #0
 80057fe:	f1c9 0e20 	rsb	lr, r9, #32
 8005802:	6818      	ldr	r0, [r3, #0]
 8005804:	fa00 f009 	lsl.w	r0, r0, r9
 8005808:	4310      	orrs	r0, r2
 800580a:	f84a 0b04 	str.w	r0, [sl], #4
 800580e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005812:	459c      	cmp	ip, r3
 8005814:	fa22 f20e 	lsr.w	r2, r2, lr
 8005818:	d8f3      	bhi.n	8005802 <__lshift+0x6e>
 800581a:	ebac 0304 	sub.w	r3, ip, r4
 800581e:	3b15      	subs	r3, #21
 8005820:	f023 0303 	bic.w	r3, r3, #3
 8005824:	3304      	adds	r3, #4
 8005826:	f104 0015 	add.w	r0, r4, #21
 800582a:	4584      	cmp	ip, r0
 800582c:	bf38      	it	cc
 800582e:	2304      	movcc	r3, #4
 8005830:	50ca      	str	r2, [r1, r3]
 8005832:	b10a      	cbz	r2, 8005838 <__lshift+0xa4>
 8005834:	f108 0602 	add.w	r6, r8, #2
 8005838:	3e01      	subs	r6, #1
 800583a:	4638      	mov	r0, r7
 800583c:	4621      	mov	r1, r4
 800583e:	612e      	str	r6, [r5, #16]
 8005840:	f7ff fddc 	bl	80053fc <_Bfree>
 8005844:	4628      	mov	r0, r5
 8005846:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800584a:	f842 0f04 	str.w	r0, [r2, #4]!
 800584e:	3301      	adds	r3, #1
 8005850:	e7c5      	b.n	80057de <__lshift+0x4a>
 8005852:	3904      	subs	r1, #4
 8005854:	f853 2b04 	ldr.w	r2, [r3], #4
 8005858:	459c      	cmp	ip, r3
 800585a:	f841 2f04 	str.w	r2, [r1, #4]!
 800585e:	d8f9      	bhi.n	8005854 <__lshift+0xc0>
 8005860:	e7ea      	b.n	8005838 <__lshift+0xa4>
 8005862:	bf00      	nop
 8005864:	08006676 	.word	0x08006676
 8005868:	08006687 	.word	0x08006687

0800586c <__mcmp>:
 800586c:	4603      	mov	r3, r0
 800586e:	690a      	ldr	r2, [r1, #16]
 8005870:	6900      	ldr	r0, [r0, #16]
 8005872:	b530      	push	{r4, r5, lr}
 8005874:	1a80      	subs	r0, r0, r2
 8005876:	d10e      	bne.n	8005896 <__mcmp+0x2a>
 8005878:	3314      	adds	r3, #20
 800587a:	3114      	adds	r1, #20
 800587c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005880:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005884:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005888:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800588c:	4295      	cmp	r5, r2
 800588e:	d003      	beq.n	8005898 <__mcmp+0x2c>
 8005890:	d205      	bcs.n	800589e <__mcmp+0x32>
 8005892:	f04f 30ff 	mov.w	r0, #4294967295
 8005896:	bd30      	pop	{r4, r5, pc}
 8005898:	42a3      	cmp	r3, r4
 800589a:	d3f3      	bcc.n	8005884 <__mcmp+0x18>
 800589c:	e7fb      	b.n	8005896 <__mcmp+0x2a>
 800589e:	2001      	movs	r0, #1
 80058a0:	e7f9      	b.n	8005896 <__mcmp+0x2a>
	...

080058a4 <__mdiff>:
 80058a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058a8:	4689      	mov	r9, r1
 80058aa:	4606      	mov	r6, r0
 80058ac:	4611      	mov	r1, r2
 80058ae:	4648      	mov	r0, r9
 80058b0:	4614      	mov	r4, r2
 80058b2:	f7ff ffdb 	bl	800586c <__mcmp>
 80058b6:	1e05      	subs	r5, r0, #0
 80058b8:	d112      	bne.n	80058e0 <__mdiff+0x3c>
 80058ba:	4629      	mov	r1, r5
 80058bc:	4630      	mov	r0, r6
 80058be:	f7ff fd5d 	bl	800537c <_Balloc>
 80058c2:	4602      	mov	r2, r0
 80058c4:	b928      	cbnz	r0, 80058d2 <__mdiff+0x2e>
 80058c6:	f240 2137 	movw	r1, #567	@ 0x237
 80058ca:	4b3e      	ldr	r3, [pc, #248]	@ (80059c4 <__mdiff+0x120>)
 80058cc:	483e      	ldr	r0, [pc, #248]	@ (80059c8 <__mdiff+0x124>)
 80058ce:	f000 fb0d 	bl	8005eec <__assert_func>
 80058d2:	2301      	movs	r3, #1
 80058d4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80058d8:	4610      	mov	r0, r2
 80058da:	b003      	add	sp, #12
 80058dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058e0:	bfbc      	itt	lt
 80058e2:	464b      	movlt	r3, r9
 80058e4:	46a1      	movlt	r9, r4
 80058e6:	4630      	mov	r0, r6
 80058e8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80058ec:	bfba      	itte	lt
 80058ee:	461c      	movlt	r4, r3
 80058f0:	2501      	movlt	r5, #1
 80058f2:	2500      	movge	r5, #0
 80058f4:	f7ff fd42 	bl	800537c <_Balloc>
 80058f8:	4602      	mov	r2, r0
 80058fa:	b918      	cbnz	r0, 8005904 <__mdiff+0x60>
 80058fc:	f240 2145 	movw	r1, #581	@ 0x245
 8005900:	4b30      	ldr	r3, [pc, #192]	@ (80059c4 <__mdiff+0x120>)
 8005902:	e7e3      	b.n	80058cc <__mdiff+0x28>
 8005904:	f100 0b14 	add.w	fp, r0, #20
 8005908:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800590c:	f109 0310 	add.w	r3, r9, #16
 8005910:	60c5      	str	r5, [r0, #12]
 8005912:	f04f 0c00 	mov.w	ip, #0
 8005916:	f109 0514 	add.w	r5, r9, #20
 800591a:	46d9      	mov	r9, fp
 800591c:	6926      	ldr	r6, [r4, #16]
 800591e:	f104 0e14 	add.w	lr, r4, #20
 8005922:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8005926:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800592a:	9301      	str	r3, [sp, #4]
 800592c:	9b01      	ldr	r3, [sp, #4]
 800592e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8005932:	f853 af04 	ldr.w	sl, [r3, #4]!
 8005936:	b281      	uxth	r1, r0
 8005938:	9301      	str	r3, [sp, #4]
 800593a:	fa1f f38a 	uxth.w	r3, sl
 800593e:	1a5b      	subs	r3, r3, r1
 8005940:	0c00      	lsrs	r0, r0, #16
 8005942:	4463      	add	r3, ip
 8005944:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8005948:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800594c:	b29b      	uxth	r3, r3
 800594e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8005952:	4576      	cmp	r6, lr
 8005954:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005958:	f849 3b04 	str.w	r3, [r9], #4
 800595c:	d8e6      	bhi.n	800592c <__mdiff+0x88>
 800595e:	1b33      	subs	r3, r6, r4
 8005960:	3b15      	subs	r3, #21
 8005962:	f023 0303 	bic.w	r3, r3, #3
 8005966:	3415      	adds	r4, #21
 8005968:	3304      	adds	r3, #4
 800596a:	42a6      	cmp	r6, r4
 800596c:	bf38      	it	cc
 800596e:	2304      	movcc	r3, #4
 8005970:	441d      	add	r5, r3
 8005972:	445b      	add	r3, fp
 8005974:	461e      	mov	r6, r3
 8005976:	462c      	mov	r4, r5
 8005978:	4544      	cmp	r4, r8
 800597a:	d30e      	bcc.n	800599a <__mdiff+0xf6>
 800597c:	f108 0103 	add.w	r1, r8, #3
 8005980:	1b49      	subs	r1, r1, r5
 8005982:	f021 0103 	bic.w	r1, r1, #3
 8005986:	3d03      	subs	r5, #3
 8005988:	45a8      	cmp	r8, r5
 800598a:	bf38      	it	cc
 800598c:	2100      	movcc	r1, #0
 800598e:	440b      	add	r3, r1
 8005990:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8005994:	b199      	cbz	r1, 80059be <__mdiff+0x11a>
 8005996:	6117      	str	r7, [r2, #16]
 8005998:	e79e      	b.n	80058d8 <__mdiff+0x34>
 800599a:	46e6      	mov	lr, ip
 800599c:	f854 1b04 	ldr.w	r1, [r4], #4
 80059a0:	fa1f fc81 	uxth.w	ip, r1
 80059a4:	44f4      	add	ip, lr
 80059a6:	0c08      	lsrs	r0, r1, #16
 80059a8:	4471      	add	r1, lr
 80059aa:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80059ae:	b289      	uxth	r1, r1
 80059b0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80059b4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80059b8:	f846 1b04 	str.w	r1, [r6], #4
 80059bc:	e7dc      	b.n	8005978 <__mdiff+0xd4>
 80059be:	3f01      	subs	r7, #1
 80059c0:	e7e6      	b.n	8005990 <__mdiff+0xec>
 80059c2:	bf00      	nop
 80059c4:	08006676 	.word	0x08006676
 80059c8:	08006687 	.word	0x08006687

080059cc <__d2b>:
 80059cc:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 80059d0:	2101      	movs	r1, #1
 80059d2:	4690      	mov	r8, r2
 80059d4:	4699      	mov	r9, r3
 80059d6:	9e08      	ldr	r6, [sp, #32]
 80059d8:	f7ff fcd0 	bl	800537c <_Balloc>
 80059dc:	4604      	mov	r4, r0
 80059de:	b930      	cbnz	r0, 80059ee <__d2b+0x22>
 80059e0:	4602      	mov	r2, r0
 80059e2:	f240 310f 	movw	r1, #783	@ 0x30f
 80059e6:	4b23      	ldr	r3, [pc, #140]	@ (8005a74 <__d2b+0xa8>)
 80059e8:	4823      	ldr	r0, [pc, #140]	@ (8005a78 <__d2b+0xac>)
 80059ea:	f000 fa7f 	bl	8005eec <__assert_func>
 80059ee:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80059f2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80059f6:	b10d      	cbz	r5, 80059fc <__d2b+0x30>
 80059f8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80059fc:	9301      	str	r3, [sp, #4]
 80059fe:	f1b8 0300 	subs.w	r3, r8, #0
 8005a02:	d024      	beq.n	8005a4e <__d2b+0x82>
 8005a04:	4668      	mov	r0, sp
 8005a06:	9300      	str	r3, [sp, #0]
 8005a08:	f7ff fd7f 	bl	800550a <__lo0bits>
 8005a0c:	e9dd 1200 	ldrd	r1, r2, [sp]
 8005a10:	b1d8      	cbz	r0, 8005a4a <__d2b+0x7e>
 8005a12:	f1c0 0320 	rsb	r3, r0, #32
 8005a16:	fa02 f303 	lsl.w	r3, r2, r3
 8005a1a:	430b      	orrs	r3, r1
 8005a1c:	40c2      	lsrs	r2, r0
 8005a1e:	6163      	str	r3, [r4, #20]
 8005a20:	9201      	str	r2, [sp, #4]
 8005a22:	9b01      	ldr	r3, [sp, #4]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	bf0c      	ite	eq
 8005a28:	2201      	moveq	r2, #1
 8005a2a:	2202      	movne	r2, #2
 8005a2c:	61a3      	str	r3, [r4, #24]
 8005a2e:	6122      	str	r2, [r4, #16]
 8005a30:	b1ad      	cbz	r5, 8005a5e <__d2b+0x92>
 8005a32:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8005a36:	4405      	add	r5, r0
 8005a38:	6035      	str	r5, [r6, #0]
 8005a3a:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8005a3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005a40:	6018      	str	r0, [r3, #0]
 8005a42:	4620      	mov	r0, r4
 8005a44:	b002      	add	sp, #8
 8005a46:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8005a4a:	6161      	str	r1, [r4, #20]
 8005a4c:	e7e9      	b.n	8005a22 <__d2b+0x56>
 8005a4e:	a801      	add	r0, sp, #4
 8005a50:	f7ff fd5b 	bl	800550a <__lo0bits>
 8005a54:	9b01      	ldr	r3, [sp, #4]
 8005a56:	2201      	movs	r2, #1
 8005a58:	6163      	str	r3, [r4, #20]
 8005a5a:	3020      	adds	r0, #32
 8005a5c:	e7e7      	b.n	8005a2e <__d2b+0x62>
 8005a5e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8005a62:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005a66:	6030      	str	r0, [r6, #0]
 8005a68:	6918      	ldr	r0, [r3, #16]
 8005a6a:	f7ff fd2f 	bl	80054cc <__hi0bits>
 8005a6e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005a72:	e7e4      	b.n	8005a3e <__d2b+0x72>
 8005a74:	08006676 	.word	0x08006676
 8005a78:	08006687 	.word	0x08006687

08005a7c <__ssputs_r>:
 8005a7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a80:	461f      	mov	r7, r3
 8005a82:	688e      	ldr	r6, [r1, #8]
 8005a84:	4682      	mov	sl, r0
 8005a86:	42be      	cmp	r6, r7
 8005a88:	460c      	mov	r4, r1
 8005a8a:	4690      	mov	r8, r2
 8005a8c:	680b      	ldr	r3, [r1, #0]
 8005a8e:	d82d      	bhi.n	8005aec <__ssputs_r+0x70>
 8005a90:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005a94:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005a98:	d026      	beq.n	8005ae8 <__ssputs_r+0x6c>
 8005a9a:	6965      	ldr	r5, [r4, #20]
 8005a9c:	6909      	ldr	r1, [r1, #16]
 8005a9e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005aa2:	eba3 0901 	sub.w	r9, r3, r1
 8005aa6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005aaa:	1c7b      	adds	r3, r7, #1
 8005aac:	444b      	add	r3, r9
 8005aae:	106d      	asrs	r5, r5, #1
 8005ab0:	429d      	cmp	r5, r3
 8005ab2:	bf38      	it	cc
 8005ab4:	461d      	movcc	r5, r3
 8005ab6:	0553      	lsls	r3, r2, #21
 8005ab8:	d527      	bpl.n	8005b0a <__ssputs_r+0x8e>
 8005aba:	4629      	mov	r1, r5
 8005abc:	f7ff fbd2 	bl	8005264 <_malloc_r>
 8005ac0:	4606      	mov	r6, r0
 8005ac2:	b360      	cbz	r0, 8005b1e <__ssputs_r+0xa2>
 8005ac4:	464a      	mov	r2, r9
 8005ac6:	6921      	ldr	r1, [r4, #16]
 8005ac8:	f000 fa02 	bl	8005ed0 <memcpy>
 8005acc:	89a3      	ldrh	r3, [r4, #12]
 8005ace:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005ad2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005ad6:	81a3      	strh	r3, [r4, #12]
 8005ad8:	6126      	str	r6, [r4, #16]
 8005ada:	444e      	add	r6, r9
 8005adc:	6026      	str	r6, [r4, #0]
 8005ade:	463e      	mov	r6, r7
 8005ae0:	6165      	str	r5, [r4, #20]
 8005ae2:	eba5 0509 	sub.w	r5, r5, r9
 8005ae6:	60a5      	str	r5, [r4, #8]
 8005ae8:	42be      	cmp	r6, r7
 8005aea:	d900      	bls.n	8005aee <__ssputs_r+0x72>
 8005aec:	463e      	mov	r6, r7
 8005aee:	4632      	mov	r2, r6
 8005af0:	4641      	mov	r1, r8
 8005af2:	6820      	ldr	r0, [r4, #0]
 8005af4:	f000 f9c2 	bl	8005e7c <memmove>
 8005af8:	2000      	movs	r0, #0
 8005afa:	68a3      	ldr	r3, [r4, #8]
 8005afc:	1b9b      	subs	r3, r3, r6
 8005afe:	60a3      	str	r3, [r4, #8]
 8005b00:	6823      	ldr	r3, [r4, #0]
 8005b02:	4433      	add	r3, r6
 8005b04:	6023      	str	r3, [r4, #0]
 8005b06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b0a:	462a      	mov	r2, r5
 8005b0c:	f000 fa32 	bl	8005f74 <_realloc_r>
 8005b10:	4606      	mov	r6, r0
 8005b12:	2800      	cmp	r0, #0
 8005b14:	d1e0      	bne.n	8005ad8 <__ssputs_r+0x5c>
 8005b16:	4650      	mov	r0, sl
 8005b18:	6921      	ldr	r1, [r4, #16]
 8005b1a:	f7ff fb31 	bl	8005180 <_free_r>
 8005b1e:	230c      	movs	r3, #12
 8005b20:	f8ca 3000 	str.w	r3, [sl]
 8005b24:	89a3      	ldrh	r3, [r4, #12]
 8005b26:	f04f 30ff 	mov.w	r0, #4294967295
 8005b2a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005b2e:	81a3      	strh	r3, [r4, #12]
 8005b30:	e7e9      	b.n	8005b06 <__ssputs_r+0x8a>
	...

08005b34 <_svfiprintf_r>:
 8005b34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b38:	4698      	mov	r8, r3
 8005b3a:	898b      	ldrh	r3, [r1, #12]
 8005b3c:	4607      	mov	r7, r0
 8005b3e:	061b      	lsls	r3, r3, #24
 8005b40:	460d      	mov	r5, r1
 8005b42:	4614      	mov	r4, r2
 8005b44:	b09d      	sub	sp, #116	@ 0x74
 8005b46:	d510      	bpl.n	8005b6a <_svfiprintf_r+0x36>
 8005b48:	690b      	ldr	r3, [r1, #16]
 8005b4a:	b973      	cbnz	r3, 8005b6a <_svfiprintf_r+0x36>
 8005b4c:	2140      	movs	r1, #64	@ 0x40
 8005b4e:	f7ff fb89 	bl	8005264 <_malloc_r>
 8005b52:	6028      	str	r0, [r5, #0]
 8005b54:	6128      	str	r0, [r5, #16]
 8005b56:	b930      	cbnz	r0, 8005b66 <_svfiprintf_r+0x32>
 8005b58:	230c      	movs	r3, #12
 8005b5a:	603b      	str	r3, [r7, #0]
 8005b5c:	f04f 30ff 	mov.w	r0, #4294967295
 8005b60:	b01d      	add	sp, #116	@ 0x74
 8005b62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b66:	2340      	movs	r3, #64	@ 0x40
 8005b68:	616b      	str	r3, [r5, #20]
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	9309      	str	r3, [sp, #36]	@ 0x24
 8005b6e:	2320      	movs	r3, #32
 8005b70:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005b74:	2330      	movs	r3, #48	@ 0x30
 8005b76:	f04f 0901 	mov.w	r9, #1
 8005b7a:	f8cd 800c 	str.w	r8, [sp, #12]
 8005b7e:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8005d18 <_svfiprintf_r+0x1e4>
 8005b82:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005b86:	4623      	mov	r3, r4
 8005b88:	469a      	mov	sl, r3
 8005b8a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005b8e:	b10a      	cbz	r2, 8005b94 <_svfiprintf_r+0x60>
 8005b90:	2a25      	cmp	r2, #37	@ 0x25
 8005b92:	d1f9      	bne.n	8005b88 <_svfiprintf_r+0x54>
 8005b94:	ebba 0b04 	subs.w	fp, sl, r4
 8005b98:	d00b      	beq.n	8005bb2 <_svfiprintf_r+0x7e>
 8005b9a:	465b      	mov	r3, fp
 8005b9c:	4622      	mov	r2, r4
 8005b9e:	4629      	mov	r1, r5
 8005ba0:	4638      	mov	r0, r7
 8005ba2:	f7ff ff6b 	bl	8005a7c <__ssputs_r>
 8005ba6:	3001      	adds	r0, #1
 8005ba8:	f000 80a7 	beq.w	8005cfa <_svfiprintf_r+0x1c6>
 8005bac:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005bae:	445a      	add	r2, fp
 8005bb0:	9209      	str	r2, [sp, #36]	@ 0x24
 8005bb2:	f89a 3000 	ldrb.w	r3, [sl]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	f000 809f 	beq.w	8005cfa <_svfiprintf_r+0x1c6>
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	f04f 32ff 	mov.w	r2, #4294967295
 8005bc2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005bc6:	f10a 0a01 	add.w	sl, sl, #1
 8005bca:	9304      	str	r3, [sp, #16]
 8005bcc:	9307      	str	r3, [sp, #28]
 8005bce:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005bd2:	931a      	str	r3, [sp, #104]	@ 0x68
 8005bd4:	4654      	mov	r4, sl
 8005bd6:	2205      	movs	r2, #5
 8005bd8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005bdc:	484e      	ldr	r0, [pc, #312]	@ (8005d18 <_svfiprintf_r+0x1e4>)
 8005bde:	f7fe fc70 	bl	80044c2 <memchr>
 8005be2:	9a04      	ldr	r2, [sp, #16]
 8005be4:	b9d8      	cbnz	r0, 8005c1e <_svfiprintf_r+0xea>
 8005be6:	06d0      	lsls	r0, r2, #27
 8005be8:	bf44      	itt	mi
 8005bea:	2320      	movmi	r3, #32
 8005bec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005bf0:	0711      	lsls	r1, r2, #28
 8005bf2:	bf44      	itt	mi
 8005bf4:	232b      	movmi	r3, #43	@ 0x2b
 8005bf6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005bfa:	f89a 3000 	ldrb.w	r3, [sl]
 8005bfe:	2b2a      	cmp	r3, #42	@ 0x2a
 8005c00:	d015      	beq.n	8005c2e <_svfiprintf_r+0xfa>
 8005c02:	4654      	mov	r4, sl
 8005c04:	2000      	movs	r0, #0
 8005c06:	f04f 0c0a 	mov.w	ip, #10
 8005c0a:	9a07      	ldr	r2, [sp, #28]
 8005c0c:	4621      	mov	r1, r4
 8005c0e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005c12:	3b30      	subs	r3, #48	@ 0x30
 8005c14:	2b09      	cmp	r3, #9
 8005c16:	d94b      	bls.n	8005cb0 <_svfiprintf_r+0x17c>
 8005c18:	b1b0      	cbz	r0, 8005c48 <_svfiprintf_r+0x114>
 8005c1a:	9207      	str	r2, [sp, #28]
 8005c1c:	e014      	b.n	8005c48 <_svfiprintf_r+0x114>
 8005c1e:	eba0 0308 	sub.w	r3, r0, r8
 8005c22:	fa09 f303 	lsl.w	r3, r9, r3
 8005c26:	4313      	orrs	r3, r2
 8005c28:	46a2      	mov	sl, r4
 8005c2a:	9304      	str	r3, [sp, #16]
 8005c2c:	e7d2      	b.n	8005bd4 <_svfiprintf_r+0xa0>
 8005c2e:	9b03      	ldr	r3, [sp, #12]
 8005c30:	1d19      	adds	r1, r3, #4
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	9103      	str	r1, [sp, #12]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	bfbb      	ittet	lt
 8005c3a:	425b      	neglt	r3, r3
 8005c3c:	f042 0202 	orrlt.w	r2, r2, #2
 8005c40:	9307      	strge	r3, [sp, #28]
 8005c42:	9307      	strlt	r3, [sp, #28]
 8005c44:	bfb8      	it	lt
 8005c46:	9204      	strlt	r2, [sp, #16]
 8005c48:	7823      	ldrb	r3, [r4, #0]
 8005c4a:	2b2e      	cmp	r3, #46	@ 0x2e
 8005c4c:	d10a      	bne.n	8005c64 <_svfiprintf_r+0x130>
 8005c4e:	7863      	ldrb	r3, [r4, #1]
 8005c50:	2b2a      	cmp	r3, #42	@ 0x2a
 8005c52:	d132      	bne.n	8005cba <_svfiprintf_r+0x186>
 8005c54:	9b03      	ldr	r3, [sp, #12]
 8005c56:	3402      	adds	r4, #2
 8005c58:	1d1a      	adds	r2, r3, #4
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	9203      	str	r2, [sp, #12]
 8005c5e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005c62:	9305      	str	r3, [sp, #20]
 8005c64:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8005d1c <_svfiprintf_r+0x1e8>
 8005c68:	2203      	movs	r2, #3
 8005c6a:	4650      	mov	r0, sl
 8005c6c:	7821      	ldrb	r1, [r4, #0]
 8005c6e:	f7fe fc28 	bl	80044c2 <memchr>
 8005c72:	b138      	cbz	r0, 8005c84 <_svfiprintf_r+0x150>
 8005c74:	2240      	movs	r2, #64	@ 0x40
 8005c76:	9b04      	ldr	r3, [sp, #16]
 8005c78:	eba0 000a 	sub.w	r0, r0, sl
 8005c7c:	4082      	lsls	r2, r0
 8005c7e:	4313      	orrs	r3, r2
 8005c80:	3401      	adds	r4, #1
 8005c82:	9304      	str	r3, [sp, #16]
 8005c84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c88:	2206      	movs	r2, #6
 8005c8a:	4825      	ldr	r0, [pc, #148]	@ (8005d20 <_svfiprintf_r+0x1ec>)
 8005c8c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005c90:	f7fe fc17 	bl	80044c2 <memchr>
 8005c94:	2800      	cmp	r0, #0
 8005c96:	d036      	beq.n	8005d06 <_svfiprintf_r+0x1d2>
 8005c98:	4b22      	ldr	r3, [pc, #136]	@ (8005d24 <_svfiprintf_r+0x1f0>)
 8005c9a:	bb1b      	cbnz	r3, 8005ce4 <_svfiprintf_r+0x1b0>
 8005c9c:	9b03      	ldr	r3, [sp, #12]
 8005c9e:	3307      	adds	r3, #7
 8005ca0:	f023 0307 	bic.w	r3, r3, #7
 8005ca4:	3308      	adds	r3, #8
 8005ca6:	9303      	str	r3, [sp, #12]
 8005ca8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005caa:	4433      	add	r3, r6
 8005cac:	9309      	str	r3, [sp, #36]	@ 0x24
 8005cae:	e76a      	b.n	8005b86 <_svfiprintf_r+0x52>
 8005cb0:	460c      	mov	r4, r1
 8005cb2:	2001      	movs	r0, #1
 8005cb4:	fb0c 3202 	mla	r2, ip, r2, r3
 8005cb8:	e7a8      	b.n	8005c0c <_svfiprintf_r+0xd8>
 8005cba:	2300      	movs	r3, #0
 8005cbc:	f04f 0c0a 	mov.w	ip, #10
 8005cc0:	4619      	mov	r1, r3
 8005cc2:	3401      	adds	r4, #1
 8005cc4:	9305      	str	r3, [sp, #20]
 8005cc6:	4620      	mov	r0, r4
 8005cc8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005ccc:	3a30      	subs	r2, #48	@ 0x30
 8005cce:	2a09      	cmp	r2, #9
 8005cd0:	d903      	bls.n	8005cda <_svfiprintf_r+0x1a6>
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d0c6      	beq.n	8005c64 <_svfiprintf_r+0x130>
 8005cd6:	9105      	str	r1, [sp, #20]
 8005cd8:	e7c4      	b.n	8005c64 <_svfiprintf_r+0x130>
 8005cda:	4604      	mov	r4, r0
 8005cdc:	2301      	movs	r3, #1
 8005cde:	fb0c 2101 	mla	r1, ip, r1, r2
 8005ce2:	e7f0      	b.n	8005cc6 <_svfiprintf_r+0x192>
 8005ce4:	ab03      	add	r3, sp, #12
 8005ce6:	9300      	str	r3, [sp, #0]
 8005ce8:	462a      	mov	r2, r5
 8005cea:	4638      	mov	r0, r7
 8005cec:	4b0e      	ldr	r3, [pc, #56]	@ (8005d28 <_svfiprintf_r+0x1f4>)
 8005cee:	a904      	add	r1, sp, #16
 8005cf0:	f7fd fe84 	bl	80039fc <_printf_float>
 8005cf4:	1c42      	adds	r2, r0, #1
 8005cf6:	4606      	mov	r6, r0
 8005cf8:	d1d6      	bne.n	8005ca8 <_svfiprintf_r+0x174>
 8005cfa:	89ab      	ldrh	r3, [r5, #12]
 8005cfc:	065b      	lsls	r3, r3, #25
 8005cfe:	f53f af2d 	bmi.w	8005b5c <_svfiprintf_r+0x28>
 8005d02:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005d04:	e72c      	b.n	8005b60 <_svfiprintf_r+0x2c>
 8005d06:	ab03      	add	r3, sp, #12
 8005d08:	9300      	str	r3, [sp, #0]
 8005d0a:	462a      	mov	r2, r5
 8005d0c:	4638      	mov	r0, r7
 8005d0e:	4b06      	ldr	r3, [pc, #24]	@ (8005d28 <_svfiprintf_r+0x1f4>)
 8005d10:	a904      	add	r1, sp, #16
 8005d12:	f7fe f911 	bl	8003f38 <_printf_i>
 8005d16:	e7ed      	b.n	8005cf4 <_svfiprintf_r+0x1c0>
 8005d18:	080067e0 	.word	0x080067e0
 8005d1c:	080067e6 	.word	0x080067e6
 8005d20:	080067ea 	.word	0x080067ea
 8005d24:	080039fd 	.word	0x080039fd
 8005d28:	08005a7d 	.word	0x08005a7d

08005d2c <__sflush_r>:
 8005d2c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d32:	0716      	lsls	r6, r2, #28
 8005d34:	4605      	mov	r5, r0
 8005d36:	460c      	mov	r4, r1
 8005d38:	d454      	bmi.n	8005de4 <__sflush_r+0xb8>
 8005d3a:	684b      	ldr	r3, [r1, #4]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	dc02      	bgt.n	8005d46 <__sflush_r+0x1a>
 8005d40:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	dd48      	ble.n	8005dd8 <__sflush_r+0xac>
 8005d46:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005d48:	2e00      	cmp	r6, #0
 8005d4a:	d045      	beq.n	8005dd8 <__sflush_r+0xac>
 8005d4c:	2300      	movs	r3, #0
 8005d4e:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005d52:	682f      	ldr	r7, [r5, #0]
 8005d54:	6a21      	ldr	r1, [r4, #32]
 8005d56:	602b      	str	r3, [r5, #0]
 8005d58:	d030      	beq.n	8005dbc <__sflush_r+0x90>
 8005d5a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005d5c:	89a3      	ldrh	r3, [r4, #12]
 8005d5e:	0759      	lsls	r1, r3, #29
 8005d60:	d505      	bpl.n	8005d6e <__sflush_r+0x42>
 8005d62:	6863      	ldr	r3, [r4, #4]
 8005d64:	1ad2      	subs	r2, r2, r3
 8005d66:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005d68:	b10b      	cbz	r3, 8005d6e <__sflush_r+0x42>
 8005d6a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005d6c:	1ad2      	subs	r2, r2, r3
 8005d6e:	2300      	movs	r3, #0
 8005d70:	4628      	mov	r0, r5
 8005d72:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005d74:	6a21      	ldr	r1, [r4, #32]
 8005d76:	47b0      	blx	r6
 8005d78:	1c43      	adds	r3, r0, #1
 8005d7a:	89a3      	ldrh	r3, [r4, #12]
 8005d7c:	d106      	bne.n	8005d8c <__sflush_r+0x60>
 8005d7e:	6829      	ldr	r1, [r5, #0]
 8005d80:	291d      	cmp	r1, #29
 8005d82:	d82b      	bhi.n	8005ddc <__sflush_r+0xb0>
 8005d84:	4a28      	ldr	r2, [pc, #160]	@ (8005e28 <__sflush_r+0xfc>)
 8005d86:	410a      	asrs	r2, r1
 8005d88:	07d6      	lsls	r6, r2, #31
 8005d8a:	d427      	bmi.n	8005ddc <__sflush_r+0xb0>
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	6062      	str	r2, [r4, #4]
 8005d90:	6922      	ldr	r2, [r4, #16]
 8005d92:	04d9      	lsls	r1, r3, #19
 8005d94:	6022      	str	r2, [r4, #0]
 8005d96:	d504      	bpl.n	8005da2 <__sflush_r+0x76>
 8005d98:	1c42      	adds	r2, r0, #1
 8005d9a:	d101      	bne.n	8005da0 <__sflush_r+0x74>
 8005d9c:	682b      	ldr	r3, [r5, #0]
 8005d9e:	b903      	cbnz	r3, 8005da2 <__sflush_r+0x76>
 8005da0:	6560      	str	r0, [r4, #84]	@ 0x54
 8005da2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005da4:	602f      	str	r7, [r5, #0]
 8005da6:	b1b9      	cbz	r1, 8005dd8 <__sflush_r+0xac>
 8005da8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005dac:	4299      	cmp	r1, r3
 8005dae:	d002      	beq.n	8005db6 <__sflush_r+0x8a>
 8005db0:	4628      	mov	r0, r5
 8005db2:	f7ff f9e5 	bl	8005180 <_free_r>
 8005db6:	2300      	movs	r3, #0
 8005db8:	6363      	str	r3, [r4, #52]	@ 0x34
 8005dba:	e00d      	b.n	8005dd8 <__sflush_r+0xac>
 8005dbc:	2301      	movs	r3, #1
 8005dbe:	4628      	mov	r0, r5
 8005dc0:	47b0      	blx	r6
 8005dc2:	4602      	mov	r2, r0
 8005dc4:	1c50      	adds	r0, r2, #1
 8005dc6:	d1c9      	bne.n	8005d5c <__sflush_r+0x30>
 8005dc8:	682b      	ldr	r3, [r5, #0]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d0c6      	beq.n	8005d5c <__sflush_r+0x30>
 8005dce:	2b1d      	cmp	r3, #29
 8005dd0:	d001      	beq.n	8005dd6 <__sflush_r+0xaa>
 8005dd2:	2b16      	cmp	r3, #22
 8005dd4:	d11d      	bne.n	8005e12 <__sflush_r+0xe6>
 8005dd6:	602f      	str	r7, [r5, #0]
 8005dd8:	2000      	movs	r0, #0
 8005dda:	e021      	b.n	8005e20 <__sflush_r+0xf4>
 8005ddc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005de0:	b21b      	sxth	r3, r3
 8005de2:	e01a      	b.n	8005e1a <__sflush_r+0xee>
 8005de4:	690f      	ldr	r7, [r1, #16]
 8005de6:	2f00      	cmp	r7, #0
 8005de8:	d0f6      	beq.n	8005dd8 <__sflush_r+0xac>
 8005dea:	0793      	lsls	r3, r2, #30
 8005dec:	bf18      	it	ne
 8005dee:	2300      	movne	r3, #0
 8005df0:	680e      	ldr	r6, [r1, #0]
 8005df2:	bf08      	it	eq
 8005df4:	694b      	ldreq	r3, [r1, #20]
 8005df6:	1bf6      	subs	r6, r6, r7
 8005df8:	600f      	str	r7, [r1, #0]
 8005dfa:	608b      	str	r3, [r1, #8]
 8005dfc:	2e00      	cmp	r6, #0
 8005dfe:	ddeb      	ble.n	8005dd8 <__sflush_r+0xac>
 8005e00:	4633      	mov	r3, r6
 8005e02:	463a      	mov	r2, r7
 8005e04:	4628      	mov	r0, r5
 8005e06:	6a21      	ldr	r1, [r4, #32]
 8005e08:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8005e0c:	47e0      	blx	ip
 8005e0e:	2800      	cmp	r0, #0
 8005e10:	dc07      	bgt.n	8005e22 <__sflush_r+0xf6>
 8005e12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005e16:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005e1a:	f04f 30ff 	mov.w	r0, #4294967295
 8005e1e:	81a3      	strh	r3, [r4, #12]
 8005e20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005e22:	4407      	add	r7, r0
 8005e24:	1a36      	subs	r6, r6, r0
 8005e26:	e7e9      	b.n	8005dfc <__sflush_r+0xd0>
 8005e28:	dfbffffe 	.word	0xdfbffffe

08005e2c <_fflush_r>:
 8005e2c:	b538      	push	{r3, r4, r5, lr}
 8005e2e:	690b      	ldr	r3, [r1, #16]
 8005e30:	4605      	mov	r5, r0
 8005e32:	460c      	mov	r4, r1
 8005e34:	b913      	cbnz	r3, 8005e3c <_fflush_r+0x10>
 8005e36:	2500      	movs	r5, #0
 8005e38:	4628      	mov	r0, r5
 8005e3a:	bd38      	pop	{r3, r4, r5, pc}
 8005e3c:	b118      	cbz	r0, 8005e46 <_fflush_r+0x1a>
 8005e3e:	6a03      	ldr	r3, [r0, #32]
 8005e40:	b90b      	cbnz	r3, 8005e46 <_fflush_r+0x1a>
 8005e42:	f7fe fa25 	bl	8004290 <__sinit>
 8005e46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d0f3      	beq.n	8005e36 <_fflush_r+0xa>
 8005e4e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005e50:	07d0      	lsls	r0, r2, #31
 8005e52:	d404      	bmi.n	8005e5e <_fflush_r+0x32>
 8005e54:	0599      	lsls	r1, r3, #22
 8005e56:	d402      	bmi.n	8005e5e <_fflush_r+0x32>
 8005e58:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005e5a:	f7fe fb30 	bl	80044be <__retarget_lock_acquire_recursive>
 8005e5e:	4628      	mov	r0, r5
 8005e60:	4621      	mov	r1, r4
 8005e62:	f7ff ff63 	bl	8005d2c <__sflush_r>
 8005e66:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005e68:	4605      	mov	r5, r0
 8005e6a:	07da      	lsls	r2, r3, #31
 8005e6c:	d4e4      	bmi.n	8005e38 <_fflush_r+0xc>
 8005e6e:	89a3      	ldrh	r3, [r4, #12]
 8005e70:	059b      	lsls	r3, r3, #22
 8005e72:	d4e1      	bmi.n	8005e38 <_fflush_r+0xc>
 8005e74:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005e76:	f7fe fb23 	bl	80044c0 <__retarget_lock_release_recursive>
 8005e7a:	e7dd      	b.n	8005e38 <_fflush_r+0xc>

08005e7c <memmove>:
 8005e7c:	4288      	cmp	r0, r1
 8005e7e:	b510      	push	{r4, lr}
 8005e80:	eb01 0402 	add.w	r4, r1, r2
 8005e84:	d902      	bls.n	8005e8c <memmove+0x10>
 8005e86:	4284      	cmp	r4, r0
 8005e88:	4623      	mov	r3, r4
 8005e8a:	d807      	bhi.n	8005e9c <memmove+0x20>
 8005e8c:	1e43      	subs	r3, r0, #1
 8005e8e:	42a1      	cmp	r1, r4
 8005e90:	d008      	beq.n	8005ea4 <memmove+0x28>
 8005e92:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005e96:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005e9a:	e7f8      	b.n	8005e8e <memmove+0x12>
 8005e9c:	4601      	mov	r1, r0
 8005e9e:	4402      	add	r2, r0
 8005ea0:	428a      	cmp	r2, r1
 8005ea2:	d100      	bne.n	8005ea6 <memmove+0x2a>
 8005ea4:	bd10      	pop	{r4, pc}
 8005ea6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005eaa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005eae:	e7f7      	b.n	8005ea0 <memmove+0x24>

08005eb0 <_sbrk_r>:
 8005eb0:	b538      	push	{r3, r4, r5, lr}
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	4d05      	ldr	r5, [pc, #20]	@ (8005ecc <_sbrk_r+0x1c>)
 8005eb6:	4604      	mov	r4, r0
 8005eb8:	4608      	mov	r0, r1
 8005eba:	602b      	str	r3, [r5, #0]
 8005ebc:	f7fb fb44 	bl	8001548 <_sbrk>
 8005ec0:	1c43      	adds	r3, r0, #1
 8005ec2:	d102      	bne.n	8005eca <_sbrk_r+0x1a>
 8005ec4:	682b      	ldr	r3, [r5, #0]
 8005ec6:	b103      	cbz	r3, 8005eca <_sbrk_r+0x1a>
 8005ec8:	6023      	str	r3, [r4, #0]
 8005eca:	bd38      	pop	{r3, r4, r5, pc}
 8005ecc:	200003f4 	.word	0x200003f4

08005ed0 <memcpy>:
 8005ed0:	440a      	add	r2, r1
 8005ed2:	4291      	cmp	r1, r2
 8005ed4:	f100 33ff 	add.w	r3, r0, #4294967295
 8005ed8:	d100      	bne.n	8005edc <memcpy+0xc>
 8005eda:	4770      	bx	lr
 8005edc:	b510      	push	{r4, lr}
 8005ede:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005ee2:	4291      	cmp	r1, r2
 8005ee4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005ee8:	d1f9      	bne.n	8005ede <memcpy+0xe>
 8005eea:	bd10      	pop	{r4, pc}

08005eec <__assert_func>:
 8005eec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005eee:	4614      	mov	r4, r2
 8005ef0:	461a      	mov	r2, r3
 8005ef2:	4b09      	ldr	r3, [pc, #36]	@ (8005f18 <__assert_func+0x2c>)
 8005ef4:	4605      	mov	r5, r0
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	68d8      	ldr	r0, [r3, #12]
 8005efa:	b954      	cbnz	r4, 8005f12 <__assert_func+0x26>
 8005efc:	4b07      	ldr	r3, [pc, #28]	@ (8005f1c <__assert_func+0x30>)
 8005efe:	461c      	mov	r4, r3
 8005f00:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005f04:	9100      	str	r1, [sp, #0]
 8005f06:	462b      	mov	r3, r5
 8005f08:	4905      	ldr	r1, [pc, #20]	@ (8005f20 <__assert_func+0x34>)
 8005f0a:	f000 f86f 	bl	8005fec <fiprintf>
 8005f0e:	f000 f87f 	bl	8006010 <abort>
 8005f12:	4b04      	ldr	r3, [pc, #16]	@ (8005f24 <__assert_func+0x38>)
 8005f14:	e7f4      	b.n	8005f00 <__assert_func+0x14>
 8005f16:	bf00      	nop
 8005f18:	20000018 	.word	0x20000018
 8005f1c:	08006836 	.word	0x08006836
 8005f20:	08006808 	.word	0x08006808
 8005f24:	080067fb 	.word	0x080067fb

08005f28 <_calloc_r>:
 8005f28:	b570      	push	{r4, r5, r6, lr}
 8005f2a:	fba1 5402 	umull	r5, r4, r1, r2
 8005f2e:	b93c      	cbnz	r4, 8005f40 <_calloc_r+0x18>
 8005f30:	4629      	mov	r1, r5
 8005f32:	f7ff f997 	bl	8005264 <_malloc_r>
 8005f36:	4606      	mov	r6, r0
 8005f38:	b928      	cbnz	r0, 8005f46 <_calloc_r+0x1e>
 8005f3a:	2600      	movs	r6, #0
 8005f3c:	4630      	mov	r0, r6
 8005f3e:	bd70      	pop	{r4, r5, r6, pc}
 8005f40:	220c      	movs	r2, #12
 8005f42:	6002      	str	r2, [r0, #0]
 8005f44:	e7f9      	b.n	8005f3a <_calloc_r+0x12>
 8005f46:	462a      	mov	r2, r5
 8005f48:	4621      	mov	r1, r4
 8005f4a:	f7fe fa3a 	bl	80043c2 <memset>
 8005f4e:	e7f5      	b.n	8005f3c <_calloc_r+0x14>

08005f50 <__ascii_mbtowc>:
 8005f50:	b082      	sub	sp, #8
 8005f52:	b901      	cbnz	r1, 8005f56 <__ascii_mbtowc+0x6>
 8005f54:	a901      	add	r1, sp, #4
 8005f56:	b142      	cbz	r2, 8005f6a <__ascii_mbtowc+0x1a>
 8005f58:	b14b      	cbz	r3, 8005f6e <__ascii_mbtowc+0x1e>
 8005f5a:	7813      	ldrb	r3, [r2, #0]
 8005f5c:	600b      	str	r3, [r1, #0]
 8005f5e:	7812      	ldrb	r2, [r2, #0]
 8005f60:	1e10      	subs	r0, r2, #0
 8005f62:	bf18      	it	ne
 8005f64:	2001      	movne	r0, #1
 8005f66:	b002      	add	sp, #8
 8005f68:	4770      	bx	lr
 8005f6a:	4610      	mov	r0, r2
 8005f6c:	e7fb      	b.n	8005f66 <__ascii_mbtowc+0x16>
 8005f6e:	f06f 0001 	mvn.w	r0, #1
 8005f72:	e7f8      	b.n	8005f66 <__ascii_mbtowc+0x16>

08005f74 <_realloc_r>:
 8005f74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f78:	4680      	mov	r8, r0
 8005f7a:	4615      	mov	r5, r2
 8005f7c:	460c      	mov	r4, r1
 8005f7e:	b921      	cbnz	r1, 8005f8a <_realloc_r+0x16>
 8005f80:	4611      	mov	r1, r2
 8005f82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005f86:	f7ff b96d 	b.w	8005264 <_malloc_r>
 8005f8a:	b92a      	cbnz	r2, 8005f98 <_realloc_r+0x24>
 8005f8c:	f7ff f8f8 	bl	8005180 <_free_r>
 8005f90:	2400      	movs	r4, #0
 8005f92:	4620      	mov	r0, r4
 8005f94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f98:	f000 f841 	bl	800601e <_malloc_usable_size_r>
 8005f9c:	4285      	cmp	r5, r0
 8005f9e:	4606      	mov	r6, r0
 8005fa0:	d802      	bhi.n	8005fa8 <_realloc_r+0x34>
 8005fa2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8005fa6:	d8f4      	bhi.n	8005f92 <_realloc_r+0x1e>
 8005fa8:	4629      	mov	r1, r5
 8005faa:	4640      	mov	r0, r8
 8005fac:	f7ff f95a 	bl	8005264 <_malloc_r>
 8005fb0:	4607      	mov	r7, r0
 8005fb2:	2800      	cmp	r0, #0
 8005fb4:	d0ec      	beq.n	8005f90 <_realloc_r+0x1c>
 8005fb6:	42b5      	cmp	r5, r6
 8005fb8:	462a      	mov	r2, r5
 8005fba:	4621      	mov	r1, r4
 8005fbc:	bf28      	it	cs
 8005fbe:	4632      	movcs	r2, r6
 8005fc0:	f7ff ff86 	bl	8005ed0 <memcpy>
 8005fc4:	4621      	mov	r1, r4
 8005fc6:	4640      	mov	r0, r8
 8005fc8:	f7ff f8da 	bl	8005180 <_free_r>
 8005fcc:	463c      	mov	r4, r7
 8005fce:	e7e0      	b.n	8005f92 <_realloc_r+0x1e>

08005fd0 <__ascii_wctomb>:
 8005fd0:	4603      	mov	r3, r0
 8005fd2:	4608      	mov	r0, r1
 8005fd4:	b141      	cbz	r1, 8005fe8 <__ascii_wctomb+0x18>
 8005fd6:	2aff      	cmp	r2, #255	@ 0xff
 8005fd8:	d904      	bls.n	8005fe4 <__ascii_wctomb+0x14>
 8005fda:	228a      	movs	r2, #138	@ 0x8a
 8005fdc:	f04f 30ff 	mov.w	r0, #4294967295
 8005fe0:	601a      	str	r2, [r3, #0]
 8005fe2:	4770      	bx	lr
 8005fe4:	2001      	movs	r0, #1
 8005fe6:	700a      	strb	r2, [r1, #0]
 8005fe8:	4770      	bx	lr
	...

08005fec <fiprintf>:
 8005fec:	b40e      	push	{r1, r2, r3}
 8005fee:	b503      	push	{r0, r1, lr}
 8005ff0:	4601      	mov	r1, r0
 8005ff2:	ab03      	add	r3, sp, #12
 8005ff4:	4805      	ldr	r0, [pc, #20]	@ (800600c <fiprintf+0x20>)
 8005ff6:	f853 2b04 	ldr.w	r2, [r3], #4
 8005ffa:	6800      	ldr	r0, [r0, #0]
 8005ffc:	9301      	str	r3, [sp, #4]
 8005ffe:	f000 f83d 	bl	800607c <_vfiprintf_r>
 8006002:	b002      	add	sp, #8
 8006004:	f85d eb04 	ldr.w	lr, [sp], #4
 8006008:	b003      	add	sp, #12
 800600a:	4770      	bx	lr
 800600c:	20000018 	.word	0x20000018

08006010 <abort>:
 8006010:	2006      	movs	r0, #6
 8006012:	b508      	push	{r3, lr}
 8006014:	f000 fa06 	bl	8006424 <raise>
 8006018:	2001      	movs	r0, #1
 800601a:	f7fb fa20 	bl	800145e <_exit>

0800601e <_malloc_usable_size_r>:
 800601e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006022:	1f18      	subs	r0, r3, #4
 8006024:	2b00      	cmp	r3, #0
 8006026:	bfbc      	itt	lt
 8006028:	580b      	ldrlt	r3, [r1, r0]
 800602a:	18c0      	addlt	r0, r0, r3
 800602c:	4770      	bx	lr

0800602e <__sfputc_r>:
 800602e:	6893      	ldr	r3, [r2, #8]
 8006030:	b410      	push	{r4}
 8006032:	3b01      	subs	r3, #1
 8006034:	2b00      	cmp	r3, #0
 8006036:	6093      	str	r3, [r2, #8]
 8006038:	da07      	bge.n	800604a <__sfputc_r+0x1c>
 800603a:	6994      	ldr	r4, [r2, #24]
 800603c:	42a3      	cmp	r3, r4
 800603e:	db01      	blt.n	8006044 <__sfputc_r+0x16>
 8006040:	290a      	cmp	r1, #10
 8006042:	d102      	bne.n	800604a <__sfputc_r+0x1c>
 8006044:	bc10      	pop	{r4}
 8006046:	f000 b931 	b.w	80062ac <__swbuf_r>
 800604a:	6813      	ldr	r3, [r2, #0]
 800604c:	1c58      	adds	r0, r3, #1
 800604e:	6010      	str	r0, [r2, #0]
 8006050:	7019      	strb	r1, [r3, #0]
 8006052:	4608      	mov	r0, r1
 8006054:	bc10      	pop	{r4}
 8006056:	4770      	bx	lr

08006058 <__sfputs_r>:
 8006058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800605a:	4606      	mov	r6, r0
 800605c:	460f      	mov	r7, r1
 800605e:	4614      	mov	r4, r2
 8006060:	18d5      	adds	r5, r2, r3
 8006062:	42ac      	cmp	r4, r5
 8006064:	d101      	bne.n	800606a <__sfputs_r+0x12>
 8006066:	2000      	movs	r0, #0
 8006068:	e007      	b.n	800607a <__sfputs_r+0x22>
 800606a:	463a      	mov	r2, r7
 800606c:	4630      	mov	r0, r6
 800606e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006072:	f7ff ffdc 	bl	800602e <__sfputc_r>
 8006076:	1c43      	adds	r3, r0, #1
 8006078:	d1f3      	bne.n	8006062 <__sfputs_r+0xa>
 800607a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800607c <_vfiprintf_r>:
 800607c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006080:	460d      	mov	r5, r1
 8006082:	4614      	mov	r4, r2
 8006084:	4698      	mov	r8, r3
 8006086:	4606      	mov	r6, r0
 8006088:	b09d      	sub	sp, #116	@ 0x74
 800608a:	b118      	cbz	r0, 8006094 <_vfiprintf_r+0x18>
 800608c:	6a03      	ldr	r3, [r0, #32]
 800608e:	b90b      	cbnz	r3, 8006094 <_vfiprintf_r+0x18>
 8006090:	f7fe f8fe 	bl	8004290 <__sinit>
 8006094:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006096:	07d9      	lsls	r1, r3, #31
 8006098:	d405      	bmi.n	80060a6 <_vfiprintf_r+0x2a>
 800609a:	89ab      	ldrh	r3, [r5, #12]
 800609c:	059a      	lsls	r2, r3, #22
 800609e:	d402      	bmi.n	80060a6 <_vfiprintf_r+0x2a>
 80060a0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80060a2:	f7fe fa0c 	bl	80044be <__retarget_lock_acquire_recursive>
 80060a6:	89ab      	ldrh	r3, [r5, #12]
 80060a8:	071b      	lsls	r3, r3, #28
 80060aa:	d501      	bpl.n	80060b0 <_vfiprintf_r+0x34>
 80060ac:	692b      	ldr	r3, [r5, #16]
 80060ae:	b99b      	cbnz	r3, 80060d8 <_vfiprintf_r+0x5c>
 80060b0:	4629      	mov	r1, r5
 80060b2:	4630      	mov	r0, r6
 80060b4:	f000 f938 	bl	8006328 <__swsetup_r>
 80060b8:	b170      	cbz	r0, 80060d8 <_vfiprintf_r+0x5c>
 80060ba:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80060bc:	07dc      	lsls	r4, r3, #31
 80060be:	d504      	bpl.n	80060ca <_vfiprintf_r+0x4e>
 80060c0:	f04f 30ff 	mov.w	r0, #4294967295
 80060c4:	b01d      	add	sp, #116	@ 0x74
 80060c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060ca:	89ab      	ldrh	r3, [r5, #12]
 80060cc:	0598      	lsls	r0, r3, #22
 80060ce:	d4f7      	bmi.n	80060c0 <_vfiprintf_r+0x44>
 80060d0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80060d2:	f7fe f9f5 	bl	80044c0 <__retarget_lock_release_recursive>
 80060d6:	e7f3      	b.n	80060c0 <_vfiprintf_r+0x44>
 80060d8:	2300      	movs	r3, #0
 80060da:	9309      	str	r3, [sp, #36]	@ 0x24
 80060dc:	2320      	movs	r3, #32
 80060de:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80060e2:	2330      	movs	r3, #48	@ 0x30
 80060e4:	f04f 0901 	mov.w	r9, #1
 80060e8:	f8cd 800c 	str.w	r8, [sp, #12]
 80060ec:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8006298 <_vfiprintf_r+0x21c>
 80060f0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80060f4:	4623      	mov	r3, r4
 80060f6:	469a      	mov	sl, r3
 80060f8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80060fc:	b10a      	cbz	r2, 8006102 <_vfiprintf_r+0x86>
 80060fe:	2a25      	cmp	r2, #37	@ 0x25
 8006100:	d1f9      	bne.n	80060f6 <_vfiprintf_r+0x7a>
 8006102:	ebba 0b04 	subs.w	fp, sl, r4
 8006106:	d00b      	beq.n	8006120 <_vfiprintf_r+0xa4>
 8006108:	465b      	mov	r3, fp
 800610a:	4622      	mov	r2, r4
 800610c:	4629      	mov	r1, r5
 800610e:	4630      	mov	r0, r6
 8006110:	f7ff ffa2 	bl	8006058 <__sfputs_r>
 8006114:	3001      	adds	r0, #1
 8006116:	f000 80a7 	beq.w	8006268 <_vfiprintf_r+0x1ec>
 800611a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800611c:	445a      	add	r2, fp
 800611e:	9209      	str	r2, [sp, #36]	@ 0x24
 8006120:	f89a 3000 	ldrb.w	r3, [sl]
 8006124:	2b00      	cmp	r3, #0
 8006126:	f000 809f 	beq.w	8006268 <_vfiprintf_r+0x1ec>
 800612a:	2300      	movs	r3, #0
 800612c:	f04f 32ff 	mov.w	r2, #4294967295
 8006130:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006134:	f10a 0a01 	add.w	sl, sl, #1
 8006138:	9304      	str	r3, [sp, #16]
 800613a:	9307      	str	r3, [sp, #28]
 800613c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006140:	931a      	str	r3, [sp, #104]	@ 0x68
 8006142:	4654      	mov	r4, sl
 8006144:	2205      	movs	r2, #5
 8006146:	f814 1b01 	ldrb.w	r1, [r4], #1
 800614a:	4853      	ldr	r0, [pc, #332]	@ (8006298 <_vfiprintf_r+0x21c>)
 800614c:	f7fe f9b9 	bl	80044c2 <memchr>
 8006150:	9a04      	ldr	r2, [sp, #16]
 8006152:	b9d8      	cbnz	r0, 800618c <_vfiprintf_r+0x110>
 8006154:	06d1      	lsls	r1, r2, #27
 8006156:	bf44      	itt	mi
 8006158:	2320      	movmi	r3, #32
 800615a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800615e:	0713      	lsls	r3, r2, #28
 8006160:	bf44      	itt	mi
 8006162:	232b      	movmi	r3, #43	@ 0x2b
 8006164:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006168:	f89a 3000 	ldrb.w	r3, [sl]
 800616c:	2b2a      	cmp	r3, #42	@ 0x2a
 800616e:	d015      	beq.n	800619c <_vfiprintf_r+0x120>
 8006170:	4654      	mov	r4, sl
 8006172:	2000      	movs	r0, #0
 8006174:	f04f 0c0a 	mov.w	ip, #10
 8006178:	9a07      	ldr	r2, [sp, #28]
 800617a:	4621      	mov	r1, r4
 800617c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006180:	3b30      	subs	r3, #48	@ 0x30
 8006182:	2b09      	cmp	r3, #9
 8006184:	d94b      	bls.n	800621e <_vfiprintf_r+0x1a2>
 8006186:	b1b0      	cbz	r0, 80061b6 <_vfiprintf_r+0x13a>
 8006188:	9207      	str	r2, [sp, #28]
 800618a:	e014      	b.n	80061b6 <_vfiprintf_r+0x13a>
 800618c:	eba0 0308 	sub.w	r3, r0, r8
 8006190:	fa09 f303 	lsl.w	r3, r9, r3
 8006194:	4313      	orrs	r3, r2
 8006196:	46a2      	mov	sl, r4
 8006198:	9304      	str	r3, [sp, #16]
 800619a:	e7d2      	b.n	8006142 <_vfiprintf_r+0xc6>
 800619c:	9b03      	ldr	r3, [sp, #12]
 800619e:	1d19      	adds	r1, r3, #4
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	9103      	str	r1, [sp, #12]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	bfbb      	ittet	lt
 80061a8:	425b      	neglt	r3, r3
 80061aa:	f042 0202 	orrlt.w	r2, r2, #2
 80061ae:	9307      	strge	r3, [sp, #28]
 80061b0:	9307      	strlt	r3, [sp, #28]
 80061b2:	bfb8      	it	lt
 80061b4:	9204      	strlt	r2, [sp, #16]
 80061b6:	7823      	ldrb	r3, [r4, #0]
 80061b8:	2b2e      	cmp	r3, #46	@ 0x2e
 80061ba:	d10a      	bne.n	80061d2 <_vfiprintf_r+0x156>
 80061bc:	7863      	ldrb	r3, [r4, #1]
 80061be:	2b2a      	cmp	r3, #42	@ 0x2a
 80061c0:	d132      	bne.n	8006228 <_vfiprintf_r+0x1ac>
 80061c2:	9b03      	ldr	r3, [sp, #12]
 80061c4:	3402      	adds	r4, #2
 80061c6:	1d1a      	adds	r2, r3, #4
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	9203      	str	r2, [sp, #12]
 80061cc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80061d0:	9305      	str	r3, [sp, #20]
 80061d2:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800629c <_vfiprintf_r+0x220>
 80061d6:	2203      	movs	r2, #3
 80061d8:	4650      	mov	r0, sl
 80061da:	7821      	ldrb	r1, [r4, #0]
 80061dc:	f7fe f971 	bl	80044c2 <memchr>
 80061e0:	b138      	cbz	r0, 80061f2 <_vfiprintf_r+0x176>
 80061e2:	2240      	movs	r2, #64	@ 0x40
 80061e4:	9b04      	ldr	r3, [sp, #16]
 80061e6:	eba0 000a 	sub.w	r0, r0, sl
 80061ea:	4082      	lsls	r2, r0
 80061ec:	4313      	orrs	r3, r2
 80061ee:	3401      	adds	r4, #1
 80061f0:	9304      	str	r3, [sp, #16]
 80061f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80061f6:	2206      	movs	r2, #6
 80061f8:	4829      	ldr	r0, [pc, #164]	@ (80062a0 <_vfiprintf_r+0x224>)
 80061fa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80061fe:	f7fe f960 	bl	80044c2 <memchr>
 8006202:	2800      	cmp	r0, #0
 8006204:	d03f      	beq.n	8006286 <_vfiprintf_r+0x20a>
 8006206:	4b27      	ldr	r3, [pc, #156]	@ (80062a4 <_vfiprintf_r+0x228>)
 8006208:	bb1b      	cbnz	r3, 8006252 <_vfiprintf_r+0x1d6>
 800620a:	9b03      	ldr	r3, [sp, #12]
 800620c:	3307      	adds	r3, #7
 800620e:	f023 0307 	bic.w	r3, r3, #7
 8006212:	3308      	adds	r3, #8
 8006214:	9303      	str	r3, [sp, #12]
 8006216:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006218:	443b      	add	r3, r7
 800621a:	9309      	str	r3, [sp, #36]	@ 0x24
 800621c:	e76a      	b.n	80060f4 <_vfiprintf_r+0x78>
 800621e:	460c      	mov	r4, r1
 8006220:	2001      	movs	r0, #1
 8006222:	fb0c 3202 	mla	r2, ip, r2, r3
 8006226:	e7a8      	b.n	800617a <_vfiprintf_r+0xfe>
 8006228:	2300      	movs	r3, #0
 800622a:	f04f 0c0a 	mov.w	ip, #10
 800622e:	4619      	mov	r1, r3
 8006230:	3401      	adds	r4, #1
 8006232:	9305      	str	r3, [sp, #20]
 8006234:	4620      	mov	r0, r4
 8006236:	f810 2b01 	ldrb.w	r2, [r0], #1
 800623a:	3a30      	subs	r2, #48	@ 0x30
 800623c:	2a09      	cmp	r2, #9
 800623e:	d903      	bls.n	8006248 <_vfiprintf_r+0x1cc>
 8006240:	2b00      	cmp	r3, #0
 8006242:	d0c6      	beq.n	80061d2 <_vfiprintf_r+0x156>
 8006244:	9105      	str	r1, [sp, #20]
 8006246:	e7c4      	b.n	80061d2 <_vfiprintf_r+0x156>
 8006248:	4604      	mov	r4, r0
 800624a:	2301      	movs	r3, #1
 800624c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006250:	e7f0      	b.n	8006234 <_vfiprintf_r+0x1b8>
 8006252:	ab03      	add	r3, sp, #12
 8006254:	9300      	str	r3, [sp, #0]
 8006256:	462a      	mov	r2, r5
 8006258:	4630      	mov	r0, r6
 800625a:	4b13      	ldr	r3, [pc, #76]	@ (80062a8 <_vfiprintf_r+0x22c>)
 800625c:	a904      	add	r1, sp, #16
 800625e:	f7fd fbcd 	bl	80039fc <_printf_float>
 8006262:	4607      	mov	r7, r0
 8006264:	1c78      	adds	r0, r7, #1
 8006266:	d1d6      	bne.n	8006216 <_vfiprintf_r+0x19a>
 8006268:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800626a:	07d9      	lsls	r1, r3, #31
 800626c:	d405      	bmi.n	800627a <_vfiprintf_r+0x1fe>
 800626e:	89ab      	ldrh	r3, [r5, #12]
 8006270:	059a      	lsls	r2, r3, #22
 8006272:	d402      	bmi.n	800627a <_vfiprintf_r+0x1fe>
 8006274:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006276:	f7fe f923 	bl	80044c0 <__retarget_lock_release_recursive>
 800627a:	89ab      	ldrh	r3, [r5, #12]
 800627c:	065b      	lsls	r3, r3, #25
 800627e:	f53f af1f 	bmi.w	80060c0 <_vfiprintf_r+0x44>
 8006282:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006284:	e71e      	b.n	80060c4 <_vfiprintf_r+0x48>
 8006286:	ab03      	add	r3, sp, #12
 8006288:	9300      	str	r3, [sp, #0]
 800628a:	462a      	mov	r2, r5
 800628c:	4630      	mov	r0, r6
 800628e:	4b06      	ldr	r3, [pc, #24]	@ (80062a8 <_vfiprintf_r+0x22c>)
 8006290:	a904      	add	r1, sp, #16
 8006292:	f7fd fe51 	bl	8003f38 <_printf_i>
 8006296:	e7e4      	b.n	8006262 <_vfiprintf_r+0x1e6>
 8006298:	080067e0 	.word	0x080067e0
 800629c:	080067e6 	.word	0x080067e6
 80062a0:	080067ea 	.word	0x080067ea
 80062a4:	080039fd 	.word	0x080039fd
 80062a8:	08006059 	.word	0x08006059

080062ac <__swbuf_r>:
 80062ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062ae:	460e      	mov	r6, r1
 80062b0:	4614      	mov	r4, r2
 80062b2:	4605      	mov	r5, r0
 80062b4:	b118      	cbz	r0, 80062be <__swbuf_r+0x12>
 80062b6:	6a03      	ldr	r3, [r0, #32]
 80062b8:	b90b      	cbnz	r3, 80062be <__swbuf_r+0x12>
 80062ba:	f7fd ffe9 	bl	8004290 <__sinit>
 80062be:	69a3      	ldr	r3, [r4, #24]
 80062c0:	60a3      	str	r3, [r4, #8]
 80062c2:	89a3      	ldrh	r3, [r4, #12]
 80062c4:	071a      	lsls	r2, r3, #28
 80062c6:	d501      	bpl.n	80062cc <__swbuf_r+0x20>
 80062c8:	6923      	ldr	r3, [r4, #16]
 80062ca:	b943      	cbnz	r3, 80062de <__swbuf_r+0x32>
 80062cc:	4621      	mov	r1, r4
 80062ce:	4628      	mov	r0, r5
 80062d0:	f000 f82a 	bl	8006328 <__swsetup_r>
 80062d4:	b118      	cbz	r0, 80062de <__swbuf_r+0x32>
 80062d6:	f04f 37ff 	mov.w	r7, #4294967295
 80062da:	4638      	mov	r0, r7
 80062dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80062de:	6823      	ldr	r3, [r4, #0]
 80062e0:	6922      	ldr	r2, [r4, #16]
 80062e2:	b2f6      	uxtb	r6, r6
 80062e4:	1a98      	subs	r0, r3, r2
 80062e6:	6963      	ldr	r3, [r4, #20]
 80062e8:	4637      	mov	r7, r6
 80062ea:	4283      	cmp	r3, r0
 80062ec:	dc05      	bgt.n	80062fa <__swbuf_r+0x4e>
 80062ee:	4621      	mov	r1, r4
 80062f0:	4628      	mov	r0, r5
 80062f2:	f7ff fd9b 	bl	8005e2c <_fflush_r>
 80062f6:	2800      	cmp	r0, #0
 80062f8:	d1ed      	bne.n	80062d6 <__swbuf_r+0x2a>
 80062fa:	68a3      	ldr	r3, [r4, #8]
 80062fc:	3b01      	subs	r3, #1
 80062fe:	60a3      	str	r3, [r4, #8]
 8006300:	6823      	ldr	r3, [r4, #0]
 8006302:	1c5a      	adds	r2, r3, #1
 8006304:	6022      	str	r2, [r4, #0]
 8006306:	701e      	strb	r6, [r3, #0]
 8006308:	6962      	ldr	r2, [r4, #20]
 800630a:	1c43      	adds	r3, r0, #1
 800630c:	429a      	cmp	r2, r3
 800630e:	d004      	beq.n	800631a <__swbuf_r+0x6e>
 8006310:	89a3      	ldrh	r3, [r4, #12]
 8006312:	07db      	lsls	r3, r3, #31
 8006314:	d5e1      	bpl.n	80062da <__swbuf_r+0x2e>
 8006316:	2e0a      	cmp	r6, #10
 8006318:	d1df      	bne.n	80062da <__swbuf_r+0x2e>
 800631a:	4621      	mov	r1, r4
 800631c:	4628      	mov	r0, r5
 800631e:	f7ff fd85 	bl	8005e2c <_fflush_r>
 8006322:	2800      	cmp	r0, #0
 8006324:	d0d9      	beq.n	80062da <__swbuf_r+0x2e>
 8006326:	e7d6      	b.n	80062d6 <__swbuf_r+0x2a>

08006328 <__swsetup_r>:
 8006328:	b538      	push	{r3, r4, r5, lr}
 800632a:	4b29      	ldr	r3, [pc, #164]	@ (80063d0 <__swsetup_r+0xa8>)
 800632c:	4605      	mov	r5, r0
 800632e:	6818      	ldr	r0, [r3, #0]
 8006330:	460c      	mov	r4, r1
 8006332:	b118      	cbz	r0, 800633c <__swsetup_r+0x14>
 8006334:	6a03      	ldr	r3, [r0, #32]
 8006336:	b90b      	cbnz	r3, 800633c <__swsetup_r+0x14>
 8006338:	f7fd ffaa 	bl	8004290 <__sinit>
 800633c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006340:	0719      	lsls	r1, r3, #28
 8006342:	d422      	bmi.n	800638a <__swsetup_r+0x62>
 8006344:	06da      	lsls	r2, r3, #27
 8006346:	d407      	bmi.n	8006358 <__swsetup_r+0x30>
 8006348:	2209      	movs	r2, #9
 800634a:	602a      	str	r2, [r5, #0]
 800634c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006350:	f04f 30ff 	mov.w	r0, #4294967295
 8006354:	81a3      	strh	r3, [r4, #12]
 8006356:	e033      	b.n	80063c0 <__swsetup_r+0x98>
 8006358:	0758      	lsls	r0, r3, #29
 800635a:	d512      	bpl.n	8006382 <__swsetup_r+0x5a>
 800635c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800635e:	b141      	cbz	r1, 8006372 <__swsetup_r+0x4a>
 8006360:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006364:	4299      	cmp	r1, r3
 8006366:	d002      	beq.n	800636e <__swsetup_r+0x46>
 8006368:	4628      	mov	r0, r5
 800636a:	f7fe ff09 	bl	8005180 <_free_r>
 800636e:	2300      	movs	r3, #0
 8006370:	6363      	str	r3, [r4, #52]	@ 0x34
 8006372:	89a3      	ldrh	r3, [r4, #12]
 8006374:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006378:	81a3      	strh	r3, [r4, #12]
 800637a:	2300      	movs	r3, #0
 800637c:	6063      	str	r3, [r4, #4]
 800637e:	6923      	ldr	r3, [r4, #16]
 8006380:	6023      	str	r3, [r4, #0]
 8006382:	89a3      	ldrh	r3, [r4, #12]
 8006384:	f043 0308 	orr.w	r3, r3, #8
 8006388:	81a3      	strh	r3, [r4, #12]
 800638a:	6923      	ldr	r3, [r4, #16]
 800638c:	b94b      	cbnz	r3, 80063a2 <__swsetup_r+0x7a>
 800638e:	89a3      	ldrh	r3, [r4, #12]
 8006390:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006394:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006398:	d003      	beq.n	80063a2 <__swsetup_r+0x7a>
 800639a:	4621      	mov	r1, r4
 800639c:	4628      	mov	r0, r5
 800639e:	f000 f882 	bl	80064a6 <__smakebuf_r>
 80063a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80063a6:	f013 0201 	ands.w	r2, r3, #1
 80063aa:	d00a      	beq.n	80063c2 <__swsetup_r+0x9a>
 80063ac:	2200      	movs	r2, #0
 80063ae:	60a2      	str	r2, [r4, #8]
 80063b0:	6962      	ldr	r2, [r4, #20]
 80063b2:	4252      	negs	r2, r2
 80063b4:	61a2      	str	r2, [r4, #24]
 80063b6:	6922      	ldr	r2, [r4, #16]
 80063b8:	b942      	cbnz	r2, 80063cc <__swsetup_r+0xa4>
 80063ba:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80063be:	d1c5      	bne.n	800634c <__swsetup_r+0x24>
 80063c0:	bd38      	pop	{r3, r4, r5, pc}
 80063c2:	0799      	lsls	r1, r3, #30
 80063c4:	bf58      	it	pl
 80063c6:	6962      	ldrpl	r2, [r4, #20]
 80063c8:	60a2      	str	r2, [r4, #8]
 80063ca:	e7f4      	b.n	80063b6 <__swsetup_r+0x8e>
 80063cc:	2000      	movs	r0, #0
 80063ce:	e7f7      	b.n	80063c0 <__swsetup_r+0x98>
 80063d0:	20000018 	.word	0x20000018

080063d4 <_raise_r>:
 80063d4:	291f      	cmp	r1, #31
 80063d6:	b538      	push	{r3, r4, r5, lr}
 80063d8:	4605      	mov	r5, r0
 80063da:	460c      	mov	r4, r1
 80063dc:	d904      	bls.n	80063e8 <_raise_r+0x14>
 80063de:	2316      	movs	r3, #22
 80063e0:	6003      	str	r3, [r0, #0]
 80063e2:	f04f 30ff 	mov.w	r0, #4294967295
 80063e6:	bd38      	pop	{r3, r4, r5, pc}
 80063e8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80063ea:	b112      	cbz	r2, 80063f2 <_raise_r+0x1e>
 80063ec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80063f0:	b94b      	cbnz	r3, 8006406 <_raise_r+0x32>
 80063f2:	4628      	mov	r0, r5
 80063f4:	f000 f830 	bl	8006458 <_getpid_r>
 80063f8:	4622      	mov	r2, r4
 80063fa:	4601      	mov	r1, r0
 80063fc:	4628      	mov	r0, r5
 80063fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006402:	f000 b817 	b.w	8006434 <_kill_r>
 8006406:	2b01      	cmp	r3, #1
 8006408:	d00a      	beq.n	8006420 <_raise_r+0x4c>
 800640a:	1c59      	adds	r1, r3, #1
 800640c:	d103      	bne.n	8006416 <_raise_r+0x42>
 800640e:	2316      	movs	r3, #22
 8006410:	6003      	str	r3, [r0, #0]
 8006412:	2001      	movs	r0, #1
 8006414:	e7e7      	b.n	80063e6 <_raise_r+0x12>
 8006416:	2100      	movs	r1, #0
 8006418:	4620      	mov	r0, r4
 800641a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800641e:	4798      	blx	r3
 8006420:	2000      	movs	r0, #0
 8006422:	e7e0      	b.n	80063e6 <_raise_r+0x12>

08006424 <raise>:
 8006424:	4b02      	ldr	r3, [pc, #8]	@ (8006430 <raise+0xc>)
 8006426:	4601      	mov	r1, r0
 8006428:	6818      	ldr	r0, [r3, #0]
 800642a:	f7ff bfd3 	b.w	80063d4 <_raise_r>
 800642e:	bf00      	nop
 8006430:	20000018 	.word	0x20000018

08006434 <_kill_r>:
 8006434:	b538      	push	{r3, r4, r5, lr}
 8006436:	2300      	movs	r3, #0
 8006438:	4d06      	ldr	r5, [pc, #24]	@ (8006454 <_kill_r+0x20>)
 800643a:	4604      	mov	r4, r0
 800643c:	4608      	mov	r0, r1
 800643e:	4611      	mov	r1, r2
 8006440:	602b      	str	r3, [r5, #0]
 8006442:	f7fa fffc 	bl	800143e <_kill>
 8006446:	1c43      	adds	r3, r0, #1
 8006448:	d102      	bne.n	8006450 <_kill_r+0x1c>
 800644a:	682b      	ldr	r3, [r5, #0]
 800644c:	b103      	cbz	r3, 8006450 <_kill_r+0x1c>
 800644e:	6023      	str	r3, [r4, #0]
 8006450:	bd38      	pop	{r3, r4, r5, pc}
 8006452:	bf00      	nop
 8006454:	200003f4 	.word	0x200003f4

08006458 <_getpid_r>:
 8006458:	f7fa bfea 	b.w	8001430 <_getpid>

0800645c <__swhatbuf_r>:
 800645c:	b570      	push	{r4, r5, r6, lr}
 800645e:	460c      	mov	r4, r1
 8006460:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006464:	4615      	mov	r5, r2
 8006466:	2900      	cmp	r1, #0
 8006468:	461e      	mov	r6, r3
 800646a:	b096      	sub	sp, #88	@ 0x58
 800646c:	da0c      	bge.n	8006488 <__swhatbuf_r+0x2c>
 800646e:	89a3      	ldrh	r3, [r4, #12]
 8006470:	2100      	movs	r1, #0
 8006472:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006476:	bf14      	ite	ne
 8006478:	2340      	movne	r3, #64	@ 0x40
 800647a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800647e:	2000      	movs	r0, #0
 8006480:	6031      	str	r1, [r6, #0]
 8006482:	602b      	str	r3, [r5, #0]
 8006484:	b016      	add	sp, #88	@ 0x58
 8006486:	bd70      	pop	{r4, r5, r6, pc}
 8006488:	466a      	mov	r2, sp
 800648a:	f000 f849 	bl	8006520 <_fstat_r>
 800648e:	2800      	cmp	r0, #0
 8006490:	dbed      	blt.n	800646e <__swhatbuf_r+0x12>
 8006492:	9901      	ldr	r1, [sp, #4]
 8006494:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006498:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800649c:	4259      	negs	r1, r3
 800649e:	4159      	adcs	r1, r3
 80064a0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80064a4:	e7eb      	b.n	800647e <__swhatbuf_r+0x22>

080064a6 <__smakebuf_r>:
 80064a6:	898b      	ldrh	r3, [r1, #12]
 80064a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80064aa:	079d      	lsls	r5, r3, #30
 80064ac:	4606      	mov	r6, r0
 80064ae:	460c      	mov	r4, r1
 80064b0:	d507      	bpl.n	80064c2 <__smakebuf_r+0x1c>
 80064b2:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80064b6:	6023      	str	r3, [r4, #0]
 80064b8:	6123      	str	r3, [r4, #16]
 80064ba:	2301      	movs	r3, #1
 80064bc:	6163      	str	r3, [r4, #20]
 80064be:	b003      	add	sp, #12
 80064c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80064c2:	466a      	mov	r2, sp
 80064c4:	ab01      	add	r3, sp, #4
 80064c6:	f7ff ffc9 	bl	800645c <__swhatbuf_r>
 80064ca:	9f00      	ldr	r7, [sp, #0]
 80064cc:	4605      	mov	r5, r0
 80064ce:	4639      	mov	r1, r7
 80064d0:	4630      	mov	r0, r6
 80064d2:	f7fe fec7 	bl	8005264 <_malloc_r>
 80064d6:	b948      	cbnz	r0, 80064ec <__smakebuf_r+0x46>
 80064d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80064dc:	059a      	lsls	r2, r3, #22
 80064de:	d4ee      	bmi.n	80064be <__smakebuf_r+0x18>
 80064e0:	f023 0303 	bic.w	r3, r3, #3
 80064e4:	f043 0302 	orr.w	r3, r3, #2
 80064e8:	81a3      	strh	r3, [r4, #12]
 80064ea:	e7e2      	b.n	80064b2 <__smakebuf_r+0xc>
 80064ec:	89a3      	ldrh	r3, [r4, #12]
 80064ee:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80064f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80064f6:	81a3      	strh	r3, [r4, #12]
 80064f8:	9b01      	ldr	r3, [sp, #4]
 80064fa:	6020      	str	r0, [r4, #0]
 80064fc:	b15b      	cbz	r3, 8006516 <__smakebuf_r+0x70>
 80064fe:	4630      	mov	r0, r6
 8006500:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006504:	f000 f81e 	bl	8006544 <_isatty_r>
 8006508:	b128      	cbz	r0, 8006516 <__smakebuf_r+0x70>
 800650a:	89a3      	ldrh	r3, [r4, #12]
 800650c:	f023 0303 	bic.w	r3, r3, #3
 8006510:	f043 0301 	orr.w	r3, r3, #1
 8006514:	81a3      	strh	r3, [r4, #12]
 8006516:	89a3      	ldrh	r3, [r4, #12]
 8006518:	431d      	orrs	r5, r3
 800651a:	81a5      	strh	r5, [r4, #12]
 800651c:	e7cf      	b.n	80064be <__smakebuf_r+0x18>
	...

08006520 <_fstat_r>:
 8006520:	b538      	push	{r3, r4, r5, lr}
 8006522:	2300      	movs	r3, #0
 8006524:	4d06      	ldr	r5, [pc, #24]	@ (8006540 <_fstat_r+0x20>)
 8006526:	4604      	mov	r4, r0
 8006528:	4608      	mov	r0, r1
 800652a:	4611      	mov	r1, r2
 800652c:	602b      	str	r3, [r5, #0]
 800652e:	f7fa ffe5 	bl	80014fc <_fstat>
 8006532:	1c43      	adds	r3, r0, #1
 8006534:	d102      	bne.n	800653c <_fstat_r+0x1c>
 8006536:	682b      	ldr	r3, [r5, #0]
 8006538:	b103      	cbz	r3, 800653c <_fstat_r+0x1c>
 800653a:	6023      	str	r3, [r4, #0]
 800653c:	bd38      	pop	{r3, r4, r5, pc}
 800653e:	bf00      	nop
 8006540:	200003f4 	.word	0x200003f4

08006544 <_isatty_r>:
 8006544:	b538      	push	{r3, r4, r5, lr}
 8006546:	2300      	movs	r3, #0
 8006548:	4d05      	ldr	r5, [pc, #20]	@ (8006560 <_isatty_r+0x1c>)
 800654a:	4604      	mov	r4, r0
 800654c:	4608      	mov	r0, r1
 800654e:	602b      	str	r3, [r5, #0]
 8006550:	f7fa ffe3 	bl	800151a <_isatty>
 8006554:	1c43      	adds	r3, r0, #1
 8006556:	d102      	bne.n	800655e <_isatty_r+0x1a>
 8006558:	682b      	ldr	r3, [r5, #0]
 800655a:	b103      	cbz	r3, 800655e <_isatty_r+0x1a>
 800655c:	6023      	str	r3, [r4, #0]
 800655e:	bd38      	pop	{r3, r4, r5, pc}
 8006560:	200003f4 	.word	0x200003f4

08006564 <_init>:
 8006564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006566:	bf00      	nop
 8006568:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800656a:	bc08      	pop	{r3}
 800656c:	469e      	mov	lr, r3
 800656e:	4770      	bx	lr

08006570 <_fini>:
 8006570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006572:	bf00      	nop
 8006574:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006576:	bc08      	pop	{r3}
 8006578:	469e      	mov	lr, r3
 800657a:	4770      	bx	lr
