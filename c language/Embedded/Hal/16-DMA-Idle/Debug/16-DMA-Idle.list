
16-DMA-Idle.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003bdc  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d4  08003ce8  08003ce8  00004ce8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003dbc  08003dbc  00005068  2**0
                  CONTENTS
  4 .ARM          00000000  08003dbc  08003dbc  00005068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003dbc  08003dbc  00005068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003dbc  08003dbc  00004dbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003dc0  08003dc0  00004dc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08003dc4  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000304  20000068  08003e2c  00005068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000036c  08003e2c  0000536c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00005068  2**0
                  CONTENTS, READONLY
 12 .debug_info   000081fd  00000000  00000000  00005091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c40  00000000  00000000  0000d28e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007d8  00000000  00000000  0000eed0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000005e1  00000000  00000000  0000f6a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000182fe  00000000  00000000  0000fc89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b422  00000000  00000000  00027f87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083d9d  00000000  00000000  000333a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b7146  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000025b0  00000000  00000000  000b718c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004a  00000000  00000000  000b973c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	08003cd0 	.word	0x08003cd0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	08003cd0 	.word	0x08003cd0

0800014c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000152:	4b0c      	ldr	r3, [pc, #48]	@ (8000184 <MX_DMA_Init+0x38>)
 8000154:	695b      	ldr	r3, [r3, #20]
 8000156:	4a0b      	ldr	r2, [pc, #44]	@ (8000184 <MX_DMA_Init+0x38>)
 8000158:	f043 0301 	orr.w	r3, r3, #1
 800015c:	6153      	str	r3, [r2, #20]
 800015e:	4b09      	ldr	r3, [pc, #36]	@ (8000184 <MX_DMA_Init+0x38>)
 8000160:	695b      	ldr	r3, [r3, #20]
 8000162:	f003 0301 	and.w	r3, r3, #1
 8000166:	607b      	str	r3, [r7, #4]
 8000168:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800016a:	2200      	movs	r2, #0
 800016c:	2100      	movs	r1, #0
 800016e:	200f      	movs	r0, #15
 8000170:	f000 fd4d 	bl	8000c0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000174:	200f      	movs	r0, #15
 8000176:	f000 fd66 	bl	8000c46 <HAL_NVIC_EnableIRQ>

}
 800017a:	bf00      	nop
 800017c:	3708      	adds	r7, #8
 800017e:	46bd      	mov	sp, r7
 8000180:	bd80      	pop	{r7, pc}
 8000182:	bf00      	nop
 8000184:	40021000 	.word	0x40021000

08000188 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000188:	b580      	push	{r7, lr}
 800018a:	b086      	sub	sp, #24
 800018c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800018e:	f107 0308 	add.w	r3, r7, #8
 8000192:	2200      	movs	r2, #0
 8000194:	601a      	str	r2, [r3, #0]
 8000196:	605a      	str	r2, [r3, #4]
 8000198:	609a      	str	r2, [r3, #8]
 800019a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800019c:	4b2b      	ldr	r3, [pc, #172]	@ (800024c <MX_GPIO_Init+0xc4>)
 800019e:	699b      	ldr	r3, [r3, #24]
 80001a0:	4a2a      	ldr	r2, [pc, #168]	@ (800024c <MX_GPIO_Init+0xc4>)
 80001a2:	f043 0304 	orr.w	r3, r3, #4
 80001a6:	6193      	str	r3, [r2, #24]
 80001a8:	4b28      	ldr	r3, [pc, #160]	@ (800024c <MX_GPIO_Init+0xc4>)
 80001aa:	699b      	ldr	r3, [r3, #24]
 80001ac:	f003 0304 	and.w	r3, r3, #4
 80001b0:	607b      	str	r3, [r7, #4]
 80001b2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80001b4:	4b25      	ldr	r3, [pc, #148]	@ (800024c <MX_GPIO_Init+0xc4>)
 80001b6:	699b      	ldr	r3, [r3, #24]
 80001b8:	4a24      	ldr	r2, [pc, #144]	@ (800024c <MX_GPIO_Init+0xc4>)
 80001ba:	f043 0308 	orr.w	r3, r3, #8
 80001be:	6193      	str	r3, [r2, #24]
 80001c0:	4b22      	ldr	r3, [pc, #136]	@ (800024c <MX_GPIO_Init+0xc4>)
 80001c2:	699b      	ldr	r3, [r3, #24]
 80001c4:	f003 0308 	and.w	r3, r3, #8
 80001c8:	603b      	str	r3, [r7, #0]
 80001ca:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 80001cc:	2200      	movs	r2, #0
 80001ce:	2106      	movs	r1, #6
 80001d0:	481f      	ldr	r0, [pc, #124]	@ (8000250 <MX_GPIO_Init+0xc8>)
 80001d2:	f001 f979 	bl	80014c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA1 PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 80001d6:	2306      	movs	r3, #6
 80001d8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80001da:	2301      	movs	r3, #1
 80001dc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001de:	2300      	movs	r3, #0
 80001e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80001e2:	2302      	movs	r3, #2
 80001e4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80001e6:	f107 0308 	add.w	r3, r7, #8
 80001ea:	4619      	mov	r1, r3
 80001ec:	4818      	ldr	r0, [pc, #96]	@ (8000250 <MX_GPIO_Init+0xc8>)
 80001ee:	f000 ffe7 	bl	80011c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80001f2:	2320      	movs	r3, #32
 80001f4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80001f6:	4b17      	ldr	r3, [pc, #92]	@ (8000254 <MX_GPIO_Init+0xcc>)
 80001f8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80001fa:	2301      	movs	r3, #1
 80001fc:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80001fe:	f107 0308 	add.w	r3, r7, #8
 8000202:	4619      	mov	r1, r3
 8000204:	4812      	ldr	r0, [pc, #72]	@ (8000250 <MX_GPIO_Init+0xc8>)
 8000206:	f000 ffdb 	bl	80011c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800020a:	2301      	movs	r3, #1
 800020c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800020e:	4b11      	ldr	r3, [pc, #68]	@ (8000254 <MX_GPIO_Init+0xcc>)
 8000210:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000212:	2301      	movs	r3, #1
 8000214:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000216:	f107 0308 	add.w	r3, r7, #8
 800021a:	4619      	mov	r1, r3
 800021c:	480e      	ldr	r0, [pc, #56]	@ (8000258 <MX_GPIO_Init+0xd0>)
 800021e:	f000 ffcf 	bl	80011c0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000222:	2200      	movs	r2, #0
 8000224:	2100      	movs	r1, #0
 8000226:	2006      	movs	r0, #6
 8000228:	f000 fcf1 	bl	8000c0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800022c:	2006      	movs	r0, #6
 800022e:	f000 fd0a 	bl	8000c46 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000232:	2200      	movs	r2, #0
 8000234:	2100      	movs	r1, #0
 8000236:	2017      	movs	r0, #23
 8000238:	f000 fce9 	bl	8000c0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800023c:	2017      	movs	r0, #23
 800023e:	f000 fd02 	bl	8000c46 <HAL_NVIC_EnableIRQ>

}
 8000242:	bf00      	nop
 8000244:	3718      	adds	r7, #24
 8000246:	46bd      	mov	sp, r7
 8000248:	bd80      	pop	{r7, pc}
 800024a:	bf00      	nop
 800024c:	40021000 	.word	0x40021000
 8000250:	40010800 	.word	0x40010800
 8000254:	10210000 	.word	0x10210000
 8000258:	40010c00 	.word	0x40010c00

0800025c <LED_Control>:

/* USER CODE BEGIN 2 */
void LED_Control(uint8_t device, uint8_t cmd)
{
 800025c:	b580      	push	{r7, lr}
 800025e:	b082      	sub	sp, #8
 8000260:	af00      	add	r7, sp, #0
 8000262:	4603      	mov	r3, r0
 8000264:	460a      	mov	r2, r1
 8000266:	71fb      	strb	r3, [r7, #7]
 8000268:	4613      	mov	r3, r2
 800026a:	71bb      	strb	r3, [r7, #6]
	if (device == LED1)
 800026c:	79fb      	ldrb	r3, [r7, #7]
 800026e:	2b01      	cmp	r3, #1
 8000270:	d111      	bne.n	8000296 <LED_Control+0x3a>
	{
		if (cmd == ON)
 8000272:	79bb      	ldrb	r3, [r7, #6]
 8000274:	2b01      	cmp	r3, #1
 8000276:	d105      	bne.n	8000284 <LED_Control+0x28>
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 8000278:	2201      	movs	r2, #1
 800027a:	2102      	movs	r1, #2
 800027c:	4812      	ldr	r0, [pc, #72]	@ (80002c8 <LED_Control+0x6c>)
 800027e:	f001 f923 	bl	80014c8 <HAL_GPIO_WritePin>
		else if (cmd == OFF)
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
		}
	}
}
 8000282:	e01c      	b.n	80002be <LED_Control+0x62>
		else if (cmd == OFF)
 8000284:	79bb      	ldrb	r3, [r7, #6]
 8000286:	2b00      	cmp	r3, #0
 8000288:	d119      	bne.n	80002be <LED_Control+0x62>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 800028a:	2200      	movs	r2, #0
 800028c:	2102      	movs	r1, #2
 800028e:	480e      	ldr	r0, [pc, #56]	@ (80002c8 <LED_Control+0x6c>)
 8000290:	f001 f91a 	bl	80014c8 <HAL_GPIO_WritePin>
}
 8000294:	e013      	b.n	80002be <LED_Control+0x62>
	else if (device == LED2)
 8000296:	79fb      	ldrb	r3, [r7, #7]
 8000298:	2b02      	cmp	r3, #2
 800029a:	d110      	bne.n	80002be <LED_Control+0x62>
		if (cmd == ON)
 800029c:	79bb      	ldrb	r3, [r7, #6]
 800029e:	2b01      	cmp	r3, #1
 80002a0:	d105      	bne.n	80002ae <LED_Control+0x52>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 80002a2:	2201      	movs	r2, #1
 80002a4:	2104      	movs	r1, #4
 80002a6:	4808      	ldr	r0, [pc, #32]	@ (80002c8 <LED_Control+0x6c>)
 80002a8:	f001 f90e 	bl	80014c8 <HAL_GPIO_WritePin>
}
 80002ac:	e007      	b.n	80002be <LED_Control+0x62>
		else if (cmd == OFF)
 80002ae:	79bb      	ldrb	r3, [r7, #6]
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	d104      	bne.n	80002be <LED_Control+0x62>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 80002b4:	2200      	movs	r2, #0
 80002b6:	2104      	movs	r1, #4
 80002b8:	4803      	ldr	r0, [pc, #12]	@ (80002c8 <LED_Control+0x6c>)
 80002ba:	f001 f905 	bl	80014c8 <HAL_GPIO_WritePin>
}
 80002be:	bf00      	nop
 80002c0:	3708      	adds	r7, #8
 80002c2:	46bd      	mov	sp, r7
 80002c4:	bd80      	pop	{r7, pc}
 80002c6:	bf00      	nop
 80002c8:	40010800 	.word	0x40010800

080002cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002d0:	f000 fb64 	bl	800099c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002d4:	f000 f820 	bl	8000318 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002d8:	f7ff ff56 	bl	8000188 <MX_GPIO_Init>
  MX_DMA_Init();
 80002dc:	f7ff ff36 	bl	800014c <MX_DMA_Init>
  MX_USART1_UART_Init();
 80002e0:	f000 fa7c 	bl	80007dc <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  //HAL_UART_Receive_IT(&huart1, RX1_Buffer, 4);
  //HAL_UART_Receive_DMA(&huart1, RX1_Buffer, 1);
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);
 80002e4:	4b09      	ldr	r3, [pc, #36]	@ (800030c <main+0x40>)
 80002e6:	681b      	ldr	r3, [r3, #0]
 80002e8:	68da      	ldr	r2, [r3, #12]
 80002ea:	4b08      	ldr	r3, [pc, #32]	@ (800030c <main+0x40>)
 80002ec:	681b      	ldr	r3, [r3, #0]
 80002ee:	f042 0210 	orr.w	r2, r2, #16
 80002f2:	60da      	str	r2, [r3, #12]
  HAL_UART_Receive_DMA(&huart1, RX1_Buffer, DMA_BUF_SIZE);
 80002f4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80002f8:	4905      	ldr	r1, [pc, #20]	@ (8000310 <main+0x44>)
 80002fa:	4804      	ldr	r0, [pc, #16]	@ (800030c <main+0x40>)
 80002fc:	f001 fdff 	bl	8001efe <HAL_UART_Receive_DMA>
  printf("The system has been initialized!\n");
 8000300:	4804      	ldr	r0, [pc, #16]	@ (8000314 <main+0x48>)
 8000302:	f002 fe43 	bl	8002f8c <puts>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000306:	bf00      	nop
 8000308:	e7fd      	b.n	8000306 <main+0x3a>
 800030a:	bf00      	nop
 800030c:	20000190 	.word	0x20000190
 8000310:	20000084 	.word	0x20000084
 8000314:	08003ce8 	.word	0x08003ce8

08000318 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000318:	b580      	push	{r7, lr}
 800031a:	b090      	sub	sp, #64	@ 0x40
 800031c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800031e:	f107 0318 	add.w	r3, r7, #24
 8000322:	2228      	movs	r2, #40	@ 0x28
 8000324:	2100      	movs	r1, #0
 8000326:	4618      	mov	r0, r3
 8000328:	f002 ff10 	bl	800314c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800032c:	1d3b      	adds	r3, r7, #4
 800032e:	2200      	movs	r2, #0
 8000330:	601a      	str	r2, [r3, #0]
 8000332:	605a      	str	r2, [r3, #4]
 8000334:	609a      	str	r2, [r3, #8]
 8000336:	60da      	str	r2, [r3, #12]
 8000338:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800033a:	2302      	movs	r3, #2
 800033c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800033e:	2301      	movs	r3, #1
 8000340:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000342:	2310      	movs	r3, #16
 8000344:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000346:	2300      	movs	r3, #0
 8000348:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800034a:	f107 0318 	add.w	r3, r7, #24
 800034e:	4618      	mov	r0, r3
 8000350:	f001 f8ea 	bl	8001528 <HAL_RCC_OscConfig>
 8000354:	4603      	mov	r3, r0
 8000356:	2b00      	cmp	r3, #0
 8000358:	d001      	beq.n	800035e <SystemClock_Config+0x46>
  {
    Error_Handler();
 800035a:	f000 f818 	bl	800038e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800035e:	230f      	movs	r3, #15
 8000360:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000362:	2300      	movs	r3, #0
 8000364:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000366:	2300      	movs	r3, #0
 8000368:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800036a:	2300      	movs	r3, #0
 800036c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800036e:	2300      	movs	r3, #0
 8000370:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000372:	1d3b      	adds	r3, r7, #4
 8000374:	2100      	movs	r1, #0
 8000376:	4618      	mov	r0, r3
 8000378:	f001 fb58 	bl	8001a2c <HAL_RCC_ClockConfig>
 800037c:	4603      	mov	r3, r0
 800037e:	2b00      	cmp	r3, #0
 8000380:	d001      	beq.n	8000386 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000382:	f000 f804 	bl	800038e <Error_Handler>
  }
}
 8000386:	bf00      	nop
 8000388:	3740      	adds	r7, #64	@ 0x40
 800038a:	46bd      	mov	sp, r7
 800038c:	bd80      	pop	{r7, pc}

0800038e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800038e:	b480      	push	{r7}
 8000390:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000392:	b672      	cpsid	i
}
 8000394:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000396:	bf00      	nop
 8000398:	e7fd      	b.n	8000396 <Error_Handler+0x8>
	...

0800039c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800039c:	b480      	push	{r7}
 800039e:	b085      	sub	sp, #20
 80003a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80003a2:	4b15      	ldr	r3, [pc, #84]	@ (80003f8 <HAL_MspInit+0x5c>)
 80003a4:	699b      	ldr	r3, [r3, #24]
 80003a6:	4a14      	ldr	r2, [pc, #80]	@ (80003f8 <HAL_MspInit+0x5c>)
 80003a8:	f043 0301 	orr.w	r3, r3, #1
 80003ac:	6193      	str	r3, [r2, #24]
 80003ae:	4b12      	ldr	r3, [pc, #72]	@ (80003f8 <HAL_MspInit+0x5c>)
 80003b0:	699b      	ldr	r3, [r3, #24]
 80003b2:	f003 0301 	and.w	r3, r3, #1
 80003b6:	60bb      	str	r3, [r7, #8]
 80003b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003ba:	4b0f      	ldr	r3, [pc, #60]	@ (80003f8 <HAL_MspInit+0x5c>)
 80003bc:	69db      	ldr	r3, [r3, #28]
 80003be:	4a0e      	ldr	r2, [pc, #56]	@ (80003f8 <HAL_MspInit+0x5c>)
 80003c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80003c4:	61d3      	str	r3, [r2, #28]
 80003c6:	4b0c      	ldr	r3, [pc, #48]	@ (80003f8 <HAL_MspInit+0x5c>)
 80003c8:	69db      	ldr	r3, [r3, #28]
 80003ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80003ce:	607b      	str	r3, [r7, #4]
 80003d0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80003d2:	4b0a      	ldr	r3, [pc, #40]	@ (80003fc <HAL_MspInit+0x60>)
 80003d4:	685b      	ldr	r3, [r3, #4]
 80003d6:	60fb      	str	r3, [r7, #12]
 80003d8:	68fb      	ldr	r3, [r7, #12]
 80003da:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80003de:	60fb      	str	r3, [r7, #12]
 80003e0:	68fb      	ldr	r3, [r7, #12]
 80003e2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80003e6:	60fb      	str	r3, [r7, #12]
 80003e8:	4a04      	ldr	r2, [pc, #16]	@ (80003fc <HAL_MspInit+0x60>)
 80003ea:	68fb      	ldr	r3, [r7, #12]
 80003ec:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003ee:	bf00      	nop
 80003f0:	3714      	adds	r7, #20
 80003f2:	46bd      	mov	sp, r7
 80003f4:	bc80      	pop	{r7}
 80003f6:	4770      	bx	lr
 80003f8:	40021000 	.word	0x40021000
 80003fc:	40010000 	.word	0x40010000

08000400 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000400:	b480      	push	{r7}
 8000402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000404:	bf00      	nop
 8000406:	e7fd      	b.n	8000404 <NMI_Handler+0x4>

08000408 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000408:	b480      	push	{r7}
 800040a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800040c:	bf00      	nop
 800040e:	e7fd      	b.n	800040c <HardFault_Handler+0x4>

08000410 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000410:	b480      	push	{r7}
 8000412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000414:	bf00      	nop
 8000416:	e7fd      	b.n	8000414 <MemManage_Handler+0x4>

08000418 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000418:	b480      	push	{r7}
 800041a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800041c:	bf00      	nop
 800041e:	e7fd      	b.n	800041c <BusFault_Handler+0x4>

08000420 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000420:	b480      	push	{r7}
 8000422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000424:	bf00      	nop
 8000426:	e7fd      	b.n	8000424 <UsageFault_Handler+0x4>

08000428 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000428:	b480      	push	{r7}
 800042a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800042c:	bf00      	nop
 800042e:	46bd      	mov	sp, r7
 8000430:	bc80      	pop	{r7}
 8000432:	4770      	bx	lr

08000434 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000434:	b480      	push	{r7}
 8000436:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000438:	bf00      	nop
 800043a:	46bd      	mov	sp, r7
 800043c:	bc80      	pop	{r7}
 800043e:	4770      	bx	lr

08000440 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000440:	b480      	push	{r7}
 8000442:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000444:	bf00      	nop
 8000446:	46bd      	mov	sp, r7
 8000448:	bc80      	pop	{r7}
 800044a:	4770      	bx	lr

0800044c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800044c:	b580      	push	{r7, lr}
 800044e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000450:	f000 faea 	bl	8000a28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000454:	bf00      	nop
 8000456:	bd80      	pop	{r7, pc}

08000458 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800045c:	2001      	movs	r0, #1
 800045e:	f001 f84b 	bl	80014f8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000462:	bf00      	nop
 8000464:	bd80      	pop	{r7, pc}
	...

08000468 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8000468:	b580      	push	{r7, lr}
 800046a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800046c:	4802      	ldr	r0, [pc, #8]	@ (8000478 <DMA1_Channel5_IRQHandler+0x10>)
 800046e:	f000 fd73 	bl	8000f58 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8000472:	bf00      	nop
 8000474:	bd80      	pop	{r7, pc}
 8000476:	bf00      	nop
 8000478:	200001d8 	.word	0x200001d8

0800047c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8000480:	2020      	movs	r0, #32
 8000482:	f001 f839 	bl	80014f8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000486:	bf00      	nop
 8000488:	bd80      	pop	{r7, pc}
	...

0800048c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000490:	4803      	ldr	r0, [pc, #12]	@ (80004a0 <USART1_IRQHandler+0x14>)
 8000492:	f001 fd59 	bl	8001f48 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  UART_IRQHandler(&huart1);
 8000496:	4802      	ldr	r0, [pc, #8]	@ (80004a0 <USART1_IRQHandler+0x14>)
 8000498:	f000 f8ac 	bl	80005f4 <UART_IRQHandler>
  /* USER CODE END USART1_IRQn 1 */
}
 800049c:	bf00      	nop
 800049e:	bd80      	pop	{r7, pc}
 80004a0:	20000190 	.word	0x20000190

080004a4 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 1 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80004a4:	b580      	push	{r7, lr}
 80004a6:	b082      	sub	sp, #8
 80004a8:	af00      	add	r7, sp, #0
 80004aa:	4603      	mov	r3, r0
 80004ac:	80fb      	strh	r3, [r7, #6]
	static uint32_t oldUWTick = 0;
	if ((uwTick - oldUWTick) < 200) return;
 80004ae:	4b16      	ldr	r3, [pc, #88]	@ (8000508 <HAL_GPIO_EXTI_Callback+0x64>)
 80004b0:	681a      	ldr	r2, [r3, #0]
 80004b2:	4b16      	ldr	r3, [pc, #88]	@ (800050c <HAL_GPIO_EXTI_Callback+0x68>)
 80004b4:	681b      	ldr	r3, [r3, #0]
 80004b6:	1ad3      	subs	r3, r2, r3
 80004b8:	2bc7      	cmp	r3, #199	@ 0xc7
 80004ba:	d921      	bls.n	8000500 <HAL_GPIO_EXTI_Callback+0x5c>
	oldUWTick = uwTick;
 80004bc:	4b12      	ldr	r3, [pc, #72]	@ (8000508 <HAL_GPIO_EXTI_Callback+0x64>)
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	4a12      	ldr	r2, [pc, #72]	@ (800050c <HAL_GPIO_EXTI_Callback+0x68>)
 80004c2:	6013      	str	r3, [r2, #0]
	if (GPIO_Pin == GPIO_PIN_5)
 80004c4:	88fb      	ldrh	r3, [r7, #6]
 80004c6:	2b20      	cmp	r3, #32
 80004c8:	d10b      	bne.n	80004e2 <HAL_GPIO_EXTI_Callback+0x3e>
	{
		LED_Control(LED1, ON);
 80004ca:	2101      	movs	r1, #1
 80004cc:	2001      	movs	r0, #1
 80004ce:	f7ff fec5 	bl	800025c <LED_Control>
		LED_Control(LED2, ON);
 80004d2:	2101      	movs	r1, #1
 80004d4:	2002      	movs	r0, #2
 80004d6:	f7ff fec1 	bl	800025c <LED_Control>
		printf("GPIO pin 5 has pressed\n");
 80004da:	480d      	ldr	r0, [pc, #52]	@ (8000510 <HAL_GPIO_EXTI_Callback+0x6c>)
 80004dc:	f002 fd56 	bl	8002f8c <puts>
 80004e0:	e00f      	b.n	8000502 <HAL_GPIO_EXTI_Callback+0x5e>
	}
	else if (GPIO_Pin == GPIO_PIN_0)
 80004e2:	88fb      	ldrh	r3, [r7, #6]
 80004e4:	2b01      	cmp	r3, #1
 80004e6:	d10c      	bne.n	8000502 <HAL_GPIO_EXTI_Callback+0x5e>
	{
		LED_Control(LED1, OFF);
 80004e8:	2100      	movs	r1, #0
 80004ea:	2001      	movs	r0, #1
 80004ec:	f7ff feb6 	bl	800025c <LED_Control>
		LED_Control(LED2, OFF);
 80004f0:	2100      	movs	r1, #0
 80004f2:	2002      	movs	r0, #2
 80004f4:	f7ff feb2 	bl	800025c <LED_Control>
		printf("GPIO pin 0 has pressed\n");
 80004f8:	4806      	ldr	r0, [pc, #24]	@ (8000514 <HAL_GPIO_EXTI_Callback+0x70>)
 80004fa:	f002 fd47 	bl	8002f8c <puts>
 80004fe:	e000      	b.n	8000502 <HAL_GPIO_EXTI_Callback+0x5e>
	if ((uwTick - oldUWTick) < 200) return;
 8000500:	bf00      	nop
	}
}
 8000502:	3708      	adds	r7, #8
 8000504:	46bd      	mov	sp, r7
 8000506:	bd80      	pop	{r7, pc}
 8000508:	2000021c 	.word	0x2000021c
 800050c:	20000188 	.word	0x20000188
 8000510:	08003d0c 	.word	0x08003d0c
 8000514:	08003d24 	.word	0x08003d24

08000518 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b084      	sub	sp, #16
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1)
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	4a12      	ldr	r2, [pc, #72]	@ (8000570 <HAL_UART_RxCpltCallback+0x58>)
 8000526:	4293      	cmp	r3, r2
 8000528:	d11e      	bne.n	8000568 <HAL_UART_RxCpltCallback+0x50>
	{
		//HAL_UART_Transmit(&huart1, RX1_Buffer, 4, HAL_MAX_DELAY);
		//HAL_UART_Receive_IT(&huart1, RX1_Buffer, 4);
//		HAL_UART_Transmit_DMA(huart, RX1_Buffer, 1);
//		HAL_UART_Receive_IT(huart, RX1_Buffer, 1);
		uint8_t length = DMA_BUF_SIZE - RX1_OffSet;
 800052a:	4b12      	ldr	r3, [pc, #72]	@ (8000574 <HAL_UART_RxCpltCallback+0x5c>)
 800052c:	781b      	ldrb	r3, [r3, #0]
 800052e:	425b      	negs	r3, r3
 8000530:	73fb      	strb	r3, [r7, #15]
		HAL_UART_Transmit(huart, RX1_Buffer + RX1_OffSet, length, HAL_MAX_DELAY);
 8000532:	4b10      	ldr	r3, [pc, #64]	@ (8000574 <HAL_UART_RxCpltCallback+0x5c>)
 8000534:	781b      	ldrb	r3, [r3, #0]
 8000536:	461a      	mov	r2, r3
 8000538:	4b0f      	ldr	r3, [pc, #60]	@ (8000578 <HAL_UART_RxCpltCallback+0x60>)
 800053a:	18d1      	adds	r1, r2, r3
 800053c:	7bfb      	ldrb	r3, [r7, #15]
 800053e:	b29a      	uxth	r2, r3
 8000540:	f04f 33ff 	mov.w	r3, #4294967295
 8000544:	6878      	ldr	r0, [r7, #4]
 8000546:	f001 fc4f 	bl	8001de8 <HAL_UART_Transmit>
		printf("\n");
 800054a:	200a      	movs	r0, #10
 800054c:	f002 fcc0 	bl	8002ed0 <putchar>
		printf("RX1_OffSet=%d\n", RX1_OffSet + length);
 8000550:	4b08      	ldr	r3, [pc, #32]	@ (8000574 <HAL_UART_RxCpltCallback+0x5c>)
 8000552:	781b      	ldrb	r3, [r3, #0]
 8000554:	461a      	mov	r2, r3
 8000556:	7bfb      	ldrb	r3, [r7, #15]
 8000558:	4413      	add	r3, r2
 800055a:	4619      	mov	r1, r3
 800055c:	4807      	ldr	r0, [pc, #28]	@ (800057c <HAL_UART_RxCpltCallback+0x64>)
 800055e:	f002 fca5 	bl	8002eac <iprintf>
		RX1_OffSet = 0;
 8000562:	4b04      	ldr	r3, [pc, #16]	@ (8000574 <HAL_UART_RxCpltCallback+0x5c>)
 8000564:	2200      	movs	r2, #0
 8000566:	701a      	strb	r2, [r3, #0]
	}
}
 8000568:	bf00      	nop
 800056a:	3710      	adds	r7, #16
 800056c:	46bd      	mov	sp, r7
 800056e:	bd80      	pop	{r7, pc}
 8000570:	40013800 	.word	0x40013800
 8000574:	20000184 	.word	0x20000184
 8000578:	20000084 	.word	0x20000084
 800057c:	08003d3c 	.word	0x08003d3c

08000580 <HAL_UART_RxHalfCpltCallback>:

void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b084      	sub	sp, #16
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1)
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	4a15      	ldr	r2, [pc, #84]	@ (80005e4 <HAL_UART_RxHalfCpltCallback+0x64>)
 800058e:	4293      	cmp	r3, r2
 8000590:	d124      	bne.n	80005dc <HAL_UART_RxHalfCpltCallback+0x5c>
	{
		uint8_t length = DMA_BUF_SIZE / 2 - RX1_OffSet;
 8000592:	4b15      	ldr	r3, [pc, #84]	@ (80005e8 <HAL_UART_RxHalfCpltCallback+0x68>)
 8000594:	781a      	ldrb	r2, [r3, #0]
 8000596:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 800059a:	1a9b      	subs	r3, r3, r2
 800059c:	73fb      	strb	r3, [r7, #15]
		//printf("HLength=%d\n", length);
		HAL_UART_Transmit(huart, RX1_Buffer + RX1_OffSet, length, HAL_MAX_DELAY);
 800059e:	4b12      	ldr	r3, [pc, #72]	@ (80005e8 <HAL_UART_RxHalfCpltCallback+0x68>)
 80005a0:	781b      	ldrb	r3, [r3, #0]
 80005a2:	461a      	mov	r2, r3
 80005a4:	4b11      	ldr	r3, [pc, #68]	@ (80005ec <HAL_UART_RxHalfCpltCallback+0x6c>)
 80005a6:	18d1      	adds	r1, r2, r3
 80005a8:	7bfb      	ldrb	r3, [r7, #15]
 80005aa:	b29a      	uxth	r2, r3
 80005ac:	f04f 33ff 	mov.w	r3, #4294967295
 80005b0:	6878      	ldr	r0, [r7, #4]
 80005b2:	f001 fc19 	bl	8001de8 <HAL_UART_Transmit>
		printf("\n");
 80005b6:	200a      	movs	r0, #10
 80005b8:	f002 fc8a 	bl	8002ed0 <putchar>
		printf("RX1_OffSet=%d\n", RX1_OffSet + length);
 80005bc:	4b0a      	ldr	r3, [pc, #40]	@ (80005e8 <HAL_UART_RxHalfCpltCallback+0x68>)
 80005be:	781b      	ldrb	r3, [r3, #0]
 80005c0:	461a      	mov	r2, r3
 80005c2:	7bfb      	ldrb	r3, [r7, #15]
 80005c4:	4413      	add	r3, r2
 80005c6:	4619      	mov	r1, r3
 80005c8:	4809      	ldr	r0, [pc, #36]	@ (80005f0 <HAL_UART_RxHalfCpltCallback+0x70>)
 80005ca:	f002 fc6f 	bl	8002eac <iprintf>
		RX1_OffSet += length;
 80005ce:	4b06      	ldr	r3, [pc, #24]	@ (80005e8 <HAL_UART_RxHalfCpltCallback+0x68>)
 80005d0:	781a      	ldrb	r2, [r3, #0]
 80005d2:	7bfb      	ldrb	r3, [r7, #15]
 80005d4:	4413      	add	r3, r2
 80005d6:	b2da      	uxtb	r2, r3
 80005d8:	4b03      	ldr	r3, [pc, #12]	@ (80005e8 <HAL_UART_RxHalfCpltCallback+0x68>)
 80005da:	701a      	strb	r2, [r3, #0]
	}
}
 80005dc:	bf00      	nop
 80005de:	3710      	adds	r7, #16
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bd80      	pop	{r7, pc}
 80005e4:	40013800 	.word	0x40013800
 80005e8:	20000184 	.word	0x20000184
 80005ec:	20000084 	.word	0x20000084
 80005f0:	08003d3c 	.word	0x08003d3c

080005f4 <UART_IRQHandler>:

void UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b084      	sub	sp, #16
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1)
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	4a1e      	ldr	r2, [pc, #120]	@ (800067c <UART_IRQHandler+0x88>)
 8000602:	4293      	cmp	r3, r2
 8000604:	d136      	bne.n	8000674 <UART_IRQHandler+0x80>
	{
		if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) != RESET)
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	f003 0310 	and.w	r3, r3, #16
 8000610:	2b10      	cmp	r3, #16
 8000612:	d12f      	bne.n	8000674 <UART_IRQHandler+0x80>
		{
			__HAL_UART_CLEAR_IDLEFLAG(huart);
 8000614:	2300      	movs	r3, #0
 8000616:	60bb      	str	r3, [r7, #8]
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	60bb      	str	r3, [r7, #8]
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	685b      	ldr	r3, [r3, #4]
 8000626:	60bb      	str	r3, [r7, #8]
 8000628:	68bb      	ldr	r3, [r7, #8]
			uint8_t length = DMA_BUF_SIZE - __HAL_DMA_GET_COUNTER(&hdma_usart1_rx) - RX1_OffSet;
 800062a:	4b15      	ldr	r3, [pc, #84]	@ (8000680 <UART_IRQHandler+0x8c>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	685b      	ldr	r3, [r3, #4]
 8000630:	b2da      	uxtb	r2, r3
 8000632:	4b14      	ldr	r3, [pc, #80]	@ (8000684 <UART_IRQHandler+0x90>)
 8000634:	781b      	ldrb	r3, [r3, #0]
 8000636:	4413      	add	r3, r2
 8000638:	b2db      	uxtb	r3, r3
 800063a:	425b      	negs	r3, r3
 800063c:	73fb      	strb	r3, [r7, #15]
			HAL_UART_Transmit(huart, RX1_Buffer + RX1_OffSet, length, HAL_MAX_DELAY);
 800063e:	4b11      	ldr	r3, [pc, #68]	@ (8000684 <UART_IRQHandler+0x90>)
 8000640:	781b      	ldrb	r3, [r3, #0]
 8000642:	461a      	mov	r2, r3
 8000644:	4b10      	ldr	r3, [pc, #64]	@ (8000688 <UART_IRQHandler+0x94>)
 8000646:	18d1      	adds	r1, r2, r3
 8000648:	7bfb      	ldrb	r3, [r7, #15]
 800064a:	b29a      	uxth	r2, r3
 800064c:	f04f 33ff 	mov.w	r3, #4294967295
 8000650:	6878      	ldr	r0, [r7, #4]
 8000652:	f001 fbc9 	bl	8001de8 <HAL_UART_Transmit>
			printf("\n");
 8000656:	200a      	movs	r0, #10
 8000658:	f002 fc3a 	bl	8002ed0 <putchar>
			printf("Idle Length=%d\n", length);
 800065c:	7bfb      	ldrb	r3, [r7, #15]
 800065e:	4619      	mov	r1, r3
 8000660:	480a      	ldr	r0, [pc, #40]	@ (800068c <UART_IRQHandler+0x98>)
 8000662:	f002 fc23 	bl	8002eac <iprintf>
			RX1_OffSet += length;
 8000666:	4b07      	ldr	r3, [pc, #28]	@ (8000684 <UART_IRQHandler+0x90>)
 8000668:	781a      	ldrb	r2, [r3, #0]
 800066a:	7bfb      	ldrb	r3, [r7, #15]
 800066c:	4413      	add	r3, r2
 800066e:	b2da      	uxtb	r2, r3
 8000670:	4b04      	ldr	r3, [pc, #16]	@ (8000684 <UART_IRQHandler+0x90>)
 8000672:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8000674:	bf00      	nop
 8000676:	3710      	adds	r7, #16
 8000678:	46bd      	mov	sp, r7
 800067a:	bd80      	pop	{r7, pc}
 800067c:	40013800 	.word	0x40013800
 8000680:	200001d8 	.word	0x200001d8
 8000684:	20000184 	.word	0x20000184
 8000688:	20000084 	.word	0x20000084
 800068c:	08003d4c 	.word	0x08003d4c

08000690 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b086      	sub	sp, #24
 8000694:	af00      	add	r7, sp, #0
 8000696:	60f8      	str	r0, [r7, #12]
 8000698:	60b9      	str	r1, [r7, #8]
 800069a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800069c:	2300      	movs	r3, #0
 800069e:	617b      	str	r3, [r7, #20]
 80006a0:	e00a      	b.n	80006b8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80006a2:	f3af 8000 	nop.w
 80006a6:	4601      	mov	r1, r0
 80006a8:	68bb      	ldr	r3, [r7, #8]
 80006aa:	1c5a      	adds	r2, r3, #1
 80006ac:	60ba      	str	r2, [r7, #8]
 80006ae:	b2ca      	uxtb	r2, r1
 80006b0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006b2:	697b      	ldr	r3, [r7, #20]
 80006b4:	3301      	adds	r3, #1
 80006b6:	617b      	str	r3, [r7, #20]
 80006b8:	697a      	ldr	r2, [r7, #20]
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	429a      	cmp	r2, r3
 80006be:	dbf0      	blt.n	80006a2 <_read+0x12>
  }

  return len;
 80006c0:	687b      	ldr	r3, [r7, #4]
}
 80006c2:	4618      	mov	r0, r3
 80006c4:	3718      	adds	r7, #24
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}

080006ca <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80006ca:	b580      	push	{r7, lr}
 80006cc:	b086      	sub	sp, #24
 80006ce:	af00      	add	r7, sp, #0
 80006d0:	60f8      	str	r0, [r7, #12]
 80006d2:	60b9      	str	r1, [r7, #8]
 80006d4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006d6:	2300      	movs	r3, #0
 80006d8:	617b      	str	r3, [r7, #20]
 80006da:	e009      	b.n	80006f0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80006dc:	68bb      	ldr	r3, [r7, #8]
 80006de:	1c5a      	adds	r2, r3, #1
 80006e0:	60ba      	str	r2, [r7, #8]
 80006e2:	781b      	ldrb	r3, [r3, #0]
 80006e4:	4618      	mov	r0, r3
 80006e6:	f000 f921 	bl	800092c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006ea:	697b      	ldr	r3, [r7, #20]
 80006ec:	3301      	adds	r3, #1
 80006ee:	617b      	str	r3, [r7, #20]
 80006f0:	697a      	ldr	r2, [r7, #20]
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	429a      	cmp	r2, r3
 80006f6:	dbf1      	blt.n	80006dc <_write+0x12>
  }
  return len;
 80006f8:	687b      	ldr	r3, [r7, #4]
}
 80006fa:	4618      	mov	r0, r3
 80006fc:	3718      	adds	r7, #24
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}

08000702 <_close>:

int _close(int file)
{
 8000702:	b480      	push	{r7}
 8000704:	b083      	sub	sp, #12
 8000706:	af00      	add	r7, sp, #0
 8000708:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800070a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800070e:	4618      	mov	r0, r3
 8000710:	370c      	adds	r7, #12
 8000712:	46bd      	mov	sp, r7
 8000714:	bc80      	pop	{r7}
 8000716:	4770      	bx	lr

08000718 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000718:	b480      	push	{r7}
 800071a:	b083      	sub	sp, #12
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
 8000720:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000722:	683b      	ldr	r3, [r7, #0]
 8000724:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000728:	605a      	str	r2, [r3, #4]
  return 0;
 800072a:	2300      	movs	r3, #0
}
 800072c:	4618      	mov	r0, r3
 800072e:	370c      	adds	r7, #12
 8000730:	46bd      	mov	sp, r7
 8000732:	bc80      	pop	{r7}
 8000734:	4770      	bx	lr

08000736 <_isatty>:

int _isatty(int file)
{
 8000736:	b480      	push	{r7}
 8000738:	b083      	sub	sp, #12
 800073a:	af00      	add	r7, sp, #0
 800073c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800073e:	2301      	movs	r3, #1
}
 8000740:	4618      	mov	r0, r3
 8000742:	370c      	adds	r7, #12
 8000744:	46bd      	mov	sp, r7
 8000746:	bc80      	pop	{r7}
 8000748:	4770      	bx	lr

0800074a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800074a:	b480      	push	{r7}
 800074c:	b085      	sub	sp, #20
 800074e:	af00      	add	r7, sp, #0
 8000750:	60f8      	str	r0, [r7, #12]
 8000752:	60b9      	str	r1, [r7, #8]
 8000754:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000756:	2300      	movs	r3, #0
}
 8000758:	4618      	mov	r0, r3
 800075a:	3714      	adds	r7, #20
 800075c:	46bd      	mov	sp, r7
 800075e:	bc80      	pop	{r7}
 8000760:	4770      	bx	lr
	...

08000764 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b086      	sub	sp, #24
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800076c:	4a14      	ldr	r2, [pc, #80]	@ (80007c0 <_sbrk+0x5c>)
 800076e:	4b15      	ldr	r3, [pc, #84]	@ (80007c4 <_sbrk+0x60>)
 8000770:	1ad3      	subs	r3, r2, r3
 8000772:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000774:	697b      	ldr	r3, [r7, #20]
 8000776:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000778:	4b13      	ldr	r3, [pc, #76]	@ (80007c8 <_sbrk+0x64>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	2b00      	cmp	r3, #0
 800077e:	d102      	bne.n	8000786 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000780:	4b11      	ldr	r3, [pc, #68]	@ (80007c8 <_sbrk+0x64>)
 8000782:	4a12      	ldr	r2, [pc, #72]	@ (80007cc <_sbrk+0x68>)
 8000784:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000786:	4b10      	ldr	r3, [pc, #64]	@ (80007c8 <_sbrk+0x64>)
 8000788:	681a      	ldr	r2, [r3, #0]
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	4413      	add	r3, r2
 800078e:	693a      	ldr	r2, [r7, #16]
 8000790:	429a      	cmp	r2, r3
 8000792:	d207      	bcs.n	80007a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000794:	f002 fd28 	bl	80031e8 <__errno>
 8000798:	4603      	mov	r3, r0
 800079a:	220c      	movs	r2, #12
 800079c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800079e:	f04f 33ff 	mov.w	r3, #4294967295
 80007a2:	e009      	b.n	80007b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80007a4:	4b08      	ldr	r3, [pc, #32]	@ (80007c8 <_sbrk+0x64>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80007aa:	4b07      	ldr	r3, [pc, #28]	@ (80007c8 <_sbrk+0x64>)
 80007ac:	681a      	ldr	r2, [r3, #0]
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	4413      	add	r3, r2
 80007b2:	4a05      	ldr	r2, [pc, #20]	@ (80007c8 <_sbrk+0x64>)
 80007b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80007b6:	68fb      	ldr	r3, [r7, #12]
}
 80007b8:	4618      	mov	r0, r3
 80007ba:	3718      	adds	r7, #24
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	20005000 	.word	0x20005000
 80007c4:	00000400 	.word	0x00000400
 80007c8:	2000018c 	.word	0x2000018c
 80007cc:	20000370 	.word	0x20000370

080007d0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80007d0:	b480      	push	{r7}
 80007d2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007d4:	bf00      	nop
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bc80      	pop	{r7}
 80007da:	4770      	bx	lr

080007dc <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80007e0:	4b11      	ldr	r3, [pc, #68]	@ (8000828 <MX_USART1_UART_Init+0x4c>)
 80007e2:	4a12      	ldr	r2, [pc, #72]	@ (800082c <MX_USART1_UART_Init+0x50>)
 80007e4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80007e6:	4b10      	ldr	r3, [pc, #64]	@ (8000828 <MX_USART1_UART_Init+0x4c>)
 80007e8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007ec:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007ee:	4b0e      	ldr	r3, [pc, #56]	@ (8000828 <MX_USART1_UART_Init+0x4c>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80007f4:	4b0c      	ldr	r3, [pc, #48]	@ (8000828 <MX_USART1_UART_Init+0x4c>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007fa:	4b0b      	ldr	r3, [pc, #44]	@ (8000828 <MX_USART1_UART_Init+0x4c>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000800:	4b09      	ldr	r3, [pc, #36]	@ (8000828 <MX_USART1_UART_Init+0x4c>)
 8000802:	220c      	movs	r2, #12
 8000804:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000806:	4b08      	ldr	r3, [pc, #32]	@ (8000828 <MX_USART1_UART_Init+0x4c>)
 8000808:	2200      	movs	r2, #0
 800080a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800080c:	4b06      	ldr	r3, [pc, #24]	@ (8000828 <MX_USART1_UART_Init+0x4c>)
 800080e:	2200      	movs	r2, #0
 8000810:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000812:	4805      	ldr	r0, [pc, #20]	@ (8000828 <MX_USART1_UART_Init+0x4c>)
 8000814:	f001 fa98 	bl	8001d48 <HAL_UART_Init>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800081e:	f7ff fdb6 	bl	800038e <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000822:	bf00      	nop
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	20000190 	.word	0x20000190
 800082c:	40013800 	.word	0x40013800

08000830 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b088      	sub	sp, #32
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000838:	f107 0310 	add.w	r3, r7, #16
 800083c:	2200      	movs	r2, #0
 800083e:	601a      	str	r2, [r3, #0]
 8000840:	605a      	str	r2, [r3, #4]
 8000842:	609a      	str	r2, [r3, #8]
 8000844:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	4a33      	ldr	r2, [pc, #204]	@ (8000918 <HAL_UART_MspInit+0xe8>)
 800084c:	4293      	cmp	r3, r2
 800084e:	d15f      	bne.n	8000910 <HAL_UART_MspInit+0xe0>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000850:	4b32      	ldr	r3, [pc, #200]	@ (800091c <HAL_UART_MspInit+0xec>)
 8000852:	699b      	ldr	r3, [r3, #24]
 8000854:	4a31      	ldr	r2, [pc, #196]	@ (800091c <HAL_UART_MspInit+0xec>)
 8000856:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800085a:	6193      	str	r3, [r2, #24]
 800085c:	4b2f      	ldr	r3, [pc, #188]	@ (800091c <HAL_UART_MspInit+0xec>)
 800085e:	699b      	ldr	r3, [r3, #24]
 8000860:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000864:	60fb      	str	r3, [r7, #12]
 8000866:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000868:	4b2c      	ldr	r3, [pc, #176]	@ (800091c <HAL_UART_MspInit+0xec>)
 800086a:	699b      	ldr	r3, [r3, #24]
 800086c:	4a2b      	ldr	r2, [pc, #172]	@ (800091c <HAL_UART_MspInit+0xec>)
 800086e:	f043 0304 	orr.w	r3, r3, #4
 8000872:	6193      	str	r3, [r2, #24]
 8000874:	4b29      	ldr	r3, [pc, #164]	@ (800091c <HAL_UART_MspInit+0xec>)
 8000876:	699b      	ldr	r3, [r3, #24]
 8000878:	f003 0304 	and.w	r3, r3, #4
 800087c:	60bb      	str	r3, [r7, #8]
 800087e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000880:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000884:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000886:	2302      	movs	r3, #2
 8000888:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800088a:	2303      	movs	r3, #3
 800088c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800088e:	f107 0310 	add.w	r3, r7, #16
 8000892:	4619      	mov	r1, r3
 8000894:	4822      	ldr	r0, [pc, #136]	@ (8000920 <HAL_UART_MspInit+0xf0>)
 8000896:	f000 fc93 	bl	80011c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800089a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800089e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008a0:	2300      	movs	r3, #0
 80008a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008a4:	2301      	movs	r3, #1
 80008a6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008a8:	f107 0310 	add.w	r3, r7, #16
 80008ac:	4619      	mov	r1, r3
 80008ae:	481c      	ldr	r0, [pc, #112]	@ (8000920 <HAL_UART_MspInit+0xf0>)
 80008b0:	f000 fc86 	bl	80011c0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80008b4:	4b1b      	ldr	r3, [pc, #108]	@ (8000924 <HAL_UART_MspInit+0xf4>)
 80008b6:	4a1c      	ldr	r2, [pc, #112]	@ (8000928 <HAL_UART_MspInit+0xf8>)
 80008b8:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80008ba:	4b1a      	ldr	r3, [pc, #104]	@ (8000924 <HAL_UART_MspInit+0xf4>)
 80008bc:	2200      	movs	r2, #0
 80008be:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80008c0:	4b18      	ldr	r3, [pc, #96]	@ (8000924 <HAL_UART_MspInit+0xf4>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80008c6:	4b17      	ldr	r3, [pc, #92]	@ (8000924 <HAL_UART_MspInit+0xf4>)
 80008c8:	2280      	movs	r2, #128	@ 0x80
 80008ca:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80008cc:	4b15      	ldr	r3, [pc, #84]	@ (8000924 <HAL_UART_MspInit+0xf4>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80008d2:	4b14      	ldr	r3, [pc, #80]	@ (8000924 <HAL_UART_MspInit+0xf4>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80008d8:	4b12      	ldr	r3, [pc, #72]	@ (8000924 <HAL_UART_MspInit+0xf4>)
 80008da:	2220      	movs	r2, #32
 80008dc:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80008de:	4b11      	ldr	r3, [pc, #68]	@ (8000924 <HAL_UART_MspInit+0xf4>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80008e4:	480f      	ldr	r0, [pc, #60]	@ (8000924 <HAL_UART_MspInit+0xf4>)
 80008e6:	f000 f9c9 	bl	8000c7c <HAL_DMA_Init>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d001      	beq.n	80008f4 <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 80008f0:	f7ff fd4d 	bl	800038e <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	4a0b      	ldr	r2, [pc, #44]	@ (8000924 <HAL_UART_MspInit+0xf4>)
 80008f8:	63da      	str	r2, [r3, #60]	@ 0x3c
 80008fa:	4a0a      	ldr	r2, [pc, #40]	@ (8000924 <HAL_UART_MspInit+0xf4>)
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000900:	2200      	movs	r2, #0
 8000902:	2100      	movs	r1, #0
 8000904:	2025      	movs	r0, #37	@ 0x25
 8000906:	f000 f982 	bl	8000c0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800090a:	2025      	movs	r0, #37	@ 0x25
 800090c:	f000 f99b 	bl	8000c46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000910:	bf00      	nop
 8000912:	3720      	adds	r7, #32
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}
 8000918:	40013800 	.word	0x40013800
 800091c:	40021000 	.word	0x40021000
 8000920:	40010800 	.word	0x40010800
 8000924:	200001d8 	.word	0x200001d8
 8000928:	40020058 	.word	0x40020058

0800092c <__io_putchar>:
  }
}

/* USER CODE BEGIN 1 */
int __io_putchar(int ch)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b082      	sub	sp, #8
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000934:	1d39      	adds	r1, r7, #4
 8000936:	f04f 33ff 	mov.w	r3, #4294967295
 800093a:	2201      	movs	r2, #1
 800093c:	4803      	ldr	r0, [pc, #12]	@ (800094c <__io_putchar+0x20>)
 800093e:	f001 fa53 	bl	8001de8 <HAL_UART_Transmit>
  return ch;
 8000942:	687b      	ldr	r3, [r7, #4]
}
 8000944:	4618      	mov	r0, r3
 8000946:	3708      	adds	r7, #8
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}
 800094c:	20000190 	.word	0x20000190

08000950 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000950:	f7ff ff3e 	bl	80007d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000954:	480b      	ldr	r0, [pc, #44]	@ (8000984 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000956:	490c      	ldr	r1, [pc, #48]	@ (8000988 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000958:	4a0c      	ldr	r2, [pc, #48]	@ (800098c <LoopFillZerobss+0x16>)
  movs r3, #0
 800095a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800095c:	e002      	b.n	8000964 <LoopCopyDataInit>

0800095e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800095e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000960:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000962:	3304      	adds	r3, #4

08000964 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000964:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000966:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000968:	d3f9      	bcc.n	800095e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800096a:	4a09      	ldr	r2, [pc, #36]	@ (8000990 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800096c:	4c09      	ldr	r4, [pc, #36]	@ (8000994 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800096e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000970:	e001      	b.n	8000976 <LoopFillZerobss>

08000972 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000972:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000974:	3204      	adds	r2, #4

08000976 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000976:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000978:	d3fb      	bcc.n	8000972 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800097a:	f002 fc3b 	bl	80031f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800097e:	f7ff fca5 	bl	80002cc <main>
  bx lr
 8000982:	4770      	bx	lr
  ldr r0, =_sdata
 8000984:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000988:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 800098c:	08003dc4 	.word	0x08003dc4
  ldr r2, =_sbss
 8000990:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000994:	2000036c 	.word	0x2000036c

08000998 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000998:	e7fe      	b.n	8000998 <ADC1_2_IRQHandler>
	...

0800099c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009a0:	4b08      	ldr	r3, [pc, #32]	@ (80009c4 <HAL_Init+0x28>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	4a07      	ldr	r2, [pc, #28]	@ (80009c4 <HAL_Init+0x28>)
 80009a6:	f043 0310 	orr.w	r3, r3, #16
 80009aa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009ac:	2003      	movs	r0, #3
 80009ae:	f000 f923 	bl	8000bf8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009b2:	200f      	movs	r0, #15
 80009b4:	f000 f808 	bl	80009c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009b8:	f7ff fcf0 	bl	800039c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009bc:	2300      	movs	r3, #0
}
 80009be:	4618      	mov	r0, r3
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	40022000 	.word	0x40022000

080009c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b082      	sub	sp, #8
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009d0:	4b12      	ldr	r3, [pc, #72]	@ (8000a1c <HAL_InitTick+0x54>)
 80009d2:	681a      	ldr	r2, [r3, #0]
 80009d4:	4b12      	ldr	r3, [pc, #72]	@ (8000a20 <HAL_InitTick+0x58>)
 80009d6:	781b      	ldrb	r3, [r3, #0]
 80009d8:	4619      	mov	r1, r3
 80009da:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80009de:	fbb3 f3f1 	udiv	r3, r3, r1
 80009e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80009e6:	4618      	mov	r0, r3
 80009e8:	f000 f93b 	bl	8000c62 <HAL_SYSTICK_Config>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d001      	beq.n	80009f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009f2:	2301      	movs	r3, #1
 80009f4:	e00e      	b.n	8000a14 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	2b0f      	cmp	r3, #15
 80009fa:	d80a      	bhi.n	8000a12 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009fc:	2200      	movs	r2, #0
 80009fe:	6879      	ldr	r1, [r7, #4]
 8000a00:	f04f 30ff 	mov.w	r0, #4294967295
 8000a04:	f000 f903 	bl	8000c0e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a08:	4a06      	ldr	r2, [pc, #24]	@ (8000a24 <HAL_InitTick+0x5c>)
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	e000      	b.n	8000a14 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a12:	2301      	movs	r3, #1
}
 8000a14:	4618      	mov	r0, r3
 8000a16:	3708      	adds	r7, #8
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	20000000 	.word	0x20000000
 8000a20:	20000008 	.word	0x20000008
 8000a24:	20000004 	.word	0x20000004

08000a28 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a2c:	4b05      	ldr	r3, [pc, #20]	@ (8000a44 <HAL_IncTick+0x1c>)
 8000a2e:	781b      	ldrb	r3, [r3, #0]
 8000a30:	461a      	mov	r2, r3
 8000a32:	4b05      	ldr	r3, [pc, #20]	@ (8000a48 <HAL_IncTick+0x20>)
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	4413      	add	r3, r2
 8000a38:	4a03      	ldr	r2, [pc, #12]	@ (8000a48 <HAL_IncTick+0x20>)
 8000a3a:	6013      	str	r3, [r2, #0]
}
 8000a3c:	bf00      	nop
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bc80      	pop	{r7}
 8000a42:	4770      	bx	lr
 8000a44:	20000008 	.word	0x20000008
 8000a48:	2000021c 	.word	0x2000021c

08000a4c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0
  return uwTick;
 8000a50:	4b02      	ldr	r3, [pc, #8]	@ (8000a5c <HAL_GetTick+0x10>)
 8000a52:	681b      	ldr	r3, [r3, #0]
}
 8000a54:	4618      	mov	r0, r3
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bc80      	pop	{r7}
 8000a5a:	4770      	bx	lr
 8000a5c:	2000021c 	.word	0x2000021c

08000a60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a60:	b480      	push	{r7}
 8000a62:	b085      	sub	sp, #20
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	f003 0307 	and.w	r3, r3, #7
 8000a6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a70:	4b0c      	ldr	r3, [pc, #48]	@ (8000aa4 <__NVIC_SetPriorityGrouping+0x44>)
 8000a72:	68db      	ldr	r3, [r3, #12]
 8000a74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a76:	68ba      	ldr	r2, [r7, #8]
 8000a78:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000a7c:	4013      	ands	r3, r2
 8000a7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000a80:	68fb      	ldr	r3, [r7, #12]
 8000a82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a84:	68bb      	ldr	r3, [r7, #8]
 8000a86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a88:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000a8c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a92:	4a04      	ldr	r2, [pc, #16]	@ (8000aa4 <__NVIC_SetPriorityGrouping+0x44>)
 8000a94:	68bb      	ldr	r3, [r7, #8]
 8000a96:	60d3      	str	r3, [r2, #12]
}
 8000a98:	bf00      	nop
 8000a9a:	3714      	adds	r7, #20
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bc80      	pop	{r7}
 8000aa0:	4770      	bx	lr
 8000aa2:	bf00      	nop
 8000aa4:	e000ed00 	.word	0xe000ed00

08000aa8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000aac:	4b04      	ldr	r3, [pc, #16]	@ (8000ac0 <__NVIC_GetPriorityGrouping+0x18>)
 8000aae:	68db      	ldr	r3, [r3, #12]
 8000ab0:	0a1b      	lsrs	r3, r3, #8
 8000ab2:	f003 0307 	and.w	r3, r3, #7
}
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bc80      	pop	{r7}
 8000abc:	4770      	bx	lr
 8000abe:	bf00      	nop
 8000ac0:	e000ed00 	.word	0xe000ed00

08000ac4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	b083      	sub	sp, #12
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	4603      	mov	r3, r0
 8000acc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ace:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	db0b      	blt.n	8000aee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ad6:	79fb      	ldrb	r3, [r7, #7]
 8000ad8:	f003 021f 	and.w	r2, r3, #31
 8000adc:	4906      	ldr	r1, [pc, #24]	@ (8000af8 <__NVIC_EnableIRQ+0x34>)
 8000ade:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ae2:	095b      	lsrs	r3, r3, #5
 8000ae4:	2001      	movs	r0, #1
 8000ae6:	fa00 f202 	lsl.w	r2, r0, r2
 8000aea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000aee:	bf00      	nop
 8000af0:	370c      	adds	r7, #12
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bc80      	pop	{r7}
 8000af6:	4770      	bx	lr
 8000af8:	e000e100 	.word	0xe000e100

08000afc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000afc:	b480      	push	{r7}
 8000afe:	b083      	sub	sp, #12
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	4603      	mov	r3, r0
 8000b04:	6039      	str	r1, [r7, #0]
 8000b06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	db0a      	blt.n	8000b26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b10:	683b      	ldr	r3, [r7, #0]
 8000b12:	b2da      	uxtb	r2, r3
 8000b14:	490c      	ldr	r1, [pc, #48]	@ (8000b48 <__NVIC_SetPriority+0x4c>)
 8000b16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b1a:	0112      	lsls	r2, r2, #4
 8000b1c:	b2d2      	uxtb	r2, r2
 8000b1e:	440b      	add	r3, r1
 8000b20:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b24:	e00a      	b.n	8000b3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b26:	683b      	ldr	r3, [r7, #0]
 8000b28:	b2da      	uxtb	r2, r3
 8000b2a:	4908      	ldr	r1, [pc, #32]	@ (8000b4c <__NVIC_SetPriority+0x50>)
 8000b2c:	79fb      	ldrb	r3, [r7, #7]
 8000b2e:	f003 030f 	and.w	r3, r3, #15
 8000b32:	3b04      	subs	r3, #4
 8000b34:	0112      	lsls	r2, r2, #4
 8000b36:	b2d2      	uxtb	r2, r2
 8000b38:	440b      	add	r3, r1
 8000b3a:	761a      	strb	r2, [r3, #24]
}
 8000b3c:	bf00      	nop
 8000b3e:	370c      	adds	r7, #12
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bc80      	pop	{r7}
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop
 8000b48:	e000e100 	.word	0xe000e100
 8000b4c:	e000ed00 	.word	0xe000ed00

08000b50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b50:	b480      	push	{r7}
 8000b52:	b089      	sub	sp, #36	@ 0x24
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	60f8      	str	r0, [r7, #12]
 8000b58:	60b9      	str	r1, [r7, #8]
 8000b5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	f003 0307 	and.w	r3, r3, #7
 8000b62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b64:	69fb      	ldr	r3, [r7, #28]
 8000b66:	f1c3 0307 	rsb	r3, r3, #7
 8000b6a:	2b04      	cmp	r3, #4
 8000b6c:	bf28      	it	cs
 8000b6e:	2304      	movcs	r3, #4
 8000b70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b72:	69fb      	ldr	r3, [r7, #28]
 8000b74:	3304      	adds	r3, #4
 8000b76:	2b06      	cmp	r3, #6
 8000b78:	d902      	bls.n	8000b80 <NVIC_EncodePriority+0x30>
 8000b7a:	69fb      	ldr	r3, [r7, #28]
 8000b7c:	3b03      	subs	r3, #3
 8000b7e:	e000      	b.n	8000b82 <NVIC_EncodePriority+0x32>
 8000b80:	2300      	movs	r3, #0
 8000b82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b84:	f04f 32ff 	mov.w	r2, #4294967295
 8000b88:	69bb      	ldr	r3, [r7, #24]
 8000b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b8e:	43da      	mvns	r2, r3
 8000b90:	68bb      	ldr	r3, [r7, #8]
 8000b92:	401a      	ands	r2, r3
 8000b94:	697b      	ldr	r3, [r7, #20]
 8000b96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b98:	f04f 31ff 	mov.w	r1, #4294967295
 8000b9c:	697b      	ldr	r3, [r7, #20]
 8000b9e:	fa01 f303 	lsl.w	r3, r1, r3
 8000ba2:	43d9      	mvns	r1, r3
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ba8:	4313      	orrs	r3, r2
         );
}
 8000baa:	4618      	mov	r0, r3
 8000bac:	3724      	adds	r7, #36	@ 0x24
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bc80      	pop	{r7}
 8000bb2:	4770      	bx	lr

08000bb4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b082      	sub	sp, #8
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	3b01      	subs	r3, #1
 8000bc0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000bc4:	d301      	bcc.n	8000bca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	e00f      	b.n	8000bea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bca:	4a0a      	ldr	r2, [pc, #40]	@ (8000bf4 <SysTick_Config+0x40>)
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	3b01      	subs	r3, #1
 8000bd0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bd2:	210f      	movs	r1, #15
 8000bd4:	f04f 30ff 	mov.w	r0, #4294967295
 8000bd8:	f7ff ff90 	bl	8000afc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bdc:	4b05      	ldr	r3, [pc, #20]	@ (8000bf4 <SysTick_Config+0x40>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000be2:	4b04      	ldr	r3, [pc, #16]	@ (8000bf4 <SysTick_Config+0x40>)
 8000be4:	2207      	movs	r2, #7
 8000be6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000be8:	2300      	movs	r3, #0
}
 8000bea:	4618      	mov	r0, r3
 8000bec:	3708      	adds	r7, #8
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	e000e010 	.word	0xe000e010

08000bf8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b082      	sub	sp, #8
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c00:	6878      	ldr	r0, [r7, #4]
 8000c02:	f7ff ff2d 	bl	8000a60 <__NVIC_SetPriorityGrouping>
}
 8000c06:	bf00      	nop
 8000c08:	3708      	adds	r7, #8
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}

08000c0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c0e:	b580      	push	{r7, lr}
 8000c10:	b086      	sub	sp, #24
 8000c12:	af00      	add	r7, sp, #0
 8000c14:	4603      	mov	r3, r0
 8000c16:	60b9      	str	r1, [r7, #8]
 8000c18:	607a      	str	r2, [r7, #4]
 8000c1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c20:	f7ff ff42 	bl	8000aa8 <__NVIC_GetPriorityGrouping>
 8000c24:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c26:	687a      	ldr	r2, [r7, #4]
 8000c28:	68b9      	ldr	r1, [r7, #8]
 8000c2a:	6978      	ldr	r0, [r7, #20]
 8000c2c:	f7ff ff90 	bl	8000b50 <NVIC_EncodePriority>
 8000c30:	4602      	mov	r2, r0
 8000c32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c36:	4611      	mov	r1, r2
 8000c38:	4618      	mov	r0, r3
 8000c3a:	f7ff ff5f 	bl	8000afc <__NVIC_SetPriority>
}
 8000c3e:	bf00      	nop
 8000c40:	3718      	adds	r7, #24
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}

08000c46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c46:	b580      	push	{r7, lr}
 8000c48:	b082      	sub	sp, #8
 8000c4a:	af00      	add	r7, sp, #0
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c54:	4618      	mov	r0, r3
 8000c56:	f7ff ff35 	bl	8000ac4 <__NVIC_EnableIRQ>
}
 8000c5a:	bf00      	nop
 8000c5c:	3708      	adds	r7, #8
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}

08000c62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c62:	b580      	push	{r7, lr}
 8000c64:	b082      	sub	sp, #8
 8000c66:	af00      	add	r7, sp, #0
 8000c68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c6a:	6878      	ldr	r0, [r7, #4]
 8000c6c:	f7ff ffa2 	bl	8000bb4 <SysTick_Config>
 8000c70:	4603      	mov	r3, r0
}
 8000c72:	4618      	mov	r0, r3
 8000c74:	3708      	adds	r7, #8
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
	...

08000c7c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	b085      	sub	sp, #20
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000c84:	2300      	movs	r3, #0
 8000c86:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d101      	bne.n	8000c92 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000c8e:	2301      	movs	r3, #1
 8000c90:	e043      	b.n	8000d1a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	461a      	mov	r2, r3
 8000c98:	4b22      	ldr	r3, [pc, #136]	@ (8000d24 <HAL_DMA_Init+0xa8>)
 8000c9a:	4413      	add	r3, r2
 8000c9c:	4a22      	ldr	r2, [pc, #136]	@ (8000d28 <HAL_DMA_Init+0xac>)
 8000c9e:	fba2 2303 	umull	r2, r3, r2, r3
 8000ca2:	091b      	lsrs	r3, r3, #4
 8000ca4:	009a      	lsls	r2, r3, #2
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	4a1f      	ldr	r2, [pc, #124]	@ (8000d2c <HAL_DMA_Init+0xb0>)
 8000cae:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	2202      	movs	r2, #2
 8000cb4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8000cc6:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8000cca:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000cd4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	68db      	ldr	r3, [r3, #12]
 8000cda:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ce0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	695b      	ldr	r3, [r3, #20]
 8000ce6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000cec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	69db      	ldr	r3, [r3, #28]
 8000cf2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000cf4:	68fa      	ldr	r2, [r7, #12]
 8000cf6:	4313      	orrs	r3, r2
 8000cf8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	68fa      	ldr	r2, [r7, #12]
 8000d00:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	2200      	movs	r2, #0
 8000d06:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	2201      	movs	r2, #1
 8000d0c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	2200      	movs	r2, #0
 8000d14:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000d18:	2300      	movs	r3, #0
}
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	3714      	adds	r7, #20
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bc80      	pop	{r7}
 8000d22:	4770      	bx	lr
 8000d24:	bffdfff8 	.word	0xbffdfff8
 8000d28:	cccccccd 	.word	0xcccccccd
 8000d2c:	40020000 	.word	0x40020000

08000d30 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b086      	sub	sp, #24
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	60f8      	str	r0, [r7, #12]
 8000d38:	60b9      	str	r1, [r7, #8]
 8000d3a:	607a      	str	r2, [r7, #4]
 8000d3c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d48:	2b01      	cmp	r3, #1
 8000d4a:	d101      	bne.n	8000d50 <HAL_DMA_Start_IT+0x20>
 8000d4c:	2302      	movs	r3, #2
 8000d4e:	e04b      	b.n	8000de8 <HAL_DMA_Start_IT+0xb8>
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	2201      	movs	r2, #1
 8000d54:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000d5e:	b2db      	uxtb	r3, r3
 8000d60:	2b01      	cmp	r3, #1
 8000d62:	d13a      	bne.n	8000dda <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	2202      	movs	r2, #2
 8000d68:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	2200      	movs	r2, #0
 8000d70:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	681a      	ldr	r2, [r3, #0]
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	f022 0201 	bic.w	r2, r2, #1
 8000d80:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	687a      	ldr	r2, [r7, #4]
 8000d86:	68b9      	ldr	r1, [r7, #8]
 8000d88:	68f8      	ldr	r0, [r7, #12]
 8000d8a:	f000 f9eb 	bl	8001164 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d008      	beq.n	8000da8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000d96:	68fb      	ldr	r3, [r7, #12]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	681a      	ldr	r2, [r3, #0]
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	f042 020e 	orr.w	r2, r2, #14
 8000da4:	601a      	str	r2, [r3, #0]
 8000da6:	e00f      	b.n	8000dc8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	681a      	ldr	r2, [r3, #0]
 8000dae:	68fb      	ldr	r3, [r7, #12]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	f022 0204 	bic.w	r2, r2, #4
 8000db6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	681a      	ldr	r2, [r3, #0]
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	f042 020a 	orr.w	r2, r2, #10
 8000dc6:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	681a      	ldr	r2, [r3, #0]
 8000dce:	68fb      	ldr	r3, [r7, #12]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	f042 0201 	orr.w	r2, r2, #1
 8000dd6:	601a      	str	r2, [r3, #0]
 8000dd8:	e005      	b.n	8000de6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	2200      	movs	r2, #0
 8000dde:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8000de2:	2302      	movs	r3, #2
 8000de4:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8000de6:	7dfb      	ldrb	r3, [r7, #23]
}
 8000de8:	4618      	mov	r0, r3
 8000dea:	3718      	adds	r7, #24
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}

08000df0 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b085      	sub	sp, #20
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000e02:	b2db      	uxtb	r3, r3
 8000e04:	2b02      	cmp	r3, #2
 8000e06:	d008      	beq.n	8000e1a <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	2204      	movs	r2, #4
 8000e0c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	2200      	movs	r2, #0
 8000e12:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000e16:	2301      	movs	r3, #1
 8000e18:	e020      	b.n	8000e5c <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	681a      	ldr	r2, [r3, #0]
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	f022 020e 	bic.w	r2, r2, #14
 8000e28:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	681a      	ldr	r2, [r3, #0]
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	f022 0201 	bic.w	r2, r2, #1
 8000e38:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000e42:	2101      	movs	r1, #1
 8000e44:	fa01 f202 	lsl.w	r2, r1, r2
 8000e48:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	2200      	movs	r2, #0
 8000e56:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000e5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	3714      	adds	r7, #20
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bc80      	pop	{r7}
 8000e64:	4770      	bx	lr
	...

08000e68 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b084      	sub	sp, #16
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000e70:	2300      	movs	r3, #0
 8000e72:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000e7a:	b2db      	uxtb	r3, r3
 8000e7c:	2b02      	cmp	r3, #2
 8000e7e:	d005      	beq.n	8000e8c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	2204      	movs	r2, #4
 8000e84:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8000e86:	2301      	movs	r3, #1
 8000e88:	73fb      	strb	r3, [r7, #15]
 8000e8a:	e051      	b.n	8000f30 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	681a      	ldr	r2, [r3, #0]
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	f022 020e 	bic.w	r2, r2, #14
 8000e9a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	681a      	ldr	r2, [r3, #0]
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	f022 0201 	bic.w	r2, r2, #1
 8000eaa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	4a22      	ldr	r2, [pc, #136]	@ (8000f3c <HAL_DMA_Abort_IT+0xd4>)
 8000eb2:	4293      	cmp	r3, r2
 8000eb4:	d029      	beq.n	8000f0a <HAL_DMA_Abort_IT+0xa2>
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	4a21      	ldr	r2, [pc, #132]	@ (8000f40 <HAL_DMA_Abort_IT+0xd8>)
 8000ebc:	4293      	cmp	r3, r2
 8000ebe:	d022      	beq.n	8000f06 <HAL_DMA_Abort_IT+0x9e>
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4a1f      	ldr	r2, [pc, #124]	@ (8000f44 <HAL_DMA_Abort_IT+0xdc>)
 8000ec6:	4293      	cmp	r3, r2
 8000ec8:	d01a      	beq.n	8000f00 <HAL_DMA_Abort_IT+0x98>
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	4a1e      	ldr	r2, [pc, #120]	@ (8000f48 <HAL_DMA_Abort_IT+0xe0>)
 8000ed0:	4293      	cmp	r3, r2
 8000ed2:	d012      	beq.n	8000efa <HAL_DMA_Abort_IT+0x92>
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4a1c      	ldr	r2, [pc, #112]	@ (8000f4c <HAL_DMA_Abort_IT+0xe4>)
 8000eda:	4293      	cmp	r3, r2
 8000edc:	d00a      	beq.n	8000ef4 <HAL_DMA_Abort_IT+0x8c>
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	4a1b      	ldr	r2, [pc, #108]	@ (8000f50 <HAL_DMA_Abort_IT+0xe8>)
 8000ee4:	4293      	cmp	r3, r2
 8000ee6:	d102      	bne.n	8000eee <HAL_DMA_Abort_IT+0x86>
 8000ee8:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000eec:	e00e      	b.n	8000f0c <HAL_DMA_Abort_IT+0xa4>
 8000eee:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000ef2:	e00b      	b.n	8000f0c <HAL_DMA_Abort_IT+0xa4>
 8000ef4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000ef8:	e008      	b.n	8000f0c <HAL_DMA_Abort_IT+0xa4>
 8000efa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000efe:	e005      	b.n	8000f0c <HAL_DMA_Abort_IT+0xa4>
 8000f00:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000f04:	e002      	b.n	8000f0c <HAL_DMA_Abort_IT+0xa4>
 8000f06:	2310      	movs	r3, #16
 8000f08:	e000      	b.n	8000f0c <HAL_DMA_Abort_IT+0xa4>
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	4a11      	ldr	r2, [pc, #68]	@ (8000f54 <HAL_DMA_Abort_IT+0xec>)
 8000f0e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	2201      	movs	r2, #1
 8000f14:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d003      	beq.n	8000f30 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f2c:	6878      	ldr	r0, [r7, #4]
 8000f2e:	4798      	blx	r3
    } 
  }
  return status;
 8000f30:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f32:	4618      	mov	r0, r3
 8000f34:	3710      	adds	r7, #16
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	40020008 	.word	0x40020008
 8000f40:	4002001c 	.word	0x4002001c
 8000f44:	40020030 	.word	0x40020030
 8000f48:	40020044 	.word	0x40020044
 8000f4c:	40020058 	.word	0x40020058
 8000f50:	4002006c 	.word	0x4002006c
 8000f54:	40020000 	.word	0x40020000

08000f58 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b084      	sub	sp, #16
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f74:	2204      	movs	r2, #4
 8000f76:	409a      	lsls	r2, r3
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	4013      	ands	r3, r2
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d04f      	beq.n	8001020 <HAL_DMA_IRQHandler+0xc8>
 8000f80:	68bb      	ldr	r3, [r7, #8]
 8000f82:	f003 0304 	and.w	r3, r3, #4
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d04a      	beq.n	8001020 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	f003 0320 	and.w	r3, r3, #32
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d107      	bne.n	8000fa8 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	681a      	ldr	r2, [r3, #0]
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	f022 0204 	bic.w	r2, r2, #4
 8000fa6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	4a66      	ldr	r2, [pc, #408]	@ (8001148 <HAL_DMA_IRQHandler+0x1f0>)
 8000fae:	4293      	cmp	r3, r2
 8000fb0:	d029      	beq.n	8001006 <HAL_DMA_IRQHandler+0xae>
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	4a65      	ldr	r2, [pc, #404]	@ (800114c <HAL_DMA_IRQHandler+0x1f4>)
 8000fb8:	4293      	cmp	r3, r2
 8000fba:	d022      	beq.n	8001002 <HAL_DMA_IRQHandler+0xaa>
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4a63      	ldr	r2, [pc, #396]	@ (8001150 <HAL_DMA_IRQHandler+0x1f8>)
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d01a      	beq.n	8000ffc <HAL_DMA_IRQHandler+0xa4>
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	4a62      	ldr	r2, [pc, #392]	@ (8001154 <HAL_DMA_IRQHandler+0x1fc>)
 8000fcc:	4293      	cmp	r3, r2
 8000fce:	d012      	beq.n	8000ff6 <HAL_DMA_IRQHandler+0x9e>
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	4a60      	ldr	r2, [pc, #384]	@ (8001158 <HAL_DMA_IRQHandler+0x200>)
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d00a      	beq.n	8000ff0 <HAL_DMA_IRQHandler+0x98>
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	4a5f      	ldr	r2, [pc, #380]	@ (800115c <HAL_DMA_IRQHandler+0x204>)
 8000fe0:	4293      	cmp	r3, r2
 8000fe2:	d102      	bne.n	8000fea <HAL_DMA_IRQHandler+0x92>
 8000fe4:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000fe8:	e00e      	b.n	8001008 <HAL_DMA_IRQHandler+0xb0>
 8000fea:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8000fee:	e00b      	b.n	8001008 <HAL_DMA_IRQHandler+0xb0>
 8000ff0:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8000ff4:	e008      	b.n	8001008 <HAL_DMA_IRQHandler+0xb0>
 8000ff6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000ffa:	e005      	b.n	8001008 <HAL_DMA_IRQHandler+0xb0>
 8000ffc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001000:	e002      	b.n	8001008 <HAL_DMA_IRQHandler+0xb0>
 8001002:	2340      	movs	r3, #64	@ 0x40
 8001004:	e000      	b.n	8001008 <HAL_DMA_IRQHandler+0xb0>
 8001006:	2304      	movs	r3, #4
 8001008:	4a55      	ldr	r2, [pc, #340]	@ (8001160 <HAL_DMA_IRQHandler+0x208>)
 800100a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001010:	2b00      	cmp	r3, #0
 8001012:	f000 8094 	beq.w	800113e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800101a:	6878      	ldr	r0, [r7, #4]
 800101c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800101e:	e08e      	b.n	800113e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001024:	2202      	movs	r2, #2
 8001026:	409a      	lsls	r2, r3
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	4013      	ands	r3, r2
 800102c:	2b00      	cmp	r3, #0
 800102e:	d056      	beq.n	80010de <HAL_DMA_IRQHandler+0x186>
 8001030:	68bb      	ldr	r3, [r7, #8]
 8001032:	f003 0302 	and.w	r3, r3, #2
 8001036:	2b00      	cmp	r3, #0
 8001038:	d051      	beq.n	80010de <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f003 0320 	and.w	r3, r3, #32
 8001044:	2b00      	cmp	r3, #0
 8001046:	d10b      	bne.n	8001060 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	681a      	ldr	r2, [r3, #0]
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	f022 020a 	bic.w	r2, r2, #10
 8001056:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	2201      	movs	r2, #1
 800105c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4a38      	ldr	r2, [pc, #224]	@ (8001148 <HAL_DMA_IRQHandler+0x1f0>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d029      	beq.n	80010be <HAL_DMA_IRQHandler+0x166>
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	4a37      	ldr	r2, [pc, #220]	@ (800114c <HAL_DMA_IRQHandler+0x1f4>)
 8001070:	4293      	cmp	r3, r2
 8001072:	d022      	beq.n	80010ba <HAL_DMA_IRQHandler+0x162>
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4a35      	ldr	r2, [pc, #212]	@ (8001150 <HAL_DMA_IRQHandler+0x1f8>)
 800107a:	4293      	cmp	r3, r2
 800107c:	d01a      	beq.n	80010b4 <HAL_DMA_IRQHandler+0x15c>
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	4a34      	ldr	r2, [pc, #208]	@ (8001154 <HAL_DMA_IRQHandler+0x1fc>)
 8001084:	4293      	cmp	r3, r2
 8001086:	d012      	beq.n	80010ae <HAL_DMA_IRQHandler+0x156>
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	4a32      	ldr	r2, [pc, #200]	@ (8001158 <HAL_DMA_IRQHandler+0x200>)
 800108e:	4293      	cmp	r3, r2
 8001090:	d00a      	beq.n	80010a8 <HAL_DMA_IRQHandler+0x150>
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	4a31      	ldr	r2, [pc, #196]	@ (800115c <HAL_DMA_IRQHandler+0x204>)
 8001098:	4293      	cmp	r3, r2
 800109a:	d102      	bne.n	80010a2 <HAL_DMA_IRQHandler+0x14a>
 800109c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80010a0:	e00e      	b.n	80010c0 <HAL_DMA_IRQHandler+0x168>
 80010a2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80010a6:	e00b      	b.n	80010c0 <HAL_DMA_IRQHandler+0x168>
 80010a8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80010ac:	e008      	b.n	80010c0 <HAL_DMA_IRQHandler+0x168>
 80010ae:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80010b2:	e005      	b.n	80010c0 <HAL_DMA_IRQHandler+0x168>
 80010b4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80010b8:	e002      	b.n	80010c0 <HAL_DMA_IRQHandler+0x168>
 80010ba:	2320      	movs	r3, #32
 80010bc:	e000      	b.n	80010c0 <HAL_DMA_IRQHandler+0x168>
 80010be:	2302      	movs	r3, #2
 80010c0:	4a27      	ldr	r2, [pc, #156]	@ (8001160 <HAL_DMA_IRQHandler+0x208>)
 80010c2:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	2200      	movs	r2, #0
 80010c8:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d034      	beq.n	800113e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80010d8:	6878      	ldr	r0, [r7, #4]
 80010da:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80010dc:	e02f      	b.n	800113e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010e2:	2208      	movs	r2, #8
 80010e4:	409a      	lsls	r2, r3
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	4013      	ands	r3, r2
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d028      	beq.n	8001140 <HAL_DMA_IRQHandler+0x1e8>
 80010ee:	68bb      	ldr	r3, [r7, #8]
 80010f0:	f003 0308 	and.w	r3, r3, #8
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d023      	beq.n	8001140 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	681a      	ldr	r2, [r3, #0]
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f022 020e 	bic.w	r2, r2, #14
 8001106:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001110:	2101      	movs	r1, #1
 8001112:	fa01 f202 	lsl.w	r2, r1, r2
 8001116:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	2201      	movs	r2, #1
 800111c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	2201      	movs	r2, #1
 8001122:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	2200      	movs	r2, #0
 800112a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001132:	2b00      	cmp	r3, #0
 8001134:	d004      	beq.n	8001140 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800113a:	6878      	ldr	r0, [r7, #4]
 800113c:	4798      	blx	r3
    }
  }
  return;
 800113e:	bf00      	nop
 8001140:	bf00      	nop
}
 8001142:	3710      	adds	r7, #16
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	40020008 	.word	0x40020008
 800114c:	4002001c 	.word	0x4002001c
 8001150:	40020030 	.word	0x40020030
 8001154:	40020044 	.word	0x40020044
 8001158:	40020058 	.word	0x40020058
 800115c:	4002006c 	.word	0x4002006c
 8001160:	40020000 	.word	0x40020000

08001164 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001164:	b480      	push	{r7}
 8001166:	b085      	sub	sp, #20
 8001168:	af00      	add	r7, sp, #0
 800116a:	60f8      	str	r0, [r7, #12]
 800116c:	60b9      	str	r1, [r7, #8]
 800116e:	607a      	str	r2, [r7, #4]
 8001170:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800117a:	2101      	movs	r1, #1
 800117c:	fa01 f202 	lsl.w	r2, r1, r2
 8001180:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	683a      	ldr	r2, [r7, #0]
 8001188:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	685b      	ldr	r3, [r3, #4]
 800118e:	2b10      	cmp	r3, #16
 8001190:	d108      	bne.n	80011a4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	687a      	ldr	r2, [r7, #4]
 8001198:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	68ba      	ldr	r2, [r7, #8]
 80011a0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80011a2:	e007      	b.n	80011b4 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	68ba      	ldr	r2, [r7, #8]
 80011aa:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	687a      	ldr	r2, [r7, #4]
 80011b2:	60da      	str	r2, [r3, #12]
}
 80011b4:	bf00      	nop
 80011b6:	3714      	adds	r7, #20
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bc80      	pop	{r7}
 80011bc:	4770      	bx	lr
	...

080011c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b08b      	sub	sp, #44	@ 0x2c
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
 80011c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80011ca:	2300      	movs	r3, #0
 80011cc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80011ce:	2300      	movs	r3, #0
 80011d0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011d2:	e169      	b.n	80014a8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80011d4:	2201      	movs	r2, #1
 80011d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011d8:	fa02 f303 	lsl.w	r3, r2, r3
 80011dc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	69fa      	ldr	r2, [r7, #28]
 80011e4:	4013      	ands	r3, r2
 80011e6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80011e8:	69ba      	ldr	r2, [r7, #24]
 80011ea:	69fb      	ldr	r3, [r7, #28]
 80011ec:	429a      	cmp	r2, r3
 80011ee:	f040 8158 	bne.w	80014a2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	4a9a      	ldr	r2, [pc, #616]	@ (8001460 <HAL_GPIO_Init+0x2a0>)
 80011f8:	4293      	cmp	r3, r2
 80011fa:	d05e      	beq.n	80012ba <HAL_GPIO_Init+0xfa>
 80011fc:	4a98      	ldr	r2, [pc, #608]	@ (8001460 <HAL_GPIO_Init+0x2a0>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	d875      	bhi.n	80012ee <HAL_GPIO_Init+0x12e>
 8001202:	4a98      	ldr	r2, [pc, #608]	@ (8001464 <HAL_GPIO_Init+0x2a4>)
 8001204:	4293      	cmp	r3, r2
 8001206:	d058      	beq.n	80012ba <HAL_GPIO_Init+0xfa>
 8001208:	4a96      	ldr	r2, [pc, #600]	@ (8001464 <HAL_GPIO_Init+0x2a4>)
 800120a:	4293      	cmp	r3, r2
 800120c:	d86f      	bhi.n	80012ee <HAL_GPIO_Init+0x12e>
 800120e:	4a96      	ldr	r2, [pc, #600]	@ (8001468 <HAL_GPIO_Init+0x2a8>)
 8001210:	4293      	cmp	r3, r2
 8001212:	d052      	beq.n	80012ba <HAL_GPIO_Init+0xfa>
 8001214:	4a94      	ldr	r2, [pc, #592]	@ (8001468 <HAL_GPIO_Init+0x2a8>)
 8001216:	4293      	cmp	r3, r2
 8001218:	d869      	bhi.n	80012ee <HAL_GPIO_Init+0x12e>
 800121a:	4a94      	ldr	r2, [pc, #592]	@ (800146c <HAL_GPIO_Init+0x2ac>)
 800121c:	4293      	cmp	r3, r2
 800121e:	d04c      	beq.n	80012ba <HAL_GPIO_Init+0xfa>
 8001220:	4a92      	ldr	r2, [pc, #584]	@ (800146c <HAL_GPIO_Init+0x2ac>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d863      	bhi.n	80012ee <HAL_GPIO_Init+0x12e>
 8001226:	4a92      	ldr	r2, [pc, #584]	@ (8001470 <HAL_GPIO_Init+0x2b0>)
 8001228:	4293      	cmp	r3, r2
 800122a:	d046      	beq.n	80012ba <HAL_GPIO_Init+0xfa>
 800122c:	4a90      	ldr	r2, [pc, #576]	@ (8001470 <HAL_GPIO_Init+0x2b0>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d85d      	bhi.n	80012ee <HAL_GPIO_Init+0x12e>
 8001232:	2b12      	cmp	r3, #18
 8001234:	d82a      	bhi.n	800128c <HAL_GPIO_Init+0xcc>
 8001236:	2b12      	cmp	r3, #18
 8001238:	d859      	bhi.n	80012ee <HAL_GPIO_Init+0x12e>
 800123a:	a201      	add	r2, pc, #4	@ (adr r2, 8001240 <HAL_GPIO_Init+0x80>)
 800123c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001240:	080012bb 	.word	0x080012bb
 8001244:	08001295 	.word	0x08001295
 8001248:	080012a7 	.word	0x080012a7
 800124c:	080012e9 	.word	0x080012e9
 8001250:	080012ef 	.word	0x080012ef
 8001254:	080012ef 	.word	0x080012ef
 8001258:	080012ef 	.word	0x080012ef
 800125c:	080012ef 	.word	0x080012ef
 8001260:	080012ef 	.word	0x080012ef
 8001264:	080012ef 	.word	0x080012ef
 8001268:	080012ef 	.word	0x080012ef
 800126c:	080012ef 	.word	0x080012ef
 8001270:	080012ef 	.word	0x080012ef
 8001274:	080012ef 	.word	0x080012ef
 8001278:	080012ef 	.word	0x080012ef
 800127c:	080012ef 	.word	0x080012ef
 8001280:	080012ef 	.word	0x080012ef
 8001284:	0800129d 	.word	0x0800129d
 8001288:	080012b1 	.word	0x080012b1
 800128c:	4a79      	ldr	r2, [pc, #484]	@ (8001474 <HAL_GPIO_Init+0x2b4>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d013      	beq.n	80012ba <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001292:	e02c      	b.n	80012ee <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	68db      	ldr	r3, [r3, #12]
 8001298:	623b      	str	r3, [r7, #32]
          break;
 800129a:	e029      	b.n	80012f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	68db      	ldr	r3, [r3, #12]
 80012a0:	3304      	adds	r3, #4
 80012a2:	623b      	str	r3, [r7, #32]
          break;
 80012a4:	e024      	b.n	80012f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	68db      	ldr	r3, [r3, #12]
 80012aa:	3308      	adds	r3, #8
 80012ac:	623b      	str	r3, [r7, #32]
          break;
 80012ae:	e01f      	b.n	80012f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	68db      	ldr	r3, [r3, #12]
 80012b4:	330c      	adds	r3, #12
 80012b6:	623b      	str	r3, [r7, #32]
          break;
 80012b8:	e01a      	b.n	80012f0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	689b      	ldr	r3, [r3, #8]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d102      	bne.n	80012c8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80012c2:	2304      	movs	r3, #4
 80012c4:	623b      	str	r3, [r7, #32]
          break;
 80012c6:	e013      	b.n	80012f0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	689b      	ldr	r3, [r3, #8]
 80012cc:	2b01      	cmp	r3, #1
 80012ce:	d105      	bne.n	80012dc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80012d0:	2308      	movs	r3, #8
 80012d2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	69fa      	ldr	r2, [r7, #28]
 80012d8:	611a      	str	r2, [r3, #16]
          break;
 80012da:	e009      	b.n	80012f0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80012dc:	2308      	movs	r3, #8
 80012de:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	69fa      	ldr	r2, [r7, #28]
 80012e4:	615a      	str	r2, [r3, #20]
          break;
 80012e6:	e003      	b.n	80012f0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80012e8:	2300      	movs	r3, #0
 80012ea:	623b      	str	r3, [r7, #32]
          break;
 80012ec:	e000      	b.n	80012f0 <HAL_GPIO_Init+0x130>
          break;
 80012ee:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80012f0:	69bb      	ldr	r3, [r7, #24]
 80012f2:	2bff      	cmp	r3, #255	@ 0xff
 80012f4:	d801      	bhi.n	80012fa <HAL_GPIO_Init+0x13a>
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	e001      	b.n	80012fe <HAL_GPIO_Init+0x13e>
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	3304      	adds	r3, #4
 80012fe:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001300:	69bb      	ldr	r3, [r7, #24]
 8001302:	2bff      	cmp	r3, #255	@ 0xff
 8001304:	d802      	bhi.n	800130c <HAL_GPIO_Init+0x14c>
 8001306:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001308:	009b      	lsls	r3, r3, #2
 800130a:	e002      	b.n	8001312 <HAL_GPIO_Init+0x152>
 800130c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800130e:	3b08      	subs	r3, #8
 8001310:	009b      	lsls	r3, r3, #2
 8001312:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001314:	697b      	ldr	r3, [r7, #20]
 8001316:	681a      	ldr	r2, [r3, #0]
 8001318:	210f      	movs	r1, #15
 800131a:	693b      	ldr	r3, [r7, #16]
 800131c:	fa01 f303 	lsl.w	r3, r1, r3
 8001320:	43db      	mvns	r3, r3
 8001322:	401a      	ands	r2, r3
 8001324:	6a39      	ldr	r1, [r7, #32]
 8001326:	693b      	ldr	r3, [r7, #16]
 8001328:	fa01 f303 	lsl.w	r3, r1, r3
 800132c:	431a      	orrs	r2, r3
 800132e:	697b      	ldr	r3, [r7, #20]
 8001330:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800133a:	2b00      	cmp	r3, #0
 800133c:	f000 80b1 	beq.w	80014a2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001340:	4b4d      	ldr	r3, [pc, #308]	@ (8001478 <HAL_GPIO_Init+0x2b8>)
 8001342:	699b      	ldr	r3, [r3, #24]
 8001344:	4a4c      	ldr	r2, [pc, #304]	@ (8001478 <HAL_GPIO_Init+0x2b8>)
 8001346:	f043 0301 	orr.w	r3, r3, #1
 800134a:	6193      	str	r3, [r2, #24]
 800134c:	4b4a      	ldr	r3, [pc, #296]	@ (8001478 <HAL_GPIO_Init+0x2b8>)
 800134e:	699b      	ldr	r3, [r3, #24]
 8001350:	f003 0301 	and.w	r3, r3, #1
 8001354:	60bb      	str	r3, [r7, #8]
 8001356:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001358:	4a48      	ldr	r2, [pc, #288]	@ (800147c <HAL_GPIO_Init+0x2bc>)
 800135a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800135c:	089b      	lsrs	r3, r3, #2
 800135e:	3302      	adds	r3, #2
 8001360:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001364:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001366:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001368:	f003 0303 	and.w	r3, r3, #3
 800136c:	009b      	lsls	r3, r3, #2
 800136e:	220f      	movs	r2, #15
 8001370:	fa02 f303 	lsl.w	r3, r2, r3
 8001374:	43db      	mvns	r3, r3
 8001376:	68fa      	ldr	r2, [r7, #12]
 8001378:	4013      	ands	r3, r2
 800137a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	4a40      	ldr	r2, [pc, #256]	@ (8001480 <HAL_GPIO_Init+0x2c0>)
 8001380:	4293      	cmp	r3, r2
 8001382:	d013      	beq.n	80013ac <HAL_GPIO_Init+0x1ec>
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	4a3f      	ldr	r2, [pc, #252]	@ (8001484 <HAL_GPIO_Init+0x2c4>)
 8001388:	4293      	cmp	r3, r2
 800138a:	d00d      	beq.n	80013a8 <HAL_GPIO_Init+0x1e8>
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	4a3e      	ldr	r2, [pc, #248]	@ (8001488 <HAL_GPIO_Init+0x2c8>)
 8001390:	4293      	cmp	r3, r2
 8001392:	d007      	beq.n	80013a4 <HAL_GPIO_Init+0x1e4>
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	4a3d      	ldr	r2, [pc, #244]	@ (800148c <HAL_GPIO_Init+0x2cc>)
 8001398:	4293      	cmp	r3, r2
 800139a:	d101      	bne.n	80013a0 <HAL_GPIO_Init+0x1e0>
 800139c:	2303      	movs	r3, #3
 800139e:	e006      	b.n	80013ae <HAL_GPIO_Init+0x1ee>
 80013a0:	2304      	movs	r3, #4
 80013a2:	e004      	b.n	80013ae <HAL_GPIO_Init+0x1ee>
 80013a4:	2302      	movs	r3, #2
 80013a6:	e002      	b.n	80013ae <HAL_GPIO_Init+0x1ee>
 80013a8:	2301      	movs	r3, #1
 80013aa:	e000      	b.n	80013ae <HAL_GPIO_Init+0x1ee>
 80013ac:	2300      	movs	r3, #0
 80013ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80013b0:	f002 0203 	and.w	r2, r2, #3
 80013b4:	0092      	lsls	r2, r2, #2
 80013b6:	4093      	lsls	r3, r2
 80013b8:	68fa      	ldr	r2, [r7, #12]
 80013ba:	4313      	orrs	r3, r2
 80013bc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80013be:	492f      	ldr	r1, [pc, #188]	@ (800147c <HAL_GPIO_Init+0x2bc>)
 80013c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013c2:	089b      	lsrs	r3, r3, #2
 80013c4:	3302      	adds	r3, #2
 80013c6:	68fa      	ldr	r2, [r7, #12]
 80013c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d006      	beq.n	80013e6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80013d8:	4b2d      	ldr	r3, [pc, #180]	@ (8001490 <HAL_GPIO_Init+0x2d0>)
 80013da:	689a      	ldr	r2, [r3, #8]
 80013dc:	492c      	ldr	r1, [pc, #176]	@ (8001490 <HAL_GPIO_Init+0x2d0>)
 80013de:	69bb      	ldr	r3, [r7, #24]
 80013e0:	4313      	orrs	r3, r2
 80013e2:	608b      	str	r3, [r1, #8]
 80013e4:	e006      	b.n	80013f4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80013e6:	4b2a      	ldr	r3, [pc, #168]	@ (8001490 <HAL_GPIO_Init+0x2d0>)
 80013e8:	689a      	ldr	r2, [r3, #8]
 80013ea:	69bb      	ldr	r3, [r7, #24]
 80013ec:	43db      	mvns	r3, r3
 80013ee:	4928      	ldr	r1, [pc, #160]	@ (8001490 <HAL_GPIO_Init+0x2d0>)
 80013f0:	4013      	ands	r3, r2
 80013f2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d006      	beq.n	800140e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001400:	4b23      	ldr	r3, [pc, #140]	@ (8001490 <HAL_GPIO_Init+0x2d0>)
 8001402:	68da      	ldr	r2, [r3, #12]
 8001404:	4922      	ldr	r1, [pc, #136]	@ (8001490 <HAL_GPIO_Init+0x2d0>)
 8001406:	69bb      	ldr	r3, [r7, #24]
 8001408:	4313      	orrs	r3, r2
 800140a:	60cb      	str	r3, [r1, #12]
 800140c:	e006      	b.n	800141c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800140e:	4b20      	ldr	r3, [pc, #128]	@ (8001490 <HAL_GPIO_Init+0x2d0>)
 8001410:	68da      	ldr	r2, [r3, #12]
 8001412:	69bb      	ldr	r3, [r7, #24]
 8001414:	43db      	mvns	r3, r3
 8001416:	491e      	ldr	r1, [pc, #120]	@ (8001490 <HAL_GPIO_Init+0x2d0>)
 8001418:	4013      	ands	r3, r2
 800141a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001424:	2b00      	cmp	r3, #0
 8001426:	d006      	beq.n	8001436 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001428:	4b19      	ldr	r3, [pc, #100]	@ (8001490 <HAL_GPIO_Init+0x2d0>)
 800142a:	685a      	ldr	r2, [r3, #4]
 800142c:	4918      	ldr	r1, [pc, #96]	@ (8001490 <HAL_GPIO_Init+0x2d0>)
 800142e:	69bb      	ldr	r3, [r7, #24]
 8001430:	4313      	orrs	r3, r2
 8001432:	604b      	str	r3, [r1, #4]
 8001434:	e006      	b.n	8001444 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001436:	4b16      	ldr	r3, [pc, #88]	@ (8001490 <HAL_GPIO_Init+0x2d0>)
 8001438:	685a      	ldr	r2, [r3, #4]
 800143a:	69bb      	ldr	r3, [r7, #24]
 800143c:	43db      	mvns	r3, r3
 800143e:	4914      	ldr	r1, [pc, #80]	@ (8001490 <HAL_GPIO_Init+0x2d0>)
 8001440:	4013      	ands	r3, r2
 8001442:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800144c:	2b00      	cmp	r3, #0
 800144e:	d021      	beq.n	8001494 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001450:	4b0f      	ldr	r3, [pc, #60]	@ (8001490 <HAL_GPIO_Init+0x2d0>)
 8001452:	681a      	ldr	r2, [r3, #0]
 8001454:	490e      	ldr	r1, [pc, #56]	@ (8001490 <HAL_GPIO_Init+0x2d0>)
 8001456:	69bb      	ldr	r3, [r7, #24]
 8001458:	4313      	orrs	r3, r2
 800145a:	600b      	str	r3, [r1, #0]
 800145c:	e021      	b.n	80014a2 <HAL_GPIO_Init+0x2e2>
 800145e:	bf00      	nop
 8001460:	10320000 	.word	0x10320000
 8001464:	10310000 	.word	0x10310000
 8001468:	10220000 	.word	0x10220000
 800146c:	10210000 	.word	0x10210000
 8001470:	10120000 	.word	0x10120000
 8001474:	10110000 	.word	0x10110000
 8001478:	40021000 	.word	0x40021000
 800147c:	40010000 	.word	0x40010000
 8001480:	40010800 	.word	0x40010800
 8001484:	40010c00 	.word	0x40010c00
 8001488:	40011000 	.word	0x40011000
 800148c:	40011400 	.word	0x40011400
 8001490:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001494:	4b0b      	ldr	r3, [pc, #44]	@ (80014c4 <HAL_GPIO_Init+0x304>)
 8001496:	681a      	ldr	r2, [r3, #0]
 8001498:	69bb      	ldr	r3, [r7, #24]
 800149a:	43db      	mvns	r3, r3
 800149c:	4909      	ldr	r1, [pc, #36]	@ (80014c4 <HAL_GPIO_Init+0x304>)
 800149e:	4013      	ands	r3, r2
 80014a0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80014a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014a4:	3301      	adds	r3, #1
 80014a6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	681a      	ldr	r2, [r3, #0]
 80014ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014ae:	fa22 f303 	lsr.w	r3, r2, r3
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	f47f ae8e 	bne.w	80011d4 <HAL_GPIO_Init+0x14>
  }
}
 80014b8:	bf00      	nop
 80014ba:	bf00      	nop
 80014bc:	372c      	adds	r7, #44	@ 0x2c
 80014be:	46bd      	mov	sp, r7
 80014c0:	bc80      	pop	{r7}
 80014c2:	4770      	bx	lr
 80014c4:	40010400 	.word	0x40010400

080014c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b083      	sub	sp, #12
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
 80014d0:	460b      	mov	r3, r1
 80014d2:	807b      	strh	r3, [r7, #2]
 80014d4:	4613      	mov	r3, r2
 80014d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80014d8:	787b      	ldrb	r3, [r7, #1]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d003      	beq.n	80014e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014de:	887a      	ldrh	r2, [r7, #2]
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80014e4:	e003      	b.n	80014ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80014e6:	887b      	ldrh	r3, [r7, #2]
 80014e8:	041a      	lsls	r2, r3, #16
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	611a      	str	r2, [r3, #16]
}
 80014ee:	bf00      	nop
 80014f0:	370c      	adds	r7, #12
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bc80      	pop	{r7}
 80014f6:	4770      	bx	lr

080014f8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b082      	sub	sp, #8
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	4603      	mov	r3, r0
 8001500:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001502:	4b08      	ldr	r3, [pc, #32]	@ (8001524 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001504:	695a      	ldr	r2, [r3, #20]
 8001506:	88fb      	ldrh	r3, [r7, #6]
 8001508:	4013      	ands	r3, r2
 800150a:	2b00      	cmp	r3, #0
 800150c:	d006      	beq.n	800151c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800150e:	4a05      	ldr	r2, [pc, #20]	@ (8001524 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001510:	88fb      	ldrh	r3, [r7, #6]
 8001512:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001514:	88fb      	ldrh	r3, [r7, #6]
 8001516:	4618      	mov	r0, r3
 8001518:	f7fe ffc4 	bl	80004a4 <HAL_GPIO_EXTI_Callback>
  }
}
 800151c:	bf00      	nop
 800151e:	3708      	adds	r7, #8
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}
 8001524:	40010400 	.word	0x40010400

08001528 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b086      	sub	sp, #24
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d101      	bne.n	800153a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001536:	2301      	movs	r3, #1
 8001538:	e272      	b.n	8001a20 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f003 0301 	and.w	r3, r3, #1
 8001542:	2b00      	cmp	r3, #0
 8001544:	f000 8087 	beq.w	8001656 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001548:	4b92      	ldr	r3, [pc, #584]	@ (8001794 <HAL_RCC_OscConfig+0x26c>)
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	f003 030c 	and.w	r3, r3, #12
 8001550:	2b04      	cmp	r3, #4
 8001552:	d00c      	beq.n	800156e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001554:	4b8f      	ldr	r3, [pc, #572]	@ (8001794 <HAL_RCC_OscConfig+0x26c>)
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	f003 030c 	and.w	r3, r3, #12
 800155c:	2b08      	cmp	r3, #8
 800155e:	d112      	bne.n	8001586 <HAL_RCC_OscConfig+0x5e>
 8001560:	4b8c      	ldr	r3, [pc, #560]	@ (8001794 <HAL_RCC_OscConfig+0x26c>)
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001568:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800156c:	d10b      	bne.n	8001586 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800156e:	4b89      	ldr	r3, [pc, #548]	@ (8001794 <HAL_RCC_OscConfig+0x26c>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001576:	2b00      	cmp	r3, #0
 8001578:	d06c      	beq.n	8001654 <HAL_RCC_OscConfig+0x12c>
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d168      	bne.n	8001654 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001582:	2301      	movs	r3, #1
 8001584:	e24c      	b.n	8001a20 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800158e:	d106      	bne.n	800159e <HAL_RCC_OscConfig+0x76>
 8001590:	4b80      	ldr	r3, [pc, #512]	@ (8001794 <HAL_RCC_OscConfig+0x26c>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4a7f      	ldr	r2, [pc, #508]	@ (8001794 <HAL_RCC_OscConfig+0x26c>)
 8001596:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800159a:	6013      	str	r3, [r2, #0]
 800159c:	e02e      	b.n	80015fc <HAL_RCC_OscConfig+0xd4>
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d10c      	bne.n	80015c0 <HAL_RCC_OscConfig+0x98>
 80015a6:	4b7b      	ldr	r3, [pc, #492]	@ (8001794 <HAL_RCC_OscConfig+0x26c>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4a7a      	ldr	r2, [pc, #488]	@ (8001794 <HAL_RCC_OscConfig+0x26c>)
 80015ac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80015b0:	6013      	str	r3, [r2, #0]
 80015b2:	4b78      	ldr	r3, [pc, #480]	@ (8001794 <HAL_RCC_OscConfig+0x26c>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4a77      	ldr	r2, [pc, #476]	@ (8001794 <HAL_RCC_OscConfig+0x26c>)
 80015b8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80015bc:	6013      	str	r3, [r2, #0]
 80015be:	e01d      	b.n	80015fc <HAL_RCC_OscConfig+0xd4>
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80015c8:	d10c      	bne.n	80015e4 <HAL_RCC_OscConfig+0xbc>
 80015ca:	4b72      	ldr	r3, [pc, #456]	@ (8001794 <HAL_RCC_OscConfig+0x26c>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4a71      	ldr	r2, [pc, #452]	@ (8001794 <HAL_RCC_OscConfig+0x26c>)
 80015d0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80015d4:	6013      	str	r3, [r2, #0]
 80015d6:	4b6f      	ldr	r3, [pc, #444]	@ (8001794 <HAL_RCC_OscConfig+0x26c>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4a6e      	ldr	r2, [pc, #440]	@ (8001794 <HAL_RCC_OscConfig+0x26c>)
 80015dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80015e0:	6013      	str	r3, [r2, #0]
 80015e2:	e00b      	b.n	80015fc <HAL_RCC_OscConfig+0xd4>
 80015e4:	4b6b      	ldr	r3, [pc, #428]	@ (8001794 <HAL_RCC_OscConfig+0x26c>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4a6a      	ldr	r2, [pc, #424]	@ (8001794 <HAL_RCC_OscConfig+0x26c>)
 80015ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80015ee:	6013      	str	r3, [r2, #0]
 80015f0:	4b68      	ldr	r3, [pc, #416]	@ (8001794 <HAL_RCC_OscConfig+0x26c>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a67      	ldr	r2, [pc, #412]	@ (8001794 <HAL_RCC_OscConfig+0x26c>)
 80015f6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80015fa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	2b00      	cmp	r3, #0
 8001602:	d013      	beq.n	800162c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001604:	f7ff fa22 	bl	8000a4c <HAL_GetTick>
 8001608:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800160a:	e008      	b.n	800161e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800160c:	f7ff fa1e 	bl	8000a4c <HAL_GetTick>
 8001610:	4602      	mov	r2, r0
 8001612:	693b      	ldr	r3, [r7, #16]
 8001614:	1ad3      	subs	r3, r2, r3
 8001616:	2b64      	cmp	r3, #100	@ 0x64
 8001618:	d901      	bls.n	800161e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800161a:	2303      	movs	r3, #3
 800161c:	e200      	b.n	8001a20 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800161e:	4b5d      	ldr	r3, [pc, #372]	@ (8001794 <HAL_RCC_OscConfig+0x26c>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001626:	2b00      	cmp	r3, #0
 8001628:	d0f0      	beq.n	800160c <HAL_RCC_OscConfig+0xe4>
 800162a:	e014      	b.n	8001656 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800162c:	f7ff fa0e 	bl	8000a4c <HAL_GetTick>
 8001630:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001632:	e008      	b.n	8001646 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001634:	f7ff fa0a 	bl	8000a4c <HAL_GetTick>
 8001638:	4602      	mov	r2, r0
 800163a:	693b      	ldr	r3, [r7, #16]
 800163c:	1ad3      	subs	r3, r2, r3
 800163e:	2b64      	cmp	r3, #100	@ 0x64
 8001640:	d901      	bls.n	8001646 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001642:	2303      	movs	r3, #3
 8001644:	e1ec      	b.n	8001a20 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001646:	4b53      	ldr	r3, [pc, #332]	@ (8001794 <HAL_RCC_OscConfig+0x26c>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800164e:	2b00      	cmp	r3, #0
 8001650:	d1f0      	bne.n	8001634 <HAL_RCC_OscConfig+0x10c>
 8001652:	e000      	b.n	8001656 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001654:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f003 0302 	and.w	r3, r3, #2
 800165e:	2b00      	cmp	r3, #0
 8001660:	d063      	beq.n	800172a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001662:	4b4c      	ldr	r3, [pc, #304]	@ (8001794 <HAL_RCC_OscConfig+0x26c>)
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	f003 030c 	and.w	r3, r3, #12
 800166a:	2b00      	cmp	r3, #0
 800166c:	d00b      	beq.n	8001686 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800166e:	4b49      	ldr	r3, [pc, #292]	@ (8001794 <HAL_RCC_OscConfig+0x26c>)
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	f003 030c 	and.w	r3, r3, #12
 8001676:	2b08      	cmp	r3, #8
 8001678:	d11c      	bne.n	80016b4 <HAL_RCC_OscConfig+0x18c>
 800167a:	4b46      	ldr	r3, [pc, #280]	@ (8001794 <HAL_RCC_OscConfig+0x26c>)
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001682:	2b00      	cmp	r3, #0
 8001684:	d116      	bne.n	80016b4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001686:	4b43      	ldr	r3, [pc, #268]	@ (8001794 <HAL_RCC_OscConfig+0x26c>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f003 0302 	and.w	r3, r3, #2
 800168e:	2b00      	cmp	r3, #0
 8001690:	d005      	beq.n	800169e <HAL_RCC_OscConfig+0x176>
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	691b      	ldr	r3, [r3, #16]
 8001696:	2b01      	cmp	r3, #1
 8001698:	d001      	beq.n	800169e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800169a:	2301      	movs	r3, #1
 800169c:	e1c0      	b.n	8001a20 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800169e:	4b3d      	ldr	r3, [pc, #244]	@ (8001794 <HAL_RCC_OscConfig+0x26c>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	695b      	ldr	r3, [r3, #20]
 80016aa:	00db      	lsls	r3, r3, #3
 80016ac:	4939      	ldr	r1, [pc, #228]	@ (8001794 <HAL_RCC_OscConfig+0x26c>)
 80016ae:	4313      	orrs	r3, r2
 80016b0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016b2:	e03a      	b.n	800172a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	691b      	ldr	r3, [r3, #16]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d020      	beq.n	80016fe <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016bc:	4b36      	ldr	r3, [pc, #216]	@ (8001798 <HAL_RCC_OscConfig+0x270>)
 80016be:	2201      	movs	r2, #1
 80016c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016c2:	f7ff f9c3 	bl	8000a4c <HAL_GetTick>
 80016c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016c8:	e008      	b.n	80016dc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016ca:	f7ff f9bf 	bl	8000a4c <HAL_GetTick>
 80016ce:	4602      	mov	r2, r0
 80016d0:	693b      	ldr	r3, [r7, #16]
 80016d2:	1ad3      	subs	r3, r2, r3
 80016d4:	2b02      	cmp	r3, #2
 80016d6:	d901      	bls.n	80016dc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80016d8:	2303      	movs	r3, #3
 80016da:	e1a1      	b.n	8001a20 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016dc:	4b2d      	ldr	r3, [pc, #180]	@ (8001794 <HAL_RCC_OscConfig+0x26c>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f003 0302 	and.w	r3, r3, #2
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d0f0      	beq.n	80016ca <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016e8:	4b2a      	ldr	r3, [pc, #168]	@ (8001794 <HAL_RCC_OscConfig+0x26c>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	695b      	ldr	r3, [r3, #20]
 80016f4:	00db      	lsls	r3, r3, #3
 80016f6:	4927      	ldr	r1, [pc, #156]	@ (8001794 <HAL_RCC_OscConfig+0x26c>)
 80016f8:	4313      	orrs	r3, r2
 80016fa:	600b      	str	r3, [r1, #0]
 80016fc:	e015      	b.n	800172a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016fe:	4b26      	ldr	r3, [pc, #152]	@ (8001798 <HAL_RCC_OscConfig+0x270>)
 8001700:	2200      	movs	r2, #0
 8001702:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001704:	f7ff f9a2 	bl	8000a4c <HAL_GetTick>
 8001708:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800170a:	e008      	b.n	800171e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800170c:	f7ff f99e 	bl	8000a4c <HAL_GetTick>
 8001710:	4602      	mov	r2, r0
 8001712:	693b      	ldr	r3, [r7, #16]
 8001714:	1ad3      	subs	r3, r2, r3
 8001716:	2b02      	cmp	r3, #2
 8001718:	d901      	bls.n	800171e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800171a:	2303      	movs	r3, #3
 800171c:	e180      	b.n	8001a20 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800171e:	4b1d      	ldr	r3, [pc, #116]	@ (8001794 <HAL_RCC_OscConfig+0x26c>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f003 0302 	and.w	r3, r3, #2
 8001726:	2b00      	cmp	r3, #0
 8001728:	d1f0      	bne.n	800170c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f003 0308 	and.w	r3, r3, #8
 8001732:	2b00      	cmp	r3, #0
 8001734:	d03a      	beq.n	80017ac <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	699b      	ldr	r3, [r3, #24]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d019      	beq.n	8001772 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800173e:	4b17      	ldr	r3, [pc, #92]	@ (800179c <HAL_RCC_OscConfig+0x274>)
 8001740:	2201      	movs	r2, #1
 8001742:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001744:	f7ff f982 	bl	8000a4c <HAL_GetTick>
 8001748:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800174a:	e008      	b.n	800175e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800174c:	f7ff f97e 	bl	8000a4c <HAL_GetTick>
 8001750:	4602      	mov	r2, r0
 8001752:	693b      	ldr	r3, [r7, #16]
 8001754:	1ad3      	subs	r3, r2, r3
 8001756:	2b02      	cmp	r3, #2
 8001758:	d901      	bls.n	800175e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800175a:	2303      	movs	r3, #3
 800175c:	e160      	b.n	8001a20 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800175e:	4b0d      	ldr	r3, [pc, #52]	@ (8001794 <HAL_RCC_OscConfig+0x26c>)
 8001760:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001762:	f003 0302 	and.w	r3, r3, #2
 8001766:	2b00      	cmp	r3, #0
 8001768:	d0f0      	beq.n	800174c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800176a:	2001      	movs	r0, #1
 800176c:	f000 face 	bl	8001d0c <RCC_Delay>
 8001770:	e01c      	b.n	80017ac <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001772:	4b0a      	ldr	r3, [pc, #40]	@ (800179c <HAL_RCC_OscConfig+0x274>)
 8001774:	2200      	movs	r2, #0
 8001776:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001778:	f7ff f968 	bl	8000a4c <HAL_GetTick>
 800177c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800177e:	e00f      	b.n	80017a0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001780:	f7ff f964 	bl	8000a4c <HAL_GetTick>
 8001784:	4602      	mov	r2, r0
 8001786:	693b      	ldr	r3, [r7, #16]
 8001788:	1ad3      	subs	r3, r2, r3
 800178a:	2b02      	cmp	r3, #2
 800178c:	d908      	bls.n	80017a0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800178e:	2303      	movs	r3, #3
 8001790:	e146      	b.n	8001a20 <HAL_RCC_OscConfig+0x4f8>
 8001792:	bf00      	nop
 8001794:	40021000 	.word	0x40021000
 8001798:	42420000 	.word	0x42420000
 800179c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017a0:	4b92      	ldr	r3, [pc, #584]	@ (80019ec <HAL_RCC_OscConfig+0x4c4>)
 80017a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017a4:	f003 0302 	and.w	r3, r3, #2
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d1e9      	bne.n	8001780 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f003 0304 	and.w	r3, r3, #4
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	f000 80a6 	beq.w	8001906 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017ba:	2300      	movs	r3, #0
 80017bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017be:	4b8b      	ldr	r3, [pc, #556]	@ (80019ec <HAL_RCC_OscConfig+0x4c4>)
 80017c0:	69db      	ldr	r3, [r3, #28]
 80017c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d10d      	bne.n	80017e6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017ca:	4b88      	ldr	r3, [pc, #544]	@ (80019ec <HAL_RCC_OscConfig+0x4c4>)
 80017cc:	69db      	ldr	r3, [r3, #28]
 80017ce:	4a87      	ldr	r2, [pc, #540]	@ (80019ec <HAL_RCC_OscConfig+0x4c4>)
 80017d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017d4:	61d3      	str	r3, [r2, #28]
 80017d6:	4b85      	ldr	r3, [pc, #532]	@ (80019ec <HAL_RCC_OscConfig+0x4c4>)
 80017d8:	69db      	ldr	r3, [r3, #28]
 80017da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017de:	60bb      	str	r3, [r7, #8]
 80017e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80017e2:	2301      	movs	r3, #1
 80017e4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017e6:	4b82      	ldr	r3, [pc, #520]	@ (80019f0 <HAL_RCC_OscConfig+0x4c8>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d118      	bne.n	8001824 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80017f2:	4b7f      	ldr	r3, [pc, #508]	@ (80019f0 <HAL_RCC_OscConfig+0x4c8>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4a7e      	ldr	r2, [pc, #504]	@ (80019f0 <HAL_RCC_OscConfig+0x4c8>)
 80017f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80017fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017fe:	f7ff f925 	bl	8000a4c <HAL_GetTick>
 8001802:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001804:	e008      	b.n	8001818 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001806:	f7ff f921 	bl	8000a4c <HAL_GetTick>
 800180a:	4602      	mov	r2, r0
 800180c:	693b      	ldr	r3, [r7, #16]
 800180e:	1ad3      	subs	r3, r2, r3
 8001810:	2b64      	cmp	r3, #100	@ 0x64
 8001812:	d901      	bls.n	8001818 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001814:	2303      	movs	r3, #3
 8001816:	e103      	b.n	8001a20 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001818:	4b75      	ldr	r3, [pc, #468]	@ (80019f0 <HAL_RCC_OscConfig+0x4c8>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001820:	2b00      	cmp	r3, #0
 8001822:	d0f0      	beq.n	8001806 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	68db      	ldr	r3, [r3, #12]
 8001828:	2b01      	cmp	r3, #1
 800182a:	d106      	bne.n	800183a <HAL_RCC_OscConfig+0x312>
 800182c:	4b6f      	ldr	r3, [pc, #444]	@ (80019ec <HAL_RCC_OscConfig+0x4c4>)
 800182e:	6a1b      	ldr	r3, [r3, #32]
 8001830:	4a6e      	ldr	r2, [pc, #440]	@ (80019ec <HAL_RCC_OscConfig+0x4c4>)
 8001832:	f043 0301 	orr.w	r3, r3, #1
 8001836:	6213      	str	r3, [r2, #32]
 8001838:	e02d      	b.n	8001896 <HAL_RCC_OscConfig+0x36e>
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	68db      	ldr	r3, [r3, #12]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d10c      	bne.n	800185c <HAL_RCC_OscConfig+0x334>
 8001842:	4b6a      	ldr	r3, [pc, #424]	@ (80019ec <HAL_RCC_OscConfig+0x4c4>)
 8001844:	6a1b      	ldr	r3, [r3, #32]
 8001846:	4a69      	ldr	r2, [pc, #420]	@ (80019ec <HAL_RCC_OscConfig+0x4c4>)
 8001848:	f023 0301 	bic.w	r3, r3, #1
 800184c:	6213      	str	r3, [r2, #32]
 800184e:	4b67      	ldr	r3, [pc, #412]	@ (80019ec <HAL_RCC_OscConfig+0x4c4>)
 8001850:	6a1b      	ldr	r3, [r3, #32]
 8001852:	4a66      	ldr	r2, [pc, #408]	@ (80019ec <HAL_RCC_OscConfig+0x4c4>)
 8001854:	f023 0304 	bic.w	r3, r3, #4
 8001858:	6213      	str	r3, [r2, #32]
 800185a:	e01c      	b.n	8001896 <HAL_RCC_OscConfig+0x36e>
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	68db      	ldr	r3, [r3, #12]
 8001860:	2b05      	cmp	r3, #5
 8001862:	d10c      	bne.n	800187e <HAL_RCC_OscConfig+0x356>
 8001864:	4b61      	ldr	r3, [pc, #388]	@ (80019ec <HAL_RCC_OscConfig+0x4c4>)
 8001866:	6a1b      	ldr	r3, [r3, #32]
 8001868:	4a60      	ldr	r2, [pc, #384]	@ (80019ec <HAL_RCC_OscConfig+0x4c4>)
 800186a:	f043 0304 	orr.w	r3, r3, #4
 800186e:	6213      	str	r3, [r2, #32]
 8001870:	4b5e      	ldr	r3, [pc, #376]	@ (80019ec <HAL_RCC_OscConfig+0x4c4>)
 8001872:	6a1b      	ldr	r3, [r3, #32]
 8001874:	4a5d      	ldr	r2, [pc, #372]	@ (80019ec <HAL_RCC_OscConfig+0x4c4>)
 8001876:	f043 0301 	orr.w	r3, r3, #1
 800187a:	6213      	str	r3, [r2, #32]
 800187c:	e00b      	b.n	8001896 <HAL_RCC_OscConfig+0x36e>
 800187e:	4b5b      	ldr	r3, [pc, #364]	@ (80019ec <HAL_RCC_OscConfig+0x4c4>)
 8001880:	6a1b      	ldr	r3, [r3, #32]
 8001882:	4a5a      	ldr	r2, [pc, #360]	@ (80019ec <HAL_RCC_OscConfig+0x4c4>)
 8001884:	f023 0301 	bic.w	r3, r3, #1
 8001888:	6213      	str	r3, [r2, #32]
 800188a:	4b58      	ldr	r3, [pc, #352]	@ (80019ec <HAL_RCC_OscConfig+0x4c4>)
 800188c:	6a1b      	ldr	r3, [r3, #32]
 800188e:	4a57      	ldr	r2, [pc, #348]	@ (80019ec <HAL_RCC_OscConfig+0x4c4>)
 8001890:	f023 0304 	bic.w	r3, r3, #4
 8001894:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	68db      	ldr	r3, [r3, #12]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d015      	beq.n	80018ca <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800189e:	f7ff f8d5 	bl	8000a4c <HAL_GetTick>
 80018a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018a4:	e00a      	b.n	80018bc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018a6:	f7ff f8d1 	bl	8000a4c <HAL_GetTick>
 80018aa:	4602      	mov	r2, r0
 80018ac:	693b      	ldr	r3, [r7, #16]
 80018ae:	1ad3      	subs	r3, r2, r3
 80018b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018b4:	4293      	cmp	r3, r2
 80018b6:	d901      	bls.n	80018bc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80018b8:	2303      	movs	r3, #3
 80018ba:	e0b1      	b.n	8001a20 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018bc:	4b4b      	ldr	r3, [pc, #300]	@ (80019ec <HAL_RCC_OscConfig+0x4c4>)
 80018be:	6a1b      	ldr	r3, [r3, #32]
 80018c0:	f003 0302 	and.w	r3, r3, #2
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d0ee      	beq.n	80018a6 <HAL_RCC_OscConfig+0x37e>
 80018c8:	e014      	b.n	80018f4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018ca:	f7ff f8bf 	bl	8000a4c <HAL_GetTick>
 80018ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018d0:	e00a      	b.n	80018e8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018d2:	f7ff f8bb 	bl	8000a4c <HAL_GetTick>
 80018d6:	4602      	mov	r2, r0
 80018d8:	693b      	ldr	r3, [r7, #16]
 80018da:	1ad3      	subs	r3, r2, r3
 80018dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018e0:	4293      	cmp	r3, r2
 80018e2:	d901      	bls.n	80018e8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80018e4:	2303      	movs	r3, #3
 80018e6:	e09b      	b.n	8001a20 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018e8:	4b40      	ldr	r3, [pc, #256]	@ (80019ec <HAL_RCC_OscConfig+0x4c4>)
 80018ea:	6a1b      	ldr	r3, [r3, #32]
 80018ec:	f003 0302 	and.w	r3, r3, #2
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d1ee      	bne.n	80018d2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80018f4:	7dfb      	ldrb	r3, [r7, #23]
 80018f6:	2b01      	cmp	r3, #1
 80018f8:	d105      	bne.n	8001906 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018fa:	4b3c      	ldr	r3, [pc, #240]	@ (80019ec <HAL_RCC_OscConfig+0x4c4>)
 80018fc:	69db      	ldr	r3, [r3, #28]
 80018fe:	4a3b      	ldr	r2, [pc, #236]	@ (80019ec <HAL_RCC_OscConfig+0x4c4>)
 8001900:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001904:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	69db      	ldr	r3, [r3, #28]
 800190a:	2b00      	cmp	r3, #0
 800190c:	f000 8087 	beq.w	8001a1e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001910:	4b36      	ldr	r3, [pc, #216]	@ (80019ec <HAL_RCC_OscConfig+0x4c4>)
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	f003 030c 	and.w	r3, r3, #12
 8001918:	2b08      	cmp	r3, #8
 800191a:	d061      	beq.n	80019e0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	69db      	ldr	r3, [r3, #28]
 8001920:	2b02      	cmp	r3, #2
 8001922:	d146      	bne.n	80019b2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001924:	4b33      	ldr	r3, [pc, #204]	@ (80019f4 <HAL_RCC_OscConfig+0x4cc>)
 8001926:	2200      	movs	r2, #0
 8001928:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800192a:	f7ff f88f 	bl	8000a4c <HAL_GetTick>
 800192e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001930:	e008      	b.n	8001944 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001932:	f7ff f88b 	bl	8000a4c <HAL_GetTick>
 8001936:	4602      	mov	r2, r0
 8001938:	693b      	ldr	r3, [r7, #16]
 800193a:	1ad3      	subs	r3, r2, r3
 800193c:	2b02      	cmp	r3, #2
 800193e:	d901      	bls.n	8001944 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001940:	2303      	movs	r3, #3
 8001942:	e06d      	b.n	8001a20 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001944:	4b29      	ldr	r3, [pc, #164]	@ (80019ec <HAL_RCC_OscConfig+0x4c4>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800194c:	2b00      	cmp	r3, #0
 800194e:	d1f0      	bne.n	8001932 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6a1b      	ldr	r3, [r3, #32]
 8001954:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001958:	d108      	bne.n	800196c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800195a:	4b24      	ldr	r3, [pc, #144]	@ (80019ec <HAL_RCC_OscConfig+0x4c4>)
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	689b      	ldr	r3, [r3, #8]
 8001966:	4921      	ldr	r1, [pc, #132]	@ (80019ec <HAL_RCC_OscConfig+0x4c4>)
 8001968:	4313      	orrs	r3, r2
 800196a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800196c:	4b1f      	ldr	r3, [pc, #124]	@ (80019ec <HAL_RCC_OscConfig+0x4c4>)
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6a19      	ldr	r1, [r3, #32]
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800197c:	430b      	orrs	r3, r1
 800197e:	491b      	ldr	r1, [pc, #108]	@ (80019ec <HAL_RCC_OscConfig+0x4c4>)
 8001980:	4313      	orrs	r3, r2
 8001982:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001984:	4b1b      	ldr	r3, [pc, #108]	@ (80019f4 <HAL_RCC_OscConfig+0x4cc>)
 8001986:	2201      	movs	r2, #1
 8001988:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800198a:	f7ff f85f 	bl	8000a4c <HAL_GetTick>
 800198e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001990:	e008      	b.n	80019a4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001992:	f7ff f85b 	bl	8000a4c <HAL_GetTick>
 8001996:	4602      	mov	r2, r0
 8001998:	693b      	ldr	r3, [r7, #16]
 800199a:	1ad3      	subs	r3, r2, r3
 800199c:	2b02      	cmp	r3, #2
 800199e:	d901      	bls.n	80019a4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80019a0:	2303      	movs	r3, #3
 80019a2:	e03d      	b.n	8001a20 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80019a4:	4b11      	ldr	r3, [pc, #68]	@ (80019ec <HAL_RCC_OscConfig+0x4c4>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d0f0      	beq.n	8001992 <HAL_RCC_OscConfig+0x46a>
 80019b0:	e035      	b.n	8001a1e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019b2:	4b10      	ldr	r3, [pc, #64]	@ (80019f4 <HAL_RCC_OscConfig+0x4cc>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019b8:	f7ff f848 	bl	8000a4c <HAL_GetTick>
 80019bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019be:	e008      	b.n	80019d2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019c0:	f7ff f844 	bl	8000a4c <HAL_GetTick>
 80019c4:	4602      	mov	r2, r0
 80019c6:	693b      	ldr	r3, [r7, #16]
 80019c8:	1ad3      	subs	r3, r2, r3
 80019ca:	2b02      	cmp	r3, #2
 80019cc:	d901      	bls.n	80019d2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80019ce:	2303      	movs	r3, #3
 80019d0:	e026      	b.n	8001a20 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019d2:	4b06      	ldr	r3, [pc, #24]	@ (80019ec <HAL_RCC_OscConfig+0x4c4>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d1f0      	bne.n	80019c0 <HAL_RCC_OscConfig+0x498>
 80019de:	e01e      	b.n	8001a1e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	69db      	ldr	r3, [r3, #28]
 80019e4:	2b01      	cmp	r3, #1
 80019e6:	d107      	bne.n	80019f8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80019e8:	2301      	movs	r3, #1
 80019ea:	e019      	b.n	8001a20 <HAL_RCC_OscConfig+0x4f8>
 80019ec:	40021000 	.word	0x40021000
 80019f0:	40007000 	.word	0x40007000
 80019f4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80019f8:	4b0b      	ldr	r3, [pc, #44]	@ (8001a28 <HAL_RCC_OscConfig+0x500>)
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6a1b      	ldr	r3, [r3, #32]
 8001a08:	429a      	cmp	r2, r3
 8001a0a:	d106      	bne.n	8001a1a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a16:	429a      	cmp	r2, r3
 8001a18:	d001      	beq.n	8001a1e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	e000      	b.n	8001a20 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001a1e:	2300      	movs	r3, #0
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	3718      	adds	r7, #24
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}
 8001a28:	40021000 	.word	0x40021000

08001a2c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b084      	sub	sp, #16
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
 8001a34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d101      	bne.n	8001a40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	e0d0      	b.n	8001be2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a40:	4b6a      	ldr	r3, [pc, #424]	@ (8001bec <HAL_RCC_ClockConfig+0x1c0>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f003 0307 	and.w	r3, r3, #7
 8001a48:	683a      	ldr	r2, [r7, #0]
 8001a4a:	429a      	cmp	r2, r3
 8001a4c:	d910      	bls.n	8001a70 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a4e:	4b67      	ldr	r3, [pc, #412]	@ (8001bec <HAL_RCC_ClockConfig+0x1c0>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f023 0207 	bic.w	r2, r3, #7
 8001a56:	4965      	ldr	r1, [pc, #404]	@ (8001bec <HAL_RCC_ClockConfig+0x1c0>)
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	4313      	orrs	r3, r2
 8001a5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a5e:	4b63      	ldr	r3, [pc, #396]	@ (8001bec <HAL_RCC_ClockConfig+0x1c0>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f003 0307 	and.w	r3, r3, #7
 8001a66:	683a      	ldr	r2, [r7, #0]
 8001a68:	429a      	cmp	r2, r3
 8001a6a:	d001      	beq.n	8001a70 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	e0b8      	b.n	8001be2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f003 0302 	and.w	r3, r3, #2
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d020      	beq.n	8001abe <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f003 0304 	and.w	r3, r3, #4
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d005      	beq.n	8001a94 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a88:	4b59      	ldr	r3, [pc, #356]	@ (8001bf0 <HAL_RCC_ClockConfig+0x1c4>)
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	4a58      	ldr	r2, [pc, #352]	@ (8001bf0 <HAL_RCC_ClockConfig+0x1c4>)
 8001a8e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001a92:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f003 0308 	and.w	r3, r3, #8
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d005      	beq.n	8001aac <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001aa0:	4b53      	ldr	r3, [pc, #332]	@ (8001bf0 <HAL_RCC_ClockConfig+0x1c4>)
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	4a52      	ldr	r2, [pc, #328]	@ (8001bf0 <HAL_RCC_ClockConfig+0x1c4>)
 8001aa6:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001aaa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001aac:	4b50      	ldr	r3, [pc, #320]	@ (8001bf0 <HAL_RCC_ClockConfig+0x1c4>)
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	689b      	ldr	r3, [r3, #8]
 8001ab8:	494d      	ldr	r1, [pc, #308]	@ (8001bf0 <HAL_RCC_ClockConfig+0x1c4>)
 8001aba:	4313      	orrs	r3, r2
 8001abc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f003 0301 	and.w	r3, r3, #1
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d040      	beq.n	8001b4c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	2b01      	cmp	r3, #1
 8001ad0:	d107      	bne.n	8001ae2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ad2:	4b47      	ldr	r3, [pc, #284]	@ (8001bf0 <HAL_RCC_ClockConfig+0x1c4>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d115      	bne.n	8001b0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	e07f      	b.n	8001be2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	2b02      	cmp	r3, #2
 8001ae8:	d107      	bne.n	8001afa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001aea:	4b41      	ldr	r3, [pc, #260]	@ (8001bf0 <HAL_RCC_ClockConfig+0x1c4>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d109      	bne.n	8001b0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001af6:	2301      	movs	r3, #1
 8001af8:	e073      	b.n	8001be2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001afa:	4b3d      	ldr	r3, [pc, #244]	@ (8001bf0 <HAL_RCC_ClockConfig+0x1c4>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f003 0302 	and.w	r3, r3, #2
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d101      	bne.n	8001b0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b06:	2301      	movs	r3, #1
 8001b08:	e06b      	b.n	8001be2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b0a:	4b39      	ldr	r3, [pc, #228]	@ (8001bf0 <HAL_RCC_ClockConfig+0x1c4>)
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	f023 0203 	bic.w	r2, r3, #3
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	4936      	ldr	r1, [pc, #216]	@ (8001bf0 <HAL_RCC_ClockConfig+0x1c4>)
 8001b18:	4313      	orrs	r3, r2
 8001b1a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b1c:	f7fe ff96 	bl	8000a4c <HAL_GetTick>
 8001b20:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b22:	e00a      	b.n	8001b3a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b24:	f7fe ff92 	bl	8000a4c <HAL_GetTick>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	1ad3      	subs	r3, r2, r3
 8001b2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d901      	bls.n	8001b3a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b36:	2303      	movs	r3, #3
 8001b38:	e053      	b.n	8001be2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b3a:	4b2d      	ldr	r3, [pc, #180]	@ (8001bf0 <HAL_RCC_ClockConfig+0x1c4>)
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	f003 020c 	and.w	r2, r3, #12
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	009b      	lsls	r3, r3, #2
 8001b48:	429a      	cmp	r2, r3
 8001b4a:	d1eb      	bne.n	8001b24 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b4c:	4b27      	ldr	r3, [pc, #156]	@ (8001bec <HAL_RCC_ClockConfig+0x1c0>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f003 0307 	and.w	r3, r3, #7
 8001b54:	683a      	ldr	r2, [r7, #0]
 8001b56:	429a      	cmp	r2, r3
 8001b58:	d210      	bcs.n	8001b7c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b5a:	4b24      	ldr	r3, [pc, #144]	@ (8001bec <HAL_RCC_ClockConfig+0x1c0>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f023 0207 	bic.w	r2, r3, #7
 8001b62:	4922      	ldr	r1, [pc, #136]	@ (8001bec <HAL_RCC_ClockConfig+0x1c0>)
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	4313      	orrs	r3, r2
 8001b68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b6a:	4b20      	ldr	r3, [pc, #128]	@ (8001bec <HAL_RCC_ClockConfig+0x1c0>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f003 0307 	and.w	r3, r3, #7
 8001b72:	683a      	ldr	r2, [r7, #0]
 8001b74:	429a      	cmp	r2, r3
 8001b76:	d001      	beq.n	8001b7c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	e032      	b.n	8001be2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f003 0304 	and.w	r3, r3, #4
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d008      	beq.n	8001b9a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b88:	4b19      	ldr	r3, [pc, #100]	@ (8001bf0 <HAL_RCC_ClockConfig+0x1c4>)
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	68db      	ldr	r3, [r3, #12]
 8001b94:	4916      	ldr	r1, [pc, #88]	@ (8001bf0 <HAL_RCC_ClockConfig+0x1c4>)
 8001b96:	4313      	orrs	r3, r2
 8001b98:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f003 0308 	and.w	r3, r3, #8
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d009      	beq.n	8001bba <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001ba6:	4b12      	ldr	r3, [pc, #72]	@ (8001bf0 <HAL_RCC_ClockConfig+0x1c4>)
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	691b      	ldr	r3, [r3, #16]
 8001bb2:	00db      	lsls	r3, r3, #3
 8001bb4:	490e      	ldr	r1, [pc, #56]	@ (8001bf0 <HAL_RCC_ClockConfig+0x1c4>)
 8001bb6:	4313      	orrs	r3, r2
 8001bb8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001bba:	f000 f821 	bl	8001c00 <HAL_RCC_GetSysClockFreq>
 8001bbe:	4602      	mov	r2, r0
 8001bc0:	4b0b      	ldr	r3, [pc, #44]	@ (8001bf0 <HAL_RCC_ClockConfig+0x1c4>)
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	091b      	lsrs	r3, r3, #4
 8001bc6:	f003 030f 	and.w	r3, r3, #15
 8001bca:	490a      	ldr	r1, [pc, #40]	@ (8001bf4 <HAL_RCC_ClockConfig+0x1c8>)
 8001bcc:	5ccb      	ldrb	r3, [r1, r3]
 8001bce:	fa22 f303 	lsr.w	r3, r2, r3
 8001bd2:	4a09      	ldr	r2, [pc, #36]	@ (8001bf8 <HAL_RCC_ClockConfig+0x1cc>)
 8001bd4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001bd6:	4b09      	ldr	r3, [pc, #36]	@ (8001bfc <HAL_RCC_ClockConfig+0x1d0>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f7fe fef4 	bl	80009c8 <HAL_InitTick>

  return HAL_OK;
 8001be0:	2300      	movs	r3, #0
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	3710      	adds	r7, #16
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	40022000 	.word	0x40022000
 8001bf0:	40021000 	.word	0x40021000
 8001bf4:	08003d5c 	.word	0x08003d5c
 8001bf8:	20000000 	.word	0x20000000
 8001bfc:	20000004 	.word	0x20000004

08001c00 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b087      	sub	sp, #28
 8001c04:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001c06:	2300      	movs	r3, #0
 8001c08:	60fb      	str	r3, [r7, #12]
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	60bb      	str	r3, [r7, #8]
 8001c0e:	2300      	movs	r3, #0
 8001c10:	617b      	str	r3, [r7, #20]
 8001c12:	2300      	movs	r3, #0
 8001c14:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001c16:	2300      	movs	r3, #0
 8001c18:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001c1a:	4b1e      	ldr	r3, [pc, #120]	@ (8001c94 <HAL_RCC_GetSysClockFreq+0x94>)
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	f003 030c 	and.w	r3, r3, #12
 8001c26:	2b04      	cmp	r3, #4
 8001c28:	d002      	beq.n	8001c30 <HAL_RCC_GetSysClockFreq+0x30>
 8001c2a:	2b08      	cmp	r3, #8
 8001c2c:	d003      	beq.n	8001c36 <HAL_RCC_GetSysClockFreq+0x36>
 8001c2e:	e027      	b.n	8001c80 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001c30:	4b19      	ldr	r3, [pc, #100]	@ (8001c98 <HAL_RCC_GetSysClockFreq+0x98>)
 8001c32:	613b      	str	r3, [r7, #16]
      break;
 8001c34:	e027      	b.n	8001c86 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	0c9b      	lsrs	r3, r3, #18
 8001c3a:	f003 030f 	and.w	r3, r3, #15
 8001c3e:	4a17      	ldr	r2, [pc, #92]	@ (8001c9c <HAL_RCC_GetSysClockFreq+0x9c>)
 8001c40:	5cd3      	ldrb	r3, [r2, r3]
 8001c42:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d010      	beq.n	8001c70 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001c4e:	4b11      	ldr	r3, [pc, #68]	@ (8001c94 <HAL_RCC_GetSysClockFreq+0x94>)
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	0c5b      	lsrs	r3, r3, #17
 8001c54:	f003 0301 	and.w	r3, r3, #1
 8001c58:	4a11      	ldr	r2, [pc, #68]	@ (8001ca0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001c5a:	5cd3      	ldrb	r3, [r2, r3]
 8001c5c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	4a0d      	ldr	r2, [pc, #52]	@ (8001c98 <HAL_RCC_GetSysClockFreq+0x98>)
 8001c62:	fb03 f202 	mul.w	r2, r3, r2
 8001c66:	68bb      	ldr	r3, [r7, #8]
 8001c68:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c6c:	617b      	str	r3, [r7, #20]
 8001c6e:	e004      	b.n	8001c7a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	4a0c      	ldr	r2, [pc, #48]	@ (8001ca4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001c74:	fb02 f303 	mul.w	r3, r2, r3
 8001c78:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001c7a:	697b      	ldr	r3, [r7, #20]
 8001c7c:	613b      	str	r3, [r7, #16]
      break;
 8001c7e:	e002      	b.n	8001c86 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001c80:	4b05      	ldr	r3, [pc, #20]	@ (8001c98 <HAL_RCC_GetSysClockFreq+0x98>)
 8001c82:	613b      	str	r3, [r7, #16]
      break;
 8001c84:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c86:	693b      	ldr	r3, [r7, #16]
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	371c      	adds	r7, #28
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bc80      	pop	{r7}
 8001c90:	4770      	bx	lr
 8001c92:	bf00      	nop
 8001c94:	40021000 	.word	0x40021000
 8001c98:	007a1200 	.word	0x007a1200
 8001c9c:	08003d74 	.word	0x08003d74
 8001ca0:	08003d84 	.word	0x08003d84
 8001ca4:	003d0900 	.word	0x003d0900

08001ca8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001cac:	4b02      	ldr	r3, [pc, #8]	@ (8001cb8 <HAL_RCC_GetHCLKFreq+0x10>)
 8001cae:	681b      	ldr	r3, [r3, #0]
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bc80      	pop	{r7}
 8001cb6:	4770      	bx	lr
 8001cb8:	20000000 	.word	0x20000000

08001cbc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001cc0:	f7ff fff2 	bl	8001ca8 <HAL_RCC_GetHCLKFreq>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	4b05      	ldr	r3, [pc, #20]	@ (8001cdc <HAL_RCC_GetPCLK1Freq+0x20>)
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	0a1b      	lsrs	r3, r3, #8
 8001ccc:	f003 0307 	and.w	r3, r3, #7
 8001cd0:	4903      	ldr	r1, [pc, #12]	@ (8001ce0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001cd2:	5ccb      	ldrb	r3, [r1, r3]
 8001cd4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cd8:	4618      	mov	r0, r3
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	40021000 	.word	0x40021000
 8001ce0:	08003d6c 	.word	0x08003d6c

08001ce4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001ce8:	f7ff ffde 	bl	8001ca8 <HAL_RCC_GetHCLKFreq>
 8001cec:	4602      	mov	r2, r0
 8001cee:	4b05      	ldr	r3, [pc, #20]	@ (8001d04 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	0adb      	lsrs	r3, r3, #11
 8001cf4:	f003 0307 	and.w	r3, r3, #7
 8001cf8:	4903      	ldr	r1, [pc, #12]	@ (8001d08 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001cfa:	5ccb      	ldrb	r3, [r1, r3]
 8001cfc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	bd80      	pop	{r7, pc}
 8001d04:	40021000 	.word	0x40021000
 8001d08:	08003d6c 	.word	0x08003d6c

08001d0c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b085      	sub	sp, #20
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001d14:	4b0a      	ldr	r3, [pc, #40]	@ (8001d40 <RCC_Delay+0x34>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a0a      	ldr	r2, [pc, #40]	@ (8001d44 <RCC_Delay+0x38>)
 8001d1a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d1e:	0a5b      	lsrs	r3, r3, #9
 8001d20:	687a      	ldr	r2, [r7, #4]
 8001d22:	fb02 f303 	mul.w	r3, r2, r3
 8001d26:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001d28:	bf00      	nop
  }
  while (Delay --);
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	1e5a      	subs	r2, r3, #1
 8001d2e:	60fa      	str	r2, [r7, #12]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d1f9      	bne.n	8001d28 <RCC_Delay+0x1c>
}
 8001d34:	bf00      	nop
 8001d36:	bf00      	nop
 8001d38:	3714      	adds	r7, #20
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bc80      	pop	{r7}
 8001d3e:	4770      	bx	lr
 8001d40:	20000000 	.word	0x20000000
 8001d44:	10624dd3 	.word	0x10624dd3

08001d48 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b082      	sub	sp, #8
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d101      	bne.n	8001d5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001d56:	2301      	movs	r3, #1
 8001d58:	e042      	b.n	8001de0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001d60:	b2db      	uxtb	r3, r3
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d106      	bne.n	8001d74 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2200      	movs	r2, #0
 8001d6a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001d6e:	6878      	ldr	r0, [r7, #4]
 8001d70:	f7fe fd5e 	bl	8000830 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2224      	movs	r2, #36	@ 0x24
 8001d78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	68da      	ldr	r2, [r3, #12]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001d8a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001d8c:	6878      	ldr	r0, [r7, #4]
 8001d8e:	f000 ff3d 	bl	8002c0c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	691a      	ldr	r2, [r3, #16]
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001da0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	695a      	ldr	r2, [r3, #20]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001db0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	68da      	ldr	r2, [r3, #12]
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001dc0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2220      	movs	r2, #32
 8001dcc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2220      	movs	r2, #32
 8001dd4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2200      	movs	r2, #0
 8001ddc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001dde:	2300      	movs	r3, #0
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	3708      	adds	r7, #8
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}

08001de8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b08a      	sub	sp, #40	@ 0x28
 8001dec:	af02      	add	r7, sp, #8
 8001dee:	60f8      	str	r0, [r7, #12]
 8001df0:	60b9      	str	r1, [r7, #8]
 8001df2:	603b      	str	r3, [r7, #0]
 8001df4:	4613      	mov	r3, r2
 8001df6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001e02:	b2db      	uxtb	r3, r3
 8001e04:	2b20      	cmp	r3, #32
 8001e06:	d175      	bne.n	8001ef4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001e08:	68bb      	ldr	r3, [r7, #8]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d002      	beq.n	8001e14 <HAL_UART_Transmit+0x2c>
 8001e0e:	88fb      	ldrh	r3, [r7, #6]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d101      	bne.n	8001e18 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001e14:	2301      	movs	r3, #1
 8001e16:	e06e      	b.n	8001ef6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	2221      	movs	r2, #33	@ 0x21
 8001e22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001e26:	f7fe fe11 	bl	8000a4c <HAL_GetTick>
 8001e2a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	88fa      	ldrh	r2, [r7, #6]
 8001e30:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	88fa      	ldrh	r2, [r7, #6]
 8001e36:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	689b      	ldr	r3, [r3, #8]
 8001e3c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001e40:	d108      	bne.n	8001e54 <HAL_UART_Transmit+0x6c>
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	691b      	ldr	r3, [r3, #16]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d104      	bne.n	8001e54 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001e4e:	68bb      	ldr	r3, [r7, #8]
 8001e50:	61bb      	str	r3, [r7, #24]
 8001e52:	e003      	b.n	8001e5c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001e54:	68bb      	ldr	r3, [r7, #8]
 8001e56:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001e5c:	e02e      	b.n	8001ebc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	9300      	str	r3, [sp, #0]
 8001e62:	697b      	ldr	r3, [r7, #20]
 8001e64:	2200      	movs	r2, #0
 8001e66:	2180      	movs	r1, #128	@ 0x80
 8001e68:	68f8      	ldr	r0, [r7, #12]
 8001e6a:	f000 fc1a 	bl	80026a2 <UART_WaitOnFlagUntilTimeout>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d005      	beq.n	8001e80 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	2220      	movs	r2, #32
 8001e78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8001e7c:	2303      	movs	r3, #3
 8001e7e:	e03a      	b.n	8001ef6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8001e80:	69fb      	ldr	r3, [r7, #28]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d10b      	bne.n	8001e9e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001e86:	69bb      	ldr	r3, [r7, #24]
 8001e88:	881b      	ldrh	r3, [r3, #0]
 8001e8a:	461a      	mov	r2, r3
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001e94:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001e96:	69bb      	ldr	r3, [r7, #24]
 8001e98:	3302      	adds	r3, #2
 8001e9a:	61bb      	str	r3, [r7, #24]
 8001e9c:	e007      	b.n	8001eae <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001e9e:	69fb      	ldr	r3, [r7, #28]
 8001ea0:	781a      	ldrb	r2, [r3, #0]
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001ea8:	69fb      	ldr	r3, [r7, #28]
 8001eaa:	3301      	adds	r3, #1
 8001eac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001eb2:	b29b      	uxth	r3, r3
 8001eb4:	3b01      	subs	r3, #1
 8001eb6:	b29a      	uxth	r2, r3
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001ec0:	b29b      	uxth	r3, r3
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d1cb      	bne.n	8001e5e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	9300      	str	r3, [sp, #0]
 8001eca:	697b      	ldr	r3, [r7, #20]
 8001ecc:	2200      	movs	r2, #0
 8001ece:	2140      	movs	r1, #64	@ 0x40
 8001ed0:	68f8      	ldr	r0, [r7, #12]
 8001ed2:	f000 fbe6 	bl	80026a2 <UART_WaitOnFlagUntilTimeout>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d005      	beq.n	8001ee8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	2220      	movs	r2, #32
 8001ee0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8001ee4:	2303      	movs	r3, #3
 8001ee6:	e006      	b.n	8001ef6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	2220      	movs	r2, #32
 8001eec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	e000      	b.n	8001ef6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8001ef4:	2302      	movs	r3, #2
  }
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	3720      	adds	r7, #32
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}

08001efe <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001efe:	b580      	push	{r7, lr}
 8001f00:	b084      	sub	sp, #16
 8001f02:	af00      	add	r7, sp, #0
 8001f04:	60f8      	str	r0, [r7, #12]
 8001f06:	60b9      	str	r1, [r7, #8]
 8001f08:	4613      	mov	r3, r2
 8001f0a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001f12:	b2db      	uxtb	r3, r3
 8001f14:	2b20      	cmp	r3, #32
 8001f16:	d112      	bne.n	8001f3e <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8001f18:	68bb      	ldr	r3, [r7, #8]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d002      	beq.n	8001f24 <HAL_UART_Receive_DMA+0x26>
 8001f1e:	88fb      	ldrh	r3, [r7, #6]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d101      	bne.n	8001f28 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8001f24:	2301      	movs	r3, #1
 8001f26:	e00b      	b.n	8001f40 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8001f2e:	88fb      	ldrh	r3, [r7, #6]
 8001f30:	461a      	mov	r2, r3
 8001f32:	68b9      	ldr	r1, [r7, #8]
 8001f34:	68f8      	ldr	r0, [r7, #12]
 8001f36:	f000 fc0d 	bl	8002754 <UART_Start_Receive_DMA>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	e000      	b.n	8001f40 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8001f3e:	2302      	movs	r3, #2
  }
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	3710      	adds	r7, #16
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}

08001f48 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b0ba      	sub	sp, #232	@ 0xe8
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	68db      	ldr	r3, [r3, #12]
 8001f60:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	695b      	ldr	r3, [r3, #20]
 8001f6a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8001f74:	2300      	movs	r3, #0
 8001f76:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001f7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001f7e:	f003 030f 	and.w	r3, r3, #15
 8001f82:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8001f86:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d10f      	bne.n	8001fae <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001f8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001f92:	f003 0320 	and.w	r3, r3, #32
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d009      	beq.n	8001fae <HAL_UART_IRQHandler+0x66>
 8001f9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001f9e:	f003 0320 	and.w	r3, r3, #32
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d003      	beq.n	8001fae <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8001fa6:	6878      	ldr	r0, [r7, #4]
 8001fa8:	f000 fd72 	bl	8002a90 <UART_Receive_IT>
      return;
 8001fac:	e25b      	b.n	8002466 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8001fae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	f000 80de 	beq.w	8002174 <HAL_UART_IRQHandler+0x22c>
 8001fb8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001fbc:	f003 0301 	and.w	r3, r3, #1
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d106      	bne.n	8001fd2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001fc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001fc8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	f000 80d1 	beq.w	8002174 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001fd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001fd6:	f003 0301 	and.w	r3, r3, #1
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d00b      	beq.n	8001ff6 <HAL_UART_IRQHandler+0xae>
 8001fde:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001fe2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d005      	beq.n	8001ff6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fee:	f043 0201 	orr.w	r2, r3, #1
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001ff6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001ffa:	f003 0304 	and.w	r3, r3, #4
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d00b      	beq.n	800201a <HAL_UART_IRQHandler+0xd2>
 8002002:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002006:	f003 0301 	and.w	r3, r3, #1
 800200a:	2b00      	cmp	r3, #0
 800200c:	d005      	beq.n	800201a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002012:	f043 0202 	orr.w	r2, r3, #2
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800201a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800201e:	f003 0302 	and.w	r3, r3, #2
 8002022:	2b00      	cmp	r3, #0
 8002024:	d00b      	beq.n	800203e <HAL_UART_IRQHandler+0xf6>
 8002026:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800202a:	f003 0301 	and.w	r3, r3, #1
 800202e:	2b00      	cmp	r3, #0
 8002030:	d005      	beq.n	800203e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002036:	f043 0204 	orr.w	r2, r3, #4
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800203e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002042:	f003 0308 	and.w	r3, r3, #8
 8002046:	2b00      	cmp	r3, #0
 8002048:	d011      	beq.n	800206e <HAL_UART_IRQHandler+0x126>
 800204a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800204e:	f003 0320 	and.w	r3, r3, #32
 8002052:	2b00      	cmp	r3, #0
 8002054:	d105      	bne.n	8002062 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002056:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800205a:	f003 0301 	and.w	r3, r3, #1
 800205e:	2b00      	cmp	r3, #0
 8002060:	d005      	beq.n	800206e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002066:	f043 0208 	orr.w	r2, r3, #8
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002072:	2b00      	cmp	r3, #0
 8002074:	f000 81f2 	beq.w	800245c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002078:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800207c:	f003 0320 	and.w	r3, r3, #32
 8002080:	2b00      	cmp	r3, #0
 8002082:	d008      	beq.n	8002096 <HAL_UART_IRQHandler+0x14e>
 8002084:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002088:	f003 0320 	and.w	r3, r3, #32
 800208c:	2b00      	cmp	r3, #0
 800208e:	d002      	beq.n	8002096 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002090:	6878      	ldr	r0, [r7, #4]
 8002092:	f000 fcfd 	bl	8002a90 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	695b      	ldr	r3, [r3, #20]
 800209c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	bf14      	ite	ne
 80020a4:	2301      	movne	r3, #1
 80020a6:	2300      	moveq	r3, #0
 80020a8:	b2db      	uxtb	r3, r3
 80020aa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020b2:	f003 0308 	and.w	r3, r3, #8
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d103      	bne.n	80020c2 <HAL_UART_IRQHandler+0x17a>
 80020ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d04f      	beq.n	8002162 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80020c2:	6878      	ldr	r0, [r7, #4]
 80020c4:	f000 fc07 	bl	80028d6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	695b      	ldr	r3, [r3, #20]
 80020ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d041      	beq.n	800215a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	3314      	adds	r3, #20
 80020dc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80020e0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80020e4:	e853 3f00 	ldrex	r3, [r3]
 80020e8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80020ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80020f0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80020f4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	3314      	adds	r3, #20
 80020fe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002102:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002106:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800210a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800210e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002112:	e841 2300 	strex	r3, r2, [r1]
 8002116:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800211a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800211e:	2b00      	cmp	r3, #0
 8002120:	d1d9      	bne.n	80020d6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002126:	2b00      	cmp	r3, #0
 8002128:	d013      	beq.n	8002152 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800212e:	4a7e      	ldr	r2, [pc, #504]	@ (8002328 <HAL_UART_IRQHandler+0x3e0>)
 8002130:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002136:	4618      	mov	r0, r3
 8002138:	f7fe fe96 	bl	8000e68 <HAL_DMA_Abort_IT>
 800213c:	4603      	mov	r3, r0
 800213e:	2b00      	cmp	r3, #0
 8002140:	d016      	beq.n	8002170 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002146:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002148:	687a      	ldr	r2, [r7, #4]
 800214a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800214c:	4610      	mov	r0, r2
 800214e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002150:	e00e      	b.n	8002170 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002152:	6878      	ldr	r0, [r7, #4]
 8002154:	f000 f993 	bl	800247e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002158:	e00a      	b.n	8002170 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800215a:	6878      	ldr	r0, [r7, #4]
 800215c:	f000 f98f 	bl	800247e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002160:	e006      	b.n	8002170 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002162:	6878      	ldr	r0, [r7, #4]
 8002164:	f000 f98b 	bl	800247e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2200      	movs	r2, #0
 800216c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800216e:	e175      	b.n	800245c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002170:	bf00      	nop
    return;
 8002172:	e173      	b.n	800245c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002178:	2b01      	cmp	r3, #1
 800217a:	f040 814f 	bne.w	800241c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800217e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002182:	f003 0310 	and.w	r3, r3, #16
 8002186:	2b00      	cmp	r3, #0
 8002188:	f000 8148 	beq.w	800241c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800218c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002190:	f003 0310 	and.w	r3, r3, #16
 8002194:	2b00      	cmp	r3, #0
 8002196:	f000 8141 	beq.w	800241c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800219a:	2300      	movs	r3, #0
 800219c:	60bb      	str	r3, [r7, #8]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	60bb      	str	r3, [r7, #8]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	60bb      	str	r3, [r7, #8]
 80021ae:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	695b      	ldr	r3, [r3, #20]
 80021b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	f000 80b6 	beq.w	800232c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80021cc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	f000 8145 	beq.w	8002460 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80021da:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80021de:	429a      	cmp	r2, r3
 80021e0:	f080 813e 	bcs.w	8002460 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80021ea:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021f0:	699b      	ldr	r3, [r3, #24]
 80021f2:	2b20      	cmp	r3, #32
 80021f4:	f000 8088 	beq.w	8002308 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	330c      	adds	r3, #12
 80021fe:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002202:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002206:	e853 3f00 	ldrex	r3, [r3]
 800220a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800220e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002212:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002216:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	330c      	adds	r3, #12
 8002220:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8002224:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002228:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800222c:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002230:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002234:	e841 2300 	strex	r3, r2, [r1]
 8002238:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800223c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002240:	2b00      	cmp	r3, #0
 8002242:	d1d9      	bne.n	80021f8 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	3314      	adds	r3, #20
 800224a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800224c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800224e:	e853 3f00 	ldrex	r3, [r3]
 8002252:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002254:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002256:	f023 0301 	bic.w	r3, r3, #1
 800225a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	3314      	adds	r3, #20
 8002264:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002268:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800226c:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800226e:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002270:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002274:	e841 2300 	strex	r3, r2, [r1]
 8002278:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800227a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800227c:	2b00      	cmp	r3, #0
 800227e:	d1e1      	bne.n	8002244 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	3314      	adds	r3, #20
 8002286:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002288:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800228a:	e853 3f00 	ldrex	r3, [r3]
 800228e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002290:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002292:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002296:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	3314      	adds	r3, #20
 80022a0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80022a4:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80022a6:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022a8:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80022aa:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80022ac:	e841 2300 	strex	r3, r2, [r1]
 80022b0:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80022b2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d1e3      	bne.n	8002280 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2220      	movs	r2, #32
 80022bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2200      	movs	r2, #0
 80022c4:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	330c      	adds	r3, #12
 80022cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022ce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80022d0:	e853 3f00 	ldrex	r3, [r3]
 80022d4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80022d6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80022d8:	f023 0310 	bic.w	r3, r3, #16
 80022dc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	330c      	adds	r3, #12
 80022e6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80022ea:	65ba      	str	r2, [r7, #88]	@ 0x58
 80022ec:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022ee:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80022f0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80022f2:	e841 2300 	strex	r3, r2, [r1]
 80022f6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80022f8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d1e3      	bne.n	80022c6 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002302:	4618      	mov	r0, r3
 8002304:	f7fe fd74 	bl	8000df0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2202      	movs	r2, #2
 800230c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002316:	b29b      	uxth	r3, r3
 8002318:	1ad3      	subs	r3, r2, r3
 800231a:	b29b      	uxth	r3, r3
 800231c:	4619      	mov	r1, r3
 800231e:	6878      	ldr	r0, [r7, #4]
 8002320:	f000 f8b6 	bl	8002490 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002324:	e09c      	b.n	8002460 <HAL_UART_IRQHandler+0x518>
 8002326:	bf00      	nop
 8002328:	0800299b 	.word	0x0800299b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002334:	b29b      	uxth	r3, r3
 8002336:	1ad3      	subs	r3, r2, r3
 8002338:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002340:	b29b      	uxth	r3, r3
 8002342:	2b00      	cmp	r3, #0
 8002344:	f000 808e 	beq.w	8002464 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002348:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800234c:	2b00      	cmp	r3, #0
 800234e:	f000 8089 	beq.w	8002464 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	330c      	adds	r3, #12
 8002358:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800235a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800235c:	e853 3f00 	ldrex	r3, [r3]
 8002360:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002362:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002364:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002368:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	330c      	adds	r3, #12
 8002372:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8002376:	647a      	str	r2, [r7, #68]	@ 0x44
 8002378:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800237a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800237c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800237e:	e841 2300 	strex	r3, r2, [r1]
 8002382:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002384:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002386:	2b00      	cmp	r3, #0
 8002388:	d1e3      	bne.n	8002352 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	3314      	adds	r3, #20
 8002390:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002394:	e853 3f00 	ldrex	r3, [r3]
 8002398:	623b      	str	r3, [r7, #32]
   return(result);
 800239a:	6a3b      	ldr	r3, [r7, #32]
 800239c:	f023 0301 	bic.w	r3, r3, #1
 80023a0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	3314      	adds	r3, #20
 80023aa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80023ae:	633a      	str	r2, [r7, #48]	@ 0x30
 80023b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023b2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80023b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80023b6:	e841 2300 	strex	r3, r2, [r1]
 80023ba:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80023bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d1e3      	bne.n	800238a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2220      	movs	r2, #32
 80023c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2200      	movs	r2, #0
 80023ce:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	330c      	adds	r3, #12
 80023d6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023d8:	693b      	ldr	r3, [r7, #16]
 80023da:	e853 3f00 	ldrex	r3, [r3]
 80023de:	60fb      	str	r3, [r7, #12]
   return(result);
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	f023 0310 	bic.w	r3, r3, #16
 80023e6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	330c      	adds	r3, #12
 80023f0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80023f4:	61fa      	str	r2, [r7, #28]
 80023f6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023f8:	69b9      	ldr	r1, [r7, #24]
 80023fa:	69fa      	ldr	r2, [r7, #28]
 80023fc:	e841 2300 	strex	r3, r2, [r1]
 8002400:	617b      	str	r3, [r7, #20]
   return(result);
 8002402:	697b      	ldr	r3, [r7, #20]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d1e3      	bne.n	80023d0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2202      	movs	r2, #2
 800240c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800240e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002412:	4619      	mov	r1, r3
 8002414:	6878      	ldr	r0, [r7, #4]
 8002416:	f000 f83b 	bl	8002490 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800241a:	e023      	b.n	8002464 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800241c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002420:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002424:	2b00      	cmp	r3, #0
 8002426:	d009      	beq.n	800243c <HAL_UART_IRQHandler+0x4f4>
 8002428:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800242c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002430:	2b00      	cmp	r3, #0
 8002432:	d003      	beq.n	800243c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002434:	6878      	ldr	r0, [r7, #4]
 8002436:	f000 fac4 	bl	80029c2 <UART_Transmit_IT>
    return;
 800243a:	e014      	b.n	8002466 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800243c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002440:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002444:	2b00      	cmp	r3, #0
 8002446:	d00e      	beq.n	8002466 <HAL_UART_IRQHandler+0x51e>
 8002448:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800244c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002450:	2b00      	cmp	r3, #0
 8002452:	d008      	beq.n	8002466 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002454:	6878      	ldr	r0, [r7, #4]
 8002456:	f000 fb03 	bl	8002a60 <UART_EndTransmit_IT>
    return;
 800245a:	e004      	b.n	8002466 <HAL_UART_IRQHandler+0x51e>
    return;
 800245c:	bf00      	nop
 800245e:	e002      	b.n	8002466 <HAL_UART_IRQHandler+0x51e>
      return;
 8002460:	bf00      	nop
 8002462:	e000      	b.n	8002466 <HAL_UART_IRQHandler+0x51e>
      return;
 8002464:	bf00      	nop
  }
}
 8002466:	37e8      	adds	r7, #232	@ 0xe8
 8002468:	46bd      	mov	sp, r7
 800246a:	bd80      	pop	{r7, pc}

0800246c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800246c:	b480      	push	{r7}
 800246e:	b083      	sub	sp, #12
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002474:	bf00      	nop
 8002476:	370c      	adds	r7, #12
 8002478:	46bd      	mov	sp, r7
 800247a:	bc80      	pop	{r7}
 800247c:	4770      	bx	lr

0800247e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800247e:	b480      	push	{r7}
 8002480:	b083      	sub	sp, #12
 8002482:	af00      	add	r7, sp, #0
 8002484:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002486:	bf00      	nop
 8002488:	370c      	adds	r7, #12
 800248a:	46bd      	mov	sp, r7
 800248c:	bc80      	pop	{r7}
 800248e:	4770      	bx	lr

08002490 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002490:	b480      	push	{r7}
 8002492:	b083      	sub	sp, #12
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
 8002498:	460b      	mov	r3, r1
 800249a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800249c:	bf00      	nop
 800249e:	370c      	adds	r7, #12
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bc80      	pop	{r7}
 80024a4:	4770      	bx	lr

080024a6 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80024a6:	b580      	push	{r7, lr}
 80024a8:	b09c      	sub	sp, #112	@ 0x70
 80024aa:	af00      	add	r7, sp, #0
 80024ac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024b2:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f003 0320 	and.w	r3, r3, #32
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d172      	bne.n	80025a8 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80024c2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80024c4:	2200      	movs	r2, #0
 80024c6:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80024c8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	330c      	adds	r3, #12
 80024ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024d0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80024d2:	e853 3f00 	ldrex	r3, [r3]
 80024d6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80024d8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80024da:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80024de:	66bb      	str	r3, [r7, #104]	@ 0x68
 80024e0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	330c      	adds	r3, #12
 80024e6:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80024e8:	65ba      	str	r2, [r7, #88]	@ 0x58
 80024ea:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024ec:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80024ee:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80024f0:	e841 2300 	strex	r3, r2, [r1]
 80024f4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80024f6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d1e5      	bne.n	80024c8 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80024fc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	3314      	adds	r3, #20
 8002502:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002504:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002506:	e853 3f00 	ldrex	r3, [r3]
 800250a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800250c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800250e:	f023 0301 	bic.w	r3, r3, #1
 8002512:	667b      	str	r3, [r7, #100]	@ 0x64
 8002514:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	3314      	adds	r3, #20
 800251a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800251c:	647a      	str	r2, [r7, #68]	@ 0x44
 800251e:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002520:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002522:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002524:	e841 2300 	strex	r3, r2, [r1]
 8002528:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800252a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800252c:	2b00      	cmp	r3, #0
 800252e:	d1e5      	bne.n	80024fc <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002530:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	3314      	adds	r3, #20
 8002536:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002538:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800253a:	e853 3f00 	ldrex	r3, [r3]
 800253e:	623b      	str	r3, [r7, #32]
   return(result);
 8002540:	6a3b      	ldr	r3, [r7, #32]
 8002542:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002546:	663b      	str	r3, [r7, #96]	@ 0x60
 8002548:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	3314      	adds	r3, #20
 800254e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002550:	633a      	str	r2, [r7, #48]	@ 0x30
 8002552:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002554:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002556:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002558:	e841 2300 	strex	r3, r2, [r1]
 800255c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800255e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002560:	2b00      	cmp	r3, #0
 8002562:	d1e5      	bne.n	8002530 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002564:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002566:	2220      	movs	r2, #32
 8002568:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800256c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800256e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002570:	2b01      	cmp	r3, #1
 8002572:	d119      	bne.n	80025a8 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002574:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	330c      	adds	r3, #12
 800257a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800257c:	693b      	ldr	r3, [r7, #16]
 800257e:	e853 3f00 	ldrex	r3, [r3]
 8002582:	60fb      	str	r3, [r7, #12]
   return(result);
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	f023 0310 	bic.w	r3, r3, #16
 800258a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800258c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	330c      	adds	r3, #12
 8002592:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8002594:	61fa      	str	r2, [r7, #28]
 8002596:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002598:	69b9      	ldr	r1, [r7, #24]
 800259a:	69fa      	ldr	r2, [r7, #28]
 800259c:	e841 2300 	strex	r3, r2, [r1]
 80025a0:	617b      	str	r3, [r7, #20]
   return(result);
 80025a2:	697b      	ldr	r3, [r7, #20]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d1e5      	bne.n	8002574 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80025a8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80025aa:	2200      	movs	r2, #0
 80025ac:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80025ae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80025b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025b2:	2b01      	cmp	r3, #1
 80025b4:	d106      	bne.n	80025c4 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80025b6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80025b8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80025ba:	4619      	mov	r1, r3
 80025bc:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80025be:	f7ff ff67 	bl	8002490 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80025c2:	e002      	b.n	80025ca <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80025c4:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80025c6:	f7fd ffa7 	bl	8000518 <HAL_UART_RxCpltCallback>
}
 80025ca:	bf00      	nop
 80025cc:	3770      	adds	r7, #112	@ 0x70
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}

080025d2 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80025d2:	b580      	push	{r7, lr}
 80025d4:	b084      	sub	sp, #16
 80025d6:	af00      	add	r7, sp, #0
 80025d8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025de:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	2201      	movs	r2, #1
 80025e4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025ea:	2b01      	cmp	r3, #1
 80025ec:	d108      	bne.n	8002600 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80025f2:	085b      	lsrs	r3, r3, #1
 80025f4:	b29b      	uxth	r3, r3
 80025f6:	4619      	mov	r1, r3
 80025f8:	68f8      	ldr	r0, [r7, #12]
 80025fa:	f7ff ff49 	bl	8002490 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80025fe:	e002      	b.n	8002606 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8002600:	68f8      	ldr	r0, [r7, #12]
 8002602:	f7fd ffbd 	bl	8000580 <HAL_UART_RxHalfCpltCallback>
}
 8002606:	bf00      	nop
 8002608:	3710      	adds	r7, #16
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}

0800260e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800260e:	b580      	push	{r7, lr}
 8002610:	b084      	sub	sp, #16
 8002612:	af00      	add	r7, sp, #0
 8002614:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8002616:	2300      	movs	r3, #0
 8002618:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800261e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	695b      	ldr	r3, [r3, #20]
 8002626:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800262a:	2b00      	cmp	r3, #0
 800262c:	bf14      	ite	ne
 800262e:	2301      	movne	r3, #1
 8002630:	2300      	moveq	r3, #0
 8002632:	b2db      	uxtb	r3, r3
 8002634:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8002636:	68bb      	ldr	r3, [r7, #8]
 8002638:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800263c:	b2db      	uxtb	r3, r3
 800263e:	2b21      	cmp	r3, #33	@ 0x21
 8002640:	d108      	bne.n	8002654 <UART_DMAError+0x46>
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d005      	beq.n	8002654 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	2200      	movs	r2, #0
 800264c:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 800264e:	68b8      	ldr	r0, [r7, #8]
 8002650:	f000 f91a 	bl	8002888 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002654:	68bb      	ldr	r3, [r7, #8]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	695b      	ldr	r3, [r3, #20]
 800265a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800265e:	2b00      	cmp	r3, #0
 8002660:	bf14      	ite	ne
 8002662:	2301      	movne	r3, #1
 8002664:	2300      	moveq	r3, #0
 8002666:	b2db      	uxtb	r3, r3
 8002668:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800266a:	68bb      	ldr	r3, [r7, #8]
 800266c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002670:	b2db      	uxtb	r3, r3
 8002672:	2b22      	cmp	r3, #34	@ 0x22
 8002674:	d108      	bne.n	8002688 <UART_DMAError+0x7a>
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d005      	beq.n	8002688 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800267c:	68bb      	ldr	r3, [r7, #8]
 800267e:	2200      	movs	r2, #0
 8002680:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8002682:	68b8      	ldr	r0, [r7, #8]
 8002684:	f000 f927 	bl	80028d6 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800268c:	f043 0210 	orr.w	r2, r3, #16
 8002690:	68bb      	ldr	r3, [r7, #8]
 8002692:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002694:	68b8      	ldr	r0, [r7, #8]
 8002696:	f7ff fef2 	bl	800247e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800269a:	bf00      	nop
 800269c:	3710      	adds	r7, #16
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}

080026a2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80026a2:	b580      	push	{r7, lr}
 80026a4:	b086      	sub	sp, #24
 80026a6:	af00      	add	r7, sp, #0
 80026a8:	60f8      	str	r0, [r7, #12]
 80026aa:	60b9      	str	r1, [r7, #8]
 80026ac:	603b      	str	r3, [r7, #0]
 80026ae:	4613      	mov	r3, r2
 80026b0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80026b2:	e03b      	b.n	800272c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026b4:	6a3b      	ldr	r3, [r7, #32]
 80026b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026ba:	d037      	beq.n	800272c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026bc:	f7fe f9c6 	bl	8000a4c <HAL_GetTick>
 80026c0:	4602      	mov	r2, r0
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	1ad3      	subs	r3, r2, r3
 80026c6:	6a3a      	ldr	r2, [r7, #32]
 80026c8:	429a      	cmp	r2, r3
 80026ca:	d302      	bcc.n	80026d2 <UART_WaitOnFlagUntilTimeout+0x30>
 80026cc:	6a3b      	ldr	r3, [r7, #32]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d101      	bne.n	80026d6 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80026d2:	2303      	movs	r3, #3
 80026d4:	e03a      	b.n	800274c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	68db      	ldr	r3, [r3, #12]
 80026dc:	f003 0304 	and.w	r3, r3, #4
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d023      	beq.n	800272c <UART_WaitOnFlagUntilTimeout+0x8a>
 80026e4:	68bb      	ldr	r3, [r7, #8]
 80026e6:	2b80      	cmp	r3, #128	@ 0x80
 80026e8:	d020      	beq.n	800272c <UART_WaitOnFlagUntilTimeout+0x8a>
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	2b40      	cmp	r3, #64	@ 0x40
 80026ee:	d01d      	beq.n	800272c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f003 0308 	and.w	r3, r3, #8
 80026fa:	2b08      	cmp	r3, #8
 80026fc:	d116      	bne.n	800272c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80026fe:	2300      	movs	r3, #0
 8002700:	617b      	str	r3, [r7, #20]
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	617b      	str	r3, [r7, #20]
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	617b      	str	r3, [r7, #20]
 8002712:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002714:	68f8      	ldr	r0, [r7, #12]
 8002716:	f000 f8de 	bl	80028d6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	2208      	movs	r2, #8
 800271e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	2200      	movs	r2, #0
 8002724:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002728:	2301      	movs	r3, #1
 800272a:	e00f      	b.n	800274c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	681a      	ldr	r2, [r3, #0]
 8002732:	68bb      	ldr	r3, [r7, #8]
 8002734:	4013      	ands	r3, r2
 8002736:	68ba      	ldr	r2, [r7, #8]
 8002738:	429a      	cmp	r2, r3
 800273a:	bf0c      	ite	eq
 800273c:	2301      	moveq	r3, #1
 800273e:	2300      	movne	r3, #0
 8002740:	b2db      	uxtb	r3, r3
 8002742:	461a      	mov	r2, r3
 8002744:	79fb      	ldrb	r3, [r7, #7]
 8002746:	429a      	cmp	r2, r3
 8002748:	d0b4      	beq.n	80026b4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800274a:	2300      	movs	r3, #0
}
 800274c:	4618      	mov	r0, r3
 800274e:	3718      	adds	r7, #24
 8002750:	46bd      	mov	sp, r7
 8002752:	bd80      	pop	{r7, pc}

08002754 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b098      	sub	sp, #96	@ 0x60
 8002758:	af00      	add	r7, sp, #0
 800275a:	60f8      	str	r0, [r7, #12]
 800275c:	60b9      	str	r1, [r7, #8]
 800275e:	4613      	mov	r3, r2
 8002760:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8002762:	68ba      	ldr	r2, [r7, #8]
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	88fa      	ldrh	r2, [r7, #6]
 800276c:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	2200      	movs	r2, #0
 8002772:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	2222      	movs	r2, #34	@ 0x22
 8002778:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002780:	4a3e      	ldr	r2, [pc, #248]	@ (800287c <UART_Start_Receive_DMA+0x128>)
 8002782:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002788:	4a3d      	ldr	r2, [pc, #244]	@ (8002880 <UART_Start_Receive_DMA+0x12c>)
 800278a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002790:	4a3c      	ldr	r2, [pc, #240]	@ (8002884 <UART_Start_Receive_DMA+0x130>)
 8002792:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002798:	2200      	movs	r2, #0
 800279a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800279c:	f107 0308 	add.w	r3, r7, #8
 80027a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	3304      	adds	r3, #4
 80027ac:	4619      	mov	r1, r3
 80027ae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80027b0:	681a      	ldr	r2, [r3, #0]
 80027b2:	88fb      	ldrh	r3, [r7, #6]
 80027b4:	f7fe fabc 	bl	8000d30 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80027b8:	2300      	movs	r3, #0
 80027ba:	613b      	str	r3, [r7, #16]
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	613b      	str	r3, [r7, #16]
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	613b      	str	r3, [r7, #16]
 80027cc:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	691b      	ldr	r3, [r3, #16]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d019      	beq.n	800280a <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	330c      	adds	r3, #12
 80027dc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80027e0:	e853 3f00 	ldrex	r3, [r3]
 80027e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80027e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80027e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80027ec:	65bb      	str	r3, [r7, #88]	@ 0x58
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	330c      	adds	r3, #12
 80027f4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80027f6:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80027f8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027fa:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80027fc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80027fe:	e841 2300 	strex	r3, r2, [r1]
 8002802:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8002804:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002806:	2b00      	cmp	r3, #0
 8002808:	d1e5      	bne.n	80027d6 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	3314      	adds	r3, #20
 8002810:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002812:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002814:	e853 3f00 	ldrex	r3, [r3]
 8002818:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800281a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800281c:	f043 0301 	orr.w	r3, r3, #1
 8002820:	657b      	str	r3, [r7, #84]	@ 0x54
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	3314      	adds	r3, #20
 8002828:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800282a:	63ba      	str	r2, [r7, #56]	@ 0x38
 800282c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800282e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8002830:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002832:	e841 2300 	strex	r3, r2, [r1]
 8002836:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002838:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800283a:	2b00      	cmp	r3, #0
 800283c:	d1e5      	bne.n	800280a <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	3314      	adds	r3, #20
 8002844:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002846:	69bb      	ldr	r3, [r7, #24]
 8002848:	e853 3f00 	ldrex	r3, [r3]
 800284c:	617b      	str	r3, [r7, #20]
   return(result);
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002854:	653b      	str	r3, [r7, #80]	@ 0x50
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	3314      	adds	r3, #20
 800285c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800285e:	627a      	str	r2, [r7, #36]	@ 0x24
 8002860:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002862:	6a39      	ldr	r1, [r7, #32]
 8002864:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002866:	e841 2300 	strex	r3, r2, [r1]
 800286a:	61fb      	str	r3, [r7, #28]
   return(result);
 800286c:	69fb      	ldr	r3, [r7, #28]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d1e5      	bne.n	800283e <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8002872:	2300      	movs	r3, #0
}
 8002874:	4618      	mov	r0, r3
 8002876:	3760      	adds	r7, #96	@ 0x60
 8002878:	46bd      	mov	sp, r7
 800287a:	bd80      	pop	{r7, pc}
 800287c:	080024a7 	.word	0x080024a7
 8002880:	080025d3 	.word	0x080025d3
 8002884:	0800260f 	.word	0x0800260f

08002888 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8002888:	b480      	push	{r7}
 800288a:	b089      	sub	sp, #36	@ 0x24
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	330c      	adds	r3, #12
 8002896:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	e853 3f00 	ldrex	r3, [r3]
 800289e:	60bb      	str	r3, [r7, #8]
   return(result);
 80028a0:	68bb      	ldr	r3, [r7, #8]
 80028a2:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80028a6:	61fb      	str	r3, [r7, #28]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	330c      	adds	r3, #12
 80028ae:	69fa      	ldr	r2, [r7, #28]
 80028b0:	61ba      	str	r2, [r7, #24]
 80028b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028b4:	6979      	ldr	r1, [r7, #20]
 80028b6:	69ba      	ldr	r2, [r7, #24]
 80028b8:	e841 2300 	strex	r3, r2, [r1]
 80028bc:	613b      	str	r3, [r7, #16]
   return(result);
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d1e5      	bne.n	8002890 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2220      	movs	r2, #32
 80028c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 80028cc:	bf00      	nop
 80028ce:	3724      	adds	r7, #36	@ 0x24
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bc80      	pop	{r7}
 80028d4:	4770      	bx	lr

080028d6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80028d6:	b480      	push	{r7}
 80028d8:	b095      	sub	sp, #84	@ 0x54
 80028da:	af00      	add	r7, sp, #0
 80028dc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	330c      	adds	r3, #12
 80028e4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80028e8:	e853 3f00 	ldrex	r3, [r3]
 80028ec:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80028ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028f0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80028f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	330c      	adds	r3, #12
 80028fc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80028fe:	643a      	str	r2, [r7, #64]	@ 0x40
 8002900:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002902:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002904:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002906:	e841 2300 	strex	r3, r2, [r1]
 800290a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800290c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800290e:	2b00      	cmp	r3, #0
 8002910:	d1e5      	bne.n	80028de <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	3314      	adds	r3, #20
 8002918:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800291a:	6a3b      	ldr	r3, [r7, #32]
 800291c:	e853 3f00 	ldrex	r3, [r3]
 8002920:	61fb      	str	r3, [r7, #28]
   return(result);
 8002922:	69fb      	ldr	r3, [r7, #28]
 8002924:	f023 0301 	bic.w	r3, r3, #1
 8002928:	64bb      	str	r3, [r7, #72]	@ 0x48
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	3314      	adds	r3, #20
 8002930:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002932:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002934:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002936:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002938:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800293a:	e841 2300 	strex	r3, r2, [r1]
 800293e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002940:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002942:	2b00      	cmp	r3, #0
 8002944:	d1e5      	bne.n	8002912 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800294a:	2b01      	cmp	r3, #1
 800294c:	d119      	bne.n	8002982 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	330c      	adds	r3, #12
 8002954:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	e853 3f00 	ldrex	r3, [r3]
 800295c:	60bb      	str	r3, [r7, #8]
   return(result);
 800295e:	68bb      	ldr	r3, [r7, #8]
 8002960:	f023 0310 	bic.w	r3, r3, #16
 8002964:	647b      	str	r3, [r7, #68]	@ 0x44
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	330c      	adds	r3, #12
 800296c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800296e:	61ba      	str	r2, [r7, #24]
 8002970:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002972:	6979      	ldr	r1, [r7, #20]
 8002974:	69ba      	ldr	r2, [r7, #24]
 8002976:	e841 2300 	strex	r3, r2, [r1]
 800297a:	613b      	str	r3, [r7, #16]
   return(result);
 800297c:	693b      	ldr	r3, [r7, #16]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d1e5      	bne.n	800294e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2220      	movs	r2, #32
 8002986:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2200      	movs	r2, #0
 800298e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002990:	bf00      	nop
 8002992:	3754      	adds	r7, #84	@ 0x54
 8002994:	46bd      	mov	sp, r7
 8002996:	bc80      	pop	{r7}
 8002998:	4770      	bx	lr

0800299a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800299a:	b580      	push	{r7, lr}
 800299c:	b084      	sub	sp, #16
 800299e:	af00      	add	r7, sp, #0
 80029a0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029a6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	2200      	movs	r2, #0
 80029ac:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	2200      	movs	r2, #0
 80029b2:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80029b4:	68f8      	ldr	r0, [r7, #12]
 80029b6:	f7ff fd62 	bl	800247e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80029ba:	bf00      	nop
 80029bc:	3710      	adds	r7, #16
 80029be:	46bd      	mov	sp, r7
 80029c0:	bd80      	pop	{r7, pc}

080029c2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80029c2:	b480      	push	{r7}
 80029c4:	b085      	sub	sp, #20
 80029c6:	af00      	add	r7, sp, #0
 80029c8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80029d0:	b2db      	uxtb	r3, r3
 80029d2:	2b21      	cmp	r3, #33	@ 0x21
 80029d4:	d13e      	bne.n	8002a54 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	689b      	ldr	r3, [r3, #8]
 80029da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80029de:	d114      	bne.n	8002a0a <UART_Transmit_IT+0x48>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	691b      	ldr	r3, [r3, #16]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d110      	bne.n	8002a0a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6a1b      	ldr	r3, [r3, #32]
 80029ec:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	881b      	ldrh	r3, [r3, #0]
 80029f2:	461a      	mov	r2, r3
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80029fc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6a1b      	ldr	r3, [r3, #32]
 8002a02:	1c9a      	adds	r2, r3, #2
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	621a      	str	r2, [r3, #32]
 8002a08:	e008      	b.n	8002a1c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6a1b      	ldr	r3, [r3, #32]
 8002a0e:	1c59      	adds	r1, r3, #1
 8002a10:	687a      	ldr	r2, [r7, #4]
 8002a12:	6211      	str	r1, [r2, #32]
 8002a14:	781a      	ldrb	r2, [r3, #0]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002a20:	b29b      	uxth	r3, r3
 8002a22:	3b01      	subs	r3, #1
 8002a24:	b29b      	uxth	r3, r3
 8002a26:	687a      	ldr	r2, [r7, #4]
 8002a28:	4619      	mov	r1, r3
 8002a2a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d10f      	bne.n	8002a50 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	68da      	ldr	r2, [r3, #12]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002a3e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	68da      	ldr	r2, [r3, #12]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002a4e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002a50:	2300      	movs	r3, #0
 8002a52:	e000      	b.n	8002a56 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002a54:	2302      	movs	r3, #2
  }
}
 8002a56:	4618      	mov	r0, r3
 8002a58:	3714      	adds	r7, #20
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bc80      	pop	{r7}
 8002a5e:	4770      	bx	lr

08002a60 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b082      	sub	sp, #8
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	68da      	ldr	r2, [r3, #12]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002a76:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2220      	movs	r2, #32
 8002a7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002a80:	6878      	ldr	r0, [r7, #4]
 8002a82:	f7ff fcf3 	bl	800246c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002a86:	2300      	movs	r3, #0
}
 8002a88:	4618      	mov	r0, r3
 8002a8a:	3708      	adds	r7, #8
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bd80      	pop	{r7, pc}

08002a90 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b08c      	sub	sp, #48	@ 0x30
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002a9e:	b2db      	uxtb	r3, r3
 8002aa0:	2b22      	cmp	r3, #34	@ 0x22
 8002aa2:	f040 80ae 	bne.w	8002c02 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	689b      	ldr	r3, [r3, #8]
 8002aaa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002aae:	d117      	bne.n	8002ae0 <UART_Receive_IT+0x50>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	691b      	ldr	r3, [r3, #16]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d113      	bne.n	8002ae0 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ac0:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	b29b      	uxth	r3, r3
 8002aca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ace:	b29a      	uxth	r2, r3
 8002ad0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ad2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ad8:	1c9a      	adds	r2, r3, #2
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	629a      	str	r2, [r3, #40]	@ 0x28
 8002ade:	e026      	b.n	8002b2e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ae4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	689b      	ldr	r3, [r3, #8]
 8002aee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002af2:	d007      	beq.n	8002b04 <UART_Receive_IT+0x74>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	689b      	ldr	r3, [r3, #8]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d10a      	bne.n	8002b12 <UART_Receive_IT+0x82>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	691b      	ldr	r3, [r3, #16]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d106      	bne.n	8002b12 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	b2da      	uxtb	r2, r3
 8002b0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b0e:	701a      	strb	r2, [r3, #0]
 8002b10:	e008      	b.n	8002b24 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	b2db      	uxtb	r3, r3
 8002b1a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002b1e:	b2da      	uxtb	r2, r3
 8002b20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b22:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b28:	1c5a      	adds	r2, r3, #1
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002b32:	b29b      	uxth	r3, r3
 8002b34:	3b01      	subs	r3, #1
 8002b36:	b29b      	uxth	r3, r3
 8002b38:	687a      	ldr	r2, [r7, #4]
 8002b3a:	4619      	mov	r1, r3
 8002b3c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d15d      	bne.n	8002bfe <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	68da      	ldr	r2, [r3, #12]
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f022 0220 	bic.w	r2, r2, #32
 8002b50:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	68da      	ldr	r2, [r3, #12]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002b60:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	695a      	ldr	r2, [r3, #20]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f022 0201 	bic.w	r2, r2, #1
 8002b70:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2220      	movs	r2, #32
 8002b76:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b84:	2b01      	cmp	r3, #1
 8002b86:	d135      	bne.n	8002bf4 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	330c      	adds	r3, #12
 8002b94:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b96:	697b      	ldr	r3, [r7, #20]
 8002b98:	e853 3f00 	ldrex	r3, [r3]
 8002b9c:	613b      	str	r3, [r7, #16]
   return(result);
 8002b9e:	693b      	ldr	r3, [r7, #16]
 8002ba0:	f023 0310 	bic.w	r3, r3, #16
 8002ba4:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	330c      	adds	r3, #12
 8002bac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002bae:	623a      	str	r2, [r7, #32]
 8002bb0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bb2:	69f9      	ldr	r1, [r7, #28]
 8002bb4:	6a3a      	ldr	r2, [r7, #32]
 8002bb6:	e841 2300 	strex	r3, r2, [r1]
 8002bba:	61bb      	str	r3, [r7, #24]
   return(result);
 8002bbc:	69bb      	ldr	r3, [r7, #24]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d1e5      	bne.n	8002b8e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f003 0310 	and.w	r3, r3, #16
 8002bcc:	2b10      	cmp	r3, #16
 8002bce:	d10a      	bne.n	8002be6 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	60fb      	str	r3, [r7, #12]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	60fb      	str	r3, [r7, #12]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	60fb      	str	r3, [r7, #12]
 8002be4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002bea:	4619      	mov	r1, r3
 8002bec:	6878      	ldr	r0, [r7, #4]
 8002bee:	f7ff fc4f 	bl	8002490 <HAL_UARTEx_RxEventCallback>
 8002bf2:	e002      	b.n	8002bfa <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002bf4:	6878      	ldr	r0, [r7, #4]
 8002bf6:	f7fd fc8f 	bl	8000518 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	e002      	b.n	8002c04 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	e000      	b.n	8002c04 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8002c02:	2302      	movs	r3, #2
  }
}
 8002c04:	4618      	mov	r0, r3
 8002c06:	3730      	adds	r7, #48	@ 0x30
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bd80      	pop	{r7, pc}

08002c0c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b084      	sub	sp, #16
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	691b      	ldr	r3, [r3, #16]
 8002c1a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	68da      	ldr	r2, [r3, #12]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	430a      	orrs	r2, r1
 8002c28:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	689a      	ldr	r2, [r3, #8]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	691b      	ldr	r3, [r3, #16]
 8002c32:	431a      	orrs	r2, r3
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	695b      	ldr	r3, [r3, #20]
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	68db      	ldr	r3, [r3, #12]
 8002c42:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8002c46:	f023 030c 	bic.w	r3, r3, #12
 8002c4a:	687a      	ldr	r2, [r7, #4]
 8002c4c:	6812      	ldr	r2, [r2, #0]
 8002c4e:	68b9      	ldr	r1, [r7, #8]
 8002c50:	430b      	orrs	r3, r1
 8002c52:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	695b      	ldr	r3, [r3, #20]
 8002c5a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	699a      	ldr	r2, [r3, #24]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	430a      	orrs	r2, r1
 8002c68:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a2c      	ldr	r2, [pc, #176]	@ (8002d20 <UART_SetConfig+0x114>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d103      	bne.n	8002c7c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002c74:	f7ff f836 	bl	8001ce4 <HAL_RCC_GetPCLK2Freq>
 8002c78:	60f8      	str	r0, [r7, #12]
 8002c7a:	e002      	b.n	8002c82 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002c7c:	f7ff f81e 	bl	8001cbc <HAL_RCC_GetPCLK1Freq>
 8002c80:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002c82:	68fa      	ldr	r2, [r7, #12]
 8002c84:	4613      	mov	r3, r2
 8002c86:	009b      	lsls	r3, r3, #2
 8002c88:	4413      	add	r3, r2
 8002c8a:	009a      	lsls	r2, r3, #2
 8002c8c:	441a      	add	r2, r3
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	009b      	lsls	r3, r3, #2
 8002c94:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c98:	4a22      	ldr	r2, [pc, #136]	@ (8002d24 <UART_SetConfig+0x118>)
 8002c9a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c9e:	095b      	lsrs	r3, r3, #5
 8002ca0:	0119      	lsls	r1, r3, #4
 8002ca2:	68fa      	ldr	r2, [r7, #12]
 8002ca4:	4613      	mov	r3, r2
 8002ca6:	009b      	lsls	r3, r3, #2
 8002ca8:	4413      	add	r3, r2
 8002caa:	009a      	lsls	r2, r3, #2
 8002cac:	441a      	add	r2, r3
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	009b      	lsls	r3, r3, #2
 8002cb4:	fbb2 f2f3 	udiv	r2, r2, r3
 8002cb8:	4b1a      	ldr	r3, [pc, #104]	@ (8002d24 <UART_SetConfig+0x118>)
 8002cba:	fba3 0302 	umull	r0, r3, r3, r2
 8002cbe:	095b      	lsrs	r3, r3, #5
 8002cc0:	2064      	movs	r0, #100	@ 0x64
 8002cc2:	fb00 f303 	mul.w	r3, r0, r3
 8002cc6:	1ad3      	subs	r3, r2, r3
 8002cc8:	011b      	lsls	r3, r3, #4
 8002cca:	3332      	adds	r3, #50	@ 0x32
 8002ccc:	4a15      	ldr	r2, [pc, #84]	@ (8002d24 <UART_SetConfig+0x118>)
 8002cce:	fba2 2303 	umull	r2, r3, r2, r3
 8002cd2:	095b      	lsrs	r3, r3, #5
 8002cd4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002cd8:	4419      	add	r1, r3
 8002cda:	68fa      	ldr	r2, [r7, #12]
 8002cdc:	4613      	mov	r3, r2
 8002cde:	009b      	lsls	r3, r3, #2
 8002ce0:	4413      	add	r3, r2
 8002ce2:	009a      	lsls	r2, r3, #2
 8002ce4:	441a      	add	r2, r3
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	009b      	lsls	r3, r3, #2
 8002cec:	fbb2 f2f3 	udiv	r2, r2, r3
 8002cf0:	4b0c      	ldr	r3, [pc, #48]	@ (8002d24 <UART_SetConfig+0x118>)
 8002cf2:	fba3 0302 	umull	r0, r3, r3, r2
 8002cf6:	095b      	lsrs	r3, r3, #5
 8002cf8:	2064      	movs	r0, #100	@ 0x64
 8002cfa:	fb00 f303 	mul.w	r3, r0, r3
 8002cfe:	1ad3      	subs	r3, r2, r3
 8002d00:	011b      	lsls	r3, r3, #4
 8002d02:	3332      	adds	r3, #50	@ 0x32
 8002d04:	4a07      	ldr	r2, [pc, #28]	@ (8002d24 <UART_SetConfig+0x118>)
 8002d06:	fba2 2303 	umull	r2, r3, r2, r3
 8002d0a:	095b      	lsrs	r3, r3, #5
 8002d0c:	f003 020f 	and.w	r2, r3, #15
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	440a      	add	r2, r1
 8002d16:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002d18:	bf00      	nop
 8002d1a:	3710      	adds	r7, #16
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bd80      	pop	{r7, pc}
 8002d20:	40013800 	.word	0x40013800
 8002d24:	51eb851f 	.word	0x51eb851f

08002d28 <std>:
 8002d28:	2300      	movs	r3, #0
 8002d2a:	b510      	push	{r4, lr}
 8002d2c:	4604      	mov	r4, r0
 8002d2e:	e9c0 3300 	strd	r3, r3, [r0]
 8002d32:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002d36:	6083      	str	r3, [r0, #8]
 8002d38:	8181      	strh	r1, [r0, #12]
 8002d3a:	6643      	str	r3, [r0, #100]	@ 0x64
 8002d3c:	81c2      	strh	r2, [r0, #14]
 8002d3e:	6183      	str	r3, [r0, #24]
 8002d40:	4619      	mov	r1, r3
 8002d42:	2208      	movs	r2, #8
 8002d44:	305c      	adds	r0, #92	@ 0x5c
 8002d46:	f000 fa01 	bl	800314c <memset>
 8002d4a:	4b0d      	ldr	r3, [pc, #52]	@ (8002d80 <std+0x58>)
 8002d4c:	6224      	str	r4, [r4, #32]
 8002d4e:	6263      	str	r3, [r4, #36]	@ 0x24
 8002d50:	4b0c      	ldr	r3, [pc, #48]	@ (8002d84 <std+0x5c>)
 8002d52:	62a3      	str	r3, [r4, #40]	@ 0x28
 8002d54:	4b0c      	ldr	r3, [pc, #48]	@ (8002d88 <std+0x60>)
 8002d56:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002d58:	4b0c      	ldr	r3, [pc, #48]	@ (8002d8c <std+0x64>)
 8002d5a:	6323      	str	r3, [r4, #48]	@ 0x30
 8002d5c:	4b0c      	ldr	r3, [pc, #48]	@ (8002d90 <std+0x68>)
 8002d5e:	429c      	cmp	r4, r3
 8002d60:	d006      	beq.n	8002d70 <std+0x48>
 8002d62:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8002d66:	4294      	cmp	r4, r2
 8002d68:	d002      	beq.n	8002d70 <std+0x48>
 8002d6a:	33d0      	adds	r3, #208	@ 0xd0
 8002d6c:	429c      	cmp	r4, r3
 8002d6e:	d105      	bne.n	8002d7c <std+0x54>
 8002d70:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8002d74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002d78:	f000 ba60 	b.w	800323c <__retarget_lock_init_recursive>
 8002d7c:	bd10      	pop	{r4, pc}
 8002d7e:	bf00      	nop
 8002d80:	08002f9d 	.word	0x08002f9d
 8002d84:	08002fbf 	.word	0x08002fbf
 8002d88:	08002ff7 	.word	0x08002ff7
 8002d8c:	0800301b 	.word	0x0800301b
 8002d90:	20000220 	.word	0x20000220

08002d94 <stdio_exit_handler>:
 8002d94:	4a02      	ldr	r2, [pc, #8]	@ (8002da0 <stdio_exit_handler+0xc>)
 8002d96:	4903      	ldr	r1, [pc, #12]	@ (8002da4 <stdio_exit_handler+0x10>)
 8002d98:	4803      	ldr	r0, [pc, #12]	@ (8002da8 <stdio_exit_handler+0x14>)
 8002d9a:	f000 b869 	b.w	8002e70 <_fwalk_sglue>
 8002d9e:	bf00      	nop
 8002da0:	2000000c 	.word	0x2000000c
 8002da4:	08003ad5 	.word	0x08003ad5
 8002da8:	2000001c 	.word	0x2000001c

08002dac <cleanup_stdio>:
 8002dac:	6841      	ldr	r1, [r0, #4]
 8002dae:	4b0c      	ldr	r3, [pc, #48]	@ (8002de0 <cleanup_stdio+0x34>)
 8002db0:	b510      	push	{r4, lr}
 8002db2:	4299      	cmp	r1, r3
 8002db4:	4604      	mov	r4, r0
 8002db6:	d001      	beq.n	8002dbc <cleanup_stdio+0x10>
 8002db8:	f000 fe8c 	bl	8003ad4 <_fflush_r>
 8002dbc:	68a1      	ldr	r1, [r4, #8]
 8002dbe:	4b09      	ldr	r3, [pc, #36]	@ (8002de4 <cleanup_stdio+0x38>)
 8002dc0:	4299      	cmp	r1, r3
 8002dc2:	d002      	beq.n	8002dca <cleanup_stdio+0x1e>
 8002dc4:	4620      	mov	r0, r4
 8002dc6:	f000 fe85 	bl	8003ad4 <_fflush_r>
 8002dca:	68e1      	ldr	r1, [r4, #12]
 8002dcc:	4b06      	ldr	r3, [pc, #24]	@ (8002de8 <cleanup_stdio+0x3c>)
 8002dce:	4299      	cmp	r1, r3
 8002dd0:	d004      	beq.n	8002ddc <cleanup_stdio+0x30>
 8002dd2:	4620      	mov	r0, r4
 8002dd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002dd8:	f000 be7c 	b.w	8003ad4 <_fflush_r>
 8002ddc:	bd10      	pop	{r4, pc}
 8002dde:	bf00      	nop
 8002de0:	20000220 	.word	0x20000220
 8002de4:	20000288 	.word	0x20000288
 8002de8:	200002f0 	.word	0x200002f0

08002dec <global_stdio_init.part.0>:
 8002dec:	b510      	push	{r4, lr}
 8002dee:	4b0b      	ldr	r3, [pc, #44]	@ (8002e1c <global_stdio_init.part.0+0x30>)
 8002df0:	4c0b      	ldr	r4, [pc, #44]	@ (8002e20 <global_stdio_init.part.0+0x34>)
 8002df2:	4a0c      	ldr	r2, [pc, #48]	@ (8002e24 <global_stdio_init.part.0+0x38>)
 8002df4:	4620      	mov	r0, r4
 8002df6:	601a      	str	r2, [r3, #0]
 8002df8:	2104      	movs	r1, #4
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	f7ff ff94 	bl	8002d28 <std>
 8002e00:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8002e04:	2201      	movs	r2, #1
 8002e06:	2109      	movs	r1, #9
 8002e08:	f7ff ff8e 	bl	8002d28 <std>
 8002e0c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8002e10:	2202      	movs	r2, #2
 8002e12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002e16:	2112      	movs	r1, #18
 8002e18:	f7ff bf86 	b.w	8002d28 <std>
 8002e1c:	20000358 	.word	0x20000358
 8002e20:	20000220 	.word	0x20000220
 8002e24:	08002d95 	.word	0x08002d95

08002e28 <__sfp_lock_acquire>:
 8002e28:	4801      	ldr	r0, [pc, #4]	@ (8002e30 <__sfp_lock_acquire+0x8>)
 8002e2a:	f000 ba08 	b.w	800323e <__retarget_lock_acquire_recursive>
 8002e2e:	bf00      	nop
 8002e30:	20000361 	.word	0x20000361

08002e34 <__sfp_lock_release>:
 8002e34:	4801      	ldr	r0, [pc, #4]	@ (8002e3c <__sfp_lock_release+0x8>)
 8002e36:	f000 ba03 	b.w	8003240 <__retarget_lock_release_recursive>
 8002e3a:	bf00      	nop
 8002e3c:	20000361 	.word	0x20000361

08002e40 <__sinit>:
 8002e40:	b510      	push	{r4, lr}
 8002e42:	4604      	mov	r4, r0
 8002e44:	f7ff fff0 	bl	8002e28 <__sfp_lock_acquire>
 8002e48:	6a23      	ldr	r3, [r4, #32]
 8002e4a:	b11b      	cbz	r3, 8002e54 <__sinit+0x14>
 8002e4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002e50:	f7ff bff0 	b.w	8002e34 <__sfp_lock_release>
 8002e54:	4b04      	ldr	r3, [pc, #16]	@ (8002e68 <__sinit+0x28>)
 8002e56:	6223      	str	r3, [r4, #32]
 8002e58:	4b04      	ldr	r3, [pc, #16]	@ (8002e6c <__sinit+0x2c>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d1f5      	bne.n	8002e4c <__sinit+0xc>
 8002e60:	f7ff ffc4 	bl	8002dec <global_stdio_init.part.0>
 8002e64:	e7f2      	b.n	8002e4c <__sinit+0xc>
 8002e66:	bf00      	nop
 8002e68:	08002dad 	.word	0x08002dad
 8002e6c:	20000358 	.word	0x20000358

08002e70 <_fwalk_sglue>:
 8002e70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002e74:	4607      	mov	r7, r0
 8002e76:	4688      	mov	r8, r1
 8002e78:	4614      	mov	r4, r2
 8002e7a:	2600      	movs	r6, #0
 8002e7c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002e80:	f1b9 0901 	subs.w	r9, r9, #1
 8002e84:	d505      	bpl.n	8002e92 <_fwalk_sglue+0x22>
 8002e86:	6824      	ldr	r4, [r4, #0]
 8002e88:	2c00      	cmp	r4, #0
 8002e8a:	d1f7      	bne.n	8002e7c <_fwalk_sglue+0xc>
 8002e8c:	4630      	mov	r0, r6
 8002e8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002e92:	89ab      	ldrh	r3, [r5, #12]
 8002e94:	2b01      	cmp	r3, #1
 8002e96:	d907      	bls.n	8002ea8 <_fwalk_sglue+0x38>
 8002e98:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002e9c:	3301      	adds	r3, #1
 8002e9e:	d003      	beq.n	8002ea8 <_fwalk_sglue+0x38>
 8002ea0:	4629      	mov	r1, r5
 8002ea2:	4638      	mov	r0, r7
 8002ea4:	47c0      	blx	r8
 8002ea6:	4306      	orrs	r6, r0
 8002ea8:	3568      	adds	r5, #104	@ 0x68
 8002eaa:	e7e9      	b.n	8002e80 <_fwalk_sglue+0x10>

08002eac <iprintf>:
 8002eac:	b40f      	push	{r0, r1, r2, r3}
 8002eae:	b507      	push	{r0, r1, r2, lr}
 8002eb0:	4906      	ldr	r1, [pc, #24]	@ (8002ecc <iprintf+0x20>)
 8002eb2:	ab04      	add	r3, sp, #16
 8002eb4:	6808      	ldr	r0, [r1, #0]
 8002eb6:	f853 2b04 	ldr.w	r2, [r3], #4
 8002eba:	6881      	ldr	r1, [r0, #8]
 8002ebc:	9301      	str	r3, [sp, #4]
 8002ebe:	f000 fadf 	bl	8003480 <_vfiprintf_r>
 8002ec2:	b003      	add	sp, #12
 8002ec4:	f85d eb04 	ldr.w	lr, [sp], #4
 8002ec8:	b004      	add	sp, #16
 8002eca:	4770      	bx	lr
 8002ecc:	20000018 	.word	0x20000018

08002ed0 <putchar>:
 8002ed0:	4b02      	ldr	r3, [pc, #8]	@ (8002edc <putchar+0xc>)
 8002ed2:	4601      	mov	r1, r0
 8002ed4:	6818      	ldr	r0, [r3, #0]
 8002ed6:	6882      	ldr	r2, [r0, #8]
 8002ed8:	f000 be85 	b.w	8003be6 <_putc_r>
 8002edc:	20000018 	.word	0x20000018

08002ee0 <_puts_r>:
 8002ee0:	6a03      	ldr	r3, [r0, #32]
 8002ee2:	b570      	push	{r4, r5, r6, lr}
 8002ee4:	4605      	mov	r5, r0
 8002ee6:	460e      	mov	r6, r1
 8002ee8:	6884      	ldr	r4, [r0, #8]
 8002eea:	b90b      	cbnz	r3, 8002ef0 <_puts_r+0x10>
 8002eec:	f7ff ffa8 	bl	8002e40 <__sinit>
 8002ef0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002ef2:	07db      	lsls	r3, r3, #31
 8002ef4:	d405      	bmi.n	8002f02 <_puts_r+0x22>
 8002ef6:	89a3      	ldrh	r3, [r4, #12]
 8002ef8:	0598      	lsls	r0, r3, #22
 8002efa:	d402      	bmi.n	8002f02 <_puts_r+0x22>
 8002efc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002efe:	f000 f99e 	bl	800323e <__retarget_lock_acquire_recursive>
 8002f02:	89a3      	ldrh	r3, [r4, #12]
 8002f04:	0719      	lsls	r1, r3, #28
 8002f06:	d502      	bpl.n	8002f0e <_puts_r+0x2e>
 8002f08:	6923      	ldr	r3, [r4, #16]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d135      	bne.n	8002f7a <_puts_r+0x9a>
 8002f0e:	4621      	mov	r1, r4
 8002f10:	4628      	mov	r0, r5
 8002f12:	f000 f8c5 	bl	80030a0 <__swsetup_r>
 8002f16:	b380      	cbz	r0, 8002f7a <_puts_r+0x9a>
 8002f18:	f04f 35ff 	mov.w	r5, #4294967295
 8002f1c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002f1e:	07da      	lsls	r2, r3, #31
 8002f20:	d405      	bmi.n	8002f2e <_puts_r+0x4e>
 8002f22:	89a3      	ldrh	r3, [r4, #12]
 8002f24:	059b      	lsls	r3, r3, #22
 8002f26:	d402      	bmi.n	8002f2e <_puts_r+0x4e>
 8002f28:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002f2a:	f000 f989 	bl	8003240 <__retarget_lock_release_recursive>
 8002f2e:	4628      	mov	r0, r5
 8002f30:	bd70      	pop	{r4, r5, r6, pc}
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	da04      	bge.n	8002f40 <_puts_r+0x60>
 8002f36:	69a2      	ldr	r2, [r4, #24]
 8002f38:	429a      	cmp	r2, r3
 8002f3a:	dc17      	bgt.n	8002f6c <_puts_r+0x8c>
 8002f3c:	290a      	cmp	r1, #10
 8002f3e:	d015      	beq.n	8002f6c <_puts_r+0x8c>
 8002f40:	6823      	ldr	r3, [r4, #0]
 8002f42:	1c5a      	adds	r2, r3, #1
 8002f44:	6022      	str	r2, [r4, #0]
 8002f46:	7019      	strb	r1, [r3, #0]
 8002f48:	68a3      	ldr	r3, [r4, #8]
 8002f4a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002f4e:	3b01      	subs	r3, #1
 8002f50:	60a3      	str	r3, [r4, #8]
 8002f52:	2900      	cmp	r1, #0
 8002f54:	d1ed      	bne.n	8002f32 <_puts_r+0x52>
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	da11      	bge.n	8002f7e <_puts_r+0x9e>
 8002f5a:	4622      	mov	r2, r4
 8002f5c:	210a      	movs	r1, #10
 8002f5e:	4628      	mov	r0, r5
 8002f60:	f000 f85f 	bl	8003022 <__swbuf_r>
 8002f64:	3001      	adds	r0, #1
 8002f66:	d0d7      	beq.n	8002f18 <_puts_r+0x38>
 8002f68:	250a      	movs	r5, #10
 8002f6a:	e7d7      	b.n	8002f1c <_puts_r+0x3c>
 8002f6c:	4622      	mov	r2, r4
 8002f6e:	4628      	mov	r0, r5
 8002f70:	f000 f857 	bl	8003022 <__swbuf_r>
 8002f74:	3001      	adds	r0, #1
 8002f76:	d1e7      	bne.n	8002f48 <_puts_r+0x68>
 8002f78:	e7ce      	b.n	8002f18 <_puts_r+0x38>
 8002f7a:	3e01      	subs	r6, #1
 8002f7c:	e7e4      	b.n	8002f48 <_puts_r+0x68>
 8002f7e:	6823      	ldr	r3, [r4, #0]
 8002f80:	1c5a      	adds	r2, r3, #1
 8002f82:	6022      	str	r2, [r4, #0]
 8002f84:	220a      	movs	r2, #10
 8002f86:	701a      	strb	r2, [r3, #0]
 8002f88:	e7ee      	b.n	8002f68 <_puts_r+0x88>
	...

08002f8c <puts>:
 8002f8c:	4b02      	ldr	r3, [pc, #8]	@ (8002f98 <puts+0xc>)
 8002f8e:	4601      	mov	r1, r0
 8002f90:	6818      	ldr	r0, [r3, #0]
 8002f92:	f7ff bfa5 	b.w	8002ee0 <_puts_r>
 8002f96:	bf00      	nop
 8002f98:	20000018 	.word	0x20000018

08002f9c <__sread>:
 8002f9c:	b510      	push	{r4, lr}
 8002f9e:	460c      	mov	r4, r1
 8002fa0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002fa4:	f000 f8fc 	bl	80031a0 <_read_r>
 8002fa8:	2800      	cmp	r0, #0
 8002faa:	bfab      	itete	ge
 8002fac:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8002fae:	89a3      	ldrhlt	r3, [r4, #12]
 8002fb0:	181b      	addge	r3, r3, r0
 8002fb2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8002fb6:	bfac      	ite	ge
 8002fb8:	6563      	strge	r3, [r4, #84]	@ 0x54
 8002fba:	81a3      	strhlt	r3, [r4, #12]
 8002fbc:	bd10      	pop	{r4, pc}

08002fbe <__swrite>:
 8002fbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002fc2:	461f      	mov	r7, r3
 8002fc4:	898b      	ldrh	r3, [r1, #12]
 8002fc6:	4605      	mov	r5, r0
 8002fc8:	05db      	lsls	r3, r3, #23
 8002fca:	460c      	mov	r4, r1
 8002fcc:	4616      	mov	r6, r2
 8002fce:	d505      	bpl.n	8002fdc <__swrite+0x1e>
 8002fd0:	2302      	movs	r3, #2
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002fd8:	f000 f8d0 	bl	800317c <_lseek_r>
 8002fdc:	89a3      	ldrh	r3, [r4, #12]
 8002fde:	4632      	mov	r2, r6
 8002fe0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002fe4:	81a3      	strh	r3, [r4, #12]
 8002fe6:	4628      	mov	r0, r5
 8002fe8:	463b      	mov	r3, r7
 8002fea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002fee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002ff2:	f000 b8e7 	b.w	80031c4 <_write_r>

08002ff6 <__sseek>:
 8002ff6:	b510      	push	{r4, lr}
 8002ff8:	460c      	mov	r4, r1
 8002ffa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002ffe:	f000 f8bd 	bl	800317c <_lseek_r>
 8003002:	1c43      	adds	r3, r0, #1
 8003004:	89a3      	ldrh	r3, [r4, #12]
 8003006:	bf15      	itete	ne
 8003008:	6560      	strne	r0, [r4, #84]	@ 0x54
 800300a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800300e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003012:	81a3      	strheq	r3, [r4, #12]
 8003014:	bf18      	it	ne
 8003016:	81a3      	strhne	r3, [r4, #12]
 8003018:	bd10      	pop	{r4, pc}

0800301a <__sclose>:
 800301a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800301e:	f000 b89d 	b.w	800315c <_close_r>

08003022 <__swbuf_r>:
 8003022:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003024:	460e      	mov	r6, r1
 8003026:	4614      	mov	r4, r2
 8003028:	4605      	mov	r5, r0
 800302a:	b118      	cbz	r0, 8003034 <__swbuf_r+0x12>
 800302c:	6a03      	ldr	r3, [r0, #32]
 800302e:	b90b      	cbnz	r3, 8003034 <__swbuf_r+0x12>
 8003030:	f7ff ff06 	bl	8002e40 <__sinit>
 8003034:	69a3      	ldr	r3, [r4, #24]
 8003036:	60a3      	str	r3, [r4, #8]
 8003038:	89a3      	ldrh	r3, [r4, #12]
 800303a:	071a      	lsls	r2, r3, #28
 800303c:	d501      	bpl.n	8003042 <__swbuf_r+0x20>
 800303e:	6923      	ldr	r3, [r4, #16]
 8003040:	b943      	cbnz	r3, 8003054 <__swbuf_r+0x32>
 8003042:	4621      	mov	r1, r4
 8003044:	4628      	mov	r0, r5
 8003046:	f000 f82b 	bl	80030a0 <__swsetup_r>
 800304a:	b118      	cbz	r0, 8003054 <__swbuf_r+0x32>
 800304c:	f04f 37ff 	mov.w	r7, #4294967295
 8003050:	4638      	mov	r0, r7
 8003052:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003054:	6823      	ldr	r3, [r4, #0]
 8003056:	6922      	ldr	r2, [r4, #16]
 8003058:	b2f6      	uxtb	r6, r6
 800305a:	1a98      	subs	r0, r3, r2
 800305c:	6963      	ldr	r3, [r4, #20]
 800305e:	4637      	mov	r7, r6
 8003060:	4283      	cmp	r3, r0
 8003062:	dc05      	bgt.n	8003070 <__swbuf_r+0x4e>
 8003064:	4621      	mov	r1, r4
 8003066:	4628      	mov	r0, r5
 8003068:	f000 fd34 	bl	8003ad4 <_fflush_r>
 800306c:	2800      	cmp	r0, #0
 800306e:	d1ed      	bne.n	800304c <__swbuf_r+0x2a>
 8003070:	68a3      	ldr	r3, [r4, #8]
 8003072:	3b01      	subs	r3, #1
 8003074:	60a3      	str	r3, [r4, #8]
 8003076:	6823      	ldr	r3, [r4, #0]
 8003078:	1c5a      	adds	r2, r3, #1
 800307a:	6022      	str	r2, [r4, #0]
 800307c:	701e      	strb	r6, [r3, #0]
 800307e:	6962      	ldr	r2, [r4, #20]
 8003080:	1c43      	adds	r3, r0, #1
 8003082:	429a      	cmp	r2, r3
 8003084:	d004      	beq.n	8003090 <__swbuf_r+0x6e>
 8003086:	89a3      	ldrh	r3, [r4, #12]
 8003088:	07db      	lsls	r3, r3, #31
 800308a:	d5e1      	bpl.n	8003050 <__swbuf_r+0x2e>
 800308c:	2e0a      	cmp	r6, #10
 800308e:	d1df      	bne.n	8003050 <__swbuf_r+0x2e>
 8003090:	4621      	mov	r1, r4
 8003092:	4628      	mov	r0, r5
 8003094:	f000 fd1e 	bl	8003ad4 <_fflush_r>
 8003098:	2800      	cmp	r0, #0
 800309a:	d0d9      	beq.n	8003050 <__swbuf_r+0x2e>
 800309c:	e7d6      	b.n	800304c <__swbuf_r+0x2a>
	...

080030a0 <__swsetup_r>:
 80030a0:	b538      	push	{r3, r4, r5, lr}
 80030a2:	4b29      	ldr	r3, [pc, #164]	@ (8003148 <__swsetup_r+0xa8>)
 80030a4:	4605      	mov	r5, r0
 80030a6:	6818      	ldr	r0, [r3, #0]
 80030a8:	460c      	mov	r4, r1
 80030aa:	b118      	cbz	r0, 80030b4 <__swsetup_r+0x14>
 80030ac:	6a03      	ldr	r3, [r0, #32]
 80030ae:	b90b      	cbnz	r3, 80030b4 <__swsetup_r+0x14>
 80030b0:	f7ff fec6 	bl	8002e40 <__sinit>
 80030b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80030b8:	0719      	lsls	r1, r3, #28
 80030ba:	d422      	bmi.n	8003102 <__swsetup_r+0x62>
 80030bc:	06da      	lsls	r2, r3, #27
 80030be:	d407      	bmi.n	80030d0 <__swsetup_r+0x30>
 80030c0:	2209      	movs	r2, #9
 80030c2:	602a      	str	r2, [r5, #0]
 80030c4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80030c8:	f04f 30ff 	mov.w	r0, #4294967295
 80030cc:	81a3      	strh	r3, [r4, #12]
 80030ce:	e033      	b.n	8003138 <__swsetup_r+0x98>
 80030d0:	0758      	lsls	r0, r3, #29
 80030d2:	d512      	bpl.n	80030fa <__swsetup_r+0x5a>
 80030d4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80030d6:	b141      	cbz	r1, 80030ea <__swsetup_r+0x4a>
 80030d8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80030dc:	4299      	cmp	r1, r3
 80030de:	d002      	beq.n	80030e6 <__swsetup_r+0x46>
 80030e0:	4628      	mov	r0, r5
 80030e2:	f000 f8af 	bl	8003244 <_free_r>
 80030e6:	2300      	movs	r3, #0
 80030e8:	6363      	str	r3, [r4, #52]	@ 0x34
 80030ea:	89a3      	ldrh	r3, [r4, #12]
 80030ec:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80030f0:	81a3      	strh	r3, [r4, #12]
 80030f2:	2300      	movs	r3, #0
 80030f4:	6063      	str	r3, [r4, #4]
 80030f6:	6923      	ldr	r3, [r4, #16]
 80030f8:	6023      	str	r3, [r4, #0]
 80030fa:	89a3      	ldrh	r3, [r4, #12]
 80030fc:	f043 0308 	orr.w	r3, r3, #8
 8003100:	81a3      	strh	r3, [r4, #12]
 8003102:	6923      	ldr	r3, [r4, #16]
 8003104:	b94b      	cbnz	r3, 800311a <__swsetup_r+0x7a>
 8003106:	89a3      	ldrh	r3, [r4, #12]
 8003108:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800310c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003110:	d003      	beq.n	800311a <__swsetup_r+0x7a>
 8003112:	4621      	mov	r1, r4
 8003114:	4628      	mov	r0, r5
 8003116:	f000 fd2a 	bl	8003b6e <__smakebuf_r>
 800311a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800311e:	f013 0201 	ands.w	r2, r3, #1
 8003122:	d00a      	beq.n	800313a <__swsetup_r+0x9a>
 8003124:	2200      	movs	r2, #0
 8003126:	60a2      	str	r2, [r4, #8]
 8003128:	6962      	ldr	r2, [r4, #20]
 800312a:	4252      	negs	r2, r2
 800312c:	61a2      	str	r2, [r4, #24]
 800312e:	6922      	ldr	r2, [r4, #16]
 8003130:	b942      	cbnz	r2, 8003144 <__swsetup_r+0xa4>
 8003132:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8003136:	d1c5      	bne.n	80030c4 <__swsetup_r+0x24>
 8003138:	bd38      	pop	{r3, r4, r5, pc}
 800313a:	0799      	lsls	r1, r3, #30
 800313c:	bf58      	it	pl
 800313e:	6962      	ldrpl	r2, [r4, #20]
 8003140:	60a2      	str	r2, [r4, #8]
 8003142:	e7f4      	b.n	800312e <__swsetup_r+0x8e>
 8003144:	2000      	movs	r0, #0
 8003146:	e7f7      	b.n	8003138 <__swsetup_r+0x98>
 8003148:	20000018 	.word	0x20000018

0800314c <memset>:
 800314c:	4603      	mov	r3, r0
 800314e:	4402      	add	r2, r0
 8003150:	4293      	cmp	r3, r2
 8003152:	d100      	bne.n	8003156 <memset+0xa>
 8003154:	4770      	bx	lr
 8003156:	f803 1b01 	strb.w	r1, [r3], #1
 800315a:	e7f9      	b.n	8003150 <memset+0x4>

0800315c <_close_r>:
 800315c:	b538      	push	{r3, r4, r5, lr}
 800315e:	2300      	movs	r3, #0
 8003160:	4d05      	ldr	r5, [pc, #20]	@ (8003178 <_close_r+0x1c>)
 8003162:	4604      	mov	r4, r0
 8003164:	4608      	mov	r0, r1
 8003166:	602b      	str	r3, [r5, #0]
 8003168:	f7fd facb 	bl	8000702 <_close>
 800316c:	1c43      	adds	r3, r0, #1
 800316e:	d102      	bne.n	8003176 <_close_r+0x1a>
 8003170:	682b      	ldr	r3, [r5, #0]
 8003172:	b103      	cbz	r3, 8003176 <_close_r+0x1a>
 8003174:	6023      	str	r3, [r4, #0]
 8003176:	bd38      	pop	{r3, r4, r5, pc}
 8003178:	2000035c 	.word	0x2000035c

0800317c <_lseek_r>:
 800317c:	b538      	push	{r3, r4, r5, lr}
 800317e:	4604      	mov	r4, r0
 8003180:	4608      	mov	r0, r1
 8003182:	4611      	mov	r1, r2
 8003184:	2200      	movs	r2, #0
 8003186:	4d05      	ldr	r5, [pc, #20]	@ (800319c <_lseek_r+0x20>)
 8003188:	602a      	str	r2, [r5, #0]
 800318a:	461a      	mov	r2, r3
 800318c:	f7fd fadd 	bl	800074a <_lseek>
 8003190:	1c43      	adds	r3, r0, #1
 8003192:	d102      	bne.n	800319a <_lseek_r+0x1e>
 8003194:	682b      	ldr	r3, [r5, #0]
 8003196:	b103      	cbz	r3, 800319a <_lseek_r+0x1e>
 8003198:	6023      	str	r3, [r4, #0]
 800319a:	bd38      	pop	{r3, r4, r5, pc}
 800319c:	2000035c 	.word	0x2000035c

080031a0 <_read_r>:
 80031a0:	b538      	push	{r3, r4, r5, lr}
 80031a2:	4604      	mov	r4, r0
 80031a4:	4608      	mov	r0, r1
 80031a6:	4611      	mov	r1, r2
 80031a8:	2200      	movs	r2, #0
 80031aa:	4d05      	ldr	r5, [pc, #20]	@ (80031c0 <_read_r+0x20>)
 80031ac:	602a      	str	r2, [r5, #0]
 80031ae:	461a      	mov	r2, r3
 80031b0:	f7fd fa6e 	bl	8000690 <_read>
 80031b4:	1c43      	adds	r3, r0, #1
 80031b6:	d102      	bne.n	80031be <_read_r+0x1e>
 80031b8:	682b      	ldr	r3, [r5, #0]
 80031ba:	b103      	cbz	r3, 80031be <_read_r+0x1e>
 80031bc:	6023      	str	r3, [r4, #0]
 80031be:	bd38      	pop	{r3, r4, r5, pc}
 80031c0:	2000035c 	.word	0x2000035c

080031c4 <_write_r>:
 80031c4:	b538      	push	{r3, r4, r5, lr}
 80031c6:	4604      	mov	r4, r0
 80031c8:	4608      	mov	r0, r1
 80031ca:	4611      	mov	r1, r2
 80031cc:	2200      	movs	r2, #0
 80031ce:	4d05      	ldr	r5, [pc, #20]	@ (80031e4 <_write_r+0x20>)
 80031d0:	602a      	str	r2, [r5, #0]
 80031d2:	461a      	mov	r2, r3
 80031d4:	f7fd fa79 	bl	80006ca <_write>
 80031d8:	1c43      	adds	r3, r0, #1
 80031da:	d102      	bne.n	80031e2 <_write_r+0x1e>
 80031dc:	682b      	ldr	r3, [r5, #0]
 80031de:	b103      	cbz	r3, 80031e2 <_write_r+0x1e>
 80031e0:	6023      	str	r3, [r4, #0]
 80031e2:	bd38      	pop	{r3, r4, r5, pc}
 80031e4:	2000035c 	.word	0x2000035c

080031e8 <__errno>:
 80031e8:	4b01      	ldr	r3, [pc, #4]	@ (80031f0 <__errno+0x8>)
 80031ea:	6818      	ldr	r0, [r3, #0]
 80031ec:	4770      	bx	lr
 80031ee:	bf00      	nop
 80031f0:	20000018 	.word	0x20000018

080031f4 <__libc_init_array>:
 80031f4:	b570      	push	{r4, r5, r6, lr}
 80031f6:	2600      	movs	r6, #0
 80031f8:	4d0c      	ldr	r5, [pc, #48]	@ (800322c <__libc_init_array+0x38>)
 80031fa:	4c0d      	ldr	r4, [pc, #52]	@ (8003230 <__libc_init_array+0x3c>)
 80031fc:	1b64      	subs	r4, r4, r5
 80031fe:	10a4      	asrs	r4, r4, #2
 8003200:	42a6      	cmp	r6, r4
 8003202:	d109      	bne.n	8003218 <__libc_init_array+0x24>
 8003204:	f000 fd64 	bl	8003cd0 <_init>
 8003208:	2600      	movs	r6, #0
 800320a:	4d0a      	ldr	r5, [pc, #40]	@ (8003234 <__libc_init_array+0x40>)
 800320c:	4c0a      	ldr	r4, [pc, #40]	@ (8003238 <__libc_init_array+0x44>)
 800320e:	1b64      	subs	r4, r4, r5
 8003210:	10a4      	asrs	r4, r4, #2
 8003212:	42a6      	cmp	r6, r4
 8003214:	d105      	bne.n	8003222 <__libc_init_array+0x2e>
 8003216:	bd70      	pop	{r4, r5, r6, pc}
 8003218:	f855 3b04 	ldr.w	r3, [r5], #4
 800321c:	4798      	blx	r3
 800321e:	3601      	adds	r6, #1
 8003220:	e7ee      	b.n	8003200 <__libc_init_array+0xc>
 8003222:	f855 3b04 	ldr.w	r3, [r5], #4
 8003226:	4798      	blx	r3
 8003228:	3601      	adds	r6, #1
 800322a:	e7f2      	b.n	8003212 <__libc_init_array+0x1e>
 800322c:	08003dbc 	.word	0x08003dbc
 8003230:	08003dbc 	.word	0x08003dbc
 8003234:	08003dbc 	.word	0x08003dbc
 8003238:	08003dc0 	.word	0x08003dc0

0800323c <__retarget_lock_init_recursive>:
 800323c:	4770      	bx	lr

0800323e <__retarget_lock_acquire_recursive>:
 800323e:	4770      	bx	lr

08003240 <__retarget_lock_release_recursive>:
 8003240:	4770      	bx	lr
	...

08003244 <_free_r>:
 8003244:	b538      	push	{r3, r4, r5, lr}
 8003246:	4605      	mov	r5, r0
 8003248:	2900      	cmp	r1, #0
 800324a:	d040      	beq.n	80032ce <_free_r+0x8a>
 800324c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003250:	1f0c      	subs	r4, r1, #4
 8003252:	2b00      	cmp	r3, #0
 8003254:	bfb8      	it	lt
 8003256:	18e4      	addlt	r4, r4, r3
 8003258:	f000 f8de 	bl	8003418 <__malloc_lock>
 800325c:	4a1c      	ldr	r2, [pc, #112]	@ (80032d0 <_free_r+0x8c>)
 800325e:	6813      	ldr	r3, [r2, #0]
 8003260:	b933      	cbnz	r3, 8003270 <_free_r+0x2c>
 8003262:	6063      	str	r3, [r4, #4]
 8003264:	6014      	str	r4, [r2, #0]
 8003266:	4628      	mov	r0, r5
 8003268:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800326c:	f000 b8da 	b.w	8003424 <__malloc_unlock>
 8003270:	42a3      	cmp	r3, r4
 8003272:	d908      	bls.n	8003286 <_free_r+0x42>
 8003274:	6820      	ldr	r0, [r4, #0]
 8003276:	1821      	adds	r1, r4, r0
 8003278:	428b      	cmp	r3, r1
 800327a:	bf01      	itttt	eq
 800327c:	6819      	ldreq	r1, [r3, #0]
 800327e:	685b      	ldreq	r3, [r3, #4]
 8003280:	1809      	addeq	r1, r1, r0
 8003282:	6021      	streq	r1, [r4, #0]
 8003284:	e7ed      	b.n	8003262 <_free_r+0x1e>
 8003286:	461a      	mov	r2, r3
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	b10b      	cbz	r3, 8003290 <_free_r+0x4c>
 800328c:	42a3      	cmp	r3, r4
 800328e:	d9fa      	bls.n	8003286 <_free_r+0x42>
 8003290:	6811      	ldr	r1, [r2, #0]
 8003292:	1850      	adds	r0, r2, r1
 8003294:	42a0      	cmp	r0, r4
 8003296:	d10b      	bne.n	80032b0 <_free_r+0x6c>
 8003298:	6820      	ldr	r0, [r4, #0]
 800329a:	4401      	add	r1, r0
 800329c:	1850      	adds	r0, r2, r1
 800329e:	4283      	cmp	r3, r0
 80032a0:	6011      	str	r1, [r2, #0]
 80032a2:	d1e0      	bne.n	8003266 <_free_r+0x22>
 80032a4:	6818      	ldr	r0, [r3, #0]
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	4408      	add	r0, r1
 80032aa:	6010      	str	r0, [r2, #0]
 80032ac:	6053      	str	r3, [r2, #4]
 80032ae:	e7da      	b.n	8003266 <_free_r+0x22>
 80032b0:	d902      	bls.n	80032b8 <_free_r+0x74>
 80032b2:	230c      	movs	r3, #12
 80032b4:	602b      	str	r3, [r5, #0]
 80032b6:	e7d6      	b.n	8003266 <_free_r+0x22>
 80032b8:	6820      	ldr	r0, [r4, #0]
 80032ba:	1821      	adds	r1, r4, r0
 80032bc:	428b      	cmp	r3, r1
 80032be:	bf01      	itttt	eq
 80032c0:	6819      	ldreq	r1, [r3, #0]
 80032c2:	685b      	ldreq	r3, [r3, #4]
 80032c4:	1809      	addeq	r1, r1, r0
 80032c6:	6021      	streq	r1, [r4, #0]
 80032c8:	6063      	str	r3, [r4, #4]
 80032ca:	6054      	str	r4, [r2, #4]
 80032cc:	e7cb      	b.n	8003266 <_free_r+0x22>
 80032ce:	bd38      	pop	{r3, r4, r5, pc}
 80032d0:	20000368 	.word	0x20000368

080032d4 <sbrk_aligned>:
 80032d4:	b570      	push	{r4, r5, r6, lr}
 80032d6:	4e0f      	ldr	r6, [pc, #60]	@ (8003314 <sbrk_aligned+0x40>)
 80032d8:	460c      	mov	r4, r1
 80032da:	6831      	ldr	r1, [r6, #0]
 80032dc:	4605      	mov	r5, r0
 80032de:	b911      	cbnz	r1, 80032e6 <sbrk_aligned+0x12>
 80032e0:	f000 fcd8 	bl	8003c94 <_sbrk_r>
 80032e4:	6030      	str	r0, [r6, #0]
 80032e6:	4621      	mov	r1, r4
 80032e8:	4628      	mov	r0, r5
 80032ea:	f000 fcd3 	bl	8003c94 <_sbrk_r>
 80032ee:	1c43      	adds	r3, r0, #1
 80032f0:	d103      	bne.n	80032fa <sbrk_aligned+0x26>
 80032f2:	f04f 34ff 	mov.w	r4, #4294967295
 80032f6:	4620      	mov	r0, r4
 80032f8:	bd70      	pop	{r4, r5, r6, pc}
 80032fa:	1cc4      	adds	r4, r0, #3
 80032fc:	f024 0403 	bic.w	r4, r4, #3
 8003300:	42a0      	cmp	r0, r4
 8003302:	d0f8      	beq.n	80032f6 <sbrk_aligned+0x22>
 8003304:	1a21      	subs	r1, r4, r0
 8003306:	4628      	mov	r0, r5
 8003308:	f000 fcc4 	bl	8003c94 <_sbrk_r>
 800330c:	3001      	adds	r0, #1
 800330e:	d1f2      	bne.n	80032f6 <sbrk_aligned+0x22>
 8003310:	e7ef      	b.n	80032f2 <sbrk_aligned+0x1e>
 8003312:	bf00      	nop
 8003314:	20000364 	.word	0x20000364

08003318 <_malloc_r>:
 8003318:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800331c:	1ccd      	adds	r5, r1, #3
 800331e:	f025 0503 	bic.w	r5, r5, #3
 8003322:	3508      	adds	r5, #8
 8003324:	2d0c      	cmp	r5, #12
 8003326:	bf38      	it	cc
 8003328:	250c      	movcc	r5, #12
 800332a:	2d00      	cmp	r5, #0
 800332c:	4606      	mov	r6, r0
 800332e:	db01      	blt.n	8003334 <_malloc_r+0x1c>
 8003330:	42a9      	cmp	r1, r5
 8003332:	d904      	bls.n	800333e <_malloc_r+0x26>
 8003334:	230c      	movs	r3, #12
 8003336:	6033      	str	r3, [r6, #0]
 8003338:	2000      	movs	r0, #0
 800333a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800333e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003414 <_malloc_r+0xfc>
 8003342:	f000 f869 	bl	8003418 <__malloc_lock>
 8003346:	f8d8 3000 	ldr.w	r3, [r8]
 800334a:	461c      	mov	r4, r3
 800334c:	bb44      	cbnz	r4, 80033a0 <_malloc_r+0x88>
 800334e:	4629      	mov	r1, r5
 8003350:	4630      	mov	r0, r6
 8003352:	f7ff ffbf 	bl	80032d4 <sbrk_aligned>
 8003356:	1c43      	adds	r3, r0, #1
 8003358:	4604      	mov	r4, r0
 800335a:	d158      	bne.n	800340e <_malloc_r+0xf6>
 800335c:	f8d8 4000 	ldr.w	r4, [r8]
 8003360:	4627      	mov	r7, r4
 8003362:	2f00      	cmp	r7, #0
 8003364:	d143      	bne.n	80033ee <_malloc_r+0xd6>
 8003366:	2c00      	cmp	r4, #0
 8003368:	d04b      	beq.n	8003402 <_malloc_r+0xea>
 800336a:	6823      	ldr	r3, [r4, #0]
 800336c:	4639      	mov	r1, r7
 800336e:	4630      	mov	r0, r6
 8003370:	eb04 0903 	add.w	r9, r4, r3
 8003374:	f000 fc8e 	bl	8003c94 <_sbrk_r>
 8003378:	4581      	cmp	r9, r0
 800337a:	d142      	bne.n	8003402 <_malloc_r+0xea>
 800337c:	6821      	ldr	r1, [r4, #0]
 800337e:	4630      	mov	r0, r6
 8003380:	1a6d      	subs	r5, r5, r1
 8003382:	4629      	mov	r1, r5
 8003384:	f7ff ffa6 	bl	80032d4 <sbrk_aligned>
 8003388:	3001      	adds	r0, #1
 800338a:	d03a      	beq.n	8003402 <_malloc_r+0xea>
 800338c:	6823      	ldr	r3, [r4, #0]
 800338e:	442b      	add	r3, r5
 8003390:	6023      	str	r3, [r4, #0]
 8003392:	f8d8 3000 	ldr.w	r3, [r8]
 8003396:	685a      	ldr	r2, [r3, #4]
 8003398:	bb62      	cbnz	r2, 80033f4 <_malloc_r+0xdc>
 800339a:	f8c8 7000 	str.w	r7, [r8]
 800339e:	e00f      	b.n	80033c0 <_malloc_r+0xa8>
 80033a0:	6822      	ldr	r2, [r4, #0]
 80033a2:	1b52      	subs	r2, r2, r5
 80033a4:	d420      	bmi.n	80033e8 <_malloc_r+0xd0>
 80033a6:	2a0b      	cmp	r2, #11
 80033a8:	d917      	bls.n	80033da <_malloc_r+0xc2>
 80033aa:	1961      	adds	r1, r4, r5
 80033ac:	42a3      	cmp	r3, r4
 80033ae:	6025      	str	r5, [r4, #0]
 80033b0:	bf18      	it	ne
 80033b2:	6059      	strne	r1, [r3, #4]
 80033b4:	6863      	ldr	r3, [r4, #4]
 80033b6:	bf08      	it	eq
 80033b8:	f8c8 1000 	streq.w	r1, [r8]
 80033bc:	5162      	str	r2, [r4, r5]
 80033be:	604b      	str	r3, [r1, #4]
 80033c0:	4630      	mov	r0, r6
 80033c2:	f000 f82f 	bl	8003424 <__malloc_unlock>
 80033c6:	f104 000b 	add.w	r0, r4, #11
 80033ca:	1d23      	adds	r3, r4, #4
 80033cc:	f020 0007 	bic.w	r0, r0, #7
 80033d0:	1ac2      	subs	r2, r0, r3
 80033d2:	bf1c      	itt	ne
 80033d4:	1a1b      	subne	r3, r3, r0
 80033d6:	50a3      	strne	r3, [r4, r2]
 80033d8:	e7af      	b.n	800333a <_malloc_r+0x22>
 80033da:	6862      	ldr	r2, [r4, #4]
 80033dc:	42a3      	cmp	r3, r4
 80033de:	bf0c      	ite	eq
 80033e0:	f8c8 2000 	streq.w	r2, [r8]
 80033e4:	605a      	strne	r2, [r3, #4]
 80033e6:	e7eb      	b.n	80033c0 <_malloc_r+0xa8>
 80033e8:	4623      	mov	r3, r4
 80033ea:	6864      	ldr	r4, [r4, #4]
 80033ec:	e7ae      	b.n	800334c <_malloc_r+0x34>
 80033ee:	463c      	mov	r4, r7
 80033f0:	687f      	ldr	r7, [r7, #4]
 80033f2:	e7b6      	b.n	8003362 <_malloc_r+0x4a>
 80033f4:	461a      	mov	r2, r3
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	42a3      	cmp	r3, r4
 80033fa:	d1fb      	bne.n	80033f4 <_malloc_r+0xdc>
 80033fc:	2300      	movs	r3, #0
 80033fe:	6053      	str	r3, [r2, #4]
 8003400:	e7de      	b.n	80033c0 <_malloc_r+0xa8>
 8003402:	230c      	movs	r3, #12
 8003404:	4630      	mov	r0, r6
 8003406:	6033      	str	r3, [r6, #0]
 8003408:	f000 f80c 	bl	8003424 <__malloc_unlock>
 800340c:	e794      	b.n	8003338 <_malloc_r+0x20>
 800340e:	6005      	str	r5, [r0, #0]
 8003410:	e7d6      	b.n	80033c0 <_malloc_r+0xa8>
 8003412:	bf00      	nop
 8003414:	20000368 	.word	0x20000368

08003418 <__malloc_lock>:
 8003418:	4801      	ldr	r0, [pc, #4]	@ (8003420 <__malloc_lock+0x8>)
 800341a:	f7ff bf10 	b.w	800323e <__retarget_lock_acquire_recursive>
 800341e:	bf00      	nop
 8003420:	20000360 	.word	0x20000360

08003424 <__malloc_unlock>:
 8003424:	4801      	ldr	r0, [pc, #4]	@ (800342c <__malloc_unlock+0x8>)
 8003426:	f7ff bf0b 	b.w	8003240 <__retarget_lock_release_recursive>
 800342a:	bf00      	nop
 800342c:	20000360 	.word	0x20000360

08003430 <__sfputc_r>:
 8003430:	6893      	ldr	r3, [r2, #8]
 8003432:	b410      	push	{r4}
 8003434:	3b01      	subs	r3, #1
 8003436:	2b00      	cmp	r3, #0
 8003438:	6093      	str	r3, [r2, #8]
 800343a:	da07      	bge.n	800344c <__sfputc_r+0x1c>
 800343c:	6994      	ldr	r4, [r2, #24]
 800343e:	42a3      	cmp	r3, r4
 8003440:	db01      	blt.n	8003446 <__sfputc_r+0x16>
 8003442:	290a      	cmp	r1, #10
 8003444:	d102      	bne.n	800344c <__sfputc_r+0x1c>
 8003446:	bc10      	pop	{r4}
 8003448:	f7ff bdeb 	b.w	8003022 <__swbuf_r>
 800344c:	6813      	ldr	r3, [r2, #0]
 800344e:	1c58      	adds	r0, r3, #1
 8003450:	6010      	str	r0, [r2, #0]
 8003452:	7019      	strb	r1, [r3, #0]
 8003454:	4608      	mov	r0, r1
 8003456:	bc10      	pop	{r4}
 8003458:	4770      	bx	lr

0800345a <__sfputs_r>:
 800345a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800345c:	4606      	mov	r6, r0
 800345e:	460f      	mov	r7, r1
 8003460:	4614      	mov	r4, r2
 8003462:	18d5      	adds	r5, r2, r3
 8003464:	42ac      	cmp	r4, r5
 8003466:	d101      	bne.n	800346c <__sfputs_r+0x12>
 8003468:	2000      	movs	r0, #0
 800346a:	e007      	b.n	800347c <__sfputs_r+0x22>
 800346c:	463a      	mov	r2, r7
 800346e:	4630      	mov	r0, r6
 8003470:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003474:	f7ff ffdc 	bl	8003430 <__sfputc_r>
 8003478:	1c43      	adds	r3, r0, #1
 800347a:	d1f3      	bne.n	8003464 <__sfputs_r+0xa>
 800347c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003480 <_vfiprintf_r>:
 8003480:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003484:	460d      	mov	r5, r1
 8003486:	4614      	mov	r4, r2
 8003488:	4698      	mov	r8, r3
 800348a:	4606      	mov	r6, r0
 800348c:	b09d      	sub	sp, #116	@ 0x74
 800348e:	b118      	cbz	r0, 8003498 <_vfiprintf_r+0x18>
 8003490:	6a03      	ldr	r3, [r0, #32]
 8003492:	b90b      	cbnz	r3, 8003498 <_vfiprintf_r+0x18>
 8003494:	f7ff fcd4 	bl	8002e40 <__sinit>
 8003498:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800349a:	07d9      	lsls	r1, r3, #31
 800349c:	d405      	bmi.n	80034aa <_vfiprintf_r+0x2a>
 800349e:	89ab      	ldrh	r3, [r5, #12]
 80034a0:	059a      	lsls	r2, r3, #22
 80034a2:	d402      	bmi.n	80034aa <_vfiprintf_r+0x2a>
 80034a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80034a6:	f7ff feca 	bl	800323e <__retarget_lock_acquire_recursive>
 80034aa:	89ab      	ldrh	r3, [r5, #12]
 80034ac:	071b      	lsls	r3, r3, #28
 80034ae:	d501      	bpl.n	80034b4 <_vfiprintf_r+0x34>
 80034b0:	692b      	ldr	r3, [r5, #16]
 80034b2:	b99b      	cbnz	r3, 80034dc <_vfiprintf_r+0x5c>
 80034b4:	4629      	mov	r1, r5
 80034b6:	4630      	mov	r0, r6
 80034b8:	f7ff fdf2 	bl	80030a0 <__swsetup_r>
 80034bc:	b170      	cbz	r0, 80034dc <_vfiprintf_r+0x5c>
 80034be:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80034c0:	07dc      	lsls	r4, r3, #31
 80034c2:	d504      	bpl.n	80034ce <_vfiprintf_r+0x4e>
 80034c4:	f04f 30ff 	mov.w	r0, #4294967295
 80034c8:	b01d      	add	sp, #116	@ 0x74
 80034ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80034ce:	89ab      	ldrh	r3, [r5, #12]
 80034d0:	0598      	lsls	r0, r3, #22
 80034d2:	d4f7      	bmi.n	80034c4 <_vfiprintf_r+0x44>
 80034d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80034d6:	f7ff feb3 	bl	8003240 <__retarget_lock_release_recursive>
 80034da:	e7f3      	b.n	80034c4 <_vfiprintf_r+0x44>
 80034dc:	2300      	movs	r3, #0
 80034de:	9309      	str	r3, [sp, #36]	@ 0x24
 80034e0:	2320      	movs	r3, #32
 80034e2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80034e6:	2330      	movs	r3, #48	@ 0x30
 80034e8:	f04f 0901 	mov.w	r9, #1
 80034ec:	f8cd 800c 	str.w	r8, [sp, #12]
 80034f0:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800369c <_vfiprintf_r+0x21c>
 80034f4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80034f8:	4623      	mov	r3, r4
 80034fa:	469a      	mov	sl, r3
 80034fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003500:	b10a      	cbz	r2, 8003506 <_vfiprintf_r+0x86>
 8003502:	2a25      	cmp	r2, #37	@ 0x25
 8003504:	d1f9      	bne.n	80034fa <_vfiprintf_r+0x7a>
 8003506:	ebba 0b04 	subs.w	fp, sl, r4
 800350a:	d00b      	beq.n	8003524 <_vfiprintf_r+0xa4>
 800350c:	465b      	mov	r3, fp
 800350e:	4622      	mov	r2, r4
 8003510:	4629      	mov	r1, r5
 8003512:	4630      	mov	r0, r6
 8003514:	f7ff ffa1 	bl	800345a <__sfputs_r>
 8003518:	3001      	adds	r0, #1
 800351a:	f000 80a7 	beq.w	800366c <_vfiprintf_r+0x1ec>
 800351e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003520:	445a      	add	r2, fp
 8003522:	9209      	str	r2, [sp, #36]	@ 0x24
 8003524:	f89a 3000 	ldrb.w	r3, [sl]
 8003528:	2b00      	cmp	r3, #0
 800352a:	f000 809f 	beq.w	800366c <_vfiprintf_r+0x1ec>
 800352e:	2300      	movs	r3, #0
 8003530:	f04f 32ff 	mov.w	r2, #4294967295
 8003534:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003538:	f10a 0a01 	add.w	sl, sl, #1
 800353c:	9304      	str	r3, [sp, #16]
 800353e:	9307      	str	r3, [sp, #28]
 8003540:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003544:	931a      	str	r3, [sp, #104]	@ 0x68
 8003546:	4654      	mov	r4, sl
 8003548:	2205      	movs	r2, #5
 800354a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800354e:	4853      	ldr	r0, [pc, #332]	@ (800369c <_vfiprintf_r+0x21c>)
 8003550:	f000 fbb0 	bl	8003cb4 <memchr>
 8003554:	9a04      	ldr	r2, [sp, #16]
 8003556:	b9d8      	cbnz	r0, 8003590 <_vfiprintf_r+0x110>
 8003558:	06d1      	lsls	r1, r2, #27
 800355a:	bf44      	itt	mi
 800355c:	2320      	movmi	r3, #32
 800355e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003562:	0713      	lsls	r3, r2, #28
 8003564:	bf44      	itt	mi
 8003566:	232b      	movmi	r3, #43	@ 0x2b
 8003568:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800356c:	f89a 3000 	ldrb.w	r3, [sl]
 8003570:	2b2a      	cmp	r3, #42	@ 0x2a
 8003572:	d015      	beq.n	80035a0 <_vfiprintf_r+0x120>
 8003574:	4654      	mov	r4, sl
 8003576:	2000      	movs	r0, #0
 8003578:	f04f 0c0a 	mov.w	ip, #10
 800357c:	9a07      	ldr	r2, [sp, #28]
 800357e:	4621      	mov	r1, r4
 8003580:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003584:	3b30      	subs	r3, #48	@ 0x30
 8003586:	2b09      	cmp	r3, #9
 8003588:	d94b      	bls.n	8003622 <_vfiprintf_r+0x1a2>
 800358a:	b1b0      	cbz	r0, 80035ba <_vfiprintf_r+0x13a>
 800358c:	9207      	str	r2, [sp, #28]
 800358e:	e014      	b.n	80035ba <_vfiprintf_r+0x13a>
 8003590:	eba0 0308 	sub.w	r3, r0, r8
 8003594:	fa09 f303 	lsl.w	r3, r9, r3
 8003598:	4313      	orrs	r3, r2
 800359a:	46a2      	mov	sl, r4
 800359c:	9304      	str	r3, [sp, #16]
 800359e:	e7d2      	b.n	8003546 <_vfiprintf_r+0xc6>
 80035a0:	9b03      	ldr	r3, [sp, #12]
 80035a2:	1d19      	adds	r1, r3, #4
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	9103      	str	r1, [sp, #12]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	bfbb      	ittet	lt
 80035ac:	425b      	neglt	r3, r3
 80035ae:	f042 0202 	orrlt.w	r2, r2, #2
 80035b2:	9307      	strge	r3, [sp, #28]
 80035b4:	9307      	strlt	r3, [sp, #28]
 80035b6:	bfb8      	it	lt
 80035b8:	9204      	strlt	r2, [sp, #16]
 80035ba:	7823      	ldrb	r3, [r4, #0]
 80035bc:	2b2e      	cmp	r3, #46	@ 0x2e
 80035be:	d10a      	bne.n	80035d6 <_vfiprintf_r+0x156>
 80035c0:	7863      	ldrb	r3, [r4, #1]
 80035c2:	2b2a      	cmp	r3, #42	@ 0x2a
 80035c4:	d132      	bne.n	800362c <_vfiprintf_r+0x1ac>
 80035c6:	9b03      	ldr	r3, [sp, #12]
 80035c8:	3402      	adds	r4, #2
 80035ca:	1d1a      	adds	r2, r3, #4
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	9203      	str	r2, [sp, #12]
 80035d0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80035d4:	9305      	str	r3, [sp, #20]
 80035d6:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 80036a0 <_vfiprintf_r+0x220>
 80035da:	2203      	movs	r2, #3
 80035dc:	4650      	mov	r0, sl
 80035de:	7821      	ldrb	r1, [r4, #0]
 80035e0:	f000 fb68 	bl	8003cb4 <memchr>
 80035e4:	b138      	cbz	r0, 80035f6 <_vfiprintf_r+0x176>
 80035e6:	2240      	movs	r2, #64	@ 0x40
 80035e8:	9b04      	ldr	r3, [sp, #16]
 80035ea:	eba0 000a 	sub.w	r0, r0, sl
 80035ee:	4082      	lsls	r2, r0
 80035f0:	4313      	orrs	r3, r2
 80035f2:	3401      	adds	r4, #1
 80035f4:	9304      	str	r3, [sp, #16]
 80035f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80035fa:	2206      	movs	r2, #6
 80035fc:	4829      	ldr	r0, [pc, #164]	@ (80036a4 <_vfiprintf_r+0x224>)
 80035fe:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003602:	f000 fb57 	bl	8003cb4 <memchr>
 8003606:	2800      	cmp	r0, #0
 8003608:	d03f      	beq.n	800368a <_vfiprintf_r+0x20a>
 800360a:	4b27      	ldr	r3, [pc, #156]	@ (80036a8 <_vfiprintf_r+0x228>)
 800360c:	bb1b      	cbnz	r3, 8003656 <_vfiprintf_r+0x1d6>
 800360e:	9b03      	ldr	r3, [sp, #12]
 8003610:	3307      	adds	r3, #7
 8003612:	f023 0307 	bic.w	r3, r3, #7
 8003616:	3308      	adds	r3, #8
 8003618:	9303      	str	r3, [sp, #12]
 800361a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800361c:	443b      	add	r3, r7
 800361e:	9309      	str	r3, [sp, #36]	@ 0x24
 8003620:	e76a      	b.n	80034f8 <_vfiprintf_r+0x78>
 8003622:	460c      	mov	r4, r1
 8003624:	2001      	movs	r0, #1
 8003626:	fb0c 3202 	mla	r2, ip, r2, r3
 800362a:	e7a8      	b.n	800357e <_vfiprintf_r+0xfe>
 800362c:	2300      	movs	r3, #0
 800362e:	f04f 0c0a 	mov.w	ip, #10
 8003632:	4619      	mov	r1, r3
 8003634:	3401      	adds	r4, #1
 8003636:	9305      	str	r3, [sp, #20]
 8003638:	4620      	mov	r0, r4
 800363a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800363e:	3a30      	subs	r2, #48	@ 0x30
 8003640:	2a09      	cmp	r2, #9
 8003642:	d903      	bls.n	800364c <_vfiprintf_r+0x1cc>
 8003644:	2b00      	cmp	r3, #0
 8003646:	d0c6      	beq.n	80035d6 <_vfiprintf_r+0x156>
 8003648:	9105      	str	r1, [sp, #20]
 800364a:	e7c4      	b.n	80035d6 <_vfiprintf_r+0x156>
 800364c:	4604      	mov	r4, r0
 800364e:	2301      	movs	r3, #1
 8003650:	fb0c 2101 	mla	r1, ip, r1, r2
 8003654:	e7f0      	b.n	8003638 <_vfiprintf_r+0x1b8>
 8003656:	ab03      	add	r3, sp, #12
 8003658:	9300      	str	r3, [sp, #0]
 800365a:	462a      	mov	r2, r5
 800365c:	4630      	mov	r0, r6
 800365e:	4b13      	ldr	r3, [pc, #76]	@ (80036ac <_vfiprintf_r+0x22c>)
 8003660:	a904      	add	r1, sp, #16
 8003662:	f3af 8000 	nop.w
 8003666:	4607      	mov	r7, r0
 8003668:	1c78      	adds	r0, r7, #1
 800366a:	d1d6      	bne.n	800361a <_vfiprintf_r+0x19a>
 800366c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800366e:	07d9      	lsls	r1, r3, #31
 8003670:	d405      	bmi.n	800367e <_vfiprintf_r+0x1fe>
 8003672:	89ab      	ldrh	r3, [r5, #12]
 8003674:	059a      	lsls	r2, r3, #22
 8003676:	d402      	bmi.n	800367e <_vfiprintf_r+0x1fe>
 8003678:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800367a:	f7ff fde1 	bl	8003240 <__retarget_lock_release_recursive>
 800367e:	89ab      	ldrh	r3, [r5, #12]
 8003680:	065b      	lsls	r3, r3, #25
 8003682:	f53f af1f 	bmi.w	80034c4 <_vfiprintf_r+0x44>
 8003686:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003688:	e71e      	b.n	80034c8 <_vfiprintf_r+0x48>
 800368a:	ab03      	add	r3, sp, #12
 800368c:	9300      	str	r3, [sp, #0]
 800368e:	462a      	mov	r2, r5
 8003690:	4630      	mov	r0, r6
 8003692:	4b06      	ldr	r3, [pc, #24]	@ (80036ac <_vfiprintf_r+0x22c>)
 8003694:	a904      	add	r1, sp, #16
 8003696:	f000 f87d 	bl	8003794 <_printf_i>
 800369a:	e7e4      	b.n	8003666 <_vfiprintf_r+0x1e6>
 800369c:	08003d86 	.word	0x08003d86
 80036a0:	08003d8c 	.word	0x08003d8c
 80036a4:	08003d90 	.word	0x08003d90
 80036a8:	00000000 	.word	0x00000000
 80036ac:	0800345b 	.word	0x0800345b

080036b0 <_printf_common>:
 80036b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80036b4:	4616      	mov	r6, r2
 80036b6:	4698      	mov	r8, r3
 80036b8:	688a      	ldr	r2, [r1, #8]
 80036ba:	690b      	ldr	r3, [r1, #16]
 80036bc:	4607      	mov	r7, r0
 80036be:	4293      	cmp	r3, r2
 80036c0:	bfb8      	it	lt
 80036c2:	4613      	movlt	r3, r2
 80036c4:	6033      	str	r3, [r6, #0]
 80036c6:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80036ca:	460c      	mov	r4, r1
 80036cc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80036d0:	b10a      	cbz	r2, 80036d6 <_printf_common+0x26>
 80036d2:	3301      	adds	r3, #1
 80036d4:	6033      	str	r3, [r6, #0]
 80036d6:	6823      	ldr	r3, [r4, #0]
 80036d8:	0699      	lsls	r1, r3, #26
 80036da:	bf42      	ittt	mi
 80036dc:	6833      	ldrmi	r3, [r6, #0]
 80036de:	3302      	addmi	r3, #2
 80036e0:	6033      	strmi	r3, [r6, #0]
 80036e2:	6825      	ldr	r5, [r4, #0]
 80036e4:	f015 0506 	ands.w	r5, r5, #6
 80036e8:	d106      	bne.n	80036f8 <_printf_common+0x48>
 80036ea:	f104 0a19 	add.w	sl, r4, #25
 80036ee:	68e3      	ldr	r3, [r4, #12]
 80036f0:	6832      	ldr	r2, [r6, #0]
 80036f2:	1a9b      	subs	r3, r3, r2
 80036f4:	42ab      	cmp	r3, r5
 80036f6:	dc2b      	bgt.n	8003750 <_printf_common+0xa0>
 80036f8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80036fc:	6822      	ldr	r2, [r4, #0]
 80036fe:	3b00      	subs	r3, #0
 8003700:	bf18      	it	ne
 8003702:	2301      	movne	r3, #1
 8003704:	0692      	lsls	r2, r2, #26
 8003706:	d430      	bmi.n	800376a <_printf_common+0xba>
 8003708:	4641      	mov	r1, r8
 800370a:	4638      	mov	r0, r7
 800370c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003710:	47c8      	blx	r9
 8003712:	3001      	adds	r0, #1
 8003714:	d023      	beq.n	800375e <_printf_common+0xae>
 8003716:	6823      	ldr	r3, [r4, #0]
 8003718:	6922      	ldr	r2, [r4, #16]
 800371a:	f003 0306 	and.w	r3, r3, #6
 800371e:	2b04      	cmp	r3, #4
 8003720:	bf14      	ite	ne
 8003722:	2500      	movne	r5, #0
 8003724:	6833      	ldreq	r3, [r6, #0]
 8003726:	f04f 0600 	mov.w	r6, #0
 800372a:	bf08      	it	eq
 800372c:	68e5      	ldreq	r5, [r4, #12]
 800372e:	f104 041a 	add.w	r4, r4, #26
 8003732:	bf08      	it	eq
 8003734:	1aed      	subeq	r5, r5, r3
 8003736:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800373a:	bf08      	it	eq
 800373c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003740:	4293      	cmp	r3, r2
 8003742:	bfc4      	itt	gt
 8003744:	1a9b      	subgt	r3, r3, r2
 8003746:	18ed      	addgt	r5, r5, r3
 8003748:	42b5      	cmp	r5, r6
 800374a:	d11a      	bne.n	8003782 <_printf_common+0xd2>
 800374c:	2000      	movs	r0, #0
 800374e:	e008      	b.n	8003762 <_printf_common+0xb2>
 8003750:	2301      	movs	r3, #1
 8003752:	4652      	mov	r2, sl
 8003754:	4641      	mov	r1, r8
 8003756:	4638      	mov	r0, r7
 8003758:	47c8      	blx	r9
 800375a:	3001      	adds	r0, #1
 800375c:	d103      	bne.n	8003766 <_printf_common+0xb6>
 800375e:	f04f 30ff 	mov.w	r0, #4294967295
 8003762:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003766:	3501      	adds	r5, #1
 8003768:	e7c1      	b.n	80036ee <_printf_common+0x3e>
 800376a:	2030      	movs	r0, #48	@ 0x30
 800376c:	18e1      	adds	r1, r4, r3
 800376e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003772:	1c5a      	adds	r2, r3, #1
 8003774:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003778:	4422      	add	r2, r4
 800377a:	3302      	adds	r3, #2
 800377c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003780:	e7c2      	b.n	8003708 <_printf_common+0x58>
 8003782:	2301      	movs	r3, #1
 8003784:	4622      	mov	r2, r4
 8003786:	4641      	mov	r1, r8
 8003788:	4638      	mov	r0, r7
 800378a:	47c8      	blx	r9
 800378c:	3001      	adds	r0, #1
 800378e:	d0e6      	beq.n	800375e <_printf_common+0xae>
 8003790:	3601      	adds	r6, #1
 8003792:	e7d9      	b.n	8003748 <_printf_common+0x98>

08003794 <_printf_i>:
 8003794:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003798:	7e0f      	ldrb	r7, [r1, #24]
 800379a:	4691      	mov	r9, r2
 800379c:	2f78      	cmp	r7, #120	@ 0x78
 800379e:	4680      	mov	r8, r0
 80037a0:	460c      	mov	r4, r1
 80037a2:	469a      	mov	sl, r3
 80037a4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80037a6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80037aa:	d807      	bhi.n	80037bc <_printf_i+0x28>
 80037ac:	2f62      	cmp	r7, #98	@ 0x62
 80037ae:	d80a      	bhi.n	80037c6 <_printf_i+0x32>
 80037b0:	2f00      	cmp	r7, #0
 80037b2:	f000 80d3 	beq.w	800395c <_printf_i+0x1c8>
 80037b6:	2f58      	cmp	r7, #88	@ 0x58
 80037b8:	f000 80ba 	beq.w	8003930 <_printf_i+0x19c>
 80037bc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80037c0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80037c4:	e03a      	b.n	800383c <_printf_i+0xa8>
 80037c6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80037ca:	2b15      	cmp	r3, #21
 80037cc:	d8f6      	bhi.n	80037bc <_printf_i+0x28>
 80037ce:	a101      	add	r1, pc, #4	@ (adr r1, 80037d4 <_printf_i+0x40>)
 80037d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80037d4:	0800382d 	.word	0x0800382d
 80037d8:	08003841 	.word	0x08003841
 80037dc:	080037bd 	.word	0x080037bd
 80037e0:	080037bd 	.word	0x080037bd
 80037e4:	080037bd 	.word	0x080037bd
 80037e8:	080037bd 	.word	0x080037bd
 80037ec:	08003841 	.word	0x08003841
 80037f0:	080037bd 	.word	0x080037bd
 80037f4:	080037bd 	.word	0x080037bd
 80037f8:	080037bd 	.word	0x080037bd
 80037fc:	080037bd 	.word	0x080037bd
 8003800:	08003943 	.word	0x08003943
 8003804:	0800386b 	.word	0x0800386b
 8003808:	080038fd 	.word	0x080038fd
 800380c:	080037bd 	.word	0x080037bd
 8003810:	080037bd 	.word	0x080037bd
 8003814:	08003965 	.word	0x08003965
 8003818:	080037bd 	.word	0x080037bd
 800381c:	0800386b 	.word	0x0800386b
 8003820:	080037bd 	.word	0x080037bd
 8003824:	080037bd 	.word	0x080037bd
 8003828:	08003905 	.word	0x08003905
 800382c:	6833      	ldr	r3, [r6, #0]
 800382e:	1d1a      	adds	r2, r3, #4
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	6032      	str	r2, [r6, #0]
 8003834:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003838:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800383c:	2301      	movs	r3, #1
 800383e:	e09e      	b.n	800397e <_printf_i+0x1ea>
 8003840:	6833      	ldr	r3, [r6, #0]
 8003842:	6820      	ldr	r0, [r4, #0]
 8003844:	1d19      	adds	r1, r3, #4
 8003846:	6031      	str	r1, [r6, #0]
 8003848:	0606      	lsls	r6, r0, #24
 800384a:	d501      	bpl.n	8003850 <_printf_i+0xbc>
 800384c:	681d      	ldr	r5, [r3, #0]
 800384e:	e003      	b.n	8003858 <_printf_i+0xc4>
 8003850:	0645      	lsls	r5, r0, #25
 8003852:	d5fb      	bpl.n	800384c <_printf_i+0xb8>
 8003854:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003858:	2d00      	cmp	r5, #0
 800385a:	da03      	bge.n	8003864 <_printf_i+0xd0>
 800385c:	232d      	movs	r3, #45	@ 0x2d
 800385e:	426d      	negs	r5, r5
 8003860:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003864:	230a      	movs	r3, #10
 8003866:	4859      	ldr	r0, [pc, #356]	@ (80039cc <_printf_i+0x238>)
 8003868:	e011      	b.n	800388e <_printf_i+0xfa>
 800386a:	6821      	ldr	r1, [r4, #0]
 800386c:	6833      	ldr	r3, [r6, #0]
 800386e:	0608      	lsls	r0, r1, #24
 8003870:	f853 5b04 	ldr.w	r5, [r3], #4
 8003874:	d402      	bmi.n	800387c <_printf_i+0xe8>
 8003876:	0649      	lsls	r1, r1, #25
 8003878:	bf48      	it	mi
 800387a:	b2ad      	uxthmi	r5, r5
 800387c:	2f6f      	cmp	r7, #111	@ 0x6f
 800387e:	6033      	str	r3, [r6, #0]
 8003880:	bf14      	ite	ne
 8003882:	230a      	movne	r3, #10
 8003884:	2308      	moveq	r3, #8
 8003886:	4851      	ldr	r0, [pc, #324]	@ (80039cc <_printf_i+0x238>)
 8003888:	2100      	movs	r1, #0
 800388a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800388e:	6866      	ldr	r6, [r4, #4]
 8003890:	2e00      	cmp	r6, #0
 8003892:	bfa8      	it	ge
 8003894:	6821      	ldrge	r1, [r4, #0]
 8003896:	60a6      	str	r6, [r4, #8]
 8003898:	bfa4      	itt	ge
 800389a:	f021 0104 	bicge.w	r1, r1, #4
 800389e:	6021      	strge	r1, [r4, #0]
 80038a0:	b90d      	cbnz	r5, 80038a6 <_printf_i+0x112>
 80038a2:	2e00      	cmp	r6, #0
 80038a4:	d04b      	beq.n	800393e <_printf_i+0x1aa>
 80038a6:	4616      	mov	r6, r2
 80038a8:	fbb5 f1f3 	udiv	r1, r5, r3
 80038ac:	fb03 5711 	mls	r7, r3, r1, r5
 80038b0:	5dc7      	ldrb	r7, [r0, r7]
 80038b2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80038b6:	462f      	mov	r7, r5
 80038b8:	42bb      	cmp	r3, r7
 80038ba:	460d      	mov	r5, r1
 80038bc:	d9f4      	bls.n	80038a8 <_printf_i+0x114>
 80038be:	2b08      	cmp	r3, #8
 80038c0:	d10b      	bne.n	80038da <_printf_i+0x146>
 80038c2:	6823      	ldr	r3, [r4, #0]
 80038c4:	07df      	lsls	r7, r3, #31
 80038c6:	d508      	bpl.n	80038da <_printf_i+0x146>
 80038c8:	6923      	ldr	r3, [r4, #16]
 80038ca:	6861      	ldr	r1, [r4, #4]
 80038cc:	4299      	cmp	r1, r3
 80038ce:	bfde      	ittt	le
 80038d0:	2330      	movle	r3, #48	@ 0x30
 80038d2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80038d6:	f106 36ff 	addle.w	r6, r6, #4294967295
 80038da:	1b92      	subs	r2, r2, r6
 80038dc:	6122      	str	r2, [r4, #16]
 80038de:	464b      	mov	r3, r9
 80038e0:	4621      	mov	r1, r4
 80038e2:	4640      	mov	r0, r8
 80038e4:	f8cd a000 	str.w	sl, [sp]
 80038e8:	aa03      	add	r2, sp, #12
 80038ea:	f7ff fee1 	bl	80036b0 <_printf_common>
 80038ee:	3001      	adds	r0, #1
 80038f0:	d14a      	bne.n	8003988 <_printf_i+0x1f4>
 80038f2:	f04f 30ff 	mov.w	r0, #4294967295
 80038f6:	b004      	add	sp, #16
 80038f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80038fc:	6823      	ldr	r3, [r4, #0]
 80038fe:	f043 0320 	orr.w	r3, r3, #32
 8003902:	6023      	str	r3, [r4, #0]
 8003904:	2778      	movs	r7, #120	@ 0x78
 8003906:	4832      	ldr	r0, [pc, #200]	@ (80039d0 <_printf_i+0x23c>)
 8003908:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800390c:	6823      	ldr	r3, [r4, #0]
 800390e:	6831      	ldr	r1, [r6, #0]
 8003910:	061f      	lsls	r7, r3, #24
 8003912:	f851 5b04 	ldr.w	r5, [r1], #4
 8003916:	d402      	bmi.n	800391e <_printf_i+0x18a>
 8003918:	065f      	lsls	r7, r3, #25
 800391a:	bf48      	it	mi
 800391c:	b2ad      	uxthmi	r5, r5
 800391e:	6031      	str	r1, [r6, #0]
 8003920:	07d9      	lsls	r1, r3, #31
 8003922:	bf44      	itt	mi
 8003924:	f043 0320 	orrmi.w	r3, r3, #32
 8003928:	6023      	strmi	r3, [r4, #0]
 800392a:	b11d      	cbz	r5, 8003934 <_printf_i+0x1a0>
 800392c:	2310      	movs	r3, #16
 800392e:	e7ab      	b.n	8003888 <_printf_i+0xf4>
 8003930:	4826      	ldr	r0, [pc, #152]	@ (80039cc <_printf_i+0x238>)
 8003932:	e7e9      	b.n	8003908 <_printf_i+0x174>
 8003934:	6823      	ldr	r3, [r4, #0]
 8003936:	f023 0320 	bic.w	r3, r3, #32
 800393a:	6023      	str	r3, [r4, #0]
 800393c:	e7f6      	b.n	800392c <_printf_i+0x198>
 800393e:	4616      	mov	r6, r2
 8003940:	e7bd      	b.n	80038be <_printf_i+0x12a>
 8003942:	6833      	ldr	r3, [r6, #0]
 8003944:	6825      	ldr	r5, [r4, #0]
 8003946:	1d18      	adds	r0, r3, #4
 8003948:	6961      	ldr	r1, [r4, #20]
 800394a:	6030      	str	r0, [r6, #0]
 800394c:	062e      	lsls	r6, r5, #24
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	d501      	bpl.n	8003956 <_printf_i+0x1c2>
 8003952:	6019      	str	r1, [r3, #0]
 8003954:	e002      	b.n	800395c <_printf_i+0x1c8>
 8003956:	0668      	lsls	r0, r5, #25
 8003958:	d5fb      	bpl.n	8003952 <_printf_i+0x1be>
 800395a:	8019      	strh	r1, [r3, #0]
 800395c:	2300      	movs	r3, #0
 800395e:	4616      	mov	r6, r2
 8003960:	6123      	str	r3, [r4, #16]
 8003962:	e7bc      	b.n	80038de <_printf_i+0x14a>
 8003964:	6833      	ldr	r3, [r6, #0]
 8003966:	2100      	movs	r1, #0
 8003968:	1d1a      	adds	r2, r3, #4
 800396a:	6032      	str	r2, [r6, #0]
 800396c:	681e      	ldr	r6, [r3, #0]
 800396e:	6862      	ldr	r2, [r4, #4]
 8003970:	4630      	mov	r0, r6
 8003972:	f000 f99f 	bl	8003cb4 <memchr>
 8003976:	b108      	cbz	r0, 800397c <_printf_i+0x1e8>
 8003978:	1b80      	subs	r0, r0, r6
 800397a:	6060      	str	r0, [r4, #4]
 800397c:	6863      	ldr	r3, [r4, #4]
 800397e:	6123      	str	r3, [r4, #16]
 8003980:	2300      	movs	r3, #0
 8003982:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003986:	e7aa      	b.n	80038de <_printf_i+0x14a>
 8003988:	4632      	mov	r2, r6
 800398a:	4649      	mov	r1, r9
 800398c:	4640      	mov	r0, r8
 800398e:	6923      	ldr	r3, [r4, #16]
 8003990:	47d0      	blx	sl
 8003992:	3001      	adds	r0, #1
 8003994:	d0ad      	beq.n	80038f2 <_printf_i+0x15e>
 8003996:	6823      	ldr	r3, [r4, #0]
 8003998:	079b      	lsls	r3, r3, #30
 800399a:	d413      	bmi.n	80039c4 <_printf_i+0x230>
 800399c:	68e0      	ldr	r0, [r4, #12]
 800399e:	9b03      	ldr	r3, [sp, #12]
 80039a0:	4298      	cmp	r0, r3
 80039a2:	bfb8      	it	lt
 80039a4:	4618      	movlt	r0, r3
 80039a6:	e7a6      	b.n	80038f6 <_printf_i+0x162>
 80039a8:	2301      	movs	r3, #1
 80039aa:	4632      	mov	r2, r6
 80039ac:	4649      	mov	r1, r9
 80039ae:	4640      	mov	r0, r8
 80039b0:	47d0      	blx	sl
 80039b2:	3001      	adds	r0, #1
 80039b4:	d09d      	beq.n	80038f2 <_printf_i+0x15e>
 80039b6:	3501      	adds	r5, #1
 80039b8:	68e3      	ldr	r3, [r4, #12]
 80039ba:	9903      	ldr	r1, [sp, #12]
 80039bc:	1a5b      	subs	r3, r3, r1
 80039be:	42ab      	cmp	r3, r5
 80039c0:	dcf2      	bgt.n	80039a8 <_printf_i+0x214>
 80039c2:	e7eb      	b.n	800399c <_printf_i+0x208>
 80039c4:	2500      	movs	r5, #0
 80039c6:	f104 0619 	add.w	r6, r4, #25
 80039ca:	e7f5      	b.n	80039b8 <_printf_i+0x224>
 80039cc:	08003d97 	.word	0x08003d97
 80039d0:	08003da8 	.word	0x08003da8

080039d4 <__sflush_r>:
 80039d4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80039d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039da:	0716      	lsls	r6, r2, #28
 80039dc:	4605      	mov	r5, r0
 80039de:	460c      	mov	r4, r1
 80039e0:	d454      	bmi.n	8003a8c <__sflush_r+0xb8>
 80039e2:	684b      	ldr	r3, [r1, #4]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	dc02      	bgt.n	80039ee <__sflush_r+0x1a>
 80039e8:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	dd48      	ble.n	8003a80 <__sflush_r+0xac>
 80039ee:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80039f0:	2e00      	cmp	r6, #0
 80039f2:	d045      	beq.n	8003a80 <__sflush_r+0xac>
 80039f4:	2300      	movs	r3, #0
 80039f6:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80039fa:	682f      	ldr	r7, [r5, #0]
 80039fc:	6a21      	ldr	r1, [r4, #32]
 80039fe:	602b      	str	r3, [r5, #0]
 8003a00:	d030      	beq.n	8003a64 <__sflush_r+0x90>
 8003a02:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003a04:	89a3      	ldrh	r3, [r4, #12]
 8003a06:	0759      	lsls	r1, r3, #29
 8003a08:	d505      	bpl.n	8003a16 <__sflush_r+0x42>
 8003a0a:	6863      	ldr	r3, [r4, #4]
 8003a0c:	1ad2      	subs	r2, r2, r3
 8003a0e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003a10:	b10b      	cbz	r3, 8003a16 <__sflush_r+0x42>
 8003a12:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003a14:	1ad2      	subs	r2, r2, r3
 8003a16:	2300      	movs	r3, #0
 8003a18:	4628      	mov	r0, r5
 8003a1a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003a1c:	6a21      	ldr	r1, [r4, #32]
 8003a1e:	47b0      	blx	r6
 8003a20:	1c43      	adds	r3, r0, #1
 8003a22:	89a3      	ldrh	r3, [r4, #12]
 8003a24:	d106      	bne.n	8003a34 <__sflush_r+0x60>
 8003a26:	6829      	ldr	r1, [r5, #0]
 8003a28:	291d      	cmp	r1, #29
 8003a2a:	d82b      	bhi.n	8003a84 <__sflush_r+0xb0>
 8003a2c:	4a28      	ldr	r2, [pc, #160]	@ (8003ad0 <__sflush_r+0xfc>)
 8003a2e:	410a      	asrs	r2, r1
 8003a30:	07d6      	lsls	r6, r2, #31
 8003a32:	d427      	bmi.n	8003a84 <__sflush_r+0xb0>
 8003a34:	2200      	movs	r2, #0
 8003a36:	6062      	str	r2, [r4, #4]
 8003a38:	6922      	ldr	r2, [r4, #16]
 8003a3a:	04d9      	lsls	r1, r3, #19
 8003a3c:	6022      	str	r2, [r4, #0]
 8003a3e:	d504      	bpl.n	8003a4a <__sflush_r+0x76>
 8003a40:	1c42      	adds	r2, r0, #1
 8003a42:	d101      	bne.n	8003a48 <__sflush_r+0x74>
 8003a44:	682b      	ldr	r3, [r5, #0]
 8003a46:	b903      	cbnz	r3, 8003a4a <__sflush_r+0x76>
 8003a48:	6560      	str	r0, [r4, #84]	@ 0x54
 8003a4a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003a4c:	602f      	str	r7, [r5, #0]
 8003a4e:	b1b9      	cbz	r1, 8003a80 <__sflush_r+0xac>
 8003a50:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003a54:	4299      	cmp	r1, r3
 8003a56:	d002      	beq.n	8003a5e <__sflush_r+0x8a>
 8003a58:	4628      	mov	r0, r5
 8003a5a:	f7ff fbf3 	bl	8003244 <_free_r>
 8003a5e:	2300      	movs	r3, #0
 8003a60:	6363      	str	r3, [r4, #52]	@ 0x34
 8003a62:	e00d      	b.n	8003a80 <__sflush_r+0xac>
 8003a64:	2301      	movs	r3, #1
 8003a66:	4628      	mov	r0, r5
 8003a68:	47b0      	blx	r6
 8003a6a:	4602      	mov	r2, r0
 8003a6c:	1c50      	adds	r0, r2, #1
 8003a6e:	d1c9      	bne.n	8003a04 <__sflush_r+0x30>
 8003a70:	682b      	ldr	r3, [r5, #0]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d0c6      	beq.n	8003a04 <__sflush_r+0x30>
 8003a76:	2b1d      	cmp	r3, #29
 8003a78:	d001      	beq.n	8003a7e <__sflush_r+0xaa>
 8003a7a:	2b16      	cmp	r3, #22
 8003a7c:	d11d      	bne.n	8003aba <__sflush_r+0xe6>
 8003a7e:	602f      	str	r7, [r5, #0]
 8003a80:	2000      	movs	r0, #0
 8003a82:	e021      	b.n	8003ac8 <__sflush_r+0xf4>
 8003a84:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003a88:	b21b      	sxth	r3, r3
 8003a8a:	e01a      	b.n	8003ac2 <__sflush_r+0xee>
 8003a8c:	690f      	ldr	r7, [r1, #16]
 8003a8e:	2f00      	cmp	r7, #0
 8003a90:	d0f6      	beq.n	8003a80 <__sflush_r+0xac>
 8003a92:	0793      	lsls	r3, r2, #30
 8003a94:	bf18      	it	ne
 8003a96:	2300      	movne	r3, #0
 8003a98:	680e      	ldr	r6, [r1, #0]
 8003a9a:	bf08      	it	eq
 8003a9c:	694b      	ldreq	r3, [r1, #20]
 8003a9e:	1bf6      	subs	r6, r6, r7
 8003aa0:	600f      	str	r7, [r1, #0]
 8003aa2:	608b      	str	r3, [r1, #8]
 8003aa4:	2e00      	cmp	r6, #0
 8003aa6:	ddeb      	ble.n	8003a80 <__sflush_r+0xac>
 8003aa8:	4633      	mov	r3, r6
 8003aaa:	463a      	mov	r2, r7
 8003aac:	4628      	mov	r0, r5
 8003aae:	6a21      	ldr	r1, [r4, #32]
 8003ab0:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8003ab4:	47e0      	blx	ip
 8003ab6:	2800      	cmp	r0, #0
 8003ab8:	dc07      	bgt.n	8003aca <__sflush_r+0xf6>
 8003aba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003abe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003ac2:	f04f 30ff 	mov.w	r0, #4294967295
 8003ac6:	81a3      	strh	r3, [r4, #12]
 8003ac8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003aca:	4407      	add	r7, r0
 8003acc:	1a36      	subs	r6, r6, r0
 8003ace:	e7e9      	b.n	8003aa4 <__sflush_r+0xd0>
 8003ad0:	dfbffffe 	.word	0xdfbffffe

08003ad4 <_fflush_r>:
 8003ad4:	b538      	push	{r3, r4, r5, lr}
 8003ad6:	690b      	ldr	r3, [r1, #16]
 8003ad8:	4605      	mov	r5, r0
 8003ada:	460c      	mov	r4, r1
 8003adc:	b913      	cbnz	r3, 8003ae4 <_fflush_r+0x10>
 8003ade:	2500      	movs	r5, #0
 8003ae0:	4628      	mov	r0, r5
 8003ae2:	bd38      	pop	{r3, r4, r5, pc}
 8003ae4:	b118      	cbz	r0, 8003aee <_fflush_r+0x1a>
 8003ae6:	6a03      	ldr	r3, [r0, #32]
 8003ae8:	b90b      	cbnz	r3, 8003aee <_fflush_r+0x1a>
 8003aea:	f7ff f9a9 	bl	8002e40 <__sinit>
 8003aee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d0f3      	beq.n	8003ade <_fflush_r+0xa>
 8003af6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003af8:	07d0      	lsls	r0, r2, #31
 8003afa:	d404      	bmi.n	8003b06 <_fflush_r+0x32>
 8003afc:	0599      	lsls	r1, r3, #22
 8003afe:	d402      	bmi.n	8003b06 <_fflush_r+0x32>
 8003b00:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003b02:	f7ff fb9c 	bl	800323e <__retarget_lock_acquire_recursive>
 8003b06:	4628      	mov	r0, r5
 8003b08:	4621      	mov	r1, r4
 8003b0a:	f7ff ff63 	bl	80039d4 <__sflush_r>
 8003b0e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003b10:	4605      	mov	r5, r0
 8003b12:	07da      	lsls	r2, r3, #31
 8003b14:	d4e4      	bmi.n	8003ae0 <_fflush_r+0xc>
 8003b16:	89a3      	ldrh	r3, [r4, #12]
 8003b18:	059b      	lsls	r3, r3, #22
 8003b1a:	d4e1      	bmi.n	8003ae0 <_fflush_r+0xc>
 8003b1c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003b1e:	f7ff fb8f 	bl	8003240 <__retarget_lock_release_recursive>
 8003b22:	e7dd      	b.n	8003ae0 <_fflush_r+0xc>

08003b24 <__swhatbuf_r>:
 8003b24:	b570      	push	{r4, r5, r6, lr}
 8003b26:	460c      	mov	r4, r1
 8003b28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b2c:	4615      	mov	r5, r2
 8003b2e:	2900      	cmp	r1, #0
 8003b30:	461e      	mov	r6, r3
 8003b32:	b096      	sub	sp, #88	@ 0x58
 8003b34:	da0c      	bge.n	8003b50 <__swhatbuf_r+0x2c>
 8003b36:	89a3      	ldrh	r3, [r4, #12]
 8003b38:	2100      	movs	r1, #0
 8003b3a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8003b3e:	bf14      	ite	ne
 8003b40:	2340      	movne	r3, #64	@ 0x40
 8003b42:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8003b46:	2000      	movs	r0, #0
 8003b48:	6031      	str	r1, [r6, #0]
 8003b4a:	602b      	str	r3, [r5, #0]
 8003b4c:	b016      	add	sp, #88	@ 0x58
 8003b4e:	bd70      	pop	{r4, r5, r6, pc}
 8003b50:	466a      	mov	r2, sp
 8003b52:	f000 f87d 	bl	8003c50 <_fstat_r>
 8003b56:	2800      	cmp	r0, #0
 8003b58:	dbed      	blt.n	8003b36 <__swhatbuf_r+0x12>
 8003b5a:	9901      	ldr	r1, [sp, #4]
 8003b5c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8003b60:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8003b64:	4259      	negs	r1, r3
 8003b66:	4159      	adcs	r1, r3
 8003b68:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003b6c:	e7eb      	b.n	8003b46 <__swhatbuf_r+0x22>

08003b6e <__smakebuf_r>:
 8003b6e:	898b      	ldrh	r3, [r1, #12]
 8003b70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003b72:	079d      	lsls	r5, r3, #30
 8003b74:	4606      	mov	r6, r0
 8003b76:	460c      	mov	r4, r1
 8003b78:	d507      	bpl.n	8003b8a <__smakebuf_r+0x1c>
 8003b7a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8003b7e:	6023      	str	r3, [r4, #0]
 8003b80:	6123      	str	r3, [r4, #16]
 8003b82:	2301      	movs	r3, #1
 8003b84:	6163      	str	r3, [r4, #20]
 8003b86:	b003      	add	sp, #12
 8003b88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b8a:	466a      	mov	r2, sp
 8003b8c:	ab01      	add	r3, sp, #4
 8003b8e:	f7ff ffc9 	bl	8003b24 <__swhatbuf_r>
 8003b92:	9f00      	ldr	r7, [sp, #0]
 8003b94:	4605      	mov	r5, r0
 8003b96:	4639      	mov	r1, r7
 8003b98:	4630      	mov	r0, r6
 8003b9a:	f7ff fbbd 	bl	8003318 <_malloc_r>
 8003b9e:	b948      	cbnz	r0, 8003bb4 <__smakebuf_r+0x46>
 8003ba0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003ba4:	059a      	lsls	r2, r3, #22
 8003ba6:	d4ee      	bmi.n	8003b86 <__smakebuf_r+0x18>
 8003ba8:	f023 0303 	bic.w	r3, r3, #3
 8003bac:	f043 0302 	orr.w	r3, r3, #2
 8003bb0:	81a3      	strh	r3, [r4, #12]
 8003bb2:	e7e2      	b.n	8003b7a <__smakebuf_r+0xc>
 8003bb4:	89a3      	ldrh	r3, [r4, #12]
 8003bb6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8003bba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003bbe:	81a3      	strh	r3, [r4, #12]
 8003bc0:	9b01      	ldr	r3, [sp, #4]
 8003bc2:	6020      	str	r0, [r4, #0]
 8003bc4:	b15b      	cbz	r3, 8003bde <__smakebuf_r+0x70>
 8003bc6:	4630      	mov	r0, r6
 8003bc8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003bcc:	f000 f852 	bl	8003c74 <_isatty_r>
 8003bd0:	b128      	cbz	r0, 8003bde <__smakebuf_r+0x70>
 8003bd2:	89a3      	ldrh	r3, [r4, #12]
 8003bd4:	f023 0303 	bic.w	r3, r3, #3
 8003bd8:	f043 0301 	orr.w	r3, r3, #1
 8003bdc:	81a3      	strh	r3, [r4, #12]
 8003bde:	89a3      	ldrh	r3, [r4, #12]
 8003be0:	431d      	orrs	r5, r3
 8003be2:	81a5      	strh	r5, [r4, #12]
 8003be4:	e7cf      	b.n	8003b86 <__smakebuf_r+0x18>

08003be6 <_putc_r>:
 8003be6:	b570      	push	{r4, r5, r6, lr}
 8003be8:	460d      	mov	r5, r1
 8003bea:	4614      	mov	r4, r2
 8003bec:	4606      	mov	r6, r0
 8003bee:	b118      	cbz	r0, 8003bf8 <_putc_r+0x12>
 8003bf0:	6a03      	ldr	r3, [r0, #32]
 8003bf2:	b90b      	cbnz	r3, 8003bf8 <_putc_r+0x12>
 8003bf4:	f7ff f924 	bl	8002e40 <__sinit>
 8003bf8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003bfa:	07d8      	lsls	r0, r3, #31
 8003bfc:	d405      	bmi.n	8003c0a <_putc_r+0x24>
 8003bfe:	89a3      	ldrh	r3, [r4, #12]
 8003c00:	0599      	lsls	r1, r3, #22
 8003c02:	d402      	bmi.n	8003c0a <_putc_r+0x24>
 8003c04:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003c06:	f7ff fb1a 	bl	800323e <__retarget_lock_acquire_recursive>
 8003c0a:	68a3      	ldr	r3, [r4, #8]
 8003c0c:	3b01      	subs	r3, #1
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	60a3      	str	r3, [r4, #8]
 8003c12:	da05      	bge.n	8003c20 <_putc_r+0x3a>
 8003c14:	69a2      	ldr	r2, [r4, #24]
 8003c16:	4293      	cmp	r3, r2
 8003c18:	db12      	blt.n	8003c40 <_putc_r+0x5a>
 8003c1a:	b2eb      	uxtb	r3, r5
 8003c1c:	2b0a      	cmp	r3, #10
 8003c1e:	d00f      	beq.n	8003c40 <_putc_r+0x5a>
 8003c20:	6823      	ldr	r3, [r4, #0]
 8003c22:	1c5a      	adds	r2, r3, #1
 8003c24:	6022      	str	r2, [r4, #0]
 8003c26:	701d      	strb	r5, [r3, #0]
 8003c28:	b2ed      	uxtb	r5, r5
 8003c2a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003c2c:	07da      	lsls	r2, r3, #31
 8003c2e:	d405      	bmi.n	8003c3c <_putc_r+0x56>
 8003c30:	89a3      	ldrh	r3, [r4, #12]
 8003c32:	059b      	lsls	r3, r3, #22
 8003c34:	d402      	bmi.n	8003c3c <_putc_r+0x56>
 8003c36:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003c38:	f7ff fb02 	bl	8003240 <__retarget_lock_release_recursive>
 8003c3c:	4628      	mov	r0, r5
 8003c3e:	bd70      	pop	{r4, r5, r6, pc}
 8003c40:	4629      	mov	r1, r5
 8003c42:	4622      	mov	r2, r4
 8003c44:	4630      	mov	r0, r6
 8003c46:	f7ff f9ec 	bl	8003022 <__swbuf_r>
 8003c4a:	4605      	mov	r5, r0
 8003c4c:	e7ed      	b.n	8003c2a <_putc_r+0x44>
	...

08003c50 <_fstat_r>:
 8003c50:	b538      	push	{r3, r4, r5, lr}
 8003c52:	2300      	movs	r3, #0
 8003c54:	4d06      	ldr	r5, [pc, #24]	@ (8003c70 <_fstat_r+0x20>)
 8003c56:	4604      	mov	r4, r0
 8003c58:	4608      	mov	r0, r1
 8003c5a:	4611      	mov	r1, r2
 8003c5c:	602b      	str	r3, [r5, #0]
 8003c5e:	f7fc fd5b 	bl	8000718 <_fstat>
 8003c62:	1c43      	adds	r3, r0, #1
 8003c64:	d102      	bne.n	8003c6c <_fstat_r+0x1c>
 8003c66:	682b      	ldr	r3, [r5, #0]
 8003c68:	b103      	cbz	r3, 8003c6c <_fstat_r+0x1c>
 8003c6a:	6023      	str	r3, [r4, #0]
 8003c6c:	bd38      	pop	{r3, r4, r5, pc}
 8003c6e:	bf00      	nop
 8003c70:	2000035c 	.word	0x2000035c

08003c74 <_isatty_r>:
 8003c74:	b538      	push	{r3, r4, r5, lr}
 8003c76:	2300      	movs	r3, #0
 8003c78:	4d05      	ldr	r5, [pc, #20]	@ (8003c90 <_isatty_r+0x1c>)
 8003c7a:	4604      	mov	r4, r0
 8003c7c:	4608      	mov	r0, r1
 8003c7e:	602b      	str	r3, [r5, #0]
 8003c80:	f7fc fd59 	bl	8000736 <_isatty>
 8003c84:	1c43      	adds	r3, r0, #1
 8003c86:	d102      	bne.n	8003c8e <_isatty_r+0x1a>
 8003c88:	682b      	ldr	r3, [r5, #0]
 8003c8a:	b103      	cbz	r3, 8003c8e <_isatty_r+0x1a>
 8003c8c:	6023      	str	r3, [r4, #0]
 8003c8e:	bd38      	pop	{r3, r4, r5, pc}
 8003c90:	2000035c 	.word	0x2000035c

08003c94 <_sbrk_r>:
 8003c94:	b538      	push	{r3, r4, r5, lr}
 8003c96:	2300      	movs	r3, #0
 8003c98:	4d05      	ldr	r5, [pc, #20]	@ (8003cb0 <_sbrk_r+0x1c>)
 8003c9a:	4604      	mov	r4, r0
 8003c9c:	4608      	mov	r0, r1
 8003c9e:	602b      	str	r3, [r5, #0]
 8003ca0:	f7fc fd60 	bl	8000764 <_sbrk>
 8003ca4:	1c43      	adds	r3, r0, #1
 8003ca6:	d102      	bne.n	8003cae <_sbrk_r+0x1a>
 8003ca8:	682b      	ldr	r3, [r5, #0]
 8003caa:	b103      	cbz	r3, 8003cae <_sbrk_r+0x1a>
 8003cac:	6023      	str	r3, [r4, #0]
 8003cae:	bd38      	pop	{r3, r4, r5, pc}
 8003cb0:	2000035c 	.word	0x2000035c

08003cb4 <memchr>:
 8003cb4:	4603      	mov	r3, r0
 8003cb6:	b510      	push	{r4, lr}
 8003cb8:	b2c9      	uxtb	r1, r1
 8003cba:	4402      	add	r2, r0
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	d101      	bne.n	8003cc6 <memchr+0x12>
 8003cc2:	2000      	movs	r0, #0
 8003cc4:	e003      	b.n	8003cce <memchr+0x1a>
 8003cc6:	7804      	ldrb	r4, [r0, #0]
 8003cc8:	3301      	adds	r3, #1
 8003cca:	428c      	cmp	r4, r1
 8003ccc:	d1f6      	bne.n	8003cbc <memchr+0x8>
 8003cce:	bd10      	pop	{r4, pc}

08003cd0 <_init>:
 8003cd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cd2:	bf00      	nop
 8003cd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cd6:	bc08      	pop	{r3}
 8003cd8:	469e      	mov	lr, r3
 8003cda:	4770      	bx	lr

08003cdc <_fini>:
 8003cdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cde:	bf00      	nop
 8003ce0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ce2:	bc08      	pop	{r3}
 8003ce4:	469e      	mov	lr, r3
 8003ce6:	4770      	bx	lr
