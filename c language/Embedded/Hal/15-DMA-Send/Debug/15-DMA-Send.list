
15-DMA-Send.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000372c  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  08003838  08003838  00004838  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080038c4  080038c4  00005068  2**0
                  CONTENTS
  4 .ARM          00000000  080038c4  080038c4  00005068  2**0
                  CONTENTS
  5 .preinit_array 00000000  080038c4  080038c4  00005068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080038c4  080038c4  000048c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080038c8  080038c8  000048c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080038cc  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000248  20000068  08003934  00005068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002b0  08003934  000052b0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00005068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000815a  00000000  00000000  00005091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c2c  00000000  00000000  0000d1eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007d0  00000000  00000000  0000ee18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000005da  00000000  00000000  0000f5e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000182da  00000000  00000000  0000fbc2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b3f6  00000000  00000000  00027e9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083d9b  00000000  00000000  00033292  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b702d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000237c  00000000  00000000  000b7070  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004a  00000000  00000000  000b93ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	08003820 	.word	0x08003820

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	08003820 	.word	0x08003820

0800014c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000152:	4b10      	ldr	r3, [pc, #64]	@ (8000194 <MX_DMA_Init+0x48>)
 8000154:	695b      	ldr	r3, [r3, #20]
 8000156:	4a0f      	ldr	r2, [pc, #60]	@ (8000194 <MX_DMA_Init+0x48>)
 8000158:	f043 0301 	orr.w	r3, r3, #1
 800015c:	6153      	str	r3, [r2, #20]
 800015e:	4b0d      	ldr	r3, [pc, #52]	@ (8000194 <MX_DMA_Init+0x48>)
 8000160:	695b      	ldr	r3, [r3, #20]
 8000162:	f003 0301 	and.w	r3, r3, #1
 8000166:	607b      	str	r3, [r7, #4]
 8000168:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 800016a:	2200      	movs	r2, #0
 800016c:	2100      	movs	r1, #0
 800016e:	200e      	movs	r0, #14
 8000170:	f000 fce7 	bl	8000b42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000174:	200e      	movs	r0, #14
 8000176:	f000 fd00 	bl	8000b7a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800017a:	2200      	movs	r2, #0
 800017c:	2100      	movs	r1, #0
 800017e:	200f      	movs	r0, #15
 8000180:	f000 fcdf 	bl	8000b42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000184:	200f      	movs	r0, #15
 8000186:	f000 fcf8 	bl	8000b7a <HAL_NVIC_EnableIRQ>

}
 800018a:	bf00      	nop
 800018c:	3708      	adds	r7, #8
 800018e:	46bd      	mov	sp, r7
 8000190:	bd80      	pop	{r7, pc}
 8000192:	bf00      	nop
 8000194:	40021000 	.word	0x40021000

08000198 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000198:	b580      	push	{r7, lr}
 800019a:	b086      	sub	sp, #24
 800019c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800019e:	f107 0308 	add.w	r3, r7, #8
 80001a2:	2200      	movs	r2, #0
 80001a4:	601a      	str	r2, [r3, #0]
 80001a6:	605a      	str	r2, [r3, #4]
 80001a8:	609a      	str	r2, [r3, #8]
 80001aa:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80001ac:	4b2b      	ldr	r3, [pc, #172]	@ (800025c <MX_GPIO_Init+0xc4>)
 80001ae:	699b      	ldr	r3, [r3, #24]
 80001b0:	4a2a      	ldr	r2, [pc, #168]	@ (800025c <MX_GPIO_Init+0xc4>)
 80001b2:	f043 0304 	orr.w	r3, r3, #4
 80001b6:	6193      	str	r3, [r2, #24]
 80001b8:	4b28      	ldr	r3, [pc, #160]	@ (800025c <MX_GPIO_Init+0xc4>)
 80001ba:	699b      	ldr	r3, [r3, #24]
 80001bc:	f003 0304 	and.w	r3, r3, #4
 80001c0:	607b      	str	r3, [r7, #4]
 80001c2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80001c4:	4b25      	ldr	r3, [pc, #148]	@ (800025c <MX_GPIO_Init+0xc4>)
 80001c6:	699b      	ldr	r3, [r3, #24]
 80001c8:	4a24      	ldr	r2, [pc, #144]	@ (800025c <MX_GPIO_Init+0xc4>)
 80001ca:	f043 0308 	orr.w	r3, r3, #8
 80001ce:	6193      	str	r3, [r2, #24]
 80001d0:	4b22      	ldr	r3, [pc, #136]	@ (800025c <MX_GPIO_Init+0xc4>)
 80001d2:	699b      	ldr	r3, [r3, #24]
 80001d4:	f003 0308 	and.w	r3, r3, #8
 80001d8:	603b      	str	r3, [r7, #0]
 80001da:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 80001dc:	2200      	movs	r2, #0
 80001de:	2106      	movs	r1, #6
 80001e0:	481f      	ldr	r0, [pc, #124]	@ (8000260 <MX_GPIO_Init+0xc8>)
 80001e2:	f001 f90b 	bl	80013fc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA1 PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 80001e6:	2306      	movs	r3, #6
 80001e8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80001ea:	2301      	movs	r3, #1
 80001ec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001ee:	2300      	movs	r3, #0
 80001f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80001f2:	2302      	movs	r3, #2
 80001f4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80001f6:	f107 0308 	add.w	r3, r7, #8
 80001fa:	4619      	mov	r1, r3
 80001fc:	4818      	ldr	r0, [pc, #96]	@ (8000260 <MX_GPIO_Init+0xc8>)
 80001fe:	f000 ff79 	bl	80010f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000202:	2320      	movs	r3, #32
 8000204:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000206:	4b17      	ldr	r3, [pc, #92]	@ (8000264 <MX_GPIO_Init+0xcc>)
 8000208:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800020a:	2301      	movs	r3, #1
 800020c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800020e:	f107 0308 	add.w	r3, r7, #8
 8000212:	4619      	mov	r1, r3
 8000214:	4812      	ldr	r0, [pc, #72]	@ (8000260 <MX_GPIO_Init+0xc8>)
 8000216:	f000 ff6d 	bl	80010f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800021a:	2301      	movs	r3, #1
 800021c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800021e:	4b11      	ldr	r3, [pc, #68]	@ (8000264 <MX_GPIO_Init+0xcc>)
 8000220:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000222:	2301      	movs	r3, #1
 8000224:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000226:	f107 0308 	add.w	r3, r7, #8
 800022a:	4619      	mov	r1, r3
 800022c:	480e      	ldr	r0, [pc, #56]	@ (8000268 <MX_GPIO_Init+0xd0>)
 800022e:	f000 ff61 	bl	80010f4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000232:	2200      	movs	r2, #0
 8000234:	2100      	movs	r1, #0
 8000236:	2006      	movs	r0, #6
 8000238:	f000 fc83 	bl	8000b42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800023c:	2006      	movs	r0, #6
 800023e:	f000 fc9c 	bl	8000b7a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000242:	2200      	movs	r2, #0
 8000244:	2100      	movs	r1, #0
 8000246:	2017      	movs	r0, #23
 8000248:	f000 fc7b 	bl	8000b42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800024c:	2017      	movs	r0, #23
 800024e:	f000 fc94 	bl	8000b7a <HAL_NVIC_EnableIRQ>

}
 8000252:	bf00      	nop
 8000254:	3718      	adds	r7, #24
 8000256:	46bd      	mov	sp, r7
 8000258:	bd80      	pop	{r7, pc}
 800025a:	bf00      	nop
 800025c:	40021000 	.word	0x40021000
 8000260:	40010800 	.word	0x40010800
 8000264:	10210000 	.word	0x10210000
 8000268:	40010c00 	.word	0x40010c00

0800026c <LED_Control>:

/* USER CODE BEGIN 2 */
void LED_Control(uint8_t device, uint8_t cmd)
{
 800026c:	b580      	push	{r7, lr}
 800026e:	b082      	sub	sp, #8
 8000270:	af00      	add	r7, sp, #0
 8000272:	4603      	mov	r3, r0
 8000274:	460a      	mov	r2, r1
 8000276:	71fb      	strb	r3, [r7, #7]
 8000278:	4613      	mov	r3, r2
 800027a:	71bb      	strb	r3, [r7, #6]
	if (device == LED1)
 800027c:	79fb      	ldrb	r3, [r7, #7]
 800027e:	2b01      	cmp	r3, #1
 8000280:	d111      	bne.n	80002a6 <LED_Control+0x3a>
	{
		if (cmd == ON)
 8000282:	79bb      	ldrb	r3, [r7, #6]
 8000284:	2b01      	cmp	r3, #1
 8000286:	d105      	bne.n	8000294 <LED_Control+0x28>
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 8000288:	2201      	movs	r2, #1
 800028a:	2102      	movs	r1, #2
 800028c:	4812      	ldr	r0, [pc, #72]	@ (80002d8 <LED_Control+0x6c>)
 800028e:	f001 f8b5 	bl	80013fc <HAL_GPIO_WritePin>
		else if (cmd == OFF)
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
		}
	}
}
 8000292:	e01c      	b.n	80002ce <LED_Control+0x62>
		else if (cmd == OFF)
 8000294:	79bb      	ldrb	r3, [r7, #6]
 8000296:	2b00      	cmp	r3, #0
 8000298:	d119      	bne.n	80002ce <LED_Control+0x62>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 800029a:	2200      	movs	r2, #0
 800029c:	2102      	movs	r1, #2
 800029e:	480e      	ldr	r0, [pc, #56]	@ (80002d8 <LED_Control+0x6c>)
 80002a0:	f001 f8ac 	bl	80013fc <HAL_GPIO_WritePin>
}
 80002a4:	e013      	b.n	80002ce <LED_Control+0x62>
	else if (device == LED2)
 80002a6:	79fb      	ldrb	r3, [r7, #7]
 80002a8:	2b02      	cmp	r3, #2
 80002aa:	d110      	bne.n	80002ce <LED_Control+0x62>
		if (cmd == ON)
 80002ac:	79bb      	ldrb	r3, [r7, #6]
 80002ae:	2b01      	cmp	r3, #1
 80002b0:	d105      	bne.n	80002be <LED_Control+0x52>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 80002b2:	2201      	movs	r2, #1
 80002b4:	2104      	movs	r1, #4
 80002b6:	4808      	ldr	r0, [pc, #32]	@ (80002d8 <LED_Control+0x6c>)
 80002b8:	f001 f8a0 	bl	80013fc <HAL_GPIO_WritePin>
}
 80002bc:	e007      	b.n	80002ce <LED_Control+0x62>
		else if (cmd == OFF)
 80002be:	79bb      	ldrb	r3, [r7, #6]
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	d104      	bne.n	80002ce <LED_Control+0x62>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 80002c4:	2200      	movs	r2, #0
 80002c6:	2104      	movs	r1, #4
 80002c8:	4803      	ldr	r0, [pc, #12]	@ (80002d8 <LED_Control+0x6c>)
 80002ca:	f001 f897 	bl	80013fc <HAL_GPIO_WritePin>
}
 80002ce:	bf00      	nop
 80002d0:	3708      	adds	r7, #8
 80002d2:	46bd      	mov	sp, r7
 80002d4:	bd80      	pop	{r7, pc}
 80002d6:	bf00      	nop
 80002d8:	40010800 	.word	0x40010800

080002dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002e0:	f000 faf6 	bl	80008d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002e4:	f000 f81e 	bl	8000324 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002e8:	f7ff ff56 	bl	8000198 <MX_GPIO_Init>
  MX_DMA_Init();
 80002ec:	f7ff ff2e 	bl	800014c <MX_DMA_Init>
  MX_USART1_UART_Init();
 80002f0:	f000 f9e2 	bl	80006b8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  //HAL_UART_Receive_IT(&huart1, RX1_Buffer, 4);
  HAL_UART_Receive_DMA(&huart1, RX1_Buffer, 1);
 80002f4:	2201      	movs	r2, #1
 80002f6:	4907      	ldr	r1, [pc, #28]	@ (8000314 <main+0x38>)
 80002f8:	4807      	ldr	r0, [pc, #28]	@ (8000318 <main+0x3c>)
 80002fa:	f001 fe2f 	bl	8001f5c <HAL_UART_Receive_DMA>
  printf("The system has been initialized!\n");
 80002fe:	4807      	ldr	r0, [pc, #28]	@ (800031c <main+0x40>)
 8000300:	f002 ff00 	bl	8003104 <puts>
  HAL_UART_Transmit_DMA(&huart1, (uint8_t *) "DMA Test\n", sizeof("DMA Test\n"));
 8000304:	220a      	movs	r2, #10
 8000306:	4906      	ldr	r1, [pc, #24]	@ (8000320 <main+0x44>)
 8000308:	4803      	ldr	r0, [pc, #12]	@ (8000318 <main+0x3c>)
 800030a:	f001 fdb7 	bl	8001e7c <HAL_UART_Transmit_DMA>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800030e:	bf00      	nop
 8000310:	e7fd      	b.n	800030e <main+0x32>
 8000312:	bf00      	nop
 8000314:	20000084 	.word	0x20000084
 8000318:	20000090 	.word	0x20000090
 800031c:	08003838 	.word	0x08003838
 8000320:	0800385c 	.word	0x0800385c

08000324 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000324:	b580      	push	{r7, lr}
 8000326:	b090      	sub	sp, #64	@ 0x40
 8000328:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800032a:	f107 0318 	add.w	r3, r7, #24
 800032e:	2228      	movs	r2, #40	@ 0x28
 8000330:	2100      	movs	r1, #0
 8000332:	4618      	mov	r0, r3
 8000334:	f002 ffc6 	bl	80032c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000338:	1d3b      	adds	r3, r7, #4
 800033a:	2200      	movs	r2, #0
 800033c:	601a      	str	r2, [r3, #0]
 800033e:	605a      	str	r2, [r3, #4]
 8000340:	609a      	str	r2, [r3, #8]
 8000342:	60da      	str	r2, [r3, #12]
 8000344:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000346:	2302      	movs	r3, #2
 8000348:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800034a:	2301      	movs	r3, #1
 800034c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800034e:	2310      	movs	r3, #16
 8000350:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000352:	2300      	movs	r3, #0
 8000354:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000356:	f107 0318 	add.w	r3, r7, #24
 800035a:	4618      	mov	r0, r3
 800035c:	f001 f87e 	bl	800145c <HAL_RCC_OscConfig>
 8000360:	4603      	mov	r3, r0
 8000362:	2b00      	cmp	r3, #0
 8000364:	d001      	beq.n	800036a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000366:	f000 f818 	bl	800039a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800036a:	230f      	movs	r3, #15
 800036c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800036e:	2300      	movs	r3, #0
 8000370:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000372:	2300      	movs	r3, #0
 8000374:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000376:	2300      	movs	r3, #0
 8000378:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800037a:	2300      	movs	r3, #0
 800037c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800037e:	1d3b      	adds	r3, r7, #4
 8000380:	2100      	movs	r1, #0
 8000382:	4618      	mov	r0, r3
 8000384:	f001 faec 	bl	8001960 <HAL_RCC_ClockConfig>
 8000388:	4603      	mov	r3, r0
 800038a:	2b00      	cmp	r3, #0
 800038c:	d001      	beq.n	8000392 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800038e:	f000 f804 	bl	800039a <Error_Handler>
  }
}
 8000392:	bf00      	nop
 8000394:	3740      	adds	r7, #64	@ 0x40
 8000396:	46bd      	mov	sp, r7
 8000398:	bd80      	pop	{r7, pc}

0800039a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800039a:	b480      	push	{r7}
 800039c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800039e:	b672      	cpsid	i
}
 80003a0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003a2:	bf00      	nop
 80003a4:	e7fd      	b.n	80003a2 <Error_Handler+0x8>
	...

080003a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003a8:	b480      	push	{r7}
 80003aa:	b085      	sub	sp, #20
 80003ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80003ae:	4b15      	ldr	r3, [pc, #84]	@ (8000404 <HAL_MspInit+0x5c>)
 80003b0:	699b      	ldr	r3, [r3, #24]
 80003b2:	4a14      	ldr	r2, [pc, #80]	@ (8000404 <HAL_MspInit+0x5c>)
 80003b4:	f043 0301 	orr.w	r3, r3, #1
 80003b8:	6193      	str	r3, [r2, #24]
 80003ba:	4b12      	ldr	r3, [pc, #72]	@ (8000404 <HAL_MspInit+0x5c>)
 80003bc:	699b      	ldr	r3, [r3, #24]
 80003be:	f003 0301 	and.w	r3, r3, #1
 80003c2:	60bb      	str	r3, [r7, #8]
 80003c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003c6:	4b0f      	ldr	r3, [pc, #60]	@ (8000404 <HAL_MspInit+0x5c>)
 80003c8:	69db      	ldr	r3, [r3, #28]
 80003ca:	4a0e      	ldr	r2, [pc, #56]	@ (8000404 <HAL_MspInit+0x5c>)
 80003cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80003d0:	61d3      	str	r3, [r2, #28]
 80003d2:	4b0c      	ldr	r3, [pc, #48]	@ (8000404 <HAL_MspInit+0x5c>)
 80003d4:	69db      	ldr	r3, [r3, #28]
 80003d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80003da:	607b      	str	r3, [r7, #4]
 80003dc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80003de:	4b0a      	ldr	r3, [pc, #40]	@ (8000408 <HAL_MspInit+0x60>)
 80003e0:	685b      	ldr	r3, [r3, #4]
 80003e2:	60fb      	str	r3, [r7, #12]
 80003e4:	68fb      	ldr	r3, [r7, #12]
 80003e6:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80003ea:	60fb      	str	r3, [r7, #12]
 80003ec:	68fb      	ldr	r3, [r7, #12]
 80003ee:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80003f2:	60fb      	str	r3, [r7, #12]
 80003f4:	4a04      	ldr	r2, [pc, #16]	@ (8000408 <HAL_MspInit+0x60>)
 80003f6:	68fb      	ldr	r3, [r7, #12]
 80003f8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003fa:	bf00      	nop
 80003fc:	3714      	adds	r7, #20
 80003fe:	46bd      	mov	sp, r7
 8000400:	bc80      	pop	{r7}
 8000402:	4770      	bx	lr
 8000404:	40021000 	.word	0x40021000
 8000408:	40010000 	.word	0x40010000

0800040c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800040c:	b480      	push	{r7}
 800040e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000410:	bf00      	nop
 8000412:	e7fd      	b.n	8000410 <NMI_Handler+0x4>

08000414 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000414:	b480      	push	{r7}
 8000416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000418:	bf00      	nop
 800041a:	e7fd      	b.n	8000418 <HardFault_Handler+0x4>

0800041c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800041c:	b480      	push	{r7}
 800041e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000420:	bf00      	nop
 8000422:	e7fd      	b.n	8000420 <MemManage_Handler+0x4>

08000424 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000424:	b480      	push	{r7}
 8000426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000428:	bf00      	nop
 800042a:	e7fd      	b.n	8000428 <BusFault_Handler+0x4>

0800042c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800042c:	b480      	push	{r7}
 800042e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000430:	bf00      	nop
 8000432:	e7fd      	b.n	8000430 <UsageFault_Handler+0x4>

08000434 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000434:	b480      	push	{r7}
 8000436:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000438:	bf00      	nop
 800043a:	46bd      	mov	sp, r7
 800043c:	bc80      	pop	{r7}
 800043e:	4770      	bx	lr

08000440 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000440:	b480      	push	{r7}
 8000442:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000444:	bf00      	nop
 8000446:	46bd      	mov	sp, r7
 8000448:	bc80      	pop	{r7}
 800044a:	4770      	bx	lr

0800044c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800044c:	b480      	push	{r7}
 800044e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000450:	bf00      	nop
 8000452:	46bd      	mov	sp, r7
 8000454:	bc80      	pop	{r7}
 8000456:	4770      	bx	lr

08000458 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800045c:	f000 fa7e 	bl	800095c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000460:	bf00      	nop
 8000462:	bd80      	pop	{r7, pc}

08000464 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000464:	b580      	push	{r7, lr}
 8000466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000468:	2001      	movs	r0, #1
 800046a:	f000 ffdf 	bl	800142c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800046e:	bf00      	nop
 8000470:	bd80      	pop	{r7, pc}
	...

08000474 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8000474:	b580      	push	{r7, lr}
 8000476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000478:	4802      	ldr	r0, [pc, #8]	@ (8000484 <DMA1_Channel4_IRQHandler+0x10>)
 800047a:	f000 fd07 	bl	8000e8c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800047e:	bf00      	nop
 8000480:	bd80      	pop	{r7, pc}
 8000482:	bf00      	nop
 8000484:	200000d8 	.word	0x200000d8

08000488 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8000488:	b580      	push	{r7, lr}
 800048a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800048c:	4802      	ldr	r0, [pc, #8]	@ (8000498 <DMA1_Channel5_IRQHandler+0x10>)
 800048e:	f000 fcfd 	bl	8000e8c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8000492:	bf00      	nop
 8000494:	bd80      	pop	{r7, pc}
 8000496:	bf00      	nop
 8000498:	2000011c 	.word	0x2000011c

0800049c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 80004a0:	2020      	movs	r0, #32
 80004a2:	f000 ffc3 	bl	800142c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80004a6:	bf00      	nop
 80004a8:	bd80      	pop	{r7, pc}
	...

080004ac <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80004b0:	4802      	ldr	r0, [pc, #8]	@ (80004bc <USART1_IRQHandler+0x10>)
 80004b2:	f001 fd79 	bl	8001fa8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80004b6:	bf00      	nop
 80004b8:	bd80      	pop	{r7, pc}
 80004ba:	bf00      	nop
 80004bc:	20000090 	.word	0x20000090

080004c0 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 1 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b082      	sub	sp, #8
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	4603      	mov	r3, r0
 80004c8:	80fb      	strh	r3, [r7, #6]
	static uint32_t oldUWTick = 0;
	if ((uwTick - oldUWTick) < 200) return;
 80004ca:	4b16      	ldr	r3, [pc, #88]	@ (8000524 <HAL_GPIO_EXTI_Callback+0x64>)
 80004cc:	681a      	ldr	r2, [r3, #0]
 80004ce:	4b16      	ldr	r3, [pc, #88]	@ (8000528 <HAL_GPIO_EXTI_Callback+0x68>)
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	1ad3      	subs	r3, r2, r3
 80004d4:	2bc7      	cmp	r3, #199	@ 0xc7
 80004d6:	d921      	bls.n	800051c <HAL_GPIO_EXTI_Callback+0x5c>
	oldUWTick = uwTick;
 80004d8:	4b12      	ldr	r3, [pc, #72]	@ (8000524 <HAL_GPIO_EXTI_Callback+0x64>)
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	4a12      	ldr	r2, [pc, #72]	@ (8000528 <HAL_GPIO_EXTI_Callback+0x68>)
 80004de:	6013      	str	r3, [r2, #0]
	if (GPIO_Pin == GPIO_PIN_5)
 80004e0:	88fb      	ldrh	r3, [r7, #6]
 80004e2:	2b20      	cmp	r3, #32
 80004e4:	d10b      	bne.n	80004fe <HAL_GPIO_EXTI_Callback+0x3e>
	{
		LED_Control(LED1, ON);
 80004e6:	2101      	movs	r1, #1
 80004e8:	2001      	movs	r0, #1
 80004ea:	f7ff febf 	bl	800026c <LED_Control>
		LED_Control(LED2, ON);
 80004ee:	2101      	movs	r1, #1
 80004f0:	2002      	movs	r0, #2
 80004f2:	f7ff febb 	bl	800026c <LED_Control>
		printf("GPIO pin 5 has pressed\n");
 80004f6:	480d      	ldr	r0, [pc, #52]	@ (800052c <HAL_GPIO_EXTI_Callback+0x6c>)
 80004f8:	f002 fe04 	bl	8003104 <puts>
 80004fc:	e00f      	b.n	800051e <HAL_GPIO_EXTI_Callback+0x5e>
	}
	else if (GPIO_Pin == GPIO_PIN_0)
 80004fe:	88fb      	ldrh	r3, [r7, #6]
 8000500:	2b01      	cmp	r3, #1
 8000502:	d10c      	bne.n	800051e <HAL_GPIO_EXTI_Callback+0x5e>
	{
		LED_Control(LED1, OFF);
 8000504:	2100      	movs	r1, #0
 8000506:	2001      	movs	r0, #1
 8000508:	f7ff feb0 	bl	800026c <LED_Control>
		LED_Control(LED2, OFF);
 800050c:	2100      	movs	r1, #0
 800050e:	2002      	movs	r0, #2
 8000510:	f7ff feac 	bl	800026c <LED_Control>
		printf("GPIO pin 0 has pressed\n");
 8000514:	4806      	ldr	r0, [pc, #24]	@ (8000530 <HAL_GPIO_EXTI_Callback+0x70>)
 8000516:	f002 fdf5 	bl	8003104 <puts>
 800051a:	e000      	b.n	800051e <HAL_GPIO_EXTI_Callback+0x5e>
	if ((uwTick - oldUWTick) < 200) return;
 800051c:	bf00      	nop
	}
}
 800051e:	3708      	adds	r7, #8
 8000520:	46bd      	mov	sp, r7
 8000522:	bd80      	pop	{r7, pc}
 8000524:	20000160 	.word	0x20000160
 8000528:	20000088 	.word	0x20000088
 800052c:	08003868 	.word	0x08003868
 8000530:	08003880 	.word	0x08003880

08000534 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b082      	sub	sp, #8
 8000538:	af00      	add	r7, sp, #0
 800053a:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1)
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	4a08      	ldr	r2, [pc, #32]	@ (8000564 <HAL_UART_RxCpltCallback+0x30>)
 8000542:	4293      	cmp	r3, r2
 8000544:	d109      	bne.n	800055a <HAL_UART_RxCpltCallback+0x26>
	{
		//HAL_UART_Transmit(&huart1, RX1_Buffer, 4, HAL_MAX_DELAY);
		//HAL_UART_Receive_IT(&huart1, RX1_Buffer, 4);
		HAL_UART_Transmit_DMA(huart, RX1_Buffer, 1);
 8000546:	2201      	movs	r2, #1
 8000548:	4907      	ldr	r1, [pc, #28]	@ (8000568 <HAL_UART_RxCpltCallback+0x34>)
 800054a:	6878      	ldr	r0, [r7, #4]
 800054c:	f001 fc96 	bl	8001e7c <HAL_UART_Transmit_DMA>
		HAL_UART_Receive_IT(huart, RX1_Buffer, 1);
 8000550:	2201      	movs	r2, #1
 8000552:	4905      	ldr	r1, [pc, #20]	@ (8000568 <HAL_UART_RxCpltCallback+0x34>)
 8000554:	6878      	ldr	r0, [r7, #4]
 8000556:	f001 fc6c 	bl	8001e32 <HAL_UART_Receive_IT>
	}
}
 800055a:	bf00      	nop
 800055c:	3708      	adds	r7, #8
 800055e:	46bd      	mov	sp, r7
 8000560:	bd80      	pop	{r7, pc}
 8000562:	bf00      	nop
 8000564:	40013800 	.word	0x40013800
 8000568:	20000084 	.word	0x20000084

0800056c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b086      	sub	sp, #24
 8000570:	af00      	add	r7, sp, #0
 8000572:	60f8      	str	r0, [r7, #12]
 8000574:	60b9      	str	r1, [r7, #8]
 8000576:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000578:	2300      	movs	r3, #0
 800057a:	617b      	str	r3, [r7, #20]
 800057c:	e00a      	b.n	8000594 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800057e:	f3af 8000 	nop.w
 8000582:	4601      	mov	r1, r0
 8000584:	68bb      	ldr	r3, [r7, #8]
 8000586:	1c5a      	adds	r2, r3, #1
 8000588:	60ba      	str	r2, [r7, #8]
 800058a:	b2ca      	uxtb	r2, r1
 800058c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800058e:	697b      	ldr	r3, [r7, #20]
 8000590:	3301      	adds	r3, #1
 8000592:	617b      	str	r3, [r7, #20]
 8000594:	697a      	ldr	r2, [r7, #20]
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	429a      	cmp	r2, r3
 800059a:	dbf0      	blt.n	800057e <_read+0x12>
  }

  return len;
 800059c:	687b      	ldr	r3, [r7, #4]
}
 800059e:	4618      	mov	r0, r3
 80005a0:	3718      	adds	r7, #24
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bd80      	pop	{r7, pc}

080005a6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80005a6:	b580      	push	{r7, lr}
 80005a8:	b086      	sub	sp, #24
 80005aa:	af00      	add	r7, sp, #0
 80005ac:	60f8      	str	r0, [r7, #12]
 80005ae:	60b9      	str	r1, [r7, #8]
 80005b0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005b2:	2300      	movs	r3, #0
 80005b4:	617b      	str	r3, [r7, #20]
 80005b6:	e009      	b.n	80005cc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80005b8:	68bb      	ldr	r3, [r7, #8]
 80005ba:	1c5a      	adds	r2, r3, #1
 80005bc:	60ba      	str	r2, [r7, #8]
 80005be:	781b      	ldrb	r3, [r3, #0]
 80005c0:	4618      	mov	r0, r3
 80005c2:	f000 f94d 	bl	8000860 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005c6:	697b      	ldr	r3, [r7, #20]
 80005c8:	3301      	adds	r3, #1
 80005ca:	617b      	str	r3, [r7, #20]
 80005cc:	697a      	ldr	r2, [r7, #20]
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	429a      	cmp	r2, r3
 80005d2:	dbf1      	blt.n	80005b8 <_write+0x12>
  }
  return len;
 80005d4:	687b      	ldr	r3, [r7, #4]
}
 80005d6:	4618      	mov	r0, r3
 80005d8:	3718      	adds	r7, #24
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}

080005de <_close>:

int _close(int file)
{
 80005de:	b480      	push	{r7}
 80005e0:	b083      	sub	sp, #12
 80005e2:	af00      	add	r7, sp, #0
 80005e4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80005e6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80005ea:	4618      	mov	r0, r3
 80005ec:	370c      	adds	r7, #12
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bc80      	pop	{r7}
 80005f2:	4770      	bx	lr

080005f4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80005f4:	b480      	push	{r7}
 80005f6:	b083      	sub	sp, #12
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
 80005fc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80005fe:	683b      	ldr	r3, [r7, #0]
 8000600:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000604:	605a      	str	r2, [r3, #4]
  return 0;
 8000606:	2300      	movs	r3, #0
}
 8000608:	4618      	mov	r0, r3
 800060a:	370c      	adds	r7, #12
 800060c:	46bd      	mov	sp, r7
 800060e:	bc80      	pop	{r7}
 8000610:	4770      	bx	lr

08000612 <_isatty>:

int _isatty(int file)
{
 8000612:	b480      	push	{r7}
 8000614:	b083      	sub	sp, #12
 8000616:	af00      	add	r7, sp, #0
 8000618:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800061a:	2301      	movs	r3, #1
}
 800061c:	4618      	mov	r0, r3
 800061e:	370c      	adds	r7, #12
 8000620:	46bd      	mov	sp, r7
 8000622:	bc80      	pop	{r7}
 8000624:	4770      	bx	lr

08000626 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000626:	b480      	push	{r7}
 8000628:	b085      	sub	sp, #20
 800062a:	af00      	add	r7, sp, #0
 800062c:	60f8      	str	r0, [r7, #12]
 800062e:	60b9      	str	r1, [r7, #8]
 8000630:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000632:	2300      	movs	r3, #0
}
 8000634:	4618      	mov	r0, r3
 8000636:	3714      	adds	r7, #20
 8000638:	46bd      	mov	sp, r7
 800063a:	bc80      	pop	{r7}
 800063c:	4770      	bx	lr
	...

08000640 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b086      	sub	sp, #24
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000648:	4a14      	ldr	r2, [pc, #80]	@ (800069c <_sbrk+0x5c>)
 800064a:	4b15      	ldr	r3, [pc, #84]	@ (80006a0 <_sbrk+0x60>)
 800064c:	1ad3      	subs	r3, r2, r3
 800064e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000650:	697b      	ldr	r3, [r7, #20]
 8000652:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000654:	4b13      	ldr	r3, [pc, #76]	@ (80006a4 <_sbrk+0x64>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	2b00      	cmp	r3, #0
 800065a:	d102      	bne.n	8000662 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800065c:	4b11      	ldr	r3, [pc, #68]	@ (80006a4 <_sbrk+0x64>)
 800065e:	4a12      	ldr	r2, [pc, #72]	@ (80006a8 <_sbrk+0x68>)
 8000660:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000662:	4b10      	ldr	r3, [pc, #64]	@ (80006a4 <_sbrk+0x64>)
 8000664:	681a      	ldr	r2, [r3, #0]
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	4413      	add	r3, r2
 800066a:	693a      	ldr	r2, [r7, #16]
 800066c:	429a      	cmp	r2, r3
 800066e:	d207      	bcs.n	8000680 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000670:	f002 fe76 	bl	8003360 <__errno>
 8000674:	4603      	mov	r3, r0
 8000676:	220c      	movs	r2, #12
 8000678:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800067a:	f04f 33ff 	mov.w	r3, #4294967295
 800067e:	e009      	b.n	8000694 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000680:	4b08      	ldr	r3, [pc, #32]	@ (80006a4 <_sbrk+0x64>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000686:	4b07      	ldr	r3, [pc, #28]	@ (80006a4 <_sbrk+0x64>)
 8000688:	681a      	ldr	r2, [r3, #0]
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	4413      	add	r3, r2
 800068e:	4a05      	ldr	r2, [pc, #20]	@ (80006a4 <_sbrk+0x64>)
 8000690:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000692:	68fb      	ldr	r3, [r7, #12]
}
 8000694:	4618      	mov	r0, r3
 8000696:	3718      	adds	r7, #24
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}
 800069c:	20005000 	.word	0x20005000
 80006a0:	00000400 	.word	0x00000400
 80006a4:	2000008c 	.word	0x2000008c
 80006a8:	200002b0 	.word	0x200002b0

080006ac <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80006ac:	b480      	push	{r7}
 80006ae:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006b0:	bf00      	nop
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bc80      	pop	{r7}
 80006b6:	4770      	bx	lr

080006b8 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80006bc:	4b11      	ldr	r3, [pc, #68]	@ (8000704 <MX_USART1_UART_Init+0x4c>)
 80006be:	4a12      	ldr	r2, [pc, #72]	@ (8000708 <MX_USART1_UART_Init+0x50>)
 80006c0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80006c2:	4b10      	ldr	r3, [pc, #64]	@ (8000704 <MX_USART1_UART_Init+0x4c>)
 80006c4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80006c8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006ca:	4b0e      	ldr	r3, [pc, #56]	@ (8000704 <MX_USART1_UART_Init+0x4c>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80006d0:	4b0c      	ldr	r3, [pc, #48]	@ (8000704 <MX_USART1_UART_Init+0x4c>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80006d6:	4b0b      	ldr	r3, [pc, #44]	@ (8000704 <MX_USART1_UART_Init+0x4c>)
 80006d8:	2200      	movs	r2, #0
 80006da:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80006dc:	4b09      	ldr	r3, [pc, #36]	@ (8000704 <MX_USART1_UART_Init+0x4c>)
 80006de:	220c      	movs	r2, #12
 80006e0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006e2:	4b08      	ldr	r3, [pc, #32]	@ (8000704 <MX_USART1_UART_Init+0x4c>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80006e8:	4b06      	ldr	r3, [pc, #24]	@ (8000704 <MX_USART1_UART_Init+0x4c>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80006ee:	4805      	ldr	r0, [pc, #20]	@ (8000704 <MX_USART1_UART_Init+0x4c>)
 80006f0:	f001 fac4 	bl	8001c7c <HAL_UART_Init>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80006fa:	f7ff fe4e 	bl	800039a <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80006fe:	bf00      	nop
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	20000090 	.word	0x20000090
 8000708:	40013800 	.word	0x40013800

0800070c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b088      	sub	sp, #32
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000714:	f107 0310 	add.w	r3, r7, #16
 8000718:	2200      	movs	r2, #0
 800071a:	601a      	str	r2, [r3, #0]
 800071c:	605a      	str	r2, [r3, #4]
 800071e:	609a      	str	r2, [r3, #8]
 8000720:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	4a47      	ldr	r2, [pc, #284]	@ (8000844 <HAL_UART_MspInit+0x138>)
 8000728:	4293      	cmp	r3, r2
 800072a:	f040 8086 	bne.w	800083a <HAL_UART_MspInit+0x12e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800072e:	4b46      	ldr	r3, [pc, #280]	@ (8000848 <HAL_UART_MspInit+0x13c>)
 8000730:	699b      	ldr	r3, [r3, #24]
 8000732:	4a45      	ldr	r2, [pc, #276]	@ (8000848 <HAL_UART_MspInit+0x13c>)
 8000734:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000738:	6193      	str	r3, [r2, #24]
 800073a:	4b43      	ldr	r3, [pc, #268]	@ (8000848 <HAL_UART_MspInit+0x13c>)
 800073c:	699b      	ldr	r3, [r3, #24]
 800073e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000742:	60fb      	str	r3, [r7, #12]
 8000744:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000746:	4b40      	ldr	r3, [pc, #256]	@ (8000848 <HAL_UART_MspInit+0x13c>)
 8000748:	699b      	ldr	r3, [r3, #24]
 800074a:	4a3f      	ldr	r2, [pc, #252]	@ (8000848 <HAL_UART_MspInit+0x13c>)
 800074c:	f043 0304 	orr.w	r3, r3, #4
 8000750:	6193      	str	r3, [r2, #24]
 8000752:	4b3d      	ldr	r3, [pc, #244]	@ (8000848 <HAL_UART_MspInit+0x13c>)
 8000754:	699b      	ldr	r3, [r3, #24]
 8000756:	f003 0304 	and.w	r3, r3, #4
 800075a:	60bb      	str	r3, [r7, #8]
 800075c:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800075e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000762:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000764:	2302      	movs	r3, #2
 8000766:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000768:	2303      	movs	r3, #3
 800076a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800076c:	f107 0310 	add.w	r3, r7, #16
 8000770:	4619      	mov	r1, r3
 8000772:	4836      	ldr	r0, [pc, #216]	@ (800084c <HAL_UART_MspInit+0x140>)
 8000774:	f000 fcbe 	bl	80010f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000778:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800077c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800077e:	2300      	movs	r3, #0
 8000780:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000782:	2300      	movs	r3, #0
 8000784:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000786:	f107 0310 	add.w	r3, r7, #16
 800078a:	4619      	mov	r1, r3
 800078c:	482f      	ldr	r0, [pc, #188]	@ (800084c <HAL_UART_MspInit+0x140>)
 800078e:	f000 fcb1 	bl	80010f4 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8000792:	4b2f      	ldr	r3, [pc, #188]	@ (8000850 <HAL_UART_MspInit+0x144>)
 8000794:	4a2f      	ldr	r2, [pc, #188]	@ (8000854 <HAL_UART_MspInit+0x148>)
 8000796:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000798:	4b2d      	ldr	r3, [pc, #180]	@ (8000850 <HAL_UART_MspInit+0x144>)
 800079a:	2210      	movs	r2, #16
 800079c:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800079e:	4b2c      	ldr	r3, [pc, #176]	@ (8000850 <HAL_UART_MspInit+0x144>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80007a4:	4b2a      	ldr	r3, [pc, #168]	@ (8000850 <HAL_UART_MspInit+0x144>)
 80007a6:	2280      	movs	r2, #128	@ 0x80
 80007a8:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80007aa:	4b29      	ldr	r3, [pc, #164]	@ (8000850 <HAL_UART_MspInit+0x144>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80007b0:	4b27      	ldr	r3, [pc, #156]	@ (8000850 <HAL_UART_MspInit+0x144>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80007b6:	4b26      	ldr	r3, [pc, #152]	@ (8000850 <HAL_UART_MspInit+0x144>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80007bc:	4b24      	ldr	r3, [pc, #144]	@ (8000850 <HAL_UART_MspInit+0x144>)
 80007be:	2200      	movs	r2, #0
 80007c0:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80007c2:	4823      	ldr	r0, [pc, #140]	@ (8000850 <HAL_UART_MspInit+0x144>)
 80007c4:	f000 f9f4 	bl	8000bb0 <HAL_DMA_Init>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 80007ce:	f7ff fde4 	bl	800039a <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	4a1e      	ldr	r2, [pc, #120]	@ (8000850 <HAL_UART_MspInit+0x144>)
 80007d6:	639a      	str	r2, [r3, #56]	@ 0x38
 80007d8:	4a1d      	ldr	r2, [pc, #116]	@ (8000850 <HAL_UART_MspInit+0x144>)
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80007de:	4b1e      	ldr	r3, [pc, #120]	@ (8000858 <HAL_UART_MspInit+0x14c>)
 80007e0:	4a1e      	ldr	r2, [pc, #120]	@ (800085c <HAL_UART_MspInit+0x150>)
 80007e2:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80007e4:	4b1c      	ldr	r3, [pc, #112]	@ (8000858 <HAL_UART_MspInit+0x14c>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80007ea:	4b1b      	ldr	r3, [pc, #108]	@ (8000858 <HAL_UART_MspInit+0x14c>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80007f0:	4b19      	ldr	r3, [pc, #100]	@ (8000858 <HAL_UART_MspInit+0x14c>)
 80007f2:	2280      	movs	r2, #128	@ 0x80
 80007f4:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80007f6:	4b18      	ldr	r3, [pc, #96]	@ (8000858 <HAL_UART_MspInit+0x14c>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80007fc:	4b16      	ldr	r3, [pc, #88]	@ (8000858 <HAL_UART_MspInit+0x14c>)
 80007fe:	2200      	movs	r2, #0
 8000800:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8000802:	4b15      	ldr	r3, [pc, #84]	@ (8000858 <HAL_UART_MspInit+0x14c>)
 8000804:	2200      	movs	r2, #0
 8000806:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000808:	4b13      	ldr	r3, [pc, #76]	@ (8000858 <HAL_UART_MspInit+0x14c>)
 800080a:	2200      	movs	r2, #0
 800080c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800080e:	4812      	ldr	r0, [pc, #72]	@ (8000858 <HAL_UART_MspInit+0x14c>)
 8000810:	f000 f9ce 	bl	8000bb0 <HAL_DMA_Init>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d001      	beq.n	800081e <HAL_UART_MspInit+0x112>
    {
      Error_Handler();
 800081a:	f7ff fdbe 	bl	800039a <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	4a0d      	ldr	r2, [pc, #52]	@ (8000858 <HAL_UART_MspInit+0x14c>)
 8000822:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000824:	4a0c      	ldr	r2, [pc, #48]	@ (8000858 <HAL_UART_MspInit+0x14c>)
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800082a:	2200      	movs	r2, #0
 800082c:	2100      	movs	r1, #0
 800082e:	2025      	movs	r0, #37	@ 0x25
 8000830:	f000 f987 	bl	8000b42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000834:	2025      	movs	r0, #37	@ 0x25
 8000836:	f000 f9a0 	bl	8000b7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800083a:	bf00      	nop
 800083c:	3720      	adds	r7, #32
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	40013800 	.word	0x40013800
 8000848:	40021000 	.word	0x40021000
 800084c:	40010800 	.word	0x40010800
 8000850:	200000d8 	.word	0x200000d8
 8000854:	40020044 	.word	0x40020044
 8000858:	2000011c 	.word	0x2000011c
 800085c:	40020058 	.word	0x40020058

08000860 <__io_putchar>:
  }
}

/* USER CODE BEGIN 1 */
int __io_putchar(int ch)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b082      	sub	sp, #8
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000868:	1d39      	adds	r1, r7, #4
 800086a:	f04f 33ff 	mov.w	r3, #4294967295
 800086e:	2201      	movs	r2, #1
 8000870:	4803      	ldr	r0, [pc, #12]	@ (8000880 <__io_putchar+0x20>)
 8000872:	f001 fa53 	bl	8001d1c <HAL_UART_Transmit>
  return ch;
 8000876:	687b      	ldr	r3, [r7, #4]
}
 8000878:	4618      	mov	r0, r3
 800087a:	3708      	adds	r7, #8
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}
 8000880:	20000090 	.word	0x20000090

08000884 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000884:	f7ff ff12 	bl	80006ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000888:	480b      	ldr	r0, [pc, #44]	@ (80008b8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800088a:	490c      	ldr	r1, [pc, #48]	@ (80008bc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800088c:	4a0c      	ldr	r2, [pc, #48]	@ (80008c0 <LoopFillZerobss+0x16>)
  movs r3, #0
 800088e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000890:	e002      	b.n	8000898 <LoopCopyDataInit>

08000892 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000892:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000894:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000896:	3304      	adds	r3, #4

08000898 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000898:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800089a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800089c:	d3f9      	bcc.n	8000892 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800089e:	4a09      	ldr	r2, [pc, #36]	@ (80008c4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80008a0:	4c09      	ldr	r4, [pc, #36]	@ (80008c8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80008a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008a4:	e001      	b.n	80008aa <LoopFillZerobss>

080008a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008a8:	3204      	adds	r2, #4

080008aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008ac:	d3fb      	bcc.n	80008a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80008ae:	f002 fd5d 	bl	800336c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80008b2:	f7ff fd13 	bl	80002dc <main>
  bx lr
 80008b6:	4770      	bx	lr
  ldr r0, =_sdata
 80008b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008bc:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80008c0:	080038cc 	.word	0x080038cc
  ldr r2, =_sbss
 80008c4:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80008c8:	200002b0 	.word	0x200002b0

080008cc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008cc:	e7fe      	b.n	80008cc <ADC1_2_IRQHandler>
	...

080008d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008d4:	4b08      	ldr	r3, [pc, #32]	@ (80008f8 <HAL_Init+0x28>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	4a07      	ldr	r2, [pc, #28]	@ (80008f8 <HAL_Init+0x28>)
 80008da:	f043 0310 	orr.w	r3, r3, #16
 80008de:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008e0:	2003      	movs	r0, #3
 80008e2:	f000 f923 	bl	8000b2c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008e6:	200f      	movs	r0, #15
 80008e8:	f000 f808 	bl	80008fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008ec:	f7ff fd5c 	bl	80003a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008f0:	2300      	movs	r3, #0
}
 80008f2:	4618      	mov	r0, r3
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	40022000 	.word	0x40022000

080008fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b082      	sub	sp, #8
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000904:	4b12      	ldr	r3, [pc, #72]	@ (8000950 <HAL_InitTick+0x54>)
 8000906:	681a      	ldr	r2, [r3, #0]
 8000908:	4b12      	ldr	r3, [pc, #72]	@ (8000954 <HAL_InitTick+0x58>)
 800090a:	781b      	ldrb	r3, [r3, #0]
 800090c:	4619      	mov	r1, r3
 800090e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000912:	fbb3 f3f1 	udiv	r3, r3, r1
 8000916:	fbb2 f3f3 	udiv	r3, r2, r3
 800091a:	4618      	mov	r0, r3
 800091c:	f000 f93b 	bl	8000b96 <HAL_SYSTICK_Config>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d001      	beq.n	800092a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000926:	2301      	movs	r3, #1
 8000928:	e00e      	b.n	8000948 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	2b0f      	cmp	r3, #15
 800092e:	d80a      	bhi.n	8000946 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000930:	2200      	movs	r2, #0
 8000932:	6879      	ldr	r1, [r7, #4]
 8000934:	f04f 30ff 	mov.w	r0, #4294967295
 8000938:	f000 f903 	bl	8000b42 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800093c:	4a06      	ldr	r2, [pc, #24]	@ (8000958 <HAL_InitTick+0x5c>)
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000942:	2300      	movs	r3, #0
 8000944:	e000      	b.n	8000948 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000946:	2301      	movs	r3, #1
}
 8000948:	4618      	mov	r0, r3
 800094a:	3708      	adds	r7, #8
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}
 8000950:	20000000 	.word	0x20000000
 8000954:	20000008 	.word	0x20000008
 8000958:	20000004 	.word	0x20000004

0800095c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000960:	4b05      	ldr	r3, [pc, #20]	@ (8000978 <HAL_IncTick+0x1c>)
 8000962:	781b      	ldrb	r3, [r3, #0]
 8000964:	461a      	mov	r2, r3
 8000966:	4b05      	ldr	r3, [pc, #20]	@ (800097c <HAL_IncTick+0x20>)
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	4413      	add	r3, r2
 800096c:	4a03      	ldr	r2, [pc, #12]	@ (800097c <HAL_IncTick+0x20>)
 800096e:	6013      	str	r3, [r2, #0]
}
 8000970:	bf00      	nop
 8000972:	46bd      	mov	sp, r7
 8000974:	bc80      	pop	{r7}
 8000976:	4770      	bx	lr
 8000978:	20000008 	.word	0x20000008
 800097c:	20000160 	.word	0x20000160

08000980 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0
  return uwTick;
 8000984:	4b02      	ldr	r3, [pc, #8]	@ (8000990 <HAL_GetTick+0x10>)
 8000986:	681b      	ldr	r3, [r3, #0]
}
 8000988:	4618      	mov	r0, r3
 800098a:	46bd      	mov	sp, r7
 800098c:	bc80      	pop	{r7}
 800098e:	4770      	bx	lr
 8000990:	20000160 	.word	0x20000160

08000994 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000994:	b480      	push	{r7}
 8000996:	b085      	sub	sp, #20
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	f003 0307 	and.w	r3, r3, #7
 80009a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009a4:	4b0c      	ldr	r3, [pc, #48]	@ (80009d8 <__NVIC_SetPriorityGrouping+0x44>)
 80009a6:	68db      	ldr	r3, [r3, #12]
 80009a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009aa:	68ba      	ldr	r2, [r7, #8]
 80009ac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80009b0:	4013      	ands	r3, r2
 80009b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009b8:	68bb      	ldr	r3, [r7, #8]
 80009ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009bc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80009c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80009c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009c6:	4a04      	ldr	r2, [pc, #16]	@ (80009d8 <__NVIC_SetPriorityGrouping+0x44>)
 80009c8:	68bb      	ldr	r3, [r7, #8]
 80009ca:	60d3      	str	r3, [r2, #12]
}
 80009cc:	bf00      	nop
 80009ce:	3714      	adds	r7, #20
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bc80      	pop	{r7}
 80009d4:	4770      	bx	lr
 80009d6:	bf00      	nop
 80009d8:	e000ed00 	.word	0xe000ed00

080009dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009e0:	4b04      	ldr	r3, [pc, #16]	@ (80009f4 <__NVIC_GetPriorityGrouping+0x18>)
 80009e2:	68db      	ldr	r3, [r3, #12]
 80009e4:	0a1b      	lsrs	r3, r3, #8
 80009e6:	f003 0307 	and.w	r3, r3, #7
}
 80009ea:	4618      	mov	r0, r3
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bc80      	pop	{r7}
 80009f0:	4770      	bx	lr
 80009f2:	bf00      	nop
 80009f4:	e000ed00 	.word	0xe000ed00

080009f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009f8:	b480      	push	{r7}
 80009fa:	b083      	sub	sp, #12
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	4603      	mov	r3, r0
 8000a00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	db0b      	blt.n	8000a22 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a0a:	79fb      	ldrb	r3, [r7, #7]
 8000a0c:	f003 021f 	and.w	r2, r3, #31
 8000a10:	4906      	ldr	r1, [pc, #24]	@ (8000a2c <__NVIC_EnableIRQ+0x34>)
 8000a12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a16:	095b      	lsrs	r3, r3, #5
 8000a18:	2001      	movs	r0, #1
 8000a1a:	fa00 f202 	lsl.w	r2, r0, r2
 8000a1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a22:	bf00      	nop
 8000a24:	370c      	adds	r7, #12
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bc80      	pop	{r7}
 8000a2a:	4770      	bx	lr
 8000a2c:	e000e100 	.word	0xe000e100

08000a30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a30:	b480      	push	{r7}
 8000a32:	b083      	sub	sp, #12
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	4603      	mov	r3, r0
 8000a38:	6039      	str	r1, [r7, #0]
 8000a3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	db0a      	blt.n	8000a5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a44:	683b      	ldr	r3, [r7, #0]
 8000a46:	b2da      	uxtb	r2, r3
 8000a48:	490c      	ldr	r1, [pc, #48]	@ (8000a7c <__NVIC_SetPriority+0x4c>)
 8000a4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a4e:	0112      	lsls	r2, r2, #4
 8000a50:	b2d2      	uxtb	r2, r2
 8000a52:	440b      	add	r3, r1
 8000a54:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a58:	e00a      	b.n	8000a70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a5a:	683b      	ldr	r3, [r7, #0]
 8000a5c:	b2da      	uxtb	r2, r3
 8000a5e:	4908      	ldr	r1, [pc, #32]	@ (8000a80 <__NVIC_SetPriority+0x50>)
 8000a60:	79fb      	ldrb	r3, [r7, #7]
 8000a62:	f003 030f 	and.w	r3, r3, #15
 8000a66:	3b04      	subs	r3, #4
 8000a68:	0112      	lsls	r2, r2, #4
 8000a6a:	b2d2      	uxtb	r2, r2
 8000a6c:	440b      	add	r3, r1
 8000a6e:	761a      	strb	r2, [r3, #24]
}
 8000a70:	bf00      	nop
 8000a72:	370c      	adds	r7, #12
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bc80      	pop	{r7}
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop
 8000a7c:	e000e100 	.word	0xe000e100
 8000a80:	e000ed00 	.word	0xe000ed00

08000a84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a84:	b480      	push	{r7}
 8000a86:	b089      	sub	sp, #36	@ 0x24
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	60f8      	str	r0, [r7, #12]
 8000a8c:	60b9      	str	r1, [r7, #8]
 8000a8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a90:	68fb      	ldr	r3, [r7, #12]
 8000a92:	f003 0307 	and.w	r3, r3, #7
 8000a96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a98:	69fb      	ldr	r3, [r7, #28]
 8000a9a:	f1c3 0307 	rsb	r3, r3, #7
 8000a9e:	2b04      	cmp	r3, #4
 8000aa0:	bf28      	it	cs
 8000aa2:	2304      	movcs	r3, #4
 8000aa4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000aa6:	69fb      	ldr	r3, [r7, #28]
 8000aa8:	3304      	adds	r3, #4
 8000aaa:	2b06      	cmp	r3, #6
 8000aac:	d902      	bls.n	8000ab4 <NVIC_EncodePriority+0x30>
 8000aae:	69fb      	ldr	r3, [r7, #28]
 8000ab0:	3b03      	subs	r3, #3
 8000ab2:	e000      	b.n	8000ab6 <NVIC_EncodePriority+0x32>
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ab8:	f04f 32ff 	mov.w	r2, #4294967295
 8000abc:	69bb      	ldr	r3, [r7, #24]
 8000abe:	fa02 f303 	lsl.w	r3, r2, r3
 8000ac2:	43da      	mvns	r2, r3
 8000ac4:	68bb      	ldr	r3, [r7, #8]
 8000ac6:	401a      	ands	r2, r3
 8000ac8:	697b      	ldr	r3, [r7, #20]
 8000aca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000acc:	f04f 31ff 	mov.w	r1, #4294967295
 8000ad0:	697b      	ldr	r3, [r7, #20]
 8000ad2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ad6:	43d9      	mvns	r1, r3
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000adc:	4313      	orrs	r3, r2
         );
}
 8000ade:	4618      	mov	r0, r3
 8000ae0:	3724      	adds	r7, #36	@ 0x24
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bc80      	pop	{r7}
 8000ae6:	4770      	bx	lr

08000ae8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b082      	sub	sp, #8
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	3b01      	subs	r3, #1
 8000af4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000af8:	d301      	bcc.n	8000afe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000afa:	2301      	movs	r3, #1
 8000afc:	e00f      	b.n	8000b1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000afe:	4a0a      	ldr	r2, [pc, #40]	@ (8000b28 <SysTick_Config+0x40>)
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	3b01      	subs	r3, #1
 8000b04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b06:	210f      	movs	r1, #15
 8000b08:	f04f 30ff 	mov.w	r0, #4294967295
 8000b0c:	f7ff ff90 	bl	8000a30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b10:	4b05      	ldr	r3, [pc, #20]	@ (8000b28 <SysTick_Config+0x40>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b16:	4b04      	ldr	r3, [pc, #16]	@ (8000b28 <SysTick_Config+0x40>)
 8000b18:	2207      	movs	r2, #7
 8000b1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b1c:	2300      	movs	r3, #0
}
 8000b1e:	4618      	mov	r0, r3
 8000b20:	3708      	adds	r7, #8
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	e000e010 	.word	0xe000e010

08000b2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b082      	sub	sp, #8
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b34:	6878      	ldr	r0, [r7, #4]
 8000b36:	f7ff ff2d 	bl	8000994 <__NVIC_SetPriorityGrouping>
}
 8000b3a:	bf00      	nop
 8000b3c:	3708      	adds	r7, #8
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}

08000b42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b42:	b580      	push	{r7, lr}
 8000b44:	b086      	sub	sp, #24
 8000b46:	af00      	add	r7, sp, #0
 8000b48:	4603      	mov	r3, r0
 8000b4a:	60b9      	str	r1, [r7, #8]
 8000b4c:	607a      	str	r2, [r7, #4]
 8000b4e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b50:	2300      	movs	r3, #0
 8000b52:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b54:	f7ff ff42 	bl	80009dc <__NVIC_GetPriorityGrouping>
 8000b58:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b5a:	687a      	ldr	r2, [r7, #4]
 8000b5c:	68b9      	ldr	r1, [r7, #8]
 8000b5e:	6978      	ldr	r0, [r7, #20]
 8000b60:	f7ff ff90 	bl	8000a84 <NVIC_EncodePriority>
 8000b64:	4602      	mov	r2, r0
 8000b66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b6a:	4611      	mov	r1, r2
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	f7ff ff5f 	bl	8000a30 <__NVIC_SetPriority>
}
 8000b72:	bf00      	nop
 8000b74:	3718      	adds	r7, #24
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}

08000b7a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b7a:	b580      	push	{r7, lr}
 8000b7c:	b082      	sub	sp, #8
 8000b7e:	af00      	add	r7, sp, #0
 8000b80:	4603      	mov	r3, r0
 8000b82:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f7ff ff35 	bl	80009f8 <__NVIC_EnableIRQ>
}
 8000b8e:	bf00      	nop
 8000b90:	3708      	adds	r7, #8
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}

08000b96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b96:	b580      	push	{r7, lr}
 8000b98:	b082      	sub	sp, #8
 8000b9a:	af00      	add	r7, sp, #0
 8000b9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b9e:	6878      	ldr	r0, [r7, #4]
 8000ba0:	f7ff ffa2 	bl	8000ae8 <SysTick_Config>
 8000ba4:	4603      	mov	r3, r0
}
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	3708      	adds	r7, #8
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}
	...

08000bb0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	b085      	sub	sp, #20
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d101      	bne.n	8000bc6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000bc2:	2301      	movs	r3, #1
 8000bc4:	e043      	b.n	8000c4e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	461a      	mov	r2, r3
 8000bcc:	4b22      	ldr	r3, [pc, #136]	@ (8000c58 <HAL_DMA_Init+0xa8>)
 8000bce:	4413      	add	r3, r2
 8000bd0:	4a22      	ldr	r2, [pc, #136]	@ (8000c5c <HAL_DMA_Init+0xac>)
 8000bd2:	fba2 2303 	umull	r2, r3, r2, r3
 8000bd6:	091b      	lsrs	r3, r3, #4
 8000bd8:	009a      	lsls	r2, r3, #2
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	4a1f      	ldr	r2, [pc, #124]	@ (8000c60 <HAL_DMA_Init+0xb0>)
 8000be2:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	2202      	movs	r2, #2
 8000be8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8000bfa:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8000bfe:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000c08:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	68db      	ldr	r3, [r3, #12]
 8000c0e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000c14:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	695b      	ldr	r3, [r3, #20]
 8000c1a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000c20:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	69db      	ldr	r3, [r3, #28]
 8000c26:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000c28:	68fa      	ldr	r2, [r7, #12]
 8000c2a:	4313      	orrs	r3, r2
 8000c2c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	68fa      	ldr	r2, [r7, #12]
 8000c34:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	2200      	movs	r2, #0
 8000c3a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	2201      	movs	r2, #1
 8000c40:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	2200      	movs	r2, #0
 8000c48:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000c4c:	2300      	movs	r3, #0
}
 8000c4e:	4618      	mov	r0, r3
 8000c50:	3714      	adds	r7, #20
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bc80      	pop	{r7}
 8000c56:	4770      	bx	lr
 8000c58:	bffdfff8 	.word	0xbffdfff8
 8000c5c:	cccccccd 	.word	0xcccccccd
 8000c60:	40020000 	.word	0x40020000

08000c64 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b086      	sub	sp, #24
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	60f8      	str	r0, [r7, #12]
 8000c6c:	60b9      	str	r1, [r7, #8]
 8000c6e:	607a      	str	r2, [r7, #4]
 8000c70:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000c72:	2300      	movs	r3, #0
 8000c74:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000c76:	68fb      	ldr	r3, [r7, #12]
 8000c78:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000c7c:	2b01      	cmp	r3, #1
 8000c7e:	d101      	bne.n	8000c84 <HAL_DMA_Start_IT+0x20>
 8000c80:	2302      	movs	r3, #2
 8000c82:	e04b      	b.n	8000d1c <HAL_DMA_Start_IT+0xb8>
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	2201      	movs	r2, #1
 8000c88:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000c92:	b2db      	uxtb	r3, r3
 8000c94:	2b01      	cmp	r3, #1
 8000c96:	d13a      	bne.n	8000d0e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	2202      	movs	r2, #2
 8000c9c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	681a      	ldr	r2, [r3, #0]
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	f022 0201 	bic.w	r2, r2, #1
 8000cb4:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	687a      	ldr	r2, [r7, #4]
 8000cba:	68b9      	ldr	r1, [r7, #8]
 8000cbc:	68f8      	ldr	r0, [r7, #12]
 8000cbe:	f000 f9eb 	bl	8001098 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8000cc2:	68fb      	ldr	r3, [r7, #12]
 8000cc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d008      	beq.n	8000cdc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000cca:	68fb      	ldr	r3, [r7, #12]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	681a      	ldr	r2, [r3, #0]
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	f042 020e 	orr.w	r2, r2, #14
 8000cd8:	601a      	str	r2, [r3, #0]
 8000cda:	e00f      	b.n	8000cfc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	681a      	ldr	r2, [r3, #0]
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	f022 0204 	bic.w	r2, r2, #4
 8000cea:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	681a      	ldr	r2, [r3, #0]
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	f042 020a 	orr.w	r2, r2, #10
 8000cfa:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	681a      	ldr	r2, [r3, #0]
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	f042 0201 	orr.w	r2, r2, #1
 8000d0a:	601a      	str	r2, [r3, #0]
 8000d0c:	e005      	b.n	8000d1a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	2200      	movs	r2, #0
 8000d12:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8000d16:	2302      	movs	r3, #2
 8000d18:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8000d1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	3718      	adds	r7, #24
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}

08000d24 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000d24:	b480      	push	{r7}
 8000d26:	b085      	sub	sp, #20
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000d36:	b2db      	uxtb	r3, r3
 8000d38:	2b02      	cmp	r3, #2
 8000d3a:	d008      	beq.n	8000d4e <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	2204      	movs	r2, #4
 8000d40:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	2200      	movs	r2, #0
 8000d46:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	e020      	b.n	8000d90 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	681a      	ldr	r2, [r3, #0]
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	f022 020e 	bic.w	r2, r2, #14
 8000d5c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	681a      	ldr	r2, [r3, #0]
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	f022 0201 	bic.w	r2, r2, #1
 8000d6c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000d76:	2101      	movs	r1, #1
 8000d78:	fa01 f202 	lsl.w	r2, r1, r2
 8000d7c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	2201      	movs	r2, #1
 8000d82:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	2200      	movs	r2, #0
 8000d8a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000d8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d90:	4618      	mov	r0, r3
 8000d92:	3714      	adds	r7, #20
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bc80      	pop	{r7}
 8000d98:	4770      	bx	lr
	...

08000d9c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b084      	sub	sp, #16
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000da4:	2300      	movs	r3, #0
 8000da6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000dae:	b2db      	uxtb	r3, r3
 8000db0:	2b02      	cmp	r3, #2
 8000db2:	d005      	beq.n	8000dc0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	2204      	movs	r2, #4
 8000db8:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8000dba:	2301      	movs	r3, #1
 8000dbc:	73fb      	strb	r3, [r7, #15]
 8000dbe:	e051      	b.n	8000e64 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	681a      	ldr	r2, [r3, #0]
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	f022 020e 	bic.w	r2, r2, #14
 8000dce:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	681a      	ldr	r2, [r3, #0]
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	f022 0201 	bic.w	r2, r2, #1
 8000dde:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4a22      	ldr	r2, [pc, #136]	@ (8000e70 <HAL_DMA_Abort_IT+0xd4>)
 8000de6:	4293      	cmp	r3, r2
 8000de8:	d029      	beq.n	8000e3e <HAL_DMA_Abort_IT+0xa2>
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	4a21      	ldr	r2, [pc, #132]	@ (8000e74 <HAL_DMA_Abort_IT+0xd8>)
 8000df0:	4293      	cmp	r3, r2
 8000df2:	d022      	beq.n	8000e3a <HAL_DMA_Abort_IT+0x9e>
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	4a1f      	ldr	r2, [pc, #124]	@ (8000e78 <HAL_DMA_Abort_IT+0xdc>)
 8000dfa:	4293      	cmp	r3, r2
 8000dfc:	d01a      	beq.n	8000e34 <HAL_DMA_Abort_IT+0x98>
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	4a1e      	ldr	r2, [pc, #120]	@ (8000e7c <HAL_DMA_Abort_IT+0xe0>)
 8000e04:	4293      	cmp	r3, r2
 8000e06:	d012      	beq.n	8000e2e <HAL_DMA_Abort_IT+0x92>
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	4a1c      	ldr	r2, [pc, #112]	@ (8000e80 <HAL_DMA_Abort_IT+0xe4>)
 8000e0e:	4293      	cmp	r3, r2
 8000e10:	d00a      	beq.n	8000e28 <HAL_DMA_Abort_IT+0x8c>
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	4a1b      	ldr	r2, [pc, #108]	@ (8000e84 <HAL_DMA_Abort_IT+0xe8>)
 8000e18:	4293      	cmp	r3, r2
 8000e1a:	d102      	bne.n	8000e22 <HAL_DMA_Abort_IT+0x86>
 8000e1c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000e20:	e00e      	b.n	8000e40 <HAL_DMA_Abort_IT+0xa4>
 8000e22:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000e26:	e00b      	b.n	8000e40 <HAL_DMA_Abort_IT+0xa4>
 8000e28:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000e2c:	e008      	b.n	8000e40 <HAL_DMA_Abort_IT+0xa4>
 8000e2e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e32:	e005      	b.n	8000e40 <HAL_DMA_Abort_IT+0xa4>
 8000e34:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000e38:	e002      	b.n	8000e40 <HAL_DMA_Abort_IT+0xa4>
 8000e3a:	2310      	movs	r3, #16
 8000e3c:	e000      	b.n	8000e40 <HAL_DMA_Abort_IT+0xa4>
 8000e3e:	2301      	movs	r3, #1
 8000e40:	4a11      	ldr	r2, [pc, #68]	@ (8000e88 <HAL_DMA_Abort_IT+0xec>)
 8000e42:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	2201      	movs	r2, #1
 8000e48:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	2200      	movs	r2, #0
 8000e50:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d003      	beq.n	8000e64 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000e60:	6878      	ldr	r0, [r7, #4]
 8000e62:	4798      	blx	r3
    } 
  }
  return status;
 8000e64:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e66:	4618      	mov	r0, r3
 8000e68:	3710      	adds	r7, #16
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	40020008 	.word	0x40020008
 8000e74:	4002001c 	.word	0x4002001c
 8000e78:	40020030 	.word	0x40020030
 8000e7c:	40020044 	.word	0x40020044
 8000e80:	40020058 	.word	0x40020058
 8000e84:	4002006c 	.word	0x4002006c
 8000e88:	40020000 	.word	0x40020000

08000e8c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b084      	sub	sp, #16
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ea8:	2204      	movs	r2, #4
 8000eaa:	409a      	lsls	r2, r3
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	4013      	ands	r3, r2
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d04f      	beq.n	8000f54 <HAL_DMA_IRQHandler+0xc8>
 8000eb4:	68bb      	ldr	r3, [r7, #8]
 8000eb6:	f003 0304 	and.w	r3, r3, #4
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d04a      	beq.n	8000f54 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	f003 0320 	and.w	r3, r3, #32
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d107      	bne.n	8000edc <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	681a      	ldr	r2, [r3, #0]
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	f022 0204 	bic.w	r2, r2, #4
 8000eda:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4a66      	ldr	r2, [pc, #408]	@ (800107c <HAL_DMA_IRQHandler+0x1f0>)
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d029      	beq.n	8000f3a <HAL_DMA_IRQHandler+0xae>
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	4a65      	ldr	r2, [pc, #404]	@ (8001080 <HAL_DMA_IRQHandler+0x1f4>)
 8000eec:	4293      	cmp	r3, r2
 8000eee:	d022      	beq.n	8000f36 <HAL_DMA_IRQHandler+0xaa>
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4a63      	ldr	r2, [pc, #396]	@ (8001084 <HAL_DMA_IRQHandler+0x1f8>)
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d01a      	beq.n	8000f30 <HAL_DMA_IRQHandler+0xa4>
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	4a62      	ldr	r2, [pc, #392]	@ (8001088 <HAL_DMA_IRQHandler+0x1fc>)
 8000f00:	4293      	cmp	r3, r2
 8000f02:	d012      	beq.n	8000f2a <HAL_DMA_IRQHandler+0x9e>
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4a60      	ldr	r2, [pc, #384]	@ (800108c <HAL_DMA_IRQHandler+0x200>)
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	d00a      	beq.n	8000f24 <HAL_DMA_IRQHandler+0x98>
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	4a5f      	ldr	r2, [pc, #380]	@ (8001090 <HAL_DMA_IRQHandler+0x204>)
 8000f14:	4293      	cmp	r3, r2
 8000f16:	d102      	bne.n	8000f1e <HAL_DMA_IRQHandler+0x92>
 8000f18:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000f1c:	e00e      	b.n	8000f3c <HAL_DMA_IRQHandler+0xb0>
 8000f1e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8000f22:	e00b      	b.n	8000f3c <HAL_DMA_IRQHandler+0xb0>
 8000f24:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8000f28:	e008      	b.n	8000f3c <HAL_DMA_IRQHandler+0xb0>
 8000f2a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000f2e:	e005      	b.n	8000f3c <HAL_DMA_IRQHandler+0xb0>
 8000f30:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000f34:	e002      	b.n	8000f3c <HAL_DMA_IRQHandler+0xb0>
 8000f36:	2340      	movs	r3, #64	@ 0x40
 8000f38:	e000      	b.n	8000f3c <HAL_DMA_IRQHandler+0xb0>
 8000f3a:	2304      	movs	r3, #4
 8000f3c:	4a55      	ldr	r2, [pc, #340]	@ (8001094 <HAL_DMA_IRQHandler+0x208>)
 8000f3e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	f000 8094 	beq.w	8001072 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f4e:	6878      	ldr	r0, [r7, #4]
 8000f50:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8000f52:	e08e      	b.n	8001072 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f58:	2202      	movs	r2, #2
 8000f5a:	409a      	lsls	r2, r3
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	4013      	ands	r3, r2
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d056      	beq.n	8001012 <HAL_DMA_IRQHandler+0x186>
 8000f64:	68bb      	ldr	r3, [r7, #8]
 8000f66:	f003 0302 	and.w	r3, r3, #2
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d051      	beq.n	8001012 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	f003 0320 	and.w	r3, r3, #32
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d10b      	bne.n	8000f94 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	681a      	ldr	r2, [r3, #0]
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	f022 020a 	bic.w	r2, r2, #10
 8000f8a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	2201      	movs	r2, #1
 8000f90:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4a38      	ldr	r2, [pc, #224]	@ (800107c <HAL_DMA_IRQHandler+0x1f0>)
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	d029      	beq.n	8000ff2 <HAL_DMA_IRQHandler+0x166>
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	4a37      	ldr	r2, [pc, #220]	@ (8001080 <HAL_DMA_IRQHandler+0x1f4>)
 8000fa4:	4293      	cmp	r3, r2
 8000fa6:	d022      	beq.n	8000fee <HAL_DMA_IRQHandler+0x162>
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	4a35      	ldr	r2, [pc, #212]	@ (8001084 <HAL_DMA_IRQHandler+0x1f8>)
 8000fae:	4293      	cmp	r3, r2
 8000fb0:	d01a      	beq.n	8000fe8 <HAL_DMA_IRQHandler+0x15c>
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	4a34      	ldr	r2, [pc, #208]	@ (8001088 <HAL_DMA_IRQHandler+0x1fc>)
 8000fb8:	4293      	cmp	r3, r2
 8000fba:	d012      	beq.n	8000fe2 <HAL_DMA_IRQHandler+0x156>
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4a32      	ldr	r2, [pc, #200]	@ (800108c <HAL_DMA_IRQHandler+0x200>)
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d00a      	beq.n	8000fdc <HAL_DMA_IRQHandler+0x150>
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	4a31      	ldr	r2, [pc, #196]	@ (8001090 <HAL_DMA_IRQHandler+0x204>)
 8000fcc:	4293      	cmp	r3, r2
 8000fce:	d102      	bne.n	8000fd6 <HAL_DMA_IRQHandler+0x14a>
 8000fd0:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8000fd4:	e00e      	b.n	8000ff4 <HAL_DMA_IRQHandler+0x168>
 8000fd6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000fda:	e00b      	b.n	8000ff4 <HAL_DMA_IRQHandler+0x168>
 8000fdc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000fe0:	e008      	b.n	8000ff4 <HAL_DMA_IRQHandler+0x168>
 8000fe2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000fe6:	e005      	b.n	8000ff4 <HAL_DMA_IRQHandler+0x168>
 8000fe8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000fec:	e002      	b.n	8000ff4 <HAL_DMA_IRQHandler+0x168>
 8000fee:	2320      	movs	r3, #32
 8000ff0:	e000      	b.n	8000ff4 <HAL_DMA_IRQHandler+0x168>
 8000ff2:	2302      	movs	r3, #2
 8000ff4:	4a27      	ldr	r2, [pc, #156]	@ (8001094 <HAL_DMA_IRQHandler+0x208>)
 8000ff6:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001004:	2b00      	cmp	r3, #0
 8001006:	d034      	beq.n	8001072 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800100c:	6878      	ldr	r0, [r7, #4]
 800100e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001010:	e02f      	b.n	8001072 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001016:	2208      	movs	r2, #8
 8001018:	409a      	lsls	r2, r3
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	4013      	ands	r3, r2
 800101e:	2b00      	cmp	r3, #0
 8001020:	d028      	beq.n	8001074 <HAL_DMA_IRQHandler+0x1e8>
 8001022:	68bb      	ldr	r3, [r7, #8]
 8001024:	f003 0308 	and.w	r3, r3, #8
 8001028:	2b00      	cmp	r3, #0
 800102a:	d023      	beq.n	8001074 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	681a      	ldr	r2, [r3, #0]
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	f022 020e 	bic.w	r2, r2, #14
 800103a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001044:	2101      	movs	r1, #1
 8001046:	fa01 f202 	lsl.w	r2, r1, r2
 800104a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	2201      	movs	r2, #1
 8001050:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	2201      	movs	r2, #1
 8001056:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	2200      	movs	r2, #0
 800105e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001066:	2b00      	cmp	r3, #0
 8001068:	d004      	beq.n	8001074 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800106e:	6878      	ldr	r0, [r7, #4]
 8001070:	4798      	blx	r3
    }
  }
  return;
 8001072:	bf00      	nop
 8001074:	bf00      	nop
}
 8001076:	3710      	adds	r7, #16
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}
 800107c:	40020008 	.word	0x40020008
 8001080:	4002001c 	.word	0x4002001c
 8001084:	40020030 	.word	0x40020030
 8001088:	40020044 	.word	0x40020044
 800108c:	40020058 	.word	0x40020058
 8001090:	4002006c 	.word	0x4002006c
 8001094:	40020000 	.word	0x40020000

08001098 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001098:	b480      	push	{r7}
 800109a:	b085      	sub	sp, #20
 800109c:	af00      	add	r7, sp, #0
 800109e:	60f8      	str	r0, [r7, #12]
 80010a0:	60b9      	str	r1, [r7, #8]
 80010a2:	607a      	str	r2, [r7, #4]
 80010a4:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80010ae:	2101      	movs	r1, #1
 80010b0:	fa01 f202 	lsl.w	r2, r1, r2
 80010b4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	683a      	ldr	r2, [r7, #0]
 80010bc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	685b      	ldr	r3, [r3, #4]
 80010c2:	2b10      	cmp	r3, #16
 80010c4:	d108      	bne.n	80010d8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	687a      	ldr	r2, [r7, #4]
 80010cc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	68ba      	ldr	r2, [r7, #8]
 80010d4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80010d6:	e007      	b.n	80010e8 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	68ba      	ldr	r2, [r7, #8]
 80010de:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	687a      	ldr	r2, [r7, #4]
 80010e6:	60da      	str	r2, [r3, #12]
}
 80010e8:	bf00      	nop
 80010ea:	3714      	adds	r7, #20
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bc80      	pop	{r7}
 80010f0:	4770      	bx	lr
	...

080010f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010f4:	b480      	push	{r7}
 80010f6:	b08b      	sub	sp, #44	@ 0x2c
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
 80010fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80010fe:	2300      	movs	r3, #0
 8001100:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001102:	2300      	movs	r3, #0
 8001104:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001106:	e169      	b.n	80013dc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001108:	2201      	movs	r2, #1
 800110a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800110c:	fa02 f303 	lsl.w	r3, r2, r3
 8001110:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	69fa      	ldr	r2, [r7, #28]
 8001118:	4013      	ands	r3, r2
 800111a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800111c:	69ba      	ldr	r2, [r7, #24]
 800111e:	69fb      	ldr	r3, [r7, #28]
 8001120:	429a      	cmp	r2, r3
 8001122:	f040 8158 	bne.w	80013d6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	4a9a      	ldr	r2, [pc, #616]	@ (8001394 <HAL_GPIO_Init+0x2a0>)
 800112c:	4293      	cmp	r3, r2
 800112e:	d05e      	beq.n	80011ee <HAL_GPIO_Init+0xfa>
 8001130:	4a98      	ldr	r2, [pc, #608]	@ (8001394 <HAL_GPIO_Init+0x2a0>)
 8001132:	4293      	cmp	r3, r2
 8001134:	d875      	bhi.n	8001222 <HAL_GPIO_Init+0x12e>
 8001136:	4a98      	ldr	r2, [pc, #608]	@ (8001398 <HAL_GPIO_Init+0x2a4>)
 8001138:	4293      	cmp	r3, r2
 800113a:	d058      	beq.n	80011ee <HAL_GPIO_Init+0xfa>
 800113c:	4a96      	ldr	r2, [pc, #600]	@ (8001398 <HAL_GPIO_Init+0x2a4>)
 800113e:	4293      	cmp	r3, r2
 8001140:	d86f      	bhi.n	8001222 <HAL_GPIO_Init+0x12e>
 8001142:	4a96      	ldr	r2, [pc, #600]	@ (800139c <HAL_GPIO_Init+0x2a8>)
 8001144:	4293      	cmp	r3, r2
 8001146:	d052      	beq.n	80011ee <HAL_GPIO_Init+0xfa>
 8001148:	4a94      	ldr	r2, [pc, #592]	@ (800139c <HAL_GPIO_Init+0x2a8>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d869      	bhi.n	8001222 <HAL_GPIO_Init+0x12e>
 800114e:	4a94      	ldr	r2, [pc, #592]	@ (80013a0 <HAL_GPIO_Init+0x2ac>)
 8001150:	4293      	cmp	r3, r2
 8001152:	d04c      	beq.n	80011ee <HAL_GPIO_Init+0xfa>
 8001154:	4a92      	ldr	r2, [pc, #584]	@ (80013a0 <HAL_GPIO_Init+0x2ac>)
 8001156:	4293      	cmp	r3, r2
 8001158:	d863      	bhi.n	8001222 <HAL_GPIO_Init+0x12e>
 800115a:	4a92      	ldr	r2, [pc, #584]	@ (80013a4 <HAL_GPIO_Init+0x2b0>)
 800115c:	4293      	cmp	r3, r2
 800115e:	d046      	beq.n	80011ee <HAL_GPIO_Init+0xfa>
 8001160:	4a90      	ldr	r2, [pc, #576]	@ (80013a4 <HAL_GPIO_Init+0x2b0>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d85d      	bhi.n	8001222 <HAL_GPIO_Init+0x12e>
 8001166:	2b12      	cmp	r3, #18
 8001168:	d82a      	bhi.n	80011c0 <HAL_GPIO_Init+0xcc>
 800116a:	2b12      	cmp	r3, #18
 800116c:	d859      	bhi.n	8001222 <HAL_GPIO_Init+0x12e>
 800116e:	a201      	add	r2, pc, #4	@ (adr r2, 8001174 <HAL_GPIO_Init+0x80>)
 8001170:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001174:	080011ef 	.word	0x080011ef
 8001178:	080011c9 	.word	0x080011c9
 800117c:	080011db 	.word	0x080011db
 8001180:	0800121d 	.word	0x0800121d
 8001184:	08001223 	.word	0x08001223
 8001188:	08001223 	.word	0x08001223
 800118c:	08001223 	.word	0x08001223
 8001190:	08001223 	.word	0x08001223
 8001194:	08001223 	.word	0x08001223
 8001198:	08001223 	.word	0x08001223
 800119c:	08001223 	.word	0x08001223
 80011a0:	08001223 	.word	0x08001223
 80011a4:	08001223 	.word	0x08001223
 80011a8:	08001223 	.word	0x08001223
 80011ac:	08001223 	.word	0x08001223
 80011b0:	08001223 	.word	0x08001223
 80011b4:	08001223 	.word	0x08001223
 80011b8:	080011d1 	.word	0x080011d1
 80011bc:	080011e5 	.word	0x080011e5
 80011c0:	4a79      	ldr	r2, [pc, #484]	@ (80013a8 <HAL_GPIO_Init+0x2b4>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d013      	beq.n	80011ee <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80011c6:	e02c      	b.n	8001222 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	68db      	ldr	r3, [r3, #12]
 80011cc:	623b      	str	r3, [r7, #32]
          break;
 80011ce:	e029      	b.n	8001224 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	68db      	ldr	r3, [r3, #12]
 80011d4:	3304      	adds	r3, #4
 80011d6:	623b      	str	r3, [r7, #32]
          break;
 80011d8:	e024      	b.n	8001224 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	68db      	ldr	r3, [r3, #12]
 80011de:	3308      	adds	r3, #8
 80011e0:	623b      	str	r3, [r7, #32]
          break;
 80011e2:	e01f      	b.n	8001224 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	68db      	ldr	r3, [r3, #12]
 80011e8:	330c      	adds	r3, #12
 80011ea:	623b      	str	r3, [r7, #32]
          break;
 80011ec:	e01a      	b.n	8001224 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	689b      	ldr	r3, [r3, #8]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d102      	bne.n	80011fc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80011f6:	2304      	movs	r3, #4
 80011f8:	623b      	str	r3, [r7, #32]
          break;
 80011fa:	e013      	b.n	8001224 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	689b      	ldr	r3, [r3, #8]
 8001200:	2b01      	cmp	r3, #1
 8001202:	d105      	bne.n	8001210 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001204:	2308      	movs	r3, #8
 8001206:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	69fa      	ldr	r2, [r7, #28]
 800120c:	611a      	str	r2, [r3, #16]
          break;
 800120e:	e009      	b.n	8001224 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001210:	2308      	movs	r3, #8
 8001212:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	69fa      	ldr	r2, [r7, #28]
 8001218:	615a      	str	r2, [r3, #20]
          break;
 800121a:	e003      	b.n	8001224 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800121c:	2300      	movs	r3, #0
 800121e:	623b      	str	r3, [r7, #32]
          break;
 8001220:	e000      	b.n	8001224 <HAL_GPIO_Init+0x130>
          break;
 8001222:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001224:	69bb      	ldr	r3, [r7, #24]
 8001226:	2bff      	cmp	r3, #255	@ 0xff
 8001228:	d801      	bhi.n	800122e <HAL_GPIO_Init+0x13a>
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	e001      	b.n	8001232 <HAL_GPIO_Init+0x13e>
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	3304      	adds	r3, #4
 8001232:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001234:	69bb      	ldr	r3, [r7, #24]
 8001236:	2bff      	cmp	r3, #255	@ 0xff
 8001238:	d802      	bhi.n	8001240 <HAL_GPIO_Init+0x14c>
 800123a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800123c:	009b      	lsls	r3, r3, #2
 800123e:	e002      	b.n	8001246 <HAL_GPIO_Init+0x152>
 8001240:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001242:	3b08      	subs	r3, #8
 8001244:	009b      	lsls	r3, r3, #2
 8001246:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001248:	697b      	ldr	r3, [r7, #20]
 800124a:	681a      	ldr	r2, [r3, #0]
 800124c:	210f      	movs	r1, #15
 800124e:	693b      	ldr	r3, [r7, #16]
 8001250:	fa01 f303 	lsl.w	r3, r1, r3
 8001254:	43db      	mvns	r3, r3
 8001256:	401a      	ands	r2, r3
 8001258:	6a39      	ldr	r1, [r7, #32]
 800125a:	693b      	ldr	r3, [r7, #16]
 800125c:	fa01 f303 	lsl.w	r3, r1, r3
 8001260:	431a      	orrs	r2, r3
 8001262:	697b      	ldr	r3, [r7, #20]
 8001264:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800126e:	2b00      	cmp	r3, #0
 8001270:	f000 80b1 	beq.w	80013d6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001274:	4b4d      	ldr	r3, [pc, #308]	@ (80013ac <HAL_GPIO_Init+0x2b8>)
 8001276:	699b      	ldr	r3, [r3, #24]
 8001278:	4a4c      	ldr	r2, [pc, #304]	@ (80013ac <HAL_GPIO_Init+0x2b8>)
 800127a:	f043 0301 	orr.w	r3, r3, #1
 800127e:	6193      	str	r3, [r2, #24]
 8001280:	4b4a      	ldr	r3, [pc, #296]	@ (80013ac <HAL_GPIO_Init+0x2b8>)
 8001282:	699b      	ldr	r3, [r3, #24]
 8001284:	f003 0301 	and.w	r3, r3, #1
 8001288:	60bb      	str	r3, [r7, #8]
 800128a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800128c:	4a48      	ldr	r2, [pc, #288]	@ (80013b0 <HAL_GPIO_Init+0x2bc>)
 800128e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001290:	089b      	lsrs	r3, r3, #2
 8001292:	3302      	adds	r3, #2
 8001294:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001298:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800129a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800129c:	f003 0303 	and.w	r3, r3, #3
 80012a0:	009b      	lsls	r3, r3, #2
 80012a2:	220f      	movs	r2, #15
 80012a4:	fa02 f303 	lsl.w	r3, r2, r3
 80012a8:	43db      	mvns	r3, r3
 80012aa:	68fa      	ldr	r2, [r7, #12]
 80012ac:	4013      	ands	r3, r2
 80012ae:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	4a40      	ldr	r2, [pc, #256]	@ (80013b4 <HAL_GPIO_Init+0x2c0>)
 80012b4:	4293      	cmp	r3, r2
 80012b6:	d013      	beq.n	80012e0 <HAL_GPIO_Init+0x1ec>
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	4a3f      	ldr	r2, [pc, #252]	@ (80013b8 <HAL_GPIO_Init+0x2c4>)
 80012bc:	4293      	cmp	r3, r2
 80012be:	d00d      	beq.n	80012dc <HAL_GPIO_Init+0x1e8>
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	4a3e      	ldr	r2, [pc, #248]	@ (80013bc <HAL_GPIO_Init+0x2c8>)
 80012c4:	4293      	cmp	r3, r2
 80012c6:	d007      	beq.n	80012d8 <HAL_GPIO_Init+0x1e4>
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	4a3d      	ldr	r2, [pc, #244]	@ (80013c0 <HAL_GPIO_Init+0x2cc>)
 80012cc:	4293      	cmp	r3, r2
 80012ce:	d101      	bne.n	80012d4 <HAL_GPIO_Init+0x1e0>
 80012d0:	2303      	movs	r3, #3
 80012d2:	e006      	b.n	80012e2 <HAL_GPIO_Init+0x1ee>
 80012d4:	2304      	movs	r3, #4
 80012d6:	e004      	b.n	80012e2 <HAL_GPIO_Init+0x1ee>
 80012d8:	2302      	movs	r3, #2
 80012da:	e002      	b.n	80012e2 <HAL_GPIO_Init+0x1ee>
 80012dc:	2301      	movs	r3, #1
 80012de:	e000      	b.n	80012e2 <HAL_GPIO_Init+0x1ee>
 80012e0:	2300      	movs	r3, #0
 80012e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80012e4:	f002 0203 	and.w	r2, r2, #3
 80012e8:	0092      	lsls	r2, r2, #2
 80012ea:	4093      	lsls	r3, r2
 80012ec:	68fa      	ldr	r2, [r7, #12]
 80012ee:	4313      	orrs	r3, r2
 80012f0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80012f2:	492f      	ldr	r1, [pc, #188]	@ (80013b0 <HAL_GPIO_Init+0x2bc>)
 80012f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012f6:	089b      	lsrs	r3, r3, #2
 80012f8:	3302      	adds	r3, #2
 80012fa:	68fa      	ldr	r2, [r7, #12]
 80012fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001308:	2b00      	cmp	r3, #0
 800130a:	d006      	beq.n	800131a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800130c:	4b2d      	ldr	r3, [pc, #180]	@ (80013c4 <HAL_GPIO_Init+0x2d0>)
 800130e:	689a      	ldr	r2, [r3, #8]
 8001310:	492c      	ldr	r1, [pc, #176]	@ (80013c4 <HAL_GPIO_Init+0x2d0>)
 8001312:	69bb      	ldr	r3, [r7, #24]
 8001314:	4313      	orrs	r3, r2
 8001316:	608b      	str	r3, [r1, #8]
 8001318:	e006      	b.n	8001328 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800131a:	4b2a      	ldr	r3, [pc, #168]	@ (80013c4 <HAL_GPIO_Init+0x2d0>)
 800131c:	689a      	ldr	r2, [r3, #8]
 800131e:	69bb      	ldr	r3, [r7, #24]
 8001320:	43db      	mvns	r3, r3
 8001322:	4928      	ldr	r1, [pc, #160]	@ (80013c4 <HAL_GPIO_Init+0x2d0>)
 8001324:	4013      	ands	r3, r2
 8001326:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001330:	2b00      	cmp	r3, #0
 8001332:	d006      	beq.n	8001342 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001334:	4b23      	ldr	r3, [pc, #140]	@ (80013c4 <HAL_GPIO_Init+0x2d0>)
 8001336:	68da      	ldr	r2, [r3, #12]
 8001338:	4922      	ldr	r1, [pc, #136]	@ (80013c4 <HAL_GPIO_Init+0x2d0>)
 800133a:	69bb      	ldr	r3, [r7, #24]
 800133c:	4313      	orrs	r3, r2
 800133e:	60cb      	str	r3, [r1, #12]
 8001340:	e006      	b.n	8001350 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001342:	4b20      	ldr	r3, [pc, #128]	@ (80013c4 <HAL_GPIO_Init+0x2d0>)
 8001344:	68da      	ldr	r2, [r3, #12]
 8001346:	69bb      	ldr	r3, [r7, #24]
 8001348:	43db      	mvns	r3, r3
 800134a:	491e      	ldr	r1, [pc, #120]	@ (80013c4 <HAL_GPIO_Init+0x2d0>)
 800134c:	4013      	ands	r3, r2
 800134e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001358:	2b00      	cmp	r3, #0
 800135a:	d006      	beq.n	800136a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800135c:	4b19      	ldr	r3, [pc, #100]	@ (80013c4 <HAL_GPIO_Init+0x2d0>)
 800135e:	685a      	ldr	r2, [r3, #4]
 8001360:	4918      	ldr	r1, [pc, #96]	@ (80013c4 <HAL_GPIO_Init+0x2d0>)
 8001362:	69bb      	ldr	r3, [r7, #24]
 8001364:	4313      	orrs	r3, r2
 8001366:	604b      	str	r3, [r1, #4]
 8001368:	e006      	b.n	8001378 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800136a:	4b16      	ldr	r3, [pc, #88]	@ (80013c4 <HAL_GPIO_Init+0x2d0>)
 800136c:	685a      	ldr	r2, [r3, #4]
 800136e:	69bb      	ldr	r3, [r7, #24]
 8001370:	43db      	mvns	r3, r3
 8001372:	4914      	ldr	r1, [pc, #80]	@ (80013c4 <HAL_GPIO_Init+0x2d0>)
 8001374:	4013      	ands	r3, r2
 8001376:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001380:	2b00      	cmp	r3, #0
 8001382:	d021      	beq.n	80013c8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001384:	4b0f      	ldr	r3, [pc, #60]	@ (80013c4 <HAL_GPIO_Init+0x2d0>)
 8001386:	681a      	ldr	r2, [r3, #0]
 8001388:	490e      	ldr	r1, [pc, #56]	@ (80013c4 <HAL_GPIO_Init+0x2d0>)
 800138a:	69bb      	ldr	r3, [r7, #24]
 800138c:	4313      	orrs	r3, r2
 800138e:	600b      	str	r3, [r1, #0]
 8001390:	e021      	b.n	80013d6 <HAL_GPIO_Init+0x2e2>
 8001392:	bf00      	nop
 8001394:	10320000 	.word	0x10320000
 8001398:	10310000 	.word	0x10310000
 800139c:	10220000 	.word	0x10220000
 80013a0:	10210000 	.word	0x10210000
 80013a4:	10120000 	.word	0x10120000
 80013a8:	10110000 	.word	0x10110000
 80013ac:	40021000 	.word	0x40021000
 80013b0:	40010000 	.word	0x40010000
 80013b4:	40010800 	.word	0x40010800
 80013b8:	40010c00 	.word	0x40010c00
 80013bc:	40011000 	.word	0x40011000
 80013c0:	40011400 	.word	0x40011400
 80013c4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80013c8:	4b0b      	ldr	r3, [pc, #44]	@ (80013f8 <HAL_GPIO_Init+0x304>)
 80013ca:	681a      	ldr	r2, [r3, #0]
 80013cc:	69bb      	ldr	r3, [r7, #24]
 80013ce:	43db      	mvns	r3, r3
 80013d0:	4909      	ldr	r1, [pc, #36]	@ (80013f8 <HAL_GPIO_Init+0x304>)
 80013d2:	4013      	ands	r3, r2
 80013d4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80013d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013d8:	3301      	adds	r3, #1
 80013da:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	681a      	ldr	r2, [r3, #0]
 80013e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013e2:	fa22 f303 	lsr.w	r3, r2, r3
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	f47f ae8e 	bne.w	8001108 <HAL_GPIO_Init+0x14>
  }
}
 80013ec:	bf00      	nop
 80013ee:	bf00      	nop
 80013f0:	372c      	adds	r7, #44	@ 0x2c
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bc80      	pop	{r7}
 80013f6:	4770      	bx	lr
 80013f8:	40010400 	.word	0x40010400

080013fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b083      	sub	sp, #12
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
 8001404:	460b      	mov	r3, r1
 8001406:	807b      	strh	r3, [r7, #2]
 8001408:	4613      	mov	r3, r2
 800140a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800140c:	787b      	ldrb	r3, [r7, #1]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d003      	beq.n	800141a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001412:	887a      	ldrh	r2, [r7, #2]
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001418:	e003      	b.n	8001422 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800141a:	887b      	ldrh	r3, [r7, #2]
 800141c:	041a      	lsls	r2, r3, #16
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	611a      	str	r2, [r3, #16]
}
 8001422:	bf00      	nop
 8001424:	370c      	adds	r7, #12
 8001426:	46bd      	mov	sp, r7
 8001428:	bc80      	pop	{r7}
 800142a:	4770      	bx	lr

0800142c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b082      	sub	sp, #8
 8001430:	af00      	add	r7, sp, #0
 8001432:	4603      	mov	r3, r0
 8001434:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001436:	4b08      	ldr	r3, [pc, #32]	@ (8001458 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001438:	695a      	ldr	r2, [r3, #20]
 800143a:	88fb      	ldrh	r3, [r7, #6]
 800143c:	4013      	ands	r3, r2
 800143e:	2b00      	cmp	r3, #0
 8001440:	d006      	beq.n	8001450 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001442:	4a05      	ldr	r2, [pc, #20]	@ (8001458 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001444:	88fb      	ldrh	r3, [r7, #6]
 8001446:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001448:	88fb      	ldrh	r3, [r7, #6]
 800144a:	4618      	mov	r0, r3
 800144c:	f7ff f838 	bl	80004c0 <HAL_GPIO_EXTI_Callback>
  }
}
 8001450:	bf00      	nop
 8001452:	3708      	adds	r7, #8
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}
 8001458:	40010400 	.word	0x40010400

0800145c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b086      	sub	sp, #24
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d101      	bne.n	800146e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800146a:	2301      	movs	r3, #1
 800146c:	e272      	b.n	8001954 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f003 0301 	and.w	r3, r3, #1
 8001476:	2b00      	cmp	r3, #0
 8001478:	f000 8087 	beq.w	800158a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800147c:	4b92      	ldr	r3, [pc, #584]	@ (80016c8 <HAL_RCC_OscConfig+0x26c>)
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	f003 030c 	and.w	r3, r3, #12
 8001484:	2b04      	cmp	r3, #4
 8001486:	d00c      	beq.n	80014a2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001488:	4b8f      	ldr	r3, [pc, #572]	@ (80016c8 <HAL_RCC_OscConfig+0x26c>)
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	f003 030c 	and.w	r3, r3, #12
 8001490:	2b08      	cmp	r3, #8
 8001492:	d112      	bne.n	80014ba <HAL_RCC_OscConfig+0x5e>
 8001494:	4b8c      	ldr	r3, [pc, #560]	@ (80016c8 <HAL_RCC_OscConfig+0x26c>)
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800149c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80014a0:	d10b      	bne.n	80014ba <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014a2:	4b89      	ldr	r3, [pc, #548]	@ (80016c8 <HAL_RCC_OscConfig+0x26c>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d06c      	beq.n	8001588 <HAL_RCC_OscConfig+0x12c>
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d168      	bne.n	8001588 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80014b6:	2301      	movs	r3, #1
 80014b8:	e24c      	b.n	8001954 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80014c2:	d106      	bne.n	80014d2 <HAL_RCC_OscConfig+0x76>
 80014c4:	4b80      	ldr	r3, [pc, #512]	@ (80016c8 <HAL_RCC_OscConfig+0x26c>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a7f      	ldr	r2, [pc, #508]	@ (80016c8 <HAL_RCC_OscConfig+0x26c>)
 80014ca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014ce:	6013      	str	r3, [r2, #0]
 80014d0:	e02e      	b.n	8001530 <HAL_RCC_OscConfig+0xd4>
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d10c      	bne.n	80014f4 <HAL_RCC_OscConfig+0x98>
 80014da:	4b7b      	ldr	r3, [pc, #492]	@ (80016c8 <HAL_RCC_OscConfig+0x26c>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4a7a      	ldr	r2, [pc, #488]	@ (80016c8 <HAL_RCC_OscConfig+0x26c>)
 80014e0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80014e4:	6013      	str	r3, [r2, #0]
 80014e6:	4b78      	ldr	r3, [pc, #480]	@ (80016c8 <HAL_RCC_OscConfig+0x26c>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4a77      	ldr	r2, [pc, #476]	@ (80016c8 <HAL_RCC_OscConfig+0x26c>)
 80014ec:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80014f0:	6013      	str	r3, [r2, #0]
 80014f2:	e01d      	b.n	8001530 <HAL_RCC_OscConfig+0xd4>
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80014fc:	d10c      	bne.n	8001518 <HAL_RCC_OscConfig+0xbc>
 80014fe:	4b72      	ldr	r3, [pc, #456]	@ (80016c8 <HAL_RCC_OscConfig+0x26c>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4a71      	ldr	r2, [pc, #452]	@ (80016c8 <HAL_RCC_OscConfig+0x26c>)
 8001504:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001508:	6013      	str	r3, [r2, #0]
 800150a:	4b6f      	ldr	r3, [pc, #444]	@ (80016c8 <HAL_RCC_OscConfig+0x26c>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4a6e      	ldr	r2, [pc, #440]	@ (80016c8 <HAL_RCC_OscConfig+0x26c>)
 8001510:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001514:	6013      	str	r3, [r2, #0]
 8001516:	e00b      	b.n	8001530 <HAL_RCC_OscConfig+0xd4>
 8001518:	4b6b      	ldr	r3, [pc, #428]	@ (80016c8 <HAL_RCC_OscConfig+0x26c>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4a6a      	ldr	r2, [pc, #424]	@ (80016c8 <HAL_RCC_OscConfig+0x26c>)
 800151e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001522:	6013      	str	r3, [r2, #0]
 8001524:	4b68      	ldr	r3, [pc, #416]	@ (80016c8 <HAL_RCC_OscConfig+0x26c>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4a67      	ldr	r2, [pc, #412]	@ (80016c8 <HAL_RCC_OscConfig+0x26c>)
 800152a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800152e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d013      	beq.n	8001560 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001538:	f7ff fa22 	bl	8000980 <HAL_GetTick>
 800153c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800153e:	e008      	b.n	8001552 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001540:	f7ff fa1e 	bl	8000980 <HAL_GetTick>
 8001544:	4602      	mov	r2, r0
 8001546:	693b      	ldr	r3, [r7, #16]
 8001548:	1ad3      	subs	r3, r2, r3
 800154a:	2b64      	cmp	r3, #100	@ 0x64
 800154c:	d901      	bls.n	8001552 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800154e:	2303      	movs	r3, #3
 8001550:	e200      	b.n	8001954 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001552:	4b5d      	ldr	r3, [pc, #372]	@ (80016c8 <HAL_RCC_OscConfig+0x26c>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800155a:	2b00      	cmp	r3, #0
 800155c:	d0f0      	beq.n	8001540 <HAL_RCC_OscConfig+0xe4>
 800155e:	e014      	b.n	800158a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001560:	f7ff fa0e 	bl	8000980 <HAL_GetTick>
 8001564:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001566:	e008      	b.n	800157a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001568:	f7ff fa0a 	bl	8000980 <HAL_GetTick>
 800156c:	4602      	mov	r2, r0
 800156e:	693b      	ldr	r3, [r7, #16]
 8001570:	1ad3      	subs	r3, r2, r3
 8001572:	2b64      	cmp	r3, #100	@ 0x64
 8001574:	d901      	bls.n	800157a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001576:	2303      	movs	r3, #3
 8001578:	e1ec      	b.n	8001954 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800157a:	4b53      	ldr	r3, [pc, #332]	@ (80016c8 <HAL_RCC_OscConfig+0x26c>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001582:	2b00      	cmp	r3, #0
 8001584:	d1f0      	bne.n	8001568 <HAL_RCC_OscConfig+0x10c>
 8001586:	e000      	b.n	800158a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001588:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f003 0302 	and.w	r3, r3, #2
 8001592:	2b00      	cmp	r3, #0
 8001594:	d063      	beq.n	800165e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001596:	4b4c      	ldr	r3, [pc, #304]	@ (80016c8 <HAL_RCC_OscConfig+0x26c>)
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	f003 030c 	and.w	r3, r3, #12
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d00b      	beq.n	80015ba <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80015a2:	4b49      	ldr	r3, [pc, #292]	@ (80016c8 <HAL_RCC_OscConfig+0x26c>)
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	f003 030c 	and.w	r3, r3, #12
 80015aa:	2b08      	cmp	r3, #8
 80015ac:	d11c      	bne.n	80015e8 <HAL_RCC_OscConfig+0x18c>
 80015ae:	4b46      	ldr	r3, [pc, #280]	@ (80016c8 <HAL_RCC_OscConfig+0x26c>)
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d116      	bne.n	80015e8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015ba:	4b43      	ldr	r3, [pc, #268]	@ (80016c8 <HAL_RCC_OscConfig+0x26c>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f003 0302 	and.w	r3, r3, #2
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d005      	beq.n	80015d2 <HAL_RCC_OscConfig+0x176>
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	691b      	ldr	r3, [r3, #16]
 80015ca:	2b01      	cmp	r3, #1
 80015cc:	d001      	beq.n	80015d2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80015ce:	2301      	movs	r3, #1
 80015d0:	e1c0      	b.n	8001954 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015d2:	4b3d      	ldr	r3, [pc, #244]	@ (80016c8 <HAL_RCC_OscConfig+0x26c>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	695b      	ldr	r3, [r3, #20]
 80015de:	00db      	lsls	r3, r3, #3
 80015e0:	4939      	ldr	r1, [pc, #228]	@ (80016c8 <HAL_RCC_OscConfig+0x26c>)
 80015e2:	4313      	orrs	r3, r2
 80015e4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015e6:	e03a      	b.n	800165e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	691b      	ldr	r3, [r3, #16]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d020      	beq.n	8001632 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015f0:	4b36      	ldr	r3, [pc, #216]	@ (80016cc <HAL_RCC_OscConfig+0x270>)
 80015f2:	2201      	movs	r2, #1
 80015f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015f6:	f7ff f9c3 	bl	8000980 <HAL_GetTick>
 80015fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015fc:	e008      	b.n	8001610 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015fe:	f7ff f9bf 	bl	8000980 <HAL_GetTick>
 8001602:	4602      	mov	r2, r0
 8001604:	693b      	ldr	r3, [r7, #16]
 8001606:	1ad3      	subs	r3, r2, r3
 8001608:	2b02      	cmp	r3, #2
 800160a:	d901      	bls.n	8001610 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800160c:	2303      	movs	r3, #3
 800160e:	e1a1      	b.n	8001954 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001610:	4b2d      	ldr	r3, [pc, #180]	@ (80016c8 <HAL_RCC_OscConfig+0x26c>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f003 0302 	and.w	r3, r3, #2
 8001618:	2b00      	cmp	r3, #0
 800161a:	d0f0      	beq.n	80015fe <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800161c:	4b2a      	ldr	r3, [pc, #168]	@ (80016c8 <HAL_RCC_OscConfig+0x26c>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	695b      	ldr	r3, [r3, #20]
 8001628:	00db      	lsls	r3, r3, #3
 800162a:	4927      	ldr	r1, [pc, #156]	@ (80016c8 <HAL_RCC_OscConfig+0x26c>)
 800162c:	4313      	orrs	r3, r2
 800162e:	600b      	str	r3, [r1, #0]
 8001630:	e015      	b.n	800165e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001632:	4b26      	ldr	r3, [pc, #152]	@ (80016cc <HAL_RCC_OscConfig+0x270>)
 8001634:	2200      	movs	r2, #0
 8001636:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001638:	f7ff f9a2 	bl	8000980 <HAL_GetTick>
 800163c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800163e:	e008      	b.n	8001652 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001640:	f7ff f99e 	bl	8000980 <HAL_GetTick>
 8001644:	4602      	mov	r2, r0
 8001646:	693b      	ldr	r3, [r7, #16]
 8001648:	1ad3      	subs	r3, r2, r3
 800164a:	2b02      	cmp	r3, #2
 800164c:	d901      	bls.n	8001652 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800164e:	2303      	movs	r3, #3
 8001650:	e180      	b.n	8001954 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001652:	4b1d      	ldr	r3, [pc, #116]	@ (80016c8 <HAL_RCC_OscConfig+0x26c>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f003 0302 	and.w	r3, r3, #2
 800165a:	2b00      	cmp	r3, #0
 800165c:	d1f0      	bne.n	8001640 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f003 0308 	and.w	r3, r3, #8
 8001666:	2b00      	cmp	r3, #0
 8001668:	d03a      	beq.n	80016e0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	699b      	ldr	r3, [r3, #24]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d019      	beq.n	80016a6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001672:	4b17      	ldr	r3, [pc, #92]	@ (80016d0 <HAL_RCC_OscConfig+0x274>)
 8001674:	2201      	movs	r2, #1
 8001676:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001678:	f7ff f982 	bl	8000980 <HAL_GetTick>
 800167c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800167e:	e008      	b.n	8001692 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001680:	f7ff f97e 	bl	8000980 <HAL_GetTick>
 8001684:	4602      	mov	r2, r0
 8001686:	693b      	ldr	r3, [r7, #16]
 8001688:	1ad3      	subs	r3, r2, r3
 800168a:	2b02      	cmp	r3, #2
 800168c:	d901      	bls.n	8001692 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800168e:	2303      	movs	r3, #3
 8001690:	e160      	b.n	8001954 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001692:	4b0d      	ldr	r3, [pc, #52]	@ (80016c8 <HAL_RCC_OscConfig+0x26c>)
 8001694:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001696:	f003 0302 	and.w	r3, r3, #2
 800169a:	2b00      	cmp	r3, #0
 800169c:	d0f0      	beq.n	8001680 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800169e:	2001      	movs	r0, #1
 80016a0:	f000 face 	bl	8001c40 <RCC_Delay>
 80016a4:	e01c      	b.n	80016e0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016a6:	4b0a      	ldr	r3, [pc, #40]	@ (80016d0 <HAL_RCC_OscConfig+0x274>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016ac:	f7ff f968 	bl	8000980 <HAL_GetTick>
 80016b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016b2:	e00f      	b.n	80016d4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016b4:	f7ff f964 	bl	8000980 <HAL_GetTick>
 80016b8:	4602      	mov	r2, r0
 80016ba:	693b      	ldr	r3, [r7, #16]
 80016bc:	1ad3      	subs	r3, r2, r3
 80016be:	2b02      	cmp	r3, #2
 80016c0:	d908      	bls.n	80016d4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80016c2:	2303      	movs	r3, #3
 80016c4:	e146      	b.n	8001954 <HAL_RCC_OscConfig+0x4f8>
 80016c6:	bf00      	nop
 80016c8:	40021000 	.word	0x40021000
 80016cc:	42420000 	.word	0x42420000
 80016d0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016d4:	4b92      	ldr	r3, [pc, #584]	@ (8001920 <HAL_RCC_OscConfig+0x4c4>)
 80016d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016d8:	f003 0302 	and.w	r3, r3, #2
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d1e9      	bne.n	80016b4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f003 0304 	and.w	r3, r3, #4
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	f000 80a6 	beq.w	800183a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016ee:	2300      	movs	r3, #0
 80016f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016f2:	4b8b      	ldr	r3, [pc, #556]	@ (8001920 <HAL_RCC_OscConfig+0x4c4>)
 80016f4:	69db      	ldr	r3, [r3, #28]
 80016f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d10d      	bne.n	800171a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016fe:	4b88      	ldr	r3, [pc, #544]	@ (8001920 <HAL_RCC_OscConfig+0x4c4>)
 8001700:	69db      	ldr	r3, [r3, #28]
 8001702:	4a87      	ldr	r2, [pc, #540]	@ (8001920 <HAL_RCC_OscConfig+0x4c4>)
 8001704:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001708:	61d3      	str	r3, [r2, #28]
 800170a:	4b85      	ldr	r3, [pc, #532]	@ (8001920 <HAL_RCC_OscConfig+0x4c4>)
 800170c:	69db      	ldr	r3, [r3, #28]
 800170e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001712:	60bb      	str	r3, [r7, #8]
 8001714:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001716:	2301      	movs	r3, #1
 8001718:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800171a:	4b82      	ldr	r3, [pc, #520]	@ (8001924 <HAL_RCC_OscConfig+0x4c8>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001722:	2b00      	cmp	r3, #0
 8001724:	d118      	bne.n	8001758 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001726:	4b7f      	ldr	r3, [pc, #508]	@ (8001924 <HAL_RCC_OscConfig+0x4c8>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4a7e      	ldr	r2, [pc, #504]	@ (8001924 <HAL_RCC_OscConfig+0x4c8>)
 800172c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001730:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001732:	f7ff f925 	bl	8000980 <HAL_GetTick>
 8001736:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001738:	e008      	b.n	800174c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800173a:	f7ff f921 	bl	8000980 <HAL_GetTick>
 800173e:	4602      	mov	r2, r0
 8001740:	693b      	ldr	r3, [r7, #16]
 8001742:	1ad3      	subs	r3, r2, r3
 8001744:	2b64      	cmp	r3, #100	@ 0x64
 8001746:	d901      	bls.n	800174c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001748:	2303      	movs	r3, #3
 800174a:	e103      	b.n	8001954 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800174c:	4b75      	ldr	r3, [pc, #468]	@ (8001924 <HAL_RCC_OscConfig+0x4c8>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001754:	2b00      	cmp	r3, #0
 8001756:	d0f0      	beq.n	800173a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	68db      	ldr	r3, [r3, #12]
 800175c:	2b01      	cmp	r3, #1
 800175e:	d106      	bne.n	800176e <HAL_RCC_OscConfig+0x312>
 8001760:	4b6f      	ldr	r3, [pc, #444]	@ (8001920 <HAL_RCC_OscConfig+0x4c4>)
 8001762:	6a1b      	ldr	r3, [r3, #32]
 8001764:	4a6e      	ldr	r2, [pc, #440]	@ (8001920 <HAL_RCC_OscConfig+0x4c4>)
 8001766:	f043 0301 	orr.w	r3, r3, #1
 800176a:	6213      	str	r3, [r2, #32]
 800176c:	e02d      	b.n	80017ca <HAL_RCC_OscConfig+0x36e>
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	68db      	ldr	r3, [r3, #12]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d10c      	bne.n	8001790 <HAL_RCC_OscConfig+0x334>
 8001776:	4b6a      	ldr	r3, [pc, #424]	@ (8001920 <HAL_RCC_OscConfig+0x4c4>)
 8001778:	6a1b      	ldr	r3, [r3, #32]
 800177a:	4a69      	ldr	r2, [pc, #420]	@ (8001920 <HAL_RCC_OscConfig+0x4c4>)
 800177c:	f023 0301 	bic.w	r3, r3, #1
 8001780:	6213      	str	r3, [r2, #32]
 8001782:	4b67      	ldr	r3, [pc, #412]	@ (8001920 <HAL_RCC_OscConfig+0x4c4>)
 8001784:	6a1b      	ldr	r3, [r3, #32]
 8001786:	4a66      	ldr	r2, [pc, #408]	@ (8001920 <HAL_RCC_OscConfig+0x4c4>)
 8001788:	f023 0304 	bic.w	r3, r3, #4
 800178c:	6213      	str	r3, [r2, #32]
 800178e:	e01c      	b.n	80017ca <HAL_RCC_OscConfig+0x36e>
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	68db      	ldr	r3, [r3, #12]
 8001794:	2b05      	cmp	r3, #5
 8001796:	d10c      	bne.n	80017b2 <HAL_RCC_OscConfig+0x356>
 8001798:	4b61      	ldr	r3, [pc, #388]	@ (8001920 <HAL_RCC_OscConfig+0x4c4>)
 800179a:	6a1b      	ldr	r3, [r3, #32]
 800179c:	4a60      	ldr	r2, [pc, #384]	@ (8001920 <HAL_RCC_OscConfig+0x4c4>)
 800179e:	f043 0304 	orr.w	r3, r3, #4
 80017a2:	6213      	str	r3, [r2, #32]
 80017a4:	4b5e      	ldr	r3, [pc, #376]	@ (8001920 <HAL_RCC_OscConfig+0x4c4>)
 80017a6:	6a1b      	ldr	r3, [r3, #32]
 80017a8:	4a5d      	ldr	r2, [pc, #372]	@ (8001920 <HAL_RCC_OscConfig+0x4c4>)
 80017aa:	f043 0301 	orr.w	r3, r3, #1
 80017ae:	6213      	str	r3, [r2, #32]
 80017b0:	e00b      	b.n	80017ca <HAL_RCC_OscConfig+0x36e>
 80017b2:	4b5b      	ldr	r3, [pc, #364]	@ (8001920 <HAL_RCC_OscConfig+0x4c4>)
 80017b4:	6a1b      	ldr	r3, [r3, #32]
 80017b6:	4a5a      	ldr	r2, [pc, #360]	@ (8001920 <HAL_RCC_OscConfig+0x4c4>)
 80017b8:	f023 0301 	bic.w	r3, r3, #1
 80017bc:	6213      	str	r3, [r2, #32]
 80017be:	4b58      	ldr	r3, [pc, #352]	@ (8001920 <HAL_RCC_OscConfig+0x4c4>)
 80017c0:	6a1b      	ldr	r3, [r3, #32]
 80017c2:	4a57      	ldr	r2, [pc, #348]	@ (8001920 <HAL_RCC_OscConfig+0x4c4>)
 80017c4:	f023 0304 	bic.w	r3, r3, #4
 80017c8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	68db      	ldr	r3, [r3, #12]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d015      	beq.n	80017fe <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017d2:	f7ff f8d5 	bl	8000980 <HAL_GetTick>
 80017d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017d8:	e00a      	b.n	80017f0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017da:	f7ff f8d1 	bl	8000980 <HAL_GetTick>
 80017de:	4602      	mov	r2, r0
 80017e0:	693b      	ldr	r3, [r7, #16]
 80017e2:	1ad3      	subs	r3, r2, r3
 80017e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017e8:	4293      	cmp	r3, r2
 80017ea:	d901      	bls.n	80017f0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80017ec:	2303      	movs	r3, #3
 80017ee:	e0b1      	b.n	8001954 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017f0:	4b4b      	ldr	r3, [pc, #300]	@ (8001920 <HAL_RCC_OscConfig+0x4c4>)
 80017f2:	6a1b      	ldr	r3, [r3, #32]
 80017f4:	f003 0302 	and.w	r3, r3, #2
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d0ee      	beq.n	80017da <HAL_RCC_OscConfig+0x37e>
 80017fc:	e014      	b.n	8001828 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017fe:	f7ff f8bf 	bl	8000980 <HAL_GetTick>
 8001802:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001804:	e00a      	b.n	800181c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001806:	f7ff f8bb 	bl	8000980 <HAL_GetTick>
 800180a:	4602      	mov	r2, r0
 800180c:	693b      	ldr	r3, [r7, #16]
 800180e:	1ad3      	subs	r3, r2, r3
 8001810:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001814:	4293      	cmp	r3, r2
 8001816:	d901      	bls.n	800181c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001818:	2303      	movs	r3, #3
 800181a:	e09b      	b.n	8001954 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800181c:	4b40      	ldr	r3, [pc, #256]	@ (8001920 <HAL_RCC_OscConfig+0x4c4>)
 800181e:	6a1b      	ldr	r3, [r3, #32]
 8001820:	f003 0302 	and.w	r3, r3, #2
 8001824:	2b00      	cmp	r3, #0
 8001826:	d1ee      	bne.n	8001806 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001828:	7dfb      	ldrb	r3, [r7, #23]
 800182a:	2b01      	cmp	r3, #1
 800182c:	d105      	bne.n	800183a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800182e:	4b3c      	ldr	r3, [pc, #240]	@ (8001920 <HAL_RCC_OscConfig+0x4c4>)
 8001830:	69db      	ldr	r3, [r3, #28]
 8001832:	4a3b      	ldr	r2, [pc, #236]	@ (8001920 <HAL_RCC_OscConfig+0x4c4>)
 8001834:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001838:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	69db      	ldr	r3, [r3, #28]
 800183e:	2b00      	cmp	r3, #0
 8001840:	f000 8087 	beq.w	8001952 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001844:	4b36      	ldr	r3, [pc, #216]	@ (8001920 <HAL_RCC_OscConfig+0x4c4>)
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	f003 030c 	and.w	r3, r3, #12
 800184c:	2b08      	cmp	r3, #8
 800184e:	d061      	beq.n	8001914 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	69db      	ldr	r3, [r3, #28]
 8001854:	2b02      	cmp	r3, #2
 8001856:	d146      	bne.n	80018e6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001858:	4b33      	ldr	r3, [pc, #204]	@ (8001928 <HAL_RCC_OscConfig+0x4cc>)
 800185a:	2200      	movs	r2, #0
 800185c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800185e:	f7ff f88f 	bl	8000980 <HAL_GetTick>
 8001862:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001864:	e008      	b.n	8001878 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001866:	f7ff f88b 	bl	8000980 <HAL_GetTick>
 800186a:	4602      	mov	r2, r0
 800186c:	693b      	ldr	r3, [r7, #16]
 800186e:	1ad3      	subs	r3, r2, r3
 8001870:	2b02      	cmp	r3, #2
 8001872:	d901      	bls.n	8001878 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001874:	2303      	movs	r3, #3
 8001876:	e06d      	b.n	8001954 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001878:	4b29      	ldr	r3, [pc, #164]	@ (8001920 <HAL_RCC_OscConfig+0x4c4>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001880:	2b00      	cmp	r3, #0
 8001882:	d1f0      	bne.n	8001866 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6a1b      	ldr	r3, [r3, #32]
 8001888:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800188c:	d108      	bne.n	80018a0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800188e:	4b24      	ldr	r3, [pc, #144]	@ (8001920 <HAL_RCC_OscConfig+0x4c4>)
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	689b      	ldr	r3, [r3, #8]
 800189a:	4921      	ldr	r1, [pc, #132]	@ (8001920 <HAL_RCC_OscConfig+0x4c4>)
 800189c:	4313      	orrs	r3, r2
 800189e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018a0:	4b1f      	ldr	r3, [pc, #124]	@ (8001920 <HAL_RCC_OscConfig+0x4c4>)
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6a19      	ldr	r1, [r3, #32]
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018b0:	430b      	orrs	r3, r1
 80018b2:	491b      	ldr	r1, [pc, #108]	@ (8001920 <HAL_RCC_OscConfig+0x4c4>)
 80018b4:	4313      	orrs	r3, r2
 80018b6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018b8:	4b1b      	ldr	r3, [pc, #108]	@ (8001928 <HAL_RCC_OscConfig+0x4cc>)
 80018ba:	2201      	movs	r2, #1
 80018bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018be:	f7ff f85f 	bl	8000980 <HAL_GetTick>
 80018c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80018c4:	e008      	b.n	80018d8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018c6:	f7ff f85b 	bl	8000980 <HAL_GetTick>
 80018ca:	4602      	mov	r2, r0
 80018cc:	693b      	ldr	r3, [r7, #16]
 80018ce:	1ad3      	subs	r3, r2, r3
 80018d0:	2b02      	cmp	r3, #2
 80018d2:	d901      	bls.n	80018d8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80018d4:	2303      	movs	r3, #3
 80018d6:	e03d      	b.n	8001954 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80018d8:	4b11      	ldr	r3, [pc, #68]	@ (8001920 <HAL_RCC_OscConfig+0x4c4>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d0f0      	beq.n	80018c6 <HAL_RCC_OscConfig+0x46a>
 80018e4:	e035      	b.n	8001952 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018e6:	4b10      	ldr	r3, [pc, #64]	@ (8001928 <HAL_RCC_OscConfig+0x4cc>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018ec:	f7ff f848 	bl	8000980 <HAL_GetTick>
 80018f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018f2:	e008      	b.n	8001906 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018f4:	f7ff f844 	bl	8000980 <HAL_GetTick>
 80018f8:	4602      	mov	r2, r0
 80018fa:	693b      	ldr	r3, [r7, #16]
 80018fc:	1ad3      	subs	r3, r2, r3
 80018fe:	2b02      	cmp	r3, #2
 8001900:	d901      	bls.n	8001906 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001902:	2303      	movs	r3, #3
 8001904:	e026      	b.n	8001954 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001906:	4b06      	ldr	r3, [pc, #24]	@ (8001920 <HAL_RCC_OscConfig+0x4c4>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800190e:	2b00      	cmp	r3, #0
 8001910:	d1f0      	bne.n	80018f4 <HAL_RCC_OscConfig+0x498>
 8001912:	e01e      	b.n	8001952 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	69db      	ldr	r3, [r3, #28]
 8001918:	2b01      	cmp	r3, #1
 800191a:	d107      	bne.n	800192c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800191c:	2301      	movs	r3, #1
 800191e:	e019      	b.n	8001954 <HAL_RCC_OscConfig+0x4f8>
 8001920:	40021000 	.word	0x40021000
 8001924:	40007000 	.word	0x40007000
 8001928:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800192c:	4b0b      	ldr	r3, [pc, #44]	@ (800195c <HAL_RCC_OscConfig+0x500>)
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6a1b      	ldr	r3, [r3, #32]
 800193c:	429a      	cmp	r2, r3
 800193e:	d106      	bne.n	800194e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800194a:	429a      	cmp	r2, r3
 800194c:	d001      	beq.n	8001952 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800194e:	2301      	movs	r3, #1
 8001950:	e000      	b.n	8001954 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001952:	2300      	movs	r3, #0
}
 8001954:	4618      	mov	r0, r3
 8001956:	3718      	adds	r7, #24
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}
 800195c:	40021000 	.word	0x40021000

08001960 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b084      	sub	sp, #16
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
 8001968:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d101      	bne.n	8001974 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001970:	2301      	movs	r3, #1
 8001972:	e0d0      	b.n	8001b16 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001974:	4b6a      	ldr	r3, [pc, #424]	@ (8001b20 <HAL_RCC_ClockConfig+0x1c0>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f003 0307 	and.w	r3, r3, #7
 800197c:	683a      	ldr	r2, [r7, #0]
 800197e:	429a      	cmp	r2, r3
 8001980:	d910      	bls.n	80019a4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001982:	4b67      	ldr	r3, [pc, #412]	@ (8001b20 <HAL_RCC_ClockConfig+0x1c0>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f023 0207 	bic.w	r2, r3, #7
 800198a:	4965      	ldr	r1, [pc, #404]	@ (8001b20 <HAL_RCC_ClockConfig+0x1c0>)
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	4313      	orrs	r3, r2
 8001990:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001992:	4b63      	ldr	r3, [pc, #396]	@ (8001b20 <HAL_RCC_ClockConfig+0x1c0>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f003 0307 	and.w	r3, r3, #7
 800199a:	683a      	ldr	r2, [r7, #0]
 800199c:	429a      	cmp	r2, r3
 800199e:	d001      	beq.n	80019a4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80019a0:	2301      	movs	r3, #1
 80019a2:	e0b8      	b.n	8001b16 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f003 0302 	and.w	r3, r3, #2
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d020      	beq.n	80019f2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f003 0304 	and.w	r3, r3, #4
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d005      	beq.n	80019c8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80019bc:	4b59      	ldr	r3, [pc, #356]	@ (8001b24 <HAL_RCC_ClockConfig+0x1c4>)
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	4a58      	ldr	r2, [pc, #352]	@ (8001b24 <HAL_RCC_ClockConfig+0x1c4>)
 80019c2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80019c6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f003 0308 	and.w	r3, r3, #8
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d005      	beq.n	80019e0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80019d4:	4b53      	ldr	r3, [pc, #332]	@ (8001b24 <HAL_RCC_ClockConfig+0x1c4>)
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	4a52      	ldr	r2, [pc, #328]	@ (8001b24 <HAL_RCC_ClockConfig+0x1c4>)
 80019da:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80019de:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019e0:	4b50      	ldr	r3, [pc, #320]	@ (8001b24 <HAL_RCC_ClockConfig+0x1c4>)
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	689b      	ldr	r3, [r3, #8]
 80019ec:	494d      	ldr	r1, [pc, #308]	@ (8001b24 <HAL_RCC_ClockConfig+0x1c4>)
 80019ee:	4313      	orrs	r3, r2
 80019f0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f003 0301 	and.w	r3, r3, #1
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d040      	beq.n	8001a80 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	2b01      	cmp	r3, #1
 8001a04:	d107      	bne.n	8001a16 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a06:	4b47      	ldr	r3, [pc, #284]	@ (8001b24 <HAL_RCC_ClockConfig+0x1c4>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d115      	bne.n	8001a3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a12:	2301      	movs	r3, #1
 8001a14:	e07f      	b.n	8001b16 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	2b02      	cmp	r3, #2
 8001a1c:	d107      	bne.n	8001a2e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a1e:	4b41      	ldr	r3, [pc, #260]	@ (8001b24 <HAL_RCC_ClockConfig+0x1c4>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d109      	bne.n	8001a3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e073      	b.n	8001b16 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a2e:	4b3d      	ldr	r3, [pc, #244]	@ (8001b24 <HAL_RCC_ClockConfig+0x1c4>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f003 0302 	and.w	r3, r3, #2
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d101      	bne.n	8001a3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	e06b      	b.n	8001b16 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a3e:	4b39      	ldr	r3, [pc, #228]	@ (8001b24 <HAL_RCC_ClockConfig+0x1c4>)
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	f023 0203 	bic.w	r2, r3, #3
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	4936      	ldr	r1, [pc, #216]	@ (8001b24 <HAL_RCC_ClockConfig+0x1c4>)
 8001a4c:	4313      	orrs	r3, r2
 8001a4e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a50:	f7fe ff96 	bl	8000980 <HAL_GetTick>
 8001a54:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a56:	e00a      	b.n	8001a6e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a58:	f7fe ff92 	bl	8000980 <HAL_GetTick>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	1ad3      	subs	r3, r2, r3
 8001a62:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d901      	bls.n	8001a6e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a6a:	2303      	movs	r3, #3
 8001a6c:	e053      	b.n	8001b16 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a6e:	4b2d      	ldr	r3, [pc, #180]	@ (8001b24 <HAL_RCC_ClockConfig+0x1c4>)
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	f003 020c 	and.w	r2, r3, #12
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	009b      	lsls	r3, r3, #2
 8001a7c:	429a      	cmp	r2, r3
 8001a7e:	d1eb      	bne.n	8001a58 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a80:	4b27      	ldr	r3, [pc, #156]	@ (8001b20 <HAL_RCC_ClockConfig+0x1c0>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f003 0307 	and.w	r3, r3, #7
 8001a88:	683a      	ldr	r2, [r7, #0]
 8001a8a:	429a      	cmp	r2, r3
 8001a8c:	d210      	bcs.n	8001ab0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a8e:	4b24      	ldr	r3, [pc, #144]	@ (8001b20 <HAL_RCC_ClockConfig+0x1c0>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f023 0207 	bic.w	r2, r3, #7
 8001a96:	4922      	ldr	r1, [pc, #136]	@ (8001b20 <HAL_RCC_ClockConfig+0x1c0>)
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a9e:	4b20      	ldr	r3, [pc, #128]	@ (8001b20 <HAL_RCC_ClockConfig+0x1c0>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f003 0307 	and.w	r3, r3, #7
 8001aa6:	683a      	ldr	r2, [r7, #0]
 8001aa8:	429a      	cmp	r2, r3
 8001aaa:	d001      	beq.n	8001ab0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001aac:	2301      	movs	r3, #1
 8001aae:	e032      	b.n	8001b16 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f003 0304 	and.w	r3, r3, #4
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d008      	beq.n	8001ace <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001abc:	4b19      	ldr	r3, [pc, #100]	@ (8001b24 <HAL_RCC_ClockConfig+0x1c4>)
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	68db      	ldr	r3, [r3, #12]
 8001ac8:	4916      	ldr	r1, [pc, #88]	@ (8001b24 <HAL_RCC_ClockConfig+0x1c4>)
 8001aca:	4313      	orrs	r3, r2
 8001acc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f003 0308 	and.w	r3, r3, #8
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d009      	beq.n	8001aee <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001ada:	4b12      	ldr	r3, [pc, #72]	@ (8001b24 <HAL_RCC_ClockConfig+0x1c4>)
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	691b      	ldr	r3, [r3, #16]
 8001ae6:	00db      	lsls	r3, r3, #3
 8001ae8:	490e      	ldr	r1, [pc, #56]	@ (8001b24 <HAL_RCC_ClockConfig+0x1c4>)
 8001aea:	4313      	orrs	r3, r2
 8001aec:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001aee:	f000 f821 	bl	8001b34 <HAL_RCC_GetSysClockFreq>
 8001af2:	4602      	mov	r2, r0
 8001af4:	4b0b      	ldr	r3, [pc, #44]	@ (8001b24 <HAL_RCC_ClockConfig+0x1c4>)
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	091b      	lsrs	r3, r3, #4
 8001afa:	f003 030f 	and.w	r3, r3, #15
 8001afe:	490a      	ldr	r1, [pc, #40]	@ (8001b28 <HAL_RCC_ClockConfig+0x1c8>)
 8001b00:	5ccb      	ldrb	r3, [r1, r3]
 8001b02:	fa22 f303 	lsr.w	r3, r2, r3
 8001b06:	4a09      	ldr	r2, [pc, #36]	@ (8001b2c <HAL_RCC_ClockConfig+0x1cc>)
 8001b08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001b0a:	4b09      	ldr	r3, [pc, #36]	@ (8001b30 <HAL_RCC_ClockConfig+0x1d0>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f7fe fef4 	bl	80008fc <HAL_InitTick>

  return HAL_OK;
 8001b14:	2300      	movs	r3, #0
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	3710      	adds	r7, #16
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	40022000 	.word	0x40022000
 8001b24:	40021000 	.word	0x40021000
 8001b28:	08003898 	.word	0x08003898
 8001b2c:	20000000 	.word	0x20000000
 8001b30:	20000004 	.word	0x20000004

08001b34 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b087      	sub	sp, #28
 8001b38:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	60fb      	str	r3, [r7, #12]
 8001b3e:	2300      	movs	r3, #0
 8001b40:	60bb      	str	r3, [r7, #8]
 8001b42:	2300      	movs	r3, #0
 8001b44:	617b      	str	r3, [r7, #20]
 8001b46:	2300      	movs	r3, #0
 8001b48:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001b4e:	4b1e      	ldr	r3, [pc, #120]	@ (8001bc8 <HAL_RCC_GetSysClockFreq+0x94>)
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	f003 030c 	and.w	r3, r3, #12
 8001b5a:	2b04      	cmp	r3, #4
 8001b5c:	d002      	beq.n	8001b64 <HAL_RCC_GetSysClockFreq+0x30>
 8001b5e:	2b08      	cmp	r3, #8
 8001b60:	d003      	beq.n	8001b6a <HAL_RCC_GetSysClockFreq+0x36>
 8001b62:	e027      	b.n	8001bb4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001b64:	4b19      	ldr	r3, [pc, #100]	@ (8001bcc <HAL_RCC_GetSysClockFreq+0x98>)
 8001b66:	613b      	str	r3, [r7, #16]
      break;
 8001b68:	e027      	b.n	8001bba <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	0c9b      	lsrs	r3, r3, #18
 8001b6e:	f003 030f 	and.w	r3, r3, #15
 8001b72:	4a17      	ldr	r2, [pc, #92]	@ (8001bd0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001b74:	5cd3      	ldrb	r3, [r2, r3]
 8001b76:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d010      	beq.n	8001ba4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001b82:	4b11      	ldr	r3, [pc, #68]	@ (8001bc8 <HAL_RCC_GetSysClockFreq+0x94>)
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	0c5b      	lsrs	r3, r3, #17
 8001b88:	f003 0301 	and.w	r3, r3, #1
 8001b8c:	4a11      	ldr	r2, [pc, #68]	@ (8001bd4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001b8e:	5cd3      	ldrb	r3, [r2, r3]
 8001b90:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	4a0d      	ldr	r2, [pc, #52]	@ (8001bcc <HAL_RCC_GetSysClockFreq+0x98>)
 8001b96:	fb03 f202 	mul.w	r2, r3, r2
 8001b9a:	68bb      	ldr	r3, [r7, #8]
 8001b9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ba0:	617b      	str	r3, [r7, #20]
 8001ba2:	e004      	b.n	8001bae <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	4a0c      	ldr	r2, [pc, #48]	@ (8001bd8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001ba8:	fb02 f303 	mul.w	r3, r2, r3
 8001bac:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001bae:	697b      	ldr	r3, [r7, #20]
 8001bb0:	613b      	str	r3, [r7, #16]
      break;
 8001bb2:	e002      	b.n	8001bba <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001bb4:	4b05      	ldr	r3, [pc, #20]	@ (8001bcc <HAL_RCC_GetSysClockFreq+0x98>)
 8001bb6:	613b      	str	r3, [r7, #16]
      break;
 8001bb8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001bba:	693b      	ldr	r3, [r7, #16]
}
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	371c      	adds	r7, #28
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bc80      	pop	{r7}
 8001bc4:	4770      	bx	lr
 8001bc6:	bf00      	nop
 8001bc8:	40021000 	.word	0x40021000
 8001bcc:	007a1200 	.word	0x007a1200
 8001bd0:	080038b0 	.word	0x080038b0
 8001bd4:	080038c0 	.word	0x080038c0
 8001bd8:	003d0900 	.word	0x003d0900

08001bdc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001be0:	4b02      	ldr	r3, [pc, #8]	@ (8001bec <HAL_RCC_GetHCLKFreq+0x10>)
 8001be2:	681b      	ldr	r3, [r3, #0]
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bc80      	pop	{r7}
 8001bea:	4770      	bx	lr
 8001bec:	20000000 	.word	0x20000000

08001bf0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001bf4:	f7ff fff2 	bl	8001bdc <HAL_RCC_GetHCLKFreq>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	4b05      	ldr	r3, [pc, #20]	@ (8001c10 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	0a1b      	lsrs	r3, r3, #8
 8001c00:	f003 0307 	and.w	r3, r3, #7
 8001c04:	4903      	ldr	r1, [pc, #12]	@ (8001c14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c06:	5ccb      	ldrb	r3, [r1, r3]
 8001c08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	bd80      	pop	{r7, pc}
 8001c10:	40021000 	.word	0x40021000
 8001c14:	080038a8 	.word	0x080038a8

08001c18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001c1c:	f7ff ffde 	bl	8001bdc <HAL_RCC_GetHCLKFreq>
 8001c20:	4602      	mov	r2, r0
 8001c22:	4b05      	ldr	r3, [pc, #20]	@ (8001c38 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	0adb      	lsrs	r3, r3, #11
 8001c28:	f003 0307 	and.w	r3, r3, #7
 8001c2c:	4903      	ldr	r1, [pc, #12]	@ (8001c3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c2e:	5ccb      	ldrb	r3, [r1, r3]
 8001c30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	bd80      	pop	{r7, pc}
 8001c38:	40021000 	.word	0x40021000
 8001c3c:	080038a8 	.word	0x080038a8

08001c40 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b085      	sub	sp, #20
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001c48:	4b0a      	ldr	r3, [pc, #40]	@ (8001c74 <RCC_Delay+0x34>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a0a      	ldr	r2, [pc, #40]	@ (8001c78 <RCC_Delay+0x38>)
 8001c4e:	fba2 2303 	umull	r2, r3, r2, r3
 8001c52:	0a5b      	lsrs	r3, r3, #9
 8001c54:	687a      	ldr	r2, [r7, #4]
 8001c56:	fb02 f303 	mul.w	r3, r2, r3
 8001c5a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001c5c:	bf00      	nop
  }
  while (Delay --);
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	1e5a      	subs	r2, r3, #1
 8001c62:	60fa      	str	r2, [r7, #12]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d1f9      	bne.n	8001c5c <RCC_Delay+0x1c>
}
 8001c68:	bf00      	nop
 8001c6a:	bf00      	nop
 8001c6c:	3714      	adds	r7, #20
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bc80      	pop	{r7}
 8001c72:	4770      	bx	lr
 8001c74:	20000000 	.word	0x20000000
 8001c78:	10624dd3 	.word	0x10624dd3

08001c7c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b082      	sub	sp, #8
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d101      	bne.n	8001c8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	e042      	b.n	8001d14 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001c94:	b2db      	uxtb	r3, r3
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d106      	bne.n	8001ca8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001ca2:	6878      	ldr	r0, [r7, #4]
 8001ca4:	f7fe fd32 	bl	800070c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2224      	movs	r2, #36	@ 0x24
 8001cac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	68da      	ldr	r2, [r3, #12]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001cbe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001cc0:	6878      	ldr	r0, [r7, #4]
 8001cc2:	f001 f879 	bl	8002db8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	691a      	ldr	r2, [r3, #16]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001cd4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	695a      	ldr	r2, [r3, #20]
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001ce4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	68da      	ldr	r2, [r3, #12]
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001cf4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2220      	movs	r2, #32
 8001d00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2220      	movs	r2, #32
 8001d08:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2200      	movs	r2, #0
 8001d10:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001d12:	2300      	movs	r3, #0
}
 8001d14:	4618      	mov	r0, r3
 8001d16:	3708      	adds	r7, #8
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd80      	pop	{r7, pc}

08001d1c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b08a      	sub	sp, #40	@ 0x28
 8001d20:	af02      	add	r7, sp, #8
 8001d22:	60f8      	str	r0, [r7, #12]
 8001d24:	60b9      	str	r1, [r7, #8]
 8001d26:	603b      	str	r3, [r7, #0]
 8001d28:	4613      	mov	r3, r2
 8001d2a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001d36:	b2db      	uxtb	r3, r3
 8001d38:	2b20      	cmp	r3, #32
 8001d3a:	d175      	bne.n	8001e28 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001d3c:	68bb      	ldr	r3, [r7, #8]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d002      	beq.n	8001d48 <HAL_UART_Transmit+0x2c>
 8001d42:	88fb      	ldrh	r3, [r7, #6]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d101      	bne.n	8001d4c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001d48:	2301      	movs	r3, #1
 8001d4a:	e06e      	b.n	8001e2a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	2200      	movs	r2, #0
 8001d50:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	2221      	movs	r2, #33	@ 0x21
 8001d56:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001d5a:	f7fe fe11 	bl	8000980 <HAL_GetTick>
 8001d5e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	88fa      	ldrh	r2, [r7, #6]
 8001d64:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	88fa      	ldrh	r2, [r7, #6]
 8001d6a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	689b      	ldr	r3, [r3, #8]
 8001d70:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001d74:	d108      	bne.n	8001d88 <HAL_UART_Transmit+0x6c>
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	691b      	ldr	r3, [r3, #16]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d104      	bne.n	8001d88 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001d82:	68bb      	ldr	r3, [r7, #8]
 8001d84:	61bb      	str	r3, [r7, #24]
 8001d86:	e003      	b.n	8001d90 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001d88:	68bb      	ldr	r3, [r7, #8]
 8001d8a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001d90:	e02e      	b.n	8001df0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	9300      	str	r3, [sp, #0]
 8001d96:	697b      	ldr	r3, [r7, #20]
 8001d98:	2200      	movs	r2, #0
 8001d9a:	2180      	movs	r1, #128	@ 0x80
 8001d9c:	68f8      	ldr	r0, [r7, #12]
 8001d9e:	f000 fd1d 	bl	80027dc <UART_WaitOnFlagUntilTimeout>
 8001da2:	4603      	mov	r3, r0
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d005      	beq.n	8001db4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	2220      	movs	r2, #32
 8001dac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8001db0:	2303      	movs	r3, #3
 8001db2:	e03a      	b.n	8001e2a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8001db4:	69fb      	ldr	r3, [r7, #28]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d10b      	bne.n	8001dd2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001dba:	69bb      	ldr	r3, [r7, #24]
 8001dbc:	881b      	ldrh	r3, [r3, #0]
 8001dbe:	461a      	mov	r2, r3
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001dc8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001dca:	69bb      	ldr	r3, [r7, #24]
 8001dcc:	3302      	adds	r3, #2
 8001dce:	61bb      	str	r3, [r7, #24]
 8001dd0:	e007      	b.n	8001de2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001dd2:	69fb      	ldr	r3, [r7, #28]
 8001dd4:	781a      	ldrb	r2, [r3, #0]
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001ddc:	69fb      	ldr	r3, [r7, #28]
 8001dde:	3301      	adds	r3, #1
 8001de0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001de6:	b29b      	uxth	r3, r3
 8001de8:	3b01      	subs	r3, #1
 8001dea:	b29a      	uxth	r2, r3
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001df4:	b29b      	uxth	r3, r3
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d1cb      	bne.n	8001d92 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	9300      	str	r3, [sp, #0]
 8001dfe:	697b      	ldr	r3, [r7, #20]
 8001e00:	2200      	movs	r2, #0
 8001e02:	2140      	movs	r1, #64	@ 0x40
 8001e04:	68f8      	ldr	r0, [r7, #12]
 8001e06:	f000 fce9 	bl	80027dc <UART_WaitOnFlagUntilTimeout>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d005      	beq.n	8001e1c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	2220      	movs	r2, #32
 8001e14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8001e18:	2303      	movs	r3, #3
 8001e1a:	e006      	b.n	8001e2a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	2220      	movs	r2, #32
 8001e20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8001e24:	2300      	movs	r3, #0
 8001e26:	e000      	b.n	8001e2a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8001e28:	2302      	movs	r3, #2
  }
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	3720      	adds	r7, #32
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}

08001e32 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001e32:	b580      	push	{r7, lr}
 8001e34:	b084      	sub	sp, #16
 8001e36:	af00      	add	r7, sp, #0
 8001e38:	60f8      	str	r0, [r7, #12]
 8001e3a:	60b9      	str	r1, [r7, #8]
 8001e3c:	4613      	mov	r3, r2
 8001e3e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001e46:	b2db      	uxtb	r3, r3
 8001e48:	2b20      	cmp	r3, #32
 8001e4a:	d112      	bne.n	8001e72 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8001e4c:	68bb      	ldr	r3, [r7, #8]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d002      	beq.n	8001e58 <HAL_UART_Receive_IT+0x26>
 8001e52:	88fb      	ldrh	r3, [r7, #6]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d101      	bne.n	8001e5c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	e00b      	b.n	8001e74 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	2200      	movs	r2, #0
 8001e60:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8001e62:	88fb      	ldrh	r3, [r7, #6]
 8001e64:	461a      	mov	r2, r3
 8001e66:	68b9      	ldr	r1, [r7, #8]
 8001e68:	68f8      	ldr	r0, [r7, #12]
 8001e6a:	f000 fd10 	bl	800288e <UART_Start_Receive_IT>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	e000      	b.n	8001e74 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8001e72:	2302      	movs	r3, #2
  }
}
 8001e74:	4618      	mov	r0, r3
 8001e76:	3710      	adds	r7, #16
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd80      	pop	{r7, pc}

08001e7c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b08c      	sub	sp, #48	@ 0x30
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	60f8      	str	r0, [r7, #12]
 8001e84:	60b9      	str	r1, [r7, #8]
 8001e86:	4613      	mov	r3, r2
 8001e88:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001e90:	b2db      	uxtb	r3, r3
 8001e92:	2b20      	cmp	r3, #32
 8001e94:	d156      	bne.n	8001f44 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 8001e96:	68bb      	ldr	r3, [r7, #8]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d002      	beq.n	8001ea2 <HAL_UART_Transmit_DMA+0x26>
 8001e9c:	88fb      	ldrh	r3, [r7, #6]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d101      	bne.n	8001ea6 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	e04f      	b.n	8001f46 <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 8001ea6:	68ba      	ldr	r2, [r7, #8]
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	88fa      	ldrh	r2, [r7, #6]
 8001eb0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	88fa      	ldrh	r2, [r7, #6]
 8001eb6:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	2200      	movs	r2, #0
 8001ebc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	2221      	movs	r2, #33	@ 0x21
 8001ec2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001eca:	4a21      	ldr	r2, [pc, #132]	@ (8001f50 <HAL_UART_Transmit_DMA+0xd4>)
 8001ecc:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ed2:	4a20      	ldr	r2, [pc, #128]	@ (8001f54 <HAL_UART_Transmit_DMA+0xd8>)
 8001ed4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001eda:	4a1f      	ldr	r2, [pc, #124]	@ (8001f58 <HAL_UART_Transmit_DMA+0xdc>)
 8001edc:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (const uint32_t *)&pData;
 8001ee6:	f107 0308 	add.w	r3, r7, #8
 8001eea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8001ef0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ef2:	6819      	ldr	r1, [r3, #0]
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	3304      	adds	r3, #4
 8001efa:	461a      	mov	r2, r3
 8001efc:	88fb      	ldrh	r3, [r7, #6]
 8001efe:	f7fe feb1 	bl	8000c64 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001f0a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	3314      	adds	r3, #20
 8001f12:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001f14:	69bb      	ldr	r3, [r7, #24]
 8001f16:	e853 3f00 	ldrex	r3, [r3]
 8001f1a:	617b      	str	r3, [r7, #20]
   return(result);
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001f22:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	3314      	adds	r3, #20
 8001f2a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001f2c:	627a      	str	r2, [r7, #36]	@ 0x24
 8001f2e:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001f30:	6a39      	ldr	r1, [r7, #32]
 8001f32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f34:	e841 2300 	strex	r3, r2, [r1]
 8001f38:	61fb      	str	r3, [r7, #28]
   return(result);
 8001f3a:	69fb      	ldr	r3, [r7, #28]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d1e5      	bne.n	8001f0c <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8001f40:	2300      	movs	r3, #0
 8001f42:	e000      	b.n	8001f46 <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8001f44:	2302      	movs	r3, #2
  }
}
 8001f46:	4618      	mov	r0, r3
 8001f48:	3730      	adds	r7, #48	@ 0x30
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}
 8001f4e:	bf00      	nop
 8001f50:	0800252b 	.word	0x0800252b
 8001f54:	080025c5 	.word	0x080025c5
 8001f58:	08002749 	.word	0x08002749

08001f5c <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b084      	sub	sp, #16
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	60f8      	str	r0, [r7, #12]
 8001f64:	60b9      	str	r1, [r7, #8]
 8001f66:	4613      	mov	r3, r2
 8001f68:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001f70:	b2db      	uxtb	r3, r3
 8001f72:	2b20      	cmp	r3, #32
 8001f74:	d112      	bne.n	8001f9c <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8001f76:	68bb      	ldr	r3, [r7, #8]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d002      	beq.n	8001f82 <HAL_UART_Receive_DMA+0x26>
 8001f7c:	88fb      	ldrh	r3, [r7, #6]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d101      	bne.n	8001f86 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8001f82:	2301      	movs	r3, #1
 8001f84:	e00b      	b.n	8001f9e <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	2200      	movs	r2, #0
 8001f8a:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8001f8c:	88fb      	ldrh	r3, [r7, #6]
 8001f8e:	461a      	mov	r2, r3
 8001f90:	68b9      	ldr	r1, [r7, #8]
 8001f92:	68f8      	ldr	r0, [r7, #12]
 8001f94:	f000 fcb4 	bl	8002900 <UART_Start_Receive_DMA>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	e000      	b.n	8001f9e <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8001f9c:	2302      	movs	r3, #2
  }
}
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	3710      	adds	r7, #16
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}
	...

08001fa8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b0ba      	sub	sp, #232	@ 0xe8
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	68db      	ldr	r3, [r3, #12]
 8001fc0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	695b      	ldr	r3, [r3, #20]
 8001fca:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001fda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001fde:	f003 030f 	and.w	r3, r3, #15
 8001fe2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8001fe6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d10f      	bne.n	800200e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001fee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001ff2:	f003 0320 	and.w	r3, r3, #32
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d009      	beq.n	800200e <HAL_UART_IRQHandler+0x66>
 8001ffa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001ffe:	f003 0320 	and.w	r3, r3, #32
 8002002:	2b00      	cmp	r3, #0
 8002004:	d003      	beq.n	800200e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002006:	6878      	ldr	r0, [r7, #4]
 8002008:	f000 fe18 	bl	8002c3c <UART_Receive_IT>
      return;
 800200c:	e25b      	b.n	80024c6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800200e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002012:	2b00      	cmp	r3, #0
 8002014:	f000 80de 	beq.w	80021d4 <HAL_UART_IRQHandler+0x22c>
 8002018:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800201c:	f003 0301 	and.w	r3, r3, #1
 8002020:	2b00      	cmp	r3, #0
 8002022:	d106      	bne.n	8002032 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002024:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002028:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800202c:	2b00      	cmp	r3, #0
 800202e:	f000 80d1 	beq.w	80021d4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002032:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002036:	f003 0301 	and.w	r3, r3, #1
 800203a:	2b00      	cmp	r3, #0
 800203c:	d00b      	beq.n	8002056 <HAL_UART_IRQHandler+0xae>
 800203e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002042:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002046:	2b00      	cmp	r3, #0
 8002048:	d005      	beq.n	8002056 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800204e:	f043 0201 	orr.w	r2, r3, #1
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002056:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800205a:	f003 0304 	and.w	r3, r3, #4
 800205e:	2b00      	cmp	r3, #0
 8002060:	d00b      	beq.n	800207a <HAL_UART_IRQHandler+0xd2>
 8002062:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002066:	f003 0301 	and.w	r3, r3, #1
 800206a:	2b00      	cmp	r3, #0
 800206c:	d005      	beq.n	800207a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002072:	f043 0202 	orr.w	r2, r3, #2
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800207a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800207e:	f003 0302 	and.w	r3, r3, #2
 8002082:	2b00      	cmp	r3, #0
 8002084:	d00b      	beq.n	800209e <HAL_UART_IRQHandler+0xf6>
 8002086:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800208a:	f003 0301 	and.w	r3, r3, #1
 800208e:	2b00      	cmp	r3, #0
 8002090:	d005      	beq.n	800209e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002096:	f043 0204 	orr.w	r2, r3, #4
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800209e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80020a2:	f003 0308 	and.w	r3, r3, #8
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d011      	beq.n	80020ce <HAL_UART_IRQHandler+0x126>
 80020aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80020ae:	f003 0320 	and.w	r3, r3, #32
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d105      	bne.n	80020c2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80020b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80020ba:	f003 0301 	and.w	r3, r3, #1
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d005      	beq.n	80020ce <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020c6:	f043 0208 	orr.w	r2, r3, #8
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	f000 81f2 	beq.w	80024bc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80020d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80020dc:	f003 0320 	and.w	r3, r3, #32
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d008      	beq.n	80020f6 <HAL_UART_IRQHandler+0x14e>
 80020e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80020e8:	f003 0320 	and.w	r3, r3, #32
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d002      	beq.n	80020f6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80020f0:	6878      	ldr	r0, [r7, #4]
 80020f2:	f000 fda3 	bl	8002c3c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	695b      	ldr	r3, [r3, #20]
 80020fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002100:	2b00      	cmp	r3, #0
 8002102:	bf14      	ite	ne
 8002104:	2301      	movne	r3, #1
 8002106:	2300      	moveq	r3, #0
 8002108:	b2db      	uxtb	r3, r3
 800210a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002112:	f003 0308 	and.w	r3, r3, #8
 8002116:	2b00      	cmp	r3, #0
 8002118:	d103      	bne.n	8002122 <HAL_UART_IRQHandler+0x17a>
 800211a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800211e:	2b00      	cmp	r3, #0
 8002120:	d04f      	beq.n	80021c2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002122:	6878      	ldr	r0, [r7, #4]
 8002124:	f000 fcad 	bl	8002a82 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	695b      	ldr	r3, [r3, #20]
 800212e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002132:	2b00      	cmp	r3, #0
 8002134:	d041      	beq.n	80021ba <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	3314      	adds	r3, #20
 800213c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002140:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002144:	e853 3f00 	ldrex	r3, [r3]
 8002148:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800214c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002150:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002154:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	3314      	adds	r3, #20
 800215e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002162:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002166:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800216a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800216e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002172:	e841 2300 	strex	r3, r2, [r1]
 8002176:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800217a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800217e:	2b00      	cmp	r3, #0
 8002180:	d1d9      	bne.n	8002136 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002186:	2b00      	cmp	r3, #0
 8002188:	d013      	beq.n	80021b2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800218e:	4a7e      	ldr	r2, [pc, #504]	@ (8002388 <HAL_UART_IRQHandler+0x3e0>)
 8002190:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002196:	4618      	mov	r0, r3
 8002198:	f7fe fe00 	bl	8000d9c <HAL_DMA_Abort_IT>
 800219c:	4603      	mov	r3, r0
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d016      	beq.n	80021d0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80021a8:	687a      	ldr	r2, [r7, #4]
 80021aa:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80021ac:	4610      	mov	r0, r2
 80021ae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80021b0:	e00e      	b.n	80021d0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80021b2:	6878      	ldr	r0, [r7, #4]
 80021b4:	f000 f9a5 	bl	8002502 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80021b8:	e00a      	b.n	80021d0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80021ba:	6878      	ldr	r0, [r7, #4]
 80021bc:	f000 f9a1 	bl	8002502 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80021c0:	e006      	b.n	80021d0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80021c2:	6878      	ldr	r0, [r7, #4]
 80021c4:	f000 f99d 	bl	8002502 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2200      	movs	r2, #0
 80021cc:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80021ce:	e175      	b.n	80024bc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80021d0:	bf00      	nop
    return;
 80021d2:	e173      	b.n	80024bc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021d8:	2b01      	cmp	r3, #1
 80021da:	f040 814f 	bne.w	800247c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80021de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80021e2:	f003 0310 	and.w	r3, r3, #16
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	f000 8148 	beq.w	800247c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80021ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80021f0:	f003 0310 	and.w	r3, r3, #16
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	f000 8141 	beq.w	800247c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80021fa:	2300      	movs	r3, #0
 80021fc:	60bb      	str	r3, [r7, #8]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	60bb      	str	r3, [r7, #8]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	60bb      	str	r3, [r7, #8]
 800220e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	695b      	ldr	r3, [r3, #20]
 8002216:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800221a:	2b00      	cmp	r3, #0
 800221c:	f000 80b6 	beq.w	800238c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800222c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002230:	2b00      	cmp	r3, #0
 8002232:	f000 8145 	beq.w	80024c0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800223a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800223e:	429a      	cmp	r2, r3
 8002240:	f080 813e 	bcs.w	80024c0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800224a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002250:	699b      	ldr	r3, [r3, #24]
 8002252:	2b20      	cmp	r3, #32
 8002254:	f000 8088 	beq.w	8002368 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	330c      	adds	r3, #12
 800225e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002262:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002266:	e853 3f00 	ldrex	r3, [r3]
 800226a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800226e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002272:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002276:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	330c      	adds	r3, #12
 8002280:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8002284:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002288:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800228c:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002290:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002294:	e841 2300 	strex	r3, r2, [r1]
 8002298:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800229c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d1d9      	bne.n	8002258 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	3314      	adds	r3, #20
 80022aa:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022ac:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80022ae:	e853 3f00 	ldrex	r3, [r3]
 80022b2:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80022b4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80022b6:	f023 0301 	bic.w	r3, r3, #1
 80022ba:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	3314      	adds	r3, #20
 80022c4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80022c8:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80022cc:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022ce:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80022d0:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80022d4:	e841 2300 	strex	r3, r2, [r1]
 80022d8:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80022da:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d1e1      	bne.n	80022a4 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	3314      	adds	r3, #20
 80022e6:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022e8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80022ea:	e853 3f00 	ldrex	r3, [r3]
 80022ee:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80022f0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80022f2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80022f6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	3314      	adds	r3, #20
 8002300:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002304:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002306:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002308:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800230a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800230c:	e841 2300 	strex	r3, r2, [r1]
 8002310:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002312:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002314:	2b00      	cmp	r3, #0
 8002316:	d1e3      	bne.n	80022e0 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2220      	movs	r2, #32
 800231c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2200      	movs	r2, #0
 8002324:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	330c      	adds	r3, #12
 800232c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800232e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002330:	e853 3f00 	ldrex	r3, [r3]
 8002334:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002336:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002338:	f023 0310 	bic.w	r3, r3, #16
 800233c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	330c      	adds	r3, #12
 8002346:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800234a:	65ba      	str	r2, [r7, #88]	@ 0x58
 800234c:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800234e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002350:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002352:	e841 2300 	strex	r3, r2, [r1]
 8002356:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002358:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800235a:	2b00      	cmp	r3, #0
 800235c:	d1e3      	bne.n	8002326 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002362:	4618      	mov	r0, r3
 8002364:	f7fe fcde 	bl	8000d24 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2202      	movs	r2, #2
 800236c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002376:	b29b      	uxth	r3, r3
 8002378:	1ad3      	subs	r3, r2, r3
 800237a:	b29b      	uxth	r3, r3
 800237c:	4619      	mov	r1, r3
 800237e:	6878      	ldr	r0, [r7, #4]
 8002380:	f000 f8c8 	bl	8002514 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002384:	e09c      	b.n	80024c0 <HAL_UART_IRQHandler+0x518>
 8002386:	bf00      	nop
 8002388:	08002b47 	.word	0x08002b47
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002394:	b29b      	uxth	r3, r3
 8002396:	1ad3      	subs	r3, r2, r3
 8002398:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80023a0:	b29b      	uxth	r3, r3
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	f000 808e 	beq.w	80024c4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80023a8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	f000 8089 	beq.w	80024c4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	330c      	adds	r3, #12
 80023b8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80023bc:	e853 3f00 	ldrex	r3, [r3]
 80023c0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80023c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80023c4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80023c8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	330c      	adds	r3, #12
 80023d2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80023d6:	647a      	str	r2, [r7, #68]	@ 0x44
 80023d8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023da:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80023dc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80023de:	e841 2300 	strex	r3, r2, [r1]
 80023e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80023e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d1e3      	bne.n	80023b2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	3314      	adds	r3, #20
 80023f0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023f4:	e853 3f00 	ldrex	r3, [r3]
 80023f8:	623b      	str	r3, [r7, #32]
   return(result);
 80023fa:	6a3b      	ldr	r3, [r7, #32]
 80023fc:	f023 0301 	bic.w	r3, r3, #1
 8002400:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	3314      	adds	r3, #20
 800240a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800240e:	633a      	str	r2, [r7, #48]	@ 0x30
 8002410:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002412:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002414:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002416:	e841 2300 	strex	r3, r2, [r1]
 800241a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800241c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800241e:	2b00      	cmp	r3, #0
 8002420:	d1e3      	bne.n	80023ea <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2220      	movs	r2, #32
 8002426:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2200      	movs	r2, #0
 800242e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	330c      	adds	r3, #12
 8002436:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002438:	693b      	ldr	r3, [r7, #16]
 800243a:	e853 3f00 	ldrex	r3, [r3]
 800243e:	60fb      	str	r3, [r7, #12]
   return(result);
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	f023 0310 	bic.w	r3, r3, #16
 8002446:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	330c      	adds	r3, #12
 8002450:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8002454:	61fa      	str	r2, [r7, #28]
 8002456:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002458:	69b9      	ldr	r1, [r7, #24]
 800245a:	69fa      	ldr	r2, [r7, #28]
 800245c:	e841 2300 	strex	r3, r2, [r1]
 8002460:	617b      	str	r3, [r7, #20]
   return(result);
 8002462:	697b      	ldr	r3, [r7, #20]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d1e3      	bne.n	8002430 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2202      	movs	r2, #2
 800246c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800246e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002472:	4619      	mov	r1, r3
 8002474:	6878      	ldr	r0, [r7, #4]
 8002476:	f000 f84d 	bl	8002514 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800247a:	e023      	b.n	80024c4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800247c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002480:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002484:	2b00      	cmp	r3, #0
 8002486:	d009      	beq.n	800249c <HAL_UART_IRQHandler+0x4f4>
 8002488:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800248c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002490:	2b00      	cmp	r3, #0
 8002492:	d003      	beq.n	800249c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002494:	6878      	ldr	r0, [r7, #4]
 8002496:	f000 fb6a 	bl	8002b6e <UART_Transmit_IT>
    return;
 800249a:	e014      	b.n	80024c6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800249c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80024a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d00e      	beq.n	80024c6 <HAL_UART_IRQHandler+0x51e>
 80024a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80024ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d008      	beq.n	80024c6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80024b4:	6878      	ldr	r0, [r7, #4]
 80024b6:	f000 fba9 	bl	8002c0c <UART_EndTransmit_IT>
    return;
 80024ba:	e004      	b.n	80024c6 <HAL_UART_IRQHandler+0x51e>
    return;
 80024bc:	bf00      	nop
 80024be:	e002      	b.n	80024c6 <HAL_UART_IRQHandler+0x51e>
      return;
 80024c0:	bf00      	nop
 80024c2:	e000      	b.n	80024c6 <HAL_UART_IRQHandler+0x51e>
      return;
 80024c4:	bf00      	nop
  }
}
 80024c6:	37e8      	adds	r7, #232	@ 0xe8
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd80      	pop	{r7, pc}

080024cc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80024cc:	b480      	push	{r7}
 80024ce:	b083      	sub	sp, #12
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80024d4:	bf00      	nop
 80024d6:	370c      	adds	r7, #12
 80024d8:	46bd      	mov	sp, r7
 80024da:	bc80      	pop	{r7}
 80024dc:	4770      	bx	lr

080024de <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80024de:	b480      	push	{r7}
 80024e0:	b083      	sub	sp, #12
 80024e2:	af00      	add	r7, sp, #0
 80024e4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80024e6:	bf00      	nop
 80024e8:	370c      	adds	r7, #12
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bc80      	pop	{r7}
 80024ee:	4770      	bx	lr

080024f0 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b083      	sub	sp, #12
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80024f8:	bf00      	nop
 80024fa:	370c      	adds	r7, #12
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bc80      	pop	{r7}
 8002500:	4770      	bx	lr

08002502 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002502:	b480      	push	{r7}
 8002504:	b083      	sub	sp, #12
 8002506:	af00      	add	r7, sp, #0
 8002508:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800250a:	bf00      	nop
 800250c:	370c      	adds	r7, #12
 800250e:	46bd      	mov	sp, r7
 8002510:	bc80      	pop	{r7}
 8002512:	4770      	bx	lr

08002514 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002514:	b480      	push	{r7}
 8002516:	b083      	sub	sp, #12
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
 800251c:	460b      	mov	r3, r1
 800251e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002520:	bf00      	nop
 8002522:	370c      	adds	r7, #12
 8002524:	46bd      	mov	sp, r7
 8002526:	bc80      	pop	{r7}
 8002528:	4770      	bx	lr

0800252a <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800252a:	b580      	push	{r7, lr}
 800252c:	b090      	sub	sp, #64	@ 0x40
 800252e:	af00      	add	r7, sp, #0
 8002530:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002536:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f003 0320 	and.w	r3, r3, #32
 8002542:	2b00      	cmp	r3, #0
 8002544:	d137      	bne.n	80025b6 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8002546:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002548:	2200      	movs	r2, #0
 800254a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800254c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	3314      	adds	r3, #20
 8002552:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002554:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002556:	e853 3f00 	ldrex	r3, [r3]
 800255a:	623b      	str	r3, [r7, #32]
   return(result);
 800255c:	6a3b      	ldr	r3, [r7, #32]
 800255e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002562:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002564:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	3314      	adds	r3, #20
 800256a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800256c:	633a      	str	r2, [r7, #48]	@ 0x30
 800256e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002570:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002572:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002574:	e841 2300 	strex	r3, r2, [r1]
 8002578:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800257a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800257c:	2b00      	cmp	r3, #0
 800257e:	d1e5      	bne.n	800254c <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002580:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	330c      	adds	r3, #12
 8002586:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002588:	693b      	ldr	r3, [r7, #16]
 800258a:	e853 3f00 	ldrex	r3, [r3]
 800258e:	60fb      	str	r3, [r7, #12]
   return(result);
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002596:	637b      	str	r3, [r7, #52]	@ 0x34
 8002598:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	330c      	adds	r3, #12
 800259e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80025a0:	61fa      	str	r2, [r7, #28]
 80025a2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025a4:	69b9      	ldr	r1, [r7, #24]
 80025a6:	69fa      	ldr	r2, [r7, #28]
 80025a8:	e841 2300 	strex	r3, r2, [r1]
 80025ac:	617b      	str	r3, [r7, #20]
   return(result);
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d1e5      	bne.n	8002580 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80025b4:	e002      	b.n	80025bc <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80025b6:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80025b8:	f7ff ff88 	bl	80024cc <HAL_UART_TxCpltCallback>
}
 80025bc:	bf00      	nop
 80025be:	3740      	adds	r7, #64	@ 0x40
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}

080025c4 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b084      	sub	sp, #16
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025d0:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80025d2:	68f8      	ldr	r0, [r7, #12]
 80025d4:	f7ff ff83 	bl	80024de <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80025d8:	bf00      	nop
 80025da:	3710      	adds	r7, #16
 80025dc:	46bd      	mov	sp, r7
 80025de:	bd80      	pop	{r7, pc}

080025e0 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b09c      	sub	sp, #112	@ 0x70
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025ec:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f003 0320 	and.w	r3, r3, #32
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d172      	bne.n	80026e2 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80025fc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80025fe:	2200      	movs	r2, #0
 8002600:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002602:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	330c      	adds	r3, #12
 8002608:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800260a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800260c:	e853 3f00 	ldrex	r3, [r3]
 8002610:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002612:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002614:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002618:	66bb      	str	r3, [r7, #104]	@ 0x68
 800261a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	330c      	adds	r3, #12
 8002620:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8002622:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002624:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002626:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002628:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800262a:	e841 2300 	strex	r3, r2, [r1]
 800262e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002630:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002632:	2b00      	cmp	r3, #0
 8002634:	d1e5      	bne.n	8002602 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002636:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	3314      	adds	r3, #20
 800263c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800263e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002640:	e853 3f00 	ldrex	r3, [r3]
 8002644:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002646:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002648:	f023 0301 	bic.w	r3, r3, #1
 800264c:	667b      	str	r3, [r7, #100]	@ 0x64
 800264e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	3314      	adds	r3, #20
 8002654:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8002656:	647a      	str	r2, [r7, #68]	@ 0x44
 8002658:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800265a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800265c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800265e:	e841 2300 	strex	r3, r2, [r1]
 8002662:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002664:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002666:	2b00      	cmp	r3, #0
 8002668:	d1e5      	bne.n	8002636 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800266a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	3314      	adds	r3, #20
 8002670:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002672:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002674:	e853 3f00 	ldrex	r3, [r3]
 8002678:	623b      	str	r3, [r7, #32]
   return(result);
 800267a:	6a3b      	ldr	r3, [r7, #32]
 800267c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002680:	663b      	str	r3, [r7, #96]	@ 0x60
 8002682:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	3314      	adds	r3, #20
 8002688:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800268a:	633a      	str	r2, [r7, #48]	@ 0x30
 800268c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800268e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002690:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002692:	e841 2300 	strex	r3, r2, [r1]
 8002696:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002698:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800269a:	2b00      	cmp	r3, #0
 800269c:	d1e5      	bne.n	800266a <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800269e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80026a0:	2220      	movs	r2, #32
 80026a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80026a6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80026a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026aa:	2b01      	cmp	r3, #1
 80026ac:	d119      	bne.n	80026e2 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80026ae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	330c      	adds	r3, #12
 80026b4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026b6:	693b      	ldr	r3, [r7, #16]
 80026b8:	e853 3f00 	ldrex	r3, [r3]
 80026bc:	60fb      	str	r3, [r7, #12]
   return(result);
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	f023 0310 	bic.w	r3, r3, #16
 80026c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80026c6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	330c      	adds	r3, #12
 80026cc:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80026ce:	61fa      	str	r2, [r7, #28]
 80026d0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026d2:	69b9      	ldr	r1, [r7, #24]
 80026d4:	69fa      	ldr	r2, [r7, #28]
 80026d6:	e841 2300 	strex	r3, r2, [r1]
 80026da:	617b      	str	r3, [r7, #20]
   return(result);
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d1e5      	bne.n	80026ae <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80026e2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80026e4:	2200      	movs	r2, #0
 80026e6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80026e8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80026ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ec:	2b01      	cmp	r3, #1
 80026ee:	d106      	bne.n	80026fe <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80026f0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80026f2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80026f4:	4619      	mov	r1, r3
 80026f6:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80026f8:	f7ff ff0c 	bl	8002514 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80026fc:	e002      	b.n	8002704 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80026fe:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8002700:	f7fd ff18 	bl	8000534 <HAL_UART_RxCpltCallback>
}
 8002704:	bf00      	nop
 8002706:	3770      	adds	r7, #112	@ 0x70
 8002708:	46bd      	mov	sp, r7
 800270a:	bd80      	pop	{r7, pc}

0800270c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b084      	sub	sp, #16
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002718:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	2201      	movs	r2, #1
 800271e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002724:	2b01      	cmp	r3, #1
 8002726:	d108      	bne.n	800273a <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800272c:	085b      	lsrs	r3, r3, #1
 800272e:	b29b      	uxth	r3, r3
 8002730:	4619      	mov	r1, r3
 8002732:	68f8      	ldr	r0, [r7, #12]
 8002734:	f7ff feee 	bl	8002514 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002738:	e002      	b.n	8002740 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800273a:	68f8      	ldr	r0, [r7, #12]
 800273c:	f7ff fed8 	bl	80024f0 <HAL_UART_RxHalfCpltCallback>
}
 8002740:	bf00      	nop
 8002742:	3710      	adds	r7, #16
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}

08002748 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b084      	sub	sp, #16
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8002750:	2300      	movs	r3, #0
 8002752:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002758:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800275a:	68bb      	ldr	r3, [r7, #8]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	695b      	ldr	r3, [r3, #20]
 8002760:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002764:	2b00      	cmp	r3, #0
 8002766:	bf14      	ite	ne
 8002768:	2301      	movne	r3, #1
 800276a:	2300      	moveq	r3, #0
 800276c:	b2db      	uxtb	r3, r3
 800276e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8002770:	68bb      	ldr	r3, [r7, #8]
 8002772:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002776:	b2db      	uxtb	r3, r3
 8002778:	2b21      	cmp	r3, #33	@ 0x21
 800277a:	d108      	bne.n	800278e <UART_DMAError+0x46>
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d005      	beq.n	800278e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8002782:	68bb      	ldr	r3, [r7, #8]
 8002784:	2200      	movs	r2, #0
 8002786:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8002788:	68b8      	ldr	r0, [r7, #8]
 800278a:	f000 f953 	bl	8002a34 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800278e:	68bb      	ldr	r3, [r7, #8]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	695b      	ldr	r3, [r3, #20]
 8002794:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002798:	2b00      	cmp	r3, #0
 800279a:	bf14      	ite	ne
 800279c:	2301      	movne	r3, #1
 800279e:	2300      	moveq	r3, #0
 80027a0:	b2db      	uxtb	r3, r3
 80027a2:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80027a4:	68bb      	ldr	r3, [r7, #8]
 80027a6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80027aa:	b2db      	uxtb	r3, r3
 80027ac:	2b22      	cmp	r3, #34	@ 0x22
 80027ae:	d108      	bne.n	80027c2 <UART_DMAError+0x7a>
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d005      	beq.n	80027c2 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80027b6:	68bb      	ldr	r3, [r7, #8]
 80027b8:	2200      	movs	r2, #0
 80027ba:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 80027bc:	68b8      	ldr	r0, [r7, #8]
 80027be:	f000 f960 	bl	8002a82 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80027c2:	68bb      	ldr	r3, [r7, #8]
 80027c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027c6:	f043 0210 	orr.w	r2, r3, #16
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80027ce:	68b8      	ldr	r0, [r7, #8]
 80027d0:	f7ff fe97 	bl	8002502 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80027d4:	bf00      	nop
 80027d6:	3710      	adds	r7, #16
 80027d8:	46bd      	mov	sp, r7
 80027da:	bd80      	pop	{r7, pc}

080027dc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b086      	sub	sp, #24
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	60f8      	str	r0, [r7, #12]
 80027e4:	60b9      	str	r1, [r7, #8]
 80027e6:	603b      	str	r3, [r7, #0]
 80027e8:	4613      	mov	r3, r2
 80027ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80027ec:	e03b      	b.n	8002866 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027ee:	6a3b      	ldr	r3, [r7, #32]
 80027f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027f4:	d037      	beq.n	8002866 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027f6:	f7fe f8c3 	bl	8000980 <HAL_GetTick>
 80027fa:	4602      	mov	r2, r0
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	1ad3      	subs	r3, r2, r3
 8002800:	6a3a      	ldr	r2, [r7, #32]
 8002802:	429a      	cmp	r2, r3
 8002804:	d302      	bcc.n	800280c <UART_WaitOnFlagUntilTimeout+0x30>
 8002806:	6a3b      	ldr	r3, [r7, #32]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d101      	bne.n	8002810 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800280c:	2303      	movs	r3, #3
 800280e:	e03a      	b.n	8002886 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	68db      	ldr	r3, [r3, #12]
 8002816:	f003 0304 	and.w	r3, r3, #4
 800281a:	2b00      	cmp	r3, #0
 800281c:	d023      	beq.n	8002866 <UART_WaitOnFlagUntilTimeout+0x8a>
 800281e:	68bb      	ldr	r3, [r7, #8]
 8002820:	2b80      	cmp	r3, #128	@ 0x80
 8002822:	d020      	beq.n	8002866 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002824:	68bb      	ldr	r3, [r7, #8]
 8002826:	2b40      	cmp	r3, #64	@ 0x40
 8002828:	d01d      	beq.n	8002866 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f003 0308 	and.w	r3, r3, #8
 8002834:	2b08      	cmp	r3, #8
 8002836:	d116      	bne.n	8002866 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002838:	2300      	movs	r3, #0
 800283a:	617b      	str	r3, [r7, #20]
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	617b      	str	r3, [r7, #20]
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	617b      	str	r3, [r7, #20]
 800284c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800284e:	68f8      	ldr	r0, [r7, #12]
 8002850:	f000 f917 	bl	8002a82 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	2208      	movs	r2, #8
 8002858:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	2200      	movs	r2, #0
 800285e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002862:	2301      	movs	r3, #1
 8002864:	e00f      	b.n	8002886 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	681a      	ldr	r2, [r3, #0]
 800286c:	68bb      	ldr	r3, [r7, #8]
 800286e:	4013      	ands	r3, r2
 8002870:	68ba      	ldr	r2, [r7, #8]
 8002872:	429a      	cmp	r2, r3
 8002874:	bf0c      	ite	eq
 8002876:	2301      	moveq	r3, #1
 8002878:	2300      	movne	r3, #0
 800287a:	b2db      	uxtb	r3, r3
 800287c:	461a      	mov	r2, r3
 800287e:	79fb      	ldrb	r3, [r7, #7]
 8002880:	429a      	cmp	r2, r3
 8002882:	d0b4      	beq.n	80027ee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002884:	2300      	movs	r3, #0
}
 8002886:	4618      	mov	r0, r3
 8002888:	3718      	adds	r7, #24
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}

0800288e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800288e:	b480      	push	{r7}
 8002890:	b085      	sub	sp, #20
 8002892:	af00      	add	r7, sp, #0
 8002894:	60f8      	str	r0, [r7, #12]
 8002896:	60b9      	str	r1, [r7, #8]
 8002898:	4613      	mov	r3, r2
 800289a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	68ba      	ldr	r2, [r7, #8]
 80028a0:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	88fa      	ldrh	r2, [r7, #6]
 80028a6:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	88fa      	ldrh	r2, [r7, #6]
 80028ac:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	2200      	movs	r2, #0
 80028b2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	2222      	movs	r2, #34	@ 0x22
 80028b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	691b      	ldr	r3, [r3, #16]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d007      	beq.n	80028d4 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	68da      	ldr	r2, [r3, #12]
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80028d2:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	695a      	ldr	r2, [r3, #20]
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f042 0201 	orr.w	r2, r2, #1
 80028e2:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	68da      	ldr	r2, [r3, #12]
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f042 0220 	orr.w	r2, r2, #32
 80028f2:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80028f4:	2300      	movs	r3, #0
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	3714      	adds	r7, #20
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bc80      	pop	{r7}
 80028fe:	4770      	bx	lr

08002900 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b098      	sub	sp, #96	@ 0x60
 8002904:	af00      	add	r7, sp, #0
 8002906:	60f8      	str	r0, [r7, #12]
 8002908:	60b9      	str	r1, [r7, #8]
 800290a:	4613      	mov	r3, r2
 800290c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800290e:	68ba      	ldr	r2, [r7, #8]
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	88fa      	ldrh	r2, [r7, #6]
 8002918:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	2200      	movs	r2, #0
 800291e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	2222      	movs	r2, #34	@ 0x22
 8002924:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800292c:	4a3e      	ldr	r2, [pc, #248]	@ (8002a28 <UART_Start_Receive_DMA+0x128>)
 800292e:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002934:	4a3d      	ldr	r2, [pc, #244]	@ (8002a2c <UART_Start_Receive_DMA+0x12c>)
 8002936:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800293c:	4a3c      	ldr	r2, [pc, #240]	@ (8002a30 <UART_Start_Receive_DMA+0x130>)
 800293e:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002944:	2200      	movs	r2, #0
 8002946:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8002948:	f107 0308 	add.w	r3, r7, #8
 800294c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	3304      	adds	r3, #4
 8002958:	4619      	mov	r1, r3
 800295a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800295c:	681a      	ldr	r2, [r3, #0]
 800295e:	88fb      	ldrh	r3, [r7, #6]
 8002960:	f7fe f980 	bl	8000c64 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8002964:	2300      	movs	r3, #0
 8002966:	613b      	str	r3, [r7, #16]
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	613b      	str	r3, [r7, #16]
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	613b      	str	r3, [r7, #16]
 8002978:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	691b      	ldr	r3, [r3, #16]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d019      	beq.n	80029b6 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	330c      	adds	r3, #12
 8002988:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800298a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800298c:	e853 3f00 	ldrex	r3, [r3]
 8002990:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002992:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002994:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002998:	65bb      	str	r3, [r7, #88]	@ 0x58
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	330c      	adds	r3, #12
 80029a0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80029a2:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80029a4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029a6:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80029a8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80029aa:	e841 2300 	strex	r3, r2, [r1]
 80029ae:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80029b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d1e5      	bne.n	8002982 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	3314      	adds	r3, #20
 80029bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029c0:	e853 3f00 	ldrex	r3, [r3]
 80029c4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80029c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029c8:	f043 0301 	orr.w	r3, r3, #1
 80029cc:	657b      	str	r3, [r7, #84]	@ 0x54
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	3314      	adds	r3, #20
 80029d4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80029d6:	63ba      	str	r2, [r7, #56]	@ 0x38
 80029d8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029da:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80029dc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80029de:	e841 2300 	strex	r3, r2, [r1]
 80029e2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80029e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d1e5      	bne.n	80029b6 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	3314      	adds	r3, #20
 80029f0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029f2:	69bb      	ldr	r3, [r7, #24]
 80029f4:	e853 3f00 	ldrex	r3, [r3]
 80029f8:	617b      	str	r3, [r7, #20]
   return(result);
 80029fa:	697b      	ldr	r3, [r7, #20]
 80029fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002a00:	653b      	str	r3, [r7, #80]	@ 0x50
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	3314      	adds	r3, #20
 8002a08:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8002a0a:	627a      	str	r2, [r7, #36]	@ 0x24
 8002a0c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a0e:	6a39      	ldr	r1, [r7, #32]
 8002a10:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a12:	e841 2300 	strex	r3, r2, [r1]
 8002a16:	61fb      	str	r3, [r7, #28]
   return(result);
 8002a18:	69fb      	ldr	r3, [r7, #28]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d1e5      	bne.n	80029ea <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8002a1e:	2300      	movs	r3, #0
}
 8002a20:	4618      	mov	r0, r3
 8002a22:	3760      	adds	r7, #96	@ 0x60
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bd80      	pop	{r7, pc}
 8002a28:	080025e1 	.word	0x080025e1
 8002a2c:	0800270d 	.word	0x0800270d
 8002a30:	08002749 	.word	0x08002749

08002a34 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8002a34:	b480      	push	{r7}
 8002a36:	b089      	sub	sp, #36	@ 0x24
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	330c      	adds	r3, #12
 8002a42:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	e853 3f00 	ldrex	r3, [r3]
 8002a4a:	60bb      	str	r3, [r7, #8]
   return(result);
 8002a4c:	68bb      	ldr	r3, [r7, #8]
 8002a4e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8002a52:	61fb      	str	r3, [r7, #28]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	330c      	adds	r3, #12
 8002a5a:	69fa      	ldr	r2, [r7, #28]
 8002a5c:	61ba      	str	r2, [r7, #24]
 8002a5e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a60:	6979      	ldr	r1, [r7, #20]
 8002a62:	69ba      	ldr	r2, [r7, #24]
 8002a64:	e841 2300 	strex	r3, r2, [r1]
 8002a68:	613b      	str	r3, [r7, #16]
   return(result);
 8002a6a:	693b      	ldr	r3, [r7, #16]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d1e5      	bne.n	8002a3c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2220      	movs	r2, #32
 8002a74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8002a78:	bf00      	nop
 8002a7a:	3724      	adds	r7, #36	@ 0x24
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bc80      	pop	{r7}
 8002a80:	4770      	bx	lr

08002a82 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002a82:	b480      	push	{r7}
 8002a84:	b095      	sub	sp, #84	@ 0x54
 8002a86:	af00      	add	r7, sp, #0
 8002a88:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	330c      	adds	r3, #12
 8002a90:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a94:	e853 3f00 	ldrex	r3, [r3]
 8002a98:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002a9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a9c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002aa0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	330c      	adds	r3, #12
 8002aa8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002aaa:	643a      	str	r2, [r7, #64]	@ 0x40
 8002aac:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002aae:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002ab0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002ab2:	e841 2300 	strex	r3, r2, [r1]
 8002ab6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002ab8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d1e5      	bne.n	8002a8a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	3314      	adds	r3, #20
 8002ac4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ac6:	6a3b      	ldr	r3, [r7, #32]
 8002ac8:	e853 3f00 	ldrex	r3, [r3]
 8002acc:	61fb      	str	r3, [r7, #28]
   return(result);
 8002ace:	69fb      	ldr	r3, [r7, #28]
 8002ad0:	f023 0301 	bic.w	r3, r3, #1
 8002ad4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	3314      	adds	r3, #20
 8002adc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002ade:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002ae0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ae2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002ae4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002ae6:	e841 2300 	strex	r3, r2, [r1]
 8002aea:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002aec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d1e5      	bne.n	8002abe <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002af6:	2b01      	cmp	r3, #1
 8002af8:	d119      	bne.n	8002b2e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	330c      	adds	r3, #12
 8002b00:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	e853 3f00 	ldrex	r3, [r3]
 8002b08:	60bb      	str	r3, [r7, #8]
   return(result);
 8002b0a:	68bb      	ldr	r3, [r7, #8]
 8002b0c:	f023 0310 	bic.w	r3, r3, #16
 8002b10:	647b      	str	r3, [r7, #68]	@ 0x44
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	330c      	adds	r3, #12
 8002b18:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002b1a:	61ba      	str	r2, [r7, #24]
 8002b1c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b1e:	6979      	ldr	r1, [r7, #20]
 8002b20:	69ba      	ldr	r2, [r7, #24]
 8002b22:	e841 2300 	strex	r3, r2, [r1]
 8002b26:	613b      	str	r3, [r7, #16]
   return(result);
 8002b28:	693b      	ldr	r3, [r7, #16]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d1e5      	bne.n	8002afa <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2220      	movs	r2, #32
 8002b32:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002b3c:	bf00      	nop
 8002b3e:	3754      	adds	r7, #84	@ 0x54
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bc80      	pop	{r7}
 8002b44:	4770      	bx	lr

08002b46 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002b46:	b580      	push	{r7, lr}
 8002b48:	b084      	sub	sp, #16
 8002b4a:	af00      	add	r7, sp, #0
 8002b4c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b52:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	2200      	movs	r2, #0
 8002b58:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002b60:	68f8      	ldr	r0, [r7, #12]
 8002b62:	f7ff fcce 	bl	8002502 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002b66:	bf00      	nop
 8002b68:	3710      	adds	r7, #16
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}

08002b6e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002b6e:	b480      	push	{r7}
 8002b70:	b085      	sub	sp, #20
 8002b72:	af00      	add	r7, sp, #0
 8002b74:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b7c:	b2db      	uxtb	r3, r3
 8002b7e:	2b21      	cmp	r3, #33	@ 0x21
 8002b80:	d13e      	bne.n	8002c00 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	689b      	ldr	r3, [r3, #8]
 8002b86:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002b8a:	d114      	bne.n	8002bb6 <UART_Transmit_IT+0x48>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	691b      	ldr	r3, [r3, #16]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d110      	bne.n	8002bb6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6a1b      	ldr	r3, [r3, #32]
 8002b98:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	881b      	ldrh	r3, [r3, #0]
 8002b9e:	461a      	mov	r2, r3
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002ba8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6a1b      	ldr	r3, [r3, #32]
 8002bae:	1c9a      	adds	r2, r3, #2
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	621a      	str	r2, [r3, #32]
 8002bb4:	e008      	b.n	8002bc8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6a1b      	ldr	r3, [r3, #32]
 8002bba:	1c59      	adds	r1, r3, #1
 8002bbc:	687a      	ldr	r2, [r7, #4]
 8002bbe:	6211      	str	r1, [r2, #32]
 8002bc0:	781a      	ldrb	r2, [r3, #0]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002bcc:	b29b      	uxth	r3, r3
 8002bce:	3b01      	subs	r3, #1
 8002bd0:	b29b      	uxth	r3, r3
 8002bd2:	687a      	ldr	r2, [r7, #4]
 8002bd4:	4619      	mov	r1, r3
 8002bd6:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d10f      	bne.n	8002bfc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	68da      	ldr	r2, [r3, #12]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002bea:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	68da      	ldr	r2, [r3, #12]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002bfa:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	e000      	b.n	8002c02 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002c00:	2302      	movs	r3, #2
  }
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	3714      	adds	r7, #20
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bc80      	pop	{r7}
 8002c0a:	4770      	bx	lr

08002c0c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b082      	sub	sp, #8
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	68da      	ldr	r2, [r3, #12]
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002c22:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2220      	movs	r2, #32
 8002c28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002c2c:	6878      	ldr	r0, [r7, #4]
 8002c2e:	f7ff fc4d 	bl	80024cc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002c32:	2300      	movs	r3, #0
}
 8002c34:	4618      	mov	r0, r3
 8002c36:	3708      	adds	r7, #8
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bd80      	pop	{r7, pc}

08002c3c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b08c      	sub	sp, #48	@ 0x30
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002c4a:	b2db      	uxtb	r3, r3
 8002c4c:	2b22      	cmp	r3, #34	@ 0x22
 8002c4e:	f040 80ae 	bne.w	8002dae <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002c5a:	d117      	bne.n	8002c8c <UART_Receive_IT+0x50>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	691b      	ldr	r3, [r3, #16]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d113      	bne.n	8002c8c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002c64:	2300      	movs	r3, #0
 8002c66:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c6c:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	b29b      	uxth	r3, r3
 8002c76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c7a:	b29a      	uxth	r2, r3
 8002c7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c7e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c84:	1c9a      	adds	r2, r3, #2
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	629a      	str	r2, [r3, #40]	@ 0x28
 8002c8a:	e026      	b.n	8002cda <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c90:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8002c92:	2300      	movs	r3, #0
 8002c94:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	689b      	ldr	r3, [r3, #8]
 8002c9a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002c9e:	d007      	beq.n	8002cb0 <UART_Receive_IT+0x74>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	689b      	ldr	r3, [r3, #8]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d10a      	bne.n	8002cbe <UART_Receive_IT+0x82>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	691b      	ldr	r3, [r3, #16]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d106      	bne.n	8002cbe <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	b2da      	uxtb	r2, r3
 8002cb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002cba:	701a      	strb	r2, [r3, #0]
 8002cbc:	e008      	b.n	8002cd0 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	b2db      	uxtb	r3, r3
 8002cc6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002cca:	b2da      	uxtb	r2, r3
 8002ccc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002cce:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cd4:	1c5a      	adds	r2, r3, #1
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002cde:	b29b      	uxth	r3, r3
 8002ce0:	3b01      	subs	r3, #1
 8002ce2:	b29b      	uxth	r3, r3
 8002ce4:	687a      	ldr	r2, [r7, #4]
 8002ce6:	4619      	mov	r1, r3
 8002ce8:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d15d      	bne.n	8002daa <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	68da      	ldr	r2, [r3, #12]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f022 0220 	bic.w	r2, r2, #32
 8002cfc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	68da      	ldr	r2, [r3, #12]
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002d0c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	695a      	ldr	r2, [r3, #20]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f022 0201 	bic.w	r2, r2, #1
 8002d1c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2220      	movs	r2, #32
 8002d22:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d30:	2b01      	cmp	r3, #1
 8002d32:	d135      	bne.n	8002da0 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2200      	movs	r2, #0
 8002d38:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	330c      	adds	r3, #12
 8002d40:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	e853 3f00 	ldrex	r3, [r3]
 8002d48:	613b      	str	r3, [r7, #16]
   return(result);
 8002d4a:	693b      	ldr	r3, [r7, #16]
 8002d4c:	f023 0310 	bic.w	r3, r3, #16
 8002d50:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	330c      	adds	r3, #12
 8002d58:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d5a:	623a      	str	r2, [r7, #32]
 8002d5c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d5e:	69f9      	ldr	r1, [r7, #28]
 8002d60:	6a3a      	ldr	r2, [r7, #32]
 8002d62:	e841 2300 	strex	r3, r2, [r1]
 8002d66:	61bb      	str	r3, [r7, #24]
   return(result);
 8002d68:	69bb      	ldr	r3, [r7, #24]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d1e5      	bne.n	8002d3a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f003 0310 	and.w	r3, r3, #16
 8002d78:	2b10      	cmp	r3, #16
 8002d7a:	d10a      	bne.n	8002d92 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	60fb      	str	r3, [r7, #12]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	60fb      	str	r3, [r7, #12]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	60fb      	str	r3, [r7, #12]
 8002d90:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002d96:	4619      	mov	r1, r3
 8002d98:	6878      	ldr	r0, [r7, #4]
 8002d9a:	f7ff fbbb 	bl	8002514 <HAL_UARTEx_RxEventCallback>
 8002d9e:	e002      	b.n	8002da6 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002da0:	6878      	ldr	r0, [r7, #4]
 8002da2:	f7fd fbc7 	bl	8000534 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002da6:	2300      	movs	r3, #0
 8002da8:	e002      	b.n	8002db0 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8002daa:	2300      	movs	r3, #0
 8002dac:	e000      	b.n	8002db0 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8002dae:	2302      	movs	r3, #2
  }
}
 8002db0:	4618      	mov	r0, r3
 8002db2:	3730      	adds	r7, #48	@ 0x30
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bd80      	pop	{r7, pc}

08002db8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b084      	sub	sp, #16
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	691b      	ldr	r3, [r3, #16]
 8002dc6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	68da      	ldr	r2, [r3, #12]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	430a      	orrs	r2, r1
 8002dd4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	689a      	ldr	r2, [r3, #8]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	691b      	ldr	r3, [r3, #16]
 8002dde:	431a      	orrs	r2, r3
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	695b      	ldr	r3, [r3, #20]
 8002de4:	4313      	orrs	r3, r2
 8002de6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	68db      	ldr	r3, [r3, #12]
 8002dee:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8002df2:	f023 030c 	bic.w	r3, r3, #12
 8002df6:	687a      	ldr	r2, [r7, #4]
 8002df8:	6812      	ldr	r2, [r2, #0]
 8002dfa:	68b9      	ldr	r1, [r7, #8]
 8002dfc:	430b      	orrs	r3, r1
 8002dfe:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	695b      	ldr	r3, [r3, #20]
 8002e06:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	699a      	ldr	r2, [r3, #24]
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	430a      	orrs	r2, r1
 8002e14:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4a2c      	ldr	r2, [pc, #176]	@ (8002ecc <UART_SetConfig+0x114>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d103      	bne.n	8002e28 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002e20:	f7fe fefa 	bl	8001c18 <HAL_RCC_GetPCLK2Freq>
 8002e24:	60f8      	str	r0, [r7, #12]
 8002e26:	e002      	b.n	8002e2e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002e28:	f7fe fee2 	bl	8001bf0 <HAL_RCC_GetPCLK1Freq>
 8002e2c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002e2e:	68fa      	ldr	r2, [r7, #12]
 8002e30:	4613      	mov	r3, r2
 8002e32:	009b      	lsls	r3, r3, #2
 8002e34:	4413      	add	r3, r2
 8002e36:	009a      	lsls	r2, r3, #2
 8002e38:	441a      	add	r2, r3
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	009b      	lsls	r3, r3, #2
 8002e40:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e44:	4a22      	ldr	r2, [pc, #136]	@ (8002ed0 <UART_SetConfig+0x118>)
 8002e46:	fba2 2303 	umull	r2, r3, r2, r3
 8002e4a:	095b      	lsrs	r3, r3, #5
 8002e4c:	0119      	lsls	r1, r3, #4
 8002e4e:	68fa      	ldr	r2, [r7, #12]
 8002e50:	4613      	mov	r3, r2
 8002e52:	009b      	lsls	r3, r3, #2
 8002e54:	4413      	add	r3, r2
 8002e56:	009a      	lsls	r2, r3, #2
 8002e58:	441a      	add	r2, r3
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	009b      	lsls	r3, r3, #2
 8002e60:	fbb2 f2f3 	udiv	r2, r2, r3
 8002e64:	4b1a      	ldr	r3, [pc, #104]	@ (8002ed0 <UART_SetConfig+0x118>)
 8002e66:	fba3 0302 	umull	r0, r3, r3, r2
 8002e6a:	095b      	lsrs	r3, r3, #5
 8002e6c:	2064      	movs	r0, #100	@ 0x64
 8002e6e:	fb00 f303 	mul.w	r3, r0, r3
 8002e72:	1ad3      	subs	r3, r2, r3
 8002e74:	011b      	lsls	r3, r3, #4
 8002e76:	3332      	adds	r3, #50	@ 0x32
 8002e78:	4a15      	ldr	r2, [pc, #84]	@ (8002ed0 <UART_SetConfig+0x118>)
 8002e7a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e7e:	095b      	lsrs	r3, r3, #5
 8002e80:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002e84:	4419      	add	r1, r3
 8002e86:	68fa      	ldr	r2, [r7, #12]
 8002e88:	4613      	mov	r3, r2
 8002e8a:	009b      	lsls	r3, r3, #2
 8002e8c:	4413      	add	r3, r2
 8002e8e:	009a      	lsls	r2, r3, #2
 8002e90:	441a      	add	r2, r3
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	009b      	lsls	r3, r3, #2
 8002e98:	fbb2 f2f3 	udiv	r2, r2, r3
 8002e9c:	4b0c      	ldr	r3, [pc, #48]	@ (8002ed0 <UART_SetConfig+0x118>)
 8002e9e:	fba3 0302 	umull	r0, r3, r3, r2
 8002ea2:	095b      	lsrs	r3, r3, #5
 8002ea4:	2064      	movs	r0, #100	@ 0x64
 8002ea6:	fb00 f303 	mul.w	r3, r0, r3
 8002eaa:	1ad3      	subs	r3, r2, r3
 8002eac:	011b      	lsls	r3, r3, #4
 8002eae:	3332      	adds	r3, #50	@ 0x32
 8002eb0:	4a07      	ldr	r2, [pc, #28]	@ (8002ed0 <UART_SetConfig+0x118>)
 8002eb2:	fba2 2303 	umull	r2, r3, r2, r3
 8002eb6:	095b      	lsrs	r3, r3, #5
 8002eb8:	f003 020f 	and.w	r2, r3, #15
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	440a      	add	r2, r1
 8002ec2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002ec4:	bf00      	nop
 8002ec6:	3710      	adds	r7, #16
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bd80      	pop	{r7, pc}
 8002ecc:	40013800 	.word	0x40013800
 8002ed0:	51eb851f 	.word	0x51eb851f

08002ed4 <std>:
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	b510      	push	{r4, lr}
 8002ed8:	4604      	mov	r4, r0
 8002eda:	e9c0 3300 	strd	r3, r3, [r0]
 8002ede:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002ee2:	6083      	str	r3, [r0, #8]
 8002ee4:	8181      	strh	r1, [r0, #12]
 8002ee6:	6643      	str	r3, [r0, #100]	@ 0x64
 8002ee8:	81c2      	strh	r2, [r0, #14]
 8002eea:	6183      	str	r3, [r0, #24]
 8002eec:	4619      	mov	r1, r3
 8002eee:	2208      	movs	r2, #8
 8002ef0:	305c      	adds	r0, #92	@ 0x5c
 8002ef2:	f000 f9e7 	bl	80032c4 <memset>
 8002ef6:	4b0d      	ldr	r3, [pc, #52]	@ (8002f2c <std+0x58>)
 8002ef8:	6224      	str	r4, [r4, #32]
 8002efa:	6263      	str	r3, [r4, #36]	@ 0x24
 8002efc:	4b0c      	ldr	r3, [pc, #48]	@ (8002f30 <std+0x5c>)
 8002efe:	62a3      	str	r3, [r4, #40]	@ 0x28
 8002f00:	4b0c      	ldr	r3, [pc, #48]	@ (8002f34 <std+0x60>)
 8002f02:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002f04:	4b0c      	ldr	r3, [pc, #48]	@ (8002f38 <std+0x64>)
 8002f06:	6323      	str	r3, [r4, #48]	@ 0x30
 8002f08:	4b0c      	ldr	r3, [pc, #48]	@ (8002f3c <std+0x68>)
 8002f0a:	429c      	cmp	r4, r3
 8002f0c:	d006      	beq.n	8002f1c <std+0x48>
 8002f0e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8002f12:	4294      	cmp	r4, r2
 8002f14:	d002      	beq.n	8002f1c <std+0x48>
 8002f16:	33d0      	adds	r3, #208	@ 0xd0
 8002f18:	429c      	cmp	r4, r3
 8002f1a:	d105      	bne.n	8002f28 <std+0x54>
 8002f1c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8002f20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002f24:	f000 ba46 	b.w	80033b4 <__retarget_lock_init_recursive>
 8002f28:	bd10      	pop	{r4, pc}
 8002f2a:	bf00      	nop
 8002f2c:	08003115 	.word	0x08003115
 8002f30:	08003137 	.word	0x08003137
 8002f34:	0800316f 	.word	0x0800316f
 8002f38:	08003193 	.word	0x08003193
 8002f3c:	20000164 	.word	0x20000164

08002f40 <stdio_exit_handler>:
 8002f40:	4a02      	ldr	r2, [pc, #8]	@ (8002f4c <stdio_exit_handler+0xc>)
 8002f42:	4903      	ldr	r1, [pc, #12]	@ (8002f50 <stdio_exit_handler+0x10>)
 8002f44:	4803      	ldr	r0, [pc, #12]	@ (8002f54 <stdio_exit_handler+0x14>)
 8002f46:	f000 b869 	b.w	800301c <_fwalk_sglue>
 8002f4a:	bf00      	nop
 8002f4c:	2000000c 	.word	0x2000000c
 8002f50:	080036a9 	.word	0x080036a9
 8002f54:	2000001c 	.word	0x2000001c

08002f58 <cleanup_stdio>:
 8002f58:	6841      	ldr	r1, [r0, #4]
 8002f5a:	4b0c      	ldr	r3, [pc, #48]	@ (8002f8c <cleanup_stdio+0x34>)
 8002f5c:	b510      	push	{r4, lr}
 8002f5e:	4299      	cmp	r1, r3
 8002f60:	4604      	mov	r4, r0
 8002f62:	d001      	beq.n	8002f68 <cleanup_stdio+0x10>
 8002f64:	f000 fba0 	bl	80036a8 <_fflush_r>
 8002f68:	68a1      	ldr	r1, [r4, #8]
 8002f6a:	4b09      	ldr	r3, [pc, #36]	@ (8002f90 <cleanup_stdio+0x38>)
 8002f6c:	4299      	cmp	r1, r3
 8002f6e:	d002      	beq.n	8002f76 <cleanup_stdio+0x1e>
 8002f70:	4620      	mov	r0, r4
 8002f72:	f000 fb99 	bl	80036a8 <_fflush_r>
 8002f76:	68e1      	ldr	r1, [r4, #12]
 8002f78:	4b06      	ldr	r3, [pc, #24]	@ (8002f94 <cleanup_stdio+0x3c>)
 8002f7a:	4299      	cmp	r1, r3
 8002f7c:	d004      	beq.n	8002f88 <cleanup_stdio+0x30>
 8002f7e:	4620      	mov	r0, r4
 8002f80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002f84:	f000 bb90 	b.w	80036a8 <_fflush_r>
 8002f88:	bd10      	pop	{r4, pc}
 8002f8a:	bf00      	nop
 8002f8c:	20000164 	.word	0x20000164
 8002f90:	200001cc 	.word	0x200001cc
 8002f94:	20000234 	.word	0x20000234

08002f98 <global_stdio_init.part.0>:
 8002f98:	b510      	push	{r4, lr}
 8002f9a:	4b0b      	ldr	r3, [pc, #44]	@ (8002fc8 <global_stdio_init.part.0+0x30>)
 8002f9c:	4c0b      	ldr	r4, [pc, #44]	@ (8002fcc <global_stdio_init.part.0+0x34>)
 8002f9e:	4a0c      	ldr	r2, [pc, #48]	@ (8002fd0 <global_stdio_init.part.0+0x38>)
 8002fa0:	4620      	mov	r0, r4
 8002fa2:	601a      	str	r2, [r3, #0]
 8002fa4:	2104      	movs	r1, #4
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	f7ff ff94 	bl	8002ed4 <std>
 8002fac:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8002fb0:	2201      	movs	r2, #1
 8002fb2:	2109      	movs	r1, #9
 8002fb4:	f7ff ff8e 	bl	8002ed4 <std>
 8002fb8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8002fbc:	2202      	movs	r2, #2
 8002fbe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002fc2:	2112      	movs	r1, #18
 8002fc4:	f7ff bf86 	b.w	8002ed4 <std>
 8002fc8:	2000029c 	.word	0x2000029c
 8002fcc:	20000164 	.word	0x20000164
 8002fd0:	08002f41 	.word	0x08002f41

08002fd4 <__sfp_lock_acquire>:
 8002fd4:	4801      	ldr	r0, [pc, #4]	@ (8002fdc <__sfp_lock_acquire+0x8>)
 8002fd6:	f000 b9ee 	b.w	80033b6 <__retarget_lock_acquire_recursive>
 8002fda:	bf00      	nop
 8002fdc:	200002a5 	.word	0x200002a5

08002fe0 <__sfp_lock_release>:
 8002fe0:	4801      	ldr	r0, [pc, #4]	@ (8002fe8 <__sfp_lock_release+0x8>)
 8002fe2:	f000 b9e9 	b.w	80033b8 <__retarget_lock_release_recursive>
 8002fe6:	bf00      	nop
 8002fe8:	200002a5 	.word	0x200002a5

08002fec <__sinit>:
 8002fec:	b510      	push	{r4, lr}
 8002fee:	4604      	mov	r4, r0
 8002ff0:	f7ff fff0 	bl	8002fd4 <__sfp_lock_acquire>
 8002ff4:	6a23      	ldr	r3, [r4, #32]
 8002ff6:	b11b      	cbz	r3, 8003000 <__sinit+0x14>
 8002ff8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002ffc:	f7ff bff0 	b.w	8002fe0 <__sfp_lock_release>
 8003000:	4b04      	ldr	r3, [pc, #16]	@ (8003014 <__sinit+0x28>)
 8003002:	6223      	str	r3, [r4, #32]
 8003004:	4b04      	ldr	r3, [pc, #16]	@ (8003018 <__sinit+0x2c>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d1f5      	bne.n	8002ff8 <__sinit+0xc>
 800300c:	f7ff ffc4 	bl	8002f98 <global_stdio_init.part.0>
 8003010:	e7f2      	b.n	8002ff8 <__sinit+0xc>
 8003012:	bf00      	nop
 8003014:	08002f59 	.word	0x08002f59
 8003018:	2000029c 	.word	0x2000029c

0800301c <_fwalk_sglue>:
 800301c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003020:	4607      	mov	r7, r0
 8003022:	4688      	mov	r8, r1
 8003024:	4614      	mov	r4, r2
 8003026:	2600      	movs	r6, #0
 8003028:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800302c:	f1b9 0901 	subs.w	r9, r9, #1
 8003030:	d505      	bpl.n	800303e <_fwalk_sglue+0x22>
 8003032:	6824      	ldr	r4, [r4, #0]
 8003034:	2c00      	cmp	r4, #0
 8003036:	d1f7      	bne.n	8003028 <_fwalk_sglue+0xc>
 8003038:	4630      	mov	r0, r6
 800303a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800303e:	89ab      	ldrh	r3, [r5, #12]
 8003040:	2b01      	cmp	r3, #1
 8003042:	d907      	bls.n	8003054 <_fwalk_sglue+0x38>
 8003044:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003048:	3301      	adds	r3, #1
 800304a:	d003      	beq.n	8003054 <_fwalk_sglue+0x38>
 800304c:	4629      	mov	r1, r5
 800304e:	4638      	mov	r0, r7
 8003050:	47c0      	blx	r8
 8003052:	4306      	orrs	r6, r0
 8003054:	3568      	adds	r5, #104	@ 0x68
 8003056:	e7e9      	b.n	800302c <_fwalk_sglue+0x10>

08003058 <_puts_r>:
 8003058:	6a03      	ldr	r3, [r0, #32]
 800305a:	b570      	push	{r4, r5, r6, lr}
 800305c:	4605      	mov	r5, r0
 800305e:	460e      	mov	r6, r1
 8003060:	6884      	ldr	r4, [r0, #8]
 8003062:	b90b      	cbnz	r3, 8003068 <_puts_r+0x10>
 8003064:	f7ff ffc2 	bl	8002fec <__sinit>
 8003068:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800306a:	07db      	lsls	r3, r3, #31
 800306c:	d405      	bmi.n	800307a <_puts_r+0x22>
 800306e:	89a3      	ldrh	r3, [r4, #12]
 8003070:	0598      	lsls	r0, r3, #22
 8003072:	d402      	bmi.n	800307a <_puts_r+0x22>
 8003074:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003076:	f000 f99e 	bl	80033b6 <__retarget_lock_acquire_recursive>
 800307a:	89a3      	ldrh	r3, [r4, #12]
 800307c:	0719      	lsls	r1, r3, #28
 800307e:	d502      	bpl.n	8003086 <_puts_r+0x2e>
 8003080:	6923      	ldr	r3, [r4, #16]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d135      	bne.n	80030f2 <_puts_r+0x9a>
 8003086:	4621      	mov	r1, r4
 8003088:	4628      	mov	r0, r5
 800308a:	f000 f8c5 	bl	8003218 <__swsetup_r>
 800308e:	b380      	cbz	r0, 80030f2 <_puts_r+0x9a>
 8003090:	f04f 35ff 	mov.w	r5, #4294967295
 8003094:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003096:	07da      	lsls	r2, r3, #31
 8003098:	d405      	bmi.n	80030a6 <_puts_r+0x4e>
 800309a:	89a3      	ldrh	r3, [r4, #12]
 800309c:	059b      	lsls	r3, r3, #22
 800309e:	d402      	bmi.n	80030a6 <_puts_r+0x4e>
 80030a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80030a2:	f000 f989 	bl	80033b8 <__retarget_lock_release_recursive>
 80030a6:	4628      	mov	r0, r5
 80030a8:	bd70      	pop	{r4, r5, r6, pc}
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	da04      	bge.n	80030b8 <_puts_r+0x60>
 80030ae:	69a2      	ldr	r2, [r4, #24]
 80030b0:	429a      	cmp	r2, r3
 80030b2:	dc17      	bgt.n	80030e4 <_puts_r+0x8c>
 80030b4:	290a      	cmp	r1, #10
 80030b6:	d015      	beq.n	80030e4 <_puts_r+0x8c>
 80030b8:	6823      	ldr	r3, [r4, #0]
 80030ba:	1c5a      	adds	r2, r3, #1
 80030bc:	6022      	str	r2, [r4, #0]
 80030be:	7019      	strb	r1, [r3, #0]
 80030c0:	68a3      	ldr	r3, [r4, #8]
 80030c2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80030c6:	3b01      	subs	r3, #1
 80030c8:	60a3      	str	r3, [r4, #8]
 80030ca:	2900      	cmp	r1, #0
 80030cc:	d1ed      	bne.n	80030aa <_puts_r+0x52>
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	da11      	bge.n	80030f6 <_puts_r+0x9e>
 80030d2:	4622      	mov	r2, r4
 80030d4:	210a      	movs	r1, #10
 80030d6:	4628      	mov	r0, r5
 80030d8:	f000 f85f 	bl	800319a <__swbuf_r>
 80030dc:	3001      	adds	r0, #1
 80030de:	d0d7      	beq.n	8003090 <_puts_r+0x38>
 80030e0:	250a      	movs	r5, #10
 80030e2:	e7d7      	b.n	8003094 <_puts_r+0x3c>
 80030e4:	4622      	mov	r2, r4
 80030e6:	4628      	mov	r0, r5
 80030e8:	f000 f857 	bl	800319a <__swbuf_r>
 80030ec:	3001      	adds	r0, #1
 80030ee:	d1e7      	bne.n	80030c0 <_puts_r+0x68>
 80030f0:	e7ce      	b.n	8003090 <_puts_r+0x38>
 80030f2:	3e01      	subs	r6, #1
 80030f4:	e7e4      	b.n	80030c0 <_puts_r+0x68>
 80030f6:	6823      	ldr	r3, [r4, #0]
 80030f8:	1c5a      	adds	r2, r3, #1
 80030fa:	6022      	str	r2, [r4, #0]
 80030fc:	220a      	movs	r2, #10
 80030fe:	701a      	strb	r2, [r3, #0]
 8003100:	e7ee      	b.n	80030e0 <_puts_r+0x88>
	...

08003104 <puts>:
 8003104:	4b02      	ldr	r3, [pc, #8]	@ (8003110 <puts+0xc>)
 8003106:	4601      	mov	r1, r0
 8003108:	6818      	ldr	r0, [r3, #0]
 800310a:	f7ff bfa5 	b.w	8003058 <_puts_r>
 800310e:	bf00      	nop
 8003110:	20000018 	.word	0x20000018

08003114 <__sread>:
 8003114:	b510      	push	{r4, lr}
 8003116:	460c      	mov	r4, r1
 8003118:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800311c:	f000 f8fc 	bl	8003318 <_read_r>
 8003120:	2800      	cmp	r0, #0
 8003122:	bfab      	itete	ge
 8003124:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003126:	89a3      	ldrhlt	r3, [r4, #12]
 8003128:	181b      	addge	r3, r3, r0
 800312a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800312e:	bfac      	ite	ge
 8003130:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003132:	81a3      	strhlt	r3, [r4, #12]
 8003134:	bd10      	pop	{r4, pc}

08003136 <__swrite>:
 8003136:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800313a:	461f      	mov	r7, r3
 800313c:	898b      	ldrh	r3, [r1, #12]
 800313e:	4605      	mov	r5, r0
 8003140:	05db      	lsls	r3, r3, #23
 8003142:	460c      	mov	r4, r1
 8003144:	4616      	mov	r6, r2
 8003146:	d505      	bpl.n	8003154 <__swrite+0x1e>
 8003148:	2302      	movs	r3, #2
 800314a:	2200      	movs	r2, #0
 800314c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003150:	f000 f8d0 	bl	80032f4 <_lseek_r>
 8003154:	89a3      	ldrh	r3, [r4, #12]
 8003156:	4632      	mov	r2, r6
 8003158:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800315c:	81a3      	strh	r3, [r4, #12]
 800315e:	4628      	mov	r0, r5
 8003160:	463b      	mov	r3, r7
 8003162:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003166:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800316a:	f000 b8e7 	b.w	800333c <_write_r>

0800316e <__sseek>:
 800316e:	b510      	push	{r4, lr}
 8003170:	460c      	mov	r4, r1
 8003172:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003176:	f000 f8bd 	bl	80032f4 <_lseek_r>
 800317a:	1c43      	adds	r3, r0, #1
 800317c:	89a3      	ldrh	r3, [r4, #12]
 800317e:	bf15      	itete	ne
 8003180:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003182:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003186:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800318a:	81a3      	strheq	r3, [r4, #12]
 800318c:	bf18      	it	ne
 800318e:	81a3      	strhne	r3, [r4, #12]
 8003190:	bd10      	pop	{r4, pc}

08003192 <__sclose>:
 8003192:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003196:	f000 b89d 	b.w	80032d4 <_close_r>

0800319a <__swbuf_r>:
 800319a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800319c:	460e      	mov	r6, r1
 800319e:	4614      	mov	r4, r2
 80031a0:	4605      	mov	r5, r0
 80031a2:	b118      	cbz	r0, 80031ac <__swbuf_r+0x12>
 80031a4:	6a03      	ldr	r3, [r0, #32]
 80031a6:	b90b      	cbnz	r3, 80031ac <__swbuf_r+0x12>
 80031a8:	f7ff ff20 	bl	8002fec <__sinit>
 80031ac:	69a3      	ldr	r3, [r4, #24]
 80031ae:	60a3      	str	r3, [r4, #8]
 80031b0:	89a3      	ldrh	r3, [r4, #12]
 80031b2:	071a      	lsls	r2, r3, #28
 80031b4:	d501      	bpl.n	80031ba <__swbuf_r+0x20>
 80031b6:	6923      	ldr	r3, [r4, #16]
 80031b8:	b943      	cbnz	r3, 80031cc <__swbuf_r+0x32>
 80031ba:	4621      	mov	r1, r4
 80031bc:	4628      	mov	r0, r5
 80031be:	f000 f82b 	bl	8003218 <__swsetup_r>
 80031c2:	b118      	cbz	r0, 80031cc <__swbuf_r+0x32>
 80031c4:	f04f 37ff 	mov.w	r7, #4294967295
 80031c8:	4638      	mov	r0, r7
 80031ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80031cc:	6823      	ldr	r3, [r4, #0]
 80031ce:	6922      	ldr	r2, [r4, #16]
 80031d0:	b2f6      	uxtb	r6, r6
 80031d2:	1a98      	subs	r0, r3, r2
 80031d4:	6963      	ldr	r3, [r4, #20]
 80031d6:	4637      	mov	r7, r6
 80031d8:	4283      	cmp	r3, r0
 80031da:	dc05      	bgt.n	80031e8 <__swbuf_r+0x4e>
 80031dc:	4621      	mov	r1, r4
 80031de:	4628      	mov	r0, r5
 80031e0:	f000 fa62 	bl	80036a8 <_fflush_r>
 80031e4:	2800      	cmp	r0, #0
 80031e6:	d1ed      	bne.n	80031c4 <__swbuf_r+0x2a>
 80031e8:	68a3      	ldr	r3, [r4, #8]
 80031ea:	3b01      	subs	r3, #1
 80031ec:	60a3      	str	r3, [r4, #8]
 80031ee:	6823      	ldr	r3, [r4, #0]
 80031f0:	1c5a      	adds	r2, r3, #1
 80031f2:	6022      	str	r2, [r4, #0]
 80031f4:	701e      	strb	r6, [r3, #0]
 80031f6:	6962      	ldr	r2, [r4, #20]
 80031f8:	1c43      	adds	r3, r0, #1
 80031fa:	429a      	cmp	r2, r3
 80031fc:	d004      	beq.n	8003208 <__swbuf_r+0x6e>
 80031fe:	89a3      	ldrh	r3, [r4, #12]
 8003200:	07db      	lsls	r3, r3, #31
 8003202:	d5e1      	bpl.n	80031c8 <__swbuf_r+0x2e>
 8003204:	2e0a      	cmp	r6, #10
 8003206:	d1df      	bne.n	80031c8 <__swbuf_r+0x2e>
 8003208:	4621      	mov	r1, r4
 800320a:	4628      	mov	r0, r5
 800320c:	f000 fa4c 	bl	80036a8 <_fflush_r>
 8003210:	2800      	cmp	r0, #0
 8003212:	d0d9      	beq.n	80031c8 <__swbuf_r+0x2e>
 8003214:	e7d6      	b.n	80031c4 <__swbuf_r+0x2a>
	...

08003218 <__swsetup_r>:
 8003218:	b538      	push	{r3, r4, r5, lr}
 800321a:	4b29      	ldr	r3, [pc, #164]	@ (80032c0 <__swsetup_r+0xa8>)
 800321c:	4605      	mov	r5, r0
 800321e:	6818      	ldr	r0, [r3, #0]
 8003220:	460c      	mov	r4, r1
 8003222:	b118      	cbz	r0, 800322c <__swsetup_r+0x14>
 8003224:	6a03      	ldr	r3, [r0, #32]
 8003226:	b90b      	cbnz	r3, 800322c <__swsetup_r+0x14>
 8003228:	f7ff fee0 	bl	8002fec <__sinit>
 800322c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003230:	0719      	lsls	r1, r3, #28
 8003232:	d422      	bmi.n	800327a <__swsetup_r+0x62>
 8003234:	06da      	lsls	r2, r3, #27
 8003236:	d407      	bmi.n	8003248 <__swsetup_r+0x30>
 8003238:	2209      	movs	r2, #9
 800323a:	602a      	str	r2, [r5, #0]
 800323c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003240:	f04f 30ff 	mov.w	r0, #4294967295
 8003244:	81a3      	strh	r3, [r4, #12]
 8003246:	e033      	b.n	80032b0 <__swsetup_r+0x98>
 8003248:	0758      	lsls	r0, r3, #29
 800324a:	d512      	bpl.n	8003272 <__swsetup_r+0x5a>
 800324c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800324e:	b141      	cbz	r1, 8003262 <__swsetup_r+0x4a>
 8003250:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003254:	4299      	cmp	r1, r3
 8003256:	d002      	beq.n	800325e <__swsetup_r+0x46>
 8003258:	4628      	mov	r0, r5
 800325a:	f000 f8af 	bl	80033bc <_free_r>
 800325e:	2300      	movs	r3, #0
 8003260:	6363      	str	r3, [r4, #52]	@ 0x34
 8003262:	89a3      	ldrh	r3, [r4, #12]
 8003264:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8003268:	81a3      	strh	r3, [r4, #12]
 800326a:	2300      	movs	r3, #0
 800326c:	6063      	str	r3, [r4, #4]
 800326e:	6923      	ldr	r3, [r4, #16]
 8003270:	6023      	str	r3, [r4, #0]
 8003272:	89a3      	ldrh	r3, [r4, #12]
 8003274:	f043 0308 	orr.w	r3, r3, #8
 8003278:	81a3      	strh	r3, [r4, #12]
 800327a:	6923      	ldr	r3, [r4, #16]
 800327c:	b94b      	cbnz	r3, 8003292 <__swsetup_r+0x7a>
 800327e:	89a3      	ldrh	r3, [r4, #12]
 8003280:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8003284:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003288:	d003      	beq.n	8003292 <__swsetup_r+0x7a>
 800328a:	4621      	mov	r1, r4
 800328c:	4628      	mov	r0, r5
 800328e:	f000 fa58 	bl	8003742 <__smakebuf_r>
 8003292:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003296:	f013 0201 	ands.w	r2, r3, #1
 800329a:	d00a      	beq.n	80032b2 <__swsetup_r+0x9a>
 800329c:	2200      	movs	r2, #0
 800329e:	60a2      	str	r2, [r4, #8]
 80032a0:	6962      	ldr	r2, [r4, #20]
 80032a2:	4252      	negs	r2, r2
 80032a4:	61a2      	str	r2, [r4, #24]
 80032a6:	6922      	ldr	r2, [r4, #16]
 80032a8:	b942      	cbnz	r2, 80032bc <__swsetup_r+0xa4>
 80032aa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80032ae:	d1c5      	bne.n	800323c <__swsetup_r+0x24>
 80032b0:	bd38      	pop	{r3, r4, r5, pc}
 80032b2:	0799      	lsls	r1, r3, #30
 80032b4:	bf58      	it	pl
 80032b6:	6962      	ldrpl	r2, [r4, #20]
 80032b8:	60a2      	str	r2, [r4, #8]
 80032ba:	e7f4      	b.n	80032a6 <__swsetup_r+0x8e>
 80032bc:	2000      	movs	r0, #0
 80032be:	e7f7      	b.n	80032b0 <__swsetup_r+0x98>
 80032c0:	20000018 	.word	0x20000018

080032c4 <memset>:
 80032c4:	4603      	mov	r3, r0
 80032c6:	4402      	add	r2, r0
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d100      	bne.n	80032ce <memset+0xa>
 80032cc:	4770      	bx	lr
 80032ce:	f803 1b01 	strb.w	r1, [r3], #1
 80032d2:	e7f9      	b.n	80032c8 <memset+0x4>

080032d4 <_close_r>:
 80032d4:	b538      	push	{r3, r4, r5, lr}
 80032d6:	2300      	movs	r3, #0
 80032d8:	4d05      	ldr	r5, [pc, #20]	@ (80032f0 <_close_r+0x1c>)
 80032da:	4604      	mov	r4, r0
 80032dc:	4608      	mov	r0, r1
 80032de:	602b      	str	r3, [r5, #0]
 80032e0:	f7fd f97d 	bl	80005de <_close>
 80032e4:	1c43      	adds	r3, r0, #1
 80032e6:	d102      	bne.n	80032ee <_close_r+0x1a>
 80032e8:	682b      	ldr	r3, [r5, #0]
 80032ea:	b103      	cbz	r3, 80032ee <_close_r+0x1a>
 80032ec:	6023      	str	r3, [r4, #0]
 80032ee:	bd38      	pop	{r3, r4, r5, pc}
 80032f0:	200002a0 	.word	0x200002a0

080032f4 <_lseek_r>:
 80032f4:	b538      	push	{r3, r4, r5, lr}
 80032f6:	4604      	mov	r4, r0
 80032f8:	4608      	mov	r0, r1
 80032fa:	4611      	mov	r1, r2
 80032fc:	2200      	movs	r2, #0
 80032fe:	4d05      	ldr	r5, [pc, #20]	@ (8003314 <_lseek_r+0x20>)
 8003300:	602a      	str	r2, [r5, #0]
 8003302:	461a      	mov	r2, r3
 8003304:	f7fd f98f 	bl	8000626 <_lseek>
 8003308:	1c43      	adds	r3, r0, #1
 800330a:	d102      	bne.n	8003312 <_lseek_r+0x1e>
 800330c:	682b      	ldr	r3, [r5, #0]
 800330e:	b103      	cbz	r3, 8003312 <_lseek_r+0x1e>
 8003310:	6023      	str	r3, [r4, #0]
 8003312:	bd38      	pop	{r3, r4, r5, pc}
 8003314:	200002a0 	.word	0x200002a0

08003318 <_read_r>:
 8003318:	b538      	push	{r3, r4, r5, lr}
 800331a:	4604      	mov	r4, r0
 800331c:	4608      	mov	r0, r1
 800331e:	4611      	mov	r1, r2
 8003320:	2200      	movs	r2, #0
 8003322:	4d05      	ldr	r5, [pc, #20]	@ (8003338 <_read_r+0x20>)
 8003324:	602a      	str	r2, [r5, #0]
 8003326:	461a      	mov	r2, r3
 8003328:	f7fd f920 	bl	800056c <_read>
 800332c:	1c43      	adds	r3, r0, #1
 800332e:	d102      	bne.n	8003336 <_read_r+0x1e>
 8003330:	682b      	ldr	r3, [r5, #0]
 8003332:	b103      	cbz	r3, 8003336 <_read_r+0x1e>
 8003334:	6023      	str	r3, [r4, #0]
 8003336:	bd38      	pop	{r3, r4, r5, pc}
 8003338:	200002a0 	.word	0x200002a0

0800333c <_write_r>:
 800333c:	b538      	push	{r3, r4, r5, lr}
 800333e:	4604      	mov	r4, r0
 8003340:	4608      	mov	r0, r1
 8003342:	4611      	mov	r1, r2
 8003344:	2200      	movs	r2, #0
 8003346:	4d05      	ldr	r5, [pc, #20]	@ (800335c <_write_r+0x20>)
 8003348:	602a      	str	r2, [r5, #0]
 800334a:	461a      	mov	r2, r3
 800334c:	f7fd f92b 	bl	80005a6 <_write>
 8003350:	1c43      	adds	r3, r0, #1
 8003352:	d102      	bne.n	800335a <_write_r+0x1e>
 8003354:	682b      	ldr	r3, [r5, #0]
 8003356:	b103      	cbz	r3, 800335a <_write_r+0x1e>
 8003358:	6023      	str	r3, [r4, #0]
 800335a:	bd38      	pop	{r3, r4, r5, pc}
 800335c:	200002a0 	.word	0x200002a0

08003360 <__errno>:
 8003360:	4b01      	ldr	r3, [pc, #4]	@ (8003368 <__errno+0x8>)
 8003362:	6818      	ldr	r0, [r3, #0]
 8003364:	4770      	bx	lr
 8003366:	bf00      	nop
 8003368:	20000018 	.word	0x20000018

0800336c <__libc_init_array>:
 800336c:	b570      	push	{r4, r5, r6, lr}
 800336e:	2600      	movs	r6, #0
 8003370:	4d0c      	ldr	r5, [pc, #48]	@ (80033a4 <__libc_init_array+0x38>)
 8003372:	4c0d      	ldr	r4, [pc, #52]	@ (80033a8 <__libc_init_array+0x3c>)
 8003374:	1b64      	subs	r4, r4, r5
 8003376:	10a4      	asrs	r4, r4, #2
 8003378:	42a6      	cmp	r6, r4
 800337a:	d109      	bne.n	8003390 <__libc_init_array+0x24>
 800337c:	f000 fa50 	bl	8003820 <_init>
 8003380:	2600      	movs	r6, #0
 8003382:	4d0a      	ldr	r5, [pc, #40]	@ (80033ac <__libc_init_array+0x40>)
 8003384:	4c0a      	ldr	r4, [pc, #40]	@ (80033b0 <__libc_init_array+0x44>)
 8003386:	1b64      	subs	r4, r4, r5
 8003388:	10a4      	asrs	r4, r4, #2
 800338a:	42a6      	cmp	r6, r4
 800338c:	d105      	bne.n	800339a <__libc_init_array+0x2e>
 800338e:	bd70      	pop	{r4, r5, r6, pc}
 8003390:	f855 3b04 	ldr.w	r3, [r5], #4
 8003394:	4798      	blx	r3
 8003396:	3601      	adds	r6, #1
 8003398:	e7ee      	b.n	8003378 <__libc_init_array+0xc>
 800339a:	f855 3b04 	ldr.w	r3, [r5], #4
 800339e:	4798      	blx	r3
 80033a0:	3601      	adds	r6, #1
 80033a2:	e7f2      	b.n	800338a <__libc_init_array+0x1e>
 80033a4:	080038c4 	.word	0x080038c4
 80033a8:	080038c4 	.word	0x080038c4
 80033ac:	080038c4 	.word	0x080038c4
 80033b0:	080038c8 	.word	0x080038c8

080033b4 <__retarget_lock_init_recursive>:
 80033b4:	4770      	bx	lr

080033b6 <__retarget_lock_acquire_recursive>:
 80033b6:	4770      	bx	lr

080033b8 <__retarget_lock_release_recursive>:
 80033b8:	4770      	bx	lr
	...

080033bc <_free_r>:
 80033bc:	b538      	push	{r3, r4, r5, lr}
 80033be:	4605      	mov	r5, r0
 80033c0:	2900      	cmp	r1, #0
 80033c2:	d040      	beq.n	8003446 <_free_r+0x8a>
 80033c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80033c8:	1f0c      	subs	r4, r1, #4
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	bfb8      	it	lt
 80033ce:	18e4      	addlt	r4, r4, r3
 80033d0:	f000 f8de 	bl	8003590 <__malloc_lock>
 80033d4:	4a1c      	ldr	r2, [pc, #112]	@ (8003448 <_free_r+0x8c>)
 80033d6:	6813      	ldr	r3, [r2, #0]
 80033d8:	b933      	cbnz	r3, 80033e8 <_free_r+0x2c>
 80033da:	6063      	str	r3, [r4, #4]
 80033dc:	6014      	str	r4, [r2, #0]
 80033de:	4628      	mov	r0, r5
 80033e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80033e4:	f000 b8da 	b.w	800359c <__malloc_unlock>
 80033e8:	42a3      	cmp	r3, r4
 80033ea:	d908      	bls.n	80033fe <_free_r+0x42>
 80033ec:	6820      	ldr	r0, [r4, #0]
 80033ee:	1821      	adds	r1, r4, r0
 80033f0:	428b      	cmp	r3, r1
 80033f2:	bf01      	itttt	eq
 80033f4:	6819      	ldreq	r1, [r3, #0]
 80033f6:	685b      	ldreq	r3, [r3, #4]
 80033f8:	1809      	addeq	r1, r1, r0
 80033fa:	6021      	streq	r1, [r4, #0]
 80033fc:	e7ed      	b.n	80033da <_free_r+0x1e>
 80033fe:	461a      	mov	r2, r3
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	b10b      	cbz	r3, 8003408 <_free_r+0x4c>
 8003404:	42a3      	cmp	r3, r4
 8003406:	d9fa      	bls.n	80033fe <_free_r+0x42>
 8003408:	6811      	ldr	r1, [r2, #0]
 800340a:	1850      	adds	r0, r2, r1
 800340c:	42a0      	cmp	r0, r4
 800340e:	d10b      	bne.n	8003428 <_free_r+0x6c>
 8003410:	6820      	ldr	r0, [r4, #0]
 8003412:	4401      	add	r1, r0
 8003414:	1850      	adds	r0, r2, r1
 8003416:	4283      	cmp	r3, r0
 8003418:	6011      	str	r1, [r2, #0]
 800341a:	d1e0      	bne.n	80033de <_free_r+0x22>
 800341c:	6818      	ldr	r0, [r3, #0]
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	4408      	add	r0, r1
 8003422:	6010      	str	r0, [r2, #0]
 8003424:	6053      	str	r3, [r2, #4]
 8003426:	e7da      	b.n	80033de <_free_r+0x22>
 8003428:	d902      	bls.n	8003430 <_free_r+0x74>
 800342a:	230c      	movs	r3, #12
 800342c:	602b      	str	r3, [r5, #0]
 800342e:	e7d6      	b.n	80033de <_free_r+0x22>
 8003430:	6820      	ldr	r0, [r4, #0]
 8003432:	1821      	adds	r1, r4, r0
 8003434:	428b      	cmp	r3, r1
 8003436:	bf01      	itttt	eq
 8003438:	6819      	ldreq	r1, [r3, #0]
 800343a:	685b      	ldreq	r3, [r3, #4]
 800343c:	1809      	addeq	r1, r1, r0
 800343e:	6021      	streq	r1, [r4, #0]
 8003440:	6063      	str	r3, [r4, #4]
 8003442:	6054      	str	r4, [r2, #4]
 8003444:	e7cb      	b.n	80033de <_free_r+0x22>
 8003446:	bd38      	pop	{r3, r4, r5, pc}
 8003448:	200002ac 	.word	0x200002ac

0800344c <sbrk_aligned>:
 800344c:	b570      	push	{r4, r5, r6, lr}
 800344e:	4e0f      	ldr	r6, [pc, #60]	@ (800348c <sbrk_aligned+0x40>)
 8003450:	460c      	mov	r4, r1
 8003452:	6831      	ldr	r1, [r6, #0]
 8003454:	4605      	mov	r5, r0
 8003456:	b911      	cbnz	r1, 800345e <sbrk_aligned+0x12>
 8003458:	f000 f9d2 	bl	8003800 <_sbrk_r>
 800345c:	6030      	str	r0, [r6, #0]
 800345e:	4621      	mov	r1, r4
 8003460:	4628      	mov	r0, r5
 8003462:	f000 f9cd 	bl	8003800 <_sbrk_r>
 8003466:	1c43      	adds	r3, r0, #1
 8003468:	d103      	bne.n	8003472 <sbrk_aligned+0x26>
 800346a:	f04f 34ff 	mov.w	r4, #4294967295
 800346e:	4620      	mov	r0, r4
 8003470:	bd70      	pop	{r4, r5, r6, pc}
 8003472:	1cc4      	adds	r4, r0, #3
 8003474:	f024 0403 	bic.w	r4, r4, #3
 8003478:	42a0      	cmp	r0, r4
 800347a:	d0f8      	beq.n	800346e <sbrk_aligned+0x22>
 800347c:	1a21      	subs	r1, r4, r0
 800347e:	4628      	mov	r0, r5
 8003480:	f000 f9be 	bl	8003800 <_sbrk_r>
 8003484:	3001      	adds	r0, #1
 8003486:	d1f2      	bne.n	800346e <sbrk_aligned+0x22>
 8003488:	e7ef      	b.n	800346a <sbrk_aligned+0x1e>
 800348a:	bf00      	nop
 800348c:	200002a8 	.word	0x200002a8

08003490 <_malloc_r>:
 8003490:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003494:	1ccd      	adds	r5, r1, #3
 8003496:	f025 0503 	bic.w	r5, r5, #3
 800349a:	3508      	adds	r5, #8
 800349c:	2d0c      	cmp	r5, #12
 800349e:	bf38      	it	cc
 80034a0:	250c      	movcc	r5, #12
 80034a2:	2d00      	cmp	r5, #0
 80034a4:	4606      	mov	r6, r0
 80034a6:	db01      	blt.n	80034ac <_malloc_r+0x1c>
 80034a8:	42a9      	cmp	r1, r5
 80034aa:	d904      	bls.n	80034b6 <_malloc_r+0x26>
 80034ac:	230c      	movs	r3, #12
 80034ae:	6033      	str	r3, [r6, #0]
 80034b0:	2000      	movs	r0, #0
 80034b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80034b6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800358c <_malloc_r+0xfc>
 80034ba:	f000 f869 	bl	8003590 <__malloc_lock>
 80034be:	f8d8 3000 	ldr.w	r3, [r8]
 80034c2:	461c      	mov	r4, r3
 80034c4:	bb44      	cbnz	r4, 8003518 <_malloc_r+0x88>
 80034c6:	4629      	mov	r1, r5
 80034c8:	4630      	mov	r0, r6
 80034ca:	f7ff ffbf 	bl	800344c <sbrk_aligned>
 80034ce:	1c43      	adds	r3, r0, #1
 80034d0:	4604      	mov	r4, r0
 80034d2:	d158      	bne.n	8003586 <_malloc_r+0xf6>
 80034d4:	f8d8 4000 	ldr.w	r4, [r8]
 80034d8:	4627      	mov	r7, r4
 80034da:	2f00      	cmp	r7, #0
 80034dc:	d143      	bne.n	8003566 <_malloc_r+0xd6>
 80034de:	2c00      	cmp	r4, #0
 80034e0:	d04b      	beq.n	800357a <_malloc_r+0xea>
 80034e2:	6823      	ldr	r3, [r4, #0]
 80034e4:	4639      	mov	r1, r7
 80034e6:	4630      	mov	r0, r6
 80034e8:	eb04 0903 	add.w	r9, r4, r3
 80034ec:	f000 f988 	bl	8003800 <_sbrk_r>
 80034f0:	4581      	cmp	r9, r0
 80034f2:	d142      	bne.n	800357a <_malloc_r+0xea>
 80034f4:	6821      	ldr	r1, [r4, #0]
 80034f6:	4630      	mov	r0, r6
 80034f8:	1a6d      	subs	r5, r5, r1
 80034fa:	4629      	mov	r1, r5
 80034fc:	f7ff ffa6 	bl	800344c <sbrk_aligned>
 8003500:	3001      	adds	r0, #1
 8003502:	d03a      	beq.n	800357a <_malloc_r+0xea>
 8003504:	6823      	ldr	r3, [r4, #0]
 8003506:	442b      	add	r3, r5
 8003508:	6023      	str	r3, [r4, #0]
 800350a:	f8d8 3000 	ldr.w	r3, [r8]
 800350e:	685a      	ldr	r2, [r3, #4]
 8003510:	bb62      	cbnz	r2, 800356c <_malloc_r+0xdc>
 8003512:	f8c8 7000 	str.w	r7, [r8]
 8003516:	e00f      	b.n	8003538 <_malloc_r+0xa8>
 8003518:	6822      	ldr	r2, [r4, #0]
 800351a:	1b52      	subs	r2, r2, r5
 800351c:	d420      	bmi.n	8003560 <_malloc_r+0xd0>
 800351e:	2a0b      	cmp	r2, #11
 8003520:	d917      	bls.n	8003552 <_malloc_r+0xc2>
 8003522:	1961      	adds	r1, r4, r5
 8003524:	42a3      	cmp	r3, r4
 8003526:	6025      	str	r5, [r4, #0]
 8003528:	bf18      	it	ne
 800352a:	6059      	strne	r1, [r3, #4]
 800352c:	6863      	ldr	r3, [r4, #4]
 800352e:	bf08      	it	eq
 8003530:	f8c8 1000 	streq.w	r1, [r8]
 8003534:	5162      	str	r2, [r4, r5]
 8003536:	604b      	str	r3, [r1, #4]
 8003538:	4630      	mov	r0, r6
 800353a:	f000 f82f 	bl	800359c <__malloc_unlock>
 800353e:	f104 000b 	add.w	r0, r4, #11
 8003542:	1d23      	adds	r3, r4, #4
 8003544:	f020 0007 	bic.w	r0, r0, #7
 8003548:	1ac2      	subs	r2, r0, r3
 800354a:	bf1c      	itt	ne
 800354c:	1a1b      	subne	r3, r3, r0
 800354e:	50a3      	strne	r3, [r4, r2]
 8003550:	e7af      	b.n	80034b2 <_malloc_r+0x22>
 8003552:	6862      	ldr	r2, [r4, #4]
 8003554:	42a3      	cmp	r3, r4
 8003556:	bf0c      	ite	eq
 8003558:	f8c8 2000 	streq.w	r2, [r8]
 800355c:	605a      	strne	r2, [r3, #4]
 800355e:	e7eb      	b.n	8003538 <_malloc_r+0xa8>
 8003560:	4623      	mov	r3, r4
 8003562:	6864      	ldr	r4, [r4, #4]
 8003564:	e7ae      	b.n	80034c4 <_malloc_r+0x34>
 8003566:	463c      	mov	r4, r7
 8003568:	687f      	ldr	r7, [r7, #4]
 800356a:	e7b6      	b.n	80034da <_malloc_r+0x4a>
 800356c:	461a      	mov	r2, r3
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	42a3      	cmp	r3, r4
 8003572:	d1fb      	bne.n	800356c <_malloc_r+0xdc>
 8003574:	2300      	movs	r3, #0
 8003576:	6053      	str	r3, [r2, #4]
 8003578:	e7de      	b.n	8003538 <_malloc_r+0xa8>
 800357a:	230c      	movs	r3, #12
 800357c:	4630      	mov	r0, r6
 800357e:	6033      	str	r3, [r6, #0]
 8003580:	f000 f80c 	bl	800359c <__malloc_unlock>
 8003584:	e794      	b.n	80034b0 <_malloc_r+0x20>
 8003586:	6005      	str	r5, [r0, #0]
 8003588:	e7d6      	b.n	8003538 <_malloc_r+0xa8>
 800358a:	bf00      	nop
 800358c:	200002ac 	.word	0x200002ac

08003590 <__malloc_lock>:
 8003590:	4801      	ldr	r0, [pc, #4]	@ (8003598 <__malloc_lock+0x8>)
 8003592:	f7ff bf10 	b.w	80033b6 <__retarget_lock_acquire_recursive>
 8003596:	bf00      	nop
 8003598:	200002a4 	.word	0x200002a4

0800359c <__malloc_unlock>:
 800359c:	4801      	ldr	r0, [pc, #4]	@ (80035a4 <__malloc_unlock+0x8>)
 800359e:	f7ff bf0b 	b.w	80033b8 <__retarget_lock_release_recursive>
 80035a2:	bf00      	nop
 80035a4:	200002a4 	.word	0x200002a4

080035a8 <__sflush_r>:
 80035a8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80035ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035ae:	0716      	lsls	r6, r2, #28
 80035b0:	4605      	mov	r5, r0
 80035b2:	460c      	mov	r4, r1
 80035b4:	d454      	bmi.n	8003660 <__sflush_r+0xb8>
 80035b6:	684b      	ldr	r3, [r1, #4]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	dc02      	bgt.n	80035c2 <__sflush_r+0x1a>
 80035bc:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80035be:	2b00      	cmp	r3, #0
 80035c0:	dd48      	ble.n	8003654 <__sflush_r+0xac>
 80035c2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80035c4:	2e00      	cmp	r6, #0
 80035c6:	d045      	beq.n	8003654 <__sflush_r+0xac>
 80035c8:	2300      	movs	r3, #0
 80035ca:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80035ce:	682f      	ldr	r7, [r5, #0]
 80035d0:	6a21      	ldr	r1, [r4, #32]
 80035d2:	602b      	str	r3, [r5, #0]
 80035d4:	d030      	beq.n	8003638 <__sflush_r+0x90>
 80035d6:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80035d8:	89a3      	ldrh	r3, [r4, #12]
 80035da:	0759      	lsls	r1, r3, #29
 80035dc:	d505      	bpl.n	80035ea <__sflush_r+0x42>
 80035de:	6863      	ldr	r3, [r4, #4]
 80035e0:	1ad2      	subs	r2, r2, r3
 80035e2:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80035e4:	b10b      	cbz	r3, 80035ea <__sflush_r+0x42>
 80035e6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80035e8:	1ad2      	subs	r2, r2, r3
 80035ea:	2300      	movs	r3, #0
 80035ec:	4628      	mov	r0, r5
 80035ee:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80035f0:	6a21      	ldr	r1, [r4, #32]
 80035f2:	47b0      	blx	r6
 80035f4:	1c43      	adds	r3, r0, #1
 80035f6:	89a3      	ldrh	r3, [r4, #12]
 80035f8:	d106      	bne.n	8003608 <__sflush_r+0x60>
 80035fa:	6829      	ldr	r1, [r5, #0]
 80035fc:	291d      	cmp	r1, #29
 80035fe:	d82b      	bhi.n	8003658 <__sflush_r+0xb0>
 8003600:	4a28      	ldr	r2, [pc, #160]	@ (80036a4 <__sflush_r+0xfc>)
 8003602:	410a      	asrs	r2, r1
 8003604:	07d6      	lsls	r6, r2, #31
 8003606:	d427      	bmi.n	8003658 <__sflush_r+0xb0>
 8003608:	2200      	movs	r2, #0
 800360a:	6062      	str	r2, [r4, #4]
 800360c:	6922      	ldr	r2, [r4, #16]
 800360e:	04d9      	lsls	r1, r3, #19
 8003610:	6022      	str	r2, [r4, #0]
 8003612:	d504      	bpl.n	800361e <__sflush_r+0x76>
 8003614:	1c42      	adds	r2, r0, #1
 8003616:	d101      	bne.n	800361c <__sflush_r+0x74>
 8003618:	682b      	ldr	r3, [r5, #0]
 800361a:	b903      	cbnz	r3, 800361e <__sflush_r+0x76>
 800361c:	6560      	str	r0, [r4, #84]	@ 0x54
 800361e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003620:	602f      	str	r7, [r5, #0]
 8003622:	b1b9      	cbz	r1, 8003654 <__sflush_r+0xac>
 8003624:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003628:	4299      	cmp	r1, r3
 800362a:	d002      	beq.n	8003632 <__sflush_r+0x8a>
 800362c:	4628      	mov	r0, r5
 800362e:	f7ff fec5 	bl	80033bc <_free_r>
 8003632:	2300      	movs	r3, #0
 8003634:	6363      	str	r3, [r4, #52]	@ 0x34
 8003636:	e00d      	b.n	8003654 <__sflush_r+0xac>
 8003638:	2301      	movs	r3, #1
 800363a:	4628      	mov	r0, r5
 800363c:	47b0      	blx	r6
 800363e:	4602      	mov	r2, r0
 8003640:	1c50      	adds	r0, r2, #1
 8003642:	d1c9      	bne.n	80035d8 <__sflush_r+0x30>
 8003644:	682b      	ldr	r3, [r5, #0]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d0c6      	beq.n	80035d8 <__sflush_r+0x30>
 800364a:	2b1d      	cmp	r3, #29
 800364c:	d001      	beq.n	8003652 <__sflush_r+0xaa>
 800364e:	2b16      	cmp	r3, #22
 8003650:	d11d      	bne.n	800368e <__sflush_r+0xe6>
 8003652:	602f      	str	r7, [r5, #0]
 8003654:	2000      	movs	r0, #0
 8003656:	e021      	b.n	800369c <__sflush_r+0xf4>
 8003658:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800365c:	b21b      	sxth	r3, r3
 800365e:	e01a      	b.n	8003696 <__sflush_r+0xee>
 8003660:	690f      	ldr	r7, [r1, #16]
 8003662:	2f00      	cmp	r7, #0
 8003664:	d0f6      	beq.n	8003654 <__sflush_r+0xac>
 8003666:	0793      	lsls	r3, r2, #30
 8003668:	bf18      	it	ne
 800366a:	2300      	movne	r3, #0
 800366c:	680e      	ldr	r6, [r1, #0]
 800366e:	bf08      	it	eq
 8003670:	694b      	ldreq	r3, [r1, #20]
 8003672:	1bf6      	subs	r6, r6, r7
 8003674:	600f      	str	r7, [r1, #0]
 8003676:	608b      	str	r3, [r1, #8]
 8003678:	2e00      	cmp	r6, #0
 800367a:	ddeb      	ble.n	8003654 <__sflush_r+0xac>
 800367c:	4633      	mov	r3, r6
 800367e:	463a      	mov	r2, r7
 8003680:	4628      	mov	r0, r5
 8003682:	6a21      	ldr	r1, [r4, #32]
 8003684:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8003688:	47e0      	blx	ip
 800368a:	2800      	cmp	r0, #0
 800368c:	dc07      	bgt.n	800369e <__sflush_r+0xf6>
 800368e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003692:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003696:	f04f 30ff 	mov.w	r0, #4294967295
 800369a:	81a3      	strh	r3, [r4, #12]
 800369c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800369e:	4407      	add	r7, r0
 80036a0:	1a36      	subs	r6, r6, r0
 80036a2:	e7e9      	b.n	8003678 <__sflush_r+0xd0>
 80036a4:	dfbffffe 	.word	0xdfbffffe

080036a8 <_fflush_r>:
 80036a8:	b538      	push	{r3, r4, r5, lr}
 80036aa:	690b      	ldr	r3, [r1, #16]
 80036ac:	4605      	mov	r5, r0
 80036ae:	460c      	mov	r4, r1
 80036b0:	b913      	cbnz	r3, 80036b8 <_fflush_r+0x10>
 80036b2:	2500      	movs	r5, #0
 80036b4:	4628      	mov	r0, r5
 80036b6:	bd38      	pop	{r3, r4, r5, pc}
 80036b8:	b118      	cbz	r0, 80036c2 <_fflush_r+0x1a>
 80036ba:	6a03      	ldr	r3, [r0, #32]
 80036bc:	b90b      	cbnz	r3, 80036c2 <_fflush_r+0x1a>
 80036be:	f7ff fc95 	bl	8002fec <__sinit>
 80036c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d0f3      	beq.n	80036b2 <_fflush_r+0xa>
 80036ca:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80036cc:	07d0      	lsls	r0, r2, #31
 80036ce:	d404      	bmi.n	80036da <_fflush_r+0x32>
 80036d0:	0599      	lsls	r1, r3, #22
 80036d2:	d402      	bmi.n	80036da <_fflush_r+0x32>
 80036d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80036d6:	f7ff fe6e 	bl	80033b6 <__retarget_lock_acquire_recursive>
 80036da:	4628      	mov	r0, r5
 80036dc:	4621      	mov	r1, r4
 80036de:	f7ff ff63 	bl	80035a8 <__sflush_r>
 80036e2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80036e4:	4605      	mov	r5, r0
 80036e6:	07da      	lsls	r2, r3, #31
 80036e8:	d4e4      	bmi.n	80036b4 <_fflush_r+0xc>
 80036ea:	89a3      	ldrh	r3, [r4, #12]
 80036ec:	059b      	lsls	r3, r3, #22
 80036ee:	d4e1      	bmi.n	80036b4 <_fflush_r+0xc>
 80036f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80036f2:	f7ff fe61 	bl	80033b8 <__retarget_lock_release_recursive>
 80036f6:	e7dd      	b.n	80036b4 <_fflush_r+0xc>

080036f8 <__swhatbuf_r>:
 80036f8:	b570      	push	{r4, r5, r6, lr}
 80036fa:	460c      	mov	r4, r1
 80036fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003700:	4615      	mov	r5, r2
 8003702:	2900      	cmp	r1, #0
 8003704:	461e      	mov	r6, r3
 8003706:	b096      	sub	sp, #88	@ 0x58
 8003708:	da0c      	bge.n	8003724 <__swhatbuf_r+0x2c>
 800370a:	89a3      	ldrh	r3, [r4, #12]
 800370c:	2100      	movs	r1, #0
 800370e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8003712:	bf14      	ite	ne
 8003714:	2340      	movne	r3, #64	@ 0x40
 8003716:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800371a:	2000      	movs	r0, #0
 800371c:	6031      	str	r1, [r6, #0]
 800371e:	602b      	str	r3, [r5, #0]
 8003720:	b016      	add	sp, #88	@ 0x58
 8003722:	bd70      	pop	{r4, r5, r6, pc}
 8003724:	466a      	mov	r2, sp
 8003726:	f000 f849 	bl	80037bc <_fstat_r>
 800372a:	2800      	cmp	r0, #0
 800372c:	dbed      	blt.n	800370a <__swhatbuf_r+0x12>
 800372e:	9901      	ldr	r1, [sp, #4]
 8003730:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8003734:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8003738:	4259      	negs	r1, r3
 800373a:	4159      	adcs	r1, r3
 800373c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003740:	e7eb      	b.n	800371a <__swhatbuf_r+0x22>

08003742 <__smakebuf_r>:
 8003742:	898b      	ldrh	r3, [r1, #12]
 8003744:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003746:	079d      	lsls	r5, r3, #30
 8003748:	4606      	mov	r6, r0
 800374a:	460c      	mov	r4, r1
 800374c:	d507      	bpl.n	800375e <__smakebuf_r+0x1c>
 800374e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8003752:	6023      	str	r3, [r4, #0]
 8003754:	6123      	str	r3, [r4, #16]
 8003756:	2301      	movs	r3, #1
 8003758:	6163      	str	r3, [r4, #20]
 800375a:	b003      	add	sp, #12
 800375c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800375e:	466a      	mov	r2, sp
 8003760:	ab01      	add	r3, sp, #4
 8003762:	f7ff ffc9 	bl	80036f8 <__swhatbuf_r>
 8003766:	9f00      	ldr	r7, [sp, #0]
 8003768:	4605      	mov	r5, r0
 800376a:	4639      	mov	r1, r7
 800376c:	4630      	mov	r0, r6
 800376e:	f7ff fe8f 	bl	8003490 <_malloc_r>
 8003772:	b948      	cbnz	r0, 8003788 <__smakebuf_r+0x46>
 8003774:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003778:	059a      	lsls	r2, r3, #22
 800377a:	d4ee      	bmi.n	800375a <__smakebuf_r+0x18>
 800377c:	f023 0303 	bic.w	r3, r3, #3
 8003780:	f043 0302 	orr.w	r3, r3, #2
 8003784:	81a3      	strh	r3, [r4, #12]
 8003786:	e7e2      	b.n	800374e <__smakebuf_r+0xc>
 8003788:	89a3      	ldrh	r3, [r4, #12]
 800378a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800378e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003792:	81a3      	strh	r3, [r4, #12]
 8003794:	9b01      	ldr	r3, [sp, #4]
 8003796:	6020      	str	r0, [r4, #0]
 8003798:	b15b      	cbz	r3, 80037b2 <__smakebuf_r+0x70>
 800379a:	4630      	mov	r0, r6
 800379c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80037a0:	f000 f81e 	bl	80037e0 <_isatty_r>
 80037a4:	b128      	cbz	r0, 80037b2 <__smakebuf_r+0x70>
 80037a6:	89a3      	ldrh	r3, [r4, #12]
 80037a8:	f023 0303 	bic.w	r3, r3, #3
 80037ac:	f043 0301 	orr.w	r3, r3, #1
 80037b0:	81a3      	strh	r3, [r4, #12]
 80037b2:	89a3      	ldrh	r3, [r4, #12]
 80037b4:	431d      	orrs	r5, r3
 80037b6:	81a5      	strh	r5, [r4, #12]
 80037b8:	e7cf      	b.n	800375a <__smakebuf_r+0x18>
	...

080037bc <_fstat_r>:
 80037bc:	b538      	push	{r3, r4, r5, lr}
 80037be:	2300      	movs	r3, #0
 80037c0:	4d06      	ldr	r5, [pc, #24]	@ (80037dc <_fstat_r+0x20>)
 80037c2:	4604      	mov	r4, r0
 80037c4:	4608      	mov	r0, r1
 80037c6:	4611      	mov	r1, r2
 80037c8:	602b      	str	r3, [r5, #0]
 80037ca:	f7fc ff13 	bl	80005f4 <_fstat>
 80037ce:	1c43      	adds	r3, r0, #1
 80037d0:	d102      	bne.n	80037d8 <_fstat_r+0x1c>
 80037d2:	682b      	ldr	r3, [r5, #0]
 80037d4:	b103      	cbz	r3, 80037d8 <_fstat_r+0x1c>
 80037d6:	6023      	str	r3, [r4, #0]
 80037d8:	bd38      	pop	{r3, r4, r5, pc}
 80037da:	bf00      	nop
 80037dc:	200002a0 	.word	0x200002a0

080037e0 <_isatty_r>:
 80037e0:	b538      	push	{r3, r4, r5, lr}
 80037e2:	2300      	movs	r3, #0
 80037e4:	4d05      	ldr	r5, [pc, #20]	@ (80037fc <_isatty_r+0x1c>)
 80037e6:	4604      	mov	r4, r0
 80037e8:	4608      	mov	r0, r1
 80037ea:	602b      	str	r3, [r5, #0]
 80037ec:	f7fc ff11 	bl	8000612 <_isatty>
 80037f0:	1c43      	adds	r3, r0, #1
 80037f2:	d102      	bne.n	80037fa <_isatty_r+0x1a>
 80037f4:	682b      	ldr	r3, [r5, #0]
 80037f6:	b103      	cbz	r3, 80037fa <_isatty_r+0x1a>
 80037f8:	6023      	str	r3, [r4, #0]
 80037fa:	bd38      	pop	{r3, r4, r5, pc}
 80037fc:	200002a0 	.word	0x200002a0

08003800 <_sbrk_r>:
 8003800:	b538      	push	{r3, r4, r5, lr}
 8003802:	2300      	movs	r3, #0
 8003804:	4d05      	ldr	r5, [pc, #20]	@ (800381c <_sbrk_r+0x1c>)
 8003806:	4604      	mov	r4, r0
 8003808:	4608      	mov	r0, r1
 800380a:	602b      	str	r3, [r5, #0]
 800380c:	f7fc ff18 	bl	8000640 <_sbrk>
 8003810:	1c43      	adds	r3, r0, #1
 8003812:	d102      	bne.n	800381a <_sbrk_r+0x1a>
 8003814:	682b      	ldr	r3, [r5, #0]
 8003816:	b103      	cbz	r3, 800381a <_sbrk_r+0x1a>
 8003818:	6023      	str	r3, [r4, #0]
 800381a:	bd38      	pop	{r3, r4, r5, pc}
 800381c:	200002a0 	.word	0x200002a0

08003820 <_init>:
 8003820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003822:	bf00      	nop
 8003824:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003826:	bc08      	pop	{r3}
 8003828:	469e      	mov	lr, r3
 800382a:	4770      	bx	lr

0800382c <_fini>:
 800382c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800382e:	bf00      	nop
 8003830:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003832:	bc08      	pop	{r3}
 8003834:	469e      	mov	lr, r3
 8003836:	4770      	bx	lr
