
14-UART1-RECV-FL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c98  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08002da4  08002da4  00003da4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002e24  08002e24  00004068  2**0
                  CONTENTS
  4 .ARM          00000000  08002e24  08002e24  00004068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002e24  08002e24  00004068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002e24  08002e24  00003e24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002e28  08002e28  00003e28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08002e2c  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c0  20000068  08002e94  00004068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000228  08002e94  00004228  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00004068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007dcb  00000000  00000000  00004091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b2b  00000000  00000000  0000be5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007a0  00000000  00000000  0000d988  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000005bb  00000000  00000000  0000e128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018050  00000000  00000000  0000e6e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000aa68  00000000  00000000  00026733  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083d27  00000000  00000000  0003119b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b4ec2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002310  00000000  00000000  000b4f08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004f  00000000  00000000  000b7218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	08002d8c 	.word	0x08002d8c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	08002d8c 	.word	0x08002d8c

0800014c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b086      	sub	sp, #24
 8000150:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000152:	f107 0308 	add.w	r3, r7, #8
 8000156:	2200      	movs	r2, #0
 8000158:	601a      	str	r2, [r3, #0]
 800015a:	605a      	str	r2, [r3, #4]
 800015c:	609a      	str	r2, [r3, #8]
 800015e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000160:	4b2b      	ldr	r3, [pc, #172]	@ (8000210 <MX_GPIO_Init+0xc4>)
 8000162:	699b      	ldr	r3, [r3, #24]
 8000164:	4a2a      	ldr	r2, [pc, #168]	@ (8000210 <MX_GPIO_Init+0xc4>)
 8000166:	f043 0304 	orr.w	r3, r3, #4
 800016a:	6193      	str	r3, [r2, #24]
 800016c:	4b28      	ldr	r3, [pc, #160]	@ (8000210 <MX_GPIO_Init+0xc4>)
 800016e:	699b      	ldr	r3, [r3, #24]
 8000170:	f003 0304 	and.w	r3, r3, #4
 8000174:	607b      	str	r3, [r7, #4]
 8000176:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000178:	4b25      	ldr	r3, [pc, #148]	@ (8000210 <MX_GPIO_Init+0xc4>)
 800017a:	699b      	ldr	r3, [r3, #24]
 800017c:	4a24      	ldr	r2, [pc, #144]	@ (8000210 <MX_GPIO_Init+0xc4>)
 800017e:	f043 0308 	orr.w	r3, r3, #8
 8000182:	6193      	str	r3, [r2, #24]
 8000184:	4b22      	ldr	r3, [pc, #136]	@ (8000210 <MX_GPIO_Init+0xc4>)
 8000186:	699b      	ldr	r3, [r3, #24]
 8000188:	f003 0308 	and.w	r3, r3, #8
 800018c:	603b      	str	r3, [r7, #0]
 800018e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 8000190:	2200      	movs	r2, #0
 8000192:	2106      	movs	r1, #6
 8000194:	481f      	ldr	r0, [pc, #124]	@ (8000214 <MX_GPIO_Init+0xc8>)
 8000196:	f000 fea9 	bl	8000eec <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA1 PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 800019a:	2306      	movs	r3, #6
 800019c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800019e:	2301      	movs	r3, #1
 80001a0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001a2:	2300      	movs	r3, #0
 80001a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80001a6:	2302      	movs	r3, #2
 80001a8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80001aa:	f107 0308 	add.w	r3, r7, #8
 80001ae:	4619      	mov	r1, r3
 80001b0:	4818      	ldr	r0, [pc, #96]	@ (8000214 <MX_GPIO_Init+0xc8>)
 80001b2:	f000 fd17 	bl	8000be4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80001b6:	2320      	movs	r3, #32
 80001b8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80001ba:	4b17      	ldr	r3, [pc, #92]	@ (8000218 <MX_GPIO_Init+0xcc>)
 80001bc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80001be:	2301      	movs	r3, #1
 80001c0:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80001c2:	f107 0308 	add.w	r3, r7, #8
 80001c6:	4619      	mov	r1, r3
 80001c8:	4812      	ldr	r0, [pc, #72]	@ (8000214 <MX_GPIO_Init+0xc8>)
 80001ca:	f000 fd0b 	bl	8000be4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80001ce:	2301      	movs	r3, #1
 80001d0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80001d2:	4b11      	ldr	r3, [pc, #68]	@ (8000218 <MX_GPIO_Init+0xcc>)
 80001d4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80001d6:	2301      	movs	r3, #1
 80001d8:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80001da:	f107 0308 	add.w	r3, r7, #8
 80001de:	4619      	mov	r1, r3
 80001e0:	480e      	ldr	r0, [pc, #56]	@ (800021c <MX_GPIO_Init+0xd0>)
 80001e2:	f000 fcff 	bl	8000be4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80001e6:	2200      	movs	r2, #0
 80001e8:	2100      	movs	r1, #0
 80001ea:	2006      	movs	r0, #6
 80001ec:	f000 fc11 	bl	8000a12 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80001f0:	2006      	movs	r0, #6
 80001f2:	f000 fc2a 	bl	8000a4a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80001f6:	2200      	movs	r2, #0
 80001f8:	2100      	movs	r1, #0
 80001fa:	2017      	movs	r0, #23
 80001fc:	f000 fc09 	bl	8000a12 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000200:	2017      	movs	r0, #23
 8000202:	f000 fc22 	bl	8000a4a <HAL_NVIC_EnableIRQ>

}
 8000206:	bf00      	nop
 8000208:	3718      	adds	r7, #24
 800020a:	46bd      	mov	sp, r7
 800020c:	bd80      	pop	{r7, pc}
 800020e:	bf00      	nop
 8000210:	40021000 	.word	0x40021000
 8000214:	40010800 	.word	0x40010800
 8000218:	10210000 	.word	0x10210000
 800021c:	40010c00 	.word	0x40010c00

08000220 <LED_Control>:

/* USER CODE BEGIN 2 */
void LED_Control(uint8_t device, uint8_t cmd)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
 8000226:	4603      	mov	r3, r0
 8000228:	460a      	mov	r2, r1
 800022a:	71fb      	strb	r3, [r7, #7]
 800022c:	4613      	mov	r3, r2
 800022e:	71bb      	strb	r3, [r7, #6]
	if (device == LED1)
 8000230:	79fb      	ldrb	r3, [r7, #7]
 8000232:	2b01      	cmp	r3, #1
 8000234:	d111      	bne.n	800025a <LED_Control+0x3a>
	{
		if (cmd == ON)
 8000236:	79bb      	ldrb	r3, [r7, #6]
 8000238:	2b01      	cmp	r3, #1
 800023a:	d105      	bne.n	8000248 <LED_Control+0x28>
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 800023c:	2201      	movs	r2, #1
 800023e:	2102      	movs	r1, #2
 8000240:	4812      	ldr	r0, [pc, #72]	@ (800028c <LED_Control+0x6c>)
 8000242:	f000 fe53 	bl	8000eec <HAL_GPIO_WritePin>
		else if (cmd == OFF)
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
		}
	}
}
 8000246:	e01c      	b.n	8000282 <LED_Control+0x62>
		else if (cmd == OFF)
 8000248:	79bb      	ldrb	r3, [r7, #6]
 800024a:	2b00      	cmp	r3, #0
 800024c:	d119      	bne.n	8000282 <LED_Control+0x62>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 800024e:	2200      	movs	r2, #0
 8000250:	2102      	movs	r1, #2
 8000252:	480e      	ldr	r0, [pc, #56]	@ (800028c <LED_Control+0x6c>)
 8000254:	f000 fe4a 	bl	8000eec <HAL_GPIO_WritePin>
}
 8000258:	e013      	b.n	8000282 <LED_Control+0x62>
	else if (device == LED2)
 800025a:	79fb      	ldrb	r3, [r7, #7]
 800025c:	2b02      	cmp	r3, #2
 800025e:	d110      	bne.n	8000282 <LED_Control+0x62>
		if (cmd == ON)
 8000260:	79bb      	ldrb	r3, [r7, #6]
 8000262:	2b01      	cmp	r3, #1
 8000264:	d105      	bne.n	8000272 <LED_Control+0x52>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 8000266:	2201      	movs	r2, #1
 8000268:	2104      	movs	r1, #4
 800026a:	4808      	ldr	r0, [pc, #32]	@ (800028c <LED_Control+0x6c>)
 800026c:	f000 fe3e 	bl	8000eec <HAL_GPIO_WritePin>
}
 8000270:	e007      	b.n	8000282 <LED_Control+0x62>
		else if (cmd == OFF)
 8000272:	79bb      	ldrb	r3, [r7, #6]
 8000274:	2b00      	cmp	r3, #0
 8000276:	d104      	bne.n	8000282 <LED_Control+0x62>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 8000278:	2200      	movs	r2, #0
 800027a:	2104      	movs	r1, #4
 800027c:	4803      	ldr	r0, [pc, #12]	@ (800028c <LED_Control+0x6c>)
 800027e:	f000 fe35 	bl	8000eec <HAL_GPIO_WritePin>
}
 8000282:	bf00      	nop
 8000284:	3708      	adds	r7, #8
 8000286:	46bd      	mov	sp, r7
 8000288:	bd80      	pop	{r7, pc}
 800028a:	bf00      	nop
 800028c:	40010800 	.word	0x40010800

08000290 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000294:	f000 fa84 	bl	80007a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000298:	f000 f814 	bl	80002c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800029c:	f7ff ff56 	bl	800014c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80002a0:	f000 f9c8 	bl	8000634 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart1, RX1_Buffer, 4);
 80002a4:	2204      	movs	r2, #4
 80002a6:	4904      	ldr	r1, [pc, #16]	@ (80002b8 <main+0x28>)
 80002a8:	4804      	ldr	r0, [pc, #16]	@ (80002bc <main+0x2c>)
 80002aa:	f001 fb3a 	bl	8001922 <HAL_UART_Receive_IT>
  printf("The system has been initialized!\n");
 80002ae:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <main+0x30>)
 80002b0:	f002 f9de 	bl	8002670 <puts>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80002b4:	bf00      	nop
 80002b6:	e7fd      	b.n	80002b4 <main+0x24>
 80002b8:	20000084 	.word	0x20000084
 80002bc:	20000090 	.word	0x20000090
 80002c0:	08002da4 	.word	0x08002da4

080002c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	b090      	sub	sp, #64	@ 0x40
 80002c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002ca:	f107 0318 	add.w	r3, r7, #24
 80002ce:	2228      	movs	r2, #40	@ 0x28
 80002d0:	2100      	movs	r1, #0
 80002d2:	4618      	mov	r0, r3
 80002d4:	f002 faac 	bl	8002830 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002d8:	1d3b      	adds	r3, r7, #4
 80002da:	2200      	movs	r2, #0
 80002dc:	601a      	str	r2, [r3, #0]
 80002de:	605a      	str	r2, [r3, #4]
 80002e0:	609a      	str	r2, [r3, #8]
 80002e2:	60da      	str	r2, [r3, #12]
 80002e4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002e6:	2302      	movs	r3, #2
 80002e8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002ea:	2301      	movs	r3, #1
 80002ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002ee:	2310      	movs	r3, #16
 80002f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002f2:	2300      	movs	r3, #0
 80002f4:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002f6:	f107 0318 	add.w	r3, r7, #24
 80002fa:	4618      	mov	r0, r3
 80002fc:	f000 fe26 	bl	8000f4c <HAL_RCC_OscConfig>
 8000300:	4603      	mov	r3, r0
 8000302:	2b00      	cmp	r3, #0
 8000304:	d001      	beq.n	800030a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000306:	f000 f818 	bl	800033a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800030a:	230f      	movs	r3, #15
 800030c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800030e:	2300      	movs	r3, #0
 8000310:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000312:	2300      	movs	r3, #0
 8000314:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000316:	2300      	movs	r3, #0
 8000318:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800031a:	2300      	movs	r3, #0
 800031c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800031e:	1d3b      	adds	r3, r7, #4
 8000320:	2100      	movs	r1, #0
 8000322:	4618      	mov	r0, r3
 8000324:	f001 f894 	bl	8001450 <HAL_RCC_ClockConfig>
 8000328:	4603      	mov	r3, r0
 800032a:	2b00      	cmp	r3, #0
 800032c:	d001      	beq.n	8000332 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800032e:	f000 f804 	bl	800033a <Error_Handler>
  }
}
 8000332:	bf00      	nop
 8000334:	3740      	adds	r7, #64	@ 0x40
 8000336:	46bd      	mov	sp, r7
 8000338:	bd80      	pop	{r7, pc}

0800033a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800033a:	b480      	push	{r7}
 800033c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800033e:	b672      	cpsid	i
}
 8000340:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000342:	bf00      	nop
 8000344:	e7fd      	b.n	8000342 <Error_Handler+0x8>
	...

08000348 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000348:	b480      	push	{r7}
 800034a:	b085      	sub	sp, #20
 800034c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800034e:	4b15      	ldr	r3, [pc, #84]	@ (80003a4 <HAL_MspInit+0x5c>)
 8000350:	699b      	ldr	r3, [r3, #24]
 8000352:	4a14      	ldr	r2, [pc, #80]	@ (80003a4 <HAL_MspInit+0x5c>)
 8000354:	f043 0301 	orr.w	r3, r3, #1
 8000358:	6193      	str	r3, [r2, #24]
 800035a:	4b12      	ldr	r3, [pc, #72]	@ (80003a4 <HAL_MspInit+0x5c>)
 800035c:	699b      	ldr	r3, [r3, #24]
 800035e:	f003 0301 	and.w	r3, r3, #1
 8000362:	60bb      	str	r3, [r7, #8]
 8000364:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000366:	4b0f      	ldr	r3, [pc, #60]	@ (80003a4 <HAL_MspInit+0x5c>)
 8000368:	69db      	ldr	r3, [r3, #28]
 800036a:	4a0e      	ldr	r2, [pc, #56]	@ (80003a4 <HAL_MspInit+0x5c>)
 800036c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000370:	61d3      	str	r3, [r2, #28]
 8000372:	4b0c      	ldr	r3, [pc, #48]	@ (80003a4 <HAL_MspInit+0x5c>)
 8000374:	69db      	ldr	r3, [r3, #28]
 8000376:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800037a:	607b      	str	r3, [r7, #4]
 800037c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800037e:	4b0a      	ldr	r3, [pc, #40]	@ (80003a8 <HAL_MspInit+0x60>)
 8000380:	685b      	ldr	r3, [r3, #4]
 8000382:	60fb      	str	r3, [r7, #12]
 8000384:	68fb      	ldr	r3, [r7, #12]
 8000386:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800038a:	60fb      	str	r3, [r7, #12]
 800038c:	68fb      	ldr	r3, [r7, #12]
 800038e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000392:	60fb      	str	r3, [r7, #12]
 8000394:	4a04      	ldr	r2, [pc, #16]	@ (80003a8 <HAL_MspInit+0x60>)
 8000396:	68fb      	ldr	r3, [r7, #12]
 8000398:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800039a:	bf00      	nop
 800039c:	3714      	adds	r7, #20
 800039e:	46bd      	mov	sp, r7
 80003a0:	bc80      	pop	{r7}
 80003a2:	4770      	bx	lr
 80003a4:	40021000 	.word	0x40021000
 80003a8:	40010000 	.word	0x40010000

080003ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80003ac:	b480      	push	{r7}
 80003ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80003b0:	bf00      	nop
 80003b2:	e7fd      	b.n	80003b0 <NMI_Handler+0x4>

080003b4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80003b4:	b480      	push	{r7}
 80003b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80003b8:	bf00      	nop
 80003ba:	e7fd      	b.n	80003b8 <HardFault_Handler+0x4>

080003bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80003bc:	b480      	push	{r7}
 80003be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80003c0:	bf00      	nop
 80003c2:	e7fd      	b.n	80003c0 <MemManage_Handler+0x4>

080003c4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80003c4:	b480      	push	{r7}
 80003c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80003c8:	bf00      	nop
 80003ca:	e7fd      	b.n	80003c8 <BusFault_Handler+0x4>

080003cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80003cc:	b480      	push	{r7}
 80003ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80003d0:	bf00      	nop
 80003d2:	e7fd      	b.n	80003d0 <UsageFault_Handler+0x4>

080003d4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80003d4:	b480      	push	{r7}
 80003d6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80003d8:	bf00      	nop
 80003da:	46bd      	mov	sp, r7
 80003dc:	bc80      	pop	{r7}
 80003de:	4770      	bx	lr

080003e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80003e0:	b480      	push	{r7}
 80003e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80003e4:	bf00      	nop
 80003e6:	46bd      	mov	sp, r7
 80003e8:	bc80      	pop	{r7}
 80003ea:	4770      	bx	lr

080003ec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80003ec:	b480      	push	{r7}
 80003ee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80003f0:	bf00      	nop
 80003f2:	46bd      	mov	sp, r7
 80003f4:	bc80      	pop	{r7}
 80003f6:	4770      	bx	lr

080003f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80003fc:	f000 fa16 	bl	800082c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000400:	bf00      	nop
 8000402:	bd80      	pop	{r7, pc}

08000404 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000408:	2001      	movs	r0, #1
 800040a:	f000 fd87 	bl	8000f1c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800040e:	bf00      	nop
 8000410:	bd80      	pop	{r7, pc}

08000412 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000412:	b580      	push	{r7, lr}
 8000414:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8000416:	2020      	movs	r0, #32
 8000418:	f000 fd80 	bl	8000f1c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800041c:	bf00      	nop
 800041e:	bd80      	pop	{r7, pc}

08000420 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000424:	4802      	ldr	r0, [pc, #8]	@ (8000430 <USART1_IRQHandler+0x10>)
 8000426:	f001 faa1 	bl	800196c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800042a:	bf00      	nop
 800042c:	bd80      	pop	{r7, pc}
 800042e:	bf00      	nop
 8000430:	20000090 	.word	0x20000090

08000434 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 1 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	b082      	sub	sp, #8
 8000438:	af00      	add	r7, sp, #0
 800043a:	4603      	mov	r3, r0
 800043c:	80fb      	strh	r3, [r7, #6]
	static uint32_t oldUWTick = 0;
	if ((uwTick - oldUWTick) < 200) return;
 800043e:	4b16      	ldr	r3, [pc, #88]	@ (8000498 <HAL_GPIO_EXTI_Callback+0x64>)
 8000440:	681a      	ldr	r2, [r3, #0]
 8000442:	4b16      	ldr	r3, [pc, #88]	@ (800049c <HAL_GPIO_EXTI_Callback+0x68>)
 8000444:	681b      	ldr	r3, [r3, #0]
 8000446:	1ad3      	subs	r3, r2, r3
 8000448:	2bc7      	cmp	r3, #199	@ 0xc7
 800044a:	d921      	bls.n	8000490 <HAL_GPIO_EXTI_Callback+0x5c>
	oldUWTick = uwTick;
 800044c:	4b12      	ldr	r3, [pc, #72]	@ (8000498 <HAL_GPIO_EXTI_Callback+0x64>)
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	4a12      	ldr	r2, [pc, #72]	@ (800049c <HAL_GPIO_EXTI_Callback+0x68>)
 8000452:	6013      	str	r3, [r2, #0]
	if (GPIO_Pin == GPIO_PIN_5)
 8000454:	88fb      	ldrh	r3, [r7, #6]
 8000456:	2b20      	cmp	r3, #32
 8000458:	d10b      	bne.n	8000472 <HAL_GPIO_EXTI_Callback+0x3e>
	{
		LED_Control(LED1, ON);
 800045a:	2101      	movs	r1, #1
 800045c:	2001      	movs	r0, #1
 800045e:	f7ff fedf 	bl	8000220 <LED_Control>
		LED_Control(LED2, ON);
 8000462:	2101      	movs	r1, #1
 8000464:	2002      	movs	r0, #2
 8000466:	f7ff fedb 	bl	8000220 <LED_Control>
		printf("GPIO pin 5 has pressed\n");
 800046a:	480d      	ldr	r0, [pc, #52]	@ (80004a0 <HAL_GPIO_EXTI_Callback+0x6c>)
 800046c:	f002 f900 	bl	8002670 <puts>
 8000470:	e00f      	b.n	8000492 <HAL_GPIO_EXTI_Callback+0x5e>
	}
	else if (GPIO_Pin == GPIO_PIN_0)
 8000472:	88fb      	ldrh	r3, [r7, #6]
 8000474:	2b01      	cmp	r3, #1
 8000476:	d10c      	bne.n	8000492 <HAL_GPIO_EXTI_Callback+0x5e>
	{
		LED_Control(LED1, OFF);
 8000478:	2100      	movs	r1, #0
 800047a:	2001      	movs	r0, #1
 800047c:	f7ff fed0 	bl	8000220 <LED_Control>
		LED_Control(LED2, OFF);
 8000480:	2100      	movs	r1, #0
 8000482:	2002      	movs	r0, #2
 8000484:	f7ff fecc 	bl	8000220 <LED_Control>
		printf("GPIO pin 0 has pressed\n");
 8000488:	4806      	ldr	r0, [pc, #24]	@ (80004a4 <HAL_GPIO_EXTI_Callback+0x70>)
 800048a:	f002 f8f1 	bl	8002670 <puts>
 800048e:	e000      	b.n	8000492 <HAL_GPIO_EXTI_Callback+0x5e>
	if ((uwTick - oldUWTick) < 200) return;
 8000490:	bf00      	nop
	}
}
 8000492:	3708      	adds	r7, #8
 8000494:	46bd      	mov	sp, r7
 8000496:	bd80      	pop	{r7, pc}
 8000498:	200000d8 	.word	0x200000d8
 800049c:	20000088 	.word	0x20000088
 80004a0:	08002dc8 	.word	0x08002dc8
 80004a4:	08002de0 	.word	0x08002de0

080004a8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b082      	sub	sp, #8
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1)
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	4a09      	ldr	r2, [pc, #36]	@ (80004dc <HAL_UART_RxCpltCallback+0x34>)
 80004b6:	4293      	cmp	r3, r2
 80004b8:	d10b      	bne.n	80004d2 <HAL_UART_RxCpltCallback+0x2a>
	{
		HAL_UART_Transmit(huart, RX1_Buffer, 4, HAL_MAX_DELAY);
 80004ba:	f04f 33ff 	mov.w	r3, #4294967295
 80004be:	2204      	movs	r2, #4
 80004c0:	4907      	ldr	r1, [pc, #28]	@ (80004e0 <HAL_UART_RxCpltCallback+0x38>)
 80004c2:	6878      	ldr	r0, [r7, #4]
 80004c4:	f001 f9a2 	bl	800180c <HAL_UART_Transmit>
		HAL_UART_Receive_IT(&huart1, RX1_Buffer, 4);
 80004c8:	2204      	movs	r2, #4
 80004ca:	4905      	ldr	r1, [pc, #20]	@ (80004e0 <HAL_UART_RxCpltCallback+0x38>)
 80004cc:	4805      	ldr	r0, [pc, #20]	@ (80004e4 <HAL_UART_RxCpltCallback+0x3c>)
 80004ce:	f001 fa28 	bl	8001922 <HAL_UART_Receive_IT>
	}
}
 80004d2:	bf00      	nop
 80004d4:	3708      	adds	r7, #8
 80004d6:	46bd      	mov	sp, r7
 80004d8:	bd80      	pop	{r7, pc}
 80004da:	bf00      	nop
 80004dc:	40013800 	.word	0x40013800
 80004e0:	20000084 	.word	0x20000084
 80004e4:	20000090 	.word	0x20000090

080004e8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b086      	sub	sp, #24
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	60f8      	str	r0, [r7, #12]
 80004f0:	60b9      	str	r1, [r7, #8]
 80004f2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004f4:	2300      	movs	r3, #0
 80004f6:	617b      	str	r3, [r7, #20]
 80004f8:	e00a      	b.n	8000510 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80004fa:	f3af 8000 	nop.w
 80004fe:	4601      	mov	r1, r0
 8000500:	68bb      	ldr	r3, [r7, #8]
 8000502:	1c5a      	adds	r2, r3, #1
 8000504:	60ba      	str	r2, [r7, #8]
 8000506:	b2ca      	uxtb	r2, r1
 8000508:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800050a:	697b      	ldr	r3, [r7, #20]
 800050c:	3301      	adds	r3, #1
 800050e:	617b      	str	r3, [r7, #20]
 8000510:	697a      	ldr	r2, [r7, #20]
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	429a      	cmp	r2, r3
 8000516:	dbf0      	blt.n	80004fa <_read+0x12>
  }

  return len;
 8000518:	687b      	ldr	r3, [r7, #4]
}
 800051a:	4618      	mov	r0, r3
 800051c:	3718      	adds	r7, #24
 800051e:	46bd      	mov	sp, r7
 8000520:	bd80      	pop	{r7, pc}

08000522 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000522:	b580      	push	{r7, lr}
 8000524:	b086      	sub	sp, #24
 8000526:	af00      	add	r7, sp, #0
 8000528:	60f8      	str	r0, [r7, #12]
 800052a:	60b9      	str	r1, [r7, #8]
 800052c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800052e:	2300      	movs	r3, #0
 8000530:	617b      	str	r3, [r7, #20]
 8000532:	e009      	b.n	8000548 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000534:	68bb      	ldr	r3, [r7, #8]
 8000536:	1c5a      	adds	r2, r3, #1
 8000538:	60ba      	str	r2, [r7, #8]
 800053a:	781b      	ldrb	r3, [r3, #0]
 800053c:	4618      	mov	r0, r3
 800053e:	f000 f8f7 	bl	8000730 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000542:	697b      	ldr	r3, [r7, #20]
 8000544:	3301      	adds	r3, #1
 8000546:	617b      	str	r3, [r7, #20]
 8000548:	697a      	ldr	r2, [r7, #20]
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	429a      	cmp	r2, r3
 800054e:	dbf1      	blt.n	8000534 <_write+0x12>
  }
  return len;
 8000550:	687b      	ldr	r3, [r7, #4]
}
 8000552:	4618      	mov	r0, r3
 8000554:	3718      	adds	r7, #24
 8000556:	46bd      	mov	sp, r7
 8000558:	bd80      	pop	{r7, pc}

0800055a <_close>:

int _close(int file)
{
 800055a:	b480      	push	{r7}
 800055c:	b083      	sub	sp, #12
 800055e:	af00      	add	r7, sp, #0
 8000560:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000562:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000566:	4618      	mov	r0, r3
 8000568:	370c      	adds	r7, #12
 800056a:	46bd      	mov	sp, r7
 800056c:	bc80      	pop	{r7}
 800056e:	4770      	bx	lr

08000570 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000570:	b480      	push	{r7}
 8000572:	b083      	sub	sp, #12
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
 8000578:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800057a:	683b      	ldr	r3, [r7, #0]
 800057c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000580:	605a      	str	r2, [r3, #4]
  return 0;
 8000582:	2300      	movs	r3, #0
}
 8000584:	4618      	mov	r0, r3
 8000586:	370c      	adds	r7, #12
 8000588:	46bd      	mov	sp, r7
 800058a:	bc80      	pop	{r7}
 800058c:	4770      	bx	lr

0800058e <_isatty>:

int _isatty(int file)
{
 800058e:	b480      	push	{r7}
 8000590:	b083      	sub	sp, #12
 8000592:	af00      	add	r7, sp, #0
 8000594:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000596:	2301      	movs	r3, #1
}
 8000598:	4618      	mov	r0, r3
 800059a:	370c      	adds	r7, #12
 800059c:	46bd      	mov	sp, r7
 800059e:	bc80      	pop	{r7}
 80005a0:	4770      	bx	lr

080005a2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80005a2:	b480      	push	{r7}
 80005a4:	b085      	sub	sp, #20
 80005a6:	af00      	add	r7, sp, #0
 80005a8:	60f8      	str	r0, [r7, #12]
 80005aa:	60b9      	str	r1, [r7, #8]
 80005ac:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80005ae:	2300      	movs	r3, #0
}
 80005b0:	4618      	mov	r0, r3
 80005b2:	3714      	adds	r7, #20
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bc80      	pop	{r7}
 80005b8:	4770      	bx	lr
	...

080005bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b086      	sub	sp, #24
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80005c4:	4a14      	ldr	r2, [pc, #80]	@ (8000618 <_sbrk+0x5c>)
 80005c6:	4b15      	ldr	r3, [pc, #84]	@ (800061c <_sbrk+0x60>)
 80005c8:	1ad3      	subs	r3, r2, r3
 80005ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80005cc:	697b      	ldr	r3, [r7, #20]
 80005ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80005d0:	4b13      	ldr	r3, [pc, #76]	@ (8000620 <_sbrk+0x64>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d102      	bne.n	80005de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80005d8:	4b11      	ldr	r3, [pc, #68]	@ (8000620 <_sbrk+0x64>)
 80005da:	4a12      	ldr	r2, [pc, #72]	@ (8000624 <_sbrk+0x68>)
 80005dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80005de:	4b10      	ldr	r3, [pc, #64]	@ (8000620 <_sbrk+0x64>)
 80005e0:	681a      	ldr	r2, [r3, #0]
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	4413      	add	r3, r2
 80005e6:	693a      	ldr	r2, [r7, #16]
 80005e8:	429a      	cmp	r2, r3
 80005ea:	d207      	bcs.n	80005fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80005ec:	f002 f96e 	bl	80028cc <__errno>
 80005f0:	4603      	mov	r3, r0
 80005f2:	220c      	movs	r2, #12
 80005f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80005f6:	f04f 33ff 	mov.w	r3, #4294967295
 80005fa:	e009      	b.n	8000610 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80005fc:	4b08      	ldr	r3, [pc, #32]	@ (8000620 <_sbrk+0x64>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000602:	4b07      	ldr	r3, [pc, #28]	@ (8000620 <_sbrk+0x64>)
 8000604:	681a      	ldr	r2, [r3, #0]
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	4413      	add	r3, r2
 800060a:	4a05      	ldr	r2, [pc, #20]	@ (8000620 <_sbrk+0x64>)
 800060c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800060e:	68fb      	ldr	r3, [r7, #12]
}
 8000610:	4618      	mov	r0, r3
 8000612:	3718      	adds	r7, #24
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}
 8000618:	20005000 	.word	0x20005000
 800061c:	00000400 	.word	0x00000400
 8000620:	2000008c 	.word	0x2000008c
 8000624:	20000228 	.word	0x20000228

08000628 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000628:	b480      	push	{r7}
 800062a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800062c:	bf00      	nop
 800062e:	46bd      	mov	sp, r7
 8000630:	bc80      	pop	{r7}
 8000632:	4770      	bx	lr

08000634 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000638:	4b11      	ldr	r3, [pc, #68]	@ (8000680 <MX_USART1_UART_Init+0x4c>)
 800063a:	4a12      	ldr	r2, [pc, #72]	@ (8000684 <MX_USART1_UART_Init+0x50>)
 800063c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800063e:	4b10      	ldr	r3, [pc, #64]	@ (8000680 <MX_USART1_UART_Init+0x4c>)
 8000640:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000644:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000646:	4b0e      	ldr	r3, [pc, #56]	@ (8000680 <MX_USART1_UART_Init+0x4c>)
 8000648:	2200      	movs	r2, #0
 800064a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800064c:	4b0c      	ldr	r3, [pc, #48]	@ (8000680 <MX_USART1_UART_Init+0x4c>)
 800064e:	2200      	movs	r2, #0
 8000650:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000652:	4b0b      	ldr	r3, [pc, #44]	@ (8000680 <MX_USART1_UART_Init+0x4c>)
 8000654:	2200      	movs	r2, #0
 8000656:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000658:	4b09      	ldr	r3, [pc, #36]	@ (8000680 <MX_USART1_UART_Init+0x4c>)
 800065a:	220c      	movs	r2, #12
 800065c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800065e:	4b08      	ldr	r3, [pc, #32]	@ (8000680 <MX_USART1_UART_Init+0x4c>)
 8000660:	2200      	movs	r2, #0
 8000662:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000664:	4b06      	ldr	r3, [pc, #24]	@ (8000680 <MX_USART1_UART_Init+0x4c>)
 8000666:	2200      	movs	r2, #0
 8000668:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800066a:	4805      	ldr	r0, [pc, #20]	@ (8000680 <MX_USART1_UART_Init+0x4c>)
 800066c:	f001 f87e 	bl	800176c <HAL_UART_Init>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d001      	beq.n	800067a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000676:	f7ff fe60 	bl	800033a <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800067a:	bf00      	nop
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	20000090 	.word	0x20000090
 8000684:	40013800 	.word	0x40013800

08000688 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b088      	sub	sp, #32
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000690:	f107 0310 	add.w	r3, r7, #16
 8000694:	2200      	movs	r2, #0
 8000696:	601a      	str	r2, [r3, #0]
 8000698:	605a      	str	r2, [r3, #4]
 800069a:	609a      	str	r2, [r3, #8]
 800069c:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	4a20      	ldr	r2, [pc, #128]	@ (8000724 <HAL_UART_MspInit+0x9c>)
 80006a4:	4293      	cmp	r3, r2
 80006a6:	d139      	bne.n	800071c <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80006a8:	4b1f      	ldr	r3, [pc, #124]	@ (8000728 <HAL_UART_MspInit+0xa0>)
 80006aa:	699b      	ldr	r3, [r3, #24]
 80006ac:	4a1e      	ldr	r2, [pc, #120]	@ (8000728 <HAL_UART_MspInit+0xa0>)
 80006ae:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006b2:	6193      	str	r3, [r2, #24]
 80006b4:	4b1c      	ldr	r3, [pc, #112]	@ (8000728 <HAL_UART_MspInit+0xa0>)
 80006b6:	699b      	ldr	r3, [r3, #24]
 80006b8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80006bc:	60fb      	str	r3, [r7, #12]
 80006be:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006c0:	4b19      	ldr	r3, [pc, #100]	@ (8000728 <HAL_UART_MspInit+0xa0>)
 80006c2:	699b      	ldr	r3, [r3, #24]
 80006c4:	4a18      	ldr	r2, [pc, #96]	@ (8000728 <HAL_UART_MspInit+0xa0>)
 80006c6:	f043 0304 	orr.w	r3, r3, #4
 80006ca:	6193      	str	r3, [r2, #24]
 80006cc:	4b16      	ldr	r3, [pc, #88]	@ (8000728 <HAL_UART_MspInit+0xa0>)
 80006ce:	699b      	ldr	r3, [r3, #24]
 80006d0:	f003 0304 	and.w	r3, r3, #4
 80006d4:	60bb      	str	r3, [r7, #8]
 80006d6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80006d8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80006dc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006de:	2302      	movs	r3, #2
 80006e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006e2:	2303      	movs	r3, #3
 80006e4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006e6:	f107 0310 	add.w	r3, r7, #16
 80006ea:	4619      	mov	r1, r3
 80006ec:	480f      	ldr	r0, [pc, #60]	@ (800072c <HAL_UART_MspInit+0xa4>)
 80006ee:	f000 fa79 	bl	8000be4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80006f2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80006f6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006f8:	2300      	movs	r3, #0
 80006fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006fc:	2300      	movs	r3, #0
 80006fe:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000700:	f107 0310 	add.w	r3, r7, #16
 8000704:	4619      	mov	r1, r3
 8000706:	4809      	ldr	r0, [pc, #36]	@ (800072c <HAL_UART_MspInit+0xa4>)
 8000708:	f000 fa6c 	bl	8000be4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800070c:	2200      	movs	r2, #0
 800070e:	2100      	movs	r1, #0
 8000710:	2025      	movs	r0, #37	@ 0x25
 8000712:	f000 f97e 	bl	8000a12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000716:	2025      	movs	r0, #37	@ 0x25
 8000718:	f000 f997 	bl	8000a4a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800071c:	bf00      	nop
 800071e:	3720      	adds	r7, #32
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}
 8000724:	40013800 	.word	0x40013800
 8000728:	40021000 	.word	0x40021000
 800072c:	40010800 	.word	0x40010800

08000730 <__io_putchar>:
  }
}

/* USER CODE BEGIN 1 */
int __io_putchar(int ch)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b082      	sub	sp, #8
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000738:	1d39      	adds	r1, r7, #4
 800073a:	f04f 33ff 	mov.w	r3, #4294967295
 800073e:	2201      	movs	r2, #1
 8000740:	4803      	ldr	r0, [pc, #12]	@ (8000750 <__io_putchar+0x20>)
 8000742:	f001 f863 	bl	800180c <HAL_UART_Transmit>
  return ch;
 8000746:	687b      	ldr	r3, [r7, #4]
}
 8000748:	4618      	mov	r0, r3
 800074a:	3708      	adds	r7, #8
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}
 8000750:	20000090 	.word	0x20000090

08000754 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000754:	f7ff ff68 	bl	8000628 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000758:	480b      	ldr	r0, [pc, #44]	@ (8000788 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800075a:	490c      	ldr	r1, [pc, #48]	@ (800078c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800075c:	4a0c      	ldr	r2, [pc, #48]	@ (8000790 <LoopFillZerobss+0x16>)
  movs r3, #0
 800075e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000760:	e002      	b.n	8000768 <LoopCopyDataInit>

08000762 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000762:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000764:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000766:	3304      	adds	r3, #4

08000768 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000768:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800076a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800076c:	d3f9      	bcc.n	8000762 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800076e:	4a09      	ldr	r2, [pc, #36]	@ (8000794 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000770:	4c09      	ldr	r4, [pc, #36]	@ (8000798 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000772:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000774:	e001      	b.n	800077a <LoopFillZerobss>

08000776 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000776:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000778:	3204      	adds	r2, #4

0800077a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800077a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800077c:	d3fb      	bcc.n	8000776 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800077e:	f002 f8ab 	bl	80028d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000782:	f7ff fd85 	bl	8000290 <main>
  bx lr
 8000786:	4770      	bx	lr
  ldr r0, =_sdata
 8000788:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800078c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000790:	08002e2c 	.word	0x08002e2c
  ldr r2, =_sbss
 8000794:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000798:	20000228 	.word	0x20000228

0800079c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800079c:	e7fe      	b.n	800079c <ADC1_2_IRQHandler>
	...

080007a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007a4:	4b08      	ldr	r3, [pc, #32]	@ (80007c8 <HAL_Init+0x28>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	4a07      	ldr	r2, [pc, #28]	@ (80007c8 <HAL_Init+0x28>)
 80007aa:	f043 0310 	orr.w	r3, r3, #16
 80007ae:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007b0:	2003      	movs	r0, #3
 80007b2:	f000 f923 	bl	80009fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80007b6:	200f      	movs	r0, #15
 80007b8:	f000 f808 	bl	80007cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007bc:	f7ff fdc4 	bl	8000348 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007c0:	2300      	movs	r3, #0
}
 80007c2:	4618      	mov	r0, r3
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	40022000 	.word	0x40022000

080007cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b082      	sub	sp, #8
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007d4:	4b12      	ldr	r3, [pc, #72]	@ (8000820 <HAL_InitTick+0x54>)
 80007d6:	681a      	ldr	r2, [r3, #0]
 80007d8:	4b12      	ldr	r3, [pc, #72]	@ (8000824 <HAL_InitTick+0x58>)
 80007da:	781b      	ldrb	r3, [r3, #0]
 80007dc:	4619      	mov	r1, r3
 80007de:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80007e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80007e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80007ea:	4618      	mov	r0, r3
 80007ec:	f000 f93b 	bl	8000a66 <HAL_SYSTICK_Config>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80007f6:	2301      	movs	r3, #1
 80007f8:	e00e      	b.n	8000818 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	2b0f      	cmp	r3, #15
 80007fe:	d80a      	bhi.n	8000816 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000800:	2200      	movs	r2, #0
 8000802:	6879      	ldr	r1, [r7, #4]
 8000804:	f04f 30ff 	mov.w	r0, #4294967295
 8000808:	f000 f903 	bl	8000a12 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800080c:	4a06      	ldr	r2, [pc, #24]	@ (8000828 <HAL_InitTick+0x5c>)
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000812:	2300      	movs	r3, #0
 8000814:	e000      	b.n	8000818 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000816:	2301      	movs	r3, #1
}
 8000818:	4618      	mov	r0, r3
 800081a:	3708      	adds	r7, #8
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}
 8000820:	20000000 	.word	0x20000000
 8000824:	20000008 	.word	0x20000008
 8000828:	20000004 	.word	0x20000004

0800082c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800082c:	b480      	push	{r7}
 800082e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000830:	4b05      	ldr	r3, [pc, #20]	@ (8000848 <HAL_IncTick+0x1c>)
 8000832:	781b      	ldrb	r3, [r3, #0]
 8000834:	461a      	mov	r2, r3
 8000836:	4b05      	ldr	r3, [pc, #20]	@ (800084c <HAL_IncTick+0x20>)
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	4413      	add	r3, r2
 800083c:	4a03      	ldr	r2, [pc, #12]	@ (800084c <HAL_IncTick+0x20>)
 800083e:	6013      	str	r3, [r2, #0]
}
 8000840:	bf00      	nop
 8000842:	46bd      	mov	sp, r7
 8000844:	bc80      	pop	{r7}
 8000846:	4770      	bx	lr
 8000848:	20000008 	.word	0x20000008
 800084c:	200000d8 	.word	0x200000d8

08000850 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000850:	b480      	push	{r7}
 8000852:	af00      	add	r7, sp, #0
  return uwTick;
 8000854:	4b02      	ldr	r3, [pc, #8]	@ (8000860 <HAL_GetTick+0x10>)
 8000856:	681b      	ldr	r3, [r3, #0]
}
 8000858:	4618      	mov	r0, r3
 800085a:	46bd      	mov	sp, r7
 800085c:	bc80      	pop	{r7}
 800085e:	4770      	bx	lr
 8000860:	200000d8 	.word	0x200000d8

08000864 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000864:	b480      	push	{r7}
 8000866:	b085      	sub	sp, #20
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	f003 0307 	and.w	r3, r3, #7
 8000872:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000874:	4b0c      	ldr	r3, [pc, #48]	@ (80008a8 <__NVIC_SetPriorityGrouping+0x44>)
 8000876:	68db      	ldr	r3, [r3, #12]
 8000878:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800087a:	68ba      	ldr	r2, [r7, #8]
 800087c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000880:	4013      	ands	r3, r2
 8000882:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000884:	68fb      	ldr	r3, [r7, #12]
 8000886:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000888:	68bb      	ldr	r3, [r7, #8]
 800088a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800088c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000890:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000894:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000896:	4a04      	ldr	r2, [pc, #16]	@ (80008a8 <__NVIC_SetPriorityGrouping+0x44>)
 8000898:	68bb      	ldr	r3, [r7, #8]
 800089a:	60d3      	str	r3, [r2, #12]
}
 800089c:	bf00      	nop
 800089e:	3714      	adds	r7, #20
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bc80      	pop	{r7}
 80008a4:	4770      	bx	lr
 80008a6:	bf00      	nop
 80008a8:	e000ed00 	.word	0xe000ed00

080008ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008ac:	b480      	push	{r7}
 80008ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008b0:	4b04      	ldr	r3, [pc, #16]	@ (80008c4 <__NVIC_GetPriorityGrouping+0x18>)
 80008b2:	68db      	ldr	r3, [r3, #12]
 80008b4:	0a1b      	lsrs	r3, r3, #8
 80008b6:	f003 0307 	and.w	r3, r3, #7
}
 80008ba:	4618      	mov	r0, r3
 80008bc:	46bd      	mov	sp, r7
 80008be:	bc80      	pop	{r7}
 80008c0:	4770      	bx	lr
 80008c2:	bf00      	nop
 80008c4:	e000ed00 	.word	0xe000ed00

080008c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008c8:	b480      	push	{r7}
 80008ca:	b083      	sub	sp, #12
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	4603      	mov	r3, r0
 80008d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	db0b      	blt.n	80008f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80008da:	79fb      	ldrb	r3, [r7, #7]
 80008dc:	f003 021f 	and.w	r2, r3, #31
 80008e0:	4906      	ldr	r1, [pc, #24]	@ (80008fc <__NVIC_EnableIRQ+0x34>)
 80008e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008e6:	095b      	lsrs	r3, r3, #5
 80008e8:	2001      	movs	r0, #1
 80008ea:	fa00 f202 	lsl.w	r2, r0, r2
 80008ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80008f2:	bf00      	nop
 80008f4:	370c      	adds	r7, #12
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bc80      	pop	{r7}
 80008fa:	4770      	bx	lr
 80008fc:	e000e100 	.word	0xe000e100

08000900 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000900:	b480      	push	{r7}
 8000902:	b083      	sub	sp, #12
 8000904:	af00      	add	r7, sp, #0
 8000906:	4603      	mov	r3, r0
 8000908:	6039      	str	r1, [r7, #0]
 800090a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800090c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000910:	2b00      	cmp	r3, #0
 8000912:	db0a      	blt.n	800092a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000914:	683b      	ldr	r3, [r7, #0]
 8000916:	b2da      	uxtb	r2, r3
 8000918:	490c      	ldr	r1, [pc, #48]	@ (800094c <__NVIC_SetPriority+0x4c>)
 800091a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800091e:	0112      	lsls	r2, r2, #4
 8000920:	b2d2      	uxtb	r2, r2
 8000922:	440b      	add	r3, r1
 8000924:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000928:	e00a      	b.n	8000940 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800092a:	683b      	ldr	r3, [r7, #0]
 800092c:	b2da      	uxtb	r2, r3
 800092e:	4908      	ldr	r1, [pc, #32]	@ (8000950 <__NVIC_SetPriority+0x50>)
 8000930:	79fb      	ldrb	r3, [r7, #7]
 8000932:	f003 030f 	and.w	r3, r3, #15
 8000936:	3b04      	subs	r3, #4
 8000938:	0112      	lsls	r2, r2, #4
 800093a:	b2d2      	uxtb	r2, r2
 800093c:	440b      	add	r3, r1
 800093e:	761a      	strb	r2, [r3, #24]
}
 8000940:	bf00      	nop
 8000942:	370c      	adds	r7, #12
 8000944:	46bd      	mov	sp, r7
 8000946:	bc80      	pop	{r7}
 8000948:	4770      	bx	lr
 800094a:	bf00      	nop
 800094c:	e000e100 	.word	0xe000e100
 8000950:	e000ed00 	.word	0xe000ed00

08000954 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000954:	b480      	push	{r7}
 8000956:	b089      	sub	sp, #36	@ 0x24
 8000958:	af00      	add	r7, sp, #0
 800095a:	60f8      	str	r0, [r7, #12]
 800095c:	60b9      	str	r1, [r7, #8]
 800095e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000960:	68fb      	ldr	r3, [r7, #12]
 8000962:	f003 0307 	and.w	r3, r3, #7
 8000966:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000968:	69fb      	ldr	r3, [r7, #28]
 800096a:	f1c3 0307 	rsb	r3, r3, #7
 800096e:	2b04      	cmp	r3, #4
 8000970:	bf28      	it	cs
 8000972:	2304      	movcs	r3, #4
 8000974:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000976:	69fb      	ldr	r3, [r7, #28]
 8000978:	3304      	adds	r3, #4
 800097a:	2b06      	cmp	r3, #6
 800097c:	d902      	bls.n	8000984 <NVIC_EncodePriority+0x30>
 800097e:	69fb      	ldr	r3, [r7, #28]
 8000980:	3b03      	subs	r3, #3
 8000982:	e000      	b.n	8000986 <NVIC_EncodePriority+0x32>
 8000984:	2300      	movs	r3, #0
 8000986:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000988:	f04f 32ff 	mov.w	r2, #4294967295
 800098c:	69bb      	ldr	r3, [r7, #24]
 800098e:	fa02 f303 	lsl.w	r3, r2, r3
 8000992:	43da      	mvns	r2, r3
 8000994:	68bb      	ldr	r3, [r7, #8]
 8000996:	401a      	ands	r2, r3
 8000998:	697b      	ldr	r3, [r7, #20]
 800099a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800099c:	f04f 31ff 	mov.w	r1, #4294967295
 80009a0:	697b      	ldr	r3, [r7, #20]
 80009a2:	fa01 f303 	lsl.w	r3, r1, r3
 80009a6:	43d9      	mvns	r1, r3
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009ac:	4313      	orrs	r3, r2
         );
}
 80009ae:	4618      	mov	r0, r3
 80009b0:	3724      	adds	r7, #36	@ 0x24
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bc80      	pop	{r7}
 80009b6:	4770      	bx	lr

080009b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b082      	sub	sp, #8
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	3b01      	subs	r3, #1
 80009c4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80009c8:	d301      	bcc.n	80009ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009ca:	2301      	movs	r3, #1
 80009cc:	e00f      	b.n	80009ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009ce:	4a0a      	ldr	r2, [pc, #40]	@ (80009f8 <SysTick_Config+0x40>)
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	3b01      	subs	r3, #1
 80009d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009d6:	210f      	movs	r1, #15
 80009d8:	f04f 30ff 	mov.w	r0, #4294967295
 80009dc:	f7ff ff90 	bl	8000900 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009e0:	4b05      	ldr	r3, [pc, #20]	@ (80009f8 <SysTick_Config+0x40>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009e6:	4b04      	ldr	r3, [pc, #16]	@ (80009f8 <SysTick_Config+0x40>)
 80009e8:	2207      	movs	r2, #7
 80009ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009ec:	2300      	movs	r3, #0
}
 80009ee:	4618      	mov	r0, r3
 80009f0:	3708      	adds	r7, #8
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	e000e010 	.word	0xe000e010

080009fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b082      	sub	sp, #8
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a04:	6878      	ldr	r0, [r7, #4]
 8000a06:	f7ff ff2d 	bl	8000864 <__NVIC_SetPriorityGrouping>
}
 8000a0a:	bf00      	nop
 8000a0c:	3708      	adds	r7, #8
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}

08000a12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a12:	b580      	push	{r7, lr}
 8000a14:	b086      	sub	sp, #24
 8000a16:	af00      	add	r7, sp, #0
 8000a18:	4603      	mov	r3, r0
 8000a1a:	60b9      	str	r1, [r7, #8]
 8000a1c:	607a      	str	r2, [r7, #4]
 8000a1e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a20:	2300      	movs	r3, #0
 8000a22:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a24:	f7ff ff42 	bl	80008ac <__NVIC_GetPriorityGrouping>
 8000a28:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a2a:	687a      	ldr	r2, [r7, #4]
 8000a2c:	68b9      	ldr	r1, [r7, #8]
 8000a2e:	6978      	ldr	r0, [r7, #20]
 8000a30:	f7ff ff90 	bl	8000954 <NVIC_EncodePriority>
 8000a34:	4602      	mov	r2, r0
 8000a36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a3a:	4611      	mov	r1, r2
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	f7ff ff5f 	bl	8000900 <__NVIC_SetPriority>
}
 8000a42:	bf00      	nop
 8000a44:	3718      	adds	r7, #24
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}

08000a4a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a4a:	b580      	push	{r7, lr}
 8000a4c:	b082      	sub	sp, #8
 8000a4e:	af00      	add	r7, sp, #0
 8000a50:	4603      	mov	r3, r0
 8000a52:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a58:	4618      	mov	r0, r3
 8000a5a:	f7ff ff35 	bl	80008c8 <__NVIC_EnableIRQ>
}
 8000a5e:	bf00      	nop
 8000a60:	3708      	adds	r7, #8
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}

08000a66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a66:	b580      	push	{r7, lr}
 8000a68:	b082      	sub	sp, #8
 8000a6a:	af00      	add	r7, sp, #0
 8000a6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a6e:	6878      	ldr	r0, [r7, #4]
 8000a70:	f7ff ffa2 	bl	80009b8 <SysTick_Config>
 8000a74:	4603      	mov	r3, r0
}
 8000a76:	4618      	mov	r0, r3
 8000a78:	3708      	adds	r7, #8
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}

08000a7e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000a7e:	b480      	push	{r7}
 8000a80:	b085      	sub	sp, #20
 8000a82:	af00      	add	r7, sp, #0
 8000a84:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000a86:	2300      	movs	r3, #0
 8000a88:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000a90:	b2db      	uxtb	r3, r3
 8000a92:	2b02      	cmp	r3, #2
 8000a94:	d008      	beq.n	8000aa8 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	2204      	movs	r2, #4
 8000a9a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000aa4:	2301      	movs	r3, #1
 8000aa6:	e020      	b.n	8000aea <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	681a      	ldr	r2, [r3, #0]
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	f022 020e 	bic.w	r2, r2, #14
 8000ab6:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	681a      	ldr	r2, [r3, #0]
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	f022 0201 	bic.w	r2, r2, #1
 8000ac6:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000ad0:	2101      	movs	r1, #1
 8000ad2:	fa01 f202 	lsl.w	r2, r1, r2
 8000ad6:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	2201      	movs	r2, #1
 8000adc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000ae8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000aea:	4618      	mov	r0, r3
 8000aec:	3714      	adds	r7, #20
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bc80      	pop	{r7}
 8000af2:	4770      	bx	lr

08000af4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b084      	sub	sp, #16
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000afc:	2300      	movs	r3, #0
 8000afe:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000b06:	b2db      	uxtb	r3, r3
 8000b08:	2b02      	cmp	r3, #2
 8000b0a:	d005      	beq.n	8000b18 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	2204      	movs	r2, #4
 8000b10:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8000b12:	2301      	movs	r3, #1
 8000b14:	73fb      	strb	r3, [r7, #15]
 8000b16:	e051      	b.n	8000bbc <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	681a      	ldr	r2, [r3, #0]
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	f022 020e 	bic.w	r2, r2, #14
 8000b26:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	681a      	ldr	r2, [r3, #0]
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	f022 0201 	bic.w	r2, r2, #1
 8000b36:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	4a22      	ldr	r2, [pc, #136]	@ (8000bc8 <HAL_DMA_Abort_IT+0xd4>)
 8000b3e:	4293      	cmp	r3, r2
 8000b40:	d029      	beq.n	8000b96 <HAL_DMA_Abort_IT+0xa2>
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	4a21      	ldr	r2, [pc, #132]	@ (8000bcc <HAL_DMA_Abort_IT+0xd8>)
 8000b48:	4293      	cmp	r3, r2
 8000b4a:	d022      	beq.n	8000b92 <HAL_DMA_Abort_IT+0x9e>
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	4a1f      	ldr	r2, [pc, #124]	@ (8000bd0 <HAL_DMA_Abort_IT+0xdc>)
 8000b52:	4293      	cmp	r3, r2
 8000b54:	d01a      	beq.n	8000b8c <HAL_DMA_Abort_IT+0x98>
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	4a1e      	ldr	r2, [pc, #120]	@ (8000bd4 <HAL_DMA_Abort_IT+0xe0>)
 8000b5c:	4293      	cmp	r3, r2
 8000b5e:	d012      	beq.n	8000b86 <HAL_DMA_Abort_IT+0x92>
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	4a1c      	ldr	r2, [pc, #112]	@ (8000bd8 <HAL_DMA_Abort_IT+0xe4>)
 8000b66:	4293      	cmp	r3, r2
 8000b68:	d00a      	beq.n	8000b80 <HAL_DMA_Abort_IT+0x8c>
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	4a1b      	ldr	r2, [pc, #108]	@ (8000bdc <HAL_DMA_Abort_IT+0xe8>)
 8000b70:	4293      	cmp	r3, r2
 8000b72:	d102      	bne.n	8000b7a <HAL_DMA_Abort_IT+0x86>
 8000b74:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000b78:	e00e      	b.n	8000b98 <HAL_DMA_Abort_IT+0xa4>
 8000b7a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000b7e:	e00b      	b.n	8000b98 <HAL_DMA_Abort_IT+0xa4>
 8000b80:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000b84:	e008      	b.n	8000b98 <HAL_DMA_Abort_IT+0xa4>
 8000b86:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b8a:	e005      	b.n	8000b98 <HAL_DMA_Abort_IT+0xa4>
 8000b8c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000b90:	e002      	b.n	8000b98 <HAL_DMA_Abort_IT+0xa4>
 8000b92:	2310      	movs	r3, #16
 8000b94:	e000      	b.n	8000b98 <HAL_DMA_Abort_IT+0xa4>
 8000b96:	2301      	movs	r3, #1
 8000b98:	4a11      	ldr	r2, [pc, #68]	@ (8000be0 <HAL_DMA_Abort_IT+0xec>)
 8000b9a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	2201      	movs	r2, #1
 8000ba0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d003      	beq.n	8000bbc <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000bb8:	6878      	ldr	r0, [r7, #4]
 8000bba:	4798      	blx	r3
    } 
  }
  return status;
 8000bbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	3710      	adds	r7, #16
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	40020008 	.word	0x40020008
 8000bcc:	4002001c 	.word	0x4002001c
 8000bd0:	40020030 	.word	0x40020030
 8000bd4:	40020044 	.word	0x40020044
 8000bd8:	40020058 	.word	0x40020058
 8000bdc:	4002006c 	.word	0x4002006c
 8000be0:	40020000 	.word	0x40020000

08000be4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000be4:	b480      	push	{r7}
 8000be6:	b08b      	sub	sp, #44	@ 0x2c
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
 8000bec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bf6:	e169      	b.n	8000ecc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000bf8:	2201      	movs	r2, #1
 8000bfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8000c00:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c02:	683b      	ldr	r3, [r7, #0]
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	69fa      	ldr	r2, [r7, #28]
 8000c08:	4013      	ands	r3, r2
 8000c0a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000c0c:	69ba      	ldr	r2, [r7, #24]
 8000c0e:	69fb      	ldr	r3, [r7, #28]
 8000c10:	429a      	cmp	r2, r3
 8000c12:	f040 8158 	bne.w	8000ec6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000c16:	683b      	ldr	r3, [r7, #0]
 8000c18:	685b      	ldr	r3, [r3, #4]
 8000c1a:	4a9a      	ldr	r2, [pc, #616]	@ (8000e84 <HAL_GPIO_Init+0x2a0>)
 8000c1c:	4293      	cmp	r3, r2
 8000c1e:	d05e      	beq.n	8000cde <HAL_GPIO_Init+0xfa>
 8000c20:	4a98      	ldr	r2, [pc, #608]	@ (8000e84 <HAL_GPIO_Init+0x2a0>)
 8000c22:	4293      	cmp	r3, r2
 8000c24:	d875      	bhi.n	8000d12 <HAL_GPIO_Init+0x12e>
 8000c26:	4a98      	ldr	r2, [pc, #608]	@ (8000e88 <HAL_GPIO_Init+0x2a4>)
 8000c28:	4293      	cmp	r3, r2
 8000c2a:	d058      	beq.n	8000cde <HAL_GPIO_Init+0xfa>
 8000c2c:	4a96      	ldr	r2, [pc, #600]	@ (8000e88 <HAL_GPIO_Init+0x2a4>)
 8000c2e:	4293      	cmp	r3, r2
 8000c30:	d86f      	bhi.n	8000d12 <HAL_GPIO_Init+0x12e>
 8000c32:	4a96      	ldr	r2, [pc, #600]	@ (8000e8c <HAL_GPIO_Init+0x2a8>)
 8000c34:	4293      	cmp	r3, r2
 8000c36:	d052      	beq.n	8000cde <HAL_GPIO_Init+0xfa>
 8000c38:	4a94      	ldr	r2, [pc, #592]	@ (8000e8c <HAL_GPIO_Init+0x2a8>)
 8000c3a:	4293      	cmp	r3, r2
 8000c3c:	d869      	bhi.n	8000d12 <HAL_GPIO_Init+0x12e>
 8000c3e:	4a94      	ldr	r2, [pc, #592]	@ (8000e90 <HAL_GPIO_Init+0x2ac>)
 8000c40:	4293      	cmp	r3, r2
 8000c42:	d04c      	beq.n	8000cde <HAL_GPIO_Init+0xfa>
 8000c44:	4a92      	ldr	r2, [pc, #584]	@ (8000e90 <HAL_GPIO_Init+0x2ac>)
 8000c46:	4293      	cmp	r3, r2
 8000c48:	d863      	bhi.n	8000d12 <HAL_GPIO_Init+0x12e>
 8000c4a:	4a92      	ldr	r2, [pc, #584]	@ (8000e94 <HAL_GPIO_Init+0x2b0>)
 8000c4c:	4293      	cmp	r3, r2
 8000c4e:	d046      	beq.n	8000cde <HAL_GPIO_Init+0xfa>
 8000c50:	4a90      	ldr	r2, [pc, #576]	@ (8000e94 <HAL_GPIO_Init+0x2b0>)
 8000c52:	4293      	cmp	r3, r2
 8000c54:	d85d      	bhi.n	8000d12 <HAL_GPIO_Init+0x12e>
 8000c56:	2b12      	cmp	r3, #18
 8000c58:	d82a      	bhi.n	8000cb0 <HAL_GPIO_Init+0xcc>
 8000c5a:	2b12      	cmp	r3, #18
 8000c5c:	d859      	bhi.n	8000d12 <HAL_GPIO_Init+0x12e>
 8000c5e:	a201      	add	r2, pc, #4	@ (adr r2, 8000c64 <HAL_GPIO_Init+0x80>)
 8000c60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c64:	08000cdf 	.word	0x08000cdf
 8000c68:	08000cb9 	.word	0x08000cb9
 8000c6c:	08000ccb 	.word	0x08000ccb
 8000c70:	08000d0d 	.word	0x08000d0d
 8000c74:	08000d13 	.word	0x08000d13
 8000c78:	08000d13 	.word	0x08000d13
 8000c7c:	08000d13 	.word	0x08000d13
 8000c80:	08000d13 	.word	0x08000d13
 8000c84:	08000d13 	.word	0x08000d13
 8000c88:	08000d13 	.word	0x08000d13
 8000c8c:	08000d13 	.word	0x08000d13
 8000c90:	08000d13 	.word	0x08000d13
 8000c94:	08000d13 	.word	0x08000d13
 8000c98:	08000d13 	.word	0x08000d13
 8000c9c:	08000d13 	.word	0x08000d13
 8000ca0:	08000d13 	.word	0x08000d13
 8000ca4:	08000d13 	.word	0x08000d13
 8000ca8:	08000cc1 	.word	0x08000cc1
 8000cac:	08000cd5 	.word	0x08000cd5
 8000cb0:	4a79      	ldr	r2, [pc, #484]	@ (8000e98 <HAL_GPIO_Init+0x2b4>)
 8000cb2:	4293      	cmp	r3, r2
 8000cb4:	d013      	beq.n	8000cde <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000cb6:	e02c      	b.n	8000d12 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	68db      	ldr	r3, [r3, #12]
 8000cbc:	623b      	str	r3, [r7, #32]
          break;
 8000cbe:	e029      	b.n	8000d14 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	68db      	ldr	r3, [r3, #12]
 8000cc4:	3304      	adds	r3, #4
 8000cc6:	623b      	str	r3, [r7, #32]
          break;
 8000cc8:	e024      	b.n	8000d14 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000cca:	683b      	ldr	r3, [r7, #0]
 8000ccc:	68db      	ldr	r3, [r3, #12]
 8000cce:	3308      	adds	r3, #8
 8000cd0:	623b      	str	r3, [r7, #32]
          break;
 8000cd2:	e01f      	b.n	8000d14 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	68db      	ldr	r3, [r3, #12]
 8000cd8:	330c      	adds	r3, #12
 8000cda:	623b      	str	r3, [r7, #32]
          break;
 8000cdc:	e01a      	b.n	8000d14 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000cde:	683b      	ldr	r3, [r7, #0]
 8000ce0:	689b      	ldr	r3, [r3, #8]
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d102      	bne.n	8000cec <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000ce6:	2304      	movs	r3, #4
 8000ce8:	623b      	str	r3, [r7, #32]
          break;
 8000cea:	e013      	b.n	8000d14 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000cec:	683b      	ldr	r3, [r7, #0]
 8000cee:	689b      	ldr	r3, [r3, #8]
 8000cf0:	2b01      	cmp	r3, #1
 8000cf2:	d105      	bne.n	8000d00 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000cf4:	2308      	movs	r3, #8
 8000cf6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	69fa      	ldr	r2, [r7, #28]
 8000cfc:	611a      	str	r2, [r3, #16]
          break;
 8000cfe:	e009      	b.n	8000d14 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d00:	2308      	movs	r3, #8
 8000d02:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	69fa      	ldr	r2, [r7, #28]
 8000d08:	615a      	str	r2, [r3, #20]
          break;
 8000d0a:	e003      	b.n	8000d14 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	623b      	str	r3, [r7, #32]
          break;
 8000d10:	e000      	b.n	8000d14 <HAL_GPIO_Init+0x130>
          break;
 8000d12:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000d14:	69bb      	ldr	r3, [r7, #24]
 8000d16:	2bff      	cmp	r3, #255	@ 0xff
 8000d18:	d801      	bhi.n	8000d1e <HAL_GPIO_Init+0x13a>
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	e001      	b.n	8000d22 <HAL_GPIO_Init+0x13e>
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	3304      	adds	r3, #4
 8000d22:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000d24:	69bb      	ldr	r3, [r7, #24]
 8000d26:	2bff      	cmp	r3, #255	@ 0xff
 8000d28:	d802      	bhi.n	8000d30 <HAL_GPIO_Init+0x14c>
 8000d2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d2c:	009b      	lsls	r3, r3, #2
 8000d2e:	e002      	b.n	8000d36 <HAL_GPIO_Init+0x152>
 8000d30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d32:	3b08      	subs	r3, #8
 8000d34:	009b      	lsls	r3, r3, #2
 8000d36:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000d38:	697b      	ldr	r3, [r7, #20]
 8000d3a:	681a      	ldr	r2, [r3, #0]
 8000d3c:	210f      	movs	r1, #15
 8000d3e:	693b      	ldr	r3, [r7, #16]
 8000d40:	fa01 f303 	lsl.w	r3, r1, r3
 8000d44:	43db      	mvns	r3, r3
 8000d46:	401a      	ands	r2, r3
 8000d48:	6a39      	ldr	r1, [r7, #32]
 8000d4a:	693b      	ldr	r3, [r7, #16]
 8000d4c:	fa01 f303 	lsl.w	r3, r1, r3
 8000d50:	431a      	orrs	r2, r3
 8000d52:	697b      	ldr	r3, [r7, #20]
 8000d54:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	685b      	ldr	r3, [r3, #4]
 8000d5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	f000 80b1 	beq.w	8000ec6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000d64:	4b4d      	ldr	r3, [pc, #308]	@ (8000e9c <HAL_GPIO_Init+0x2b8>)
 8000d66:	699b      	ldr	r3, [r3, #24]
 8000d68:	4a4c      	ldr	r2, [pc, #304]	@ (8000e9c <HAL_GPIO_Init+0x2b8>)
 8000d6a:	f043 0301 	orr.w	r3, r3, #1
 8000d6e:	6193      	str	r3, [r2, #24]
 8000d70:	4b4a      	ldr	r3, [pc, #296]	@ (8000e9c <HAL_GPIO_Init+0x2b8>)
 8000d72:	699b      	ldr	r3, [r3, #24]
 8000d74:	f003 0301 	and.w	r3, r3, #1
 8000d78:	60bb      	str	r3, [r7, #8]
 8000d7a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000d7c:	4a48      	ldr	r2, [pc, #288]	@ (8000ea0 <HAL_GPIO_Init+0x2bc>)
 8000d7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d80:	089b      	lsrs	r3, r3, #2
 8000d82:	3302      	adds	r3, #2
 8000d84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d88:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000d8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d8c:	f003 0303 	and.w	r3, r3, #3
 8000d90:	009b      	lsls	r3, r3, #2
 8000d92:	220f      	movs	r2, #15
 8000d94:	fa02 f303 	lsl.w	r3, r2, r3
 8000d98:	43db      	mvns	r3, r3
 8000d9a:	68fa      	ldr	r2, [r7, #12]
 8000d9c:	4013      	ands	r3, r2
 8000d9e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	4a40      	ldr	r2, [pc, #256]	@ (8000ea4 <HAL_GPIO_Init+0x2c0>)
 8000da4:	4293      	cmp	r3, r2
 8000da6:	d013      	beq.n	8000dd0 <HAL_GPIO_Init+0x1ec>
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	4a3f      	ldr	r2, [pc, #252]	@ (8000ea8 <HAL_GPIO_Init+0x2c4>)
 8000dac:	4293      	cmp	r3, r2
 8000dae:	d00d      	beq.n	8000dcc <HAL_GPIO_Init+0x1e8>
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	4a3e      	ldr	r2, [pc, #248]	@ (8000eac <HAL_GPIO_Init+0x2c8>)
 8000db4:	4293      	cmp	r3, r2
 8000db6:	d007      	beq.n	8000dc8 <HAL_GPIO_Init+0x1e4>
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	4a3d      	ldr	r2, [pc, #244]	@ (8000eb0 <HAL_GPIO_Init+0x2cc>)
 8000dbc:	4293      	cmp	r3, r2
 8000dbe:	d101      	bne.n	8000dc4 <HAL_GPIO_Init+0x1e0>
 8000dc0:	2303      	movs	r3, #3
 8000dc2:	e006      	b.n	8000dd2 <HAL_GPIO_Init+0x1ee>
 8000dc4:	2304      	movs	r3, #4
 8000dc6:	e004      	b.n	8000dd2 <HAL_GPIO_Init+0x1ee>
 8000dc8:	2302      	movs	r3, #2
 8000dca:	e002      	b.n	8000dd2 <HAL_GPIO_Init+0x1ee>
 8000dcc:	2301      	movs	r3, #1
 8000dce:	e000      	b.n	8000dd2 <HAL_GPIO_Init+0x1ee>
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000dd4:	f002 0203 	and.w	r2, r2, #3
 8000dd8:	0092      	lsls	r2, r2, #2
 8000dda:	4093      	lsls	r3, r2
 8000ddc:	68fa      	ldr	r2, [r7, #12]
 8000dde:	4313      	orrs	r3, r2
 8000de0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000de2:	492f      	ldr	r1, [pc, #188]	@ (8000ea0 <HAL_GPIO_Init+0x2bc>)
 8000de4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000de6:	089b      	lsrs	r3, r3, #2
 8000de8:	3302      	adds	r3, #2
 8000dea:	68fa      	ldr	r2, [r7, #12]
 8000dec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	685b      	ldr	r3, [r3, #4]
 8000df4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d006      	beq.n	8000e0a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000dfc:	4b2d      	ldr	r3, [pc, #180]	@ (8000eb4 <HAL_GPIO_Init+0x2d0>)
 8000dfe:	689a      	ldr	r2, [r3, #8]
 8000e00:	492c      	ldr	r1, [pc, #176]	@ (8000eb4 <HAL_GPIO_Init+0x2d0>)
 8000e02:	69bb      	ldr	r3, [r7, #24]
 8000e04:	4313      	orrs	r3, r2
 8000e06:	608b      	str	r3, [r1, #8]
 8000e08:	e006      	b.n	8000e18 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000e0a:	4b2a      	ldr	r3, [pc, #168]	@ (8000eb4 <HAL_GPIO_Init+0x2d0>)
 8000e0c:	689a      	ldr	r2, [r3, #8]
 8000e0e:	69bb      	ldr	r3, [r7, #24]
 8000e10:	43db      	mvns	r3, r3
 8000e12:	4928      	ldr	r1, [pc, #160]	@ (8000eb4 <HAL_GPIO_Init+0x2d0>)
 8000e14:	4013      	ands	r3, r2
 8000e16:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	685b      	ldr	r3, [r3, #4]
 8000e1c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d006      	beq.n	8000e32 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000e24:	4b23      	ldr	r3, [pc, #140]	@ (8000eb4 <HAL_GPIO_Init+0x2d0>)
 8000e26:	68da      	ldr	r2, [r3, #12]
 8000e28:	4922      	ldr	r1, [pc, #136]	@ (8000eb4 <HAL_GPIO_Init+0x2d0>)
 8000e2a:	69bb      	ldr	r3, [r7, #24]
 8000e2c:	4313      	orrs	r3, r2
 8000e2e:	60cb      	str	r3, [r1, #12]
 8000e30:	e006      	b.n	8000e40 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000e32:	4b20      	ldr	r3, [pc, #128]	@ (8000eb4 <HAL_GPIO_Init+0x2d0>)
 8000e34:	68da      	ldr	r2, [r3, #12]
 8000e36:	69bb      	ldr	r3, [r7, #24]
 8000e38:	43db      	mvns	r3, r3
 8000e3a:	491e      	ldr	r1, [pc, #120]	@ (8000eb4 <HAL_GPIO_Init+0x2d0>)
 8000e3c:	4013      	ands	r3, r2
 8000e3e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	685b      	ldr	r3, [r3, #4]
 8000e44:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d006      	beq.n	8000e5a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000e4c:	4b19      	ldr	r3, [pc, #100]	@ (8000eb4 <HAL_GPIO_Init+0x2d0>)
 8000e4e:	685a      	ldr	r2, [r3, #4]
 8000e50:	4918      	ldr	r1, [pc, #96]	@ (8000eb4 <HAL_GPIO_Init+0x2d0>)
 8000e52:	69bb      	ldr	r3, [r7, #24]
 8000e54:	4313      	orrs	r3, r2
 8000e56:	604b      	str	r3, [r1, #4]
 8000e58:	e006      	b.n	8000e68 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000e5a:	4b16      	ldr	r3, [pc, #88]	@ (8000eb4 <HAL_GPIO_Init+0x2d0>)
 8000e5c:	685a      	ldr	r2, [r3, #4]
 8000e5e:	69bb      	ldr	r3, [r7, #24]
 8000e60:	43db      	mvns	r3, r3
 8000e62:	4914      	ldr	r1, [pc, #80]	@ (8000eb4 <HAL_GPIO_Init+0x2d0>)
 8000e64:	4013      	ands	r3, r2
 8000e66:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	685b      	ldr	r3, [r3, #4]
 8000e6c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d021      	beq.n	8000eb8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000e74:	4b0f      	ldr	r3, [pc, #60]	@ (8000eb4 <HAL_GPIO_Init+0x2d0>)
 8000e76:	681a      	ldr	r2, [r3, #0]
 8000e78:	490e      	ldr	r1, [pc, #56]	@ (8000eb4 <HAL_GPIO_Init+0x2d0>)
 8000e7a:	69bb      	ldr	r3, [r7, #24]
 8000e7c:	4313      	orrs	r3, r2
 8000e7e:	600b      	str	r3, [r1, #0]
 8000e80:	e021      	b.n	8000ec6 <HAL_GPIO_Init+0x2e2>
 8000e82:	bf00      	nop
 8000e84:	10320000 	.word	0x10320000
 8000e88:	10310000 	.word	0x10310000
 8000e8c:	10220000 	.word	0x10220000
 8000e90:	10210000 	.word	0x10210000
 8000e94:	10120000 	.word	0x10120000
 8000e98:	10110000 	.word	0x10110000
 8000e9c:	40021000 	.word	0x40021000
 8000ea0:	40010000 	.word	0x40010000
 8000ea4:	40010800 	.word	0x40010800
 8000ea8:	40010c00 	.word	0x40010c00
 8000eac:	40011000 	.word	0x40011000
 8000eb0:	40011400 	.word	0x40011400
 8000eb4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000eb8:	4b0b      	ldr	r3, [pc, #44]	@ (8000ee8 <HAL_GPIO_Init+0x304>)
 8000eba:	681a      	ldr	r2, [r3, #0]
 8000ebc:	69bb      	ldr	r3, [r7, #24]
 8000ebe:	43db      	mvns	r3, r3
 8000ec0:	4909      	ldr	r1, [pc, #36]	@ (8000ee8 <HAL_GPIO_Init+0x304>)
 8000ec2:	4013      	ands	r3, r2
 8000ec4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000ec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ec8:	3301      	adds	r3, #1
 8000eca:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	681a      	ldr	r2, [r3, #0]
 8000ed0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ed2:	fa22 f303 	lsr.w	r3, r2, r3
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	f47f ae8e 	bne.w	8000bf8 <HAL_GPIO_Init+0x14>
  }
}
 8000edc:	bf00      	nop
 8000ede:	bf00      	nop
 8000ee0:	372c      	adds	r7, #44	@ 0x2c
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bc80      	pop	{r7}
 8000ee6:	4770      	bx	lr
 8000ee8:	40010400 	.word	0x40010400

08000eec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b083      	sub	sp, #12
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
 8000ef4:	460b      	mov	r3, r1
 8000ef6:	807b      	strh	r3, [r7, #2]
 8000ef8:	4613      	mov	r3, r2
 8000efa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000efc:	787b      	ldrb	r3, [r7, #1]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d003      	beq.n	8000f0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f02:	887a      	ldrh	r2, [r7, #2]
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000f08:	e003      	b.n	8000f12 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000f0a:	887b      	ldrh	r3, [r7, #2]
 8000f0c:	041a      	lsls	r2, r3, #16
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	611a      	str	r2, [r3, #16]
}
 8000f12:	bf00      	nop
 8000f14:	370c      	adds	r7, #12
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bc80      	pop	{r7}
 8000f1a:	4770      	bx	lr

08000f1c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	4603      	mov	r3, r0
 8000f24:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000f26:	4b08      	ldr	r3, [pc, #32]	@ (8000f48 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000f28:	695a      	ldr	r2, [r3, #20]
 8000f2a:	88fb      	ldrh	r3, [r7, #6]
 8000f2c:	4013      	ands	r3, r2
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d006      	beq.n	8000f40 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000f32:	4a05      	ldr	r2, [pc, #20]	@ (8000f48 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000f34:	88fb      	ldrh	r3, [r7, #6]
 8000f36:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000f38:	88fb      	ldrh	r3, [r7, #6]
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f7ff fa7a 	bl	8000434 <HAL_GPIO_EXTI_Callback>
  }
}
 8000f40:	bf00      	nop
 8000f42:	3708      	adds	r7, #8
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}
 8000f48:	40010400 	.word	0x40010400

08000f4c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b086      	sub	sp, #24
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d101      	bne.n	8000f5e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	e272      	b.n	8001444 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	f003 0301 	and.w	r3, r3, #1
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	f000 8087 	beq.w	800107a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000f6c:	4b92      	ldr	r3, [pc, #584]	@ (80011b8 <HAL_RCC_OscConfig+0x26c>)
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	f003 030c 	and.w	r3, r3, #12
 8000f74:	2b04      	cmp	r3, #4
 8000f76:	d00c      	beq.n	8000f92 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000f78:	4b8f      	ldr	r3, [pc, #572]	@ (80011b8 <HAL_RCC_OscConfig+0x26c>)
 8000f7a:	685b      	ldr	r3, [r3, #4]
 8000f7c:	f003 030c 	and.w	r3, r3, #12
 8000f80:	2b08      	cmp	r3, #8
 8000f82:	d112      	bne.n	8000faa <HAL_RCC_OscConfig+0x5e>
 8000f84:	4b8c      	ldr	r3, [pc, #560]	@ (80011b8 <HAL_RCC_OscConfig+0x26c>)
 8000f86:	685b      	ldr	r3, [r3, #4]
 8000f88:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f8c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000f90:	d10b      	bne.n	8000faa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f92:	4b89      	ldr	r3, [pc, #548]	@ (80011b8 <HAL_RCC_OscConfig+0x26c>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d06c      	beq.n	8001078 <HAL_RCC_OscConfig+0x12c>
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	685b      	ldr	r3, [r3, #4]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d168      	bne.n	8001078 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	e24c      	b.n	8001444 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	685b      	ldr	r3, [r3, #4]
 8000fae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000fb2:	d106      	bne.n	8000fc2 <HAL_RCC_OscConfig+0x76>
 8000fb4:	4b80      	ldr	r3, [pc, #512]	@ (80011b8 <HAL_RCC_OscConfig+0x26c>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4a7f      	ldr	r2, [pc, #508]	@ (80011b8 <HAL_RCC_OscConfig+0x26c>)
 8000fba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000fbe:	6013      	str	r3, [r2, #0]
 8000fc0:	e02e      	b.n	8001020 <HAL_RCC_OscConfig+0xd4>
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	685b      	ldr	r3, [r3, #4]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d10c      	bne.n	8000fe4 <HAL_RCC_OscConfig+0x98>
 8000fca:	4b7b      	ldr	r3, [pc, #492]	@ (80011b8 <HAL_RCC_OscConfig+0x26c>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	4a7a      	ldr	r2, [pc, #488]	@ (80011b8 <HAL_RCC_OscConfig+0x26c>)
 8000fd0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000fd4:	6013      	str	r3, [r2, #0]
 8000fd6:	4b78      	ldr	r3, [pc, #480]	@ (80011b8 <HAL_RCC_OscConfig+0x26c>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	4a77      	ldr	r2, [pc, #476]	@ (80011b8 <HAL_RCC_OscConfig+0x26c>)
 8000fdc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000fe0:	6013      	str	r3, [r2, #0]
 8000fe2:	e01d      	b.n	8001020 <HAL_RCC_OscConfig+0xd4>
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	685b      	ldr	r3, [r3, #4]
 8000fe8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000fec:	d10c      	bne.n	8001008 <HAL_RCC_OscConfig+0xbc>
 8000fee:	4b72      	ldr	r3, [pc, #456]	@ (80011b8 <HAL_RCC_OscConfig+0x26c>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	4a71      	ldr	r2, [pc, #452]	@ (80011b8 <HAL_RCC_OscConfig+0x26c>)
 8000ff4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000ff8:	6013      	str	r3, [r2, #0]
 8000ffa:	4b6f      	ldr	r3, [pc, #444]	@ (80011b8 <HAL_RCC_OscConfig+0x26c>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	4a6e      	ldr	r2, [pc, #440]	@ (80011b8 <HAL_RCC_OscConfig+0x26c>)
 8001000:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001004:	6013      	str	r3, [r2, #0]
 8001006:	e00b      	b.n	8001020 <HAL_RCC_OscConfig+0xd4>
 8001008:	4b6b      	ldr	r3, [pc, #428]	@ (80011b8 <HAL_RCC_OscConfig+0x26c>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	4a6a      	ldr	r2, [pc, #424]	@ (80011b8 <HAL_RCC_OscConfig+0x26c>)
 800100e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001012:	6013      	str	r3, [r2, #0]
 8001014:	4b68      	ldr	r3, [pc, #416]	@ (80011b8 <HAL_RCC_OscConfig+0x26c>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4a67      	ldr	r2, [pc, #412]	@ (80011b8 <HAL_RCC_OscConfig+0x26c>)
 800101a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800101e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	685b      	ldr	r3, [r3, #4]
 8001024:	2b00      	cmp	r3, #0
 8001026:	d013      	beq.n	8001050 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001028:	f7ff fc12 	bl	8000850 <HAL_GetTick>
 800102c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800102e:	e008      	b.n	8001042 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001030:	f7ff fc0e 	bl	8000850 <HAL_GetTick>
 8001034:	4602      	mov	r2, r0
 8001036:	693b      	ldr	r3, [r7, #16]
 8001038:	1ad3      	subs	r3, r2, r3
 800103a:	2b64      	cmp	r3, #100	@ 0x64
 800103c:	d901      	bls.n	8001042 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800103e:	2303      	movs	r3, #3
 8001040:	e200      	b.n	8001444 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001042:	4b5d      	ldr	r3, [pc, #372]	@ (80011b8 <HAL_RCC_OscConfig+0x26c>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800104a:	2b00      	cmp	r3, #0
 800104c:	d0f0      	beq.n	8001030 <HAL_RCC_OscConfig+0xe4>
 800104e:	e014      	b.n	800107a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001050:	f7ff fbfe 	bl	8000850 <HAL_GetTick>
 8001054:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001056:	e008      	b.n	800106a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001058:	f7ff fbfa 	bl	8000850 <HAL_GetTick>
 800105c:	4602      	mov	r2, r0
 800105e:	693b      	ldr	r3, [r7, #16]
 8001060:	1ad3      	subs	r3, r2, r3
 8001062:	2b64      	cmp	r3, #100	@ 0x64
 8001064:	d901      	bls.n	800106a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001066:	2303      	movs	r3, #3
 8001068:	e1ec      	b.n	8001444 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800106a:	4b53      	ldr	r3, [pc, #332]	@ (80011b8 <HAL_RCC_OscConfig+0x26c>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001072:	2b00      	cmp	r3, #0
 8001074:	d1f0      	bne.n	8001058 <HAL_RCC_OscConfig+0x10c>
 8001076:	e000      	b.n	800107a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001078:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f003 0302 	and.w	r3, r3, #2
 8001082:	2b00      	cmp	r3, #0
 8001084:	d063      	beq.n	800114e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001086:	4b4c      	ldr	r3, [pc, #304]	@ (80011b8 <HAL_RCC_OscConfig+0x26c>)
 8001088:	685b      	ldr	r3, [r3, #4]
 800108a:	f003 030c 	and.w	r3, r3, #12
 800108e:	2b00      	cmp	r3, #0
 8001090:	d00b      	beq.n	80010aa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001092:	4b49      	ldr	r3, [pc, #292]	@ (80011b8 <HAL_RCC_OscConfig+0x26c>)
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	f003 030c 	and.w	r3, r3, #12
 800109a:	2b08      	cmp	r3, #8
 800109c:	d11c      	bne.n	80010d8 <HAL_RCC_OscConfig+0x18c>
 800109e:	4b46      	ldr	r3, [pc, #280]	@ (80011b8 <HAL_RCC_OscConfig+0x26c>)
 80010a0:	685b      	ldr	r3, [r3, #4]
 80010a2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d116      	bne.n	80010d8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010aa:	4b43      	ldr	r3, [pc, #268]	@ (80011b8 <HAL_RCC_OscConfig+0x26c>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f003 0302 	and.w	r3, r3, #2
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d005      	beq.n	80010c2 <HAL_RCC_OscConfig+0x176>
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	691b      	ldr	r3, [r3, #16]
 80010ba:	2b01      	cmp	r3, #1
 80010bc:	d001      	beq.n	80010c2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80010be:	2301      	movs	r3, #1
 80010c0:	e1c0      	b.n	8001444 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010c2:	4b3d      	ldr	r3, [pc, #244]	@ (80011b8 <HAL_RCC_OscConfig+0x26c>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	695b      	ldr	r3, [r3, #20]
 80010ce:	00db      	lsls	r3, r3, #3
 80010d0:	4939      	ldr	r1, [pc, #228]	@ (80011b8 <HAL_RCC_OscConfig+0x26c>)
 80010d2:	4313      	orrs	r3, r2
 80010d4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010d6:	e03a      	b.n	800114e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	691b      	ldr	r3, [r3, #16]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d020      	beq.n	8001122 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80010e0:	4b36      	ldr	r3, [pc, #216]	@ (80011bc <HAL_RCC_OscConfig+0x270>)
 80010e2:	2201      	movs	r2, #1
 80010e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010e6:	f7ff fbb3 	bl	8000850 <HAL_GetTick>
 80010ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010ec:	e008      	b.n	8001100 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010ee:	f7ff fbaf 	bl	8000850 <HAL_GetTick>
 80010f2:	4602      	mov	r2, r0
 80010f4:	693b      	ldr	r3, [r7, #16]
 80010f6:	1ad3      	subs	r3, r2, r3
 80010f8:	2b02      	cmp	r3, #2
 80010fa:	d901      	bls.n	8001100 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80010fc:	2303      	movs	r3, #3
 80010fe:	e1a1      	b.n	8001444 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001100:	4b2d      	ldr	r3, [pc, #180]	@ (80011b8 <HAL_RCC_OscConfig+0x26c>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	f003 0302 	and.w	r3, r3, #2
 8001108:	2b00      	cmp	r3, #0
 800110a:	d0f0      	beq.n	80010ee <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800110c:	4b2a      	ldr	r3, [pc, #168]	@ (80011b8 <HAL_RCC_OscConfig+0x26c>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	695b      	ldr	r3, [r3, #20]
 8001118:	00db      	lsls	r3, r3, #3
 800111a:	4927      	ldr	r1, [pc, #156]	@ (80011b8 <HAL_RCC_OscConfig+0x26c>)
 800111c:	4313      	orrs	r3, r2
 800111e:	600b      	str	r3, [r1, #0]
 8001120:	e015      	b.n	800114e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001122:	4b26      	ldr	r3, [pc, #152]	@ (80011bc <HAL_RCC_OscConfig+0x270>)
 8001124:	2200      	movs	r2, #0
 8001126:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001128:	f7ff fb92 	bl	8000850 <HAL_GetTick>
 800112c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800112e:	e008      	b.n	8001142 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001130:	f7ff fb8e 	bl	8000850 <HAL_GetTick>
 8001134:	4602      	mov	r2, r0
 8001136:	693b      	ldr	r3, [r7, #16]
 8001138:	1ad3      	subs	r3, r2, r3
 800113a:	2b02      	cmp	r3, #2
 800113c:	d901      	bls.n	8001142 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800113e:	2303      	movs	r3, #3
 8001140:	e180      	b.n	8001444 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001142:	4b1d      	ldr	r3, [pc, #116]	@ (80011b8 <HAL_RCC_OscConfig+0x26c>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f003 0302 	and.w	r3, r3, #2
 800114a:	2b00      	cmp	r3, #0
 800114c:	d1f0      	bne.n	8001130 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f003 0308 	and.w	r3, r3, #8
 8001156:	2b00      	cmp	r3, #0
 8001158:	d03a      	beq.n	80011d0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	699b      	ldr	r3, [r3, #24]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d019      	beq.n	8001196 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001162:	4b17      	ldr	r3, [pc, #92]	@ (80011c0 <HAL_RCC_OscConfig+0x274>)
 8001164:	2201      	movs	r2, #1
 8001166:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001168:	f7ff fb72 	bl	8000850 <HAL_GetTick>
 800116c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800116e:	e008      	b.n	8001182 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001170:	f7ff fb6e 	bl	8000850 <HAL_GetTick>
 8001174:	4602      	mov	r2, r0
 8001176:	693b      	ldr	r3, [r7, #16]
 8001178:	1ad3      	subs	r3, r2, r3
 800117a:	2b02      	cmp	r3, #2
 800117c:	d901      	bls.n	8001182 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800117e:	2303      	movs	r3, #3
 8001180:	e160      	b.n	8001444 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001182:	4b0d      	ldr	r3, [pc, #52]	@ (80011b8 <HAL_RCC_OscConfig+0x26c>)
 8001184:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001186:	f003 0302 	and.w	r3, r3, #2
 800118a:	2b00      	cmp	r3, #0
 800118c:	d0f0      	beq.n	8001170 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800118e:	2001      	movs	r0, #1
 8001190:	f000 face 	bl	8001730 <RCC_Delay>
 8001194:	e01c      	b.n	80011d0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001196:	4b0a      	ldr	r3, [pc, #40]	@ (80011c0 <HAL_RCC_OscConfig+0x274>)
 8001198:	2200      	movs	r2, #0
 800119a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800119c:	f7ff fb58 	bl	8000850 <HAL_GetTick>
 80011a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011a2:	e00f      	b.n	80011c4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011a4:	f7ff fb54 	bl	8000850 <HAL_GetTick>
 80011a8:	4602      	mov	r2, r0
 80011aa:	693b      	ldr	r3, [r7, #16]
 80011ac:	1ad3      	subs	r3, r2, r3
 80011ae:	2b02      	cmp	r3, #2
 80011b0:	d908      	bls.n	80011c4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80011b2:	2303      	movs	r3, #3
 80011b4:	e146      	b.n	8001444 <HAL_RCC_OscConfig+0x4f8>
 80011b6:	bf00      	nop
 80011b8:	40021000 	.word	0x40021000
 80011bc:	42420000 	.word	0x42420000
 80011c0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011c4:	4b92      	ldr	r3, [pc, #584]	@ (8001410 <HAL_RCC_OscConfig+0x4c4>)
 80011c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011c8:	f003 0302 	and.w	r3, r3, #2
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d1e9      	bne.n	80011a4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f003 0304 	and.w	r3, r3, #4
 80011d8:	2b00      	cmp	r3, #0
 80011da:	f000 80a6 	beq.w	800132a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80011de:	2300      	movs	r3, #0
 80011e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80011e2:	4b8b      	ldr	r3, [pc, #556]	@ (8001410 <HAL_RCC_OscConfig+0x4c4>)
 80011e4:	69db      	ldr	r3, [r3, #28]
 80011e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d10d      	bne.n	800120a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80011ee:	4b88      	ldr	r3, [pc, #544]	@ (8001410 <HAL_RCC_OscConfig+0x4c4>)
 80011f0:	69db      	ldr	r3, [r3, #28]
 80011f2:	4a87      	ldr	r2, [pc, #540]	@ (8001410 <HAL_RCC_OscConfig+0x4c4>)
 80011f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011f8:	61d3      	str	r3, [r2, #28]
 80011fa:	4b85      	ldr	r3, [pc, #532]	@ (8001410 <HAL_RCC_OscConfig+0x4c4>)
 80011fc:	69db      	ldr	r3, [r3, #28]
 80011fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001202:	60bb      	str	r3, [r7, #8]
 8001204:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001206:	2301      	movs	r3, #1
 8001208:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800120a:	4b82      	ldr	r3, [pc, #520]	@ (8001414 <HAL_RCC_OscConfig+0x4c8>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001212:	2b00      	cmp	r3, #0
 8001214:	d118      	bne.n	8001248 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001216:	4b7f      	ldr	r3, [pc, #508]	@ (8001414 <HAL_RCC_OscConfig+0x4c8>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	4a7e      	ldr	r2, [pc, #504]	@ (8001414 <HAL_RCC_OscConfig+0x4c8>)
 800121c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001220:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001222:	f7ff fb15 	bl	8000850 <HAL_GetTick>
 8001226:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001228:	e008      	b.n	800123c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800122a:	f7ff fb11 	bl	8000850 <HAL_GetTick>
 800122e:	4602      	mov	r2, r0
 8001230:	693b      	ldr	r3, [r7, #16]
 8001232:	1ad3      	subs	r3, r2, r3
 8001234:	2b64      	cmp	r3, #100	@ 0x64
 8001236:	d901      	bls.n	800123c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001238:	2303      	movs	r3, #3
 800123a:	e103      	b.n	8001444 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800123c:	4b75      	ldr	r3, [pc, #468]	@ (8001414 <HAL_RCC_OscConfig+0x4c8>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001244:	2b00      	cmp	r3, #0
 8001246:	d0f0      	beq.n	800122a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	68db      	ldr	r3, [r3, #12]
 800124c:	2b01      	cmp	r3, #1
 800124e:	d106      	bne.n	800125e <HAL_RCC_OscConfig+0x312>
 8001250:	4b6f      	ldr	r3, [pc, #444]	@ (8001410 <HAL_RCC_OscConfig+0x4c4>)
 8001252:	6a1b      	ldr	r3, [r3, #32]
 8001254:	4a6e      	ldr	r2, [pc, #440]	@ (8001410 <HAL_RCC_OscConfig+0x4c4>)
 8001256:	f043 0301 	orr.w	r3, r3, #1
 800125a:	6213      	str	r3, [r2, #32]
 800125c:	e02d      	b.n	80012ba <HAL_RCC_OscConfig+0x36e>
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	68db      	ldr	r3, [r3, #12]
 8001262:	2b00      	cmp	r3, #0
 8001264:	d10c      	bne.n	8001280 <HAL_RCC_OscConfig+0x334>
 8001266:	4b6a      	ldr	r3, [pc, #424]	@ (8001410 <HAL_RCC_OscConfig+0x4c4>)
 8001268:	6a1b      	ldr	r3, [r3, #32]
 800126a:	4a69      	ldr	r2, [pc, #420]	@ (8001410 <HAL_RCC_OscConfig+0x4c4>)
 800126c:	f023 0301 	bic.w	r3, r3, #1
 8001270:	6213      	str	r3, [r2, #32]
 8001272:	4b67      	ldr	r3, [pc, #412]	@ (8001410 <HAL_RCC_OscConfig+0x4c4>)
 8001274:	6a1b      	ldr	r3, [r3, #32]
 8001276:	4a66      	ldr	r2, [pc, #408]	@ (8001410 <HAL_RCC_OscConfig+0x4c4>)
 8001278:	f023 0304 	bic.w	r3, r3, #4
 800127c:	6213      	str	r3, [r2, #32]
 800127e:	e01c      	b.n	80012ba <HAL_RCC_OscConfig+0x36e>
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	68db      	ldr	r3, [r3, #12]
 8001284:	2b05      	cmp	r3, #5
 8001286:	d10c      	bne.n	80012a2 <HAL_RCC_OscConfig+0x356>
 8001288:	4b61      	ldr	r3, [pc, #388]	@ (8001410 <HAL_RCC_OscConfig+0x4c4>)
 800128a:	6a1b      	ldr	r3, [r3, #32]
 800128c:	4a60      	ldr	r2, [pc, #384]	@ (8001410 <HAL_RCC_OscConfig+0x4c4>)
 800128e:	f043 0304 	orr.w	r3, r3, #4
 8001292:	6213      	str	r3, [r2, #32]
 8001294:	4b5e      	ldr	r3, [pc, #376]	@ (8001410 <HAL_RCC_OscConfig+0x4c4>)
 8001296:	6a1b      	ldr	r3, [r3, #32]
 8001298:	4a5d      	ldr	r2, [pc, #372]	@ (8001410 <HAL_RCC_OscConfig+0x4c4>)
 800129a:	f043 0301 	orr.w	r3, r3, #1
 800129e:	6213      	str	r3, [r2, #32]
 80012a0:	e00b      	b.n	80012ba <HAL_RCC_OscConfig+0x36e>
 80012a2:	4b5b      	ldr	r3, [pc, #364]	@ (8001410 <HAL_RCC_OscConfig+0x4c4>)
 80012a4:	6a1b      	ldr	r3, [r3, #32]
 80012a6:	4a5a      	ldr	r2, [pc, #360]	@ (8001410 <HAL_RCC_OscConfig+0x4c4>)
 80012a8:	f023 0301 	bic.w	r3, r3, #1
 80012ac:	6213      	str	r3, [r2, #32]
 80012ae:	4b58      	ldr	r3, [pc, #352]	@ (8001410 <HAL_RCC_OscConfig+0x4c4>)
 80012b0:	6a1b      	ldr	r3, [r3, #32]
 80012b2:	4a57      	ldr	r2, [pc, #348]	@ (8001410 <HAL_RCC_OscConfig+0x4c4>)
 80012b4:	f023 0304 	bic.w	r3, r3, #4
 80012b8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	68db      	ldr	r3, [r3, #12]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d015      	beq.n	80012ee <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012c2:	f7ff fac5 	bl	8000850 <HAL_GetTick>
 80012c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012c8:	e00a      	b.n	80012e0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012ca:	f7ff fac1 	bl	8000850 <HAL_GetTick>
 80012ce:	4602      	mov	r2, r0
 80012d0:	693b      	ldr	r3, [r7, #16]
 80012d2:	1ad3      	subs	r3, r2, r3
 80012d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80012d8:	4293      	cmp	r3, r2
 80012da:	d901      	bls.n	80012e0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80012dc:	2303      	movs	r3, #3
 80012de:	e0b1      	b.n	8001444 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012e0:	4b4b      	ldr	r3, [pc, #300]	@ (8001410 <HAL_RCC_OscConfig+0x4c4>)
 80012e2:	6a1b      	ldr	r3, [r3, #32]
 80012e4:	f003 0302 	and.w	r3, r3, #2
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d0ee      	beq.n	80012ca <HAL_RCC_OscConfig+0x37e>
 80012ec:	e014      	b.n	8001318 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012ee:	f7ff faaf 	bl	8000850 <HAL_GetTick>
 80012f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012f4:	e00a      	b.n	800130c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012f6:	f7ff faab 	bl	8000850 <HAL_GetTick>
 80012fa:	4602      	mov	r2, r0
 80012fc:	693b      	ldr	r3, [r7, #16]
 80012fe:	1ad3      	subs	r3, r2, r3
 8001300:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001304:	4293      	cmp	r3, r2
 8001306:	d901      	bls.n	800130c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001308:	2303      	movs	r3, #3
 800130a:	e09b      	b.n	8001444 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800130c:	4b40      	ldr	r3, [pc, #256]	@ (8001410 <HAL_RCC_OscConfig+0x4c4>)
 800130e:	6a1b      	ldr	r3, [r3, #32]
 8001310:	f003 0302 	and.w	r3, r3, #2
 8001314:	2b00      	cmp	r3, #0
 8001316:	d1ee      	bne.n	80012f6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001318:	7dfb      	ldrb	r3, [r7, #23]
 800131a:	2b01      	cmp	r3, #1
 800131c:	d105      	bne.n	800132a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800131e:	4b3c      	ldr	r3, [pc, #240]	@ (8001410 <HAL_RCC_OscConfig+0x4c4>)
 8001320:	69db      	ldr	r3, [r3, #28]
 8001322:	4a3b      	ldr	r2, [pc, #236]	@ (8001410 <HAL_RCC_OscConfig+0x4c4>)
 8001324:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001328:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	69db      	ldr	r3, [r3, #28]
 800132e:	2b00      	cmp	r3, #0
 8001330:	f000 8087 	beq.w	8001442 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001334:	4b36      	ldr	r3, [pc, #216]	@ (8001410 <HAL_RCC_OscConfig+0x4c4>)
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	f003 030c 	and.w	r3, r3, #12
 800133c:	2b08      	cmp	r3, #8
 800133e:	d061      	beq.n	8001404 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	69db      	ldr	r3, [r3, #28]
 8001344:	2b02      	cmp	r3, #2
 8001346:	d146      	bne.n	80013d6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001348:	4b33      	ldr	r3, [pc, #204]	@ (8001418 <HAL_RCC_OscConfig+0x4cc>)
 800134a:	2200      	movs	r2, #0
 800134c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800134e:	f7ff fa7f 	bl	8000850 <HAL_GetTick>
 8001352:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001354:	e008      	b.n	8001368 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001356:	f7ff fa7b 	bl	8000850 <HAL_GetTick>
 800135a:	4602      	mov	r2, r0
 800135c:	693b      	ldr	r3, [r7, #16]
 800135e:	1ad3      	subs	r3, r2, r3
 8001360:	2b02      	cmp	r3, #2
 8001362:	d901      	bls.n	8001368 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001364:	2303      	movs	r3, #3
 8001366:	e06d      	b.n	8001444 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001368:	4b29      	ldr	r3, [pc, #164]	@ (8001410 <HAL_RCC_OscConfig+0x4c4>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001370:	2b00      	cmp	r3, #0
 8001372:	d1f0      	bne.n	8001356 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	6a1b      	ldr	r3, [r3, #32]
 8001378:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800137c:	d108      	bne.n	8001390 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800137e:	4b24      	ldr	r3, [pc, #144]	@ (8001410 <HAL_RCC_OscConfig+0x4c4>)
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	689b      	ldr	r3, [r3, #8]
 800138a:	4921      	ldr	r1, [pc, #132]	@ (8001410 <HAL_RCC_OscConfig+0x4c4>)
 800138c:	4313      	orrs	r3, r2
 800138e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001390:	4b1f      	ldr	r3, [pc, #124]	@ (8001410 <HAL_RCC_OscConfig+0x4c4>)
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	6a19      	ldr	r1, [r3, #32]
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013a0:	430b      	orrs	r3, r1
 80013a2:	491b      	ldr	r1, [pc, #108]	@ (8001410 <HAL_RCC_OscConfig+0x4c4>)
 80013a4:	4313      	orrs	r3, r2
 80013a6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80013a8:	4b1b      	ldr	r3, [pc, #108]	@ (8001418 <HAL_RCC_OscConfig+0x4cc>)
 80013aa:	2201      	movs	r2, #1
 80013ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013ae:	f7ff fa4f 	bl	8000850 <HAL_GetTick>
 80013b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80013b4:	e008      	b.n	80013c8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013b6:	f7ff fa4b 	bl	8000850 <HAL_GetTick>
 80013ba:	4602      	mov	r2, r0
 80013bc:	693b      	ldr	r3, [r7, #16]
 80013be:	1ad3      	subs	r3, r2, r3
 80013c0:	2b02      	cmp	r3, #2
 80013c2:	d901      	bls.n	80013c8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80013c4:	2303      	movs	r3, #3
 80013c6:	e03d      	b.n	8001444 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80013c8:	4b11      	ldr	r3, [pc, #68]	@ (8001410 <HAL_RCC_OscConfig+0x4c4>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d0f0      	beq.n	80013b6 <HAL_RCC_OscConfig+0x46a>
 80013d4:	e035      	b.n	8001442 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013d6:	4b10      	ldr	r3, [pc, #64]	@ (8001418 <HAL_RCC_OscConfig+0x4cc>)
 80013d8:	2200      	movs	r2, #0
 80013da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013dc:	f7ff fa38 	bl	8000850 <HAL_GetTick>
 80013e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013e2:	e008      	b.n	80013f6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013e4:	f7ff fa34 	bl	8000850 <HAL_GetTick>
 80013e8:	4602      	mov	r2, r0
 80013ea:	693b      	ldr	r3, [r7, #16]
 80013ec:	1ad3      	subs	r3, r2, r3
 80013ee:	2b02      	cmp	r3, #2
 80013f0:	d901      	bls.n	80013f6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80013f2:	2303      	movs	r3, #3
 80013f4:	e026      	b.n	8001444 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013f6:	4b06      	ldr	r3, [pc, #24]	@ (8001410 <HAL_RCC_OscConfig+0x4c4>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d1f0      	bne.n	80013e4 <HAL_RCC_OscConfig+0x498>
 8001402:	e01e      	b.n	8001442 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	69db      	ldr	r3, [r3, #28]
 8001408:	2b01      	cmp	r3, #1
 800140a:	d107      	bne.n	800141c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800140c:	2301      	movs	r3, #1
 800140e:	e019      	b.n	8001444 <HAL_RCC_OscConfig+0x4f8>
 8001410:	40021000 	.word	0x40021000
 8001414:	40007000 	.word	0x40007000
 8001418:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800141c:	4b0b      	ldr	r3, [pc, #44]	@ (800144c <HAL_RCC_OscConfig+0x500>)
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	6a1b      	ldr	r3, [r3, #32]
 800142c:	429a      	cmp	r2, r3
 800142e:	d106      	bne.n	800143e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800143a:	429a      	cmp	r2, r3
 800143c:	d001      	beq.n	8001442 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800143e:	2301      	movs	r3, #1
 8001440:	e000      	b.n	8001444 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001442:	2300      	movs	r3, #0
}
 8001444:	4618      	mov	r0, r3
 8001446:	3718      	adds	r7, #24
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}
 800144c:	40021000 	.word	0x40021000

08001450 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b084      	sub	sp, #16
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
 8001458:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d101      	bne.n	8001464 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001460:	2301      	movs	r3, #1
 8001462:	e0d0      	b.n	8001606 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001464:	4b6a      	ldr	r3, [pc, #424]	@ (8001610 <HAL_RCC_ClockConfig+0x1c0>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f003 0307 	and.w	r3, r3, #7
 800146c:	683a      	ldr	r2, [r7, #0]
 800146e:	429a      	cmp	r2, r3
 8001470:	d910      	bls.n	8001494 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001472:	4b67      	ldr	r3, [pc, #412]	@ (8001610 <HAL_RCC_ClockConfig+0x1c0>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f023 0207 	bic.w	r2, r3, #7
 800147a:	4965      	ldr	r1, [pc, #404]	@ (8001610 <HAL_RCC_ClockConfig+0x1c0>)
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	4313      	orrs	r3, r2
 8001480:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001482:	4b63      	ldr	r3, [pc, #396]	@ (8001610 <HAL_RCC_ClockConfig+0x1c0>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f003 0307 	and.w	r3, r3, #7
 800148a:	683a      	ldr	r2, [r7, #0]
 800148c:	429a      	cmp	r2, r3
 800148e:	d001      	beq.n	8001494 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001490:	2301      	movs	r3, #1
 8001492:	e0b8      	b.n	8001606 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f003 0302 	and.w	r3, r3, #2
 800149c:	2b00      	cmp	r3, #0
 800149e:	d020      	beq.n	80014e2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f003 0304 	and.w	r3, r3, #4
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d005      	beq.n	80014b8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80014ac:	4b59      	ldr	r3, [pc, #356]	@ (8001614 <HAL_RCC_ClockConfig+0x1c4>)
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	4a58      	ldr	r2, [pc, #352]	@ (8001614 <HAL_RCC_ClockConfig+0x1c4>)
 80014b2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80014b6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f003 0308 	and.w	r3, r3, #8
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d005      	beq.n	80014d0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80014c4:	4b53      	ldr	r3, [pc, #332]	@ (8001614 <HAL_RCC_ClockConfig+0x1c4>)
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	4a52      	ldr	r2, [pc, #328]	@ (8001614 <HAL_RCC_ClockConfig+0x1c4>)
 80014ca:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80014ce:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80014d0:	4b50      	ldr	r3, [pc, #320]	@ (8001614 <HAL_RCC_ClockConfig+0x1c4>)
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	689b      	ldr	r3, [r3, #8]
 80014dc:	494d      	ldr	r1, [pc, #308]	@ (8001614 <HAL_RCC_ClockConfig+0x1c4>)
 80014de:	4313      	orrs	r3, r2
 80014e0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f003 0301 	and.w	r3, r3, #1
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d040      	beq.n	8001570 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	2b01      	cmp	r3, #1
 80014f4:	d107      	bne.n	8001506 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014f6:	4b47      	ldr	r3, [pc, #284]	@ (8001614 <HAL_RCC_ClockConfig+0x1c4>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d115      	bne.n	800152e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001502:	2301      	movs	r3, #1
 8001504:	e07f      	b.n	8001606 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	685b      	ldr	r3, [r3, #4]
 800150a:	2b02      	cmp	r3, #2
 800150c:	d107      	bne.n	800151e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800150e:	4b41      	ldr	r3, [pc, #260]	@ (8001614 <HAL_RCC_ClockConfig+0x1c4>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001516:	2b00      	cmp	r3, #0
 8001518:	d109      	bne.n	800152e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800151a:	2301      	movs	r3, #1
 800151c:	e073      	b.n	8001606 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800151e:	4b3d      	ldr	r3, [pc, #244]	@ (8001614 <HAL_RCC_ClockConfig+0x1c4>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f003 0302 	and.w	r3, r3, #2
 8001526:	2b00      	cmp	r3, #0
 8001528:	d101      	bne.n	800152e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800152a:	2301      	movs	r3, #1
 800152c:	e06b      	b.n	8001606 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800152e:	4b39      	ldr	r3, [pc, #228]	@ (8001614 <HAL_RCC_ClockConfig+0x1c4>)
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	f023 0203 	bic.w	r2, r3, #3
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	4936      	ldr	r1, [pc, #216]	@ (8001614 <HAL_RCC_ClockConfig+0x1c4>)
 800153c:	4313      	orrs	r3, r2
 800153e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001540:	f7ff f986 	bl	8000850 <HAL_GetTick>
 8001544:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001546:	e00a      	b.n	800155e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001548:	f7ff f982 	bl	8000850 <HAL_GetTick>
 800154c:	4602      	mov	r2, r0
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	1ad3      	subs	r3, r2, r3
 8001552:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001556:	4293      	cmp	r3, r2
 8001558:	d901      	bls.n	800155e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800155a:	2303      	movs	r3, #3
 800155c:	e053      	b.n	8001606 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800155e:	4b2d      	ldr	r3, [pc, #180]	@ (8001614 <HAL_RCC_ClockConfig+0x1c4>)
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	f003 020c 	and.w	r2, r3, #12
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	009b      	lsls	r3, r3, #2
 800156c:	429a      	cmp	r2, r3
 800156e:	d1eb      	bne.n	8001548 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001570:	4b27      	ldr	r3, [pc, #156]	@ (8001610 <HAL_RCC_ClockConfig+0x1c0>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f003 0307 	and.w	r3, r3, #7
 8001578:	683a      	ldr	r2, [r7, #0]
 800157a:	429a      	cmp	r2, r3
 800157c:	d210      	bcs.n	80015a0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800157e:	4b24      	ldr	r3, [pc, #144]	@ (8001610 <HAL_RCC_ClockConfig+0x1c0>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f023 0207 	bic.w	r2, r3, #7
 8001586:	4922      	ldr	r1, [pc, #136]	@ (8001610 <HAL_RCC_ClockConfig+0x1c0>)
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	4313      	orrs	r3, r2
 800158c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800158e:	4b20      	ldr	r3, [pc, #128]	@ (8001610 <HAL_RCC_ClockConfig+0x1c0>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f003 0307 	and.w	r3, r3, #7
 8001596:	683a      	ldr	r2, [r7, #0]
 8001598:	429a      	cmp	r2, r3
 800159a:	d001      	beq.n	80015a0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800159c:	2301      	movs	r3, #1
 800159e:	e032      	b.n	8001606 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f003 0304 	and.w	r3, r3, #4
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d008      	beq.n	80015be <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80015ac:	4b19      	ldr	r3, [pc, #100]	@ (8001614 <HAL_RCC_ClockConfig+0x1c4>)
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	68db      	ldr	r3, [r3, #12]
 80015b8:	4916      	ldr	r1, [pc, #88]	@ (8001614 <HAL_RCC_ClockConfig+0x1c4>)
 80015ba:	4313      	orrs	r3, r2
 80015bc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f003 0308 	and.w	r3, r3, #8
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d009      	beq.n	80015de <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80015ca:	4b12      	ldr	r3, [pc, #72]	@ (8001614 <HAL_RCC_ClockConfig+0x1c4>)
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	691b      	ldr	r3, [r3, #16]
 80015d6:	00db      	lsls	r3, r3, #3
 80015d8:	490e      	ldr	r1, [pc, #56]	@ (8001614 <HAL_RCC_ClockConfig+0x1c4>)
 80015da:	4313      	orrs	r3, r2
 80015dc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80015de:	f000 f821 	bl	8001624 <HAL_RCC_GetSysClockFreq>
 80015e2:	4602      	mov	r2, r0
 80015e4:	4b0b      	ldr	r3, [pc, #44]	@ (8001614 <HAL_RCC_ClockConfig+0x1c4>)
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	091b      	lsrs	r3, r3, #4
 80015ea:	f003 030f 	and.w	r3, r3, #15
 80015ee:	490a      	ldr	r1, [pc, #40]	@ (8001618 <HAL_RCC_ClockConfig+0x1c8>)
 80015f0:	5ccb      	ldrb	r3, [r1, r3]
 80015f2:	fa22 f303 	lsr.w	r3, r2, r3
 80015f6:	4a09      	ldr	r2, [pc, #36]	@ (800161c <HAL_RCC_ClockConfig+0x1cc>)
 80015f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80015fa:	4b09      	ldr	r3, [pc, #36]	@ (8001620 <HAL_RCC_ClockConfig+0x1d0>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	4618      	mov	r0, r3
 8001600:	f7ff f8e4 	bl	80007cc <HAL_InitTick>

  return HAL_OK;
 8001604:	2300      	movs	r3, #0
}
 8001606:	4618      	mov	r0, r3
 8001608:	3710      	adds	r7, #16
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	40022000 	.word	0x40022000
 8001614:	40021000 	.word	0x40021000
 8001618:	08002df8 	.word	0x08002df8
 800161c:	20000000 	.word	0x20000000
 8001620:	20000004 	.word	0x20000004

08001624 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001624:	b480      	push	{r7}
 8001626:	b087      	sub	sp, #28
 8001628:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800162a:	2300      	movs	r3, #0
 800162c:	60fb      	str	r3, [r7, #12]
 800162e:	2300      	movs	r3, #0
 8001630:	60bb      	str	r3, [r7, #8]
 8001632:	2300      	movs	r3, #0
 8001634:	617b      	str	r3, [r7, #20]
 8001636:	2300      	movs	r3, #0
 8001638:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800163a:	2300      	movs	r3, #0
 800163c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800163e:	4b1e      	ldr	r3, [pc, #120]	@ (80016b8 <HAL_RCC_GetSysClockFreq+0x94>)
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	f003 030c 	and.w	r3, r3, #12
 800164a:	2b04      	cmp	r3, #4
 800164c:	d002      	beq.n	8001654 <HAL_RCC_GetSysClockFreq+0x30>
 800164e:	2b08      	cmp	r3, #8
 8001650:	d003      	beq.n	800165a <HAL_RCC_GetSysClockFreq+0x36>
 8001652:	e027      	b.n	80016a4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001654:	4b19      	ldr	r3, [pc, #100]	@ (80016bc <HAL_RCC_GetSysClockFreq+0x98>)
 8001656:	613b      	str	r3, [r7, #16]
      break;
 8001658:	e027      	b.n	80016aa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	0c9b      	lsrs	r3, r3, #18
 800165e:	f003 030f 	and.w	r3, r3, #15
 8001662:	4a17      	ldr	r2, [pc, #92]	@ (80016c0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001664:	5cd3      	ldrb	r3, [r2, r3]
 8001666:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800166e:	2b00      	cmp	r3, #0
 8001670:	d010      	beq.n	8001694 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001672:	4b11      	ldr	r3, [pc, #68]	@ (80016b8 <HAL_RCC_GetSysClockFreq+0x94>)
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	0c5b      	lsrs	r3, r3, #17
 8001678:	f003 0301 	and.w	r3, r3, #1
 800167c:	4a11      	ldr	r2, [pc, #68]	@ (80016c4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800167e:	5cd3      	ldrb	r3, [r2, r3]
 8001680:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	4a0d      	ldr	r2, [pc, #52]	@ (80016bc <HAL_RCC_GetSysClockFreq+0x98>)
 8001686:	fb03 f202 	mul.w	r2, r3, r2
 800168a:	68bb      	ldr	r3, [r7, #8]
 800168c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001690:	617b      	str	r3, [r7, #20]
 8001692:	e004      	b.n	800169e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	4a0c      	ldr	r2, [pc, #48]	@ (80016c8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001698:	fb02 f303 	mul.w	r3, r2, r3
 800169c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800169e:	697b      	ldr	r3, [r7, #20]
 80016a0:	613b      	str	r3, [r7, #16]
      break;
 80016a2:	e002      	b.n	80016aa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80016a4:	4b05      	ldr	r3, [pc, #20]	@ (80016bc <HAL_RCC_GetSysClockFreq+0x98>)
 80016a6:	613b      	str	r3, [r7, #16]
      break;
 80016a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80016aa:	693b      	ldr	r3, [r7, #16]
}
 80016ac:	4618      	mov	r0, r3
 80016ae:	371c      	adds	r7, #28
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bc80      	pop	{r7}
 80016b4:	4770      	bx	lr
 80016b6:	bf00      	nop
 80016b8:	40021000 	.word	0x40021000
 80016bc:	007a1200 	.word	0x007a1200
 80016c0:	08002e10 	.word	0x08002e10
 80016c4:	08002e20 	.word	0x08002e20
 80016c8:	003d0900 	.word	0x003d0900

080016cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80016cc:	b480      	push	{r7}
 80016ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80016d0:	4b02      	ldr	r3, [pc, #8]	@ (80016dc <HAL_RCC_GetHCLKFreq+0x10>)
 80016d2:	681b      	ldr	r3, [r3, #0]
}
 80016d4:	4618      	mov	r0, r3
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bc80      	pop	{r7}
 80016da:	4770      	bx	lr
 80016dc:	20000000 	.word	0x20000000

080016e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80016e4:	f7ff fff2 	bl	80016cc <HAL_RCC_GetHCLKFreq>
 80016e8:	4602      	mov	r2, r0
 80016ea:	4b05      	ldr	r3, [pc, #20]	@ (8001700 <HAL_RCC_GetPCLK1Freq+0x20>)
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	0a1b      	lsrs	r3, r3, #8
 80016f0:	f003 0307 	and.w	r3, r3, #7
 80016f4:	4903      	ldr	r1, [pc, #12]	@ (8001704 <HAL_RCC_GetPCLK1Freq+0x24>)
 80016f6:	5ccb      	ldrb	r3, [r1, r3]
 80016f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80016fc:	4618      	mov	r0, r3
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	40021000 	.word	0x40021000
 8001704:	08002e08 	.word	0x08002e08

08001708 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800170c:	f7ff ffde 	bl	80016cc <HAL_RCC_GetHCLKFreq>
 8001710:	4602      	mov	r2, r0
 8001712:	4b05      	ldr	r3, [pc, #20]	@ (8001728 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	0adb      	lsrs	r3, r3, #11
 8001718:	f003 0307 	and.w	r3, r3, #7
 800171c:	4903      	ldr	r1, [pc, #12]	@ (800172c <HAL_RCC_GetPCLK2Freq+0x24>)
 800171e:	5ccb      	ldrb	r3, [r1, r3]
 8001720:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001724:	4618      	mov	r0, r3
 8001726:	bd80      	pop	{r7, pc}
 8001728:	40021000 	.word	0x40021000
 800172c:	08002e08 	.word	0x08002e08

08001730 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001730:	b480      	push	{r7}
 8001732:	b085      	sub	sp, #20
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001738:	4b0a      	ldr	r3, [pc, #40]	@ (8001764 <RCC_Delay+0x34>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4a0a      	ldr	r2, [pc, #40]	@ (8001768 <RCC_Delay+0x38>)
 800173e:	fba2 2303 	umull	r2, r3, r2, r3
 8001742:	0a5b      	lsrs	r3, r3, #9
 8001744:	687a      	ldr	r2, [r7, #4]
 8001746:	fb02 f303 	mul.w	r3, r2, r3
 800174a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800174c:	bf00      	nop
  }
  while (Delay --);
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	1e5a      	subs	r2, r3, #1
 8001752:	60fa      	str	r2, [r7, #12]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d1f9      	bne.n	800174c <RCC_Delay+0x1c>
}
 8001758:	bf00      	nop
 800175a:	bf00      	nop
 800175c:	3714      	adds	r7, #20
 800175e:	46bd      	mov	sp, r7
 8001760:	bc80      	pop	{r7}
 8001762:	4770      	bx	lr
 8001764:	20000000 	.word	0x20000000
 8001768:	10624dd3 	.word	0x10624dd3

0800176c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b082      	sub	sp, #8
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d101      	bne.n	800177e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800177a:	2301      	movs	r3, #1
 800177c:	e042      	b.n	8001804 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001784:	b2db      	uxtb	r3, r3
 8001786:	2b00      	cmp	r3, #0
 8001788:	d106      	bne.n	8001798 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	2200      	movs	r2, #0
 800178e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001792:	6878      	ldr	r0, [r7, #4]
 8001794:	f7fe ff78 	bl	8000688 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	2224      	movs	r2, #36	@ 0x24
 800179c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	68da      	ldr	r2, [r3, #12]
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80017ae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80017b0:	6878      	ldr	r0, [r7, #4]
 80017b2:	f000 fdb7 	bl	8002324 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	691a      	ldr	r2, [r3, #16]
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80017c4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	695a      	ldr	r2, [r3, #20]
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80017d4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	68da      	ldr	r2, [r3, #12]
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80017e4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	2200      	movs	r2, #0
 80017ea:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2220      	movs	r2, #32
 80017f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2220      	movs	r2, #32
 80017f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2200      	movs	r2, #0
 8001800:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001802:	2300      	movs	r3, #0
}
 8001804:	4618      	mov	r0, r3
 8001806:	3708      	adds	r7, #8
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}

0800180c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b08a      	sub	sp, #40	@ 0x28
 8001810:	af02      	add	r7, sp, #8
 8001812:	60f8      	str	r0, [r7, #12]
 8001814:	60b9      	str	r1, [r7, #8]
 8001816:	603b      	str	r3, [r7, #0]
 8001818:	4613      	mov	r3, r2
 800181a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800181c:	2300      	movs	r3, #0
 800181e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001826:	b2db      	uxtb	r3, r3
 8001828:	2b20      	cmp	r3, #32
 800182a:	d175      	bne.n	8001918 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800182c:	68bb      	ldr	r3, [r7, #8]
 800182e:	2b00      	cmp	r3, #0
 8001830:	d002      	beq.n	8001838 <HAL_UART_Transmit+0x2c>
 8001832:	88fb      	ldrh	r3, [r7, #6]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d101      	bne.n	800183c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001838:	2301      	movs	r3, #1
 800183a:	e06e      	b.n	800191a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	2200      	movs	r2, #0
 8001840:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	2221      	movs	r2, #33	@ 0x21
 8001846:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800184a:	f7ff f801 	bl	8000850 <HAL_GetTick>
 800184e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	88fa      	ldrh	r2, [r7, #6]
 8001854:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	88fa      	ldrh	r2, [r7, #6]
 800185a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	689b      	ldr	r3, [r3, #8]
 8001860:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001864:	d108      	bne.n	8001878 <HAL_UART_Transmit+0x6c>
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	691b      	ldr	r3, [r3, #16]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d104      	bne.n	8001878 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800186e:	2300      	movs	r3, #0
 8001870:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001872:	68bb      	ldr	r3, [r7, #8]
 8001874:	61bb      	str	r3, [r7, #24]
 8001876:	e003      	b.n	8001880 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001878:	68bb      	ldr	r3, [r7, #8]
 800187a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800187c:	2300      	movs	r3, #0
 800187e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001880:	e02e      	b.n	80018e0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	9300      	str	r3, [sp, #0]
 8001886:	697b      	ldr	r3, [r7, #20]
 8001888:	2200      	movs	r2, #0
 800188a:	2180      	movs	r1, #128	@ 0x80
 800188c:	68f8      	ldr	r0, [r7, #12]
 800188e:	f000 fb1c 	bl	8001eca <UART_WaitOnFlagUntilTimeout>
 8001892:	4603      	mov	r3, r0
 8001894:	2b00      	cmp	r3, #0
 8001896:	d005      	beq.n	80018a4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	2220      	movs	r2, #32
 800189c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80018a0:	2303      	movs	r3, #3
 80018a2:	e03a      	b.n	800191a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80018a4:	69fb      	ldr	r3, [r7, #28]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d10b      	bne.n	80018c2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80018aa:	69bb      	ldr	r3, [r7, #24]
 80018ac:	881b      	ldrh	r3, [r3, #0]
 80018ae:	461a      	mov	r2, r3
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80018b8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80018ba:	69bb      	ldr	r3, [r7, #24]
 80018bc:	3302      	adds	r3, #2
 80018be:	61bb      	str	r3, [r7, #24]
 80018c0:	e007      	b.n	80018d2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80018c2:	69fb      	ldr	r3, [r7, #28]
 80018c4:	781a      	ldrb	r2, [r3, #0]
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80018cc:	69fb      	ldr	r3, [r7, #28]
 80018ce:	3301      	adds	r3, #1
 80018d0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80018d6:	b29b      	uxth	r3, r3
 80018d8:	3b01      	subs	r3, #1
 80018da:	b29a      	uxth	r2, r3
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80018e4:	b29b      	uxth	r3, r3
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d1cb      	bne.n	8001882 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	9300      	str	r3, [sp, #0]
 80018ee:	697b      	ldr	r3, [r7, #20]
 80018f0:	2200      	movs	r2, #0
 80018f2:	2140      	movs	r1, #64	@ 0x40
 80018f4:	68f8      	ldr	r0, [r7, #12]
 80018f6:	f000 fae8 	bl	8001eca <UART_WaitOnFlagUntilTimeout>
 80018fa:	4603      	mov	r3, r0
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d005      	beq.n	800190c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	2220      	movs	r2, #32
 8001904:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8001908:	2303      	movs	r3, #3
 800190a:	e006      	b.n	800191a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	2220      	movs	r2, #32
 8001910:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8001914:	2300      	movs	r3, #0
 8001916:	e000      	b.n	800191a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8001918:	2302      	movs	r3, #2
  }
}
 800191a:	4618      	mov	r0, r3
 800191c:	3720      	adds	r7, #32
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}

08001922 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001922:	b580      	push	{r7, lr}
 8001924:	b084      	sub	sp, #16
 8001926:	af00      	add	r7, sp, #0
 8001928:	60f8      	str	r0, [r7, #12]
 800192a:	60b9      	str	r1, [r7, #8]
 800192c:	4613      	mov	r3, r2
 800192e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001936:	b2db      	uxtb	r3, r3
 8001938:	2b20      	cmp	r3, #32
 800193a:	d112      	bne.n	8001962 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800193c:	68bb      	ldr	r3, [r7, #8]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d002      	beq.n	8001948 <HAL_UART_Receive_IT+0x26>
 8001942:	88fb      	ldrh	r3, [r7, #6]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d101      	bne.n	800194c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8001948:	2301      	movs	r3, #1
 800194a:	e00b      	b.n	8001964 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	2200      	movs	r2, #0
 8001950:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8001952:	88fb      	ldrh	r3, [r7, #6]
 8001954:	461a      	mov	r2, r3
 8001956:	68b9      	ldr	r1, [r7, #8]
 8001958:	68f8      	ldr	r0, [r7, #12]
 800195a:	f000 fb0f 	bl	8001f7c <UART_Start_Receive_IT>
 800195e:	4603      	mov	r3, r0
 8001960:	e000      	b.n	8001964 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8001962:	2302      	movs	r3, #2
  }
}
 8001964:	4618      	mov	r0, r3
 8001966:	3710      	adds	r7, #16
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}

0800196c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b0ba      	sub	sp, #232	@ 0xe8
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	68db      	ldr	r3, [r3, #12]
 8001984:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	695b      	ldr	r3, [r3, #20]
 800198e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8001992:	2300      	movs	r3, #0
 8001994:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8001998:	2300      	movs	r3, #0
 800199a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800199e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80019a2:	f003 030f 	and.w	r3, r3, #15
 80019a6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80019aa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d10f      	bne.n	80019d2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80019b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80019b6:	f003 0320 	and.w	r3, r3, #32
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d009      	beq.n	80019d2 <HAL_UART_IRQHandler+0x66>
 80019be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80019c2:	f003 0320 	and.w	r3, r3, #32
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d003      	beq.n	80019d2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80019ca:	6878      	ldr	r0, [r7, #4]
 80019cc:	f000 fbec 	bl	80021a8 <UART_Receive_IT>
      return;
 80019d0:	e25b      	b.n	8001e8a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80019d2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	f000 80de 	beq.w	8001b98 <HAL_UART_IRQHandler+0x22c>
 80019dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80019e0:	f003 0301 	and.w	r3, r3, #1
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d106      	bne.n	80019f6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80019e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80019ec:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	f000 80d1 	beq.w	8001b98 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80019f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80019fa:	f003 0301 	and.w	r3, r3, #1
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d00b      	beq.n	8001a1a <HAL_UART_IRQHandler+0xae>
 8001a02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001a06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d005      	beq.n	8001a1a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a12:	f043 0201 	orr.w	r2, r3, #1
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001a1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001a1e:	f003 0304 	and.w	r3, r3, #4
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d00b      	beq.n	8001a3e <HAL_UART_IRQHandler+0xd2>
 8001a26:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001a2a:	f003 0301 	and.w	r3, r3, #1
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d005      	beq.n	8001a3e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a36:	f043 0202 	orr.w	r2, r3, #2
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001a3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001a42:	f003 0302 	and.w	r3, r3, #2
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d00b      	beq.n	8001a62 <HAL_UART_IRQHandler+0xf6>
 8001a4a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001a4e:	f003 0301 	and.w	r3, r3, #1
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d005      	beq.n	8001a62 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a5a:	f043 0204 	orr.w	r2, r3, #4
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8001a62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001a66:	f003 0308 	and.w	r3, r3, #8
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d011      	beq.n	8001a92 <HAL_UART_IRQHandler+0x126>
 8001a6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001a72:	f003 0320 	and.w	r3, r3, #32
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d105      	bne.n	8001a86 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8001a7a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001a7e:	f003 0301 	and.w	r3, r3, #1
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d005      	beq.n	8001a92 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a8a:	f043 0208 	orr.w	r2, r3, #8
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	f000 81f2 	beq.w	8001e80 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001a9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001aa0:	f003 0320 	and.w	r3, r3, #32
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d008      	beq.n	8001aba <HAL_UART_IRQHandler+0x14e>
 8001aa8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001aac:	f003 0320 	and.w	r3, r3, #32
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d002      	beq.n	8001aba <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8001ab4:	6878      	ldr	r0, [r7, #4]
 8001ab6:	f000 fb77 	bl	80021a8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	695b      	ldr	r3, [r3, #20]
 8001ac0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	bf14      	ite	ne
 8001ac8:	2301      	movne	r3, #1
 8001aca:	2300      	moveq	r3, #0
 8001acc:	b2db      	uxtb	r3, r3
 8001ace:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ad6:	f003 0308 	and.w	r3, r3, #8
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d103      	bne.n	8001ae6 <HAL_UART_IRQHandler+0x17a>
 8001ade:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d04f      	beq.n	8001b86 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001ae6:	6878      	ldr	r0, [r7, #4]
 8001ae8:	f000 fa81 	bl	8001fee <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	695b      	ldr	r3, [r3, #20]
 8001af2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d041      	beq.n	8001b7e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	3314      	adds	r3, #20
 8001b00:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001b04:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001b08:	e853 3f00 	ldrex	r3, [r3]
 8001b0c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8001b10:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001b14:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001b18:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	3314      	adds	r3, #20
 8001b22:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8001b26:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8001b2a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001b2e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8001b32:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8001b36:	e841 2300 	strex	r3, r2, [r1]
 8001b3a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8001b3e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d1d9      	bne.n	8001afa <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d013      	beq.n	8001b76 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b52:	4a7e      	ldr	r2, [pc, #504]	@ (8001d4c <HAL_UART_IRQHandler+0x3e0>)
 8001b54:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f7fe ffca 	bl	8000af4 <HAL_DMA_Abort_IT>
 8001b60:	4603      	mov	r3, r0
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d016      	beq.n	8001b94 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b6c:	687a      	ldr	r2, [r7, #4]
 8001b6e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001b70:	4610      	mov	r0, r2
 8001b72:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001b74:	e00e      	b.n	8001b94 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001b76:	6878      	ldr	r0, [r7, #4]
 8001b78:	f000 f993 	bl	8001ea2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001b7c:	e00a      	b.n	8001b94 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001b7e:	6878      	ldr	r0, [r7, #4]
 8001b80:	f000 f98f 	bl	8001ea2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001b84:	e006      	b.n	8001b94 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001b86:	6878      	ldr	r0, [r7, #4]
 8001b88:	f000 f98b 	bl	8001ea2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2200      	movs	r2, #0
 8001b90:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8001b92:	e175      	b.n	8001e80 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001b94:	bf00      	nop
    return;
 8001b96:	e173      	b.n	8001e80 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b9c:	2b01      	cmp	r3, #1
 8001b9e:	f040 814f 	bne.w	8001e40 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8001ba2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001ba6:	f003 0310 	and.w	r3, r3, #16
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	f000 8148 	beq.w	8001e40 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8001bb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001bb4:	f003 0310 	and.w	r3, r3, #16
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	f000 8141 	beq.w	8001e40 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	60bb      	str	r3, [r7, #8]
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	60bb      	str	r3, [r7, #8]
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	60bb      	str	r3, [r7, #8]
 8001bd2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	695b      	ldr	r3, [r3, #20]
 8001bda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	f000 80b6 	beq.w	8001d50 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8001bf0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	f000 8145 	beq.w	8001e84 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8001bfe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8001c02:	429a      	cmp	r2, r3
 8001c04:	f080 813e 	bcs.w	8001e84 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8001c0e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c14:	699b      	ldr	r3, [r3, #24]
 8001c16:	2b20      	cmp	r3, #32
 8001c18:	f000 8088 	beq.w	8001d2c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	330c      	adds	r3, #12
 8001c22:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001c26:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001c2a:	e853 3f00 	ldrex	r3, [r3]
 8001c2e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8001c32:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001c36:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001c3a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	330c      	adds	r3, #12
 8001c44:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8001c48:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8001c4c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001c50:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8001c54:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8001c58:	e841 2300 	strex	r3, r2, [r1]
 8001c5c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8001c60:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d1d9      	bne.n	8001c1c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	3314      	adds	r3, #20
 8001c6e:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001c70:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001c72:	e853 3f00 	ldrex	r3, [r3]
 8001c76:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8001c78:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001c7a:	f023 0301 	bic.w	r3, r3, #1
 8001c7e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	3314      	adds	r3, #20
 8001c88:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001c8c:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8001c90:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001c92:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8001c94:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8001c98:	e841 2300 	strex	r3, r2, [r1]
 8001c9c:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8001c9e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d1e1      	bne.n	8001c68 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	3314      	adds	r3, #20
 8001caa:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001cac:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001cae:	e853 3f00 	ldrex	r3, [r3]
 8001cb2:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8001cb4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001cb6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001cba:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	3314      	adds	r3, #20
 8001cc4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8001cc8:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001cca:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001ccc:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8001cce:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8001cd0:	e841 2300 	strex	r3, r2, [r1]
 8001cd4:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8001cd6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d1e3      	bne.n	8001ca4 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2220      	movs	r2, #32
 8001ce0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	330c      	adds	r3, #12
 8001cf0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001cf2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001cf4:	e853 3f00 	ldrex	r3, [r3]
 8001cf8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8001cfa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001cfc:	f023 0310 	bic.w	r3, r3, #16
 8001d00:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	330c      	adds	r3, #12
 8001d0a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8001d0e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8001d10:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001d12:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001d14:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001d16:	e841 2300 	strex	r3, r2, [r1]
 8001d1a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8001d1c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d1e3      	bne.n	8001cea <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d26:	4618      	mov	r0, r3
 8001d28:	f7fe fea9 	bl	8000a7e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2202      	movs	r2, #2
 8001d30:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8001d3a:	b29b      	uxth	r3, r3
 8001d3c:	1ad3      	subs	r3, r2, r3
 8001d3e:	b29b      	uxth	r3, r3
 8001d40:	4619      	mov	r1, r3
 8001d42:	6878      	ldr	r0, [r7, #4]
 8001d44:	f000 f8b6 	bl	8001eb4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8001d48:	e09c      	b.n	8001e84 <HAL_UART_IRQHandler+0x518>
 8001d4a:	bf00      	nop
 8001d4c:	080020b3 	.word	0x080020b3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8001d58:	b29b      	uxth	r3, r3
 8001d5a:	1ad3      	subs	r3, r2, r3
 8001d5c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8001d64:	b29b      	uxth	r3, r3
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	f000 808e 	beq.w	8001e88 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8001d6c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	f000 8089 	beq.w	8001e88 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	330c      	adds	r3, #12
 8001d7c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001d7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001d80:	e853 3f00 	ldrex	r3, [r3]
 8001d84:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8001d86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001d88:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8001d8c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	330c      	adds	r3, #12
 8001d96:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8001d9a:	647a      	str	r2, [r7, #68]	@ 0x44
 8001d9c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001d9e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8001da0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001da2:	e841 2300 	strex	r3, r2, [r1]
 8001da6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8001da8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d1e3      	bne.n	8001d76 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	3314      	adds	r3, #20
 8001db4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001db6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001db8:	e853 3f00 	ldrex	r3, [r3]
 8001dbc:	623b      	str	r3, [r7, #32]
   return(result);
 8001dbe:	6a3b      	ldr	r3, [r7, #32]
 8001dc0:	f023 0301 	bic.w	r3, r3, #1
 8001dc4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	3314      	adds	r3, #20
 8001dce:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8001dd2:	633a      	str	r2, [r7, #48]	@ 0x30
 8001dd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001dd6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001dd8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001dda:	e841 2300 	strex	r3, r2, [r1]
 8001dde:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8001de0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d1e3      	bne.n	8001dae <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2220      	movs	r2, #32
 8001dea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2200      	movs	r2, #0
 8001df2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	330c      	adds	r3, #12
 8001dfa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001dfc:	693b      	ldr	r3, [r7, #16]
 8001dfe:	e853 3f00 	ldrex	r3, [r3]
 8001e02:	60fb      	str	r3, [r7, #12]
   return(result);
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	f023 0310 	bic.w	r3, r3, #16
 8001e0a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	330c      	adds	r3, #12
 8001e14:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8001e18:	61fa      	str	r2, [r7, #28]
 8001e1a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001e1c:	69b9      	ldr	r1, [r7, #24]
 8001e1e:	69fa      	ldr	r2, [r7, #28]
 8001e20:	e841 2300 	strex	r3, r2, [r1]
 8001e24:	617b      	str	r3, [r7, #20]
   return(result);
 8001e26:	697b      	ldr	r3, [r7, #20]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d1e3      	bne.n	8001df4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2202      	movs	r2, #2
 8001e30:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8001e32:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8001e36:	4619      	mov	r1, r3
 8001e38:	6878      	ldr	r0, [r7, #4]
 8001e3a:	f000 f83b 	bl	8001eb4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8001e3e:	e023      	b.n	8001e88 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001e40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001e44:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d009      	beq.n	8001e60 <HAL_UART_IRQHandler+0x4f4>
 8001e4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001e50:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d003      	beq.n	8001e60 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8001e58:	6878      	ldr	r0, [r7, #4]
 8001e5a:	f000 f93e 	bl	80020da <UART_Transmit_IT>
    return;
 8001e5e:	e014      	b.n	8001e8a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001e60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001e64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d00e      	beq.n	8001e8a <HAL_UART_IRQHandler+0x51e>
 8001e6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001e70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d008      	beq.n	8001e8a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8001e78:	6878      	ldr	r0, [r7, #4]
 8001e7a:	f000 f97d 	bl	8002178 <UART_EndTransmit_IT>
    return;
 8001e7e:	e004      	b.n	8001e8a <HAL_UART_IRQHandler+0x51e>
    return;
 8001e80:	bf00      	nop
 8001e82:	e002      	b.n	8001e8a <HAL_UART_IRQHandler+0x51e>
      return;
 8001e84:	bf00      	nop
 8001e86:	e000      	b.n	8001e8a <HAL_UART_IRQHandler+0x51e>
      return;
 8001e88:	bf00      	nop
  }
}
 8001e8a:	37e8      	adds	r7, #232	@ 0xe8
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bd80      	pop	{r7, pc}

08001e90 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b083      	sub	sp, #12
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8001e98:	bf00      	nop
 8001e9a:	370c      	adds	r7, #12
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bc80      	pop	{r7}
 8001ea0:	4770      	bx	lr

08001ea2 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001ea2:	b480      	push	{r7}
 8001ea4:	b083      	sub	sp, #12
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8001eaa:	bf00      	nop
 8001eac:	370c      	adds	r7, #12
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bc80      	pop	{r7}
 8001eb2:	4770      	bx	lr

08001eb4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b083      	sub	sp, #12
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
 8001ebc:	460b      	mov	r3, r1
 8001ebe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8001ec0:	bf00      	nop
 8001ec2:	370c      	adds	r7, #12
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bc80      	pop	{r7}
 8001ec8:	4770      	bx	lr

08001eca <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001eca:	b580      	push	{r7, lr}
 8001ecc:	b086      	sub	sp, #24
 8001ece:	af00      	add	r7, sp, #0
 8001ed0:	60f8      	str	r0, [r7, #12]
 8001ed2:	60b9      	str	r1, [r7, #8]
 8001ed4:	603b      	str	r3, [r7, #0]
 8001ed6:	4613      	mov	r3, r2
 8001ed8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001eda:	e03b      	b.n	8001f54 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001edc:	6a3b      	ldr	r3, [r7, #32]
 8001ede:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ee2:	d037      	beq.n	8001f54 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ee4:	f7fe fcb4 	bl	8000850 <HAL_GetTick>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	1ad3      	subs	r3, r2, r3
 8001eee:	6a3a      	ldr	r2, [r7, #32]
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	d302      	bcc.n	8001efa <UART_WaitOnFlagUntilTimeout+0x30>
 8001ef4:	6a3b      	ldr	r3, [r7, #32]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d101      	bne.n	8001efe <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8001efa:	2303      	movs	r3, #3
 8001efc:	e03a      	b.n	8001f74 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	68db      	ldr	r3, [r3, #12]
 8001f04:	f003 0304 	and.w	r3, r3, #4
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d023      	beq.n	8001f54 <UART_WaitOnFlagUntilTimeout+0x8a>
 8001f0c:	68bb      	ldr	r3, [r7, #8]
 8001f0e:	2b80      	cmp	r3, #128	@ 0x80
 8001f10:	d020      	beq.n	8001f54 <UART_WaitOnFlagUntilTimeout+0x8a>
 8001f12:	68bb      	ldr	r3, [r7, #8]
 8001f14:	2b40      	cmp	r3, #64	@ 0x40
 8001f16:	d01d      	beq.n	8001f54 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f003 0308 	and.w	r3, r3, #8
 8001f22:	2b08      	cmp	r3, #8
 8001f24:	d116      	bne.n	8001f54 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8001f26:	2300      	movs	r3, #0
 8001f28:	617b      	str	r3, [r7, #20]
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	617b      	str	r3, [r7, #20]
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	617b      	str	r3, [r7, #20]
 8001f3a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8001f3c:	68f8      	ldr	r0, [r7, #12]
 8001f3e:	f000 f856 	bl	8001fee <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	2208      	movs	r2, #8
 8001f46:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8001f50:	2301      	movs	r3, #1
 8001f52:	e00f      	b.n	8001f74 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	681a      	ldr	r2, [r3, #0]
 8001f5a:	68bb      	ldr	r3, [r7, #8]
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	68ba      	ldr	r2, [r7, #8]
 8001f60:	429a      	cmp	r2, r3
 8001f62:	bf0c      	ite	eq
 8001f64:	2301      	moveq	r3, #1
 8001f66:	2300      	movne	r3, #0
 8001f68:	b2db      	uxtb	r3, r3
 8001f6a:	461a      	mov	r2, r3
 8001f6c:	79fb      	ldrb	r3, [r7, #7]
 8001f6e:	429a      	cmp	r2, r3
 8001f70:	d0b4      	beq.n	8001edc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001f72:	2300      	movs	r3, #0
}
 8001f74:	4618      	mov	r0, r3
 8001f76:	3718      	adds	r7, #24
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}

08001f7c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b085      	sub	sp, #20
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	60f8      	str	r0, [r7, #12]
 8001f84:	60b9      	str	r1, [r7, #8]
 8001f86:	4613      	mov	r3, r2
 8001f88:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	68ba      	ldr	r2, [r7, #8]
 8001f8e:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	88fa      	ldrh	r2, [r7, #6]
 8001f94:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	88fa      	ldrh	r2, [r7, #6]
 8001f9a:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	2222      	movs	r2, #34	@ 0x22
 8001fa6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	691b      	ldr	r3, [r3, #16]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d007      	beq.n	8001fc2 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	68da      	ldr	r2, [r3, #12]
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001fc0:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	695a      	ldr	r2, [r3, #20]
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f042 0201 	orr.w	r2, r2, #1
 8001fd0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	68da      	ldr	r2, [r3, #12]
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f042 0220 	orr.w	r2, r2, #32
 8001fe0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8001fe2:	2300      	movs	r3, #0
}
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	3714      	adds	r7, #20
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bc80      	pop	{r7}
 8001fec:	4770      	bx	lr

08001fee <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001fee:	b480      	push	{r7}
 8001ff0:	b095      	sub	sp, #84	@ 0x54
 8001ff2:	af00      	add	r7, sp, #0
 8001ff4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	330c      	adds	r3, #12
 8001ffc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001ffe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002000:	e853 3f00 	ldrex	r3, [r3]
 8002004:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002006:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002008:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800200c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	330c      	adds	r3, #12
 8002014:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002016:	643a      	str	r2, [r7, #64]	@ 0x40
 8002018:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800201a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800201c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800201e:	e841 2300 	strex	r3, r2, [r1]
 8002022:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002024:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002026:	2b00      	cmp	r3, #0
 8002028:	d1e5      	bne.n	8001ff6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	3314      	adds	r3, #20
 8002030:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002032:	6a3b      	ldr	r3, [r7, #32]
 8002034:	e853 3f00 	ldrex	r3, [r3]
 8002038:	61fb      	str	r3, [r7, #28]
   return(result);
 800203a:	69fb      	ldr	r3, [r7, #28]
 800203c:	f023 0301 	bic.w	r3, r3, #1
 8002040:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	3314      	adds	r3, #20
 8002048:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800204a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800204c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800204e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002050:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002052:	e841 2300 	strex	r3, r2, [r1]
 8002056:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002058:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800205a:	2b00      	cmp	r3, #0
 800205c:	d1e5      	bne.n	800202a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002062:	2b01      	cmp	r3, #1
 8002064:	d119      	bne.n	800209a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	330c      	adds	r3, #12
 800206c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	e853 3f00 	ldrex	r3, [r3]
 8002074:	60bb      	str	r3, [r7, #8]
   return(result);
 8002076:	68bb      	ldr	r3, [r7, #8]
 8002078:	f023 0310 	bic.w	r3, r3, #16
 800207c:	647b      	str	r3, [r7, #68]	@ 0x44
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	330c      	adds	r3, #12
 8002084:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002086:	61ba      	str	r2, [r7, #24]
 8002088:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800208a:	6979      	ldr	r1, [r7, #20]
 800208c:	69ba      	ldr	r2, [r7, #24]
 800208e:	e841 2300 	strex	r3, r2, [r1]
 8002092:	613b      	str	r3, [r7, #16]
   return(result);
 8002094:	693b      	ldr	r3, [r7, #16]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d1e5      	bne.n	8002066 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2220      	movs	r2, #32
 800209e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2200      	movs	r2, #0
 80020a6:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80020a8:	bf00      	nop
 80020aa:	3754      	adds	r7, #84	@ 0x54
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bc80      	pop	{r7}
 80020b0:	4770      	bx	lr

080020b2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80020b2:	b580      	push	{r7, lr}
 80020b4:	b084      	sub	sp, #16
 80020b6:	af00      	add	r7, sp, #0
 80020b8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020be:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	2200      	movs	r2, #0
 80020c4:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	2200      	movs	r2, #0
 80020ca:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80020cc:	68f8      	ldr	r0, [r7, #12]
 80020ce:	f7ff fee8 	bl	8001ea2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80020d2:	bf00      	nop
 80020d4:	3710      	adds	r7, #16
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}

080020da <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80020da:	b480      	push	{r7}
 80020dc:	b085      	sub	sp, #20
 80020de:	af00      	add	r7, sp, #0
 80020e0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80020e8:	b2db      	uxtb	r3, r3
 80020ea:	2b21      	cmp	r3, #33	@ 0x21
 80020ec:	d13e      	bne.n	800216c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	689b      	ldr	r3, [r3, #8]
 80020f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80020f6:	d114      	bne.n	8002122 <UART_Transmit_IT+0x48>
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	691b      	ldr	r3, [r3, #16]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d110      	bne.n	8002122 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6a1b      	ldr	r3, [r3, #32]
 8002104:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	881b      	ldrh	r3, [r3, #0]
 800210a:	461a      	mov	r2, r3
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002114:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6a1b      	ldr	r3, [r3, #32]
 800211a:	1c9a      	adds	r2, r3, #2
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	621a      	str	r2, [r3, #32]
 8002120:	e008      	b.n	8002134 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6a1b      	ldr	r3, [r3, #32]
 8002126:	1c59      	adds	r1, r3, #1
 8002128:	687a      	ldr	r2, [r7, #4]
 800212a:	6211      	str	r1, [r2, #32]
 800212c:	781a      	ldrb	r2, [r3, #0]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002138:	b29b      	uxth	r3, r3
 800213a:	3b01      	subs	r3, #1
 800213c:	b29b      	uxth	r3, r3
 800213e:	687a      	ldr	r2, [r7, #4]
 8002140:	4619      	mov	r1, r3
 8002142:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8002144:	2b00      	cmp	r3, #0
 8002146:	d10f      	bne.n	8002168 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	68da      	ldr	r2, [r3, #12]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002156:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	68da      	ldr	r2, [r3, #12]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002166:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002168:	2300      	movs	r3, #0
 800216a:	e000      	b.n	800216e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800216c:	2302      	movs	r3, #2
  }
}
 800216e:	4618      	mov	r0, r3
 8002170:	3714      	adds	r7, #20
 8002172:	46bd      	mov	sp, r7
 8002174:	bc80      	pop	{r7}
 8002176:	4770      	bx	lr

08002178 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b082      	sub	sp, #8
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	68da      	ldr	r2, [r3, #12]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800218e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2220      	movs	r2, #32
 8002194:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002198:	6878      	ldr	r0, [r7, #4]
 800219a:	f7ff fe79 	bl	8001e90 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800219e:	2300      	movs	r3, #0
}
 80021a0:	4618      	mov	r0, r3
 80021a2:	3708      	adds	r7, #8
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd80      	pop	{r7, pc}

080021a8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b08c      	sub	sp, #48	@ 0x30
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80021b6:	b2db      	uxtb	r3, r3
 80021b8:	2b22      	cmp	r3, #34	@ 0x22
 80021ba:	f040 80ae 	bne.w	800231a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	689b      	ldr	r3, [r3, #8]
 80021c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80021c6:	d117      	bne.n	80021f8 <UART_Receive_IT+0x50>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	691b      	ldr	r3, [r3, #16]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d113      	bne.n	80021f8 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80021d0:	2300      	movs	r3, #0
 80021d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021d8:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	b29b      	uxth	r3, r3
 80021e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80021e6:	b29a      	uxth	r2, r3
 80021e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021ea:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021f0:	1c9a      	adds	r2, r3, #2
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	629a      	str	r2, [r3, #40]	@ 0x28
 80021f6:	e026      	b.n	8002246 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80021fe:	2300      	movs	r3, #0
 8002200:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	689b      	ldr	r3, [r3, #8]
 8002206:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800220a:	d007      	beq.n	800221c <UART_Receive_IT+0x74>
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	689b      	ldr	r3, [r3, #8]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d10a      	bne.n	800222a <UART_Receive_IT+0x82>
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	691b      	ldr	r3, [r3, #16]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d106      	bne.n	800222a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	b2da      	uxtb	r2, r3
 8002224:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002226:	701a      	strb	r2, [r3, #0]
 8002228:	e008      	b.n	800223c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	b2db      	uxtb	r3, r3
 8002232:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002236:	b2da      	uxtb	r2, r3
 8002238:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800223a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002240:	1c5a      	adds	r2, r3, #1
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800224a:	b29b      	uxth	r3, r3
 800224c:	3b01      	subs	r3, #1
 800224e:	b29b      	uxth	r3, r3
 8002250:	687a      	ldr	r2, [r7, #4]
 8002252:	4619      	mov	r1, r3
 8002254:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8002256:	2b00      	cmp	r3, #0
 8002258:	d15d      	bne.n	8002316 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	68da      	ldr	r2, [r3, #12]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f022 0220 	bic.w	r2, r2, #32
 8002268:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	68da      	ldr	r2, [r3, #12]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002278:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	695a      	ldr	r2, [r3, #20]
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f022 0201 	bic.w	r2, r2, #1
 8002288:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2220      	movs	r2, #32
 800228e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2200      	movs	r2, #0
 8002296:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800229c:	2b01      	cmp	r3, #1
 800229e:	d135      	bne.n	800230c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2200      	movs	r2, #0
 80022a4:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	330c      	adds	r3, #12
 80022ac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022ae:	697b      	ldr	r3, [r7, #20]
 80022b0:	e853 3f00 	ldrex	r3, [r3]
 80022b4:	613b      	str	r3, [r7, #16]
   return(result);
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	f023 0310 	bic.w	r3, r3, #16
 80022bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	330c      	adds	r3, #12
 80022c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80022c6:	623a      	str	r2, [r7, #32]
 80022c8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022ca:	69f9      	ldr	r1, [r7, #28]
 80022cc:	6a3a      	ldr	r2, [r7, #32]
 80022ce:	e841 2300 	strex	r3, r2, [r1]
 80022d2:	61bb      	str	r3, [r7, #24]
   return(result);
 80022d4:	69bb      	ldr	r3, [r7, #24]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d1e5      	bne.n	80022a6 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f003 0310 	and.w	r3, r3, #16
 80022e4:	2b10      	cmp	r3, #16
 80022e6:	d10a      	bne.n	80022fe <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80022e8:	2300      	movs	r3, #0
 80022ea:	60fb      	str	r3, [r7, #12]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	60fb      	str	r3, [r7, #12]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	60fb      	str	r3, [r7, #12]
 80022fc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002302:	4619      	mov	r1, r3
 8002304:	6878      	ldr	r0, [r7, #4]
 8002306:	f7ff fdd5 	bl	8001eb4 <HAL_UARTEx_RxEventCallback>
 800230a:	e002      	b.n	8002312 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800230c:	6878      	ldr	r0, [r7, #4]
 800230e:	f7fe f8cb 	bl	80004a8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002312:	2300      	movs	r3, #0
 8002314:	e002      	b.n	800231c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8002316:	2300      	movs	r3, #0
 8002318:	e000      	b.n	800231c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800231a:	2302      	movs	r3, #2
  }
}
 800231c:	4618      	mov	r0, r3
 800231e:	3730      	adds	r7, #48	@ 0x30
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}

08002324 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b084      	sub	sp, #16
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	691b      	ldr	r3, [r3, #16]
 8002332:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	68da      	ldr	r2, [r3, #12]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	430a      	orrs	r2, r1
 8002340:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	689a      	ldr	r2, [r3, #8]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	691b      	ldr	r3, [r3, #16]
 800234a:	431a      	orrs	r2, r3
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	695b      	ldr	r3, [r3, #20]
 8002350:	4313      	orrs	r3, r2
 8002352:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	68db      	ldr	r3, [r3, #12]
 800235a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800235e:	f023 030c 	bic.w	r3, r3, #12
 8002362:	687a      	ldr	r2, [r7, #4]
 8002364:	6812      	ldr	r2, [r2, #0]
 8002366:	68b9      	ldr	r1, [r7, #8]
 8002368:	430b      	orrs	r3, r1
 800236a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	695b      	ldr	r3, [r3, #20]
 8002372:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	699a      	ldr	r2, [r3, #24]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	430a      	orrs	r2, r1
 8002380:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4a2c      	ldr	r2, [pc, #176]	@ (8002438 <UART_SetConfig+0x114>)
 8002388:	4293      	cmp	r3, r2
 800238a:	d103      	bne.n	8002394 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800238c:	f7ff f9bc 	bl	8001708 <HAL_RCC_GetPCLK2Freq>
 8002390:	60f8      	str	r0, [r7, #12]
 8002392:	e002      	b.n	800239a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002394:	f7ff f9a4 	bl	80016e0 <HAL_RCC_GetPCLK1Freq>
 8002398:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800239a:	68fa      	ldr	r2, [r7, #12]
 800239c:	4613      	mov	r3, r2
 800239e:	009b      	lsls	r3, r3, #2
 80023a0:	4413      	add	r3, r2
 80023a2:	009a      	lsls	r2, r3, #2
 80023a4:	441a      	add	r2, r3
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	009b      	lsls	r3, r3, #2
 80023ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80023b0:	4a22      	ldr	r2, [pc, #136]	@ (800243c <UART_SetConfig+0x118>)
 80023b2:	fba2 2303 	umull	r2, r3, r2, r3
 80023b6:	095b      	lsrs	r3, r3, #5
 80023b8:	0119      	lsls	r1, r3, #4
 80023ba:	68fa      	ldr	r2, [r7, #12]
 80023bc:	4613      	mov	r3, r2
 80023be:	009b      	lsls	r3, r3, #2
 80023c0:	4413      	add	r3, r2
 80023c2:	009a      	lsls	r2, r3, #2
 80023c4:	441a      	add	r2, r3
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	009b      	lsls	r3, r3, #2
 80023cc:	fbb2 f2f3 	udiv	r2, r2, r3
 80023d0:	4b1a      	ldr	r3, [pc, #104]	@ (800243c <UART_SetConfig+0x118>)
 80023d2:	fba3 0302 	umull	r0, r3, r3, r2
 80023d6:	095b      	lsrs	r3, r3, #5
 80023d8:	2064      	movs	r0, #100	@ 0x64
 80023da:	fb00 f303 	mul.w	r3, r0, r3
 80023de:	1ad3      	subs	r3, r2, r3
 80023e0:	011b      	lsls	r3, r3, #4
 80023e2:	3332      	adds	r3, #50	@ 0x32
 80023e4:	4a15      	ldr	r2, [pc, #84]	@ (800243c <UART_SetConfig+0x118>)
 80023e6:	fba2 2303 	umull	r2, r3, r2, r3
 80023ea:	095b      	lsrs	r3, r3, #5
 80023ec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80023f0:	4419      	add	r1, r3
 80023f2:	68fa      	ldr	r2, [r7, #12]
 80023f4:	4613      	mov	r3, r2
 80023f6:	009b      	lsls	r3, r3, #2
 80023f8:	4413      	add	r3, r2
 80023fa:	009a      	lsls	r2, r3, #2
 80023fc:	441a      	add	r2, r3
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	009b      	lsls	r3, r3, #2
 8002404:	fbb2 f2f3 	udiv	r2, r2, r3
 8002408:	4b0c      	ldr	r3, [pc, #48]	@ (800243c <UART_SetConfig+0x118>)
 800240a:	fba3 0302 	umull	r0, r3, r3, r2
 800240e:	095b      	lsrs	r3, r3, #5
 8002410:	2064      	movs	r0, #100	@ 0x64
 8002412:	fb00 f303 	mul.w	r3, r0, r3
 8002416:	1ad3      	subs	r3, r2, r3
 8002418:	011b      	lsls	r3, r3, #4
 800241a:	3332      	adds	r3, #50	@ 0x32
 800241c:	4a07      	ldr	r2, [pc, #28]	@ (800243c <UART_SetConfig+0x118>)
 800241e:	fba2 2303 	umull	r2, r3, r2, r3
 8002422:	095b      	lsrs	r3, r3, #5
 8002424:	f003 020f 	and.w	r2, r3, #15
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	440a      	add	r2, r1
 800242e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002430:	bf00      	nop
 8002432:	3710      	adds	r7, #16
 8002434:	46bd      	mov	sp, r7
 8002436:	bd80      	pop	{r7, pc}
 8002438:	40013800 	.word	0x40013800
 800243c:	51eb851f 	.word	0x51eb851f

08002440 <std>:
 8002440:	2300      	movs	r3, #0
 8002442:	b510      	push	{r4, lr}
 8002444:	4604      	mov	r4, r0
 8002446:	e9c0 3300 	strd	r3, r3, [r0]
 800244a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800244e:	6083      	str	r3, [r0, #8]
 8002450:	8181      	strh	r1, [r0, #12]
 8002452:	6643      	str	r3, [r0, #100]	@ 0x64
 8002454:	81c2      	strh	r2, [r0, #14]
 8002456:	6183      	str	r3, [r0, #24]
 8002458:	4619      	mov	r1, r3
 800245a:	2208      	movs	r2, #8
 800245c:	305c      	adds	r0, #92	@ 0x5c
 800245e:	f000 f9e7 	bl	8002830 <memset>
 8002462:	4b0d      	ldr	r3, [pc, #52]	@ (8002498 <std+0x58>)
 8002464:	6224      	str	r4, [r4, #32]
 8002466:	6263      	str	r3, [r4, #36]	@ 0x24
 8002468:	4b0c      	ldr	r3, [pc, #48]	@ (800249c <std+0x5c>)
 800246a:	62a3      	str	r3, [r4, #40]	@ 0x28
 800246c:	4b0c      	ldr	r3, [pc, #48]	@ (80024a0 <std+0x60>)
 800246e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002470:	4b0c      	ldr	r3, [pc, #48]	@ (80024a4 <std+0x64>)
 8002472:	6323      	str	r3, [r4, #48]	@ 0x30
 8002474:	4b0c      	ldr	r3, [pc, #48]	@ (80024a8 <std+0x68>)
 8002476:	429c      	cmp	r4, r3
 8002478:	d006      	beq.n	8002488 <std+0x48>
 800247a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800247e:	4294      	cmp	r4, r2
 8002480:	d002      	beq.n	8002488 <std+0x48>
 8002482:	33d0      	adds	r3, #208	@ 0xd0
 8002484:	429c      	cmp	r4, r3
 8002486:	d105      	bne.n	8002494 <std+0x54>
 8002488:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800248c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002490:	f000 ba46 	b.w	8002920 <__retarget_lock_init_recursive>
 8002494:	bd10      	pop	{r4, pc}
 8002496:	bf00      	nop
 8002498:	08002681 	.word	0x08002681
 800249c:	080026a3 	.word	0x080026a3
 80024a0:	080026db 	.word	0x080026db
 80024a4:	080026ff 	.word	0x080026ff
 80024a8:	200000dc 	.word	0x200000dc

080024ac <stdio_exit_handler>:
 80024ac:	4a02      	ldr	r2, [pc, #8]	@ (80024b8 <stdio_exit_handler+0xc>)
 80024ae:	4903      	ldr	r1, [pc, #12]	@ (80024bc <stdio_exit_handler+0x10>)
 80024b0:	4803      	ldr	r0, [pc, #12]	@ (80024c0 <stdio_exit_handler+0x14>)
 80024b2:	f000 b869 	b.w	8002588 <_fwalk_sglue>
 80024b6:	bf00      	nop
 80024b8:	2000000c 	.word	0x2000000c
 80024bc:	08002c15 	.word	0x08002c15
 80024c0:	2000001c 	.word	0x2000001c

080024c4 <cleanup_stdio>:
 80024c4:	6841      	ldr	r1, [r0, #4]
 80024c6:	4b0c      	ldr	r3, [pc, #48]	@ (80024f8 <cleanup_stdio+0x34>)
 80024c8:	b510      	push	{r4, lr}
 80024ca:	4299      	cmp	r1, r3
 80024cc:	4604      	mov	r4, r0
 80024ce:	d001      	beq.n	80024d4 <cleanup_stdio+0x10>
 80024d0:	f000 fba0 	bl	8002c14 <_fflush_r>
 80024d4:	68a1      	ldr	r1, [r4, #8]
 80024d6:	4b09      	ldr	r3, [pc, #36]	@ (80024fc <cleanup_stdio+0x38>)
 80024d8:	4299      	cmp	r1, r3
 80024da:	d002      	beq.n	80024e2 <cleanup_stdio+0x1e>
 80024dc:	4620      	mov	r0, r4
 80024de:	f000 fb99 	bl	8002c14 <_fflush_r>
 80024e2:	68e1      	ldr	r1, [r4, #12]
 80024e4:	4b06      	ldr	r3, [pc, #24]	@ (8002500 <cleanup_stdio+0x3c>)
 80024e6:	4299      	cmp	r1, r3
 80024e8:	d004      	beq.n	80024f4 <cleanup_stdio+0x30>
 80024ea:	4620      	mov	r0, r4
 80024ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80024f0:	f000 bb90 	b.w	8002c14 <_fflush_r>
 80024f4:	bd10      	pop	{r4, pc}
 80024f6:	bf00      	nop
 80024f8:	200000dc 	.word	0x200000dc
 80024fc:	20000144 	.word	0x20000144
 8002500:	200001ac 	.word	0x200001ac

08002504 <global_stdio_init.part.0>:
 8002504:	b510      	push	{r4, lr}
 8002506:	4b0b      	ldr	r3, [pc, #44]	@ (8002534 <global_stdio_init.part.0+0x30>)
 8002508:	4c0b      	ldr	r4, [pc, #44]	@ (8002538 <global_stdio_init.part.0+0x34>)
 800250a:	4a0c      	ldr	r2, [pc, #48]	@ (800253c <global_stdio_init.part.0+0x38>)
 800250c:	4620      	mov	r0, r4
 800250e:	601a      	str	r2, [r3, #0]
 8002510:	2104      	movs	r1, #4
 8002512:	2200      	movs	r2, #0
 8002514:	f7ff ff94 	bl	8002440 <std>
 8002518:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800251c:	2201      	movs	r2, #1
 800251e:	2109      	movs	r1, #9
 8002520:	f7ff ff8e 	bl	8002440 <std>
 8002524:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8002528:	2202      	movs	r2, #2
 800252a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800252e:	2112      	movs	r1, #18
 8002530:	f7ff bf86 	b.w	8002440 <std>
 8002534:	20000214 	.word	0x20000214
 8002538:	200000dc 	.word	0x200000dc
 800253c:	080024ad 	.word	0x080024ad

08002540 <__sfp_lock_acquire>:
 8002540:	4801      	ldr	r0, [pc, #4]	@ (8002548 <__sfp_lock_acquire+0x8>)
 8002542:	f000 b9ee 	b.w	8002922 <__retarget_lock_acquire_recursive>
 8002546:	bf00      	nop
 8002548:	2000021d 	.word	0x2000021d

0800254c <__sfp_lock_release>:
 800254c:	4801      	ldr	r0, [pc, #4]	@ (8002554 <__sfp_lock_release+0x8>)
 800254e:	f000 b9e9 	b.w	8002924 <__retarget_lock_release_recursive>
 8002552:	bf00      	nop
 8002554:	2000021d 	.word	0x2000021d

08002558 <__sinit>:
 8002558:	b510      	push	{r4, lr}
 800255a:	4604      	mov	r4, r0
 800255c:	f7ff fff0 	bl	8002540 <__sfp_lock_acquire>
 8002560:	6a23      	ldr	r3, [r4, #32]
 8002562:	b11b      	cbz	r3, 800256c <__sinit+0x14>
 8002564:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002568:	f7ff bff0 	b.w	800254c <__sfp_lock_release>
 800256c:	4b04      	ldr	r3, [pc, #16]	@ (8002580 <__sinit+0x28>)
 800256e:	6223      	str	r3, [r4, #32]
 8002570:	4b04      	ldr	r3, [pc, #16]	@ (8002584 <__sinit+0x2c>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d1f5      	bne.n	8002564 <__sinit+0xc>
 8002578:	f7ff ffc4 	bl	8002504 <global_stdio_init.part.0>
 800257c:	e7f2      	b.n	8002564 <__sinit+0xc>
 800257e:	bf00      	nop
 8002580:	080024c5 	.word	0x080024c5
 8002584:	20000214 	.word	0x20000214

08002588 <_fwalk_sglue>:
 8002588:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800258c:	4607      	mov	r7, r0
 800258e:	4688      	mov	r8, r1
 8002590:	4614      	mov	r4, r2
 8002592:	2600      	movs	r6, #0
 8002594:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002598:	f1b9 0901 	subs.w	r9, r9, #1
 800259c:	d505      	bpl.n	80025aa <_fwalk_sglue+0x22>
 800259e:	6824      	ldr	r4, [r4, #0]
 80025a0:	2c00      	cmp	r4, #0
 80025a2:	d1f7      	bne.n	8002594 <_fwalk_sglue+0xc>
 80025a4:	4630      	mov	r0, r6
 80025a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80025aa:	89ab      	ldrh	r3, [r5, #12]
 80025ac:	2b01      	cmp	r3, #1
 80025ae:	d907      	bls.n	80025c0 <_fwalk_sglue+0x38>
 80025b0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80025b4:	3301      	adds	r3, #1
 80025b6:	d003      	beq.n	80025c0 <_fwalk_sglue+0x38>
 80025b8:	4629      	mov	r1, r5
 80025ba:	4638      	mov	r0, r7
 80025bc:	47c0      	blx	r8
 80025be:	4306      	orrs	r6, r0
 80025c0:	3568      	adds	r5, #104	@ 0x68
 80025c2:	e7e9      	b.n	8002598 <_fwalk_sglue+0x10>

080025c4 <_puts_r>:
 80025c4:	6a03      	ldr	r3, [r0, #32]
 80025c6:	b570      	push	{r4, r5, r6, lr}
 80025c8:	4605      	mov	r5, r0
 80025ca:	460e      	mov	r6, r1
 80025cc:	6884      	ldr	r4, [r0, #8]
 80025ce:	b90b      	cbnz	r3, 80025d4 <_puts_r+0x10>
 80025d0:	f7ff ffc2 	bl	8002558 <__sinit>
 80025d4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80025d6:	07db      	lsls	r3, r3, #31
 80025d8:	d405      	bmi.n	80025e6 <_puts_r+0x22>
 80025da:	89a3      	ldrh	r3, [r4, #12]
 80025dc:	0598      	lsls	r0, r3, #22
 80025de:	d402      	bmi.n	80025e6 <_puts_r+0x22>
 80025e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80025e2:	f000 f99e 	bl	8002922 <__retarget_lock_acquire_recursive>
 80025e6:	89a3      	ldrh	r3, [r4, #12]
 80025e8:	0719      	lsls	r1, r3, #28
 80025ea:	d502      	bpl.n	80025f2 <_puts_r+0x2e>
 80025ec:	6923      	ldr	r3, [r4, #16]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d135      	bne.n	800265e <_puts_r+0x9a>
 80025f2:	4621      	mov	r1, r4
 80025f4:	4628      	mov	r0, r5
 80025f6:	f000 f8c5 	bl	8002784 <__swsetup_r>
 80025fa:	b380      	cbz	r0, 800265e <_puts_r+0x9a>
 80025fc:	f04f 35ff 	mov.w	r5, #4294967295
 8002600:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002602:	07da      	lsls	r2, r3, #31
 8002604:	d405      	bmi.n	8002612 <_puts_r+0x4e>
 8002606:	89a3      	ldrh	r3, [r4, #12]
 8002608:	059b      	lsls	r3, r3, #22
 800260a:	d402      	bmi.n	8002612 <_puts_r+0x4e>
 800260c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800260e:	f000 f989 	bl	8002924 <__retarget_lock_release_recursive>
 8002612:	4628      	mov	r0, r5
 8002614:	bd70      	pop	{r4, r5, r6, pc}
 8002616:	2b00      	cmp	r3, #0
 8002618:	da04      	bge.n	8002624 <_puts_r+0x60>
 800261a:	69a2      	ldr	r2, [r4, #24]
 800261c:	429a      	cmp	r2, r3
 800261e:	dc17      	bgt.n	8002650 <_puts_r+0x8c>
 8002620:	290a      	cmp	r1, #10
 8002622:	d015      	beq.n	8002650 <_puts_r+0x8c>
 8002624:	6823      	ldr	r3, [r4, #0]
 8002626:	1c5a      	adds	r2, r3, #1
 8002628:	6022      	str	r2, [r4, #0]
 800262a:	7019      	strb	r1, [r3, #0]
 800262c:	68a3      	ldr	r3, [r4, #8]
 800262e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002632:	3b01      	subs	r3, #1
 8002634:	60a3      	str	r3, [r4, #8]
 8002636:	2900      	cmp	r1, #0
 8002638:	d1ed      	bne.n	8002616 <_puts_r+0x52>
 800263a:	2b00      	cmp	r3, #0
 800263c:	da11      	bge.n	8002662 <_puts_r+0x9e>
 800263e:	4622      	mov	r2, r4
 8002640:	210a      	movs	r1, #10
 8002642:	4628      	mov	r0, r5
 8002644:	f000 f85f 	bl	8002706 <__swbuf_r>
 8002648:	3001      	adds	r0, #1
 800264a:	d0d7      	beq.n	80025fc <_puts_r+0x38>
 800264c:	250a      	movs	r5, #10
 800264e:	e7d7      	b.n	8002600 <_puts_r+0x3c>
 8002650:	4622      	mov	r2, r4
 8002652:	4628      	mov	r0, r5
 8002654:	f000 f857 	bl	8002706 <__swbuf_r>
 8002658:	3001      	adds	r0, #1
 800265a:	d1e7      	bne.n	800262c <_puts_r+0x68>
 800265c:	e7ce      	b.n	80025fc <_puts_r+0x38>
 800265e:	3e01      	subs	r6, #1
 8002660:	e7e4      	b.n	800262c <_puts_r+0x68>
 8002662:	6823      	ldr	r3, [r4, #0]
 8002664:	1c5a      	adds	r2, r3, #1
 8002666:	6022      	str	r2, [r4, #0]
 8002668:	220a      	movs	r2, #10
 800266a:	701a      	strb	r2, [r3, #0]
 800266c:	e7ee      	b.n	800264c <_puts_r+0x88>
	...

08002670 <puts>:
 8002670:	4b02      	ldr	r3, [pc, #8]	@ (800267c <puts+0xc>)
 8002672:	4601      	mov	r1, r0
 8002674:	6818      	ldr	r0, [r3, #0]
 8002676:	f7ff bfa5 	b.w	80025c4 <_puts_r>
 800267a:	bf00      	nop
 800267c:	20000018 	.word	0x20000018

08002680 <__sread>:
 8002680:	b510      	push	{r4, lr}
 8002682:	460c      	mov	r4, r1
 8002684:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002688:	f000 f8fc 	bl	8002884 <_read_r>
 800268c:	2800      	cmp	r0, #0
 800268e:	bfab      	itete	ge
 8002690:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8002692:	89a3      	ldrhlt	r3, [r4, #12]
 8002694:	181b      	addge	r3, r3, r0
 8002696:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800269a:	bfac      	ite	ge
 800269c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800269e:	81a3      	strhlt	r3, [r4, #12]
 80026a0:	bd10      	pop	{r4, pc}

080026a2 <__swrite>:
 80026a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80026a6:	461f      	mov	r7, r3
 80026a8:	898b      	ldrh	r3, [r1, #12]
 80026aa:	4605      	mov	r5, r0
 80026ac:	05db      	lsls	r3, r3, #23
 80026ae:	460c      	mov	r4, r1
 80026b0:	4616      	mov	r6, r2
 80026b2:	d505      	bpl.n	80026c0 <__swrite+0x1e>
 80026b4:	2302      	movs	r3, #2
 80026b6:	2200      	movs	r2, #0
 80026b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80026bc:	f000 f8d0 	bl	8002860 <_lseek_r>
 80026c0:	89a3      	ldrh	r3, [r4, #12]
 80026c2:	4632      	mov	r2, r6
 80026c4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80026c8:	81a3      	strh	r3, [r4, #12]
 80026ca:	4628      	mov	r0, r5
 80026cc:	463b      	mov	r3, r7
 80026ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80026d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80026d6:	f000 b8e7 	b.w	80028a8 <_write_r>

080026da <__sseek>:
 80026da:	b510      	push	{r4, lr}
 80026dc:	460c      	mov	r4, r1
 80026de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80026e2:	f000 f8bd 	bl	8002860 <_lseek_r>
 80026e6:	1c43      	adds	r3, r0, #1
 80026e8:	89a3      	ldrh	r3, [r4, #12]
 80026ea:	bf15      	itete	ne
 80026ec:	6560      	strne	r0, [r4, #84]	@ 0x54
 80026ee:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80026f2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80026f6:	81a3      	strheq	r3, [r4, #12]
 80026f8:	bf18      	it	ne
 80026fa:	81a3      	strhne	r3, [r4, #12]
 80026fc:	bd10      	pop	{r4, pc}

080026fe <__sclose>:
 80026fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002702:	f000 b89d 	b.w	8002840 <_close_r>

08002706 <__swbuf_r>:
 8002706:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002708:	460e      	mov	r6, r1
 800270a:	4614      	mov	r4, r2
 800270c:	4605      	mov	r5, r0
 800270e:	b118      	cbz	r0, 8002718 <__swbuf_r+0x12>
 8002710:	6a03      	ldr	r3, [r0, #32]
 8002712:	b90b      	cbnz	r3, 8002718 <__swbuf_r+0x12>
 8002714:	f7ff ff20 	bl	8002558 <__sinit>
 8002718:	69a3      	ldr	r3, [r4, #24]
 800271a:	60a3      	str	r3, [r4, #8]
 800271c:	89a3      	ldrh	r3, [r4, #12]
 800271e:	071a      	lsls	r2, r3, #28
 8002720:	d501      	bpl.n	8002726 <__swbuf_r+0x20>
 8002722:	6923      	ldr	r3, [r4, #16]
 8002724:	b943      	cbnz	r3, 8002738 <__swbuf_r+0x32>
 8002726:	4621      	mov	r1, r4
 8002728:	4628      	mov	r0, r5
 800272a:	f000 f82b 	bl	8002784 <__swsetup_r>
 800272e:	b118      	cbz	r0, 8002738 <__swbuf_r+0x32>
 8002730:	f04f 37ff 	mov.w	r7, #4294967295
 8002734:	4638      	mov	r0, r7
 8002736:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002738:	6823      	ldr	r3, [r4, #0]
 800273a:	6922      	ldr	r2, [r4, #16]
 800273c:	b2f6      	uxtb	r6, r6
 800273e:	1a98      	subs	r0, r3, r2
 8002740:	6963      	ldr	r3, [r4, #20]
 8002742:	4637      	mov	r7, r6
 8002744:	4283      	cmp	r3, r0
 8002746:	dc05      	bgt.n	8002754 <__swbuf_r+0x4e>
 8002748:	4621      	mov	r1, r4
 800274a:	4628      	mov	r0, r5
 800274c:	f000 fa62 	bl	8002c14 <_fflush_r>
 8002750:	2800      	cmp	r0, #0
 8002752:	d1ed      	bne.n	8002730 <__swbuf_r+0x2a>
 8002754:	68a3      	ldr	r3, [r4, #8]
 8002756:	3b01      	subs	r3, #1
 8002758:	60a3      	str	r3, [r4, #8]
 800275a:	6823      	ldr	r3, [r4, #0]
 800275c:	1c5a      	adds	r2, r3, #1
 800275e:	6022      	str	r2, [r4, #0]
 8002760:	701e      	strb	r6, [r3, #0]
 8002762:	6962      	ldr	r2, [r4, #20]
 8002764:	1c43      	adds	r3, r0, #1
 8002766:	429a      	cmp	r2, r3
 8002768:	d004      	beq.n	8002774 <__swbuf_r+0x6e>
 800276a:	89a3      	ldrh	r3, [r4, #12]
 800276c:	07db      	lsls	r3, r3, #31
 800276e:	d5e1      	bpl.n	8002734 <__swbuf_r+0x2e>
 8002770:	2e0a      	cmp	r6, #10
 8002772:	d1df      	bne.n	8002734 <__swbuf_r+0x2e>
 8002774:	4621      	mov	r1, r4
 8002776:	4628      	mov	r0, r5
 8002778:	f000 fa4c 	bl	8002c14 <_fflush_r>
 800277c:	2800      	cmp	r0, #0
 800277e:	d0d9      	beq.n	8002734 <__swbuf_r+0x2e>
 8002780:	e7d6      	b.n	8002730 <__swbuf_r+0x2a>
	...

08002784 <__swsetup_r>:
 8002784:	b538      	push	{r3, r4, r5, lr}
 8002786:	4b29      	ldr	r3, [pc, #164]	@ (800282c <__swsetup_r+0xa8>)
 8002788:	4605      	mov	r5, r0
 800278a:	6818      	ldr	r0, [r3, #0]
 800278c:	460c      	mov	r4, r1
 800278e:	b118      	cbz	r0, 8002798 <__swsetup_r+0x14>
 8002790:	6a03      	ldr	r3, [r0, #32]
 8002792:	b90b      	cbnz	r3, 8002798 <__swsetup_r+0x14>
 8002794:	f7ff fee0 	bl	8002558 <__sinit>
 8002798:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800279c:	0719      	lsls	r1, r3, #28
 800279e:	d422      	bmi.n	80027e6 <__swsetup_r+0x62>
 80027a0:	06da      	lsls	r2, r3, #27
 80027a2:	d407      	bmi.n	80027b4 <__swsetup_r+0x30>
 80027a4:	2209      	movs	r2, #9
 80027a6:	602a      	str	r2, [r5, #0]
 80027a8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80027ac:	f04f 30ff 	mov.w	r0, #4294967295
 80027b0:	81a3      	strh	r3, [r4, #12]
 80027b2:	e033      	b.n	800281c <__swsetup_r+0x98>
 80027b4:	0758      	lsls	r0, r3, #29
 80027b6:	d512      	bpl.n	80027de <__swsetup_r+0x5a>
 80027b8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80027ba:	b141      	cbz	r1, 80027ce <__swsetup_r+0x4a>
 80027bc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80027c0:	4299      	cmp	r1, r3
 80027c2:	d002      	beq.n	80027ca <__swsetup_r+0x46>
 80027c4:	4628      	mov	r0, r5
 80027c6:	f000 f8af 	bl	8002928 <_free_r>
 80027ca:	2300      	movs	r3, #0
 80027cc:	6363      	str	r3, [r4, #52]	@ 0x34
 80027ce:	89a3      	ldrh	r3, [r4, #12]
 80027d0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80027d4:	81a3      	strh	r3, [r4, #12]
 80027d6:	2300      	movs	r3, #0
 80027d8:	6063      	str	r3, [r4, #4]
 80027da:	6923      	ldr	r3, [r4, #16]
 80027dc:	6023      	str	r3, [r4, #0]
 80027de:	89a3      	ldrh	r3, [r4, #12]
 80027e0:	f043 0308 	orr.w	r3, r3, #8
 80027e4:	81a3      	strh	r3, [r4, #12]
 80027e6:	6923      	ldr	r3, [r4, #16]
 80027e8:	b94b      	cbnz	r3, 80027fe <__swsetup_r+0x7a>
 80027ea:	89a3      	ldrh	r3, [r4, #12]
 80027ec:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80027f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80027f4:	d003      	beq.n	80027fe <__swsetup_r+0x7a>
 80027f6:	4621      	mov	r1, r4
 80027f8:	4628      	mov	r0, r5
 80027fa:	f000 fa58 	bl	8002cae <__smakebuf_r>
 80027fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002802:	f013 0201 	ands.w	r2, r3, #1
 8002806:	d00a      	beq.n	800281e <__swsetup_r+0x9a>
 8002808:	2200      	movs	r2, #0
 800280a:	60a2      	str	r2, [r4, #8]
 800280c:	6962      	ldr	r2, [r4, #20]
 800280e:	4252      	negs	r2, r2
 8002810:	61a2      	str	r2, [r4, #24]
 8002812:	6922      	ldr	r2, [r4, #16]
 8002814:	b942      	cbnz	r2, 8002828 <__swsetup_r+0xa4>
 8002816:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800281a:	d1c5      	bne.n	80027a8 <__swsetup_r+0x24>
 800281c:	bd38      	pop	{r3, r4, r5, pc}
 800281e:	0799      	lsls	r1, r3, #30
 8002820:	bf58      	it	pl
 8002822:	6962      	ldrpl	r2, [r4, #20]
 8002824:	60a2      	str	r2, [r4, #8]
 8002826:	e7f4      	b.n	8002812 <__swsetup_r+0x8e>
 8002828:	2000      	movs	r0, #0
 800282a:	e7f7      	b.n	800281c <__swsetup_r+0x98>
 800282c:	20000018 	.word	0x20000018

08002830 <memset>:
 8002830:	4603      	mov	r3, r0
 8002832:	4402      	add	r2, r0
 8002834:	4293      	cmp	r3, r2
 8002836:	d100      	bne.n	800283a <memset+0xa>
 8002838:	4770      	bx	lr
 800283a:	f803 1b01 	strb.w	r1, [r3], #1
 800283e:	e7f9      	b.n	8002834 <memset+0x4>

08002840 <_close_r>:
 8002840:	b538      	push	{r3, r4, r5, lr}
 8002842:	2300      	movs	r3, #0
 8002844:	4d05      	ldr	r5, [pc, #20]	@ (800285c <_close_r+0x1c>)
 8002846:	4604      	mov	r4, r0
 8002848:	4608      	mov	r0, r1
 800284a:	602b      	str	r3, [r5, #0]
 800284c:	f7fd fe85 	bl	800055a <_close>
 8002850:	1c43      	adds	r3, r0, #1
 8002852:	d102      	bne.n	800285a <_close_r+0x1a>
 8002854:	682b      	ldr	r3, [r5, #0]
 8002856:	b103      	cbz	r3, 800285a <_close_r+0x1a>
 8002858:	6023      	str	r3, [r4, #0]
 800285a:	bd38      	pop	{r3, r4, r5, pc}
 800285c:	20000218 	.word	0x20000218

08002860 <_lseek_r>:
 8002860:	b538      	push	{r3, r4, r5, lr}
 8002862:	4604      	mov	r4, r0
 8002864:	4608      	mov	r0, r1
 8002866:	4611      	mov	r1, r2
 8002868:	2200      	movs	r2, #0
 800286a:	4d05      	ldr	r5, [pc, #20]	@ (8002880 <_lseek_r+0x20>)
 800286c:	602a      	str	r2, [r5, #0]
 800286e:	461a      	mov	r2, r3
 8002870:	f7fd fe97 	bl	80005a2 <_lseek>
 8002874:	1c43      	adds	r3, r0, #1
 8002876:	d102      	bne.n	800287e <_lseek_r+0x1e>
 8002878:	682b      	ldr	r3, [r5, #0]
 800287a:	b103      	cbz	r3, 800287e <_lseek_r+0x1e>
 800287c:	6023      	str	r3, [r4, #0]
 800287e:	bd38      	pop	{r3, r4, r5, pc}
 8002880:	20000218 	.word	0x20000218

08002884 <_read_r>:
 8002884:	b538      	push	{r3, r4, r5, lr}
 8002886:	4604      	mov	r4, r0
 8002888:	4608      	mov	r0, r1
 800288a:	4611      	mov	r1, r2
 800288c:	2200      	movs	r2, #0
 800288e:	4d05      	ldr	r5, [pc, #20]	@ (80028a4 <_read_r+0x20>)
 8002890:	602a      	str	r2, [r5, #0]
 8002892:	461a      	mov	r2, r3
 8002894:	f7fd fe28 	bl	80004e8 <_read>
 8002898:	1c43      	adds	r3, r0, #1
 800289a:	d102      	bne.n	80028a2 <_read_r+0x1e>
 800289c:	682b      	ldr	r3, [r5, #0]
 800289e:	b103      	cbz	r3, 80028a2 <_read_r+0x1e>
 80028a0:	6023      	str	r3, [r4, #0]
 80028a2:	bd38      	pop	{r3, r4, r5, pc}
 80028a4:	20000218 	.word	0x20000218

080028a8 <_write_r>:
 80028a8:	b538      	push	{r3, r4, r5, lr}
 80028aa:	4604      	mov	r4, r0
 80028ac:	4608      	mov	r0, r1
 80028ae:	4611      	mov	r1, r2
 80028b0:	2200      	movs	r2, #0
 80028b2:	4d05      	ldr	r5, [pc, #20]	@ (80028c8 <_write_r+0x20>)
 80028b4:	602a      	str	r2, [r5, #0]
 80028b6:	461a      	mov	r2, r3
 80028b8:	f7fd fe33 	bl	8000522 <_write>
 80028bc:	1c43      	adds	r3, r0, #1
 80028be:	d102      	bne.n	80028c6 <_write_r+0x1e>
 80028c0:	682b      	ldr	r3, [r5, #0]
 80028c2:	b103      	cbz	r3, 80028c6 <_write_r+0x1e>
 80028c4:	6023      	str	r3, [r4, #0]
 80028c6:	bd38      	pop	{r3, r4, r5, pc}
 80028c8:	20000218 	.word	0x20000218

080028cc <__errno>:
 80028cc:	4b01      	ldr	r3, [pc, #4]	@ (80028d4 <__errno+0x8>)
 80028ce:	6818      	ldr	r0, [r3, #0]
 80028d0:	4770      	bx	lr
 80028d2:	bf00      	nop
 80028d4:	20000018 	.word	0x20000018

080028d8 <__libc_init_array>:
 80028d8:	b570      	push	{r4, r5, r6, lr}
 80028da:	2600      	movs	r6, #0
 80028dc:	4d0c      	ldr	r5, [pc, #48]	@ (8002910 <__libc_init_array+0x38>)
 80028de:	4c0d      	ldr	r4, [pc, #52]	@ (8002914 <__libc_init_array+0x3c>)
 80028e0:	1b64      	subs	r4, r4, r5
 80028e2:	10a4      	asrs	r4, r4, #2
 80028e4:	42a6      	cmp	r6, r4
 80028e6:	d109      	bne.n	80028fc <__libc_init_array+0x24>
 80028e8:	f000 fa50 	bl	8002d8c <_init>
 80028ec:	2600      	movs	r6, #0
 80028ee:	4d0a      	ldr	r5, [pc, #40]	@ (8002918 <__libc_init_array+0x40>)
 80028f0:	4c0a      	ldr	r4, [pc, #40]	@ (800291c <__libc_init_array+0x44>)
 80028f2:	1b64      	subs	r4, r4, r5
 80028f4:	10a4      	asrs	r4, r4, #2
 80028f6:	42a6      	cmp	r6, r4
 80028f8:	d105      	bne.n	8002906 <__libc_init_array+0x2e>
 80028fa:	bd70      	pop	{r4, r5, r6, pc}
 80028fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8002900:	4798      	blx	r3
 8002902:	3601      	adds	r6, #1
 8002904:	e7ee      	b.n	80028e4 <__libc_init_array+0xc>
 8002906:	f855 3b04 	ldr.w	r3, [r5], #4
 800290a:	4798      	blx	r3
 800290c:	3601      	adds	r6, #1
 800290e:	e7f2      	b.n	80028f6 <__libc_init_array+0x1e>
 8002910:	08002e24 	.word	0x08002e24
 8002914:	08002e24 	.word	0x08002e24
 8002918:	08002e24 	.word	0x08002e24
 800291c:	08002e28 	.word	0x08002e28

08002920 <__retarget_lock_init_recursive>:
 8002920:	4770      	bx	lr

08002922 <__retarget_lock_acquire_recursive>:
 8002922:	4770      	bx	lr

08002924 <__retarget_lock_release_recursive>:
 8002924:	4770      	bx	lr
	...

08002928 <_free_r>:
 8002928:	b538      	push	{r3, r4, r5, lr}
 800292a:	4605      	mov	r5, r0
 800292c:	2900      	cmp	r1, #0
 800292e:	d040      	beq.n	80029b2 <_free_r+0x8a>
 8002930:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002934:	1f0c      	subs	r4, r1, #4
 8002936:	2b00      	cmp	r3, #0
 8002938:	bfb8      	it	lt
 800293a:	18e4      	addlt	r4, r4, r3
 800293c:	f000 f8de 	bl	8002afc <__malloc_lock>
 8002940:	4a1c      	ldr	r2, [pc, #112]	@ (80029b4 <_free_r+0x8c>)
 8002942:	6813      	ldr	r3, [r2, #0]
 8002944:	b933      	cbnz	r3, 8002954 <_free_r+0x2c>
 8002946:	6063      	str	r3, [r4, #4]
 8002948:	6014      	str	r4, [r2, #0]
 800294a:	4628      	mov	r0, r5
 800294c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002950:	f000 b8da 	b.w	8002b08 <__malloc_unlock>
 8002954:	42a3      	cmp	r3, r4
 8002956:	d908      	bls.n	800296a <_free_r+0x42>
 8002958:	6820      	ldr	r0, [r4, #0]
 800295a:	1821      	adds	r1, r4, r0
 800295c:	428b      	cmp	r3, r1
 800295e:	bf01      	itttt	eq
 8002960:	6819      	ldreq	r1, [r3, #0]
 8002962:	685b      	ldreq	r3, [r3, #4]
 8002964:	1809      	addeq	r1, r1, r0
 8002966:	6021      	streq	r1, [r4, #0]
 8002968:	e7ed      	b.n	8002946 <_free_r+0x1e>
 800296a:	461a      	mov	r2, r3
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	b10b      	cbz	r3, 8002974 <_free_r+0x4c>
 8002970:	42a3      	cmp	r3, r4
 8002972:	d9fa      	bls.n	800296a <_free_r+0x42>
 8002974:	6811      	ldr	r1, [r2, #0]
 8002976:	1850      	adds	r0, r2, r1
 8002978:	42a0      	cmp	r0, r4
 800297a:	d10b      	bne.n	8002994 <_free_r+0x6c>
 800297c:	6820      	ldr	r0, [r4, #0]
 800297e:	4401      	add	r1, r0
 8002980:	1850      	adds	r0, r2, r1
 8002982:	4283      	cmp	r3, r0
 8002984:	6011      	str	r1, [r2, #0]
 8002986:	d1e0      	bne.n	800294a <_free_r+0x22>
 8002988:	6818      	ldr	r0, [r3, #0]
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	4408      	add	r0, r1
 800298e:	6010      	str	r0, [r2, #0]
 8002990:	6053      	str	r3, [r2, #4]
 8002992:	e7da      	b.n	800294a <_free_r+0x22>
 8002994:	d902      	bls.n	800299c <_free_r+0x74>
 8002996:	230c      	movs	r3, #12
 8002998:	602b      	str	r3, [r5, #0]
 800299a:	e7d6      	b.n	800294a <_free_r+0x22>
 800299c:	6820      	ldr	r0, [r4, #0]
 800299e:	1821      	adds	r1, r4, r0
 80029a0:	428b      	cmp	r3, r1
 80029a2:	bf01      	itttt	eq
 80029a4:	6819      	ldreq	r1, [r3, #0]
 80029a6:	685b      	ldreq	r3, [r3, #4]
 80029a8:	1809      	addeq	r1, r1, r0
 80029aa:	6021      	streq	r1, [r4, #0]
 80029ac:	6063      	str	r3, [r4, #4]
 80029ae:	6054      	str	r4, [r2, #4]
 80029b0:	e7cb      	b.n	800294a <_free_r+0x22>
 80029b2:	bd38      	pop	{r3, r4, r5, pc}
 80029b4:	20000224 	.word	0x20000224

080029b8 <sbrk_aligned>:
 80029b8:	b570      	push	{r4, r5, r6, lr}
 80029ba:	4e0f      	ldr	r6, [pc, #60]	@ (80029f8 <sbrk_aligned+0x40>)
 80029bc:	460c      	mov	r4, r1
 80029be:	6831      	ldr	r1, [r6, #0]
 80029c0:	4605      	mov	r5, r0
 80029c2:	b911      	cbnz	r1, 80029ca <sbrk_aligned+0x12>
 80029c4:	f000 f9d2 	bl	8002d6c <_sbrk_r>
 80029c8:	6030      	str	r0, [r6, #0]
 80029ca:	4621      	mov	r1, r4
 80029cc:	4628      	mov	r0, r5
 80029ce:	f000 f9cd 	bl	8002d6c <_sbrk_r>
 80029d2:	1c43      	adds	r3, r0, #1
 80029d4:	d103      	bne.n	80029de <sbrk_aligned+0x26>
 80029d6:	f04f 34ff 	mov.w	r4, #4294967295
 80029da:	4620      	mov	r0, r4
 80029dc:	bd70      	pop	{r4, r5, r6, pc}
 80029de:	1cc4      	adds	r4, r0, #3
 80029e0:	f024 0403 	bic.w	r4, r4, #3
 80029e4:	42a0      	cmp	r0, r4
 80029e6:	d0f8      	beq.n	80029da <sbrk_aligned+0x22>
 80029e8:	1a21      	subs	r1, r4, r0
 80029ea:	4628      	mov	r0, r5
 80029ec:	f000 f9be 	bl	8002d6c <_sbrk_r>
 80029f0:	3001      	adds	r0, #1
 80029f2:	d1f2      	bne.n	80029da <sbrk_aligned+0x22>
 80029f4:	e7ef      	b.n	80029d6 <sbrk_aligned+0x1e>
 80029f6:	bf00      	nop
 80029f8:	20000220 	.word	0x20000220

080029fc <_malloc_r>:
 80029fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002a00:	1ccd      	adds	r5, r1, #3
 8002a02:	f025 0503 	bic.w	r5, r5, #3
 8002a06:	3508      	adds	r5, #8
 8002a08:	2d0c      	cmp	r5, #12
 8002a0a:	bf38      	it	cc
 8002a0c:	250c      	movcc	r5, #12
 8002a0e:	2d00      	cmp	r5, #0
 8002a10:	4606      	mov	r6, r0
 8002a12:	db01      	blt.n	8002a18 <_malloc_r+0x1c>
 8002a14:	42a9      	cmp	r1, r5
 8002a16:	d904      	bls.n	8002a22 <_malloc_r+0x26>
 8002a18:	230c      	movs	r3, #12
 8002a1a:	6033      	str	r3, [r6, #0]
 8002a1c:	2000      	movs	r0, #0
 8002a1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002a22:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002af8 <_malloc_r+0xfc>
 8002a26:	f000 f869 	bl	8002afc <__malloc_lock>
 8002a2a:	f8d8 3000 	ldr.w	r3, [r8]
 8002a2e:	461c      	mov	r4, r3
 8002a30:	bb44      	cbnz	r4, 8002a84 <_malloc_r+0x88>
 8002a32:	4629      	mov	r1, r5
 8002a34:	4630      	mov	r0, r6
 8002a36:	f7ff ffbf 	bl	80029b8 <sbrk_aligned>
 8002a3a:	1c43      	adds	r3, r0, #1
 8002a3c:	4604      	mov	r4, r0
 8002a3e:	d158      	bne.n	8002af2 <_malloc_r+0xf6>
 8002a40:	f8d8 4000 	ldr.w	r4, [r8]
 8002a44:	4627      	mov	r7, r4
 8002a46:	2f00      	cmp	r7, #0
 8002a48:	d143      	bne.n	8002ad2 <_malloc_r+0xd6>
 8002a4a:	2c00      	cmp	r4, #0
 8002a4c:	d04b      	beq.n	8002ae6 <_malloc_r+0xea>
 8002a4e:	6823      	ldr	r3, [r4, #0]
 8002a50:	4639      	mov	r1, r7
 8002a52:	4630      	mov	r0, r6
 8002a54:	eb04 0903 	add.w	r9, r4, r3
 8002a58:	f000 f988 	bl	8002d6c <_sbrk_r>
 8002a5c:	4581      	cmp	r9, r0
 8002a5e:	d142      	bne.n	8002ae6 <_malloc_r+0xea>
 8002a60:	6821      	ldr	r1, [r4, #0]
 8002a62:	4630      	mov	r0, r6
 8002a64:	1a6d      	subs	r5, r5, r1
 8002a66:	4629      	mov	r1, r5
 8002a68:	f7ff ffa6 	bl	80029b8 <sbrk_aligned>
 8002a6c:	3001      	adds	r0, #1
 8002a6e:	d03a      	beq.n	8002ae6 <_malloc_r+0xea>
 8002a70:	6823      	ldr	r3, [r4, #0]
 8002a72:	442b      	add	r3, r5
 8002a74:	6023      	str	r3, [r4, #0]
 8002a76:	f8d8 3000 	ldr.w	r3, [r8]
 8002a7a:	685a      	ldr	r2, [r3, #4]
 8002a7c:	bb62      	cbnz	r2, 8002ad8 <_malloc_r+0xdc>
 8002a7e:	f8c8 7000 	str.w	r7, [r8]
 8002a82:	e00f      	b.n	8002aa4 <_malloc_r+0xa8>
 8002a84:	6822      	ldr	r2, [r4, #0]
 8002a86:	1b52      	subs	r2, r2, r5
 8002a88:	d420      	bmi.n	8002acc <_malloc_r+0xd0>
 8002a8a:	2a0b      	cmp	r2, #11
 8002a8c:	d917      	bls.n	8002abe <_malloc_r+0xc2>
 8002a8e:	1961      	adds	r1, r4, r5
 8002a90:	42a3      	cmp	r3, r4
 8002a92:	6025      	str	r5, [r4, #0]
 8002a94:	bf18      	it	ne
 8002a96:	6059      	strne	r1, [r3, #4]
 8002a98:	6863      	ldr	r3, [r4, #4]
 8002a9a:	bf08      	it	eq
 8002a9c:	f8c8 1000 	streq.w	r1, [r8]
 8002aa0:	5162      	str	r2, [r4, r5]
 8002aa2:	604b      	str	r3, [r1, #4]
 8002aa4:	4630      	mov	r0, r6
 8002aa6:	f000 f82f 	bl	8002b08 <__malloc_unlock>
 8002aaa:	f104 000b 	add.w	r0, r4, #11
 8002aae:	1d23      	adds	r3, r4, #4
 8002ab0:	f020 0007 	bic.w	r0, r0, #7
 8002ab4:	1ac2      	subs	r2, r0, r3
 8002ab6:	bf1c      	itt	ne
 8002ab8:	1a1b      	subne	r3, r3, r0
 8002aba:	50a3      	strne	r3, [r4, r2]
 8002abc:	e7af      	b.n	8002a1e <_malloc_r+0x22>
 8002abe:	6862      	ldr	r2, [r4, #4]
 8002ac0:	42a3      	cmp	r3, r4
 8002ac2:	bf0c      	ite	eq
 8002ac4:	f8c8 2000 	streq.w	r2, [r8]
 8002ac8:	605a      	strne	r2, [r3, #4]
 8002aca:	e7eb      	b.n	8002aa4 <_malloc_r+0xa8>
 8002acc:	4623      	mov	r3, r4
 8002ace:	6864      	ldr	r4, [r4, #4]
 8002ad0:	e7ae      	b.n	8002a30 <_malloc_r+0x34>
 8002ad2:	463c      	mov	r4, r7
 8002ad4:	687f      	ldr	r7, [r7, #4]
 8002ad6:	e7b6      	b.n	8002a46 <_malloc_r+0x4a>
 8002ad8:	461a      	mov	r2, r3
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	42a3      	cmp	r3, r4
 8002ade:	d1fb      	bne.n	8002ad8 <_malloc_r+0xdc>
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	6053      	str	r3, [r2, #4]
 8002ae4:	e7de      	b.n	8002aa4 <_malloc_r+0xa8>
 8002ae6:	230c      	movs	r3, #12
 8002ae8:	4630      	mov	r0, r6
 8002aea:	6033      	str	r3, [r6, #0]
 8002aec:	f000 f80c 	bl	8002b08 <__malloc_unlock>
 8002af0:	e794      	b.n	8002a1c <_malloc_r+0x20>
 8002af2:	6005      	str	r5, [r0, #0]
 8002af4:	e7d6      	b.n	8002aa4 <_malloc_r+0xa8>
 8002af6:	bf00      	nop
 8002af8:	20000224 	.word	0x20000224

08002afc <__malloc_lock>:
 8002afc:	4801      	ldr	r0, [pc, #4]	@ (8002b04 <__malloc_lock+0x8>)
 8002afe:	f7ff bf10 	b.w	8002922 <__retarget_lock_acquire_recursive>
 8002b02:	bf00      	nop
 8002b04:	2000021c 	.word	0x2000021c

08002b08 <__malloc_unlock>:
 8002b08:	4801      	ldr	r0, [pc, #4]	@ (8002b10 <__malloc_unlock+0x8>)
 8002b0a:	f7ff bf0b 	b.w	8002924 <__retarget_lock_release_recursive>
 8002b0e:	bf00      	nop
 8002b10:	2000021c 	.word	0x2000021c

08002b14 <__sflush_r>:
 8002b14:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002b18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b1a:	0716      	lsls	r6, r2, #28
 8002b1c:	4605      	mov	r5, r0
 8002b1e:	460c      	mov	r4, r1
 8002b20:	d454      	bmi.n	8002bcc <__sflush_r+0xb8>
 8002b22:	684b      	ldr	r3, [r1, #4]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	dc02      	bgt.n	8002b2e <__sflush_r+0x1a>
 8002b28:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	dd48      	ble.n	8002bc0 <__sflush_r+0xac>
 8002b2e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002b30:	2e00      	cmp	r6, #0
 8002b32:	d045      	beq.n	8002bc0 <__sflush_r+0xac>
 8002b34:	2300      	movs	r3, #0
 8002b36:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8002b3a:	682f      	ldr	r7, [r5, #0]
 8002b3c:	6a21      	ldr	r1, [r4, #32]
 8002b3e:	602b      	str	r3, [r5, #0]
 8002b40:	d030      	beq.n	8002ba4 <__sflush_r+0x90>
 8002b42:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8002b44:	89a3      	ldrh	r3, [r4, #12]
 8002b46:	0759      	lsls	r1, r3, #29
 8002b48:	d505      	bpl.n	8002b56 <__sflush_r+0x42>
 8002b4a:	6863      	ldr	r3, [r4, #4]
 8002b4c:	1ad2      	subs	r2, r2, r3
 8002b4e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8002b50:	b10b      	cbz	r3, 8002b56 <__sflush_r+0x42>
 8002b52:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002b54:	1ad2      	subs	r2, r2, r3
 8002b56:	2300      	movs	r3, #0
 8002b58:	4628      	mov	r0, r5
 8002b5a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002b5c:	6a21      	ldr	r1, [r4, #32]
 8002b5e:	47b0      	blx	r6
 8002b60:	1c43      	adds	r3, r0, #1
 8002b62:	89a3      	ldrh	r3, [r4, #12]
 8002b64:	d106      	bne.n	8002b74 <__sflush_r+0x60>
 8002b66:	6829      	ldr	r1, [r5, #0]
 8002b68:	291d      	cmp	r1, #29
 8002b6a:	d82b      	bhi.n	8002bc4 <__sflush_r+0xb0>
 8002b6c:	4a28      	ldr	r2, [pc, #160]	@ (8002c10 <__sflush_r+0xfc>)
 8002b6e:	410a      	asrs	r2, r1
 8002b70:	07d6      	lsls	r6, r2, #31
 8002b72:	d427      	bmi.n	8002bc4 <__sflush_r+0xb0>
 8002b74:	2200      	movs	r2, #0
 8002b76:	6062      	str	r2, [r4, #4]
 8002b78:	6922      	ldr	r2, [r4, #16]
 8002b7a:	04d9      	lsls	r1, r3, #19
 8002b7c:	6022      	str	r2, [r4, #0]
 8002b7e:	d504      	bpl.n	8002b8a <__sflush_r+0x76>
 8002b80:	1c42      	adds	r2, r0, #1
 8002b82:	d101      	bne.n	8002b88 <__sflush_r+0x74>
 8002b84:	682b      	ldr	r3, [r5, #0]
 8002b86:	b903      	cbnz	r3, 8002b8a <__sflush_r+0x76>
 8002b88:	6560      	str	r0, [r4, #84]	@ 0x54
 8002b8a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002b8c:	602f      	str	r7, [r5, #0]
 8002b8e:	b1b9      	cbz	r1, 8002bc0 <__sflush_r+0xac>
 8002b90:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002b94:	4299      	cmp	r1, r3
 8002b96:	d002      	beq.n	8002b9e <__sflush_r+0x8a>
 8002b98:	4628      	mov	r0, r5
 8002b9a:	f7ff fec5 	bl	8002928 <_free_r>
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	6363      	str	r3, [r4, #52]	@ 0x34
 8002ba2:	e00d      	b.n	8002bc0 <__sflush_r+0xac>
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	4628      	mov	r0, r5
 8002ba8:	47b0      	blx	r6
 8002baa:	4602      	mov	r2, r0
 8002bac:	1c50      	adds	r0, r2, #1
 8002bae:	d1c9      	bne.n	8002b44 <__sflush_r+0x30>
 8002bb0:	682b      	ldr	r3, [r5, #0]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d0c6      	beq.n	8002b44 <__sflush_r+0x30>
 8002bb6:	2b1d      	cmp	r3, #29
 8002bb8:	d001      	beq.n	8002bbe <__sflush_r+0xaa>
 8002bba:	2b16      	cmp	r3, #22
 8002bbc:	d11d      	bne.n	8002bfa <__sflush_r+0xe6>
 8002bbe:	602f      	str	r7, [r5, #0]
 8002bc0:	2000      	movs	r0, #0
 8002bc2:	e021      	b.n	8002c08 <__sflush_r+0xf4>
 8002bc4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002bc8:	b21b      	sxth	r3, r3
 8002bca:	e01a      	b.n	8002c02 <__sflush_r+0xee>
 8002bcc:	690f      	ldr	r7, [r1, #16]
 8002bce:	2f00      	cmp	r7, #0
 8002bd0:	d0f6      	beq.n	8002bc0 <__sflush_r+0xac>
 8002bd2:	0793      	lsls	r3, r2, #30
 8002bd4:	bf18      	it	ne
 8002bd6:	2300      	movne	r3, #0
 8002bd8:	680e      	ldr	r6, [r1, #0]
 8002bda:	bf08      	it	eq
 8002bdc:	694b      	ldreq	r3, [r1, #20]
 8002bde:	1bf6      	subs	r6, r6, r7
 8002be0:	600f      	str	r7, [r1, #0]
 8002be2:	608b      	str	r3, [r1, #8]
 8002be4:	2e00      	cmp	r6, #0
 8002be6:	ddeb      	ble.n	8002bc0 <__sflush_r+0xac>
 8002be8:	4633      	mov	r3, r6
 8002bea:	463a      	mov	r2, r7
 8002bec:	4628      	mov	r0, r5
 8002bee:	6a21      	ldr	r1, [r4, #32]
 8002bf0:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8002bf4:	47e0      	blx	ip
 8002bf6:	2800      	cmp	r0, #0
 8002bf8:	dc07      	bgt.n	8002c0a <__sflush_r+0xf6>
 8002bfa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002bfe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002c02:	f04f 30ff 	mov.w	r0, #4294967295
 8002c06:	81a3      	strh	r3, [r4, #12]
 8002c08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002c0a:	4407      	add	r7, r0
 8002c0c:	1a36      	subs	r6, r6, r0
 8002c0e:	e7e9      	b.n	8002be4 <__sflush_r+0xd0>
 8002c10:	dfbffffe 	.word	0xdfbffffe

08002c14 <_fflush_r>:
 8002c14:	b538      	push	{r3, r4, r5, lr}
 8002c16:	690b      	ldr	r3, [r1, #16]
 8002c18:	4605      	mov	r5, r0
 8002c1a:	460c      	mov	r4, r1
 8002c1c:	b913      	cbnz	r3, 8002c24 <_fflush_r+0x10>
 8002c1e:	2500      	movs	r5, #0
 8002c20:	4628      	mov	r0, r5
 8002c22:	bd38      	pop	{r3, r4, r5, pc}
 8002c24:	b118      	cbz	r0, 8002c2e <_fflush_r+0x1a>
 8002c26:	6a03      	ldr	r3, [r0, #32]
 8002c28:	b90b      	cbnz	r3, 8002c2e <_fflush_r+0x1a>
 8002c2a:	f7ff fc95 	bl	8002558 <__sinit>
 8002c2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d0f3      	beq.n	8002c1e <_fflush_r+0xa>
 8002c36:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8002c38:	07d0      	lsls	r0, r2, #31
 8002c3a:	d404      	bmi.n	8002c46 <_fflush_r+0x32>
 8002c3c:	0599      	lsls	r1, r3, #22
 8002c3e:	d402      	bmi.n	8002c46 <_fflush_r+0x32>
 8002c40:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002c42:	f7ff fe6e 	bl	8002922 <__retarget_lock_acquire_recursive>
 8002c46:	4628      	mov	r0, r5
 8002c48:	4621      	mov	r1, r4
 8002c4a:	f7ff ff63 	bl	8002b14 <__sflush_r>
 8002c4e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002c50:	4605      	mov	r5, r0
 8002c52:	07da      	lsls	r2, r3, #31
 8002c54:	d4e4      	bmi.n	8002c20 <_fflush_r+0xc>
 8002c56:	89a3      	ldrh	r3, [r4, #12]
 8002c58:	059b      	lsls	r3, r3, #22
 8002c5a:	d4e1      	bmi.n	8002c20 <_fflush_r+0xc>
 8002c5c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002c5e:	f7ff fe61 	bl	8002924 <__retarget_lock_release_recursive>
 8002c62:	e7dd      	b.n	8002c20 <_fflush_r+0xc>

08002c64 <__swhatbuf_r>:
 8002c64:	b570      	push	{r4, r5, r6, lr}
 8002c66:	460c      	mov	r4, r1
 8002c68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002c6c:	4615      	mov	r5, r2
 8002c6e:	2900      	cmp	r1, #0
 8002c70:	461e      	mov	r6, r3
 8002c72:	b096      	sub	sp, #88	@ 0x58
 8002c74:	da0c      	bge.n	8002c90 <__swhatbuf_r+0x2c>
 8002c76:	89a3      	ldrh	r3, [r4, #12]
 8002c78:	2100      	movs	r1, #0
 8002c7a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8002c7e:	bf14      	ite	ne
 8002c80:	2340      	movne	r3, #64	@ 0x40
 8002c82:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8002c86:	2000      	movs	r0, #0
 8002c88:	6031      	str	r1, [r6, #0]
 8002c8a:	602b      	str	r3, [r5, #0]
 8002c8c:	b016      	add	sp, #88	@ 0x58
 8002c8e:	bd70      	pop	{r4, r5, r6, pc}
 8002c90:	466a      	mov	r2, sp
 8002c92:	f000 f849 	bl	8002d28 <_fstat_r>
 8002c96:	2800      	cmp	r0, #0
 8002c98:	dbed      	blt.n	8002c76 <__swhatbuf_r+0x12>
 8002c9a:	9901      	ldr	r1, [sp, #4]
 8002c9c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8002ca0:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8002ca4:	4259      	negs	r1, r3
 8002ca6:	4159      	adcs	r1, r3
 8002ca8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002cac:	e7eb      	b.n	8002c86 <__swhatbuf_r+0x22>

08002cae <__smakebuf_r>:
 8002cae:	898b      	ldrh	r3, [r1, #12]
 8002cb0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002cb2:	079d      	lsls	r5, r3, #30
 8002cb4:	4606      	mov	r6, r0
 8002cb6:	460c      	mov	r4, r1
 8002cb8:	d507      	bpl.n	8002cca <__smakebuf_r+0x1c>
 8002cba:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8002cbe:	6023      	str	r3, [r4, #0]
 8002cc0:	6123      	str	r3, [r4, #16]
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	6163      	str	r3, [r4, #20]
 8002cc6:	b003      	add	sp, #12
 8002cc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002cca:	466a      	mov	r2, sp
 8002ccc:	ab01      	add	r3, sp, #4
 8002cce:	f7ff ffc9 	bl	8002c64 <__swhatbuf_r>
 8002cd2:	9f00      	ldr	r7, [sp, #0]
 8002cd4:	4605      	mov	r5, r0
 8002cd6:	4639      	mov	r1, r7
 8002cd8:	4630      	mov	r0, r6
 8002cda:	f7ff fe8f 	bl	80029fc <_malloc_r>
 8002cde:	b948      	cbnz	r0, 8002cf4 <__smakebuf_r+0x46>
 8002ce0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002ce4:	059a      	lsls	r2, r3, #22
 8002ce6:	d4ee      	bmi.n	8002cc6 <__smakebuf_r+0x18>
 8002ce8:	f023 0303 	bic.w	r3, r3, #3
 8002cec:	f043 0302 	orr.w	r3, r3, #2
 8002cf0:	81a3      	strh	r3, [r4, #12]
 8002cf2:	e7e2      	b.n	8002cba <__smakebuf_r+0xc>
 8002cf4:	89a3      	ldrh	r3, [r4, #12]
 8002cf6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8002cfa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002cfe:	81a3      	strh	r3, [r4, #12]
 8002d00:	9b01      	ldr	r3, [sp, #4]
 8002d02:	6020      	str	r0, [r4, #0]
 8002d04:	b15b      	cbz	r3, 8002d1e <__smakebuf_r+0x70>
 8002d06:	4630      	mov	r0, r6
 8002d08:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002d0c:	f000 f81e 	bl	8002d4c <_isatty_r>
 8002d10:	b128      	cbz	r0, 8002d1e <__smakebuf_r+0x70>
 8002d12:	89a3      	ldrh	r3, [r4, #12]
 8002d14:	f023 0303 	bic.w	r3, r3, #3
 8002d18:	f043 0301 	orr.w	r3, r3, #1
 8002d1c:	81a3      	strh	r3, [r4, #12]
 8002d1e:	89a3      	ldrh	r3, [r4, #12]
 8002d20:	431d      	orrs	r5, r3
 8002d22:	81a5      	strh	r5, [r4, #12]
 8002d24:	e7cf      	b.n	8002cc6 <__smakebuf_r+0x18>
	...

08002d28 <_fstat_r>:
 8002d28:	b538      	push	{r3, r4, r5, lr}
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	4d06      	ldr	r5, [pc, #24]	@ (8002d48 <_fstat_r+0x20>)
 8002d2e:	4604      	mov	r4, r0
 8002d30:	4608      	mov	r0, r1
 8002d32:	4611      	mov	r1, r2
 8002d34:	602b      	str	r3, [r5, #0]
 8002d36:	f7fd fc1b 	bl	8000570 <_fstat>
 8002d3a:	1c43      	adds	r3, r0, #1
 8002d3c:	d102      	bne.n	8002d44 <_fstat_r+0x1c>
 8002d3e:	682b      	ldr	r3, [r5, #0]
 8002d40:	b103      	cbz	r3, 8002d44 <_fstat_r+0x1c>
 8002d42:	6023      	str	r3, [r4, #0]
 8002d44:	bd38      	pop	{r3, r4, r5, pc}
 8002d46:	bf00      	nop
 8002d48:	20000218 	.word	0x20000218

08002d4c <_isatty_r>:
 8002d4c:	b538      	push	{r3, r4, r5, lr}
 8002d4e:	2300      	movs	r3, #0
 8002d50:	4d05      	ldr	r5, [pc, #20]	@ (8002d68 <_isatty_r+0x1c>)
 8002d52:	4604      	mov	r4, r0
 8002d54:	4608      	mov	r0, r1
 8002d56:	602b      	str	r3, [r5, #0]
 8002d58:	f7fd fc19 	bl	800058e <_isatty>
 8002d5c:	1c43      	adds	r3, r0, #1
 8002d5e:	d102      	bne.n	8002d66 <_isatty_r+0x1a>
 8002d60:	682b      	ldr	r3, [r5, #0]
 8002d62:	b103      	cbz	r3, 8002d66 <_isatty_r+0x1a>
 8002d64:	6023      	str	r3, [r4, #0]
 8002d66:	bd38      	pop	{r3, r4, r5, pc}
 8002d68:	20000218 	.word	0x20000218

08002d6c <_sbrk_r>:
 8002d6c:	b538      	push	{r3, r4, r5, lr}
 8002d6e:	2300      	movs	r3, #0
 8002d70:	4d05      	ldr	r5, [pc, #20]	@ (8002d88 <_sbrk_r+0x1c>)
 8002d72:	4604      	mov	r4, r0
 8002d74:	4608      	mov	r0, r1
 8002d76:	602b      	str	r3, [r5, #0]
 8002d78:	f7fd fc20 	bl	80005bc <_sbrk>
 8002d7c:	1c43      	adds	r3, r0, #1
 8002d7e:	d102      	bne.n	8002d86 <_sbrk_r+0x1a>
 8002d80:	682b      	ldr	r3, [r5, #0]
 8002d82:	b103      	cbz	r3, 8002d86 <_sbrk_r+0x1a>
 8002d84:	6023      	str	r3, [r4, #0]
 8002d86:	bd38      	pop	{r3, r4, r5, pc}
 8002d88:	20000218 	.word	0x20000218

08002d8c <_init>:
 8002d8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d8e:	bf00      	nop
 8002d90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d92:	bc08      	pop	{r3}
 8002d94:	469e      	mov	lr, r3
 8002d96:	4770      	bx	lr

08002d98 <_fini>:
 8002d98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d9a:	bf00      	nop
 8002d9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d9e:	bc08      	pop	{r3}
 8002da0:	469e      	mov	lr, r3
 8002da2:	4770      	bx	lr
