
pwm_measurement.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000069d4  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003d0  08006ae8  08006ae8  00007ae8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006eb8  08006eb8  000081d4  2**0
                  CONTENTS
  4 .ARM          00000008  08006eb8  08006eb8  00007eb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006ec0  08006ec0  000081d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006ec0  08006ec0  00007ec0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006ec4  08006ec4  00007ec4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08006ec8  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000248  200001d4  0800709c  000081d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000041c  0800709c  0000841c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000081d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b3fd  00000000  00000000  000081fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a58  00000000  00000000  000135fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c20  00000000  00000000  00015058  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000979  00000000  00000000  00015c78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018560  00000000  00000000  000165f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d7d7  00000000  00000000  0002eb51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008bfbe  00000000  00000000  0003c328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c82e6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000447c  00000000  00000000  000c832c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  000cc7a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d4 	.word	0x200001d4
 800012c:	00000000 	.word	0x00000000
 8000130:	08006acc 	.word	0x08006acc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001d8 	.word	0x200001d8
 800014c:	08006acc 	.word	0x08006acc

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_frsub>:
 8000a88:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000a8c:	e002      	b.n	8000a94 <__addsf3>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_fsub>:
 8000a90:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000a94 <__addsf3>:
 8000a94:	0042      	lsls	r2, r0, #1
 8000a96:	bf1f      	itttt	ne
 8000a98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a9c:	ea92 0f03 	teqne	r2, r3
 8000aa0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa8:	d06a      	beq.n	8000b80 <__addsf3+0xec>
 8000aaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab2:	bfc1      	itttt	gt
 8000ab4:	18d2      	addgt	r2, r2, r3
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	4048      	eorgt	r0, r1
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	bfb8      	it	lt
 8000abe:	425b      	neglt	r3, r3
 8000ac0:	2b19      	cmp	r3, #25
 8000ac2:	bf88      	it	hi
 8000ac4:	4770      	bxhi	lr
 8000ac6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ace:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000ada:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000ade:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000ae2:	bf18      	it	ne
 8000ae4:	4249      	negne	r1, r1
 8000ae6:	ea92 0f03 	teq	r2, r3
 8000aea:	d03f      	beq.n	8000b6c <__addsf3+0xd8>
 8000aec:	f1a2 0201 	sub.w	r2, r2, #1
 8000af0:	fa41 fc03 	asr.w	ip, r1, r3
 8000af4:	eb10 000c 	adds.w	r0, r0, ip
 8000af8:	f1c3 0320 	rsb	r3, r3, #32
 8000afc:	fa01 f103 	lsl.w	r1, r1, r3
 8000b00:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b04:	d502      	bpl.n	8000b0c <__addsf3+0x78>
 8000b06:	4249      	negs	r1, r1
 8000b08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b0c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000b10:	d313      	bcc.n	8000b3a <__addsf3+0xa6>
 8000b12:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000b16:	d306      	bcc.n	8000b26 <__addsf3+0x92>
 8000b18:	0840      	lsrs	r0, r0, #1
 8000b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1e:	f102 0201 	add.w	r2, r2, #1
 8000b22:	2afe      	cmp	r2, #254	@ 0xfe
 8000b24:	d251      	bcs.n	8000bca <__addsf3+0x136>
 8000b26:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000b2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2e:	bf08      	it	eq
 8000b30:	f020 0001 	biceq.w	r0, r0, #1
 8000b34:	ea40 0003 	orr.w	r0, r0, r3
 8000b38:	4770      	bx	lr
 8000b3a:	0049      	lsls	r1, r1, #1
 8000b3c:	eb40 0000 	adc.w	r0, r0, r0
 8000b40:	3a01      	subs	r2, #1
 8000b42:	bf28      	it	cs
 8000b44:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000b48:	d2ed      	bcs.n	8000b26 <__addsf3+0x92>
 8000b4a:	fab0 fc80 	clz	ip, r0
 8000b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b52:	ebb2 020c 	subs.w	r2, r2, ip
 8000b56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5a:	bfaa      	itet	ge
 8000b5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b60:	4252      	neglt	r2, r2
 8000b62:	4318      	orrge	r0, r3
 8000b64:	bfbc      	itt	lt
 8000b66:	40d0      	lsrlt	r0, r2
 8000b68:	4318      	orrlt	r0, r3
 8000b6a:	4770      	bx	lr
 8000b6c:	f092 0f00 	teq	r2, #0
 8000b70:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000b74:	bf06      	itte	eq
 8000b76:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000b7a:	3201      	addeq	r2, #1
 8000b7c:	3b01      	subne	r3, #1
 8000b7e:	e7b5      	b.n	8000aec <__addsf3+0x58>
 8000b80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	bf18      	it	ne
 8000b8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8e:	d021      	beq.n	8000bd4 <__addsf3+0x140>
 8000b90:	ea92 0f03 	teq	r2, r3
 8000b94:	d004      	beq.n	8000ba0 <__addsf3+0x10c>
 8000b96:	f092 0f00 	teq	r2, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	4608      	moveq	r0, r1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea90 0f01 	teq	r0, r1
 8000ba4:	bf1c      	itt	ne
 8000ba6:	2000      	movne	r0, #0
 8000ba8:	4770      	bxne	lr
 8000baa:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000bae:	d104      	bne.n	8000bba <__addsf3+0x126>
 8000bb0:	0040      	lsls	r0, r0, #1
 8000bb2:	bf28      	it	cs
 8000bb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000bbe:	bf3c      	itt	cc
 8000bc0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000bc4:	4770      	bxcc	lr
 8000bc6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000bca:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000bce:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bd2:	4770      	bx	lr
 8000bd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd8:	bf16      	itet	ne
 8000bda:	4608      	movne	r0, r1
 8000bdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be0:	4601      	movne	r1, r0
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	bf06      	itte	eq
 8000be6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bea:	ea90 0f01 	teqeq	r0, r1
 8000bee:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_ui2f>:
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e004      	b.n	8000c04 <__aeabi_i2f+0x8>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_i2f>:
 8000bfc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000c00:	bf48      	it	mi
 8000c02:	4240      	negmi	r0, r0
 8000c04:	ea5f 0c00 	movs.w	ip, r0
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000c10:	4601      	mov	r1, r0
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	e01c      	b.n	8000c52 <__aeabi_l2f+0x2a>

08000c18 <__aeabi_ul2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e00a      	b.n	8000c3c <__aeabi_l2f+0x14>
 8000c26:	bf00      	nop

08000c28 <__aeabi_l2f>:
 8000c28:	ea50 0201 	orrs.w	r2, r0, r1
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__aeabi_l2f+0x14>
 8000c36:	4240      	negs	r0, r0
 8000c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3c:	ea5f 0c01 	movs.w	ip, r1
 8000c40:	bf02      	ittt	eq
 8000c42:	4684      	moveq	ip, r0
 8000c44:	4601      	moveq	r1, r0
 8000c46:	2000      	moveq	r0, #0
 8000c48:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000c4c:	bf08      	it	eq
 8000c4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000c52:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000c56:	fabc f28c 	clz	r2, ip
 8000c5a:	3a08      	subs	r2, #8
 8000c5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c60:	db10      	blt.n	8000c84 <__aeabi_l2f+0x5c>
 8000c62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c66:	4463      	add	r3, ip
 8000c68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	f020 0001 	biceq.w	r0, r0, #1
 8000c82:	4770      	bx	lr
 8000c84:	f102 0220 	add.w	r2, r2, #32
 8000c88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c94:	fa21 f202 	lsr.w	r2, r1, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca2:	4770      	bx	lr

08000ca4 <__aeabi_fmul>:
 8000ca4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ca8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cac:	bf1e      	ittt	ne
 8000cae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cb2:	ea92 0f0c 	teqne	r2, ip
 8000cb6:	ea93 0f0c 	teqne	r3, ip
 8000cba:	d06f      	beq.n	8000d9c <__aeabi_fmul+0xf8>
 8000cbc:	441a      	add	r2, r3
 8000cbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000cc2:	0240      	lsls	r0, r0, #9
 8000cc4:	bf18      	it	ne
 8000cc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cca:	d01e      	beq.n	8000d0a <__aeabi_fmul+0x66>
 8000ccc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000cd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000cdc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ce0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000ce4:	bf3e      	ittt	cc
 8000ce6:	0049      	lslcc	r1, r1, #1
 8000ce8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cec:	005b      	lslcc	r3, r3, #1
 8000cee:	ea40 0001 	orr.w	r0, r0, r1
 8000cf2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000cf6:	2afd      	cmp	r2, #253	@ 0xfd
 8000cf8:	d81d      	bhi.n	8000d36 <__aeabi_fmul+0x92>
 8000cfa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000cfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d02:	bf08      	it	eq
 8000d04:	f020 0001 	biceq.w	r0, r0, #1
 8000d08:	4770      	bx	lr
 8000d0a:	f090 0f00 	teq	r0, #0
 8000d0e:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000d12:	bf08      	it	eq
 8000d14:	0249      	lsleq	r1, r1, #9
 8000d16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d1e:	3a7f      	subs	r2, #127	@ 0x7f
 8000d20:	bfc2      	ittt	gt
 8000d22:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000d26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d2a:	4770      	bxgt	lr
 8000d2c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	3a01      	subs	r2, #1
 8000d36:	dc5d      	bgt.n	8000df4 <__aeabi_fmul+0x150>
 8000d38:	f112 0f19 	cmn.w	r2, #25
 8000d3c:	bfdc      	itt	le
 8000d3e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000d42:	4770      	bxle	lr
 8000d44:	f1c2 0200 	rsb	r2, r2, #0
 8000d48:	0041      	lsls	r1, r0, #1
 8000d4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d4e:	f1c2 0220 	rsb	r2, r2, #32
 8000d52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d5a:	f140 0000 	adc.w	r0, r0, #0
 8000d5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d62:	bf08      	it	eq
 8000d64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d68:	4770      	bx	lr
 8000d6a:	f092 0f00 	teq	r2, #0
 8000d6e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000d72:	bf02      	ittt	eq
 8000d74:	0040      	lsleq	r0, r0, #1
 8000d76:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000d7a:	3a01      	subeq	r2, #1
 8000d7c:	d0f9      	beq.n	8000d72 <__aeabi_fmul+0xce>
 8000d7e:	ea40 000c 	orr.w	r0, r0, ip
 8000d82:	f093 0f00 	teq	r3, #0
 8000d86:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000d8a:	bf02      	ittt	eq
 8000d8c:	0049      	lsleq	r1, r1, #1
 8000d8e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000d92:	3b01      	subeq	r3, #1
 8000d94:	d0f9      	beq.n	8000d8a <__aeabi_fmul+0xe6>
 8000d96:	ea41 010c 	orr.w	r1, r1, ip
 8000d9a:	e78f      	b.n	8000cbc <__aeabi_fmul+0x18>
 8000d9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000da0:	ea92 0f0c 	teq	r2, ip
 8000da4:	bf18      	it	ne
 8000da6:	ea93 0f0c 	teqne	r3, ip
 8000daa:	d00a      	beq.n	8000dc2 <__aeabi_fmul+0x11e>
 8000dac:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000db0:	bf18      	it	ne
 8000db2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000db6:	d1d8      	bne.n	8000d6a <__aeabi_fmul+0xc6>
 8000db8:	ea80 0001 	eor.w	r0, r0, r1
 8000dbc:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000dc0:	4770      	bx	lr
 8000dc2:	f090 0f00 	teq	r0, #0
 8000dc6:	bf17      	itett	ne
 8000dc8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000dcc:	4608      	moveq	r0, r1
 8000dce:	f091 0f00 	teqne	r1, #0
 8000dd2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000dd6:	d014      	beq.n	8000e02 <__aeabi_fmul+0x15e>
 8000dd8:	ea92 0f0c 	teq	r2, ip
 8000ddc:	d101      	bne.n	8000de2 <__aeabi_fmul+0x13e>
 8000dde:	0242      	lsls	r2, r0, #9
 8000de0:	d10f      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000de2:	ea93 0f0c 	teq	r3, ip
 8000de6:	d103      	bne.n	8000df0 <__aeabi_fmul+0x14c>
 8000de8:	024b      	lsls	r3, r1, #9
 8000dea:	bf18      	it	ne
 8000dec:	4608      	movne	r0, r1
 8000dee:	d108      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000df0:	ea80 0001 	eor.w	r0, r0, r1
 8000df4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000df8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e00:	4770      	bx	lr
 8000e02:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e06:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000e0a:	4770      	bx	lr

08000e0c <__aeabi_fdiv>:
 8000e0c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000e10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e14:	bf1e      	ittt	ne
 8000e16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e1a:	ea92 0f0c 	teqne	r2, ip
 8000e1e:	ea93 0f0c 	teqne	r3, ip
 8000e22:	d069      	beq.n	8000ef8 <__aeabi_fdiv+0xec>
 8000e24:	eba2 0203 	sub.w	r2, r2, r3
 8000e28:	ea80 0c01 	eor.w	ip, r0, r1
 8000e2c:	0249      	lsls	r1, r1, #9
 8000e2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e32:	d037      	beq.n	8000ea4 <__aeabi_fdiv+0x98>
 8000e34:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000e38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e40:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000e44:	428b      	cmp	r3, r1
 8000e46:	bf38      	it	cc
 8000e48:	005b      	lslcc	r3, r3, #1
 8000e4a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000e4e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000e52:	428b      	cmp	r3, r1
 8000e54:	bf24      	itt	cs
 8000e56:	1a5b      	subcs	r3, r3, r1
 8000e58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e60:	bf24      	itt	cs
 8000e62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e6e:	bf24      	itt	cs
 8000e70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e7c:	bf24      	itt	cs
 8000e7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e86:	011b      	lsls	r3, r3, #4
 8000e88:	bf18      	it	ne
 8000e8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e8e:	d1e0      	bne.n	8000e52 <__aeabi_fdiv+0x46>
 8000e90:	2afd      	cmp	r2, #253	@ 0xfd
 8000e92:	f63f af50 	bhi.w	8000d36 <__aeabi_fmul+0x92>
 8000e96:	428b      	cmp	r3, r1
 8000e98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e9c:	bf08      	it	eq
 8000e9e:	f020 0001 	biceq.w	r0, r0, #1
 8000ea2:	4770      	bx	lr
 8000ea4:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000ea8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eac:	327f      	adds	r2, #127	@ 0x7f
 8000eae:	bfc2      	ittt	gt
 8000eb0:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000eb4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eb8:	4770      	bxgt	lr
 8000eba:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ebe:	f04f 0300 	mov.w	r3, #0
 8000ec2:	3a01      	subs	r2, #1
 8000ec4:	e737      	b.n	8000d36 <__aeabi_fmul+0x92>
 8000ec6:	f092 0f00 	teq	r2, #0
 8000eca:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000ece:	bf02      	ittt	eq
 8000ed0:	0040      	lsleq	r0, r0, #1
 8000ed2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000ed6:	3a01      	subeq	r2, #1
 8000ed8:	d0f9      	beq.n	8000ece <__aeabi_fdiv+0xc2>
 8000eda:	ea40 000c 	orr.w	r0, r0, ip
 8000ede:	f093 0f00 	teq	r3, #0
 8000ee2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ee6:	bf02      	ittt	eq
 8000ee8:	0049      	lsleq	r1, r1, #1
 8000eea:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000eee:	3b01      	subeq	r3, #1
 8000ef0:	d0f9      	beq.n	8000ee6 <__aeabi_fdiv+0xda>
 8000ef2:	ea41 010c 	orr.w	r1, r1, ip
 8000ef6:	e795      	b.n	8000e24 <__aeabi_fdiv+0x18>
 8000ef8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000efc:	ea92 0f0c 	teq	r2, ip
 8000f00:	d108      	bne.n	8000f14 <__aeabi_fdiv+0x108>
 8000f02:	0242      	lsls	r2, r0, #9
 8000f04:	f47f af7d 	bne.w	8000e02 <__aeabi_fmul+0x15e>
 8000f08:	ea93 0f0c 	teq	r3, ip
 8000f0c:	f47f af70 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f10:	4608      	mov	r0, r1
 8000f12:	e776      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f14:	ea93 0f0c 	teq	r3, ip
 8000f18:	d104      	bne.n	8000f24 <__aeabi_fdiv+0x118>
 8000f1a:	024b      	lsls	r3, r1, #9
 8000f1c:	f43f af4c 	beq.w	8000db8 <__aeabi_fmul+0x114>
 8000f20:	4608      	mov	r0, r1
 8000f22:	e76e      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f24:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000f28:	bf18      	it	ne
 8000f2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000f2e:	d1ca      	bne.n	8000ec6 <__aeabi_fdiv+0xba>
 8000f30:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000f34:	f47f af5c 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f38:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000f3c:	f47f af3c 	bne.w	8000db8 <__aeabi_fmul+0x114>
 8000f40:	e75f      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f42:	bf00      	nop

08000f44 <uart_printf>:
/* USER CODE BEGIN 0 */
#include <stdarg.h>
#include <stdio.h>
#include <string.h>

static void uart_printf(const char *format, ...) {
 8000f44:	b40f      	push	{r0, r1, r2, r3}
 8000f46:	b580      	push	{r7, lr}
 8000f48:	b0a2      	sub	sp, #136	@ 0x88
 8000f4a:	af00      	add	r7, sp, #0
	char tmp[128];

	va_list argptr;
	va_start(argptr, format);
 8000f4c:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8000f50:	607b      	str	r3, [r7, #4]
	vsprintf((char *) tmp, format, argptr);
 8000f52:	f107 0308 	add.w	r3, r7, #8
 8000f56:	687a      	ldr	r2, [r7, #4]
 8000f58:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f003 fcd9 	bl	8004914 <vsiprintf>
	va_end(argptr);

	HAL_UART_Transmit(&huart1, (const uint8_t*) tmp, strlen(tmp), HAL_MAX_DELAY);
 8000f62:	f107 0308 	add.w	r3, r7, #8
 8000f66:	4618      	mov	r0, r3
 8000f68:	f7ff f8f2 	bl	8000150 <strlen>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	b29a      	uxth	r2, r3
 8000f70:	f107 0108 	add.w	r1, r7, #8
 8000f74:	f04f 33ff 	mov.w	r3, #4294967295
 8000f78:	4804      	ldr	r0, [pc, #16]	@ (8000f8c <uart_printf+0x48>)
 8000f7a:	f002 fd7f 	bl	8003a7c <HAL_UART_Transmit>
}
 8000f7e:	bf00      	nop
 8000f80:	3788      	adds	r7, #136	@ 0x88
 8000f82:	46bd      	mov	sp, r7
 8000f84:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000f88:	b004      	add	sp, #16
 8000f8a:	4770      	bx	lr
 8000f8c:	20000280 	.word	0x20000280

08000f90 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000f90:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000f94:	b088      	sub	sp, #32
 8000f96:	af04      	add	r7, sp, #16
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000f98:	f000 fc48 	bl	800182c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000f9c:	f000 f892 	bl	80010c4 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000fa0:	f000 fa0a 	bl	80013b8 <MX_GPIO_Init>
	MX_USART1_UART_Init();
 8000fa4:	f000 f9de 	bl	8001364 <MX_USART1_UART_Init>
	MX_TIM3_Init();
 8000fa8:	f000 f966 	bl	8001278 <MX_TIM3_Init>
	MX_TIM1_Init();
 8000fac:	f000 f8c6 	bl	800113c <MX_TIM1_Init>
	/* USER CODE BEGIN 2 */
	//HAL_UART_Transmit(&huart1, (const uint8_t*) "Hello, world!", 12,HAL_MAX_DELAY);
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000fb0:	2100      	movs	r1, #0
 8000fb2:	483e      	ldr	r0, [pc, #248]	@ (80010ac <main+0x11c>)
 8000fb4:	f001 fbe0 	bl	8002778 <HAL_TIM_PWM_Start>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		__HAL_TIM_CLEAR_FLAG(&htim1, TIM_FLAG_CC1);
 8000fb8:	4b3d      	ldr	r3, [pc, #244]	@ (80010b0 <main+0x120>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	f06f 0202 	mvn.w	r2, #2
 8000fc0:	611a      	str	r2, [r3, #16]

		HAL_TIM_IC_Start(&htim1, TIM_CHANNEL_1);
 8000fc2:	2100      	movs	r1, #0
 8000fc4:	483a      	ldr	r0, [pc, #232]	@ (80010b0 <main+0x120>)
 8000fc6:	f001 fcd1 	bl	800296c <HAL_TIM_IC_Start>
		HAL_TIM_IC_Start(&htim1, TIM_CHANNEL_2);
 8000fca:	2104      	movs	r1, #4
 8000fcc:	4838      	ldr	r0, [pc, #224]	@ (80010b0 <main+0x120>)
 8000fce:	f001 fccd 	bl	800296c <HAL_TIM_IC_Start>

		while (__HAL_TIM_GET_FLAG(&htim1, TIM_FLAG_CC1) == 0)
 8000fd2:	bf00      	nop
 8000fd4:	4b36      	ldr	r3, [pc, #216]	@ (80010b0 <main+0x120>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	691b      	ldr	r3, [r3, #16]
 8000fda:	f003 0302 	and.w	r3, r3, #2
 8000fde:	2b02      	cmp	r3, #2
 8000fe0:	d1f8      	bne.n	8000fd4 <main+0x44>
			;
		__HAL_TIM_CLEAR_FLAG(&htim1, TIM_FLAG_CC1);
 8000fe2:	4b33      	ldr	r3, [pc, #204]	@ (80010b0 <main+0x120>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	f06f 0202 	mvn.w	r2, #2
 8000fea:	611a      	str	r2, [r3, #16]

		while (__HAL_TIM_GET_FLAG(&htim1, TIM_FLAG_CC1) == 0)
 8000fec:	bf00      	nop
 8000fee:	4b30      	ldr	r3, [pc, #192]	@ (80010b0 <main+0x120>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	691b      	ldr	r3, [r3, #16]
 8000ff4:	f003 0302 	and.w	r3, r3, #2
 8000ff8:	2b02      	cmp	r3, #2
 8000ffa:	d1f8      	bne.n	8000fee <main+0x5e>
			;

		HAL_TIM_IC_Stop(&htim1, TIM_CHANNEL_1);
 8000ffc:	2100      	movs	r1, #0
 8000ffe:	482c      	ldr	r0, [pc, #176]	@ (80010b0 <main+0x120>)
 8001000:	f001 fd74 	bl	8002aec <HAL_TIM_IC_Stop>
		HAL_TIM_IC_Stop(&htim1, TIM_CHANNEL_2);
 8001004:	2104      	movs	r1, #4
 8001006:	482a      	ldr	r0, [pc, #168]	@ (80010b0 <main+0x120>)
 8001008:	f001 fd70 	bl	8002aec <HAL_TIM_IC_Stop>

		uint16_t ccr1 = __HAL_TIM_GET_COMPARE(&htim1, TIM_CHANNEL_1);
 800100c:	4b28      	ldr	r3, [pc, #160]	@ (80010b0 <main+0x120>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001012:	81fb      	strh	r3, [r7, #14]
		uint16_t ccr2 = __HAL_TIM_GET_COMPARE(&htim1, TIM_CHANNEL_2);
 8001014:	4b26      	ldr	r3, [pc, #152]	@ (80010b0 <main+0x120>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800101a:	81bb      	strh	r3, [r7, #12]

		float period = ccr1 * 1e-6f;
 800101c:	89fb      	ldrh	r3, [r7, #14]
 800101e:	4618      	mov	r0, r3
 8001020:	f7ff fdec 	bl	8000bfc <__aeabi_i2f>
 8001024:	4603      	mov	r3, r0
 8001026:	4923      	ldr	r1, [pc, #140]	@ (80010b4 <main+0x124>)
 8001028:	4618      	mov	r0, r3
 800102a:	f7ff fe3b 	bl	8000ca4 <__aeabi_fmul>
 800102e:	4603      	mov	r3, r0
 8001030:	60bb      	str	r3, [r7, #8]
		float pulse_width = ccr2 * 1e-6f;
 8001032:	89bb      	ldrh	r3, [r7, #12]
 8001034:	4618      	mov	r0, r3
 8001036:	f7ff fde1 	bl	8000bfc <__aeabi_i2f>
 800103a:	4603      	mov	r3, r0
 800103c:	491d      	ldr	r1, [pc, #116]	@ (80010b4 <main+0x124>)
 800103e:	4618      	mov	r0, r3
 8001040:	f7ff fe30 	bl	8000ca4 <__aeabi_fmul>
 8001044:	4603      	mov	r3, r0
 8001046:	607b      	str	r3, [r7, #4]
		float duty = pulse_width / period;
 8001048:	68b9      	ldr	r1, [r7, #8]
 800104a:	6878      	ldr	r0, [r7, #4]
 800104c:	f7ff fede 	bl	8000e0c <__aeabi_fdiv>
 8001050:	4603      	mov	r3, r0
 8001052:	603b      	str	r3, [r7, #0]

		uart_printf("Pulse width = %.1fus, Period = %.1fus, duty = %.1f%%", pulse_width*1e6f, period*1e6f, duty*100.0f);
 8001054:	4918      	ldr	r1, [pc, #96]	@ (80010b8 <main+0x128>)
 8001056:	6878      	ldr	r0, [r7, #4]
 8001058:	f7ff fe24 	bl	8000ca4 <__aeabi_fmul>
 800105c:	4603      	mov	r3, r0
 800105e:	4618      	mov	r0, r3
 8001060:	f7ff f9e2 	bl	8000428 <__aeabi_f2d>
 8001064:	4680      	mov	r8, r0
 8001066:	4689      	mov	r9, r1
 8001068:	4913      	ldr	r1, [pc, #76]	@ (80010b8 <main+0x128>)
 800106a:	68b8      	ldr	r0, [r7, #8]
 800106c:	f7ff fe1a 	bl	8000ca4 <__aeabi_fmul>
 8001070:	4603      	mov	r3, r0
 8001072:	4618      	mov	r0, r3
 8001074:	f7ff f9d8 	bl	8000428 <__aeabi_f2d>
 8001078:	4604      	mov	r4, r0
 800107a:	460d      	mov	r5, r1
 800107c:	490f      	ldr	r1, [pc, #60]	@ (80010bc <main+0x12c>)
 800107e:	6838      	ldr	r0, [r7, #0]
 8001080:	f7ff fe10 	bl	8000ca4 <__aeabi_fmul>
 8001084:	4603      	mov	r3, r0
 8001086:	4618      	mov	r0, r3
 8001088:	f7ff f9ce 	bl	8000428 <__aeabi_f2d>
 800108c:	4602      	mov	r2, r0
 800108e:	460b      	mov	r3, r1
 8001090:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001094:	e9cd 4500 	strd	r4, r5, [sp]
 8001098:	4642      	mov	r2, r8
 800109a:	464b      	mov	r3, r9
 800109c:	4808      	ldr	r0, [pc, #32]	@ (80010c0 <main+0x130>)
 800109e:	f7ff ff51 	bl	8000f44 <uart_printf>
		HAL_Delay(500);
 80010a2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80010a6:	f000 fc23 	bl	80018f0 <HAL_Delay>
	while (1) {
 80010aa:	e785      	b.n	8000fb8 <main+0x28>
 80010ac:	20000238 	.word	0x20000238
 80010b0:	200001f0 	.word	0x200001f0
 80010b4:	358637bd 	.word	0x358637bd
 80010b8:	49742400 	.word	0x49742400
 80010bc:	42c80000 	.word	0x42c80000
 80010c0:	08006ae8 	.word	0x08006ae8

080010c4 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b090      	sub	sp, #64	@ 0x40
 80010c8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80010ca:	f107 0318 	add.w	r3, r7, #24
 80010ce:	2228      	movs	r2, #40	@ 0x28
 80010d0:	2100      	movs	r1, #0
 80010d2:	4618      	mov	r0, r3
 80010d4:	f003 fc28 	bl	8004928 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80010d8:	1d3b      	adds	r3, r7, #4
 80010da:	2200      	movs	r2, #0
 80010dc:	601a      	str	r2, [r3, #0]
 80010de:	605a      	str	r2, [r3, #4]
 80010e0:	609a      	str	r2, [r3, #8]
 80010e2:	60da      	str	r2, [r3, #12]
 80010e4:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010e6:	2302      	movs	r3, #2
 80010e8:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010ea:	2301      	movs	r3, #1
 80010ec:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010ee:	2310      	movs	r3, #16
 80010f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80010f2:	2300      	movs	r3, #0
 80010f4:	637b      	str	r3, [r7, #52]	@ 0x34
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80010f6:	f107 0318 	add.w	r3, r7, #24
 80010fa:	4618      	mov	r0, r3
 80010fc:	f000 fe84 	bl	8001e08 <HAL_RCC_OscConfig>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d001      	beq.n	800110a <SystemClock_Config+0x46>
		Error_Handler();
 8001106:	f000 f96d 	bl	80013e4 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800110a:	230f      	movs	r3, #15
 800110c:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800110e:	2300      	movs	r3, #0
 8001110:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001112:	2300      	movs	r3, #0
 8001114:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001116:	2300      	movs	r3, #0
 8001118:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800111a:	2300      	movs	r3, #0
 800111c:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 800111e:	1d3b      	adds	r3, r7, #4
 8001120:	2100      	movs	r1, #0
 8001122:	4618      	mov	r0, r3
 8001124:	f001 f8f2 	bl	800230c <HAL_RCC_ClockConfig>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <SystemClock_Config+0x6e>
		Error_Handler();
 800112e:	f000 f959 	bl	80013e4 <Error_Handler>
	}
}
 8001132:	bf00      	nop
 8001134:	3740      	adds	r7, #64	@ 0x40
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
	...

0800113c <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 800113c:	b580      	push	{r7, lr}
 800113e:	b090      	sub	sp, #64	@ 0x40
 8001140:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001142:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001146:	2200      	movs	r2, #0
 8001148:	601a      	str	r2, [r3, #0]
 800114a:	605a      	str	r2, [r3, #4]
 800114c:	609a      	str	r2, [r3, #8]
 800114e:	60da      	str	r2, [r3, #12]
	TIM_SlaveConfigTypeDef sSlaveConfig = { 0 };
 8001150:	f107 031c 	add.w	r3, r7, #28
 8001154:	2200      	movs	r2, #0
 8001156:	601a      	str	r2, [r3, #0]
 8001158:	605a      	str	r2, [r3, #4]
 800115a:	609a      	str	r2, [r3, #8]
 800115c:	60da      	str	r2, [r3, #12]
 800115e:	611a      	str	r2, [r3, #16]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001160:	f107 0314 	add.w	r3, r7, #20
 8001164:	2200      	movs	r2, #0
 8001166:	601a      	str	r2, [r3, #0]
 8001168:	605a      	str	r2, [r3, #4]
	TIM_IC_InitTypeDef sConfigIC = { 0 };
 800116a:	1d3b      	adds	r3, r7, #4
 800116c:	2200      	movs	r2, #0
 800116e:	601a      	str	r2, [r3, #0]
 8001170:	605a      	str	r2, [r3, #4]
 8001172:	609a      	str	r2, [r3, #8]
 8001174:	60da      	str	r2, [r3, #12]

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8001176:	4b3e      	ldr	r3, [pc, #248]	@ (8001270 <MX_TIM1_Init+0x134>)
 8001178:	4a3e      	ldr	r2, [pc, #248]	@ (8001274 <MX_TIM1_Init+0x138>)
 800117a:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 7;
 800117c:	4b3c      	ldr	r3, [pc, #240]	@ (8001270 <MX_TIM1_Init+0x134>)
 800117e:	2207      	movs	r2, #7
 8001180:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001182:	4b3b      	ldr	r3, [pc, #236]	@ (8001270 <MX_TIM1_Init+0x134>)
 8001184:	2200      	movs	r2, #0
 8001186:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 65535;
 8001188:	4b39      	ldr	r3, [pc, #228]	@ (8001270 <MX_TIM1_Init+0x134>)
 800118a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800118e:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001190:	4b37      	ldr	r3, [pc, #220]	@ (8001270 <MX_TIM1_Init+0x134>)
 8001192:	2200      	movs	r2, #0
 8001194:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8001196:	4b36      	ldr	r3, [pc, #216]	@ (8001270 <MX_TIM1_Init+0x134>)
 8001198:	2200      	movs	r2, #0
 800119a:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800119c:	4b34      	ldr	r3, [pc, #208]	@ (8001270 <MX_TIM1_Init+0x134>)
 800119e:	2280      	movs	r2, #128	@ 0x80
 80011a0:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 80011a2:	4833      	ldr	r0, [pc, #204]	@ (8001270 <MX_TIM1_Init+0x134>)
 80011a4:	f001 fa40 	bl	8002628 <HAL_TIM_Base_Init>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <MX_TIM1_Init+0x76>
		Error_Handler();
 80011ae:	f000 f919 	bl	80013e4 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011b2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011b6:	633b      	str	r3, [r7, #48]	@ 0x30
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 80011b8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80011bc:	4619      	mov	r1, r3
 80011be:	482c      	ldr	r0, [pc, #176]	@ (8001270 <MX_TIM1_Init+0x134>)
 80011c0:	f001 fe54 	bl	8002e6c <HAL_TIM_ConfigClockSource>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d001      	beq.n	80011ce <MX_TIM1_Init+0x92>
		Error_Handler();
 80011ca:	f000 f90b 	bl	80013e4 <Error_Handler>
	}
	if (HAL_TIM_IC_Init(&htim1) != HAL_OK) {
 80011ce:	4828      	ldr	r0, [pc, #160]	@ (8001270 <MX_TIM1_Init+0x134>)
 80011d0:	f001 fb74 	bl	80028bc <HAL_TIM_IC_Init>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d001      	beq.n	80011de <MX_TIM1_Init+0xa2>
		Error_Handler();
 80011da:	f000 f903 	bl	80013e4 <Error_Handler>
	}
	sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 80011de:	2304      	movs	r3, #4
 80011e0:	61fb      	str	r3, [r7, #28]
	sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 80011e2:	2350      	movs	r3, #80	@ 0x50
 80011e4:	623b      	str	r3, [r7, #32]
	sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80011e6:	2300      	movs	r3, #0
 80011e8:	627b      	str	r3, [r7, #36]	@ 0x24
	sSlaveConfig.TriggerFilter = 0;
 80011ea:	2300      	movs	r3, #0
 80011ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK) {
 80011ee:	f107 031c 	add.w	r3, r7, #28
 80011f2:	4619      	mov	r1, r3
 80011f4:	481e      	ldr	r0, [pc, #120]	@ (8001270 <MX_TIM1_Init+0x134>)
 80011f6:	f001 ff00 	bl	8002ffa <HAL_TIM_SlaveConfigSynchro>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d001      	beq.n	8001204 <MX_TIM1_Init+0xc8>
		Error_Handler();
 8001200:	f000 f8f0 	bl	80013e4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001204:	2300      	movs	r3, #0
 8001206:	617b      	str	r3, [r7, #20]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001208:	2300      	movs	r3, #0
 800120a:	61bb      	str	r3, [r7, #24]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 800120c:	f107 0314 	add.w	r3, r7, #20
 8001210:	4619      	mov	r1, r3
 8001212:	4817      	ldr	r0, [pc, #92]	@ (8001270 <MX_TIM1_Init+0x134>)
 8001214:	f002 fb84 	bl	8003920 <HAL_TIMEx_MasterConfigSynchronization>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d001      	beq.n	8001222 <MX_TIM1_Init+0xe6>
			!= HAL_OK) {
		Error_Handler();
 800121e:	f000 f8e1 	bl	80013e4 <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001222:	2300      	movs	r3, #0
 8001224:	607b      	str	r3, [r7, #4]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001226:	2301      	movs	r3, #1
 8001228:	60bb      	str	r3, [r7, #8]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800122a:	2300      	movs	r3, #0
 800122c:	60fb      	str	r3, [r7, #12]
	sConfigIC.ICFilter = 0;
 800122e:	2300      	movs	r3, #0
 8001230:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK) {
 8001232:	1d3b      	adds	r3, r7, #4
 8001234:	2200      	movs	r2, #0
 8001236:	4619      	mov	r1, r3
 8001238:	480d      	ldr	r0, [pc, #52]	@ (8001270 <MX_TIM1_Init+0x134>)
 800123a:	f001 fcb8 	bl	8002bae <HAL_TIM_IC_ConfigChannel>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d001      	beq.n	8001248 <MX_TIM1_Init+0x10c>
		Error_Handler();
 8001244:	f000 f8ce 	bl	80013e4 <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001248:	2302      	movs	r3, #2
 800124a:	607b      	str	r3, [r7, #4]
	sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 800124c:	2302      	movs	r3, #2
 800124e:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK) {
 8001250:	1d3b      	adds	r3, r7, #4
 8001252:	2204      	movs	r2, #4
 8001254:	4619      	mov	r1, r3
 8001256:	4806      	ldr	r0, [pc, #24]	@ (8001270 <MX_TIM1_Init+0x134>)
 8001258:	f001 fca9 	bl	8002bae <HAL_TIM_IC_ConfigChannel>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d001      	beq.n	8001266 <MX_TIM1_Init+0x12a>
		Error_Handler();
 8001262:	f000 f8bf 	bl	80013e4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 8001266:	bf00      	nop
 8001268:	3740      	adds	r7, #64	@ 0x40
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	200001f0 	.word	0x200001f0
 8001274:	40012c00 	.word	0x40012c00

08001278 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8001278:	b580      	push	{r7, lr}
 800127a:	b08e      	sub	sp, #56	@ 0x38
 800127c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800127e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001282:	2200      	movs	r2, #0
 8001284:	601a      	str	r2, [r3, #0]
 8001286:	605a      	str	r2, [r3, #4]
 8001288:	609a      	str	r2, [r3, #8]
 800128a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800128c:	f107 0320 	add.w	r3, r7, #32
 8001290:	2200      	movs	r2, #0
 8001292:	601a      	str	r2, [r3, #0]
 8001294:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8001296:	1d3b      	adds	r3, r7, #4
 8001298:	2200      	movs	r2, #0
 800129a:	601a      	str	r2, [r3, #0]
 800129c:	605a      	str	r2, [r3, #4]
 800129e:	609a      	str	r2, [r3, #8]
 80012a0:	60da      	str	r2, [r3, #12]
 80012a2:	611a      	str	r2, [r3, #16]
 80012a4:	615a      	str	r2, [r3, #20]
 80012a6:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 80012a8:	4b2c      	ldr	r3, [pc, #176]	@ (800135c <MX_TIM3_Init+0xe4>)
 80012aa:	4a2d      	ldr	r2, [pc, #180]	@ (8001360 <MX_TIM3_Init+0xe8>)
 80012ac:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 7;
 80012ae:	4b2b      	ldr	r3, [pc, #172]	@ (800135c <MX_TIM3_Init+0xe4>)
 80012b0:	2207      	movs	r2, #7
 80012b2:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012b4:	4b29      	ldr	r3, [pc, #164]	@ (800135c <MX_TIM3_Init+0xe4>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 999;
 80012ba:	4b28      	ldr	r3, [pc, #160]	@ (800135c <MX_TIM3_Init+0xe4>)
 80012bc:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80012c0:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012c2:	4b26      	ldr	r3, [pc, #152]	@ (800135c <MX_TIM3_Init+0xe4>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80012c8:	4b24      	ldr	r3, [pc, #144]	@ (800135c <MX_TIM3_Init+0xe4>)
 80012ca:	2280      	movs	r2, #128	@ 0x80
 80012cc:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 80012ce:	4823      	ldr	r0, [pc, #140]	@ (800135c <MX_TIM3_Init+0xe4>)
 80012d0:	f001 f9aa 	bl	8002628 <HAL_TIM_Base_Init>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d001      	beq.n	80012de <MX_TIM3_Init+0x66>
		Error_Handler();
 80012da:	f000 f883 	bl	80013e4 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012de:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012e2:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 80012e4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80012e8:	4619      	mov	r1, r3
 80012ea:	481c      	ldr	r0, [pc, #112]	@ (800135c <MX_TIM3_Init+0xe4>)
 80012ec:	f001 fdbe 	bl	8002e6c <HAL_TIM_ConfigClockSource>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d001      	beq.n	80012fa <MX_TIM3_Init+0x82>
		Error_Handler();
 80012f6:	f000 f875 	bl	80013e4 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK) {
 80012fa:	4818      	ldr	r0, [pc, #96]	@ (800135c <MX_TIM3_Init+0xe4>)
 80012fc:	f001 f9e3 	bl	80026c6 <HAL_TIM_PWM_Init>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d001      	beq.n	800130a <MX_TIM3_Init+0x92>
		Error_Handler();
 8001306:	f000 f86d 	bl	80013e4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800130a:	2300      	movs	r3, #0
 800130c:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800130e:	2300      	movs	r3, #0
 8001310:	627b      	str	r3, [r7, #36]	@ 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8001312:	f107 0320 	add.w	r3, r7, #32
 8001316:	4619      	mov	r1, r3
 8001318:	4810      	ldr	r0, [pc, #64]	@ (800135c <MX_TIM3_Init+0xe4>)
 800131a:	f002 fb01 	bl	8003920 <HAL_TIMEx_MasterConfigSynchronization>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d001      	beq.n	8001328 <MX_TIM3_Init+0xb0>
			!= HAL_OK) {
		Error_Handler();
 8001324:	f000 f85e 	bl	80013e4 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001328:	2360      	movs	r3, #96	@ 0x60
 800132a:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 200;
 800132c:	23c8      	movs	r3, #200	@ 0xc8
 800132e:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001330:	2300      	movs	r3, #0
 8001332:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001334:	2300      	movs	r3, #0
 8001336:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1)
 8001338:	1d3b      	adds	r3, r7, #4
 800133a:	2200      	movs	r2, #0
 800133c:	4619      	mov	r1, r3
 800133e:	4807      	ldr	r0, [pc, #28]	@ (800135c <MX_TIM3_Init+0xe4>)
 8001340:	f001 fcd2 	bl	8002ce8 <HAL_TIM_PWM_ConfigChannel>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <MX_TIM3_Init+0xd6>
			!= HAL_OK) {
		Error_Handler();
 800134a:	f000 f84b 	bl	80013e4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 800134e:	4803      	ldr	r0, [pc, #12]	@ (800135c <MX_TIM3_Init+0xe4>)
 8001350:	f000 f8d4 	bl	80014fc <HAL_TIM_MspPostInit>

}
 8001354:	bf00      	nop
 8001356:	3738      	adds	r7, #56	@ 0x38
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	20000238 	.word	0x20000238
 8001360:	40000400 	.word	0x40000400

08001364 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8001364:	b580      	push	{r7, lr}
 8001366:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8001368:	4b11      	ldr	r3, [pc, #68]	@ (80013b0 <MX_USART1_UART_Init+0x4c>)
 800136a:	4a12      	ldr	r2, [pc, #72]	@ (80013b4 <MX_USART1_UART_Init+0x50>)
 800136c:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 800136e:	4b10      	ldr	r3, [pc, #64]	@ (80013b0 <MX_USART1_UART_Init+0x4c>)
 8001370:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001374:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001376:	4b0e      	ldr	r3, [pc, #56]	@ (80013b0 <MX_USART1_UART_Init+0x4c>)
 8001378:	2200      	movs	r2, #0
 800137a:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 800137c:	4b0c      	ldr	r3, [pc, #48]	@ (80013b0 <MX_USART1_UART_Init+0x4c>)
 800137e:	2200      	movs	r2, #0
 8001380:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8001382:	4b0b      	ldr	r3, [pc, #44]	@ (80013b0 <MX_USART1_UART_Init+0x4c>)
 8001384:	2200      	movs	r2, #0
 8001386:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8001388:	4b09      	ldr	r3, [pc, #36]	@ (80013b0 <MX_USART1_UART_Init+0x4c>)
 800138a:	220c      	movs	r2, #12
 800138c:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800138e:	4b08      	ldr	r3, [pc, #32]	@ (80013b0 <MX_USART1_UART_Init+0x4c>)
 8001390:	2200      	movs	r2, #0
 8001392:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001394:	4b06      	ldr	r3, [pc, #24]	@ (80013b0 <MX_USART1_UART_Init+0x4c>)
 8001396:	2200      	movs	r2, #0
 8001398:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 800139a:	4805      	ldr	r0, [pc, #20]	@ (80013b0 <MX_USART1_UART_Init+0x4c>)
 800139c:	f002 fb1e 	bl	80039dc <HAL_UART_Init>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d001      	beq.n	80013aa <MX_USART1_UART_Init+0x46>
		Error_Handler();
 80013a6:	f000 f81d 	bl	80013e4 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 80013aa:	bf00      	nop
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	20000280 	.word	0x20000280
 80013b4:	40013800 	.word	0x40013800

080013b8 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80013b8:	b480      	push	{r7}
 80013ba:	b083      	sub	sp, #12
 80013bc:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80013be:	4b08      	ldr	r3, [pc, #32]	@ (80013e0 <MX_GPIO_Init+0x28>)
 80013c0:	699b      	ldr	r3, [r3, #24]
 80013c2:	4a07      	ldr	r2, [pc, #28]	@ (80013e0 <MX_GPIO_Init+0x28>)
 80013c4:	f043 0304 	orr.w	r3, r3, #4
 80013c8:	6193      	str	r3, [r2, #24]
 80013ca:	4b05      	ldr	r3, [pc, #20]	@ (80013e0 <MX_GPIO_Init+0x28>)
 80013cc:	699b      	ldr	r3, [r3, #24]
 80013ce:	f003 0304 	and.w	r3, r3, #4
 80013d2:	607b      	str	r3, [r7, #4]
 80013d4:	687b      	ldr	r3, [r7, #4]

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 80013d6:	bf00      	nop
 80013d8:	370c      	adds	r7, #12
 80013da:	46bd      	mov	sp, r7
 80013dc:	bc80      	pop	{r7}
 80013de:	4770      	bx	lr
 80013e0:	40021000 	.word	0x40021000

080013e4 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013e8:	b672      	cpsid	i
}
 80013ea:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80013ec:	bf00      	nop
 80013ee:	e7fd      	b.n	80013ec <Error_Handler+0x8>

080013f0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b085      	sub	sp, #20
 80013f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80013f6:	4b15      	ldr	r3, [pc, #84]	@ (800144c <HAL_MspInit+0x5c>)
 80013f8:	699b      	ldr	r3, [r3, #24]
 80013fa:	4a14      	ldr	r2, [pc, #80]	@ (800144c <HAL_MspInit+0x5c>)
 80013fc:	f043 0301 	orr.w	r3, r3, #1
 8001400:	6193      	str	r3, [r2, #24]
 8001402:	4b12      	ldr	r3, [pc, #72]	@ (800144c <HAL_MspInit+0x5c>)
 8001404:	699b      	ldr	r3, [r3, #24]
 8001406:	f003 0301 	and.w	r3, r3, #1
 800140a:	60bb      	str	r3, [r7, #8]
 800140c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800140e:	4b0f      	ldr	r3, [pc, #60]	@ (800144c <HAL_MspInit+0x5c>)
 8001410:	69db      	ldr	r3, [r3, #28]
 8001412:	4a0e      	ldr	r2, [pc, #56]	@ (800144c <HAL_MspInit+0x5c>)
 8001414:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001418:	61d3      	str	r3, [r2, #28]
 800141a:	4b0c      	ldr	r3, [pc, #48]	@ (800144c <HAL_MspInit+0x5c>)
 800141c:	69db      	ldr	r3, [r3, #28]
 800141e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001422:	607b      	str	r3, [r7, #4]
 8001424:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001426:	4b0a      	ldr	r3, [pc, #40]	@ (8001450 <HAL_MspInit+0x60>)
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	60fb      	str	r3, [r7, #12]
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001432:	60fb      	str	r3, [r7, #12]
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800143a:	60fb      	str	r3, [r7, #12]
 800143c:	4a04      	ldr	r2, [pc, #16]	@ (8001450 <HAL_MspInit+0x60>)
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001442:	bf00      	nop
 8001444:	3714      	adds	r7, #20
 8001446:	46bd      	mov	sp, r7
 8001448:	bc80      	pop	{r7}
 800144a:	4770      	bx	lr
 800144c:	40021000 	.word	0x40021000
 8001450:	40010000 	.word	0x40010000

08001454 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b08a      	sub	sp, #40	@ 0x28
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800145c:	f107 0318 	add.w	r3, r7, #24
 8001460:	2200      	movs	r2, #0
 8001462:	601a      	str	r2, [r3, #0]
 8001464:	605a      	str	r2, [r3, #4]
 8001466:	609a      	str	r2, [r3, #8]
 8001468:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM1)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	4a1f      	ldr	r2, [pc, #124]	@ (80014ec <HAL_TIM_Base_MspInit+0x98>)
 8001470:	4293      	cmp	r3, r2
 8001472:	d125      	bne.n	80014c0 <HAL_TIM_Base_MspInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001474:	4b1e      	ldr	r3, [pc, #120]	@ (80014f0 <HAL_TIM_Base_MspInit+0x9c>)
 8001476:	699b      	ldr	r3, [r3, #24]
 8001478:	4a1d      	ldr	r2, [pc, #116]	@ (80014f0 <HAL_TIM_Base_MspInit+0x9c>)
 800147a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800147e:	6193      	str	r3, [r2, #24]
 8001480:	4b1b      	ldr	r3, [pc, #108]	@ (80014f0 <HAL_TIM_Base_MspInit+0x9c>)
 8001482:	699b      	ldr	r3, [r3, #24]
 8001484:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001488:	617b      	str	r3, [r7, #20]
 800148a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800148c:	4b18      	ldr	r3, [pc, #96]	@ (80014f0 <HAL_TIM_Base_MspInit+0x9c>)
 800148e:	699b      	ldr	r3, [r3, #24]
 8001490:	4a17      	ldr	r2, [pc, #92]	@ (80014f0 <HAL_TIM_Base_MspInit+0x9c>)
 8001492:	f043 0304 	orr.w	r3, r3, #4
 8001496:	6193      	str	r3, [r2, #24]
 8001498:	4b15      	ldr	r3, [pc, #84]	@ (80014f0 <HAL_TIM_Base_MspInit+0x9c>)
 800149a:	699b      	ldr	r3, [r3, #24]
 800149c:	f003 0304 	and.w	r3, r3, #4
 80014a0:	613b      	str	r3, [r7, #16]
 80014a2:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80014a4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80014a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014aa:	2300      	movs	r3, #0
 80014ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ae:	2300      	movs	r3, #0
 80014b0:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014b2:	f107 0318 	add.w	r3, r7, #24
 80014b6:	4619      	mov	r1, r3
 80014b8:	480e      	ldr	r0, [pc, #56]	@ (80014f4 <HAL_TIM_Base_MspInit+0xa0>)
 80014ba:	f000 fb21 	bl	8001b00 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80014be:	e010      	b.n	80014e2 <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM3)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a0c      	ldr	r2, [pc, #48]	@ (80014f8 <HAL_TIM_Base_MspInit+0xa4>)
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d10b      	bne.n	80014e2 <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80014ca:	4b09      	ldr	r3, [pc, #36]	@ (80014f0 <HAL_TIM_Base_MspInit+0x9c>)
 80014cc:	69db      	ldr	r3, [r3, #28]
 80014ce:	4a08      	ldr	r2, [pc, #32]	@ (80014f0 <HAL_TIM_Base_MspInit+0x9c>)
 80014d0:	f043 0302 	orr.w	r3, r3, #2
 80014d4:	61d3      	str	r3, [r2, #28]
 80014d6:	4b06      	ldr	r3, [pc, #24]	@ (80014f0 <HAL_TIM_Base_MspInit+0x9c>)
 80014d8:	69db      	ldr	r3, [r3, #28]
 80014da:	f003 0302 	and.w	r3, r3, #2
 80014de:	60fb      	str	r3, [r7, #12]
 80014e0:	68fb      	ldr	r3, [r7, #12]
}
 80014e2:	bf00      	nop
 80014e4:	3728      	adds	r7, #40	@ 0x28
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	40012c00 	.word	0x40012c00
 80014f0:	40021000 	.word	0x40021000
 80014f4:	40010800 	.word	0x40010800
 80014f8:	40000400 	.word	0x40000400

080014fc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b088      	sub	sp, #32
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001504:	f107 0310 	add.w	r3, r7, #16
 8001508:	2200      	movs	r2, #0
 800150a:	601a      	str	r2, [r3, #0]
 800150c:	605a      	str	r2, [r3, #4]
 800150e:	609a      	str	r2, [r3, #8]
 8001510:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4a0f      	ldr	r2, [pc, #60]	@ (8001554 <HAL_TIM_MspPostInit+0x58>)
 8001518:	4293      	cmp	r3, r2
 800151a:	d117      	bne.n	800154c <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800151c:	4b0e      	ldr	r3, [pc, #56]	@ (8001558 <HAL_TIM_MspPostInit+0x5c>)
 800151e:	699b      	ldr	r3, [r3, #24]
 8001520:	4a0d      	ldr	r2, [pc, #52]	@ (8001558 <HAL_TIM_MspPostInit+0x5c>)
 8001522:	f043 0304 	orr.w	r3, r3, #4
 8001526:	6193      	str	r3, [r2, #24]
 8001528:	4b0b      	ldr	r3, [pc, #44]	@ (8001558 <HAL_TIM_MspPostInit+0x5c>)
 800152a:	699b      	ldr	r3, [r3, #24]
 800152c:	f003 0304 	and.w	r3, r3, #4
 8001530:	60fb      	str	r3, [r7, #12]
 8001532:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001534:	2340      	movs	r3, #64	@ 0x40
 8001536:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001538:	2302      	movs	r3, #2
 800153a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800153c:	2302      	movs	r3, #2
 800153e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001540:	f107 0310 	add.w	r3, r7, #16
 8001544:	4619      	mov	r1, r3
 8001546:	4805      	ldr	r0, [pc, #20]	@ (800155c <HAL_TIM_MspPostInit+0x60>)
 8001548:	f000 fada 	bl	8001b00 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800154c:	bf00      	nop
 800154e:	3720      	adds	r7, #32
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}
 8001554:	40000400 	.word	0x40000400
 8001558:	40021000 	.word	0x40021000
 800155c:	40010800 	.word	0x40010800

08001560 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b088      	sub	sp, #32
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001568:	f107 0310 	add.w	r3, r7, #16
 800156c:	2200      	movs	r2, #0
 800156e:	601a      	str	r2, [r3, #0]
 8001570:	605a      	str	r2, [r3, #4]
 8001572:	609a      	str	r2, [r3, #8]
 8001574:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4a1c      	ldr	r2, [pc, #112]	@ (80015ec <HAL_UART_MspInit+0x8c>)
 800157c:	4293      	cmp	r3, r2
 800157e:	d131      	bne.n	80015e4 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001580:	4b1b      	ldr	r3, [pc, #108]	@ (80015f0 <HAL_UART_MspInit+0x90>)
 8001582:	699b      	ldr	r3, [r3, #24]
 8001584:	4a1a      	ldr	r2, [pc, #104]	@ (80015f0 <HAL_UART_MspInit+0x90>)
 8001586:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800158a:	6193      	str	r3, [r2, #24]
 800158c:	4b18      	ldr	r3, [pc, #96]	@ (80015f0 <HAL_UART_MspInit+0x90>)
 800158e:	699b      	ldr	r3, [r3, #24]
 8001590:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001594:	60fb      	str	r3, [r7, #12]
 8001596:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001598:	4b15      	ldr	r3, [pc, #84]	@ (80015f0 <HAL_UART_MspInit+0x90>)
 800159a:	699b      	ldr	r3, [r3, #24]
 800159c:	4a14      	ldr	r2, [pc, #80]	@ (80015f0 <HAL_UART_MspInit+0x90>)
 800159e:	f043 0304 	orr.w	r3, r3, #4
 80015a2:	6193      	str	r3, [r2, #24]
 80015a4:	4b12      	ldr	r3, [pc, #72]	@ (80015f0 <HAL_UART_MspInit+0x90>)
 80015a6:	699b      	ldr	r3, [r3, #24]
 80015a8:	f003 0304 	and.w	r3, r3, #4
 80015ac:	60bb      	str	r3, [r7, #8]
 80015ae:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80015b0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80015b4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015b6:	2302      	movs	r3, #2
 80015b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015ba:	2303      	movs	r3, #3
 80015bc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015be:	f107 0310 	add.w	r3, r7, #16
 80015c2:	4619      	mov	r1, r3
 80015c4:	480b      	ldr	r0, [pc, #44]	@ (80015f4 <HAL_UART_MspInit+0x94>)
 80015c6:	f000 fa9b 	bl	8001b00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80015ca:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80015ce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015d0:	2300      	movs	r3, #0
 80015d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d4:	2300      	movs	r3, #0
 80015d6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015d8:	f107 0310 	add.w	r3, r7, #16
 80015dc:	4619      	mov	r1, r3
 80015de:	4805      	ldr	r0, [pc, #20]	@ (80015f4 <HAL_UART_MspInit+0x94>)
 80015e0:	f000 fa8e 	bl	8001b00 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 80015e4:	bf00      	nop
 80015e6:	3720      	adds	r7, #32
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	40013800 	.word	0x40013800
 80015f0:	40021000 	.word	0x40021000
 80015f4:	40010800 	.word	0x40010800

080015f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80015fc:	bf00      	nop
 80015fe:	e7fd      	b.n	80015fc <NMI_Handler+0x4>

08001600 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001600:	b480      	push	{r7}
 8001602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001604:	bf00      	nop
 8001606:	e7fd      	b.n	8001604 <HardFault_Handler+0x4>

08001608 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800160c:	bf00      	nop
 800160e:	e7fd      	b.n	800160c <MemManage_Handler+0x4>

08001610 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001614:	bf00      	nop
 8001616:	e7fd      	b.n	8001614 <BusFault_Handler+0x4>

08001618 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001618:	b480      	push	{r7}
 800161a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800161c:	bf00      	nop
 800161e:	e7fd      	b.n	800161c <UsageFault_Handler+0x4>

08001620 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001624:	bf00      	nop
 8001626:	46bd      	mov	sp, r7
 8001628:	bc80      	pop	{r7}
 800162a:	4770      	bx	lr

0800162c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001630:	bf00      	nop
 8001632:	46bd      	mov	sp, r7
 8001634:	bc80      	pop	{r7}
 8001636:	4770      	bx	lr

08001638 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800163c:	bf00      	nop
 800163e:	46bd      	mov	sp, r7
 8001640:	bc80      	pop	{r7}
 8001642:	4770      	bx	lr

08001644 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001648:	f000 f936 	bl	80018b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800164c:	bf00      	nop
 800164e:	bd80      	pop	{r7, pc}

08001650 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001650:	b480      	push	{r7}
 8001652:	af00      	add	r7, sp, #0
  return 1;
 8001654:	2301      	movs	r3, #1
}
 8001656:	4618      	mov	r0, r3
 8001658:	46bd      	mov	sp, r7
 800165a:	bc80      	pop	{r7}
 800165c:	4770      	bx	lr

0800165e <_kill>:

int _kill(int pid, int sig)
{
 800165e:	b580      	push	{r7, lr}
 8001660:	b082      	sub	sp, #8
 8001662:	af00      	add	r7, sp, #0
 8001664:	6078      	str	r0, [r7, #4]
 8001666:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001668:	f003 f9b0 	bl	80049cc <__errno>
 800166c:	4603      	mov	r3, r0
 800166e:	2216      	movs	r2, #22
 8001670:	601a      	str	r2, [r3, #0]
  return -1;
 8001672:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001676:	4618      	mov	r0, r3
 8001678:	3708      	adds	r7, #8
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}

0800167e <_exit>:

void _exit (int status)
{
 800167e:	b580      	push	{r7, lr}
 8001680:	b082      	sub	sp, #8
 8001682:	af00      	add	r7, sp, #0
 8001684:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001686:	f04f 31ff 	mov.w	r1, #4294967295
 800168a:	6878      	ldr	r0, [r7, #4]
 800168c:	f7ff ffe7 	bl	800165e <_kill>
  while (1) {}    /* Make sure we hang here */
 8001690:	bf00      	nop
 8001692:	e7fd      	b.n	8001690 <_exit+0x12>

08001694 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b086      	sub	sp, #24
 8001698:	af00      	add	r7, sp, #0
 800169a:	60f8      	str	r0, [r7, #12]
 800169c:	60b9      	str	r1, [r7, #8]
 800169e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016a0:	2300      	movs	r3, #0
 80016a2:	617b      	str	r3, [r7, #20]
 80016a4:	e00a      	b.n	80016bc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80016a6:	f3af 8000 	nop.w
 80016aa:	4601      	mov	r1, r0
 80016ac:	68bb      	ldr	r3, [r7, #8]
 80016ae:	1c5a      	adds	r2, r3, #1
 80016b0:	60ba      	str	r2, [r7, #8]
 80016b2:	b2ca      	uxtb	r2, r1
 80016b4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016b6:	697b      	ldr	r3, [r7, #20]
 80016b8:	3301      	adds	r3, #1
 80016ba:	617b      	str	r3, [r7, #20]
 80016bc:	697a      	ldr	r2, [r7, #20]
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	429a      	cmp	r2, r3
 80016c2:	dbf0      	blt.n	80016a6 <_read+0x12>
  }

  return len;
 80016c4:	687b      	ldr	r3, [r7, #4]
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	3718      	adds	r7, #24
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}

080016ce <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80016ce:	b580      	push	{r7, lr}
 80016d0:	b086      	sub	sp, #24
 80016d2:	af00      	add	r7, sp, #0
 80016d4:	60f8      	str	r0, [r7, #12]
 80016d6:	60b9      	str	r1, [r7, #8]
 80016d8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016da:	2300      	movs	r3, #0
 80016dc:	617b      	str	r3, [r7, #20]
 80016de:	e009      	b.n	80016f4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80016e0:	68bb      	ldr	r3, [r7, #8]
 80016e2:	1c5a      	adds	r2, r3, #1
 80016e4:	60ba      	str	r2, [r7, #8]
 80016e6:	781b      	ldrb	r3, [r3, #0]
 80016e8:	4618      	mov	r0, r3
 80016ea:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016ee:	697b      	ldr	r3, [r7, #20]
 80016f0:	3301      	adds	r3, #1
 80016f2:	617b      	str	r3, [r7, #20]
 80016f4:	697a      	ldr	r2, [r7, #20]
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	429a      	cmp	r2, r3
 80016fa:	dbf1      	blt.n	80016e0 <_write+0x12>
  }
  return len;
 80016fc:	687b      	ldr	r3, [r7, #4]
}
 80016fe:	4618      	mov	r0, r3
 8001700:	3718      	adds	r7, #24
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}

08001706 <_close>:

int _close(int file)
{
 8001706:	b480      	push	{r7}
 8001708:	b083      	sub	sp, #12
 800170a:	af00      	add	r7, sp, #0
 800170c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800170e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001712:	4618      	mov	r0, r3
 8001714:	370c      	adds	r7, #12
 8001716:	46bd      	mov	sp, r7
 8001718:	bc80      	pop	{r7}
 800171a:	4770      	bx	lr

0800171c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800171c:	b480      	push	{r7}
 800171e:	b083      	sub	sp, #12
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
 8001724:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800172c:	605a      	str	r2, [r3, #4]
  return 0;
 800172e:	2300      	movs	r3, #0
}
 8001730:	4618      	mov	r0, r3
 8001732:	370c      	adds	r7, #12
 8001734:	46bd      	mov	sp, r7
 8001736:	bc80      	pop	{r7}
 8001738:	4770      	bx	lr

0800173a <_isatty>:

int _isatty(int file)
{
 800173a:	b480      	push	{r7}
 800173c:	b083      	sub	sp, #12
 800173e:	af00      	add	r7, sp, #0
 8001740:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001742:	2301      	movs	r3, #1
}
 8001744:	4618      	mov	r0, r3
 8001746:	370c      	adds	r7, #12
 8001748:	46bd      	mov	sp, r7
 800174a:	bc80      	pop	{r7}
 800174c:	4770      	bx	lr

0800174e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800174e:	b480      	push	{r7}
 8001750:	b085      	sub	sp, #20
 8001752:	af00      	add	r7, sp, #0
 8001754:	60f8      	str	r0, [r7, #12]
 8001756:	60b9      	str	r1, [r7, #8]
 8001758:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800175a:	2300      	movs	r3, #0
}
 800175c:	4618      	mov	r0, r3
 800175e:	3714      	adds	r7, #20
 8001760:	46bd      	mov	sp, r7
 8001762:	bc80      	pop	{r7}
 8001764:	4770      	bx	lr
	...

08001768 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b086      	sub	sp, #24
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001770:	4a14      	ldr	r2, [pc, #80]	@ (80017c4 <_sbrk+0x5c>)
 8001772:	4b15      	ldr	r3, [pc, #84]	@ (80017c8 <_sbrk+0x60>)
 8001774:	1ad3      	subs	r3, r2, r3
 8001776:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800177c:	4b13      	ldr	r3, [pc, #76]	@ (80017cc <_sbrk+0x64>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d102      	bne.n	800178a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001784:	4b11      	ldr	r3, [pc, #68]	@ (80017cc <_sbrk+0x64>)
 8001786:	4a12      	ldr	r2, [pc, #72]	@ (80017d0 <_sbrk+0x68>)
 8001788:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800178a:	4b10      	ldr	r3, [pc, #64]	@ (80017cc <_sbrk+0x64>)
 800178c:	681a      	ldr	r2, [r3, #0]
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	4413      	add	r3, r2
 8001792:	693a      	ldr	r2, [r7, #16]
 8001794:	429a      	cmp	r2, r3
 8001796:	d207      	bcs.n	80017a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001798:	f003 f918 	bl	80049cc <__errno>
 800179c:	4603      	mov	r3, r0
 800179e:	220c      	movs	r2, #12
 80017a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017a2:	f04f 33ff 	mov.w	r3, #4294967295
 80017a6:	e009      	b.n	80017bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017a8:	4b08      	ldr	r3, [pc, #32]	@ (80017cc <_sbrk+0x64>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017ae:	4b07      	ldr	r3, [pc, #28]	@ (80017cc <_sbrk+0x64>)
 80017b0:	681a      	ldr	r2, [r3, #0]
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	4413      	add	r3, r2
 80017b6:	4a05      	ldr	r2, [pc, #20]	@ (80017cc <_sbrk+0x64>)
 80017b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017ba:	68fb      	ldr	r3, [r7, #12]
}
 80017bc:	4618      	mov	r0, r3
 80017be:	3718      	adds	r7, #24
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	20005000 	.word	0x20005000
 80017c8:	00000400 	.word	0x00000400
 80017cc:	200002c8 	.word	0x200002c8
 80017d0:	20000420 	.word	0x20000420

080017d4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80017d4:	b480      	push	{r7}
 80017d6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017d8:	bf00      	nop
 80017da:	46bd      	mov	sp, r7
 80017dc:	bc80      	pop	{r7}
 80017de:	4770      	bx	lr

080017e0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80017e0:	f7ff fff8 	bl	80017d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017e4:	480b      	ldr	r0, [pc, #44]	@ (8001814 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80017e6:	490c      	ldr	r1, [pc, #48]	@ (8001818 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80017e8:	4a0c      	ldr	r2, [pc, #48]	@ (800181c <LoopFillZerobss+0x16>)
  movs r3, #0
 80017ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017ec:	e002      	b.n	80017f4 <LoopCopyDataInit>

080017ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017f2:	3304      	adds	r3, #4

080017f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017f8:	d3f9      	bcc.n	80017ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017fa:	4a09      	ldr	r2, [pc, #36]	@ (8001820 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80017fc:	4c09      	ldr	r4, [pc, #36]	@ (8001824 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80017fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001800:	e001      	b.n	8001806 <LoopFillZerobss>

08001802 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001802:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001804:	3204      	adds	r2, #4

08001806 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001806:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001808:	d3fb      	bcc.n	8001802 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800180a:	f003 f8e5 	bl	80049d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800180e:	f7ff fbbf 	bl	8000f90 <main>
  bx lr
 8001812:	4770      	bx	lr
  ldr r0, =_sdata
 8001814:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001818:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 800181c:	08006ec8 	.word	0x08006ec8
  ldr r2, =_sbss
 8001820:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001824:	2000041c 	.word	0x2000041c

08001828 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001828:	e7fe      	b.n	8001828 <ADC1_2_IRQHandler>
	...

0800182c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001830:	4b08      	ldr	r3, [pc, #32]	@ (8001854 <HAL_Init+0x28>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a07      	ldr	r2, [pc, #28]	@ (8001854 <HAL_Init+0x28>)
 8001836:	f043 0310 	orr.w	r3, r3, #16
 800183a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800183c:	2003      	movs	r0, #3
 800183e:	f000 f92b 	bl	8001a98 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001842:	200f      	movs	r0, #15
 8001844:	f000 f808 	bl	8001858 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001848:	f7ff fdd2 	bl	80013f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800184c:	2300      	movs	r3, #0
}
 800184e:	4618      	mov	r0, r3
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	40022000 	.word	0x40022000

08001858 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b082      	sub	sp, #8
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001860:	4b12      	ldr	r3, [pc, #72]	@ (80018ac <HAL_InitTick+0x54>)
 8001862:	681a      	ldr	r2, [r3, #0]
 8001864:	4b12      	ldr	r3, [pc, #72]	@ (80018b0 <HAL_InitTick+0x58>)
 8001866:	781b      	ldrb	r3, [r3, #0]
 8001868:	4619      	mov	r1, r3
 800186a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800186e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001872:	fbb2 f3f3 	udiv	r3, r2, r3
 8001876:	4618      	mov	r0, r3
 8001878:	f000 f935 	bl	8001ae6 <HAL_SYSTICK_Config>
 800187c:	4603      	mov	r3, r0
 800187e:	2b00      	cmp	r3, #0
 8001880:	d001      	beq.n	8001886 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001882:	2301      	movs	r3, #1
 8001884:	e00e      	b.n	80018a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	2b0f      	cmp	r3, #15
 800188a:	d80a      	bhi.n	80018a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800188c:	2200      	movs	r2, #0
 800188e:	6879      	ldr	r1, [r7, #4]
 8001890:	f04f 30ff 	mov.w	r0, #4294967295
 8001894:	f000 f90b 	bl	8001aae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001898:	4a06      	ldr	r2, [pc, #24]	@ (80018b4 <HAL_InitTick+0x5c>)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800189e:	2300      	movs	r3, #0
 80018a0:	e000      	b.n	80018a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018a2:	2301      	movs	r3, #1
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	3708      	adds	r7, #8
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	20000000 	.word	0x20000000
 80018b0:	20000008 	.word	0x20000008
 80018b4:	20000004 	.word	0x20000004

080018b8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018b8:	b480      	push	{r7}
 80018ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018bc:	4b05      	ldr	r3, [pc, #20]	@ (80018d4 <HAL_IncTick+0x1c>)
 80018be:	781b      	ldrb	r3, [r3, #0]
 80018c0:	461a      	mov	r2, r3
 80018c2:	4b05      	ldr	r3, [pc, #20]	@ (80018d8 <HAL_IncTick+0x20>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4413      	add	r3, r2
 80018c8:	4a03      	ldr	r2, [pc, #12]	@ (80018d8 <HAL_IncTick+0x20>)
 80018ca:	6013      	str	r3, [r2, #0]
}
 80018cc:	bf00      	nop
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bc80      	pop	{r7}
 80018d2:	4770      	bx	lr
 80018d4:	20000008 	.word	0x20000008
 80018d8:	200002cc 	.word	0x200002cc

080018dc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018dc:	b480      	push	{r7}
 80018de:	af00      	add	r7, sp, #0
  return uwTick;
 80018e0:	4b02      	ldr	r3, [pc, #8]	@ (80018ec <HAL_GetTick+0x10>)
 80018e2:	681b      	ldr	r3, [r3, #0]
}
 80018e4:	4618      	mov	r0, r3
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bc80      	pop	{r7}
 80018ea:	4770      	bx	lr
 80018ec:	200002cc 	.word	0x200002cc

080018f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b084      	sub	sp, #16
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018f8:	f7ff fff0 	bl	80018dc <HAL_GetTick>
 80018fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001908:	d005      	beq.n	8001916 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800190a:	4b0a      	ldr	r3, [pc, #40]	@ (8001934 <HAL_Delay+0x44>)
 800190c:	781b      	ldrb	r3, [r3, #0]
 800190e:	461a      	mov	r2, r3
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	4413      	add	r3, r2
 8001914:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001916:	bf00      	nop
 8001918:	f7ff ffe0 	bl	80018dc <HAL_GetTick>
 800191c:	4602      	mov	r2, r0
 800191e:	68bb      	ldr	r3, [r7, #8]
 8001920:	1ad3      	subs	r3, r2, r3
 8001922:	68fa      	ldr	r2, [r7, #12]
 8001924:	429a      	cmp	r2, r3
 8001926:	d8f7      	bhi.n	8001918 <HAL_Delay+0x28>
  {
  }
}
 8001928:	bf00      	nop
 800192a:	bf00      	nop
 800192c:	3710      	adds	r7, #16
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	20000008 	.word	0x20000008

08001938 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001938:	b480      	push	{r7}
 800193a:	b085      	sub	sp, #20
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	f003 0307 	and.w	r3, r3, #7
 8001946:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001948:	4b0c      	ldr	r3, [pc, #48]	@ (800197c <__NVIC_SetPriorityGrouping+0x44>)
 800194a:	68db      	ldr	r3, [r3, #12]
 800194c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800194e:	68ba      	ldr	r2, [r7, #8]
 8001950:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001954:	4013      	ands	r3, r2
 8001956:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800195c:	68bb      	ldr	r3, [r7, #8]
 800195e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001960:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001964:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001968:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800196a:	4a04      	ldr	r2, [pc, #16]	@ (800197c <__NVIC_SetPriorityGrouping+0x44>)
 800196c:	68bb      	ldr	r3, [r7, #8]
 800196e:	60d3      	str	r3, [r2, #12]
}
 8001970:	bf00      	nop
 8001972:	3714      	adds	r7, #20
 8001974:	46bd      	mov	sp, r7
 8001976:	bc80      	pop	{r7}
 8001978:	4770      	bx	lr
 800197a:	bf00      	nop
 800197c:	e000ed00 	.word	0xe000ed00

08001980 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001980:	b480      	push	{r7}
 8001982:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001984:	4b04      	ldr	r3, [pc, #16]	@ (8001998 <__NVIC_GetPriorityGrouping+0x18>)
 8001986:	68db      	ldr	r3, [r3, #12]
 8001988:	0a1b      	lsrs	r3, r3, #8
 800198a:	f003 0307 	and.w	r3, r3, #7
}
 800198e:	4618      	mov	r0, r3
 8001990:	46bd      	mov	sp, r7
 8001992:	bc80      	pop	{r7}
 8001994:	4770      	bx	lr
 8001996:	bf00      	nop
 8001998:	e000ed00 	.word	0xe000ed00

0800199c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800199c:	b480      	push	{r7}
 800199e:	b083      	sub	sp, #12
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	4603      	mov	r3, r0
 80019a4:	6039      	str	r1, [r7, #0]
 80019a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	db0a      	blt.n	80019c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	b2da      	uxtb	r2, r3
 80019b4:	490c      	ldr	r1, [pc, #48]	@ (80019e8 <__NVIC_SetPriority+0x4c>)
 80019b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ba:	0112      	lsls	r2, r2, #4
 80019bc:	b2d2      	uxtb	r2, r2
 80019be:	440b      	add	r3, r1
 80019c0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019c4:	e00a      	b.n	80019dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	b2da      	uxtb	r2, r3
 80019ca:	4908      	ldr	r1, [pc, #32]	@ (80019ec <__NVIC_SetPriority+0x50>)
 80019cc:	79fb      	ldrb	r3, [r7, #7]
 80019ce:	f003 030f 	and.w	r3, r3, #15
 80019d2:	3b04      	subs	r3, #4
 80019d4:	0112      	lsls	r2, r2, #4
 80019d6:	b2d2      	uxtb	r2, r2
 80019d8:	440b      	add	r3, r1
 80019da:	761a      	strb	r2, [r3, #24]
}
 80019dc:	bf00      	nop
 80019de:	370c      	adds	r7, #12
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bc80      	pop	{r7}
 80019e4:	4770      	bx	lr
 80019e6:	bf00      	nop
 80019e8:	e000e100 	.word	0xe000e100
 80019ec:	e000ed00 	.word	0xe000ed00

080019f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b089      	sub	sp, #36	@ 0x24
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	60f8      	str	r0, [r7, #12]
 80019f8:	60b9      	str	r1, [r7, #8]
 80019fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	f003 0307 	and.w	r3, r3, #7
 8001a02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a04:	69fb      	ldr	r3, [r7, #28]
 8001a06:	f1c3 0307 	rsb	r3, r3, #7
 8001a0a:	2b04      	cmp	r3, #4
 8001a0c:	bf28      	it	cs
 8001a0e:	2304      	movcs	r3, #4
 8001a10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a12:	69fb      	ldr	r3, [r7, #28]
 8001a14:	3304      	adds	r3, #4
 8001a16:	2b06      	cmp	r3, #6
 8001a18:	d902      	bls.n	8001a20 <NVIC_EncodePriority+0x30>
 8001a1a:	69fb      	ldr	r3, [r7, #28]
 8001a1c:	3b03      	subs	r3, #3
 8001a1e:	e000      	b.n	8001a22 <NVIC_EncodePriority+0x32>
 8001a20:	2300      	movs	r3, #0
 8001a22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a24:	f04f 32ff 	mov.w	r2, #4294967295
 8001a28:	69bb      	ldr	r3, [r7, #24]
 8001a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2e:	43da      	mvns	r2, r3
 8001a30:	68bb      	ldr	r3, [r7, #8]
 8001a32:	401a      	ands	r2, r3
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a38:	f04f 31ff 	mov.w	r1, #4294967295
 8001a3c:	697b      	ldr	r3, [r7, #20]
 8001a3e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a42:	43d9      	mvns	r1, r3
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a48:	4313      	orrs	r3, r2
         );
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	3724      	adds	r7, #36	@ 0x24
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bc80      	pop	{r7}
 8001a52:	4770      	bx	lr

08001a54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b082      	sub	sp, #8
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	3b01      	subs	r3, #1
 8001a60:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001a64:	d301      	bcc.n	8001a6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a66:	2301      	movs	r3, #1
 8001a68:	e00f      	b.n	8001a8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a6a:	4a0a      	ldr	r2, [pc, #40]	@ (8001a94 <SysTick_Config+0x40>)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	3b01      	subs	r3, #1
 8001a70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a72:	210f      	movs	r1, #15
 8001a74:	f04f 30ff 	mov.w	r0, #4294967295
 8001a78:	f7ff ff90 	bl	800199c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a7c:	4b05      	ldr	r3, [pc, #20]	@ (8001a94 <SysTick_Config+0x40>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a82:	4b04      	ldr	r3, [pc, #16]	@ (8001a94 <SysTick_Config+0x40>)
 8001a84:	2207      	movs	r2, #7
 8001a86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a88:	2300      	movs	r3, #0
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	3708      	adds	r7, #8
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	e000e010 	.word	0xe000e010

08001a98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b082      	sub	sp, #8
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001aa0:	6878      	ldr	r0, [r7, #4]
 8001aa2:	f7ff ff49 	bl	8001938 <__NVIC_SetPriorityGrouping>
}
 8001aa6:	bf00      	nop
 8001aa8:	3708      	adds	r7, #8
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}

08001aae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001aae:	b580      	push	{r7, lr}
 8001ab0:	b086      	sub	sp, #24
 8001ab2:	af00      	add	r7, sp, #0
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	60b9      	str	r1, [r7, #8]
 8001ab8:	607a      	str	r2, [r7, #4]
 8001aba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001abc:	2300      	movs	r3, #0
 8001abe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ac0:	f7ff ff5e 	bl	8001980 <__NVIC_GetPriorityGrouping>
 8001ac4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ac6:	687a      	ldr	r2, [r7, #4]
 8001ac8:	68b9      	ldr	r1, [r7, #8]
 8001aca:	6978      	ldr	r0, [r7, #20]
 8001acc:	f7ff ff90 	bl	80019f0 <NVIC_EncodePriority>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ad6:	4611      	mov	r1, r2
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f7ff ff5f 	bl	800199c <__NVIC_SetPriority>
}
 8001ade:	bf00      	nop
 8001ae0:	3718      	adds	r7, #24
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}

08001ae6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ae6:	b580      	push	{r7, lr}
 8001ae8:	b082      	sub	sp, #8
 8001aea:	af00      	add	r7, sp, #0
 8001aec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001aee:	6878      	ldr	r0, [r7, #4]
 8001af0:	f7ff ffb0 	bl	8001a54 <SysTick_Config>
 8001af4:	4603      	mov	r3, r0
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	3708      	adds	r7, #8
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}
	...

08001b00 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b08b      	sub	sp, #44	@ 0x2c
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
 8001b08:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b12:	e169      	b.n	8001de8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001b14:	2201      	movs	r2, #1
 8001b16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b18:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	69fa      	ldr	r2, [r7, #28]
 8001b24:	4013      	ands	r3, r2
 8001b26:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001b28:	69ba      	ldr	r2, [r7, #24]
 8001b2a:	69fb      	ldr	r3, [r7, #28]
 8001b2c:	429a      	cmp	r2, r3
 8001b2e:	f040 8158 	bne.w	8001de2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	4a9a      	ldr	r2, [pc, #616]	@ (8001da0 <HAL_GPIO_Init+0x2a0>)
 8001b38:	4293      	cmp	r3, r2
 8001b3a:	d05e      	beq.n	8001bfa <HAL_GPIO_Init+0xfa>
 8001b3c:	4a98      	ldr	r2, [pc, #608]	@ (8001da0 <HAL_GPIO_Init+0x2a0>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d875      	bhi.n	8001c2e <HAL_GPIO_Init+0x12e>
 8001b42:	4a98      	ldr	r2, [pc, #608]	@ (8001da4 <HAL_GPIO_Init+0x2a4>)
 8001b44:	4293      	cmp	r3, r2
 8001b46:	d058      	beq.n	8001bfa <HAL_GPIO_Init+0xfa>
 8001b48:	4a96      	ldr	r2, [pc, #600]	@ (8001da4 <HAL_GPIO_Init+0x2a4>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d86f      	bhi.n	8001c2e <HAL_GPIO_Init+0x12e>
 8001b4e:	4a96      	ldr	r2, [pc, #600]	@ (8001da8 <HAL_GPIO_Init+0x2a8>)
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d052      	beq.n	8001bfa <HAL_GPIO_Init+0xfa>
 8001b54:	4a94      	ldr	r2, [pc, #592]	@ (8001da8 <HAL_GPIO_Init+0x2a8>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d869      	bhi.n	8001c2e <HAL_GPIO_Init+0x12e>
 8001b5a:	4a94      	ldr	r2, [pc, #592]	@ (8001dac <HAL_GPIO_Init+0x2ac>)
 8001b5c:	4293      	cmp	r3, r2
 8001b5e:	d04c      	beq.n	8001bfa <HAL_GPIO_Init+0xfa>
 8001b60:	4a92      	ldr	r2, [pc, #584]	@ (8001dac <HAL_GPIO_Init+0x2ac>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d863      	bhi.n	8001c2e <HAL_GPIO_Init+0x12e>
 8001b66:	4a92      	ldr	r2, [pc, #584]	@ (8001db0 <HAL_GPIO_Init+0x2b0>)
 8001b68:	4293      	cmp	r3, r2
 8001b6a:	d046      	beq.n	8001bfa <HAL_GPIO_Init+0xfa>
 8001b6c:	4a90      	ldr	r2, [pc, #576]	@ (8001db0 <HAL_GPIO_Init+0x2b0>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d85d      	bhi.n	8001c2e <HAL_GPIO_Init+0x12e>
 8001b72:	2b12      	cmp	r3, #18
 8001b74:	d82a      	bhi.n	8001bcc <HAL_GPIO_Init+0xcc>
 8001b76:	2b12      	cmp	r3, #18
 8001b78:	d859      	bhi.n	8001c2e <HAL_GPIO_Init+0x12e>
 8001b7a:	a201      	add	r2, pc, #4	@ (adr r2, 8001b80 <HAL_GPIO_Init+0x80>)
 8001b7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b80:	08001bfb 	.word	0x08001bfb
 8001b84:	08001bd5 	.word	0x08001bd5
 8001b88:	08001be7 	.word	0x08001be7
 8001b8c:	08001c29 	.word	0x08001c29
 8001b90:	08001c2f 	.word	0x08001c2f
 8001b94:	08001c2f 	.word	0x08001c2f
 8001b98:	08001c2f 	.word	0x08001c2f
 8001b9c:	08001c2f 	.word	0x08001c2f
 8001ba0:	08001c2f 	.word	0x08001c2f
 8001ba4:	08001c2f 	.word	0x08001c2f
 8001ba8:	08001c2f 	.word	0x08001c2f
 8001bac:	08001c2f 	.word	0x08001c2f
 8001bb0:	08001c2f 	.word	0x08001c2f
 8001bb4:	08001c2f 	.word	0x08001c2f
 8001bb8:	08001c2f 	.word	0x08001c2f
 8001bbc:	08001c2f 	.word	0x08001c2f
 8001bc0:	08001c2f 	.word	0x08001c2f
 8001bc4:	08001bdd 	.word	0x08001bdd
 8001bc8:	08001bf1 	.word	0x08001bf1
 8001bcc:	4a79      	ldr	r2, [pc, #484]	@ (8001db4 <HAL_GPIO_Init+0x2b4>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d013      	beq.n	8001bfa <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001bd2:	e02c      	b.n	8001c2e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	68db      	ldr	r3, [r3, #12]
 8001bd8:	623b      	str	r3, [r7, #32]
          break;
 8001bda:	e029      	b.n	8001c30 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	68db      	ldr	r3, [r3, #12]
 8001be0:	3304      	adds	r3, #4
 8001be2:	623b      	str	r3, [r7, #32]
          break;
 8001be4:	e024      	b.n	8001c30 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	68db      	ldr	r3, [r3, #12]
 8001bea:	3308      	adds	r3, #8
 8001bec:	623b      	str	r3, [r7, #32]
          break;
 8001bee:	e01f      	b.n	8001c30 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	68db      	ldr	r3, [r3, #12]
 8001bf4:	330c      	adds	r3, #12
 8001bf6:	623b      	str	r3, [r7, #32]
          break;
 8001bf8:	e01a      	b.n	8001c30 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	689b      	ldr	r3, [r3, #8]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d102      	bne.n	8001c08 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001c02:	2304      	movs	r3, #4
 8001c04:	623b      	str	r3, [r7, #32]
          break;
 8001c06:	e013      	b.n	8001c30 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	689b      	ldr	r3, [r3, #8]
 8001c0c:	2b01      	cmp	r3, #1
 8001c0e:	d105      	bne.n	8001c1c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c10:	2308      	movs	r3, #8
 8001c12:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	69fa      	ldr	r2, [r7, #28]
 8001c18:	611a      	str	r2, [r3, #16]
          break;
 8001c1a:	e009      	b.n	8001c30 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c1c:	2308      	movs	r3, #8
 8001c1e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	69fa      	ldr	r2, [r7, #28]
 8001c24:	615a      	str	r2, [r3, #20]
          break;
 8001c26:	e003      	b.n	8001c30 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	623b      	str	r3, [r7, #32]
          break;
 8001c2c:	e000      	b.n	8001c30 <HAL_GPIO_Init+0x130>
          break;
 8001c2e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001c30:	69bb      	ldr	r3, [r7, #24]
 8001c32:	2bff      	cmp	r3, #255	@ 0xff
 8001c34:	d801      	bhi.n	8001c3a <HAL_GPIO_Init+0x13a>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	e001      	b.n	8001c3e <HAL_GPIO_Init+0x13e>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	3304      	adds	r3, #4
 8001c3e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001c40:	69bb      	ldr	r3, [r7, #24]
 8001c42:	2bff      	cmp	r3, #255	@ 0xff
 8001c44:	d802      	bhi.n	8001c4c <HAL_GPIO_Init+0x14c>
 8001c46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c48:	009b      	lsls	r3, r3, #2
 8001c4a:	e002      	b.n	8001c52 <HAL_GPIO_Init+0x152>
 8001c4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c4e:	3b08      	subs	r3, #8
 8001c50:	009b      	lsls	r3, r3, #2
 8001c52:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	681a      	ldr	r2, [r3, #0]
 8001c58:	210f      	movs	r1, #15
 8001c5a:	693b      	ldr	r3, [r7, #16]
 8001c5c:	fa01 f303 	lsl.w	r3, r1, r3
 8001c60:	43db      	mvns	r3, r3
 8001c62:	401a      	ands	r2, r3
 8001c64:	6a39      	ldr	r1, [r7, #32]
 8001c66:	693b      	ldr	r3, [r7, #16]
 8001c68:	fa01 f303 	lsl.w	r3, r1, r3
 8001c6c:	431a      	orrs	r2, r3
 8001c6e:	697b      	ldr	r3, [r7, #20]
 8001c70:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	f000 80b1 	beq.w	8001de2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001c80:	4b4d      	ldr	r3, [pc, #308]	@ (8001db8 <HAL_GPIO_Init+0x2b8>)
 8001c82:	699b      	ldr	r3, [r3, #24]
 8001c84:	4a4c      	ldr	r2, [pc, #304]	@ (8001db8 <HAL_GPIO_Init+0x2b8>)
 8001c86:	f043 0301 	orr.w	r3, r3, #1
 8001c8a:	6193      	str	r3, [r2, #24]
 8001c8c:	4b4a      	ldr	r3, [pc, #296]	@ (8001db8 <HAL_GPIO_Init+0x2b8>)
 8001c8e:	699b      	ldr	r3, [r3, #24]
 8001c90:	f003 0301 	and.w	r3, r3, #1
 8001c94:	60bb      	str	r3, [r7, #8]
 8001c96:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001c98:	4a48      	ldr	r2, [pc, #288]	@ (8001dbc <HAL_GPIO_Init+0x2bc>)
 8001c9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c9c:	089b      	lsrs	r3, r3, #2
 8001c9e:	3302      	adds	r3, #2
 8001ca0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ca4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001ca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ca8:	f003 0303 	and.w	r3, r3, #3
 8001cac:	009b      	lsls	r3, r3, #2
 8001cae:	220f      	movs	r2, #15
 8001cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb4:	43db      	mvns	r3, r3
 8001cb6:	68fa      	ldr	r2, [r7, #12]
 8001cb8:	4013      	ands	r3, r2
 8001cba:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	4a40      	ldr	r2, [pc, #256]	@ (8001dc0 <HAL_GPIO_Init+0x2c0>)
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	d013      	beq.n	8001cec <HAL_GPIO_Init+0x1ec>
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	4a3f      	ldr	r2, [pc, #252]	@ (8001dc4 <HAL_GPIO_Init+0x2c4>)
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d00d      	beq.n	8001ce8 <HAL_GPIO_Init+0x1e8>
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	4a3e      	ldr	r2, [pc, #248]	@ (8001dc8 <HAL_GPIO_Init+0x2c8>)
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d007      	beq.n	8001ce4 <HAL_GPIO_Init+0x1e4>
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	4a3d      	ldr	r2, [pc, #244]	@ (8001dcc <HAL_GPIO_Init+0x2cc>)
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	d101      	bne.n	8001ce0 <HAL_GPIO_Init+0x1e0>
 8001cdc:	2303      	movs	r3, #3
 8001cde:	e006      	b.n	8001cee <HAL_GPIO_Init+0x1ee>
 8001ce0:	2304      	movs	r3, #4
 8001ce2:	e004      	b.n	8001cee <HAL_GPIO_Init+0x1ee>
 8001ce4:	2302      	movs	r3, #2
 8001ce6:	e002      	b.n	8001cee <HAL_GPIO_Init+0x1ee>
 8001ce8:	2301      	movs	r3, #1
 8001cea:	e000      	b.n	8001cee <HAL_GPIO_Init+0x1ee>
 8001cec:	2300      	movs	r3, #0
 8001cee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001cf0:	f002 0203 	and.w	r2, r2, #3
 8001cf4:	0092      	lsls	r2, r2, #2
 8001cf6:	4093      	lsls	r3, r2
 8001cf8:	68fa      	ldr	r2, [r7, #12]
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001cfe:	492f      	ldr	r1, [pc, #188]	@ (8001dbc <HAL_GPIO_Init+0x2bc>)
 8001d00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d02:	089b      	lsrs	r3, r3, #2
 8001d04:	3302      	adds	r3, #2
 8001d06:	68fa      	ldr	r2, [r7, #12]
 8001d08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d006      	beq.n	8001d26 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001d18:	4b2d      	ldr	r3, [pc, #180]	@ (8001dd0 <HAL_GPIO_Init+0x2d0>)
 8001d1a:	689a      	ldr	r2, [r3, #8]
 8001d1c:	492c      	ldr	r1, [pc, #176]	@ (8001dd0 <HAL_GPIO_Init+0x2d0>)
 8001d1e:	69bb      	ldr	r3, [r7, #24]
 8001d20:	4313      	orrs	r3, r2
 8001d22:	608b      	str	r3, [r1, #8]
 8001d24:	e006      	b.n	8001d34 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001d26:	4b2a      	ldr	r3, [pc, #168]	@ (8001dd0 <HAL_GPIO_Init+0x2d0>)
 8001d28:	689a      	ldr	r2, [r3, #8]
 8001d2a:	69bb      	ldr	r3, [r7, #24]
 8001d2c:	43db      	mvns	r3, r3
 8001d2e:	4928      	ldr	r1, [pc, #160]	@ (8001dd0 <HAL_GPIO_Init+0x2d0>)
 8001d30:	4013      	ands	r3, r2
 8001d32:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d006      	beq.n	8001d4e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001d40:	4b23      	ldr	r3, [pc, #140]	@ (8001dd0 <HAL_GPIO_Init+0x2d0>)
 8001d42:	68da      	ldr	r2, [r3, #12]
 8001d44:	4922      	ldr	r1, [pc, #136]	@ (8001dd0 <HAL_GPIO_Init+0x2d0>)
 8001d46:	69bb      	ldr	r3, [r7, #24]
 8001d48:	4313      	orrs	r3, r2
 8001d4a:	60cb      	str	r3, [r1, #12]
 8001d4c:	e006      	b.n	8001d5c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001d4e:	4b20      	ldr	r3, [pc, #128]	@ (8001dd0 <HAL_GPIO_Init+0x2d0>)
 8001d50:	68da      	ldr	r2, [r3, #12]
 8001d52:	69bb      	ldr	r3, [r7, #24]
 8001d54:	43db      	mvns	r3, r3
 8001d56:	491e      	ldr	r1, [pc, #120]	@ (8001dd0 <HAL_GPIO_Init+0x2d0>)
 8001d58:	4013      	ands	r3, r2
 8001d5a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d006      	beq.n	8001d76 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001d68:	4b19      	ldr	r3, [pc, #100]	@ (8001dd0 <HAL_GPIO_Init+0x2d0>)
 8001d6a:	685a      	ldr	r2, [r3, #4]
 8001d6c:	4918      	ldr	r1, [pc, #96]	@ (8001dd0 <HAL_GPIO_Init+0x2d0>)
 8001d6e:	69bb      	ldr	r3, [r7, #24]
 8001d70:	4313      	orrs	r3, r2
 8001d72:	604b      	str	r3, [r1, #4]
 8001d74:	e006      	b.n	8001d84 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001d76:	4b16      	ldr	r3, [pc, #88]	@ (8001dd0 <HAL_GPIO_Init+0x2d0>)
 8001d78:	685a      	ldr	r2, [r3, #4]
 8001d7a:	69bb      	ldr	r3, [r7, #24]
 8001d7c:	43db      	mvns	r3, r3
 8001d7e:	4914      	ldr	r1, [pc, #80]	@ (8001dd0 <HAL_GPIO_Init+0x2d0>)
 8001d80:	4013      	ands	r3, r2
 8001d82:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d021      	beq.n	8001dd4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001d90:	4b0f      	ldr	r3, [pc, #60]	@ (8001dd0 <HAL_GPIO_Init+0x2d0>)
 8001d92:	681a      	ldr	r2, [r3, #0]
 8001d94:	490e      	ldr	r1, [pc, #56]	@ (8001dd0 <HAL_GPIO_Init+0x2d0>)
 8001d96:	69bb      	ldr	r3, [r7, #24]
 8001d98:	4313      	orrs	r3, r2
 8001d9a:	600b      	str	r3, [r1, #0]
 8001d9c:	e021      	b.n	8001de2 <HAL_GPIO_Init+0x2e2>
 8001d9e:	bf00      	nop
 8001da0:	10320000 	.word	0x10320000
 8001da4:	10310000 	.word	0x10310000
 8001da8:	10220000 	.word	0x10220000
 8001dac:	10210000 	.word	0x10210000
 8001db0:	10120000 	.word	0x10120000
 8001db4:	10110000 	.word	0x10110000
 8001db8:	40021000 	.word	0x40021000
 8001dbc:	40010000 	.word	0x40010000
 8001dc0:	40010800 	.word	0x40010800
 8001dc4:	40010c00 	.word	0x40010c00
 8001dc8:	40011000 	.word	0x40011000
 8001dcc:	40011400 	.word	0x40011400
 8001dd0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001dd4:	4b0b      	ldr	r3, [pc, #44]	@ (8001e04 <HAL_GPIO_Init+0x304>)
 8001dd6:	681a      	ldr	r2, [r3, #0]
 8001dd8:	69bb      	ldr	r3, [r7, #24]
 8001dda:	43db      	mvns	r3, r3
 8001ddc:	4909      	ldr	r1, [pc, #36]	@ (8001e04 <HAL_GPIO_Init+0x304>)
 8001dde:	4013      	ands	r3, r2
 8001de0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001de2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001de4:	3301      	adds	r3, #1
 8001de6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	681a      	ldr	r2, [r3, #0]
 8001dec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dee:	fa22 f303 	lsr.w	r3, r2, r3
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	f47f ae8e 	bne.w	8001b14 <HAL_GPIO_Init+0x14>
  }
}
 8001df8:	bf00      	nop
 8001dfa:	bf00      	nop
 8001dfc:	372c      	adds	r7, #44	@ 0x2c
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bc80      	pop	{r7}
 8001e02:	4770      	bx	lr
 8001e04:	40010400 	.word	0x40010400

08001e08 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b086      	sub	sp, #24
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d101      	bne.n	8001e1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e16:	2301      	movs	r3, #1
 8001e18:	e272      	b.n	8002300 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f003 0301 	and.w	r3, r3, #1
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	f000 8087 	beq.w	8001f36 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e28:	4b92      	ldr	r3, [pc, #584]	@ (8002074 <HAL_RCC_OscConfig+0x26c>)
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	f003 030c 	and.w	r3, r3, #12
 8001e30:	2b04      	cmp	r3, #4
 8001e32:	d00c      	beq.n	8001e4e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001e34:	4b8f      	ldr	r3, [pc, #572]	@ (8002074 <HAL_RCC_OscConfig+0x26c>)
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	f003 030c 	and.w	r3, r3, #12
 8001e3c:	2b08      	cmp	r3, #8
 8001e3e:	d112      	bne.n	8001e66 <HAL_RCC_OscConfig+0x5e>
 8001e40:	4b8c      	ldr	r3, [pc, #560]	@ (8002074 <HAL_RCC_OscConfig+0x26c>)
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e4c:	d10b      	bne.n	8001e66 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e4e:	4b89      	ldr	r3, [pc, #548]	@ (8002074 <HAL_RCC_OscConfig+0x26c>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d06c      	beq.n	8001f34 <HAL_RCC_OscConfig+0x12c>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d168      	bne.n	8001f34 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001e62:	2301      	movs	r3, #1
 8001e64:	e24c      	b.n	8002300 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e6e:	d106      	bne.n	8001e7e <HAL_RCC_OscConfig+0x76>
 8001e70:	4b80      	ldr	r3, [pc, #512]	@ (8002074 <HAL_RCC_OscConfig+0x26c>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a7f      	ldr	r2, [pc, #508]	@ (8002074 <HAL_RCC_OscConfig+0x26c>)
 8001e76:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e7a:	6013      	str	r3, [r2, #0]
 8001e7c:	e02e      	b.n	8001edc <HAL_RCC_OscConfig+0xd4>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d10c      	bne.n	8001ea0 <HAL_RCC_OscConfig+0x98>
 8001e86:	4b7b      	ldr	r3, [pc, #492]	@ (8002074 <HAL_RCC_OscConfig+0x26c>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4a7a      	ldr	r2, [pc, #488]	@ (8002074 <HAL_RCC_OscConfig+0x26c>)
 8001e8c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e90:	6013      	str	r3, [r2, #0]
 8001e92:	4b78      	ldr	r3, [pc, #480]	@ (8002074 <HAL_RCC_OscConfig+0x26c>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4a77      	ldr	r2, [pc, #476]	@ (8002074 <HAL_RCC_OscConfig+0x26c>)
 8001e98:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001e9c:	6013      	str	r3, [r2, #0]
 8001e9e:	e01d      	b.n	8001edc <HAL_RCC_OscConfig+0xd4>
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001ea8:	d10c      	bne.n	8001ec4 <HAL_RCC_OscConfig+0xbc>
 8001eaa:	4b72      	ldr	r3, [pc, #456]	@ (8002074 <HAL_RCC_OscConfig+0x26c>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a71      	ldr	r2, [pc, #452]	@ (8002074 <HAL_RCC_OscConfig+0x26c>)
 8001eb0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001eb4:	6013      	str	r3, [r2, #0]
 8001eb6:	4b6f      	ldr	r3, [pc, #444]	@ (8002074 <HAL_RCC_OscConfig+0x26c>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4a6e      	ldr	r2, [pc, #440]	@ (8002074 <HAL_RCC_OscConfig+0x26c>)
 8001ebc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ec0:	6013      	str	r3, [r2, #0]
 8001ec2:	e00b      	b.n	8001edc <HAL_RCC_OscConfig+0xd4>
 8001ec4:	4b6b      	ldr	r3, [pc, #428]	@ (8002074 <HAL_RCC_OscConfig+0x26c>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a6a      	ldr	r2, [pc, #424]	@ (8002074 <HAL_RCC_OscConfig+0x26c>)
 8001eca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001ece:	6013      	str	r3, [r2, #0]
 8001ed0:	4b68      	ldr	r3, [pc, #416]	@ (8002074 <HAL_RCC_OscConfig+0x26c>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a67      	ldr	r2, [pc, #412]	@ (8002074 <HAL_RCC_OscConfig+0x26c>)
 8001ed6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001eda:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d013      	beq.n	8001f0c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ee4:	f7ff fcfa 	bl	80018dc <HAL_GetTick>
 8001ee8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eea:	e008      	b.n	8001efe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001eec:	f7ff fcf6 	bl	80018dc <HAL_GetTick>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	1ad3      	subs	r3, r2, r3
 8001ef6:	2b64      	cmp	r3, #100	@ 0x64
 8001ef8:	d901      	bls.n	8001efe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001efa:	2303      	movs	r3, #3
 8001efc:	e200      	b.n	8002300 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001efe:	4b5d      	ldr	r3, [pc, #372]	@ (8002074 <HAL_RCC_OscConfig+0x26c>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d0f0      	beq.n	8001eec <HAL_RCC_OscConfig+0xe4>
 8001f0a:	e014      	b.n	8001f36 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f0c:	f7ff fce6 	bl	80018dc <HAL_GetTick>
 8001f10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f12:	e008      	b.n	8001f26 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f14:	f7ff fce2 	bl	80018dc <HAL_GetTick>
 8001f18:	4602      	mov	r2, r0
 8001f1a:	693b      	ldr	r3, [r7, #16]
 8001f1c:	1ad3      	subs	r3, r2, r3
 8001f1e:	2b64      	cmp	r3, #100	@ 0x64
 8001f20:	d901      	bls.n	8001f26 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001f22:	2303      	movs	r3, #3
 8001f24:	e1ec      	b.n	8002300 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f26:	4b53      	ldr	r3, [pc, #332]	@ (8002074 <HAL_RCC_OscConfig+0x26c>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d1f0      	bne.n	8001f14 <HAL_RCC_OscConfig+0x10c>
 8001f32:	e000      	b.n	8001f36 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f003 0302 	and.w	r3, r3, #2
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d063      	beq.n	800200a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f42:	4b4c      	ldr	r3, [pc, #304]	@ (8002074 <HAL_RCC_OscConfig+0x26c>)
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	f003 030c 	and.w	r3, r3, #12
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d00b      	beq.n	8001f66 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001f4e:	4b49      	ldr	r3, [pc, #292]	@ (8002074 <HAL_RCC_OscConfig+0x26c>)
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	f003 030c 	and.w	r3, r3, #12
 8001f56:	2b08      	cmp	r3, #8
 8001f58:	d11c      	bne.n	8001f94 <HAL_RCC_OscConfig+0x18c>
 8001f5a:	4b46      	ldr	r3, [pc, #280]	@ (8002074 <HAL_RCC_OscConfig+0x26c>)
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d116      	bne.n	8001f94 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f66:	4b43      	ldr	r3, [pc, #268]	@ (8002074 <HAL_RCC_OscConfig+0x26c>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f003 0302 	and.w	r3, r3, #2
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d005      	beq.n	8001f7e <HAL_RCC_OscConfig+0x176>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	691b      	ldr	r3, [r3, #16]
 8001f76:	2b01      	cmp	r3, #1
 8001f78:	d001      	beq.n	8001f7e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	e1c0      	b.n	8002300 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f7e:	4b3d      	ldr	r3, [pc, #244]	@ (8002074 <HAL_RCC_OscConfig+0x26c>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	695b      	ldr	r3, [r3, #20]
 8001f8a:	00db      	lsls	r3, r3, #3
 8001f8c:	4939      	ldr	r1, [pc, #228]	@ (8002074 <HAL_RCC_OscConfig+0x26c>)
 8001f8e:	4313      	orrs	r3, r2
 8001f90:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f92:	e03a      	b.n	800200a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	691b      	ldr	r3, [r3, #16]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d020      	beq.n	8001fde <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f9c:	4b36      	ldr	r3, [pc, #216]	@ (8002078 <HAL_RCC_OscConfig+0x270>)
 8001f9e:	2201      	movs	r2, #1
 8001fa0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fa2:	f7ff fc9b 	bl	80018dc <HAL_GetTick>
 8001fa6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fa8:	e008      	b.n	8001fbc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001faa:	f7ff fc97 	bl	80018dc <HAL_GetTick>
 8001fae:	4602      	mov	r2, r0
 8001fb0:	693b      	ldr	r3, [r7, #16]
 8001fb2:	1ad3      	subs	r3, r2, r3
 8001fb4:	2b02      	cmp	r3, #2
 8001fb6:	d901      	bls.n	8001fbc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001fb8:	2303      	movs	r3, #3
 8001fba:	e1a1      	b.n	8002300 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fbc:	4b2d      	ldr	r3, [pc, #180]	@ (8002074 <HAL_RCC_OscConfig+0x26c>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f003 0302 	and.w	r3, r3, #2
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d0f0      	beq.n	8001faa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fc8:	4b2a      	ldr	r3, [pc, #168]	@ (8002074 <HAL_RCC_OscConfig+0x26c>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	695b      	ldr	r3, [r3, #20]
 8001fd4:	00db      	lsls	r3, r3, #3
 8001fd6:	4927      	ldr	r1, [pc, #156]	@ (8002074 <HAL_RCC_OscConfig+0x26c>)
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	600b      	str	r3, [r1, #0]
 8001fdc:	e015      	b.n	800200a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fde:	4b26      	ldr	r3, [pc, #152]	@ (8002078 <HAL_RCC_OscConfig+0x270>)
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fe4:	f7ff fc7a 	bl	80018dc <HAL_GetTick>
 8001fe8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fea:	e008      	b.n	8001ffe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fec:	f7ff fc76 	bl	80018dc <HAL_GetTick>
 8001ff0:	4602      	mov	r2, r0
 8001ff2:	693b      	ldr	r3, [r7, #16]
 8001ff4:	1ad3      	subs	r3, r2, r3
 8001ff6:	2b02      	cmp	r3, #2
 8001ff8:	d901      	bls.n	8001ffe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001ffa:	2303      	movs	r3, #3
 8001ffc:	e180      	b.n	8002300 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ffe:	4b1d      	ldr	r3, [pc, #116]	@ (8002074 <HAL_RCC_OscConfig+0x26c>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f003 0302 	and.w	r3, r3, #2
 8002006:	2b00      	cmp	r3, #0
 8002008:	d1f0      	bne.n	8001fec <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f003 0308 	and.w	r3, r3, #8
 8002012:	2b00      	cmp	r3, #0
 8002014:	d03a      	beq.n	800208c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	699b      	ldr	r3, [r3, #24]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d019      	beq.n	8002052 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800201e:	4b17      	ldr	r3, [pc, #92]	@ (800207c <HAL_RCC_OscConfig+0x274>)
 8002020:	2201      	movs	r2, #1
 8002022:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002024:	f7ff fc5a 	bl	80018dc <HAL_GetTick>
 8002028:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800202a:	e008      	b.n	800203e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800202c:	f7ff fc56 	bl	80018dc <HAL_GetTick>
 8002030:	4602      	mov	r2, r0
 8002032:	693b      	ldr	r3, [r7, #16]
 8002034:	1ad3      	subs	r3, r2, r3
 8002036:	2b02      	cmp	r3, #2
 8002038:	d901      	bls.n	800203e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800203a:	2303      	movs	r3, #3
 800203c:	e160      	b.n	8002300 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800203e:	4b0d      	ldr	r3, [pc, #52]	@ (8002074 <HAL_RCC_OscConfig+0x26c>)
 8002040:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002042:	f003 0302 	and.w	r3, r3, #2
 8002046:	2b00      	cmp	r3, #0
 8002048:	d0f0      	beq.n	800202c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800204a:	2001      	movs	r0, #1
 800204c:	f000 face 	bl	80025ec <RCC_Delay>
 8002050:	e01c      	b.n	800208c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002052:	4b0a      	ldr	r3, [pc, #40]	@ (800207c <HAL_RCC_OscConfig+0x274>)
 8002054:	2200      	movs	r2, #0
 8002056:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002058:	f7ff fc40 	bl	80018dc <HAL_GetTick>
 800205c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800205e:	e00f      	b.n	8002080 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002060:	f7ff fc3c 	bl	80018dc <HAL_GetTick>
 8002064:	4602      	mov	r2, r0
 8002066:	693b      	ldr	r3, [r7, #16]
 8002068:	1ad3      	subs	r3, r2, r3
 800206a:	2b02      	cmp	r3, #2
 800206c:	d908      	bls.n	8002080 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800206e:	2303      	movs	r3, #3
 8002070:	e146      	b.n	8002300 <HAL_RCC_OscConfig+0x4f8>
 8002072:	bf00      	nop
 8002074:	40021000 	.word	0x40021000
 8002078:	42420000 	.word	0x42420000
 800207c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002080:	4b92      	ldr	r3, [pc, #584]	@ (80022cc <HAL_RCC_OscConfig+0x4c4>)
 8002082:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002084:	f003 0302 	and.w	r3, r3, #2
 8002088:	2b00      	cmp	r3, #0
 800208a:	d1e9      	bne.n	8002060 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f003 0304 	and.w	r3, r3, #4
 8002094:	2b00      	cmp	r3, #0
 8002096:	f000 80a6 	beq.w	80021e6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800209a:	2300      	movs	r3, #0
 800209c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800209e:	4b8b      	ldr	r3, [pc, #556]	@ (80022cc <HAL_RCC_OscConfig+0x4c4>)
 80020a0:	69db      	ldr	r3, [r3, #28]
 80020a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d10d      	bne.n	80020c6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020aa:	4b88      	ldr	r3, [pc, #544]	@ (80022cc <HAL_RCC_OscConfig+0x4c4>)
 80020ac:	69db      	ldr	r3, [r3, #28]
 80020ae:	4a87      	ldr	r2, [pc, #540]	@ (80022cc <HAL_RCC_OscConfig+0x4c4>)
 80020b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80020b4:	61d3      	str	r3, [r2, #28]
 80020b6:	4b85      	ldr	r3, [pc, #532]	@ (80022cc <HAL_RCC_OscConfig+0x4c4>)
 80020b8:	69db      	ldr	r3, [r3, #28]
 80020ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020be:	60bb      	str	r3, [r7, #8]
 80020c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020c2:	2301      	movs	r3, #1
 80020c4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020c6:	4b82      	ldr	r3, [pc, #520]	@ (80022d0 <HAL_RCC_OscConfig+0x4c8>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d118      	bne.n	8002104 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020d2:	4b7f      	ldr	r3, [pc, #508]	@ (80022d0 <HAL_RCC_OscConfig+0x4c8>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4a7e      	ldr	r2, [pc, #504]	@ (80022d0 <HAL_RCC_OscConfig+0x4c8>)
 80020d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020de:	f7ff fbfd 	bl	80018dc <HAL_GetTick>
 80020e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020e4:	e008      	b.n	80020f8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020e6:	f7ff fbf9 	bl	80018dc <HAL_GetTick>
 80020ea:	4602      	mov	r2, r0
 80020ec:	693b      	ldr	r3, [r7, #16]
 80020ee:	1ad3      	subs	r3, r2, r3
 80020f0:	2b64      	cmp	r3, #100	@ 0x64
 80020f2:	d901      	bls.n	80020f8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80020f4:	2303      	movs	r3, #3
 80020f6:	e103      	b.n	8002300 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020f8:	4b75      	ldr	r3, [pc, #468]	@ (80022d0 <HAL_RCC_OscConfig+0x4c8>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002100:	2b00      	cmp	r3, #0
 8002102:	d0f0      	beq.n	80020e6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	68db      	ldr	r3, [r3, #12]
 8002108:	2b01      	cmp	r3, #1
 800210a:	d106      	bne.n	800211a <HAL_RCC_OscConfig+0x312>
 800210c:	4b6f      	ldr	r3, [pc, #444]	@ (80022cc <HAL_RCC_OscConfig+0x4c4>)
 800210e:	6a1b      	ldr	r3, [r3, #32]
 8002110:	4a6e      	ldr	r2, [pc, #440]	@ (80022cc <HAL_RCC_OscConfig+0x4c4>)
 8002112:	f043 0301 	orr.w	r3, r3, #1
 8002116:	6213      	str	r3, [r2, #32]
 8002118:	e02d      	b.n	8002176 <HAL_RCC_OscConfig+0x36e>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	68db      	ldr	r3, [r3, #12]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d10c      	bne.n	800213c <HAL_RCC_OscConfig+0x334>
 8002122:	4b6a      	ldr	r3, [pc, #424]	@ (80022cc <HAL_RCC_OscConfig+0x4c4>)
 8002124:	6a1b      	ldr	r3, [r3, #32]
 8002126:	4a69      	ldr	r2, [pc, #420]	@ (80022cc <HAL_RCC_OscConfig+0x4c4>)
 8002128:	f023 0301 	bic.w	r3, r3, #1
 800212c:	6213      	str	r3, [r2, #32]
 800212e:	4b67      	ldr	r3, [pc, #412]	@ (80022cc <HAL_RCC_OscConfig+0x4c4>)
 8002130:	6a1b      	ldr	r3, [r3, #32]
 8002132:	4a66      	ldr	r2, [pc, #408]	@ (80022cc <HAL_RCC_OscConfig+0x4c4>)
 8002134:	f023 0304 	bic.w	r3, r3, #4
 8002138:	6213      	str	r3, [r2, #32]
 800213a:	e01c      	b.n	8002176 <HAL_RCC_OscConfig+0x36e>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	68db      	ldr	r3, [r3, #12]
 8002140:	2b05      	cmp	r3, #5
 8002142:	d10c      	bne.n	800215e <HAL_RCC_OscConfig+0x356>
 8002144:	4b61      	ldr	r3, [pc, #388]	@ (80022cc <HAL_RCC_OscConfig+0x4c4>)
 8002146:	6a1b      	ldr	r3, [r3, #32]
 8002148:	4a60      	ldr	r2, [pc, #384]	@ (80022cc <HAL_RCC_OscConfig+0x4c4>)
 800214a:	f043 0304 	orr.w	r3, r3, #4
 800214e:	6213      	str	r3, [r2, #32]
 8002150:	4b5e      	ldr	r3, [pc, #376]	@ (80022cc <HAL_RCC_OscConfig+0x4c4>)
 8002152:	6a1b      	ldr	r3, [r3, #32]
 8002154:	4a5d      	ldr	r2, [pc, #372]	@ (80022cc <HAL_RCC_OscConfig+0x4c4>)
 8002156:	f043 0301 	orr.w	r3, r3, #1
 800215a:	6213      	str	r3, [r2, #32]
 800215c:	e00b      	b.n	8002176 <HAL_RCC_OscConfig+0x36e>
 800215e:	4b5b      	ldr	r3, [pc, #364]	@ (80022cc <HAL_RCC_OscConfig+0x4c4>)
 8002160:	6a1b      	ldr	r3, [r3, #32]
 8002162:	4a5a      	ldr	r2, [pc, #360]	@ (80022cc <HAL_RCC_OscConfig+0x4c4>)
 8002164:	f023 0301 	bic.w	r3, r3, #1
 8002168:	6213      	str	r3, [r2, #32]
 800216a:	4b58      	ldr	r3, [pc, #352]	@ (80022cc <HAL_RCC_OscConfig+0x4c4>)
 800216c:	6a1b      	ldr	r3, [r3, #32]
 800216e:	4a57      	ldr	r2, [pc, #348]	@ (80022cc <HAL_RCC_OscConfig+0x4c4>)
 8002170:	f023 0304 	bic.w	r3, r3, #4
 8002174:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	68db      	ldr	r3, [r3, #12]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d015      	beq.n	80021aa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800217e:	f7ff fbad 	bl	80018dc <HAL_GetTick>
 8002182:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002184:	e00a      	b.n	800219c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002186:	f7ff fba9 	bl	80018dc <HAL_GetTick>
 800218a:	4602      	mov	r2, r0
 800218c:	693b      	ldr	r3, [r7, #16]
 800218e:	1ad3      	subs	r3, r2, r3
 8002190:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002194:	4293      	cmp	r3, r2
 8002196:	d901      	bls.n	800219c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002198:	2303      	movs	r3, #3
 800219a:	e0b1      	b.n	8002300 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800219c:	4b4b      	ldr	r3, [pc, #300]	@ (80022cc <HAL_RCC_OscConfig+0x4c4>)
 800219e:	6a1b      	ldr	r3, [r3, #32]
 80021a0:	f003 0302 	and.w	r3, r3, #2
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d0ee      	beq.n	8002186 <HAL_RCC_OscConfig+0x37e>
 80021a8:	e014      	b.n	80021d4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021aa:	f7ff fb97 	bl	80018dc <HAL_GetTick>
 80021ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021b0:	e00a      	b.n	80021c8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021b2:	f7ff fb93 	bl	80018dc <HAL_GetTick>
 80021b6:	4602      	mov	r2, r0
 80021b8:	693b      	ldr	r3, [r7, #16]
 80021ba:	1ad3      	subs	r3, r2, r3
 80021bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d901      	bls.n	80021c8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80021c4:	2303      	movs	r3, #3
 80021c6:	e09b      	b.n	8002300 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021c8:	4b40      	ldr	r3, [pc, #256]	@ (80022cc <HAL_RCC_OscConfig+0x4c4>)
 80021ca:	6a1b      	ldr	r3, [r3, #32]
 80021cc:	f003 0302 	and.w	r3, r3, #2
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d1ee      	bne.n	80021b2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80021d4:	7dfb      	ldrb	r3, [r7, #23]
 80021d6:	2b01      	cmp	r3, #1
 80021d8:	d105      	bne.n	80021e6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021da:	4b3c      	ldr	r3, [pc, #240]	@ (80022cc <HAL_RCC_OscConfig+0x4c4>)
 80021dc:	69db      	ldr	r3, [r3, #28]
 80021de:	4a3b      	ldr	r2, [pc, #236]	@ (80022cc <HAL_RCC_OscConfig+0x4c4>)
 80021e0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80021e4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	69db      	ldr	r3, [r3, #28]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	f000 8087 	beq.w	80022fe <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021f0:	4b36      	ldr	r3, [pc, #216]	@ (80022cc <HAL_RCC_OscConfig+0x4c4>)
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	f003 030c 	and.w	r3, r3, #12
 80021f8:	2b08      	cmp	r3, #8
 80021fa:	d061      	beq.n	80022c0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	69db      	ldr	r3, [r3, #28]
 8002200:	2b02      	cmp	r3, #2
 8002202:	d146      	bne.n	8002292 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002204:	4b33      	ldr	r3, [pc, #204]	@ (80022d4 <HAL_RCC_OscConfig+0x4cc>)
 8002206:	2200      	movs	r2, #0
 8002208:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800220a:	f7ff fb67 	bl	80018dc <HAL_GetTick>
 800220e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002210:	e008      	b.n	8002224 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002212:	f7ff fb63 	bl	80018dc <HAL_GetTick>
 8002216:	4602      	mov	r2, r0
 8002218:	693b      	ldr	r3, [r7, #16]
 800221a:	1ad3      	subs	r3, r2, r3
 800221c:	2b02      	cmp	r3, #2
 800221e:	d901      	bls.n	8002224 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002220:	2303      	movs	r3, #3
 8002222:	e06d      	b.n	8002300 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002224:	4b29      	ldr	r3, [pc, #164]	@ (80022cc <HAL_RCC_OscConfig+0x4c4>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800222c:	2b00      	cmp	r3, #0
 800222e:	d1f0      	bne.n	8002212 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6a1b      	ldr	r3, [r3, #32]
 8002234:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002238:	d108      	bne.n	800224c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800223a:	4b24      	ldr	r3, [pc, #144]	@ (80022cc <HAL_RCC_OscConfig+0x4c4>)
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	689b      	ldr	r3, [r3, #8]
 8002246:	4921      	ldr	r1, [pc, #132]	@ (80022cc <HAL_RCC_OscConfig+0x4c4>)
 8002248:	4313      	orrs	r3, r2
 800224a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800224c:	4b1f      	ldr	r3, [pc, #124]	@ (80022cc <HAL_RCC_OscConfig+0x4c4>)
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6a19      	ldr	r1, [r3, #32]
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800225c:	430b      	orrs	r3, r1
 800225e:	491b      	ldr	r1, [pc, #108]	@ (80022cc <HAL_RCC_OscConfig+0x4c4>)
 8002260:	4313      	orrs	r3, r2
 8002262:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002264:	4b1b      	ldr	r3, [pc, #108]	@ (80022d4 <HAL_RCC_OscConfig+0x4cc>)
 8002266:	2201      	movs	r2, #1
 8002268:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800226a:	f7ff fb37 	bl	80018dc <HAL_GetTick>
 800226e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002270:	e008      	b.n	8002284 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002272:	f7ff fb33 	bl	80018dc <HAL_GetTick>
 8002276:	4602      	mov	r2, r0
 8002278:	693b      	ldr	r3, [r7, #16]
 800227a:	1ad3      	subs	r3, r2, r3
 800227c:	2b02      	cmp	r3, #2
 800227e:	d901      	bls.n	8002284 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002280:	2303      	movs	r3, #3
 8002282:	e03d      	b.n	8002300 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002284:	4b11      	ldr	r3, [pc, #68]	@ (80022cc <HAL_RCC_OscConfig+0x4c4>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800228c:	2b00      	cmp	r3, #0
 800228e:	d0f0      	beq.n	8002272 <HAL_RCC_OscConfig+0x46a>
 8002290:	e035      	b.n	80022fe <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002292:	4b10      	ldr	r3, [pc, #64]	@ (80022d4 <HAL_RCC_OscConfig+0x4cc>)
 8002294:	2200      	movs	r2, #0
 8002296:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002298:	f7ff fb20 	bl	80018dc <HAL_GetTick>
 800229c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800229e:	e008      	b.n	80022b2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022a0:	f7ff fb1c 	bl	80018dc <HAL_GetTick>
 80022a4:	4602      	mov	r2, r0
 80022a6:	693b      	ldr	r3, [r7, #16]
 80022a8:	1ad3      	subs	r3, r2, r3
 80022aa:	2b02      	cmp	r3, #2
 80022ac:	d901      	bls.n	80022b2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80022ae:	2303      	movs	r3, #3
 80022b0:	e026      	b.n	8002300 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022b2:	4b06      	ldr	r3, [pc, #24]	@ (80022cc <HAL_RCC_OscConfig+0x4c4>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d1f0      	bne.n	80022a0 <HAL_RCC_OscConfig+0x498>
 80022be:	e01e      	b.n	80022fe <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	69db      	ldr	r3, [r3, #28]
 80022c4:	2b01      	cmp	r3, #1
 80022c6:	d107      	bne.n	80022d8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80022c8:	2301      	movs	r3, #1
 80022ca:	e019      	b.n	8002300 <HAL_RCC_OscConfig+0x4f8>
 80022cc:	40021000 	.word	0x40021000
 80022d0:	40007000 	.word	0x40007000
 80022d4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80022d8:	4b0b      	ldr	r3, [pc, #44]	@ (8002308 <HAL_RCC_OscConfig+0x500>)
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6a1b      	ldr	r3, [r3, #32]
 80022e8:	429a      	cmp	r2, r3
 80022ea:	d106      	bne.n	80022fa <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022f6:	429a      	cmp	r2, r3
 80022f8:	d001      	beq.n	80022fe <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80022fa:	2301      	movs	r3, #1
 80022fc:	e000      	b.n	8002300 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80022fe:	2300      	movs	r3, #0
}
 8002300:	4618      	mov	r0, r3
 8002302:	3718      	adds	r7, #24
 8002304:	46bd      	mov	sp, r7
 8002306:	bd80      	pop	{r7, pc}
 8002308:	40021000 	.word	0x40021000

0800230c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b084      	sub	sp, #16
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
 8002314:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d101      	bne.n	8002320 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800231c:	2301      	movs	r3, #1
 800231e:	e0d0      	b.n	80024c2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002320:	4b6a      	ldr	r3, [pc, #424]	@ (80024cc <HAL_RCC_ClockConfig+0x1c0>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f003 0307 	and.w	r3, r3, #7
 8002328:	683a      	ldr	r2, [r7, #0]
 800232a:	429a      	cmp	r2, r3
 800232c:	d910      	bls.n	8002350 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800232e:	4b67      	ldr	r3, [pc, #412]	@ (80024cc <HAL_RCC_ClockConfig+0x1c0>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f023 0207 	bic.w	r2, r3, #7
 8002336:	4965      	ldr	r1, [pc, #404]	@ (80024cc <HAL_RCC_ClockConfig+0x1c0>)
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	4313      	orrs	r3, r2
 800233c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800233e:	4b63      	ldr	r3, [pc, #396]	@ (80024cc <HAL_RCC_ClockConfig+0x1c0>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f003 0307 	and.w	r3, r3, #7
 8002346:	683a      	ldr	r2, [r7, #0]
 8002348:	429a      	cmp	r2, r3
 800234a:	d001      	beq.n	8002350 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800234c:	2301      	movs	r3, #1
 800234e:	e0b8      	b.n	80024c2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f003 0302 	and.w	r3, r3, #2
 8002358:	2b00      	cmp	r3, #0
 800235a:	d020      	beq.n	800239e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f003 0304 	and.w	r3, r3, #4
 8002364:	2b00      	cmp	r3, #0
 8002366:	d005      	beq.n	8002374 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002368:	4b59      	ldr	r3, [pc, #356]	@ (80024d0 <HAL_RCC_ClockConfig+0x1c4>)
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	4a58      	ldr	r2, [pc, #352]	@ (80024d0 <HAL_RCC_ClockConfig+0x1c4>)
 800236e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002372:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f003 0308 	and.w	r3, r3, #8
 800237c:	2b00      	cmp	r3, #0
 800237e:	d005      	beq.n	800238c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002380:	4b53      	ldr	r3, [pc, #332]	@ (80024d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	4a52      	ldr	r2, [pc, #328]	@ (80024d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002386:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800238a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800238c:	4b50      	ldr	r3, [pc, #320]	@ (80024d0 <HAL_RCC_ClockConfig+0x1c4>)
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	689b      	ldr	r3, [r3, #8]
 8002398:	494d      	ldr	r1, [pc, #308]	@ (80024d0 <HAL_RCC_ClockConfig+0x1c4>)
 800239a:	4313      	orrs	r3, r2
 800239c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f003 0301 	and.w	r3, r3, #1
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d040      	beq.n	800242c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	2b01      	cmp	r3, #1
 80023b0:	d107      	bne.n	80023c2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023b2:	4b47      	ldr	r3, [pc, #284]	@ (80024d0 <HAL_RCC_ClockConfig+0x1c4>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d115      	bne.n	80023ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023be:	2301      	movs	r3, #1
 80023c0:	e07f      	b.n	80024c2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	2b02      	cmp	r3, #2
 80023c8:	d107      	bne.n	80023da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023ca:	4b41      	ldr	r3, [pc, #260]	@ (80024d0 <HAL_RCC_ClockConfig+0x1c4>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d109      	bne.n	80023ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	e073      	b.n	80024c2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023da:	4b3d      	ldr	r3, [pc, #244]	@ (80024d0 <HAL_RCC_ClockConfig+0x1c4>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f003 0302 	and.w	r3, r3, #2
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d101      	bne.n	80023ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
 80023e8:	e06b      	b.n	80024c2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023ea:	4b39      	ldr	r3, [pc, #228]	@ (80024d0 <HAL_RCC_ClockConfig+0x1c4>)
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	f023 0203 	bic.w	r2, r3, #3
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	4936      	ldr	r1, [pc, #216]	@ (80024d0 <HAL_RCC_ClockConfig+0x1c4>)
 80023f8:	4313      	orrs	r3, r2
 80023fa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023fc:	f7ff fa6e 	bl	80018dc <HAL_GetTick>
 8002400:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002402:	e00a      	b.n	800241a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002404:	f7ff fa6a 	bl	80018dc <HAL_GetTick>
 8002408:	4602      	mov	r2, r0
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	1ad3      	subs	r3, r2, r3
 800240e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002412:	4293      	cmp	r3, r2
 8002414:	d901      	bls.n	800241a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002416:	2303      	movs	r3, #3
 8002418:	e053      	b.n	80024c2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800241a:	4b2d      	ldr	r3, [pc, #180]	@ (80024d0 <HAL_RCC_ClockConfig+0x1c4>)
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	f003 020c 	and.w	r2, r3, #12
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	009b      	lsls	r3, r3, #2
 8002428:	429a      	cmp	r2, r3
 800242a:	d1eb      	bne.n	8002404 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800242c:	4b27      	ldr	r3, [pc, #156]	@ (80024cc <HAL_RCC_ClockConfig+0x1c0>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f003 0307 	and.w	r3, r3, #7
 8002434:	683a      	ldr	r2, [r7, #0]
 8002436:	429a      	cmp	r2, r3
 8002438:	d210      	bcs.n	800245c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800243a:	4b24      	ldr	r3, [pc, #144]	@ (80024cc <HAL_RCC_ClockConfig+0x1c0>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f023 0207 	bic.w	r2, r3, #7
 8002442:	4922      	ldr	r1, [pc, #136]	@ (80024cc <HAL_RCC_ClockConfig+0x1c0>)
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	4313      	orrs	r3, r2
 8002448:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800244a:	4b20      	ldr	r3, [pc, #128]	@ (80024cc <HAL_RCC_ClockConfig+0x1c0>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f003 0307 	and.w	r3, r3, #7
 8002452:	683a      	ldr	r2, [r7, #0]
 8002454:	429a      	cmp	r2, r3
 8002456:	d001      	beq.n	800245c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002458:	2301      	movs	r3, #1
 800245a:	e032      	b.n	80024c2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f003 0304 	and.w	r3, r3, #4
 8002464:	2b00      	cmp	r3, #0
 8002466:	d008      	beq.n	800247a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002468:	4b19      	ldr	r3, [pc, #100]	@ (80024d0 <HAL_RCC_ClockConfig+0x1c4>)
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	68db      	ldr	r3, [r3, #12]
 8002474:	4916      	ldr	r1, [pc, #88]	@ (80024d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002476:	4313      	orrs	r3, r2
 8002478:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f003 0308 	and.w	r3, r3, #8
 8002482:	2b00      	cmp	r3, #0
 8002484:	d009      	beq.n	800249a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002486:	4b12      	ldr	r3, [pc, #72]	@ (80024d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	691b      	ldr	r3, [r3, #16]
 8002492:	00db      	lsls	r3, r3, #3
 8002494:	490e      	ldr	r1, [pc, #56]	@ (80024d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002496:	4313      	orrs	r3, r2
 8002498:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800249a:	f000 f821 	bl	80024e0 <HAL_RCC_GetSysClockFreq>
 800249e:	4602      	mov	r2, r0
 80024a0:	4b0b      	ldr	r3, [pc, #44]	@ (80024d0 <HAL_RCC_ClockConfig+0x1c4>)
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	091b      	lsrs	r3, r3, #4
 80024a6:	f003 030f 	and.w	r3, r3, #15
 80024aa:	490a      	ldr	r1, [pc, #40]	@ (80024d4 <HAL_RCC_ClockConfig+0x1c8>)
 80024ac:	5ccb      	ldrb	r3, [r1, r3]
 80024ae:	fa22 f303 	lsr.w	r3, r2, r3
 80024b2:	4a09      	ldr	r2, [pc, #36]	@ (80024d8 <HAL_RCC_ClockConfig+0x1cc>)
 80024b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80024b6:	4b09      	ldr	r3, [pc, #36]	@ (80024dc <HAL_RCC_ClockConfig+0x1d0>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4618      	mov	r0, r3
 80024bc:	f7ff f9cc 	bl	8001858 <HAL_InitTick>

  return HAL_OK;
 80024c0:	2300      	movs	r3, #0
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	3710      	adds	r7, #16
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}
 80024ca:	bf00      	nop
 80024cc:	40022000 	.word	0x40022000
 80024d0:	40021000 	.word	0x40021000
 80024d4:	08006b20 	.word	0x08006b20
 80024d8:	20000000 	.word	0x20000000
 80024dc:	20000004 	.word	0x20000004

080024e0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024e0:	b480      	push	{r7}
 80024e2:	b087      	sub	sp, #28
 80024e4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80024e6:	2300      	movs	r3, #0
 80024e8:	60fb      	str	r3, [r7, #12]
 80024ea:	2300      	movs	r3, #0
 80024ec:	60bb      	str	r3, [r7, #8]
 80024ee:	2300      	movs	r3, #0
 80024f0:	617b      	str	r3, [r7, #20]
 80024f2:	2300      	movs	r3, #0
 80024f4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80024f6:	2300      	movs	r3, #0
 80024f8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80024fa:	4b1e      	ldr	r3, [pc, #120]	@ (8002574 <HAL_RCC_GetSysClockFreq+0x94>)
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	f003 030c 	and.w	r3, r3, #12
 8002506:	2b04      	cmp	r3, #4
 8002508:	d002      	beq.n	8002510 <HAL_RCC_GetSysClockFreq+0x30>
 800250a:	2b08      	cmp	r3, #8
 800250c:	d003      	beq.n	8002516 <HAL_RCC_GetSysClockFreq+0x36>
 800250e:	e027      	b.n	8002560 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002510:	4b19      	ldr	r3, [pc, #100]	@ (8002578 <HAL_RCC_GetSysClockFreq+0x98>)
 8002512:	613b      	str	r3, [r7, #16]
      break;
 8002514:	e027      	b.n	8002566 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	0c9b      	lsrs	r3, r3, #18
 800251a:	f003 030f 	and.w	r3, r3, #15
 800251e:	4a17      	ldr	r2, [pc, #92]	@ (800257c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002520:	5cd3      	ldrb	r3, [r2, r3]
 8002522:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800252a:	2b00      	cmp	r3, #0
 800252c:	d010      	beq.n	8002550 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800252e:	4b11      	ldr	r3, [pc, #68]	@ (8002574 <HAL_RCC_GetSysClockFreq+0x94>)
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	0c5b      	lsrs	r3, r3, #17
 8002534:	f003 0301 	and.w	r3, r3, #1
 8002538:	4a11      	ldr	r2, [pc, #68]	@ (8002580 <HAL_RCC_GetSysClockFreq+0xa0>)
 800253a:	5cd3      	ldrb	r3, [r2, r3]
 800253c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	4a0d      	ldr	r2, [pc, #52]	@ (8002578 <HAL_RCC_GetSysClockFreq+0x98>)
 8002542:	fb03 f202 	mul.w	r2, r3, r2
 8002546:	68bb      	ldr	r3, [r7, #8]
 8002548:	fbb2 f3f3 	udiv	r3, r2, r3
 800254c:	617b      	str	r3, [r7, #20]
 800254e:	e004      	b.n	800255a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	4a0c      	ldr	r2, [pc, #48]	@ (8002584 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002554:	fb02 f303 	mul.w	r3, r2, r3
 8002558:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800255a:	697b      	ldr	r3, [r7, #20]
 800255c:	613b      	str	r3, [r7, #16]
      break;
 800255e:	e002      	b.n	8002566 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002560:	4b05      	ldr	r3, [pc, #20]	@ (8002578 <HAL_RCC_GetSysClockFreq+0x98>)
 8002562:	613b      	str	r3, [r7, #16]
      break;
 8002564:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002566:	693b      	ldr	r3, [r7, #16]
}
 8002568:	4618      	mov	r0, r3
 800256a:	371c      	adds	r7, #28
 800256c:	46bd      	mov	sp, r7
 800256e:	bc80      	pop	{r7}
 8002570:	4770      	bx	lr
 8002572:	bf00      	nop
 8002574:	40021000 	.word	0x40021000
 8002578:	007a1200 	.word	0x007a1200
 800257c:	08006b38 	.word	0x08006b38
 8002580:	08006b48 	.word	0x08006b48
 8002584:	003d0900 	.word	0x003d0900

08002588 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002588:	b480      	push	{r7}
 800258a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800258c:	4b02      	ldr	r3, [pc, #8]	@ (8002598 <HAL_RCC_GetHCLKFreq+0x10>)
 800258e:	681b      	ldr	r3, [r3, #0]
}
 8002590:	4618      	mov	r0, r3
 8002592:	46bd      	mov	sp, r7
 8002594:	bc80      	pop	{r7}
 8002596:	4770      	bx	lr
 8002598:	20000000 	.word	0x20000000

0800259c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80025a0:	f7ff fff2 	bl	8002588 <HAL_RCC_GetHCLKFreq>
 80025a4:	4602      	mov	r2, r0
 80025a6:	4b05      	ldr	r3, [pc, #20]	@ (80025bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	0a1b      	lsrs	r3, r3, #8
 80025ac:	f003 0307 	and.w	r3, r3, #7
 80025b0:	4903      	ldr	r1, [pc, #12]	@ (80025c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80025b2:	5ccb      	ldrb	r3, [r1, r3]
 80025b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	bd80      	pop	{r7, pc}
 80025bc:	40021000 	.word	0x40021000
 80025c0:	08006b30 	.word	0x08006b30

080025c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80025c8:	f7ff ffde 	bl	8002588 <HAL_RCC_GetHCLKFreq>
 80025cc:	4602      	mov	r2, r0
 80025ce:	4b05      	ldr	r3, [pc, #20]	@ (80025e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	0adb      	lsrs	r3, r3, #11
 80025d4:	f003 0307 	and.w	r3, r3, #7
 80025d8:	4903      	ldr	r1, [pc, #12]	@ (80025e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80025da:	5ccb      	ldrb	r3, [r1, r3]
 80025dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	bd80      	pop	{r7, pc}
 80025e4:	40021000 	.word	0x40021000
 80025e8:	08006b30 	.word	0x08006b30

080025ec <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b085      	sub	sp, #20
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80025f4:	4b0a      	ldr	r3, [pc, #40]	@ (8002620 <RCC_Delay+0x34>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a0a      	ldr	r2, [pc, #40]	@ (8002624 <RCC_Delay+0x38>)
 80025fa:	fba2 2303 	umull	r2, r3, r2, r3
 80025fe:	0a5b      	lsrs	r3, r3, #9
 8002600:	687a      	ldr	r2, [r7, #4]
 8002602:	fb02 f303 	mul.w	r3, r2, r3
 8002606:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002608:	bf00      	nop
  }
  while (Delay --);
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	1e5a      	subs	r2, r3, #1
 800260e:	60fa      	str	r2, [r7, #12]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d1f9      	bne.n	8002608 <RCC_Delay+0x1c>
}
 8002614:	bf00      	nop
 8002616:	bf00      	nop
 8002618:	3714      	adds	r7, #20
 800261a:	46bd      	mov	sp, r7
 800261c:	bc80      	pop	{r7}
 800261e:	4770      	bx	lr
 8002620:	20000000 	.word	0x20000000
 8002624:	10624dd3 	.word	0x10624dd3

08002628 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b082      	sub	sp, #8
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d101      	bne.n	800263a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	e041      	b.n	80026be <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002640:	b2db      	uxtb	r3, r3
 8002642:	2b00      	cmp	r3, #0
 8002644:	d106      	bne.n	8002654 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2200      	movs	r2, #0
 800264a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800264e:	6878      	ldr	r0, [r7, #4]
 8002650:	f7fe ff00 	bl	8001454 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2202      	movs	r2, #2
 8002658:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681a      	ldr	r2, [r3, #0]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	3304      	adds	r3, #4
 8002664:	4619      	mov	r1, r3
 8002666:	4610      	mov	r0, r2
 8002668:	f000 fd0a 	bl	8003080 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2201      	movs	r2, #1
 8002670:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2201      	movs	r2, #1
 8002678:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2201      	movs	r2, #1
 8002680:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2201      	movs	r2, #1
 8002688:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2201      	movs	r2, #1
 8002690:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2201      	movs	r2, #1
 8002698:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2201      	movs	r2, #1
 80026a0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2201      	movs	r2, #1
 80026a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2201      	movs	r2, #1
 80026b0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2201      	movs	r2, #1
 80026b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80026bc:	2300      	movs	r3, #0
}
 80026be:	4618      	mov	r0, r3
 80026c0:	3708      	adds	r7, #8
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}

080026c6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80026c6:	b580      	push	{r7, lr}
 80026c8:	b082      	sub	sp, #8
 80026ca:	af00      	add	r7, sp, #0
 80026cc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d101      	bne.n	80026d8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80026d4:	2301      	movs	r3, #1
 80026d6:	e041      	b.n	800275c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80026de:	b2db      	uxtb	r3, r3
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d106      	bne.n	80026f2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2200      	movs	r2, #0
 80026e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80026ec:	6878      	ldr	r0, [r7, #4]
 80026ee:	f000 f839 	bl	8002764 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2202      	movs	r2, #2
 80026f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681a      	ldr	r2, [r3, #0]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	3304      	adds	r3, #4
 8002702:	4619      	mov	r1, r3
 8002704:	4610      	mov	r0, r2
 8002706:	f000 fcbb 	bl	8003080 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2201      	movs	r2, #1
 800270e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2201      	movs	r2, #1
 8002716:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2201      	movs	r2, #1
 800271e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2201      	movs	r2, #1
 8002726:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2201      	movs	r2, #1
 800272e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2201      	movs	r2, #1
 8002736:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2201      	movs	r2, #1
 800273e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2201      	movs	r2, #1
 8002746:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2201      	movs	r2, #1
 800274e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2201      	movs	r2, #1
 8002756:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800275a:	2300      	movs	r3, #0
}
 800275c:	4618      	mov	r0, r3
 800275e:	3708      	adds	r7, #8
 8002760:	46bd      	mov	sp, r7
 8002762:	bd80      	pop	{r7, pc}

08002764 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002764:	b480      	push	{r7}
 8002766:	b083      	sub	sp, #12
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800276c:	bf00      	nop
 800276e:	370c      	adds	r7, #12
 8002770:	46bd      	mov	sp, r7
 8002772:	bc80      	pop	{r7}
 8002774:	4770      	bx	lr
	...

08002778 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b084      	sub	sp, #16
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
 8002780:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d109      	bne.n	800279c <HAL_TIM_PWM_Start+0x24>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800278e:	b2db      	uxtb	r3, r3
 8002790:	2b01      	cmp	r3, #1
 8002792:	bf14      	ite	ne
 8002794:	2301      	movne	r3, #1
 8002796:	2300      	moveq	r3, #0
 8002798:	b2db      	uxtb	r3, r3
 800279a:	e022      	b.n	80027e2 <HAL_TIM_PWM_Start+0x6a>
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	2b04      	cmp	r3, #4
 80027a0:	d109      	bne.n	80027b6 <HAL_TIM_PWM_Start+0x3e>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80027a8:	b2db      	uxtb	r3, r3
 80027aa:	2b01      	cmp	r3, #1
 80027ac:	bf14      	ite	ne
 80027ae:	2301      	movne	r3, #1
 80027b0:	2300      	moveq	r3, #0
 80027b2:	b2db      	uxtb	r3, r3
 80027b4:	e015      	b.n	80027e2 <HAL_TIM_PWM_Start+0x6a>
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	2b08      	cmp	r3, #8
 80027ba:	d109      	bne.n	80027d0 <HAL_TIM_PWM_Start+0x58>
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80027c2:	b2db      	uxtb	r3, r3
 80027c4:	2b01      	cmp	r3, #1
 80027c6:	bf14      	ite	ne
 80027c8:	2301      	movne	r3, #1
 80027ca:	2300      	moveq	r3, #0
 80027cc:	b2db      	uxtb	r3, r3
 80027ce:	e008      	b.n	80027e2 <HAL_TIM_PWM_Start+0x6a>
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80027d6:	b2db      	uxtb	r3, r3
 80027d8:	2b01      	cmp	r3, #1
 80027da:	bf14      	ite	ne
 80027dc:	2301      	movne	r3, #1
 80027de:	2300      	moveq	r3, #0
 80027e0:	b2db      	uxtb	r3, r3
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d001      	beq.n	80027ea <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
 80027e8:	e05e      	b.n	80028a8 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d104      	bne.n	80027fa <HAL_TIM_PWM_Start+0x82>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2202      	movs	r2, #2
 80027f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80027f8:	e013      	b.n	8002822 <HAL_TIM_PWM_Start+0xaa>
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	2b04      	cmp	r3, #4
 80027fe:	d104      	bne.n	800280a <HAL_TIM_PWM_Start+0x92>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2202      	movs	r2, #2
 8002804:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002808:	e00b      	b.n	8002822 <HAL_TIM_PWM_Start+0xaa>
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	2b08      	cmp	r3, #8
 800280e:	d104      	bne.n	800281a <HAL_TIM_PWM_Start+0xa2>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2202      	movs	r2, #2
 8002814:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002818:	e003      	b.n	8002822 <HAL_TIM_PWM_Start+0xaa>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2202      	movs	r2, #2
 800281e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	2201      	movs	r2, #1
 8002828:	6839      	ldr	r1, [r7, #0]
 800282a:	4618      	mov	r0, r3
 800282c:	f001 f853 	bl	80038d6 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a1e      	ldr	r2, [pc, #120]	@ (80028b0 <HAL_TIM_PWM_Start+0x138>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d107      	bne.n	800284a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002848:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a18      	ldr	r2, [pc, #96]	@ (80028b0 <HAL_TIM_PWM_Start+0x138>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d00e      	beq.n	8002872 <HAL_TIM_PWM_Start+0xfa>
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800285c:	d009      	beq.n	8002872 <HAL_TIM_PWM_Start+0xfa>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a14      	ldr	r2, [pc, #80]	@ (80028b4 <HAL_TIM_PWM_Start+0x13c>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d004      	beq.n	8002872 <HAL_TIM_PWM_Start+0xfa>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a12      	ldr	r2, [pc, #72]	@ (80028b8 <HAL_TIM_PWM_Start+0x140>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d111      	bne.n	8002896 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	689b      	ldr	r3, [r3, #8]
 8002878:	f003 0307 	and.w	r3, r3, #7
 800287c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	2b06      	cmp	r3, #6
 8002882:	d010      	beq.n	80028a6 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	681a      	ldr	r2, [r3, #0]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f042 0201 	orr.w	r2, r2, #1
 8002892:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002894:	e007      	b.n	80028a6 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	681a      	ldr	r2, [r3, #0]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f042 0201 	orr.w	r2, r2, #1
 80028a4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80028a6:	2300      	movs	r3, #0
}
 80028a8:	4618      	mov	r0, r3
 80028aa:	3710      	adds	r7, #16
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bd80      	pop	{r7, pc}
 80028b0:	40012c00 	.word	0x40012c00
 80028b4:	40000400 	.word	0x40000400
 80028b8:	40000800 	.word	0x40000800

080028bc <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b082      	sub	sp, #8
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d101      	bne.n	80028ce <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80028ca:	2301      	movs	r3, #1
 80028cc:	e041      	b.n	8002952 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80028d4:	b2db      	uxtb	r3, r3
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d106      	bne.n	80028e8 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2200      	movs	r2, #0
 80028de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80028e2:	6878      	ldr	r0, [r7, #4]
 80028e4:	f000 f839 	bl	800295a <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2202      	movs	r2, #2
 80028ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681a      	ldr	r2, [r3, #0]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	3304      	adds	r3, #4
 80028f8:	4619      	mov	r1, r3
 80028fa:	4610      	mov	r0, r2
 80028fc:	f000 fbc0 	bl	8003080 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2201      	movs	r2, #1
 8002904:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2201      	movs	r2, #1
 800290c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2201      	movs	r2, #1
 8002914:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2201      	movs	r2, #1
 800291c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2201      	movs	r2, #1
 8002924:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2201      	movs	r2, #1
 800292c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2201      	movs	r2, #1
 8002934:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2201      	movs	r2, #1
 800293c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2201      	movs	r2, #1
 8002944:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2201      	movs	r2, #1
 800294c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002950:	2300      	movs	r3, #0
}
 8002952:	4618      	mov	r0, r3
 8002954:	3708      	adds	r7, #8
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}

0800295a <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800295a:	b480      	push	{r7}
 800295c:	b083      	sub	sp, #12
 800295e:	af00      	add	r7, sp, #0
 8002960:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8002962:	bf00      	nop
 8002964:	370c      	adds	r7, #12
 8002966:	46bd      	mov	sp, r7
 8002968:	bc80      	pop	{r7}
 800296a:	4770      	bx	lr

0800296c <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b084      	sub	sp, #16
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
 8002974:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d104      	bne.n	8002986 <HAL_TIM_IC_Start+0x1a>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002982:	b2db      	uxtb	r3, r3
 8002984:	e013      	b.n	80029ae <HAL_TIM_IC_Start+0x42>
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	2b04      	cmp	r3, #4
 800298a:	d104      	bne.n	8002996 <HAL_TIM_IC_Start+0x2a>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002992:	b2db      	uxtb	r3, r3
 8002994:	e00b      	b.n	80029ae <HAL_TIM_IC_Start+0x42>
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	2b08      	cmp	r3, #8
 800299a:	d104      	bne.n	80029a6 <HAL_TIM_IC_Start+0x3a>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80029a2:	b2db      	uxtb	r3, r3
 80029a4:	e003      	b.n	80029ae <HAL_TIM_IC_Start+0x42>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80029ac:	b2db      	uxtb	r3, r3
 80029ae:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d104      	bne.n	80029c0 <HAL_TIM_IC_Start+0x54>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80029bc:	b2db      	uxtb	r3, r3
 80029be:	e013      	b.n	80029e8 <HAL_TIM_IC_Start+0x7c>
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	2b04      	cmp	r3, #4
 80029c4:	d104      	bne.n	80029d0 <HAL_TIM_IC_Start+0x64>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80029cc:	b2db      	uxtb	r3, r3
 80029ce:	e00b      	b.n	80029e8 <HAL_TIM_IC_Start+0x7c>
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	2b08      	cmp	r3, #8
 80029d4:	d104      	bne.n	80029e0 <HAL_TIM_IC_Start+0x74>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80029dc:	b2db      	uxtb	r3, r3
 80029de:	e003      	b.n	80029e8 <HAL_TIM_IC_Start+0x7c>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80029e6:	b2db      	uxtb	r3, r3
 80029e8:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80029ea:	7bfb      	ldrb	r3, [r7, #15]
 80029ec:	2b01      	cmp	r3, #1
 80029ee:	d102      	bne.n	80029f6 <HAL_TIM_IC_Start+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80029f0:	7bbb      	ldrb	r3, [r7, #14]
 80029f2:	2b01      	cmp	r3, #1
 80029f4:	d001      	beq.n	80029fa <HAL_TIM_IC_Start+0x8e>
  {
    return HAL_ERROR;
 80029f6:	2301      	movs	r3, #1
 80029f8:	e06d      	b.n	8002ad6 <HAL_TIM_IC_Start+0x16a>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d104      	bne.n	8002a0a <HAL_TIM_IC_Start+0x9e>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2202      	movs	r2, #2
 8002a04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002a08:	e013      	b.n	8002a32 <HAL_TIM_IC_Start+0xc6>
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	2b04      	cmp	r3, #4
 8002a0e:	d104      	bne.n	8002a1a <HAL_TIM_IC_Start+0xae>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2202      	movs	r2, #2
 8002a14:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002a18:	e00b      	b.n	8002a32 <HAL_TIM_IC_Start+0xc6>
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	2b08      	cmp	r3, #8
 8002a1e:	d104      	bne.n	8002a2a <HAL_TIM_IC_Start+0xbe>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2202      	movs	r2, #2
 8002a24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002a28:	e003      	b.n	8002a32 <HAL_TIM_IC_Start+0xc6>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2202      	movs	r2, #2
 8002a2e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d104      	bne.n	8002a42 <HAL_TIM_IC_Start+0xd6>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2202      	movs	r2, #2
 8002a3c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002a40:	e013      	b.n	8002a6a <HAL_TIM_IC_Start+0xfe>
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	2b04      	cmp	r3, #4
 8002a46:	d104      	bne.n	8002a52 <HAL_TIM_IC_Start+0xe6>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2202      	movs	r2, #2
 8002a4c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002a50:	e00b      	b.n	8002a6a <HAL_TIM_IC_Start+0xfe>
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	2b08      	cmp	r3, #8
 8002a56:	d104      	bne.n	8002a62 <HAL_TIM_IC_Start+0xf6>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2202      	movs	r2, #2
 8002a5c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002a60:	e003      	b.n	8002a6a <HAL_TIM_IC_Start+0xfe>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2202      	movs	r2, #2
 8002a66:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	2201      	movs	r2, #1
 8002a70:	6839      	ldr	r1, [r7, #0]
 8002a72:	4618      	mov	r0, r3
 8002a74:	f000 ff2f 	bl	80038d6 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a18      	ldr	r2, [pc, #96]	@ (8002ae0 <HAL_TIM_IC_Start+0x174>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d00e      	beq.n	8002aa0 <HAL_TIM_IC_Start+0x134>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a8a:	d009      	beq.n	8002aa0 <HAL_TIM_IC_Start+0x134>
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a14      	ldr	r2, [pc, #80]	@ (8002ae4 <HAL_TIM_IC_Start+0x178>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d004      	beq.n	8002aa0 <HAL_TIM_IC_Start+0x134>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4a13      	ldr	r2, [pc, #76]	@ (8002ae8 <HAL_TIM_IC_Start+0x17c>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d111      	bne.n	8002ac4 <HAL_TIM_IC_Start+0x158>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	f003 0307 	and.w	r3, r3, #7
 8002aaa:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002aac:	68bb      	ldr	r3, [r7, #8]
 8002aae:	2b06      	cmp	r3, #6
 8002ab0:	d010      	beq.n	8002ad4 <HAL_TIM_IC_Start+0x168>
    {
      __HAL_TIM_ENABLE(htim);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	681a      	ldr	r2, [r3, #0]
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f042 0201 	orr.w	r2, r2, #1
 8002ac0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ac2:	e007      	b.n	8002ad4 <HAL_TIM_IC_Start+0x168>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	681a      	ldr	r2, [r3, #0]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f042 0201 	orr.w	r2, r2, #1
 8002ad2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002ad4:	2300      	movs	r3, #0
}
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	3710      	adds	r7, #16
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}
 8002ade:	bf00      	nop
 8002ae0:	40012c00 	.word	0x40012c00
 8002ae4:	40000400 	.word	0x40000400
 8002ae8:	40000800 	.word	0x40000800

08002aec <HAL_TIM_IC_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b082      	sub	sp, #8
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
 8002af4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	2200      	movs	r2, #0
 8002afc:	6839      	ldr	r1, [r7, #0]
 8002afe:	4618      	mov	r0, r3
 8002b00:	f000 fee9 	bl	80038d6 <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	6a1a      	ldr	r2, [r3, #32]
 8002b0a:	f241 1311 	movw	r3, #4369	@ 0x1111
 8002b0e:	4013      	ands	r3, r2
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d10f      	bne.n	8002b34 <HAL_TIM_IC_Stop+0x48>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	6a1a      	ldr	r2, [r3, #32]
 8002b1a:	f240 4344 	movw	r3, #1092	@ 0x444
 8002b1e:	4013      	ands	r3, r2
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d107      	bne.n	8002b34 <HAL_TIM_IC_Stop+0x48>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	681a      	ldr	r2, [r3, #0]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f022 0201 	bic.w	r2, r2, #1
 8002b32:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d104      	bne.n	8002b44 <HAL_TIM_IC_Stop+0x58>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2201      	movs	r2, #1
 8002b3e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002b42:	e013      	b.n	8002b6c <HAL_TIM_IC_Stop+0x80>
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	2b04      	cmp	r3, #4
 8002b48:	d104      	bne.n	8002b54 <HAL_TIM_IC_Stop+0x68>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2201      	movs	r2, #1
 8002b4e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002b52:	e00b      	b.n	8002b6c <HAL_TIM_IC_Stop+0x80>
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	2b08      	cmp	r3, #8
 8002b58:	d104      	bne.n	8002b64 <HAL_TIM_IC_Stop+0x78>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2201      	movs	r2, #1
 8002b5e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002b62:	e003      	b.n	8002b6c <HAL_TIM_IC_Stop+0x80>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2201      	movs	r2, #1
 8002b68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d104      	bne.n	8002b7c <HAL_TIM_IC_Stop+0x90>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2201      	movs	r2, #1
 8002b76:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002b7a:	e013      	b.n	8002ba4 <HAL_TIM_IC_Stop+0xb8>
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	2b04      	cmp	r3, #4
 8002b80:	d104      	bne.n	8002b8c <HAL_TIM_IC_Stop+0xa0>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2201      	movs	r2, #1
 8002b86:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002b8a:	e00b      	b.n	8002ba4 <HAL_TIM_IC_Stop+0xb8>
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	2b08      	cmp	r3, #8
 8002b90:	d104      	bne.n	8002b9c <HAL_TIM_IC_Stop+0xb0>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2201      	movs	r2, #1
 8002b96:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002b9a:	e003      	b.n	8002ba4 <HAL_TIM_IC_Stop+0xb8>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Return function status */
  return HAL_OK;
 8002ba4:	2300      	movs	r3, #0
}
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	3708      	adds	r7, #8
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}

08002bae <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8002bae:	b580      	push	{r7, lr}
 8002bb0:	b086      	sub	sp, #24
 8002bb2:	af00      	add	r7, sp, #0
 8002bb4:	60f8      	str	r0, [r7, #12]
 8002bb6:	60b9      	str	r1, [r7, #8]
 8002bb8:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002bc4:	2b01      	cmp	r3, #1
 8002bc6:	d101      	bne.n	8002bcc <HAL_TIM_IC_ConfigChannel+0x1e>
 8002bc8:	2302      	movs	r3, #2
 8002bca:	e088      	b.n	8002cde <HAL_TIM_IC_ConfigChannel+0x130>
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	2201      	movs	r2, #1
 8002bd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d11b      	bne.n	8002c12 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002bde:	68bb      	ldr	r3, [r7, #8]
 8002be0:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002be2:	68bb      	ldr	r3, [r7, #8]
 8002be4:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002be6:	68bb      	ldr	r3, [r7, #8]
 8002be8:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8002bea:	f000 fcd1 	bl	8003590 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	699a      	ldr	r2, [r3, #24]
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f022 020c 	bic.w	r2, r2, #12
 8002bfc:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	6999      	ldr	r1, [r3, #24]
 8002c04:	68bb      	ldr	r3, [r7, #8]
 8002c06:	689a      	ldr	r2, [r3, #8]
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	430a      	orrs	r2, r1
 8002c0e:	619a      	str	r2, [r3, #24]
 8002c10:	e060      	b.n	8002cd4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2b04      	cmp	r3, #4
 8002c16:	d11c      	bne.n	8002c52 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002c1c:	68bb      	ldr	r3, [r7, #8]
 8002c1e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002c20:	68bb      	ldr	r3, [r7, #8]
 8002c22:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8002c28:	f000 fd3a 	bl	80036a0 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	699a      	ldr	r2, [r3, #24]
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8002c3a:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	6999      	ldr	r1, [r3, #24]
 8002c42:	68bb      	ldr	r3, [r7, #8]
 8002c44:	689b      	ldr	r3, [r3, #8]
 8002c46:	021a      	lsls	r2, r3, #8
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	430a      	orrs	r2, r1
 8002c4e:	619a      	str	r2, [r3, #24]
 8002c50:	e040      	b.n	8002cd4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2b08      	cmp	r3, #8
 8002c56:	d11b      	bne.n	8002c90 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002c60:	68bb      	ldr	r3, [r7, #8]
 8002c62:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002c64:	68bb      	ldr	r3, [r7, #8]
 8002c66:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8002c68:	f000 fd85 	bl	8003776 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	69da      	ldr	r2, [r3, #28]
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f022 020c 	bic.w	r2, r2, #12
 8002c7a:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	69d9      	ldr	r1, [r3, #28]
 8002c82:	68bb      	ldr	r3, [r7, #8]
 8002c84:	689a      	ldr	r2, [r3, #8]
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	430a      	orrs	r2, r1
 8002c8c:	61da      	str	r2, [r3, #28]
 8002c8e:	e021      	b.n	8002cd4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2b0c      	cmp	r3, #12
 8002c94:	d11c      	bne.n	8002cd0 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002c9a:	68bb      	ldr	r3, [r7, #8]
 8002c9c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002c9e:	68bb      	ldr	r3, [r7, #8]
 8002ca0:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002ca2:	68bb      	ldr	r3, [r7, #8]
 8002ca4:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8002ca6:	f000 fda1 	bl	80037ec <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	69da      	ldr	r2, [r3, #28]
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8002cb8:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	69d9      	ldr	r1, [r3, #28]
 8002cc0:	68bb      	ldr	r3, [r7, #8]
 8002cc2:	689b      	ldr	r3, [r3, #8]
 8002cc4:	021a      	lsls	r2, r3, #8
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	430a      	orrs	r2, r1
 8002ccc:	61da      	str	r2, [r3, #28]
 8002cce:	e001      	b.n	8002cd4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002cdc:	7dfb      	ldrb	r3, [r7, #23]
}
 8002cde:	4618      	mov	r0, r3
 8002ce0:	3718      	adds	r7, #24
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}
	...

08002ce8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b086      	sub	sp, #24
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	60f8      	str	r0, [r7, #12]
 8002cf0:	60b9      	str	r1, [r7, #8]
 8002cf2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002cfe:	2b01      	cmp	r3, #1
 8002d00:	d101      	bne.n	8002d06 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002d02:	2302      	movs	r3, #2
 8002d04:	e0ae      	b.n	8002e64 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	2201      	movs	r2, #1
 8002d0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2b0c      	cmp	r3, #12
 8002d12:	f200 809f 	bhi.w	8002e54 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002d16:	a201      	add	r2, pc, #4	@ (adr r2, 8002d1c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002d18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d1c:	08002d51 	.word	0x08002d51
 8002d20:	08002e55 	.word	0x08002e55
 8002d24:	08002e55 	.word	0x08002e55
 8002d28:	08002e55 	.word	0x08002e55
 8002d2c:	08002d91 	.word	0x08002d91
 8002d30:	08002e55 	.word	0x08002e55
 8002d34:	08002e55 	.word	0x08002e55
 8002d38:	08002e55 	.word	0x08002e55
 8002d3c:	08002dd3 	.word	0x08002dd3
 8002d40:	08002e55 	.word	0x08002e55
 8002d44:	08002e55 	.word	0x08002e55
 8002d48:	08002e55 	.word	0x08002e55
 8002d4c:	08002e13 	.word	0x08002e13
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	68b9      	ldr	r1, [r7, #8]
 8002d56:	4618      	mov	r0, r3
 8002d58:	f000 fa00 	bl	800315c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	699a      	ldr	r2, [r3, #24]
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f042 0208 	orr.w	r2, r2, #8
 8002d6a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	699a      	ldr	r2, [r3, #24]
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f022 0204 	bic.w	r2, r2, #4
 8002d7a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	6999      	ldr	r1, [r3, #24]
 8002d82:	68bb      	ldr	r3, [r7, #8]
 8002d84:	691a      	ldr	r2, [r3, #16]
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	430a      	orrs	r2, r1
 8002d8c:	619a      	str	r2, [r3, #24]
      break;
 8002d8e:	e064      	b.n	8002e5a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	68b9      	ldr	r1, [r7, #8]
 8002d96:	4618      	mov	r0, r3
 8002d98:	f000 fa46 	bl	8003228 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	699a      	ldr	r2, [r3, #24]
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002daa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	699a      	ldr	r2, [r3, #24]
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002dba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	6999      	ldr	r1, [r3, #24]
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	691b      	ldr	r3, [r3, #16]
 8002dc6:	021a      	lsls	r2, r3, #8
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	430a      	orrs	r2, r1
 8002dce:	619a      	str	r2, [r3, #24]
      break;
 8002dd0:	e043      	b.n	8002e5a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	68b9      	ldr	r1, [r7, #8]
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f000 fa8f 	bl	80032fc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	69da      	ldr	r2, [r3, #28]
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f042 0208 	orr.w	r2, r2, #8
 8002dec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	69da      	ldr	r2, [r3, #28]
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f022 0204 	bic.w	r2, r2, #4
 8002dfc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	69d9      	ldr	r1, [r3, #28]
 8002e04:	68bb      	ldr	r3, [r7, #8]
 8002e06:	691a      	ldr	r2, [r3, #16]
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	430a      	orrs	r2, r1
 8002e0e:	61da      	str	r2, [r3, #28]
      break;
 8002e10:	e023      	b.n	8002e5a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	68b9      	ldr	r1, [r7, #8]
 8002e18:	4618      	mov	r0, r3
 8002e1a:	f000 fad9 	bl	80033d0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	69da      	ldr	r2, [r3, #28]
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002e2c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	69da      	ldr	r2, [r3, #28]
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002e3c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	69d9      	ldr	r1, [r3, #28]
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	691b      	ldr	r3, [r3, #16]
 8002e48:	021a      	lsls	r2, r3, #8
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	430a      	orrs	r2, r1
 8002e50:	61da      	str	r2, [r3, #28]
      break;
 8002e52:	e002      	b.n	8002e5a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002e54:	2301      	movs	r3, #1
 8002e56:	75fb      	strb	r3, [r7, #23]
      break;
 8002e58:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002e62:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e64:	4618      	mov	r0, r3
 8002e66:	3718      	adds	r7, #24
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bd80      	pop	{r7, pc}

08002e6c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b084      	sub	sp, #16
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
 8002e74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002e76:	2300      	movs	r3, #0
 8002e78:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002e80:	2b01      	cmp	r3, #1
 8002e82:	d101      	bne.n	8002e88 <HAL_TIM_ConfigClockSource+0x1c>
 8002e84:	2302      	movs	r3, #2
 8002e86:	e0b4      	b.n	8002ff2 <HAL_TIM_ConfigClockSource+0x186>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2202      	movs	r2, #2
 8002e94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	689b      	ldr	r3, [r3, #8]
 8002e9e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002ea0:	68bb      	ldr	r3, [r7, #8]
 8002ea2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002ea6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ea8:	68bb      	ldr	r3, [r7, #8]
 8002eaa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002eae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	68ba      	ldr	r2, [r7, #8]
 8002eb6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002ec0:	d03e      	beq.n	8002f40 <HAL_TIM_ConfigClockSource+0xd4>
 8002ec2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002ec6:	f200 8087 	bhi.w	8002fd8 <HAL_TIM_ConfigClockSource+0x16c>
 8002eca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002ece:	f000 8086 	beq.w	8002fde <HAL_TIM_ConfigClockSource+0x172>
 8002ed2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002ed6:	d87f      	bhi.n	8002fd8 <HAL_TIM_ConfigClockSource+0x16c>
 8002ed8:	2b70      	cmp	r3, #112	@ 0x70
 8002eda:	d01a      	beq.n	8002f12 <HAL_TIM_ConfigClockSource+0xa6>
 8002edc:	2b70      	cmp	r3, #112	@ 0x70
 8002ede:	d87b      	bhi.n	8002fd8 <HAL_TIM_ConfigClockSource+0x16c>
 8002ee0:	2b60      	cmp	r3, #96	@ 0x60
 8002ee2:	d050      	beq.n	8002f86 <HAL_TIM_ConfigClockSource+0x11a>
 8002ee4:	2b60      	cmp	r3, #96	@ 0x60
 8002ee6:	d877      	bhi.n	8002fd8 <HAL_TIM_ConfigClockSource+0x16c>
 8002ee8:	2b50      	cmp	r3, #80	@ 0x50
 8002eea:	d03c      	beq.n	8002f66 <HAL_TIM_ConfigClockSource+0xfa>
 8002eec:	2b50      	cmp	r3, #80	@ 0x50
 8002eee:	d873      	bhi.n	8002fd8 <HAL_TIM_ConfigClockSource+0x16c>
 8002ef0:	2b40      	cmp	r3, #64	@ 0x40
 8002ef2:	d058      	beq.n	8002fa6 <HAL_TIM_ConfigClockSource+0x13a>
 8002ef4:	2b40      	cmp	r3, #64	@ 0x40
 8002ef6:	d86f      	bhi.n	8002fd8 <HAL_TIM_ConfigClockSource+0x16c>
 8002ef8:	2b30      	cmp	r3, #48	@ 0x30
 8002efa:	d064      	beq.n	8002fc6 <HAL_TIM_ConfigClockSource+0x15a>
 8002efc:	2b30      	cmp	r3, #48	@ 0x30
 8002efe:	d86b      	bhi.n	8002fd8 <HAL_TIM_ConfigClockSource+0x16c>
 8002f00:	2b20      	cmp	r3, #32
 8002f02:	d060      	beq.n	8002fc6 <HAL_TIM_ConfigClockSource+0x15a>
 8002f04:	2b20      	cmp	r3, #32
 8002f06:	d867      	bhi.n	8002fd8 <HAL_TIM_ConfigClockSource+0x16c>
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d05c      	beq.n	8002fc6 <HAL_TIM_ConfigClockSource+0x15a>
 8002f0c:	2b10      	cmp	r3, #16
 8002f0e:	d05a      	beq.n	8002fc6 <HAL_TIM_ConfigClockSource+0x15a>
 8002f10:	e062      	b.n	8002fd8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002f22:	f000 fcb9 	bl	8003898 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	689b      	ldr	r3, [r3, #8]
 8002f2c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002f2e:	68bb      	ldr	r3, [r7, #8]
 8002f30:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002f34:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	68ba      	ldr	r2, [r7, #8]
 8002f3c:	609a      	str	r2, [r3, #8]
      break;
 8002f3e:	e04f      	b.n	8002fe0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002f50:	f000 fca2 	bl	8003898 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	689a      	ldr	r2, [r3, #8]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002f62:	609a      	str	r2, [r3, #8]
      break;
 8002f64:	e03c      	b.n	8002fe0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f72:	461a      	mov	r2, r3
 8002f74:	f000 fb66 	bl	8003644 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	2150      	movs	r1, #80	@ 0x50
 8002f7e:	4618      	mov	r0, r3
 8002f80:	f000 fc70 	bl	8003864 <TIM_ITRx_SetConfig>
      break;
 8002f84:	e02c      	b.n	8002fe0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002f92:	461a      	mov	r2, r3
 8002f94:	f000 fbc0 	bl	8003718 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	2160      	movs	r1, #96	@ 0x60
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f000 fc60 	bl	8003864 <TIM_ITRx_SetConfig>
      break;
 8002fa4:	e01c      	b.n	8002fe0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002fb2:	461a      	mov	r2, r3
 8002fb4:	f000 fb46 	bl	8003644 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	2140      	movs	r1, #64	@ 0x40
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	f000 fc50 	bl	8003864 <TIM_ITRx_SetConfig>
      break;
 8002fc4:	e00c      	b.n	8002fe0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681a      	ldr	r2, [r3, #0]
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4619      	mov	r1, r3
 8002fd0:	4610      	mov	r0, r2
 8002fd2:	f000 fc47 	bl	8003864 <TIM_ITRx_SetConfig>
      break;
 8002fd6:	e003      	b.n	8002fe0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002fd8:	2301      	movs	r3, #1
 8002fda:	73fb      	strb	r3, [r7, #15]
      break;
 8002fdc:	e000      	b.n	8002fe0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002fde:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2200      	movs	r2, #0
 8002fec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002ff0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	3710      	adds	r7, #16
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd80      	pop	{r7, pc}

08002ffa <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8002ffa:	b580      	push	{r7, lr}
 8002ffc:	b082      	sub	sp, #8
 8002ffe:	af00      	add	r7, sp, #0
 8003000:	6078      	str	r0, [r7, #4]
 8003002:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800300a:	2b01      	cmp	r3, #1
 800300c:	d101      	bne.n	8003012 <HAL_TIM_SlaveConfigSynchro+0x18>
 800300e:	2302      	movs	r3, #2
 8003010:	e031      	b.n	8003076 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2201      	movs	r2, #1
 8003016:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2202      	movs	r2, #2
 800301e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8003022:	6839      	ldr	r1, [r7, #0]
 8003024:	6878      	ldr	r0, [r7, #4]
 8003026:	f000 fa21 	bl	800346c <TIM_SlaveTimer_SetConfig>
 800302a:	4603      	mov	r3, r0
 800302c:	2b00      	cmp	r3, #0
 800302e:	d009      	beq.n	8003044 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2201      	movs	r2, #1
 8003034:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2200      	movs	r2, #0
 800303c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 8003040:	2301      	movs	r3, #1
 8003042:	e018      	b.n	8003076 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	68da      	ldr	r2, [r3, #12]
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003052:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	68da      	ldr	r2, [r3, #12]
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003062:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2201      	movs	r2, #1
 8003068:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2200      	movs	r2, #0
 8003070:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003074:	2300      	movs	r3, #0
}
 8003076:	4618      	mov	r0, r3
 8003078:	3708      	adds	r7, #8
 800307a:	46bd      	mov	sp, r7
 800307c:	bd80      	pop	{r7, pc}
	...

08003080 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003080:	b480      	push	{r7}
 8003082:	b085      	sub	sp, #20
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
 8003088:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	4a2f      	ldr	r2, [pc, #188]	@ (8003150 <TIM_Base_SetConfig+0xd0>)
 8003094:	4293      	cmp	r3, r2
 8003096:	d00b      	beq.n	80030b0 <TIM_Base_SetConfig+0x30>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800309e:	d007      	beq.n	80030b0 <TIM_Base_SetConfig+0x30>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	4a2c      	ldr	r2, [pc, #176]	@ (8003154 <TIM_Base_SetConfig+0xd4>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d003      	beq.n	80030b0 <TIM_Base_SetConfig+0x30>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	4a2b      	ldr	r2, [pc, #172]	@ (8003158 <TIM_Base_SetConfig+0xd8>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d108      	bne.n	80030c2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80030b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	68fa      	ldr	r2, [r7, #12]
 80030be:	4313      	orrs	r3, r2
 80030c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	4a22      	ldr	r2, [pc, #136]	@ (8003150 <TIM_Base_SetConfig+0xd0>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d00b      	beq.n	80030e2 <TIM_Base_SetConfig+0x62>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80030d0:	d007      	beq.n	80030e2 <TIM_Base_SetConfig+0x62>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	4a1f      	ldr	r2, [pc, #124]	@ (8003154 <TIM_Base_SetConfig+0xd4>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d003      	beq.n	80030e2 <TIM_Base_SetConfig+0x62>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	4a1e      	ldr	r2, [pc, #120]	@ (8003158 <TIM_Base_SetConfig+0xd8>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d108      	bne.n	80030f4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80030e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	68db      	ldr	r3, [r3, #12]
 80030ee:	68fa      	ldr	r2, [r7, #12]
 80030f0:	4313      	orrs	r3, r2
 80030f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	695b      	ldr	r3, [r3, #20]
 80030fe:	4313      	orrs	r3, r2
 8003100:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	68fa      	ldr	r2, [r7, #12]
 8003106:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	689a      	ldr	r2, [r3, #8]
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	681a      	ldr	r2, [r3, #0]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	4a0d      	ldr	r2, [pc, #52]	@ (8003150 <TIM_Base_SetConfig+0xd0>)
 800311c:	4293      	cmp	r3, r2
 800311e:	d103      	bne.n	8003128 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	691a      	ldr	r2, [r3, #16]
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2201      	movs	r2, #1
 800312c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	691b      	ldr	r3, [r3, #16]
 8003132:	f003 0301 	and.w	r3, r3, #1
 8003136:	2b00      	cmp	r3, #0
 8003138:	d005      	beq.n	8003146 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	691b      	ldr	r3, [r3, #16]
 800313e:	f023 0201 	bic.w	r2, r3, #1
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	611a      	str	r2, [r3, #16]
  }
}
 8003146:	bf00      	nop
 8003148:	3714      	adds	r7, #20
 800314a:	46bd      	mov	sp, r7
 800314c:	bc80      	pop	{r7}
 800314e:	4770      	bx	lr
 8003150:	40012c00 	.word	0x40012c00
 8003154:	40000400 	.word	0x40000400
 8003158:	40000800 	.word	0x40000800

0800315c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800315c:	b480      	push	{r7}
 800315e:	b087      	sub	sp, #28
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
 8003164:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6a1b      	ldr	r3, [r3, #32]
 800316a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6a1b      	ldr	r3, [r3, #32]
 8003170:	f023 0201 	bic.w	r2, r3, #1
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	699b      	ldr	r3, [r3, #24]
 8003182:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800318a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	f023 0303 	bic.w	r3, r3, #3
 8003192:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	68fa      	ldr	r2, [r7, #12]
 800319a:	4313      	orrs	r3, r2
 800319c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800319e:	697b      	ldr	r3, [r7, #20]
 80031a0:	f023 0302 	bic.w	r3, r3, #2
 80031a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	689b      	ldr	r3, [r3, #8]
 80031aa:	697a      	ldr	r2, [r7, #20]
 80031ac:	4313      	orrs	r3, r2
 80031ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	4a1c      	ldr	r2, [pc, #112]	@ (8003224 <TIM_OC1_SetConfig+0xc8>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d10c      	bne.n	80031d2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80031b8:	697b      	ldr	r3, [r7, #20]
 80031ba:	f023 0308 	bic.w	r3, r3, #8
 80031be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	68db      	ldr	r3, [r3, #12]
 80031c4:	697a      	ldr	r2, [r7, #20]
 80031c6:	4313      	orrs	r3, r2
 80031c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80031ca:	697b      	ldr	r3, [r7, #20]
 80031cc:	f023 0304 	bic.w	r3, r3, #4
 80031d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	4a13      	ldr	r2, [pc, #76]	@ (8003224 <TIM_OC1_SetConfig+0xc8>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d111      	bne.n	80031fe <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80031da:	693b      	ldr	r3, [r7, #16]
 80031dc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80031e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80031e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	695b      	ldr	r3, [r3, #20]
 80031ee:	693a      	ldr	r2, [r7, #16]
 80031f0:	4313      	orrs	r3, r2
 80031f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	699b      	ldr	r3, [r3, #24]
 80031f8:	693a      	ldr	r2, [r7, #16]
 80031fa:	4313      	orrs	r3, r2
 80031fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	693a      	ldr	r2, [r7, #16]
 8003202:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	68fa      	ldr	r2, [r7, #12]
 8003208:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	685a      	ldr	r2, [r3, #4]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	697a      	ldr	r2, [r7, #20]
 8003216:	621a      	str	r2, [r3, #32]
}
 8003218:	bf00      	nop
 800321a:	371c      	adds	r7, #28
 800321c:	46bd      	mov	sp, r7
 800321e:	bc80      	pop	{r7}
 8003220:	4770      	bx	lr
 8003222:	bf00      	nop
 8003224:	40012c00 	.word	0x40012c00

08003228 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003228:	b480      	push	{r7}
 800322a:	b087      	sub	sp, #28
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
 8003230:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6a1b      	ldr	r3, [r3, #32]
 8003236:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6a1b      	ldr	r3, [r3, #32]
 800323c:	f023 0210 	bic.w	r2, r3, #16
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	699b      	ldr	r3, [r3, #24]
 800324e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003256:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800325e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	021b      	lsls	r3, r3, #8
 8003266:	68fa      	ldr	r2, [r7, #12]
 8003268:	4313      	orrs	r3, r2
 800326a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800326c:	697b      	ldr	r3, [r7, #20]
 800326e:	f023 0320 	bic.w	r3, r3, #32
 8003272:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	689b      	ldr	r3, [r3, #8]
 8003278:	011b      	lsls	r3, r3, #4
 800327a:	697a      	ldr	r2, [r7, #20]
 800327c:	4313      	orrs	r3, r2
 800327e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	4a1d      	ldr	r2, [pc, #116]	@ (80032f8 <TIM_OC2_SetConfig+0xd0>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d10d      	bne.n	80032a4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003288:	697b      	ldr	r3, [r7, #20]
 800328a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800328e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	68db      	ldr	r3, [r3, #12]
 8003294:	011b      	lsls	r3, r3, #4
 8003296:	697a      	ldr	r2, [r7, #20]
 8003298:	4313      	orrs	r3, r2
 800329a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800329c:	697b      	ldr	r3, [r7, #20]
 800329e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80032a2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	4a14      	ldr	r2, [pc, #80]	@ (80032f8 <TIM_OC2_SetConfig+0xd0>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d113      	bne.n	80032d4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80032ac:	693b      	ldr	r3, [r7, #16]
 80032ae:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80032b2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80032b4:	693b      	ldr	r3, [r7, #16]
 80032b6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80032ba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	695b      	ldr	r3, [r3, #20]
 80032c0:	009b      	lsls	r3, r3, #2
 80032c2:	693a      	ldr	r2, [r7, #16]
 80032c4:	4313      	orrs	r3, r2
 80032c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	699b      	ldr	r3, [r3, #24]
 80032cc:	009b      	lsls	r3, r3, #2
 80032ce:	693a      	ldr	r2, [r7, #16]
 80032d0:	4313      	orrs	r3, r2
 80032d2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	693a      	ldr	r2, [r7, #16]
 80032d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	68fa      	ldr	r2, [r7, #12]
 80032de:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	685a      	ldr	r2, [r3, #4]
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	697a      	ldr	r2, [r7, #20]
 80032ec:	621a      	str	r2, [r3, #32]
}
 80032ee:	bf00      	nop
 80032f0:	371c      	adds	r7, #28
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bc80      	pop	{r7}
 80032f6:	4770      	bx	lr
 80032f8:	40012c00 	.word	0x40012c00

080032fc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80032fc:	b480      	push	{r7}
 80032fe:	b087      	sub	sp, #28
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
 8003304:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6a1b      	ldr	r3, [r3, #32]
 800330a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6a1b      	ldr	r3, [r3, #32]
 8003310:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	69db      	ldr	r3, [r3, #28]
 8003322:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800332a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	f023 0303 	bic.w	r3, r3, #3
 8003332:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	68fa      	ldr	r2, [r7, #12]
 800333a:	4313      	orrs	r3, r2
 800333c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800333e:	697b      	ldr	r3, [r7, #20]
 8003340:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003344:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	689b      	ldr	r3, [r3, #8]
 800334a:	021b      	lsls	r3, r3, #8
 800334c:	697a      	ldr	r2, [r7, #20]
 800334e:	4313      	orrs	r3, r2
 8003350:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	4a1d      	ldr	r2, [pc, #116]	@ (80033cc <TIM_OC3_SetConfig+0xd0>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d10d      	bne.n	8003376 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800335a:	697b      	ldr	r3, [r7, #20]
 800335c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003360:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	68db      	ldr	r3, [r3, #12]
 8003366:	021b      	lsls	r3, r3, #8
 8003368:	697a      	ldr	r2, [r7, #20]
 800336a:	4313      	orrs	r3, r2
 800336c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800336e:	697b      	ldr	r3, [r7, #20]
 8003370:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003374:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	4a14      	ldr	r2, [pc, #80]	@ (80033cc <TIM_OC3_SetConfig+0xd0>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d113      	bne.n	80033a6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800337e:	693b      	ldr	r3, [r7, #16]
 8003380:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003384:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003386:	693b      	ldr	r3, [r7, #16]
 8003388:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800338c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	695b      	ldr	r3, [r3, #20]
 8003392:	011b      	lsls	r3, r3, #4
 8003394:	693a      	ldr	r2, [r7, #16]
 8003396:	4313      	orrs	r3, r2
 8003398:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	699b      	ldr	r3, [r3, #24]
 800339e:	011b      	lsls	r3, r3, #4
 80033a0:	693a      	ldr	r2, [r7, #16]
 80033a2:	4313      	orrs	r3, r2
 80033a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	693a      	ldr	r2, [r7, #16]
 80033aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	68fa      	ldr	r2, [r7, #12]
 80033b0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	685a      	ldr	r2, [r3, #4]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	697a      	ldr	r2, [r7, #20]
 80033be:	621a      	str	r2, [r3, #32]
}
 80033c0:	bf00      	nop
 80033c2:	371c      	adds	r7, #28
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bc80      	pop	{r7}
 80033c8:	4770      	bx	lr
 80033ca:	bf00      	nop
 80033cc:	40012c00 	.word	0x40012c00

080033d0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80033d0:	b480      	push	{r7}
 80033d2:	b087      	sub	sp, #28
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
 80033d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6a1b      	ldr	r3, [r3, #32]
 80033de:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6a1b      	ldr	r3, [r3, #32]
 80033e4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	69db      	ldr	r3, [r3, #28]
 80033f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80033fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003406:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	021b      	lsls	r3, r3, #8
 800340e:	68fa      	ldr	r2, [r7, #12]
 8003410:	4313      	orrs	r3, r2
 8003412:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003414:	693b      	ldr	r3, [r7, #16]
 8003416:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800341a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	689b      	ldr	r3, [r3, #8]
 8003420:	031b      	lsls	r3, r3, #12
 8003422:	693a      	ldr	r2, [r7, #16]
 8003424:	4313      	orrs	r3, r2
 8003426:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	4a0f      	ldr	r2, [pc, #60]	@ (8003468 <TIM_OC4_SetConfig+0x98>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d109      	bne.n	8003444 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003430:	697b      	ldr	r3, [r7, #20]
 8003432:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003436:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	695b      	ldr	r3, [r3, #20]
 800343c:	019b      	lsls	r3, r3, #6
 800343e:	697a      	ldr	r2, [r7, #20]
 8003440:	4313      	orrs	r3, r2
 8003442:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	697a      	ldr	r2, [r7, #20]
 8003448:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	68fa      	ldr	r2, [r7, #12]
 800344e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	685a      	ldr	r2, [r3, #4]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	693a      	ldr	r2, [r7, #16]
 800345c:	621a      	str	r2, [r3, #32]
}
 800345e:	bf00      	nop
 8003460:	371c      	adds	r7, #28
 8003462:	46bd      	mov	sp, r7
 8003464:	bc80      	pop	{r7}
 8003466:	4770      	bx	lr
 8003468:	40012c00 	.word	0x40012c00

0800346c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b086      	sub	sp, #24
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
 8003474:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003476:	2300      	movs	r3, #0
 8003478:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	689b      	ldr	r3, [r3, #8]
 8003480:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003482:	693b      	ldr	r3, [r7, #16]
 8003484:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003488:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	693a      	ldr	r2, [r7, #16]
 8003490:	4313      	orrs	r3, r2
 8003492:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8003494:	693b      	ldr	r3, [r7, #16]
 8003496:	f023 0307 	bic.w	r3, r3, #7
 800349a:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	693a      	ldr	r2, [r7, #16]
 80034a2:	4313      	orrs	r3, r2
 80034a4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	693a      	ldr	r2, [r7, #16]
 80034ac:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	2b70      	cmp	r3, #112	@ 0x70
 80034b4:	d01a      	beq.n	80034ec <TIM_SlaveTimer_SetConfig+0x80>
 80034b6:	2b70      	cmp	r3, #112	@ 0x70
 80034b8:	d860      	bhi.n	800357c <TIM_SlaveTimer_SetConfig+0x110>
 80034ba:	2b60      	cmp	r3, #96	@ 0x60
 80034bc:	d054      	beq.n	8003568 <TIM_SlaveTimer_SetConfig+0xfc>
 80034be:	2b60      	cmp	r3, #96	@ 0x60
 80034c0:	d85c      	bhi.n	800357c <TIM_SlaveTimer_SetConfig+0x110>
 80034c2:	2b50      	cmp	r3, #80	@ 0x50
 80034c4:	d046      	beq.n	8003554 <TIM_SlaveTimer_SetConfig+0xe8>
 80034c6:	2b50      	cmp	r3, #80	@ 0x50
 80034c8:	d858      	bhi.n	800357c <TIM_SlaveTimer_SetConfig+0x110>
 80034ca:	2b40      	cmp	r3, #64	@ 0x40
 80034cc:	d019      	beq.n	8003502 <TIM_SlaveTimer_SetConfig+0x96>
 80034ce:	2b40      	cmp	r3, #64	@ 0x40
 80034d0:	d854      	bhi.n	800357c <TIM_SlaveTimer_SetConfig+0x110>
 80034d2:	2b30      	cmp	r3, #48	@ 0x30
 80034d4:	d055      	beq.n	8003582 <TIM_SlaveTimer_SetConfig+0x116>
 80034d6:	2b30      	cmp	r3, #48	@ 0x30
 80034d8:	d850      	bhi.n	800357c <TIM_SlaveTimer_SetConfig+0x110>
 80034da:	2b20      	cmp	r3, #32
 80034dc:	d051      	beq.n	8003582 <TIM_SlaveTimer_SetConfig+0x116>
 80034de:	2b20      	cmp	r3, #32
 80034e0:	d84c      	bhi.n	800357c <TIM_SlaveTimer_SetConfig+0x110>
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d04d      	beq.n	8003582 <TIM_SlaveTimer_SetConfig+0x116>
 80034e6:	2b10      	cmp	r3, #16
 80034e8:	d04b      	beq.n	8003582 <TIM_SlaveTimer_SetConfig+0x116>
 80034ea:	e047      	b.n	800357c <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 80034fc:	f000 f9cc 	bl	8003898 <TIM_ETR_SetConfig>
      break;
 8003500:	e040      	b.n	8003584 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	2b05      	cmp	r3, #5
 8003508:	d101      	bne.n	800350e <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 800350a:	2301      	movs	r3, #1
 800350c:	e03b      	b.n	8003586 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	6a1b      	ldr	r3, [r3, #32]
 8003514:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	6a1a      	ldr	r2, [r3, #32]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f022 0201 	bic.w	r2, r2, #1
 8003524:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	699b      	ldr	r3, [r3, #24]
 800352c:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800352e:	68bb      	ldr	r3, [r7, #8]
 8003530:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003534:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	691b      	ldr	r3, [r3, #16]
 800353a:	011b      	lsls	r3, r3, #4
 800353c:	68ba      	ldr	r2, [r7, #8]
 800353e:	4313      	orrs	r3, r2
 8003540:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	68ba      	ldr	r2, [r7, #8]
 8003548:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	68fa      	ldr	r2, [r7, #12]
 8003550:	621a      	str	r2, [r3, #32]
      break;
 8003552:	e017      	b.n	8003584 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003560:	461a      	mov	r2, r3
 8003562:	f000 f86f 	bl	8003644 <TIM_TI1_ConfigInputStage>
      break;
 8003566:	e00d      	b.n	8003584 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003574:	461a      	mov	r2, r3
 8003576:	f000 f8cf 	bl	8003718 <TIM_TI2_ConfigInputStage>
      break;
 800357a:	e003      	b.n	8003584 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 800357c:	2301      	movs	r3, #1
 800357e:	75fb      	strb	r3, [r7, #23]
      break;
 8003580:	e000      	b.n	8003584 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8003582:	bf00      	nop
  }

  return status;
 8003584:	7dfb      	ldrb	r3, [r7, #23]
}
 8003586:	4618      	mov	r0, r3
 8003588:	3718      	adds	r7, #24
 800358a:	46bd      	mov	sp, r7
 800358c:	bd80      	pop	{r7, pc}
	...

08003590 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003590:	b480      	push	{r7}
 8003592:	b087      	sub	sp, #28
 8003594:	af00      	add	r7, sp, #0
 8003596:	60f8      	str	r0, [r7, #12]
 8003598:	60b9      	str	r1, [r7, #8]
 800359a:	607a      	str	r2, [r7, #4]
 800359c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	6a1b      	ldr	r3, [r3, #32]
 80035a2:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	6a1b      	ldr	r3, [r3, #32]
 80035a8:	f023 0201 	bic.w	r2, r3, #1
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	699b      	ldr	r3, [r3, #24]
 80035b4:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	4a1f      	ldr	r2, [pc, #124]	@ (8003638 <TIM_TI1_SetConfig+0xa8>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d00b      	beq.n	80035d6 <TIM_TI1_SetConfig+0x46>
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80035c4:	d007      	beq.n	80035d6 <TIM_TI1_SetConfig+0x46>
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	4a1c      	ldr	r2, [pc, #112]	@ (800363c <TIM_TI1_SetConfig+0xac>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d003      	beq.n	80035d6 <TIM_TI1_SetConfig+0x46>
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	4a1b      	ldr	r2, [pc, #108]	@ (8003640 <TIM_TI1_SetConfig+0xb0>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d101      	bne.n	80035da <TIM_TI1_SetConfig+0x4a>
 80035d6:	2301      	movs	r3, #1
 80035d8:	e000      	b.n	80035dc <TIM_TI1_SetConfig+0x4c>
 80035da:	2300      	movs	r3, #0
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d008      	beq.n	80035f2 <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80035e0:	697b      	ldr	r3, [r7, #20]
 80035e2:	f023 0303 	bic.w	r3, r3, #3
 80035e6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80035e8:	697a      	ldr	r2, [r7, #20]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	4313      	orrs	r3, r2
 80035ee:	617b      	str	r3, [r7, #20]
 80035f0:	e003      	b.n	80035fa <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	f043 0301 	orr.w	r3, r3, #1
 80035f8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003600:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	011b      	lsls	r3, r3, #4
 8003606:	b2db      	uxtb	r3, r3
 8003608:	697a      	ldr	r2, [r7, #20]
 800360a:	4313      	orrs	r3, r2
 800360c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800360e:	693b      	ldr	r3, [r7, #16]
 8003610:	f023 030a 	bic.w	r3, r3, #10
 8003614:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003616:	68bb      	ldr	r3, [r7, #8]
 8003618:	f003 030a 	and.w	r3, r3, #10
 800361c:	693a      	ldr	r2, [r7, #16]
 800361e:	4313      	orrs	r3, r2
 8003620:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	697a      	ldr	r2, [r7, #20]
 8003626:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	693a      	ldr	r2, [r7, #16]
 800362c:	621a      	str	r2, [r3, #32]
}
 800362e:	bf00      	nop
 8003630:	371c      	adds	r7, #28
 8003632:	46bd      	mov	sp, r7
 8003634:	bc80      	pop	{r7}
 8003636:	4770      	bx	lr
 8003638:	40012c00 	.word	0x40012c00
 800363c:	40000400 	.word	0x40000400
 8003640:	40000800 	.word	0x40000800

08003644 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003644:	b480      	push	{r7}
 8003646:	b087      	sub	sp, #28
 8003648:	af00      	add	r7, sp, #0
 800364a:	60f8      	str	r0, [r7, #12]
 800364c:	60b9      	str	r1, [r7, #8]
 800364e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	6a1b      	ldr	r3, [r3, #32]
 8003654:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	6a1b      	ldr	r3, [r3, #32]
 800365a:	f023 0201 	bic.w	r2, r3, #1
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	699b      	ldr	r3, [r3, #24]
 8003666:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003668:	693b      	ldr	r3, [r7, #16]
 800366a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800366e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	011b      	lsls	r3, r3, #4
 8003674:	693a      	ldr	r2, [r7, #16]
 8003676:	4313      	orrs	r3, r2
 8003678:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800367a:	697b      	ldr	r3, [r7, #20]
 800367c:	f023 030a 	bic.w	r3, r3, #10
 8003680:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003682:	697a      	ldr	r2, [r7, #20]
 8003684:	68bb      	ldr	r3, [r7, #8]
 8003686:	4313      	orrs	r3, r2
 8003688:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	693a      	ldr	r2, [r7, #16]
 800368e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	697a      	ldr	r2, [r7, #20]
 8003694:	621a      	str	r2, [r3, #32]
}
 8003696:	bf00      	nop
 8003698:	371c      	adds	r7, #28
 800369a:	46bd      	mov	sp, r7
 800369c:	bc80      	pop	{r7}
 800369e:	4770      	bx	lr

080036a0 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80036a0:	b480      	push	{r7}
 80036a2:	b087      	sub	sp, #28
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	60f8      	str	r0, [r7, #12]
 80036a8:	60b9      	str	r1, [r7, #8]
 80036aa:	607a      	str	r2, [r7, #4]
 80036ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	6a1b      	ldr	r3, [r3, #32]
 80036b2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	6a1b      	ldr	r3, [r3, #32]
 80036b8:	f023 0210 	bic.w	r2, r3, #16
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	699b      	ldr	r3, [r3, #24]
 80036c4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80036c6:	693b      	ldr	r3, [r7, #16]
 80036c8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80036cc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	021b      	lsls	r3, r3, #8
 80036d2:	693a      	ldr	r2, [r7, #16]
 80036d4:	4313      	orrs	r3, r2
 80036d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80036d8:	693b      	ldr	r3, [r7, #16]
 80036da:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80036de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	031b      	lsls	r3, r3, #12
 80036e4:	b29b      	uxth	r3, r3
 80036e6:	693a      	ldr	r2, [r7, #16]
 80036e8:	4313      	orrs	r3, r2
 80036ea:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80036ec:	697b      	ldr	r3, [r7, #20]
 80036ee:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80036f2:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	011b      	lsls	r3, r3, #4
 80036f8:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 80036fc:	697a      	ldr	r2, [r7, #20]
 80036fe:	4313      	orrs	r3, r2
 8003700:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	693a      	ldr	r2, [r7, #16]
 8003706:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	697a      	ldr	r2, [r7, #20]
 800370c:	621a      	str	r2, [r3, #32]
}
 800370e:	bf00      	nop
 8003710:	371c      	adds	r7, #28
 8003712:	46bd      	mov	sp, r7
 8003714:	bc80      	pop	{r7}
 8003716:	4770      	bx	lr

08003718 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003718:	b480      	push	{r7}
 800371a:	b087      	sub	sp, #28
 800371c:	af00      	add	r7, sp, #0
 800371e:	60f8      	str	r0, [r7, #12]
 8003720:	60b9      	str	r1, [r7, #8]
 8003722:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	6a1b      	ldr	r3, [r3, #32]
 8003728:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	6a1b      	ldr	r3, [r3, #32]
 800372e:	f023 0210 	bic.w	r2, r3, #16
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	699b      	ldr	r3, [r3, #24]
 800373a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800373c:	693b      	ldr	r3, [r7, #16]
 800373e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003742:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	031b      	lsls	r3, r3, #12
 8003748:	693a      	ldr	r2, [r7, #16]
 800374a:	4313      	orrs	r3, r2
 800374c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800374e:	697b      	ldr	r3, [r7, #20]
 8003750:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003754:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003756:	68bb      	ldr	r3, [r7, #8]
 8003758:	011b      	lsls	r3, r3, #4
 800375a:	697a      	ldr	r2, [r7, #20]
 800375c:	4313      	orrs	r3, r2
 800375e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	693a      	ldr	r2, [r7, #16]
 8003764:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	697a      	ldr	r2, [r7, #20]
 800376a:	621a      	str	r2, [r3, #32]
}
 800376c:	bf00      	nop
 800376e:	371c      	adds	r7, #28
 8003770:	46bd      	mov	sp, r7
 8003772:	bc80      	pop	{r7}
 8003774:	4770      	bx	lr

08003776 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003776:	b480      	push	{r7}
 8003778:	b087      	sub	sp, #28
 800377a:	af00      	add	r7, sp, #0
 800377c:	60f8      	str	r0, [r7, #12]
 800377e:	60b9      	str	r1, [r7, #8]
 8003780:	607a      	str	r2, [r7, #4]
 8003782:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	6a1b      	ldr	r3, [r3, #32]
 8003788:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	6a1b      	ldr	r3, [r3, #32]
 800378e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	69db      	ldr	r3, [r3, #28]
 800379a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800379c:	693b      	ldr	r3, [r7, #16]
 800379e:	f023 0303 	bic.w	r3, r3, #3
 80037a2:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 80037a4:	693a      	ldr	r2, [r7, #16]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	4313      	orrs	r3, r2
 80037aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80037ac:	693b      	ldr	r3, [r7, #16]
 80037ae:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80037b2:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	011b      	lsls	r3, r3, #4
 80037b8:	b2db      	uxtb	r3, r3
 80037ba:	693a      	ldr	r2, [r7, #16]
 80037bc:	4313      	orrs	r3, r2
 80037be:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 80037c0:	697b      	ldr	r3, [r7, #20]
 80037c2:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80037c6:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	021b      	lsls	r3, r3, #8
 80037cc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80037d0:	697a      	ldr	r2, [r7, #20]
 80037d2:	4313      	orrs	r3, r2
 80037d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	693a      	ldr	r2, [r7, #16]
 80037da:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	697a      	ldr	r2, [r7, #20]
 80037e0:	621a      	str	r2, [r3, #32]
}
 80037e2:	bf00      	nop
 80037e4:	371c      	adds	r7, #28
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bc80      	pop	{r7}
 80037ea:	4770      	bx	lr

080037ec <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80037ec:	b480      	push	{r7}
 80037ee:	b087      	sub	sp, #28
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	60f8      	str	r0, [r7, #12]
 80037f4:	60b9      	str	r1, [r7, #8]
 80037f6:	607a      	str	r2, [r7, #4]
 80037f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	6a1b      	ldr	r3, [r3, #32]
 80037fe:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	6a1b      	ldr	r3, [r3, #32]
 8003804:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	69db      	ldr	r3, [r3, #28]
 8003810:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003812:	693b      	ldr	r3, [r7, #16]
 8003814:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003818:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	021b      	lsls	r3, r3, #8
 800381e:	693a      	ldr	r2, [r7, #16]
 8003820:	4313      	orrs	r3, r2
 8003822:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003824:	693b      	ldr	r3, [r7, #16]
 8003826:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800382a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	031b      	lsls	r3, r3, #12
 8003830:	b29b      	uxth	r3, r3
 8003832:	693a      	ldr	r2, [r7, #16]
 8003834:	4313      	orrs	r3, r2
 8003836:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8003838:	697b      	ldr	r3, [r7, #20]
 800383a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800383e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	031b      	lsls	r3, r3, #12
 8003844:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003848:	697a      	ldr	r2, [r7, #20]
 800384a:	4313      	orrs	r3, r2
 800384c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	693a      	ldr	r2, [r7, #16]
 8003852:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	697a      	ldr	r2, [r7, #20]
 8003858:	621a      	str	r2, [r3, #32]
}
 800385a:	bf00      	nop
 800385c:	371c      	adds	r7, #28
 800385e:	46bd      	mov	sp, r7
 8003860:	bc80      	pop	{r7}
 8003862:	4770      	bx	lr

08003864 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003864:	b480      	push	{r7}
 8003866:	b085      	sub	sp, #20
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
 800386c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	689b      	ldr	r3, [r3, #8]
 8003872:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800387a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800387c:	683a      	ldr	r2, [r7, #0]
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	4313      	orrs	r3, r2
 8003882:	f043 0307 	orr.w	r3, r3, #7
 8003886:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	68fa      	ldr	r2, [r7, #12]
 800388c:	609a      	str	r2, [r3, #8]
}
 800388e:	bf00      	nop
 8003890:	3714      	adds	r7, #20
 8003892:	46bd      	mov	sp, r7
 8003894:	bc80      	pop	{r7}
 8003896:	4770      	bx	lr

08003898 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003898:	b480      	push	{r7}
 800389a:	b087      	sub	sp, #28
 800389c:	af00      	add	r7, sp, #0
 800389e:	60f8      	str	r0, [r7, #12]
 80038a0:	60b9      	str	r1, [r7, #8]
 80038a2:	607a      	str	r2, [r7, #4]
 80038a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	689b      	ldr	r3, [r3, #8]
 80038aa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80038ac:	697b      	ldr	r3, [r7, #20]
 80038ae:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80038b2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	021a      	lsls	r2, r3, #8
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	431a      	orrs	r2, r3
 80038bc:	68bb      	ldr	r3, [r7, #8]
 80038be:	4313      	orrs	r3, r2
 80038c0:	697a      	ldr	r2, [r7, #20]
 80038c2:	4313      	orrs	r3, r2
 80038c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	697a      	ldr	r2, [r7, #20]
 80038ca:	609a      	str	r2, [r3, #8]
}
 80038cc:	bf00      	nop
 80038ce:	371c      	adds	r7, #28
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bc80      	pop	{r7}
 80038d4:	4770      	bx	lr

080038d6 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80038d6:	b480      	push	{r7}
 80038d8:	b087      	sub	sp, #28
 80038da:	af00      	add	r7, sp, #0
 80038dc:	60f8      	str	r0, [r7, #12]
 80038de:	60b9      	str	r1, [r7, #8]
 80038e0:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80038e2:	68bb      	ldr	r3, [r7, #8]
 80038e4:	f003 031f 	and.w	r3, r3, #31
 80038e8:	2201      	movs	r2, #1
 80038ea:	fa02 f303 	lsl.w	r3, r2, r3
 80038ee:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	6a1a      	ldr	r2, [r3, #32]
 80038f4:	697b      	ldr	r3, [r7, #20]
 80038f6:	43db      	mvns	r3, r3
 80038f8:	401a      	ands	r2, r3
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	6a1a      	ldr	r2, [r3, #32]
 8003902:	68bb      	ldr	r3, [r7, #8]
 8003904:	f003 031f 	and.w	r3, r3, #31
 8003908:	6879      	ldr	r1, [r7, #4]
 800390a:	fa01 f303 	lsl.w	r3, r1, r3
 800390e:	431a      	orrs	r2, r3
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	621a      	str	r2, [r3, #32]
}
 8003914:	bf00      	nop
 8003916:	371c      	adds	r7, #28
 8003918:	46bd      	mov	sp, r7
 800391a:	bc80      	pop	{r7}
 800391c:	4770      	bx	lr
	...

08003920 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003920:	b480      	push	{r7}
 8003922:	b085      	sub	sp, #20
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
 8003928:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003930:	2b01      	cmp	r3, #1
 8003932:	d101      	bne.n	8003938 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003934:	2302      	movs	r3, #2
 8003936:	e046      	b.n	80039c6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2201      	movs	r2, #1
 800393c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2202      	movs	r2, #2
 8003944:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	689b      	ldr	r3, [r3, #8]
 8003956:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800395e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	68fa      	ldr	r2, [r7, #12]
 8003966:	4313      	orrs	r3, r2
 8003968:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	68fa      	ldr	r2, [r7, #12]
 8003970:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4a16      	ldr	r2, [pc, #88]	@ (80039d0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d00e      	beq.n	800399a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003984:	d009      	beq.n	800399a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4a12      	ldr	r2, [pc, #72]	@ (80039d4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d004      	beq.n	800399a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a10      	ldr	r2, [pc, #64]	@ (80039d8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d10c      	bne.n	80039b4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80039a0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	68ba      	ldr	r2, [r7, #8]
 80039a8:	4313      	orrs	r3, r2
 80039aa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	68ba      	ldr	r2, [r7, #8]
 80039b2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2201      	movs	r2, #1
 80039b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2200      	movs	r2, #0
 80039c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80039c4:	2300      	movs	r3, #0
}
 80039c6:	4618      	mov	r0, r3
 80039c8:	3714      	adds	r7, #20
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bc80      	pop	{r7}
 80039ce:	4770      	bx	lr
 80039d0:	40012c00 	.word	0x40012c00
 80039d4:	40000400 	.word	0x40000400
 80039d8:	40000800 	.word	0x40000800

080039dc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b082      	sub	sp, #8
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d101      	bne.n	80039ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80039ea:	2301      	movs	r3, #1
 80039ec:	e042      	b.n	8003a74 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80039f4:	b2db      	uxtb	r3, r3
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d106      	bne.n	8003a08 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2200      	movs	r2, #0
 80039fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a02:	6878      	ldr	r0, [r7, #4]
 8003a04:	f7fd fdac 	bl	8001560 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2224      	movs	r2, #36	@ 0x24
 8003a0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	68da      	ldr	r2, [r3, #12]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003a1e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003a20:	6878      	ldr	r0, [r7, #4]
 8003a22:	f000 f971 	bl	8003d08 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	691a      	ldr	r2, [r3, #16]
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003a34:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	695a      	ldr	r2, [r3, #20]
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003a44:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	68da      	ldr	r2, [r3, #12]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003a54:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2200      	movs	r2, #0
 8003a5a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2220      	movs	r2, #32
 8003a60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2220      	movs	r2, #32
 8003a68:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2200      	movs	r2, #0
 8003a70:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003a72:	2300      	movs	r3, #0
}
 8003a74:	4618      	mov	r0, r3
 8003a76:	3708      	adds	r7, #8
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	bd80      	pop	{r7, pc}

08003a7c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b08a      	sub	sp, #40	@ 0x28
 8003a80:	af02      	add	r7, sp, #8
 8003a82:	60f8      	str	r0, [r7, #12]
 8003a84:	60b9      	str	r1, [r7, #8]
 8003a86:	603b      	str	r3, [r7, #0]
 8003a88:	4613      	mov	r3, r2
 8003a8a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a96:	b2db      	uxtb	r3, r3
 8003a98:	2b20      	cmp	r3, #32
 8003a9a:	d175      	bne.n	8003b88 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a9c:	68bb      	ldr	r3, [r7, #8]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d002      	beq.n	8003aa8 <HAL_UART_Transmit+0x2c>
 8003aa2:	88fb      	ldrh	r3, [r7, #6]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d101      	bne.n	8003aac <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	e06e      	b.n	8003b8a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	2200      	movs	r2, #0
 8003ab0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	2221      	movs	r2, #33	@ 0x21
 8003ab6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003aba:	f7fd ff0f 	bl	80018dc <HAL_GetTick>
 8003abe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	88fa      	ldrh	r2, [r7, #6]
 8003ac4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	88fa      	ldrh	r2, [r7, #6]
 8003aca:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	689b      	ldr	r3, [r3, #8]
 8003ad0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ad4:	d108      	bne.n	8003ae8 <HAL_UART_Transmit+0x6c>
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	691b      	ldr	r3, [r3, #16]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d104      	bne.n	8003ae8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003ade:	2300      	movs	r3, #0
 8003ae0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003ae2:	68bb      	ldr	r3, [r7, #8]
 8003ae4:	61bb      	str	r3, [r7, #24]
 8003ae6:	e003      	b.n	8003af0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003aec:	2300      	movs	r3, #0
 8003aee:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003af0:	e02e      	b.n	8003b50 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	9300      	str	r3, [sp, #0]
 8003af6:	697b      	ldr	r3, [r7, #20]
 8003af8:	2200      	movs	r2, #0
 8003afa:	2180      	movs	r1, #128	@ 0x80
 8003afc:	68f8      	ldr	r0, [r7, #12]
 8003afe:	f000 f848 	bl	8003b92 <UART_WaitOnFlagUntilTimeout>
 8003b02:	4603      	mov	r3, r0
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d005      	beq.n	8003b14 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	2220      	movs	r2, #32
 8003b0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003b10:	2303      	movs	r3, #3
 8003b12:	e03a      	b.n	8003b8a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003b14:	69fb      	ldr	r3, [r7, #28]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d10b      	bne.n	8003b32 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003b1a:	69bb      	ldr	r3, [r7, #24]
 8003b1c:	881b      	ldrh	r3, [r3, #0]
 8003b1e:	461a      	mov	r2, r3
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b28:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003b2a:	69bb      	ldr	r3, [r7, #24]
 8003b2c:	3302      	adds	r3, #2
 8003b2e:	61bb      	str	r3, [r7, #24]
 8003b30:	e007      	b.n	8003b42 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003b32:	69fb      	ldr	r3, [r7, #28]
 8003b34:	781a      	ldrb	r2, [r3, #0]
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003b3c:	69fb      	ldr	r3, [r7, #28]
 8003b3e:	3301      	adds	r3, #1
 8003b40:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003b46:	b29b      	uxth	r3, r3
 8003b48:	3b01      	subs	r3, #1
 8003b4a:	b29a      	uxth	r2, r3
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003b54:	b29b      	uxth	r3, r3
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d1cb      	bne.n	8003af2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	9300      	str	r3, [sp, #0]
 8003b5e:	697b      	ldr	r3, [r7, #20]
 8003b60:	2200      	movs	r2, #0
 8003b62:	2140      	movs	r1, #64	@ 0x40
 8003b64:	68f8      	ldr	r0, [r7, #12]
 8003b66:	f000 f814 	bl	8003b92 <UART_WaitOnFlagUntilTimeout>
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d005      	beq.n	8003b7c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	2220      	movs	r2, #32
 8003b74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003b78:	2303      	movs	r3, #3
 8003b7a:	e006      	b.n	8003b8a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	2220      	movs	r2, #32
 8003b80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003b84:	2300      	movs	r3, #0
 8003b86:	e000      	b.n	8003b8a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003b88:	2302      	movs	r3, #2
  }
}
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	3720      	adds	r7, #32
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd80      	pop	{r7, pc}

08003b92 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003b92:	b580      	push	{r7, lr}
 8003b94:	b086      	sub	sp, #24
 8003b96:	af00      	add	r7, sp, #0
 8003b98:	60f8      	str	r0, [r7, #12]
 8003b9a:	60b9      	str	r1, [r7, #8]
 8003b9c:	603b      	str	r3, [r7, #0]
 8003b9e:	4613      	mov	r3, r2
 8003ba0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ba2:	e03b      	b.n	8003c1c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ba4:	6a3b      	ldr	r3, [r7, #32]
 8003ba6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003baa:	d037      	beq.n	8003c1c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bac:	f7fd fe96 	bl	80018dc <HAL_GetTick>
 8003bb0:	4602      	mov	r2, r0
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	1ad3      	subs	r3, r2, r3
 8003bb6:	6a3a      	ldr	r2, [r7, #32]
 8003bb8:	429a      	cmp	r2, r3
 8003bba:	d302      	bcc.n	8003bc2 <UART_WaitOnFlagUntilTimeout+0x30>
 8003bbc:	6a3b      	ldr	r3, [r7, #32]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d101      	bne.n	8003bc6 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003bc2:	2303      	movs	r3, #3
 8003bc4:	e03a      	b.n	8003c3c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	68db      	ldr	r3, [r3, #12]
 8003bcc:	f003 0304 	and.w	r3, r3, #4
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d023      	beq.n	8003c1c <UART_WaitOnFlagUntilTimeout+0x8a>
 8003bd4:	68bb      	ldr	r3, [r7, #8]
 8003bd6:	2b80      	cmp	r3, #128	@ 0x80
 8003bd8:	d020      	beq.n	8003c1c <UART_WaitOnFlagUntilTimeout+0x8a>
 8003bda:	68bb      	ldr	r3, [r7, #8]
 8003bdc:	2b40      	cmp	r3, #64	@ 0x40
 8003bde:	d01d      	beq.n	8003c1c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f003 0308 	and.w	r3, r3, #8
 8003bea:	2b08      	cmp	r3, #8
 8003bec:	d116      	bne.n	8003c1c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003bee:	2300      	movs	r3, #0
 8003bf0:	617b      	str	r3, [r7, #20]
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	617b      	str	r3, [r7, #20]
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	617b      	str	r3, [r7, #20]
 8003c02:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003c04:	68f8      	ldr	r0, [r7, #12]
 8003c06:	f000 f81d 	bl	8003c44 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	2208      	movs	r2, #8
 8003c0e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	2200      	movs	r2, #0
 8003c14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003c18:	2301      	movs	r3, #1
 8003c1a:	e00f      	b.n	8003c3c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	681a      	ldr	r2, [r3, #0]
 8003c22:	68bb      	ldr	r3, [r7, #8]
 8003c24:	4013      	ands	r3, r2
 8003c26:	68ba      	ldr	r2, [r7, #8]
 8003c28:	429a      	cmp	r2, r3
 8003c2a:	bf0c      	ite	eq
 8003c2c:	2301      	moveq	r3, #1
 8003c2e:	2300      	movne	r3, #0
 8003c30:	b2db      	uxtb	r3, r3
 8003c32:	461a      	mov	r2, r3
 8003c34:	79fb      	ldrb	r3, [r7, #7]
 8003c36:	429a      	cmp	r2, r3
 8003c38:	d0b4      	beq.n	8003ba4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003c3a:	2300      	movs	r3, #0
}
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	3718      	adds	r7, #24
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bd80      	pop	{r7, pc}

08003c44 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003c44:	b480      	push	{r7}
 8003c46:	b095      	sub	sp, #84	@ 0x54
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	330c      	adds	r3, #12
 8003c52:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c56:	e853 3f00 	ldrex	r3, [r3]
 8003c5a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003c5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c5e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003c62:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	330c      	adds	r3, #12
 8003c6a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003c6c:	643a      	str	r2, [r7, #64]	@ 0x40
 8003c6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c70:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003c72:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003c74:	e841 2300 	strex	r3, r2, [r1]
 8003c78:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003c7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d1e5      	bne.n	8003c4c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	3314      	adds	r3, #20
 8003c86:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c88:	6a3b      	ldr	r3, [r7, #32]
 8003c8a:	e853 3f00 	ldrex	r3, [r3]
 8003c8e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003c90:	69fb      	ldr	r3, [r7, #28]
 8003c92:	f023 0301 	bic.w	r3, r3, #1
 8003c96:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	3314      	adds	r3, #20
 8003c9e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003ca0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003ca2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ca4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003ca6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003ca8:	e841 2300 	strex	r3, r2, [r1]
 8003cac:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003cae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d1e5      	bne.n	8003c80 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cb8:	2b01      	cmp	r3, #1
 8003cba:	d119      	bne.n	8003cf0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	330c      	adds	r3, #12
 8003cc2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	e853 3f00 	ldrex	r3, [r3]
 8003cca:	60bb      	str	r3, [r7, #8]
   return(result);
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	f023 0310 	bic.w	r3, r3, #16
 8003cd2:	647b      	str	r3, [r7, #68]	@ 0x44
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	330c      	adds	r3, #12
 8003cda:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003cdc:	61ba      	str	r2, [r7, #24]
 8003cde:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ce0:	6979      	ldr	r1, [r7, #20]
 8003ce2:	69ba      	ldr	r2, [r7, #24]
 8003ce4:	e841 2300 	strex	r3, r2, [r1]
 8003ce8:	613b      	str	r3, [r7, #16]
   return(result);
 8003cea:	693b      	ldr	r3, [r7, #16]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d1e5      	bne.n	8003cbc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2220      	movs	r2, #32
 8003cf4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003cfe:	bf00      	nop
 8003d00:	3754      	adds	r7, #84	@ 0x54
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bc80      	pop	{r7}
 8003d06:	4770      	bx	lr

08003d08 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b084      	sub	sp, #16
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	691b      	ldr	r3, [r3, #16]
 8003d16:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	68da      	ldr	r2, [r3, #12]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	430a      	orrs	r2, r1
 8003d24:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	689a      	ldr	r2, [r3, #8]
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	691b      	ldr	r3, [r3, #16]
 8003d2e:	431a      	orrs	r2, r3
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	695b      	ldr	r3, [r3, #20]
 8003d34:	4313      	orrs	r3, r2
 8003d36:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	68db      	ldr	r3, [r3, #12]
 8003d3e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8003d42:	f023 030c 	bic.w	r3, r3, #12
 8003d46:	687a      	ldr	r2, [r7, #4]
 8003d48:	6812      	ldr	r2, [r2, #0]
 8003d4a:	68b9      	ldr	r1, [r7, #8]
 8003d4c:	430b      	orrs	r3, r1
 8003d4e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	695b      	ldr	r3, [r3, #20]
 8003d56:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	699a      	ldr	r2, [r3, #24]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	430a      	orrs	r2, r1
 8003d64:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a2c      	ldr	r2, [pc, #176]	@ (8003e1c <UART_SetConfig+0x114>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d103      	bne.n	8003d78 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003d70:	f7fe fc28 	bl	80025c4 <HAL_RCC_GetPCLK2Freq>
 8003d74:	60f8      	str	r0, [r7, #12]
 8003d76:	e002      	b.n	8003d7e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003d78:	f7fe fc10 	bl	800259c <HAL_RCC_GetPCLK1Freq>
 8003d7c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003d7e:	68fa      	ldr	r2, [r7, #12]
 8003d80:	4613      	mov	r3, r2
 8003d82:	009b      	lsls	r3, r3, #2
 8003d84:	4413      	add	r3, r2
 8003d86:	009a      	lsls	r2, r3, #2
 8003d88:	441a      	add	r2, r3
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	685b      	ldr	r3, [r3, #4]
 8003d8e:	009b      	lsls	r3, r3, #2
 8003d90:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d94:	4a22      	ldr	r2, [pc, #136]	@ (8003e20 <UART_SetConfig+0x118>)
 8003d96:	fba2 2303 	umull	r2, r3, r2, r3
 8003d9a:	095b      	lsrs	r3, r3, #5
 8003d9c:	0119      	lsls	r1, r3, #4
 8003d9e:	68fa      	ldr	r2, [r7, #12]
 8003da0:	4613      	mov	r3, r2
 8003da2:	009b      	lsls	r3, r3, #2
 8003da4:	4413      	add	r3, r2
 8003da6:	009a      	lsls	r2, r3, #2
 8003da8:	441a      	add	r2, r3
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	009b      	lsls	r3, r3, #2
 8003db0:	fbb2 f2f3 	udiv	r2, r2, r3
 8003db4:	4b1a      	ldr	r3, [pc, #104]	@ (8003e20 <UART_SetConfig+0x118>)
 8003db6:	fba3 0302 	umull	r0, r3, r3, r2
 8003dba:	095b      	lsrs	r3, r3, #5
 8003dbc:	2064      	movs	r0, #100	@ 0x64
 8003dbe:	fb00 f303 	mul.w	r3, r0, r3
 8003dc2:	1ad3      	subs	r3, r2, r3
 8003dc4:	011b      	lsls	r3, r3, #4
 8003dc6:	3332      	adds	r3, #50	@ 0x32
 8003dc8:	4a15      	ldr	r2, [pc, #84]	@ (8003e20 <UART_SetConfig+0x118>)
 8003dca:	fba2 2303 	umull	r2, r3, r2, r3
 8003dce:	095b      	lsrs	r3, r3, #5
 8003dd0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003dd4:	4419      	add	r1, r3
 8003dd6:	68fa      	ldr	r2, [r7, #12]
 8003dd8:	4613      	mov	r3, r2
 8003dda:	009b      	lsls	r3, r3, #2
 8003ddc:	4413      	add	r3, r2
 8003dde:	009a      	lsls	r2, r3, #2
 8003de0:	441a      	add	r2, r3
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	009b      	lsls	r3, r3, #2
 8003de8:	fbb2 f2f3 	udiv	r2, r2, r3
 8003dec:	4b0c      	ldr	r3, [pc, #48]	@ (8003e20 <UART_SetConfig+0x118>)
 8003dee:	fba3 0302 	umull	r0, r3, r3, r2
 8003df2:	095b      	lsrs	r3, r3, #5
 8003df4:	2064      	movs	r0, #100	@ 0x64
 8003df6:	fb00 f303 	mul.w	r3, r0, r3
 8003dfa:	1ad3      	subs	r3, r2, r3
 8003dfc:	011b      	lsls	r3, r3, #4
 8003dfe:	3332      	adds	r3, #50	@ 0x32
 8003e00:	4a07      	ldr	r2, [pc, #28]	@ (8003e20 <UART_SetConfig+0x118>)
 8003e02:	fba2 2303 	umull	r2, r3, r2, r3
 8003e06:	095b      	lsrs	r3, r3, #5
 8003e08:	f003 020f 	and.w	r2, r3, #15
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	440a      	add	r2, r1
 8003e12:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003e14:	bf00      	nop
 8003e16:	3710      	adds	r7, #16
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	bd80      	pop	{r7, pc}
 8003e1c:	40013800 	.word	0x40013800
 8003e20:	51eb851f 	.word	0x51eb851f

08003e24 <__cvt>:
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e2a:	461d      	mov	r5, r3
 8003e2c:	bfbb      	ittet	lt
 8003e2e:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8003e32:	461d      	movlt	r5, r3
 8003e34:	2300      	movge	r3, #0
 8003e36:	232d      	movlt	r3, #45	@ 0x2d
 8003e38:	b088      	sub	sp, #32
 8003e3a:	4614      	mov	r4, r2
 8003e3c:	bfb8      	it	lt
 8003e3e:	4614      	movlt	r4, r2
 8003e40:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8003e42:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8003e44:	7013      	strb	r3, [r2, #0]
 8003e46:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8003e48:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8003e4c:	f023 0820 	bic.w	r8, r3, #32
 8003e50:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003e54:	d005      	beq.n	8003e62 <__cvt+0x3e>
 8003e56:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8003e5a:	d100      	bne.n	8003e5e <__cvt+0x3a>
 8003e5c:	3601      	adds	r6, #1
 8003e5e:	2302      	movs	r3, #2
 8003e60:	e000      	b.n	8003e64 <__cvt+0x40>
 8003e62:	2303      	movs	r3, #3
 8003e64:	aa07      	add	r2, sp, #28
 8003e66:	9204      	str	r2, [sp, #16]
 8003e68:	aa06      	add	r2, sp, #24
 8003e6a:	e9cd a202 	strd	sl, r2, [sp, #8]
 8003e6e:	e9cd 3600 	strd	r3, r6, [sp]
 8003e72:	4622      	mov	r2, r4
 8003e74:	462b      	mov	r3, r5
 8003e76:	f000 fe6f 	bl	8004b58 <_dtoa_r>
 8003e7a:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8003e7e:	4607      	mov	r7, r0
 8003e80:	d119      	bne.n	8003eb6 <__cvt+0x92>
 8003e82:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8003e84:	07db      	lsls	r3, r3, #31
 8003e86:	d50e      	bpl.n	8003ea6 <__cvt+0x82>
 8003e88:	eb00 0906 	add.w	r9, r0, r6
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	2300      	movs	r3, #0
 8003e90:	4620      	mov	r0, r4
 8003e92:	4629      	mov	r1, r5
 8003e94:	f7fc fd88 	bl	80009a8 <__aeabi_dcmpeq>
 8003e98:	b108      	cbz	r0, 8003e9e <__cvt+0x7a>
 8003e9a:	f8cd 901c 	str.w	r9, [sp, #28]
 8003e9e:	2230      	movs	r2, #48	@ 0x30
 8003ea0:	9b07      	ldr	r3, [sp, #28]
 8003ea2:	454b      	cmp	r3, r9
 8003ea4:	d31e      	bcc.n	8003ee4 <__cvt+0xc0>
 8003ea6:	4638      	mov	r0, r7
 8003ea8:	9b07      	ldr	r3, [sp, #28]
 8003eaa:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8003eac:	1bdb      	subs	r3, r3, r7
 8003eae:	6013      	str	r3, [r2, #0]
 8003eb0:	b008      	add	sp, #32
 8003eb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003eb6:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003eba:	eb00 0906 	add.w	r9, r0, r6
 8003ebe:	d1e5      	bne.n	8003e8c <__cvt+0x68>
 8003ec0:	7803      	ldrb	r3, [r0, #0]
 8003ec2:	2b30      	cmp	r3, #48	@ 0x30
 8003ec4:	d10a      	bne.n	8003edc <__cvt+0xb8>
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	2300      	movs	r3, #0
 8003eca:	4620      	mov	r0, r4
 8003ecc:	4629      	mov	r1, r5
 8003ece:	f7fc fd6b 	bl	80009a8 <__aeabi_dcmpeq>
 8003ed2:	b918      	cbnz	r0, 8003edc <__cvt+0xb8>
 8003ed4:	f1c6 0601 	rsb	r6, r6, #1
 8003ed8:	f8ca 6000 	str.w	r6, [sl]
 8003edc:	f8da 3000 	ldr.w	r3, [sl]
 8003ee0:	4499      	add	r9, r3
 8003ee2:	e7d3      	b.n	8003e8c <__cvt+0x68>
 8003ee4:	1c59      	adds	r1, r3, #1
 8003ee6:	9107      	str	r1, [sp, #28]
 8003ee8:	701a      	strb	r2, [r3, #0]
 8003eea:	e7d9      	b.n	8003ea0 <__cvt+0x7c>

08003eec <__exponent>:
 8003eec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003eee:	2900      	cmp	r1, #0
 8003ef0:	bfb6      	itet	lt
 8003ef2:	232d      	movlt	r3, #45	@ 0x2d
 8003ef4:	232b      	movge	r3, #43	@ 0x2b
 8003ef6:	4249      	neglt	r1, r1
 8003ef8:	2909      	cmp	r1, #9
 8003efa:	7002      	strb	r2, [r0, #0]
 8003efc:	7043      	strb	r3, [r0, #1]
 8003efe:	dd29      	ble.n	8003f54 <__exponent+0x68>
 8003f00:	f10d 0307 	add.w	r3, sp, #7
 8003f04:	461d      	mov	r5, r3
 8003f06:	270a      	movs	r7, #10
 8003f08:	fbb1 f6f7 	udiv	r6, r1, r7
 8003f0c:	461a      	mov	r2, r3
 8003f0e:	fb07 1416 	mls	r4, r7, r6, r1
 8003f12:	3430      	adds	r4, #48	@ 0x30
 8003f14:	f802 4c01 	strb.w	r4, [r2, #-1]
 8003f18:	460c      	mov	r4, r1
 8003f1a:	2c63      	cmp	r4, #99	@ 0x63
 8003f1c:	4631      	mov	r1, r6
 8003f1e:	f103 33ff 	add.w	r3, r3, #4294967295
 8003f22:	dcf1      	bgt.n	8003f08 <__exponent+0x1c>
 8003f24:	3130      	adds	r1, #48	@ 0x30
 8003f26:	1e94      	subs	r4, r2, #2
 8003f28:	f803 1c01 	strb.w	r1, [r3, #-1]
 8003f2c:	4623      	mov	r3, r4
 8003f2e:	1c41      	adds	r1, r0, #1
 8003f30:	42ab      	cmp	r3, r5
 8003f32:	d30a      	bcc.n	8003f4a <__exponent+0x5e>
 8003f34:	f10d 0309 	add.w	r3, sp, #9
 8003f38:	1a9b      	subs	r3, r3, r2
 8003f3a:	42ac      	cmp	r4, r5
 8003f3c:	bf88      	it	hi
 8003f3e:	2300      	movhi	r3, #0
 8003f40:	3302      	adds	r3, #2
 8003f42:	4403      	add	r3, r0
 8003f44:	1a18      	subs	r0, r3, r0
 8003f46:	b003      	add	sp, #12
 8003f48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f4a:	f813 6b01 	ldrb.w	r6, [r3], #1
 8003f4e:	f801 6f01 	strb.w	r6, [r1, #1]!
 8003f52:	e7ed      	b.n	8003f30 <__exponent+0x44>
 8003f54:	2330      	movs	r3, #48	@ 0x30
 8003f56:	3130      	adds	r1, #48	@ 0x30
 8003f58:	7083      	strb	r3, [r0, #2]
 8003f5a:	70c1      	strb	r1, [r0, #3]
 8003f5c:	1d03      	adds	r3, r0, #4
 8003f5e:	e7f1      	b.n	8003f44 <__exponent+0x58>

08003f60 <_printf_float>:
 8003f60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f64:	b091      	sub	sp, #68	@ 0x44
 8003f66:	460c      	mov	r4, r1
 8003f68:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8003f6c:	4616      	mov	r6, r2
 8003f6e:	461f      	mov	r7, r3
 8003f70:	4605      	mov	r5, r0
 8003f72:	f000 fce1 	bl	8004938 <_localeconv_r>
 8003f76:	6803      	ldr	r3, [r0, #0]
 8003f78:	4618      	mov	r0, r3
 8003f7a:	9308      	str	r3, [sp, #32]
 8003f7c:	f7fc f8e8 	bl	8000150 <strlen>
 8003f80:	2300      	movs	r3, #0
 8003f82:	930e      	str	r3, [sp, #56]	@ 0x38
 8003f84:	f8d8 3000 	ldr.w	r3, [r8]
 8003f88:	9009      	str	r0, [sp, #36]	@ 0x24
 8003f8a:	3307      	adds	r3, #7
 8003f8c:	f023 0307 	bic.w	r3, r3, #7
 8003f90:	f103 0208 	add.w	r2, r3, #8
 8003f94:	f894 a018 	ldrb.w	sl, [r4, #24]
 8003f98:	f8d4 b000 	ldr.w	fp, [r4]
 8003f9c:	f8c8 2000 	str.w	r2, [r8]
 8003fa0:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003fa4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8003fa8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003faa:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8003fae:	f04f 32ff 	mov.w	r2, #4294967295
 8003fb2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8003fb6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8003fba:	4b9c      	ldr	r3, [pc, #624]	@ (800422c <_printf_float+0x2cc>)
 8003fbc:	f7fc fd26 	bl	8000a0c <__aeabi_dcmpun>
 8003fc0:	bb70      	cbnz	r0, 8004020 <_printf_float+0xc0>
 8003fc2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8003fc6:	f04f 32ff 	mov.w	r2, #4294967295
 8003fca:	4b98      	ldr	r3, [pc, #608]	@ (800422c <_printf_float+0x2cc>)
 8003fcc:	f7fc fd00 	bl	80009d0 <__aeabi_dcmple>
 8003fd0:	bb30      	cbnz	r0, 8004020 <_printf_float+0xc0>
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	4640      	mov	r0, r8
 8003fd8:	4649      	mov	r1, r9
 8003fda:	f7fc fcef 	bl	80009bc <__aeabi_dcmplt>
 8003fde:	b110      	cbz	r0, 8003fe6 <_printf_float+0x86>
 8003fe0:	232d      	movs	r3, #45	@ 0x2d
 8003fe2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003fe6:	4a92      	ldr	r2, [pc, #584]	@ (8004230 <_printf_float+0x2d0>)
 8003fe8:	4b92      	ldr	r3, [pc, #584]	@ (8004234 <_printf_float+0x2d4>)
 8003fea:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8003fee:	bf94      	ite	ls
 8003ff0:	4690      	movls	r8, r2
 8003ff2:	4698      	movhi	r8, r3
 8003ff4:	2303      	movs	r3, #3
 8003ff6:	f04f 0900 	mov.w	r9, #0
 8003ffa:	6123      	str	r3, [r4, #16]
 8003ffc:	f02b 0304 	bic.w	r3, fp, #4
 8004000:	6023      	str	r3, [r4, #0]
 8004002:	4633      	mov	r3, r6
 8004004:	4621      	mov	r1, r4
 8004006:	4628      	mov	r0, r5
 8004008:	9700      	str	r7, [sp, #0]
 800400a:	aa0f      	add	r2, sp, #60	@ 0x3c
 800400c:	f000 f9d4 	bl	80043b8 <_printf_common>
 8004010:	3001      	adds	r0, #1
 8004012:	f040 8090 	bne.w	8004136 <_printf_float+0x1d6>
 8004016:	f04f 30ff 	mov.w	r0, #4294967295
 800401a:	b011      	add	sp, #68	@ 0x44
 800401c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004020:	4642      	mov	r2, r8
 8004022:	464b      	mov	r3, r9
 8004024:	4640      	mov	r0, r8
 8004026:	4649      	mov	r1, r9
 8004028:	f7fc fcf0 	bl	8000a0c <__aeabi_dcmpun>
 800402c:	b148      	cbz	r0, 8004042 <_printf_float+0xe2>
 800402e:	464b      	mov	r3, r9
 8004030:	2b00      	cmp	r3, #0
 8004032:	bfb8      	it	lt
 8004034:	232d      	movlt	r3, #45	@ 0x2d
 8004036:	4a80      	ldr	r2, [pc, #512]	@ (8004238 <_printf_float+0x2d8>)
 8004038:	bfb8      	it	lt
 800403a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800403e:	4b7f      	ldr	r3, [pc, #508]	@ (800423c <_printf_float+0x2dc>)
 8004040:	e7d3      	b.n	8003fea <_printf_float+0x8a>
 8004042:	6863      	ldr	r3, [r4, #4]
 8004044:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8004048:	1c5a      	adds	r2, r3, #1
 800404a:	d13f      	bne.n	80040cc <_printf_float+0x16c>
 800404c:	2306      	movs	r3, #6
 800404e:	6063      	str	r3, [r4, #4]
 8004050:	2200      	movs	r2, #0
 8004052:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8004056:	6023      	str	r3, [r4, #0]
 8004058:	9206      	str	r2, [sp, #24]
 800405a:	aa0e      	add	r2, sp, #56	@ 0x38
 800405c:	e9cd a204 	strd	sl, r2, [sp, #16]
 8004060:	aa0d      	add	r2, sp, #52	@ 0x34
 8004062:	9203      	str	r2, [sp, #12]
 8004064:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8004068:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800406c:	6863      	ldr	r3, [r4, #4]
 800406e:	4642      	mov	r2, r8
 8004070:	9300      	str	r3, [sp, #0]
 8004072:	4628      	mov	r0, r5
 8004074:	464b      	mov	r3, r9
 8004076:	910a      	str	r1, [sp, #40]	@ 0x28
 8004078:	f7ff fed4 	bl	8003e24 <__cvt>
 800407c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800407e:	4680      	mov	r8, r0
 8004080:	2947      	cmp	r1, #71	@ 0x47
 8004082:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8004084:	d128      	bne.n	80040d8 <_printf_float+0x178>
 8004086:	1cc8      	adds	r0, r1, #3
 8004088:	db02      	blt.n	8004090 <_printf_float+0x130>
 800408a:	6863      	ldr	r3, [r4, #4]
 800408c:	4299      	cmp	r1, r3
 800408e:	dd40      	ble.n	8004112 <_printf_float+0x1b2>
 8004090:	f1aa 0a02 	sub.w	sl, sl, #2
 8004094:	fa5f fa8a 	uxtb.w	sl, sl
 8004098:	4652      	mov	r2, sl
 800409a:	3901      	subs	r1, #1
 800409c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80040a0:	910d      	str	r1, [sp, #52]	@ 0x34
 80040a2:	f7ff ff23 	bl	8003eec <__exponent>
 80040a6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80040a8:	4681      	mov	r9, r0
 80040aa:	1813      	adds	r3, r2, r0
 80040ac:	2a01      	cmp	r2, #1
 80040ae:	6123      	str	r3, [r4, #16]
 80040b0:	dc02      	bgt.n	80040b8 <_printf_float+0x158>
 80040b2:	6822      	ldr	r2, [r4, #0]
 80040b4:	07d2      	lsls	r2, r2, #31
 80040b6:	d501      	bpl.n	80040bc <_printf_float+0x15c>
 80040b8:	3301      	adds	r3, #1
 80040ba:	6123      	str	r3, [r4, #16]
 80040bc:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d09e      	beq.n	8004002 <_printf_float+0xa2>
 80040c4:	232d      	movs	r3, #45	@ 0x2d
 80040c6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80040ca:	e79a      	b.n	8004002 <_printf_float+0xa2>
 80040cc:	2947      	cmp	r1, #71	@ 0x47
 80040ce:	d1bf      	bne.n	8004050 <_printf_float+0xf0>
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d1bd      	bne.n	8004050 <_printf_float+0xf0>
 80040d4:	2301      	movs	r3, #1
 80040d6:	e7ba      	b.n	800404e <_printf_float+0xee>
 80040d8:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80040dc:	d9dc      	bls.n	8004098 <_printf_float+0x138>
 80040de:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80040e2:	d118      	bne.n	8004116 <_printf_float+0x1b6>
 80040e4:	2900      	cmp	r1, #0
 80040e6:	6863      	ldr	r3, [r4, #4]
 80040e8:	dd0b      	ble.n	8004102 <_printf_float+0x1a2>
 80040ea:	6121      	str	r1, [r4, #16]
 80040ec:	b913      	cbnz	r3, 80040f4 <_printf_float+0x194>
 80040ee:	6822      	ldr	r2, [r4, #0]
 80040f0:	07d0      	lsls	r0, r2, #31
 80040f2:	d502      	bpl.n	80040fa <_printf_float+0x19a>
 80040f4:	3301      	adds	r3, #1
 80040f6:	440b      	add	r3, r1
 80040f8:	6123      	str	r3, [r4, #16]
 80040fa:	f04f 0900 	mov.w	r9, #0
 80040fe:	65a1      	str	r1, [r4, #88]	@ 0x58
 8004100:	e7dc      	b.n	80040bc <_printf_float+0x15c>
 8004102:	b913      	cbnz	r3, 800410a <_printf_float+0x1aa>
 8004104:	6822      	ldr	r2, [r4, #0]
 8004106:	07d2      	lsls	r2, r2, #31
 8004108:	d501      	bpl.n	800410e <_printf_float+0x1ae>
 800410a:	3302      	adds	r3, #2
 800410c:	e7f4      	b.n	80040f8 <_printf_float+0x198>
 800410e:	2301      	movs	r3, #1
 8004110:	e7f2      	b.n	80040f8 <_printf_float+0x198>
 8004112:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8004116:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004118:	4299      	cmp	r1, r3
 800411a:	db05      	blt.n	8004128 <_printf_float+0x1c8>
 800411c:	6823      	ldr	r3, [r4, #0]
 800411e:	6121      	str	r1, [r4, #16]
 8004120:	07d8      	lsls	r0, r3, #31
 8004122:	d5ea      	bpl.n	80040fa <_printf_float+0x19a>
 8004124:	1c4b      	adds	r3, r1, #1
 8004126:	e7e7      	b.n	80040f8 <_printf_float+0x198>
 8004128:	2900      	cmp	r1, #0
 800412a:	bfcc      	ite	gt
 800412c:	2201      	movgt	r2, #1
 800412e:	f1c1 0202 	rsble	r2, r1, #2
 8004132:	4413      	add	r3, r2
 8004134:	e7e0      	b.n	80040f8 <_printf_float+0x198>
 8004136:	6823      	ldr	r3, [r4, #0]
 8004138:	055a      	lsls	r2, r3, #21
 800413a:	d407      	bmi.n	800414c <_printf_float+0x1ec>
 800413c:	6923      	ldr	r3, [r4, #16]
 800413e:	4642      	mov	r2, r8
 8004140:	4631      	mov	r1, r6
 8004142:	4628      	mov	r0, r5
 8004144:	47b8      	blx	r7
 8004146:	3001      	adds	r0, #1
 8004148:	d12b      	bne.n	80041a2 <_printf_float+0x242>
 800414a:	e764      	b.n	8004016 <_printf_float+0xb6>
 800414c:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004150:	f240 80dc 	bls.w	800430c <_printf_float+0x3ac>
 8004154:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004158:	2200      	movs	r2, #0
 800415a:	2300      	movs	r3, #0
 800415c:	f7fc fc24 	bl	80009a8 <__aeabi_dcmpeq>
 8004160:	2800      	cmp	r0, #0
 8004162:	d033      	beq.n	80041cc <_printf_float+0x26c>
 8004164:	2301      	movs	r3, #1
 8004166:	4631      	mov	r1, r6
 8004168:	4628      	mov	r0, r5
 800416a:	4a35      	ldr	r2, [pc, #212]	@ (8004240 <_printf_float+0x2e0>)
 800416c:	47b8      	blx	r7
 800416e:	3001      	adds	r0, #1
 8004170:	f43f af51 	beq.w	8004016 <_printf_float+0xb6>
 8004174:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8004178:	4543      	cmp	r3, r8
 800417a:	db02      	blt.n	8004182 <_printf_float+0x222>
 800417c:	6823      	ldr	r3, [r4, #0]
 800417e:	07d8      	lsls	r0, r3, #31
 8004180:	d50f      	bpl.n	80041a2 <_printf_float+0x242>
 8004182:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004186:	4631      	mov	r1, r6
 8004188:	4628      	mov	r0, r5
 800418a:	47b8      	blx	r7
 800418c:	3001      	adds	r0, #1
 800418e:	f43f af42 	beq.w	8004016 <_printf_float+0xb6>
 8004192:	f04f 0900 	mov.w	r9, #0
 8004196:	f108 38ff 	add.w	r8, r8, #4294967295
 800419a:	f104 0a1a 	add.w	sl, r4, #26
 800419e:	45c8      	cmp	r8, r9
 80041a0:	dc09      	bgt.n	80041b6 <_printf_float+0x256>
 80041a2:	6823      	ldr	r3, [r4, #0]
 80041a4:	079b      	lsls	r3, r3, #30
 80041a6:	f100 8102 	bmi.w	80043ae <_printf_float+0x44e>
 80041aa:	68e0      	ldr	r0, [r4, #12]
 80041ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80041ae:	4298      	cmp	r0, r3
 80041b0:	bfb8      	it	lt
 80041b2:	4618      	movlt	r0, r3
 80041b4:	e731      	b.n	800401a <_printf_float+0xba>
 80041b6:	2301      	movs	r3, #1
 80041b8:	4652      	mov	r2, sl
 80041ba:	4631      	mov	r1, r6
 80041bc:	4628      	mov	r0, r5
 80041be:	47b8      	blx	r7
 80041c0:	3001      	adds	r0, #1
 80041c2:	f43f af28 	beq.w	8004016 <_printf_float+0xb6>
 80041c6:	f109 0901 	add.w	r9, r9, #1
 80041ca:	e7e8      	b.n	800419e <_printf_float+0x23e>
 80041cc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	dc38      	bgt.n	8004244 <_printf_float+0x2e4>
 80041d2:	2301      	movs	r3, #1
 80041d4:	4631      	mov	r1, r6
 80041d6:	4628      	mov	r0, r5
 80041d8:	4a19      	ldr	r2, [pc, #100]	@ (8004240 <_printf_float+0x2e0>)
 80041da:	47b8      	blx	r7
 80041dc:	3001      	adds	r0, #1
 80041de:	f43f af1a 	beq.w	8004016 <_printf_float+0xb6>
 80041e2:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 80041e6:	ea59 0303 	orrs.w	r3, r9, r3
 80041ea:	d102      	bne.n	80041f2 <_printf_float+0x292>
 80041ec:	6823      	ldr	r3, [r4, #0]
 80041ee:	07d9      	lsls	r1, r3, #31
 80041f0:	d5d7      	bpl.n	80041a2 <_printf_float+0x242>
 80041f2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80041f6:	4631      	mov	r1, r6
 80041f8:	4628      	mov	r0, r5
 80041fa:	47b8      	blx	r7
 80041fc:	3001      	adds	r0, #1
 80041fe:	f43f af0a 	beq.w	8004016 <_printf_float+0xb6>
 8004202:	f04f 0a00 	mov.w	sl, #0
 8004206:	f104 0b1a 	add.w	fp, r4, #26
 800420a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800420c:	425b      	negs	r3, r3
 800420e:	4553      	cmp	r3, sl
 8004210:	dc01      	bgt.n	8004216 <_printf_float+0x2b6>
 8004212:	464b      	mov	r3, r9
 8004214:	e793      	b.n	800413e <_printf_float+0x1de>
 8004216:	2301      	movs	r3, #1
 8004218:	465a      	mov	r2, fp
 800421a:	4631      	mov	r1, r6
 800421c:	4628      	mov	r0, r5
 800421e:	47b8      	blx	r7
 8004220:	3001      	adds	r0, #1
 8004222:	f43f aef8 	beq.w	8004016 <_printf_float+0xb6>
 8004226:	f10a 0a01 	add.w	sl, sl, #1
 800422a:	e7ee      	b.n	800420a <_printf_float+0x2aa>
 800422c:	7fefffff 	.word	0x7fefffff
 8004230:	08006b4a 	.word	0x08006b4a
 8004234:	08006b4e 	.word	0x08006b4e
 8004238:	08006b52 	.word	0x08006b52
 800423c:	08006b56 	.word	0x08006b56
 8004240:	08006b5a 	.word	0x08006b5a
 8004244:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004246:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800424a:	4553      	cmp	r3, sl
 800424c:	bfa8      	it	ge
 800424e:	4653      	movge	r3, sl
 8004250:	2b00      	cmp	r3, #0
 8004252:	4699      	mov	r9, r3
 8004254:	dc36      	bgt.n	80042c4 <_printf_float+0x364>
 8004256:	f04f 0b00 	mov.w	fp, #0
 800425a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800425e:	f104 021a 	add.w	r2, r4, #26
 8004262:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004264:	930a      	str	r3, [sp, #40]	@ 0x28
 8004266:	eba3 0309 	sub.w	r3, r3, r9
 800426a:	455b      	cmp	r3, fp
 800426c:	dc31      	bgt.n	80042d2 <_printf_float+0x372>
 800426e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004270:	459a      	cmp	sl, r3
 8004272:	dc3a      	bgt.n	80042ea <_printf_float+0x38a>
 8004274:	6823      	ldr	r3, [r4, #0]
 8004276:	07da      	lsls	r2, r3, #31
 8004278:	d437      	bmi.n	80042ea <_printf_float+0x38a>
 800427a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800427c:	ebaa 0903 	sub.w	r9, sl, r3
 8004280:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004282:	ebaa 0303 	sub.w	r3, sl, r3
 8004286:	4599      	cmp	r9, r3
 8004288:	bfa8      	it	ge
 800428a:	4699      	movge	r9, r3
 800428c:	f1b9 0f00 	cmp.w	r9, #0
 8004290:	dc33      	bgt.n	80042fa <_printf_float+0x39a>
 8004292:	f04f 0800 	mov.w	r8, #0
 8004296:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800429a:	f104 0b1a 	add.w	fp, r4, #26
 800429e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80042a0:	ebaa 0303 	sub.w	r3, sl, r3
 80042a4:	eba3 0309 	sub.w	r3, r3, r9
 80042a8:	4543      	cmp	r3, r8
 80042aa:	f77f af7a 	ble.w	80041a2 <_printf_float+0x242>
 80042ae:	2301      	movs	r3, #1
 80042b0:	465a      	mov	r2, fp
 80042b2:	4631      	mov	r1, r6
 80042b4:	4628      	mov	r0, r5
 80042b6:	47b8      	blx	r7
 80042b8:	3001      	adds	r0, #1
 80042ba:	f43f aeac 	beq.w	8004016 <_printf_float+0xb6>
 80042be:	f108 0801 	add.w	r8, r8, #1
 80042c2:	e7ec      	b.n	800429e <_printf_float+0x33e>
 80042c4:	4642      	mov	r2, r8
 80042c6:	4631      	mov	r1, r6
 80042c8:	4628      	mov	r0, r5
 80042ca:	47b8      	blx	r7
 80042cc:	3001      	adds	r0, #1
 80042ce:	d1c2      	bne.n	8004256 <_printf_float+0x2f6>
 80042d0:	e6a1      	b.n	8004016 <_printf_float+0xb6>
 80042d2:	2301      	movs	r3, #1
 80042d4:	4631      	mov	r1, r6
 80042d6:	4628      	mov	r0, r5
 80042d8:	920a      	str	r2, [sp, #40]	@ 0x28
 80042da:	47b8      	blx	r7
 80042dc:	3001      	adds	r0, #1
 80042de:	f43f ae9a 	beq.w	8004016 <_printf_float+0xb6>
 80042e2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80042e4:	f10b 0b01 	add.w	fp, fp, #1
 80042e8:	e7bb      	b.n	8004262 <_printf_float+0x302>
 80042ea:	4631      	mov	r1, r6
 80042ec:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80042f0:	4628      	mov	r0, r5
 80042f2:	47b8      	blx	r7
 80042f4:	3001      	adds	r0, #1
 80042f6:	d1c0      	bne.n	800427a <_printf_float+0x31a>
 80042f8:	e68d      	b.n	8004016 <_printf_float+0xb6>
 80042fa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80042fc:	464b      	mov	r3, r9
 80042fe:	4631      	mov	r1, r6
 8004300:	4628      	mov	r0, r5
 8004302:	4442      	add	r2, r8
 8004304:	47b8      	blx	r7
 8004306:	3001      	adds	r0, #1
 8004308:	d1c3      	bne.n	8004292 <_printf_float+0x332>
 800430a:	e684      	b.n	8004016 <_printf_float+0xb6>
 800430c:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8004310:	f1ba 0f01 	cmp.w	sl, #1
 8004314:	dc01      	bgt.n	800431a <_printf_float+0x3ba>
 8004316:	07db      	lsls	r3, r3, #31
 8004318:	d536      	bpl.n	8004388 <_printf_float+0x428>
 800431a:	2301      	movs	r3, #1
 800431c:	4642      	mov	r2, r8
 800431e:	4631      	mov	r1, r6
 8004320:	4628      	mov	r0, r5
 8004322:	47b8      	blx	r7
 8004324:	3001      	adds	r0, #1
 8004326:	f43f ae76 	beq.w	8004016 <_printf_float+0xb6>
 800432a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800432e:	4631      	mov	r1, r6
 8004330:	4628      	mov	r0, r5
 8004332:	47b8      	blx	r7
 8004334:	3001      	adds	r0, #1
 8004336:	f43f ae6e 	beq.w	8004016 <_printf_float+0xb6>
 800433a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800433e:	2200      	movs	r2, #0
 8004340:	2300      	movs	r3, #0
 8004342:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004346:	f7fc fb2f 	bl	80009a8 <__aeabi_dcmpeq>
 800434a:	b9c0      	cbnz	r0, 800437e <_printf_float+0x41e>
 800434c:	4653      	mov	r3, sl
 800434e:	f108 0201 	add.w	r2, r8, #1
 8004352:	4631      	mov	r1, r6
 8004354:	4628      	mov	r0, r5
 8004356:	47b8      	blx	r7
 8004358:	3001      	adds	r0, #1
 800435a:	d10c      	bne.n	8004376 <_printf_float+0x416>
 800435c:	e65b      	b.n	8004016 <_printf_float+0xb6>
 800435e:	2301      	movs	r3, #1
 8004360:	465a      	mov	r2, fp
 8004362:	4631      	mov	r1, r6
 8004364:	4628      	mov	r0, r5
 8004366:	47b8      	blx	r7
 8004368:	3001      	adds	r0, #1
 800436a:	f43f ae54 	beq.w	8004016 <_printf_float+0xb6>
 800436e:	f108 0801 	add.w	r8, r8, #1
 8004372:	45d0      	cmp	r8, sl
 8004374:	dbf3      	blt.n	800435e <_printf_float+0x3fe>
 8004376:	464b      	mov	r3, r9
 8004378:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800437c:	e6e0      	b.n	8004140 <_printf_float+0x1e0>
 800437e:	f04f 0800 	mov.w	r8, #0
 8004382:	f104 0b1a 	add.w	fp, r4, #26
 8004386:	e7f4      	b.n	8004372 <_printf_float+0x412>
 8004388:	2301      	movs	r3, #1
 800438a:	4642      	mov	r2, r8
 800438c:	e7e1      	b.n	8004352 <_printf_float+0x3f2>
 800438e:	2301      	movs	r3, #1
 8004390:	464a      	mov	r2, r9
 8004392:	4631      	mov	r1, r6
 8004394:	4628      	mov	r0, r5
 8004396:	47b8      	blx	r7
 8004398:	3001      	adds	r0, #1
 800439a:	f43f ae3c 	beq.w	8004016 <_printf_float+0xb6>
 800439e:	f108 0801 	add.w	r8, r8, #1
 80043a2:	68e3      	ldr	r3, [r4, #12]
 80043a4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80043a6:	1a5b      	subs	r3, r3, r1
 80043a8:	4543      	cmp	r3, r8
 80043aa:	dcf0      	bgt.n	800438e <_printf_float+0x42e>
 80043ac:	e6fd      	b.n	80041aa <_printf_float+0x24a>
 80043ae:	f04f 0800 	mov.w	r8, #0
 80043b2:	f104 0919 	add.w	r9, r4, #25
 80043b6:	e7f4      	b.n	80043a2 <_printf_float+0x442>

080043b8 <_printf_common>:
 80043b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80043bc:	4616      	mov	r6, r2
 80043be:	4698      	mov	r8, r3
 80043c0:	688a      	ldr	r2, [r1, #8]
 80043c2:	690b      	ldr	r3, [r1, #16]
 80043c4:	4607      	mov	r7, r0
 80043c6:	4293      	cmp	r3, r2
 80043c8:	bfb8      	it	lt
 80043ca:	4613      	movlt	r3, r2
 80043cc:	6033      	str	r3, [r6, #0]
 80043ce:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80043d2:	460c      	mov	r4, r1
 80043d4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80043d8:	b10a      	cbz	r2, 80043de <_printf_common+0x26>
 80043da:	3301      	adds	r3, #1
 80043dc:	6033      	str	r3, [r6, #0]
 80043de:	6823      	ldr	r3, [r4, #0]
 80043e0:	0699      	lsls	r1, r3, #26
 80043e2:	bf42      	ittt	mi
 80043e4:	6833      	ldrmi	r3, [r6, #0]
 80043e6:	3302      	addmi	r3, #2
 80043e8:	6033      	strmi	r3, [r6, #0]
 80043ea:	6825      	ldr	r5, [r4, #0]
 80043ec:	f015 0506 	ands.w	r5, r5, #6
 80043f0:	d106      	bne.n	8004400 <_printf_common+0x48>
 80043f2:	f104 0a19 	add.w	sl, r4, #25
 80043f6:	68e3      	ldr	r3, [r4, #12]
 80043f8:	6832      	ldr	r2, [r6, #0]
 80043fa:	1a9b      	subs	r3, r3, r2
 80043fc:	42ab      	cmp	r3, r5
 80043fe:	dc2b      	bgt.n	8004458 <_printf_common+0xa0>
 8004400:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004404:	6822      	ldr	r2, [r4, #0]
 8004406:	3b00      	subs	r3, #0
 8004408:	bf18      	it	ne
 800440a:	2301      	movne	r3, #1
 800440c:	0692      	lsls	r2, r2, #26
 800440e:	d430      	bmi.n	8004472 <_printf_common+0xba>
 8004410:	4641      	mov	r1, r8
 8004412:	4638      	mov	r0, r7
 8004414:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004418:	47c8      	blx	r9
 800441a:	3001      	adds	r0, #1
 800441c:	d023      	beq.n	8004466 <_printf_common+0xae>
 800441e:	6823      	ldr	r3, [r4, #0]
 8004420:	6922      	ldr	r2, [r4, #16]
 8004422:	f003 0306 	and.w	r3, r3, #6
 8004426:	2b04      	cmp	r3, #4
 8004428:	bf14      	ite	ne
 800442a:	2500      	movne	r5, #0
 800442c:	6833      	ldreq	r3, [r6, #0]
 800442e:	f04f 0600 	mov.w	r6, #0
 8004432:	bf08      	it	eq
 8004434:	68e5      	ldreq	r5, [r4, #12]
 8004436:	f104 041a 	add.w	r4, r4, #26
 800443a:	bf08      	it	eq
 800443c:	1aed      	subeq	r5, r5, r3
 800443e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004442:	bf08      	it	eq
 8004444:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004448:	4293      	cmp	r3, r2
 800444a:	bfc4      	itt	gt
 800444c:	1a9b      	subgt	r3, r3, r2
 800444e:	18ed      	addgt	r5, r5, r3
 8004450:	42b5      	cmp	r5, r6
 8004452:	d11a      	bne.n	800448a <_printf_common+0xd2>
 8004454:	2000      	movs	r0, #0
 8004456:	e008      	b.n	800446a <_printf_common+0xb2>
 8004458:	2301      	movs	r3, #1
 800445a:	4652      	mov	r2, sl
 800445c:	4641      	mov	r1, r8
 800445e:	4638      	mov	r0, r7
 8004460:	47c8      	blx	r9
 8004462:	3001      	adds	r0, #1
 8004464:	d103      	bne.n	800446e <_printf_common+0xb6>
 8004466:	f04f 30ff 	mov.w	r0, #4294967295
 800446a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800446e:	3501      	adds	r5, #1
 8004470:	e7c1      	b.n	80043f6 <_printf_common+0x3e>
 8004472:	2030      	movs	r0, #48	@ 0x30
 8004474:	18e1      	adds	r1, r4, r3
 8004476:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800447a:	1c5a      	adds	r2, r3, #1
 800447c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004480:	4422      	add	r2, r4
 8004482:	3302      	adds	r3, #2
 8004484:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004488:	e7c2      	b.n	8004410 <_printf_common+0x58>
 800448a:	2301      	movs	r3, #1
 800448c:	4622      	mov	r2, r4
 800448e:	4641      	mov	r1, r8
 8004490:	4638      	mov	r0, r7
 8004492:	47c8      	blx	r9
 8004494:	3001      	adds	r0, #1
 8004496:	d0e6      	beq.n	8004466 <_printf_common+0xae>
 8004498:	3601      	adds	r6, #1
 800449a:	e7d9      	b.n	8004450 <_printf_common+0x98>

0800449c <_printf_i>:
 800449c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80044a0:	7e0f      	ldrb	r7, [r1, #24]
 80044a2:	4691      	mov	r9, r2
 80044a4:	2f78      	cmp	r7, #120	@ 0x78
 80044a6:	4680      	mov	r8, r0
 80044a8:	460c      	mov	r4, r1
 80044aa:	469a      	mov	sl, r3
 80044ac:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80044ae:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80044b2:	d807      	bhi.n	80044c4 <_printf_i+0x28>
 80044b4:	2f62      	cmp	r7, #98	@ 0x62
 80044b6:	d80a      	bhi.n	80044ce <_printf_i+0x32>
 80044b8:	2f00      	cmp	r7, #0
 80044ba:	f000 80d3 	beq.w	8004664 <_printf_i+0x1c8>
 80044be:	2f58      	cmp	r7, #88	@ 0x58
 80044c0:	f000 80ba 	beq.w	8004638 <_printf_i+0x19c>
 80044c4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80044c8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80044cc:	e03a      	b.n	8004544 <_printf_i+0xa8>
 80044ce:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80044d2:	2b15      	cmp	r3, #21
 80044d4:	d8f6      	bhi.n	80044c4 <_printf_i+0x28>
 80044d6:	a101      	add	r1, pc, #4	@ (adr r1, 80044dc <_printf_i+0x40>)
 80044d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80044dc:	08004535 	.word	0x08004535
 80044e0:	08004549 	.word	0x08004549
 80044e4:	080044c5 	.word	0x080044c5
 80044e8:	080044c5 	.word	0x080044c5
 80044ec:	080044c5 	.word	0x080044c5
 80044f0:	080044c5 	.word	0x080044c5
 80044f4:	08004549 	.word	0x08004549
 80044f8:	080044c5 	.word	0x080044c5
 80044fc:	080044c5 	.word	0x080044c5
 8004500:	080044c5 	.word	0x080044c5
 8004504:	080044c5 	.word	0x080044c5
 8004508:	0800464b 	.word	0x0800464b
 800450c:	08004573 	.word	0x08004573
 8004510:	08004605 	.word	0x08004605
 8004514:	080044c5 	.word	0x080044c5
 8004518:	080044c5 	.word	0x080044c5
 800451c:	0800466d 	.word	0x0800466d
 8004520:	080044c5 	.word	0x080044c5
 8004524:	08004573 	.word	0x08004573
 8004528:	080044c5 	.word	0x080044c5
 800452c:	080044c5 	.word	0x080044c5
 8004530:	0800460d 	.word	0x0800460d
 8004534:	6833      	ldr	r3, [r6, #0]
 8004536:	1d1a      	adds	r2, r3, #4
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	6032      	str	r2, [r6, #0]
 800453c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004540:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004544:	2301      	movs	r3, #1
 8004546:	e09e      	b.n	8004686 <_printf_i+0x1ea>
 8004548:	6833      	ldr	r3, [r6, #0]
 800454a:	6820      	ldr	r0, [r4, #0]
 800454c:	1d19      	adds	r1, r3, #4
 800454e:	6031      	str	r1, [r6, #0]
 8004550:	0606      	lsls	r6, r0, #24
 8004552:	d501      	bpl.n	8004558 <_printf_i+0xbc>
 8004554:	681d      	ldr	r5, [r3, #0]
 8004556:	e003      	b.n	8004560 <_printf_i+0xc4>
 8004558:	0645      	lsls	r5, r0, #25
 800455a:	d5fb      	bpl.n	8004554 <_printf_i+0xb8>
 800455c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004560:	2d00      	cmp	r5, #0
 8004562:	da03      	bge.n	800456c <_printf_i+0xd0>
 8004564:	232d      	movs	r3, #45	@ 0x2d
 8004566:	426d      	negs	r5, r5
 8004568:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800456c:	230a      	movs	r3, #10
 800456e:	4859      	ldr	r0, [pc, #356]	@ (80046d4 <_printf_i+0x238>)
 8004570:	e011      	b.n	8004596 <_printf_i+0xfa>
 8004572:	6821      	ldr	r1, [r4, #0]
 8004574:	6833      	ldr	r3, [r6, #0]
 8004576:	0608      	lsls	r0, r1, #24
 8004578:	f853 5b04 	ldr.w	r5, [r3], #4
 800457c:	d402      	bmi.n	8004584 <_printf_i+0xe8>
 800457e:	0649      	lsls	r1, r1, #25
 8004580:	bf48      	it	mi
 8004582:	b2ad      	uxthmi	r5, r5
 8004584:	2f6f      	cmp	r7, #111	@ 0x6f
 8004586:	6033      	str	r3, [r6, #0]
 8004588:	bf14      	ite	ne
 800458a:	230a      	movne	r3, #10
 800458c:	2308      	moveq	r3, #8
 800458e:	4851      	ldr	r0, [pc, #324]	@ (80046d4 <_printf_i+0x238>)
 8004590:	2100      	movs	r1, #0
 8004592:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004596:	6866      	ldr	r6, [r4, #4]
 8004598:	2e00      	cmp	r6, #0
 800459a:	bfa8      	it	ge
 800459c:	6821      	ldrge	r1, [r4, #0]
 800459e:	60a6      	str	r6, [r4, #8]
 80045a0:	bfa4      	itt	ge
 80045a2:	f021 0104 	bicge.w	r1, r1, #4
 80045a6:	6021      	strge	r1, [r4, #0]
 80045a8:	b90d      	cbnz	r5, 80045ae <_printf_i+0x112>
 80045aa:	2e00      	cmp	r6, #0
 80045ac:	d04b      	beq.n	8004646 <_printf_i+0x1aa>
 80045ae:	4616      	mov	r6, r2
 80045b0:	fbb5 f1f3 	udiv	r1, r5, r3
 80045b4:	fb03 5711 	mls	r7, r3, r1, r5
 80045b8:	5dc7      	ldrb	r7, [r0, r7]
 80045ba:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80045be:	462f      	mov	r7, r5
 80045c0:	42bb      	cmp	r3, r7
 80045c2:	460d      	mov	r5, r1
 80045c4:	d9f4      	bls.n	80045b0 <_printf_i+0x114>
 80045c6:	2b08      	cmp	r3, #8
 80045c8:	d10b      	bne.n	80045e2 <_printf_i+0x146>
 80045ca:	6823      	ldr	r3, [r4, #0]
 80045cc:	07df      	lsls	r7, r3, #31
 80045ce:	d508      	bpl.n	80045e2 <_printf_i+0x146>
 80045d0:	6923      	ldr	r3, [r4, #16]
 80045d2:	6861      	ldr	r1, [r4, #4]
 80045d4:	4299      	cmp	r1, r3
 80045d6:	bfde      	ittt	le
 80045d8:	2330      	movle	r3, #48	@ 0x30
 80045da:	f806 3c01 	strble.w	r3, [r6, #-1]
 80045de:	f106 36ff 	addle.w	r6, r6, #4294967295
 80045e2:	1b92      	subs	r2, r2, r6
 80045e4:	6122      	str	r2, [r4, #16]
 80045e6:	464b      	mov	r3, r9
 80045e8:	4621      	mov	r1, r4
 80045ea:	4640      	mov	r0, r8
 80045ec:	f8cd a000 	str.w	sl, [sp]
 80045f0:	aa03      	add	r2, sp, #12
 80045f2:	f7ff fee1 	bl	80043b8 <_printf_common>
 80045f6:	3001      	adds	r0, #1
 80045f8:	d14a      	bne.n	8004690 <_printf_i+0x1f4>
 80045fa:	f04f 30ff 	mov.w	r0, #4294967295
 80045fe:	b004      	add	sp, #16
 8004600:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004604:	6823      	ldr	r3, [r4, #0]
 8004606:	f043 0320 	orr.w	r3, r3, #32
 800460a:	6023      	str	r3, [r4, #0]
 800460c:	2778      	movs	r7, #120	@ 0x78
 800460e:	4832      	ldr	r0, [pc, #200]	@ (80046d8 <_printf_i+0x23c>)
 8004610:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004614:	6823      	ldr	r3, [r4, #0]
 8004616:	6831      	ldr	r1, [r6, #0]
 8004618:	061f      	lsls	r7, r3, #24
 800461a:	f851 5b04 	ldr.w	r5, [r1], #4
 800461e:	d402      	bmi.n	8004626 <_printf_i+0x18a>
 8004620:	065f      	lsls	r7, r3, #25
 8004622:	bf48      	it	mi
 8004624:	b2ad      	uxthmi	r5, r5
 8004626:	6031      	str	r1, [r6, #0]
 8004628:	07d9      	lsls	r1, r3, #31
 800462a:	bf44      	itt	mi
 800462c:	f043 0320 	orrmi.w	r3, r3, #32
 8004630:	6023      	strmi	r3, [r4, #0]
 8004632:	b11d      	cbz	r5, 800463c <_printf_i+0x1a0>
 8004634:	2310      	movs	r3, #16
 8004636:	e7ab      	b.n	8004590 <_printf_i+0xf4>
 8004638:	4826      	ldr	r0, [pc, #152]	@ (80046d4 <_printf_i+0x238>)
 800463a:	e7e9      	b.n	8004610 <_printf_i+0x174>
 800463c:	6823      	ldr	r3, [r4, #0]
 800463e:	f023 0320 	bic.w	r3, r3, #32
 8004642:	6023      	str	r3, [r4, #0]
 8004644:	e7f6      	b.n	8004634 <_printf_i+0x198>
 8004646:	4616      	mov	r6, r2
 8004648:	e7bd      	b.n	80045c6 <_printf_i+0x12a>
 800464a:	6833      	ldr	r3, [r6, #0]
 800464c:	6825      	ldr	r5, [r4, #0]
 800464e:	1d18      	adds	r0, r3, #4
 8004650:	6961      	ldr	r1, [r4, #20]
 8004652:	6030      	str	r0, [r6, #0]
 8004654:	062e      	lsls	r6, r5, #24
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	d501      	bpl.n	800465e <_printf_i+0x1c2>
 800465a:	6019      	str	r1, [r3, #0]
 800465c:	e002      	b.n	8004664 <_printf_i+0x1c8>
 800465e:	0668      	lsls	r0, r5, #25
 8004660:	d5fb      	bpl.n	800465a <_printf_i+0x1be>
 8004662:	8019      	strh	r1, [r3, #0]
 8004664:	2300      	movs	r3, #0
 8004666:	4616      	mov	r6, r2
 8004668:	6123      	str	r3, [r4, #16]
 800466a:	e7bc      	b.n	80045e6 <_printf_i+0x14a>
 800466c:	6833      	ldr	r3, [r6, #0]
 800466e:	2100      	movs	r1, #0
 8004670:	1d1a      	adds	r2, r3, #4
 8004672:	6032      	str	r2, [r6, #0]
 8004674:	681e      	ldr	r6, [r3, #0]
 8004676:	6862      	ldr	r2, [r4, #4]
 8004678:	4630      	mov	r0, r6
 800467a:	f000 f9d4 	bl	8004a26 <memchr>
 800467e:	b108      	cbz	r0, 8004684 <_printf_i+0x1e8>
 8004680:	1b80      	subs	r0, r0, r6
 8004682:	6060      	str	r0, [r4, #4]
 8004684:	6863      	ldr	r3, [r4, #4]
 8004686:	6123      	str	r3, [r4, #16]
 8004688:	2300      	movs	r3, #0
 800468a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800468e:	e7aa      	b.n	80045e6 <_printf_i+0x14a>
 8004690:	4632      	mov	r2, r6
 8004692:	4649      	mov	r1, r9
 8004694:	4640      	mov	r0, r8
 8004696:	6923      	ldr	r3, [r4, #16]
 8004698:	47d0      	blx	sl
 800469a:	3001      	adds	r0, #1
 800469c:	d0ad      	beq.n	80045fa <_printf_i+0x15e>
 800469e:	6823      	ldr	r3, [r4, #0]
 80046a0:	079b      	lsls	r3, r3, #30
 80046a2:	d413      	bmi.n	80046cc <_printf_i+0x230>
 80046a4:	68e0      	ldr	r0, [r4, #12]
 80046a6:	9b03      	ldr	r3, [sp, #12]
 80046a8:	4298      	cmp	r0, r3
 80046aa:	bfb8      	it	lt
 80046ac:	4618      	movlt	r0, r3
 80046ae:	e7a6      	b.n	80045fe <_printf_i+0x162>
 80046b0:	2301      	movs	r3, #1
 80046b2:	4632      	mov	r2, r6
 80046b4:	4649      	mov	r1, r9
 80046b6:	4640      	mov	r0, r8
 80046b8:	47d0      	blx	sl
 80046ba:	3001      	adds	r0, #1
 80046bc:	d09d      	beq.n	80045fa <_printf_i+0x15e>
 80046be:	3501      	adds	r5, #1
 80046c0:	68e3      	ldr	r3, [r4, #12]
 80046c2:	9903      	ldr	r1, [sp, #12]
 80046c4:	1a5b      	subs	r3, r3, r1
 80046c6:	42ab      	cmp	r3, r5
 80046c8:	dcf2      	bgt.n	80046b0 <_printf_i+0x214>
 80046ca:	e7eb      	b.n	80046a4 <_printf_i+0x208>
 80046cc:	2500      	movs	r5, #0
 80046ce:	f104 0619 	add.w	r6, r4, #25
 80046d2:	e7f5      	b.n	80046c0 <_printf_i+0x224>
 80046d4:	08006b5c 	.word	0x08006b5c
 80046d8:	08006b6d 	.word	0x08006b6d

080046dc <std>:
 80046dc:	2300      	movs	r3, #0
 80046de:	b510      	push	{r4, lr}
 80046e0:	4604      	mov	r4, r0
 80046e2:	e9c0 3300 	strd	r3, r3, [r0]
 80046e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80046ea:	6083      	str	r3, [r0, #8]
 80046ec:	8181      	strh	r1, [r0, #12]
 80046ee:	6643      	str	r3, [r0, #100]	@ 0x64
 80046f0:	81c2      	strh	r2, [r0, #14]
 80046f2:	6183      	str	r3, [r0, #24]
 80046f4:	4619      	mov	r1, r3
 80046f6:	2208      	movs	r2, #8
 80046f8:	305c      	adds	r0, #92	@ 0x5c
 80046fa:	f000 f915 	bl	8004928 <memset>
 80046fe:	4b0d      	ldr	r3, [pc, #52]	@ (8004734 <std+0x58>)
 8004700:	6224      	str	r4, [r4, #32]
 8004702:	6263      	str	r3, [r4, #36]	@ 0x24
 8004704:	4b0c      	ldr	r3, [pc, #48]	@ (8004738 <std+0x5c>)
 8004706:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004708:	4b0c      	ldr	r3, [pc, #48]	@ (800473c <std+0x60>)
 800470a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800470c:	4b0c      	ldr	r3, [pc, #48]	@ (8004740 <std+0x64>)
 800470e:	6323      	str	r3, [r4, #48]	@ 0x30
 8004710:	4b0c      	ldr	r3, [pc, #48]	@ (8004744 <std+0x68>)
 8004712:	429c      	cmp	r4, r3
 8004714:	d006      	beq.n	8004724 <std+0x48>
 8004716:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800471a:	4294      	cmp	r4, r2
 800471c:	d002      	beq.n	8004724 <std+0x48>
 800471e:	33d0      	adds	r3, #208	@ 0xd0
 8004720:	429c      	cmp	r4, r3
 8004722:	d105      	bne.n	8004730 <std+0x54>
 8004724:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004728:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800472c:	f000 b978 	b.w	8004a20 <__retarget_lock_init_recursive>
 8004730:	bd10      	pop	{r4, pc}
 8004732:	bf00      	nop
 8004734:	08004861 	.word	0x08004861
 8004738:	08004883 	.word	0x08004883
 800473c:	080048bb 	.word	0x080048bb
 8004740:	080048df 	.word	0x080048df
 8004744:	200002d0 	.word	0x200002d0

08004748 <stdio_exit_handler>:
 8004748:	4a02      	ldr	r2, [pc, #8]	@ (8004754 <stdio_exit_handler+0xc>)
 800474a:	4903      	ldr	r1, [pc, #12]	@ (8004758 <stdio_exit_handler+0x10>)
 800474c:	4803      	ldr	r0, [pc, #12]	@ (800475c <stdio_exit_handler+0x14>)
 800474e:	f000 b869 	b.w	8004824 <_fwalk_sglue>
 8004752:	bf00      	nop
 8004754:	2000000c 	.word	0x2000000c
 8004758:	08006395 	.word	0x08006395
 800475c:	2000001c 	.word	0x2000001c

08004760 <cleanup_stdio>:
 8004760:	6841      	ldr	r1, [r0, #4]
 8004762:	4b0c      	ldr	r3, [pc, #48]	@ (8004794 <cleanup_stdio+0x34>)
 8004764:	b510      	push	{r4, lr}
 8004766:	4299      	cmp	r1, r3
 8004768:	4604      	mov	r4, r0
 800476a:	d001      	beq.n	8004770 <cleanup_stdio+0x10>
 800476c:	f001 fe12 	bl	8006394 <_fflush_r>
 8004770:	68a1      	ldr	r1, [r4, #8]
 8004772:	4b09      	ldr	r3, [pc, #36]	@ (8004798 <cleanup_stdio+0x38>)
 8004774:	4299      	cmp	r1, r3
 8004776:	d002      	beq.n	800477e <cleanup_stdio+0x1e>
 8004778:	4620      	mov	r0, r4
 800477a:	f001 fe0b 	bl	8006394 <_fflush_r>
 800477e:	68e1      	ldr	r1, [r4, #12]
 8004780:	4b06      	ldr	r3, [pc, #24]	@ (800479c <cleanup_stdio+0x3c>)
 8004782:	4299      	cmp	r1, r3
 8004784:	d004      	beq.n	8004790 <cleanup_stdio+0x30>
 8004786:	4620      	mov	r0, r4
 8004788:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800478c:	f001 be02 	b.w	8006394 <_fflush_r>
 8004790:	bd10      	pop	{r4, pc}
 8004792:	bf00      	nop
 8004794:	200002d0 	.word	0x200002d0
 8004798:	20000338 	.word	0x20000338
 800479c:	200003a0 	.word	0x200003a0

080047a0 <global_stdio_init.part.0>:
 80047a0:	b510      	push	{r4, lr}
 80047a2:	4b0b      	ldr	r3, [pc, #44]	@ (80047d0 <global_stdio_init.part.0+0x30>)
 80047a4:	4c0b      	ldr	r4, [pc, #44]	@ (80047d4 <global_stdio_init.part.0+0x34>)
 80047a6:	4a0c      	ldr	r2, [pc, #48]	@ (80047d8 <global_stdio_init.part.0+0x38>)
 80047a8:	4620      	mov	r0, r4
 80047aa:	601a      	str	r2, [r3, #0]
 80047ac:	2104      	movs	r1, #4
 80047ae:	2200      	movs	r2, #0
 80047b0:	f7ff ff94 	bl	80046dc <std>
 80047b4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80047b8:	2201      	movs	r2, #1
 80047ba:	2109      	movs	r1, #9
 80047bc:	f7ff ff8e 	bl	80046dc <std>
 80047c0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80047c4:	2202      	movs	r2, #2
 80047c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80047ca:	2112      	movs	r1, #18
 80047cc:	f7ff bf86 	b.w	80046dc <std>
 80047d0:	20000408 	.word	0x20000408
 80047d4:	200002d0 	.word	0x200002d0
 80047d8:	08004749 	.word	0x08004749

080047dc <__sfp_lock_acquire>:
 80047dc:	4801      	ldr	r0, [pc, #4]	@ (80047e4 <__sfp_lock_acquire+0x8>)
 80047de:	f000 b920 	b.w	8004a22 <__retarget_lock_acquire_recursive>
 80047e2:	bf00      	nop
 80047e4:	20000411 	.word	0x20000411

080047e8 <__sfp_lock_release>:
 80047e8:	4801      	ldr	r0, [pc, #4]	@ (80047f0 <__sfp_lock_release+0x8>)
 80047ea:	f000 b91b 	b.w	8004a24 <__retarget_lock_release_recursive>
 80047ee:	bf00      	nop
 80047f0:	20000411 	.word	0x20000411

080047f4 <__sinit>:
 80047f4:	b510      	push	{r4, lr}
 80047f6:	4604      	mov	r4, r0
 80047f8:	f7ff fff0 	bl	80047dc <__sfp_lock_acquire>
 80047fc:	6a23      	ldr	r3, [r4, #32]
 80047fe:	b11b      	cbz	r3, 8004808 <__sinit+0x14>
 8004800:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004804:	f7ff bff0 	b.w	80047e8 <__sfp_lock_release>
 8004808:	4b04      	ldr	r3, [pc, #16]	@ (800481c <__sinit+0x28>)
 800480a:	6223      	str	r3, [r4, #32]
 800480c:	4b04      	ldr	r3, [pc, #16]	@ (8004820 <__sinit+0x2c>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d1f5      	bne.n	8004800 <__sinit+0xc>
 8004814:	f7ff ffc4 	bl	80047a0 <global_stdio_init.part.0>
 8004818:	e7f2      	b.n	8004800 <__sinit+0xc>
 800481a:	bf00      	nop
 800481c:	08004761 	.word	0x08004761
 8004820:	20000408 	.word	0x20000408

08004824 <_fwalk_sglue>:
 8004824:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004828:	4607      	mov	r7, r0
 800482a:	4688      	mov	r8, r1
 800482c:	4614      	mov	r4, r2
 800482e:	2600      	movs	r6, #0
 8004830:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004834:	f1b9 0901 	subs.w	r9, r9, #1
 8004838:	d505      	bpl.n	8004846 <_fwalk_sglue+0x22>
 800483a:	6824      	ldr	r4, [r4, #0]
 800483c:	2c00      	cmp	r4, #0
 800483e:	d1f7      	bne.n	8004830 <_fwalk_sglue+0xc>
 8004840:	4630      	mov	r0, r6
 8004842:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004846:	89ab      	ldrh	r3, [r5, #12]
 8004848:	2b01      	cmp	r3, #1
 800484a:	d907      	bls.n	800485c <_fwalk_sglue+0x38>
 800484c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004850:	3301      	adds	r3, #1
 8004852:	d003      	beq.n	800485c <_fwalk_sglue+0x38>
 8004854:	4629      	mov	r1, r5
 8004856:	4638      	mov	r0, r7
 8004858:	47c0      	blx	r8
 800485a:	4306      	orrs	r6, r0
 800485c:	3568      	adds	r5, #104	@ 0x68
 800485e:	e7e9      	b.n	8004834 <_fwalk_sglue+0x10>

08004860 <__sread>:
 8004860:	b510      	push	{r4, lr}
 8004862:	460c      	mov	r4, r1
 8004864:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004868:	f000 f88c 	bl	8004984 <_read_r>
 800486c:	2800      	cmp	r0, #0
 800486e:	bfab      	itete	ge
 8004870:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004872:	89a3      	ldrhlt	r3, [r4, #12]
 8004874:	181b      	addge	r3, r3, r0
 8004876:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800487a:	bfac      	ite	ge
 800487c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800487e:	81a3      	strhlt	r3, [r4, #12]
 8004880:	bd10      	pop	{r4, pc}

08004882 <__swrite>:
 8004882:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004886:	461f      	mov	r7, r3
 8004888:	898b      	ldrh	r3, [r1, #12]
 800488a:	4605      	mov	r5, r0
 800488c:	05db      	lsls	r3, r3, #23
 800488e:	460c      	mov	r4, r1
 8004890:	4616      	mov	r6, r2
 8004892:	d505      	bpl.n	80048a0 <__swrite+0x1e>
 8004894:	2302      	movs	r3, #2
 8004896:	2200      	movs	r2, #0
 8004898:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800489c:	f000 f860 	bl	8004960 <_lseek_r>
 80048a0:	89a3      	ldrh	r3, [r4, #12]
 80048a2:	4632      	mov	r2, r6
 80048a4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80048a8:	81a3      	strh	r3, [r4, #12]
 80048aa:	4628      	mov	r0, r5
 80048ac:	463b      	mov	r3, r7
 80048ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80048b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80048b6:	f000 b877 	b.w	80049a8 <_write_r>

080048ba <__sseek>:
 80048ba:	b510      	push	{r4, lr}
 80048bc:	460c      	mov	r4, r1
 80048be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80048c2:	f000 f84d 	bl	8004960 <_lseek_r>
 80048c6:	1c43      	adds	r3, r0, #1
 80048c8:	89a3      	ldrh	r3, [r4, #12]
 80048ca:	bf15      	itete	ne
 80048cc:	6560      	strne	r0, [r4, #84]	@ 0x54
 80048ce:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80048d2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80048d6:	81a3      	strheq	r3, [r4, #12]
 80048d8:	bf18      	it	ne
 80048da:	81a3      	strhne	r3, [r4, #12]
 80048dc:	bd10      	pop	{r4, pc}

080048de <__sclose>:
 80048de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80048e2:	f000 b82d 	b.w	8004940 <_close_r>
	...

080048e8 <_vsiprintf_r>:
 80048e8:	b500      	push	{lr}
 80048ea:	b09b      	sub	sp, #108	@ 0x6c
 80048ec:	9100      	str	r1, [sp, #0]
 80048ee:	9104      	str	r1, [sp, #16]
 80048f0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80048f4:	9105      	str	r1, [sp, #20]
 80048f6:	9102      	str	r1, [sp, #8]
 80048f8:	4905      	ldr	r1, [pc, #20]	@ (8004910 <_vsiprintf_r+0x28>)
 80048fa:	9103      	str	r1, [sp, #12]
 80048fc:	4669      	mov	r1, sp
 80048fe:	f001 fbcd 	bl	800609c <_svfiprintf_r>
 8004902:	2200      	movs	r2, #0
 8004904:	9b00      	ldr	r3, [sp, #0]
 8004906:	701a      	strb	r2, [r3, #0]
 8004908:	b01b      	add	sp, #108	@ 0x6c
 800490a:	f85d fb04 	ldr.w	pc, [sp], #4
 800490e:	bf00      	nop
 8004910:	ffff0208 	.word	0xffff0208

08004914 <vsiprintf>:
 8004914:	4613      	mov	r3, r2
 8004916:	460a      	mov	r2, r1
 8004918:	4601      	mov	r1, r0
 800491a:	4802      	ldr	r0, [pc, #8]	@ (8004924 <vsiprintf+0x10>)
 800491c:	6800      	ldr	r0, [r0, #0]
 800491e:	f7ff bfe3 	b.w	80048e8 <_vsiprintf_r>
 8004922:	bf00      	nop
 8004924:	20000018 	.word	0x20000018

08004928 <memset>:
 8004928:	4603      	mov	r3, r0
 800492a:	4402      	add	r2, r0
 800492c:	4293      	cmp	r3, r2
 800492e:	d100      	bne.n	8004932 <memset+0xa>
 8004930:	4770      	bx	lr
 8004932:	f803 1b01 	strb.w	r1, [r3], #1
 8004936:	e7f9      	b.n	800492c <memset+0x4>

08004938 <_localeconv_r>:
 8004938:	4800      	ldr	r0, [pc, #0]	@ (800493c <_localeconv_r+0x4>)
 800493a:	4770      	bx	lr
 800493c:	20000158 	.word	0x20000158

08004940 <_close_r>:
 8004940:	b538      	push	{r3, r4, r5, lr}
 8004942:	2300      	movs	r3, #0
 8004944:	4d05      	ldr	r5, [pc, #20]	@ (800495c <_close_r+0x1c>)
 8004946:	4604      	mov	r4, r0
 8004948:	4608      	mov	r0, r1
 800494a:	602b      	str	r3, [r5, #0]
 800494c:	f7fc fedb 	bl	8001706 <_close>
 8004950:	1c43      	adds	r3, r0, #1
 8004952:	d102      	bne.n	800495a <_close_r+0x1a>
 8004954:	682b      	ldr	r3, [r5, #0]
 8004956:	b103      	cbz	r3, 800495a <_close_r+0x1a>
 8004958:	6023      	str	r3, [r4, #0]
 800495a:	bd38      	pop	{r3, r4, r5, pc}
 800495c:	2000040c 	.word	0x2000040c

08004960 <_lseek_r>:
 8004960:	b538      	push	{r3, r4, r5, lr}
 8004962:	4604      	mov	r4, r0
 8004964:	4608      	mov	r0, r1
 8004966:	4611      	mov	r1, r2
 8004968:	2200      	movs	r2, #0
 800496a:	4d05      	ldr	r5, [pc, #20]	@ (8004980 <_lseek_r+0x20>)
 800496c:	602a      	str	r2, [r5, #0]
 800496e:	461a      	mov	r2, r3
 8004970:	f7fc feed 	bl	800174e <_lseek>
 8004974:	1c43      	adds	r3, r0, #1
 8004976:	d102      	bne.n	800497e <_lseek_r+0x1e>
 8004978:	682b      	ldr	r3, [r5, #0]
 800497a:	b103      	cbz	r3, 800497e <_lseek_r+0x1e>
 800497c:	6023      	str	r3, [r4, #0]
 800497e:	bd38      	pop	{r3, r4, r5, pc}
 8004980:	2000040c 	.word	0x2000040c

08004984 <_read_r>:
 8004984:	b538      	push	{r3, r4, r5, lr}
 8004986:	4604      	mov	r4, r0
 8004988:	4608      	mov	r0, r1
 800498a:	4611      	mov	r1, r2
 800498c:	2200      	movs	r2, #0
 800498e:	4d05      	ldr	r5, [pc, #20]	@ (80049a4 <_read_r+0x20>)
 8004990:	602a      	str	r2, [r5, #0]
 8004992:	461a      	mov	r2, r3
 8004994:	f7fc fe7e 	bl	8001694 <_read>
 8004998:	1c43      	adds	r3, r0, #1
 800499a:	d102      	bne.n	80049a2 <_read_r+0x1e>
 800499c:	682b      	ldr	r3, [r5, #0]
 800499e:	b103      	cbz	r3, 80049a2 <_read_r+0x1e>
 80049a0:	6023      	str	r3, [r4, #0]
 80049a2:	bd38      	pop	{r3, r4, r5, pc}
 80049a4:	2000040c 	.word	0x2000040c

080049a8 <_write_r>:
 80049a8:	b538      	push	{r3, r4, r5, lr}
 80049aa:	4604      	mov	r4, r0
 80049ac:	4608      	mov	r0, r1
 80049ae:	4611      	mov	r1, r2
 80049b0:	2200      	movs	r2, #0
 80049b2:	4d05      	ldr	r5, [pc, #20]	@ (80049c8 <_write_r+0x20>)
 80049b4:	602a      	str	r2, [r5, #0]
 80049b6:	461a      	mov	r2, r3
 80049b8:	f7fc fe89 	bl	80016ce <_write>
 80049bc:	1c43      	adds	r3, r0, #1
 80049be:	d102      	bne.n	80049c6 <_write_r+0x1e>
 80049c0:	682b      	ldr	r3, [r5, #0]
 80049c2:	b103      	cbz	r3, 80049c6 <_write_r+0x1e>
 80049c4:	6023      	str	r3, [r4, #0]
 80049c6:	bd38      	pop	{r3, r4, r5, pc}
 80049c8:	2000040c 	.word	0x2000040c

080049cc <__errno>:
 80049cc:	4b01      	ldr	r3, [pc, #4]	@ (80049d4 <__errno+0x8>)
 80049ce:	6818      	ldr	r0, [r3, #0]
 80049d0:	4770      	bx	lr
 80049d2:	bf00      	nop
 80049d4:	20000018 	.word	0x20000018

080049d8 <__libc_init_array>:
 80049d8:	b570      	push	{r4, r5, r6, lr}
 80049da:	2600      	movs	r6, #0
 80049dc:	4d0c      	ldr	r5, [pc, #48]	@ (8004a10 <__libc_init_array+0x38>)
 80049de:	4c0d      	ldr	r4, [pc, #52]	@ (8004a14 <__libc_init_array+0x3c>)
 80049e0:	1b64      	subs	r4, r4, r5
 80049e2:	10a4      	asrs	r4, r4, #2
 80049e4:	42a6      	cmp	r6, r4
 80049e6:	d109      	bne.n	80049fc <__libc_init_array+0x24>
 80049e8:	f002 f870 	bl	8006acc <_init>
 80049ec:	2600      	movs	r6, #0
 80049ee:	4d0a      	ldr	r5, [pc, #40]	@ (8004a18 <__libc_init_array+0x40>)
 80049f0:	4c0a      	ldr	r4, [pc, #40]	@ (8004a1c <__libc_init_array+0x44>)
 80049f2:	1b64      	subs	r4, r4, r5
 80049f4:	10a4      	asrs	r4, r4, #2
 80049f6:	42a6      	cmp	r6, r4
 80049f8:	d105      	bne.n	8004a06 <__libc_init_array+0x2e>
 80049fa:	bd70      	pop	{r4, r5, r6, pc}
 80049fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a00:	4798      	blx	r3
 8004a02:	3601      	adds	r6, #1
 8004a04:	e7ee      	b.n	80049e4 <__libc_init_array+0xc>
 8004a06:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a0a:	4798      	blx	r3
 8004a0c:	3601      	adds	r6, #1
 8004a0e:	e7f2      	b.n	80049f6 <__libc_init_array+0x1e>
 8004a10:	08006ec0 	.word	0x08006ec0
 8004a14:	08006ec0 	.word	0x08006ec0
 8004a18:	08006ec0 	.word	0x08006ec0
 8004a1c:	08006ec4 	.word	0x08006ec4

08004a20 <__retarget_lock_init_recursive>:
 8004a20:	4770      	bx	lr

08004a22 <__retarget_lock_acquire_recursive>:
 8004a22:	4770      	bx	lr

08004a24 <__retarget_lock_release_recursive>:
 8004a24:	4770      	bx	lr

08004a26 <memchr>:
 8004a26:	4603      	mov	r3, r0
 8004a28:	b510      	push	{r4, lr}
 8004a2a:	b2c9      	uxtb	r1, r1
 8004a2c:	4402      	add	r2, r0
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	4618      	mov	r0, r3
 8004a32:	d101      	bne.n	8004a38 <memchr+0x12>
 8004a34:	2000      	movs	r0, #0
 8004a36:	e003      	b.n	8004a40 <memchr+0x1a>
 8004a38:	7804      	ldrb	r4, [r0, #0]
 8004a3a:	3301      	adds	r3, #1
 8004a3c:	428c      	cmp	r4, r1
 8004a3e:	d1f6      	bne.n	8004a2e <memchr+0x8>
 8004a40:	bd10      	pop	{r4, pc}

08004a42 <quorem>:
 8004a42:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a46:	6903      	ldr	r3, [r0, #16]
 8004a48:	690c      	ldr	r4, [r1, #16]
 8004a4a:	4607      	mov	r7, r0
 8004a4c:	42a3      	cmp	r3, r4
 8004a4e:	db7e      	blt.n	8004b4e <quorem+0x10c>
 8004a50:	3c01      	subs	r4, #1
 8004a52:	00a3      	lsls	r3, r4, #2
 8004a54:	f100 0514 	add.w	r5, r0, #20
 8004a58:	f101 0814 	add.w	r8, r1, #20
 8004a5c:	9300      	str	r3, [sp, #0]
 8004a5e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004a62:	9301      	str	r3, [sp, #4]
 8004a64:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004a68:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004a6c:	3301      	adds	r3, #1
 8004a6e:	429a      	cmp	r2, r3
 8004a70:	fbb2 f6f3 	udiv	r6, r2, r3
 8004a74:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004a78:	d32e      	bcc.n	8004ad8 <quorem+0x96>
 8004a7a:	f04f 0a00 	mov.w	sl, #0
 8004a7e:	46c4      	mov	ip, r8
 8004a80:	46ae      	mov	lr, r5
 8004a82:	46d3      	mov	fp, sl
 8004a84:	f85c 3b04 	ldr.w	r3, [ip], #4
 8004a88:	b298      	uxth	r0, r3
 8004a8a:	fb06 a000 	mla	r0, r6, r0, sl
 8004a8e:	0c1b      	lsrs	r3, r3, #16
 8004a90:	0c02      	lsrs	r2, r0, #16
 8004a92:	fb06 2303 	mla	r3, r6, r3, r2
 8004a96:	f8de 2000 	ldr.w	r2, [lr]
 8004a9a:	b280      	uxth	r0, r0
 8004a9c:	b292      	uxth	r2, r2
 8004a9e:	1a12      	subs	r2, r2, r0
 8004aa0:	445a      	add	r2, fp
 8004aa2:	f8de 0000 	ldr.w	r0, [lr]
 8004aa6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004aaa:	b29b      	uxth	r3, r3
 8004aac:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8004ab0:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8004ab4:	b292      	uxth	r2, r2
 8004ab6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8004aba:	45e1      	cmp	r9, ip
 8004abc:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8004ac0:	f84e 2b04 	str.w	r2, [lr], #4
 8004ac4:	d2de      	bcs.n	8004a84 <quorem+0x42>
 8004ac6:	9b00      	ldr	r3, [sp, #0]
 8004ac8:	58eb      	ldr	r3, [r5, r3]
 8004aca:	b92b      	cbnz	r3, 8004ad8 <quorem+0x96>
 8004acc:	9b01      	ldr	r3, [sp, #4]
 8004ace:	3b04      	subs	r3, #4
 8004ad0:	429d      	cmp	r5, r3
 8004ad2:	461a      	mov	r2, r3
 8004ad4:	d32f      	bcc.n	8004b36 <quorem+0xf4>
 8004ad6:	613c      	str	r4, [r7, #16]
 8004ad8:	4638      	mov	r0, r7
 8004ada:	f001 f97b 	bl	8005dd4 <__mcmp>
 8004ade:	2800      	cmp	r0, #0
 8004ae0:	db25      	blt.n	8004b2e <quorem+0xec>
 8004ae2:	4629      	mov	r1, r5
 8004ae4:	2000      	movs	r0, #0
 8004ae6:	f858 2b04 	ldr.w	r2, [r8], #4
 8004aea:	f8d1 c000 	ldr.w	ip, [r1]
 8004aee:	fa1f fe82 	uxth.w	lr, r2
 8004af2:	fa1f f38c 	uxth.w	r3, ip
 8004af6:	eba3 030e 	sub.w	r3, r3, lr
 8004afa:	4403      	add	r3, r0
 8004afc:	0c12      	lsrs	r2, r2, #16
 8004afe:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8004b02:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8004b06:	b29b      	uxth	r3, r3
 8004b08:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004b0c:	45c1      	cmp	r9, r8
 8004b0e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8004b12:	f841 3b04 	str.w	r3, [r1], #4
 8004b16:	d2e6      	bcs.n	8004ae6 <quorem+0xa4>
 8004b18:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004b1c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004b20:	b922      	cbnz	r2, 8004b2c <quorem+0xea>
 8004b22:	3b04      	subs	r3, #4
 8004b24:	429d      	cmp	r5, r3
 8004b26:	461a      	mov	r2, r3
 8004b28:	d30b      	bcc.n	8004b42 <quorem+0x100>
 8004b2a:	613c      	str	r4, [r7, #16]
 8004b2c:	3601      	adds	r6, #1
 8004b2e:	4630      	mov	r0, r6
 8004b30:	b003      	add	sp, #12
 8004b32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b36:	6812      	ldr	r2, [r2, #0]
 8004b38:	3b04      	subs	r3, #4
 8004b3a:	2a00      	cmp	r2, #0
 8004b3c:	d1cb      	bne.n	8004ad6 <quorem+0x94>
 8004b3e:	3c01      	subs	r4, #1
 8004b40:	e7c6      	b.n	8004ad0 <quorem+0x8e>
 8004b42:	6812      	ldr	r2, [r2, #0]
 8004b44:	3b04      	subs	r3, #4
 8004b46:	2a00      	cmp	r2, #0
 8004b48:	d1ef      	bne.n	8004b2a <quorem+0xe8>
 8004b4a:	3c01      	subs	r4, #1
 8004b4c:	e7ea      	b.n	8004b24 <quorem+0xe2>
 8004b4e:	2000      	movs	r0, #0
 8004b50:	e7ee      	b.n	8004b30 <quorem+0xee>
 8004b52:	0000      	movs	r0, r0
 8004b54:	0000      	movs	r0, r0
	...

08004b58 <_dtoa_r>:
 8004b58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b5c:	4614      	mov	r4, r2
 8004b5e:	461d      	mov	r5, r3
 8004b60:	69c7      	ldr	r7, [r0, #28]
 8004b62:	b097      	sub	sp, #92	@ 0x5c
 8004b64:	4683      	mov	fp, r0
 8004b66:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8004b6a:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8004b6c:	b97f      	cbnz	r7, 8004b8e <_dtoa_r+0x36>
 8004b6e:	2010      	movs	r0, #16
 8004b70:	f000 fe02 	bl	8005778 <malloc>
 8004b74:	4602      	mov	r2, r0
 8004b76:	f8cb 001c 	str.w	r0, [fp, #28]
 8004b7a:	b920      	cbnz	r0, 8004b86 <_dtoa_r+0x2e>
 8004b7c:	21ef      	movs	r1, #239	@ 0xef
 8004b7e:	4ba8      	ldr	r3, [pc, #672]	@ (8004e20 <_dtoa_r+0x2c8>)
 8004b80:	48a8      	ldr	r0, [pc, #672]	@ (8004e24 <_dtoa_r+0x2cc>)
 8004b82:	f001 fc67 	bl	8006454 <__assert_func>
 8004b86:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8004b8a:	6007      	str	r7, [r0, #0]
 8004b8c:	60c7      	str	r7, [r0, #12]
 8004b8e:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004b92:	6819      	ldr	r1, [r3, #0]
 8004b94:	b159      	cbz	r1, 8004bae <_dtoa_r+0x56>
 8004b96:	685a      	ldr	r2, [r3, #4]
 8004b98:	2301      	movs	r3, #1
 8004b9a:	4093      	lsls	r3, r2
 8004b9c:	604a      	str	r2, [r1, #4]
 8004b9e:	608b      	str	r3, [r1, #8]
 8004ba0:	4658      	mov	r0, fp
 8004ba2:	f000 fedf 	bl	8005964 <_Bfree>
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004bac:	601a      	str	r2, [r3, #0]
 8004bae:	1e2b      	subs	r3, r5, #0
 8004bb0:	bfaf      	iteee	ge
 8004bb2:	2300      	movge	r3, #0
 8004bb4:	2201      	movlt	r2, #1
 8004bb6:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8004bba:	9303      	strlt	r3, [sp, #12]
 8004bbc:	bfa8      	it	ge
 8004bbe:	6033      	strge	r3, [r6, #0]
 8004bc0:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8004bc4:	4b98      	ldr	r3, [pc, #608]	@ (8004e28 <_dtoa_r+0x2d0>)
 8004bc6:	bfb8      	it	lt
 8004bc8:	6032      	strlt	r2, [r6, #0]
 8004bca:	ea33 0308 	bics.w	r3, r3, r8
 8004bce:	d112      	bne.n	8004bf6 <_dtoa_r+0x9e>
 8004bd0:	f242 730f 	movw	r3, #9999	@ 0x270f
 8004bd4:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8004bd6:	6013      	str	r3, [r2, #0]
 8004bd8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8004bdc:	4323      	orrs	r3, r4
 8004bde:	f000 8550 	beq.w	8005682 <_dtoa_r+0xb2a>
 8004be2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8004be4:	f8df a244 	ldr.w	sl, [pc, #580]	@ 8004e2c <_dtoa_r+0x2d4>
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	f000 8552 	beq.w	8005692 <_dtoa_r+0xb3a>
 8004bee:	f10a 0303 	add.w	r3, sl, #3
 8004bf2:	f000 bd4c 	b.w	800568e <_dtoa_r+0xb36>
 8004bf6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004bfa:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8004bfe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004c02:	2200      	movs	r2, #0
 8004c04:	2300      	movs	r3, #0
 8004c06:	f7fb fecf 	bl	80009a8 <__aeabi_dcmpeq>
 8004c0a:	4607      	mov	r7, r0
 8004c0c:	b158      	cbz	r0, 8004c26 <_dtoa_r+0xce>
 8004c0e:	2301      	movs	r3, #1
 8004c10:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8004c12:	6013      	str	r3, [r2, #0]
 8004c14:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8004c16:	b113      	cbz	r3, 8004c1e <_dtoa_r+0xc6>
 8004c18:	4b85      	ldr	r3, [pc, #532]	@ (8004e30 <_dtoa_r+0x2d8>)
 8004c1a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8004c1c:	6013      	str	r3, [r2, #0]
 8004c1e:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8004e34 <_dtoa_r+0x2dc>
 8004c22:	f000 bd36 	b.w	8005692 <_dtoa_r+0xb3a>
 8004c26:	ab14      	add	r3, sp, #80	@ 0x50
 8004c28:	9301      	str	r3, [sp, #4]
 8004c2a:	ab15      	add	r3, sp, #84	@ 0x54
 8004c2c:	9300      	str	r3, [sp, #0]
 8004c2e:	4658      	mov	r0, fp
 8004c30:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8004c34:	f001 f97e 	bl	8005f34 <__d2b>
 8004c38:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8004c3c:	4681      	mov	r9, r0
 8004c3e:	2e00      	cmp	r6, #0
 8004c40:	d077      	beq.n	8004d32 <_dtoa_r+0x1da>
 8004c42:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004c46:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004c48:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8004c4c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004c50:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8004c54:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8004c58:	9712      	str	r7, [sp, #72]	@ 0x48
 8004c5a:	4619      	mov	r1, r3
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	4b76      	ldr	r3, [pc, #472]	@ (8004e38 <_dtoa_r+0x2e0>)
 8004c60:	f7fb fa82 	bl	8000168 <__aeabi_dsub>
 8004c64:	a368      	add	r3, pc, #416	@ (adr r3, 8004e08 <_dtoa_r+0x2b0>)
 8004c66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c6a:	f7fb fc35 	bl	80004d8 <__aeabi_dmul>
 8004c6e:	a368      	add	r3, pc, #416	@ (adr r3, 8004e10 <_dtoa_r+0x2b8>)
 8004c70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c74:	f7fb fa7a 	bl	800016c <__adddf3>
 8004c78:	4604      	mov	r4, r0
 8004c7a:	4630      	mov	r0, r6
 8004c7c:	460d      	mov	r5, r1
 8004c7e:	f7fb fbc1 	bl	8000404 <__aeabi_i2d>
 8004c82:	a365      	add	r3, pc, #404	@ (adr r3, 8004e18 <_dtoa_r+0x2c0>)
 8004c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c88:	f7fb fc26 	bl	80004d8 <__aeabi_dmul>
 8004c8c:	4602      	mov	r2, r0
 8004c8e:	460b      	mov	r3, r1
 8004c90:	4620      	mov	r0, r4
 8004c92:	4629      	mov	r1, r5
 8004c94:	f7fb fa6a 	bl	800016c <__adddf3>
 8004c98:	4604      	mov	r4, r0
 8004c9a:	460d      	mov	r5, r1
 8004c9c:	f7fb fecc 	bl	8000a38 <__aeabi_d2iz>
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	4607      	mov	r7, r0
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	4620      	mov	r0, r4
 8004ca8:	4629      	mov	r1, r5
 8004caa:	f7fb fe87 	bl	80009bc <__aeabi_dcmplt>
 8004cae:	b140      	cbz	r0, 8004cc2 <_dtoa_r+0x16a>
 8004cb0:	4638      	mov	r0, r7
 8004cb2:	f7fb fba7 	bl	8000404 <__aeabi_i2d>
 8004cb6:	4622      	mov	r2, r4
 8004cb8:	462b      	mov	r3, r5
 8004cba:	f7fb fe75 	bl	80009a8 <__aeabi_dcmpeq>
 8004cbe:	b900      	cbnz	r0, 8004cc2 <_dtoa_r+0x16a>
 8004cc0:	3f01      	subs	r7, #1
 8004cc2:	2f16      	cmp	r7, #22
 8004cc4:	d853      	bhi.n	8004d6e <_dtoa_r+0x216>
 8004cc6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004cca:	4b5c      	ldr	r3, [pc, #368]	@ (8004e3c <_dtoa_r+0x2e4>)
 8004ccc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004cd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cd4:	f7fb fe72 	bl	80009bc <__aeabi_dcmplt>
 8004cd8:	2800      	cmp	r0, #0
 8004cda:	d04a      	beq.n	8004d72 <_dtoa_r+0x21a>
 8004cdc:	2300      	movs	r3, #0
 8004cde:	3f01      	subs	r7, #1
 8004ce0:	930f      	str	r3, [sp, #60]	@ 0x3c
 8004ce2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004ce4:	1b9b      	subs	r3, r3, r6
 8004ce6:	1e5a      	subs	r2, r3, #1
 8004ce8:	bf46      	itte	mi
 8004cea:	f1c3 0801 	rsbmi	r8, r3, #1
 8004cee:	2300      	movmi	r3, #0
 8004cf0:	f04f 0800 	movpl.w	r8, #0
 8004cf4:	9209      	str	r2, [sp, #36]	@ 0x24
 8004cf6:	bf48      	it	mi
 8004cf8:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8004cfa:	2f00      	cmp	r7, #0
 8004cfc:	db3b      	blt.n	8004d76 <_dtoa_r+0x21e>
 8004cfe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004d00:	970e      	str	r7, [sp, #56]	@ 0x38
 8004d02:	443b      	add	r3, r7
 8004d04:	9309      	str	r3, [sp, #36]	@ 0x24
 8004d06:	2300      	movs	r3, #0
 8004d08:	930a      	str	r3, [sp, #40]	@ 0x28
 8004d0a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004d0c:	2b09      	cmp	r3, #9
 8004d0e:	d866      	bhi.n	8004dde <_dtoa_r+0x286>
 8004d10:	2b05      	cmp	r3, #5
 8004d12:	bfc4      	itt	gt
 8004d14:	3b04      	subgt	r3, #4
 8004d16:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8004d18:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004d1a:	bfc8      	it	gt
 8004d1c:	2400      	movgt	r4, #0
 8004d1e:	f1a3 0302 	sub.w	r3, r3, #2
 8004d22:	bfd8      	it	le
 8004d24:	2401      	movle	r4, #1
 8004d26:	2b03      	cmp	r3, #3
 8004d28:	d864      	bhi.n	8004df4 <_dtoa_r+0x29c>
 8004d2a:	e8df f003 	tbb	[pc, r3]
 8004d2e:	382b      	.short	0x382b
 8004d30:	5636      	.short	0x5636
 8004d32:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8004d36:	441e      	add	r6, r3
 8004d38:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8004d3c:	2b20      	cmp	r3, #32
 8004d3e:	bfc1      	itttt	gt
 8004d40:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8004d44:	fa08 f803 	lslgt.w	r8, r8, r3
 8004d48:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8004d4c:	fa24 f303 	lsrgt.w	r3, r4, r3
 8004d50:	bfd6      	itet	le
 8004d52:	f1c3 0320 	rsble	r3, r3, #32
 8004d56:	ea48 0003 	orrgt.w	r0, r8, r3
 8004d5a:	fa04 f003 	lslle.w	r0, r4, r3
 8004d5e:	f7fb fb41 	bl	80003e4 <__aeabi_ui2d>
 8004d62:	2201      	movs	r2, #1
 8004d64:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8004d68:	3e01      	subs	r6, #1
 8004d6a:	9212      	str	r2, [sp, #72]	@ 0x48
 8004d6c:	e775      	b.n	8004c5a <_dtoa_r+0x102>
 8004d6e:	2301      	movs	r3, #1
 8004d70:	e7b6      	b.n	8004ce0 <_dtoa_r+0x188>
 8004d72:	900f      	str	r0, [sp, #60]	@ 0x3c
 8004d74:	e7b5      	b.n	8004ce2 <_dtoa_r+0x18a>
 8004d76:	427b      	negs	r3, r7
 8004d78:	930a      	str	r3, [sp, #40]	@ 0x28
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	eba8 0807 	sub.w	r8, r8, r7
 8004d80:	930e      	str	r3, [sp, #56]	@ 0x38
 8004d82:	e7c2      	b.n	8004d0a <_dtoa_r+0x1b2>
 8004d84:	2300      	movs	r3, #0
 8004d86:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004d88:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	dc35      	bgt.n	8004dfa <_dtoa_r+0x2a2>
 8004d8e:	2301      	movs	r3, #1
 8004d90:	461a      	mov	r2, r3
 8004d92:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8004d96:	9221      	str	r2, [sp, #132]	@ 0x84
 8004d98:	e00b      	b.n	8004db2 <_dtoa_r+0x25a>
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	e7f3      	b.n	8004d86 <_dtoa_r+0x22e>
 8004d9e:	2300      	movs	r3, #0
 8004da0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004da2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004da4:	18fb      	adds	r3, r7, r3
 8004da6:	9308      	str	r3, [sp, #32]
 8004da8:	3301      	adds	r3, #1
 8004daa:	2b01      	cmp	r3, #1
 8004dac:	9307      	str	r3, [sp, #28]
 8004dae:	bfb8      	it	lt
 8004db0:	2301      	movlt	r3, #1
 8004db2:	2100      	movs	r1, #0
 8004db4:	2204      	movs	r2, #4
 8004db6:	f8db 001c 	ldr.w	r0, [fp, #28]
 8004dba:	f102 0514 	add.w	r5, r2, #20
 8004dbe:	429d      	cmp	r5, r3
 8004dc0:	d91f      	bls.n	8004e02 <_dtoa_r+0x2aa>
 8004dc2:	6041      	str	r1, [r0, #4]
 8004dc4:	4658      	mov	r0, fp
 8004dc6:	f000 fd8d 	bl	80058e4 <_Balloc>
 8004dca:	4682      	mov	sl, r0
 8004dcc:	2800      	cmp	r0, #0
 8004dce:	d139      	bne.n	8004e44 <_dtoa_r+0x2ec>
 8004dd0:	4602      	mov	r2, r0
 8004dd2:	f240 11af 	movw	r1, #431	@ 0x1af
 8004dd6:	4b1a      	ldr	r3, [pc, #104]	@ (8004e40 <_dtoa_r+0x2e8>)
 8004dd8:	e6d2      	b.n	8004b80 <_dtoa_r+0x28>
 8004dda:	2301      	movs	r3, #1
 8004ddc:	e7e0      	b.n	8004da0 <_dtoa_r+0x248>
 8004dde:	2401      	movs	r4, #1
 8004de0:	2300      	movs	r3, #0
 8004de2:	940b      	str	r4, [sp, #44]	@ 0x2c
 8004de4:	9320      	str	r3, [sp, #128]	@ 0x80
 8004de6:	f04f 33ff 	mov.w	r3, #4294967295
 8004dea:	2200      	movs	r2, #0
 8004dec:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8004df0:	2312      	movs	r3, #18
 8004df2:	e7d0      	b.n	8004d96 <_dtoa_r+0x23e>
 8004df4:	2301      	movs	r3, #1
 8004df6:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004df8:	e7f5      	b.n	8004de6 <_dtoa_r+0x28e>
 8004dfa:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004dfc:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8004e00:	e7d7      	b.n	8004db2 <_dtoa_r+0x25a>
 8004e02:	3101      	adds	r1, #1
 8004e04:	0052      	lsls	r2, r2, #1
 8004e06:	e7d8      	b.n	8004dba <_dtoa_r+0x262>
 8004e08:	636f4361 	.word	0x636f4361
 8004e0c:	3fd287a7 	.word	0x3fd287a7
 8004e10:	8b60c8b3 	.word	0x8b60c8b3
 8004e14:	3fc68a28 	.word	0x3fc68a28
 8004e18:	509f79fb 	.word	0x509f79fb
 8004e1c:	3fd34413 	.word	0x3fd34413
 8004e20:	08006b8b 	.word	0x08006b8b
 8004e24:	08006ba2 	.word	0x08006ba2
 8004e28:	7ff00000 	.word	0x7ff00000
 8004e2c:	08006b87 	.word	0x08006b87
 8004e30:	08006b5b 	.word	0x08006b5b
 8004e34:	08006b5a 	.word	0x08006b5a
 8004e38:	3ff80000 	.word	0x3ff80000
 8004e3c:	08006c98 	.word	0x08006c98
 8004e40:	08006bfa 	.word	0x08006bfa
 8004e44:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004e48:	6018      	str	r0, [r3, #0]
 8004e4a:	9b07      	ldr	r3, [sp, #28]
 8004e4c:	2b0e      	cmp	r3, #14
 8004e4e:	f200 80a4 	bhi.w	8004f9a <_dtoa_r+0x442>
 8004e52:	2c00      	cmp	r4, #0
 8004e54:	f000 80a1 	beq.w	8004f9a <_dtoa_r+0x442>
 8004e58:	2f00      	cmp	r7, #0
 8004e5a:	dd33      	ble.n	8004ec4 <_dtoa_r+0x36c>
 8004e5c:	4b86      	ldr	r3, [pc, #536]	@ (8005078 <_dtoa_r+0x520>)
 8004e5e:	f007 020f 	and.w	r2, r7, #15
 8004e62:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004e66:	05f8      	lsls	r0, r7, #23
 8004e68:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004e6c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8004e70:	ea4f 1427 	mov.w	r4, r7, asr #4
 8004e74:	d516      	bpl.n	8004ea4 <_dtoa_r+0x34c>
 8004e76:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004e7a:	4b80      	ldr	r3, [pc, #512]	@ (800507c <_dtoa_r+0x524>)
 8004e7c:	2603      	movs	r6, #3
 8004e7e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004e82:	f7fb fc53 	bl	800072c <__aeabi_ddiv>
 8004e86:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004e8a:	f004 040f 	and.w	r4, r4, #15
 8004e8e:	4d7b      	ldr	r5, [pc, #492]	@ (800507c <_dtoa_r+0x524>)
 8004e90:	b954      	cbnz	r4, 8004ea8 <_dtoa_r+0x350>
 8004e92:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004e96:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004e9a:	f7fb fc47 	bl	800072c <__aeabi_ddiv>
 8004e9e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004ea2:	e028      	b.n	8004ef6 <_dtoa_r+0x39e>
 8004ea4:	2602      	movs	r6, #2
 8004ea6:	e7f2      	b.n	8004e8e <_dtoa_r+0x336>
 8004ea8:	07e1      	lsls	r1, r4, #31
 8004eaa:	d508      	bpl.n	8004ebe <_dtoa_r+0x366>
 8004eac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004eb0:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004eb4:	f7fb fb10 	bl	80004d8 <__aeabi_dmul>
 8004eb8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004ebc:	3601      	adds	r6, #1
 8004ebe:	1064      	asrs	r4, r4, #1
 8004ec0:	3508      	adds	r5, #8
 8004ec2:	e7e5      	b.n	8004e90 <_dtoa_r+0x338>
 8004ec4:	f000 80d2 	beq.w	800506c <_dtoa_r+0x514>
 8004ec8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004ecc:	427c      	negs	r4, r7
 8004ece:	4b6a      	ldr	r3, [pc, #424]	@ (8005078 <_dtoa_r+0x520>)
 8004ed0:	f004 020f 	and.w	r2, r4, #15
 8004ed4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004ed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004edc:	f7fb fafc 	bl	80004d8 <__aeabi_dmul>
 8004ee0:	2602      	movs	r6, #2
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004ee8:	4d64      	ldr	r5, [pc, #400]	@ (800507c <_dtoa_r+0x524>)
 8004eea:	1124      	asrs	r4, r4, #4
 8004eec:	2c00      	cmp	r4, #0
 8004eee:	f040 80b2 	bne.w	8005056 <_dtoa_r+0x4fe>
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d1d3      	bne.n	8004e9e <_dtoa_r+0x346>
 8004ef6:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8004efa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	f000 80b7 	beq.w	8005070 <_dtoa_r+0x518>
 8004f02:	2200      	movs	r2, #0
 8004f04:	4620      	mov	r0, r4
 8004f06:	4629      	mov	r1, r5
 8004f08:	4b5d      	ldr	r3, [pc, #372]	@ (8005080 <_dtoa_r+0x528>)
 8004f0a:	f7fb fd57 	bl	80009bc <__aeabi_dcmplt>
 8004f0e:	2800      	cmp	r0, #0
 8004f10:	f000 80ae 	beq.w	8005070 <_dtoa_r+0x518>
 8004f14:	9b07      	ldr	r3, [sp, #28]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	f000 80aa 	beq.w	8005070 <_dtoa_r+0x518>
 8004f1c:	9b08      	ldr	r3, [sp, #32]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	dd37      	ble.n	8004f92 <_dtoa_r+0x43a>
 8004f22:	1e7b      	subs	r3, r7, #1
 8004f24:	4620      	mov	r0, r4
 8004f26:	9304      	str	r3, [sp, #16]
 8004f28:	2200      	movs	r2, #0
 8004f2a:	4629      	mov	r1, r5
 8004f2c:	4b55      	ldr	r3, [pc, #340]	@ (8005084 <_dtoa_r+0x52c>)
 8004f2e:	f7fb fad3 	bl	80004d8 <__aeabi_dmul>
 8004f32:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004f36:	9c08      	ldr	r4, [sp, #32]
 8004f38:	3601      	adds	r6, #1
 8004f3a:	4630      	mov	r0, r6
 8004f3c:	f7fb fa62 	bl	8000404 <__aeabi_i2d>
 8004f40:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004f44:	f7fb fac8 	bl	80004d8 <__aeabi_dmul>
 8004f48:	2200      	movs	r2, #0
 8004f4a:	4b4f      	ldr	r3, [pc, #316]	@ (8005088 <_dtoa_r+0x530>)
 8004f4c:	f7fb f90e 	bl	800016c <__adddf3>
 8004f50:	4605      	mov	r5, r0
 8004f52:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8004f56:	2c00      	cmp	r4, #0
 8004f58:	f040 809a 	bne.w	8005090 <_dtoa_r+0x538>
 8004f5c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004f60:	2200      	movs	r2, #0
 8004f62:	4b4a      	ldr	r3, [pc, #296]	@ (800508c <_dtoa_r+0x534>)
 8004f64:	f7fb f900 	bl	8000168 <__aeabi_dsub>
 8004f68:	4602      	mov	r2, r0
 8004f6a:	460b      	mov	r3, r1
 8004f6c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004f70:	462a      	mov	r2, r5
 8004f72:	4633      	mov	r3, r6
 8004f74:	f7fb fd40 	bl	80009f8 <__aeabi_dcmpgt>
 8004f78:	2800      	cmp	r0, #0
 8004f7a:	f040 828e 	bne.w	800549a <_dtoa_r+0x942>
 8004f7e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004f82:	462a      	mov	r2, r5
 8004f84:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8004f88:	f7fb fd18 	bl	80009bc <__aeabi_dcmplt>
 8004f8c:	2800      	cmp	r0, #0
 8004f8e:	f040 8127 	bne.w	80051e0 <_dtoa_r+0x688>
 8004f92:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8004f96:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8004f9a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	f2c0 8163 	blt.w	8005268 <_dtoa_r+0x710>
 8004fa2:	2f0e      	cmp	r7, #14
 8004fa4:	f300 8160 	bgt.w	8005268 <_dtoa_r+0x710>
 8004fa8:	4b33      	ldr	r3, [pc, #204]	@ (8005078 <_dtoa_r+0x520>)
 8004faa:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004fae:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004fb2:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8004fb6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	da03      	bge.n	8004fc4 <_dtoa_r+0x46c>
 8004fbc:	9b07      	ldr	r3, [sp, #28]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	f340 8100 	ble.w	80051c4 <_dtoa_r+0x66c>
 8004fc4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8004fc8:	4656      	mov	r6, sl
 8004fca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004fce:	4620      	mov	r0, r4
 8004fd0:	4629      	mov	r1, r5
 8004fd2:	f7fb fbab 	bl	800072c <__aeabi_ddiv>
 8004fd6:	f7fb fd2f 	bl	8000a38 <__aeabi_d2iz>
 8004fda:	4680      	mov	r8, r0
 8004fdc:	f7fb fa12 	bl	8000404 <__aeabi_i2d>
 8004fe0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004fe4:	f7fb fa78 	bl	80004d8 <__aeabi_dmul>
 8004fe8:	4602      	mov	r2, r0
 8004fea:	460b      	mov	r3, r1
 8004fec:	4620      	mov	r0, r4
 8004fee:	4629      	mov	r1, r5
 8004ff0:	f7fb f8ba 	bl	8000168 <__aeabi_dsub>
 8004ff4:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8004ff8:	9d07      	ldr	r5, [sp, #28]
 8004ffa:	f806 4b01 	strb.w	r4, [r6], #1
 8004ffe:	eba6 040a 	sub.w	r4, r6, sl
 8005002:	42a5      	cmp	r5, r4
 8005004:	4602      	mov	r2, r0
 8005006:	460b      	mov	r3, r1
 8005008:	f040 8116 	bne.w	8005238 <_dtoa_r+0x6e0>
 800500c:	f7fb f8ae 	bl	800016c <__adddf3>
 8005010:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005014:	4604      	mov	r4, r0
 8005016:	460d      	mov	r5, r1
 8005018:	f7fb fcee 	bl	80009f8 <__aeabi_dcmpgt>
 800501c:	2800      	cmp	r0, #0
 800501e:	f040 80f8 	bne.w	8005212 <_dtoa_r+0x6ba>
 8005022:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005026:	4620      	mov	r0, r4
 8005028:	4629      	mov	r1, r5
 800502a:	f7fb fcbd 	bl	80009a8 <__aeabi_dcmpeq>
 800502e:	b118      	cbz	r0, 8005038 <_dtoa_r+0x4e0>
 8005030:	f018 0f01 	tst.w	r8, #1
 8005034:	f040 80ed 	bne.w	8005212 <_dtoa_r+0x6ba>
 8005038:	4649      	mov	r1, r9
 800503a:	4658      	mov	r0, fp
 800503c:	f000 fc92 	bl	8005964 <_Bfree>
 8005040:	2300      	movs	r3, #0
 8005042:	7033      	strb	r3, [r6, #0]
 8005044:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8005046:	3701      	adds	r7, #1
 8005048:	601f      	str	r7, [r3, #0]
 800504a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800504c:	2b00      	cmp	r3, #0
 800504e:	f000 8320 	beq.w	8005692 <_dtoa_r+0xb3a>
 8005052:	601e      	str	r6, [r3, #0]
 8005054:	e31d      	b.n	8005692 <_dtoa_r+0xb3a>
 8005056:	07e2      	lsls	r2, r4, #31
 8005058:	d505      	bpl.n	8005066 <_dtoa_r+0x50e>
 800505a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800505e:	f7fb fa3b 	bl	80004d8 <__aeabi_dmul>
 8005062:	2301      	movs	r3, #1
 8005064:	3601      	adds	r6, #1
 8005066:	1064      	asrs	r4, r4, #1
 8005068:	3508      	adds	r5, #8
 800506a:	e73f      	b.n	8004eec <_dtoa_r+0x394>
 800506c:	2602      	movs	r6, #2
 800506e:	e742      	b.n	8004ef6 <_dtoa_r+0x39e>
 8005070:	9c07      	ldr	r4, [sp, #28]
 8005072:	9704      	str	r7, [sp, #16]
 8005074:	e761      	b.n	8004f3a <_dtoa_r+0x3e2>
 8005076:	bf00      	nop
 8005078:	08006c98 	.word	0x08006c98
 800507c:	08006c70 	.word	0x08006c70
 8005080:	3ff00000 	.word	0x3ff00000
 8005084:	40240000 	.word	0x40240000
 8005088:	401c0000 	.word	0x401c0000
 800508c:	40140000 	.word	0x40140000
 8005090:	4b70      	ldr	r3, [pc, #448]	@ (8005254 <_dtoa_r+0x6fc>)
 8005092:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005094:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005098:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800509c:	4454      	add	r4, sl
 800509e:	2900      	cmp	r1, #0
 80050a0:	d045      	beq.n	800512e <_dtoa_r+0x5d6>
 80050a2:	2000      	movs	r0, #0
 80050a4:	496c      	ldr	r1, [pc, #432]	@ (8005258 <_dtoa_r+0x700>)
 80050a6:	f7fb fb41 	bl	800072c <__aeabi_ddiv>
 80050aa:	4633      	mov	r3, r6
 80050ac:	462a      	mov	r2, r5
 80050ae:	f7fb f85b 	bl	8000168 <__aeabi_dsub>
 80050b2:	4656      	mov	r6, sl
 80050b4:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80050b8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80050bc:	f7fb fcbc 	bl	8000a38 <__aeabi_d2iz>
 80050c0:	4605      	mov	r5, r0
 80050c2:	f7fb f99f 	bl	8000404 <__aeabi_i2d>
 80050c6:	4602      	mov	r2, r0
 80050c8:	460b      	mov	r3, r1
 80050ca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80050ce:	f7fb f84b 	bl	8000168 <__aeabi_dsub>
 80050d2:	4602      	mov	r2, r0
 80050d4:	460b      	mov	r3, r1
 80050d6:	3530      	adds	r5, #48	@ 0x30
 80050d8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80050dc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80050e0:	f806 5b01 	strb.w	r5, [r6], #1
 80050e4:	f7fb fc6a 	bl	80009bc <__aeabi_dcmplt>
 80050e8:	2800      	cmp	r0, #0
 80050ea:	d163      	bne.n	80051b4 <_dtoa_r+0x65c>
 80050ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80050f0:	2000      	movs	r0, #0
 80050f2:	495a      	ldr	r1, [pc, #360]	@ (800525c <_dtoa_r+0x704>)
 80050f4:	f7fb f838 	bl	8000168 <__aeabi_dsub>
 80050f8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80050fc:	f7fb fc5e 	bl	80009bc <__aeabi_dcmplt>
 8005100:	2800      	cmp	r0, #0
 8005102:	f040 8087 	bne.w	8005214 <_dtoa_r+0x6bc>
 8005106:	42a6      	cmp	r6, r4
 8005108:	f43f af43 	beq.w	8004f92 <_dtoa_r+0x43a>
 800510c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005110:	2200      	movs	r2, #0
 8005112:	4b53      	ldr	r3, [pc, #332]	@ (8005260 <_dtoa_r+0x708>)
 8005114:	f7fb f9e0 	bl	80004d8 <__aeabi_dmul>
 8005118:	2200      	movs	r2, #0
 800511a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800511e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005122:	4b4f      	ldr	r3, [pc, #316]	@ (8005260 <_dtoa_r+0x708>)
 8005124:	f7fb f9d8 	bl	80004d8 <__aeabi_dmul>
 8005128:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800512c:	e7c4      	b.n	80050b8 <_dtoa_r+0x560>
 800512e:	4631      	mov	r1, r6
 8005130:	4628      	mov	r0, r5
 8005132:	f7fb f9d1 	bl	80004d8 <__aeabi_dmul>
 8005136:	4656      	mov	r6, sl
 8005138:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800513c:	9413      	str	r4, [sp, #76]	@ 0x4c
 800513e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005142:	f7fb fc79 	bl	8000a38 <__aeabi_d2iz>
 8005146:	4605      	mov	r5, r0
 8005148:	f7fb f95c 	bl	8000404 <__aeabi_i2d>
 800514c:	4602      	mov	r2, r0
 800514e:	460b      	mov	r3, r1
 8005150:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005154:	f7fb f808 	bl	8000168 <__aeabi_dsub>
 8005158:	4602      	mov	r2, r0
 800515a:	460b      	mov	r3, r1
 800515c:	3530      	adds	r5, #48	@ 0x30
 800515e:	f806 5b01 	strb.w	r5, [r6], #1
 8005162:	42a6      	cmp	r6, r4
 8005164:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005168:	f04f 0200 	mov.w	r2, #0
 800516c:	d124      	bne.n	80051b8 <_dtoa_r+0x660>
 800516e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005172:	4b39      	ldr	r3, [pc, #228]	@ (8005258 <_dtoa_r+0x700>)
 8005174:	f7fa fffa 	bl	800016c <__adddf3>
 8005178:	4602      	mov	r2, r0
 800517a:	460b      	mov	r3, r1
 800517c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005180:	f7fb fc3a 	bl	80009f8 <__aeabi_dcmpgt>
 8005184:	2800      	cmp	r0, #0
 8005186:	d145      	bne.n	8005214 <_dtoa_r+0x6bc>
 8005188:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800518c:	2000      	movs	r0, #0
 800518e:	4932      	ldr	r1, [pc, #200]	@ (8005258 <_dtoa_r+0x700>)
 8005190:	f7fa ffea 	bl	8000168 <__aeabi_dsub>
 8005194:	4602      	mov	r2, r0
 8005196:	460b      	mov	r3, r1
 8005198:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800519c:	f7fb fc0e 	bl	80009bc <__aeabi_dcmplt>
 80051a0:	2800      	cmp	r0, #0
 80051a2:	f43f aef6 	beq.w	8004f92 <_dtoa_r+0x43a>
 80051a6:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80051a8:	1e73      	subs	r3, r6, #1
 80051aa:	9313      	str	r3, [sp, #76]	@ 0x4c
 80051ac:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80051b0:	2b30      	cmp	r3, #48	@ 0x30
 80051b2:	d0f8      	beq.n	80051a6 <_dtoa_r+0x64e>
 80051b4:	9f04      	ldr	r7, [sp, #16]
 80051b6:	e73f      	b.n	8005038 <_dtoa_r+0x4e0>
 80051b8:	4b29      	ldr	r3, [pc, #164]	@ (8005260 <_dtoa_r+0x708>)
 80051ba:	f7fb f98d 	bl	80004d8 <__aeabi_dmul>
 80051be:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80051c2:	e7bc      	b.n	800513e <_dtoa_r+0x5e6>
 80051c4:	d10c      	bne.n	80051e0 <_dtoa_r+0x688>
 80051c6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80051ca:	2200      	movs	r2, #0
 80051cc:	4b25      	ldr	r3, [pc, #148]	@ (8005264 <_dtoa_r+0x70c>)
 80051ce:	f7fb f983 	bl	80004d8 <__aeabi_dmul>
 80051d2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80051d6:	f7fb fc05 	bl	80009e4 <__aeabi_dcmpge>
 80051da:	2800      	cmp	r0, #0
 80051dc:	f000 815b 	beq.w	8005496 <_dtoa_r+0x93e>
 80051e0:	2400      	movs	r4, #0
 80051e2:	4625      	mov	r5, r4
 80051e4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80051e6:	4656      	mov	r6, sl
 80051e8:	43db      	mvns	r3, r3
 80051ea:	9304      	str	r3, [sp, #16]
 80051ec:	2700      	movs	r7, #0
 80051ee:	4621      	mov	r1, r4
 80051f0:	4658      	mov	r0, fp
 80051f2:	f000 fbb7 	bl	8005964 <_Bfree>
 80051f6:	2d00      	cmp	r5, #0
 80051f8:	d0dc      	beq.n	80051b4 <_dtoa_r+0x65c>
 80051fa:	b12f      	cbz	r7, 8005208 <_dtoa_r+0x6b0>
 80051fc:	42af      	cmp	r7, r5
 80051fe:	d003      	beq.n	8005208 <_dtoa_r+0x6b0>
 8005200:	4639      	mov	r1, r7
 8005202:	4658      	mov	r0, fp
 8005204:	f000 fbae 	bl	8005964 <_Bfree>
 8005208:	4629      	mov	r1, r5
 800520a:	4658      	mov	r0, fp
 800520c:	f000 fbaa 	bl	8005964 <_Bfree>
 8005210:	e7d0      	b.n	80051b4 <_dtoa_r+0x65c>
 8005212:	9704      	str	r7, [sp, #16]
 8005214:	4633      	mov	r3, r6
 8005216:	461e      	mov	r6, r3
 8005218:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800521c:	2a39      	cmp	r2, #57	@ 0x39
 800521e:	d107      	bne.n	8005230 <_dtoa_r+0x6d8>
 8005220:	459a      	cmp	sl, r3
 8005222:	d1f8      	bne.n	8005216 <_dtoa_r+0x6be>
 8005224:	9a04      	ldr	r2, [sp, #16]
 8005226:	3201      	adds	r2, #1
 8005228:	9204      	str	r2, [sp, #16]
 800522a:	2230      	movs	r2, #48	@ 0x30
 800522c:	f88a 2000 	strb.w	r2, [sl]
 8005230:	781a      	ldrb	r2, [r3, #0]
 8005232:	3201      	adds	r2, #1
 8005234:	701a      	strb	r2, [r3, #0]
 8005236:	e7bd      	b.n	80051b4 <_dtoa_r+0x65c>
 8005238:	2200      	movs	r2, #0
 800523a:	4b09      	ldr	r3, [pc, #36]	@ (8005260 <_dtoa_r+0x708>)
 800523c:	f7fb f94c 	bl	80004d8 <__aeabi_dmul>
 8005240:	2200      	movs	r2, #0
 8005242:	2300      	movs	r3, #0
 8005244:	4604      	mov	r4, r0
 8005246:	460d      	mov	r5, r1
 8005248:	f7fb fbae 	bl	80009a8 <__aeabi_dcmpeq>
 800524c:	2800      	cmp	r0, #0
 800524e:	f43f aebc 	beq.w	8004fca <_dtoa_r+0x472>
 8005252:	e6f1      	b.n	8005038 <_dtoa_r+0x4e0>
 8005254:	08006c98 	.word	0x08006c98
 8005258:	3fe00000 	.word	0x3fe00000
 800525c:	3ff00000 	.word	0x3ff00000
 8005260:	40240000 	.word	0x40240000
 8005264:	40140000 	.word	0x40140000
 8005268:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800526a:	2a00      	cmp	r2, #0
 800526c:	f000 80db 	beq.w	8005426 <_dtoa_r+0x8ce>
 8005270:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8005272:	2a01      	cmp	r2, #1
 8005274:	f300 80bf 	bgt.w	80053f6 <_dtoa_r+0x89e>
 8005278:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800527a:	2a00      	cmp	r2, #0
 800527c:	f000 80b7 	beq.w	80053ee <_dtoa_r+0x896>
 8005280:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8005284:	4646      	mov	r6, r8
 8005286:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005288:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800528a:	2101      	movs	r1, #1
 800528c:	441a      	add	r2, r3
 800528e:	4658      	mov	r0, fp
 8005290:	4498      	add	r8, r3
 8005292:	9209      	str	r2, [sp, #36]	@ 0x24
 8005294:	f000 fc1a 	bl	8005acc <__i2b>
 8005298:	4605      	mov	r5, r0
 800529a:	b15e      	cbz	r6, 80052b4 <_dtoa_r+0x75c>
 800529c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800529e:	2b00      	cmp	r3, #0
 80052a0:	dd08      	ble.n	80052b4 <_dtoa_r+0x75c>
 80052a2:	42b3      	cmp	r3, r6
 80052a4:	bfa8      	it	ge
 80052a6:	4633      	movge	r3, r6
 80052a8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80052aa:	eba8 0803 	sub.w	r8, r8, r3
 80052ae:	1af6      	subs	r6, r6, r3
 80052b0:	1ad3      	subs	r3, r2, r3
 80052b2:	9309      	str	r3, [sp, #36]	@ 0x24
 80052b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80052b6:	b1f3      	cbz	r3, 80052f6 <_dtoa_r+0x79e>
 80052b8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	f000 80b7 	beq.w	800542e <_dtoa_r+0x8d6>
 80052c0:	b18c      	cbz	r4, 80052e6 <_dtoa_r+0x78e>
 80052c2:	4629      	mov	r1, r5
 80052c4:	4622      	mov	r2, r4
 80052c6:	4658      	mov	r0, fp
 80052c8:	f000 fcbe 	bl	8005c48 <__pow5mult>
 80052cc:	464a      	mov	r2, r9
 80052ce:	4601      	mov	r1, r0
 80052d0:	4605      	mov	r5, r0
 80052d2:	4658      	mov	r0, fp
 80052d4:	f000 fc10 	bl	8005af8 <__multiply>
 80052d8:	4649      	mov	r1, r9
 80052da:	9004      	str	r0, [sp, #16]
 80052dc:	4658      	mov	r0, fp
 80052de:	f000 fb41 	bl	8005964 <_Bfree>
 80052e2:	9b04      	ldr	r3, [sp, #16]
 80052e4:	4699      	mov	r9, r3
 80052e6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80052e8:	1b1a      	subs	r2, r3, r4
 80052ea:	d004      	beq.n	80052f6 <_dtoa_r+0x79e>
 80052ec:	4649      	mov	r1, r9
 80052ee:	4658      	mov	r0, fp
 80052f0:	f000 fcaa 	bl	8005c48 <__pow5mult>
 80052f4:	4681      	mov	r9, r0
 80052f6:	2101      	movs	r1, #1
 80052f8:	4658      	mov	r0, fp
 80052fa:	f000 fbe7 	bl	8005acc <__i2b>
 80052fe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005300:	4604      	mov	r4, r0
 8005302:	2b00      	cmp	r3, #0
 8005304:	f000 81c9 	beq.w	800569a <_dtoa_r+0xb42>
 8005308:	461a      	mov	r2, r3
 800530a:	4601      	mov	r1, r0
 800530c:	4658      	mov	r0, fp
 800530e:	f000 fc9b 	bl	8005c48 <__pow5mult>
 8005312:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005314:	4604      	mov	r4, r0
 8005316:	2b01      	cmp	r3, #1
 8005318:	f300 808f 	bgt.w	800543a <_dtoa_r+0x8e2>
 800531c:	9b02      	ldr	r3, [sp, #8]
 800531e:	2b00      	cmp	r3, #0
 8005320:	f040 8087 	bne.w	8005432 <_dtoa_r+0x8da>
 8005324:	9b03      	ldr	r3, [sp, #12]
 8005326:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800532a:	2b00      	cmp	r3, #0
 800532c:	f040 8083 	bne.w	8005436 <_dtoa_r+0x8de>
 8005330:	9b03      	ldr	r3, [sp, #12]
 8005332:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005336:	0d1b      	lsrs	r3, r3, #20
 8005338:	051b      	lsls	r3, r3, #20
 800533a:	b12b      	cbz	r3, 8005348 <_dtoa_r+0x7f0>
 800533c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800533e:	f108 0801 	add.w	r8, r8, #1
 8005342:	3301      	adds	r3, #1
 8005344:	9309      	str	r3, [sp, #36]	@ 0x24
 8005346:	2301      	movs	r3, #1
 8005348:	930a      	str	r3, [sp, #40]	@ 0x28
 800534a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800534c:	2b00      	cmp	r3, #0
 800534e:	f000 81aa 	beq.w	80056a6 <_dtoa_r+0xb4e>
 8005352:	6923      	ldr	r3, [r4, #16]
 8005354:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005358:	6918      	ldr	r0, [r3, #16]
 800535a:	f000 fb6b 	bl	8005a34 <__hi0bits>
 800535e:	f1c0 0020 	rsb	r0, r0, #32
 8005362:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005364:	4418      	add	r0, r3
 8005366:	f010 001f 	ands.w	r0, r0, #31
 800536a:	d071      	beq.n	8005450 <_dtoa_r+0x8f8>
 800536c:	f1c0 0320 	rsb	r3, r0, #32
 8005370:	2b04      	cmp	r3, #4
 8005372:	dd65      	ble.n	8005440 <_dtoa_r+0x8e8>
 8005374:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005376:	f1c0 001c 	rsb	r0, r0, #28
 800537a:	4403      	add	r3, r0
 800537c:	4480      	add	r8, r0
 800537e:	4406      	add	r6, r0
 8005380:	9309      	str	r3, [sp, #36]	@ 0x24
 8005382:	f1b8 0f00 	cmp.w	r8, #0
 8005386:	dd05      	ble.n	8005394 <_dtoa_r+0x83c>
 8005388:	4649      	mov	r1, r9
 800538a:	4642      	mov	r2, r8
 800538c:	4658      	mov	r0, fp
 800538e:	f000 fcb5 	bl	8005cfc <__lshift>
 8005392:	4681      	mov	r9, r0
 8005394:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005396:	2b00      	cmp	r3, #0
 8005398:	dd05      	ble.n	80053a6 <_dtoa_r+0x84e>
 800539a:	4621      	mov	r1, r4
 800539c:	461a      	mov	r2, r3
 800539e:	4658      	mov	r0, fp
 80053a0:	f000 fcac 	bl	8005cfc <__lshift>
 80053a4:	4604      	mov	r4, r0
 80053a6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d053      	beq.n	8005454 <_dtoa_r+0x8fc>
 80053ac:	4621      	mov	r1, r4
 80053ae:	4648      	mov	r0, r9
 80053b0:	f000 fd10 	bl	8005dd4 <__mcmp>
 80053b4:	2800      	cmp	r0, #0
 80053b6:	da4d      	bge.n	8005454 <_dtoa_r+0x8fc>
 80053b8:	1e7b      	subs	r3, r7, #1
 80053ba:	4649      	mov	r1, r9
 80053bc:	9304      	str	r3, [sp, #16]
 80053be:	220a      	movs	r2, #10
 80053c0:	2300      	movs	r3, #0
 80053c2:	4658      	mov	r0, fp
 80053c4:	f000 faf0 	bl	80059a8 <__multadd>
 80053c8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80053ca:	4681      	mov	r9, r0
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	f000 816c 	beq.w	80056aa <_dtoa_r+0xb52>
 80053d2:	2300      	movs	r3, #0
 80053d4:	4629      	mov	r1, r5
 80053d6:	220a      	movs	r2, #10
 80053d8:	4658      	mov	r0, fp
 80053da:	f000 fae5 	bl	80059a8 <__multadd>
 80053de:	9b08      	ldr	r3, [sp, #32]
 80053e0:	4605      	mov	r5, r0
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	dc61      	bgt.n	80054aa <_dtoa_r+0x952>
 80053e6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80053e8:	2b02      	cmp	r3, #2
 80053ea:	dc3b      	bgt.n	8005464 <_dtoa_r+0x90c>
 80053ec:	e05d      	b.n	80054aa <_dtoa_r+0x952>
 80053ee:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80053f0:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80053f4:	e746      	b.n	8005284 <_dtoa_r+0x72c>
 80053f6:	9b07      	ldr	r3, [sp, #28]
 80053f8:	1e5c      	subs	r4, r3, #1
 80053fa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80053fc:	42a3      	cmp	r3, r4
 80053fe:	bfbf      	itttt	lt
 8005400:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8005402:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 8005404:	1ae3      	sublt	r3, r4, r3
 8005406:	18d2      	addlt	r2, r2, r3
 8005408:	bfa8      	it	ge
 800540a:	1b1c      	subge	r4, r3, r4
 800540c:	9b07      	ldr	r3, [sp, #28]
 800540e:	bfbe      	ittt	lt
 8005410:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8005412:	920e      	strlt	r2, [sp, #56]	@ 0x38
 8005414:	2400      	movlt	r4, #0
 8005416:	2b00      	cmp	r3, #0
 8005418:	bfb5      	itete	lt
 800541a:	eba8 0603 	sublt.w	r6, r8, r3
 800541e:	4646      	movge	r6, r8
 8005420:	2300      	movlt	r3, #0
 8005422:	9b07      	ldrge	r3, [sp, #28]
 8005424:	e730      	b.n	8005288 <_dtoa_r+0x730>
 8005426:	4646      	mov	r6, r8
 8005428:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800542a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800542c:	e735      	b.n	800529a <_dtoa_r+0x742>
 800542e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005430:	e75c      	b.n	80052ec <_dtoa_r+0x794>
 8005432:	2300      	movs	r3, #0
 8005434:	e788      	b.n	8005348 <_dtoa_r+0x7f0>
 8005436:	9b02      	ldr	r3, [sp, #8]
 8005438:	e786      	b.n	8005348 <_dtoa_r+0x7f0>
 800543a:	2300      	movs	r3, #0
 800543c:	930a      	str	r3, [sp, #40]	@ 0x28
 800543e:	e788      	b.n	8005352 <_dtoa_r+0x7fa>
 8005440:	d09f      	beq.n	8005382 <_dtoa_r+0x82a>
 8005442:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005444:	331c      	adds	r3, #28
 8005446:	441a      	add	r2, r3
 8005448:	4498      	add	r8, r3
 800544a:	441e      	add	r6, r3
 800544c:	9209      	str	r2, [sp, #36]	@ 0x24
 800544e:	e798      	b.n	8005382 <_dtoa_r+0x82a>
 8005450:	4603      	mov	r3, r0
 8005452:	e7f6      	b.n	8005442 <_dtoa_r+0x8ea>
 8005454:	9b07      	ldr	r3, [sp, #28]
 8005456:	9704      	str	r7, [sp, #16]
 8005458:	2b00      	cmp	r3, #0
 800545a:	dc20      	bgt.n	800549e <_dtoa_r+0x946>
 800545c:	9308      	str	r3, [sp, #32]
 800545e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005460:	2b02      	cmp	r3, #2
 8005462:	dd1e      	ble.n	80054a2 <_dtoa_r+0x94a>
 8005464:	9b08      	ldr	r3, [sp, #32]
 8005466:	2b00      	cmp	r3, #0
 8005468:	f47f aebc 	bne.w	80051e4 <_dtoa_r+0x68c>
 800546c:	4621      	mov	r1, r4
 800546e:	2205      	movs	r2, #5
 8005470:	4658      	mov	r0, fp
 8005472:	f000 fa99 	bl	80059a8 <__multadd>
 8005476:	4601      	mov	r1, r0
 8005478:	4604      	mov	r4, r0
 800547a:	4648      	mov	r0, r9
 800547c:	f000 fcaa 	bl	8005dd4 <__mcmp>
 8005480:	2800      	cmp	r0, #0
 8005482:	f77f aeaf 	ble.w	80051e4 <_dtoa_r+0x68c>
 8005486:	2331      	movs	r3, #49	@ 0x31
 8005488:	4656      	mov	r6, sl
 800548a:	f806 3b01 	strb.w	r3, [r6], #1
 800548e:	9b04      	ldr	r3, [sp, #16]
 8005490:	3301      	adds	r3, #1
 8005492:	9304      	str	r3, [sp, #16]
 8005494:	e6aa      	b.n	80051ec <_dtoa_r+0x694>
 8005496:	9c07      	ldr	r4, [sp, #28]
 8005498:	9704      	str	r7, [sp, #16]
 800549a:	4625      	mov	r5, r4
 800549c:	e7f3      	b.n	8005486 <_dtoa_r+0x92e>
 800549e:	9b07      	ldr	r3, [sp, #28]
 80054a0:	9308      	str	r3, [sp, #32]
 80054a2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	f000 8104 	beq.w	80056b2 <_dtoa_r+0xb5a>
 80054aa:	2e00      	cmp	r6, #0
 80054ac:	dd05      	ble.n	80054ba <_dtoa_r+0x962>
 80054ae:	4629      	mov	r1, r5
 80054b0:	4632      	mov	r2, r6
 80054b2:	4658      	mov	r0, fp
 80054b4:	f000 fc22 	bl	8005cfc <__lshift>
 80054b8:	4605      	mov	r5, r0
 80054ba:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d05a      	beq.n	8005576 <_dtoa_r+0xa1e>
 80054c0:	4658      	mov	r0, fp
 80054c2:	6869      	ldr	r1, [r5, #4]
 80054c4:	f000 fa0e 	bl	80058e4 <_Balloc>
 80054c8:	4606      	mov	r6, r0
 80054ca:	b928      	cbnz	r0, 80054d8 <_dtoa_r+0x980>
 80054cc:	4602      	mov	r2, r0
 80054ce:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80054d2:	4b83      	ldr	r3, [pc, #524]	@ (80056e0 <_dtoa_r+0xb88>)
 80054d4:	f7ff bb54 	b.w	8004b80 <_dtoa_r+0x28>
 80054d8:	692a      	ldr	r2, [r5, #16]
 80054da:	f105 010c 	add.w	r1, r5, #12
 80054de:	3202      	adds	r2, #2
 80054e0:	0092      	lsls	r2, r2, #2
 80054e2:	300c      	adds	r0, #12
 80054e4:	f000 ffa8 	bl	8006438 <memcpy>
 80054e8:	2201      	movs	r2, #1
 80054ea:	4631      	mov	r1, r6
 80054ec:	4658      	mov	r0, fp
 80054ee:	f000 fc05 	bl	8005cfc <__lshift>
 80054f2:	462f      	mov	r7, r5
 80054f4:	4605      	mov	r5, r0
 80054f6:	f10a 0301 	add.w	r3, sl, #1
 80054fa:	9307      	str	r3, [sp, #28]
 80054fc:	9b08      	ldr	r3, [sp, #32]
 80054fe:	4453      	add	r3, sl
 8005500:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005502:	9b02      	ldr	r3, [sp, #8]
 8005504:	f003 0301 	and.w	r3, r3, #1
 8005508:	930a      	str	r3, [sp, #40]	@ 0x28
 800550a:	9b07      	ldr	r3, [sp, #28]
 800550c:	4621      	mov	r1, r4
 800550e:	3b01      	subs	r3, #1
 8005510:	4648      	mov	r0, r9
 8005512:	9302      	str	r3, [sp, #8]
 8005514:	f7ff fa95 	bl	8004a42 <quorem>
 8005518:	4639      	mov	r1, r7
 800551a:	9008      	str	r0, [sp, #32]
 800551c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8005520:	4648      	mov	r0, r9
 8005522:	f000 fc57 	bl	8005dd4 <__mcmp>
 8005526:	462a      	mov	r2, r5
 8005528:	9009      	str	r0, [sp, #36]	@ 0x24
 800552a:	4621      	mov	r1, r4
 800552c:	4658      	mov	r0, fp
 800552e:	f000 fc6d 	bl	8005e0c <__mdiff>
 8005532:	68c2      	ldr	r2, [r0, #12]
 8005534:	4606      	mov	r6, r0
 8005536:	bb02      	cbnz	r2, 800557a <_dtoa_r+0xa22>
 8005538:	4601      	mov	r1, r0
 800553a:	4648      	mov	r0, r9
 800553c:	f000 fc4a 	bl	8005dd4 <__mcmp>
 8005540:	4602      	mov	r2, r0
 8005542:	4631      	mov	r1, r6
 8005544:	4658      	mov	r0, fp
 8005546:	920c      	str	r2, [sp, #48]	@ 0x30
 8005548:	f000 fa0c 	bl	8005964 <_Bfree>
 800554c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800554e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8005550:	9e07      	ldr	r6, [sp, #28]
 8005552:	ea43 0102 	orr.w	r1, r3, r2
 8005556:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005558:	4319      	orrs	r1, r3
 800555a:	d110      	bne.n	800557e <_dtoa_r+0xa26>
 800555c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005560:	d029      	beq.n	80055b6 <_dtoa_r+0xa5e>
 8005562:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005564:	2b00      	cmp	r3, #0
 8005566:	dd02      	ble.n	800556e <_dtoa_r+0xa16>
 8005568:	9b08      	ldr	r3, [sp, #32]
 800556a:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800556e:	9b02      	ldr	r3, [sp, #8]
 8005570:	f883 8000 	strb.w	r8, [r3]
 8005574:	e63b      	b.n	80051ee <_dtoa_r+0x696>
 8005576:	4628      	mov	r0, r5
 8005578:	e7bb      	b.n	80054f2 <_dtoa_r+0x99a>
 800557a:	2201      	movs	r2, #1
 800557c:	e7e1      	b.n	8005542 <_dtoa_r+0x9ea>
 800557e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005580:	2b00      	cmp	r3, #0
 8005582:	db04      	blt.n	800558e <_dtoa_r+0xa36>
 8005584:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8005586:	430b      	orrs	r3, r1
 8005588:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800558a:	430b      	orrs	r3, r1
 800558c:	d120      	bne.n	80055d0 <_dtoa_r+0xa78>
 800558e:	2a00      	cmp	r2, #0
 8005590:	dded      	ble.n	800556e <_dtoa_r+0xa16>
 8005592:	4649      	mov	r1, r9
 8005594:	2201      	movs	r2, #1
 8005596:	4658      	mov	r0, fp
 8005598:	f000 fbb0 	bl	8005cfc <__lshift>
 800559c:	4621      	mov	r1, r4
 800559e:	4681      	mov	r9, r0
 80055a0:	f000 fc18 	bl	8005dd4 <__mcmp>
 80055a4:	2800      	cmp	r0, #0
 80055a6:	dc03      	bgt.n	80055b0 <_dtoa_r+0xa58>
 80055a8:	d1e1      	bne.n	800556e <_dtoa_r+0xa16>
 80055aa:	f018 0f01 	tst.w	r8, #1
 80055ae:	d0de      	beq.n	800556e <_dtoa_r+0xa16>
 80055b0:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80055b4:	d1d8      	bne.n	8005568 <_dtoa_r+0xa10>
 80055b6:	2339      	movs	r3, #57	@ 0x39
 80055b8:	9a02      	ldr	r2, [sp, #8]
 80055ba:	7013      	strb	r3, [r2, #0]
 80055bc:	4633      	mov	r3, r6
 80055be:	461e      	mov	r6, r3
 80055c0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80055c4:	3b01      	subs	r3, #1
 80055c6:	2a39      	cmp	r2, #57	@ 0x39
 80055c8:	d052      	beq.n	8005670 <_dtoa_r+0xb18>
 80055ca:	3201      	adds	r2, #1
 80055cc:	701a      	strb	r2, [r3, #0]
 80055ce:	e60e      	b.n	80051ee <_dtoa_r+0x696>
 80055d0:	2a00      	cmp	r2, #0
 80055d2:	dd07      	ble.n	80055e4 <_dtoa_r+0xa8c>
 80055d4:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80055d8:	d0ed      	beq.n	80055b6 <_dtoa_r+0xa5e>
 80055da:	9a02      	ldr	r2, [sp, #8]
 80055dc:	f108 0301 	add.w	r3, r8, #1
 80055e0:	7013      	strb	r3, [r2, #0]
 80055e2:	e604      	b.n	80051ee <_dtoa_r+0x696>
 80055e4:	9b07      	ldr	r3, [sp, #28]
 80055e6:	9a07      	ldr	r2, [sp, #28]
 80055e8:	f803 8c01 	strb.w	r8, [r3, #-1]
 80055ec:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d028      	beq.n	8005644 <_dtoa_r+0xaec>
 80055f2:	4649      	mov	r1, r9
 80055f4:	2300      	movs	r3, #0
 80055f6:	220a      	movs	r2, #10
 80055f8:	4658      	mov	r0, fp
 80055fa:	f000 f9d5 	bl	80059a8 <__multadd>
 80055fe:	42af      	cmp	r7, r5
 8005600:	4681      	mov	r9, r0
 8005602:	f04f 0300 	mov.w	r3, #0
 8005606:	f04f 020a 	mov.w	r2, #10
 800560a:	4639      	mov	r1, r7
 800560c:	4658      	mov	r0, fp
 800560e:	d107      	bne.n	8005620 <_dtoa_r+0xac8>
 8005610:	f000 f9ca 	bl	80059a8 <__multadd>
 8005614:	4607      	mov	r7, r0
 8005616:	4605      	mov	r5, r0
 8005618:	9b07      	ldr	r3, [sp, #28]
 800561a:	3301      	adds	r3, #1
 800561c:	9307      	str	r3, [sp, #28]
 800561e:	e774      	b.n	800550a <_dtoa_r+0x9b2>
 8005620:	f000 f9c2 	bl	80059a8 <__multadd>
 8005624:	4629      	mov	r1, r5
 8005626:	4607      	mov	r7, r0
 8005628:	2300      	movs	r3, #0
 800562a:	220a      	movs	r2, #10
 800562c:	4658      	mov	r0, fp
 800562e:	f000 f9bb 	bl	80059a8 <__multadd>
 8005632:	4605      	mov	r5, r0
 8005634:	e7f0      	b.n	8005618 <_dtoa_r+0xac0>
 8005636:	9b08      	ldr	r3, [sp, #32]
 8005638:	2700      	movs	r7, #0
 800563a:	2b00      	cmp	r3, #0
 800563c:	bfcc      	ite	gt
 800563e:	461e      	movgt	r6, r3
 8005640:	2601      	movle	r6, #1
 8005642:	4456      	add	r6, sl
 8005644:	4649      	mov	r1, r9
 8005646:	2201      	movs	r2, #1
 8005648:	4658      	mov	r0, fp
 800564a:	f000 fb57 	bl	8005cfc <__lshift>
 800564e:	4621      	mov	r1, r4
 8005650:	4681      	mov	r9, r0
 8005652:	f000 fbbf 	bl	8005dd4 <__mcmp>
 8005656:	2800      	cmp	r0, #0
 8005658:	dcb0      	bgt.n	80055bc <_dtoa_r+0xa64>
 800565a:	d102      	bne.n	8005662 <_dtoa_r+0xb0a>
 800565c:	f018 0f01 	tst.w	r8, #1
 8005660:	d1ac      	bne.n	80055bc <_dtoa_r+0xa64>
 8005662:	4633      	mov	r3, r6
 8005664:	461e      	mov	r6, r3
 8005666:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800566a:	2a30      	cmp	r2, #48	@ 0x30
 800566c:	d0fa      	beq.n	8005664 <_dtoa_r+0xb0c>
 800566e:	e5be      	b.n	80051ee <_dtoa_r+0x696>
 8005670:	459a      	cmp	sl, r3
 8005672:	d1a4      	bne.n	80055be <_dtoa_r+0xa66>
 8005674:	9b04      	ldr	r3, [sp, #16]
 8005676:	3301      	adds	r3, #1
 8005678:	9304      	str	r3, [sp, #16]
 800567a:	2331      	movs	r3, #49	@ 0x31
 800567c:	f88a 3000 	strb.w	r3, [sl]
 8005680:	e5b5      	b.n	80051ee <_dtoa_r+0x696>
 8005682:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005684:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80056e4 <_dtoa_r+0xb8c>
 8005688:	b11b      	cbz	r3, 8005692 <_dtoa_r+0xb3a>
 800568a:	f10a 0308 	add.w	r3, sl, #8
 800568e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8005690:	6013      	str	r3, [r2, #0]
 8005692:	4650      	mov	r0, sl
 8005694:	b017      	add	sp, #92	@ 0x5c
 8005696:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800569a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800569c:	2b01      	cmp	r3, #1
 800569e:	f77f ae3d 	ble.w	800531c <_dtoa_r+0x7c4>
 80056a2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80056a4:	930a      	str	r3, [sp, #40]	@ 0x28
 80056a6:	2001      	movs	r0, #1
 80056a8:	e65b      	b.n	8005362 <_dtoa_r+0x80a>
 80056aa:	9b08      	ldr	r3, [sp, #32]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	f77f aed6 	ble.w	800545e <_dtoa_r+0x906>
 80056b2:	4656      	mov	r6, sl
 80056b4:	4621      	mov	r1, r4
 80056b6:	4648      	mov	r0, r9
 80056b8:	f7ff f9c3 	bl	8004a42 <quorem>
 80056bc:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80056c0:	9b08      	ldr	r3, [sp, #32]
 80056c2:	f806 8b01 	strb.w	r8, [r6], #1
 80056c6:	eba6 020a 	sub.w	r2, r6, sl
 80056ca:	4293      	cmp	r3, r2
 80056cc:	ddb3      	ble.n	8005636 <_dtoa_r+0xade>
 80056ce:	4649      	mov	r1, r9
 80056d0:	2300      	movs	r3, #0
 80056d2:	220a      	movs	r2, #10
 80056d4:	4658      	mov	r0, fp
 80056d6:	f000 f967 	bl	80059a8 <__multadd>
 80056da:	4681      	mov	r9, r0
 80056dc:	e7ea      	b.n	80056b4 <_dtoa_r+0xb5c>
 80056de:	bf00      	nop
 80056e0:	08006bfa 	.word	0x08006bfa
 80056e4:	08006b7e 	.word	0x08006b7e

080056e8 <_free_r>:
 80056e8:	b538      	push	{r3, r4, r5, lr}
 80056ea:	4605      	mov	r5, r0
 80056ec:	2900      	cmp	r1, #0
 80056ee:	d040      	beq.n	8005772 <_free_r+0x8a>
 80056f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80056f4:	1f0c      	subs	r4, r1, #4
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	bfb8      	it	lt
 80056fa:	18e4      	addlt	r4, r4, r3
 80056fc:	f000 f8e6 	bl	80058cc <__malloc_lock>
 8005700:	4a1c      	ldr	r2, [pc, #112]	@ (8005774 <_free_r+0x8c>)
 8005702:	6813      	ldr	r3, [r2, #0]
 8005704:	b933      	cbnz	r3, 8005714 <_free_r+0x2c>
 8005706:	6063      	str	r3, [r4, #4]
 8005708:	6014      	str	r4, [r2, #0]
 800570a:	4628      	mov	r0, r5
 800570c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005710:	f000 b8e2 	b.w	80058d8 <__malloc_unlock>
 8005714:	42a3      	cmp	r3, r4
 8005716:	d908      	bls.n	800572a <_free_r+0x42>
 8005718:	6820      	ldr	r0, [r4, #0]
 800571a:	1821      	adds	r1, r4, r0
 800571c:	428b      	cmp	r3, r1
 800571e:	bf01      	itttt	eq
 8005720:	6819      	ldreq	r1, [r3, #0]
 8005722:	685b      	ldreq	r3, [r3, #4]
 8005724:	1809      	addeq	r1, r1, r0
 8005726:	6021      	streq	r1, [r4, #0]
 8005728:	e7ed      	b.n	8005706 <_free_r+0x1e>
 800572a:	461a      	mov	r2, r3
 800572c:	685b      	ldr	r3, [r3, #4]
 800572e:	b10b      	cbz	r3, 8005734 <_free_r+0x4c>
 8005730:	42a3      	cmp	r3, r4
 8005732:	d9fa      	bls.n	800572a <_free_r+0x42>
 8005734:	6811      	ldr	r1, [r2, #0]
 8005736:	1850      	adds	r0, r2, r1
 8005738:	42a0      	cmp	r0, r4
 800573a:	d10b      	bne.n	8005754 <_free_r+0x6c>
 800573c:	6820      	ldr	r0, [r4, #0]
 800573e:	4401      	add	r1, r0
 8005740:	1850      	adds	r0, r2, r1
 8005742:	4283      	cmp	r3, r0
 8005744:	6011      	str	r1, [r2, #0]
 8005746:	d1e0      	bne.n	800570a <_free_r+0x22>
 8005748:	6818      	ldr	r0, [r3, #0]
 800574a:	685b      	ldr	r3, [r3, #4]
 800574c:	4408      	add	r0, r1
 800574e:	6010      	str	r0, [r2, #0]
 8005750:	6053      	str	r3, [r2, #4]
 8005752:	e7da      	b.n	800570a <_free_r+0x22>
 8005754:	d902      	bls.n	800575c <_free_r+0x74>
 8005756:	230c      	movs	r3, #12
 8005758:	602b      	str	r3, [r5, #0]
 800575a:	e7d6      	b.n	800570a <_free_r+0x22>
 800575c:	6820      	ldr	r0, [r4, #0]
 800575e:	1821      	adds	r1, r4, r0
 8005760:	428b      	cmp	r3, r1
 8005762:	bf01      	itttt	eq
 8005764:	6819      	ldreq	r1, [r3, #0]
 8005766:	685b      	ldreq	r3, [r3, #4]
 8005768:	1809      	addeq	r1, r1, r0
 800576a:	6021      	streq	r1, [r4, #0]
 800576c:	6063      	str	r3, [r4, #4]
 800576e:	6054      	str	r4, [r2, #4]
 8005770:	e7cb      	b.n	800570a <_free_r+0x22>
 8005772:	bd38      	pop	{r3, r4, r5, pc}
 8005774:	20000418 	.word	0x20000418

08005778 <malloc>:
 8005778:	4b02      	ldr	r3, [pc, #8]	@ (8005784 <malloc+0xc>)
 800577a:	4601      	mov	r1, r0
 800577c:	6818      	ldr	r0, [r3, #0]
 800577e:	f000 b825 	b.w	80057cc <_malloc_r>
 8005782:	bf00      	nop
 8005784:	20000018 	.word	0x20000018

08005788 <sbrk_aligned>:
 8005788:	b570      	push	{r4, r5, r6, lr}
 800578a:	4e0f      	ldr	r6, [pc, #60]	@ (80057c8 <sbrk_aligned+0x40>)
 800578c:	460c      	mov	r4, r1
 800578e:	6831      	ldr	r1, [r6, #0]
 8005790:	4605      	mov	r5, r0
 8005792:	b911      	cbnz	r1, 800579a <sbrk_aligned+0x12>
 8005794:	f000 fe40 	bl	8006418 <_sbrk_r>
 8005798:	6030      	str	r0, [r6, #0]
 800579a:	4621      	mov	r1, r4
 800579c:	4628      	mov	r0, r5
 800579e:	f000 fe3b 	bl	8006418 <_sbrk_r>
 80057a2:	1c43      	adds	r3, r0, #1
 80057a4:	d103      	bne.n	80057ae <sbrk_aligned+0x26>
 80057a6:	f04f 34ff 	mov.w	r4, #4294967295
 80057aa:	4620      	mov	r0, r4
 80057ac:	bd70      	pop	{r4, r5, r6, pc}
 80057ae:	1cc4      	adds	r4, r0, #3
 80057b0:	f024 0403 	bic.w	r4, r4, #3
 80057b4:	42a0      	cmp	r0, r4
 80057b6:	d0f8      	beq.n	80057aa <sbrk_aligned+0x22>
 80057b8:	1a21      	subs	r1, r4, r0
 80057ba:	4628      	mov	r0, r5
 80057bc:	f000 fe2c 	bl	8006418 <_sbrk_r>
 80057c0:	3001      	adds	r0, #1
 80057c2:	d1f2      	bne.n	80057aa <sbrk_aligned+0x22>
 80057c4:	e7ef      	b.n	80057a6 <sbrk_aligned+0x1e>
 80057c6:	bf00      	nop
 80057c8:	20000414 	.word	0x20000414

080057cc <_malloc_r>:
 80057cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80057d0:	1ccd      	adds	r5, r1, #3
 80057d2:	f025 0503 	bic.w	r5, r5, #3
 80057d6:	3508      	adds	r5, #8
 80057d8:	2d0c      	cmp	r5, #12
 80057da:	bf38      	it	cc
 80057dc:	250c      	movcc	r5, #12
 80057de:	2d00      	cmp	r5, #0
 80057e0:	4606      	mov	r6, r0
 80057e2:	db01      	blt.n	80057e8 <_malloc_r+0x1c>
 80057e4:	42a9      	cmp	r1, r5
 80057e6:	d904      	bls.n	80057f2 <_malloc_r+0x26>
 80057e8:	230c      	movs	r3, #12
 80057ea:	6033      	str	r3, [r6, #0]
 80057ec:	2000      	movs	r0, #0
 80057ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80057f2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80058c8 <_malloc_r+0xfc>
 80057f6:	f000 f869 	bl	80058cc <__malloc_lock>
 80057fa:	f8d8 3000 	ldr.w	r3, [r8]
 80057fe:	461c      	mov	r4, r3
 8005800:	bb44      	cbnz	r4, 8005854 <_malloc_r+0x88>
 8005802:	4629      	mov	r1, r5
 8005804:	4630      	mov	r0, r6
 8005806:	f7ff ffbf 	bl	8005788 <sbrk_aligned>
 800580a:	1c43      	adds	r3, r0, #1
 800580c:	4604      	mov	r4, r0
 800580e:	d158      	bne.n	80058c2 <_malloc_r+0xf6>
 8005810:	f8d8 4000 	ldr.w	r4, [r8]
 8005814:	4627      	mov	r7, r4
 8005816:	2f00      	cmp	r7, #0
 8005818:	d143      	bne.n	80058a2 <_malloc_r+0xd6>
 800581a:	2c00      	cmp	r4, #0
 800581c:	d04b      	beq.n	80058b6 <_malloc_r+0xea>
 800581e:	6823      	ldr	r3, [r4, #0]
 8005820:	4639      	mov	r1, r7
 8005822:	4630      	mov	r0, r6
 8005824:	eb04 0903 	add.w	r9, r4, r3
 8005828:	f000 fdf6 	bl	8006418 <_sbrk_r>
 800582c:	4581      	cmp	r9, r0
 800582e:	d142      	bne.n	80058b6 <_malloc_r+0xea>
 8005830:	6821      	ldr	r1, [r4, #0]
 8005832:	4630      	mov	r0, r6
 8005834:	1a6d      	subs	r5, r5, r1
 8005836:	4629      	mov	r1, r5
 8005838:	f7ff ffa6 	bl	8005788 <sbrk_aligned>
 800583c:	3001      	adds	r0, #1
 800583e:	d03a      	beq.n	80058b6 <_malloc_r+0xea>
 8005840:	6823      	ldr	r3, [r4, #0]
 8005842:	442b      	add	r3, r5
 8005844:	6023      	str	r3, [r4, #0]
 8005846:	f8d8 3000 	ldr.w	r3, [r8]
 800584a:	685a      	ldr	r2, [r3, #4]
 800584c:	bb62      	cbnz	r2, 80058a8 <_malloc_r+0xdc>
 800584e:	f8c8 7000 	str.w	r7, [r8]
 8005852:	e00f      	b.n	8005874 <_malloc_r+0xa8>
 8005854:	6822      	ldr	r2, [r4, #0]
 8005856:	1b52      	subs	r2, r2, r5
 8005858:	d420      	bmi.n	800589c <_malloc_r+0xd0>
 800585a:	2a0b      	cmp	r2, #11
 800585c:	d917      	bls.n	800588e <_malloc_r+0xc2>
 800585e:	1961      	adds	r1, r4, r5
 8005860:	42a3      	cmp	r3, r4
 8005862:	6025      	str	r5, [r4, #0]
 8005864:	bf18      	it	ne
 8005866:	6059      	strne	r1, [r3, #4]
 8005868:	6863      	ldr	r3, [r4, #4]
 800586a:	bf08      	it	eq
 800586c:	f8c8 1000 	streq.w	r1, [r8]
 8005870:	5162      	str	r2, [r4, r5]
 8005872:	604b      	str	r3, [r1, #4]
 8005874:	4630      	mov	r0, r6
 8005876:	f000 f82f 	bl	80058d8 <__malloc_unlock>
 800587a:	f104 000b 	add.w	r0, r4, #11
 800587e:	1d23      	adds	r3, r4, #4
 8005880:	f020 0007 	bic.w	r0, r0, #7
 8005884:	1ac2      	subs	r2, r0, r3
 8005886:	bf1c      	itt	ne
 8005888:	1a1b      	subne	r3, r3, r0
 800588a:	50a3      	strne	r3, [r4, r2]
 800588c:	e7af      	b.n	80057ee <_malloc_r+0x22>
 800588e:	6862      	ldr	r2, [r4, #4]
 8005890:	42a3      	cmp	r3, r4
 8005892:	bf0c      	ite	eq
 8005894:	f8c8 2000 	streq.w	r2, [r8]
 8005898:	605a      	strne	r2, [r3, #4]
 800589a:	e7eb      	b.n	8005874 <_malloc_r+0xa8>
 800589c:	4623      	mov	r3, r4
 800589e:	6864      	ldr	r4, [r4, #4]
 80058a0:	e7ae      	b.n	8005800 <_malloc_r+0x34>
 80058a2:	463c      	mov	r4, r7
 80058a4:	687f      	ldr	r7, [r7, #4]
 80058a6:	e7b6      	b.n	8005816 <_malloc_r+0x4a>
 80058a8:	461a      	mov	r2, r3
 80058aa:	685b      	ldr	r3, [r3, #4]
 80058ac:	42a3      	cmp	r3, r4
 80058ae:	d1fb      	bne.n	80058a8 <_malloc_r+0xdc>
 80058b0:	2300      	movs	r3, #0
 80058b2:	6053      	str	r3, [r2, #4]
 80058b4:	e7de      	b.n	8005874 <_malloc_r+0xa8>
 80058b6:	230c      	movs	r3, #12
 80058b8:	4630      	mov	r0, r6
 80058ba:	6033      	str	r3, [r6, #0]
 80058bc:	f000 f80c 	bl	80058d8 <__malloc_unlock>
 80058c0:	e794      	b.n	80057ec <_malloc_r+0x20>
 80058c2:	6005      	str	r5, [r0, #0]
 80058c4:	e7d6      	b.n	8005874 <_malloc_r+0xa8>
 80058c6:	bf00      	nop
 80058c8:	20000418 	.word	0x20000418

080058cc <__malloc_lock>:
 80058cc:	4801      	ldr	r0, [pc, #4]	@ (80058d4 <__malloc_lock+0x8>)
 80058ce:	f7ff b8a8 	b.w	8004a22 <__retarget_lock_acquire_recursive>
 80058d2:	bf00      	nop
 80058d4:	20000410 	.word	0x20000410

080058d8 <__malloc_unlock>:
 80058d8:	4801      	ldr	r0, [pc, #4]	@ (80058e0 <__malloc_unlock+0x8>)
 80058da:	f7ff b8a3 	b.w	8004a24 <__retarget_lock_release_recursive>
 80058de:	bf00      	nop
 80058e0:	20000410 	.word	0x20000410

080058e4 <_Balloc>:
 80058e4:	b570      	push	{r4, r5, r6, lr}
 80058e6:	69c6      	ldr	r6, [r0, #28]
 80058e8:	4604      	mov	r4, r0
 80058ea:	460d      	mov	r5, r1
 80058ec:	b976      	cbnz	r6, 800590c <_Balloc+0x28>
 80058ee:	2010      	movs	r0, #16
 80058f0:	f7ff ff42 	bl	8005778 <malloc>
 80058f4:	4602      	mov	r2, r0
 80058f6:	61e0      	str	r0, [r4, #28]
 80058f8:	b920      	cbnz	r0, 8005904 <_Balloc+0x20>
 80058fa:	216b      	movs	r1, #107	@ 0x6b
 80058fc:	4b17      	ldr	r3, [pc, #92]	@ (800595c <_Balloc+0x78>)
 80058fe:	4818      	ldr	r0, [pc, #96]	@ (8005960 <_Balloc+0x7c>)
 8005900:	f000 fda8 	bl	8006454 <__assert_func>
 8005904:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005908:	6006      	str	r6, [r0, #0]
 800590a:	60c6      	str	r6, [r0, #12]
 800590c:	69e6      	ldr	r6, [r4, #28]
 800590e:	68f3      	ldr	r3, [r6, #12]
 8005910:	b183      	cbz	r3, 8005934 <_Balloc+0x50>
 8005912:	69e3      	ldr	r3, [r4, #28]
 8005914:	68db      	ldr	r3, [r3, #12]
 8005916:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800591a:	b9b8      	cbnz	r0, 800594c <_Balloc+0x68>
 800591c:	2101      	movs	r1, #1
 800591e:	fa01 f605 	lsl.w	r6, r1, r5
 8005922:	1d72      	adds	r2, r6, #5
 8005924:	4620      	mov	r0, r4
 8005926:	0092      	lsls	r2, r2, #2
 8005928:	f000 fdb2 	bl	8006490 <_calloc_r>
 800592c:	b160      	cbz	r0, 8005948 <_Balloc+0x64>
 800592e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005932:	e00e      	b.n	8005952 <_Balloc+0x6e>
 8005934:	2221      	movs	r2, #33	@ 0x21
 8005936:	2104      	movs	r1, #4
 8005938:	4620      	mov	r0, r4
 800593a:	f000 fda9 	bl	8006490 <_calloc_r>
 800593e:	69e3      	ldr	r3, [r4, #28]
 8005940:	60f0      	str	r0, [r6, #12]
 8005942:	68db      	ldr	r3, [r3, #12]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d1e4      	bne.n	8005912 <_Balloc+0x2e>
 8005948:	2000      	movs	r0, #0
 800594a:	bd70      	pop	{r4, r5, r6, pc}
 800594c:	6802      	ldr	r2, [r0, #0]
 800594e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005952:	2300      	movs	r3, #0
 8005954:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005958:	e7f7      	b.n	800594a <_Balloc+0x66>
 800595a:	bf00      	nop
 800595c:	08006b8b 	.word	0x08006b8b
 8005960:	08006c0b 	.word	0x08006c0b

08005964 <_Bfree>:
 8005964:	b570      	push	{r4, r5, r6, lr}
 8005966:	69c6      	ldr	r6, [r0, #28]
 8005968:	4605      	mov	r5, r0
 800596a:	460c      	mov	r4, r1
 800596c:	b976      	cbnz	r6, 800598c <_Bfree+0x28>
 800596e:	2010      	movs	r0, #16
 8005970:	f7ff ff02 	bl	8005778 <malloc>
 8005974:	4602      	mov	r2, r0
 8005976:	61e8      	str	r0, [r5, #28]
 8005978:	b920      	cbnz	r0, 8005984 <_Bfree+0x20>
 800597a:	218f      	movs	r1, #143	@ 0x8f
 800597c:	4b08      	ldr	r3, [pc, #32]	@ (80059a0 <_Bfree+0x3c>)
 800597e:	4809      	ldr	r0, [pc, #36]	@ (80059a4 <_Bfree+0x40>)
 8005980:	f000 fd68 	bl	8006454 <__assert_func>
 8005984:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005988:	6006      	str	r6, [r0, #0]
 800598a:	60c6      	str	r6, [r0, #12]
 800598c:	b13c      	cbz	r4, 800599e <_Bfree+0x3a>
 800598e:	69eb      	ldr	r3, [r5, #28]
 8005990:	6862      	ldr	r2, [r4, #4]
 8005992:	68db      	ldr	r3, [r3, #12]
 8005994:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005998:	6021      	str	r1, [r4, #0]
 800599a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800599e:	bd70      	pop	{r4, r5, r6, pc}
 80059a0:	08006b8b 	.word	0x08006b8b
 80059a4:	08006c0b 	.word	0x08006c0b

080059a8 <__multadd>:
 80059a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80059ac:	4607      	mov	r7, r0
 80059ae:	460c      	mov	r4, r1
 80059b0:	461e      	mov	r6, r3
 80059b2:	2000      	movs	r0, #0
 80059b4:	690d      	ldr	r5, [r1, #16]
 80059b6:	f101 0c14 	add.w	ip, r1, #20
 80059ba:	f8dc 3000 	ldr.w	r3, [ip]
 80059be:	3001      	adds	r0, #1
 80059c0:	b299      	uxth	r1, r3
 80059c2:	fb02 6101 	mla	r1, r2, r1, r6
 80059c6:	0c1e      	lsrs	r6, r3, #16
 80059c8:	0c0b      	lsrs	r3, r1, #16
 80059ca:	fb02 3306 	mla	r3, r2, r6, r3
 80059ce:	b289      	uxth	r1, r1
 80059d0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80059d4:	4285      	cmp	r5, r0
 80059d6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80059da:	f84c 1b04 	str.w	r1, [ip], #4
 80059de:	dcec      	bgt.n	80059ba <__multadd+0x12>
 80059e0:	b30e      	cbz	r6, 8005a26 <__multadd+0x7e>
 80059e2:	68a3      	ldr	r3, [r4, #8]
 80059e4:	42ab      	cmp	r3, r5
 80059e6:	dc19      	bgt.n	8005a1c <__multadd+0x74>
 80059e8:	6861      	ldr	r1, [r4, #4]
 80059ea:	4638      	mov	r0, r7
 80059ec:	3101      	adds	r1, #1
 80059ee:	f7ff ff79 	bl	80058e4 <_Balloc>
 80059f2:	4680      	mov	r8, r0
 80059f4:	b928      	cbnz	r0, 8005a02 <__multadd+0x5a>
 80059f6:	4602      	mov	r2, r0
 80059f8:	21ba      	movs	r1, #186	@ 0xba
 80059fa:	4b0c      	ldr	r3, [pc, #48]	@ (8005a2c <__multadd+0x84>)
 80059fc:	480c      	ldr	r0, [pc, #48]	@ (8005a30 <__multadd+0x88>)
 80059fe:	f000 fd29 	bl	8006454 <__assert_func>
 8005a02:	6922      	ldr	r2, [r4, #16]
 8005a04:	f104 010c 	add.w	r1, r4, #12
 8005a08:	3202      	adds	r2, #2
 8005a0a:	0092      	lsls	r2, r2, #2
 8005a0c:	300c      	adds	r0, #12
 8005a0e:	f000 fd13 	bl	8006438 <memcpy>
 8005a12:	4621      	mov	r1, r4
 8005a14:	4638      	mov	r0, r7
 8005a16:	f7ff ffa5 	bl	8005964 <_Bfree>
 8005a1a:	4644      	mov	r4, r8
 8005a1c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005a20:	3501      	adds	r5, #1
 8005a22:	615e      	str	r6, [r3, #20]
 8005a24:	6125      	str	r5, [r4, #16]
 8005a26:	4620      	mov	r0, r4
 8005a28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a2c:	08006bfa 	.word	0x08006bfa
 8005a30:	08006c0b 	.word	0x08006c0b

08005a34 <__hi0bits>:
 8005a34:	4603      	mov	r3, r0
 8005a36:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8005a3a:	bf3a      	itte	cc
 8005a3c:	0403      	lslcc	r3, r0, #16
 8005a3e:	2010      	movcc	r0, #16
 8005a40:	2000      	movcs	r0, #0
 8005a42:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005a46:	bf3c      	itt	cc
 8005a48:	021b      	lslcc	r3, r3, #8
 8005a4a:	3008      	addcc	r0, #8
 8005a4c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005a50:	bf3c      	itt	cc
 8005a52:	011b      	lslcc	r3, r3, #4
 8005a54:	3004      	addcc	r0, #4
 8005a56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a5a:	bf3c      	itt	cc
 8005a5c:	009b      	lslcc	r3, r3, #2
 8005a5e:	3002      	addcc	r0, #2
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	db05      	blt.n	8005a70 <__hi0bits+0x3c>
 8005a64:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8005a68:	f100 0001 	add.w	r0, r0, #1
 8005a6c:	bf08      	it	eq
 8005a6e:	2020      	moveq	r0, #32
 8005a70:	4770      	bx	lr

08005a72 <__lo0bits>:
 8005a72:	6803      	ldr	r3, [r0, #0]
 8005a74:	4602      	mov	r2, r0
 8005a76:	f013 0007 	ands.w	r0, r3, #7
 8005a7a:	d00b      	beq.n	8005a94 <__lo0bits+0x22>
 8005a7c:	07d9      	lsls	r1, r3, #31
 8005a7e:	d421      	bmi.n	8005ac4 <__lo0bits+0x52>
 8005a80:	0798      	lsls	r0, r3, #30
 8005a82:	bf49      	itett	mi
 8005a84:	085b      	lsrmi	r3, r3, #1
 8005a86:	089b      	lsrpl	r3, r3, #2
 8005a88:	2001      	movmi	r0, #1
 8005a8a:	6013      	strmi	r3, [r2, #0]
 8005a8c:	bf5c      	itt	pl
 8005a8e:	2002      	movpl	r0, #2
 8005a90:	6013      	strpl	r3, [r2, #0]
 8005a92:	4770      	bx	lr
 8005a94:	b299      	uxth	r1, r3
 8005a96:	b909      	cbnz	r1, 8005a9c <__lo0bits+0x2a>
 8005a98:	2010      	movs	r0, #16
 8005a9a:	0c1b      	lsrs	r3, r3, #16
 8005a9c:	b2d9      	uxtb	r1, r3
 8005a9e:	b909      	cbnz	r1, 8005aa4 <__lo0bits+0x32>
 8005aa0:	3008      	adds	r0, #8
 8005aa2:	0a1b      	lsrs	r3, r3, #8
 8005aa4:	0719      	lsls	r1, r3, #28
 8005aa6:	bf04      	itt	eq
 8005aa8:	091b      	lsreq	r3, r3, #4
 8005aaa:	3004      	addeq	r0, #4
 8005aac:	0799      	lsls	r1, r3, #30
 8005aae:	bf04      	itt	eq
 8005ab0:	089b      	lsreq	r3, r3, #2
 8005ab2:	3002      	addeq	r0, #2
 8005ab4:	07d9      	lsls	r1, r3, #31
 8005ab6:	d403      	bmi.n	8005ac0 <__lo0bits+0x4e>
 8005ab8:	085b      	lsrs	r3, r3, #1
 8005aba:	f100 0001 	add.w	r0, r0, #1
 8005abe:	d003      	beq.n	8005ac8 <__lo0bits+0x56>
 8005ac0:	6013      	str	r3, [r2, #0]
 8005ac2:	4770      	bx	lr
 8005ac4:	2000      	movs	r0, #0
 8005ac6:	4770      	bx	lr
 8005ac8:	2020      	movs	r0, #32
 8005aca:	4770      	bx	lr

08005acc <__i2b>:
 8005acc:	b510      	push	{r4, lr}
 8005ace:	460c      	mov	r4, r1
 8005ad0:	2101      	movs	r1, #1
 8005ad2:	f7ff ff07 	bl	80058e4 <_Balloc>
 8005ad6:	4602      	mov	r2, r0
 8005ad8:	b928      	cbnz	r0, 8005ae6 <__i2b+0x1a>
 8005ada:	f240 1145 	movw	r1, #325	@ 0x145
 8005ade:	4b04      	ldr	r3, [pc, #16]	@ (8005af0 <__i2b+0x24>)
 8005ae0:	4804      	ldr	r0, [pc, #16]	@ (8005af4 <__i2b+0x28>)
 8005ae2:	f000 fcb7 	bl	8006454 <__assert_func>
 8005ae6:	2301      	movs	r3, #1
 8005ae8:	6144      	str	r4, [r0, #20]
 8005aea:	6103      	str	r3, [r0, #16]
 8005aec:	bd10      	pop	{r4, pc}
 8005aee:	bf00      	nop
 8005af0:	08006bfa 	.word	0x08006bfa
 8005af4:	08006c0b 	.word	0x08006c0b

08005af8 <__multiply>:
 8005af8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005afc:	4614      	mov	r4, r2
 8005afe:	690a      	ldr	r2, [r1, #16]
 8005b00:	6923      	ldr	r3, [r4, #16]
 8005b02:	460f      	mov	r7, r1
 8005b04:	429a      	cmp	r2, r3
 8005b06:	bfa2      	ittt	ge
 8005b08:	4623      	movge	r3, r4
 8005b0a:	460c      	movge	r4, r1
 8005b0c:	461f      	movge	r7, r3
 8005b0e:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8005b12:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8005b16:	68a3      	ldr	r3, [r4, #8]
 8005b18:	6861      	ldr	r1, [r4, #4]
 8005b1a:	eb0a 0609 	add.w	r6, sl, r9
 8005b1e:	42b3      	cmp	r3, r6
 8005b20:	b085      	sub	sp, #20
 8005b22:	bfb8      	it	lt
 8005b24:	3101      	addlt	r1, #1
 8005b26:	f7ff fedd 	bl	80058e4 <_Balloc>
 8005b2a:	b930      	cbnz	r0, 8005b3a <__multiply+0x42>
 8005b2c:	4602      	mov	r2, r0
 8005b2e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8005b32:	4b43      	ldr	r3, [pc, #268]	@ (8005c40 <__multiply+0x148>)
 8005b34:	4843      	ldr	r0, [pc, #268]	@ (8005c44 <__multiply+0x14c>)
 8005b36:	f000 fc8d 	bl	8006454 <__assert_func>
 8005b3a:	f100 0514 	add.w	r5, r0, #20
 8005b3e:	462b      	mov	r3, r5
 8005b40:	2200      	movs	r2, #0
 8005b42:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005b46:	4543      	cmp	r3, r8
 8005b48:	d321      	bcc.n	8005b8e <__multiply+0x96>
 8005b4a:	f107 0114 	add.w	r1, r7, #20
 8005b4e:	f104 0214 	add.w	r2, r4, #20
 8005b52:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8005b56:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8005b5a:	9302      	str	r3, [sp, #8]
 8005b5c:	1b13      	subs	r3, r2, r4
 8005b5e:	3b15      	subs	r3, #21
 8005b60:	f023 0303 	bic.w	r3, r3, #3
 8005b64:	3304      	adds	r3, #4
 8005b66:	f104 0715 	add.w	r7, r4, #21
 8005b6a:	42ba      	cmp	r2, r7
 8005b6c:	bf38      	it	cc
 8005b6e:	2304      	movcc	r3, #4
 8005b70:	9301      	str	r3, [sp, #4]
 8005b72:	9b02      	ldr	r3, [sp, #8]
 8005b74:	9103      	str	r1, [sp, #12]
 8005b76:	428b      	cmp	r3, r1
 8005b78:	d80c      	bhi.n	8005b94 <__multiply+0x9c>
 8005b7a:	2e00      	cmp	r6, #0
 8005b7c:	dd03      	ble.n	8005b86 <__multiply+0x8e>
 8005b7e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d05a      	beq.n	8005c3c <__multiply+0x144>
 8005b86:	6106      	str	r6, [r0, #16]
 8005b88:	b005      	add	sp, #20
 8005b8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b8e:	f843 2b04 	str.w	r2, [r3], #4
 8005b92:	e7d8      	b.n	8005b46 <__multiply+0x4e>
 8005b94:	f8b1 a000 	ldrh.w	sl, [r1]
 8005b98:	f1ba 0f00 	cmp.w	sl, #0
 8005b9c:	d023      	beq.n	8005be6 <__multiply+0xee>
 8005b9e:	46a9      	mov	r9, r5
 8005ba0:	f04f 0c00 	mov.w	ip, #0
 8005ba4:	f104 0e14 	add.w	lr, r4, #20
 8005ba8:	f85e 7b04 	ldr.w	r7, [lr], #4
 8005bac:	f8d9 3000 	ldr.w	r3, [r9]
 8005bb0:	fa1f fb87 	uxth.w	fp, r7
 8005bb4:	b29b      	uxth	r3, r3
 8005bb6:	fb0a 330b 	mla	r3, sl, fp, r3
 8005bba:	4463      	add	r3, ip
 8005bbc:	f8d9 c000 	ldr.w	ip, [r9]
 8005bc0:	0c3f      	lsrs	r7, r7, #16
 8005bc2:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8005bc6:	fb0a c707 	mla	r7, sl, r7, ip
 8005bca:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8005bce:	b29b      	uxth	r3, r3
 8005bd0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8005bd4:	4572      	cmp	r2, lr
 8005bd6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8005bda:	f849 3b04 	str.w	r3, [r9], #4
 8005bde:	d8e3      	bhi.n	8005ba8 <__multiply+0xb0>
 8005be0:	9b01      	ldr	r3, [sp, #4]
 8005be2:	f845 c003 	str.w	ip, [r5, r3]
 8005be6:	9b03      	ldr	r3, [sp, #12]
 8005be8:	3104      	adds	r1, #4
 8005bea:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8005bee:	f1b9 0f00 	cmp.w	r9, #0
 8005bf2:	d021      	beq.n	8005c38 <__multiply+0x140>
 8005bf4:	46ae      	mov	lr, r5
 8005bf6:	f04f 0a00 	mov.w	sl, #0
 8005bfa:	682b      	ldr	r3, [r5, #0]
 8005bfc:	f104 0c14 	add.w	ip, r4, #20
 8005c00:	f8bc b000 	ldrh.w	fp, [ip]
 8005c04:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8005c08:	b29b      	uxth	r3, r3
 8005c0a:	fb09 770b 	mla	r7, r9, fp, r7
 8005c0e:	4457      	add	r7, sl
 8005c10:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8005c14:	f84e 3b04 	str.w	r3, [lr], #4
 8005c18:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005c1c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005c20:	f8be 3000 	ldrh.w	r3, [lr]
 8005c24:	4562      	cmp	r2, ip
 8005c26:	fb09 330a 	mla	r3, r9, sl, r3
 8005c2a:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8005c2e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005c32:	d8e5      	bhi.n	8005c00 <__multiply+0x108>
 8005c34:	9f01      	ldr	r7, [sp, #4]
 8005c36:	51eb      	str	r3, [r5, r7]
 8005c38:	3504      	adds	r5, #4
 8005c3a:	e79a      	b.n	8005b72 <__multiply+0x7a>
 8005c3c:	3e01      	subs	r6, #1
 8005c3e:	e79c      	b.n	8005b7a <__multiply+0x82>
 8005c40:	08006bfa 	.word	0x08006bfa
 8005c44:	08006c0b 	.word	0x08006c0b

08005c48 <__pow5mult>:
 8005c48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005c4c:	4615      	mov	r5, r2
 8005c4e:	f012 0203 	ands.w	r2, r2, #3
 8005c52:	4607      	mov	r7, r0
 8005c54:	460e      	mov	r6, r1
 8005c56:	d007      	beq.n	8005c68 <__pow5mult+0x20>
 8005c58:	4c25      	ldr	r4, [pc, #148]	@ (8005cf0 <__pow5mult+0xa8>)
 8005c5a:	3a01      	subs	r2, #1
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005c62:	f7ff fea1 	bl	80059a8 <__multadd>
 8005c66:	4606      	mov	r6, r0
 8005c68:	10ad      	asrs	r5, r5, #2
 8005c6a:	d03d      	beq.n	8005ce8 <__pow5mult+0xa0>
 8005c6c:	69fc      	ldr	r4, [r7, #28]
 8005c6e:	b97c      	cbnz	r4, 8005c90 <__pow5mult+0x48>
 8005c70:	2010      	movs	r0, #16
 8005c72:	f7ff fd81 	bl	8005778 <malloc>
 8005c76:	4602      	mov	r2, r0
 8005c78:	61f8      	str	r0, [r7, #28]
 8005c7a:	b928      	cbnz	r0, 8005c88 <__pow5mult+0x40>
 8005c7c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8005c80:	4b1c      	ldr	r3, [pc, #112]	@ (8005cf4 <__pow5mult+0xac>)
 8005c82:	481d      	ldr	r0, [pc, #116]	@ (8005cf8 <__pow5mult+0xb0>)
 8005c84:	f000 fbe6 	bl	8006454 <__assert_func>
 8005c88:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005c8c:	6004      	str	r4, [r0, #0]
 8005c8e:	60c4      	str	r4, [r0, #12]
 8005c90:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8005c94:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005c98:	b94c      	cbnz	r4, 8005cae <__pow5mult+0x66>
 8005c9a:	f240 2171 	movw	r1, #625	@ 0x271
 8005c9e:	4638      	mov	r0, r7
 8005ca0:	f7ff ff14 	bl	8005acc <__i2b>
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	4604      	mov	r4, r0
 8005ca8:	f8c8 0008 	str.w	r0, [r8, #8]
 8005cac:	6003      	str	r3, [r0, #0]
 8005cae:	f04f 0900 	mov.w	r9, #0
 8005cb2:	07eb      	lsls	r3, r5, #31
 8005cb4:	d50a      	bpl.n	8005ccc <__pow5mult+0x84>
 8005cb6:	4631      	mov	r1, r6
 8005cb8:	4622      	mov	r2, r4
 8005cba:	4638      	mov	r0, r7
 8005cbc:	f7ff ff1c 	bl	8005af8 <__multiply>
 8005cc0:	4680      	mov	r8, r0
 8005cc2:	4631      	mov	r1, r6
 8005cc4:	4638      	mov	r0, r7
 8005cc6:	f7ff fe4d 	bl	8005964 <_Bfree>
 8005cca:	4646      	mov	r6, r8
 8005ccc:	106d      	asrs	r5, r5, #1
 8005cce:	d00b      	beq.n	8005ce8 <__pow5mult+0xa0>
 8005cd0:	6820      	ldr	r0, [r4, #0]
 8005cd2:	b938      	cbnz	r0, 8005ce4 <__pow5mult+0x9c>
 8005cd4:	4622      	mov	r2, r4
 8005cd6:	4621      	mov	r1, r4
 8005cd8:	4638      	mov	r0, r7
 8005cda:	f7ff ff0d 	bl	8005af8 <__multiply>
 8005cde:	6020      	str	r0, [r4, #0]
 8005ce0:	f8c0 9000 	str.w	r9, [r0]
 8005ce4:	4604      	mov	r4, r0
 8005ce6:	e7e4      	b.n	8005cb2 <__pow5mult+0x6a>
 8005ce8:	4630      	mov	r0, r6
 8005cea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005cee:	bf00      	nop
 8005cf0:	08006c64 	.word	0x08006c64
 8005cf4:	08006b8b 	.word	0x08006b8b
 8005cf8:	08006c0b 	.word	0x08006c0b

08005cfc <__lshift>:
 8005cfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d00:	460c      	mov	r4, r1
 8005d02:	4607      	mov	r7, r0
 8005d04:	4691      	mov	r9, r2
 8005d06:	6923      	ldr	r3, [r4, #16]
 8005d08:	6849      	ldr	r1, [r1, #4]
 8005d0a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005d0e:	68a3      	ldr	r3, [r4, #8]
 8005d10:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005d14:	f108 0601 	add.w	r6, r8, #1
 8005d18:	42b3      	cmp	r3, r6
 8005d1a:	db0b      	blt.n	8005d34 <__lshift+0x38>
 8005d1c:	4638      	mov	r0, r7
 8005d1e:	f7ff fde1 	bl	80058e4 <_Balloc>
 8005d22:	4605      	mov	r5, r0
 8005d24:	b948      	cbnz	r0, 8005d3a <__lshift+0x3e>
 8005d26:	4602      	mov	r2, r0
 8005d28:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8005d2c:	4b27      	ldr	r3, [pc, #156]	@ (8005dcc <__lshift+0xd0>)
 8005d2e:	4828      	ldr	r0, [pc, #160]	@ (8005dd0 <__lshift+0xd4>)
 8005d30:	f000 fb90 	bl	8006454 <__assert_func>
 8005d34:	3101      	adds	r1, #1
 8005d36:	005b      	lsls	r3, r3, #1
 8005d38:	e7ee      	b.n	8005d18 <__lshift+0x1c>
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	f100 0114 	add.w	r1, r0, #20
 8005d40:	f100 0210 	add.w	r2, r0, #16
 8005d44:	4618      	mov	r0, r3
 8005d46:	4553      	cmp	r3, sl
 8005d48:	db33      	blt.n	8005db2 <__lshift+0xb6>
 8005d4a:	6920      	ldr	r0, [r4, #16]
 8005d4c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005d50:	f104 0314 	add.w	r3, r4, #20
 8005d54:	f019 091f 	ands.w	r9, r9, #31
 8005d58:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005d5c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005d60:	d02b      	beq.n	8005dba <__lshift+0xbe>
 8005d62:	468a      	mov	sl, r1
 8005d64:	2200      	movs	r2, #0
 8005d66:	f1c9 0e20 	rsb	lr, r9, #32
 8005d6a:	6818      	ldr	r0, [r3, #0]
 8005d6c:	fa00 f009 	lsl.w	r0, r0, r9
 8005d70:	4310      	orrs	r0, r2
 8005d72:	f84a 0b04 	str.w	r0, [sl], #4
 8005d76:	f853 2b04 	ldr.w	r2, [r3], #4
 8005d7a:	459c      	cmp	ip, r3
 8005d7c:	fa22 f20e 	lsr.w	r2, r2, lr
 8005d80:	d8f3      	bhi.n	8005d6a <__lshift+0x6e>
 8005d82:	ebac 0304 	sub.w	r3, ip, r4
 8005d86:	3b15      	subs	r3, #21
 8005d88:	f023 0303 	bic.w	r3, r3, #3
 8005d8c:	3304      	adds	r3, #4
 8005d8e:	f104 0015 	add.w	r0, r4, #21
 8005d92:	4584      	cmp	ip, r0
 8005d94:	bf38      	it	cc
 8005d96:	2304      	movcc	r3, #4
 8005d98:	50ca      	str	r2, [r1, r3]
 8005d9a:	b10a      	cbz	r2, 8005da0 <__lshift+0xa4>
 8005d9c:	f108 0602 	add.w	r6, r8, #2
 8005da0:	3e01      	subs	r6, #1
 8005da2:	4638      	mov	r0, r7
 8005da4:	4621      	mov	r1, r4
 8005da6:	612e      	str	r6, [r5, #16]
 8005da8:	f7ff fddc 	bl	8005964 <_Bfree>
 8005dac:	4628      	mov	r0, r5
 8005dae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005db2:	f842 0f04 	str.w	r0, [r2, #4]!
 8005db6:	3301      	adds	r3, #1
 8005db8:	e7c5      	b.n	8005d46 <__lshift+0x4a>
 8005dba:	3904      	subs	r1, #4
 8005dbc:	f853 2b04 	ldr.w	r2, [r3], #4
 8005dc0:	459c      	cmp	ip, r3
 8005dc2:	f841 2f04 	str.w	r2, [r1, #4]!
 8005dc6:	d8f9      	bhi.n	8005dbc <__lshift+0xc0>
 8005dc8:	e7ea      	b.n	8005da0 <__lshift+0xa4>
 8005dca:	bf00      	nop
 8005dcc:	08006bfa 	.word	0x08006bfa
 8005dd0:	08006c0b 	.word	0x08006c0b

08005dd4 <__mcmp>:
 8005dd4:	4603      	mov	r3, r0
 8005dd6:	690a      	ldr	r2, [r1, #16]
 8005dd8:	6900      	ldr	r0, [r0, #16]
 8005dda:	b530      	push	{r4, r5, lr}
 8005ddc:	1a80      	subs	r0, r0, r2
 8005dde:	d10e      	bne.n	8005dfe <__mcmp+0x2a>
 8005de0:	3314      	adds	r3, #20
 8005de2:	3114      	adds	r1, #20
 8005de4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005de8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005dec:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005df0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005df4:	4295      	cmp	r5, r2
 8005df6:	d003      	beq.n	8005e00 <__mcmp+0x2c>
 8005df8:	d205      	bcs.n	8005e06 <__mcmp+0x32>
 8005dfa:	f04f 30ff 	mov.w	r0, #4294967295
 8005dfe:	bd30      	pop	{r4, r5, pc}
 8005e00:	42a3      	cmp	r3, r4
 8005e02:	d3f3      	bcc.n	8005dec <__mcmp+0x18>
 8005e04:	e7fb      	b.n	8005dfe <__mcmp+0x2a>
 8005e06:	2001      	movs	r0, #1
 8005e08:	e7f9      	b.n	8005dfe <__mcmp+0x2a>
	...

08005e0c <__mdiff>:
 8005e0c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e10:	4689      	mov	r9, r1
 8005e12:	4606      	mov	r6, r0
 8005e14:	4611      	mov	r1, r2
 8005e16:	4648      	mov	r0, r9
 8005e18:	4614      	mov	r4, r2
 8005e1a:	f7ff ffdb 	bl	8005dd4 <__mcmp>
 8005e1e:	1e05      	subs	r5, r0, #0
 8005e20:	d112      	bne.n	8005e48 <__mdiff+0x3c>
 8005e22:	4629      	mov	r1, r5
 8005e24:	4630      	mov	r0, r6
 8005e26:	f7ff fd5d 	bl	80058e4 <_Balloc>
 8005e2a:	4602      	mov	r2, r0
 8005e2c:	b928      	cbnz	r0, 8005e3a <__mdiff+0x2e>
 8005e2e:	f240 2137 	movw	r1, #567	@ 0x237
 8005e32:	4b3e      	ldr	r3, [pc, #248]	@ (8005f2c <__mdiff+0x120>)
 8005e34:	483e      	ldr	r0, [pc, #248]	@ (8005f30 <__mdiff+0x124>)
 8005e36:	f000 fb0d 	bl	8006454 <__assert_func>
 8005e3a:	2301      	movs	r3, #1
 8005e3c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005e40:	4610      	mov	r0, r2
 8005e42:	b003      	add	sp, #12
 8005e44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e48:	bfbc      	itt	lt
 8005e4a:	464b      	movlt	r3, r9
 8005e4c:	46a1      	movlt	r9, r4
 8005e4e:	4630      	mov	r0, r6
 8005e50:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8005e54:	bfba      	itte	lt
 8005e56:	461c      	movlt	r4, r3
 8005e58:	2501      	movlt	r5, #1
 8005e5a:	2500      	movge	r5, #0
 8005e5c:	f7ff fd42 	bl	80058e4 <_Balloc>
 8005e60:	4602      	mov	r2, r0
 8005e62:	b918      	cbnz	r0, 8005e6c <__mdiff+0x60>
 8005e64:	f240 2145 	movw	r1, #581	@ 0x245
 8005e68:	4b30      	ldr	r3, [pc, #192]	@ (8005f2c <__mdiff+0x120>)
 8005e6a:	e7e3      	b.n	8005e34 <__mdiff+0x28>
 8005e6c:	f100 0b14 	add.w	fp, r0, #20
 8005e70:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8005e74:	f109 0310 	add.w	r3, r9, #16
 8005e78:	60c5      	str	r5, [r0, #12]
 8005e7a:	f04f 0c00 	mov.w	ip, #0
 8005e7e:	f109 0514 	add.w	r5, r9, #20
 8005e82:	46d9      	mov	r9, fp
 8005e84:	6926      	ldr	r6, [r4, #16]
 8005e86:	f104 0e14 	add.w	lr, r4, #20
 8005e8a:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8005e8e:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8005e92:	9301      	str	r3, [sp, #4]
 8005e94:	9b01      	ldr	r3, [sp, #4]
 8005e96:	f85e 0b04 	ldr.w	r0, [lr], #4
 8005e9a:	f853 af04 	ldr.w	sl, [r3, #4]!
 8005e9e:	b281      	uxth	r1, r0
 8005ea0:	9301      	str	r3, [sp, #4]
 8005ea2:	fa1f f38a 	uxth.w	r3, sl
 8005ea6:	1a5b      	subs	r3, r3, r1
 8005ea8:	0c00      	lsrs	r0, r0, #16
 8005eaa:	4463      	add	r3, ip
 8005eac:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8005eb0:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8005eb4:	b29b      	uxth	r3, r3
 8005eb6:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8005eba:	4576      	cmp	r6, lr
 8005ebc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005ec0:	f849 3b04 	str.w	r3, [r9], #4
 8005ec4:	d8e6      	bhi.n	8005e94 <__mdiff+0x88>
 8005ec6:	1b33      	subs	r3, r6, r4
 8005ec8:	3b15      	subs	r3, #21
 8005eca:	f023 0303 	bic.w	r3, r3, #3
 8005ece:	3415      	adds	r4, #21
 8005ed0:	3304      	adds	r3, #4
 8005ed2:	42a6      	cmp	r6, r4
 8005ed4:	bf38      	it	cc
 8005ed6:	2304      	movcc	r3, #4
 8005ed8:	441d      	add	r5, r3
 8005eda:	445b      	add	r3, fp
 8005edc:	461e      	mov	r6, r3
 8005ede:	462c      	mov	r4, r5
 8005ee0:	4544      	cmp	r4, r8
 8005ee2:	d30e      	bcc.n	8005f02 <__mdiff+0xf6>
 8005ee4:	f108 0103 	add.w	r1, r8, #3
 8005ee8:	1b49      	subs	r1, r1, r5
 8005eea:	f021 0103 	bic.w	r1, r1, #3
 8005eee:	3d03      	subs	r5, #3
 8005ef0:	45a8      	cmp	r8, r5
 8005ef2:	bf38      	it	cc
 8005ef4:	2100      	movcc	r1, #0
 8005ef6:	440b      	add	r3, r1
 8005ef8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8005efc:	b199      	cbz	r1, 8005f26 <__mdiff+0x11a>
 8005efe:	6117      	str	r7, [r2, #16]
 8005f00:	e79e      	b.n	8005e40 <__mdiff+0x34>
 8005f02:	46e6      	mov	lr, ip
 8005f04:	f854 1b04 	ldr.w	r1, [r4], #4
 8005f08:	fa1f fc81 	uxth.w	ip, r1
 8005f0c:	44f4      	add	ip, lr
 8005f0e:	0c08      	lsrs	r0, r1, #16
 8005f10:	4471      	add	r1, lr
 8005f12:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8005f16:	b289      	uxth	r1, r1
 8005f18:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8005f1c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005f20:	f846 1b04 	str.w	r1, [r6], #4
 8005f24:	e7dc      	b.n	8005ee0 <__mdiff+0xd4>
 8005f26:	3f01      	subs	r7, #1
 8005f28:	e7e6      	b.n	8005ef8 <__mdiff+0xec>
 8005f2a:	bf00      	nop
 8005f2c:	08006bfa 	.word	0x08006bfa
 8005f30:	08006c0b 	.word	0x08006c0b

08005f34 <__d2b>:
 8005f34:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8005f38:	2101      	movs	r1, #1
 8005f3a:	4690      	mov	r8, r2
 8005f3c:	4699      	mov	r9, r3
 8005f3e:	9e08      	ldr	r6, [sp, #32]
 8005f40:	f7ff fcd0 	bl	80058e4 <_Balloc>
 8005f44:	4604      	mov	r4, r0
 8005f46:	b930      	cbnz	r0, 8005f56 <__d2b+0x22>
 8005f48:	4602      	mov	r2, r0
 8005f4a:	f240 310f 	movw	r1, #783	@ 0x30f
 8005f4e:	4b23      	ldr	r3, [pc, #140]	@ (8005fdc <__d2b+0xa8>)
 8005f50:	4823      	ldr	r0, [pc, #140]	@ (8005fe0 <__d2b+0xac>)
 8005f52:	f000 fa7f 	bl	8006454 <__assert_func>
 8005f56:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8005f5a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005f5e:	b10d      	cbz	r5, 8005f64 <__d2b+0x30>
 8005f60:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005f64:	9301      	str	r3, [sp, #4]
 8005f66:	f1b8 0300 	subs.w	r3, r8, #0
 8005f6a:	d024      	beq.n	8005fb6 <__d2b+0x82>
 8005f6c:	4668      	mov	r0, sp
 8005f6e:	9300      	str	r3, [sp, #0]
 8005f70:	f7ff fd7f 	bl	8005a72 <__lo0bits>
 8005f74:	e9dd 1200 	ldrd	r1, r2, [sp]
 8005f78:	b1d8      	cbz	r0, 8005fb2 <__d2b+0x7e>
 8005f7a:	f1c0 0320 	rsb	r3, r0, #32
 8005f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8005f82:	430b      	orrs	r3, r1
 8005f84:	40c2      	lsrs	r2, r0
 8005f86:	6163      	str	r3, [r4, #20]
 8005f88:	9201      	str	r2, [sp, #4]
 8005f8a:	9b01      	ldr	r3, [sp, #4]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	bf0c      	ite	eq
 8005f90:	2201      	moveq	r2, #1
 8005f92:	2202      	movne	r2, #2
 8005f94:	61a3      	str	r3, [r4, #24]
 8005f96:	6122      	str	r2, [r4, #16]
 8005f98:	b1ad      	cbz	r5, 8005fc6 <__d2b+0x92>
 8005f9a:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8005f9e:	4405      	add	r5, r0
 8005fa0:	6035      	str	r5, [r6, #0]
 8005fa2:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8005fa6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005fa8:	6018      	str	r0, [r3, #0]
 8005faa:	4620      	mov	r0, r4
 8005fac:	b002      	add	sp, #8
 8005fae:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8005fb2:	6161      	str	r1, [r4, #20]
 8005fb4:	e7e9      	b.n	8005f8a <__d2b+0x56>
 8005fb6:	a801      	add	r0, sp, #4
 8005fb8:	f7ff fd5b 	bl	8005a72 <__lo0bits>
 8005fbc:	9b01      	ldr	r3, [sp, #4]
 8005fbe:	2201      	movs	r2, #1
 8005fc0:	6163      	str	r3, [r4, #20]
 8005fc2:	3020      	adds	r0, #32
 8005fc4:	e7e7      	b.n	8005f96 <__d2b+0x62>
 8005fc6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8005fca:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005fce:	6030      	str	r0, [r6, #0]
 8005fd0:	6918      	ldr	r0, [r3, #16]
 8005fd2:	f7ff fd2f 	bl	8005a34 <__hi0bits>
 8005fd6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005fda:	e7e4      	b.n	8005fa6 <__d2b+0x72>
 8005fdc:	08006bfa 	.word	0x08006bfa
 8005fe0:	08006c0b 	.word	0x08006c0b

08005fe4 <__ssputs_r>:
 8005fe4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005fe8:	461f      	mov	r7, r3
 8005fea:	688e      	ldr	r6, [r1, #8]
 8005fec:	4682      	mov	sl, r0
 8005fee:	42be      	cmp	r6, r7
 8005ff0:	460c      	mov	r4, r1
 8005ff2:	4690      	mov	r8, r2
 8005ff4:	680b      	ldr	r3, [r1, #0]
 8005ff6:	d82d      	bhi.n	8006054 <__ssputs_r+0x70>
 8005ff8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005ffc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006000:	d026      	beq.n	8006050 <__ssputs_r+0x6c>
 8006002:	6965      	ldr	r5, [r4, #20]
 8006004:	6909      	ldr	r1, [r1, #16]
 8006006:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800600a:	eba3 0901 	sub.w	r9, r3, r1
 800600e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006012:	1c7b      	adds	r3, r7, #1
 8006014:	444b      	add	r3, r9
 8006016:	106d      	asrs	r5, r5, #1
 8006018:	429d      	cmp	r5, r3
 800601a:	bf38      	it	cc
 800601c:	461d      	movcc	r5, r3
 800601e:	0553      	lsls	r3, r2, #21
 8006020:	d527      	bpl.n	8006072 <__ssputs_r+0x8e>
 8006022:	4629      	mov	r1, r5
 8006024:	f7ff fbd2 	bl	80057cc <_malloc_r>
 8006028:	4606      	mov	r6, r0
 800602a:	b360      	cbz	r0, 8006086 <__ssputs_r+0xa2>
 800602c:	464a      	mov	r2, r9
 800602e:	6921      	ldr	r1, [r4, #16]
 8006030:	f000 fa02 	bl	8006438 <memcpy>
 8006034:	89a3      	ldrh	r3, [r4, #12]
 8006036:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800603a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800603e:	81a3      	strh	r3, [r4, #12]
 8006040:	6126      	str	r6, [r4, #16]
 8006042:	444e      	add	r6, r9
 8006044:	6026      	str	r6, [r4, #0]
 8006046:	463e      	mov	r6, r7
 8006048:	6165      	str	r5, [r4, #20]
 800604a:	eba5 0509 	sub.w	r5, r5, r9
 800604e:	60a5      	str	r5, [r4, #8]
 8006050:	42be      	cmp	r6, r7
 8006052:	d900      	bls.n	8006056 <__ssputs_r+0x72>
 8006054:	463e      	mov	r6, r7
 8006056:	4632      	mov	r2, r6
 8006058:	4641      	mov	r1, r8
 800605a:	6820      	ldr	r0, [r4, #0]
 800605c:	f000 f9c2 	bl	80063e4 <memmove>
 8006060:	2000      	movs	r0, #0
 8006062:	68a3      	ldr	r3, [r4, #8]
 8006064:	1b9b      	subs	r3, r3, r6
 8006066:	60a3      	str	r3, [r4, #8]
 8006068:	6823      	ldr	r3, [r4, #0]
 800606a:	4433      	add	r3, r6
 800606c:	6023      	str	r3, [r4, #0]
 800606e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006072:	462a      	mov	r2, r5
 8006074:	f000 fa32 	bl	80064dc <_realloc_r>
 8006078:	4606      	mov	r6, r0
 800607a:	2800      	cmp	r0, #0
 800607c:	d1e0      	bne.n	8006040 <__ssputs_r+0x5c>
 800607e:	4650      	mov	r0, sl
 8006080:	6921      	ldr	r1, [r4, #16]
 8006082:	f7ff fb31 	bl	80056e8 <_free_r>
 8006086:	230c      	movs	r3, #12
 8006088:	f8ca 3000 	str.w	r3, [sl]
 800608c:	89a3      	ldrh	r3, [r4, #12]
 800608e:	f04f 30ff 	mov.w	r0, #4294967295
 8006092:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006096:	81a3      	strh	r3, [r4, #12]
 8006098:	e7e9      	b.n	800606e <__ssputs_r+0x8a>
	...

0800609c <_svfiprintf_r>:
 800609c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060a0:	4698      	mov	r8, r3
 80060a2:	898b      	ldrh	r3, [r1, #12]
 80060a4:	4607      	mov	r7, r0
 80060a6:	061b      	lsls	r3, r3, #24
 80060a8:	460d      	mov	r5, r1
 80060aa:	4614      	mov	r4, r2
 80060ac:	b09d      	sub	sp, #116	@ 0x74
 80060ae:	d510      	bpl.n	80060d2 <_svfiprintf_r+0x36>
 80060b0:	690b      	ldr	r3, [r1, #16]
 80060b2:	b973      	cbnz	r3, 80060d2 <_svfiprintf_r+0x36>
 80060b4:	2140      	movs	r1, #64	@ 0x40
 80060b6:	f7ff fb89 	bl	80057cc <_malloc_r>
 80060ba:	6028      	str	r0, [r5, #0]
 80060bc:	6128      	str	r0, [r5, #16]
 80060be:	b930      	cbnz	r0, 80060ce <_svfiprintf_r+0x32>
 80060c0:	230c      	movs	r3, #12
 80060c2:	603b      	str	r3, [r7, #0]
 80060c4:	f04f 30ff 	mov.w	r0, #4294967295
 80060c8:	b01d      	add	sp, #116	@ 0x74
 80060ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060ce:	2340      	movs	r3, #64	@ 0x40
 80060d0:	616b      	str	r3, [r5, #20]
 80060d2:	2300      	movs	r3, #0
 80060d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80060d6:	2320      	movs	r3, #32
 80060d8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80060dc:	2330      	movs	r3, #48	@ 0x30
 80060de:	f04f 0901 	mov.w	r9, #1
 80060e2:	f8cd 800c 	str.w	r8, [sp, #12]
 80060e6:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8006280 <_svfiprintf_r+0x1e4>
 80060ea:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80060ee:	4623      	mov	r3, r4
 80060f0:	469a      	mov	sl, r3
 80060f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80060f6:	b10a      	cbz	r2, 80060fc <_svfiprintf_r+0x60>
 80060f8:	2a25      	cmp	r2, #37	@ 0x25
 80060fa:	d1f9      	bne.n	80060f0 <_svfiprintf_r+0x54>
 80060fc:	ebba 0b04 	subs.w	fp, sl, r4
 8006100:	d00b      	beq.n	800611a <_svfiprintf_r+0x7e>
 8006102:	465b      	mov	r3, fp
 8006104:	4622      	mov	r2, r4
 8006106:	4629      	mov	r1, r5
 8006108:	4638      	mov	r0, r7
 800610a:	f7ff ff6b 	bl	8005fe4 <__ssputs_r>
 800610e:	3001      	adds	r0, #1
 8006110:	f000 80a7 	beq.w	8006262 <_svfiprintf_r+0x1c6>
 8006114:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006116:	445a      	add	r2, fp
 8006118:	9209      	str	r2, [sp, #36]	@ 0x24
 800611a:	f89a 3000 	ldrb.w	r3, [sl]
 800611e:	2b00      	cmp	r3, #0
 8006120:	f000 809f 	beq.w	8006262 <_svfiprintf_r+0x1c6>
 8006124:	2300      	movs	r3, #0
 8006126:	f04f 32ff 	mov.w	r2, #4294967295
 800612a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800612e:	f10a 0a01 	add.w	sl, sl, #1
 8006132:	9304      	str	r3, [sp, #16]
 8006134:	9307      	str	r3, [sp, #28]
 8006136:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800613a:	931a      	str	r3, [sp, #104]	@ 0x68
 800613c:	4654      	mov	r4, sl
 800613e:	2205      	movs	r2, #5
 8006140:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006144:	484e      	ldr	r0, [pc, #312]	@ (8006280 <_svfiprintf_r+0x1e4>)
 8006146:	f7fe fc6e 	bl	8004a26 <memchr>
 800614a:	9a04      	ldr	r2, [sp, #16]
 800614c:	b9d8      	cbnz	r0, 8006186 <_svfiprintf_r+0xea>
 800614e:	06d0      	lsls	r0, r2, #27
 8006150:	bf44      	itt	mi
 8006152:	2320      	movmi	r3, #32
 8006154:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006158:	0711      	lsls	r1, r2, #28
 800615a:	bf44      	itt	mi
 800615c:	232b      	movmi	r3, #43	@ 0x2b
 800615e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006162:	f89a 3000 	ldrb.w	r3, [sl]
 8006166:	2b2a      	cmp	r3, #42	@ 0x2a
 8006168:	d015      	beq.n	8006196 <_svfiprintf_r+0xfa>
 800616a:	4654      	mov	r4, sl
 800616c:	2000      	movs	r0, #0
 800616e:	f04f 0c0a 	mov.w	ip, #10
 8006172:	9a07      	ldr	r2, [sp, #28]
 8006174:	4621      	mov	r1, r4
 8006176:	f811 3b01 	ldrb.w	r3, [r1], #1
 800617a:	3b30      	subs	r3, #48	@ 0x30
 800617c:	2b09      	cmp	r3, #9
 800617e:	d94b      	bls.n	8006218 <_svfiprintf_r+0x17c>
 8006180:	b1b0      	cbz	r0, 80061b0 <_svfiprintf_r+0x114>
 8006182:	9207      	str	r2, [sp, #28]
 8006184:	e014      	b.n	80061b0 <_svfiprintf_r+0x114>
 8006186:	eba0 0308 	sub.w	r3, r0, r8
 800618a:	fa09 f303 	lsl.w	r3, r9, r3
 800618e:	4313      	orrs	r3, r2
 8006190:	46a2      	mov	sl, r4
 8006192:	9304      	str	r3, [sp, #16]
 8006194:	e7d2      	b.n	800613c <_svfiprintf_r+0xa0>
 8006196:	9b03      	ldr	r3, [sp, #12]
 8006198:	1d19      	adds	r1, r3, #4
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	9103      	str	r1, [sp, #12]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	bfbb      	ittet	lt
 80061a2:	425b      	neglt	r3, r3
 80061a4:	f042 0202 	orrlt.w	r2, r2, #2
 80061a8:	9307      	strge	r3, [sp, #28]
 80061aa:	9307      	strlt	r3, [sp, #28]
 80061ac:	bfb8      	it	lt
 80061ae:	9204      	strlt	r2, [sp, #16]
 80061b0:	7823      	ldrb	r3, [r4, #0]
 80061b2:	2b2e      	cmp	r3, #46	@ 0x2e
 80061b4:	d10a      	bne.n	80061cc <_svfiprintf_r+0x130>
 80061b6:	7863      	ldrb	r3, [r4, #1]
 80061b8:	2b2a      	cmp	r3, #42	@ 0x2a
 80061ba:	d132      	bne.n	8006222 <_svfiprintf_r+0x186>
 80061bc:	9b03      	ldr	r3, [sp, #12]
 80061be:	3402      	adds	r4, #2
 80061c0:	1d1a      	adds	r2, r3, #4
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	9203      	str	r2, [sp, #12]
 80061c6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80061ca:	9305      	str	r3, [sp, #20]
 80061cc:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8006284 <_svfiprintf_r+0x1e8>
 80061d0:	2203      	movs	r2, #3
 80061d2:	4650      	mov	r0, sl
 80061d4:	7821      	ldrb	r1, [r4, #0]
 80061d6:	f7fe fc26 	bl	8004a26 <memchr>
 80061da:	b138      	cbz	r0, 80061ec <_svfiprintf_r+0x150>
 80061dc:	2240      	movs	r2, #64	@ 0x40
 80061de:	9b04      	ldr	r3, [sp, #16]
 80061e0:	eba0 000a 	sub.w	r0, r0, sl
 80061e4:	4082      	lsls	r2, r0
 80061e6:	4313      	orrs	r3, r2
 80061e8:	3401      	adds	r4, #1
 80061ea:	9304      	str	r3, [sp, #16]
 80061ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80061f0:	2206      	movs	r2, #6
 80061f2:	4825      	ldr	r0, [pc, #148]	@ (8006288 <_svfiprintf_r+0x1ec>)
 80061f4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80061f8:	f7fe fc15 	bl	8004a26 <memchr>
 80061fc:	2800      	cmp	r0, #0
 80061fe:	d036      	beq.n	800626e <_svfiprintf_r+0x1d2>
 8006200:	4b22      	ldr	r3, [pc, #136]	@ (800628c <_svfiprintf_r+0x1f0>)
 8006202:	bb1b      	cbnz	r3, 800624c <_svfiprintf_r+0x1b0>
 8006204:	9b03      	ldr	r3, [sp, #12]
 8006206:	3307      	adds	r3, #7
 8006208:	f023 0307 	bic.w	r3, r3, #7
 800620c:	3308      	adds	r3, #8
 800620e:	9303      	str	r3, [sp, #12]
 8006210:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006212:	4433      	add	r3, r6
 8006214:	9309      	str	r3, [sp, #36]	@ 0x24
 8006216:	e76a      	b.n	80060ee <_svfiprintf_r+0x52>
 8006218:	460c      	mov	r4, r1
 800621a:	2001      	movs	r0, #1
 800621c:	fb0c 3202 	mla	r2, ip, r2, r3
 8006220:	e7a8      	b.n	8006174 <_svfiprintf_r+0xd8>
 8006222:	2300      	movs	r3, #0
 8006224:	f04f 0c0a 	mov.w	ip, #10
 8006228:	4619      	mov	r1, r3
 800622a:	3401      	adds	r4, #1
 800622c:	9305      	str	r3, [sp, #20]
 800622e:	4620      	mov	r0, r4
 8006230:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006234:	3a30      	subs	r2, #48	@ 0x30
 8006236:	2a09      	cmp	r2, #9
 8006238:	d903      	bls.n	8006242 <_svfiprintf_r+0x1a6>
 800623a:	2b00      	cmp	r3, #0
 800623c:	d0c6      	beq.n	80061cc <_svfiprintf_r+0x130>
 800623e:	9105      	str	r1, [sp, #20]
 8006240:	e7c4      	b.n	80061cc <_svfiprintf_r+0x130>
 8006242:	4604      	mov	r4, r0
 8006244:	2301      	movs	r3, #1
 8006246:	fb0c 2101 	mla	r1, ip, r1, r2
 800624a:	e7f0      	b.n	800622e <_svfiprintf_r+0x192>
 800624c:	ab03      	add	r3, sp, #12
 800624e:	9300      	str	r3, [sp, #0]
 8006250:	462a      	mov	r2, r5
 8006252:	4638      	mov	r0, r7
 8006254:	4b0e      	ldr	r3, [pc, #56]	@ (8006290 <_svfiprintf_r+0x1f4>)
 8006256:	a904      	add	r1, sp, #16
 8006258:	f7fd fe82 	bl	8003f60 <_printf_float>
 800625c:	1c42      	adds	r2, r0, #1
 800625e:	4606      	mov	r6, r0
 8006260:	d1d6      	bne.n	8006210 <_svfiprintf_r+0x174>
 8006262:	89ab      	ldrh	r3, [r5, #12]
 8006264:	065b      	lsls	r3, r3, #25
 8006266:	f53f af2d 	bmi.w	80060c4 <_svfiprintf_r+0x28>
 800626a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800626c:	e72c      	b.n	80060c8 <_svfiprintf_r+0x2c>
 800626e:	ab03      	add	r3, sp, #12
 8006270:	9300      	str	r3, [sp, #0]
 8006272:	462a      	mov	r2, r5
 8006274:	4638      	mov	r0, r7
 8006276:	4b06      	ldr	r3, [pc, #24]	@ (8006290 <_svfiprintf_r+0x1f4>)
 8006278:	a904      	add	r1, sp, #16
 800627a:	f7fe f90f 	bl	800449c <_printf_i>
 800627e:	e7ed      	b.n	800625c <_svfiprintf_r+0x1c0>
 8006280:	08006d60 	.word	0x08006d60
 8006284:	08006d66 	.word	0x08006d66
 8006288:	08006d6a 	.word	0x08006d6a
 800628c:	08003f61 	.word	0x08003f61
 8006290:	08005fe5 	.word	0x08005fe5

08006294 <__sflush_r>:
 8006294:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800629a:	0716      	lsls	r6, r2, #28
 800629c:	4605      	mov	r5, r0
 800629e:	460c      	mov	r4, r1
 80062a0:	d454      	bmi.n	800634c <__sflush_r+0xb8>
 80062a2:	684b      	ldr	r3, [r1, #4]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	dc02      	bgt.n	80062ae <__sflush_r+0x1a>
 80062a8:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	dd48      	ble.n	8006340 <__sflush_r+0xac>
 80062ae:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80062b0:	2e00      	cmp	r6, #0
 80062b2:	d045      	beq.n	8006340 <__sflush_r+0xac>
 80062b4:	2300      	movs	r3, #0
 80062b6:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80062ba:	682f      	ldr	r7, [r5, #0]
 80062bc:	6a21      	ldr	r1, [r4, #32]
 80062be:	602b      	str	r3, [r5, #0]
 80062c0:	d030      	beq.n	8006324 <__sflush_r+0x90>
 80062c2:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80062c4:	89a3      	ldrh	r3, [r4, #12]
 80062c6:	0759      	lsls	r1, r3, #29
 80062c8:	d505      	bpl.n	80062d6 <__sflush_r+0x42>
 80062ca:	6863      	ldr	r3, [r4, #4]
 80062cc:	1ad2      	subs	r2, r2, r3
 80062ce:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80062d0:	b10b      	cbz	r3, 80062d6 <__sflush_r+0x42>
 80062d2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80062d4:	1ad2      	subs	r2, r2, r3
 80062d6:	2300      	movs	r3, #0
 80062d8:	4628      	mov	r0, r5
 80062da:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80062dc:	6a21      	ldr	r1, [r4, #32]
 80062de:	47b0      	blx	r6
 80062e0:	1c43      	adds	r3, r0, #1
 80062e2:	89a3      	ldrh	r3, [r4, #12]
 80062e4:	d106      	bne.n	80062f4 <__sflush_r+0x60>
 80062e6:	6829      	ldr	r1, [r5, #0]
 80062e8:	291d      	cmp	r1, #29
 80062ea:	d82b      	bhi.n	8006344 <__sflush_r+0xb0>
 80062ec:	4a28      	ldr	r2, [pc, #160]	@ (8006390 <__sflush_r+0xfc>)
 80062ee:	410a      	asrs	r2, r1
 80062f0:	07d6      	lsls	r6, r2, #31
 80062f2:	d427      	bmi.n	8006344 <__sflush_r+0xb0>
 80062f4:	2200      	movs	r2, #0
 80062f6:	6062      	str	r2, [r4, #4]
 80062f8:	6922      	ldr	r2, [r4, #16]
 80062fa:	04d9      	lsls	r1, r3, #19
 80062fc:	6022      	str	r2, [r4, #0]
 80062fe:	d504      	bpl.n	800630a <__sflush_r+0x76>
 8006300:	1c42      	adds	r2, r0, #1
 8006302:	d101      	bne.n	8006308 <__sflush_r+0x74>
 8006304:	682b      	ldr	r3, [r5, #0]
 8006306:	b903      	cbnz	r3, 800630a <__sflush_r+0x76>
 8006308:	6560      	str	r0, [r4, #84]	@ 0x54
 800630a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800630c:	602f      	str	r7, [r5, #0]
 800630e:	b1b9      	cbz	r1, 8006340 <__sflush_r+0xac>
 8006310:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006314:	4299      	cmp	r1, r3
 8006316:	d002      	beq.n	800631e <__sflush_r+0x8a>
 8006318:	4628      	mov	r0, r5
 800631a:	f7ff f9e5 	bl	80056e8 <_free_r>
 800631e:	2300      	movs	r3, #0
 8006320:	6363      	str	r3, [r4, #52]	@ 0x34
 8006322:	e00d      	b.n	8006340 <__sflush_r+0xac>
 8006324:	2301      	movs	r3, #1
 8006326:	4628      	mov	r0, r5
 8006328:	47b0      	blx	r6
 800632a:	4602      	mov	r2, r0
 800632c:	1c50      	adds	r0, r2, #1
 800632e:	d1c9      	bne.n	80062c4 <__sflush_r+0x30>
 8006330:	682b      	ldr	r3, [r5, #0]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d0c6      	beq.n	80062c4 <__sflush_r+0x30>
 8006336:	2b1d      	cmp	r3, #29
 8006338:	d001      	beq.n	800633e <__sflush_r+0xaa>
 800633a:	2b16      	cmp	r3, #22
 800633c:	d11d      	bne.n	800637a <__sflush_r+0xe6>
 800633e:	602f      	str	r7, [r5, #0]
 8006340:	2000      	movs	r0, #0
 8006342:	e021      	b.n	8006388 <__sflush_r+0xf4>
 8006344:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006348:	b21b      	sxth	r3, r3
 800634a:	e01a      	b.n	8006382 <__sflush_r+0xee>
 800634c:	690f      	ldr	r7, [r1, #16]
 800634e:	2f00      	cmp	r7, #0
 8006350:	d0f6      	beq.n	8006340 <__sflush_r+0xac>
 8006352:	0793      	lsls	r3, r2, #30
 8006354:	bf18      	it	ne
 8006356:	2300      	movne	r3, #0
 8006358:	680e      	ldr	r6, [r1, #0]
 800635a:	bf08      	it	eq
 800635c:	694b      	ldreq	r3, [r1, #20]
 800635e:	1bf6      	subs	r6, r6, r7
 8006360:	600f      	str	r7, [r1, #0]
 8006362:	608b      	str	r3, [r1, #8]
 8006364:	2e00      	cmp	r6, #0
 8006366:	ddeb      	ble.n	8006340 <__sflush_r+0xac>
 8006368:	4633      	mov	r3, r6
 800636a:	463a      	mov	r2, r7
 800636c:	4628      	mov	r0, r5
 800636e:	6a21      	ldr	r1, [r4, #32]
 8006370:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8006374:	47e0      	blx	ip
 8006376:	2800      	cmp	r0, #0
 8006378:	dc07      	bgt.n	800638a <__sflush_r+0xf6>
 800637a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800637e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006382:	f04f 30ff 	mov.w	r0, #4294967295
 8006386:	81a3      	strh	r3, [r4, #12]
 8006388:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800638a:	4407      	add	r7, r0
 800638c:	1a36      	subs	r6, r6, r0
 800638e:	e7e9      	b.n	8006364 <__sflush_r+0xd0>
 8006390:	dfbffffe 	.word	0xdfbffffe

08006394 <_fflush_r>:
 8006394:	b538      	push	{r3, r4, r5, lr}
 8006396:	690b      	ldr	r3, [r1, #16]
 8006398:	4605      	mov	r5, r0
 800639a:	460c      	mov	r4, r1
 800639c:	b913      	cbnz	r3, 80063a4 <_fflush_r+0x10>
 800639e:	2500      	movs	r5, #0
 80063a0:	4628      	mov	r0, r5
 80063a2:	bd38      	pop	{r3, r4, r5, pc}
 80063a4:	b118      	cbz	r0, 80063ae <_fflush_r+0x1a>
 80063a6:	6a03      	ldr	r3, [r0, #32]
 80063a8:	b90b      	cbnz	r3, 80063ae <_fflush_r+0x1a>
 80063aa:	f7fe fa23 	bl	80047f4 <__sinit>
 80063ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d0f3      	beq.n	800639e <_fflush_r+0xa>
 80063b6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80063b8:	07d0      	lsls	r0, r2, #31
 80063ba:	d404      	bmi.n	80063c6 <_fflush_r+0x32>
 80063bc:	0599      	lsls	r1, r3, #22
 80063be:	d402      	bmi.n	80063c6 <_fflush_r+0x32>
 80063c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80063c2:	f7fe fb2e 	bl	8004a22 <__retarget_lock_acquire_recursive>
 80063c6:	4628      	mov	r0, r5
 80063c8:	4621      	mov	r1, r4
 80063ca:	f7ff ff63 	bl	8006294 <__sflush_r>
 80063ce:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80063d0:	4605      	mov	r5, r0
 80063d2:	07da      	lsls	r2, r3, #31
 80063d4:	d4e4      	bmi.n	80063a0 <_fflush_r+0xc>
 80063d6:	89a3      	ldrh	r3, [r4, #12]
 80063d8:	059b      	lsls	r3, r3, #22
 80063da:	d4e1      	bmi.n	80063a0 <_fflush_r+0xc>
 80063dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80063de:	f7fe fb21 	bl	8004a24 <__retarget_lock_release_recursive>
 80063e2:	e7dd      	b.n	80063a0 <_fflush_r+0xc>

080063e4 <memmove>:
 80063e4:	4288      	cmp	r0, r1
 80063e6:	b510      	push	{r4, lr}
 80063e8:	eb01 0402 	add.w	r4, r1, r2
 80063ec:	d902      	bls.n	80063f4 <memmove+0x10>
 80063ee:	4284      	cmp	r4, r0
 80063f0:	4623      	mov	r3, r4
 80063f2:	d807      	bhi.n	8006404 <memmove+0x20>
 80063f4:	1e43      	subs	r3, r0, #1
 80063f6:	42a1      	cmp	r1, r4
 80063f8:	d008      	beq.n	800640c <memmove+0x28>
 80063fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80063fe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006402:	e7f8      	b.n	80063f6 <memmove+0x12>
 8006404:	4601      	mov	r1, r0
 8006406:	4402      	add	r2, r0
 8006408:	428a      	cmp	r2, r1
 800640a:	d100      	bne.n	800640e <memmove+0x2a>
 800640c:	bd10      	pop	{r4, pc}
 800640e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006412:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006416:	e7f7      	b.n	8006408 <memmove+0x24>

08006418 <_sbrk_r>:
 8006418:	b538      	push	{r3, r4, r5, lr}
 800641a:	2300      	movs	r3, #0
 800641c:	4d05      	ldr	r5, [pc, #20]	@ (8006434 <_sbrk_r+0x1c>)
 800641e:	4604      	mov	r4, r0
 8006420:	4608      	mov	r0, r1
 8006422:	602b      	str	r3, [r5, #0]
 8006424:	f7fb f9a0 	bl	8001768 <_sbrk>
 8006428:	1c43      	adds	r3, r0, #1
 800642a:	d102      	bne.n	8006432 <_sbrk_r+0x1a>
 800642c:	682b      	ldr	r3, [r5, #0]
 800642e:	b103      	cbz	r3, 8006432 <_sbrk_r+0x1a>
 8006430:	6023      	str	r3, [r4, #0]
 8006432:	bd38      	pop	{r3, r4, r5, pc}
 8006434:	2000040c 	.word	0x2000040c

08006438 <memcpy>:
 8006438:	440a      	add	r2, r1
 800643a:	4291      	cmp	r1, r2
 800643c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006440:	d100      	bne.n	8006444 <memcpy+0xc>
 8006442:	4770      	bx	lr
 8006444:	b510      	push	{r4, lr}
 8006446:	f811 4b01 	ldrb.w	r4, [r1], #1
 800644a:	4291      	cmp	r1, r2
 800644c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006450:	d1f9      	bne.n	8006446 <memcpy+0xe>
 8006452:	bd10      	pop	{r4, pc}

08006454 <__assert_func>:
 8006454:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006456:	4614      	mov	r4, r2
 8006458:	461a      	mov	r2, r3
 800645a:	4b09      	ldr	r3, [pc, #36]	@ (8006480 <__assert_func+0x2c>)
 800645c:	4605      	mov	r5, r0
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	68d8      	ldr	r0, [r3, #12]
 8006462:	b954      	cbnz	r4, 800647a <__assert_func+0x26>
 8006464:	4b07      	ldr	r3, [pc, #28]	@ (8006484 <__assert_func+0x30>)
 8006466:	461c      	mov	r4, r3
 8006468:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800646c:	9100      	str	r1, [sp, #0]
 800646e:	462b      	mov	r3, r5
 8006470:	4905      	ldr	r1, [pc, #20]	@ (8006488 <__assert_func+0x34>)
 8006472:	f000 f86f 	bl	8006554 <fiprintf>
 8006476:	f000 f87f 	bl	8006578 <abort>
 800647a:	4b04      	ldr	r3, [pc, #16]	@ (800648c <__assert_func+0x38>)
 800647c:	e7f4      	b.n	8006468 <__assert_func+0x14>
 800647e:	bf00      	nop
 8006480:	20000018 	.word	0x20000018
 8006484:	08006db6 	.word	0x08006db6
 8006488:	08006d88 	.word	0x08006d88
 800648c:	08006d7b 	.word	0x08006d7b

08006490 <_calloc_r>:
 8006490:	b570      	push	{r4, r5, r6, lr}
 8006492:	fba1 5402 	umull	r5, r4, r1, r2
 8006496:	b93c      	cbnz	r4, 80064a8 <_calloc_r+0x18>
 8006498:	4629      	mov	r1, r5
 800649a:	f7ff f997 	bl	80057cc <_malloc_r>
 800649e:	4606      	mov	r6, r0
 80064a0:	b928      	cbnz	r0, 80064ae <_calloc_r+0x1e>
 80064a2:	2600      	movs	r6, #0
 80064a4:	4630      	mov	r0, r6
 80064a6:	bd70      	pop	{r4, r5, r6, pc}
 80064a8:	220c      	movs	r2, #12
 80064aa:	6002      	str	r2, [r0, #0]
 80064ac:	e7f9      	b.n	80064a2 <_calloc_r+0x12>
 80064ae:	462a      	mov	r2, r5
 80064b0:	4621      	mov	r1, r4
 80064b2:	f7fe fa39 	bl	8004928 <memset>
 80064b6:	e7f5      	b.n	80064a4 <_calloc_r+0x14>

080064b8 <__ascii_mbtowc>:
 80064b8:	b082      	sub	sp, #8
 80064ba:	b901      	cbnz	r1, 80064be <__ascii_mbtowc+0x6>
 80064bc:	a901      	add	r1, sp, #4
 80064be:	b142      	cbz	r2, 80064d2 <__ascii_mbtowc+0x1a>
 80064c0:	b14b      	cbz	r3, 80064d6 <__ascii_mbtowc+0x1e>
 80064c2:	7813      	ldrb	r3, [r2, #0]
 80064c4:	600b      	str	r3, [r1, #0]
 80064c6:	7812      	ldrb	r2, [r2, #0]
 80064c8:	1e10      	subs	r0, r2, #0
 80064ca:	bf18      	it	ne
 80064cc:	2001      	movne	r0, #1
 80064ce:	b002      	add	sp, #8
 80064d0:	4770      	bx	lr
 80064d2:	4610      	mov	r0, r2
 80064d4:	e7fb      	b.n	80064ce <__ascii_mbtowc+0x16>
 80064d6:	f06f 0001 	mvn.w	r0, #1
 80064da:	e7f8      	b.n	80064ce <__ascii_mbtowc+0x16>

080064dc <_realloc_r>:
 80064dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80064e0:	4680      	mov	r8, r0
 80064e2:	4615      	mov	r5, r2
 80064e4:	460c      	mov	r4, r1
 80064e6:	b921      	cbnz	r1, 80064f2 <_realloc_r+0x16>
 80064e8:	4611      	mov	r1, r2
 80064ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80064ee:	f7ff b96d 	b.w	80057cc <_malloc_r>
 80064f2:	b92a      	cbnz	r2, 8006500 <_realloc_r+0x24>
 80064f4:	f7ff f8f8 	bl	80056e8 <_free_r>
 80064f8:	2400      	movs	r4, #0
 80064fa:	4620      	mov	r0, r4
 80064fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006500:	f000 f841 	bl	8006586 <_malloc_usable_size_r>
 8006504:	4285      	cmp	r5, r0
 8006506:	4606      	mov	r6, r0
 8006508:	d802      	bhi.n	8006510 <_realloc_r+0x34>
 800650a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800650e:	d8f4      	bhi.n	80064fa <_realloc_r+0x1e>
 8006510:	4629      	mov	r1, r5
 8006512:	4640      	mov	r0, r8
 8006514:	f7ff f95a 	bl	80057cc <_malloc_r>
 8006518:	4607      	mov	r7, r0
 800651a:	2800      	cmp	r0, #0
 800651c:	d0ec      	beq.n	80064f8 <_realloc_r+0x1c>
 800651e:	42b5      	cmp	r5, r6
 8006520:	462a      	mov	r2, r5
 8006522:	4621      	mov	r1, r4
 8006524:	bf28      	it	cs
 8006526:	4632      	movcs	r2, r6
 8006528:	f7ff ff86 	bl	8006438 <memcpy>
 800652c:	4621      	mov	r1, r4
 800652e:	4640      	mov	r0, r8
 8006530:	f7ff f8da 	bl	80056e8 <_free_r>
 8006534:	463c      	mov	r4, r7
 8006536:	e7e0      	b.n	80064fa <_realloc_r+0x1e>

08006538 <__ascii_wctomb>:
 8006538:	4603      	mov	r3, r0
 800653a:	4608      	mov	r0, r1
 800653c:	b141      	cbz	r1, 8006550 <__ascii_wctomb+0x18>
 800653e:	2aff      	cmp	r2, #255	@ 0xff
 8006540:	d904      	bls.n	800654c <__ascii_wctomb+0x14>
 8006542:	228a      	movs	r2, #138	@ 0x8a
 8006544:	f04f 30ff 	mov.w	r0, #4294967295
 8006548:	601a      	str	r2, [r3, #0]
 800654a:	4770      	bx	lr
 800654c:	2001      	movs	r0, #1
 800654e:	700a      	strb	r2, [r1, #0]
 8006550:	4770      	bx	lr
	...

08006554 <fiprintf>:
 8006554:	b40e      	push	{r1, r2, r3}
 8006556:	b503      	push	{r0, r1, lr}
 8006558:	4601      	mov	r1, r0
 800655a:	ab03      	add	r3, sp, #12
 800655c:	4805      	ldr	r0, [pc, #20]	@ (8006574 <fiprintf+0x20>)
 800655e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006562:	6800      	ldr	r0, [r0, #0]
 8006564:	9301      	str	r3, [sp, #4]
 8006566:	f000 f83d 	bl	80065e4 <_vfiprintf_r>
 800656a:	b002      	add	sp, #8
 800656c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006570:	b003      	add	sp, #12
 8006572:	4770      	bx	lr
 8006574:	20000018 	.word	0x20000018

08006578 <abort>:
 8006578:	2006      	movs	r0, #6
 800657a:	b508      	push	{r3, lr}
 800657c:	f000 fa06 	bl	800698c <raise>
 8006580:	2001      	movs	r0, #1
 8006582:	f7fb f87c 	bl	800167e <_exit>

08006586 <_malloc_usable_size_r>:
 8006586:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800658a:	1f18      	subs	r0, r3, #4
 800658c:	2b00      	cmp	r3, #0
 800658e:	bfbc      	itt	lt
 8006590:	580b      	ldrlt	r3, [r1, r0]
 8006592:	18c0      	addlt	r0, r0, r3
 8006594:	4770      	bx	lr

08006596 <__sfputc_r>:
 8006596:	6893      	ldr	r3, [r2, #8]
 8006598:	b410      	push	{r4}
 800659a:	3b01      	subs	r3, #1
 800659c:	2b00      	cmp	r3, #0
 800659e:	6093      	str	r3, [r2, #8]
 80065a0:	da07      	bge.n	80065b2 <__sfputc_r+0x1c>
 80065a2:	6994      	ldr	r4, [r2, #24]
 80065a4:	42a3      	cmp	r3, r4
 80065a6:	db01      	blt.n	80065ac <__sfputc_r+0x16>
 80065a8:	290a      	cmp	r1, #10
 80065aa:	d102      	bne.n	80065b2 <__sfputc_r+0x1c>
 80065ac:	bc10      	pop	{r4}
 80065ae:	f000 b931 	b.w	8006814 <__swbuf_r>
 80065b2:	6813      	ldr	r3, [r2, #0]
 80065b4:	1c58      	adds	r0, r3, #1
 80065b6:	6010      	str	r0, [r2, #0]
 80065b8:	7019      	strb	r1, [r3, #0]
 80065ba:	4608      	mov	r0, r1
 80065bc:	bc10      	pop	{r4}
 80065be:	4770      	bx	lr

080065c0 <__sfputs_r>:
 80065c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065c2:	4606      	mov	r6, r0
 80065c4:	460f      	mov	r7, r1
 80065c6:	4614      	mov	r4, r2
 80065c8:	18d5      	adds	r5, r2, r3
 80065ca:	42ac      	cmp	r4, r5
 80065cc:	d101      	bne.n	80065d2 <__sfputs_r+0x12>
 80065ce:	2000      	movs	r0, #0
 80065d0:	e007      	b.n	80065e2 <__sfputs_r+0x22>
 80065d2:	463a      	mov	r2, r7
 80065d4:	4630      	mov	r0, r6
 80065d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80065da:	f7ff ffdc 	bl	8006596 <__sfputc_r>
 80065de:	1c43      	adds	r3, r0, #1
 80065e0:	d1f3      	bne.n	80065ca <__sfputs_r+0xa>
 80065e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080065e4 <_vfiprintf_r>:
 80065e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065e8:	460d      	mov	r5, r1
 80065ea:	4614      	mov	r4, r2
 80065ec:	4698      	mov	r8, r3
 80065ee:	4606      	mov	r6, r0
 80065f0:	b09d      	sub	sp, #116	@ 0x74
 80065f2:	b118      	cbz	r0, 80065fc <_vfiprintf_r+0x18>
 80065f4:	6a03      	ldr	r3, [r0, #32]
 80065f6:	b90b      	cbnz	r3, 80065fc <_vfiprintf_r+0x18>
 80065f8:	f7fe f8fc 	bl	80047f4 <__sinit>
 80065fc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80065fe:	07d9      	lsls	r1, r3, #31
 8006600:	d405      	bmi.n	800660e <_vfiprintf_r+0x2a>
 8006602:	89ab      	ldrh	r3, [r5, #12]
 8006604:	059a      	lsls	r2, r3, #22
 8006606:	d402      	bmi.n	800660e <_vfiprintf_r+0x2a>
 8006608:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800660a:	f7fe fa0a 	bl	8004a22 <__retarget_lock_acquire_recursive>
 800660e:	89ab      	ldrh	r3, [r5, #12]
 8006610:	071b      	lsls	r3, r3, #28
 8006612:	d501      	bpl.n	8006618 <_vfiprintf_r+0x34>
 8006614:	692b      	ldr	r3, [r5, #16]
 8006616:	b99b      	cbnz	r3, 8006640 <_vfiprintf_r+0x5c>
 8006618:	4629      	mov	r1, r5
 800661a:	4630      	mov	r0, r6
 800661c:	f000 f938 	bl	8006890 <__swsetup_r>
 8006620:	b170      	cbz	r0, 8006640 <_vfiprintf_r+0x5c>
 8006622:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006624:	07dc      	lsls	r4, r3, #31
 8006626:	d504      	bpl.n	8006632 <_vfiprintf_r+0x4e>
 8006628:	f04f 30ff 	mov.w	r0, #4294967295
 800662c:	b01d      	add	sp, #116	@ 0x74
 800662e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006632:	89ab      	ldrh	r3, [r5, #12]
 8006634:	0598      	lsls	r0, r3, #22
 8006636:	d4f7      	bmi.n	8006628 <_vfiprintf_r+0x44>
 8006638:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800663a:	f7fe f9f3 	bl	8004a24 <__retarget_lock_release_recursive>
 800663e:	e7f3      	b.n	8006628 <_vfiprintf_r+0x44>
 8006640:	2300      	movs	r3, #0
 8006642:	9309      	str	r3, [sp, #36]	@ 0x24
 8006644:	2320      	movs	r3, #32
 8006646:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800664a:	2330      	movs	r3, #48	@ 0x30
 800664c:	f04f 0901 	mov.w	r9, #1
 8006650:	f8cd 800c 	str.w	r8, [sp, #12]
 8006654:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8006800 <_vfiprintf_r+0x21c>
 8006658:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800665c:	4623      	mov	r3, r4
 800665e:	469a      	mov	sl, r3
 8006660:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006664:	b10a      	cbz	r2, 800666a <_vfiprintf_r+0x86>
 8006666:	2a25      	cmp	r2, #37	@ 0x25
 8006668:	d1f9      	bne.n	800665e <_vfiprintf_r+0x7a>
 800666a:	ebba 0b04 	subs.w	fp, sl, r4
 800666e:	d00b      	beq.n	8006688 <_vfiprintf_r+0xa4>
 8006670:	465b      	mov	r3, fp
 8006672:	4622      	mov	r2, r4
 8006674:	4629      	mov	r1, r5
 8006676:	4630      	mov	r0, r6
 8006678:	f7ff ffa2 	bl	80065c0 <__sfputs_r>
 800667c:	3001      	adds	r0, #1
 800667e:	f000 80a7 	beq.w	80067d0 <_vfiprintf_r+0x1ec>
 8006682:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006684:	445a      	add	r2, fp
 8006686:	9209      	str	r2, [sp, #36]	@ 0x24
 8006688:	f89a 3000 	ldrb.w	r3, [sl]
 800668c:	2b00      	cmp	r3, #0
 800668e:	f000 809f 	beq.w	80067d0 <_vfiprintf_r+0x1ec>
 8006692:	2300      	movs	r3, #0
 8006694:	f04f 32ff 	mov.w	r2, #4294967295
 8006698:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800669c:	f10a 0a01 	add.w	sl, sl, #1
 80066a0:	9304      	str	r3, [sp, #16]
 80066a2:	9307      	str	r3, [sp, #28]
 80066a4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80066a8:	931a      	str	r3, [sp, #104]	@ 0x68
 80066aa:	4654      	mov	r4, sl
 80066ac:	2205      	movs	r2, #5
 80066ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80066b2:	4853      	ldr	r0, [pc, #332]	@ (8006800 <_vfiprintf_r+0x21c>)
 80066b4:	f7fe f9b7 	bl	8004a26 <memchr>
 80066b8:	9a04      	ldr	r2, [sp, #16]
 80066ba:	b9d8      	cbnz	r0, 80066f4 <_vfiprintf_r+0x110>
 80066bc:	06d1      	lsls	r1, r2, #27
 80066be:	bf44      	itt	mi
 80066c0:	2320      	movmi	r3, #32
 80066c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80066c6:	0713      	lsls	r3, r2, #28
 80066c8:	bf44      	itt	mi
 80066ca:	232b      	movmi	r3, #43	@ 0x2b
 80066cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80066d0:	f89a 3000 	ldrb.w	r3, [sl]
 80066d4:	2b2a      	cmp	r3, #42	@ 0x2a
 80066d6:	d015      	beq.n	8006704 <_vfiprintf_r+0x120>
 80066d8:	4654      	mov	r4, sl
 80066da:	2000      	movs	r0, #0
 80066dc:	f04f 0c0a 	mov.w	ip, #10
 80066e0:	9a07      	ldr	r2, [sp, #28]
 80066e2:	4621      	mov	r1, r4
 80066e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80066e8:	3b30      	subs	r3, #48	@ 0x30
 80066ea:	2b09      	cmp	r3, #9
 80066ec:	d94b      	bls.n	8006786 <_vfiprintf_r+0x1a2>
 80066ee:	b1b0      	cbz	r0, 800671e <_vfiprintf_r+0x13a>
 80066f0:	9207      	str	r2, [sp, #28]
 80066f2:	e014      	b.n	800671e <_vfiprintf_r+0x13a>
 80066f4:	eba0 0308 	sub.w	r3, r0, r8
 80066f8:	fa09 f303 	lsl.w	r3, r9, r3
 80066fc:	4313      	orrs	r3, r2
 80066fe:	46a2      	mov	sl, r4
 8006700:	9304      	str	r3, [sp, #16]
 8006702:	e7d2      	b.n	80066aa <_vfiprintf_r+0xc6>
 8006704:	9b03      	ldr	r3, [sp, #12]
 8006706:	1d19      	adds	r1, r3, #4
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	9103      	str	r1, [sp, #12]
 800670c:	2b00      	cmp	r3, #0
 800670e:	bfbb      	ittet	lt
 8006710:	425b      	neglt	r3, r3
 8006712:	f042 0202 	orrlt.w	r2, r2, #2
 8006716:	9307      	strge	r3, [sp, #28]
 8006718:	9307      	strlt	r3, [sp, #28]
 800671a:	bfb8      	it	lt
 800671c:	9204      	strlt	r2, [sp, #16]
 800671e:	7823      	ldrb	r3, [r4, #0]
 8006720:	2b2e      	cmp	r3, #46	@ 0x2e
 8006722:	d10a      	bne.n	800673a <_vfiprintf_r+0x156>
 8006724:	7863      	ldrb	r3, [r4, #1]
 8006726:	2b2a      	cmp	r3, #42	@ 0x2a
 8006728:	d132      	bne.n	8006790 <_vfiprintf_r+0x1ac>
 800672a:	9b03      	ldr	r3, [sp, #12]
 800672c:	3402      	adds	r4, #2
 800672e:	1d1a      	adds	r2, r3, #4
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	9203      	str	r2, [sp, #12]
 8006734:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006738:	9305      	str	r3, [sp, #20]
 800673a:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8006804 <_vfiprintf_r+0x220>
 800673e:	2203      	movs	r2, #3
 8006740:	4650      	mov	r0, sl
 8006742:	7821      	ldrb	r1, [r4, #0]
 8006744:	f7fe f96f 	bl	8004a26 <memchr>
 8006748:	b138      	cbz	r0, 800675a <_vfiprintf_r+0x176>
 800674a:	2240      	movs	r2, #64	@ 0x40
 800674c:	9b04      	ldr	r3, [sp, #16]
 800674e:	eba0 000a 	sub.w	r0, r0, sl
 8006752:	4082      	lsls	r2, r0
 8006754:	4313      	orrs	r3, r2
 8006756:	3401      	adds	r4, #1
 8006758:	9304      	str	r3, [sp, #16]
 800675a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800675e:	2206      	movs	r2, #6
 8006760:	4829      	ldr	r0, [pc, #164]	@ (8006808 <_vfiprintf_r+0x224>)
 8006762:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006766:	f7fe f95e 	bl	8004a26 <memchr>
 800676a:	2800      	cmp	r0, #0
 800676c:	d03f      	beq.n	80067ee <_vfiprintf_r+0x20a>
 800676e:	4b27      	ldr	r3, [pc, #156]	@ (800680c <_vfiprintf_r+0x228>)
 8006770:	bb1b      	cbnz	r3, 80067ba <_vfiprintf_r+0x1d6>
 8006772:	9b03      	ldr	r3, [sp, #12]
 8006774:	3307      	adds	r3, #7
 8006776:	f023 0307 	bic.w	r3, r3, #7
 800677a:	3308      	adds	r3, #8
 800677c:	9303      	str	r3, [sp, #12]
 800677e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006780:	443b      	add	r3, r7
 8006782:	9309      	str	r3, [sp, #36]	@ 0x24
 8006784:	e76a      	b.n	800665c <_vfiprintf_r+0x78>
 8006786:	460c      	mov	r4, r1
 8006788:	2001      	movs	r0, #1
 800678a:	fb0c 3202 	mla	r2, ip, r2, r3
 800678e:	e7a8      	b.n	80066e2 <_vfiprintf_r+0xfe>
 8006790:	2300      	movs	r3, #0
 8006792:	f04f 0c0a 	mov.w	ip, #10
 8006796:	4619      	mov	r1, r3
 8006798:	3401      	adds	r4, #1
 800679a:	9305      	str	r3, [sp, #20]
 800679c:	4620      	mov	r0, r4
 800679e:	f810 2b01 	ldrb.w	r2, [r0], #1
 80067a2:	3a30      	subs	r2, #48	@ 0x30
 80067a4:	2a09      	cmp	r2, #9
 80067a6:	d903      	bls.n	80067b0 <_vfiprintf_r+0x1cc>
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d0c6      	beq.n	800673a <_vfiprintf_r+0x156>
 80067ac:	9105      	str	r1, [sp, #20]
 80067ae:	e7c4      	b.n	800673a <_vfiprintf_r+0x156>
 80067b0:	4604      	mov	r4, r0
 80067b2:	2301      	movs	r3, #1
 80067b4:	fb0c 2101 	mla	r1, ip, r1, r2
 80067b8:	e7f0      	b.n	800679c <_vfiprintf_r+0x1b8>
 80067ba:	ab03      	add	r3, sp, #12
 80067bc:	9300      	str	r3, [sp, #0]
 80067be:	462a      	mov	r2, r5
 80067c0:	4630      	mov	r0, r6
 80067c2:	4b13      	ldr	r3, [pc, #76]	@ (8006810 <_vfiprintf_r+0x22c>)
 80067c4:	a904      	add	r1, sp, #16
 80067c6:	f7fd fbcb 	bl	8003f60 <_printf_float>
 80067ca:	4607      	mov	r7, r0
 80067cc:	1c78      	adds	r0, r7, #1
 80067ce:	d1d6      	bne.n	800677e <_vfiprintf_r+0x19a>
 80067d0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80067d2:	07d9      	lsls	r1, r3, #31
 80067d4:	d405      	bmi.n	80067e2 <_vfiprintf_r+0x1fe>
 80067d6:	89ab      	ldrh	r3, [r5, #12]
 80067d8:	059a      	lsls	r2, r3, #22
 80067da:	d402      	bmi.n	80067e2 <_vfiprintf_r+0x1fe>
 80067dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80067de:	f7fe f921 	bl	8004a24 <__retarget_lock_release_recursive>
 80067e2:	89ab      	ldrh	r3, [r5, #12]
 80067e4:	065b      	lsls	r3, r3, #25
 80067e6:	f53f af1f 	bmi.w	8006628 <_vfiprintf_r+0x44>
 80067ea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80067ec:	e71e      	b.n	800662c <_vfiprintf_r+0x48>
 80067ee:	ab03      	add	r3, sp, #12
 80067f0:	9300      	str	r3, [sp, #0]
 80067f2:	462a      	mov	r2, r5
 80067f4:	4630      	mov	r0, r6
 80067f6:	4b06      	ldr	r3, [pc, #24]	@ (8006810 <_vfiprintf_r+0x22c>)
 80067f8:	a904      	add	r1, sp, #16
 80067fa:	f7fd fe4f 	bl	800449c <_printf_i>
 80067fe:	e7e4      	b.n	80067ca <_vfiprintf_r+0x1e6>
 8006800:	08006d60 	.word	0x08006d60
 8006804:	08006d66 	.word	0x08006d66
 8006808:	08006d6a 	.word	0x08006d6a
 800680c:	08003f61 	.word	0x08003f61
 8006810:	080065c1 	.word	0x080065c1

08006814 <__swbuf_r>:
 8006814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006816:	460e      	mov	r6, r1
 8006818:	4614      	mov	r4, r2
 800681a:	4605      	mov	r5, r0
 800681c:	b118      	cbz	r0, 8006826 <__swbuf_r+0x12>
 800681e:	6a03      	ldr	r3, [r0, #32]
 8006820:	b90b      	cbnz	r3, 8006826 <__swbuf_r+0x12>
 8006822:	f7fd ffe7 	bl	80047f4 <__sinit>
 8006826:	69a3      	ldr	r3, [r4, #24]
 8006828:	60a3      	str	r3, [r4, #8]
 800682a:	89a3      	ldrh	r3, [r4, #12]
 800682c:	071a      	lsls	r2, r3, #28
 800682e:	d501      	bpl.n	8006834 <__swbuf_r+0x20>
 8006830:	6923      	ldr	r3, [r4, #16]
 8006832:	b943      	cbnz	r3, 8006846 <__swbuf_r+0x32>
 8006834:	4621      	mov	r1, r4
 8006836:	4628      	mov	r0, r5
 8006838:	f000 f82a 	bl	8006890 <__swsetup_r>
 800683c:	b118      	cbz	r0, 8006846 <__swbuf_r+0x32>
 800683e:	f04f 37ff 	mov.w	r7, #4294967295
 8006842:	4638      	mov	r0, r7
 8006844:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006846:	6823      	ldr	r3, [r4, #0]
 8006848:	6922      	ldr	r2, [r4, #16]
 800684a:	b2f6      	uxtb	r6, r6
 800684c:	1a98      	subs	r0, r3, r2
 800684e:	6963      	ldr	r3, [r4, #20]
 8006850:	4637      	mov	r7, r6
 8006852:	4283      	cmp	r3, r0
 8006854:	dc05      	bgt.n	8006862 <__swbuf_r+0x4e>
 8006856:	4621      	mov	r1, r4
 8006858:	4628      	mov	r0, r5
 800685a:	f7ff fd9b 	bl	8006394 <_fflush_r>
 800685e:	2800      	cmp	r0, #0
 8006860:	d1ed      	bne.n	800683e <__swbuf_r+0x2a>
 8006862:	68a3      	ldr	r3, [r4, #8]
 8006864:	3b01      	subs	r3, #1
 8006866:	60a3      	str	r3, [r4, #8]
 8006868:	6823      	ldr	r3, [r4, #0]
 800686a:	1c5a      	adds	r2, r3, #1
 800686c:	6022      	str	r2, [r4, #0]
 800686e:	701e      	strb	r6, [r3, #0]
 8006870:	6962      	ldr	r2, [r4, #20]
 8006872:	1c43      	adds	r3, r0, #1
 8006874:	429a      	cmp	r2, r3
 8006876:	d004      	beq.n	8006882 <__swbuf_r+0x6e>
 8006878:	89a3      	ldrh	r3, [r4, #12]
 800687a:	07db      	lsls	r3, r3, #31
 800687c:	d5e1      	bpl.n	8006842 <__swbuf_r+0x2e>
 800687e:	2e0a      	cmp	r6, #10
 8006880:	d1df      	bne.n	8006842 <__swbuf_r+0x2e>
 8006882:	4621      	mov	r1, r4
 8006884:	4628      	mov	r0, r5
 8006886:	f7ff fd85 	bl	8006394 <_fflush_r>
 800688a:	2800      	cmp	r0, #0
 800688c:	d0d9      	beq.n	8006842 <__swbuf_r+0x2e>
 800688e:	e7d6      	b.n	800683e <__swbuf_r+0x2a>

08006890 <__swsetup_r>:
 8006890:	b538      	push	{r3, r4, r5, lr}
 8006892:	4b29      	ldr	r3, [pc, #164]	@ (8006938 <__swsetup_r+0xa8>)
 8006894:	4605      	mov	r5, r0
 8006896:	6818      	ldr	r0, [r3, #0]
 8006898:	460c      	mov	r4, r1
 800689a:	b118      	cbz	r0, 80068a4 <__swsetup_r+0x14>
 800689c:	6a03      	ldr	r3, [r0, #32]
 800689e:	b90b      	cbnz	r3, 80068a4 <__swsetup_r+0x14>
 80068a0:	f7fd ffa8 	bl	80047f4 <__sinit>
 80068a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80068a8:	0719      	lsls	r1, r3, #28
 80068aa:	d422      	bmi.n	80068f2 <__swsetup_r+0x62>
 80068ac:	06da      	lsls	r2, r3, #27
 80068ae:	d407      	bmi.n	80068c0 <__swsetup_r+0x30>
 80068b0:	2209      	movs	r2, #9
 80068b2:	602a      	str	r2, [r5, #0]
 80068b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80068b8:	f04f 30ff 	mov.w	r0, #4294967295
 80068bc:	81a3      	strh	r3, [r4, #12]
 80068be:	e033      	b.n	8006928 <__swsetup_r+0x98>
 80068c0:	0758      	lsls	r0, r3, #29
 80068c2:	d512      	bpl.n	80068ea <__swsetup_r+0x5a>
 80068c4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80068c6:	b141      	cbz	r1, 80068da <__swsetup_r+0x4a>
 80068c8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80068cc:	4299      	cmp	r1, r3
 80068ce:	d002      	beq.n	80068d6 <__swsetup_r+0x46>
 80068d0:	4628      	mov	r0, r5
 80068d2:	f7fe ff09 	bl	80056e8 <_free_r>
 80068d6:	2300      	movs	r3, #0
 80068d8:	6363      	str	r3, [r4, #52]	@ 0x34
 80068da:	89a3      	ldrh	r3, [r4, #12]
 80068dc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80068e0:	81a3      	strh	r3, [r4, #12]
 80068e2:	2300      	movs	r3, #0
 80068e4:	6063      	str	r3, [r4, #4]
 80068e6:	6923      	ldr	r3, [r4, #16]
 80068e8:	6023      	str	r3, [r4, #0]
 80068ea:	89a3      	ldrh	r3, [r4, #12]
 80068ec:	f043 0308 	orr.w	r3, r3, #8
 80068f0:	81a3      	strh	r3, [r4, #12]
 80068f2:	6923      	ldr	r3, [r4, #16]
 80068f4:	b94b      	cbnz	r3, 800690a <__swsetup_r+0x7a>
 80068f6:	89a3      	ldrh	r3, [r4, #12]
 80068f8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80068fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006900:	d003      	beq.n	800690a <__swsetup_r+0x7a>
 8006902:	4621      	mov	r1, r4
 8006904:	4628      	mov	r0, r5
 8006906:	f000 f882 	bl	8006a0e <__smakebuf_r>
 800690a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800690e:	f013 0201 	ands.w	r2, r3, #1
 8006912:	d00a      	beq.n	800692a <__swsetup_r+0x9a>
 8006914:	2200      	movs	r2, #0
 8006916:	60a2      	str	r2, [r4, #8]
 8006918:	6962      	ldr	r2, [r4, #20]
 800691a:	4252      	negs	r2, r2
 800691c:	61a2      	str	r2, [r4, #24]
 800691e:	6922      	ldr	r2, [r4, #16]
 8006920:	b942      	cbnz	r2, 8006934 <__swsetup_r+0xa4>
 8006922:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006926:	d1c5      	bne.n	80068b4 <__swsetup_r+0x24>
 8006928:	bd38      	pop	{r3, r4, r5, pc}
 800692a:	0799      	lsls	r1, r3, #30
 800692c:	bf58      	it	pl
 800692e:	6962      	ldrpl	r2, [r4, #20]
 8006930:	60a2      	str	r2, [r4, #8]
 8006932:	e7f4      	b.n	800691e <__swsetup_r+0x8e>
 8006934:	2000      	movs	r0, #0
 8006936:	e7f7      	b.n	8006928 <__swsetup_r+0x98>
 8006938:	20000018 	.word	0x20000018

0800693c <_raise_r>:
 800693c:	291f      	cmp	r1, #31
 800693e:	b538      	push	{r3, r4, r5, lr}
 8006940:	4605      	mov	r5, r0
 8006942:	460c      	mov	r4, r1
 8006944:	d904      	bls.n	8006950 <_raise_r+0x14>
 8006946:	2316      	movs	r3, #22
 8006948:	6003      	str	r3, [r0, #0]
 800694a:	f04f 30ff 	mov.w	r0, #4294967295
 800694e:	bd38      	pop	{r3, r4, r5, pc}
 8006950:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8006952:	b112      	cbz	r2, 800695a <_raise_r+0x1e>
 8006954:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006958:	b94b      	cbnz	r3, 800696e <_raise_r+0x32>
 800695a:	4628      	mov	r0, r5
 800695c:	f000 f830 	bl	80069c0 <_getpid_r>
 8006960:	4622      	mov	r2, r4
 8006962:	4601      	mov	r1, r0
 8006964:	4628      	mov	r0, r5
 8006966:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800696a:	f000 b817 	b.w	800699c <_kill_r>
 800696e:	2b01      	cmp	r3, #1
 8006970:	d00a      	beq.n	8006988 <_raise_r+0x4c>
 8006972:	1c59      	adds	r1, r3, #1
 8006974:	d103      	bne.n	800697e <_raise_r+0x42>
 8006976:	2316      	movs	r3, #22
 8006978:	6003      	str	r3, [r0, #0]
 800697a:	2001      	movs	r0, #1
 800697c:	e7e7      	b.n	800694e <_raise_r+0x12>
 800697e:	2100      	movs	r1, #0
 8006980:	4620      	mov	r0, r4
 8006982:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8006986:	4798      	blx	r3
 8006988:	2000      	movs	r0, #0
 800698a:	e7e0      	b.n	800694e <_raise_r+0x12>

0800698c <raise>:
 800698c:	4b02      	ldr	r3, [pc, #8]	@ (8006998 <raise+0xc>)
 800698e:	4601      	mov	r1, r0
 8006990:	6818      	ldr	r0, [r3, #0]
 8006992:	f7ff bfd3 	b.w	800693c <_raise_r>
 8006996:	bf00      	nop
 8006998:	20000018 	.word	0x20000018

0800699c <_kill_r>:
 800699c:	b538      	push	{r3, r4, r5, lr}
 800699e:	2300      	movs	r3, #0
 80069a0:	4d06      	ldr	r5, [pc, #24]	@ (80069bc <_kill_r+0x20>)
 80069a2:	4604      	mov	r4, r0
 80069a4:	4608      	mov	r0, r1
 80069a6:	4611      	mov	r1, r2
 80069a8:	602b      	str	r3, [r5, #0]
 80069aa:	f7fa fe58 	bl	800165e <_kill>
 80069ae:	1c43      	adds	r3, r0, #1
 80069b0:	d102      	bne.n	80069b8 <_kill_r+0x1c>
 80069b2:	682b      	ldr	r3, [r5, #0]
 80069b4:	b103      	cbz	r3, 80069b8 <_kill_r+0x1c>
 80069b6:	6023      	str	r3, [r4, #0]
 80069b8:	bd38      	pop	{r3, r4, r5, pc}
 80069ba:	bf00      	nop
 80069bc:	2000040c 	.word	0x2000040c

080069c0 <_getpid_r>:
 80069c0:	f7fa be46 	b.w	8001650 <_getpid>

080069c4 <__swhatbuf_r>:
 80069c4:	b570      	push	{r4, r5, r6, lr}
 80069c6:	460c      	mov	r4, r1
 80069c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80069cc:	4615      	mov	r5, r2
 80069ce:	2900      	cmp	r1, #0
 80069d0:	461e      	mov	r6, r3
 80069d2:	b096      	sub	sp, #88	@ 0x58
 80069d4:	da0c      	bge.n	80069f0 <__swhatbuf_r+0x2c>
 80069d6:	89a3      	ldrh	r3, [r4, #12]
 80069d8:	2100      	movs	r1, #0
 80069da:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80069de:	bf14      	ite	ne
 80069e0:	2340      	movne	r3, #64	@ 0x40
 80069e2:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80069e6:	2000      	movs	r0, #0
 80069e8:	6031      	str	r1, [r6, #0]
 80069ea:	602b      	str	r3, [r5, #0]
 80069ec:	b016      	add	sp, #88	@ 0x58
 80069ee:	bd70      	pop	{r4, r5, r6, pc}
 80069f0:	466a      	mov	r2, sp
 80069f2:	f000 f849 	bl	8006a88 <_fstat_r>
 80069f6:	2800      	cmp	r0, #0
 80069f8:	dbed      	blt.n	80069d6 <__swhatbuf_r+0x12>
 80069fa:	9901      	ldr	r1, [sp, #4]
 80069fc:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006a00:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006a04:	4259      	negs	r1, r3
 8006a06:	4159      	adcs	r1, r3
 8006a08:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006a0c:	e7eb      	b.n	80069e6 <__swhatbuf_r+0x22>

08006a0e <__smakebuf_r>:
 8006a0e:	898b      	ldrh	r3, [r1, #12]
 8006a10:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006a12:	079d      	lsls	r5, r3, #30
 8006a14:	4606      	mov	r6, r0
 8006a16:	460c      	mov	r4, r1
 8006a18:	d507      	bpl.n	8006a2a <__smakebuf_r+0x1c>
 8006a1a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006a1e:	6023      	str	r3, [r4, #0]
 8006a20:	6123      	str	r3, [r4, #16]
 8006a22:	2301      	movs	r3, #1
 8006a24:	6163      	str	r3, [r4, #20]
 8006a26:	b003      	add	sp, #12
 8006a28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a2a:	466a      	mov	r2, sp
 8006a2c:	ab01      	add	r3, sp, #4
 8006a2e:	f7ff ffc9 	bl	80069c4 <__swhatbuf_r>
 8006a32:	9f00      	ldr	r7, [sp, #0]
 8006a34:	4605      	mov	r5, r0
 8006a36:	4639      	mov	r1, r7
 8006a38:	4630      	mov	r0, r6
 8006a3a:	f7fe fec7 	bl	80057cc <_malloc_r>
 8006a3e:	b948      	cbnz	r0, 8006a54 <__smakebuf_r+0x46>
 8006a40:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a44:	059a      	lsls	r2, r3, #22
 8006a46:	d4ee      	bmi.n	8006a26 <__smakebuf_r+0x18>
 8006a48:	f023 0303 	bic.w	r3, r3, #3
 8006a4c:	f043 0302 	orr.w	r3, r3, #2
 8006a50:	81a3      	strh	r3, [r4, #12]
 8006a52:	e7e2      	b.n	8006a1a <__smakebuf_r+0xc>
 8006a54:	89a3      	ldrh	r3, [r4, #12]
 8006a56:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006a5a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a5e:	81a3      	strh	r3, [r4, #12]
 8006a60:	9b01      	ldr	r3, [sp, #4]
 8006a62:	6020      	str	r0, [r4, #0]
 8006a64:	b15b      	cbz	r3, 8006a7e <__smakebuf_r+0x70>
 8006a66:	4630      	mov	r0, r6
 8006a68:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006a6c:	f000 f81e 	bl	8006aac <_isatty_r>
 8006a70:	b128      	cbz	r0, 8006a7e <__smakebuf_r+0x70>
 8006a72:	89a3      	ldrh	r3, [r4, #12]
 8006a74:	f023 0303 	bic.w	r3, r3, #3
 8006a78:	f043 0301 	orr.w	r3, r3, #1
 8006a7c:	81a3      	strh	r3, [r4, #12]
 8006a7e:	89a3      	ldrh	r3, [r4, #12]
 8006a80:	431d      	orrs	r5, r3
 8006a82:	81a5      	strh	r5, [r4, #12]
 8006a84:	e7cf      	b.n	8006a26 <__smakebuf_r+0x18>
	...

08006a88 <_fstat_r>:
 8006a88:	b538      	push	{r3, r4, r5, lr}
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	4d06      	ldr	r5, [pc, #24]	@ (8006aa8 <_fstat_r+0x20>)
 8006a8e:	4604      	mov	r4, r0
 8006a90:	4608      	mov	r0, r1
 8006a92:	4611      	mov	r1, r2
 8006a94:	602b      	str	r3, [r5, #0]
 8006a96:	f7fa fe41 	bl	800171c <_fstat>
 8006a9a:	1c43      	adds	r3, r0, #1
 8006a9c:	d102      	bne.n	8006aa4 <_fstat_r+0x1c>
 8006a9e:	682b      	ldr	r3, [r5, #0]
 8006aa0:	b103      	cbz	r3, 8006aa4 <_fstat_r+0x1c>
 8006aa2:	6023      	str	r3, [r4, #0]
 8006aa4:	bd38      	pop	{r3, r4, r5, pc}
 8006aa6:	bf00      	nop
 8006aa8:	2000040c 	.word	0x2000040c

08006aac <_isatty_r>:
 8006aac:	b538      	push	{r3, r4, r5, lr}
 8006aae:	2300      	movs	r3, #0
 8006ab0:	4d05      	ldr	r5, [pc, #20]	@ (8006ac8 <_isatty_r+0x1c>)
 8006ab2:	4604      	mov	r4, r0
 8006ab4:	4608      	mov	r0, r1
 8006ab6:	602b      	str	r3, [r5, #0]
 8006ab8:	f7fa fe3f 	bl	800173a <_isatty>
 8006abc:	1c43      	adds	r3, r0, #1
 8006abe:	d102      	bne.n	8006ac6 <_isatty_r+0x1a>
 8006ac0:	682b      	ldr	r3, [r5, #0]
 8006ac2:	b103      	cbz	r3, 8006ac6 <_isatty_r+0x1a>
 8006ac4:	6023      	str	r3, [r4, #0]
 8006ac6:	bd38      	pop	{r3, r4, r5, pc}
 8006ac8:	2000040c 	.word	0x2000040c

08006acc <_init>:
 8006acc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ace:	bf00      	nop
 8006ad0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ad2:	bc08      	pop	{r3}
 8006ad4:	469e      	mov	lr, r3
 8006ad6:	4770      	bx	lr

08006ad8 <_fini>:
 8006ad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ada:	bf00      	nop
 8006adc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ade:	bc08      	pop	{r3}
 8006ae0:	469e      	mov	lr, r3
 8006ae2:	4770      	bx	lr
