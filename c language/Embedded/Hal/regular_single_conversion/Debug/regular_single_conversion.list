
regular_single_conversion.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000565c  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003b0  08005770  08005770  00006770  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005b20  08005b20  000071d4  2**0
                  CONTENTS
  4 .ARM          00000008  08005b20  08005b20  00006b20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005b28  08005b28  000071d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005b28  08005b28  00006b28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005b2c  08005b2c  00006b2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08005b30  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a0  200001d4  08005d04  000071d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000374  08005d04  00007374  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000071d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004cb0  00000000  00000000  000071fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000152a  00000000  00000000  0000bead  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000005d0  00000000  00000000  0000d3d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000434  00000000  00000000  0000d9a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017beb  00000000  00000000  0000dddc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007546  00000000  00000000  000259c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000865fa  00000000  00000000  0002cf0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b3507  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002658  00000000  00000000  000b354c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  000b5ba4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d4 	.word	0x200001d4
 800012c:	00000000 	.word	0x00000000
 8000130:	08005754 	.word	0x08005754

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001d8 	.word	0x200001d8
 800014c:	08005754 	.word	0x08005754

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_frsub>:
 8000a88:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000a8c:	e002      	b.n	8000a94 <__addsf3>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_fsub>:
 8000a90:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000a94 <__addsf3>:
 8000a94:	0042      	lsls	r2, r0, #1
 8000a96:	bf1f      	itttt	ne
 8000a98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a9c:	ea92 0f03 	teqne	r2, r3
 8000aa0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa8:	d06a      	beq.n	8000b80 <__addsf3+0xec>
 8000aaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab2:	bfc1      	itttt	gt
 8000ab4:	18d2      	addgt	r2, r2, r3
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	4048      	eorgt	r0, r1
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	bfb8      	it	lt
 8000abe:	425b      	neglt	r3, r3
 8000ac0:	2b19      	cmp	r3, #25
 8000ac2:	bf88      	it	hi
 8000ac4:	4770      	bxhi	lr
 8000ac6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ace:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000ada:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000ade:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000ae2:	bf18      	it	ne
 8000ae4:	4249      	negne	r1, r1
 8000ae6:	ea92 0f03 	teq	r2, r3
 8000aea:	d03f      	beq.n	8000b6c <__addsf3+0xd8>
 8000aec:	f1a2 0201 	sub.w	r2, r2, #1
 8000af0:	fa41 fc03 	asr.w	ip, r1, r3
 8000af4:	eb10 000c 	adds.w	r0, r0, ip
 8000af8:	f1c3 0320 	rsb	r3, r3, #32
 8000afc:	fa01 f103 	lsl.w	r1, r1, r3
 8000b00:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b04:	d502      	bpl.n	8000b0c <__addsf3+0x78>
 8000b06:	4249      	negs	r1, r1
 8000b08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b0c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000b10:	d313      	bcc.n	8000b3a <__addsf3+0xa6>
 8000b12:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000b16:	d306      	bcc.n	8000b26 <__addsf3+0x92>
 8000b18:	0840      	lsrs	r0, r0, #1
 8000b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1e:	f102 0201 	add.w	r2, r2, #1
 8000b22:	2afe      	cmp	r2, #254	@ 0xfe
 8000b24:	d251      	bcs.n	8000bca <__addsf3+0x136>
 8000b26:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000b2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2e:	bf08      	it	eq
 8000b30:	f020 0001 	biceq.w	r0, r0, #1
 8000b34:	ea40 0003 	orr.w	r0, r0, r3
 8000b38:	4770      	bx	lr
 8000b3a:	0049      	lsls	r1, r1, #1
 8000b3c:	eb40 0000 	adc.w	r0, r0, r0
 8000b40:	3a01      	subs	r2, #1
 8000b42:	bf28      	it	cs
 8000b44:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000b48:	d2ed      	bcs.n	8000b26 <__addsf3+0x92>
 8000b4a:	fab0 fc80 	clz	ip, r0
 8000b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b52:	ebb2 020c 	subs.w	r2, r2, ip
 8000b56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5a:	bfaa      	itet	ge
 8000b5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b60:	4252      	neglt	r2, r2
 8000b62:	4318      	orrge	r0, r3
 8000b64:	bfbc      	itt	lt
 8000b66:	40d0      	lsrlt	r0, r2
 8000b68:	4318      	orrlt	r0, r3
 8000b6a:	4770      	bx	lr
 8000b6c:	f092 0f00 	teq	r2, #0
 8000b70:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000b74:	bf06      	itte	eq
 8000b76:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000b7a:	3201      	addeq	r2, #1
 8000b7c:	3b01      	subne	r3, #1
 8000b7e:	e7b5      	b.n	8000aec <__addsf3+0x58>
 8000b80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	bf18      	it	ne
 8000b8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8e:	d021      	beq.n	8000bd4 <__addsf3+0x140>
 8000b90:	ea92 0f03 	teq	r2, r3
 8000b94:	d004      	beq.n	8000ba0 <__addsf3+0x10c>
 8000b96:	f092 0f00 	teq	r2, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	4608      	moveq	r0, r1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea90 0f01 	teq	r0, r1
 8000ba4:	bf1c      	itt	ne
 8000ba6:	2000      	movne	r0, #0
 8000ba8:	4770      	bxne	lr
 8000baa:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000bae:	d104      	bne.n	8000bba <__addsf3+0x126>
 8000bb0:	0040      	lsls	r0, r0, #1
 8000bb2:	bf28      	it	cs
 8000bb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000bbe:	bf3c      	itt	cc
 8000bc0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000bc4:	4770      	bxcc	lr
 8000bc6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000bca:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000bce:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bd2:	4770      	bx	lr
 8000bd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd8:	bf16      	itet	ne
 8000bda:	4608      	movne	r0, r1
 8000bdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be0:	4601      	movne	r1, r0
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	bf06      	itte	eq
 8000be6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bea:	ea90 0f01 	teqeq	r0, r1
 8000bee:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_ui2f>:
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e004      	b.n	8000c04 <__aeabi_i2f+0x8>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_i2f>:
 8000bfc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000c00:	bf48      	it	mi
 8000c02:	4240      	negmi	r0, r0
 8000c04:	ea5f 0c00 	movs.w	ip, r0
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000c10:	4601      	mov	r1, r0
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	e01c      	b.n	8000c52 <__aeabi_l2f+0x2a>

08000c18 <__aeabi_ul2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e00a      	b.n	8000c3c <__aeabi_l2f+0x14>
 8000c26:	bf00      	nop

08000c28 <__aeabi_l2f>:
 8000c28:	ea50 0201 	orrs.w	r2, r0, r1
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__aeabi_l2f+0x14>
 8000c36:	4240      	negs	r0, r0
 8000c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3c:	ea5f 0c01 	movs.w	ip, r1
 8000c40:	bf02      	ittt	eq
 8000c42:	4684      	moveq	ip, r0
 8000c44:	4601      	moveq	r1, r0
 8000c46:	2000      	moveq	r0, #0
 8000c48:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000c4c:	bf08      	it	eq
 8000c4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000c52:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000c56:	fabc f28c 	clz	r2, ip
 8000c5a:	3a08      	subs	r2, #8
 8000c5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c60:	db10      	blt.n	8000c84 <__aeabi_l2f+0x5c>
 8000c62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c66:	4463      	add	r3, ip
 8000c68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	f020 0001 	biceq.w	r0, r0, #1
 8000c82:	4770      	bx	lr
 8000c84:	f102 0220 	add.w	r2, r2, #32
 8000c88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c94:	fa21 f202 	lsr.w	r2, r1, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca2:	4770      	bx	lr

08000ca4 <__aeabi_fmul>:
 8000ca4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ca8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cac:	bf1e      	ittt	ne
 8000cae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cb2:	ea92 0f0c 	teqne	r2, ip
 8000cb6:	ea93 0f0c 	teqne	r3, ip
 8000cba:	d06f      	beq.n	8000d9c <__aeabi_fmul+0xf8>
 8000cbc:	441a      	add	r2, r3
 8000cbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000cc2:	0240      	lsls	r0, r0, #9
 8000cc4:	bf18      	it	ne
 8000cc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cca:	d01e      	beq.n	8000d0a <__aeabi_fmul+0x66>
 8000ccc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000cd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000cdc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ce0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000ce4:	bf3e      	ittt	cc
 8000ce6:	0049      	lslcc	r1, r1, #1
 8000ce8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cec:	005b      	lslcc	r3, r3, #1
 8000cee:	ea40 0001 	orr.w	r0, r0, r1
 8000cf2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000cf6:	2afd      	cmp	r2, #253	@ 0xfd
 8000cf8:	d81d      	bhi.n	8000d36 <__aeabi_fmul+0x92>
 8000cfa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000cfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d02:	bf08      	it	eq
 8000d04:	f020 0001 	biceq.w	r0, r0, #1
 8000d08:	4770      	bx	lr
 8000d0a:	f090 0f00 	teq	r0, #0
 8000d0e:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000d12:	bf08      	it	eq
 8000d14:	0249      	lsleq	r1, r1, #9
 8000d16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d1e:	3a7f      	subs	r2, #127	@ 0x7f
 8000d20:	bfc2      	ittt	gt
 8000d22:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000d26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d2a:	4770      	bxgt	lr
 8000d2c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	3a01      	subs	r2, #1
 8000d36:	dc5d      	bgt.n	8000df4 <__aeabi_fmul+0x150>
 8000d38:	f112 0f19 	cmn.w	r2, #25
 8000d3c:	bfdc      	itt	le
 8000d3e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000d42:	4770      	bxle	lr
 8000d44:	f1c2 0200 	rsb	r2, r2, #0
 8000d48:	0041      	lsls	r1, r0, #1
 8000d4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d4e:	f1c2 0220 	rsb	r2, r2, #32
 8000d52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d5a:	f140 0000 	adc.w	r0, r0, #0
 8000d5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d62:	bf08      	it	eq
 8000d64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d68:	4770      	bx	lr
 8000d6a:	f092 0f00 	teq	r2, #0
 8000d6e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000d72:	bf02      	ittt	eq
 8000d74:	0040      	lsleq	r0, r0, #1
 8000d76:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000d7a:	3a01      	subeq	r2, #1
 8000d7c:	d0f9      	beq.n	8000d72 <__aeabi_fmul+0xce>
 8000d7e:	ea40 000c 	orr.w	r0, r0, ip
 8000d82:	f093 0f00 	teq	r3, #0
 8000d86:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000d8a:	bf02      	ittt	eq
 8000d8c:	0049      	lsleq	r1, r1, #1
 8000d8e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000d92:	3b01      	subeq	r3, #1
 8000d94:	d0f9      	beq.n	8000d8a <__aeabi_fmul+0xe6>
 8000d96:	ea41 010c 	orr.w	r1, r1, ip
 8000d9a:	e78f      	b.n	8000cbc <__aeabi_fmul+0x18>
 8000d9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000da0:	ea92 0f0c 	teq	r2, ip
 8000da4:	bf18      	it	ne
 8000da6:	ea93 0f0c 	teqne	r3, ip
 8000daa:	d00a      	beq.n	8000dc2 <__aeabi_fmul+0x11e>
 8000dac:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000db0:	bf18      	it	ne
 8000db2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000db6:	d1d8      	bne.n	8000d6a <__aeabi_fmul+0xc6>
 8000db8:	ea80 0001 	eor.w	r0, r0, r1
 8000dbc:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000dc0:	4770      	bx	lr
 8000dc2:	f090 0f00 	teq	r0, #0
 8000dc6:	bf17      	itett	ne
 8000dc8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000dcc:	4608      	moveq	r0, r1
 8000dce:	f091 0f00 	teqne	r1, #0
 8000dd2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000dd6:	d014      	beq.n	8000e02 <__aeabi_fmul+0x15e>
 8000dd8:	ea92 0f0c 	teq	r2, ip
 8000ddc:	d101      	bne.n	8000de2 <__aeabi_fmul+0x13e>
 8000dde:	0242      	lsls	r2, r0, #9
 8000de0:	d10f      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000de2:	ea93 0f0c 	teq	r3, ip
 8000de6:	d103      	bne.n	8000df0 <__aeabi_fmul+0x14c>
 8000de8:	024b      	lsls	r3, r1, #9
 8000dea:	bf18      	it	ne
 8000dec:	4608      	movne	r0, r1
 8000dee:	d108      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000df0:	ea80 0001 	eor.w	r0, r0, r1
 8000df4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000df8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e00:	4770      	bx	lr
 8000e02:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e06:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000e0a:	4770      	bx	lr

08000e0c <__aeabi_fdiv>:
 8000e0c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000e10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e14:	bf1e      	ittt	ne
 8000e16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e1a:	ea92 0f0c 	teqne	r2, ip
 8000e1e:	ea93 0f0c 	teqne	r3, ip
 8000e22:	d069      	beq.n	8000ef8 <__aeabi_fdiv+0xec>
 8000e24:	eba2 0203 	sub.w	r2, r2, r3
 8000e28:	ea80 0c01 	eor.w	ip, r0, r1
 8000e2c:	0249      	lsls	r1, r1, #9
 8000e2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e32:	d037      	beq.n	8000ea4 <__aeabi_fdiv+0x98>
 8000e34:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000e38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e40:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000e44:	428b      	cmp	r3, r1
 8000e46:	bf38      	it	cc
 8000e48:	005b      	lslcc	r3, r3, #1
 8000e4a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000e4e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000e52:	428b      	cmp	r3, r1
 8000e54:	bf24      	itt	cs
 8000e56:	1a5b      	subcs	r3, r3, r1
 8000e58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e60:	bf24      	itt	cs
 8000e62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e6e:	bf24      	itt	cs
 8000e70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e7c:	bf24      	itt	cs
 8000e7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e86:	011b      	lsls	r3, r3, #4
 8000e88:	bf18      	it	ne
 8000e8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e8e:	d1e0      	bne.n	8000e52 <__aeabi_fdiv+0x46>
 8000e90:	2afd      	cmp	r2, #253	@ 0xfd
 8000e92:	f63f af50 	bhi.w	8000d36 <__aeabi_fmul+0x92>
 8000e96:	428b      	cmp	r3, r1
 8000e98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e9c:	bf08      	it	eq
 8000e9e:	f020 0001 	biceq.w	r0, r0, #1
 8000ea2:	4770      	bx	lr
 8000ea4:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000ea8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eac:	327f      	adds	r2, #127	@ 0x7f
 8000eae:	bfc2      	ittt	gt
 8000eb0:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000eb4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eb8:	4770      	bxgt	lr
 8000eba:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ebe:	f04f 0300 	mov.w	r3, #0
 8000ec2:	3a01      	subs	r2, #1
 8000ec4:	e737      	b.n	8000d36 <__aeabi_fmul+0x92>
 8000ec6:	f092 0f00 	teq	r2, #0
 8000eca:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000ece:	bf02      	ittt	eq
 8000ed0:	0040      	lsleq	r0, r0, #1
 8000ed2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000ed6:	3a01      	subeq	r2, #1
 8000ed8:	d0f9      	beq.n	8000ece <__aeabi_fdiv+0xc2>
 8000eda:	ea40 000c 	orr.w	r0, r0, ip
 8000ede:	f093 0f00 	teq	r3, #0
 8000ee2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ee6:	bf02      	ittt	eq
 8000ee8:	0049      	lsleq	r1, r1, #1
 8000eea:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000eee:	3b01      	subeq	r3, #1
 8000ef0:	d0f9      	beq.n	8000ee6 <__aeabi_fdiv+0xda>
 8000ef2:	ea41 010c 	orr.w	r1, r1, ip
 8000ef6:	e795      	b.n	8000e24 <__aeabi_fdiv+0x18>
 8000ef8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000efc:	ea92 0f0c 	teq	r2, ip
 8000f00:	d108      	bne.n	8000f14 <__aeabi_fdiv+0x108>
 8000f02:	0242      	lsls	r2, r0, #9
 8000f04:	f47f af7d 	bne.w	8000e02 <__aeabi_fmul+0x15e>
 8000f08:	ea93 0f0c 	teq	r3, ip
 8000f0c:	f47f af70 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f10:	4608      	mov	r0, r1
 8000f12:	e776      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f14:	ea93 0f0c 	teq	r3, ip
 8000f18:	d104      	bne.n	8000f24 <__aeabi_fdiv+0x118>
 8000f1a:	024b      	lsls	r3, r1, #9
 8000f1c:	f43f af4c 	beq.w	8000db8 <__aeabi_fmul+0x114>
 8000f20:	4608      	mov	r0, r1
 8000f22:	e76e      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f24:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000f28:	bf18      	it	ne
 8000f2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000f2e:	d1ca      	bne.n	8000ec6 <__aeabi_fdiv+0xba>
 8000f30:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000f34:	f47f af5c 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f38:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000f3c:	f47f af3c 	bne.w	8000db8 <__aeabi_fmul+0x114>
 8000f40:	e75f      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f42:	bf00      	nop

08000f44 <__gesf2>:
 8000f44:	f04f 3cff 	mov.w	ip, #4294967295
 8000f48:	e006      	b.n	8000f58 <__cmpsf2+0x4>
 8000f4a:	bf00      	nop

08000f4c <__lesf2>:
 8000f4c:	f04f 0c01 	mov.w	ip, #1
 8000f50:	e002      	b.n	8000f58 <__cmpsf2+0x4>
 8000f52:	bf00      	nop

08000f54 <__cmpsf2>:
 8000f54:	f04f 0c01 	mov.w	ip, #1
 8000f58:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f5c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000f64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f68:	bf18      	it	ne
 8000f6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000f6e:	d011      	beq.n	8000f94 <__cmpsf2+0x40>
 8000f70:	b001      	add	sp, #4
 8000f72:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000f76:	bf18      	it	ne
 8000f78:	ea90 0f01 	teqne	r0, r1
 8000f7c:	bf58      	it	pl
 8000f7e:	ebb2 0003 	subspl.w	r0, r2, r3
 8000f82:	bf88      	it	hi
 8000f84:	17c8      	asrhi	r0, r1, #31
 8000f86:	bf38      	it	cc
 8000f88:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000f8c:	bf18      	it	ne
 8000f8e:	f040 0001 	orrne.w	r0, r0, #1
 8000f92:	4770      	bx	lr
 8000f94:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f98:	d102      	bne.n	8000fa0 <__cmpsf2+0x4c>
 8000f9a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000f9e:	d105      	bne.n	8000fac <__cmpsf2+0x58>
 8000fa0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000fa4:	d1e4      	bne.n	8000f70 <__cmpsf2+0x1c>
 8000fa6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000faa:	d0e1      	beq.n	8000f70 <__cmpsf2+0x1c>
 8000fac:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop

08000fb4 <__aeabi_cfrcmple>:
 8000fb4:	4684      	mov	ip, r0
 8000fb6:	4608      	mov	r0, r1
 8000fb8:	4661      	mov	r1, ip
 8000fba:	e7ff      	b.n	8000fbc <__aeabi_cfcmpeq>

08000fbc <__aeabi_cfcmpeq>:
 8000fbc:	b50f      	push	{r0, r1, r2, r3, lr}
 8000fbe:	f7ff ffc9 	bl	8000f54 <__cmpsf2>
 8000fc2:	2800      	cmp	r0, #0
 8000fc4:	bf48      	it	mi
 8000fc6:	f110 0f00 	cmnmi.w	r0, #0
 8000fca:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000fcc <__aeabi_fcmpeq>:
 8000fcc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fd0:	f7ff fff4 	bl	8000fbc <__aeabi_cfcmpeq>
 8000fd4:	bf0c      	ite	eq
 8000fd6:	2001      	moveq	r0, #1
 8000fd8:	2000      	movne	r0, #0
 8000fda:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fde:	bf00      	nop

08000fe0 <__aeabi_fcmplt>:
 8000fe0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fe4:	f7ff ffea 	bl	8000fbc <__aeabi_cfcmpeq>
 8000fe8:	bf34      	ite	cc
 8000fea:	2001      	movcc	r0, #1
 8000fec:	2000      	movcs	r0, #0
 8000fee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ff2:	bf00      	nop

08000ff4 <__aeabi_fcmple>:
 8000ff4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ff8:	f7ff ffe0 	bl	8000fbc <__aeabi_cfcmpeq>
 8000ffc:	bf94      	ite	ls
 8000ffe:	2001      	movls	r0, #1
 8001000:	2000      	movhi	r0, #0
 8001002:	f85d fb08 	ldr.w	pc, [sp], #8
 8001006:	bf00      	nop

08001008 <__aeabi_fcmpge>:
 8001008:	f84d ed08 	str.w	lr, [sp, #-8]!
 800100c:	f7ff ffd2 	bl	8000fb4 <__aeabi_cfrcmple>
 8001010:	bf94      	ite	ls
 8001012:	2001      	movls	r0, #1
 8001014:	2000      	movhi	r0, #0
 8001016:	f85d fb08 	ldr.w	pc, [sp], #8
 800101a:	bf00      	nop

0800101c <__aeabi_fcmpgt>:
 800101c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001020:	f7ff ffc8 	bl	8000fb4 <__aeabi_cfrcmple>
 8001024:	bf34      	ite	cc
 8001026:	2001      	movcc	r0, #1
 8001028:	2000      	movcs	r0, #0
 800102a:	f85d fb08 	ldr.w	pc, [sp], #8
 800102e:	bf00      	nop

08001030 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001036:	f000 fa8b 	bl	8001550 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800103a:	f000 f83b 	bl	80010b4 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800103e:	f000 f8c7 	bl	80011d0 <MX_GPIO_Init>
	MX_ADC1_Init();
 8001042:	f000 f887 	bl	8001154 <MX_ADC1_Init>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		HAL_ADC_Start(&hadc1);
 8001046:	4817      	ldr	r0, [pc, #92]	@ (80010a4 <main+0x74>)
 8001048:	f000 fbbc 	bl	80017c4 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 800104c:	f04f 31ff 	mov.w	r1, #4294967295
 8001050:	4814      	ldr	r0, [pc, #80]	@ (80010a4 <main+0x74>)
 8001052:	f000 fc65 	bl	8001920 <HAL_ADC_PollForConversion>
		uint32_t dr = HAL_ADC_GetValue(&hadc1);
 8001056:	4813      	ldr	r0, [pc, #76]	@ (80010a4 <main+0x74>)
 8001058:	f000 fd68 	bl	8001b2c <HAL_ADC_GetValue>
 800105c:	6078      	str	r0, [r7, #4]
		float voltage = dr * (3.3f - 0.0f) / 4095.0f;
 800105e:	6878      	ldr	r0, [r7, #4]
 8001060:	f7ff fdc8 	bl	8000bf4 <__aeabi_ui2f>
 8001064:	4603      	mov	r3, r0
 8001066:	4910      	ldr	r1, [pc, #64]	@ (80010a8 <main+0x78>)
 8001068:	4618      	mov	r0, r3
 800106a:	f7ff fe1b 	bl	8000ca4 <__aeabi_fmul>
 800106e:	4603      	mov	r3, r0
 8001070:	490e      	ldr	r1, [pc, #56]	@ (80010ac <main+0x7c>)
 8001072:	4618      	mov	r0, r3
 8001074:	f7ff feca 	bl	8000e0c <__aeabi_fdiv>
 8001078:	4603      	mov	r3, r0
 800107a:	603b      	str	r3, [r7, #0]
		if (voltage > 1) {
 800107c:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8001080:	6838      	ldr	r0, [r7, #0]
 8001082:	f7ff ffcb 	bl	800101c <__aeabi_fcmpgt>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d005      	beq.n	8001098 <main+0x68>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 800108c:	2200      	movs	r2, #0
 800108e:	2108      	movs	r1, #8
 8001090:	4807      	ldr	r0, [pc, #28]	@ (80010b0 <main+0x80>)
 8001092:	f001 f953 	bl	800233c <HAL_GPIO_WritePin>
 8001096:	e7d6      	b.n	8001046 <main+0x16>
		} else {
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 8001098:	2201      	movs	r2, #1
 800109a:	2108      	movs	r1, #8
 800109c:	4804      	ldr	r0, [pc, #16]	@ (80010b0 <main+0x80>)
 800109e:	f001 f94d 	bl	800233c <HAL_GPIO_WritePin>
	while (1) {
 80010a2:	e7d0      	b.n	8001046 <main+0x16>
 80010a4:	200001f0 	.word	0x200001f0
 80010a8:	40533333 	.word	0x40533333
 80010ac:	457ff000 	.word	0x457ff000
 80010b0:	40010800 	.word	0x40010800

080010b4 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b094      	sub	sp, #80	@ 0x50
 80010b8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80010ba:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80010be:	2228      	movs	r2, #40	@ 0x28
 80010c0:	2100      	movs	r1, #0
 80010c2:	4618      	mov	r0, r3
 80010c4:	f002 fc1b 	bl	80038fe <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80010c8:	f107 0314 	add.w	r3, r7, #20
 80010cc:	2200      	movs	r2, #0
 80010ce:	601a      	str	r2, [r3, #0]
 80010d0:	605a      	str	r2, [r3, #4]
 80010d2:	609a      	str	r2, [r3, #8]
 80010d4:	60da      	str	r2, [r3, #12]
 80010d6:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 80010d8:	1d3b      	adds	r3, r7, #4
 80010da:	2200      	movs	r2, #0
 80010dc:	601a      	str	r2, [r3, #0]
 80010de:	605a      	str	r2, [r3, #4]
 80010e0:	609a      	str	r2, [r3, #8]
 80010e2:	60da      	str	r2, [r3, #12]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010e4:	2302      	movs	r3, #2
 80010e6:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010e8:	2301      	movs	r3, #1
 80010ea:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010ec:	2310      	movs	r3, #16
 80010ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80010f0:	2300      	movs	r3, #0
 80010f2:	647b      	str	r3, [r7, #68]	@ 0x44
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80010f4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80010f8:	4618      	mov	r0, r3
 80010fa:	f001 f937 	bl	800236c <HAL_RCC_OscConfig>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d001      	beq.n	8001108 <SystemClock_Config+0x54>
		Error_Handler();
 8001104:	f000 f896 	bl	8001234 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001108:	230f      	movs	r3, #15
 800110a:	617b      	str	r3, [r7, #20]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800110c:	2300      	movs	r3, #0
 800110e:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001110:	2300      	movs	r3, #0
 8001112:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001114:	2300      	movs	r3, #0
 8001116:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001118:	2300      	movs	r3, #0
 800111a:	627b      	str	r3, [r7, #36]	@ 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 800111c:	f107 0314 	add.w	r3, r7, #20
 8001120:	2100      	movs	r1, #0
 8001122:	4618      	mov	r0, r3
 8001124:	f001 fba4 	bl	8002870 <HAL_RCC_ClockConfig>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <SystemClock_Config+0x7e>
		Error_Handler();
 800112e:	f000 f881 	bl	8001234 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001132:	2302      	movs	r3, #2
 8001134:	607b      	str	r3, [r7, #4]
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8001136:	2300      	movs	r3, #0
 8001138:	60fb      	str	r3, [r7, #12]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 800113a:	1d3b      	adds	r3, r7, #4
 800113c:	4618      	mov	r0, r3
 800113e:	f001 fd11 	bl	8002b64 <HAL_RCCEx_PeriphCLKConfig>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d001      	beq.n	800114c <SystemClock_Config+0x98>
		Error_Handler();
 8001148:	f000 f874 	bl	8001234 <Error_Handler>
	}
}
 800114c:	bf00      	nop
 800114e:	3750      	adds	r7, #80	@ 0x50
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}

08001154 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8001154:	b580      	push	{r7, lr}
 8001156:	b084      	sub	sp, #16
 8001158:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 800115a:	1d3b      	adds	r3, r7, #4
 800115c:	2200      	movs	r2, #0
 800115e:	601a      	str	r2, [r3, #0]
 8001160:	605a      	str	r2, [r3, #4]
 8001162:	609a      	str	r2, [r3, #8]

	/* USER CODE END ADC1_Init 1 */

	/** Common config
	 */
	hadc1.Instance = ADC1;
 8001164:	4b18      	ldr	r3, [pc, #96]	@ (80011c8 <MX_ADC1_Init+0x74>)
 8001166:	4a19      	ldr	r2, [pc, #100]	@ (80011cc <MX_ADC1_Init+0x78>)
 8001168:	601a      	str	r2, [r3, #0]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800116a:	4b17      	ldr	r3, [pc, #92]	@ (80011c8 <MX_ADC1_Init+0x74>)
 800116c:	2200      	movs	r2, #0
 800116e:	609a      	str	r2, [r3, #8]
	hadc1.Init.ContinuousConvMode = DISABLE;
 8001170:	4b15      	ldr	r3, [pc, #84]	@ (80011c8 <MX_ADC1_Init+0x74>)
 8001172:	2200      	movs	r2, #0
 8001174:	731a      	strb	r2, [r3, #12]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001176:	4b14      	ldr	r3, [pc, #80]	@ (80011c8 <MX_ADC1_Init+0x74>)
 8001178:	2200      	movs	r2, #0
 800117a:	751a      	strb	r2, [r3, #20]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800117c:	4b12      	ldr	r3, [pc, #72]	@ (80011c8 <MX_ADC1_Init+0x74>)
 800117e:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8001182:	61da      	str	r2, [r3, #28]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001184:	4b10      	ldr	r3, [pc, #64]	@ (80011c8 <MX_ADC1_Init+0x74>)
 8001186:	2200      	movs	r2, #0
 8001188:	605a      	str	r2, [r3, #4]
	hadc1.Init.NbrOfConversion = 1;
 800118a:	4b0f      	ldr	r3, [pc, #60]	@ (80011c8 <MX_ADC1_Init+0x74>)
 800118c:	2201      	movs	r2, #1
 800118e:	611a      	str	r2, [r3, #16]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8001190:	480d      	ldr	r0, [pc, #52]	@ (80011c8 <MX_ADC1_Init+0x74>)
 8001192:	f000 fa3f 	bl	8001614 <HAL_ADC_Init>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d001      	beq.n	80011a0 <MX_ADC1_Init+0x4c>
		Error_Handler();
 800119c:	f000 f84a 	bl	8001234 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_0;
 80011a0:	2300      	movs	r3, #0
 80011a2:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 80011a4:	2301      	movs	r3, #1
 80011a6:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 80011a8:	2301      	movs	r3, #1
 80011aa:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80011ac:	1d3b      	adds	r3, r7, #4
 80011ae:	4619      	mov	r1, r3
 80011b0:	4805      	ldr	r0, [pc, #20]	@ (80011c8 <MX_ADC1_Init+0x74>)
 80011b2:	f000 fcc7 	bl	8001b44 <HAL_ADC_ConfigChannel>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d001      	beq.n	80011c0 <MX_ADC1_Init+0x6c>
		Error_Handler();
 80011bc:	f000 f83a 	bl	8001234 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 80011c0:	bf00      	nop
 80011c2:	3710      	adds	r7, #16
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	200001f0 	.word	0x200001f0
 80011cc:	40012400 	.word	0x40012400

080011d0 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b086      	sub	sp, #24
 80011d4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80011d6:	f107 0308 	add.w	r3, r7, #8
 80011da:	2200      	movs	r2, #0
 80011dc:	601a      	str	r2, [r3, #0]
 80011de:	605a      	str	r2, [r3, #4]
 80011e0:	609a      	str	r2, [r3, #8]
 80011e2:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80011e4:	4b11      	ldr	r3, [pc, #68]	@ (800122c <MX_GPIO_Init+0x5c>)
 80011e6:	699b      	ldr	r3, [r3, #24]
 80011e8:	4a10      	ldr	r2, [pc, #64]	@ (800122c <MX_GPIO_Init+0x5c>)
 80011ea:	f043 0304 	orr.w	r3, r3, #4
 80011ee:	6193      	str	r3, [r2, #24]
 80011f0:	4b0e      	ldr	r3, [pc, #56]	@ (800122c <MX_GPIO_Init+0x5c>)
 80011f2:	699b      	ldr	r3, [r3, #24]
 80011f4:	f003 0304 	and.w	r3, r3, #4
 80011f8:	607b      	str	r3, [r7, #4]
 80011fa:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 80011fc:	2200      	movs	r2, #0
 80011fe:	2108      	movs	r1, #8
 8001200:	480b      	ldr	r0, [pc, #44]	@ (8001230 <MX_GPIO_Init+0x60>)
 8001202:	f001 f89b 	bl	800233c <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PA3 */
	GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001206:	2308      	movs	r3, #8
 8001208:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800120a:	2301      	movs	r3, #1
 800120c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120e:	2300      	movs	r3, #0
 8001210:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001212:	2302      	movs	r3, #2
 8001214:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001216:	f107 0308 	add.w	r3, r7, #8
 800121a:	4619      	mov	r1, r3
 800121c:	4804      	ldr	r0, [pc, #16]	@ (8001230 <MX_GPIO_Init+0x60>)
 800121e:	f000 ff09 	bl	8002034 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8001222:	bf00      	nop
 8001224:	3718      	adds	r7, #24
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	40021000 	.word	0x40021000
 8001230:	40010800 	.word	0x40010800

08001234 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001238:	b672      	cpsid	i
}
 800123a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800123c:	bf00      	nop
 800123e:	e7fd      	b.n	800123c <Error_Handler+0x8>

08001240 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001240:	b480      	push	{r7}
 8001242:	b085      	sub	sp, #20
 8001244:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001246:	4b15      	ldr	r3, [pc, #84]	@ (800129c <HAL_MspInit+0x5c>)
 8001248:	699b      	ldr	r3, [r3, #24]
 800124a:	4a14      	ldr	r2, [pc, #80]	@ (800129c <HAL_MspInit+0x5c>)
 800124c:	f043 0301 	orr.w	r3, r3, #1
 8001250:	6193      	str	r3, [r2, #24]
 8001252:	4b12      	ldr	r3, [pc, #72]	@ (800129c <HAL_MspInit+0x5c>)
 8001254:	699b      	ldr	r3, [r3, #24]
 8001256:	f003 0301 	and.w	r3, r3, #1
 800125a:	60bb      	str	r3, [r7, #8]
 800125c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800125e:	4b0f      	ldr	r3, [pc, #60]	@ (800129c <HAL_MspInit+0x5c>)
 8001260:	69db      	ldr	r3, [r3, #28]
 8001262:	4a0e      	ldr	r2, [pc, #56]	@ (800129c <HAL_MspInit+0x5c>)
 8001264:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001268:	61d3      	str	r3, [r2, #28]
 800126a:	4b0c      	ldr	r3, [pc, #48]	@ (800129c <HAL_MspInit+0x5c>)
 800126c:	69db      	ldr	r3, [r3, #28]
 800126e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001272:	607b      	str	r3, [r7, #4]
 8001274:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001276:	4b0a      	ldr	r3, [pc, #40]	@ (80012a0 <HAL_MspInit+0x60>)
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	60fb      	str	r3, [r7, #12]
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001282:	60fb      	str	r3, [r7, #12]
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800128a:	60fb      	str	r3, [r7, #12]
 800128c:	4a04      	ldr	r2, [pc, #16]	@ (80012a0 <HAL_MspInit+0x60>)
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001292:	bf00      	nop
 8001294:	3714      	adds	r7, #20
 8001296:	46bd      	mov	sp, r7
 8001298:	bc80      	pop	{r7}
 800129a:	4770      	bx	lr
 800129c:	40021000 	.word	0x40021000
 80012a0:	40010000 	.word	0x40010000

080012a4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b088      	sub	sp, #32
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ac:	f107 0310 	add.w	r3, r7, #16
 80012b0:	2200      	movs	r2, #0
 80012b2:	601a      	str	r2, [r3, #0]
 80012b4:	605a      	str	r2, [r3, #4]
 80012b6:	609a      	str	r2, [r3, #8]
 80012b8:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	4a14      	ldr	r2, [pc, #80]	@ (8001310 <HAL_ADC_MspInit+0x6c>)
 80012c0:	4293      	cmp	r3, r2
 80012c2:	d121      	bne.n	8001308 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80012c4:	4b13      	ldr	r3, [pc, #76]	@ (8001314 <HAL_ADC_MspInit+0x70>)
 80012c6:	699b      	ldr	r3, [r3, #24]
 80012c8:	4a12      	ldr	r2, [pc, #72]	@ (8001314 <HAL_ADC_MspInit+0x70>)
 80012ca:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80012ce:	6193      	str	r3, [r2, #24]
 80012d0:	4b10      	ldr	r3, [pc, #64]	@ (8001314 <HAL_ADC_MspInit+0x70>)
 80012d2:	699b      	ldr	r3, [r3, #24]
 80012d4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80012d8:	60fb      	str	r3, [r7, #12]
 80012da:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012dc:	4b0d      	ldr	r3, [pc, #52]	@ (8001314 <HAL_ADC_MspInit+0x70>)
 80012de:	699b      	ldr	r3, [r3, #24]
 80012e0:	4a0c      	ldr	r2, [pc, #48]	@ (8001314 <HAL_ADC_MspInit+0x70>)
 80012e2:	f043 0304 	orr.w	r3, r3, #4
 80012e6:	6193      	str	r3, [r2, #24]
 80012e8:	4b0a      	ldr	r3, [pc, #40]	@ (8001314 <HAL_ADC_MspInit+0x70>)
 80012ea:	699b      	ldr	r3, [r3, #24]
 80012ec:	f003 0304 	and.w	r3, r3, #4
 80012f0:	60bb      	str	r3, [r7, #8]
 80012f2:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80012f4:	2301      	movs	r3, #1
 80012f6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012f8:	2303      	movs	r3, #3
 80012fa:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012fc:	f107 0310 	add.w	r3, r7, #16
 8001300:	4619      	mov	r1, r3
 8001302:	4805      	ldr	r0, [pc, #20]	@ (8001318 <HAL_ADC_MspInit+0x74>)
 8001304:	f000 fe96 	bl	8002034 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001308:	bf00      	nop
 800130a:	3720      	adds	r7, #32
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}
 8001310:	40012400 	.word	0x40012400
 8001314:	40021000 	.word	0x40021000
 8001318:	40010800 	.word	0x40010800

0800131c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001320:	bf00      	nop
 8001322:	e7fd      	b.n	8001320 <NMI_Handler+0x4>

08001324 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001328:	bf00      	nop
 800132a:	e7fd      	b.n	8001328 <HardFault_Handler+0x4>

0800132c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800132c:	b480      	push	{r7}
 800132e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001330:	bf00      	nop
 8001332:	e7fd      	b.n	8001330 <MemManage_Handler+0x4>

08001334 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001338:	bf00      	nop
 800133a:	e7fd      	b.n	8001338 <BusFault_Handler+0x4>

0800133c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001340:	bf00      	nop
 8001342:	e7fd      	b.n	8001340 <UsageFault_Handler+0x4>

08001344 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001348:	bf00      	nop
 800134a:	46bd      	mov	sp, r7
 800134c:	bc80      	pop	{r7}
 800134e:	4770      	bx	lr

08001350 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001354:	bf00      	nop
 8001356:	46bd      	mov	sp, r7
 8001358:	bc80      	pop	{r7}
 800135a:	4770      	bx	lr

0800135c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001360:	bf00      	nop
 8001362:	46bd      	mov	sp, r7
 8001364:	bc80      	pop	{r7}
 8001366:	4770      	bx	lr

08001368 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800136c:	f000 f936 	bl	80015dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001370:	bf00      	nop
 8001372:	bd80      	pop	{r7, pc}

08001374 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0
  return 1;
 8001378:	2301      	movs	r3, #1
}
 800137a:	4618      	mov	r0, r3
 800137c:	46bd      	mov	sp, r7
 800137e:	bc80      	pop	{r7}
 8001380:	4770      	bx	lr

08001382 <_kill>:

int _kill(int pid, int sig)
{
 8001382:	b580      	push	{r7, lr}
 8001384:	b082      	sub	sp, #8
 8001386:	af00      	add	r7, sp, #0
 8001388:	6078      	str	r0, [r7, #4]
 800138a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800138c:	f002 fb0a 	bl	80039a4 <__errno>
 8001390:	4603      	mov	r3, r0
 8001392:	2216      	movs	r2, #22
 8001394:	601a      	str	r2, [r3, #0]
  return -1;
 8001396:	f04f 33ff 	mov.w	r3, #4294967295
}
 800139a:	4618      	mov	r0, r3
 800139c:	3708      	adds	r7, #8
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}

080013a2 <_exit>:

void _exit (int status)
{
 80013a2:	b580      	push	{r7, lr}
 80013a4:	b082      	sub	sp, #8
 80013a6:	af00      	add	r7, sp, #0
 80013a8:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80013aa:	f04f 31ff 	mov.w	r1, #4294967295
 80013ae:	6878      	ldr	r0, [r7, #4]
 80013b0:	f7ff ffe7 	bl	8001382 <_kill>
  while (1) {}    /* Make sure we hang here */
 80013b4:	bf00      	nop
 80013b6:	e7fd      	b.n	80013b4 <_exit+0x12>

080013b8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b086      	sub	sp, #24
 80013bc:	af00      	add	r7, sp, #0
 80013be:	60f8      	str	r0, [r7, #12]
 80013c0:	60b9      	str	r1, [r7, #8]
 80013c2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013c4:	2300      	movs	r3, #0
 80013c6:	617b      	str	r3, [r7, #20]
 80013c8:	e00a      	b.n	80013e0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80013ca:	f3af 8000 	nop.w
 80013ce:	4601      	mov	r1, r0
 80013d0:	68bb      	ldr	r3, [r7, #8]
 80013d2:	1c5a      	adds	r2, r3, #1
 80013d4:	60ba      	str	r2, [r7, #8]
 80013d6:	b2ca      	uxtb	r2, r1
 80013d8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013da:	697b      	ldr	r3, [r7, #20]
 80013dc:	3301      	adds	r3, #1
 80013de:	617b      	str	r3, [r7, #20]
 80013e0:	697a      	ldr	r2, [r7, #20]
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	429a      	cmp	r2, r3
 80013e6:	dbf0      	blt.n	80013ca <_read+0x12>
  }

  return len;
 80013e8:	687b      	ldr	r3, [r7, #4]
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	3718      	adds	r7, #24
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}

080013f2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80013f2:	b580      	push	{r7, lr}
 80013f4:	b086      	sub	sp, #24
 80013f6:	af00      	add	r7, sp, #0
 80013f8:	60f8      	str	r0, [r7, #12]
 80013fa:	60b9      	str	r1, [r7, #8]
 80013fc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013fe:	2300      	movs	r3, #0
 8001400:	617b      	str	r3, [r7, #20]
 8001402:	e009      	b.n	8001418 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001404:	68bb      	ldr	r3, [r7, #8]
 8001406:	1c5a      	adds	r2, r3, #1
 8001408:	60ba      	str	r2, [r7, #8]
 800140a:	781b      	ldrb	r3, [r3, #0]
 800140c:	4618      	mov	r0, r3
 800140e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001412:	697b      	ldr	r3, [r7, #20]
 8001414:	3301      	adds	r3, #1
 8001416:	617b      	str	r3, [r7, #20]
 8001418:	697a      	ldr	r2, [r7, #20]
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	429a      	cmp	r2, r3
 800141e:	dbf1      	blt.n	8001404 <_write+0x12>
  }
  return len;
 8001420:	687b      	ldr	r3, [r7, #4]
}
 8001422:	4618      	mov	r0, r3
 8001424:	3718      	adds	r7, #24
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}

0800142a <_close>:

int _close(int file)
{
 800142a:	b480      	push	{r7}
 800142c:	b083      	sub	sp, #12
 800142e:	af00      	add	r7, sp, #0
 8001430:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001432:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001436:	4618      	mov	r0, r3
 8001438:	370c      	adds	r7, #12
 800143a:	46bd      	mov	sp, r7
 800143c:	bc80      	pop	{r7}
 800143e:	4770      	bx	lr

08001440 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001440:	b480      	push	{r7}
 8001442:	b083      	sub	sp, #12
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
 8001448:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001450:	605a      	str	r2, [r3, #4]
  return 0;
 8001452:	2300      	movs	r3, #0
}
 8001454:	4618      	mov	r0, r3
 8001456:	370c      	adds	r7, #12
 8001458:	46bd      	mov	sp, r7
 800145a:	bc80      	pop	{r7}
 800145c:	4770      	bx	lr

0800145e <_isatty>:

int _isatty(int file)
{
 800145e:	b480      	push	{r7}
 8001460:	b083      	sub	sp, #12
 8001462:	af00      	add	r7, sp, #0
 8001464:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001466:	2301      	movs	r3, #1
}
 8001468:	4618      	mov	r0, r3
 800146a:	370c      	adds	r7, #12
 800146c:	46bd      	mov	sp, r7
 800146e:	bc80      	pop	{r7}
 8001470:	4770      	bx	lr

08001472 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001472:	b480      	push	{r7}
 8001474:	b085      	sub	sp, #20
 8001476:	af00      	add	r7, sp, #0
 8001478:	60f8      	str	r0, [r7, #12]
 800147a:	60b9      	str	r1, [r7, #8]
 800147c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800147e:	2300      	movs	r3, #0
}
 8001480:	4618      	mov	r0, r3
 8001482:	3714      	adds	r7, #20
 8001484:	46bd      	mov	sp, r7
 8001486:	bc80      	pop	{r7}
 8001488:	4770      	bx	lr
	...

0800148c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b086      	sub	sp, #24
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001494:	4a14      	ldr	r2, [pc, #80]	@ (80014e8 <_sbrk+0x5c>)
 8001496:	4b15      	ldr	r3, [pc, #84]	@ (80014ec <_sbrk+0x60>)
 8001498:	1ad3      	subs	r3, r2, r3
 800149a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800149c:	697b      	ldr	r3, [r7, #20]
 800149e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014a0:	4b13      	ldr	r3, [pc, #76]	@ (80014f0 <_sbrk+0x64>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d102      	bne.n	80014ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014a8:	4b11      	ldr	r3, [pc, #68]	@ (80014f0 <_sbrk+0x64>)
 80014aa:	4a12      	ldr	r2, [pc, #72]	@ (80014f4 <_sbrk+0x68>)
 80014ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014ae:	4b10      	ldr	r3, [pc, #64]	@ (80014f0 <_sbrk+0x64>)
 80014b0:	681a      	ldr	r2, [r3, #0]
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	4413      	add	r3, r2
 80014b6:	693a      	ldr	r2, [r7, #16]
 80014b8:	429a      	cmp	r2, r3
 80014ba:	d207      	bcs.n	80014cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014bc:	f002 fa72 	bl	80039a4 <__errno>
 80014c0:	4603      	mov	r3, r0
 80014c2:	220c      	movs	r2, #12
 80014c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014c6:	f04f 33ff 	mov.w	r3, #4294967295
 80014ca:	e009      	b.n	80014e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014cc:	4b08      	ldr	r3, [pc, #32]	@ (80014f0 <_sbrk+0x64>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014d2:	4b07      	ldr	r3, [pc, #28]	@ (80014f0 <_sbrk+0x64>)
 80014d4:	681a      	ldr	r2, [r3, #0]
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	4413      	add	r3, r2
 80014da:	4a05      	ldr	r2, [pc, #20]	@ (80014f0 <_sbrk+0x64>)
 80014dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014de:	68fb      	ldr	r3, [r7, #12]
}
 80014e0:	4618      	mov	r0, r3
 80014e2:	3718      	adds	r7, #24
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	20005000 	.word	0x20005000
 80014ec:	00000400 	.word	0x00000400
 80014f0:	20000220 	.word	0x20000220
 80014f4:	20000378 	.word	0x20000378

080014f8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014fc:	bf00      	nop
 80014fe:	46bd      	mov	sp, r7
 8001500:	bc80      	pop	{r7}
 8001502:	4770      	bx	lr

08001504 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001504:	f7ff fff8 	bl	80014f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001508:	480b      	ldr	r0, [pc, #44]	@ (8001538 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800150a:	490c      	ldr	r1, [pc, #48]	@ (800153c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800150c:	4a0c      	ldr	r2, [pc, #48]	@ (8001540 <LoopFillZerobss+0x16>)
  movs r3, #0
 800150e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001510:	e002      	b.n	8001518 <LoopCopyDataInit>

08001512 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001512:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001514:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001516:	3304      	adds	r3, #4

08001518 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001518:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800151a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800151c:	d3f9      	bcc.n	8001512 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800151e:	4a09      	ldr	r2, [pc, #36]	@ (8001544 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001520:	4c09      	ldr	r4, [pc, #36]	@ (8001548 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001522:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001524:	e001      	b.n	800152a <LoopFillZerobss>

08001526 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001526:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001528:	3204      	adds	r2, #4

0800152a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800152a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800152c:	d3fb      	bcc.n	8001526 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800152e:	f002 fa3f 	bl	80039b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001532:	f7ff fd7d 	bl	8001030 <main>
  bx lr
 8001536:	4770      	bx	lr
  ldr r0, =_sdata
 8001538:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800153c:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001540:	08005b30 	.word	0x08005b30
  ldr r2, =_sbss
 8001544:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001548:	20000374 	.word	0x20000374

0800154c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800154c:	e7fe      	b.n	800154c <ADC1_2_IRQHandler>
	...

08001550 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001554:	4b08      	ldr	r3, [pc, #32]	@ (8001578 <HAL_Init+0x28>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a07      	ldr	r2, [pc, #28]	@ (8001578 <HAL_Init+0x28>)
 800155a:	f043 0310 	orr.w	r3, r3, #16
 800155e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001560:	2003      	movs	r0, #3
 8001562:	f000 fd33 	bl	8001fcc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001566:	200f      	movs	r0, #15
 8001568:	f000 f808 	bl	800157c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800156c:	f7ff fe68 	bl	8001240 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001570:	2300      	movs	r3, #0
}
 8001572:	4618      	mov	r0, r3
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	40022000 	.word	0x40022000

0800157c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b082      	sub	sp, #8
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001584:	4b12      	ldr	r3, [pc, #72]	@ (80015d0 <HAL_InitTick+0x54>)
 8001586:	681a      	ldr	r2, [r3, #0]
 8001588:	4b12      	ldr	r3, [pc, #72]	@ (80015d4 <HAL_InitTick+0x58>)
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	4619      	mov	r1, r3
 800158e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001592:	fbb3 f3f1 	udiv	r3, r3, r1
 8001596:	fbb2 f3f3 	udiv	r3, r2, r3
 800159a:	4618      	mov	r0, r3
 800159c:	f000 fd3d 	bl	800201a <HAL_SYSTICK_Config>
 80015a0:	4603      	mov	r3, r0
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d001      	beq.n	80015aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015a6:	2301      	movs	r3, #1
 80015a8:	e00e      	b.n	80015c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	2b0f      	cmp	r3, #15
 80015ae:	d80a      	bhi.n	80015c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015b0:	2200      	movs	r2, #0
 80015b2:	6879      	ldr	r1, [r7, #4]
 80015b4:	f04f 30ff 	mov.w	r0, #4294967295
 80015b8:	f000 fd13 	bl	8001fe2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015bc:	4a06      	ldr	r2, [pc, #24]	@ (80015d8 <HAL_InitTick+0x5c>)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015c2:	2300      	movs	r3, #0
 80015c4:	e000      	b.n	80015c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015c6:	2301      	movs	r3, #1
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	3708      	adds	r7, #8
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	20000000 	.word	0x20000000
 80015d4:	20000008 	.word	0x20000008
 80015d8:	20000004 	.word	0x20000004

080015dc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015e0:	4b05      	ldr	r3, [pc, #20]	@ (80015f8 <HAL_IncTick+0x1c>)
 80015e2:	781b      	ldrb	r3, [r3, #0]
 80015e4:	461a      	mov	r2, r3
 80015e6:	4b05      	ldr	r3, [pc, #20]	@ (80015fc <HAL_IncTick+0x20>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	4413      	add	r3, r2
 80015ec:	4a03      	ldr	r2, [pc, #12]	@ (80015fc <HAL_IncTick+0x20>)
 80015ee:	6013      	str	r3, [r2, #0]
}
 80015f0:	bf00      	nop
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bc80      	pop	{r7}
 80015f6:	4770      	bx	lr
 80015f8:	20000008 	.word	0x20000008
 80015fc:	20000224 	.word	0x20000224

08001600 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001600:	b480      	push	{r7}
 8001602:	af00      	add	r7, sp, #0
  return uwTick;
 8001604:	4b02      	ldr	r3, [pc, #8]	@ (8001610 <HAL_GetTick+0x10>)
 8001606:	681b      	ldr	r3, [r3, #0]
}
 8001608:	4618      	mov	r0, r3
 800160a:	46bd      	mov	sp, r7
 800160c:	bc80      	pop	{r7}
 800160e:	4770      	bx	lr
 8001610:	20000224 	.word	0x20000224

08001614 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b086      	sub	sp, #24
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800161c:	2300      	movs	r3, #0
 800161e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001620:	2300      	movs	r3, #0
 8001622:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001624:	2300      	movs	r3, #0
 8001626:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001628:	2300      	movs	r3, #0
 800162a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d101      	bne.n	8001636 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001632:	2301      	movs	r3, #1
 8001634:	e0be      	b.n	80017b4 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	689b      	ldr	r3, [r3, #8]
 800163a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001640:	2b00      	cmp	r3, #0
 8001642:	d109      	bne.n	8001658 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	2200      	movs	r2, #0
 8001648:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	2200      	movs	r2, #0
 800164e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001652:	6878      	ldr	r0, [r7, #4]
 8001654:	f7ff fe26 	bl	80012a4 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001658:	6878      	ldr	r0, [r7, #4]
 800165a:	f000 fbc5 	bl	8001de8 <ADC_ConversionStop_Disable>
 800165e:	4603      	mov	r3, r0
 8001660:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001666:	f003 0310 	and.w	r3, r3, #16
 800166a:	2b00      	cmp	r3, #0
 800166c:	f040 8099 	bne.w	80017a2 <HAL_ADC_Init+0x18e>
 8001670:	7dfb      	ldrb	r3, [r7, #23]
 8001672:	2b00      	cmp	r3, #0
 8001674:	f040 8095 	bne.w	80017a2 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800167c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001680:	f023 0302 	bic.w	r3, r3, #2
 8001684:	f043 0202 	orr.w	r2, r3, #2
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001694:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	7b1b      	ldrb	r3, [r3, #12]
 800169a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800169c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800169e:	68ba      	ldr	r2, [r7, #8]
 80016a0:	4313      	orrs	r3, r2
 80016a2:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	689b      	ldr	r3, [r3, #8]
 80016a8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80016ac:	d003      	beq.n	80016b6 <HAL_ADC_Init+0xa2>
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	689b      	ldr	r3, [r3, #8]
 80016b2:	2b01      	cmp	r3, #1
 80016b4:	d102      	bne.n	80016bc <HAL_ADC_Init+0xa8>
 80016b6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80016ba:	e000      	b.n	80016be <HAL_ADC_Init+0xaa>
 80016bc:	2300      	movs	r3, #0
 80016be:	693a      	ldr	r2, [r7, #16]
 80016c0:	4313      	orrs	r3, r2
 80016c2:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	7d1b      	ldrb	r3, [r3, #20]
 80016c8:	2b01      	cmp	r3, #1
 80016ca:	d119      	bne.n	8001700 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	7b1b      	ldrb	r3, [r3, #12]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d109      	bne.n	80016e8 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	699b      	ldr	r3, [r3, #24]
 80016d8:	3b01      	subs	r3, #1
 80016da:	035a      	lsls	r2, r3, #13
 80016dc:	693b      	ldr	r3, [r7, #16]
 80016de:	4313      	orrs	r3, r2
 80016e0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80016e4:	613b      	str	r3, [r7, #16]
 80016e6:	e00b      	b.n	8001700 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016ec:	f043 0220 	orr.w	r2, r3, #32
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016f8:	f043 0201 	orr.w	r2, r3, #1
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	693a      	ldr	r2, [r7, #16]
 8001710:	430a      	orrs	r2, r1
 8001712:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	689a      	ldr	r2, [r3, #8]
 800171a:	4b28      	ldr	r3, [pc, #160]	@ (80017bc <HAL_ADC_Init+0x1a8>)
 800171c:	4013      	ands	r3, r2
 800171e:	687a      	ldr	r2, [r7, #4]
 8001720:	6812      	ldr	r2, [r2, #0]
 8001722:	68b9      	ldr	r1, [r7, #8]
 8001724:	430b      	orrs	r3, r1
 8001726:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	689b      	ldr	r3, [r3, #8]
 800172c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001730:	d003      	beq.n	800173a <HAL_ADC_Init+0x126>
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	689b      	ldr	r3, [r3, #8]
 8001736:	2b01      	cmp	r3, #1
 8001738:	d104      	bne.n	8001744 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	691b      	ldr	r3, [r3, #16]
 800173e:	3b01      	subs	r3, #1
 8001740:	051b      	lsls	r3, r3, #20
 8001742:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800174a:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	68fa      	ldr	r2, [r7, #12]
 8001754:	430a      	orrs	r2, r1
 8001756:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	689a      	ldr	r2, [r3, #8]
 800175e:	4b18      	ldr	r3, [pc, #96]	@ (80017c0 <HAL_ADC_Init+0x1ac>)
 8001760:	4013      	ands	r3, r2
 8001762:	68ba      	ldr	r2, [r7, #8]
 8001764:	429a      	cmp	r2, r3
 8001766:	d10b      	bne.n	8001780 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2200      	movs	r2, #0
 800176c:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001772:	f023 0303 	bic.w	r3, r3, #3
 8001776:	f043 0201 	orr.w	r2, r3, #1
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800177e:	e018      	b.n	80017b2 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001784:	f023 0312 	bic.w	r3, r3, #18
 8001788:	f043 0210 	orr.w	r2, r3, #16
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001794:	f043 0201 	orr.w	r2, r3, #1
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 800179c:	2301      	movs	r3, #1
 800179e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80017a0:	e007      	b.n	80017b2 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017a6:	f043 0210 	orr.w	r2, r3, #16
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 80017ae:	2301      	movs	r3, #1
 80017b0:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80017b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	3718      	adds	r7, #24
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	ffe1f7fd 	.word	0xffe1f7fd
 80017c0:	ff1f0efe 	.word	0xff1f0efe

080017c4 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b084      	sub	sp, #16
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017cc:	2300      	movs	r3, #0
 80017ce:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80017d6:	2b01      	cmp	r3, #1
 80017d8:	d101      	bne.n	80017de <HAL_ADC_Start+0x1a>
 80017da:	2302      	movs	r3, #2
 80017dc:	e098      	b.n	8001910 <HAL_ADC_Start+0x14c>
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2201      	movs	r2, #1
 80017e2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80017e6:	6878      	ldr	r0, [r7, #4]
 80017e8:	f000 faa4 	bl	8001d34 <ADC_Enable>
 80017ec:	4603      	mov	r3, r0
 80017ee:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80017f0:	7bfb      	ldrb	r3, [r7, #15]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	f040 8087 	bne.w	8001906 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017fc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001800:	f023 0301 	bic.w	r3, r3, #1
 8001804:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a41      	ldr	r2, [pc, #260]	@ (8001918 <HAL_ADC_Start+0x154>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d105      	bne.n	8001822 <HAL_ADC_Start+0x5e>
 8001816:	4b41      	ldr	r3, [pc, #260]	@ (800191c <HAL_ADC_Start+0x158>)
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 800181e:	2b00      	cmp	r3, #0
 8001820:	d115      	bne.n	800184e <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001826:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001838:	2b00      	cmp	r3, #0
 800183a:	d026      	beq.n	800188a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001840:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001844:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800184c:	e01d      	b.n	800188a <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001852:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4a2f      	ldr	r2, [pc, #188]	@ (800191c <HAL_ADC_Start+0x158>)
 8001860:	4293      	cmp	r3, r2
 8001862:	d004      	beq.n	800186e <HAL_ADC_Start+0xaa>
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a2b      	ldr	r2, [pc, #172]	@ (8001918 <HAL_ADC_Start+0x154>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d10d      	bne.n	800188a <HAL_ADC_Start+0xc6>
 800186e:	4b2b      	ldr	r3, [pc, #172]	@ (800191c <HAL_ADC_Start+0x158>)
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001876:	2b00      	cmp	r3, #0
 8001878:	d007      	beq.n	800188a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800187e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001882:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800188e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001892:	2b00      	cmp	r3, #0
 8001894:	d006      	beq.n	80018a4 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800189a:	f023 0206 	bic.w	r2, r3, #6
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	62da      	str	r2, [r3, #44]	@ 0x2c
 80018a2:	e002      	b.n	80018aa <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2200      	movs	r2, #0
 80018a8:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2200      	movs	r2, #0
 80018ae:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f06f 0202 	mvn.w	r2, #2
 80018ba:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	689b      	ldr	r3, [r3, #8]
 80018c2:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80018c6:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80018ca:	d113      	bne.n	80018f4 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80018d0:	4a11      	ldr	r2, [pc, #68]	@ (8001918 <HAL_ADC_Start+0x154>)
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d105      	bne.n	80018e2 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80018d6:	4b11      	ldr	r3, [pc, #68]	@ (800191c <HAL_ADC_Start+0x158>)
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d108      	bne.n	80018f4 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	689a      	ldr	r2, [r3, #8]
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 80018f0:	609a      	str	r2, [r3, #8]
 80018f2:	e00c      	b.n	800190e <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	689a      	ldr	r2, [r3, #8]
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8001902:	609a      	str	r2, [r3, #8]
 8001904:	e003      	b.n	800190e <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	2200      	movs	r2, #0
 800190a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 800190e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001910:	4618      	mov	r0, r3
 8001912:	3710      	adds	r7, #16
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}
 8001918:	40012800 	.word	0x40012800
 800191c:	40012400 	.word	0x40012400

08001920 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001920:	b590      	push	{r4, r7, lr}
 8001922:	b087      	sub	sp, #28
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
 8001928:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800192a:	2300      	movs	r3, #0
 800192c:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 800192e:	2300      	movs	r3, #0
 8001930:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8001932:	2300      	movs	r3, #0
 8001934:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8001936:	f7ff fe63 	bl	8001600 <HAL_GetTick>
 800193a:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	689b      	ldr	r3, [r3, #8]
 8001942:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001946:	2b00      	cmp	r3, #0
 8001948:	d00b      	beq.n	8001962 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800194e:	f043 0220 	orr.w	r2, r3, #32
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	2200      	movs	r2, #0
 800195a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 800195e:	2301      	movs	r3, #1
 8001960:	e0d3      	b.n	8001b0a <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800196c:	2b00      	cmp	r3, #0
 800196e:	d131      	bne.n	80019d4 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001976:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800197a:	2b00      	cmp	r3, #0
 800197c:	d12a      	bne.n	80019d4 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800197e:	e021      	b.n	80019c4 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001986:	d01d      	beq.n	80019c4 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d007      	beq.n	800199e <HAL_ADC_PollForConversion+0x7e>
 800198e:	f7ff fe37 	bl	8001600 <HAL_GetTick>
 8001992:	4602      	mov	r2, r0
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	1ad3      	subs	r3, r2, r3
 8001998:	683a      	ldr	r2, [r7, #0]
 800199a:	429a      	cmp	r2, r3
 800199c:	d212      	bcs.n	80019c4 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f003 0302 	and.w	r3, r3, #2
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d10b      	bne.n	80019c4 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019b0:	f043 0204 	orr.w	r2, r3, #4
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2200      	movs	r2, #0
 80019bc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 80019c0:	2303      	movs	r3, #3
 80019c2:	e0a2      	b.n	8001b0a <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f003 0302 	and.w	r3, r3, #2
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d0d6      	beq.n	8001980 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80019d2:	e070      	b.n	8001ab6 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80019d4:	4b4f      	ldr	r3, [pc, #316]	@ (8001b14 <HAL_ADC_PollForConversion+0x1f4>)
 80019d6:	681c      	ldr	r4, [r3, #0]
 80019d8:	2002      	movs	r0, #2
 80019da:	f001 f979 	bl	8002cd0 <HAL_RCCEx_GetPeriphCLKFreq>
 80019de:	4603      	mov	r3, r0
 80019e0:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	6919      	ldr	r1, [r3, #16]
 80019ea:	4b4b      	ldr	r3, [pc, #300]	@ (8001b18 <HAL_ADC_PollForConversion+0x1f8>)
 80019ec:	400b      	ands	r3, r1
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d118      	bne.n	8001a24 <HAL_ADC_PollForConversion+0x104>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	68d9      	ldr	r1, [r3, #12]
 80019f8:	4b48      	ldr	r3, [pc, #288]	@ (8001b1c <HAL_ADC_PollForConversion+0x1fc>)
 80019fa:	400b      	ands	r3, r1
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d111      	bne.n	8001a24 <HAL_ADC_PollForConversion+0x104>
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	6919      	ldr	r1, [r3, #16]
 8001a06:	4b46      	ldr	r3, [pc, #280]	@ (8001b20 <HAL_ADC_PollForConversion+0x200>)
 8001a08:	400b      	ands	r3, r1
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d108      	bne.n	8001a20 <HAL_ADC_PollForConversion+0x100>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	68d9      	ldr	r1, [r3, #12]
 8001a14:	4b43      	ldr	r3, [pc, #268]	@ (8001b24 <HAL_ADC_PollForConversion+0x204>)
 8001a16:	400b      	ands	r3, r1
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d101      	bne.n	8001a20 <HAL_ADC_PollForConversion+0x100>
 8001a1c:	2314      	movs	r3, #20
 8001a1e:	e020      	b.n	8001a62 <HAL_ADC_PollForConversion+0x142>
 8001a20:	2329      	movs	r3, #41	@ 0x29
 8001a22:	e01e      	b.n	8001a62 <HAL_ADC_PollForConversion+0x142>
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	6919      	ldr	r1, [r3, #16]
 8001a2a:	4b3d      	ldr	r3, [pc, #244]	@ (8001b20 <HAL_ADC_PollForConversion+0x200>)
 8001a2c:	400b      	ands	r3, r1
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d106      	bne.n	8001a40 <HAL_ADC_PollForConversion+0x120>
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	68d9      	ldr	r1, [r3, #12]
 8001a38:	4b3a      	ldr	r3, [pc, #232]	@ (8001b24 <HAL_ADC_PollForConversion+0x204>)
 8001a3a:	400b      	ands	r3, r1
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d00d      	beq.n	8001a5c <HAL_ADC_PollForConversion+0x13c>
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	6919      	ldr	r1, [r3, #16]
 8001a46:	4b38      	ldr	r3, [pc, #224]	@ (8001b28 <HAL_ADC_PollForConversion+0x208>)
 8001a48:	400b      	ands	r3, r1
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d108      	bne.n	8001a60 <HAL_ADC_PollForConversion+0x140>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	68d9      	ldr	r1, [r3, #12]
 8001a54:	4b34      	ldr	r3, [pc, #208]	@ (8001b28 <HAL_ADC_PollForConversion+0x208>)
 8001a56:	400b      	ands	r3, r1
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d101      	bne.n	8001a60 <HAL_ADC_PollForConversion+0x140>
 8001a5c:	2354      	movs	r3, #84	@ 0x54
 8001a5e:	e000      	b.n	8001a62 <HAL_ADC_PollForConversion+0x142>
 8001a60:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8001a62:	fb02 f303 	mul.w	r3, r2, r3
 8001a66:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001a68:	e021      	b.n	8001aae <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a70:	d01a      	beq.n	8001aa8 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d007      	beq.n	8001a88 <HAL_ADC_PollForConversion+0x168>
 8001a78:	f7ff fdc2 	bl	8001600 <HAL_GetTick>
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	697b      	ldr	r3, [r7, #20]
 8001a80:	1ad3      	subs	r3, r2, r3
 8001a82:	683a      	ldr	r2, [r7, #0]
 8001a84:	429a      	cmp	r2, r3
 8001a86:	d20f      	bcs.n	8001aa8 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	693a      	ldr	r2, [r7, #16]
 8001a8c:	429a      	cmp	r2, r3
 8001a8e:	d90b      	bls.n	8001aa8 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a94:	f043 0204 	orr.w	r2, r3, #4
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 8001aa4:	2303      	movs	r3, #3
 8001aa6:	e030      	b.n	8001b0a <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	3301      	adds	r3, #1
 8001aac:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	693a      	ldr	r2, [r7, #16]
 8001ab2:	429a      	cmp	r2, r3
 8001ab4:	d8d9      	bhi.n	8001a6a <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f06f 0212 	mvn.w	r2, #18
 8001abe:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ac4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	689b      	ldr	r3, [r3, #8]
 8001ad2:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001ad6:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001ada:	d115      	bne.n	8001b08 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d111      	bne.n	8001b08 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ae8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001af4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d105      	bne.n	8001b08 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b00:	f043 0201 	orr.w	r2, r3, #1
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001b08:	2300      	movs	r3, #0
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	371c      	adds	r7, #28
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd90      	pop	{r4, r7, pc}
 8001b12:	bf00      	nop
 8001b14:	20000000 	.word	0x20000000
 8001b18:	24924924 	.word	0x24924924
 8001b1c:	00924924 	.word	0x00924924
 8001b20:	12492492 	.word	0x12492492
 8001b24:	00492492 	.word	0x00492492
 8001b28:	00249249 	.word	0x00249249

08001b2c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b083      	sub	sp, #12
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	370c      	adds	r7, #12
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bc80      	pop	{r7}
 8001b42:	4770      	bx	lr

08001b44 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001b44:	b480      	push	{r7}
 8001b46:	b085      	sub	sp, #20
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
 8001b4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001b52:	2300      	movs	r3, #0
 8001b54:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001b5c:	2b01      	cmp	r3, #1
 8001b5e:	d101      	bne.n	8001b64 <HAL_ADC_ConfigChannel+0x20>
 8001b60:	2302      	movs	r3, #2
 8001b62:	e0dc      	b.n	8001d1e <HAL_ADC_ConfigChannel+0x1da>
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2201      	movs	r2, #1
 8001b68:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	2b06      	cmp	r3, #6
 8001b72:	d81c      	bhi.n	8001bae <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	685a      	ldr	r2, [r3, #4]
 8001b7e:	4613      	mov	r3, r2
 8001b80:	009b      	lsls	r3, r3, #2
 8001b82:	4413      	add	r3, r2
 8001b84:	3b05      	subs	r3, #5
 8001b86:	221f      	movs	r2, #31
 8001b88:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8c:	43db      	mvns	r3, r3
 8001b8e:	4019      	ands	r1, r3
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	6818      	ldr	r0, [r3, #0]
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	685a      	ldr	r2, [r3, #4]
 8001b98:	4613      	mov	r3, r2
 8001b9a:	009b      	lsls	r3, r3, #2
 8001b9c:	4413      	add	r3, r2
 8001b9e:	3b05      	subs	r3, #5
 8001ba0:	fa00 f203 	lsl.w	r2, r0, r3
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	430a      	orrs	r2, r1
 8001baa:	635a      	str	r2, [r3, #52]	@ 0x34
 8001bac:	e03c      	b.n	8001c28 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	2b0c      	cmp	r3, #12
 8001bb4:	d81c      	bhi.n	8001bf0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	685a      	ldr	r2, [r3, #4]
 8001bc0:	4613      	mov	r3, r2
 8001bc2:	009b      	lsls	r3, r3, #2
 8001bc4:	4413      	add	r3, r2
 8001bc6:	3b23      	subs	r3, #35	@ 0x23
 8001bc8:	221f      	movs	r2, #31
 8001bca:	fa02 f303 	lsl.w	r3, r2, r3
 8001bce:	43db      	mvns	r3, r3
 8001bd0:	4019      	ands	r1, r3
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	6818      	ldr	r0, [r3, #0]
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	685a      	ldr	r2, [r3, #4]
 8001bda:	4613      	mov	r3, r2
 8001bdc:	009b      	lsls	r3, r3, #2
 8001bde:	4413      	add	r3, r2
 8001be0:	3b23      	subs	r3, #35	@ 0x23
 8001be2:	fa00 f203 	lsl.w	r2, r0, r3
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	430a      	orrs	r2, r1
 8001bec:	631a      	str	r2, [r3, #48]	@ 0x30
 8001bee:	e01b      	b.n	8001c28 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	685a      	ldr	r2, [r3, #4]
 8001bfa:	4613      	mov	r3, r2
 8001bfc:	009b      	lsls	r3, r3, #2
 8001bfe:	4413      	add	r3, r2
 8001c00:	3b41      	subs	r3, #65	@ 0x41
 8001c02:	221f      	movs	r2, #31
 8001c04:	fa02 f303 	lsl.w	r3, r2, r3
 8001c08:	43db      	mvns	r3, r3
 8001c0a:	4019      	ands	r1, r3
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	6818      	ldr	r0, [r3, #0]
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	685a      	ldr	r2, [r3, #4]
 8001c14:	4613      	mov	r3, r2
 8001c16:	009b      	lsls	r3, r3, #2
 8001c18:	4413      	add	r3, r2
 8001c1a:	3b41      	subs	r3, #65	@ 0x41
 8001c1c:	fa00 f203 	lsl.w	r2, r0, r3
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	430a      	orrs	r2, r1
 8001c26:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	2b09      	cmp	r3, #9
 8001c2e:	d91c      	bls.n	8001c6a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	68d9      	ldr	r1, [r3, #12]
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	681a      	ldr	r2, [r3, #0]
 8001c3a:	4613      	mov	r3, r2
 8001c3c:	005b      	lsls	r3, r3, #1
 8001c3e:	4413      	add	r3, r2
 8001c40:	3b1e      	subs	r3, #30
 8001c42:	2207      	movs	r2, #7
 8001c44:	fa02 f303 	lsl.w	r3, r2, r3
 8001c48:	43db      	mvns	r3, r3
 8001c4a:	4019      	ands	r1, r3
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	6898      	ldr	r0, [r3, #8]
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	681a      	ldr	r2, [r3, #0]
 8001c54:	4613      	mov	r3, r2
 8001c56:	005b      	lsls	r3, r3, #1
 8001c58:	4413      	add	r3, r2
 8001c5a:	3b1e      	subs	r3, #30
 8001c5c:	fa00 f203 	lsl.w	r2, r0, r3
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	430a      	orrs	r2, r1
 8001c66:	60da      	str	r2, [r3, #12]
 8001c68:	e019      	b.n	8001c9e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	6919      	ldr	r1, [r3, #16]
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	681a      	ldr	r2, [r3, #0]
 8001c74:	4613      	mov	r3, r2
 8001c76:	005b      	lsls	r3, r3, #1
 8001c78:	4413      	add	r3, r2
 8001c7a:	2207      	movs	r2, #7
 8001c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c80:	43db      	mvns	r3, r3
 8001c82:	4019      	ands	r1, r3
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	6898      	ldr	r0, [r3, #8]
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	681a      	ldr	r2, [r3, #0]
 8001c8c:	4613      	mov	r3, r2
 8001c8e:	005b      	lsls	r3, r3, #1
 8001c90:	4413      	add	r3, r2
 8001c92:	fa00 f203 	lsl.w	r2, r0, r3
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	430a      	orrs	r2, r1
 8001c9c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	2b10      	cmp	r3, #16
 8001ca4:	d003      	beq.n	8001cae <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001caa:	2b11      	cmp	r3, #17
 8001cac:	d132      	bne.n	8001d14 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4a1d      	ldr	r2, [pc, #116]	@ (8001d28 <HAL_ADC_ConfigChannel+0x1e4>)
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d125      	bne.n	8001d04 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	689b      	ldr	r3, [r3, #8]
 8001cbe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d126      	bne.n	8001d14 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	689a      	ldr	r2, [r3, #8]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8001cd4:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	2b10      	cmp	r3, #16
 8001cdc:	d11a      	bne.n	8001d14 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001cde:	4b13      	ldr	r3, [pc, #76]	@ (8001d2c <HAL_ADC_ConfigChannel+0x1e8>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4a13      	ldr	r2, [pc, #76]	@ (8001d30 <HAL_ADC_ConfigChannel+0x1ec>)
 8001ce4:	fba2 2303 	umull	r2, r3, r2, r3
 8001ce8:	0c9a      	lsrs	r2, r3, #18
 8001cea:	4613      	mov	r3, r2
 8001cec:	009b      	lsls	r3, r3, #2
 8001cee:	4413      	add	r3, r2
 8001cf0:	005b      	lsls	r3, r3, #1
 8001cf2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001cf4:	e002      	b.n	8001cfc <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001cf6:	68bb      	ldr	r3, [r7, #8]
 8001cf8:	3b01      	subs	r3, #1
 8001cfa:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001cfc:	68bb      	ldr	r3, [r7, #8]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d1f9      	bne.n	8001cf6 <HAL_ADC_ConfigChannel+0x1b2>
 8001d02:	e007      	b.n	8001d14 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d08:	f043 0220 	orr.w	r2, r3, #32
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001d10:	2301      	movs	r3, #1
 8001d12:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2200      	movs	r2, #0
 8001d18:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001d1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	3714      	adds	r7, #20
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bc80      	pop	{r7}
 8001d26:	4770      	bx	lr
 8001d28:	40012400 	.word	0x40012400
 8001d2c:	20000000 	.word	0x20000000
 8001d30:	431bde83 	.word	0x431bde83

08001d34 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b084      	sub	sp, #16
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001d40:	2300      	movs	r3, #0
 8001d42:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	689b      	ldr	r3, [r3, #8]
 8001d4a:	f003 0301 	and.w	r3, r3, #1
 8001d4e:	2b01      	cmp	r3, #1
 8001d50:	d040      	beq.n	8001dd4 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	689a      	ldr	r2, [r3, #8]
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f042 0201 	orr.w	r2, r2, #1
 8001d60:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001d62:	4b1f      	ldr	r3, [pc, #124]	@ (8001de0 <ADC_Enable+0xac>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4a1f      	ldr	r2, [pc, #124]	@ (8001de4 <ADC_Enable+0xb0>)
 8001d68:	fba2 2303 	umull	r2, r3, r2, r3
 8001d6c:	0c9b      	lsrs	r3, r3, #18
 8001d6e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001d70:	e002      	b.n	8001d78 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001d72:	68bb      	ldr	r3, [r7, #8]
 8001d74:	3b01      	subs	r3, #1
 8001d76:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001d78:	68bb      	ldr	r3, [r7, #8]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d1f9      	bne.n	8001d72 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001d7e:	f7ff fc3f 	bl	8001600 <HAL_GetTick>
 8001d82:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001d84:	e01f      	b.n	8001dc6 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001d86:	f7ff fc3b 	bl	8001600 <HAL_GetTick>
 8001d8a:	4602      	mov	r2, r0
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	1ad3      	subs	r3, r2, r3
 8001d90:	2b02      	cmp	r3, #2
 8001d92:	d918      	bls.n	8001dc6 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	689b      	ldr	r3, [r3, #8]
 8001d9a:	f003 0301 	and.w	r3, r3, #1
 8001d9e:	2b01      	cmp	r3, #1
 8001da0:	d011      	beq.n	8001dc6 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001da6:	f043 0210 	orr.w	r2, r3, #16
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001db2:	f043 0201 	orr.w	r2, r3, #1
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	e007      	b.n	8001dd6 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	689b      	ldr	r3, [r3, #8]
 8001dcc:	f003 0301 	and.w	r3, r3, #1
 8001dd0:	2b01      	cmp	r3, #1
 8001dd2:	d1d8      	bne.n	8001d86 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001dd4:	2300      	movs	r3, #0
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	3710      	adds	r7, #16
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	bf00      	nop
 8001de0:	20000000 	.word	0x20000000
 8001de4:	431bde83 	.word	0x431bde83

08001de8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b084      	sub	sp, #16
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001df0:	2300      	movs	r3, #0
 8001df2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	689b      	ldr	r3, [r3, #8]
 8001dfa:	f003 0301 	and.w	r3, r3, #1
 8001dfe:	2b01      	cmp	r3, #1
 8001e00:	d12e      	bne.n	8001e60 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	689a      	ldr	r2, [r3, #8]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f022 0201 	bic.w	r2, r2, #1
 8001e10:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001e12:	f7ff fbf5 	bl	8001600 <HAL_GetTick>
 8001e16:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001e18:	e01b      	b.n	8001e52 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001e1a:	f7ff fbf1 	bl	8001600 <HAL_GetTick>
 8001e1e:	4602      	mov	r2, r0
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	1ad3      	subs	r3, r2, r3
 8001e24:	2b02      	cmp	r3, #2
 8001e26:	d914      	bls.n	8001e52 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	689b      	ldr	r3, [r3, #8]
 8001e2e:	f003 0301 	and.w	r3, r3, #1
 8001e32:	2b01      	cmp	r3, #1
 8001e34:	d10d      	bne.n	8001e52 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e3a:	f043 0210 	orr.w	r2, r3, #16
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e46:	f043 0201 	orr.w	r2, r3, #1
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	e007      	b.n	8001e62 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	689b      	ldr	r3, [r3, #8]
 8001e58:	f003 0301 	and.w	r3, r3, #1
 8001e5c:	2b01      	cmp	r3, #1
 8001e5e:	d0dc      	beq.n	8001e1a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001e60:	2300      	movs	r3, #0
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	3710      	adds	r7, #16
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}
	...

08001e6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b085      	sub	sp, #20
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	f003 0307 	and.w	r3, r3, #7
 8001e7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e7c:	4b0c      	ldr	r3, [pc, #48]	@ (8001eb0 <__NVIC_SetPriorityGrouping+0x44>)
 8001e7e:	68db      	ldr	r3, [r3, #12]
 8001e80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e82:	68ba      	ldr	r2, [r7, #8]
 8001e84:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001e88:	4013      	ands	r3, r2
 8001e8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e90:	68bb      	ldr	r3, [r7, #8]
 8001e92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e94:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001e98:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e9e:	4a04      	ldr	r2, [pc, #16]	@ (8001eb0 <__NVIC_SetPriorityGrouping+0x44>)
 8001ea0:	68bb      	ldr	r3, [r7, #8]
 8001ea2:	60d3      	str	r3, [r2, #12]
}
 8001ea4:	bf00      	nop
 8001ea6:	3714      	adds	r7, #20
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bc80      	pop	{r7}
 8001eac:	4770      	bx	lr
 8001eae:	bf00      	nop
 8001eb0:	e000ed00 	.word	0xe000ed00

08001eb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001eb8:	4b04      	ldr	r3, [pc, #16]	@ (8001ecc <__NVIC_GetPriorityGrouping+0x18>)
 8001eba:	68db      	ldr	r3, [r3, #12]
 8001ebc:	0a1b      	lsrs	r3, r3, #8
 8001ebe:	f003 0307 	and.w	r3, r3, #7
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bc80      	pop	{r7}
 8001ec8:	4770      	bx	lr
 8001eca:	bf00      	nop
 8001ecc:	e000ed00 	.word	0xe000ed00

08001ed0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b083      	sub	sp, #12
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	6039      	str	r1, [r7, #0]
 8001eda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001edc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	db0a      	blt.n	8001efa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	b2da      	uxtb	r2, r3
 8001ee8:	490c      	ldr	r1, [pc, #48]	@ (8001f1c <__NVIC_SetPriority+0x4c>)
 8001eea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eee:	0112      	lsls	r2, r2, #4
 8001ef0:	b2d2      	uxtb	r2, r2
 8001ef2:	440b      	add	r3, r1
 8001ef4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ef8:	e00a      	b.n	8001f10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	b2da      	uxtb	r2, r3
 8001efe:	4908      	ldr	r1, [pc, #32]	@ (8001f20 <__NVIC_SetPriority+0x50>)
 8001f00:	79fb      	ldrb	r3, [r7, #7]
 8001f02:	f003 030f 	and.w	r3, r3, #15
 8001f06:	3b04      	subs	r3, #4
 8001f08:	0112      	lsls	r2, r2, #4
 8001f0a:	b2d2      	uxtb	r2, r2
 8001f0c:	440b      	add	r3, r1
 8001f0e:	761a      	strb	r2, [r3, #24]
}
 8001f10:	bf00      	nop
 8001f12:	370c      	adds	r7, #12
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bc80      	pop	{r7}
 8001f18:	4770      	bx	lr
 8001f1a:	bf00      	nop
 8001f1c:	e000e100 	.word	0xe000e100
 8001f20:	e000ed00 	.word	0xe000ed00

08001f24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b089      	sub	sp, #36	@ 0x24
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	60f8      	str	r0, [r7, #12]
 8001f2c:	60b9      	str	r1, [r7, #8]
 8001f2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	f003 0307 	and.w	r3, r3, #7
 8001f36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f38:	69fb      	ldr	r3, [r7, #28]
 8001f3a:	f1c3 0307 	rsb	r3, r3, #7
 8001f3e:	2b04      	cmp	r3, #4
 8001f40:	bf28      	it	cs
 8001f42:	2304      	movcs	r3, #4
 8001f44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f46:	69fb      	ldr	r3, [r7, #28]
 8001f48:	3304      	adds	r3, #4
 8001f4a:	2b06      	cmp	r3, #6
 8001f4c:	d902      	bls.n	8001f54 <NVIC_EncodePriority+0x30>
 8001f4e:	69fb      	ldr	r3, [r7, #28]
 8001f50:	3b03      	subs	r3, #3
 8001f52:	e000      	b.n	8001f56 <NVIC_EncodePriority+0x32>
 8001f54:	2300      	movs	r3, #0
 8001f56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f58:	f04f 32ff 	mov.w	r2, #4294967295
 8001f5c:	69bb      	ldr	r3, [r7, #24]
 8001f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f62:	43da      	mvns	r2, r3
 8001f64:	68bb      	ldr	r3, [r7, #8]
 8001f66:	401a      	ands	r2, r3
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f6c:	f04f 31ff 	mov.w	r1, #4294967295
 8001f70:	697b      	ldr	r3, [r7, #20]
 8001f72:	fa01 f303 	lsl.w	r3, r1, r3
 8001f76:	43d9      	mvns	r1, r3
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f7c:	4313      	orrs	r3, r2
         );
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	3724      	adds	r7, #36	@ 0x24
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bc80      	pop	{r7}
 8001f86:	4770      	bx	lr

08001f88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b082      	sub	sp, #8
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	3b01      	subs	r3, #1
 8001f94:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001f98:	d301      	bcc.n	8001f9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	e00f      	b.n	8001fbe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f9e:	4a0a      	ldr	r2, [pc, #40]	@ (8001fc8 <SysTick_Config+0x40>)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	3b01      	subs	r3, #1
 8001fa4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001fa6:	210f      	movs	r1, #15
 8001fa8:	f04f 30ff 	mov.w	r0, #4294967295
 8001fac:	f7ff ff90 	bl	8001ed0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fb0:	4b05      	ldr	r3, [pc, #20]	@ (8001fc8 <SysTick_Config+0x40>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fb6:	4b04      	ldr	r3, [pc, #16]	@ (8001fc8 <SysTick_Config+0x40>)
 8001fb8:	2207      	movs	r2, #7
 8001fba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fbc:	2300      	movs	r3, #0
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	3708      	adds	r7, #8
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}
 8001fc6:	bf00      	nop
 8001fc8:	e000e010 	.word	0xe000e010

08001fcc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b082      	sub	sp, #8
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fd4:	6878      	ldr	r0, [r7, #4]
 8001fd6:	f7ff ff49 	bl	8001e6c <__NVIC_SetPriorityGrouping>
}
 8001fda:	bf00      	nop
 8001fdc:	3708      	adds	r7, #8
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}

08001fe2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001fe2:	b580      	push	{r7, lr}
 8001fe4:	b086      	sub	sp, #24
 8001fe6:	af00      	add	r7, sp, #0
 8001fe8:	4603      	mov	r3, r0
 8001fea:	60b9      	str	r1, [r7, #8]
 8001fec:	607a      	str	r2, [r7, #4]
 8001fee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ff4:	f7ff ff5e 	bl	8001eb4 <__NVIC_GetPriorityGrouping>
 8001ff8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ffa:	687a      	ldr	r2, [r7, #4]
 8001ffc:	68b9      	ldr	r1, [r7, #8]
 8001ffe:	6978      	ldr	r0, [r7, #20]
 8002000:	f7ff ff90 	bl	8001f24 <NVIC_EncodePriority>
 8002004:	4602      	mov	r2, r0
 8002006:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800200a:	4611      	mov	r1, r2
 800200c:	4618      	mov	r0, r3
 800200e:	f7ff ff5f 	bl	8001ed0 <__NVIC_SetPriority>
}
 8002012:	bf00      	nop
 8002014:	3718      	adds	r7, #24
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}

0800201a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800201a:	b580      	push	{r7, lr}
 800201c:	b082      	sub	sp, #8
 800201e:	af00      	add	r7, sp, #0
 8002020:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002022:	6878      	ldr	r0, [r7, #4]
 8002024:	f7ff ffb0 	bl	8001f88 <SysTick_Config>
 8002028:	4603      	mov	r3, r0
}
 800202a:	4618      	mov	r0, r3
 800202c:	3708      	adds	r7, #8
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}
	...

08002034 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002034:	b480      	push	{r7}
 8002036:	b08b      	sub	sp, #44	@ 0x2c
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
 800203c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800203e:	2300      	movs	r3, #0
 8002040:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002042:	2300      	movs	r3, #0
 8002044:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002046:	e169      	b.n	800231c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002048:	2201      	movs	r2, #1
 800204a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800204c:	fa02 f303 	lsl.w	r3, r2, r3
 8002050:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	69fa      	ldr	r2, [r7, #28]
 8002058:	4013      	ands	r3, r2
 800205a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800205c:	69ba      	ldr	r2, [r7, #24]
 800205e:	69fb      	ldr	r3, [r7, #28]
 8002060:	429a      	cmp	r2, r3
 8002062:	f040 8158 	bne.w	8002316 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	4a9a      	ldr	r2, [pc, #616]	@ (80022d4 <HAL_GPIO_Init+0x2a0>)
 800206c:	4293      	cmp	r3, r2
 800206e:	d05e      	beq.n	800212e <HAL_GPIO_Init+0xfa>
 8002070:	4a98      	ldr	r2, [pc, #608]	@ (80022d4 <HAL_GPIO_Init+0x2a0>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d875      	bhi.n	8002162 <HAL_GPIO_Init+0x12e>
 8002076:	4a98      	ldr	r2, [pc, #608]	@ (80022d8 <HAL_GPIO_Init+0x2a4>)
 8002078:	4293      	cmp	r3, r2
 800207a:	d058      	beq.n	800212e <HAL_GPIO_Init+0xfa>
 800207c:	4a96      	ldr	r2, [pc, #600]	@ (80022d8 <HAL_GPIO_Init+0x2a4>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d86f      	bhi.n	8002162 <HAL_GPIO_Init+0x12e>
 8002082:	4a96      	ldr	r2, [pc, #600]	@ (80022dc <HAL_GPIO_Init+0x2a8>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d052      	beq.n	800212e <HAL_GPIO_Init+0xfa>
 8002088:	4a94      	ldr	r2, [pc, #592]	@ (80022dc <HAL_GPIO_Init+0x2a8>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d869      	bhi.n	8002162 <HAL_GPIO_Init+0x12e>
 800208e:	4a94      	ldr	r2, [pc, #592]	@ (80022e0 <HAL_GPIO_Init+0x2ac>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d04c      	beq.n	800212e <HAL_GPIO_Init+0xfa>
 8002094:	4a92      	ldr	r2, [pc, #584]	@ (80022e0 <HAL_GPIO_Init+0x2ac>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d863      	bhi.n	8002162 <HAL_GPIO_Init+0x12e>
 800209a:	4a92      	ldr	r2, [pc, #584]	@ (80022e4 <HAL_GPIO_Init+0x2b0>)
 800209c:	4293      	cmp	r3, r2
 800209e:	d046      	beq.n	800212e <HAL_GPIO_Init+0xfa>
 80020a0:	4a90      	ldr	r2, [pc, #576]	@ (80022e4 <HAL_GPIO_Init+0x2b0>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d85d      	bhi.n	8002162 <HAL_GPIO_Init+0x12e>
 80020a6:	2b12      	cmp	r3, #18
 80020a8:	d82a      	bhi.n	8002100 <HAL_GPIO_Init+0xcc>
 80020aa:	2b12      	cmp	r3, #18
 80020ac:	d859      	bhi.n	8002162 <HAL_GPIO_Init+0x12e>
 80020ae:	a201      	add	r2, pc, #4	@ (adr r2, 80020b4 <HAL_GPIO_Init+0x80>)
 80020b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020b4:	0800212f 	.word	0x0800212f
 80020b8:	08002109 	.word	0x08002109
 80020bc:	0800211b 	.word	0x0800211b
 80020c0:	0800215d 	.word	0x0800215d
 80020c4:	08002163 	.word	0x08002163
 80020c8:	08002163 	.word	0x08002163
 80020cc:	08002163 	.word	0x08002163
 80020d0:	08002163 	.word	0x08002163
 80020d4:	08002163 	.word	0x08002163
 80020d8:	08002163 	.word	0x08002163
 80020dc:	08002163 	.word	0x08002163
 80020e0:	08002163 	.word	0x08002163
 80020e4:	08002163 	.word	0x08002163
 80020e8:	08002163 	.word	0x08002163
 80020ec:	08002163 	.word	0x08002163
 80020f0:	08002163 	.word	0x08002163
 80020f4:	08002163 	.word	0x08002163
 80020f8:	08002111 	.word	0x08002111
 80020fc:	08002125 	.word	0x08002125
 8002100:	4a79      	ldr	r2, [pc, #484]	@ (80022e8 <HAL_GPIO_Init+0x2b4>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d013      	beq.n	800212e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002106:	e02c      	b.n	8002162 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	68db      	ldr	r3, [r3, #12]
 800210c:	623b      	str	r3, [r7, #32]
          break;
 800210e:	e029      	b.n	8002164 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	68db      	ldr	r3, [r3, #12]
 8002114:	3304      	adds	r3, #4
 8002116:	623b      	str	r3, [r7, #32]
          break;
 8002118:	e024      	b.n	8002164 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	68db      	ldr	r3, [r3, #12]
 800211e:	3308      	adds	r3, #8
 8002120:	623b      	str	r3, [r7, #32]
          break;
 8002122:	e01f      	b.n	8002164 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	68db      	ldr	r3, [r3, #12]
 8002128:	330c      	adds	r3, #12
 800212a:	623b      	str	r3, [r7, #32]
          break;
 800212c:	e01a      	b.n	8002164 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	689b      	ldr	r3, [r3, #8]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d102      	bne.n	800213c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002136:	2304      	movs	r3, #4
 8002138:	623b      	str	r3, [r7, #32]
          break;
 800213a:	e013      	b.n	8002164 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	689b      	ldr	r3, [r3, #8]
 8002140:	2b01      	cmp	r3, #1
 8002142:	d105      	bne.n	8002150 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002144:	2308      	movs	r3, #8
 8002146:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	69fa      	ldr	r2, [r7, #28]
 800214c:	611a      	str	r2, [r3, #16]
          break;
 800214e:	e009      	b.n	8002164 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002150:	2308      	movs	r3, #8
 8002152:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	69fa      	ldr	r2, [r7, #28]
 8002158:	615a      	str	r2, [r3, #20]
          break;
 800215a:	e003      	b.n	8002164 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800215c:	2300      	movs	r3, #0
 800215e:	623b      	str	r3, [r7, #32]
          break;
 8002160:	e000      	b.n	8002164 <HAL_GPIO_Init+0x130>
          break;
 8002162:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002164:	69bb      	ldr	r3, [r7, #24]
 8002166:	2bff      	cmp	r3, #255	@ 0xff
 8002168:	d801      	bhi.n	800216e <HAL_GPIO_Init+0x13a>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	e001      	b.n	8002172 <HAL_GPIO_Init+0x13e>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	3304      	adds	r3, #4
 8002172:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002174:	69bb      	ldr	r3, [r7, #24]
 8002176:	2bff      	cmp	r3, #255	@ 0xff
 8002178:	d802      	bhi.n	8002180 <HAL_GPIO_Init+0x14c>
 800217a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800217c:	009b      	lsls	r3, r3, #2
 800217e:	e002      	b.n	8002186 <HAL_GPIO_Init+0x152>
 8002180:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002182:	3b08      	subs	r3, #8
 8002184:	009b      	lsls	r3, r3, #2
 8002186:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002188:	697b      	ldr	r3, [r7, #20]
 800218a:	681a      	ldr	r2, [r3, #0]
 800218c:	210f      	movs	r1, #15
 800218e:	693b      	ldr	r3, [r7, #16]
 8002190:	fa01 f303 	lsl.w	r3, r1, r3
 8002194:	43db      	mvns	r3, r3
 8002196:	401a      	ands	r2, r3
 8002198:	6a39      	ldr	r1, [r7, #32]
 800219a:	693b      	ldr	r3, [r7, #16]
 800219c:	fa01 f303 	lsl.w	r3, r1, r3
 80021a0:	431a      	orrs	r2, r3
 80021a2:	697b      	ldr	r3, [r7, #20]
 80021a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	f000 80b1 	beq.w	8002316 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80021b4:	4b4d      	ldr	r3, [pc, #308]	@ (80022ec <HAL_GPIO_Init+0x2b8>)
 80021b6:	699b      	ldr	r3, [r3, #24]
 80021b8:	4a4c      	ldr	r2, [pc, #304]	@ (80022ec <HAL_GPIO_Init+0x2b8>)
 80021ba:	f043 0301 	orr.w	r3, r3, #1
 80021be:	6193      	str	r3, [r2, #24]
 80021c0:	4b4a      	ldr	r3, [pc, #296]	@ (80022ec <HAL_GPIO_Init+0x2b8>)
 80021c2:	699b      	ldr	r3, [r3, #24]
 80021c4:	f003 0301 	and.w	r3, r3, #1
 80021c8:	60bb      	str	r3, [r7, #8]
 80021ca:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80021cc:	4a48      	ldr	r2, [pc, #288]	@ (80022f0 <HAL_GPIO_Init+0x2bc>)
 80021ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021d0:	089b      	lsrs	r3, r3, #2
 80021d2:	3302      	adds	r3, #2
 80021d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021d8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80021da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021dc:	f003 0303 	and.w	r3, r3, #3
 80021e0:	009b      	lsls	r3, r3, #2
 80021e2:	220f      	movs	r2, #15
 80021e4:	fa02 f303 	lsl.w	r3, r2, r3
 80021e8:	43db      	mvns	r3, r3
 80021ea:	68fa      	ldr	r2, [r7, #12]
 80021ec:	4013      	ands	r3, r2
 80021ee:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	4a40      	ldr	r2, [pc, #256]	@ (80022f4 <HAL_GPIO_Init+0x2c0>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d013      	beq.n	8002220 <HAL_GPIO_Init+0x1ec>
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	4a3f      	ldr	r2, [pc, #252]	@ (80022f8 <HAL_GPIO_Init+0x2c4>)
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d00d      	beq.n	800221c <HAL_GPIO_Init+0x1e8>
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	4a3e      	ldr	r2, [pc, #248]	@ (80022fc <HAL_GPIO_Init+0x2c8>)
 8002204:	4293      	cmp	r3, r2
 8002206:	d007      	beq.n	8002218 <HAL_GPIO_Init+0x1e4>
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	4a3d      	ldr	r2, [pc, #244]	@ (8002300 <HAL_GPIO_Init+0x2cc>)
 800220c:	4293      	cmp	r3, r2
 800220e:	d101      	bne.n	8002214 <HAL_GPIO_Init+0x1e0>
 8002210:	2303      	movs	r3, #3
 8002212:	e006      	b.n	8002222 <HAL_GPIO_Init+0x1ee>
 8002214:	2304      	movs	r3, #4
 8002216:	e004      	b.n	8002222 <HAL_GPIO_Init+0x1ee>
 8002218:	2302      	movs	r3, #2
 800221a:	e002      	b.n	8002222 <HAL_GPIO_Init+0x1ee>
 800221c:	2301      	movs	r3, #1
 800221e:	e000      	b.n	8002222 <HAL_GPIO_Init+0x1ee>
 8002220:	2300      	movs	r3, #0
 8002222:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002224:	f002 0203 	and.w	r2, r2, #3
 8002228:	0092      	lsls	r2, r2, #2
 800222a:	4093      	lsls	r3, r2
 800222c:	68fa      	ldr	r2, [r7, #12]
 800222e:	4313      	orrs	r3, r2
 8002230:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002232:	492f      	ldr	r1, [pc, #188]	@ (80022f0 <HAL_GPIO_Init+0x2bc>)
 8002234:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002236:	089b      	lsrs	r3, r3, #2
 8002238:	3302      	adds	r3, #2
 800223a:	68fa      	ldr	r2, [r7, #12]
 800223c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002248:	2b00      	cmp	r3, #0
 800224a:	d006      	beq.n	800225a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800224c:	4b2d      	ldr	r3, [pc, #180]	@ (8002304 <HAL_GPIO_Init+0x2d0>)
 800224e:	689a      	ldr	r2, [r3, #8]
 8002250:	492c      	ldr	r1, [pc, #176]	@ (8002304 <HAL_GPIO_Init+0x2d0>)
 8002252:	69bb      	ldr	r3, [r7, #24]
 8002254:	4313      	orrs	r3, r2
 8002256:	608b      	str	r3, [r1, #8]
 8002258:	e006      	b.n	8002268 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800225a:	4b2a      	ldr	r3, [pc, #168]	@ (8002304 <HAL_GPIO_Init+0x2d0>)
 800225c:	689a      	ldr	r2, [r3, #8]
 800225e:	69bb      	ldr	r3, [r7, #24]
 8002260:	43db      	mvns	r3, r3
 8002262:	4928      	ldr	r1, [pc, #160]	@ (8002304 <HAL_GPIO_Init+0x2d0>)
 8002264:	4013      	ands	r3, r2
 8002266:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002270:	2b00      	cmp	r3, #0
 8002272:	d006      	beq.n	8002282 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002274:	4b23      	ldr	r3, [pc, #140]	@ (8002304 <HAL_GPIO_Init+0x2d0>)
 8002276:	68da      	ldr	r2, [r3, #12]
 8002278:	4922      	ldr	r1, [pc, #136]	@ (8002304 <HAL_GPIO_Init+0x2d0>)
 800227a:	69bb      	ldr	r3, [r7, #24]
 800227c:	4313      	orrs	r3, r2
 800227e:	60cb      	str	r3, [r1, #12]
 8002280:	e006      	b.n	8002290 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002282:	4b20      	ldr	r3, [pc, #128]	@ (8002304 <HAL_GPIO_Init+0x2d0>)
 8002284:	68da      	ldr	r2, [r3, #12]
 8002286:	69bb      	ldr	r3, [r7, #24]
 8002288:	43db      	mvns	r3, r3
 800228a:	491e      	ldr	r1, [pc, #120]	@ (8002304 <HAL_GPIO_Init+0x2d0>)
 800228c:	4013      	ands	r3, r2
 800228e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002298:	2b00      	cmp	r3, #0
 800229a:	d006      	beq.n	80022aa <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800229c:	4b19      	ldr	r3, [pc, #100]	@ (8002304 <HAL_GPIO_Init+0x2d0>)
 800229e:	685a      	ldr	r2, [r3, #4]
 80022a0:	4918      	ldr	r1, [pc, #96]	@ (8002304 <HAL_GPIO_Init+0x2d0>)
 80022a2:	69bb      	ldr	r3, [r7, #24]
 80022a4:	4313      	orrs	r3, r2
 80022a6:	604b      	str	r3, [r1, #4]
 80022a8:	e006      	b.n	80022b8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80022aa:	4b16      	ldr	r3, [pc, #88]	@ (8002304 <HAL_GPIO_Init+0x2d0>)
 80022ac:	685a      	ldr	r2, [r3, #4]
 80022ae:	69bb      	ldr	r3, [r7, #24]
 80022b0:	43db      	mvns	r3, r3
 80022b2:	4914      	ldr	r1, [pc, #80]	@ (8002304 <HAL_GPIO_Init+0x2d0>)
 80022b4:	4013      	ands	r3, r2
 80022b6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d021      	beq.n	8002308 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80022c4:	4b0f      	ldr	r3, [pc, #60]	@ (8002304 <HAL_GPIO_Init+0x2d0>)
 80022c6:	681a      	ldr	r2, [r3, #0]
 80022c8:	490e      	ldr	r1, [pc, #56]	@ (8002304 <HAL_GPIO_Init+0x2d0>)
 80022ca:	69bb      	ldr	r3, [r7, #24]
 80022cc:	4313      	orrs	r3, r2
 80022ce:	600b      	str	r3, [r1, #0]
 80022d0:	e021      	b.n	8002316 <HAL_GPIO_Init+0x2e2>
 80022d2:	bf00      	nop
 80022d4:	10320000 	.word	0x10320000
 80022d8:	10310000 	.word	0x10310000
 80022dc:	10220000 	.word	0x10220000
 80022e0:	10210000 	.word	0x10210000
 80022e4:	10120000 	.word	0x10120000
 80022e8:	10110000 	.word	0x10110000
 80022ec:	40021000 	.word	0x40021000
 80022f0:	40010000 	.word	0x40010000
 80022f4:	40010800 	.word	0x40010800
 80022f8:	40010c00 	.word	0x40010c00
 80022fc:	40011000 	.word	0x40011000
 8002300:	40011400 	.word	0x40011400
 8002304:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002308:	4b0b      	ldr	r3, [pc, #44]	@ (8002338 <HAL_GPIO_Init+0x304>)
 800230a:	681a      	ldr	r2, [r3, #0]
 800230c:	69bb      	ldr	r3, [r7, #24]
 800230e:	43db      	mvns	r3, r3
 8002310:	4909      	ldr	r1, [pc, #36]	@ (8002338 <HAL_GPIO_Init+0x304>)
 8002312:	4013      	ands	r3, r2
 8002314:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002316:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002318:	3301      	adds	r3, #1
 800231a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	681a      	ldr	r2, [r3, #0]
 8002320:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002322:	fa22 f303 	lsr.w	r3, r2, r3
 8002326:	2b00      	cmp	r3, #0
 8002328:	f47f ae8e 	bne.w	8002048 <HAL_GPIO_Init+0x14>
  }
}
 800232c:	bf00      	nop
 800232e:	bf00      	nop
 8002330:	372c      	adds	r7, #44	@ 0x2c
 8002332:	46bd      	mov	sp, r7
 8002334:	bc80      	pop	{r7}
 8002336:	4770      	bx	lr
 8002338:	40010400 	.word	0x40010400

0800233c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800233c:	b480      	push	{r7}
 800233e:	b083      	sub	sp, #12
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
 8002344:	460b      	mov	r3, r1
 8002346:	807b      	strh	r3, [r7, #2]
 8002348:	4613      	mov	r3, r2
 800234a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800234c:	787b      	ldrb	r3, [r7, #1]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d003      	beq.n	800235a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002352:	887a      	ldrh	r2, [r7, #2]
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002358:	e003      	b.n	8002362 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800235a:	887b      	ldrh	r3, [r7, #2]
 800235c:	041a      	lsls	r2, r3, #16
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	611a      	str	r2, [r3, #16]
}
 8002362:	bf00      	nop
 8002364:	370c      	adds	r7, #12
 8002366:	46bd      	mov	sp, r7
 8002368:	bc80      	pop	{r7}
 800236a:	4770      	bx	lr

0800236c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b086      	sub	sp, #24
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d101      	bne.n	800237e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800237a:	2301      	movs	r3, #1
 800237c:	e272      	b.n	8002864 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f003 0301 	and.w	r3, r3, #1
 8002386:	2b00      	cmp	r3, #0
 8002388:	f000 8087 	beq.w	800249a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800238c:	4b92      	ldr	r3, [pc, #584]	@ (80025d8 <HAL_RCC_OscConfig+0x26c>)
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	f003 030c 	and.w	r3, r3, #12
 8002394:	2b04      	cmp	r3, #4
 8002396:	d00c      	beq.n	80023b2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002398:	4b8f      	ldr	r3, [pc, #572]	@ (80025d8 <HAL_RCC_OscConfig+0x26c>)
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	f003 030c 	and.w	r3, r3, #12
 80023a0:	2b08      	cmp	r3, #8
 80023a2:	d112      	bne.n	80023ca <HAL_RCC_OscConfig+0x5e>
 80023a4:	4b8c      	ldr	r3, [pc, #560]	@ (80025d8 <HAL_RCC_OscConfig+0x26c>)
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80023ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80023b0:	d10b      	bne.n	80023ca <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023b2:	4b89      	ldr	r3, [pc, #548]	@ (80025d8 <HAL_RCC_OscConfig+0x26c>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d06c      	beq.n	8002498 <HAL_RCC_OscConfig+0x12c>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d168      	bne.n	8002498 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80023c6:	2301      	movs	r3, #1
 80023c8:	e24c      	b.n	8002864 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80023d2:	d106      	bne.n	80023e2 <HAL_RCC_OscConfig+0x76>
 80023d4:	4b80      	ldr	r3, [pc, #512]	@ (80025d8 <HAL_RCC_OscConfig+0x26c>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a7f      	ldr	r2, [pc, #508]	@ (80025d8 <HAL_RCC_OscConfig+0x26c>)
 80023da:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023de:	6013      	str	r3, [r2, #0]
 80023e0:	e02e      	b.n	8002440 <HAL_RCC_OscConfig+0xd4>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d10c      	bne.n	8002404 <HAL_RCC_OscConfig+0x98>
 80023ea:	4b7b      	ldr	r3, [pc, #492]	@ (80025d8 <HAL_RCC_OscConfig+0x26c>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4a7a      	ldr	r2, [pc, #488]	@ (80025d8 <HAL_RCC_OscConfig+0x26c>)
 80023f0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80023f4:	6013      	str	r3, [r2, #0]
 80023f6:	4b78      	ldr	r3, [pc, #480]	@ (80025d8 <HAL_RCC_OscConfig+0x26c>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a77      	ldr	r2, [pc, #476]	@ (80025d8 <HAL_RCC_OscConfig+0x26c>)
 80023fc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002400:	6013      	str	r3, [r2, #0]
 8002402:	e01d      	b.n	8002440 <HAL_RCC_OscConfig+0xd4>
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800240c:	d10c      	bne.n	8002428 <HAL_RCC_OscConfig+0xbc>
 800240e:	4b72      	ldr	r3, [pc, #456]	@ (80025d8 <HAL_RCC_OscConfig+0x26c>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a71      	ldr	r2, [pc, #452]	@ (80025d8 <HAL_RCC_OscConfig+0x26c>)
 8002414:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002418:	6013      	str	r3, [r2, #0]
 800241a:	4b6f      	ldr	r3, [pc, #444]	@ (80025d8 <HAL_RCC_OscConfig+0x26c>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4a6e      	ldr	r2, [pc, #440]	@ (80025d8 <HAL_RCC_OscConfig+0x26c>)
 8002420:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002424:	6013      	str	r3, [r2, #0]
 8002426:	e00b      	b.n	8002440 <HAL_RCC_OscConfig+0xd4>
 8002428:	4b6b      	ldr	r3, [pc, #428]	@ (80025d8 <HAL_RCC_OscConfig+0x26c>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a6a      	ldr	r2, [pc, #424]	@ (80025d8 <HAL_RCC_OscConfig+0x26c>)
 800242e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002432:	6013      	str	r3, [r2, #0]
 8002434:	4b68      	ldr	r3, [pc, #416]	@ (80025d8 <HAL_RCC_OscConfig+0x26c>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a67      	ldr	r2, [pc, #412]	@ (80025d8 <HAL_RCC_OscConfig+0x26c>)
 800243a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800243e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d013      	beq.n	8002470 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002448:	f7ff f8da 	bl	8001600 <HAL_GetTick>
 800244c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800244e:	e008      	b.n	8002462 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002450:	f7ff f8d6 	bl	8001600 <HAL_GetTick>
 8002454:	4602      	mov	r2, r0
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	1ad3      	subs	r3, r2, r3
 800245a:	2b64      	cmp	r3, #100	@ 0x64
 800245c:	d901      	bls.n	8002462 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800245e:	2303      	movs	r3, #3
 8002460:	e200      	b.n	8002864 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002462:	4b5d      	ldr	r3, [pc, #372]	@ (80025d8 <HAL_RCC_OscConfig+0x26c>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800246a:	2b00      	cmp	r3, #0
 800246c:	d0f0      	beq.n	8002450 <HAL_RCC_OscConfig+0xe4>
 800246e:	e014      	b.n	800249a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002470:	f7ff f8c6 	bl	8001600 <HAL_GetTick>
 8002474:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002476:	e008      	b.n	800248a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002478:	f7ff f8c2 	bl	8001600 <HAL_GetTick>
 800247c:	4602      	mov	r2, r0
 800247e:	693b      	ldr	r3, [r7, #16]
 8002480:	1ad3      	subs	r3, r2, r3
 8002482:	2b64      	cmp	r3, #100	@ 0x64
 8002484:	d901      	bls.n	800248a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002486:	2303      	movs	r3, #3
 8002488:	e1ec      	b.n	8002864 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800248a:	4b53      	ldr	r3, [pc, #332]	@ (80025d8 <HAL_RCC_OscConfig+0x26c>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002492:	2b00      	cmp	r3, #0
 8002494:	d1f0      	bne.n	8002478 <HAL_RCC_OscConfig+0x10c>
 8002496:	e000      	b.n	800249a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002498:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f003 0302 	and.w	r3, r3, #2
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d063      	beq.n	800256e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80024a6:	4b4c      	ldr	r3, [pc, #304]	@ (80025d8 <HAL_RCC_OscConfig+0x26c>)
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	f003 030c 	and.w	r3, r3, #12
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d00b      	beq.n	80024ca <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80024b2:	4b49      	ldr	r3, [pc, #292]	@ (80025d8 <HAL_RCC_OscConfig+0x26c>)
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	f003 030c 	and.w	r3, r3, #12
 80024ba:	2b08      	cmp	r3, #8
 80024bc:	d11c      	bne.n	80024f8 <HAL_RCC_OscConfig+0x18c>
 80024be:	4b46      	ldr	r3, [pc, #280]	@ (80025d8 <HAL_RCC_OscConfig+0x26c>)
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d116      	bne.n	80024f8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024ca:	4b43      	ldr	r3, [pc, #268]	@ (80025d8 <HAL_RCC_OscConfig+0x26c>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f003 0302 	and.w	r3, r3, #2
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d005      	beq.n	80024e2 <HAL_RCC_OscConfig+0x176>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	691b      	ldr	r3, [r3, #16]
 80024da:	2b01      	cmp	r3, #1
 80024dc:	d001      	beq.n	80024e2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80024de:	2301      	movs	r3, #1
 80024e0:	e1c0      	b.n	8002864 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024e2:	4b3d      	ldr	r3, [pc, #244]	@ (80025d8 <HAL_RCC_OscConfig+0x26c>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	695b      	ldr	r3, [r3, #20]
 80024ee:	00db      	lsls	r3, r3, #3
 80024f0:	4939      	ldr	r1, [pc, #228]	@ (80025d8 <HAL_RCC_OscConfig+0x26c>)
 80024f2:	4313      	orrs	r3, r2
 80024f4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024f6:	e03a      	b.n	800256e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	691b      	ldr	r3, [r3, #16]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d020      	beq.n	8002542 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002500:	4b36      	ldr	r3, [pc, #216]	@ (80025dc <HAL_RCC_OscConfig+0x270>)
 8002502:	2201      	movs	r2, #1
 8002504:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002506:	f7ff f87b 	bl	8001600 <HAL_GetTick>
 800250a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800250c:	e008      	b.n	8002520 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800250e:	f7ff f877 	bl	8001600 <HAL_GetTick>
 8002512:	4602      	mov	r2, r0
 8002514:	693b      	ldr	r3, [r7, #16]
 8002516:	1ad3      	subs	r3, r2, r3
 8002518:	2b02      	cmp	r3, #2
 800251a:	d901      	bls.n	8002520 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800251c:	2303      	movs	r3, #3
 800251e:	e1a1      	b.n	8002864 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002520:	4b2d      	ldr	r3, [pc, #180]	@ (80025d8 <HAL_RCC_OscConfig+0x26c>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f003 0302 	and.w	r3, r3, #2
 8002528:	2b00      	cmp	r3, #0
 800252a:	d0f0      	beq.n	800250e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800252c:	4b2a      	ldr	r3, [pc, #168]	@ (80025d8 <HAL_RCC_OscConfig+0x26c>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	695b      	ldr	r3, [r3, #20]
 8002538:	00db      	lsls	r3, r3, #3
 800253a:	4927      	ldr	r1, [pc, #156]	@ (80025d8 <HAL_RCC_OscConfig+0x26c>)
 800253c:	4313      	orrs	r3, r2
 800253e:	600b      	str	r3, [r1, #0]
 8002540:	e015      	b.n	800256e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002542:	4b26      	ldr	r3, [pc, #152]	@ (80025dc <HAL_RCC_OscConfig+0x270>)
 8002544:	2200      	movs	r2, #0
 8002546:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002548:	f7ff f85a 	bl	8001600 <HAL_GetTick>
 800254c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800254e:	e008      	b.n	8002562 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002550:	f7ff f856 	bl	8001600 <HAL_GetTick>
 8002554:	4602      	mov	r2, r0
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	1ad3      	subs	r3, r2, r3
 800255a:	2b02      	cmp	r3, #2
 800255c:	d901      	bls.n	8002562 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800255e:	2303      	movs	r3, #3
 8002560:	e180      	b.n	8002864 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002562:	4b1d      	ldr	r3, [pc, #116]	@ (80025d8 <HAL_RCC_OscConfig+0x26c>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f003 0302 	and.w	r3, r3, #2
 800256a:	2b00      	cmp	r3, #0
 800256c:	d1f0      	bne.n	8002550 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f003 0308 	and.w	r3, r3, #8
 8002576:	2b00      	cmp	r3, #0
 8002578:	d03a      	beq.n	80025f0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	699b      	ldr	r3, [r3, #24]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d019      	beq.n	80025b6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002582:	4b17      	ldr	r3, [pc, #92]	@ (80025e0 <HAL_RCC_OscConfig+0x274>)
 8002584:	2201      	movs	r2, #1
 8002586:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002588:	f7ff f83a 	bl	8001600 <HAL_GetTick>
 800258c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800258e:	e008      	b.n	80025a2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002590:	f7ff f836 	bl	8001600 <HAL_GetTick>
 8002594:	4602      	mov	r2, r0
 8002596:	693b      	ldr	r3, [r7, #16]
 8002598:	1ad3      	subs	r3, r2, r3
 800259a:	2b02      	cmp	r3, #2
 800259c:	d901      	bls.n	80025a2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800259e:	2303      	movs	r3, #3
 80025a0:	e160      	b.n	8002864 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025a2:	4b0d      	ldr	r3, [pc, #52]	@ (80025d8 <HAL_RCC_OscConfig+0x26c>)
 80025a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025a6:	f003 0302 	and.w	r3, r3, #2
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d0f0      	beq.n	8002590 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80025ae:	2001      	movs	r0, #1
 80025b0:	f000 faba 	bl	8002b28 <RCC_Delay>
 80025b4:	e01c      	b.n	80025f0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025b6:	4b0a      	ldr	r3, [pc, #40]	@ (80025e0 <HAL_RCC_OscConfig+0x274>)
 80025b8:	2200      	movs	r2, #0
 80025ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025bc:	f7ff f820 	bl	8001600 <HAL_GetTick>
 80025c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025c2:	e00f      	b.n	80025e4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025c4:	f7ff f81c 	bl	8001600 <HAL_GetTick>
 80025c8:	4602      	mov	r2, r0
 80025ca:	693b      	ldr	r3, [r7, #16]
 80025cc:	1ad3      	subs	r3, r2, r3
 80025ce:	2b02      	cmp	r3, #2
 80025d0:	d908      	bls.n	80025e4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80025d2:	2303      	movs	r3, #3
 80025d4:	e146      	b.n	8002864 <HAL_RCC_OscConfig+0x4f8>
 80025d6:	bf00      	nop
 80025d8:	40021000 	.word	0x40021000
 80025dc:	42420000 	.word	0x42420000
 80025e0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025e4:	4b92      	ldr	r3, [pc, #584]	@ (8002830 <HAL_RCC_OscConfig+0x4c4>)
 80025e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025e8:	f003 0302 	and.w	r3, r3, #2
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d1e9      	bne.n	80025c4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f003 0304 	and.w	r3, r3, #4
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	f000 80a6 	beq.w	800274a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025fe:	2300      	movs	r3, #0
 8002600:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002602:	4b8b      	ldr	r3, [pc, #556]	@ (8002830 <HAL_RCC_OscConfig+0x4c4>)
 8002604:	69db      	ldr	r3, [r3, #28]
 8002606:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800260a:	2b00      	cmp	r3, #0
 800260c:	d10d      	bne.n	800262a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800260e:	4b88      	ldr	r3, [pc, #544]	@ (8002830 <HAL_RCC_OscConfig+0x4c4>)
 8002610:	69db      	ldr	r3, [r3, #28]
 8002612:	4a87      	ldr	r2, [pc, #540]	@ (8002830 <HAL_RCC_OscConfig+0x4c4>)
 8002614:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002618:	61d3      	str	r3, [r2, #28]
 800261a:	4b85      	ldr	r3, [pc, #532]	@ (8002830 <HAL_RCC_OscConfig+0x4c4>)
 800261c:	69db      	ldr	r3, [r3, #28]
 800261e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002622:	60bb      	str	r3, [r7, #8]
 8002624:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002626:	2301      	movs	r3, #1
 8002628:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800262a:	4b82      	ldr	r3, [pc, #520]	@ (8002834 <HAL_RCC_OscConfig+0x4c8>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002632:	2b00      	cmp	r3, #0
 8002634:	d118      	bne.n	8002668 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002636:	4b7f      	ldr	r3, [pc, #508]	@ (8002834 <HAL_RCC_OscConfig+0x4c8>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a7e      	ldr	r2, [pc, #504]	@ (8002834 <HAL_RCC_OscConfig+0x4c8>)
 800263c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002640:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002642:	f7fe ffdd 	bl	8001600 <HAL_GetTick>
 8002646:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002648:	e008      	b.n	800265c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800264a:	f7fe ffd9 	bl	8001600 <HAL_GetTick>
 800264e:	4602      	mov	r2, r0
 8002650:	693b      	ldr	r3, [r7, #16]
 8002652:	1ad3      	subs	r3, r2, r3
 8002654:	2b64      	cmp	r3, #100	@ 0x64
 8002656:	d901      	bls.n	800265c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002658:	2303      	movs	r3, #3
 800265a:	e103      	b.n	8002864 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800265c:	4b75      	ldr	r3, [pc, #468]	@ (8002834 <HAL_RCC_OscConfig+0x4c8>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002664:	2b00      	cmp	r3, #0
 8002666:	d0f0      	beq.n	800264a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	68db      	ldr	r3, [r3, #12]
 800266c:	2b01      	cmp	r3, #1
 800266e:	d106      	bne.n	800267e <HAL_RCC_OscConfig+0x312>
 8002670:	4b6f      	ldr	r3, [pc, #444]	@ (8002830 <HAL_RCC_OscConfig+0x4c4>)
 8002672:	6a1b      	ldr	r3, [r3, #32]
 8002674:	4a6e      	ldr	r2, [pc, #440]	@ (8002830 <HAL_RCC_OscConfig+0x4c4>)
 8002676:	f043 0301 	orr.w	r3, r3, #1
 800267a:	6213      	str	r3, [r2, #32]
 800267c:	e02d      	b.n	80026da <HAL_RCC_OscConfig+0x36e>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	68db      	ldr	r3, [r3, #12]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d10c      	bne.n	80026a0 <HAL_RCC_OscConfig+0x334>
 8002686:	4b6a      	ldr	r3, [pc, #424]	@ (8002830 <HAL_RCC_OscConfig+0x4c4>)
 8002688:	6a1b      	ldr	r3, [r3, #32]
 800268a:	4a69      	ldr	r2, [pc, #420]	@ (8002830 <HAL_RCC_OscConfig+0x4c4>)
 800268c:	f023 0301 	bic.w	r3, r3, #1
 8002690:	6213      	str	r3, [r2, #32]
 8002692:	4b67      	ldr	r3, [pc, #412]	@ (8002830 <HAL_RCC_OscConfig+0x4c4>)
 8002694:	6a1b      	ldr	r3, [r3, #32]
 8002696:	4a66      	ldr	r2, [pc, #408]	@ (8002830 <HAL_RCC_OscConfig+0x4c4>)
 8002698:	f023 0304 	bic.w	r3, r3, #4
 800269c:	6213      	str	r3, [r2, #32]
 800269e:	e01c      	b.n	80026da <HAL_RCC_OscConfig+0x36e>
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	68db      	ldr	r3, [r3, #12]
 80026a4:	2b05      	cmp	r3, #5
 80026a6:	d10c      	bne.n	80026c2 <HAL_RCC_OscConfig+0x356>
 80026a8:	4b61      	ldr	r3, [pc, #388]	@ (8002830 <HAL_RCC_OscConfig+0x4c4>)
 80026aa:	6a1b      	ldr	r3, [r3, #32]
 80026ac:	4a60      	ldr	r2, [pc, #384]	@ (8002830 <HAL_RCC_OscConfig+0x4c4>)
 80026ae:	f043 0304 	orr.w	r3, r3, #4
 80026b2:	6213      	str	r3, [r2, #32]
 80026b4:	4b5e      	ldr	r3, [pc, #376]	@ (8002830 <HAL_RCC_OscConfig+0x4c4>)
 80026b6:	6a1b      	ldr	r3, [r3, #32]
 80026b8:	4a5d      	ldr	r2, [pc, #372]	@ (8002830 <HAL_RCC_OscConfig+0x4c4>)
 80026ba:	f043 0301 	orr.w	r3, r3, #1
 80026be:	6213      	str	r3, [r2, #32]
 80026c0:	e00b      	b.n	80026da <HAL_RCC_OscConfig+0x36e>
 80026c2:	4b5b      	ldr	r3, [pc, #364]	@ (8002830 <HAL_RCC_OscConfig+0x4c4>)
 80026c4:	6a1b      	ldr	r3, [r3, #32]
 80026c6:	4a5a      	ldr	r2, [pc, #360]	@ (8002830 <HAL_RCC_OscConfig+0x4c4>)
 80026c8:	f023 0301 	bic.w	r3, r3, #1
 80026cc:	6213      	str	r3, [r2, #32]
 80026ce:	4b58      	ldr	r3, [pc, #352]	@ (8002830 <HAL_RCC_OscConfig+0x4c4>)
 80026d0:	6a1b      	ldr	r3, [r3, #32]
 80026d2:	4a57      	ldr	r2, [pc, #348]	@ (8002830 <HAL_RCC_OscConfig+0x4c4>)
 80026d4:	f023 0304 	bic.w	r3, r3, #4
 80026d8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	68db      	ldr	r3, [r3, #12]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d015      	beq.n	800270e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026e2:	f7fe ff8d 	bl	8001600 <HAL_GetTick>
 80026e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026e8:	e00a      	b.n	8002700 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026ea:	f7fe ff89 	bl	8001600 <HAL_GetTick>
 80026ee:	4602      	mov	r2, r0
 80026f0:	693b      	ldr	r3, [r7, #16]
 80026f2:	1ad3      	subs	r3, r2, r3
 80026f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d901      	bls.n	8002700 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80026fc:	2303      	movs	r3, #3
 80026fe:	e0b1      	b.n	8002864 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002700:	4b4b      	ldr	r3, [pc, #300]	@ (8002830 <HAL_RCC_OscConfig+0x4c4>)
 8002702:	6a1b      	ldr	r3, [r3, #32]
 8002704:	f003 0302 	and.w	r3, r3, #2
 8002708:	2b00      	cmp	r3, #0
 800270a:	d0ee      	beq.n	80026ea <HAL_RCC_OscConfig+0x37e>
 800270c:	e014      	b.n	8002738 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800270e:	f7fe ff77 	bl	8001600 <HAL_GetTick>
 8002712:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002714:	e00a      	b.n	800272c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002716:	f7fe ff73 	bl	8001600 <HAL_GetTick>
 800271a:	4602      	mov	r2, r0
 800271c:	693b      	ldr	r3, [r7, #16]
 800271e:	1ad3      	subs	r3, r2, r3
 8002720:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002724:	4293      	cmp	r3, r2
 8002726:	d901      	bls.n	800272c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002728:	2303      	movs	r3, #3
 800272a:	e09b      	b.n	8002864 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800272c:	4b40      	ldr	r3, [pc, #256]	@ (8002830 <HAL_RCC_OscConfig+0x4c4>)
 800272e:	6a1b      	ldr	r3, [r3, #32]
 8002730:	f003 0302 	and.w	r3, r3, #2
 8002734:	2b00      	cmp	r3, #0
 8002736:	d1ee      	bne.n	8002716 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002738:	7dfb      	ldrb	r3, [r7, #23]
 800273a:	2b01      	cmp	r3, #1
 800273c:	d105      	bne.n	800274a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800273e:	4b3c      	ldr	r3, [pc, #240]	@ (8002830 <HAL_RCC_OscConfig+0x4c4>)
 8002740:	69db      	ldr	r3, [r3, #28]
 8002742:	4a3b      	ldr	r2, [pc, #236]	@ (8002830 <HAL_RCC_OscConfig+0x4c4>)
 8002744:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002748:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	69db      	ldr	r3, [r3, #28]
 800274e:	2b00      	cmp	r3, #0
 8002750:	f000 8087 	beq.w	8002862 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002754:	4b36      	ldr	r3, [pc, #216]	@ (8002830 <HAL_RCC_OscConfig+0x4c4>)
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	f003 030c 	and.w	r3, r3, #12
 800275c:	2b08      	cmp	r3, #8
 800275e:	d061      	beq.n	8002824 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	69db      	ldr	r3, [r3, #28]
 8002764:	2b02      	cmp	r3, #2
 8002766:	d146      	bne.n	80027f6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002768:	4b33      	ldr	r3, [pc, #204]	@ (8002838 <HAL_RCC_OscConfig+0x4cc>)
 800276a:	2200      	movs	r2, #0
 800276c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800276e:	f7fe ff47 	bl	8001600 <HAL_GetTick>
 8002772:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002774:	e008      	b.n	8002788 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002776:	f7fe ff43 	bl	8001600 <HAL_GetTick>
 800277a:	4602      	mov	r2, r0
 800277c:	693b      	ldr	r3, [r7, #16]
 800277e:	1ad3      	subs	r3, r2, r3
 8002780:	2b02      	cmp	r3, #2
 8002782:	d901      	bls.n	8002788 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002784:	2303      	movs	r3, #3
 8002786:	e06d      	b.n	8002864 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002788:	4b29      	ldr	r3, [pc, #164]	@ (8002830 <HAL_RCC_OscConfig+0x4c4>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002790:	2b00      	cmp	r3, #0
 8002792:	d1f0      	bne.n	8002776 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6a1b      	ldr	r3, [r3, #32]
 8002798:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800279c:	d108      	bne.n	80027b0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800279e:	4b24      	ldr	r3, [pc, #144]	@ (8002830 <HAL_RCC_OscConfig+0x4c4>)
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	689b      	ldr	r3, [r3, #8]
 80027aa:	4921      	ldr	r1, [pc, #132]	@ (8002830 <HAL_RCC_OscConfig+0x4c4>)
 80027ac:	4313      	orrs	r3, r2
 80027ae:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80027b0:	4b1f      	ldr	r3, [pc, #124]	@ (8002830 <HAL_RCC_OscConfig+0x4c4>)
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6a19      	ldr	r1, [r3, #32]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027c0:	430b      	orrs	r3, r1
 80027c2:	491b      	ldr	r1, [pc, #108]	@ (8002830 <HAL_RCC_OscConfig+0x4c4>)
 80027c4:	4313      	orrs	r3, r2
 80027c6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027c8:	4b1b      	ldr	r3, [pc, #108]	@ (8002838 <HAL_RCC_OscConfig+0x4cc>)
 80027ca:	2201      	movs	r2, #1
 80027cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027ce:	f7fe ff17 	bl	8001600 <HAL_GetTick>
 80027d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80027d4:	e008      	b.n	80027e8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027d6:	f7fe ff13 	bl	8001600 <HAL_GetTick>
 80027da:	4602      	mov	r2, r0
 80027dc:	693b      	ldr	r3, [r7, #16]
 80027de:	1ad3      	subs	r3, r2, r3
 80027e0:	2b02      	cmp	r3, #2
 80027e2:	d901      	bls.n	80027e8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80027e4:	2303      	movs	r3, #3
 80027e6:	e03d      	b.n	8002864 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80027e8:	4b11      	ldr	r3, [pc, #68]	@ (8002830 <HAL_RCC_OscConfig+0x4c4>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d0f0      	beq.n	80027d6 <HAL_RCC_OscConfig+0x46a>
 80027f4:	e035      	b.n	8002862 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027f6:	4b10      	ldr	r3, [pc, #64]	@ (8002838 <HAL_RCC_OscConfig+0x4cc>)
 80027f8:	2200      	movs	r2, #0
 80027fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027fc:	f7fe ff00 	bl	8001600 <HAL_GetTick>
 8002800:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002802:	e008      	b.n	8002816 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002804:	f7fe fefc 	bl	8001600 <HAL_GetTick>
 8002808:	4602      	mov	r2, r0
 800280a:	693b      	ldr	r3, [r7, #16]
 800280c:	1ad3      	subs	r3, r2, r3
 800280e:	2b02      	cmp	r3, #2
 8002810:	d901      	bls.n	8002816 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002812:	2303      	movs	r3, #3
 8002814:	e026      	b.n	8002864 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002816:	4b06      	ldr	r3, [pc, #24]	@ (8002830 <HAL_RCC_OscConfig+0x4c4>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800281e:	2b00      	cmp	r3, #0
 8002820:	d1f0      	bne.n	8002804 <HAL_RCC_OscConfig+0x498>
 8002822:	e01e      	b.n	8002862 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	69db      	ldr	r3, [r3, #28]
 8002828:	2b01      	cmp	r3, #1
 800282a:	d107      	bne.n	800283c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800282c:	2301      	movs	r3, #1
 800282e:	e019      	b.n	8002864 <HAL_RCC_OscConfig+0x4f8>
 8002830:	40021000 	.word	0x40021000
 8002834:	40007000 	.word	0x40007000
 8002838:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800283c:	4b0b      	ldr	r3, [pc, #44]	@ (800286c <HAL_RCC_OscConfig+0x500>)
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6a1b      	ldr	r3, [r3, #32]
 800284c:	429a      	cmp	r2, r3
 800284e:	d106      	bne.n	800285e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800285a:	429a      	cmp	r2, r3
 800285c:	d001      	beq.n	8002862 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800285e:	2301      	movs	r3, #1
 8002860:	e000      	b.n	8002864 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002862:	2300      	movs	r3, #0
}
 8002864:	4618      	mov	r0, r3
 8002866:	3718      	adds	r7, #24
 8002868:	46bd      	mov	sp, r7
 800286a:	bd80      	pop	{r7, pc}
 800286c:	40021000 	.word	0x40021000

08002870 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b084      	sub	sp, #16
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
 8002878:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d101      	bne.n	8002884 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002880:	2301      	movs	r3, #1
 8002882:	e0d0      	b.n	8002a26 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002884:	4b6a      	ldr	r3, [pc, #424]	@ (8002a30 <HAL_RCC_ClockConfig+0x1c0>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f003 0307 	and.w	r3, r3, #7
 800288c:	683a      	ldr	r2, [r7, #0]
 800288e:	429a      	cmp	r2, r3
 8002890:	d910      	bls.n	80028b4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002892:	4b67      	ldr	r3, [pc, #412]	@ (8002a30 <HAL_RCC_ClockConfig+0x1c0>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f023 0207 	bic.w	r2, r3, #7
 800289a:	4965      	ldr	r1, [pc, #404]	@ (8002a30 <HAL_RCC_ClockConfig+0x1c0>)
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	4313      	orrs	r3, r2
 80028a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028a2:	4b63      	ldr	r3, [pc, #396]	@ (8002a30 <HAL_RCC_ClockConfig+0x1c0>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f003 0307 	and.w	r3, r3, #7
 80028aa:	683a      	ldr	r2, [r7, #0]
 80028ac:	429a      	cmp	r2, r3
 80028ae:	d001      	beq.n	80028b4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80028b0:	2301      	movs	r3, #1
 80028b2:	e0b8      	b.n	8002a26 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f003 0302 	and.w	r3, r3, #2
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d020      	beq.n	8002902 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f003 0304 	and.w	r3, r3, #4
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d005      	beq.n	80028d8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80028cc:	4b59      	ldr	r3, [pc, #356]	@ (8002a34 <HAL_RCC_ClockConfig+0x1c4>)
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	4a58      	ldr	r2, [pc, #352]	@ (8002a34 <HAL_RCC_ClockConfig+0x1c4>)
 80028d2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80028d6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f003 0308 	and.w	r3, r3, #8
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d005      	beq.n	80028f0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80028e4:	4b53      	ldr	r3, [pc, #332]	@ (8002a34 <HAL_RCC_ClockConfig+0x1c4>)
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	4a52      	ldr	r2, [pc, #328]	@ (8002a34 <HAL_RCC_ClockConfig+0x1c4>)
 80028ea:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80028ee:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028f0:	4b50      	ldr	r3, [pc, #320]	@ (8002a34 <HAL_RCC_ClockConfig+0x1c4>)
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	689b      	ldr	r3, [r3, #8]
 80028fc:	494d      	ldr	r1, [pc, #308]	@ (8002a34 <HAL_RCC_ClockConfig+0x1c4>)
 80028fe:	4313      	orrs	r3, r2
 8002900:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f003 0301 	and.w	r3, r3, #1
 800290a:	2b00      	cmp	r3, #0
 800290c:	d040      	beq.n	8002990 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	2b01      	cmp	r3, #1
 8002914:	d107      	bne.n	8002926 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002916:	4b47      	ldr	r3, [pc, #284]	@ (8002a34 <HAL_RCC_ClockConfig+0x1c4>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800291e:	2b00      	cmp	r3, #0
 8002920:	d115      	bne.n	800294e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002922:	2301      	movs	r3, #1
 8002924:	e07f      	b.n	8002a26 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	2b02      	cmp	r3, #2
 800292c:	d107      	bne.n	800293e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800292e:	4b41      	ldr	r3, [pc, #260]	@ (8002a34 <HAL_RCC_ClockConfig+0x1c4>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002936:	2b00      	cmp	r3, #0
 8002938:	d109      	bne.n	800294e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800293a:	2301      	movs	r3, #1
 800293c:	e073      	b.n	8002a26 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800293e:	4b3d      	ldr	r3, [pc, #244]	@ (8002a34 <HAL_RCC_ClockConfig+0x1c4>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f003 0302 	and.w	r3, r3, #2
 8002946:	2b00      	cmp	r3, #0
 8002948:	d101      	bne.n	800294e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800294a:	2301      	movs	r3, #1
 800294c:	e06b      	b.n	8002a26 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800294e:	4b39      	ldr	r3, [pc, #228]	@ (8002a34 <HAL_RCC_ClockConfig+0x1c4>)
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	f023 0203 	bic.w	r2, r3, #3
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	4936      	ldr	r1, [pc, #216]	@ (8002a34 <HAL_RCC_ClockConfig+0x1c4>)
 800295c:	4313      	orrs	r3, r2
 800295e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002960:	f7fe fe4e 	bl	8001600 <HAL_GetTick>
 8002964:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002966:	e00a      	b.n	800297e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002968:	f7fe fe4a 	bl	8001600 <HAL_GetTick>
 800296c:	4602      	mov	r2, r0
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	1ad3      	subs	r3, r2, r3
 8002972:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002976:	4293      	cmp	r3, r2
 8002978:	d901      	bls.n	800297e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800297a:	2303      	movs	r3, #3
 800297c:	e053      	b.n	8002a26 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800297e:	4b2d      	ldr	r3, [pc, #180]	@ (8002a34 <HAL_RCC_ClockConfig+0x1c4>)
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	f003 020c 	and.w	r2, r3, #12
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	009b      	lsls	r3, r3, #2
 800298c:	429a      	cmp	r2, r3
 800298e:	d1eb      	bne.n	8002968 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002990:	4b27      	ldr	r3, [pc, #156]	@ (8002a30 <HAL_RCC_ClockConfig+0x1c0>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f003 0307 	and.w	r3, r3, #7
 8002998:	683a      	ldr	r2, [r7, #0]
 800299a:	429a      	cmp	r2, r3
 800299c:	d210      	bcs.n	80029c0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800299e:	4b24      	ldr	r3, [pc, #144]	@ (8002a30 <HAL_RCC_ClockConfig+0x1c0>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f023 0207 	bic.w	r2, r3, #7
 80029a6:	4922      	ldr	r1, [pc, #136]	@ (8002a30 <HAL_RCC_ClockConfig+0x1c0>)
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	4313      	orrs	r3, r2
 80029ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029ae:	4b20      	ldr	r3, [pc, #128]	@ (8002a30 <HAL_RCC_ClockConfig+0x1c0>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f003 0307 	and.w	r3, r3, #7
 80029b6:	683a      	ldr	r2, [r7, #0]
 80029b8:	429a      	cmp	r2, r3
 80029ba:	d001      	beq.n	80029c0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80029bc:	2301      	movs	r3, #1
 80029be:	e032      	b.n	8002a26 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f003 0304 	and.w	r3, r3, #4
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d008      	beq.n	80029de <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029cc:	4b19      	ldr	r3, [pc, #100]	@ (8002a34 <HAL_RCC_ClockConfig+0x1c4>)
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	68db      	ldr	r3, [r3, #12]
 80029d8:	4916      	ldr	r1, [pc, #88]	@ (8002a34 <HAL_RCC_ClockConfig+0x1c4>)
 80029da:	4313      	orrs	r3, r2
 80029dc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f003 0308 	and.w	r3, r3, #8
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d009      	beq.n	80029fe <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80029ea:	4b12      	ldr	r3, [pc, #72]	@ (8002a34 <HAL_RCC_ClockConfig+0x1c4>)
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	691b      	ldr	r3, [r3, #16]
 80029f6:	00db      	lsls	r3, r3, #3
 80029f8:	490e      	ldr	r1, [pc, #56]	@ (8002a34 <HAL_RCC_ClockConfig+0x1c4>)
 80029fa:	4313      	orrs	r3, r2
 80029fc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80029fe:	f000 f821 	bl	8002a44 <HAL_RCC_GetSysClockFreq>
 8002a02:	4602      	mov	r2, r0
 8002a04:	4b0b      	ldr	r3, [pc, #44]	@ (8002a34 <HAL_RCC_ClockConfig+0x1c4>)
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	091b      	lsrs	r3, r3, #4
 8002a0a:	f003 030f 	and.w	r3, r3, #15
 8002a0e:	490a      	ldr	r1, [pc, #40]	@ (8002a38 <HAL_RCC_ClockConfig+0x1c8>)
 8002a10:	5ccb      	ldrb	r3, [r1, r3]
 8002a12:	fa22 f303 	lsr.w	r3, r2, r3
 8002a16:	4a09      	ldr	r2, [pc, #36]	@ (8002a3c <HAL_RCC_ClockConfig+0x1cc>)
 8002a18:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002a1a:	4b09      	ldr	r3, [pc, #36]	@ (8002a40 <HAL_RCC_ClockConfig+0x1d0>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f7fe fdac 	bl	800157c <HAL_InitTick>

  return HAL_OK;
 8002a24:	2300      	movs	r3, #0
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	3710      	adds	r7, #16
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}
 8002a2e:	bf00      	nop
 8002a30:	40022000 	.word	0x40022000
 8002a34:	40021000 	.word	0x40021000
 8002a38:	08005770 	.word	0x08005770
 8002a3c:	20000000 	.word	0x20000000
 8002a40:	20000004 	.word	0x20000004

08002a44 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a44:	b480      	push	{r7}
 8002a46:	b087      	sub	sp, #28
 8002a48:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	60fb      	str	r3, [r7, #12]
 8002a4e:	2300      	movs	r3, #0
 8002a50:	60bb      	str	r3, [r7, #8]
 8002a52:	2300      	movs	r3, #0
 8002a54:	617b      	str	r3, [r7, #20]
 8002a56:	2300      	movs	r3, #0
 8002a58:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002a5e:	4b1e      	ldr	r3, [pc, #120]	@ (8002ad8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	f003 030c 	and.w	r3, r3, #12
 8002a6a:	2b04      	cmp	r3, #4
 8002a6c:	d002      	beq.n	8002a74 <HAL_RCC_GetSysClockFreq+0x30>
 8002a6e:	2b08      	cmp	r3, #8
 8002a70:	d003      	beq.n	8002a7a <HAL_RCC_GetSysClockFreq+0x36>
 8002a72:	e027      	b.n	8002ac4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002a74:	4b19      	ldr	r3, [pc, #100]	@ (8002adc <HAL_RCC_GetSysClockFreq+0x98>)
 8002a76:	613b      	str	r3, [r7, #16]
      break;
 8002a78:	e027      	b.n	8002aca <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	0c9b      	lsrs	r3, r3, #18
 8002a7e:	f003 030f 	and.w	r3, r3, #15
 8002a82:	4a17      	ldr	r2, [pc, #92]	@ (8002ae0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002a84:	5cd3      	ldrb	r3, [r2, r3]
 8002a86:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d010      	beq.n	8002ab4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002a92:	4b11      	ldr	r3, [pc, #68]	@ (8002ad8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	0c5b      	lsrs	r3, r3, #17
 8002a98:	f003 0301 	and.w	r3, r3, #1
 8002a9c:	4a11      	ldr	r2, [pc, #68]	@ (8002ae4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002a9e:	5cd3      	ldrb	r3, [r2, r3]
 8002aa0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	4a0d      	ldr	r2, [pc, #52]	@ (8002adc <HAL_RCC_GetSysClockFreq+0x98>)
 8002aa6:	fb03 f202 	mul.w	r2, r3, r2
 8002aaa:	68bb      	ldr	r3, [r7, #8]
 8002aac:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ab0:	617b      	str	r3, [r7, #20]
 8002ab2:	e004      	b.n	8002abe <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	4a0c      	ldr	r2, [pc, #48]	@ (8002ae8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002ab8:	fb02 f303 	mul.w	r3, r2, r3
 8002abc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002abe:	697b      	ldr	r3, [r7, #20]
 8002ac0:	613b      	str	r3, [r7, #16]
      break;
 8002ac2:	e002      	b.n	8002aca <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002ac4:	4b05      	ldr	r3, [pc, #20]	@ (8002adc <HAL_RCC_GetSysClockFreq+0x98>)
 8002ac6:	613b      	str	r3, [r7, #16]
      break;
 8002ac8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002aca:	693b      	ldr	r3, [r7, #16]
}
 8002acc:	4618      	mov	r0, r3
 8002ace:	371c      	adds	r7, #28
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bc80      	pop	{r7}
 8002ad4:	4770      	bx	lr
 8002ad6:	bf00      	nop
 8002ad8:	40021000 	.word	0x40021000
 8002adc:	007a1200 	.word	0x007a1200
 8002ae0:	08005788 	.word	0x08005788
 8002ae4:	08005798 	.word	0x08005798
 8002ae8:	003d0900 	.word	0x003d0900

08002aec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002aec:	b480      	push	{r7}
 8002aee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002af0:	4b02      	ldr	r3, [pc, #8]	@ (8002afc <HAL_RCC_GetHCLKFreq+0x10>)
 8002af2:	681b      	ldr	r3, [r3, #0]
}
 8002af4:	4618      	mov	r0, r3
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bc80      	pop	{r7}
 8002afa:	4770      	bx	lr
 8002afc:	20000000 	.word	0x20000000

08002b00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002b04:	f7ff fff2 	bl	8002aec <HAL_RCC_GetHCLKFreq>
 8002b08:	4602      	mov	r2, r0
 8002b0a:	4b05      	ldr	r3, [pc, #20]	@ (8002b20 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	0adb      	lsrs	r3, r3, #11
 8002b10:	f003 0307 	and.w	r3, r3, #7
 8002b14:	4903      	ldr	r1, [pc, #12]	@ (8002b24 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b16:	5ccb      	ldrb	r3, [r1, r3]
 8002b18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	bd80      	pop	{r7, pc}
 8002b20:	40021000 	.word	0x40021000
 8002b24:	08005780 	.word	0x08005780

08002b28 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b085      	sub	sp, #20
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002b30:	4b0a      	ldr	r3, [pc, #40]	@ (8002b5c <RCC_Delay+0x34>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a0a      	ldr	r2, [pc, #40]	@ (8002b60 <RCC_Delay+0x38>)
 8002b36:	fba2 2303 	umull	r2, r3, r2, r3
 8002b3a:	0a5b      	lsrs	r3, r3, #9
 8002b3c:	687a      	ldr	r2, [r7, #4]
 8002b3e:	fb02 f303 	mul.w	r3, r2, r3
 8002b42:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002b44:	bf00      	nop
  }
  while (Delay --);
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	1e5a      	subs	r2, r3, #1
 8002b4a:	60fa      	str	r2, [r7, #12]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d1f9      	bne.n	8002b44 <RCC_Delay+0x1c>
}
 8002b50:	bf00      	nop
 8002b52:	bf00      	nop
 8002b54:	3714      	adds	r7, #20
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bc80      	pop	{r7}
 8002b5a:	4770      	bx	lr
 8002b5c:	20000000 	.word	0x20000000
 8002b60:	10624dd3 	.word	0x10624dd3

08002b64 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b086      	sub	sp, #24
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	613b      	str	r3, [r7, #16]
 8002b70:	2300      	movs	r3, #0
 8002b72:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f003 0301 	and.w	r3, r3, #1
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d07d      	beq.n	8002c7c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002b80:	2300      	movs	r3, #0
 8002b82:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b84:	4b4f      	ldr	r3, [pc, #316]	@ (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b86:	69db      	ldr	r3, [r3, #28]
 8002b88:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d10d      	bne.n	8002bac <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b90:	4b4c      	ldr	r3, [pc, #304]	@ (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b92:	69db      	ldr	r3, [r3, #28]
 8002b94:	4a4b      	ldr	r2, [pc, #300]	@ (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b96:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b9a:	61d3      	str	r3, [r2, #28]
 8002b9c:	4b49      	ldr	r3, [pc, #292]	@ (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b9e:	69db      	ldr	r3, [r3, #28]
 8002ba0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ba4:	60bb      	str	r3, [r7, #8]
 8002ba6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ba8:	2301      	movs	r3, #1
 8002baa:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bac:	4b46      	ldr	r3, [pc, #280]	@ (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d118      	bne.n	8002bea <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002bb8:	4b43      	ldr	r3, [pc, #268]	@ (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a42      	ldr	r2, [pc, #264]	@ (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002bbe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002bc2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002bc4:	f7fe fd1c 	bl	8001600 <HAL_GetTick>
 8002bc8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bca:	e008      	b.n	8002bde <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bcc:	f7fe fd18 	bl	8001600 <HAL_GetTick>
 8002bd0:	4602      	mov	r2, r0
 8002bd2:	693b      	ldr	r3, [r7, #16]
 8002bd4:	1ad3      	subs	r3, r2, r3
 8002bd6:	2b64      	cmp	r3, #100	@ 0x64
 8002bd8:	d901      	bls.n	8002bde <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002bda:	2303      	movs	r3, #3
 8002bdc:	e06d      	b.n	8002cba <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bde:	4b3a      	ldr	r3, [pc, #232]	@ (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d0f0      	beq.n	8002bcc <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002bea:	4b36      	ldr	r3, [pc, #216]	@ (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bec:	6a1b      	ldr	r3, [r3, #32]
 8002bee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002bf2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d02e      	beq.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002c02:	68fa      	ldr	r2, [r7, #12]
 8002c04:	429a      	cmp	r2, r3
 8002c06:	d027      	beq.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002c08:	4b2e      	ldr	r3, [pc, #184]	@ (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c0a:	6a1b      	ldr	r3, [r3, #32]
 8002c0c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002c10:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002c12:	4b2e      	ldr	r3, [pc, #184]	@ (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002c14:	2201      	movs	r2, #1
 8002c16:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002c18:	4b2c      	ldr	r3, [pc, #176]	@ (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002c1e:	4a29      	ldr	r2, [pc, #164]	@ (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	f003 0301 	and.w	r3, r3, #1
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d014      	beq.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c2e:	f7fe fce7 	bl	8001600 <HAL_GetTick>
 8002c32:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c34:	e00a      	b.n	8002c4c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c36:	f7fe fce3 	bl	8001600 <HAL_GetTick>
 8002c3a:	4602      	mov	r2, r0
 8002c3c:	693b      	ldr	r3, [r7, #16]
 8002c3e:	1ad3      	subs	r3, r2, r3
 8002c40:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d901      	bls.n	8002c4c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002c48:	2303      	movs	r3, #3
 8002c4a:	e036      	b.n	8002cba <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c4c:	4b1d      	ldr	r3, [pc, #116]	@ (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c4e:	6a1b      	ldr	r3, [r3, #32]
 8002c50:	f003 0302 	and.w	r3, r3, #2
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d0ee      	beq.n	8002c36 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c58:	4b1a      	ldr	r3, [pc, #104]	@ (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c5a:	6a1b      	ldr	r3, [r3, #32]
 8002c5c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	4917      	ldr	r1, [pc, #92]	@ (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c66:	4313      	orrs	r3, r2
 8002c68:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002c6a:	7dfb      	ldrb	r3, [r7, #23]
 8002c6c:	2b01      	cmp	r3, #1
 8002c6e:	d105      	bne.n	8002c7c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c70:	4b14      	ldr	r3, [pc, #80]	@ (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c72:	69db      	ldr	r3, [r3, #28]
 8002c74:	4a13      	ldr	r2, [pc, #76]	@ (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c76:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002c7a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f003 0302 	and.w	r3, r3, #2
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d008      	beq.n	8002c9a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002c88:	4b0e      	ldr	r3, [pc, #56]	@ (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	689b      	ldr	r3, [r3, #8]
 8002c94:	490b      	ldr	r1, [pc, #44]	@ (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c96:	4313      	orrs	r3, r2
 8002c98:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f003 0310 	and.w	r3, r3, #16
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d008      	beq.n	8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002ca6:	4b07      	ldr	r3, [pc, #28]	@ (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	68db      	ldr	r3, [r3, #12]
 8002cb2:	4904      	ldr	r1, [pc, #16]	@ (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cb4:	4313      	orrs	r3, r2
 8002cb6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002cb8:	2300      	movs	r3, #0
}
 8002cba:	4618      	mov	r0, r3
 8002cbc:	3718      	adds	r7, #24
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}
 8002cc2:	bf00      	nop
 8002cc4:	40021000 	.word	0x40021000
 8002cc8:	40007000 	.word	0x40007000
 8002ccc:	42420440 	.word	0x42420440

08002cd0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b088      	sub	sp, #32
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8002cd8:	2300      	movs	r3, #0
 8002cda:	617b      	str	r3, [r7, #20]
 8002cdc:	2300      	movs	r3, #0
 8002cde:	61fb      	str	r3, [r7, #28]
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	60fb      	str	r3, [r7, #12]
 8002ce8:	2300      	movs	r3, #0
 8002cea:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2b10      	cmp	r3, #16
 8002cf0:	d00a      	beq.n	8002d08 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2b10      	cmp	r3, #16
 8002cf6:	f200 808a 	bhi.w	8002e0e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2b01      	cmp	r3, #1
 8002cfe:	d045      	beq.n	8002d8c <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2b02      	cmp	r3, #2
 8002d04:	d075      	beq.n	8002df2 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8002d06:	e082      	b.n	8002e0e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8002d08:	4b46      	ldr	r3, [pc, #280]	@ (8002e24 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8002d0e:	4b45      	ldr	r3, [pc, #276]	@ (8002e24 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d07b      	beq.n	8002e12 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	0c9b      	lsrs	r3, r3, #18
 8002d1e:	f003 030f 	and.w	r3, r3, #15
 8002d22:	4a41      	ldr	r2, [pc, #260]	@ (8002e28 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8002d24:	5cd3      	ldrb	r3, [r2, r3]
 8002d26:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d015      	beq.n	8002d5e <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002d32:	4b3c      	ldr	r3, [pc, #240]	@ (8002e24 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	0c5b      	lsrs	r3, r3, #17
 8002d38:	f003 0301 	and.w	r3, r3, #1
 8002d3c:	4a3b      	ldr	r2, [pc, #236]	@ (8002e2c <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8002d3e:	5cd3      	ldrb	r3, [r2, r3]
 8002d40:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d00d      	beq.n	8002d68 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002d4c:	4a38      	ldr	r2, [pc, #224]	@ (8002e30 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8002d4e:	697b      	ldr	r3, [r7, #20]
 8002d50:	fbb2 f2f3 	udiv	r2, r2, r3
 8002d54:	693b      	ldr	r3, [r7, #16]
 8002d56:	fb02 f303 	mul.w	r3, r2, r3
 8002d5a:	61fb      	str	r3, [r7, #28]
 8002d5c:	e004      	b.n	8002d68 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002d5e:	693b      	ldr	r3, [r7, #16]
 8002d60:	4a34      	ldr	r2, [pc, #208]	@ (8002e34 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8002d62:	fb02 f303 	mul.w	r3, r2, r3
 8002d66:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002d68:	4b2e      	ldr	r3, [pc, #184]	@ (8002e24 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d70:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002d74:	d102      	bne.n	8002d7c <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8002d76:	69fb      	ldr	r3, [r7, #28]
 8002d78:	61bb      	str	r3, [r7, #24]
      break;
 8002d7a:	e04a      	b.n	8002e12 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8002d7c:	69fb      	ldr	r3, [r7, #28]
 8002d7e:	005b      	lsls	r3, r3, #1
 8002d80:	4a2d      	ldr	r2, [pc, #180]	@ (8002e38 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002d82:	fba2 2303 	umull	r2, r3, r2, r3
 8002d86:	085b      	lsrs	r3, r3, #1
 8002d88:	61bb      	str	r3, [r7, #24]
      break;
 8002d8a:	e042      	b.n	8002e12 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8002d8c:	4b25      	ldr	r3, [pc, #148]	@ (8002e24 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002d8e:	6a1b      	ldr	r3, [r3, #32]
 8002d90:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002d98:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002d9c:	d108      	bne.n	8002db0 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	f003 0302 	and.w	r3, r3, #2
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d003      	beq.n	8002db0 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8002da8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002dac:	61bb      	str	r3, [r7, #24]
 8002dae:	e01f      	b.n	8002df0 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002db6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002dba:	d109      	bne.n	8002dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8002dbc:	4b19      	ldr	r3, [pc, #100]	@ (8002e24 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002dbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dc0:	f003 0302 	and.w	r3, r3, #2
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d003      	beq.n	8002dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8002dc8:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8002dcc:	61bb      	str	r3, [r7, #24]
 8002dce:	e00f      	b.n	8002df0 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002dd6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002dda:	d11c      	bne.n	8002e16 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8002ddc:	4b11      	ldr	r3, [pc, #68]	@ (8002e24 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d016      	beq.n	8002e16 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8002de8:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8002dec:	61bb      	str	r3, [r7, #24]
      break;
 8002dee:	e012      	b.n	8002e16 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8002df0:	e011      	b.n	8002e16 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8002df2:	f7ff fe85 	bl	8002b00 <HAL_RCC_GetPCLK2Freq>
 8002df6:	4602      	mov	r2, r0
 8002df8:	4b0a      	ldr	r3, [pc, #40]	@ (8002e24 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	0b9b      	lsrs	r3, r3, #14
 8002dfe:	f003 0303 	and.w	r3, r3, #3
 8002e02:	3301      	adds	r3, #1
 8002e04:	005b      	lsls	r3, r3, #1
 8002e06:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e0a:	61bb      	str	r3, [r7, #24]
      break;
 8002e0c:	e004      	b.n	8002e18 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002e0e:	bf00      	nop
 8002e10:	e002      	b.n	8002e18 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002e12:	bf00      	nop
 8002e14:	e000      	b.n	8002e18 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002e16:	bf00      	nop
    }
  }
  return (frequency);
 8002e18:	69bb      	ldr	r3, [r7, #24]
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	3720      	adds	r7, #32
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}
 8002e22:	bf00      	nop
 8002e24:	40021000 	.word	0x40021000
 8002e28:	0800579c 	.word	0x0800579c
 8002e2c:	080057ac 	.word	0x080057ac
 8002e30:	007a1200 	.word	0x007a1200
 8002e34:	003d0900 	.word	0x003d0900
 8002e38:	aaaaaaab 	.word	0xaaaaaaab

08002e3c <__cvt>:
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002e42:	461d      	mov	r5, r3
 8002e44:	bfbb      	ittet	lt
 8002e46:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8002e4a:	461d      	movlt	r5, r3
 8002e4c:	2300      	movge	r3, #0
 8002e4e:	232d      	movlt	r3, #45	@ 0x2d
 8002e50:	b088      	sub	sp, #32
 8002e52:	4614      	mov	r4, r2
 8002e54:	bfb8      	it	lt
 8002e56:	4614      	movlt	r4, r2
 8002e58:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8002e5a:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8002e5c:	7013      	strb	r3, [r2, #0]
 8002e5e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8002e60:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8002e64:	f023 0820 	bic.w	r8, r3, #32
 8002e68:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8002e6c:	d005      	beq.n	8002e7a <__cvt+0x3e>
 8002e6e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8002e72:	d100      	bne.n	8002e76 <__cvt+0x3a>
 8002e74:	3601      	adds	r6, #1
 8002e76:	2302      	movs	r3, #2
 8002e78:	e000      	b.n	8002e7c <__cvt+0x40>
 8002e7a:	2303      	movs	r3, #3
 8002e7c:	aa07      	add	r2, sp, #28
 8002e7e:	9204      	str	r2, [sp, #16]
 8002e80:	aa06      	add	r2, sp, #24
 8002e82:	e9cd a202 	strd	sl, r2, [sp, #8]
 8002e86:	e9cd 3600 	strd	r3, r6, [sp]
 8002e8a:	4622      	mov	r2, r4
 8002e8c:	462b      	mov	r3, r5
 8002e8e:	f000 fe4f 	bl	8003b30 <_dtoa_r>
 8002e92:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8002e96:	4607      	mov	r7, r0
 8002e98:	d119      	bne.n	8002ece <__cvt+0x92>
 8002e9a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8002e9c:	07db      	lsls	r3, r3, #31
 8002e9e:	d50e      	bpl.n	8002ebe <__cvt+0x82>
 8002ea0:	eb00 0906 	add.w	r9, r0, r6
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	4620      	mov	r0, r4
 8002eaa:	4629      	mov	r1, r5
 8002eac:	f7fd fd7c 	bl	80009a8 <__aeabi_dcmpeq>
 8002eb0:	b108      	cbz	r0, 8002eb6 <__cvt+0x7a>
 8002eb2:	f8cd 901c 	str.w	r9, [sp, #28]
 8002eb6:	2230      	movs	r2, #48	@ 0x30
 8002eb8:	9b07      	ldr	r3, [sp, #28]
 8002eba:	454b      	cmp	r3, r9
 8002ebc:	d31e      	bcc.n	8002efc <__cvt+0xc0>
 8002ebe:	4638      	mov	r0, r7
 8002ec0:	9b07      	ldr	r3, [sp, #28]
 8002ec2:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8002ec4:	1bdb      	subs	r3, r3, r7
 8002ec6:	6013      	str	r3, [r2, #0]
 8002ec8:	b008      	add	sp, #32
 8002eca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002ece:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8002ed2:	eb00 0906 	add.w	r9, r0, r6
 8002ed6:	d1e5      	bne.n	8002ea4 <__cvt+0x68>
 8002ed8:	7803      	ldrb	r3, [r0, #0]
 8002eda:	2b30      	cmp	r3, #48	@ 0x30
 8002edc:	d10a      	bne.n	8002ef4 <__cvt+0xb8>
 8002ede:	2200      	movs	r2, #0
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	4620      	mov	r0, r4
 8002ee4:	4629      	mov	r1, r5
 8002ee6:	f7fd fd5f 	bl	80009a8 <__aeabi_dcmpeq>
 8002eea:	b918      	cbnz	r0, 8002ef4 <__cvt+0xb8>
 8002eec:	f1c6 0601 	rsb	r6, r6, #1
 8002ef0:	f8ca 6000 	str.w	r6, [sl]
 8002ef4:	f8da 3000 	ldr.w	r3, [sl]
 8002ef8:	4499      	add	r9, r3
 8002efa:	e7d3      	b.n	8002ea4 <__cvt+0x68>
 8002efc:	1c59      	adds	r1, r3, #1
 8002efe:	9107      	str	r1, [sp, #28]
 8002f00:	701a      	strb	r2, [r3, #0]
 8002f02:	e7d9      	b.n	8002eb8 <__cvt+0x7c>

08002f04 <__exponent>:
 8002f04:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002f06:	2900      	cmp	r1, #0
 8002f08:	bfb6      	itet	lt
 8002f0a:	232d      	movlt	r3, #45	@ 0x2d
 8002f0c:	232b      	movge	r3, #43	@ 0x2b
 8002f0e:	4249      	neglt	r1, r1
 8002f10:	2909      	cmp	r1, #9
 8002f12:	7002      	strb	r2, [r0, #0]
 8002f14:	7043      	strb	r3, [r0, #1]
 8002f16:	dd29      	ble.n	8002f6c <__exponent+0x68>
 8002f18:	f10d 0307 	add.w	r3, sp, #7
 8002f1c:	461d      	mov	r5, r3
 8002f1e:	270a      	movs	r7, #10
 8002f20:	fbb1 f6f7 	udiv	r6, r1, r7
 8002f24:	461a      	mov	r2, r3
 8002f26:	fb07 1416 	mls	r4, r7, r6, r1
 8002f2a:	3430      	adds	r4, #48	@ 0x30
 8002f2c:	f802 4c01 	strb.w	r4, [r2, #-1]
 8002f30:	460c      	mov	r4, r1
 8002f32:	2c63      	cmp	r4, #99	@ 0x63
 8002f34:	4631      	mov	r1, r6
 8002f36:	f103 33ff 	add.w	r3, r3, #4294967295
 8002f3a:	dcf1      	bgt.n	8002f20 <__exponent+0x1c>
 8002f3c:	3130      	adds	r1, #48	@ 0x30
 8002f3e:	1e94      	subs	r4, r2, #2
 8002f40:	f803 1c01 	strb.w	r1, [r3, #-1]
 8002f44:	4623      	mov	r3, r4
 8002f46:	1c41      	adds	r1, r0, #1
 8002f48:	42ab      	cmp	r3, r5
 8002f4a:	d30a      	bcc.n	8002f62 <__exponent+0x5e>
 8002f4c:	f10d 0309 	add.w	r3, sp, #9
 8002f50:	1a9b      	subs	r3, r3, r2
 8002f52:	42ac      	cmp	r4, r5
 8002f54:	bf88      	it	hi
 8002f56:	2300      	movhi	r3, #0
 8002f58:	3302      	adds	r3, #2
 8002f5a:	4403      	add	r3, r0
 8002f5c:	1a18      	subs	r0, r3, r0
 8002f5e:	b003      	add	sp, #12
 8002f60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f62:	f813 6b01 	ldrb.w	r6, [r3], #1
 8002f66:	f801 6f01 	strb.w	r6, [r1, #1]!
 8002f6a:	e7ed      	b.n	8002f48 <__exponent+0x44>
 8002f6c:	2330      	movs	r3, #48	@ 0x30
 8002f6e:	3130      	adds	r1, #48	@ 0x30
 8002f70:	7083      	strb	r3, [r0, #2]
 8002f72:	70c1      	strb	r1, [r0, #3]
 8002f74:	1d03      	adds	r3, r0, #4
 8002f76:	e7f1      	b.n	8002f5c <__exponent+0x58>

08002f78 <_printf_float>:
 8002f78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f7c:	b091      	sub	sp, #68	@ 0x44
 8002f7e:	460c      	mov	r4, r1
 8002f80:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8002f84:	4616      	mov	r6, r2
 8002f86:	461f      	mov	r7, r3
 8002f88:	4605      	mov	r5, r0
 8002f8a:	f000 fcc1 	bl	8003910 <_localeconv_r>
 8002f8e:	6803      	ldr	r3, [r0, #0]
 8002f90:	4618      	mov	r0, r3
 8002f92:	9308      	str	r3, [sp, #32]
 8002f94:	f7fd f8dc 	bl	8000150 <strlen>
 8002f98:	2300      	movs	r3, #0
 8002f9a:	930e      	str	r3, [sp, #56]	@ 0x38
 8002f9c:	f8d8 3000 	ldr.w	r3, [r8]
 8002fa0:	9009      	str	r0, [sp, #36]	@ 0x24
 8002fa2:	3307      	adds	r3, #7
 8002fa4:	f023 0307 	bic.w	r3, r3, #7
 8002fa8:	f103 0208 	add.w	r2, r3, #8
 8002fac:	f894 a018 	ldrb.w	sl, [r4, #24]
 8002fb0:	f8d4 b000 	ldr.w	fp, [r4]
 8002fb4:	f8c8 2000 	str.w	r2, [r8]
 8002fb8:	e9d3 8900 	ldrd	r8, r9, [r3]
 8002fbc:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8002fc0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8002fc2:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8002fc6:	f04f 32ff 	mov.w	r2, #4294967295
 8002fca:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8002fce:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8002fd2:	4b9c      	ldr	r3, [pc, #624]	@ (8003244 <_printf_float+0x2cc>)
 8002fd4:	f7fd fd1a 	bl	8000a0c <__aeabi_dcmpun>
 8002fd8:	bb70      	cbnz	r0, 8003038 <_printf_float+0xc0>
 8002fda:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8002fde:	f04f 32ff 	mov.w	r2, #4294967295
 8002fe2:	4b98      	ldr	r3, [pc, #608]	@ (8003244 <_printf_float+0x2cc>)
 8002fe4:	f7fd fcf4 	bl	80009d0 <__aeabi_dcmple>
 8002fe8:	bb30      	cbnz	r0, 8003038 <_printf_float+0xc0>
 8002fea:	2200      	movs	r2, #0
 8002fec:	2300      	movs	r3, #0
 8002fee:	4640      	mov	r0, r8
 8002ff0:	4649      	mov	r1, r9
 8002ff2:	f7fd fce3 	bl	80009bc <__aeabi_dcmplt>
 8002ff6:	b110      	cbz	r0, 8002ffe <_printf_float+0x86>
 8002ff8:	232d      	movs	r3, #45	@ 0x2d
 8002ffa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002ffe:	4a92      	ldr	r2, [pc, #584]	@ (8003248 <_printf_float+0x2d0>)
 8003000:	4b92      	ldr	r3, [pc, #584]	@ (800324c <_printf_float+0x2d4>)
 8003002:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8003006:	bf94      	ite	ls
 8003008:	4690      	movls	r8, r2
 800300a:	4698      	movhi	r8, r3
 800300c:	2303      	movs	r3, #3
 800300e:	f04f 0900 	mov.w	r9, #0
 8003012:	6123      	str	r3, [r4, #16]
 8003014:	f02b 0304 	bic.w	r3, fp, #4
 8003018:	6023      	str	r3, [r4, #0]
 800301a:	4633      	mov	r3, r6
 800301c:	4621      	mov	r1, r4
 800301e:	4628      	mov	r0, r5
 8003020:	9700      	str	r7, [sp, #0]
 8003022:	aa0f      	add	r2, sp, #60	@ 0x3c
 8003024:	f000 f9d4 	bl	80033d0 <_printf_common>
 8003028:	3001      	adds	r0, #1
 800302a:	f040 8090 	bne.w	800314e <_printf_float+0x1d6>
 800302e:	f04f 30ff 	mov.w	r0, #4294967295
 8003032:	b011      	add	sp, #68	@ 0x44
 8003034:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003038:	4642      	mov	r2, r8
 800303a:	464b      	mov	r3, r9
 800303c:	4640      	mov	r0, r8
 800303e:	4649      	mov	r1, r9
 8003040:	f7fd fce4 	bl	8000a0c <__aeabi_dcmpun>
 8003044:	b148      	cbz	r0, 800305a <_printf_float+0xe2>
 8003046:	464b      	mov	r3, r9
 8003048:	2b00      	cmp	r3, #0
 800304a:	bfb8      	it	lt
 800304c:	232d      	movlt	r3, #45	@ 0x2d
 800304e:	4a80      	ldr	r2, [pc, #512]	@ (8003250 <_printf_float+0x2d8>)
 8003050:	bfb8      	it	lt
 8003052:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8003056:	4b7f      	ldr	r3, [pc, #508]	@ (8003254 <_printf_float+0x2dc>)
 8003058:	e7d3      	b.n	8003002 <_printf_float+0x8a>
 800305a:	6863      	ldr	r3, [r4, #4]
 800305c:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8003060:	1c5a      	adds	r2, r3, #1
 8003062:	d13f      	bne.n	80030e4 <_printf_float+0x16c>
 8003064:	2306      	movs	r3, #6
 8003066:	6063      	str	r3, [r4, #4]
 8003068:	2200      	movs	r2, #0
 800306a:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 800306e:	6023      	str	r3, [r4, #0]
 8003070:	9206      	str	r2, [sp, #24]
 8003072:	aa0e      	add	r2, sp, #56	@ 0x38
 8003074:	e9cd a204 	strd	sl, r2, [sp, #16]
 8003078:	aa0d      	add	r2, sp, #52	@ 0x34
 800307a:	9203      	str	r2, [sp, #12]
 800307c:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8003080:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8003084:	6863      	ldr	r3, [r4, #4]
 8003086:	4642      	mov	r2, r8
 8003088:	9300      	str	r3, [sp, #0]
 800308a:	4628      	mov	r0, r5
 800308c:	464b      	mov	r3, r9
 800308e:	910a      	str	r1, [sp, #40]	@ 0x28
 8003090:	f7ff fed4 	bl	8002e3c <__cvt>
 8003094:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8003096:	4680      	mov	r8, r0
 8003098:	2947      	cmp	r1, #71	@ 0x47
 800309a:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800309c:	d128      	bne.n	80030f0 <_printf_float+0x178>
 800309e:	1cc8      	adds	r0, r1, #3
 80030a0:	db02      	blt.n	80030a8 <_printf_float+0x130>
 80030a2:	6863      	ldr	r3, [r4, #4]
 80030a4:	4299      	cmp	r1, r3
 80030a6:	dd40      	ble.n	800312a <_printf_float+0x1b2>
 80030a8:	f1aa 0a02 	sub.w	sl, sl, #2
 80030ac:	fa5f fa8a 	uxtb.w	sl, sl
 80030b0:	4652      	mov	r2, sl
 80030b2:	3901      	subs	r1, #1
 80030b4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80030b8:	910d      	str	r1, [sp, #52]	@ 0x34
 80030ba:	f7ff ff23 	bl	8002f04 <__exponent>
 80030be:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80030c0:	4681      	mov	r9, r0
 80030c2:	1813      	adds	r3, r2, r0
 80030c4:	2a01      	cmp	r2, #1
 80030c6:	6123      	str	r3, [r4, #16]
 80030c8:	dc02      	bgt.n	80030d0 <_printf_float+0x158>
 80030ca:	6822      	ldr	r2, [r4, #0]
 80030cc:	07d2      	lsls	r2, r2, #31
 80030ce:	d501      	bpl.n	80030d4 <_printf_float+0x15c>
 80030d0:	3301      	adds	r3, #1
 80030d2:	6123      	str	r3, [r4, #16]
 80030d4:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d09e      	beq.n	800301a <_printf_float+0xa2>
 80030dc:	232d      	movs	r3, #45	@ 0x2d
 80030de:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80030e2:	e79a      	b.n	800301a <_printf_float+0xa2>
 80030e4:	2947      	cmp	r1, #71	@ 0x47
 80030e6:	d1bf      	bne.n	8003068 <_printf_float+0xf0>
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d1bd      	bne.n	8003068 <_printf_float+0xf0>
 80030ec:	2301      	movs	r3, #1
 80030ee:	e7ba      	b.n	8003066 <_printf_float+0xee>
 80030f0:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80030f4:	d9dc      	bls.n	80030b0 <_printf_float+0x138>
 80030f6:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80030fa:	d118      	bne.n	800312e <_printf_float+0x1b6>
 80030fc:	2900      	cmp	r1, #0
 80030fe:	6863      	ldr	r3, [r4, #4]
 8003100:	dd0b      	ble.n	800311a <_printf_float+0x1a2>
 8003102:	6121      	str	r1, [r4, #16]
 8003104:	b913      	cbnz	r3, 800310c <_printf_float+0x194>
 8003106:	6822      	ldr	r2, [r4, #0]
 8003108:	07d0      	lsls	r0, r2, #31
 800310a:	d502      	bpl.n	8003112 <_printf_float+0x19a>
 800310c:	3301      	adds	r3, #1
 800310e:	440b      	add	r3, r1
 8003110:	6123      	str	r3, [r4, #16]
 8003112:	f04f 0900 	mov.w	r9, #0
 8003116:	65a1      	str	r1, [r4, #88]	@ 0x58
 8003118:	e7dc      	b.n	80030d4 <_printf_float+0x15c>
 800311a:	b913      	cbnz	r3, 8003122 <_printf_float+0x1aa>
 800311c:	6822      	ldr	r2, [r4, #0]
 800311e:	07d2      	lsls	r2, r2, #31
 8003120:	d501      	bpl.n	8003126 <_printf_float+0x1ae>
 8003122:	3302      	adds	r3, #2
 8003124:	e7f4      	b.n	8003110 <_printf_float+0x198>
 8003126:	2301      	movs	r3, #1
 8003128:	e7f2      	b.n	8003110 <_printf_float+0x198>
 800312a:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800312e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8003130:	4299      	cmp	r1, r3
 8003132:	db05      	blt.n	8003140 <_printf_float+0x1c8>
 8003134:	6823      	ldr	r3, [r4, #0]
 8003136:	6121      	str	r1, [r4, #16]
 8003138:	07d8      	lsls	r0, r3, #31
 800313a:	d5ea      	bpl.n	8003112 <_printf_float+0x19a>
 800313c:	1c4b      	adds	r3, r1, #1
 800313e:	e7e7      	b.n	8003110 <_printf_float+0x198>
 8003140:	2900      	cmp	r1, #0
 8003142:	bfcc      	ite	gt
 8003144:	2201      	movgt	r2, #1
 8003146:	f1c1 0202 	rsble	r2, r1, #2
 800314a:	4413      	add	r3, r2
 800314c:	e7e0      	b.n	8003110 <_printf_float+0x198>
 800314e:	6823      	ldr	r3, [r4, #0]
 8003150:	055a      	lsls	r2, r3, #21
 8003152:	d407      	bmi.n	8003164 <_printf_float+0x1ec>
 8003154:	6923      	ldr	r3, [r4, #16]
 8003156:	4642      	mov	r2, r8
 8003158:	4631      	mov	r1, r6
 800315a:	4628      	mov	r0, r5
 800315c:	47b8      	blx	r7
 800315e:	3001      	adds	r0, #1
 8003160:	d12b      	bne.n	80031ba <_printf_float+0x242>
 8003162:	e764      	b.n	800302e <_printf_float+0xb6>
 8003164:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003168:	f240 80dc 	bls.w	8003324 <_printf_float+0x3ac>
 800316c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8003170:	2200      	movs	r2, #0
 8003172:	2300      	movs	r3, #0
 8003174:	f7fd fc18 	bl	80009a8 <__aeabi_dcmpeq>
 8003178:	2800      	cmp	r0, #0
 800317a:	d033      	beq.n	80031e4 <_printf_float+0x26c>
 800317c:	2301      	movs	r3, #1
 800317e:	4631      	mov	r1, r6
 8003180:	4628      	mov	r0, r5
 8003182:	4a35      	ldr	r2, [pc, #212]	@ (8003258 <_printf_float+0x2e0>)
 8003184:	47b8      	blx	r7
 8003186:	3001      	adds	r0, #1
 8003188:	f43f af51 	beq.w	800302e <_printf_float+0xb6>
 800318c:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8003190:	4543      	cmp	r3, r8
 8003192:	db02      	blt.n	800319a <_printf_float+0x222>
 8003194:	6823      	ldr	r3, [r4, #0]
 8003196:	07d8      	lsls	r0, r3, #31
 8003198:	d50f      	bpl.n	80031ba <_printf_float+0x242>
 800319a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800319e:	4631      	mov	r1, r6
 80031a0:	4628      	mov	r0, r5
 80031a2:	47b8      	blx	r7
 80031a4:	3001      	adds	r0, #1
 80031a6:	f43f af42 	beq.w	800302e <_printf_float+0xb6>
 80031aa:	f04f 0900 	mov.w	r9, #0
 80031ae:	f108 38ff 	add.w	r8, r8, #4294967295
 80031b2:	f104 0a1a 	add.w	sl, r4, #26
 80031b6:	45c8      	cmp	r8, r9
 80031b8:	dc09      	bgt.n	80031ce <_printf_float+0x256>
 80031ba:	6823      	ldr	r3, [r4, #0]
 80031bc:	079b      	lsls	r3, r3, #30
 80031be:	f100 8102 	bmi.w	80033c6 <_printf_float+0x44e>
 80031c2:	68e0      	ldr	r0, [r4, #12]
 80031c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80031c6:	4298      	cmp	r0, r3
 80031c8:	bfb8      	it	lt
 80031ca:	4618      	movlt	r0, r3
 80031cc:	e731      	b.n	8003032 <_printf_float+0xba>
 80031ce:	2301      	movs	r3, #1
 80031d0:	4652      	mov	r2, sl
 80031d2:	4631      	mov	r1, r6
 80031d4:	4628      	mov	r0, r5
 80031d6:	47b8      	blx	r7
 80031d8:	3001      	adds	r0, #1
 80031da:	f43f af28 	beq.w	800302e <_printf_float+0xb6>
 80031de:	f109 0901 	add.w	r9, r9, #1
 80031e2:	e7e8      	b.n	80031b6 <_printf_float+0x23e>
 80031e4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	dc38      	bgt.n	800325c <_printf_float+0x2e4>
 80031ea:	2301      	movs	r3, #1
 80031ec:	4631      	mov	r1, r6
 80031ee:	4628      	mov	r0, r5
 80031f0:	4a19      	ldr	r2, [pc, #100]	@ (8003258 <_printf_float+0x2e0>)
 80031f2:	47b8      	blx	r7
 80031f4:	3001      	adds	r0, #1
 80031f6:	f43f af1a 	beq.w	800302e <_printf_float+0xb6>
 80031fa:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 80031fe:	ea59 0303 	orrs.w	r3, r9, r3
 8003202:	d102      	bne.n	800320a <_printf_float+0x292>
 8003204:	6823      	ldr	r3, [r4, #0]
 8003206:	07d9      	lsls	r1, r3, #31
 8003208:	d5d7      	bpl.n	80031ba <_printf_float+0x242>
 800320a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800320e:	4631      	mov	r1, r6
 8003210:	4628      	mov	r0, r5
 8003212:	47b8      	blx	r7
 8003214:	3001      	adds	r0, #1
 8003216:	f43f af0a 	beq.w	800302e <_printf_float+0xb6>
 800321a:	f04f 0a00 	mov.w	sl, #0
 800321e:	f104 0b1a 	add.w	fp, r4, #26
 8003222:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003224:	425b      	negs	r3, r3
 8003226:	4553      	cmp	r3, sl
 8003228:	dc01      	bgt.n	800322e <_printf_float+0x2b6>
 800322a:	464b      	mov	r3, r9
 800322c:	e793      	b.n	8003156 <_printf_float+0x1de>
 800322e:	2301      	movs	r3, #1
 8003230:	465a      	mov	r2, fp
 8003232:	4631      	mov	r1, r6
 8003234:	4628      	mov	r0, r5
 8003236:	47b8      	blx	r7
 8003238:	3001      	adds	r0, #1
 800323a:	f43f aef8 	beq.w	800302e <_printf_float+0xb6>
 800323e:	f10a 0a01 	add.w	sl, sl, #1
 8003242:	e7ee      	b.n	8003222 <_printf_float+0x2aa>
 8003244:	7fefffff 	.word	0x7fefffff
 8003248:	080057ae 	.word	0x080057ae
 800324c:	080057b2 	.word	0x080057b2
 8003250:	080057b6 	.word	0x080057b6
 8003254:	080057ba 	.word	0x080057ba
 8003258:	080057be 	.word	0x080057be
 800325c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800325e:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8003262:	4553      	cmp	r3, sl
 8003264:	bfa8      	it	ge
 8003266:	4653      	movge	r3, sl
 8003268:	2b00      	cmp	r3, #0
 800326a:	4699      	mov	r9, r3
 800326c:	dc36      	bgt.n	80032dc <_printf_float+0x364>
 800326e:	f04f 0b00 	mov.w	fp, #0
 8003272:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003276:	f104 021a 	add.w	r2, r4, #26
 800327a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800327c:	930a      	str	r3, [sp, #40]	@ 0x28
 800327e:	eba3 0309 	sub.w	r3, r3, r9
 8003282:	455b      	cmp	r3, fp
 8003284:	dc31      	bgt.n	80032ea <_printf_float+0x372>
 8003286:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003288:	459a      	cmp	sl, r3
 800328a:	dc3a      	bgt.n	8003302 <_printf_float+0x38a>
 800328c:	6823      	ldr	r3, [r4, #0]
 800328e:	07da      	lsls	r2, r3, #31
 8003290:	d437      	bmi.n	8003302 <_printf_float+0x38a>
 8003292:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003294:	ebaa 0903 	sub.w	r9, sl, r3
 8003298:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800329a:	ebaa 0303 	sub.w	r3, sl, r3
 800329e:	4599      	cmp	r9, r3
 80032a0:	bfa8      	it	ge
 80032a2:	4699      	movge	r9, r3
 80032a4:	f1b9 0f00 	cmp.w	r9, #0
 80032a8:	dc33      	bgt.n	8003312 <_printf_float+0x39a>
 80032aa:	f04f 0800 	mov.w	r8, #0
 80032ae:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80032b2:	f104 0b1a 	add.w	fp, r4, #26
 80032b6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80032b8:	ebaa 0303 	sub.w	r3, sl, r3
 80032bc:	eba3 0309 	sub.w	r3, r3, r9
 80032c0:	4543      	cmp	r3, r8
 80032c2:	f77f af7a 	ble.w	80031ba <_printf_float+0x242>
 80032c6:	2301      	movs	r3, #1
 80032c8:	465a      	mov	r2, fp
 80032ca:	4631      	mov	r1, r6
 80032cc:	4628      	mov	r0, r5
 80032ce:	47b8      	blx	r7
 80032d0:	3001      	adds	r0, #1
 80032d2:	f43f aeac 	beq.w	800302e <_printf_float+0xb6>
 80032d6:	f108 0801 	add.w	r8, r8, #1
 80032da:	e7ec      	b.n	80032b6 <_printf_float+0x33e>
 80032dc:	4642      	mov	r2, r8
 80032de:	4631      	mov	r1, r6
 80032e0:	4628      	mov	r0, r5
 80032e2:	47b8      	blx	r7
 80032e4:	3001      	adds	r0, #1
 80032e6:	d1c2      	bne.n	800326e <_printf_float+0x2f6>
 80032e8:	e6a1      	b.n	800302e <_printf_float+0xb6>
 80032ea:	2301      	movs	r3, #1
 80032ec:	4631      	mov	r1, r6
 80032ee:	4628      	mov	r0, r5
 80032f0:	920a      	str	r2, [sp, #40]	@ 0x28
 80032f2:	47b8      	blx	r7
 80032f4:	3001      	adds	r0, #1
 80032f6:	f43f ae9a 	beq.w	800302e <_printf_float+0xb6>
 80032fa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80032fc:	f10b 0b01 	add.w	fp, fp, #1
 8003300:	e7bb      	b.n	800327a <_printf_float+0x302>
 8003302:	4631      	mov	r1, r6
 8003304:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003308:	4628      	mov	r0, r5
 800330a:	47b8      	blx	r7
 800330c:	3001      	adds	r0, #1
 800330e:	d1c0      	bne.n	8003292 <_printf_float+0x31a>
 8003310:	e68d      	b.n	800302e <_printf_float+0xb6>
 8003312:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8003314:	464b      	mov	r3, r9
 8003316:	4631      	mov	r1, r6
 8003318:	4628      	mov	r0, r5
 800331a:	4442      	add	r2, r8
 800331c:	47b8      	blx	r7
 800331e:	3001      	adds	r0, #1
 8003320:	d1c3      	bne.n	80032aa <_printf_float+0x332>
 8003322:	e684      	b.n	800302e <_printf_float+0xb6>
 8003324:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8003328:	f1ba 0f01 	cmp.w	sl, #1
 800332c:	dc01      	bgt.n	8003332 <_printf_float+0x3ba>
 800332e:	07db      	lsls	r3, r3, #31
 8003330:	d536      	bpl.n	80033a0 <_printf_float+0x428>
 8003332:	2301      	movs	r3, #1
 8003334:	4642      	mov	r2, r8
 8003336:	4631      	mov	r1, r6
 8003338:	4628      	mov	r0, r5
 800333a:	47b8      	blx	r7
 800333c:	3001      	adds	r0, #1
 800333e:	f43f ae76 	beq.w	800302e <_printf_float+0xb6>
 8003342:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003346:	4631      	mov	r1, r6
 8003348:	4628      	mov	r0, r5
 800334a:	47b8      	blx	r7
 800334c:	3001      	adds	r0, #1
 800334e:	f43f ae6e 	beq.w	800302e <_printf_float+0xb6>
 8003352:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8003356:	2200      	movs	r2, #0
 8003358:	2300      	movs	r3, #0
 800335a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800335e:	f7fd fb23 	bl	80009a8 <__aeabi_dcmpeq>
 8003362:	b9c0      	cbnz	r0, 8003396 <_printf_float+0x41e>
 8003364:	4653      	mov	r3, sl
 8003366:	f108 0201 	add.w	r2, r8, #1
 800336a:	4631      	mov	r1, r6
 800336c:	4628      	mov	r0, r5
 800336e:	47b8      	blx	r7
 8003370:	3001      	adds	r0, #1
 8003372:	d10c      	bne.n	800338e <_printf_float+0x416>
 8003374:	e65b      	b.n	800302e <_printf_float+0xb6>
 8003376:	2301      	movs	r3, #1
 8003378:	465a      	mov	r2, fp
 800337a:	4631      	mov	r1, r6
 800337c:	4628      	mov	r0, r5
 800337e:	47b8      	blx	r7
 8003380:	3001      	adds	r0, #1
 8003382:	f43f ae54 	beq.w	800302e <_printf_float+0xb6>
 8003386:	f108 0801 	add.w	r8, r8, #1
 800338a:	45d0      	cmp	r8, sl
 800338c:	dbf3      	blt.n	8003376 <_printf_float+0x3fe>
 800338e:	464b      	mov	r3, r9
 8003390:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8003394:	e6e0      	b.n	8003158 <_printf_float+0x1e0>
 8003396:	f04f 0800 	mov.w	r8, #0
 800339a:	f104 0b1a 	add.w	fp, r4, #26
 800339e:	e7f4      	b.n	800338a <_printf_float+0x412>
 80033a0:	2301      	movs	r3, #1
 80033a2:	4642      	mov	r2, r8
 80033a4:	e7e1      	b.n	800336a <_printf_float+0x3f2>
 80033a6:	2301      	movs	r3, #1
 80033a8:	464a      	mov	r2, r9
 80033aa:	4631      	mov	r1, r6
 80033ac:	4628      	mov	r0, r5
 80033ae:	47b8      	blx	r7
 80033b0:	3001      	adds	r0, #1
 80033b2:	f43f ae3c 	beq.w	800302e <_printf_float+0xb6>
 80033b6:	f108 0801 	add.w	r8, r8, #1
 80033ba:	68e3      	ldr	r3, [r4, #12]
 80033bc:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80033be:	1a5b      	subs	r3, r3, r1
 80033c0:	4543      	cmp	r3, r8
 80033c2:	dcf0      	bgt.n	80033a6 <_printf_float+0x42e>
 80033c4:	e6fd      	b.n	80031c2 <_printf_float+0x24a>
 80033c6:	f04f 0800 	mov.w	r8, #0
 80033ca:	f104 0919 	add.w	r9, r4, #25
 80033ce:	e7f4      	b.n	80033ba <_printf_float+0x442>

080033d0 <_printf_common>:
 80033d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80033d4:	4616      	mov	r6, r2
 80033d6:	4698      	mov	r8, r3
 80033d8:	688a      	ldr	r2, [r1, #8]
 80033da:	690b      	ldr	r3, [r1, #16]
 80033dc:	4607      	mov	r7, r0
 80033de:	4293      	cmp	r3, r2
 80033e0:	bfb8      	it	lt
 80033e2:	4613      	movlt	r3, r2
 80033e4:	6033      	str	r3, [r6, #0]
 80033e6:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80033ea:	460c      	mov	r4, r1
 80033ec:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80033f0:	b10a      	cbz	r2, 80033f6 <_printf_common+0x26>
 80033f2:	3301      	adds	r3, #1
 80033f4:	6033      	str	r3, [r6, #0]
 80033f6:	6823      	ldr	r3, [r4, #0]
 80033f8:	0699      	lsls	r1, r3, #26
 80033fa:	bf42      	ittt	mi
 80033fc:	6833      	ldrmi	r3, [r6, #0]
 80033fe:	3302      	addmi	r3, #2
 8003400:	6033      	strmi	r3, [r6, #0]
 8003402:	6825      	ldr	r5, [r4, #0]
 8003404:	f015 0506 	ands.w	r5, r5, #6
 8003408:	d106      	bne.n	8003418 <_printf_common+0x48>
 800340a:	f104 0a19 	add.w	sl, r4, #25
 800340e:	68e3      	ldr	r3, [r4, #12]
 8003410:	6832      	ldr	r2, [r6, #0]
 8003412:	1a9b      	subs	r3, r3, r2
 8003414:	42ab      	cmp	r3, r5
 8003416:	dc2b      	bgt.n	8003470 <_printf_common+0xa0>
 8003418:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800341c:	6822      	ldr	r2, [r4, #0]
 800341e:	3b00      	subs	r3, #0
 8003420:	bf18      	it	ne
 8003422:	2301      	movne	r3, #1
 8003424:	0692      	lsls	r2, r2, #26
 8003426:	d430      	bmi.n	800348a <_printf_common+0xba>
 8003428:	4641      	mov	r1, r8
 800342a:	4638      	mov	r0, r7
 800342c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003430:	47c8      	blx	r9
 8003432:	3001      	adds	r0, #1
 8003434:	d023      	beq.n	800347e <_printf_common+0xae>
 8003436:	6823      	ldr	r3, [r4, #0]
 8003438:	6922      	ldr	r2, [r4, #16]
 800343a:	f003 0306 	and.w	r3, r3, #6
 800343e:	2b04      	cmp	r3, #4
 8003440:	bf14      	ite	ne
 8003442:	2500      	movne	r5, #0
 8003444:	6833      	ldreq	r3, [r6, #0]
 8003446:	f04f 0600 	mov.w	r6, #0
 800344a:	bf08      	it	eq
 800344c:	68e5      	ldreq	r5, [r4, #12]
 800344e:	f104 041a 	add.w	r4, r4, #26
 8003452:	bf08      	it	eq
 8003454:	1aed      	subeq	r5, r5, r3
 8003456:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800345a:	bf08      	it	eq
 800345c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003460:	4293      	cmp	r3, r2
 8003462:	bfc4      	itt	gt
 8003464:	1a9b      	subgt	r3, r3, r2
 8003466:	18ed      	addgt	r5, r5, r3
 8003468:	42b5      	cmp	r5, r6
 800346a:	d11a      	bne.n	80034a2 <_printf_common+0xd2>
 800346c:	2000      	movs	r0, #0
 800346e:	e008      	b.n	8003482 <_printf_common+0xb2>
 8003470:	2301      	movs	r3, #1
 8003472:	4652      	mov	r2, sl
 8003474:	4641      	mov	r1, r8
 8003476:	4638      	mov	r0, r7
 8003478:	47c8      	blx	r9
 800347a:	3001      	adds	r0, #1
 800347c:	d103      	bne.n	8003486 <_printf_common+0xb6>
 800347e:	f04f 30ff 	mov.w	r0, #4294967295
 8003482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003486:	3501      	adds	r5, #1
 8003488:	e7c1      	b.n	800340e <_printf_common+0x3e>
 800348a:	2030      	movs	r0, #48	@ 0x30
 800348c:	18e1      	adds	r1, r4, r3
 800348e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003492:	1c5a      	adds	r2, r3, #1
 8003494:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003498:	4422      	add	r2, r4
 800349a:	3302      	adds	r3, #2
 800349c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80034a0:	e7c2      	b.n	8003428 <_printf_common+0x58>
 80034a2:	2301      	movs	r3, #1
 80034a4:	4622      	mov	r2, r4
 80034a6:	4641      	mov	r1, r8
 80034a8:	4638      	mov	r0, r7
 80034aa:	47c8      	blx	r9
 80034ac:	3001      	adds	r0, #1
 80034ae:	d0e6      	beq.n	800347e <_printf_common+0xae>
 80034b0:	3601      	adds	r6, #1
 80034b2:	e7d9      	b.n	8003468 <_printf_common+0x98>

080034b4 <_printf_i>:
 80034b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80034b8:	7e0f      	ldrb	r7, [r1, #24]
 80034ba:	4691      	mov	r9, r2
 80034bc:	2f78      	cmp	r7, #120	@ 0x78
 80034be:	4680      	mov	r8, r0
 80034c0:	460c      	mov	r4, r1
 80034c2:	469a      	mov	sl, r3
 80034c4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80034c6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80034ca:	d807      	bhi.n	80034dc <_printf_i+0x28>
 80034cc:	2f62      	cmp	r7, #98	@ 0x62
 80034ce:	d80a      	bhi.n	80034e6 <_printf_i+0x32>
 80034d0:	2f00      	cmp	r7, #0
 80034d2:	f000 80d3 	beq.w	800367c <_printf_i+0x1c8>
 80034d6:	2f58      	cmp	r7, #88	@ 0x58
 80034d8:	f000 80ba 	beq.w	8003650 <_printf_i+0x19c>
 80034dc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80034e0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80034e4:	e03a      	b.n	800355c <_printf_i+0xa8>
 80034e6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80034ea:	2b15      	cmp	r3, #21
 80034ec:	d8f6      	bhi.n	80034dc <_printf_i+0x28>
 80034ee:	a101      	add	r1, pc, #4	@ (adr r1, 80034f4 <_printf_i+0x40>)
 80034f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80034f4:	0800354d 	.word	0x0800354d
 80034f8:	08003561 	.word	0x08003561
 80034fc:	080034dd 	.word	0x080034dd
 8003500:	080034dd 	.word	0x080034dd
 8003504:	080034dd 	.word	0x080034dd
 8003508:	080034dd 	.word	0x080034dd
 800350c:	08003561 	.word	0x08003561
 8003510:	080034dd 	.word	0x080034dd
 8003514:	080034dd 	.word	0x080034dd
 8003518:	080034dd 	.word	0x080034dd
 800351c:	080034dd 	.word	0x080034dd
 8003520:	08003663 	.word	0x08003663
 8003524:	0800358b 	.word	0x0800358b
 8003528:	0800361d 	.word	0x0800361d
 800352c:	080034dd 	.word	0x080034dd
 8003530:	080034dd 	.word	0x080034dd
 8003534:	08003685 	.word	0x08003685
 8003538:	080034dd 	.word	0x080034dd
 800353c:	0800358b 	.word	0x0800358b
 8003540:	080034dd 	.word	0x080034dd
 8003544:	080034dd 	.word	0x080034dd
 8003548:	08003625 	.word	0x08003625
 800354c:	6833      	ldr	r3, [r6, #0]
 800354e:	1d1a      	adds	r2, r3, #4
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	6032      	str	r2, [r6, #0]
 8003554:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003558:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800355c:	2301      	movs	r3, #1
 800355e:	e09e      	b.n	800369e <_printf_i+0x1ea>
 8003560:	6833      	ldr	r3, [r6, #0]
 8003562:	6820      	ldr	r0, [r4, #0]
 8003564:	1d19      	adds	r1, r3, #4
 8003566:	6031      	str	r1, [r6, #0]
 8003568:	0606      	lsls	r6, r0, #24
 800356a:	d501      	bpl.n	8003570 <_printf_i+0xbc>
 800356c:	681d      	ldr	r5, [r3, #0]
 800356e:	e003      	b.n	8003578 <_printf_i+0xc4>
 8003570:	0645      	lsls	r5, r0, #25
 8003572:	d5fb      	bpl.n	800356c <_printf_i+0xb8>
 8003574:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003578:	2d00      	cmp	r5, #0
 800357a:	da03      	bge.n	8003584 <_printf_i+0xd0>
 800357c:	232d      	movs	r3, #45	@ 0x2d
 800357e:	426d      	negs	r5, r5
 8003580:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003584:	230a      	movs	r3, #10
 8003586:	4859      	ldr	r0, [pc, #356]	@ (80036ec <_printf_i+0x238>)
 8003588:	e011      	b.n	80035ae <_printf_i+0xfa>
 800358a:	6821      	ldr	r1, [r4, #0]
 800358c:	6833      	ldr	r3, [r6, #0]
 800358e:	0608      	lsls	r0, r1, #24
 8003590:	f853 5b04 	ldr.w	r5, [r3], #4
 8003594:	d402      	bmi.n	800359c <_printf_i+0xe8>
 8003596:	0649      	lsls	r1, r1, #25
 8003598:	bf48      	it	mi
 800359a:	b2ad      	uxthmi	r5, r5
 800359c:	2f6f      	cmp	r7, #111	@ 0x6f
 800359e:	6033      	str	r3, [r6, #0]
 80035a0:	bf14      	ite	ne
 80035a2:	230a      	movne	r3, #10
 80035a4:	2308      	moveq	r3, #8
 80035a6:	4851      	ldr	r0, [pc, #324]	@ (80036ec <_printf_i+0x238>)
 80035a8:	2100      	movs	r1, #0
 80035aa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80035ae:	6866      	ldr	r6, [r4, #4]
 80035b0:	2e00      	cmp	r6, #0
 80035b2:	bfa8      	it	ge
 80035b4:	6821      	ldrge	r1, [r4, #0]
 80035b6:	60a6      	str	r6, [r4, #8]
 80035b8:	bfa4      	itt	ge
 80035ba:	f021 0104 	bicge.w	r1, r1, #4
 80035be:	6021      	strge	r1, [r4, #0]
 80035c0:	b90d      	cbnz	r5, 80035c6 <_printf_i+0x112>
 80035c2:	2e00      	cmp	r6, #0
 80035c4:	d04b      	beq.n	800365e <_printf_i+0x1aa>
 80035c6:	4616      	mov	r6, r2
 80035c8:	fbb5 f1f3 	udiv	r1, r5, r3
 80035cc:	fb03 5711 	mls	r7, r3, r1, r5
 80035d0:	5dc7      	ldrb	r7, [r0, r7]
 80035d2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80035d6:	462f      	mov	r7, r5
 80035d8:	42bb      	cmp	r3, r7
 80035da:	460d      	mov	r5, r1
 80035dc:	d9f4      	bls.n	80035c8 <_printf_i+0x114>
 80035de:	2b08      	cmp	r3, #8
 80035e0:	d10b      	bne.n	80035fa <_printf_i+0x146>
 80035e2:	6823      	ldr	r3, [r4, #0]
 80035e4:	07df      	lsls	r7, r3, #31
 80035e6:	d508      	bpl.n	80035fa <_printf_i+0x146>
 80035e8:	6923      	ldr	r3, [r4, #16]
 80035ea:	6861      	ldr	r1, [r4, #4]
 80035ec:	4299      	cmp	r1, r3
 80035ee:	bfde      	ittt	le
 80035f0:	2330      	movle	r3, #48	@ 0x30
 80035f2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80035f6:	f106 36ff 	addle.w	r6, r6, #4294967295
 80035fa:	1b92      	subs	r2, r2, r6
 80035fc:	6122      	str	r2, [r4, #16]
 80035fe:	464b      	mov	r3, r9
 8003600:	4621      	mov	r1, r4
 8003602:	4640      	mov	r0, r8
 8003604:	f8cd a000 	str.w	sl, [sp]
 8003608:	aa03      	add	r2, sp, #12
 800360a:	f7ff fee1 	bl	80033d0 <_printf_common>
 800360e:	3001      	adds	r0, #1
 8003610:	d14a      	bne.n	80036a8 <_printf_i+0x1f4>
 8003612:	f04f 30ff 	mov.w	r0, #4294967295
 8003616:	b004      	add	sp, #16
 8003618:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800361c:	6823      	ldr	r3, [r4, #0]
 800361e:	f043 0320 	orr.w	r3, r3, #32
 8003622:	6023      	str	r3, [r4, #0]
 8003624:	2778      	movs	r7, #120	@ 0x78
 8003626:	4832      	ldr	r0, [pc, #200]	@ (80036f0 <_printf_i+0x23c>)
 8003628:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800362c:	6823      	ldr	r3, [r4, #0]
 800362e:	6831      	ldr	r1, [r6, #0]
 8003630:	061f      	lsls	r7, r3, #24
 8003632:	f851 5b04 	ldr.w	r5, [r1], #4
 8003636:	d402      	bmi.n	800363e <_printf_i+0x18a>
 8003638:	065f      	lsls	r7, r3, #25
 800363a:	bf48      	it	mi
 800363c:	b2ad      	uxthmi	r5, r5
 800363e:	6031      	str	r1, [r6, #0]
 8003640:	07d9      	lsls	r1, r3, #31
 8003642:	bf44      	itt	mi
 8003644:	f043 0320 	orrmi.w	r3, r3, #32
 8003648:	6023      	strmi	r3, [r4, #0]
 800364a:	b11d      	cbz	r5, 8003654 <_printf_i+0x1a0>
 800364c:	2310      	movs	r3, #16
 800364e:	e7ab      	b.n	80035a8 <_printf_i+0xf4>
 8003650:	4826      	ldr	r0, [pc, #152]	@ (80036ec <_printf_i+0x238>)
 8003652:	e7e9      	b.n	8003628 <_printf_i+0x174>
 8003654:	6823      	ldr	r3, [r4, #0]
 8003656:	f023 0320 	bic.w	r3, r3, #32
 800365a:	6023      	str	r3, [r4, #0]
 800365c:	e7f6      	b.n	800364c <_printf_i+0x198>
 800365e:	4616      	mov	r6, r2
 8003660:	e7bd      	b.n	80035de <_printf_i+0x12a>
 8003662:	6833      	ldr	r3, [r6, #0]
 8003664:	6825      	ldr	r5, [r4, #0]
 8003666:	1d18      	adds	r0, r3, #4
 8003668:	6961      	ldr	r1, [r4, #20]
 800366a:	6030      	str	r0, [r6, #0]
 800366c:	062e      	lsls	r6, r5, #24
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	d501      	bpl.n	8003676 <_printf_i+0x1c2>
 8003672:	6019      	str	r1, [r3, #0]
 8003674:	e002      	b.n	800367c <_printf_i+0x1c8>
 8003676:	0668      	lsls	r0, r5, #25
 8003678:	d5fb      	bpl.n	8003672 <_printf_i+0x1be>
 800367a:	8019      	strh	r1, [r3, #0]
 800367c:	2300      	movs	r3, #0
 800367e:	4616      	mov	r6, r2
 8003680:	6123      	str	r3, [r4, #16]
 8003682:	e7bc      	b.n	80035fe <_printf_i+0x14a>
 8003684:	6833      	ldr	r3, [r6, #0]
 8003686:	2100      	movs	r1, #0
 8003688:	1d1a      	adds	r2, r3, #4
 800368a:	6032      	str	r2, [r6, #0]
 800368c:	681e      	ldr	r6, [r3, #0]
 800368e:	6862      	ldr	r2, [r4, #4]
 8003690:	4630      	mov	r0, r6
 8003692:	f000 f9b4 	bl	80039fe <memchr>
 8003696:	b108      	cbz	r0, 800369c <_printf_i+0x1e8>
 8003698:	1b80      	subs	r0, r0, r6
 800369a:	6060      	str	r0, [r4, #4]
 800369c:	6863      	ldr	r3, [r4, #4]
 800369e:	6123      	str	r3, [r4, #16]
 80036a0:	2300      	movs	r3, #0
 80036a2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80036a6:	e7aa      	b.n	80035fe <_printf_i+0x14a>
 80036a8:	4632      	mov	r2, r6
 80036aa:	4649      	mov	r1, r9
 80036ac:	4640      	mov	r0, r8
 80036ae:	6923      	ldr	r3, [r4, #16]
 80036b0:	47d0      	blx	sl
 80036b2:	3001      	adds	r0, #1
 80036b4:	d0ad      	beq.n	8003612 <_printf_i+0x15e>
 80036b6:	6823      	ldr	r3, [r4, #0]
 80036b8:	079b      	lsls	r3, r3, #30
 80036ba:	d413      	bmi.n	80036e4 <_printf_i+0x230>
 80036bc:	68e0      	ldr	r0, [r4, #12]
 80036be:	9b03      	ldr	r3, [sp, #12]
 80036c0:	4298      	cmp	r0, r3
 80036c2:	bfb8      	it	lt
 80036c4:	4618      	movlt	r0, r3
 80036c6:	e7a6      	b.n	8003616 <_printf_i+0x162>
 80036c8:	2301      	movs	r3, #1
 80036ca:	4632      	mov	r2, r6
 80036cc:	4649      	mov	r1, r9
 80036ce:	4640      	mov	r0, r8
 80036d0:	47d0      	blx	sl
 80036d2:	3001      	adds	r0, #1
 80036d4:	d09d      	beq.n	8003612 <_printf_i+0x15e>
 80036d6:	3501      	adds	r5, #1
 80036d8:	68e3      	ldr	r3, [r4, #12]
 80036da:	9903      	ldr	r1, [sp, #12]
 80036dc:	1a5b      	subs	r3, r3, r1
 80036de:	42ab      	cmp	r3, r5
 80036e0:	dcf2      	bgt.n	80036c8 <_printf_i+0x214>
 80036e2:	e7eb      	b.n	80036bc <_printf_i+0x208>
 80036e4:	2500      	movs	r5, #0
 80036e6:	f104 0619 	add.w	r6, r4, #25
 80036ea:	e7f5      	b.n	80036d8 <_printf_i+0x224>
 80036ec:	080057c0 	.word	0x080057c0
 80036f0:	080057d1 	.word	0x080057d1

080036f4 <std>:
 80036f4:	2300      	movs	r3, #0
 80036f6:	b510      	push	{r4, lr}
 80036f8:	4604      	mov	r4, r0
 80036fa:	e9c0 3300 	strd	r3, r3, [r0]
 80036fe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003702:	6083      	str	r3, [r0, #8]
 8003704:	8181      	strh	r1, [r0, #12]
 8003706:	6643      	str	r3, [r0, #100]	@ 0x64
 8003708:	81c2      	strh	r2, [r0, #14]
 800370a:	6183      	str	r3, [r0, #24]
 800370c:	4619      	mov	r1, r3
 800370e:	2208      	movs	r2, #8
 8003710:	305c      	adds	r0, #92	@ 0x5c
 8003712:	f000 f8f4 	bl	80038fe <memset>
 8003716:	4b0d      	ldr	r3, [pc, #52]	@ (800374c <std+0x58>)
 8003718:	6224      	str	r4, [r4, #32]
 800371a:	6263      	str	r3, [r4, #36]	@ 0x24
 800371c:	4b0c      	ldr	r3, [pc, #48]	@ (8003750 <std+0x5c>)
 800371e:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003720:	4b0c      	ldr	r3, [pc, #48]	@ (8003754 <std+0x60>)
 8003722:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003724:	4b0c      	ldr	r3, [pc, #48]	@ (8003758 <std+0x64>)
 8003726:	6323      	str	r3, [r4, #48]	@ 0x30
 8003728:	4b0c      	ldr	r3, [pc, #48]	@ (800375c <std+0x68>)
 800372a:	429c      	cmp	r4, r3
 800372c:	d006      	beq.n	800373c <std+0x48>
 800372e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003732:	4294      	cmp	r4, r2
 8003734:	d002      	beq.n	800373c <std+0x48>
 8003736:	33d0      	adds	r3, #208	@ 0xd0
 8003738:	429c      	cmp	r4, r3
 800373a:	d105      	bne.n	8003748 <std+0x54>
 800373c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003740:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003744:	f000 b958 	b.w	80039f8 <__retarget_lock_init_recursive>
 8003748:	bd10      	pop	{r4, pc}
 800374a:	bf00      	nop
 800374c:	08003879 	.word	0x08003879
 8003750:	0800389b 	.word	0x0800389b
 8003754:	080038d3 	.word	0x080038d3
 8003758:	080038f7 	.word	0x080038f7
 800375c:	20000228 	.word	0x20000228

08003760 <stdio_exit_handler>:
 8003760:	4a02      	ldr	r2, [pc, #8]	@ (800376c <stdio_exit_handler+0xc>)
 8003762:	4903      	ldr	r1, [pc, #12]	@ (8003770 <stdio_exit_handler+0x10>)
 8003764:	4803      	ldr	r0, [pc, #12]	@ (8003774 <stdio_exit_handler+0x14>)
 8003766:	f000 b869 	b.w	800383c <_fwalk_sglue>
 800376a:	bf00      	nop
 800376c:	2000000c 	.word	0x2000000c
 8003770:	080050bd 	.word	0x080050bd
 8003774:	2000001c 	.word	0x2000001c

08003778 <cleanup_stdio>:
 8003778:	6841      	ldr	r1, [r0, #4]
 800377a:	4b0c      	ldr	r3, [pc, #48]	@ (80037ac <cleanup_stdio+0x34>)
 800377c:	b510      	push	{r4, lr}
 800377e:	4299      	cmp	r1, r3
 8003780:	4604      	mov	r4, r0
 8003782:	d001      	beq.n	8003788 <cleanup_stdio+0x10>
 8003784:	f001 fc9a 	bl	80050bc <_fflush_r>
 8003788:	68a1      	ldr	r1, [r4, #8]
 800378a:	4b09      	ldr	r3, [pc, #36]	@ (80037b0 <cleanup_stdio+0x38>)
 800378c:	4299      	cmp	r1, r3
 800378e:	d002      	beq.n	8003796 <cleanup_stdio+0x1e>
 8003790:	4620      	mov	r0, r4
 8003792:	f001 fc93 	bl	80050bc <_fflush_r>
 8003796:	68e1      	ldr	r1, [r4, #12]
 8003798:	4b06      	ldr	r3, [pc, #24]	@ (80037b4 <cleanup_stdio+0x3c>)
 800379a:	4299      	cmp	r1, r3
 800379c:	d004      	beq.n	80037a8 <cleanup_stdio+0x30>
 800379e:	4620      	mov	r0, r4
 80037a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80037a4:	f001 bc8a 	b.w	80050bc <_fflush_r>
 80037a8:	bd10      	pop	{r4, pc}
 80037aa:	bf00      	nop
 80037ac:	20000228 	.word	0x20000228
 80037b0:	20000290 	.word	0x20000290
 80037b4:	200002f8 	.word	0x200002f8

080037b8 <global_stdio_init.part.0>:
 80037b8:	b510      	push	{r4, lr}
 80037ba:	4b0b      	ldr	r3, [pc, #44]	@ (80037e8 <global_stdio_init.part.0+0x30>)
 80037bc:	4c0b      	ldr	r4, [pc, #44]	@ (80037ec <global_stdio_init.part.0+0x34>)
 80037be:	4a0c      	ldr	r2, [pc, #48]	@ (80037f0 <global_stdio_init.part.0+0x38>)
 80037c0:	4620      	mov	r0, r4
 80037c2:	601a      	str	r2, [r3, #0]
 80037c4:	2104      	movs	r1, #4
 80037c6:	2200      	movs	r2, #0
 80037c8:	f7ff ff94 	bl	80036f4 <std>
 80037cc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80037d0:	2201      	movs	r2, #1
 80037d2:	2109      	movs	r1, #9
 80037d4:	f7ff ff8e 	bl	80036f4 <std>
 80037d8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80037dc:	2202      	movs	r2, #2
 80037de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80037e2:	2112      	movs	r1, #18
 80037e4:	f7ff bf86 	b.w	80036f4 <std>
 80037e8:	20000360 	.word	0x20000360
 80037ec:	20000228 	.word	0x20000228
 80037f0:	08003761 	.word	0x08003761

080037f4 <__sfp_lock_acquire>:
 80037f4:	4801      	ldr	r0, [pc, #4]	@ (80037fc <__sfp_lock_acquire+0x8>)
 80037f6:	f000 b900 	b.w	80039fa <__retarget_lock_acquire_recursive>
 80037fa:	bf00      	nop
 80037fc:	20000369 	.word	0x20000369

08003800 <__sfp_lock_release>:
 8003800:	4801      	ldr	r0, [pc, #4]	@ (8003808 <__sfp_lock_release+0x8>)
 8003802:	f000 b8fb 	b.w	80039fc <__retarget_lock_release_recursive>
 8003806:	bf00      	nop
 8003808:	20000369 	.word	0x20000369

0800380c <__sinit>:
 800380c:	b510      	push	{r4, lr}
 800380e:	4604      	mov	r4, r0
 8003810:	f7ff fff0 	bl	80037f4 <__sfp_lock_acquire>
 8003814:	6a23      	ldr	r3, [r4, #32]
 8003816:	b11b      	cbz	r3, 8003820 <__sinit+0x14>
 8003818:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800381c:	f7ff bff0 	b.w	8003800 <__sfp_lock_release>
 8003820:	4b04      	ldr	r3, [pc, #16]	@ (8003834 <__sinit+0x28>)
 8003822:	6223      	str	r3, [r4, #32]
 8003824:	4b04      	ldr	r3, [pc, #16]	@ (8003838 <__sinit+0x2c>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d1f5      	bne.n	8003818 <__sinit+0xc>
 800382c:	f7ff ffc4 	bl	80037b8 <global_stdio_init.part.0>
 8003830:	e7f2      	b.n	8003818 <__sinit+0xc>
 8003832:	bf00      	nop
 8003834:	08003779 	.word	0x08003779
 8003838:	20000360 	.word	0x20000360

0800383c <_fwalk_sglue>:
 800383c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003840:	4607      	mov	r7, r0
 8003842:	4688      	mov	r8, r1
 8003844:	4614      	mov	r4, r2
 8003846:	2600      	movs	r6, #0
 8003848:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800384c:	f1b9 0901 	subs.w	r9, r9, #1
 8003850:	d505      	bpl.n	800385e <_fwalk_sglue+0x22>
 8003852:	6824      	ldr	r4, [r4, #0]
 8003854:	2c00      	cmp	r4, #0
 8003856:	d1f7      	bne.n	8003848 <_fwalk_sglue+0xc>
 8003858:	4630      	mov	r0, r6
 800385a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800385e:	89ab      	ldrh	r3, [r5, #12]
 8003860:	2b01      	cmp	r3, #1
 8003862:	d907      	bls.n	8003874 <_fwalk_sglue+0x38>
 8003864:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003868:	3301      	adds	r3, #1
 800386a:	d003      	beq.n	8003874 <_fwalk_sglue+0x38>
 800386c:	4629      	mov	r1, r5
 800386e:	4638      	mov	r0, r7
 8003870:	47c0      	blx	r8
 8003872:	4306      	orrs	r6, r0
 8003874:	3568      	adds	r5, #104	@ 0x68
 8003876:	e7e9      	b.n	800384c <_fwalk_sglue+0x10>

08003878 <__sread>:
 8003878:	b510      	push	{r4, lr}
 800387a:	460c      	mov	r4, r1
 800387c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003880:	f000 f86c 	bl	800395c <_read_r>
 8003884:	2800      	cmp	r0, #0
 8003886:	bfab      	itete	ge
 8003888:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800388a:	89a3      	ldrhlt	r3, [r4, #12]
 800388c:	181b      	addge	r3, r3, r0
 800388e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003892:	bfac      	ite	ge
 8003894:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003896:	81a3      	strhlt	r3, [r4, #12]
 8003898:	bd10      	pop	{r4, pc}

0800389a <__swrite>:
 800389a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800389e:	461f      	mov	r7, r3
 80038a0:	898b      	ldrh	r3, [r1, #12]
 80038a2:	4605      	mov	r5, r0
 80038a4:	05db      	lsls	r3, r3, #23
 80038a6:	460c      	mov	r4, r1
 80038a8:	4616      	mov	r6, r2
 80038aa:	d505      	bpl.n	80038b8 <__swrite+0x1e>
 80038ac:	2302      	movs	r3, #2
 80038ae:	2200      	movs	r2, #0
 80038b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80038b4:	f000 f840 	bl	8003938 <_lseek_r>
 80038b8:	89a3      	ldrh	r3, [r4, #12]
 80038ba:	4632      	mov	r2, r6
 80038bc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80038c0:	81a3      	strh	r3, [r4, #12]
 80038c2:	4628      	mov	r0, r5
 80038c4:	463b      	mov	r3, r7
 80038c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80038ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80038ce:	f000 b857 	b.w	8003980 <_write_r>

080038d2 <__sseek>:
 80038d2:	b510      	push	{r4, lr}
 80038d4:	460c      	mov	r4, r1
 80038d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80038da:	f000 f82d 	bl	8003938 <_lseek_r>
 80038de:	1c43      	adds	r3, r0, #1
 80038e0:	89a3      	ldrh	r3, [r4, #12]
 80038e2:	bf15      	itete	ne
 80038e4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80038e6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80038ea:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80038ee:	81a3      	strheq	r3, [r4, #12]
 80038f0:	bf18      	it	ne
 80038f2:	81a3      	strhne	r3, [r4, #12]
 80038f4:	bd10      	pop	{r4, pc}

080038f6 <__sclose>:
 80038f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80038fa:	f000 b80d 	b.w	8003918 <_close_r>

080038fe <memset>:
 80038fe:	4603      	mov	r3, r0
 8003900:	4402      	add	r2, r0
 8003902:	4293      	cmp	r3, r2
 8003904:	d100      	bne.n	8003908 <memset+0xa>
 8003906:	4770      	bx	lr
 8003908:	f803 1b01 	strb.w	r1, [r3], #1
 800390c:	e7f9      	b.n	8003902 <memset+0x4>
	...

08003910 <_localeconv_r>:
 8003910:	4800      	ldr	r0, [pc, #0]	@ (8003914 <_localeconv_r+0x4>)
 8003912:	4770      	bx	lr
 8003914:	20000158 	.word	0x20000158

08003918 <_close_r>:
 8003918:	b538      	push	{r3, r4, r5, lr}
 800391a:	2300      	movs	r3, #0
 800391c:	4d05      	ldr	r5, [pc, #20]	@ (8003934 <_close_r+0x1c>)
 800391e:	4604      	mov	r4, r0
 8003920:	4608      	mov	r0, r1
 8003922:	602b      	str	r3, [r5, #0]
 8003924:	f7fd fd81 	bl	800142a <_close>
 8003928:	1c43      	adds	r3, r0, #1
 800392a:	d102      	bne.n	8003932 <_close_r+0x1a>
 800392c:	682b      	ldr	r3, [r5, #0]
 800392e:	b103      	cbz	r3, 8003932 <_close_r+0x1a>
 8003930:	6023      	str	r3, [r4, #0]
 8003932:	bd38      	pop	{r3, r4, r5, pc}
 8003934:	20000364 	.word	0x20000364

08003938 <_lseek_r>:
 8003938:	b538      	push	{r3, r4, r5, lr}
 800393a:	4604      	mov	r4, r0
 800393c:	4608      	mov	r0, r1
 800393e:	4611      	mov	r1, r2
 8003940:	2200      	movs	r2, #0
 8003942:	4d05      	ldr	r5, [pc, #20]	@ (8003958 <_lseek_r+0x20>)
 8003944:	602a      	str	r2, [r5, #0]
 8003946:	461a      	mov	r2, r3
 8003948:	f7fd fd93 	bl	8001472 <_lseek>
 800394c:	1c43      	adds	r3, r0, #1
 800394e:	d102      	bne.n	8003956 <_lseek_r+0x1e>
 8003950:	682b      	ldr	r3, [r5, #0]
 8003952:	b103      	cbz	r3, 8003956 <_lseek_r+0x1e>
 8003954:	6023      	str	r3, [r4, #0]
 8003956:	bd38      	pop	{r3, r4, r5, pc}
 8003958:	20000364 	.word	0x20000364

0800395c <_read_r>:
 800395c:	b538      	push	{r3, r4, r5, lr}
 800395e:	4604      	mov	r4, r0
 8003960:	4608      	mov	r0, r1
 8003962:	4611      	mov	r1, r2
 8003964:	2200      	movs	r2, #0
 8003966:	4d05      	ldr	r5, [pc, #20]	@ (800397c <_read_r+0x20>)
 8003968:	602a      	str	r2, [r5, #0]
 800396a:	461a      	mov	r2, r3
 800396c:	f7fd fd24 	bl	80013b8 <_read>
 8003970:	1c43      	adds	r3, r0, #1
 8003972:	d102      	bne.n	800397a <_read_r+0x1e>
 8003974:	682b      	ldr	r3, [r5, #0]
 8003976:	b103      	cbz	r3, 800397a <_read_r+0x1e>
 8003978:	6023      	str	r3, [r4, #0]
 800397a:	bd38      	pop	{r3, r4, r5, pc}
 800397c:	20000364 	.word	0x20000364

08003980 <_write_r>:
 8003980:	b538      	push	{r3, r4, r5, lr}
 8003982:	4604      	mov	r4, r0
 8003984:	4608      	mov	r0, r1
 8003986:	4611      	mov	r1, r2
 8003988:	2200      	movs	r2, #0
 800398a:	4d05      	ldr	r5, [pc, #20]	@ (80039a0 <_write_r+0x20>)
 800398c:	602a      	str	r2, [r5, #0]
 800398e:	461a      	mov	r2, r3
 8003990:	f7fd fd2f 	bl	80013f2 <_write>
 8003994:	1c43      	adds	r3, r0, #1
 8003996:	d102      	bne.n	800399e <_write_r+0x1e>
 8003998:	682b      	ldr	r3, [r5, #0]
 800399a:	b103      	cbz	r3, 800399e <_write_r+0x1e>
 800399c:	6023      	str	r3, [r4, #0]
 800399e:	bd38      	pop	{r3, r4, r5, pc}
 80039a0:	20000364 	.word	0x20000364

080039a4 <__errno>:
 80039a4:	4b01      	ldr	r3, [pc, #4]	@ (80039ac <__errno+0x8>)
 80039a6:	6818      	ldr	r0, [r3, #0]
 80039a8:	4770      	bx	lr
 80039aa:	bf00      	nop
 80039ac:	20000018 	.word	0x20000018

080039b0 <__libc_init_array>:
 80039b0:	b570      	push	{r4, r5, r6, lr}
 80039b2:	2600      	movs	r6, #0
 80039b4:	4d0c      	ldr	r5, [pc, #48]	@ (80039e8 <__libc_init_array+0x38>)
 80039b6:	4c0d      	ldr	r4, [pc, #52]	@ (80039ec <__libc_init_array+0x3c>)
 80039b8:	1b64      	subs	r4, r4, r5
 80039ba:	10a4      	asrs	r4, r4, #2
 80039bc:	42a6      	cmp	r6, r4
 80039be:	d109      	bne.n	80039d4 <__libc_init_array+0x24>
 80039c0:	f001 fec8 	bl	8005754 <_init>
 80039c4:	2600      	movs	r6, #0
 80039c6:	4d0a      	ldr	r5, [pc, #40]	@ (80039f0 <__libc_init_array+0x40>)
 80039c8:	4c0a      	ldr	r4, [pc, #40]	@ (80039f4 <__libc_init_array+0x44>)
 80039ca:	1b64      	subs	r4, r4, r5
 80039cc:	10a4      	asrs	r4, r4, #2
 80039ce:	42a6      	cmp	r6, r4
 80039d0:	d105      	bne.n	80039de <__libc_init_array+0x2e>
 80039d2:	bd70      	pop	{r4, r5, r6, pc}
 80039d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80039d8:	4798      	blx	r3
 80039da:	3601      	adds	r6, #1
 80039dc:	e7ee      	b.n	80039bc <__libc_init_array+0xc>
 80039de:	f855 3b04 	ldr.w	r3, [r5], #4
 80039e2:	4798      	blx	r3
 80039e4:	3601      	adds	r6, #1
 80039e6:	e7f2      	b.n	80039ce <__libc_init_array+0x1e>
 80039e8:	08005b28 	.word	0x08005b28
 80039ec:	08005b28 	.word	0x08005b28
 80039f0:	08005b28 	.word	0x08005b28
 80039f4:	08005b2c 	.word	0x08005b2c

080039f8 <__retarget_lock_init_recursive>:
 80039f8:	4770      	bx	lr

080039fa <__retarget_lock_acquire_recursive>:
 80039fa:	4770      	bx	lr

080039fc <__retarget_lock_release_recursive>:
 80039fc:	4770      	bx	lr

080039fe <memchr>:
 80039fe:	4603      	mov	r3, r0
 8003a00:	b510      	push	{r4, lr}
 8003a02:	b2c9      	uxtb	r1, r1
 8003a04:	4402      	add	r2, r0
 8003a06:	4293      	cmp	r3, r2
 8003a08:	4618      	mov	r0, r3
 8003a0a:	d101      	bne.n	8003a10 <memchr+0x12>
 8003a0c:	2000      	movs	r0, #0
 8003a0e:	e003      	b.n	8003a18 <memchr+0x1a>
 8003a10:	7804      	ldrb	r4, [r0, #0]
 8003a12:	3301      	adds	r3, #1
 8003a14:	428c      	cmp	r4, r1
 8003a16:	d1f6      	bne.n	8003a06 <memchr+0x8>
 8003a18:	bd10      	pop	{r4, pc}

08003a1a <quorem>:
 8003a1a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a1e:	6903      	ldr	r3, [r0, #16]
 8003a20:	690c      	ldr	r4, [r1, #16]
 8003a22:	4607      	mov	r7, r0
 8003a24:	42a3      	cmp	r3, r4
 8003a26:	db7e      	blt.n	8003b26 <quorem+0x10c>
 8003a28:	3c01      	subs	r4, #1
 8003a2a:	00a3      	lsls	r3, r4, #2
 8003a2c:	f100 0514 	add.w	r5, r0, #20
 8003a30:	f101 0814 	add.w	r8, r1, #20
 8003a34:	9300      	str	r3, [sp, #0]
 8003a36:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003a3a:	9301      	str	r3, [sp, #4]
 8003a3c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8003a40:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003a44:	3301      	adds	r3, #1
 8003a46:	429a      	cmp	r2, r3
 8003a48:	fbb2 f6f3 	udiv	r6, r2, r3
 8003a4c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8003a50:	d32e      	bcc.n	8003ab0 <quorem+0x96>
 8003a52:	f04f 0a00 	mov.w	sl, #0
 8003a56:	46c4      	mov	ip, r8
 8003a58:	46ae      	mov	lr, r5
 8003a5a:	46d3      	mov	fp, sl
 8003a5c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8003a60:	b298      	uxth	r0, r3
 8003a62:	fb06 a000 	mla	r0, r6, r0, sl
 8003a66:	0c1b      	lsrs	r3, r3, #16
 8003a68:	0c02      	lsrs	r2, r0, #16
 8003a6a:	fb06 2303 	mla	r3, r6, r3, r2
 8003a6e:	f8de 2000 	ldr.w	r2, [lr]
 8003a72:	b280      	uxth	r0, r0
 8003a74:	b292      	uxth	r2, r2
 8003a76:	1a12      	subs	r2, r2, r0
 8003a78:	445a      	add	r2, fp
 8003a7a:	f8de 0000 	ldr.w	r0, [lr]
 8003a7e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8003a82:	b29b      	uxth	r3, r3
 8003a84:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8003a88:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8003a8c:	b292      	uxth	r2, r2
 8003a8e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8003a92:	45e1      	cmp	r9, ip
 8003a94:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8003a98:	f84e 2b04 	str.w	r2, [lr], #4
 8003a9c:	d2de      	bcs.n	8003a5c <quorem+0x42>
 8003a9e:	9b00      	ldr	r3, [sp, #0]
 8003aa0:	58eb      	ldr	r3, [r5, r3]
 8003aa2:	b92b      	cbnz	r3, 8003ab0 <quorem+0x96>
 8003aa4:	9b01      	ldr	r3, [sp, #4]
 8003aa6:	3b04      	subs	r3, #4
 8003aa8:	429d      	cmp	r5, r3
 8003aaa:	461a      	mov	r2, r3
 8003aac:	d32f      	bcc.n	8003b0e <quorem+0xf4>
 8003aae:	613c      	str	r4, [r7, #16]
 8003ab0:	4638      	mov	r0, r7
 8003ab2:	f001 f97b 	bl	8004dac <__mcmp>
 8003ab6:	2800      	cmp	r0, #0
 8003ab8:	db25      	blt.n	8003b06 <quorem+0xec>
 8003aba:	4629      	mov	r1, r5
 8003abc:	2000      	movs	r0, #0
 8003abe:	f858 2b04 	ldr.w	r2, [r8], #4
 8003ac2:	f8d1 c000 	ldr.w	ip, [r1]
 8003ac6:	fa1f fe82 	uxth.w	lr, r2
 8003aca:	fa1f f38c 	uxth.w	r3, ip
 8003ace:	eba3 030e 	sub.w	r3, r3, lr
 8003ad2:	4403      	add	r3, r0
 8003ad4:	0c12      	lsrs	r2, r2, #16
 8003ad6:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8003ada:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8003ade:	b29b      	uxth	r3, r3
 8003ae0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003ae4:	45c1      	cmp	r9, r8
 8003ae6:	ea4f 4022 	mov.w	r0, r2, asr #16
 8003aea:	f841 3b04 	str.w	r3, [r1], #4
 8003aee:	d2e6      	bcs.n	8003abe <quorem+0xa4>
 8003af0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003af4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003af8:	b922      	cbnz	r2, 8003b04 <quorem+0xea>
 8003afa:	3b04      	subs	r3, #4
 8003afc:	429d      	cmp	r5, r3
 8003afe:	461a      	mov	r2, r3
 8003b00:	d30b      	bcc.n	8003b1a <quorem+0x100>
 8003b02:	613c      	str	r4, [r7, #16]
 8003b04:	3601      	adds	r6, #1
 8003b06:	4630      	mov	r0, r6
 8003b08:	b003      	add	sp, #12
 8003b0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b0e:	6812      	ldr	r2, [r2, #0]
 8003b10:	3b04      	subs	r3, #4
 8003b12:	2a00      	cmp	r2, #0
 8003b14:	d1cb      	bne.n	8003aae <quorem+0x94>
 8003b16:	3c01      	subs	r4, #1
 8003b18:	e7c6      	b.n	8003aa8 <quorem+0x8e>
 8003b1a:	6812      	ldr	r2, [r2, #0]
 8003b1c:	3b04      	subs	r3, #4
 8003b1e:	2a00      	cmp	r2, #0
 8003b20:	d1ef      	bne.n	8003b02 <quorem+0xe8>
 8003b22:	3c01      	subs	r4, #1
 8003b24:	e7ea      	b.n	8003afc <quorem+0xe2>
 8003b26:	2000      	movs	r0, #0
 8003b28:	e7ee      	b.n	8003b08 <quorem+0xee>
 8003b2a:	0000      	movs	r0, r0
 8003b2c:	0000      	movs	r0, r0
	...

08003b30 <_dtoa_r>:
 8003b30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b34:	4614      	mov	r4, r2
 8003b36:	461d      	mov	r5, r3
 8003b38:	69c7      	ldr	r7, [r0, #28]
 8003b3a:	b097      	sub	sp, #92	@ 0x5c
 8003b3c:	4683      	mov	fp, r0
 8003b3e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8003b42:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8003b44:	b97f      	cbnz	r7, 8003b66 <_dtoa_r+0x36>
 8003b46:	2010      	movs	r0, #16
 8003b48:	f000 fe02 	bl	8004750 <malloc>
 8003b4c:	4602      	mov	r2, r0
 8003b4e:	f8cb 001c 	str.w	r0, [fp, #28]
 8003b52:	b920      	cbnz	r0, 8003b5e <_dtoa_r+0x2e>
 8003b54:	21ef      	movs	r1, #239	@ 0xef
 8003b56:	4ba8      	ldr	r3, [pc, #672]	@ (8003df8 <_dtoa_r+0x2c8>)
 8003b58:	48a8      	ldr	r0, [pc, #672]	@ (8003dfc <_dtoa_r+0x2cc>)
 8003b5a:	f001 faf5 	bl	8005148 <__assert_func>
 8003b5e:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8003b62:	6007      	str	r7, [r0, #0]
 8003b64:	60c7      	str	r7, [r0, #12]
 8003b66:	f8db 301c 	ldr.w	r3, [fp, #28]
 8003b6a:	6819      	ldr	r1, [r3, #0]
 8003b6c:	b159      	cbz	r1, 8003b86 <_dtoa_r+0x56>
 8003b6e:	685a      	ldr	r2, [r3, #4]
 8003b70:	2301      	movs	r3, #1
 8003b72:	4093      	lsls	r3, r2
 8003b74:	604a      	str	r2, [r1, #4]
 8003b76:	608b      	str	r3, [r1, #8]
 8003b78:	4658      	mov	r0, fp
 8003b7a:	f000 fedf 	bl	800493c <_Bfree>
 8003b7e:	2200      	movs	r2, #0
 8003b80:	f8db 301c 	ldr.w	r3, [fp, #28]
 8003b84:	601a      	str	r2, [r3, #0]
 8003b86:	1e2b      	subs	r3, r5, #0
 8003b88:	bfaf      	iteee	ge
 8003b8a:	2300      	movge	r3, #0
 8003b8c:	2201      	movlt	r2, #1
 8003b8e:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8003b92:	9303      	strlt	r3, [sp, #12]
 8003b94:	bfa8      	it	ge
 8003b96:	6033      	strge	r3, [r6, #0]
 8003b98:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8003b9c:	4b98      	ldr	r3, [pc, #608]	@ (8003e00 <_dtoa_r+0x2d0>)
 8003b9e:	bfb8      	it	lt
 8003ba0:	6032      	strlt	r2, [r6, #0]
 8003ba2:	ea33 0308 	bics.w	r3, r3, r8
 8003ba6:	d112      	bne.n	8003bce <_dtoa_r+0x9e>
 8003ba8:	f242 730f 	movw	r3, #9999	@ 0x270f
 8003bac:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8003bae:	6013      	str	r3, [r2, #0]
 8003bb0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8003bb4:	4323      	orrs	r3, r4
 8003bb6:	f000 8550 	beq.w	800465a <_dtoa_r+0xb2a>
 8003bba:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8003bbc:	f8df a244 	ldr.w	sl, [pc, #580]	@ 8003e04 <_dtoa_r+0x2d4>
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	f000 8552 	beq.w	800466a <_dtoa_r+0xb3a>
 8003bc6:	f10a 0303 	add.w	r3, sl, #3
 8003bca:	f000 bd4c 	b.w	8004666 <_dtoa_r+0xb36>
 8003bce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003bd2:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8003bd6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8003bda:	2200      	movs	r2, #0
 8003bdc:	2300      	movs	r3, #0
 8003bde:	f7fc fee3 	bl	80009a8 <__aeabi_dcmpeq>
 8003be2:	4607      	mov	r7, r0
 8003be4:	b158      	cbz	r0, 8003bfe <_dtoa_r+0xce>
 8003be6:	2301      	movs	r3, #1
 8003be8:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8003bea:	6013      	str	r3, [r2, #0]
 8003bec:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8003bee:	b113      	cbz	r3, 8003bf6 <_dtoa_r+0xc6>
 8003bf0:	4b85      	ldr	r3, [pc, #532]	@ (8003e08 <_dtoa_r+0x2d8>)
 8003bf2:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8003bf4:	6013      	str	r3, [r2, #0]
 8003bf6:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8003e0c <_dtoa_r+0x2dc>
 8003bfa:	f000 bd36 	b.w	800466a <_dtoa_r+0xb3a>
 8003bfe:	ab14      	add	r3, sp, #80	@ 0x50
 8003c00:	9301      	str	r3, [sp, #4]
 8003c02:	ab15      	add	r3, sp, #84	@ 0x54
 8003c04:	9300      	str	r3, [sp, #0]
 8003c06:	4658      	mov	r0, fp
 8003c08:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8003c0c:	f001 f97e 	bl	8004f0c <__d2b>
 8003c10:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8003c14:	4681      	mov	r9, r0
 8003c16:	2e00      	cmp	r6, #0
 8003c18:	d077      	beq.n	8003d0a <_dtoa_r+0x1da>
 8003c1a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8003c1e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003c20:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8003c24:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003c28:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8003c2c:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8003c30:	9712      	str	r7, [sp, #72]	@ 0x48
 8003c32:	4619      	mov	r1, r3
 8003c34:	2200      	movs	r2, #0
 8003c36:	4b76      	ldr	r3, [pc, #472]	@ (8003e10 <_dtoa_r+0x2e0>)
 8003c38:	f7fc fa96 	bl	8000168 <__aeabi_dsub>
 8003c3c:	a368      	add	r3, pc, #416	@ (adr r3, 8003de0 <_dtoa_r+0x2b0>)
 8003c3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c42:	f7fc fc49 	bl	80004d8 <__aeabi_dmul>
 8003c46:	a368      	add	r3, pc, #416	@ (adr r3, 8003de8 <_dtoa_r+0x2b8>)
 8003c48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c4c:	f7fc fa8e 	bl	800016c <__adddf3>
 8003c50:	4604      	mov	r4, r0
 8003c52:	4630      	mov	r0, r6
 8003c54:	460d      	mov	r5, r1
 8003c56:	f7fc fbd5 	bl	8000404 <__aeabi_i2d>
 8003c5a:	a365      	add	r3, pc, #404	@ (adr r3, 8003df0 <_dtoa_r+0x2c0>)
 8003c5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c60:	f7fc fc3a 	bl	80004d8 <__aeabi_dmul>
 8003c64:	4602      	mov	r2, r0
 8003c66:	460b      	mov	r3, r1
 8003c68:	4620      	mov	r0, r4
 8003c6a:	4629      	mov	r1, r5
 8003c6c:	f7fc fa7e 	bl	800016c <__adddf3>
 8003c70:	4604      	mov	r4, r0
 8003c72:	460d      	mov	r5, r1
 8003c74:	f7fc fee0 	bl	8000a38 <__aeabi_d2iz>
 8003c78:	2200      	movs	r2, #0
 8003c7a:	4607      	mov	r7, r0
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	4620      	mov	r0, r4
 8003c80:	4629      	mov	r1, r5
 8003c82:	f7fc fe9b 	bl	80009bc <__aeabi_dcmplt>
 8003c86:	b140      	cbz	r0, 8003c9a <_dtoa_r+0x16a>
 8003c88:	4638      	mov	r0, r7
 8003c8a:	f7fc fbbb 	bl	8000404 <__aeabi_i2d>
 8003c8e:	4622      	mov	r2, r4
 8003c90:	462b      	mov	r3, r5
 8003c92:	f7fc fe89 	bl	80009a8 <__aeabi_dcmpeq>
 8003c96:	b900      	cbnz	r0, 8003c9a <_dtoa_r+0x16a>
 8003c98:	3f01      	subs	r7, #1
 8003c9a:	2f16      	cmp	r7, #22
 8003c9c:	d853      	bhi.n	8003d46 <_dtoa_r+0x216>
 8003c9e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8003ca2:	4b5c      	ldr	r3, [pc, #368]	@ (8003e14 <_dtoa_r+0x2e4>)
 8003ca4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8003ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cac:	f7fc fe86 	bl	80009bc <__aeabi_dcmplt>
 8003cb0:	2800      	cmp	r0, #0
 8003cb2:	d04a      	beq.n	8003d4a <_dtoa_r+0x21a>
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	3f01      	subs	r7, #1
 8003cb8:	930f      	str	r3, [sp, #60]	@ 0x3c
 8003cba:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8003cbc:	1b9b      	subs	r3, r3, r6
 8003cbe:	1e5a      	subs	r2, r3, #1
 8003cc0:	bf46      	itte	mi
 8003cc2:	f1c3 0801 	rsbmi	r8, r3, #1
 8003cc6:	2300      	movmi	r3, #0
 8003cc8:	f04f 0800 	movpl.w	r8, #0
 8003ccc:	9209      	str	r2, [sp, #36]	@ 0x24
 8003cce:	bf48      	it	mi
 8003cd0:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8003cd2:	2f00      	cmp	r7, #0
 8003cd4:	db3b      	blt.n	8003d4e <_dtoa_r+0x21e>
 8003cd6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003cd8:	970e      	str	r7, [sp, #56]	@ 0x38
 8003cda:	443b      	add	r3, r7
 8003cdc:	9309      	str	r3, [sp, #36]	@ 0x24
 8003cde:	2300      	movs	r3, #0
 8003ce0:	930a      	str	r3, [sp, #40]	@ 0x28
 8003ce2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8003ce4:	2b09      	cmp	r3, #9
 8003ce6:	d866      	bhi.n	8003db6 <_dtoa_r+0x286>
 8003ce8:	2b05      	cmp	r3, #5
 8003cea:	bfc4      	itt	gt
 8003cec:	3b04      	subgt	r3, #4
 8003cee:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8003cf0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8003cf2:	bfc8      	it	gt
 8003cf4:	2400      	movgt	r4, #0
 8003cf6:	f1a3 0302 	sub.w	r3, r3, #2
 8003cfa:	bfd8      	it	le
 8003cfc:	2401      	movle	r4, #1
 8003cfe:	2b03      	cmp	r3, #3
 8003d00:	d864      	bhi.n	8003dcc <_dtoa_r+0x29c>
 8003d02:	e8df f003 	tbb	[pc, r3]
 8003d06:	382b      	.short	0x382b
 8003d08:	5636      	.short	0x5636
 8003d0a:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8003d0e:	441e      	add	r6, r3
 8003d10:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8003d14:	2b20      	cmp	r3, #32
 8003d16:	bfc1      	itttt	gt
 8003d18:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8003d1c:	fa08 f803 	lslgt.w	r8, r8, r3
 8003d20:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8003d24:	fa24 f303 	lsrgt.w	r3, r4, r3
 8003d28:	bfd6      	itet	le
 8003d2a:	f1c3 0320 	rsble	r3, r3, #32
 8003d2e:	ea48 0003 	orrgt.w	r0, r8, r3
 8003d32:	fa04 f003 	lslle.w	r0, r4, r3
 8003d36:	f7fc fb55 	bl	80003e4 <__aeabi_ui2d>
 8003d3a:	2201      	movs	r2, #1
 8003d3c:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8003d40:	3e01      	subs	r6, #1
 8003d42:	9212      	str	r2, [sp, #72]	@ 0x48
 8003d44:	e775      	b.n	8003c32 <_dtoa_r+0x102>
 8003d46:	2301      	movs	r3, #1
 8003d48:	e7b6      	b.n	8003cb8 <_dtoa_r+0x188>
 8003d4a:	900f      	str	r0, [sp, #60]	@ 0x3c
 8003d4c:	e7b5      	b.n	8003cba <_dtoa_r+0x18a>
 8003d4e:	427b      	negs	r3, r7
 8003d50:	930a      	str	r3, [sp, #40]	@ 0x28
 8003d52:	2300      	movs	r3, #0
 8003d54:	eba8 0807 	sub.w	r8, r8, r7
 8003d58:	930e      	str	r3, [sp, #56]	@ 0x38
 8003d5a:	e7c2      	b.n	8003ce2 <_dtoa_r+0x1b2>
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003d60:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	dc35      	bgt.n	8003dd2 <_dtoa_r+0x2a2>
 8003d66:	2301      	movs	r3, #1
 8003d68:	461a      	mov	r2, r3
 8003d6a:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8003d6e:	9221      	str	r2, [sp, #132]	@ 0x84
 8003d70:	e00b      	b.n	8003d8a <_dtoa_r+0x25a>
 8003d72:	2301      	movs	r3, #1
 8003d74:	e7f3      	b.n	8003d5e <_dtoa_r+0x22e>
 8003d76:	2300      	movs	r3, #0
 8003d78:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003d7a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8003d7c:	18fb      	adds	r3, r7, r3
 8003d7e:	9308      	str	r3, [sp, #32]
 8003d80:	3301      	adds	r3, #1
 8003d82:	2b01      	cmp	r3, #1
 8003d84:	9307      	str	r3, [sp, #28]
 8003d86:	bfb8      	it	lt
 8003d88:	2301      	movlt	r3, #1
 8003d8a:	2100      	movs	r1, #0
 8003d8c:	2204      	movs	r2, #4
 8003d8e:	f8db 001c 	ldr.w	r0, [fp, #28]
 8003d92:	f102 0514 	add.w	r5, r2, #20
 8003d96:	429d      	cmp	r5, r3
 8003d98:	d91f      	bls.n	8003dda <_dtoa_r+0x2aa>
 8003d9a:	6041      	str	r1, [r0, #4]
 8003d9c:	4658      	mov	r0, fp
 8003d9e:	f000 fd8d 	bl	80048bc <_Balloc>
 8003da2:	4682      	mov	sl, r0
 8003da4:	2800      	cmp	r0, #0
 8003da6:	d139      	bne.n	8003e1c <_dtoa_r+0x2ec>
 8003da8:	4602      	mov	r2, r0
 8003daa:	f240 11af 	movw	r1, #431	@ 0x1af
 8003dae:	4b1a      	ldr	r3, [pc, #104]	@ (8003e18 <_dtoa_r+0x2e8>)
 8003db0:	e6d2      	b.n	8003b58 <_dtoa_r+0x28>
 8003db2:	2301      	movs	r3, #1
 8003db4:	e7e0      	b.n	8003d78 <_dtoa_r+0x248>
 8003db6:	2401      	movs	r4, #1
 8003db8:	2300      	movs	r3, #0
 8003dba:	940b      	str	r4, [sp, #44]	@ 0x2c
 8003dbc:	9320      	str	r3, [sp, #128]	@ 0x80
 8003dbe:	f04f 33ff 	mov.w	r3, #4294967295
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8003dc8:	2312      	movs	r3, #18
 8003dca:	e7d0      	b.n	8003d6e <_dtoa_r+0x23e>
 8003dcc:	2301      	movs	r3, #1
 8003dce:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003dd0:	e7f5      	b.n	8003dbe <_dtoa_r+0x28e>
 8003dd2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8003dd4:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8003dd8:	e7d7      	b.n	8003d8a <_dtoa_r+0x25a>
 8003dda:	3101      	adds	r1, #1
 8003ddc:	0052      	lsls	r2, r2, #1
 8003dde:	e7d8      	b.n	8003d92 <_dtoa_r+0x262>
 8003de0:	636f4361 	.word	0x636f4361
 8003de4:	3fd287a7 	.word	0x3fd287a7
 8003de8:	8b60c8b3 	.word	0x8b60c8b3
 8003dec:	3fc68a28 	.word	0x3fc68a28
 8003df0:	509f79fb 	.word	0x509f79fb
 8003df4:	3fd34413 	.word	0x3fd34413
 8003df8:	080057ef 	.word	0x080057ef
 8003dfc:	08005806 	.word	0x08005806
 8003e00:	7ff00000 	.word	0x7ff00000
 8003e04:	080057eb 	.word	0x080057eb
 8003e08:	080057bf 	.word	0x080057bf
 8003e0c:	080057be 	.word	0x080057be
 8003e10:	3ff80000 	.word	0x3ff80000
 8003e14:	08005900 	.word	0x08005900
 8003e18:	0800585e 	.word	0x0800585e
 8003e1c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8003e20:	6018      	str	r0, [r3, #0]
 8003e22:	9b07      	ldr	r3, [sp, #28]
 8003e24:	2b0e      	cmp	r3, #14
 8003e26:	f200 80a4 	bhi.w	8003f72 <_dtoa_r+0x442>
 8003e2a:	2c00      	cmp	r4, #0
 8003e2c:	f000 80a1 	beq.w	8003f72 <_dtoa_r+0x442>
 8003e30:	2f00      	cmp	r7, #0
 8003e32:	dd33      	ble.n	8003e9c <_dtoa_r+0x36c>
 8003e34:	4b86      	ldr	r3, [pc, #536]	@ (8004050 <_dtoa_r+0x520>)
 8003e36:	f007 020f 	and.w	r2, r7, #15
 8003e3a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003e3e:	05f8      	lsls	r0, r7, #23
 8003e40:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003e44:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8003e48:	ea4f 1427 	mov.w	r4, r7, asr #4
 8003e4c:	d516      	bpl.n	8003e7c <_dtoa_r+0x34c>
 8003e4e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8003e52:	4b80      	ldr	r3, [pc, #512]	@ (8004054 <_dtoa_r+0x524>)
 8003e54:	2603      	movs	r6, #3
 8003e56:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003e5a:	f7fc fc67 	bl	800072c <__aeabi_ddiv>
 8003e5e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003e62:	f004 040f 	and.w	r4, r4, #15
 8003e66:	4d7b      	ldr	r5, [pc, #492]	@ (8004054 <_dtoa_r+0x524>)
 8003e68:	b954      	cbnz	r4, 8003e80 <_dtoa_r+0x350>
 8003e6a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003e6e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003e72:	f7fc fc5b 	bl	800072c <__aeabi_ddiv>
 8003e76:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003e7a:	e028      	b.n	8003ece <_dtoa_r+0x39e>
 8003e7c:	2602      	movs	r6, #2
 8003e7e:	e7f2      	b.n	8003e66 <_dtoa_r+0x336>
 8003e80:	07e1      	lsls	r1, r4, #31
 8003e82:	d508      	bpl.n	8003e96 <_dtoa_r+0x366>
 8003e84:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003e88:	e9d5 2300 	ldrd	r2, r3, [r5]
 8003e8c:	f7fc fb24 	bl	80004d8 <__aeabi_dmul>
 8003e90:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003e94:	3601      	adds	r6, #1
 8003e96:	1064      	asrs	r4, r4, #1
 8003e98:	3508      	adds	r5, #8
 8003e9a:	e7e5      	b.n	8003e68 <_dtoa_r+0x338>
 8003e9c:	f000 80d2 	beq.w	8004044 <_dtoa_r+0x514>
 8003ea0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8003ea4:	427c      	negs	r4, r7
 8003ea6:	4b6a      	ldr	r3, [pc, #424]	@ (8004050 <_dtoa_r+0x520>)
 8003ea8:	f004 020f 	and.w	r2, r4, #15
 8003eac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eb4:	f7fc fb10 	bl	80004d8 <__aeabi_dmul>
 8003eb8:	2602      	movs	r6, #2
 8003eba:	2300      	movs	r3, #0
 8003ebc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003ec0:	4d64      	ldr	r5, [pc, #400]	@ (8004054 <_dtoa_r+0x524>)
 8003ec2:	1124      	asrs	r4, r4, #4
 8003ec4:	2c00      	cmp	r4, #0
 8003ec6:	f040 80b2 	bne.w	800402e <_dtoa_r+0x4fe>
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d1d3      	bne.n	8003e76 <_dtoa_r+0x346>
 8003ece:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8003ed2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	f000 80b7 	beq.w	8004048 <_dtoa_r+0x518>
 8003eda:	2200      	movs	r2, #0
 8003edc:	4620      	mov	r0, r4
 8003ede:	4629      	mov	r1, r5
 8003ee0:	4b5d      	ldr	r3, [pc, #372]	@ (8004058 <_dtoa_r+0x528>)
 8003ee2:	f7fc fd6b 	bl	80009bc <__aeabi_dcmplt>
 8003ee6:	2800      	cmp	r0, #0
 8003ee8:	f000 80ae 	beq.w	8004048 <_dtoa_r+0x518>
 8003eec:	9b07      	ldr	r3, [sp, #28]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	f000 80aa 	beq.w	8004048 <_dtoa_r+0x518>
 8003ef4:	9b08      	ldr	r3, [sp, #32]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	dd37      	ble.n	8003f6a <_dtoa_r+0x43a>
 8003efa:	1e7b      	subs	r3, r7, #1
 8003efc:	4620      	mov	r0, r4
 8003efe:	9304      	str	r3, [sp, #16]
 8003f00:	2200      	movs	r2, #0
 8003f02:	4629      	mov	r1, r5
 8003f04:	4b55      	ldr	r3, [pc, #340]	@ (800405c <_dtoa_r+0x52c>)
 8003f06:	f7fc fae7 	bl	80004d8 <__aeabi_dmul>
 8003f0a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003f0e:	9c08      	ldr	r4, [sp, #32]
 8003f10:	3601      	adds	r6, #1
 8003f12:	4630      	mov	r0, r6
 8003f14:	f7fc fa76 	bl	8000404 <__aeabi_i2d>
 8003f18:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003f1c:	f7fc fadc 	bl	80004d8 <__aeabi_dmul>
 8003f20:	2200      	movs	r2, #0
 8003f22:	4b4f      	ldr	r3, [pc, #316]	@ (8004060 <_dtoa_r+0x530>)
 8003f24:	f7fc f922 	bl	800016c <__adddf3>
 8003f28:	4605      	mov	r5, r0
 8003f2a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8003f2e:	2c00      	cmp	r4, #0
 8003f30:	f040 809a 	bne.w	8004068 <_dtoa_r+0x538>
 8003f34:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003f38:	2200      	movs	r2, #0
 8003f3a:	4b4a      	ldr	r3, [pc, #296]	@ (8004064 <_dtoa_r+0x534>)
 8003f3c:	f7fc f914 	bl	8000168 <__aeabi_dsub>
 8003f40:	4602      	mov	r2, r0
 8003f42:	460b      	mov	r3, r1
 8003f44:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003f48:	462a      	mov	r2, r5
 8003f4a:	4633      	mov	r3, r6
 8003f4c:	f7fc fd54 	bl	80009f8 <__aeabi_dcmpgt>
 8003f50:	2800      	cmp	r0, #0
 8003f52:	f040 828e 	bne.w	8004472 <_dtoa_r+0x942>
 8003f56:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003f5a:	462a      	mov	r2, r5
 8003f5c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8003f60:	f7fc fd2c 	bl	80009bc <__aeabi_dcmplt>
 8003f64:	2800      	cmp	r0, #0
 8003f66:	f040 8127 	bne.w	80041b8 <_dtoa_r+0x688>
 8003f6a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8003f6e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8003f72:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	f2c0 8163 	blt.w	8004240 <_dtoa_r+0x710>
 8003f7a:	2f0e      	cmp	r7, #14
 8003f7c:	f300 8160 	bgt.w	8004240 <_dtoa_r+0x710>
 8003f80:	4b33      	ldr	r3, [pc, #204]	@ (8004050 <_dtoa_r+0x520>)
 8003f82:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8003f86:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003f8a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8003f8e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	da03      	bge.n	8003f9c <_dtoa_r+0x46c>
 8003f94:	9b07      	ldr	r3, [sp, #28]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	f340 8100 	ble.w	800419c <_dtoa_r+0x66c>
 8003f9c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8003fa0:	4656      	mov	r6, sl
 8003fa2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003fa6:	4620      	mov	r0, r4
 8003fa8:	4629      	mov	r1, r5
 8003faa:	f7fc fbbf 	bl	800072c <__aeabi_ddiv>
 8003fae:	f7fc fd43 	bl	8000a38 <__aeabi_d2iz>
 8003fb2:	4680      	mov	r8, r0
 8003fb4:	f7fc fa26 	bl	8000404 <__aeabi_i2d>
 8003fb8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003fbc:	f7fc fa8c 	bl	80004d8 <__aeabi_dmul>
 8003fc0:	4602      	mov	r2, r0
 8003fc2:	460b      	mov	r3, r1
 8003fc4:	4620      	mov	r0, r4
 8003fc6:	4629      	mov	r1, r5
 8003fc8:	f7fc f8ce 	bl	8000168 <__aeabi_dsub>
 8003fcc:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8003fd0:	9d07      	ldr	r5, [sp, #28]
 8003fd2:	f806 4b01 	strb.w	r4, [r6], #1
 8003fd6:	eba6 040a 	sub.w	r4, r6, sl
 8003fda:	42a5      	cmp	r5, r4
 8003fdc:	4602      	mov	r2, r0
 8003fde:	460b      	mov	r3, r1
 8003fe0:	f040 8116 	bne.w	8004210 <_dtoa_r+0x6e0>
 8003fe4:	f7fc f8c2 	bl	800016c <__adddf3>
 8003fe8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003fec:	4604      	mov	r4, r0
 8003fee:	460d      	mov	r5, r1
 8003ff0:	f7fc fd02 	bl	80009f8 <__aeabi_dcmpgt>
 8003ff4:	2800      	cmp	r0, #0
 8003ff6:	f040 80f8 	bne.w	80041ea <_dtoa_r+0x6ba>
 8003ffa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003ffe:	4620      	mov	r0, r4
 8004000:	4629      	mov	r1, r5
 8004002:	f7fc fcd1 	bl	80009a8 <__aeabi_dcmpeq>
 8004006:	b118      	cbz	r0, 8004010 <_dtoa_r+0x4e0>
 8004008:	f018 0f01 	tst.w	r8, #1
 800400c:	f040 80ed 	bne.w	80041ea <_dtoa_r+0x6ba>
 8004010:	4649      	mov	r1, r9
 8004012:	4658      	mov	r0, fp
 8004014:	f000 fc92 	bl	800493c <_Bfree>
 8004018:	2300      	movs	r3, #0
 800401a:	7033      	strb	r3, [r6, #0]
 800401c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800401e:	3701      	adds	r7, #1
 8004020:	601f      	str	r7, [r3, #0]
 8004022:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8004024:	2b00      	cmp	r3, #0
 8004026:	f000 8320 	beq.w	800466a <_dtoa_r+0xb3a>
 800402a:	601e      	str	r6, [r3, #0]
 800402c:	e31d      	b.n	800466a <_dtoa_r+0xb3a>
 800402e:	07e2      	lsls	r2, r4, #31
 8004030:	d505      	bpl.n	800403e <_dtoa_r+0x50e>
 8004032:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004036:	f7fc fa4f 	bl	80004d8 <__aeabi_dmul>
 800403a:	2301      	movs	r3, #1
 800403c:	3601      	adds	r6, #1
 800403e:	1064      	asrs	r4, r4, #1
 8004040:	3508      	adds	r5, #8
 8004042:	e73f      	b.n	8003ec4 <_dtoa_r+0x394>
 8004044:	2602      	movs	r6, #2
 8004046:	e742      	b.n	8003ece <_dtoa_r+0x39e>
 8004048:	9c07      	ldr	r4, [sp, #28]
 800404a:	9704      	str	r7, [sp, #16]
 800404c:	e761      	b.n	8003f12 <_dtoa_r+0x3e2>
 800404e:	bf00      	nop
 8004050:	08005900 	.word	0x08005900
 8004054:	080058d8 	.word	0x080058d8
 8004058:	3ff00000 	.word	0x3ff00000
 800405c:	40240000 	.word	0x40240000
 8004060:	401c0000 	.word	0x401c0000
 8004064:	40140000 	.word	0x40140000
 8004068:	4b70      	ldr	r3, [pc, #448]	@ (800422c <_dtoa_r+0x6fc>)
 800406a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800406c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004070:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004074:	4454      	add	r4, sl
 8004076:	2900      	cmp	r1, #0
 8004078:	d045      	beq.n	8004106 <_dtoa_r+0x5d6>
 800407a:	2000      	movs	r0, #0
 800407c:	496c      	ldr	r1, [pc, #432]	@ (8004230 <_dtoa_r+0x700>)
 800407e:	f7fc fb55 	bl	800072c <__aeabi_ddiv>
 8004082:	4633      	mov	r3, r6
 8004084:	462a      	mov	r2, r5
 8004086:	f7fc f86f 	bl	8000168 <__aeabi_dsub>
 800408a:	4656      	mov	r6, sl
 800408c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004090:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004094:	f7fc fcd0 	bl	8000a38 <__aeabi_d2iz>
 8004098:	4605      	mov	r5, r0
 800409a:	f7fc f9b3 	bl	8000404 <__aeabi_i2d>
 800409e:	4602      	mov	r2, r0
 80040a0:	460b      	mov	r3, r1
 80040a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80040a6:	f7fc f85f 	bl	8000168 <__aeabi_dsub>
 80040aa:	4602      	mov	r2, r0
 80040ac:	460b      	mov	r3, r1
 80040ae:	3530      	adds	r5, #48	@ 0x30
 80040b0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80040b4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80040b8:	f806 5b01 	strb.w	r5, [r6], #1
 80040bc:	f7fc fc7e 	bl	80009bc <__aeabi_dcmplt>
 80040c0:	2800      	cmp	r0, #0
 80040c2:	d163      	bne.n	800418c <_dtoa_r+0x65c>
 80040c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80040c8:	2000      	movs	r0, #0
 80040ca:	495a      	ldr	r1, [pc, #360]	@ (8004234 <_dtoa_r+0x704>)
 80040cc:	f7fc f84c 	bl	8000168 <__aeabi_dsub>
 80040d0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80040d4:	f7fc fc72 	bl	80009bc <__aeabi_dcmplt>
 80040d8:	2800      	cmp	r0, #0
 80040da:	f040 8087 	bne.w	80041ec <_dtoa_r+0x6bc>
 80040de:	42a6      	cmp	r6, r4
 80040e0:	f43f af43 	beq.w	8003f6a <_dtoa_r+0x43a>
 80040e4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80040e8:	2200      	movs	r2, #0
 80040ea:	4b53      	ldr	r3, [pc, #332]	@ (8004238 <_dtoa_r+0x708>)
 80040ec:	f7fc f9f4 	bl	80004d8 <__aeabi_dmul>
 80040f0:	2200      	movs	r2, #0
 80040f2:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80040f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80040fa:	4b4f      	ldr	r3, [pc, #316]	@ (8004238 <_dtoa_r+0x708>)
 80040fc:	f7fc f9ec 	bl	80004d8 <__aeabi_dmul>
 8004100:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004104:	e7c4      	b.n	8004090 <_dtoa_r+0x560>
 8004106:	4631      	mov	r1, r6
 8004108:	4628      	mov	r0, r5
 800410a:	f7fc f9e5 	bl	80004d8 <__aeabi_dmul>
 800410e:	4656      	mov	r6, sl
 8004110:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004114:	9413      	str	r4, [sp, #76]	@ 0x4c
 8004116:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800411a:	f7fc fc8d 	bl	8000a38 <__aeabi_d2iz>
 800411e:	4605      	mov	r5, r0
 8004120:	f7fc f970 	bl	8000404 <__aeabi_i2d>
 8004124:	4602      	mov	r2, r0
 8004126:	460b      	mov	r3, r1
 8004128:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800412c:	f7fc f81c 	bl	8000168 <__aeabi_dsub>
 8004130:	4602      	mov	r2, r0
 8004132:	460b      	mov	r3, r1
 8004134:	3530      	adds	r5, #48	@ 0x30
 8004136:	f806 5b01 	strb.w	r5, [r6], #1
 800413a:	42a6      	cmp	r6, r4
 800413c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004140:	f04f 0200 	mov.w	r2, #0
 8004144:	d124      	bne.n	8004190 <_dtoa_r+0x660>
 8004146:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800414a:	4b39      	ldr	r3, [pc, #228]	@ (8004230 <_dtoa_r+0x700>)
 800414c:	f7fc f80e 	bl	800016c <__adddf3>
 8004150:	4602      	mov	r2, r0
 8004152:	460b      	mov	r3, r1
 8004154:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004158:	f7fc fc4e 	bl	80009f8 <__aeabi_dcmpgt>
 800415c:	2800      	cmp	r0, #0
 800415e:	d145      	bne.n	80041ec <_dtoa_r+0x6bc>
 8004160:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004164:	2000      	movs	r0, #0
 8004166:	4932      	ldr	r1, [pc, #200]	@ (8004230 <_dtoa_r+0x700>)
 8004168:	f7fb fffe 	bl	8000168 <__aeabi_dsub>
 800416c:	4602      	mov	r2, r0
 800416e:	460b      	mov	r3, r1
 8004170:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004174:	f7fc fc22 	bl	80009bc <__aeabi_dcmplt>
 8004178:	2800      	cmp	r0, #0
 800417a:	f43f aef6 	beq.w	8003f6a <_dtoa_r+0x43a>
 800417e:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8004180:	1e73      	subs	r3, r6, #1
 8004182:	9313      	str	r3, [sp, #76]	@ 0x4c
 8004184:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8004188:	2b30      	cmp	r3, #48	@ 0x30
 800418a:	d0f8      	beq.n	800417e <_dtoa_r+0x64e>
 800418c:	9f04      	ldr	r7, [sp, #16]
 800418e:	e73f      	b.n	8004010 <_dtoa_r+0x4e0>
 8004190:	4b29      	ldr	r3, [pc, #164]	@ (8004238 <_dtoa_r+0x708>)
 8004192:	f7fc f9a1 	bl	80004d8 <__aeabi_dmul>
 8004196:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800419a:	e7bc      	b.n	8004116 <_dtoa_r+0x5e6>
 800419c:	d10c      	bne.n	80041b8 <_dtoa_r+0x688>
 800419e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80041a2:	2200      	movs	r2, #0
 80041a4:	4b25      	ldr	r3, [pc, #148]	@ (800423c <_dtoa_r+0x70c>)
 80041a6:	f7fc f997 	bl	80004d8 <__aeabi_dmul>
 80041aa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80041ae:	f7fc fc19 	bl	80009e4 <__aeabi_dcmpge>
 80041b2:	2800      	cmp	r0, #0
 80041b4:	f000 815b 	beq.w	800446e <_dtoa_r+0x93e>
 80041b8:	2400      	movs	r4, #0
 80041ba:	4625      	mov	r5, r4
 80041bc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80041be:	4656      	mov	r6, sl
 80041c0:	43db      	mvns	r3, r3
 80041c2:	9304      	str	r3, [sp, #16]
 80041c4:	2700      	movs	r7, #0
 80041c6:	4621      	mov	r1, r4
 80041c8:	4658      	mov	r0, fp
 80041ca:	f000 fbb7 	bl	800493c <_Bfree>
 80041ce:	2d00      	cmp	r5, #0
 80041d0:	d0dc      	beq.n	800418c <_dtoa_r+0x65c>
 80041d2:	b12f      	cbz	r7, 80041e0 <_dtoa_r+0x6b0>
 80041d4:	42af      	cmp	r7, r5
 80041d6:	d003      	beq.n	80041e0 <_dtoa_r+0x6b0>
 80041d8:	4639      	mov	r1, r7
 80041da:	4658      	mov	r0, fp
 80041dc:	f000 fbae 	bl	800493c <_Bfree>
 80041e0:	4629      	mov	r1, r5
 80041e2:	4658      	mov	r0, fp
 80041e4:	f000 fbaa 	bl	800493c <_Bfree>
 80041e8:	e7d0      	b.n	800418c <_dtoa_r+0x65c>
 80041ea:	9704      	str	r7, [sp, #16]
 80041ec:	4633      	mov	r3, r6
 80041ee:	461e      	mov	r6, r3
 80041f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80041f4:	2a39      	cmp	r2, #57	@ 0x39
 80041f6:	d107      	bne.n	8004208 <_dtoa_r+0x6d8>
 80041f8:	459a      	cmp	sl, r3
 80041fa:	d1f8      	bne.n	80041ee <_dtoa_r+0x6be>
 80041fc:	9a04      	ldr	r2, [sp, #16]
 80041fe:	3201      	adds	r2, #1
 8004200:	9204      	str	r2, [sp, #16]
 8004202:	2230      	movs	r2, #48	@ 0x30
 8004204:	f88a 2000 	strb.w	r2, [sl]
 8004208:	781a      	ldrb	r2, [r3, #0]
 800420a:	3201      	adds	r2, #1
 800420c:	701a      	strb	r2, [r3, #0]
 800420e:	e7bd      	b.n	800418c <_dtoa_r+0x65c>
 8004210:	2200      	movs	r2, #0
 8004212:	4b09      	ldr	r3, [pc, #36]	@ (8004238 <_dtoa_r+0x708>)
 8004214:	f7fc f960 	bl	80004d8 <__aeabi_dmul>
 8004218:	2200      	movs	r2, #0
 800421a:	2300      	movs	r3, #0
 800421c:	4604      	mov	r4, r0
 800421e:	460d      	mov	r5, r1
 8004220:	f7fc fbc2 	bl	80009a8 <__aeabi_dcmpeq>
 8004224:	2800      	cmp	r0, #0
 8004226:	f43f aebc 	beq.w	8003fa2 <_dtoa_r+0x472>
 800422a:	e6f1      	b.n	8004010 <_dtoa_r+0x4e0>
 800422c:	08005900 	.word	0x08005900
 8004230:	3fe00000 	.word	0x3fe00000
 8004234:	3ff00000 	.word	0x3ff00000
 8004238:	40240000 	.word	0x40240000
 800423c:	40140000 	.word	0x40140000
 8004240:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8004242:	2a00      	cmp	r2, #0
 8004244:	f000 80db 	beq.w	80043fe <_dtoa_r+0x8ce>
 8004248:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800424a:	2a01      	cmp	r2, #1
 800424c:	f300 80bf 	bgt.w	80043ce <_dtoa_r+0x89e>
 8004250:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8004252:	2a00      	cmp	r2, #0
 8004254:	f000 80b7 	beq.w	80043c6 <_dtoa_r+0x896>
 8004258:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800425c:	4646      	mov	r6, r8
 800425e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8004260:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004262:	2101      	movs	r1, #1
 8004264:	441a      	add	r2, r3
 8004266:	4658      	mov	r0, fp
 8004268:	4498      	add	r8, r3
 800426a:	9209      	str	r2, [sp, #36]	@ 0x24
 800426c:	f000 fc1a 	bl	8004aa4 <__i2b>
 8004270:	4605      	mov	r5, r0
 8004272:	b15e      	cbz	r6, 800428c <_dtoa_r+0x75c>
 8004274:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004276:	2b00      	cmp	r3, #0
 8004278:	dd08      	ble.n	800428c <_dtoa_r+0x75c>
 800427a:	42b3      	cmp	r3, r6
 800427c:	bfa8      	it	ge
 800427e:	4633      	movge	r3, r6
 8004280:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004282:	eba8 0803 	sub.w	r8, r8, r3
 8004286:	1af6      	subs	r6, r6, r3
 8004288:	1ad3      	subs	r3, r2, r3
 800428a:	9309      	str	r3, [sp, #36]	@ 0x24
 800428c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800428e:	b1f3      	cbz	r3, 80042ce <_dtoa_r+0x79e>
 8004290:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004292:	2b00      	cmp	r3, #0
 8004294:	f000 80b7 	beq.w	8004406 <_dtoa_r+0x8d6>
 8004298:	b18c      	cbz	r4, 80042be <_dtoa_r+0x78e>
 800429a:	4629      	mov	r1, r5
 800429c:	4622      	mov	r2, r4
 800429e:	4658      	mov	r0, fp
 80042a0:	f000 fcbe 	bl	8004c20 <__pow5mult>
 80042a4:	464a      	mov	r2, r9
 80042a6:	4601      	mov	r1, r0
 80042a8:	4605      	mov	r5, r0
 80042aa:	4658      	mov	r0, fp
 80042ac:	f000 fc10 	bl	8004ad0 <__multiply>
 80042b0:	4649      	mov	r1, r9
 80042b2:	9004      	str	r0, [sp, #16]
 80042b4:	4658      	mov	r0, fp
 80042b6:	f000 fb41 	bl	800493c <_Bfree>
 80042ba:	9b04      	ldr	r3, [sp, #16]
 80042bc:	4699      	mov	r9, r3
 80042be:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80042c0:	1b1a      	subs	r2, r3, r4
 80042c2:	d004      	beq.n	80042ce <_dtoa_r+0x79e>
 80042c4:	4649      	mov	r1, r9
 80042c6:	4658      	mov	r0, fp
 80042c8:	f000 fcaa 	bl	8004c20 <__pow5mult>
 80042cc:	4681      	mov	r9, r0
 80042ce:	2101      	movs	r1, #1
 80042d0:	4658      	mov	r0, fp
 80042d2:	f000 fbe7 	bl	8004aa4 <__i2b>
 80042d6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80042d8:	4604      	mov	r4, r0
 80042da:	2b00      	cmp	r3, #0
 80042dc:	f000 81c9 	beq.w	8004672 <_dtoa_r+0xb42>
 80042e0:	461a      	mov	r2, r3
 80042e2:	4601      	mov	r1, r0
 80042e4:	4658      	mov	r0, fp
 80042e6:	f000 fc9b 	bl	8004c20 <__pow5mult>
 80042ea:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80042ec:	4604      	mov	r4, r0
 80042ee:	2b01      	cmp	r3, #1
 80042f0:	f300 808f 	bgt.w	8004412 <_dtoa_r+0x8e2>
 80042f4:	9b02      	ldr	r3, [sp, #8]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	f040 8087 	bne.w	800440a <_dtoa_r+0x8da>
 80042fc:	9b03      	ldr	r3, [sp, #12]
 80042fe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004302:	2b00      	cmp	r3, #0
 8004304:	f040 8083 	bne.w	800440e <_dtoa_r+0x8de>
 8004308:	9b03      	ldr	r3, [sp, #12]
 800430a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800430e:	0d1b      	lsrs	r3, r3, #20
 8004310:	051b      	lsls	r3, r3, #20
 8004312:	b12b      	cbz	r3, 8004320 <_dtoa_r+0x7f0>
 8004314:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004316:	f108 0801 	add.w	r8, r8, #1
 800431a:	3301      	adds	r3, #1
 800431c:	9309      	str	r3, [sp, #36]	@ 0x24
 800431e:	2301      	movs	r3, #1
 8004320:	930a      	str	r3, [sp, #40]	@ 0x28
 8004322:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004324:	2b00      	cmp	r3, #0
 8004326:	f000 81aa 	beq.w	800467e <_dtoa_r+0xb4e>
 800432a:	6923      	ldr	r3, [r4, #16]
 800432c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004330:	6918      	ldr	r0, [r3, #16]
 8004332:	f000 fb6b 	bl	8004a0c <__hi0bits>
 8004336:	f1c0 0020 	rsb	r0, r0, #32
 800433a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800433c:	4418      	add	r0, r3
 800433e:	f010 001f 	ands.w	r0, r0, #31
 8004342:	d071      	beq.n	8004428 <_dtoa_r+0x8f8>
 8004344:	f1c0 0320 	rsb	r3, r0, #32
 8004348:	2b04      	cmp	r3, #4
 800434a:	dd65      	ble.n	8004418 <_dtoa_r+0x8e8>
 800434c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800434e:	f1c0 001c 	rsb	r0, r0, #28
 8004352:	4403      	add	r3, r0
 8004354:	4480      	add	r8, r0
 8004356:	4406      	add	r6, r0
 8004358:	9309      	str	r3, [sp, #36]	@ 0x24
 800435a:	f1b8 0f00 	cmp.w	r8, #0
 800435e:	dd05      	ble.n	800436c <_dtoa_r+0x83c>
 8004360:	4649      	mov	r1, r9
 8004362:	4642      	mov	r2, r8
 8004364:	4658      	mov	r0, fp
 8004366:	f000 fcb5 	bl	8004cd4 <__lshift>
 800436a:	4681      	mov	r9, r0
 800436c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800436e:	2b00      	cmp	r3, #0
 8004370:	dd05      	ble.n	800437e <_dtoa_r+0x84e>
 8004372:	4621      	mov	r1, r4
 8004374:	461a      	mov	r2, r3
 8004376:	4658      	mov	r0, fp
 8004378:	f000 fcac 	bl	8004cd4 <__lshift>
 800437c:	4604      	mov	r4, r0
 800437e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004380:	2b00      	cmp	r3, #0
 8004382:	d053      	beq.n	800442c <_dtoa_r+0x8fc>
 8004384:	4621      	mov	r1, r4
 8004386:	4648      	mov	r0, r9
 8004388:	f000 fd10 	bl	8004dac <__mcmp>
 800438c:	2800      	cmp	r0, #0
 800438e:	da4d      	bge.n	800442c <_dtoa_r+0x8fc>
 8004390:	1e7b      	subs	r3, r7, #1
 8004392:	4649      	mov	r1, r9
 8004394:	9304      	str	r3, [sp, #16]
 8004396:	220a      	movs	r2, #10
 8004398:	2300      	movs	r3, #0
 800439a:	4658      	mov	r0, fp
 800439c:	f000 faf0 	bl	8004980 <__multadd>
 80043a0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80043a2:	4681      	mov	r9, r0
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	f000 816c 	beq.w	8004682 <_dtoa_r+0xb52>
 80043aa:	2300      	movs	r3, #0
 80043ac:	4629      	mov	r1, r5
 80043ae:	220a      	movs	r2, #10
 80043b0:	4658      	mov	r0, fp
 80043b2:	f000 fae5 	bl	8004980 <__multadd>
 80043b6:	9b08      	ldr	r3, [sp, #32]
 80043b8:	4605      	mov	r5, r0
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	dc61      	bgt.n	8004482 <_dtoa_r+0x952>
 80043be:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80043c0:	2b02      	cmp	r3, #2
 80043c2:	dc3b      	bgt.n	800443c <_dtoa_r+0x90c>
 80043c4:	e05d      	b.n	8004482 <_dtoa_r+0x952>
 80043c6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80043c8:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80043cc:	e746      	b.n	800425c <_dtoa_r+0x72c>
 80043ce:	9b07      	ldr	r3, [sp, #28]
 80043d0:	1e5c      	subs	r4, r3, #1
 80043d2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80043d4:	42a3      	cmp	r3, r4
 80043d6:	bfbf      	itttt	lt
 80043d8:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80043da:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 80043dc:	1ae3      	sublt	r3, r4, r3
 80043de:	18d2      	addlt	r2, r2, r3
 80043e0:	bfa8      	it	ge
 80043e2:	1b1c      	subge	r4, r3, r4
 80043e4:	9b07      	ldr	r3, [sp, #28]
 80043e6:	bfbe      	ittt	lt
 80043e8:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80043ea:	920e      	strlt	r2, [sp, #56]	@ 0x38
 80043ec:	2400      	movlt	r4, #0
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	bfb5      	itete	lt
 80043f2:	eba8 0603 	sublt.w	r6, r8, r3
 80043f6:	4646      	movge	r6, r8
 80043f8:	2300      	movlt	r3, #0
 80043fa:	9b07      	ldrge	r3, [sp, #28]
 80043fc:	e730      	b.n	8004260 <_dtoa_r+0x730>
 80043fe:	4646      	mov	r6, r8
 8004400:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8004402:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8004404:	e735      	b.n	8004272 <_dtoa_r+0x742>
 8004406:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004408:	e75c      	b.n	80042c4 <_dtoa_r+0x794>
 800440a:	2300      	movs	r3, #0
 800440c:	e788      	b.n	8004320 <_dtoa_r+0x7f0>
 800440e:	9b02      	ldr	r3, [sp, #8]
 8004410:	e786      	b.n	8004320 <_dtoa_r+0x7f0>
 8004412:	2300      	movs	r3, #0
 8004414:	930a      	str	r3, [sp, #40]	@ 0x28
 8004416:	e788      	b.n	800432a <_dtoa_r+0x7fa>
 8004418:	d09f      	beq.n	800435a <_dtoa_r+0x82a>
 800441a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800441c:	331c      	adds	r3, #28
 800441e:	441a      	add	r2, r3
 8004420:	4498      	add	r8, r3
 8004422:	441e      	add	r6, r3
 8004424:	9209      	str	r2, [sp, #36]	@ 0x24
 8004426:	e798      	b.n	800435a <_dtoa_r+0x82a>
 8004428:	4603      	mov	r3, r0
 800442a:	e7f6      	b.n	800441a <_dtoa_r+0x8ea>
 800442c:	9b07      	ldr	r3, [sp, #28]
 800442e:	9704      	str	r7, [sp, #16]
 8004430:	2b00      	cmp	r3, #0
 8004432:	dc20      	bgt.n	8004476 <_dtoa_r+0x946>
 8004434:	9308      	str	r3, [sp, #32]
 8004436:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004438:	2b02      	cmp	r3, #2
 800443a:	dd1e      	ble.n	800447a <_dtoa_r+0x94a>
 800443c:	9b08      	ldr	r3, [sp, #32]
 800443e:	2b00      	cmp	r3, #0
 8004440:	f47f aebc 	bne.w	80041bc <_dtoa_r+0x68c>
 8004444:	4621      	mov	r1, r4
 8004446:	2205      	movs	r2, #5
 8004448:	4658      	mov	r0, fp
 800444a:	f000 fa99 	bl	8004980 <__multadd>
 800444e:	4601      	mov	r1, r0
 8004450:	4604      	mov	r4, r0
 8004452:	4648      	mov	r0, r9
 8004454:	f000 fcaa 	bl	8004dac <__mcmp>
 8004458:	2800      	cmp	r0, #0
 800445a:	f77f aeaf 	ble.w	80041bc <_dtoa_r+0x68c>
 800445e:	2331      	movs	r3, #49	@ 0x31
 8004460:	4656      	mov	r6, sl
 8004462:	f806 3b01 	strb.w	r3, [r6], #1
 8004466:	9b04      	ldr	r3, [sp, #16]
 8004468:	3301      	adds	r3, #1
 800446a:	9304      	str	r3, [sp, #16]
 800446c:	e6aa      	b.n	80041c4 <_dtoa_r+0x694>
 800446e:	9c07      	ldr	r4, [sp, #28]
 8004470:	9704      	str	r7, [sp, #16]
 8004472:	4625      	mov	r5, r4
 8004474:	e7f3      	b.n	800445e <_dtoa_r+0x92e>
 8004476:	9b07      	ldr	r3, [sp, #28]
 8004478:	9308      	str	r3, [sp, #32]
 800447a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800447c:	2b00      	cmp	r3, #0
 800447e:	f000 8104 	beq.w	800468a <_dtoa_r+0xb5a>
 8004482:	2e00      	cmp	r6, #0
 8004484:	dd05      	ble.n	8004492 <_dtoa_r+0x962>
 8004486:	4629      	mov	r1, r5
 8004488:	4632      	mov	r2, r6
 800448a:	4658      	mov	r0, fp
 800448c:	f000 fc22 	bl	8004cd4 <__lshift>
 8004490:	4605      	mov	r5, r0
 8004492:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004494:	2b00      	cmp	r3, #0
 8004496:	d05a      	beq.n	800454e <_dtoa_r+0xa1e>
 8004498:	4658      	mov	r0, fp
 800449a:	6869      	ldr	r1, [r5, #4]
 800449c:	f000 fa0e 	bl	80048bc <_Balloc>
 80044a0:	4606      	mov	r6, r0
 80044a2:	b928      	cbnz	r0, 80044b0 <_dtoa_r+0x980>
 80044a4:	4602      	mov	r2, r0
 80044a6:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80044aa:	4b83      	ldr	r3, [pc, #524]	@ (80046b8 <_dtoa_r+0xb88>)
 80044ac:	f7ff bb54 	b.w	8003b58 <_dtoa_r+0x28>
 80044b0:	692a      	ldr	r2, [r5, #16]
 80044b2:	f105 010c 	add.w	r1, r5, #12
 80044b6:	3202      	adds	r2, #2
 80044b8:	0092      	lsls	r2, r2, #2
 80044ba:	300c      	adds	r0, #12
 80044bc:	f000 fe36 	bl	800512c <memcpy>
 80044c0:	2201      	movs	r2, #1
 80044c2:	4631      	mov	r1, r6
 80044c4:	4658      	mov	r0, fp
 80044c6:	f000 fc05 	bl	8004cd4 <__lshift>
 80044ca:	462f      	mov	r7, r5
 80044cc:	4605      	mov	r5, r0
 80044ce:	f10a 0301 	add.w	r3, sl, #1
 80044d2:	9307      	str	r3, [sp, #28]
 80044d4:	9b08      	ldr	r3, [sp, #32]
 80044d6:	4453      	add	r3, sl
 80044d8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80044da:	9b02      	ldr	r3, [sp, #8]
 80044dc:	f003 0301 	and.w	r3, r3, #1
 80044e0:	930a      	str	r3, [sp, #40]	@ 0x28
 80044e2:	9b07      	ldr	r3, [sp, #28]
 80044e4:	4621      	mov	r1, r4
 80044e6:	3b01      	subs	r3, #1
 80044e8:	4648      	mov	r0, r9
 80044ea:	9302      	str	r3, [sp, #8]
 80044ec:	f7ff fa95 	bl	8003a1a <quorem>
 80044f0:	4639      	mov	r1, r7
 80044f2:	9008      	str	r0, [sp, #32]
 80044f4:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80044f8:	4648      	mov	r0, r9
 80044fa:	f000 fc57 	bl	8004dac <__mcmp>
 80044fe:	462a      	mov	r2, r5
 8004500:	9009      	str	r0, [sp, #36]	@ 0x24
 8004502:	4621      	mov	r1, r4
 8004504:	4658      	mov	r0, fp
 8004506:	f000 fc6d 	bl	8004de4 <__mdiff>
 800450a:	68c2      	ldr	r2, [r0, #12]
 800450c:	4606      	mov	r6, r0
 800450e:	bb02      	cbnz	r2, 8004552 <_dtoa_r+0xa22>
 8004510:	4601      	mov	r1, r0
 8004512:	4648      	mov	r0, r9
 8004514:	f000 fc4a 	bl	8004dac <__mcmp>
 8004518:	4602      	mov	r2, r0
 800451a:	4631      	mov	r1, r6
 800451c:	4658      	mov	r0, fp
 800451e:	920c      	str	r2, [sp, #48]	@ 0x30
 8004520:	f000 fa0c 	bl	800493c <_Bfree>
 8004524:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004526:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8004528:	9e07      	ldr	r6, [sp, #28]
 800452a:	ea43 0102 	orr.w	r1, r3, r2
 800452e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004530:	4319      	orrs	r1, r3
 8004532:	d110      	bne.n	8004556 <_dtoa_r+0xa26>
 8004534:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8004538:	d029      	beq.n	800458e <_dtoa_r+0xa5e>
 800453a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800453c:	2b00      	cmp	r3, #0
 800453e:	dd02      	ble.n	8004546 <_dtoa_r+0xa16>
 8004540:	9b08      	ldr	r3, [sp, #32]
 8004542:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8004546:	9b02      	ldr	r3, [sp, #8]
 8004548:	f883 8000 	strb.w	r8, [r3]
 800454c:	e63b      	b.n	80041c6 <_dtoa_r+0x696>
 800454e:	4628      	mov	r0, r5
 8004550:	e7bb      	b.n	80044ca <_dtoa_r+0x99a>
 8004552:	2201      	movs	r2, #1
 8004554:	e7e1      	b.n	800451a <_dtoa_r+0x9ea>
 8004556:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004558:	2b00      	cmp	r3, #0
 800455a:	db04      	blt.n	8004566 <_dtoa_r+0xa36>
 800455c:	9920      	ldr	r1, [sp, #128]	@ 0x80
 800455e:	430b      	orrs	r3, r1
 8004560:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8004562:	430b      	orrs	r3, r1
 8004564:	d120      	bne.n	80045a8 <_dtoa_r+0xa78>
 8004566:	2a00      	cmp	r2, #0
 8004568:	dded      	ble.n	8004546 <_dtoa_r+0xa16>
 800456a:	4649      	mov	r1, r9
 800456c:	2201      	movs	r2, #1
 800456e:	4658      	mov	r0, fp
 8004570:	f000 fbb0 	bl	8004cd4 <__lshift>
 8004574:	4621      	mov	r1, r4
 8004576:	4681      	mov	r9, r0
 8004578:	f000 fc18 	bl	8004dac <__mcmp>
 800457c:	2800      	cmp	r0, #0
 800457e:	dc03      	bgt.n	8004588 <_dtoa_r+0xa58>
 8004580:	d1e1      	bne.n	8004546 <_dtoa_r+0xa16>
 8004582:	f018 0f01 	tst.w	r8, #1
 8004586:	d0de      	beq.n	8004546 <_dtoa_r+0xa16>
 8004588:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800458c:	d1d8      	bne.n	8004540 <_dtoa_r+0xa10>
 800458e:	2339      	movs	r3, #57	@ 0x39
 8004590:	9a02      	ldr	r2, [sp, #8]
 8004592:	7013      	strb	r3, [r2, #0]
 8004594:	4633      	mov	r3, r6
 8004596:	461e      	mov	r6, r3
 8004598:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800459c:	3b01      	subs	r3, #1
 800459e:	2a39      	cmp	r2, #57	@ 0x39
 80045a0:	d052      	beq.n	8004648 <_dtoa_r+0xb18>
 80045a2:	3201      	adds	r2, #1
 80045a4:	701a      	strb	r2, [r3, #0]
 80045a6:	e60e      	b.n	80041c6 <_dtoa_r+0x696>
 80045a8:	2a00      	cmp	r2, #0
 80045aa:	dd07      	ble.n	80045bc <_dtoa_r+0xa8c>
 80045ac:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80045b0:	d0ed      	beq.n	800458e <_dtoa_r+0xa5e>
 80045b2:	9a02      	ldr	r2, [sp, #8]
 80045b4:	f108 0301 	add.w	r3, r8, #1
 80045b8:	7013      	strb	r3, [r2, #0]
 80045ba:	e604      	b.n	80041c6 <_dtoa_r+0x696>
 80045bc:	9b07      	ldr	r3, [sp, #28]
 80045be:	9a07      	ldr	r2, [sp, #28]
 80045c0:	f803 8c01 	strb.w	r8, [r3, #-1]
 80045c4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d028      	beq.n	800461c <_dtoa_r+0xaec>
 80045ca:	4649      	mov	r1, r9
 80045cc:	2300      	movs	r3, #0
 80045ce:	220a      	movs	r2, #10
 80045d0:	4658      	mov	r0, fp
 80045d2:	f000 f9d5 	bl	8004980 <__multadd>
 80045d6:	42af      	cmp	r7, r5
 80045d8:	4681      	mov	r9, r0
 80045da:	f04f 0300 	mov.w	r3, #0
 80045de:	f04f 020a 	mov.w	r2, #10
 80045e2:	4639      	mov	r1, r7
 80045e4:	4658      	mov	r0, fp
 80045e6:	d107      	bne.n	80045f8 <_dtoa_r+0xac8>
 80045e8:	f000 f9ca 	bl	8004980 <__multadd>
 80045ec:	4607      	mov	r7, r0
 80045ee:	4605      	mov	r5, r0
 80045f0:	9b07      	ldr	r3, [sp, #28]
 80045f2:	3301      	adds	r3, #1
 80045f4:	9307      	str	r3, [sp, #28]
 80045f6:	e774      	b.n	80044e2 <_dtoa_r+0x9b2>
 80045f8:	f000 f9c2 	bl	8004980 <__multadd>
 80045fc:	4629      	mov	r1, r5
 80045fe:	4607      	mov	r7, r0
 8004600:	2300      	movs	r3, #0
 8004602:	220a      	movs	r2, #10
 8004604:	4658      	mov	r0, fp
 8004606:	f000 f9bb 	bl	8004980 <__multadd>
 800460a:	4605      	mov	r5, r0
 800460c:	e7f0      	b.n	80045f0 <_dtoa_r+0xac0>
 800460e:	9b08      	ldr	r3, [sp, #32]
 8004610:	2700      	movs	r7, #0
 8004612:	2b00      	cmp	r3, #0
 8004614:	bfcc      	ite	gt
 8004616:	461e      	movgt	r6, r3
 8004618:	2601      	movle	r6, #1
 800461a:	4456      	add	r6, sl
 800461c:	4649      	mov	r1, r9
 800461e:	2201      	movs	r2, #1
 8004620:	4658      	mov	r0, fp
 8004622:	f000 fb57 	bl	8004cd4 <__lshift>
 8004626:	4621      	mov	r1, r4
 8004628:	4681      	mov	r9, r0
 800462a:	f000 fbbf 	bl	8004dac <__mcmp>
 800462e:	2800      	cmp	r0, #0
 8004630:	dcb0      	bgt.n	8004594 <_dtoa_r+0xa64>
 8004632:	d102      	bne.n	800463a <_dtoa_r+0xb0a>
 8004634:	f018 0f01 	tst.w	r8, #1
 8004638:	d1ac      	bne.n	8004594 <_dtoa_r+0xa64>
 800463a:	4633      	mov	r3, r6
 800463c:	461e      	mov	r6, r3
 800463e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004642:	2a30      	cmp	r2, #48	@ 0x30
 8004644:	d0fa      	beq.n	800463c <_dtoa_r+0xb0c>
 8004646:	e5be      	b.n	80041c6 <_dtoa_r+0x696>
 8004648:	459a      	cmp	sl, r3
 800464a:	d1a4      	bne.n	8004596 <_dtoa_r+0xa66>
 800464c:	9b04      	ldr	r3, [sp, #16]
 800464e:	3301      	adds	r3, #1
 8004650:	9304      	str	r3, [sp, #16]
 8004652:	2331      	movs	r3, #49	@ 0x31
 8004654:	f88a 3000 	strb.w	r3, [sl]
 8004658:	e5b5      	b.n	80041c6 <_dtoa_r+0x696>
 800465a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800465c:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80046bc <_dtoa_r+0xb8c>
 8004660:	b11b      	cbz	r3, 800466a <_dtoa_r+0xb3a>
 8004662:	f10a 0308 	add.w	r3, sl, #8
 8004666:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8004668:	6013      	str	r3, [r2, #0]
 800466a:	4650      	mov	r0, sl
 800466c:	b017      	add	sp, #92	@ 0x5c
 800466e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004672:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004674:	2b01      	cmp	r3, #1
 8004676:	f77f ae3d 	ble.w	80042f4 <_dtoa_r+0x7c4>
 800467a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800467c:	930a      	str	r3, [sp, #40]	@ 0x28
 800467e:	2001      	movs	r0, #1
 8004680:	e65b      	b.n	800433a <_dtoa_r+0x80a>
 8004682:	9b08      	ldr	r3, [sp, #32]
 8004684:	2b00      	cmp	r3, #0
 8004686:	f77f aed6 	ble.w	8004436 <_dtoa_r+0x906>
 800468a:	4656      	mov	r6, sl
 800468c:	4621      	mov	r1, r4
 800468e:	4648      	mov	r0, r9
 8004690:	f7ff f9c3 	bl	8003a1a <quorem>
 8004694:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8004698:	9b08      	ldr	r3, [sp, #32]
 800469a:	f806 8b01 	strb.w	r8, [r6], #1
 800469e:	eba6 020a 	sub.w	r2, r6, sl
 80046a2:	4293      	cmp	r3, r2
 80046a4:	ddb3      	ble.n	800460e <_dtoa_r+0xade>
 80046a6:	4649      	mov	r1, r9
 80046a8:	2300      	movs	r3, #0
 80046aa:	220a      	movs	r2, #10
 80046ac:	4658      	mov	r0, fp
 80046ae:	f000 f967 	bl	8004980 <__multadd>
 80046b2:	4681      	mov	r9, r0
 80046b4:	e7ea      	b.n	800468c <_dtoa_r+0xb5c>
 80046b6:	bf00      	nop
 80046b8:	0800585e 	.word	0x0800585e
 80046bc:	080057e2 	.word	0x080057e2

080046c0 <_free_r>:
 80046c0:	b538      	push	{r3, r4, r5, lr}
 80046c2:	4605      	mov	r5, r0
 80046c4:	2900      	cmp	r1, #0
 80046c6:	d040      	beq.n	800474a <_free_r+0x8a>
 80046c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80046cc:	1f0c      	subs	r4, r1, #4
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	bfb8      	it	lt
 80046d2:	18e4      	addlt	r4, r4, r3
 80046d4:	f000 f8e6 	bl	80048a4 <__malloc_lock>
 80046d8:	4a1c      	ldr	r2, [pc, #112]	@ (800474c <_free_r+0x8c>)
 80046da:	6813      	ldr	r3, [r2, #0]
 80046dc:	b933      	cbnz	r3, 80046ec <_free_r+0x2c>
 80046de:	6063      	str	r3, [r4, #4]
 80046e0:	6014      	str	r4, [r2, #0]
 80046e2:	4628      	mov	r0, r5
 80046e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80046e8:	f000 b8e2 	b.w	80048b0 <__malloc_unlock>
 80046ec:	42a3      	cmp	r3, r4
 80046ee:	d908      	bls.n	8004702 <_free_r+0x42>
 80046f0:	6820      	ldr	r0, [r4, #0]
 80046f2:	1821      	adds	r1, r4, r0
 80046f4:	428b      	cmp	r3, r1
 80046f6:	bf01      	itttt	eq
 80046f8:	6819      	ldreq	r1, [r3, #0]
 80046fa:	685b      	ldreq	r3, [r3, #4]
 80046fc:	1809      	addeq	r1, r1, r0
 80046fe:	6021      	streq	r1, [r4, #0]
 8004700:	e7ed      	b.n	80046de <_free_r+0x1e>
 8004702:	461a      	mov	r2, r3
 8004704:	685b      	ldr	r3, [r3, #4]
 8004706:	b10b      	cbz	r3, 800470c <_free_r+0x4c>
 8004708:	42a3      	cmp	r3, r4
 800470a:	d9fa      	bls.n	8004702 <_free_r+0x42>
 800470c:	6811      	ldr	r1, [r2, #0]
 800470e:	1850      	adds	r0, r2, r1
 8004710:	42a0      	cmp	r0, r4
 8004712:	d10b      	bne.n	800472c <_free_r+0x6c>
 8004714:	6820      	ldr	r0, [r4, #0]
 8004716:	4401      	add	r1, r0
 8004718:	1850      	adds	r0, r2, r1
 800471a:	4283      	cmp	r3, r0
 800471c:	6011      	str	r1, [r2, #0]
 800471e:	d1e0      	bne.n	80046e2 <_free_r+0x22>
 8004720:	6818      	ldr	r0, [r3, #0]
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	4408      	add	r0, r1
 8004726:	6010      	str	r0, [r2, #0]
 8004728:	6053      	str	r3, [r2, #4]
 800472a:	e7da      	b.n	80046e2 <_free_r+0x22>
 800472c:	d902      	bls.n	8004734 <_free_r+0x74>
 800472e:	230c      	movs	r3, #12
 8004730:	602b      	str	r3, [r5, #0]
 8004732:	e7d6      	b.n	80046e2 <_free_r+0x22>
 8004734:	6820      	ldr	r0, [r4, #0]
 8004736:	1821      	adds	r1, r4, r0
 8004738:	428b      	cmp	r3, r1
 800473a:	bf01      	itttt	eq
 800473c:	6819      	ldreq	r1, [r3, #0]
 800473e:	685b      	ldreq	r3, [r3, #4]
 8004740:	1809      	addeq	r1, r1, r0
 8004742:	6021      	streq	r1, [r4, #0]
 8004744:	6063      	str	r3, [r4, #4]
 8004746:	6054      	str	r4, [r2, #4]
 8004748:	e7cb      	b.n	80046e2 <_free_r+0x22>
 800474a:	bd38      	pop	{r3, r4, r5, pc}
 800474c:	20000370 	.word	0x20000370

08004750 <malloc>:
 8004750:	4b02      	ldr	r3, [pc, #8]	@ (800475c <malloc+0xc>)
 8004752:	4601      	mov	r1, r0
 8004754:	6818      	ldr	r0, [r3, #0]
 8004756:	f000 b825 	b.w	80047a4 <_malloc_r>
 800475a:	bf00      	nop
 800475c:	20000018 	.word	0x20000018

08004760 <sbrk_aligned>:
 8004760:	b570      	push	{r4, r5, r6, lr}
 8004762:	4e0f      	ldr	r6, [pc, #60]	@ (80047a0 <sbrk_aligned+0x40>)
 8004764:	460c      	mov	r4, r1
 8004766:	6831      	ldr	r1, [r6, #0]
 8004768:	4605      	mov	r5, r0
 800476a:	b911      	cbnz	r1, 8004772 <sbrk_aligned+0x12>
 800476c:	f000 fcce 	bl	800510c <_sbrk_r>
 8004770:	6030      	str	r0, [r6, #0]
 8004772:	4621      	mov	r1, r4
 8004774:	4628      	mov	r0, r5
 8004776:	f000 fcc9 	bl	800510c <_sbrk_r>
 800477a:	1c43      	adds	r3, r0, #1
 800477c:	d103      	bne.n	8004786 <sbrk_aligned+0x26>
 800477e:	f04f 34ff 	mov.w	r4, #4294967295
 8004782:	4620      	mov	r0, r4
 8004784:	bd70      	pop	{r4, r5, r6, pc}
 8004786:	1cc4      	adds	r4, r0, #3
 8004788:	f024 0403 	bic.w	r4, r4, #3
 800478c:	42a0      	cmp	r0, r4
 800478e:	d0f8      	beq.n	8004782 <sbrk_aligned+0x22>
 8004790:	1a21      	subs	r1, r4, r0
 8004792:	4628      	mov	r0, r5
 8004794:	f000 fcba 	bl	800510c <_sbrk_r>
 8004798:	3001      	adds	r0, #1
 800479a:	d1f2      	bne.n	8004782 <sbrk_aligned+0x22>
 800479c:	e7ef      	b.n	800477e <sbrk_aligned+0x1e>
 800479e:	bf00      	nop
 80047a0:	2000036c 	.word	0x2000036c

080047a4 <_malloc_r>:
 80047a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80047a8:	1ccd      	adds	r5, r1, #3
 80047aa:	f025 0503 	bic.w	r5, r5, #3
 80047ae:	3508      	adds	r5, #8
 80047b0:	2d0c      	cmp	r5, #12
 80047b2:	bf38      	it	cc
 80047b4:	250c      	movcc	r5, #12
 80047b6:	2d00      	cmp	r5, #0
 80047b8:	4606      	mov	r6, r0
 80047ba:	db01      	blt.n	80047c0 <_malloc_r+0x1c>
 80047bc:	42a9      	cmp	r1, r5
 80047be:	d904      	bls.n	80047ca <_malloc_r+0x26>
 80047c0:	230c      	movs	r3, #12
 80047c2:	6033      	str	r3, [r6, #0]
 80047c4:	2000      	movs	r0, #0
 80047c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80047ca:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80048a0 <_malloc_r+0xfc>
 80047ce:	f000 f869 	bl	80048a4 <__malloc_lock>
 80047d2:	f8d8 3000 	ldr.w	r3, [r8]
 80047d6:	461c      	mov	r4, r3
 80047d8:	bb44      	cbnz	r4, 800482c <_malloc_r+0x88>
 80047da:	4629      	mov	r1, r5
 80047dc:	4630      	mov	r0, r6
 80047de:	f7ff ffbf 	bl	8004760 <sbrk_aligned>
 80047e2:	1c43      	adds	r3, r0, #1
 80047e4:	4604      	mov	r4, r0
 80047e6:	d158      	bne.n	800489a <_malloc_r+0xf6>
 80047e8:	f8d8 4000 	ldr.w	r4, [r8]
 80047ec:	4627      	mov	r7, r4
 80047ee:	2f00      	cmp	r7, #0
 80047f0:	d143      	bne.n	800487a <_malloc_r+0xd6>
 80047f2:	2c00      	cmp	r4, #0
 80047f4:	d04b      	beq.n	800488e <_malloc_r+0xea>
 80047f6:	6823      	ldr	r3, [r4, #0]
 80047f8:	4639      	mov	r1, r7
 80047fa:	4630      	mov	r0, r6
 80047fc:	eb04 0903 	add.w	r9, r4, r3
 8004800:	f000 fc84 	bl	800510c <_sbrk_r>
 8004804:	4581      	cmp	r9, r0
 8004806:	d142      	bne.n	800488e <_malloc_r+0xea>
 8004808:	6821      	ldr	r1, [r4, #0]
 800480a:	4630      	mov	r0, r6
 800480c:	1a6d      	subs	r5, r5, r1
 800480e:	4629      	mov	r1, r5
 8004810:	f7ff ffa6 	bl	8004760 <sbrk_aligned>
 8004814:	3001      	adds	r0, #1
 8004816:	d03a      	beq.n	800488e <_malloc_r+0xea>
 8004818:	6823      	ldr	r3, [r4, #0]
 800481a:	442b      	add	r3, r5
 800481c:	6023      	str	r3, [r4, #0]
 800481e:	f8d8 3000 	ldr.w	r3, [r8]
 8004822:	685a      	ldr	r2, [r3, #4]
 8004824:	bb62      	cbnz	r2, 8004880 <_malloc_r+0xdc>
 8004826:	f8c8 7000 	str.w	r7, [r8]
 800482a:	e00f      	b.n	800484c <_malloc_r+0xa8>
 800482c:	6822      	ldr	r2, [r4, #0]
 800482e:	1b52      	subs	r2, r2, r5
 8004830:	d420      	bmi.n	8004874 <_malloc_r+0xd0>
 8004832:	2a0b      	cmp	r2, #11
 8004834:	d917      	bls.n	8004866 <_malloc_r+0xc2>
 8004836:	1961      	adds	r1, r4, r5
 8004838:	42a3      	cmp	r3, r4
 800483a:	6025      	str	r5, [r4, #0]
 800483c:	bf18      	it	ne
 800483e:	6059      	strne	r1, [r3, #4]
 8004840:	6863      	ldr	r3, [r4, #4]
 8004842:	bf08      	it	eq
 8004844:	f8c8 1000 	streq.w	r1, [r8]
 8004848:	5162      	str	r2, [r4, r5]
 800484a:	604b      	str	r3, [r1, #4]
 800484c:	4630      	mov	r0, r6
 800484e:	f000 f82f 	bl	80048b0 <__malloc_unlock>
 8004852:	f104 000b 	add.w	r0, r4, #11
 8004856:	1d23      	adds	r3, r4, #4
 8004858:	f020 0007 	bic.w	r0, r0, #7
 800485c:	1ac2      	subs	r2, r0, r3
 800485e:	bf1c      	itt	ne
 8004860:	1a1b      	subne	r3, r3, r0
 8004862:	50a3      	strne	r3, [r4, r2]
 8004864:	e7af      	b.n	80047c6 <_malloc_r+0x22>
 8004866:	6862      	ldr	r2, [r4, #4]
 8004868:	42a3      	cmp	r3, r4
 800486a:	bf0c      	ite	eq
 800486c:	f8c8 2000 	streq.w	r2, [r8]
 8004870:	605a      	strne	r2, [r3, #4]
 8004872:	e7eb      	b.n	800484c <_malloc_r+0xa8>
 8004874:	4623      	mov	r3, r4
 8004876:	6864      	ldr	r4, [r4, #4]
 8004878:	e7ae      	b.n	80047d8 <_malloc_r+0x34>
 800487a:	463c      	mov	r4, r7
 800487c:	687f      	ldr	r7, [r7, #4]
 800487e:	e7b6      	b.n	80047ee <_malloc_r+0x4a>
 8004880:	461a      	mov	r2, r3
 8004882:	685b      	ldr	r3, [r3, #4]
 8004884:	42a3      	cmp	r3, r4
 8004886:	d1fb      	bne.n	8004880 <_malloc_r+0xdc>
 8004888:	2300      	movs	r3, #0
 800488a:	6053      	str	r3, [r2, #4]
 800488c:	e7de      	b.n	800484c <_malloc_r+0xa8>
 800488e:	230c      	movs	r3, #12
 8004890:	4630      	mov	r0, r6
 8004892:	6033      	str	r3, [r6, #0]
 8004894:	f000 f80c 	bl	80048b0 <__malloc_unlock>
 8004898:	e794      	b.n	80047c4 <_malloc_r+0x20>
 800489a:	6005      	str	r5, [r0, #0]
 800489c:	e7d6      	b.n	800484c <_malloc_r+0xa8>
 800489e:	bf00      	nop
 80048a0:	20000370 	.word	0x20000370

080048a4 <__malloc_lock>:
 80048a4:	4801      	ldr	r0, [pc, #4]	@ (80048ac <__malloc_lock+0x8>)
 80048a6:	f7ff b8a8 	b.w	80039fa <__retarget_lock_acquire_recursive>
 80048aa:	bf00      	nop
 80048ac:	20000368 	.word	0x20000368

080048b0 <__malloc_unlock>:
 80048b0:	4801      	ldr	r0, [pc, #4]	@ (80048b8 <__malloc_unlock+0x8>)
 80048b2:	f7ff b8a3 	b.w	80039fc <__retarget_lock_release_recursive>
 80048b6:	bf00      	nop
 80048b8:	20000368 	.word	0x20000368

080048bc <_Balloc>:
 80048bc:	b570      	push	{r4, r5, r6, lr}
 80048be:	69c6      	ldr	r6, [r0, #28]
 80048c0:	4604      	mov	r4, r0
 80048c2:	460d      	mov	r5, r1
 80048c4:	b976      	cbnz	r6, 80048e4 <_Balloc+0x28>
 80048c6:	2010      	movs	r0, #16
 80048c8:	f7ff ff42 	bl	8004750 <malloc>
 80048cc:	4602      	mov	r2, r0
 80048ce:	61e0      	str	r0, [r4, #28]
 80048d0:	b920      	cbnz	r0, 80048dc <_Balloc+0x20>
 80048d2:	216b      	movs	r1, #107	@ 0x6b
 80048d4:	4b17      	ldr	r3, [pc, #92]	@ (8004934 <_Balloc+0x78>)
 80048d6:	4818      	ldr	r0, [pc, #96]	@ (8004938 <_Balloc+0x7c>)
 80048d8:	f000 fc36 	bl	8005148 <__assert_func>
 80048dc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80048e0:	6006      	str	r6, [r0, #0]
 80048e2:	60c6      	str	r6, [r0, #12]
 80048e4:	69e6      	ldr	r6, [r4, #28]
 80048e6:	68f3      	ldr	r3, [r6, #12]
 80048e8:	b183      	cbz	r3, 800490c <_Balloc+0x50>
 80048ea:	69e3      	ldr	r3, [r4, #28]
 80048ec:	68db      	ldr	r3, [r3, #12]
 80048ee:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80048f2:	b9b8      	cbnz	r0, 8004924 <_Balloc+0x68>
 80048f4:	2101      	movs	r1, #1
 80048f6:	fa01 f605 	lsl.w	r6, r1, r5
 80048fa:	1d72      	adds	r2, r6, #5
 80048fc:	4620      	mov	r0, r4
 80048fe:	0092      	lsls	r2, r2, #2
 8004900:	f000 fc40 	bl	8005184 <_calloc_r>
 8004904:	b160      	cbz	r0, 8004920 <_Balloc+0x64>
 8004906:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800490a:	e00e      	b.n	800492a <_Balloc+0x6e>
 800490c:	2221      	movs	r2, #33	@ 0x21
 800490e:	2104      	movs	r1, #4
 8004910:	4620      	mov	r0, r4
 8004912:	f000 fc37 	bl	8005184 <_calloc_r>
 8004916:	69e3      	ldr	r3, [r4, #28]
 8004918:	60f0      	str	r0, [r6, #12]
 800491a:	68db      	ldr	r3, [r3, #12]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d1e4      	bne.n	80048ea <_Balloc+0x2e>
 8004920:	2000      	movs	r0, #0
 8004922:	bd70      	pop	{r4, r5, r6, pc}
 8004924:	6802      	ldr	r2, [r0, #0]
 8004926:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800492a:	2300      	movs	r3, #0
 800492c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004930:	e7f7      	b.n	8004922 <_Balloc+0x66>
 8004932:	bf00      	nop
 8004934:	080057ef 	.word	0x080057ef
 8004938:	0800586f 	.word	0x0800586f

0800493c <_Bfree>:
 800493c:	b570      	push	{r4, r5, r6, lr}
 800493e:	69c6      	ldr	r6, [r0, #28]
 8004940:	4605      	mov	r5, r0
 8004942:	460c      	mov	r4, r1
 8004944:	b976      	cbnz	r6, 8004964 <_Bfree+0x28>
 8004946:	2010      	movs	r0, #16
 8004948:	f7ff ff02 	bl	8004750 <malloc>
 800494c:	4602      	mov	r2, r0
 800494e:	61e8      	str	r0, [r5, #28]
 8004950:	b920      	cbnz	r0, 800495c <_Bfree+0x20>
 8004952:	218f      	movs	r1, #143	@ 0x8f
 8004954:	4b08      	ldr	r3, [pc, #32]	@ (8004978 <_Bfree+0x3c>)
 8004956:	4809      	ldr	r0, [pc, #36]	@ (800497c <_Bfree+0x40>)
 8004958:	f000 fbf6 	bl	8005148 <__assert_func>
 800495c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004960:	6006      	str	r6, [r0, #0]
 8004962:	60c6      	str	r6, [r0, #12]
 8004964:	b13c      	cbz	r4, 8004976 <_Bfree+0x3a>
 8004966:	69eb      	ldr	r3, [r5, #28]
 8004968:	6862      	ldr	r2, [r4, #4]
 800496a:	68db      	ldr	r3, [r3, #12]
 800496c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004970:	6021      	str	r1, [r4, #0]
 8004972:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8004976:	bd70      	pop	{r4, r5, r6, pc}
 8004978:	080057ef 	.word	0x080057ef
 800497c:	0800586f 	.word	0x0800586f

08004980 <__multadd>:
 8004980:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004984:	4607      	mov	r7, r0
 8004986:	460c      	mov	r4, r1
 8004988:	461e      	mov	r6, r3
 800498a:	2000      	movs	r0, #0
 800498c:	690d      	ldr	r5, [r1, #16]
 800498e:	f101 0c14 	add.w	ip, r1, #20
 8004992:	f8dc 3000 	ldr.w	r3, [ip]
 8004996:	3001      	adds	r0, #1
 8004998:	b299      	uxth	r1, r3
 800499a:	fb02 6101 	mla	r1, r2, r1, r6
 800499e:	0c1e      	lsrs	r6, r3, #16
 80049a0:	0c0b      	lsrs	r3, r1, #16
 80049a2:	fb02 3306 	mla	r3, r2, r6, r3
 80049a6:	b289      	uxth	r1, r1
 80049a8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80049ac:	4285      	cmp	r5, r0
 80049ae:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80049b2:	f84c 1b04 	str.w	r1, [ip], #4
 80049b6:	dcec      	bgt.n	8004992 <__multadd+0x12>
 80049b8:	b30e      	cbz	r6, 80049fe <__multadd+0x7e>
 80049ba:	68a3      	ldr	r3, [r4, #8]
 80049bc:	42ab      	cmp	r3, r5
 80049be:	dc19      	bgt.n	80049f4 <__multadd+0x74>
 80049c0:	6861      	ldr	r1, [r4, #4]
 80049c2:	4638      	mov	r0, r7
 80049c4:	3101      	adds	r1, #1
 80049c6:	f7ff ff79 	bl	80048bc <_Balloc>
 80049ca:	4680      	mov	r8, r0
 80049cc:	b928      	cbnz	r0, 80049da <__multadd+0x5a>
 80049ce:	4602      	mov	r2, r0
 80049d0:	21ba      	movs	r1, #186	@ 0xba
 80049d2:	4b0c      	ldr	r3, [pc, #48]	@ (8004a04 <__multadd+0x84>)
 80049d4:	480c      	ldr	r0, [pc, #48]	@ (8004a08 <__multadd+0x88>)
 80049d6:	f000 fbb7 	bl	8005148 <__assert_func>
 80049da:	6922      	ldr	r2, [r4, #16]
 80049dc:	f104 010c 	add.w	r1, r4, #12
 80049e0:	3202      	adds	r2, #2
 80049e2:	0092      	lsls	r2, r2, #2
 80049e4:	300c      	adds	r0, #12
 80049e6:	f000 fba1 	bl	800512c <memcpy>
 80049ea:	4621      	mov	r1, r4
 80049ec:	4638      	mov	r0, r7
 80049ee:	f7ff ffa5 	bl	800493c <_Bfree>
 80049f2:	4644      	mov	r4, r8
 80049f4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80049f8:	3501      	adds	r5, #1
 80049fa:	615e      	str	r6, [r3, #20]
 80049fc:	6125      	str	r5, [r4, #16]
 80049fe:	4620      	mov	r0, r4
 8004a00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004a04:	0800585e 	.word	0x0800585e
 8004a08:	0800586f 	.word	0x0800586f

08004a0c <__hi0bits>:
 8004a0c:	4603      	mov	r3, r0
 8004a0e:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8004a12:	bf3a      	itte	cc
 8004a14:	0403      	lslcc	r3, r0, #16
 8004a16:	2010      	movcc	r0, #16
 8004a18:	2000      	movcs	r0, #0
 8004a1a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004a1e:	bf3c      	itt	cc
 8004a20:	021b      	lslcc	r3, r3, #8
 8004a22:	3008      	addcc	r0, #8
 8004a24:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004a28:	bf3c      	itt	cc
 8004a2a:	011b      	lslcc	r3, r3, #4
 8004a2c:	3004      	addcc	r0, #4
 8004a2e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a32:	bf3c      	itt	cc
 8004a34:	009b      	lslcc	r3, r3, #2
 8004a36:	3002      	addcc	r0, #2
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	db05      	blt.n	8004a48 <__hi0bits+0x3c>
 8004a3c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8004a40:	f100 0001 	add.w	r0, r0, #1
 8004a44:	bf08      	it	eq
 8004a46:	2020      	moveq	r0, #32
 8004a48:	4770      	bx	lr

08004a4a <__lo0bits>:
 8004a4a:	6803      	ldr	r3, [r0, #0]
 8004a4c:	4602      	mov	r2, r0
 8004a4e:	f013 0007 	ands.w	r0, r3, #7
 8004a52:	d00b      	beq.n	8004a6c <__lo0bits+0x22>
 8004a54:	07d9      	lsls	r1, r3, #31
 8004a56:	d421      	bmi.n	8004a9c <__lo0bits+0x52>
 8004a58:	0798      	lsls	r0, r3, #30
 8004a5a:	bf49      	itett	mi
 8004a5c:	085b      	lsrmi	r3, r3, #1
 8004a5e:	089b      	lsrpl	r3, r3, #2
 8004a60:	2001      	movmi	r0, #1
 8004a62:	6013      	strmi	r3, [r2, #0]
 8004a64:	bf5c      	itt	pl
 8004a66:	2002      	movpl	r0, #2
 8004a68:	6013      	strpl	r3, [r2, #0]
 8004a6a:	4770      	bx	lr
 8004a6c:	b299      	uxth	r1, r3
 8004a6e:	b909      	cbnz	r1, 8004a74 <__lo0bits+0x2a>
 8004a70:	2010      	movs	r0, #16
 8004a72:	0c1b      	lsrs	r3, r3, #16
 8004a74:	b2d9      	uxtb	r1, r3
 8004a76:	b909      	cbnz	r1, 8004a7c <__lo0bits+0x32>
 8004a78:	3008      	adds	r0, #8
 8004a7a:	0a1b      	lsrs	r3, r3, #8
 8004a7c:	0719      	lsls	r1, r3, #28
 8004a7e:	bf04      	itt	eq
 8004a80:	091b      	lsreq	r3, r3, #4
 8004a82:	3004      	addeq	r0, #4
 8004a84:	0799      	lsls	r1, r3, #30
 8004a86:	bf04      	itt	eq
 8004a88:	089b      	lsreq	r3, r3, #2
 8004a8a:	3002      	addeq	r0, #2
 8004a8c:	07d9      	lsls	r1, r3, #31
 8004a8e:	d403      	bmi.n	8004a98 <__lo0bits+0x4e>
 8004a90:	085b      	lsrs	r3, r3, #1
 8004a92:	f100 0001 	add.w	r0, r0, #1
 8004a96:	d003      	beq.n	8004aa0 <__lo0bits+0x56>
 8004a98:	6013      	str	r3, [r2, #0]
 8004a9a:	4770      	bx	lr
 8004a9c:	2000      	movs	r0, #0
 8004a9e:	4770      	bx	lr
 8004aa0:	2020      	movs	r0, #32
 8004aa2:	4770      	bx	lr

08004aa4 <__i2b>:
 8004aa4:	b510      	push	{r4, lr}
 8004aa6:	460c      	mov	r4, r1
 8004aa8:	2101      	movs	r1, #1
 8004aaa:	f7ff ff07 	bl	80048bc <_Balloc>
 8004aae:	4602      	mov	r2, r0
 8004ab0:	b928      	cbnz	r0, 8004abe <__i2b+0x1a>
 8004ab2:	f240 1145 	movw	r1, #325	@ 0x145
 8004ab6:	4b04      	ldr	r3, [pc, #16]	@ (8004ac8 <__i2b+0x24>)
 8004ab8:	4804      	ldr	r0, [pc, #16]	@ (8004acc <__i2b+0x28>)
 8004aba:	f000 fb45 	bl	8005148 <__assert_func>
 8004abe:	2301      	movs	r3, #1
 8004ac0:	6144      	str	r4, [r0, #20]
 8004ac2:	6103      	str	r3, [r0, #16]
 8004ac4:	bd10      	pop	{r4, pc}
 8004ac6:	bf00      	nop
 8004ac8:	0800585e 	.word	0x0800585e
 8004acc:	0800586f 	.word	0x0800586f

08004ad0 <__multiply>:
 8004ad0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ad4:	4614      	mov	r4, r2
 8004ad6:	690a      	ldr	r2, [r1, #16]
 8004ad8:	6923      	ldr	r3, [r4, #16]
 8004ada:	460f      	mov	r7, r1
 8004adc:	429a      	cmp	r2, r3
 8004ade:	bfa2      	ittt	ge
 8004ae0:	4623      	movge	r3, r4
 8004ae2:	460c      	movge	r4, r1
 8004ae4:	461f      	movge	r7, r3
 8004ae6:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8004aea:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8004aee:	68a3      	ldr	r3, [r4, #8]
 8004af0:	6861      	ldr	r1, [r4, #4]
 8004af2:	eb0a 0609 	add.w	r6, sl, r9
 8004af6:	42b3      	cmp	r3, r6
 8004af8:	b085      	sub	sp, #20
 8004afa:	bfb8      	it	lt
 8004afc:	3101      	addlt	r1, #1
 8004afe:	f7ff fedd 	bl	80048bc <_Balloc>
 8004b02:	b930      	cbnz	r0, 8004b12 <__multiply+0x42>
 8004b04:	4602      	mov	r2, r0
 8004b06:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8004b0a:	4b43      	ldr	r3, [pc, #268]	@ (8004c18 <__multiply+0x148>)
 8004b0c:	4843      	ldr	r0, [pc, #268]	@ (8004c1c <__multiply+0x14c>)
 8004b0e:	f000 fb1b 	bl	8005148 <__assert_func>
 8004b12:	f100 0514 	add.w	r5, r0, #20
 8004b16:	462b      	mov	r3, r5
 8004b18:	2200      	movs	r2, #0
 8004b1a:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8004b1e:	4543      	cmp	r3, r8
 8004b20:	d321      	bcc.n	8004b66 <__multiply+0x96>
 8004b22:	f107 0114 	add.w	r1, r7, #20
 8004b26:	f104 0214 	add.w	r2, r4, #20
 8004b2a:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8004b2e:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8004b32:	9302      	str	r3, [sp, #8]
 8004b34:	1b13      	subs	r3, r2, r4
 8004b36:	3b15      	subs	r3, #21
 8004b38:	f023 0303 	bic.w	r3, r3, #3
 8004b3c:	3304      	adds	r3, #4
 8004b3e:	f104 0715 	add.w	r7, r4, #21
 8004b42:	42ba      	cmp	r2, r7
 8004b44:	bf38      	it	cc
 8004b46:	2304      	movcc	r3, #4
 8004b48:	9301      	str	r3, [sp, #4]
 8004b4a:	9b02      	ldr	r3, [sp, #8]
 8004b4c:	9103      	str	r1, [sp, #12]
 8004b4e:	428b      	cmp	r3, r1
 8004b50:	d80c      	bhi.n	8004b6c <__multiply+0x9c>
 8004b52:	2e00      	cmp	r6, #0
 8004b54:	dd03      	ble.n	8004b5e <__multiply+0x8e>
 8004b56:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d05a      	beq.n	8004c14 <__multiply+0x144>
 8004b5e:	6106      	str	r6, [r0, #16]
 8004b60:	b005      	add	sp, #20
 8004b62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b66:	f843 2b04 	str.w	r2, [r3], #4
 8004b6a:	e7d8      	b.n	8004b1e <__multiply+0x4e>
 8004b6c:	f8b1 a000 	ldrh.w	sl, [r1]
 8004b70:	f1ba 0f00 	cmp.w	sl, #0
 8004b74:	d023      	beq.n	8004bbe <__multiply+0xee>
 8004b76:	46a9      	mov	r9, r5
 8004b78:	f04f 0c00 	mov.w	ip, #0
 8004b7c:	f104 0e14 	add.w	lr, r4, #20
 8004b80:	f85e 7b04 	ldr.w	r7, [lr], #4
 8004b84:	f8d9 3000 	ldr.w	r3, [r9]
 8004b88:	fa1f fb87 	uxth.w	fp, r7
 8004b8c:	b29b      	uxth	r3, r3
 8004b8e:	fb0a 330b 	mla	r3, sl, fp, r3
 8004b92:	4463      	add	r3, ip
 8004b94:	f8d9 c000 	ldr.w	ip, [r9]
 8004b98:	0c3f      	lsrs	r7, r7, #16
 8004b9a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8004b9e:	fb0a c707 	mla	r7, sl, r7, ip
 8004ba2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8004ba6:	b29b      	uxth	r3, r3
 8004ba8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8004bac:	4572      	cmp	r2, lr
 8004bae:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8004bb2:	f849 3b04 	str.w	r3, [r9], #4
 8004bb6:	d8e3      	bhi.n	8004b80 <__multiply+0xb0>
 8004bb8:	9b01      	ldr	r3, [sp, #4]
 8004bba:	f845 c003 	str.w	ip, [r5, r3]
 8004bbe:	9b03      	ldr	r3, [sp, #12]
 8004bc0:	3104      	adds	r1, #4
 8004bc2:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8004bc6:	f1b9 0f00 	cmp.w	r9, #0
 8004bca:	d021      	beq.n	8004c10 <__multiply+0x140>
 8004bcc:	46ae      	mov	lr, r5
 8004bce:	f04f 0a00 	mov.w	sl, #0
 8004bd2:	682b      	ldr	r3, [r5, #0]
 8004bd4:	f104 0c14 	add.w	ip, r4, #20
 8004bd8:	f8bc b000 	ldrh.w	fp, [ip]
 8004bdc:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8004be0:	b29b      	uxth	r3, r3
 8004be2:	fb09 770b 	mla	r7, r9, fp, r7
 8004be6:	4457      	add	r7, sl
 8004be8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8004bec:	f84e 3b04 	str.w	r3, [lr], #4
 8004bf0:	f85c 3b04 	ldr.w	r3, [ip], #4
 8004bf4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004bf8:	f8be 3000 	ldrh.w	r3, [lr]
 8004bfc:	4562      	cmp	r2, ip
 8004bfe:	fb09 330a 	mla	r3, r9, sl, r3
 8004c02:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8004c06:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004c0a:	d8e5      	bhi.n	8004bd8 <__multiply+0x108>
 8004c0c:	9f01      	ldr	r7, [sp, #4]
 8004c0e:	51eb      	str	r3, [r5, r7]
 8004c10:	3504      	adds	r5, #4
 8004c12:	e79a      	b.n	8004b4a <__multiply+0x7a>
 8004c14:	3e01      	subs	r6, #1
 8004c16:	e79c      	b.n	8004b52 <__multiply+0x82>
 8004c18:	0800585e 	.word	0x0800585e
 8004c1c:	0800586f 	.word	0x0800586f

08004c20 <__pow5mult>:
 8004c20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004c24:	4615      	mov	r5, r2
 8004c26:	f012 0203 	ands.w	r2, r2, #3
 8004c2a:	4607      	mov	r7, r0
 8004c2c:	460e      	mov	r6, r1
 8004c2e:	d007      	beq.n	8004c40 <__pow5mult+0x20>
 8004c30:	4c25      	ldr	r4, [pc, #148]	@ (8004cc8 <__pow5mult+0xa8>)
 8004c32:	3a01      	subs	r2, #1
 8004c34:	2300      	movs	r3, #0
 8004c36:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8004c3a:	f7ff fea1 	bl	8004980 <__multadd>
 8004c3e:	4606      	mov	r6, r0
 8004c40:	10ad      	asrs	r5, r5, #2
 8004c42:	d03d      	beq.n	8004cc0 <__pow5mult+0xa0>
 8004c44:	69fc      	ldr	r4, [r7, #28]
 8004c46:	b97c      	cbnz	r4, 8004c68 <__pow5mult+0x48>
 8004c48:	2010      	movs	r0, #16
 8004c4a:	f7ff fd81 	bl	8004750 <malloc>
 8004c4e:	4602      	mov	r2, r0
 8004c50:	61f8      	str	r0, [r7, #28]
 8004c52:	b928      	cbnz	r0, 8004c60 <__pow5mult+0x40>
 8004c54:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8004c58:	4b1c      	ldr	r3, [pc, #112]	@ (8004ccc <__pow5mult+0xac>)
 8004c5a:	481d      	ldr	r0, [pc, #116]	@ (8004cd0 <__pow5mult+0xb0>)
 8004c5c:	f000 fa74 	bl	8005148 <__assert_func>
 8004c60:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004c64:	6004      	str	r4, [r0, #0]
 8004c66:	60c4      	str	r4, [r0, #12]
 8004c68:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8004c6c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004c70:	b94c      	cbnz	r4, 8004c86 <__pow5mult+0x66>
 8004c72:	f240 2171 	movw	r1, #625	@ 0x271
 8004c76:	4638      	mov	r0, r7
 8004c78:	f7ff ff14 	bl	8004aa4 <__i2b>
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	4604      	mov	r4, r0
 8004c80:	f8c8 0008 	str.w	r0, [r8, #8]
 8004c84:	6003      	str	r3, [r0, #0]
 8004c86:	f04f 0900 	mov.w	r9, #0
 8004c8a:	07eb      	lsls	r3, r5, #31
 8004c8c:	d50a      	bpl.n	8004ca4 <__pow5mult+0x84>
 8004c8e:	4631      	mov	r1, r6
 8004c90:	4622      	mov	r2, r4
 8004c92:	4638      	mov	r0, r7
 8004c94:	f7ff ff1c 	bl	8004ad0 <__multiply>
 8004c98:	4680      	mov	r8, r0
 8004c9a:	4631      	mov	r1, r6
 8004c9c:	4638      	mov	r0, r7
 8004c9e:	f7ff fe4d 	bl	800493c <_Bfree>
 8004ca2:	4646      	mov	r6, r8
 8004ca4:	106d      	asrs	r5, r5, #1
 8004ca6:	d00b      	beq.n	8004cc0 <__pow5mult+0xa0>
 8004ca8:	6820      	ldr	r0, [r4, #0]
 8004caa:	b938      	cbnz	r0, 8004cbc <__pow5mult+0x9c>
 8004cac:	4622      	mov	r2, r4
 8004cae:	4621      	mov	r1, r4
 8004cb0:	4638      	mov	r0, r7
 8004cb2:	f7ff ff0d 	bl	8004ad0 <__multiply>
 8004cb6:	6020      	str	r0, [r4, #0]
 8004cb8:	f8c0 9000 	str.w	r9, [r0]
 8004cbc:	4604      	mov	r4, r0
 8004cbe:	e7e4      	b.n	8004c8a <__pow5mult+0x6a>
 8004cc0:	4630      	mov	r0, r6
 8004cc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004cc6:	bf00      	nop
 8004cc8:	080058c8 	.word	0x080058c8
 8004ccc:	080057ef 	.word	0x080057ef
 8004cd0:	0800586f 	.word	0x0800586f

08004cd4 <__lshift>:
 8004cd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004cd8:	460c      	mov	r4, r1
 8004cda:	4607      	mov	r7, r0
 8004cdc:	4691      	mov	r9, r2
 8004cde:	6923      	ldr	r3, [r4, #16]
 8004ce0:	6849      	ldr	r1, [r1, #4]
 8004ce2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8004ce6:	68a3      	ldr	r3, [r4, #8]
 8004ce8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8004cec:	f108 0601 	add.w	r6, r8, #1
 8004cf0:	42b3      	cmp	r3, r6
 8004cf2:	db0b      	blt.n	8004d0c <__lshift+0x38>
 8004cf4:	4638      	mov	r0, r7
 8004cf6:	f7ff fde1 	bl	80048bc <_Balloc>
 8004cfa:	4605      	mov	r5, r0
 8004cfc:	b948      	cbnz	r0, 8004d12 <__lshift+0x3e>
 8004cfe:	4602      	mov	r2, r0
 8004d00:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8004d04:	4b27      	ldr	r3, [pc, #156]	@ (8004da4 <__lshift+0xd0>)
 8004d06:	4828      	ldr	r0, [pc, #160]	@ (8004da8 <__lshift+0xd4>)
 8004d08:	f000 fa1e 	bl	8005148 <__assert_func>
 8004d0c:	3101      	adds	r1, #1
 8004d0e:	005b      	lsls	r3, r3, #1
 8004d10:	e7ee      	b.n	8004cf0 <__lshift+0x1c>
 8004d12:	2300      	movs	r3, #0
 8004d14:	f100 0114 	add.w	r1, r0, #20
 8004d18:	f100 0210 	add.w	r2, r0, #16
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	4553      	cmp	r3, sl
 8004d20:	db33      	blt.n	8004d8a <__lshift+0xb6>
 8004d22:	6920      	ldr	r0, [r4, #16]
 8004d24:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004d28:	f104 0314 	add.w	r3, r4, #20
 8004d2c:	f019 091f 	ands.w	r9, r9, #31
 8004d30:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8004d34:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8004d38:	d02b      	beq.n	8004d92 <__lshift+0xbe>
 8004d3a:	468a      	mov	sl, r1
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	f1c9 0e20 	rsb	lr, r9, #32
 8004d42:	6818      	ldr	r0, [r3, #0]
 8004d44:	fa00 f009 	lsl.w	r0, r0, r9
 8004d48:	4310      	orrs	r0, r2
 8004d4a:	f84a 0b04 	str.w	r0, [sl], #4
 8004d4e:	f853 2b04 	ldr.w	r2, [r3], #4
 8004d52:	459c      	cmp	ip, r3
 8004d54:	fa22 f20e 	lsr.w	r2, r2, lr
 8004d58:	d8f3      	bhi.n	8004d42 <__lshift+0x6e>
 8004d5a:	ebac 0304 	sub.w	r3, ip, r4
 8004d5e:	3b15      	subs	r3, #21
 8004d60:	f023 0303 	bic.w	r3, r3, #3
 8004d64:	3304      	adds	r3, #4
 8004d66:	f104 0015 	add.w	r0, r4, #21
 8004d6a:	4584      	cmp	ip, r0
 8004d6c:	bf38      	it	cc
 8004d6e:	2304      	movcc	r3, #4
 8004d70:	50ca      	str	r2, [r1, r3]
 8004d72:	b10a      	cbz	r2, 8004d78 <__lshift+0xa4>
 8004d74:	f108 0602 	add.w	r6, r8, #2
 8004d78:	3e01      	subs	r6, #1
 8004d7a:	4638      	mov	r0, r7
 8004d7c:	4621      	mov	r1, r4
 8004d7e:	612e      	str	r6, [r5, #16]
 8004d80:	f7ff fddc 	bl	800493c <_Bfree>
 8004d84:	4628      	mov	r0, r5
 8004d86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d8a:	f842 0f04 	str.w	r0, [r2, #4]!
 8004d8e:	3301      	adds	r3, #1
 8004d90:	e7c5      	b.n	8004d1e <__lshift+0x4a>
 8004d92:	3904      	subs	r1, #4
 8004d94:	f853 2b04 	ldr.w	r2, [r3], #4
 8004d98:	459c      	cmp	ip, r3
 8004d9a:	f841 2f04 	str.w	r2, [r1, #4]!
 8004d9e:	d8f9      	bhi.n	8004d94 <__lshift+0xc0>
 8004da0:	e7ea      	b.n	8004d78 <__lshift+0xa4>
 8004da2:	bf00      	nop
 8004da4:	0800585e 	.word	0x0800585e
 8004da8:	0800586f 	.word	0x0800586f

08004dac <__mcmp>:
 8004dac:	4603      	mov	r3, r0
 8004dae:	690a      	ldr	r2, [r1, #16]
 8004db0:	6900      	ldr	r0, [r0, #16]
 8004db2:	b530      	push	{r4, r5, lr}
 8004db4:	1a80      	subs	r0, r0, r2
 8004db6:	d10e      	bne.n	8004dd6 <__mcmp+0x2a>
 8004db8:	3314      	adds	r3, #20
 8004dba:	3114      	adds	r1, #20
 8004dbc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8004dc0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8004dc4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8004dc8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8004dcc:	4295      	cmp	r5, r2
 8004dce:	d003      	beq.n	8004dd8 <__mcmp+0x2c>
 8004dd0:	d205      	bcs.n	8004dde <__mcmp+0x32>
 8004dd2:	f04f 30ff 	mov.w	r0, #4294967295
 8004dd6:	bd30      	pop	{r4, r5, pc}
 8004dd8:	42a3      	cmp	r3, r4
 8004dda:	d3f3      	bcc.n	8004dc4 <__mcmp+0x18>
 8004ddc:	e7fb      	b.n	8004dd6 <__mcmp+0x2a>
 8004dde:	2001      	movs	r0, #1
 8004de0:	e7f9      	b.n	8004dd6 <__mcmp+0x2a>
	...

08004de4 <__mdiff>:
 8004de4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004de8:	4689      	mov	r9, r1
 8004dea:	4606      	mov	r6, r0
 8004dec:	4611      	mov	r1, r2
 8004dee:	4648      	mov	r0, r9
 8004df0:	4614      	mov	r4, r2
 8004df2:	f7ff ffdb 	bl	8004dac <__mcmp>
 8004df6:	1e05      	subs	r5, r0, #0
 8004df8:	d112      	bne.n	8004e20 <__mdiff+0x3c>
 8004dfa:	4629      	mov	r1, r5
 8004dfc:	4630      	mov	r0, r6
 8004dfe:	f7ff fd5d 	bl	80048bc <_Balloc>
 8004e02:	4602      	mov	r2, r0
 8004e04:	b928      	cbnz	r0, 8004e12 <__mdiff+0x2e>
 8004e06:	f240 2137 	movw	r1, #567	@ 0x237
 8004e0a:	4b3e      	ldr	r3, [pc, #248]	@ (8004f04 <__mdiff+0x120>)
 8004e0c:	483e      	ldr	r0, [pc, #248]	@ (8004f08 <__mdiff+0x124>)
 8004e0e:	f000 f99b 	bl	8005148 <__assert_func>
 8004e12:	2301      	movs	r3, #1
 8004e14:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8004e18:	4610      	mov	r0, r2
 8004e1a:	b003      	add	sp, #12
 8004e1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e20:	bfbc      	itt	lt
 8004e22:	464b      	movlt	r3, r9
 8004e24:	46a1      	movlt	r9, r4
 8004e26:	4630      	mov	r0, r6
 8004e28:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8004e2c:	bfba      	itte	lt
 8004e2e:	461c      	movlt	r4, r3
 8004e30:	2501      	movlt	r5, #1
 8004e32:	2500      	movge	r5, #0
 8004e34:	f7ff fd42 	bl	80048bc <_Balloc>
 8004e38:	4602      	mov	r2, r0
 8004e3a:	b918      	cbnz	r0, 8004e44 <__mdiff+0x60>
 8004e3c:	f240 2145 	movw	r1, #581	@ 0x245
 8004e40:	4b30      	ldr	r3, [pc, #192]	@ (8004f04 <__mdiff+0x120>)
 8004e42:	e7e3      	b.n	8004e0c <__mdiff+0x28>
 8004e44:	f100 0b14 	add.w	fp, r0, #20
 8004e48:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8004e4c:	f109 0310 	add.w	r3, r9, #16
 8004e50:	60c5      	str	r5, [r0, #12]
 8004e52:	f04f 0c00 	mov.w	ip, #0
 8004e56:	f109 0514 	add.w	r5, r9, #20
 8004e5a:	46d9      	mov	r9, fp
 8004e5c:	6926      	ldr	r6, [r4, #16]
 8004e5e:	f104 0e14 	add.w	lr, r4, #20
 8004e62:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8004e66:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8004e6a:	9301      	str	r3, [sp, #4]
 8004e6c:	9b01      	ldr	r3, [sp, #4]
 8004e6e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8004e72:	f853 af04 	ldr.w	sl, [r3, #4]!
 8004e76:	b281      	uxth	r1, r0
 8004e78:	9301      	str	r3, [sp, #4]
 8004e7a:	fa1f f38a 	uxth.w	r3, sl
 8004e7e:	1a5b      	subs	r3, r3, r1
 8004e80:	0c00      	lsrs	r0, r0, #16
 8004e82:	4463      	add	r3, ip
 8004e84:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8004e88:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8004e8c:	b29b      	uxth	r3, r3
 8004e8e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8004e92:	4576      	cmp	r6, lr
 8004e94:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8004e98:	f849 3b04 	str.w	r3, [r9], #4
 8004e9c:	d8e6      	bhi.n	8004e6c <__mdiff+0x88>
 8004e9e:	1b33      	subs	r3, r6, r4
 8004ea0:	3b15      	subs	r3, #21
 8004ea2:	f023 0303 	bic.w	r3, r3, #3
 8004ea6:	3415      	adds	r4, #21
 8004ea8:	3304      	adds	r3, #4
 8004eaa:	42a6      	cmp	r6, r4
 8004eac:	bf38      	it	cc
 8004eae:	2304      	movcc	r3, #4
 8004eb0:	441d      	add	r5, r3
 8004eb2:	445b      	add	r3, fp
 8004eb4:	461e      	mov	r6, r3
 8004eb6:	462c      	mov	r4, r5
 8004eb8:	4544      	cmp	r4, r8
 8004eba:	d30e      	bcc.n	8004eda <__mdiff+0xf6>
 8004ebc:	f108 0103 	add.w	r1, r8, #3
 8004ec0:	1b49      	subs	r1, r1, r5
 8004ec2:	f021 0103 	bic.w	r1, r1, #3
 8004ec6:	3d03      	subs	r5, #3
 8004ec8:	45a8      	cmp	r8, r5
 8004eca:	bf38      	it	cc
 8004ecc:	2100      	movcc	r1, #0
 8004ece:	440b      	add	r3, r1
 8004ed0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8004ed4:	b199      	cbz	r1, 8004efe <__mdiff+0x11a>
 8004ed6:	6117      	str	r7, [r2, #16]
 8004ed8:	e79e      	b.n	8004e18 <__mdiff+0x34>
 8004eda:	46e6      	mov	lr, ip
 8004edc:	f854 1b04 	ldr.w	r1, [r4], #4
 8004ee0:	fa1f fc81 	uxth.w	ip, r1
 8004ee4:	44f4      	add	ip, lr
 8004ee6:	0c08      	lsrs	r0, r1, #16
 8004ee8:	4471      	add	r1, lr
 8004eea:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8004eee:	b289      	uxth	r1, r1
 8004ef0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8004ef4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8004ef8:	f846 1b04 	str.w	r1, [r6], #4
 8004efc:	e7dc      	b.n	8004eb8 <__mdiff+0xd4>
 8004efe:	3f01      	subs	r7, #1
 8004f00:	e7e6      	b.n	8004ed0 <__mdiff+0xec>
 8004f02:	bf00      	nop
 8004f04:	0800585e 	.word	0x0800585e
 8004f08:	0800586f 	.word	0x0800586f

08004f0c <__d2b>:
 8004f0c:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8004f10:	2101      	movs	r1, #1
 8004f12:	4690      	mov	r8, r2
 8004f14:	4699      	mov	r9, r3
 8004f16:	9e08      	ldr	r6, [sp, #32]
 8004f18:	f7ff fcd0 	bl	80048bc <_Balloc>
 8004f1c:	4604      	mov	r4, r0
 8004f1e:	b930      	cbnz	r0, 8004f2e <__d2b+0x22>
 8004f20:	4602      	mov	r2, r0
 8004f22:	f240 310f 	movw	r1, #783	@ 0x30f
 8004f26:	4b23      	ldr	r3, [pc, #140]	@ (8004fb4 <__d2b+0xa8>)
 8004f28:	4823      	ldr	r0, [pc, #140]	@ (8004fb8 <__d2b+0xac>)
 8004f2a:	f000 f90d 	bl	8005148 <__assert_func>
 8004f2e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8004f32:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004f36:	b10d      	cbz	r5, 8004f3c <__d2b+0x30>
 8004f38:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004f3c:	9301      	str	r3, [sp, #4]
 8004f3e:	f1b8 0300 	subs.w	r3, r8, #0
 8004f42:	d024      	beq.n	8004f8e <__d2b+0x82>
 8004f44:	4668      	mov	r0, sp
 8004f46:	9300      	str	r3, [sp, #0]
 8004f48:	f7ff fd7f 	bl	8004a4a <__lo0bits>
 8004f4c:	e9dd 1200 	ldrd	r1, r2, [sp]
 8004f50:	b1d8      	cbz	r0, 8004f8a <__d2b+0x7e>
 8004f52:	f1c0 0320 	rsb	r3, r0, #32
 8004f56:	fa02 f303 	lsl.w	r3, r2, r3
 8004f5a:	430b      	orrs	r3, r1
 8004f5c:	40c2      	lsrs	r2, r0
 8004f5e:	6163      	str	r3, [r4, #20]
 8004f60:	9201      	str	r2, [sp, #4]
 8004f62:	9b01      	ldr	r3, [sp, #4]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	bf0c      	ite	eq
 8004f68:	2201      	moveq	r2, #1
 8004f6a:	2202      	movne	r2, #2
 8004f6c:	61a3      	str	r3, [r4, #24]
 8004f6e:	6122      	str	r2, [r4, #16]
 8004f70:	b1ad      	cbz	r5, 8004f9e <__d2b+0x92>
 8004f72:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8004f76:	4405      	add	r5, r0
 8004f78:	6035      	str	r5, [r6, #0]
 8004f7a:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8004f7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004f80:	6018      	str	r0, [r3, #0]
 8004f82:	4620      	mov	r0, r4
 8004f84:	b002      	add	sp, #8
 8004f86:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8004f8a:	6161      	str	r1, [r4, #20]
 8004f8c:	e7e9      	b.n	8004f62 <__d2b+0x56>
 8004f8e:	a801      	add	r0, sp, #4
 8004f90:	f7ff fd5b 	bl	8004a4a <__lo0bits>
 8004f94:	9b01      	ldr	r3, [sp, #4]
 8004f96:	2201      	movs	r2, #1
 8004f98:	6163      	str	r3, [r4, #20]
 8004f9a:	3020      	adds	r0, #32
 8004f9c:	e7e7      	b.n	8004f6e <__d2b+0x62>
 8004f9e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8004fa2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8004fa6:	6030      	str	r0, [r6, #0]
 8004fa8:	6918      	ldr	r0, [r3, #16]
 8004faa:	f7ff fd2f 	bl	8004a0c <__hi0bits>
 8004fae:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8004fb2:	e7e4      	b.n	8004f7e <__d2b+0x72>
 8004fb4:	0800585e 	.word	0x0800585e
 8004fb8:	0800586f 	.word	0x0800586f

08004fbc <__sflush_r>:
 8004fbc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004fc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fc2:	0716      	lsls	r6, r2, #28
 8004fc4:	4605      	mov	r5, r0
 8004fc6:	460c      	mov	r4, r1
 8004fc8:	d454      	bmi.n	8005074 <__sflush_r+0xb8>
 8004fca:	684b      	ldr	r3, [r1, #4]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	dc02      	bgt.n	8004fd6 <__sflush_r+0x1a>
 8004fd0:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	dd48      	ble.n	8005068 <__sflush_r+0xac>
 8004fd6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004fd8:	2e00      	cmp	r6, #0
 8004fda:	d045      	beq.n	8005068 <__sflush_r+0xac>
 8004fdc:	2300      	movs	r3, #0
 8004fde:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004fe2:	682f      	ldr	r7, [r5, #0]
 8004fe4:	6a21      	ldr	r1, [r4, #32]
 8004fe6:	602b      	str	r3, [r5, #0]
 8004fe8:	d030      	beq.n	800504c <__sflush_r+0x90>
 8004fea:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004fec:	89a3      	ldrh	r3, [r4, #12]
 8004fee:	0759      	lsls	r1, r3, #29
 8004ff0:	d505      	bpl.n	8004ffe <__sflush_r+0x42>
 8004ff2:	6863      	ldr	r3, [r4, #4]
 8004ff4:	1ad2      	subs	r2, r2, r3
 8004ff6:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004ff8:	b10b      	cbz	r3, 8004ffe <__sflush_r+0x42>
 8004ffa:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004ffc:	1ad2      	subs	r2, r2, r3
 8004ffe:	2300      	movs	r3, #0
 8005000:	4628      	mov	r0, r5
 8005002:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005004:	6a21      	ldr	r1, [r4, #32]
 8005006:	47b0      	blx	r6
 8005008:	1c43      	adds	r3, r0, #1
 800500a:	89a3      	ldrh	r3, [r4, #12]
 800500c:	d106      	bne.n	800501c <__sflush_r+0x60>
 800500e:	6829      	ldr	r1, [r5, #0]
 8005010:	291d      	cmp	r1, #29
 8005012:	d82b      	bhi.n	800506c <__sflush_r+0xb0>
 8005014:	4a28      	ldr	r2, [pc, #160]	@ (80050b8 <__sflush_r+0xfc>)
 8005016:	410a      	asrs	r2, r1
 8005018:	07d6      	lsls	r6, r2, #31
 800501a:	d427      	bmi.n	800506c <__sflush_r+0xb0>
 800501c:	2200      	movs	r2, #0
 800501e:	6062      	str	r2, [r4, #4]
 8005020:	6922      	ldr	r2, [r4, #16]
 8005022:	04d9      	lsls	r1, r3, #19
 8005024:	6022      	str	r2, [r4, #0]
 8005026:	d504      	bpl.n	8005032 <__sflush_r+0x76>
 8005028:	1c42      	adds	r2, r0, #1
 800502a:	d101      	bne.n	8005030 <__sflush_r+0x74>
 800502c:	682b      	ldr	r3, [r5, #0]
 800502e:	b903      	cbnz	r3, 8005032 <__sflush_r+0x76>
 8005030:	6560      	str	r0, [r4, #84]	@ 0x54
 8005032:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005034:	602f      	str	r7, [r5, #0]
 8005036:	b1b9      	cbz	r1, 8005068 <__sflush_r+0xac>
 8005038:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800503c:	4299      	cmp	r1, r3
 800503e:	d002      	beq.n	8005046 <__sflush_r+0x8a>
 8005040:	4628      	mov	r0, r5
 8005042:	f7ff fb3d 	bl	80046c0 <_free_r>
 8005046:	2300      	movs	r3, #0
 8005048:	6363      	str	r3, [r4, #52]	@ 0x34
 800504a:	e00d      	b.n	8005068 <__sflush_r+0xac>
 800504c:	2301      	movs	r3, #1
 800504e:	4628      	mov	r0, r5
 8005050:	47b0      	blx	r6
 8005052:	4602      	mov	r2, r0
 8005054:	1c50      	adds	r0, r2, #1
 8005056:	d1c9      	bne.n	8004fec <__sflush_r+0x30>
 8005058:	682b      	ldr	r3, [r5, #0]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d0c6      	beq.n	8004fec <__sflush_r+0x30>
 800505e:	2b1d      	cmp	r3, #29
 8005060:	d001      	beq.n	8005066 <__sflush_r+0xaa>
 8005062:	2b16      	cmp	r3, #22
 8005064:	d11d      	bne.n	80050a2 <__sflush_r+0xe6>
 8005066:	602f      	str	r7, [r5, #0]
 8005068:	2000      	movs	r0, #0
 800506a:	e021      	b.n	80050b0 <__sflush_r+0xf4>
 800506c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005070:	b21b      	sxth	r3, r3
 8005072:	e01a      	b.n	80050aa <__sflush_r+0xee>
 8005074:	690f      	ldr	r7, [r1, #16]
 8005076:	2f00      	cmp	r7, #0
 8005078:	d0f6      	beq.n	8005068 <__sflush_r+0xac>
 800507a:	0793      	lsls	r3, r2, #30
 800507c:	bf18      	it	ne
 800507e:	2300      	movne	r3, #0
 8005080:	680e      	ldr	r6, [r1, #0]
 8005082:	bf08      	it	eq
 8005084:	694b      	ldreq	r3, [r1, #20]
 8005086:	1bf6      	subs	r6, r6, r7
 8005088:	600f      	str	r7, [r1, #0]
 800508a:	608b      	str	r3, [r1, #8]
 800508c:	2e00      	cmp	r6, #0
 800508e:	ddeb      	ble.n	8005068 <__sflush_r+0xac>
 8005090:	4633      	mov	r3, r6
 8005092:	463a      	mov	r2, r7
 8005094:	4628      	mov	r0, r5
 8005096:	6a21      	ldr	r1, [r4, #32]
 8005098:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800509c:	47e0      	blx	ip
 800509e:	2800      	cmp	r0, #0
 80050a0:	dc07      	bgt.n	80050b2 <__sflush_r+0xf6>
 80050a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80050a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80050aa:	f04f 30ff 	mov.w	r0, #4294967295
 80050ae:	81a3      	strh	r3, [r4, #12]
 80050b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80050b2:	4407      	add	r7, r0
 80050b4:	1a36      	subs	r6, r6, r0
 80050b6:	e7e9      	b.n	800508c <__sflush_r+0xd0>
 80050b8:	dfbffffe 	.word	0xdfbffffe

080050bc <_fflush_r>:
 80050bc:	b538      	push	{r3, r4, r5, lr}
 80050be:	690b      	ldr	r3, [r1, #16]
 80050c0:	4605      	mov	r5, r0
 80050c2:	460c      	mov	r4, r1
 80050c4:	b913      	cbnz	r3, 80050cc <_fflush_r+0x10>
 80050c6:	2500      	movs	r5, #0
 80050c8:	4628      	mov	r0, r5
 80050ca:	bd38      	pop	{r3, r4, r5, pc}
 80050cc:	b118      	cbz	r0, 80050d6 <_fflush_r+0x1a>
 80050ce:	6a03      	ldr	r3, [r0, #32]
 80050d0:	b90b      	cbnz	r3, 80050d6 <_fflush_r+0x1a>
 80050d2:	f7fe fb9b 	bl	800380c <__sinit>
 80050d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d0f3      	beq.n	80050c6 <_fflush_r+0xa>
 80050de:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80050e0:	07d0      	lsls	r0, r2, #31
 80050e2:	d404      	bmi.n	80050ee <_fflush_r+0x32>
 80050e4:	0599      	lsls	r1, r3, #22
 80050e6:	d402      	bmi.n	80050ee <_fflush_r+0x32>
 80050e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80050ea:	f7fe fc86 	bl	80039fa <__retarget_lock_acquire_recursive>
 80050ee:	4628      	mov	r0, r5
 80050f0:	4621      	mov	r1, r4
 80050f2:	f7ff ff63 	bl	8004fbc <__sflush_r>
 80050f6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80050f8:	4605      	mov	r5, r0
 80050fa:	07da      	lsls	r2, r3, #31
 80050fc:	d4e4      	bmi.n	80050c8 <_fflush_r+0xc>
 80050fe:	89a3      	ldrh	r3, [r4, #12]
 8005100:	059b      	lsls	r3, r3, #22
 8005102:	d4e1      	bmi.n	80050c8 <_fflush_r+0xc>
 8005104:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005106:	f7fe fc79 	bl	80039fc <__retarget_lock_release_recursive>
 800510a:	e7dd      	b.n	80050c8 <_fflush_r+0xc>

0800510c <_sbrk_r>:
 800510c:	b538      	push	{r3, r4, r5, lr}
 800510e:	2300      	movs	r3, #0
 8005110:	4d05      	ldr	r5, [pc, #20]	@ (8005128 <_sbrk_r+0x1c>)
 8005112:	4604      	mov	r4, r0
 8005114:	4608      	mov	r0, r1
 8005116:	602b      	str	r3, [r5, #0]
 8005118:	f7fc f9b8 	bl	800148c <_sbrk>
 800511c:	1c43      	adds	r3, r0, #1
 800511e:	d102      	bne.n	8005126 <_sbrk_r+0x1a>
 8005120:	682b      	ldr	r3, [r5, #0]
 8005122:	b103      	cbz	r3, 8005126 <_sbrk_r+0x1a>
 8005124:	6023      	str	r3, [r4, #0]
 8005126:	bd38      	pop	{r3, r4, r5, pc}
 8005128:	20000364 	.word	0x20000364

0800512c <memcpy>:
 800512c:	440a      	add	r2, r1
 800512e:	4291      	cmp	r1, r2
 8005130:	f100 33ff 	add.w	r3, r0, #4294967295
 8005134:	d100      	bne.n	8005138 <memcpy+0xc>
 8005136:	4770      	bx	lr
 8005138:	b510      	push	{r4, lr}
 800513a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800513e:	4291      	cmp	r1, r2
 8005140:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005144:	d1f9      	bne.n	800513a <memcpy+0xe>
 8005146:	bd10      	pop	{r4, pc}

08005148 <__assert_func>:
 8005148:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800514a:	4614      	mov	r4, r2
 800514c:	461a      	mov	r2, r3
 800514e:	4b09      	ldr	r3, [pc, #36]	@ (8005174 <__assert_func+0x2c>)
 8005150:	4605      	mov	r5, r0
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	68d8      	ldr	r0, [r3, #12]
 8005156:	b954      	cbnz	r4, 800516e <__assert_func+0x26>
 8005158:	4b07      	ldr	r3, [pc, #28]	@ (8005178 <__assert_func+0x30>)
 800515a:	461c      	mov	r4, r3
 800515c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005160:	9100      	str	r1, [sp, #0]
 8005162:	462b      	mov	r3, r5
 8005164:	4905      	ldr	r1, [pc, #20]	@ (800517c <__assert_func+0x34>)
 8005166:	f000 f841 	bl	80051ec <fiprintf>
 800516a:	f000 f851 	bl	8005210 <abort>
 800516e:	4b04      	ldr	r3, [pc, #16]	@ (8005180 <__assert_func+0x38>)
 8005170:	e7f4      	b.n	800515c <__assert_func+0x14>
 8005172:	bf00      	nop
 8005174:	20000018 	.word	0x20000018
 8005178:	08005a0d 	.word	0x08005a0d
 800517c:	080059df 	.word	0x080059df
 8005180:	080059d2 	.word	0x080059d2

08005184 <_calloc_r>:
 8005184:	b570      	push	{r4, r5, r6, lr}
 8005186:	fba1 5402 	umull	r5, r4, r1, r2
 800518a:	b93c      	cbnz	r4, 800519c <_calloc_r+0x18>
 800518c:	4629      	mov	r1, r5
 800518e:	f7ff fb09 	bl	80047a4 <_malloc_r>
 8005192:	4606      	mov	r6, r0
 8005194:	b928      	cbnz	r0, 80051a2 <_calloc_r+0x1e>
 8005196:	2600      	movs	r6, #0
 8005198:	4630      	mov	r0, r6
 800519a:	bd70      	pop	{r4, r5, r6, pc}
 800519c:	220c      	movs	r2, #12
 800519e:	6002      	str	r2, [r0, #0]
 80051a0:	e7f9      	b.n	8005196 <_calloc_r+0x12>
 80051a2:	462a      	mov	r2, r5
 80051a4:	4621      	mov	r1, r4
 80051a6:	f7fe fbaa 	bl	80038fe <memset>
 80051aa:	e7f5      	b.n	8005198 <_calloc_r+0x14>

080051ac <__ascii_mbtowc>:
 80051ac:	b082      	sub	sp, #8
 80051ae:	b901      	cbnz	r1, 80051b2 <__ascii_mbtowc+0x6>
 80051b0:	a901      	add	r1, sp, #4
 80051b2:	b142      	cbz	r2, 80051c6 <__ascii_mbtowc+0x1a>
 80051b4:	b14b      	cbz	r3, 80051ca <__ascii_mbtowc+0x1e>
 80051b6:	7813      	ldrb	r3, [r2, #0]
 80051b8:	600b      	str	r3, [r1, #0]
 80051ba:	7812      	ldrb	r2, [r2, #0]
 80051bc:	1e10      	subs	r0, r2, #0
 80051be:	bf18      	it	ne
 80051c0:	2001      	movne	r0, #1
 80051c2:	b002      	add	sp, #8
 80051c4:	4770      	bx	lr
 80051c6:	4610      	mov	r0, r2
 80051c8:	e7fb      	b.n	80051c2 <__ascii_mbtowc+0x16>
 80051ca:	f06f 0001 	mvn.w	r0, #1
 80051ce:	e7f8      	b.n	80051c2 <__ascii_mbtowc+0x16>

080051d0 <__ascii_wctomb>:
 80051d0:	4603      	mov	r3, r0
 80051d2:	4608      	mov	r0, r1
 80051d4:	b141      	cbz	r1, 80051e8 <__ascii_wctomb+0x18>
 80051d6:	2aff      	cmp	r2, #255	@ 0xff
 80051d8:	d904      	bls.n	80051e4 <__ascii_wctomb+0x14>
 80051da:	228a      	movs	r2, #138	@ 0x8a
 80051dc:	f04f 30ff 	mov.w	r0, #4294967295
 80051e0:	601a      	str	r2, [r3, #0]
 80051e2:	4770      	bx	lr
 80051e4:	2001      	movs	r0, #1
 80051e6:	700a      	strb	r2, [r1, #0]
 80051e8:	4770      	bx	lr
	...

080051ec <fiprintf>:
 80051ec:	b40e      	push	{r1, r2, r3}
 80051ee:	b503      	push	{r0, r1, lr}
 80051f0:	4601      	mov	r1, r0
 80051f2:	ab03      	add	r3, sp, #12
 80051f4:	4805      	ldr	r0, [pc, #20]	@ (800520c <fiprintf+0x20>)
 80051f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80051fa:	6800      	ldr	r0, [r0, #0]
 80051fc:	9301      	str	r3, [sp, #4]
 80051fe:	f000 f835 	bl	800526c <_vfiprintf_r>
 8005202:	b002      	add	sp, #8
 8005204:	f85d eb04 	ldr.w	lr, [sp], #4
 8005208:	b003      	add	sp, #12
 800520a:	4770      	bx	lr
 800520c:	20000018 	.word	0x20000018

08005210 <abort>:
 8005210:	2006      	movs	r0, #6
 8005212:	b508      	push	{r3, lr}
 8005214:	f000 f9fe 	bl	8005614 <raise>
 8005218:	2001      	movs	r0, #1
 800521a:	f7fc f8c2 	bl	80013a2 <_exit>

0800521e <__sfputc_r>:
 800521e:	6893      	ldr	r3, [r2, #8]
 8005220:	b410      	push	{r4}
 8005222:	3b01      	subs	r3, #1
 8005224:	2b00      	cmp	r3, #0
 8005226:	6093      	str	r3, [r2, #8]
 8005228:	da07      	bge.n	800523a <__sfputc_r+0x1c>
 800522a:	6994      	ldr	r4, [r2, #24]
 800522c:	42a3      	cmp	r3, r4
 800522e:	db01      	blt.n	8005234 <__sfputc_r+0x16>
 8005230:	290a      	cmp	r1, #10
 8005232:	d102      	bne.n	800523a <__sfputc_r+0x1c>
 8005234:	bc10      	pop	{r4}
 8005236:	f000 b931 	b.w	800549c <__swbuf_r>
 800523a:	6813      	ldr	r3, [r2, #0]
 800523c:	1c58      	adds	r0, r3, #1
 800523e:	6010      	str	r0, [r2, #0]
 8005240:	7019      	strb	r1, [r3, #0]
 8005242:	4608      	mov	r0, r1
 8005244:	bc10      	pop	{r4}
 8005246:	4770      	bx	lr

08005248 <__sfputs_r>:
 8005248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800524a:	4606      	mov	r6, r0
 800524c:	460f      	mov	r7, r1
 800524e:	4614      	mov	r4, r2
 8005250:	18d5      	adds	r5, r2, r3
 8005252:	42ac      	cmp	r4, r5
 8005254:	d101      	bne.n	800525a <__sfputs_r+0x12>
 8005256:	2000      	movs	r0, #0
 8005258:	e007      	b.n	800526a <__sfputs_r+0x22>
 800525a:	463a      	mov	r2, r7
 800525c:	4630      	mov	r0, r6
 800525e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005262:	f7ff ffdc 	bl	800521e <__sfputc_r>
 8005266:	1c43      	adds	r3, r0, #1
 8005268:	d1f3      	bne.n	8005252 <__sfputs_r+0xa>
 800526a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800526c <_vfiprintf_r>:
 800526c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005270:	460d      	mov	r5, r1
 8005272:	4614      	mov	r4, r2
 8005274:	4698      	mov	r8, r3
 8005276:	4606      	mov	r6, r0
 8005278:	b09d      	sub	sp, #116	@ 0x74
 800527a:	b118      	cbz	r0, 8005284 <_vfiprintf_r+0x18>
 800527c:	6a03      	ldr	r3, [r0, #32]
 800527e:	b90b      	cbnz	r3, 8005284 <_vfiprintf_r+0x18>
 8005280:	f7fe fac4 	bl	800380c <__sinit>
 8005284:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005286:	07d9      	lsls	r1, r3, #31
 8005288:	d405      	bmi.n	8005296 <_vfiprintf_r+0x2a>
 800528a:	89ab      	ldrh	r3, [r5, #12]
 800528c:	059a      	lsls	r2, r3, #22
 800528e:	d402      	bmi.n	8005296 <_vfiprintf_r+0x2a>
 8005290:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005292:	f7fe fbb2 	bl	80039fa <__retarget_lock_acquire_recursive>
 8005296:	89ab      	ldrh	r3, [r5, #12]
 8005298:	071b      	lsls	r3, r3, #28
 800529a:	d501      	bpl.n	80052a0 <_vfiprintf_r+0x34>
 800529c:	692b      	ldr	r3, [r5, #16]
 800529e:	b99b      	cbnz	r3, 80052c8 <_vfiprintf_r+0x5c>
 80052a0:	4629      	mov	r1, r5
 80052a2:	4630      	mov	r0, r6
 80052a4:	f000 f938 	bl	8005518 <__swsetup_r>
 80052a8:	b170      	cbz	r0, 80052c8 <_vfiprintf_r+0x5c>
 80052aa:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80052ac:	07dc      	lsls	r4, r3, #31
 80052ae:	d504      	bpl.n	80052ba <_vfiprintf_r+0x4e>
 80052b0:	f04f 30ff 	mov.w	r0, #4294967295
 80052b4:	b01d      	add	sp, #116	@ 0x74
 80052b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052ba:	89ab      	ldrh	r3, [r5, #12]
 80052bc:	0598      	lsls	r0, r3, #22
 80052be:	d4f7      	bmi.n	80052b0 <_vfiprintf_r+0x44>
 80052c0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80052c2:	f7fe fb9b 	bl	80039fc <__retarget_lock_release_recursive>
 80052c6:	e7f3      	b.n	80052b0 <_vfiprintf_r+0x44>
 80052c8:	2300      	movs	r3, #0
 80052ca:	9309      	str	r3, [sp, #36]	@ 0x24
 80052cc:	2320      	movs	r3, #32
 80052ce:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80052d2:	2330      	movs	r3, #48	@ 0x30
 80052d4:	f04f 0901 	mov.w	r9, #1
 80052d8:	f8cd 800c 	str.w	r8, [sp, #12]
 80052dc:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8005488 <_vfiprintf_r+0x21c>
 80052e0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80052e4:	4623      	mov	r3, r4
 80052e6:	469a      	mov	sl, r3
 80052e8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80052ec:	b10a      	cbz	r2, 80052f2 <_vfiprintf_r+0x86>
 80052ee:	2a25      	cmp	r2, #37	@ 0x25
 80052f0:	d1f9      	bne.n	80052e6 <_vfiprintf_r+0x7a>
 80052f2:	ebba 0b04 	subs.w	fp, sl, r4
 80052f6:	d00b      	beq.n	8005310 <_vfiprintf_r+0xa4>
 80052f8:	465b      	mov	r3, fp
 80052fa:	4622      	mov	r2, r4
 80052fc:	4629      	mov	r1, r5
 80052fe:	4630      	mov	r0, r6
 8005300:	f7ff ffa2 	bl	8005248 <__sfputs_r>
 8005304:	3001      	adds	r0, #1
 8005306:	f000 80a7 	beq.w	8005458 <_vfiprintf_r+0x1ec>
 800530a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800530c:	445a      	add	r2, fp
 800530e:	9209      	str	r2, [sp, #36]	@ 0x24
 8005310:	f89a 3000 	ldrb.w	r3, [sl]
 8005314:	2b00      	cmp	r3, #0
 8005316:	f000 809f 	beq.w	8005458 <_vfiprintf_r+0x1ec>
 800531a:	2300      	movs	r3, #0
 800531c:	f04f 32ff 	mov.w	r2, #4294967295
 8005320:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005324:	f10a 0a01 	add.w	sl, sl, #1
 8005328:	9304      	str	r3, [sp, #16]
 800532a:	9307      	str	r3, [sp, #28]
 800532c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005330:	931a      	str	r3, [sp, #104]	@ 0x68
 8005332:	4654      	mov	r4, sl
 8005334:	2205      	movs	r2, #5
 8005336:	f814 1b01 	ldrb.w	r1, [r4], #1
 800533a:	4853      	ldr	r0, [pc, #332]	@ (8005488 <_vfiprintf_r+0x21c>)
 800533c:	f7fe fb5f 	bl	80039fe <memchr>
 8005340:	9a04      	ldr	r2, [sp, #16]
 8005342:	b9d8      	cbnz	r0, 800537c <_vfiprintf_r+0x110>
 8005344:	06d1      	lsls	r1, r2, #27
 8005346:	bf44      	itt	mi
 8005348:	2320      	movmi	r3, #32
 800534a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800534e:	0713      	lsls	r3, r2, #28
 8005350:	bf44      	itt	mi
 8005352:	232b      	movmi	r3, #43	@ 0x2b
 8005354:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005358:	f89a 3000 	ldrb.w	r3, [sl]
 800535c:	2b2a      	cmp	r3, #42	@ 0x2a
 800535e:	d015      	beq.n	800538c <_vfiprintf_r+0x120>
 8005360:	4654      	mov	r4, sl
 8005362:	2000      	movs	r0, #0
 8005364:	f04f 0c0a 	mov.w	ip, #10
 8005368:	9a07      	ldr	r2, [sp, #28]
 800536a:	4621      	mov	r1, r4
 800536c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005370:	3b30      	subs	r3, #48	@ 0x30
 8005372:	2b09      	cmp	r3, #9
 8005374:	d94b      	bls.n	800540e <_vfiprintf_r+0x1a2>
 8005376:	b1b0      	cbz	r0, 80053a6 <_vfiprintf_r+0x13a>
 8005378:	9207      	str	r2, [sp, #28]
 800537a:	e014      	b.n	80053a6 <_vfiprintf_r+0x13a>
 800537c:	eba0 0308 	sub.w	r3, r0, r8
 8005380:	fa09 f303 	lsl.w	r3, r9, r3
 8005384:	4313      	orrs	r3, r2
 8005386:	46a2      	mov	sl, r4
 8005388:	9304      	str	r3, [sp, #16]
 800538a:	e7d2      	b.n	8005332 <_vfiprintf_r+0xc6>
 800538c:	9b03      	ldr	r3, [sp, #12]
 800538e:	1d19      	adds	r1, r3, #4
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	9103      	str	r1, [sp, #12]
 8005394:	2b00      	cmp	r3, #0
 8005396:	bfbb      	ittet	lt
 8005398:	425b      	neglt	r3, r3
 800539a:	f042 0202 	orrlt.w	r2, r2, #2
 800539e:	9307      	strge	r3, [sp, #28]
 80053a0:	9307      	strlt	r3, [sp, #28]
 80053a2:	bfb8      	it	lt
 80053a4:	9204      	strlt	r2, [sp, #16]
 80053a6:	7823      	ldrb	r3, [r4, #0]
 80053a8:	2b2e      	cmp	r3, #46	@ 0x2e
 80053aa:	d10a      	bne.n	80053c2 <_vfiprintf_r+0x156>
 80053ac:	7863      	ldrb	r3, [r4, #1]
 80053ae:	2b2a      	cmp	r3, #42	@ 0x2a
 80053b0:	d132      	bne.n	8005418 <_vfiprintf_r+0x1ac>
 80053b2:	9b03      	ldr	r3, [sp, #12]
 80053b4:	3402      	adds	r4, #2
 80053b6:	1d1a      	adds	r2, r3, #4
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	9203      	str	r2, [sp, #12]
 80053bc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80053c0:	9305      	str	r3, [sp, #20]
 80053c2:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800548c <_vfiprintf_r+0x220>
 80053c6:	2203      	movs	r2, #3
 80053c8:	4650      	mov	r0, sl
 80053ca:	7821      	ldrb	r1, [r4, #0]
 80053cc:	f7fe fb17 	bl	80039fe <memchr>
 80053d0:	b138      	cbz	r0, 80053e2 <_vfiprintf_r+0x176>
 80053d2:	2240      	movs	r2, #64	@ 0x40
 80053d4:	9b04      	ldr	r3, [sp, #16]
 80053d6:	eba0 000a 	sub.w	r0, r0, sl
 80053da:	4082      	lsls	r2, r0
 80053dc:	4313      	orrs	r3, r2
 80053de:	3401      	adds	r4, #1
 80053e0:	9304      	str	r3, [sp, #16]
 80053e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80053e6:	2206      	movs	r2, #6
 80053e8:	4829      	ldr	r0, [pc, #164]	@ (8005490 <_vfiprintf_r+0x224>)
 80053ea:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80053ee:	f7fe fb06 	bl	80039fe <memchr>
 80053f2:	2800      	cmp	r0, #0
 80053f4:	d03f      	beq.n	8005476 <_vfiprintf_r+0x20a>
 80053f6:	4b27      	ldr	r3, [pc, #156]	@ (8005494 <_vfiprintf_r+0x228>)
 80053f8:	bb1b      	cbnz	r3, 8005442 <_vfiprintf_r+0x1d6>
 80053fa:	9b03      	ldr	r3, [sp, #12]
 80053fc:	3307      	adds	r3, #7
 80053fe:	f023 0307 	bic.w	r3, r3, #7
 8005402:	3308      	adds	r3, #8
 8005404:	9303      	str	r3, [sp, #12]
 8005406:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005408:	443b      	add	r3, r7
 800540a:	9309      	str	r3, [sp, #36]	@ 0x24
 800540c:	e76a      	b.n	80052e4 <_vfiprintf_r+0x78>
 800540e:	460c      	mov	r4, r1
 8005410:	2001      	movs	r0, #1
 8005412:	fb0c 3202 	mla	r2, ip, r2, r3
 8005416:	e7a8      	b.n	800536a <_vfiprintf_r+0xfe>
 8005418:	2300      	movs	r3, #0
 800541a:	f04f 0c0a 	mov.w	ip, #10
 800541e:	4619      	mov	r1, r3
 8005420:	3401      	adds	r4, #1
 8005422:	9305      	str	r3, [sp, #20]
 8005424:	4620      	mov	r0, r4
 8005426:	f810 2b01 	ldrb.w	r2, [r0], #1
 800542a:	3a30      	subs	r2, #48	@ 0x30
 800542c:	2a09      	cmp	r2, #9
 800542e:	d903      	bls.n	8005438 <_vfiprintf_r+0x1cc>
 8005430:	2b00      	cmp	r3, #0
 8005432:	d0c6      	beq.n	80053c2 <_vfiprintf_r+0x156>
 8005434:	9105      	str	r1, [sp, #20]
 8005436:	e7c4      	b.n	80053c2 <_vfiprintf_r+0x156>
 8005438:	4604      	mov	r4, r0
 800543a:	2301      	movs	r3, #1
 800543c:	fb0c 2101 	mla	r1, ip, r1, r2
 8005440:	e7f0      	b.n	8005424 <_vfiprintf_r+0x1b8>
 8005442:	ab03      	add	r3, sp, #12
 8005444:	9300      	str	r3, [sp, #0]
 8005446:	462a      	mov	r2, r5
 8005448:	4630      	mov	r0, r6
 800544a:	4b13      	ldr	r3, [pc, #76]	@ (8005498 <_vfiprintf_r+0x22c>)
 800544c:	a904      	add	r1, sp, #16
 800544e:	f7fd fd93 	bl	8002f78 <_printf_float>
 8005452:	4607      	mov	r7, r0
 8005454:	1c78      	adds	r0, r7, #1
 8005456:	d1d6      	bne.n	8005406 <_vfiprintf_r+0x19a>
 8005458:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800545a:	07d9      	lsls	r1, r3, #31
 800545c:	d405      	bmi.n	800546a <_vfiprintf_r+0x1fe>
 800545e:	89ab      	ldrh	r3, [r5, #12]
 8005460:	059a      	lsls	r2, r3, #22
 8005462:	d402      	bmi.n	800546a <_vfiprintf_r+0x1fe>
 8005464:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005466:	f7fe fac9 	bl	80039fc <__retarget_lock_release_recursive>
 800546a:	89ab      	ldrh	r3, [r5, #12]
 800546c:	065b      	lsls	r3, r3, #25
 800546e:	f53f af1f 	bmi.w	80052b0 <_vfiprintf_r+0x44>
 8005472:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005474:	e71e      	b.n	80052b4 <_vfiprintf_r+0x48>
 8005476:	ab03      	add	r3, sp, #12
 8005478:	9300      	str	r3, [sp, #0]
 800547a:	462a      	mov	r2, r5
 800547c:	4630      	mov	r0, r6
 800547e:	4b06      	ldr	r3, [pc, #24]	@ (8005498 <_vfiprintf_r+0x22c>)
 8005480:	a904      	add	r1, sp, #16
 8005482:	f7fe f817 	bl	80034b4 <_printf_i>
 8005486:	e7e4      	b.n	8005452 <_vfiprintf_r+0x1e6>
 8005488:	08005b0f 	.word	0x08005b0f
 800548c:	08005b15 	.word	0x08005b15
 8005490:	08005b19 	.word	0x08005b19
 8005494:	08002f79 	.word	0x08002f79
 8005498:	08005249 	.word	0x08005249

0800549c <__swbuf_r>:
 800549c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800549e:	460e      	mov	r6, r1
 80054a0:	4614      	mov	r4, r2
 80054a2:	4605      	mov	r5, r0
 80054a4:	b118      	cbz	r0, 80054ae <__swbuf_r+0x12>
 80054a6:	6a03      	ldr	r3, [r0, #32]
 80054a8:	b90b      	cbnz	r3, 80054ae <__swbuf_r+0x12>
 80054aa:	f7fe f9af 	bl	800380c <__sinit>
 80054ae:	69a3      	ldr	r3, [r4, #24]
 80054b0:	60a3      	str	r3, [r4, #8]
 80054b2:	89a3      	ldrh	r3, [r4, #12]
 80054b4:	071a      	lsls	r2, r3, #28
 80054b6:	d501      	bpl.n	80054bc <__swbuf_r+0x20>
 80054b8:	6923      	ldr	r3, [r4, #16]
 80054ba:	b943      	cbnz	r3, 80054ce <__swbuf_r+0x32>
 80054bc:	4621      	mov	r1, r4
 80054be:	4628      	mov	r0, r5
 80054c0:	f000 f82a 	bl	8005518 <__swsetup_r>
 80054c4:	b118      	cbz	r0, 80054ce <__swbuf_r+0x32>
 80054c6:	f04f 37ff 	mov.w	r7, #4294967295
 80054ca:	4638      	mov	r0, r7
 80054cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80054ce:	6823      	ldr	r3, [r4, #0]
 80054d0:	6922      	ldr	r2, [r4, #16]
 80054d2:	b2f6      	uxtb	r6, r6
 80054d4:	1a98      	subs	r0, r3, r2
 80054d6:	6963      	ldr	r3, [r4, #20]
 80054d8:	4637      	mov	r7, r6
 80054da:	4283      	cmp	r3, r0
 80054dc:	dc05      	bgt.n	80054ea <__swbuf_r+0x4e>
 80054de:	4621      	mov	r1, r4
 80054e0:	4628      	mov	r0, r5
 80054e2:	f7ff fdeb 	bl	80050bc <_fflush_r>
 80054e6:	2800      	cmp	r0, #0
 80054e8:	d1ed      	bne.n	80054c6 <__swbuf_r+0x2a>
 80054ea:	68a3      	ldr	r3, [r4, #8]
 80054ec:	3b01      	subs	r3, #1
 80054ee:	60a3      	str	r3, [r4, #8]
 80054f0:	6823      	ldr	r3, [r4, #0]
 80054f2:	1c5a      	adds	r2, r3, #1
 80054f4:	6022      	str	r2, [r4, #0]
 80054f6:	701e      	strb	r6, [r3, #0]
 80054f8:	6962      	ldr	r2, [r4, #20]
 80054fa:	1c43      	adds	r3, r0, #1
 80054fc:	429a      	cmp	r2, r3
 80054fe:	d004      	beq.n	800550a <__swbuf_r+0x6e>
 8005500:	89a3      	ldrh	r3, [r4, #12]
 8005502:	07db      	lsls	r3, r3, #31
 8005504:	d5e1      	bpl.n	80054ca <__swbuf_r+0x2e>
 8005506:	2e0a      	cmp	r6, #10
 8005508:	d1df      	bne.n	80054ca <__swbuf_r+0x2e>
 800550a:	4621      	mov	r1, r4
 800550c:	4628      	mov	r0, r5
 800550e:	f7ff fdd5 	bl	80050bc <_fflush_r>
 8005512:	2800      	cmp	r0, #0
 8005514:	d0d9      	beq.n	80054ca <__swbuf_r+0x2e>
 8005516:	e7d6      	b.n	80054c6 <__swbuf_r+0x2a>

08005518 <__swsetup_r>:
 8005518:	b538      	push	{r3, r4, r5, lr}
 800551a:	4b29      	ldr	r3, [pc, #164]	@ (80055c0 <__swsetup_r+0xa8>)
 800551c:	4605      	mov	r5, r0
 800551e:	6818      	ldr	r0, [r3, #0]
 8005520:	460c      	mov	r4, r1
 8005522:	b118      	cbz	r0, 800552c <__swsetup_r+0x14>
 8005524:	6a03      	ldr	r3, [r0, #32]
 8005526:	b90b      	cbnz	r3, 800552c <__swsetup_r+0x14>
 8005528:	f7fe f970 	bl	800380c <__sinit>
 800552c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005530:	0719      	lsls	r1, r3, #28
 8005532:	d422      	bmi.n	800557a <__swsetup_r+0x62>
 8005534:	06da      	lsls	r2, r3, #27
 8005536:	d407      	bmi.n	8005548 <__swsetup_r+0x30>
 8005538:	2209      	movs	r2, #9
 800553a:	602a      	str	r2, [r5, #0]
 800553c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005540:	f04f 30ff 	mov.w	r0, #4294967295
 8005544:	81a3      	strh	r3, [r4, #12]
 8005546:	e033      	b.n	80055b0 <__swsetup_r+0x98>
 8005548:	0758      	lsls	r0, r3, #29
 800554a:	d512      	bpl.n	8005572 <__swsetup_r+0x5a>
 800554c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800554e:	b141      	cbz	r1, 8005562 <__swsetup_r+0x4a>
 8005550:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005554:	4299      	cmp	r1, r3
 8005556:	d002      	beq.n	800555e <__swsetup_r+0x46>
 8005558:	4628      	mov	r0, r5
 800555a:	f7ff f8b1 	bl	80046c0 <_free_r>
 800555e:	2300      	movs	r3, #0
 8005560:	6363      	str	r3, [r4, #52]	@ 0x34
 8005562:	89a3      	ldrh	r3, [r4, #12]
 8005564:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005568:	81a3      	strh	r3, [r4, #12]
 800556a:	2300      	movs	r3, #0
 800556c:	6063      	str	r3, [r4, #4]
 800556e:	6923      	ldr	r3, [r4, #16]
 8005570:	6023      	str	r3, [r4, #0]
 8005572:	89a3      	ldrh	r3, [r4, #12]
 8005574:	f043 0308 	orr.w	r3, r3, #8
 8005578:	81a3      	strh	r3, [r4, #12]
 800557a:	6923      	ldr	r3, [r4, #16]
 800557c:	b94b      	cbnz	r3, 8005592 <__swsetup_r+0x7a>
 800557e:	89a3      	ldrh	r3, [r4, #12]
 8005580:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005584:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005588:	d003      	beq.n	8005592 <__swsetup_r+0x7a>
 800558a:	4621      	mov	r1, r4
 800558c:	4628      	mov	r0, r5
 800558e:	f000 f882 	bl	8005696 <__smakebuf_r>
 8005592:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005596:	f013 0201 	ands.w	r2, r3, #1
 800559a:	d00a      	beq.n	80055b2 <__swsetup_r+0x9a>
 800559c:	2200      	movs	r2, #0
 800559e:	60a2      	str	r2, [r4, #8]
 80055a0:	6962      	ldr	r2, [r4, #20]
 80055a2:	4252      	negs	r2, r2
 80055a4:	61a2      	str	r2, [r4, #24]
 80055a6:	6922      	ldr	r2, [r4, #16]
 80055a8:	b942      	cbnz	r2, 80055bc <__swsetup_r+0xa4>
 80055aa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80055ae:	d1c5      	bne.n	800553c <__swsetup_r+0x24>
 80055b0:	bd38      	pop	{r3, r4, r5, pc}
 80055b2:	0799      	lsls	r1, r3, #30
 80055b4:	bf58      	it	pl
 80055b6:	6962      	ldrpl	r2, [r4, #20]
 80055b8:	60a2      	str	r2, [r4, #8]
 80055ba:	e7f4      	b.n	80055a6 <__swsetup_r+0x8e>
 80055bc:	2000      	movs	r0, #0
 80055be:	e7f7      	b.n	80055b0 <__swsetup_r+0x98>
 80055c0:	20000018 	.word	0x20000018

080055c4 <_raise_r>:
 80055c4:	291f      	cmp	r1, #31
 80055c6:	b538      	push	{r3, r4, r5, lr}
 80055c8:	4605      	mov	r5, r0
 80055ca:	460c      	mov	r4, r1
 80055cc:	d904      	bls.n	80055d8 <_raise_r+0x14>
 80055ce:	2316      	movs	r3, #22
 80055d0:	6003      	str	r3, [r0, #0]
 80055d2:	f04f 30ff 	mov.w	r0, #4294967295
 80055d6:	bd38      	pop	{r3, r4, r5, pc}
 80055d8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80055da:	b112      	cbz	r2, 80055e2 <_raise_r+0x1e>
 80055dc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80055e0:	b94b      	cbnz	r3, 80055f6 <_raise_r+0x32>
 80055e2:	4628      	mov	r0, r5
 80055e4:	f000 f830 	bl	8005648 <_getpid_r>
 80055e8:	4622      	mov	r2, r4
 80055ea:	4601      	mov	r1, r0
 80055ec:	4628      	mov	r0, r5
 80055ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80055f2:	f000 b817 	b.w	8005624 <_kill_r>
 80055f6:	2b01      	cmp	r3, #1
 80055f8:	d00a      	beq.n	8005610 <_raise_r+0x4c>
 80055fa:	1c59      	adds	r1, r3, #1
 80055fc:	d103      	bne.n	8005606 <_raise_r+0x42>
 80055fe:	2316      	movs	r3, #22
 8005600:	6003      	str	r3, [r0, #0]
 8005602:	2001      	movs	r0, #1
 8005604:	e7e7      	b.n	80055d6 <_raise_r+0x12>
 8005606:	2100      	movs	r1, #0
 8005608:	4620      	mov	r0, r4
 800560a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800560e:	4798      	blx	r3
 8005610:	2000      	movs	r0, #0
 8005612:	e7e0      	b.n	80055d6 <_raise_r+0x12>

08005614 <raise>:
 8005614:	4b02      	ldr	r3, [pc, #8]	@ (8005620 <raise+0xc>)
 8005616:	4601      	mov	r1, r0
 8005618:	6818      	ldr	r0, [r3, #0]
 800561a:	f7ff bfd3 	b.w	80055c4 <_raise_r>
 800561e:	bf00      	nop
 8005620:	20000018 	.word	0x20000018

08005624 <_kill_r>:
 8005624:	b538      	push	{r3, r4, r5, lr}
 8005626:	2300      	movs	r3, #0
 8005628:	4d06      	ldr	r5, [pc, #24]	@ (8005644 <_kill_r+0x20>)
 800562a:	4604      	mov	r4, r0
 800562c:	4608      	mov	r0, r1
 800562e:	4611      	mov	r1, r2
 8005630:	602b      	str	r3, [r5, #0]
 8005632:	f7fb fea6 	bl	8001382 <_kill>
 8005636:	1c43      	adds	r3, r0, #1
 8005638:	d102      	bne.n	8005640 <_kill_r+0x1c>
 800563a:	682b      	ldr	r3, [r5, #0]
 800563c:	b103      	cbz	r3, 8005640 <_kill_r+0x1c>
 800563e:	6023      	str	r3, [r4, #0]
 8005640:	bd38      	pop	{r3, r4, r5, pc}
 8005642:	bf00      	nop
 8005644:	20000364 	.word	0x20000364

08005648 <_getpid_r>:
 8005648:	f7fb be94 	b.w	8001374 <_getpid>

0800564c <__swhatbuf_r>:
 800564c:	b570      	push	{r4, r5, r6, lr}
 800564e:	460c      	mov	r4, r1
 8005650:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005654:	4615      	mov	r5, r2
 8005656:	2900      	cmp	r1, #0
 8005658:	461e      	mov	r6, r3
 800565a:	b096      	sub	sp, #88	@ 0x58
 800565c:	da0c      	bge.n	8005678 <__swhatbuf_r+0x2c>
 800565e:	89a3      	ldrh	r3, [r4, #12]
 8005660:	2100      	movs	r1, #0
 8005662:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005666:	bf14      	ite	ne
 8005668:	2340      	movne	r3, #64	@ 0x40
 800566a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800566e:	2000      	movs	r0, #0
 8005670:	6031      	str	r1, [r6, #0]
 8005672:	602b      	str	r3, [r5, #0]
 8005674:	b016      	add	sp, #88	@ 0x58
 8005676:	bd70      	pop	{r4, r5, r6, pc}
 8005678:	466a      	mov	r2, sp
 800567a:	f000 f849 	bl	8005710 <_fstat_r>
 800567e:	2800      	cmp	r0, #0
 8005680:	dbed      	blt.n	800565e <__swhatbuf_r+0x12>
 8005682:	9901      	ldr	r1, [sp, #4]
 8005684:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005688:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800568c:	4259      	negs	r1, r3
 800568e:	4159      	adcs	r1, r3
 8005690:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005694:	e7eb      	b.n	800566e <__swhatbuf_r+0x22>

08005696 <__smakebuf_r>:
 8005696:	898b      	ldrh	r3, [r1, #12]
 8005698:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800569a:	079d      	lsls	r5, r3, #30
 800569c:	4606      	mov	r6, r0
 800569e:	460c      	mov	r4, r1
 80056a0:	d507      	bpl.n	80056b2 <__smakebuf_r+0x1c>
 80056a2:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80056a6:	6023      	str	r3, [r4, #0]
 80056a8:	6123      	str	r3, [r4, #16]
 80056aa:	2301      	movs	r3, #1
 80056ac:	6163      	str	r3, [r4, #20]
 80056ae:	b003      	add	sp, #12
 80056b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80056b2:	466a      	mov	r2, sp
 80056b4:	ab01      	add	r3, sp, #4
 80056b6:	f7ff ffc9 	bl	800564c <__swhatbuf_r>
 80056ba:	9f00      	ldr	r7, [sp, #0]
 80056bc:	4605      	mov	r5, r0
 80056be:	4639      	mov	r1, r7
 80056c0:	4630      	mov	r0, r6
 80056c2:	f7ff f86f 	bl	80047a4 <_malloc_r>
 80056c6:	b948      	cbnz	r0, 80056dc <__smakebuf_r+0x46>
 80056c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80056cc:	059a      	lsls	r2, r3, #22
 80056ce:	d4ee      	bmi.n	80056ae <__smakebuf_r+0x18>
 80056d0:	f023 0303 	bic.w	r3, r3, #3
 80056d4:	f043 0302 	orr.w	r3, r3, #2
 80056d8:	81a3      	strh	r3, [r4, #12]
 80056da:	e7e2      	b.n	80056a2 <__smakebuf_r+0xc>
 80056dc:	89a3      	ldrh	r3, [r4, #12]
 80056de:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80056e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80056e6:	81a3      	strh	r3, [r4, #12]
 80056e8:	9b01      	ldr	r3, [sp, #4]
 80056ea:	6020      	str	r0, [r4, #0]
 80056ec:	b15b      	cbz	r3, 8005706 <__smakebuf_r+0x70>
 80056ee:	4630      	mov	r0, r6
 80056f0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80056f4:	f000 f81e 	bl	8005734 <_isatty_r>
 80056f8:	b128      	cbz	r0, 8005706 <__smakebuf_r+0x70>
 80056fa:	89a3      	ldrh	r3, [r4, #12]
 80056fc:	f023 0303 	bic.w	r3, r3, #3
 8005700:	f043 0301 	orr.w	r3, r3, #1
 8005704:	81a3      	strh	r3, [r4, #12]
 8005706:	89a3      	ldrh	r3, [r4, #12]
 8005708:	431d      	orrs	r5, r3
 800570a:	81a5      	strh	r5, [r4, #12]
 800570c:	e7cf      	b.n	80056ae <__smakebuf_r+0x18>
	...

08005710 <_fstat_r>:
 8005710:	b538      	push	{r3, r4, r5, lr}
 8005712:	2300      	movs	r3, #0
 8005714:	4d06      	ldr	r5, [pc, #24]	@ (8005730 <_fstat_r+0x20>)
 8005716:	4604      	mov	r4, r0
 8005718:	4608      	mov	r0, r1
 800571a:	4611      	mov	r1, r2
 800571c:	602b      	str	r3, [r5, #0]
 800571e:	f7fb fe8f 	bl	8001440 <_fstat>
 8005722:	1c43      	adds	r3, r0, #1
 8005724:	d102      	bne.n	800572c <_fstat_r+0x1c>
 8005726:	682b      	ldr	r3, [r5, #0]
 8005728:	b103      	cbz	r3, 800572c <_fstat_r+0x1c>
 800572a:	6023      	str	r3, [r4, #0]
 800572c:	bd38      	pop	{r3, r4, r5, pc}
 800572e:	bf00      	nop
 8005730:	20000364 	.word	0x20000364

08005734 <_isatty_r>:
 8005734:	b538      	push	{r3, r4, r5, lr}
 8005736:	2300      	movs	r3, #0
 8005738:	4d05      	ldr	r5, [pc, #20]	@ (8005750 <_isatty_r+0x1c>)
 800573a:	4604      	mov	r4, r0
 800573c:	4608      	mov	r0, r1
 800573e:	602b      	str	r3, [r5, #0]
 8005740:	f7fb fe8d 	bl	800145e <_isatty>
 8005744:	1c43      	adds	r3, r0, #1
 8005746:	d102      	bne.n	800574e <_isatty_r+0x1a>
 8005748:	682b      	ldr	r3, [r5, #0]
 800574a:	b103      	cbz	r3, 800574e <_isatty_r+0x1a>
 800574c:	6023      	str	r3, [r4, #0]
 800574e:	bd38      	pop	{r3, r4, r5, pc}
 8005750:	20000364 	.word	0x20000364

08005754 <_init>:
 8005754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005756:	bf00      	nop
 8005758:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800575a:	bc08      	pop	{r3}
 800575c:	469e      	mov	lr, r3
 800575e:	4770      	bx	lr

08005760 <_fini>:
 8005760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005762:	bf00      	nop
 8005764:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005766:	bc08      	pop	{r3}
 8005768:	469e      	mov	lr, r3
 800576a:	4770      	bx	lr
