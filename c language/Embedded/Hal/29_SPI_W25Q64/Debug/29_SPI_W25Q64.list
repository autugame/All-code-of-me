
29_SPI_W25Q64.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006a0c  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002a4  08006b18  08006b18  00007b18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006dbc  08006dbc  00008068  2**0
                  CONTENTS
  4 .ARM          00000000  08006dbc  08006dbc  00008068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006dbc  08006dbc  00008068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006dbc  08006dbc  00007dbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006dc0  08006dc0  00007dc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08006dc4  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003f4  20000068  08006e2c  00008068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000045c  08006e2c  0000845c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00008068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001176b  00000000  00000000  00008091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003904  00000000  00000000  000197fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001168  00000000  00000000  0001d100  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d54  00000000  00000000  0001e268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b420  00000000  00000000  0001efbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019940  00000000  00000000  0003a3dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008feab  00000000  00000000  00053d1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e3bc7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004dd8  00000000  00000000  000e3c0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004c  00000000  00000000  000e89e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	08006b00 	.word	0x08006b00

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	08006b00 	.word	0x08006b00

0800014c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000152:	1d3b      	adds	r3, r7, #4
 8000154:	2200      	movs	r2, #0
 8000156:	601a      	str	r2, [r3, #0]
 8000158:	605a      	str	r2, [r3, #4]
 800015a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800015c:	4b18      	ldr	r3, [pc, #96]	@ (80001c0 <MX_ADC1_Init+0x74>)
 800015e:	4a19      	ldr	r2, [pc, #100]	@ (80001c4 <MX_ADC1_Init+0x78>)
 8000160:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000162:	4b17      	ldr	r3, [pc, #92]	@ (80001c0 <MX_ADC1_Init+0x74>)
 8000164:	2200      	movs	r2, #0
 8000166:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000168:	4b15      	ldr	r3, [pc, #84]	@ (80001c0 <MX_ADC1_Init+0x74>)
 800016a:	2200      	movs	r2, #0
 800016c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800016e:	4b14      	ldr	r3, [pc, #80]	@ (80001c0 <MX_ADC1_Init+0x74>)
 8000170:	2200      	movs	r2, #0
 8000172:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000174:	4b12      	ldr	r3, [pc, #72]	@ (80001c0 <MX_ADC1_Init+0x74>)
 8000176:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 800017a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800017c:	4b10      	ldr	r3, [pc, #64]	@ (80001c0 <MX_ADC1_Init+0x74>)
 800017e:	2200      	movs	r2, #0
 8000180:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000182:	4b0f      	ldr	r3, [pc, #60]	@ (80001c0 <MX_ADC1_Init+0x74>)
 8000184:	2201      	movs	r2, #1
 8000186:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000188:	480d      	ldr	r0, [pc, #52]	@ (80001c0 <MX_ADC1_Init+0x74>)
 800018a:	f001 f9eb 	bl	8001564 <HAL_ADC_Init>
 800018e:	4603      	mov	r3, r0
 8000190:	2b00      	cmp	r3, #0
 8000192:	d001      	beq.n	8000198 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000194:	f000 fa22 	bl	80005dc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000198:	2310      	movs	r3, #16
 800019a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800019c:	2301      	movs	r3, #1
 800019e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80001a0:	2307      	movs	r3, #7
 80001a2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80001a4:	1d3b      	adds	r3, r7, #4
 80001a6:	4619      	mov	r1, r3
 80001a8:	4805      	ldr	r0, [pc, #20]	@ (80001c0 <MX_ADC1_Init+0x74>)
 80001aa:	f001 fab3 	bl	8001714 <HAL_ADC_ConfigChannel>
 80001ae:	4603      	mov	r3, r0
 80001b0:	2b00      	cmp	r3, #0
 80001b2:	d001      	beq.n	80001b8 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80001b4:	f000 fa12 	bl	80005dc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80001b8:	bf00      	nop
 80001ba:	3710      	adds	r7, #16
 80001bc:	46bd      	mov	sp, r7
 80001be:	bd80      	pop	{r7, pc}
 80001c0:	20000084 	.word	0x20000084
 80001c4:	40012400 	.word	0x40012400

080001c8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b085      	sub	sp, #20
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC1)
 80001d0:	687b      	ldr	r3, [r7, #4]
 80001d2:	681b      	ldr	r3, [r3, #0]
 80001d4:	4a09      	ldr	r2, [pc, #36]	@ (80001fc <HAL_ADC_MspInit+0x34>)
 80001d6:	4293      	cmp	r3, r2
 80001d8:	d10b      	bne.n	80001f2 <HAL_ADC_MspInit+0x2a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80001da:	4b09      	ldr	r3, [pc, #36]	@ (8000200 <HAL_ADC_MspInit+0x38>)
 80001dc:	699b      	ldr	r3, [r3, #24]
 80001de:	4a08      	ldr	r2, [pc, #32]	@ (8000200 <HAL_ADC_MspInit+0x38>)
 80001e0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80001e4:	6193      	str	r3, [r2, #24]
 80001e6:	4b06      	ldr	r3, [pc, #24]	@ (8000200 <HAL_ADC_MspInit+0x38>)
 80001e8:	699b      	ldr	r3, [r3, #24]
 80001ea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80001ee:	60fb      	str	r3, [r7, #12]
 80001f0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80001f2:	bf00      	nop
 80001f4:	3714      	adds	r7, #20
 80001f6:	46bd      	mov	sp, r7
 80001f8:	bc80      	pop	{r7}
 80001fa:	4770      	bx	lr
 80001fc:	40012400 	.word	0x40012400
 8000200:	40021000 	.word	0x40021000

08000204 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	b082      	sub	sp, #8
 8000208:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800020a:	4b0c      	ldr	r3, [pc, #48]	@ (800023c <MX_DMA_Init+0x38>)
 800020c:	695b      	ldr	r3, [r3, #20]
 800020e:	4a0b      	ldr	r2, [pc, #44]	@ (800023c <MX_DMA_Init+0x38>)
 8000210:	f043 0301 	orr.w	r3, r3, #1
 8000214:	6153      	str	r3, [r2, #20]
 8000216:	4b09      	ldr	r3, [pc, #36]	@ (800023c <MX_DMA_Init+0x38>)
 8000218:	695b      	ldr	r3, [r3, #20]
 800021a:	f003 0301 	and.w	r3, r3, #1
 800021e:	607b      	str	r3, [r7, #4]
 8000220:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8000222:	2200      	movs	r2, #0
 8000224:	2100      	movs	r1, #0
 8000226:	200f      	movs	r0, #15
 8000228:	f001 fc85 	bl	8001b36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 800022c:	200f      	movs	r0, #15
 800022e:	f001 fc9e 	bl	8001b6e <HAL_NVIC_EnableIRQ>

}
 8000232:	bf00      	nop
 8000234:	3708      	adds	r7, #8
 8000236:	46bd      	mov	sp, r7
 8000238:	bd80      	pop	{r7, pc}
 800023a:	bf00      	nop
 800023c:	40021000 	.word	0x40021000

08000240 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000240:	b580      	push	{r7, lr}
 8000242:	b088      	sub	sp, #32
 8000244:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000246:	f107 0310 	add.w	r3, r7, #16
 800024a:	2200      	movs	r2, #0
 800024c:	601a      	str	r2, [r3, #0]
 800024e:	605a      	str	r2, [r3, #4]
 8000250:	609a      	str	r2, [r3, #8]
 8000252:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000254:	4b31      	ldr	r3, [pc, #196]	@ (800031c <MX_GPIO_Init+0xdc>)
 8000256:	699b      	ldr	r3, [r3, #24]
 8000258:	4a30      	ldr	r2, [pc, #192]	@ (800031c <MX_GPIO_Init+0xdc>)
 800025a:	f043 0320 	orr.w	r3, r3, #32
 800025e:	6193      	str	r3, [r2, #24]
 8000260:	4b2e      	ldr	r3, [pc, #184]	@ (800031c <MX_GPIO_Init+0xdc>)
 8000262:	699b      	ldr	r3, [r3, #24]
 8000264:	f003 0320 	and.w	r3, r3, #32
 8000268:	60fb      	str	r3, [r7, #12]
 800026a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800026c:	4b2b      	ldr	r3, [pc, #172]	@ (800031c <MX_GPIO_Init+0xdc>)
 800026e:	699b      	ldr	r3, [r3, #24]
 8000270:	4a2a      	ldr	r2, [pc, #168]	@ (800031c <MX_GPIO_Init+0xdc>)
 8000272:	f043 0304 	orr.w	r3, r3, #4
 8000276:	6193      	str	r3, [r2, #24]
 8000278:	4b28      	ldr	r3, [pc, #160]	@ (800031c <MX_GPIO_Init+0xdc>)
 800027a:	699b      	ldr	r3, [r3, #24]
 800027c:	f003 0304 	and.w	r3, r3, #4
 8000280:	60bb      	str	r3, [r7, #8]
 8000282:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000284:	4b25      	ldr	r3, [pc, #148]	@ (800031c <MX_GPIO_Init+0xdc>)
 8000286:	699b      	ldr	r3, [r3, #24]
 8000288:	4a24      	ldr	r2, [pc, #144]	@ (800031c <MX_GPIO_Init+0xdc>)
 800028a:	f043 0308 	orr.w	r3, r3, #8
 800028e:	6193      	str	r3, [r2, #24]
 8000290:	4b22      	ldr	r3, [pc, #136]	@ (800031c <MX_GPIO_Init+0xdc>)
 8000292:	699b      	ldr	r3, [r3, #24]
 8000294:	f003 0308 	and.w	r3, r3, #8
 8000298:	607b      	str	r3, [r7, #4]
 800029a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 800029c:	2200      	movs	r2, #0
 800029e:	2106      	movs	r1, #6
 80002a0:	481f      	ldr	r0, [pc, #124]	@ (8000320 <MX_GPIO_Init+0xe0>)
 80002a2:	f002 f8a5 	bl	80023f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_8, GPIO_PIN_SET);
 80002a6:	2201      	movs	r2, #1
 80002a8:	f44f 7188 	mov.w	r1, #272	@ 0x110
 80002ac:	481c      	ldr	r0, [pc, #112]	@ (8000320 <MX_GPIO_Init+0xe0>)
 80002ae:	f002 f89f 	bl	80023f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA1 PA2 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4;
 80002b2:	2316      	movs	r3, #22
 80002b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002b6:	2301      	movs	r3, #1
 80002b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002ba:	2300      	movs	r3, #0
 80002bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002be:	2302      	movs	r3, #2
 80002c0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002c2:	f107 0310 	add.w	r3, r7, #16
 80002c6:	4619      	mov	r1, r3
 80002c8:	4815      	ldr	r0, [pc, #84]	@ (8000320 <MX_GPIO_Init+0xe0>)
 80002ca:	f001 ff0d 	bl	80020e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80002ce:	2301      	movs	r3, #1
 80002d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80002d2:	4b14      	ldr	r3, [pc, #80]	@ (8000324 <MX_GPIO_Init+0xe4>)
 80002d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80002d6:	2301      	movs	r3, #1
 80002d8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80002da:	f107 0310 	add.w	r3, r7, #16
 80002de:	4619      	mov	r1, r3
 80002e0:	4811      	ldr	r0, [pc, #68]	@ (8000328 <MX_GPIO_Init+0xe8>)
 80002e2:	f001 ff01 	bl	80020e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80002e6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80002ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80002ec:	2311      	movs	r3, #17
 80002ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002f0:	2300      	movs	r3, #0
 80002f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002f4:	2302      	movs	r3, #2
 80002f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002f8:	f107 0310 	add.w	r3, r7, #16
 80002fc:	4619      	mov	r1, r3
 80002fe:	4808      	ldr	r0, [pc, #32]	@ (8000320 <MX_GPIO_Init+0xe0>)
 8000300:	f001 fef2 	bl	80020e8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000304:	2200      	movs	r2, #0
 8000306:	2100      	movs	r1, #0
 8000308:	2006      	movs	r0, #6
 800030a:	f001 fc14 	bl	8001b36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800030e:	2006      	movs	r0, #6
 8000310:	f001 fc2d 	bl	8001b6e <HAL_NVIC_EnableIRQ>

}
 8000314:	bf00      	nop
 8000316:	3720      	adds	r7, #32
 8000318:	46bd      	mov	sp, r7
 800031a:	bd80      	pop	{r7, pc}
 800031c:	40021000 	.word	0x40021000
 8000320:	40010800 	.word	0x40010800
 8000324:	10210000 	.word	0x10210000
 8000328:	40010c00 	.word	0x40010c00

0800032c <LED_Control>:

/* USER CODE BEGIN 2 */
void LED_Control(uint8_t device, uint8_t cmd)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	b082      	sub	sp, #8
 8000330:	af00      	add	r7, sp, #0
 8000332:	4603      	mov	r3, r0
 8000334:	460a      	mov	r2, r1
 8000336:	71fb      	strb	r3, [r7, #7]
 8000338:	4613      	mov	r3, r2
 800033a:	71bb      	strb	r3, [r7, #6]
	if (device == LED1)
 800033c:	79fb      	ldrb	r3, [r7, #7]
 800033e:	2b01      	cmp	r3, #1
 8000340:	d111      	bne.n	8000366 <LED_Control+0x3a>
	{
		if (cmd == ON)
 8000342:	79bb      	ldrb	r3, [r7, #6]
 8000344:	2b01      	cmp	r3, #1
 8000346:	d105      	bne.n	8000354 <LED_Control+0x28>
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 8000348:	2201      	movs	r2, #1
 800034a:	2102      	movs	r1, #2
 800034c:	4812      	ldr	r0, [pc, #72]	@ (8000398 <LED_Control+0x6c>)
 800034e:	f002 f84f 	bl	80023f0 <HAL_GPIO_WritePin>
		else if (cmd == OFF)
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
		}
	}
}
 8000352:	e01c      	b.n	800038e <LED_Control+0x62>
		else if (cmd == OFF)
 8000354:	79bb      	ldrb	r3, [r7, #6]
 8000356:	2b00      	cmp	r3, #0
 8000358:	d119      	bne.n	800038e <LED_Control+0x62>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 800035a:	2200      	movs	r2, #0
 800035c:	2102      	movs	r1, #2
 800035e:	480e      	ldr	r0, [pc, #56]	@ (8000398 <LED_Control+0x6c>)
 8000360:	f002 f846 	bl	80023f0 <HAL_GPIO_WritePin>
}
 8000364:	e013      	b.n	800038e <LED_Control+0x62>
	else if (device == LED2)
 8000366:	79fb      	ldrb	r3, [r7, #7]
 8000368:	2b02      	cmp	r3, #2
 800036a:	d110      	bne.n	800038e <LED_Control+0x62>
		if (cmd == ON)
 800036c:	79bb      	ldrb	r3, [r7, #6]
 800036e:	2b01      	cmp	r3, #1
 8000370:	d105      	bne.n	800037e <LED_Control+0x52>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 8000372:	2201      	movs	r2, #1
 8000374:	2104      	movs	r1, #4
 8000376:	4808      	ldr	r0, [pc, #32]	@ (8000398 <LED_Control+0x6c>)
 8000378:	f002 f83a 	bl	80023f0 <HAL_GPIO_WritePin>
}
 800037c:	e007      	b.n	800038e <LED_Control+0x62>
		else if (cmd == OFF)
 800037e:	79bb      	ldrb	r3, [r7, #6]
 8000380:	2b00      	cmp	r3, #0
 8000382:	d104      	bne.n	800038e <LED_Control+0x62>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 8000384:	2200      	movs	r2, #0
 8000386:	2104      	movs	r1, #4
 8000388:	4803      	ldr	r0, [pc, #12]	@ (8000398 <LED_Control+0x6c>)
 800038a:	f002 f831 	bl	80023f0 <HAL_GPIO_WritePin>
}
 800038e:	bf00      	nop
 8000390:	3708      	adds	r7, #8
 8000392:	46bd      	mov	sp, r7
 8000394:	bd80      	pop	{r7, pc}
 8000396:	bf00      	nop
 8000398:	40010800 	.word	0x40010800

0800039c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800039c:	b580      	push	{r7, lr}
 800039e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80003a0:	4b12      	ldr	r3, [pc, #72]	@ (80003ec <MX_I2C1_Init+0x50>)
 80003a2:	4a13      	ldr	r2, [pc, #76]	@ (80003f0 <MX_I2C1_Init+0x54>)
 80003a4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80003a6:	4b11      	ldr	r3, [pc, #68]	@ (80003ec <MX_I2C1_Init+0x50>)
 80003a8:	4a12      	ldr	r2, [pc, #72]	@ (80003f4 <MX_I2C1_Init+0x58>)
 80003aa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80003ac:	4b0f      	ldr	r3, [pc, #60]	@ (80003ec <MX_I2C1_Init+0x50>)
 80003ae:	2200      	movs	r2, #0
 80003b0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80003b2:	4b0e      	ldr	r3, [pc, #56]	@ (80003ec <MX_I2C1_Init+0x50>)
 80003b4:	2200      	movs	r2, #0
 80003b6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80003b8:	4b0c      	ldr	r3, [pc, #48]	@ (80003ec <MX_I2C1_Init+0x50>)
 80003ba:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80003be:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80003c0:	4b0a      	ldr	r3, [pc, #40]	@ (80003ec <MX_I2C1_Init+0x50>)
 80003c2:	2200      	movs	r2, #0
 80003c4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80003c6:	4b09      	ldr	r3, [pc, #36]	@ (80003ec <MX_I2C1_Init+0x50>)
 80003c8:	2200      	movs	r2, #0
 80003ca:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80003cc:	4b07      	ldr	r3, [pc, #28]	@ (80003ec <MX_I2C1_Init+0x50>)
 80003ce:	2200      	movs	r2, #0
 80003d0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80003d2:	4b06      	ldr	r3, [pc, #24]	@ (80003ec <MX_I2C1_Init+0x50>)
 80003d4:	2200      	movs	r2, #0
 80003d6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80003d8:	4804      	ldr	r0, [pc, #16]	@ (80003ec <MX_I2C1_Init+0x50>)
 80003da:	f002 f839 	bl	8002450 <HAL_I2C_Init>
 80003de:	4603      	mov	r3, r0
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	d001      	beq.n	80003e8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80003e4:	f000 f8fa 	bl	80005dc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80003e8:	bf00      	nop
 80003ea:	bd80      	pop	{r7, pc}
 80003ec:	200000b4 	.word	0x200000b4
 80003f0:	40005400 	.word	0x40005400
 80003f4:	000186a0 	.word	0x000186a0

080003f8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	b08a      	sub	sp, #40	@ 0x28
 80003fc:	af00      	add	r7, sp, #0
 80003fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000400:	f107 0314 	add.w	r3, r7, #20
 8000404:	2200      	movs	r2, #0
 8000406:	601a      	str	r2, [r3, #0]
 8000408:	605a      	str	r2, [r3, #4]
 800040a:	609a      	str	r2, [r3, #8]
 800040c:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	681b      	ldr	r3, [r3, #0]
 8000412:	4a1d      	ldr	r2, [pc, #116]	@ (8000488 <HAL_I2C_MspInit+0x90>)
 8000414:	4293      	cmp	r3, r2
 8000416:	d132      	bne.n	800047e <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000418:	4b1c      	ldr	r3, [pc, #112]	@ (800048c <HAL_I2C_MspInit+0x94>)
 800041a:	699b      	ldr	r3, [r3, #24]
 800041c:	4a1b      	ldr	r2, [pc, #108]	@ (800048c <HAL_I2C_MspInit+0x94>)
 800041e:	f043 0308 	orr.w	r3, r3, #8
 8000422:	6193      	str	r3, [r2, #24]
 8000424:	4b19      	ldr	r3, [pc, #100]	@ (800048c <HAL_I2C_MspInit+0x94>)
 8000426:	699b      	ldr	r3, [r3, #24]
 8000428:	f003 0308 	and.w	r3, r3, #8
 800042c:	613b      	str	r3, [r7, #16]
 800042e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000430:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000434:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000436:	2312      	movs	r3, #18
 8000438:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800043a:	2303      	movs	r3, #3
 800043c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800043e:	f107 0314 	add.w	r3, r7, #20
 8000442:	4619      	mov	r1, r3
 8000444:	4812      	ldr	r0, [pc, #72]	@ (8000490 <HAL_I2C_MspInit+0x98>)
 8000446:	f001 fe4f 	bl	80020e8 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 800044a:	4b12      	ldr	r3, [pc, #72]	@ (8000494 <HAL_I2C_MspInit+0x9c>)
 800044c:	685b      	ldr	r3, [r3, #4]
 800044e:	627b      	str	r3, [r7, #36]	@ 0x24
 8000450:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000452:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8000456:	627b      	str	r3, [r7, #36]	@ 0x24
 8000458:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800045a:	f043 0302 	orr.w	r3, r3, #2
 800045e:	627b      	str	r3, [r7, #36]	@ 0x24
 8000460:	4a0c      	ldr	r2, [pc, #48]	@ (8000494 <HAL_I2C_MspInit+0x9c>)
 8000462:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000464:	6053      	str	r3, [r2, #4]

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000466:	4b09      	ldr	r3, [pc, #36]	@ (800048c <HAL_I2C_MspInit+0x94>)
 8000468:	69db      	ldr	r3, [r3, #28]
 800046a:	4a08      	ldr	r2, [pc, #32]	@ (800048c <HAL_I2C_MspInit+0x94>)
 800046c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000470:	61d3      	str	r3, [r2, #28]
 8000472:	4b06      	ldr	r3, [pc, #24]	@ (800048c <HAL_I2C_MspInit+0x94>)
 8000474:	69db      	ldr	r3, [r3, #28]
 8000476:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800047a:	60fb      	str	r3, [r7, #12]
 800047c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800047e:	bf00      	nop
 8000480:	3728      	adds	r7, #40	@ 0x28
 8000482:	46bd      	mov	sp, r7
 8000484:	bd80      	pop	{r7, pc}
 8000486:	bf00      	nop
 8000488:	40005400 	.word	0x40005400
 800048c:	40021000 	.word	0x40021000
 8000490:	40010c00 	.word	0x40010c00
 8000494:	40010000 	.word	0x40010000

08000498 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000498:	b580      	push	{r7, lr}
 800049a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800049c:	f000 ffdc 	bl	8001458 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004a0:	f000 f83c 	bl	800051c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004a4:	f7ff fecc 	bl	8000240 <MX_GPIO_Init>
  MX_DMA_Init();
 80004a8:	f7ff feac 	bl	8000204 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80004ac:	f000 fc4a 	bl	8000d44 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 80004b0:	f7ff ff74 	bl	800039c <MX_I2C1_Init>
  MX_RTC_Init();
 80004b4:	f000 f90c 	bl	80006d0 <MX_RTC_Init>
  MX_ADC1_Init();
 80004b8:	f7ff fe48 	bl	800014c <MX_ADC1_Init>
  MX_SPI1_Init();
 80004bc:	f000 f9a2 	bl	8000804 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  //HAL_UART_Receive_IT(&huart1, RX1_Buffer, 4);
  //HAL_UART_Receive_DMA(&huart1, RX1_Buffer, 1);
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);
 80004c0:	4b10      	ldr	r3, [pc, #64]	@ (8000504 <main+0x6c>)
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	68da      	ldr	r2, [r3, #12]
 80004c6:	4b0f      	ldr	r3, [pc, #60]	@ (8000504 <main+0x6c>)
 80004c8:	681b      	ldr	r3, [r3, #0]
 80004ca:	f042 0210 	orr.w	r2, r2, #16
 80004ce:	60da      	str	r2, [r3, #12]
  HAL_UART_Receive_DMA(&huart1, RX1_Buffer, DMA_BUF_SIZE);
 80004d0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80004d4:	490c      	ldr	r1, [pc, #48]	@ (8000508 <main+0x70>)
 80004d6:	480b      	ldr	r0, [pc, #44]	@ (8000504 <main+0x6c>)
 80004d8:	f004 fc18 	bl	8004d0c <HAL_UART_Receive_DMA>
  printf("The system has been initialized!\n");
 80004dc:	480b      	ldr	r0, [pc, #44]	@ (800050c <main+0x74>)
 80004de:	f005 fc5d 	bl	8005d9c <puts>
  OLED_Init();
 80004e2:	f000 f899 	bl	8000618 <OLED_Init>
  printf("The OLED has been initialized!\n");
 80004e6:	480a      	ldr	r0, [pc, #40]	@ (8000510 <main+0x78>)
 80004e8:	f005 fc58 	bl	8005d9c <puts>
  //OLED_Test();
  //printf("The IWDG has been initialized!\n");
  //printf("The WWDG has been initialized!\n");
  //printf("The PWR sleep has been initialized!\n");
  printf("The ADC VR test has been initialized!\n");
 80004ec:	4809      	ldr	r0, [pc, #36]	@ (8000514 <main+0x7c>)
 80004ee:	f005 fc55 	bl	8005d9c <puts>
  printf("The w25q64 test has been initialized!\n");
 80004f2:	4809      	ldr	r0, [pc, #36]	@ (8000518 <main+0x80>)
 80004f4:	f005 fc52 	bl	8005d9c <puts>
  W25Qx_Init();
 80004f8:	f000 fcde 	bl	8000eb8 <W25Qx_Init>
  W25QX_Test();
 80004fc:	f000 fe96 	bl	800122c <W25QX_Test>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000500:	bf00      	nop
 8000502:	e7fd      	b.n	8000500 <main+0x68>
 8000504:	20000280 	.word	0x20000280
 8000508:	20000108 	.word	0x20000108
 800050c:	08006b18 	.word	0x08006b18
 8000510:	08006b3c 	.word	0x08006b3c
 8000514:	08006b5c 	.word	0x08006b5c
 8000518:	08006b84 	.word	0x08006b84

0800051c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b094      	sub	sp, #80	@ 0x50
 8000520:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000522:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000526:	2228      	movs	r2, #40	@ 0x28
 8000528:	2100      	movs	r1, #0
 800052a:	4618      	mov	r0, r3
 800052c:	f005 fd26 	bl	8005f7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000530:	f107 0314 	add.w	r3, r7, #20
 8000534:	2200      	movs	r2, #0
 8000536:	601a      	str	r2, [r3, #0]
 8000538:	605a      	str	r2, [r3, #4]
 800053a:	609a      	str	r2, [r3, #8]
 800053c:	60da      	str	r2, [r3, #12]
 800053e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000540:	1d3b      	adds	r3, r7, #4
 8000542:	2200      	movs	r2, #0
 8000544:	601a      	str	r2, [r3, #0]
 8000546:	605a      	str	r2, [r3, #4]
 8000548:	609a      	str	r2, [r3, #8]
 800054a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800054c:	2309      	movs	r3, #9
 800054e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000550:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000554:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000556:	2300      	movs	r3, #0
 8000558:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800055a:	2301      	movs	r3, #1
 800055c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800055e:	2301      	movs	r3, #1
 8000560:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000562:	2302      	movs	r3, #2
 8000564:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000566:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800056a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800056c:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000570:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000572:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000576:	4618      	mov	r0, r3
 8000578:	f002 fc22 	bl	8002dc0 <HAL_RCC_OscConfig>
 800057c:	4603      	mov	r3, r0
 800057e:	2b00      	cmp	r3, #0
 8000580:	d001      	beq.n	8000586 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000582:	f000 f82b 	bl	80005dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000586:	230f      	movs	r3, #15
 8000588:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800058a:	2302      	movs	r3, #2
 800058c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800058e:	2300      	movs	r3, #0
 8000590:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000592:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000596:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000598:	2300      	movs	r3, #0
 800059a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800059c:	f107 0314 	add.w	r3, r7, #20
 80005a0:	2102      	movs	r1, #2
 80005a2:	4618      	mov	r0, r3
 80005a4:	f002 fe8e 	bl	80032c4 <HAL_RCC_ClockConfig>
 80005a8:	4603      	mov	r3, r0
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d001      	beq.n	80005b2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80005ae:	f000 f815 	bl	80005dc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_ADC;
 80005b2:	2303      	movs	r3, #3
 80005b4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80005b6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80005ba:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80005bc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80005c0:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005c2:	1d3b      	adds	r3, r7, #4
 80005c4:	4618      	mov	r0, r3
 80005c6:	f003 f80b 	bl	80035e0 <HAL_RCCEx_PeriphCLKConfig>
 80005ca:	4603      	mov	r3, r0
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d001      	beq.n	80005d4 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 80005d0:	f000 f804 	bl	80005dc <Error_Handler>
  }
}
 80005d4:	bf00      	nop
 80005d6:	3750      	adds	r7, #80	@ 0x50
 80005d8:	46bd      	mov	sp, r7
 80005da:	bd80      	pop	{r7, pc}

080005dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005e0:	b672      	cpsid	i
}
 80005e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005e4:	bf00      	nop
 80005e6:	e7fd      	b.n	80005e4 <Error_Handler+0x8>

080005e8 <WriteCmd>:
#include "oled.h"
#include "codetab.h"

void WriteCmd(unsigned char I2C_Command)//写命令
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b086      	sub	sp, #24
 80005ec:	af04      	add	r7, sp, #16
 80005ee:	4603      	mov	r3, r0
 80005f0:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1,OLED0561_ADD,COM,I2C_MEMADD_SIZE_8BIT,&I2C_Command,1,1000);
 80005f2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80005f6:	9302      	str	r3, [sp, #8]
 80005f8:	2301      	movs	r3, #1
 80005fa:	9301      	str	r3, [sp, #4]
 80005fc:	1dfb      	adds	r3, r7, #7
 80005fe:	9300      	str	r3, [sp, #0]
 8000600:	2301      	movs	r3, #1
 8000602:	2200      	movs	r2, #0
 8000604:	2178      	movs	r1, #120	@ 0x78
 8000606:	4803      	ldr	r0, [pc, #12]	@ (8000614 <WriteCmd+0x2c>)
 8000608:	f002 f866 	bl	80026d8 <HAL_I2C_Mem_Write>
}
 800060c:	bf00      	nop
 800060e:	3708      	adds	r7, #8
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}
 8000614:	200000b4 	.word	0x200000b4

08000618 <OLED_Init>:
{
		HAL_I2C_Mem_Write(&hi2c1,OLED0561_ADD,DAT,I2C_MEMADD_SIZE_8BIT,&I2C_Data,1,1000);
}

void OLED_Init(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
	HAL_Delay(100); //这里的延时很重要
 800061c:	2064      	movs	r0, #100	@ 0x64
 800061e:	f000 ff7d 	bl	800151c <HAL_Delay>

	WriteCmd(0xAE); //display off
 8000622:	20ae      	movs	r0, #174	@ 0xae
 8000624:	f7ff ffe0 	bl	80005e8 <WriteCmd>
	WriteCmd(0x20);	//Set Memory Addressing Mode
 8000628:	2020      	movs	r0, #32
 800062a:	f7ff ffdd 	bl	80005e8 <WriteCmd>
	WriteCmd(0x10);	//00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 800062e:	2010      	movs	r0, #16
 8000630:	f7ff ffda 	bl	80005e8 <WriteCmd>
	WriteCmd(0xb0);	//Set Page Start Address for Page Addressing Mode,0-7
 8000634:	20b0      	movs	r0, #176	@ 0xb0
 8000636:	f7ff ffd7 	bl	80005e8 <WriteCmd>
	WriteCmd(0xc8);	//Set COM Output Scan Direction
 800063a:	20c8      	movs	r0, #200	@ 0xc8
 800063c:	f7ff ffd4 	bl	80005e8 <WriteCmd>
	WriteCmd(0x00); //---set low column address
 8000640:	2000      	movs	r0, #0
 8000642:	f7ff ffd1 	bl	80005e8 <WriteCmd>
	WriteCmd(0x10); //---set high column address
 8000646:	2010      	movs	r0, #16
 8000648:	f7ff ffce 	bl	80005e8 <WriteCmd>
	WriteCmd(0x40); //--set start line address
 800064c:	2040      	movs	r0, #64	@ 0x40
 800064e:	f7ff ffcb 	bl	80005e8 <WriteCmd>
	WriteCmd(0x81); //--set contrast control register
 8000652:	2081      	movs	r0, #129	@ 0x81
 8000654:	f7ff ffc8 	bl	80005e8 <WriteCmd>
	WriteCmd(0xff); //亮度调节 0x00~0xff
 8000658:	20ff      	movs	r0, #255	@ 0xff
 800065a:	f7ff ffc5 	bl	80005e8 <WriteCmd>
	WriteCmd(0xa1); //--set segment re-map 0 to 127
 800065e:	20a1      	movs	r0, #161	@ 0xa1
 8000660:	f7ff ffc2 	bl	80005e8 <WriteCmd>
	WriteCmd(0xa6); //--set normal display
 8000664:	20a6      	movs	r0, #166	@ 0xa6
 8000666:	f7ff ffbf 	bl	80005e8 <WriteCmd>
	WriteCmd(0xa8); //--set multiplex ratio(1 to 64)
 800066a:	20a8      	movs	r0, #168	@ 0xa8
 800066c:	f7ff ffbc 	bl	80005e8 <WriteCmd>
	WriteCmd(0x3F); //
 8000670:	203f      	movs	r0, #63	@ 0x3f
 8000672:	f7ff ffb9 	bl	80005e8 <WriteCmd>
	WriteCmd(0xa4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000676:	20a4      	movs	r0, #164	@ 0xa4
 8000678:	f7ff ffb6 	bl	80005e8 <WriteCmd>
	WriteCmd(0xd3); //-set display offset
 800067c:	20d3      	movs	r0, #211	@ 0xd3
 800067e:	f7ff ffb3 	bl	80005e8 <WriteCmd>
	WriteCmd(0x00); //-not offset
 8000682:	2000      	movs	r0, #0
 8000684:	f7ff ffb0 	bl	80005e8 <WriteCmd>
	WriteCmd(0xd5); //--set display clock divide ratio/oscillator frequency
 8000688:	20d5      	movs	r0, #213	@ 0xd5
 800068a:	f7ff ffad 	bl	80005e8 <WriteCmd>
	WriteCmd(0xf0); //--set divide ratio
 800068e:	20f0      	movs	r0, #240	@ 0xf0
 8000690:	f7ff ffaa 	bl	80005e8 <WriteCmd>
	WriteCmd(0xd9); //--set pre-charge period
 8000694:	20d9      	movs	r0, #217	@ 0xd9
 8000696:	f7ff ffa7 	bl	80005e8 <WriteCmd>
	WriteCmd(0x22); //
 800069a:	2022      	movs	r0, #34	@ 0x22
 800069c:	f7ff ffa4 	bl	80005e8 <WriteCmd>
	WriteCmd(0xda); //--set com pins hardware configuration
 80006a0:	20da      	movs	r0, #218	@ 0xda
 80006a2:	f7ff ffa1 	bl	80005e8 <WriteCmd>
	WriteCmd(0x12);
 80006a6:	2012      	movs	r0, #18
 80006a8:	f7ff ff9e 	bl	80005e8 <WriteCmd>
	WriteCmd(0xdb); //--set vcomh
 80006ac:	20db      	movs	r0, #219	@ 0xdb
 80006ae:	f7ff ff9b 	bl	80005e8 <WriteCmd>
	WriteCmd(0x20); //0x20,0.77xVcc
 80006b2:	2020      	movs	r0, #32
 80006b4:	f7ff ff98 	bl	80005e8 <WriteCmd>
	WriteCmd(0x8d); //--set DC-DC enable
 80006b8:	208d      	movs	r0, #141	@ 0x8d
 80006ba:	f7ff ff95 	bl	80005e8 <WriteCmd>
	WriteCmd(0x14); //
 80006be:	2014      	movs	r0, #20
 80006c0:	f7ff ff92 	bl	80005e8 <WriteCmd>
	WriteCmd(0xaf); //--turn on oled panel
 80006c4:	20af      	movs	r0, #175	@ 0xaf
 80006c6:	f7ff ff8f 	bl	80005e8 <WriteCmd>
}
 80006ca:	bf00      	nop
 80006cc:	bd80      	pop	{r7, pc}
	...

080006d0 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b084      	sub	sp, #16
 80006d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80006d6:	f107 030c 	add.w	r3, r7, #12
 80006da:	2100      	movs	r1, #0
 80006dc:	460a      	mov	r2, r1
 80006de:	801a      	strh	r2, [r3, #0]
 80006e0:	460a      	mov	r2, r1
 80006e2:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 80006e4:	2300      	movs	r3, #0
 80006e6:	60bb      	str	r3, [r7, #8]

  /* USER CODE BEGIN RTC_Init 1 */
  __HAL_RCC_BKP_CLK_ENABLE();
 80006e8:	4b31      	ldr	r3, [pc, #196]	@ (80007b0 <MX_RTC_Init+0xe0>)
 80006ea:	69db      	ldr	r3, [r3, #28]
 80006ec:	4a30      	ldr	r2, [pc, #192]	@ (80007b0 <MX_RTC_Init+0xe0>)
 80006ee:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80006f2:	61d3      	str	r3, [r2, #28]
 80006f4:	4b2e      	ldr	r3, [pc, #184]	@ (80007b0 <MX_RTC_Init+0xe0>)
 80006f6:	69db      	ldr	r3, [r3, #28]
 80006f8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80006fc:	607b      	str	r3, [r7, #4]
 80006fe:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000700:	4b2b      	ldr	r3, [pc, #172]	@ (80007b0 <MX_RTC_Init+0xe0>)
 8000702:	69db      	ldr	r3, [r3, #28]
 8000704:	4a2a      	ldr	r2, [pc, #168]	@ (80007b0 <MX_RTC_Init+0xe0>)
 8000706:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800070a:	61d3      	str	r3, [r2, #28]
 800070c:	4b28      	ldr	r3, [pc, #160]	@ (80007b0 <MX_RTC_Init+0xe0>)
 800070e:	69db      	ldr	r3, [r3, #28]
 8000710:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000714:	603b      	str	r3, [r7, #0]
 8000716:	683b      	ldr	r3, [r7, #0]
  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000718:	4b26      	ldr	r3, [pc, #152]	@ (80007b4 <MX_RTC_Init+0xe4>)
 800071a:	4a27      	ldr	r2, [pc, #156]	@ (80007b8 <MX_RTC_Init+0xe8>)
 800071c:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 800071e:	4b25      	ldr	r3, [pc, #148]	@ (80007b4 <MX_RTC_Init+0xe4>)
 8000720:	f04f 32ff 	mov.w	r2, #4294967295
 8000724:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_NONE;
 8000726:	4b23      	ldr	r3, [pc, #140]	@ (80007b4 <MX_RTC_Init+0xe4>)
 8000728:	2200      	movs	r2, #0
 800072a:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800072c:	4821      	ldr	r0, [pc, #132]	@ (80007b4 <MX_RTC_Init+0xe4>)
 800072e:	f003 f8c3 	bl	80038b8 <HAL_RTC_Init>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d001      	beq.n	800073c <MX_RTC_Init+0x6c>
  {
    Error_Handler();
 8000738:	f7ff ff50 	bl	80005dc <Error_Handler>
  }

  /* USER CODE BEGIN Check_RTC_BKUP */
  if (HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR1) != 0x5051)
 800073c:	2101      	movs	r1, #1
 800073e:	481d      	ldr	r0, [pc, #116]	@ (80007b4 <MX_RTC_Init+0xe4>)
 8000740:	f003 fc58 	bl	8003ff4 <HAL_RTCEx_BKUPRead>
 8000744:	4603      	mov	r3, r0
 8000746:	f245 0251 	movw	r2, #20561	@ 0x5051
 800074a:	4293      	cmp	r3, r2
 800074c:	d02b      	beq.n	80007a6 <MX_RTC_Init+0xd6>
  {
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 800074e:	2300      	movs	r3, #0
 8000750:	733b      	strb	r3, [r7, #12]
  sTime.Minutes = 0x0;
 8000752:	2300      	movs	r3, #0
 8000754:	737b      	strb	r3, [r7, #13]
  sTime.Seconds = 0x0;
 8000756:	2300      	movs	r3, #0
 8000758:	73bb      	strb	r3, [r7, #14]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800075a:	f107 030c 	add.w	r3, r7, #12
 800075e:	2201      	movs	r2, #1
 8000760:	4619      	mov	r1, r3
 8000762:	4814      	ldr	r0, [pc, #80]	@ (80007b4 <MX_RTC_Init+0xe4>)
 8000764:	f003 f934 	bl	80039d0 <HAL_RTC_SetTime>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 800076e:	f7ff ff35 	bl	80005dc <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_SATURDAY;
 8000772:	2306      	movs	r3, #6
 8000774:	723b      	strb	r3, [r7, #8]
  DateToUpdate.Month = RTC_MONTH_FEBRUARY;
 8000776:	2302      	movs	r3, #2
 8000778:	727b      	strb	r3, [r7, #9]
  DateToUpdate.Date = 0x7;
 800077a:	2307      	movs	r3, #7
 800077c:	72bb      	strb	r3, [r7, #10]
  DateToUpdate.Year = 0x25;
 800077e:	2325      	movs	r3, #37	@ 0x25
 8000780:	72fb      	strb	r3, [r7, #11]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 8000782:	f107 0308 	add.w	r3, r7, #8
 8000786:	2201      	movs	r2, #1
 8000788:	4619      	mov	r1, r3
 800078a:	480a      	ldr	r0, [pc, #40]	@ (80007b4 <MX_RTC_Init+0xe4>)
 800078c:	f003 f9b8 	bl	8003b00 <HAL_RTC_SetDate>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <MX_RTC_Init+0xca>
  {
    Error_Handler();
 8000796:	f7ff ff21 	bl	80005dc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */
	  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x5051);
 800079a:	f245 0251 	movw	r2, #20561	@ 0x5051
 800079e:	2101      	movs	r1, #1
 80007a0:	4804      	ldr	r0, [pc, #16]	@ (80007b4 <MX_RTC_Init+0xe4>)
 80007a2:	f003 fc0d 	bl	8003fc0 <HAL_RTCEx_BKUPWrite>
  }
  /* USER CODE END RTC_Init 2 */

}
 80007a6:	bf00      	nop
 80007a8:	3710      	adds	r7, #16
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	40021000 	.word	0x40021000
 80007b4:	2000020c 	.word	0x2000020c
 80007b8:	40002800 	.word	0x40002800

080007bc <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b084      	sub	sp, #16
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	4a0b      	ldr	r2, [pc, #44]	@ (80007f8 <HAL_RTC_MspInit+0x3c>)
 80007ca:	4293      	cmp	r3, r2
 80007cc:	d110      	bne.n	80007f0 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 80007ce:	f002 faeb 	bl	8002da8 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 80007d2:	4b0a      	ldr	r3, [pc, #40]	@ (80007fc <HAL_RTC_MspInit+0x40>)
 80007d4:	69db      	ldr	r3, [r3, #28]
 80007d6:	4a09      	ldr	r2, [pc, #36]	@ (80007fc <HAL_RTC_MspInit+0x40>)
 80007d8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80007dc:	61d3      	str	r3, [r2, #28]
 80007de:	4b07      	ldr	r3, [pc, #28]	@ (80007fc <HAL_RTC_MspInit+0x40>)
 80007e0:	69db      	ldr	r3, [r3, #28]
 80007e2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80007e6:	60fb      	str	r3, [r7, #12]
 80007e8:	68fb      	ldr	r3, [r7, #12]
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80007ea:	4b05      	ldr	r3, [pc, #20]	@ (8000800 <HAL_RTC_MspInit+0x44>)
 80007ec:	2201      	movs	r2, #1
 80007ee:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80007f0:	bf00      	nop
 80007f2:	3710      	adds	r7, #16
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	40002800 	.word	0x40002800
 80007fc:	40021000 	.word	0x40021000
 8000800:	4242043c 	.word	0x4242043c

08000804 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000808:	4b17      	ldr	r3, [pc, #92]	@ (8000868 <MX_SPI1_Init+0x64>)
 800080a:	4a18      	ldr	r2, [pc, #96]	@ (800086c <MX_SPI1_Init+0x68>)
 800080c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800080e:	4b16      	ldr	r3, [pc, #88]	@ (8000868 <MX_SPI1_Init+0x64>)
 8000810:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000814:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000816:	4b14      	ldr	r3, [pc, #80]	@ (8000868 <MX_SPI1_Init+0x64>)
 8000818:	2200      	movs	r2, #0
 800081a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800081c:	4b12      	ldr	r3, [pc, #72]	@ (8000868 <MX_SPI1_Init+0x64>)
 800081e:	2200      	movs	r2, #0
 8000820:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000822:	4b11      	ldr	r3, [pc, #68]	@ (8000868 <MX_SPI1_Init+0x64>)
 8000824:	2200      	movs	r2, #0
 8000826:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000828:	4b0f      	ldr	r3, [pc, #60]	@ (8000868 <MX_SPI1_Init+0x64>)
 800082a:	2200      	movs	r2, #0
 800082c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800082e:	4b0e      	ldr	r3, [pc, #56]	@ (8000868 <MX_SPI1_Init+0x64>)
 8000830:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000834:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000836:	4b0c      	ldr	r3, [pc, #48]	@ (8000868 <MX_SPI1_Init+0x64>)
 8000838:	2208      	movs	r2, #8
 800083a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800083c:	4b0a      	ldr	r3, [pc, #40]	@ (8000868 <MX_SPI1_Init+0x64>)
 800083e:	2200      	movs	r2, #0
 8000840:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000842:	4b09      	ldr	r3, [pc, #36]	@ (8000868 <MX_SPI1_Init+0x64>)
 8000844:	2200      	movs	r2, #0
 8000846:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000848:	4b07      	ldr	r3, [pc, #28]	@ (8000868 <MX_SPI1_Init+0x64>)
 800084a:	2200      	movs	r2, #0
 800084c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800084e:	4b06      	ldr	r3, [pc, #24]	@ (8000868 <MX_SPI1_Init+0x64>)
 8000850:	220a      	movs	r2, #10
 8000852:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000854:	4804      	ldr	r0, [pc, #16]	@ (8000868 <MX_SPI1_Init+0x64>)
 8000856:	f003 fbe9 	bl	800402c <HAL_SPI_Init>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d001      	beq.n	8000864 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000860:	f7ff febc 	bl	80005dc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000864:	bf00      	nop
 8000866:	bd80      	pop	{r7, pc}
 8000868:	20000220 	.word	0x20000220
 800086c:	40013000 	.word	0x40013000

08000870 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b088      	sub	sp, #32
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000878:	f107 0310 	add.w	r3, r7, #16
 800087c:	2200      	movs	r2, #0
 800087e:	601a      	str	r2, [r3, #0]
 8000880:	605a      	str	r2, [r3, #4]
 8000882:	609a      	str	r2, [r3, #8]
 8000884:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	4a1b      	ldr	r2, [pc, #108]	@ (80008f8 <HAL_SPI_MspInit+0x88>)
 800088c:	4293      	cmp	r3, r2
 800088e:	d12f      	bne.n	80008f0 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000890:	4b1a      	ldr	r3, [pc, #104]	@ (80008fc <HAL_SPI_MspInit+0x8c>)
 8000892:	699b      	ldr	r3, [r3, #24]
 8000894:	4a19      	ldr	r2, [pc, #100]	@ (80008fc <HAL_SPI_MspInit+0x8c>)
 8000896:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800089a:	6193      	str	r3, [r2, #24]
 800089c:	4b17      	ldr	r3, [pc, #92]	@ (80008fc <HAL_SPI_MspInit+0x8c>)
 800089e:	699b      	ldr	r3, [r3, #24]
 80008a0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80008a4:	60fb      	str	r3, [r7, #12]
 80008a6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008a8:	4b14      	ldr	r3, [pc, #80]	@ (80008fc <HAL_SPI_MspInit+0x8c>)
 80008aa:	699b      	ldr	r3, [r3, #24]
 80008ac:	4a13      	ldr	r2, [pc, #76]	@ (80008fc <HAL_SPI_MspInit+0x8c>)
 80008ae:	f043 0304 	orr.w	r3, r3, #4
 80008b2:	6193      	str	r3, [r2, #24]
 80008b4:	4b11      	ldr	r3, [pc, #68]	@ (80008fc <HAL_SPI_MspInit+0x8c>)
 80008b6:	699b      	ldr	r3, [r3, #24]
 80008b8:	f003 0304 	and.w	r3, r3, #4
 80008bc:	60bb      	str	r3, [r7, #8]
 80008be:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80008c0:	23a0      	movs	r3, #160	@ 0xa0
 80008c2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c4:	2302      	movs	r3, #2
 80008c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008c8:	2303      	movs	r3, #3
 80008ca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008cc:	f107 0310 	add.w	r3, r7, #16
 80008d0:	4619      	mov	r1, r3
 80008d2:	480b      	ldr	r0, [pc, #44]	@ (8000900 <HAL_SPI_MspInit+0x90>)
 80008d4:	f001 fc08 	bl	80020e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80008d8:	2340      	movs	r3, #64	@ 0x40
 80008da:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008dc:	2300      	movs	r3, #0
 80008de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e0:	2300      	movs	r3, #0
 80008e2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008e4:	f107 0310 	add.w	r3, r7, #16
 80008e8:	4619      	mov	r1, r3
 80008ea:	4805      	ldr	r0, [pc, #20]	@ (8000900 <HAL_SPI_MspInit+0x90>)
 80008ec:	f001 fbfc 	bl	80020e8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80008f0:	bf00      	nop
 80008f2:	3720      	adds	r7, #32
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	40013000 	.word	0x40013000
 80008fc:	40021000 	.word	0x40021000
 8000900:	40010800 	.word	0x40010800

08000904 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000904:	b480      	push	{r7}
 8000906:	b085      	sub	sp, #20
 8000908:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800090a:	4b15      	ldr	r3, [pc, #84]	@ (8000960 <HAL_MspInit+0x5c>)
 800090c:	699b      	ldr	r3, [r3, #24]
 800090e:	4a14      	ldr	r2, [pc, #80]	@ (8000960 <HAL_MspInit+0x5c>)
 8000910:	f043 0301 	orr.w	r3, r3, #1
 8000914:	6193      	str	r3, [r2, #24]
 8000916:	4b12      	ldr	r3, [pc, #72]	@ (8000960 <HAL_MspInit+0x5c>)
 8000918:	699b      	ldr	r3, [r3, #24]
 800091a:	f003 0301 	and.w	r3, r3, #1
 800091e:	60bb      	str	r3, [r7, #8]
 8000920:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000922:	4b0f      	ldr	r3, [pc, #60]	@ (8000960 <HAL_MspInit+0x5c>)
 8000924:	69db      	ldr	r3, [r3, #28]
 8000926:	4a0e      	ldr	r2, [pc, #56]	@ (8000960 <HAL_MspInit+0x5c>)
 8000928:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800092c:	61d3      	str	r3, [r2, #28]
 800092e:	4b0c      	ldr	r3, [pc, #48]	@ (8000960 <HAL_MspInit+0x5c>)
 8000930:	69db      	ldr	r3, [r3, #28]
 8000932:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000936:	607b      	str	r3, [r7, #4]
 8000938:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800093a:	4b0a      	ldr	r3, [pc, #40]	@ (8000964 <HAL_MspInit+0x60>)
 800093c:	685b      	ldr	r3, [r3, #4]
 800093e:	60fb      	str	r3, [r7, #12]
 8000940:	68fb      	ldr	r3, [r7, #12]
 8000942:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000946:	60fb      	str	r3, [r7, #12]
 8000948:	68fb      	ldr	r3, [r7, #12]
 800094a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800094e:	60fb      	str	r3, [r7, #12]
 8000950:	4a04      	ldr	r2, [pc, #16]	@ (8000964 <HAL_MspInit+0x60>)
 8000952:	68fb      	ldr	r3, [r7, #12]
 8000954:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000956:	bf00      	nop
 8000958:	3714      	adds	r7, #20
 800095a:	46bd      	mov	sp, r7
 800095c:	bc80      	pop	{r7}
 800095e:	4770      	bx	lr
 8000960:	40021000 	.word	0x40021000
 8000964:	40010000 	.word	0x40010000

08000968 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800096c:	bf00      	nop
 800096e:	e7fd      	b.n	800096c <NMI_Handler+0x4>

08000970 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000974:	bf00      	nop
 8000976:	e7fd      	b.n	8000974 <HardFault_Handler+0x4>

08000978 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800097c:	bf00      	nop
 800097e:	e7fd      	b.n	800097c <MemManage_Handler+0x4>

08000980 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000984:	bf00      	nop
 8000986:	e7fd      	b.n	8000984 <BusFault_Handler+0x4>

08000988 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800098c:	bf00      	nop
 800098e:	e7fd      	b.n	800098c <UsageFault_Handler+0x4>

08000990 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000994:	bf00      	nop
 8000996:	46bd      	mov	sp, r7
 8000998:	bc80      	pop	{r7}
 800099a:	4770      	bx	lr

0800099c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009a0:	bf00      	nop
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bc80      	pop	{r7}
 80009a6:	4770      	bx	lr

080009a8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009ac:	bf00      	nop
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bc80      	pop	{r7}
 80009b2:	4770      	bx	lr

080009b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009b8:	f000 fd94 	bl	80014e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009bc:	bf00      	nop
 80009be:	bd80      	pop	{r7, pc}

080009c0 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80009c4:	2001      	movs	r0, #1
 80009c6:	f001 fd2b 	bl	8002420 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80009ca:	bf00      	nop
 80009cc:	bd80      	pop	{r7, pc}
	...

080009d0 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80009d4:	4802      	ldr	r0, [pc, #8]	@ (80009e0 <DMA1_Channel5_IRQHandler+0x10>)
 80009d6:	f001 fa53 	bl	8001e80 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80009da:	bf00      	nop
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	200002c8 	.word	0x200002c8

080009e4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80009e8:	4803      	ldr	r0, [pc, #12]	@ (80009f8 <USART1_IRQHandler+0x14>)
 80009ea:	f004 f9b5 	bl	8004d58 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  UART_IRQHandler(&huart1);
 80009ee:	4802      	ldr	r0, [pc, #8]	@ (80009f8 <USART1_IRQHandler+0x14>)
 80009f0:	f000 f8b4 	bl	8000b5c <UART_IRQHandler>
  /* USER CODE END USART1_IRQn 1 */
}
 80009f4:	bf00      	nop
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	20000280 	.word	0x20000280

080009fc <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 1 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b082      	sub	sp, #8
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	4603      	mov	r3, r0
 8000a04:	80fb      	strh	r3, [r7, #6]
	static uint32_t oldUWTick = 0;
	if ((uwTick - oldUWTick) < 200) return;
 8000a06:	4b19      	ldr	r3, [pc, #100]	@ (8000a6c <HAL_GPIO_EXTI_Callback+0x70>)
 8000a08:	681a      	ldr	r2, [r3, #0]
 8000a0a:	4b19      	ldr	r3, [pc, #100]	@ (8000a70 <HAL_GPIO_EXTI_Callback+0x74>)
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	1ad3      	subs	r3, r2, r3
 8000a10:	2bc7      	cmp	r3, #199	@ 0xc7
 8000a12:	d927      	bls.n	8000a64 <HAL_GPIO_EXTI_Callback+0x68>
	oldUWTick = uwTick;
 8000a14:	4b15      	ldr	r3, [pc, #84]	@ (8000a6c <HAL_GPIO_EXTI_Callback+0x70>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	4a15      	ldr	r2, [pc, #84]	@ (8000a70 <HAL_GPIO_EXTI_Callback+0x74>)
 8000a1a:	6013      	str	r3, [r2, #0]
	if (GPIO_Pin == GPIO_PIN_5)
 8000a1c:	88fb      	ldrh	r3, [r7, #6]
 8000a1e:	2b20      	cmp	r3, #32
 8000a20:	d10e      	bne.n	8000a40 <HAL_GPIO_EXTI_Callback+0x44>
	{
		LED_Control(LED1, ON);
 8000a22:	2101      	movs	r1, #1
 8000a24:	2001      	movs	r0, #1
 8000a26:	f7ff fc81 	bl	800032c <LED_Control>
		LED_Control(LED2, ON);
 8000a2a:	2101      	movs	r1, #1
 8000a2c:	2002      	movs	r0, #2
 8000a2e:	f7ff fc7d 	bl	800032c <LED_Control>
		Key_Value = GPIO_PIN_5;
 8000a32:	4b10      	ldr	r3, [pc, #64]	@ (8000a74 <HAL_GPIO_EXTI_Callback+0x78>)
 8000a34:	2220      	movs	r2, #32
 8000a36:	701a      	strb	r2, [r3, #0]
		printf("GPIO pin 5 has pressed\n");
 8000a38:	480f      	ldr	r0, [pc, #60]	@ (8000a78 <HAL_GPIO_EXTI_Callback+0x7c>)
 8000a3a:	f005 f9af 	bl	8005d9c <puts>
 8000a3e:	e012      	b.n	8000a66 <HAL_GPIO_EXTI_Callback+0x6a>
	}
	else if (GPIO_Pin == GPIO_PIN_0)
 8000a40:	88fb      	ldrh	r3, [r7, #6]
 8000a42:	2b01      	cmp	r3, #1
 8000a44:	d10f      	bne.n	8000a66 <HAL_GPIO_EXTI_Callback+0x6a>
	{
		LED_Control(LED1, OFF);
 8000a46:	2100      	movs	r1, #0
 8000a48:	2001      	movs	r0, #1
 8000a4a:	f7ff fc6f 	bl	800032c <LED_Control>
		LED_Control(LED2, OFF);
 8000a4e:	2100      	movs	r1, #0
 8000a50:	2002      	movs	r0, #2
 8000a52:	f7ff fc6b 	bl	800032c <LED_Control>
		Key_Value = GPIO_PIN_0;
 8000a56:	4b07      	ldr	r3, [pc, #28]	@ (8000a74 <HAL_GPIO_EXTI_Callback+0x78>)
 8000a58:	2201      	movs	r2, #1
 8000a5a:	701a      	strb	r2, [r3, #0]
		printf("GPIO pin 0 has pressed\n");
 8000a5c:	4807      	ldr	r0, [pc, #28]	@ (8000a7c <HAL_GPIO_EXTI_Callback+0x80>)
 8000a5e:	f005 f99d 	bl	8005d9c <puts>
 8000a62:	e000      	b.n	8000a66 <HAL_GPIO_EXTI_Callback+0x6a>
	if ((uwTick - oldUWTick) < 200) return;
 8000a64:	bf00      	nop
	}
}
 8000a66:	3708      	adds	r7, #8
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	2000030c 	.word	0x2000030c
 8000a70:	20000278 	.word	0x20000278
 8000a74:	20000209 	.word	0x20000209
 8000a78:	08006bac 	.word	0x08006bac
 8000a7c:	08006bc4 	.word	0x08006bc4

08000a80 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b084      	sub	sp, #16
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1)
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	4a12      	ldr	r2, [pc, #72]	@ (8000ad8 <HAL_UART_RxCpltCallback+0x58>)
 8000a8e:	4293      	cmp	r3, r2
 8000a90:	d11e      	bne.n	8000ad0 <HAL_UART_RxCpltCallback+0x50>
	{
		//HAL_UART_Transmit(&huart1, RX1_Buffer, 4, HAL_MAX_DELAY);
		//HAL_UART_Receive_IT(&huart1, RX1_Buffer, 4);
//		HAL_UART_Transmit_DMA(huart, RX1_Buffer, 1);
//		HAL_UART_Receive_IT(huart, RX1_Buffer, 1);
		uint8_t length = DMA_BUF_SIZE - RX1_OffSet;
 8000a92:	4b12      	ldr	r3, [pc, #72]	@ (8000adc <HAL_UART_RxCpltCallback+0x5c>)
 8000a94:	781b      	ldrb	r3, [r3, #0]
 8000a96:	425b      	negs	r3, r3
 8000a98:	73fb      	strb	r3, [r7, #15]
		HAL_UART_Transmit(huart, RX1_Buffer + RX1_OffSet, length, HAL_MAX_DELAY);
 8000a9a:	4b10      	ldr	r3, [pc, #64]	@ (8000adc <HAL_UART_RxCpltCallback+0x5c>)
 8000a9c:	781b      	ldrb	r3, [r3, #0]
 8000a9e:	461a      	mov	r2, r3
 8000aa0:	4b0f      	ldr	r3, [pc, #60]	@ (8000ae0 <HAL_UART_RxCpltCallback+0x60>)
 8000aa2:	18d1      	adds	r1, r2, r3
 8000aa4:	7bfb      	ldrb	r3, [r7, #15]
 8000aa6:	b29a      	uxth	r2, r3
 8000aa8:	f04f 33ff 	mov.w	r3, #4294967295
 8000aac:	6878      	ldr	r0, [r7, #4]
 8000aae:	f004 f8a2 	bl	8004bf6 <HAL_UART_Transmit>
		printf("\n");
 8000ab2:	200a      	movs	r0, #10
 8000ab4:	f005 f914 	bl	8005ce0 <putchar>
		printf("RX1_OffSet=%d\n", RX1_OffSet + length);
 8000ab8:	4b08      	ldr	r3, [pc, #32]	@ (8000adc <HAL_UART_RxCpltCallback+0x5c>)
 8000aba:	781b      	ldrb	r3, [r3, #0]
 8000abc:	461a      	mov	r2, r3
 8000abe:	7bfb      	ldrb	r3, [r7, #15]
 8000ac0:	4413      	add	r3, r2
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	4807      	ldr	r0, [pc, #28]	@ (8000ae4 <HAL_UART_RxCpltCallback+0x64>)
 8000ac6:	f005 f8f9 	bl	8005cbc <iprintf>
		RX1_OffSet = 0;
 8000aca:	4b04      	ldr	r3, [pc, #16]	@ (8000adc <HAL_UART_RxCpltCallback+0x5c>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	701a      	strb	r2, [r3, #0]
	}
}
 8000ad0:	bf00      	nop
 8000ad2:	3710      	adds	r7, #16
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	40013800 	.word	0x40013800
 8000adc:	20000208 	.word	0x20000208
 8000ae0:	20000108 	.word	0x20000108
 8000ae4:	08006bdc 	.word	0x08006bdc

08000ae8 <HAL_UART_RxHalfCpltCallback>:

void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b084      	sub	sp, #16
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1)
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	4a15      	ldr	r2, [pc, #84]	@ (8000b4c <HAL_UART_RxHalfCpltCallback+0x64>)
 8000af6:	4293      	cmp	r3, r2
 8000af8:	d124      	bne.n	8000b44 <HAL_UART_RxHalfCpltCallback+0x5c>
	{
		uint8_t length = DMA_BUF_SIZE / 2 - RX1_OffSet;
 8000afa:	4b15      	ldr	r3, [pc, #84]	@ (8000b50 <HAL_UART_RxHalfCpltCallback+0x68>)
 8000afc:	781a      	ldrb	r2, [r3, #0]
 8000afe:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 8000b02:	1a9b      	subs	r3, r3, r2
 8000b04:	73fb      	strb	r3, [r7, #15]
		//printf("HLength=%d\n", length);
		HAL_UART_Transmit(huart, RX1_Buffer + RX1_OffSet, length, HAL_MAX_DELAY);
 8000b06:	4b12      	ldr	r3, [pc, #72]	@ (8000b50 <HAL_UART_RxHalfCpltCallback+0x68>)
 8000b08:	781b      	ldrb	r3, [r3, #0]
 8000b0a:	461a      	mov	r2, r3
 8000b0c:	4b11      	ldr	r3, [pc, #68]	@ (8000b54 <HAL_UART_RxHalfCpltCallback+0x6c>)
 8000b0e:	18d1      	adds	r1, r2, r3
 8000b10:	7bfb      	ldrb	r3, [r7, #15]
 8000b12:	b29a      	uxth	r2, r3
 8000b14:	f04f 33ff 	mov.w	r3, #4294967295
 8000b18:	6878      	ldr	r0, [r7, #4]
 8000b1a:	f004 f86c 	bl	8004bf6 <HAL_UART_Transmit>
		printf("\n");
 8000b1e:	200a      	movs	r0, #10
 8000b20:	f005 f8de 	bl	8005ce0 <putchar>
		printf("RX1_OffSet=%d\n", RX1_OffSet + length);
 8000b24:	4b0a      	ldr	r3, [pc, #40]	@ (8000b50 <HAL_UART_RxHalfCpltCallback+0x68>)
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	461a      	mov	r2, r3
 8000b2a:	7bfb      	ldrb	r3, [r7, #15]
 8000b2c:	4413      	add	r3, r2
 8000b2e:	4619      	mov	r1, r3
 8000b30:	4809      	ldr	r0, [pc, #36]	@ (8000b58 <HAL_UART_RxHalfCpltCallback+0x70>)
 8000b32:	f005 f8c3 	bl	8005cbc <iprintf>
		RX1_OffSet += length;
 8000b36:	4b06      	ldr	r3, [pc, #24]	@ (8000b50 <HAL_UART_RxHalfCpltCallback+0x68>)
 8000b38:	781a      	ldrb	r2, [r3, #0]
 8000b3a:	7bfb      	ldrb	r3, [r7, #15]
 8000b3c:	4413      	add	r3, r2
 8000b3e:	b2da      	uxtb	r2, r3
 8000b40:	4b03      	ldr	r3, [pc, #12]	@ (8000b50 <HAL_UART_RxHalfCpltCallback+0x68>)
 8000b42:	701a      	strb	r2, [r3, #0]
	}
}
 8000b44:	bf00      	nop
 8000b46:	3710      	adds	r7, #16
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	40013800 	.word	0x40013800
 8000b50:	20000208 	.word	0x20000208
 8000b54:	20000108 	.word	0x20000108
 8000b58:	08006bdc 	.word	0x08006bdc

08000b5c <UART_IRQHandler>:

void UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b084      	sub	sp, #16
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1)
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	4a1e      	ldr	r2, [pc, #120]	@ (8000be4 <UART_IRQHandler+0x88>)
 8000b6a:	4293      	cmp	r3, r2
 8000b6c:	d136      	bne.n	8000bdc <UART_IRQHandler+0x80>
	{
		if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) != RESET)
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	f003 0310 	and.w	r3, r3, #16
 8000b78:	2b10      	cmp	r3, #16
 8000b7a:	d12f      	bne.n	8000bdc <UART_IRQHandler+0x80>
		{
			__HAL_UART_CLEAR_IDLEFLAG(huart);
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	60bb      	str	r3, [r7, #8]
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	60bb      	str	r3, [r7, #8]
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	685b      	ldr	r3, [r3, #4]
 8000b8e:	60bb      	str	r3, [r7, #8]
 8000b90:	68bb      	ldr	r3, [r7, #8]
			uint8_t length = DMA_BUF_SIZE - __HAL_DMA_GET_COUNTER(&hdma_usart1_rx) - RX1_OffSet;
 8000b92:	4b15      	ldr	r3, [pc, #84]	@ (8000be8 <UART_IRQHandler+0x8c>)
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	685b      	ldr	r3, [r3, #4]
 8000b98:	b2da      	uxtb	r2, r3
 8000b9a:	4b14      	ldr	r3, [pc, #80]	@ (8000bec <UART_IRQHandler+0x90>)
 8000b9c:	781b      	ldrb	r3, [r3, #0]
 8000b9e:	4413      	add	r3, r2
 8000ba0:	b2db      	uxtb	r3, r3
 8000ba2:	425b      	negs	r3, r3
 8000ba4:	73fb      	strb	r3, [r7, #15]
			HAL_UART_Transmit(huart, RX1_Buffer + RX1_OffSet, length, HAL_MAX_DELAY);
 8000ba6:	4b11      	ldr	r3, [pc, #68]	@ (8000bec <UART_IRQHandler+0x90>)
 8000ba8:	781b      	ldrb	r3, [r3, #0]
 8000baa:	461a      	mov	r2, r3
 8000bac:	4b10      	ldr	r3, [pc, #64]	@ (8000bf0 <UART_IRQHandler+0x94>)
 8000bae:	18d1      	adds	r1, r2, r3
 8000bb0:	7bfb      	ldrb	r3, [r7, #15]
 8000bb2:	b29a      	uxth	r2, r3
 8000bb4:	f04f 33ff 	mov.w	r3, #4294967295
 8000bb8:	6878      	ldr	r0, [r7, #4]
 8000bba:	f004 f81c 	bl	8004bf6 <HAL_UART_Transmit>
			printf("\n");
 8000bbe:	200a      	movs	r0, #10
 8000bc0:	f005 f88e 	bl	8005ce0 <putchar>
			printf("Idle Length=%d\n", length);
 8000bc4:	7bfb      	ldrb	r3, [r7, #15]
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	480a      	ldr	r0, [pc, #40]	@ (8000bf4 <UART_IRQHandler+0x98>)
 8000bca:	f005 f877 	bl	8005cbc <iprintf>
			RX1_OffSet += length;
 8000bce:	4b07      	ldr	r3, [pc, #28]	@ (8000bec <UART_IRQHandler+0x90>)
 8000bd0:	781a      	ldrb	r2, [r3, #0]
 8000bd2:	7bfb      	ldrb	r3, [r7, #15]
 8000bd4:	4413      	add	r3, r2
 8000bd6:	b2da      	uxtb	r2, r3
 8000bd8:	4b04      	ldr	r3, [pc, #16]	@ (8000bec <UART_IRQHandler+0x90>)
 8000bda:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8000bdc:	bf00      	nop
 8000bde:	3710      	adds	r7, #16
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	40013800 	.word	0x40013800
 8000be8:	200002c8 	.word	0x200002c8
 8000bec:	20000208 	.word	0x20000208
 8000bf0:	20000108 	.word	0x20000108
 8000bf4:	08006bec 	.word	0x08006bec

08000bf8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b086      	sub	sp, #24
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	60f8      	str	r0, [r7, #12]
 8000c00:	60b9      	str	r1, [r7, #8]
 8000c02:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c04:	2300      	movs	r3, #0
 8000c06:	617b      	str	r3, [r7, #20]
 8000c08:	e00a      	b.n	8000c20 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000c0a:	f3af 8000 	nop.w
 8000c0e:	4601      	mov	r1, r0
 8000c10:	68bb      	ldr	r3, [r7, #8]
 8000c12:	1c5a      	adds	r2, r3, #1
 8000c14:	60ba      	str	r2, [r7, #8]
 8000c16:	b2ca      	uxtb	r2, r1
 8000c18:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c1a:	697b      	ldr	r3, [r7, #20]
 8000c1c:	3301      	adds	r3, #1
 8000c1e:	617b      	str	r3, [r7, #20]
 8000c20:	697a      	ldr	r2, [r7, #20]
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	429a      	cmp	r2, r3
 8000c26:	dbf0      	blt.n	8000c0a <_read+0x12>
  }

  return len;
 8000c28:	687b      	ldr	r3, [r7, #4]
}
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	3718      	adds	r7, #24
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}

08000c32 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c32:	b580      	push	{r7, lr}
 8000c34:	b086      	sub	sp, #24
 8000c36:	af00      	add	r7, sp, #0
 8000c38:	60f8      	str	r0, [r7, #12]
 8000c3a:	60b9      	str	r1, [r7, #8]
 8000c3c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c3e:	2300      	movs	r3, #0
 8000c40:	617b      	str	r3, [r7, #20]
 8000c42:	e009      	b.n	8000c58 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000c44:	68bb      	ldr	r3, [r7, #8]
 8000c46:	1c5a      	adds	r2, r3, #1
 8000c48:	60ba      	str	r2, [r7, #8]
 8000c4a:	781b      	ldrb	r3, [r3, #0]
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f000 f921 	bl	8000e94 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c52:	697b      	ldr	r3, [r7, #20]
 8000c54:	3301      	adds	r3, #1
 8000c56:	617b      	str	r3, [r7, #20]
 8000c58:	697a      	ldr	r2, [r7, #20]
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	429a      	cmp	r2, r3
 8000c5e:	dbf1      	blt.n	8000c44 <_write+0x12>
  }
  return len;
 8000c60:	687b      	ldr	r3, [r7, #4]
}
 8000c62:	4618      	mov	r0, r3
 8000c64:	3718      	adds	r7, #24
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}

08000c6a <_close>:

int _close(int file)
{
 8000c6a:	b480      	push	{r7}
 8000c6c:	b083      	sub	sp, #12
 8000c6e:	af00      	add	r7, sp, #0
 8000c70:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000c72:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c76:	4618      	mov	r0, r3
 8000c78:	370c      	adds	r7, #12
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bc80      	pop	{r7}
 8000c7e:	4770      	bx	lr

08000c80 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c80:	b480      	push	{r7}
 8000c82:	b083      	sub	sp, #12
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
 8000c88:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000c8a:	683b      	ldr	r3, [r7, #0]
 8000c8c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000c90:	605a      	str	r2, [r3, #4]
  return 0;
 8000c92:	2300      	movs	r3, #0
}
 8000c94:	4618      	mov	r0, r3
 8000c96:	370c      	adds	r7, #12
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bc80      	pop	{r7}
 8000c9c:	4770      	bx	lr

08000c9e <_isatty>:

int _isatty(int file)
{
 8000c9e:	b480      	push	{r7}
 8000ca0:	b083      	sub	sp, #12
 8000ca2:	af00      	add	r7, sp, #0
 8000ca4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000ca6:	2301      	movs	r3, #1
}
 8000ca8:	4618      	mov	r0, r3
 8000caa:	370c      	adds	r7, #12
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bc80      	pop	{r7}
 8000cb0:	4770      	bx	lr

08000cb2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000cb2:	b480      	push	{r7}
 8000cb4:	b085      	sub	sp, #20
 8000cb6:	af00      	add	r7, sp, #0
 8000cb8:	60f8      	str	r0, [r7, #12]
 8000cba:	60b9      	str	r1, [r7, #8]
 8000cbc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000cbe:	2300      	movs	r3, #0
}
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	3714      	adds	r7, #20
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bc80      	pop	{r7}
 8000cc8:	4770      	bx	lr
	...

08000ccc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b086      	sub	sp, #24
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cd4:	4a14      	ldr	r2, [pc, #80]	@ (8000d28 <_sbrk+0x5c>)
 8000cd6:	4b15      	ldr	r3, [pc, #84]	@ (8000d2c <_sbrk+0x60>)
 8000cd8:	1ad3      	subs	r3, r2, r3
 8000cda:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cdc:	697b      	ldr	r3, [r7, #20]
 8000cde:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ce0:	4b13      	ldr	r3, [pc, #76]	@ (8000d30 <_sbrk+0x64>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d102      	bne.n	8000cee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ce8:	4b11      	ldr	r3, [pc, #68]	@ (8000d30 <_sbrk+0x64>)
 8000cea:	4a12      	ldr	r2, [pc, #72]	@ (8000d34 <_sbrk+0x68>)
 8000cec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cee:	4b10      	ldr	r3, [pc, #64]	@ (8000d30 <_sbrk+0x64>)
 8000cf0:	681a      	ldr	r2, [r3, #0]
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	4413      	add	r3, r2
 8000cf6:	693a      	ldr	r2, [r7, #16]
 8000cf8:	429a      	cmp	r2, r3
 8000cfa:	d207      	bcs.n	8000d0c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000cfc:	f005 f98c 	bl	8006018 <__errno>
 8000d00:	4603      	mov	r3, r0
 8000d02:	220c      	movs	r2, #12
 8000d04:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d06:	f04f 33ff 	mov.w	r3, #4294967295
 8000d0a:	e009      	b.n	8000d20 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d0c:	4b08      	ldr	r3, [pc, #32]	@ (8000d30 <_sbrk+0x64>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d12:	4b07      	ldr	r3, [pc, #28]	@ (8000d30 <_sbrk+0x64>)
 8000d14:	681a      	ldr	r2, [r3, #0]
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	4413      	add	r3, r2
 8000d1a:	4a05      	ldr	r2, [pc, #20]	@ (8000d30 <_sbrk+0x64>)
 8000d1c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d1e:	68fb      	ldr	r3, [r7, #12]
}
 8000d20:	4618      	mov	r0, r3
 8000d22:	3718      	adds	r7, #24
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	20005000 	.word	0x20005000
 8000d2c:	00000400 	.word	0x00000400
 8000d30:	2000027c 	.word	0x2000027c
 8000d34:	20000460 	.word	0x20000460

08000d38 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d3c:	bf00      	nop
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bc80      	pop	{r7}
 8000d42:	4770      	bx	lr

08000d44 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000d48:	4b11      	ldr	r3, [pc, #68]	@ (8000d90 <MX_USART1_UART_Init+0x4c>)
 8000d4a:	4a12      	ldr	r2, [pc, #72]	@ (8000d94 <MX_USART1_UART_Init+0x50>)
 8000d4c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000d4e:	4b10      	ldr	r3, [pc, #64]	@ (8000d90 <MX_USART1_UART_Init+0x4c>)
 8000d50:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000d54:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d56:	4b0e      	ldr	r3, [pc, #56]	@ (8000d90 <MX_USART1_UART_Init+0x4c>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000d5c:	4b0c      	ldr	r3, [pc, #48]	@ (8000d90 <MX_USART1_UART_Init+0x4c>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000d62:	4b0b      	ldr	r3, [pc, #44]	@ (8000d90 <MX_USART1_UART_Init+0x4c>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000d68:	4b09      	ldr	r3, [pc, #36]	@ (8000d90 <MX_USART1_UART_Init+0x4c>)
 8000d6a:	220c      	movs	r2, #12
 8000d6c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d6e:	4b08      	ldr	r3, [pc, #32]	@ (8000d90 <MX_USART1_UART_Init+0x4c>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d74:	4b06      	ldr	r3, [pc, #24]	@ (8000d90 <MX_USART1_UART_Init+0x4c>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000d7a:	4805      	ldr	r0, [pc, #20]	@ (8000d90 <MX_USART1_UART_Init+0x4c>)
 8000d7c:	f003 feeb 	bl	8004b56 <HAL_UART_Init>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d001      	beq.n	8000d8a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000d86:	f7ff fc29 	bl	80005dc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000d8a:	bf00      	nop
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	20000280 	.word	0x20000280
 8000d94:	40013800 	.word	0x40013800

08000d98 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b088      	sub	sp, #32
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da0:	f107 0310 	add.w	r3, r7, #16
 8000da4:	2200      	movs	r2, #0
 8000da6:	601a      	str	r2, [r3, #0]
 8000da8:	605a      	str	r2, [r3, #4]
 8000daa:	609a      	str	r2, [r3, #8]
 8000dac:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	4a33      	ldr	r2, [pc, #204]	@ (8000e80 <HAL_UART_MspInit+0xe8>)
 8000db4:	4293      	cmp	r3, r2
 8000db6:	d15f      	bne.n	8000e78 <HAL_UART_MspInit+0xe0>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000db8:	4b32      	ldr	r3, [pc, #200]	@ (8000e84 <HAL_UART_MspInit+0xec>)
 8000dba:	699b      	ldr	r3, [r3, #24]
 8000dbc:	4a31      	ldr	r2, [pc, #196]	@ (8000e84 <HAL_UART_MspInit+0xec>)
 8000dbe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000dc2:	6193      	str	r3, [r2, #24]
 8000dc4:	4b2f      	ldr	r3, [pc, #188]	@ (8000e84 <HAL_UART_MspInit+0xec>)
 8000dc6:	699b      	ldr	r3, [r3, #24]
 8000dc8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000dcc:	60fb      	str	r3, [r7, #12]
 8000dce:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dd0:	4b2c      	ldr	r3, [pc, #176]	@ (8000e84 <HAL_UART_MspInit+0xec>)
 8000dd2:	699b      	ldr	r3, [r3, #24]
 8000dd4:	4a2b      	ldr	r2, [pc, #172]	@ (8000e84 <HAL_UART_MspInit+0xec>)
 8000dd6:	f043 0304 	orr.w	r3, r3, #4
 8000dda:	6193      	str	r3, [r2, #24]
 8000ddc:	4b29      	ldr	r3, [pc, #164]	@ (8000e84 <HAL_UART_MspInit+0xec>)
 8000dde:	699b      	ldr	r3, [r3, #24]
 8000de0:	f003 0304 	and.w	r3, r3, #4
 8000de4:	60bb      	str	r3, [r7, #8]
 8000de6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000de8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000dec:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dee:	2302      	movs	r3, #2
 8000df0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000df2:	2303      	movs	r3, #3
 8000df4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000df6:	f107 0310 	add.w	r3, r7, #16
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	4822      	ldr	r0, [pc, #136]	@ (8000e88 <HAL_UART_MspInit+0xf0>)
 8000dfe:	f001 f973 	bl	80020e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000e02:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000e06:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e0c:	2301      	movs	r3, #1
 8000e0e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e10:	f107 0310 	add.w	r3, r7, #16
 8000e14:	4619      	mov	r1, r3
 8000e16:	481c      	ldr	r0, [pc, #112]	@ (8000e88 <HAL_UART_MspInit+0xf0>)
 8000e18:	f001 f966 	bl	80020e8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8000e1c:	4b1b      	ldr	r3, [pc, #108]	@ (8000e8c <HAL_UART_MspInit+0xf4>)
 8000e1e:	4a1c      	ldr	r2, [pc, #112]	@ (8000e90 <HAL_UART_MspInit+0xf8>)
 8000e20:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e22:	4b1a      	ldr	r3, [pc, #104]	@ (8000e8c <HAL_UART_MspInit+0xf4>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e28:	4b18      	ldr	r3, [pc, #96]	@ (8000e8c <HAL_UART_MspInit+0xf4>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000e2e:	4b17      	ldr	r3, [pc, #92]	@ (8000e8c <HAL_UART_MspInit+0xf4>)
 8000e30:	2280      	movs	r2, #128	@ 0x80
 8000e32:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e34:	4b15      	ldr	r3, [pc, #84]	@ (8000e8c <HAL_UART_MspInit+0xf4>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e3a:	4b14      	ldr	r3, [pc, #80]	@ (8000e8c <HAL_UART_MspInit+0xf4>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8000e40:	4b12      	ldr	r3, [pc, #72]	@ (8000e8c <HAL_UART_MspInit+0xf4>)
 8000e42:	2220      	movs	r2, #32
 8000e44:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000e46:	4b11      	ldr	r3, [pc, #68]	@ (8000e8c <HAL_UART_MspInit+0xf4>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000e4c:	480f      	ldr	r0, [pc, #60]	@ (8000e8c <HAL_UART_MspInit+0xf4>)
 8000e4e:	f000 fea9 	bl	8001ba4 <HAL_DMA_Init>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d001      	beq.n	8000e5c <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 8000e58:	f7ff fbc0 	bl	80005dc <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	4a0b      	ldr	r2, [pc, #44]	@ (8000e8c <HAL_UART_MspInit+0xf4>)
 8000e60:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000e62:	4a0a      	ldr	r2, [pc, #40]	@ (8000e8c <HAL_UART_MspInit+0xf4>)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000e68:	2200      	movs	r2, #0
 8000e6a:	2100      	movs	r1, #0
 8000e6c:	2025      	movs	r0, #37	@ 0x25
 8000e6e:	f000 fe62 	bl	8001b36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000e72:	2025      	movs	r0, #37	@ 0x25
 8000e74:	f000 fe7b 	bl	8001b6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000e78:	bf00      	nop
 8000e7a:	3720      	adds	r7, #32
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	40013800 	.word	0x40013800
 8000e84:	40021000 	.word	0x40021000
 8000e88:	40010800 	.word	0x40010800
 8000e8c:	200002c8 	.word	0x200002c8
 8000e90:	40020058 	.word	0x40020058

08000e94 <__io_putchar>:
  }
}

/* USER CODE BEGIN 1 */
int __io_putchar(int ch)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b082      	sub	sp, #8
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000e9c:	1d39      	adds	r1, r7, #4
 8000e9e:	f04f 33ff 	mov.w	r3, #4294967295
 8000ea2:	2201      	movs	r2, #1
 8000ea4:	4803      	ldr	r0, [pc, #12]	@ (8000eb4 <__io_putchar+0x20>)
 8000ea6:	f003 fea6 	bl	8004bf6 <HAL_UART_Transmit>
  return ch;
 8000eaa:	687b      	ldr	r3, [r7, #4]
}
 8000eac:	4618      	mov	r0, r3
 8000eae:	3708      	adds	r7, #8
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	20000280 	.word	0x20000280

08000eb8 <W25Qx_Init>:

 /**********************************************************************************
  * 函数功能: 模块初始化
  */
uint8_t W25Qx_Init(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0
	W25Qx_Reset();
 8000ebc:	f000 f806 	bl	8000ecc <W25Qx_Reset>
	return W25Qx_GetStatus();
 8000ec0:	f000 f824 	bl	8000f0c <W25Qx_GetStatus>
 8000ec4:	4603      	mov	r3, r0
}
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	bd80      	pop	{r7, pc}
	...

08000ecc <W25Qx_Reset>:


static void W25Qx_Reset(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b082      	sub	sp, #8
 8000ed0:	af00      	add	r7, sp, #0
	uint8_t cmd[2] = {RESET_ENABLE_CMD,RESET_MEMORY_CMD};
 8000ed2:	f649 1366 	movw	r3, #39270	@ 0x9966
 8000ed6:	80bb      	strh	r3, [r7, #4]

	W25Qx_Enable();
 8000ed8:	2200      	movs	r2, #0
 8000eda:	2110      	movs	r1, #16
 8000edc:	4809      	ldr	r0, [pc, #36]	@ (8000f04 <W25Qx_Reset+0x38>)
 8000ede:	f001 fa87 	bl	80023f0 <HAL_GPIO_WritePin>
	/* Send the reset command */
	HAL_SPI_Transmit(W25QX_SPI_Handler, cmd, 2, W25Qx_TIMEOUT_VALUE);
 8000ee2:	1d39      	adds	r1, r7, #4
 8000ee4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ee8:	2202      	movs	r2, #2
 8000eea:	4807      	ldr	r0, [pc, #28]	@ (8000f08 <W25Qx_Reset+0x3c>)
 8000eec:	f003 f922 	bl	8004134 <HAL_SPI_Transmit>

	W25Qx_Disable();
 8000ef0:	2201      	movs	r2, #1
 8000ef2:	2110      	movs	r1, #16
 8000ef4:	4803      	ldr	r0, [pc, #12]	@ (8000f04 <W25Qx_Reset+0x38>)
 8000ef6:	f001 fa7b 	bl	80023f0 <HAL_GPIO_WritePin>

}
 8000efa:	bf00      	nop
 8000efc:	3708      	adds	r7, #8
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	40010800 	.word	0x40010800
 8000f08:	20000220 	.word	0x20000220

08000f0c <W25Qx_GetStatus>:

 /**********************************************************************************
  * 函数功能: 获取设备状态
  */
static uint8_t W25Qx_GetStatus(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b082      	sub	sp, #8
 8000f10:	af00      	add	r7, sp, #0
	uint8_t cmd[] = {READ_STATUS_REG1_CMD};
 8000f12:	2305      	movs	r3, #5
 8000f14:	713b      	strb	r3, [r7, #4]
	uint8_t status;

	W25Qx_Enable();
 8000f16:	2200      	movs	r2, #0
 8000f18:	2110      	movs	r1, #16
 8000f1a:	4811      	ldr	r0, [pc, #68]	@ (8000f60 <W25Qx_GetStatus+0x54>)
 8000f1c:	f001 fa68 	bl	80023f0 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(W25QX_SPI_Handler, cmd, 1, W25Qx_TIMEOUT_VALUE);
 8000f20:	1d39      	adds	r1, r7, #4
 8000f22:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f26:	2201      	movs	r2, #1
 8000f28:	480e      	ldr	r0, [pc, #56]	@ (8000f64 <W25Qx_GetStatus+0x58>)
 8000f2a:	f003 f903 	bl	8004134 <HAL_SPI_Transmit>
	HAL_SPI_Receive(W25QX_SPI_Handler,&status, 1, W25Qx_TIMEOUT_VALUE);
 8000f2e:	1cf9      	adds	r1, r7, #3
 8000f30:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f34:	2201      	movs	r2, #1
 8000f36:	480b      	ldr	r0, [pc, #44]	@ (8000f64 <W25Qx_GetStatus+0x58>)
 8000f38:	f003 fa40 	bl	80043bc <HAL_SPI_Receive>


	W25Qx_Disable();
 8000f3c:	2201      	movs	r2, #1
 8000f3e:	2110      	movs	r1, #16
 8000f40:	4807      	ldr	r0, [pc, #28]	@ (8000f60 <W25Qx_GetStatus+0x54>)
 8000f42:	f001 fa55 	bl	80023f0 <HAL_GPIO_WritePin>

	/* Check the value of the register */
  if((status & W25Q128FV_FSR_BUSY) != 0)
 8000f46:	78fb      	ldrb	r3, [r7, #3]
 8000f48:	f003 0301 	and.w	r3, r3, #1
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d001      	beq.n	8000f54 <W25Qx_GetStatus+0x48>
  {
    return W25Qx_BUSY;
 8000f50:	2302      	movs	r3, #2
 8000f52:	e000      	b.n	8000f56 <W25Qx_GetStatus+0x4a>
  }
	else
	{
		return W25Qx_OK;
 8000f54:	2300      	movs	r3, #0
	}
}
 8000f56:	4618      	mov	r0, r3
 8000f58:	3708      	adds	r7, #8
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	40010800 	.word	0x40010800
 8000f64:	20000220 	.word	0x20000220

08000f68 <W25Qx_WriteEnable>:

 /**********************************************************************************
  * 函数功能: 写使能
  */
uint8_t W25Qx_WriteEnable(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b082      	sub	sp, #8
 8000f6c:	af00      	add	r7, sp, #0
	uint8_t cmd[] = {WRITE_ENABLE_CMD};
 8000f6e:	2306      	movs	r3, #6
 8000f70:	703b      	strb	r3, [r7, #0]
	uint32_t tickstart = HAL_GetTick();
 8000f72:	f000 fac9 	bl	8001508 <HAL_GetTick>
 8000f76:	6078      	str	r0, [r7, #4]

	/*Select the FLASH: Chip Select low */
	W25Qx_Enable();
 8000f78:	2200      	movs	r2, #0
 8000f7a:	2110      	movs	r1, #16
 8000f7c:	4811      	ldr	r0, [pc, #68]	@ (8000fc4 <W25Qx_WriteEnable+0x5c>)
 8000f7e:	f001 fa37 	bl	80023f0 <HAL_GPIO_WritePin>
	/* Send the read ID command */
	HAL_SPI_Transmit(W25QX_SPI_Handler, cmd, 1, W25Qx_TIMEOUT_VALUE);
 8000f82:	4639      	mov	r1, r7
 8000f84:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f88:	2201      	movs	r2, #1
 8000f8a:	480f      	ldr	r0, [pc, #60]	@ (8000fc8 <W25Qx_WriteEnable+0x60>)
 8000f8c:	f003 f8d2 	bl	8004134 <HAL_SPI_Transmit>

	/*Deselect the FLASH: Chip Select high */
	W25Qx_Disable();
 8000f90:	2201      	movs	r2, #1
 8000f92:	2110      	movs	r1, #16
 8000f94:	480b      	ldr	r0, [pc, #44]	@ (8000fc4 <W25Qx_WriteEnable+0x5c>)
 8000f96:	f001 fa2b 	bl	80023f0 <HAL_GPIO_WritePin>

	/* Wait the end of Flash writing */
	while(W25Qx_GetStatus() == W25Qx_BUSY)
 8000f9a:	e009      	b.n	8000fb0 <W25Qx_WriteEnable+0x48>
	{
		/* Check for the Timeout */
    if((HAL_GetTick() - tickstart) > W25Qx_TIMEOUT_VALUE)
 8000f9c:	f000 fab4 	bl	8001508 <HAL_GetTick>
 8000fa0:	4602      	mov	r2, r0
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	1ad3      	subs	r3, r2, r3
 8000fa6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000faa:	d901      	bls.n	8000fb0 <W25Qx_WriteEnable+0x48>
    {
			return W25Qx_TIMEOUT;
 8000fac:	2303      	movs	r3, #3
 8000fae:	e005      	b.n	8000fbc <W25Qx_WriteEnable+0x54>
	while(W25Qx_GetStatus() == W25Qx_BUSY)
 8000fb0:	f7ff ffac 	bl	8000f0c <W25Qx_GetStatus>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b02      	cmp	r3, #2
 8000fb8:	d0f0      	beq.n	8000f9c <W25Qx_WriteEnable+0x34>
    }
	}

	return W25Qx_OK;
 8000fba:	2300      	movs	r3, #0
}
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	3708      	adds	r7, #8
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	40010800 	.word	0x40010800
 8000fc8:	20000220 	.word	0x20000220

08000fcc <W25Qx_Read_ID>:

 /**********************************************************************************
  * 函数功能: 获取设备ID
  */
void W25Qx_Read_ID(uint8_t *ID)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b084      	sub	sp, #16
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
	uint8_t cmd[4] = {READ_ID_CMD,0x00,0x00,0x00};
 8000fd4:	2390      	movs	r3, #144	@ 0x90
 8000fd6:	60fb      	str	r3, [r7, #12]

	W25Qx_Enable();
 8000fd8:	2200      	movs	r2, #0
 8000fda:	2110      	movs	r1, #16
 8000fdc:	480d      	ldr	r0, [pc, #52]	@ (8001014 <W25Qx_Read_ID+0x48>)
 8000fde:	f001 fa07 	bl	80023f0 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(W25QX_SPI_Handler, cmd, 4, W25Qx_TIMEOUT_VALUE);
 8000fe2:	f107 010c 	add.w	r1, r7, #12
 8000fe6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fea:	2204      	movs	r2, #4
 8000fec:	480a      	ldr	r0, [pc, #40]	@ (8001018 <W25Qx_Read_ID+0x4c>)
 8000fee:	f003 f8a1 	bl	8004134 <HAL_SPI_Transmit>
	HAL_SPI_Receive(W25QX_SPI_Handler,ID, 2, W25Qx_TIMEOUT_VALUE);
 8000ff2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ff6:	2202      	movs	r2, #2
 8000ff8:	6879      	ldr	r1, [r7, #4]
 8000ffa:	4807      	ldr	r0, [pc, #28]	@ (8001018 <W25Qx_Read_ID+0x4c>)
 8000ffc:	f003 f9de 	bl	80043bc <HAL_SPI_Receive>

	W25Qx_Disable();
 8001000:	2201      	movs	r2, #1
 8001002:	2110      	movs	r1, #16
 8001004:	4803      	ldr	r0, [pc, #12]	@ (8001014 <W25Qx_Read_ID+0x48>)
 8001006:	f001 f9f3 	bl	80023f0 <HAL_GPIO_WritePin>

}
 800100a:	bf00      	nop
 800100c:	3710      	adds	r7, #16
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	40010800 	.word	0x40010800
 8001018:	20000220 	.word	0x20000220

0800101c <W25Qx_Read>:
 /**********************************************************************************
  * 函数功能: 读数据
  * 输入参数: 缓存数组指针、读地址、字节数
  */
uint8_t W25Qx_Read(uint8_t* pData, uint32_t ReadAddr, uint32_t Size)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b086      	sub	sp, #24
 8001020:	af00      	add	r7, sp, #0
 8001022:	60f8      	str	r0, [r7, #12]
 8001024:	60b9      	str	r1, [r7, #8]
 8001026:	607a      	str	r2, [r7, #4]
	uint8_t cmd[4];

	/* Configure the command */
	cmd[0] = READ_CMD;
 8001028:	2303      	movs	r3, #3
 800102a:	753b      	strb	r3, [r7, #20]
	cmd[1] = (uint8_t)(ReadAddr >> 16);
 800102c:	68bb      	ldr	r3, [r7, #8]
 800102e:	0c1b      	lsrs	r3, r3, #16
 8001030:	b2db      	uxtb	r3, r3
 8001032:	757b      	strb	r3, [r7, #21]
	cmd[2] = (uint8_t)(ReadAddr >> 8);
 8001034:	68bb      	ldr	r3, [r7, #8]
 8001036:	0a1b      	lsrs	r3, r3, #8
 8001038:	b2db      	uxtb	r3, r3
 800103a:	75bb      	strb	r3, [r7, #22]
	cmd[3] = (uint8_t)(ReadAddr);
 800103c:	68bb      	ldr	r3, [r7, #8]
 800103e:	b2db      	uxtb	r3, r3
 8001040:	75fb      	strb	r3, [r7, #23]

	W25Qx_Enable();
 8001042:	2200      	movs	r2, #0
 8001044:	2110      	movs	r1, #16
 8001046:	4811      	ldr	r0, [pc, #68]	@ (800108c <W25Qx_Read+0x70>)
 8001048:	f001 f9d2 	bl	80023f0 <HAL_GPIO_WritePin>

	/* Send the read ID command */
	HAL_SPI_Transmit(W25QX_SPI_Handler, cmd, 4, W25Qx_TIMEOUT_VALUE);
 800104c:	f107 0114 	add.w	r1, r7, #20
 8001050:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001054:	2204      	movs	r2, #4
 8001056:	480e      	ldr	r0, [pc, #56]	@ (8001090 <W25Qx_Read+0x74>)
 8001058:	f003 f86c 	bl	8004134 <HAL_SPI_Transmit>


	/* Reception of the data */
	if (HAL_SPI_Receive(W25QX_SPI_Handler, pData,Size,W25Qx_TIMEOUT_VALUE) != HAL_OK)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	b29a      	uxth	r2, r3
 8001060:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001064:	68f9      	ldr	r1, [r7, #12]
 8001066:	480a      	ldr	r0, [pc, #40]	@ (8001090 <W25Qx_Read+0x74>)
 8001068:	f003 f9a8 	bl	80043bc <HAL_SPI_Receive>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d001      	beq.n	8001076 <W25Qx_Read+0x5a>

  {
    return W25Qx_ERROR;
 8001072:	2301      	movs	r3, #1
 8001074:	e005      	b.n	8001082 <W25Qx_Read+0x66>
  }
	W25Qx_Disable();
 8001076:	2201      	movs	r2, #1
 8001078:	2110      	movs	r1, #16
 800107a:	4804      	ldr	r0, [pc, #16]	@ (800108c <W25Qx_Read+0x70>)
 800107c:	f001 f9b8 	bl	80023f0 <HAL_GPIO_WritePin>
	return W25Qx_OK;
 8001080:	2300      	movs	r3, #0
}
 8001082:	4618      	mov	r0, r3
 8001084:	3718      	adds	r7, #24
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	40010800 	.word	0x40010800
 8001090:	20000220 	.word	0x20000220

08001094 <W25Qx_Write>:
 /**********************************************************************************
  * 函数功能: 写数据
  * 输入参数: 缓存数组指针、写地址、字节数
  */
uint8_t W25Qx_Write(uint8_t* pData, uint32_t WriteAddr, uint32_t Size)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b08a      	sub	sp, #40	@ 0x28
 8001098:	af00      	add	r7, sp, #0
 800109a:	60f8      	str	r0, [r7, #12]
 800109c:	60b9      	str	r1, [r7, #8]
 800109e:	607a      	str	r2, [r7, #4]
	uint8_t cmd[4];
	uint32_t end_addr, current_size, current_addr;
	uint32_t tickstart = HAL_GetTick();
 80010a0:	f000 fa32 	bl	8001508 <HAL_GetTick>
 80010a4:	61f8      	str	r0, [r7, #28]

	/* Calculation of the size between the write address and the end of the page */
  current_addr = 0;
 80010a6:	2300      	movs	r3, #0
 80010a8:	623b      	str	r3, [r7, #32]

  while (current_addr <= WriteAddr)
 80010aa:	e003      	b.n	80010b4 <W25Qx_Write+0x20>
  {
    current_addr += W25Q128FV_PAGE_SIZE;
 80010ac:	6a3b      	ldr	r3, [r7, #32]
 80010ae:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80010b2:	623b      	str	r3, [r7, #32]
  while (current_addr <= WriteAddr)
 80010b4:	6a3a      	ldr	r2, [r7, #32]
 80010b6:	68bb      	ldr	r3, [r7, #8]
 80010b8:	429a      	cmp	r2, r3
 80010ba:	d9f7      	bls.n	80010ac <W25Qx_Write+0x18>
  }
  current_size = current_addr - WriteAddr;
 80010bc:	6a3a      	ldr	r2, [r7, #32]
 80010be:	68bb      	ldr	r3, [r7, #8]
 80010c0:	1ad3      	subs	r3, r2, r3
 80010c2:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check if the size of the data is less than the remaining place in the page */
  if (current_size > Size)
 80010c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	429a      	cmp	r2, r3
 80010ca:	d901      	bls.n	80010d0 <W25Qx_Write+0x3c>
  {
    current_size = Size;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Initialize the adress variables */
  current_addr = WriteAddr;
 80010d0:	68bb      	ldr	r3, [r7, #8]
 80010d2:	623b      	str	r3, [r7, #32]
  end_addr = WriteAddr + Size;
 80010d4:	68ba      	ldr	r2, [r7, #8]
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	4413      	add	r3, r2
 80010da:	61bb      	str	r3, [r7, #24]

  /* Perform the write page by page */
  do
  {
		/* Configure the command */
		cmd[0] = PAGE_PROG_CMD;
 80010dc:	2302      	movs	r3, #2
 80010de:	753b      	strb	r3, [r7, #20]
		cmd[1] = (uint8_t)(current_addr >> 16);
 80010e0:	6a3b      	ldr	r3, [r7, #32]
 80010e2:	0c1b      	lsrs	r3, r3, #16
 80010e4:	b2db      	uxtb	r3, r3
 80010e6:	757b      	strb	r3, [r7, #21]
		cmd[2] = (uint8_t)(current_addr >> 8);
 80010e8:	6a3b      	ldr	r3, [r7, #32]
 80010ea:	0a1b      	lsrs	r3, r3, #8
 80010ec:	b2db      	uxtb	r3, r3
 80010ee:	75bb      	strb	r3, [r7, #22]
		cmd[3] = (uint8_t)(current_addr);
 80010f0:	6a3b      	ldr	r3, [r7, #32]
 80010f2:	b2db      	uxtb	r3, r3
 80010f4:	75fb      	strb	r3, [r7, #23]

		/* Enable write operations */
		W25Qx_WriteEnable();
 80010f6:	f7ff ff37 	bl	8000f68 <W25Qx_WriteEnable>

		W25Qx_Enable();
 80010fa:	2200      	movs	r2, #0
 80010fc:	2110      	movs	r1, #16
 80010fe:	4828      	ldr	r0, [pc, #160]	@ (80011a0 <W25Qx_Write+0x10c>)
 8001100:	f001 f976 	bl	80023f0 <HAL_GPIO_WritePin>


		 /* Send the command */
    if (HAL_SPI_Transmit(W25QX_SPI_Handler,cmd, 4, W25Qx_TIMEOUT_VALUE) != HAL_OK)
 8001104:	f107 0114 	add.w	r1, r7, #20
 8001108:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800110c:	2204      	movs	r2, #4
 800110e:	4825      	ldr	r0, [pc, #148]	@ (80011a4 <W25Qx_Write+0x110>)
 8001110:	f003 f810 	bl	8004134 <HAL_SPI_Transmit>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <W25Qx_Write+0x8a>
    {
      return W25Qx_ERROR;
 800111a:	2301      	movs	r3, #1
 800111c:	e03b      	b.n	8001196 <W25Qx_Write+0x102>
    }


		/* Transmission of the data */
		if (HAL_SPI_Transmit(W25QX_SPI_Handler, pData,current_size, W25Qx_TIMEOUT_VALUE) != HAL_OK)
 800111e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001120:	b29a      	uxth	r2, r3
 8001122:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001126:	68f9      	ldr	r1, [r7, #12]
 8001128:	481e      	ldr	r0, [pc, #120]	@ (80011a4 <W25Qx_Write+0x110>)
 800112a:	f003 f803 	bl	8004134 <HAL_SPI_Transmit>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d001      	beq.n	8001138 <W25Qx_Write+0xa4>
    {
      return W25Qx_ERROR;
 8001134:	2301      	movs	r3, #1
 8001136:	e02e      	b.n	8001196 <W25Qx_Write+0x102>
    }
			W25Qx_Disable();
 8001138:	2201      	movs	r2, #1
 800113a:	2110      	movs	r1, #16
 800113c:	4818      	ldr	r0, [pc, #96]	@ (80011a0 <W25Qx_Write+0x10c>)
 800113e:	f001 f957 	bl	80023f0 <HAL_GPIO_WritePin>
    	/* Wait the end of Flash writing */
		while(W25Qx_GetStatus() == W25Qx_BUSY)
 8001142:	e009      	b.n	8001158 <W25Qx_Write+0xc4>
		{
			/* Check for the Timeout */
			if((HAL_GetTick() - tickstart) > W25Qx_TIMEOUT_VALUE)
 8001144:	f000 f9e0 	bl	8001508 <HAL_GetTick>
 8001148:	4602      	mov	r2, r0
 800114a:	69fb      	ldr	r3, [r7, #28]
 800114c:	1ad3      	subs	r3, r2, r3
 800114e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001152:	d901      	bls.n	8001158 <W25Qx_Write+0xc4>
			{
				return W25Qx_TIMEOUT;
 8001154:	2303      	movs	r3, #3
 8001156:	e01e      	b.n	8001196 <W25Qx_Write+0x102>
		while(W25Qx_GetStatus() == W25Qx_BUSY)
 8001158:	f7ff fed8 	bl	8000f0c <W25Qx_GetStatus>
 800115c:	4603      	mov	r3, r0
 800115e:	2b02      	cmp	r3, #2
 8001160:	d0f0      	beq.n	8001144 <W25Qx_Write+0xb0>
			}
		}

    /* Update the address and size variables for next page programming */
    current_addr += current_size;
 8001162:	6a3a      	ldr	r2, [r7, #32]
 8001164:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001166:	4413      	add	r3, r2
 8001168:	623b      	str	r3, [r7, #32]
    pData += current_size;
 800116a:	68fa      	ldr	r2, [r7, #12]
 800116c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800116e:	4413      	add	r3, r2
 8001170:	60fb      	str	r3, [r7, #12]
    current_size = ((current_addr + W25Q128FV_PAGE_SIZE) > end_addr) ? (end_addr - current_addr) : W25Q128FV_PAGE_SIZE;
 8001172:	6a3b      	ldr	r3, [r7, #32]
 8001174:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8001178:	69ba      	ldr	r2, [r7, #24]
 800117a:	429a      	cmp	r2, r3
 800117c:	d203      	bcs.n	8001186 <W25Qx_Write+0xf2>
 800117e:	69ba      	ldr	r2, [r7, #24]
 8001180:	6a3b      	ldr	r3, [r7, #32]
 8001182:	1ad3      	subs	r3, r2, r3
 8001184:	e001      	b.n	800118a <W25Qx_Write+0xf6>
 8001186:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800118a:	627b      	str	r3, [r7, #36]	@ 0x24
  } while (current_addr < end_addr);
 800118c:	6a3a      	ldr	r2, [r7, #32]
 800118e:	69bb      	ldr	r3, [r7, #24]
 8001190:	429a      	cmp	r2, r3
 8001192:	d3a3      	bcc.n	80010dc <W25Qx_Write+0x48>


	return W25Qx_OK;
 8001194:	2300      	movs	r3, #0
}
 8001196:	4618      	mov	r0, r3
 8001198:	3728      	adds	r7, #40	@ 0x28
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	40010800 	.word	0x40010800
 80011a4:	20000220 	.word	0x20000220

080011a8 <W25Qx_Erase_Block>:
 /**********************************************************************************
  * 函数功能: 块擦除
  * 输入参数: 地址
  */
uint8_t W25Qx_Erase_Block(uint32_t Address)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b084      	sub	sp, #16
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
	uint8_t cmd[4];
	uint32_t tickstart = HAL_GetTick();
 80011b0:	f000 f9aa 	bl	8001508 <HAL_GetTick>
 80011b4:	60f8      	str	r0, [r7, #12]
	cmd[0] = SECTOR_ERASE_CMD;
 80011b6:	2320      	movs	r3, #32
 80011b8:	723b      	strb	r3, [r7, #8]
	cmd[1] = (uint8_t)(Address >> 16);
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	0c1b      	lsrs	r3, r3, #16
 80011be:	b2db      	uxtb	r3, r3
 80011c0:	727b      	strb	r3, [r7, #9]
	cmd[2] = (uint8_t)(Address >> 8);
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	0a1b      	lsrs	r3, r3, #8
 80011c6:	b2db      	uxtb	r3, r3
 80011c8:	72bb      	strb	r3, [r7, #10]
	cmd[3] = (uint8_t)(Address);
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	b2db      	uxtb	r3, r3
 80011ce:	72fb      	strb	r3, [r7, #11]

	/* Enable write operations */
	W25Qx_WriteEnable();
 80011d0:	f7ff feca 	bl	8000f68 <W25Qx_WriteEnable>

	/*Select the FLASH: Chip Select low */
	W25Qx_Enable();
 80011d4:	2200      	movs	r2, #0
 80011d6:	2110      	movs	r1, #16
 80011d8:	4812      	ldr	r0, [pc, #72]	@ (8001224 <W25Qx_Erase_Block+0x7c>)
 80011da:	f001 f909 	bl	80023f0 <HAL_GPIO_WritePin>


	/* Send the SECTOR_ERASE command */
	HAL_SPI_Transmit(W25QX_SPI_Handler, cmd, 4, W25Qx_TIMEOUT_VALUE);
 80011de:	f107 0108 	add.w	r1, r7, #8
 80011e2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011e6:	2204      	movs	r2, #4
 80011e8:	480f      	ldr	r0, [pc, #60]	@ (8001228 <W25Qx_Erase_Block+0x80>)
 80011ea:	f002 ffa3 	bl	8004134 <HAL_SPI_Transmit>


	/*Deselect the FLASH: Chip Select high */
	W25Qx_Disable();
 80011ee:	2201      	movs	r2, #1
 80011f0:	2110      	movs	r1, #16
 80011f2:	480c      	ldr	r0, [pc, #48]	@ (8001224 <W25Qx_Erase_Block+0x7c>)
 80011f4:	f001 f8fc 	bl	80023f0 <HAL_GPIO_WritePin>

	/* Wait the end of Flash writing */
	while(W25Qx_GetStatus() == W25Qx_BUSY)
 80011f8:	e00a      	b.n	8001210 <W25Qx_Erase_Block+0x68>
	{
		/* Check for the Timeout */
    if((HAL_GetTick() - tickstart) > W25Q128FV_SECTOR_ERASE_MAX_TIME)
 80011fa:	f000 f985 	bl	8001508 <HAL_GetTick>
 80011fe:	4602      	mov	r2, r0
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	1ad3      	subs	r3, r2, r3
 8001204:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8001208:	4293      	cmp	r3, r2
 800120a:	d901      	bls.n	8001210 <W25Qx_Erase_Block+0x68>
    {
			return W25Qx_TIMEOUT;
 800120c:	2303      	movs	r3, #3
 800120e:	e005      	b.n	800121c <W25Qx_Erase_Block+0x74>
	while(W25Qx_GetStatus() == W25Qx_BUSY)
 8001210:	f7ff fe7c 	bl	8000f0c <W25Qx_GetStatus>
 8001214:	4603      	mov	r3, r0
 8001216:	2b02      	cmp	r3, #2
 8001218:	d0ef      	beq.n	80011fa <W25Qx_Erase_Block+0x52>
    }
	}
	return W25Qx_OK;
 800121a:	2300      	movs	r3, #0
}
 800121c:	4618      	mov	r0, r3
 800121e:	3710      	adds	r7, #16
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}
 8001224:	40010800 	.word	0x40010800
 8001228:	20000220 	.word	0x20000220

0800122c <W25QX_Test>:
	return W25Qx_OK;
}


void W25QX_Test(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 8001232:	af00      	add	r7, sp, #0
	uint8_t wData[0x100];   //写缓存数组
	uint8_t rData[0x100];   //读缓存数组
	uint8_t ID[4];          //设备ID缓存数组
	uint32_t i;

	printf("\r\n SPI-W25Q64 Example \r\n\r\n");
 8001234:	4865      	ldr	r0, [pc, #404]	@ (80013cc <W25QX_Test+0x1a0>)
 8001236:	f004 fdb1 	bl	8005d9c <puts>

	/*-Step1- 验证设备ID  ************************************************Step1*/
	W25Qx_Init();
 800123a:	f7ff fe3d 	bl	8000eb8 <W25Qx_Init>
	W25Qx_Read_ID(ID);
 800123e:	463b      	mov	r3, r7
 8001240:	4618      	mov	r0, r3
 8001242:	f7ff fec3 	bl	8000fcc <W25Qx_Read_ID>
    //第一位厂商ID固定0xEF,第二位设备ID根据容量不同,具体为：
     //W25Q16为0x14、32为0x15、40为0x12、64为0x16、80为0x13、128为0x17
	//if((ID[0] != 0xEF) | (ID[1] != 0x16))
	if((ID[0] != W25Q64_FLASH_ID >> 8) | (ID[1] != (W25Q64_FLASH_ID&0xFF)))
 8001246:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800124a:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 800124e:	781b      	ldrb	r3, [r3, #0]
 8001250:	2bef      	cmp	r3, #239	@ 0xef
 8001252:	bf14      	ite	ne
 8001254:	2301      	movne	r3, #1
 8001256:	2300      	moveq	r3, #0
 8001258:	b2da      	uxtb	r2, r3
 800125a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800125e:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 8001262:	785b      	ldrb	r3, [r3, #1]
 8001264:	2b16      	cmp	r3, #22
 8001266:	bf14      	ite	ne
 8001268:	2301      	movne	r3, #1
 800126a:	2300      	moveq	r3, #0
 800126c:	b2db      	uxtb	r3, r3
 800126e:	4313      	orrs	r3, r2
 8001270:	b2db      	uxtb	r3, r3
 8001272:	2b00      	cmp	r3, #0
 8001274:	d003      	beq.n	800127e <W25QX_Test+0x52>
	{
		printf("something wrong in Step1 \r\n");
 8001276:	4856      	ldr	r0, [pc, #344]	@ (80013d0 <W25QX_Test+0x1a4>)
 8001278:	f004 fd90 	bl	8005d9c <puts>
 800127c:	e01e      	b.n	80012bc <W25QX_Test+0x90>
	}
	else
	{
		printf(" W25Qxx ID is : ");
 800127e:	4855      	ldr	r0, [pc, #340]	@ (80013d4 <W25QX_Test+0x1a8>)
 8001280:	f004 fd1c 	bl	8005cbc <iprintf>
		for(i=0;i<2;i++)
 8001284:	2300      	movs	r3, #0
 8001286:	f8c7 3204 	str.w	r3, [r7, #516]	@ 0x204
 800128a:	e010      	b.n	80012ae <W25QX_Test+0x82>
		{
			printf("0x%02X ",ID[i]);
 800128c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001290:	f5a3 7202 	sub.w	r2, r3, #520	@ 0x208
 8001294:	f8d7 3204 	ldr.w	r3, [r7, #516]	@ 0x204
 8001298:	4413      	add	r3, r2
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	4619      	mov	r1, r3
 800129e:	484e      	ldr	r0, [pc, #312]	@ (80013d8 <W25QX_Test+0x1ac>)
 80012a0:	f004 fd0c 	bl	8005cbc <iprintf>
		for(i=0;i<2;i++)
 80012a4:	f8d7 3204 	ldr.w	r3, [r7, #516]	@ 0x204
 80012a8:	3301      	adds	r3, #1
 80012aa:	f8c7 3204 	str.w	r3, [r7, #516]	@ 0x204
 80012ae:	f8d7 3204 	ldr.w	r3, [r7, #516]	@ 0x204
 80012b2:	2b01      	cmp	r3, #1
 80012b4:	d9ea      	bls.n	800128c <W25QX_Test+0x60>
		}
		printf("\r\n");
 80012b6:	4849      	ldr	r0, [pc, #292]	@ (80013dc <W25QX_Test+0x1b0>)
 80012b8:	f004 fd70 	bl	8005d9c <puts>
	}
	/*-Step2- 擦除块  ************************************************Step2*/
	if(W25Qx_Erase_Block(0) == W25Qx_OK)
 80012bc:	2000      	movs	r0, #0
 80012be:	f7ff ff73 	bl	80011a8 <W25Qx_Erase_Block>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d103      	bne.n	80012d0 <W25QX_Test+0xa4>
		printf(" QSPI Erase Block OK!\r\n");
 80012c8:	4845      	ldr	r0, [pc, #276]	@ (80013e0 <W25QX_Test+0x1b4>)
 80012ca:	f004 fd67 	bl	8005d9c <puts>
 80012ce:	e002      	b.n	80012d6 <W25QX_Test+0xaa>
	else
		printf("something wrong in Step2\r\n");
 80012d0:	4844      	ldr	r0, [pc, #272]	@ (80013e4 <W25QX_Test+0x1b8>)
 80012d2:	f004 fd63 	bl	8005d9c <puts>
	/*-Step3- 写数据  ************************************************Step3*/
	for(i =0;i<0x100;i ++)
 80012d6:	2300      	movs	r3, #0
 80012d8:	f8c7 3204 	str.w	r3, [r7, #516]	@ 0x204
 80012dc:	e019      	b.n	8001312 <W25QX_Test+0xe6>
	{
			wData[i] = i;
 80012de:	f8d7 3204 	ldr.w	r3, [r7, #516]	@ 0x204
 80012e2:	b2d9      	uxtb	r1, r3
 80012e4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80012e8:	f5a3 7282 	sub.w	r2, r3, #260	@ 0x104
 80012ec:	f8d7 3204 	ldr.w	r3, [r7, #516]	@ 0x204
 80012f0:	4413      	add	r3, r2
 80012f2:	460a      	mov	r2, r1
 80012f4:	701a      	strb	r2, [r3, #0]
            rData[i] = 0;
 80012f6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80012fa:	f5a3 7201 	sub.w	r2, r3, #516	@ 0x204
 80012fe:	f8d7 3204 	ldr.w	r3, [r7, #516]	@ 0x204
 8001302:	4413      	add	r3, r2
 8001304:	2200      	movs	r2, #0
 8001306:	701a      	strb	r2, [r3, #0]
	for(i =0;i<0x100;i ++)
 8001308:	f8d7 3204 	ldr.w	r3, [r7, #516]	@ 0x204
 800130c:	3301      	adds	r3, #1
 800130e:	f8c7 3204 	str.w	r3, [r7, #516]	@ 0x204
 8001312:	f8d7 3204 	ldr.w	r3, [r7, #516]	@ 0x204
 8001316:	2bff      	cmp	r3, #255	@ 0xff
 8001318:	d9e1      	bls.n	80012de <W25QX_Test+0xb2>
	}

	if(W25Qx_Write(wData,0x00,0x100)== W25Qx_OK)
 800131a:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 800131e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001322:	2100      	movs	r1, #0
 8001324:	4618      	mov	r0, r3
 8001326:	f7ff feb5 	bl	8001094 <W25Qx_Write>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d103      	bne.n	8001338 <W25QX_Test+0x10c>
		printf(" QSPI Write OK!\r\n");
 8001330:	482d      	ldr	r0, [pc, #180]	@ (80013e8 <W25QX_Test+0x1bc>)
 8001332:	f004 fd33 	bl	8005d9c <puts>
 8001336:	e002      	b.n	800133e <W25QX_Test+0x112>
	else
		printf("something wrong in Step3\r\n");
 8001338:	482c      	ldr	r0, [pc, #176]	@ (80013ec <W25QX_Test+0x1c0>)
 800133a:	f004 fd2f 	bl	8005d9c <puts>
    /*-Step4- 读数据  ************************************************Step4*/

	if(W25Qx_Read(rData,0x00,0x100)== W25Qx_OK)
 800133e:	1d3b      	adds	r3, r7, #4
 8001340:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001344:	2100      	movs	r1, #0
 8001346:	4618      	mov	r0, r3
 8001348:	f7ff fe68 	bl	800101c <W25Qx_Read>
 800134c:	4603      	mov	r3, r0
 800134e:	2b00      	cmp	r3, #0
 8001350:	d103      	bne.n	800135a <W25QX_Test+0x12e>
		printf(" QSPI Read ok\r\n\r\n");
 8001352:	4827      	ldr	r0, [pc, #156]	@ (80013f0 <W25QX_Test+0x1c4>)
 8001354:	f004 fd22 	bl	8005d9c <puts>
 8001358:	e002      	b.n	8001360 <W25QX_Test+0x134>
	else
		printf("something wrong in Step4\r\n");
 800135a:	4826      	ldr	r0, [pc, #152]	@ (80013f4 <W25QX_Test+0x1c8>)
 800135c:	f004 fd1e 	bl	8005d9c <puts>
	printf("QSPI Read Data : \r\n");
 8001360:	4825      	ldr	r0, [pc, #148]	@ (80013f8 <W25QX_Test+0x1cc>)
 8001362:	f004 fd1b 	bl	8005d9c <puts>
	for(i =0;i<0x100;i++)
 8001366:	2300      	movs	r3, #0
 8001368:	f8c7 3204 	str.w	r3, [r7, #516]	@ 0x204
 800136c:	e010      	b.n	8001390 <W25QX_Test+0x164>
		printf("0x%02X  ",rData[i]);
 800136e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001372:	f5a3 7201 	sub.w	r2, r3, #516	@ 0x204
 8001376:	f8d7 3204 	ldr.w	r3, [r7, #516]	@ 0x204
 800137a:	4413      	add	r3, r2
 800137c:	781b      	ldrb	r3, [r3, #0]
 800137e:	4619      	mov	r1, r3
 8001380:	481e      	ldr	r0, [pc, #120]	@ (80013fc <W25QX_Test+0x1d0>)
 8001382:	f004 fc9b 	bl	8005cbc <iprintf>
	for(i =0;i<0x100;i++)
 8001386:	f8d7 3204 	ldr.w	r3, [r7, #516]	@ 0x204
 800138a:	3301      	adds	r3, #1
 800138c:	f8c7 3204 	str.w	r3, [r7, #516]	@ 0x204
 8001390:	f8d7 3204 	ldr.w	r3, [r7, #516]	@ 0x204
 8001394:	2bff      	cmp	r3, #255	@ 0xff
 8001396:	d9ea      	bls.n	800136e <W25QX_Test+0x142>
	printf("\r\n\r\n");
 8001398:	4819      	ldr	r0, [pc, #100]	@ (8001400 <W25QX_Test+0x1d4>)
 800139a:	f004 fcff 	bl	8005d9c <puts>
	/*-Step5- 数据对比  ************************************************Step5*/
	if(memcmp(wData,rData,0x100) == 0 )
 800139e:	1d39      	adds	r1, r7, #4
 80013a0:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 80013a4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80013a8:	4618      	mov	r0, r3
 80013aa:	f004 fdd7 	bl	8005f5c <memcmp>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d103      	bne.n	80013bc <W25QX_Test+0x190>
		printf("W25Q64FV QuadSPI Test OK\r\n");
 80013b4:	4813      	ldr	r0, [pc, #76]	@ (8001404 <W25QX_Test+0x1d8>)
 80013b6:	f004 fcf1 	bl	8005d9c <puts>
	else
		printf("W25Q64FV QuadSPI Test False\r\n");

}
 80013ba:	e002      	b.n	80013c2 <W25QX_Test+0x196>
		printf("W25Q64FV QuadSPI Test False\r\n");
 80013bc:	4812      	ldr	r0, [pc, #72]	@ (8001408 <W25QX_Test+0x1dc>)
 80013be:	f004 fced 	bl	8005d9c <puts>
}
 80013c2:	bf00      	nop
 80013c4:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	08006bfc 	.word	0x08006bfc
 80013d0:	08006c18 	.word	0x08006c18
 80013d4:	08006c34 	.word	0x08006c34
 80013d8:	08006c48 	.word	0x08006c48
 80013dc:	08006c50 	.word	0x08006c50
 80013e0:	08006c54 	.word	0x08006c54
 80013e4:	08006c6c 	.word	0x08006c6c
 80013e8:	08006c88 	.word	0x08006c88
 80013ec:	08006c9c 	.word	0x08006c9c
 80013f0:	08006cb8 	.word	0x08006cb8
 80013f4:	08006ccc 	.word	0x08006ccc
 80013f8:	08006ce8 	.word	0x08006ce8
 80013fc:	08006cfc 	.word	0x08006cfc
 8001400:	08006d08 	.word	0x08006d08
 8001404:	08006d0c 	.word	0x08006d0c
 8001408:	08006d28 	.word	0x08006d28

0800140c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800140c:	f7ff fc94 	bl	8000d38 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001410:	480b      	ldr	r0, [pc, #44]	@ (8001440 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001412:	490c      	ldr	r1, [pc, #48]	@ (8001444 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001414:	4a0c      	ldr	r2, [pc, #48]	@ (8001448 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001416:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001418:	e002      	b.n	8001420 <LoopCopyDataInit>

0800141a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800141a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800141c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800141e:	3304      	adds	r3, #4

08001420 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001420:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001422:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001424:	d3f9      	bcc.n	800141a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001426:	4a09      	ldr	r2, [pc, #36]	@ (800144c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001428:	4c09      	ldr	r4, [pc, #36]	@ (8001450 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800142a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800142c:	e001      	b.n	8001432 <LoopFillZerobss>

0800142e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800142e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001430:	3204      	adds	r2, #4

08001432 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001432:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001434:	d3fb      	bcc.n	800142e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001436:	f004 fdf5 	bl	8006024 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800143a:	f7ff f82d 	bl	8000498 <main>
  bx lr
 800143e:	4770      	bx	lr
  ldr r0, =_sdata
 8001440:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001444:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001448:	08006dc4 	.word	0x08006dc4
  ldr r2, =_sbss
 800144c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001450:	2000045c 	.word	0x2000045c

08001454 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001454:	e7fe      	b.n	8001454 <ADC1_2_IRQHandler>
	...

08001458 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800145c:	4b08      	ldr	r3, [pc, #32]	@ (8001480 <HAL_Init+0x28>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4a07      	ldr	r2, [pc, #28]	@ (8001480 <HAL_Init+0x28>)
 8001462:	f043 0310 	orr.w	r3, r3, #16
 8001466:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001468:	2003      	movs	r0, #3
 800146a:	f000 fb59 	bl	8001b20 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800146e:	200f      	movs	r0, #15
 8001470:	f000 f808 	bl	8001484 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001474:	f7ff fa46 	bl	8000904 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001478:	2300      	movs	r3, #0
}
 800147a:	4618      	mov	r0, r3
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	40022000 	.word	0x40022000

08001484 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b082      	sub	sp, #8
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800148c:	4b12      	ldr	r3, [pc, #72]	@ (80014d8 <HAL_InitTick+0x54>)
 800148e:	681a      	ldr	r2, [r3, #0]
 8001490:	4b12      	ldr	r3, [pc, #72]	@ (80014dc <HAL_InitTick+0x58>)
 8001492:	781b      	ldrb	r3, [r3, #0]
 8001494:	4619      	mov	r1, r3
 8001496:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800149a:	fbb3 f3f1 	udiv	r3, r3, r1
 800149e:	fbb2 f3f3 	udiv	r3, r2, r3
 80014a2:	4618      	mov	r0, r3
 80014a4:	f000 fb71 	bl	8001b8a <HAL_SYSTICK_Config>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d001      	beq.n	80014b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014ae:	2301      	movs	r3, #1
 80014b0:	e00e      	b.n	80014d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	2b0f      	cmp	r3, #15
 80014b6:	d80a      	bhi.n	80014ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014b8:	2200      	movs	r2, #0
 80014ba:	6879      	ldr	r1, [r7, #4]
 80014bc:	f04f 30ff 	mov.w	r0, #4294967295
 80014c0:	f000 fb39 	bl	8001b36 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014c4:	4a06      	ldr	r2, [pc, #24]	@ (80014e0 <HAL_InitTick+0x5c>)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014ca:	2300      	movs	r3, #0
 80014cc:	e000      	b.n	80014d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014ce:	2301      	movs	r3, #1
}
 80014d0:	4618      	mov	r0, r3
 80014d2:	3708      	adds	r7, #8
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	20000000 	.word	0x20000000
 80014dc:	20000008 	.word	0x20000008
 80014e0:	20000004 	.word	0x20000004

080014e4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014e8:	4b05      	ldr	r3, [pc, #20]	@ (8001500 <HAL_IncTick+0x1c>)
 80014ea:	781b      	ldrb	r3, [r3, #0]
 80014ec:	461a      	mov	r2, r3
 80014ee:	4b05      	ldr	r3, [pc, #20]	@ (8001504 <HAL_IncTick+0x20>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	4413      	add	r3, r2
 80014f4:	4a03      	ldr	r2, [pc, #12]	@ (8001504 <HAL_IncTick+0x20>)
 80014f6:	6013      	str	r3, [r2, #0]
}
 80014f8:	bf00      	nop
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bc80      	pop	{r7}
 80014fe:	4770      	bx	lr
 8001500:	20000008 	.word	0x20000008
 8001504:	2000030c 	.word	0x2000030c

08001508 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0
  return uwTick;
 800150c:	4b02      	ldr	r3, [pc, #8]	@ (8001518 <HAL_GetTick+0x10>)
 800150e:	681b      	ldr	r3, [r3, #0]
}
 8001510:	4618      	mov	r0, r3
 8001512:	46bd      	mov	sp, r7
 8001514:	bc80      	pop	{r7}
 8001516:	4770      	bx	lr
 8001518:	2000030c 	.word	0x2000030c

0800151c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b084      	sub	sp, #16
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001524:	f7ff fff0 	bl	8001508 <HAL_GetTick>
 8001528:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001534:	d005      	beq.n	8001542 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001536:	4b0a      	ldr	r3, [pc, #40]	@ (8001560 <HAL_Delay+0x44>)
 8001538:	781b      	ldrb	r3, [r3, #0]
 800153a:	461a      	mov	r2, r3
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	4413      	add	r3, r2
 8001540:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001542:	bf00      	nop
 8001544:	f7ff ffe0 	bl	8001508 <HAL_GetTick>
 8001548:	4602      	mov	r2, r0
 800154a:	68bb      	ldr	r3, [r7, #8]
 800154c:	1ad3      	subs	r3, r2, r3
 800154e:	68fa      	ldr	r2, [r7, #12]
 8001550:	429a      	cmp	r2, r3
 8001552:	d8f7      	bhi.n	8001544 <HAL_Delay+0x28>
  {
  }
}
 8001554:	bf00      	nop
 8001556:	bf00      	nop
 8001558:	3710      	adds	r7, #16
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	20000008 	.word	0x20000008

08001564 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b086      	sub	sp, #24
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800156c:	2300      	movs	r3, #0
 800156e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001570:	2300      	movs	r3, #0
 8001572:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001574:	2300      	movs	r3, #0
 8001576:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001578:	2300      	movs	r3, #0
 800157a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d101      	bne.n	8001586 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001582:	2301      	movs	r3, #1
 8001584:	e0be      	b.n	8001704 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	689b      	ldr	r3, [r3, #8]
 800158a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001590:	2b00      	cmp	r3, #0
 8001592:	d109      	bne.n	80015a8 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2200      	movs	r2, #0
 8001598:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	2200      	movs	r2, #0
 800159e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80015a2:	6878      	ldr	r0, [r7, #4]
 80015a4:	f7fe fe10 	bl	80001c8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80015a8:	6878      	ldr	r0, [r7, #4]
 80015aa:	f000 f9ab 	bl	8001904 <ADC_ConversionStop_Disable>
 80015ae:	4603      	mov	r3, r0
 80015b0:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015b6:	f003 0310 	and.w	r3, r3, #16
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	f040 8099 	bne.w	80016f2 <HAL_ADC_Init+0x18e>
 80015c0:	7dfb      	ldrb	r3, [r7, #23]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	f040 8095 	bne.w	80016f2 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015cc:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80015d0:	f023 0302 	bic.w	r3, r3, #2
 80015d4:	f043 0202 	orr.w	r2, r3, #2
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80015e4:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	7b1b      	ldrb	r3, [r3, #12]
 80015ea:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80015ec:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80015ee:	68ba      	ldr	r2, [r7, #8]
 80015f0:	4313      	orrs	r3, r2
 80015f2:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	689b      	ldr	r3, [r3, #8]
 80015f8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80015fc:	d003      	beq.n	8001606 <HAL_ADC_Init+0xa2>
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	689b      	ldr	r3, [r3, #8]
 8001602:	2b01      	cmp	r3, #1
 8001604:	d102      	bne.n	800160c <HAL_ADC_Init+0xa8>
 8001606:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800160a:	e000      	b.n	800160e <HAL_ADC_Init+0xaa>
 800160c:	2300      	movs	r3, #0
 800160e:	693a      	ldr	r2, [r7, #16]
 8001610:	4313      	orrs	r3, r2
 8001612:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	7d1b      	ldrb	r3, [r3, #20]
 8001618:	2b01      	cmp	r3, #1
 800161a:	d119      	bne.n	8001650 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	7b1b      	ldrb	r3, [r3, #12]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d109      	bne.n	8001638 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	699b      	ldr	r3, [r3, #24]
 8001628:	3b01      	subs	r3, #1
 800162a:	035a      	lsls	r2, r3, #13
 800162c:	693b      	ldr	r3, [r7, #16]
 800162e:	4313      	orrs	r3, r2
 8001630:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001634:	613b      	str	r3, [r7, #16]
 8001636:	e00b      	b.n	8001650 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800163c:	f043 0220 	orr.w	r2, r3, #32
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001648:	f043 0201 	orr.w	r2, r3, #1
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	693a      	ldr	r2, [r7, #16]
 8001660:	430a      	orrs	r2, r1
 8001662:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	689a      	ldr	r2, [r3, #8]
 800166a:	4b28      	ldr	r3, [pc, #160]	@ (800170c <HAL_ADC_Init+0x1a8>)
 800166c:	4013      	ands	r3, r2
 800166e:	687a      	ldr	r2, [r7, #4]
 8001670:	6812      	ldr	r2, [r2, #0]
 8001672:	68b9      	ldr	r1, [r7, #8]
 8001674:	430b      	orrs	r3, r1
 8001676:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	689b      	ldr	r3, [r3, #8]
 800167c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001680:	d003      	beq.n	800168a <HAL_ADC_Init+0x126>
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	689b      	ldr	r3, [r3, #8]
 8001686:	2b01      	cmp	r3, #1
 8001688:	d104      	bne.n	8001694 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	691b      	ldr	r3, [r3, #16]
 800168e:	3b01      	subs	r3, #1
 8001690:	051b      	lsls	r3, r3, #20
 8001692:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800169a:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	68fa      	ldr	r2, [r7, #12]
 80016a4:	430a      	orrs	r2, r1
 80016a6:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	689a      	ldr	r2, [r3, #8]
 80016ae:	4b18      	ldr	r3, [pc, #96]	@ (8001710 <HAL_ADC_Init+0x1ac>)
 80016b0:	4013      	ands	r3, r2
 80016b2:	68ba      	ldr	r2, [r7, #8]
 80016b4:	429a      	cmp	r2, r3
 80016b6:	d10b      	bne.n	80016d0 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2200      	movs	r2, #0
 80016bc:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016c2:	f023 0303 	bic.w	r3, r3, #3
 80016c6:	f043 0201 	orr.w	r2, r3, #1
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80016ce:	e018      	b.n	8001702 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016d4:	f023 0312 	bic.w	r3, r3, #18
 80016d8:	f043 0210 	orr.w	r2, r3, #16
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016e4:	f043 0201 	orr.w	r2, r3, #1
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80016ec:	2301      	movs	r3, #1
 80016ee:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80016f0:	e007      	b.n	8001702 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016f6:	f043 0210 	orr.w	r2, r3, #16
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 80016fe:	2301      	movs	r3, #1
 8001700:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001702:	7dfb      	ldrb	r3, [r7, #23]
}
 8001704:	4618      	mov	r0, r3
 8001706:	3718      	adds	r7, #24
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}
 800170c:	ffe1f7fd 	.word	0xffe1f7fd
 8001710:	ff1f0efe 	.word	0xff1f0efe

08001714 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001714:	b480      	push	{r7}
 8001716:	b085      	sub	sp, #20
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
 800171c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800171e:	2300      	movs	r3, #0
 8001720:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001722:	2300      	movs	r3, #0
 8001724:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800172c:	2b01      	cmp	r3, #1
 800172e:	d101      	bne.n	8001734 <HAL_ADC_ConfigChannel+0x20>
 8001730:	2302      	movs	r3, #2
 8001732:	e0dc      	b.n	80018ee <HAL_ADC_ConfigChannel+0x1da>
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2201      	movs	r2, #1
 8001738:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	2b06      	cmp	r3, #6
 8001742:	d81c      	bhi.n	800177e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	685a      	ldr	r2, [r3, #4]
 800174e:	4613      	mov	r3, r2
 8001750:	009b      	lsls	r3, r3, #2
 8001752:	4413      	add	r3, r2
 8001754:	3b05      	subs	r3, #5
 8001756:	221f      	movs	r2, #31
 8001758:	fa02 f303 	lsl.w	r3, r2, r3
 800175c:	43db      	mvns	r3, r3
 800175e:	4019      	ands	r1, r3
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	6818      	ldr	r0, [r3, #0]
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	685a      	ldr	r2, [r3, #4]
 8001768:	4613      	mov	r3, r2
 800176a:	009b      	lsls	r3, r3, #2
 800176c:	4413      	add	r3, r2
 800176e:	3b05      	subs	r3, #5
 8001770:	fa00 f203 	lsl.w	r2, r0, r3
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	430a      	orrs	r2, r1
 800177a:	635a      	str	r2, [r3, #52]	@ 0x34
 800177c:	e03c      	b.n	80017f8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	2b0c      	cmp	r3, #12
 8001784:	d81c      	bhi.n	80017c0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	685a      	ldr	r2, [r3, #4]
 8001790:	4613      	mov	r3, r2
 8001792:	009b      	lsls	r3, r3, #2
 8001794:	4413      	add	r3, r2
 8001796:	3b23      	subs	r3, #35	@ 0x23
 8001798:	221f      	movs	r2, #31
 800179a:	fa02 f303 	lsl.w	r3, r2, r3
 800179e:	43db      	mvns	r3, r3
 80017a0:	4019      	ands	r1, r3
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	6818      	ldr	r0, [r3, #0]
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	685a      	ldr	r2, [r3, #4]
 80017aa:	4613      	mov	r3, r2
 80017ac:	009b      	lsls	r3, r3, #2
 80017ae:	4413      	add	r3, r2
 80017b0:	3b23      	subs	r3, #35	@ 0x23
 80017b2:	fa00 f203 	lsl.w	r2, r0, r3
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	430a      	orrs	r2, r1
 80017bc:	631a      	str	r2, [r3, #48]	@ 0x30
 80017be:	e01b      	b.n	80017f8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	685a      	ldr	r2, [r3, #4]
 80017ca:	4613      	mov	r3, r2
 80017cc:	009b      	lsls	r3, r3, #2
 80017ce:	4413      	add	r3, r2
 80017d0:	3b41      	subs	r3, #65	@ 0x41
 80017d2:	221f      	movs	r2, #31
 80017d4:	fa02 f303 	lsl.w	r3, r2, r3
 80017d8:	43db      	mvns	r3, r3
 80017da:	4019      	ands	r1, r3
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	6818      	ldr	r0, [r3, #0]
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	685a      	ldr	r2, [r3, #4]
 80017e4:	4613      	mov	r3, r2
 80017e6:	009b      	lsls	r3, r3, #2
 80017e8:	4413      	add	r3, r2
 80017ea:	3b41      	subs	r3, #65	@ 0x41
 80017ec:	fa00 f203 	lsl.w	r2, r0, r3
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	430a      	orrs	r2, r1
 80017f6:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	2b09      	cmp	r3, #9
 80017fe:	d91c      	bls.n	800183a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	68d9      	ldr	r1, [r3, #12]
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	681a      	ldr	r2, [r3, #0]
 800180a:	4613      	mov	r3, r2
 800180c:	005b      	lsls	r3, r3, #1
 800180e:	4413      	add	r3, r2
 8001810:	3b1e      	subs	r3, #30
 8001812:	2207      	movs	r2, #7
 8001814:	fa02 f303 	lsl.w	r3, r2, r3
 8001818:	43db      	mvns	r3, r3
 800181a:	4019      	ands	r1, r3
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	6898      	ldr	r0, [r3, #8]
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	681a      	ldr	r2, [r3, #0]
 8001824:	4613      	mov	r3, r2
 8001826:	005b      	lsls	r3, r3, #1
 8001828:	4413      	add	r3, r2
 800182a:	3b1e      	subs	r3, #30
 800182c:	fa00 f203 	lsl.w	r2, r0, r3
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	430a      	orrs	r2, r1
 8001836:	60da      	str	r2, [r3, #12]
 8001838:	e019      	b.n	800186e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	6919      	ldr	r1, [r3, #16]
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	681a      	ldr	r2, [r3, #0]
 8001844:	4613      	mov	r3, r2
 8001846:	005b      	lsls	r3, r3, #1
 8001848:	4413      	add	r3, r2
 800184a:	2207      	movs	r2, #7
 800184c:	fa02 f303 	lsl.w	r3, r2, r3
 8001850:	43db      	mvns	r3, r3
 8001852:	4019      	ands	r1, r3
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	6898      	ldr	r0, [r3, #8]
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	681a      	ldr	r2, [r3, #0]
 800185c:	4613      	mov	r3, r2
 800185e:	005b      	lsls	r3, r3, #1
 8001860:	4413      	add	r3, r2
 8001862:	fa00 f203 	lsl.w	r2, r0, r3
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	430a      	orrs	r2, r1
 800186c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	2b10      	cmp	r3, #16
 8001874:	d003      	beq.n	800187e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800187a:	2b11      	cmp	r3, #17
 800187c:	d132      	bne.n	80018e4 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4a1d      	ldr	r2, [pc, #116]	@ (80018f8 <HAL_ADC_ConfigChannel+0x1e4>)
 8001884:	4293      	cmp	r3, r2
 8001886:	d125      	bne.n	80018d4 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	689b      	ldr	r3, [r3, #8]
 800188e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001892:	2b00      	cmp	r3, #0
 8001894:	d126      	bne.n	80018e4 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	689a      	ldr	r2, [r3, #8]
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 80018a4:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	2b10      	cmp	r3, #16
 80018ac:	d11a      	bne.n	80018e4 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80018ae:	4b13      	ldr	r3, [pc, #76]	@ (80018fc <HAL_ADC_ConfigChannel+0x1e8>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4a13      	ldr	r2, [pc, #76]	@ (8001900 <HAL_ADC_ConfigChannel+0x1ec>)
 80018b4:	fba2 2303 	umull	r2, r3, r2, r3
 80018b8:	0c9a      	lsrs	r2, r3, #18
 80018ba:	4613      	mov	r3, r2
 80018bc:	009b      	lsls	r3, r3, #2
 80018be:	4413      	add	r3, r2
 80018c0:	005b      	lsls	r3, r3, #1
 80018c2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80018c4:	e002      	b.n	80018cc <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80018c6:	68bb      	ldr	r3, [r7, #8]
 80018c8:	3b01      	subs	r3, #1
 80018ca:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80018cc:	68bb      	ldr	r3, [r7, #8]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d1f9      	bne.n	80018c6 <HAL_ADC_ConfigChannel+0x1b2>
 80018d2:	e007      	b.n	80018e4 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018d8:	f043 0220 	orr.w	r2, r3, #32
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 80018e0:	2301      	movs	r3, #1
 80018e2:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2200      	movs	r2, #0
 80018e8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80018ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	3714      	adds	r7, #20
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bc80      	pop	{r7}
 80018f6:	4770      	bx	lr
 80018f8:	40012400 	.word	0x40012400
 80018fc:	20000000 	.word	0x20000000
 8001900:	431bde83 	.word	0x431bde83

08001904 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b084      	sub	sp, #16
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800190c:	2300      	movs	r3, #0
 800190e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	689b      	ldr	r3, [r3, #8]
 8001916:	f003 0301 	and.w	r3, r3, #1
 800191a:	2b01      	cmp	r3, #1
 800191c:	d12e      	bne.n	800197c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	689a      	ldr	r2, [r3, #8]
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f022 0201 	bic.w	r2, r2, #1
 800192c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800192e:	f7ff fdeb 	bl	8001508 <HAL_GetTick>
 8001932:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001934:	e01b      	b.n	800196e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001936:	f7ff fde7 	bl	8001508 <HAL_GetTick>
 800193a:	4602      	mov	r2, r0
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	1ad3      	subs	r3, r2, r3
 8001940:	2b02      	cmp	r3, #2
 8001942:	d914      	bls.n	800196e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	689b      	ldr	r3, [r3, #8]
 800194a:	f003 0301 	and.w	r3, r3, #1
 800194e:	2b01      	cmp	r3, #1
 8001950:	d10d      	bne.n	800196e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001956:	f043 0210 	orr.w	r2, r3, #16
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001962:	f043 0201 	orr.w	r2, r3, #1
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 800196a:	2301      	movs	r3, #1
 800196c:	e007      	b.n	800197e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	689b      	ldr	r3, [r3, #8]
 8001974:	f003 0301 	and.w	r3, r3, #1
 8001978:	2b01      	cmp	r3, #1
 800197a:	d0dc      	beq.n	8001936 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800197c:	2300      	movs	r3, #0
}
 800197e:	4618      	mov	r0, r3
 8001980:	3710      	adds	r7, #16
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}
	...

08001988 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001988:	b480      	push	{r7}
 800198a:	b085      	sub	sp, #20
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	f003 0307 	and.w	r3, r3, #7
 8001996:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001998:	4b0c      	ldr	r3, [pc, #48]	@ (80019cc <__NVIC_SetPriorityGrouping+0x44>)
 800199a:	68db      	ldr	r3, [r3, #12]
 800199c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800199e:	68ba      	ldr	r2, [r7, #8]
 80019a0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80019a4:	4013      	ands	r3, r2
 80019a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019ac:	68bb      	ldr	r3, [r7, #8]
 80019ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019b0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80019b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80019b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019ba:	4a04      	ldr	r2, [pc, #16]	@ (80019cc <__NVIC_SetPriorityGrouping+0x44>)
 80019bc:	68bb      	ldr	r3, [r7, #8]
 80019be:	60d3      	str	r3, [r2, #12]
}
 80019c0:	bf00      	nop
 80019c2:	3714      	adds	r7, #20
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bc80      	pop	{r7}
 80019c8:	4770      	bx	lr
 80019ca:	bf00      	nop
 80019cc:	e000ed00 	.word	0xe000ed00

080019d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019d0:	b480      	push	{r7}
 80019d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019d4:	4b04      	ldr	r3, [pc, #16]	@ (80019e8 <__NVIC_GetPriorityGrouping+0x18>)
 80019d6:	68db      	ldr	r3, [r3, #12]
 80019d8:	0a1b      	lsrs	r3, r3, #8
 80019da:	f003 0307 	and.w	r3, r3, #7
}
 80019de:	4618      	mov	r0, r3
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bc80      	pop	{r7}
 80019e4:	4770      	bx	lr
 80019e6:	bf00      	nop
 80019e8:	e000ed00 	.word	0xe000ed00

080019ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b083      	sub	sp, #12
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	4603      	mov	r3, r0
 80019f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	db0b      	blt.n	8001a16 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019fe:	79fb      	ldrb	r3, [r7, #7]
 8001a00:	f003 021f 	and.w	r2, r3, #31
 8001a04:	4906      	ldr	r1, [pc, #24]	@ (8001a20 <__NVIC_EnableIRQ+0x34>)
 8001a06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a0a:	095b      	lsrs	r3, r3, #5
 8001a0c:	2001      	movs	r0, #1
 8001a0e:	fa00 f202 	lsl.w	r2, r0, r2
 8001a12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a16:	bf00      	nop
 8001a18:	370c      	adds	r7, #12
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bc80      	pop	{r7}
 8001a1e:	4770      	bx	lr
 8001a20:	e000e100 	.word	0xe000e100

08001a24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b083      	sub	sp, #12
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	6039      	str	r1, [r7, #0]
 8001a2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	db0a      	blt.n	8001a4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	b2da      	uxtb	r2, r3
 8001a3c:	490c      	ldr	r1, [pc, #48]	@ (8001a70 <__NVIC_SetPriority+0x4c>)
 8001a3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a42:	0112      	lsls	r2, r2, #4
 8001a44:	b2d2      	uxtb	r2, r2
 8001a46:	440b      	add	r3, r1
 8001a48:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a4c:	e00a      	b.n	8001a64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	b2da      	uxtb	r2, r3
 8001a52:	4908      	ldr	r1, [pc, #32]	@ (8001a74 <__NVIC_SetPriority+0x50>)
 8001a54:	79fb      	ldrb	r3, [r7, #7]
 8001a56:	f003 030f 	and.w	r3, r3, #15
 8001a5a:	3b04      	subs	r3, #4
 8001a5c:	0112      	lsls	r2, r2, #4
 8001a5e:	b2d2      	uxtb	r2, r2
 8001a60:	440b      	add	r3, r1
 8001a62:	761a      	strb	r2, [r3, #24]
}
 8001a64:	bf00      	nop
 8001a66:	370c      	adds	r7, #12
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bc80      	pop	{r7}
 8001a6c:	4770      	bx	lr
 8001a6e:	bf00      	nop
 8001a70:	e000e100 	.word	0xe000e100
 8001a74:	e000ed00 	.word	0xe000ed00

08001a78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b089      	sub	sp, #36	@ 0x24
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	60f8      	str	r0, [r7, #12]
 8001a80:	60b9      	str	r1, [r7, #8]
 8001a82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	f003 0307 	and.w	r3, r3, #7
 8001a8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a8c:	69fb      	ldr	r3, [r7, #28]
 8001a8e:	f1c3 0307 	rsb	r3, r3, #7
 8001a92:	2b04      	cmp	r3, #4
 8001a94:	bf28      	it	cs
 8001a96:	2304      	movcs	r3, #4
 8001a98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a9a:	69fb      	ldr	r3, [r7, #28]
 8001a9c:	3304      	adds	r3, #4
 8001a9e:	2b06      	cmp	r3, #6
 8001aa0:	d902      	bls.n	8001aa8 <NVIC_EncodePriority+0x30>
 8001aa2:	69fb      	ldr	r3, [r7, #28]
 8001aa4:	3b03      	subs	r3, #3
 8001aa6:	e000      	b.n	8001aaa <NVIC_EncodePriority+0x32>
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001aac:	f04f 32ff 	mov.w	r2, #4294967295
 8001ab0:	69bb      	ldr	r3, [r7, #24]
 8001ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab6:	43da      	mvns	r2, r3
 8001ab8:	68bb      	ldr	r3, [r7, #8]
 8001aba:	401a      	ands	r2, r3
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ac0:	f04f 31ff 	mov.w	r1, #4294967295
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	fa01 f303 	lsl.w	r3, r1, r3
 8001aca:	43d9      	mvns	r1, r3
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ad0:	4313      	orrs	r3, r2
         );
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	3724      	adds	r7, #36	@ 0x24
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bc80      	pop	{r7}
 8001ada:	4770      	bx	lr

08001adc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b082      	sub	sp, #8
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	3b01      	subs	r3, #1
 8001ae8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001aec:	d301      	bcc.n	8001af2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001aee:	2301      	movs	r3, #1
 8001af0:	e00f      	b.n	8001b12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001af2:	4a0a      	ldr	r2, [pc, #40]	@ (8001b1c <SysTick_Config+0x40>)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	3b01      	subs	r3, #1
 8001af8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001afa:	210f      	movs	r1, #15
 8001afc:	f04f 30ff 	mov.w	r0, #4294967295
 8001b00:	f7ff ff90 	bl	8001a24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b04:	4b05      	ldr	r3, [pc, #20]	@ (8001b1c <SysTick_Config+0x40>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b0a:	4b04      	ldr	r3, [pc, #16]	@ (8001b1c <SysTick_Config+0x40>)
 8001b0c:	2207      	movs	r2, #7
 8001b0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b10:	2300      	movs	r3, #0
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	3708      	adds	r7, #8
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	e000e010 	.word	0xe000e010

08001b20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b082      	sub	sp, #8
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b28:	6878      	ldr	r0, [r7, #4]
 8001b2a:	f7ff ff2d 	bl	8001988 <__NVIC_SetPriorityGrouping>
}
 8001b2e:	bf00      	nop
 8001b30:	3708      	adds	r7, #8
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}

08001b36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b36:	b580      	push	{r7, lr}
 8001b38:	b086      	sub	sp, #24
 8001b3a:	af00      	add	r7, sp, #0
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	60b9      	str	r1, [r7, #8]
 8001b40:	607a      	str	r2, [r7, #4]
 8001b42:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b44:	2300      	movs	r3, #0
 8001b46:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b48:	f7ff ff42 	bl	80019d0 <__NVIC_GetPriorityGrouping>
 8001b4c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b4e:	687a      	ldr	r2, [r7, #4]
 8001b50:	68b9      	ldr	r1, [r7, #8]
 8001b52:	6978      	ldr	r0, [r7, #20]
 8001b54:	f7ff ff90 	bl	8001a78 <NVIC_EncodePriority>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b5e:	4611      	mov	r1, r2
 8001b60:	4618      	mov	r0, r3
 8001b62:	f7ff ff5f 	bl	8001a24 <__NVIC_SetPriority>
}
 8001b66:	bf00      	nop
 8001b68:	3718      	adds	r7, #24
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}

08001b6e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b6e:	b580      	push	{r7, lr}
 8001b70:	b082      	sub	sp, #8
 8001b72:	af00      	add	r7, sp, #0
 8001b74:	4603      	mov	r3, r0
 8001b76:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f7ff ff35 	bl	80019ec <__NVIC_EnableIRQ>
}
 8001b82:	bf00      	nop
 8001b84:	3708      	adds	r7, #8
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}

08001b8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b8a:	b580      	push	{r7, lr}
 8001b8c:	b082      	sub	sp, #8
 8001b8e:	af00      	add	r7, sp, #0
 8001b90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b92:	6878      	ldr	r0, [r7, #4]
 8001b94:	f7ff ffa2 	bl	8001adc <SysTick_Config>
 8001b98:	4603      	mov	r3, r0
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	3708      	adds	r7, #8
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}
	...

08001ba4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b085      	sub	sp, #20
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001bac:	2300      	movs	r3, #0
 8001bae:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d101      	bne.n	8001bba <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	e043      	b.n	8001c42 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	461a      	mov	r2, r3
 8001bc0:	4b22      	ldr	r3, [pc, #136]	@ (8001c4c <HAL_DMA_Init+0xa8>)
 8001bc2:	4413      	add	r3, r2
 8001bc4:	4a22      	ldr	r2, [pc, #136]	@ (8001c50 <HAL_DMA_Init+0xac>)
 8001bc6:	fba2 2303 	umull	r2, r3, r2, r3
 8001bca:	091b      	lsrs	r3, r3, #4
 8001bcc:	009a      	lsls	r2, r3, #2
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	4a1f      	ldr	r2, [pc, #124]	@ (8001c54 <HAL_DMA_Init+0xb0>)
 8001bd6:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2202      	movs	r2, #2
 8001bdc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001bee:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8001bf2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001bfc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	68db      	ldr	r3, [r3, #12]
 8001c02:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c08:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	695b      	ldr	r3, [r3, #20]
 8001c0e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c14:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	69db      	ldr	r3, [r3, #28]
 8001c1a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001c1c:	68fa      	ldr	r2, [r7, #12]
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	68fa      	ldr	r2, [r7, #12]
 8001c28:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2201      	movs	r2, #1
 8001c34:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001c40:	2300      	movs	r3, #0
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	3714      	adds	r7, #20
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bc80      	pop	{r7}
 8001c4a:	4770      	bx	lr
 8001c4c:	bffdfff8 	.word	0xbffdfff8
 8001c50:	cccccccd 	.word	0xcccccccd
 8001c54:	40020000 	.word	0x40020000

08001c58 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b086      	sub	sp, #24
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	60f8      	str	r0, [r7, #12]
 8001c60:	60b9      	str	r1, [r7, #8]
 8001c62:	607a      	str	r2, [r7, #4]
 8001c64:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001c66:	2300      	movs	r3, #0
 8001c68:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c70:	2b01      	cmp	r3, #1
 8001c72:	d101      	bne.n	8001c78 <HAL_DMA_Start_IT+0x20>
 8001c74:	2302      	movs	r3, #2
 8001c76:	e04b      	b.n	8001d10 <HAL_DMA_Start_IT+0xb8>
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001c86:	b2db      	uxtb	r3, r3
 8001c88:	2b01      	cmp	r3, #1
 8001c8a:	d13a      	bne.n	8001d02 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	2202      	movs	r2, #2
 8001c90:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	2200      	movs	r2, #0
 8001c98:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	681a      	ldr	r2, [r3, #0]
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f022 0201 	bic.w	r2, r2, #1
 8001ca8:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	687a      	ldr	r2, [r7, #4]
 8001cae:	68b9      	ldr	r1, [r7, #8]
 8001cb0:	68f8      	ldr	r0, [r7, #12]
 8001cb2:	f000 f9eb 	bl	800208c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d008      	beq.n	8001cd0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	681a      	ldr	r2, [r3, #0]
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f042 020e 	orr.w	r2, r2, #14
 8001ccc:	601a      	str	r2, [r3, #0]
 8001cce:	e00f      	b.n	8001cf0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	681a      	ldr	r2, [r3, #0]
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f022 0204 	bic.w	r2, r2, #4
 8001cde:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	681a      	ldr	r2, [r3, #0]
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f042 020a 	orr.w	r2, r2, #10
 8001cee:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	681a      	ldr	r2, [r3, #0]
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f042 0201 	orr.w	r2, r2, #1
 8001cfe:	601a      	str	r2, [r3, #0]
 8001d00:	e005      	b.n	8001d0e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	2200      	movs	r2, #0
 8001d06:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001d0a:	2302      	movs	r3, #2
 8001d0c:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001d0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d10:	4618      	mov	r0, r3
 8001d12:	3718      	adds	r7, #24
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}

08001d18 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b085      	sub	sp, #20
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d20:	2300      	movs	r3, #0
 8001d22:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001d2a:	b2db      	uxtb	r3, r3
 8001d2c:	2b02      	cmp	r3, #2
 8001d2e:	d008      	beq.n	8001d42 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2204      	movs	r2, #4
 8001d34:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2200      	movs	r2, #0
 8001d3a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	e020      	b.n	8001d84 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	681a      	ldr	r2, [r3, #0]
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f022 020e 	bic.w	r2, r2, #14
 8001d50:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	681a      	ldr	r2, [r3, #0]
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f022 0201 	bic.w	r2, r2, #1
 8001d60:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d6a:	2101      	movs	r1, #1
 8001d6c:	fa01 f202 	lsl.w	r2, r1, r2
 8001d70:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2201      	movs	r2, #1
 8001d76:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001d82:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d84:	4618      	mov	r0, r3
 8001d86:	3714      	adds	r7, #20
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bc80      	pop	{r7}
 8001d8c:	4770      	bx	lr
	...

08001d90 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b084      	sub	sp, #16
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001da2:	b2db      	uxtb	r3, r3
 8001da4:	2b02      	cmp	r3, #2
 8001da6:	d005      	beq.n	8001db4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2204      	movs	r2, #4
 8001dac:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8001dae:	2301      	movs	r3, #1
 8001db0:	73fb      	strb	r3, [r7, #15]
 8001db2:	e051      	b.n	8001e58 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	681a      	ldr	r2, [r3, #0]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f022 020e 	bic.w	r2, r2, #14
 8001dc2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	681a      	ldr	r2, [r3, #0]
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f022 0201 	bic.w	r2, r2, #1
 8001dd2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a22      	ldr	r2, [pc, #136]	@ (8001e64 <HAL_DMA_Abort_IT+0xd4>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d029      	beq.n	8001e32 <HAL_DMA_Abort_IT+0xa2>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4a21      	ldr	r2, [pc, #132]	@ (8001e68 <HAL_DMA_Abort_IT+0xd8>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d022      	beq.n	8001e2e <HAL_DMA_Abort_IT+0x9e>
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a1f      	ldr	r2, [pc, #124]	@ (8001e6c <HAL_DMA_Abort_IT+0xdc>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d01a      	beq.n	8001e28 <HAL_DMA_Abort_IT+0x98>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4a1e      	ldr	r2, [pc, #120]	@ (8001e70 <HAL_DMA_Abort_IT+0xe0>)
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	d012      	beq.n	8001e22 <HAL_DMA_Abort_IT+0x92>
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a1c      	ldr	r2, [pc, #112]	@ (8001e74 <HAL_DMA_Abort_IT+0xe4>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d00a      	beq.n	8001e1c <HAL_DMA_Abort_IT+0x8c>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4a1b      	ldr	r2, [pc, #108]	@ (8001e78 <HAL_DMA_Abort_IT+0xe8>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d102      	bne.n	8001e16 <HAL_DMA_Abort_IT+0x86>
 8001e10:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001e14:	e00e      	b.n	8001e34 <HAL_DMA_Abort_IT+0xa4>
 8001e16:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001e1a:	e00b      	b.n	8001e34 <HAL_DMA_Abort_IT+0xa4>
 8001e1c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001e20:	e008      	b.n	8001e34 <HAL_DMA_Abort_IT+0xa4>
 8001e22:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001e26:	e005      	b.n	8001e34 <HAL_DMA_Abort_IT+0xa4>
 8001e28:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001e2c:	e002      	b.n	8001e34 <HAL_DMA_Abort_IT+0xa4>
 8001e2e:	2310      	movs	r3, #16
 8001e30:	e000      	b.n	8001e34 <HAL_DMA_Abort_IT+0xa4>
 8001e32:	2301      	movs	r3, #1
 8001e34:	4a11      	ldr	r2, [pc, #68]	@ (8001e7c <HAL_DMA_Abort_IT+0xec>)
 8001e36:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2200      	movs	r2, #0
 8001e44:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d003      	beq.n	8001e58 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e54:	6878      	ldr	r0, [r7, #4]
 8001e56:	4798      	blx	r3
    } 
  }
  return status;
 8001e58:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	3710      	adds	r7, #16
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	bf00      	nop
 8001e64:	40020008 	.word	0x40020008
 8001e68:	4002001c 	.word	0x4002001c
 8001e6c:	40020030 	.word	0x40020030
 8001e70:	40020044 	.word	0x40020044
 8001e74:	40020058 	.word	0x40020058
 8001e78:	4002006c 	.word	0x4002006c
 8001e7c:	40020000 	.word	0x40020000

08001e80 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b084      	sub	sp, #16
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e9c:	2204      	movs	r2, #4
 8001e9e:	409a      	lsls	r2, r3
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	4013      	ands	r3, r2
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d04f      	beq.n	8001f48 <HAL_DMA_IRQHandler+0xc8>
 8001ea8:	68bb      	ldr	r3, [r7, #8]
 8001eaa:	f003 0304 	and.w	r3, r3, #4
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d04a      	beq.n	8001f48 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f003 0320 	and.w	r3, r3, #32
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d107      	bne.n	8001ed0 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	681a      	ldr	r2, [r3, #0]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f022 0204 	bic.w	r2, r2, #4
 8001ece:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a66      	ldr	r2, [pc, #408]	@ (8002070 <HAL_DMA_IRQHandler+0x1f0>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d029      	beq.n	8001f2e <HAL_DMA_IRQHandler+0xae>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4a65      	ldr	r2, [pc, #404]	@ (8002074 <HAL_DMA_IRQHandler+0x1f4>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d022      	beq.n	8001f2a <HAL_DMA_IRQHandler+0xaa>
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a63      	ldr	r2, [pc, #396]	@ (8002078 <HAL_DMA_IRQHandler+0x1f8>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d01a      	beq.n	8001f24 <HAL_DMA_IRQHandler+0xa4>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4a62      	ldr	r2, [pc, #392]	@ (800207c <HAL_DMA_IRQHandler+0x1fc>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d012      	beq.n	8001f1e <HAL_DMA_IRQHandler+0x9e>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a60      	ldr	r2, [pc, #384]	@ (8002080 <HAL_DMA_IRQHandler+0x200>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d00a      	beq.n	8001f18 <HAL_DMA_IRQHandler+0x98>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a5f      	ldr	r2, [pc, #380]	@ (8002084 <HAL_DMA_IRQHandler+0x204>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d102      	bne.n	8001f12 <HAL_DMA_IRQHandler+0x92>
 8001f0c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001f10:	e00e      	b.n	8001f30 <HAL_DMA_IRQHandler+0xb0>
 8001f12:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8001f16:	e00b      	b.n	8001f30 <HAL_DMA_IRQHandler+0xb0>
 8001f18:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8001f1c:	e008      	b.n	8001f30 <HAL_DMA_IRQHandler+0xb0>
 8001f1e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001f22:	e005      	b.n	8001f30 <HAL_DMA_IRQHandler+0xb0>
 8001f24:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001f28:	e002      	b.n	8001f30 <HAL_DMA_IRQHandler+0xb0>
 8001f2a:	2340      	movs	r3, #64	@ 0x40
 8001f2c:	e000      	b.n	8001f30 <HAL_DMA_IRQHandler+0xb0>
 8001f2e:	2304      	movs	r3, #4
 8001f30:	4a55      	ldr	r2, [pc, #340]	@ (8002088 <HAL_DMA_IRQHandler+0x208>)
 8001f32:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	f000 8094 	beq.w	8002066 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f42:	6878      	ldr	r0, [r7, #4]
 8001f44:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001f46:	e08e      	b.n	8002066 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f4c:	2202      	movs	r2, #2
 8001f4e:	409a      	lsls	r2, r3
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	4013      	ands	r3, r2
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d056      	beq.n	8002006 <HAL_DMA_IRQHandler+0x186>
 8001f58:	68bb      	ldr	r3, [r7, #8]
 8001f5a:	f003 0302 	and.w	r3, r3, #2
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d051      	beq.n	8002006 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f003 0320 	and.w	r3, r3, #32
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d10b      	bne.n	8001f88 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	681a      	ldr	r2, [r3, #0]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f022 020a 	bic.w	r2, r2, #10
 8001f7e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2201      	movs	r2, #1
 8001f84:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a38      	ldr	r2, [pc, #224]	@ (8002070 <HAL_DMA_IRQHandler+0x1f0>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d029      	beq.n	8001fe6 <HAL_DMA_IRQHandler+0x166>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4a37      	ldr	r2, [pc, #220]	@ (8002074 <HAL_DMA_IRQHandler+0x1f4>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d022      	beq.n	8001fe2 <HAL_DMA_IRQHandler+0x162>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a35      	ldr	r2, [pc, #212]	@ (8002078 <HAL_DMA_IRQHandler+0x1f8>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d01a      	beq.n	8001fdc <HAL_DMA_IRQHandler+0x15c>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4a34      	ldr	r2, [pc, #208]	@ (800207c <HAL_DMA_IRQHandler+0x1fc>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d012      	beq.n	8001fd6 <HAL_DMA_IRQHandler+0x156>
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a32      	ldr	r2, [pc, #200]	@ (8002080 <HAL_DMA_IRQHandler+0x200>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d00a      	beq.n	8001fd0 <HAL_DMA_IRQHandler+0x150>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4a31      	ldr	r2, [pc, #196]	@ (8002084 <HAL_DMA_IRQHandler+0x204>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d102      	bne.n	8001fca <HAL_DMA_IRQHandler+0x14a>
 8001fc4:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001fc8:	e00e      	b.n	8001fe8 <HAL_DMA_IRQHandler+0x168>
 8001fca:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001fce:	e00b      	b.n	8001fe8 <HAL_DMA_IRQHandler+0x168>
 8001fd0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001fd4:	e008      	b.n	8001fe8 <HAL_DMA_IRQHandler+0x168>
 8001fd6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001fda:	e005      	b.n	8001fe8 <HAL_DMA_IRQHandler+0x168>
 8001fdc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001fe0:	e002      	b.n	8001fe8 <HAL_DMA_IRQHandler+0x168>
 8001fe2:	2320      	movs	r3, #32
 8001fe4:	e000      	b.n	8001fe8 <HAL_DMA_IRQHandler+0x168>
 8001fe6:	2302      	movs	r3, #2
 8001fe8:	4a27      	ldr	r2, [pc, #156]	@ (8002088 <HAL_DMA_IRQHandler+0x208>)
 8001fea:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2200      	movs	r2, #0
 8001ff0:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d034      	beq.n	8002066 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002000:	6878      	ldr	r0, [r7, #4]
 8002002:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002004:	e02f      	b.n	8002066 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800200a:	2208      	movs	r2, #8
 800200c:	409a      	lsls	r2, r3
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	4013      	ands	r3, r2
 8002012:	2b00      	cmp	r3, #0
 8002014:	d028      	beq.n	8002068 <HAL_DMA_IRQHandler+0x1e8>
 8002016:	68bb      	ldr	r3, [r7, #8]
 8002018:	f003 0308 	and.w	r3, r3, #8
 800201c:	2b00      	cmp	r3, #0
 800201e:	d023      	beq.n	8002068 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	681a      	ldr	r2, [r3, #0]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f022 020e 	bic.w	r2, r2, #14
 800202e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002038:	2101      	movs	r1, #1
 800203a:	fa01 f202 	lsl.w	r2, r1, r2
 800203e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2201      	movs	r2, #1
 8002044:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2201      	movs	r2, #1
 800204a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2200      	movs	r2, #0
 8002052:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800205a:	2b00      	cmp	r3, #0
 800205c:	d004      	beq.n	8002068 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002062:	6878      	ldr	r0, [r7, #4]
 8002064:	4798      	blx	r3
    }
  }
  return;
 8002066:	bf00      	nop
 8002068:	bf00      	nop
}
 800206a:	3710      	adds	r7, #16
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}
 8002070:	40020008 	.word	0x40020008
 8002074:	4002001c 	.word	0x4002001c
 8002078:	40020030 	.word	0x40020030
 800207c:	40020044 	.word	0x40020044
 8002080:	40020058 	.word	0x40020058
 8002084:	4002006c 	.word	0x4002006c
 8002088:	40020000 	.word	0x40020000

0800208c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800208c:	b480      	push	{r7}
 800208e:	b085      	sub	sp, #20
 8002090:	af00      	add	r7, sp, #0
 8002092:	60f8      	str	r0, [r7, #12]
 8002094:	60b9      	str	r1, [r7, #8]
 8002096:	607a      	str	r2, [r7, #4]
 8002098:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020a2:	2101      	movs	r1, #1
 80020a4:	fa01 f202 	lsl.w	r2, r1, r2
 80020a8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	683a      	ldr	r2, [r7, #0]
 80020b0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	2b10      	cmp	r3, #16
 80020b8:	d108      	bne.n	80020cc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	687a      	ldr	r2, [r7, #4]
 80020c0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	68ba      	ldr	r2, [r7, #8]
 80020c8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80020ca:	e007      	b.n	80020dc <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	68ba      	ldr	r2, [r7, #8]
 80020d2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	687a      	ldr	r2, [r7, #4]
 80020da:	60da      	str	r2, [r3, #12]
}
 80020dc:	bf00      	nop
 80020de:	3714      	adds	r7, #20
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bc80      	pop	{r7}
 80020e4:	4770      	bx	lr
	...

080020e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020e8:	b480      	push	{r7}
 80020ea:	b08b      	sub	sp, #44	@ 0x2c
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
 80020f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80020f2:	2300      	movs	r3, #0
 80020f4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80020f6:	2300      	movs	r3, #0
 80020f8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020fa:	e169      	b.n	80023d0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80020fc:	2201      	movs	r2, #1
 80020fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002100:	fa02 f303 	lsl.w	r3, r2, r3
 8002104:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	69fa      	ldr	r2, [r7, #28]
 800210c:	4013      	ands	r3, r2
 800210e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002110:	69ba      	ldr	r2, [r7, #24]
 8002112:	69fb      	ldr	r3, [r7, #28]
 8002114:	429a      	cmp	r2, r3
 8002116:	f040 8158 	bne.w	80023ca <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	4a9a      	ldr	r2, [pc, #616]	@ (8002388 <HAL_GPIO_Init+0x2a0>)
 8002120:	4293      	cmp	r3, r2
 8002122:	d05e      	beq.n	80021e2 <HAL_GPIO_Init+0xfa>
 8002124:	4a98      	ldr	r2, [pc, #608]	@ (8002388 <HAL_GPIO_Init+0x2a0>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d875      	bhi.n	8002216 <HAL_GPIO_Init+0x12e>
 800212a:	4a98      	ldr	r2, [pc, #608]	@ (800238c <HAL_GPIO_Init+0x2a4>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d058      	beq.n	80021e2 <HAL_GPIO_Init+0xfa>
 8002130:	4a96      	ldr	r2, [pc, #600]	@ (800238c <HAL_GPIO_Init+0x2a4>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d86f      	bhi.n	8002216 <HAL_GPIO_Init+0x12e>
 8002136:	4a96      	ldr	r2, [pc, #600]	@ (8002390 <HAL_GPIO_Init+0x2a8>)
 8002138:	4293      	cmp	r3, r2
 800213a:	d052      	beq.n	80021e2 <HAL_GPIO_Init+0xfa>
 800213c:	4a94      	ldr	r2, [pc, #592]	@ (8002390 <HAL_GPIO_Init+0x2a8>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d869      	bhi.n	8002216 <HAL_GPIO_Init+0x12e>
 8002142:	4a94      	ldr	r2, [pc, #592]	@ (8002394 <HAL_GPIO_Init+0x2ac>)
 8002144:	4293      	cmp	r3, r2
 8002146:	d04c      	beq.n	80021e2 <HAL_GPIO_Init+0xfa>
 8002148:	4a92      	ldr	r2, [pc, #584]	@ (8002394 <HAL_GPIO_Init+0x2ac>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d863      	bhi.n	8002216 <HAL_GPIO_Init+0x12e>
 800214e:	4a92      	ldr	r2, [pc, #584]	@ (8002398 <HAL_GPIO_Init+0x2b0>)
 8002150:	4293      	cmp	r3, r2
 8002152:	d046      	beq.n	80021e2 <HAL_GPIO_Init+0xfa>
 8002154:	4a90      	ldr	r2, [pc, #576]	@ (8002398 <HAL_GPIO_Init+0x2b0>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d85d      	bhi.n	8002216 <HAL_GPIO_Init+0x12e>
 800215a:	2b12      	cmp	r3, #18
 800215c:	d82a      	bhi.n	80021b4 <HAL_GPIO_Init+0xcc>
 800215e:	2b12      	cmp	r3, #18
 8002160:	d859      	bhi.n	8002216 <HAL_GPIO_Init+0x12e>
 8002162:	a201      	add	r2, pc, #4	@ (adr r2, 8002168 <HAL_GPIO_Init+0x80>)
 8002164:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002168:	080021e3 	.word	0x080021e3
 800216c:	080021bd 	.word	0x080021bd
 8002170:	080021cf 	.word	0x080021cf
 8002174:	08002211 	.word	0x08002211
 8002178:	08002217 	.word	0x08002217
 800217c:	08002217 	.word	0x08002217
 8002180:	08002217 	.word	0x08002217
 8002184:	08002217 	.word	0x08002217
 8002188:	08002217 	.word	0x08002217
 800218c:	08002217 	.word	0x08002217
 8002190:	08002217 	.word	0x08002217
 8002194:	08002217 	.word	0x08002217
 8002198:	08002217 	.word	0x08002217
 800219c:	08002217 	.word	0x08002217
 80021a0:	08002217 	.word	0x08002217
 80021a4:	08002217 	.word	0x08002217
 80021a8:	08002217 	.word	0x08002217
 80021ac:	080021c5 	.word	0x080021c5
 80021b0:	080021d9 	.word	0x080021d9
 80021b4:	4a79      	ldr	r2, [pc, #484]	@ (800239c <HAL_GPIO_Init+0x2b4>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d013      	beq.n	80021e2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80021ba:	e02c      	b.n	8002216 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	68db      	ldr	r3, [r3, #12]
 80021c0:	623b      	str	r3, [r7, #32]
          break;
 80021c2:	e029      	b.n	8002218 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	68db      	ldr	r3, [r3, #12]
 80021c8:	3304      	adds	r3, #4
 80021ca:	623b      	str	r3, [r7, #32]
          break;
 80021cc:	e024      	b.n	8002218 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	68db      	ldr	r3, [r3, #12]
 80021d2:	3308      	adds	r3, #8
 80021d4:	623b      	str	r3, [r7, #32]
          break;
 80021d6:	e01f      	b.n	8002218 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	68db      	ldr	r3, [r3, #12]
 80021dc:	330c      	adds	r3, #12
 80021de:	623b      	str	r3, [r7, #32]
          break;
 80021e0:	e01a      	b.n	8002218 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	689b      	ldr	r3, [r3, #8]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d102      	bne.n	80021f0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80021ea:	2304      	movs	r3, #4
 80021ec:	623b      	str	r3, [r7, #32]
          break;
 80021ee:	e013      	b.n	8002218 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	689b      	ldr	r3, [r3, #8]
 80021f4:	2b01      	cmp	r3, #1
 80021f6:	d105      	bne.n	8002204 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80021f8:	2308      	movs	r3, #8
 80021fa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	69fa      	ldr	r2, [r7, #28]
 8002200:	611a      	str	r2, [r3, #16]
          break;
 8002202:	e009      	b.n	8002218 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002204:	2308      	movs	r3, #8
 8002206:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	69fa      	ldr	r2, [r7, #28]
 800220c:	615a      	str	r2, [r3, #20]
          break;
 800220e:	e003      	b.n	8002218 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002210:	2300      	movs	r3, #0
 8002212:	623b      	str	r3, [r7, #32]
          break;
 8002214:	e000      	b.n	8002218 <HAL_GPIO_Init+0x130>
          break;
 8002216:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002218:	69bb      	ldr	r3, [r7, #24]
 800221a:	2bff      	cmp	r3, #255	@ 0xff
 800221c:	d801      	bhi.n	8002222 <HAL_GPIO_Init+0x13a>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	e001      	b.n	8002226 <HAL_GPIO_Init+0x13e>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	3304      	adds	r3, #4
 8002226:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002228:	69bb      	ldr	r3, [r7, #24]
 800222a:	2bff      	cmp	r3, #255	@ 0xff
 800222c:	d802      	bhi.n	8002234 <HAL_GPIO_Init+0x14c>
 800222e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002230:	009b      	lsls	r3, r3, #2
 8002232:	e002      	b.n	800223a <HAL_GPIO_Init+0x152>
 8002234:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002236:	3b08      	subs	r3, #8
 8002238:	009b      	lsls	r3, r3, #2
 800223a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800223c:	697b      	ldr	r3, [r7, #20]
 800223e:	681a      	ldr	r2, [r3, #0]
 8002240:	210f      	movs	r1, #15
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	fa01 f303 	lsl.w	r3, r1, r3
 8002248:	43db      	mvns	r3, r3
 800224a:	401a      	ands	r2, r3
 800224c:	6a39      	ldr	r1, [r7, #32]
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	fa01 f303 	lsl.w	r3, r1, r3
 8002254:	431a      	orrs	r2, r3
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002262:	2b00      	cmp	r3, #0
 8002264:	f000 80b1 	beq.w	80023ca <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002268:	4b4d      	ldr	r3, [pc, #308]	@ (80023a0 <HAL_GPIO_Init+0x2b8>)
 800226a:	699b      	ldr	r3, [r3, #24]
 800226c:	4a4c      	ldr	r2, [pc, #304]	@ (80023a0 <HAL_GPIO_Init+0x2b8>)
 800226e:	f043 0301 	orr.w	r3, r3, #1
 8002272:	6193      	str	r3, [r2, #24]
 8002274:	4b4a      	ldr	r3, [pc, #296]	@ (80023a0 <HAL_GPIO_Init+0x2b8>)
 8002276:	699b      	ldr	r3, [r3, #24]
 8002278:	f003 0301 	and.w	r3, r3, #1
 800227c:	60bb      	str	r3, [r7, #8]
 800227e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002280:	4a48      	ldr	r2, [pc, #288]	@ (80023a4 <HAL_GPIO_Init+0x2bc>)
 8002282:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002284:	089b      	lsrs	r3, r3, #2
 8002286:	3302      	adds	r3, #2
 8002288:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800228c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800228e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002290:	f003 0303 	and.w	r3, r3, #3
 8002294:	009b      	lsls	r3, r3, #2
 8002296:	220f      	movs	r2, #15
 8002298:	fa02 f303 	lsl.w	r3, r2, r3
 800229c:	43db      	mvns	r3, r3
 800229e:	68fa      	ldr	r2, [r7, #12]
 80022a0:	4013      	ands	r3, r2
 80022a2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	4a40      	ldr	r2, [pc, #256]	@ (80023a8 <HAL_GPIO_Init+0x2c0>)
 80022a8:	4293      	cmp	r3, r2
 80022aa:	d013      	beq.n	80022d4 <HAL_GPIO_Init+0x1ec>
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	4a3f      	ldr	r2, [pc, #252]	@ (80023ac <HAL_GPIO_Init+0x2c4>)
 80022b0:	4293      	cmp	r3, r2
 80022b2:	d00d      	beq.n	80022d0 <HAL_GPIO_Init+0x1e8>
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	4a3e      	ldr	r2, [pc, #248]	@ (80023b0 <HAL_GPIO_Init+0x2c8>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d007      	beq.n	80022cc <HAL_GPIO_Init+0x1e4>
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	4a3d      	ldr	r2, [pc, #244]	@ (80023b4 <HAL_GPIO_Init+0x2cc>)
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d101      	bne.n	80022c8 <HAL_GPIO_Init+0x1e0>
 80022c4:	2303      	movs	r3, #3
 80022c6:	e006      	b.n	80022d6 <HAL_GPIO_Init+0x1ee>
 80022c8:	2304      	movs	r3, #4
 80022ca:	e004      	b.n	80022d6 <HAL_GPIO_Init+0x1ee>
 80022cc:	2302      	movs	r3, #2
 80022ce:	e002      	b.n	80022d6 <HAL_GPIO_Init+0x1ee>
 80022d0:	2301      	movs	r3, #1
 80022d2:	e000      	b.n	80022d6 <HAL_GPIO_Init+0x1ee>
 80022d4:	2300      	movs	r3, #0
 80022d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80022d8:	f002 0203 	and.w	r2, r2, #3
 80022dc:	0092      	lsls	r2, r2, #2
 80022de:	4093      	lsls	r3, r2
 80022e0:	68fa      	ldr	r2, [r7, #12]
 80022e2:	4313      	orrs	r3, r2
 80022e4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80022e6:	492f      	ldr	r1, [pc, #188]	@ (80023a4 <HAL_GPIO_Init+0x2bc>)
 80022e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022ea:	089b      	lsrs	r3, r3, #2
 80022ec:	3302      	adds	r3, #2
 80022ee:	68fa      	ldr	r2, [r7, #12]
 80022f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d006      	beq.n	800230e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002300:	4b2d      	ldr	r3, [pc, #180]	@ (80023b8 <HAL_GPIO_Init+0x2d0>)
 8002302:	689a      	ldr	r2, [r3, #8]
 8002304:	492c      	ldr	r1, [pc, #176]	@ (80023b8 <HAL_GPIO_Init+0x2d0>)
 8002306:	69bb      	ldr	r3, [r7, #24]
 8002308:	4313      	orrs	r3, r2
 800230a:	608b      	str	r3, [r1, #8]
 800230c:	e006      	b.n	800231c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800230e:	4b2a      	ldr	r3, [pc, #168]	@ (80023b8 <HAL_GPIO_Init+0x2d0>)
 8002310:	689a      	ldr	r2, [r3, #8]
 8002312:	69bb      	ldr	r3, [r7, #24]
 8002314:	43db      	mvns	r3, r3
 8002316:	4928      	ldr	r1, [pc, #160]	@ (80023b8 <HAL_GPIO_Init+0x2d0>)
 8002318:	4013      	ands	r3, r2
 800231a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002324:	2b00      	cmp	r3, #0
 8002326:	d006      	beq.n	8002336 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002328:	4b23      	ldr	r3, [pc, #140]	@ (80023b8 <HAL_GPIO_Init+0x2d0>)
 800232a:	68da      	ldr	r2, [r3, #12]
 800232c:	4922      	ldr	r1, [pc, #136]	@ (80023b8 <HAL_GPIO_Init+0x2d0>)
 800232e:	69bb      	ldr	r3, [r7, #24]
 8002330:	4313      	orrs	r3, r2
 8002332:	60cb      	str	r3, [r1, #12]
 8002334:	e006      	b.n	8002344 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002336:	4b20      	ldr	r3, [pc, #128]	@ (80023b8 <HAL_GPIO_Init+0x2d0>)
 8002338:	68da      	ldr	r2, [r3, #12]
 800233a:	69bb      	ldr	r3, [r7, #24]
 800233c:	43db      	mvns	r3, r3
 800233e:	491e      	ldr	r1, [pc, #120]	@ (80023b8 <HAL_GPIO_Init+0x2d0>)
 8002340:	4013      	ands	r3, r2
 8002342:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800234c:	2b00      	cmp	r3, #0
 800234e:	d006      	beq.n	800235e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002350:	4b19      	ldr	r3, [pc, #100]	@ (80023b8 <HAL_GPIO_Init+0x2d0>)
 8002352:	685a      	ldr	r2, [r3, #4]
 8002354:	4918      	ldr	r1, [pc, #96]	@ (80023b8 <HAL_GPIO_Init+0x2d0>)
 8002356:	69bb      	ldr	r3, [r7, #24]
 8002358:	4313      	orrs	r3, r2
 800235a:	604b      	str	r3, [r1, #4]
 800235c:	e006      	b.n	800236c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800235e:	4b16      	ldr	r3, [pc, #88]	@ (80023b8 <HAL_GPIO_Init+0x2d0>)
 8002360:	685a      	ldr	r2, [r3, #4]
 8002362:	69bb      	ldr	r3, [r7, #24]
 8002364:	43db      	mvns	r3, r3
 8002366:	4914      	ldr	r1, [pc, #80]	@ (80023b8 <HAL_GPIO_Init+0x2d0>)
 8002368:	4013      	ands	r3, r2
 800236a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002374:	2b00      	cmp	r3, #0
 8002376:	d021      	beq.n	80023bc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002378:	4b0f      	ldr	r3, [pc, #60]	@ (80023b8 <HAL_GPIO_Init+0x2d0>)
 800237a:	681a      	ldr	r2, [r3, #0]
 800237c:	490e      	ldr	r1, [pc, #56]	@ (80023b8 <HAL_GPIO_Init+0x2d0>)
 800237e:	69bb      	ldr	r3, [r7, #24]
 8002380:	4313      	orrs	r3, r2
 8002382:	600b      	str	r3, [r1, #0]
 8002384:	e021      	b.n	80023ca <HAL_GPIO_Init+0x2e2>
 8002386:	bf00      	nop
 8002388:	10320000 	.word	0x10320000
 800238c:	10310000 	.word	0x10310000
 8002390:	10220000 	.word	0x10220000
 8002394:	10210000 	.word	0x10210000
 8002398:	10120000 	.word	0x10120000
 800239c:	10110000 	.word	0x10110000
 80023a0:	40021000 	.word	0x40021000
 80023a4:	40010000 	.word	0x40010000
 80023a8:	40010800 	.word	0x40010800
 80023ac:	40010c00 	.word	0x40010c00
 80023b0:	40011000 	.word	0x40011000
 80023b4:	40011400 	.word	0x40011400
 80023b8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80023bc:	4b0b      	ldr	r3, [pc, #44]	@ (80023ec <HAL_GPIO_Init+0x304>)
 80023be:	681a      	ldr	r2, [r3, #0]
 80023c0:	69bb      	ldr	r3, [r7, #24]
 80023c2:	43db      	mvns	r3, r3
 80023c4:	4909      	ldr	r1, [pc, #36]	@ (80023ec <HAL_GPIO_Init+0x304>)
 80023c6:	4013      	ands	r3, r2
 80023c8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80023ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023cc:	3301      	adds	r3, #1
 80023ce:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	681a      	ldr	r2, [r3, #0]
 80023d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023d6:	fa22 f303 	lsr.w	r3, r2, r3
 80023da:	2b00      	cmp	r3, #0
 80023dc:	f47f ae8e 	bne.w	80020fc <HAL_GPIO_Init+0x14>
  }
}
 80023e0:	bf00      	nop
 80023e2:	bf00      	nop
 80023e4:	372c      	adds	r7, #44	@ 0x2c
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bc80      	pop	{r7}
 80023ea:	4770      	bx	lr
 80023ec:	40010400 	.word	0x40010400

080023f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b083      	sub	sp, #12
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
 80023f8:	460b      	mov	r3, r1
 80023fa:	807b      	strh	r3, [r7, #2]
 80023fc:	4613      	mov	r3, r2
 80023fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002400:	787b      	ldrb	r3, [r7, #1]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d003      	beq.n	800240e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002406:	887a      	ldrh	r2, [r7, #2]
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800240c:	e003      	b.n	8002416 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800240e:	887b      	ldrh	r3, [r7, #2]
 8002410:	041a      	lsls	r2, r3, #16
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	611a      	str	r2, [r3, #16]
}
 8002416:	bf00      	nop
 8002418:	370c      	adds	r7, #12
 800241a:	46bd      	mov	sp, r7
 800241c:	bc80      	pop	{r7}
 800241e:	4770      	bx	lr

08002420 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b082      	sub	sp, #8
 8002424:	af00      	add	r7, sp, #0
 8002426:	4603      	mov	r3, r0
 8002428:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800242a:	4b08      	ldr	r3, [pc, #32]	@ (800244c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800242c:	695a      	ldr	r2, [r3, #20]
 800242e:	88fb      	ldrh	r3, [r7, #6]
 8002430:	4013      	ands	r3, r2
 8002432:	2b00      	cmp	r3, #0
 8002434:	d006      	beq.n	8002444 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002436:	4a05      	ldr	r2, [pc, #20]	@ (800244c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002438:	88fb      	ldrh	r3, [r7, #6]
 800243a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800243c:	88fb      	ldrh	r3, [r7, #6]
 800243e:	4618      	mov	r0, r3
 8002440:	f7fe fadc 	bl	80009fc <HAL_GPIO_EXTI_Callback>
  }
}
 8002444:	bf00      	nop
 8002446:	3708      	adds	r7, #8
 8002448:	46bd      	mov	sp, r7
 800244a:	bd80      	pop	{r7, pc}
 800244c:	40010400 	.word	0x40010400

08002450 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b084      	sub	sp, #16
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d101      	bne.n	8002462 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800245e:	2301      	movs	r3, #1
 8002460:	e12b      	b.n	80026ba <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002468:	b2db      	uxtb	r3, r3
 800246a:	2b00      	cmp	r3, #0
 800246c:	d106      	bne.n	800247c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2200      	movs	r2, #0
 8002472:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002476:	6878      	ldr	r0, [r7, #4]
 8002478:	f7fd ffbe 	bl	80003f8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2224      	movs	r2, #36	@ 0x24
 8002480:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	681a      	ldr	r2, [r3, #0]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f022 0201 	bic.w	r2, r2, #1
 8002492:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	681a      	ldr	r2, [r3, #0]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80024a2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	681a      	ldr	r2, [r3, #0]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80024b2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80024b4:	f001 f84e 	bl	8003554 <HAL_RCC_GetPCLK1Freq>
 80024b8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	4a81      	ldr	r2, [pc, #516]	@ (80026c4 <HAL_I2C_Init+0x274>)
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d807      	bhi.n	80024d4 <HAL_I2C_Init+0x84>
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	4a80      	ldr	r2, [pc, #512]	@ (80026c8 <HAL_I2C_Init+0x278>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	bf94      	ite	ls
 80024cc:	2301      	movls	r3, #1
 80024ce:	2300      	movhi	r3, #0
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	e006      	b.n	80024e2 <HAL_I2C_Init+0x92>
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	4a7d      	ldr	r2, [pc, #500]	@ (80026cc <HAL_I2C_Init+0x27c>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	bf94      	ite	ls
 80024dc:	2301      	movls	r3, #1
 80024de:	2300      	movhi	r3, #0
 80024e0:	b2db      	uxtb	r3, r3
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d001      	beq.n	80024ea <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80024e6:	2301      	movs	r3, #1
 80024e8:	e0e7      	b.n	80026ba <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	4a78      	ldr	r2, [pc, #480]	@ (80026d0 <HAL_I2C_Init+0x280>)
 80024ee:	fba2 2303 	umull	r2, r3, r2, r3
 80024f2:	0c9b      	lsrs	r3, r3, #18
 80024f4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	68ba      	ldr	r2, [r7, #8]
 8002506:	430a      	orrs	r2, r1
 8002508:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	6a1b      	ldr	r3, [r3, #32]
 8002510:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	4a6a      	ldr	r2, [pc, #424]	@ (80026c4 <HAL_I2C_Init+0x274>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d802      	bhi.n	8002524 <HAL_I2C_Init+0xd4>
 800251e:	68bb      	ldr	r3, [r7, #8]
 8002520:	3301      	adds	r3, #1
 8002522:	e009      	b.n	8002538 <HAL_I2C_Init+0xe8>
 8002524:	68bb      	ldr	r3, [r7, #8]
 8002526:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800252a:	fb02 f303 	mul.w	r3, r2, r3
 800252e:	4a69      	ldr	r2, [pc, #420]	@ (80026d4 <HAL_I2C_Init+0x284>)
 8002530:	fba2 2303 	umull	r2, r3, r2, r3
 8002534:	099b      	lsrs	r3, r3, #6
 8002536:	3301      	adds	r3, #1
 8002538:	687a      	ldr	r2, [r7, #4]
 800253a:	6812      	ldr	r2, [r2, #0]
 800253c:	430b      	orrs	r3, r1
 800253e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	69db      	ldr	r3, [r3, #28]
 8002546:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800254a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	495c      	ldr	r1, [pc, #368]	@ (80026c4 <HAL_I2C_Init+0x274>)
 8002554:	428b      	cmp	r3, r1
 8002556:	d819      	bhi.n	800258c <HAL_I2C_Init+0x13c>
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	1e59      	subs	r1, r3, #1
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	005b      	lsls	r3, r3, #1
 8002562:	fbb1 f3f3 	udiv	r3, r1, r3
 8002566:	1c59      	adds	r1, r3, #1
 8002568:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800256c:	400b      	ands	r3, r1
 800256e:	2b00      	cmp	r3, #0
 8002570:	d00a      	beq.n	8002588 <HAL_I2C_Init+0x138>
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	1e59      	subs	r1, r3, #1
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	005b      	lsls	r3, r3, #1
 800257c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002580:	3301      	adds	r3, #1
 8002582:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002586:	e051      	b.n	800262c <HAL_I2C_Init+0x1dc>
 8002588:	2304      	movs	r3, #4
 800258a:	e04f      	b.n	800262c <HAL_I2C_Init+0x1dc>
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	689b      	ldr	r3, [r3, #8]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d111      	bne.n	80025b8 <HAL_I2C_Init+0x168>
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	1e58      	subs	r0, r3, #1
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6859      	ldr	r1, [r3, #4]
 800259c:	460b      	mov	r3, r1
 800259e:	005b      	lsls	r3, r3, #1
 80025a0:	440b      	add	r3, r1
 80025a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80025a6:	3301      	adds	r3, #1
 80025a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	bf0c      	ite	eq
 80025b0:	2301      	moveq	r3, #1
 80025b2:	2300      	movne	r3, #0
 80025b4:	b2db      	uxtb	r3, r3
 80025b6:	e012      	b.n	80025de <HAL_I2C_Init+0x18e>
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	1e58      	subs	r0, r3, #1
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6859      	ldr	r1, [r3, #4]
 80025c0:	460b      	mov	r3, r1
 80025c2:	009b      	lsls	r3, r3, #2
 80025c4:	440b      	add	r3, r1
 80025c6:	0099      	lsls	r1, r3, #2
 80025c8:	440b      	add	r3, r1
 80025ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80025ce:	3301      	adds	r3, #1
 80025d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	bf0c      	ite	eq
 80025d8:	2301      	moveq	r3, #1
 80025da:	2300      	movne	r3, #0
 80025dc:	b2db      	uxtb	r3, r3
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d001      	beq.n	80025e6 <HAL_I2C_Init+0x196>
 80025e2:	2301      	movs	r3, #1
 80025e4:	e022      	b.n	800262c <HAL_I2C_Init+0x1dc>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	689b      	ldr	r3, [r3, #8]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d10e      	bne.n	800260c <HAL_I2C_Init+0x1bc>
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	1e58      	subs	r0, r3, #1
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6859      	ldr	r1, [r3, #4]
 80025f6:	460b      	mov	r3, r1
 80025f8:	005b      	lsls	r3, r3, #1
 80025fa:	440b      	add	r3, r1
 80025fc:	fbb0 f3f3 	udiv	r3, r0, r3
 8002600:	3301      	adds	r3, #1
 8002602:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002606:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800260a:	e00f      	b.n	800262c <HAL_I2C_Init+0x1dc>
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	1e58      	subs	r0, r3, #1
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6859      	ldr	r1, [r3, #4]
 8002614:	460b      	mov	r3, r1
 8002616:	009b      	lsls	r3, r3, #2
 8002618:	440b      	add	r3, r1
 800261a:	0099      	lsls	r1, r3, #2
 800261c:	440b      	add	r3, r1
 800261e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002622:	3301      	adds	r3, #1
 8002624:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002628:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800262c:	6879      	ldr	r1, [r7, #4]
 800262e:	6809      	ldr	r1, [r1, #0]
 8002630:	4313      	orrs	r3, r2
 8002632:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	69da      	ldr	r2, [r3, #28]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6a1b      	ldr	r3, [r3, #32]
 8002646:	431a      	orrs	r2, r3
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	430a      	orrs	r2, r1
 800264e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	689b      	ldr	r3, [r3, #8]
 8002656:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800265a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800265e:	687a      	ldr	r2, [r7, #4]
 8002660:	6911      	ldr	r1, [r2, #16]
 8002662:	687a      	ldr	r2, [r7, #4]
 8002664:	68d2      	ldr	r2, [r2, #12]
 8002666:	4311      	orrs	r1, r2
 8002668:	687a      	ldr	r2, [r7, #4]
 800266a:	6812      	ldr	r2, [r2, #0]
 800266c:	430b      	orrs	r3, r1
 800266e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	68db      	ldr	r3, [r3, #12]
 8002676:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	695a      	ldr	r2, [r3, #20]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	699b      	ldr	r3, [r3, #24]
 8002682:	431a      	orrs	r2, r3
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	430a      	orrs	r2, r1
 800268a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	681a      	ldr	r2, [r3, #0]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f042 0201 	orr.w	r2, r2, #1
 800269a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2200      	movs	r2, #0
 80026a0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2220      	movs	r2, #32
 80026a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2200      	movs	r2, #0
 80026ae:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2200      	movs	r2, #0
 80026b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80026b8:	2300      	movs	r3, #0
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	3710      	adds	r7, #16
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}
 80026c2:	bf00      	nop
 80026c4:	000186a0 	.word	0x000186a0
 80026c8:	001e847f 	.word	0x001e847f
 80026cc:	003d08ff 	.word	0x003d08ff
 80026d0:	431bde83 	.word	0x431bde83
 80026d4:	10624dd3 	.word	0x10624dd3

080026d8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b088      	sub	sp, #32
 80026dc:	af02      	add	r7, sp, #8
 80026de:	60f8      	str	r0, [r7, #12]
 80026e0:	4608      	mov	r0, r1
 80026e2:	4611      	mov	r1, r2
 80026e4:	461a      	mov	r2, r3
 80026e6:	4603      	mov	r3, r0
 80026e8:	817b      	strh	r3, [r7, #10]
 80026ea:	460b      	mov	r3, r1
 80026ec:	813b      	strh	r3, [r7, #8]
 80026ee:	4613      	mov	r3, r2
 80026f0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80026f2:	f7fe ff09 	bl	8001508 <HAL_GetTick>
 80026f6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80026fe:	b2db      	uxtb	r3, r3
 8002700:	2b20      	cmp	r3, #32
 8002702:	f040 80d9 	bne.w	80028b8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	9300      	str	r3, [sp, #0]
 800270a:	2319      	movs	r3, #25
 800270c:	2201      	movs	r2, #1
 800270e:	496d      	ldr	r1, [pc, #436]	@ (80028c4 <HAL_I2C_Mem_Write+0x1ec>)
 8002710:	68f8      	ldr	r0, [r7, #12]
 8002712:	f000 f971 	bl	80029f8 <I2C_WaitOnFlagUntilTimeout>
 8002716:	4603      	mov	r3, r0
 8002718:	2b00      	cmp	r3, #0
 800271a:	d001      	beq.n	8002720 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800271c:	2302      	movs	r3, #2
 800271e:	e0cc      	b.n	80028ba <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002726:	2b01      	cmp	r3, #1
 8002728:	d101      	bne.n	800272e <HAL_I2C_Mem_Write+0x56>
 800272a:	2302      	movs	r3, #2
 800272c:	e0c5      	b.n	80028ba <HAL_I2C_Mem_Write+0x1e2>
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	2201      	movs	r2, #1
 8002732:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f003 0301 	and.w	r3, r3, #1
 8002740:	2b01      	cmp	r3, #1
 8002742:	d007      	beq.n	8002754 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	681a      	ldr	r2, [r3, #0]
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f042 0201 	orr.w	r2, r2, #1
 8002752:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	681a      	ldr	r2, [r3, #0]
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002762:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	2221      	movs	r2, #33	@ 0x21
 8002768:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	2240      	movs	r2, #64	@ 0x40
 8002770:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	2200      	movs	r2, #0
 8002778:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	6a3a      	ldr	r2, [r7, #32]
 800277e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002784:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800278a:	b29a      	uxth	r2, r3
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	4a4d      	ldr	r2, [pc, #308]	@ (80028c8 <HAL_I2C_Mem_Write+0x1f0>)
 8002794:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002796:	88f8      	ldrh	r0, [r7, #6]
 8002798:	893a      	ldrh	r2, [r7, #8]
 800279a:	8979      	ldrh	r1, [r7, #10]
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	9301      	str	r3, [sp, #4]
 80027a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027a2:	9300      	str	r3, [sp, #0]
 80027a4:	4603      	mov	r3, r0
 80027a6:	68f8      	ldr	r0, [r7, #12]
 80027a8:	f000 f890 	bl	80028cc <I2C_RequestMemoryWrite>
 80027ac:	4603      	mov	r3, r0
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d052      	beq.n	8002858 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
 80027b4:	e081      	b.n	80028ba <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027b6:	697a      	ldr	r2, [r7, #20]
 80027b8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80027ba:	68f8      	ldr	r0, [r7, #12]
 80027bc:	f000 fa36 	bl	8002c2c <I2C_WaitOnTXEFlagUntilTimeout>
 80027c0:	4603      	mov	r3, r0
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d00d      	beq.n	80027e2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027ca:	2b04      	cmp	r3, #4
 80027cc:	d107      	bne.n	80027de <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	681a      	ldr	r2, [r3, #0]
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80027dc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80027de:	2301      	movs	r3, #1
 80027e0:	e06b      	b.n	80028ba <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027e6:	781a      	ldrb	r2, [r3, #0]
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027f2:	1c5a      	adds	r2, r3, #1
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027fc:	3b01      	subs	r3, #1
 80027fe:	b29a      	uxth	r2, r3
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002808:	b29b      	uxth	r3, r3
 800280a:	3b01      	subs	r3, #1
 800280c:	b29a      	uxth	r2, r3
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	695b      	ldr	r3, [r3, #20]
 8002818:	f003 0304 	and.w	r3, r3, #4
 800281c:	2b04      	cmp	r3, #4
 800281e:	d11b      	bne.n	8002858 <HAL_I2C_Mem_Write+0x180>
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002824:	2b00      	cmp	r3, #0
 8002826:	d017      	beq.n	8002858 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800282c:	781a      	ldrb	r2, [r3, #0]
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002838:	1c5a      	adds	r2, r3, #1
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002842:	3b01      	subs	r3, #1
 8002844:	b29a      	uxth	r2, r3
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800284e:	b29b      	uxth	r3, r3
 8002850:	3b01      	subs	r3, #1
 8002852:	b29a      	uxth	r2, r3
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800285c:	2b00      	cmp	r3, #0
 800285e:	d1aa      	bne.n	80027b6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002860:	697a      	ldr	r2, [r7, #20]
 8002862:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002864:	68f8      	ldr	r0, [r7, #12]
 8002866:	f000 fa29 	bl	8002cbc <I2C_WaitOnBTFFlagUntilTimeout>
 800286a:	4603      	mov	r3, r0
 800286c:	2b00      	cmp	r3, #0
 800286e:	d00d      	beq.n	800288c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002874:	2b04      	cmp	r3, #4
 8002876:	d107      	bne.n	8002888 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	681a      	ldr	r2, [r3, #0]
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002886:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002888:	2301      	movs	r3, #1
 800288a:	e016      	b.n	80028ba <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	681a      	ldr	r2, [r3, #0]
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800289a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	2220      	movs	r2, #32
 80028a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	2200      	movs	r2, #0
 80028a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	2200      	movs	r2, #0
 80028b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80028b4:	2300      	movs	r3, #0
 80028b6:	e000      	b.n	80028ba <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80028b8:	2302      	movs	r3, #2
  }
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	3718      	adds	r7, #24
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}
 80028c2:	bf00      	nop
 80028c4:	00100002 	.word	0x00100002
 80028c8:	ffff0000 	.word	0xffff0000

080028cc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b088      	sub	sp, #32
 80028d0:	af02      	add	r7, sp, #8
 80028d2:	60f8      	str	r0, [r7, #12]
 80028d4:	4608      	mov	r0, r1
 80028d6:	4611      	mov	r1, r2
 80028d8:	461a      	mov	r2, r3
 80028da:	4603      	mov	r3, r0
 80028dc:	817b      	strh	r3, [r7, #10]
 80028de:	460b      	mov	r3, r1
 80028e0:	813b      	strh	r3, [r7, #8]
 80028e2:	4613      	mov	r3, r2
 80028e4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	681a      	ldr	r2, [r3, #0]
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80028f4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80028f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028f8:	9300      	str	r3, [sp, #0]
 80028fa:	6a3b      	ldr	r3, [r7, #32]
 80028fc:	2200      	movs	r2, #0
 80028fe:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002902:	68f8      	ldr	r0, [r7, #12]
 8002904:	f000 f878 	bl	80029f8 <I2C_WaitOnFlagUntilTimeout>
 8002908:	4603      	mov	r3, r0
 800290a:	2b00      	cmp	r3, #0
 800290c:	d00d      	beq.n	800292a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002918:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800291c:	d103      	bne.n	8002926 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002924:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002926:	2303      	movs	r3, #3
 8002928:	e05f      	b.n	80029ea <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800292a:	897b      	ldrh	r3, [r7, #10]
 800292c:	b2db      	uxtb	r3, r3
 800292e:	461a      	mov	r2, r3
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002938:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800293a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800293c:	6a3a      	ldr	r2, [r7, #32]
 800293e:	492d      	ldr	r1, [pc, #180]	@ (80029f4 <I2C_RequestMemoryWrite+0x128>)
 8002940:	68f8      	ldr	r0, [r7, #12]
 8002942:	f000 f8d3 	bl	8002aec <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002946:	4603      	mov	r3, r0
 8002948:	2b00      	cmp	r3, #0
 800294a:	d001      	beq.n	8002950 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800294c:	2301      	movs	r3, #1
 800294e:	e04c      	b.n	80029ea <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002950:	2300      	movs	r3, #0
 8002952:	617b      	str	r3, [r7, #20]
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	695b      	ldr	r3, [r3, #20]
 800295a:	617b      	str	r3, [r7, #20]
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	699b      	ldr	r3, [r3, #24]
 8002962:	617b      	str	r3, [r7, #20]
 8002964:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002966:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002968:	6a39      	ldr	r1, [r7, #32]
 800296a:	68f8      	ldr	r0, [r7, #12]
 800296c:	f000 f95e 	bl	8002c2c <I2C_WaitOnTXEFlagUntilTimeout>
 8002970:	4603      	mov	r3, r0
 8002972:	2b00      	cmp	r3, #0
 8002974:	d00d      	beq.n	8002992 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800297a:	2b04      	cmp	r3, #4
 800297c:	d107      	bne.n	800298e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	681a      	ldr	r2, [r3, #0]
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800298c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	e02b      	b.n	80029ea <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002992:	88fb      	ldrh	r3, [r7, #6]
 8002994:	2b01      	cmp	r3, #1
 8002996:	d105      	bne.n	80029a4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002998:	893b      	ldrh	r3, [r7, #8]
 800299a:	b2da      	uxtb	r2, r3
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	611a      	str	r2, [r3, #16]
 80029a2:	e021      	b.n	80029e8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80029a4:	893b      	ldrh	r3, [r7, #8]
 80029a6:	0a1b      	lsrs	r3, r3, #8
 80029a8:	b29b      	uxth	r3, r3
 80029aa:	b2da      	uxtb	r2, r3
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80029b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029b4:	6a39      	ldr	r1, [r7, #32]
 80029b6:	68f8      	ldr	r0, [r7, #12]
 80029b8:	f000 f938 	bl	8002c2c <I2C_WaitOnTXEFlagUntilTimeout>
 80029bc:	4603      	mov	r3, r0
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d00d      	beq.n	80029de <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029c6:	2b04      	cmp	r3, #4
 80029c8:	d107      	bne.n	80029da <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	681a      	ldr	r2, [r3, #0]
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80029d8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	e005      	b.n	80029ea <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80029de:	893b      	ldrh	r3, [r7, #8]
 80029e0:	b2da      	uxtb	r2, r3
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80029e8:	2300      	movs	r3, #0
}
 80029ea:	4618      	mov	r0, r3
 80029ec:	3718      	adds	r7, #24
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}
 80029f2:	bf00      	nop
 80029f4:	00010002 	.word	0x00010002

080029f8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b084      	sub	sp, #16
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	60f8      	str	r0, [r7, #12]
 8002a00:	60b9      	str	r1, [r7, #8]
 8002a02:	603b      	str	r3, [r7, #0]
 8002a04:	4613      	mov	r3, r2
 8002a06:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a08:	e048      	b.n	8002a9c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a10:	d044      	beq.n	8002a9c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a12:	f7fe fd79 	bl	8001508 <HAL_GetTick>
 8002a16:	4602      	mov	r2, r0
 8002a18:	69bb      	ldr	r3, [r7, #24]
 8002a1a:	1ad3      	subs	r3, r2, r3
 8002a1c:	683a      	ldr	r2, [r7, #0]
 8002a1e:	429a      	cmp	r2, r3
 8002a20:	d302      	bcc.n	8002a28 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d139      	bne.n	8002a9c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	0c1b      	lsrs	r3, r3, #16
 8002a2c:	b2db      	uxtb	r3, r3
 8002a2e:	2b01      	cmp	r3, #1
 8002a30:	d10d      	bne.n	8002a4e <I2C_WaitOnFlagUntilTimeout+0x56>
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	695b      	ldr	r3, [r3, #20]
 8002a38:	43da      	mvns	r2, r3
 8002a3a:	68bb      	ldr	r3, [r7, #8]
 8002a3c:	4013      	ands	r3, r2
 8002a3e:	b29b      	uxth	r3, r3
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	bf0c      	ite	eq
 8002a44:	2301      	moveq	r3, #1
 8002a46:	2300      	movne	r3, #0
 8002a48:	b2db      	uxtb	r3, r3
 8002a4a:	461a      	mov	r2, r3
 8002a4c:	e00c      	b.n	8002a68 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	699b      	ldr	r3, [r3, #24]
 8002a54:	43da      	mvns	r2, r3
 8002a56:	68bb      	ldr	r3, [r7, #8]
 8002a58:	4013      	ands	r3, r2
 8002a5a:	b29b      	uxth	r3, r3
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	bf0c      	ite	eq
 8002a60:	2301      	moveq	r3, #1
 8002a62:	2300      	movne	r3, #0
 8002a64:	b2db      	uxtb	r3, r3
 8002a66:	461a      	mov	r2, r3
 8002a68:	79fb      	ldrb	r3, [r7, #7]
 8002a6a:	429a      	cmp	r2, r3
 8002a6c:	d116      	bne.n	8002a9c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	2200      	movs	r2, #0
 8002a72:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	2220      	movs	r2, #32
 8002a78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a88:	f043 0220 	orr.w	r2, r3, #32
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	2200      	movs	r2, #0
 8002a94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	e023      	b.n	8002ae4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a9c:	68bb      	ldr	r3, [r7, #8]
 8002a9e:	0c1b      	lsrs	r3, r3, #16
 8002aa0:	b2db      	uxtb	r3, r3
 8002aa2:	2b01      	cmp	r3, #1
 8002aa4:	d10d      	bne.n	8002ac2 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	695b      	ldr	r3, [r3, #20]
 8002aac:	43da      	mvns	r2, r3
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	b29b      	uxth	r3, r3
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	bf0c      	ite	eq
 8002ab8:	2301      	moveq	r3, #1
 8002aba:	2300      	movne	r3, #0
 8002abc:	b2db      	uxtb	r3, r3
 8002abe:	461a      	mov	r2, r3
 8002ac0:	e00c      	b.n	8002adc <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	699b      	ldr	r3, [r3, #24]
 8002ac8:	43da      	mvns	r2, r3
 8002aca:	68bb      	ldr	r3, [r7, #8]
 8002acc:	4013      	ands	r3, r2
 8002ace:	b29b      	uxth	r3, r3
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	bf0c      	ite	eq
 8002ad4:	2301      	moveq	r3, #1
 8002ad6:	2300      	movne	r3, #0
 8002ad8:	b2db      	uxtb	r3, r3
 8002ada:	461a      	mov	r2, r3
 8002adc:	79fb      	ldrb	r3, [r7, #7]
 8002ade:	429a      	cmp	r2, r3
 8002ae0:	d093      	beq.n	8002a0a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002ae2:	2300      	movs	r3, #0
}
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	3710      	adds	r7, #16
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd80      	pop	{r7, pc}

08002aec <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b084      	sub	sp, #16
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	60f8      	str	r0, [r7, #12]
 8002af4:	60b9      	str	r1, [r7, #8]
 8002af6:	607a      	str	r2, [r7, #4]
 8002af8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002afa:	e071      	b.n	8002be0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	695b      	ldr	r3, [r3, #20]
 8002b02:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b06:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b0a:	d123      	bne.n	8002b54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	681a      	ldr	r2, [r3, #0]
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b1a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002b24:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	2200      	movs	r2, #0
 8002b2a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	2220      	movs	r2, #32
 8002b30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	2200      	movs	r2, #0
 8002b38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b40:	f043 0204 	orr.w	r2, r3, #4
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002b50:	2301      	movs	r3, #1
 8002b52:	e067      	b.n	8002c24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b5a:	d041      	beq.n	8002be0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b5c:	f7fe fcd4 	bl	8001508 <HAL_GetTick>
 8002b60:	4602      	mov	r2, r0
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	1ad3      	subs	r3, r2, r3
 8002b66:	687a      	ldr	r2, [r7, #4]
 8002b68:	429a      	cmp	r2, r3
 8002b6a:	d302      	bcc.n	8002b72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d136      	bne.n	8002be0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002b72:	68bb      	ldr	r3, [r7, #8]
 8002b74:	0c1b      	lsrs	r3, r3, #16
 8002b76:	b2db      	uxtb	r3, r3
 8002b78:	2b01      	cmp	r3, #1
 8002b7a:	d10c      	bne.n	8002b96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	695b      	ldr	r3, [r3, #20]
 8002b82:	43da      	mvns	r2, r3
 8002b84:	68bb      	ldr	r3, [r7, #8]
 8002b86:	4013      	ands	r3, r2
 8002b88:	b29b      	uxth	r3, r3
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	bf14      	ite	ne
 8002b8e:	2301      	movne	r3, #1
 8002b90:	2300      	moveq	r3, #0
 8002b92:	b2db      	uxtb	r3, r3
 8002b94:	e00b      	b.n	8002bae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	699b      	ldr	r3, [r3, #24]
 8002b9c:	43da      	mvns	r2, r3
 8002b9e:	68bb      	ldr	r3, [r7, #8]
 8002ba0:	4013      	ands	r3, r2
 8002ba2:	b29b      	uxth	r3, r3
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	bf14      	ite	ne
 8002ba8:	2301      	movne	r3, #1
 8002baa:	2300      	moveq	r3, #0
 8002bac:	b2db      	uxtb	r3, r3
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d016      	beq.n	8002be0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	2220      	movs	r2, #32
 8002bbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bcc:	f043 0220 	orr.w	r2, r3, #32
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	e021      	b.n	8002c24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002be0:	68bb      	ldr	r3, [r7, #8]
 8002be2:	0c1b      	lsrs	r3, r3, #16
 8002be4:	b2db      	uxtb	r3, r3
 8002be6:	2b01      	cmp	r3, #1
 8002be8:	d10c      	bne.n	8002c04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	695b      	ldr	r3, [r3, #20]
 8002bf0:	43da      	mvns	r2, r3
 8002bf2:	68bb      	ldr	r3, [r7, #8]
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	b29b      	uxth	r3, r3
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	bf14      	ite	ne
 8002bfc:	2301      	movne	r3, #1
 8002bfe:	2300      	moveq	r3, #0
 8002c00:	b2db      	uxtb	r3, r3
 8002c02:	e00b      	b.n	8002c1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	699b      	ldr	r3, [r3, #24]
 8002c0a:	43da      	mvns	r2, r3
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	4013      	ands	r3, r2
 8002c10:	b29b      	uxth	r3, r3
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	bf14      	ite	ne
 8002c16:	2301      	movne	r3, #1
 8002c18:	2300      	moveq	r3, #0
 8002c1a:	b2db      	uxtb	r3, r3
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	f47f af6d 	bne.w	8002afc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002c22:	2300      	movs	r3, #0
}
 8002c24:	4618      	mov	r0, r3
 8002c26:	3710      	adds	r7, #16
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bd80      	pop	{r7, pc}

08002c2c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b084      	sub	sp, #16
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	60f8      	str	r0, [r7, #12]
 8002c34:	60b9      	str	r1, [r7, #8]
 8002c36:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002c38:	e034      	b.n	8002ca4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002c3a:	68f8      	ldr	r0, [r7, #12]
 8002c3c:	f000 f886 	bl	8002d4c <I2C_IsAcknowledgeFailed>
 8002c40:	4603      	mov	r3, r0
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d001      	beq.n	8002c4a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
 8002c48:	e034      	b.n	8002cb4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c4a:	68bb      	ldr	r3, [r7, #8]
 8002c4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c50:	d028      	beq.n	8002ca4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c52:	f7fe fc59 	bl	8001508 <HAL_GetTick>
 8002c56:	4602      	mov	r2, r0
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	1ad3      	subs	r3, r2, r3
 8002c5c:	68ba      	ldr	r2, [r7, #8]
 8002c5e:	429a      	cmp	r2, r3
 8002c60:	d302      	bcc.n	8002c68 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002c62:	68bb      	ldr	r3, [r7, #8]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d11d      	bne.n	8002ca4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	695b      	ldr	r3, [r3, #20]
 8002c6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c72:	2b80      	cmp	r3, #128	@ 0x80
 8002c74:	d016      	beq.n	8002ca4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	2200      	movs	r2, #0
 8002c7a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	2220      	movs	r2, #32
 8002c80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	2200      	movs	r2, #0
 8002c88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c90:	f043 0220 	orr.w	r2, r3, #32
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	e007      	b.n	8002cb4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	695b      	ldr	r3, [r3, #20]
 8002caa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002cae:	2b80      	cmp	r3, #128	@ 0x80
 8002cb0:	d1c3      	bne.n	8002c3a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002cb2:	2300      	movs	r3, #0
}
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	3710      	adds	r7, #16
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}

08002cbc <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b084      	sub	sp, #16
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	60f8      	str	r0, [r7, #12]
 8002cc4:	60b9      	str	r1, [r7, #8]
 8002cc6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002cc8:	e034      	b.n	8002d34 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002cca:	68f8      	ldr	r0, [r7, #12]
 8002ccc:	f000 f83e 	bl	8002d4c <I2C_IsAcknowledgeFailed>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d001      	beq.n	8002cda <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	e034      	b.n	8002d44 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cda:	68bb      	ldr	r3, [r7, #8]
 8002cdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ce0:	d028      	beq.n	8002d34 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ce2:	f7fe fc11 	bl	8001508 <HAL_GetTick>
 8002ce6:	4602      	mov	r2, r0
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	1ad3      	subs	r3, r2, r3
 8002cec:	68ba      	ldr	r2, [r7, #8]
 8002cee:	429a      	cmp	r2, r3
 8002cf0:	d302      	bcc.n	8002cf8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002cf2:	68bb      	ldr	r3, [r7, #8]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d11d      	bne.n	8002d34 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	695b      	ldr	r3, [r3, #20]
 8002cfe:	f003 0304 	and.w	r3, r3, #4
 8002d02:	2b04      	cmp	r3, #4
 8002d04:	d016      	beq.n	8002d34 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	2220      	movs	r2, #32
 8002d10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	2200      	movs	r2, #0
 8002d18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d20:	f043 0220 	orr.w	r2, r3, #32
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002d30:	2301      	movs	r3, #1
 8002d32:	e007      	b.n	8002d44 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	695b      	ldr	r3, [r3, #20]
 8002d3a:	f003 0304 	and.w	r3, r3, #4
 8002d3e:	2b04      	cmp	r3, #4
 8002d40:	d1c3      	bne.n	8002cca <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002d42:	2300      	movs	r3, #0
}
 8002d44:	4618      	mov	r0, r3
 8002d46:	3710      	adds	r7, #16
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bd80      	pop	{r7, pc}

08002d4c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b083      	sub	sp, #12
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	695b      	ldr	r3, [r3, #20]
 8002d5a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d5e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d62:	d11b      	bne.n	8002d9c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002d6c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2200      	movs	r2, #0
 8002d72:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2220      	movs	r2, #32
 8002d78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2200      	movs	r2, #0
 8002d80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d88:	f043 0204 	orr.w	r2, r3, #4
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2200      	movs	r2, #0
 8002d94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002d98:	2301      	movs	r3, #1
 8002d9a:	e000      	b.n	8002d9e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002d9c:	2300      	movs	r3, #0
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	370c      	adds	r7, #12
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bc80      	pop	{r7}
 8002da6:	4770      	bx	lr

08002da8 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002da8:	b480      	push	{r7}
 8002daa:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8002dac:	4b03      	ldr	r3, [pc, #12]	@ (8002dbc <HAL_PWR_EnableBkUpAccess+0x14>)
 8002dae:	2201      	movs	r2, #1
 8002db0:	601a      	str	r2, [r3, #0]
}
 8002db2:	bf00      	nop
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bc80      	pop	{r7}
 8002db8:	4770      	bx	lr
 8002dba:	bf00      	nop
 8002dbc:	420e0020 	.word	0x420e0020

08002dc0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b086      	sub	sp, #24
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d101      	bne.n	8002dd2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e272      	b.n	80032b8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f003 0301 	and.w	r3, r3, #1
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	f000 8087 	beq.w	8002eee <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002de0:	4b92      	ldr	r3, [pc, #584]	@ (800302c <HAL_RCC_OscConfig+0x26c>)
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	f003 030c 	and.w	r3, r3, #12
 8002de8:	2b04      	cmp	r3, #4
 8002dea:	d00c      	beq.n	8002e06 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002dec:	4b8f      	ldr	r3, [pc, #572]	@ (800302c <HAL_RCC_OscConfig+0x26c>)
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	f003 030c 	and.w	r3, r3, #12
 8002df4:	2b08      	cmp	r3, #8
 8002df6:	d112      	bne.n	8002e1e <HAL_RCC_OscConfig+0x5e>
 8002df8:	4b8c      	ldr	r3, [pc, #560]	@ (800302c <HAL_RCC_OscConfig+0x26c>)
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e04:	d10b      	bne.n	8002e1e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e06:	4b89      	ldr	r3, [pc, #548]	@ (800302c <HAL_RCC_OscConfig+0x26c>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d06c      	beq.n	8002eec <HAL_RCC_OscConfig+0x12c>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d168      	bne.n	8002eec <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	e24c      	b.n	80032b8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e26:	d106      	bne.n	8002e36 <HAL_RCC_OscConfig+0x76>
 8002e28:	4b80      	ldr	r3, [pc, #512]	@ (800302c <HAL_RCC_OscConfig+0x26c>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a7f      	ldr	r2, [pc, #508]	@ (800302c <HAL_RCC_OscConfig+0x26c>)
 8002e2e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e32:	6013      	str	r3, [r2, #0]
 8002e34:	e02e      	b.n	8002e94 <HAL_RCC_OscConfig+0xd4>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d10c      	bne.n	8002e58 <HAL_RCC_OscConfig+0x98>
 8002e3e:	4b7b      	ldr	r3, [pc, #492]	@ (800302c <HAL_RCC_OscConfig+0x26c>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4a7a      	ldr	r2, [pc, #488]	@ (800302c <HAL_RCC_OscConfig+0x26c>)
 8002e44:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e48:	6013      	str	r3, [r2, #0]
 8002e4a:	4b78      	ldr	r3, [pc, #480]	@ (800302c <HAL_RCC_OscConfig+0x26c>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a77      	ldr	r2, [pc, #476]	@ (800302c <HAL_RCC_OscConfig+0x26c>)
 8002e50:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002e54:	6013      	str	r3, [r2, #0]
 8002e56:	e01d      	b.n	8002e94 <HAL_RCC_OscConfig+0xd4>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002e60:	d10c      	bne.n	8002e7c <HAL_RCC_OscConfig+0xbc>
 8002e62:	4b72      	ldr	r3, [pc, #456]	@ (800302c <HAL_RCC_OscConfig+0x26c>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4a71      	ldr	r2, [pc, #452]	@ (800302c <HAL_RCC_OscConfig+0x26c>)
 8002e68:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002e6c:	6013      	str	r3, [r2, #0]
 8002e6e:	4b6f      	ldr	r3, [pc, #444]	@ (800302c <HAL_RCC_OscConfig+0x26c>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4a6e      	ldr	r2, [pc, #440]	@ (800302c <HAL_RCC_OscConfig+0x26c>)
 8002e74:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e78:	6013      	str	r3, [r2, #0]
 8002e7a:	e00b      	b.n	8002e94 <HAL_RCC_OscConfig+0xd4>
 8002e7c:	4b6b      	ldr	r3, [pc, #428]	@ (800302c <HAL_RCC_OscConfig+0x26c>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a6a      	ldr	r2, [pc, #424]	@ (800302c <HAL_RCC_OscConfig+0x26c>)
 8002e82:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e86:	6013      	str	r3, [r2, #0]
 8002e88:	4b68      	ldr	r3, [pc, #416]	@ (800302c <HAL_RCC_OscConfig+0x26c>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a67      	ldr	r2, [pc, #412]	@ (800302c <HAL_RCC_OscConfig+0x26c>)
 8002e8e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002e92:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d013      	beq.n	8002ec4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e9c:	f7fe fb34 	bl	8001508 <HAL_GetTick>
 8002ea0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ea2:	e008      	b.n	8002eb6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ea4:	f7fe fb30 	bl	8001508 <HAL_GetTick>
 8002ea8:	4602      	mov	r2, r0
 8002eaa:	693b      	ldr	r3, [r7, #16]
 8002eac:	1ad3      	subs	r3, r2, r3
 8002eae:	2b64      	cmp	r3, #100	@ 0x64
 8002eb0:	d901      	bls.n	8002eb6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002eb2:	2303      	movs	r3, #3
 8002eb4:	e200      	b.n	80032b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002eb6:	4b5d      	ldr	r3, [pc, #372]	@ (800302c <HAL_RCC_OscConfig+0x26c>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d0f0      	beq.n	8002ea4 <HAL_RCC_OscConfig+0xe4>
 8002ec2:	e014      	b.n	8002eee <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ec4:	f7fe fb20 	bl	8001508 <HAL_GetTick>
 8002ec8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002eca:	e008      	b.n	8002ede <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ecc:	f7fe fb1c 	bl	8001508 <HAL_GetTick>
 8002ed0:	4602      	mov	r2, r0
 8002ed2:	693b      	ldr	r3, [r7, #16]
 8002ed4:	1ad3      	subs	r3, r2, r3
 8002ed6:	2b64      	cmp	r3, #100	@ 0x64
 8002ed8:	d901      	bls.n	8002ede <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002eda:	2303      	movs	r3, #3
 8002edc:	e1ec      	b.n	80032b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ede:	4b53      	ldr	r3, [pc, #332]	@ (800302c <HAL_RCC_OscConfig+0x26c>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d1f0      	bne.n	8002ecc <HAL_RCC_OscConfig+0x10c>
 8002eea:	e000      	b.n	8002eee <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002eec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f003 0302 	and.w	r3, r3, #2
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d063      	beq.n	8002fc2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002efa:	4b4c      	ldr	r3, [pc, #304]	@ (800302c <HAL_RCC_OscConfig+0x26c>)
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	f003 030c 	and.w	r3, r3, #12
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d00b      	beq.n	8002f1e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002f06:	4b49      	ldr	r3, [pc, #292]	@ (800302c <HAL_RCC_OscConfig+0x26c>)
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	f003 030c 	and.w	r3, r3, #12
 8002f0e:	2b08      	cmp	r3, #8
 8002f10:	d11c      	bne.n	8002f4c <HAL_RCC_OscConfig+0x18c>
 8002f12:	4b46      	ldr	r3, [pc, #280]	@ (800302c <HAL_RCC_OscConfig+0x26c>)
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d116      	bne.n	8002f4c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f1e:	4b43      	ldr	r3, [pc, #268]	@ (800302c <HAL_RCC_OscConfig+0x26c>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f003 0302 	and.w	r3, r3, #2
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d005      	beq.n	8002f36 <HAL_RCC_OscConfig+0x176>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	691b      	ldr	r3, [r3, #16]
 8002f2e:	2b01      	cmp	r3, #1
 8002f30:	d001      	beq.n	8002f36 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002f32:	2301      	movs	r3, #1
 8002f34:	e1c0      	b.n	80032b8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f36:	4b3d      	ldr	r3, [pc, #244]	@ (800302c <HAL_RCC_OscConfig+0x26c>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	695b      	ldr	r3, [r3, #20]
 8002f42:	00db      	lsls	r3, r3, #3
 8002f44:	4939      	ldr	r1, [pc, #228]	@ (800302c <HAL_RCC_OscConfig+0x26c>)
 8002f46:	4313      	orrs	r3, r2
 8002f48:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f4a:	e03a      	b.n	8002fc2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	691b      	ldr	r3, [r3, #16]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d020      	beq.n	8002f96 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f54:	4b36      	ldr	r3, [pc, #216]	@ (8003030 <HAL_RCC_OscConfig+0x270>)
 8002f56:	2201      	movs	r2, #1
 8002f58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f5a:	f7fe fad5 	bl	8001508 <HAL_GetTick>
 8002f5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f60:	e008      	b.n	8002f74 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f62:	f7fe fad1 	bl	8001508 <HAL_GetTick>
 8002f66:	4602      	mov	r2, r0
 8002f68:	693b      	ldr	r3, [r7, #16]
 8002f6a:	1ad3      	subs	r3, r2, r3
 8002f6c:	2b02      	cmp	r3, #2
 8002f6e:	d901      	bls.n	8002f74 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002f70:	2303      	movs	r3, #3
 8002f72:	e1a1      	b.n	80032b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f74:	4b2d      	ldr	r3, [pc, #180]	@ (800302c <HAL_RCC_OscConfig+0x26c>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f003 0302 	and.w	r3, r3, #2
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d0f0      	beq.n	8002f62 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f80:	4b2a      	ldr	r3, [pc, #168]	@ (800302c <HAL_RCC_OscConfig+0x26c>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	695b      	ldr	r3, [r3, #20]
 8002f8c:	00db      	lsls	r3, r3, #3
 8002f8e:	4927      	ldr	r1, [pc, #156]	@ (800302c <HAL_RCC_OscConfig+0x26c>)
 8002f90:	4313      	orrs	r3, r2
 8002f92:	600b      	str	r3, [r1, #0]
 8002f94:	e015      	b.n	8002fc2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f96:	4b26      	ldr	r3, [pc, #152]	@ (8003030 <HAL_RCC_OscConfig+0x270>)
 8002f98:	2200      	movs	r2, #0
 8002f9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f9c:	f7fe fab4 	bl	8001508 <HAL_GetTick>
 8002fa0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fa2:	e008      	b.n	8002fb6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fa4:	f7fe fab0 	bl	8001508 <HAL_GetTick>
 8002fa8:	4602      	mov	r2, r0
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	1ad3      	subs	r3, r2, r3
 8002fae:	2b02      	cmp	r3, #2
 8002fb0:	d901      	bls.n	8002fb6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002fb2:	2303      	movs	r3, #3
 8002fb4:	e180      	b.n	80032b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fb6:	4b1d      	ldr	r3, [pc, #116]	@ (800302c <HAL_RCC_OscConfig+0x26c>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f003 0302 	and.w	r3, r3, #2
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d1f0      	bne.n	8002fa4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f003 0308 	and.w	r3, r3, #8
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d03a      	beq.n	8003044 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	699b      	ldr	r3, [r3, #24]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d019      	beq.n	800300a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002fd6:	4b17      	ldr	r3, [pc, #92]	@ (8003034 <HAL_RCC_OscConfig+0x274>)
 8002fd8:	2201      	movs	r2, #1
 8002fda:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fdc:	f7fe fa94 	bl	8001508 <HAL_GetTick>
 8002fe0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fe2:	e008      	b.n	8002ff6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002fe4:	f7fe fa90 	bl	8001508 <HAL_GetTick>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	1ad3      	subs	r3, r2, r3
 8002fee:	2b02      	cmp	r3, #2
 8002ff0:	d901      	bls.n	8002ff6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002ff2:	2303      	movs	r3, #3
 8002ff4:	e160      	b.n	80032b8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ff6:	4b0d      	ldr	r3, [pc, #52]	@ (800302c <HAL_RCC_OscConfig+0x26c>)
 8002ff8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ffa:	f003 0302 	and.w	r3, r3, #2
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d0f0      	beq.n	8002fe4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003002:	2001      	movs	r0, #1
 8003004:	f000 face 	bl	80035a4 <RCC_Delay>
 8003008:	e01c      	b.n	8003044 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800300a:	4b0a      	ldr	r3, [pc, #40]	@ (8003034 <HAL_RCC_OscConfig+0x274>)
 800300c:	2200      	movs	r2, #0
 800300e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003010:	f7fe fa7a 	bl	8001508 <HAL_GetTick>
 8003014:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003016:	e00f      	b.n	8003038 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003018:	f7fe fa76 	bl	8001508 <HAL_GetTick>
 800301c:	4602      	mov	r2, r0
 800301e:	693b      	ldr	r3, [r7, #16]
 8003020:	1ad3      	subs	r3, r2, r3
 8003022:	2b02      	cmp	r3, #2
 8003024:	d908      	bls.n	8003038 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003026:	2303      	movs	r3, #3
 8003028:	e146      	b.n	80032b8 <HAL_RCC_OscConfig+0x4f8>
 800302a:	bf00      	nop
 800302c:	40021000 	.word	0x40021000
 8003030:	42420000 	.word	0x42420000
 8003034:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003038:	4b92      	ldr	r3, [pc, #584]	@ (8003284 <HAL_RCC_OscConfig+0x4c4>)
 800303a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800303c:	f003 0302 	and.w	r3, r3, #2
 8003040:	2b00      	cmp	r3, #0
 8003042:	d1e9      	bne.n	8003018 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f003 0304 	and.w	r3, r3, #4
 800304c:	2b00      	cmp	r3, #0
 800304e:	f000 80a6 	beq.w	800319e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003052:	2300      	movs	r3, #0
 8003054:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003056:	4b8b      	ldr	r3, [pc, #556]	@ (8003284 <HAL_RCC_OscConfig+0x4c4>)
 8003058:	69db      	ldr	r3, [r3, #28]
 800305a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800305e:	2b00      	cmp	r3, #0
 8003060:	d10d      	bne.n	800307e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003062:	4b88      	ldr	r3, [pc, #544]	@ (8003284 <HAL_RCC_OscConfig+0x4c4>)
 8003064:	69db      	ldr	r3, [r3, #28]
 8003066:	4a87      	ldr	r2, [pc, #540]	@ (8003284 <HAL_RCC_OscConfig+0x4c4>)
 8003068:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800306c:	61d3      	str	r3, [r2, #28]
 800306e:	4b85      	ldr	r3, [pc, #532]	@ (8003284 <HAL_RCC_OscConfig+0x4c4>)
 8003070:	69db      	ldr	r3, [r3, #28]
 8003072:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003076:	60bb      	str	r3, [r7, #8]
 8003078:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800307a:	2301      	movs	r3, #1
 800307c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800307e:	4b82      	ldr	r3, [pc, #520]	@ (8003288 <HAL_RCC_OscConfig+0x4c8>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003086:	2b00      	cmp	r3, #0
 8003088:	d118      	bne.n	80030bc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800308a:	4b7f      	ldr	r3, [pc, #508]	@ (8003288 <HAL_RCC_OscConfig+0x4c8>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a7e      	ldr	r2, [pc, #504]	@ (8003288 <HAL_RCC_OscConfig+0x4c8>)
 8003090:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003094:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003096:	f7fe fa37 	bl	8001508 <HAL_GetTick>
 800309a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800309c:	e008      	b.n	80030b0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800309e:	f7fe fa33 	bl	8001508 <HAL_GetTick>
 80030a2:	4602      	mov	r2, r0
 80030a4:	693b      	ldr	r3, [r7, #16]
 80030a6:	1ad3      	subs	r3, r2, r3
 80030a8:	2b64      	cmp	r3, #100	@ 0x64
 80030aa:	d901      	bls.n	80030b0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80030ac:	2303      	movs	r3, #3
 80030ae:	e103      	b.n	80032b8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030b0:	4b75      	ldr	r3, [pc, #468]	@ (8003288 <HAL_RCC_OscConfig+0x4c8>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d0f0      	beq.n	800309e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	68db      	ldr	r3, [r3, #12]
 80030c0:	2b01      	cmp	r3, #1
 80030c2:	d106      	bne.n	80030d2 <HAL_RCC_OscConfig+0x312>
 80030c4:	4b6f      	ldr	r3, [pc, #444]	@ (8003284 <HAL_RCC_OscConfig+0x4c4>)
 80030c6:	6a1b      	ldr	r3, [r3, #32]
 80030c8:	4a6e      	ldr	r2, [pc, #440]	@ (8003284 <HAL_RCC_OscConfig+0x4c4>)
 80030ca:	f043 0301 	orr.w	r3, r3, #1
 80030ce:	6213      	str	r3, [r2, #32]
 80030d0:	e02d      	b.n	800312e <HAL_RCC_OscConfig+0x36e>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	68db      	ldr	r3, [r3, #12]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d10c      	bne.n	80030f4 <HAL_RCC_OscConfig+0x334>
 80030da:	4b6a      	ldr	r3, [pc, #424]	@ (8003284 <HAL_RCC_OscConfig+0x4c4>)
 80030dc:	6a1b      	ldr	r3, [r3, #32]
 80030de:	4a69      	ldr	r2, [pc, #420]	@ (8003284 <HAL_RCC_OscConfig+0x4c4>)
 80030e0:	f023 0301 	bic.w	r3, r3, #1
 80030e4:	6213      	str	r3, [r2, #32]
 80030e6:	4b67      	ldr	r3, [pc, #412]	@ (8003284 <HAL_RCC_OscConfig+0x4c4>)
 80030e8:	6a1b      	ldr	r3, [r3, #32]
 80030ea:	4a66      	ldr	r2, [pc, #408]	@ (8003284 <HAL_RCC_OscConfig+0x4c4>)
 80030ec:	f023 0304 	bic.w	r3, r3, #4
 80030f0:	6213      	str	r3, [r2, #32]
 80030f2:	e01c      	b.n	800312e <HAL_RCC_OscConfig+0x36e>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	68db      	ldr	r3, [r3, #12]
 80030f8:	2b05      	cmp	r3, #5
 80030fa:	d10c      	bne.n	8003116 <HAL_RCC_OscConfig+0x356>
 80030fc:	4b61      	ldr	r3, [pc, #388]	@ (8003284 <HAL_RCC_OscConfig+0x4c4>)
 80030fe:	6a1b      	ldr	r3, [r3, #32]
 8003100:	4a60      	ldr	r2, [pc, #384]	@ (8003284 <HAL_RCC_OscConfig+0x4c4>)
 8003102:	f043 0304 	orr.w	r3, r3, #4
 8003106:	6213      	str	r3, [r2, #32]
 8003108:	4b5e      	ldr	r3, [pc, #376]	@ (8003284 <HAL_RCC_OscConfig+0x4c4>)
 800310a:	6a1b      	ldr	r3, [r3, #32]
 800310c:	4a5d      	ldr	r2, [pc, #372]	@ (8003284 <HAL_RCC_OscConfig+0x4c4>)
 800310e:	f043 0301 	orr.w	r3, r3, #1
 8003112:	6213      	str	r3, [r2, #32]
 8003114:	e00b      	b.n	800312e <HAL_RCC_OscConfig+0x36e>
 8003116:	4b5b      	ldr	r3, [pc, #364]	@ (8003284 <HAL_RCC_OscConfig+0x4c4>)
 8003118:	6a1b      	ldr	r3, [r3, #32]
 800311a:	4a5a      	ldr	r2, [pc, #360]	@ (8003284 <HAL_RCC_OscConfig+0x4c4>)
 800311c:	f023 0301 	bic.w	r3, r3, #1
 8003120:	6213      	str	r3, [r2, #32]
 8003122:	4b58      	ldr	r3, [pc, #352]	@ (8003284 <HAL_RCC_OscConfig+0x4c4>)
 8003124:	6a1b      	ldr	r3, [r3, #32]
 8003126:	4a57      	ldr	r2, [pc, #348]	@ (8003284 <HAL_RCC_OscConfig+0x4c4>)
 8003128:	f023 0304 	bic.w	r3, r3, #4
 800312c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	68db      	ldr	r3, [r3, #12]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d015      	beq.n	8003162 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003136:	f7fe f9e7 	bl	8001508 <HAL_GetTick>
 800313a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800313c:	e00a      	b.n	8003154 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800313e:	f7fe f9e3 	bl	8001508 <HAL_GetTick>
 8003142:	4602      	mov	r2, r0
 8003144:	693b      	ldr	r3, [r7, #16]
 8003146:	1ad3      	subs	r3, r2, r3
 8003148:	f241 3288 	movw	r2, #5000	@ 0x1388
 800314c:	4293      	cmp	r3, r2
 800314e:	d901      	bls.n	8003154 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003150:	2303      	movs	r3, #3
 8003152:	e0b1      	b.n	80032b8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003154:	4b4b      	ldr	r3, [pc, #300]	@ (8003284 <HAL_RCC_OscConfig+0x4c4>)
 8003156:	6a1b      	ldr	r3, [r3, #32]
 8003158:	f003 0302 	and.w	r3, r3, #2
 800315c:	2b00      	cmp	r3, #0
 800315e:	d0ee      	beq.n	800313e <HAL_RCC_OscConfig+0x37e>
 8003160:	e014      	b.n	800318c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003162:	f7fe f9d1 	bl	8001508 <HAL_GetTick>
 8003166:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003168:	e00a      	b.n	8003180 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800316a:	f7fe f9cd 	bl	8001508 <HAL_GetTick>
 800316e:	4602      	mov	r2, r0
 8003170:	693b      	ldr	r3, [r7, #16]
 8003172:	1ad3      	subs	r3, r2, r3
 8003174:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003178:	4293      	cmp	r3, r2
 800317a:	d901      	bls.n	8003180 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800317c:	2303      	movs	r3, #3
 800317e:	e09b      	b.n	80032b8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003180:	4b40      	ldr	r3, [pc, #256]	@ (8003284 <HAL_RCC_OscConfig+0x4c4>)
 8003182:	6a1b      	ldr	r3, [r3, #32]
 8003184:	f003 0302 	and.w	r3, r3, #2
 8003188:	2b00      	cmp	r3, #0
 800318a:	d1ee      	bne.n	800316a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800318c:	7dfb      	ldrb	r3, [r7, #23]
 800318e:	2b01      	cmp	r3, #1
 8003190:	d105      	bne.n	800319e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003192:	4b3c      	ldr	r3, [pc, #240]	@ (8003284 <HAL_RCC_OscConfig+0x4c4>)
 8003194:	69db      	ldr	r3, [r3, #28]
 8003196:	4a3b      	ldr	r2, [pc, #236]	@ (8003284 <HAL_RCC_OscConfig+0x4c4>)
 8003198:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800319c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	69db      	ldr	r3, [r3, #28]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	f000 8087 	beq.w	80032b6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80031a8:	4b36      	ldr	r3, [pc, #216]	@ (8003284 <HAL_RCC_OscConfig+0x4c4>)
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	f003 030c 	and.w	r3, r3, #12
 80031b0:	2b08      	cmp	r3, #8
 80031b2:	d061      	beq.n	8003278 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	69db      	ldr	r3, [r3, #28]
 80031b8:	2b02      	cmp	r3, #2
 80031ba:	d146      	bne.n	800324a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031bc:	4b33      	ldr	r3, [pc, #204]	@ (800328c <HAL_RCC_OscConfig+0x4cc>)
 80031be:	2200      	movs	r2, #0
 80031c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031c2:	f7fe f9a1 	bl	8001508 <HAL_GetTick>
 80031c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031c8:	e008      	b.n	80031dc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031ca:	f7fe f99d 	bl	8001508 <HAL_GetTick>
 80031ce:	4602      	mov	r2, r0
 80031d0:	693b      	ldr	r3, [r7, #16]
 80031d2:	1ad3      	subs	r3, r2, r3
 80031d4:	2b02      	cmp	r3, #2
 80031d6:	d901      	bls.n	80031dc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80031d8:	2303      	movs	r3, #3
 80031da:	e06d      	b.n	80032b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031dc:	4b29      	ldr	r3, [pc, #164]	@ (8003284 <HAL_RCC_OscConfig+0x4c4>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d1f0      	bne.n	80031ca <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6a1b      	ldr	r3, [r3, #32]
 80031ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80031f0:	d108      	bne.n	8003204 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80031f2:	4b24      	ldr	r3, [pc, #144]	@ (8003284 <HAL_RCC_OscConfig+0x4c4>)
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	689b      	ldr	r3, [r3, #8]
 80031fe:	4921      	ldr	r1, [pc, #132]	@ (8003284 <HAL_RCC_OscConfig+0x4c4>)
 8003200:	4313      	orrs	r3, r2
 8003202:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003204:	4b1f      	ldr	r3, [pc, #124]	@ (8003284 <HAL_RCC_OscConfig+0x4c4>)
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6a19      	ldr	r1, [r3, #32]
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003214:	430b      	orrs	r3, r1
 8003216:	491b      	ldr	r1, [pc, #108]	@ (8003284 <HAL_RCC_OscConfig+0x4c4>)
 8003218:	4313      	orrs	r3, r2
 800321a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800321c:	4b1b      	ldr	r3, [pc, #108]	@ (800328c <HAL_RCC_OscConfig+0x4cc>)
 800321e:	2201      	movs	r2, #1
 8003220:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003222:	f7fe f971 	bl	8001508 <HAL_GetTick>
 8003226:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003228:	e008      	b.n	800323c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800322a:	f7fe f96d 	bl	8001508 <HAL_GetTick>
 800322e:	4602      	mov	r2, r0
 8003230:	693b      	ldr	r3, [r7, #16]
 8003232:	1ad3      	subs	r3, r2, r3
 8003234:	2b02      	cmp	r3, #2
 8003236:	d901      	bls.n	800323c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003238:	2303      	movs	r3, #3
 800323a:	e03d      	b.n	80032b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800323c:	4b11      	ldr	r3, [pc, #68]	@ (8003284 <HAL_RCC_OscConfig+0x4c4>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003244:	2b00      	cmp	r3, #0
 8003246:	d0f0      	beq.n	800322a <HAL_RCC_OscConfig+0x46a>
 8003248:	e035      	b.n	80032b6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800324a:	4b10      	ldr	r3, [pc, #64]	@ (800328c <HAL_RCC_OscConfig+0x4cc>)
 800324c:	2200      	movs	r2, #0
 800324e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003250:	f7fe f95a 	bl	8001508 <HAL_GetTick>
 8003254:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003256:	e008      	b.n	800326a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003258:	f7fe f956 	bl	8001508 <HAL_GetTick>
 800325c:	4602      	mov	r2, r0
 800325e:	693b      	ldr	r3, [r7, #16]
 8003260:	1ad3      	subs	r3, r2, r3
 8003262:	2b02      	cmp	r3, #2
 8003264:	d901      	bls.n	800326a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003266:	2303      	movs	r3, #3
 8003268:	e026      	b.n	80032b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800326a:	4b06      	ldr	r3, [pc, #24]	@ (8003284 <HAL_RCC_OscConfig+0x4c4>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003272:	2b00      	cmp	r3, #0
 8003274:	d1f0      	bne.n	8003258 <HAL_RCC_OscConfig+0x498>
 8003276:	e01e      	b.n	80032b6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	69db      	ldr	r3, [r3, #28]
 800327c:	2b01      	cmp	r3, #1
 800327e:	d107      	bne.n	8003290 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003280:	2301      	movs	r3, #1
 8003282:	e019      	b.n	80032b8 <HAL_RCC_OscConfig+0x4f8>
 8003284:	40021000 	.word	0x40021000
 8003288:	40007000 	.word	0x40007000
 800328c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003290:	4b0b      	ldr	r3, [pc, #44]	@ (80032c0 <HAL_RCC_OscConfig+0x500>)
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6a1b      	ldr	r3, [r3, #32]
 80032a0:	429a      	cmp	r2, r3
 80032a2:	d106      	bne.n	80032b2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032ae:	429a      	cmp	r2, r3
 80032b0:	d001      	beq.n	80032b6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80032b2:	2301      	movs	r3, #1
 80032b4:	e000      	b.n	80032b8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80032b6:	2300      	movs	r3, #0
}
 80032b8:	4618      	mov	r0, r3
 80032ba:	3718      	adds	r7, #24
 80032bc:	46bd      	mov	sp, r7
 80032be:	bd80      	pop	{r7, pc}
 80032c0:	40021000 	.word	0x40021000

080032c4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b084      	sub	sp, #16
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
 80032cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d101      	bne.n	80032d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80032d4:	2301      	movs	r3, #1
 80032d6:	e0d0      	b.n	800347a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80032d8:	4b6a      	ldr	r3, [pc, #424]	@ (8003484 <HAL_RCC_ClockConfig+0x1c0>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f003 0307 	and.w	r3, r3, #7
 80032e0:	683a      	ldr	r2, [r7, #0]
 80032e2:	429a      	cmp	r2, r3
 80032e4:	d910      	bls.n	8003308 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032e6:	4b67      	ldr	r3, [pc, #412]	@ (8003484 <HAL_RCC_ClockConfig+0x1c0>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f023 0207 	bic.w	r2, r3, #7
 80032ee:	4965      	ldr	r1, [pc, #404]	@ (8003484 <HAL_RCC_ClockConfig+0x1c0>)
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	4313      	orrs	r3, r2
 80032f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032f6:	4b63      	ldr	r3, [pc, #396]	@ (8003484 <HAL_RCC_ClockConfig+0x1c0>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f003 0307 	and.w	r3, r3, #7
 80032fe:	683a      	ldr	r2, [r7, #0]
 8003300:	429a      	cmp	r2, r3
 8003302:	d001      	beq.n	8003308 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003304:	2301      	movs	r3, #1
 8003306:	e0b8      	b.n	800347a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f003 0302 	and.w	r3, r3, #2
 8003310:	2b00      	cmp	r3, #0
 8003312:	d020      	beq.n	8003356 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f003 0304 	and.w	r3, r3, #4
 800331c:	2b00      	cmp	r3, #0
 800331e:	d005      	beq.n	800332c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003320:	4b59      	ldr	r3, [pc, #356]	@ (8003488 <HAL_RCC_ClockConfig+0x1c4>)
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	4a58      	ldr	r2, [pc, #352]	@ (8003488 <HAL_RCC_ClockConfig+0x1c4>)
 8003326:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800332a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f003 0308 	and.w	r3, r3, #8
 8003334:	2b00      	cmp	r3, #0
 8003336:	d005      	beq.n	8003344 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003338:	4b53      	ldr	r3, [pc, #332]	@ (8003488 <HAL_RCC_ClockConfig+0x1c4>)
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	4a52      	ldr	r2, [pc, #328]	@ (8003488 <HAL_RCC_ClockConfig+0x1c4>)
 800333e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003342:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003344:	4b50      	ldr	r3, [pc, #320]	@ (8003488 <HAL_RCC_ClockConfig+0x1c4>)
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	689b      	ldr	r3, [r3, #8]
 8003350:	494d      	ldr	r1, [pc, #308]	@ (8003488 <HAL_RCC_ClockConfig+0x1c4>)
 8003352:	4313      	orrs	r3, r2
 8003354:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f003 0301 	and.w	r3, r3, #1
 800335e:	2b00      	cmp	r3, #0
 8003360:	d040      	beq.n	80033e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	2b01      	cmp	r3, #1
 8003368:	d107      	bne.n	800337a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800336a:	4b47      	ldr	r3, [pc, #284]	@ (8003488 <HAL_RCC_ClockConfig+0x1c4>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003372:	2b00      	cmp	r3, #0
 8003374:	d115      	bne.n	80033a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003376:	2301      	movs	r3, #1
 8003378:	e07f      	b.n	800347a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	2b02      	cmp	r3, #2
 8003380:	d107      	bne.n	8003392 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003382:	4b41      	ldr	r3, [pc, #260]	@ (8003488 <HAL_RCC_ClockConfig+0x1c4>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800338a:	2b00      	cmp	r3, #0
 800338c:	d109      	bne.n	80033a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800338e:	2301      	movs	r3, #1
 8003390:	e073      	b.n	800347a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003392:	4b3d      	ldr	r3, [pc, #244]	@ (8003488 <HAL_RCC_ClockConfig+0x1c4>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f003 0302 	and.w	r3, r3, #2
 800339a:	2b00      	cmp	r3, #0
 800339c:	d101      	bne.n	80033a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800339e:	2301      	movs	r3, #1
 80033a0:	e06b      	b.n	800347a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80033a2:	4b39      	ldr	r3, [pc, #228]	@ (8003488 <HAL_RCC_ClockConfig+0x1c4>)
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	f023 0203 	bic.w	r2, r3, #3
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	4936      	ldr	r1, [pc, #216]	@ (8003488 <HAL_RCC_ClockConfig+0x1c4>)
 80033b0:	4313      	orrs	r3, r2
 80033b2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80033b4:	f7fe f8a8 	bl	8001508 <HAL_GetTick>
 80033b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033ba:	e00a      	b.n	80033d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033bc:	f7fe f8a4 	bl	8001508 <HAL_GetTick>
 80033c0:	4602      	mov	r2, r0
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	1ad3      	subs	r3, r2, r3
 80033c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d901      	bls.n	80033d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80033ce:	2303      	movs	r3, #3
 80033d0:	e053      	b.n	800347a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033d2:	4b2d      	ldr	r3, [pc, #180]	@ (8003488 <HAL_RCC_ClockConfig+0x1c4>)
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	f003 020c 	and.w	r2, r3, #12
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	009b      	lsls	r3, r3, #2
 80033e0:	429a      	cmp	r2, r3
 80033e2:	d1eb      	bne.n	80033bc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80033e4:	4b27      	ldr	r3, [pc, #156]	@ (8003484 <HAL_RCC_ClockConfig+0x1c0>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f003 0307 	and.w	r3, r3, #7
 80033ec:	683a      	ldr	r2, [r7, #0]
 80033ee:	429a      	cmp	r2, r3
 80033f0:	d210      	bcs.n	8003414 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033f2:	4b24      	ldr	r3, [pc, #144]	@ (8003484 <HAL_RCC_ClockConfig+0x1c0>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f023 0207 	bic.w	r2, r3, #7
 80033fa:	4922      	ldr	r1, [pc, #136]	@ (8003484 <HAL_RCC_ClockConfig+0x1c0>)
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	4313      	orrs	r3, r2
 8003400:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003402:	4b20      	ldr	r3, [pc, #128]	@ (8003484 <HAL_RCC_ClockConfig+0x1c0>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f003 0307 	and.w	r3, r3, #7
 800340a:	683a      	ldr	r2, [r7, #0]
 800340c:	429a      	cmp	r2, r3
 800340e:	d001      	beq.n	8003414 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003410:	2301      	movs	r3, #1
 8003412:	e032      	b.n	800347a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f003 0304 	and.w	r3, r3, #4
 800341c:	2b00      	cmp	r3, #0
 800341e:	d008      	beq.n	8003432 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003420:	4b19      	ldr	r3, [pc, #100]	@ (8003488 <HAL_RCC_ClockConfig+0x1c4>)
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	68db      	ldr	r3, [r3, #12]
 800342c:	4916      	ldr	r1, [pc, #88]	@ (8003488 <HAL_RCC_ClockConfig+0x1c4>)
 800342e:	4313      	orrs	r3, r2
 8003430:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f003 0308 	and.w	r3, r3, #8
 800343a:	2b00      	cmp	r3, #0
 800343c:	d009      	beq.n	8003452 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800343e:	4b12      	ldr	r3, [pc, #72]	@ (8003488 <HAL_RCC_ClockConfig+0x1c4>)
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	691b      	ldr	r3, [r3, #16]
 800344a:	00db      	lsls	r3, r3, #3
 800344c:	490e      	ldr	r1, [pc, #56]	@ (8003488 <HAL_RCC_ClockConfig+0x1c4>)
 800344e:	4313      	orrs	r3, r2
 8003450:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003452:	f000 f821 	bl	8003498 <HAL_RCC_GetSysClockFreq>
 8003456:	4602      	mov	r2, r0
 8003458:	4b0b      	ldr	r3, [pc, #44]	@ (8003488 <HAL_RCC_ClockConfig+0x1c4>)
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	091b      	lsrs	r3, r3, #4
 800345e:	f003 030f 	and.w	r3, r3, #15
 8003462:	490a      	ldr	r1, [pc, #40]	@ (800348c <HAL_RCC_ClockConfig+0x1c8>)
 8003464:	5ccb      	ldrb	r3, [r1, r3]
 8003466:	fa22 f303 	lsr.w	r3, r2, r3
 800346a:	4a09      	ldr	r2, [pc, #36]	@ (8003490 <HAL_RCC_ClockConfig+0x1cc>)
 800346c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800346e:	4b09      	ldr	r3, [pc, #36]	@ (8003494 <HAL_RCC_ClockConfig+0x1d0>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4618      	mov	r0, r3
 8003474:	f7fe f806 	bl	8001484 <HAL_InitTick>

  return HAL_OK;
 8003478:	2300      	movs	r3, #0
}
 800347a:	4618      	mov	r0, r3
 800347c:	3710      	adds	r7, #16
 800347e:	46bd      	mov	sp, r7
 8003480:	bd80      	pop	{r7, pc}
 8003482:	bf00      	nop
 8003484:	40022000 	.word	0x40022000
 8003488:	40021000 	.word	0x40021000
 800348c:	08006d48 	.word	0x08006d48
 8003490:	20000000 	.word	0x20000000
 8003494:	20000004 	.word	0x20000004

08003498 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003498:	b480      	push	{r7}
 800349a:	b087      	sub	sp, #28
 800349c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800349e:	2300      	movs	r3, #0
 80034a0:	60fb      	str	r3, [r7, #12]
 80034a2:	2300      	movs	r3, #0
 80034a4:	60bb      	str	r3, [r7, #8]
 80034a6:	2300      	movs	r3, #0
 80034a8:	617b      	str	r3, [r7, #20]
 80034aa:	2300      	movs	r3, #0
 80034ac:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80034ae:	2300      	movs	r3, #0
 80034b0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80034b2:	4b1e      	ldr	r3, [pc, #120]	@ (800352c <HAL_RCC_GetSysClockFreq+0x94>)
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	f003 030c 	and.w	r3, r3, #12
 80034be:	2b04      	cmp	r3, #4
 80034c0:	d002      	beq.n	80034c8 <HAL_RCC_GetSysClockFreq+0x30>
 80034c2:	2b08      	cmp	r3, #8
 80034c4:	d003      	beq.n	80034ce <HAL_RCC_GetSysClockFreq+0x36>
 80034c6:	e027      	b.n	8003518 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80034c8:	4b19      	ldr	r3, [pc, #100]	@ (8003530 <HAL_RCC_GetSysClockFreq+0x98>)
 80034ca:	613b      	str	r3, [r7, #16]
      break;
 80034cc:	e027      	b.n	800351e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	0c9b      	lsrs	r3, r3, #18
 80034d2:	f003 030f 	and.w	r3, r3, #15
 80034d6:	4a17      	ldr	r2, [pc, #92]	@ (8003534 <HAL_RCC_GetSysClockFreq+0x9c>)
 80034d8:	5cd3      	ldrb	r3, [r2, r3]
 80034da:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d010      	beq.n	8003508 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80034e6:	4b11      	ldr	r3, [pc, #68]	@ (800352c <HAL_RCC_GetSysClockFreq+0x94>)
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	0c5b      	lsrs	r3, r3, #17
 80034ec:	f003 0301 	and.w	r3, r3, #1
 80034f0:	4a11      	ldr	r2, [pc, #68]	@ (8003538 <HAL_RCC_GetSysClockFreq+0xa0>)
 80034f2:	5cd3      	ldrb	r3, [r2, r3]
 80034f4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	4a0d      	ldr	r2, [pc, #52]	@ (8003530 <HAL_RCC_GetSysClockFreq+0x98>)
 80034fa:	fb03 f202 	mul.w	r2, r3, r2
 80034fe:	68bb      	ldr	r3, [r7, #8]
 8003500:	fbb2 f3f3 	udiv	r3, r2, r3
 8003504:	617b      	str	r3, [r7, #20]
 8003506:	e004      	b.n	8003512 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	4a0c      	ldr	r2, [pc, #48]	@ (800353c <HAL_RCC_GetSysClockFreq+0xa4>)
 800350c:	fb02 f303 	mul.w	r3, r2, r3
 8003510:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	613b      	str	r3, [r7, #16]
      break;
 8003516:	e002      	b.n	800351e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003518:	4b05      	ldr	r3, [pc, #20]	@ (8003530 <HAL_RCC_GetSysClockFreq+0x98>)
 800351a:	613b      	str	r3, [r7, #16]
      break;
 800351c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800351e:	693b      	ldr	r3, [r7, #16]
}
 8003520:	4618      	mov	r0, r3
 8003522:	371c      	adds	r7, #28
 8003524:	46bd      	mov	sp, r7
 8003526:	bc80      	pop	{r7}
 8003528:	4770      	bx	lr
 800352a:	bf00      	nop
 800352c:	40021000 	.word	0x40021000
 8003530:	007a1200 	.word	0x007a1200
 8003534:	08006d60 	.word	0x08006d60
 8003538:	08006d70 	.word	0x08006d70
 800353c:	003d0900 	.word	0x003d0900

08003540 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003540:	b480      	push	{r7}
 8003542:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003544:	4b02      	ldr	r3, [pc, #8]	@ (8003550 <HAL_RCC_GetHCLKFreq+0x10>)
 8003546:	681b      	ldr	r3, [r3, #0]
}
 8003548:	4618      	mov	r0, r3
 800354a:	46bd      	mov	sp, r7
 800354c:	bc80      	pop	{r7}
 800354e:	4770      	bx	lr
 8003550:	20000000 	.word	0x20000000

08003554 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003558:	f7ff fff2 	bl	8003540 <HAL_RCC_GetHCLKFreq>
 800355c:	4602      	mov	r2, r0
 800355e:	4b05      	ldr	r3, [pc, #20]	@ (8003574 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	0a1b      	lsrs	r3, r3, #8
 8003564:	f003 0307 	and.w	r3, r3, #7
 8003568:	4903      	ldr	r1, [pc, #12]	@ (8003578 <HAL_RCC_GetPCLK1Freq+0x24>)
 800356a:	5ccb      	ldrb	r3, [r1, r3]
 800356c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003570:	4618      	mov	r0, r3
 8003572:	bd80      	pop	{r7, pc}
 8003574:	40021000 	.word	0x40021000
 8003578:	08006d58 	.word	0x08006d58

0800357c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003580:	f7ff ffde 	bl	8003540 <HAL_RCC_GetHCLKFreq>
 8003584:	4602      	mov	r2, r0
 8003586:	4b05      	ldr	r3, [pc, #20]	@ (800359c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	0adb      	lsrs	r3, r3, #11
 800358c:	f003 0307 	and.w	r3, r3, #7
 8003590:	4903      	ldr	r1, [pc, #12]	@ (80035a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003592:	5ccb      	ldrb	r3, [r1, r3]
 8003594:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003598:	4618      	mov	r0, r3
 800359a:	bd80      	pop	{r7, pc}
 800359c:	40021000 	.word	0x40021000
 80035a0:	08006d58 	.word	0x08006d58

080035a4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80035a4:	b480      	push	{r7}
 80035a6:	b085      	sub	sp, #20
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80035ac:	4b0a      	ldr	r3, [pc, #40]	@ (80035d8 <RCC_Delay+0x34>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a0a      	ldr	r2, [pc, #40]	@ (80035dc <RCC_Delay+0x38>)
 80035b2:	fba2 2303 	umull	r2, r3, r2, r3
 80035b6:	0a5b      	lsrs	r3, r3, #9
 80035b8:	687a      	ldr	r2, [r7, #4]
 80035ba:	fb02 f303 	mul.w	r3, r2, r3
 80035be:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80035c0:	bf00      	nop
  }
  while (Delay --);
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	1e5a      	subs	r2, r3, #1
 80035c6:	60fa      	str	r2, [r7, #12]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d1f9      	bne.n	80035c0 <RCC_Delay+0x1c>
}
 80035cc:	bf00      	nop
 80035ce:	bf00      	nop
 80035d0:	3714      	adds	r7, #20
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bc80      	pop	{r7}
 80035d6:	4770      	bx	lr
 80035d8:	20000000 	.word	0x20000000
 80035dc:	10624dd3 	.word	0x10624dd3

080035e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b086      	sub	sp, #24
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80035e8:	2300      	movs	r3, #0
 80035ea:	613b      	str	r3, [r7, #16]
 80035ec:	2300      	movs	r3, #0
 80035ee:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f003 0301 	and.w	r3, r3, #1
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d07d      	beq.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80035fc:	2300      	movs	r3, #0
 80035fe:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003600:	4b4f      	ldr	r3, [pc, #316]	@ (8003740 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003602:	69db      	ldr	r3, [r3, #28]
 8003604:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003608:	2b00      	cmp	r3, #0
 800360a:	d10d      	bne.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800360c:	4b4c      	ldr	r3, [pc, #304]	@ (8003740 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800360e:	69db      	ldr	r3, [r3, #28]
 8003610:	4a4b      	ldr	r2, [pc, #300]	@ (8003740 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003612:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003616:	61d3      	str	r3, [r2, #28]
 8003618:	4b49      	ldr	r3, [pc, #292]	@ (8003740 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800361a:	69db      	ldr	r3, [r3, #28]
 800361c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003620:	60bb      	str	r3, [r7, #8]
 8003622:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003624:	2301      	movs	r3, #1
 8003626:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003628:	4b46      	ldr	r3, [pc, #280]	@ (8003744 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003630:	2b00      	cmp	r3, #0
 8003632:	d118      	bne.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003634:	4b43      	ldr	r3, [pc, #268]	@ (8003744 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a42      	ldr	r2, [pc, #264]	@ (8003744 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800363a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800363e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003640:	f7fd ff62 	bl	8001508 <HAL_GetTick>
 8003644:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003646:	e008      	b.n	800365a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003648:	f7fd ff5e 	bl	8001508 <HAL_GetTick>
 800364c:	4602      	mov	r2, r0
 800364e:	693b      	ldr	r3, [r7, #16]
 8003650:	1ad3      	subs	r3, r2, r3
 8003652:	2b64      	cmp	r3, #100	@ 0x64
 8003654:	d901      	bls.n	800365a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003656:	2303      	movs	r3, #3
 8003658:	e06d      	b.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800365a:	4b3a      	ldr	r3, [pc, #232]	@ (8003744 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003662:	2b00      	cmp	r3, #0
 8003664:	d0f0      	beq.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003666:	4b36      	ldr	r3, [pc, #216]	@ (8003740 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003668:	6a1b      	ldr	r3, [r3, #32]
 800366a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800366e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d02e      	beq.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800367e:	68fa      	ldr	r2, [r7, #12]
 8003680:	429a      	cmp	r2, r3
 8003682:	d027      	beq.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003684:	4b2e      	ldr	r3, [pc, #184]	@ (8003740 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003686:	6a1b      	ldr	r3, [r3, #32]
 8003688:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800368c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800368e:	4b2e      	ldr	r3, [pc, #184]	@ (8003748 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003690:	2201      	movs	r2, #1
 8003692:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003694:	4b2c      	ldr	r3, [pc, #176]	@ (8003748 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003696:	2200      	movs	r2, #0
 8003698:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800369a:	4a29      	ldr	r2, [pc, #164]	@ (8003740 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	f003 0301 	and.w	r3, r3, #1
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d014      	beq.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036aa:	f7fd ff2d 	bl	8001508 <HAL_GetTick>
 80036ae:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036b0:	e00a      	b.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036b2:	f7fd ff29 	bl	8001508 <HAL_GetTick>
 80036b6:	4602      	mov	r2, r0
 80036b8:	693b      	ldr	r3, [r7, #16]
 80036ba:	1ad3      	subs	r3, r2, r3
 80036bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d901      	bls.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80036c4:	2303      	movs	r3, #3
 80036c6:	e036      	b.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036c8:	4b1d      	ldr	r3, [pc, #116]	@ (8003740 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036ca:	6a1b      	ldr	r3, [r3, #32]
 80036cc:	f003 0302 	and.w	r3, r3, #2
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d0ee      	beq.n	80036b2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80036d4:	4b1a      	ldr	r3, [pc, #104]	@ (8003740 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036d6:	6a1b      	ldr	r3, [r3, #32]
 80036d8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	4917      	ldr	r1, [pc, #92]	@ (8003740 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036e2:	4313      	orrs	r3, r2
 80036e4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80036e6:	7dfb      	ldrb	r3, [r7, #23]
 80036e8:	2b01      	cmp	r3, #1
 80036ea:	d105      	bne.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036ec:	4b14      	ldr	r3, [pc, #80]	@ (8003740 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036ee:	69db      	ldr	r3, [r3, #28]
 80036f0:	4a13      	ldr	r2, [pc, #76]	@ (8003740 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036f2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80036f6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f003 0302 	and.w	r3, r3, #2
 8003700:	2b00      	cmp	r3, #0
 8003702:	d008      	beq.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003704:	4b0e      	ldr	r3, [pc, #56]	@ (8003740 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	689b      	ldr	r3, [r3, #8]
 8003710:	490b      	ldr	r1, [pc, #44]	@ (8003740 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003712:	4313      	orrs	r3, r2
 8003714:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f003 0310 	and.w	r3, r3, #16
 800371e:	2b00      	cmp	r3, #0
 8003720:	d008      	beq.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003722:	4b07      	ldr	r3, [pc, #28]	@ (8003740 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	68db      	ldr	r3, [r3, #12]
 800372e:	4904      	ldr	r1, [pc, #16]	@ (8003740 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003730:	4313      	orrs	r3, r2
 8003732:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003734:	2300      	movs	r3, #0
}
 8003736:	4618      	mov	r0, r3
 8003738:	3718      	adds	r7, #24
 800373a:	46bd      	mov	sp, r7
 800373c:	bd80      	pop	{r7, pc}
 800373e:	bf00      	nop
 8003740:	40021000 	.word	0x40021000
 8003744:	40007000 	.word	0x40007000
 8003748:	42420440 	.word	0x42420440

0800374c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b088      	sub	sp, #32
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8003754:	2300      	movs	r3, #0
 8003756:	617b      	str	r3, [r7, #20]
 8003758:	2300      	movs	r3, #0
 800375a:	61fb      	str	r3, [r7, #28]
 800375c:	2300      	movs	r3, #0
 800375e:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8003760:	2300      	movs	r3, #0
 8003762:	60fb      	str	r3, [r7, #12]
 8003764:	2300      	movs	r3, #0
 8003766:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2b10      	cmp	r3, #16
 800376c:	d00a      	beq.n	8003784 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2b10      	cmp	r3, #16
 8003772:	f200 808a 	bhi.w	800388a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2b01      	cmp	r3, #1
 800377a:	d045      	beq.n	8003808 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2b02      	cmp	r3, #2
 8003780:	d075      	beq.n	800386e <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8003782:	e082      	b.n	800388a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8003784:	4b46      	ldr	r3, [pc, #280]	@ (80038a0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800378a:	4b45      	ldr	r3, [pc, #276]	@ (80038a0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003792:	2b00      	cmp	r3, #0
 8003794:	d07b      	beq.n	800388e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	0c9b      	lsrs	r3, r3, #18
 800379a:	f003 030f 	and.w	r3, r3, #15
 800379e:	4a41      	ldr	r2, [pc, #260]	@ (80038a4 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 80037a0:	5cd3      	ldrb	r3, [r2, r3]
 80037a2:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d015      	beq.n	80037da <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80037ae:	4b3c      	ldr	r3, [pc, #240]	@ (80038a0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	0c5b      	lsrs	r3, r3, #17
 80037b4:	f003 0301 	and.w	r3, r3, #1
 80037b8:	4a3b      	ldr	r2, [pc, #236]	@ (80038a8 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 80037ba:	5cd3      	ldrb	r3, [r2, r3]
 80037bc:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d00d      	beq.n	80037e4 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80037c8:	4a38      	ldr	r2, [pc, #224]	@ (80038ac <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 80037ca:	697b      	ldr	r3, [r7, #20]
 80037cc:	fbb2 f2f3 	udiv	r2, r2, r3
 80037d0:	693b      	ldr	r3, [r7, #16]
 80037d2:	fb02 f303 	mul.w	r3, r2, r3
 80037d6:	61fb      	str	r3, [r7, #28]
 80037d8:	e004      	b.n	80037e4 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80037da:	693b      	ldr	r3, [r7, #16]
 80037dc:	4a34      	ldr	r2, [pc, #208]	@ (80038b0 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 80037de:	fb02 f303 	mul.w	r3, r2, r3
 80037e2:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80037e4:	4b2e      	ldr	r3, [pc, #184]	@ (80038a0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80037ec:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80037f0:	d102      	bne.n	80037f8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 80037f2:	69fb      	ldr	r3, [r7, #28]
 80037f4:	61bb      	str	r3, [r7, #24]
      break;
 80037f6:	e04a      	b.n	800388e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 80037f8:	69fb      	ldr	r3, [r7, #28]
 80037fa:	005b      	lsls	r3, r3, #1
 80037fc:	4a2d      	ldr	r2, [pc, #180]	@ (80038b4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80037fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003802:	085b      	lsrs	r3, r3, #1
 8003804:	61bb      	str	r3, [r7, #24]
      break;
 8003806:	e042      	b.n	800388e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8003808:	4b25      	ldr	r3, [pc, #148]	@ (80038a0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800380a:	6a1b      	ldr	r3, [r3, #32]
 800380c:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003814:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003818:	d108      	bne.n	800382c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	f003 0302 	and.w	r3, r3, #2
 8003820:	2b00      	cmp	r3, #0
 8003822:	d003      	beq.n	800382c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8003824:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003828:	61bb      	str	r3, [r7, #24]
 800382a:	e01f      	b.n	800386c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003832:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003836:	d109      	bne.n	800384c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8003838:	4b19      	ldr	r3, [pc, #100]	@ (80038a0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800383a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800383c:	f003 0302 	and.w	r3, r3, #2
 8003840:	2b00      	cmp	r3, #0
 8003842:	d003      	beq.n	800384c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8003844:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8003848:	61bb      	str	r3, [r7, #24]
 800384a:	e00f      	b.n	800386c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003852:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003856:	d11c      	bne.n	8003892 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003858:	4b11      	ldr	r3, [pc, #68]	@ (80038a0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003860:	2b00      	cmp	r3, #0
 8003862:	d016      	beq.n	8003892 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8003864:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8003868:	61bb      	str	r3, [r7, #24]
      break;
 800386a:	e012      	b.n	8003892 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 800386c:	e011      	b.n	8003892 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800386e:	f7ff fe85 	bl	800357c <HAL_RCC_GetPCLK2Freq>
 8003872:	4602      	mov	r2, r0
 8003874:	4b0a      	ldr	r3, [pc, #40]	@ (80038a0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	0b9b      	lsrs	r3, r3, #14
 800387a:	f003 0303 	and.w	r3, r3, #3
 800387e:	3301      	adds	r3, #1
 8003880:	005b      	lsls	r3, r3, #1
 8003882:	fbb2 f3f3 	udiv	r3, r2, r3
 8003886:	61bb      	str	r3, [r7, #24]
      break;
 8003888:	e004      	b.n	8003894 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800388a:	bf00      	nop
 800388c:	e002      	b.n	8003894 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800388e:	bf00      	nop
 8003890:	e000      	b.n	8003894 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003892:	bf00      	nop
    }
  }
  return (frequency);
 8003894:	69bb      	ldr	r3, [r7, #24]
}
 8003896:	4618      	mov	r0, r3
 8003898:	3720      	adds	r7, #32
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}
 800389e:	bf00      	nop
 80038a0:	40021000 	.word	0x40021000
 80038a4:	08006d74 	.word	0x08006d74
 80038a8:	08006d84 	.word	0x08006d84
 80038ac:	007a1200 	.word	0x007a1200
 80038b0:	003d0900 	.word	0x003d0900
 80038b4:	aaaaaaab 	.word	0xaaaaaaab

080038b8 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b084      	sub	sp, #16
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 80038c0:	2300      	movs	r3, #0
 80038c2:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d101      	bne.n	80038ce <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80038ca:	2301      	movs	r3, #1
 80038cc:	e07a      	b.n	80039c4 <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	7c5b      	ldrb	r3, [r3, #17]
 80038d2:	b2db      	uxtb	r3, r3
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d105      	bne.n	80038e4 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2200      	movs	r2, #0
 80038dc:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80038de:	6878      	ldr	r0, [r7, #4]
 80038e0:	f7fc ff6c 	bl	80007bc <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2202      	movs	r2, #2
 80038e8:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80038ea:	6878      	ldr	r0, [r7, #4]
 80038ec:	f000 f9be 	bl	8003c6c <HAL_RTC_WaitForSynchro>
 80038f0:	4603      	mov	r3, r0
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d004      	beq.n	8003900 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2204      	movs	r2, #4
 80038fa:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 80038fc:	2301      	movs	r3, #1
 80038fe:	e061      	b.n	80039c4 <HAL_RTC_Init+0x10c>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003900:	6878      	ldr	r0, [r7, #4]
 8003902:	f000 fa77 	bl	8003df4 <RTC_EnterInitMode>
 8003906:	4603      	mov	r3, r0
 8003908:	2b00      	cmp	r3, #0
 800390a:	d004      	beq.n	8003916 <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2204      	movs	r2, #4
 8003910:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8003912:	2301      	movs	r3, #1
 8003914:	e056      	b.n	80039c4 <HAL_RTC_Init+0x10c>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	685a      	ldr	r2, [r3, #4]
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f022 0207 	bic.w	r2, r2, #7
 8003924:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	689b      	ldr	r3, [r3, #8]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d005      	beq.n	800393a <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 800392e:	4b27      	ldr	r3, [pc, #156]	@ (80039cc <HAL_RTC_Init+0x114>)
 8003930:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003932:	4a26      	ldr	r2, [pc, #152]	@ (80039cc <HAL_RTC_Init+0x114>)
 8003934:	f023 0301 	bic.w	r3, r3, #1
 8003938:	6313      	str	r3, [r2, #48]	@ 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 800393a:	4b24      	ldr	r3, [pc, #144]	@ (80039cc <HAL_RTC_Init+0x114>)
 800393c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800393e:	f423 7260 	bic.w	r2, r3, #896	@ 0x380
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	689b      	ldr	r3, [r3, #8]
 8003946:	4921      	ldr	r1, [pc, #132]	@ (80039cc <HAL_RTC_Init+0x114>)
 8003948:	4313      	orrs	r3, r2
 800394a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003954:	d003      	beq.n	800395e <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	60fb      	str	r3, [r7, #12]
 800395c:	e00e      	b.n	800397c <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 800395e:	2001      	movs	r0, #1
 8003960:	f7ff fef4 	bl	800374c <HAL_RCCEx_GetPeriphCLKFreq>
 8003964:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d104      	bne.n	8003976 <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2204      	movs	r2, #4
 8003970:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8003972:	2301      	movs	r3, #1
 8003974:	e026      	b.n	80039c4 <HAL_RTC_Init+0x10c>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	3b01      	subs	r3, #1
 800397a:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	0c1a      	lsrs	r2, r3, #16
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f002 020f 	and.w	r2, r2, #15
 8003988:	609a      	str	r2, [r3, #8]
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	68fa      	ldr	r2, [r7, #12]
 8003990:	b292      	uxth	r2, r2
 8003992:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8003994:	6878      	ldr	r0, [r7, #4]
 8003996:	f000 fa55 	bl	8003e44 <RTC_ExitInitMode>
 800399a:	4603      	mov	r3, r0
 800399c:	2b00      	cmp	r3, #0
 800399e:	d004      	beq.n	80039aa <HAL_RTC_Init+0xf2>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2204      	movs	r2, #4
 80039a4:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 80039a6:	2301      	movs	r3, #1
 80039a8:	e00c      	b.n	80039c4 <HAL_RTC_Init+0x10c>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2200      	movs	r2, #0
 80039ae:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2201      	movs	r2, #1
 80039b4:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2201      	movs	r2, #1
 80039ba:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2201      	movs	r2, #1
 80039c0:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 80039c2:	2300      	movs	r3, #0
  }
}
 80039c4:	4618      	mov	r0, r3
 80039c6:	3710      	adds	r7, #16
 80039c8:	46bd      	mov	sp, r7
 80039ca:	bd80      	pop	{r7, pc}
 80039cc:	40006c00 	.word	0x40006c00

080039d0 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80039d0:	b590      	push	{r4, r7, lr}
 80039d2:	b087      	sub	sp, #28
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	60f8      	str	r0, [r7, #12]
 80039d8:	60b9      	str	r1, [r7, #8]
 80039da:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 80039dc:	2300      	movs	r3, #0
 80039de:	617b      	str	r3, [r7, #20]
 80039e0:	2300      	movs	r3, #0
 80039e2:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d002      	beq.n	80039f0 <HAL_RTC_SetTime+0x20>
 80039ea:	68bb      	ldr	r3, [r7, #8]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d101      	bne.n	80039f4 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 80039f0:	2301      	movs	r3, #1
 80039f2:	e080      	b.n	8003af6 <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	7c1b      	ldrb	r3, [r3, #16]
 80039f8:	2b01      	cmp	r3, #1
 80039fa:	d101      	bne.n	8003a00 <HAL_RTC_SetTime+0x30>
 80039fc:	2302      	movs	r3, #2
 80039fe:	e07a      	b.n	8003af6 <HAL_RTC_SetTime+0x126>
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	2201      	movs	r2, #1
 8003a04:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	2202      	movs	r2, #2
 8003a0a:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d113      	bne.n	8003a3a <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8003a12:	68bb      	ldr	r3, [r7, #8]
 8003a14:	781b      	ldrb	r3, [r3, #0]
 8003a16:	461a      	mov	r2, r3
 8003a18:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 8003a1c:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	785b      	ldrb	r3, [r3, #1]
 8003a24:	4619      	mov	r1, r3
 8003a26:	460b      	mov	r3, r1
 8003a28:	011b      	lsls	r3, r3, #4
 8003a2a:	1a5b      	subs	r3, r3, r1
 8003a2c:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8003a2e:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 8003a30:	68ba      	ldr	r2, [r7, #8]
 8003a32:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8003a34:	4413      	add	r3, r2
 8003a36:	617b      	str	r3, [r7, #20]
 8003a38:	e01e      	b.n	8003a78 <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8003a3a:	68bb      	ldr	r3, [r7, #8]
 8003a3c:	781b      	ldrb	r3, [r3, #0]
 8003a3e:	4618      	mov	r0, r3
 8003a40:	f000 fa28 	bl	8003e94 <RTC_Bcd2ToByte>
 8003a44:	4603      	mov	r3, r0
 8003a46:	461a      	mov	r2, r3
 8003a48:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 8003a4c:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8003a50:	68bb      	ldr	r3, [r7, #8]
 8003a52:	785b      	ldrb	r3, [r3, #1]
 8003a54:	4618      	mov	r0, r3
 8003a56:	f000 fa1d 	bl	8003e94 <RTC_Bcd2ToByte>
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	461a      	mov	r2, r3
 8003a5e:	4613      	mov	r3, r2
 8003a60:	011b      	lsls	r3, r3, #4
 8003a62:	1a9b      	subs	r3, r3, r2
 8003a64:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8003a66:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8003a68:	68bb      	ldr	r3, [r7, #8]
 8003a6a:	789b      	ldrb	r3, [r3, #2]
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	f000 fa11 	bl	8003e94 <RTC_Bcd2ToByte>
 8003a72:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8003a74:	4423      	add	r3, r4
 8003a76:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8003a78:	6979      	ldr	r1, [r7, #20]
 8003a7a:	68f8      	ldr	r0, [r7, #12]
 8003a7c:	f000 f953 	bl	8003d26 <RTC_WriteTimeCounter>
 8003a80:	4603      	mov	r3, r0
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d007      	beq.n	8003a96 <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	2204      	movs	r2, #4
 8003a8a:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	2200      	movs	r2, #0
 8003a90:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8003a92:	2301      	movs	r3, #1
 8003a94:	e02f      	b.n	8003af6 <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	685a      	ldr	r2, [r3, #4]
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f022 0205 	bic.w	r2, r2, #5
 8003aa4:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8003aa6:	68f8      	ldr	r0, [r7, #12]
 8003aa8:	f000 f964 	bl	8003d74 <RTC_ReadAlarmCounter>
 8003aac:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8003aae:	693b      	ldr	r3, [r7, #16]
 8003ab0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ab4:	d018      	beq.n	8003ae8 <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 8003ab6:	693a      	ldr	r2, [r7, #16]
 8003ab8:	697b      	ldr	r3, [r7, #20]
 8003aba:	429a      	cmp	r2, r3
 8003abc:	d214      	bcs.n	8003ae8 <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8003abe:	693b      	ldr	r3, [r7, #16]
 8003ac0:	f503 33a8 	add.w	r3, r3, #86016	@ 0x15000
 8003ac4:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 8003ac8:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8003aca:	6939      	ldr	r1, [r7, #16]
 8003acc:	68f8      	ldr	r0, [r7, #12]
 8003ace:	f000 f96a 	bl	8003da6 <RTC_WriteAlarmCounter>
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d007      	beq.n	8003ae8 <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	2204      	movs	r2, #4
 8003adc:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	e006      	b.n	8003af6 <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	2201      	movs	r2, #1
 8003aec:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	2200      	movs	r2, #0
 8003af2:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8003af4:	2300      	movs	r3, #0
  }
}
 8003af6:	4618      	mov	r0, r3
 8003af8:	371c      	adds	r7, #28
 8003afa:	46bd      	mov	sp, r7
 8003afc:	bd90      	pop	{r4, r7, pc}
	...

08003b00 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b088      	sub	sp, #32
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	60f8      	str	r0, [r7, #12]
 8003b08:	60b9      	str	r1, [r7, #8]
 8003b0a:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	61fb      	str	r3, [r7, #28]
 8003b10:	2300      	movs	r3, #0
 8003b12:	61bb      	str	r3, [r7, #24]
 8003b14:	2300      	movs	r3, #0
 8003b16:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d002      	beq.n	8003b24 <HAL_RTC_SetDate+0x24>
 8003b1e:	68bb      	ldr	r3, [r7, #8]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d101      	bne.n	8003b28 <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 8003b24:	2301      	movs	r3, #1
 8003b26:	e097      	b.n	8003c58 <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	7c1b      	ldrb	r3, [r3, #16]
 8003b2c:	2b01      	cmp	r3, #1
 8003b2e:	d101      	bne.n	8003b34 <HAL_RTC_SetDate+0x34>
 8003b30:	2302      	movs	r3, #2
 8003b32:	e091      	b.n	8003c58 <HAL_RTC_SetDate+0x158>
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	2201      	movs	r2, #1
 8003b38:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	2202      	movs	r2, #2
 8003b3e:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d10c      	bne.n	8003b60 <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 8003b46:	68bb      	ldr	r3, [r7, #8]
 8003b48:	78da      	ldrb	r2, [r3, #3]
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	785a      	ldrb	r2, [r3, #1]
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	789a      	ldrb	r2, [r3, #2]
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	739a      	strb	r2, [r3, #14]
 8003b5e:	e01a      	b.n	8003b96 <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8003b60:	68bb      	ldr	r3, [r7, #8]
 8003b62:	78db      	ldrb	r3, [r3, #3]
 8003b64:	4618      	mov	r0, r3
 8003b66:	f000 f995 	bl	8003e94 <RTC_Bcd2ToByte>
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	461a      	mov	r2, r3
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8003b72:	68bb      	ldr	r3, [r7, #8]
 8003b74:	785b      	ldrb	r3, [r3, #1]
 8003b76:	4618      	mov	r0, r3
 8003b78:	f000 f98c 	bl	8003e94 <RTC_Bcd2ToByte>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	461a      	mov	r2, r3
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	789b      	ldrb	r3, [r3, #2]
 8003b88:	4618      	mov	r0, r3
 8003b8a:	f000 f983 	bl	8003e94 <RTC_Bcd2ToByte>
 8003b8e:	4603      	mov	r3, r0
 8003b90:	461a      	mov	r2, r3
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	7bdb      	ldrb	r3, [r3, #15]
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	7b59      	ldrb	r1, [r3, #13]
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	7b9b      	ldrb	r3, [r3, #14]
 8003ba4:	461a      	mov	r2, r3
 8003ba6:	f000 f993 	bl	8003ed0 <RTC_WeekDayNum>
 8003baa:	4603      	mov	r3, r0
 8003bac:	461a      	mov	r2, r3
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	7b1a      	ldrb	r2, [r3, #12]
 8003bb6:	68bb      	ldr	r3, [r7, #8]
 8003bb8:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8003bba:	68f8      	ldr	r0, [r7, #12]
 8003bbc:	f000 f883 	bl	8003cc6 <RTC_ReadTimeCounter>
 8003bc0:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8003bc2:	69fb      	ldr	r3, [r7, #28]
 8003bc4:	4a26      	ldr	r2, [pc, #152]	@ (8003c60 <HAL_RTC_SetDate+0x160>)
 8003bc6:	fba2 2303 	umull	r2, r3, r2, r3
 8003bca:	0adb      	lsrs	r3, r3, #11
 8003bcc:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 8003bce:	697b      	ldr	r3, [r7, #20]
 8003bd0:	2b18      	cmp	r3, #24
 8003bd2:	d93a      	bls.n	8003c4a <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 8003bd4:	697b      	ldr	r3, [r7, #20]
 8003bd6:	4a23      	ldr	r2, [pc, #140]	@ (8003c64 <HAL_RTC_SetDate+0x164>)
 8003bd8:	fba2 2303 	umull	r2, r3, r2, r3
 8003bdc:	091b      	lsrs	r3, r3, #4
 8003bde:	4a22      	ldr	r2, [pc, #136]	@ (8003c68 <HAL_RTC_SetDate+0x168>)
 8003be0:	fb02 f303 	mul.w	r3, r2, r3
 8003be4:	69fa      	ldr	r2, [r7, #28]
 8003be6:	1ad3      	subs	r3, r2, r3
 8003be8:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8003bea:	69f9      	ldr	r1, [r7, #28]
 8003bec:	68f8      	ldr	r0, [r7, #12]
 8003bee:	f000 f89a 	bl	8003d26 <RTC_WriteTimeCounter>
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d007      	beq.n	8003c08 <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	2204      	movs	r2, #4
 8003bfc:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	2200      	movs	r2, #0
 8003c02:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 8003c04:	2301      	movs	r3, #1
 8003c06:	e027      	b.n	8003c58 <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8003c08:	68f8      	ldr	r0, [r7, #12]
 8003c0a:	f000 f8b3 	bl	8003d74 <RTC_ReadAlarmCounter>
 8003c0e:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8003c10:	69bb      	ldr	r3, [r7, #24]
 8003c12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c16:	d018      	beq.n	8003c4a <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 8003c18:	69ba      	ldr	r2, [r7, #24]
 8003c1a:	69fb      	ldr	r3, [r7, #28]
 8003c1c:	429a      	cmp	r2, r3
 8003c1e:	d214      	bcs.n	8003c4a <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8003c20:	69bb      	ldr	r3, [r7, #24]
 8003c22:	f503 33a8 	add.w	r3, r3, #86016	@ 0x15000
 8003c26:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 8003c2a:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8003c2c:	69b9      	ldr	r1, [r7, #24]
 8003c2e:	68f8      	ldr	r0, [r7, #12]
 8003c30:	f000 f8b9 	bl	8003da6 <RTC_WriteAlarmCounter>
 8003c34:	4603      	mov	r3, r0
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d007      	beq.n	8003c4a <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	2204      	movs	r2, #4
 8003c3e:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	2200      	movs	r2, #0
 8003c44:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8003c46:	2301      	movs	r3, #1
 8003c48:	e006      	b.n	8003c58 <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	2201      	movs	r2, #1
 8003c4e:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	2200      	movs	r2, #0
 8003c54:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003c56:	2300      	movs	r3, #0
}
 8003c58:	4618      	mov	r0, r3
 8003c5a:	3720      	adds	r7, #32
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	bd80      	pop	{r7, pc}
 8003c60:	91a2b3c5 	.word	0x91a2b3c5
 8003c64:	aaaaaaab 	.word	0xaaaaaaab
 8003c68:	00015180 	.word	0x00015180

08003c6c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b084      	sub	sp, #16
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003c74:	2300      	movs	r3, #0
 8003c76:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d101      	bne.n	8003c82 <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	e01d      	b.n	8003cbe <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	685a      	ldr	r2, [r3, #4]
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f022 0208 	bic.w	r2, r2, #8
 8003c90:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8003c92:	f7fd fc39 	bl	8001508 <HAL_GetTick>
 8003c96:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8003c98:	e009      	b.n	8003cae <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8003c9a:	f7fd fc35 	bl	8001508 <HAL_GetTick>
 8003c9e:	4602      	mov	r2, r0
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	1ad3      	subs	r3, r2, r3
 8003ca4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003ca8:	d901      	bls.n	8003cae <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8003caa:	2303      	movs	r3, #3
 8003cac:	e007      	b.n	8003cbe <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	685b      	ldr	r3, [r3, #4]
 8003cb4:	f003 0308 	and.w	r3, r3, #8
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d0ee      	beq.n	8003c9a <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8003cbc:	2300      	movs	r3, #0
}
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	3710      	adds	r7, #16
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bd80      	pop	{r7, pc}

08003cc6 <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 8003cc6:	b480      	push	{r7}
 8003cc8:	b087      	sub	sp, #28
 8003cca:	af00      	add	r7, sp, #0
 8003ccc:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 8003cce:	2300      	movs	r3, #0
 8003cd0:	827b      	strh	r3, [r7, #18]
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	823b      	strh	r3, [r7, #16]
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 8003cda:	2300      	movs	r3, #0
 8003cdc:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	699b      	ldr	r3, [r3, #24]
 8003ce4:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	69db      	ldr	r3, [r3, #28]
 8003cec:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	699b      	ldr	r3, [r3, #24]
 8003cf4:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 8003cf6:	8a7a      	ldrh	r2, [r7, #18]
 8003cf8:	8a3b      	ldrh	r3, [r7, #16]
 8003cfa:	429a      	cmp	r2, r3
 8003cfc:	d008      	beq.n	8003d10 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8003cfe:	8a3b      	ldrh	r3, [r7, #16]
 8003d00:	041a      	lsls	r2, r3, #16
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	69db      	ldr	r3, [r3, #28]
 8003d08:	b29b      	uxth	r3, r3
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	617b      	str	r3, [r7, #20]
 8003d0e:	e004      	b.n	8003d1a <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8003d10:	8a7b      	ldrh	r3, [r7, #18]
 8003d12:	041a      	lsls	r2, r3, #16
 8003d14:	89fb      	ldrh	r3, [r7, #14]
 8003d16:	4313      	orrs	r3, r2
 8003d18:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 8003d1a:	697b      	ldr	r3, [r7, #20]
}
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	371c      	adds	r7, #28
 8003d20:	46bd      	mov	sp, r7
 8003d22:	bc80      	pop	{r7}
 8003d24:	4770      	bx	lr

08003d26 <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 8003d26:	b580      	push	{r7, lr}
 8003d28:	b084      	sub	sp, #16
 8003d2a:	af00      	add	r7, sp, #0
 8003d2c:	6078      	str	r0, [r7, #4]
 8003d2e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003d30:	2300      	movs	r3, #0
 8003d32:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003d34:	6878      	ldr	r0, [r7, #4]
 8003d36:	f000 f85d 	bl	8003df4 <RTC_EnterInitMode>
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d002      	beq.n	8003d46 <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 8003d40:	2301      	movs	r3, #1
 8003d42:	73fb      	strb	r3, [r7, #15]
 8003d44:	e011      	b.n	8003d6a <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	683a      	ldr	r2, [r7, #0]
 8003d4c:	0c12      	lsrs	r2, r2, #16
 8003d4e:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	683a      	ldr	r2, [r7, #0]
 8003d56:	b292      	uxth	r2, r2
 8003d58:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8003d5a:	6878      	ldr	r0, [r7, #4]
 8003d5c:	f000 f872 	bl	8003e44 <RTC_ExitInitMode>
 8003d60:	4603      	mov	r3, r0
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d001      	beq.n	8003d6a <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 8003d66:	2301      	movs	r3, #1
 8003d68:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8003d6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	3710      	adds	r7, #16
 8003d70:	46bd      	mov	sp, r7
 8003d72:	bd80      	pop	{r7, pc}

08003d74 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 8003d74:	b480      	push	{r7}
 8003d76:	b085      	sub	sp, #20
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	81fb      	strh	r3, [r7, #14]
 8003d80:	2300      	movs	r3, #0
 8003d82:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	6a1b      	ldr	r3, [r3, #32]
 8003d8a:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d92:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 8003d94:	89fb      	ldrh	r3, [r7, #14]
 8003d96:	041a      	lsls	r2, r3, #16
 8003d98:	89bb      	ldrh	r3, [r7, #12]
 8003d9a:	4313      	orrs	r3, r2
}
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	3714      	adds	r7, #20
 8003da0:	46bd      	mov	sp, r7
 8003da2:	bc80      	pop	{r7}
 8003da4:	4770      	bx	lr

08003da6 <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 8003da6:	b580      	push	{r7, lr}
 8003da8:	b084      	sub	sp, #16
 8003daa:	af00      	add	r7, sp, #0
 8003dac:	6078      	str	r0, [r7, #4]
 8003dae:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003db0:	2300      	movs	r3, #0
 8003db2:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003db4:	6878      	ldr	r0, [r7, #4]
 8003db6:	f000 f81d 	bl	8003df4 <RTC_EnterInitMode>
 8003dba:	4603      	mov	r3, r0
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d002      	beq.n	8003dc6 <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	73fb      	strb	r3, [r7, #15]
 8003dc4:	e011      	b.n	8003dea <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	683a      	ldr	r2, [r7, #0]
 8003dcc:	0c12      	lsrs	r2, r2, #16
 8003dce:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	683a      	ldr	r2, [r7, #0]
 8003dd6:	b292      	uxth	r2, r2
 8003dd8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8003dda:	6878      	ldr	r0, [r7, #4]
 8003ddc:	f000 f832 	bl	8003e44 <RTC_ExitInitMode>
 8003de0:	4603      	mov	r3, r0
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d001      	beq.n	8003dea <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 8003de6:	2301      	movs	r3, #1
 8003de8:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8003dea:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dec:	4618      	mov	r0, r3
 8003dee:	3710      	adds	r7, #16
 8003df0:	46bd      	mov	sp, r7
 8003df2:	bd80      	pop	{r7, pc}

08003df4 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b084      	sub	sp, #16
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8003e00:	f7fd fb82 	bl	8001508 <HAL_GetTick>
 8003e04:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003e06:	e009      	b.n	8003e1c <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8003e08:	f7fd fb7e 	bl	8001508 <HAL_GetTick>
 8003e0c:	4602      	mov	r2, r0
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	1ad3      	subs	r3, r2, r3
 8003e12:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003e16:	d901      	bls.n	8003e1c <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8003e18:	2303      	movs	r3, #3
 8003e1a:	e00f      	b.n	8003e3c <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	f003 0320 	and.w	r3, r3, #32
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d0ee      	beq.n	8003e08 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	685a      	ldr	r2, [r3, #4]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f042 0210 	orr.w	r2, r2, #16
 8003e38:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8003e3a:	2300      	movs	r3, #0
}
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	3710      	adds	r7, #16
 8003e40:	46bd      	mov	sp, r7
 8003e42:	bd80      	pop	{r7, pc}

08003e44 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b084      	sub	sp, #16
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	685a      	ldr	r2, [r3, #4]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f022 0210 	bic.w	r2, r2, #16
 8003e5e:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8003e60:	f7fd fb52 	bl	8001508 <HAL_GetTick>
 8003e64:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003e66:	e009      	b.n	8003e7c <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8003e68:	f7fd fb4e 	bl	8001508 <HAL_GetTick>
 8003e6c:	4602      	mov	r2, r0
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	1ad3      	subs	r3, r2, r3
 8003e72:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003e76:	d901      	bls.n	8003e7c <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8003e78:	2303      	movs	r3, #3
 8003e7a:	e007      	b.n	8003e8c <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	f003 0320 	and.w	r3, r3, #32
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d0ee      	beq.n	8003e68 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8003e8a:	2300      	movs	r3, #0
}
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	3710      	adds	r7, #16
 8003e90:	46bd      	mov	sp, r7
 8003e92:	bd80      	pop	{r7, pc}

08003e94 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8003e94:	b480      	push	{r7}
 8003e96:	b085      	sub	sp, #20
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	4603      	mov	r3, r0
 8003e9c:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8003ea2:	79fb      	ldrb	r3, [r7, #7]
 8003ea4:	091b      	lsrs	r3, r3, #4
 8003ea6:	b2db      	uxtb	r3, r3
 8003ea8:	461a      	mov	r2, r3
 8003eaa:	4613      	mov	r3, r2
 8003eac:	009b      	lsls	r3, r3, #2
 8003eae:	4413      	add	r3, r2
 8003eb0:	005b      	lsls	r3, r3, #1
 8003eb2:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8003eb4:	79fb      	ldrb	r3, [r7, #7]
 8003eb6:	f003 030f 	and.w	r3, r3, #15
 8003eba:	b2da      	uxtb	r2, r3
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	b2db      	uxtb	r3, r3
 8003ec0:	4413      	add	r3, r2
 8003ec2:	b2db      	uxtb	r3, r3
}
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	3714      	adds	r7, #20
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	bc80      	pop	{r7}
 8003ecc:	4770      	bx	lr
	...

08003ed0 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	b085      	sub	sp, #20
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
 8003ed8:	460b      	mov	r3, r1
 8003eda:	70fb      	strb	r3, [r7, #3]
 8003edc:	4613      	mov	r3, r2
 8003ede:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	60bb      	str	r3, [r7, #8]
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8003eee:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 8003ef0:	78fb      	ldrb	r3, [r7, #3]
 8003ef2:	2b02      	cmp	r3, #2
 8003ef4:	d82d      	bhi.n	8003f52 <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8003ef6:	78fa      	ldrb	r2, [r7, #3]
 8003ef8:	4613      	mov	r3, r2
 8003efa:	005b      	lsls	r3, r3, #1
 8003efc:	4413      	add	r3, r2
 8003efe:	00db      	lsls	r3, r3, #3
 8003f00:	1a9b      	subs	r3, r3, r2
 8003f02:	4a2c      	ldr	r2, [pc, #176]	@ (8003fb4 <RTC_WeekDayNum+0xe4>)
 8003f04:	fba2 2303 	umull	r2, r3, r2, r3
 8003f08:	085a      	lsrs	r2, r3, #1
 8003f0a:	78bb      	ldrb	r3, [r7, #2]
 8003f0c:	441a      	add	r2, r3
 8003f0e:	68bb      	ldr	r3, [r7, #8]
 8003f10:	441a      	add	r2, r3
 8003f12:	68bb      	ldr	r3, [r7, #8]
 8003f14:	3b01      	subs	r3, #1
 8003f16:	089b      	lsrs	r3, r3, #2
 8003f18:	441a      	add	r2, r3
 8003f1a:	68bb      	ldr	r3, [r7, #8]
 8003f1c:	3b01      	subs	r3, #1
 8003f1e:	4926      	ldr	r1, [pc, #152]	@ (8003fb8 <RTC_WeekDayNum+0xe8>)
 8003f20:	fba1 1303 	umull	r1, r3, r1, r3
 8003f24:	095b      	lsrs	r3, r3, #5
 8003f26:	1ad2      	subs	r2, r2, r3
 8003f28:	68bb      	ldr	r3, [r7, #8]
 8003f2a:	3b01      	subs	r3, #1
 8003f2c:	4922      	ldr	r1, [pc, #136]	@ (8003fb8 <RTC_WeekDayNum+0xe8>)
 8003f2e:	fba1 1303 	umull	r1, r3, r1, r3
 8003f32:	09db      	lsrs	r3, r3, #7
 8003f34:	4413      	add	r3, r2
 8003f36:	1d1a      	adds	r2, r3, #4
 8003f38:	4b20      	ldr	r3, [pc, #128]	@ (8003fbc <RTC_WeekDayNum+0xec>)
 8003f3a:	fba3 1302 	umull	r1, r3, r3, r2
 8003f3e:	1ad1      	subs	r1, r2, r3
 8003f40:	0849      	lsrs	r1, r1, #1
 8003f42:	440b      	add	r3, r1
 8003f44:	0899      	lsrs	r1, r3, #2
 8003f46:	460b      	mov	r3, r1
 8003f48:	00db      	lsls	r3, r3, #3
 8003f4a:	1a5b      	subs	r3, r3, r1
 8003f4c:	1ad3      	subs	r3, r2, r3
 8003f4e:	60fb      	str	r3, [r7, #12]
 8003f50:	e029      	b.n	8003fa6 <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8003f52:	78fa      	ldrb	r2, [r7, #3]
 8003f54:	4613      	mov	r3, r2
 8003f56:	005b      	lsls	r3, r3, #1
 8003f58:	4413      	add	r3, r2
 8003f5a:	00db      	lsls	r3, r3, #3
 8003f5c:	1a9b      	subs	r3, r3, r2
 8003f5e:	4a15      	ldr	r2, [pc, #84]	@ (8003fb4 <RTC_WeekDayNum+0xe4>)
 8003f60:	fba2 2303 	umull	r2, r3, r2, r3
 8003f64:	085a      	lsrs	r2, r3, #1
 8003f66:	78bb      	ldrb	r3, [r7, #2]
 8003f68:	441a      	add	r2, r3
 8003f6a:	68bb      	ldr	r3, [r7, #8]
 8003f6c:	441a      	add	r2, r3
 8003f6e:	68bb      	ldr	r3, [r7, #8]
 8003f70:	089b      	lsrs	r3, r3, #2
 8003f72:	441a      	add	r2, r3
 8003f74:	68bb      	ldr	r3, [r7, #8]
 8003f76:	4910      	ldr	r1, [pc, #64]	@ (8003fb8 <RTC_WeekDayNum+0xe8>)
 8003f78:	fba1 1303 	umull	r1, r3, r1, r3
 8003f7c:	095b      	lsrs	r3, r3, #5
 8003f7e:	1ad2      	subs	r2, r2, r3
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	490d      	ldr	r1, [pc, #52]	@ (8003fb8 <RTC_WeekDayNum+0xe8>)
 8003f84:	fba1 1303 	umull	r1, r3, r1, r3
 8003f88:	09db      	lsrs	r3, r3, #7
 8003f8a:	4413      	add	r3, r2
 8003f8c:	1c9a      	adds	r2, r3, #2
 8003f8e:	4b0b      	ldr	r3, [pc, #44]	@ (8003fbc <RTC_WeekDayNum+0xec>)
 8003f90:	fba3 1302 	umull	r1, r3, r3, r2
 8003f94:	1ad1      	subs	r1, r2, r3
 8003f96:	0849      	lsrs	r1, r1, #1
 8003f98:	440b      	add	r3, r1
 8003f9a:	0899      	lsrs	r1, r3, #2
 8003f9c:	460b      	mov	r3, r1
 8003f9e:	00db      	lsls	r3, r3, #3
 8003fa0:	1a5b      	subs	r3, r3, r1
 8003fa2:	1ad3      	subs	r3, r2, r3
 8003fa4:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	b2db      	uxtb	r3, r3
}
 8003faa:	4618      	mov	r0, r3
 8003fac:	3714      	adds	r7, #20
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	bc80      	pop	{r7}
 8003fb2:	4770      	bx	lr
 8003fb4:	38e38e39 	.word	0x38e38e39
 8003fb8:	51eb851f 	.word	0x51eb851f
 8003fbc:	24924925 	.word	0x24924925

08003fc0 <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register (depending devices).
  * @param  Data: Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8003fc0:	b480      	push	{r7}
 8003fc2:	b087      	sub	sp, #28
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	60f8      	str	r0, [r7, #12]
 8003fc8:	60b9      	str	r1, [r7, #8]
 8003fca:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8003fcc:	2300      	movs	r3, #0
 8003fce:	617b      	str	r3, [r7, #20]
  UNUSED(hrtc);

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)BKP_BASE;
 8003fd0:	4b07      	ldr	r3, [pc, #28]	@ (8003ff0 <HAL_RTCEx_BKUPWrite+0x30>)
 8003fd2:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	009b      	lsls	r3, r3, #2
 8003fd8:	697a      	ldr	r2, [r7, #20]
 8003fda:	4413      	add	r3, r2
 8003fdc:	617b      	str	r3, [r7, #20]

  *(__IO uint32_t *) tmp = (Data & BKP_DR1_D);
 8003fde:	697b      	ldr	r3, [r7, #20]
 8003fe0:	687a      	ldr	r2, [r7, #4]
 8003fe2:	b292      	uxth	r2, r2
 8003fe4:	601a      	str	r2, [r3, #0]
}
 8003fe6:	bf00      	nop
 8003fe8:	371c      	adds	r7, #28
 8003fea:	46bd      	mov	sp, r7
 8003fec:	bc80      	pop	{r7}
 8003fee:	4770      	bx	lr
 8003ff0:	40006c00 	.word	0x40006c00

08003ff4 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 1 to 10 (or 42) to
  *                                 specify the register (depending devices).
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	b085      	sub	sp, #20
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
 8003ffc:	6039      	str	r1, [r7, #0]
  uint32_t backupregister = 0U;
 8003ffe:	2300      	movs	r3, #0
 8004000:	60fb      	str	r3, [r7, #12]
  uint32_t pvalue = 0U;
 8004002:	2300      	movs	r3, #0
 8004004:	60bb      	str	r3, [r7, #8]
  UNUSED(hrtc);

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  backupregister = (uint32_t)BKP_BASE;
 8004006:	4b08      	ldr	r3, [pc, #32]	@ (8004028 <HAL_RTCEx_BKUPRead+0x34>)
 8004008:	60fb      	str	r3, [r7, #12]
  backupregister += (BackupRegister * 4U);
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	009b      	lsls	r3, r3, #2
 800400e:	68fa      	ldr	r2, [r7, #12]
 8004010:	4413      	add	r3, r2
 8004012:	60fb      	str	r3, [r7, #12]

  pvalue = (*(__IO uint32_t *)(backupregister)) & BKP_DR1_D;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	b29b      	uxth	r3, r3
 800401a:	60bb      	str	r3, [r7, #8]

  /* Read the specified register */
  return pvalue;
 800401c:	68bb      	ldr	r3, [r7, #8]
}
 800401e:	4618      	mov	r0, r3
 8004020:	3714      	adds	r7, #20
 8004022:	46bd      	mov	sp, r7
 8004024:	bc80      	pop	{r7}
 8004026:	4770      	bx	lr
 8004028:	40006c00 	.word	0x40006c00

0800402c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b082      	sub	sp, #8
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d101      	bne.n	800403e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800403a:	2301      	movs	r3, #1
 800403c:	e076      	b.n	800412c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004042:	2b00      	cmp	r3, #0
 8004044:	d108      	bne.n	8004058 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800404e:	d009      	beq.n	8004064 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2200      	movs	r2, #0
 8004054:	61da      	str	r2, [r3, #28]
 8004056:	e005      	b.n	8004064 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2200      	movs	r2, #0
 800405c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2200      	movs	r2, #0
 8004062:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2200      	movs	r2, #0
 8004068:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004070:	b2db      	uxtb	r3, r3
 8004072:	2b00      	cmp	r3, #0
 8004074:	d106      	bne.n	8004084 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2200      	movs	r2, #0
 800407a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800407e:	6878      	ldr	r0, [r7, #4]
 8004080:	f7fc fbf6 	bl	8000870 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2202      	movs	r2, #2
 8004088:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	681a      	ldr	r2, [r3, #0]
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800409a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	689b      	ldr	r3, [r3, #8]
 80040a8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80040ac:	431a      	orrs	r2, r3
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	68db      	ldr	r3, [r3, #12]
 80040b2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80040b6:	431a      	orrs	r2, r3
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	691b      	ldr	r3, [r3, #16]
 80040bc:	f003 0302 	and.w	r3, r3, #2
 80040c0:	431a      	orrs	r2, r3
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	695b      	ldr	r3, [r3, #20]
 80040c6:	f003 0301 	and.w	r3, r3, #1
 80040ca:	431a      	orrs	r2, r3
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	699b      	ldr	r3, [r3, #24]
 80040d0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80040d4:	431a      	orrs	r2, r3
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	69db      	ldr	r3, [r3, #28]
 80040da:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80040de:	431a      	orrs	r2, r3
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6a1b      	ldr	r3, [r3, #32]
 80040e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040e8:	ea42 0103 	orr.w	r1, r2, r3
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040f0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	430a      	orrs	r2, r1
 80040fa:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	699b      	ldr	r3, [r3, #24]
 8004100:	0c1a      	lsrs	r2, r3, #16
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f002 0204 	and.w	r2, r2, #4
 800410a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	69da      	ldr	r2, [r3, #28]
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800411a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2200      	movs	r2, #0
 8004120:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2201      	movs	r2, #1
 8004126:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800412a:	2300      	movs	r3, #0
}
 800412c:	4618      	mov	r0, r3
 800412e:	3708      	adds	r7, #8
 8004130:	46bd      	mov	sp, r7
 8004132:	bd80      	pop	{r7, pc}

08004134 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b088      	sub	sp, #32
 8004138:	af00      	add	r7, sp, #0
 800413a:	60f8      	str	r0, [r7, #12]
 800413c:	60b9      	str	r1, [r7, #8]
 800413e:	603b      	str	r3, [r7, #0]
 8004140:	4613      	mov	r3, r2
 8004142:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004144:	f7fd f9e0 	bl	8001508 <HAL_GetTick>
 8004148:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800414a:	88fb      	ldrh	r3, [r7, #6]
 800414c:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004154:	b2db      	uxtb	r3, r3
 8004156:	2b01      	cmp	r3, #1
 8004158:	d001      	beq.n	800415e <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800415a:	2302      	movs	r3, #2
 800415c:	e12a      	b.n	80043b4 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 800415e:	68bb      	ldr	r3, [r7, #8]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d002      	beq.n	800416a <HAL_SPI_Transmit+0x36>
 8004164:	88fb      	ldrh	r3, [r7, #6]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d101      	bne.n	800416e <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800416a:	2301      	movs	r3, #1
 800416c:	e122      	b.n	80043b4 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004174:	2b01      	cmp	r3, #1
 8004176:	d101      	bne.n	800417c <HAL_SPI_Transmit+0x48>
 8004178:	2302      	movs	r3, #2
 800417a:	e11b      	b.n	80043b4 <HAL_SPI_Transmit+0x280>
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	2201      	movs	r2, #1
 8004180:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	2203      	movs	r2, #3
 8004188:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	2200      	movs	r2, #0
 8004190:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	68ba      	ldr	r2, [r7, #8]
 8004196:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	88fa      	ldrh	r2, [r7, #6]
 800419c:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	88fa      	ldrh	r2, [r7, #6]
 80041a2:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	2200      	movs	r2, #0
 80041a8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	2200      	movs	r2, #0
 80041ae:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	2200      	movs	r2, #0
 80041b4:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	2200      	movs	r2, #0
 80041ba:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	2200      	movs	r2, #0
 80041c0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	689b      	ldr	r3, [r3, #8]
 80041c6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80041ca:	d10f      	bne.n	80041ec <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	681a      	ldr	r2, [r3, #0]
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80041da:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	681a      	ldr	r2, [r3, #0]
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80041ea:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041f6:	2b40      	cmp	r3, #64	@ 0x40
 80041f8:	d007      	beq.n	800420a <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	681a      	ldr	r2, [r3, #0]
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004208:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	68db      	ldr	r3, [r3, #12]
 800420e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004212:	d152      	bne.n	80042ba <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	685b      	ldr	r3, [r3, #4]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d002      	beq.n	8004222 <HAL_SPI_Transmit+0xee>
 800421c:	8b7b      	ldrh	r3, [r7, #26]
 800421e:	2b01      	cmp	r3, #1
 8004220:	d145      	bne.n	80042ae <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004226:	881a      	ldrh	r2, [r3, #0]
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004232:	1c9a      	adds	r2, r3, #2
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800423c:	b29b      	uxth	r3, r3
 800423e:	3b01      	subs	r3, #1
 8004240:	b29a      	uxth	r2, r3
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004246:	e032      	b.n	80042ae <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	689b      	ldr	r3, [r3, #8]
 800424e:	f003 0302 	and.w	r3, r3, #2
 8004252:	2b02      	cmp	r3, #2
 8004254:	d112      	bne.n	800427c <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800425a:	881a      	ldrh	r2, [r3, #0]
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004266:	1c9a      	adds	r2, r3, #2
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004270:	b29b      	uxth	r3, r3
 8004272:	3b01      	subs	r3, #1
 8004274:	b29a      	uxth	r2, r3
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	86da      	strh	r2, [r3, #54]	@ 0x36
 800427a:	e018      	b.n	80042ae <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800427c:	f7fd f944 	bl	8001508 <HAL_GetTick>
 8004280:	4602      	mov	r2, r0
 8004282:	69fb      	ldr	r3, [r7, #28]
 8004284:	1ad3      	subs	r3, r2, r3
 8004286:	683a      	ldr	r2, [r7, #0]
 8004288:	429a      	cmp	r2, r3
 800428a:	d803      	bhi.n	8004294 <HAL_SPI_Transmit+0x160>
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004292:	d102      	bne.n	800429a <HAL_SPI_Transmit+0x166>
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d109      	bne.n	80042ae <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	2201      	movs	r2, #1
 800429e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	2200      	movs	r2, #0
 80042a6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80042aa:	2303      	movs	r3, #3
 80042ac:	e082      	b.n	80043b4 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80042b2:	b29b      	uxth	r3, r3
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d1c7      	bne.n	8004248 <HAL_SPI_Transmit+0x114>
 80042b8:	e053      	b.n	8004362 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	685b      	ldr	r3, [r3, #4]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d002      	beq.n	80042c8 <HAL_SPI_Transmit+0x194>
 80042c2:	8b7b      	ldrh	r3, [r7, #26]
 80042c4:	2b01      	cmp	r3, #1
 80042c6:	d147      	bne.n	8004358 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	330c      	adds	r3, #12
 80042d2:	7812      	ldrb	r2, [r2, #0]
 80042d4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042da:	1c5a      	adds	r2, r3, #1
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80042e4:	b29b      	uxth	r3, r3
 80042e6:	3b01      	subs	r3, #1
 80042e8:	b29a      	uxth	r2, r3
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80042ee:	e033      	b.n	8004358 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	689b      	ldr	r3, [r3, #8]
 80042f6:	f003 0302 	and.w	r3, r3, #2
 80042fa:	2b02      	cmp	r3, #2
 80042fc:	d113      	bne.n	8004326 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	330c      	adds	r3, #12
 8004308:	7812      	ldrb	r2, [r2, #0]
 800430a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004310:	1c5a      	adds	r2, r3, #1
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800431a:	b29b      	uxth	r3, r3
 800431c:	3b01      	subs	r3, #1
 800431e:	b29a      	uxth	r2, r3
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004324:	e018      	b.n	8004358 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004326:	f7fd f8ef 	bl	8001508 <HAL_GetTick>
 800432a:	4602      	mov	r2, r0
 800432c:	69fb      	ldr	r3, [r7, #28]
 800432e:	1ad3      	subs	r3, r2, r3
 8004330:	683a      	ldr	r2, [r7, #0]
 8004332:	429a      	cmp	r2, r3
 8004334:	d803      	bhi.n	800433e <HAL_SPI_Transmit+0x20a>
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	f1b3 3fff 	cmp.w	r3, #4294967295
 800433c:	d102      	bne.n	8004344 <HAL_SPI_Transmit+0x210>
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d109      	bne.n	8004358 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	2201      	movs	r2, #1
 8004348:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	2200      	movs	r2, #0
 8004350:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004354:	2303      	movs	r3, #3
 8004356:	e02d      	b.n	80043b4 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800435c:	b29b      	uxth	r3, r3
 800435e:	2b00      	cmp	r3, #0
 8004360:	d1c6      	bne.n	80042f0 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004362:	69fa      	ldr	r2, [r7, #28]
 8004364:	6839      	ldr	r1, [r7, #0]
 8004366:	68f8      	ldr	r0, [r7, #12]
 8004368:	f000 fbc4 	bl	8004af4 <SPI_EndRxTxTransaction>
 800436c:	4603      	mov	r3, r0
 800436e:	2b00      	cmp	r3, #0
 8004370:	d002      	beq.n	8004378 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	2220      	movs	r2, #32
 8004376:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	689b      	ldr	r3, [r3, #8]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d10a      	bne.n	8004396 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004380:	2300      	movs	r3, #0
 8004382:	617b      	str	r3, [r7, #20]
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	68db      	ldr	r3, [r3, #12]
 800438a:	617b      	str	r3, [r7, #20]
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	689b      	ldr	r3, [r3, #8]
 8004392:	617b      	str	r3, [r7, #20]
 8004394:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	2201      	movs	r2, #1
 800439a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	2200      	movs	r2, #0
 80043a2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d001      	beq.n	80043b2 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80043ae:	2301      	movs	r3, #1
 80043b0:	e000      	b.n	80043b4 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80043b2:	2300      	movs	r3, #0
  }
}
 80043b4:	4618      	mov	r0, r3
 80043b6:	3720      	adds	r7, #32
 80043b8:	46bd      	mov	sp, r7
 80043ba:	bd80      	pop	{r7, pc}

080043bc <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b088      	sub	sp, #32
 80043c0:	af02      	add	r7, sp, #8
 80043c2:	60f8      	str	r0, [r7, #12]
 80043c4:	60b9      	str	r1, [r7, #8]
 80043c6:	603b      	str	r3, [r7, #0]
 80043c8:	4613      	mov	r3, r2
 80043ca:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80043d2:	b2db      	uxtb	r3, r3
 80043d4:	2b01      	cmp	r3, #1
 80043d6:	d001      	beq.n	80043dc <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 80043d8:	2302      	movs	r3, #2
 80043da:	e104      	b.n	80045e6 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	685b      	ldr	r3, [r3, #4]
 80043e0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80043e4:	d112      	bne.n	800440c <HAL_SPI_Receive+0x50>
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	689b      	ldr	r3, [r3, #8]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d10e      	bne.n	800440c <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	2204      	movs	r2, #4
 80043f2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80043f6:	88fa      	ldrh	r2, [r7, #6]
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	9300      	str	r3, [sp, #0]
 80043fc:	4613      	mov	r3, r2
 80043fe:	68ba      	ldr	r2, [r7, #8]
 8004400:	68b9      	ldr	r1, [r7, #8]
 8004402:	68f8      	ldr	r0, [r7, #12]
 8004404:	f000 f8f3 	bl	80045ee <HAL_SPI_TransmitReceive>
 8004408:	4603      	mov	r3, r0
 800440a:	e0ec      	b.n	80045e6 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800440c:	f7fd f87c 	bl	8001508 <HAL_GetTick>
 8004410:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8004412:	68bb      	ldr	r3, [r7, #8]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d002      	beq.n	800441e <HAL_SPI_Receive+0x62>
 8004418:	88fb      	ldrh	r3, [r7, #6]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d101      	bne.n	8004422 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 800441e:	2301      	movs	r3, #1
 8004420:	e0e1      	b.n	80045e6 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004428:	2b01      	cmp	r3, #1
 800442a:	d101      	bne.n	8004430 <HAL_SPI_Receive+0x74>
 800442c:	2302      	movs	r3, #2
 800442e:	e0da      	b.n	80045e6 <HAL_SPI_Receive+0x22a>
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	2201      	movs	r2, #1
 8004434:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	2204      	movs	r2, #4
 800443c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	2200      	movs	r2, #0
 8004444:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	68ba      	ldr	r2, [r7, #8]
 800444a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	88fa      	ldrh	r2, [r7, #6]
 8004450:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	88fa      	ldrh	r2, [r7, #6]
 8004456:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	2200      	movs	r2, #0
 800445c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	2200      	movs	r2, #0
 8004462:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	2200      	movs	r2, #0
 8004468:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	2200      	movs	r2, #0
 800446e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	2200      	movs	r2, #0
 8004474:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	689b      	ldr	r3, [r3, #8]
 800447a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800447e:	d10f      	bne.n	80044a0 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	681a      	ldr	r2, [r3, #0]
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800448e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	681a      	ldr	r2, [r3, #0]
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800449e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044aa:	2b40      	cmp	r3, #64	@ 0x40
 80044ac:	d007      	beq.n	80044be <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	681a      	ldr	r2, [r3, #0]
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80044bc:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	68db      	ldr	r3, [r3, #12]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d170      	bne.n	80045a8 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80044c6:	e035      	b.n	8004534 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	689b      	ldr	r3, [r3, #8]
 80044ce:	f003 0301 	and.w	r3, r3, #1
 80044d2:	2b01      	cmp	r3, #1
 80044d4:	d115      	bne.n	8004502 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f103 020c 	add.w	r2, r3, #12
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044e2:	7812      	ldrb	r2, [r2, #0]
 80044e4:	b2d2      	uxtb	r2, r2
 80044e6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044ec:	1c5a      	adds	r2, r3, #1
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80044f6:	b29b      	uxth	r3, r3
 80044f8:	3b01      	subs	r3, #1
 80044fa:	b29a      	uxth	r2, r3
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004500:	e018      	b.n	8004534 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004502:	f7fd f801 	bl	8001508 <HAL_GetTick>
 8004506:	4602      	mov	r2, r0
 8004508:	697b      	ldr	r3, [r7, #20]
 800450a:	1ad3      	subs	r3, r2, r3
 800450c:	683a      	ldr	r2, [r7, #0]
 800450e:	429a      	cmp	r2, r3
 8004510:	d803      	bhi.n	800451a <HAL_SPI_Receive+0x15e>
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004518:	d102      	bne.n	8004520 <HAL_SPI_Receive+0x164>
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d109      	bne.n	8004534 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	2201      	movs	r2, #1
 8004524:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	2200      	movs	r2, #0
 800452c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004530:	2303      	movs	r3, #3
 8004532:	e058      	b.n	80045e6 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004538:	b29b      	uxth	r3, r3
 800453a:	2b00      	cmp	r3, #0
 800453c:	d1c4      	bne.n	80044c8 <HAL_SPI_Receive+0x10c>
 800453e:	e038      	b.n	80045b2 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	689b      	ldr	r3, [r3, #8]
 8004546:	f003 0301 	and.w	r3, r3, #1
 800454a:	2b01      	cmp	r3, #1
 800454c:	d113      	bne.n	8004576 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	68da      	ldr	r2, [r3, #12]
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004558:	b292      	uxth	r2, r2
 800455a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004560:	1c9a      	adds	r2, r3, #2
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800456a:	b29b      	uxth	r3, r3
 800456c:	3b01      	subs	r3, #1
 800456e:	b29a      	uxth	r2, r3
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004574:	e018      	b.n	80045a8 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004576:	f7fc ffc7 	bl	8001508 <HAL_GetTick>
 800457a:	4602      	mov	r2, r0
 800457c:	697b      	ldr	r3, [r7, #20]
 800457e:	1ad3      	subs	r3, r2, r3
 8004580:	683a      	ldr	r2, [r7, #0]
 8004582:	429a      	cmp	r2, r3
 8004584:	d803      	bhi.n	800458e <HAL_SPI_Receive+0x1d2>
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	f1b3 3fff 	cmp.w	r3, #4294967295
 800458c:	d102      	bne.n	8004594 <HAL_SPI_Receive+0x1d8>
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d109      	bne.n	80045a8 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	2201      	movs	r2, #1
 8004598:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	2200      	movs	r2, #0
 80045a0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80045a4:	2303      	movs	r3, #3
 80045a6:	e01e      	b.n	80045e6 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80045ac:	b29b      	uxth	r3, r3
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d1c6      	bne.n	8004540 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80045b2:	697a      	ldr	r2, [r7, #20]
 80045b4:	6839      	ldr	r1, [r7, #0]
 80045b6:	68f8      	ldr	r0, [r7, #12]
 80045b8:	f000 fa4a 	bl	8004a50 <SPI_EndRxTransaction>
 80045bc:	4603      	mov	r3, r0
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d002      	beq.n	80045c8 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	2220      	movs	r2, #32
 80045c6:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	2201      	movs	r2, #1
 80045cc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	2200      	movs	r2, #0
 80045d4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d001      	beq.n	80045e4 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 80045e0:	2301      	movs	r3, #1
 80045e2:	e000      	b.n	80045e6 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 80045e4:	2300      	movs	r3, #0
  }
}
 80045e6:	4618      	mov	r0, r3
 80045e8:	3718      	adds	r7, #24
 80045ea:	46bd      	mov	sp, r7
 80045ec:	bd80      	pop	{r7, pc}

080045ee <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80045ee:	b580      	push	{r7, lr}
 80045f0:	b08a      	sub	sp, #40	@ 0x28
 80045f2:	af00      	add	r7, sp, #0
 80045f4:	60f8      	str	r0, [r7, #12]
 80045f6:	60b9      	str	r1, [r7, #8]
 80045f8:	607a      	str	r2, [r7, #4]
 80045fa:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80045fc:	2301      	movs	r3, #1
 80045fe:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004600:	f7fc ff82 	bl	8001508 <HAL_GetTick>
 8004604:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800460c:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	685b      	ldr	r3, [r3, #4]
 8004612:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8004614:	887b      	ldrh	r3, [r7, #2]
 8004616:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004618:	7ffb      	ldrb	r3, [r7, #31]
 800461a:	2b01      	cmp	r3, #1
 800461c:	d00c      	beq.n	8004638 <HAL_SPI_TransmitReceive+0x4a>
 800461e:	69bb      	ldr	r3, [r7, #24]
 8004620:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004624:	d106      	bne.n	8004634 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	689b      	ldr	r3, [r3, #8]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d102      	bne.n	8004634 <HAL_SPI_TransmitReceive+0x46>
 800462e:	7ffb      	ldrb	r3, [r7, #31]
 8004630:	2b04      	cmp	r3, #4
 8004632:	d001      	beq.n	8004638 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8004634:	2302      	movs	r3, #2
 8004636:	e17f      	b.n	8004938 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d005      	beq.n	800464a <HAL_SPI_TransmitReceive+0x5c>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d002      	beq.n	800464a <HAL_SPI_TransmitReceive+0x5c>
 8004644:	887b      	ldrh	r3, [r7, #2]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d101      	bne.n	800464e <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 800464a:	2301      	movs	r3, #1
 800464c:	e174      	b.n	8004938 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004654:	2b01      	cmp	r3, #1
 8004656:	d101      	bne.n	800465c <HAL_SPI_TransmitReceive+0x6e>
 8004658:	2302      	movs	r3, #2
 800465a:	e16d      	b.n	8004938 <HAL_SPI_TransmitReceive+0x34a>
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	2201      	movs	r2, #1
 8004660:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800466a:	b2db      	uxtb	r3, r3
 800466c:	2b04      	cmp	r3, #4
 800466e:	d003      	beq.n	8004678 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	2205      	movs	r2, #5
 8004674:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	2200      	movs	r2, #0
 800467c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	687a      	ldr	r2, [r7, #4]
 8004682:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	887a      	ldrh	r2, [r7, #2]
 8004688:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	887a      	ldrh	r2, [r7, #2]
 800468e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	68ba      	ldr	r2, [r7, #8]
 8004694:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	887a      	ldrh	r2, [r7, #2]
 800469a:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	887a      	ldrh	r2, [r7, #2]
 80046a0:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	2200      	movs	r2, #0
 80046a6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	2200      	movs	r2, #0
 80046ac:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046b8:	2b40      	cmp	r3, #64	@ 0x40
 80046ba:	d007      	beq.n	80046cc <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	681a      	ldr	r2, [r3, #0]
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80046ca:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	68db      	ldr	r3, [r3, #12]
 80046d0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80046d4:	d17e      	bne.n	80047d4 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	685b      	ldr	r3, [r3, #4]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d002      	beq.n	80046e4 <HAL_SPI_TransmitReceive+0xf6>
 80046de:	8afb      	ldrh	r3, [r7, #22]
 80046e0:	2b01      	cmp	r3, #1
 80046e2:	d16c      	bne.n	80047be <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046e8:	881a      	ldrh	r2, [r3, #0]
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046f4:	1c9a      	adds	r2, r3, #2
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80046fe:	b29b      	uxth	r3, r3
 8004700:	3b01      	subs	r3, #1
 8004702:	b29a      	uxth	r2, r3
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004708:	e059      	b.n	80047be <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	689b      	ldr	r3, [r3, #8]
 8004710:	f003 0302 	and.w	r3, r3, #2
 8004714:	2b02      	cmp	r3, #2
 8004716:	d11b      	bne.n	8004750 <HAL_SPI_TransmitReceive+0x162>
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800471c:	b29b      	uxth	r3, r3
 800471e:	2b00      	cmp	r3, #0
 8004720:	d016      	beq.n	8004750 <HAL_SPI_TransmitReceive+0x162>
 8004722:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004724:	2b01      	cmp	r3, #1
 8004726:	d113      	bne.n	8004750 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800472c:	881a      	ldrh	r2, [r3, #0]
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004738:	1c9a      	adds	r2, r3, #2
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004742:	b29b      	uxth	r3, r3
 8004744:	3b01      	subs	r3, #1
 8004746:	b29a      	uxth	r2, r3
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800474c:	2300      	movs	r3, #0
 800474e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	689b      	ldr	r3, [r3, #8]
 8004756:	f003 0301 	and.w	r3, r3, #1
 800475a:	2b01      	cmp	r3, #1
 800475c:	d119      	bne.n	8004792 <HAL_SPI_TransmitReceive+0x1a4>
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004762:	b29b      	uxth	r3, r3
 8004764:	2b00      	cmp	r3, #0
 8004766:	d014      	beq.n	8004792 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	68da      	ldr	r2, [r3, #12]
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004772:	b292      	uxth	r2, r2
 8004774:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800477a:	1c9a      	adds	r2, r3, #2
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004784:	b29b      	uxth	r3, r3
 8004786:	3b01      	subs	r3, #1
 8004788:	b29a      	uxth	r2, r3
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800478e:	2301      	movs	r3, #1
 8004790:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004792:	f7fc feb9 	bl	8001508 <HAL_GetTick>
 8004796:	4602      	mov	r2, r0
 8004798:	6a3b      	ldr	r3, [r7, #32]
 800479a:	1ad3      	subs	r3, r2, r3
 800479c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800479e:	429a      	cmp	r2, r3
 80047a0:	d80d      	bhi.n	80047be <HAL_SPI_TransmitReceive+0x1d0>
 80047a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047a8:	d009      	beq.n	80047be <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	2201      	movs	r2, #1
 80047ae:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	2200      	movs	r2, #0
 80047b6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80047ba:	2303      	movs	r3, #3
 80047bc:	e0bc      	b.n	8004938 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80047c2:	b29b      	uxth	r3, r3
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d1a0      	bne.n	800470a <HAL_SPI_TransmitReceive+0x11c>
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80047cc:	b29b      	uxth	r3, r3
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d19b      	bne.n	800470a <HAL_SPI_TransmitReceive+0x11c>
 80047d2:	e082      	b.n	80048da <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	685b      	ldr	r3, [r3, #4]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d002      	beq.n	80047e2 <HAL_SPI_TransmitReceive+0x1f4>
 80047dc:	8afb      	ldrh	r3, [r7, #22]
 80047de:	2b01      	cmp	r3, #1
 80047e0:	d171      	bne.n	80048c6 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	330c      	adds	r3, #12
 80047ec:	7812      	ldrb	r2, [r2, #0]
 80047ee:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047f4:	1c5a      	adds	r2, r3, #1
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80047fe:	b29b      	uxth	r3, r3
 8004800:	3b01      	subs	r3, #1
 8004802:	b29a      	uxth	r2, r3
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004808:	e05d      	b.n	80048c6 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	689b      	ldr	r3, [r3, #8]
 8004810:	f003 0302 	and.w	r3, r3, #2
 8004814:	2b02      	cmp	r3, #2
 8004816:	d11c      	bne.n	8004852 <HAL_SPI_TransmitReceive+0x264>
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800481c:	b29b      	uxth	r3, r3
 800481e:	2b00      	cmp	r3, #0
 8004820:	d017      	beq.n	8004852 <HAL_SPI_TransmitReceive+0x264>
 8004822:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004824:	2b01      	cmp	r3, #1
 8004826:	d114      	bne.n	8004852 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	330c      	adds	r3, #12
 8004832:	7812      	ldrb	r2, [r2, #0]
 8004834:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800483a:	1c5a      	adds	r2, r3, #1
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004844:	b29b      	uxth	r3, r3
 8004846:	3b01      	subs	r3, #1
 8004848:	b29a      	uxth	r2, r3
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800484e:	2300      	movs	r3, #0
 8004850:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	689b      	ldr	r3, [r3, #8]
 8004858:	f003 0301 	and.w	r3, r3, #1
 800485c:	2b01      	cmp	r3, #1
 800485e:	d119      	bne.n	8004894 <HAL_SPI_TransmitReceive+0x2a6>
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004864:	b29b      	uxth	r3, r3
 8004866:	2b00      	cmp	r3, #0
 8004868:	d014      	beq.n	8004894 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	68da      	ldr	r2, [r3, #12]
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004874:	b2d2      	uxtb	r2, r2
 8004876:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800487c:	1c5a      	adds	r2, r3, #1
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004886:	b29b      	uxth	r3, r3
 8004888:	3b01      	subs	r3, #1
 800488a:	b29a      	uxth	r2, r3
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004890:	2301      	movs	r3, #1
 8004892:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004894:	f7fc fe38 	bl	8001508 <HAL_GetTick>
 8004898:	4602      	mov	r2, r0
 800489a:	6a3b      	ldr	r3, [r7, #32]
 800489c:	1ad3      	subs	r3, r2, r3
 800489e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80048a0:	429a      	cmp	r2, r3
 80048a2:	d803      	bhi.n	80048ac <HAL_SPI_TransmitReceive+0x2be>
 80048a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048aa:	d102      	bne.n	80048b2 <HAL_SPI_TransmitReceive+0x2c4>
 80048ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d109      	bne.n	80048c6 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	2201      	movs	r2, #1
 80048b6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	2200      	movs	r2, #0
 80048be:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80048c2:	2303      	movs	r3, #3
 80048c4:	e038      	b.n	8004938 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80048ca:	b29b      	uxth	r3, r3
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d19c      	bne.n	800480a <HAL_SPI_TransmitReceive+0x21c>
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80048d4:	b29b      	uxth	r3, r3
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d197      	bne.n	800480a <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80048da:	6a3a      	ldr	r2, [r7, #32]
 80048dc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80048de:	68f8      	ldr	r0, [r7, #12]
 80048e0:	f000 f908 	bl	8004af4 <SPI_EndRxTxTransaction>
 80048e4:	4603      	mov	r3, r0
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d008      	beq.n	80048fc <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	2220      	movs	r2, #32
 80048ee:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	2200      	movs	r2, #0
 80048f4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80048f8:	2301      	movs	r3, #1
 80048fa:	e01d      	b.n	8004938 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	689b      	ldr	r3, [r3, #8]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d10a      	bne.n	800491a <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004904:	2300      	movs	r3, #0
 8004906:	613b      	str	r3, [r7, #16]
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	68db      	ldr	r3, [r3, #12]
 800490e:	613b      	str	r3, [r7, #16]
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	689b      	ldr	r3, [r3, #8]
 8004916:	613b      	str	r3, [r7, #16]
 8004918:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	2201      	movs	r2, #1
 800491e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	2200      	movs	r2, #0
 8004926:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800492e:	2b00      	cmp	r3, #0
 8004930:	d001      	beq.n	8004936 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8004932:	2301      	movs	r3, #1
 8004934:	e000      	b.n	8004938 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8004936:	2300      	movs	r3, #0
  }
}
 8004938:	4618      	mov	r0, r3
 800493a:	3728      	adds	r7, #40	@ 0x28
 800493c:	46bd      	mov	sp, r7
 800493e:	bd80      	pop	{r7, pc}

08004940 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b088      	sub	sp, #32
 8004944:	af00      	add	r7, sp, #0
 8004946:	60f8      	str	r0, [r7, #12]
 8004948:	60b9      	str	r1, [r7, #8]
 800494a:	603b      	str	r3, [r7, #0]
 800494c:	4613      	mov	r3, r2
 800494e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004950:	f7fc fdda 	bl	8001508 <HAL_GetTick>
 8004954:	4602      	mov	r2, r0
 8004956:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004958:	1a9b      	subs	r3, r3, r2
 800495a:	683a      	ldr	r2, [r7, #0]
 800495c:	4413      	add	r3, r2
 800495e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004960:	f7fc fdd2 	bl	8001508 <HAL_GetTick>
 8004964:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004966:	4b39      	ldr	r3, [pc, #228]	@ (8004a4c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	015b      	lsls	r3, r3, #5
 800496c:	0d1b      	lsrs	r3, r3, #20
 800496e:	69fa      	ldr	r2, [r7, #28]
 8004970:	fb02 f303 	mul.w	r3, r2, r3
 8004974:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004976:	e054      	b.n	8004a22 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800497e:	d050      	beq.n	8004a22 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004980:	f7fc fdc2 	bl	8001508 <HAL_GetTick>
 8004984:	4602      	mov	r2, r0
 8004986:	69bb      	ldr	r3, [r7, #24]
 8004988:	1ad3      	subs	r3, r2, r3
 800498a:	69fa      	ldr	r2, [r7, #28]
 800498c:	429a      	cmp	r2, r3
 800498e:	d902      	bls.n	8004996 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004990:	69fb      	ldr	r3, [r7, #28]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d13d      	bne.n	8004a12 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	685a      	ldr	r2, [r3, #4]
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80049a4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	685b      	ldr	r3, [r3, #4]
 80049aa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80049ae:	d111      	bne.n	80049d4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	689b      	ldr	r3, [r3, #8]
 80049b4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80049b8:	d004      	beq.n	80049c4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	689b      	ldr	r3, [r3, #8]
 80049be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80049c2:	d107      	bne.n	80049d4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	681a      	ldr	r2, [r3, #0]
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80049d2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049d8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80049dc:	d10f      	bne.n	80049fe <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	681a      	ldr	r2, [r3, #0]
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80049ec:	601a      	str	r2, [r3, #0]
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	681a      	ldr	r2, [r3, #0]
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80049fc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	2201      	movs	r2, #1
 8004a02:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	2200      	movs	r2, #0
 8004a0a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8004a0e:	2303      	movs	r3, #3
 8004a10:	e017      	b.n	8004a42 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004a12:	697b      	ldr	r3, [r7, #20]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d101      	bne.n	8004a1c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004a18:	2300      	movs	r3, #0
 8004a1a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004a1c:	697b      	ldr	r3, [r7, #20]
 8004a1e:	3b01      	subs	r3, #1
 8004a20:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	689a      	ldr	r2, [r3, #8]
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	4013      	ands	r3, r2
 8004a2c:	68ba      	ldr	r2, [r7, #8]
 8004a2e:	429a      	cmp	r2, r3
 8004a30:	bf0c      	ite	eq
 8004a32:	2301      	moveq	r3, #1
 8004a34:	2300      	movne	r3, #0
 8004a36:	b2db      	uxtb	r3, r3
 8004a38:	461a      	mov	r2, r3
 8004a3a:	79fb      	ldrb	r3, [r7, #7]
 8004a3c:	429a      	cmp	r2, r3
 8004a3e:	d19b      	bne.n	8004978 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004a40:	2300      	movs	r3, #0
}
 8004a42:	4618      	mov	r0, r3
 8004a44:	3720      	adds	r7, #32
 8004a46:	46bd      	mov	sp, r7
 8004a48:	bd80      	pop	{r7, pc}
 8004a4a:	bf00      	nop
 8004a4c:	20000000 	.word	0x20000000

08004a50 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b086      	sub	sp, #24
 8004a54:	af02      	add	r7, sp, #8
 8004a56:	60f8      	str	r0, [r7, #12]
 8004a58:	60b9      	str	r1, [r7, #8]
 8004a5a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	685b      	ldr	r3, [r3, #4]
 8004a60:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004a64:	d111      	bne.n	8004a8a <SPI_EndRxTransaction+0x3a>
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	689b      	ldr	r3, [r3, #8]
 8004a6a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004a6e:	d004      	beq.n	8004a7a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	689b      	ldr	r3, [r3, #8]
 8004a74:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a78:	d107      	bne.n	8004a8a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	681a      	ldr	r2, [r3, #0]
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004a88:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	685b      	ldr	r3, [r3, #4]
 8004a8e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004a92:	d117      	bne.n	8004ac4 <SPI_EndRxTransaction+0x74>
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	689b      	ldr	r3, [r3, #8]
 8004a98:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a9c:	d112      	bne.n	8004ac4 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	9300      	str	r3, [sp, #0]
 8004aa2:	68bb      	ldr	r3, [r7, #8]
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	2101      	movs	r1, #1
 8004aa8:	68f8      	ldr	r0, [r7, #12]
 8004aaa:	f7ff ff49 	bl	8004940 <SPI_WaitFlagStateUntilTimeout>
 8004aae:	4603      	mov	r3, r0
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d01a      	beq.n	8004aea <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ab8:	f043 0220 	orr.w	r2, r3, #32
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004ac0:	2303      	movs	r3, #3
 8004ac2:	e013      	b.n	8004aec <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	9300      	str	r3, [sp, #0]
 8004ac8:	68bb      	ldr	r3, [r7, #8]
 8004aca:	2200      	movs	r2, #0
 8004acc:	2180      	movs	r1, #128	@ 0x80
 8004ace:	68f8      	ldr	r0, [r7, #12]
 8004ad0:	f7ff ff36 	bl	8004940 <SPI_WaitFlagStateUntilTimeout>
 8004ad4:	4603      	mov	r3, r0
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d007      	beq.n	8004aea <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ade:	f043 0220 	orr.w	r2, r3, #32
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004ae6:	2303      	movs	r3, #3
 8004ae8:	e000      	b.n	8004aec <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8004aea:	2300      	movs	r3, #0
}
 8004aec:	4618      	mov	r0, r3
 8004aee:	3710      	adds	r7, #16
 8004af0:	46bd      	mov	sp, r7
 8004af2:	bd80      	pop	{r7, pc}

08004af4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b086      	sub	sp, #24
 8004af8:	af02      	add	r7, sp, #8
 8004afa:	60f8      	str	r0, [r7, #12]
 8004afc:	60b9      	str	r1, [r7, #8]
 8004afe:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	9300      	str	r3, [sp, #0]
 8004b04:	68bb      	ldr	r3, [r7, #8]
 8004b06:	2201      	movs	r2, #1
 8004b08:	2102      	movs	r1, #2
 8004b0a:	68f8      	ldr	r0, [r7, #12]
 8004b0c:	f7ff ff18 	bl	8004940 <SPI_WaitFlagStateUntilTimeout>
 8004b10:	4603      	mov	r3, r0
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d007      	beq.n	8004b26 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b1a:	f043 0220 	orr.w	r2, r3, #32
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8004b22:	2303      	movs	r3, #3
 8004b24:	e013      	b.n	8004b4e <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	9300      	str	r3, [sp, #0]
 8004b2a:	68bb      	ldr	r3, [r7, #8]
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	2180      	movs	r1, #128	@ 0x80
 8004b30:	68f8      	ldr	r0, [r7, #12]
 8004b32:	f7ff ff05 	bl	8004940 <SPI_WaitFlagStateUntilTimeout>
 8004b36:	4603      	mov	r3, r0
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d007      	beq.n	8004b4c <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b40:	f043 0220 	orr.w	r2, r3, #32
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8004b48:	2303      	movs	r3, #3
 8004b4a:	e000      	b.n	8004b4e <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 8004b4c:	2300      	movs	r3, #0
}
 8004b4e:	4618      	mov	r0, r3
 8004b50:	3710      	adds	r7, #16
 8004b52:	46bd      	mov	sp, r7
 8004b54:	bd80      	pop	{r7, pc}

08004b56 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004b56:	b580      	push	{r7, lr}
 8004b58:	b082      	sub	sp, #8
 8004b5a:	af00      	add	r7, sp, #0
 8004b5c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d101      	bne.n	8004b68 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004b64:	2301      	movs	r3, #1
 8004b66:	e042      	b.n	8004bee <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b6e:	b2db      	uxtb	r3, r3
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d106      	bne.n	8004b82 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2200      	movs	r2, #0
 8004b78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b7c:	6878      	ldr	r0, [r7, #4]
 8004b7e:	f7fc f90b 	bl	8000d98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2224      	movs	r2, #36	@ 0x24
 8004b86:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	68da      	ldr	r2, [r3, #12]
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004b98:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004b9a:	6878      	ldr	r0, [r7, #4]
 8004b9c:	f000 ff3e 	bl	8005a1c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	691a      	ldr	r2, [r3, #16]
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004bae:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	695a      	ldr	r2, [r3, #20]
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004bbe:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	68da      	ldr	r2, [r3, #12]
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004bce:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2220      	movs	r2, #32
 8004bda:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2220      	movs	r2, #32
 8004be2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2200      	movs	r2, #0
 8004bea:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004bec:	2300      	movs	r3, #0
}
 8004bee:	4618      	mov	r0, r3
 8004bf0:	3708      	adds	r7, #8
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	bd80      	pop	{r7, pc}

08004bf6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004bf6:	b580      	push	{r7, lr}
 8004bf8:	b08a      	sub	sp, #40	@ 0x28
 8004bfa:	af02      	add	r7, sp, #8
 8004bfc:	60f8      	str	r0, [r7, #12]
 8004bfe:	60b9      	str	r1, [r7, #8]
 8004c00:	603b      	str	r3, [r7, #0]
 8004c02:	4613      	mov	r3, r2
 8004c04:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004c06:	2300      	movs	r3, #0
 8004c08:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004c10:	b2db      	uxtb	r3, r3
 8004c12:	2b20      	cmp	r3, #32
 8004c14:	d175      	bne.n	8004d02 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c16:	68bb      	ldr	r3, [r7, #8]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d002      	beq.n	8004c22 <HAL_UART_Transmit+0x2c>
 8004c1c:	88fb      	ldrh	r3, [r7, #6]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d101      	bne.n	8004c26 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004c22:	2301      	movs	r3, #1
 8004c24:	e06e      	b.n	8004d04 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	2200      	movs	r2, #0
 8004c2a:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	2221      	movs	r2, #33	@ 0x21
 8004c30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004c34:	f7fc fc68 	bl	8001508 <HAL_GetTick>
 8004c38:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	88fa      	ldrh	r2, [r7, #6]
 8004c3e:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	88fa      	ldrh	r2, [r7, #6]
 8004c44:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	689b      	ldr	r3, [r3, #8]
 8004c4a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c4e:	d108      	bne.n	8004c62 <HAL_UART_Transmit+0x6c>
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	691b      	ldr	r3, [r3, #16]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d104      	bne.n	8004c62 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004c58:	2300      	movs	r3, #0
 8004c5a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	61bb      	str	r3, [r7, #24]
 8004c60:	e003      	b.n	8004c6a <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004c62:	68bb      	ldr	r3, [r7, #8]
 8004c64:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004c66:	2300      	movs	r3, #0
 8004c68:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004c6a:	e02e      	b.n	8004cca <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	9300      	str	r3, [sp, #0]
 8004c70:	697b      	ldr	r3, [r7, #20]
 8004c72:	2200      	movs	r2, #0
 8004c74:	2180      	movs	r1, #128	@ 0x80
 8004c76:	68f8      	ldr	r0, [r7, #12]
 8004c78:	f000 fc1b 	bl	80054b2 <UART_WaitOnFlagUntilTimeout>
 8004c7c:	4603      	mov	r3, r0
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d005      	beq.n	8004c8e <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	2220      	movs	r2, #32
 8004c86:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004c8a:	2303      	movs	r3, #3
 8004c8c:	e03a      	b.n	8004d04 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004c8e:	69fb      	ldr	r3, [r7, #28]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d10b      	bne.n	8004cac <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004c94:	69bb      	ldr	r3, [r7, #24]
 8004c96:	881b      	ldrh	r3, [r3, #0]
 8004c98:	461a      	mov	r2, r3
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004ca2:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004ca4:	69bb      	ldr	r3, [r7, #24]
 8004ca6:	3302      	adds	r3, #2
 8004ca8:	61bb      	str	r3, [r7, #24]
 8004caa:	e007      	b.n	8004cbc <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004cac:	69fb      	ldr	r3, [r7, #28]
 8004cae:	781a      	ldrb	r2, [r3, #0]
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004cb6:	69fb      	ldr	r3, [r7, #28]
 8004cb8:	3301      	adds	r3, #1
 8004cba:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004cc0:	b29b      	uxth	r3, r3
 8004cc2:	3b01      	subs	r3, #1
 8004cc4:	b29a      	uxth	r2, r3
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004cce:	b29b      	uxth	r3, r3
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d1cb      	bne.n	8004c6c <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	9300      	str	r3, [sp, #0]
 8004cd8:	697b      	ldr	r3, [r7, #20]
 8004cda:	2200      	movs	r2, #0
 8004cdc:	2140      	movs	r1, #64	@ 0x40
 8004cde:	68f8      	ldr	r0, [r7, #12]
 8004ce0:	f000 fbe7 	bl	80054b2 <UART_WaitOnFlagUntilTimeout>
 8004ce4:	4603      	mov	r3, r0
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d005      	beq.n	8004cf6 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	2220      	movs	r2, #32
 8004cee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004cf2:	2303      	movs	r3, #3
 8004cf4:	e006      	b.n	8004d04 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	2220      	movs	r2, #32
 8004cfa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004cfe:	2300      	movs	r3, #0
 8004d00:	e000      	b.n	8004d04 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004d02:	2302      	movs	r3, #2
  }
}
 8004d04:	4618      	mov	r0, r3
 8004d06:	3720      	adds	r7, #32
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	bd80      	pop	{r7, pc}

08004d0c <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b084      	sub	sp, #16
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	60f8      	str	r0, [r7, #12]
 8004d14:	60b9      	str	r1, [r7, #8]
 8004d16:	4613      	mov	r3, r2
 8004d18:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004d20:	b2db      	uxtb	r3, r3
 8004d22:	2b20      	cmp	r3, #32
 8004d24:	d112      	bne.n	8004d4c <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d26:	68bb      	ldr	r3, [r7, #8]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d002      	beq.n	8004d32 <HAL_UART_Receive_DMA+0x26>
 8004d2c:	88fb      	ldrh	r3, [r7, #6]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d101      	bne.n	8004d36 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8004d32:	2301      	movs	r3, #1
 8004d34:	e00b      	b.n	8004d4e <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	2200      	movs	r2, #0
 8004d3a:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8004d3c:	88fb      	ldrh	r3, [r7, #6]
 8004d3e:	461a      	mov	r2, r3
 8004d40:	68b9      	ldr	r1, [r7, #8]
 8004d42:	68f8      	ldr	r0, [r7, #12]
 8004d44:	f000 fc0e 	bl	8005564 <UART_Start_Receive_DMA>
 8004d48:	4603      	mov	r3, r0
 8004d4a:	e000      	b.n	8004d4e <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004d4c:	2302      	movs	r3, #2
  }
}
 8004d4e:	4618      	mov	r0, r3
 8004d50:	3710      	adds	r7, #16
 8004d52:	46bd      	mov	sp, r7
 8004d54:	bd80      	pop	{r7, pc}
	...

08004d58 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b0ba      	sub	sp, #232	@ 0xe8
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	68db      	ldr	r3, [r3, #12]
 8004d70:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	695b      	ldr	r3, [r3, #20]
 8004d7a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004d7e:	2300      	movs	r3, #0
 8004d80:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004d84:	2300      	movs	r3, #0
 8004d86:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004d8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d8e:	f003 030f 	and.w	r3, r3, #15
 8004d92:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004d96:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d10f      	bne.n	8004dbe <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004d9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004da2:	f003 0320 	and.w	r3, r3, #32
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d009      	beq.n	8004dbe <HAL_UART_IRQHandler+0x66>
 8004daa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004dae:	f003 0320 	and.w	r3, r3, #32
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d003      	beq.n	8004dbe <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004db6:	6878      	ldr	r0, [r7, #4]
 8004db8:	f000 fd72 	bl	80058a0 <UART_Receive_IT>
      return;
 8004dbc:	e25b      	b.n	8005276 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004dbe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	f000 80de 	beq.w	8004f84 <HAL_UART_IRQHandler+0x22c>
 8004dc8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004dcc:	f003 0301 	and.w	r3, r3, #1
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d106      	bne.n	8004de2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004dd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004dd8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	f000 80d1 	beq.w	8004f84 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004de2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004de6:	f003 0301 	and.w	r3, r3, #1
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d00b      	beq.n	8004e06 <HAL_UART_IRQHandler+0xae>
 8004dee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004df2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d005      	beq.n	8004e06 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004dfe:	f043 0201 	orr.w	r2, r3, #1
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004e06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e0a:	f003 0304 	and.w	r3, r3, #4
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d00b      	beq.n	8004e2a <HAL_UART_IRQHandler+0xd2>
 8004e12:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004e16:	f003 0301 	and.w	r3, r3, #1
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d005      	beq.n	8004e2a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e22:	f043 0202 	orr.w	r2, r3, #2
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004e2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e2e:	f003 0302 	and.w	r3, r3, #2
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d00b      	beq.n	8004e4e <HAL_UART_IRQHandler+0xf6>
 8004e36:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004e3a:	f003 0301 	and.w	r3, r3, #1
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d005      	beq.n	8004e4e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e46:	f043 0204 	orr.w	r2, r3, #4
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004e4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e52:	f003 0308 	and.w	r3, r3, #8
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d011      	beq.n	8004e7e <HAL_UART_IRQHandler+0x126>
 8004e5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e5e:	f003 0320 	and.w	r3, r3, #32
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d105      	bne.n	8004e72 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004e66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004e6a:	f003 0301 	and.w	r3, r3, #1
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d005      	beq.n	8004e7e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e76:	f043 0208 	orr.w	r2, r3, #8
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	f000 81f2 	beq.w	800526c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004e88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e8c:	f003 0320 	and.w	r3, r3, #32
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d008      	beq.n	8004ea6 <HAL_UART_IRQHandler+0x14e>
 8004e94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e98:	f003 0320 	and.w	r3, r3, #32
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d002      	beq.n	8004ea6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004ea0:	6878      	ldr	r0, [r7, #4]
 8004ea2:	f000 fcfd 	bl	80058a0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	695b      	ldr	r3, [r3, #20]
 8004eac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	bf14      	ite	ne
 8004eb4:	2301      	movne	r3, #1
 8004eb6:	2300      	moveq	r3, #0
 8004eb8:	b2db      	uxtb	r3, r3
 8004eba:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ec2:	f003 0308 	and.w	r3, r3, #8
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d103      	bne.n	8004ed2 <HAL_UART_IRQHandler+0x17a>
 8004eca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d04f      	beq.n	8004f72 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004ed2:	6878      	ldr	r0, [r7, #4]
 8004ed4:	f000 fc07 	bl	80056e6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	695b      	ldr	r3, [r3, #20]
 8004ede:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d041      	beq.n	8004f6a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	3314      	adds	r3, #20
 8004eec:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ef0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004ef4:	e853 3f00 	ldrex	r3, [r3]
 8004ef8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004efc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004f00:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004f04:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	3314      	adds	r3, #20
 8004f0e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004f12:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004f16:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f1a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004f1e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004f22:	e841 2300 	strex	r3, r2, [r1]
 8004f26:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004f2a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d1d9      	bne.n	8004ee6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d013      	beq.n	8004f62 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f3e:	4a7e      	ldr	r2, [pc, #504]	@ (8005138 <HAL_UART_IRQHandler+0x3e0>)
 8004f40:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f46:	4618      	mov	r0, r3
 8004f48:	f7fc ff22 	bl	8001d90 <HAL_DMA_Abort_IT>
 8004f4c:	4603      	mov	r3, r0
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d016      	beq.n	8004f80 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f58:	687a      	ldr	r2, [r7, #4]
 8004f5a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004f5c:	4610      	mov	r0, r2
 8004f5e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f60:	e00e      	b.n	8004f80 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004f62:	6878      	ldr	r0, [r7, #4]
 8004f64:	f000 f993 	bl	800528e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f68:	e00a      	b.n	8004f80 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004f6a:	6878      	ldr	r0, [r7, #4]
 8004f6c:	f000 f98f 	bl	800528e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f70:	e006      	b.n	8004f80 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004f72:	6878      	ldr	r0, [r7, #4]
 8004f74:	f000 f98b 	bl	800528e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004f7e:	e175      	b.n	800526c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f80:	bf00      	nop
    return;
 8004f82:	e173      	b.n	800526c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f88:	2b01      	cmp	r3, #1
 8004f8a:	f040 814f 	bne.w	800522c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004f8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f92:	f003 0310 	and.w	r3, r3, #16
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	f000 8148 	beq.w	800522c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004f9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004fa0:	f003 0310 	and.w	r3, r3, #16
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	f000 8141 	beq.w	800522c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004faa:	2300      	movs	r3, #0
 8004fac:	60bb      	str	r3, [r7, #8]
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	60bb      	str	r3, [r7, #8]
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	685b      	ldr	r3, [r3, #4]
 8004fbc:	60bb      	str	r3, [r7, #8]
 8004fbe:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	695b      	ldr	r3, [r3, #20]
 8004fc6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	f000 80b6 	beq.w	800513c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	685b      	ldr	r3, [r3, #4]
 8004fd8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004fdc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	f000 8145 	beq.w	8005270 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004fea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004fee:	429a      	cmp	r2, r3
 8004ff0:	f080 813e 	bcs.w	8005270 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004ffa:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005000:	699b      	ldr	r3, [r3, #24]
 8005002:	2b20      	cmp	r3, #32
 8005004:	f000 8088 	beq.w	8005118 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	330c      	adds	r3, #12
 800500e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005012:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005016:	e853 3f00 	ldrex	r3, [r3]
 800501a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800501e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005022:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005026:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	330c      	adds	r3, #12
 8005030:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005034:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005038:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800503c:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005040:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005044:	e841 2300 	strex	r3, r2, [r1]
 8005048:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800504c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005050:	2b00      	cmp	r3, #0
 8005052:	d1d9      	bne.n	8005008 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	3314      	adds	r3, #20
 800505a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800505c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800505e:	e853 3f00 	ldrex	r3, [r3]
 8005062:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005064:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005066:	f023 0301 	bic.w	r3, r3, #1
 800506a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	3314      	adds	r3, #20
 8005074:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005078:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800507c:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800507e:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005080:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005084:	e841 2300 	strex	r3, r2, [r1]
 8005088:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800508a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800508c:	2b00      	cmp	r3, #0
 800508e:	d1e1      	bne.n	8005054 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	3314      	adds	r3, #20
 8005096:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005098:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800509a:	e853 3f00 	ldrex	r3, [r3]
 800509e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80050a0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80050a2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80050a6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	3314      	adds	r3, #20
 80050b0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80050b4:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80050b6:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050b8:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80050ba:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80050bc:	e841 2300 	strex	r3, r2, [r1]
 80050c0:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80050c2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d1e3      	bne.n	8005090 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2220      	movs	r2, #32
 80050cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2200      	movs	r2, #0
 80050d4:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	330c      	adds	r3, #12
 80050dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80050e0:	e853 3f00 	ldrex	r3, [r3]
 80050e4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80050e6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80050e8:	f023 0310 	bic.w	r3, r3, #16
 80050ec:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	330c      	adds	r3, #12
 80050f6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80050fa:	65ba      	str	r2, [r7, #88]	@ 0x58
 80050fc:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050fe:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005100:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005102:	e841 2300 	strex	r3, r2, [r1]
 8005106:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005108:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800510a:	2b00      	cmp	r3, #0
 800510c:	d1e3      	bne.n	80050d6 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005112:	4618      	mov	r0, r3
 8005114:	f7fc fe00 	bl	8001d18 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2202      	movs	r2, #2
 800511c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005126:	b29b      	uxth	r3, r3
 8005128:	1ad3      	subs	r3, r2, r3
 800512a:	b29b      	uxth	r3, r3
 800512c:	4619      	mov	r1, r3
 800512e:	6878      	ldr	r0, [r7, #4]
 8005130:	f000 f8b6 	bl	80052a0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005134:	e09c      	b.n	8005270 <HAL_UART_IRQHandler+0x518>
 8005136:	bf00      	nop
 8005138:	080057ab 	.word	0x080057ab
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005144:	b29b      	uxth	r3, r3
 8005146:	1ad3      	subs	r3, r2, r3
 8005148:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005150:	b29b      	uxth	r3, r3
 8005152:	2b00      	cmp	r3, #0
 8005154:	f000 808e 	beq.w	8005274 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005158:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800515c:	2b00      	cmp	r3, #0
 800515e:	f000 8089 	beq.w	8005274 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	330c      	adds	r3, #12
 8005168:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800516a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800516c:	e853 3f00 	ldrex	r3, [r3]
 8005170:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005172:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005174:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005178:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	330c      	adds	r3, #12
 8005182:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005186:	647a      	str	r2, [r7, #68]	@ 0x44
 8005188:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800518a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800518c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800518e:	e841 2300 	strex	r3, r2, [r1]
 8005192:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005194:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005196:	2b00      	cmp	r3, #0
 8005198:	d1e3      	bne.n	8005162 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	3314      	adds	r3, #20
 80051a0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051a4:	e853 3f00 	ldrex	r3, [r3]
 80051a8:	623b      	str	r3, [r7, #32]
   return(result);
 80051aa:	6a3b      	ldr	r3, [r7, #32]
 80051ac:	f023 0301 	bic.w	r3, r3, #1
 80051b0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	3314      	adds	r3, #20
 80051ba:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80051be:	633a      	str	r2, [r7, #48]	@ 0x30
 80051c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051c2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80051c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80051c6:	e841 2300 	strex	r3, r2, [r1]
 80051ca:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80051cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d1e3      	bne.n	800519a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2220      	movs	r2, #32
 80051d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2200      	movs	r2, #0
 80051de:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	330c      	adds	r3, #12
 80051e6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051e8:	693b      	ldr	r3, [r7, #16]
 80051ea:	e853 3f00 	ldrex	r3, [r3]
 80051ee:	60fb      	str	r3, [r7, #12]
   return(result);
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	f023 0310 	bic.w	r3, r3, #16
 80051f6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	330c      	adds	r3, #12
 8005200:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005204:	61fa      	str	r2, [r7, #28]
 8005206:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005208:	69b9      	ldr	r1, [r7, #24]
 800520a:	69fa      	ldr	r2, [r7, #28]
 800520c:	e841 2300 	strex	r3, r2, [r1]
 8005210:	617b      	str	r3, [r7, #20]
   return(result);
 8005212:	697b      	ldr	r3, [r7, #20]
 8005214:	2b00      	cmp	r3, #0
 8005216:	d1e3      	bne.n	80051e0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2202      	movs	r2, #2
 800521c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800521e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005222:	4619      	mov	r1, r3
 8005224:	6878      	ldr	r0, [r7, #4]
 8005226:	f000 f83b 	bl	80052a0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800522a:	e023      	b.n	8005274 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800522c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005230:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005234:	2b00      	cmp	r3, #0
 8005236:	d009      	beq.n	800524c <HAL_UART_IRQHandler+0x4f4>
 8005238:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800523c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005240:	2b00      	cmp	r3, #0
 8005242:	d003      	beq.n	800524c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005244:	6878      	ldr	r0, [r7, #4]
 8005246:	f000 fac4 	bl	80057d2 <UART_Transmit_IT>
    return;
 800524a:	e014      	b.n	8005276 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800524c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005250:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005254:	2b00      	cmp	r3, #0
 8005256:	d00e      	beq.n	8005276 <HAL_UART_IRQHandler+0x51e>
 8005258:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800525c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005260:	2b00      	cmp	r3, #0
 8005262:	d008      	beq.n	8005276 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005264:	6878      	ldr	r0, [r7, #4]
 8005266:	f000 fb03 	bl	8005870 <UART_EndTransmit_IT>
    return;
 800526a:	e004      	b.n	8005276 <HAL_UART_IRQHandler+0x51e>
    return;
 800526c:	bf00      	nop
 800526e:	e002      	b.n	8005276 <HAL_UART_IRQHandler+0x51e>
      return;
 8005270:	bf00      	nop
 8005272:	e000      	b.n	8005276 <HAL_UART_IRQHandler+0x51e>
      return;
 8005274:	bf00      	nop
  }
}
 8005276:	37e8      	adds	r7, #232	@ 0xe8
 8005278:	46bd      	mov	sp, r7
 800527a:	bd80      	pop	{r7, pc}

0800527c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800527c:	b480      	push	{r7}
 800527e:	b083      	sub	sp, #12
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005284:	bf00      	nop
 8005286:	370c      	adds	r7, #12
 8005288:	46bd      	mov	sp, r7
 800528a:	bc80      	pop	{r7}
 800528c:	4770      	bx	lr

0800528e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800528e:	b480      	push	{r7}
 8005290:	b083      	sub	sp, #12
 8005292:	af00      	add	r7, sp, #0
 8005294:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005296:	bf00      	nop
 8005298:	370c      	adds	r7, #12
 800529a:	46bd      	mov	sp, r7
 800529c:	bc80      	pop	{r7}
 800529e:	4770      	bx	lr

080052a0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80052a0:	b480      	push	{r7}
 80052a2:	b083      	sub	sp, #12
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
 80052a8:	460b      	mov	r3, r1
 80052aa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80052ac:	bf00      	nop
 80052ae:	370c      	adds	r7, #12
 80052b0:	46bd      	mov	sp, r7
 80052b2:	bc80      	pop	{r7}
 80052b4:	4770      	bx	lr

080052b6 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80052b6:	b580      	push	{r7, lr}
 80052b8:	b09c      	sub	sp, #112	@ 0x70
 80052ba:	af00      	add	r7, sp, #0
 80052bc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052c2:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f003 0320 	and.w	r3, r3, #32
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d172      	bne.n	80053b8 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80052d2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80052d4:	2200      	movs	r2, #0
 80052d6:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80052d8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	330c      	adds	r3, #12
 80052de:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80052e2:	e853 3f00 	ldrex	r3, [r3]
 80052e6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80052e8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80052ea:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80052ee:	66bb      	str	r3, [r7, #104]	@ 0x68
 80052f0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	330c      	adds	r3, #12
 80052f6:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80052f8:	65ba      	str	r2, [r7, #88]	@ 0x58
 80052fa:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052fc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80052fe:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005300:	e841 2300 	strex	r3, r2, [r1]
 8005304:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005306:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005308:	2b00      	cmp	r3, #0
 800530a:	d1e5      	bne.n	80052d8 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800530c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	3314      	adds	r3, #20
 8005312:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005314:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005316:	e853 3f00 	ldrex	r3, [r3]
 800531a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800531c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800531e:	f023 0301 	bic.w	r3, r3, #1
 8005322:	667b      	str	r3, [r7, #100]	@ 0x64
 8005324:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	3314      	adds	r3, #20
 800532a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800532c:	647a      	str	r2, [r7, #68]	@ 0x44
 800532e:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005330:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005332:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005334:	e841 2300 	strex	r3, r2, [r1]
 8005338:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800533a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800533c:	2b00      	cmp	r3, #0
 800533e:	d1e5      	bne.n	800530c <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005340:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	3314      	adds	r3, #20
 8005346:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005348:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800534a:	e853 3f00 	ldrex	r3, [r3]
 800534e:	623b      	str	r3, [r7, #32]
   return(result);
 8005350:	6a3b      	ldr	r3, [r7, #32]
 8005352:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005356:	663b      	str	r3, [r7, #96]	@ 0x60
 8005358:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	3314      	adds	r3, #20
 800535e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005360:	633a      	str	r2, [r7, #48]	@ 0x30
 8005362:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005364:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005366:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005368:	e841 2300 	strex	r3, r2, [r1]
 800536c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800536e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005370:	2b00      	cmp	r3, #0
 8005372:	d1e5      	bne.n	8005340 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005374:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005376:	2220      	movs	r2, #32
 8005378:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800537c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800537e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005380:	2b01      	cmp	r3, #1
 8005382:	d119      	bne.n	80053b8 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005384:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	330c      	adds	r3, #12
 800538a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800538c:	693b      	ldr	r3, [r7, #16]
 800538e:	e853 3f00 	ldrex	r3, [r3]
 8005392:	60fb      	str	r3, [r7, #12]
   return(result);
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	f023 0310 	bic.w	r3, r3, #16
 800539a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800539c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	330c      	adds	r3, #12
 80053a2:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80053a4:	61fa      	str	r2, [r7, #28]
 80053a6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053a8:	69b9      	ldr	r1, [r7, #24]
 80053aa:	69fa      	ldr	r2, [r7, #28]
 80053ac:	e841 2300 	strex	r3, r2, [r1]
 80053b0:	617b      	str	r3, [r7, #20]
   return(result);
 80053b2:	697b      	ldr	r3, [r7, #20]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d1e5      	bne.n	8005384 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80053b8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80053ba:	2200      	movs	r2, #0
 80053bc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053be:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80053c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053c2:	2b01      	cmp	r3, #1
 80053c4:	d106      	bne.n	80053d4 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80053c6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80053c8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80053ca:	4619      	mov	r1, r3
 80053cc:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80053ce:	f7ff ff67 	bl	80052a0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80053d2:	e002      	b.n	80053da <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80053d4:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80053d6:	f7fb fb53 	bl	8000a80 <HAL_UART_RxCpltCallback>
}
 80053da:	bf00      	nop
 80053dc:	3770      	adds	r7, #112	@ 0x70
 80053de:	46bd      	mov	sp, r7
 80053e0:	bd80      	pop	{r7, pc}

080053e2 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80053e2:	b580      	push	{r7, lr}
 80053e4:	b084      	sub	sp, #16
 80053e6:	af00      	add	r7, sp, #0
 80053e8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053ee:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	2201      	movs	r2, #1
 80053f4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053fa:	2b01      	cmp	r3, #1
 80053fc:	d108      	bne.n	8005410 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005402:	085b      	lsrs	r3, r3, #1
 8005404:	b29b      	uxth	r3, r3
 8005406:	4619      	mov	r1, r3
 8005408:	68f8      	ldr	r0, [r7, #12]
 800540a:	f7ff ff49 	bl	80052a0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800540e:	e002      	b.n	8005416 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8005410:	68f8      	ldr	r0, [r7, #12]
 8005412:	f7fb fb69 	bl	8000ae8 <HAL_UART_RxHalfCpltCallback>
}
 8005416:	bf00      	nop
 8005418:	3710      	adds	r7, #16
 800541a:	46bd      	mov	sp, r7
 800541c:	bd80      	pop	{r7, pc}

0800541e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800541e:	b580      	push	{r7, lr}
 8005420:	b084      	sub	sp, #16
 8005422:	af00      	add	r7, sp, #0
 8005424:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005426:	2300      	movs	r3, #0
 8005428:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800542e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005430:	68bb      	ldr	r3, [r7, #8]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	695b      	ldr	r3, [r3, #20]
 8005436:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800543a:	2b00      	cmp	r3, #0
 800543c:	bf14      	ite	ne
 800543e:	2301      	movne	r3, #1
 8005440:	2300      	moveq	r3, #0
 8005442:	b2db      	uxtb	r3, r3
 8005444:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005446:	68bb      	ldr	r3, [r7, #8]
 8005448:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800544c:	b2db      	uxtb	r3, r3
 800544e:	2b21      	cmp	r3, #33	@ 0x21
 8005450:	d108      	bne.n	8005464 <UART_DMAError+0x46>
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d005      	beq.n	8005464 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005458:	68bb      	ldr	r3, [r7, #8]
 800545a:	2200      	movs	r2, #0
 800545c:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 800545e:	68b8      	ldr	r0, [r7, #8]
 8005460:	f000 f91a 	bl	8005698 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005464:	68bb      	ldr	r3, [r7, #8]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	695b      	ldr	r3, [r3, #20]
 800546a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800546e:	2b00      	cmp	r3, #0
 8005470:	bf14      	ite	ne
 8005472:	2301      	movne	r3, #1
 8005474:	2300      	moveq	r3, #0
 8005476:	b2db      	uxtb	r3, r3
 8005478:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800547a:	68bb      	ldr	r3, [r7, #8]
 800547c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005480:	b2db      	uxtb	r3, r3
 8005482:	2b22      	cmp	r3, #34	@ 0x22
 8005484:	d108      	bne.n	8005498 <UART_DMAError+0x7a>
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d005      	beq.n	8005498 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800548c:	68bb      	ldr	r3, [r7, #8]
 800548e:	2200      	movs	r2, #0
 8005490:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8005492:	68b8      	ldr	r0, [r7, #8]
 8005494:	f000 f927 	bl	80056e6 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005498:	68bb      	ldr	r3, [r7, #8]
 800549a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800549c:	f043 0210 	orr.w	r2, r3, #16
 80054a0:	68bb      	ldr	r3, [r7, #8]
 80054a2:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80054a4:	68b8      	ldr	r0, [r7, #8]
 80054a6:	f7ff fef2 	bl	800528e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80054aa:	bf00      	nop
 80054ac:	3710      	adds	r7, #16
 80054ae:	46bd      	mov	sp, r7
 80054b0:	bd80      	pop	{r7, pc}

080054b2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80054b2:	b580      	push	{r7, lr}
 80054b4:	b086      	sub	sp, #24
 80054b6:	af00      	add	r7, sp, #0
 80054b8:	60f8      	str	r0, [r7, #12]
 80054ba:	60b9      	str	r1, [r7, #8]
 80054bc:	603b      	str	r3, [r7, #0]
 80054be:	4613      	mov	r3, r2
 80054c0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80054c2:	e03b      	b.n	800553c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054c4:	6a3b      	ldr	r3, [r7, #32]
 80054c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054ca:	d037      	beq.n	800553c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054cc:	f7fc f81c 	bl	8001508 <HAL_GetTick>
 80054d0:	4602      	mov	r2, r0
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	1ad3      	subs	r3, r2, r3
 80054d6:	6a3a      	ldr	r2, [r7, #32]
 80054d8:	429a      	cmp	r2, r3
 80054da:	d302      	bcc.n	80054e2 <UART_WaitOnFlagUntilTimeout+0x30>
 80054dc:	6a3b      	ldr	r3, [r7, #32]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d101      	bne.n	80054e6 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80054e2:	2303      	movs	r3, #3
 80054e4:	e03a      	b.n	800555c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	68db      	ldr	r3, [r3, #12]
 80054ec:	f003 0304 	and.w	r3, r3, #4
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d023      	beq.n	800553c <UART_WaitOnFlagUntilTimeout+0x8a>
 80054f4:	68bb      	ldr	r3, [r7, #8]
 80054f6:	2b80      	cmp	r3, #128	@ 0x80
 80054f8:	d020      	beq.n	800553c <UART_WaitOnFlagUntilTimeout+0x8a>
 80054fa:	68bb      	ldr	r3, [r7, #8]
 80054fc:	2b40      	cmp	r3, #64	@ 0x40
 80054fe:	d01d      	beq.n	800553c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f003 0308 	and.w	r3, r3, #8
 800550a:	2b08      	cmp	r3, #8
 800550c:	d116      	bne.n	800553c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800550e:	2300      	movs	r3, #0
 8005510:	617b      	str	r3, [r7, #20]
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	617b      	str	r3, [r7, #20]
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	685b      	ldr	r3, [r3, #4]
 8005520:	617b      	str	r3, [r7, #20]
 8005522:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005524:	68f8      	ldr	r0, [r7, #12]
 8005526:	f000 f8de 	bl	80056e6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	2208      	movs	r2, #8
 800552e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	2200      	movs	r2, #0
 8005534:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005538:	2301      	movs	r3, #1
 800553a:	e00f      	b.n	800555c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	681a      	ldr	r2, [r3, #0]
 8005542:	68bb      	ldr	r3, [r7, #8]
 8005544:	4013      	ands	r3, r2
 8005546:	68ba      	ldr	r2, [r7, #8]
 8005548:	429a      	cmp	r2, r3
 800554a:	bf0c      	ite	eq
 800554c:	2301      	moveq	r3, #1
 800554e:	2300      	movne	r3, #0
 8005550:	b2db      	uxtb	r3, r3
 8005552:	461a      	mov	r2, r3
 8005554:	79fb      	ldrb	r3, [r7, #7]
 8005556:	429a      	cmp	r2, r3
 8005558:	d0b4      	beq.n	80054c4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800555a:	2300      	movs	r3, #0
}
 800555c:	4618      	mov	r0, r3
 800555e:	3718      	adds	r7, #24
 8005560:	46bd      	mov	sp, r7
 8005562:	bd80      	pop	{r7, pc}

08005564 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b098      	sub	sp, #96	@ 0x60
 8005568:	af00      	add	r7, sp, #0
 800556a:	60f8      	str	r0, [r7, #12]
 800556c:	60b9      	str	r1, [r7, #8]
 800556e:	4613      	mov	r3, r2
 8005570:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8005572:	68ba      	ldr	r2, [r7, #8]
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	88fa      	ldrh	r2, [r7, #6]
 800557c:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	2200      	movs	r2, #0
 8005582:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	2222      	movs	r2, #34	@ 0x22
 8005588:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005590:	4a3e      	ldr	r2, [pc, #248]	@ (800568c <UART_Start_Receive_DMA+0x128>)
 8005592:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005598:	4a3d      	ldr	r2, [pc, #244]	@ (8005690 <UART_Start_Receive_DMA+0x12c>)
 800559a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055a0:	4a3c      	ldr	r2, [pc, #240]	@ (8005694 <UART_Start_Receive_DMA+0x130>)
 80055a2:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055a8:	2200      	movs	r2, #0
 80055aa:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80055ac:	f107 0308 	add.w	r3, r7, #8
 80055b0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	3304      	adds	r3, #4
 80055bc:	4619      	mov	r1, r3
 80055be:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80055c0:	681a      	ldr	r2, [r3, #0]
 80055c2:	88fb      	ldrh	r3, [r7, #6]
 80055c4:	f7fc fb48 	bl	8001c58 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80055c8:	2300      	movs	r3, #0
 80055ca:	613b      	str	r3, [r7, #16]
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	613b      	str	r3, [r7, #16]
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	685b      	ldr	r3, [r3, #4]
 80055da:	613b      	str	r3, [r7, #16]
 80055dc:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	691b      	ldr	r3, [r3, #16]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d019      	beq.n	800561a <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	330c      	adds	r3, #12
 80055ec:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80055f0:	e853 3f00 	ldrex	r3, [r3]
 80055f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80055f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80055f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80055fc:	65bb      	str	r3, [r7, #88]	@ 0x58
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	330c      	adds	r3, #12
 8005604:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005606:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8005608:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800560a:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800560c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800560e:	e841 2300 	strex	r3, r2, [r1]
 8005612:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8005614:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005616:	2b00      	cmp	r3, #0
 8005618:	d1e5      	bne.n	80055e6 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	3314      	adds	r3, #20
 8005620:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005622:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005624:	e853 3f00 	ldrex	r3, [r3]
 8005628:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800562a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800562c:	f043 0301 	orr.w	r3, r3, #1
 8005630:	657b      	str	r3, [r7, #84]	@ 0x54
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	3314      	adds	r3, #20
 8005638:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800563a:	63ba      	str	r2, [r7, #56]	@ 0x38
 800563c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800563e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8005640:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005642:	e841 2300 	strex	r3, r2, [r1]
 8005646:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005648:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800564a:	2b00      	cmp	r3, #0
 800564c:	d1e5      	bne.n	800561a <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	3314      	adds	r3, #20
 8005654:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005656:	69bb      	ldr	r3, [r7, #24]
 8005658:	e853 3f00 	ldrex	r3, [r3]
 800565c:	617b      	str	r3, [r7, #20]
   return(result);
 800565e:	697b      	ldr	r3, [r7, #20]
 8005660:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005664:	653b      	str	r3, [r7, #80]	@ 0x50
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	3314      	adds	r3, #20
 800566c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800566e:	627a      	str	r2, [r7, #36]	@ 0x24
 8005670:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005672:	6a39      	ldr	r1, [r7, #32]
 8005674:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005676:	e841 2300 	strex	r3, r2, [r1]
 800567a:	61fb      	str	r3, [r7, #28]
   return(result);
 800567c:	69fb      	ldr	r3, [r7, #28]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d1e5      	bne.n	800564e <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8005682:	2300      	movs	r3, #0
}
 8005684:	4618      	mov	r0, r3
 8005686:	3760      	adds	r7, #96	@ 0x60
 8005688:	46bd      	mov	sp, r7
 800568a:	bd80      	pop	{r7, pc}
 800568c:	080052b7 	.word	0x080052b7
 8005690:	080053e3 	.word	0x080053e3
 8005694:	0800541f 	.word	0x0800541f

08005698 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005698:	b480      	push	{r7}
 800569a:	b089      	sub	sp, #36	@ 0x24
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	330c      	adds	r3, #12
 80056a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	e853 3f00 	ldrex	r3, [r3]
 80056ae:	60bb      	str	r3, [r7, #8]
   return(result);
 80056b0:	68bb      	ldr	r3, [r7, #8]
 80056b2:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80056b6:	61fb      	str	r3, [r7, #28]
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	330c      	adds	r3, #12
 80056be:	69fa      	ldr	r2, [r7, #28]
 80056c0:	61ba      	str	r2, [r7, #24]
 80056c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056c4:	6979      	ldr	r1, [r7, #20]
 80056c6:	69ba      	ldr	r2, [r7, #24]
 80056c8:	e841 2300 	strex	r3, r2, [r1]
 80056cc:	613b      	str	r3, [r7, #16]
   return(result);
 80056ce:	693b      	ldr	r3, [r7, #16]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d1e5      	bne.n	80056a0 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2220      	movs	r2, #32
 80056d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 80056dc:	bf00      	nop
 80056de:	3724      	adds	r7, #36	@ 0x24
 80056e0:	46bd      	mov	sp, r7
 80056e2:	bc80      	pop	{r7}
 80056e4:	4770      	bx	lr

080056e6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80056e6:	b480      	push	{r7}
 80056e8:	b095      	sub	sp, #84	@ 0x54
 80056ea:	af00      	add	r7, sp, #0
 80056ec:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	330c      	adds	r3, #12
 80056f4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056f8:	e853 3f00 	ldrex	r3, [r3]
 80056fc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80056fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005700:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005704:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	330c      	adds	r3, #12
 800570c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800570e:	643a      	str	r2, [r7, #64]	@ 0x40
 8005710:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005712:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005714:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005716:	e841 2300 	strex	r3, r2, [r1]
 800571a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800571c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800571e:	2b00      	cmp	r3, #0
 8005720:	d1e5      	bne.n	80056ee <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	3314      	adds	r3, #20
 8005728:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800572a:	6a3b      	ldr	r3, [r7, #32]
 800572c:	e853 3f00 	ldrex	r3, [r3]
 8005730:	61fb      	str	r3, [r7, #28]
   return(result);
 8005732:	69fb      	ldr	r3, [r7, #28]
 8005734:	f023 0301 	bic.w	r3, r3, #1
 8005738:	64bb      	str	r3, [r7, #72]	@ 0x48
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	3314      	adds	r3, #20
 8005740:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005742:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005744:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005746:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005748:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800574a:	e841 2300 	strex	r3, r2, [r1]
 800574e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005750:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005752:	2b00      	cmp	r3, #0
 8005754:	d1e5      	bne.n	8005722 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800575a:	2b01      	cmp	r3, #1
 800575c:	d119      	bne.n	8005792 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	330c      	adds	r3, #12
 8005764:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	e853 3f00 	ldrex	r3, [r3]
 800576c:	60bb      	str	r3, [r7, #8]
   return(result);
 800576e:	68bb      	ldr	r3, [r7, #8]
 8005770:	f023 0310 	bic.w	r3, r3, #16
 8005774:	647b      	str	r3, [r7, #68]	@ 0x44
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	330c      	adds	r3, #12
 800577c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800577e:	61ba      	str	r2, [r7, #24]
 8005780:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005782:	6979      	ldr	r1, [r7, #20]
 8005784:	69ba      	ldr	r2, [r7, #24]
 8005786:	e841 2300 	strex	r3, r2, [r1]
 800578a:	613b      	str	r3, [r7, #16]
   return(result);
 800578c:	693b      	ldr	r3, [r7, #16]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d1e5      	bne.n	800575e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2220      	movs	r2, #32
 8005796:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2200      	movs	r2, #0
 800579e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80057a0:	bf00      	nop
 80057a2:	3754      	adds	r7, #84	@ 0x54
 80057a4:	46bd      	mov	sp, r7
 80057a6:	bc80      	pop	{r7}
 80057a8:	4770      	bx	lr

080057aa <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80057aa:	b580      	push	{r7, lr}
 80057ac:	b084      	sub	sp, #16
 80057ae:	af00      	add	r7, sp, #0
 80057b0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057b6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	2200      	movs	r2, #0
 80057bc:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	2200      	movs	r2, #0
 80057c2:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80057c4:	68f8      	ldr	r0, [r7, #12]
 80057c6:	f7ff fd62 	bl	800528e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80057ca:	bf00      	nop
 80057cc:	3710      	adds	r7, #16
 80057ce:	46bd      	mov	sp, r7
 80057d0:	bd80      	pop	{r7, pc}

080057d2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80057d2:	b480      	push	{r7}
 80057d4:	b085      	sub	sp, #20
 80057d6:	af00      	add	r7, sp, #0
 80057d8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80057e0:	b2db      	uxtb	r3, r3
 80057e2:	2b21      	cmp	r3, #33	@ 0x21
 80057e4:	d13e      	bne.n	8005864 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	689b      	ldr	r3, [r3, #8]
 80057ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80057ee:	d114      	bne.n	800581a <UART_Transmit_IT+0x48>
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	691b      	ldr	r3, [r3, #16]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d110      	bne.n	800581a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	6a1b      	ldr	r3, [r3, #32]
 80057fc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	881b      	ldrh	r3, [r3, #0]
 8005802:	461a      	mov	r2, r3
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800580c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6a1b      	ldr	r3, [r3, #32]
 8005812:	1c9a      	adds	r2, r3, #2
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	621a      	str	r2, [r3, #32]
 8005818:	e008      	b.n	800582c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6a1b      	ldr	r3, [r3, #32]
 800581e:	1c59      	adds	r1, r3, #1
 8005820:	687a      	ldr	r2, [r7, #4]
 8005822:	6211      	str	r1, [r2, #32]
 8005824:	781a      	ldrb	r2, [r3, #0]
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005830:	b29b      	uxth	r3, r3
 8005832:	3b01      	subs	r3, #1
 8005834:	b29b      	uxth	r3, r3
 8005836:	687a      	ldr	r2, [r7, #4]
 8005838:	4619      	mov	r1, r3
 800583a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800583c:	2b00      	cmp	r3, #0
 800583e:	d10f      	bne.n	8005860 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	68da      	ldr	r2, [r3, #12]
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800584e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	68da      	ldr	r2, [r3, #12]
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800585e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005860:	2300      	movs	r3, #0
 8005862:	e000      	b.n	8005866 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005864:	2302      	movs	r3, #2
  }
}
 8005866:	4618      	mov	r0, r3
 8005868:	3714      	adds	r7, #20
 800586a:	46bd      	mov	sp, r7
 800586c:	bc80      	pop	{r7}
 800586e:	4770      	bx	lr

08005870 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005870:	b580      	push	{r7, lr}
 8005872:	b082      	sub	sp, #8
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	68da      	ldr	r2, [r3, #12]
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005886:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2220      	movs	r2, #32
 800588c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005890:	6878      	ldr	r0, [r7, #4]
 8005892:	f7ff fcf3 	bl	800527c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005896:	2300      	movs	r3, #0
}
 8005898:	4618      	mov	r0, r3
 800589a:	3708      	adds	r7, #8
 800589c:	46bd      	mov	sp, r7
 800589e:	bd80      	pop	{r7, pc}

080058a0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b08c      	sub	sp, #48	@ 0x30
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80058ae:	b2db      	uxtb	r3, r3
 80058b0:	2b22      	cmp	r3, #34	@ 0x22
 80058b2:	f040 80ae 	bne.w	8005a12 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	689b      	ldr	r3, [r3, #8]
 80058ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80058be:	d117      	bne.n	80058f0 <UART_Receive_IT+0x50>
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	691b      	ldr	r3, [r3, #16]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d113      	bne.n	80058f0 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80058c8:	2300      	movs	r3, #0
 80058ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058d0:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	685b      	ldr	r3, [r3, #4]
 80058d8:	b29b      	uxth	r3, r3
 80058da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058de:	b29a      	uxth	r2, r3
 80058e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058e2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058e8:	1c9a      	adds	r2, r3, #2
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	629a      	str	r2, [r3, #40]	@ 0x28
 80058ee:	e026      	b.n	800593e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80058f6:	2300      	movs	r3, #0
 80058f8:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	689b      	ldr	r3, [r3, #8]
 80058fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005902:	d007      	beq.n	8005914 <UART_Receive_IT+0x74>
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	689b      	ldr	r3, [r3, #8]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d10a      	bne.n	8005922 <UART_Receive_IT+0x82>
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	691b      	ldr	r3, [r3, #16]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d106      	bne.n	8005922 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	685b      	ldr	r3, [r3, #4]
 800591a:	b2da      	uxtb	r2, r3
 800591c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800591e:	701a      	strb	r2, [r3, #0]
 8005920:	e008      	b.n	8005934 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	685b      	ldr	r3, [r3, #4]
 8005928:	b2db      	uxtb	r3, r3
 800592a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800592e:	b2da      	uxtb	r2, r3
 8005930:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005932:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005938:	1c5a      	adds	r2, r3, #1
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005942:	b29b      	uxth	r3, r3
 8005944:	3b01      	subs	r3, #1
 8005946:	b29b      	uxth	r3, r3
 8005948:	687a      	ldr	r2, [r7, #4]
 800594a:	4619      	mov	r1, r3
 800594c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800594e:	2b00      	cmp	r3, #0
 8005950:	d15d      	bne.n	8005a0e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	68da      	ldr	r2, [r3, #12]
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f022 0220 	bic.w	r2, r2, #32
 8005960:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	68da      	ldr	r2, [r3, #12]
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005970:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	695a      	ldr	r2, [r3, #20]
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f022 0201 	bic.w	r2, r2, #1
 8005980:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2220      	movs	r2, #32
 8005986:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	2200      	movs	r2, #0
 800598e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005994:	2b01      	cmp	r3, #1
 8005996:	d135      	bne.n	8005a04 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2200      	movs	r2, #0
 800599c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	330c      	adds	r3, #12
 80059a4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059a6:	697b      	ldr	r3, [r7, #20]
 80059a8:	e853 3f00 	ldrex	r3, [r3]
 80059ac:	613b      	str	r3, [r7, #16]
   return(result);
 80059ae:	693b      	ldr	r3, [r7, #16]
 80059b0:	f023 0310 	bic.w	r3, r3, #16
 80059b4:	627b      	str	r3, [r7, #36]	@ 0x24
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	330c      	adds	r3, #12
 80059bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80059be:	623a      	str	r2, [r7, #32]
 80059c0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059c2:	69f9      	ldr	r1, [r7, #28]
 80059c4:	6a3a      	ldr	r2, [r7, #32]
 80059c6:	e841 2300 	strex	r3, r2, [r1]
 80059ca:	61bb      	str	r3, [r7, #24]
   return(result);
 80059cc:	69bb      	ldr	r3, [r7, #24]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d1e5      	bne.n	800599e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f003 0310 	and.w	r3, r3, #16
 80059dc:	2b10      	cmp	r3, #16
 80059de:	d10a      	bne.n	80059f6 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80059e0:	2300      	movs	r3, #0
 80059e2:	60fb      	str	r3, [r7, #12]
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	60fb      	str	r3, [r7, #12]
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	685b      	ldr	r3, [r3, #4]
 80059f2:	60fb      	str	r3, [r7, #12]
 80059f4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80059fa:	4619      	mov	r1, r3
 80059fc:	6878      	ldr	r0, [r7, #4]
 80059fe:	f7ff fc4f 	bl	80052a0 <HAL_UARTEx_RxEventCallback>
 8005a02:	e002      	b.n	8005a0a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005a04:	6878      	ldr	r0, [r7, #4]
 8005a06:	f7fb f83b 	bl	8000a80 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	e002      	b.n	8005a14 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005a0e:	2300      	movs	r3, #0
 8005a10:	e000      	b.n	8005a14 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005a12:	2302      	movs	r3, #2
  }
}
 8005a14:	4618      	mov	r0, r3
 8005a16:	3730      	adds	r7, #48	@ 0x30
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	bd80      	pop	{r7, pc}

08005a1c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b084      	sub	sp, #16
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	691b      	ldr	r3, [r3, #16]
 8005a2a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	68da      	ldr	r2, [r3, #12]
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	430a      	orrs	r2, r1
 8005a38:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	689a      	ldr	r2, [r3, #8]
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	691b      	ldr	r3, [r3, #16]
 8005a42:	431a      	orrs	r2, r3
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	695b      	ldr	r3, [r3, #20]
 8005a48:	4313      	orrs	r3, r2
 8005a4a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	68db      	ldr	r3, [r3, #12]
 8005a52:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8005a56:	f023 030c 	bic.w	r3, r3, #12
 8005a5a:	687a      	ldr	r2, [r7, #4]
 8005a5c:	6812      	ldr	r2, [r2, #0]
 8005a5e:	68b9      	ldr	r1, [r7, #8]
 8005a60:	430b      	orrs	r3, r1
 8005a62:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	695b      	ldr	r3, [r3, #20]
 8005a6a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	699a      	ldr	r2, [r3, #24]
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	430a      	orrs	r2, r1
 8005a78:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	4a2c      	ldr	r2, [pc, #176]	@ (8005b30 <UART_SetConfig+0x114>)
 8005a80:	4293      	cmp	r3, r2
 8005a82:	d103      	bne.n	8005a8c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005a84:	f7fd fd7a 	bl	800357c <HAL_RCC_GetPCLK2Freq>
 8005a88:	60f8      	str	r0, [r7, #12]
 8005a8a:	e002      	b.n	8005a92 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005a8c:	f7fd fd62 	bl	8003554 <HAL_RCC_GetPCLK1Freq>
 8005a90:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005a92:	68fa      	ldr	r2, [r7, #12]
 8005a94:	4613      	mov	r3, r2
 8005a96:	009b      	lsls	r3, r3, #2
 8005a98:	4413      	add	r3, r2
 8005a9a:	009a      	lsls	r2, r3, #2
 8005a9c:	441a      	add	r2, r3
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	685b      	ldr	r3, [r3, #4]
 8005aa2:	009b      	lsls	r3, r3, #2
 8005aa4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005aa8:	4a22      	ldr	r2, [pc, #136]	@ (8005b34 <UART_SetConfig+0x118>)
 8005aaa:	fba2 2303 	umull	r2, r3, r2, r3
 8005aae:	095b      	lsrs	r3, r3, #5
 8005ab0:	0119      	lsls	r1, r3, #4
 8005ab2:	68fa      	ldr	r2, [r7, #12]
 8005ab4:	4613      	mov	r3, r2
 8005ab6:	009b      	lsls	r3, r3, #2
 8005ab8:	4413      	add	r3, r2
 8005aba:	009a      	lsls	r2, r3, #2
 8005abc:	441a      	add	r2, r3
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	685b      	ldr	r3, [r3, #4]
 8005ac2:	009b      	lsls	r3, r3, #2
 8005ac4:	fbb2 f2f3 	udiv	r2, r2, r3
 8005ac8:	4b1a      	ldr	r3, [pc, #104]	@ (8005b34 <UART_SetConfig+0x118>)
 8005aca:	fba3 0302 	umull	r0, r3, r3, r2
 8005ace:	095b      	lsrs	r3, r3, #5
 8005ad0:	2064      	movs	r0, #100	@ 0x64
 8005ad2:	fb00 f303 	mul.w	r3, r0, r3
 8005ad6:	1ad3      	subs	r3, r2, r3
 8005ad8:	011b      	lsls	r3, r3, #4
 8005ada:	3332      	adds	r3, #50	@ 0x32
 8005adc:	4a15      	ldr	r2, [pc, #84]	@ (8005b34 <UART_SetConfig+0x118>)
 8005ade:	fba2 2303 	umull	r2, r3, r2, r3
 8005ae2:	095b      	lsrs	r3, r3, #5
 8005ae4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005ae8:	4419      	add	r1, r3
 8005aea:	68fa      	ldr	r2, [r7, #12]
 8005aec:	4613      	mov	r3, r2
 8005aee:	009b      	lsls	r3, r3, #2
 8005af0:	4413      	add	r3, r2
 8005af2:	009a      	lsls	r2, r3, #2
 8005af4:	441a      	add	r2, r3
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	685b      	ldr	r3, [r3, #4]
 8005afa:	009b      	lsls	r3, r3, #2
 8005afc:	fbb2 f2f3 	udiv	r2, r2, r3
 8005b00:	4b0c      	ldr	r3, [pc, #48]	@ (8005b34 <UART_SetConfig+0x118>)
 8005b02:	fba3 0302 	umull	r0, r3, r3, r2
 8005b06:	095b      	lsrs	r3, r3, #5
 8005b08:	2064      	movs	r0, #100	@ 0x64
 8005b0a:	fb00 f303 	mul.w	r3, r0, r3
 8005b0e:	1ad3      	subs	r3, r2, r3
 8005b10:	011b      	lsls	r3, r3, #4
 8005b12:	3332      	adds	r3, #50	@ 0x32
 8005b14:	4a07      	ldr	r2, [pc, #28]	@ (8005b34 <UART_SetConfig+0x118>)
 8005b16:	fba2 2303 	umull	r2, r3, r2, r3
 8005b1a:	095b      	lsrs	r3, r3, #5
 8005b1c:	f003 020f 	and.w	r2, r3, #15
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	440a      	add	r2, r1
 8005b26:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005b28:	bf00      	nop
 8005b2a:	3710      	adds	r7, #16
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	bd80      	pop	{r7, pc}
 8005b30:	40013800 	.word	0x40013800
 8005b34:	51eb851f 	.word	0x51eb851f

08005b38 <std>:
 8005b38:	2300      	movs	r3, #0
 8005b3a:	b510      	push	{r4, lr}
 8005b3c:	4604      	mov	r4, r0
 8005b3e:	e9c0 3300 	strd	r3, r3, [r0]
 8005b42:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005b46:	6083      	str	r3, [r0, #8]
 8005b48:	8181      	strh	r1, [r0, #12]
 8005b4a:	6643      	str	r3, [r0, #100]	@ 0x64
 8005b4c:	81c2      	strh	r2, [r0, #14]
 8005b4e:	6183      	str	r3, [r0, #24]
 8005b50:	4619      	mov	r1, r3
 8005b52:	2208      	movs	r2, #8
 8005b54:	305c      	adds	r0, #92	@ 0x5c
 8005b56:	f000 fa11 	bl	8005f7c <memset>
 8005b5a:	4b0d      	ldr	r3, [pc, #52]	@ (8005b90 <std+0x58>)
 8005b5c:	6224      	str	r4, [r4, #32]
 8005b5e:	6263      	str	r3, [r4, #36]	@ 0x24
 8005b60:	4b0c      	ldr	r3, [pc, #48]	@ (8005b94 <std+0x5c>)
 8005b62:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005b64:	4b0c      	ldr	r3, [pc, #48]	@ (8005b98 <std+0x60>)
 8005b66:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005b68:	4b0c      	ldr	r3, [pc, #48]	@ (8005b9c <std+0x64>)
 8005b6a:	6323      	str	r3, [r4, #48]	@ 0x30
 8005b6c:	4b0c      	ldr	r3, [pc, #48]	@ (8005ba0 <std+0x68>)
 8005b6e:	429c      	cmp	r4, r3
 8005b70:	d006      	beq.n	8005b80 <std+0x48>
 8005b72:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005b76:	4294      	cmp	r4, r2
 8005b78:	d002      	beq.n	8005b80 <std+0x48>
 8005b7a:	33d0      	adds	r3, #208	@ 0xd0
 8005b7c:	429c      	cmp	r4, r3
 8005b7e:	d105      	bne.n	8005b8c <std+0x54>
 8005b80:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005b84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b88:	f000 ba70 	b.w	800606c <__retarget_lock_init_recursive>
 8005b8c:	bd10      	pop	{r4, pc}
 8005b8e:	bf00      	nop
 8005b90:	08005dad 	.word	0x08005dad
 8005b94:	08005dcf 	.word	0x08005dcf
 8005b98:	08005e07 	.word	0x08005e07
 8005b9c:	08005e2b 	.word	0x08005e2b
 8005ba0:	20000310 	.word	0x20000310

08005ba4 <stdio_exit_handler>:
 8005ba4:	4a02      	ldr	r2, [pc, #8]	@ (8005bb0 <stdio_exit_handler+0xc>)
 8005ba6:	4903      	ldr	r1, [pc, #12]	@ (8005bb4 <stdio_exit_handler+0x10>)
 8005ba8:	4803      	ldr	r0, [pc, #12]	@ (8005bb8 <stdio_exit_handler+0x14>)
 8005baa:	f000 b869 	b.w	8005c80 <_fwalk_sglue>
 8005bae:	bf00      	nop
 8005bb0:	2000000c 	.word	0x2000000c
 8005bb4:	08006905 	.word	0x08006905
 8005bb8:	2000001c 	.word	0x2000001c

08005bbc <cleanup_stdio>:
 8005bbc:	6841      	ldr	r1, [r0, #4]
 8005bbe:	4b0c      	ldr	r3, [pc, #48]	@ (8005bf0 <cleanup_stdio+0x34>)
 8005bc0:	b510      	push	{r4, lr}
 8005bc2:	4299      	cmp	r1, r3
 8005bc4:	4604      	mov	r4, r0
 8005bc6:	d001      	beq.n	8005bcc <cleanup_stdio+0x10>
 8005bc8:	f000 fe9c 	bl	8006904 <_fflush_r>
 8005bcc:	68a1      	ldr	r1, [r4, #8]
 8005bce:	4b09      	ldr	r3, [pc, #36]	@ (8005bf4 <cleanup_stdio+0x38>)
 8005bd0:	4299      	cmp	r1, r3
 8005bd2:	d002      	beq.n	8005bda <cleanup_stdio+0x1e>
 8005bd4:	4620      	mov	r0, r4
 8005bd6:	f000 fe95 	bl	8006904 <_fflush_r>
 8005bda:	68e1      	ldr	r1, [r4, #12]
 8005bdc:	4b06      	ldr	r3, [pc, #24]	@ (8005bf8 <cleanup_stdio+0x3c>)
 8005bde:	4299      	cmp	r1, r3
 8005be0:	d004      	beq.n	8005bec <cleanup_stdio+0x30>
 8005be2:	4620      	mov	r0, r4
 8005be4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005be8:	f000 be8c 	b.w	8006904 <_fflush_r>
 8005bec:	bd10      	pop	{r4, pc}
 8005bee:	bf00      	nop
 8005bf0:	20000310 	.word	0x20000310
 8005bf4:	20000378 	.word	0x20000378
 8005bf8:	200003e0 	.word	0x200003e0

08005bfc <global_stdio_init.part.0>:
 8005bfc:	b510      	push	{r4, lr}
 8005bfe:	4b0b      	ldr	r3, [pc, #44]	@ (8005c2c <global_stdio_init.part.0+0x30>)
 8005c00:	4c0b      	ldr	r4, [pc, #44]	@ (8005c30 <global_stdio_init.part.0+0x34>)
 8005c02:	4a0c      	ldr	r2, [pc, #48]	@ (8005c34 <global_stdio_init.part.0+0x38>)
 8005c04:	4620      	mov	r0, r4
 8005c06:	601a      	str	r2, [r3, #0]
 8005c08:	2104      	movs	r1, #4
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	f7ff ff94 	bl	8005b38 <std>
 8005c10:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005c14:	2201      	movs	r2, #1
 8005c16:	2109      	movs	r1, #9
 8005c18:	f7ff ff8e 	bl	8005b38 <std>
 8005c1c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005c20:	2202      	movs	r2, #2
 8005c22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c26:	2112      	movs	r1, #18
 8005c28:	f7ff bf86 	b.w	8005b38 <std>
 8005c2c:	20000448 	.word	0x20000448
 8005c30:	20000310 	.word	0x20000310
 8005c34:	08005ba5 	.word	0x08005ba5

08005c38 <__sfp_lock_acquire>:
 8005c38:	4801      	ldr	r0, [pc, #4]	@ (8005c40 <__sfp_lock_acquire+0x8>)
 8005c3a:	f000 ba18 	b.w	800606e <__retarget_lock_acquire_recursive>
 8005c3e:	bf00      	nop
 8005c40:	20000451 	.word	0x20000451

08005c44 <__sfp_lock_release>:
 8005c44:	4801      	ldr	r0, [pc, #4]	@ (8005c4c <__sfp_lock_release+0x8>)
 8005c46:	f000 ba13 	b.w	8006070 <__retarget_lock_release_recursive>
 8005c4a:	bf00      	nop
 8005c4c:	20000451 	.word	0x20000451

08005c50 <__sinit>:
 8005c50:	b510      	push	{r4, lr}
 8005c52:	4604      	mov	r4, r0
 8005c54:	f7ff fff0 	bl	8005c38 <__sfp_lock_acquire>
 8005c58:	6a23      	ldr	r3, [r4, #32]
 8005c5a:	b11b      	cbz	r3, 8005c64 <__sinit+0x14>
 8005c5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c60:	f7ff bff0 	b.w	8005c44 <__sfp_lock_release>
 8005c64:	4b04      	ldr	r3, [pc, #16]	@ (8005c78 <__sinit+0x28>)
 8005c66:	6223      	str	r3, [r4, #32]
 8005c68:	4b04      	ldr	r3, [pc, #16]	@ (8005c7c <__sinit+0x2c>)
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d1f5      	bne.n	8005c5c <__sinit+0xc>
 8005c70:	f7ff ffc4 	bl	8005bfc <global_stdio_init.part.0>
 8005c74:	e7f2      	b.n	8005c5c <__sinit+0xc>
 8005c76:	bf00      	nop
 8005c78:	08005bbd 	.word	0x08005bbd
 8005c7c:	20000448 	.word	0x20000448

08005c80 <_fwalk_sglue>:
 8005c80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005c84:	4607      	mov	r7, r0
 8005c86:	4688      	mov	r8, r1
 8005c88:	4614      	mov	r4, r2
 8005c8a:	2600      	movs	r6, #0
 8005c8c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005c90:	f1b9 0901 	subs.w	r9, r9, #1
 8005c94:	d505      	bpl.n	8005ca2 <_fwalk_sglue+0x22>
 8005c96:	6824      	ldr	r4, [r4, #0]
 8005c98:	2c00      	cmp	r4, #0
 8005c9a:	d1f7      	bne.n	8005c8c <_fwalk_sglue+0xc>
 8005c9c:	4630      	mov	r0, r6
 8005c9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005ca2:	89ab      	ldrh	r3, [r5, #12]
 8005ca4:	2b01      	cmp	r3, #1
 8005ca6:	d907      	bls.n	8005cb8 <_fwalk_sglue+0x38>
 8005ca8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005cac:	3301      	adds	r3, #1
 8005cae:	d003      	beq.n	8005cb8 <_fwalk_sglue+0x38>
 8005cb0:	4629      	mov	r1, r5
 8005cb2:	4638      	mov	r0, r7
 8005cb4:	47c0      	blx	r8
 8005cb6:	4306      	orrs	r6, r0
 8005cb8:	3568      	adds	r5, #104	@ 0x68
 8005cba:	e7e9      	b.n	8005c90 <_fwalk_sglue+0x10>

08005cbc <iprintf>:
 8005cbc:	b40f      	push	{r0, r1, r2, r3}
 8005cbe:	b507      	push	{r0, r1, r2, lr}
 8005cc0:	4906      	ldr	r1, [pc, #24]	@ (8005cdc <iprintf+0x20>)
 8005cc2:	ab04      	add	r3, sp, #16
 8005cc4:	6808      	ldr	r0, [r1, #0]
 8005cc6:	f853 2b04 	ldr.w	r2, [r3], #4
 8005cca:	6881      	ldr	r1, [r0, #8]
 8005ccc:	9301      	str	r3, [sp, #4]
 8005cce:	f000 faef 	bl	80062b0 <_vfiprintf_r>
 8005cd2:	b003      	add	sp, #12
 8005cd4:	f85d eb04 	ldr.w	lr, [sp], #4
 8005cd8:	b004      	add	sp, #16
 8005cda:	4770      	bx	lr
 8005cdc:	20000018 	.word	0x20000018

08005ce0 <putchar>:
 8005ce0:	4b02      	ldr	r3, [pc, #8]	@ (8005cec <putchar+0xc>)
 8005ce2:	4601      	mov	r1, r0
 8005ce4:	6818      	ldr	r0, [r3, #0]
 8005ce6:	6882      	ldr	r2, [r0, #8]
 8005ce8:	f000 be95 	b.w	8006a16 <_putc_r>
 8005cec:	20000018 	.word	0x20000018

08005cf0 <_puts_r>:
 8005cf0:	6a03      	ldr	r3, [r0, #32]
 8005cf2:	b570      	push	{r4, r5, r6, lr}
 8005cf4:	4605      	mov	r5, r0
 8005cf6:	460e      	mov	r6, r1
 8005cf8:	6884      	ldr	r4, [r0, #8]
 8005cfa:	b90b      	cbnz	r3, 8005d00 <_puts_r+0x10>
 8005cfc:	f7ff ffa8 	bl	8005c50 <__sinit>
 8005d00:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005d02:	07db      	lsls	r3, r3, #31
 8005d04:	d405      	bmi.n	8005d12 <_puts_r+0x22>
 8005d06:	89a3      	ldrh	r3, [r4, #12]
 8005d08:	0598      	lsls	r0, r3, #22
 8005d0a:	d402      	bmi.n	8005d12 <_puts_r+0x22>
 8005d0c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005d0e:	f000 f9ae 	bl	800606e <__retarget_lock_acquire_recursive>
 8005d12:	89a3      	ldrh	r3, [r4, #12]
 8005d14:	0719      	lsls	r1, r3, #28
 8005d16:	d502      	bpl.n	8005d1e <_puts_r+0x2e>
 8005d18:	6923      	ldr	r3, [r4, #16]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d135      	bne.n	8005d8a <_puts_r+0x9a>
 8005d1e:	4621      	mov	r1, r4
 8005d20:	4628      	mov	r0, r5
 8005d22:	f000 f8c5 	bl	8005eb0 <__swsetup_r>
 8005d26:	b380      	cbz	r0, 8005d8a <_puts_r+0x9a>
 8005d28:	f04f 35ff 	mov.w	r5, #4294967295
 8005d2c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005d2e:	07da      	lsls	r2, r3, #31
 8005d30:	d405      	bmi.n	8005d3e <_puts_r+0x4e>
 8005d32:	89a3      	ldrh	r3, [r4, #12]
 8005d34:	059b      	lsls	r3, r3, #22
 8005d36:	d402      	bmi.n	8005d3e <_puts_r+0x4e>
 8005d38:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005d3a:	f000 f999 	bl	8006070 <__retarget_lock_release_recursive>
 8005d3e:	4628      	mov	r0, r5
 8005d40:	bd70      	pop	{r4, r5, r6, pc}
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	da04      	bge.n	8005d50 <_puts_r+0x60>
 8005d46:	69a2      	ldr	r2, [r4, #24]
 8005d48:	429a      	cmp	r2, r3
 8005d4a:	dc17      	bgt.n	8005d7c <_puts_r+0x8c>
 8005d4c:	290a      	cmp	r1, #10
 8005d4e:	d015      	beq.n	8005d7c <_puts_r+0x8c>
 8005d50:	6823      	ldr	r3, [r4, #0]
 8005d52:	1c5a      	adds	r2, r3, #1
 8005d54:	6022      	str	r2, [r4, #0]
 8005d56:	7019      	strb	r1, [r3, #0]
 8005d58:	68a3      	ldr	r3, [r4, #8]
 8005d5a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005d5e:	3b01      	subs	r3, #1
 8005d60:	60a3      	str	r3, [r4, #8]
 8005d62:	2900      	cmp	r1, #0
 8005d64:	d1ed      	bne.n	8005d42 <_puts_r+0x52>
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	da11      	bge.n	8005d8e <_puts_r+0x9e>
 8005d6a:	4622      	mov	r2, r4
 8005d6c:	210a      	movs	r1, #10
 8005d6e:	4628      	mov	r0, r5
 8005d70:	f000 f85f 	bl	8005e32 <__swbuf_r>
 8005d74:	3001      	adds	r0, #1
 8005d76:	d0d7      	beq.n	8005d28 <_puts_r+0x38>
 8005d78:	250a      	movs	r5, #10
 8005d7a:	e7d7      	b.n	8005d2c <_puts_r+0x3c>
 8005d7c:	4622      	mov	r2, r4
 8005d7e:	4628      	mov	r0, r5
 8005d80:	f000 f857 	bl	8005e32 <__swbuf_r>
 8005d84:	3001      	adds	r0, #1
 8005d86:	d1e7      	bne.n	8005d58 <_puts_r+0x68>
 8005d88:	e7ce      	b.n	8005d28 <_puts_r+0x38>
 8005d8a:	3e01      	subs	r6, #1
 8005d8c:	e7e4      	b.n	8005d58 <_puts_r+0x68>
 8005d8e:	6823      	ldr	r3, [r4, #0]
 8005d90:	1c5a      	adds	r2, r3, #1
 8005d92:	6022      	str	r2, [r4, #0]
 8005d94:	220a      	movs	r2, #10
 8005d96:	701a      	strb	r2, [r3, #0]
 8005d98:	e7ee      	b.n	8005d78 <_puts_r+0x88>
	...

08005d9c <puts>:
 8005d9c:	4b02      	ldr	r3, [pc, #8]	@ (8005da8 <puts+0xc>)
 8005d9e:	4601      	mov	r1, r0
 8005da0:	6818      	ldr	r0, [r3, #0]
 8005da2:	f7ff bfa5 	b.w	8005cf0 <_puts_r>
 8005da6:	bf00      	nop
 8005da8:	20000018 	.word	0x20000018

08005dac <__sread>:
 8005dac:	b510      	push	{r4, lr}
 8005dae:	460c      	mov	r4, r1
 8005db0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005db4:	f000 f90c 	bl	8005fd0 <_read_r>
 8005db8:	2800      	cmp	r0, #0
 8005dba:	bfab      	itete	ge
 8005dbc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005dbe:	89a3      	ldrhlt	r3, [r4, #12]
 8005dc0:	181b      	addge	r3, r3, r0
 8005dc2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005dc6:	bfac      	ite	ge
 8005dc8:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005dca:	81a3      	strhlt	r3, [r4, #12]
 8005dcc:	bd10      	pop	{r4, pc}

08005dce <__swrite>:
 8005dce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005dd2:	461f      	mov	r7, r3
 8005dd4:	898b      	ldrh	r3, [r1, #12]
 8005dd6:	4605      	mov	r5, r0
 8005dd8:	05db      	lsls	r3, r3, #23
 8005dda:	460c      	mov	r4, r1
 8005ddc:	4616      	mov	r6, r2
 8005dde:	d505      	bpl.n	8005dec <__swrite+0x1e>
 8005de0:	2302      	movs	r3, #2
 8005de2:	2200      	movs	r2, #0
 8005de4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005de8:	f000 f8e0 	bl	8005fac <_lseek_r>
 8005dec:	89a3      	ldrh	r3, [r4, #12]
 8005dee:	4632      	mov	r2, r6
 8005df0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005df4:	81a3      	strh	r3, [r4, #12]
 8005df6:	4628      	mov	r0, r5
 8005df8:	463b      	mov	r3, r7
 8005dfa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005dfe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005e02:	f000 b8f7 	b.w	8005ff4 <_write_r>

08005e06 <__sseek>:
 8005e06:	b510      	push	{r4, lr}
 8005e08:	460c      	mov	r4, r1
 8005e0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e0e:	f000 f8cd 	bl	8005fac <_lseek_r>
 8005e12:	1c43      	adds	r3, r0, #1
 8005e14:	89a3      	ldrh	r3, [r4, #12]
 8005e16:	bf15      	itete	ne
 8005e18:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005e1a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005e1e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005e22:	81a3      	strheq	r3, [r4, #12]
 8005e24:	bf18      	it	ne
 8005e26:	81a3      	strhne	r3, [r4, #12]
 8005e28:	bd10      	pop	{r4, pc}

08005e2a <__sclose>:
 8005e2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e2e:	f000 b8ad 	b.w	8005f8c <_close_r>

08005e32 <__swbuf_r>:
 8005e32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e34:	460e      	mov	r6, r1
 8005e36:	4614      	mov	r4, r2
 8005e38:	4605      	mov	r5, r0
 8005e3a:	b118      	cbz	r0, 8005e44 <__swbuf_r+0x12>
 8005e3c:	6a03      	ldr	r3, [r0, #32]
 8005e3e:	b90b      	cbnz	r3, 8005e44 <__swbuf_r+0x12>
 8005e40:	f7ff ff06 	bl	8005c50 <__sinit>
 8005e44:	69a3      	ldr	r3, [r4, #24]
 8005e46:	60a3      	str	r3, [r4, #8]
 8005e48:	89a3      	ldrh	r3, [r4, #12]
 8005e4a:	071a      	lsls	r2, r3, #28
 8005e4c:	d501      	bpl.n	8005e52 <__swbuf_r+0x20>
 8005e4e:	6923      	ldr	r3, [r4, #16]
 8005e50:	b943      	cbnz	r3, 8005e64 <__swbuf_r+0x32>
 8005e52:	4621      	mov	r1, r4
 8005e54:	4628      	mov	r0, r5
 8005e56:	f000 f82b 	bl	8005eb0 <__swsetup_r>
 8005e5a:	b118      	cbz	r0, 8005e64 <__swbuf_r+0x32>
 8005e5c:	f04f 37ff 	mov.w	r7, #4294967295
 8005e60:	4638      	mov	r0, r7
 8005e62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005e64:	6823      	ldr	r3, [r4, #0]
 8005e66:	6922      	ldr	r2, [r4, #16]
 8005e68:	b2f6      	uxtb	r6, r6
 8005e6a:	1a98      	subs	r0, r3, r2
 8005e6c:	6963      	ldr	r3, [r4, #20]
 8005e6e:	4637      	mov	r7, r6
 8005e70:	4283      	cmp	r3, r0
 8005e72:	dc05      	bgt.n	8005e80 <__swbuf_r+0x4e>
 8005e74:	4621      	mov	r1, r4
 8005e76:	4628      	mov	r0, r5
 8005e78:	f000 fd44 	bl	8006904 <_fflush_r>
 8005e7c:	2800      	cmp	r0, #0
 8005e7e:	d1ed      	bne.n	8005e5c <__swbuf_r+0x2a>
 8005e80:	68a3      	ldr	r3, [r4, #8]
 8005e82:	3b01      	subs	r3, #1
 8005e84:	60a3      	str	r3, [r4, #8]
 8005e86:	6823      	ldr	r3, [r4, #0]
 8005e88:	1c5a      	adds	r2, r3, #1
 8005e8a:	6022      	str	r2, [r4, #0]
 8005e8c:	701e      	strb	r6, [r3, #0]
 8005e8e:	6962      	ldr	r2, [r4, #20]
 8005e90:	1c43      	adds	r3, r0, #1
 8005e92:	429a      	cmp	r2, r3
 8005e94:	d004      	beq.n	8005ea0 <__swbuf_r+0x6e>
 8005e96:	89a3      	ldrh	r3, [r4, #12]
 8005e98:	07db      	lsls	r3, r3, #31
 8005e9a:	d5e1      	bpl.n	8005e60 <__swbuf_r+0x2e>
 8005e9c:	2e0a      	cmp	r6, #10
 8005e9e:	d1df      	bne.n	8005e60 <__swbuf_r+0x2e>
 8005ea0:	4621      	mov	r1, r4
 8005ea2:	4628      	mov	r0, r5
 8005ea4:	f000 fd2e 	bl	8006904 <_fflush_r>
 8005ea8:	2800      	cmp	r0, #0
 8005eaa:	d0d9      	beq.n	8005e60 <__swbuf_r+0x2e>
 8005eac:	e7d6      	b.n	8005e5c <__swbuf_r+0x2a>
	...

08005eb0 <__swsetup_r>:
 8005eb0:	b538      	push	{r3, r4, r5, lr}
 8005eb2:	4b29      	ldr	r3, [pc, #164]	@ (8005f58 <__swsetup_r+0xa8>)
 8005eb4:	4605      	mov	r5, r0
 8005eb6:	6818      	ldr	r0, [r3, #0]
 8005eb8:	460c      	mov	r4, r1
 8005eba:	b118      	cbz	r0, 8005ec4 <__swsetup_r+0x14>
 8005ebc:	6a03      	ldr	r3, [r0, #32]
 8005ebe:	b90b      	cbnz	r3, 8005ec4 <__swsetup_r+0x14>
 8005ec0:	f7ff fec6 	bl	8005c50 <__sinit>
 8005ec4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005ec8:	0719      	lsls	r1, r3, #28
 8005eca:	d422      	bmi.n	8005f12 <__swsetup_r+0x62>
 8005ecc:	06da      	lsls	r2, r3, #27
 8005ece:	d407      	bmi.n	8005ee0 <__swsetup_r+0x30>
 8005ed0:	2209      	movs	r2, #9
 8005ed2:	602a      	str	r2, [r5, #0]
 8005ed4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005ed8:	f04f 30ff 	mov.w	r0, #4294967295
 8005edc:	81a3      	strh	r3, [r4, #12]
 8005ede:	e033      	b.n	8005f48 <__swsetup_r+0x98>
 8005ee0:	0758      	lsls	r0, r3, #29
 8005ee2:	d512      	bpl.n	8005f0a <__swsetup_r+0x5a>
 8005ee4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005ee6:	b141      	cbz	r1, 8005efa <__swsetup_r+0x4a>
 8005ee8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005eec:	4299      	cmp	r1, r3
 8005eee:	d002      	beq.n	8005ef6 <__swsetup_r+0x46>
 8005ef0:	4628      	mov	r0, r5
 8005ef2:	f000 f8bf 	bl	8006074 <_free_r>
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	6363      	str	r3, [r4, #52]	@ 0x34
 8005efa:	89a3      	ldrh	r3, [r4, #12]
 8005efc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005f00:	81a3      	strh	r3, [r4, #12]
 8005f02:	2300      	movs	r3, #0
 8005f04:	6063      	str	r3, [r4, #4]
 8005f06:	6923      	ldr	r3, [r4, #16]
 8005f08:	6023      	str	r3, [r4, #0]
 8005f0a:	89a3      	ldrh	r3, [r4, #12]
 8005f0c:	f043 0308 	orr.w	r3, r3, #8
 8005f10:	81a3      	strh	r3, [r4, #12]
 8005f12:	6923      	ldr	r3, [r4, #16]
 8005f14:	b94b      	cbnz	r3, 8005f2a <__swsetup_r+0x7a>
 8005f16:	89a3      	ldrh	r3, [r4, #12]
 8005f18:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005f1c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005f20:	d003      	beq.n	8005f2a <__swsetup_r+0x7a>
 8005f22:	4621      	mov	r1, r4
 8005f24:	4628      	mov	r0, r5
 8005f26:	f000 fd3a 	bl	800699e <__smakebuf_r>
 8005f2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005f2e:	f013 0201 	ands.w	r2, r3, #1
 8005f32:	d00a      	beq.n	8005f4a <__swsetup_r+0x9a>
 8005f34:	2200      	movs	r2, #0
 8005f36:	60a2      	str	r2, [r4, #8]
 8005f38:	6962      	ldr	r2, [r4, #20]
 8005f3a:	4252      	negs	r2, r2
 8005f3c:	61a2      	str	r2, [r4, #24]
 8005f3e:	6922      	ldr	r2, [r4, #16]
 8005f40:	b942      	cbnz	r2, 8005f54 <__swsetup_r+0xa4>
 8005f42:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005f46:	d1c5      	bne.n	8005ed4 <__swsetup_r+0x24>
 8005f48:	bd38      	pop	{r3, r4, r5, pc}
 8005f4a:	0799      	lsls	r1, r3, #30
 8005f4c:	bf58      	it	pl
 8005f4e:	6962      	ldrpl	r2, [r4, #20]
 8005f50:	60a2      	str	r2, [r4, #8]
 8005f52:	e7f4      	b.n	8005f3e <__swsetup_r+0x8e>
 8005f54:	2000      	movs	r0, #0
 8005f56:	e7f7      	b.n	8005f48 <__swsetup_r+0x98>
 8005f58:	20000018 	.word	0x20000018

08005f5c <memcmp>:
 8005f5c:	b510      	push	{r4, lr}
 8005f5e:	3901      	subs	r1, #1
 8005f60:	4402      	add	r2, r0
 8005f62:	4290      	cmp	r0, r2
 8005f64:	d101      	bne.n	8005f6a <memcmp+0xe>
 8005f66:	2000      	movs	r0, #0
 8005f68:	e005      	b.n	8005f76 <memcmp+0x1a>
 8005f6a:	7803      	ldrb	r3, [r0, #0]
 8005f6c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8005f70:	42a3      	cmp	r3, r4
 8005f72:	d001      	beq.n	8005f78 <memcmp+0x1c>
 8005f74:	1b18      	subs	r0, r3, r4
 8005f76:	bd10      	pop	{r4, pc}
 8005f78:	3001      	adds	r0, #1
 8005f7a:	e7f2      	b.n	8005f62 <memcmp+0x6>

08005f7c <memset>:
 8005f7c:	4603      	mov	r3, r0
 8005f7e:	4402      	add	r2, r0
 8005f80:	4293      	cmp	r3, r2
 8005f82:	d100      	bne.n	8005f86 <memset+0xa>
 8005f84:	4770      	bx	lr
 8005f86:	f803 1b01 	strb.w	r1, [r3], #1
 8005f8a:	e7f9      	b.n	8005f80 <memset+0x4>

08005f8c <_close_r>:
 8005f8c:	b538      	push	{r3, r4, r5, lr}
 8005f8e:	2300      	movs	r3, #0
 8005f90:	4d05      	ldr	r5, [pc, #20]	@ (8005fa8 <_close_r+0x1c>)
 8005f92:	4604      	mov	r4, r0
 8005f94:	4608      	mov	r0, r1
 8005f96:	602b      	str	r3, [r5, #0]
 8005f98:	f7fa fe67 	bl	8000c6a <_close>
 8005f9c:	1c43      	adds	r3, r0, #1
 8005f9e:	d102      	bne.n	8005fa6 <_close_r+0x1a>
 8005fa0:	682b      	ldr	r3, [r5, #0]
 8005fa2:	b103      	cbz	r3, 8005fa6 <_close_r+0x1a>
 8005fa4:	6023      	str	r3, [r4, #0]
 8005fa6:	bd38      	pop	{r3, r4, r5, pc}
 8005fa8:	2000044c 	.word	0x2000044c

08005fac <_lseek_r>:
 8005fac:	b538      	push	{r3, r4, r5, lr}
 8005fae:	4604      	mov	r4, r0
 8005fb0:	4608      	mov	r0, r1
 8005fb2:	4611      	mov	r1, r2
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	4d05      	ldr	r5, [pc, #20]	@ (8005fcc <_lseek_r+0x20>)
 8005fb8:	602a      	str	r2, [r5, #0]
 8005fba:	461a      	mov	r2, r3
 8005fbc:	f7fa fe79 	bl	8000cb2 <_lseek>
 8005fc0:	1c43      	adds	r3, r0, #1
 8005fc2:	d102      	bne.n	8005fca <_lseek_r+0x1e>
 8005fc4:	682b      	ldr	r3, [r5, #0]
 8005fc6:	b103      	cbz	r3, 8005fca <_lseek_r+0x1e>
 8005fc8:	6023      	str	r3, [r4, #0]
 8005fca:	bd38      	pop	{r3, r4, r5, pc}
 8005fcc:	2000044c 	.word	0x2000044c

08005fd0 <_read_r>:
 8005fd0:	b538      	push	{r3, r4, r5, lr}
 8005fd2:	4604      	mov	r4, r0
 8005fd4:	4608      	mov	r0, r1
 8005fd6:	4611      	mov	r1, r2
 8005fd8:	2200      	movs	r2, #0
 8005fda:	4d05      	ldr	r5, [pc, #20]	@ (8005ff0 <_read_r+0x20>)
 8005fdc:	602a      	str	r2, [r5, #0]
 8005fde:	461a      	mov	r2, r3
 8005fe0:	f7fa fe0a 	bl	8000bf8 <_read>
 8005fe4:	1c43      	adds	r3, r0, #1
 8005fe6:	d102      	bne.n	8005fee <_read_r+0x1e>
 8005fe8:	682b      	ldr	r3, [r5, #0]
 8005fea:	b103      	cbz	r3, 8005fee <_read_r+0x1e>
 8005fec:	6023      	str	r3, [r4, #0]
 8005fee:	bd38      	pop	{r3, r4, r5, pc}
 8005ff0:	2000044c 	.word	0x2000044c

08005ff4 <_write_r>:
 8005ff4:	b538      	push	{r3, r4, r5, lr}
 8005ff6:	4604      	mov	r4, r0
 8005ff8:	4608      	mov	r0, r1
 8005ffa:	4611      	mov	r1, r2
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	4d05      	ldr	r5, [pc, #20]	@ (8006014 <_write_r+0x20>)
 8006000:	602a      	str	r2, [r5, #0]
 8006002:	461a      	mov	r2, r3
 8006004:	f7fa fe15 	bl	8000c32 <_write>
 8006008:	1c43      	adds	r3, r0, #1
 800600a:	d102      	bne.n	8006012 <_write_r+0x1e>
 800600c:	682b      	ldr	r3, [r5, #0]
 800600e:	b103      	cbz	r3, 8006012 <_write_r+0x1e>
 8006010:	6023      	str	r3, [r4, #0]
 8006012:	bd38      	pop	{r3, r4, r5, pc}
 8006014:	2000044c 	.word	0x2000044c

08006018 <__errno>:
 8006018:	4b01      	ldr	r3, [pc, #4]	@ (8006020 <__errno+0x8>)
 800601a:	6818      	ldr	r0, [r3, #0]
 800601c:	4770      	bx	lr
 800601e:	bf00      	nop
 8006020:	20000018 	.word	0x20000018

08006024 <__libc_init_array>:
 8006024:	b570      	push	{r4, r5, r6, lr}
 8006026:	2600      	movs	r6, #0
 8006028:	4d0c      	ldr	r5, [pc, #48]	@ (800605c <__libc_init_array+0x38>)
 800602a:	4c0d      	ldr	r4, [pc, #52]	@ (8006060 <__libc_init_array+0x3c>)
 800602c:	1b64      	subs	r4, r4, r5
 800602e:	10a4      	asrs	r4, r4, #2
 8006030:	42a6      	cmp	r6, r4
 8006032:	d109      	bne.n	8006048 <__libc_init_array+0x24>
 8006034:	f000 fd64 	bl	8006b00 <_init>
 8006038:	2600      	movs	r6, #0
 800603a:	4d0a      	ldr	r5, [pc, #40]	@ (8006064 <__libc_init_array+0x40>)
 800603c:	4c0a      	ldr	r4, [pc, #40]	@ (8006068 <__libc_init_array+0x44>)
 800603e:	1b64      	subs	r4, r4, r5
 8006040:	10a4      	asrs	r4, r4, #2
 8006042:	42a6      	cmp	r6, r4
 8006044:	d105      	bne.n	8006052 <__libc_init_array+0x2e>
 8006046:	bd70      	pop	{r4, r5, r6, pc}
 8006048:	f855 3b04 	ldr.w	r3, [r5], #4
 800604c:	4798      	blx	r3
 800604e:	3601      	adds	r6, #1
 8006050:	e7ee      	b.n	8006030 <__libc_init_array+0xc>
 8006052:	f855 3b04 	ldr.w	r3, [r5], #4
 8006056:	4798      	blx	r3
 8006058:	3601      	adds	r6, #1
 800605a:	e7f2      	b.n	8006042 <__libc_init_array+0x1e>
 800605c:	08006dbc 	.word	0x08006dbc
 8006060:	08006dbc 	.word	0x08006dbc
 8006064:	08006dbc 	.word	0x08006dbc
 8006068:	08006dc0 	.word	0x08006dc0

0800606c <__retarget_lock_init_recursive>:
 800606c:	4770      	bx	lr

0800606e <__retarget_lock_acquire_recursive>:
 800606e:	4770      	bx	lr

08006070 <__retarget_lock_release_recursive>:
 8006070:	4770      	bx	lr
	...

08006074 <_free_r>:
 8006074:	b538      	push	{r3, r4, r5, lr}
 8006076:	4605      	mov	r5, r0
 8006078:	2900      	cmp	r1, #0
 800607a:	d040      	beq.n	80060fe <_free_r+0x8a>
 800607c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006080:	1f0c      	subs	r4, r1, #4
 8006082:	2b00      	cmp	r3, #0
 8006084:	bfb8      	it	lt
 8006086:	18e4      	addlt	r4, r4, r3
 8006088:	f000 f8de 	bl	8006248 <__malloc_lock>
 800608c:	4a1c      	ldr	r2, [pc, #112]	@ (8006100 <_free_r+0x8c>)
 800608e:	6813      	ldr	r3, [r2, #0]
 8006090:	b933      	cbnz	r3, 80060a0 <_free_r+0x2c>
 8006092:	6063      	str	r3, [r4, #4]
 8006094:	6014      	str	r4, [r2, #0]
 8006096:	4628      	mov	r0, r5
 8006098:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800609c:	f000 b8da 	b.w	8006254 <__malloc_unlock>
 80060a0:	42a3      	cmp	r3, r4
 80060a2:	d908      	bls.n	80060b6 <_free_r+0x42>
 80060a4:	6820      	ldr	r0, [r4, #0]
 80060a6:	1821      	adds	r1, r4, r0
 80060a8:	428b      	cmp	r3, r1
 80060aa:	bf01      	itttt	eq
 80060ac:	6819      	ldreq	r1, [r3, #0]
 80060ae:	685b      	ldreq	r3, [r3, #4]
 80060b0:	1809      	addeq	r1, r1, r0
 80060b2:	6021      	streq	r1, [r4, #0]
 80060b4:	e7ed      	b.n	8006092 <_free_r+0x1e>
 80060b6:	461a      	mov	r2, r3
 80060b8:	685b      	ldr	r3, [r3, #4]
 80060ba:	b10b      	cbz	r3, 80060c0 <_free_r+0x4c>
 80060bc:	42a3      	cmp	r3, r4
 80060be:	d9fa      	bls.n	80060b6 <_free_r+0x42>
 80060c0:	6811      	ldr	r1, [r2, #0]
 80060c2:	1850      	adds	r0, r2, r1
 80060c4:	42a0      	cmp	r0, r4
 80060c6:	d10b      	bne.n	80060e0 <_free_r+0x6c>
 80060c8:	6820      	ldr	r0, [r4, #0]
 80060ca:	4401      	add	r1, r0
 80060cc:	1850      	adds	r0, r2, r1
 80060ce:	4283      	cmp	r3, r0
 80060d0:	6011      	str	r1, [r2, #0]
 80060d2:	d1e0      	bne.n	8006096 <_free_r+0x22>
 80060d4:	6818      	ldr	r0, [r3, #0]
 80060d6:	685b      	ldr	r3, [r3, #4]
 80060d8:	4408      	add	r0, r1
 80060da:	6010      	str	r0, [r2, #0]
 80060dc:	6053      	str	r3, [r2, #4]
 80060de:	e7da      	b.n	8006096 <_free_r+0x22>
 80060e0:	d902      	bls.n	80060e8 <_free_r+0x74>
 80060e2:	230c      	movs	r3, #12
 80060e4:	602b      	str	r3, [r5, #0]
 80060e6:	e7d6      	b.n	8006096 <_free_r+0x22>
 80060e8:	6820      	ldr	r0, [r4, #0]
 80060ea:	1821      	adds	r1, r4, r0
 80060ec:	428b      	cmp	r3, r1
 80060ee:	bf01      	itttt	eq
 80060f0:	6819      	ldreq	r1, [r3, #0]
 80060f2:	685b      	ldreq	r3, [r3, #4]
 80060f4:	1809      	addeq	r1, r1, r0
 80060f6:	6021      	streq	r1, [r4, #0]
 80060f8:	6063      	str	r3, [r4, #4]
 80060fa:	6054      	str	r4, [r2, #4]
 80060fc:	e7cb      	b.n	8006096 <_free_r+0x22>
 80060fe:	bd38      	pop	{r3, r4, r5, pc}
 8006100:	20000458 	.word	0x20000458

08006104 <sbrk_aligned>:
 8006104:	b570      	push	{r4, r5, r6, lr}
 8006106:	4e0f      	ldr	r6, [pc, #60]	@ (8006144 <sbrk_aligned+0x40>)
 8006108:	460c      	mov	r4, r1
 800610a:	6831      	ldr	r1, [r6, #0]
 800610c:	4605      	mov	r5, r0
 800610e:	b911      	cbnz	r1, 8006116 <sbrk_aligned+0x12>
 8006110:	f000 fcd8 	bl	8006ac4 <_sbrk_r>
 8006114:	6030      	str	r0, [r6, #0]
 8006116:	4621      	mov	r1, r4
 8006118:	4628      	mov	r0, r5
 800611a:	f000 fcd3 	bl	8006ac4 <_sbrk_r>
 800611e:	1c43      	adds	r3, r0, #1
 8006120:	d103      	bne.n	800612a <sbrk_aligned+0x26>
 8006122:	f04f 34ff 	mov.w	r4, #4294967295
 8006126:	4620      	mov	r0, r4
 8006128:	bd70      	pop	{r4, r5, r6, pc}
 800612a:	1cc4      	adds	r4, r0, #3
 800612c:	f024 0403 	bic.w	r4, r4, #3
 8006130:	42a0      	cmp	r0, r4
 8006132:	d0f8      	beq.n	8006126 <sbrk_aligned+0x22>
 8006134:	1a21      	subs	r1, r4, r0
 8006136:	4628      	mov	r0, r5
 8006138:	f000 fcc4 	bl	8006ac4 <_sbrk_r>
 800613c:	3001      	adds	r0, #1
 800613e:	d1f2      	bne.n	8006126 <sbrk_aligned+0x22>
 8006140:	e7ef      	b.n	8006122 <sbrk_aligned+0x1e>
 8006142:	bf00      	nop
 8006144:	20000454 	.word	0x20000454

08006148 <_malloc_r>:
 8006148:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800614c:	1ccd      	adds	r5, r1, #3
 800614e:	f025 0503 	bic.w	r5, r5, #3
 8006152:	3508      	adds	r5, #8
 8006154:	2d0c      	cmp	r5, #12
 8006156:	bf38      	it	cc
 8006158:	250c      	movcc	r5, #12
 800615a:	2d00      	cmp	r5, #0
 800615c:	4606      	mov	r6, r0
 800615e:	db01      	blt.n	8006164 <_malloc_r+0x1c>
 8006160:	42a9      	cmp	r1, r5
 8006162:	d904      	bls.n	800616e <_malloc_r+0x26>
 8006164:	230c      	movs	r3, #12
 8006166:	6033      	str	r3, [r6, #0]
 8006168:	2000      	movs	r0, #0
 800616a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800616e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006244 <_malloc_r+0xfc>
 8006172:	f000 f869 	bl	8006248 <__malloc_lock>
 8006176:	f8d8 3000 	ldr.w	r3, [r8]
 800617a:	461c      	mov	r4, r3
 800617c:	bb44      	cbnz	r4, 80061d0 <_malloc_r+0x88>
 800617e:	4629      	mov	r1, r5
 8006180:	4630      	mov	r0, r6
 8006182:	f7ff ffbf 	bl	8006104 <sbrk_aligned>
 8006186:	1c43      	adds	r3, r0, #1
 8006188:	4604      	mov	r4, r0
 800618a:	d158      	bne.n	800623e <_malloc_r+0xf6>
 800618c:	f8d8 4000 	ldr.w	r4, [r8]
 8006190:	4627      	mov	r7, r4
 8006192:	2f00      	cmp	r7, #0
 8006194:	d143      	bne.n	800621e <_malloc_r+0xd6>
 8006196:	2c00      	cmp	r4, #0
 8006198:	d04b      	beq.n	8006232 <_malloc_r+0xea>
 800619a:	6823      	ldr	r3, [r4, #0]
 800619c:	4639      	mov	r1, r7
 800619e:	4630      	mov	r0, r6
 80061a0:	eb04 0903 	add.w	r9, r4, r3
 80061a4:	f000 fc8e 	bl	8006ac4 <_sbrk_r>
 80061a8:	4581      	cmp	r9, r0
 80061aa:	d142      	bne.n	8006232 <_malloc_r+0xea>
 80061ac:	6821      	ldr	r1, [r4, #0]
 80061ae:	4630      	mov	r0, r6
 80061b0:	1a6d      	subs	r5, r5, r1
 80061b2:	4629      	mov	r1, r5
 80061b4:	f7ff ffa6 	bl	8006104 <sbrk_aligned>
 80061b8:	3001      	adds	r0, #1
 80061ba:	d03a      	beq.n	8006232 <_malloc_r+0xea>
 80061bc:	6823      	ldr	r3, [r4, #0]
 80061be:	442b      	add	r3, r5
 80061c0:	6023      	str	r3, [r4, #0]
 80061c2:	f8d8 3000 	ldr.w	r3, [r8]
 80061c6:	685a      	ldr	r2, [r3, #4]
 80061c8:	bb62      	cbnz	r2, 8006224 <_malloc_r+0xdc>
 80061ca:	f8c8 7000 	str.w	r7, [r8]
 80061ce:	e00f      	b.n	80061f0 <_malloc_r+0xa8>
 80061d0:	6822      	ldr	r2, [r4, #0]
 80061d2:	1b52      	subs	r2, r2, r5
 80061d4:	d420      	bmi.n	8006218 <_malloc_r+0xd0>
 80061d6:	2a0b      	cmp	r2, #11
 80061d8:	d917      	bls.n	800620a <_malloc_r+0xc2>
 80061da:	1961      	adds	r1, r4, r5
 80061dc:	42a3      	cmp	r3, r4
 80061de:	6025      	str	r5, [r4, #0]
 80061e0:	bf18      	it	ne
 80061e2:	6059      	strne	r1, [r3, #4]
 80061e4:	6863      	ldr	r3, [r4, #4]
 80061e6:	bf08      	it	eq
 80061e8:	f8c8 1000 	streq.w	r1, [r8]
 80061ec:	5162      	str	r2, [r4, r5]
 80061ee:	604b      	str	r3, [r1, #4]
 80061f0:	4630      	mov	r0, r6
 80061f2:	f000 f82f 	bl	8006254 <__malloc_unlock>
 80061f6:	f104 000b 	add.w	r0, r4, #11
 80061fa:	1d23      	adds	r3, r4, #4
 80061fc:	f020 0007 	bic.w	r0, r0, #7
 8006200:	1ac2      	subs	r2, r0, r3
 8006202:	bf1c      	itt	ne
 8006204:	1a1b      	subne	r3, r3, r0
 8006206:	50a3      	strne	r3, [r4, r2]
 8006208:	e7af      	b.n	800616a <_malloc_r+0x22>
 800620a:	6862      	ldr	r2, [r4, #4]
 800620c:	42a3      	cmp	r3, r4
 800620e:	bf0c      	ite	eq
 8006210:	f8c8 2000 	streq.w	r2, [r8]
 8006214:	605a      	strne	r2, [r3, #4]
 8006216:	e7eb      	b.n	80061f0 <_malloc_r+0xa8>
 8006218:	4623      	mov	r3, r4
 800621a:	6864      	ldr	r4, [r4, #4]
 800621c:	e7ae      	b.n	800617c <_malloc_r+0x34>
 800621e:	463c      	mov	r4, r7
 8006220:	687f      	ldr	r7, [r7, #4]
 8006222:	e7b6      	b.n	8006192 <_malloc_r+0x4a>
 8006224:	461a      	mov	r2, r3
 8006226:	685b      	ldr	r3, [r3, #4]
 8006228:	42a3      	cmp	r3, r4
 800622a:	d1fb      	bne.n	8006224 <_malloc_r+0xdc>
 800622c:	2300      	movs	r3, #0
 800622e:	6053      	str	r3, [r2, #4]
 8006230:	e7de      	b.n	80061f0 <_malloc_r+0xa8>
 8006232:	230c      	movs	r3, #12
 8006234:	4630      	mov	r0, r6
 8006236:	6033      	str	r3, [r6, #0]
 8006238:	f000 f80c 	bl	8006254 <__malloc_unlock>
 800623c:	e794      	b.n	8006168 <_malloc_r+0x20>
 800623e:	6005      	str	r5, [r0, #0]
 8006240:	e7d6      	b.n	80061f0 <_malloc_r+0xa8>
 8006242:	bf00      	nop
 8006244:	20000458 	.word	0x20000458

08006248 <__malloc_lock>:
 8006248:	4801      	ldr	r0, [pc, #4]	@ (8006250 <__malloc_lock+0x8>)
 800624a:	f7ff bf10 	b.w	800606e <__retarget_lock_acquire_recursive>
 800624e:	bf00      	nop
 8006250:	20000450 	.word	0x20000450

08006254 <__malloc_unlock>:
 8006254:	4801      	ldr	r0, [pc, #4]	@ (800625c <__malloc_unlock+0x8>)
 8006256:	f7ff bf0b 	b.w	8006070 <__retarget_lock_release_recursive>
 800625a:	bf00      	nop
 800625c:	20000450 	.word	0x20000450

08006260 <__sfputc_r>:
 8006260:	6893      	ldr	r3, [r2, #8]
 8006262:	b410      	push	{r4}
 8006264:	3b01      	subs	r3, #1
 8006266:	2b00      	cmp	r3, #0
 8006268:	6093      	str	r3, [r2, #8]
 800626a:	da07      	bge.n	800627c <__sfputc_r+0x1c>
 800626c:	6994      	ldr	r4, [r2, #24]
 800626e:	42a3      	cmp	r3, r4
 8006270:	db01      	blt.n	8006276 <__sfputc_r+0x16>
 8006272:	290a      	cmp	r1, #10
 8006274:	d102      	bne.n	800627c <__sfputc_r+0x1c>
 8006276:	bc10      	pop	{r4}
 8006278:	f7ff bddb 	b.w	8005e32 <__swbuf_r>
 800627c:	6813      	ldr	r3, [r2, #0]
 800627e:	1c58      	adds	r0, r3, #1
 8006280:	6010      	str	r0, [r2, #0]
 8006282:	7019      	strb	r1, [r3, #0]
 8006284:	4608      	mov	r0, r1
 8006286:	bc10      	pop	{r4}
 8006288:	4770      	bx	lr

0800628a <__sfputs_r>:
 800628a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800628c:	4606      	mov	r6, r0
 800628e:	460f      	mov	r7, r1
 8006290:	4614      	mov	r4, r2
 8006292:	18d5      	adds	r5, r2, r3
 8006294:	42ac      	cmp	r4, r5
 8006296:	d101      	bne.n	800629c <__sfputs_r+0x12>
 8006298:	2000      	movs	r0, #0
 800629a:	e007      	b.n	80062ac <__sfputs_r+0x22>
 800629c:	463a      	mov	r2, r7
 800629e:	4630      	mov	r0, r6
 80062a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80062a4:	f7ff ffdc 	bl	8006260 <__sfputc_r>
 80062a8:	1c43      	adds	r3, r0, #1
 80062aa:	d1f3      	bne.n	8006294 <__sfputs_r+0xa>
 80062ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080062b0 <_vfiprintf_r>:
 80062b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062b4:	460d      	mov	r5, r1
 80062b6:	4614      	mov	r4, r2
 80062b8:	4698      	mov	r8, r3
 80062ba:	4606      	mov	r6, r0
 80062bc:	b09d      	sub	sp, #116	@ 0x74
 80062be:	b118      	cbz	r0, 80062c8 <_vfiprintf_r+0x18>
 80062c0:	6a03      	ldr	r3, [r0, #32]
 80062c2:	b90b      	cbnz	r3, 80062c8 <_vfiprintf_r+0x18>
 80062c4:	f7ff fcc4 	bl	8005c50 <__sinit>
 80062c8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80062ca:	07d9      	lsls	r1, r3, #31
 80062cc:	d405      	bmi.n	80062da <_vfiprintf_r+0x2a>
 80062ce:	89ab      	ldrh	r3, [r5, #12]
 80062d0:	059a      	lsls	r2, r3, #22
 80062d2:	d402      	bmi.n	80062da <_vfiprintf_r+0x2a>
 80062d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80062d6:	f7ff feca 	bl	800606e <__retarget_lock_acquire_recursive>
 80062da:	89ab      	ldrh	r3, [r5, #12]
 80062dc:	071b      	lsls	r3, r3, #28
 80062de:	d501      	bpl.n	80062e4 <_vfiprintf_r+0x34>
 80062e0:	692b      	ldr	r3, [r5, #16]
 80062e2:	b99b      	cbnz	r3, 800630c <_vfiprintf_r+0x5c>
 80062e4:	4629      	mov	r1, r5
 80062e6:	4630      	mov	r0, r6
 80062e8:	f7ff fde2 	bl	8005eb0 <__swsetup_r>
 80062ec:	b170      	cbz	r0, 800630c <_vfiprintf_r+0x5c>
 80062ee:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80062f0:	07dc      	lsls	r4, r3, #31
 80062f2:	d504      	bpl.n	80062fe <_vfiprintf_r+0x4e>
 80062f4:	f04f 30ff 	mov.w	r0, #4294967295
 80062f8:	b01d      	add	sp, #116	@ 0x74
 80062fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062fe:	89ab      	ldrh	r3, [r5, #12]
 8006300:	0598      	lsls	r0, r3, #22
 8006302:	d4f7      	bmi.n	80062f4 <_vfiprintf_r+0x44>
 8006304:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006306:	f7ff feb3 	bl	8006070 <__retarget_lock_release_recursive>
 800630a:	e7f3      	b.n	80062f4 <_vfiprintf_r+0x44>
 800630c:	2300      	movs	r3, #0
 800630e:	9309      	str	r3, [sp, #36]	@ 0x24
 8006310:	2320      	movs	r3, #32
 8006312:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006316:	2330      	movs	r3, #48	@ 0x30
 8006318:	f04f 0901 	mov.w	r9, #1
 800631c:	f8cd 800c 	str.w	r8, [sp, #12]
 8006320:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 80064cc <_vfiprintf_r+0x21c>
 8006324:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006328:	4623      	mov	r3, r4
 800632a:	469a      	mov	sl, r3
 800632c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006330:	b10a      	cbz	r2, 8006336 <_vfiprintf_r+0x86>
 8006332:	2a25      	cmp	r2, #37	@ 0x25
 8006334:	d1f9      	bne.n	800632a <_vfiprintf_r+0x7a>
 8006336:	ebba 0b04 	subs.w	fp, sl, r4
 800633a:	d00b      	beq.n	8006354 <_vfiprintf_r+0xa4>
 800633c:	465b      	mov	r3, fp
 800633e:	4622      	mov	r2, r4
 8006340:	4629      	mov	r1, r5
 8006342:	4630      	mov	r0, r6
 8006344:	f7ff ffa1 	bl	800628a <__sfputs_r>
 8006348:	3001      	adds	r0, #1
 800634a:	f000 80a7 	beq.w	800649c <_vfiprintf_r+0x1ec>
 800634e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006350:	445a      	add	r2, fp
 8006352:	9209      	str	r2, [sp, #36]	@ 0x24
 8006354:	f89a 3000 	ldrb.w	r3, [sl]
 8006358:	2b00      	cmp	r3, #0
 800635a:	f000 809f 	beq.w	800649c <_vfiprintf_r+0x1ec>
 800635e:	2300      	movs	r3, #0
 8006360:	f04f 32ff 	mov.w	r2, #4294967295
 8006364:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006368:	f10a 0a01 	add.w	sl, sl, #1
 800636c:	9304      	str	r3, [sp, #16]
 800636e:	9307      	str	r3, [sp, #28]
 8006370:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006374:	931a      	str	r3, [sp, #104]	@ 0x68
 8006376:	4654      	mov	r4, sl
 8006378:	2205      	movs	r2, #5
 800637a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800637e:	4853      	ldr	r0, [pc, #332]	@ (80064cc <_vfiprintf_r+0x21c>)
 8006380:	f000 fbb0 	bl	8006ae4 <memchr>
 8006384:	9a04      	ldr	r2, [sp, #16]
 8006386:	b9d8      	cbnz	r0, 80063c0 <_vfiprintf_r+0x110>
 8006388:	06d1      	lsls	r1, r2, #27
 800638a:	bf44      	itt	mi
 800638c:	2320      	movmi	r3, #32
 800638e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006392:	0713      	lsls	r3, r2, #28
 8006394:	bf44      	itt	mi
 8006396:	232b      	movmi	r3, #43	@ 0x2b
 8006398:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800639c:	f89a 3000 	ldrb.w	r3, [sl]
 80063a0:	2b2a      	cmp	r3, #42	@ 0x2a
 80063a2:	d015      	beq.n	80063d0 <_vfiprintf_r+0x120>
 80063a4:	4654      	mov	r4, sl
 80063a6:	2000      	movs	r0, #0
 80063a8:	f04f 0c0a 	mov.w	ip, #10
 80063ac:	9a07      	ldr	r2, [sp, #28]
 80063ae:	4621      	mov	r1, r4
 80063b0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80063b4:	3b30      	subs	r3, #48	@ 0x30
 80063b6:	2b09      	cmp	r3, #9
 80063b8:	d94b      	bls.n	8006452 <_vfiprintf_r+0x1a2>
 80063ba:	b1b0      	cbz	r0, 80063ea <_vfiprintf_r+0x13a>
 80063bc:	9207      	str	r2, [sp, #28]
 80063be:	e014      	b.n	80063ea <_vfiprintf_r+0x13a>
 80063c0:	eba0 0308 	sub.w	r3, r0, r8
 80063c4:	fa09 f303 	lsl.w	r3, r9, r3
 80063c8:	4313      	orrs	r3, r2
 80063ca:	46a2      	mov	sl, r4
 80063cc:	9304      	str	r3, [sp, #16]
 80063ce:	e7d2      	b.n	8006376 <_vfiprintf_r+0xc6>
 80063d0:	9b03      	ldr	r3, [sp, #12]
 80063d2:	1d19      	adds	r1, r3, #4
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	9103      	str	r1, [sp, #12]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	bfbb      	ittet	lt
 80063dc:	425b      	neglt	r3, r3
 80063de:	f042 0202 	orrlt.w	r2, r2, #2
 80063e2:	9307      	strge	r3, [sp, #28]
 80063e4:	9307      	strlt	r3, [sp, #28]
 80063e6:	bfb8      	it	lt
 80063e8:	9204      	strlt	r2, [sp, #16]
 80063ea:	7823      	ldrb	r3, [r4, #0]
 80063ec:	2b2e      	cmp	r3, #46	@ 0x2e
 80063ee:	d10a      	bne.n	8006406 <_vfiprintf_r+0x156>
 80063f0:	7863      	ldrb	r3, [r4, #1]
 80063f2:	2b2a      	cmp	r3, #42	@ 0x2a
 80063f4:	d132      	bne.n	800645c <_vfiprintf_r+0x1ac>
 80063f6:	9b03      	ldr	r3, [sp, #12]
 80063f8:	3402      	adds	r4, #2
 80063fa:	1d1a      	adds	r2, r3, #4
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	9203      	str	r2, [sp, #12]
 8006400:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006404:	9305      	str	r3, [sp, #20]
 8006406:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 80064d0 <_vfiprintf_r+0x220>
 800640a:	2203      	movs	r2, #3
 800640c:	4650      	mov	r0, sl
 800640e:	7821      	ldrb	r1, [r4, #0]
 8006410:	f000 fb68 	bl	8006ae4 <memchr>
 8006414:	b138      	cbz	r0, 8006426 <_vfiprintf_r+0x176>
 8006416:	2240      	movs	r2, #64	@ 0x40
 8006418:	9b04      	ldr	r3, [sp, #16]
 800641a:	eba0 000a 	sub.w	r0, r0, sl
 800641e:	4082      	lsls	r2, r0
 8006420:	4313      	orrs	r3, r2
 8006422:	3401      	adds	r4, #1
 8006424:	9304      	str	r3, [sp, #16]
 8006426:	f814 1b01 	ldrb.w	r1, [r4], #1
 800642a:	2206      	movs	r2, #6
 800642c:	4829      	ldr	r0, [pc, #164]	@ (80064d4 <_vfiprintf_r+0x224>)
 800642e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006432:	f000 fb57 	bl	8006ae4 <memchr>
 8006436:	2800      	cmp	r0, #0
 8006438:	d03f      	beq.n	80064ba <_vfiprintf_r+0x20a>
 800643a:	4b27      	ldr	r3, [pc, #156]	@ (80064d8 <_vfiprintf_r+0x228>)
 800643c:	bb1b      	cbnz	r3, 8006486 <_vfiprintf_r+0x1d6>
 800643e:	9b03      	ldr	r3, [sp, #12]
 8006440:	3307      	adds	r3, #7
 8006442:	f023 0307 	bic.w	r3, r3, #7
 8006446:	3308      	adds	r3, #8
 8006448:	9303      	str	r3, [sp, #12]
 800644a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800644c:	443b      	add	r3, r7
 800644e:	9309      	str	r3, [sp, #36]	@ 0x24
 8006450:	e76a      	b.n	8006328 <_vfiprintf_r+0x78>
 8006452:	460c      	mov	r4, r1
 8006454:	2001      	movs	r0, #1
 8006456:	fb0c 3202 	mla	r2, ip, r2, r3
 800645a:	e7a8      	b.n	80063ae <_vfiprintf_r+0xfe>
 800645c:	2300      	movs	r3, #0
 800645e:	f04f 0c0a 	mov.w	ip, #10
 8006462:	4619      	mov	r1, r3
 8006464:	3401      	adds	r4, #1
 8006466:	9305      	str	r3, [sp, #20]
 8006468:	4620      	mov	r0, r4
 800646a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800646e:	3a30      	subs	r2, #48	@ 0x30
 8006470:	2a09      	cmp	r2, #9
 8006472:	d903      	bls.n	800647c <_vfiprintf_r+0x1cc>
 8006474:	2b00      	cmp	r3, #0
 8006476:	d0c6      	beq.n	8006406 <_vfiprintf_r+0x156>
 8006478:	9105      	str	r1, [sp, #20]
 800647a:	e7c4      	b.n	8006406 <_vfiprintf_r+0x156>
 800647c:	4604      	mov	r4, r0
 800647e:	2301      	movs	r3, #1
 8006480:	fb0c 2101 	mla	r1, ip, r1, r2
 8006484:	e7f0      	b.n	8006468 <_vfiprintf_r+0x1b8>
 8006486:	ab03      	add	r3, sp, #12
 8006488:	9300      	str	r3, [sp, #0]
 800648a:	462a      	mov	r2, r5
 800648c:	4630      	mov	r0, r6
 800648e:	4b13      	ldr	r3, [pc, #76]	@ (80064dc <_vfiprintf_r+0x22c>)
 8006490:	a904      	add	r1, sp, #16
 8006492:	f3af 8000 	nop.w
 8006496:	4607      	mov	r7, r0
 8006498:	1c78      	adds	r0, r7, #1
 800649a:	d1d6      	bne.n	800644a <_vfiprintf_r+0x19a>
 800649c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800649e:	07d9      	lsls	r1, r3, #31
 80064a0:	d405      	bmi.n	80064ae <_vfiprintf_r+0x1fe>
 80064a2:	89ab      	ldrh	r3, [r5, #12]
 80064a4:	059a      	lsls	r2, r3, #22
 80064a6:	d402      	bmi.n	80064ae <_vfiprintf_r+0x1fe>
 80064a8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80064aa:	f7ff fde1 	bl	8006070 <__retarget_lock_release_recursive>
 80064ae:	89ab      	ldrh	r3, [r5, #12]
 80064b0:	065b      	lsls	r3, r3, #25
 80064b2:	f53f af1f 	bmi.w	80062f4 <_vfiprintf_r+0x44>
 80064b6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80064b8:	e71e      	b.n	80062f8 <_vfiprintf_r+0x48>
 80064ba:	ab03      	add	r3, sp, #12
 80064bc:	9300      	str	r3, [sp, #0]
 80064be:	462a      	mov	r2, r5
 80064c0:	4630      	mov	r0, r6
 80064c2:	4b06      	ldr	r3, [pc, #24]	@ (80064dc <_vfiprintf_r+0x22c>)
 80064c4:	a904      	add	r1, sp, #16
 80064c6:	f000 f87d 	bl	80065c4 <_printf_i>
 80064ca:	e7e4      	b.n	8006496 <_vfiprintf_r+0x1e6>
 80064cc:	08006d86 	.word	0x08006d86
 80064d0:	08006d8c 	.word	0x08006d8c
 80064d4:	08006d90 	.word	0x08006d90
 80064d8:	00000000 	.word	0x00000000
 80064dc:	0800628b 	.word	0x0800628b

080064e0 <_printf_common>:
 80064e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80064e4:	4616      	mov	r6, r2
 80064e6:	4698      	mov	r8, r3
 80064e8:	688a      	ldr	r2, [r1, #8]
 80064ea:	690b      	ldr	r3, [r1, #16]
 80064ec:	4607      	mov	r7, r0
 80064ee:	4293      	cmp	r3, r2
 80064f0:	bfb8      	it	lt
 80064f2:	4613      	movlt	r3, r2
 80064f4:	6033      	str	r3, [r6, #0]
 80064f6:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80064fa:	460c      	mov	r4, r1
 80064fc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006500:	b10a      	cbz	r2, 8006506 <_printf_common+0x26>
 8006502:	3301      	adds	r3, #1
 8006504:	6033      	str	r3, [r6, #0]
 8006506:	6823      	ldr	r3, [r4, #0]
 8006508:	0699      	lsls	r1, r3, #26
 800650a:	bf42      	ittt	mi
 800650c:	6833      	ldrmi	r3, [r6, #0]
 800650e:	3302      	addmi	r3, #2
 8006510:	6033      	strmi	r3, [r6, #0]
 8006512:	6825      	ldr	r5, [r4, #0]
 8006514:	f015 0506 	ands.w	r5, r5, #6
 8006518:	d106      	bne.n	8006528 <_printf_common+0x48>
 800651a:	f104 0a19 	add.w	sl, r4, #25
 800651e:	68e3      	ldr	r3, [r4, #12]
 8006520:	6832      	ldr	r2, [r6, #0]
 8006522:	1a9b      	subs	r3, r3, r2
 8006524:	42ab      	cmp	r3, r5
 8006526:	dc2b      	bgt.n	8006580 <_printf_common+0xa0>
 8006528:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800652c:	6822      	ldr	r2, [r4, #0]
 800652e:	3b00      	subs	r3, #0
 8006530:	bf18      	it	ne
 8006532:	2301      	movne	r3, #1
 8006534:	0692      	lsls	r2, r2, #26
 8006536:	d430      	bmi.n	800659a <_printf_common+0xba>
 8006538:	4641      	mov	r1, r8
 800653a:	4638      	mov	r0, r7
 800653c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006540:	47c8      	blx	r9
 8006542:	3001      	adds	r0, #1
 8006544:	d023      	beq.n	800658e <_printf_common+0xae>
 8006546:	6823      	ldr	r3, [r4, #0]
 8006548:	6922      	ldr	r2, [r4, #16]
 800654a:	f003 0306 	and.w	r3, r3, #6
 800654e:	2b04      	cmp	r3, #4
 8006550:	bf14      	ite	ne
 8006552:	2500      	movne	r5, #0
 8006554:	6833      	ldreq	r3, [r6, #0]
 8006556:	f04f 0600 	mov.w	r6, #0
 800655a:	bf08      	it	eq
 800655c:	68e5      	ldreq	r5, [r4, #12]
 800655e:	f104 041a 	add.w	r4, r4, #26
 8006562:	bf08      	it	eq
 8006564:	1aed      	subeq	r5, r5, r3
 8006566:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800656a:	bf08      	it	eq
 800656c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006570:	4293      	cmp	r3, r2
 8006572:	bfc4      	itt	gt
 8006574:	1a9b      	subgt	r3, r3, r2
 8006576:	18ed      	addgt	r5, r5, r3
 8006578:	42b5      	cmp	r5, r6
 800657a:	d11a      	bne.n	80065b2 <_printf_common+0xd2>
 800657c:	2000      	movs	r0, #0
 800657e:	e008      	b.n	8006592 <_printf_common+0xb2>
 8006580:	2301      	movs	r3, #1
 8006582:	4652      	mov	r2, sl
 8006584:	4641      	mov	r1, r8
 8006586:	4638      	mov	r0, r7
 8006588:	47c8      	blx	r9
 800658a:	3001      	adds	r0, #1
 800658c:	d103      	bne.n	8006596 <_printf_common+0xb6>
 800658e:	f04f 30ff 	mov.w	r0, #4294967295
 8006592:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006596:	3501      	adds	r5, #1
 8006598:	e7c1      	b.n	800651e <_printf_common+0x3e>
 800659a:	2030      	movs	r0, #48	@ 0x30
 800659c:	18e1      	adds	r1, r4, r3
 800659e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80065a2:	1c5a      	adds	r2, r3, #1
 80065a4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80065a8:	4422      	add	r2, r4
 80065aa:	3302      	adds	r3, #2
 80065ac:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80065b0:	e7c2      	b.n	8006538 <_printf_common+0x58>
 80065b2:	2301      	movs	r3, #1
 80065b4:	4622      	mov	r2, r4
 80065b6:	4641      	mov	r1, r8
 80065b8:	4638      	mov	r0, r7
 80065ba:	47c8      	blx	r9
 80065bc:	3001      	adds	r0, #1
 80065be:	d0e6      	beq.n	800658e <_printf_common+0xae>
 80065c0:	3601      	adds	r6, #1
 80065c2:	e7d9      	b.n	8006578 <_printf_common+0x98>

080065c4 <_printf_i>:
 80065c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80065c8:	7e0f      	ldrb	r7, [r1, #24]
 80065ca:	4691      	mov	r9, r2
 80065cc:	2f78      	cmp	r7, #120	@ 0x78
 80065ce:	4680      	mov	r8, r0
 80065d0:	460c      	mov	r4, r1
 80065d2:	469a      	mov	sl, r3
 80065d4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80065d6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80065da:	d807      	bhi.n	80065ec <_printf_i+0x28>
 80065dc:	2f62      	cmp	r7, #98	@ 0x62
 80065de:	d80a      	bhi.n	80065f6 <_printf_i+0x32>
 80065e0:	2f00      	cmp	r7, #0
 80065e2:	f000 80d3 	beq.w	800678c <_printf_i+0x1c8>
 80065e6:	2f58      	cmp	r7, #88	@ 0x58
 80065e8:	f000 80ba 	beq.w	8006760 <_printf_i+0x19c>
 80065ec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80065f0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80065f4:	e03a      	b.n	800666c <_printf_i+0xa8>
 80065f6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80065fa:	2b15      	cmp	r3, #21
 80065fc:	d8f6      	bhi.n	80065ec <_printf_i+0x28>
 80065fe:	a101      	add	r1, pc, #4	@ (adr r1, 8006604 <_printf_i+0x40>)
 8006600:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006604:	0800665d 	.word	0x0800665d
 8006608:	08006671 	.word	0x08006671
 800660c:	080065ed 	.word	0x080065ed
 8006610:	080065ed 	.word	0x080065ed
 8006614:	080065ed 	.word	0x080065ed
 8006618:	080065ed 	.word	0x080065ed
 800661c:	08006671 	.word	0x08006671
 8006620:	080065ed 	.word	0x080065ed
 8006624:	080065ed 	.word	0x080065ed
 8006628:	080065ed 	.word	0x080065ed
 800662c:	080065ed 	.word	0x080065ed
 8006630:	08006773 	.word	0x08006773
 8006634:	0800669b 	.word	0x0800669b
 8006638:	0800672d 	.word	0x0800672d
 800663c:	080065ed 	.word	0x080065ed
 8006640:	080065ed 	.word	0x080065ed
 8006644:	08006795 	.word	0x08006795
 8006648:	080065ed 	.word	0x080065ed
 800664c:	0800669b 	.word	0x0800669b
 8006650:	080065ed 	.word	0x080065ed
 8006654:	080065ed 	.word	0x080065ed
 8006658:	08006735 	.word	0x08006735
 800665c:	6833      	ldr	r3, [r6, #0]
 800665e:	1d1a      	adds	r2, r3, #4
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	6032      	str	r2, [r6, #0]
 8006664:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006668:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800666c:	2301      	movs	r3, #1
 800666e:	e09e      	b.n	80067ae <_printf_i+0x1ea>
 8006670:	6833      	ldr	r3, [r6, #0]
 8006672:	6820      	ldr	r0, [r4, #0]
 8006674:	1d19      	adds	r1, r3, #4
 8006676:	6031      	str	r1, [r6, #0]
 8006678:	0606      	lsls	r6, r0, #24
 800667a:	d501      	bpl.n	8006680 <_printf_i+0xbc>
 800667c:	681d      	ldr	r5, [r3, #0]
 800667e:	e003      	b.n	8006688 <_printf_i+0xc4>
 8006680:	0645      	lsls	r5, r0, #25
 8006682:	d5fb      	bpl.n	800667c <_printf_i+0xb8>
 8006684:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006688:	2d00      	cmp	r5, #0
 800668a:	da03      	bge.n	8006694 <_printf_i+0xd0>
 800668c:	232d      	movs	r3, #45	@ 0x2d
 800668e:	426d      	negs	r5, r5
 8006690:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006694:	230a      	movs	r3, #10
 8006696:	4859      	ldr	r0, [pc, #356]	@ (80067fc <_printf_i+0x238>)
 8006698:	e011      	b.n	80066be <_printf_i+0xfa>
 800669a:	6821      	ldr	r1, [r4, #0]
 800669c:	6833      	ldr	r3, [r6, #0]
 800669e:	0608      	lsls	r0, r1, #24
 80066a0:	f853 5b04 	ldr.w	r5, [r3], #4
 80066a4:	d402      	bmi.n	80066ac <_printf_i+0xe8>
 80066a6:	0649      	lsls	r1, r1, #25
 80066a8:	bf48      	it	mi
 80066aa:	b2ad      	uxthmi	r5, r5
 80066ac:	2f6f      	cmp	r7, #111	@ 0x6f
 80066ae:	6033      	str	r3, [r6, #0]
 80066b0:	bf14      	ite	ne
 80066b2:	230a      	movne	r3, #10
 80066b4:	2308      	moveq	r3, #8
 80066b6:	4851      	ldr	r0, [pc, #324]	@ (80067fc <_printf_i+0x238>)
 80066b8:	2100      	movs	r1, #0
 80066ba:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80066be:	6866      	ldr	r6, [r4, #4]
 80066c0:	2e00      	cmp	r6, #0
 80066c2:	bfa8      	it	ge
 80066c4:	6821      	ldrge	r1, [r4, #0]
 80066c6:	60a6      	str	r6, [r4, #8]
 80066c8:	bfa4      	itt	ge
 80066ca:	f021 0104 	bicge.w	r1, r1, #4
 80066ce:	6021      	strge	r1, [r4, #0]
 80066d0:	b90d      	cbnz	r5, 80066d6 <_printf_i+0x112>
 80066d2:	2e00      	cmp	r6, #0
 80066d4:	d04b      	beq.n	800676e <_printf_i+0x1aa>
 80066d6:	4616      	mov	r6, r2
 80066d8:	fbb5 f1f3 	udiv	r1, r5, r3
 80066dc:	fb03 5711 	mls	r7, r3, r1, r5
 80066e0:	5dc7      	ldrb	r7, [r0, r7]
 80066e2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80066e6:	462f      	mov	r7, r5
 80066e8:	42bb      	cmp	r3, r7
 80066ea:	460d      	mov	r5, r1
 80066ec:	d9f4      	bls.n	80066d8 <_printf_i+0x114>
 80066ee:	2b08      	cmp	r3, #8
 80066f0:	d10b      	bne.n	800670a <_printf_i+0x146>
 80066f2:	6823      	ldr	r3, [r4, #0]
 80066f4:	07df      	lsls	r7, r3, #31
 80066f6:	d508      	bpl.n	800670a <_printf_i+0x146>
 80066f8:	6923      	ldr	r3, [r4, #16]
 80066fa:	6861      	ldr	r1, [r4, #4]
 80066fc:	4299      	cmp	r1, r3
 80066fe:	bfde      	ittt	le
 8006700:	2330      	movle	r3, #48	@ 0x30
 8006702:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006706:	f106 36ff 	addle.w	r6, r6, #4294967295
 800670a:	1b92      	subs	r2, r2, r6
 800670c:	6122      	str	r2, [r4, #16]
 800670e:	464b      	mov	r3, r9
 8006710:	4621      	mov	r1, r4
 8006712:	4640      	mov	r0, r8
 8006714:	f8cd a000 	str.w	sl, [sp]
 8006718:	aa03      	add	r2, sp, #12
 800671a:	f7ff fee1 	bl	80064e0 <_printf_common>
 800671e:	3001      	adds	r0, #1
 8006720:	d14a      	bne.n	80067b8 <_printf_i+0x1f4>
 8006722:	f04f 30ff 	mov.w	r0, #4294967295
 8006726:	b004      	add	sp, #16
 8006728:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800672c:	6823      	ldr	r3, [r4, #0]
 800672e:	f043 0320 	orr.w	r3, r3, #32
 8006732:	6023      	str	r3, [r4, #0]
 8006734:	2778      	movs	r7, #120	@ 0x78
 8006736:	4832      	ldr	r0, [pc, #200]	@ (8006800 <_printf_i+0x23c>)
 8006738:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800673c:	6823      	ldr	r3, [r4, #0]
 800673e:	6831      	ldr	r1, [r6, #0]
 8006740:	061f      	lsls	r7, r3, #24
 8006742:	f851 5b04 	ldr.w	r5, [r1], #4
 8006746:	d402      	bmi.n	800674e <_printf_i+0x18a>
 8006748:	065f      	lsls	r7, r3, #25
 800674a:	bf48      	it	mi
 800674c:	b2ad      	uxthmi	r5, r5
 800674e:	6031      	str	r1, [r6, #0]
 8006750:	07d9      	lsls	r1, r3, #31
 8006752:	bf44      	itt	mi
 8006754:	f043 0320 	orrmi.w	r3, r3, #32
 8006758:	6023      	strmi	r3, [r4, #0]
 800675a:	b11d      	cbz	r5, 8006764 <_printf_i+0x1a0>
 800675c:	2310      	movs	r3, #16
 800675e:	e7ab      	b.n	80066b8 <_printf_i+0xf4>
 8006760:	4826      	ldr	r0, [pc, #152]	@ (80067fc <_printf_i+0x238>)
 8006762:	e7e9      	b.n	8006738 <_printf_i+0x174>
 8006764:	6823      	ldr	r3, [r4, #0]
 8006766:	f023 0320 	bic.w	r3, r3, #32
 800676a:	6023      	str	r3, [r4, #0]
 800676c:	e7f6      	b.n	800675c <_printf_i+0x198>
 800676e:	4616      	mov	r6, r2
 8006770:	e7bd      	b.n	80066ee <_printf_i+0x12a>
 8006772:	6833      	ldr	r3, [r6, #0]
 8006774:	6825      	ldr	r5, [r4, #0]
 8006776:	1d18      	adds	r0, r3, #4
 8006778:	6961      	ldr	r1, [r4, #20]
 800677a:	6030      	str	r0, [r6, #0]
 800677c:	062e      	lsls	r6, r5, #24
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	d501      	bpl.n	8006786 <_printf_i+0x1c2>
 8006782:	6019      	str	r1, [r3, #0]
 8006784:	e002      	b.n	800678c <_printf_i+0x1c8>
 8006786:	0668      	lsls	r0, r5, #25
 8006788:	d5fb      	bpl.n	8006782 <_printf_i+0x1be>
 800678a:	8019      	strh	r1, [r3, #0]
 800678c:	2300      	movs	r3, #0
 800678e:	4616      	mov	r6, r2
 8006790:	6123      	str	r3, [r4, #16]
 8006792:	e7bc      	b.n	800670e <_printf_i+0x14a>
 8006794:	6833      	ldr	r3, [r6, #0]
 8006796:	2100      	movs	r1, #0
 8006798:	1d1a      	adds	r2, r3, #4
 800679a:	6032      	str	r2, [r6, #0]
 800679c:	681e      	ldr	r6, [r3, #0]
 800679e:	6862      	ldr	r2, [r4, #4]
 80067a0:	4630      	mov	r0, r6
 80067a2:	f000 f99f 	bl	8006ae4 <memchr>
 80067a6:	b108      	cbz	r0, 80067ac <_printf_i+0x1e8>
 80067a8:	1b80      	subs	r0, r0, r6
 80067aa:	6060      	str	r0, [r4, #4]
 80067ac:	6863      	ldr	r3, [r4, #4]
 80067ae:	6123      	str	r3, [r4, #16]
 80067b0:	2300      	movs	r3, #0
 80067b2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80067b6:	e7aa      	b.n	800670e <_printf_i+0x14a>
 80067b8:	4632      	mov	r2, r6
 80067ba:	4649      	mov	r1, r9
 80067bc:	4640      	mov	r0, r8
 80067be:	6923      	ldr	r3, [r4, #16]
 80067c0:	47d0      	blx	sl
 80067c2:	3001      	adds	r0, #1
 80067c4:	d0ad      	beq.n	8006722 <_printf_i+0x15e>
 80067c6:	6823      	ldr	r3, [r4, #0]
 80067c8:	079b      	lsls	r3, r3, #30
 80067ca:	d413      	bmi.n	80067f4 <_printf_i+0x230>
 80067cc:	68e0      	ldr	r0, [r4, #12]
 80067ce:	9b03      	ldr	r3, [sp, #12]
 80067d0:	4298      	cmp	r0, r3
 80067d2:	bfb8      	it	lt
 80067d4:	4618      	movlt	r0, r3
 80067d6:	e7a6      	b.n	8006726 <_printf_i+0x162>
 80067d8:	2301      	movs	r3, #1
 80067da:	4632      	mov	r2, r6
 80067dc:	4649      	mov	r1, r9
 80067de:	4640      	mov	r0, r8
 80067e0:	47d0      	blx	sl
 80067e2:	3001      	adds	r0, #1
 80067e4:	d09d      	beq.n	8006722 <_printf_i+0x15e>
 80067e6:	3501      	adds	r5, #1
 80067e8:	68e3      	ldr	r3, [r4, #12]
 80067ea:	9903      	ldr	r1, [sp, #12]
 80067ec:	1a5b      	subs	r3, r3, r1
 80067ee:	42ab      	cmp	r3, r5
 80067f0:	dcf2      	bgt.n	80067d8 <_printf_i+0x214>
 80067f2:	e7eb      	b.n	80067cc <_printf_i+0x208>
 80067f4:	2500      	movs	r5, #0
 80067f6:	f104 0619 	add.w	r6, r4, #25
 80067fa:	e7f5      	b.n	80067e8 <_printf_i+0x224>
 80067fc:	08006d97 	.word	0x08006d97
 8006800:	08006da8 	.word	0x08006da8

08006804 <__sflush_r>:
 8006804:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800680a:	0716      	lsls	r6, r2, #28
 800680c:	4605      	mov	r5, r0
 800680e:	460c      	mov	r4, r1
 8006810:	d454      	bmi.n	80068bc <__sflush_r+0xb8>
 8006812:	684b      	ldr	r3, [r1, #4]
 8006814:	2b00      	cmp	r3, #0
 8006816:	dc02      	bgt.n	800681e <__sflush_r+0x1a>
 8006818:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800681a:	2b00      	cmp	r3, #0
 800681c:	dd48      	ble.n	80068b0 <__sflush_r+0xac>
 800681e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006820:	2e00      	cmp	r6, #0
 8006822:	d045      	beq.n	80068b0 <__sflush_r+0xac>
 8006824:	2300      	movs	r3, #0
 8006826:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800682a:	682f      	ldr	r7, [r5, #0]
 800682c:	6a21      	ldr	r1, [r4, #32]
 800682e:	602b      	str	r3, [r5, #0]
 8006830:	d030      	beq.n	8006894 <__sflush_r+0x90>
 8006832:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006834:	89a3      	ldrh	r3, [r4, #12]
 8006836:	0759      	lsls	r1, r3, #29
 8006838:	d505      	bpl.n	8006846 <__sflush_r+0x42>
 800683a:	6863      	ldr	r3, [r4, #4]
 800683c:	1ad2      	subs	r2, r2, r3
 800683e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006840:	b10b      	cbz	r3, 8006846 <__sflush_r+0x42>
 8006842:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006844:	1ad2      	subs	r2, r2, r3
 8006846:	2300      	movs	r3, #0
 8006848:	4628      	mov	r0, r5
 800684a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800684c:	6a21      	ldr	r1, [r4, #32]
 800684e:	47b0      	blx	r6
 8006850:	1c43      	adds	r3, r0, #1
 8006852:	89a3      	ldrh	r3, [r4, #12]
 8006854:	d106      	bne.n	8006864 <__sflush_r+0x60>
 8006856:	6829      	ldr	r1, [r5, #0]
 8006858:	291d      	cmp	r1, #29
 800685a:	d82b      	bhi.n	80068b4 <__sflush_r+0xb0>
 800685c:	4a28      	ldr	r2, [pc, #160]	@ (8006900 <__sflush_r+0xfc>)
 800685e:	410a      	asrs	r2, r1
 8006860:	07d6      	lsls	r6, r2, #31
 8006862:	d427      	bmi.n	80068b4 <__sflush_r+0xb0>
 8006864:	2200      	movs	r2, #0
 8006866:	6062      	str	r2, [r4, #4]
 8006868:	6922      	ldr	r2, [r4, #16]
 800686a:	04d9      	lsls	r1, r3, #19
 800686c:	6022      	str	r2, [r4, #0]
 800686e:	d504      	bpl.n	800687a <__sflush_r+0x76>
 8006870:	1c42      	adds	r2, r0, #1
 8006872:	d101      	bne.n	8006878 <__sflush_r+0x74>
 8006874:	682b      	ldr	r3, [r5, #0]
 8006876:	b903      	cbnz	r3, 800687a <__sflush_r+0x76>
 8006878:	6560      	str	r0, [r4, #84]	@ 0x54
 800687a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800687c:	602f      	str	r7, [r5, #0]
 800687e:	b1b9      	cbz	r1, 80068b0 <__sflush_r+0xac>
 8006880:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006884:	4299      	cmp	r1, r3
 8006886:	d002      	beq.n	800688e <__sflush_r+0x8a>
 8006888:	4628      	mov	r0, r5
 800688a:	f7ff fbf3 	bl	8006074 <_free_r>
 800688e:	2300      	movs	r3, #0
 8006890:	6363      	str	r3, [r4, #52]	@ 0x34
 8006892:	e00d      	b.n	80068b0 <__sflush_r+0xac>
 8006894:	2301      	movs	r3, #1
 8006896:	4628      	mov	r0, r5
 8006898:	47b0      	blx	r6
 800689a:	4602      	mov	r2, r0
 800689c:	1c50      	adds	r0, r2, #1
 800689e:	d1c9      	bne.n	8006834 <__sflush_r+0x30>
 80068a0:	682b      	ldr	r3, [r5, #0]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d0c6      	beq.n	8006834 <__sflush_r+0x30>
 80068a6:	2b1d      	cmp	r3, #29
 80068a8:	d001      	beq.n	80068ae <__sflush_r+0xaa>
 80068aa:	2b16      	cmp	r3, #22
 80068ac:	d11d      	bne.n	80068ea <__sflush_r+0xe6>
 80068ae:	602f      	str	r7, [r5, #0]
 80068b0:	2000      	movs	r0, #0
 80068b2:	e021      	b.n	80068f8 <__sflush_r+0xf4>
 80068b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80068b8:	b21b      	sxth	r3, r3
 80068ba:	e01a      	b.n	80068f2 <__sflush_r+0xee>
 80068bc:	690f      	ldr	r7, [r1, #16]
 80068be:	2f00      	cmp	r7, #0
 80068c0:	d0f6      	beq.n	80068b0 <__sflush_r+0xac>
 80068c2:	0793      	lsls	r3, r2, #30
 80068c4:	bf18      	it	ne
 80068c6:	2300      	movne	r3, #0
 80068c8:	680e      	ldr	r6, [r1, #0]
 80068ca:	bf08      	it	eq
 80068cc:	694b      	ldreq	r3, [r1, #20]
 80068ce:	1bf6      	subs	r6, r6, r7
 80068d0:	600f      	str	r7, [r1, #0]
 80068d2:	608b      	str	r3, [r1, #8]
 80068d4:	2e00      	cmp	r6, #0
 80068d6:	ddeb      	ble.n	80068b0 <__sflush_r+0xac>
 80068d8:	4633      	mov	r3, r6
 80068da:	463a      	mov	r2, r7
 80068dc:	4628      	mov	r0, r5
 80068de:	6a21      	ldr	r1, [r4, #32]
 80068e0:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 80068e4:	47e0      	blx	ip
 80068e6:	2800      	cmp	r0, #0
 80068e8:	dc07      	bgt.n	80068fa <__sflush_r+0xf6>
 80068ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80068ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80068f2:	f04f 30ff 	mov.w	r0, #4294967295
 80068f6:	81a3      	strh	r3, [r4, #12]
 80068f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80068fa:	4407      	add	r7, r0
 80068fc:	1a36      	subs	r6, r6, r0
 80068fe:	e7e9      	b.n	80068d4 <__sflush_r+0xd0>
 8006900:	dfbffffe 	.word	0xdfbffffe

08006904 <_fflush_r>:
 8006904:	b538      	push	{r3, r4, r5, lr}
 8006906:	690b      	ldr	r3, [r1, #16]
 8006908:	4605      	mov	r5, r0
 800690a:	460c      	mov	r4, r1
 800690c:	b913      	cbnz	r3, 8006914 <_fflush_r+0x10>
 800690e:	2500      	movs	r5, #0
 8006910:	4628      	mov	r0, r5
 8006912:	bd38      	pop	{r3, r4, r5, pc}
 8006914:	b118      	cbz	r0, 800691e <_fflush_r+0x1a>
 8006916:	6a03      	ldr	r3, [r0, #32]
 8006918:	b90b      	cbnz	r3, 800691e <_fflush_r+0x1a>
 800691a:	f7ff f999 	bl	8005c50 <__sinit>
 800691e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006922:	2b00      	cmp	r3, #0
 8006924:	d0f3      	beq.n	800690e <_fflush_r+0xa>
 8006926:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006928:	07d0      	lsls	r0, r2, #31
 800692a:	d404      	bmi.n	8006936 <_fflush_r+0x32>
 800692c:	0599      	lsls	r1, r3, #22
 800692e:	d402      	bmi.n	8006936 <_fflush_r+0x32>
 8006930:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006932:	f7ff fb9c 	bl	800606e <__retarget_lock_acquire_recursive>
 8006936:	4628      	mov	r0, r5
 8006938:	4621      	mov	r1, r4
 800693a:	f7ff ff63 	bl	8006804 <__sflush_r>
 800693e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006940:	4605      	mov	r5, r0
 8006942:	07da      	lsls	r2, r3, #31
 8006944:	d4e4      	bmi.n	8006910 <_fflush_r+0xc>
 8006946:	89a3      	ldrh	r3, [r4, #12]
 8006948:	059b      	lsls	r3, r3, #22
 800694a:	d4e1      	bmi.n	8006910 <_fflush_r+0xc>
 800694c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800694e:	f7ff fb8f 	bl	8006070 <__retarget_lock_release_recursive>
 8006952:	e7dd      	b.n	8006910 <_fflush_r+0xc>

08006954 <__swhatbuf_r>:
 8006954:	b570      	push	{r4, r5, r6, lr}
 8006956:	460c      	mov	r4, r1
 8006958:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800695c:	4615      	mov	r5, r2
 800695e:	2900      	cmp	r1, #0
 8006960:	461e      	mov	r6, r3
 8006962:	b096      	sub	sp, #88	@ 0x58
 8006964:	da0c      	bge.n	8006980 <__swhatbuf_r+0x2c>
 8006966:	89a3      	ldrh	r3, [r4, #12]
 8006968:	2100      	movs	r1, #0
 800696a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800696e:	bf14      	ite	ne
 8006970:	2340      	movne	r3, #64	@ 0x40
 8006972:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006976:	2000      	movs	r0, #0
 8006978:	6031      	str	r1, [r6, #0]
 800697a:	602b      	str	r3, [r5, #0]
 800697c:	b016      	add	sp, #88	@ 0x58
 800697e:	bd70      	pop	{r4, r5, r6, pc}
 8006980:	466a      	mov	r2, sp
 8006982:	f000 f87d 	bl	8006a80 <_fstat_r>
 8006986:	2800      	cmp	r0, #0
 8006988:	dbed      	blt.n	8006966 <__swhatbuf_r+0x12>
 800698a:	9901      	ldr	r1, [sp, #4]
 800698c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006990:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006994:	4259      	negs	r1, r3
 8006996:	4159      	adcs	r1, r3
 8006998:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800699c:	e7eb      	b.n	8006976 <__swhatbuf_r+0x22>

0800699e <__smakebuf_r>:
 800699e:	898b      	ldrh	r3, [r1, #12]
 80069a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80069a2:	079d      	lsls	r5, r3, #30
 80069a4:	4606      	mov	r6, r0
 80069a6:	460c      	mov	r4, r1
 80069a8:	d507      	bpl.n	80069ba <__smakebuf_r+0x1c>
 80069aa:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80069ae:	6023      	str	r3, [r4, #0]
 80069b0:	6123      	str	r3, [r4, #16]
 80069b2:	2301      	movs	r3, #1
 80069b4:	6163      	str	r3, [r4, #20]
 80069b6:	b003      	add	sp, #12
 80069b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80069ba:	466a      	mov	r2, sp
 80069bc:	ab01      	add	r3, sp, #4
 80069be:	f7ff ffc9 	bl	8006954 <__swhatbuf_r>
 80069c2:	9f00      	ldr	r7, [sp, #0]
 80069c4:	4605      	mov	r5, r0
 80069c6:	4639      	mov	r1, r7
 80069c8:	4630      	mov	r0, r6
 80069ca:	f7ff fbbd 	bl	8006148 <_malloc_r>
 80069ce:	b948      	cbnz	r0, 80069e4 <__smakebuf_r+0x46>
 80069d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80069d4:	059a      	lsls	r2, r3, #22
 80069d6:	d4ee      	bmi.n	80069b6 <__smakebuf_r+0x18>
 80069d8:	f023 0303 	bic.w	r3, r3, #3
 80069dc:	f043 0302 	orr.w	r3, r3, #2
 80069e0:	81a3      	strh	r3, [r4, #12]
 80069e2:	e7e2      	b.n	80069aa <__smakebuf_r+0xc>
 80069e4:	89a3      	ldrh	r3, [r4, #12]
 80069e6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80069ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80069ee:	81a3      	strh	r3, [r4, #12]
 80069f0:	9b01      	ldr	r3, [sp, #4]
 80069f2:	6020      	str	r0, [r4, #0]
 80069f4:	b15b      	cbz	r3, 8006a0e <__smakebuf_r+0x70>
 80069f6:	4630      	mov	r0, r6
 80069f8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80069fc:	f000 f852 	bl	8006aa4 <_isatty_r>
 8006a00:	b128      	cbz	r0, 8006a0e <__smakebuf_r+0x70>
 8006a02:	89a3      	ldrh	r3, [r4, #12]
 8006a04:	f023 0303 	bic.w	r3, r3, #3
 8006a08:	f043 0301 	orr.w	r3, r3, #1
 8006a0c:	81a3      	strh	r3, [r4, #12]
 8006a0e:	89a3      	ldrh	r3, [r4, #12]
 8006a10:	431d      	orrs	r5, r3
 8006a12:	81a5      	strh	r5, [r4, #12]
 8006a14:	e7cf      	b.n	80069b6 <__smakebuf_r+0x18>

08006a16 <_putc_r>:
 8006a16:	b570      	push	{r4, r5, r6, lr}
 8006a18:	460d      	mov	r5, r1
 8006a1a:	4614      	mov	r4, r2
 8006a1c:	4606      	mov	r6, r0
 8006a1e:	b118      	cbz	r0, 8006a28 <_putc_r+0x12>
 8006a20:	6a03      	ldr	r3, [r0, #32]
 8006a22:	b90b      	cbnz	r3, 8006a28 <_putc_r+0x12>
 8006a24:	f7ff f914 	bl	8005c50 <__sinit>
 8006a28:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006a2a:	07d8      	lsls	r0, r3, #31
 8006a2c:	d405      	bmi.n	8006a3a <_putc_r+0x24>
 8006a2e:	89a3      	ldrh	r3, [r4, #12]
 8006a30:	0599      	lsls	r1, r3, #22
 8006a32:	d402      	bmi.n	8006a3a <_putc_r+0x24>
 8006a34:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006a36:	f7ff fb1a 	bl	800606e <__retarget_lock_acquire_recursive>
 8006a3a:	68a3      	ldr	r3, [r4, #8]
 8006a3c:	3b01      	subs	r3, #1
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	60a3      	str	r3, [r4, #8]
 8006a42:	da05      	bge.n	8006a50 <_putc_r+0x3a>
 8006a44:	69a2      	ldr	r2, [r4, #24]
 8006a46:	4293      	cmp	r3, r2
 8006a48:	db12      	blt.n	8006a70 <_putc_r+0x5a>
 8006a4a:	b2eb      	uxtb	r3, r5
 8006a4c:	2b0a      	cmp	r3, #10
 8006a4e:	d00f      	beq.n	8006a70 <_putc_r+0x5a>
 8006a50:	6823      	ldr	r3, [r4, #0]
 8006a52:	1c5a      	adds	r2, r3, #1
 8006a54:	6022      	str	r2, [r4, #0]
 8006a56:	701d      	strb	r5, [r3, #0]
 8006a58:	b2ed      	uxtb	r5, r5
 8006a5a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006a5c:	07da      	lsls	r2, r3, #31
 8006a5e:	d405      	bmi.n	8006a6c <_putc_r+0x56>
 8006a60:	89a3      	ldrh	r3, [r4, #12]
 8006a62:	059b      	lsls	r3, r3, #22
 8006a64:	d402      	bmi.n	8006a6c <_putc_r+0x56>
 8006a66:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006a68:	f7ff fb02 	bl	8006070 <__retarget_lock_release_recursive>
 8006a6c:	4628      	mov	r0, r5
 8006a6e:	bd70      	pop	{r4, r5, r6, pc}
 8006a70:	4629      	mov	r1, r5
 8006a72:	4622      	mov	r2, r4
 8006a74:	4630      	mov	r0, r6
 8006a76:	f7ff f9dc 	bl	8005e32 <__swbuf_r>
 8006a7a:	4605      	mov	r5, r0
 8006a7c:	e7ed      	b.n	8006a5a <_putc_r+0x44>
	...

08006a80 <_fstat_r>:
 8006a80:	b538      	push	{r3, r4, r5, lr}
 8006a82:	2300      	movs	r3, #0
 8006a84:	4d06      	ldr	r5, [pc, #24]	@ (8006aa0 <_fstat_r+0x20>)
 8006a86:	4604      	mov	r4, r0
 8006a88:	4608      	mov	r0, r1
 8006a8a:	4611      	mov	r1, r2
 8006a8c:	602b      	str	r3, [r5, #0]
 8006a8e:	f7fa f8f7 	bl	8000c80 <_fstat>
 8006a92:	1c43      	adds	r3, r0, #1
 8006a94:	d102      	bne.n	8006a9c <_fstat_r+0x1c>
 8006a96:	682b      	ldr	r3, [r5, #0]
 8006a98:	b103      	cbz	r3, 8006a9c <_fstat_r+0x1c>
 8006a9a:	6023      	str	r3, [r4, #0]
 8006a9c:	bd38      	pop	{r3, r4, r5, pc}
 8006a9e:	bf00      	nop
 8006aa0:	2000044c 	.word	0x2000044c

08006aa4 <_isatty_r>:
 8006aa4:	b538      	push	{r3, r4, r5, lr}
 8006aa6:	2300      	movs	r3, #0
 8006aa8:	4d05      	ldr	r5, [pc, #20]	@ (8006ac0 <_isatty_r+0x1c>)
 8006aaa:	4604      	mov	r4, r0
 8006aac:	4608      	mov	r0, r1
 8006aae:	602b      	str	r3, [r5, #0]
 8006ab0:	f7fa f8f5 	bl	8000c9e <_isatty>
 8006ab4:	1c43      	adds	r3, r0, #1
 8006ab6:	d102      	bne.n	8006abe <_isatty_r+0x1a>
 8006ab8:	682b      	ldr	r3, [r5, #0]
 8006aba:	b103      	cbz	r3, 8006abe <_isatty_r+0x1a>
 8006abc:	6023      	str	r3, [r4, #0]
 8006abe:	bd38      	pop	{r3, r4, r5, pc}
 8006ac0:	2000044c 	.word	0x2000044c

08006ac4 <_sbrk_r>:
 8006ac4:	b538      	push	{r3, r4, r5, lr}
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	4d05      	ldr	r5, [pc, #20]	@ (8006ae0 <_sbrk_r+0x1c>)
 8006aca:	4604      	mov	r4, r0
 8006acc:	4608      	mov	r0, r1
 8006ace:	602b      	str	r3, [r5, #0]
 8006ad0:	f7fa f8fc 	bl	8000ccc <_sbrk>
 8006ad4:	1c43      	adds	r3, r0, #1
 8006ad6:	d102      	bne.n	8006ade <_sbrk_r+0x1a>
 8006ad8:	682b      	ldr	r3, [r5, #0]
 8006ada:	b103      	cbz	r3, 8006ade <_sbrk_r+0x1a>
 8006adc:	6023      	str	r3, [r4, #0]
 8006ade:	bd38      	pop	{r3, r4, r5, pc}
 8006ae0:	2000044c 	.word	0x2000044c

08006ae4 <memchr>:
 8006ae4:	4603      	mov	r3, r0
 8006ae6:	b510      	push	{r4, lr}
 8006ae8:	b2c9      	uxtb	r1, r1
 8006aea:	4402      	add	r2, r0
 8006aec:	4293      	cmp	r3, r2
 8006aee:	4618      	mov	r0, r3
 8006af0:	d101      	bne.n	8006af6 <memchr+0x12>
 8006af2:	2000      	movs	r0, #0
 8006af4:	e003      	b.n	8006afe <memchr+0x1a>
 8006af6:	7804      	ldrb	r4, [r0, #0]
 8006af8:	3301      	adds	r3, #1
 8006afa:	428c      	cmp	r4, r1
 8006afc:	d1f6      	bne.n	8006aec <memchr+0x8>
 8006afe:	bd10      	pop	{r4, pc}

08006b00 <_init>:
 8006b00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b02:	bf00      	nop
 8006b04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b06:	bc08      	pop	{r3}
 8006b08:	469e      	mov	lr, r3
 8006b0a:	4770      	bx	lr

08006b0c <_fini>:
 8006b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b0e:	bf00      	nop
 8006b10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b12:	bc08      	pop	{r3}
 8006b14:	469e      	mov	lr, r3
 8006b16:	4770      	bx	lr
