
18-I2C-OLED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004928  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f4  08004a34  08004a34  00005a34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004b28  08004b28  000060a8  2**0
                  CONTENTS
  4 .ARM          00000000  08004b28  08004b28  000060a8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004b28  08004b28  000060a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004b28  08004b28  00005b28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004b2c  08004b2c  00005b2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000a8  20000000  08004b30  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000358  200000a8  08004bd8  000060a8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000400  08004bd8  00006400  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000060a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ba22  00000000  00000000  000060d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002333  00000000  00000000  00011af3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b48  00000000  00000000  00013e28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008b0  00000000  00000000  00014970  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018d59  00000000  00000000  00015220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000108fa  00000000  00000000  0002df79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000865eb  00000000  00000000  0003e873  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c4e5e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000034e8  00000000  00000000  000c4ea4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004a  00000000  00000000  000c838c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000a8 	.word	0x200000a8
 8000128:	00000000 	.word	0x00000000
 800012c:	08004a1c 	.word	0x08004a1c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000ac 	.word	0x200000ac
 8000148:	08004a1c 	.word	0x08004a1c

0800014c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000152:	4b0c      	ldr	r3, [pc, #48]	@ (8000184 <MX_DMA_Init+0x38>)
 8000154:	695b      	ldr	r3, [r3, #20]
 8000156:	4a0b      	ldr	r2, [pc, #44]	@ (8000184 <MX_DMA_Init+0x38>)
 8000158:	f043 0301 	orr.w	r3, r3, #1
 800015c:	6153      	str	r3, [r2, #20]
 800015e:	4b09      	ldr	r3, [pc, #36]	@ (8000184 <MX_DMA_Init+0x38>)
 8000160:	695b      	ldr	r3, [r3, #20]
 8000162:	f003 0301 	and.w	r3, r3, #1
 8000166:	607b      	str	r3, [r7, #4]
 8000168:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800016a:	2200      	movs	r2, #0
 800016c:	2100      	movs	r1, #0
 800016e:	200f      	movs	r0, #15
 8000170:	f000 ff47 	bl	8001002 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000174:	200f      	movs	r0, #15
 8000176:	f000 ff60 	bl	800103a <HAL_NVIC_EnableIRQ>

}
 800017a:	bf00      	nop
 800017c:	3708      	adds	r7, #8
 800017e:	46bd      	mov	sp, r7
 8000180:	bd80      	pop	{r7, pc}
 8000182:	bf00      	nop
 8000184:	40021000 	.word	0x40021000

08000188 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000188:	b580      	push	{r7, lr}
 800018a:	b086      	sub	sp, #24
 800018c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800018e:	f107 0308 	add.w	r3, r7, #8
 8000192:	2200      	movs	r2, #0
 8000194:	601a      	str	r2, [r3, #0]
 8000196:	605a      	str	r2, [r3, #4]
 8000198:	609a      	str	r2, [r3, #8]
 800019a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800019c:	4b2b      	ldr	r3, [pc, #172]	@ (800024c <MX_GPIO_Init+0xc4>)
 800019e:	699b      	ldr	r3, [r3, #24]
 80001a0:	4a2a      	ldr	r2, [pc, #168]	@ (800024c <MX_GPIO_Init+0xc4>)
 80001a2:	f043 0304 	orr.w	r3, r3, #4
 80001a6:	6193      	str	r3, [r2, #24]
 80001a8:	4b28      	ldr	r3, [pc, #160]	@ (800024c <MX_GPIO_Init+0xc4>)
 80001aa:	699b      	ldr	r3, [r3, #24]
 80001ac:	f003 0304 	and.w	r3, r3, #4
 80001b0:	607b      	str	r3, [r7, #4]
 80001b2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80001b4:	4b25      	ldr	r3, [pc, #148]	@ (800024c <MX_GPIO_Init+0xc4>)
 80001b6:	699b      	ldr	r3, [r3, #24]
 80001b8:	4a24      	ldr	r2, [pc, #144]	@ (800024c <MX_GPIO_Init+0xc4>)
 80001ba:	f043 0308 	orr.w	r3, r3, #8
 80001be:	6193      	str	r3, [r2, #24]
 80001c0:	4b22      	ldr	r3, [pc, #136]	@ (800024c <MX_GPIO_Init+0xc4>)
 80001c2:	699b      	ldr	r3, [r3, #24]
 80001c4:	f003 0308 	and.w	r3, r3, #8
 80001c8:	603b      	str	r3, [r7, #0]
 80001ca:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 80001cc:	2200      	movs	r2, #0
 80001ce:	2106      	movs	r1, #6
 80001d0:	481f      	ldr	r0, [pc, #124]	@ (8000250 <MX_GPIO_Init+0xc8>)
 80001d2:	f001 fb73 	bl	80018bc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA1 PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 80001d6:	2306      	movs	r3, #6
 80001d8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80001da:	2301      	movs	r3, #1
 80001dc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001de:	2300      	movs	r3, #0
 80001e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80001e2:	2302      	movs	r3, #2
 80001e4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80001e6:	f107 0308 	add.w	r3, r7, #8
 80001ea:	4619      	mov	r1, r3
 80001ec:	4818      	ldr	r0, [pc, #96]	@ (8000250 <MX_GPIO_Init+0xc8>)
 80001ee:	f001 f9e1 	bl	80015b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80001f2:	2320      	movs	r3, #32
 80001f4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80001f6:	4b17      	ldr	r3, [pc, #92]	@ (8000254 <MX_GPIO_Init+0xcc>)
 80001f8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80001fa:	2301      	movs	r3, #1
 80001fc:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80001fe:	f107 0308 	add.w	r3, r7, #8
 8000202:	4619      	mov	r1, r3
 8000204:	4812      	ldr	r0, [pc, #72]	@ (8000250 <MX_GPIO_Init+0xc8>)
 8000206:	f001 f9d5 	bl	80015b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800020a:	2301      	movs	r3, #1
 800020c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800020e:	4b11      	ldr	r3, [pc, #68]	@ (8000254 <MX_GPIO_Init+0xcc>)
 8000210:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000212:	2301      	movs	r3, #1
 8000214:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000216:	f107 0308 	add.w	r3, r7, #8
 800021a:	4619      	mov	r1, r3
 800021c:	480e      	ldr	r0, [pc, #56]	@ (8000258 <MX_GPIO_Init+0xd0>)
 800021e:	f001 f9c9 	bl	80015b4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000222:	2200      	movs	r2, #0
 8000224:	2100      	movs	r1, #0
 8000226:	2006      	movs	r0, #6
 8000228:	f000 feeb 	bl	8001002 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800022c:	2006      	movs	r0, #6
 800022e:	f000 ff04 	bl	800103a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000232:	2200      	movs	r2, #0
 8000234:	2100      	movs	r1, #0
 8000236:	2017      	movs	r0, #23
 8000238:	f000 fee3 	bl	8001002 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800023c:	2017      	movs	r0, #23
 800023e:	f000 fefc 	bl	800103a <HAL_NVIC_EnableIRQ>

}
 8000242:	bf00      	nop
 8000244:	3718      	adds	r7, #24
 8000246:	46bd      	mov	sp, r7
 8000248:	bd80      	pop	{r7, pc}
 800024a:	bf00      	nop
 800024c:	40021000 	.word	0x40021000
 8000250:	40010800 	.word	0x40010800
 8000254:	10210000 	.word	0x10210000
 8000258:	40010c00 	.word	0x40010c00

0800025c <LED_Control>:

/* USER CODE BEGIN 2 */
void LED_Control(uint8_t device, uint8_t cmd)
{
 800025c:	b580      	push	{r7, lr}
 800025e:	b082      	sub	sp, #8
 8000260:	af00      	add	r7, sp, #0
 8000262:	4603      	mov	r3, r0
 8000264:	460a      	mov	r2, r1
 8000266:	71fb      	strb	r3, [r7, #7]
 8000268:	4613      	mov	r3, r2
 800026a:	71bb      	strb	r3, [r7, #6]
	if (device == LED1)
 800026c:	79fb      	ldrb	r3, [r7, #7]
 800026e:	2b01      	cmp	r3, #1
 8000270:	d111      	bne.n	8000296 <LED_Control+0x3a>
	{
		if (cmd == ON)
 8000272:	79bb      	ldrb	r3, [r7, #6]
 8000274:	2b01      	cmp	r3, #1
 8000276:	d105      	bne.n	8000284 <LED_Control+0x28>
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 8000278:	2201      	movs	r2, #1
 800027a:	2102      	movs	r1, #2
 800027c:	4812      	ldr	r0, [pc, #72]	@ (80002c8 <LED_Control+0x6c>)
 800027e:	f001 fb1d 	bl	80018bc <HAL_GPIO_WritePin>
		else if (cmd == OFF)
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
		}
	}
}
 8000282:	e01c      	b.n	80002be <LED_Control+0x62>
		else if (cmd == OFF)
 8000284:	79bb      	ldrb	r3, [r7, #6]
 8000286:	2b00      	cmp	r3, #0
 8000288:	d119      	bne.n	80002be <LED_Control+0x62>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 800028a:	2200      	movs	r2, #0
 800028c:	2102      	movs	r1, #2
 800028e:	480e      	ldr	r0, [pc, #56]	@ (80002c8 <LED_Control+0x6c>)
 8000290:	f001 fb14 	bl	80018bc <HAL_GPIO_WritePin>
}
 8000294:	e013      	b.n	80002be <LED_Control+0x62>
	else if (device == LED2)
 8000296:	79fb      	ldrb	r3, [r7, #7]
 8000298:	2b02      	cmp	r3, #2
 800029a:	d110      	bne.n	80002be <LED_Control+0x62>
		if (cmd == ON)
 800029c:	79bb      	ldrb	r3, [r7, #6]
 800029e:	2b01      	cmp	r3, #1
 80002a0:	d105      	bne.n	80002ae <LED_Control+0x52>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 80002a2:	2201      	movs	r2, #1
 80002a4:	2104      	movs	r1, #4
 80002a6:	4808      	ldr	r0, [pc, #32]	@ (80002c8 <LED_Control+0x6c>)
 80002a8:	f001 fb08 	bl	80018bc <HAL_GPIO_WritePin>
}
 80002ac:	e007      	b.n	80002be <LED_Control+0x62>
		else if (cmd == OFF)
 80002ae:	79bb      	ldrb	r3, [r7, #6]
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	d104      	bne.n	80002be <LED_Control+0x62>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 80002b4:	2200      	movs	r2, #0
 80002b6:	2104      	movs	r1, #4
 80002b8:	4803      	ldr	r0, [pc, #12]	@ (80002c8 <LED_Control+0x6c>)
 80002ba:	f001 faff 	bl	80018bc <HAL_GPIO_WritePin>
}
 80002be:	bf00      	nop
 80002c0:	3708      	adds	r7, #8
 80002c2:	46bd      	mov	sp, r7
 80002c4:	bd80      	pop	{r7, pc}
 80002c6:	bf00      	nop
 80002c8:	40010800 	.word	0x40010800

080002cc <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80002d0:	4b12      	ldr	r3, [pc, #72]	@ (800031c <MX_I2C1_Init+0x50>)
 80002d2:	4a13      	ldr	r2, [pc, #76]	@ (8000320 <MX_I2C1_Init+0x54>)
 80002d4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80002d6:	4b11      	ldr	r3, [pc, #68]	@ (800031c <MX_I2C1_Init+0x50>)
 80002d8:	4a12      	ldr	r2, [pc, #72]	@ (8000324 <MX_I2C1_Init+0x58>)
 80002da:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80002dc:	4b0f      	ldr	r3, [pc, #60]	@ (800031c <MX_I2C1_Init+0x50>)
 80002de:	2200      	movs	r2, #0
 80002e0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80002e2:	4b0e      	ldr	r3, [pc, #56]	@ (800031c <MX_I2C1_Init+0x50>)
 80002e4:	2200      	movs	r2, #0
 80002e6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80002e8:	4b0c      	ldr	r3, [pc, #48]	@ (800031c <MX_I2C1_Init+0x50>)
 80002ea:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80002ee:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80002f0:	4b0a      	ldr	r3, [pc, #40]	@ (800031c <MX_I2C1_Init+0x50>)
 80002f2:	2200      	movs	r2, #0
 80002f4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80002f6:	4b09      	ldr	r3, [pc, #36]	@ (800031c <MX_I2C1_Init+0x50>)
 80002f8:	2200      	movs	r2, #0
 80002fa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80002fc:	4b07      	ldr	r3, [pc, #28]	@ (800031c <MX_I2C1_Init+0x50>)
 80002fe:	2200      	movs	r2, #0
 8000300:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000302:	4b06      	ldr	r3, [pc, #24]	@ (800031c <MX_I2C1_Init+0x50>)
 8000304:	2200      	movs	r2, #0
 8000306:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000308:	4804      	ldr	r0, [pc, #16]	@ (800031c <MX_I2C1_Init+0x50>)
 800030a:	f001 fb07 	bl	800191c <HAL_I2C_Init>
 800030e:	4603      	mov	r3, r0
 8000310:	2b00      	cmp	r3, #0
 8000312:	d001      	beq.n	8000318 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000314:	f000 f8c3 	bl	800049e <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000318:	bf00      	nop
 800031a:	bd80      	pop	{r7, pc}
 800031c:	200000c4 	.word	0x200000c4
 8000320:	40005400 	.word	0x40005400
 8000324:	000186a0 	.word	0x000186a0

08000328 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000328:	b580      	push	{r7, lr}
 800032a:	b08a      	sub	sp, #40	@ 0x28
 800032c:	af00      	add	r7, sp, #0
 800032e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000330:	f107 0314 	add.w	r3, r7, #20
 8000334:	2200      	movs	r2, #0
 8000336:	601a      	str	r2, [r3, #0]
 8000338:	605a      	str	r2, [r3, #4]
 800033a:	609a      	str	r2, [r3, #8]
 800033c:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	4a1d      	ldr	r2, [pc, #116]	@ (80003b8 <HAL_I2C_MspInit+0x90>)
 8000344:	4293      	cmp	r3, r2
 8000346:	d132      	bne.n	80003ae <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000348:	4b1c      	ldr	r3, [pc, #112]	@ (80003bc <HAL_I2C_MspInit+0x94>)
 800034a:	699b      	ldr	r3, [r3, #24]
 800034c:	4a1b      	ldr	r2, [pc, #108]	@ (80003bc <HAL_I2C_MspInit+0x94>)
 800034e:	f043 0308 	orr.w	r3, r3, #8
 8000352:	6193      	str	r3, [r2, #24]
 8000354:	4b19      	ldr	r3, [pc, #100]	@ (80003bc <HAL_I2C_MspInit+0x94>)
 8000356:	699b      	ldr	r3, [r3, #24]
 8000358:	f003 0308 	and.w	r3, r3, #8
 800035c:	613b      	str	r3, [r7, #16]
 800035e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000360:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000364:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000366:	2312      	movs	r3, #18
 8000368:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800036a:	2303      	movs	r3, #3
 800036c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800036e:	f107 0314 	add.w	r3, r7, #20
 8000372:	4619      	mov	r1, r3
 8000374:	4812      	ldr	r0, [pc, #72]	@ (80003c0 <HAL_I2C_MspInit+0x98>)
 8000376:	f001 f91d 	bl	80015b4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 800037a:	4b12      	ldr	r3, [pc, #72]	@ (80003c4 <HAL_I2C_MspInit+0x9c>)
 800037c:	685b      	ldr	r3, [r3, #4]
 800037e:	627b      	str	r3, [r7, #36]	@ 0x24
 8000380:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000382:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8000386:	627b      	str	r3, [r7, #36]	@ 0x24
 8000388:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800038a:	f043 0302 	orr.w	r3, r3, #2
 800038e:	627b      	str	r3, [r7, #36]	@ 0x24
 8000390:	4a0c      	ldr	r2, [pc, #48]	@ (80003c4 <HAL_I2C_MspInit+0x9c>)
 8000392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000394:	6053      	str	r3, [r2, #4]

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000396:	4b09      	ldr	r3, [pc, #36]	@ (80003bc <HAL_I2C_MspInit+0x94>)
 8000398:	69db      	ldr	r3, [r3, #28]
 800039a:	4a08      	ldr	r2, [pc, #32]	@ (80003bc <HAL_I2C_MspInit+0x94>)
 800039c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80003a0:	61d3      	str	r3, [r2, #28]
 80003a2:	4b06      	ldr	r3, [pc, #24]	@ (80003bc <HAL_I2C_MspInit+0x94>)
 80003a4:	69db      	ldr	r3, [r3, #28]
 80003a6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80003aa:	60fb      	str	r3, [r7, #12]
 80003ac:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80003ae:	bf00      	nop
 80003b0:	3728      	adds	r7, #40	@ 0x28
 80003b2:	46bd      	mov	sp, r7
 80003b4:	bd80      	pop	{r7, pc}
 80003b6:	bf00      	nop
 80003b8:	40005400 	.word	0x40005400
 80003bc:	40021000 	.word	0x40021000
 80003c0:	40010c00 	.word	0x40010c00
 80003c4:	40010000 	.word	0x40010000

080003c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003cc:	f000 fcbc 	bl	8000d48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003d0:	f000 f82a 	bl	8000428 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003d4:	f7ff fed8 	bl	8000188 <MX_GPIO_Init>
  MX_DMA_Init();
 80003d8:	f7ff feb8 	bl	800014c <MX_DMA_Init>
  MX_USART1_UART_Init();
 80003dc:	f000 fbd4 	bl	8000b88 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 80003e0:	f7ff ff74 	bl	80002cc <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  //HAL_UART_Receive_IT(&huart1, RX1_Buffer, 4);
  //HAL_UART_Receive_DMA(&huart1, RX1_Buffer, 1);
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);
 80003e4:	4b0c      	ldr	r3, [pc, #48]	@ (8000418 <main+0x50>)
 80003e6:	681b      	ldr	r3, [r3, #0]
 80003e8:	68da      	ldr	r2, [r3, #12]
 80003ea:	4b0b      	ldr	r3, [pc, #44]	@ (8000418 <main+0x50>)
 80003ec:	681b      	ldr	r3, [r3, #0]
 80003ee:	f042 0210 	orr.w	r2, r2, #16
 80003f2:	60da      	str	r2, [r3, #12]
  HAL_UART_Receive_DMA(&huart1, RX1_Buffer, DMA_BUF_SIZE);
 80003f4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80003f8:	4908      	ldr	r1, [pc, #32]	@ (800041c <main+0x54>)
 80003fa:	4807      	ldr	r0, [pc, #28]	@ (8000418 <main+0x50>)
 80003fc:	f002 fc25 	bl	8002c4a <HAL_UART_Receive_DMA>
  printf("The system has been initialized!\n");
 8000400:	4807      	ldr	r0, [pc, #28]	@ (8000420 <main+0x58>)
 8000402:	f003 fc69 	bl	8003cd8 <puts>
  OLED_Init();
 8000406:	f000 f881 	bl	800050c <OLED_Init>
  printf("The OLED has been initialized!\n");
 800040a:	4806      	ldr	r0, [pc, #24]	@ (8000424 <main+0x5c>)
 800040c:	f003 fc64 	bl	8003cd8 <puts>
  OLED_Test();
 8000410:	f000 f97c 	bl	800070c <OLED_Test>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000414:	bf00      	nop
 8000416:	e7fd      	b.n	8000414 <main+0x4c>
 8000418:	20000224 	.word	0x20000224
 800041c:	20000118 	.word	0x20000118
 8000420:	08004a34 	.word	0x08004a34
 8000424:	08004a58 	.word	0x08004a58

08000428 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000428:	b580      	push	{r7, lr}
 800042a:	b090      	sub	sp, #64	@ 0x40
 800042c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800042e:	f107 0318 	add.w	r3, r7, #24
 8000432:	2228      	movs	r2, #40	@ 0x28
 8000434:	2100      	movs	r1, #0
 8000436:	4618      	mov	r0, r3
 8000438:	f003 fd2e 	bl	8003e98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800043c:	1d3b      	adds	r3, r7, #4
 800043e:	2200      	movs	r2, #0
 8000440:	601a      	str	r2, [r3, #0]
 8000442:	605a      	str	r2, [r3, #4]
 8000444:	609a      	str	r2, [r3, #8]
 8000446:	60da      	str	r2, [r3, #12]
 8000448:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800044a:	2302      	movs	r3, #2
 800044c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800044e:	2301      	movs	r3, #1
 8000450:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000452:	2310      	movs	r3, #16
 8000454:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000456:	2300      	movs	r3, #0
 8000458:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800045a:	f107 0318 	add.w	r3, r7, #24
 800045e:	4618      	mov	r0, r3
 8000460:	f001 ff08 	bl	8002274 <HAL_RCC_OscConfig>
 8000464:	4603      	mov	r3, r0
 8000466:	2b00      	cmp	r3, #0
 8000468:	d001      	beq.n	800046e <SystemClock_Config+0x46>
  {
    Error_Handler();
 800046a:	f000 f818 	bl	800049e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800046e:	230f      	movs	r3, #15
 8000470:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000472:	2300      	movs	r3, #0
 8000474:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000476:	2300      	movs	r3, #0
 8000478:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800047a:	2300      	movs	r3, #0
 800047c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800047e:	2300      	movs	r3, #0
 8000480:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000482:	1d3b      	adds	r3, r7, #4
 8000484:	2100      	movs	r1, #0
 8000486:	4618      	mov	r0, r3
 8000488:	f002 f976 	bl	8002778 <HAL_RCC_ClockConfig>
 800048c:	4603      	mov	r3, r0
 800048e:	2b00      	cmp	r3, #0
 8000490:	d001      	beq.n	8000496 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000492:	f000 f804 	bl	800049e <Error_Handler>
  }
}
 8000496:	bf00      	nop
 8000498:	3740      	adds	r7, #64	@ 0x40
 800049a:	46bd      	mov	sp, r7
 800049c:	bd80      	pop	{r7, pc}

0800049e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800049e:	b480      	push	{r7}
 80004a0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004a2:	b672      	cpsid	i
}
 80004a4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004a6:	bf00      	nop
 80004a8:	e7fd      	b.n	80004a6 <Error_Handler+0x8>
	...

080004ac <WriteCmd>:
#include "oled.h"
#include "codetab.h"

void WriteCmd(unsigned char I2C_Command)//写命令
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	b086      	sub	sp, #24
 80004b0:	af04      	add	r7, sp, #16
 80004b2:	4603      	mov	r3, r0
 80004b4:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1,OLED0561_ADD,COM,I2C_MEMADD_SIZE_8BIT,&I2C_Command,1,1000);
 80004b6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80004ba:	9302      	str	r3, [sp, #8]
 80004bc:	2301      	movs	r3, #1
 80004be:	9301      	str	r3, [sp, #4]
 80004c0:	1dfb      	adds	r3, r7, #7
 80004c2:	9300      	str	r3, [sp, #0]
 80004c4:	2301      	movs	r3, #1
 80004c6:	2200      	movs	r2, #0
 80004c8:	2178      	movs	r1, #120	@ 0x78
 80004ca:	4803      	ldr	r0, [pc, #12]	@ (80004d8 <WriteCmd+0x2c>)
 80004cc:	f001 fb6a 	bl	8001ba4 <HAL_I2C_Mem_Write>
}
 80004d0:	bf00      	nop
 80004d2:	3708      	adds	r7, #8
 80004d4:	46bd      	mov	sp, r7
 80004d6:	bd80      	pop	{r7, pc}
 80004d8:	200000c4 	.word	0x200000c4

080004dc <WriteDat>:

void WriteDat(unsigned char I2C_Data)//写数据
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b086      	sub	sp, #24
 80004e0:	af04      	add	r7, sp, #16
 80004e2:	4603      	mov	r3, r0
 80004e4:	71fb      	strb	r3, [r7, #7]
		HAL_I2C_Mem_Write(&hi2c1,OLED0561_ADD,DAT,I2C_MEMADD_SIZE_8BIT,&I2C_Data,1,1000);
 80004e6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80004ea:	9302      	str	r3, [sp, #8]
 80004ec:	2301      	movs	r3, #1
 80004ee:	9301      	str	r3, [sp, #4]
 80004f0:	1dfb      	adds	r3, r7, #7
 80004f2:	9300      	str	r3, [sp, #0]
 80004f4:	2301      	movs	r3, #1
 80004f6:	2240      	movs	r2, #64	@ 0x40
 80004f8:	2178      	movs	r1, #120	@ 0x78
 80004fa:	4803      	ldr	r0, [pc, #12]	@ (8000508 <WriteDat+0x2c>)
 80004fc:	f001 fb52 	bl	8001ba4 <HAL_I2C_Mem_Write>
}
 8000500:	bf00      	nop
 8000502:	3708      	adds	r7, #8
 8000504:	46bd      	mov	sp, r7
 8000506:	bd80      	pop	{r7, pc}
 8000508:	200000c4 	.word	0x200000c4

0800050c <OLED_Init>:

void OLED_Init(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	af00      	add	r7, sp, #0
	HAL_Delay(100); //这里的延时很重要
 8000510:	2064      	movs	r0, #100	@ 0x64
 8000512:	f000 fc7b 	bl	8000e0c <HAL_Delay>

	WriteCmd(0xAE); //display off
 8000516:	20ae      	movs	r0, #174	@ 0xae
 8000518:	f7ff ffc8 	bl	80004ac <WriteCmd>
	WriteCmd(0x20);	//Set Memory Addressing Mode
 800051c:	2020      	movs	r0, #32
 800051e:	f7ff ffc5 	bl	80004ac <WriteCmd>
	WriteCmd(0x10);	//00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8000522:	2010      	movs	r0, #16
 8000524:	f7ff ffc2 	bl	80004ac <WriteCmd>
	WriteCmd(0xb0);	//Set Page Start Address for Page Addressing Mode,0-7
 8000528:	20b0      	movs	r0, #176	@ 0xb0
 800052a:	f7ff ffbf 	bl	80004ac <WriteCmd>
	WriteCmd(0xc8);	//Set COM Output Scan Direction
 800052e:	20c8      	movs	r0, #200	@ 0xc8
 8000530:	f7ff ffbc 	bl	80004ac <WriteCmd>
	WriteCmd(0x00); //---set low column address
 8000534:	2000      	movs	r0, #0
 8000536:	f7ff ffb9 	bl	80004ac <WriteCmd>
	WriteCmd(0x10); //---set high column address
 800053a:	2010      	movs	r0, #16
 800053c:	f7ff ffb6 	bl	80004ac <WriteCmd>
	WriteCmd(0x40); //--set start line address
 8000540:	2040      	movs	r0, #64	@ 0x40
 8000542:	f7ff ffb3 	bl	80004ac <WriteCmd>
	WriteCmd(0x81); //--set contrast control register
 8000546:	2081      	movs	r0, #129	@ 0x81
 8000548:	f7ff ffb0 	bl	80004ac <WriteCmd>
	WriteCmd(0xff); //亮度调节 0x00~0xff
 800054c:	20ff      	movs	r0, #255	@ 0xff
 800054e:	f7ff ffad 	bl	80004ac <WriteCmd>
	WriteCmd(0xa1); //--set segment re-map 0 to 127
 8000552:	20a1      	movs	r0, #161	@ 0xa1
 8000554:	f7ff ffaa 	bl	80004ac <WriteCmd>
	WriteCmd(0xa6); //--set normal display
 8000558:	20a6      	movs	r0, #166	@ 0xa6
 800055a:	f7ff ffa7 	bl	80004ac <WriteCmd>
	WriteCmd(0xa8); //--set multiplex ratio(1 to 64)
 800055e:	20a8      	movs	r0, #168	@ 0xa8
 8000560:	f7ff ffa4 	bl	80004ac <WriteCmd>
	WriteCmd(0x3F); //
 8000564:	203f      	movs	r0, #63	@ 0x3f
 8000566:	f7ff ffa1 	bl	80004ac <WriteCmd>
	WriteCmd(0xa4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800056a:	20a4      	movs	r0, #164	@ 0xa4
 800056c:	f7ff ff9e 	bl	80004ac <WriteCmd>
	WriteCmd(0xd3); //-set display offset
 8000570:	20d3      	movs	r0, #211	@ 0xd3
 8000572:	f7ff ff9b 	bl	80004ac <WriteCmd>
	WriteCmd(0x00); //-not offset
 8000576:	2000      	movs	r0, #0
 8000578:	f7ff ff98 	bl	80004ac <WriteCmd>
	WriteCmd(0xd5); //--set display clock divide ratio/oscillator frequency
 800057c:	20d5      	movs	r0, #213	@ 0xd5
 800057e:	f7ff ff95 	bl	80004ac <WriteCmd>
	WriteCmd(0xf0); //--set divide ratio
 8000582:	20f0      	movs	r0, #240	@ 0xf0
 8000584:	f7ff ff92 	bl	80004ac <WriteCmd>
	WriteCmd(0xd9); //--set pre-charge period
 8000588:	20d9      	movs	r0, #217	@ 0xd9
 800058a:	f7ff ff8f 	bl	80004ac <WriteCmd>
	WriteCmd(0x22); //
 800058e:	2022      	movs	r0, #34	@ 0x22
 8000590:	f7ff ff8c 	bl	80004ac <WriteCmd>
	WriteCmd(0xda); //--set com pins hardware configuration
 8000594:	20da      	movs	r0, #218	@ 0xda
 8000596:	f7ff ff89 	bl	80004ac <WriteCmd>
	WriteCmd(0x12);
 800059a:	2012      	movs	r0, #18
 800059c:	f7ff ff86 	bl	80004ac <WriteCmd>
	WriteCmd(0xdb); //--set vcomh
 80005a0:	20db      	movs	r0, #219	@ 0xdb
 80005a2:	f7ff ff83 	bl	80004ac <WriteCmd>
	WriteCmd(0x20); //0x20,0.77xVcc
 80005a6:	2020      	movs	r0, #32
 80005a8:	f7ff ff80 	bl	80004ac <WriteCmd>
	WriteCmd(0x8d); //--set DC-DC enable
 80005ac:	208d      	movs	r0, #141	@ 0x8d
 80005ae:	f7ff ff7d 	bl	80004ac <WriteCmd>
	WriteCmd(0x14); //
 80005b2:	2014      	movs	r0, #20
 80005b4:	f7ff ff7a 	bl	80004ac <WriteCmd>
	WriteCmd(0xaf); //--turn on oled panel
 80005b8:	20af      	movs	r0, #175	@ 0xaf
 80005ba:	f7ff ff77 	bl	80004ac <WriteCmd>
}
 80005be:	bf00      	nop
 80005c0:	bd80      	pop	{r7, pc}

080005c2 <OLED_SetPos>:

void OLED_SetPos(unsigned char x, unsigned char y) //设置起始点坐标
{
 80005c2:	b580      	push	{r7, lr}
 80005c4:	b082      	sub	sp, #8
 80005c6:	af00      	add	r7, sp, #0
 80005c8:	4603      	mov	r3, r0
 80005ca:	460a      	mov	r2, r1
 80005cc:	71fb      	strb	r3, [r7, #7]
 80005ce:	4613      	mov	r3, r2
 80005d0:	71bb      	strb	r3, [r7, #6]
	WriteCmd(0xb0+y);
 80005d2:	79bb      	ldrb	r3, [r7, #6]
 80005d4:	3b50      	subs	r3, #80	@ 0x50
 80005d6:	b2db      	uxtb	r3, r3
 80005d8:	4618      	mov	r0, r3
 80005da:	f7ff ff67 	bl	80004ac <WriteCmd>
	WriteCmd(((x&0xf0)>>4)|0x10);
 80005de:	79fb      	ldrb	r3, [r7, #7]
 80005e0:	091b      	lsrs	r3, r3, #4
 80005e2:	b2db      	uxtb	r3, r3
 80005e4:	f043 0310 	orr.w	r3, r3, #16
 80005e8:	b2db      	uxtb	r3, r3
 80005ea:	4618      	mov	r0, r3
 80005ec:	f7ff ff5e 	bl	80004ac <WriteCmd>
	WriteCmd((x&0x0f)|0x01);
 80005f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005f4:	f003 030e 	and.w	r3, r3, #14
 80005f8:	b25b      	sxtb	r3, r3
 80005fa:	f043 0301 	orr.w	r3, r3, #1
 80005fe:	b25b      	sxtb	r3, r3
 8000600:	b2db      	uxtb	r3, r3
 8000602:	4618      	mov	r0, r3
 8000604:	f7ff ff52 	bl	80004ac <WriteCmd>
}
 8000608:	bf00      	nop
 800060a:	3708      	adds	r7, #8
 800060c:	46bd      	mov	sp, r7
 800060e:	bd80      	pop	{r7, pc}

08000610 <OLED_Fill>:

void OLED_Fill(unsigned char fill_Data)//全屏填充
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b084      	sub	sp, #16
 8000614:	af00      	add	r7, sp, #0
 8000616:	4603      	mov	r3, r0
 8000618:	71fb      	strb	r3, [r7, #7]
	unsigned char m,n;
	for(m=0;m<8;m++)
 800061a:	2300      	movs	r3, #0
 800061c:	73fb      	strb	r3, [r7, #15]
 800061e:	e01c      	b.n	800065a <OLED_Fill+0x4a>
	{
		WriteCmd(0xb0+m);		//page0-page1
 8000620:	7bfb      	ldrb	r3, [r7, #15]
 8000622:	3b50      	subs	r3, #80	@ 0x50
 8000624:	b2db      	uxtb	r3, r3
 8000626:	4618      	mov	r0, r3
 8000628:	f7ff ff40 	bl	80004ac <WriteCmd>
		WriteCmd(0x00);		//low column start address
 800062c:	2000      	movs	r0, #0
 800062e:	f7ff ff3d 	bl	80004ac <WriteCmd>
		WriteCmd(0x10);		//high column start address
 8000632:	2010      	movs	r0, #16
 8000634:	f7ff ff3a 	bl	80004ac <WriteCmd>
		for(n=0;n<128;n++)
 8000638:	2300      	movs	r3, #0
 800063a:	73bb      	strb	r3, [r7, #14]
 800063c:	e006      	b.n	800064c <OLED_Fill+0x3c>
		{
			WriteDat(fill_Data);
 800063e:	79fb      	ldrb	r3, [r7, #7]
 8000640:	4618      	mov	r0, r3
 8000642:	f7ff ff4b 	bl	80004dc <WriteDat>
		for(n=0;n<128;n++)
 8000646:	7bbb      	ldrb	r3, [r7, #14]
 8000648:	3301      	adds	r3, #1
 800064a:	73bb      	strb	r3, [r7, #14]
 800064c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000650:	2b00      	cmp	r3, #0
 8000652:	daf4      	bge.n	800063e <OLED_Fill+0x2e>
	for(m=0;m<8;m++)
 8000654:	7bfb      	ldrb	r3, [r7, #15]
 8000656:	3301      	adds	r3, #1
 8000658:	73fb      	strb	r3, [r7, #15]
 800065a:	7bfb      	ldrb	r3, [r7, #15]
 800065c:	2b07      	cmp	r3, #7
 800065e:	d9df      	bls.n	8000620 <OLED_Fill+0x10>
		}
	}
}
 8000660:	bf00      	nop
 8000662:	bf00      	nop
 8000664:	3710      	adds	r7, #16
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}

0800066a <OLED_CLS>:

void OLED_CLS(void)//清屏
{
 800066a:	b580      	push	{r7, lr}
 800066c:	af00      	add	r7, sp, #0
	OLED_Fill(0x00);
 800066e:	2000      	movs	r0, #0
 8000670:	f7ff ffce 	bl	8000610 <OLED_Fill>
}
 8000674:	bf00      	nop
 8000676:	bd80      	pop	{r7, pc}

08000678 <OLED_ShowCN>:
}

// Parameters     : x,y -- 起始点坐标(x:0~127, y:0~7); N:汉字在.h中的索引
// Description    : 显示ASCII_8x16.h中的汉字,16*16点阵
void OLED_ShowCN(unsigned char x, unsigned char y, unsigned char N)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b084      	sub	sp, #16
 800067c:	af00      	add	r7, sp, #0
 800067e:	4603      	mov	r3, r0
 8000680:	71fb      	strb	r3, [r7, #7]
 8000682:	460b      	mov	r3, r1
 8000684:	71bb      	strb	r3, [r7, #6]
 8000686:	4613      	mov	r3, r2
 8000688:	717b      	strb	r3, [r7, #5]
	unsigned char wm=0;
 800068a:	2300      	movs	r3, #0
 800068c:	73fb      	strb	r3, [r7, #15]
	unsigned int  adder=32*N;
 800068e:	797b      	ldrb	r3, [r7, #5]
 8000690:	015b      	lsls	r3, r3, #5
 8000692:	60bb      	str	r3, [r7, #8]
	OLED_SetPos(x , y);
 8000694:	79ba      	ldrb	r2, [r7, #6]
 8000696:	79fb      	ldrb	r3, [r7, #7]
 8000698:	4611      	mov	r1, r2
 800069a:	4618      	mov	r0, r3
 800069c:	f7ff ff91 	bl	80005c2 <OLED_SetPos>
	for(wm = 0;wm < 16;wm++)
 80006a0:	2300      	movs	r3, #0
 80006a2:	73fb      	strb	r3, [r7, #15]
 80006a4:	e00c      	b.n	80006c0 <OLED_ShowCN+0x48>
	{
		WriteDat(F16x16[adder]);
 80006a6:	4a18      	ldr	r2, [pc, #96]	@ (8000708 <OLED_ShowCN+0x90>)
 80006a8:	68bb      	ldr	r3, [r7, #8]
 80006aa:	4413      	add	r3, r2
 80006ac:	781b      	ldrb	r3, [r3, #0]
 80006ae:	4618      	mov	r0, r3
 80006b0:	f7ff ff14 	bl	80004dc <WriteDat>
		adder += 1;
 80006b4:	68bb      	ldr	r3, [r7, #8]
 80006b6:	3301      	adds	r3, #1
 80006b8:	60bb      	str	r3, [r7, #8]
	for(wm = 0;wm < 16;wm++)
 80006ba:	7bfb      	ldrb	r3, [r7, #15]
 80006bc:	3301      	adds	r3, #1
 80006be:	73fb      	strb	r3, [r7, #15]
 80006c0:	7bfb      	ldrb	r3, [r7, #15]
 80006c2:	2b0f      	cmp	r3, #15
 80006c4:	d9ef      	bls.n	80006a6 <OLED_ShowCN+0x2e>
	}
	OLED_SetPos(x,y + 1);
 80006c6:	79bb      	ldrb	r3, [r7, #6]
 80006c8:	3301      	adds	r3, #1
 80006ca:	b2da      	uxtb	r2, r3
 80006cc:	79fb      	ldrb	r3, [r7, #7]
 80006ce:	4611      	mov	r1, r2
 80006d0:	4618      	mov	r0, r3
 80006d2:	f7ff ff76 	bl	80005c2 <OLED_SetPos>
	for(wm = 0;wm < 16;wm++)
 80006d6:	2300      	movs	r3, #0
 80006d8:	73fb      	strb	r3, [r7, #15]
 80006da:	e00c      	b.n	80006f6 <OLED_ShowCN+0x7e>
	{
		WriteDat(F16x16[adder]);
 80006dc:	4a0a      	ldr	r2, [pc, #40]	@ (8000708 <OLED_ShowCN+0x90>)
 80006de:	68bb      	ldr	r3, [r7, #8]
 80006e0:	4413      	add	r3, r2
 80006e2:	781b      	ldrb	r3, [r3, #0]
 80006e4:	4618      	mov	r0, r3
 80006e6:	f7ff fef9 	bl	80004dc <WriteDat>
		adder += 1;
 80006ea:	68bb      	ldr	r3, [r7, #8]
 80006ec:	3301      	adds	r3, #1
 80006ee:	60bb      	str	r3, [r7, #8]
	for(wm = 0;wm < 16;wm++)
 80006f0:	7bfb      	ldrb	r3, [r7, #15]
 80006f2:	3301      	adds	r3, #1
 80006f4:	73fb      	strb	r3, [r7, #15]
 80006f6:	7bfb      	ldrb	r3, [r7, #15]
 80006f8:	2b0f      	cmp	r3, #15
 80006fa:	d9ef      	bls.n	80006dc <OLED_ShowCN+0x64>
	}
}
 80006fc:	bf00      	nop
 80006fe:	bf00      	nop
 8000700:	3710      	adds	r7, #16
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	20000000 	.word	0x20000000

0800070c <OLED_Test>:
	 	OLED_ShowChar(x+(size2/2)*t,y,temp+'0',size2);
	}
}

void OLED_Test()
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b082      	sub	sp, #8
 8000710:	af00      	add	r7, sp, #0
	OLED_CLS();
 8000712:	f7ff ffaa 	bl	800066a <OLED_CLS>
	//OLED_ShowStr(0, 0, (unsigned char *) "hello world", 2);
	//OLED_DrawBMP(0,0,128,7,BMP1);
	for (int i = 0; i < 2; i++)
 8000716:	2300      	movs	r3, #0
 8000718:	607b      	str	r3, [r7, #4]
 800071a:	e00c      	b.n	8000736 <OLED_Test+0x2a>
	{
		OLED_ShowCN(i * 16, 2, i);
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	b2db      	uxtb	r3, r3
 8000720:	011b      	lsls	r3, r3, #4
 8000722:	b2db      	uxtb	r3, r3
 8000724:	687a      	ldr	r2, [r7, #4]
 8000726:	b2d2      	uxtb	r2, r2
 8000728:	2102      	movs	r1, #2
 800072a:	4618      	mov	r0, r3
 800072c:	f7ff ffa4 	bl	8000678 <OLED_ShowCN>
	for (int i = 0; i < 2; i++)
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	3301      	adds	r3, #1
 8000734:	607b      	str	r3, [r7, #4]
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	2b01      	cmp	r3, #1
 800073a:	ddef      	ble.n	800071c <OLED_Test+0x10>
	}
}
 800073c:	bf00      	nop
 800073e:	bf00      	nop
 8000740:	3708      	adds	r7, #8
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
	...

08000748 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000748:	b480      	push	{r7}
 800074a:	b085      	sub	sp, #20
 800074c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800074e:	4b15      	ldr	r3, [pc, #84]	@ (80007a4 <HAL_MspInit+0x5c>)
 8000750:	699b      	ldr	r3, [r3, #24]
 8000752:	4a14      	ldr	r2, [pc, #80]	@ (80007a4 <HAL_MspInit+0x5c>)
 8000754:	f043 0301 	orr.w	r3, r3, #1
 8000758:	6193      	str	r3, [r2, #24]
 800075a:	4b12      	ldr	r3, [pc, #72]	@ (80007a4 <HAL_MspInit+0x5c>)
 800075c:	699b      	ldr	r3, [r3, #24]
 800075e:	f003 0301 	and.w	r3, r3, #1
 8000762:	60bb      	str	r3, [r7, #8]
 8000764:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000766:	4b0f      	ldr	r3, [pc, #60]	@ (80007a4 <HAL_MspInit+0x5c>)
 8000768:	69db      	ldr	r3, [r3, #28]
 800076a:	4a0e      	ldr	r2, [pc, #56]	@ (80007a4 <HAL_MspInit+0x5c>)
 800076c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000770:	61d3      	str	r3, [r2, #28]
 8000772:	4b0c      	ldr	r3, [pc, #48]	@ (80007a4 <HAL_MspInit+0x5c>)
 8000774:	69db      	ldr	r3, [r3, #28]
 8000776:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800077a:	607b      	str	r3, [r7, #4]
 800077c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800077e:	4b0a      	ldr	r3, [pc, #40]	@ (80007a8 <HAL_MspInit+0x60>)
 8000780:	685b      	ldr	r3, [r3, #4]
 8000782:	60fb      	str	r3, [r7, #12]
 8000784:	68fb      	ldr	r3, [r7, #12]
 8000786:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800078a:	60fb      	str	r3, [r7, #12]
 800078c:	68fb      	ldr	r3, [r7, #12]
 800078e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000792:	60fb      	str	r3, [r7, #12]
 8000794:	4a04      	ldr	r2, [pc, #16]	@ (80007a8 <HAL_MspInit+0x60>)
 8000796:	68fb      	ldr	r3, [r7, #12]
 8000798:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800079a:	bf00      	nop
 800079c:	3714      	adds	r7, #20
 800079e:	46bd      	mov	sp, r7
 80007a0:	bc80      	pop	{r7}
 80007a2:	4770      	bx	lr
 80007a4:	40021000 	.word	0x40021000
 80007a8:	40010000 	.word	0x40010000

080007ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80007b0:	bf00      	nop
 80007b2:	e7fd      	b.n	80007b0 <NMI_Handler+0x4>

080007b4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007b4:	b480      	push	{r7}
 80007b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007b8:	bf00      	nop
 80007ba:	e7fd      	b.n	80007b8 <HardFault_Handler+0x4>

080007bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007bc:	b480      	push	{r7}
 80007be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007c0:	bf00      	nop
 80007c2:	e7fd      	b.n	80007c0 <MemManage_Handler+0x4>

080007c4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007c4:	b480      	push	{r7}
 80007c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007c8:	bf00      	nop
 80007ca:	e7fd      	b.n	80007c8 <BusFault_Handler+0x4>

080007cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007cc:	b480      	push	{r7}
 80007ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007d0:	bf00      	nop
 80007d2:	e7fd      	b.n	80007d0 <UsageFault_Handler+0x4>

080007d4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007d4:	b480      	push	{r7}
 80007d6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007d8:	bf00      	nop
 80007da:	46bd      	mov	sp, r7
 80007dc:	bc80      	pop	{r7}
 80007de:	4770      	bx	lr

080007e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007e0:	b480      	push	{r7}
 80007e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007e4:	bf00      	nop
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bc80      	pop	{r7}
 80007ea:	4770      	bx	lr

080007ec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007ec:	b480      	push	{r7}
 80007ee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007f0:	bf00      	nop
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bc80      	pop	{r7}
 80007f6:	4770      	bx	lr

080007f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007fc:	f000 faea 	bl	8000dd4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000800:	bf00      	nop
 8000802:	bd80      	pop	{r7, pc}

08000804 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000808:	2001      	movs	r0, #1
 800080a:	f001 f86f 	bl	80018ec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800080e:	bf00      	nop
 8000810:	bd80      	pop	{r7, pc}
	...

08000814 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000818:	4802      	ldr	r0, [pc, #8]	@ (8000824 <DMA1_Channel5_IRQHandler+0x10>)
 800081a:	f000 fd97 	bl	800134c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800081e:	bf00      	nop
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	2000026c 	.word	0x2000026c

08000828 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 800082c:	2020      	movs	r0, #32
 800082e:	f001 f85d 	bl	80018ec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000832:	bf00      	nop
 8000834:	bd80      	pop	{r7, pc}
	...

08000838 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800083c:	4803      	ldr	r0, [pc, #12]	@ (800084c <USART1_IRQHandler+0x14>)
 800083e:	f002 fa29 	bl	8002c94 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  UART_IRQHandler(&huart1);
 8000842:	4802      	ldr	r0, [pc, #8]	@ (800084c <USART1_IRQHandler+0x14>)
 8000844:	f000 f8ac 	bl	80009a0 <UART_IRQHandler>
  /* USER CODE END USART1_IRQn 1 */
}
 8000848:	bf00      	nop
 800084a:	bd80      	pop	{r7, pc}
 800084c:	20000224 	.word	0x20000224

08000850 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 1 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b082      	sub	sp, #8
 8000854:	af00      	add	r7, sp, #0
 8000856:	4603      	mov	r3, r0
 8000858:	80fb      	strh	r3, [r7, #6]
	static uint32_t oldUWTick = 0;
	if ((uwTick - oldUWTick) < 200) return;
 800085a:	4b16      	ldr	r3, [pc, #88]	@ (80008b4 <HAL_GPIO_EXTI_Callback+0x64>)
 800085c:	681a      	ldr	r2, [r3, #0]
 800085e:	4b16      	ldr	r3, [pc, #88]	@ (80008b8 <HAL_GPIO_EXTI_Callback+0x68>)
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	1ad3      	subs	r3, r2, r3
 8000864:	2bc7      	cmp	r3, #199	@ 0xc7
 8000866:	d921      	bls.n	80008ac <HAL_GPIO_EXTI_Callback+0x5c>
	oldUWTick = uwTick;
 8000868:	4b12      	ldr	r3, [pc, #72]	@ (80008b4 <HAL_GPIO_EXTI_Callback+0x64>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	4a12      	ldr	r2, [pc, #72]	@ (80008b8 <HAL_GPIO_EXTI_Callback+0x68>)
 800086e:	6013      	str	r3, [r2, #0]
	if (GPIO_Pin == GPIO_PIN_5)
 8000870:	88fb      	ldrh	r3, [r7, #6]
 8000872:	2b20      	cmp	r3, #32
 8000874:	d10b      	bne.n	800088e <HAL_GPIO_EXTI_Callback+0x3e>
	{
		LED_Control(LED1, ON);
 8000876:	2101      	movs	r1, #1
 8000878:	2001      	movs	r0, #1
 800087a:	f7ff fcef 	bl	800025c <LED_Control>
		LED_Control(LED2, ON);
 800087e:	2101      	movs	r1, #1
 8000880:	2002      	movs	r0, #2
 8000882:	f7ff fceb 	bl	800025c <LED_Control>
		printf("GPIO pin 5 has pressed\n");
 8000886:	480d      	ldr	r0, [pc, #52]	@ (80008bc <HAL_GPIO_EXTI_Callback+0x6c>)
 8000888:	f003 fa26 	bl	8003cd8 <puts>
 800088c:	e00f      	b.n	80008ae <HAL_GPIO_EXTI_Callback+0x5e>
	}
	else if (GPIO_Pin == GPIO_PIN_0)
 800088e:	88fb      	ldrh	r3, [r7, #6]
 8000890:	2b01      	cmp	r3, #1
 8000892:	d10c      	bne.n	80008ae <HAL_GPIO_EXTI_Callback+0x5e>
	{
		LED_Control(LED1, OFF);
 8000894:	2100      	movs	r1, #0
 8000896:	2001      	movs	r0, #1
 8000898:	f7ff fce0 	bl	800025c <LED_Control>
		LED_Control(LED2, OFF);
 800089c:	2100      	movs	r1, #0
 800089e:	2002      	movs	r0, #2
 80008a0:	f7ff fcdc 	bl	800025c <LED_Control>
		printf("GPIO pin 0 has pressed\n");
 80008a4:	4806      	ldr	r0, [pc, #24]	@ (80008c0 <HAL_GPIO_EXTI_Callback+0x70>)
 80008a6:	f003 fa17 	bl	8003cd8 <puts>
 80008aa:	e000      	b.n	80008ae <HAL_GPIO_EXTI_Callback+0x5e>
	if ((uwTick - oldUWTick) < 200) return;
 80008ac:	bf00      	nop
	}
}
 80008ae:	3708      	adds	r7, #8
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	200002b0 	.word	0x200002b0
 80008b8:	2000021c 	.word	0x2000021c
 80008bc:	08004a78 	.word	0x08004a78
 80008c0:	08004a90 	.word	0x08004a90

080008c4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b084      	sub	sp, #16
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1)
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	4a12      	ldr	r2, [pc, #72]	@ (800091c <HAL_UART_RxCpltCallback+0x58>)
 80008d2:	4293      	cmp	r3, r2
 80008d4:	d11e      	bne.n	8000914 <HAL_UART_RxCpltCallback+0x50>
	{
		//HAL_UART_Transmit(&huart1, RX1_Buffer, 4, HAL_MAX_DELAY);
		//HAL_UART_Receive_IT(&huart1, RX1_Buffer, 4);
//		HAL_UART_Transmit_DMA(huart, RX1_Buffer, 1);
//		HAL_UART_Receive_IT(huart, RX1_Buffer, 1);
		uint8_t length = DMA_BUF_SIZE - RX1_OffSet;
 80008d6:	4b12      	ldr	r3, [pc, #72]	@ (8000920 <HAL_UART_RxCpltCallback+0x5c>)
 80008d8:	781b      	ldrb	r3, [r3, #0]
 80008da:	425b      	negs	r3, r3
 80008dc:	73fb      	strb	r3, [r7, #15]
		HAL_UART_Transmit(huart, RX1_Buffer + RX1_OffSet, length, HAL_MAX_DELAY);
 80008de:	4b10      	ldr	r3, [pc, #64]	@ (8000920 <HAL_UART_RxCpltCallback+0x5c>)
 80008e0:	781b      	ldrb	r3, [r3, #0]
 80008e2:	461a      	mov	r2, r3
 80008e4:	4b0f      	ldr	r3, [pc, #60]	@ (8000924 <HAL_UART_RxCpltCallback+0x60>)
 80008e6:	18d1      	adds	r1, r2, r3
 80008e8:	7bfb      	ldrb	r3, [r7, #15]
 80008ea:	b29a      	uxth	r2, r3
 80008ec:	f04f 33ff 	mov.w	r3, #4294967295
 80008f0:	6878      	ldr	r0, [r7, #4]
 80008f2:	f002 f91f 	bl	8002b34 <HAL_UART_Transmit>
		printf("\n");
 80008f6:	200a      	movs	r0, #10
 80008f8:	f003 f990 	bl	8003c1c <putchar>
		printf("RX1_OffSet=%d\n", RX1_OffSet + length);
 80008fc:	4b08      	ldr	r3, [pc, #32]	@ (8000920 <HAL_UART_RxCpltCallback+0x5c>)
 80008fe:	781b      	ldrb	r3, [r3, #0]
 8000900:	461a      	mov	r2, r3
 8000902:	7bfb      	ldrb	r3, [r7, #15]
 8000904:	4413      	add	r3, r2
 8000906:	4619      	mov	r1, r3
 8000908:	4807      	ldr	r0, [pc, #28]	@ (8000928 <HAL_UART_RxCpltCallback+0x64>)
 800090a:	f003 f975 	bl	8003bf8 <iprintf>
		RX1_OffSet = 0;
 800090e:	4b04      	ldr	r3, [pc, #16]	@ (8000920 <HAL_UART_RxCpltCallback+0x5c>)
 8000910:	2200      	movs	r2, #0
 8000912:	701a      	strb	r2, [r3, #0]
	}
}
 8000914:	bf00      	nop
 8000916:	3710      	adds	r7, #16
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}
 800091c:	40013800 	.word	0x40013800
 8000920:	20000218 	.word	0x20000218
 8000924:	20000118 	.word	0x20000118
 8000928:	08004aa8 	.word	0x08004aa8

0800092c <HAL_UART_RxHalfCpltCallback>:

void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b084      	sub	sp, #16
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1)
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	4a15      	ldr	r2, [pc, #84]	@ (8000990 <HAL_UART_RxHalfCpltCallback+0x64>)
 800093a:	4293      	cmp	r3, r2
 800093c:	d124      	bne.n	8000988 <HAL_UART_RxHalfCpltCallback+0x5c>
	{
		uint8_t length = DMA_BUF_SIZE / 2 - RX1_OffSet;
 800093e:	4b15      	ldr	r3, [pc, #84]	@ (8000994 <HAL_UART_RxHalfCpltCallback+0x68>)
 8000940:	781a      	ldrb	r2, [r3, #0]
 8000942:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 8000946:	1a9b      	subs	r3, r3, r2
 8000948:	73fb      	strb	r3, [r7, #15]
		//printf("HLength=%d\n", length);
		HAL_UART_Transmit(huart, RX1_Buffer + RX1_OffSet, length, HAL_MAX_DELAY);
 800094a:	4b12      	ldr	r3, [pc, #72]	@ (8000994 <HAL_UART_RxHalfCpltCallback+0x68>)
 800094c:	781b      	ldrb	r3, [r3, #0]
 800094e:	461a      	mov	r2, r3
 8000950:	4b11      	ldr	r3, [pc, #68]	@ (8000998 <HAL_UART_RxHalfCpltCallback+0x6c>)
 8000952:	18d1      	adds	r1, r2, r3
 8000954:	7bfb      	ldrb	r3, [r7, #15]
 8000956:	b29a      	uxth	r2, r3
 8000958:	f04f 33ff 	mov.w	r3, #4294967295
 800095c:	6878      	ldr	r0, [r7, #4]
 800095e:	f002 f8e9 	bl	8002b34 <HAL_UART_Transmit>
		printf("\n");
 8000962:	200a      	movs	r0, #10
 8000964:	f003 f95a 	bl	8003c1c <putchar>
		printf("RX1_OffSet=%d\n", RX1_OffSet + length);
 8000968:	4b0a      	ldr	r3, [pc, #40]	@ (8000994 <HAL_UART_RxHalfCpltCallback+0x68>)
 800096a:	781b      	ldrb	r3, [r3, #0]
 800096c:	461a      	mov	r2, r3
 800096e:	7bfb      	ldrb	r3, [r7, #15]
 8000970:	4413      	add	r3, r2
 8000972:	4619      	mov	r1, r3
 8000974:	4809      	ldr	r0, [pc, #36]	@ (800099c <HAL_UART_RxHalfCpltCallback+0x70>)
 8000976:	f003 f93f 	bl	8003bf8 <iprintf>
		RX1_OffSet += length;
 800097a:	4b06      	ldr	r3, [pc, #24]	@ (8000994 <HAL_UART_RxHalfCpltCallback+0x68>)
 800097c:	781a      	ldrb	r2, [r3, #0]
 800097e:	7bfb      	ldrb	r3, [r7, #15]
 8000980:	4413      	add	r3, r2
 8000982:	b2da      	uxtb	r2, r3
 8000984:	4b03      	ldr	r3, [pc, #12]	@ (8000994 <HAL_UART_RxHalfCpltCallback+0x68>)
 8000986:	701a      	strb	r2, [r3, #0]
	}
}
 8000988:	bf00      	nop
 800098a:	3710      	adds	r7, #16
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}
 8000990:	40013800 	.word	0x40013800
 8000994:	20000218 	.word	0x20000218
 8000998:	20000118 	.word	0x20000118
 800099c:	08004aa8 	.word	0x08004aa8

080009a0 <UART_IRQHandler>:

void UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b084      	sub	sp, #16
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1)
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	4a1e      	ldr	r2, [pc, #120]	@ (8000a28 <UART_IRQHandler+0x88>)
 80009ae:	4293      	cmp	r3, r2
 80009b0:	d136      	bne.n	8000a20 <UART_IRQHandler+0x80>
	{
		if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) != RESET)
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	f003 0310 	and.w	r3, r3, #16
 80009bc:	2b10      	cmp	r3, #16
 80009be:	d12f      	bne.n	8000a20 <UART_IRQHandler+0x80>
		{
			__HAL_UART_CLEAR_IDLEFLAG(huart);
 80009c0:	2300      	movs	r3, #0
 80009c2:	60bb      	str	r3, [r7, #8]
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	60bb      	str	r3, [r7, #8]
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	685b      	ldr	r3, [r3, #4]
 80009d2:	60bb      	str	r3, [r7, #8]
 80009d4:	68bb      	ldr	r3, [r7, #8]
			uint8_t length = DMA_BUF_SIZE - __HAL_DMA_GET_COUNTER(&hdma_usart1_rx) - RX1_OffSet;
 80009d6:	4b15      	ldr	r3, [pc, #84]	@ (8000a2c <UART_IRQHandler+0x8c>)
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	685b      	ldr	r3, [r3, #4]
 80009dc:	b2da      	uxtb	r2, r3
 80009de:	4b14      	ldr	r3, [pc, #80]	@ (8000a30 <UART_IRQHandler+0x90>)
 80009e0:	781b      	ldrb	r3, [r3, #0]
 80009e2:	4413      	add	r3, r2
 80009e4:	b2db      	uxtb	r3, r3
 80009e6:	425b      	negs	r3, r3
 80009e8:	73fb      	strb	r3, [r7, #15]
			HAL_UART_Transmit(huart, RX1_Buffer + RX1_OffSet, length, HAL_MAX_DELAY);
 80009ea:	4b11      	ldr	r3, [pc, #68]	@ (8000a30 <UART_IRQHandler+0x90>)
 80009ec:	781b      	ldrb	r3, [r3, #0]
 80009ee:	461a      	mov	r2, r3
 80009f0:	4b10      	ldr	r3, [pc, #64]	@ (8000a34 <UART_IRQHandler+0x94>)
 80009f2:	18d1      	adds	r1, r2, r3
 80009f4:	7bfb      	ldrb	r3, [r7, #15]
 80009f6:	b29a      	uxth	r2, r3
 80009f8:	f04f 33ff 	mov.w	r3, #4294967295
 80009fc:	6878      	ldr	r0, [r7, #4]
 80009fe:	f002 f899 	bl	8002b34 <HAL_UART_Transmit>
			printf("\n");
 8000a02:	200a      	movs	r0, #10
 8000a04:	f003 f90a 	bl	8003c1c <putchar>
			printf("Idle Length=%d\n", length);
 8000a08:	7bfb      	ldrb	r3, [r7, #15]
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	480a      	ldr	r0, [pc, #40]	@ (8000a38 <UART_IRQHandler+0x98>)
 8000a0e:	f003 f8f3 	bl	8003bf8 <iprintf>
			RX1_OffSet += length;
 8000a12:	4b07      	ldr	r3, [pc, #28]	@ (8000a30 <UART_IRQHandler+0x90>)
 8000a14:	781a      	ldrb	r2, [r3, #0]
 8000a16:	7bfb      	ldrb	r3, [r7, #15]
 8000a18:	4413      	add	r3, r2
 8000a1a:	b2da      	uxtb	r2, r3
 8000a1c:	4b04      	ldr	r3, [pc, #16]	@ (8000a30 <UART_IRQHandler+0x90>)
 8000a1e:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8000a20:	bf00      	nop
 8000a22:	3710      	adds	r7, #16
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	40013800 	.word	0x40013800
 8000a2c:	2000026c 	.word	0x2000026c
 8000a30:	20000218 	.word	0x20000218
 8000a34:	20000118 	.word	0x20000118
 8000a38:	08004ab8 	.word	0x08004ab8

08000a3c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b086      	sub	sp, #24
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	60f8      	str	r0, [r7, #12]
 8000a44:	60b9      	str	r1, [r7, #8]
 8000a46:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a48:	2300      	movs	r3, #0
 8000a4a:	617b      	str	r3, [r7, #20]
 8000a4c:	e00a      	b.n	8000a64 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000a4e:	f3af 8000 	nop.w
 8000a52:	4601      	mov	r1, r0
 8000a54:	68bb      	ldr	r3, [r7, #8]
 8000a56:	1c5a      	adds	r2, r3, #1
 8000a58:	60ba      	str	r2, [r7, #8]
 8000a5a:	b2ca      	uxtb	r2, r1
 8000a5c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a5e:	697b      	ldr	r3, [r7, #20]
 8000a60:	3301      	adds	r3, #1
 8000a62:	617b      	str	r3, [r7, #20]
 8000a64:	697a      	ldr	r2, [r7, #20]
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	429a      	cmp	r2, r3
 8000a6a:	dbf0      	blt.n	8000a4e <_read+0x12>
  }

  return len;
 8000a6c:	687b      	ldr	r3, [r7, #4]
}
 8000a6e:	4618      	mov	r0, r3
 8000a70:	3718      	adds	r7, #24
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}

08000a76 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a76:	b580      	push	{r7, lr}
 8000a78:	b086      	sub	sp, #24
 8000a7a:	af00      	add	r7, sp, #0
 8000a7c:	60f8      	str	r0, [r7, #12]
 8000a7e:	60b9      	str	r1, [r7, #8]
 8000a80:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a82:	2300      	movs	r3, #0
 8000a84:	617b      	str	r3, [r7, #20]
 8000a86:	e009      	b.n	8000a9c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000a88:	68bb      	ldr	r3, [r7, #8]
 8000a8a:	1c5a      	adds	r2, r3, #1
 8000a8c:	60ba      	str	r2, [r7, #8]
 8000a8e:	781b      	ldrb	r3, [r3, #0]
 8000a90:	4618      	mov	r0, r3
 8000a92:	f000 f921 	bl	8000cd8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a96:	697b      	ldr	r3, [r7, #20]
 8000a98:	3301      	adds	r3, #1
 8000a9a:	617b      	str	r3, [r7, #20]
 8000a9c:	697a      	ldr	r2, [r7, #20]
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	429a      	cmp	r2, r3
 8000aa2:	dbf1      	blt.n	8000a88 <_write+0x12>
  }
  return len;
 8000aa4:	687b      	ldr	r3, [r7, #4]
}
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	3718      	adds	r7, #24
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}

08000aae <_close>:

int _close(int file)
{
 8000aae:	b480      	push	{r7}
 8000ab0:	b083      	sub	sp, #12
 8000ab2:	af00      	add	r7, sp, #0
 8000ab4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000ab6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000aba:	4618      	mov	r0, r3
 8000abc:	370c      	adds	r7, #12
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bc80      	pop	{r7}
 8000ac2:	4770      	bx	lr

08000ac4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	b083      	sub	sp, #12
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
 8000acc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000ace:	683b      	ldr	r3, [r7, #0]
 8000ad0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000ad4:	605a      	str	r2, [r3, #4]
  return 0;
 8000ad6:	2300      	movs	r3, #0
}
 8000ad8:	4618      	mov	r0, r3
 8000ada:	370c      	adds	r7, #12
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bc80      	pop	{r7}
 8000ae0:	4770      	bx	lr

08000ae2 <_isatty>:

int _isatty(int file)
{
 8000ae2:	b480      	push	{r7}
 8000ae4:	b083      	sub	sp, #12
 8000ae6:	af00      	add	r7, sp, #0
 8000ae8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000aea:	2301      	movs	r3, #1
}
 8000aec:	4618      	mov	r0, r3
 8000aee:	370c      	adds	r7, #12
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bc80      	pop	{r7}
 8000af4:	4770      	bx	lr

08000af6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000af6:	b480      	push	{r7}
 8000af8:	b085      	sub	sp, #20
 8000afa:	af00      	add	r7, sp, #0
 8000afc:	60f8      	str	r0, [r7, #12]
 8000afe:	60b9      	str	r1, [r7, #8]
 8000b00:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000b02:	2300      	movs	r3, #0
}
 8000b04:	4618      	mov	r0, r3
 8000b06:	3714      	adds	r7, #20
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bc80      	pop	{r7}
 8000b0c:	4770      	bx	lr
	...

08000b10 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b086      	sub	sp, #24
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b18:	4a14      	ldr	r2, [pc, #80]	@ (8000b6c <_sbrk+0x5c>)
 8000b1a:	4b15      	ldr	r3, [pc, #84]	@ (8000b70 <_sbrk+0x60>)
 8000b1c:	1ad3      	subs	r3, r2, r3
 8000b1e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b20:	697b      	ldr	r3, [r7, #20]
 8000b22:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b24:	4b13      	ldr	r3, [pc, #76]	@ (8000b74 <_sbrk+0x64>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d102      	bne.n	8000b32 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b2c:	4b11      	ldr	r3, [pc, #68]	@ (8000b74 <_sbrk+0x64>)
 8000b2e:	4a12      	ldr	r2, [pc, #72]	@ (8000b78 <_sbrk+0x68>)
 8000b30:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b32:	4b10      	ldr	r3, [pc, #64]	@ (8000b74 <_sbrk+0x64>)
 8000b34:	681a      	ldr	r2, [r3, #0]
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	4413      	add	r3, r2
 8000b3a:	693a      	ldr	r2, [r7, #16]
 8000b3c:	429a      	cmp	r2, r3
 8000b3e:	d207      	bcs.n	8000b50 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b40:	f003 f9f8 	bl	8003f34 <__errno>
 8000b44:	4603      	mov	r3, r0
 8000b46:	220c      	movs	r2, #12
 8000b48:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b4a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b4e:	e009      	b.n	8000b64 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b50:	4b08      	ldr	r3, [pc, #32]	@ (8000b74 <_sbrk+0x64>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b56:	4b07      	ldr	r3, [pc, #28]	@ (8000b74 <_sbrk+0x64>)
 8000b58:	681a      	ldr	r2, [r3, #0]
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	4413      	add	r3, r2
 8000b5e:	4a05      	ldr	r2, [pc, #20]	@ (8000b74 <_sbrk+0x64>)
 8000b60:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b62:	68fb      	ldr	r3, [r7, #12]
}
 8000b64:	4618      	mov	r0, r3
 8000b66:	3718      	adds	r7, #24
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	20005000 	.word	0x20005000
 8000b70:	00000400 	.word	0x00000400
 8000b74:	20000220 	.word	0x20000220
 8000b78:	20000400 	.word	0x20000400

08000b7c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b80:	bf00      	nop
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bc80      	pop	{r7}
 8000b86:	4770      	bx	lr

08000b88 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b8c:	4b11      	ldr	r3, [pc, #68]	@ (8000bd4 <MX_USART1_UART_Init+0x4c>)
 8000b8e:	4a12      	ldr	r2, [pc, #72]	@ (8000bd8 <MX_USART1_UART_Init+0x50>)
 8000b90:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000b92:	4b10      	ldr	r3, [pc, #64]	@ (8000bd4 <MX_USART1_UART_Init+0x4c>)
 8000b94:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b98:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b9a:	4b0e      	ldr	r3, [pc, #56]	@ (8000bd4 <MX_USART1_UART_Init+0x4c>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ba0:	4b0c      	ldr	r3, [pc, #48]	@ (8000bd4 <MX_USART1_UART_Init+0x4c>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000ba6:	4b0b      	ldr	r3, [pc, #44]	@ (8000bd4 <MX_USART1_UART_Init+0x4c>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000bac:	4b09      	ldr	r3, [pc, #36]	@ (8000bd4 <MX_USART1_UART_Init+0x4c>)
 8000bae:	220c      	movs	r2, #12
 8000bb0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bb2:	4b08      	ldr	r3, [pc, #32]	@ (8000bd4 <MX_USART1_UART_Init+0x4c>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bb8:	4b06      	ldr	r3, [pc, #24]	@ (8000bd4 <MX_USART1_UART_Init+0x4c>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000bbe:	4805      	ldr	r0, [pc, #20]	@ (8000bd4 <MX_USART1_UART_Init+0x4c>)
 8000bc0:	f001 ff68 	bl	8002a94 <HAL_UART_Init>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d001      	beq.n	8000bce <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000bca:	f7ff fc68 	bl	800049e <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000bce:	bf00      	nop
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	20000224 	.word	0x20000224
 8000bd8:	40013800 	.word	0x40013800

08000bdc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b088      	sub	sp, #32
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be4:	f107 0310 	add.w	r3, r7, #16
 8000be8:	2200      	movs	r2, #0
 8000bea:	601a      	str	r2, [r3, #0]
 8000bec:	605a      	str	r2, [r3, #4]
 8000bee:	609a      	str	r2, [r3, #8]
 8000bf0:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	4a33      	ldr	r2, [pc, #204]	@ (8000cc4 <HAL_UART_MspInit+0xe8>)
 8000bf8:	4293      	cmp	r3, r2
 8000bfa:	d15f      	bne.n	8000cbc <HAL_UART_MspInit+0xe0>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000bfc:	4b32      	ldr	r3, [pc, #200]	@ (8000cc8 <HAL_UART_MspInit+0xec>)
 8000bfe:	699b      	ldr	r3, [r3, #24]
 8000c00:	4a31      	ldr	r2, [pc, #196]	@ (8000cc8 <HAL_UART_MspInit+0xec>)
 8000c02:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c06:	6193      	str	r3, [r2, #24]
 8000c08:	4b2f      	ldr	r3, [pc, #188]	@ (8000cc8 <HAL_UART_MspInit+0xec>)
 8000c0a:	699b      	ldr	r3, [r3, #24]
 8000c0c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c10:	60fb      	str	r3, [r7, #12]
 8000c12:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c14:	4b2c      	ldr	r3, [pc, #176]	@ (8000cc8 <HAL_UART_MspInit+0xec>)
 8000c16:	699b      	ldr	r3, [r3, #24]
 8000c18:	4a2b      	ldr	r2, [pc, #172]	@ (8000cc8 <HAL_UART_MspInit+0xec>)
 8000c1a:	f043 0304 	orr.w	r3, r3, #4
 8000c1e:	6193      	str	r3, [r2, #24]
 8000c20:	4b29      	ldr	r3, [pc, #164]	@ (8000cc8 <HAL_UART_MspInit+0xec>)
 8000c22:	699b      	ldr	r3, [r3, #24]
 8000c24:	f003 0304 	and.w	r3, r3, #4
 8000c28:	60bb      	str	r3, [r7, #8]
 8000c2a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000c2c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000c30:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c32:	2302      	movs	r3, #2
 8000c34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c36:	2303      	movs	r3, #3
 8000c38:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c3a:	f107 0310 	add.w	r3, r7, #16
 8000c3e:	4619      	mov	r1, r3
 8000c40:	4822      	ldr	r0, [pc, #136]	@ (8000ccc <HAL_UART_MspInit+0xf0>)
 8000c42:	f000 fcb7 	bl	80015b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000c46:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000c4a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c50:	2301      	movs	r3, #1
 8000c52:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c54:	f107 0310 	add.w	r3, r7, #16
 8000c58:	4619      	mov	r1, r3
 8000c5a:	481c      	ldr	r0, [pc, #112]	@ (8000ccc <HAL_UART_MspInit+0xf0>)
 8000c5c:	f000 fcaa 	bl	80015b4 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8000c60:	4b1b      	ldr	r3, [pc, #108]	@ (8000cd0 <HAL_UART_MspInit+0xf4>)
 8000c62:	4a1c      	ldr	r2, [pc, #112]	@ (8000cd4 <HAL_UART_MspInit+0xf8>)
 8000c64:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c66:	4b1a      	ldr	r3, [pc, #104]	@ (8000cd0 <HAL_UART_MspInit+0xf4>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c6c:	4b18      	ldr	r3, [pc, #96]	@ (8000cd0 <HAL_UART_MspInit+0xf4>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000c72:	4b17      	ldr	r3, [pc, #92]	@ (8000cd0 <HAL_UART_MspInit+0xf4>)
 8000c74:	2280      	movs	r2, #128	@ 0x80
 8000c76:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000c78:	4b15      	ldr	r3, [pc, #84]	@ (8000cd0 <HAL_UART_MspInit+0xf4>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000c7e:	4b14      	ldr	r3, [pc, #80]	@ (8000cd0 <HAL_UART_MspInit+0xf4>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8000c84:	4b12      	ldr	r3, [pc, #72]	@ (8000cd0 <HAL_UART_MspInit+0xf4>)
 8000c86:	2220      	movs	r2, #32
 8000c88:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000c8a:	4b11      	ldr	r3, [pc, #68]	@ (8000cd0 <HAL_UART_MspInit+0xf4>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000c90:	480f      	ldr	r0, [pc, #60]	@ (8000cd0 <HAL_UART_MspInit+0xf4>)
 8000c92:	f000 f9ed 	bl	8001070 <HAL_DMA_Init>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d001      	beq.n	8000ca0 <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 8000c9c:	f7ff fbff 	bl	800049e <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	4a0b      	ldr	r2, [pc, #44]	@ (8000cd0 <HAL_UART_MspInit+0xf4>)
 8000ca4:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000ca6:	4a0a      	ldr	r2, [pc, #40]	@ (8000cd0 <HAL_UART_MspInit+0xf4>)
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000cac:	2200      	movs	r2, #0
 8000cae:	2100      	movs	r1, #0
 8000cb0:	2025      	movs	r0, #37	@ 0x25
 8000cb2:	f000 f9a6 	bl	8001002 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000cb6:	2025      	movs	r0, #37	@ 0x25
 8000cb8:	f000 f9bf 	bl	800103a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000cbc:	bf00      	nop
 8000cbe:	3720      	adds	r7, #32
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	40013800 	.word	0x40013800
 8000cc8:	40021000 	.word	0x40021000
 8000ccc:	40010800 	.word	0x40010800
 8000cd0:	2000026c 	.word	0x2000026c
 8000cd4:	40020058 	.word	0x40020058

08000cd8 <__io_putchar>:
  }
}

/* USER CODE BEGIN 1 */
int __io_putchar(int ch)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b082      	sub	sp, #8
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000ce0:	1d39      	adds	r1, r7, #4
 8000ce2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ce6:	2201      	movs	r2, #1
 8000ce8:	4803      	ldr	r0, [pc, #12]	@ (8000cf8 <__io_putchar+0x20>)
 8000cea:	f001 ff23 	bl	8002b34 <HAL_UART_Transmit>
  return ch;
 8000cee:	687b      	ldr	r3, [r7, #4]
}
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	3708      	adds	r7, #8
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	20000224 	.word	0x20000224

08000cfc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000cfc:	f7ff ff3e 	bl	8000b7c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d00:	480b      	ldr	r0, [pc, #44]	@ (8000d30 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000d02:	490c      	ldr	r1, [pc, #48]	@ (8000d34 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000d04:	4a0c      	ldr	r2, [pc, #48]	@ (8000d38 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000d06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d08:	e002      	b.n	8000d10 <LoopCopyDataInit>

08000d0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d0e:	3304      	adds	r3, #4

08000d10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d14:	d3f9      	bcc.n	8000d0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d16:	4a09      	ldr	r2, [pc, #36]	@ (8000d3c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000d18:	4c09      	ldr	r4, [pc, #36]	@ (8000d40 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d1c:	e001      	b.n	8000d22 <LoopFillZerobss>

08000d1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d20:	3204      	adds	r2, #4

08000d22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d24:	d3fb      	bcc.n	8000d1e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d26:	f003 f90b 	bl	8003f40 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d2a:	f7ff fb4d 	bl	80003c8 <main>
  bx lr
 8000d2e:	4770      	bx	lr
  ldr r0, =_sdata
 8000d30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d34:	200000a8 	.word	0x200000a8
  ldr r2, =_sidata
 8000d38:	08004b30 	.word	0x08004b30
  ldr r2, =_sbss
 8000d3c:	200000a8 	.word	0x200000a8
  ldr r4, =_ebss
 8000d40:	20000400 	.word	0x20000400

08000d44 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d44:	e7fe      	b.n	8000d44 <ADC1_2_IRQHandler>
	...

08000d48 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d4c:	4b08      	ldr	r3, [pc, #32]	@ (8000d70 <HAL_Init+0x28>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	4a07      	ldr	r2, [pc, #28]	@ (8000d70 <HAL_Init+0x28>)
 8000d52:	f043 0310 	orr.w	r3, r3, #16
 8000d56:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d58:	2003      	movs	r0, #3
 8000d5a:	f000 f947 	bl	8000fec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d5e:	200f      	movs	r0, #15
 8000d60:	f000 f808 	bl	8000d74 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d64:	f7ff fcf0 	bl	8000748 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d68:	2300      	movs	r3, #0
}
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	40022000 	.word	0x40022000

08000d74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b082      	sub	sp, #8
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d7c:	4b12      	ldr	r3, [pc, #72]	@ (8000dc8 <HAL_InitTick+0x54>)
 8000d7e:	681a      	ldr	r2, [r3, #0]
 8000d80:	4b12      	ldr	r3, [pc, #72]	@ (8000dcc <HAL_InitTick+0x58>)
 8000d82:	781b      	ldrb	r3, [r3, #0]
 8000d84:	4619      	mov	r1, r3
 8000d86:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d92:	4618      	mov	r0, r3
 8000d94:	f000 f95f 	bl	8001056 <HAL_SYSTICK_Config>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d001      	beq.n	8000da2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d9e:	2301      	movs	r3, #1
 8000da0:	e00e      	b.n	8000dc0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	2b0f      	cmp	r3, #15
 8000da6:	d80a      	bhi.n	8000dbe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000da8:	2200      	movs	r2, #0
 8000daa:	6879      	ldr	r1, [r7, #4]
 8000dac:	f04f 30ff 	mov.w	r0, #4294967295
 8000db0:	f000 f927 	bl	8001002 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000db4:	4a06      	ldr	r2, [pc, #24]	@ (8000dd0 <HAL_InitTick+0x5c>)
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	e000      	b.n	8000dc0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000dbe:	2301      	movs	r3, #1
}
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	3708      	adds	r7, #8
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	20000040 	.word	0x20000040
 8000dcc:	20000048 	.word	0x20000048
 8000dd0:	20000044 	.word	0x20000044

08000dd4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dd8:	4b05      	ldr	r3, [pc, #20]	@ (8000df0 <HAL_IncTick+0x1c>)
 8000dda:	781b      	ldrb	r3, [r3, #0]
 8000ddc:	461a      	mov	r2, r3
 8000dde:	4b05      	ldr	r3, [pc, #20]	@ (8000df4 <HAL_IncTick+0x20>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	4413      	add	r3, r2
 8000de4:	4a03      	ldr	r2, [pc, #12]	@ (8000df4 <HAL_IncTick+0x20>)
 8000de6:	6013      	str	r3, [r2, #0]
}
 8000de8:	bf00      	nop
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bc80      	pop	{r7}
 8000dee:	4770      	bx	lr
 8000df0:	20000048 	.word	0x20000048
 8000df4:	200002b0 	.word	0x200002b0

08000df8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
  return uwTick;
 8000dfc:	4b02      	ldr	r3, [pc, #8]	@ (8000e08 <HAL_GetTick+0x10>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
}
 8000e00:	4618      	mov	r0, r3
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bc80      	pop	{r7}
 8000e06:	4770      	bx	lr
 8000e08:	200002b0 	.word	0x200002b0

08000e0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b084      	sub	sp, #16
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e14:	f7ff fff0 	bl	8000df8 <HAL_GetTick>
 8000e18:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e24:	d005      	beq.n	8000e32 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e26:	4b0a      	ldr	r3, [pc, #40]	@ (8000e50 <HAL_Delay+0x44>)
 8000e28:	781b      	ldrb	r3, [r3, #0]
 8000e2a:	461a      	mov	r2, r3
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	4413      	add	r3, r2
 8000e30:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e32:	bf00      	nop
 8000e34:	f7ff ffe0 	bl	8000df8 <HAL_GetTick>
 8000e38:	4602      	mov	r2, r0
 8000e3a:	68bb      	ldr	r3, [r7, #8]
 8000e3c:	1ad3      	subs	r3, r2, r3
 8000e3e:	68fa      	ldr	r2, [r7, #12]
 8000e40:	429a      	cmp	r2, r3
 8000e42:	d8f7      	bhi.n	8000e34 <HAL_Delay+0x28>
  {
  }
}
 8000e44:	bf00      	nop
 8000e46:	bf00      	nop
 8000e48:	3710      	adds	r7, #16
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	20000048 	.word	0x20000048

08000e54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e54:	b480      	push	{r7}
 8000e56:	b085      	sub	sp, #20
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	f003 0307 	and.w	r3, r3, #7
 8000e62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e64:	4b0c      	ldr	r3, [pc, #48]	@ (8000e98 <__NVIC_SetPriorityGrouping+0x44>)
 8000e66:	68db      	ldr	r3, [r3, #12]
 8000e68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e6a:	68ba      	ldr	r2, [r7, #8]
 8000e6c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e70:	4013      	ands	r3, r2
 8000e72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e78:	68bb      	ldr	r3, [r7, #8]
 8000e7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e7c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e80:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e86:	4a04      	ldr	r2, [pc, #16]	@ (8000e98 <__NVIC_SetPriorityGrouping+0x44>)
 8000e88:	68bb      	ldr	r3, [r7, #8]
 8000e8a:	60d3      	str	r3, [r2, #12]
}
 8000e8c:	bf00      	nop
 8000e8e:	3714      	adds	r7, #20
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bc80      	pop	{r7}
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop
 8000e98:	e000ed00 	.word	0xe000ed00

08000e9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ea0:	4b04      	ldr	r3, [pc, #16]	@ (8000eb4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ea2:	68db      	ldr	r3, [r3, #12]
 8000ea4:	0a1b      	lsrs	r3, r3, #8
 8000ea6:	f003 0307 	and.w	r3, r3, #7
}
 8000eaa:	4618      	mov	r0, r3
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bc80      	pop	{r7}
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop
 8000eb4:	e000ed00 	.word	0xe000ed00

08000eb8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	b083      	sub	sp, #12
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ec2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	db0b      	blt.n	8000ee2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000eca:	79fb      	ldrb	r3, [r7, #7]
 8000ecc:	f003 021f 	and.w	r2, r3, #31
 8000ed0:	4906      	ldr	r1, [pc, #24]	@ (8000eec <__NVIC_EnableIRQ+0x34>)
 8000ed2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed6:	095b      	lsrs	r3, r3, #5
 8000ed8:	2001      	movs	r0, #1
 8000eda:	fa00 f202 	lsl.w	r2, r0, r2
 8000ede:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ee2:	bf00      	nop
 8000ee4:	370c      	adds	r7, #12
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bc80      	pop	{r7}
 8000eea:	4770      	bx	lr
 8000eec:	e000e100 	.word	0xe000e100

08000ef0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b083      	sub	sp, #12
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	6039      	str	r1, [r7, #0]
 8000efa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000efc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	db0a      	blt.n	8000f1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	b2da      	uxtb	r2, r3
 8000f08:	490c      	ldr	r1, [pc, #48]	@ (8000f3c <__NVIC_SetPriority+0x4c>)
 8000f0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f0e:	0112      	lsls	r2, r2, #4
 8000f10:	b2d2      	uxtb	r2, r2
 8000f12:	440b      	add	r3, r1
 8000f14:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f18:	e00a      	b.n	8000f30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	b2da      	uxtb	r2, r3
 8000f1e:	4908      	ldr	r1, [pc, #32]	@ (8000f40 <__NVIC_SetPriority+0x50>)
 8000f20:	79fb      	ldrb	r3, [r7, #7]
 8000f22:	f003 030f 	and.w	r3, r3, #15
 8000f26:	3b04      	subs	r3, #4
 8000f28:	0112      	lsls	r2, r2, #4
 8000f2a:	b2d2      	uxtb	r2, r2
 8000f2c:	440b      	add	r3, r1
 8000f2e:	761a      	strb	r2, [r3, #24]
}
 8000f30:	bf00      	nop
 8000f32:	370c      	adds	r7, #12
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bc80      	pop	{r7}
 8000f38:	4770      	bx	lr
 8000f3a:	bf00      	nop
 8000f3c:	e000e100 	.word	0xe000e100
 8000f40:	e000ed00 	.word	0xe000ed00

08000f44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b089      	sub	sp, #36	@ 0x24
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	60f8      	str	r0, [r7, #12]
 8000f4c:	60b9      	str	r1, [r7, #8]
 8000f4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	f003 0307 	and.w	r3, r3, #7
 8000f56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f58:	69fb      	ldr	r3, [r7, #28]
 8000f5a:	f1c3 0307 	rsb	r3, r3, #7
 8000f5e:	2b04      	cmp	r3, #4
 8000f60:	bf28      	it	cs
 8000f62:	2304      	movcs	r3, #4
 8000f64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f66:	69fb      	ldr	r3, [r7, #28]
 8000f68:	3304      	adds	r3, #4
 8000f6a:	2b06      	cmp	r3, #6
 8000f6c:	d902      	bls.n	8000f74 <NVIC_EncodePriority+0x30>
 8000f6e:	69fb      	ldr	r3, [r7, #28]
 8000f70:	3b03      	subs	r3, #3
 8000f72:	e000      	b.n	8000f76 <NVIC_EncodePriority+0x32>
 8000f74:	2300      	movs	r3, #0
 8000f76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f78:	f04f 32ff 	mov.w	r2, #4294967295
 8000f7c:	69bb      	ldr	r3, [r7, #24]
 8000f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f82:	43da      	mvns	r2, r3
 8000f84:	68bb      	ldr	r3, [r7, #8]
 8000f86:	401a      	ands	r2, r3
 8000f88:	697b      	ldr	r3, [r7, #20]
 8000f8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f8c:	f04f 31ff 	mov.w	r1, #4294967295
 8000f90:	697b      	ldr	r3, [r7, #20]
 8000f92:	fa01 f303 	lsl.w	r3, r1, r3
 8000f96:	43d9      	mvns	r1, r3
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f9c:	4313      	orrs	r3, r2
         );
}
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	3724      	adds	r7, #36	@ 0x24
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bc80      	pop	{r7}
 8000fa6:	4770      	bx	lr

08000fa8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	3b01      	subs	r3, #1
 8000fb4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000fb8:	d301      	bcc.n	8000fbe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fba:	2301      	movs	r3, #1
 8000fbc:	e00f      	b.n	8000fde <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fbe:	4a0a      	ldr	r2, [pc, #40]	@ (8000fe8 <SysTick_Config+0x40>)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	3b01      	subs	r3, #1
 8000fc4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fc6:	210f      	movs	r1, #15
 8000fc8:	f04f 30ff 	mov.w	r0, #4294967295
 8000fcc:	f7ff ff90 	bl	8000ef0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fd0:	4b05      	ldr	r3, [pc, #20]	@ (8000fe8 <SysTick_Config+0x40>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fd6:	4b04      	ldr	r3, [pc, #16]	@ (8000fe8 <SysTick_Config+0x40>)
 8000fd8:	2207      	movs	r2, #7
 8000fda:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fdc:	2300      	movs	r3, #0
}
 8000fde:	4618      	mov	r0, r3
 8000fe0:	3708      	adds	r7, #8
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	e000e010 	.word	0xe000e010

08000fec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b082      	sub	sp, #8
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ff4:	6878      	ldr	r0, [r7, #4]
 8000ff6:	f7ff ff2d 	bl	8000e54 <__NVIC_SetPriorityGrouping>
}
 8000ffa:	bf00      	nop
 8000ffc:	3708      	adds	r7, #8
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}

08001002 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001002:	b580      	push	{r7, lr}
 8001004:	b086      	sub	sp, #24
 8001006:	af00      	add	r7, sp, #0
 8001008:	4603      	mov	r3, r0
 800100a:	60b9      	str	r1, [r7, #8]
 800100c:	607a      	str	r2, [r7, #4]
 800100e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001010:	2300      	movs	r3, #0
 8001012:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001014:	f7ff ff42 	bl	8000e9c <__NVIC_GetPriorityGrouping>
 8001018:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800101a:	687a      	ldr	r2, [r7, #4]
 800101c:	68b9      	ldr	r1, [r7, #8]
 800101e:	6978      	ldr	r0, [r7, #20]
 8001020:	f7ff ff90 	bl	8000f44 <NVIC_EncodePriority>
 8001024:	4602      	mov	r2, r0
 8001026:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800102a:	4611      	mov	r1, r2
 800102c:	4618      	mov	r0, r3
 800102e:	f7ff ff5f 	bl	8000ef0 <__NVIC_SetPriority>
}
 8001032:	bf00      	nop
 8001034:	3718      	adds	r7, #24
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}

0800103a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800103a:	b580      	push	{r7, lr}
 800103c:	b082      	sub	sp, #8
 800103e:	af00      	add	r7, sp, #0
 8001040:	4603      	mov	r3, r0
 8001042:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001044:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001048:	4618      	mov	r0, r3
 800104a:	f7ff ff35 	bl	8000eb8 <__NVIC_EnableIRQ>
}
 800104e:	bf00      	nop
 8001050:	3708      	adds	r7, #8
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}

08001056 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001056:	b580      	push	{r7, lr}
 8001058:	b082      	sub	sp, #8
 800105a:	af00      	add	r7, sp, #0
 800105c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800105e:	6878      	ldr	r0, [r7, #4]
 8001060:	f7ff ffa2 	bl	8000fa8 <SysTick_Config>
 8001064:	4603      	mov	r3, r0
}
 8001066:	4618      	mov	r0, r3
 8001068:	3708      	adds	r7, #8
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
	...

08001070 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001070:	b480      	push	{r7}
 8001072:	b085      	sub	sp, #20
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001078:	2300      	movs	r3, #0
 800107a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	2b00      	cmp	r3, #0
 8001080:	d101      	bne.n	8001086 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001082:	2301      	movs	r3, #1
 8001084:	e043      	b.n	800110e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	461a      	mov	r2, r3
 800108c:	4b22      	ldr	r3, [pc, #136]	@ (8001118 <HAL_DMA_Init+0xa8>)
 800108e:	4413      	add	r3, r2
 8001090:	4a22      	ldr	r2, [pc, #136]	@ (800111c <HAL_DMA_Init+0xac>)
 8001092:	fba2 2303 	umull	r2, r3, r2, r3
 8001096:	091b      	lsrs	r3, r3, #4
 8001098:	009a      	lsls	r2, r3, #2
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	4a1f      	ldr	r2, [pc, #124]	@ (8001120 <HAL_DMA_Init+0xb0>)
 80010a2:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	2202      	movs	r2, #2
 80010a8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80010ba:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80010be:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80010c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	68db      	ldr	r3, [r3, #12]
 80010ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80010d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	695b      	ldr	r3, [r3, #20]
 80010da:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80010e0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	69db      	ldr	r3, [r3, #28]
 80010e6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80010e8:	68fa      	ldr	r2, [r7, #12]
 80010ea:	4313      	orrs	r3, r2
 80010ec:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	68fa      	ldr	r2, [r7, #12]
 80010f4:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	2200      	movs	r2, #0
 80010fa:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	2201      	movs	r2, #1
 8001100:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	2200      	movs	r2, #0
 8001108:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800110c:	2300      	movs	r3, #0
}
 800110e:	4618      	mov	r0, r3
 8001110:	3714      	adds	r7, #20
 8001112:	46bd      	mov	sp, r7
 8001114:	bc80      	pop	{r7}
 8001116:	4770      	bx	lr
 8001118:	bffdfff8 	.word	0xbffdfff8
 800111c:	cccccccd 	.word	0xcccccccd
 8001120:	40020000 	.word	0x40020000

08001124 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b086      	sub	sp, #24
 8001128:	af00      	add	r7, sp, #0
 800112a:	60f8      	str	r0, [r7, #12]
 800112c:	60b9      	str	r1, [r7, #8]
 800112e:	607a      	str	r2, [r7, #4]
 8001130:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001132:	2300      	movs	r3, #0
 8001134:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	f893 3020 	ldrb.w	r3, [r3, #32]
 800113c:	2b01      	cmp	r3, #1
 800113e:	d101      	bne.n	8001144 <HAL_DMA_Start_IT+0x20>
 8001140:	2302      	movs	r3, #2
 8001142:	e04b      	b.n	80011dc <HAL_DMA_Start_IT+0xb8>
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	2201      	movs	r2, #1
 8001148:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001152:	b2db      	uxtb	r3, r3
 8001154:	2b01      	cmp	r3, #1
 8001156:	d13a      	bne.n	80011ce <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	2202      	movs	r2, #2
 800115c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	2200      	movs	r2, #0
 8001164:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	681a      	ldr	r2, [r3, #0]
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	f022 0201 	bic.w	r2, r2, #1
 8001174:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	687a      	ldr	r2, [r7, #4]
 800117a:	68b9      	ldr	r1, [r7, #8]
 800117c:	68f8      	ldr	r0, [r7, #12]
 800117e:	f000 f9eb 	bl	8001558 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001186:	2b00      	cmp	r3, #0
 8001188:	d008      	beq.n	800119c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	681a      	ldr	r2, [r3, #0]
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f042 020e 	orr.w	r2, r2, #14
 8001198:	601a      	str	r2, [r3, #0]
 800119a:	e00f      	b.n	80011bc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	681a      	ldr	r2, [r3, #0]
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f022 0204 	bic.w	r2, r2, #4
 80011aa:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	681a      	ldr	r2, [r3, #0]
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f042 020a 	orr.w	r2, r2, #10
 80011ba:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	681a      	ldr	r2, [r3, #0]
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f042 0201 	orr.w	r2, r2, #1
 80011ca:	601a      	str	r2, [r3, #0]
 80011cc:	e005      	b.n	80011da <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	2200      	movs	r2, #0
 80011d2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80011d6:	2302      	movs	r3, #2
 80011d8:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80011da:	7dfb      	ldrb	r3, [r7, #23]
}
 80011dc:	4618      	mov	r0, r3
 80011de:	3718      	adds	r7, #24
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}

080011e4 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b085      	sub	sp, #20
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80011ec:	2300      	movs	r3, #0
 80011ee:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80011f6:	b2db      	uxtb	r3, r3
 80011f8:	2b02      	cmp	r3, #2
 80011fa:	d008      	beq.n	800120e <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	2204      	movs	r2, #4
 8001200:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	2200      	movs	r2, #0
 8001206:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800120a:	2301      	movs	r3, #1
 800120c:	e020      	b.n	8001250 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	681a      	ldr	r2, [r3, #0]
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f022 020e 	bic.w	r2, r2, #14
 800121c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	681a      	ldr	r2, [r3, #0]
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f022 0201 	bic.w	r2, r2, #1
 800122c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001236:	2101      	movs	r1, #1
 8001238:	fa01 f202 	lsl.w	r2, r1, r2
 800123c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	2201      	movs	r2, #1
 8001242:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	2200      	movs	r2, #0
 800124a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800124e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001250:	4618      	mov	r0, r3
 8001252:	3714      	adds	r7, #20
 8001254:	46bd      	mov	sp, r7
 8001256:	bc80      	pop	{r7}
 8001258:	4770      	bx	lr
	...

0800125c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800125c:	b580      	push	{r7, lr}
 800125e:	b084      	sub	sp, #16
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001264:	2300      	movs	r3, #0
 8001266:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800126e:	b2db      	uxtb	r3, r3
 8001270:	2b02      	cmp	r3, #2
 8001272:	d005      	beq.n	8001280 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	2204      	movs	r2, #4
 8001278:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 800127a:	2301      	movs	r3, #1
 800127c:	73fb      	strb	r3, [r7, #15]
 800127e:	e051      	b.n	8001324 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	681a      	ldr	r2, [r3, #0]
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f022 020e 	bic.w	r2, r2, #14
 800128e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	681a      	ldr	r2, [r3, #0]
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f022 0201 	bic.w	r2, r2, #1
 800129e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4a22      	ldr	r2, [pc, #136]	@ (8001330 <HAL_DMA_Abort_IT+0xd4>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d029      	beq.n	80012fe <HAL_DMA_Abort_IT+0xa2>
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	4a21      	ldr	r2, [pc, #132]	@ (8001334 <HAL_DMA_Abort_IT+0xd8>)
 80012b0:	4293      	cmp	r3, r2
 80012b2:	d022      	beq.n	80012fa <HAL_DMA_Abort_IT+0x9e>
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a1f      	ldr	r2, [pc, #124]	@ (8001338 <HAL_DMA_Abort_IT+0xdc>)
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d01a      	beq.n	80012f4 <HAL_DMA_Abort_IT+0x98>
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	4a1e      	ldr	r2, [pc, #120]	@ (800133c <HAL_DMA_Abort_IT+0xe0>)
 80012c4:	4293      	cmp	r3, r2
 80012c6:	d012      	beq.n	80012ee <HAL_DMA_Abort_IT+0x92>
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4a1c      	ldr	r2, [pc, #112]	@ (8001340 <HAL_DMA_Abort_IT+0xe4>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d00a      	beq.n	80012e8 <HAL_DMA_Abort_IT+0x8c>
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	4a1b      	ldr	r2, [pc, #108]	@ (8001344 <HAL_DMA_Abort_IT+0xe8>)
 80012d8:	4293      	cmp	r3, r2
 80012da:	d102      	bne.n	80012e2 <HAL_DMA_Abort_IT+0x86>
 80012dc:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80012e0:	e00e      	b.n	8001300 <HAL_DMA_Abort_IT+0xa4>
 80012e2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80012e6:	e00b      	b.n	8001300 <HAL_DMA_Abort_IT+0xa4>
 80012e8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80012ec:	e008      	b.n	8001300 <HAL_DMA_Abort_IT+0xa4>
 80012ee:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012f2:	e005      	b.n	8001300 <HAL_DMA_Abort_IT+0xa4>
 80012f4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80012f8:	e002      	b.n	8001300 <HAL_DMA_Abort_IT+0xa4>
 80012fa:	2310      	movs	r3, #16
 80012fc:	e000      	b.n	8001300 <HAL_DMA_Abort_IT+0xa4>
 80012fe:	2301      	movs	r3, #1
 8001300:	4a11      	ldr	r2, [pc, #68]	@ (8001348 <HAL_DMA_Abort_IT+0xec>)
 8001302:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	2201      	movs	r2, #1
 8001308:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	2200      	movs	r2, #0
 8001310:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001318:	2b00      	cmp	r3, #0
 800131a:	d003      	beq.n	8001324 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001320:	6878      	ldr	r0, [r7, #4]
 8001322:	4798      	blx	r3
    } 
  }
  return status;
 8001324:	7bfb      	ldrb	r3, [r7, #15]
}
 8001326:	4618      	mov	r0, r3
 8001328:	3710      	adds	r7, #16
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	40020008 	.word	0x40020008
 8001334:	4002001c 	.word	0x4002001c
 8001338:	40020030 	.word	0x40020030
 800133c:	40020044 	.word	0x40020044
 8001340:	40020058 	.word	0x40020058
 8001344:	4002006c 	.word	0x4002006c
 8001348:	40020000 	.word	0x40020000

0800134c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b084      	sub	sp, #16
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001368:	2204      	movs	r2, #4
 800136a:	409a      	lsls	r2, r3
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	4013      	ands	r3, r2
 8001370:	2b00      	cmp	r3, #0
 8001372:	d04f      	beq.n	8001414 <HAL_DMA_IRQHandler+0xc8>
 8001374:	68bb      	ldr	r3, [r7, #8]
 8001376:	f003 0304 	and.w	r3, r3, #4
 800137a:	2b00      	cmp	r3, #0
 800137c:	d04a      	beq.n	8001414 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f003 0320 	and.w	r3, r3, #32
 8001388:	2b00      	cmp	r3, #0
 800138a:	d107      	bne.n	800139c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	681a      	ldr	r2, [r3, #0]
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f022 0204 	bic.w	r2, r2, #4
 800139a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4a66      	ldr	r2, [pc, #408]	@ (800153c <HAL_DMA_IRQHandler+0x1f0>)
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d029      	beq.n	80013fa <HAL_DMA_IRQHandler+0xae>
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4a65      	ldr	r2, [pc, #404]	@ (8001540 <HAL_DMA_IRQHandler+0x1f4>)
 80013ac:	4293      	cmp	r3, r2
 80013ae:	d022      	beq.n	80013f6 <HAL_DMA_IRQHandler+0xaa>
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4a63      	ldr	r2, [pc, #396]	@ (8001544 <HAL_DMA_IRQHandler+0x1f8>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d01a      	beq.n	80013f0 <HAL_DMA_IRQHandler+0xa4>
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	4a62      	ldr	r2, [pc, #392]	@ (8001548 <HAL_DMA_IRQHandler+0x1fc>)
 80013c0:	4293      	cmp	r3, r2
 80013c2:	d012      	beq.n	80013ea <HAL_DMA_IRQHandler+0x9e>
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4a60      	ldr	r2, [pc, #384]	@ (800154c <HAL_DMA_IRQHandler+0x200>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d00a      	beq.n	80013e4 <HAL_DMA_IRQHandler+0x98>
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	4a5f      	ldr	r2, [pc, #380]	@ (8001550 <HAL_DMA_IRQHandler+0x204>)
 80013d4:	4293      	cmp	r3, r2
 80013d6:	d102      	bne.n	80013de <HAL_DMA_IRQHandler+0x92>
 80013d8:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80013dc:	e00e      	b.n	80013fc <HAL_DMA_IRQHandler+0xb0>
 80013de:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80013e2:	e00b      	b.n	80013fc <HAL_DMA_IRQHandler+0xb0>
 80013e4:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80013e8:	e008      	b.n	80013fc <HAL_DMA_IRQHandler+0xb0>
 80013ea:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80013ee:	e005      	b.n	80013fc <HAL_DMA_IRQHandler+0xb0>
 80013f0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80013f4:	e002      	b.n	80013fc <HAL_DMA_IRQHandler+0xb0>
 80013f6:	2340      	movs	r3, #64	@ 0x40
 80013f8:	e000      	b.n	80013fc <HAL_DMA_IRQHandler+0xb0>
 80013fa:	2304      	movs	r3, #4
 80013fc:	4a55      	ldr	r2, [pc, #340]	@ (8001554 <HAL_DMA_IRQHandler+0x208>)
 80013fe:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001404:	2b00      	cmp	r3, #0
 8001406:	f000 8094 	beq.w	8001532 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800140e:	6878      	ldr	r0, [r7, #4]
 8001410:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001412:	e08e      	b.n	8001532 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001418:	2202      	movs	r2, #2
 800141a:	409a      	lsls	r2, r3
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	4013      	ands	r3, r2
 8001420:	2b00      	cmp	r3, #0
 8001422:	d056      	beq.n	80014d2 <HAL_DMA_IRQHandler+0x186>
 8001424:	68bb      	ldr	r3, [r7, #8]
 8001426:	f003 0302 	and.w	r3, r3, #2
 800142a:	2b00      	cmp	r3, #0
 800142c:	d051      	beq.n	80014d2 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f003 0320 	and.w	r3, r3, #32
 8001438:	2b00      	cmp	r3, #0
 800143a:	d10b      	bne.n	8001454 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	681a      	ldr	r2, [r3, #0]
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f022 020a 	bic.w	r2, r2, #10
 800144a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	2201      	movs	r2, #1
 8001450:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4a38      	ldr	r2, [pc, #224]	@ (800153c <HAL_DMA_IRQHandler+0x1f0>)
 800145a:	4293      	cmp	r3, r2
 800145c:	d029      	beq.n	80014b2 <HAL_DMA_IRQHandler+0x166>
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4a37      	ldr	r2, [pc, #220]	@ (8001540 <HAL_DMA_IRQHandler+0x1f4>)
 8001464:	4293      	cmp	r3, r2
 8001466:	d022      	beq.n	80014ae <HAL_DMA_IRQHandler+0x162>
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a35      	ldr	r2, [pc, #212]	@ (8001544 <HAL_DMA_IRQHandler+0x1f8>)
 800146e:	4293      	cmp	r3, r2
 8001470:	d01a      	beq.n	80014a8 <HAL_DMA_IRQHandler+0x15c>
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	4a34      	ldr	r2, [pc, #208]	@ (8001548 <HAL_DMA_IRQHandler+0x1fc>)
 8001478:	4293      	cmp	r3, r2
 800147a:	d012      	beq.n	80014a2 <HAL_DMA_IRQHandler+0x156>
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a32      	ldr	r2, [pc, #200]	@ (800154c <HAL_DMA_IRQHandler+0x200>)
 8001482:	4293      	cmp	r3, r2
 8001484:	d00a      	beq.n	800149c <HAL_DMA_IRQHandler+0x150>
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	4a31      	ldr	r2, [pc, #196]	@ (8001550 <HAL_DMA_IRQHandler+0x204>)
 800148c:	4293      	cmp	r3, r2
 800148e:	d102      	bne.n	8001496 <HAL_DMA_IRQHandler+0x14a>
 8001490:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001494:	e00e      	b.n	80014b4 <HAL_DMA_IRQHandler+0x168>
 8001496:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800149a:	e00b      	b.n	80014b4 <HAL_DMA_IRQHandler+0x168>
 800149c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80014a0:	e008      	b.n	80014b4 <HAL_DMA_IRQHandler+0x168>
 80014a2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80014a6:	e005      	b.n	80014b4 <HAL_DMA_IRQHandler+0x168>
 80014a8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80014ac:	e002      	b.n	80014b4 <HAL_DMA_IRQHandler+0x168>
 80014ae:	2320      	movs	r3, #32
 80014b0:	e000      	b.n	80014b4 <HAL_DMA_IRQHandler+0x168>
 80014b2:	2302      	movs	r3, #2
 80014b4:	4a27      	ldr	r2, [pc, #156]	@ (8001554 <HAL_DMA_IRQHandler+0x208>)
 80014b6:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	2200      	movs	r2, #0
 80014bc:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d034      	beq.n	8001532 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014cc:	6878      	ldr	r0, [r7, #4]
 80014ce:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80014d0:	e02f      	b.n	8001532 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014d6:	2208      	movs	r2, #8
 80014d8:	409a      	lsls	r2, r3
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	4013      	ands	r3, r2
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d028      	beq.n	8001534 <HAL_DMA_IRQHandler+0x1e8>
 80014e2:	68bb      	ldr	r3, [r7, #8]
 80014e4:	f003 0308 	and.w	r3, r3, #8
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d023      	beq.n	8001534 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	681a      	ldr	r2, [r3, #0]
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f022 020e 	bic.w	r2, r2, #14
 80014fa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001504:	2101      	movs	r1, #1
 8001506:	fa01 f202 	lsl.w	r2, r1, r2
 800150a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	2201      	movs	r2, #1
 8001510:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	2201      	movs	r2, #1
 8001516:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	2200      	movs	r2, #0
 800151e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001526:	2b00      	cmp	r3, #0
 8001528:	d004      	beq.n	8001534 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800152e:	6878      	ldr	r0, [r7, #4]
 8001530:	4798      	blx	r3
    }
  }
  return;
 8001532:	bf00      	nop
 8001534:	bf00      	nop
}
 8001536:	3710      	adds	r7, #16
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}
 800153c:	40020008 	.word	0x40020008
 8001540:	4002001c 	.word	0x4002001c
 8001544:	40020030 	.word	0x40020030
 8001548:	40020044 	.word	0x40020044
 800154c:	40020058 	.word	0x40020058
 8001550:	4002006c 	.word	0x4002006c
 8001554:	40020000 	.word	0x40020000

08001558 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001558:	b480      	push	{r7}
 800155a:	b085      	sub	sp, #20
 800155c:	af00      	add	r7, sp, #0
 800155e:	60f8      	str	r0, [r7, #12]
 8001560:	60b9      	str	r1, [r7, #8]
 8001562:	607a      	str	r2, [r7, #4]
 8001564:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800156e:	2101      	movs	r1, #1
 8001570:	fa01 f202 	lsl.w	r2, r1, r2
 8001574:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	683a      	ldr	r2, [r7, #0]
 800157c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	2b10      	cmp	r3, #16
 8001584:	d108      	bne.n	8001598 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	687a      	ldr	r2, [r7, #4]
 800158c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	68ba      	ldr	r2, [r7, #8]
 8001594:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001596:	e007      	b.n	80015a8 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	68ba      	ldr	r2, [r7, #8]
 800159e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	687a      	ldr	r2, [r7, #4]
 80015a6:	60da      	str	r2, [r3, #12]
}
 80015a8:	bf00      	nop
 80015aa:	3714      	adds	r7, #20
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bc80      	pop	{r7}
 80015b0:	4770      	bx	lr
	...

080015b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b08b      	sub	sp, #44	@ 0x2c
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
 80015bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80015be:	2300      	movs	r3, #0
 80015c0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80015c2:	2300      	movs	r3, #0
 80015c4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015c6:	e169      	b.n	800189c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80015c8:	2201      	movs	r2, #1
 80015ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015cc:	fa02 f303 	lsl.w	r3, r2, r3
 80015d0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	69fa      	ldr	r2, [r7, #28]
 80015d8:	4013      	ands	r3, r2
 80015da:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80015dc:	69ba      	ldr	r2, [r7, #24]
 80015de:	69fb      	ldr	r3, [r7, #28]
 80015e0:	429a      	cmp	r2, r3
 80015e2:	f040 8158 	bne.w	8001896 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	4a9a      	ldr	r2, [pc, #616]	@ (8001854 <HAL_GPIO_Init+0x2a0>)
 80015ec:	4293      	cmp	r3, r2
 80015ee:	d05e      	beq.n	80016ae <HAL_GPIO_Init+0xfa>
 80015f0:	4a98      	ldr	r2, [pc, #608]	@ (8001854 <HAL_GPIO_Init+0x2a0>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d875      	bhi.n	80016e2 <HAL_GPIO_Init+0x12e>
 80015f6:	4a98      	ldr	r2, [pc, #608]	@ (8001858 <HAL_GPIO_Init+0x2a4>)
 80015f8:	4293      	cmp	r3, r2
 80015fa:	d058      	beq.n	80016ae <HAL_GPIO_Init+0xfa>
 80015fc:	4a96      	ldr	r2, [pc, #600]	@ (8001858 <HAL_GPIO_Init+0x2a4>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d86f      	bhi.n	80016e2 <HAL_GPIO_Init+0x12e>
 8001602:	4a96      	ldr	r2, [pc, #600]	@ (800185c <HAL_GPIO_Init+0x2a8>)
 8001604:	4293      	cmp	r3, r2
 8001606:	d052      	beq.n	80016ae <HAL_GPIO_Init+0xfa>
 8001608:	4a94      	ldr	r2, [pc, #592]	@ (800185c <HAL_GPIO_Init+0x2a8>)
 800160a:	4293      	cmp	r3, r2
 800160c:	d869      	bhi.n	80016e2 <HAL_GPIO_Init+0x12e>
 800160e:	4a94      	ldr	r2, [pc, #592]	@ (8001860 <HAL_GPIO_Init+0x2ac>)
 8001610:	4293      	cmp	r3, r2
 8001612:	d04c      	beq.n	80016ae <HAL_GPIO_Init+0xfa>
 8001614:	4a92      	ldr	r2, [pc, #584]	@ (8001860 <HAL_GPIO_Init+0x2ac>)
 8001616:	4293      	cmp	r3, r2
 8001618:	d863      	bhi.n	80016e2 <HAL_GPIO_Init+0x12e>
 800161a:	4a92      	ldr	r2, [pc, #584]	@ (8001864 <HAL_GPIO_Init+0x2b0>)
 800161c:	4293      	cmp	r3, r2
 800161e:	d046      	beq.n	80016ae <HAL_GPIO_Init+0xfa>
 8001620:	4a90      	ldr	r2, [pc, #576]	@ (8001864 <HAL_GPIO_Init+0x2b0>)
 8001622:	4293      	cmp	r3, r2
 8001624:	d85d      	bhi.n	80016e2 <HAL_GPIO_Init+0x12e>
 8001626:	2b12      	cmp	r3, #18
 8001628:	d82a      	bhi.n	8001680 <HAL_GPIO_Init+0xcc>
 800162a:	2b12      	cmp	r3, #18
 800162c:	d859      	bhi.n	80016e2 <HAL_GPIO_Init+0x12e>
 800162e:	a201      	add	r2, pc, #4	@ (adr r2, 8001634 <HAL_GPIO_Init+0x80>)
 8001630:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001634:	080016af 	.word	0x080016af
 8001638:	08001689 	.word	0x08001689
 800163c:	0800169b 	.word	0x0800169b
 8001640:	080016dd 	.word	0x080016dd
 8001644:	080016e3 	.word	0x080016e3
 8001648:	080016e3 	.word	0x080016e3
 800164c:	080016e3 	.word	0x080016e3
 8001650:	080016e3 	.word	0x080016e3
 8001654:	080016e3 	.word	0x080016e3
 8001658:	080016e3 	.word	0x080016e3
 800165c:	080016e3 	.word	0x080016e3
 8001660:	080016e3 	.word	0x080016e3
 8001664:	080016e3 	.word	0x080016e3
 8001668:	080016e3 	.word	0x080016e3
 800166c:	080016e3 	.word	0x080016e3
 8001670:	080016e3 	.word	0x080016e3
 8001674:	080016e3 	.word	0x080016e3
 8001678:	08001691 	.word	0x08001691
 800167c:	080016a5 	.word	0x080016a5
 8001680:	4a79      	ldr	r2, [pc, #484]	@ (8001868 <HAL_GPIO_Init+0x2b4>)
 8001682:	4293      	cmp	r3, r2
 8001684:	d013      	beq.n	80016ae <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001686:	e02c      	b.n	80016e2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	68db      	ldr	r3, [r3, #12]
 800168c:	623b      	str	r3, [r7, #32]
          break;
 800168e:	e029      	b.n	80016e4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	68db      	ldr	r3, [r3, #12]
 8001694:	3304      	adds	r3, #4
 8001696:	623b      	str	r3, [r7, #32]
          break;
 8001698:	e024      	b.n	80016e4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	68db      	ldr	r3, [r3, #12]
 800169e:	3308      	adds	r3, #8
 80016a0:	623b      	str	r3, [r7, #32]
          break;
 80016a2:	e01f      	b.n	80016e4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	68db      	ldr	r3, [r3, #12]
 80016a8:	330c      	adds	r3, #12
 80016aa:	623b      	str	r3, [r7, #32]
          break;
 80016ac:	e01a      	b.n	80016e4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	689b      	ldr	r3, [r3, #8]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d102      	bne.n	80016bc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80016b6:	2304      	movs	r3, #4
 80016b8:	623b      	str	r3, [r7, #32]
          break;
 80016ba:	e013      	b.n	80016e4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	689b      	ldr	r3, [r3, #8]
 80016c0:	2b01      	cmp	r3, #1
 80016c2:	d105      	bne.n	80016d0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80016c4:	2308      	movs	r3, #8
 80016c6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	69fa      	ldr	r2, [r7, #28]
 80016cc:	611a      	str	r2, [r3, #16]
          break;
 80016ce:	e009      	b.n	80016e4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80016d0:	2308      	movs	r3, #8
 80016d2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	69fa      	ldr	r2, [r7, #28]
 80016d8:	615a      	str	r2, [r3, #20]
          break;
 80016da:	e003      	b.n	80016e4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80016dc:	2300      	movs	r3, #0
 80016de:	623b      	str	r3, [r7, #32]
          break;
 80016e0:	e000      	b.n	80016e4 <HAL_GPIO_Init+0x130>
          break;
 80016e2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80016e4:	69bb      	ldr	r3, [r7, #24]
 80016e6:	2bff      	cmp	r3, #255	@ 0xff
 80016e8:	d801      	bhi.n	80016ee <HAL_GPIO_Init+0x13a>
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	e001      	b.n	80016f2 <HAL_GPIO_Init+0x13e>
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	3304      	adds	r3, #4
 80016f2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80016f4:	69bb      	ldr	r3, [r7, #24]
 80016f6:	2bff      	cmp	r3, #255	@ 0xff
 80016f8:	d802      	bhi.n	8001700 <HAL_GPIO_Init+0x14c>
 80016fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016fc:	009b      	lsls	r3, r3, #2
 80016fe:	e002      	b.n	8001706 <HAL_GPIO_Init+0x152>
 8001700:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001702:	3b08      	subs	r3, #8
 8001704:	009b      	lsls	r3, r3, #2
 8001706:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001708:	697b      	ldr	r3, [r7, #20]
 800170a:	681a      	ldr	r2, [r3, #0]
 800170c:	210f      	movs	r1, #15
 800170e:	693b      	ldr	r3, [r7, #16]
 8001710:	fa01 f303 	lsl.w	r3, r1, r3
 8001714:	43db      	mvns	r3, r3
 8001716:	401a      	ands	r2, r3
 8001718:	6a39      	ldr	r1, [r7, #32]
 800171a:	693b      	ldr	r3, [r7, #16]
 800171c:	fa01 f303 	lsl.w	r3, r1, r3
 8001720:	431a      	orrs	r2, r3
 8001722:	697b      	ldr	r3, [r7, #20]
 8001724:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800172e:	2b00      	cmp	r3, #0
 8001730:	f000 80b1 	beq.w	8001896 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001734:	4b4d      	ldr	r3, [pc, #308]	@ (800186c <HAL_GPIO_Init+0x2b8>)
 8001736:	699b      	ldr	r3, [r3, #24]
 8001738:	4a4c      	ldr	r2, [pc, #304]	@ (800186c <HAL_GPIO_Init+0x2b8>)
 800173a:	f043 0301 	orr.w	r3, r3, #1
 800173e:	6193      	str	r3, [r2, #24]
 8001740:	4b4a      	ldr	r3, [pc, #296]	@ (800186c <HAL_GPIO_Init+0x2b8>)
 8001742:	699b      	ldr	r3, [r3, #24]
 8001744:	f003 0301 	and.w	r3, r3, #1
 8001748:	60bb      	str	r3, [r7, #8]
 800174a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800174c:	4a48      	ldr	r2, [pc, #288]	@ (8001870 <HAL_GPIO_Init+0x2bc>)
 800174e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001750:	089b      	lsrs	r3, r3, #2
 8001752:	3302      	adds	r3, #2
 8001754:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001758:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800175a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800175c:	f003 0303 	and.w	r3, r3, #3
 8001760:	009b      	lsls	r3, r3, #2
 8001762:	220f      	movs	r2, #15
 8001764:	fa02 f303 	lsl.w	r3, r2, r3
 8001768:	43db      	mvns	r3, r3
 800176a:	68fa      	ldr	r2, [r7, #12]
 800176c:	4013      	ands	r3, r2
 800176e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	4a40      	ldr	r2, [pc, #256]	@ (8001874 <HAL_GPIO_Init+0x2c0>)
 8001774:	4293      	cmp	r3, r2
 8001776:	d013      	beq.n	80017a0 <HAL_GPIO_Init+0x1ec>
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	4a3f      	ldr	r2, [pc, #252]	@ (8001878 <HAL_GPIO_Init+0x2c4>)
 800177c:	4293      	cmp	r3, r2
 800177e:	d00d      	beq.n	800179c <HAL_GPIO_Init+0x1e8>
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	4a3e      	ldr	r2, [pc, #248]	@ (800187c <HAL_GPIO_Init+0x2c8>)
 8001784:	4293      	cmp	r3, r2
 8001786:	d007      	beq.n	8001798 <HAL_GPIO_Init+0x1e4>
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	4a3d      	ldr	r2, [pc, #244]	@ (8001880 <HAL_GPIO_Init+0x2cc>)
 800178c:	4293      	cmp	r3, r2
 800178e:	d101      	bne.n	8001794 <HAL_GPIO_Init+0x1e0>
 8001790:	2303      	movs	r3, #3
 8001792:	e006      	b.n	80017a2 <HAL_GPIO_Init+0x1ee>
 8001794:	2304      	movs	r3, #4
 8001796:	e004      	b.n	80017a2 <HAL_GPIO_Init+0x1ee>
 8001798:	2302      	movs	r3, #2
 800179a:	e002      	b.n	80017a2 <HAL_GPIO_Init+0x1ee>
 800179c:	2301      	movs	r3, #1
 800179e:	e000      	b.n	80017a2 <HAL_GPIO_Init+0x1ee>
 80017a0:	2300      	movs	r3, #0
 80017a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80017a4:	f002 0203 	and.w	r2, r2, #3
 80017a8:	0092      	lsls	r2, r2, #2
 80017aa:	4093      	lsls	r3, r2
 80017ac:	68fa      	ldr	r2, [r7, #12]
 80017ae:	4313      	orrs	r3, r2
 80017b0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80017b2:	492f      	ldr	r1, [pc, #188]	@ (8001870 <HAL_GPIO_Init+0x2bc>)
 80017b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017b6:	089b      	lsrs	r3, r3, #2
 80017b8:	3302      	adds	r3, #2
 80017ba:	68fa      	ldr	r2, [r7, #12]
 80017bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d006      	beq.n	80017da <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80017cc:	4b2d      	ldr	r3, [pc, #180]	@ (8001884 <HAL_GPIO_Init+0x2d0>)
 80017ce:	689a      	ldr	r2, [r3, #8]
 80017d0:	492c      	ldr	r1, [pc, #176]	@ (8001884 <HAL_GPIO_Init+0x2d0>)
 80017d2:	69bb      	ldr	r3, [r7, #24]
 80017d4:	4313      	orrs	r3, r2
 80017d6:	608b      	str	r3, [r1, #8]
 80017d8:	e006      	b.n	80017e8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80017da:	4b2a      	ldr	r3, [pc, #168]	@ (8001884 <HAL_GPIO_Init+0x2d0>)
 80017dc:	689a      	ldr	r2, [r3, #8]
 80017de:	69bb      	ldr	r3, [r7, #24]
 80017e0:	43db      	mvns	r3, r3
 80017e2:	4928      	ldr	r1, [pc, #160]	@ (8001884 <HAL_GPIO_Init+0x2d0>)
 80017e4:	4013      	ands	r3, r2
 80017e6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d006      	beq.n	8001802 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80017f4:	4b23      	ldr	r3, [pc, #140]	@ (8001884 <HAL_GPIO_Init+0x2d0>)
 80017f6:	68da      	ldr	r2, [r3, #12]
 80017f8:	4922      	ldr	r1, [pc, #136]	@ (8001884 <HAL_GPIO_Init+0x2d0>)
 80017fa:	69bb      	ldr	r3, [r7, #24]
 80017fc:	4313      	orrs	r3, r2
 80017fe:	60cb      	str	r3, [r1, #12]
 8001800:	e006      	b.n	8001810 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001802:	4b20      	ldr	r3, [pc, #128]	@ (8001884 <HAL_GPIO_Init+0x2d0>)
 8001804:	68da      	ldr	r2, [r3, #12]
 8001806:	69bb      	ldr	r3, [r7, #24]
 8001808:	43db      	mvns	r3, r3
 800180a:	491e      	ldr	r1, [pc, #120]	@ (8001884 <HAL_GPIO_Init+0x2d0>)
 800180c:	4013      	ands	r3, r2
 800180e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001818:	2b00      	cmp	r3, #0
 800181a:	d006      	beq.n	800182a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800181c:	4b19      	ldr	r3, [pc, #100]	@ (8001884 <HAL_GPIO_Init+0x2d0>)
 800181e:	685a      	ldr	r2, [r3, #4]
 8001820:	4918      	ldr	r1, [pc, #96]	@ (8001884 <HAL_GPIO_Init+0x2d0>)
 8001822:	69bb      	ldr	r3, [r7, #24]
 8001824:	4313      	orrs	r3, r2
 8001826:	604b      	str	r3, [r1, #4]
 8001828:	e006      	b.n	8001838 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800182a:	4b16      	ldr	r3, [pc, #88]	@ (8001884 <HAL_GPIO_Init+0x2d0>)
 800182c:	685a      	ldr	r2, [r3, #4]
 800182e:	69bb      	ldr	r3, [r7, #24]
 8001830:	43db      	mvns	r3, r3
 8001832:	4914      	ldr	r1, [pc, #80]	@ (8001884 <HAL_GPIO_Init+0x2d0>)
 8001834:	4013      	ands	r3, r2
 8001836:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001840:	2b00      	cmp	r3, #0
 8001842:	d021      	beq.n	8001888 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001844:	4b0f      	ldr	r3, [pc, #60]	@ (8001884 <HAL_GPIO_Init+0x2d0>)
 8001846:	681a      	ldr	r2, [r3, #0]
 8001848:	490e      	ldr	r1, [pc, #56]	@ (8001884 <HAL_GPIO_Init+0x2d0>)
 800184a:	69bb      	ldr	r3, [r7, #24]
 800184c:	4313      	orrs	r3, r2
 800184e:	600b      	str	r3, [r1, #0]
 8001850:	e021      	b.n	8001896 <HAL_GPIO_Init+0x2e2>
 8001852:	bf00      	nop
 8001854:	10320000 	.word	0x10320000
 8001858:	10310000 	.word	0x10310000
 800185c:	10220000 	.word	0x10220000
 8001860:	10210000 	.word	0x10210000
 8001864:	10120000 	.word	0x10120000
 8001868:	10110000 	.word	0x10110000
 800186c:	40021000 	.word	0x40021000
 8001870:	40010000 	.word	0x40010000
 8001874:	40010800 	.word	0x40010800
 8001878:	40010c00 	.word	0x40010c00
 800187c:	40011000 	.word	0x40011000
 8001880:	40011400 	.word	0x40011400
 8001884:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001888:	4b0b      	ldr	r3, [pc, #44]	@ (80018b8 <HAL_GPIO_Init+0x304>)
 800188a:	681a      	ldr	r2, [r3, #0]
 800188c:	69bb      	ldr	r3, [r7, #24]
 800188e:	43db      	mvns	r3, r3
 8001890:	4909      	ldr	r1, [pc, #36]	@ (80018b8 <HAL_GPIO_Init+0x304>)
 8001892:	4013      	ands	r3, r2
 8001894:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001896:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001898:	3301      	adds	r3, #1
 800189a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	681a      	ldr	r2, [r3, #0]
 80018a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018a2:	fa22 f303 	lsr.w	r3, r2, r3
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	f47f ae8e 	bne.w	80015c8 <HAL_GPIO_Init+0x14>
  }
}
 80018ac:	bf00      	nop
 80018ae:	bf00      	nop
 80018b0:	372c      	adds	r7, #44	@ 0x2c
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bc80      	pop	{r7}
 80018b6:	4770      	bx	lr
 80018b8:	40010400 	.word	0x40010400

080018bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018bc:	b480      	push	{r7}
 80018be:	b083      	sub	sp, #12
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
 80018c4:	460b      	mov	r3, r1
 80018c6:	807b      	strh	r3, [r7, #2]
 80018c8:	4613      	mov	r3, r2
 80018ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80018cc:	787b      	ldrb	r3, [r7, #1]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d003      	beq.n	80018da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80018d2:	887a      	ldrh	r2, [r7, #2]
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80018d8:	e003      	b.n	80018e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80018da:	887b      	ldrh	r3, [r7, #2]
 80018dc:	041a      	lsls	r2, r3, #16
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	611a      	str	r2, [r3, #16]
}
 80018e2:	bf00      	nop
 80018e4:	370c      	adds	r7, #12
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bc80      	pop	{r7}
 80018ea:	4770      	bx	lr

080018ec <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b082      	sub	sp, #8
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	4603      	mov	r3, r0
 80018f4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80018f6:	4b08      	ldr	r3, [pc, #32]	@ (8001918 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80018f8:	695a      	ldr	r2, [r3, #20]
 80018fa:	88fb      	ldrh	r3, [r7, #6]
 80018fc:	4013      	ands	r3, r2
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d006      	beq.n	8001910 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001902:	4a05      	ldr	r2, [pc, #20]	@ (8001918 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001904:	88fb      	ldrh	r3, [r7, #6]
 8001906:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001908:	88fb      	ldrh	r3, [r7, #6]
 800190a:	4618      	mov	r0, r3
 800190c:	f7fe ffa0 	bl	8000850 <HAL_GPIO_EXTI_Callback>
  }
}
 8001910:	bf00      	nop
 8001912:	3708      	adds	r7, #8
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}
 8001918:	40010400 	.word	0x40010400

0800191c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b084      	sub	sp, #16
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d101      	bne.n	800192e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800192a:	2301      	movs	r3, #1
 800192c:	e12b      	b.n	8001b86 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001934:	b2db      	uxtb	r3, r3
 8001936:	2b00      	cmp	r3, #0
 8001938:	d106      	bne.n	8001948 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2200      	movs	r2, #0
 800193e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001942:	6878      	ldr	r0, [r7, #4]
 8001944:	f7fe fcf0 	bl	8000328 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2224      	movs	r2, #36	@ 0x24
 800194c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	681a      	ldr	r2, [r3, #0]
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f022 0201 	bic.w	r2, r2, #1
 800195e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	681a      	ldr	r2, [r3, #0]
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800196e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	681a      	ldr	r2, [r3, #0]
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800197e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001980:	f001 f842 	bl	8002a08 <HAL_RCC_GetPCLK1Freq>
 8001984:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	4a81      	ldr	r2, [pc, #516]	@ (8001b90 <HAL_I2C_Init+0x274>)
 800198c:	4293      	cmp	r3, r2
 800198e:	d807      	bhi.n	80019a0 <HAL_I2C_Init+0x84>
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	4a80      	ldr	r2, [pc, #512]	@ (8001b94 <HAL_I2C_Init+0x278>)
 8001994:	4293      	cmp	r3, r2
 8001996:	bf94      	ite	ls
 8001998:	2301      	movls	r3, #1
 800199a:	2300      	movhi	r3, #0
 800199c:	b2db      	uxtb	r3, r3
 800199e:	e006      	b.n	80019ae <HAL_I2C_Init+0x92>
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	4a7d      	ldr	r2, [pc, #500]	@ (8001b98 <HAL_I2C_Init+0x27c>)
 80019a4:	4293      	cmp	r3, r2
 80019a6:	bf94      	ite	ls
 80019a8:	2301      	movls	r3, #1
 80019aa:	2300      	movhi	r3, #0
 80019ac:	b2db      	uxtb	r3, r3
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d001      	beq.n	80019b6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80019b2:	2301      	movs	r3, #1
 80019b4:	e0e7      	b.n	8001b86 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	4a78      	ldr	r2, [pc, #480]	@ (8001b9c <HAL_I2C_Init+0x280>)
 80019ba:	fba2 2303 	umull	r2, r3, r2, r3
 80019be:	0c9b      	lsrs	r3, r3, #18
 80019c0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	68ba      	ldr	r2, [r7, #8]
 80019d2:	430a      	orrs	r2, r1
 80019d4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	6a1b      	ldr	r3, [r3, #32]
 80019dc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	4a6a      	ldr	r2, [pc, #424]	@ (8001b90 <HAL_I2C_Init+0x274>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d802      	bhi.n	80019f0 <HAL_I2C_Init+0xd4>
 80019ea:	68bb      	ldr	r3, [r7, #8]
 80019ec:	3301      	adds	r3, #1
 80019ee:	e009      	b.n	8001a04 <HAL_I2C_Init+0xe8>
 80019f0:	68bb      	ldr	r3, [r7, #8]
 80019f2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80019f6:	fb02 f303 	mul.w	r3, r2, r3
 80019fa:	4a69      	ldr	r2, [pc, #420]	@ (8001ba0 <HAL_I2C_Init+0x284>)
 80019fc:	fba2 2303 	umull	r2, r3, r2, r3
 8001a00:	099b      	lsrs	r3, r3, #6
 8001a02:	3301      	adds	r3, #1
 8001a04:	687a      	ldr	r2, [r7, #4]
 8001a06:	6812      	ldr	r2, [r2, #0]
 8001a08:	430b      	orrs	r3, r1
 8001a0a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	69db      	ldr	r3, [r3, #28]
 8001a12:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001a16:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	495c      	ldr	r1, [pc, #368]	@ (8001b90 <HAL_I2C_Init+0x274>)
 8001a20:	428b      	cmp	r3, r1
 8001a22:	d819      	bhi.n	8001a58 <HAL_I2C_Init+0x13c>
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	1e59      	subs	r1, r3, #1
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	005b      	lsls	r3, r3, #1
 8001a2e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001a32:	1c59      	adds	r1, r3, #1
 8001a34:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001a38:	400b      	ands	r3, r1
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d00a      	beq.n	8001a54 <HAL_I2C_Init+0x138>
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	1e59      	subs	r1, r3, #1
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	005b      	lsls	r3, r3, #1
 8001a48:	fbb1 f3f3 	udiv	r3, r1, r3
 8001a4c:	3301      	adds	r3, #1
 8001a4e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a52:	e051      	b.n	8001af8 <HAL_I2C_Init+0x1dc>
 8001a54:	2304      	movs	r3, #4
 8001a56:	e04f      	b.n	8001af8 <HAL_I2C_Init+0x1dc>
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	689b      	ldr	r3, [r3, #8]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d111      	bne.n	8001a84 <HAL_I2C_Init+0x168>
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	1e58      	subs	r0, r3, #1
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6859      	ldr	r1, [r3, #4]
 8001a68:	460b      	mov	r3, r1
 8001a6a:	005b      	lsls	r3, r3, #1
 8001a6c:	440b      	add	r3, r1
 8001a6e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a72:	3301      	adds	r3, #1
 8001a74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	bf0c      	ite	eq
 8001a7c:	2301      	moveq	r3, #1
 8001a7e:	2300      	movne	r3, #0
 8001a80:	b2db      	uxtb	r3, r3
 8001a82:	e012      	b.n	8001aaa <HAL_I2C_Init+0x18e>
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	1e58      	subs	r0, r3, #1
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6859      	ldr	r1, [r3, #4]
 8001a8c:	460b      	mov	r3, r1
 8001a8e:	009b      	lsls	r3, r3, #2
 8001a90:	440b      	add	r3, r1
 8001a92:	0099      	lsls	r1, r3, #2
 8001a94:	440b      	add	r3, r1
 8001a96:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a9a:	3301      	adds	r3, #1
 8001a9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	bf0c      	ite	eq
 8001aa4:	2301      	moveq	r3, #1
 8001aa6:	2300      	movne	r3, #0
 8001aa8:	b2db      	uxtb	r3, r3
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d001      	beq.n	8001ab2 <HAL_I2C_Init+0x196>
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e022      	b.n	8001af8 <HAL_I2C_Init+0x1dc>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	689b      	ldr	r3, [r3, #8]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d10e      	bne.n	8001ad8 <HAL_I2C_Init+0x1bc>
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	1e58      	subs	r0, r3, #1
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6859      	ldr	r1, [r3, #4]
 8001ac2:	460b      	mov	r3, r1
 8001ac4:	005b      	lsls	r3, r3, #1
 8001ac6:	440b      	add	r3, r1
 8001ac8:	fbb0 f3f3 	udiv	r3, r0, r3
 8001acc:	3301      	adds	r3, #1
 8001ace:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ad2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001ad6:	e00f      	b.n	8001af8 <HAL_I2C_Init+0x1dc>
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	1e58      	subs	r0, r3, #1
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6859      	ldr	r1, [r3, #4]
 8001ae0:	460b      	mov	r3, r1
 8001ae2:	009b      	lsls	r3, r3, #2
 8001ae4:	440b      	add	r3, r1
 8001ae6:	0099      	lsls	r1, r3, #2
 8001ae8:	440b      	add	r3, r1
 8001aea:	fbb0 f3f3 	udiv	r3, r0, r3
 8001aee:	3301      	adds	r3, #1
 8001af0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001af4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001af8:	6879      	ldr	r1, [r7, #4]
 8001afa:	6809      	ldr	r1, [r1, #0]
 8001afc:	4313      	orrs	r3, r2
 8001afe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	69da      	ldr	r2, [r3, #28]
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6a1b      	ldr	r3, [r3, #32]
 8001b12:	431a      	orrs	r2, r3
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	430a      	orrs	r2, r1
 8001b1a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	689b      	ldr	r3, [r3, #8]
 8001b22:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001b26:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001b2a:	687a      	ldr	r2, [r7, #4]
 8001b2c:	6911      	ldr	r1, [r2, #16]
 8001b2e:	687a      	ldr	r2, [r7, #4]
 8001b30:	68d2      	ldr	r2, [r2, #12]
 8001b32:	4311      	orrs	r1, r2
 8001b34:	687a      	ldr	r2, [r7, #4]
 8001b36:	6812      	ldr	r2, [r2, #0]
 8001b38:	430b      	orrs	r3, r1
 8001b3a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	68db      	ldr	r3, [r3, #12]
 8001b42:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	695a      	ldr	r2, [r3, #20]
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	699b      	ldr	r3, [r3, #24]
 8001b4e:	431a      	orrs	r2, r3
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	430a      	orrs	r2, r1
 8001b56:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	681a      	ldr	r2, [r3, #0]
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f042 0201 	orr.w	r2, r2, #1
 8001b66:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2220      	movs	r2, #32
 8001b72:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2200      	movs	r2, #0
 8001b7a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2200      	movs	r2, #0
 8001b80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001b84:	2300      	movs	r3, #0
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	3710      	adds	r7, #16
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	000186a0 	.word	0x000186a0
 8001b94:	001e847f 	.word	0x001e847f
 8001b98:	003d08ff 	.word	0x003d08ff
 8001b9c:	431bde83 	.word	0x431bde83
 8001ba0:	10624dd3 	.word	0x10624dd3

08001ba4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b088      	sub	sp, #32
 8001ba8:	af02      	add	r7, sp, #8
 8001baa:	60f8      	str	r0, [r7, #12]
 8001bac:	4608      	mov	r0, r1
 8001bae:	4611      	mov	r1, r2
 8001bb0:	461a      	mov	r2, r3
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	817b      	strh	r3, [r7, #10]
 8001bb6:	460b      	mov	r3, r1
 8001bb8:	813b      	strh	r3, [r7, #8]
 8001bba:	4613      	mov	r3, r2
 8001bbc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001bbe:	f7ff f91b 	bl	8000df8 <HAL_GetTick>
 8001bc2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001bca:	b2db      	uxtb	r3, r3
 8001bcc:	2b20      	cmp	r3, #32
 8001bce:	f040 80d9 	bne.w	8001d84 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001bd2:	697b      	ldr	r3, [r7, #20]
 8001bd4:	9300      	str	r3, [sp, #0]
 8001bd6:	2319      	movs	r3, #25
 8001bd8:	2201      	movs	r2, #1
 8001bda:	496d      	ldr	r1, [pc, #436]	@ (8001d90 <HAL_I2C_Mem_Write+0x1ec>)
 8001bdc:	68f8      	ldr	r0, [r7, #12]
 8001bde:	f000 f971 	bl	8001ec4 <I2C_WaitOnFlagUntilTimeout>
 8001be2:	4603      	mov	r3, r0
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d001      	beq.n	8001bec <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001be8:	2302      	movs	r3, #2
 8001bea:	e0cc      	b.n	8001d86 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001bf2:	2b01      	cmp	r3, #1
 8001bf4:	d101      	bne.n	8001bfa <HAL_I2C_Mem_Write+0x56>
 8001bf6:	2302      	movs	r3, #2
 8001bf8:	e0c5      	b.n	8001d86 <HAL_I2C_Mem_Write+0x1e2>
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	2201      	movs	r2, #1
 8001bfe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f003 0301 	and.w	r3, r3, #1
 8001c0c:	2b01      	cmp	r3, #1
 8001c0e:	d007      	beq.n	8001c20 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	681a      	ldr	r2, [r3, #0]
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f042 0201 	orr.w	r2, r2, #1
 8001c1e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	681a      	ldr	r2, [r3, #0]
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001c2e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	2221      	movs	r2, #33	@ 0x21
 8001c34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	2240      	movs	r2, #64	@ 0x40
 8001c3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	2200      	movs	r2, #0
 8001c44:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	6a3a      	ldr	r2, [r7, #32]
 8001c4a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001c50:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c56:	b29a      	uxth	r2, r3
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	4a4d      	ldr	r2, [pc, #308]	@ (8001d94 <HAL_I2C_Mem_Write+0x1f0>)
 8001c60:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001c62:	88f8      	ldrh	r0, [r7, #6]
 8001c64:	893a      	ldrh	r2, [r7, #8]
 8001c66:	8979      	ldrh	r1, [r7, #10]
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	9301      	str	r3, [sp, #4]
 8001c6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c6e:	9300      	str	r3, [sp, #0]
 8001c70:	4603      	mov	r3, r0
 8001c72:	68f8      	ldr	r0, [r7, #12]
 8001c74:	f000 f890 	bl	8001d98 <I2C_RequestMemoryWrite>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d052      	beq.n	8001d24 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e081      	b.n	8001d86 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c82:	697a      	ldr	r2, [r7, #20]
 8001c84:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001c86:	68f8      	ldr	r0, [r7, #12]
 8001c88:	f000 fa36 	bl	80020f8 <I2C_WaitOnTXEFlagUntilTimeout>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d00d      	beq.n	8001cae <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c96:	2b04      	cmp	r3, #4
 8001c98:	d107      	bne.n	8001caa <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	681a      	ldr	r2, [r3, #0]
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001ca8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001caa:	2301      	movs	r3, #1
 8001cac:	e06b      	b.n	8001d86 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cb2:	781a      	ldrb	r2, [r3, #0]
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cbe:	1c5a      	adds	r2, r3, #1
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001cc8:	3b01      	subs	r3, #1
 8001cca:	b29a      	uxth	r2, r3
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001cd4:	b29b      	uxth	r3, r3
 8001cd6:	3b01      	subs	r3, #1
 8001cd8:	b29a      	uxth	r2, r3
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	695b      	ldr	r3, [r3, #20]
 8001ce4:	f003 0304 	and.w	r3, r3, #4
 8001ce8:	2b04      	cmp	r3, #4
 8001cea:	d11b      	bne.n	8001d24 <HAL_I2C_Mem_Write+0x180>
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d017      	beq.n	8001d24 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cf8:	781a      	ldrb	r2, [r3, #0]
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d04:	1c5a      	adds	r2, r3, #1
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d0e:	3b01      	subs	r3, #1
 8001d10:	b29a      	uxth	r2, r3
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d1a:	b29b      	uxth	r3, r3
 8001d1c:	3b01      	subs	r3, #1
 8001d1e:	b29a      	uxth	r2, r3
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d1aa      	bne.n	8001c82 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d2c:	697a      	ldr	r2, [r7, #20]
 8001d2e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001d30:	68f8      	ldr	r0, [r7, #12]
 8001d32:	f000 fa29 	bl	8002188 <I2C_WaitOnBTFFlagUntilTimeout>
 8001d36:	4603      	mov	r3, r0
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d00d      	beq.n	8001d58 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d40:	2b04      	cmp	r3, #4
 8001d42:	d107      	bne.n	8001d54 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	681a      	ldr	r2, [r3, #0]
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001d52:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001d54:	2301      	movs	r3, #1
 8001d56:	e016      	b.n	8001d86 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	681a      	ldr	r2, [r3, #0]
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001d66:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	2220      	movs	r2, #32
 8001d6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	2200      	movs	r2, #0
 8001d74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001d80:	2300      	movs	r3, #0
 8001d82:	e000      	b.n	8001d86 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001d84:	2302      	movs	r3, #2
  }
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	3718      	adds	r7, #24
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	00100002 	.word	0x00100002
 8001d94:	ffff0000 	.word	0xffff0000

08001d98 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b088      	sub	sp, #32
 8001d9c:	af02      	add	r7, sp, #8
 8001d9e:	60f8      	str	r0, [r7, #12]
 8001da0:	4608      	mov	r0, r1
 8001da2:	4611      	mov	r1, r2
 8001da4:	461a      	mov	r2, r3
 8001da6:	4603      	mov	r3, r0
 8001da8:	817b      	strh	r3, [r7, #10]
 8001daa:	460b      	mov	r3, r1
 8001dac:	813b      	strh	r3, [r7, #8]
 8001dae:	4613      	mov	r3, r2
 8001db0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	681a      	ldr	r2, [r3, #0]
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001dc0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001dc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dc4:	9300      	str	r3, [sp, #0]
 8001dc6:	6a3b      	ldr	r3, [r7, #32]
 8001dc8:	2200      	movs	r2, #0
 8001dca:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001dce:	68f8      	ldr	r0, [r7, #12]
 8001dd0:	f000 f878 	bl	8001ec4 <I2C_WaitOnFlagUntilTimeout>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d00d      	beq.n	8001df6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001de4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001de8:	d103      	bne.n	8001df2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001df0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001df2:	2303      	movs	r3, #3
 8001df4:	e05f      	b.n	8001eb6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001df6:	897b      	ldrh	r3, [r7, #10]
 8001df8:	b2db      	uxtb	r3, r3
 8001dfa:	461a      	mov	r2, r3
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001e04:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001e06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e08:	6a3a      	ldr	r2, [r7, #32]
 8001e0a:	492d      	ldr	r1, [pc, #180]	@ (8001ec0 <I2C_RequestMemoryWrite+0x128>)
 8001e0c:	68f8      	ldr	r0, [r7, #12]
 8001e0e:	f000 f8d3 	bl	8001fb8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001e12:	4603      	mov	r3, r0
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d001      	beq.n	8001e1c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8001e18:	2301      	movs	r3, #1
 8001e1a:	e04c      	b.n	8001eb6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	617b      	str	r3, [r7, #20]
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	695b      	ldr	r3, [r3, #20]
 8001e26:	617b      	str	r3, [r7, #20]
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	699b      	ldr	r3, [r3, #24]
 8001e2e:	617b      	str	r3, [r7, #20]
 8001e30:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001e34:	6a39      	ldr	r1, [r7, #32]
 8001e36:	68f8      	ldr	r0, [r7, #12]
 8001e38:	f000 f95e 	bl	80020f8 <I2C_WaitOnTXEFlagUntilTimeout>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d00d      	beq.n	8001e5e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e46:	2b04      	cmp	r3, #4
 8001e48:	d107      	bne.n	8001e5a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	681a      	ldr	r2, [r3, #0]
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001e58:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e02b      	b.n	8001eb6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001e5e:	88fb      	ldrh	r3, [r7, #6]
 8001e60:	2b01      	cmp	r3, #1
 8001e62:	d105      	bne.n	8001e70 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001e64:	893b      	ldrh	r3, [r7, #8]
 8001e66:	b2da      	uxtb	r2, r3
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	611a      	str	r2, [r3, #16]
 8001e6e:	e021      	b.n	8001eb4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001e70:	893b      	ldrh	r3, [r7, #8]
 8001e72:	0a1b      	lsrs	r3, r3, #8
 8001e74:	b29b      	uxth	r3, r3
 8001e76:	b2da      	uxtb	r2, r3
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001e80:	6a39      	ldr	r1, [r7, #32]
 8001e82:	68f8      	ldr	r0, [r7, #12]
 8001e84:	f000 f938 	bl	80020f8 <I2C_WaitOnTXEFlagUntilTimeout>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d00d      	beq.n	8001eaa <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e92:	2b04      	cmp	r3, #4
 8001e94:	d107      	bne.n	8001ea6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	681a      	ldr	r2, [r3, #0]
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001ea4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e005      	b.n	8001eb6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001eaa:	893b      	ldrh	r3, [r7, #8]
 8001eac:	b2da      	uxtb	r2, r3
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8001eb4:	2300      	movs	r3, #0
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	3718      	adds	r7, #24
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	00010002 	.word	0x00010002

08001ec4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b084      	sub	sp, #16
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	60f8      	str	r0, [r7, #12]
 8001ecc:	60b9      	str	r1, [r7, #8]
 8001ece:	603b      	str	r3, [r7, #0]
 8001ed0:	4613      	mov	r3, r2
 8001ed2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001ed4:	e048      	b.n	8001f68 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001edc:	d044      	beq.n	8001f68 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ede:	f7fe ff8b 	bl	8000df8 <HAL_GetTick>
 8001ee2:	4602      	mov	r2, r0
 8001ee4:	69bb      	ldr	r3, [r7, #24]
 8001ee6:	1ad3      	subs	r3, r2, r3
 8001ee8:	683a      	ldr	r2, [r7, #0]
 8001eea:	429a      	cmp	r2, r3
 8001eec:	d302      	bcc.n	8001ef4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d139      	bne.n	8001f68 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001ef4:	68bb      	ldr	r3, [r7, #8]
 8001ef6:	0c1b      	lsrs	r3, r3, #16
 8001ef8:	b2db      	uxtb	r3, r3
 8001efa:	2b01      	cmp	r3, #1
 8001efc:	d10d      	bne.n	8001f1a <I2C_WaitOnFlagUntilTimeout+0x56>
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	695b      	ldr	r3, [r3, #20]
 8001f04:	43da      	mvns	r2, r3
 8001f06:	68bb      	ldr	r3, [r7, #8]
 8001f08:	4013      	ands	r3, r2
 8001f0a:	b29b      	uxth	r3, r3
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	bf0c      	ite	eq
 8001f10:	2301      	moveq	r3, #1
 8001f12:	2300      	movne	r3, #0
 8001f14:	b2db      	uxtb	r3, r3
 8001f16:	461a      	mov	r2, r3
 8001f18:	e00c      	b.n	8001f34 <I2C_WaitOnFlagUntilTimeout+0x70>
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	699b      	ldr	r3, [r3, #24]
 8001f20:	43da      	mvns	r2, r3
 8001f22:	68bb      	ldr	r3, [r7, #8]
 8001f24:	4013      	ands	r3, r2
 8001f26:	b29b      	uxth	r3, r3
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	bf0c      	ite	eq
 8001f2c:	2301      	moveq	r3, #1
 8001f2e:	2300      	movne	r3, #0
 8001f30:	b2db      	uxtb	r3, r3
 8001f32:	461a      	mov	r2, r3
 8001f34:	79fb      	ldrb	r3, [r7, #7]
 8001f36:	429a      	cmp	r2, r3
 8001f38:	d116      	bne.n	8001f68 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	2220      	movs	r2, #32
 8001f44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f54:	f043 0220 	orr.w	r2, r3, #32
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	2200      	movs	r2, #0
 8001f60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001f64:	2301      	movs	r3, #1
 8001f66:	e023      	b.n	8001fb0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001f68:	68bb      	ldr	r3, [r7, #8]
 8001f6a:	0c1b      	lsrs	r3, r3, #16
 8001f6c:	b2db      	uxtb	r3, r3
 8001f6e:	2b01      	cmp	r3, #1
 8001f70:	d10d      	bne.n	8001f8e <I2C_WaitOnFlagUntilTimeout+0xca>
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	695b      	ldr	r3, [r3, #20]
 8001f78:	43da      	mvns	r2, r3
 8001f7a:	68bb      	ldr	r3, [r7, #8]
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	b29b      	uxth	r3, r3
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	bf0c      	ite	eq
 8001f84:	2301      	moveq	r3, #1
 8001f86:	2300      	movne	r3, #0
 8001f88:	b2db      	uxtb	r3, r3
 8001f8a:	461a      	mov	r2, r3
 8001f8c:	e00c      	b.n	8001fa8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	699b      	ldr	r3, [r3, #24]
 8001f94:	43da      	mvns	r2, r3
 8001f96:	68bb      	ldr	r3, [r7, #8]
 8001f98:	4013      	ands	r3, r2
 8001f9a:	b29b      	uxth	r3, r3
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	bf0c      	ite	eq
 8001fa0:	2301      	moveq	r3, #1
 8001fa2:	2300      	movne	r3, #0
 8001fa4:	b2db      	uxtb	r3, r3
 8001fa6:	461a      	mov	r2, r3
 8001fa8:	79fb      	ldrb	r3, [r7, #7]
 8001faa:	429a      	cmp	r2, r3
 8001fac:	d093      	beq.n	8001ed6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001fae:	2300      	movs	r3, #0
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	3710      	adds	r7, #16
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}

08001fb8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b084      	sub	sp, #16
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	60f8      	str	r0, [r7, #12]
 8001fc0:	60b9      	str	r1, [r7, #8]
 8001fc2:	607a      	str	r2, [r7, #4]
 8001fc4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001fc6:	e071      	b.n	80020ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	695b      	ldr	r3, [r3, #20]
 8001fce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001fd2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001fd6:	d123      	bne.n	8002020 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	681a      	ldr	r2, [r3, #0]
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001fe6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001ff0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	2220      	movs	r2, #32
 8001ffc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	2200      	movs	r2, #0
 8002004:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800200c:	f043 0204 	orr.w	r2, r3, #4
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	2200      	movs	r2, #0
 8002018:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800201c:	2301      	movs	r3, #1
 800201e:	e067      	b.n	80020f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002026:	d041      	beq.n	80020ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002028:	f7fe fee6 	bl	8000df8 <HAL_GetTick>
 800202c:	4602      	mov	r2, r0
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	1ad3      	subs	r3, r2, r3
 8002032:	687a      	ldr	r2, [r7, #4]
 8002034:	429a      	cmp	r2, r3
 8002036:	d302      	bcc.n	800203e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d136      	bne.n	80020ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800203e:	68bb      	ldr	r3, [r7, #8]
 8002040:	0c1b      	lsrs	r3, r3, #16
 8002042:	b2db      	uxtb	r3, r3
 8002044:	2b01      	cmp	r3, #1
 8002046:	d10c      	bne.n	8002062 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	695b      	ldr	r3, [r3, #20]
 800204e:	43da      	mvns	r2, r3
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	4013      	ands	r3, r2
 8002054:	b29b      	uxth	r3, r3
 8002056:	2b00      	cmp	r3, #0
 8002058:	bf14      	ite	ne
 800205a:	2301      	movne	r3, #1
 800205c:	2300      	moveq	r3, #0
 800205e:	b2db      	uxtb	r3, r3
 8002060:	e00b      	b.n	800207a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	699b      	ldr	r3, [r3, #24]
 8002068:	43da      	mvns	r2, r3
 800206a:	68bb      	ldr	r3, [r7, #8]
 800206c:	4013      	ands	r3, r2
 800206e:	b29b      	uxth	r3, r3
 8002070:	2b00      	cmp	r3, #0
 8002072:	bf14      	ite	ne
 8002074:	2301      	movne	r3, #1
 8002076:	2300      	moveq	r3, #0
 8002078:	b2db      	uxtb	r3, r3
 800207a:	2b00      	cmp	r3, #0
 800207c:	d016      	beq.n	80020ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	2200      	movs	r2, #0
 8002082:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	2220      	movs	r2, #32
 8002088:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	2200      	movs	r2, #0
 8002090:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002098:	f043 0220 	orr.w	r2, r3, #32
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	2200      	movs	r2, #0
 80020a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80020a8:	2301      	movs	r3, #1
 80020aa:	e021      	b.n	80020f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80020ac:	68bb      	ldr	r3, [r7, #8]
 80020ae:	0c1b      	lsrs	r3, r3, #16
 80020b0:	b2db      	uxtb	r3, r3
 80020b2:	2b01      	cmp	r3, #1
 80020b4:	d10c      	bne.n	80020d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	695b      	ldr	r3, [r3, #20]
 80020bc:	43da      	mvns	r2, r3
 80020be:	68bb      	ldr	r3, [r7, #8]
 80020c0:	4013      	ands	r3, r2
 80020c2:	b29b      	uxth	r3, r3
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	bf14      	ite	ne
 80020c8:	2301      	movne	r3, #1
 80020ca:	2300      	moveq	r3, #0
 80020cc:	b2db      	uxtb	r3, r3
 80020ce:	e00b      	b.n	80020e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	699b      	ldr	r3, [r3, #24]
 80020d6:	43da      	mvns	r2, r3
 80020d8:	68bb      	ldr	r3, [r7, #8]
 80020da:	4013      	ands	r3, r2
 80020dc:	b29b      	uxth	r3, r3
 80020de:	2b00      	cmp	r3, #0
 80020e0:	bf14      	ite	ne
 80020e2:	2301      	movne	r3, #1
 80020e4:	2300      	moveq	r3, #0
 80020e6:	b2db      	uxtb	r3, r3
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	f47f af6d 	bne.w	8001fc8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80020ee:	2300      	movs	r3, #0
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	3710      	adds	r7, #16
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}

080020f8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b084      	sub	sp, #16
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	60f8      	str	r0, [r7, #12]
 8002100:	60b9      	str	r1, [r7, #8]
 8002102:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002104:	e034      	b.n	8002170 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002106:	68f8      	ldr	r0, [r7, #12]
 8002108:	f000 f886 	bl	8002218 <I2C_IsAcknowledgeFailed>
 800210c:	4603      	mov	r3, r0
 800210e:	2b00      	cmp	r3, #0
 8002110:	d001      	beq.n	8002116 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002112:	2301      	movs	r3, #1
 8002114:	e034      	b.n	8002180 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002116:	68bb      	ldr	r3, [r7, #8]
 8002118:	f1b3 3fff 	cmp.w	r3, #4294967295
 800211c:	d028      	beq.n	8002170 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800211e:	f7fe fe6b 	bl	8000df8 <HAL_GetTick>
 8002122:	4602      	mov	r2, r0
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	1ad3      	subs	r3, r2, r3
 8002128:	68ba      	ldr	r2, [r7, #8]
 800212a:	429a      	cmp	r2, r3
 800212c:	d302      	bcc.n	8002134 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800212e:	68bb      	ldr	r3, [r7, #8]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d11d      	bne.n	8002170 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	695b      	ldr	r3, [r3, #20]
 800213a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800213e:	2b80      	cmp	r3, #128	@ 0x80
 8002140:	d016      	beq.n	8002170 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	2200      	movs	r2, #0
 8002146:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	2220      	movs	r2, #32
 800214c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	2200      	movs	r2, #0
 8002154:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800215c:	f043 0220 	orr.w	r2, r3, #32
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	2200      	movs	r2, #0
 8002168:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800216c:	2301      	movs	r3, #1
 800216e:	e007      	b.n	8002180 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	695b      	ldr	r3, [r3, #20]
 8002176:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800217a:	2b80      	cmp	r3, #128	@ 0x80
 800217c:	d1c3      	bne.n	8002106 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800217e:	2300      	movs	r3, #0
}
 8002180:	4618      	mov	r0, r3
 8002182:	3710      	adds	r7, #16
 8002184:	46bd      	mov	sp, r7
 8002186:	bd80      	pop	{r7, pc}

08002188 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b084      	sub	sp, #16
 800218c:	af00      	add	r7, sp, #0
 800218e:	60f8      	str	r0, [r7, #12]
 8002190:	60b9      	str	r1, [r7, #8]
 8002192:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002194:	e034      	b.n	8002200 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002196:	68f8      	ldr	r0, [r7, #12]
 8002198:	f000 f83e 	bl	8002218 <I2C_IsAcknowledgeFailed>
 800219c:	4603      	mov	r3, r0
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d001      	beq.n	80021a6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80021a2:	2301      	movs	r3, #1
 80021a4:	e034      	b.n	8002210 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80021a6:	68bb      	ldr	r3, [r7, #8]
 80021a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021ac:	d028      	beq.n	8002200 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021ae:	f7fe fe23 	bl	8000df8 <HAL_GetTick>
 80021b2:	4602      	mov	r2, r0
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	1ad3      	subs	r3, r2, r3
 80021b8:	68ba      	ldr	r2, [r7, #8]
 80021ba:	429a      	cmp	r2, r3
 80021bc:	d302      	bcc.n	80021c4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80021be:	68bb      	ldr	r3, [r7, #8]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d11d      	bne.n	8002200 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	695b      	ldr	r3, [r3, #20]
 80021ca:	f003 0304 	and.w	r3, r3, #4
 80021ce:	2b04      	cmp	r3, #4
 80021d0:	d016      	beq.n	8002200 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	2200      	movs	r2, #0
 80021d6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	2220      	movs	r2, #32
 80021dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	2200      	movs	r2, #0
 80021e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021ec:	f043 0220 	orr.w	r2, r3, #32
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	2200      	movs	r2, #0
 80021f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80021fc:	2301      	movs	r3, #1
 80021fe:	e007      	b.n	8002210 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	695b      	ldr	r3, [r3, #20]
 8002206:	f003 0304 	and.w	r3, r3, #4
 800220a:	2b04      	cmp	r3, #4
 800220c:	d1c3      	bne.n	8002196 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800220e:	2300      	movs	r3, #0
}
 8002210:	4618      	mov	r0, r3
 8002212:	3710      	adds	r7, #16
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}

08002218 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002218:	b480      	push	{r7}
 800221a:	b083      	sub	sp, #12
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	695b      	ldr	r3, [r3, #20]
 8002226:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800222a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800222e:	d11b      	bne.n	8002268 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002238:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2200      	movs	r2, #0
 800223e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2220      	movs	r2, #32
 8002244:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2200      	movs	r2, #0
 800224c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002254:	f043 0204 	orr.w	r2, r3, #4
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2200      	movs	r2, #0
 8002260:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002264:	2301      	movs	r3, #1
 8002266:	e000      	b.n	800226a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002268:	2300      	movs	r3, #0
}
 800226a:	4618      	mov	r0, r3
 800226c:	370c      	adds	r7, #12
 800226e:	46bd      	mov	sp, r7
 8002270:	bc80      	pop	{r7}
 8002272:	4770      	bx	lr

08002274 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b086      	sub	sp, #24
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d101      	bne.n	8002286 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002282:	2301      	movs	r3, #1
 8002284:	e272      	b.n	800276c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f003 0301 	and.w	r3, r3, #1
 800228e:	2b00      	cmp	r3, #0
 8002290:	f000 8087 	beq.w	80023a2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002294:	4b92      	ldr	r3, [pc, #584]	@ (80024e0 <HAL_RCC_OscConfig+0x26c>)
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	f003 030c 	and.w	r3, r3, #12
 800229c:	2b04      	cmp	r3, #4
 800229e:	d00c      	beq.n	80022ba <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80022a0:	4b8f      	ldr	r3, [pc, #572]	@ (80024e0 <HAL_RCC_OscConfig+0x26c>)
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	f003 030c 	and.w	r3, r3, #12
 80022a8:	2b08      	cmp	r3, #8
 80022aa:	d112      	bne.n	80022d2 <HAL_RCC_OscConfig+0x5e>
 80022ac:	4b8c      	ldr	r3, [pc, #560]	@ (80024e0 <HAL_RCC_OscConfig+0x26c>)
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80022b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80022b8:	d10b      	bne.n	80022d2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022ba:	4b89      	ldr	r3, [pc, #548]	@ (80024e0 <HAL_RCC_OscConfig+0x26c>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d06c      	beq.n	80023a0 <HAL_RCC_OscConfig+0x12c>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d168      	bne.n	80023a0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
 80022d0:	e24c      	b.n	800276c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80022da:	d106      	bne.n	80022ea <HAL_RCC_OscConfig+0x76>
 80022dc:	4b80      	ldr	r3, [pc, #512]	@ (80024e0 <HAL_RCC_OscConfig+0x26c>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a7f      	ldr	r2, [pc, #508]	@ (80024e0 <HAL_RCC_OscConfig+0x26c>)
 80022e2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022e6:	6013      	str	r3, [r2, #0]
 80022e8:	e02e      	b.n	8002348 <HAL_RCC_OscConfig+0xd4>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d10c      	bne.n	800230c <HAL_RCC_OscConfig+0x98>
 80022f2:	4b7b      	ldr	r3, [pc, #492]	@ (80024e0 <HAL_RCC_OscConfig+0x26c>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4a7a      	ldr	r2, [pc, #488]	@ (80024e0 <HAL_RCC_OscConfig+0x26c>)
 80022f8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80022fc:	6013      	str	r3, [r2, #0]
 80022fe:	4b78      	ldr	r3, [pc, #480]	@ (80024e0 <HAL_RCC_OscConfig+0x26c>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4a77      	ldr	r2, [pc, #476]	@ (80024e0 <HAL_RCC_OscConfig+0x26c>)
 8002304:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002308:	6013      	str	r3, [r2, #0]
 800230a:	e01d      	b.n	8002348 <HAL_RCC_OscConfig+0xd4>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002314:	d10c      	bne.n	8002330 <HAL_RCC_OscConfig+0xbc>
 8002316:	4b72      	ldr	r3, [pc, #456]	@ (80024e0 <HAL_RCC_OscConfig+0x26c>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4a71      	ldr	r2, [pc, #452]	@ (80024e0 <HAL_RCC_OscConfig+0x26c>)
 800231c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002320:	6013      	str	r3, [r2, #0]
 8002322:	4b6f      	ldr	r3, [pc, #444]	@ (80024e0 <HAL_RCC_OscConfig+0x26c>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4a6e      	ldr	r2, [pc, #440]	@ (80024e0 <HAL_RCC_OscConfig+0x26c>)
 8002328:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800232c:	6013      	str	r3, [r2, #0]
 800232e:	e00b      	b.n	8002348 <HAL_RCC_OscConfig+0xd4>
 8002330:	4b6b      	ldr	r3, [pc, #428]	@ (80024e0 <HAL_RCC_OscConfig+0x26c>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a6a      	ldr	r2, [pc, #424]	@ (80024e0 <HAL_RCC_OscConfig+0x26c>)
 8002336:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800233a:	6013      	str	r3, [r2, #0]
 800233c:	4b68      	ldr	r3, [pc, #416]	@ (80024e0 <HAL_RCC_OscConfig+0x26c>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a67      	ldr	r2, [pc, #412]	@ (80024e0 <HAL_RCC_OscConfig+0x26c>)
 8002342:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002346:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d013      	beq.n	8002378 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002350:	f7fe fd52 	bl	8000df8 <HAL_GetTick>
 8002354:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002356:	e008      	b.n	800236a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002358:	f7fe fd4e 	bl	8000df8 <HAL_GetTick>
 800235c:	4602      	mov	r2, r0
 800235e:	693b      	ldr	r3, [r7, #16]
 8002360:	1ad3      	subs	r3, r2, r3
 8002362:	2b64      	cmp	r3, #100	@ 0x64
 8002364:	d901      	bls.n	800236a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002366:	2303      	movs	r3, #3
 8002368:	e200      	b.n	800276c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800236a:	4b5d      	ldr	r3, [pc, #372]	@ (80024e0 <HAL_RCC_OscConfig+0x26c>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002372:	2b00      	cmp	r3, #0
 8002374:	d0f0      	beq.n	8002358 <HAL_RCC_OscConfig+0xe4>
 8002376:	e014      	b.n	80023a2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002378:	f7fe fd3e 	bl	8000df8 <HAL_GetTick>
 800237c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800237e:	e008      	b.n	8002392 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002380:	f7fe fd3a 	bl	8000df8 <HAL_GetTick>
 8002384:	4602      	mov	r2, r0
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	1ad3      	subs	r3, r2, r3
 800238a:	2b64      	cmp	r3, #100	@ 0x64
 800238c:	d901      	bls.n	8002392 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800238e:	2303      	movs	r3, #3
 8002390:	e1ec      	b.n	800276c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002392:	4b53      	ldr	r3, [pc, #332]	@ (80024e0 <HAL_RCC_OscConfig+0x26c>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800239a:	2b00      	cmp	r3, #0
 800239c:	d1f0      	bne.n	8002380 <HAL_RCC_OscConfig+0x10c>
 800239e:	e000      	b.n	80023a2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f003 0302 	and.w	r3, r3, #2
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d063      	beq.n	8002476 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80023ae:	4b4c      	ldr	r3, [pc, #304]	@ (80024e0 <HAL_RCC_OscConfig+0x26c>)
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	f003 030c 	and.w	r3, r3, #12
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d00b      	beq.n	80023d2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80023ba:	4b49      	ldr	r3, [pc, #292]	@ (80024e0 <HAL_RCC_OscConfig+0x26c>)
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	f003 030c 	and.w	r3, r3, #12
 80023c2:	2b08      	cmp	r3, #8
 80023c4:	d11c      	bne.n	8002400 <HAL_RCC_OscConfig+0x18c>
 80023c6:	4b46      	ldr	r3, [pc, #280]	@ (80024e0 <HAL_RCC_OscConfig+0x26c>)
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d116      	bne.n	8002400 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023d2:	4b43      	ldr	r3, [pc, #268]	@ (80024e0 <HAL_RCC_OscConfig+0x26c>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f003 0302 	and.w	r3, r3, #2
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d005      	beq.n	80023ea <HAL_RCC_OscConfig+0x176>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	691b      	ldr	r3, [r3, #16]
 80023e2:	2b01      	cmp	r3, #1
 80023e4:	d001      	beq.n	80023ea <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
 80023e8:	e1c0      	b.n	800276c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023ea:	4b3d      	ldr	r3, [pc, #244]	@ (80024e0 <HAL_RCC_OscConfig+0x26c>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	695b      	ldr	r3, [r3, #20]
 80023f6:	00db      	lsls	r3, r3, #3
 80023f8:	4939      	ldr	r1, [pc, #228]	@ (80024e0 <HAL_RCC_OscConfig+0x26c>)
 80023fa:	4313      	orrs	r3, r2
 80023fc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023fe:	e03a      	b.n	8002476 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	691b      	ldr	r3, [r3, #16]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d020      	beq.n	800244a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002408:	4b36      	ldr	r3, [pc, #216]	@ (80024e4 <HAL_RCC_OscConfig+0x270>)
 800240a:	2201      	movs	r2, #1
 800240c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800240e:	f7fe fcf3 	bl	8000df8 <HAL_GetTick>
 8002412:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002414:	e008      	b.n	8002428 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002416:	f7fe fcef 	bl	8000df8 <HAL_GetTick>
 800241a:	4602      	mov	r2, r0
 800241c:	693b      	ldr	r3, [r7, #16]
 800241e:	1ad3      	subs	r3, r2, r3
 8002420:	2b02      	cmp	r3, #2
 8002422:	d901      	bls.n	8002428 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002424:	2303      	movs	r3, #3
 8002426:	e1a1      	b.n	800276c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002428:	4b2d      	ldr	r3, [pc, #180]	@ (80024e0 <HAL_RCC_OscConfig+0x26c>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f003 0302 	and.w	r3, r3, #2
 8002430:	2b00      	cmp	r3, #0
 8002432:	d0f0      	beq.n	8002416 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002434:	4b2a      	ldr	r3, [pc, #168]	@ (80024e0 <HAL_RCC_OscConfig+0x26c>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	695b      	ldr	r3, [r3, #20]
 8002440:	00db      	lsls	r3, r3, #3
 8002442:	4927      	ldr	r1, [pc, #156]	@ (80024e0 <HAL_RCC_OscConfig+0x26c>)
 8002444:	4313      	orrs	r3, r2
 8002446:	600b      	str	r3, [r1, #0]
 8002448:	e015      	b.n	8002476 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800244a:	4b26      	ldr	r3, [pc, #152]	@ (80024e4 <HAL_RCC_OscConfig+0x270>)
 800244c:	2200      	movs	r2, #0
 800244e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002450:	f7fe fcd2 	bl	8000df8 <HAL_GetTick>
 8002454:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002456:	e008      	b.n	800246a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002458:	f7fe fcce 	bl	8000df8 <HAL_GetTick>
 800245c:	4602      	mov	r2, r0
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	1ad3      	subs	r3, r2, r3
 8002462:	2b02      	cmp	r3, #2
 8002464:	d901      	bls.n	800246a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002466:	2303      	movs	r3, #3
 8002468:	e180      	b.n	800276c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800246a:	4b1d      	ldr	r3, [pc, #116]	@ (80024e0 <HAL_RCC_OscConfig+0x26c>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f003 0302 	and.w	r3, r3, #2
 8002472:	2b00      	cmp	r3, #0
 8002474:	d1f0      	bne.n	8002458 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f003 0308 	and.w	r3, r3, #8
 800247e:	2b00      	cmp	r3, #0
 8002480:	d03a      	beq.n	80024f8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	699b      	ldr	r3, [r3, #24]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d019      	beq.n	80024be <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800248a:	4b17      	ldr	r3, [pc, #92]	@ (80024e8 <HAL_RCC_OscConfig+0x274>)
 800248c:	2201      	movs	r2, #1
 800248e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002490:	f7fe fcb2 	bl	8000df8 <HAL_GetTick>
 8002494:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002496:	e008      	b.n	80024aa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002498:	f7fe fcae 	bl	8000df8 <HAL_GetTick>
 800249c:	4602      	mov	r2, r0
 800249e:	693b      	ldr	r3, [r7, #16]
 80024a0:	1ad3      	subs	r3, r2, r3
 80024a2:	2b02      	cmp	r3, #2
 80024a4:	d901      	bls.n	80024aa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80024a6:	2303      	movs	r3, #3
 80024a8:	e160      	b.n	800276c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024aa:	4b0d      	ldr	r3, [pc, #52]	@ (80024e0 <HAL_RCC_OscConfig+0x26c>)
 80024ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024ae:	f003 0302 	and.w	r3, r3, #2
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d0f0      	beq.n	8002498 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80024b6:	2001      	movs	r0, #1
 80024b8:	f000 face 	bl	8002a58 <RCC_Delay>
 80024bc:	e01c      	b.n	80024f8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024be:	4b0a      	ldr	r3, [pc, #40]	@ (80024e8 <HAL_RCC_OscConfig+0x274>)
 80024c0:	2200      	movs	r2, #0
 80024c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024c4:	f7fe fc98 	bl	8000df8 <HAL_GetTick>
 80024c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024ca:	e00f      	b.n	80024ec <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024cc:	f7fe fc94 	bl	8000df8 <HAL_GetTick>
 80024d0:	4602      	mov	r2, r0
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	1ad3      	subs	r3, r2, r3
 80024d6:	2b02      	cmp	r3, #2
 80024d8:	d908      	bls.n	80024ec <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80024da:	2303      	movs	r3, #3
 80024dc:	e146      	b.n	800276c <HAL_RCC_OscConfig+0x4f8>
 80024de:	bf00      	nop
 80024e0:	40021000 	.word	0x40021000
 80024e4:	42420000 	.word	0x42420000
 80024e8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024ec:	4b92      	ldr	r3, [pc, #584]	@ (8002738 <HAL_RCC_OscConfig+0x4c4>)
 80024ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024f0:	f003 0302 	and.w	r3, r3, #2
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d1e9      	bne.n	80024cc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f003 0304 	and.w	r3, r3, #4
 8002500:	2b00      	cmp	r3, #0
 8002502:	f000 80a6 	beq.w	8002652 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002506:	2300      	movs	r3, #0
 8002508:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800250a:	4b8b      	ldr	r3, [pc, #556]	@ (8002738 <HAL_RCC_OscConfig+0x4c4>)
 800250c:	69db      	ldr	r3, [r3, #28]
 800250e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002512:	2b00      	cmp	r3, #0
 8002514:	d10d      	bne.n	8002532 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002516:	4b88      	ldr	r3, [pc, #544]	@ (8002738 <HAL_RCC_OscConfig+0x4c4>)
 8002518:	69db      	ldr	r3, [r3, #28]
 800251a:	4a87      	ldr	r2, [pc, #540]	@ (8002738 <HAL_RCC_OscConfig+0x4c4>)
 800251c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002520:	61d3      	str	r3, [r2, #28]
 8002522:	4b85      	ldr	r3, [pc, #532]	@ (8002738 <HAL_RCC_OscConfig+0x4c4>)
 8002524:	69db      	ldr	r3, [r3, #28]
 8002526:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800252a:	60bb      	str	r3, [r7, #8]
 800252c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800252e:	2301      	movs	r3, #1
 8002530:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002532:	4b82      	ldr	r3, [pc, #520]	@ (800273c <HAL_RCC_OscConfig+0x4c8>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800253a:	2b00      	cmp	r3, #0
 800253c:	d118      	bne.n	8002570 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800253e:	4b7f      	ldr	r3, [pc, #508]	@ (800273c <HAL_RCC_OscConfig+0x4c8>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4a7e      	ldr	r2, [pc, #504]	@ (800273c <HAL_RCC_OscConfig+0x4c8>)
 8002544:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002548:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800254a:	f7fe fc55 	bl	8000df8 <HAL_GetTick>
 800254e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002550:	e008      	b.n	8002564 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002552:	f7fe fc51 	bl	8000df8 <HAL_GetTick>
 8002556:	4602      	mov	r2, r0
 8002558:	693b      	ldr	r3, [r7, #16]
 800255a:	1ad3      	subs	r3, r2, r3
 800255c:	2b64      	cmp	r3, #100	@ 0x64
 800255e:	d901      	bls.n	8002564 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002560:	2303      	movs	r3, #3
 8002562:	e103      	b.n	800276c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002564:	4b75      	ldr	r3, [pc, #468]	@ (800273c <HAL_RCC_OscConfig+0x4c8>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800256c:	2b00      	cmp	r3, #0
 800256e:	d0f0      	beq.n	8002552 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	68db      	ldr	r3, [r3, #12]
 8002574:	2b01      	cmp	r3, #1
 8002576:	d106      	bne.n	8002586 <HAL_RCC_OscConfig+0x312>
 8002578:	4b6f      	ldr	r3, [pc, #444]	@ (8002738 <HAL_RCC_OscConfig+0x4c4>)
 800257a:	6a1b      	ldr	r3, [r3, #32]
 800257c:	4a6e      	ldr	r2, [pc, #440]	@ (8002738 <HAL_RCC_OscConfig+0x4c4>)
 800257e:	f043 0301 	orr.w	r3, r3, #1
 8002582:	6213      	str	r3, [r2, #32]
 8002584:	e02d      	b.n	80025e2 <HAL_RCC_OscConfig+0x36e>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	68db      	ldr	r3, [r3, #12]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d10c      	bne.n	80025a8 <HAL_RCC_OscConfig+0x334>
 800258e:	4b6a      	ldr	r3, [pc, #424]	@ (8002738 <HAL_RCC_OscConfig+0x4c4>)
 8002590:	6a1b      	ldr	r3, [r3, #32]
 8002592:	4a69      	ldr	r2, [pc, #420]	@ (8002738 <HAL_RCC_OscConfig+0x4c4>)
 8002594:	f023 0301 	bic.w	r3, r3, #1
 8002598:	6213      	str	r3, [r2, #32]
 800259a:	4b67      	ldr	r3, [pc, #412]	@ (8002738 <HAL_RCC_OscConfig+0x4c4>)
 800259c:	6a1b      	ldr	r3, [r3, #32]
 800259e:	4a66      	ldr	r2, [pc, #408]	@ (8002738 <HAL_RCC_OscConfig+0x4c4>)
 80025a0:	f023 0304 	bic.w	r3, r3, #4
 80025a4:	6213      	str	r3, [r2, #32]
 80025a6:	e01c      	b.n	80025e2 <HAL_RCC_OscConfig+0x36e>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	68db      	ldr	r3, [r3, #12]
 80025ac:	2b05      	cmp	r3, #5
 80025ae:	d10c      	bne.n	80025ca <HAL_RCC_OscConfig+0x356>
 80025b0:	4b61      	ldr	r3, [pc, #388]	@ (8002738 <HAL_RCC_OscConfig+0x4c4>)
 80025b2:	6a1b      	ldr	r3, [r3, #32]
 80025b4:	4a60      	ldr	r2, [pc, #384]	@ (8002738 <HAL_RCC_OscConfig+0x4c4>)
 80025b6:	f043 0304 	orr.w	r3, r3, #4
 80025ba:	6213      	str	r3, [r2, #32]
 80025bc:	4b5e      	ldr	r3, [pc, #376]	@ (8002738 <HAL_RCC_OscConfig+0x4c4>)
 80025be:	6a1b      	ldr	r3, [r3, #32]
 80025c0:	4a5d      	ldr	r2, [pc, #372]	@ (8002738 <HAL_RCC_OscConfig+0x4c4>)
 80025c2:	f043 0301 	orr.w	r3, r3, #1
 80025c6:	6213      	str	r3, [r2, #32]
 80025c8:	e00b      	b.n	80025e2 <HAL_RCC_OscConfig+0x36e>
 80025ca:	4b5b      	ldr	r3, [pc, #364]	@ (8002738 <HAL_RCC_OscConfig+0x4c4>)
 80025cc:	6a1b      	ldr	r3, [r3, #32]
 80025ce:	4a5a      	ldr	r2, [pc, #360]	@ (8002738 <HAL_RCC_OscConfig+0x4c4>)
 80025d0:	f023 0301 	bic.w	r3, r3, #1
 80025d4:	6213      	str	r3, [r2, #32]
 80025d6:	4b58      	ldr	r3, [pc, #352]	@ (8002738 <HAL_RCC_OscConfig+0x4c4>)
 80025d8:	6a1b      	ldr	r3, [r3, #32]
 80025da:	4a57      	ldr	r2, [pc, #348]	@ (8002738 <HAL_RCC_OscConfig+0x4c4>)
 80025dc:	f023 0304 	bic.w	r3, r3, #4
 80025e0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	68db      	ldr	r3, [r3, #12]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d015      	beq.n	8002616 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025ea:	f7fe fc05 	bl	8000df8 <HAL_GetTick>
 80025ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025f0:	e00a      	b.n	8002608 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025f2:	f7fe fc01 	bl	8000df8 <HAL_GetTick>
 80025f6:	4602      	mov	r2, r0
 80025f8:	693b      	ldr	r3, [r7, #16]
 80025fa:	1ad3      	subs	r3, r2, r3
 80025fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002600:	4293      	cmp	r3, r2
 8002602:	d901      	bls.n	8002608 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002604:	2303      	movs	r3, #3
 8002606:	e0b1      	b.n	800276c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002608:	4b4b      	ldr	r3, [pc, #300]	@ (8002738 <HAL_RCC_OscConfig+0x4c4>)
 800260a:	6a1b      	ldr	r3, [r3, #32]
 800260c:	f003 0302 	and.w	r3, r3, #2
 8002610:	2b00      	cmp	r3, #0
 8002612:	d0ee      	beq.n	80025f2 <HAL_RCC_OscConfig+0x37e>
 8002614:	e014      	b.n	8002640 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002616:	f7fe fbef 	bl	8000df8 <HAL_GetTick>
 800261a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800261c:	e00a      	b.n	8002634 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800261e:	f7fe fbeb 	bl	8000df8 <HAL_GetTick>
 8002622:	4602      	mov	r2, r0
 8002624:	693b      	ldr	r3, [r7, #16]
 8002626:	1ad3      	subs	r3, r2, r3
 8002628:	f241 3288 	movw	r2, #5000	@ 0x1388
 800262c:	4293      	cmp	r3, r2
 800262e:	d901      	bls.n	8002634 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002630:	2303      	movs	r3, #3
 8002632:	e09b      	b.n	800276c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002634:	4b40      	ldr	r3, [pc, #256]	@ (8002738 <HAL_RCC_OscConfig+0x4c4>)
 8002636:	6a1b      	ldr	r3, [r3, #32]
 8002638:	f003 0302 	and.w	r3, r3, #2
 800263c:	2b00      	cmp	r3, #0
 800263e:	d1ee      	bne.n	800261e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002640:	7dfb      	ldrb	r3, [r7, #23]
 8002642:	2b01      	cmp	r3, #1
 8002644:	d105      	bne.n	8002652 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002646:	4b3c      	ldr	r3, [pc, #240]	@ (8002738 <HAL_RCC_OscConfig+0x4c4>)
 8002648:	69db      	ldr	r3, [r3, #28]
 800264a:	4a3b      	ldr	r2, [pc, #236]	@ (8002738 <HAL_RCC_OscConfig+0x4c4>)
 800264c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002650:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	69db      	ldr	r3, [r3, #28]
 8002656:	2b00      	cmp	r3, #0
 8002658:	f000 8087 	beq.w	800276a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800265c:	4b36      	ldr	r3, [pc, #216]	@ (8002738 <HAL_RCC_OscConfig+0x4c4>)
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	f003 030c 	and.w	r3, r3, #12
 8002664:	2b08      	cmp	r3, #8
 8002666:	d061      	beq.n	800272c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	69db      	ldr	r3, [r3, #28]
 800266c:	2b02      	cmp	r3, #2
 800266e:	d146      	bne.n	80026fe <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002670:	4b33      	ldr	r3, [pc, #204]	@ (8002740 <HAL_RCC_OscConfig+0x4cc>)
 8002672:	2200      	movs	r2, #0
 8002674:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002676:	f7fe fbbf 	bl	8000df8 <HAL_GetTick>
 800267a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800267c:	e008      	b.n	8002690 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800267e:	f7fe fbbb 	bl	8000df8 <HAL_GetTick>
 8002682:	4602      	mov	r2, r0
 8002684:	693b      	ldr	r3, [r7, #16]
 8002686:	1ad3      	subs	r3, r2, r3
 8002688:	2b02      	cmp	r3, #2
 800268a:	d901      	bls.n	8002690 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800268c:	2303      	movs	r3, #3
 800268e:	e06d      	b.n	800276c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002690:	4b29      	ldr	r3, [pc, #164]	@ (8002738 <HAL_RCC_OscConfig+0x4c4>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002698:	2b00      	cmp	r3, #0
 800269a:	d1f0      	bne.n	800267e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6a1b      	ldr	r3, [r3, #32]
 80026a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80026a4:	d108      	bne.n	80026b8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80026a6:	4b24      	ldr	r3, [pc, #144]	@ (8002738 <HAL_RCC_OscConfig+0x4c4>)
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	689b      	ldr	r3, [r3, #8]
 80026b2:	4921      	ldr	r1, [pc, #132]	@ (8002738 <HAL_RCC_OscConfig+0x4c4>)
 80026b4:	4313      	orrs	r3, r2
 80026b6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80026b8:	4b1f      	ldr	r3, [pc, #124]	@ (8002738 <HAL_RCC_OscConfig+0x4c4>)
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6a19      	ldr	r1, [r3, #32]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026c8:	430b      	orrs	r3, r1
 80026ca:	491b      	ldr	r1, [pc, #108]	@ (8002738 <HAL_RCC_OscConfig+0x4c4>)
 80026cc:	4313      	orrs	r3, r2
 80026ce:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026d0:	4b1b      	ldr	r3, [pc, #108]	@ (8002740 <HAL_RCC_OscConfig+0x4cc>)
 80026d2:	2201      	movs	r2, #1
 80026d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026d6:	f7fe fb8f 	bl	8000df8 <HAL_GetTick>
 80026da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80026dc:	e008      	b.n	80026f0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026de:	f7fe fb8b 	bl	8000df8 <HAL_GetTick>
 80026e2:	4602      	mov	r2, r0
 80026e4:	693b      	ldr	r3, [r7, #16]
 80026e6:	1ad3      	subs	r3, r2, r3
 80026e8:	2b02      	cmp	r3, #2
 80026ea:	d901      	bls.n	80026f0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80026ec:	2303      	movs	r3, #3
 80026ee:	e03d      	b.n	800276c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80026f0:	4b11      	ldr	r3, [pc, #68]	@ (8002738 <HAL_RCC_OscConfig+0x4c4>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d0f0      	beq.n	80026de <HAL_RCC_OscConfig+0x46a>
 80026fc:	e035      	b.n	800276a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026fe:	4b10      	ldr	r3, [pc, #64]	@ (8002740 <HAL_RCC_OscConfig+0x4cc>)
 8002700:	2200      	movs	r2, #0
 8002702:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002704:	f7fe fb78 	bl	8000df8 <HAL_GetTick>
 8002708:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800270a:	e008      	b.n	800271e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800270c:	f7fe fb74 	bl	8000df8 <HAL_GetTick>
 8002710:	4602      	mov	r2, r0
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	1ad3      	subs	r3, r2, r3
 8002716:	2b02      	cmp	r3, #2
 8002718:	d901      	bls.n	800271e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800271a:	2303      	movs	r3, #3
 800271c:	e026      	b.n	800276c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800271e:	4b06      	ldr	r3, [pc, #24]	@ (8002738 <HAL_RCC_OscConfig+0x4c4>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002726:	2b00      	cmp	r3, #0
 8002728:	d1f0      	bne.n	800270c <HAL_RCC_OscConfig+0x498>
 800272a:	e01e      	b.n	800276a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	69db      	ldr	r3, [r3, #28]
 8002730:	2b01      	cmp	r3, #1
 8002732:	d107      	bne.n	8002744 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002734:	2301      	movs	r3, #1
 8002736:	e019      	b.n	800276c <HAL_RCC_OscConfig+0x4f8>
 8002738:	40021000 	.word	0x40021000
 800273c:	40007000 	.word	0x40007000
 8002740:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002744:	4b0b      	ldr	r3, [pc, #44]	@ (8002774 <HAL_RCC_OscConfig+0x500>)
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6a1b      	ldr	r3, [r3, #32]
 8002754:	429a      	cmp	r2, r3
 8002756:	d106      	bne.n	8002766 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002762:	429a      	cmp	r2, r3
 8002764:	d001      	beq.n	800276a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002766:	2301      	movs	r3, #1
 8002768:	e000      	b.n	800276c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800276a:	2300      	movs	r3, #0
}
 800276c:	4618      	mov	r0, r3
 800276e:	3718      	adds	r7, #24
 8002770:	46bd      	mov	sp, r7
 8002772:	bd80      	pop	{r7, pc}
 8002774:	40021000 	.word	0x40021000

08002778 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b084      	sub	sp, #16
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
 8002780:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d101      	bne.n	800278c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002788:	2301      	movs	r3, #1
 800278a:	e0d0      	b.n	800292e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800278c:	4b6a      	ldr	r3, [pc, #424]	@ (8002938 <HAL_RCC_ClockConfig+0x1c0>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f003 0307 	and.w	r3, r3, #7
 8002794:	683a      	ldr	r2, [r7, #0]
 8002796:	429a      	cmp	r2, r3
 8002798:	d910      	bls.n	80027bc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800279a:	4b67      	ldr	r3, [pc, #412]	@ (8002938 <HAL_RCC_ClockConfig+0x1c0>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f023 0207 	bic.w	r2, r3, #7
 80027a2:	4965      	ldr	r1, [pc, #404]	@ (8002938 <HAL_RCC_ClockConfig+0x1c0>)
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	4313      	orrs	r3, r2
 80027a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027aa:	4b63      	ldr	r3, [pc, #396]	@ (8002938 <HAL_RCC_ClockConfig+0x1c0>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f003 0307 	and.w	r3, r3, #7
 80027b2:	683a      	ldr	r2, [r7, #0]
 80027b4:	429a      	cmp	r2, r3
 80027b6:	d001      	beq.n	80027bc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80027b8:	2301      	movs	r3, #1
 80027ba:	e0b8      	b.n	800292e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f003 0302 	and.w	r3, r3, #2
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d020      	beq.n	800280a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f003 0304 	and.w	r3, r3, #4
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d005      	beq.n	80027e0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80027d4:	4b59      	ldr	r3, [pc, #356]	@ (800293c <HAL_RCC_ClockConfig+0x1c4>)
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	4a58      	ldr	r2, [pc, #352]	@ (800293c <HAL_RCC_ClockConfig+0x1c4>)
 80027da:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80027de:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f003 0308 	and.w	r3, r3, #8
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d005      	beq.n	80027f8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80027ec:	4b53      	ldr	r3, [pc, #332]	@ (800293c <HAL_RCC_ClockConfig+0x1c4>)
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	4a52      	ldr	r2, [pc, #328]	@ (800293c <HAL_RCC_ClockConfig+0x1c4>)
 80027f2:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80027f6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027f8:	4b50      	ldr	r3, [pc, #320]	@ (800293c <HAL_RCC_ClockConfig+0x1c4>)
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	494d      	ldr	r1, [pc, #308]	@ (800293c <HAL_RCC_ClockConfig+0x1c4>)
 8002806:	4313      	orrs	r3, r2
 8002808:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f003 0301 	and.w	r3, r3, #1
 8002812:	2b00      	cmp	r3, #0
 8002814:	d040      	beq.n	8002898 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	2b01      	cmp	r3, #1
 800281c:	d107      	bne.n	800282e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800281e:	4b47      	ldr	r3, [pc, #284]	@ (800293c <HAL_RCC_ClockConfig+0x1c4>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002826:	2b00      	cmp	r3, #0
 8002828:	d115      	bne.n	8002856 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	e07f      	b.n	800292e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	2b02      	cmp	r3, #2
 8002834:	d107      	bne.n	8002846 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002836:	4b41      	ldr	r3, [pc, #260]	@ (800293c <HAL_RCC_ClockConfig+0x1c4>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800283e:	2b00      	cmp	r3, #0
 8002840:	d109      	bne.n	8002856 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002842:	2301      	movs	r3, #1
 8002844:	e073      	b.n	800292e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002846:	4b3d      	ldr	r3, [pc, #244]	@ (800293c <HAL_RCC_ClockConfig+0x1c4>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f003 0302 	and.w	r3, r3, #2
 800284e:	2b00      	cmp	r3, #0
 8002850:	d101      	bne.n	8002856 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	e06b      	b.n	800292e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002856:	4b39      	ldr	r3, [pc, #228]	@ (800293c <HAL_RCC_ClockConfig+0x1c4>)
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	f023 0203 	bic.w	r2, r3, #3
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	4936      	ldr	r1, [pc, #216]	@ (800293c <HAL_RCC_ClockConfig+0x1c4>)
 8002864:	4313      	orrs	r3, r2
 8002866:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002868:	f7fe fac6 	bl	8000df8 <HAL_GetTick>
 800286c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800286e:	e00a      	b.n	8002886 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002870:	f7fe fac2 	bl	8000df8 <HAL_GetTick>
 8002874:	4602      	mov	r2, r0
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	1ad3      	subs	r3, r2, r3
 800287a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800287e:	4293      	cmp	r3, r2
 8002880:	d901      	bls.n	8002886 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002882:	2303      	movs	r3, #3
 8002884:	e053      	b.n	800292e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002886:	4b2d      	ldr	r3, [pc, #180]	@ (800293c <HAL_RCC_ClockConfig+0x1c4>)
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	f003 020c 	and.w	r2, r3, #12
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	009b      	lsls	r3, r3, #2
 8002894:	429a      	cmp	r2, r3
 8002896:	d1eb      	bne.n	8002870 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002898:	4b27      	ldr	r3, [pc, #156]	@ (8002938 <HAL_RCC_ClockConfig+0x1c0>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f003 0307 	and.w	r3, r3, #7
 80028a0:	683a      	ldr	r2, [r7, #0]
 80028a2:	429a      	cmp	r2, r3
 80028a4:	d210      	bcs.n	80028c8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028a6:	4b24      	ldr	r3, [pc, #144]	@ (8002938 <HAL_RCC_ClockConfig+0x1c0>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f023 0207 	bic.w	r2, r3, #7
 80028ae:	4922      	ldr	r1, [pc, #136]	@ (8002938 <HAL_RCC_ClockConfig+0x1c0>)
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	4313      	orrs	r3, r2
 80028b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028b6:	4b20      	ldr	r3, [pc, #128]	@ (8002938 <HAL_RCC_ClockConfig+0x1c0>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f003 0307 	and.w	r3, r3, #7
 80028be:	683a      	ldr	r2, [r7, #0]
 80028c0:	429a      	cmp	r2, r3
 80028c2:	d001      	beq.n	80028c8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80028c4:	2301      	movs	r3, #1
 80028c6:	e032      	b.n	800292e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f003 0304 	and.w	r3, r3, #4
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d008      	beq.n	80028e6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028d4:	4b19      	ldr	r3, [pc, #100]	@ (800293c <HAL_RCC_ClockConfig+0x1c4>)
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	68db      	ldr	r3, [r3, #12]
 80028e0:	4916      	ldr	r1, [pc, #88]	@ (800293c <HAL_RCC_ClockConfig+0x1c4>)
 80028e2:	4313      	orrs	r3, r2
 80028e4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f003 0308 	and.w	r3, r3, #8
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d009      	beq.n	8002906 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80028f2:	4b12      	ldr	r3, [pc, #72]	@ (800293c <HAL_RCC_ClockConfig+0x1c4>)
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	691b      	ldr	r3, [r3, #16]
 80028fe:	00db      	lsls	r3, r3, #3
 8002900:	490e      	ldr	r1, [pc, #56]	@ (800293c <HAL_RCC_ClockConfig+0x1c4>)
 8002902:	4313      	orrs	r3, r2
 8002904:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002906:	f000 f821 	bl	800294c <HAL_RCC_GetSysClockFreq>
 800290a:	4602      	mov	r2, r0
 800290c:	4b0b      	ldr	r3, [pc, #44]	@ (800293c <HAL_RCC_ClockConfig+0x1c4>)
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	091b      	lsrs	r3, r3, #4
 8002912:	f003 030f 	and.w	r3, r3, #15
 8002916:	490a      	ldr	r1, [pc, #40]	@ (8002940 <HAL_RCC_ClockConfig+0x1c8>)
 8002918:	5ccb      	ldrb	r3, [r1, r3]
 800291a:	fa22 f303 	lsr.w	r3, r2, r3
 800291e:	4a09      	ldr	r2, [pc, #36]	@ (8002944 <HAL_RCC_ClockConfig+0x1cc>)
 8002920:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002922:	4b09      	ldr	r3, [pc, #36]	@ (8002948 <HAL_RCC_ClockConfig+0x1d0>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4618      	mov	r0, r3
 8002928:	f7fe fa24 	bl	8000d74 <HAL_InitTick>

  return HAL_OK;
 800292c:	2300      	movs	r3, #0
}
 800292e:	4618      	mov	r0, r3
 8002930:	3710      	adds	r7, #16
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}
 8002936:	bf00      	nop
 8002938:	40022000 	.word	0x40022000
 800293c:	40021000 	.word	0x40021000
 8002940:	08004ac8 	.word	0x08004ac8
 8002944:	20000040 	.word	0x20000040
 8002948:	20000044 	.word	0x20000044

0800294c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800294c:	b480      	push	{r7}
 800294e:	b087      	sub	sp, #28
 8002950:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002952:	2300      	movs	r3, #0
 8002954:	60fb      	str	r3, [r7, #12]
 8002956:	2300      	movs	r3, #0
 8002958:	60bb      	str	r3, [r7, #8]
 800295a:	2300      	movs	r3, #0
 800295c:	617b      	str	r3, [r7, #20]
 800295e:	2300      	movs	r3, #0
 8002960:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002962:	2300      	movs	r3, #0
 8002964:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002966:	4b1e      	ldr	r3, [pc, #120]	@ (80029e0 <HAL_RCC_GetSysClockFreq+0x94>)
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	f003 030c 	and.w	r3, r3, #12
 8002972:	2b04      	cmp	r3, #4
 8002974:	d002      	beq.n	800297c <HAL_RCC_GetSysClockFreq+0x30>
 8002976:	2b08      	cmp	r3, #8
 8002978:	d003      	beq.n	8002982 <HAL_RCC_GetSysClockFreq+0x36>
 800297a:	e027      	b.n	80029cc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800297c:	4b19      	ldr	r3, [pc, #100]	@ (80029e4 <HAL_RCC_GetSysClockFreq+0x98>)
 800297e:	613b      	str	r3, [r7, #16]
      break;
 8002980:	e027      	b.n	80029d2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	0c9b      	lsrs	r3, r3, #18
 8002986:	f003 030f 	and.w	r3, r3, #15
 800298a:	4a17      	ldr	r2, [pc, #92]	@ (80029e8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800298c:	5cd3      	ldrb	r3, [r2, r3]
 800298e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002996:	2b00      	cmp	r3, #0
 8002998:	d010      	beq.n	80029bc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800299a:	4b11      	ldr	r3, [pc, #68]	@ (80029e0 <HAL_RCC_GetSysClockFreq+0x94>)
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	0c5b      	lsrs	r3, r3, #17
 80029a0:	f003 0301 	and.w	r3, r3, #1
 80029a4:	4a11      	ldr	r2, [pc, #68]	@ (80029ec <HAL_RCC_GetSysClockFreq+0xa0>)
 80029a6:	5cd3      	ldrb	r3, [r2, r3]
 80029a8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	4a0d      	ldr	r2, [pc, #52]	@ (80029e4 <HAL_RCC_GetSysClockFreq+0x98>)
 80029ae:	fb03 f202 	mul.w	r2, r3, r2
 80029b2:	68bb      	ldr	r3, [r7, #8]
 80029b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80029b8:	617b      	str	r3, [r7, #20]
 80029ba:	e004      	b.n	80029c6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	4a0c      	ldr	r2, [pc, #48]	@ (80029f0 <HAL_RCC_GetSysClockFreq+0xa4>)
 80029c0:	fb02 f303 	mul.w	r3, r2, r3
 80029c4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	613b      	str	r3, [r7, #16]
      break;
 80029ca:	e002      	b.n	80029d2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80029cc:	4b05      	ldr	r3, [pc, #20]	@ (80029e4 <HAL_RCC_GetSysClockFreq+0x98>)
 80029ce:	613b      	str	r3, [r7, #16]
      break;
 80029d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80029d2:	693b      	ldr	r3, [r7, #16]
}
 80029d4:	4618      	mov	r0, r3
 80029d6:	371c      	adds	r7, #28
 80029d8:	46bd      	mov	sp, r7
 80029da:	bc80      	pop	{r7}
 80029dc:	4770      	bx	lr
 80029de:	bf00      	nop
 80029e0:	40021000 	.word	0x40021000
 80029e4:	007a1200 	.word	0x007a1200
 80029e8:	08004ae0 	.word	0x08004ae0
 80029ec:	08004af0 	.word	0x08004af0
 80029f0:	003d0900 	.word	0x003d0900

080029f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029f4:	b480      	push	{r7}
 80029f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80029f8:	4b02      	ldr	r3, [pc, #8]	@ (8002a04 <HAL_RCC_GetHCLKFreq+0x10>)
 80029fa:	681b      	ldr	r3, [r3, #0]
}
 80029fc:	4618      	mov	r0, r3
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bc80      	pop	{r7}
 8002a02:	4770      	bx	lr
 8002a04:	20000040 	.word	0x20000040

08002a08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002a0c:	f7ff fff2 	bl	80029f4 <HAL_RCC_GetHCLKFreq>
 8002a10:	4602      	mov	r2, r0
 8002a12:	4b05      	ldr	r3, [pc, #20]	@ (8002a28 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	0a1b      	lsrs	r3, r3, #8
 8002a18:	f003 0307 	and.w	r3, r3, #7
 8002a1c:	4903      	ldr	r1, [pc, #12]	@ (8002a2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a1e:	5ccb      	ldrb	r3, [r1, r3]
 8002a20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a24:	4618      	mov	r0, r3
 8002a26:	bd80      	pop	{r7, pc}
 8002a28:	40021000 	.word	0x40021000
 8002a2c:	08004ad8 	.word	0x08004ad8

08002a30 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002a34:	f7ff ffde 	bl	80029f4 <HAL_RCC_GetHCLKFreq>
 8002a38:	4602      	mov	r2, r0
 8002a3a:	4b05      	ldr	r3, [pc, #20]	@ (8002a50 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	0adb      	lsrs	r3, r3, #11
 8002a40:	f003 0307 	and.w	r3, r3, #7
 8002a44:	4903      	ldr	r1, [pc, #12]	@ (8002a54 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a46:	5ccb      	ldrb	r3, [r1, r3]
 8002a48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	bd80      	pop	{r7, pc}
 8002a50:	40021000 	.word	0x40021000
 8002a54:	08004ad8 	.word	0x08004ad8

08002a58 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	b085      	sub	sp, #20
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002a60:	4b0a      	ldr	r3, [pc, #40]	@ (8002a8c <RCC_Delay+0x34>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a0a      	ldr	r2, [pc, #40]	@ (8002a90 <RCC_Delay+0x38>)
 8002a66:	fba2 2303 	umull	r2, r3, r2, r3
 8002a6a:	0a5b      	lsrs	r3, r3, #9
 8002a6c:	687a      	ldr	r2, [r7, #4]
 8002a6e:	fb02 f303 	mul.w	r3, r2, r3
 8002a72:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002a74:	bf00      	nop
  }
  while (Delay --);
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	1e5a      	subs	r2, r3, #1
 8002a7a:	60fa      	str	r2, [r7, #12]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d1f9      	bne.n	8002a74 <RCC_Delay+0x1c>
}
 8002a80:	bf00      	nop
 8002a82:	bf00      	nop
 8002a84:	3714      	adds	r7, #20
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bc80      	pop	{r7}
 8002a8a:	4770      	bx	lr
 8002a8c:	20000040 	.word	0x20000040
 8002a90:	10624dd3 	.word	0x10624dd3

08002a94 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b082      	sub	sp, #8
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d101      	bne.n	8002aa6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e042      	b.n	8002b2c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002aac:	b2db      	uxtb	r3, r3
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d106      	bne.n	8002ac0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002aba:	6878      	ldr	r0, [r7, #4]
 8002abc:	f7fe f88e 	bl	8000bdc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2224      	movs	r2, #36	@ 0x24
 8002ac4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	68da      	ldr	r2, [r3, #12]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002ad6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002ad8:	6878      	ldr	r0, [r7, #4]
 8002ada:	f000 ff3d 	bl	8003958 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	691a      	ldr	r2, [r3, #16]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002aec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	695a      	ldr	r2, [r3, #20]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002afc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	68da      	ldr	r2, [r3, #12]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002b0c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2200      	movs	r2, #0
 8002b12:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2220      	movs	r2, #32
 8002b18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2220      	movs	r2, #32
 8002b20:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2200      	movs	r2, #0
 8002b28:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002b2a:	2300      	movs	r3, #0
}
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	3708      	adds	r7, #8
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bd80      	pop	{r7, pc}

08002b34 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b08a      	sub	sp, #40	@ 0x28
 8002b38:	af02      	add	r7, sp, #8
 8002b3a:	60f8      	str	r0, [r7, #12]
 8002b3c:	60b9      	str	r1, [r7, #8]
 8002b3e:	603b      	str	r3, [r7, #0]
 8002b40:	4613      	mov	r3, r2
 8002b42:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002b44:	2300      	movs	r3, #0
 8002b46:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b4e:	b2db      	uxtb	r3, r3
 8002b50:	2b20      	cmp	r3, #32
 8002b52:	d175      	bne.n	8002c40 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d002      	beq.n	8002b60 <HAL_UART_Transmit+0x2c>
 8002b5a:	88fb      	ldrh	r3, [r7, #6]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d101      	bne.n	8002b64 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002b60:	2301      	movs	r3, #1
 8002b62:	e06e      	b.n	8002c42 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	2200      	movs	r2, #0
 8002b68:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	2221      	movs	r2, #33	@ 0x21
 8002b6e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002b72:	f7fe f941 	bl	8000df8 <HAL_GetTick>
 8002b76:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	88fa      	ldrh	r2, [r7, #6]
 8002b7c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	88fa      	ldrh	r2, [r7, #6]
 8002b82:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	689b      	ldr	r3, [r3, #8]
 8002b88:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002b8c:	d108      	bne.n	8002ba0 <HAL_UART_Transmit+0x6c>
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	691b      	ldr	r3, [r3, #16]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d104      	bne.n	8002ba0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002b96:	2300      	movs	r3, #0
 8002b98:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002b9a:	68bb      	ldr	r3, [r7, #8]
 8002b9c:	61bb      	str	r3, [r7, #24]
 8002b9e:	e003      	b.n	8002ba8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002ba0:	68bb      	ldr	r3, [r7, #8]
 8002ba2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002ba8:	e02e      	b.n	8002c08 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	9300      	str	r3, [sp, #0]
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	2180      	movs	r1, #128	@ 0x80
 8002bb4:	68f8      	ldr	r0, [r7, #12]
 8002bb6:	f000 fc1a 	bl	80033ee <UART_WaitOnFlagUntilTimeout>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d005      	beq.n	8002bcc <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	2220      	movs	r2, #32
 8002bc4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002bc8:	2303      	movs	r3, #3
 8002bca:	e03a      	b.n	8002c42 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002bcc:	69fb      	ldr	r3, [r7, #28]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d10b      	bne.n	8002bea <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002bd2:	69bb      	ldr	r3, [r7, #24]
 8002bd4:	881b      	ldrh	r3, [r3, #0]
 8002bd6:	461a      	mov	r2, r3
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002be0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002be2:	69bb      	ldr	r3, [r7, #24]
 8002be4:	3302      	adds	r3, #2
 8002be6:	61bb      	str	r3, [r7, #24]
 8002be8:	e007      	b.n	8002bfa <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002bea:	69fb      	ldr	r3, [r7, #28]
 8002bec:	781a      	ldrb	r2, [r3, #0]
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002bf4:	69fb      	ldr	r3, [r7, #28]
 8002bf6:	3301      	adds	r3, #1
 8002bf8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002bfe:	b29b      	uxth	r3, r3
 8002c00:	3b01      	subs	r3, #1
 8002c02:	b29a      	uxth	r2, r3
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002c0c:	b29b      	uxth	r3, r3
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d1cb      	bne.n	8002baa <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	9300      	str	r3, [sp, #0]
 8002c16:	697b      	ldr	r3, [r7, #20]
 8002c18:	2200      	movs	r2, #0
 8002c1a:	2140      	movs	r1, #64	@ 0x40
 8002c1c:	68f8      	ldr	r0, [r7, #12]
 8002c1e:	f000 fbe6 	bl	80033ee <UART_WaitOnFlagUntilTimeout>
 8002c22:	4603      	mov	r3, r0
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d005      	beq.n	8002c34 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	2220      	movs	r2, #32
 8002c2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002c30:	2303      	movs	r3, #3
 8002c32:	e006      	b.n	8002c42 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	2220      	movs	r2, #32
 8002c38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	e000      	b.n	8002c42 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002c40:	2302      	movs	r3, #2
  }
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	3720      	adds	r7, #32
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}

08002c4a <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002c4a:	b580      	push	{r7, lr}
 8002c4c:	b084      	sub	sp, #16
 8002c4e:	af00      	add	r7, sp, #0
 8002c50:	60f8      	str	r0, [r7, #12]
 8002c52:	60b9      	str	r1, [r7, #8]
 8002c54:	4613      	mov	r3, r2
 8002c56:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002c5e:	b2db      	uxtb	r3, r3
 8002c60:	2b20      	cmp	r3, #32
 8002c62:	d112      	bne.n	8002c8a <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c64:	68bb      	ldr	r3, [r7, #8]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d002      	beq.n	8002c70 <HAL_UART_Receive_DMA+0x26>
 8002c6a:	88fb      	ldrh	r3, [r7, #6]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d101      	bne.n	8002c74 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8002c70:	2301      	movs	r3, #1
 8002c72:	e00b      	b.n	8002c8c <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	2200      	movs	r2, #0
 8002c78:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8002c7a:	88fb      	ldrh	r3, [r7, #6]
 8002c7c:	461a      	mov	r2, r3
 8002c7e:	68b9      	ldr	r1, [r7, #8]
 8002c80:	68f8      	ldr	r0, [r7, #12]
 8002c82:	f000 fc0d 	bl	80034a0 <UART_Start_Receive_DMA>
 8002c86:	4603      	mov	r3, r0
 8002c88:	e000      	b.n	8002c8c <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8002c8a:	2302      	movs	r3, #2
  }
}
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	3710      	adds	r7, #16
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bd80      	pop	{r7, pc}

08002c94 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b0ba      	sub	sp, #232	@ 0xe8
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	68db      	ldr	r3, [r3, #12]
 8002cac:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	695b      	ldr	r3, [r3, #20]
 8002cb6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002cc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002cca:	f003 030f 	and.w	r3, r3, #15
 8002cce:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8002cd2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d10f      	bne.n	8002cfa <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002cda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002cde:	f003 0320 	and.w	r3, r3, #32
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d009      	beq.n	8002cfa <HAL_UART_IRQHandler+0x66>
 8002ce6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002cea:	f003 0320 	and.w	r3, r3, #32
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d003      	beq.n	8002cfa <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002cf2:	6878      	ldr	r0, [r7, #4]
 8002cf4:	f000 fd72 	bl	80037dc <UART_Receive_IT>
      return;
 8002cf8:	e25b      	b.n	80031b2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002cfa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	f000 80de 	beq.w	8002ec0 <HAL_UART_IRQHandler+0x22c>
 8002d04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002d08:	f003 0301 	and.w	r3, r3, #1
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d106      	bne.n	8002d1e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002d10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002d14:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	f000 80d1 	beq.w	8002ec0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002d1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002d22:	f003 0301 	and.w	r3, r3, #1
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d00b      	beq.n	8002d42 <HAL_UART_IRQHandler+0xae>
 8002d2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002d2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d005      	beq.n	8002d42 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d3a:	f043 0201 	orr.w	r2, r3, #1
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002d42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002d46:	f003 0304 	and.w	r3, r3, #4
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d00b      	beq.n	8002d66 <HAL_UART_IRQHandler+0xd2>
 8002d4e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002d52:	f003 0301 	and.w	r3, r3, #1
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d005      	beq.n	8002d66 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d5e:	f043 0202 	orr.w	r2, r3, #2
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002d66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002d6a:	f003 0302 	and.w	r3, r3, #2
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d00b      	beq.n	8002d8a <HAL_UART_IRQHandler+0xf6>
 8002d72:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002d76:	f003 0301 	and.w	r3, r3, #1
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d005      	beq.n	8002d8a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d82:	f043 0204 	orr.w	r2, r3, #4
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002d8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002d8e:	f003 0308 	and.w	r3, r3, #8
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d011      	beq.n	8002dba <HAL_UART_IRQHandler+0x126>
 8002d96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002d9a:	f003 0320 	and.w	r3, r3, #32
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d105      	bne.n	8002dae <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002da2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002da6:	f003 0301 	and.w	r3, r3, #1
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d005      	beq.n	8002dba <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002db2:	f043 0208 	orr.w	r2, r3, #8
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	f000 81f2 	beq.w	80031a8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002dc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002dc8:	f003 0320 	and.w	r3, r3, #32
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d008      	beq.n	8002de2 <HAL_UART_IRQHandler+0x14e>
 8002dd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002dd4:	f003 0320 	and.w	r3, r3, #32
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d002      	beq.n	8002de2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002ddc:	6878      	ldr	r0, [r7, #4]
 8002dde:	f000 fcfd 	bl	80037dc <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	695b      	ldr	r3, [r3, #20]
 8002de8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	bf14      	ite	ne
 8002df0:	2301      	movne	r3, #1
 8002df2:	2300      	moveq	r3, #0
 8002df4:	b2db      	uxtb	r3, r3
 8002df6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dfe:	f003 0308 	and.w	r3, r3, #8
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d103      	bne.n	8002e0e <HAL_UART_IRQHandler+0x17a>
 8002e06:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d04f      	beq.n	8002eae <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002e0e:	6878      	ldr	r0, [r7, #4]
 8002e10:	f000 fc07 	bl	8003622 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	695b      	ldr	r3, [r3, #20]
 8002e1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d041      	beq.n	8002ea6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	3314      	adds	r3, #20
 8002e28:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e2c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002e30:	e853 3f00 	ldrex	r3, [r3]
 8002e34:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002e38:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002e3c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002e40:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	3314      	adds	r3, #20
 8002e4a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002e4e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002e52:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e56:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002e5a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002e5e:	e841 2300 	strex	r3, r2, [r1]
 8002e62:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002e66:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d1d9      	bne.n	8002e22 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d013      	beq.n	8002e9e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e7a:	4a7e      	ldr	r2, [pc, #504]	@ (8003074 <HAL_UART_IRQHandler+0x3e0>)
 8002e7c:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e82:	4618      	mov	r0, r3
 8002e84:	f7fe f9ea 	bl	800125c <HAL_DMA_Abort_IT>
 8002e88:	4603      	mov	r3, r0
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d016      	beq.n	8002ebc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e94:	687a      	ldr	r2, [r7, #4]
 8002e96:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002e98:	4610      	mov	r0, r2
 8002e9a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e9c:	e00e      	b.n	8002ebc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002e9e:	6878      	ldr	r0, [r7, #4]
 8002ea0:	f000 f993 	bl	80031ca <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ea4:	e00a      	b.n	8002ebc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002ea6:	6878      	ldr	r0, [r7, #4]
 8002ea8:	f000 f98f 	bl	80031ca <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002eac:	e006      	b.n	8002ebc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002eae:	6878      	ldr	r0, [r7, #4]
 8002eb0:	f000 f98b 	bl	80031ca <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8002eba:	e175      	b.n	80031a8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ebc:	bf00      	nop
    return;
 8002ebe:	e173      	b.n	80031a8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ec4:	2b01      	cmp	r3, #1
 8002ec6:	f040 814f 	bne.w	8003168 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002eca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ece:	f003 0310 	and.w	r3, r3, #16
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	f000 8148 	beq.w	8003168 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002ed8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002edc:	f003 0310 	and.w	r3, r3, #16
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	f000 8141 	beq.w	8003168 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	60bb      	str	r3, [r7, #8]
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	60bb      	str	r3, [r7, #8]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	60bb      	str	r3, [r7, #8]
 8002efa:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	695b      	ldr	r3, [r3, #20]
 8002f02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	f000 80b6 	beq.w	8003078 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002f18:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	f000 8145 	beq.w	80031ac <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002f26:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002f2a:	429a      	cmp	r2, r3
 8002f2c:	f080 813e 	bcs.w	80031ac <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002f36:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f3c:	699b      	ldr	r3, [r3, #24]
 8002f3e:	2b20      	cmp	r3, #32
 8002f40:	f000 8088 	beq.w	8003054 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	330c      	adds	r3, #12
 8002f4a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f4e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002f52:	e853 3f00 	ldrex	r3, [r3]
 8002f56:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002f5a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002f5e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002f62:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	330c      	adds	r3, #12
 8002f6c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8002f70:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002f74:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f78:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002f7c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002f80:	e841 2300 	strex	r3, r2, [r1]
 8002f84:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002f88:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d1d9      	bne.n	8002f44 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	3314      	adds	r3, #20
 8002f96:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f98:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002f9a:	e853 3f00 	ldrex	r3, [r3]
 8002f9e:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002fa0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002fa2:	f023 0301 	bic.w	r3, r3, #1
 8002fa6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	3314      	adds	r3, #20
 8002fb0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002fb4:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002fb8:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fba:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002fbc:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002fc0:	e841 2300 	strex	r3, r2, [r1]
 8002fc4:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002fc6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d1e1      	bne.n	8002f90 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	3314      	adds	r3, #20
 8002fd2:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fd4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002fd6:	e853 3f00 	ldrex	r3, [r3]
 8002fda:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002fdc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002fde:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002fe2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	3314      	adds	r3, #20
 8002fec:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002ff0:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002ff2:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ff4:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002ff6:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002ff8:	e841 2300 	strex	r3, r2, [r1]
 8002ffc:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002ffe:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003000:	2b00      	cmp	r3, #0
 8003002:	d1e3      	bne.n	8002fcc <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2220      	movs	r2, #32
 8003008:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2200      	movs	r2, #0
 8003010:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	330c      	adds	r3, #12
 8003018:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800301a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800301c:	e853 3f00 	ldrex	r3, [r3]
 8003020:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003022:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003024:	f023 0310 	bic.w	r3, r3, #16
 8003028:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	330c      	adds	r3, #12
 8003032:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003036:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003038:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800303a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800303c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800303e:	e841 2300 	strex	r3, r2, [r1]
 8003042:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003044:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003046:	2b00      	cmp	r3, #0
 8003048:	d1e3      	bne.n	8003012 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800304e:	4618      	mov	r0, r3
 8003050:	f7fe f8c8 	bl	80011e4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2202      	movs	r2, #2
 8003058:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003062:	b29b      	uxth	r3, r3
 8003064:	1ad3      	subs	r3, r2, r3
 8003066:	b29b      	uxth	r3, r3
 8003068:	4619      	mov	r1, r3
 800306a:	6878      	ldr	r0, [r7, #4]
 800306c:	f000 f8b6 	bl	80031dc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003070:	e09c      	b.n	80031ac <HAL_UART_IRQHandler+0x518>
 8003072:	bf00      	nop
 8003074:	080036e7 	.word	0x080036e7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003080:	b29b      	uxth	r3, r3
 8003082:	1ad3      	subs	r3, r2, r3
 8003084:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800308c:	b29b      	uxth	r3, r3
 800308e:	2b00      	cmp	r3, #0
 8003090:	f000 808e 	beq.w	80031b0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003094:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003098:	2b00      	cmp	r3, #0
 800309a:	f000 8089 	beq.w	80031b0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	330c      	adds	r3, #12
 80030a4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030a8:	e853 3f00 	ldrex	r3, [r3]
 80030ac:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80030ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030b0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80030b4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	330c      	adds	r3, #12
 80030be:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80030c2:	647a      	str	r2, [r7, #68]	@ 0x44
 80030c4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030c6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80030c8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80030ca:	e841 2300 	strex	r3, r2, [r1]
 80030ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80030d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d1e3      	bne.n	800309e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	3314      	adds	r3, #20
 80030dc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030e0:	e853 3f00 	ldrex	r3, [r3]
 80030e4:	623b      	str	r3, [r7, #32]
   return(result);
 80030e6:	6a3b      	ldr	r3, [r7, #32]
 80030e8:	f023 0301 	bic.w	r3, r3, #1
 80030ec:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	3314      	adds	r3, #20
 80030f6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80030fa:	633a      	str	r2, [r7, #48]	@ 0x30
 80030fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030fe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003100:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003102:	e841 2300 	strex	r3, r2, [r1]
 8003106:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003108:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800310a:	2b00      	cmp	r3, #0
 800310c:	d1e3      	bne.n	80030d6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2220      	movs	r2, #32
 8003112:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2200      	movs	r2, #0
 800311a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	330c      	adds	r3, #12
 8003122:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003124:	693b      	ldr	r3, [r7, #16]
 8003126:	e853 3f00 	ldrex	r3, [r3]
 800312a:	60fb      	str	r3, [r7, #12]
   return(result);
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	f023 0310 	bic.w	r3, r3, #16
 8003132:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	330c      	adds	r3, #12
 800313c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003140:	61fa      	str	r2, [r7, #28]
 8003142:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003144:	69b9      	ldr	r1, [r7, #24]
 8003146:	69fa      	ldr	r2, [r7, #28]
 8003148:	e841 2300 	strex	r3, r2, [r1]
 800314c:	617b      	str	r3, [r7, #20]
   return(result);
 800314e:	697b      	ldr	r3, [r7, #20]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d1e3      	bne.n	800311c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2202      	movs	r2, #2
 8003158:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800315a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800315e:	4619      	mov	r1, r3
 8003160:	6878      	ldr	r0, [r7, #4]
 8003162:	f000 f83b 	bl	80031dc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003166:	e023      	b.n	80031b0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003168:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800316c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003170:	2b00      	cmp	r3, #0
 8003172:	d009      	beq.n	8003188 <HAL_UART_IRQHandler+0x4f4>
 8003174:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003178:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800317c:	2b00      	cmp	r3, #0
 800317e:	d003      	beq.n	8003188 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003180:	6878      	ldr	r0, [r7, #4]
 8003182:	f000 fac4 	bl	800370e <UART_Transmit_IT>
    return;
 8003186:	e014      	b.n	80031b2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003188:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800318c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003190:	2b00      	cmp	r3, #0
 8003192:	d00e      	beq.n	80031b2 <HAL_UART_IRQHandler+0x51e>
 8003194:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003198:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800319c:	2b00      	cmp	r3, #0
 800319e:	d008      	beq.n	80031b2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80031a0:	6878      	ldr	r0, [r7, #4]
 80031a2:	f000 fb03 	bl	80037ac <UART_EndTransmit_IT>
    return;
 80031a6:	e004      	b.n	80031b2 <HAL_UART_IRQHandler+0x51e>
    return;
 80031a8:	bf00      	nop
 80031aa:	e002      	b.n	80031b2 <HAL_UART_IRQHandler+0x51e>
      return;
 80031ac:	bf00      	nop
 80031ae:	e000      	b.n	80031b2 <HAL_UART_IRQHandler+0x51e>
      return;
 80031b0:	bf00      	nop
  }
}
 80031b2:	37e8      	adds	r7, #232	@ 0xe8
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd80      	pop	{r7, pc}

080031b8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80031b8:	b480      	push	{r7}
 80031ba:	b083      	sub	sp, #12
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80031c0:	bf00      	nop
 80031c2:	370c      	adds	r7, #12
 80031c4:	46bd      	mov	sp, r7
 80031c6:	bc80      	pop	{r7}
 80031c8:	4770      	bx	lr

080031ca <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80031ca:	b480      	push	{r7}
 80031cc:	b083      	sub	sp, #12
 80031ce:	af00      	add	r7, sp, #0
 80031d0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80031d2:	bf00      	nop
 80031d4:	370c      	adds	r7, #12
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bc80      	pop	{r7}
 80031da:	4770      	bx	lr

080031dc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80031dc:	b480      	push	{r7}
 80031de:	b083      	sub	sp, #12
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
 80031e4:	460b      	mov	r3, r1
 80031e6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80031e8:	bf00      	nop
 80031ea:	370c      	adds	r7, #12
 80031ec:	46bd      	mov	sp, r7
 80031ee:	bc80      	pop	{r7}
 80031f0:	4770      	bx	lr

080031f2 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80031f2:	b580      	push	{r7, lr}
 80031f4:	b09c      	sub	sp, #112	@ 0x70
 80031f6:	af00      	add	r7, sp, #0
 80031f8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031fe:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f003 0320 	and.w	r3, r3, #32
 800320a:	2b00      	cmp	r3, #0
 800320c:	d172      	bne.n	80032f4 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800320e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003210:	2200      	movs	r2, #0
 8003212:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003214:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	330c      	adds	r3, #12
 800321a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800321c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800321e:	e853 3f00 	ldrex	r3, [r3]
 8003222:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003224:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003226:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800322a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800322c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	330c      	adds	r3, #12
 8003232:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8003234:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003236:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003238:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800323a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800323c:	e841 2300 	strex	r3, r2, [r1]
 8003240:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003242:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003244:	2b00      	cmp	r3, #0
 8003246:	d1e5      	bne.n	8003214 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003248:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	3314      	adds	r3, #20
 800324e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003250:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003252:	e853 3f00 	ldrex	r3, [r3]
 8003256:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003258:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800325a:	f023 0301 	bic.w	r3, r3, #1
 800325e:	667b      	str	r3, [r7, #100]	@ 0x64
 8003260:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	3314      	adds	r3, #20
 8003266:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8003268:	647a      	str	r2, [r7, #68]	@ 0x44
 800326a:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800326c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800326e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003270:	e841 2300 	strex	r3, r2, [r1]
 8003274:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003276:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003278:	2b00      	cmp	r3, #0
 800327a:	d1e5      	bne.n	8003248 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800327c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	3314      	adds	r3, #20
 8003282:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003284:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003286:	e853 3f00 	ldrex	r3, [r3]
 800328a:	623b      	str	r3, [r7, #32]
   return(result);
 800328c:	6a3b      	ldr	r3, [r7, #32]
 800328e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003292:	663b      	str	r3, [r7, #96]	@ 0x60
 8003294:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	3314      	adds	r3, #20
 800329a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800329c:	633a      	str	r2, [r7, #48]	@ 0x30
 800329e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032a0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80032a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80032a4:	e841 2300 	strex	r3, r2, [r1]
 80032a8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80032aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d1e5      	bne.n	800327c <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80032b0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80032b2:	2220      	movs	r2, #32
 80032b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80032b8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80032ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032bc:	2b01      	cmp	r3, #1
 80032be:	d119      	bne.n	80032f4 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80032c0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	330c      	adds	r3, #12
 80032c6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032c8:	693b      	ldr	r3, [r7, #16]
 80032ca:	e853 3f00 	ldrex	r3, [r3]
 80032ce:	60fb      	str	r3, [r7, #12]
   return(result);
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	f023 0310 	bic.w	r3, r3, #16
 80032d6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80032d8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	330c      	adds	r3, #12
 80032de:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80032e0:	61fa      	str	r2, [r7, #28]
 80032e2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032e4:	69b9      	ldr	r1, [r7, #24]
 80032e6:	69fa      	ldr	r2, [r7, #28]
 80032e8:	e841 2300 	strex	r3, r2, [r1]
 80032ec:	617b      	str	r3, [r7, #20]
   return(result);
 80032ee:	697b      	ldr	r3, [r7, #20]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d1e5      	bne.n	80032c0 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80032f4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80032f6:	2200      	movs	r2, #0
 80032f8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80032fa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80032fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032fe:	2b01      	cmp	r3, #1
 8003300:	d106      	bne.n	8003310 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003302:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003304:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003306:	4619      	mov	r1, r3
 8003308:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800330a:	f7ff ff67 	bl	80031dc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800330e:	e002      	b.n	8003316 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8003310:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8003312:	f7fd fad7 	bl	80008c4 <HAL_UART_RxCpltCallback>
}
 8003316:	bf00      	nop
 8003318:	3770      	adds	r7, #112	@ 0x70
 800331a:	46bd      	mov	sp, r7
 800331c:	bd80      	pop	{r7, pc}

0800331e <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800331e:	b580      	push	{r7, lr}
 8003320:	b084      	sub	sp, #16
 8003322:	af00      	add	r7, sp, #0
 8003324:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800332a:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	2201      	movs	r2, #1
 8003330:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003336:	2b01      	cmp	r3, #1
 8003338:	d108      	bne.n	800334c <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800333e:	085b      	lsrs	r3, r3, #1
 8003340:	b29b      	uxth	r3, r3
 8003342:	4619      	mov	r1, r3
 8003344:	68f8      	ldr	r0, [r7, #12]
 8003346:	f7ff ff49 	bl	80031dc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800334a:	e002      	b.n	8003352 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800334c:	68f8      	ldr	r0, [r7, #12]
 800334e:	f7fd faed 	bl	800092c <HAL_UART_RxHalfCpltCallback>
}
 8003352:	bf00      	nop
 8003354:	3710      	adds	r7, #16
 8003356:	46bd      	mov	sp, r7
 8003358:	bd80      	pop	{r7, pc}

0800335a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800335a:	b580      	push	{r7, lr}
 800335c:	b084      	sub	sp, #16
 800335e:	af00      	add	r7, sp, #0
 8003360:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003362:	2300      	movs	r3, #0
 8003364:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800336a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800336c:	68bb      	ldr	r3, [r7, #8]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	695b      	ldr	r3, [r3, #20]
 8003372:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003376:	2b00      	cmp	r3, #0
 8003378:	bf14      	ite	ne
 800337a:	2301      	movne	r3, #1
 800337c:	2300      	moveq	r3, #0
 800337e:	b2db      	uxtb	r3, r3
 8003380:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003382:	68bb      	ldr	r3, [r7, #8]
 8003384:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003388:	b2db      	uxtb	r3, r3
 800338a:	2b21      	cmp	r3, #33	@ 0x21
 800338c:	d108      	bne.n	80033a0 <UART_DMAError+0x46>
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d005      	beq.n	80033a0 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	2200      	movs	r2, #0
 8003398:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 800339a:	68b8      	ldr	r0, [r7, #8]
 800339c:	f000 f91a 	bl	80035d4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80033a0:	68bb      	ldr	r3, [r7, #8]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	695b      	ldr	r3, [r3, #20]
 80033a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	bf14      	ite	ne
 80033ae:	2301      	movne	r3, #1
 80033b0:	2300      	moveq	r3, #0
 80033b2:	b2db      	uxtb	r3, r3
 80033b4:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80033b6:	68bb      	ldr	r3, [r7, #8]
 80033b8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80033bc:	b2db      	uxtb	r3, r3
 80033be:	2b22      	cmp	r3, #34	@ 0x22
 80033c0:	d108      	bne.n	80033d4 <UART_DMAError+0x7a>
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d005      	beq.n	80033d4 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	2200      	movs	r2, #0
 80033cc:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 80033ce:	68b8      	ldr	r0, [r7, #8]
 80033d0:	f000 f927 	bl	8003622 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80033d4:	68bb      	ldr	r3, [r7, #8]
 80033d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033d8:	f043 0210 	orr.w	r2, r3, #16
 80033dc:	68bb      	ldr	r3, [r7, #8]
 80033de:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80033e0:	68b8      	ldr	r0, [r7, #8]
 80033e2:	f7ff fef2 	bl	80031ca <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80033e6:	bf00      	nop
 80033e8:	3710      	adds	r7, #16
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}

080033ee <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80033ee:	b580      	push	{r7, lr}
 80033f0:	b086      	sub	sp, #24
 80033f2:	af00      	add	r7, sp, #0
 80033f4:	60f8      	str	r0, [r7, #12]
 80033f6:	60b9      	str	r1, [r7, #8]
 80033f8:	603b      	str	r3, [r7, #0]
 80033fa:	4613      	mov	r3, r2
 80033fc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033fe:	e03b      	b.n	8003478 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003400:	6a3b      	ldr	r3, [r7, #32]
 8003402:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003406:	d037      	beq.n	8003478 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003408:	f7fd fcf6 	bl	8000df8 <HAL_GetTick>
 800340c:	4602      	mov	r2, r0
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	1ad3      	subs	r3, r2, r3
 8003412:	6a3a      	ldr	r2, [r7, #32]
 8003414:	429a      	cmp	r2, r3
 8003416:	d302      	bcc.n	800341e <UART_WaitOnFlagUntilTimeout+0x30>
 8003418:	6a3b      	ldr	r3, [r7, #32]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d101      	bne.n	8003422 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800341e:	2303      	movs	r3, #3
 8003420:	e03a      	b.n	8003498 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	68db      	ldr	r3, [r3, #12]
 8003428:	f003 0304 	and.w	r3, r3, #4
 800342c:	2b00      	cmp	r3, #0
 800342e:	d023      	beq.n	8003478 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	2b80      	cmp	r3, #128	@ 0x80
 8003434:	d020      	beq.n	8003478 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003436:	68bb      	ldr	r3, [r7, #8]
 8003438:	2b40      	cmp	r3, #64	@ 0x40
 800343a:	d01d      	beq.n	8003478 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f003 0308 	and.w	r3, r3, #8
 8003446:	2b08      	cmp	r3, #8
 8003448:	d116      	bne.n	8003478 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800344a:	2300      	movs	r3, #0
 800344c:	617b      	str	r3, [r7, #20]
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	617b      	str	r3, [r7, #20]
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	617b      	str	r3, [r7, #20]
 800345e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003460:	68f8      	ldr	r0, [r7, #12]
 8003462:	f000 f8de 	bl	8003622 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	2208      	movs	r2, #8
 800346a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	2200      	movs	r2, #0
 8003470:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003474:	2301      	movs	r3, #1
 8003476:	e00f      	b.n	8003498 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	681a      	ldr	r2, [r3, #0]
 800347e:	68bb      	ldr	r3, [r7, #8]
 8003480:	4013      	ands	r3, r2
 8003482:	68ba      	ldr	r2, [r7, #8]
 8003484:	429a      	cmp	r2, r3
 8003486:	bf0c      	ite	eq
 8003488:	2301      	moveq	r3, #1
 800348a:	2300      	movne	r3, #0
 800348c:	b2db      	uxtb	r3, r3
 800348e:	461a      	mov	r2, r3
 8003490:	79fb      	ldrb	r3, [r7, #7]
 8003492:	429a      	cmp	r2, r3
 8003494:	d0b4      	beq.n	8003400 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003496:	2300      	movs	r3, #0
}
 8003498:	4618      	mov	r0, r3
 800349a:	3718      	adds	r7, #24
 800349c:	46bd      	mov	sp, r7
 800349e:	bd80      	pop	{r7, pc}

080034a0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b098      	sub	sp, #96	@ 0x60
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	60f8      	str	r0, [r7, #12]
 80034a8:	60b9      	str	r1, [r7, #8]
 80034aa:	4613      	mov	r3, r2
 80034ac:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80034ae:	68ba      	ldr	r2, [r7, #8]
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	88fa      	ldrh	r2, [r7, #6]
 80034b8:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	2200      	movs	r2, #0
 80034be:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	2222      	movs	r2, #34	@ 0x22
 80034c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034cc:	4a3e      	ldr	r2, [pc, #248]	@ (80035c8 <UART_Start_Receive_DMA+0x128>)
 80034ce:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034d4:	4a3d      	ldr	r2, [pc, #244]	@ (80035cc <UART_Start_Receive_DMA+0x12c>)
 80034d6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034dc:	4a3c      	ldr	r2, [pc, #240]	@ (80035d0 <UART_Start_Receive_DMA+0x130>)
 80034de:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034e4:	2200      	movs	r2, #0
 80034e6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80034e8:	f107 0308 	add.w	r3, r7, #8
 80034ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	3304      	adds	r3, #4
 80034f8:	4619      	mov	r1, r3
 80034fa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80034fc:	681a      	ldr	r2, [r3, #0]
 80034fe:	88fb      	ldrh	r3, [r7, #6]
 8003500:	f7fd fe10 	bl	8001124 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8003504:	2300      	movs	r3, #0
 8003506:	613b      	str	r3, [r7, #16]
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	613b      	str	r3, [r7, #16]
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	613b      	str	r3, [r7, #16]
 8003518:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	691b      	ldr	r3, [r3, #16]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d019      	beq.n	8003556 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	330c      	adds	r3, #12
 8003528:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800352a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800352c:	e853 3f00 	ldrex	r3, [r3]
 8003530:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003532:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003534:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003538:	65bb      	str	r3, [r7, #88]	@ 0x58
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	330c      	adds	r3, #12
 8003540:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003542:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8003544:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003546:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8003548:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800354a:	e841 2300 	strex	r3, r2, [r1]
 800354e:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8003550:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003552:	2b00      	cmp	r3, #0
 8003554:	d1e5      	bne.n	8003522 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	3314      	adds	r3, #20
 800355c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800355e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003560:	e853 3f00 	ldrex	r3, [r3]
 8003564:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003566:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003568:	f043 0301 	orr.w	r3, r3, #1
 800356c:	657b      	str	r3, [r7, #84]	@ 0x54
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	3314      	adds	r3, #20
 8003574:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003576:	63ba      	str	r2, [r7, #56]	@ 0x38
 8003578:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800357a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800357c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800357e:	e841 2300 	strex	r3, r2, [r1]
 8003582:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003584:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003586:	2b00      	cmp	r3, #0
 8003588:	d1e5      	bne.n	8003556 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	3314      	adds	r3, #20
 8003590:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003592:	69bb      	ldr	r3, [r7, #24]
 8003594:	e853 3f00 	ldrex	r3, [r3]
 8003598:	617b      	str	r3, [r7, #20]
   return(result);
 800359a:	697b      	ldr	r3, [r7, #20]
 800359c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80035a0:	653b      	str	r3, [r7, #80]	@ 0x50
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	3314      	adds	r3, #20
 80035a8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80035aa:	627a      	str	r2, [r7, #36]	@ 0x24
 80035ac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035ae:	6a39      	ldr	r1, [r7, #32]
 80035b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035b2:	e841 2300 	strex	r3, r2, [r1]
 80035b6:	61fb      	str	r3, [r7, #28]
   return(result);
 80035b8:	69fb      	ldr	r3, [r7, #28]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d1e5      	bne.n	800358a <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 80035be:	2300      	movs	r3, #0
}
 80035c0:	4618      	mov	r0, r3
 80035c2:	3760      	adds	r7, #96	@ 0x60
 80035c4:	46bd      	mov	sp, r7
 80035c6:	bd80      	pop	{r7, pc}
 80035c8:	080031f3 	.word	0x080031f3
 80035cc:	0800331f 	.word	0x0800331f
 80035d0:	0800335b 	.word	0x0800335b

080035d4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80035d4:	b480      	push	{r7}
 80035d6:	b089      	sub	sp, #36	@ 0x24
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	330c      	adds	r3, #12
 80035e2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	e853 3f00 	ldrex	r3, [r3]
 80035ea:	60bb      	str	r3, [r7, #8]
   return(result);
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80035f2:	61fb      	str	r3, [r7, #28]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	330c      	adds	r3, #12
 80035fa:	69fa      	ldr	r2, [r7, #28]
 80035fc:	61ba      	str	r2, [r7, #24]
 80035fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003600:	6979      	ldr	r1, [r7, #20]
 8003602:	69ba      	ldr	r2, [r7, #24]
 8003604:	e841 2300 	strex	r3, r2, [r1]
 8003608:	613b      	str	r3, [r7, #16]
   return(result);
 800360a:	693b      	ldr	r3, [r7, #16]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d1e5      	bne.n	80035dc <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2220      	movs	r2, #32
 8003614:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8003618:	bf00      	nop
 800361a:	3724      	adds	r7, #36	@ 0x24
 800361c:	46bd      	mov	sp, r7
 800361e:	bc80      	pop	{r7}
 8003620:	4770      	bx	lr

08003622 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003622:	b480      	push	{r7}
 8003624:	b095      	sub	sp, #84	@ 0x54
 8003626:	af00      	add	r7, sp, #0
 8003628:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	330c      	adds	r3, #12
 8003630:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003632:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003634:	e853 3f00 	ldrex	r3, [r3]
 8003638:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800363a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800363c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003640:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	330c      	adds	r3, #12
 8003648:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800364a:	643a      	str	r2, [r7, #64]	@ 0x40
 800364c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800364e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003650:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003652:	e841 2300 	strex	r3, r2, [r1]
 8003656:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003658:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800365a:	2b00      	cmp	r3, #0
 800365c:	d1e5      	bne.n	800362a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	3314      	adds	r3, #20
 8003664:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003666:	6a3b      	ldr	r3, [r7, #32]
 8003668:	e853 3f00 	ldrex	r3, [r3]
 800366c:	61fb      	str	r3, [r7, #28]
   return(result);
 800366e:	69fb      	ldr	r3, [r7, #28]
 8003670:	f023 0301 	bic.w	r3, r3, #1
 8003674:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	3314      	adds	r3, #20
 800367c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800367e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003680:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003682:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003684:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003686:	e841 2300 	strex	r3, r2, [r1]
 800368a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800368c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800368e:	2b00      	cmp	r3, #0
 8003690:	d1e5      	bne.n	800365e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003696:	2b01      	cmp	r3, #1
 8003698:	d119      	bne.n	80036ce <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	330c      	adds	r3, #12
 80036a0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	e853 3f00 	ldrex	r3, [r3]
 80036a8:	60bb      	str	r3, [r7, #8]
   return(result);
 80036aa:	68bb      	ldr	r3, [r7, #8]
 80036ac:	f023 0310 	bic.w	r3, r3, #16
 80036b0:	647b      	str	r3, [r7, #68]	@ 0x44
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	330c      	adds	r3, #12
 80036b8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80036ba:	61ba      	str	r2, [r7, #24]
 80036bc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036be:	6979      	ldr	r1, [r7, #20]
 80036c0:	69ba      	ldr	r2, [r7, #24]
 80036c2:	e841 2300 	strex	r3, r2, [r1]
 80036c6:	613b      	str	r3, [r7, #16]
   return(result);
 80036c8:	693b      	ldr	r3, [r7, #16]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d1e5      	bne.n	800369a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2220      	movs	r2, #32
 80036d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2200      	movs	r2, #0
 80036da:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80036dc:	bf00      	nop
 80036de:	3754      	adds	r7, #84	@ 0x54
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bc80      	pop	{r7}
 80036e4:	4770      	bx	lr

080036e6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80036e6:	b580      	push	{r7, lr}
 80036e8:	b084      	sub	sp, #16
 80036ea:	af00      	add	r7, sp, #0
 80036ec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036f2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	2200      	movs	r2, #0
 80036f8:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	2200      	movs	r2, #0
 80036fe:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003700:	68f8      	ldr	r0, [r7, #12]
 8003702:	f7ff fd62 	bl	80031ca <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003706:	bf00      	nop
 8003708:	3710      	adds	r7, #16
 800370a:	46bd      	mov	sp, r7
 800370c:	bd80      	pop	{r7, pc}

0800370e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800370e:	b480      	push	{r7}
 8003710:	b085      	sub	sp, #20
 8003712:	af00      	add	r7, sp, #0
 8003714:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800371c:	b2db      	uxtb	r3, r3
 800371e:	2b21      	cmp	r3, #33	@ 0x21
 8003720:	d13e      	bne.n	80037a0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	689b      	ldr	r3, [r3, #8]
 8003726:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800372a:	d114      	bne.n	8003756 <UART_Transmit_IT+0x48>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	691b      	ldr	r3, [r3, #16]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d110      	bne.n	8003756 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6a1b      	ldr	r3, [r3, #32]
 8003738:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	881b      	ldrh	r3, [r3, #0]
 800373e:	461a      	mov	r2, r3
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003748:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6a1b      	ldr	r3, [r3, #32]
 800374e:	1c9a      	adds	r2, r3, #2
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	621a      	str	r2, [r3, #32]
 8003754:	e008      	b.n	8003768 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6a1b      	ldr	r3, [r3, #32]
 800375a:	1c59      	adds	r1, r3, #1
 800375c:	687a      	ldr	r2, [r7, #4]
 800375e:	6211      	str	r1, [r2, #32]
 8003760:	781a      	ldrb	r2, [r3, #0]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800376c:	b29b      	uxth	r3, r3
 800376e:	3b01      	subs	r3, #1
 8003770:	b29b      	uxth	r3, r3
 8003772:	687a      	ldr	r2, [r7, #4]
 8003774:	4619      	mov	r1, r3
 8003776:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003778:	2b00      	cmp	r3, #0
 800377a:	d10f      	bne.n	800379c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	68da      	ldr	r2, [r3, #12]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800378a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	68da      	ldr	r2, [r3, #12]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800379a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800379c:	2300      	movs	r3, #0
 800379e:	e000      	b.n	80037a2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80037a0:	2302      	movs	r3, #2
  }
}
 80037a2:	4618      	mov	r0, r3
 80037a4:	3714      	adds	r7, #20
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bc80      	pop	{r7}
 80037aa:	4770      	bx	lr

080037ac <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b082      	sub	sp, #8
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	68da      	ldr	r2, [r3, #12]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80037c2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2220      	movs	r2, #32
 80037c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80037cc:	6878      	ldr	r0, [r7, #4]
 80037ce:	f7ff fcf3 	bl	80031b8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80037d2:	2300      	movs	r3, #0
}
 80037d4:	4618      	mov	r0, r3
 80037d6:	3708      	adds	r7, #8
 80037d8:	46bd      	mov	sp, r7
 80037da:	bd80      	pop	{r7, pc}

080037dc <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b08c      	sub	sp, #48	@ 0x30
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80037ea:	b2db      	uxtb	r3, r3
 80037ec:	2b22      	cmp	r3, #34	@ 0x22
 80037ee:	f040 80ae 	bne.w	800394e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	689b      	ldr	r3, [r3, #8]
 80037f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80037fa:	d117      	bne.n	800382c <UART_Receive_IT+0x50>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	691b      	ldr	r3, [r3, #16]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d113      	bne.n	800382c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003804:	2300      	movs	r3, #0
 8003806:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800380c:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	b29b      	uxth	r3, r3
 8003816:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800381a:	b29a      	uxth	r2, r3
 800381c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800381e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003824:	1c9a      	adds	r2, r3, #2
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	629a      	str	r2, [r3, #40]	@ 0x28
 800382a:	e026      	b.n	800387a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003830:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8003832:	2300      	movs	r3, #0
 8003834:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	689b      	ldr	r3, [r3, #8]
 800383a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800383e:	d007      	beq.n	8003850 <UART_Receive_IT+0x74>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	689b      	ldr	r3, [r3, #8]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d10a      	bne.n	800385e <UART_Receive_IT+0x82>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	691b      	ldr	r3, [r3, #16]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d106      	bne.n	800385e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	b2da      	uxtb	r2, r3
 8003858:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800385a:	701a      	strb	r2, [r3, #0]
 800385c:	e008      	b.n	8003870 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	b2db      	uxtb	r3, r3
 8003866:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800386a:	b2da      	uxtb	r2, r3
 800386c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800386e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003874:	1c5a      	adds	r2, r3, #1
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800387e:	b29b      	uxth	r3, r3
 8003880:	3b01      	subs	r3, #1
 8003882:	b29b      	uxth	r3, r3
 8003884:	687a      	ldr	r2, [r7, #4]
 8003886:	4619      	mov	r1, r3
 8003888:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800388a:	2b00      	cmp	r3, #0
 800388c:	d15d      	bne.n	800394a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	68da      	ldr	r2, [r3, #12]
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f022 0220 	bic.w	r2, r2, #32
 800389c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	68da      	ldr	r2, [r3, #12]
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80038ac:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	695a      	ldr	r2, [r3, #20]
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f022 0201 	bic.w	r2, r2, #1
 80038bc:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2220      	movs	r2, #32
 80038c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2200      	movs	r2, #0
 80038ca:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038d0:	2b01      	cmp	r3, #1
 80038d2:	d135      	bne.n	8003940 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2200      	movs	r2, #0
 80038d8:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	330c      	adds	r3, #12
 80038e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038e2:	697b      	ldr	r3, [r7, #20]
 80038e4:	e853 3f00 	ldrex	r3, [r3]
 80038e8:	613b      	str	r3, [r7, #16]
   return(result);
 80038ea:	693b      	ldr	r3, [r7, #16]
 80038ec:	f023 0310 	bic.w	r3, r3, #16
 80038f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	330c      	adds	r3, #12
 80038f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80038fa:	623a      	str	r2, [r7, #32]
 80038fc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038fe:	69f9      	ldr	r1, [r7, #28]
 8003900:	6a3a      	ldr	r2, [r7, #32]
 8003902:	e841 2300 	strex	r3, r2, [r1]
 8003906:	61bb      	str	r3, [r7, #24]
   return(result);
 8003908:	69bb      	ldr	r3, [r7, #24]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d1e5      	bne.n	80038da <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f003 0310 	and.w	r3, r3, #16
 8003918:	2b10      	cmp	r3, #16
 800391a:	d10a      	bne.n	8003932 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800391c:	2300      	movs	r3, #0
 800391e:	60fb      	str	r3, [r7, #12]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	60fb      	str	r3, [r7, #12]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	60fb      	str	r3, [r7, #12]
 8003930:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003936:	4619      	mov	r1, r3
 8003938:	6878      	ldr	r0, [r7, #4]
 800393a:	f7ff fc4f 	bl	80031dc <HAL_UARTEx_RxEventCallback>
 800393e:	e002      	b.n	8003946 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003940:	6878      	ldr	r0, [r7, #4]
 8003942:	f7fc ffbf 	bl	80008c4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003946:	2300      	movs	r3, #0
 8003948:	e002      	b.n	8003950 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800394a:	2300      	movs	r3, #0
 800394c:	e000      	b.n	8003950 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800394e:	2302      	movs	r3, #2
  }
}
 8003950:	4618      	mov	r0, r3
 8003952:	3730      	adds	r7, #48	@ 0x30
 8003954:	46bd      	mov	sp, r7
 8003956:	bd80      	pop	{r7, pc}

08003958 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b084      	sub	sp, #16
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	691b      	ldr	r3, [r3, #16]
 8003966:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	68da      	ldr	r2, [r3, #12]
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	430a      	orrs	r2, r1
 8003974:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	689a      	ldr	r2, [r3, #8]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	691b      	ldr	r3, [r3, #16]
 800397e:	431a      	orrs	r2, r3
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	695b      	ldr	r3, [r3, #20]
 8003984:	4313      	orrs	r3, r2
 8003986:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	68db      	ldr	r3, [r3, #12]
 800398e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8003992:	f023 030c 	bic.w	r3, r3, #12
 8003996:	687a      	ldr	r2, [r7, #4]
 8003998:	6812      	ldr	r2, [r2, #0]
 800399a:	68b9      	ldr	r1, [r7, #8]
 800399c:	430b      	orrs	r3, r1
 800399e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	695b      	ldr	r3, [r3, #20]
 80039a6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	699a      	ldr	r2, [r3, #24]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	430a      	orrs	r2, r1
 80039b4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4a2c      	ldr	r2, [pc, #176]	@ (8003a6c <UART_SetConfig+0x114>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d103      	bne.n	80039c8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80039c0:	f7ff f836 	bl	8002a30 <HAL_RCC_GetPCLK2Freq>
 80039c4:	60f8      	str	r0, [r7, #12]
 80039c6:	e002      	b.n	80039ce <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80039c8:	f7ff f81e 	bl	8002a08 <HAL_RCC_GetPCLK1Freq>
 80039cc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80039ce:	68fa      	ldr	r2, [r7, #12]
 80039d0:	4613      	mov	r3, r2
 80039d2:	009b      	lsls	r3, r3, #2
 80039d4:	4413      	add	r3, r2
 80039d6:	009a      	lsls	r2, r3, #2
 80039d8:	441a      	add	r2, r3
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	009b      	lsls	r3, r3, #2
 80039e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80039e4:	4a22      	ldr	r2, [pc, #136]	@ (8003a70 <UART_SetConfig+0x118>)
 80039e6:	fba2 2303 	umull	r2, r3, r2, r3
 80039ea:	095b      	lsrs	r3, r3, #5
 80039ec:	0119      	lsls	r1, r3, #4
 80039ee:	68fa      	ldr	r2, [r7, #12]
 80039f0:	4613      	mov	r3, r2
 80039f2:	009b      	lsls	r3, r3, #2
 80039f4:	4413      	add	r3, r2
 80039f6:	009a      	lsls	r2, r3, #2
 80039f8:	441a      	add	r2, r3
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	009b      	lsls	r3, r3, #2
 8003a00:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a04:	4b1a      	ldr	r3, [pc, #104]	@ (8003a70 <UART_SetConfig+0x118>)
 8003a06:	fba3 0302 	umull	r0, r3, r3, r2
 8003a0a:	095b      	lsrs	r3, r3, #5
 8003a0c:	2064      	movs	r0, #100	@ 0x64
 8003a0e:	fb00 f303 	mul.w	r3, r0, r3
 8003a12:	1ad3      	subs	r3, r2, r3
 8003a14:	011b      	lsls	r3, r3, #4
 8003a16:	3332      	adds	r3, #50	@ 0x32
 8003a18:	4a15      	ldr	r2, [pc, #84]	@ (8003a70 <UART_SetConfig+0x118>)
 8003a1a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a1e:	095b      	lsrs	r3, r3, #5
 8003a20:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003a24:	4419      	add	r1, r3
 8003a26:	68fa      	ldr	r2, [r7, #12]
 8003a28:	4613      	mov	r3, r2
 8003a2a:	009b      	lsls	r3, r3, #2
 8003a2c:	4413      	add	r3, r2
 8003a2e:	009a      	lsls	r2, r3, #2
 8003a30:	441a      	add	r2, r3
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	009b      	lsls	r3, r3, #2
 8003a38:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a3c:	4b0c      	ldr	r3, [pc, #48]	@ (8003a70 <UART_SetConfig+0x118>)
 8003a3e:	fba3 0302 	umull	r0, r3, r3, r2
 8003a42:	095b      	lsrs	r3, r3, #5
 8003a44:	2064      	movs	r0, #100	@ 0x64
 8003a46:	fb00 f303 	mul.w	r3, r0, r3
 8003a4a:	1ad3      	subs	r3, r2, r3
 8003a4c:	011b      	lsls	r3, r3, #4
 8003a4e:	3332      	adds	r3, #50	@ 0x32
 8003a50:	4a07      	ldr	r2, [pc, #28]	@ (8003a70 <UART_SetConfig+0x118>)
 8003a52:	fba2 2303 	umull	r2, r3, r2, r3
 8003a56:	095b      	lsrs	r3, r3, #5
 8003a58:	f003 020f 	and.w	r2, r3, #15
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	440a      	add	r2, r1
 8003a62:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003a64:	bf00      	nop
 8003a66:	3710      	adds	r7, #16
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	bd80      	pop	{r7, pc}
 8003a6c:	40013800 	.word	0x40013800
 8003a70:	51eb851f 	.word	0x51eb851f

08003a74 <std>:
 8003a74:	2300      	movs	r3, #0
 8003a76:	b510      	push	{r4, lr}
 8003a78:	4604      	mov	r4, r0
 8003a7a:	e9c0 3300 	strd	r3, r3, [r0]
 8003a7e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003a82:	6083      	str	r3, [r0, #8]
 8003a84:	8181      	strh	r1, [r0, #12]
 8003a86:	6643      	str	r3, [r0, #100]	@ 0x64
 8003a88:	81c2      	strh	r2, [r0, #14]
 8003a8a:	6183      	str	r3, [r0, #24]
 8003a8c:	4619      	mov	r1, r3
 8003a8e:	2208      	movs	r2, #8
 8003a90:	305c      	adds	r0, #92	@ 0x5c
 8003a92:	f000 fa01 	bl	8003e98 <memset>
 8003a96:	4b0d      	ldr	r3, [pc, #52]	@ (8003acc <std+0x58>)
 8003a98:	6224      	str	r4, [r4, #32]
 8003a9a:	6263      	str	r3, [r4, #36]	@ 0x24
 8003a9c:	4b0c      	ldr	r3, [pc, #48]	@ (8003ad0 <std+0x5c>)
 8003a9e:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003aa0:	4b0c      	ldr	r3, [pc, #48]	@ (8003ad4 <std+0x60>)
 8003aa2:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003aa4:	4b0c      	ldr	r3, [pc, #48]	@ (8003ad8 <std+0x64>)
 8003aa6:	6323      	str	r3, [r4, #48]	@ 0x30
 8003aa8:	4b0c      	ldr	r3, [pc, #48]	@ (8003adc <std+0x68>)
 8003aaa:	429c      	cmp	r4, r3
 8003aac:	d006      	beq.n	8003abc <std+0x48>
 8003aae:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003ab2:	4294      	cmp	r4, r2
 8003ab4:	d002      	beq.n	8003abc <std+0x48>
 8003ab6:	33d0      	adds	r3, #208	@ 0xd0
 8003ab8:	429c      	cmp	r4, r3
 8003aba:	d105      	bne.n	8003ac8 <std+0x54>
 8003abc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003ac0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003ac4:	f000 ba60 	b.w	8003f88 <__retarget_lock_init_recursive>
 8003ac8:	bd10      	pop	{r4, pc}
 8003aca:	bf00      	nop
 8003acc:	08003ce9 	.word	0x08003ce9
 8003ad0:	08003d0b 	.word	0x08003d0b
 8003ad4:	08003d43 	.word	0x08003d43
 8003ad8:	08003d67 	.word	0x08003d67
 8003adc:	200002b4 	.word	0x200002b4

08003ae0 <stdio_exit_handler>:
 8003ae0:	4a02      	ldr	r2, [pc, #8]	@ (8003aec <stdio_exit_handler+0xc>)
 8003ae2:	4903      	ldr	r1, [pc, #12]	@ (8003af0 <stdio_exit_handler+0x10>)
 8003ae4:	4803      	ldr	r0, [pc, #12]	@ (8003af4 <stdio_exit_handler+0x14>)
 8003ae6:	f000 b869 	b.w	8003bbc <_fwalk_sglue>
 8003aea:	bf00      	nop
 8003aec:	2000004c 	.word	0x2000004c
 8003af0:	08004821 	.word	0x08004821
 8003af4:	2000005c 	.word	0x2000005c

08003af8 <cleanup_stdio>:
 8003af8:	6841      	ldr	r1, [r0, #4]
 8003afa:	4b0c      	ldr	r3, [pc, #48]	@ (8003b2c <cleanup_stdio+0x34>)
 8003afc:	b510      	push	{r4, lr}
 8003afe:	4299      	cmp	r1, r3
 8003b00:	4604      	mov	r4, r0
 8003b02:	d001      	beq.n	8003b08 <cleanup_stdio+0x10>
 8003b04:	f000 fe8c 	bl	8004820 <_fflush_r>
 8003b08:	68a1      	ldr	r1, [r4, #8]
 8003b0a:	4b09      	ldr	r3, [pc, #36]	@ (8003b30 <cleanup_stdio+0x38>)
 8003b0c:	4299      	cmp	r1, r3
 8003b0e:	d002      	beq.n	8003b16 <cleanup_stdio+0x1e>
 8003b10:	4620      	mov	r0, r4
 8003b12:	f000 fe85 	bl	8004820 <_fflush_r>
 8003b16:	68e1      	ldr	r1, [r4, #12]
 8003b18:	4b06      	ldr	r3, [pc, #24]	@ (8003b34 <cleanup_stdio+0x3c>)
 8003b1a:	4299      	cmp	r1, r3
 8003b1c:	d004      	beq.n	8003b28 <cleanup_stdio+0x30>
 8003b1e:	4620      	mov	r0, r4
 8003b20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003b24:	f000 be7c 	b.w	8004820 <_fflush_r>
 8003b28:	bd10      	pop	{r4, pc}
 8003b2a:	bf00      	nop
 8003b2c:	200002b4 	.word	0x200002b4
 8003b30:	2000031c 	.word	0x2000031c
 8003b34:	20000384 	.word	0x20000384

08003b38 <global_stdio_init.part.0>:
 8003b38:	b510      	push	{r4, lr}
 8003b3a:	4b0b      	ldr	r3, [pc, #44]	@ (8003b68 <global_stdio_init.part.0+0x30>)
 8003b3c:	4c0b      	ldr	r4, [pc, #44]	@ (8003b6c <global_stdio_init.part.0+0x34>)
 8003b3e:	4a0c      	ldr	r2, [pc, #48]	@ (8003b70 <global_stdio_init.part.0+0x38>)
 8003b40:	4620      	mov	r0, r4
 8003b42:	601a      	str	r2, [r3, #0]
 8003b44:	2104      	movs	r1, #4
 8003b46:	2200      	movs	r2, #0
 8003b48:	f7ff ff94 	bl	8003a74 <std>
 8003b4c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003b50:	2201      	movs	r2, #1
 8003b52:	2109      	movs	r1, #9
 8003b54:	f7ff ff8e 	bl	8003a74 <std>
 8003b58:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003b5c:	2202      	movs	r2, #2
 8003b5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003b62:	2112      	movs	r1, #18
 8003b64:	f7ff bf86 	b.w	8003a74 <std>
 8003b68:	200003ec 	.word	0x200003ec
 8003b6c:	200002b4 	.word	0x200002b4
 8003b70:	08003ae1 	.word	0x08003ae1

08003b74 <__sfp_lock_acquire>:
 8003b74:	4801      	ldr	r0, [pc, #4]	@ (8003b7c <__sfp_lock_acquire+0x8>)
 8003b76:	f000 ba08 	b.w	8003f8a <__retarget_lock_acquire_recursive>
 8003b7a:	bf00      	nop
 8003b7c:	200003f5 	.word	0x200003f5

08003b80 <__sfp_lock_release>:
 8003b80:	4801      	ldr	r0, [pc, #4]	@ (8003b88 <__sfp_lock_release+0x8>)
 8003b82:	f000 ba03 	b.w	8003f8c <__retarget_lock_release_recursive>
 8003b86:	bf00      	nop
 8003b88:	200003f5 	.word	0x200003f5

08003b8c <__sinit>:
 8003b8c:	b510      	push	{r4, lr}
 8003b8e:	4604      	mov	r4, r0
 8003b90:	f7ff fff0 	bl	8003b74 <__sfp_lock_acquire>
 8003b94:	6a23      	ldr	r3, [r4, #32]
 8003b96:	b11b      	cbz	r3, 8003ba0 <__sinit+0x14>
 8003b98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003b9c:	f7ff bff0 	b.w	8003b80 <__sfp_lock_release>
 8003ba0:	4b04      	ldr	r3, [pc, #16]	@ (8003bb4 <__sinit+0x28>)
 8003ba2:	6223      	str	r3, [r4, #32]
 8003ba4:	4b04      	ldr	r3, [pc, #16]	@ (8003bb8 <__sinit+0x2c>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d1f5      	bne.n	8003b98 <__sinit+0xc>
 8003bac:	f7ff ffc4 	bl	8003b38 <global_stdio_init.part.0>
 8003bb0:	e7f2      	b.n	8003b98 <__sinit+0xc>
 8003bb2:	bf00      	nop
 8003bb4:	08003af9 	.word	0x08003af9
 8003bb8:	200003ec 	.word	0x200003ec

08003bbc <_fwalk_sglue>:
 8003bbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003bc0:	4607      	mov	r7, r0
 8003bc2:	4688      	mov	r8, r1
 8003bc4:	4614      	mov	r4, r2
 8003bc6:	2600      	movs	r6, #0
 8003bc8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003bcc:	f1b9 0901 	subs.w	r9, r9, #1
 8003bd0:	d505      	bpl.n	8003bde <_fwalk_sglue+0x22>
 8003bd2:	6824      	ldr	r4, [r4, #0]
 8003bd4:	2c00      	cmp	r4, #0
 8003bd6:	d1f7      	bne.n	8003bc8 <_fwalk_sglue+0xc>
 8003bd8:	4630      	mov	r0, r6
 8003bda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003bde:	89ab      	ldrh	r3, [r5, #12]
 8003be0:	2b01      	cmp	r3, #1
 8003be2:	d907      	bls.n	8003bf4 <_fwalk_sglue+0x38>
 8003be4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003be8:	3301      	adds	r3, #1
 8003bea:	d003      	beq.n	8003bf4 <_fwalk_sglue+0x38>
 8003bec:	4629      	mov	r1, r5
 8003bee:	4638      	mov	r0, r7
 8003bf0:	47c0      	blx	r8
 8003bf2:	4306      	orrs	r6, r0
 8003bf4:	3568      	adds	r5, #104	@ 0x68
 8003bf6:	e7e9      	b.n	8003bcc <_fwalk_sglue+0x10>

08003bf8 <iprintf>:
 8003bf8:	b40f      	push	{r0, r1, r2, r3}
 8003bfa:	b507      	push	{r0, r1, r2, lr}
 8003bfc:	4906      	ldr	r1, [pc, #24]	@ (8003c18 <iprintf+0x20>)
 8003bfe:	ab04      	add	r3, sp, #16
 8003c00:	6808      	ldr	r0, [r1, #0]
 8003c02:	f853 2b04 	ldr.w	r2, [r3], #4
 8003c06:	6881      	ldr	r1, [r0, #8]
 8003c08:	9301      	str	r3, [sp, #4]
 8003c0a:	f000 fadf 	bl	80041cc <_vfiprintf_r>
 8003c0e:	b003      	add	sp, #12
 8003c10:	f85d eb04 	ldr.w	lr, [sp], #4
 8003c14:	b004      	add	sp, #16
 8003c16:	4770      	bx	lr
 8003c18:	20000058 	.word	0x20000058

08003c1c <putchar>:
 8003c1c:	4b02      	ldr	r3, [pc, #8]	@ (8003c28 <putchar+0xc>)
 8003c1e:	4601      	mov	r1, r0
 8003c20:	6818      	ldr	r0, [r3, #0]
 8003c22:	6882      	ldr	r2, [r0, #8]
 8003c24:	f000 be85 	b.w	8004932 <_putc_r>
 8003c28:	20000058 	.word	0x20000058

08003c2c <_puts_r>:
 8003c2c:	6a03      	ldr	r3, [r0, #32]
 8003c2e:	b570      	push	{r4, r5, r6, lr}
 8003c30:	4605      	mov	r5, r0
 8003c32:	460e      	mov	r6, r1
 8003c34:	6884      	ldr	r4, [r0, #8]
 8003c36:	b90b      	cbnz	r3, 8003c3c <_puts_r+0x10>
 8003c38:	f7ff ffa8 	bl	8003b8c <__sinit>
 8003c3c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003c3e:	07db      	lsls	r3, r3, #31
 8003c40:	d405      	bmi.n	8003c4e <_puts_r+0x22>
 8003c42:	89a3      	ldrh	r3, [r4, #12]
 8003c44:	0598      	lsls	r0, r3, #22
 8003c46:	d402      	bmi.n	8003c4e <_puts_r+0x22>
 8003c48:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003c4a:	f000 f99e 	bl	8003f8a <__retarget_lock_acquire_recursive>
 8003c4e:	89a3      	ldrh	r3, [r4, #12]
 8003c50:	0719      	lsls	r1, r3, #28
 8003c52:	d502      	bpl.n	8003c5a <_puts_r+0x2e>
 8003c54:	6923      	ldr	r3, [r4, #16]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d135      	bne.n	8003cc6 <_puts_r+0x9a>
 8003c5a:	4621      	mov	r1, r4
 8003c5c:	4628      	mov	r0, r5
 8003c5e:	f000 f8c5 	bl	8003dec <__swsetup_r>
 8003c62:	b380      	cbz	r0, 8003cc6 <_puts_r+0x9a>
 8003c64:	f04f 35ff 	mov.w	r5, #4294967295
 8003c68:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003c6a:	07da      	lsls	r2, r3, #31
 8003c6c:	d405      	bmi.n	8003c7a <_puts_r+0x4e>
 8003c6e:	89a3      	ldrh	r3, [r4, #12]
 8003c70:	059b      	lsls	r3, r3, #22
 8003c72:	d402      	bmi.n	8003c7a <_puts_r+0x4e>
 8003c74:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003c76:	f000 f989 	bl	8003f8c <__retarget_lock_release_recursive>
 8003c7a:	4628      	mov	r0, r5
 8003c7c:	bd70      	pop	{r4, r5, r6, pc}
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	da04      	bge.n	8003c8c <_puts_r+0x60>
 8003c82:	69a2      	ldr	r2, [r4, #24]
 8003c84:	429a      	cmp	r2, r3
 8003c86:	dc17      	bgt.n	8003cb8 <_puts_r+0x8c>
 8003c88:	290a      	cmp	r1, #10
 8003c8a:	d015      	beq.n	8003cb8 <_puts_r+0x8c>
 8003c8c:	6823      	ldr	r3, [r4, #0]
 8003c8e:	1c5a      	adds	r2, r3, #1
 8003c90:	6022      	str	r2, [r4, #0]
 8003c92:	7019      	strb	r1, [r3, #0]
 8003c94:	68a3      	ldr	r3, [r4, #8]
 8003c96:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003c9a:	3b01      	subs	r3, #1
 8003c9c:	60a3      	str	r3, [r4, #8]
 8003c9e:	2900      	cmp	r1, #0
 8003ca0:	d1ed      	bne.n	8003c7e <_puts_r+0x52>
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	da11      	bge.n	8003cca <_puts_r+0x9e>
 8003ca6:	4622      	mov	r2, r4
 8003ca8:	210a      	movs	r1, #10
 8003caa:	4628      	mov	r0, r5
 8003cac:	f000 f85f 	bl	8003d6e <__swbuf_r>
 8003cb0:	3001      	adds	r0, #1
 8003cb2:	d0d7      	beq.n	8003c64 <_puts_r+0x38>
 8003cb4:	250a      	movs	r5, #10
 8003cb6:	e7d7      	b.n	8003c68 <_puts_r+0x3c>
 8003cb8:	4622      	mov	r2, r4
 8003cba:	4628      	mov	r0, r5
 8003cbc:	f000 f857 	bl	8003d6e <__swbuf_r>
 8003cc0:	3001      	adds	r0, #1
 8003cc2:	d1e7      	bne.n	8003c94 <_puts_r+0x68>
 8003cc4:	e7ce      	b.n	8003c64 <_puts_r+0x38>
 8003cc6:	3e01      	subs	r6, #1
 8003cc8:	e7e4      	b.n	8003c94 <_puts_r+0x68>
 8003cca:	6823      	ldr	r3, [r4, #0]
 8003ccc:	1c5a      	adds	r2, r3, #1
 8003cce:	6022      	str	r2, [r4, #0]
 8003cd0:	220a      	movs	r2, #10
 8003cd2:	701a      	strb	r2, [r3, #0]
 8003cd4:	e7ee      	b.n	8003cb4 <_puts_r+0x88>
	...

08003cd8 <puts>:
 8003cd8:	4b02      	ldr	r3, [pc, #8]	@ (8003ce4 <puts+0xc>)
 8003cda:	4601      	mov	r1, r0
 8003cdc:	6818      	ldr	r0, [r3, #0]
 8003cde:	f7ff bfa5 	b.w	8003c2c <_puts_r>
 8003ce2:	bf00      	nop
 8003ce4:	20000058 	.word	0x20000058

08003ce8 <__sread>:
 8003ce8:	b510      	push	{r4, lr}
 8003cea:	460c      	mov	r4, r1
 8003cec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003cf0:	f000 f8fc 	bl	8003eec <_read_r>
 8003cf4:	2800      	cmp	r0, #0
 8003cf6:	bfab      	itete	ge
 8003cf8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003cfa:	89a3      	ldrhlt	r3, [r4, #12]
 8003cfc:	181b      	addge	r3, r3, r0
 8003cfe:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003d02:	bfac      	ite	ge
 8003d04:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003d06:	81a3      	strhlt	r3, [r4, #12]
 8003d08:	bd10      	pop	{r4, pc}

08003d0a <__swrite>:
 8003d0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003d0e:	461f      	mov	r7, r3
 8003d10:	898b      	ldrh	r3, [r1, #12]
 8003d12:	4605      	mov	r5, r0
 8003d14:	05db      	lsls	r3, r3, #23
 8003d16:	460c      	mov	r4, r1
 8003d18:	4616      	mov	r6, r2
 8003d1a:	d505      	bpl.n	8003d28 <__swrite+0x1e>
 8003d1c:	2302      	movs	r3, #2
 8003d1e:	2200      	movs	r2, #0
 8003d20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d24:	f000 f8d0 	bl	8003ec8 <_lseek_r>
 8003d28:	89a3      	ldrh	r3, [r4, #12]
 8003d2a:	4632      	mov	r2, r6
 8003d2c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003d30:	81a3      	strh	r3, [r4, #12]
 8003d32:	4628      	mov	r0, r5
 8003d34:	463b      	mov	r3, r7
 8003d36:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003d3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003d3e:	f000 b8e7 	b.w	8003f10 <_write_r>

08003d42 <__sseek>:
 8003d42:	b510      	push	{r4, lr}
 8003d44:	460c      	mov	r4, r1
 8003d46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d4a:	f000 f8bd 	bl	8003ec8 <_lseek_r>
 8003d4e:	1c43      	adds	r3, r0, #1
 8003d50:	89a3      	ldrh	r3, [r4, #12]
 8003d52:	bf15      	itete	ne
 8003d54:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003d56:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003d5a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003d5e:	81a3      	strheq	r3, [r4, #12]
 8003d60:	bf18      	it	ne
 8003d62:	81a3      	strhne	r3, [r4, #12]
 8003d64:	bd10      	pop	{r4, pc}

08003d66 <__sclose>:
 8003d66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d6a:	f000 b89d 	b.w	8003ea8 <_close_r>

08003d6e <__swbuf_r>:
 8003d6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d70:	460e      	mov	r6, r1
 8003d72:	4614      	mov	r4, r2
 8003d74:	4605      	mov	r5, r0
 8003d76:	b118      	cbz	r0, 8003d80 <__swbuf_r+0x12>
 8003d78:	6a03      	ldr	r3, [r0, #32]
 8003d7a:	b90b      	cbnz	r3, 8003d80 <__swbuf_r+0x12>
 8003d7c:	f7ff ff06 	bl	8003b8c <__sinit>
 8003d80:	69a3      	ldr	r3, [r4, #24]
 8003d82:	60a3      	str	r3, [r4, #8]
 8003d84:	89a3      	ldrh	r3, [r4, #12]
 8003d86:	071a      	lsls	r2, r3, #28
 8003d88:	d501      	bpl.n	8003d8e <__swbuf_r+0x20>
 8003d8a:	6923      	ldr	r3, [r4, #16]
 8003d8c:	b943      	cbnz	r3, 8003da0 <__swbuf_r+0x32>
 8003d8e:	4621      	mov	r1, r4
 8003d90:	4628      	mov	r0, r5
 8003d92:	f000 f82b 	bl	8003dec <__swsetup_r>
 8003d96:	b118      	cbz	r0, 8003da0 <__swbuf_r+0x32>
 8003d98:	f04f 37ff 	mov.w	r7, #4294967295
 8003d9c:	4638      	mov	r0, r7
 8003d9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003da0:	6823      	ldr	r3, [r4, #0]
 8003da2:	6922      	ldr	r2, [r4, #16]
 8003da4:	b2f6      	uxtb	r6, r6
 8003da6:	1a98      	subs	r0, r3, r2
 8003da8:	6963      	ldr	r3, [r4, #20]
 8003daa:	4637      	mov	r7, r6
 8003dac:	4283      	cmp	r3, r0
 8003dae:	dc05      	bgt.n	8003dbc <__swbuf_r+0x4e>
 8003db0:	4621      	mov	r1, r4
 8003db2:	4628      	mov	r0, r5
 8003db4:	f000 fd34 	bl	8004820 <_fflush_r>
 8003db8:	2800      	cmp	r0, #0
 8003dba:	d1ed      	bne.n	8003d98 <__swbuf_r+0x2a>
 8003dbc:	68a3      	ldr	r3, [r4, #8]
 8003dbe:	3b01      	subs	r3, #1
 8003dc0:	60a3      	str	r3, [r4, #8]
 8003dc2:	6823      	ldr	r3, [r4, #0]
 8003dc4:	1c5a      	adds	r2, r3, #1
 8003dc6:	6022      	str	r2, [r4, #0]
 8003dc8:	701e      	strb	r6, [r3, #0]
 8003dca:	6962      	ldr	r2, [r4, #20]
 8003dcc:	1c43      	adds	r3, r0, #1
 8003dce:	429a      	cmp	r2, r3
 8003dd0:	d004      	beq.n	8003ddc <__swbuf_r+0x6e>
 8003dd2:	89a3      	ldrh	r3, [r4, #12]
 8003dd4:	07db      	lsls	r3, r3, #31
 8003dd6:	d5e1      	bpl.n	8003d9c <__swbuf_r+0x2e>
 8003dd8:	2e0a      	cmp	r6, #10
 8003dda:	d1df      	bne.n	8003d9c <__swbuf_r+0x2e>
 8003ddc:	4621      	mov	r1, r4
 8003dde:	4628      	mov	r0, r5
 8003de0:	f000 fd1e 	bl	8004820 <_fflush_r>
 8003de4:	2800      	cmp	r0, #0
 8003de6:	d0d9      	beq.n	8003d9c <__swbuf_r+0x2e>
 8003de8:	e7d6      	b.n	8003d98 <__swbuf_r+0x2a>
	...

08003dec <__swsetup_r>:
 8003dec:	b538      	push	{r3, r4, r5, lr}
 8003dee:	4b29      	ldr	r3, [pc, #164]	@ (8003e94 <__swsetup_r+0xa8>)
 8003df0:	4605      	mov	r5, r0
 8003df2:	6818      	ldr	r0, [r3, #0]
 8003df4:	460c      	mov	r4, r1
 8003df6:	b118      	cbz	r0, 8003e00 <__swsetup_r+0x14>
 8003df8:	6a03      	ldr	r3, [r0, #32]
 8003dfa:	b90b      	cbnz	r3, 8003e00 <__swsetup_r+0x14>
 8003dfc:	f7ff fec6 	bl	8003b8c <__sinit>
 8003e00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003e04:	0719      	lsls	r1, r3, #28
 8003e06:	d422      	bmi.n	8003e4e <__swsetup_r+0x62>
 8003e08:	06da      	lsls	r2, r3, #27
 8003e0a:	d407      	bmi.n	8003e1c <__swsetup_r+0x30>
 8003e0c:	2209      	movs	r2, #9
 8003e0e:	602a      	str	r2, [r5, #0]
 8003e10:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003e14:	f04f 30ff 	mov.w	r0, #4294967295
 8003e18:	81a3      	strh	r3, [r4, #12]
 8003e1a:	e033      	b.n	8003e84 <__swsetup_r+0x98>
 8003e1c:	0758      	lsls	r0, r3, #29
 8003e1e:	d512      	bpl.n	8003e46 <__swsetup_r+0x5a>
 8003e20:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003e22:	b141      	cbz	r1, 8003e36 <__swsetup_r+0x4a>
 8003e24:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003e28:	4299      	cmp	r1, r3
 8003e2a:	d002      	beq.n	8003e32 <__swsetup_r+0x46>
 8003e2c:	4628      	mov	r0, r5
 8003e2e:	f000 f8af 	bl	8003f90 <_free_r>
 8003e32:	2300      	movs	r3, #0
 8003e34:	6363      	str	r3, [r4, #52]	@ 0x34
 8003e36:	89a3      	ldrh	r3, [r4, #12]
 8003e38:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8003e3c:	81a3      	strh	r3, [r4, #12]
 8003e3e:	2300      	movs	r3, #0
 8003e40:	6063      	str	r3, [r4, #4]
 8003e42:	6923      	ldr	r3, [r4, #16]
 8003e44:	6023      	str	r3, [r4, #0]
 8003e46:	89a3      	ldrh	r3, [r4, #12]
 8003e48:	f043 0308 	orr.w	r3, r3, #8
 8003e4c:	81a3      	strh	r3, [r4, #12]
 8003e4e:	6923      	ldr	r3, [r4, #16]
 8003e50:	b94b      	cbnz	r3, 8003e66 <__swsetup_r+0x7a>
 8003e52:	89a3      	ldrh	r3, [r4, #12]
 8003e54:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8003e58:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003e5c:	d003      	beq.n	8003e66 <__swsetup_r+0x7a>
 8003e5e:	4621      	mov	r1, r4
 8003e60:	4628      	mov	r0, r5
 8003e62:	f000 fd2a 	bl	80048ba <__smakebuf_r>
 8003e66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003e6a:	f013 0201 	ands.w	r2, r3, #1
 8003e6e:	d00a      	beq.n	8003e86 <__swsetup_r+0x9a>
 8003e70:	2200      	movs	r2, #0
 8003e72:	60a2      	str	r2, [r4, #8]
 8003e74:	6962      	ldr	r2, [r4, #20]
 8003e76:	4252      	negs	r2, r2
 8003e78:	61a2      	str	r2, [r4, #24]
 8003e7a:	6922      	ldr	r2, [r4, #16]
 8003e7c:	b942      	cbnz	r2, 8003e90 <__swsetup_r+0xa4>
 8003e7e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8003e82:	d1c5      	bne.n	8003e10 <__swsetup_r+0x24>
 8003e84:	bd38      	pop	{r3, r4, r5, pc}
 8003e86:	0799      	lsls	r1, r3, #30
 8003e88:	bf58      	it	pl
 8003e8a:	6962      	ldrpl	r2, [r4, #20]
 8003e8c:	60a2      	str	r2, [r4, #8]
 8003e8e:	e7f4      	b.n	8003e7a <__swsetup_r+0x8e>
 8003e90:	2000      	movs	r0, #0
 8003e92:	e7f7      	b.n	8003e84 <__swsetup_r+0x98>
 8003e94:	20000058 	.word	0x20000058

08003e98 <memset>:
 8003e98:	4603      	mov	r3, r0
 8003e9a:	4402      	add	r2, r0
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d100      	bne.n	8003ea2 <memset+0xa>
 8003ea0:	4770      	bx	lr
 8003ea2:	f803 1b01 	strb.w	r1, [r3], #1
 8003ea6:	e7f9      	b.n	8003e9c <memset+0x4>

08003ea8 <_close_r>:
 8003ea8:	b538      	push	{r3, r4, r5, lr}
 8003eaa:	2300      	movs	r3, #0
 8003eac:	4d05      	ldr	r5, [pc, #20]	@ (8003ec4 <_close_r+0x1c>)
 8003eae:	4604      	mov	r4, r0
 8003eb0:	4608      	mov	r0, r1
 8003eb2:	602b      	str	r3, [r5, #0]
 8003eb4:	f7fc fdfb 	bl	8000aae <_close>
 8003eb8:	1c43      	adds	r3, r0, #1
 8003eba:	d102      	bne.n	8003ec2 <_close_r+0x1a>
 8003ebc:	682b      	ldr	r3, [r5, #0]
 8003ebe:	b103      	cbz	r3, 8003ec2 <_close_r+0x1a>
 8003ec0:	6023      	str	r3, [r4, #0]
 8003ec2:	bd38      	pop	{r3, r4, r5, pc}
 8003ec4:	200003f0 	.word	0x200003f0

08003ec8 <_lseek_r>:
 8003ec8:	b538      	push	{r3, r4, r5, lr}
 8003eca:	4604      	mov	r4, r0
 8003ecc:	4608      	mov	r0, r1
 8003ece:	4611      	mov	r1, r2
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	4d05      	ldr	r5, [pc, #20]	@ (8003ee8 <_lseek_r+0x20>)
 8003ed4:	602a      	str	r2, [r5, #0]
 8003ed6:	461a      	mov	r2, r3
 8003ed8:	f7fc fe0d 	bl	8000af6 <_lseek>
 8003edc:	1c43      	adds	r3, r0, #1
 8003ede:	d102      	bne.n	8003ee6 <_lseek_r+0x1e>
 8003ee0:	682b      	ldr	r3, [r5, #0]
 8003ee2:	b103      	cbz	r3, 8003ee6 <_lseek_r+0x1e>
 8003ee4:	6023      	str	r3, [r4, #0]
 8003ee6:	bd38      	pop	{r3, r4, r5, pc}
 8003ee8:	200003f0 	.word	0x200003f0

08003eec <_read_r>:
 8003eec:	b538      	push	{r3, r4, r5, lr}
 8003eee:	4604      	mov	r4, r0
 8003ef0:	4608      	mov	r0, r1
 8003ef2:	4611      	mov	r1, r2
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	4d05      	ldr	r5, [pc, #20]	@ (8003f0c <_read_r+0x20>)
 8003ef8:	602a      	str	r2, [r5, #0]
 8003efa:	461a      	mov	r2, r3
 8003efc:	f7fc fd9e 	bl	8000a3c <_read>
 8003f00:	1c43      	adds	r3, r0, #1
 8003f02:	d102      	bne.n	8003f0a <_read_r+0x1e>
 8003f04:	682b      	ldr	r3, [r5, #0]
 8003f06:	b103      	cbz	r3, 8003f0a <_read_r+0x1e>
 8003f08:	6023      	str	r3, [r4, #0]
 8003f0a:	bd38      	pop	{r3, r4, r5, pc}
 8003f0c:	200003f0 	.word	0x200003f0

08003f10 <_write_r>:
 8003f10:	b538      	push	{r3, r4, r5, lr}
 8003f12:	4604      	mov	r4, r0
 8003f14:	4608      	mov	r0, r1
 8003f16:	4611      	mov	r1, r2
 8003f18:	2200      	movs	r2, #0
 8003f1a:	4d05      	ldr	r5, [pc, #20]	@ (8003f30 <_write_r+0x20>)
 8003f1c:	602a      	str	r2, [r5, #0]
 8003f1e:	461a      	mov	r2, r3
 8003f20:	f7fc fda9 	bl	8000a76 <_write>
 8003f24:	1c43      	adds	r3, r0, #1
 8003f26:	d102      	bne.n	8003f2e <_write_r+0x1e>
 8003f28:	682b      	ldr	r3, [r5, #0]
 8003f2a:	b103      	cbz	r3, 8003f2e <_write_r+0x1e>
 8003f2c:	6023      	str	r3, [r4, #0]
 8003f2e:	bd38      	pop	{r3, r4, r5, pc}
 8003f30:	200003f0 	.word	0x200003f0

08003f34 <__errno>:
 8003f34:	4b01      	ldr	r3, [pc, #4]	@ (8003f3c <__errno+0x8>)
 8003f36:	6818      	ldr	r0, [r3, #0]
 8003f38:	4770      	bx	lr
 8003f3a:	bf00      	nop
 8003f3c:	20000058 	.word	0x20000058

08003f40 <__libc_init_array>:
 8003f40:	b570      	push	{r4, r5, r6, lr}
 8003f42:	2600      	movs	r6, #0
 8003f44:	4d0c      	ldr	r5, [pc, #48]	@ (8003f78 <__libc_init_array+0x38>)
 8003f46:	4c0d      	ldr	r4, [pc, #52]	@ (8003f7c <__libc_init_array+0x3c>)
 8003f48:	1b64      	subs	r4, r4, r5
 8003f4a:	10a4      	asrs	r4, r4, #2
 8003f4c:	42a6      	cmp	r6, r4
 8003f4e:	d109      	bne.n	8003f64 <__libc_init_array+0x24>
 8003f50:	f000 fd64 	bl	8004a1c <_init>
 8003f54:	2600      	movs	r6, #0
 8003f56:	4d0a      	ldr	r5, [pc, #40]	@ (8003f80 <__libc_init_array+0x40>)
 8003f58:	4c0a      	ldr	r4, [pc, #40]	@ (8003f84 <__libc_init_array+0x44>)
 8003f5a:	1b64      	subs	r4, r4, r5
 8003f5c:	10a4      	asrs	r4, r4, #2
 8003f5e:	42a6      	cmp	r6, r4
 8003f60:	d105      	bne.n	8003f6e <__libc_init_array+0x2e>
 8003f62:	bd70      	pop	{r4, r5, r6, pc}
 8003f64:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f68:	4798      	blx	r3
 8003f6a:	3601      	adds	r6, #1
 8003f6c:	e7ee      	b.n	8003f4c <__libc_init_array+0xc>
 8003f6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f72:	4798      	blx	r3
 8003f74:	3601      	adds	r6, #1
 8003f76:	e7f2      	b.n	8003f5e <__libc_init_array+0x1e>
 8003f78:	08004b28 	.word	0x08004b28
 8003f7c:	08004b28 	.word	0x08004b28
 8003f80:	08004b28 	.word	0x08004b28
 8003f84:	08004b2c 	.word	0x08004b2c

08003f88 <__retarget_lock_init_recursive>:
 8003f88:	4770      	bx	lr

08003f8a <__retarget_lock_acquire_recursive>:
 8003f8a:	4770      	bx	lr

08003f8c <__retarget_lock_release_recursive>:
 8003f8c:	4770      	bx	lr
	...

08003f90 <_free_r>:
 8003f90:	b538      	push	{r3, r4, r5, lr}
 8003f92:	4605      	mov	r5, r0
 8003f94:	2900      	cmp	r1, #0
 8003f96:	d040      	beq.n	800401a <_free_r+0x8a>
 8003f98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003f9c:	1f0c      	subs	r4, r1, #4
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	bfb8      	it	lt
 8003fa2:	18e4      	addlt	r4, r4, r3
 8003fa4:	f000 f8de 	bl	8004164 <__malloc_lock>
 8003fa8:	4a1c      	ldr	r2, [pc, #112]	@ (800401c <_free_r+0x8c>)
 8003faa:	6813      	ldr	r3, [r2, #0]
 8003fac:	b933      	cbnz	r3, 8003fbc <_free_r+0x2c>
 8003fae:	6063      	str	r3, [r4, #4]
 8003fb0:	6014      	str	r4, [r2, #0]
 8003fb2:	4628      	mov	r0, r5
 8003fb4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003fb8:	f000 b8da 	b.w	8004170 <__malloc_unlock>
 8003fbc:	42a3      	cmp	r3, r4
 8003fbe:	d908      	bls.n	8003fd2 <_free_r+0x42>
 8003fc0:	6820      	ldr	r0, [r4, #0]
 8003fc2:	1821      	adds	r1, r4, r0
 8003fc4:	428b      	cmp	r3, r1
 8003fc6:	bf01      	itttt	eq
 8003fc8:	6819      	ldreq	r1, [r3, #0]
 8003fca:	685b      	ldreq	r3, [r3, #4]
 8003fcc:	1809      	addeq	r1, r1, r0
 8003fce:	6021      	streq	r1, [r4, #0]
 8003fd0:	e7ed      	b.n	8003fae <_free_r+0x1e>
 8003fd2:	461a      	mov	r2, r3
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	b10b      	cbz	r3, 8003fdc <_free_r+0x4c>
 8003fd8:	42a3      	cmp	r3, r4
 8003fda:	d9fa      	bls.n	8003fd2 <_free_r+0x42>
 8003fdc:	6811      	ldr	r1, [r2, #0]
 8003fde:	1850      	adds	r0, r2, r1
 8003fe0:	42a0      	cmp	r0, r4
 8003fe2:	d10b      	bne.n	8003ffc <_free_r+0x6c>
 8003fe4:	6820      	ldr	r0, [r4, #0]
 8003fe6:	4401      	add	r1, r0
 8003fe8:	1850      	adds	r0, r2, r1
 8003fea:	4283      	cmp	r3, r0
 8003fec:	6011      	str	r1, [r2, #0]
 8003fee:	d1e0      	bne.n	8003fb2 <_free_r+0x22>
 8003ff0:	6818      	ldr	r0, [r3, #0]
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	4408      	add	r0, r1
 8003ff6:	6010      	str	r0, [r2, #0]
 8003ff8:	6053      	str	r3, [r2, #4]
 8003ffa:	e7da      	b.n	8003fb2 <_free_r+0x22>
 8003ffc:	d902      	bls.n	8004004 <_free_r+0x74>
 8003ffe:	230c      	movs	r3, #12
 8004000:	602b      	str	r3, [r5, #0]
 8004002:	e7d6      	b.n	8003fb2 <_free_r+0x22>
 8004004:	6820      	ldr	r0, [r4, #0]
 8004006:	1821      	adds	r1, r4, r0
 8004008:	428b      	cmp	r3, r1
 800400a:	bf01      	itttt	eq
 800400c:	6819      	ldreq	r1, [r3, #0]
 800400e:	685b      	ldreq	r3, [r3, #4]
 8004010:	1809      	addeq	r1, r1, r0
 8004012:	6021      	streq	r1, [r4, #0]
 8004014:	6063      	str	r3, [r4, #4]
 8004016:	6054      	str	r4, [r2, #4]
 8004018:	e7cb      	b.n	8003fb2 <_free_r+0x22>
 800401a:	bd38      	pop	{r3, r4, r5, pc}
 800401c:	200003fc 	.word	0x200003fc

08004020 <sbrk_aligned>:
 8004020:	b570      	push	{r4, r5, r6, lr}
 8004022:	4e0f      	ldr	r6, [pc, #60]	@ (8004060 <sbrk_aligned+0x40>)
 8004024:	460c      	mov	r4, r1
 8004026:	6831      	ldr	r1, [r6, #0]
 8004028:	4605      	mov	r5, r0
 800402a:	b911      	cbnz	r1, 8004032 <sbrk_aligned+0x12>
 800402c:	f000 fcd8 	bl	80049e0 <_sbrk_r>
 8004030:	6030      	str	r0, [r6, #0]
 8004032:	4621      	mov	r1, r4
 8004034:	4628      	mov	r0, r5
 8004036:	f000 fcd3 	bl	80049e0 <_sbrk_r>
 800403a:	1c43      	adds	r3, r0, #1
 800403c:	d103      	bne.n	8004046 <sbrk_aligned+0x26>
 800403e:	f04f 34ff 	mov.w	r4, #4294967295
 8004042:	4620      	mov	r0, r4
 8004044:	bd70      	pop	{r4, r5, r6, pc}
 8004046:	1cc4      	adds	r4, r0, #3
 8004048:	f024 0403 	bic.w	r4, r4, #3
 800404c:	42a0      	cmp	r0, r4
 800404e:	d0f8      	beq.n	8004042 <sbrk_aligned+0x22>
 8004050:	1a21      	subs	r1, r4, r0
 8004052:	4628      	mov	r0, r5
 8004054:	f000 fcc4 	bl	80049e0 <_sbrk_r>
 8004058:	3001      	adds	r0, #1
 800405a:	d1f2      	bne.n	8004042 <sbrk_aligned+0x22>
 800405c:	e7ef      	b.n	800403e <sbrk_aligned+0x1e>
 800405e:	bf00      	nop
 8004060:	200003f8 	.word	0x200003f8

08004064 <_malloc_r>:
 8004064:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004068:	1ccd      	adds	r5, r1, #3
 800406a:	f025 0503 	bic.w	r5, r5, #3
 800406e:	3508      	adds	r5, #8
 8004070:	2d0c      	cmp	r5, #12
 8004072:	bf38      	it	cc
 8004074:	250c      	movcc	r5, #12
 8004076:	2d00      	cmp	r5, #0
 8004078:	4606      	mov	r6, r0
 800407a:	db01      	blt.n	8004080 <_malloc_r+0x1c>
 800407c:	42a9      	cmp	r1, r5
 800407e:	d904      	bls.n	800408a <_malloc_r+0x26>
 8004080:	230c      	movs	r3, #12
 8004082:	6033      	str	r3, [r6, #0]
 8004084:	2000      	movs	r0, #0
 8004086:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800408a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004160 <_malloc_r+0xfc>
 800408e:	f000 f869 	bl	8004164 <__malloc_lock>
 8004092:	f8d8 3000 	ldr.w	r3, [r8]
 8004096:	461c      	mov	r4, r3
 8004098:	bb44      	cbnz	r4, 80040ec <_malloc_r+0x88>
 800409a:	4629      	mov	r1, r5
 800409c:	4630      	mov	r0, r6
 800409e:	f7ff ffbf 	bl	8004020 <sbrk_aligned>
 80040a2:	1c43      	adds	r3, r0, #1
 80040a4:	4604      	mov	r4, r0
 80040a6:	d158      	bne.n	800415a <_malloc_r+0xf6>
 80040a8:	f8d8 4000 	ldr.w	r4, [r8]
 80040ac:	4627      	mov	r7, r4
 80040ae:	2f00      	cmp	r7, #0
 80040b0:	d143      	bne.n	800413a <_malloc_r+0xd6>
 80040b2:	2c00      	cmp	r4, #0
 80040b4:	d04b      	beq.n	800414e <_malloc_r+0xea>
 80040b6:	6823      	ldr	r3, [r4, #0]
 80040b8:	4639      	mov	r1, r7
 80040ba:	4630      	mov	r0, r6
 80040bc:	eb04 0903 	add.w	r9, r4, r3
 80040c0:	f000 fc8e 	bl	80049e0 <_sbrk_r>
 80040c4:	4581      	cmp	r9, r0
 80040c6:	d142      	bne.n	800414e <_malloc_r+0xea>
 80040c8:	6821      	ldr	r1, [r4, #0]
 80040ca:	4630      	mov	r0, r6
 80040cc:	1a6d      	subs	r5, r5, r1
 80040ce:	4629      	mov	r1, r5
 80040d0:	f7ff ffa6 	bl	8004020 <sbrk_aligned>
 80040d4:	3001      	adds	r0, #1
 80040d6:	d03a      	beq.n	800414e <_malloc_r+0xea>
 80040d8:	6823      	ldr	r3, [r4, #0]
 80040da:	442b      	add	r3, r5
 80040dc:	6023      	str	r3, [r4, #0]
 80040de:	f8d8 3000 	ldr.w	r3, [r8]
 80040e2:	685a      	ldr	r2, [r3, #4]
 80040e4:	bb62      	cbnz	r2, 8004140 <_malloc_r+0xdc>
 80040e6:	f8c8 7000 	str.w	r7, [r8]
 80040ea:	e00f      	b.n	800410c <_malloc_r+0xa8>
 80040ec:	6822      	ldr	r2, [r4, #0]
 80040ee:	1b52      	subs	r2, r2, r5
 80040f0:	d420      	bmi.n	8004134 <_malloc_r+0xd0>
 80040f2:	2a0b      	cmp	r2, #11
 80040f4:	d917      	bls.n	8004126 <_malloc_r+0xc2>
 80040f6:	1961      	adds	r1, r4, r5
 80040f8:	42a3      	cmp	r3, r4
 80040fa:	6025      	str	r5, [r4, #0]
 80040fc:	bf18      	it	ne
 80040fe:	6059      	strne	r1, [r3, #4]
 8004100:	6863      	ldr	r3, [r4, #4]
 8004102:	bf08      	it	eq
 8004104:	f8c8 1000 	streq.w	r1, [r8]
 8004108:	5162      	str	r2, [r4, r5]
 800410a:	604b      	str	r3, [r1, #4]
 800410c:	4630      	mov	r0, r6
 800410e:	f000 f82f 	bl	8004170 <__malloc_unlock>
 8004112:	f104 000b 	add.w	r0, r4, #11
 8004116:	1d23      	adds	r3, r4, #4
 8004118:	f020 0007 	bic.w	r0, r0, #7
 800411c:	1ac2      	subs	r2, r0, r3
 800411e:	bf1c      	itt	ne
 8004120:	1a1b      	subne	r3, r3, r0
 8004122:	50a3      	strne	r3, [r4, r2]
 8004124:	e7af      	b.n	8004086 <_malloc_r+0x22>
 8004126:	6862      	ldr	r2, [r4, #4]
 8004128:	42a3      	cmp	r3, r4
 800412a:	bf0c      	ite	eq
 800412c:	f8c8 2000 	streq.w	r2, [r8]
 8004130:	605a      	strne	r2, [r3, #4]
 8004132:	e7eb      	b.n	800410c <_malloc_r+0xa8>
 8004134:	4623      	mov	r3, r4
 8004136:	6864      	ldr	r4, [r4, #4]
 8004138:	e7ae      	b.n	8004098 <_malloc_r+0x34>
 800413a:	463c      	mov	r4, r7
 800413c:	687f      	ldr	r7, [r7, #4]
 800413e:	e7b6      	b.n	80040ae <_malloc_r+0x4a>
 8004140:	461a      	mov	r2, r3
 8004142:	685b      	ldr	r3, [r3, #4]
 8004144:	42a3      	cmp	r3, r4
 8004146:	d1fb      	bne.n	8004140 <_malloc_r+0xdc>
 8004148:	2300      	movs	r3, #0
 800414a:	6053      	str	r3, [r2, #4]
 800414c:	e7de      	b.n	800410c <_malloc_r+0xa8>
 800414e:	230c      	movs	r3, #12
 8004150:	4630      	mov	r0, r6
 8004152:	6033      	str	r3, [r6, #0]
 8004154:	f000 f80c 	bl	8004170 <__malloc_unlock>
 8004158:	e794      	b.n	8004084 <_malloc_r+0x20>
 800415a:	6005      	str	r5, [r0, #0]
 800415c:	e7d6      	b.n	800410c <_malloc_r+0xa8>
 800415e:	bf00      	nop
 8004160:	200003fc 	.word	0x200003fc

08004164 <__malloc_lock>:
 8004164:	4801      	ldr	r0, [pc, #4]	@ (800416c <__malloc_lock+0x8>)
 8004166:	f7ff bf10 	b.w	8003f8a <__retarget_lock_acquire_recursive>
 800416a:	bf00      	nop
 800416c:	200003f4 	.word	0x200003f4

08004170 <__malloc_unlock>:
 8004170:	4801      	ldr	r0, [pc, #4]	@ (8004178 <__malloc_unlock+0x8>)
 8004172:	f7ff bf0b 	b.w	8003f8c <__retarget_lock_release_recursive>
 8004176:	bf00      	nop
 8004178:	200003f4 	.word	0x200003f4

0800417c <__sfputc_r>:
 800417c:	6893      	ldr	r3, [r2, #8]
 800417e:	b410      	push	{r4}
 8004180:	3b01      	subs	r3, #1
 8004182:	2b00      	cmp	r3, #0
 8004184:	6093      	str	r3, [r2, #8]
 8004186:	da07      	bge.n	8004198 <__sfputc_r+0x1c>
 8004188:	6994      	ldr	r4, [r2, #24]
 800418a:	42a3      	cmp	r3, r4
 800418c:	db01      	blt.n	8004192 <__sfputc_r+0x16>
 800418e:	290a      	cmp	r1, #10
 8004190:	d102      	bne.n	8004198 <__sfputc_r+0x1c>
 8004192:	bc10      	pop	{r4}
 8004194:	f7ff bdeb 	b.w	8003d6e <__swbuf_r>
 8004198:	6813      	ldr	r3, [r2, #0]
 800419a:	1c58      	adds	r0, r3, #1
 800419c:	6010      	str	r0, [r2, #0]
 800419e:	7019      	strb	r1, [r3, #0]
 80041a0:	4608      	mov	r0, r1
 80041a2:	bc10      	pop	{r4}
 80041a4:	4770      	bx	lr

080041a6 <__sfputs_r>:
 80041a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041a8:	4606      	mov	r6, r0
 80041aa:	460f      	mov	r7, r1
 80041ac:	4614      	mov	r4, r2
 80041ae:	18d5      	adds	r5, r2, r3
 80041b0:	42ac      	cmp	r4, r5
 80041b2:	d101      	bne.n	80041b8 <__sfputs_r+0x12>
 80041b4:	2000      	movs	r0, #0
 80041b6:	e007      	b.n	80041c8 <__sfputs_r+0x22>
 80041b8:	463a      	mov	r2, r7
 80041ba:	4630      	mov	r0, r6
 80041bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80041c0:	f7ff ffdc 	bl	800417c <__sfputc_r>
 80041c4:	1c43      	adds	r3, r0, #1
 80041c6:	d1f3      	bne.n	80041b0 <__sfputs_r+0xa>
 80041c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080041cc <_vfiprintf_r>:
 80041cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041d0:	460d      	mov	r5, r1
 80041d2:	4614      	mov	r4, r2
 80041d4:	4698      	mov	r8, r3
 80041d6:	4606      	mov	r6, r0
 80041d8:	b09d      	sub	sp, #116	@ 0x74
 80041da:	b118      	cbz	r0, 80041e4 <_vfiprintf_r+0x18>
 80041dc:	6a03      	ldr	r3, [r0, #32]
 80041de:	b90b      	cbnz	r3, 80041e4 <_vfiprintf_r+0x18>
 80041e0:	f7ff fcd4 	bl	8003b8c <__sinit>
 80041e4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80041e6:	07d9      	lsls	r1, r3, #31
 80041e8:	d405      	bmi.n	80041f6 <_vfiprintf_r+0x2a>
 80041ea:	89ab      	ldrh	r3, [r5, #12]
 80041ec:	059a      	lsls	r2, r3, #22
 80041ee:	d402      	bmi.n	80041f6 <_vfiprintf_r+0x2a>
 80041f0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80041f2:	f7ff feca 	bl	8003f8a <__retarget_lock_acquire_recursive>
 80041f6:	89ab      	ldrh	r3, [r5, #12]
 80041f8:	071b      	lsls	r3, r3, #28
 80041fa:	d501      	bpl.n	8004200 <_vfiprintf_r+0x34>
 80041fc:	692b      	ldr	r3, [r5, #16]
 80041fe:	b99b      	cbnz	r3, 8004228 <_vfiprintf_r+0x5c>
 8004200:	4629      	mov	r1, r5
 8004202:	4630      	mov	r0, r6
 8004204:	f7ff fdf2 	bl	8003dec <__swsetup_r>
 8004208:	b170      	cbz	r0, 8004228 <_vfiprintf_r+0x5c>
 800420a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800420c:	07dc      	lsls	r4, r3, #31
 800420e:	d504      	bpl.n	800421a <_vfiprintf_r+0x4e>
 8004210:	f04f 30ff 	mov.w	r0, #4294967295
 8004214:	b01d      	add	sp, #116	@ 0x74
 8004216:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800421a:	89ab      	ldrh	r3, [r5, #12]
 800421c:	0598      	lsls	r0, r3, #22
 800421e:	d4f7      	bmi.n	8004210 <_vfiprintf_r+0x44>
 8004220:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004222:	f7ff feb3 	bl	8003f8c <__retarget_lock_release_recursive>
 8004226:	e7f3      	b.n	8004210 <_vfiprintf_r+0x44>
 8004228:	2300      	movs	r3, #0
 800422a:	9309      	str	r3, [sp, #36]	@ 0x24
 800422c:	2320      	movs	r3, #32
 800422e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004232:	2330      	movs	r3, #48	@ 0x30
 8004234:	f04f 0901 	mov.w	r9, #1
 8004238:	f8cd 800c 	str.w	r8, [sp, #12]
 800423c:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 80043e8 <_vfiprintf_r+0x21c>
 8004240:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004244:	4623      	mov	r3, r4
 8004246:	469a      	mov	sl, r3
 8004248:	f813 2b01 	ldrb.w	r2, [r3], #1
 800424c:	b10a      	cbz	r2, 8004252 <_vfiprintf_r+0x86>
 800424e:	2a25      	cmp	r2, #37	@ 0x25
 8004250:	d1f9      	bne.n	8004246 <_vfiprintf_r+0x7a>
 8004252:	ebba 0b04 	subs.w	fp, sl, r4
 8004256:	d00b      	beq.n	8004270 <_vfiprintf_r+0xa4>
 8004258:	465b      	mov	r3, fp
 800425a:	4622      	mov	r2, r4
 800425c:	4629      	mov	r1, r5
 800425e:	4630      	mov	r0, r6
 8004260:	f7ff ffa1 	bl	80041a6 <__sfputs_r>
 8004264:	3001      	adds	r0, #1
 8004266:	f000 80a7 	beq.w	80043b8 <_vfiprintf_r+0x1ec>
 800426a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800426c:	445a      	add	r2, fp
 800426e:	9209      	str	r2, [sp, #36]	@ 0x24
 8004270:	f89a 3000 	ldrb.w	r3, [sl]
 8004274:	2b00      	cmp	r3, #0
 8004276:	f000 809f 	beq.w	80043b8 <_vfiprintf_r+0x1ec>
 800427a:	2300      	movs	r3, #0
 800427c:	f04f 32ff 	mov.w	r2, #4294967295
 8004280:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004284:	f10a 0a01 	add.w	sl, sl, #1
 8004288:	9304      	str	r3, [sp, #16]
 800428a:	9307      	str	r3, [sp, #28]
 800428c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004290:	931a      	str	r3, [sp, #104]	@ 0x68
 8004292:	4654      	mov	r4, sl
 8004294:	2205      	movs	r2, #5
 8004296:	f814 1b01 	ldrb.w	r1, [r4], #1
 800429a:	4853      	ldr	r0, [pc, #332]	@ (80043e8 <_vfiprintf_r+0x21c>)
 800429c:	f000 fbb0 	bl	8004a00 <memchr>
 80042a0:	9a04      	ldr	r2, [sp, #16]
 80042a2:	b9d8      	cbnz	r0, 80042dc <_vfiprintf_r+0x110>
 80042a4:	06d1      	lsls	r1, r2, #27
 80042a6:	bf44      	itt	mi
 80042a8:	2320      	movmi	r3, #32
 80042aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80042ae:	0713      	lsls	r3, r2, #28
 80042b0:	bf44      	itt	mi
 80042b2:	232b      	movmi	r3, #43	@ 0x2b
 80042b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80042b8:	f89a 3000 	ldrb.w	r3, [sl]
 80042bc:	2b2a      	cmp	r3, #42	@ 0x2a
 80042be:	d015      	beq.n	80042ec <_vfiprintf_r+0x120>
 80042c0:	4654      	mov	r4, sl
 80042c2:	2000      	movs	r0, #0
 80042c4:	f04f 0c0a 	mov.w	ip, #10
 80042c8:	9a07      	ldr	r2, [sp, #28]
 80042ca:	4621      	mov	r1, r4
 80042cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80042d0:	3b30      	subs	r3, #48	@ 0x30
 80042d2:	2b09      	cmp	r3, #9
 80042d4:	d94b      	bls.n	800436e <_vfiprintf_r+0x1a2>
 80042d6:	b1b0      	cbz	r0, 8004306 <_vfiprintf_r+0x13a>
 80042d8:	9207      	str	r2, [sp, #28]
 80042da:	e014      	b.n	8004306 <_vfiprintf_r+0x13a>
 80042dc:	eba0 0308 	sub.w	r3, r0, r8
 80042e0:	fa09 f303 	lsl.w	r3, r9, r3
 80042e4:	4313      	orrs	r3, r2
 80042e6:	46a2      	mov	sl, r4
 80042e8:	9304      	str	r3, [sp, #16]
 80042ea:	e7d2      	b.n	8004292 <_vfiprintf_r+0xc6>
 80042ec:	9b03      	ldr	r3, [sp, #12]
 80042ee:	1d19      	adds	r1, r3, #4
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	9103      	str	r1, [sp, #12]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	bfbb      	ittet	lt
 80042f8:	425b      	neglt	r3, r3
 80042fa:	f042 0202 	orrlt.w	r2, r2, #2
 80042fe:	9307      	strge	r3, [sp, #28]
 8004300:	9307      	strlt	r3, [sp, #28]
 8004302:	bfb8      	it	lt
 8004304:	9204      	strlt	r2, [sp, #16]
 8004306:	7823      	ldrb	r3, [r4, #0]
 8004308:	2b2e      	cmp	r3, #46	@ 0x2e
 800430a:	d10a      	bne.n	8004322 <_vfiprintf_r+0x156>
 800430c:	7863      	ldrb	r3, [r4, #1]
 800430e:	2b2a      	cmp	r3, #42	@ 0x2a
 8004310:	d132      	bne.n	8004378 <_vfiprintf_r+0x1ac>
 8004312:	9b03      	ldr	r3, [sp, #12]
 8004314:	3402      	adds	r4, #2
 8004316:	1d1a      	adds	r2, r3, #4
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	9203      	str	r2, [sp, #12]
 800431c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004320:	9305      	str	r3, [sp, #20]
 8004322:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 80043ec <_vfiprintf_r+0x220>
 8004326:	2203      	movs	r2, #3
 8004328:	4650      	mov	r0, sl
 800432a:	7821      	ldrb	r1, [r4, #0]
 800432c:	f000 fb68 	bl	8004a00 <memchr>
 8004330:	b138      	cbz	r0, 8004342 <_vfiprintf_r+0x176>
 8004332:	2240      	movs	r2, #64	@ 0x40
 8004334:	9b04      	ldr	r3, [sp, #16]
 8004336:	eba0 000a 	sub.w	r0, r0, sl
 800433a:	4082      	lsls	r2, r0
 800433c:	4313      	orrs	r3, r2
 800433e:	3401      	adds	r4, #1
 8004340:	9304      	str	r3, [sp, #16]
 8004342:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004346:	2206      	movs	r2, #6
 8004348:	4829      	ldr	r0, [pc, #164]	@ (80043f0 <_vfiprintf_r+0x224>)
 800434a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800434e:	f000 fb57 	bl	8004a00 <memchr>
 8004352:	2800      	cmp	r0, #0
 8004354:	d03f      	beq.n	80043d6 <_vfiprintf_r+0x20a>
 8004356:	4b27      	ldr	r3, [pc, #156]	@ (80043f4 <_vfiprintf_r+0x228>)
 8004358:	bb1b      	cbnz	r3, 80043a2 <_vfiprintf_r+0x1d6>
 800435a:	9b03      	ldr	r3, [sp, #12]
 800435c:	3307      	adds	r3, #7
 800435e:	f023 0307 	bic.w	r3, r3, #7
 8004362:	3308      	adds	r3, #8
 8004364:	9303      	str	r3, [sp, #12]
 8004366:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004368:	443b      	add	r3, r7
 800436a:	9309      	str	r3, [sp, #36]	@ 0x24
 800436c:	e76a      	b.n	8004244 <_vfiprintf_r+0x78>
 800436e:	460c      	mov	r4, r1
 8004370:	2001      	movs	r0, #1
 8004372:	fb0c 3202 	mla	r2, ip, r2, r3
 8004376:	e7a8      	b.n	80042ca <_vfiprintf_r+0xfe>
 8004378:	2300      	movs	r3, #0
 800437a:	f04f 0c0a 	mov.w	ip, #10
 800437e:	4619      	mov	r1, r3
 8004380:	3401      	adds	r4, #1
 8004382:	9305      	str	r3, [sp, #20]
 8004384:	4620      	mov	r0, r4
 8004386:	f810 2b01 	ldrb.w	r2, [r0], #1
 800438a:	3a30      	subs	r2, #48	@ 0x30
 800438c:	2a09      	cmp	r2, #9
 800438e:	d903      	bls.n	8004398 <_vfiprintf_r+0x1cc>
 8004390:	2b00      	cmp	r3, #0
 8004392:	d0c6      	beq.n	8004322 <_vfiprintf_r+0x156>
 8004394:	9105      	str	r1, [sp, #20]
 8004396:	e7c4      	b.n	8004322 <_vfiprintf_r+0x156>
 8004398:	4604      	mov	r4, r0
 800439a:	2301      	movs	r3, #1
 800439c:	fb0c 2101 	mla	r1, ip, r1, r2
 80043a0:	e7f0      	b.n	8004384 <_vfiprintf_r+0x1b8>
 80043a2:	ab03      	add	r3, sp, #12
 80043a4:	9300      	str	r3, [sp, #0]
 80043a6:	462a      	mov	r2, r5
 80043a8:	4630      	mov	r0, r6
 80043aa:	4b13      	ldr	r3, [pc, #76]	@ (80043f8 <_vfiprintf_r+0x22c>)
 80043ac:	a904      	add	r1, sp, #16
 80043ae:	f3af 8000 	nop.w
 80043b2:	4607      	mov	r7, r0
 80043b4:	1c78      	adds	r0, r7, #1
 80043b6:	d1d6      	bne.n	8004366 <_vfiprintf_r+0x19a>
 80043b8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80043ba:	07d9      	lsls	r1, r3, #31
 80043bc:	d405      	bmi.n	80043ca <_vfiprintf_r+0x1fe>
 80043be:	89ab      	ldrh	r3, [r5, #12]
 80043c0:	059a      	lsls	r2, r3, #22
 80043c2:	d402      	bmi.n	80043ca <_vfiprintf_r+0x1fe>
 80043c4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80043c6:	f7ff fde1 	bl	8003f8c <__retarget_lock_release_recursive>
 80043ca:	89ab      	ldrh	r3, [r5, #12]
 80043cc:	065b      	lsls	r3, r3, #25
 80043ce:	f53f af1f 	bmi.w	8004210 <_vfiprintf_r+0x44>
 80043d2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80043d4:	e71e      	b.n	8004214 <_vfiprintf_r+0x48>
 80043d6:	ab03      	add	r3, sp, #12
 80043d8:	9300      	str	r3, [sp, #0]
 80043da:	462a      	mov	r2, r5
 80043dc:	4630      	mov	r0, r6
 80043de:	4b06      	ldr	r3, [pc, #24]	@ (80043f8 <_vfiprintf_r+0x22c>)
 80043e0:	a904      	add	r1, sp, #16
 80043e2:	f000 f87d 	bl	80044e0 <_printf_i>
 80043e6:	e7e4      	b.n	80043b2 <_vfiprintf_r+0x1e6>
 80043e8:	08004af2 	.word	0x08004af2
 80043ec:	08004af8 	.word	0x08004af8
 80043f0:	08004afc 	.word	0x08004afc
 80043f4:	00000000 	.word	0x00000000
 80043f8:	080041a7 	.word	0x080041a7

080043fc <_printf_common>:
 80043fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004400:	4616      	mov	r6, r2
 8004402:	4698      	mov	r8, r3
 8004404:	688a      	ldr	r2, [r1, #8]
 8004406:	690b      	ldr	r3, [r1, #16]
 8004408:	4607      	mov	r7, r0
 800440a:	4293      	cmp	r3, r2
 800440c:	bfb8      	it	lt
 800440e:	4613      	movlt	r3, r2
 8004410:	6033      	str	r3, [r6, #0]
 8004412:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004416:	460c      	mov	r4, r1
 8004418:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800441c:	b10a      	cbz	r2, 8004422 <_printf_common+0x26>
 800441e:	3301      	adds	r3, #1
 8004420:	6033      	str	r3, [r6, #0]
 8004422:	6823      	ldr	r3, [r4, #0]
 8004424:	0699      	lsls	r1, r3, #26
 8004426:	bf42      	ittt	mi
 8004428:	6833      	ldrmi	r3, [r6, #0]
 800442a:	3302      	addmi	r3, #2
 800442c:	6033      	strmi	r3, [r6, #0]
 800442e:	6825      	ldr	r5, [r4, #0]
 8004430:	f015 0506 	ands.w	r5, r5, #6
 8004434:	d106      	bne.n	8004444 <_printf_common+0x48>
 8004436:	f104 0a19 	add.w	sl, r4, #25
 800443a:	68e3      	ldr	r3, [r4, #12]
 800443c:	6832      	ldr	r2, [r6, #0]
 800443e:	1a9b      	subs	r3, r3, r2
 8004440:	42ab      	cmp	r3, r5
 8004442:	dc2b      	bgt.n	800449c <_printf_common+0xa0>
 8004444:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004448:	6822      	ldr	r2, [r4, #0]
 800444a:	3b00      	subs	r3, #0
 800444c:	bf18      	it	ne
 800444e:	2301      	movne	r3, #1
 8004450:	0692      	lsls	r2, r2, #26
 8004452:	d430      	bmi.n	80044b6 <_printf_common+0xba>
 8004454:	4641      	mov	r1, r8
 8004456:	4638      	mov	r0, r7
 8004458:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800445c:	47c8      	blx	r9
 800445e:	3001      	adds	r0, #1
 8004460:	d023      	beq.n	80044aa <_printf_common+0xae>
 8004462:	6823      	ldr	r3, [r4, #0]
 8004464:	6922      	ldr	r2, [r4, #16]
 8004466:	f003 0306 	and.w	r3, r3, #6
 800446a:	2b04      	cmp	r3, #4
 800446c:	bf14      	ite	ne
 800446e:	2500      	movne	r5, #0
 8004470:	6833      	ldreq	r3, [r6, #0]
 8004472:	f04f 0600 	mov.w	r6, #0
 8004476:	bf08      	it	eq
 8004478:	68e5      	ldreq	r5, [r4, #12]
 800447a:	f104 041a 	add.w	r4, r4, #26
 800447e:	bf08      	it	eq
 8004480:	1aed      	subeq	r5, r5, r3
 8004482:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004486:	bf08      	it	eq
 8004488:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800448c:	4293      	cmp	r3, r2
 800448e:	bfc4      	itt	gt
 8004490:	1a9b      	subgt	r3, r3, r2
 8004492:	18ed      	addgt	r5, r5, r3
 8004494:	42b5      	cmp	r5, r6
 8004496:	d11a      	bne.n	80044ce <_printf_common+0xd2>
 8004498:	2000      	movs	r0, #0
 800449a:	e008      	b.n	80044ae <_printf_common+0xb2>
 800449c:	2301      	movs	r3, #1
 800449e:	4652      	mov	r2, sl
 80044a0:	4641      	mov	r1, r8
 80044a2:	4638      	mov	r0, r7
 80044a4:	47c8      	blx	r9
 80044a6:	3001      	adds	r0, #1
 80044a8:	d103      	bne.n	80044b2 <_printf_common+0xb6>
 80044aa:	f04f 30ff 	mov.w	r0, #4294967295
 80044ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80044b2:	3501      	adds	r5, #1
 80044b4:	e7c1      	b.n	800443a <_printf_common+0x3e>
 80044b6:	2030      	movs	r0, #48	@ 0x30
 80044b8:	18e1      	adds	r1, r4, r3
 80044ba:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80044be:	1c5a      	adds	r2, r3, #1
 80044c0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80044c4:	4422      	add	r2, r4
 80044c6:	3302      	adds	r3, #2
 80044c8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80044cc:	e7c2      	b.n	8004454 <_printf_common+0x58>
 80044ce:	2301      	movs	r3, #1
 80044d0:	4622      	mov	r2, r4
 80044d2:	4641      	mov	r1, r8
 80044d4:	4638      	mov	r0, r7
 80044d6:	47c8      	blx	r9
 80044d8:	3001      	adds	r0, #1
 80044da:	d0e6      	beq.n	80044aa <_printf_common+0xae>
 80044dc:	3601      	adds	r6, #1
 80044de:	e7d9      	b.n	8004494 <_printf_common+0x98>

080044e0 <_printf_i>:
 80044e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80044e4:	7e0f      	ldrb	r7, [r1, #24]
 80044e6:	4691      	mov	r9, r2
 80044e8:	2f78      	cmp	r7, #120	@ 0x78
 80044ea:	4680      	mov	r8, r0
 80044ec:	460c      	mov	r4, r1
 80044ee:	469a      	mov	sl, r3
 80044f0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80044f2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80044f6:	d807      	bhi.n	8004508 <_printf_i+0x28>
 80044f8:	2f62      	cmp	r7, #98	@ 0x62
 80044fa:	d80a      	bhi.n	8004512 <_printf_i+0x32>
 80044fc:	2f00      	cmp	r7, #0
 80044fe:	f000 80d3 	beq.w	80046a8 <_printf_i+0x1c8>
 8004502:	2f58      	cmp	r7, #88	@ 0x58
 8004504:	f000 80ba 	beq.w	800467c <_printf_i+0x19c>
 8004508:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800450c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004510:	e03a      	b.n	8004588 <_printf_i+0xa8>
 8004512:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004516:	2b15      	cmp	r3, #21
 8004518:	d8f6      	bhi.n	8004508 <_printf_i+0x28>
 800451a:	a101      	add	r1, pc, #4	@ (adr r1, 8004520 <_printf_i+0x40>)
 800451c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004520:	08004579 	.word	0x08004579
 8004524:	0800458d 	.word	0x0800458d
 8004528:	08004509 	.word	0x08004509
 800452c:	08004509 	.word	0x08004509
 8004530:	08004509 	.word	0x08004509
 8004534:	08004509 	.word	0x08004509
 8004538:	0800458d 	.word	0x0800458d
 800453c:	08004509 	.word	0x08004509
 8004540:	08004509 	.word	0x08004509
 8004544:	08004509 	.word	0x08004509
 8004548:	08004509 	.word	0x08004509
 800454c:	0800468f 	.word	0x0800468f
 8004550:	080045b7 	.word	0x080045b7
 8004554:	08004649 	.word	0x08004649
 8004558:	08004509 	.word	0x08004509
 800455c:	08004509 	.word	0x08004509
 8004560:	080046b1 	.word	0x080046b1
 8004564:	08004509 	.word	0x08004509
 8004568:	080045b7 	.word	0x080045b7
 800456c:	08004509 	.word	0x08004509
 8004570:	08004509 	.word	0x08004509
 8004574:	08004651 	.word	0x08004651
 8004578:	6833      	ldr	r3, [r6, #0]
 800457a:	1d1a      	adds	r2, r3, #4
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	6032      	str	r2, [r6, #0]
 8004580:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004584:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004588:	2301      	movs	r3, #1
 800458a:	e09e      	b.n	80046ca <_printf_i+0x1ea>
 800458c:	6833      	ldr	r3, [r6, #0]
 800458e:	6820      	ldr	r0, [r4, #0]
 8004590:	1d19      	adds	r1, r3, #4
 8004592:	6031      	str	r1, [r6, #0]
 8004594:	0606      	lsls	r6, r0, #24
 8004596:	d501      	bpl.n	800459c <_printf_i+0xbc>
 8004598:	681d      	ldr	r5, [r3, #0]
 800459a:	e003      	b.n	80045a4 <_printf_i+0xc4>
 800459c:	0645      	lsls	r5, r0, #25
 800459e:	d5fb      	bpl.n	8004598 <_printf_i+0xb8>
 80045a0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80045a4:	2d00      	cmp	r5, #0
 80045a6:	da03      	bge.n	80045b0 <_printf_i+0xd0>
 80045a8:	232d      	movs	r3, #45	@ 0x2d
 80045aa:	426d      	negs	r5, r5
 80045ac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80045b0:	230a      	movs	r3, #10
 80045b2:	4859      	ldr	r0, [pc, #356]	@ (8004718 <_printf_i+0x238>)
 80045b4:	e011      	b.n	80045da <_printf_i+0xfa>
 80045b6:	6821      	ldr	r1, [r4, #0]
 80045b8:	6833      	ldr	r3, [r6, #0]
 80045ba:	0608      	lsls	r0, r1, #24
 80045bc:	f853 5b04 	ldr.w	r5, [r3], #4
 80045c0:	d402      	bmi.n	80045c8 <_printf_i+0xe8>
 80045c2:	0649      	lsls	r1, r1, #25
 80045c4:	bf48      	it	mi
 80045c6:	b2ad      	uxthmi	r5, r5
 80045c8:	2f6f      	cmp	r7, #111	@ 0x6f
 80045ca:	6033      	str	r3, [r6, #0]
 80045cc:	bf14      	ite	ne
 80045ce:	230a      	movne	r3, #10
 80045d0:	2308      	moveq	r3, #8
 80045d2:	4851      	ldr	r0, [pc, #324]	@ (8004718 <_printf_i+0x238>)
 80045d4:	2100      	movs	r1, #0
 80045d6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80045da:	6866      	ldr	r6, [r4, #4]
 80045dc:	2e00      	cmp	r6, #0
 80045de:	bfa8      	it	ge
 80045e0:	6821      	ldrge	r1, [r4, #0]
 80045e2:	60a6      	str	r6, [r4, #8]
 80045e4:	bfa4      	itt	ge
 80045e6:	f021 0104 	bicge.w	r1, r1, #4
 80045ea:	6021      	strge	r1, [r4, #0]
 80045ec:	b90d      	cbnz	r5, 80045f2 <_printf_i+0x112>
 80045ee:	2e00      	cmp	r6, #0
 80045f0:	d04b      	beq.n	800468a <_printf_i+0x1aa>
 80045f2:	4616      	mov	r6, r2
 80045f4:	fbb5 f1f3 	udiv	r1, r5, r3
 80045f8:	fb03 5711 	mls	r7, r3, r1, r5
 80045fc:	5dc7      	ldrb	r7, [r0, r7]
 80045fe:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004602:	462f      	mov	r7, r5
 8004604:	42bb      	cmp	r3, r7
 8004606:	460d      	mov	r5, r1
 8004608:	d9f4      	bls.n	80045f4 <_printf_i+0x114>
 800460a:	2b08      	cmp	r3, #8
 800460c:	d10b      	bne.n	8004626 <_printf_i+0x146>
 800460e:	6823      	ldr	r3, [r4, #0]
 8004610:	07df      	lsls	r7, r3, #31
 8004612:	d508      	bpl.n	8004626 <_printf_i+0x146>
 8004614:	6923      	ldr	r3, [r4, #16]
 8004616:	6861      	ldr	r1, [r4, #4]
 8004618:	4299      	cmp	r1, r3
 800461a:	bfde      	ittt	le
 800461c:	2330      	movle	r3, #48	@ 0x30
 800461e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004622:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004626:	1b92      	subs	r2, r2, r6
 8004628:	6122      	str	r2, [r4, #16]
 800462a:	464b      	mov	r3, r9
 800462c:	4621      	mov	r1, r4
 800462e:	4640      	mov	r0, r8
 8004630:	f8cd a000 	str.w	sl, [sp]
 8004634:	aa03      	add	r2, sp, #12
 8004636:	f7ff fee1 	bl	80043fc <_printf_common>
 800463a:	3001      	adds	r0, #1
 800463c:	d14a      	bne.n	80046d4 <_printf_i+0x1f4>
 800463e:	f04f 30ff 	mov.w	r0, #4294967295
 8004642:	b004      	add	sp, #16
 8004644:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004648:	6823      	ldr	r3, [r4, #0]
 800464a:	f043 0320 	orr.w	r3, r3, #32
 800464e:	6023      	str	r3, [r4, #0]
 8004650:	2778      	movs	r7, #120	@ 0x78
 8004652:	4832      	ldr	r0, [pc, #200]	@ (800471c <_printf_i+0x23c>)
 8004654:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004658:	6823      	ldr	r3, [r4, #0]
 800465a:	6831      	ldr	r1, [r6, #0]
 800465c:	061f      	lsls	r7, r3, #24
 800465e:	f851 5b04 	ldr.w	r5, [r1], #4
 8004662:	d402      	bmi.n	800466a <_printf_i+0x18a>
 8004664:	065f      	lsls	r7, r3, #25
 8004666:	bf48      	it	mi
 8004668:	b2ad      	uxthmi	r5, r5
 800466a:	6031      	str	r1, [r6, #0]
 800466c:	07d9      	lsls	r1, r3, #31
 800466e:	bf44      	itt	mi
 8004670:	f043 0320 	orrmi.w	r3, r3, #32
 8004674:	6023      	strmi	r3, [r4, #0]
 8004676:	b11d      	cbz	r5, 8004680 <_printf_i+0x1a0>
 8004678:	2310      	movs	r3, #16
 800467a:	e7ab      	b.n	80045d4 <_printf_i+0xf4>
 800467c:	4826      	ldr	r0, [pc, #152]	@ (8004718 <_printf_i+0x238>)
 800467e:	e7e9      	b.n	8004654 <_printf_i+0x174>
 8004680:	6823      	ldr	r3, [r4, #0]
 8004682:	f023 0320 	bic.w	r3, r3, #32
 8004686:	6023      	str	r3, [r4, #0]
 8004688:	e7f6      	b.n	8004678 <_printf_i+0x198>
 800468a:	4616      	mov	r6, r2
 800468c:	e7bd      	b.n	800460a <_printf_i+0x12a>
 800468e:	6833      	ldr	r3, [r6, #0]
 8004690:	6825      	ldr	r5, [r4, #0]
 8004692:	1d18      	adds	r0, r3, #4
 8004694:	6961      	ldr	r1, [r4, #20]
 8004696:	6030      	str	r0, [r6, #0]
 8004698:	062e      	lsls	r6, r5, #24
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	d501      	bpl.n	80046a2 <_printf_i+0x1c2>
 800469e:	6019      	str	r1, [r3, #0]
 80046a0:	e002      	b.n	80046a8 <_printf_i+0x1c8>
 80046a2:	0668      	lsls	r0, r5, #25
 80046a4:	d5fb      	bpl.n	800469e <_printf_i+0x1be>
 80046a6:	8019      	strh	r1, [r3, #0]
 80046a8:	2300      	movs	r3, #0
 80046aa:	4616      	mov	r6, r2
 80046ac:	6123      	str	r3, [r4, #16]
 80046ae:	e7bc      	b.n	800462a <_printf_i+0x14a>
 80046b0:	6833      	ldr	r3, [r6, #0]
 80046b2:	2100      	movs	r1, #0
 80046b4:	1d1a      	adds	r2, r3, #4
 80046b6:	6032      	str	r2, [r6, #0]
 80046b8:	681e      	ldr	r6, [r3, #0]
 80046ba:	6862      	ldr	r2, [r4, #4]
 80046bc:	4630      	mov	r0, r6
 80046be:	f000 f99f 	bl	8004a00 <memchr>
 80046c2:	b108      	cbz	r0, 80046c8 <_printf_i+0x1e8>
 80046c4:	1b80      	subs	r0, r0, r6
 80046c6:	6060      	str	r0, [r4, #4]
 80046c8:	6863      	ldr	r3, [r4, #4]
 80046ca:	6123      	str	r3, [r4, #16]
 80046cc:	2300      	movs	r3, #0
 80046ce:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80046d2:	e7aa      	b.n	800462a <_printf_i+0x14a>
 80046d4:	4632      	mov	r2, r6
 80046d6:	4649      	mov	r1, r9
 80046d8:	4640      	mov	r0, r8
 80046da:	6923      	ldr	r3, [r4, #16]
 80046dc:	47d0      	blx	sl
 80046de:	3001      	adds	r0, #1
 80046e0:	d0ad      	beq.n	800463e <_printf_i+0x15e>
 80046e2:	6823      	ldr	r3, [r4, #0]
 80046e4:	079b      	lsls	r3, r3, #30
 80046e6:	d413      	bmi.n	8004710 <_printf_i+0x230>
 80046e8:	68e0      	ldr	r0, [r4, #12]
 80046ea:	9b03      	ldr	r3, [sp, #12]
 80046ec:	4298      	cmp	r0, r3
 80046ee:	bfb8      	it	lt
 80046f0:	4618      	movlt	r0, r3
 80046f2:	e7a6      	b.n	8004642 <_printf_i+0x162>
 80046f4:	2301      	movs	r3, #1
 80046f6:	4632      	mov	r2, r6
 80046f8:	4649      	mov	r1, r9
 80046fa:	4640      	mov	r0, r8
 80046fc:	47d0      	blx	sl
 80046fe:	3001      	adds	r0, #1
 8004700:	d09d      	beq.n	800463e <_printf_i+0x15e>
 8004702:	3501      	adds	r5, #1
 8004704:	68e3      	ldr	r3, [r4, #12]
 8004706:	9903      	ldr	r1, [sp, #12]
 8004708:	1a5b      	subs	r3, r3, r1
 800470a:	42ab      	cmp	r3, r5
 800470c:	dcf2      	bgt.n	80046f4 <_printf_i+0x214>
 800470e:	e7eb      	b.n	80046e8 <_printf_i+0x208>
 8004710:	2500      	movs	r5, #0
 8004712:	f104 0619 	add.w	r6, r4, #25
 8004716:	e7f5      	b.n	8004704 <_printf_i+0x224>
 8004718:	08004b03 	.word	0x08004b03
 800471c:	08004b14 	.word	0x08004b14

08004720 <__sflush_r>:
 8004720:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004726:	0716      	lsls	r6, r2, #28
 8004728:	4605      	mov	r5, r0
 800472a:	460c      	mov	r4, r1
 800472c:	d454      	bmi.n	80047d8 <__sflush_r+0xb8>
 800472e:	684b      	ldr	r3, [r1, #4]
 8004730:	2b00      	cmp	r3, #0
 8004732:	dc02      	bgt.n	800473a <__sflush_r+0x1a>
 8004734:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004736:	2b00      	cmp	r3, #0
 8004738:	dd48      	ble.n	80047cc <__sflush_r+0xac>
 800473a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800473c:	2e00      	cmp	r6, #0
 800473e:	d045      	beq.n	80047cc <__sflush_r+0xac>
 8004740:	2300      	movs	r3, #0
 8004742:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004746:	682f      	ldr	r7, [r5, #0]
 8004748:	6a21      	ldr	r1, [r4, #32]
 800474a:	602b      	str	r3, [r5, #0]
 800474c:	d030      	beq.n	80047b0 <__sflush_r+0x90>
 800474e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004750:	89a3      	ldrh	r3, [r4, #12]
 8004752:	0759      	lsls	r1, r3, #29
 8004754:	d505      	bpl.n	8004762 <__sflush_r+0x42>
 8004756:	6863      	ldr	r3, [r4, #4]
 8004758:	1ad2      	subs	r2, r2, r3
 800475a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800475c:	b10b      	cbz	r3, 8004762 <__sflush_r+0x42>
 800475e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004760:	1ad2      	subs	r2, r2, r3
 8004762:	2300      	movs	r3, #0
 8004764:	4628      	mov	r0, r5
 8004766:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004768:	6a21      	ldr	r1, [r4, #32]
 800476a:	47b0      	blx	r6
 800476c:	1c43      	adds	r3, r0, #1
 800476e:	89a3      	ldrh	r3, [r4, #12]
 8004770:	d106      	bne.n	8004780 <__sflush_r+0x60>
 8004772:	6829      	ldr	r1, [r5, #0]
 8004774:	291d      	cmp	r1, #29
 8004776:	d82b      	bhi.n	80047d0 <__sflush_r+0xb0>
 8004778:	4a28      	ldr	r2, [pc, #160]	@ (800481c <__sflush_r+0xfc>)
 800477a:	410a      	asrs	r2, r1
 800477c:	07d6      	lsls	r6, r2, #31
 800477e:	d427      	bmi.n	80047d0 <__sflush_r+0xb0>
 8004780:	2200      	movs	r2, #0
 8004782:	6062      	str	r2, [r4, #4]
 8004784:	6922      	ldr	r2, [r4, #16]
 8004786:	04d9      	lsls	r1, r3, #19
 8004788:	6022      	str	r2, [r4, #0]
 800478a:	d504      	bpl.n	8004796 <__sflush_r+0x76>
 800478c:	1c42      	adds	r2, r0, #1
 800478e:	d101      	bne.n	8004794 <__sflush_r+0x74>
 8004790:	682b      	ldr	r3, [r5, #0]
 8004792:	b903      	cbnz	r3, 8004796 <__sflush_r+0x76>
 8004794:	6560      	str	r0, [r4, #84]	@ 0x54
 8004796:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004798:	602f      	str	r7, [r5, #0]
 800479a:	b1b9      	cbz	r1, 80047cc <__sflush_r+0xac>
 800479c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80047a0:	4299      	cmp	r1, r3
 80047a2:	d002      	beq.n	80047aa <__sflush_r+0x8a>
 80047a4:	4628      	mov	r0, r5
 80047a6:	f7ff fbf3 	bl	8003f90 <_free_r>
 80047aa:	2300      	movs	r3, #0
 80047ac:	6363      	str	r3, [r4, #52]	@ 0x34
 80047ae:	e00d      	b.n	80047cc <__sflush_r+0xac>
 80047b0:	2301      	movs	r3, #1
 80047b2:	4628      	mov	r0, r5
 80047b4:	47b0      	blx	r6
 80047b6:	4602      	mov	r2, r0
 80047b8:	1c50      	adds	r0, r2, #1
 80047ba:	d1c9      	bne.n	8004750 <__sflush_r+0x30>
 80047bc:	682b      	ldr	r3, [r5, #0]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d0c6      	beq.n	8004750 <__sflush_r+0x30>
 80047c2:	2b1d      	cmp	r3, #29
 80047c4:	d001      	beq.n	80047ca <__sflush_r+0xaa>
 80047c6:	2b16      	cmp	r3, #22
 80047c8:	d11d      	bne.n	8004806 <__sflush_r+0xe6>
 80047ca:	602f      	str	r7, [r5, #0]
 80047cc:	2000      	movs	r0, #0
 80047ce:	e021      	b.n	8004814 <__sflush_r+0xf4>
 80047d0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80047d4:	b21b      	sxth	r3, r3
 80047d6:	e01a      	b.n	800480e <__sflush_r+0xee>
 80047d8:	690f      	ldr	r7, [r1, #16]
 80047da:	2f00      	cmp	r7, #0
 80047dc:	d0f6      	beq.n	80047cc <__sflush_r+0xac>
 80047de:	0793      	lsls	r3, r2, #30
 80047e0:	bf18      	it	ne
 80047e2:	2300      	movne	r3, #0
 80047e4:	680e      	ldr	r6, [r1, #0]
 80047e6:	bf08      	it	eq
 80047e8:	694b      	ldreq	r3, [r1, #20]
 80047ea:	1bf6      	subs	r6, r6, r7
 80047ec:	600f      	str	r7, [r1, #0]
 80047ee:	608b      	str	r3, [r1, #8]
 80047f0:	2e00      	cmp	r6, #0
 80047f2:	ddeb      	ble.n	80047cc <__sflush_r+0xac>
 80047f4:	4633      	mov	r3, r6
 80047f6:	463a      	mov	r2, r7
 80047f8:	4628      	mov	r0, r5
 80047fa:	6a21      	ldr	r1, [r4, #32]
 80047fc:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8004800:	47e0      	blx	ip
 8004802:	2800      	cmp	r0, #0
 8004804:	dc07      	bgt.n	8004816 <__sflush_r+0xf6>
 8004806:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800480a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800480e:	f04f 30ff 	mov.w	r0, #4294967295
 8004812:	81a3      	strh	r3, [r4, #12]
 8004814:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004816:	4407      	add	r7, r0
 8004818:	1a36      	subs	r6, r6, r0
 800481a:	e7e9      	b.n	80047f0 <__sflush_r+0xd0>
 800481c:	dfbffffe 	.word	0xdfbffffe

08004820 <_fflush_r>:
 8004820:	b538      	push	{r3, r4, r5, lr}
 8004822:	690b      	ldr	r3, [r1, #16]
 8004824:	4605      	mov	r5, r0
 8004826:	460c      	mov	r4, r1
 8004828:	b913      	cbnz	r3, 8004830 <_fflush_r+0x10>
 800482a:	2500      	movs	r5, #0
 800482c:	4628      	mov	r0, r5
 800482e:	bd38      	pop	{r3, r4, r5, pc}
 8004830:	b118      	cbz	r0, 800483a <_fflush_r+0x1a>
 8004832:	6a03      	ldr	r3, [r0, #32]
 8004834:	b90b      	cbnz	r3, 800483a <_fflush_r+0x1a>
 8004836:	f7ff f9a9 	bl	8003b8c <__sinit>
 800483a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d0f3      	beq.n	800482a <_fflush_r+0xa>
 8004842:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004844:	07d0      	lsls	r0, r2, #31
 8004846:	d404      	bmi.n	8004852 <_fflush_r+0x32>
 8004848:	0599      	lsls	r1, r3, #22
 800484a:	d402      	bmi.n	8004852 <_fflush_r+0x32>
 800484c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800484e:	f7ff fb9c 	bl	8003f8a <__retarget_lock_acquire_recursive>
 8004852:	4628      	mov	r0, r5
 8004854:	4621      	mov	r1, r4
 8004856:	f7ff ff63 	bl	8004720 <__sflush_r>
 800485a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800485c:	4605      	mov	r5, r0
 800485e:	07da      	lsls	r2, r3, #31
 8004860:	d4e4      	bmi.n	800482c <_fflush_r+0xc>
 8004862:	89a3      	ldrh	r3, [r4, #12]
 8004864:	059b      	lsls	r3, r3, #22
 8004866:	d4e1      	bmi.n	800482c <_fflush_r+0xc>
 8004868:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800486a:	f7ff fb8f 	bl	8003f8c <__retarget_lock_release_recursive>
 800486e:	e7dd      	b.n	800482c <_fflush_r+0xc>

08004870 <__swhatbuf_r>:
 8004870:	b570      	push	{r4, r5, r6, lr}
 8004872:	460c      	mov	r4, r1
 8004874:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004878:	4615      	mov	r5, r2
 800487a:	2900      	cmp	r1, #0
 800487c:	461e      	mov	r6, r3
 800487e:	b096      	sub	sp, #88	@ 0x58
 8004880:	da0c      	bge.n	800489c <__swhatbuf_r+0x2c>
 8004882:	89a3      	ldrh	r3, [r4, #12]
 8004884:	2100      	movs	r1, #0
 8004886:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800488a:	bf14      	ite	ne
 800488c:	2340      	movne	r3, #64	@ 0x40
 800488e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004892:	2000      	movs	r0, #0
 8004894:	6031      	str	r1, [r6, #0]
 8004896:	602b      	str	r3, [r5, #0]
 8004898:	b016      	add	sp, #88	@ 0x58
 800489a:	bd70      	pop	{r4, r5, r6, pc}
 800489c:	466a      	mov	r2, sp
 800489e:	f000 f87d 	bl	800499c <_fstat_r>
 80048a2:	2800      	cmp	r0, #0
 80048a4:	dbed      	blt.n	8004882 <__swhatbuf_r+0x12>
 80048a6:	9901      	ldr	r1, [sp, #4]
 80048a8:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80048ac:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80048b0:	4259      	negs	r1, r3
 80048b2:	4159      	adcs	r1, r3
 80048b4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80048b8:	e7eb      	b.n	8004892 <__swhatbuf_r+0x22>

080048ba <__smakebuf_r>:
 80048ba:	898b      	ldrh	r3, [r1, #12]
 80048bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80048be:	079d      	lsls	r5, r3, #30
 80048c0:	4606      	mov	r6, r0
 80048c2:	460c      	mov	r4, r1
 80048c4:	d507      	bpl.n	80048d6 <__smakebuf_r+0x1c>
 80048c6:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80048ca:	6023      	str	r3, [r4, #0]
 80048cc:	6123      	str	r3, [r4, #16]
 80048ce:	2301      	movs	r3, #1
 80048d0:	6163      	str	r3, [r4, #20]
 80048d2:	b003      	add	sp, #12
 80048d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80048d6:	466a      	mov	r2, sp
 80048d8:	ab01      	add	r3, sp, #4
 80048da:	f7ff ffc9 	bl	8004870 <__swhatbuf_r>
 80048de:	9f00      	ldr	r7, [sp, #0]
 80048e0:	4605      	mov	r5, r0
 80048e2:	4639      	mov	r1, r7
 80048e4:	4630      	mov	r0, r6
 80048e6:	f7ff fbbd 	bl	8004064 <_malloc_r>
 80048ea:	b948      	cbnz	r0, 8004900 <__smakebuf_r+0x46>
 80048ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80048f0:	059a      	lsls	r2, r3, #22
 80048f2:	d4ee      	bmi.n	80048d2 <__smakebuf_r+0x18>
 80048f4:	f023 0303 	bic.w	r3, r3, #3
 80048f8:	f043 0302 	orr.w	r3, r3, #2
 80048fc:	81a3      	strh	r3, [r4, #12]
 80048fe:	e7e2      	b.n	80048c6 <__smakebuf_r+0xc>
 8004900:	89a3      	ldrh	r3, [r4, #12]
 8004902:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8004906:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800490a:	81a3      	strh	r3, [r4, #12]
 800490c:	9b01      	ldr	r3, [sp, #4]
 800490e:	6020      	str	r0, [r4, #0]
 8004910:	b15b      	cbz	r3, 800492a <__smakebuf_r+0x70>
 8004912:	4630      	mov	r0, r6
 8004914:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004918:	f000 f852 	bl	80049c0 <_isatty_r>
 800491c:	b128      	cbz	r0, 800492a <__smakebuf_r+0x70>
 800491e:	89a3      	ldrh	r3, [r4, #12]
 8004920:	f023 0303 	bic.w	r3, r3, #3
 8004924:	f043 0301 	orr.w	r3, r3, #1
 8004928:	81a3      	strh	r3, [r4, #12]
 800492a:	89a3      	ldrh	r3, [r4, #12]
 800492c:	431d      	orrs	r5, r3
 800492e:	81a5      	strh	r5, [r4, #12]
 8004930:	e7cf      	b.n	80048d2 <__smakebuf_r+0x18>

08004932 <_putc_r>:
 8004932:	b570      	push	{r4, r5, r6, lr}
 8004934:	460d      	mov	r5, r1
 8004936:	4614      	mov	r4, r2
 8004938:	4606      	mov	r6, r0
 800493a:	b118      	cbz	r0, 8004944 <_putc_r+0x12>
 800493c:	6a03      	ldr	r3, [r0, #32]
 800493e:	b90b      	cbnz	r3, 8004944 <_putc_r+0x12>
 8004940:	f7ff f924 	bl	8003b8c <__sinit>
 8004944:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004946:	07d8      	lsls	r0, r3, #31
 8004948:	d405      	bmi.n	8004956 <_putc_r+0x24>
 800494a:	89a3      	ldrh	r3, [r4, #12]
 800494c:	0599      	lsls	r1, r3, #22
 800494e:	d402      	bmi.n	8004956 <_putc_r+0x24>
 8004950:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004952:	f7ff fb1a 	bl	8003f8a <__retarget_lock_acquire_recursive>
 8004956:	68a3      	ldr	r3, [r4, #8]
 8004958:	3b01      	subs	r3, #1
 800495a:	2b00      	cmp	r3, #0
 800495c:	60a3      	str	r3, [r4, #8]
 800495e:	da05      	bge.n	800496c <_putc_r+0x3a>
 8004960:	69a2      	ldr	r2, [r4, #24]
 8004962:	4293      	cmp	r3, r2
 8004964:	db12      	blt.n	800498c <_putc_r+0x5a>
 8004966:	b2eb      	uxtb	r3, r5
 8004968:	2b0a      	cmp	r3, #10
 800496a:	d00f      	beq.n	800498c <_putc_r+0x5a>
 800496c:	6823      	ldr	r3, [r4, #0]
 800496e:	1c5a      	adds	r2, r3, #1
 8004970:	6022      	str	r2, [r4, #0]
 8004972:	701d      	strb	r5, [r3, #0]
 8004974:	b2ed      	uxtb	r5, r5
 8004976:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004978:	07da      	lsls	r2, r3, #31
 800497a:	d405      	bmi.n	8004988 <_putc_r+0x56>
 800497c:	89a3      	ldrh	r3, [r4, #12]
 800497e:	059b      	lsls	r3, r3, #22
 8004980:	d402      	bmi.n	8004988 <_putc_r+0x56>
 8004982:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004984:	f7ff fb02 	bl	8003f8c <__retarget_lock_release_recursive>
 8004988:	4628      	mov	r0, r5
 800498a:	bd70      	pop	{r4, r5, r6, pc}
 800498c:	4629      	mov	r1, r5
 800498e:	4622      	mov	r2, r4
 8004990:	4630      	mov	r0, r6
 8004992:	f7ff f9ec 	bl	8003d6e <__swbuf_r>
 8004996:	4605      	mov	r5, r0
 8004998:	e7ed      	b.n	8004976 <_putc_r+0x44>
	...

0800499c <_fstat_r>:
 800499c:	b538      	push	{r3, r4, r5, lr}
 800499e:	2300      	movs	r3, #0
 80049a0:	4d06      	ldr	r5, [pc, #24]	@ (80049bc <_fstat_r+0x20>)
 80049a2:	4604      	mov	r4, r0
 80049a4:	4608      	mov	r0, r1
 80049a6:	4611      	mov	r1, r2
 80049a8:	602b      	str	r3, [r5, #0]
 80049aa:	f7fc f88b 	bl	8000ac4 <_fstat>
 80049ae:	1c43      	adds	r3, r0, #1
 80049b0:	d102      	bne.n	80049b8 <_fstat_r+0x1c>
 80049b2:	682b      	ldr	r3, [r5, #0]
 80049b4:	b103      	cbz	r3, 80049b8 <_fstat_r+0x1c>
 80049b6:	6023      	str	r3, [r4, #0]
 80049b8:	bd38      	pop	{r3, r4, r5, pc}
 80049ba:	bf00      	nop
 80049bc:	200003f0 	.word	0x200003f0

080049c0 <_isatty_r>:
 80049c0:	b538      	push	{r3, r4, r5, lr}
 80049c2:	2300      	movs	r3, #0
 80049c4:	4d05      	ldr	r5, [pc, #20]	@ (80049dc <_isatty_r+0x1c>)
 80049c6:	4604      	mov	r4, r0
 80049c8:	4608      	mov	r0, r1
 80049ca:	602b      	str	r3, [r5, #0]
 80049cc:	f7fc f889 	bl	8000ae2 <_isatty>
 80049d0:	1c43      	adds	r3, r0, #1
 80049d2:	d102      	bne.n	80049da <_isatty_r+0x1a>
 80049d4:	682b      	ldr	r3, [r5, #0]
 80049d6:	b103      	cbz	r3, 80049da <_isatty_r+0x1a>
 80049d8:	6023      	str	r3, [r4, #0]
 80049da:	bd38      	pop	{r3, r4, r5, pc}
 80049dc:	200003f0 	.word	0x200003f0

080049e0 <_sbrk_r>:
 80049e0:	b538      	push	{r3, r4, r5, lr}
 80049e2:	2300      	movs	r3, #0
 80049e4:	4d05      	ldr	r5, [pc, #20]	@ (80049fc <_sbrk_r+0x1c>)
 80049e6:	4604      	mov	r4, r0
 80049e8:	4608      	mov	r0, r1
 80049ea:	602b      	str	r3, [r5, #0]
 80049ec:	f7fc f890 	bl	8000b10 <_sbrk>
 80049f0:	1c43      	adds	r3, r0, #1
 80049f2:	d102      	bne.n	80049fa <_sbrk_r+0x1a>
 80049f4:	682b      	ldr	r3, [r5, #0]
 80049f6:	b103      	cbz	r3, 80049fa <_sbrk_r+0x1a>
 80049f8:	6023      	str	r3, [r4, #0]
 80049fa:	bd38      	pop	{r3, r4, r5, pc}
 80049fc:	200003f0 	.word	0x200003f0

08004a00 <memchr>:
 8004a00:	4603      	mov	r3, r0
 8004a02:	b510      	push	{r4, lr}
 8004a04:	b2c9      	uxtb	r1, r1
 8004a06:	4402      	add	r2, r0
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	d101      	bne.n	8004a12 <memchr+0x12>
 8004a0e:	2000      	movs	r0, #0
 8004a10:	e003      	b.n	8004a1a <memchr+0x1a>
 8004a12:	7804      	ldrb	r4, [r0, #0]
 8004a14:	3301      	adds	r3, #1
 8004a16:	428c      	cmp	r4, r1
 8004a18:	d1f6      	bne.n	8004a08 <memchr+0x8>
 8004a1a:	bd10      	pop	{r4, pc}

08004a1c <_init>:
 8004a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a1e:	bf00      	nop
 8004a20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a22:	bc08      	pop	{r3}
 8004a24:	469e      	mov	lr, r3
 8004a26:	4770      	bx	lr

08004a28 <_fini>:
 8004a28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a2a:	bf00      	nop
 8004a2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a2e:	bc08      	pop	{r3}
 8004a30:	469e      	mov	lr, r3
 8004a32:	4770      	bx	lr
