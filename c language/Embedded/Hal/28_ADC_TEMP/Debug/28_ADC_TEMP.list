
28_ADC_TEMP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a380  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d70  0800a490  0800a490  0000b490  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b200  0800b200  0000d1d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800b200  0800b200  0000c200  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b208  0800b208  0000d1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b208  0800b208  0000c208  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b20c  0800b20c  0000c20c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800b210  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000039c  200001d4  0800b3e4  0000d1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000570  0800b3e4  0000d570  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000d1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f1dd  00000000  00000000  0000d1fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000319e  00000000  00000000  0001c3da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f08  00000000  00000000  0001f578  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b7f  00000000  00000000  00020480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a7c3  00000000  00000000  00020fff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000162ff  00000000  00000000  0003b7c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008dc35  00000000  00000000  00051ac1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000df6f6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000519c  00000000  00000000  000df73c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004a  00000000  00000000  000e48d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d4 	.word	0x200001d4
 800012c:	00000000 	.word	0x00000000
 8000130:	0800a478 	.word	0x0800a478

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001d8 	.word	0x200001d8
 800014c:	0800a478 	.word	0x0800a478

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_d2lz>:
 8000b68:	b538      	push	{r3, r4, r5, lr}
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	4604      	mov	r4, r0
 8000b70:	460d      	mov	r5, r1
 8000b72:	f7ff ff23 	bl	80009bc <__aeabi_dcmplt>
 8000b76:	b928      	cbnz	r0, 8000b84 <__aeabi_d2lz+0x1c>
 8000b78:	4620      	mov	r0, r4
 8000b7a:	4629      	mov	r1, r5
 8000b7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000b80:	f000 b80a 	b.w	8000b98 <__aeabi_d2ulz>
 8000b84:	4620      	mov	r0, r4
 8000b86:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000b8a:	f000 f805 	bl	8000b98 <__aeabi_d2ulz>
 8000b8e:	4240      	negs	r0, r0
 8000b90:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b94:	bd38      	pop	{r3, r4, r5, pc}
 8000b96:	bf00      	nop

08000b98 <__aeabi_d2ulz>:
 8000b98:	b5d0      	push	{r4, r6, r7, lr}
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	4b0b      	ldr	r3, [pc, #44]	@ (8000bcc <__aeabi_d2ulz+0x34>)
 8000b9e:	4606      	mov	r6, r0
 8000ba0:	460f      	mov	r7, r1
 8000ba2:	f7ff fc99 	bl	80004d8 <__aeabi_dmul>
 8000ba6:	f7ff ff6f 	bl	8000a88 <__aeabi_d2uiz>
 8000baa:	4604      	mov	r4, r0
 8000bac:	f7ff fc1a 	bl	80003e4 <__aeabi_ui2d>
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	4b07      	ldr	r3, [pc, #28]	@ (8000bd0 <__aeabi_d2ulz+0x38>)
 8000bb4:	f7ff fc90 	bl	80004d8 <__aeabi_dmul>
 8000bb8:	4602      	mov	r2, r0
 8000bba:	460b      	mov	r3, r1
 8000bbc:	4630      	mov	r0, r6
 8000bbe:	4639      	mov	r1, r7
 8000bc0:	f7ff fad2 	bl	8000168 <__aeabi_dsub>
 8000bc4:	f7ff ff60 	bl	8000a88 <__aeabi_d2uiz>
 8000bc8:	4621      	mov	r1, r4
 8000bca:	bdd0      	pop	{r4, r6, r7, pc}
 8000bcc:	3df00000 	.word	0x3df00000
 8000bd0:	41f00000 	.word	0x41f00000

08000bd4 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b084      	sub	sp, #16
 8000bd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000bda:	1d3b      	adds	r3, r7, #4
 8000bdc:	2200      	movs	r2, #0
 8000bde:	601a      	str	r2, [r3, #0]
 8000be0:	605a      	str	r2, [r3, #4]
 8000be2:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000be4:	4b18      	ldr	r3, [pc, #96]	@ (8000c48 <MX_ADC1_Init+0x74>)
 8000be6:	4a19      	ldr	r2, [pc, #100]	@ (8000c4c <MX_ADC1_Init+0x78>)
 8000be8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000bea:	4b17      	ldr	r3, [pc, #92]	@ (8000c48 <MX_ADC1_Init+0x74>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000bf0:	4b15      	ldr	r3, [pc, #84]	@ (8000c48 <MX_ADC1_Init+0x74>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000bf6:	4b14      	ldr	r3, [pc, #80]	@ (8000c48 <MX_ADC1_Init+0x74>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000bfc:	4b12      	ldr	r3, [pc, #72]	@ (8000c48 <MX_ADC1_Init+0x74>)
 8000bfe:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8000c02:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c04:	4b10      	ldr	r3, [pc, #64]	@ (8000c48 <MX_ADC1_Init+0x74>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000c0a:	4b0f      	ldr	r3, [pc, #60]	@ (8000c48 <MX_ADC1_Init+0x74>)
 8000c0c:	2201      	movs	r2, #1
 8000c0e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c10:	480d      	ldr	r0, [pc, #52]	@ (8000c48 <MX_ADC1_Init+0x74>)
 8000c12:	f001 f8b9 	bl	8001d88 <HAL_ADC_Init>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d001      	beq.n	8000c20 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000c1c:	f000 fada 	bl	80011d4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000c20:	2310      	movs	r3, #16
 8000c22:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c24:	2301      	movs	r3, #1
 8000c26:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8000c28:	2307      	movs	r3, #7
 8000c2a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c2c:	1d3b      	adds	r3, r7, #4
 8000c2e:	4619      	mov	r1, r3
 8000c30:	4805      	ldr	r0, [pc, #20]	@ (8000c48 <MX_ADC1_Init+0x74>)
 8000c32:	f001 fb41 	bl	80022b8 <HAL_ADC_ConfigChannel>
 8000c36:	4603      	mov	r3, r0
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d001      	beq.n	8000c40 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000c3c:	f000 faca 	bl	80011d4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c40:	bf00      	nop
 8000c42:	3710      	adds	r7, #16
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	200001f0 	.word	0x200001f0
 8000c4c:	40012400 	.word	0x40012400

08000c50 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000c50:	b480      	push	{r7}
 8000c52:	b085      	sub	sp, #20
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC1)
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	4a09      	ldr	r2, [pc, #36]	@ (8000c84 <HAL_ADC_MspInit+0x34>)
 8000c5e:	4293      	cmp	r3, r2
 8000c60:	d10b      	bne.n	8000c7a <HAL_ADC_MspInit+0x2a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000c62:	4b09      	ldr	r3, [pc, #36]	@ (8000c88 <HAL_ADC_MspInit+0x38>)
 8000c64:	699b      	ldr	r3, [r3, #24]
 8000c66:	4a08      	ldr	r2, [pc, #32]	@ (8000c88 <HAL_ADC_MspInit+0x38>)
 8000c68:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000c6c:	6193      	str	r3, [r2, #24]
 8000c6e:	4b06      	ldr	r3, [pc, #24]	@ (8000c88 <HAL_ADC_MspInit+0x38>)
 8000c70:	699b      	ldr	r3, [r3, #24]
 8000c72:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000c76:	60fb      	str	r3, [r7, #12]
 8000c78:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000c7a:	bf00      	nop
 8000c7c:	3714      	adds	r7, #20
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bc80      	pop	{r7}
 8000c82:	4770      	bx	lr
 8000c84:	40012400 	.word	0x40012400
 8000c88:	40021000 	.word	0x40021000
 8000c8c:	00000000 	.word	0x00000000

08000c90 <ADC_CPU_TEMP_Test>:
  }
}

/* USER CODE BEGIN 1 */
void ADC_CPU_TEMP_Test()
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b08c      	sub	sp, #48	@ 0x30
 8000c94:	af00      	add	r7, sp, #0
	uint8_t str[32] = {0};
 8000c96:	2300      	movs	r3, #0
 8000c98:	607b      	str	r3, [r7, #4]
 8000c9a:	f107 0308 	add.w	r3, r7, #8
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	601a      	str	r2, [r3, #0]
 8000ca2:	605a      	str	r2, [r3, #4]
 8000ca4:	609a      	str	r2, [r3, #8]
 8000ca6:	60da      	str	r2, [r3, #12]
 8000ca8:	611a      	str	r2, [r3, #16]
 8000caa:	615a      	str	r2, [r3, #20]
 8000cac:	619a      	str	r2, [r3, #24]
	uint32_t ADC_Value = 0;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	for (uint8_t i = 0; i < 10; i++)
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8000cb8:	e016      	b.n	8000ce8 <ADC_CPU_TEMP_Test+0x58>
	{
		HAL_ADC_Start(&hadc1);
 8000cba:	4845      	ldr	r0, [pc, #276]	@ (8000dd0 <ADC_CPU_TEMP_Test+0x140>)
 8000cbc:	f001 f93c 	bl	8001f38 <HAL_ADC_Start>
		if (HAL_ADC_PollForConversion(&hadc1, 1000) == HAL_OK)
 8000cc0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000cc4:	4842      	ldr	r0, [pc, #264]	@ (8000dd0 <ADC_CPU_TEMP_Test+0x140>)
 8000cc6:	f001 f9e5 	bl	8002094 <HAL_ADC_PollForConversion>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d106      	bne.n	8000cde <ADC_CPU_TEMP_Test+0x4e>
		{
			ADC_Value += HAL_ADC_GetValue(&hadc1);
 8000cd0:	483f      	ldr	r0, [pc, #252]	@ (8000dd0 <ADC_CPU_TEMP_Test+0x140>)
 8000cd2:	f001 fae5 	bl	80022a0 <HAL_ADC_GetValue>
 8000cd6:	4602      	mov	r2, r0
 8000cd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000cda:	4413      	add	r3, r2
 8000cdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
	for (uint8_t i = 0; i < 10; i++)
 8000cde:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8000ce2:	3301      	adds	r3, #1
 8000ce4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8000ce8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8000cec:	2b09      	cmp	r3, #9
 8000cee:	d9e4      	bls.n	8000cba <ADC_CPU_TEMP_Test+0x2a>
		}
	}
	ADC_Value = ADC_Value/10;
 8000cf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000cf2:	4a38      	ldr	r2, [pc, #224]	@ (8000dd4 <ADC_CPU_TEMP_Test+0x144>)
 8000cf4:	fba2 2303 	umull	r2, r3, r2, r3
 8000cf8:	08db      	lsrs	r3, r3, #3
 8000cfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
	float val = (1.43 - ADC_Value * 3.3 / 4095) / 0.0043 + 25;
 8000cfc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8000cfe:	f7ff fb71 	bl	80003e4 <__aeabi_ui2d>
 8000d02:	a32b      	add	r3, pc, #172	@ (adr r3, 8000db0 <ADC_CPU_TEMP_Test+0x120>)
 8000d04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d08:	f7ff fbe6 	bl	80004d8 <__aeabi_dmul>
 8000d0c:	4602      	mov	r2, r0
 8000d0e:	460b      	mov	r3, r1
 8000d10:	4610      	mov	r0, r2
 8000d12:	4619      	mov	r1, r3
 8000d14:	a328      	add	r3, pc, #160	@ (adr r3, 8000db8 <ADC_CPU_TEMP_Test+0x128>)
 8000d16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d1a:	f7ff fd07 	bl	800072c <__aeabi_ddiv>
 8000d1e:	4602      	mov	r2, r0
 8000d20:	460b      	mov	r3, r1
 8000d22:	a127      	add	r1, pc, #156	@ (adr r1, 8000dc0 <ADC_CPU_TEMP_Test+0x130>)
 8000d24:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000d28:	f7ff fa1e 	bl	8000168 <__aeabi_dsub>
 8000d2c:	4602      	mov	r2, r0
 8000d2e:	460b      	mov	r3, r1
 8000d30:	4610      	mov	r0, r2
 8000d32:	4619      	mov	r1, r3
 8000d34:	a324      	add	r3, pc, #144	@ (adr r3, 8000dc8 <ADC_CPU_TEMP_Test+0x138>)
 8000d36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d3a:	f7ff fcf7 	bl	800072c <__aeabi_ddiv>
 8000d3e:	4602      	mov	r2, r0
 8000d40:	460b      	mov	r3, r1
 8000d42:	4610      	mov	r0, r2
 8000d44:	4619      	mov	r1, r3
 8000d46:	f04f 0200 	mov.w	r2, #0
 8000d4a:	4b23      	ldr	r3, [pc, #140]	@ (8000dd8 <ADC_CPU_TEMP_Test+0x148>)
 8000d4c:	f7ff fa0e 	bl	800016c <__adddf3>
 8000d50:	4602      	mov	r2, r0
 8000d52:	460b      	mov	r3, r1
 8000d54:	4610      	mov	r0, r2
 8000d56:	4619      	mov	r1, r3
 8000d58:	f7ff feb6 	bl	8000ac8 <__aeabi_d2f>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	627b      	str	r3, [r7, #36]	@ 0x24
	printf("CPU : %.1f C\n", val);
 8000d60:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8000d62:	f7ff fb61 	bl	8000428 <__aeabi_f2d>
 8000d66:	4602      	mov	r2, r0
 8000d68:	460b      	mov	r3, r1
 8000d6a:	481c      	ldr	r0, [pc, #112]	@ (8000ddc <ADC_CPU_TEMP_Test+0x14c>)
 8000d6c:	f005 fea8 	bl	8006ac0 <iprintf>
	sprintf((char *) str, "CPU : %.1f C", val);
 8000d70:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8000d72:	f7ff fb59 	bl	8000428 <__aeabi_f2d>
 8000d76:	4602      	mov	r2, r0
 8000d78:	460b      	mov	r3, r1
 8000d7a:	1d38      	adds	r0, r7, #4
 8000d7c:	4918      	ldr	r1, [pc, #96]	@ (8000de0 <ADC_CPU_TEMP_Test+0x150>)
 8000d7e:	f005 ff17 	bl	8006bb0 <siprintf>
	OLED_CLS();
 8000d82:	f000 fb0c 	bl	800139e <OLED_CLS>
	OLED_ShowStr(0, 0, (unsigned char *) "TEMP TEST", 1);
 8000d86:	2301      	movs	r3, #1
 8000d88:	4a16      	ldr	r2, [pc, #88]	@ (8000de4 <ADC_CPU_TEMP_Test+0x154>)
 8000d8a:	2100      	movs	r1, #0
 8000d8c:	2000      	movs	r0, #0
 8000d8e:	f000 fb0d 	bl	80013ac <OLED_ShowStr>
	OLED_ShowStr(0, 1, (unsigned char *) str, 1);
 8000d92:	1d3a      	adds	r2, r7, #4
 8000d94:	2301      	movs	r3, #1
 8000d96:	2101      	movs	r1, #1
 8000d98:	2000      	movs	r0, #0
 8000d9a:	f000 fb07 	bl	80013ac <OLED_ShowStr>
	HAL_Delay(1000);
 8000d9e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000da2:	f000 ffcd 	bl	8001d40 <HAL_Delay>
}
 8000da6:	bf00      	nop
 8000da8:	3730      	adds	r7, #48	@ 0x30
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	66666666 	.word	0x66666666
 8000db4:	400a6666 	.word	0x400a6666
 8000db8:	00000000 	.word	0x00000000
 8000dbc:	40affe00 	.word	0x40affe00
 8000dc0:	ae147ae1 	.word	0xae147ae1
 8000dc4:	3ff6e147 	.word	0x3ff6e147
 8000dc8:	75f6fd22 	.word	0x75f6fd22
 8000dcc:	3f719ce0 	.word	0x3f719ce0
 8000dd0:	200001f0 	.word	0x200001f0
 8000dd4:	cccccccd 	.word	0xcccccccd
 8000dd8:	40390000 	.word	0x40390000
 8000ddc:	0800a490 	.word	0x0800a490
 8000de0:	0800a4a0 	.word	0x0800a4a0
 8000de4:	0800a4b0 	.word	0x0800a4b0

08000de8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b082      	sub	sp, #8
 8000dec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000dee:	4b0c      	ldr	r3, [pc, #48]	@ (8000e20 <MX_DMA_Init+0x38>)
 8000df0:	695b      	ldr	r3, [r3, #20]
 8000df2:	4a0b      	ldr	r2, [pc, #44]	@ (8000e20 <MX_DMA_Init+0x38>)
 8000df4:	f043 0301 	orr.w	r3, r3, #1
 8000df8:	6153      	str	r3, [r2, #20]
 8000dfa:	4b09      	ldr	r3, [pc, #36]	@ (8000e20 <MX_DMA_Init+0x38>)
 8000dfc:	695b      	ldr	r3, [r3, #20]
 8000dfe:	f003 0301 	and.w	r3, r3, #1
 8000e02:	607b      	str	r3, [r7, #4]
 8000e04:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8000e06:	2200      	movs	r2, #0
 8000e08:	2100      	movs	r1, #0
 8000e0a:	200f      	movs	r0, #15
 8000e0c:	f001 fcbf 	bl	800278e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000e10:	200f      	movs	r0, #15
 8000e12:	f001 fcd8 	bl	80027c6 <HAL_NVIC_EnableIRQ>

}
 8000e16:	bf00      	nop
 8000e18:	3708      	adds	r7, #8
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	40021000 	.word	0x40021000

08000e24 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b088      	sub	sp, #32
 8000e28:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e2a:	f107 0310 	add.w	r3, r7, #16
 8000e2e:	2200      	movs	r2, #0
 8000e30:	601a      	str	r2, [r3, #0]
 8000e32:	605a      	str	r2, [r3, #4]
 8000e34:	609a      	str	r2, [r3, #8]
 8000e36:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e38:	4b3b      	ldr	r3, [pc, #236]	@ (8000f28 <MX_GPIO_Init+0x104>)
 8000e3a:	699b      	ldr	r3, [r3, #24]
 8000e3c:	4a3a      	ldr	r2, [pc, #232]	@ (8000f28 <MX_GPIO_Init+0x104>)
 8000e3e:	f043 0320 	orr.w	r3, r3, #32
 8000e42:	6193      	str	r3, [r2, #24]
 8000e44:	4b38      	ldr	r3, [pc, #224]	@ (8000f28 <MX_GPIO_Init+0x104>)
 8000e46:	699b      	ldr	r3, [r3, #24]
 8000e48:	f003 0320 	and.w	r3, r3, #32
 8000e4c:	60fb      	str	r3, [r7, #12]
 8000e4e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e50:	4b35      	ldr	r3, [pc, #212]	@ (8000f28 <MX_GPIO_Init+0x104>)
 8000e52:	699b      	ldr	r3, [r3, #24]
 8000e54:	4a34      	ldr	r2, [pc, #208]	@ (8000f28 <MX_GPIO_Init+0x104>)
 8000e56:	f043 0304 	orr.w	r3, r3, #4
 8000e5a:	6193      	str	r3, [r2, #24]
 8000e5c:	4b32      	ldr	r3, [pc, #200]	@ (8000f28 <MX_GPIO_Init+0x104>)
 8000e5e:	699b      	ldr	r3, [r3, #24]
 8000e60:	f003 0304 	and.w	r3, r3, #4
 8000e64:	60bb      	str	r3, [r7, #8]
 8000e66:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e68:	4b2f      	ldr	r3, [pc, #188]	@ (8000f28 <MX_GPIO_Init+0x104>)
 8000e6a:	699b      	ldr	r3, [r3, #24]
 8000e6c:	4a2e      	ldr	r2, [pc, #184]	@ (8000f28 <MX_GPIO_Init+0x104>)
 8000e6e:	f043 0308 	orr.w	r3, r3, #8
 8000e72:	6193      	str	r3, [r2, #24]
 8000e74:	4b2c      	ldr	r3, [pc, #176]	@ (8000f28 <MX_GPIO_Init+0x104>)
 8000e76:	699b      	ldr	r3, [r3, #24]
 8000e78:	f003 0308 	and.w	r3, r3, #8
 8000e7c:	607b      	str	r3, [r7, #4]
 8000e7e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 8000e80:	2200      	movs	r2, #0
 8000e82:	2106      	movs	r1, #6
 8000e84:	4829      	ldr	r0, [pc, #164]	@ (8000f2c <MX_GPIO_Init+0x108>)
 8000e86:	f002 f8df 	bl	8003048 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8000e8a:	2201      	movs	r2, #1
 8000e8c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000e90:	4826      	ldr	r0, [pc, #152]	@ (8000f2c <MX_GPIO_Init+0x108>)
 8000e92:	f002 f8d9 	bl	8003048 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA1 PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8000e96:	2306      	movs	r3, #6
 8000e98:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea2:	2302      	movs	r3, #2
 8000ea4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ea6:	f107 0310 	add.w	r3, r7, #16
 8000eaa:	4619      	mov	r1, r3
 8000eac:	481f      	ldr	r0, [pc, #124]	@ (8000f2c <MX_GPIO_Init+0x108>)
 8000eae:	f001 ff47 	bl	8002d40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000eb2:	2320      	movs	r3, #32
 8000eb4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000eb6:	4b1e      	ldr	r3, [pc, #120]	@ (8000f30 <MX_GPIO_Init+0x10c>)
 8000eb8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000eba:	2301      	movs	r3, #1
 8000ebc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ebe:	f107 0310 	add.w	r3, r7, #16
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	4819      	ldr	r0, [pc, #100]	@ (8000f2c <MX_GPIO_Init+0x108>)
 8000ec6:	f001 ff3b 	bl	8002d40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000eca:	2301      	movs	r3, #1
 8000ecc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000ece:	4b18      	ldr	r3, [pc, #96]	@ (8000f30 <MX_GPIO_Init+0x10c>)
 8000ed0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ed6:	f107 0310 	add.w	r3, r7, #16
 8000eda:	4619      	mov	r1, r3
 8000edc:	4815      	ldr	r0, [pc, #84]	@ (8000f34 <MX_GPIO_Init+0x110>)
 8000ede:	f001 ff2f 	bl	8002d40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000ee2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000ee6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000ee8:	2311      	movs	r3, #17
 8000eea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eec:	2300      	movs	r3, #0
 8000eee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef0:	2302      	movs	r3, #2
 8000ef2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ef4:	f107 0310 	add.w	r3, r7, #16
 8000ef8:	4619      	mov	r1, r3
 8000efa:	480c      	ldr	r0, [pc, #48]	@ (8000f2c <MX_GPIO_Init+0x108>)
 8000efc:	f001 ff20 	bl	8002d40 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000f00:	2200      	movs	r2, #0
 8000f02:	2100      	movs	r1, #0
 8000f04:	2006      	movs	r0, #6
 8000f06:	f001 fc42 	bl	800278e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000f0a:	2006      	movs	r0, #6
 8000f0c:	f001 fc5b 	bl	80027c6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000f10:	2200      	movs	r2, #0
 8000f12:	2100      	movs	r1, #0
 8000f14:	2017      	movs	r0, #23
 8000f16:	f001 fc3a 	bl	800278e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000f1a:	2017      	movs	r0, #23
 8000f1c:	f001 fc53 	bl	80027c6 <HAL_NVIC_EnableIRQ>

}
 8000f20:	bf00      	nop
 8000f22:	3720      	adds	r7, #32
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	40021000 	.word	0x40021000
 8000f2c:	40010800 	.word	0x40010800
 8000f30:	10210000 	.word	0x10210000
 8000f34:	40010c00 	.word	0x40010c00

08000f38 <LED_Control>:

/* USER CODE BEGIN 2 */
void LED_Control(uint8_t device, uint8_t cmd)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b082      	sub	sp, #8
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	4603      	mov	r3, r0
 8000f40:	460a      	mov	r2, r1
 8000f42:	71fb      	strb	r3, [r7, #7]
 8000f44:	4613      	mov	r3, r2
 8000f46:	71bb      	strb	r3, [r7, #6]
	if (device == LED1)
 8000f48:	79fb      	ldrb	r3, [r7, #7]
 8000f4a:	2b01      	cmp	r3, #1
 8000f4c:	d111      	bne.n	8000f72 <LED_Control+0x3a>
	{
		if (cmd == ON)
 8000f4e:	79bb      	ldrb	r3, [r7, #6]
 8000f50:	2b01      	cmp	r3, #1
 8000f52:	d105      	bne.n	8000f60 <LED_Control+0x28>
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 8000f54:	2201      	movs	r2, #1
 8000f56:	2102      	movs	r1, #2
 8000f58:	4812      	ldr	r0, [pc, #72]	@ (8000fa4 <LED_Control+0x6c>)
 8000f5a:	f002 f875 	bl	8003048 <HAL_GPIO_WritePin>
		else if (cmd == OFF)
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
		}
	}
}
 8000f5e:	e01c      	b.n	8000f9a <LED_Control+0x62>
		else if (cmd == OFF)
 8000f60:	79bb      	ldrb	r3, [r7, #6]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d119      	bne.n	8000f9a <LED_Control+0x62>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8000f66:	2200      	movs	r2, #0
 8000f68:	2102      	movs	r1, #2
 8000f6a:	480e      	ldr	r0, [pc, #56]	@ (8000fa4 <LED_Control+0x6c>)
 8000f6c:	f002 f86c 	bl	8003048 <HAL_GPIO_WritePin>
}
 8000f70:	e013      	b.n	8000f9a <LED_Control+0x62>
	else if (device == LED2)
 8000f72:	79fb      	ldrb	r3, [r7, #7]
 8000f74:	2b02      	cmp	r3, #2
 8000f76:	d110      	bne.n	8000f9a <LED_Control+0x62>
		if (cmd == ON)
 8000f78:	79bb      	ldrb	r3, [r7, #6]
 8000f7a:	2b01      	cmp	r3, #1
 8000f7c:	d105      	bne.n	8000f8a <LED_Control+0x52>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 8000f7e:	2201      	movs	r2, #1
 8000f80:	2104      	movs	r1, #4
 8000f82:	4808      	ldr	r0, [pc, #32]	@ (8000fa4 <LED_Control+0x6c>)
 8000f84:	f002 f860 	bl	8003048 <HAL_GPIO_WritePin>
}
 8000f88:	e007      	b.n	8000f9a <LED_Control+0x62>
		else if (cmd == OFF)
 8000f8a:	79bb      	ldrb	r3, [r7, #6]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d104      	bne.n	8000f9a <LED_Control+0x62>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 8000f90:	2200      	movs	r2, #0
 8000f92:	2104      	movs	r1, #4
 8000f94:	4803      	ldr	r0, [pc, #12]	@ (8000fa4 <LED_Control+0x6c>)
 8000f96:	f002 f857 	bl	8003048 <HAL_GPIO_WritePin>
}
 8000f9a:	bf00      	nop
 8000f9c:	3708      	adds	r7, #8
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	40010800 	.word	0x40010800

08000fa8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000fac:	4b12      	ldr	r3, [pc, #72]	@ (8000ff8 <MX_I2C1_Init+0x50>)
 8000fae:	4a13      	ldr	r2, [pc, #76]	@ (8000ffc <MX_I2C1_Init+0x54>)
 8000fb0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000fb2:	4b11      	ldr	r3, [pc, #68]	@ (8000ff8 <MX_I2C1_Init+0x50>)
 8000fb4:	4a12      	ldr	r2, [pc, #72]	@ (8001000 <MX_I2C1_Init+0x58>)
 8000fb6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000fb8:	4b0f      	ldr	r3, [pc, #60]	@ (8000ff8 <MX_I2C1_Init+0x50>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000fbe:	4b0e      	ldr	r3, [pc, #56]	@ (8000ff8 <MX_I2C1_Init+0x50>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000fc4:	4b0c      	ldr	r3, [pc, #48]	@ (8000ff8 <MX_I2C1_Init+0x50>)
 8000fc6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000fca:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000fcc:	4b0a      	ldr	r3, [pc, #40]	@ (8000ff8 <MX_I2C1_Init+0x50>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000fd2:	4b09      	ldr	r3, [pc, #36]	@ (8000ff8 <MX_I2C1_Init+0x50>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000fd8:	4b07      	ldr	r3, [pc, #28]	@ (8000ff8 <MX_I2C1_Init+0x50>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000fde:	4b06      	ldr	r3, [pc, #24]	@ (8000ff8 <MX_I2C1_Init+0x50>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000fe4:	4804      	ldr	r0, [pc, #16]	@ (8000ff8 <MX_I2C1_Init+0x50>)
 8000fe6:	f002 f85f 	bl	80030a8 <HAL_I2C_Init>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d001      	beq.n	8000ff4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000ff0:	f000 f8f0 	bl	80011d4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000ff4:	bf00      	nop
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	20000220 	.word	0x20000220
 8000ffc:	40005400 	.word	0x40005400
 8001000:	000186a0 	.word	0x000186a0

08001004 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b08a      	sub	sp, #40	@ 0x28
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800100c:	f107 0314 	add.w	r3, r7, #20
 8001010:	2200      	movs	r2, #0
 8001012:	601a      	str	r2, [r3, #0]
 8001014:	605a      	str	r2, [r3, #4]
 8001016:	609a      	str	r2, [r3, #8]
 8001018:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	4a1d      	ldr	r2, [pc, #116]	@ (8001094 <HAL_I2C_MspInit+0x90>)
 8001020:	4293      	cmp	r3, r2
 8001022:	d132      	bne.n	800108a <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001024:	4b1c      	ldr	r3, [pc, #112]	@ (8001098 <HAL_I2C_MspInit+0x94>)
 8001026:	699b      	ldr	r3, [r3, #24]
 8001028:	4a1b      	ldr	r2, [pc, #108]	@ (8001098 <HAL_I2C_MspInit+0x94>)
 800102a:	f043 0308 	orr.w	r3, r3, #8
 800102e:	6193      	str	r3, [r2, #24]
 8001030:	4b19      	ldr	r3, [pc, #100]	@ (8001098 <HAL_I2C_MspInit+0x94>)
 8001032:	699b      	ldr	r3, [r3, #24]
 8001034:	f003 0308 	and.w	r3, r3, #8
 8001038:	613b      	str	r3, [r7, #16]
 800103a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800103c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001040:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001042:	2312      	movs	r3, #18
 8001044:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001046:	2303      	movs	r3, #3
 8001048:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800104a:	f107 0314 	add.w	r3, r7, #20
 800104e:	4619      	mov	r1, r3
 8001050:	4812      	ldr	r0, [pc, #72]	@ (800109c <HAL_I2C_MspInit+0x98>)
 8001052:	f001 fe75 	bl	8002d40 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8001056:	4b12      	ldr	r3, [pc, #72]	@ (80010a0 <HAL_I2C_MspInit+0x9c>)
 8001058:	685b      	ldr	r3, [r3, #4]
 800105a:	627b      	str	r3, [r7, #36]	@ 0x24
 800105c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800105e:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8001062:	627b      	str	r3, [r7, #36]	@ 0x24
 8001064:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001066:	f043 0302 	orr.w	r3, r3, #2
 800106a:	627b      	str	r3, [r7, #36]	@ 0x24
 800106c:	4a0c      	ldr	r2, [pc, #48]	@ (80010a0 <HAL_I2C_MspInit+0x9c>)
 800106e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001070:	6053      	str	r3, [r2, #4]

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001072:	4b09      	ldr	r3, [pc, #36]	@ (8001098 <HAL_I2C_MspInit+0x94>)
 8001074:	69db      	ldr	r3, [r3, #28]
 8001076:	4a08      	ldr	r2, [pc, #32]	@ (8001098 <HAL_I2C_MspInit+0x94>)
 8001078:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800107c:	61d3      	str	r3, [r2, #28]
 800107e:	4b06      	ldr	r3, [pc, #24]	@ (8001098 <HAL_I2C_MspInit+0x94>)
 8001080:	69db      	ldr	r3, [r3, #28]
 8001082:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001086:	60fb      	str	r3, [r7, #12]
 8001088:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800108a:	bf00      	nop
 800108c:	3728      	adds	r7, #40	@ 0x28
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	40005400 	.word	0x40005400
 8001098:	40021000 	.word	0x40021000
 800109c:	40010c00 	.word	0x40010c00
 80010a0:	40010000 	.word	0x40010000

080010a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010a8:	f000 fde8 	bl	8001c7c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010ac:	f000 f832 	bl	8001114 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010b0:	f7ff feb8 	bl	8000e24 <MX_GPIO_Init>
  MX_DMA_Init();
 80010b4:	f7ff fe98 	bl	8000de8 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80010b8:	f000 fd00 	bl	8001abc <MX_USART1_UART_Init>
  MX_I2C1_Init();
 80010bc:	f7ff ff74 	bl	8000fa8 <MX_I2C1_Init>
  MX_RTC_Init();
 80010c0:	f000 fa18 	bl	80014f4 <MX_RTC_Init>
  MX_ADC1_Init();
 80010c4:	f7ff fd86 	bl	8000bd4 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  //HAL_UART_Receive_IT(&huart1, RX1_Buffer, 4);
  //HAL_UART_Receive_DMA(&huart1, RX1_Buffer, 1);
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);
 80010c8:	4b0d      	ldr	r3, [pc, #52]	@ (8001100 <main+0x5c>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	68da      	ldr	r2, [r3, #12]
 80010ce:	4b0c      	ldr	r3, [pc, #48]	@ (8001100 <main+0x5c>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f042 0210 	orr.w	r2, r2, #16
 80010d6:	60da      	str	r2, [r3, #12]
  HAL_UART_Receive_DMA(&huart1, RX1_Buffer, DMA_BUF_SIZE);
 80010d8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80010dc:	4909      	ldr	r1, [pc, #36]	@ (8001104 <main+0x60>)
 80010de:	4808      	ldr	r0, [pc, #32]	@ (8001100 <main+0x5c>)
 80010e0:	f003 feab 	bl	8004e3a <HAL_UART_Receive_DMA>
  printf("The system has been initialized!\n");
 80010e4:	4808      	ldr	r0, [pc, #32]	@ (8001108 <main+0x64>)
 80010e6:	f005 fd5b 	bl	8006ba0 <puts>
  OLED_Init();
 80010ea:	f000 f8a9 	bl	8001240 <OLED_Init>
  printf("The OLED has been initialized!\n");
 80010ee:	4807      	ldr	r0, [pc, #28]	@ (800110c <main+0x68>)
 80010f0:	f005 fd56 	bl	8006ba0 <puts>
  //OLED_Test();
  //printf("The IWDG has been initialized!\n");
  //printf("The WWDG has been initialized!\n");
  //printf("The PWR sleep has been initialized!\n");
  printf("The ADC VR test has been initialized!\n");
 80010f4:	4806      	ldr	r0, [pc, #24]	@ (8001110 <main+0x6c>)
 80010f6:	f005 fd53 	bl	8006ba0 <puts>
	  //IWDG_Test();
	  //printf("HELLO WORLD!\n");
	  //HAL_Delay(1000);
	  //RTC_Test();
	  //ADC_VR_Test();
	  ADC_CPU_TEMP_Test();
 80010fa:	f7ff fdc9 	bl	8000c90 <ADC_CPU_TEMP_Test>
 80010fe:	e7fc      	b.n	80010fa <main+0x56>
 8001100:	20000394 	.word	0x20000394
 8001104:	20000274 	.word	0x20000274
 8001108:	0800a4bc 	.word	0x0800a4bc
 800110c:	0800a4e0 	.word	0x0800a4e0
 8001110:	0800a500 	.word	0x0800a500

08001114 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b094      	sub	sp, #80	@ 0x50
 8001118:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800111a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800111e:	2228      	movs	r2, #40	@ 0x28
 8001120:	2100      	movs	r1, #0
 8001122:	4618      	mov	r0, r3
 8001124:	f005 fe3c 	bl	8006da0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001128:	f107 0314 	add.w	r3, r7, #20
 800112c:	2200      	movs	r2, #0
 800112e:	601a      	str	r2, [r3, #0]
 8001130:	605a      	str	r2, [r3, #4]
 8001132:	609a      	str	r2, [r3, #8]
 8001134:	60da      	str	r2, [r3, #12]
 8001136:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001138:	1d3b      	adds	r3, r7, #4
 800113a:	2200      	movs	r2, #0
 800113c:	601a      	str	r2, [r3, #0]
 800113e:	605a      	str	r2, [r3, #4]
 8001140:	609a      	str	r2, [r3, #8]
 8001142:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001144:	2309      	movs	r3, #9
 8001146:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001148:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800114c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800114e:	2300      	movs	r3, #0
 8001150:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001152:	2301      	movs	r3, #1
 8001154:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001156:	2301      	movs	r3, #1
 8001158:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800115a:	2302      	movs	r3, #2
 800115c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800115e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001162:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001164:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001168:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800116a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800116e:	4618      	mov	r0, r3
 8001170:	f002 fc52 	bl	8003a18 <HAL_RCC_OscConfig>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d001      	beq.n	800117e <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800117a:	f000 f82b 	bl	80011d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800117e:	230f      	movs	r3, #15
 8001180:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001182:	2302      	movs	r3, #2
 8001184:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001186:	2300      	movs	r3, #0
 8001188:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800118a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800118e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001190:	2300      	movs	r3, #0
 8001192:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001194:	f107 0314 	add.w	r3, r7, #20
 8001198:	2102      	movs	r1, #2
 800119a:	4618      	mov	r0, r3
 800119c:	f002 febe 	bl	8003f1c <HAL_RCC_ClockConfig>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <SystemClock_Config+0x96>
  {
    Error_Handler();
 80011a6:	f000 f815 	bl	80011d4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_ADC;
 80011aa:	2303      	movs	r3, #3
 80011ac:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80011ae:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80011b2:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80011b4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80011b8:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011ba:	1d3b      	adds	r3, r7, #4
 80011bc:	4618      	mov	r0, r3
 80011be:	f003 f83b 	bl	8004238 <HAL_RCCEx_PeriphCLKConfig>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d001      	beq.n	80011cc <SystemClock_Config+0xb8>
  {
    Error_Handler();
 80011c8:	f000 f804 	bl	80011d4 <Error_Handler>
  }
}
 80011cc:	bf00      	nop
 80011ce:	3750      	adds	r7, #80	@ 0x50
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}

080011d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011d8:	b672      	cpsid	i
}
 80011da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011dc:	bf00      	nop
 80011de:	e7fd      	b.n	80011dc <Error_Handler+0x8>

080011e0 <WriteCmd>:
#include "oled.h"
#include "codetab.h"

void WriteCmd(unsigned char I2C_Command)//写命令
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b086      	sub	sp, #24
 80011e4:	af04      	add	r7, sp, #16
 80011e6:	4603      	mov	r3, r0
 80011e8:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1,OLED0561_ADD,COM,I2C_MEMADD_SIZE_8BIT,&I2C_Command,1,1000);
 80011ea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011ee:	9302      	str	r3, [sp, #8]
 80011f0:	2301      	movs	r3, #1
 80011f2:	9301      	str	r3, [sp, #4]
 80011f4:	1dfb      	adds	r3, r7, #7
 80011f6:	9300      	str	r3, [sp, #0]
 80011f8:	2301      	movs	r3, #1
 80011fa:	2200      	movs	r2, #0
 80011fc:	2178      	movs	r1, #120	@ 0x78
 80011fe:	4803      	ldr	r0, [pc, #12]	@ (800120c <WriteCmd+0x2c>)
 8001200:	f002 f896 	bl	8003330 <HAL_I2C_Mem_Write>
}
 8001204:	bf00      	nop
 8001206:	3708      	adds	r7, #8
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}
 800120c:	20000220 	.word	0x20000220

08001210 <WriteDat>:

void WriteDat(unsigned char I2C_Data)//写数据
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b086      	sub	sp, #24
 8001214:	af04      	add	r7, sp, #16
 8001216:	4603      	mov	r3, r0
 8001218:	71fb      	strb	r3, [r7, #7]
		HAL_I2C_Mem_Write(&hi2c1,OLED0561_ADD,DAT,I2C_MEMADD_SIZE_8BIT,&I2C_Data,1,1000);
 800121a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800121e:	9302      	str	r3, [sp, #8]
 8001220:	2301      	movs	r3, #1
 8001222:	9301      	str	r3, [sp, #4]
 8001224:	1dfb      	adds	r3, r7, #7
 8001226:	9300      	str	r3, [sp, #0]
 8001228:	2301      	movs	r3, #1
 800122a:	2240      	movs	r2, #64	@ 0x40
 800122c:	2178      	movs	r1, #120	@ 0x78
 800122e:	4803      	ldr	r0, [pc, #12]	@ (800123c <WriteDat+0x2c>)
 8001230:	f002 f87e 	bl	8003330 <HAL_I2C_Mem_Write>
}
 8001234:	bf00      	nop
 8001236:	3708      	adds	r7, #8
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}
 800123c:	20000220 	.word	0x20000220

08001240 <OLED_Init>:

void OLED_Init(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	af00      	add	r7, sp, #0
	HAL_Delay(100); //这里的延时很重要
 8001244:	2064      	movs	r0, #100	@ 0x64
 8001246:	f000 fd7b 	bl	8001d40 <HAL_Delay>

	WriteCmd(0xAE); //display off
 800124a:	20ae      	movs	r0, #174	@ 0xae
 800124c:	f7ff ffc8 	bl	80011e0 <WriteCmd>
	WriteCmd(0x20);	//Set Memory Addressing Mode
 8001250:	2020      	movs	r0, #32
 8001252:	f7ff ffc5 	bl	80011e0 <WriteCmd>
	WriteCmd(0x10);	//00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8001256:	2010      	movs	r0, #16
 8001258:	f7ff ffc2 	bl	80011e0 <WriteCmd>
	WriteCmd(0xb0);	//Set Page Start Address for Page Addressing Mode,0-7
 800125c:	20b0      	movs	r0, #176	@ 0xb0
 800125e:	f7ff ffbf 	bl	80011e0 <WriteCmd>
	WriteCmd(0xc8);	//Set COM Output Scan Direction
 8001262:	20c8      	movs	r0, #200	@ 0xc8
 8001264:	f7ff ffbc 	bl	80011e0 <WriteCmd>
	WriteCmd(0x00); //---set low column address
 8001268:	2000      	movs	r0, #0
 800126a:	f7ff ffb9 	bl	80011e0 <WriteCmd>
	WriteCmd(0x10); //---set high column address
 800126e:	2010      	movs	r0, #16
 8001270:	f7ff ffb6 	bl	80011e0 <WriteCmd>
	WriteCmd(0x40); //--set start line address
 8001274:	2040      	movs	r0, #64	@ 0x40
 8001276:	f7ff ffb3 	bl	80011e0 <WriteCmd>
	WriteCmd(0x81); //--set contrast control register
 800127a:	2081      	movs	r0, #129	@ 0x81
 800127c:	f7ff ffb0 	bl	80011e0 <WriteCmd>
	WriteCmd(0xff); //亮度调节 0x00~0xff
 8001280:	20ff      	movs	r0, #255	@ 0xff
 8001282:	f7ff ffad 	bl	80011e0 <WriteCmd>
	WriteCmd(0xa1); //--set segment re-map 0 to 127
 8001286:	20a1      	movs	r0, #161	@ 0xa1
 8001288:	f7ff ffaa 	bl	80011e0 <WriteCmd>
	WriteCmd(0xa6); //--set normal display
 800128c:	20a6      	movs	r0, #166	@ 0xa6
 800128e:	f7ff ffa7 	bl	80011e0 <WriteCmd>
	WriteCmd(0xa8); //--set multiplex ratio(1 to 64)
 8001292:	20a8      	movs	r0, #168	@ 0xa8
 8001294:	f7ff ffa4 	bl	80011e0 <WriteCmd>
	WriteCmd(0x3F); //
 8001298:	203f      	movs	r0, #63	@ 0x3f
 800129a:	f7ff ffa1 	bl	80011e0 <WriteCmd>
	WriteCmd(0xa4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800129e:	20a4      	movs	r0, #164	@ 0xa4
 80012a0:	f7ff ff9e 	bl	80011e0 <WriteCmd>
	WriteCmd(0xd3); //-set display offset
 80012a4:	20d3      	movs	r0, #211	@ 0xd3
 80012a6:	f7ff ff9b 	bl	80011e0 <WriteCmd>
	WriteCmd(0x00); //-not offset
 80012aa:	2000      	movs	r0, #0
 80012ac:	f7ff ff98 	bl	80011e0 <WriteCmd>
	WriteCmd(0xd5); //--set display clock divide ratio/oscillator frequency
 80012b0:	20d5      	movs	r0, #213	@ 0xd5
 80012b2:	f7ff ff95 	bl	80011e0 <WriteCmd>
	WriteCmd(0xf0); //--set divide ratio
 80012b6:	20f0      	movs	r0, #240	@ 0xf0
 80012b8:	f7ff ff92 	bl	80011e0 <WriteCmd>
	WriteCmd(0xd9); //--set pre-charge period
 80012bc:	20d9      	movs	r0, #217	@ 0xd9
 80012be:	f7ff ff8f 	bl	80011e0 <WriteCmd>
	WriteCmd(0x22); //
 80012c2:	2022      	movs	r0, #34	@ 0x22
 80012c4:	f7ff ff8c 	bl	80011e0 <WriteCmd>
	WriteCmd(0xda); //--set com pins hardware configuration
 80012c8:	20da      	movs	r0, #218	@ 0xda
 80012ca:	f7ff ff89 	bl	80011e0 <WriteCmd>
	WriteCmd(0x12);
 80012ce:	2012      	movs	r0, #18
 80012d0:	f7ff ff86 	bl	80011e0 <WriteCmd>
	WriteCmd(0xdb); //--set vcomh
 80012d4:	20db      	movs	r0, #219	@ 0xdb
 80012d6:	f7ff ff83 	bl	80011e0 <WriteCmd>
	WriteCmd(0x20); //0x20,0.77xVcc
 80012da:	2020      	movs	r0, #32
 80012dc:	f7ff ff80 	bl	80011e0 <WriteCmd>
	WriteCmd(0x8d); //--set DC-DC enable
 80012e0:	208d      	movs	r0, #141	@ 0x8d
 80012e2:	f7ff ff7d 	bl	80011e0 <WriteCmd>
	WriteCmd(0x14); //
 80012e6:	2014      	movs	r0, #20
 80012e8:	f7ff ff7a 	bl	80011e0 <WriteCmd>
	WriteCmd(0xaf); //--turn on oled panel
 80012ec:	20af      	movs	r0, #175	@ 0xaf
 80012ee:	f7ff ff77 	bl	80011e0 <WriteCmd>
}
 80012f2:	bf00      	nop
 80012f4:	bd80      	pop	{r7, pc}

080012f6 <OLED_SetPos>:

void OLED_SetPos(unsigned char x, unsigned char y) //设置起始点坐标
{
 80012f6:	b580      	push	{r7, lr}
 80012f8:	b082      	sub	sp, #8
 80012fa:	af00      	add	r7, sp, #0
 80012fc:	4603      	mov	r3, r0
 80012fe:	460a      	mov	r2, r1
 8001300:	71fb      	strb	r3, [r7, #7]
 8001302:	4613      	mov	r3, r2
 8001304:	71bb      	strb	r3, [r7, #6]
	WriteCmd(0xb0+y);
 8001306:	79bb      	ldrb	r3, [r7, #6]
 8001308:	3b50      	subs	r3, #80	@ 0x50
 800130a:	b2db      	uxtb	r3, r3
 800130c:	4618      	mov	r0, r3
 800130e:	f7ff ff67 	bl	80011e0 <WriteCmd>
	WriteCmd(((x&0xf0)>>4)|0x10);
 8001312:	79fb      	ldrb	r3, [r7, #7]
 8001314:	091b      	lsrs	r3, r3, #4
 8001316:	b2db      	uxtb	r3, r3
 8001318:	f043 0310 	orr.w	r3, r3, #16
 800131c:	b2db      	uxtb	r3, r3
 800131e:	4618      	mov	r0, r3
 8001320:	f7ff ff5e 	bl	80011e0 <WriteCmd>
	WriteCmd((x&0x0f)|0x01);
 8001324:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001328:	f003 030e 	and.w	r3, r3, #14
 800132c:	b25b      	sxtb	r3, r3
 800132e:	f043 0301 	orr.w	r3, r3, #1
 8001332:	b25b      	sxtb	r3, r3
 8001334:	b2db      	uxtb	r3, r3
 8001336:	4618      	mov	r0, r3
 8001338:	f7ff ff52 	bl	80011e0 <WriteCmd>
}
 800133c:	bf00      	nop
 800133e:	3708      	adds	r7, #8
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}

08001344 <OLED_Fill>:

void OLED_Fill(unsigned char fill_Data)//全屏填充
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b084      	sub	sp, #16
 8001348:	af00      	add	r7, sp, #0
 800134a:	4603      	mov	r3, r0
 800134c:	71fb      	strb	r3, [r7, #7]
	unsigned char m,n;
	for(m=0;m<8;m++)
 800134e:	2300      	movs	r3, #0
 8001350:	73fb      	strb	r3, [r7, #15]
 8001352:	e01c      	b.n	800138e <OLED_Fill+0x4a>
	{
		WriteCmd(0xb0+m);		//page0-page1
 8001354:	7bfb      	ldrb	r3, [r7, #15]
 8001356:	3b50      	subs	r3, #80	@ 0x50
 8001358:	b2db      	uxtb	r3, r3
 800135a:	4618      	mov	r0, r3
 800135c:	f7ff ff40 	bl	80011e0 <WriteCmd>
		WriteCmd(0x00);		//low column start address
 8001360:	2000      	movs	r0, #0
 8001362:	f7ff ff3d 	bl	80011e0 <WriteCmd>
		WriteCmd(0x10);		//high column start address
 8001366:	2010      	movs	r0, #16
 8001368:	f7ff ff3a 	bl	80011e0 <WriteCmd>
		for(n=0;n<128;n++)
 800136c:	2300      	movs	r3, #0
 800136e:	73bb      	strb	r3, [r7, #14]
 8001370:	e006      	b.n	8001380 <OLED_Fill+0x3c>
		{
			WriteDat(fill_Data);
 8001372:	79fb      	ldrb	r3, [r7, #7]
 8001374:	4618      	mov	r0, r3
 8001376:	f7ff ff4b 	bl	8001210 <WriteDat>
		for(n=0;n<128;n++)
 800137a:	7bbb      	ldrb	r3, [r7, #14]
 800137c:	3301      	adds	r3, #1
 800137e:	73bb      	strb	r3, [r7, #14]
 8001380:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001384:	2b00      	cmp	r3, #0
 8001386:	daf4      	bge.n	8001372 <OLED_Fill+0x2e>
	for(m=0;m<8;m++)
 8001388:	7bfb      	ldrb	r3, [r7, #15]
 800138a:	3301      	adds	r3, #1
 800138c:	73fb      	strb	r3, [r7, #15]
 800138e:	7bfb      	ldrb	r3, [r7, #15]
 8001390:	2b07      	cmp	r3, #7
 8001392:	d9df      	bls.n	8001354 <OLED_Fill+0x10>
		}
	}
}
 8001394:	bf00      	nop
 8001396:	bf00      	nop
 8001398:	3710      	adds	r7, #16
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}

0800139e <OLED_CLS>:

void OLED_CLS(void)//清屏
{
 800139e:	b580      	push	{r7, lr}
 80013a0:	af00      	add	r7, sp, #0
	OLED_Fill(0x00);
 80013a2:	2000      	movs	r0, #0
 80013a4:	f7ff ffce 	bl	8001344 <OLED_Fill>
}
 80013a8:	bf00      	nop
 80013aa:	bd80      	pop	{r7, pc}

080013ac <OLED_ShowStr>:
}

// Parameters     : x,y -- 起始点坐标(x:0~127, y:0~7); ch[] -- 要显示的字符串; TextSize -- 字符大小(1:6*8 ; 2:8*16)
// Description    : 显示codetab.h中的ASCII字符,有6*8和8*16可选择
void OLED_ShowStr(unsigned char x, unsigned char y, unsigned char ch[], unsigned char TextSize)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b084      	sub	sp, #16
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	603a      	str	r2, [r7, #0]
 80013b4:	461a      	mov	r2, r3
 80013b6:	4603      	mov	r3, r0
 80013b8:	71fb      	strb	r3, [r7, #7]
 80013ba:	460b      	mov	r3, r1
 80013bc:	71bb      	strb	r3, [r7, #6]
 80013be:	4613      	mov	r3, r2
 80013c0:	717b      	strb	r3, [r7, #5]
	unsigned char c = 0,i = 0,j = 0;
 80013c2:	2300      	movs	r3, #0
 80013c4:	737b      	strb	r3, [r7, #13]
 80013c6:	2300      	movs	r3, #0
 80013c8:	73fb      	strb	r3, [r7, #15]
 80013ca:	2300      	movs	r3, #0
 80013cc:	73bb      	strb	r3, [r7, #14]
	switch(TextSize)
 80013ce:	797b      	ldrb	r3, [r7, #5]
 80013d0:	2b01      	cmp	r3, #1
 80013d2:	d032      	beq.n	800143a <OLED_ShowStr+0x8e>
 80013d4:	2b02      	cmp	r3, #2
 80013d6:	d07e      	beq.n	80014d6 <OLED_ShowStr+0x12a>
				x += 8;
				j++;
			}
		}break;
	}
}
 80013d8:	e084      	b.n	80014e4 <OLED_ShowStr+0x138>
				c = ch[j] - 32;
 80013da:	7bbb      	ldrb	r3, [r7, #14]
 80013dc:	683a      	ldr	r2, [r7, #0]
 80013de:	4413      	add	r3, r2
 80013e0:	781b      	ldrb	r3, [r3, #0]
 80013e2:	3b20      	subs	r3, #32
 80013e4:	737b      	strb	r3, [r7, #13]
				if(x > 126)
 80013e6:	79fb      	ldrb	r3, [r7, #7]
 80013e8:	2b7e      	cmp	r3, #126	@ 0x7e
 80013ea:	d904      	bls.n	80013f6 <OLED_ShowStr+0x4a>
					x = 0;
 80013ec:	2300      	movs	r3, #0
 80013ee:	71fb      	strb	r3, [r7, #7]
					y++;
 80013f0:	79bb      	ldrb	r3, [r7, #6]
 80013f2:	3301      	adds	r3, #1
 80013f4:	71bb      	strb	r3, [r7, #6]
				OLED_SetPos(x,y);
 80013f6:	79ba      	ldrb	r2, [r7, #6]
 80013f8:	79fb      	ldrb	r3, [r7, #7]
 80013fa:	4611      	mov	r1, r2
 80013fc:	4618      	mov	r0, r3
 80013fe:	f7ff ff7a 	bl	80012f6 <OLED_SetPos>
				for(i=0;i<6;i++)
 8001402:	2300      	movs	r3, #0
 8001404:	73fb      	strb	r3, [r7, #15]
 8001406:	e00f      	b.n	8001428 <OLED_ShowStr+0x7c>
					WriteDat(F6x8[c][i]);
 8001408:	7b7a      	ldrb	r2, [r7, #13]
 800140a:	7bf9      	ldrb	r1, [r7, #15]
 800140c:	4837      	ldr	r0, [pc, #220]	@ (80014ec <OLED_ShowStr+0x140>)
 800140e:	4613      	mov	r3, r2
 8001410:	005b      	lsls	r3, r3, #1
 8001412:	4413      	add	r3, r2
 8001414:	005b      	lsls	r3, r3, #1
 8001416:	4403      	add	r3, r0
 8001418:	440b      	add	r3, r1
 800141a:	781b      	ldrb	r3, [r3, #0]
 800141c:	4618      	mov	r0, r3
 800141e:	f7ff fef7 	bl	8001210 <WriteDat>
				for(i=0;i<6;i++)
 8001422:	7bfb      	ldrb	r3, [r7, #15]
 8001424:	3301      	adds	r3, #1
 8001426:	73fb      	strb	r3, [r7, #15]
 8001428:	7bfb      	ldrb	r3, [r7, #15]
 800142a:	2b05      	cmp	r3, #5
 800142c:	d9ec      	bls.n	8001408 <OLED_ShowStr+0x5c>
				x += 6;
 800142e:	79fb      	ldrb	r3, [r7, #7]
 8001430:	3306      	adds	r3, #6
 8001432:	71fb      	strb	r3, [r7, #7]
				j++;
 8001434:	7bbb      	ldrb	r3, [r7, #14]
 8001436:	3301      	adds	r3, #1
 8001438:	73bb      	strb	r3, [r7, #14]
			while(ch[j] != '\0')
 800143a:	7bbb      	ldrb	r3, [r7, #14]
 800143c:	683a      	ldr	r2, [r7, #0]
 800143e:	4413      	add	r3, r2
 8001440:	781b      	ldrb	r3, [r3, #0]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d1c9      	bne.n	80013da <OLED_ShowStr+0x2e>
		}break;
 8001446:	e04d      	b.n	80014e4 <OLED_ShowStr+0x138>
				c = ch[j] - 32;
 8001448:	7bbb      	ldrb	r3, [r7, #14]
 800144a:	683a      	ldr	r2, [r7, #0]
 800144c:	4413      	add	r3, r2
 800144e:	781b      	ldrb	r3, [r3, #0]
 8001450:	3b20      	subs	r3, #32
 8001452:	737b      	strb	r3, [r7, #13]
				if(x > 120)
 8001454:	79fb      	ldrb	r3, [r7, #7]
 8001456:	2b78      	cmp	r3, #120	@ 0x78
 8001458:	d904      	bls.n	8001464 <OLED_ShowStr+0xb8>
					x = 0;
 800145a:	2300      	movs	r3, #0
 800145c:	71fb      	strb	r3, [r7, #7]
					y++;
 800145e:	79bb      	ldrb	r3, [r7, #6]
 8001460:	3301      	adds	r3, #1
 8001462:	71bb      	strb	r3, [r7, #6]
				OLED_SetPos(x,y);
 8001464:	79ba      	ldrb	r2, [r7, #6]
 8001466:	79fb      	ldrb	r3, [r7, #7]
 8001468:	4611      	mov	r1, r2
 800146a:	4618      	mov	r0, r3
 800146c:	f7ff ff43 	bl	80012f6 <OLED_SetPos>
				for(i=0;i<8;i++)
 8001470:	2300      	movs	r3, #0
 8001472:	73fb      	strb	r3, [r7, #15]
 8001474:	e00b      	b.n	800148e <OLED_ShowStr+0xe2>
					WriteDat(F8X16[c*16+i]);
 8001476:	7b7b      	ldrb	r3, [r7, #13]
 8001478:	011a      	lsls	r2, r3, #4
 800147a:	7bfb      	ldrb	r3, [r7, #15]
 800147c:	4413      	add	r3, r2
 800147e:	4a1c      	ldr	r2, [pc, #112]	@ (80014f0 <OLED_ShowStr+0x144>)
 8001480:	5cd3      	ldrb	r3, [r2, r3]
 8001482:	4618      	mov	r0, r3
 8001484:	f7ff fec4 	bl	8001210 <WriteDat>
				for(i=0;i<8;i++)
 8001488:	7bfb      	ldrb	r3, [r7, #15]
 800148a:	3301      	adds	r3, #1
 800148c:	73fb      	strb	r3, [r7, #15]
 800148e:	7bfb      	ldrb	r3, [r7, #15]
 8001490:	2b07      	cmp	r3, #7
 8001492:	d9f0      	bls.n	8001476 <OLED_ShowStr+0xca>
				OLED_SetPos(x,y+1);
 8001494:	79bb      	ldrb	r3, [r7, #6]
 8001496:	3301      	adds	r3, #1
 8001498:	b2da      	uxtb	r2, r3
 800149a:	79fb      	ldrb	r3, [r7, #7]
 800149c:	4611      	mov	r1, r2
 800149e:	4618      	mov	r0, r3
 80014a0:	f7ff ff29 	bl	80012f6 <OLED_SetPos>
				for(i=0;i<8;i++)
 80014a4:	2300      	movs	r3, #0
 80014a6:	73fb      	strb	r3, [r7, #15]
 80014a8:	e00c      	b.n	80014c4 <OLED_ShowStr+0x118>
					WriteDat(F8X16[c*16+i+8]);
 80014aa:	7b7b      	ldrb	r3, [r7, #13]
 80014ac:	011a      	lsls	r2, r3, #4
 80014ae:	7bfb      	ldrb	r3, [r7, #15]
 80014b0:	4413      	add	r3, r2
 80014b2:	3308      	adds	r3, #8
 80014b4:	4a0e      	ldr	r2, [pc, #56]	@ (80014f0 <OLED_ShowStr+0x144>)
 80014b6:	5cd3      	ldrb	r3, [r2, r3]
 80014b8:	4618      	mov	r0, r3
 80014ba:	f7ff fea9 	bl	8001210 <WriteDat>
				for(i=0;i<8;i++)
 80014be:	7bfb      	ldrb	r3, [r7, #15]
 80014c0:	3301      	adds	r3, #1
 80014c2:	73fb      	strb	r3, [r7, #15]
 80014c4:	7bfb      	ldrb	r3, [r7, #15]
 80014c6:	2b07      	cmp	r3, #7
 80014c8:	d9ef      	bls.n	80014aa <OLED_ShowStr+0xfe>
				x += 8;
 80014ca:	79fb      	ldrb	r3, [r7, #7]
 80014cc:	3308      	adds	r3, #8
 80014ce:	71fb      	strb	r3, [r7, #7]
				j++;
 80014d0:	7bbb      	ldrb	r3, [r7, #14]
 80014d2:	3301      	adds	r3, #1
 80014d4:	73bb      	strb	r3, [r7, #14]
			while(ch[j] != '\0')
 80014d6:	7bbb      	ldrb	r3, [r7, #14]
 80014d8:	683a      	ldr	r2, [r7, #0]
 80014da:	4413      	add	r3, r2
 80014dc:	781b      	ldrb	r3, [r3, #0]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d1b2      	bne.n	8001448 <OLED_ShowStr+0x9c>
		}break;
 80014e2:	bf00      	nop
}
 80014e4:	bf00      	nop
 80014e6:	3710      	adds	r7, #16
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	0800a578 	.word	0x0800a578
 80014f0:	0800a7a0 	.word	0x0800a7a0

080014f4 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b084      	sub	sp, #16
 80014f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80014fa:	f107 030c 	add.w	r3, r7, #12
 80014fe:	2100      	movs	r1, #0
 8001500:	460a      	mov	r2, r1
 8001502:	801a      	strh	r2, [r3, #0]
 8001504:	460a      	mov	r2, r1
 8001506:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 8001508:	2300      	movs	r3, #0
 800150a:	60bb      	str	r3, [r7, #8]

  /* USER CODE BEGIN RTC_Init 1 */
  __HAL_RCC_BKP_CLK_ENABLE();
 800150c:	4b31      	ldr	r3, [pc, #196]	@ (80015d4 <MX_RTC_Init+0xe0>)
 800150e:	69db      	ldr	r3, [r3, #28]
 8001510:	4a30      	ldr	r2, [pc, #192]	@ (80015d4 <MX_RTC_Init+0xe0>)
 8001512:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001516:	61d3      	str	r3, [r2, #28]
 8001518:	4b2e      	ldr	r3, [pc, #184]	@ (80015d4 <MX_RTC_Init+0xe0>)
 800151a:	69db      	ldr	r3, [r3, #28]
 800151c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001520:	607b      	str	r3, [r7, #4]
 8001522:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001524:	4b2b      	ldr	r3, [pc, #172]	@ (80015d4 <MX_RTC_Init+0xe0>)
 8001526:	69db      	ldr	r3, [r3, #28]
 8001528:	4a2a      	ldr	r2, [pc, #168]	@ (80015d4 <MX_RTC_Init+0xe0>)
 800152a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800152e:	61d3      	str	r3, [r2, #28]
 8001530:	4b28      	ldr	r3, [pc, #160]	@ (80015d4 <MX_RTC_Init+0xe0>)
 8001532:	69db      	ldr	r3, [r3, #28]
 8001534:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001538:	603b      	str	r3, [r7, #0]
 800153a:	683b      	ldr	r3, [r7, #0]
  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800153c:	4b26      	ldr	r3, [pc, #152]	@ (80015d8 <MX_RTC_Init+0xe4>)
 800153e:	4a27      	ldr	r2, [pc, #156]	@ (80015dc <MX_RTC_Init+0xe8>)
 8001540:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8001542:	4b25      	ldr	r3, [pc, #148]	@ (80015d8 <MX_RTC_Init+0xe4>)
 8001544:	f04f 32ff 	mov.w	r2, #4294967295
 8001548:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_NONE;
 800154a:	4b23      	ldr	r3, [pc, #140]	@ (80015d8 <MX_RTC_Init+0xe4>)
 800154c:	2200      	movs	r2, #0
 800154e:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001550:	4821      	ldr	r0, [pc, #132]	@ (80015d8 <MX_RTC_Init+0xe4>)
 8001552:	f002 ffdd 	bl	8004510 <HAL_RTC_Init>
 8001556:	4603      	mov	r3, r0
 8001558:	2b00      	cmp	r3, #0
 800155a:	d001      	beq.n	8001560 <MX_RTC_Init+0x6c>
  {
    Error_Handler();
 800155c:	f7ff fe3a 	bl	80011d4 <Error_Handler>
  }

  /* USER CODE BEGIN Check_RTC_BKUP */
  if (HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR1) != 0x5051)
 8001560:	2101      	movs	r1, #1
 8001562:	481d      	ldr	r0, [pc, #116]	@ (80015d8 <MX_RTC_Init+0xe4>)
 8001564:	f003 fb72 	bl	8004c4c <HAL_RTCEx_BKUPRead>
 8001568:	4603      	mov	r3, r0
 800156a:	f245 0251 	movw	r2, #20561	@ 0x5051
 800156e:	4293      	cmp	r3, r2
 8001570:	d02b      	beq.n	80015ca <MX_RTC_Init+0xd6>
  {
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001572:	2300      	movs	r3, #0
 8001574:	733b      	strb	r3, [r7, #12]
  sTime.Minutes = 0x0;
 8001576:	2300      	movs	r3, #0
 8001578:	737b      	strb	r3, [r7, #13]
  sTime.Seconds = 0x0;
 800157a:	2300      	movs	r3, #0
 800157c:	73bb      	strb	r3, [r7, #14]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800157e:	f107 030c 	add.w	r3, r7, #12
 8001582:	2201      	movs	r2, #1
 8001584:	4619      	mov	r1, r3
 8001586:	4814      	ldr	r0, [pc, #80]	@ (80015d8 <MX_RTC_Init+0xe4>)
 8001588:	f003 f84e 	bl	8004628 <HAL_RTC_SetTime>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d001      	beq.n	8001596 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8001592:	f7ff fe1f 	bl	80011d4 <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_SATURDAY;
 8001596:	2306      	movs	r3, #6
 8001598:	723b      	strb	r3, [r7, #8]
  DateToUpdate.Month = RTC_MONTH_FEBRUARY;
 800159a:	2302      	movs	r3, #2
 800159c:	727b      	strb	r3, [r7, #9]
  DateToUpdate.Date = 0x7;
 800159e:	2307      	movs	r3, #7
 80015a0:	72bb      	strb	r3, [r7, #10]
  DateToUpdate.Year = 0x25;
 80015a2:	2325      	movs	r3, #37	@ 0x25
 80015a4:	72fb      	strb	r3, [r7, #11]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 80015a6:	f107 0308 	add.w	r3, r7, #8
 80015aa:	2201      	movs	r2, #1
 80015ac:	4619      	mov	r1, r3
 80015ae:	480a      	ldr	r0, [pc, #40]	@ (80015d8 <MX_RTC_Init+0xe4>)
 80015b0:	f003 f8d2 	bl	8004758 <HAL_RTC_SetDate>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d001      	beq.n	80015be <MX_RTC_Init+0xca>
  {
    Error_Handler();
 80015ba:	f7ff fe0b 	bl	80011d4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */
	  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x5051);
 80015be:	f245 0251 	movw	r2, #20561	@ 0x5051
 80015c2:	2101      	movs	r1, #1
 80015c4:	4804      	ldr	r0, [pc, #16]	@ (80015d8 <MX_RTC_Init+0xe4>)
 80015c6:	f003 fb27 	bl	8004c18 <HAL_RTCEx_BKUPWrite>
  }
  /* USER CODE END RTC_Init 2 */

}
 80015ca:	bf00      	nop
 80015cc:	3710      	adds	r7, #16
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	40021000 	.word	0x40021000
 80015d8:	20000378 	.word	0x20000378
 80015dc:	40002800 	.word	0x40002800

080015e0 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b084      	sub	sp, #16
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a0b      	ldr	r2, [pc, #44]	@ (800161c <HAL_RTC_MspInit+0x3c>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d110      	bne.n	8001614 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 80015f2:	f002 fa05 	bl	8003a00 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 80015f6:	4b0a      	ldr	r3, [pc, #40]	@ (8001620 <HAL_RTC_MspInit+0x40>)
 80015f8:	69db      	ldr	r3, [r3, #28]
 80015fa:	4a09      	ldr	r2, [pc, #36]	@ (8001620 <HAL_RTC_MspInit+0x40>)
 80015fc:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001600:	61d3      	str	r3, [r2, #28]
 8001602:	4b07      	ldr	r3, [pc, #28]	@ (8001620 <HAL_RTC_MspInit+0x40>)
 8001604:	69db      	ldr	r3, [r3, #28]
 8001606:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800160a:	60fb      	str	r3, [r7, #12]
 800160c:	68fb      	ldr	r3, [r7, #12]
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800160e:	4b05      	ldr	r3, [pc, #20]	@ (8001624 <HAL_RTC_MspInit+0x44>)
 8001610:	2201      	movs	r2, #1
 8001612:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001614:	bf00      	nop
 8001616:	3710      	adds	r7, #16
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}
 800161c:	40002800 	.word	0x40002800
 8001620:	40021000 	.word	0x40021000
 8001624:	4242043c 	.word	0x4242043c

08001628 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001628:	b480      	push	{r7}
 800162a:	b085      	sub	sp, #20
 800162c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800162e:	4b15      	ldr	r3, [pc, #84]	@ (8001684 <HAL_MspInit+0x5c>)
 8001630:	699b      	ldr	r3, [r3, #24]
 8001632:	4a14      	ldr	r2, [pc, #80]	@ (8001684 <HAL_MspInit+0x5c>)
 8001634:	f043 0301 	orr.w	r3, r3, #1
 8001638:	6193      	str	r3, [r2, #24]
 800163a:	4b12      	ldr	r3, [pc, #72]	@ (8001684 <HAL_MspInit+0x5c>)
 800163c:	699b      	ldr	r3, [r3, #24]
 800163e:	f003 0301 	and.w	r3, r3, #1
 8001642:	60bb      	str	r3, [r7, #8]
 8001644:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001646:	4b0f      	ldr	r3, [pc, #60]	@ (8001684 <HAL_MspInit+0x5c>)
 8001648:	69db      	ldr	r3, [r3, #28]
 800164a:	4a0e      	ldr	r2, [pc, #56]	@ (8001684 <HAL_MspInit+0x5c>)
 800164c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001650:	61d3      	str	r3, [r2, #28]
 8001652:	4b0c      	ldr	r3, [pc, #48]	@ (8001684 <HAL_MspInit+0x5c>)
 8001654:	69db      	ldr	r3, [r3, #28]
 8001656:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800165a:	607b      	str	r3, [r7, #4]
 800165c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800165e:	4b0a      	ldr	r3, [pc, #40]	@ (8001688 <HAL_MspInit+0x60>)
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	60fb      	str	r3, [r7, #12]
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800166a:	60fb      	str	r3, [r7, #12]
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001672:	60fb      	str	r3, [r7, #12]
 8001674:	4a04      	ldr	r2, [pc, #16]	@ (8001688 <HAL_MspInit+0x60>)
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800167a:	bf00      	nop
 800167c:	3714      	adds	r7, #20
 800167e:	46bd      	mov	sp, r7
 8001680:	bc80      	pop	{r7}
 8001682:	4770      	bx	lr
 8001684:	40021000 	.word	0x40021000
 8001688:	40010000 	.word	0x40010000

0800168c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800168c:	b480      	push	{r7}
 800168e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001690:	bf00      	nop
 8001692:	e7fd      	b.n	8001690 <NMI_Handler+0x4>

08001694 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001694:	b480      	push	{r7}
 8001696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001698:	bf00      	nop
 800169a:	e7fd      	b.n	8001698 <HardFault_Handler+0x4>

0800169c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800169c:	b480      	push	{r7}
 800169e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016a0:	bf00      	nop
 80016a2:	e7fd      	b.n	80016a0 <MemManage_Handler+0x4>

080016a4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016a4:	b480      	push	{r7}
 80016a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016a8:	bf00      	nop
 80016aa:	e7fd      	b.n	80016a8 <BusFault_Handler+0x4>

080016ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016b0:	bf00      	nop
 80016b2:	e7fd      	b.n	80016b0 <UsageFault_Handler+0x4>

080016b4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016b4:	b480      	push	{r7}
 80016b6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016b8:	bf00      	nop
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bc80      	pop	{r7}
 80016be:	4770      	bx	lr

080016c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016c4:	bf00      	nop
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bc80      	pop	{r7}
 80016ca:	4770      	bx	lr

080016cc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016cc:	b480      	push	{r7}
 80016ce:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016d0:	bf00      	nop
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bc80      	pop	{r7}
 80016d6:	4770      	bx	lr

080016d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016dc:	f000 fb14 	bl	8001d08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016e0:	bf00      	nop
 80016e2:	bd80      	pop	{r7, pc}

080016e4 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80016e8:	2001      	movs	r0, #1
 80016ea:	f001 fcc5 	bl	8003078 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80016ee:	bf00      	nop
 80016f0:	bd80      	pop	{r7, pc}
	...

080016f4 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80016f8:	4802      	ldr	r0, [pc, #8]	@ (8001704 <DMA1_Channel5_IRQHandler+0x10>)
 80016fa:	f001 f9ed 	bl	8002ad8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80016fe:	bf00      	nop
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	200003dc 	.word	0x200003dc

08001708 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 800170c:	2020      	movs	r0, #32
 800170e:	f001 fcb3 	bl	8003078 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001712:	bf00      	nop
 8001714:	bd80      	pop	{r7, pc}
	...

08001718 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800171c:	4803      	ldr	r0, [pc, #12]	@ (800172c <USART1_IRQHandler+0x14>)
 800171e:	f003 fbb1 	bl	8004e84 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  UART_IRQHandler(&huart1);
 8001722:	4802      	ldr	r0, [pc, #8]	@ (800172c <USART1_IRQHandler+0x14>)
 8001724:	f000 f8b4 	bl	8001890 <UART_IRQHandler>
  /* USER CODE END USART1_IRQn 1 */
}
 8001728:	bf00      	nop
 800172a:	bd80      	pop	{r7, pc}
 800172c:	20000394 	.word	0x20000394

08001730 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 1 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b082      	sub	sp, #8
 8001734:	af00      	add	r7, sp, #0
 8001736:	4603      	mov	r3, r0
 8001738:	80fb      	strh	r3, [r7, #6]
	static uint32_t oldUWTick = 0;
	if ((uwTick - oldUWTick) < 200) return;
 800173a:	4b19      	ldr	r3, [pc, #100]	@ (80017a0 <HAL_GPIO_EXTI_Callback+0x70>)
 800173c:	681a      	ldr	r2, [r3, #0]
 800173e:	4b19      	ldr	r3, [pc, #100]	@ (80017a4 <HAL_GPIO_EXTI_Callback+0x74>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	1ad3      	subs	r3, r2, r3
 8001744:	2bc7      	cmp	r3, #199	@ 0xc7
 8001746:	d927      	bls.n	8001798 <HAL_GPIO_EXTI_Callback+0x68>
	oldUWTick = uwTick;
 8001748:	4b15      	ldr	r3, [pc, #84]	@ (80017a0 <HAL_GPIO_EXTI_Callback+0x70>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a15      	ldr	r2, [pc, #84]	@ (80017a4 <HAL_GPIO_EXTI_Callback+0x74>)
 800174e:	6013      	str	r3, [r2, #0]
	if (GPIO_Pin == GPIO_PIN_5)
 8001750:	88fb      	ldrh	r3, [r7, #6]
 8001752:	2b20      	cmp	r3, #32
 8001754:	d10e      	bne.n	8001774 <HAL_GPIO_EXTI_Callback+0x44>
	{
		LED_Control(LED1, ON);
 8001756:	2101      	movs	r1, #1
 8001758:	2001      	movs	r0, #1
 800175a:	f7ff fbed 	bl	8000f38 <LED_Control>
		LED_Control(LED2, ON);
 800175e:	2101      	movs	r1, #1
 8001760:	2002      	movs	r0, #2
 8001762:	f7ff fbe9 	bl	8000f38 <LED_Control>
		Key_Value = GPIO_PIN_5;
 8001766:	4b10      	ldr	r3, [pc, #64]	@ (80017a8 <HAL_GPIO_EXTI_Callback+0x78>)
 8001768:	2220      	movs	r2, #32
 800176a:	701a      	strb	r2, [r3, #0]
		printf("GPIO pin 5 has pressed\n");
 800176c:	480f      	ldr	r0, [pc, #60]	@ (80017ac <HAL_GPIO_EXTI_Callback+0x7c>)
 800176e:	f005 fa17 	bl	8006ba0 <puts>
 8001772:	e012      	b.n	800179a <HAL_GPIO_EXTI_Callback+0x6a>
	}
	else if (GPIO_Pin == GPIO_PIN_0)
 8001774:	88fb      	ldrh	r3, [r7, #6]
 8001776:	2b01      	cmp	r3, #1
 8001778:	d10f      	bne.n	800179a <HAL_GPIO_EXTI_Callback+0x6a>
	{
		LED_Control(LED1, OFF);
 800177a:	2100      	movs	r1, #0
 800177c:	2001      	movs	r0, #1
 800177e:	f7ff fbdb 	bl	8000f38 <LED_Control>
		LED_Control(LED2, OFF);
 8001782:	2100      	movs	r1, #0
 8001784:	2002      	movs	r0, #2
 8001786:	f7ff fbd7 	bl	8000f38 <LED_Control>
		Key_Value = GPIO_PIN_0;
 800178a:	4b07      	ldr	r3, [pc, #28]	@ (80017a8 <HAL_GPIO_EXTI_Callback+0x78>)
 800178c:	2201      	movs	r2, #1
 800178e:	701a      	strb	r2, [r3, #0]
		printf("GPIO pin 0 has pressed\n");
 8001790:	4807      	ldr	r0, [pc, #28]	@ (80017b0 <HAL_GPIO_EXTI_Callback+0x80>)
 8001792:	f005 fa05 	bl	8006ba0 <puts>
 8001796:	e000      	b.n	800179a <HAL_GPIO_EXTI_Callback+0x6a>
	if ((uwTick - oldUWTick) < 200) return;
 8001798:	bf00      	nop
	}
}
 800179a:	3708      	adds	r7, #8
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}
 80017a0:	20000420 	.word	0x20000420
 80017a4:	2000038c 	.word	0x2000038c
 80017a8:	20000375 	.word	0x20000375
 80017ac:	0800a528 	.word	0x0800a528
 80017b0:	0800a540 	.word	0x0800a540

080017b4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b084      	sub	sp, #16
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a12      	ldr	r2, [pc, #72]	@ (800180c <HAL_UART_RxCpltCallback+0x58>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d11e      	bne.n	8001804 <HAL_UART_RxCpltCallback+0x50>
	{
		//HAL_UART_Transmit(&huart1, RX1_Buffer, 4, HAL_MAX_DELAY);
		//HAL_UART_Receive_IT(&huart1, RX1_Buffer, 4);
//		HAL_UART_Transmit_DMA(huart, RX1_Buffer, 1);
//		HAL_UART_Receive_IT(huart, RX1_Buffer, 1);
		uint8_t length = DMA_BUF_SIZE - RX1_OffSet;
 80017c6:	4b12      	ldr	r3, [pc, #72]	@ (8001810 <HAL_UART_RxCpltCallback+0x5c>)
 80017c8:	781b      	ldrb	r3, [r3, #0]
 80017ca:	425b      	negs	r3, r3
 80017cc:	73fb      	strb	r3, [r7, #15]
		HAL_UART_Transmit(huart, RX1_Buffer + RX1_OffSet, length, HAL_MAX_DELAY);
 80017ce:	4b10      	ldr	r3, [pc, #64]	@ (8001810 <HAL_UART_RxCpltCallback+0x5c>)
 80017d0:	781b      	ldrb	r3, [r3, #0]
 80017d2:	461a      	mov	r2, r3
 80017d4:	4b0f      	ldr	r3, [pc, #60]	@ (8001814 <HAL_UART_RxCpltCallback+0x60>)
 80017d6:	18d1      	adds	r1, r2, r3
 80017d8:	7bfb      	ldrb	r3, [r7, #15]
 80017da:	b29a      	uxth	r2, r3
 80017dc:	f04f 33ff 	mov.w	r3, #4294967295
 80017e0:	6878      	ldr	r0, [r7, #4]
 80017e2:	f003 fa9f 	bl	8004d24 <HAL_UART_Transmit>
		printf("\n");
 80017e6:	200a      	movs	r0, #10
 80017e8:	f005 f97c 	bl	8006ae4 <putchar>
		printf("RX1_OffSet=%d\n", RX1_OffSet + length);
 80017ec:	4b08      	ldr	r3, [pc, #32]	@ (8001810 <HAL_UART_RxCpltCallback+0x5c>)
 80017ee:	781b      	ldrb	r3, [r3, #0]
 80017f0:	461a      	mov	r2, r3
 80017f2:	7bfb      	ldrb	r3, [r7, #15]
 80017f4:	4413      	add	r3, r2
 80017f6:	4619      	mov	r1, r3
 80017f8:	4807      	ldr	r0, [pc, #28]	@ (8001818 <HAL_UART_RxCpltCallback+0x64>)
 80017fa:	f005 f961 	bl	8006ac0 <iprintf>
		RX1_OffSet = 0;
 80017fe:	4b04      	ldr	r3, [pc, #16]	@ (8001810 <HAL_UART_RxCpltCallback+0x5c>)
 8001800:	2200      	movs	r2, #0
 8001802:	701a      	strb	r2, [r3, #0]
	}
}
 8001804:	bf00      	nop
 8001806:	3710      	adds	r7, #16
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}
 800180c:	40013800 	.word	0x40013800
 8001810:	20000374 	.word	0x20000374
 8001814:	20000274 	.word	0x20000274
 8001818:	0800a558 	.word	0x0800a558

0800181c <HAL_UART_RxHalfCpltCallback>:

void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b084      	sub	sp, #16
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4a15      	ldr	r2, [pc, #84]	@ (8001880 <HAL_UART_RxHalfCpltCallback+0x64>)
 800182a:	4293      	cmp	r3, r2
 800182c:	d124      	bne.n	8001878 <HAL_UART_RxHalfCpltCallback+0x5c>
	{
		uint8_t length = DMA_BUF_SIZE / 2 - RX1_OffSet;
 800182e:	4b15      	ldr	r3, [pc, #84]	@ (8001884 <HAL_UART_RxHalfCpltCallback+0x68>)
 8001830:	781a      	ldrb	r2, [r3, #0]
 8001832:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 8001836:	1a9b      	subs	r3, r3, r2
 8001838:	73fb      	strb	r3, [r7, #15]
		//printf("HLength=%d\n", length);
		HAL_UART_Transmit(huart, RX1_Buffer + RX1_OffSet, length, HAL_MAX_DELAY);
 800183a:	4b12      	ldr	r3, [pc, #72]	@ (8001884 <HAL_UART_RxHalfCpltCallback+0x68>)
 800183c:	781b      	ldrb	r3, [r3, #0]
 800183e:	461a      	mov	r2, r3
 8001840:	4b11      	ldr	r3, [pc, #68]	@ (8001888 <HAL_UART_RxHalfCpltCallback+0x6c>)
 8001842:	18d1      	adds	r1, r2, r3
 8001844:	7bfb      	ldrb	r3, [r7, #15]
 8001846:	b29a      	uxth	r2, r3
 8001848:	f04f 33ff 	mov.w	r3, #4294967295
 800184c:	6878      	ldr	r0, [r7, #4]
 800184e:	f003 fa69 	bl	8004d24 <HAL_UART_Transmit>
		printf("\n");
 8001852:	200a      	movs	r0, #10
 8001854:	f005 f946 	bl	8006ae4 <putchar>
		printf("RX1_OffSet=%d\n", RX1_OffSet + length);
 8001858:	4b0a      	ldr	r3, [pc, #40]	@ (8001884 <HAL_UART_RxHalfCpltCallback+0x68>)
 800185a:	781b      	ldrb	r3, [r3, #0]
 800185c:	461a      	mov	r2, r3
 800185e:	7bfb      	ldrb	r3, [r7, #15]
 8001860:	4413      	add	r3, r2
 8001862:	4619      	mov	r1, r3
 8001864:	4809      	ldr	r0, [pc, #36]	@ (800188c <HAL_UART_RxHalfCpltCallback+0x70>)
 8001866:	f005 f92b 	bl	8006ac0 <iprintf>
		RX1_OffSet += length;
 800186a:	4b06      	ldr	r3, [pc, #24]	@ (8001884 <HAL_UART_RxHalfCpltCallback+0x68>)
 800186c:	781a      	ldrb	r2, [r3, #0]
 800186e:	7bfb      	ldrb	r3, [r7, #15]
 8001870:	4413      	add	r3, r2
 8001872:	b2da      	uxtb	r2, r3
 8001874:	4b03      	ldr	r3, [pc, #12]	@ (8001884 <HAL_UART_RxHalfCpltCallback+0x68>)
 8001876:	701a      	strb	r2, [r3, #0]
	}
}
 8001878:	bf00      	nop
 800187a:	3710      	adds	r7, #16
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}
 8001880:	40013800 	.word	0x40013800
 8001884:	20000374 	.word	0x20000374
 8001888:	20000274 	.word	0x20000274
 800188c:	0800a558 	.word	0x0800a558

08001890 <UART_IRQHandler>:

void UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b084      	sub	sp, #16
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a1e      	ldr	r2, [pc, #120]	@ (8001918 <UART_IRQHandler+0x88>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d136      	bne.n	8001910 <UART_IRQHandler+0x80>
	{
		if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) != RESET)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f003 0310 	and.w	r3, r3, #16
 80018ac:	2b10      	cmp	r3, #16
 80018ae:	d12f      	bne.n	8001910 <UART_IRQHandler+0x80>
		{
			__HAL_UART_CLEAR_IDLEFLAG(huart);
 80018b0:	2300      	movs	r3, #0
 80018b2:	60bb      	str	r3, [r7, #8]
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	60bb      	str	r3, [r7, #8]
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	60bb      	str	r3, [r7, #8]
 80018c4:	68bb      	ldr	r3, [r7, #8]
			uint8_t length = DMA_BUF_SIZE - __HAL_DMA_GET_COUNTER(&hdma_usart1_rx) - RX1_OffSet;
 80018c6:	4b15      	ldr	r3, [pc, #84]	@ (800191c <UART_IRQHandler+0x8c>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	b2da      	uxtb	r2, r3
 80018ce:	4b14      	ldr	r3, [pc, #80]	@ (8001920 <UART_IRQHandler+0x90>)
 80018d0:	781b      	ldrb	r3, [r3, #0]
 80018d2:	4413      	add	r3, r2
 80018d4:	b2db      	uxtb	r3, r3
 80018d6:	425b      	negs	r3, r3
 80018d8:	73fb      	strb	r3, [r7, #15]
			HAL_UART_Transmit(huart, RX1_Buffer + RX1_OffSet, length, HAL_MAX_DELAY);
 80018da:	4b11      	ldr	r3, [pc, #68]	@ (8001920 <UART_IRQHandler+0x90>)
 80018dc:	781b      	ldrb	r3, [r3, #0]
 80018de:	461a      	mov	r2, r3
 80018e0:	4b10      	ldr	r3, [pc, #64]	@ (8001924 <UART_IRQHandler+0x94>)
 80018e2:	18d1      	adds	r1, r2, r3
 80018e4:	7bfb      	ldrb	r3, [r7, #15]
 80018e6:	b29a      	uxth	r2, r3
 80018e8:	f04f 33ff 	mov.w	r3, #4294967295
 80018ec:	6878      	ldr	r0, [r7, #4]
 80018ee:	f003 fa19 	bl	8004d24 <HAL_UART_Transmit>
			printf("\n");
 80018f2:	200a      	movs	r0, #10
 80018f4:	f005 f8f6 	bl	8006ae4 <putchar>
			printf("Idle Length=%d\n", length);
 80018f8:	7bfb      	ldrb	r3, [r7, #15]
 80018fa:	4619      	mov	r1, r3
 80018fc:	480a      	ldr	r0, [pc, #40]	@ (8001928 <UART_IRQHandler+0x98>)
 80018fe:	f005 f8df 	bl	8006ac0 <iprintf>
			RX1_OffSet += length;
 8001902:	4b07      	ldr	r3, [pc, #28]	@ (8001920 <UART_IRQHandler+0x90>)
 8001904:	781a      	ldrb	r2, [r3, #0]
 8001906:	7bfb      	ldrb	r3, [r7, #15]
 8001908:	4413      	add	r3, r2
 800190a:	b2da      	uxtb	r2, r3
 800190c:	4b04      	ldr	r3, [pc, #16]	@ (8001920 <UART_IRQHandler+0x90>)
 800190e:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8001910:	bf00      	nop
 8001912:	3710      	adds	r7, #16
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}
 8001918:	40013800 	.word	0x40013800
 800191c:	200003dc 	.word	0x200003dc
 8001920:	20000374 	.word	0x20000374
 8001924:	20000274 	.word	0x20000274
 8001928:	0800a568 	.word	0x0800a568

0800192c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800192c:	b480      	push	{r7}
 800192e:	af00      	add	r7, sp, #0
  return 1;
 8001930:	2301      	movs	r3, #1
}
 8001932:	4618      	mov	r0, r3
 8001934:	46bd      	mov	sp, r7
 8001936:	bc80      	pop	{r7}
 8001938:	4770      	bx	lr

0800193a <_kill>:

int _kill(int pid, int sig)
{
 800193a:	b580      	push	{r7, lr}
 800193c:	b082      	sub	sp, #8
 800193e:	af00      	add	r7, sp, #0
 8001940:	6078      	str	r0, [r7, #4]
 8001942:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001944:	f005 fa7e 	bl	8006e44 <__errno>
 8001948:	4603      	mov	r3, r0
 800194a:	2216      	movs	r2, #22
 800194c:	601a      	str	r2, [r3, #0]
  return -1;
 800194e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001952:	4618      	mov	r0, r3
 8001954:	3708      	adds	r7, #8
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}

0800195a <_exit>:

void _exit (int status)
{
 800195a:	b580      	push	{r7, lr}
 800195c:	b082      	sub	sp, #8
 800195e:	af00      	add	r7, sp, #0
 8001960:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001962:	f04f 31ff 	mov.w	r1, #4294967295
 8001966:	6878      	ldr	r0, [r7, #4]
 8001968:	f7ff ffe7 	bl	800193a <_kill>
  while (1) {}    /* Make sure we hang here */
 800196c:	bf00      	nop
 800196e:	e7fd      	b.n	800196c <_exit+0x12>

08001970 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b086      	sub	sp, #24
 8001974:	af00      	add	r7, sp, #0
 8001976:	60f8      	str	r0, [r7, #12]
 8001978:	60b9      	str	r1, [r7, #8]
 800197a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800197c:	2300      	movs	r3, #0
 800197e:	617b      	str	r3, [r7, #20]
 8001980:	e00a      	b.n	8001998 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001982:	f3af 8000 	nop.w
 8001986:	4601      	mov	r1, r0
 8001988:	68bb      	ldr	r3, [r7, #8]
 800198a:	1c5a      	adds	r2, r3, #1
 800198c:	60ba      	str	r2, [r7, #8]
 800198e:	b2ca      	uxtb	r2, r1
 8001990:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001992:	697b      	ldr	r3, [r7, #20]
 8001994:	3301      	adds	r3, #1
 8001996:	617b      	str	r3, [r7, #20]
 8001998:	697a      	ldr	r2, [r7, #20]
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	429a      	cmp	r2, r3
 800199e:	dbf0      	blt.n	8001982 <_read+0x12>
  }

  return len;
 80019a0:	687b      	ldr	r3, [r7, #4]
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	3718      	adds	r7, #24
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}

080019aa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80019aa:	b580      	push	{r7, lr}
 80019ac:	b086      	sub	sp, #24
 80019ae:	af00      	add	r7, sp, #0
 80019b0:	60f8      	str	r0, [r7, #12]
 80019b2:	60b9      	str	r1, [r7, #8]
 80019b4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019b6:	2300      	movs	r3, #0
 80019b8:	617b      	str	r3, [r7, #20]
 80019ba:	e009      	b.n	80019d0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80019bc:	68bb      	ldr	r3, [r7, #8]
 80019be:	1c5a      	adds	r2, r3, #1
 80019c0:	60ba      	str	r2, [r7, #8]
 80019c2:	781b      	ldrb	r3, [r3, #0]
 80019c4:	4618      	mov	r0, r3
 80019c6:	f000 f921 	bl	8001c0c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019ca:	697b      	ldr	r3, [r7, #20]
 80019cc:	3301      	adds	r3, #1
 80019ce:	617b      	str	r3, [r7, #20]
 80019d0:	697a      	ldr	r2, [r7, #20]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	429a      	cmp	r2, r3
 80019d6:	dbf1      	blt.n	80019bc <_write+0x12>
  }
  return len;
 80019d8:	687b      	ldr	r3, [r7, #4]
}
 80019da:	4618      	mov	r0, r3
 80019dc:	3718      	adds	r7, #24
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}

080019e2 <_close>:

int _close(int file)
{
 80019e2:	b480      	push	{r7}
 80019e4:	b083      	sub	sp, #12
 80019e6:	af00      	add	r7, sp, #0
 80019e8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80019ea:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	370c      	adds	r7, #12
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bc80      	pop	{r7}
 80019f6:	4770      	bx	lr

080019f8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b083      	sub	sp, #12
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
 8001a00:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001a08:	605a      	str	r2, [r3, #4]
  return 0;
 8001a0a:	2300      	movs	r3, #0
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	370c      	adds	r7, #12
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bc80      	pop	{r7}
 8001a14:	4770      	bx	lr

08001a16 <_isatty>:

int _isatty(int file)
{
 8001a16:	b480      	push	{r7}
 8001a18:	b083      	sub	sp, #12
 8001a1a:	af00      	add	r7, sp, #0
 8001a1c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001a1e:	2301      	movs	r3, #1
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	370c      	adds	r7, #12
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bc80      	pop	{r7}
 8001a28:	4770      	bx	lr

08001a2a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a2a:	b480      	push	{r7}
 8001a2c:	b085      	sub	sp, #20
 8001a2e:	af00      	add	r7, sp, #0
 8001a30:	60f8      	str	r0, [r7, #12]
 8001a32:	60b9      	str	r1, [r7, #8]
 8001a34:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001a36:	2300      	movs	r3, #0
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	3714      	adds	r7, #20
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bc80      	pop	{r7}
 8001a40:	4770      	bx	lr
	...

08001a44 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b086      	sub	sp, #24
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a4c:	4a14      	ldr	r2, [pc, #80]	@ (8001aa0 <_sbrk+0x5c>)
 8001a4e:	4b15      	ldr	r3, [pc, #84]	@ (8001aa4 <_sbrk+0x60>)
 8001a50:	1ad3      	subs	r3, r2, r3
 8001a52:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a58:	4b13      	ldr	r3, [pc, #76]	@ (8001aa8 <_sbrk+0x64>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d102      	bne.n	8001a66 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a60:	4b11      	ldr	r3, [pc, #68]	@ (8001aa8 <_sbrk+0x64>)
 8001a62:	4a12      	ldr	r2, [pc, #72]	@ (8001aac <_sbrk+0x68>)
 8001a64:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a66:	4b10      	ldr	r3, [pc, #64]	@ (8001aa8 <_sbrk+0x64>)
 8001a68:	681a      	ldr	r2, [r3, #0]
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	4413      	add	r3, r2
 8001a6e:	693a      	ldr	r2, [r7, #16]
 8001a70:	429a      	cmp	r2, r3
 8001a72:	d207      	bcs.n	8001a84 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a74:	f005 f9e6 	bl	8006e44 <__errno>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	220c      	movs	r2, #12
 8001a7c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a7e:	f04f 33ff 	mov.w	r3, #4294967295
 8001a82:	e009      	b.n	8001a98 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a84:	4b08      	ldr	r3, [pc, #32]	@ (8001aa8 <_sbrk+0x64>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a8a:	4b07      	ldr	r3, [pc, #28]	@ (8001aa8 <_sbrk+0x64>)
 8001a8c:	681a      	ldr	r2, [r3, #0]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	4413      	add	r3, r2
 8001a92:	4a05      	ldr	r2, [pc, #20]	@ (8001aa8 <_sbrk+0x64>)
 8001a94:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a96:	68fb      	ldr	r3, [r7, #12]
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	3718      	adds	r7, #24
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}
 8001aa0:	20005000 	.word	0x20005000
 8001aa4:	00000400 	.word	0x00000400
 8001aa8:	20000390 	.word	0x20000390
 8001aac:	20000570 	.word	0x20000570

08001ab0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ab4:	bf00      	nop
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bc80      	pop	{r7}
 8001aba:	4770      	bx	lr

08001abc <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001ac0:	4b11      	ldr	r3, [pc, #68]	@ (8001b08 <MX_USART1_UART_Init+0x4c>)
 8001ac2:	4a12      	ldr	r2, [pc, #72]	@ (8001b0c <MX_USART1_UART_Init+0x50>)
 8001ac4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001ac6:	4b10      	ldr	r3, [pc, #64]	@ (8001b08 <MX_USART1_UART_Init+0x4c>)
 8001ac8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001acc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001ace:	4b0e      	ldr	r3, [pc, #56]	@ (8001b08 <MX_USART1_UART_Init+0x4c>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001ad4:	4b0c      	ldr	r3, [pc, #48]	@ (8001b08 <MX_USART1_UART_Init+0x4c>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001ada:	4b0b      	ldr	r3, [pc, #44]	@ (8001b08 <MX_USART1_UART_Init+0x4c>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001ae0:	4b09      	ldr	r3, [pc, #36]	@ (8001b08 <MX_USART1_UART_Init+0x4c>)
 8001ae2:	220c      	movs	r2, #12
 8001ae4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ae6:	4b08      	ldr	r3, [pc, #32]	@ (8001b08 <MX_USART1_UART_Init+0x4c>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001aec:	4b06      	ldr	r3, [pc, #24]	@ (8001b08 <MX_USART1_UART_Init+0x4c>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001af2:	4805      	ldr	r0, [pc, #20]	@ (8001b08 <MX_USART1_UART_Init+0x4c>)
 8001af4:	f003 f8c6 	bl	8004c84 <HAL_UART_Init>
 8001af8:	4603      	mov	r3, r0
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d001      	beq.n	8001b02 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001afe:	f7ff fb69 	bl	80011d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001b02:	bf00      	nop
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	20000394 	.word	0x20000394
 8001b0c:	40013800 	.word	0x40013800

08001b10 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b088      	sub	sp, #32
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b18:	f107 0310 	add.w	r3, r7, #16
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	601a      	str	r2, [r3, #0]
 8001b20:	605a      	str	r2, [r3, #4]
 8001b22:	609a      	str	r2, [r3, #8]
 8001b24:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4a33      	ldr	r2, [pc, #204]	@ (8001bf8 <HAL_UART_MspInit+0xe8>)
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	d15f      	bne.n	8001bf0 <HAL_UART_MspInit+0xe0>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001b30:	4b32      	ldr	r3, [pc, #200]	@ (8001bfc <HAL_UART_MspInit+0xec>)
 8001b32:	699b      	ldr	r3, [r3, #24]
 8001b34:	4a31      	ldr	r2, [pc, #196]	@ (8001bfc <HAL_UART_MspInit+0xec>)
 8001b36:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b3a:	6193      	str	r3, [r2, #24]
 8001b3c:	4b2f      	ldr	r3, [pc, #188]	@ (8001bfc <HAL_UART_MspInit+0xec>)
 8001b3e:	699b      	ldr	r3, [r3, #24]
 8001b40:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b44:	60fb      	str	r3, [r7, #12]
 8001b46:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b48:	4b2c      	ldr	r3, [pc, #176]	@ (8001bfc <HAL_UART_MspInit+0xec>)
 8001b4a:	699b      	ldr	r3, [r3, #24]
 8001b4c:	4a2b      	ldr	r2, [pc, #172]	@ (8001bfc <HAL_UART_MspInit+0xec>)
 8001b4e:	f043 0304 	orr.w	r3, r3, #4
 8001b52:	6193      	str	r3, [r2, #24]
 8001b54:	4b29      	ldr	r3, [pc, #164]	@ (8001bfc <HAL_UART_MspInit+0xec>)
 8001b56:	699b      	ldr	r3, [r3, #24]
 8001b58:	f003 0304 	and.w	r3, r3, #4
 8001b5c:	60bb      	str	r3, [r7, #8]
 8001b5e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001b60:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001b64:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b66:	2302      	movs	r3, #2
 8001b68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b6a:	2303      	movs	r3, #3
 8001b6c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b6e:	f107 0310 	add.w	r3, r7, #16
 8001b72:	4619      	mov	r1, r3
 8001b74:	4822      	ldr	r0, [pc, #136]	@ (8001c00 <HAL_UART_MspInit+0xf0>)
 8001b76:	f001 f8e3 	bl	8002d40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001b7a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001b7e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b80:	2300      	movs	r3, #0
 8001b82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b84:	2301      	movs	r3, #1
 8001b86:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b88:	f107 0310 	add.w	r3, r7, #16
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	481c      	ldr	r0, [pc, #112]	@ (8001c00 <HAL_UART_MspInit+0xf0>)
 8001b90:	f001 f8d6 	bl	8002d40 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8001b94:	4b1b      	ldr	r3, [pc, #108]	@ (8001c04 <HAL_UART_MspInit+0xf4>)
 8001b96:	4a1c      	ldr	r2, [pc, #112]	@ (8001c08 <HAL_UART_MspInit+0xf8>)
 8001b98:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001b9a:	4b1a      	ldr	r3, [pc, #104]	@ (8001c04 <HAL_UART_MspInit+0xf4>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ba0:	4b18      	ldr	r3, [pc, #96]	@ (8001c04 <HAL_UART_MspInit+0xf4>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001ba6:	4b17      	ldr	r3, [pc, #92]	@ (8001c04 <HAL_UART_MspInit+0xf4>)
 8001ba8:	2280      	movs	r2, #128	@ 0x80
 8001baa:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001bac:	4b15      	ldr	r3, [pc, #84]	@ (8001c04 <HAL_UART_MspInit+0xf4>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001bb2:	4b14      	ldr	r3, [pc, #80]	@ (8001c04 <HAL_UART_MspInit+0xf4>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8001bb8:	4b12      	ldr	r3, [pc, #72]	@ (8001c04 <HAL_UART_MspInit+0xf4>)
 8001bba:	2220      	movs	r2, #32
 8001bbc:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001bbe:	4b11      	ldr	r3, [pc, #68]	@ (8001c04 <HAL_UART_MspInit+0xf4>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001bc4:	480f      	ldr	r0, [pc, #60]	@ (8001c04 <HAL_UART_MspInit+0xf4>)
 8001bc6:	f000 fe19 	bl	80027fc <HAL_DMA_Init>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d001      	beq.n	8001bd4 <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 8001bd0:	f7ff fb00 	bl	80011d4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	4a0b      	ldr	r2, [pc, #44]	@ (8001c04 <HAL_UART_MspInit+0xf4>)
 8001bd8:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001bda:	4a0a      	ldr	r2, [pc, #40]	@ (8001c04 <HAL_UART_MspInit+0xf4>)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001be0:	2200      	movs	r2, #0
 8001be2:	2100      	movs	r1, #0
 8001be4:	2025      	movs	r0, #37	@ 0x25
 8001be6:	f000 fdd2 	bl	800278e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001bea:	2025      	movs	r0, #37	@ 0x25
 8001bec:	f000 fdeb 	bl	80027c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001bf0:	bf00      	nop
 8001bf2:	3720      	adds	r7, #32
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bd80      	pop	{r7, pc}
 8001bf8:	40013800 	.word	0x40013800
 8001bfc:	40021000 	.word	0x40021000
 8001c00:	40010800 	.word	0x40010800
 8001c04:	200003dc 	.word	0x200003dc
 8001c08:	40020058 	.word	0x40020058

08001c0c <__io_putchar>:
  }
}

/* USER CODE BEGIN 1 */
int __io_putchar(int ch)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b082      	sub	sp, #8
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8001c14:	1d39      	adds	r1, r7, #4
 8001c16:	f04f 33ff 	mov.w	r3, #4294967295
 8001c1a:	2201      	movs	r2, #1
 8001c1c:	4803      	ldr	r0, [pc, #12]	@ (8001c2c <__io_putchar+0x20>)
 8001c1e:	f003 f881 	bl	8004d24 <HAL_UART_Transmit>
  return ch;
 8001c22:	687b      	ldr	r3, [r7, #4]
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	3708      	adds	r7, #8
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}
 8001c2c:	20000394 	.word	0x20000394

08001c30 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001c30:	f7ff ff3e 	bl	8001ab0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c34:	480b      	ldr	r0, [pc, #44]	@ (8001c64 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001c36:	490c      	ldr	r1, [pc, #48]	@ (8001c68 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001c38:	4a0c      	ldr	r2, [pc, #48]	@ (8001c6c <LoopFillZerobss+0x16>)
  movs r3, #0
 8001c3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c3c:	e002      	b.n	8001c44 <LoopCopyDataInit>

08001c3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c42:	3304      	adds	r3, #4

08001c44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c48:	d3f9      	bcc.n	8001c3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c4a:	4a09      	ldr	r2, [pc, #36]	@ (8001c70 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001c4c:	4c09      	ldr	r4, [pc, #36]	@ (8001c74 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001c4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c50:	e001      	b.n	8001c56 <LoopFillZerobss>

08001c52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c54:	3204      	adds	r2, #4

08001c56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c58:	d3fb      	bcc.n	8001c52 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c5a:	f005 f8f9 	bl	8006e50 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001c5e:	f7ff fa21 	bl	80010a4 <main>
  bx lr
 8001c62:	4770      	bx	lr
  ldr r0, =_sdata
 8001c64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c68:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001c6c:	0800b210 	.word	0x0800b210
  ldr r2, =_sbss
 8001c70:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001c74:	20000570 	.word	0x20000570

08001c78 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001c78:	e7fe      	b.n	8001c78 <ADC1_2_IRQHandler>
	...

08001c7c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c80:	4b08      	ldr	r3, [pc, #32]	@ (8001ca4 <HAL_Init+0x28>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a07      	ldr	r2, [pc, #28]	@ (8001ca4 <HAL_Init+0x28>)
 8001c86:	f043 0310 	orr.w	r3, r3, #16
 8001c8a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c8c:	2003      	movs	r0, #3
 8001c8e:	f000 fd73 	bl	8002778 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c92:	200f      	movs	r0, #15
 8001c94:	f000 f808 	bl	8001ca8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c98:	f7ff fcc6 	bl	8001628 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c9c:	2300      	movs	r3, #0
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	40022000 	.word	0x40022000

08001ca8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b082      	sub	sp, #8
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001cb0:	4b12      	ldr	r3, [pc, #72]	@ (8001cfc <HAL_InitTick+0x54>)
 8001cb2:	681a      	ldr	r2, [r3, #0]
 8001cb4:	4b12      	ldr	r3, [pc, #72]	@ (8001d00 <HAL_InitTick+0x58>)
 8001cb6:	781b      	ldrb	r3, [r3, #0]
 8001cb8:	4619      	mov	r1, r3
 8001cba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001cbe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001cc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f000 fd8b 	bl	80027e2 <HAL_SYSTICK_Config>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d001      	beq.n	8001cd6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	e00e      	b.n	8001cf4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2b0f      	cmp	r3, #15
 8001cda:	d80a      	bhi.n	8001cf2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cdc:	2200      	movs	r2, #0
 8001cde:	6879      	ldr	r1, [r7, #4]
 8001ce0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ce4:	f000 fd53 	bl	800278e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ce8:	4a06      	ldr	r2, [pc, #24]	@ (8001d04 <HAL_InitTick+0x5c>)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	e000      	b.n	8001cf4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001cf2:	2301      	movs	r3, #1
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	3708      	adds	r7, #8
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}
 8001cfc:	20000000 	.word	0x20000000
 8001d00:	20000008 	.word	0x20000008
 8001d04:	20000004 	.word	0x20000004

08001d08 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d0c:	4b05      	ldr	r3, [pc, #20]	@ (8001d24 <HAL_IncTick+0x1c>)
 8001d0e:	781b      	ldrb	r3, [r3, #0]
 8001d10:	461a      	mov	r2, r3
 8001d12:	4b05      	ldr	r3, [pc, #20]	@ (8001d28 <HAL_IncTick+0x20>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4413      	add	r3, r2
 8001d18:	4a03      	ldr	r2, [pc, #12]	@ (8001d28 <HAL_IncTick+0x20>)
 8001d1a:	6013      	str	r3, [r2, #0]
}
 8001d1c:	bf00      	nop
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bc80      	pop	{r7}
 8001d22:	4770      	bx	lr
 8001d24:	20000008 	.word	0x20000008
 8001d28:	20000420 	.word	0x20000420

08001d2c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	af00      	add	r7, sp, #0
  return uwTick;
 8001d30:	4b02      	ldr	r3, [pc, #8]	@ (8001d3c <HAL_GetTick+0x10>)
 8001d32:	681b      	ldr	r3, [r3, #0]
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bc80      	pop	{r7}
 8001d3a:	4770      	bx	lr
 8001d3c:	20000420 	.word	0x20000420

08001d40 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b084      	sub	sp, #16
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d48:	f7ff fff0 	bl	8001d2c <HAL_GetTick>
 8001d4c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d58:	d005      	beq.n	8001d66 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d5a:	4b0a      	ldr	r3, [pc, #40]	@ (8001d84 <HAL_Delay+0x44>)
 8001d5c:	781b      	ldrb	r3, [r3, #0]
 8001d5e:	461a      	mov	r2, r3
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	4413      	add	r3, r2
 8001d64:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d66:	bf00      	nop
 8001d68:	f7ff ffe0 	bl	8001d2c <HAL_GetTick>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	68bb      	ldr	r3, [r7, #8]
 8001d70:	1ad3      	subs	r3, r2, r3
 8001d72:	68fa      	ldr	r2, [r7, #12]
 8001d74:	429a      	cmp	r2, r3
 8001d76:	d8f7      	bhi.n	8001d68 <HAL_Delay+0x28>
  {
  }
}
 8001d78:	bf00      	nop
 8001d7a:	bf00      	nop
 8001d7c:	3710      	adds	r7, #16
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	20000008 	.word	0x20000008

08001d88 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b086      	sub	sp, #24
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d90:	2300      	movs	r3, #0
 8001d92:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001d94:	2300      	movs	r3, #0
 8001d96:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d101      	bne.n	8001daa <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001da6:	2301      	movs	r3, #1
 8001da8:	e0be      	b.n	8001f28 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	689b      	ldr	r3, [r3, #8]
 8001dae:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d109      	bne.n	8001dcc <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2200      	movs	r2, #0
 8001dbc:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001dc6:	6878      	ldr	r0, [r7, #4]
 8001dc8:	f7fe ff42 	bl	8000c50 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001dcc:	6878      	ldr	r0, [r7, #4]
 8001dce:	f000 fbc5 	bl	800255c <ADC_ConversionStop_Disable>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dda:	f003 0310 	and.w	r3, r3, #16
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	f040 8099 	bne.w	8001f16 <HAL_ADC_Init+0x18e>
 8001de4:	7dfb      	ldrb	r3, [r7, #23]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	f040 8095 	bne.w	8001f16 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001df0:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001df4:	f023 0302 	bic.w	r3, r3, #2
 8001df8:	f043 0202 	orr.w	r2, r3, #2
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001e08:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	7b1b      	ldrb	r3, [r3, #12]
 8001e0e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001e10:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001e12:	68ba      	ldr	r2, [r7, #8]
 8001e14:	4313      	orrs	r3, r2
 8001e16:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	689b      	ldr	r3, [r3, #8]
 8001e1c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001e20:	d003      	beq.n	8001e2a <HAL_ADC_Init+0xa2>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	689b      	ldr	r3, [r3, #8]
 8001e26:	2b01      	cmp	r3, #1
 8001e28:	d102      	bne.n	8001e30 <HAL_ADC_Init+0xa8>
 8001e2a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001e2e:	e000      	b.n	8001e32 <HAL_ADC_Init+0xaa>
 8001e30:	2300      	movs	r3, #0
 8001e32:	693a      	ldr	r2, [r7, #16]
 8001e34:	4313      	orrs	r3, r2
 8001e36:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	7d1b      	ldrb	r3, [r3, #20]
 8001e3c:	2b01      	cmp	r3, #1
 8001e3e:	d119      	bne.n	8001e74 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	7b1b      	ldrb	r3, [r3, #12]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d109      	bne.n	8001e5c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	699b      	ldr	r3, [r3, #24]
 8001e4c:	3b01      	subs	r3, #1
 8001e4e:	035a      	lsls	r2, r3, #13
 8001e50:	693b      	ldr	r3, [r7, #16]
 8001e52:	4313      	orrs	r3, r2
 8001e54:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001e58:	613b      	str	r3, [r7, #16]
 8001e5a:	e00b      	b.n	8001e74 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e60:	f043 0220 	orr.w	r2, r3, #32
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e6c:	f043 0201 	orr.w	r2, r3, #1
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	693a      	ldr	r2, [r7, #16]
 8001e84:	430a      	orrs	r2, r1
 8001e86:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	689a      	ldr	r2, [r3, #8]
 8001e8e:	4b28      	ldr	r3, [pc, #160]	@ (8001f30 <HAL_ADC_Init+0x1a8>)
 8001e90:	4013      	ands	r3, r2
 8001e92:	687a      	ldr	r2, [r7, #4]
 8001e94:	6812      	ldr	r2, [r2, #0]
 8001e96:	68b9      	ldr	r1, [r7, #8]
 8001e98:	430b      	orrs	r3, r1
 8001e9a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	689b      	ldr	r3, [r3, #8]
 8001ea0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001ea4:	d003      	beq.n	8001eae <HAL_ADC_Init+0x126>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	689b      	ldr	r3, [r3, #8]
 8001eaa:	2b01      	cmp	r3, #1
 8001eac:	d104      	bne.n	8001eb8 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	691b      	ldr	r3, [r3, #16]
 8001eb2:	3b01      	subs	r3, #1
 8001eb4:	051b      	lsls	r3, r3, #20
 8001eb6:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ebe:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	68fa      	ldr	r2, [r7, #12]
 8001ec8:	430a      	orrs	r2, r1
 8001eca:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	689a      	ldr	r2, [r3, #8]
 8001ed2:	4b18      	ldr	r3, [pc, #96]	@ (8001f34 <HAL_ADC_Init+0x1ac>)
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	68ba      	ldr	r2, [r7, #8]
 8001ed8:	429a      	cmp	r2, r3
 8001eda:	d10b      	bne.n	8001ef4 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2200      	movs	r2, #0
 8001ee0:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ee6:	f023 0303 	bic.w	r3, r3, #3
 8001eea:	f043 0201 	orr.w	r2, r3, #1
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001ef2:	e018      	b.n	8001f26 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ef8:	f023 0312 	bic.w	r3, r3, #18
 8001efc:	f043 0210 	orr.w	r2, r3, #16
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f08:	f043 0201 	orr.w	r2, r3, #1
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001f10:	2301      	movs	r3, #1
 8001f12:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001f14:	e007      	b.n	8001f26 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f1a:	f043 0210 	orr.w	r2, r3, #16
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001f22:	2301      	movs	r3, #1
 8001f24:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001f26:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	3718      	adds	r7, #24
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}
 8001f30:	ffe1f7fd 	.word	0xffe1f7fd
 8001f34:	ff1f0efe 	.word	0xff1f0efe

08001f38 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b084      	sub	sp, #16
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f40:	2300      	movs	r3, #0
 8001f42:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001f4a:	2b01      	cmp	r3, #1
 8001f4c:	d101      	bne.n	8001f52 <HAL_ADC_Start+0x1a>
 8001f4e:	2302      	movs	r3, #2
 8001f50:	e098      	b.n	8002084 <HAL_ADC_Start+0x14c>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2201      	movs	r2, #1
 8001f56:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001f5a:	6878      	ldr	r0, [r7, #4]
 8001f5c:	f000 faa4 	bl	80024a8 <ADC_Enable>
 8001f60:	4603      	mov	r3, r0
 8001f62:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001f64:	7bfb      	ldrb	r3, [r7, #15]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	f040 8087 	bne.w	800207a <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f70:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001f74:	f023 0301 	bic.w	r3, r3, #1
 8001f78:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a41      	ldr	r2, [pc, #260]	@ (800208c <HAL_ADC_Start+0x154>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d105      	bne.n	8001f96 <HAL_ADC_Start+0x5e>
 8001f8a:	4b41      	ldr	r3, [pc, #260]	@ (8002090 <HAL_ADC_Start+0x158>)
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d115      	bne.n	8001fc2 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f9a:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d026      	beq.n	8001ffe <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fb4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001fb8:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001fc0:	e01d      	b.n	8001ffe <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fc6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4a2f      	ldr	r2, [pc, #188]	@ (8002090 <HAL_ADC_Start+0x158>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d004      	beq.n	8001fe2 <HAL_ADC_Start+0xaa>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a2b      	ldr	r2, [pc, #172]	@ (800208c <HAL_ADC_Start+0x154>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d10d      	bne.n	8001ffe <HAL_ADC_Start+0xc6>
 8001fe2:	4b2b      	ldr	r3, [pc, #172]	@ (8002090 <HAL_ADC_Start+0x158>)
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d007      	beq.n	8001ffe <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ff2:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001ff6:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002002:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002006:	2b00      	cmp	r3, #0
 8002008:	d006      	beq.n	8002018 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800200e:	f023 0206 	bic.w	r2, r3, #6
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002016:	e002      	b.n	800201e <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2200      	movs	r2, #0
 800201c:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2200      	movs	r2, #0
 8002022:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f06f 0202 	mvn.w	r2, #2
 800202e:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	689b      	ldr	r3, [r3, #8]
 8002036:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800203a:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800203e:	d113      	bne.n	8002068 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002044:	4a11      	ldr	r2, [pc, #68]	@ (800208c <HAL_ADC_Start+0x154>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d105      	bne.n	8002056 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800204a:	4b11      	ldr	r3, [pc, #68]	@ (8002090 <HAL_ADC_Start+0x158>)
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002052:	2b00      	cmp	r3, #0
 8002054:	d108      	bne.n	8002068 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	689a      	ldr	r2, [r3, #8]
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8002064:	609a      	str	r2, [r3, #8]
 8002066:	e00c      	b.n	8002082 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	689a      	ldr	r2, [r3, #8]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8002076:	609a      	str	r2, [r3, #8]
 8002078:	e003      	b.n	8002082 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2200      	movs	r2, #0
 800207e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8002082:	7bfb      	ldrb	r3, [r7, #15]
}
 8002084:	4618      	mov	r0, r3
 8002086:	3710      	adds	r7, #16
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}
 800208c:	40012800 	.word	0x40012800
 8002090:	40012400 	.word	0x40012400

08002094 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002094:	b590      	push	{r4, r7, lr}
 8002096:	b087      	sub	sp, #28
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
 800209c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800209e:	2300      	movs	r3, #0
 80020a0:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80020a2:	2300      	movs	r3, #0
 80020a4:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 80020a6:	2300      	movs	r3, #0
 80020a8:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80020aa:	f7ff fe3f 	bl	8001d2c <HAL_GetTick>
 80020ae:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	689b      	ldr	r3, [r3, #8]
 80020b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d00b      	beq.n	80020d6 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020c2:	f043 0220 	orr.w	r2, r3, #32
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2200      	movs	r2, #0
 80020ce:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
 80020d4:	e0d3      	b.n	800227e <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d131      	bne.n	8002148 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020ea:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d12a      	bne.n	8002148 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80020f2:	e021      	b.n	8002138 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020fa:	d01d      	beq.n	8002138 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d007      	beq.n	8002112 <HAL_ADC_PollForConversion+0x7e>
 8002102:	f7ff fe13 	bl	8001d2c <HAL_GetTick>
 8002106:	4602      	mov	r2, r0
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	1ad3      	subs	r3, r2, r3
 800210c:	683a      	ldr	r2, [r7, #0]
 800210e:	429a      	cmp	r2, r3
 8002110:	d212      	bcs.n	8002138 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f003 0302 	and.w	r3, r3, #2
 800211c:	2b00      	cmp	r3, #0
 800211e:	d10b      	bne.n	8002138 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002124:	f043 0204 	orr.w	r2, r3, #4
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2200      	movs	r2, #0
 8002130:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 8002134:	2303      	movs	r3, #3
 8002136:	e0a2      	b.n	800227e <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f003 0302 	and.w	r3, r3, #2
 8002142:	2b00      	cmp	r3, #0
 8002144:	d0d6      	beq.n	80020f4 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002146:	e070      	b.n	800222a <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002148:	4b4f      	ldr	r3, [pc, #316]	@ (8002288 <HAL_ADC_PollForConversion+0x1f4>)
 800214a:	681c      	ldr	r4, [r3, #0]
 800214c:	2002      	movs	r0, #2
 800214e:	f002 f929 	bl	80043a4 <HAL_RCCEx_GetPeriphCLKFreq>
 8002152:	4603      	mov	r3, r0
 8002154:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	6919      	ldr	r1, [r3, #16]
 800215e:	4b4b      	ldr	r3, [pc, #300]	@ (800228c <HAL_ADC_PollForConversion+0x1f8>)
 8002160:	400b      	ands	r3, r1
 8002162:	2b00      	cmp	r3, #0
 8002164:	d118      	bne.n	8002198 <HAL_ADC_PollForConversion+0x104>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	68d9      	ldr	r1, [r3, #12]
 800216c:	4b48      	ldr	r3, [pc, #288]	@ (8002290 <HAL_ADC_PollForConversion+0x1fc>)
 800216e:	400b      	ands	r3, r1
 8002170:	2b00      	cmp	r3, #0
 8002172:	d111      	bne.n	8002198 <HAL_ADC_PollForConversion+0x104>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	6919      	ldr	r1, [r3, #16]
 800217a:	4b46      	ldr	r3, [pc, #280]	@ (8002294 <HAL_ADC_PollForConversion+0x200>)
 800217c:	400b      	ands	r3, r1
 800217e:	2b00      	cmp	r3, #0
 8002180:	d108      	bne.n	8002194 <HAL_ADC_PollForConversion+0x100>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	68d9      	ldr	r1, [r3, #12]
 8002188:	4b43      	ldr	r3, [pc, #268]	@ (8002298 <HAL_ADC_PollForConversion+0x204>)
 800218a:	400b      	ands	r3, r1
 800218c:	2b00      	cmp	r3, #0
 800218e:	d101      	bne.n	8002194 <HAL_ADC_PollForConversion+0x100>
 8002190:	2314      	movs	r3, #20
 8002192:	e020      	b.n	80021d6 <HAL_ADC_PollForConversion+0x142>
 8002194:	2329      	movs	r3, #41	@ 0x29
 8002196:	e01e      	b.n	80021d6 <HAL_ADC_PollForConversion+0x142>
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	6919      	ldr	r1, [r3, #16]
 800219e:	4b3d      	ldr	r3, [pc, #244]	@ (8002294 <HAL_ADC_PollForConversion+0x200>)
 80021a0:	400b      	ands	r3, r1
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d106      	bne.n	80021b4 <HAL_ADC_PollForConversion+0x120>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	68d9      	ldr	r1, [r3, #12]
 80021ac:	4b3a      	ldr	r3, [pc, #232]	@ (8002298 <HAL_ADC_PollForConversion+0x204>)
 80021ae:	400b      	ands	r3, r1
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d00d      	beq.n	80021d0 <HAL_ADC_PollForConversion+0x13c>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	6919      	ldr	r1, [r3, #16]
 80021ba:	4b38      	ldr	r3, [pc, #224]	@ (800229c <HAL_ADC_PollForConversion+0x208>)
 80021bc:	400b      	ands	r3, r1
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d108      	bne.n	80021d4 <HAL_ADC_PollForConversion+0x140>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	68d9      	ldr	r1, [r3, #12]
 80021c8:	4b34      	ldr	r3, [pc, #208]	@ (800229c <HAL_ADC_PollForConversion+0x208>)
 80021ca:	400b      	ands	r3, r1
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d101      	bne.n	80021d4 <HAL_ADC_PollForConversion+0x140>
 80021d0:	2354      	movs	r3, #84	@ 0x54
 80021d2:	e000      	b.n	80021d6 <HAL_ADC_PollForConversion+0x142>
 80021d4:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 80021d6:	fb02 f303 	mul.w	r3, r2, r3
 80021da:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80021dc:	e021      	b.n	8002222 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021e4:	d01a      	beq.n	800221c <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d007      	beq.n	80021fc <HAL_ADC_PollForConversion+0x168>
 80021ec:	f7ff fd9e 	bl	8001d2c <HAL_GetTick>
 80021f0:	4602      	mov	r2, r0
 80021f2:	697b      	ldr	r3, [r7, #20]
 80021f4:	1ad3      	subs	r3, r2, r3
 80021f6:	683a      	ldr	r2, [r7, #0]
 80021f8:	429a      	cmp	r2, r3
 80021fa:	d20f      	bcs.n	800221c <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	693a      	ldr	r2, [r7, #16]
 8002200:	429a      	cmp	r2, r3
 8002202:	d90b      	bls.n	800221c <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002208:	f043 0204 	orr.w	r2, r3, #4
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2200      	movs	r2, #0
 8002214:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 8002218:	2303      	movs	r3, #3
 800221a:	e030      	b.n	800227e <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	3301      	adds	r3, #1
 8002220:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	693a      	ldr	r2, [r7, #16]
 8002226:	429a      	cmp	r2, r3
 8002228:	d8d9      	bhi.n	80021de <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f06f 0212 	mvn.w	r2, #18
 8002232:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002238:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	689b      	ldr	r3, [r3, #8]
 8002246:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800224a:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800224e:	d115      	bne.n	800227c <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002254:	2b00      	cmp	r3, #0
 8002256:	d111      	bne.n	800227c <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800225c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002268:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800226c:	2b00      	cmp	r3, #0
 800226e:	d105      	bne.n	800227c <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002274:	f043 0201 	orr.w	r2, r3, #1
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800227c:	2300      	movs	r3, #0
}
 800227e:	4618      	mov	r0, r3
 8002280:	371c      	adds	r7, #28
 8002282:	46bd      	mov	sp, r7
 8002284:	bd90      	pop	{r4, r7, pc}
 8002286:	bf00      	nop
 8002288:	20000000 	.word	0x20000000
 800228c:	24924924 	.word	0x24924924
 8002290:	00924924 	.word	0x00924924
 8002294:	12492492 	.word	0x12492492
 8002298:	00492492 	.word	0x00492492
 800229c:	00249249 	.word	0x00249249

080022a0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b083      	sub	sp, #12
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	370c      	adds	r7, #12
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bc80      	pop	{r7}
 80022b6:	4770      	bx	lr

080022b8 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80022b8:	b480      	push	{r7}
 80022ba:	b085      	sub	sp, #20
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
 80022c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022c2:	2300      	movs	r3, #0
 80022c4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80022c6:	2300      	movs	r3, #0
 80022c8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80022d0:	2b01      	cmp	r3, #1
 80022d2:	d101      	bne.n	80022d8 <HAL_ADC_ConfigChannel+0x20>
 80022d4:	2302      	movs	r3, #2
 80022d6:	e0dc      	b.n	8002492 <HAL_ADC_ConfigChannel+0x1da>
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2201      	movs	r2, #1
 80022dc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	2b06      	cmp	r3, #6
 80022e6:	d81c      	bhi.n	8002322 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	685a      	ldr	r2, [r3, #4]
 80022f2:	4613      	mov	r3, r2
 80022f4:	009b      	lsls	r3, r3, #2
 80022f6:	4413      	add	r3, r2
 80022f8:	3b05      	subs	r3, #5
 80022fa:	221f      	movs	r2, #31
 80022fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002300:	43db      	mvns	r3, r3
 8002302:	4019      	ands	r1, r3
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	6818      	ldr	r0, [r3, #0]
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	685a      	ldr	r2, [r3, #4]
 800230c:	4613      	mov	r3, r2
 800230e:	009b      	lsls	r3, r3, #2
 8002310:	4413      	add	r3, r2
 8002312:	3b05      	subs	r3, #5
 8002314:	fa00 f203 	lsl.w	r2, r0, r3
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	430a      	orrs	r2, r1
 800231e:	635a      	str	r2, [r3, #52]	@ 0x34
 8002320:	e03c      	b.n	800239c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	2b0c      	cmp	r3, #12
 8002328:	d81c      	bhi.n	8002364 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	685a      	ldr	r2, [r3, #4]
 8002334:	4613      	mov	r3, r2
 8002336:	009b      	lsls	r3, r3, #2
 8002338:	4413      	add	r3, r2
 800233a:	3b23      	subs	r3, #35	@ 0x23
 800233c:	221f      	movs	r2, #31
 800233e:	fa02 f303 	lsl.w	r3, r2, r3
 8002342:	43db      	mvns	r3, r3
 8002344:	4019      	ands	r1, r3
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	6818      	ldr	r0, [r3, #0]
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	685a      	ldr	r2, [r3, #4]
 800234e:	4613      	mov	r3, r2
 8002350:	009b      	lsls	r3, r3, #2
 8002352:	4413      	add	r3, r2
 8002354:	3b23      	subs	r3, #35	@ 0x23
 8002356:	fa00 f203 	lsl.w	r2, r0, r3
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	430a      	orrs	r2, r1
 8002360:	631a      	str	r2, [r3, #48]	@ 0x30
 8002362:	e01b      	b.n	800239c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	685a      	ldr	r2, [r3, #4]
 800236e:	4613      	mov	r3, r2
 8002370:	009b      	lsls	r3, r3, #2
 8002372:	4413      	add	r3, r2
 8002374:	3b41      	subs	r3, #65	@ 0x41
 8002376:	221f      	movs	r2, #31
 8002378:	fa02 f303 	lsl.w	r3, r2, r3
 800237c:	43db      	mvns	r3, r3
 800237e:	4019      	ands	r1, r3
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	6818      	ldr	r0, [r3, #0]
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	685a      	ldr	r2, [r3, #4]
 8002388:	4613      	mov	r3, r2
 800238a:	009b      	lsls	r3, r3, #2
 800238c:	4413      	add	r3, r2
 800238e:	3b41      	subs	r3, #65	@ 0x41
 8002390:	fa00 f203 	lsl.w	r2, r0, r3
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	430a      	orrs	r2, r1
 800239a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	2b09      	cmp	r3, #9
 80023a2:	d91c      	bls.n	80023de <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	68d9      	ldr	r1, [r3, #12]
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	681a      	ldr	r2, [r3, #0]
 80023ae:	4613      	mov	r3, r2
 80023b0:	005b      	lsls	r3, r3, #1
 80023b2:	4413      	add	r3, r2
 80023b4:	3b1e      	subs	r3, #30
 80023b6:	2207      	movs	r2, #7
 80023b8:	fa02 f303 	lsl.w	r3, r2, r3
 80023bc:	43db      	mvns	r3, r3
 80023be:	4019      	ands	r1, r3
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	6898      	ldr	r0, [r3, #8]
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	681a      	ldr	r2, [r3, #0]
 80023c8:	4613      	mov	r3, r2
 80023ca:	005b      	lsls	r3, r3, #1
 80023cc:	4413      	add	r3, r2
 80023ce:	3b1e      	subs	r3, #30
 80023d0:	fa00 f203 	lsl.w	r2, r0, r3
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	430a      	orrs	r2, r1
 80023da:	60da      	str	r2, [r3, #12]
 80023dc:	e019      	b.n	8002412 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	6919      	ldr	r1, [r3, #16]
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	681a      	ldr	r2, [r3, #0]
 80023e8:	4613      	mov	r3, r2
 80023ea:	005b      	lsls	r3, r3, #1
 80023ec:	4413      	add	r3, r2
 80023ee:	2207      	movs	r2, #7
 80023f0:	fa02 f303 	lsl.w	r3, r2, r3
 80023f4:	43db      	mvns	r3, r3
 80023f6:	4019      	ands	r1, r3
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	6898      	ldr	r0, [r3, #8]
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	681a      	ldr	r2, [r3, #0]
 8002400:	4613      	mov	r3, r2
 8002402:	005b      	lsls	r3, r3, #1
 8002404:	4413      	add	r3, r2
 8002406:	fa00 f203 	lsl.w	r2, r0, r3
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	430a      	orrs	r2, r1
 8002410:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	2b10      	cmp	r3, #16
 8002418:	d003      	beq.n	8002422 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800241e:	2b11      	cmp	r3, #17
 8002420:	d132      	bne.n	8002488 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4a1d      	ldr	r2, [pc, #116]	@ (800249c <HAL_ADC_ConfigChannel+0x1e4>)
 8002428:	4293      	cmp	r3, r2
 800242a:	d125      	bne.n	8002478 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	689b      	ldr	r3, [r3, #8]
 8002432:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002436:	2b00      	cmp	r3, #0
 8002438:	d126      	bne.n	8002488 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	689a      	ldr	r2, [r3, #8]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8002448:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	2b10      	cmp	r3, #16
 8002450:	d11a      	bne.n	8002488 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002452:	4b13      	ldr	r3, [pc, #76]	@ (80024a0 <HAL_ADC_ConfigChannel+0x1e8>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4a13      	ldr	r2, [pc, #76]	@ (80024a4 <HAL_ADC_ConfigChannel+0x1ec>)
 8002458:	fba2 2303 	umull	r2, r3, r2, r3
 800245c:	0c9a      	lsrs	r2, r3, #18
 800245e:	4613      	mov	r3, r2
 8002460:	009b      	lsls	r3, r3, #2
 8002462:	4413      	add	r3, r2
 8002464:	005b      	lsls	r3, r3, #1
 8002466:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002468:	e002      	b.n	8002470 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800246a:	68bb      	ldr	r3, [r7, #8]
 800246c:	3b01      	subs	r3, #1
 800246e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002470:	68bb      	ldr	r3, [r7, #8]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d1f9      	bne.n	800246a <HAL_ADC_ConfigChannel+0x1b2>
 8002476:	e007      	b.n	8002488 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800247c:	f043 0220 	orr.w	r2, r3, #32
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002484:	2301      	movs	r3, #1
 8002486:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2200      	movs	r2, #0
 800248c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002490:	7bfb      	ldrb	r3, [r7, #15]
}
 8002492:	4618      	mov	r0, r3
 8002494:	3714      	adds	r7, #20
 8002496:	46bd      	mov	sp, r7
 8002498:	bc80      	pop	{r7}
 800249a:	4770      	bx	lr
 800249c:	40012400 	.word	0x40012400
 80024a0:	20000000 	.word	0x20000000
 80024a4:	431bde83 	.word	0x431bde83

080024a8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b084      	sub	sp, #16
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80024b0:	2300      	movs	r3, #0
 80024b2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80024b4:	2300      	movs	r3, #0
 80024b6:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	689b      	ldr	r3, [r3, #8]
 80024be:	f003 0301 	and.w	r3, r3, #1
 80024c2:	2b01      	cmp	r3, #1
 80024c4:	d040      	beq.n	8002548 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	689a      	ldr	r2, [r3, #8]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f042 0201 	orr.w	r2, r2, #1
 80024d4:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80024d6:	4b1f      	ldr	r3, [pc, #124]	@ (8002554 <ADC_Enable+0xac>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4a1f      	ldr	r2, [pc, #124]	@ (8002558 <ADC_Enable+0xb0>)
 80024dc:	fba2 2303 	umull	r2, r3, r2, r3
 80024e0:	0c9b      	lsrs	r3, r3, #18
 80024e2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80024e4:	e002      	b.n	80024ec <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80024e6:	68bb      	ldr	r3, [r7, #8]
 80024e8:	3b01      	subs	r3, #1
 80024ea:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d1f9      	bne.n	80024e6 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80024f2:	f7ff fc1b 	bl	8001d2c <HAL_GetTick>
 80024f6:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80024f8:	e01f      	b.n	800253a <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80024fa:	f7ff fc17 	bl	8001d2c <HAL_GetTick>
 80024fe:	4602      	mov	r2, r0
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	1ad3      	subs	r3, r2, r3
 8002504:	2b02      	cmp	r3, #2
 8002506:	d918      	bls.n	800253a <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	689b      	ldr	r3, [r3, #8]
 800250e:	f003 0301 	and.w	r3, r3, #1
 8002512:	2b01      	cmp	r3, #1
 8002514:	d011      	beq.n	800253a <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800251a:	f043 0210 	orr.w	r2, r3, #16
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002526:	f043 0201 	orr.w	r2, r3, #1
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2200      	movs	r2, #0
 8002532:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8002536:	2301      	movs	r3, #1
 8002538:	e007      	b.n	800254a <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	689b      	ldr	r3, [r3, #8]
 8002540:	f003 0301 	and.w	r3, r3, #1
 8002544:	2b01      	cmp	r3, #1
 8002546:	d1d8      	bne.n	80024fa <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002548:	2300      	movs	r3, #0
}
 800254a:	4618      	mov	r0, r3
 800254c:	3710      	adds	r7, #16
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}
 8002552:	bf00      	nop
 8002554:	20000000 	.word	0x20000000
 8002558:	431bde83 	.word	0x431bde83

0800255c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b084      	sub	sp, #16
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002564:	2300      	movs	r3, #0
 8002566:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	689b      	ldr	r3, [r3, #8]
 800256e:	f003 0301 	and.w	r3, r3, #1
 8002572:	2b01      	cmp	r3, #1
 8002574:	d12e      	bne.n	80025d4 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	689a      	ldr	r2, [r3, #8]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f022 0201 	bic.w	r2, r2, #1
 8002584:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002586:	f7ff fbd1 	bl	8001d2c <HAL_GetTick>
 800258a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800258c:	e01b      	b.n	80025c6 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800258e:	f7ff fbcd 	bl	8001d2c <HAL_GetTick>
 8002592:	4602      	mov	r2, r0
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	1ad3      	subs	r3, r2, r3
 8002598:	2b02      	cmp	r3, #2
 800259a:	d914      	bls.n	80025c6 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	689b      	ldr	r3, [r3, #8]
 80025a2:	f003 0301 	and.w	r3, r3, #1
 80025a6:	2b01      	cmp	r3, #1
 80025a8:	d10d      	bne.n	80025c6 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025ae:	f043 0210 	orr.w	r2, r3, #16
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025ba:	f043 0201 	orr.w	r2, r3, #1
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	e007      	b.n	80025d6 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	689b      	ldr	r3, [r3, #8]
 80025cc:	f003 0301 	and.w	r3, r3, #1
 80025d0:	2b01      	cmp	r3, #1
 80025d2:	d0dc      	beq.n	800258e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80025d4:	2300      	movs	r3, #0
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	3710      	adds	r7, #16
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}
	...

080025e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b085      	sub	sp, #20
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	f003 0307 	and.w	r3, r3, #7
 80025ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025f0:	4b0c      	ldr	r3, [pc, #48]	@ (8002624 <__NVIC_SetPriorityGrouping+0x44>)
 80025f2:	68db      	ldr	r3, [r3, #12]
 80025f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025f6:	68ba      	ldr	r2, [r7, #8]
 80025f8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80025fc:	4013      	ands	r3, r2
 80025fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002608:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800260c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002610:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002612:	4a04      	ldr	r2, [pc, #16]	@ (8002624 <__NVIC_SetPriorityGrouping+0x44>)
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	60d3      	str	r3, [r2, #12]
}
 8002618:	bf00      	nop
 800261a:	3714      	adds	r7, #20
 800261c:	46bd      	mov	sp, r7
 800261e:	bc80      	pop	{r7}
 8002620:	4770      	bx	lr
 8002622:	bf00      	nop
 8002624:	e000ed00 	.word	0xe000ed00

08002628 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002628:	b480      	push	{r7}
 800262a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800262c:	4b04      	ldr	r3, [pc, #16]	@ (8002640 <__NVIC_GetPriorityGrouping+0x18>)
 800262e:	68db      	ldr	r3, [r3, #12]
 8002630:	0a1b      	lsrs	r3, r3, #8
 8002632:	f003 0307 	and.w	r3, r3, #7
}
 8002636:	4618      	mov	r0, r3
 8002638:	46bd      	mov	sp, r7
 800263a:	bc80      	pop	{r7}
 800263c:	4770      	bx	lr
 800263e:	bf00      	nop
 8002640:	e000ed00 	.word	0xe000ed00

08002644 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002644:	b480      	push	{r7}
 8002646:	b083      	sub	sp, #12
 8002648:	af00      	add	r7, sp, #0
 800264a:	4603      	mov	r3, r0
 800264c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800264e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002652:	2b00      	cmp	r3, #0
 8002654:	db0b      	blt.n	800266e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002656:	79fb      	ldrb	r3, [r7, #7]
 8002658:	f003 021f 	and.w	r2, r3, #31
 800265c:	4906      	ldr	r1, [pc, #24]	@ (8002678 <__NVIC_EnableIRQ+0x34>)
 800265e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002662:	095b      	lsrs	r3, r3, #5
 8002664:	2001      	movs	r0, #1
 8002666:	fa00 f202 	lsl.w	r2, r0, r2
 800266a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800266e:	bf00      	nop
 8002670:	370c      	adds	r7, #12
 8002672:	46bd      	mov	sp, r7
 8002674:	bc80      	pop	{r7}
 8002676:	4770      	bx	lr
 8002678:	e000e100 	.word	0xe000e100

0800267c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800267c:	b480      	push	{r7}
 800267e:	b083      	sub	sp, #12
 8002680:	af00      	add	r7, sp, #0
 8002682:	4603      	mov	r3, r0
 8002684:	6039      	str	r1, [r7, #0]
 8002686:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002688:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800268c:	2b00      	cmp	r3, #0
 800268e:	db0a      	blt.n	80026a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	b2da      	uxtb	r2, r3
 8002694:	490c      	ldr	r1, [pc, #48]	@ (80026c8 <__NVIC_SetPriority+0x4c>)
 8002696:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800269a:	0112      	lsls	r2, r2, #4
 800269c:	b2d2      	uxtb	r2, r2
 800269e:	440b      	add	r3, r1
 80026a0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026a4:	e00a      	b.n	80026bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	b2da      	uxtb	r2, r3
 80026aa:	4908      	ldr	r1, [pc, #32]	@ (80026cc <__NVIC_SetPriority+0x50>)
 80026ac:	79fb      	ldrb	r3, [r7, #7]
 80026ae:	f003 030f 	and.w	r3, r3, #15
 80026b2:	3b04      	subs	r3, #4
 80026b4:	0112      	lsls	r2, r2, #4
 80026b6:	b2d2      	uxtb	r2, r2
 80026b8:	440b      	add	r3, r1
 80026ba:	761a      	strb	r2, [r3, #24]
}
 80026bc:	bf00      	nop
 80026be:	370c      	adds	r7, #12
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bc80      	pop	{r7}
 80026c4:	4770      	bx	lr
 80026c6:	bf00      	nop
 80026c8:	e000e100 	.word	0xe000e100
 80026cc:	e000ed00 	.word	0xe000ed00

080026d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b089      	sub	sp, #36	@ 0x24
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	60f8      	str	r0, [r7, #12]
 80026d8:	60b9      	str	r1, [r7, #8]
 80026da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	f003 0307 	and.w	r3, r3, #7
 80026e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026e4:	69fb      	ldr	r3, [r7, #28]
 80026e6:	f1c3 0307 	rsb	r3, r3, #7
 80026ea:	2b04      	cmp	r3, #4
 80026ec:	bf28      	it	cs
 80026ee:	2304      	movcs	r3, #4
 80026f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026f2:	69fb      	ldr	r3, [r7, #28]
 80026f4:	3304      	adds	r3, #4
 80026f6:	2b06      	cmp	r3, #6
 80026f8:	d902      	bls.n	8002700 <NVIC_EncodePriority+0x30>
 80026fa:	69fb      	ldr	r3, [r7, #28]
 80026fc:	3b03      	subs	r3, #3
 80026fe:	e000      	b.n	8002702 <NVIC_EncodePriority+0x32>
 8002700:	2300      	movs	r3, #0
 8002702:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002704:	f04f 32ff 	mov.w	r2, #4294967295
 8002708:	69bb      	ldr	r3, [r7, #24]
 800270a:	fa02 f303 	lsl.w	r3, r2, r3
 800270e:	43da      	mvns	r2, r3
 8002710:	68bb      	ldr	r3, [r7, #8]
 8002712:	401a      	ands	r2, r3
 8002714:	697b      	ldr	r3, [r7, #20]
 8002716:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002718:	f04f 31ff 	mov.w	r1, #4294967295
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	fa01 f303 	lsl.w	r3, r1, r3
 8002722:	43d9      	mvns	r1, r3
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002728:	4313      	orrs	r3, r2
         );
}
 800272a:	4618      	mov	r0, r3
 800272c:	3724      	adds	r7, #36	@ 0x24
 800272e:	46bd      	mov	sp, r7
 8002730:	bc80      	pop	{r7}
 8002732:	4770      	bx	lr

08002734 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b082      	sub	sp, #8
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	3b01      	subs	r3, #1
 8002740:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002744:	d301      	bcc.n	800274a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002746:	2301      	movs	r3, #1
 8002748:	e00f      	b.n	800276a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800274a:	4a0a      	ldr	r2, [pc, #40]	@ (8002774 <SysTick_Config+0x40>)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	3b01      	subs	r3, #1
 8002750:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002752:	210f      	movs	r1, #15
 8002754:	f04f 30ff 	mov.w	r0, #4294967295
 8002758:	f7ff ff90 	bl	800267c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800275c:	4b05      	ldr	r3, [pc, #20]	@ (8002774 <SysTick_Config+0x40>)
 800275e:	2200      	movs	r2, #0
 8002760:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002762:	4b04      	ldr	r3, [pc, #16]	@ (8002774 <SysTick_Config+0x40>)
 8002764:	2207      	movs	r2, #7
 8002766:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002768:	2300      	movs	r3, #0
}
 800276a:	4618      	mov	r0, r3
 800276c:	3708      	adds	r7, #8
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}
 8002772:	bf00      	nop
 8002774:	e000e010 	.word	0xe000e010

08002778 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b082      	sub	sp, #8
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002780:	6878      	ldr	r0, [r7, #4]
 8002782:	f7ff ff2d 	bl	80025e0 <__NVIC_SetPriorityGrouping>
}
 8002786:	bf00      	nop
 8002788:	3708      	adds	r7, #8
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}

0800278e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800278e:	b580      	push	{r7, lr}
 8002790:	b086      	sub	sp, #24
 8002792:	af00      	add	r7, sp, #0
 8002794:	4603      	mov	r3, r0
 8002796:	60b9      	str	r1, [r7, #8]
 8002798:	607a      	str	r2, [r7, #4]
 800279a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800279c:	2300      	movs	r3, #0
 800279e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80027a0:	f7ff ff42 	bl	8002628 <__NVIC_GetPriorityGrouping>
 80027a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027a6:	687a      	ldr	r2, [r7, #4]
 80027a8:	68b9      	ldr	r1, [r7, #8]
 80027aa:	6978      	ldr	r0, [r7, #20]
 80027ac:	f7ff ff90 	bl	80026d0 <NVIC_EncodePriority>
 80027b0:	4602      	mov	r2, r0
 80027b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027b6:	4611      	mov	r1, r2
 80027b8:	4618      	mov	r0, r3
 80027ba:	f7ff ff5f 	bl	800267c <__NVIC_SetPriority>
}
 80027be:	bf00      	nop
 80027c0:	3718      	adds	r7, #24
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}

080027c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027c6:	b580      	push	{r7, lr}
 80027c8:	b082      	sub	sp, #8
 80027ca:	af00      	add	r7, sp, #0
 80027cc:	4603      	mov	r3, r0
 80027ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027d4:	4618      	mov	r0, r3
 80027d6:	f7ff ff35 	bl	8002644 <__NVIC_EnableIRQ>
}
 80027da:	bf00      	nop
 80027dc:	3708      	adds	r7, #8
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}

080027e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027e2:	b580      	push	{r7, lr}
 80027e4:	b082      	sub	sp, #8
 80027e6:	af00      	add	r7, sp, #0
 80027e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80027ea:	6878      	ldr	r0, [r7, #4]
 80027ec:	f7ff ffa2 	bl	8002734 <SysTick_Config>
 80027f0:	4603      	mov	r3, r0
}
 80027f2:	4618      	mov	r0, r3
 80027f4:	3708      	adds	r7, #8
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}
	...

080027fc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80027fc:	b480      	push	{r7}
 80027fe:	b085      	sub	sp, #20
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002804:	2300      	movs	r3, #0
 8002806:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d101      	bne.n	8002812 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800280e:	2301      	movs	r3, #1
 8002810:	e043      	b.n	800289a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	461a      	mov	r2, r3
 8002818:	4b22      	ldr	r3, [pc, #136]	@ (80028a4 <HAL_DMA_Init+0xa8>)
 800281a:	4413      	add	r3, r2
 800281c:	4a22      	ldr	r2, [pc, #136]	@ (80028a8 <HAL_DMA_Init+0xac>)
 800281e:	fba2 2303 	umull	r2, r3, r2, r3
 8002822:	091b      	lsrs	r3, r3, #4
 8002824:	009a      	lsls	r2, r3, #2
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	4a1f      	ldr	r2, [pc, #124]	@ (80028ac <HAL_DMA_Init+0xb0>)
 800282e:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2202      	movs	r2, #2
 8002834:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002846:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800284a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002854:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	68db      	ldr	r3, [r3, #12]
 800285a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002860:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	695b      	ldr	r3, [r3, #20]
 8002866:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800286c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	69db      	ldr	r3, [r3, #28]
 8002872:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002874:	68fa      	ldr	r2, [r7, #12]
 8002876:	4313      	orrs	r3, r2
 8002878:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	68fa      	ldr	r2, [r7, #12]
 8002880:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2200      	movs	r2, #0
 8002886:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2201      	movs	r2, #1
 800288c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2200      	movs	r2, #0
 8002894:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002898:	2300      	movs	r3, #0
}
 800289a:	4618      	mov	r0, r3
 800289c:	3714      	adds	r7, #20
 800289e:	46bd      	mov	sp, r7
 80028a0:	bc80      	pop	{r7}
 80028a2:	4770      	bx	lr
 80028a4:	bffdfff8 	.word	0xbffdfff8
 80028a8:	cccccccd 	.word	0xcccccccd
 80028ac:	40020000 	.word	0x40020000

080028b0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b086      	sub	sp, #24
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	60f8      	str	r0, [r7, #12]
 80028b8:	60b9      	str	r1, [r7, #8]
 80028ba:	607a      	str	r2, [r7, #4]
 80028bc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80028be:	2300      	movs	r3, #0
 80028c0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80028c8:	2b01      	cmp	r3, #1
 80028ca:	d101      	bne.n	80028d0 <HAL_DMA_Start_IT+0x20>
 80028cc:	2302      	movs	r3, #2
 80028ce:	e04b      	b.n	8002968 <HAL_DMA_Start_IT+0xb8>
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	2201      	movs	r2, #1
 80028d4:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80028de:	b2db      	uxtb	r3, r3
 80028e0:	2b01      	cmp	r3, #1
 80028e2:	d13a      	bne.n	800295a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	2202      	movs	r2, #2
 80028e8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	2200      	movs	r2, #0
 80028f0:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	681a      	ldr	r2, [r3, #0]
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f022 0201 	bic.w	r2, r2, #1
 8002900:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	687a      	ldr	r2, [r7, #4]
 8002906:	68b9      	ldr	r1, [r7, #8]
 8002908:	68f8      	ldr	r0, [r7, #12]
 800290a:	f000 f9eb 	bl	8002ce4 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002912:	2b00      	cmp	r3, #0
 8002914:	d008      	beq.n	8002928 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	681a      	ldr	r2, [r3, #0]
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f042 020e 	orr.w	r2, r2, #14
 8002924:	601a      	str	r2, [r3, #0]
 8002926:	e00f      	b.n	8002948 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	681a      	ldr	r2, [r3, #0]
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f022 0204 	bic.w	r2, r2, #4
 8002936:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	681a      	ldr	r2, [r3, #0]
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f042 020a 	orr.w	r2, r2, #10
 8002946:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	681a      	ldr	r2, [r3, #0]
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f042 0201 	orr.w	r2, r2, #1
 8002956:	601a      	str	r2, [r3, #0]
 8002958:	e005      	b.n	8002966 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	2200      	movs	r2, #0
 800295e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002962:	2302      	movs	r3, #2
 8002964:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002966:	7dfb      	ldrb	r3, [r7, #23]
}
 8002968:	4618      	mov	r0, r3
 800296a:	3718      	adds	r7, #24
 800296c:	46bd      	mov	sp, r7
 800296e:	bd80      	pop	{r7, pc}

08002970 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002970:	b480      	push	{r7}
 8002972:	b085      	sub	sp, #20
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002978:	2300      	movs	r3, #0
 800297a:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002982:	b2db      	uxtb	r3, r3
 8002984:	2b02      	cmp	r3, #2
 8002986:	d008      	beq.n	800299a <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2204      	movs	r2, #4
 800298c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2200      	movs	r2, #0
 8002992:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002996:	2301      	movs	r3, #1
 8002998:	e020      	b.n	80029dc <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	681a      	ldr	r2, [r3, #0]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f022 020e 	bic.w	r2, r2, #14
 80029a8:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	681a      	ldr	r2, [r3, #0]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f022 0201 	bic.w	r2, r2, #1
 80029b8:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029c2:	2101      	movs	r1, #1
 80029c4:	fa01 f202 	lsl.w	r2, r1, r2
 80029c8:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2201      	movs	r2, #1
 80029ce:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2200      	movs	r2, #0
 80029d6:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80029da:	7bfb      	ldrb	r3, [r7, #15]
}
 80029dc:	4618      	mov	r0, r3
 80029de:	3714      	adds	r7, #20
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bc80      	pop	{r7}
 80029e4:	4770      	bx	lr
	...

080029e8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b084      	sub	sp, #16
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80029f0:	2300      	movs	r3, #0
 80029f2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80029fa:	b2db      	uxtb	r3, r3
 80029fc:	2b02      	cmp	r3, #2
 80029fe:	d005      	beq.n	8002a0c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2204      	movs	r2, #4
 8002a04:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	73fb      	strb	r3, [r7, #15]
 8002a0a:	e051      	b.n	8002ab0 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	681a      	ldr	r2, [r3, #0]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f022 020e 	bic.w	r2, r2, #14
 8002a1a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	681a      	ldr	r2, [r3, #0]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f022 0201 	bic.w	r2, r2, #1
 8002a2a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a22      	ldr	r2, [pc, #136]	@ (8002abc <HAL_DMA_Abort_IT+0xd4>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d029      	beq.n	8002a8a <HAL_DMA_Abort_IT+0xa2>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a21      	ldr	r2, [pc, #132]	@ (8002ac0 <HAL_DMA_Abort_IT+0xd8>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d022      	beq.n	8002a86 <HAL_DMA_Abort_IT+0x9e>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a1f      	ldr	r2, [pc, #124]	@ (8002ac4 <HAL_DMA_Abort_IT+0xdc>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d01a      	beq.n	8002a80 <HAL_DMA_Abort_IT+0x98>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4a1e      	ldr	r2, [pc, #120]	@ (8002ac8 <HAL_DMA_Abort_IT+0xe0>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d012      	beq.n	8002a7a <HAL_DMA_Abort_IT+0x92>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a1c      	ldr	r2, [pc, #112]	@ (8002acc <HAL_DMA_Abort_IT+0xe4>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d00a      	beq.n	8002a74 <HAL_DMA_Abort_IT+0x8c>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a1b      	ldr	r2, [pc, #108]	@ (8002ad0 <HAL_DMA_Abort_IT+0xe8>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d102      	bne.n	8002a6e <HAL_DMA_Abort_IT+0x86>
 8002a68:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002a6c:	e00e      	b.n	8002a8c <HAL_DMA_Abort_IT+0xa4>
 8002a6e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002a72:	e00b      	b.n	8002a8c <HAL_DMA_Abort_IT+0xa4>
 8002a74:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002a78:	e008      	b.n	8002a8c <HAL_DMA_Abort_IT+0xa4>
 8002a7a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002a7e:	e005      	b.n	8002a8c <HAL_DMA_Abort_IT+0xa4>
 8002a80:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002a84:	e002      	b.n	8002a8c <HAL_DMA_Abort_IT+0xa4>
 8002a86:	2310      	movs	r3, #16
 8002a88:	e000      	b.n	8002a8c <HAL_DMA_Abort_IT+0xa4>
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	4a11      	ldr	r2, [pc, #68]	@ (8002ad4 <HAL_DMA_Abort_IT+0xec>)
 8002a8e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2201      	movs	r2, #1
 8002a94:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d003      	beq.n	8002ab0 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002aac:	6878      	ldr	r0, [r7, #4]
 8002aae:	4798      	blx	r3
    } 
  }
  return status;
 8002ab0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	3710      	adds	r7, #16
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}
 8002aba:	bf00      	nop
 8002abc:	40020008 	.word	0x40020008
 8002ac0:	4002001c 	.word	0x4002001c
 8002ac4:	40020030 	.word	0x40020030
 8002ac8:	40020044 	.word	0x40020044
 8002acc:	40020058 	.word	0x40020058
 8002ad0:	4002006c 	.word	0x4002006c
 8002ad4:	40020000 	.word	0x40020000

08002ad8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b084      	sub	sp, #16
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002af4:	2204      	movs	r2, #4
 8002af6:	409a      	lsls	r2, r3
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	4013      	ands	r3, r2
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d04f      	beq.n	8002ba0 <HAL_DMA_IRQHandler+0xc8>
 8002b00:	68bb      	ldr	r3, [r7, #8]
 8002b02:	f003 0304 	and.w	r3, r3, #4
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d04a      	beq.n	8002ba0 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f003 0320 	and.w	r3, r3, #32
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d107      	bne.n	8002b28 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	681a      	ldr	r2, [r3, #0]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f022 0204 	bic.w	r2, r2, #4
 8002b26:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a66      	ldr	r2, [pc, #408]	@ (8002cc8 <HAL_DMA_IRQHandler+0x1f0>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d029      	beq.n	8002b86 <HAL_DMA_IRQHandler+0xae>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4a65      	ldr	r2, [pc, #404]	@ (8002ccc <HAL_DMA_IRQHandler+0x1f4>)
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d022      	beq.n	8002b82 <HAL_DMA_IRQHandler+0xaa>
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a63      	ldr	r2, [pc, #396]	@ (8002cd0 <HAL_DMA_IRQHandler+0x1f8>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d01a      	beq.n	8002b7c <HAL_DMA_IRQHandler+0xa4>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4a62      	ldr	r2, [pc, #392]	@ (8002cd4 <HAL_DMA_IRQHandler+0x1fc>)
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d012      	beq.n	8002b76 <HAL_DMA_IRQHandler+0x9e>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a60      	ldr	r2, [pc, #384]	@ (8002cd8 <HAL_DMA_IRQHandler+0x200>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d00a      	beq.n	8002b70 <HAL_DMA_IRQHandler+0x98>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4a5f      	ldr	r2, [pc, #380]	@ (8002cdc <HAL_DMA_IRQHandler+0x204>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d102      	bne.n	8002b6a <HAL_DMA_IRQHandler+0x92>
 8002b64:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002b68:	e00e      	b.n	8002b88 <HAL_DMA_IRQHandler+0xb0>
 8002b6a:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8002b6e:	e00b      	b.n	8002b88 <HAL_DMA_IRQHandler+0xb0>
 8002b70:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8002b74:	e008      	b.n	8002b88 <HAL_DMA_IRQHandler+0xb0>
 8002b76:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002b7a:	e005      	b.n	8002b88 <HAL_DMA_IRQHandler+0xb0>
 8002b7c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002b80:	e002      	b.n	8002b88 <HAL_DMA_IRQHandler+0xb0>
 8002b82:	2340      	movs	r3, #64	@ 0x40
 8002b84:	e000      	b.n	8002b88 <HAL_DMA_IRQHandler+0xb0>
 8002b86:	2304      	movs	r3, #4
 8002b88:	4a55      	ldr	r2, [pc, #340]	@ (8002ce0 <HAL_DMA_IRQHandler+0x208>)
 8002b8a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	f000 8094 	beq.w	8002cbe <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b9a:	6878      	ldr	r0, [r7, #4]
 8002b9c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002b9e:	e08e      	b.n	8002cbe <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ba4:	2202      	movs	r2, #2
 8002ba6:	409a      	lsls	r2, r3
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	4013      	ands	r3, r2
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d056      	beq.n	8002c5e <HAL_DMA_IRQHandler+0x186>
 8002bb0:	68bb      	ldr	r3, [r7, #8]
 8002bb2:	f003 0302 	and.w	r3, r3, #2
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d051      	beq.n	8002c5e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f003 0320 	and.w	r3, r3, #32
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d10b      	bne.n	8002be0 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	681a      	ldr	r2, [r3, #0]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f022 020a 	bic.w	r2, r2, #10
 8002bd6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2201      	movs	r2, #1
 8002bdc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a38      	ldr	r2, [pc, #224]	@ (8002cc8 <HAL_DMA_IRQHandler+0x1f0>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d029      	beq.n	8002c3e <HAL_DMA_IRQHandler+0x166>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4a37      	ldr	r2, [pc, #220]	@ (8002ccc <HAL_DMA_IRQHandler+0x1f4>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d022      	beq.n	8002c3a <HAL_DMA_IRQHandler+0x162>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a35      	ldr	r2, [pc, #212]	@ (8002cd0 <HAL_DMA_IRQHandler+0x1f8>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d01a      	beq.n	8002c34 <HAL_DMA_IRQHandler+0x15c>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a34      	ldr	r2, [pc, #208]	@ (8002cd4 <HAL_DMA_IRQHandler+0x1fc>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d012      	beq.n	8002c2e <HAL_DMA_IRQHandler+0x156>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a32      	ldr	r2, [pc, #200]	@ (8002cd8 <HAL_DMA_IRQHandler+0x200>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d00a      	beq.n	8002c28 <HAL_DMA_IRQHandler+0x150>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a31      	ldr	r2, [pc, #196]	@ (8002cdc <HAL_DMA_IRQHandler+0x204>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d102      	bne.n	8002c22 <HAL_DMA_IRQHandler+0x14a>
 8002c1c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002c20:	e00e      	b.n	8002c40 <HAL_DMA_IRQHandler+0x168>
 8002c22:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002c26:	e00b      	b.n	8002c40 <HAL_DMA_IRQHandler+0x168>
 8002c28:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002c2c:	e008      	b.n	8002c40 <HAL_DMA_IRQHandler+0x168>
 8002c2e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002c32:	e005      	b.n	8002c40 <HAL_DMA_IRQHandler+0x168>
 8002c34:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002c38:	e002      	b.n	8002c40 <HAL_DMA_IRQHandler+0x168>
 8002c3a:	2320      	movs	r3, #32
 8002c3c:	e000      	b.n	8002c40 <HAL_DMA_IRQHandler+0x168>
 8002c3e:	2302      	movs	r3, #2
 8002c40:	4a27      	ldr	r2, [pc, #156]	@ (8002ce0 <HAL_DMA_IRQHandler+0x208>)
 8002c42:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2200      	movs	r2, #0
 8002c48:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d034      	beq.n	8002cbe <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c58:	6878      	ldr	r0, [r7, #4]
 8002c5a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002c5c:	e02f      	b.n	8002cbe <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c62:	2208      	movs	r2, #8
 8002c64:	409a      	lsls	r2, r3
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	4013      	ands	r3, r2
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d028      	beq.n	8002cc0 <HAL_DMA_IRQHandler+0x1e8>
 8002c6e:	68bb      	ldr	r3, [r7, #8]
 8002c70:	f003 0308 	and.w	r3, r3, #8
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d023      	beq.n	8002cc0 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	681a      	ldr	r2, [r3, #0]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f022 020e 	bic.w	r2, r2, #14
 8002c86:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c90:	2101      	movs	r1, #1
 8002c92:	fa01 f202 	lsl.w	r2, r1, r2
 8002c96:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2201      	movs	r2, #1
 8002c9c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2201      	movs	r2, #1
 8002ca2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d004      	beq.n	8002cc0 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cba:	6878      	ldr	r0, [r7, #4]
 8002cbc:	4798      	blx	r3
    }
  }
  return;
 8002cbe:	bf00      	nop
 8002cc0:	bf00      	nop
}
 8002cc2:	3710      	adds	r7, #16
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bd80      	pop	{r7, pc}
 8002cc8:	40020008 	.word	0x40020008
 8002ccc:	4002001c 	.word	0x4002001c
 8002cd0:	40020030 	.word	0x40020030
 8002cd4:	40020044 	.word	0x40020044
 8002cd8:	40020058 	.word	0x40020058
 8002cdc:	4002006c 	.word	0x4002006c
 8002ce0:	40020000 	.word	0x40020000

08002ce4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b085      	sub	sp, #20
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	60f8      	str	r0, [r7, #12]
 8002cec:	60b9      	str	r1, [r7, #8]
 8002cee:	607a      	str	r2, [r7, #4]
 8002cf0:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cfa:	2101      	movs	r1, #1
 8002cfc:	fa01 f202 	lsl.w	r2, r1, r2
 8002d00:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	683a      	ldr	r2, [r7, #0]
 8002d08:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	2b10      	cmp	r3, #16
 8002d10:	d108      	bne.n	8002d24 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	687a      	ldr	r2, [r7, #4]
 8002d18:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	68ba      	ldr	r2, [r7, #8]
 8002d20:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002d22:	e007      	b.n	8002d34 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	68ba      	ldr	r2, [r7, #8]
 8002d2a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	687a      	ldr	r2, [r7, #4]
 8002d32:	60da      	str	r2, [r3, #12]
}
 8002d34:	bf00      	nop
 8002d36:	3714      	adds	r7, #20
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bc80      	pop	{r7}
 8002d3c:	4770      	bx	lr
	...

08002d40 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d40:	b480      	push	{r7}
 8002d42:	b08b      	sub	sp, #44	@ 0x2c
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
 8002d48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d52:	e169      	b.n	8003028 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002d54:	2201      	movs	r2, #1
 8002d56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d58:	fa02 f303 	lsl.w	r3, r2, r3
 8002d5c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	69fa      	ldr	r2, [r7, #28]
 8002d64:	4013      	ands	r3, r2
 8002d66:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002d68:	69ba      	ldr	r2, [r7, #24]
 8002d6a:	69fb      	ldr	r3, [r7, #28]
 8002d6c:	429a      	cmp	r2, r3
 8002d6e:	f040 8158 	bne.w	8003022 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	4a9a      	ldr	r2, [pc, #616]	@ (8002fe0 <HAL_GPIO_Init+0x2a0>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d05e      	beq.n	8002e3a <HAL_GPIO_Init+0xfa>
 8002d7c:	4a98      	ldr	r2, [pc, #608]	@ (8002fe0 <HAL_GPIO_Init+0x2a0>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d875      	bhi.n	8002e6e <HAL_GPIO_Init+0x12e>
 8002d82:	4a98      	ldr	r2, [pc, #608]	@ (8002fe4 <HAL_GPIO_Init+0x2a4>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d058      	beq.n	8002e3a <HAL_GPIO_Init+0xfa>
 8002d88:	4a96      	ldr	r2, [pc, #600]	@ (8002fe4 <HAL_GPIO_Init+0x2a4>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d86f      	bhi.n	8002e6e <HAL_GPIO_Init+0x12e>
 8002d8e:	4a96      	ldr	r2, [pc, #600]	@ (8002fe8 <HAL_GPIO_Init+0x2a8>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d052      	beq.n	8002e3a <HAL_GPIO_Init+0xfa>
 8002d94:	4a94      	ldr	r2, [pc, #592]	@ (8002fe8 <HAL_GPIO_Init+0x2a8>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d869      	bhi.n	8002e6e <HAL_GPIO_Init+0x12e>
 8002d9a:	4a94      	ldr	r2, [pc, #592]	@ (8002fec <HAL_GPIO_Init+0x2ac>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d04c      	beq.n	8002e3a <HAL_GPIO_Init+0xfa>
 8002da0:	4a92      	ldr	r2, [pc, #584]	@ (8002fec <HAL_GPIO_Init+0x2ac>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d863      	bhi.n	8002e6e <HAL_GPIO_Init+0x12e>
 8002da6:	4a92      	ldr	r2, [pc, #584]	@ (8002ff0 <HAL_GPIO_Init+0x2b0>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d046      	beq.n	8002e3a <HAL_GPIO_Init+0xfa>
 8002dac:	4a90      	ldr	r2, [pc, #576]	@ (8002ff0 <HAL_GPIO_Init+0x2b0>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d85d      	bhi.n	8002e6e <HAL_GPIO_Init+0x12e>
 8002db2:	2b12      	cmp	r3, #18
 8002db4:	d82a      	bhi.n	8002e0c <HAL_GPIO_Init+0xcc>
 8002db6:	2b12      	cmp	r3, #18
 8002db8:	d859      	bhi.n	8002e6e <HAL_GPIO_Init+0x12e>
 8002dba:	a201      	add	r2, pc, #4	@ (adr r2, 8002dc0 <HAL_GPIO_Init+0x80>)
 8002dbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dc0:	08002e3b 	.word	0x08002e3b
 8002dc4:	08002e15 	.word	0x08002e15
 8002dc8:	08002e27 	.word	0x08002e27
 8002dcc:	08002e69 	.word	0x08002e69
 8002dd0:	08002e6f 	.word	0x08002e6f
 8002dd4:	08002e6f 	.word	0x08002e6f
 8002dd8:	08002e6f 	.word	0x08002e6f
 8002ddc:	08002e6f 	.word	0x08002e6f
 8002de0:	08002e6f 	.word	0x08002e6f
 8002de4:	08002e6f 	.word	0x08002e6f
 8002de8:	08002e6f 	.word	0x08002e6f
 8002dec:	08002e6f 	.word	0x08002e6f
 8002df0:	08002e6f 	.word	0x08002e6f
 8002df4:	08002e6f 	.word	0x08002e6f
 8002df8:	08002e6f 	.word	0x08002e6f
 8002dfc:	08002e6f 	.word	0x08002e6f
 8002e00:	08002e6f 	.word	0x08002e6f
 8002e04:	08002e1d 	.word	0x08002e1d
 8002e08:	08002e31 	.word	0x08002e31
 8002e0c:	4a79      	ldr	r2, [pc, #484]	@ (8002ff4 <HAL_GPIO_Init+0x2b4>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d013      	beq.n	8002e3a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002e12:	e02c      	b.n	8002e6e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	68db      	ldr	r3, [r3, #12]
 8002e18:	623b      	str	r3, [r7, #32]
          break;
 8002e1a:	e029      	b.n	8002e70 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	68db      	ldr	r3, [r3, #12]
 8002e20:	3304      	adds	r3, #4
 8002e22:	623b      	str	r3, [r7, #32]
          break;
 8002e24:	e024      	b.n	8002e70 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	68db      	ldr	r3, [r3, #12]
 8002e2a:	3308      	adds	r3, #8
 8002e2c:	623b      	str	r3, [r7, #32]
          break;
 8002e2e:	e01f      	b.n	8002e70 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	68db      	ldr	r3, [r3, #12]
 8002e34:	330c      	adds	r3, #12
 8002e36:	623b      	str	r3, [r7, #32]
          break;
 8002e38:	e01a      	b.n	8002e70 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	689b      	ldr	r3, [r3, #8]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d102      	bne.n	8002e48 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002e42:	2304      	movs	r3, #4
 8002e44:	623b      	str	r3, [r7, #32]
          break;
 8002e46:	e013      	b.n	8002e70 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	689b      	ldr	r3, [r3, #8]
 8002e4c:	2b01      	cmp	r3, #1
 8002e4e:	d105      	bne.n	8002e5c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002e50:	2308      	movs	r3, #8
 8002e52:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	69fa      	ldr	r2, [r7, #28]
 8002e58:	611a      	str	r2, [r3, #16]
          break;
 8002e5a:	e009      	b.n	8002e70 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002e5c:	2308      	movs	r3, #8
 8002e5e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	69fa      	ldr	r2, [r7, #28]
 8002e64:	615a      	str	r2, [r3, #20]
          break;
 8002e66:	e003      	b.n	8002e70 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002e68:	2300      	movs	r3, #0
 8002e6a:	623b      	str	r3, [r7, #32]
          break;
 8002e6c:	e000      	b.n	8002e70 <HAL_GPIO_Init+0x130>
          break;
 8002e6e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002e70:	69bb      	ldr	r3, [r7, #24]
 8002e72:	2bff      	cmp	r3, #255	@ 0xff
 8002e74:	d801      	bhi.n	8002e7a <HAL_GPIO_Init+0x13a>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	e001      	b.n	8002e7e <HAL_GPIO_Init+0x13e>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	3304      	adds	r3, #4
 8002e7e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002e80:	69bb      	ldr	r3, [r7, #24]
 8002e82:	2bff      	cmp	r3, #255	@ 0xff
 8002e84:	d802      	bhi.n	8002e8c <HAL_GPIO_Init+0x14c>
 8002e86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e88:	009b      	lsls	r3, r3, #2
 8002e8a:	e002      	b.n	8002e92 <HAL_GPIO_Init+0x152>
 8002e8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e8e:	3b08      	subs	r3, #8
 8002e90:	009b      	lsls	r3, r3, #2
 8002e92:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002e94:	697b      	ldr	r3, [r7, #20]
 8002e96:	681a      	ldr	r2, [r3, #0]
 8002e98:	210f      	movs	r1, #15
 8002e9a:	693b      	ldr	r3, [r7, #16]
 8002e9c:	fa01 f303 	lsl.w	r3, r1, r3
 8002ea0:	43db      	mvns	r3, r3
 8002ea2:	401a      	ands	r2, r3
 8002ea4:	6a39      	ldr	r1, [r7, #32]
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	fa01 f303 	lsl.w	r3, r1, r3
 8002eac:	431a      	orrs	r2, r3
 8002eae:	697b      	ldr	r3, [r7, #20]
 8002eb0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	f000 80b1 	beq.w	8003022 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002ec0:	4b4d      	ldr	r3, [pc, #308]	@ (8002ff8 <HAL_GPIO_Init+0x2b8>)
 8002ec2:	699b      	ldr	r3, [r3, #24]
 8002ec4:	4a4c      	ldr	r2, [pc, #304]	@ (8002ff8 <HAL_GPIO_Init+0x2b8>)
 8002ec6:	f043 0301 	orr.w	r3, r3, #1
 8002eca:	6193      	str	r3, [r2, #24]
 8002ecc:	4b4a      	ldr	r3, [pc, #296]	@ (8002ff8 <HAL_GPIO_Init+0x2b8>)
 8002ece:	699b      	ldr	r3, [r3, #24]
 8002ed0:	f003 0301 	and.w	r3, r3, #1
 8002ed4:	60bb      	str	r3, [r7, #8]
 8002ed6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002ed8:	4a48      	ldr	r2, [pc, #288]	@ (8002ffc <HAL_GPIO_Init+0x2bc>)
 8002eda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002edc:	089b      	lsrs	r3, r3, #2
 8002ede:	3302      	adds	r3, #2
 8002ee0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ee4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002ee6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ee8:	f003 0303 	and.w	r3, r3, #3
 8002eec:	009b      	lsls	r3, r3, #2
 8002eee:	220f      	movs	r2, #15
 8002ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef4:	43db      	mvns	r3, r3
 8002ef6:	68fa      	ldr	r2, [r7, #12]
 8002ef8:	4013      	ands	r3, r2
 8002efa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	4a40      	ldr	r2, [pc, #256]	@ (8003000 <HAL_GPIO_Init+0x2c0>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d013      	beq.n	8002f2c <HAL_GPIO_Init+0x1ec>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	4a3f      	ldr	r2, [pc, #252]	@ (8003004 <HAL_GPIO_Init+0x2c4>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d00d      	beq.n	8002f28 <HAL_GPIO_Init+0x1e8>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	4a3e      	ldr	r2, [pc, #248]	@ (8003008 <HAL_GPIO_Init+0x2c8>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d007      	beq.n	8002f24 <HAL_GPIO_Init+0x1e4>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	4a3d      	ldr	r2, [pc, #244]	@ (800300c <HAL_GPIO_Init+0x2cc>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d101      	bne.n	8002f20 <HAL_GPIO_Init+0x1e0>
 8002f1c:	2303      	movs	r3, #3
 8002f1e:	e006      	b.n	8002f2e <HAL_GPIO_Init+0x1ee>
 8002f20:	2304      	movs	r3, #4
 8002f22:	e004      	b.n	8002f2e <HAL_GPIO_Init+0x1ee>
 8002f24:	2302      	movs	r3, #2
 8002f26:	e002      	b.n	8002f2e <HAL_GPIO_Init+0x1ee>
 8002f28:	2301      	movs	r3, #1
 8002f2a:	e000      	b.n	8002f2e <HAL_GPIO_Init+0x1ee>
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f30:	f002 0203 	and.w	r2, r2, #3
 8002f34:	0092      	lsls	r2, r2, #2
 8002f36:	4093      	lsls	r3, r2
 8002f38:	68fa      	ldr	r2, [r7, #12]
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002f3e:	492f      	ldr	r1, [pc, #188]	@ (8002ffc <HAL_GPIO_Init+0x2bc>)
 8002f40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f42:	089b      	lsrs	r3, r3, #2
 8002f44:	3302      	adds	r3, #2
 8002f46:	68fa      	ldr	r2, [r7, #12]
 8002f48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d006      	beq.n	8002f66 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002f58:	4b2d      	ldr	r3, [pc, #180]	@ (8003010 <HAL_GPIO_Init+0x2d0>)
 8002f5a:	689a      	ldr	r2, [r3, #8]
 8002f5c:	492c      	ldr	r1, [pc, #176]	@ (8003010 <HAL_GPIO_Init+0x2d0>)
 8002f5e:	69bb      	ldr	r3, [r7, #24]
 8002f60:	4313      	orrs	r3, r2
 8002f62:	608b      	str	r3, [r1, #8]
 8002f64:	e006      	b.n	8002f74 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002f66:	4b2a      	ldr	r3, [pc, #168]	@ (8003010 <HAL_GPIO_Init+0x2d0>)
 8002f68:	689a      	ldr	r2, [r3, #8]
 8002f6a:	69bb      	ldr	r3, [r7, #24]
 8002f6c:	43db      	mvns	r3, r3
 8002f6e:	4928      	ldr	r1, [pc, #160]	@ (8003010 <HAL_GPIO_Init+0x2d0>)
 8002f70:	4013      	ands	r3, r2
 8002f72:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d006      	beq.n	8002f8e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002f80:	4b23      	ldr	r3, [pc, #140]	@ (8003010 <HAL_GPIO_Init+0x2d0>)
 8002f82:	68da      	ldr	r2, [r3, #12]
 8002f84:	4922      	ldr	r1, [pc, #136]	@ (8003010 <HAL_GPIO_Init+0x2d0>)
 8002f86:	69bb      	ldr	r3, [r7, #24]
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	60cb      	str	r3, [r1, #12]
 8002f8c:	e006      	b.n	8002f9c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002f8e:	4b20      	ldr	r3, [pc, #128]	@ (8003010 <HAL_GPIO_Init+0x2d0>)
 8002f90:	68da      	ldr	r2, [r3, #12]
 8002f92:	69bb      	ldr	r3, [r7, #24]
 8002f94:	43db      	mvns	r3, r3
 8002f96:	491e      	ldr	r1, [pc, #120]	@ (8003010 <HAL_GPIO_Init+0x2d0>)
 8002f98:	4013      	ands	r3, r2
 8002f9a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d006      	beq.n	8002fb6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002fa8:	4b19      	ldr	r3, [pc, #100]	@ (8003010 <HAL_GPIO_Init+0x2d0>)
 8002faa:	685a      	ldr	r2, [r3, #4]
 8002fac:	4918      	ldr	r1, [pc, #96]	@ (8003010 <HAL_GPIO_Init+0x2d0>)
 8002fae:	69bb      	ldr	r3, [r7, #24]
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	604b      	str	r3, [r1, #4]
 8002fb4:	e006      	b.n	8002fc4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002fb6:	4b16      	ldr	r3, [pc, #88]	@ (8003010 <HAL_GPIO_Init+0x2d0>)
 8002fb8:	685a      	ldr	r2, [r3, #4]
 8002fba:	69bb      	ldr	r3, [r7, #24]
 8002fbc:	43db      	mvns	r3, r3
 8002fbe:	4914      	ldr	r1, [pc, #80]	@ (8003010 <HAL_GPIO_Init+0x2d0>)
 8002fc0:	4013      	ands	r3, r2
 8002fc2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d021      	beq.n	8003014 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002fd0:	4b0f      	ldr	r3, [pc, #60]	@ (8003010 <HAL_GPIO_Init+0x2d0>)
 8002fd2:	681a      	ldr	r2, [r3, #0]
 8002fd4:	490e      	ldr	r1, [pc, #56]	@ (8003010 <HAL_GPIO_Init+0x2d0>)
 8002fd6:	69bb      	ldr	r3, [r7, #24]
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	600b      	str	r3, [r1, #0]
 8002fdc:	e021      	b.n	8003022 <HAL_GPIO_Init+0x2e2>
 8002fde:	bf00      	nop
 8002fe0:	10320000 	.word	0x10320000
 8002fe4:	10310000 	.word	0x10310000
 8002fe8:	10220000 	.word	0x10220000
 8002fec:	10210000 	.word	0x10210000
 8002ff0:	10120000 	.word	0x10120000
 8002ff4:	10110000 	.word	0x10110000
 8002ff8:	40021000 	.word	0x40021000
 8002ffc:	40010000 	.word	0x40010000
 8003000:	40010800 	.word	0x40010800
 8003004:	40010c00 	.word	0x40010c00
 8003008:	40011000 	.word	0x40011000
 800300c:	40011400 	.word	0x40011400
 8003010:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003014:	4b0b      	ldr	r3, [pc, #44]	@ (8003044 <HAL_GPIO_Init+0x304>)
 8003016:	681a      	ldr	r2, [r3, #0]
 8003018:	69bb      	ldr	r3, [r7, #24]
 800301a:	43db      	mvns	r3, r3
 800301c:	4909      	ldr	r1, [pc, #36]	@ (8003044 <HAL_GPIO_Init+0x304>)
 800301e:	4013      	ands	r3, r2
 8003020:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003022:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003024:	3301      	adds	r3, #1
 8003026:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	681a      	ldr	r2, [r3, #0]
 800302c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800302e:	fa22 f303 	lsr.w	r3, r2, r3
 8003032:	2b00      	cmp	r3, #0
 8003034:	f47f ae8e 	bne.w	8002d54 <HAL_GPIO_Init+0x14>
  }
}
 8003038:	bf00      	nop
 800303a:	bf00      	nop
 800303c:	372c      	adds	r7, #44	@ 0x2c
 800303e:	46bd      	mov	sp, r7
 8003040:	bc80      	pop	{r7}
 8003042:	4770      	bx	lr
 8003044:	40010400 	.word	0x40010400

08003048 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003048:	b480      	push	{r7}
 800304a:	b083      	sub	sp, #12
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
 8003050:	460b      	mov	r3, r1
 8003052:	807b      	strh	r3, [r7, #2]
 8003054:	4613      	mov	r3, r2
 8003056:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003058:	787b      	ldrb	r3, [r7, #1]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d003      	beq.n	8003066 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800305e:	887a      	ldrh	r2, [r7, #2]
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003064:	e003      	b.n	800306e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003066:	887b      	ldrh	r3, [r7, #2]
 8003068:	041a      	lsls	r2, r3, #16
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	611a      	str	r2, [r3, #16]
}
 800306e:	bf00      	nop
 8003070:	370c      	adds	r7, #12
 8003072:	46bd      	mov	sp, r7
 8003074:	bc80      	pop	{r7}
 8003076:	4770      	bx	lr

08003078 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b082      	sub	sp, #8
 800307c:	af00      	add	r7, sp, #0
 800307e:	4603      	mov	r3, r0
 8003080:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003082:	4b08      	ldr	r3, [pc, #32]	@ (80030a4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003084:	695a      	ldr	r2, [r3, #20]
 8003086:	88fb      	ldrh	r3, [r7, #6]
 8003088:	4013      	ands	r3, r2
 800308a:	2b00      	cmp	r3, #0
 800308c:	d006      	beq.n	800309c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800308e:	4a05      	ldr	r2, [pc, #20]	@ (80030a4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003090:	88fb      	ldrh	r3, [r7, #6]
 8003092:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003094:	88fb      	ldrh	r3, [r7, #6]
 8003096:	4618      	mov	r0, r3
 8003098:	f7fe fb4a 	bl	8001730 <HAL_GPIO_EXTI_Callback>
  }
}
 800309c:	bf00      	nop
 800309e:	3708      	adds	r7, #8
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bd80      	pop	{r7, pc}
 80030a4:	40010400 	.word	0x40010400

080030a8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b084      	sub	sp, #16
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d101      	bne.n	80030ba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80030b6:	2301      	movs	r3, #1
 80030b8:	e12b      	b.n	8003312 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80030c0:	b2db      	uxtb	r3, r3
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d106      	bne.n	80030d4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2200      	movs	r2, #0
 80030ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80030ce:	6878      	ldr	r0, [r7, #4]
 80030d0:	f7fd ff98 	bl	8001004 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2224      	movs	r2, #36	@ 0x24
 80030d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	681a      	ldr	r2, [r3, #0]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f022 0201 	bic.w	r2, r2, #1
 80030ea:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	681a      	ldr	r2, [r3, #0]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80030fa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	681a      	ldr	r2, [r3, #0]
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800310a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800310c:	f001 f84e 	bl	80041ac <HAL_RCC_GetPCLK1Freq>
 8003110:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	4a81      	ldr	r2, [pc, #516]	@ (800331c <HAL_I2C_Init+0x274>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d807      	bhi.n	800312c <HAL_I2C_Init+0x84>
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	4a80      	ldr	r2, [pc, #512]	@ (8003320 <HAL_I2C_Init+0x278>)
 8003120:	4293      	cmp	r3, r2
 8003122:	bf94      	ite	ls
 8003124:	2301      	movls	r3, #1
 8003126:	2300      	movhi	r3, #0
 8003128:	b2db      	uxtb	r3, r3
 800312a:	e006      	b.n	800313a <HAL_I2C_Init+0x92>
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	4a7d      	ldr	r2, [pc, #500]	@ (8003324 <HAL_I2C_Init+0x27c>)
 8003130:	4293      	cmp	r3, r2
 8003132:	bf94      	ite	ls
 8003134:	2301      	movls	r3, #1
 8003136:	2300      	movhi	r3, #0
 8003138:	b2db      	uxtb	r3, r3
 800313a:	2b00      	cmp	r3, #0
 800313c:	d001      	beq.n	8003142 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	e0e7      	b.n	8003312 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	4a78      	ldr	r2, [pc, #480]	@ (8003328 <HAL_I2C_Init+0x280>)
 8003146:	fba2 2303 	umull	r2, r3, r2, r3
 800314a:	0c9b      	lsrs	r3, r3, #18
 800314c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	68ba      	ldr	r2, [r7, #8]
 800315e:	430a      	orrs	r2, r1
 8003160:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	6a1b      	ldr	r3, [r3, #32]
 8003168:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	4a6a      	ldr	r2, [pc, #424]	@ (800331c <HAL_I2C_Init+0x274>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d802      	bhi.n	800317c <HAL_I2C_Init+0xd4>
 8003176:	68bb      	ldr	r3, [r7, #8]
 8003178:	3301      	adds	r3, #1
 800317a:	e009      	b.n	8003190 <HAL_I2C_Init+0xe8>
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003182:	fb02 f303 	mul.w	r3, r2, r3
 8003186:	4a69      	ldr	r2, [pc, #420]	@ (800332c <HAL_I2C_Init+0x284>)
 8003188:	fba2 2303 	umull	r2, r3, r2, r3
 800318c:	099b      	lsrs	r3, r3, #6
 800318e:	3301      	adds	r3, #1
 8003190:	687a      	ldr	r2, [r7, #4]
 8003192:	6812      	ldr	r2, [r2, #0]
 8003194:	430b      	orrs	r3, r1
 8003196:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	69db      	ldr	r3, [r3, #28]
 800319e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80031a2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	495c      	ldr	r1, [pc, #368]	@ (800331c <HAL_I2C_Init+0x274>)
 80031ac:	428b      	cmp	r3, r1
 80031ae:	d819      	bhi.n	80031e4 <HAL_I2C_Init+0x13c>
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	1e59      	subs	r1, r3, #1
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	005b      	lsls	r3, r3, #1
 80031ba:	fbb1 f3f3 	udiv	r3, r1, r3
 80031be:	1c59      	adds	r1, r3, #1
 80031c0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80031c4:	400b      	ands	r3, r1
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d00a      	beq.n	80031e0 <HAL_I2C_Init+0x138>
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	1e59      	subs	r1, r3, #1
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	005b      	lsls	r3, r3, #1
 80031d4:	fbb1 f3f3 	udiv	r3, r1, r3
 80031d8:	3301      	adds	r3, #1
 80031da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031de:	e051      	b.n	8003284 <HAL_I2C_Init+0x1dc>
 80031e0:	2304      	movs	r3, #4
 80031e2:	e04f      	b.n	8003284 <HAL_I2C_Init+0x1dc>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	689b      	ldr	r3, [r3, #8]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d111      	bne.n	8003210 <HAL_I2C_Init+0x168>
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	1e58      	subs	r0, r3, #1
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6859      	ldr	r1, [r3, #4]
 80031f4:	460b      	mov	r3, r1
 80031f6:	005b      	lsls	r3, r3, #1
 80031f8:	440b      	add	r3, r1
 80031fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80031fe:	3301      	adds	r3, #1
 8003200:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003204:	2b00      	cmp	r3, #0
 8003206:	bf0c      	ite	eq
 8003208:	2301      	moveq	r3, #1
 800320a:	2300      	movne	r3, #0
 800320c:	b2db      	uxtb	r3, r3
 800320e:	e012      	b.n	8003236 <HAL_I2C_Init+0x18e>
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	1e58      	subs	r0, r3, #1
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6859      	ldr	r1, [r3, #4]
 8003218:	460b      	mov	r3, r1
 800321a:	009b      	lsls	r3, r3, #2
 800321c:	440b      	add	r3, r1
 800321e:	0099      	lsls	r1, r3, #2
 8003220:	440b      	add	r3, r1
 8003222:	fbb0 f3f3 	udiv	r3, r0, r3
 8003226:	3301      	adds	r3, #1
 8003228:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800322c:	2b00      	cmp	r3, #0
 800322e:	bf0c      	ite	eq
 8003230:	2301      	moveq	r3, #1
 8003232:	2300      	movne	r3, #0
 8003234:	b2db      	uxtb	r3, r3
 8003236:	2b00      	cmp	r3, #0
 8003238:	d001      	beq.n	800323e <HAL_I2C_Init+0x196>
 800323a:	2301      	movs	r3, #1
 800323c:	e022      	b.n	8003284 <HAL_I2C_Init+0x1dc>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	689b      	ldr	r3, [r3, #8]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d10e      	bne.n	8003264 <HAL_I2C_Init+0x1bc>
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	1e58      	subs	r0, r3, #1
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6859      	ldr	r1, [r3, #4]
 800324e:	460b      	mov	r3, r1
 8003250:	005b      	lsls	r3, r3, #1
 8003252:	440b      	add	r3, r1
 8003254:	fbb0 f3f3 	udiv	r3, r0, r3
 8003258:	3301      	adds	r3, #1
 800325a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800325e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003262:	e00f      	b.n	8003284 <HAL_I2C_Init+0x1dc>
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	1e58      	subs	r0, r3, #1
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6859      	ldr	r1, [r3, #4]
 800326c:	460b      	mov	r3, r1
 800326e:	009b      	lsls	r3, r3, #2
 8003270:	440b      	add	r3, r1
 8003272:	0099      	lsls	r1, r3, #2
 8003274:	440b      	add	r3, r1
 8003276:	fbb0 f3f3 	udiv	r3, r0, r3
 800327a:	3301      	adds	r3, #1
 800327c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003280:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003284:	6879      	ldr	r1, [r7, #4]
 8003286:	6809      	ldr	r1, [r1, #0]
 8003288:	4313      	orrs	r3, r2
 800328a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	69da      	ldr	r2, [r3, #28]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6a1b      	ldr	r3, [r3, #32]
 800329e:	431a      	orrs	r2, r3
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	430a      	orrs	r2, r1
 80032a6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	689b      	ldr	r3, [r3, #8]
 80032ae:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80032b2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80032b6:	687a      	ldr	r2, [r7, #4]
 80032b8:	6911      	ldr	r1, [r2, #16]
 80032ba:	687a      	ldr	r2, [r7, #4]
 80032bc:	68d2      	ldr	r2, [r2, #12]
 80032be:	4311      	orrs	r1, r2
 80032c0:	687a      	ldr	r2, [r7, #4]
 80032c2:	6812      	ldr	r2, [r2, #0]
 80032c4:	430b      	orrs	r3, r1
 80032c6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	68db      	ldr	r3, [r3, #12]
 80032ce:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	695a      	ldr	r2, [r3, #20]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	699b      	ldr	r3, [r3, #24]
 80032da:	431a      	orrs	r2, r3
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	430a      	orrs	r2, r1
 80032e2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	681a      	ldr	r2, [r3, #0]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f042 0201 	orr.w	r2, r2, #1
 80032f2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2200      	movs	r2, #0
 80032f8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2220      	movs	r2, #32
 80032fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2200      	movs	r2, #0
 8003306:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2200      	movs	r2, #0
 800330c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003310:	2300      	movs	r3, #0
}
 8003312:	4618      	mov	r0, r3
 8003314:	3710      	adds	r7, #16
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}
 800331a:	bf00      	nop
 800331c:	000186a0 	.word	0x000186a0
 8003320:	001e847f 	.word	0x001e847f
 8003324:	003d08ff 	.word	0x003d08ff
 8003328:	431bde83 	.word	0x431bde83
 800332c:	10624dd3 	.word	0x10624dd3

08003330 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b088      	sub	sp, #32
 8003334:	af02      	add	r7, sp, #8
 8003336:	60f8      	str	r0, [r7, #12]
 8003338:	4608      	mov	r0, r1
 800333a:	4611      	mov	r1, r2
 800333c:	461a      	mov	r2, r3
 800333e:	4603      	mov	r3, r0
 8003340:	817b      	strh	r3, [r7, #10]
 8003342:	460b      	mov	r3, r1
 8003344:	813b      	strh	r3, [r7, #8]
 8003346:	4613      	mov	r3, r2
 8003348:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800334a:	f7fe fcef 	bl	8001d2c <HAL_GetTick>
 800334e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003356:	b2db      	uxtb	r3, r3
 8003358:	2b20      	cmp	r3, #32
 800335a:	f040 80d9 	bne.w	8003510 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800335e:	697b      	ldr	r3, [r7, #20]
 8003360:	9300      	str	r3, [sp, #0]
 8003362:	2319      	movs	r3, #25
 8003364:	2201      	movs	r2, #1
 8003366:	496d      	ldr	r1, [pc, #436]	@ (800351c <HAL_I2C_Mem_Write+0x1ec>)
 8003368:	68f8      	ldr	r0, [r7, #12]
 800336a:	f000 f971 	bl	8003650 <I2C_WaitOnFlagUntilTimeout>
 800336e:	4603      	mov	r3, r0
 8003370:	2b00      	cmp	r3, #0
 8003372:	d001      	beq.n	8003378 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003374:	2302      	movs	r3, #2
 8003376:	e0cc      	b.n	8003512 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800337e:	2b01      	cmp	r3, #1
 8003380:	d101      	bne.n	8003386 <HAL_I2C_Mem_Write+0x56>
 8003382:	2302      	movs	r3, #2
 8003384:	e0c5      	b.n	8003512 <HAL_I2C_Mem_Write+0x1e2>
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	2201      	movs	r2, #1
 800338a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f003 0301 	and.w	r3, r3, #1
 8003398:	2b01      	cmp	r3, #1
 800339a:	d007      	beq.n	80033ac <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	681a      	ldr	r2, [r3, #0]
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f042 0201 	orr.w	r2, r2, #1
 80033aa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	681a      	ldr	r2, [r3, #0]
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80033ba:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	2221      	movs	r2, #33	@ 0x21
 80033c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	2240      	movs	r2, #64	@ 0x40
 80033c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	2200      	movs	r2, #0
 80033d0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	6a3a      	ldr	r2, [r7, #32]
 80033d6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80033dc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033e2:	b29a      	uxth	r2, r3
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	4a4d      	ldr	r2, [pc, #308]	@ (8003520 <HAL_I2C_Mem_Write+0x1f0>)
 80033ec:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80033ee:	88f8      	ldrh	r0, [r7, #6]
 80033f0:	893a      	ldrh	r2, [r7, #8]
 80033f2:	8979      	ldrh	r1, [r7, #10]
 80033f4:	697b      	ldr	r3, [r7, #20]
 80033f6:	9301      	str	r3, [sp, #4]
 80033f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033fa:	9300      	str	r3, [sp, #0]
 80033fc:	4603      	mov	r3, r0
 80033fe:	68f8      	ldr	r0, [r7, #12]
 8003400:	f000 f890 	bl	8003524 <I2C_RequestMemoryWrite>
 8003404:	4603      	mov	r3, r0
 8003406:	2b00      	cmp	r3, #0
 8003408:	d052      	beq.n	80034b0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	e081      	b.n	8003512 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800340e:	697a      	ldr	r2, [r7, #20]
 8003410:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003412:	68f8      	ldr	r0, [r7, #12]
 8003414:	f000 fa36 	bl	8003884 <I2C_WaitOnTXEFlagUntilTimeout>
 8003418:	4603      	mov	r3, r0
 800341a:	2b00      	cmp	r3, #0
 800341c:	d00d      	beq.n	800343a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003422:	2b04      	cmp	r3, #4
 8003424:	d107      	bne.n	8003436 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	681a      	ldr	r2, [r3, #0]
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003434:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003436:	2301      	movs	r3, #1
 8003438:	e06b      	b.n	8003512 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800343e:	781a      	ldrb	r2, [r3, #0]
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800344a:	1c5a      	adds	r2, r3, #1
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003454:	3b01      	subs	r3, #1
 8003456:	b29a      	uxth	r2, r3
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003460:	b29b      	uxth	r3, r3
 8003462:	3b01      	subs	r3, #1
 8003464:	b29a      	uxth	r2, r3
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	695b      	ldr	r3, [r3, #20]
 8003470:	f003 0304 	and.w	r3, r3, #4
 8003474:	2b04      	cmp	r3, #4
 8003476:	d11b      	bne.n	80034b0 <HAL_I2C_Mem_Write+0x180>
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800347c:	2b00      	cmp	r3, #0
 800347e:	d017      	beq.n	80034b0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003484:	781a      	ldrb	r2, [r3, #0]
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003490:	1c5a      	adds	r2, r3, #1
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800349a:	3b01      	subs	r3, #1
 800349c:	b29a      	uxth	r2, r3
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034a6:	b29b      	uxth	r3, r3
 80034a8:	3b01      	subs	r3, #1
 80034aa:	b29a      	uxth	r2, r3
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d1aa      	bne.n	800340e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034b8:	697a      	ldr	r2, [r7, #20]
 80034ba:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80034bc:	68f8      	ldr	r0, [r7, #12]
 80034be:	f000 fa29 	bl	8003914 <I2C_WaitOnBTFFlagUntilTimeout>
 80034c2:	4603      	mov	r3, r0
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d00d      	beq.n	80034e4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034cc:	2b04      	cmp	r3, #4
 80034ce:	d107      	bne.n	80034e0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	681a      	ldr	r2, [r3, #0]
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80034de:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80034e0:	2301      	movs	r3, #1
 80034e2:	e016      	b.n	8003512 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	681a      	ldr	r2, [r3, #0]
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80034f2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	2220      	movs	r2, #32
 80034f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	2200      	movs	r2, #0
 8003500:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	2200      	movs	r2, #0
 8003508:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800350c:	2300      	movs	r3, #0
 800350e:	e000      	b.n	8003512 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003510:	2302      	movs	r3, #2
  }
}
 8003512:	4618      	mov	r0, r3
 8003514:	3718      	adds	r7, #24
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}
 800351a:	bf00      	nop
 800351c:	00100002 	.word	0x00100002
 8003520:	ffff0000 	.word	0xffff0000

08003524 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b088      	sub	sp, #32
 8003528:	af02      	add	r7, sp, #8
 800352a:	60f8      	str	r0, [r7, #12]
 800352c:	4608      	mov	r0, r1
 800352e:	4611      	mov	r1, r2
 8003530:	461a      	mov	r2, r3
 8003532:	4603      	mov	r3, r0
 8003534:	817b      	strh	r3, [r7, #10]
 8003536:	460b      	mov	r3, r1
 8003538:	813b      	strh	r3, [r7, #8]
 800353a:	4613      	mov	r3, r2
 800353c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	681a      	ldr	r2, [r3, #0]
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800354c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800354e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003550:	9300      	str	r3, [sp, #0]
 8003552:	6a3b      	ldr	r3, [r7, #32]
 8003554:	2200      	movs	r2, #0
 8003556:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800355a:	68f8      	ldr	r0, [r7, #12]
 800355c:	f000 f878 	bl	8003650 <I2C_WaitOnFlagUntilTimeout>
 8003560:	4603      	mov	r3, r0
 8003562:	2b00      	cmp	r3, #0
 8003564:	d00d      	beq.n	8003582 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003570:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003574:	d103      	bne.n	800357e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800357c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800357e:	2303      	movs	r3, #3
 8003580:	e05f      	b.n	8003642 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003582:	897b      	ldrh	r3, [r7, #10]
 8003584:	b2db      	uxtb	r3, r3
 8003586:	461a      	mov	r2, r3
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003590:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003592:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003594:	6a3a      	ldr	r2, [r7, #32]
 8003596:	492d      	ldr	r1, [pc, #180]	@ (800364c <I2C_RequestMemoryWrite+0x128>)
 8003598:	68f8      	ldr	r0, [r7, #12]
 800359a:	f000 f8d3 	bl	8003744 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800359e:	4603      	mov	r3, r0
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d001      	beq.n	80035a8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80035a4:	2301      	movs	r3, #1
 80035a6:	e04c      	b.n	8003642 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035a8:	2300      	movs	r3, #0
 80035aa:	617b      	str	r3, [r7, #20]
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	695b      	ldr	r3, [r3, #20]
 80035b2:	617b      	str	r3, [r7, #20]
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	699b      	ldr	r3, [r3, #24]
 80035ba:	617b      	str	r3, [r7, #20]
 80035bc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80035be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035c0:	6a39      	ldr	r1, [r7, #32]
 80035c2:	68f8      	ldr	r0, [r7, #12]
 80035c4:	f000 f95e 	bl	8003884 <I2C_WaitOnTXEFlagUntilTimeout>
 80035c8:	4603      	mov	r3, r0
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d00d      	beq.n	80035ea <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035d2:	2b04      	cmp	r3, #4
 80035d4:	d107      	bne.n	80035e6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	681a      	ldr	r2, [r3, #0]
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80035e4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80035e6:	2301      	movs	r3, #1
 80035e8:	e02b      	b.n	8003642 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80035ea:	88fb      	ldrh	r3, [r7, #6]
 80035ec:	2b01      	cmp	r3, #1
 80035ee:	d105      	bne.n	80035fc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80035f0:	893b      	ldrh	r3, [r7, #8]
 80035f2:	b2da      	uxtb	r2, r3
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	611a      	str	r2, [r3, #16]
 80035fa:	e021      	b.n	8003640 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80035fc:	893b      	ldrh	r3, [r7, #8]
 80035fe:	0a1b      	lsrs	r3, r3, #8
 8003600:	b29b      	uxth	r3, r3
 8003602:	b2da      	uxtb	r2, r3
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800360a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800360c:	6a39      	ldr	r1, [r7, #32]
 800360e:	68f8      	ldr	r0, [r7, #12]
 8003610:	f000 f938 	bl	8003884 <I2C_WaitOnTXEFlagUntilTimeout>
 8003614:	4603      	mov	r3, r0
 8003616:	2b00      	cmp	r3, #0
 8003618:	d00d      	beq.n	8003636 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800361e:	2b04      	cmp	r3, #4
 8003620:	d107      	bne.n	8003632 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	681a      	ldr	r2, [r3, #0]
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003630:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003632:	2301      	movs	r3, #1
 8003634:	e005      	b.n	8003642 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003636:	893b      	ldrh	r3, [r7, #8]
 8003638:	b2da      	uxtb	r2, r3
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003640:	2300      	movs	r3, #0
}
 8003642:	4618      	mov	r0, r3
 8003644:	3718      	adds	r7, #24
 8003646:	46bd      	mov	sp, r7
 8003648:	bd80      	pop	{r7, pc}
 800364a:	bf00      	nop
 800364c:	00010002 	.word	0x00010002

08003650 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b084      	sub	sp, #16
 8003654:	af00      	add	r7, sp, #0
 8003656:	60f8      	str	r0, [r7, #12]
 8003658:	60b9      	str	r1, [r7, #8]
 800365a:	603b      	str	r3, [r7, #0]
 800365c:	4613      	mov	r3, r2
 800365e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003660:	e048      	b.n	80036f4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003668:	d044      	beq.n	80036f4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800366a:	f7fe fb5f 	bl	8001d2c <HAL_GetTick>
 800366e:	4602      	mov	r2, r0
 8003670:	69bb      	ldr	r3, [r7, #24]
 8003672:	1ad3      	subs	r3, r2, r3
 8003674:	683a      	ldr	r2, [r7, #0]
 8003676:	429a      	cmp	r2, r3
 8003678:	d302      	bcc.n	8003680 <I2C_WaitOnFlagUntilTimeout+0x30>
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d139      	bne.n	80036f4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003680:	68bb      	ldr	r3, [r7, #8]
 8003682:	0c1b      	lsrs	r3, r3, #16
 8003684:	b2db      	uxtb	r3, r3
 8003686:	2b01      	cmp	r3, #1
 8003688:	d10d      	bne.n	80036a6 <I2C_WaitOnFlagUntilTimeout+0x56>
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	695b      	ldr	r3, [r3, #20]
 8003690:	43da      	mvns	r2, r3
 8003692:	68bb      	ldr	r3, [r7, #8]
 8003694:	4013      	ands	r3, r2
 8003696:	b29b      	uxth	r3, r3
 8003698:	2b00      	cmp	r3, #0
 800369a:	bf0c      	ite	eq
 800369c:	2301      	moveq	r3, #1
 800369e:	2300      	movne	r3, #0
 80036a0:	b2db      	uxtb	r3, r3
 80036a2:	461a      	mov	r2, r3
 80036a4:	e00c      	b.n	80036c0 <I2C_WaitOnFlagUntilTimeout+0x70>
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	699b      	ldr	r3, [r3, #24]
 80036ac:	43da      	mvns	r2, r3
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	4013      	ands	r3, r2
 80036b2:	b29b      	uxth	r3, r3
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	bf0c      	ite	eq
 80036b8:	2301      	moveq	r3, #1
 80036ba:	2300      	movne	r3, #0
 80036bc:	b2db      	uxtb	r3, r3
 80036be:	461a      	mov	r2, r3
 80036c0:	79fb      	ldrb	r3, [r7, #7]
 80036c2:	429a      	cmp	r2, r3
 80036c4:	d116      	bne.n	80036f4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	2200      	movs	r2, #0
 80036ca:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	2220      	movs	r2, #32
 80036d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	2200      	movs	r2, #0
 80036d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036e0:	f043 0220 	orr.w	r2, r3, #32
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	2200      	movs	r2, #0
 80036ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80036f0:	2301      	movs	r3, #1
 80036f2:	e023      	b.n	800373c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	0c1b      	lsrs	r3, r3, #16
 80036f8:	b2db      	uxtb	r3, r3
 80036fa:	2b01      	cmp	r3, #1
 80036fc:	d10d      	bne.n	800371a <I2C_WaitOnFlagUntilTimeout+0xca>
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	695b      	ldr	r3, [r3, #20]
 8003704:	43da      	mvns	r2, r3
 8003706:	68bb      	ldr	r3, [r7, #8]
 8003708:	4013      	ands	r3, r2
 800370a:	b29b      	uxth	r3, r3
 800370c:	2b00      	cmp	r3, #0
 800370e:	bf0c      	ite	eq
 8003710:	2301      	moveq	r3, #1
 8003712:	2300      	movne	r3, #0
 8003714:	b2db      	uxtb	r3, r3
 8003716:	461a      	mov	r2, r3
 8003718:	e00c      	b.n	8003734 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	699b      	ldr	r3, [r3, #24]
 8003720:	43da      	mvns	r2, r3
 8003722:	68bb      	ldr	r3, [r7, #8]
 8003724:	4013      	ands	r3, r2
 8003726:	b29b      	uxth	r3, r3
 8003728:	2b00      	cmp	r3, #0
 800372a:	bf0c      	ite	eq
 800372c:	2301      	moveq	r3, #1
 800372e:	2300      	movne	r3, #0
 8003730:	b2db      	uxtb	r3, r3
 8003732:	461a      	mov	r2, r3
 8003734:	79fb      	ldrb	r3, [r7, #7]
 8003736:	429a      	cmp	r2, r3
 8003738:	d093      	beq.n	8003662 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800373a:	2300      	movs	r3, #0
}
 800373c:	4618      	mov	r0, r3
 800373e:	3710      	adds	r7, #16
 8003740:	46bd      	mov	sp, r7
 8003742:	bd80      	pop	{r7, pc}

08003744 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b084      	sub	sp, #16
 8003748:	af00      	add	r7, sp, #0
 800374a:	60f8      	str	r0, [r7, #12]
 800374c:	60b9      	str	r1, [r7, #8]
 800374e:	607a      	str	r2, [r7, #4]
 8003750:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003752:	e071      	b.n	8003838 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	695b      	ldr	r3, [r3, #20]
 800375a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800375e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003762:	d123      	bne.n	80037ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	681a      	ldr	r2, [r3, #0]
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003772:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800377c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	2200      	movs	r2, #0
 8003782:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	2220      	movs	r2, #32
 8003788:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	2200      	movs	r2, #0
 8003790:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003798:	f043 0204 	orr.w	r2, r3, #4
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	2200      	movs	r2, #0
 80037a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80037a8:	2301      	movs	r3, #1
 80037aa:	e067      	b.n	800387c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037b2:	d041      	beq.n	8003838 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037b4:	f7fe faba 	bl	8001d2c <HAL_GetTick>
 80037b8:	4602      	mov	r2, r0
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	1ad3      	subs	r3, r2, r3
 80037be:	687a      	ldr	r2, [r7, #4]
 80037c0:	429a      	cmp	r2, r3
 80037c2:	d302      	bcc.n	80037ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d136      	bne.n	8003838 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80037ca:	68bb      	ldr	r3, [r7, #8]
 80037cc:	0c1b      	lsrs	r3, r3, #16
 80037ce:	b2db      	uxtb	r3, r3
 80037d0:	2b01      	cmp	r3, #1
 80037d2:	d10c      	bne.n	80037ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	695b      	ldr	r3, [r3, #20]
 80037da:	43da      	mvns	r2, r3
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	4013      	ands	r3, r2
 80037e0:	b29b      	uxth	r3, r3
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	bf14      	ite	ne
 80037e6:	2301      	movne	r3, #1
 80037e8:	2300      	moveq	r3, #0
 80037ea:	b2db      	uxtb	r3, r3
 80037ec:	e00b      	b.n	8003806 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	699b      	ldr	r3, [r3, #24]
 80037f4:	43da      	mvns	r2, r3
 80037f6:	68bb      	ldr	r3, [r7, #8]
 80037f8:	4013      	ands	r3, r2
 80037fa:	b29b      	uxth	r3, r3
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	bf14      	ite	ne
 8003800:	2301      	movne	r3, #1
 8003802:	2300      	moveq	r3, #0
 8003804:	b2db      	uxtb	r3, r3
 8003806:	2b00      	cmp	r3, #0
 8003808:	d016      	beq.n	8003838 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	2200      	movs	r2, #0
 800380e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	2220      	movs	r2, #32
 8003814:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	2200      	movs	r2, #0
 800381c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003824:	f043 0220 	orr.w	r2, r3, #32
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	2200      	movs	r2, #0
 8003830:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003834:	2301      	movs	r3, #1
 8003836:	e021      	b.n	800387c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003838:	68bb      	ldr	r3, [r7, #8]
 800383a:	0c1b      	lsrs	r3, r3, #16
 800383c:	b2db      	uxtb	r3, r3
 800383e:	2b01      	cmp	r3, #1
 8003840:	d10c      	bne.n	800385c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	695b      	ldr	r3, [r3, #20]
 8003848:	43da      	mvns	r2, r3
 800384a:	68bb      	ldr	r3, [r7, #8]
 800384c:	4013      	ands	r3, r2
 800384e:	b29b      	uxth	r3, r3
 8003850:	2b00      	cmp	r3, #0
 8003852:	bf14      	ite	ne
 8003854:	2301      	movne	r3, #1
 8003856:	2300      	moveq	r3, #0
 8003858:	b2db      	uxtb	r3, r3
 800385a:	e00b      	b.n	8003874 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	699b      	ldr	r3, [r3, #24]
 8003862:	43da      	mvns	r2, r3
 8003864:	68bb      	ldr	r3, [r7, #8]
 8003866:	4013      	ands	r3, r2
 8003868:	b29b      	uxth	r3, r3
 800386a:	2b00      	cmp	r3, #0
 800386c:	bf14      	ite	ne
 800386e:	2301      	movne	r3, #1
 8003870:	2300      	moveq	r3, #0
 8003872:	b2db      	uxtb	r3, r3
 8003874:	2b00      	cmp	r3, #0
 8003876:	f47f af6d 	bne.w	8003754 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800387a:	2300      	movs	r3, #0
}
 800387c:	4618      	mov	r0, r3
 800387e:	3710      	adds	r7, #16
 8003880:	46bd      	mov	sp, r7
 8003882:	bd80      	pop	{r7, pc}

08003884 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b084      	sub	sp, #16
 8003888:	af00      	add	r7, sp, #0
 800388a:	60f8      	str	r0, [r7, #12]
 800388c:	60b9      	str	r1, [r7, #8]
 800388e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003890:	e034      	b.n	80038fc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003892:	68f8      	ldr	r0, [r7, #12]
 8003894:	f000 f886 	bl	80039a4 <I2C_IsAcknowledgeFailed>
 8003898:	4603      	mov	r3, r0
 800389a:	2b00      	cmp	r3, #0
 800389c:	d001      	beq.n	80038a2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800389e:	2301      	movs	r3, #1
 80038a0:	e034      	b.n	800390c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038a2:	68bb      	ldr	r3, [r7, #8]
 80038a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038a8:	d028      	beq.n	80038fc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038aa:	f7fe fa3f 	bl	8001d2c <HAL_GetTick>
 80038ae:	4602      	mov	r2, r0
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	1ad3      	subs	r3, r2, r3
 80038b4:	68ba      	ldr	r2, [r7, #8]
 80038b6:	429a      	cmp	r2, r3
 80038b8:	d302      	bcc.n	80038c0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80038ba:	68bb      	ldr	r3, [r7, #8]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d11d      	bne.n	80038fc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	695b      	ldr	r3, [r3, #20]
 80038c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038ca:	2b80      	cmp	r3, #128	@ 0x80
 80038cc:	d016      	beq.n	80038fc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	2200      	movs	r2, #0
 80038d2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	2220      	movs	r2, #32
 80038d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	2200      	movs	r2, #0
 80038e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038e8:	f043 0220 	orr.w	r2, r3, #32
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	2200      	movs	r2, #0
 80038f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80038f8:	2301      	movs	r3, #1
 80038fa:	e007      	b.n	800390c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	695b      	ldr	r3, [r3, #20]
 8003902:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003906:	2b80      	cmp	r3, #128	@ 0x80
 8003908:	d1c3      	bne.n	8003892 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800390a:	2300      	movs	r3, #0
}
 800390c:	4618      	mov	r0, r3
 800390e:	3710      	adds	r7, #16
 8003910:	46bd      	mov	sp, r7
 8003912:	bd80      	pop	{r7, pc}

08003914 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b084      	sub	sp, #16
 8003918:	af00      	add	r7, sp, #0
 800391a:	60f8      	str	r0, [r7, #12]
 800391c:	60b9      	str	r1, [r7, #8]
 800391e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003920:	e034      	b.n	800398c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003922:	68f8      	ldr	r0, [r7, #12]
 8003924:	f000 f83e 	bl	80039a4 <I2C_IsAcknowledgeFailed>
 8003928:	4603      	mov	r3, r0
 800392a:	2b00      	cmp	r3, #0
 800392c:	d001      	beq.n	8003932 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800392e:	2301      	movs	r3, #1
 8003930:	e034      	b.n	800399c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003932:	68bb      	ldr	r3, [r7, #8]
 8003934:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003938:	d028      	beq.n	800398c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800393a:	f7fe f9f7 	bl	8001d2c <HAL_GetTick>
 800393e:	4602      	mov	r2, r0
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	1ad3      	subs	r3, r2, r3
 8003944:	68ba      	ldr	r2, [r7, #8]
 8003946:	429a      	cmp	r2, r3
 8003948:	d302      	bcc.n	8003950 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800394a:	68bb      	ldr	r3, [r7, #8]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d11d      	bne.n	800398c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	695b      	ldr	r3, [r3, #20]
 8003956:	f003 0304 	and.w	r3, r3, #4
 800395a:	2b04      	cmp	r3, #4
 800395c:	d016      	beq.n	800398c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	2200      	movs	r2, #0
 8003962:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	2220      	movs	r2, #32
 8003968:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	2200      	movs	r2, #0
 8003970:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003978:	f043 0220 	orr.w	r2, r3, #32
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	2200      	movs	r2, #0
 8003984:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003988:	2301      	movs	r3, #1
 800398a:	e007      	b.n	800399c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	695b      	ldr	r3, [r3, #20]
 8003992:	f003 0304 	and.w	r3, r3, #4
 8003996:	2b04      	cmp	r3, #4
 8003998:	d1c3      	bne.n	8003922 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800399a:	2300      	movs	r3, #0
}
 800399c:	4618      	mov	r0, r3
 800399e:	3710      	adds	r7, #16
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bd80      	pop	{r7, pc}

080039a4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80039a4:	b480      	push	{r7}
 80039a6:	b083      	sub	sp, #12
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	695b      	ldr	r3, [r3, #20]
 80039b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80039b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80039ba:	d11b      	bne.n	80039f4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80039c4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2200      	movs	r2, #0
 80039ca:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2220      	movs	r2, #32
 80039d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2200      	movs	r2, #0
 80039d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039e0:	f043 0204 	orr.w	r2, r3, #4
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2200      	movs	r2, #0
 80039ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80039f0:	2301      	movs	r3, #1
 80039f2:	e000      	b.n	80039f6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80039f4:	2300      	movs	r3, #0
}
 80039f6:	4618      	mov	r0, r3
 80039f8:	370c      	adds	r7, #12
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bc80      	pop	{r7}
 80039fe:	4770      	bx	lr

08003a00 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003a00:	b480      	push	{r7}
 8003a02:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8003a04:	4b03      	ldr	r3, [pc, #12]	@ (8003a14 <HAL_PWR_EnableBkUpAccess+0x14>)
 8003a06:	2201      	movs	r2, #1
 8003a08:	601a      	str	r2, [r3, #0]
}
 8003a0a:	bf00      	nop
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	bc80      	pop	{r7}
 8003a10:	4770      	bx	lr
 8003a12:	bf00      	nop
 8003a14:	420e0020 	.word	0x420e0020

08003a18 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b086      	sub	sp, #24
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d101      	bne.n	8003a2a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a26:	2301      	movs	r3, #1
 8003a28:	e272      	b.n	8003f10 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f003 0301 	and.w	r3, r3, #1
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	f000 8087 	beq.w	8003b46 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003a38:	4b92      	ldr	r3, [pc, #584]	@ (8003c84 <HAL_RCC_OscConfig+0x26c>)
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	f003 030c 	and.w	r3, r3, #12
 8003a40:	2b04      	cmp	r3, #4
 8003a42:	d00c      	beq.n	8003a5e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003a44:	4b8f      	ldr	r3, [pc, #572]	@ (8003c84 <HAL_RCC_OscConfig+0x26c>)
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	f003 030c 	and.w	r3, r3, #12
 8003a4c:	2b08      	cmp	r3, #8
 8003a4e:	d112      	bne.n	8003a76 <HAL_RCC_OscConfig+0x5e>
 8003a50:	4b8c      	ldr	r3, [pc, #560]	@ (8003c84 <HAL_RCC_OscConfig+0x26c>)
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a58:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a5c:	d10b      	bne.n	8003a76 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a5e:	4b89      	ldr	r3, [pc, #548]	@ (8003c84 <HAL_RCC_OscConfig+0x26c>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d06c      	beq.n	8003b44 <HAL_RCC_OscConfig+0x12c>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d168      	bne.n	8003b44 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003a72:	2301      	movs	r3, #1
 8003a74:	e24c      	b.n	8003f10 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a7e:	d106      	bne.n	8003a8e <HAL_RCC_OscConfig+0x76>
 8003a80:	4b80      	ldr	r3, [pc, #512]	@ (8003c84 <HAL_RCC_OscConfig+0x26c>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4a7f      	ldr	r2, [pc, #508]	@ (8003c84 <HAL_RCC_OscConfig+0x26c>)
 8003a86:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a8a:	6013      	str	r3, [r2, #0]
 8003a8c:	e02e      	b.n	8003aec <HAL_RCC_OscConfig+0xd4>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d10c      	bne.n	8003ab0 <HAL_RCC_OscConfig+0x98>
 8003a96:	4b7b      	ldr	r3, [pc, #492]	@ (8003c84 <HAL_RCC_OscConfig+0x26c>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a7a      	ldr	r2, [pc, #488]	@ (8003c84 <HAL_RCC_OscConfig+0x26c>)
 8003a9c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003aa0:	6013      	str	r3, [r2, #0]
 8003aa2:	4b78      	ldr	r3, [pc, #480]	@ (8003c84 <HAL_RCC_OscConfig+0x26c>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4a77      	ldr	r2, [pc, #476]	@ (8003c84 <HAL_RCC_OscConfig+0x26c>)
 8003aa8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003aac:	6013      	str	r3, [r2, #0]
 8003aae:	e01d      	b.n	8003aec <HAL_RCC_OscConfig+0xd4>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003ab8:	d10c      	bne.n	8003ad4 <HAL_RCC_OscConfig+0xbc>
 8003aba:	4b72      	ldr	r3, [pc, #456]	@ (8003c84 <HAL_RCC_OscConfig+0x26c>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4a71      	ldr	r2, [pc, #452]	@ (8003c84 <HAL_RCC_OscConfig+0x26c>)
 8003ac0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003ac4:	6013      	str	r3, [r2, #0]
 8003ac6:	4b6f      	ldr	r3, [pc, #444]	@ (8003c84 <HAL_RCC_OscConfig+0x26c>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4a6e      	ldr	r2, [pc, #440]	@ (8003c84 <HAL_RCC_OscConfig+0x26c>)
 8003acc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ad0:	6013      	str	r3, [r2, #0]
 8003ad2:	e00b      	b.n	8003aec <HAL_RCC_OscConfig+0xd4>
 8003ad4:	4b6b      	ldr	r3, [pc, #428]	@ (8003c84 <HAL_RCC_OscConfig+0x26c>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a6a      	ldr	r2, [pc, #424]	@ (8003c84 <HAL_RCC_OscConfig+0x26c>)
 8003ada:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ade:	6013      	str	r3, [r2, #0]
 8003ae0:	4b68      	ldr	r3, [pc, #416]	@ (8003c84 <HAL_RCC_OscConfig+0x26c>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a67      	ldr	r2, [pc, #412]	@ (8003c84 <HAL_RCC_OscConfig+0x26c>)
 8003ae6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003aea:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d013      	beq.n	8003b1c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003af4:	f7fe f91a 	bl	8001d2c <HAL_GetTick>
 8003af8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003afa:	e008      	b.n	8003b0e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003afc:	f7fe f916 	bl	8001d2c <HAL_GetTick>
 8003b00:	4602      	mov	r2, r0
 8003b02:	693b      	ldr	r3, [r7, #16]
 8003b04:	1ad3      	subs	r3, r2, r3
 8003b06:	2b64      	cmp	r3, #100	@ 0x64
 8003b08:	d901      	bls.n	8003b0e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003b0a:	2303      	movs	r3, #3
 8003b0c:	e200      	b.n	8003f10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b0e:	4b5d      	ldr	r3, [pc, #372]	@ (8003c84 <HAL_RCC_OscConfig+0x26c>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d0f0      	beq.n	8003afc <HAL_RCC_OscConfig+0xe4>
 8003b1a:	e014      	b.n	8003b46 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b1c:	f7fe f906 	bl	8001d2c <HAL_GetTick>
 8003b20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b22:	e008      	b.n	8003b36 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b24:	f7fe f902 	bl	8001d2c <HAL_GetTick>
 8003b28:	4602      	mov	r2, r0
 8003b2a:	693b      	ldr	r3, [r7, #16]
 8003b2c:	1ad3      	subs	r3, r2, r3
 8003b2e:	2b64      	cmp	r3, #100	@ 0x64
 8003b30:	d901      	bls.n	8003b36 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003b32:	2303      	movs	r3, #3
 8003b34:	e1ec      	b.n	8003f10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b36:	4b53      	ldr	r3, [pc, #332]	@ (8003c84 <HAL_RCC_OscConfig+0x26c>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d1f0      	bne.n	8003b24 <HAL_RCC_OscConfig+0x10c>
 8003b42:	e000      	b.n	8003b46 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f003 0302 	and.w	r3, r3, #2
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d063      	beq.n	8003c1a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003b52:	4b4c      	ldr	r3, [pc, #304]	@ (8003c84 <HAL_RCC_OscConfig+0x26c>)
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	f003 030c 	and.w	r3, r3, #12
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d00b      	beq.n	8003b76 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003b5e:	4b49      	ldr	r3, [pc, #292]	@ (8003c84 <HAL_RCC_OscConfig+0x26c>)
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	f003 030c 	and.w	r3, r3, #12
 8003b66:	2b08      	cmp	r3, #8
 8003b68:	d11c      	bne.n	8003ba4 <HAL_RCC_OscConfig+0x18c>
 8003b6a:	4b46      	ldr	r3, [pc, #280]	@ (8003c84 <HAL_RCC_OscConfig+0x26c>)
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d116      	bne.n	8003ba4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b76:	4b43      	ldr	r3, [pc, #268]	@ (8003c84 <HAL_RCC_OscConfig+0x26c>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f003 0302 	and.w	r3, r3, #2
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d005      	beq.n	8003b8e <HAL_RCC_OscConfig+0x176>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	691b      	ldr	r3, [r3, #16]
 8003b86:	2b01      	cmp	r3, #1
 8003b88:	d001      	beq.n	8003b8e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	e1c0      	b.n	8003f10 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b8e:	4b3d      	ldr	r3, [pc, #244]	@ (8003c84 <HAL_RCC_OscConfig+0x26c>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	695b      	ldr	r3, [r3, #20]
 8003b9a:	00db      	lsls	r3, r3, #3
 8003b9c:	4939      	ldr	r1, [pc, #228]	@ (8003c84 <HAL_RCC_OscConfig+0x26c>)
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ba2:	e03a      	b.n	8003c1a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	691b      	ldr	r3, [r3, #16]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d020      	beq.n	8003bee <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003bac:	4b36      	ldr	r3, [pc, #216]	@ (8003c88 <HAL_RCC_OscConfig+0x270>)
 8003bae:	2201      	movs	r2, #1
 8003bb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bb2:	f7fe f8bb 	bl	8001d2c <HAL_GetTick>
 8003bb6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bb8:	e008      	b.n	8003bcc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003bba:	f7fe f8b7 	bl	8001d2c <HAL_GetTick>
 8003bbe:	4602      	mov	r2, r0
 8003bc0:	693b      	ldr	r3, [r7, #16]
 8003bc2:	1ad3      	subs	r3, r2, r3
 8003bc4:	2b02      	cmp	r3, #2
 8003bc6:	d901      	bls.n	8003bcc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003bc8:	2303      	movs	r3, #3
 8003bca:	e1a1      	b.n	8003f10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bcc:	4b2d      	ldr	r3, [pc, #180]	@ (8003c84 <HAL_RCC_OscConfig+0x26c>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f003 0302 	and.w	r3, r3, #2
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d0f0      	beq.n	8003bba <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bd8:	4b2a      	ldr	r3, [pc, #168]	@ (8003c84 <HAL_RCC_OscConfig+0x26c>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	695b      	ldr	r3, [r3, #20]
 8003be4:	00db      	lsls	r3, r3, #3
 8003be6:	4927      	ldr	r1, [pc, #156]	@ (8003c84 <HAL_RCC_OscConfig+0x26c>)
 8003be8:	4313      	orrs	r3, r2
 8003bea:	600b      	str	r3, [r1, #0]
 8003bec:	e015      	b.n	8003c1a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003bee:	4b26      	ldr	r3, [pc, #152]	@ (8003c88 <HAL_RCC_OscConfig+0x270>)
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bf4:	f7fe f89a 	bl	8001d2c <HAL_GetTick>
 8003bf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003bfa:	e008      	b.n	8003c0e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003bfc:	f7fe f896 	bl	8001d2c <HAL_GetTick>
 8003c00:	4602      	mov	r2, r0
 8003c02:	693b      	ldr	r3, [r7, #16]
 8003c04:	1ad3      	subs	r3, r2, r3
 8003c06:	2b02      	cmp	r3, #2
 8003c08:	d901      	bls.n	8003c0e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003c0a:	2303      	movs	r3, #3
 8003c0c:	e180      	b.n	8003f10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c0e:	4b1d      	ldr	r3, [pc, #116]	@ (8003c84 <HAL_RCC_OscConfig+0x26c>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f003 0302 	and.w	r3, r3, #2
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d1f0      	bne.n	8003bfc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f003 0308 	and.w	r3, r3, #8
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d03a      	beq.n	8003c9c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	699b      	ldr	r3, [r3, #24]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d019      	beq.n	8003c62 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c2e:	4b17      	ldr	r3, [pc, #92]	@ (8003c8c <HAL_RCC_OscConfig+0x274>)
 8003c30:	2201      	movs	r2, #1
 8003c32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c34:	f7fe f87a 	bl	8001d2c <HAL_GetTick>
 8003c38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c3a:	e008      	b.n	8003c4e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c3c:	f7fe f876 	bl	8001d2c <HAL_GetTick>
 8003c40:	4602      	mov	r2, r0
 8003c42:	693b      	ldr	r3, [r7, #16]
 8003c44:	1ad3      	subs	r3, r2, r3
 8003c46:	2b02      	cmp	r3, #2
 8003c48:	d901      	bls.n	8003c4e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003c4a:	2303      	movs	r3, #3
 8003c4c:	e160      	b.n	8003f10 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c4e:	4b0d      	ldr	r3, [pc, #52]	@ (8003c84 <HAL_RCC_OscConfig+0x26c>)
 8003c50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c52:	f003 0302 	and.w	r3, r3, #2
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d0f0      	beq.n	8003c3c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003c5a:	2001      	movs	r0, #1
 8003c5c:	f000 face 	bl	80041fc <RCC_Delay>
 8003c60:	e01c      	b.n	8003c9c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c62:	4b0a      	ldr	r3, [pc, #40]	@ (8003c8c <HAL_RCC_OscConfig+0x274>)
 8003c64:	2200      	movs	r2, #0
 8003c66:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c68:	f7fe f860 	bl	8001d2c <HAL_GetTick>
 8003c6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c6e:	e00f      	b.n	8003c90 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c70:	f7fe f85c 	bl	8001d2c <HAL_GetTick>
 8003c74:	4602      	mov	r2, r0
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	1ad3      	subs	r3, r2, r3
 8003c7a:	2b02      	cmp	r3, #2
 8003c7c:	d908      	bls.n	8003c90 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003c7e:	2303      	movs	r3, #3
 8003c80:	e146      	b.n	8003f10 <HAL_RCC_OscConfig+0x4f8>
 8003c82:	bf00      	nop
 8003c84:	40021000 	.word	0x40021000
 8003c88:	42420000 	.word	0x42420000
 8003c8c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c90:	4b92      	ldr	r3, [pc, #584]	@ (8003edc <HAL_RCC_OscConfig+0x4c4>)
 8003c92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c94:	f003 0302 	and.w	r3, r3, #2
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d1e9      	bne.n	8003c70 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f003 0304 	and.w	r3, r3, #4
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	f000 80a6 	beq.w	8003df6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003caa:	2300      	movs	r3, #0
 8003cac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003cae:	4b8b      	ldr	r3, [pc, #556]	@ (8003edc <HAL_RCC_OscConfig+0x4c4>)
 8003cb0:	69db      	ldr	r3, [r3, #28]
 8003cb2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d10d      	bne.n	8003cd6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003cba:	4b88      	ldr	r3, [pc, #544]	@ (8003edc <HAL_RCC_OscConfig+0x4c4>)
 8003cbc:	69db      	ldr	r3, [r3, #28]
 8003cbe:	4a87      	ldr	r2, [pc, #540]	@ (8003edc <HAL_RCC_OscConfig+0x4c4>)
 8003cc0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003cc4:	61d3      	str	r3, [r2, #28]
 8003cc6:	4b85      	ldr	r3, [pc, #532]	@ (8003edc <HAL_RCC_OscConfig+0x4c4>)
 8003cc8:	69db      	ldr	r3, [r3, #28]
 8003cca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003cce:	60bb      	str	r3, [r7, #8]
 8003cd0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cd6:	4b82      	ldr	r3, [pc, #520]	@ (8003ee0 <HAL_RCC_OscConfig+0x4c8>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d118      	bne.n	8003d14 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ce2:	4b7f      	ldr	r3, [pc, #508]	@ (8003ee0 <HAL_RCC_OscConfig+0x4c8>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4a7e      	ldr	r2, [pc, #504]	@ (8003ee0 <HAL_RCC_OscConfig+0x4c8>)
 8003ce8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003cec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003cee:	f7fe f81d 	bl	8001d2c <HAL_GetTick>
 8003cf2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cf4:	e008      	b.n	8003d08 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cf6:	f7fe f819 	bl	8001d2c <HAL_GetTick>
 8003cfa:	4602      	mov	r2, r0
 8003cfc:	693b      	ldr	r3, [r7, #16]
 8003cfe:	1ad3      	subs	r3, r2, r3
 8003d00:	2b64      	cmp	r3, #100	@ 0x64
 8003d02:	d901      	bls.n	8003d08 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003d04:	2303      	movs	r3, #3
 8003d06:	e103      	b.n	8003f10 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d08:	4b75      	ldr	r3, [pc, #468]	@ (8003ee0 <HAL_RCC_OscConfig+0x4c8>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d0f0      	beq.n	8003cf6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	68db      	ldr	r3, [r3, #12]
 8003d18:	2b01      	cmp	r3, #1
 8003d1a:	d106      	bne.n	8003d2a <HAL_RCC_OscConfig+0x312>
 8003d1c:	4b6f      	ldr	r3, [pc, #444]	@ (8003edc <HAL_RCC_OscConfig+0x4c4>)
 8003d1e:	6a1b      	ldr	r3, [r3, #32]
 8003d20:	4a6e      	ldr	r2, [pc, #440]	@ (8003edc <HAL_RCC_OscConfig+0x4c4>)
 8003d22:	f043 0301 	orr.w	r3, r3, #1
 8003d26:	6213      	str	r3, [r2, #32]
 8003d28:	e02d      	b.n	8003d86 <HAL_RCC_OscConfig+0x36e>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	68db      	ldr	r3, [r3, #12]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d10c      	bne.n	8003d4c <HAL_RCC_OscConfig+0x334>
 8003d32:	4b6a      	ldr	r3, [pc, #424]	@ (8003edc <HAL_RCC_OscConfig+0x4c4>)
 8003d34:	6a1b      	ldr	r3, [r3, #32]
 8003d36:	4a69      	ldr	r2, [pc, #420]	@ (8003edc <HAL_RCC_OscConfig+0x4c4>)
 8003d38:	f023 0301 	bic.w	r3, r3, #1
 8003d3c:	6213      	str	r3, [r2, #32]
 8003d3e:	4b67      	ldr	r3, [pc, #412]	@ (8003edc <HAL_RCC_OscConfig+0x4c4>)
 8003d40:	6a1b      	ldr	r3, [r3, #32]
 8003d42:	4a66      	ldr	r2, [pc, #408]	@ (8003edc <HAL_RCC_OscConfig+0x4c4>)
 8003d44:	f023 0304 	bic.w	r3, r3, #4
 8003d48:	6213      	str	r3, [r2, #32]
 8003d4a:	e01c      	b.n	8003d86 <HAL_RCC_OscConfig+0x36e>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	68db      	ldr	r3, [r3, #12]
 8003d50:	2b05      	cmp	r3, #5
 8003d52:	d10c      	bne.n	8003d6e <HAL_RCC_OscConfig+0x356>
 8003d54:	4b61      	ldr	r3, [pc, #388]	@ (8003edc <HAL_RCC_OscConfig+0x4c4>)
 8003d56:	6a1b      	ldr	r3, [r3, #32]
 8003d58:	4a60      	ldr	r2, [pc, #384]	@ (8003edc <HAL_RCC_OscConfig+0x4c4>)
 8003d5a:	f043 0304 	orr.w	r3, r3, #4
 8003d5e:	6213      	str	r3, [r2, #32]
 8003d60:	4b5e      	ldr	r3, [pc, #376]	@ (8003edc <HAL_RCC_OscConfig+0x4c4>)
 8003d62:	6a1b      	ldr	r3, [r3, #32]
 8003d64:	4a5d      	ldr	r2, [pc, #372]	@ (8003edc <HAL_RCC_OscConfig+0x4c4>)
 8003d66:	f043 0301 	orr.w	r3, r3, #1
 8003d6a:	6213      	str	r3, [r2, #32]
 8003d6c:	e00b      	b.n	8003d86 <HAL_RCC_OscConfig+0x36e>
 8003d6e:	4b5b      	ldr	r3, [pc, #364]	@ (8003edc <HAL_RCC_OscConfig+0x4c4>)
 8003d70:	6a1b      	ldr	r3, [r3, #32]
 8003d72:	4a5a      	ldr	r2, [pc, #360]	@ (8003edc <HAL_RCC_OscConfig+0x4c4>)
 8003d74:	f023 0301 	bic.w	r3, r3, #1
 8003d78:	6213      	str	r3, [r2, #32]
 8003d7a:	4b58      	ldr	r3, [pc, #352]	@ (8003edc <HAL_RCC_OscConfig+0x4c4>)
 8003d7c:	6a1b      	ldr	r3, [r3, #32]
 8003d7e:	4a57      	ldr	r2, [pc, #348]	@ (8003edc <HAL_RCC_OscConfig+0x4c4>)
 8003d80:	f023 0304 	bic.w	r3, r3, #4
 8003d84:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	68db      	ldr	r3, [r3, #12]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d015      	beq.n	8003dba <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d8e:	f7fd ffcd 	bl	8001d2c <HAL_GetTick>
 8003d92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d94:	e00a      	b.n	8003dac <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d96:	f7fd ffc9 	bl	8001d2c <HAL_GetTick>
 8003d9a:	4602      	mov	r2, r0
 8003d9c:	693b      	ldr	r3, [r7, #16]
 8003d9e:	1ad3      	subs	r3, r2, r3
 8003da0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d901      	bls.n	8003dac <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003da8:	2303      	movs	r3, #3
 8003daa:	e0b1      	b.n	8003f10 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dac:	4b4b      	ldr	r3, [pc, #300]	@ (8003edc <HAL_RCC_OscConfig+0x4c4>)
 8003dae:	6a1b      	ldr	r3, [r3, #32]
 8003db0:	f003 0302 	and.w	r3, r3, #2
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d0ee      	beq.n	8003d96 <HAL_RCC_OscConfig+0x37e>
 8003db8:	e014      	b.n	8003de4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003dba:	f7fd ffb7 	bl	8001d2c <HAL_GetTick>
 8003dbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003dc0:	e00a      	b.n	8003dd8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dc2:	f7fd ffb3 	bl	8001d2c <HAL_GetTick>
 8003dc6:	4602      	mov	r2, r0
 8003dc8:	693b      	ldr	r3, [r7, #16]
 8003dca:	1ad3      	subs	r3, r2, r3
 8003dcc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d901      	bls.n	8003dd8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003dd4:	2303      	movs	r3, #3
 8003dd6:	e09b      	b.n	8003f10 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003dd8:	4b40      	ldr	r3, [pc, #256]	@ (8003edc <HAL_RCC_OscConfig+0x4c4>)
 8003dda:	6a1b      	ldr	r3, [r3, #32]
 8003ddc:	f003 0302 	and.w	r3, r3, #2
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d1ee      	bne.n	8003dc2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003de4:	7dfb      	ldrb	r3, [r7, #23]
 8003de6:	2b01      	cmp	r3, #1
 8003de8:	d105      	bne.n	8003df6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003dea:	4b3c      	ldr	r3, [pc, #240]	@ (8003edc <HAL_RCC_OscConfig+0x4c4>)
 8003dec:	69db      	ldr	r3, [r3, #28]
 8003dee:	4a3b      	ldr	r2, [pc, #236]	@ (8003edc <HAL_RCC_OscConfig+0x4c4>)
 8003df0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003df4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	69db      	ldr	r3, [r3, #28]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	f000 8087 	beq.w	8003f0e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003e00:	4b36      	ldr	r3, [pc, #216]	@ (8003edc <HAL_RCC_OscConfig+0x4c4>)
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	f003 030c 	and.w	r3, r3, #12
 8003e08:	2b08      	cmp	r3, #8
 8003e0a:	d061      	beq.n	8003ed0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	69db      	ldr	r3, [r3, #28]
 8003e10:	2b02      	cmp	r3, #2
 8003e12:	d146      	bne.n	8003ea2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e14:	4b33      	ldr	r3, [pc, #204]	@ (8003ee4 <HAL_RCC_OscConfig+0x4cc>)
 8003e16:	2200      	movs	r2, #0
 8003e18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e1a:	f7fd ff87 	bl	8001d2c <HAL_GetTick>
 8003e1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e20:	e008      	b.n	8003e34 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e22:	f7fd ff83 	bl	8001d2c <HAL_GetTick>
 8003e26:	4602      	mov	r2, r0
 8003e28:	693b      	ldr	r3, [r7, #16]
 8003e2a:	1ad3      	subs	r3, r2, r3
 8003e2c:	2b02      	cmp	r3, #2
 8003e2e:	d901      	bls.n	8003e34 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003e30:	2303      	movs	r3, #3
 8003e32:	e06d      	b.n	8003f10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e34:	4b29      	ldr	r3, [pc, #164]	@ (8003edc <HAL_RCC_OscConfig+0x4c4>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d1f0      	bne.n	8003e22 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6a1b      	ldr	r3, [r3, #32]
 8003e44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e48:	d108      	bne.n	8003e5c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003e4a:	4b24      	ldr	r3, [pc, #144]	@ (8003edc <HAL_RCC_OscConfig+0x4c4>)
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	689b      	ldr	r3, [r3, #8]
 8003e56:	4921      	ldr	r1, [pc, #132]	@ (8003edc <HAL_RCC_OscConfig+0x4c4>)
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e5c:	4b1f      	ldr	r3, [pc, #124]	@ (8003edc <HAL_RCC_OscConfig+0x4c4>)
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6a19      	ldr	r1, [r3, #32]
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e6c:	430b      	orrs	r3, r1
 8003e6e:	491b      	ldr	r1, [pc, #108]	@ (8003edc <HAL_RCC_OscConfig+0x4c4>)
 8003e70:	4313      	orrs	r3, r2
 8003e72:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e74:	4b1b      	ldr	r3, [pc, #108]	@ (8003ee4 <HAL_RCC_OscConfig+0x4cc>)
 8003e76:	2201      	movs	r2, #1
 8003e78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e7a:	f7fd ff57 	bl	8001d2c <HAL_GetTick>
 8003e7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003e80:	e008      	b.n	8003e94 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e82:	f7fd ff53 	bl	8001d2c <HAL_GetTick>
 8003e86:	4602      	mov	r2, r0
 8003e88:	693b      	ldr	r3, [r7, #16]
 8003e8a:	1ad3      	subs	r3, r2, r3
 8003e8c:	2b02      	cmp	r3, #2
 8003e8e:	d901      	bls.n	8003e94 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003e90:	2303      	movs	r3, #3
 8003e92:	e03d      	b.n	8003f10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003e94:	4b11      	ldr	r3, [pc, #68]	@ (8003edc <HAL_RCC_OscConfig+0x4c4>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d0f0      	beq.n	8003e82 <HAL_RCC_OscConfig+0x46a>
 8003ea0:	e035      	b.n	8003f0e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ea2:	4b10      	ldr	r3, [pc, #64]	@ (8003ee4 <HAL_RCC_OscConfig+0x4cc>)
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ea8:	f7fd ff40 	bl	8001d2c <HAL_GetTick>
 8003eac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003eae:	e008      	b.n	8003ec2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003eb0:	f7fd ff3c 	bl	8001d2c <HAL_GetTick>
 8003eb4:	4602      	mov	r2, r0
 8003eb6:	693b      	ldr	r3, [r7, #16]
 8003eb8:	1ad3      	subs	r3, r2, r3
 8003eba:	2b02      	cmp	r3, #2
 8003ebc:	d901      	bls.n	8003ec2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003ebe:	2303      	movs	r3, #3
 8003ec0:	e026      	b.n	8003f10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ec2:	4b06      	ldr	r3, [pc, #24]	@ (8003edc <HAL_RCC_OscConfig+0x4c4>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d1f0      	bne.n	8003eb0 <HAL_RCC_OscConfig+0x498>
 8003ece:	e01e      	b.n	8003f0e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	69db      	ldr	r3, [r3, #28]
 8003ed4:	2b01      	cmp	r3, #1
 8003ed6:	d107      	bne.n	8003ee8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003ed8:	2301      	movs	r3, #1
 8003eda:	e019      	b.n	8003f10 <HAL_RCC_OscConfig+0x4f8>
 8003edc:	40021000 	.word	0x40021000
 8003ee0:	40007000 	.word	0x40007000
 8003ee4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003ee8:	4b0b      	ldr	r3, [pc, #44]	@ (8003f18 <HAL_RCC_OscConfig+0x500>)
 8003eea:	685b      	ldr	r3, [r3, #4]
 8003eec:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6a1b      	ldr	r3, [r3, #32]
 8003ef8:	429a      	cmp	r2, r3
 8003efa:	d106      	bne.n	8003f0a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f06:	429a      	cmp	r2, r3
 8003f08:	d001      	beq.n	8003f0e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	e000      	b.n	8003f10 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003f0e:	2300      	movs	r3, #0
}
 8003f10:	4618      	mov	r0, r3
 8003f12:	3718      	adds	r7, #24
 8003f14:	46bd      	mov	sp, r7
 8003f16:	bd80      	pop	{r7, pc}
 8003f18:	40021000 	.word	0x40021000

08003f1c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b084      	sub	sp, #16
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
 8003f24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d101      	bne.n	8003f30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	e0d0      	b.n	80040d2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003f30:	4b6a      	ldr	r3, [pc, #424]	@ (80040dc <HAL_RCC_ClockConfig+0x1c0>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f003 0307 	and.w	r3, r3, #7
 8003f38:	683a      	ldr	r2, [r7, #0]
 8003f3a:	429a      	cmp	r2, r3
 8003f3c:	d910      	bls.n	8003f60 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f3e:	4b67      	ldr	r3, [pc, #412]	@ (80040dc <HAL_RCC_ClockConfig+0x1c0>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f023 0207 	bic.w	r2, r3, #7
 8003f46:	4965      	ldr	r1, [pc, #404]	@ (80040dc <HAL_RCC_ClockConfig+0x1c0>)
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f4e:	4b63      	ldr	r3, [pc, #396]	@ (80040dc <HAL_RCC_ClockConfig+0x1c0>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f003 0307 	and.w	r3, r3, #7
 8003f56:	683a      	ldr	r2, [r7, #0]
 8003f58:	429a      	cmp	r2, r3
 8003f5a:	d001      	beq.n	8003f60 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	e0b8      	b.n	80040d2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f003 0302 	and.w	r3, r3, #2
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d020      	beq.n	8003fae <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f003 0304 	and.w	r3, r3, #4
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d005      	beq.n	8003f84 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003f78:	4b59      	ldr	r3, [pc, #356]	@ (80040e0 <HAL_RCC_ClockConfig+0x1c4>)
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	4a58      	ldr	r2, [pc, #352]	@ (80040e0 <HAL_RCC_ClockConfig+0x1c4>)
 8003f7e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003f82:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f003 0308 	and.w	r3, r3, #8
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d005      	beq.n	8003f9c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003f90:	4b53      	ldr	r3, [pc, #332]	@ (80040e0 <HAL_RCC_ClockConfig+0x1c4>)
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	4a52      	ldr	r2, [pc, #328]	@ (80040e0 <HAL_RCC_ClockConfig+0x1c4>)
 8003f96:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003f9a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f9c:	4b50      	ldr	r3, [pc, #320]	@ (80040e0 <HAL_RCC_ClockConfig+0x1c4>)
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	689b      	ldr	r3, [r3, #8]
 8003fa8:	494d      	ldr	r1, [pc, #308]	@ (80040e0 <HAL_RCC_ClockConfig+0x1c4>)
 8003faa:	4313      	orrs	r3, r2
 8003fac:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f003 0301 	and.w	r3, r3, #1
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d040      	beq.n	800403c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	2b01      	cmp	r3, #1
 8003fc0:	d107      	bne.n	8003fd2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fc2:	4b47      	ldr	r3, [pc, #284]	@ (80040e0 <HAL_RCC_ClockConfig+0x1c4>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d115      	bne.n	8003ffa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003fce:	2301      	movs	r3, #1
 8003fd0:	e07f      	b.n	80040d2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	2b02      	cmp	r3, #2
 8003fd8:	d107      	bne.n	8003fea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fda:	4b41      	ldr	r3, [pc, #260]	@ (80040e0 <HAL_RCC_ClockConfig+0x1c4>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d109      	bne.n	8003ffa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	e073      	b.n	80040d2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fea:	4b3d      	ldr	r3, [pc, #244]	@ (80040e0 <HAL_RCC_ClockConfig+0x1c4>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f003 0302 	and.w	r3, r3, #2
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d101      	bne.n	8003ffa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	e06b      	b.n	80040d2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ffa:	4b39      	ldr	r3, [pc, #228]	@ (80040e0 <HAL_RCC_ClockConfig+0x1c4>)
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	f023 0203 	bic.w	r2, r3, #3
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	4936      	ldr	r1, [pc, #216]	@ (80040e0 <HAL_RCC_ClockConfig+0x1c4>)
 8004008:	4313      	orrs	r3, r2
 800400a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800400c:	f7fd fe8e 	bl	8001d2c <HAL_GetTick>
 8004010:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004012:	e00a      	b.n	800402a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004014:	f7fd fe8a 	bl	8001d2c <HAL_GetTick>
 8004018:	4602      	mov	r2, r0
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	1ad3      	subs	r3, r2, r3
 800401e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004022:	4293      	cmp	r3, r2
 8004024:	d901      	bls.n	800402a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004026:	2303      	movs	r3, #3
 8004028:	e053      	b.n	80040d2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800402a:	4b2d      	ldr	r3, [pc, #180]	@ (80040e0 <HAL_RCC_ClockConfig+0x1c4>)
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	f003 020c 	and.w	r2, r3, #12
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	009b      	lsls	r3, r3, #2
 8004038:	429a      	cmp	r2, r3
 800403a:	d1eb      	bne.n	8004014 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800403c:	4b27      	ldr	r3, [pc, #156]	@ (80040dc <HAL_RCC_ClockConfig+0x1c0>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f003 0307 	and.w	r3, r3, #7
 8004044:	683a      	ldr	r2, [r7, #0]
 8004046:	429a      	cmp	r2, r3
 8004048:	d210      	bcs.n	800406c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800404a:	4b24      	ldr	r3, [pc, #144]	@ (80040dc <HAL_RCC_ClockConfig+0x1c0>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f023 0207 	bic.w	r2, r3, #7
 8004052:	4922      	ldr	r1, [pc, #136]	@ (80040dc <HAL_RCC_ClockConfig+0x1c0>)
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	4313      	orrs	r3, r2
 8004058:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800405a:	4b20      	ldr	r3, [pc, #128]	@ (80040dc <HAL_RCC_ClockConfig+0x1c0>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f003 0307 	and.w	r3, r3, #7
 8004062:	683a      	ldr	r2, [r7, #0]
 8004064:	429a      	cmp	r2, r3
 8004066:	d001      	beq.n	800406c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004068:	2301      	movs	r3, #1
 800406a:	e032      	b.n	80040d2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f003 0304 	and.w	r3, r3, #4
 8004074:	2b00      	cmp	r3, #0
 8004076:	d008      	beq.n	800408a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004078:	4b19      	ldr	r3, [pc, #100]	@ (80040e0 <HAL_RCC_ClockConfig+0x1c4>)
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	68db      	ldr	r3, [r3, #12]
 8004084:	4916      	ldr	r1, [pc, #88]	@ (80040e0 <HAL_RCC_ClockConfig+0x1c4>)
 8004086:	4313      	orrs	r3, r2
 8004088:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f003 0308 	and.w	r3, r3, #8
 8004092:	2b00      	cmp	r3, #0
 8004094:	d009      	beq.n	80040aa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004096:	4b12      	ldr	r3, [pc, #72]	@ (80040e0 <HAL_RCC_ClockConfig+0x1c4>)
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	691b      	ldr	r3, [r3, #16]
 80040a2:	00db      	lsls	r3, r3, #3
 80040a4:	490e      	ldr	r1, [pc, #56]	@ (80040e0 <HAL_RCC_ClockConfig+0x1c4>)
 80040a6:	4313      	orrs	r3, r2
 80040a8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80040aa:	f000 f821 	bl	80040f0 <HAL_RCC_GetSysClockFreq>
 80040ae:	4602      	mov	r2, r0
 80040b0:	4b0b      	ldr	r3, [pc, #44]	@ (80040e0 <HAL_RCC_ClockConfig+0x1c4>)
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	091b      	lsrs	r3, r3, #4
 80040b6:	f003 030f 	and.w	r3, r3, #15
 80040ba:	490a      	ldr	r1, [pc, #40]	@ (80040e4 <HAL_RCC_ClockConfig+0x1c8>)
 80040bc:	5ccb      	ldrb	r3, [r1, r3]
 80040be:	fa22 f303 	lsr.w	r3, r2, r3
 80040c2:	4a09      	ldr	r2, [pc, #36]	@ (80040e8 <HAL_RCC_ClockConfig+0x1cc>)
 80040c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80040c6:	4b09      	ldr	r3, [pc, #36]	@ (80040ec <HAL_RCC_ClockConfig+0x1d0>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4618      	mov	r0, r3
 80040cc:	f7fd fdec 	bl	8001ca8 <HAL_InitTick>

  return HAL_OK;
 80040d0:	2300      	movs	r3, #0
}
 80040d2:	4618      	mov	r0, r3
 80040d4:	3710      	adds	r7, #16
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bd80      	pop	{r7, pc}
 80040da:	bf00      	nop
 80040dc:	40022000 	.word	0x40022000
 80040e0:	40021000 	.word	0x40021000
 80040e4:	0800ad90 	.word	0x0800ad90
 80040e8:	20000000 	.word	0x20000000
 80040ec:	20000004 	.word	0x20000004

080040f0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80040f0:	b480      	push	{r7}
 80040f2:	b087      	sub	sp, #28
 80040f4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80040f6:	2300      	movs	r3, #0
 80040f8:	60fb      	str	r3, [r7, #12]
 80040fa:	2300      	movs	r3, #0
 80040fc:	60bb      	str	r3, [r7, #8]
 80040fe:	2300      	movs	r3, #0
 8004100:	617b      	str	r3, [r7, #20]
 8004102:	2300      	movs	r3, #0
 8004104:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004106:	2300      	movs	r3, #0
 8004108:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800410a:	4b1e      	ldr	r3, [pc, #120]	@ (8004184 <HAL_RCC_GetSysClockFreq+0x94>)
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	f003 030c 	and.w	r3, r3, #12
 8004116:	2b04      	cmp	r3, #4
 8004118:	d002      	beq.n	8004120 <HAL_RCC_GetSysClockFreq+0x30>
 800411a:	2b08      	cmp	r3, #8
 800411c:	d003      	beq.n	8004126 <HAL_RCC_GetSysClockFreq+0x36>
 800411e:	e027      	b.n	8004170 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004120:	4b19      	ldr	r3, [pc, #100]	@ (8004188 <HAL_RCC_GetSysClockFreq+0x98>)
 8004122:	613b      	str	r3, [r7, #16]
      break;
 8004124:	e027      	b.n	8004176 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	0c9b      	lsrs	r3, r3, #18
 800412a:	f003 030f 	and.w	r3, r3, #15
 800412e:	4a17      	ldr	r2, [pc, #92]	@ (800418c <HAL_RCC_GetSysClockFreq+0x9c>)
 8004130:	5cd3      	ldrb	r3, [r2, r3]
 8004132:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800413a:	2b00      	cmp	r3, #0
 800413c:	d010      	beq.n	8004160 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800413e:	4b11      	ldr	r3, [pc, #68]	@ (8004184 <HAL_RCC_GetSysClockFreq+0x94>)
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	0c5b      	lsrs	r3, r3, #17
 8004144:	f003 0301 	and.w	r3, r3, #1
 8004148:	4a11      	ldr	r2, [pc, #68]	@ (8004190 <HAL_RCC_GetSysClockFreq+0xa0>)
 800414a:	5cd3      	ldrb	r3, [r2, r3]
 800414c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	4a0d      	ldr	r2, [pc, #52]	@ (8004188 <HAL_RCC_GetSysClockFreq+0x98>)
 8004152:	fb03 f202 	mul.w	r2, r3, r2
 8004156:	68bb      	ldr	r3, [r7, #8]
 8004158:	fbb2 f3f3 	udiv	r3, r2, r3
 800415c:	617b      	str	r3, [r7, #20]
 800415e:	e004      	b.n	800416a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	4a0c      	ldr	r2, [pc, #48]	@ (8004194 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004164:	fb02 f303 	mul.w	r3, r2, r3
 8004168:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800416a:	697b      	ldr	r3, [r7, #20]
 800416c:	613b      	str	r3, [r7, #16]
      break;
 800416e:	e002      	b.n	8004176 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004170:	4b05      	ldr	r3, [pc, #20]	@ (8004188 <HAL_RCC_GetSysClockFreq+0x98>)
 8004172:	613b      	str	r3, [r7, #16]
      break;
 8004174:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004176:	693b      	ldr	r3, [r7, #16]
}
 8004178:	4618      	mov	r0, r3
 800417a:	371c      	adds	r7, #28
 800417c:	46bd      	mov	sp, r7
 800417e:	bc80      	pop	{r7}
 8004180:	4770      	bx	lr
 8004182:	bf00      	nop
 8004184:	40021000 	.word	0x40021000
 8004188:	007a1200 	.word	0x007a1200
 800418c:	0800ada8 	.word	0x0800ada8
 8004190:	0800adb8 	.word	0x0800adb8
 8004194:	003d0900 	.word	0x003d0900

08004198 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004198:	b480      	push	{r7}
 800419a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800419c:	4b02      	ldr	r3, [pc, #8]	@ (80041a8 <HAL_RCC_GetHCLKFreq+0x10>)
 800419e:	681b      	ldr	r3, [r3, #0]
}
 80041a0:	4618      	mov	r0, r3
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bc80      	pop	{r7}
 80041a6:	4770      	bx	lr
 80041a8:	20000000 	.word	0x20000000

080041ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80041b0:	f7ff fff2 	bl	8004198 <HAL_RCC_GetHCLKFreq>
 80041b4:	4602      	mov	r2, r0
 80041b6:	4b05      	ldr	r3, [pc, #20]	@ (80041cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	0a1b      	lsrs	r3, r3, #8
 80041bc:	f003 0307 	and.w	r3, r3, #7
 80041c0:	4903      	ldr	r1, [pc, #12]	@ (80041d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80041c2:	5ccb      	ldrb	r3, [r1, r3]
 80041c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80041c8:	4618      	mov	r0, r3
 80041ca:	bd80      	pop	{r7, pc}
 80041cc:	40021000 	.word	0x40021000
 80041d0:	0800ada0 	.word	0x0800ada0

080041d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80041d8:	f7ff ffde 	bl	8004198 <HAL_RCC_GetHCLKFreq>
 80041dc:	4602      	mov	r2, r0
 80041de:	4b05      	ldr	r3, [pc, #20]	@ (80041f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	0adb      	lsrs	r3, r3, #11
 80041e4:	f003 0307 	and.w	r3, r3, #7
 80041e8:	4903      	ldr	r1, [pc, #12]	@ (80041f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80041ea:	5ccb      	ldrb	r3, [r1, r3]
 80041ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80041f0:	4618      	mov	r0, r3
 80041f2:	bd80      	pop	{r7, pc}
 80041f4:	40021000 	.word	0x40021000
 80041f8:	0800ada0 	.word	0x0800ada0

080041fc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80041fc:	b480      	push	{r7}
 80041fe:	b085      	sub	sp, #20
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004204:	4b0a      	ldr	r3, [pc, #40]	@ (8004230 <RCC_Delay+0x34>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a0a      	ldr	r2, [pc, #40]	@ (8004234 <RCC_Delay+0x38>)
 800420a:	fba2 2303 	umull	r2, r3, r2, r3
 800420e:	0a5b      	lsrs	r3, r3, #9
 8004210:	687a      	ldr	r2, [r7, #4]
 8004212:	fb02 f303 	mul.w	r3, r2, r3
 8004216:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004218:	bf00      	nop
  }
  while (Delay --);
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	1e5a      	subs	r2, r3, #1
 800421e:	60fa      	str	r2, [r7, #12]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d1f9      	bne.n	8004218 <RCC_Delay+0x1c>
}
 8004224:	bf00      	nop
 8004226:	bf00      	nop
 8004228:	3714      	adds	r7, #20
 800422a:	46bd      	mov	sp, r7
 800422c:	bc80      	pop	{r7}
 800422e:	4770      	bx	lr
 8004230:	20000000 	.word	0x20000000
 8004234:	10624dd3 	.word	0x10624dd3

08004238 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b086      	sub	sp, #24
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004240:	2300      	movs	r3, #0
 8004242:	613b      	str	r3, [r7, #16]
 8004244:	2300      	movs	r3, #0
 8004246:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f003 0301 	and.w	r3, r3, #1
 8004250:	2b00      	cmp	r3, #0
 8004252:	d07d      	beq.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004254:	2300      	movs	r3, #0
 8004256:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004258:	4b4f      	ldr	r3, [pc, #316]	@ (8004398 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800425a:	69db      	ldr	r3, [r3, #28]
 800425c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004260:	2b00      	cmp	r3, #0
 8004262:	d10d      	bne.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004264:	4b4c      	ldr	r3, [pc, #304]	@ (8004398 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004266:	69db      	ldr	r3, [r3, #28]
 8004268:	4a4b      	ldr	r2, [pc, #300]	@ (8004398 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800426a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800426e:	61d3      	str	r3, [r2, #28]
 8004270:	4b49      	ldr	r3, [pc, #292]	@ (8004398 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004272:	69db      	ldr	r3, [r3, #28]
 8004274:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004278:	60bb      	str	r3, [r7, #8]
 800427a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800427c:	2301      	movs	r3, #1
 800427e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004280:	4b46      	ldr	r3, [pc, #280]	@ (800439c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004288:	2b00      	cmp	r3, #0
 800428a:	d118      	bne.n	80042be <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800428c:	4b43      	ldr	r3, [pc, #268]	@ (800439c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4a42      	ldr	r2, [pc, #264]	@ (800439c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004292:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004296:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004298:	f7fd fd48 	bl	8001d2c <HAL_GetTick>
 800429c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800429e:	e008      	b.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042a0:	f7fd fd44 	bl	8001d2c <HAL_GetTick>
 80042a4:	4602      	mov	r2, r0
 80042a6:	693b      	ldr	r3, [r7, #16]
 80042a8:	1ad3      	subs	r3, r2, r3
 80042aa:	2b64      	cmp	r3, #100	@ 0x64
 80042ac:	d901      	bls.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80042ae:	2303      	movs	r3, #3
 80042b0:	e06d      	b.n	800438e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042b2:	4b3a      	ldr	r3, [pc, #232]	@ (800439c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d0f0      	beq.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80042be:	4b36      	ldr	r3, [pc, #216]	@ (8004398 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042c0:	6a1b      	ldr	r3, [r3, #32]
 80042c2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80042c6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d02e      	beq.n	800432c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	685b      	ldr	r3, [r3, #4]
 80042d2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80042d6:	68fa      	ldr	r2, [r7, #12]
 80042d8:	429a      	cmp	r2, r3
 80042da:	d027      	beq.n	800432c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80042dc:	4b2e      	ldr	r3, [pc, #184]	@ (8004398 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042de:	6a1b      	ldr	r3, [r3, #32]
 80042e0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80042e4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80042e6:	4b2e      	ldr	r3, [pc, #184]	@ (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80042e8:	2201      	movs	r2, #1
 80042ea:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80042ec:	4b2c      	ldr	r3, [pc, #176]	@ (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80042ee:	2200      	movs	r2, #0
 80042f0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80042f2:	4a29      	ldr	r2, [pc, #164]	@ (8004398 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	f003 0301 	and.w	r3, r3, #1
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d014      	beq.n	800432c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004302:	f7fd fd13 	bl	8001d2c <HAL_GetTick>
 8004306:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004308:	e00a      	b.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800430a:	f7fd fd0f 	bl	8001d2c <HAL_GetTick>
 800430e:	4602      	mov	r2, r0
 8004310:	693b      	ldr	r3, [r7, #16]
 8004312:	1ad3      	subs	r3, r2, r3
 8004314:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004318:	4293      	cmp	r3, r2
 800431a:	d901      	bls.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800431c:	2303      	movs	r3, #3
 800431e:	e036      	b.n	800438e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004320:	4b1d      	ldr	r3, [pc, #116]	@ (8004398 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004322:	6a1b      	ldr	r3, [r3, #32]
 8004324:	f003 0302 	and.w	r3, r3, #2
 8004328:	2b00      	cmp	r3, #0
 800432a:	d0ee      	beq.n	800430a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800432c:	4b1a      	ldr	r3, [pc, #104]	@ (8004398 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800432e:	6a1b      	ldr	r3, [r3, #32]
 8004330:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	4917      	ldr	r1, [pc, #92]	@ (8004398 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800433a:	4313      	orrs	r3, r2
 800433c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800433e:	7dfb      	ldrb	r3, [r7, #23]
 8004340:	2b01      	cmp	r3, #1
 8004342:	d105      	bne.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004344:	4b14      	ldr	r3, [pc, #80]	@ (8004398 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004346:	69db      	ldr	r3, [r3, #28]
 8004348:	4a13      	ldr	r2, [pc, #76]	@ (8004398 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800434a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800434e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f003 0302 	and.w	r3, r3, #2
 8004358:	2b00      	cmp	r3, #0
 800435a:	d008      	beq.n	800436e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800435c:	4b0e      	ldr	r3, [pc, #56]	@ (8004398 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	689b      	ldr	r3, [r3, #8]
 8004368:	490b      	ldr	r1, [pc, #44]	@ (8004398 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800436a:	4313      	orrs	r3, r2
 800436c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f003 0310 	and.w	r3, r3, #16
 8004376:	2b00      	cmp	r3, #0
 8004378:	d008      	beq.n	800438c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800437a:	4b07      	ldr	r3, [pc, #28]	@ (8004398 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800437c:	685b      	ldr	r3, [r3, #4]
 800437e:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	68db      	ldr	r3, [r3, #12]
 8004386:	4904      	ldr	r1, [pc, #16]	@ (8004398 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004388:	4313      	orrs	r3, r2
 800438a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800438c:	2300      	movs	r3, #0
}
 800438e:	4618      	mov	r0, r3
 8004390:	3718      	adds	r7, #24
 8004392:	46bd      	mov	sp, r7
 8004394:	bd80      	pop	{r7, pc}
 8004396:	bf00      	nop
 8004398:	40021000 	.word	0x40021000
 800439c:	40007000 	.word	0x40007000
 80043a0:	42420440 	.word	0x42420440

080043a4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b088      	sub	sp, #32
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80043ac:	2300      	movs	r3, #0
 80043ae:	617b      	str	r3, [r7, #20]
 80043b0:	2300      	movs	r3, #0
 80043b2:	61fb      	str	r3, [r7, #28]
 80043b4:	2300      	movs	r3, #0
 80043b6:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80043b8:	2300      	movs	r3, #0
 80043ba:	60fb      	str	r3, [r7, #12]
 80043bc:	2300      	movs	r3, #0
 80043be:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2b10      	cmp	r3, #16
 80043c4:	d00a      	beq.n	80043dc <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2b10      	cmp	r3, #16
 80043ca:	f200 808a 	bhi.w	80044e2 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2b01      	cmp	r3, #1
 80043d2:	d045      	beq.n	8004460 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2b02      	cmp	r3, #2
 80043d8:	d075      	beq.n	80044c6 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80043da:	e082      	b.n	80044e2 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 80043dc:	4b46      	ldr	r3, [pc, #280]	@ (80044f8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80043de:	685b      	ldr	r3, [r3, #4]
 80043e0:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80043e2:	4b45      	ldr	r3, [pc, #276]	@ (80044f8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d07b      	beq.n	80044e6 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	0c9b      	lsrs	r3, r3, #18
 80043f2:	f003 030f 	and.w	r3, r3, #15
 80043f6:	4a41      	ldr	r2, [pc, #260]	@ (80044fc <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 80043f8:	5cd3      	ldrb	r3, [r2, r3]
 80043fa:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004402:	2b00      	cmp	r3, #0
 8004404:	d015      	beq.n	8004432 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004406:	4b3c      	ldr	r3, [pc, #240]	@ (80044f8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004408:	685b      	ldr	r3, [r3, #4]
 800440a:	0c5b      	lsrs	r3, r3, #17
 800440c:	f003 0301 	and.w	r3, r3, #1
 8004410:	4a3b      	ldr	r2, [pc, #236]	@ (8004500 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8004412:	5cd3      	ldrb	r3, [r2, r3]
 8004414:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800441c:	2b00      	cmp	r3, #0
 800441e:	d00d      	beq.n	800443c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8004420:	4a38      	ldr	r2, [pc, #224]	@ (8004504 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8004422:	697b      	ldr	r3, [r7, #20]
 8004424:	fbb2 f2f3 	udiv	r2, r2, r3
 8004428:	693b      	ldr	r3, [r7, #16]
 800442a:	fb02 f303 	mul.w	r3, r2, r3
 800442e:	61fb      	str	r3, [r7, #28]
 8004430:	e004      	b.n	800443c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004432:	693b      	ldr	r3, [r7, #16]
 8004434:	4a34      	ldr	r2, [pc, #208]	@ (8004508 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8004436:	fb02 f303 	mul.w	r3, r2, r3
 800443a:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800443c:	4b2e      	ldr	r3, [pc, #184]	@ (80044f8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004444:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004448:	d102      	bne.n	8004450 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 800444a:	69fb      	ldr	r3, [r7, #28]
 800444c:	61bb      	str	r3, [r7, #24]
      break;
 800444e:	e04a      	b.n	80044e6 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8004450:	69fb      	ldr	r3, [r7, #28]
 8004452:	005b      	lsls	r3, r3, #1
 8004454:	4a2d      	ldr	r2, [pc, #180]	@ (800450c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8004456:	fba2 2303 	umull	r2, r3, r2, r3
 800445a:	085b      	lsrs	r3, r3, #1
 800445c:	61bb      	str	r3, [r7, #24]
      break;
 800445e:	e042      	b.n	80044e6 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8004460:	4b25      	ldr	r3, [pc, #148]	@ (80044f8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004462:	6a1b      	ldr	r3, [r3, #32]
 8004464:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800446c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004470:	d108      	bne.n	8004484 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	f003 0302 	and.w	r3, r3, #2
 8004478:	2b00      	cmp	r3, #0
 800447a:	d003      	beq.n	8004484 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 800447c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004480:	61bb      	str	r3, [r7, #24]
 8004482:	e01f      	b.n	80044c4 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800448a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800448e:	d109      	bne.n	80044a4 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8004490:	4b19      	ldr	r3, [pc, #100]	@ (80044f8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004492:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004494:	f003 0302 	and.w	r3, r3, #2
 8004498:	2b00      	cmp	r3, #0
 800449a:	d003      	beq.n	80044a4 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 800449c:	f649 4340 	movw	r3, #40000	@ 0x9c40
 80044a0:	61bb      	str	r3, [r7, #24]
 80044a2:	e00f      	b.n	80044c4 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80044aa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80044ae:	d11c      	bne.n	80044ea <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80044b0:	4b11      	ldr	r3, [pc, #68]	@ (80044f8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d016      	beq.n	80044ea <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 80044bc:	f24f 4324 	movw	r3, #62500	@ 0xf424
 80044c0:	61bb      	str	r3, [r7, #24]
      break;
 80044c2:	e012      	b.n	80044ea <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80044c4:	e011      	b.n	80044ea <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80044c6:	f7ff fe85 	bl	80041d4 <HAL_RCC_GetPCLK2Freq>
 80044ca:	4602      	mov	r2, r0
 80044cc:	4b0a      	ldr	r3, [pc, #40]	@ (80044f8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80044ce:	685b      	ldr	r3, [r3, #4]
 80044d0:	0b9b      	lsrs	r3, r3, #14
 80044d2:	f003 0303 	and.w	r3, r3, #3
 80044d6:	3301      	adds	r3, #1
 80044d8:	005b      	lsls	r3, r3, #1
 80044da:	fbb2 f3f3 	udiv	r3, r2, r3
 80044de:	61bb      	str	r3, [r7, #24]
      break;
 80044e0:	e004      	b.n	80044ec <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80044e2:	bf00      	nop
 80044e4:	e002      	b.n	80044ec <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80044e6:	bf00      	nop
 80044e8:	e000      	b.n	80044ec <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80044ea:	bf00      	nop
    }
  }
  return (frequency);
 80044ec:	69bb      	ldr	r3, [r7, #24]
}
 80044ee:	4618      	mov	r0, r3
 80044f0:	3720      	adds	r7, #32
 80044f2:	46bd      	mov	sp, r7
 80044f4:	bd80      	pop	{r7, pc}
 80044f6:	bf00      	nop
 80044f8:	40021000 	.word	0x40021000
 80044fc:	0800adbc 	.word	0x0800adbc
 8004500:	0800adcc 	.word	0x0800adcc
 8004504:	007a1200 	.word	0x007a1200
 8004508:	003d0900 	.word	0x003d0900
 800450c:	aaaaaaab 	.word	0xaaaaaaab

08004510 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b084      	sub	sp, #16
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8004518:	2300      	movs	r3, #0
 800451a:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d101      	bne.n	8004526 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8004522:	2301      	movs	r3, #1
 8004524:	e07a      	b.n	800461c <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	7c5b      	ldrb	r3, [r3, #17]
 800452a:	b2db      	uxtb	r3, r3
 800452c:	2b00      	cmp	r3, #0
 800452e:	d105      	bne.n	800453c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2200      	movs	r2, #0
 8004534:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8004536:	6878      	ldr	r0, [r7, #4]
 8004538:	f7fd f852 	bl	80015e0 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2202      	movs	r2, #2
 8004540:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004542:	6878      	ldr	r0, [r7, #4]
 8004544:	f000 f9be 	bl	80048c4 <HAL_RTC_WaitForSynchro>
 8004548:	4603      	mov	r3, r0
 800454a:	2b00      	cmp	r3, #0
 800454c:	d004      	beq.n	8004558 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2204      	movs	r2, #4
 8004552:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8004554:	2301      	movs	r3, #1
 8004556:	e061      	b.n	800461c <HAL_RTC_Init+0x10c>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004558:	6878      	ldr	r0, [r7, #4]
 800455a:	f000 fa77 	bl	8004a4c <RTC_EnterInitMode>
 800455e:	4603      	mov	r3, r0
 8004560:	2b00      	cmp	r3, #0
 8004562:	d004      	beq.n	800456e <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2204      	movs	r2, #4
 8004568:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 800456a:	2301      	movs	r3, #1
 800456c:	e056      	b.n	800461c <HAL_RTC_Init+0x10c>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	685a      	ldr	r2, [r3, #4]
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f022 0207 	bic.w	r2, r2, #7
 800457c:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	689b      	ldr	r3, [r3, #8]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d005      	beq.n	8004592 <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8004586:	4b27      	ldr	r3, [pc, #156]	@ (8004624 <HAL_RTC_Init+0x114>)
 8004588:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800458a:	4a26      	ldr	r2, [pc, #152]	@ (8004624 <HAL_RTC_Init+0x114>)
 800458c:	f023 0301 	bic.w	r3, r3, #1
 8004590:	6313      	str	r3, [r2, #48]	@ 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8004592:	4b24      	ldr	r3, [pc, #144]	@ (8004624 <HAL_RTC_Init+0x114>)
 8004594:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004596:	f423 7260 	bic.w	r2, r3, #896	@ 0x380
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	689b      	ldr	r3, [r3, #8]
 800459e:	4921      	ldr	r1, [pc, #132]	@ (8004624 <HAL_RTC_Init+0x114>)
 80045a0:	4313      	orrs	r3, r2
 80045a2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	685b      	ldr	r3, [r3, #4]
 80045a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045ac:	d003      	beq.n	80045b6 <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	685b      	ldr	r3, [r3, #4]
 80045b2:	60fb      	str	r3, [r7, #12]
 80045b4:	e00e      	b.n	80045d4 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 80045b6:	2001      	movs	r0, #1
 80045b8:	f7ff fef4 	bl	80043a4 <HAL_RCCEx_GetPeriphCLKFreq>
 80045bc:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d104      	bne.n	80045ce <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2204      	movs	r2, #4
 80045c8:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 80045ca:	2301      	movs	r3, #1
 80045cc:	e026      	b.n	800461c <HAL_RTC_Init+0x10c>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	3b01      	subs	r3, #1
 80045d2:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	0c1a      	lsrs	r2, r3, #16
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f002 020f 	and.w	r2, r2, #15
 80045e0:	609a      	str	r2, [r3, #8]
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	68fa      	ldr	r2, [r7, #12]
 80045e8:	b292      	uxth	r2, r2
 80045ea:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80045ec:	6878      	ldr	r0, [r7, #4]
 80045ee:	f000 fa55 	bl	8004a9c <RTC_ExitInitMode>
 80045f2:	4603      	mov	r3, r0
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d004      	beq.n	8004602 <HAL_RTC_Init+0xf2>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2204      	movs	r2, #4
 80045fc:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 80045fe:	2301      	movs	r3, #1
 8004600:	e00c      	b.n	800461c <HAL_RTC_Init+0x10c>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2200      	movs	r2, #0
 8004606:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2201      	movs	r2, #1
 800460c:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2201      	movs	r2, #1
 8004612:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2201      	movs	r2, #1
 8004618:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 800461a:	2300      	movs	r3, #0
  }
}
 800461c:	4618      	mov	r0, r3
 800461e:	3710      	adds	r7, #16
 8004620:	46bd      	mov	sp, r7
 8004622:	bd80      	pop	{r7, pc}
 8004624:	40006c00 	.word	0x40006c00

08004628 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004628:	b590      	push	{r4, r7, lr}
 800462a:	b087      	sub	sp, #28
 800462c:	af00      	add	r7, sp, #0
 800462e:	60f8      	str	r0, [r7, #12]
 8004630:	60b9      	str	r1, [r7, #8]
 8004632:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 8004634:	2300      	movs	r3, #0
 8004636:	617b      	str	r3, [r7, #20]
 8004638:	2300      	movs	r3, #0
 800463a:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d002      	beq.n	8004648 <HAL_RTC_SetTime+0x20>
 8004642:	68bb      	ldr	r3, [r7, #8]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d101      	bne.n	800464c <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 8004648:	2301      	movs	r3, #1
 800464a:	e080      	b.n	800474e <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	7c1b      	ldrb	r3, [r3, #16]
 8004650:	2b01      	cmp	r3, #1
 8004652:	d101      	bne.n	8004658 <HAL_RTC_SetTime+0x30>
 8004654:	2302      	movs	r3, #2
 8004656:	e07a      	b.n	800474e <HAL_RTC_SetTime+0x126>
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	2201      	movs	r2, #1
 800465c:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	2202      	movs	r2, #2
 8004662:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d113      	bne.n	8004692 <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 800466a:	68bb      	ldr	r3, [r7, #8]
 800466c:	781b      	ldrb	r3, [r3, #0]
 800466e:	461a      	mov	r2, r3
 8004670:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 8004674:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	785b      	ldrb	r3, [r3, #1]
 800467c:	4619      	mov	r1, r3
 800467e:	460b      	mov	r3, r1
 8004680:	011b      	lsls	r3, r3, #4
 8004682:	1a5b      	subs	r3, r3, r1
 8004684:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8004686:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 8004688:	68ba      	ldr	r2, [r7, #8]
 800468a:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 800468c:	4413      	add	r3, r2
 800468e:	617b      	str	r3, [r7, #20]
 8004690:	e01e      	b.n	80046d0 <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8004692:	68bb      	ldr	r3, [r7, #8]
 8004694:	781b      	ldrb	r3, [r3, #0]
 8004696:	4618      	mov	r0, r3
 8004698:	f000 fa28 	bl	8004aec <RTC_Bcd2ToByte>
 800469c:	4603      	mov	r3, r0
 800469e:	461a      	mov	r2, r3
 80046a0:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 80046a4:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 80046a8:	68bb      	ldr	r3, [r7, #8]
 80046aa:	785b      	ldrb	r3, [r3, #1]
 80046ac:	4618      	mov	r0, r3
 80046ae:	f000 fa1d 	bl	8004aec <RTC_Bcd2ToByte>
 80046b2:	4603      	mov	r3, r0
 80046b4:	461a      	mov	r2, r3
 80046b6:	4613      	mov	r3, r2
 80046b8:	011b      	lsls	r3, r3, #4
 80046ba:	1a9b      	subs	r3, r3, r2
 80046bc:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80046be:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 80046c0:	68bb      	ldr	r3, [r7, #8]
 80046c2:	789b      	ldrb	r3, [r3, #2]
 80046c4:	4618      	mov	r0, r3
 80046c6:	f000 fa11 	bl	8004aec <RTC_Bcd2ToByte>
 80046ca:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80046cc:	4423      	add	r3, r4
 80046ce:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 80046d0:	6979      	ldr	r1, [r7, #20]
 80046d2:	68f8      	ldr	r0, [r7, #12]
 80046d4:	f000 f953 	bl	800497e <RTC_WriteTimeCounter>
 80046d8:	4603      	mov	r3, r0
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d007      	beq.n	80046ee <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	2204      	movs	r2, #4
 80046e2:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	2200      	movs	r2, #0
 80046e8:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 80046ea:	2301      	movs	r3, #1
 80046ec:	e02f      	b.n	800474e <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	685a      	ldr	r2, [r3, #4]
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f022 0205 	bic.w	r2, r2, #5
 80046fc:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80046fe:	68f8      	ldr	r0, [r7, #12]
 8004700:	f000 f964 	bl	80049cc <RTC_ReadAlarmCounter>
 8004704:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8004706:	693b      	ldr	r3, [r7, #16]
 8004708:	f1b3 3fff 	cmp.w	r3, #4294967295
 800470c:	d018      	beq.n	8004740 <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 800470e:	693a      	ldr	r2, [r7, #16]
 8004710:	697b      	ldr	r3, [r7, #20]
 8004712:	429a      	cmp	r2, r3
 8004714:	d214      	bcs.n	8004740 <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8004716:	693b      	ldr	r3, [r7, #16]
 8004718:	f503 33a8 	add.w	r3, r3, #86016	@ 0x15000
 800471c:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 8004720:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8004722:	6939      	ldr	r1, [r7, #16]
 8004724:	68f8      	ldr	r0, [r7, #12]
 8004726:	f000 f96a 	bl	80049fe <RTC_WriteAlarmCounter>
 800472a:	4603      	mov	r3, r0
 800472c:	2b00      	cmp	r3, #0
 800472e:	d007      	beq.n	8004740 <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	2204      	movs	r2, #4
 8004734:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	2200      	movs	r2, #0
 800473a:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 800473c:	2301      	movs	r3, #1
 800473e:	e006      	b.n	800474e <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	2201      	movs	r2, #1
 8004744:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	2200      	movs	r2, #0
 800474a:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 800474c:	2300      	movs	r3, #0
  }
}
 800474e:	4618      	mov	r0, r3
 8004750:	371c      	adds	r7, #28
 8004752:	46bd      	mov	sp, r7
 8004754:	bd90      	pop	{r4, r7, pc}
	...

08004758 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b088      	sub	sp, #32
 800475c:	af00      	add	r7, sp, #0
 800475e:	60f8      	str	r0, [r7, #12]
 8004760:	60b9      	str	r1, [r7, #8]
 8004762:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 8004764:	2300      	movs	r3, #0
 8004766:	61fb      	str	r3, [r7, #28]
 8004768:	2300      	movs	r3, #0
 800476a:	61bb      	str	r3, [r7, #24]
 800476c:	2300      	movs	r3, #0
 800476e:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d002      	beq.n	800477c <HAL_RTC_SetDate+0x24>
 8004776:	68bb      	ldr	r3, [r7, #8]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d101      	bne.n	8004780 <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 800477c:	2301      	movs	r3, #1
 800477e:	e097      	b.n	80048b0 <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	7c1b      	ldrb	r3, [r3, #16]
 8004784:	2b01      	cmp	r3, #1
 8004786:	d101      	bne.n	800478c <HAL_RTC_SetDate+0x34>
 8004788:	2302      	movs	r3, #2
 800478a:	e091      	b.n	80048b0 <HAL_RTC_SetDate+0x158>
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	2201      	movs	r2, #1
 8004790:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	2202      	movs	r2, #2
 8004796:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d10c      	bne.n	80047b8 <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 800479e:	68bb      	ldr	r3, [r7, #8]
 80047a0:	78da      	ldrb	r2, [r3, #3]
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 80047a6:	68bb      	ldr	r3, [r7, #8]
 80047a8:	785a      	ldrb	r2, [r3, #1]
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 80047ae:	68bb      	ldr	r3, [r7, #8]
 80047b0:	789a      	ldrb	r2, [r3, #2]
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	739a      	strb	r2, [r3, #14]
 80047b6:	e01a      	b.n	80047ee <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 80047b8:	68bb      	ldr	r3, [r7, #8]
 80047ba:	78db      	ldrb	r3, [r3, #3]
 80047bc:	4618      	mov	r0, r3
 80047be:	f000 f995 	bl	8004aec <RTC_Bcd2ToByte>
 80047c2:	4603      	mov	r3, r0
 80047c4:	461a      	mov	r2, r3
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 80047ca:	68bb      	ldr	r3, [r7, #8]
 80047cc:	785b      	ldrb	r3, [r3, #1]
 80047ce:	4618      	mov	r0, r3
 80047d0:	f000 f98c 	bl	8004aec <RTC_Bcd2ToByte>
 80047d4:	4603      	mov	r3, r0
 80047d6:	461a      	mov	r2, r3
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 80047dc:	68bb      	ldr	r3, [r7, #8]
 80047de:	789b      	ldrb	r3, [r3, #2]
 80047e0:	4618      	mov	r0, r3
 80047e2:	f000 f983 	bl	8004aec <RTC_Bcd2ToByte>
 80047e6:	4603      	mov	r3, r0
 80047e8:	461a      	mov	r2, r3
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	7bdb      	ldrb	r3, [r3, #15]
 80047f2:	4618      	mov	r0, r3
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	7b59      	ldrb	r1, [r3, #13]
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	7b9b      	ldrb	r3, [r3, #14]
 80047fc:	461a      	mov	r2, r3
 80047fe:	f000 f993 	bl	8004b28 <RTC_WeekDayNum>
 8004802:	4603      	mov	r3, r0
 8004804:	461a      	mov	r2, r3
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	7b1a      	ldrb	r2, [r3, #12]
 800480e:	68bb      	ldr	r3, [r7, #8]
 8004810:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8004812:	68f8      	ldr	r0, [r7, #12]
 8004814:	f000 f883 	bl	800491e <RTC_ReadTimeCounter>
 8004818:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 800481a:	69fb      	ldr	r3, [r7, #28]
 800481c:	4a26      	ldr	r2, [pc, #152]	@ (80048b8 <HAL_RTC_SetDate+0x160>)
 800481e:	fba2 2303 	umull	r2, r3, r2, r3
 8004822:	0adb      	lsrs	r3, r3, #11
 8004824:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 8004826:	697b      	ldr	r3, [r7, #20]
 8004828:	2b18      	cmp	r3, #24
 800482a:	d93a      	bls.n	80048a2 <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 800482c:	697b      	ldr	r3, [r7, #20]
 800482e:	4a23      	ldr	r2, [pc, #140]	@ (80048bc <HAL_RTC_SetDate+0x164>)
 8004830:	fba2 2303 	umull	r2, r3, r2, r3
 8004834:	091b      	lsrs	r3, r3, #4
 8004836:	4a22      	ldr	r2, [pc, #136]	@ (80048c0 <HAL_RTC_SetDate+0x168>)
 8004838:	fb02 f303 	mul.w	r3, r2, r3
 800483c:	69fa      	ldr	r2, [r7, #28]
 800483e:	1ad3      	subs	r3, r2, r3
 8004840:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8004842:	69f9      	ldr	r1, [r7, #28]
 8004844:	68f8      	ldr	r0, [r7, #12]
 8004846:	f000 f89a 	bl	800497e <RTC_WriteTimeCounter>
 800484a:	4603      	mov	r3, r0
 800484c:	2b00      	cmp	r3, #0
 800484e:	d007      	beq.n	8004860 <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	2204      	movs	r2, #4
 8004854:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	2200      	movs	r2, #0
 800485a:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 800485c:	2301      	movs	r3, #1
 800485e:	e027      	b.n	80048b0 <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8004860:	68f8      	ldr	r0, [r7, #12]
 8004862:	f000 f8b3 	bl	80049cc <RTC_ReadAlarmCounter>
 8004866:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8004868:	69bb      	ldr	r3, [r7, #24]
 800486a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800486e:	d018      	beq.n	80048a2 <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 8004870:	69ba      	ldr	r2, [r7, #24]
 8004872:	69fb      	ldr	r3, [r7, #28]
 8004874:	429a      	cmp	r2, r3
 8004876:	d214      	bcs.n	80048a2 <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8004878:	69bb      	ldr	r3, [r7, #24]
 800487a:	f503 33a8 	add.w	r3, r3, #86016	@ 0x15000
 800487e:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 8004882:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8004884:	69b9      	ldr	r1, [r7, #24]
 8004886:	68f8      	ldr	r0, [r7, #12]
 8004888:	f000 f8b9 	bl	80049fe <RTC_WriteAlarmCounter>
 800488c:	4603      	mov	r3, r0
 800488e:	2b00      	cmp	r3, #0
 8004890:	d007      	beq.n	80048a2 <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	2204      	movs	r2, #4
 8004896:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	2200      	movs	r2, #0
 800489c:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 800489e:	2301      	movs	r3, #1
 80048a0:	e006      	b.n	80048b0 <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	2201      	movs	r2, #1
 80048a6:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	2200      	movs	r2, #0
 80048ac:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80048ae:	2300      	movs	r3, #0
}
 80048b0:	4618      	mov	r0, r3
 80048b2:	3720      	adds	r7, #32
 80048b4:	46bd      	mov	sp, r7
 80048b6:	bd80      	pop	{r7, pc}
 80048b8:	91a2b3c5 	.word	0x91a2b3c5
 80048bc:	aaaaaaab 	.word	0xaaaaaaab
 80048c0:	00015180 	.word	0x00015180

080048c4 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b084      	sub	sp, #16
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80048cc:	2300      	movs	r3, #0
 80048ce:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d101      	bne.n	80048da <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 80048d6:	2301      	movs	r3, #1
 80048d8:	e01d      	b.n	8004916 <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	685a      	ldr	r2, [r3, #4]
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f022 0208 	bic.w	r2, r2, #8
 80048e8:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 80048ea:	f7fd fa1f 	bl	8001d2c <HAL_GetTick>
 80048ee:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 80048f0:	e009      	b.n	8004906 <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80048f2:	f7fd fa1b 	bl	8001d2c <HAL_GetTick>
 80048f6:	4602      	mov	r2, r0
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	1ad3      	subs	r3, r2, r3
 80048fc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004900:	d901      	bls.n	8004906 <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8004902:	2303      	movs	r3, #3
 8004904:	e007      	b.n	8004916 <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	685b      	ldr	r3, [r3, #4]
 800490c:	f003 0308 	and.w	r3, r3, #8
 8004910:	2b00      	cmp	r3, #0
 8004912:	d0ee      	beq.n	80048f2 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8004914:	2300      	movs	r3, #0
}
 8004916:	4618      	mov	r0, r3
 8004918:	3710      	adds	r7, #16
 800491a:	46bd      	mov	sp, r7
 800491c:	bd80      	pop	{r7, pc}

0800491e <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 800491e:	b480      	push	{r7}
 8004920:	b087      	sub	sp, #28
 8004922:	af00      	add	r7, sp, #0
 8004924:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 8004926:	2300      	movs	r3, #0
 8004928:	827b      	strh	r3, [r7, #18]
 800492a:	2300      	movs	r3, #0
 800492c:	823b      	strh	r3, [r7, #16]
 800492e:	2300      	movs	r3, #0
 8004930:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 8004932:	2300      	movs	r3, #0
 8004934:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	699b      	ldr	r3, [r3, #24]
 800493c:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	69db      	ldr	r3, [r3, #28]
 8004944:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	699b      	ldr	r3, [r3, #24]
 800494c:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 800494e:	8a7a      	ldrh	r2, [r7, #18]
 8004950:	8a3b      	ldrh	r3, [r7, #16]
 8004952:	429a      	cmp	r2, r3
 8004954:	d008      	beq.n	8004968 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8004956:	8a3b      	ldrh	r3, [r7, #16]
 8004958:	041a      	lsls	r2, r3, #16
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	69db      	ldr	r3, [r3, #28]
 8004960:	b29b      	uxth	r3, r3
 8004962:	4313      	orrs	r3, r2
 8004964:	617b      	str	r3, [r7, #20]
 8004966:	e004      	b.n	8004972 <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8004968:	8a7b      	ldrh	r3, [r7, #18]
 800496a:	041a      	lsls	r2, r3, #16
 800496c:	89fb      	ldrh	r3, [r7, #14]
 800496e:	4313      	orrs	r3, r2
 8004970:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 8004972:	697b      	ldr	r3, [r7, #20]
}
 8004974:	4618      	mov	r0, r3
 8004976:	371c      	adds	r7, #28
 8004978:	46bd      	mov	sp, r7
 800497a:	bc80      	pop	{r7}
 800497c:	4770      	bx	lr

0800497e <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 800497e:	b580      	push	{r7, lr}
 8004980:	b084      	sub	sp, #16
 8004982:	af00      	add	r7, sp, #0
 8004984:	6078      	str	r0, [r7, #4]
 8004986:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004988:	2300      	movs	r3, #0
 800498a:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800498c:	6878      	ldr	r0, [r7, #4]
 800498e:	f000 f85d 	bl	8004a4c <RTC_EnterInitMode>
 8004992:	4603      	mov	r3, r0
 8004994:	2b00      	cmp	r3, #0
 8004996:	d002      	beq.n	800499e <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 8004998:	2301      	movs	r3, #1
 800499a:	73fb      	strb	r3, [r7, #15]
 800499c:	e011      	b.n	80049c2 <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	683a      	ldr	r2, [r7, #0]
 80049a4:	0c12      	lsrs	r2, r2, #16
 80049a6:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	683a      	ldr	r2, [r7, #0]
 80049ae:	b292      	uxth	r2, r2
 80049b0:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80049b2:	6878      	ldr	r0, [r7, #4]
 80049b4:	f000 f872 	bl	8004a9c <RTC_ExitInitMode>
 80049b8:	4603      	mov	r3, r0
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d001      	beq.n	80049c2 <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 80049be:	2301      	movs	r3, #1
 80049c0:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80049c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80049c4:	4618      	mov	r0, r3
 80049c6:	3710      	adds	r7, #16
 80049c8:	46bd      	mov	sp, r7
 80049ca:	bd80      	pop	{r7, pc}

080049cc <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 80049cc:	b480      	push	{r7}
 80049ce:	b085      	sub	sp, #20
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 80049d4:	2300      	movs	r3, #0
 80049d6:	81fb      	strh	r3, [r7, #14]
 80049d8:	2300      	movs	r3, #0
 80049da:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	6a1b      	ldr	r3, [r3, #32]
 80049e2:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049ea:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 80049ec:	89fb      	ldrh	r3, [r7, #14]
 80049ee:	041a      	lsls	r2, r3, #16
 80049f0:	89bb      	ldrh	r3, [r7, #12]
 80049f2:	4313      	orrs	r3, r2
}
 80049f4:	4618      	mov	r0, r3
 80049f6:	3714      	adds	r7, #20
 80049f8:	46bd      	mov	sp, r7
 80049fa:	bc80      	pop	{r7}
 80049fc:	4770      	bx	lr

080049fe <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 80049fe:	b580      	push	{r7, lr}
 8004a00:	b084      	sub	sp, #16
 8004a02:	af00      	add	r7, sp, #0
 8004a04:	6078      	str	r0, [r7, #4]
 8004a06:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004a08:	2300      	movs	r3, #0
 8004a0a:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004a0c:	6878      	ldr	r0, [r7, #4]
 8004a0e:	f000 f81d 	bl	8004a4c <RTC_EnterInitMode>
 8004a12:	4603      	mov	r3, r0
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d002      	beq.n	8004a1e <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 8004a18:	2301      	movs	r3, #1
 8004a1a:	73fb      	strb	r3, [r7, #15]
 8004a1c:	e011      	b.n	8004a42 <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	683a      	ldr	r2, [r7, #0]
 8004a24:	0c12      	lsrs	r2, r2, #16
 8004a26:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	683a      	ldr	r2, [r7, #0]
 8004a2e:	b292      	uxth	r2, r2
 8004a30:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8004a32:	6878      	ldr	r0, [r7, #4]
 8004a34:	f000 f832 	bl	8004a9c <RTC_ExitInitMode>
 8004a38:	4603      	mov	r3, r0
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d001      	beq.n	8004a42 <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 8004a3e:	2301      	movs	r3, #1
 8004a40:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8004a42:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a44:	4618      	mov	r0, r3
 8004a46:	3710      	adds	r7, #16
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	bd80      	pop	{r7, pc}

08004a4c <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b084      	sub	sp, #16
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004a54:	2300      	movs	r3, #0
 8004a56:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8004a58:	f7fd f968 	bl	8001d2c <HAL_GetTick>
 8004a5c:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8004a5e:	e009      	b.n	8004a74 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8004a60:	f7fd f964 	bl	8001d2c <HAL_GetTick>
 8004a64:	4602      	mov	r2, r0
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	1ad3      	subs	r3, r2, r3
 8004a6a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004a6e:	d901      	bls.n	8004a74 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8004a70:	2303      	movs	r3, #3
 8004a72:	e00f      	b.n	8004a94 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	685b      	ldr	r3, [r3, #4]
 8004a7a:	f003 0320 	and.w	r3, r3, #32
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d0ee      	beq.n	8004a60 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	685a      	ldr	r2, [r3, #4]
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f042 0210 	orr.w	r2, r2, #16
 8004a90:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8004a92:	2300      	movs	r3, #0
}
 8004a94:	4618      	mov	r0, r3
 8004a96:	3710      	adds	r7, #16
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	bd80      	pop	{r7, pc}

08004a9c <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b084      	sub	sp, #16
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	685a      	ldr	r2, [r3, #4]
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f022 0210 	bic.w	r2, r2, #16
 8004ab6:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8004ab8:	f7fd f938 	bl	8001d2c <HAL_GetTick>
 8004abc:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8004abe:	e009      	b.n	8004ad4 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8004ac0:	f7fd f934 	bl	8001d2c <HAL_GetTick>
 8004ac4:	4602      	mov	r2, r0
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	1ad3      	subs	r3, r2, r3
 8004aca:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004ace:	d901      	bls.n	8004ad4 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8004ad0:	2303      	movs	r3, #3
 8004ad2:	e007      	b.n	8004ae4 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	685b      	ldr	r3, [r3, #4]
 8004ada:	f003 0320 	and.w	r3, r3, #32
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d0ee      	beq.n	8004ac0 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8004ae2:	2300      	movs	r3, #0
}
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	3710      	adds	r7, #16
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	bd80      	pop	{r7, pc}

08004aec <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8004aec:	b480      	push	{r7}
 8004aee:	b085      	sub	sp, #20
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	4603      	mov	r3, r0
 8004af4:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8004af6:	2300      	movs	r3, #0
 8004af8:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8004afa:	79fb      	ldrb	r3, [r7, #7]
 8004afc:	091b      	lsrs	r3, r3, #4
 8004afe:	b2db      	uxtb	r3, r3
 8004b00:	461a      	mov	r2, r3
 8004b02:	4613      	mov	r3, r2
 8004b04:	009b      	lsls	r3, r3, #2
 8004b06:	4413      	add	r3, r2
 8004b08:	005b      	lsls	r3, r3, #1
 8004b0a:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8004b0c:	79fb      	ldrb	r3, [r7, #7]
 8004b0e:	f003 030f 	and.w	r3, r3, #15
 8004b12:	b2da      	uxtb	r2, r3
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	b2db      	uxtb	r3, r3
 8004b18:	4413      	add	r3, r2
 8004b1a:	b2db      	uxtb	r3, r3
}
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	3714      	adds	r7, #20
 8004b20:	46bd      	mov	sp, r7
 8004b22:	bc80      	pop	{r7}
 8004b24:	4770      	bx	lr
	...

08004b28 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 8004b28:	b480      	push	{r7}
 8004b2a:	b085      	sub	sp, #20
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
 8004b30:	460b      	mov	r3, r1
 8004b32:	70fb      	strb	r3, [r7, #3]
 8004b34:	4613      	mov	r3, r2
 8004b36:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 8004b38:	2300      	movs	r3, #0
 8004b3a:	60bb      	str	r3, [r7, #8]
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8004b46:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 8004b48:	78fb      	ldrb	r3, [r7, #3]
 8004b4a:	2b02      	cmp	r3, #2
 8004b4c:	d82d      	bhi.n	8004baa <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8004b4e:	78fa      	ldrb	r2, [r7, #3]
 8004b50:	4613      	mov	r3, r2
 8004b52:	005b      	lsls	r3, r3, #1
 8004b54:	4413      	add	r3, r2
 8004b56:	00db      	lsls	r3, r3, #3
 8004b58:	1a9b      	subs	r3, r3, r2
 8004b5a:	4a2c      	ldr	r2, [pc, #176]	@ (8004c0c <RTC_WeekDayNum+0xe4>)
 8004b5c:	fba2 2303 	umull	r2, r3, r2, r3
 8004b60:	085a      	lsrs	r2, r3, #1
 8004b62:	78bb      	ldrb	r3, [r7, #2]
 8004b64:	441a      	add	r2, r3
 8004b66:	68bb      	ldr	r3, [r7, #8]
 8004b68:	441a      	add	r2, r3
 8004b6a:	68bb      	ldr	r3, [r7, #8]
 8004b6c:	3b01      	subs	r3, #1
 8004b6e:	089b      	lsrs	r3, r3, #2
 8004b70:	441a      	add	r2, r3
 8004b72:	68bb      	ldr	r3, [r7, #8]
 8004b74:	3b01      	subs	r3, #1
 8004b76:	4926      	ldr	r1, [pc, #152]	@ (8004c10 <RTC_WeekDayNum+0xe8>)
 8004b78:	fba1 1303 	umull	r1, r3, r1, r3
 8004b7c:	095b      	lsrs	r3, r3, #5
 8004b7e:	1ad2      	subs	r2, r2, r3
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	3b01      	subs	r3, #1
 8004b84:	4922      	ldr	r1, [pc, #136]	@ (8004c10 <RTC_WeekDayNum+0xe8>)
 8004b86:	fba1 1303 	umull	r1, r3, r1, r3
 8004b8a:	09db      	lsrs	r3, r3, #7
 8004b8c:	4413      	add	r3, r2
 8004b8e:	1d1a      	adds	r2, r3, #4
 8004b90:	4b20      	ldr	r3, [pc, #128]	@ (8004c14 <RTC_WeekDayNum+0xec>)
 8004b92:	fba3 1302 	umull	r1, r3, r3, r2
 8004b96:	1ad1      	subs	r1, r2, r3
 8004b98:	0849      	lsrs	r1, r1, #1
 8004b9a:	440b      	add	r3, r1
 8004b9c:	0899      	lsrs	r1, r3, #2
 8004b9e:	460b      	mov	r3, r1
 8004ba0:	00db      	lsls	r3, r3, #3
 8004ba2:	1a5b      	subs	r3, r3, r1
 8004ba4:	1ad3      	subs	r3, r2, r3
 8004ba6:	60fb      	str	r3, [r7, #12]
 8004ba8:	e029      	b.n	8004bfe <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8004baa:	78fa      	ldrb	r2, [r7, #3]
 8004bac:	4613      	mov	r3, r2
 8004bae:	005b      	lsls	r3, r3, #1
 8004bb0:	4413      	add	r3, r2
 8004bb2:	00db      	lsls	r3, r3, #3
 8004bb4:	1a9b      	subs	r3, r3, r2
 8004bb6:	4a15      	ldr	r2, [pc, #84]	@ (8004c0c <RTC_WeekDayNum+0xe4>)
 8004bb8:	fba2 2303 	umull	r2, r3, r2, r3
 8004bbc:	085a      	lsrs	r2, r3, #1
 8004bbe:	78bb      	ldrb	r3, [r7, #2]
 8004bc0:	441a      	add	r2, r3
 8004bc2:	68bb      	ldr	r3, [r7, #8]
 8004bc4:	441a      	add	r2, r3
 8004bc6:	68bb      	ldr	r3, [r7, #8]
 8004bc8:	089b      	lsrs	r3, r3, #2
 8004bca:	441a      	add	r2, r3
 8004bcc:	68bb      	ldr	r3, [r7, #8]
 8004bce:	4910      	ldr	r1, [pc, #64]	@ (8004c10 <RTC_WeekDayNum+0xe8>)
 8004bd0:	fba1 1303 	umull	r1, r3, r1, r3
 8004bd4:	095b      	lsrs	r3, r3, #5
 8004bd6:	1ad2      	subs	r2, r2, r3
 8004bd8:	68bb      	ldr	r3, [r7, #8]
 8004bda:	490d      	ldr	r1, [pc, #52]	@ (8004c10 <RTC_WeekDayNum+0xe8>)
 8004bdc:	fba1 1303 	umull	r1, r3, r1, r3
 8004be0:	09db      	lsrs	r3, r3, #7
 8004be2:	4413      	add	r3, r2
 8004be4:	1c9a      	adds	r2, r3, #2
 8004be6:	4b0b      	ldr	r3, [pc, #44]	@ (8004c14 <RTC_WeekDayNum+0xec>)
 8004be8:	fba3 1302 	umull	r1, r3, r3, r2
 8004bec:	1ad1      	subs	r1, r2, r3
 8004bee:	0849      	lsrs	r1, r1, #1
 8004bf0:	440b      	add	r3, r1
 8004bf2:	0899      	lsrs	r1, r3, #2
 8004bf4:	460b      	mov	r3, r1
 8004bf6:	00db      	lsls	r3, r3, #3
 8004bf8:	1a5b      	subs	r3, r3, r1
 8004bfa:	1ad3      	subs	r3, r2, r3
 8004bfc:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	b2db      	uxtb	r3, r3
}
 8004c02:	4618      	mov	r0, r3
 8004c04:	3714      	adds	r7, #20
 8004c06:	46bd      	mov	sp, r7
 8004c08:	bc80      	pop	{r7}
 8004c0a:	4770      	bx	lr
 8004c0c:	38e38e39 	.word	0x38e38e39
 8004c10:	51eb851f 	.word	0x51eb851f
 8004c14:	24924925 	.word	0x24924925

08004c18 <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register (depending devices).
  * @param  Data: Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8004c18:	b480      	push	{r7}
 8004c1a:	b087      	sub	sp, #28
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	60f8      	str	r0, [r7, #12]
 8004c20:	60b9      	str	r1, [r7, #8]
 8004c22:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8004c24:	2300      	movs	r3, #0
 8004c26:	617b      	str	r3, [r7, #20]
  UNUSED(hrtc);

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)BKP_BASE;
 8004c28:	4b07      	ldr	r3, [pc, #28]	@ (8004c48 <HAL_RTCEx_BKUPWrite+0x30>)
 8004c2a:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	009b      	lsls	r3, r3, #2
 8004c30:	697a      	ldr	r2, [r7, #20]
 8004c32:	4413      	add	r3, r2
 8004c34:	617b      	str	r3, [r7, #20]

  *(__IO uint32_t *) tmp = (Data & BKP_DR1_D);
 8004c36:	697b      	ldr	r3, [r7, #20]
 8004c38:	687a      	ldr	r2, [r7, #4]
 8004c3a:	b292      	uxth	r2, r2
 8004c3c:	601a      	str	r2, [r3, #0]
}
 8004c3e:	bf00      	nop
 8004c40:	371c      	adds	r7, #28
 8004c42:	46bd      	mov	sp, r7
 8004c44:	bc80      	pop	{r7}
 8004c46:	4770      	bx	lr
 8004c48:	40006c00 	.word	0x40006c00

08004c4c <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 1 to 10 (or 42) to
  *                                 specify the register (depending devices).
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	b085      	sub	sp, #20
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
 8004c54:	6039      	str	r1, [r7, #0]
  uint32_t backupregister = 0U;
 8004c56:	2300      	movs	r3, #0
 8004c58:	60fb      	str	r3, [r7, #12]
  uint32_t pvalue = 0U;
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	60bb      	str	r3, [r7, #8]
  UNUSED(hrtc);

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  backupregister = (uint32_t)BKP_BASE;
 8004c5e:	4b08      	ldr	r3, [pc, #32]	@ (8004c80 <HAL_RTCEx_BKUPRead+0x34>)
 8004c60:	60fb      	str	r3, [r7, #12]
  backupregister += (BackupRegister * 4U);
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	009b      	lsls	r3, r3, #2
 8004c66:	68fa      	ldr	r2, [r7, #12]
 8004c68:	4413      	add	r3, r2
 8004c6a:	60fb      	str	r3, [r7, #12]

  pvalue = (*(__IO uint32_t *)(backupregister)) & BKP_DR1_D;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	b29b      	uxth	r3, r3
 8004c72:	60bb      	str	r3, [r7, #8]

  /* Read the specified register */
  return pvalue;
 8004c74:	68bb      	ldr	r3, [r7, #8]
}
 8004c76:	4618      	mov	r0, r3
 8004c78:	3714      	adds	r7, #20
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	bc80      	pop	{r7}
 8004c7e:	4770      	bx	lr
 8004c80:	40006c00 	.word	0x40006c00

08004c84 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b082      	sub	sp, #8
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d101      	bne.n	8004c96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c92:	2301      	movs	r3, #1
 8004c94:	e042      	b.n	8004d1c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004c9c:	b2db      	uxtb	r3, r3
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d106      	bne.n	8004cb0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004caa:	6878      	ldr	r0, [r7, #4]
 8004cac:	f7fc ff30 	bl	8001b10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2224      	movs	r2, #36	@ 0x24
 8004cb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	68da      	ldr	r2, [r3, #12]
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004cc6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004cc8:	6878      	ldr	r0, [r7, #4]
 8004cca:	f000 ff3d 	bl	8005b48 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	691a      	ldr	r2, [r3, #16]
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004cdc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	695a      	ldr	r2, [r3, #20]
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004cec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	68da      	ldr	r2, [r3, #12]
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004cfc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2200      	movs	r2, #0
 8004d02:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2220      	movs	r2, #32
 8004d08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2220      	movs	r2, #32
 8004d10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2200      	movs	r2, #0
 8004d18:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004d1a:	2300      	movs	r3, #0
}
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	3708      	adds	r7, #8
 8004d20:	46bd      	mov	sp, r7
 8004d22:	bd80      	pop	{r7, pc}

08004d24 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b08a      	sub	sp, #40	@ 0x28
 8004d28:	af02      	add	r7, sp, #8
 8004d2a:	60f8      	str	r0, [r7, #12]
 8004d2c:	60b9      	str	r1, [r7, #8]
 8004d2e:	603b      	str	r3, [r7, #0]
 8004d30:	4613      	mov	r3, r2
 8004d32:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004d34:	2300      	movs	r3, #0
 8004d36:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004d3e:	b2db      	uxtb	r3, r3
 8004d40:	2b20      	cmp	r3, #32
 8004d42:	d175      	bne.n	8004e30 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d44:	68bb      	ldr	r3, [r7, #8]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d002      	beq.n	8004d50 <HAL_UART_Transmit+0x2c>
 8004d4a:	88fb      	ldrh	r3, [r7, #6]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d101      	bne.n	8004d54 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004d50:	2301      	movs	r3, #1
 8004d52:	e06e      	b.n	8004e32 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	2200      	movs	r2, #0
 8004d58:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	2221      	movs	r2, #33	@ 0x21
 8004d5e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004d62:	f7fc ffe3 	bl	8001d2c <HAL_GetTick>
 8004d66:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	88fa      	ldrh	r2, [r7, #6]
 8004d6c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	88fa      	ldrh	r2, [r7, #6]
 8004d72:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	689b      	ldr	r3, [r3, #8]
 8004d78:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d7c:	d108      	bne.n	8004d90 <HAL_UART_Transmit+0x6c>
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	691b      	ldr	r3, [r3, #16]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d104      	bne.n	8004d90 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004d86:	2300      	movs	r3, #0
 8004d88:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004d8a:	68bb      	ldr	r3, [r7, #8]
 8004d8c:	61bb      	str	r3, [r7, #24]
 8004d8e:	e003      	b.n	8004d98 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004d90:	68bb      	ldr	r3, [r7, #8]
 8004d92:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004d94:	2300      	movs	r3, #0
 8004d96:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004d98:	e02e      	b.n	8004df8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	9300      	str	r3, [sp, #0]
 8004d9e:	697b      	ldr	r3, [r7, #20]
 8004da0:	2200      	movs	r2, #0
 8004da2:	2180      	movs	r1, #128	@ 0x80
 8004da4:	68f8      	ldr	r0, [r7, #12]
 8004da6:	f000 fc1a 	bl	80055de <UART_WaitOnFlagUntilTimeout>
 8004daa:	4603      	mov	r3, r0
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d005      	beq.n	8004dbc <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	2220      	movs	r2, #32
 8004db4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004db8:	2303      	movs	r3, #3
 8004dba:	e03a      	b.n	8004e32 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004dbc:	69fb      	ldr	r3, [r7, #28]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d10b      	bne.n	8004dda <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004dc2:	69bb      	ldr	r3, [r7, #24]
 8004dc4:	881b      	ldrh	r3, [r3, #0]
 8004dc6:	461a      	mov	r2, r3
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004dd0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004dd2:	69bb      	ldr	r3, [r7, #24]
 8004dd4:	3302      	adds	r3, #2
 8004dd6:	61bb      	str	r3, [r7, #24]
 8004dd8:	e007      	b.n	8004dea <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004dda:	69fb      	ldr	r3, [r7, #28]
 8004ddc:	781a      	ldrb	r2, [r3, #0]
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004de4:	69fb      	ldr	r3, [r7, #28]
 8004de6:	3301      	adds	r3, #1
 8004de8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004dee:	b29b      	uxth	r3, r3
 8004df0:	3b01      	subs	r3, #1
 8004df2:	b29a      	uxth	r2, r3
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004dfc:	b29b      	uxth	r3, r3
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d1cb      	bne.n	8004d9a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	9300      	str	r3, [sp, #0]
 8004e06:	697b      	ldr	r3, [r7, #20]
 8004e08:	2200      	movs	r2, #0
 8004e0a:	2140      	movs	r1, #64	@ 0x40
 8004e0c:	68f8      	ldr	r0, [r7, #12]
 8004e0e:	f000 fbe6 	bl	80055de <UART_WaitOnFlagUntilTimeout>
 8004e12:	4603      	mov	r3, r0
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d005      	beq.n	8004e24 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	2220      	movs	r2, #32
 8004e1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004e20:	2303      	movs	r3, #3
 8004e22:	e006      	b.n	8004e32 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	2220      	movs	r2, #32
 8004e28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	e000      	b.n	8004e32 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004e30:	2302      	movs	r3, #2
  }
}
 8004e32:	4618      	mov	r0, r3
 8004e34:	3720      	adds	r7, #32
 8004e36:	46bd      	mov	sp, r7
 8004e38:	bd80      	pop	{r7, pc}

08004e3a <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004e3a:	b580      	push	{r7, lr}
 8004e3c:	b084      	sub	sp, #16
 8004e3e:	af00      	add	r7, sp, #0
 8004e40:	60f8      	str	r0, [r7, #12]
 8004e42:	60b9      	str	r1, [r7, #8]
 8004e44:	4613      	mov	r3, r2
 8004e46:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004e4e:	b2db      	uxtb	r3, r3
 8004e50:	2b20      	cmp	r3, #32
 8004e52:	d112      	bne.n	8004e7a <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e54:	68bb      	ldr	r3, [r7, #8]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d002      	beq.n	8004e60 <HAL_UART_Receive_DMA+0x26>
 8004e5a:	88fb      	ldrh	r3, [r7, #6]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d101      	bne.n	8004e64 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8004e60:	2301      	movs	r3, #1
 8004e62:	e00b      	b.n	8004e7c <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	2200      	movs	r2, #0
 8004e68:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8004e6a:	88fb      	ldrh	r3, [r7, #6]
 8004e6c:	461a      	mov	r2, r3
 8004e6e:	68b9      	ldr	r1, [r7, #8]
 8004e70:	68f8      	ldr	r0, [r7, #12]
 8004e72:	f000 fc0d 	bl	8005690 <UART_Start_Receive_DMA>
 8004e76:	4603      	mov	r3, r0
 8004e78:	e000      	b.n	8004e7c <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004e7a:	2302      	movs	r3, #2
  }
}
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	3710      	adds	r7, #16
 8004e80:	46bd      	mov	sp, r7
 8004e82:	bd80      	pop	{r7, pc}

08004e84 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b0ba      	sub	sp, #232	@ 0xe8
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	68db      	ldr	r3, [r3, #12]
 8004e9c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	695b      	ldr	r3, [r3, #20]
 8004ea6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004eaa:	2300      	movs	r3, #0
 8004eac:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004eb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004eba:	f003 030f 	and.w	r3, r3, #15
 8004ebe:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004ec2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d10f      	bne.n	8004eea <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004eca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ece:	f003 0320 	and.w	r3, r3, #32
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d009      	beq.n	8004eea <HAL_UART_IRQHandler+0x66>
 8004ed6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004eda:	f003 0320 	and.w	r3, r3, #32
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d003      	beq.n	8004eea <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004ee2:	6878      	ldr	r0, [r7, #4]
 8004ee4:	f000 fd72 	bl	80059cc <UART_Receive_IT>
      return;
 8004ee8:	e25b      	b.n	80053a2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004eea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	f000 80de 	beq.w	80050b0 <HAL_UART_IRQHandler+0x22c>
 8004ef4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004ef8:	f003 0301 	and.w	r3, r3, #1
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d106      	bne.n	8004f0e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004f00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004f04:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	f000 80d1 	beq.w	80050b0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004f0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f12:	f003 0301 	and.w	r3, r3, #1
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d00b      	beq.n	8004f32 <HAL_UART_IRQHandler+0xae>
 8004f1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004f1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d005      	beq.n	8004f32 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f2a:	f043 0201 	orr.w	r2, r3, #1
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004f32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f36:	f003 0304 	and.w	r3, r3, #4
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d00b      	beq.n	8004f56 <HAL_UART_IRQHandler+0xd2>
 8004f3e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004f42:	f003 0301 	and.w	r3, r3, #1
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d005      	beq.n	8004f56 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f4e:	f043 0202 	orr.w	r2, r3, #2
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004f56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f5a:	f003 0302 	and.w	r3, r3, #2
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d00b      	beq.n	8004f7a <HAL_UART_IRQHandler+0xf6>
 8004f62:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004f66:	f003 0301 	and.w	r3, r3, #1
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d005      	beq.n	8004f7a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f72:	f043 0204 	orr.w	r2, r3, #4
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004f7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f7e:	f003 0308 	and.w	r3, r3, #8
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d011      	beq.n	8004faa <HAL_UART_IRQHandler+0x126>
 8004f86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004f8a:	f003 0320 	and.w	r3, r3, #32
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d105      	bne.n	8004f9e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004f92:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004f96:	f003 0301 	and.w	r3, r3, #1
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d005      	beq.n	8004faa <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fa2:	f043 0208 	orr.w	r2, r3, #8
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	f000 81f2 	beq.w	8005398 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004fb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004fb8:	f003 0320 	and.w	r3, r3, #32
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d008      	beq.n	8004fd2 <HAL_UART_IRQHandler+0x14e>
 8004fc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004fc4:	f003 0320 	and.w	r3, r3, #32
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d002      	beq.n	8004fd2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004fcc:	6878      	ldr	r0, [r7, #4]
 8004fce:	f000 fcfd 	bl	80059cc <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	695b      	ldr	r3, [r3, #20]
 8004fd8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	bf14      	ite	ne
 8004fe0:	2301      	movne	r3, #1
 8004fe2:	2300      	moveq	r3, #0
 8004fe4:	b2db      	uxtb	r3, r3
 8004fe6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fee:	f003 0308 	and.w	r3, r3, #8
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d103      	bne.n	8004ffe <HAL_UART_IRQHandler+0x17a>
 8004ff6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d04f      	beq.n	800509e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004ffe:	6878      	ldr	r0, [r7, #4]
 8005000:	f000 fc07 	bl	8005812 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	695b      	ldr	r3, [r3, #20]
 800500a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800500e:	2b00      	cmp	r3, #0
 8005010:	d041      	beq.n	8005096 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	3314      	adds	r3, #20
 8005018:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800501c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005020:	e853 3f00 	ldrex	r3, [r3]
 8005024:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005028:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800502c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005030:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	3314      	adds	r3, #20
 800503a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800503e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005042:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005046:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800504a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800504e:	e841 2300 	strex	r3, r2, [r1]
 8005052:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005056:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800505a:	2b00      	cmp	r3, #0
 800505c:	d1d9      	bne.n	8005012 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005062:	2b00      	cmp	r3, #0
 8005064:	d013      	beq.n	800508e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800506a:	4a7e      	ldr	r2, [pc, #504]	@ (8005264 <HAL_UART_IRQHandler+0x3e0>)
 800506c:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005072:	4618      	mov	r0, r3
 8005074:	f7fd fcb8 	bl	80029e8 <HAL_DMA_Abort_IT>
 8005078:	4603      	mov	r3, r0
 800507a:	2b00      	cmp	r3, #0
 800507c:	d016      	beq.n	80050ac <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005082:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005084:	687a      	ldr	r2, [r7, #4]
 8005086:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005088:	4610      	mov	r0, r2
 800508a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800508c:	e00e      	b.n	80050ac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800508e:	6878      	ldr	r0, [r7, #4]
 8005090:	f000 f993 	bl	80053ba <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005094:	e00a      	b.n	80050ac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005096:	6878      	ldr	r0, [r7, #4]
 8005098:	f000 f98f 	bl	80053ba <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800509c:	e006      	b.n	80050ac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800509e:	6878      	ldr	r0, [r7, #4]
 80050a0:	f000 f98b 	bl	80053ba <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2200      	movs	r2, #0
 80050a8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80050aa:	e175      	b.n	8005398 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050ac:	bf00      	nop
    return;
 80050ae:	e173      	b.n	8005398 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050b4:	2b01      	cmp	r3, #1
 80050b6:	f040 814f 	bne.w	8005358 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80050ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80050be:	f003 0310 	and.w	r3, r3, #16
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	f000 8148 	beq.w	8005358 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80050c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80050cc:	f003 0310 	and.w	r3, r3, #16
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	f000 8141 	beq.w	8005358 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80050d6:	2300      	movs	r3, #0
 80050d8:	60bb      	str	r3, [r7, #8]
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	60bb      	str	r3, [r7, #8]
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	685b      	ldr	r3, [r3, #4]
 80050e8:	60bb      	str	r3, [r7, #8]
 80050ea:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	695b      	ldr	r3, [r3, #20]
 80050f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	f000 80b6 	beq.w	8005268 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	685b      	ldr	r3, [r3, #4]
 8005104:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005108:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800510c:	2b00      	cmp	r3, #0
 800510e:	f000 8145 	beq.w	800539c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005116:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800511a:	429a      	cmp	r2, r3
 800511c:	f080 813e 	bcs.w	800539c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005126:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800512c:	699b      	ldr	r3, [r3, #24]
 800512e:	2b20      	cmp	r3, #32
 8005130:	f000 8088 	beq.w	8005244 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	330c      	adds	r3, #12
 800513a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800513e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005142:	e853 3f00 	ldrex	r3, [r3]
 8005146:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800514a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800514e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005152:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	330c      	adds	r3, #12
 800515c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005160:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005164:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005168:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800516c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005170:	e841 2300 	strex	r3, r2, [r1]
 8005174:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005178:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800517c:	2b00      	cmp	r3, #0
 800517e:	d1d9      	bne.n	8005134 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	3314      	adds	r3, #20
 8005186:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005188:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800518a:	e853 3f00 	ldrex	r3, [r3]
 800518e:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005190:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005192:	f023 0301 	bic.w	r3, r3, #1
 8005196:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	3314      	adds	r3, #20
 80051a0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80051a4:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80051a8:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051aa:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80051ac:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80051b0:	e841 2300 	strex	r3, r2, [r1]
 80051b4:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80051b6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d1e1      	bne.n	8005180 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	3314      	adds	r3, #20
 80051c2:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051c4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80051c6:	e853 3f00 	ldrex	r3, [r3]
 80051ca:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80051cc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80051ce:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80051d2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	3314      	adds	r3, #20
 80051dc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80051e0:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80051e2:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051e4:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80051e6:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80051e8:	e841 2300 	strex	r3, r2, [r1]
 80051ec:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80051ee:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d1e3      	bne.n	80051bc <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2220      	movs	r2, #32
 80051f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2200      	movs	r2, #0
 8005200:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	330c      	adds	r3, #12
 8005208:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800520a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800520c:	e853 3f00 	ldrex	r3, [r3]
 8005210:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005212:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005214:	f023 0310 	bic.w	r3, r3, #16
 8005218:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	330c      	adds	r3, #12
 8005222:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005226:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005228:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800522a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800522c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800522e:	e841 2300 	strex	r3, r2, [r1]
 8005232:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005234:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005236:	2b00      	cmp	r3, #0
 8005238:	d1e3      	bne.n	8005202 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800523e:	4618      	mov	r0, r3
 8005240:	f7fd fb96 	bl	8002970 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2202      	movs	r2, #2
 8005248:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005252:	b29b      	uxth	r3, r3
 8005254:	1ad3      	subs	r3, r2, r3
 8005256:	b29b      	uxth	r3, r3
 8005258:	4619      	mov	r1, r3
 800525a:	6878      	ldr	r0, [r7, #4]
 800525c:	f000 f8b6 	bl	80053cc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005260:	e09c      	b.n	800539c <HAL_UART_IRQHandler+0x518>
 8005262:	bf00      	nop
 8005264:	080058d7 	.word	0x080058d7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005270:	b29b      	uxth	r3, r3
 8005272:	1ad3      	subs	r3, r2, r3
 8005274:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800527c:	b29b      	uxth	r3, r3
 800527e:	2b00      	cmp	r3, #0
 8005280:	f000 808e 	beq.w	80053a0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005284:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005288:	2b00      	cmp	r3, #0
 800528a:	f000 8089 	beq.w	80053a0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	330c      	adds	r3, #12
 8005294:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005296:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005298:	e853 3f00 	ldrex	r3, [r3]
 800529c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800529e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052a0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80052a4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	330c      	adds	r3, #12
 80052ae:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80052b2:	647a      	str	r2, [r7, #68]	@ 0x44
 80052b4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052b6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80052b8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80052ba:	e841 2300 	strex	r3, r2, [r1]
 80052be:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80052c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d1e3      	bne.n	800528e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	3314      	adds	r3, #20
 80052cc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052d0:	e853 3f00 	ldrex	r3, [r3]
 80052d4:	623b      	str	r3, [r7, #32]
   return(result);
 80052d6:	6a3b      	ldr	r3, [r7, #32]
 80052d8:	f023 0301 	bic.w	r3, r3, #1
 80052dc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	3314      	adds	r3, #20
 80052e6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80052ea:	633a      	str	r2, [r7, #48]	@ 0x30
 80052ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052ee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80052f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80052f2:	e841 2300 	strex	r3, r2, [r1]
 80052f6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80052f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d1e3      	bne.n	80052c6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2220      	movs	r2, #32
 8005302:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2200      	movs	r2, #0
 800530a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	330c      	adds	r3, #12
 8005312:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005314:	693b      	ldr	r3, [r7, #16]
 8005316:	e853 3f00 	ldrex	r3, [r3]
 800531a:	60fb      	str	r3, [r7, #12]
   return(result);
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	f023 0310 	bic.w	r3, r3, #16
 8005322:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	330c      	adds	r3, #12
 800532c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005330:	61fa      	str	r2, [r7, #28]
 8005332:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005334:	69b9      	ldr	r1, [r7, #24]
 8005336:	69fa      	ldr	r2, [r7, #28]
 8005338:	e841 2300 	strex	r3, r2, [r1]
 800533c:	617b      	str	r3, [r7, #20]
   return(result);
 800533e:	697b      	ldr	r3, [r7, #20]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d1e3      	bne.n	800530c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2202      	movs	r2, #2
 8005348:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800534a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800534e:	4619      	mov	r1, r3
 8005350:	6878      	ldr	r0, [r7, #4]
 8005352:	f000 f83b 	bl	80053cc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005356:	e023      	b.n	80053a0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005358:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800535c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005360:	2b00      	cmp	r3, #0
 8005362:	d009      	beq.n	8005378 <HAL_UART_IRQHandler+0x4f4>
 8005364:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005368:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800536c:	2b00      	cmp	r3, #0
 800536e:	d003      	beq.n	8005378 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005370:	6878      	ldr	r0, [r7, #4]
 8005372:	f000 fac4 	bl	80058fe <UART_Transmit_IT>
    return;
 8005376:	e014      	b.n	80053a2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005378:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800537c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005380:	2b00      	cmp	r3, #0
 8005382:	d00e      	beq.n	80053a2 <HAL_UART_IRQHandler+0x51e>
 8005384:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005388:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800538c:	2b00      	cmp	r3, #0
 800538e:	d008      	beq.n	80053a2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005390:	6878      	ldr	r0, [r7, #4]
 8005392:	f000 fb03 	bl	800599c <UART_EndTransmit_IT>
    return;
 8005396:	e004      	b.n	80053a2 <HAL_UART_IRQHandler+0x51e>
    return;
 8005398:	bf00      	nop
 800539a:	e002      	b.n	80053a2 <HAL_UART_IRQHandler+0x51e>
      return;
 800539c:	bf00      	nop
 800539e:	e000      	b.n	80053a2 <HAL_UART_IRQHandler+0x51e>
      return;
 80053a0:	bf00      	nop
  }
}
 80053a2:	37e8      	adds	r7, #232	@ 0xe8
 80053a4:	46bd      	mov	sp, r7
 80053a6:	bd80      	pop	{r7, pc}

080053a8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80053a8:	b480      	push	{r7}
 80053aa:	b083      	sub	sp, #12
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80053b0:	bf00      	nop
 80053b2:	370c      	adds	r7, #12
 80053b4:	46bd      	mov	sp, r7
 80053b6:	bc80      	pop	{r7}
 80053b8:	4770      	bx	lr

080053ba <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80053ba:	b480      	push	{r7}
 80053bc:	b083      	sub	sp, #12
 80053be:	af00      	add	r7, sp, #0
 80053c0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80053c2:	bf00      	nop
 80053c4:	370c      	adds	r7, #12
 80053c6:	46bd      	mov	sp, r7
 80053c8:	bc80      	pop	{r7}
 80053ca:	4770      	bx	lr

080053cc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80053cc:	b480      	push	{r7}
 80053ce:	b083      	sub	sp, #12
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
 80053d4:	460b      	mov	r3, r1
 80053d6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80053d8:	bf00      	nop
 80053da:	370c      	adds	r7, #12
 80053dc:	46bd      	mov	sp, r7
 80053de:	bc80      	pop	{r7}
 80053e0:	4770      	bx	lr

080053e2 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80053e2:	b580      	push	{r7, lr}
 80053e4:	b09c      	sub	sp, #112	@ 0x70
 80053e6:	af00      	add	r7, sp, #0
 80053e8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053ee:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f003 0320 	and.w	r3, r3, #32
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d172      	bne.n	80054e4 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80053fe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005400:	2200      	movs	r2, #0
 8005402:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005404:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	330c      	adds	r3, #12
 800540a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800540c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800540e:	e853 3f00 	ldrex	r3, [r3]
 8005412:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005414:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005416:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800541a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800541c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	330c      	adds	r3, #12
 8005422:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8005424:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005426:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005428:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800542a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800542c:	e841 2300 	strex	r3, r2, [r1]
 8005430:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005432:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005434:	2b00      	cmp	r3, #0
 8005436:	d1e5      	bne.n	8005404 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005438:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	3314      	adds	r3, #20
 800543e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005440:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005442:	e853 3f00 	ldrex	r3, [r3]
 8005446:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005448:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800544a:	f023 0301 	bic.w	r3, r3, #1
 800544e:	667b      	str	r3, [r7, #100]	@ 0x64
 8005450:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	3314      	adds	r3, #20
 8005456:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005458:	647a      	str	r2, [r7, #68]	@ 0x44
 800545a:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800545c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800545e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005460:	e841 2300 	strex	r3, r2, [r1]
 8005464:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005466:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005468:	2b00      	cmp	r3, #0
 800546a:	d1e5      	bne.n	8005438 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800546c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	3314      	adds	r3, #20
 8005472:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005474:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005476:	e853 3f00 	ldrex	r3, [r3]
 800547a:	623b      	str	r3, [r7, #32]
   return(result);
 800547c:	6a3b      	ldr	r3, [r7, #32]
 800547e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005482:	663b      	str	r3, [r7, #96]	@ 0x60
 8005484:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	3314      	adds	r3, #20
 800548a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800548c:	633a      	str	r2, [r7, #48]	@ 0x30
 800548e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005490:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005492:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005494:	e841 2300 	strex	r3, r2, [r1]
 8005498:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800549a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800549c:	2b00      	cmp	r3, #0
 800549e:	d1e5      	bne.n	800546c <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80054a0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80054a2:	2220      	movs	r2, #32
 80054a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054a8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80054aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054ac:	2b01      	cmp	r3, #1
 80054ae:	d119      	bne.n	80054e4 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054b0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	330c      	adds	r3, #12
 80054b6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054b8:	693b      	ldr	r3, [r7, #16]
 80054ba:	e853 3f00 	ldrex	r3, [r3]
 80054be:	60fb      	str	r3, [r7, #12]
   return(result);
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	f023 0310 	bic.w	r3, r3, #16
 80054c6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80054c8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	330c      	adds	r3, #12
 80054ce:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80054d0:	61fa      	str	r2, [r7, #28]
 80054d2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054d4:	69b9      	ldr	r1, [r7, #24]
 80054d6:	69fa      	ldr	r2, [r7, #28]
 80054d8:	e841 2300 	strex	r3, r2, [r1]
 80054dc:	617b      	str	r3, [r7, #20]
   return(result);
 80054de:	697b      	ldr	r3, [r7, #20]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d1e5      	bne.n	80054b0 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80054e4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80054e6:	2200      	movs	r2, #0
 80054e8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054ea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80054ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054ee:	2b01      	cmp	r3, #1
 80054f0:	d106      	bne.n	8005500 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80054f2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80054f4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80054f6:	4619      	mov	r1, r3
 80054f8:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80054fa:	f7ff ff67 	bl	80053cc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80054fe:	e002      	b.n	8005506 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8005500:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005502:	f7fc f957 	bl	80017b4 <HAL_UART_RxCpltCallback>
}
 8005506:	bf00      	nop
 8005508:	3770      	adds	r7, #112	@ 0x70
 800550a:	46bd      	mov	sp, r7
 800550c:	bd80      	pop	{r7, pc}

0800550e <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800550e:	b580      	push	{r7, lr}
 8005510:	b084      	sub	sp, #16
 8005512:	af00      	add	r7, sp, #0
 8005514:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800551a:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	2201      	movs	r2, #1
 8005520:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005526:	2b01      	cmp	r3, #1
 8005528:	d108      	bne.n	800553c <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800552e:	085b      	lsrs	r3, r3, #1
 8005530:	b29b      	uxth	r3, r3
 8005532:	4619      	mov	r1, r3
 8005534:	68f8      	ldr	r0, [r7, #12]
 8005536:	f7ff ff49 	bl	80053cc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800553a:	e002      	b.n	8005542 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800553c:	68f8      	ldr	r0, [r7, #12]
 800553e:	f7fc f96d 	bl	800181c <HAL_UART_RxHalfCpltCallback>
}
 8005542:	bf00      	nop
 8005544:	3710      	adds	r7, #16
 8005546:	46bd      	mov	sp, r7
 8005548:	bd80      	pop	{r7, pc}

0800554a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800554a:	b580      	push	{r7, lr}
 800554c:	b084      	sub	sp, #16
 800554e:	af00      	add	r7, sp, #0
 8005550:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005552:	2300      	movs	r3, #0
 8005554:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800555a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800555c:	68bb      	ldr	r3, [r7, #8]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	695b      	ldr	r3, [r3, #20]
 8005562:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005566:	2b00      	cmp	r3, #0
 8005568:	bf14      	ite	ne
 800556a:	2301      	movne	r3, #1
 800556c:	2300      	moveq	r3, #0
 800556e:	b2db      	uxtb	r3, r3
 8005570:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005572:	68bb      	ldr	r3, [r7, #8]
 8005574:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005578:	b2db      	uxtb	r3, r3
 800557a:	2b21      	cmp	r3, #33	@ 0x21
 800557c:	d108      	bne.n	8005590 <UART_DMAError+0x46>
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d005      	beq.n	8005590 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005584:	68bb      	ldr	r3, [r7, #8]
 8005586:	2200      	movs	r2, #0
 8005588:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 800558a:	68b8      	ldr	r0, [r7, #8]
 800558c:	f000 f91a 	bl	80057c4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005590:	68bb      	ldr	r3, [r7, #8]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	695b      	ldr	r3, [r3, #20]
 8005596:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800559a:	2b00      	cmp	r3, #0
 800559c:	bf14      	ite	ne
 800559e:	2301      	movne	r3, #1
 80055a0:	2300      	moveq	r3, #0
 80055a2:	b2db      	uxtb	r3, r3
 80055a4:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80055a6:	68bb      	ldr	r3, [r7, #8]
 80055a8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80055ac:	b2db      	uxtb	r3, r3
 80055ae:	2b22      	cmp	r3, #34	@ 0x22
 80055b0:	d108      	bne.n	80055c4 <UART_DMAError+0x7a>
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d005      	beq.n	80055c4 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	2200      	movs	r2, #0
 80055bc:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 80055be:	68b8      	ldr	r0, [r7, #8]
 80055c0:	f000 f927 	bl	8005812 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80055c4:	68bb      	ldr	r3, [r7, #8]
 80055c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055c8:	f043 0210 	orr.w	r2, r3, #16
 80055cc:	68bb      	ldr	r3, [r7, #8]
 80055ce:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80055d0:	68b8      	ldr	r0, [r7, #8]
 80055d2:	f7ff fef2 	bl	80053ba <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80055d6:	bf00      	nop
 80055d8:	3710      	adds	r7, #16
 80055da:	46bd      	mov	sp, r7
 80055dc:	bd80      	pop	{r7, pc}

080055de <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80055de:	b580      	push	{r7, lr}
 80055e0:	b086      	sub	sp, #24
 80055e2:	af00      	add	r7, sp, #0
 80055e4:	60f8      	str	r0, [r7, #12]
 80055e6:	60b9      	str	r1, [r7, #8]
 80055e8:	603b      	str	r3, [r7, #0]
 80055ea:	4613      	mov	r3, r2
 80055ec:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055ee:	e03b      	b.n	8005668 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055f0:	6a3b      	ldr	r3, [r7, #32]
 80055f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055f6:	d037      	beq.n	8005668 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055f8:	f7fc fb98 	bl	8001d2c <HAL_GetTick>
 80055fc:	4602      	mov	r2, r0
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	1ad3      	subs	r3, r2, r3
 8005602:	6a3a      	ldr	r2, [r7, #32]
 8005604:	429a      	cmp	r2, r3
 8005606:	d302      	bcc.n	800560e <UART_WaitOnFlagUntilTimeout+0x30>
 8005608:	6a3b      	ldr	r3, [r7, #32]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d101      	bne.n	8005612 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800560e:	2303      	movs	r3, #3
 8005610:	e03a      	b.n	8005688 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	68db      	ldr	r3, [r3, #12]
 8005618:	f003 0304 	and.w	r3, r3, #4
 800561c:	2b00      	cmp	r3, #0
 800561e:	d023      	beq.n	8005668 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005620:	68bb      	ldr	r3, [r7, #8]
 8005622:	2b80      	cmp	r3, #128	@ 0x80
 8005624:	d020      	beq.n	8005668 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005626:	68bb      	ldr	r3, [r7, #8]
 8005628:	2b40      	cmp	r3, #64	@ 0x40
 800562a:	d01d      	beq.n	8005668 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f003 0308 	and.w	r3, r3, #8
 8005636:	2b08      	cmp	r3, #8
 8005638:	d116      	bne.n	8005668 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800563a:	2300      	movs	r3, #0
 800563c:	617b      	str	r3, [r7, #20]
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	617b      	str	r3, [r7, #20]
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	685b      	ldr	r3, [r3, #4]
 800564c:	617b      	str	r3, [r7, #20]
 800564e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005650:	68f8      	ldr	r0, [r7, #12]
 8005652:	f000 f8de 	bl	8005812 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	2208      	movs	r2, #8
 800565a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	2200      	movs	r2, #0
 8005660:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005664:	2301      	movs	r3, #1
 8005666:	e00f      	b.n	8005688 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	681a      	ldr	r2, [r3, #0]
 800566e:	68bb      	ldr	r3, [r7, #8]
 8005670:	4013      	ands	r3, r2
 8005672:	68ba      	ldr	r2, [r7, #8]
 8005674:	429a      	cmp	r2, r3
 8005676:	bf0c      	ite	eq
 8005678:	2301      	moveq	r3, #1
 800567a:	2300      	movne	r3, #0
 800567c:	b2db      	uxtb	r3, r3
 800567e:	461a      	mov	r2, r3
 8005680:	79fb      	ldrb	r3, [r7, #7]
 8005682:	429a      	cmp	r2, r3
 8005684:	d0b4      	beq.n	80055f0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005686:	2300      	movs	r3, #0
}
 8005688:	4618      	mov	r0, r3
 800568a:	3718      	adds	r7, #24
 800568c:	46bd      	mov	sp, r7
 800568e:	bd80      	pop	{r7, pc}

08005690 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005690:	b580      	push	{r7, lr}
 8005692:	b098      	sub	sp, #96	@ 0x60
 8005694:	af00      	add	r7, sp, #0
 8005696:	60f8      	str	r0, [r7, #12]
 8005698:	60b9      	str	r1, [r7, #8]
 800569a:	4613      	mov	r3, r2
 800569c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800569e:	68ba      	ldr	r2, [r7, #8]
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	88fa      	ldrh	r2, [r7, #6]
 80056a8:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	2200      	movs	r2, #0
 80056ae:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	2222      	movs	r2, #34	@ 0x22
 80056b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056bc:	4a3e      	ldr	r2, [pc, #248]	@ (80057b8 <UART_Start_Receive_DMA+0x128>)
 80056be:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056c4:	4a3d      	ldr	r2, [pc, #244]	@ (80057bc <UART_Start_Receive_DMA+0x12c>)
 80056c6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056cc:	4a3c      	ldr	r2, [pc, #240]	@ (80057c0 <UART_Start_Receive_DMA+0x130>)
 80056ce:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056d4:	2200      	movs	r2, #0
 80056d6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80056d8:	f107 0308 	add.w	r3, r7, #8
 80056dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	3304      	adds	r3, #4
 80056e8:	4619      	mov	r1, r3
 80056ea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80056ec:	681a      	ldr	r2, [r3, #0]
 80056ee:	88fb      	ldrh	r3, [r7, #6]
 80056f0:	f7fd f8de 	bl	80028b0 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80056f4:	2300      	movs	r3, #0
 80056f6:	613b      	str	r3, [r7, #16]
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	613b      	str	r3, [r7, #16]
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	685b      	ldr	r3, [r3, #4]
 8005706:	613b      	str	r3, [r7, #16]
 8005708:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	691b      	ldr	r3, [r3, #16]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d019      	beq.n	8005746 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	330c      	adds	r3, #12
 8005718:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800571a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800571c:	e853 3f00 	ldrex	r3, [r3]
 8005720:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005722:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005724:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005728:	65bb      	str	r3, [r7, #88]	@ 0x58
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	330c      	adds	r3, #12
 8005730:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005732:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8005734:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005736:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8005738:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800573a:	e841 2300 	strex	r3, r2, [r1]
 800573e:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8005740:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005742:	2b00      	cmp	r3, #0
 8005744:	d1e5      	bne.n	8005712 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	3314      	adds	r3, #20
 800574c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800574e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005750:	e853 3f00 	ldrex	r3, [r3]
 8005754:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005756:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005758:	f043 0301 	orr.w	r3, r3, #1
 800575c:	657b      	str	r3, [r7, #84]	@ 0x54
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	3314      	adds	r3, #20
 8005764:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005766:	63ba      	str	r2, [r7, #56]	@ 0x38
 8005768:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800576a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800576c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800576e:	e841 2300 	strex	r3, r2, [r1]
 8005772:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005774:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005776:	2b00      	cmp	r3, #0
 8005778:	d1e5      	bne.n	8005746 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	3314      	adds	r3, #20
 8005780:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005782:	69bb      	ldr	r3, [r7, #24]
 8005784:	e853 3f00 	ldrex	r3, [r3]
 8005788:	617b      	str	r3, [r7, #20]
   return(result);
 800578a:	697b      	ldr	r3, [r7, #20]
 800578c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005790:	653b      	str	r3, [r7, #80]	@ 0x50
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	3314      	adds	r3, #20
 8005798:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800579a:	627a      	str	r2, [r7, #36]	@ 0x24
 800579c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800579e:	6a39      	ldr	r1, [r7, #32]
 80057a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80057a2:	e841 2300 	strex	r3, r2, [r1]
 80057a6:	61fb      	str	r3, [r7, #28]
   return(result);
 80057a8:	69fb      	ldr	r3, [r7, #28]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d1e5      	bne.n	800577a <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 80057ae:	2300      	movs	r3, #0
}
 80057b0:	4618      	mov	r0, r3
 80057b2:	3760      	adds	r7, #96	@ 0x60
 80057b4:	46bd      	mov	sp, r7
 80057b6:	bd80      	pop	{r7, pc}
 80057b8:	080053e3 	.word	0x080053e3
 80057bc:	0800550f 	.word	0x0800550f
 80057c0:	0800554b 	.word	0x0800554b

080057c4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80057c4:	b480      	push	{r7}
 80057c6:	b089      	sub	sp, #36	@ 0x24
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	330c      	adds	r3, #12
 80057d2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	e853 3f00 	ldrex	r3, [r3]
 80057da:	60bb      	str	r3, [r7, #8]
   return(result);
 80057dc:	68bb      	ldr	r3, [r7, #8]
 80057de:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80057e2:	61fb      	str	r3, [r7, #28]
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	330c      	adds	r3, #12
 80057ea:	69fa      	ldr	r2, [r7, #28]
 80057ec:	61ba      	str	r2, [r7, #24]
 80057ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057f0:	6979      	ldr	r1, [r7, #20]
 80057f2:	69ba      	ldr	r2, [r7, #24]
 80057f4:	e841 2300 	strex	r3, r2, [r1]
 80057f8:	613b      	str	r3, [r7, #16]
   return(result);
 80057fa:	693b      	ldr	r3, [r7, #16]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d1e5      	bne.n	80057cc <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2220      	movs	r2, #32
 8005804:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8005808:	bf00      	nop
 800580a:	3724      	adds	r7, #36	@ 0x24
 800580c:	46bd      	mov	sp, r7
 800580e:	bc80      	pop	{r7}
 8005810:	4770      	bx	lr

08005812 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005812:	b480      	push	{r7}
 8005814:	b095      	sub	sp, #84	@ 0x54
 8005816:	af00      	add	r7, sp, #0
 8005818:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	330c      	adds	r3, #12
 8005820:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005822:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005824:	e853 3f00 	ldrex	r3, [r3]
 8005828:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800582a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800582c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005830:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	330c      	adds	r3, #12
 8005838:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800583a:	643a      	str	r2, [r7, #64]	@ 0x40
 800583c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800583e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005840:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005842:	e841 2300 	strex	r3, r2, [r1]
 8005846:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005848:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800584a:	2b00      	cmp	r3, #0
 800584c:	d1e5      	bne.n	800581a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	3314      	adds	r3, #20
 8005854:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005856:	6a3b      	ldr	r3, [r7, #32]
 8005858:	e853 3f00 	ldrex	r3, [r3]
 800585c:	61fb      	str	r3, [r7, #28]
   return(result);
 800585e:	69fb      	ldr	r3, [r7, #28]
 8005860:	f023 0301 	bic.w	r3, r3, #1
 8005864:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	3314      	adds	r3, #20
 800586c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800586e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005870:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005872:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005874:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005876:	e841 2300 	strex	r3, r2, [r1]
 800587a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800587c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800587e:	2b00      	cmp	r3, #0
 8005880:	d1e5      	bne.n	800584e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005886:	2b01      	cmp	r3, #1
 8005888:	d119      	bne.n	80058be <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	330c      	adds	r3, #12
 8005890:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	e853 3f00 	ldrex	r3, [r3]
 8005898:	60bb      	str	r3, [r7, #8]
   return(result);
 800589a:	68bb      	ldr	r3, [r7, #8]
 800589c:	f023 0310 	bic.w	r3, r3, #16
 80058a0:	647b      	str	r3, [r7, #68]	@ 0x44
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	330c      	adds	r3, #12
 80058a8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80058aa:	61ba      	str	r2, [r7, #24]
 80058ac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058ae:	6979      	ldr	r1, [r7, #20]
 80058b0:	69ba      	ldr	r2, [r7, #24]
 80058b2:	e841 2300 	strex	r3, r2, [r1]
 80058b6:	613b      	str	r3, [r7, #16]
   return(result);
 80058b8:	693b      	ldr	r3, [r7, #16]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d1e5      	bne.n	800588a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2220      	movs	r2, #32
 80058c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2200      	movs	r2, #0
 80058ca:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80058cc:	bf00      	nop
 80058ce:	3754      	adds	r7, #84	@ 0x54
 80058d0:	46bd      	mov	sp, r7
 80058d2:	bc80      	pop	{r7}
 80058d4:	4770      	bx	lr

080058d6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80058d6:	b580      	push	{r7, lr}
 80058d8:	b084      	sub	sp, #16
 80058da:	af00      	add	r7, sp, #0
 80058dc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058e2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	2200      	movs	r2, #0
 80058e8:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	2200      	movs	r2, #0
 80058ee:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80058f0:	68f8      	ldr	r0, [r7, #12]
 80058f2:	f7ff fd62 	bl	80053ba <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80058f6:	bf00      	nop
 80058f8:	3710      	adds	r7, #16
 80058fa:	46bd      	mov	sp, r7
 80058fc:	bd80      	pop	{r7, pc}

080058fe <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80058fe:	b480      	push	{r7}
 8005900:	b085      	sub	sp, #20
 8005902:	af00      	add	r7, sp, #0
 8005904:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800590c:	b2db      	uxtb	r3, r3
 800590e:	2b21      	cmp	r3, #33	@ 0x21
 8005910:	d13e      	bne.n	8005990 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	689b      	ldr	r3, [r3, #8]
 8005916:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800591a:	d114      	bne.n	8005946 <UART_Transmit_IT+0x48>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	691b      	ldr	r3, [r3, #16]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d110      	bne.n	8005946 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	6a1b      	ldr	r3, [r3, #32]
 8005928:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	881b      	ldrh	r3, [r3, #0]
 800592e:	461a      	mov	r2, r3
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005938:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6a1b      	ldr	r3, [r3, #32]
 800593e:	1c9a      	adds	r2, r3, #2
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	621a      	str	r2, [r3, #32]
 8005944:	e008      	b.n	8005958 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6a1b      	ldr	r3, [r3, #32]
 800594a:	1c59      	adds	r1, r3, #1
 800594c:	687a      	ldr	r2, [r7, #4]
 800594e:	6211      	str	r1, [r2, #32]
 8005950:	781a      	ldrb	r2, [r3, #0]
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800595c:	b29b      	uxth	r3, r3
 800595e:	3b01      	subs	r3, #1
 8005960:	b29b      	uxth	r3, r3
 8005962:	687a      	ldr	r2, [r7, #4]
 8005964:	4619      	mov	r1, r3
 8005966:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005968:	2b00      	cmp	r3, #0
 800596a:	d10f      	bne.n	800598c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	68da      	ldr	r2, [r3, #12]
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800597a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	68da      	ldr	r2, [r3, #12]
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800598a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800598c:	2300      	movs	r3, #0
 800598e:	e000      	b.n	8005992 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005990:	2302      	movs	r3, #2
  }
}
 8005992:	4618      	mov	r0, r3
 8005994:	3714      	adds	r7, #20
 8005996:	46bd      	mov	sp, r7
 8005998:	bc80      	pop	{r7}
 800599a:	4770      	bx	lr

0800599c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b082      	sub	sp, #8
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	68da      	ldr	r2, [r3, #12]
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80059b2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2220      	movs	r2, #32
 80059b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80059bc:	6878      	ldr	r0, [r7, #4]
 80059be:	f7ff fcf3 	bl	80053a8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80059c2:	2300      	movs	r3, #0
}
 80059c4:	4618      	mov	r0, r3
 80059c6:	3708      	adds	r7, #8
 80059c8:	46bd      	mov	sp, r7
 80059ca:	bd80      	pop	{r7, pc}

080059cc <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b08c      	sub	sp, #48	@ 0x30
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80059da:	b2db      	uxtb	r3, r3
 80059dc:	2b22      	cmp	r3, #34	@ 0x22
 80059de:	f040 80ae 	bne.w	8005b3e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	689b      	ldr	r3, [r3, #8]
 80059e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80059ea:	d117      	bne.n	8005a1c <UART_Receive_IT+0x50>
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	691b      	ldr	r3, [r3, #16]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d113      	bne.n	8005a1c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80059f4:	2300      	movs	r3, #0
 80059f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059fc:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	685b      	ldr	r3, [r3, #4]
 8005a04:	b29b      	uxth	r3, r3
 8005a06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a0a:	b29a      	uxth	r2, r3
 8005a0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a0e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a14:	1c9a      	adds	r2, r3, #2
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	629a      	str	r2, [r3, #40]	@ 0x28
 8005a1a:	e026      	b.n	8005a6a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a20:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8005a22:	2300      	movs	r3, #0
 8005a24:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	689b      	ldr	r3, [r3, #8]
 8005a2a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a2e:	d007      	beq.n	8005a40 <UART_Receive_IT+0x74>
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	689b      	ldr	r3, [r3, #8]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d10a      	bne.n	8005a4e <UART_Receive_IT+0x82>
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	691b      	ldr	r3, [r3, #16]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d106      	bne.n	8005a4e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	685b      	ldr	r3, [r3, #4]
 8005a46:	b2da      	uxtb	r2, r3
 8005a48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a4a:	701a      	strb	r2, [r3, #0]
 8005a4c:	e008      	b.n	8005a60 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	685b      	ldr	r3, [r3, #4]
 8005a54:	b2db      	uxtb	r3, r3
 8005a56:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005a5a:	b2da      	uxtb	r2, r3
 8005a5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a5e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a64:	1c5a      	adds	r2, r3, #1
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005a6e:	b29b      	uxth	r3, r3
 8005a70:	3b01      	subs	r3, #1
 8005a72:	b29b      	uxth	r3, r3
 8005a74:	687a      	ldr	r2, [r7, #4]
 8005a76:	4619      	mov	r1, r3
 8005a78:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d15d      	bne.n	8005b3a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	68da      	ldr	r2, [r3, #12]
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f022 0220 	bic.w	r2, r2, #32
 8005a8c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	68da      	ldr	r2, [r3, #12]
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005a9c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	695a      	ldr	r2, [r3, #20]
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f022 0201 	bic.w	r2, r2, #1
 8005aac:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2220      	movs	r2, #32
 8005ab2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2200      	movs	r2, #0
 8005aba:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ac0:	2b01      	cmp	r3, #1
 8005ac2:	d135      	bne.n	8005b30 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	330c      	adds	r3, #12
 8005ad0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ad2:	697b      	ldr	r3, [r7, #20]
 8005ad4:	e853 3f00 	ldrex	r3, [r3]
 8005ad8:	613b      	str	r3, [r7, #16]
   return(result);
 8005ada:	693b      	ldr	r3, [r7, #16]
 8005adc:	f023 0310 	bic.w	r3, r3, #16
 8005ae0:	627b      	str	r3, [r7, #36]	@ 0x24
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	330c      	adds	r3, #12
 8005ae8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005aea:	623a      	str	r2, [r7, #32]
 8005aec:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aee:	69f9      	ldr	r1, [r7, #28]
 8005af0:	6a3a      	ldr	r2, [r7, #32]
 8005af2:	e841 2300 	strex	r3, r2, [r1]
 8005af6:	61bb      	str	r3, [r7, #24]
   return(result);
 8005af8:	69bb      	ldr	r3, [r7, #24]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d1e5      	bne.n	8005aca <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f003 0310 	and.w	r3, r3, #16
 8005b08:	2b10      	cmp	r3, #16
 8005b0a:	d10a      	bne.n	8005b22 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	60fb      	str	r3, [r7, #12]
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	60fb      	str	r3, [r7, #12]
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	685b      	ldr	r3, [r3, #4]
 8005b1e:	60fb      	str	r3, [r7, #12]
 8005b20:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005b26:	4619      	mov	r1, r3
 8005b28:	6878      	ldr	r0, [r7, #4]
 8005b2a:	f7ff fc4f 	bl	80053cc <HAL_UARTEx_RxEventCallback>
 8005b2e:	e002      	b.n	8005b36 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005b30:	6878      	ldr	r0, [r7, #4]
 8005b32:	f7fb fe3f 	bl	80017b4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005b36:	2300      	movs	r3, #0
 8005b38:	e002      	b.n	8005b40 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	e000      	b.n	8005b40 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005b3e:	2302      	movs	r3, #2
  }
}
 8005b40:	4618      	mov	r0, r3
 8005b42:	3730      	adds	r7, #48	@ 0x30
 8005b44:	46bd      	mov	sp, r7
 8005b46:	bd80      	pop	{r7, pc}

08005b48 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b084      	sub	sp, #16
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	691b      	ldr	r3, [r3, #16]
 8005b56:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	68da      	ldr	r2, [r3, #12]
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	430a      	orrs	r2, r1
 8005b64:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	689a      	ldr	r2, [r3, #8]
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	691b      	ldr	r3, [r3, #16]
 8005b6e:	431a      	orrs	r2, r3
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	695b      	ldr	r3, [r3, #20]
 8005b74:	4313      	orrs	r3, r2
 8005b76:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	68db      	ldr	r3, [r3, #12]
 8005b7e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8005b82:	f023 030c 	bic.w	r3, r3, #12
 8005b86:	687a      	ldr	r2, [r7, #4]
 8005b88:	6812      	ldr	r2, [r2, #0]
 8005b8a:	68b9      	ldr	r1, [r7, #8]
 8005b8c:	430b      	orrs	r3, r1
 8005b8e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	695b      	ldr	r3, [r3, #20]
 8005b96:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	699a      	ldr	r2, [r3, #24]
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	430a      	orrs	r2, r1
 8005ba4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	4a2c      	ldr	r2, [pc, #176]	@ (8005c5c <UART_SetConfig+0x114>)
 8005bac:	4293      	cmp	r3, r2
 8005bae:	d103      	bne.n	8005bb8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005bb0:	f7fe fb10 	bl	80041d4 <HAL_RCC_GetPCLK2Freq>
 8005bb4:	60f8      	str	r0, [r7, #12]
 8005bb6:	e002      	b.n	8005bbe <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005bb8:	f7fe faf8 	bl	80041ac <HAL_RCC_GetPCLK1Freq>
 8005bbc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005bbe:	68fa      	ldr	r2, [r7, #12]
 8005bc0:	4613      	mov	r3, r2
 8005bc2:	009b      	lsls	r3, r3, #2
 8005bc4:	4413      	add	r3, r2
 8005bc6:	009a      	lsls	r2, r3, #2
 8005bc8:	441a      	add	r2, r3
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	685b      	ldr	r3, [r3, #4]
 8005bce:	009b      	lsls	r3, r3, #2
 8005bd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bd4:	4a22      	ldr	r2, [pc, #136]	@ (8005c60 <UART_SetConfig+0x118>)
 8005bd6:	fba2 2303 	umull	r2, r3, r2, r3
 8005bda:	095b      	lsrs	r3, r3, #5
 8005bdc:	0119      	lsls	r1, r3, #4
 8005bde:	68fa      	ldr	r2, [r7, #12]
 8005be0:	4613      	mov	r3, r2
 8005be2:	009b      	lsls	r3, r3, #2
 8005be4:	4413      	add	r3, r2
 8005be6:	009a      	lsls	r2, r3, #2
 8005be8:	441a      	add	r2, r3
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	685b      	ldr	r3, [r3, #4]
 8005bee:	009b      	lsls	r3, r3, #2
 8005bf0:	fbb2 f2f3 	udiv	r2, r2, r3
 8005bf4:	4b1a      	ldr	r3, [pc, #104]	@ (8005c60 <UART_SetConfig+0x118>)
 8005bf6:	fba3 0302 	umull	r0, r3, r3, r2
 8005bfa:	095b      	lsrs	r3, r3, #5
 8005bfc:	2064      	movs	r0, #100	@ 0x64
 8005bfe:	fb00 f303 	mul.w	r3, r0, r3
 8005c02:	1ad3      	subs	r3, r2, r3
 8005c04:	011b      	lsls	r3, r3, #4
 8005c06:	3332      	adds	r3, #50	@ 0x32
 8005c08:	4a15      	ldr	r2, [pc, #84]	@ (8005c60 <UART_SetConfig+0x118>)
 8005c0a:	fba2 2303 	umull	r2, r3, r2, r3
 8005c0e:	095b      	lsrs	r3, r3, #5
 8005c10:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005c14:	4419      	add	r1, r3
 8005c16:	68fa      	ldr	r2, [r7, #12]
 8005c18:	4613      	mov	r3, r2
 8005c1a:	009b      	lsls	r3, r3, #2
 8005c1c:	4413      	add	r3, r2
 8005c1e:	009a      	lsls	r2, r3, #2
 8005c20:	441a      	add	r2, r3
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	685b      	ldr	r3, [r3, #4]
 8005c26:	009b      	lsls	r3, r3, #2
 8005c28:	fbb2 f2f3 	udiv	r2, r2, r3
 8005c2c:	4b0c      	ldr	r3, [pc, #48]	@ (8005c60 <UART_SetConfig+0x118>)
 8005c2e:	fba3 0302 	umull	r0, r3, r3, r2
 8005c32:	095b      	lsrs	r3, r3, #5
 8005c34:	2064      	movs	r0, #100	@ 0x64
 8005c36:	fb00 f303 	mul.w	r3, r0, r3
 8005c3a:	1ad3      	subs	r3, r2, r3
 8005c3c:	011b      	lsls	r3, r3, #4
 8005c3e:	3332      	adds	r3, #50	@ 0x32
 8005c40:	4a07      	ldr	r2, [pc, #28]	@ (8005c60 <UART_SetConfig+0x118>)
 8005c42:	fba2 2303 	umull	r2, r3, r2, r3
 8005c46:	095b      	lsrs	r3, r3, #5
 8005c48:	f003 020f 	and.w	r2, r3, #15
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	440a      	add	r2, r1
 8005c52:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005c54:	bf00      	nop
 8005c56:	3710      	adds	r7, #16
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	bd80      	pop	{r7, pc}
 8005c5c:	40013800 	.word	0x40013800
 8005c60:	51eb851f 	.word	0x51eb851f

08005c64 <__cvt>:
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c6a:	461d      	mov	r5, r3
 8005c6c:	bfbb      	ittet	lt
 8005c6e:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8005c72:	461d      	movlt	r5, r3
 8005c74:	2300      	movge	r3, #0
 8005c76:	232d      	movlt	r3, #45	@ 0x2d
 8005c78:	b088      	sub	sp, #32
 8005c7a:	4614      	mov	r4, r2
 8005c7c:	bfb8      	it	lt
 8005c7e:	4614      	movlt	r4, r2
 8005c80:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8005c82:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8005c84:	7013      	strb	r3, [r2, #0]
 8005c86:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005c88:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8005c8c:	f023 0820 	bic.w	r8, r3, #32
 8005c90:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005c94:	d005      	beq.n	8005ca2 <__cvt+0x3e>
 8005c96:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005c9a:	d100      	bne.n	8005c9e <__cvt+0x3a>
 8005c9c:	3601      	adds	r6, #1
 8005c9e:	2302      	movs	r3, #2
 8005ca0:	e000      	b.n	8005ca4 <__cvt+0x40>
 8005ca2:	2303      	movs	r3, #3
 8005ca4:	aa07      	add	r2, sp, #28
 8005ca6:	9204      	str	r2, [sp, #16]
 8005ca8:	aa06      	add	r2, sp, #24
 8005caa:	e9cd a202 	strd	sl, r2, [sp, #8]
 8005cae:	e9cd 3600 	strd	r3, r6, [sp]
 8005cb2:	4622      	mov	r2, r4
 8005cb4:	462b      	mov	r3, r5
 8005cb6:	f001 f98f 	bl	8006fd8 <_dtoa_r>
 8005cba:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005cbe:	4607      	mov	r7, r0
 8005cc0:	d119      	bne.n	8005cf6 <__cvt+0x92>
 8005cc2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8005cc4:	07db      	lsls	r3, r3, #31
 8005cc6:	d50e      	bpl.n	8005ce6 <__cvt+0x82>
 8005cc8:	eb00 0906 	add.w	r9, r0, r6
 8005ccc:	2200      	movs	r2, #0
 8005cce:	2300      	movs	r3, #0
 8005cd0:	4620      	mov	r0, r4
 8005cd2:	4629      	mov	r1, r5
 8005cd4:	f7fa fe68 	bl	80009a8 <__aeabi_dcmpeq>
 8005cd8:	b108      	cbz	r0, 8005cde <__cvt+0x7a>
 8005cda:	f8cd 901c 	str.w	r9, [sp, #28]
 8005cde:	2230      	movs	r2, #48	@ 0x30
 8005ce0:	9b07      	ldr	r3, [sp, #28]
 8005ce2:	454b      	cmp	r3, r9
 8005ce4:	d31e      	bcc.n	8005d24 <__cvt+0xc0>
 8005ce6:	4638      	mov	r0, r7
 8005ce8:	9b07      	ldr	r3, [sp, #28]
 8005cea:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8005cec:	1bdb      	subs	r3, r3, r7
 8005cee:	6013      	str	r3, [r2, #0]
 8005cf0:	b008      	add	sp, #32
 8005cf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005cf6:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005cfa:	eb00 0906 	add.w	r9, r0, r6
 8005cfe:	d1e5      	bne.n	8005ccc <__cvt+0x68>
 8005d00:	7803      	ldrb	r3, [r0, #0]
 8005d02:	2b30      	cmp	r3, #48	@ 0x30
 8005d04:	d10a      	bne.n	8005d1c <__cvt+0xb8>
 8005d06:	2200      	movs	r2, #0
 8005d08:	2300      	movs	r3, #0
 8005d0a:	4620      	mov	r0, r4
 8005d0c:	4629      	mov	r1, r5
 8005d0e:	f7fa fe4b 	bl	80009a8 <__aeabi_dcmpeq>
 8005d12:	b918      	cbnz	r0, 8005d1c <__cvt+0xb8>
 8005d14:	f1c6 0601 	rsb	r6, r6, #1
 8005d18:	f8ca 6000 	str.w	r6, [sl]
 8005d1c:	f8da 3000 	ldr.w	r3, [sl]
 8005d20:	4499      	add	r9, r3
 8005d22:	e7d3      	b.n	8005ccc <__cvt+0x68>
 8005d24:	1c59      	adds	r1, r3, #1
 8005d26:	9107      	str	r1, [sp, #28]
 8005d28:	701a      	strb	r2, [r3, #0]
 8005d2a:	e7d9      	b.n	8005ce0 <__cvt+0x7c>

08005d2c <__exponent>:
 8005d2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005d2e:	2900      	cmp	r1, #0
 8005d30:	bfb6      	itet	lt
 8005d32:	232d      	movlt	r3, #45	@ 0x2d
 8005d34:	232b      	movge	r3, #43	@ 0x2b
 8005d36:	4249      	neglt	r1, r1
 8005d38:	2909      	cmp	r1, #9
 8005d3a:	7002      	strb	r2, [r0, #0]
 8005d3c:	7043      	strb	r3, [r0, #1]
 8005d3e:	dd29      	ble.n	8005d94 <__exponent+0x68>
 8005d40:	f10d 0307 	add.w	r3, sp, #7
 8005d44:	461d      	mov	r5, r3
 8005d46:	270a      	movs	r7, #10
 8005d48:	fbb1 f6f7 	udiv	r6, r1, r7
 8005d4c:	461a      	mov	r2, r3
 8005d4e:	fb07 1416 	mls	r4, r7, r6, r1
 8005d52:	3430      	adds	r4, #48	@ 0x30
 8005d54:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005d58:	460c      	mov	r4, r1
 8005d5a:	2c63      	cmp	r4, #99	@ 0x63
 8005d5c:	4631      	mov	r1, r6
 8005d5e:	f103 33ff 	add.w	r3, r3, #4294967295
 8005d62:	dcf1      	bgt.n	8005d48 <__exponent+0x1c>
 8005d64:	3130      	adds	r1, #48	@ 0x30
 8005d66:	1e94      	subs	r4, r2, #2
 8005d68:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005d6c:	4623      	mov	r3, r4
 8005d6e:	1c41      	adds	r1, r0, #1
 8005d70:	42ab      	cmp	r3, r5
 8005d72:	d30a      	bcc.n	8005d8a <__exponent+0x5e>
 8005d74:	f10d 0309 	add.w	r3, sp, #9
 8005d78:	1a9b      	subs	r3, r3, r2
 8005d7a:	42ac      	cmp	r4, r5
 8005d7c:	bf88      	it	hi
 8005d7e:	2300      	movhi	r3, #0
 8005d80:	3302      	adds	r3, #2
 8005d82:	4403      	add	r3, r0
 8005d84:	1a18      	subs	r0, r3, r0
 8005d86:	b003      	add	sp, #12
 8005d88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005d8a:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005d8e:	f801 6f01 	strb.w	r6, [r1, #1]!
 8005d92:	e7ed      	b.n	8005d70 <__exponent+0x44>
 8005d94:	2330      	movs	r3, #48	@ 0x30
 8005d96:	3130      	adds	r1, #48	@ 0x30
 8005d98:	7083      	strb	r3, [r0, #2]
 8005d9a:	70c1      	strb	r1, [r0, #3]
 8005d9c:	1d03      	adds	r3, r0, #4
 8005d9e:	e7f1      	b.n	8005d84 <__exponent+0x58>

08005da0 <_printf_float>:
 8005da0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005da4:	b091      	sub	sp, #68	@ 0x44
 8005da6:	460c      	mov	r4, r1
 8005da8:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8005dac:	4616      	mov	r6, r2
 8005dae:	461f      	mov	r7, r3
 8005db0:	4605      	mov	r5, r0
 8005db2:	f000 fffd 	bl	8006db0 <_localeconv_r>
 8005db6:	6803      	ldr	r3, [r0, #0]
 8005db8:	4618      	mov	r0, r3
 8005dba:	9308      	str	r3, [sp, #32]
 8005dbc:	f7fa f9c8 	bl	8000150 <strlen>
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	930e      	str	r3, [sp, #56]	@ 0x38
 8005dc4:	f8d8 3000 	ldr.w	r3, [r8]
 8005dc8:	9009      	str	r0, [sp, #36]	@ 0x24
 8005dca:	3307      	adds	r3, #7
 8005dcc:	f023 0307 	bic.w	r3, r3, #7
 8005dd0:	f103 0208 	add.w	r2, r3, #8
 8005dd4:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005dd8:	f8d4 b000 	ldr.w	fp, [r4]
 8005ddc:	f8c8 2000 	str.w	r2, [r8]
 8005de0:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005de4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005de8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005dea:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8005dee:	f04f 32ff 	mov.w	r2, #4294967295
 8005df2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005df6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8005dfa:	4b9c      	ldr	r3, [pc, #624]	@ (800606c <_printf_float+0x2cc>)
 8005dfc:	f7fa fe06 	bl	8000a0c <__aeabi_dcmpun>
 8005e00:	bb70      	cbnz	r0, 8005e60 <_printf_float+0xc0>
 8005e02:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005e06:	f04f 32ff 	mov.w	r2, #4294967295
 8005e0a:	4b98      	ldr	r3, [pc, #608]	@ (800606c <_printf_float+0x2cc>)
 8005e0c:	f7fa fde0 	bl	80009d0 <__aeabi_dcmple>
 8005e10:	bb30      	cbnz	r0, 8005e60 <_printf_float+0xc0>
 8005e12:	2200      	movs	r2, #0
 8005e14:	2300      	movs	r3, #0
 8005e16:	4640      	mov	r0, r8
 8005e18:	4649      	mov	r1, r9
 8005e1a:	f7fa fdcf 	bl	80009bc <__aeabi_dcmplt>
 8005e1e:	b110      	cbz	r0, 8005e26 <_printf_float+0x86>
 8005e20:	232d      	movs	r3, #45	@ 0x2d
 8005e22:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005e26:	4a92      	ldr	r2, [pc, #584]	@ (8006070 <_printf_float+0x2d0>)
 8005e28:	4b92      	ldr	r3, [pc, #584]	@ (8006074 <_printf_float+0x2d4>)
 8005e2a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8005e2e:	bf94      	ite	ls
 8005e30:	4690      	movls	r8, r2
 8005e32:	4698      	movhi	r8, r3
 8005e34:	2303      	movs	r3, #3
 8005e36:	f04f 0900 	mov.w	r9, #0
 8005e3a:	6123      	str	r3, [r4, #16]
 8005e3c:	f02b 0304 	bic.w	r3, fp, #4
 8005e40:	6023      	str	r3, [r4, #0]
 8005e42:	4633      	mov	r3, r6
 8005e44:	4621      	mov	r1, r4
 8005e46:	4628      	mov	r0, r5
 8005e48:	9700      	str	r7, [sp, #0]
 8005e4a:	aa0f      	add	r2, sp, #60	@ 0x3c
 8005e4c:	f000 f9d4 	bl	80061f8 <_printf_common>
 8005e50:	3001      	adds	r0, #1
 8005e52:	f040 8090 	bne.w	8005f76 <_printf_float+0x1d6>
 8005e56:	f04f 30ff 	mov.w	r0, #4294967295
 8005e5a:	b011      	add	sp, #68	@ 0x44
 8005e5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e60:	4642      	mov	r2, r8
 8005e62:	464b      	mov	r3, r9
 8005e64:	4640      	mov	r0, r8
 8005e66:	4649      	mov	r1, r9
 8005e68:	f7fa fdd0 	bl	8000a0c <__aeabi_dcmpun>
 8005e6c:	b148      	cbz	r0, 8005e82 <_printf_float+0xe2>
 8005e6e:	464b      	mov	r3, r9
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	bfb8      	it	lt
 8005e74:	232d      	movlt	r3, #45	@ 0x2d
 8005e76:	4a80      	ldr	r2, [pc, #512]	@ (8006078 <_printf_float+0x2d8>)
 8005e78:	bfb8      	it	lt
 8005e7a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8005e7e:	4b7f      	ldr	r3, [pc, #508]	@ (800607c <_printf_float+0x2dc>)
 8005e80:	e7d3      	b.n	8005e2a <_printf_float+0x8a>
 8005e82:	6863      	ldr	r3, [r4, #4]
 8005e84:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8005e88:	1c5a      	adds	r2, r3, #1
 8005e8a:	d13f      	bne.n	8005f0c <_printf_float+0x16c>
 8005e8c:	2306      	movs	r3, #6
 8005e8e:	6063      	str	r3, [r4, #4]
 8005e90:	2200      	movs	r2, #0
 8005e92:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8005e96:	6023      	str	r3, [r4, #0]
 8005e98:	9206      	str	r2, [sp, #24]
 8005e9a:	aa0e      	add	r2, sp, #56	@ 0x38
 8005e9c:	e9cd a204 	strd	sl, r2, [sp, #16]
 8005ea0:	aa0d      	add	r2, sp, #52	@ 0x34
 8005ea2:	9203      	str	r2, [sp, #12]
 8005ea4:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8005ea8:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8005eac:	6863      	ldr	r3, [r4, #4]
 8005eae:	4642      	mov	r2, r8
 8005eb0:	9300      	str	r3, [sp, #0]
 8005eb2:	4628      	mov	r0, r5
 8005eb4:	464b      	mov	r3, r9
 8005eb6:	910a      	str	r1, [sp, #40]	@ 0x28
 8005eb8:	f7ff fed4 	bl	8005c64 <__cvt>
 8005ebc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005ebe:	4680      	mov	r8, r0
 8005ec0:	2947      	cmp	r1, #71	@ 0x47
 8005ec2:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8005ec4:	d128      	bne.n	8005f18 <_printf_float+0x178>
 8005ec6:	1cc8      	adds	r0, r1, #3
 8005ec8:	db02      	blt.n	8005ed0 <_printf_float+0x130>
 8005eca:	6863      	ldr	r3, [r4, #4]
 8005ecc:	4299      	cmp	r1, r3
 8005ece:	dd40      	ble.n	8005f52 <_printf_float+0x1b2>
 8005ed0:	f1aa 0a02 	sub.w	sl, sl, #2
 8005ed4:	fa5f fa8a 	uxtb.w	sl, sl
 8005ed8:	4652      	mov	r2, sl
 8005eda:	3901      	subs	r1, #1
 8005edc:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005ee0:	910d      	str	r1, [sp, #52]	@ 0x34
 8005ee2:	f7ff ff23 	bl	8005d2c <__exponent>
 8005ee6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005ee8:	4681      	mov	r9, r0
 8005eea:	1813      	adds	r3, r2, r0
 8005eec:	2a01      	cmp	r2, #1
 8005eee:	6123      	str	r3, [r4, #16]
 8005ef0:	dc02      	bgt.n	8005ef8 <_printf_float+0x158>
 8005ef2:	6822      	ldr	r2, [r4, #0]
 8005ef4:	07d2      	lsls	r2, r2, #31
 8005ef6:	d501      	bpl.n	8005efc <_printf_float+0x15c>
 8005ef8:	3301      	adds	r3, #1
 8005efa:	6123      	str	r3, [r4, #16]
 8005efc:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d09e      	beq.n	8005e42 <_printf_float+0xa2>
 8005f04:	232d      	movs	r3, #45	@ 0x2d
 8005f06:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005f0a:	e79a      	b.n	8005e42 <_printf_float+0xa2>
 8005f0c:	2947      	cmp	r1, #71	@ 0x47
 8005f0e:	d1bf      	bne.n	8005e90 <_printf_float+0xf0>
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d1bd      	bne.n	8005e90 <_printf_float+0xf0>
 8005f14:	2301      	movs	r3, #1
 8005f16:	e7ba      	b.n	8005e8e <_printf_float+0xee>
 8005f18:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005f1c:	d9dc      	bls.n	8005ed8 <_printf_float+0x138>
 8005f1e:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005f22:	d118      	bne.n	8005f56 <_printf_float+0x1b6>
 8005f24:	2900      	cmp	r1, #0
 8005f26:	6863      	ldr	r3, [r4, #4]
 8005f28:	dd0b      	ble.n	8005f42 <_printf_float+0x1a2>
 8005f2a:	6121      	str	r1, [r4, #16]
 8005f2c:	b913      	cbnz	r3, 8005f34 <_printf_float+0x194>
 8005f2e:	6822      	ldr	r2, [r4, #0]
 8005f30:	07d0      	lsls	r0, r2, #31
 8005f32:	d502      	bpl.n	8005f3a <_printf_float+0x19a>
 8005f34:	3301      	adds	r3, #1
 8005f36:	440b      	add	r3, r1
 8005f38:	6123      	str	r3, [r4, #16]
 8005f3a:	f04f 0900 	mov.w	r9, #0
 8005f3e:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005f40:	e7dc      	b.n	8005efc <_printf_float+0x15c>
 8005f42:	b913      	cbnz	r3, 8005f4a <_printf_float+0x1aa>
 8005f44:	6822      	ldr	r2, [r4, #0]
 8005f46:	07d2      	lsls	r2, r2, #31
 8005f48:	d501      	bpl.n	8005f4e <_printf_float+0x1ae>
 8005f4a:	3302      	adds	r3, #2
 8005f4c:	e7f4      	b.n	8005f38 <_printf_float+0x198>
 8005f4e:	2301      	movs	r3, #1
 8005f50:	e7f2      	b.n	8005f38 <_printf_float+0x198>
 8005f52:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005f56:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005f58:	4299      	cmp	r1, r3
 8005f5a:	db05      	blt.n	8005f68 <_printf_float+0x1c8>
 8005f5c:	6823      	ldr	r3, [r4, #0]
 8005f5e:	6121      	str	r1, [r4, #16]
 8005f60:	07d8      	lsls	r0, r3, #31
 8005f62:	d5ea      	bpl.n	8005f3a <_printf_float+0x19a>
 8005f64:	1c4b      	adds	r3, r1, #1
 8005f66:	e7e7      	b.n	8005f38 <_printf_float+0x198>
 8005f68:	2900      	cmp	r1, #0
 8005f6a:	bfcc      	ite	gt
 8005f6c:	2201      	movgt	r2, #1
 8005f6e:	f1c1 0202 	rsble	r2, r1, #2
 8005f72:	4413      	add	r3, r2
 8005f74:	e7e0      	b.n	8005f38 <_printf_float+0x198>
 8005f76:	6823      	ldr	r3, [r4, #0]
 8005f78:	055a      	lsls	r2, r3, #21
 8005f7a:	d407      	bmi.n	8005f8c <_printf_float+0x1ec>
 8005f7c:	6923      	ldr	r3, [r4, #16]
 8005f7e:	4642      	mov	r2, r8
 8005f80:	4631      	mov	r1, r6
 8005f82:	4628      	mov	r0, r5
 8005f84:	47b8      	blx	r7
 8005f86:	3001      	adds	r0, #1
 8005f88:	d12b      	bne.n	8005fe2 <_printf_float+0x242>
 8005f8a:	e764      	b.n	8005e56 <_printf_float+0xb6>
 8005f8c:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005f90:	f240 80dc 	bls.w	800614c <_printf_float+0x3ac>
 8005f94:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005f98:	2200      	movs	r2, #0
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	f7fa fd04 	bl	80009a8 <__aeabi_dcmpeq>
 8005fa0:	2800      	cmp	r0, #0
 8005fa2:	d033      	beq.n	800600c <_printf_float+0x26c>
 8005fa4:	2301      	movs	r3, #1
 8005fa6:	4631      	mov	r1, r6
 8005fa8:	4628      	mov	r0, r5
 8005faa:	4a35      	ldr	r2, [pc, #212]	@ (8006080 <_printf_float+0x2e0>)
 8005fac:	47b8      	blx	r7
 8005fae:	3001      	adds	r0, #1
 8005fb0:	f43f af51 	beq.w	8005e56 <_printf_float+0xb6>
 8005fb4:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8005fb8:	4543      	cmp	r3, r8
 8005fba:	db02      	blt.n	8005fc2 <_printf_float+0x222>
 8005fbc:	6823      	ldr	r3, [r4, #0]
 8005fbe:	07d8      	lsls	r0, r3, #31
 8005fc0:	d50f      	bpl.n	8005fe2 <_printf_float+0x242>
 8005fc2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005fc6:	4631      	mov	r1, r6
 8005fc8:	4628      	mov	r0, r5
 8005fca:	47b8      	blx	r7
 8005fcc:	3001      	adds	r0, #1
 8005fce:	f43f af42 	beq.w	8005e56 <_printf_float+0xb6>
 8005fd2:	f04f 0900 	mov.w	r9, #0
 8005fd6:	f108 38ff 	add.w	r8, r8, #4294967295
 8005fda:	f104 0a1a 	add.w	sl, r4, #26
 8005fde:	45c8      	cmp	r8, r9
 8005fe0:	dc09      	bgt.n	8005ff6 <_printf_float+0x256>
 8005fe2:	6823      	ldr	r3, [r4, #0]
 8005fe4:	079b      	lsls	r3, r3, #30
 8005fe6:	f100 8102 	bmi.w	80061ee <_printf_float+0x44e>
 8005fea:	68e0      	ldr	r0, [r4, #12]
 8005fec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005fee:	4298      	cmp	r0, r3
 8005ff0:	bfb8      	it	lt
 8005ff2:	4618      	movlt	r0, r3
 8005ff4:	e731      	b.n	8005e5a <_printf_float+0xba>
 8005ff6:	2301      	movs	r3, #1
 8005ff8:	4652      	mov	r2, sl
 8005ffa:	4631      	mov	r1, r6
 8005ffc:	4628      	mov	r0, r5
 8005ffe:	47b8      	blx	r7
 8006000:	3001      	adds	r0, #1
 8006002:	f43f af28 	beq.w	8005e56 <_printf_float+0xb6>
 8006006:	f109 0901 	add.w	r9, r9, #1
 800600a:	e7e8      	b.n	8005fde <_printf_float+0x23e>
 800600c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800600e:	2b00      	cmp	r3, #0
 8006010:	dc38      	bgt.n	8006084 <_printf_float+0x2e4>
 8006012:	2301      	movs	r3, #1
 8006014:	4631      	mov	r1, r6
 8006016:	4628      	mov	r0, r5
 8006018:	4a19      	ldr	r2, [pc, #100]	@ (8006080 <_printf_float+0x2e0>)
 800601a:	47b8      	blx	r7
 800601c:	3001      	adds	r0, #1
 800601e:	f43f af1a 	beq.w	8005e56 <_printf_float+0xb6>
 8006022:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8006026:	ea59 0303 	orrs.w	r3, r9, r3
 800602a:	d102      	bne.n	8006032 <_printf_float+0x292>
 800602c:	6823      	ldr	r3, [r4, #0]
 800602e:	07d9      	lsls	r1, r3, #31
 8006030:	d5d7      	bpl.n	8005fe2 <_printf_float+0x242>
 8006032:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006036:	4631      	mov	r1, r6
 8006038:	4628      	mov	r0, r5
 800603a:	47b8      	blx	r7
 800603c:	3001      	adds	r0, #1
 800603e:	f43f af0a 	beq.w	8005e56 <_printf_float+0xb6>
 8006042:	f04f 0a00 	mov.w	sl, #0
 8006046:	f104 0b1a 	add.w	fp, r4, #26
 800604a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800604c:	425b      	negs	r3, r3
 800604e:	4553      	cmp	r3, sl
 8006050:	dc01      	bgt.n	8006056 <_printf_float+0x2b6>
 8006052:	464b      	mov	r3, r9
 8006054:	e793      	b.n	8005f7e <_printf_float+0x1de>
 8006056:	2301      	movs	r3, #1
 8006058:	465a      	mov	r2, fp
 800605a:	4631      	mov	r1, r6
 800605c:	4628      	mov	r0, r5
 800605e:	47b8      	blx	r7
 8006060:	3001      	adds	r0, #1
 8006062:	f43f aef8 	beq.w	8005e56 <_printf_float+0xb6>
 8006066:	f10a 0a01 	add.w	sl, sl, #1
 800606a:	e7ee      	b.n	800604a <_printf_float+0x2aa>
 800606c:	7fefffff 	.word	0x7fefffff
 8006070:	0800adce 	.word	0x0800adce
 8006074:	0800add2 	.word	0x0800add2
 8006078:	0800add6 	.word	0x0800add6
 800607c:	0800adda 	.word	0x0800adda
 8006080:	0800adde 	.word	0x0800adde
 8006084:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006086:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800608a:	4553      	cmp	r3, sl
 800608c:	bfa8      	it	ge
 800608e:	4653      	movge	r3, sl
 8006090:	2b00      	cmp	r3, #0
 8006092:	4699      	mov	r9, r3
 8006094:	dc36      	bgt.n	8006104 <_printf_float+0x364>
 8006096:	f04f 0b00 	mov.w	fp, #0
 800609a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800609e:	f104 021a 	add.w	r2, r4, #26
 80060a2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80060a4:	930a      	str	r3, [sp, #40]	@ 0x28
 80060a6:	eba3 0309 	sub.w	r3, r3, r9
 80060aa:	455b      	cmp	r3, fp
 80060ac:	dc31      	bgt.n	8006112 <_printf_float+0x372>
 80060ae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80060b0:	459a      	cmp	sl, r3
 80060b2:	dc3a      	bgt.n	800612a <_printf_float+0x38a>
 80060b4:	6823      	ldr	r3, [r4, #0]
 80060b6:	07da      	lsls	r2, r3, #31
 80060b8:	d437      	bmi.n	800612a <_printf_float+0x38a>
 80060ba:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80060bc:	ebaa 0903 	sub.w	r9, sl, r3
 80060c0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80060c2:	ebaa 0303 	sub.w	r3, sl, r3
 80060c6:	4599      	cmp	r9, r3
 80060c8:	bfa8      	it	ge
 80060ca:	4699      	movge	r9, r3
 80060cc:	f1b9 0f00 	cmp.w	r9, #0
 80060d0:	dc33      	bgt.n	800613a <_printf_float+0x39a>
 80060d2:	f04f 0800 	mov.w	r8, #0
 80060d6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80060da:	f104 0b1a 	add.w	fp, r4, #26
 80060de:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80060e0:	ebaa 0303 	sub.w	r3, sl, r3
 80060e4:	eba3 0309 	sub.w	r3, r3, r9
 80060e8:	4543      	cmp	r3, r8
 80060ea:	f77f af7a 	ble.w	8005fe2 <_printf_float+0x242>
 80060ee:	2301      	movs	r3, #1
 80060f0:	465a      	mov	r2, fp
 80060f2:	4631      	mov	r1, r6
 80060f4:	4628      	mov	r0, r5
 80060f6:	47b8      	blx	r7
 80060f8:	3001      	adds	r0, #1
 80060fa:	f43f aeac 	beq.w	8005e56 <_printf_float+0xb6>
 80060fe:	f108 0801 	add.w	r8, r8, #1
 8006102:	e7ec      	b.n	80060de <_printf_float+0x33e>
 8006104:	4642      	mov	r2, r8
 8006106:	4631      	mov	r1, r6
 8006108:	4628      	mov	r0, r5
 800610a:	47b8      	blx	r7
 800610c:	3001      	adds	r0, #1
 800610e:	d1c2      	bne.n	8006096 <_printf_float+0x2f6>
 8006110:	e6a1      	b.n	8005e56 <_printf_float+0xb6>
 8006112:	2301      	movs	r3, #1
 8006114:	4631      	mov	r1, r6
 8006116:	4628      	mov	r0, r5
 8006118:	920a      	str	r2, [sp, #40]	@ 0x28
 800611a:	47b8      	blx	r7
 800611c:	3001      	adds	r0, #1
 800611e:	f43f ae9a 	beq.w	8005e56 <_printf_float+0xb6>
 8006122:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006124:	f10b 0b01 	add.w	fp, fp, #1
 8006128:	e7bb      	b.n	80060a2 <_printf_float+0x302>
 800612a:	4631      	mov	r1, r6
 800612c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006130:	4628      	mov	r0, r5
 8006132:	47b8      	blx	r7
 8006134:	3001      	adds	r0, #1
 8006136:	d1c0      	bne.n	80060ba <_printf_float+0x31a>
 8006138:	e68d      	b.n	8005e56 <_printf_float+0xb6>
 800613a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800613c:	464b      	mov	r3, r9
 800613e:	4631      	mov	r1, r6
 8006140:	4628      	mov	r0, r5
 8006142:	4442      	add	r2, r8
 8006144:	47b8      	blx	r7
 8006146:	3001      	adds	r0, #1
 8006148:	d1c3      	bne.n	80060d2 <_printf_float+0x332>
 800614a:	e684      	b.n	8005e56 <_printf_float+0xb6>
 800614c:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8006150:	f1ba 0f01 	cmp.w	sl, #1
 8006154:	dc01      	bgt.n	800615a <_printf_float+0x3ba>
 8006156:	07db      	lsls	r3, r3, #31
 8006158:	d536      	bpl.n	80061c8 <_printf_float+0x428>
 800615a:	2301      	movs	r3, #1
 800615c:	4642      	mov	r2, r8
 800615e:	4631      	mov	r1, r6
 8006160:	4628      	mov	r0, r5
 8006162:	47b8      	blx	r7
 8006164:	3001      	adds	r0, #1
 8006166:	f43f ae76 	beq.w	8005e56 <_printf_float+0xb6>
 800616a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800616e:	4631      	mov	r1, r6
 8006170:	4628      	mov	r0, r5
 8006172:	47b8      	blx	r7
 8006174:	3001      	adds	r0, #1
 8006176:	f43f ae6e 	beq.w	8005e56 <_printf_float+0xb6>
 800617a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800617e:	2200      	movs	r2, #0
 8006180:	2300      	movs	r3, #0
 8006182:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006186:	f7fa fc0f 	bl	80009a8 <__aeabi_dcmpeq>
 800618a:	b9c0      	cbnz	r0, 80061be <_printf_float+0x41e>
 800618c:	4653      	mov	r3, sl
 800618e:	f108 0201 	add.w	r2, r8, #1
 8006192:	4631      	mov	r1, r6
 8006194:	4628      	mov	r0, r5
 8006196:	47b8      	blx	r7
 8006198:	3001      	adds	r0, #1
 800619a:	d10c      	bne.n	80061b6 <_printf_float+0x416>
 800619c:	e65b      	b.n	8005e56 <_printf_float+0xb6>
 800619e:	2301      	movs	r3, #1
 80061a0:	465a      	mov	r2, fp
 80061a2:	4631      	mov	r1, r6
 80061a4:	4628      	mov	r0, r5
 80061a6:	47b8      	blx	r7
 80061a8:	3001      	adds	r0, #1
 80061aa:	f43f ae54 	beq.w	8005e56 <_printf_float+0xb6>
 80061ae:	f108 0801 	add.w	r8, r8, #1
 80061b2:	45d0      	cmp	r8, sl
 80061b4:	dbf3      	blt.n	800619e <_printf_float+0x3fe>
 80061b6:	464b      	mov	r3, r9
 80061b8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80061bc:	e6e0      	b.n	8005f80 <_printf_float+0x1e0>
 80061be:	f04f 0800 	mov.w	r8, #0
 80061c2:	f104 0b1a 	add.w	fp, r4, #26
 80061c6:	e7f4      	b.n	80061b2 <_printf_float+0x412>
 80061c8:	2301      	movs	r3, #1
 80061ca:	4642      	mov	r2, r8
 80061cc:	e7e1      	b.n	8006192 <_printf_float+0x3f2>
 80061ce:	2301      	movs	r3, #1
 80061d0:	464a      	mov	r2, r9
 80061d2:	4631      	mov	r1, r6
 80061d4:	4628      	mov	r0, r5
 80061d6:	47b8      	blx	r7
 80061d8:	3001      	adds	r0, #1
 80061da:	f43f ae3c 	beq.w	8005e56 <_printf_float+0xb6>
 80061de:	f108 0801 	add.w	r8, r8, #1
 80061e2:	68e3      	ldr	r3, [r4, #12]
 80061e4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80061e6:	1a5b      	subs	r3, r3, r1
 80061e8:	4543      	cmp	r3, r8
 80061ea:	dcf0      	bgt.n	80061ce <_printf_float+0x42e>
 80061ec:	e6fd      	b.n	8005fea <_printf_float+0x24a>
 80061ee:	f04f 0800 	mov.w	r8, #0
 80061f2:	f104 0919 	add.w	r9, r4, #25
 80061f6:	e7f4      	b.n	80061e2 <_printf_float+0x442>

080061f8 <_printf_common>:
 80061f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80061fc:	4616      	mov	r6, r2
 80061fe:	4698      	mov	r8, r3
 8006200:	688a      	ldr	r2, [r1, #8]
 8006202:	690b      	ldr	r3, [r1, #16]
 8006204:	4607      	mov	r7, r0
 8006206:	4293      	cmp	r3, r2
 8006208:	bfb8      	it	lt
 800620a:	4613      	movlt	r3, r2
 800620c:	6033      	str	r3, [r6, #0]
 800620e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006212:	460c      	mov	r4, r1
 8006214:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006218:	b10a      	cbz	r2, 800621e <_printf_common+0x26>
 800621a:	3301      	adds	r3, #1
 800621c:	6033      	str	r3, [r6, #0]
 800621e:	6823      	ldr	r3, [r4, #0]
 8006220:	0699      	lsls	r1, r3, #26
 8006222:	bf42      	ittt	mi
 8006224:	6833      	ldrmi	r3, [r6, #0]
 8006226:	3302      	addmi	r3, #2
 8006228:	6033      	strmi	r3, [r6, #0]
 800622a:	6825      	ldr	r5, [r4, #0]
 800622c:	f015 0506 	ands.w	r5, r5, #6
 8006230:	d106      	bne.n	8006240 <_printf_common+0x48>
 8006232:	f104 0a19 	add.w	sl, r4, #25
 8006236:	68e3      	ldr	r3, [r4, #12]
 8006238:	6832      	ldr	r2, [r6, #0]
 800623a:	1a9b      	subs	r3, r3, r2
 800623c:	42ab      	cmp	r3, r5
 800623e:	dc2b      	bgt.n	8006298 <_printf_common+0xa0>
 8006240:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006244:	6822      	ldr	r2, [r4, #0]
 8006246:	3b00      	subs	r3, #0
 8006248:	bf18      	it	ne
 800624a:	2301      	movne	r3, #1
 800624c:	0692      	lsls	r2, r2, #26
 800624e:	d430      	bmi.n	80062b2 <_printf_common+0xba>
 8006250:	4641      	mov	r1, r8
 8006252:	4638      	mov	r0, r7
 8006254:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006258:	47c8      	blx	r9
 800625a:	3001      	adds	r0, #1
 800625c:	d023      	beq.n	80062a6 <_printf_common+0xae>
 800625e:	6823      	ldr	r3, [r4, #0]
 8006260:	6922      	ldr	r2, [r4, #16]
 8006262:	f003 0306 	and.w	r3, r3, #6
 8006266:	2b04      	cmp	r3, #4
 8006268:	bf14      	ite	ne
 800626a:	2500      	movne	r5, #0
 800626c:	6833      	ldreq	r3, [r6, #0]
 800626e:	f04f 0600 	mov.w	r6, #0
 8006272:	bf08      	it	eq
 8006274:	68e5      	ldreq	r5, [r4, #12]
 8006276:	f104 041a 	add.w	r4, r4, #26
 800627a:	bf08      	it	eq
 800627c:	1aed      	subeq	r5, r5, r3
 800627e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8006282:	bf08      	it	eq
 8006284:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006288:	4293      	cmp	r3, r2
 800628a:	bfc4      	itt	gt
 800628c:	1a9b      	subgt	r3, r3, r2
 800628e:	18ed      	addgt	r5, r5, r3
 8006290:	42b5      	cmp	r5, r6
 8006292:	d11a      	bne.n	80062ca <_printf_common+0xd2>
 8006294:	2000      	movs	r0, #0
 8006296:	e008      	b.n	80062aa <_printf_common+0xb2>
 8006298:	2301      	movs	r3, #1
 800629a:	4652      	mov	r2, sl
 800629c:	4641      	mov	r1, r8
 800629e:	4638      	mov	r0, r7
 80062a0:	47c8      	blx	r9
 80062a2:	3001      	adds	r0, #1
 80062a4:	d103      	bne.n	80062ae <_printf_common+0xb6>
 80062a6:	f04f 30ff 	mov.w	r0, #4294967295
 80062aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062ae:	3501      	adds	r5, #1
 80062b0:	e7c1      	b.n	8006236 <_printf_common+0x3e>
 80062b2:	2030      	movs	r0, #48	@ 0x30
 80062b4:	18e1      	adds	r1, r4, r3
 80062b6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80062ba:	1c5a      	adds	r2, r3, #1
 80062bc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80062c0:	4422      	add	r2, r4
 80062c2:	3302      	adds	r3, #2
 80062c4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80062c8:	e7c2      	b.n	8006250 <_printf_common+0x58>
 80062ca:	2301      	movs	r3, #1
 80062cc:	4622      	mov	r2, r4
 80062ce:	4641      	mov	r1, r8
 80062d0:	4638      	mov	r0, r7
 80062d2:	47c8      	blx	r9
 80062d4:	3001      	adds	r0, #1
 80062d6:	d0e6      	beq.n	80062a6 <_printf_common+0xae>
 80062d8:	3601      	adds	r6, #1
 80062da:	e7d9      	b.n	8006290 <_printf_common+0x98>

080062dc <_printf_i>:
 80062dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80062e0:	7e0f      	ldrb	r7, [r1, #24]
 80062e2:	4691      	mov	r9, r2
 80062e4:	2f78      	cmp	r7, #120	@ 0x78
 80062e6:	4680      	mov	r8, r0
 80062e8:	460c      	mov	r4, r1
 80062ea:	469a      	mov	sl, r3
 80062ec:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80062ee:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80062f2:	d807      	bhi.n	8006304 <_printf_i+0x28>
 80062f4:	2f62      	cmp	r7, #98	@ 0x62
 80062f6:	d80a      	bhi.n	800630e <_printf_i+0x32>
 80062f8:	2f00      	cmp	r7, #0
 80062fa:	f000 80d3 	beq.w	80064a4 <_printf_i+0x1c8>
 80062fe:	2f58      	cmp	r7, #88	@ 0x58
 8006300:	f000 80ba 	beq.w	8006478 <_printf_i+0x19c>
 8006304:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006308:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800630c:	e03a      	b.n	8006384 <_printf_i+0xa8>
 800630e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006312:	2b15      	cmp	r3, #21
 8006314:	d8f6      	bhi.n	8006304 <_printf_i+0x28>
 8006316:	a101      	add	r1, pc, #4	@ (adr r1, 800631c <_printf_i+0x40>)
 8006318:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800631c:	08006375 	.word	0x08006375
 8006320:	08006389 	.word	0x08006389
 8006324:	08006305 	.word	0x08006305
 8006328:	08006305 	.word	0x08006305
 800632c:	08006305 	.word	0x08006305
 8006330:	08006305 	.word	0x08006305
 8006334:	08006389 	.word	0x08006389
 8006338:	08006305 	.word	0x08006305
 800633c:	08006305 	.word	0x08006305
 8006340:	08006305 	.word	0x08006305
 8006344:	08006305 	.word	0x08006305
 8006348:	0800648b 	.word	0x0800648b
 800634c:	080063b3 	.word	0x080063b3
 8006350:	08006445 	.word	0x08006445
 8006354:	08006305 	.word	0x08006305
 8006358:	08006305 	.word	0x08006305
 800635c:	080064ad 	.word	0x080064ad
 8006360:	08006305 	.word	0x08006305
 8006364:	080063b3 	.word	0x080063b3
 8006368:	08006305 	.word	0x08006305
 800636c:	08006305 	.word	0x08006305
 8006370:	0800644d 	.word	0x0800644d
 8006374:	6833      	ldr	r3, [r6, #0]
 8006376:	1d1a      	adds	r2, r3, #4
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	6032      	str	r2, [r6, #0]
 800637c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006380:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006384:	2301      	movs	r3, #1
 8006386:	e09e      	b.n	80064c6 <_printf_i+0x1ea>
 8006388:	6833      	ldr	r3, [r6, #0]
 800638a:	6820      	ldr	r0, [r4, #0]
 800638c:	1d19      	adds	r1, r3, #4
 800638e:	6031      	str	r1, [r6, #0]
 8006390:	0606      	lsls	r6, r0, #24
 8006392:	d501      	bpl.n	8006398 <_printf_i+0xbc>
 8006394:	681d      	ldr	r5, [r3, #0]
 8006396:	e003      	b.n	80063a0 <_printf_i+0xc4>
 8006398:	0645      	lsls	r5, r0, #25
 800639a:	d5fb      	bpl.n	8006394 <_printf_i+0xb8>
 800639c:	f9b3 5000 	ldrsh.w	r5, [r3]
 80063a0:	2d00      	cmp	r5, #0
 80063a2:	da03      	bge.n	80063ac <_printf_i+0xd0>
 80063a4:	232d      	movs	r3, #45	@ 0x2d
 80063a6:	426d      	negs	r5, r5
 80063a8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80063ac:	230a      	movs	r3, #10
 80063ae:	4859      	ldr	r0, [pc, #356]	@ (8006514 <_printf_i+0x238>)
 80063b0:	e011      	b.n	80063d6 <_printf_i+0xfa>
 80063b2:	6821      	ldr	r1, [r4, #0]
 80063b4:	6833      	ldr	r3, [r6, #0]
 80063b6:	0608      	lsls	r0, r1, #24
 80063b8:	f853 5b04 	ldr.w	r5, [r3], #4
 80063bc:	d402      	bmi.n	80063c4 <_printf_i+0xe8>
 80063be:	0649      	lsls	r1, r1, #25
 80063c0:	bf48      	it	mi
 80063c2:	b2ad      	uxthmi	r5, r5
 80063c4:	2f6f      	cmp	r7, #111	@ 0x6f
 80063c6:	6033      	str	r3, [r6, #0]
 80063c8:	bf14      	ite	ne
 80063ca:	230a      	movne	r3, #10
 80063cc:	2308      	moveq	r3, #8
 80063ce:	4851      	ldr	r0, [pc, #324]	@ (8006514 <_printf_i+0x238>)
 80063d0:	2100      	movs	r1, #0
 80063d2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80063d6:	6866      	ldr	r6, [r4, #4]
 80063d8:	2e00      	cmp	r6, #0
 80063da:	bfa8      	it	ge
 80063dc:	6821      	ldrge	r1, [r4, #0]
 80063de:	60a6      	str	r6, [r4, #8]
 80063e0:	bfa4      	itt	ge
 80063e2:	f021 0104 	bicge.w	r1, r1, #4
 80063e6:	6021      	strge	r1, [r4, #0]
 80063e8:	b90d      	cbnz	r5, 80063ee <_printf_i+0x112>
 80063ea:	2e00      	cmp	r6, #0
 80063ec:	d04b      	beq.n	8006486 <_printf_i+0x1aa>
 80063ee:	4616      	mov	r6, r2
 80063f0:	fbb5 f1f3 	udiv	r1, r5, r3
 80063f4:	fb03 5711 	mls	r7, r3, r1, r5
 80063f8:	5dc7      	ldrb	r7, [r0, r7]
 80063fa:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80063fe:	462f      	mov	r7, r5
 8006400:	42bb      	cmp	r3, r7
 8006402:	460d      	mov	r5, r1
 8006404:	d9f4      	bls.n	80063f0 <_printf_i+0x114>
 8006406:	2b08      	cmp	r3, #8
 8006408:	d10b      	bne.n	8006422 <_printf_i+0x146>
 800640a:	6823      	ldr	r3, [r4, #0]
 800640c:	07df      	lsls	r7, r3, #31
 800640e:	d508      	bpl.n	8006422 <_printf_i+0x146>
 8006410:	6923      	ldr	r3, [r4, #16]
 8006412:	6861      	ldr	r1, [r4, #4]
 8006414:	4299      	cmp	r1, r3
 8006416:	bfde      	ittt	le
 8006418:	2330      	movle	r3, #48	@ 0x30
 800641a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800641e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006422:	1b92      	subs	r2, r2, r6
 8006424:	6122      	str	r2, [r4, #16]
 8006426:	464b      	mov	r3, r9
 8006428:	4621      	mov	r1, r4
 800642a:	4640      	mov	r0, r8
 800642c:	f8cd a000 	str.w	sl, [sp]
 8006430:	aa03      	add	r2, sp, #12
 8006432:	f7ff fee1 	bl	80061f8 <_printf_common>
 8006436:	3001      	adds	r0, #1
 8006438:	d14a      	bne.n	80064d0 <_printf_i+0x1f4>
 800643a:	f04f 30ff 	mov.w	r0, #4294967295
 800643e:	b004      	add	sp, #16
 8006440:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006444:	6823      	ldr	r3, [r4, #0]
 8006446:	f043 0320 	orr.w	r3, r3, #32
 800644a:	6023      	str	r3, [r4, #0]
 800644c:	2778      	movs	r7, #120	@ 0x78
 800644e:	4832      	ldr	r0, [pc, #200]	@ (8006518 <_printf_i+0x23c>)
 8006450:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006454:	6823      	ldr	r3, [r4, #0]
 8006456:	6831      	ldr	r1, [r6, #0]
 8006458:	061f      	lsls	r7, r3, #24
 800645a:	f851 5b04 	ldr.w	r5, [r1], #4
 800645e:	d402      	bmi.n	8006466 <_printf_i+0x18a>
 8006460:	065f      	lsls	r7, r3, #25
 8006462:	bf48      	it	mi
 8006464:	b2ad      	uxthmi	r5, r5
 8006466:	6031      	str	r1, [r6, #0]
 8006468:	07d9      	lsls	r1, r3, #31
 800646a:	bf44      	itt	mi
 800646c:	f043 0320 	orrmi.w	r3, r3, #32
 8006470:	6023      	strmi	r3, [r4, #0]
 8006472:	b11d      	cbz	r5, 800647c <_printf_i+0x1a0>
 8006474:	2310      	movs	r3, #16
 8006476:	e7ab      	b.n	80063d0 <_printf_i+0xf4>
 8006478:	4826      	ldr	r0, [pc, #152]	@ (8006514 <_printf_i+0x238>)
 800647a:	e7e9      	b.n	8006450 <_printf_i+0x174>
 800647c:	6823      	ldr	r3, [r4, #0]
 800647e:	f023 0320 	bic.w	r3, r3, #32
 8006482:	6023      	str	r3, [r4, #0]
 8006484:	e7f6      	b.n	8006474 <_printf_i+0x198>
 8006486:	4616      	mov	r6, r2
 8006488:	e7bd      	b.n	8006406 <_printf_i+0x12a>
 800648a:	6833      	ldr	r3, [r6, #0]
 800648c:	6825      	ldr	r5, [r4, #0]
 800648e:	1d18      	adds	r0, r3, #4
 8006490:	6961      	ldr	r1, [r4, #20]
 8006492:	6030      	str	r0, [r6, #0]
 8006494:	062e      	lsls	r6, r5, #24
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	d501      	bpl.n	800649e <_printf_i+0x1c2>
 800649a:	6019      	str	r1, [r3, #0]
 800649c:	e002      	b.n	80064a4 <_printf_i+0x1c8>
 800649e:	0668      	lsls	r0, r5, #25
 80064a0:	d5fb      	bpl.n	800649a <_printf_i+0x1be>
 80064a2:	8019      	strh	r1, [r3, #0]
 80064a4:	2300      	movs	r3, #0
 80064a6:	4616      	mov	r6, r2
 80064a8:	6123      	str	r3, [r4, #16]
 80064aa:	e7bc      	b.n	8006426 <_printf_i+0x14a>
 80064ac:	6833      	ldr	r3, [r6, #0]
 80064ae:	2100      	movs	r1, #0
 80064b0:	1d1a      	adds	r2, r3, #4
 80064b2:	6032      	str	r2, [r6, #0]
 80064b4:	681e      	ldr	r6, [r3, #0]
 80064b6:	6862      	ldr	r2, [r4, #4]
 80064b8:	4630      	mov	r0, r6
 80064ba:	f000 fcf0 	bl	8006e9e <memchr>
 80064be:	b108      	cbz	r0, 80064c4 <_printf_i+0x1e8>
 80064c0:	1b80      	subs	r0, r0, r6
 80064c2:	6060      	str	r0, [r4, #4]
 80064c4:	6863      	ldr	r3, [r4, #4]
 80064c6:	6123      	str	r3, [r4, #16]
 80064c8:	2300      	movs	r3, #0
 80064ca:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80064ce:	e7aa      	b.n	8006426 <_printf_i+0x14a>
 80064d0:	4632      	mov	r2, r6
 80064d2:	4649      	mov	r1, r9
 80064d4:	4640      	mov	r0, r8
 80064d6:	6923      	ldr	r3, [r4, #16]
 80064d8:	47d0      	blx	sl
 80064da:	3001      	adds	r0, #1
 80064dc:	d0ad      	beq.n	800643a <_printf_i+0x15e>
 80064de:	6823      	ldr	r3, [r4, #0]
 80064e0:	079b      	lsls	r3, r3, #30
 80064e2:	d413      	bmi.n	800650c <_printf_i+0x230>
 80064e4:	68e0      	ldr	r0, [r4, #12]
 80064e6:	9b03      	ldr	r3, [sp, #12]
 80064e8:	4298      	cmp	r0, r3
 80064ea:	bfb8      	it	lt
 80064ec:	4618      	movlt	r0, r3
 80064ee:	e7a6      	b.n	800643e <_printf_i+0x162>
 80064f0:	2301      	movs	r3, #1
 80064f2:	4632      	mov	r2, r6
 80064f4:	4649      	mov	r1, r9
 80064f6:	4640      	mov	r0, r8
 80064f8:	47d0      	blx	sl
 80064fa:	3001      	adds	r0, #1
 80064fc:	d09d      	beq.n	800643a <_printf_i+0x15e>
 80064fe:	3501      	adds	r5, #1
 8006500:	68e3      	ldr	r3, [r4, #12]
 8006502:	9903      	ldr	r1, [sp, #12]
 8006504:	1a5b      	subs	r3, r3, r1
 8006506:	42ab      	cmp	r3, r5
 8006508:	dcf2      	bgt.n	80064f0 <_printf_i+0x214>
 800650a:	e7eb      	b.n	80064e4 <_printf_i+0x208>
 800650c:	2500      	movs	r5, #0
 800650e:	f104 0619 	add.w	r6, r4, #25
 8006512:	e7f5      	b.n	8006500 <_printf_i+0x224>
 8006514:	0800ade0 	.word	0x0800ade0
 8006518:	0800adf1 	.word	0x0800adf1

0800651c <_scanf_float>:
 800651c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006520:	b087      	sub	sp, #28
 8006522:	9303      	str	r3, [sp, #12]
 8006524:	688b      	ldr	r3, [r1, #8]
 8006526:	4617      	mov	r7, r2
 8006528:	1e5a      	subs	r2, r3, #1
 800652a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800652e:	bf82      	ittt	hi
 8006530:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8006534:	eb03 0b05 	addhi.w	fp, r3, r5
 8006538:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800653c:	460a      	mov	r2, r1
 800653e:	f04f 0500 	mov.w	r5, #0
 8006542:	bf88      	it	hi
 8006544:	608b      	strhi	r3, [r1, #8]
 8006546:	680b      	ldr	r3, [r1, #0]
 8006548:	4680      	mov	r8, r0
 800654a:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800654e:	f842 3b1c 	str.w	r3, [r2], #28
 8006552:	460c      	mov	r4, r1
 8006554:	bf98      	it	ls
 8006556:	f04f 0b00 	movls.w	fp, #0
 800655a:	4616      	mov	r6, r2
 800655c:	46aa      	mov	sl, r5
 800655e:	46a9      	mov	r9, r5
 8006560:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006564:	9201      	str	r2, [sp, #4]
 8006566:	9502      	str	r5, [sp, #8]
 8006568:	68a2      	ldr	r2, [r4, #8]
 800656a:	b152      	cbz	r2, 8006582 <_scanf_float+0x66>
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	781b      	ldrb	r3, [r3, #0]
 8006570:	2b4e      	cmp	r3, #78	@ 0x4e
 8006572:	d865      	bhi.n	8006640 <_scanf_float+0x124>
 8006574:	2b40      	cmp	r3, #64	@ 0x40
 8006576:	d83d      	bhi.n	80065f4 <_scanf_float+0xd8>
 8006578:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800657c:	b2c8      	uxtb	r0, r1
 800657e:	280e      	cmp	r0, #14
 8006580:	d93b      	bls.n	80065fa <_scanf_float+0xde>
 8006582:	f1b9 0f00 	cmp.w	r9, #0
 8006586:	d003      	beq.n	8006590 <_scanf_float+0x74>
 8006588:	6823      	ldr	r3, [r4, #0]
 800658a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800658e:	6023      	str	r3, [r4, #0]
 8006590:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006594:	f1ba 0f01 	cmp.w	sl, #1
 8006598:	f200 8118 	bhi.w	80067cc <_scanf_float+0x2b0>
 800659c:	9b01      	ldr	r3, [sp, #4]
 800659e:	429e      	cmp	r6, r3
 80065a0:	f200 8109 	bhi.w	80067b6 <_scanf_float+0x29a>
 80065a4:	2001      	movs	r0, #1
 80065a6:	b007      	add	sp, #28
 80065a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065ac:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 80065b0:	2a0d      	cmp	r2, #13
 80065b2:	d8e6      	bhi.n	8006582 <_scanf_float+0x66>
 80065b4:	a101      	add	r1, pc, #4	@ (adr r1, 80065bc <_scanf_float+0xa0>)
 80065b6:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80065ba:	bf00      	nop
 80065bc:	08006703 	.word	0x08006703
 80065c0:	08006583 	.word	0x08006583
 80065c4:	08006583 	.word	0x08006583
 80065c8:	08006583 	.word	0x08006583
 80065cc:	08006763 	.word	0x08006763
 80065d0:	0800673b 	.word	0x0800673b
 80065d4:	08006583 	.word	0x08006583
 80065d8:	08006583 	.word	0x08006583
 80065dc:	08006711 	.word	0x08006711
 80065e0:	08006583 	.word	0x08006583
 80065e4:	08006583 	.word	0x08006583
 80065e8:	08006583 	.word	0x08006583
 80065ec:	08006583 	.word	0x08006583
 80065f0:	080066c9 	.word	0x080066c9
 80065f4:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80065f8:	e7da      	b.n	80065b0 <_scanf_float+0x94>
 80065fa:	290e      	cmp	r1, #14
 80065fc:	d8c1      	bhi.n	8006582 <_scanf_float+0x66>
 80065fe:	a001      	add	r0, pc, #4	@ (adr r0, 8006604 <_scanf_float+0xe8>)
 8006600:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006604:	080066b9 	.word	0x080066b9
 8006608:	08006583 	.word	0x08006583
 800660c:	080066b9 	.word	0x080066b9
 8006610:	0800674f 	.word	0x0800674f
 8006614:	08006583 	.word	0x08006583
 8006618:	08006661 	.word	0x08006661
 800661c:	0800669f 	.word	0x0800669f
 8006620:	0800669f 	.word	0x0800669f
 8006624:	0800669f 	.word	0x0800669f
 8006628:	0800669f 	.word	0x0800669f
 800662c:	0800669f 	.word	0x0800669f
 8006630:	0800669f 	.word	0x0800669f
 8006634:	0800669f 	.word	0x0800669f
 8006638:	0800669f 	.word	0x0800669f
 800663c:	0800669f 	.word	0x0800669f
 8006640:	2b6e      	cmp	r3, #110	@ 0x6e
 8006642:	d809      	bhi.n	8006658 <_scanf_float+0x13c>
 8006644:	2b60      	cmp	r3, #96	@ 0x60
 8006646:	d8b1      	bhi.n	80065ac <_scanf_float+0x90>
 8006648:	2b54      	cmp	r3, #84	@ 0x54
 800664a:	d07b      	beq.n	8006744 <_scanf_float+0x228>
 800664c:	2b59      	cmp	r3, #89	@ 0x59
 800664e:	d198      	bne.n	8006582 <_scanf_float+0x66>
 8006650:	2d07      	cmp	r5, #7
 8006652:	d196      	bne.n	8006582 <_scanf_float+0x66>
 8006654:	2508      	movs	r5, #8
 8006656:	e02c      	b.n	80066b2 <_scanf_float+0x196>
 8006658:	2b74      	cmp	r3, #116	@ 0x74
 800665a:	d073      	beq.n	8006744 <_scanf_float+0x228>
 800665c:	2b79      	cmp	r3, #121	@ 0x79
 800665e:	e7f6      	b.n	800664e <_scanf_float+0x132>
 8006660:	6821      	ldr	r1, [r4, #0]
 8006662:	05c8      	lsls	r0, r1, #23
 8006664:	d51b      	bpl.n	800669e <_scanf_float+0x182>
 8006666:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800666a:	6021      	str	r1, [r4, #0]
 800666c:	f109 0901 	add.w	r9, r9, #1
 8006670:	f1bb 0f00 	cmp.w	fp, #0
 8006674:	d003      	beq.n	800667e <_scanf_float+0x162>
 8006676:	3201      	adds	r2, #1
 8006678:	f10b 3bff 	add.w	fp, fp, #4294967295
 800667c:	60a2      	str	r2, [r4, #8]
 800667e:	68a3      	ldr	r3, [r4, #8]
 8006680:	3b01      	subs	r3, #1
 8006682:	60a3      	str	r3, [r4, #8]
 8006684:	6923      	ldr	r3, [r4, #16]
 8006686:	3301      	adds	r3, #1
 8006688:	6123      	str	r3, [r4, #16]
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	3b01      	subs	r3, #1
 800668e:	2b00      	cmp	r3, #0
 8006690:	607b      	str	r3, [r7, #4]
 8006692:	f340 8087 	ble.w	80067a4 <_scanf_float+0x288>
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	3301      	adds	r3, #1
 800669a:	603b      	str	r3, [r7, #0]
 800669c:	e764      	b.n	8006568 <_scanf_float+0x4c>
 800669e:	eb1a 0105 	adds.w	r1, sl, r5
 80066a2:	f47f af6e 	bne.w	8006582 <_scanf_float+0x66>
 80066a6:	460d      	mov	r5, r1
 80066a8:	468a      	mov	sl, r1
 80066aa:	6822      	ldr	r2, [r4, #0]
 80066ac:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 80066b0:	6022      	str	r2, [r4, #0]
 80066b2:	f806 3b01 	strb.w	r3, [r6], #1
 80066b6:	e7e2      	b.n	800667e <_scanf_float+0x162>
 80066b8:	6822      	ldr	r2, [r4, #0]
 80066ba:	0610      	lsls	r0, r2, #24
 80066bc:	f57f af61 	bpl.w	8006582 <_scanf_float+0x66>
 80066c0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80066c4:	6022      	str	r2, [r4, #0]
 80066c6:	e7f4      	b.n	80066b2 <_scanf_float+0x196>
 80066c8:	f1ba 0f00 	cmp.w	sl, #0
 80066cc:	d10e      	bne.n	80066ec <_scanf_float+0x1d0>
 80066ce:	f1b9 0f00 	cmp.w	r9, #0
 80066d2:	d10e      	bne.n	80066f2 <_scanf_float+0x1d6>
 80066d4:	6822      	ldr	r2, [r4, #0]
 80066d6:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80066da:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80066de:	d108      	bne.n	80066f2 <_scanf_float+0x1d6>
 80066e0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80066e4:	f04f 0a01 	mov.w	sl, #1
 80066e8:	6022      	str	r2, [r4, #0]
 80066ea:	e7e2      	b.n	80066b2 <_scanf_float+0x196>
 80066ec:	f1ba 0f02 	cmp.w	sl, #2
 80066f0:	d055      	beq.n	800679e <_scanf_float+0x282>
 80066f2:	2d01      	cmp	r5, #1
 80066f4:	d002      	beq.n	80066fc <_scanf_float+0x1e0>
 80066f6:	2d04      	cmp	r5, #4
 80066f8:	f47f af43 	bne.w	8006582 <_scanf_float+0x66>
 80066fc:	3501      	adds	r5, #1
 80066fe:	b2ed      	uxtb	r5, r5
 8006700:	e7d7      	b.n	80066b2 <_scanf_float+0x196>
 8006702:	f1ba 0f01 	cmp.w	sl, #1
 8006706:	f47f af3c 	bne.w	8006582 <_scanf_float+0x66>
 800670a:	f04f 0a02 	mov.w	sl, #2
 800670e:	e7d0      	b.n	80066b2 <_scanf_float+0x196>
 8006710:	b97d      	cbnz	r5, 8006732 <_scanf_float+0x216>
 8006712:	f1b9 0f00 	cmp.w	r9, #0
 8006716:	f47f af37 	bne.w	8006588 <_scanf_float+0x6c>
 800671a:	6822      	ldr	r2, [r4, #0]
 800671c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8006720:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8006724:	f040 8103 	bne.w	800692e <_scanf_float+0x412>
 8006728:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800672c:	2501      	movs	r5, #1
 800672e:	6022      	str	r2, [r4, #0]
 8006730:	e7bf      	b.n	80066b2 <_scanf_float+0x196>
 8006732:	2d03      	cmp	r5, #3
 8006734:	d0e2      	beq.n	80066fc <_scanf_float+0x1e0>
 8006736:	2d05      	cmp	r5, #5
 8006738:	e7de      	b.n	80066f8 <_scanf_float+0x1dc>
 800673a:	2d02      	cmp	r5, #2
 800673c:	f47f af21 	bne.w	8006582 <_scanf_float+0x66>
 8006740:	2503      	movs	r5, #3
 8006742:	e7b6      	b.n	80066b2 <_scanf_float+0x196>
 8006744:	2d06      	cmp	r5, #6
 8006746:	f47f af1c 	bne.w	8006582 <_scanf_float+0x66>
 800674a:	2507      	movs	r5, #7
 800674c:	e7b1      	b.n	80066b2 <_scanf_float+0x196>
 800674e:	6822      	ldr	r2, [r4, #0]
 8006750:	0591      	lsls	r1, r2, #22
 8006752:	f57f af16 	bpl.w	8006582 <_scanf_float+0x66>
 8006756:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800675a:	6022      	str	r2, [r4, #0]
 800675c:	f8cd 9008 	str.w	r9, [sp, #8]
 8006760:	e7a7      	b.n	80066b2 <_scanf_float+0x196>
 8006762:	6822      	ldr	r2, [r4, #0]
 8006764:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8006768:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800676c:	d006      	beq.n	800677c <_scanf_float+0x260>
 800676e:	0550      	lsls	r0, r2, #21
 8006770:	f57f af07 	bpl.w	8006582 <_scanf_float+0x66>
 8006774:	f1b9 0f00 	cmp.w	r9, #0
 8006778:	f000 80d9 	beq.w	800692e <_scanf_float+0x412>
 800677c:	0591      	lsls	r1, r2, #22
 800677e:	bf58      	it	pl
 8006780:	9902      	ldrpl	r1, [sp, #8]
 8006782:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006786:	bf58      	it	pl
 8006788:	eba9 0101 	subpl.w	r1, r9, r1
 800678c:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8006790:	f04f 0900 	mov.w	r9, #0
 8006794:	bf58      	it	pl
 8006796:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800679a:	6022      	str	r2, [r4, #0]
 800679c:	e789      	b.n	80066b2 <_scanf_float+0x196>
 800679e:	f04f 0a03 	mov.w	sl, #3
 80067a2:	e786      	b.n	80066b2 <_scanf_float+0x196>
 80067a4:	4639      	mov	r1, r7
 80067a6:	4640      	mov	r0, r8
 80067a8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80067ac:	4798      	blx	r3
 80067ae:	2800      	cmp	r0, #0
 80067b0:	f43f aeda 	beq.w	8006568 <_scanf_float+0x4c>
 80067b4:	e6e5      	b.n	8006582 <_scanf_float+0x66>
 80067b6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80067ba:	463a      	mov	r2, r7
 80067bc:	4640      	mov	r0, r8
 80067be:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80067c2:	4798      	blx	r3
 80067c4:	6923      	ldr	r3, [r4, #16]
 80067c6:	3b01      	subs	r3, #1
 80067c8:	6123      	str	r3, [r4, #16]
 80067ca:	e6e7      	b.n	800659c <_scanf_float+0x80>
 80067cc:	1e6b      	subs	r3, r5, #1
 80067ce:	2b06      	cmp	r3, #6
 80067d0:	d824      	bhi.n	800681c <_scanf_float+0x300>
 80067d2:	2d02      	cmp	r5, #2
 80067d4:	d836      	bhi.n	8006844 <_scanf_float+0x328>
 80067d6:	9b01      	ldr	r3, [sp, #4]
 80067d8:	429e      	cmp	r6, r3
 80067da:	f67f aee3 	bls.w	80065a4 <_scanf_float+0x88>
 80067de:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80067e2:	463a      	mov	r2, r7
 80067e4:	4640      	mov	r0, r8
 80067e6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80067ea:	4798      	blx	r3
 80067ec:	6923      	ldr	r3, [r4, #16]
 80067ee:	3b01      	subs	r3, #1
 80067f0:	6123      	str	r3, [r4, #16]
 80067f2:	e7f0      	b.n	80067d6 <_scanf_float+0x2ba>
 80067f4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80067f8:	463a      	mov	r2, r7
 80067fa:	4640      	mov	r0, r8
 80067fc:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8006800:	4798      	blx	r3
 8006802:	6923      	ldr	r3, [r4, #16]
 8006804:	3b01      	subs	r3, #1
 8006806:	6123      	str	r3, [r4, #16]
 8006808:	f10a 3aff 	add.w	sl, sl, #4294967295
 800680c:	fa5f fa8a 	uxtb.w	sl, sl
 8006810:	f1ba 0f02 	cmp.w	sl, #2
 8006814:	d1ee      	bne.n	80067f4 <_scanf_float+0x2d8>
 8006816:	3d03      	subs	r5, #3
 8006818:	b2ed      	uxtb	r5, r5
 800681a:	1b76      	subs	r6, r6, r5
 800681c:	6823      	ldr	r3, [r4, #0]
 800681e:	05da      	lsls	r2, r3, #23
 8006820:	d530      	bpl.n	8006884 <_scanf_float+0x368>
 8006822:	055b      	lsls	r3, r3, #21
 8006824:	d511      	bpl.n	800684a <_scanf_float+0x32e>
 8006826:	9b01      	ldr	r3, [sp, #4]
 8006828:	429e      	cmp	r6, r3
 800682a:	f67f aebb 	bls.w	80065a4 <_scanf_float+0x88>
 800682e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006832:	463a      	mov	r2, r7
 8006834:	4640      	mov	r0, r8
 8006836:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800683a:	4798      	blx	r3
 800683c:	6923      	ldr	r3, [r4, #16]
 800683e:	3b01      	subs	r3, #1
 8006840:	6123      	str	r3, [r4, #16]
 8006842:	e7f0      	b.n	8006826 <_scanf_float+0x30a>
 8006844:	46aa      	mov	sl, r5
 8006846:	46b3      	mov	fp, r6
 8006848:	e7de      	b.n	8006808 <_scanf_float+0x2ec>
 800684a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800684e:	6923      	ldr	r3, [r4, #16]
 8006850:	2965      	cmp	r1, #101	@ 0x65
 8006852:	f103 33ff 	add.w	r3, r3, #4294967295
 8006856:	f106 35ff 	add.w	r5, r6, #4294967295
 800685a:	6123      	str	r3, [r4, #16]
 800685c:	d00c      	beq.n	8006878 <_scanf_float+0x35c>
 800685e:	2945      	cmp	r1, #69	@ 0x45
 8006860:	d00a      	beq.n	8006878 <_scanf_float+0x35c>
 8006862:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006866:	463a      	mov	r2, r7
 8006868:	4640      	mov	r0, r8
 800686a:	4798      	blx	r3
 800686c:	6923      	ldr	r3, [r4, #16]
 800686e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8006872:	3b01      	subs	r3, #1
 8006874:	1eb5      	subs	r5, r6, #2
 8006876:	6123      	str	r3, [r4, #16]
 8006878:	463a      	mov	r2, r7
 800687a:	4640      	mov	r0, r8
 800687c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006880:	4798      	blx	r3
 8006882:	462e      	mov	r6, r5
 8006884:	6822      	ldr	r2, [r4, #0]
 8006886:	f012 0210 	ands.w	r2, r2, #16
 800688a:	d001      	beq.n	8006890 <_scanf_float+0x374>
 800688c:	2000      	movs	r0, #0
 800688e:	e68a      	b.n	80065a6 <_scanf_float+0x8a>
 8006890:	7032      	strb	r2, [r6, #0]
 8006892:	6823      	ldr	r3, [r4, #0]
 8006894:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006898:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800689c:	d11c      	bne.n	80068d8 <_scanf_float+0x3bc>
 800689e:	9b02      	ldr	r3, [sp, #8]
 80068a0:	454b      	cmp	r3, r9
 80068a2:	eba3 0209 	sub.w	r2, r3, r9
 80068a6:	d123      	bne.n	80068f0 <_scanf_float+0x3d4>
 80068a8:	2200      	movs	r2, #0
 80068aa:	4640      	mov	r0, r8
 80068ac:	9901      	ldr	r1, [sp, #4]
 80068ae:	f002 fcfb 	bl	80092a8 <_strtod_r>
 80068b2:	9b03      	ldr	r3, [sp, #12]
 80068b4:	6825      	ldr	r5, [r4, #0]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	f015 0f02 	tst.w	r5, #2
 80068bc:	4606      	mov	r6, r0
 80068be:	460f      	mov	r7, r1
 80068c0:	f103 0204 	add.w	r2, r3, #4
 80068c4:	d01f      	beq.n	8006906 <_scanf_float+0x3ea>
 80068c6:	9903      	ldr	r1, [sp, #12]
 80068c8:	600a      	str	r2, [r1, #0]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	e9c3 6700 	strd	r6, r7, [r3]
 80068d0:	68e3      	ldr	r3, [r4, #12]
 80068d2:	3301      	adds	r3, #1
 80068d4:	60e3      	str	r3, [r4, #12]
 80068d6:	e7d9      	b.n	800688c <_scanf_float+0x370>
 80068d8:	9b04      	ldr	r3, [sp, #16]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d0e4      	beq.n	80068a8 <_scanf_float+0x38c>
 80068de:	9905      	ldr	r1, [sp, #20]
 80068e0:	230a      	movs	r3, #10
 80068e2:	4640      	mov	r0, r8
 80068e4:	3101      	adds	r1, #1
 80068e6:	f002 fd5f 	bl	80093a8 <_strtol_r>
 80068ea:	9b04      	ldr	r3, [sp, #16]
 80068ec:	9e05      	ldr	r6, [sp, #20]
 80068ee:	1ac2      	subs	r2, r0, r3
 80068f0:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 80068f4:	429e      	cmp	r6, r3
 80068f6:	bf28      	it	cs
 80068f8:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 80068fc:	4630      	mov	r0, r6
 80068fe:	490d      	ldr	r1, [pc, #52]	@ (8006934 <_scanf_float+0x418>)
 8006900:	f000 f956 	bl	8006bb0 <siprintf>
 8006904:	e7d0      	b.n	80068a8 <_scanf_float+0x38c>
 8006906:	076d      	lsls	r5, r5, #29
 8006908:	d4dd      	bmi.n	80068c6 <_scanf_float+0x3aa>
 800690a:	9d03      	ldr	r5, [sp, #12]
 800690c:	602a      	str	r2, [r5, #0]
 800690e:	681d      	ldr	r5, [r3, #0]
 8006910:	4602      	mov	r2, r0
 8006912:	460b      	mov	r3, r1
 8006914:	f7fa f87a 	bl	8000a0c <__aeabi_dcmpun>
 8006918:	b120      	cbz	r0, 8006924 <_scanf_float+0x408>
 800691a:	4807      	ldr	r0, [pc, #28]	@ (8006938 <_scanf_float+0x41c>)
 800691c:	f000 face 	bl	8006ebc <nanf>
 8006920:	6028      	str	r0, [r5, #0]
 8006922:	e7d5      	b.n	80068d0 <_scanf_float+0x3b4>
 8006924:	4630      	mov	r0, r6
 8006926:	4639      	mov	r1, r7
 8006928:	f7fa f8ce 	bl	8000ac8 <__aeabi_d2f>
 800692c:	e7f8      	b.n	8006920 <_scanf_float+0x404>
 800692e:	f04f 0900 	mov.w	r9, #0
 8006932:	e62d      	b.n	8006590 <_scanf_float+0x74>
 8006934:	0800ae02 	.word	0x0800ae02
 8006938:	0800b19d 	.word	0x0800b19d

0800693c <std>:
 800693c:	2300      	movs	r3, #0
 800693e:	b510      	push	{r4, lr}
 8006940:	4604      	mov	r4, r0
 8006942:	e9c0 3300 	strd	r3, r3, [r0]
 8006946:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800694a:	6083      	str	r3, [r0, #8]
 800694c:	8181      	strh	r1, [r0, #12]
 800694e:	6643      	str	r3, [r0, #100]	@ 0x64
 8006950:	81c2      	strh	r2, [r0, #14]
 8006952:	6183      	str	r3, [r0, #24]
 8006954:	4619      	mov	r1, r3
 8006956:	2208      	movs	r2, #8
 8006958:	305c      	adds	r0, #92	@ 0x5c
 800695a:	f000 fa21 	bl	8006da0 <memset>
 800695e:	4b0d      	ldr	r3, [pc, #52]	@ (8006994 <std+0x58>)
 8006960:	6224      	str	r4, [r4, #32]
 8006962:	6263      	str	r3, [r4, #36]	@ 0x24
 8006964:	4b0c      	ldr	r3, [pc, #48]	@ (8006998 <std+0x5c>)
 8006966:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006968:	4b0c      	ldr	r3, [pc, #48]	@ (800699c <std+0x60>)
 800696a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800696c:	4b0c      	ldr	r3, [pc, #48]	@ (80069a0 <std+0x64>)
 800696e:	6323      	str	r3, [r4, #48]	@ 0x30
 8006970:	4b0c      	ldr	r3, [pc, #48]	@ (80069a4 <std+0x68>)
 8006972:	429c      	cmp	r4, r3
 8006974:	d006      	beq.n	8006984 <std+0x48>
 8006976:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800697a:	4294      	cmp	r4, r2
 800697c:	d002      	beq.n	8006984 <std+0x48>
 800697e:	33d0      	adds	r3, #208	@ 0xd0
 8006980:	429c      	cmp	r4, r3
 8006982:	d105      	bne.n	8006990 <std+0x54>
 8006984:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006988:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800698c:	f000 ba84 	b.w	8006e98 <__retarget_lock_init_recursive>
 8006990:	bd10      	pop	{r4, pc}
 8006992:	bf00      	nop
 8006994:	08006bf1 	.word	0x08006bf1
 8006998:	08006c13 	.word	0x08006c13
 800699c:	08006c4b 	.word	0x08006c4b
 80069a0:	08006c6f 	.word	0x08006c6f
 80069a4:	20000424 	.word	0x20000424

080069a8 <stdio_exit_handler>:
 80069a8:	4a02      	ldr	r2, [pc, #8]	@ (80069b4 <stdio_exit_handler+0xc>)
 80069aa:	4903      	ldr	r1, [pc, #12]	@ (80069b8 <stdio_exit_handler+0x10>)
 80069ac:	4803      	ldr	r0, [pc, #12]	@ (80069bc <stdio_exit_handler+0x14>)
 80069ae:	f000 b869 	b.w	8006a84 <_fwalk_sglue>
 80069b2:	bf00      	nop
 80069b4:	2000000c 	.word	0x2000000c
 80069b8:	080099dd 	.word	0x080099dd
 80069bc:	2000001c 	.word	0x2000001c

080069c0 <cleanup_stdio>:
 80069c0:	6841      	ldr	r1, [r0, #4]
 80069c2:	4b0c      	ldr	r3, [pc, #48]	@ (80069f4 <cleanup_stdio+0x34>)
 80069c4:	b510      	push	{r4, lr}
 80069c6:	4299      	cmp	r1, r3
 80069c8:	4604      	mov	r4, r0
 80069ca:	d001      	beq.n	80069d0 <cleanup_stdio+0x10>
 80069cc:	f003 f806 	bl	80099dc <_fflush_r>
 80069d0:	68a1      	ldr	r1, [r4, #8]
 80069d2:	4b09      	ldr	r3, [pc, #36]	@ (80069f8 <cleanup_stdio+0x38>)
 80069d4:	4299      	cmp	r1, r3
 80069d6:	d002      	beq.n	80069de <cleanup_stdio+0x1e>
 80069d8:	4620      	mov	r0, r4
 80069da:	f002 ffff 	bl	80099dc <_fflush_r>
 80069de:	68e1      	ldr	r1, [r4, #12]
 80069e0:	4b06      	ldr	r3, [pc, #24]	@ (80069fc <cleanup_stdio+0x3c>)
 80069e2:	4299      	cmp	r1, r3
 80069e4:	d004      	beq.n	80069f0 <cleanup_stdio+0x30>
 80069e6:	4620      	mov	r0, r4
 80069e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80069ec:	f002 bff6 	b.w	80099dc <_fflush_r>
 80069f0:	bd10      	pop	{r4, pc}
 80069f2:	bf00      	nop
 80069f4:	20000424 	.word	0x20000424
 80069f8:	2000048c 	.word	0x2000048c
 80069fc:	200004f4 	.word	0x200004f4

08006a00 <global_stdio_init.part.0>:
 8006a00:	b510      	push	{r4, lr}
 8006a02:	4b0b      	ldr	r3, [pc, #44]	@ (8006a30 <global_stdio_init.part.0+0x30>)
 8006a04:	4c0b      	ldr	r4, [pc, #44]	@ (8006a34 <global_stdio_init.part.0+0x34>)
 8006a06:	4a0c      	ldr	r2, [pc, #48]	@ (8006a38 <global_stdio_init.part.0+0x38>)
 8006a08:	4620      	mov	r0, r4
 8006a0a:	601a      	str	r2, [r3, #0]
 8006a0c:	2104      	movs	r1, #4
 8006a0e:	2200      	movs	r2, #0
 8006a10:	f7ff ff94 	bl	800693c <std>
 8006a14:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006a18:	2201      	movs	r2, #1
 8006a1a:	2109      	movs	r1, #9
 8006a1c:	f7ff ff8e 	bl	800693c <std>
 8006a20:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006a24:	2202      	movs	r2, #2
 8006a26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006a2a:	2112      	movs	r1, #18
 8006a2c:	f7ff bf86 	b.w	800693c <std>
 8006a30:	2000055c 	.word	0x2000055c
 8006a34:	20000424 	.word	0x20000424
 8006a38:	080069a9 	.word	0x080069a9

08006a3c <__sfp_lock_acquire>:
 8006a3c:	4801      	ldr	r0, [pc, #4]	@ (8006a44 <__sfp_lock_acquire+0x8>)
 8006a3e:	f000 ba2c 	b.w	8006e9a <__retarget_lock_acquire_recursive>
 8006a42:	bf00      	nop
 8006a44:	20000565 	.word	0x20000565

08006a48 <__sfp_lock_release>:
 8006a48:	4801      	ldr	r0, [pc, #4]	@ (8006a50 <__sfp_lock_release+0x8>)
 8006a4a:	f000 ba27 	b.w	8006e9c <__retarget_lock_release_recursive>
 8006a4e:	bf00      	nop
 8006a50:	20000565 	.word	0x20000565

08006a54 <__sinit>:
 8006a54:	b510      	push	{r4, lr}
 8006a56:	4604      	mov	r4, r0
 8006a58:	f7ff fff0 	bl	8006a3c <__sfp_lock_acquire>
 8006a5c:	6a23      	ldr	r3, [r4, #32]
 8006a5e:	b11b      	cbz	r3, 8006a68 <__sinit+0x14>
 8006a60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006a64:	f7ff bff0 	b.w	8006a48 <__sfp_lock_release>
 8006a68:	4b04      	ldr	r3, [pc, #16]	@ (8006a7c <__sinit+0x28>)
 8006a6a:	6223      	str	r3, [r4, #32]
 8006a6c:	4b04      	ldr	r3, [pc, #16]	@ (8006a80 <__sinit+0x2c>)
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d1f5      	bne.n	8006a60 <__sinit+0xc>
 8006a74:	f7ff ffc4 	bl	8006a00 <global_stdio_init.part.0>
 8006a78:	e7f2      	b.n	8006a60 <__sinit+0xc>
 8006a7a:	bf00      	nop
 8006a7c:	080069c1 	.word	0x080069c1
 8006a80:	2000055c 	.word	0x2000055c

08006a84 <_fwalk_sglue>:
 8006a84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006a88:	4607      	mov	r7, r0
 8006a8a:	4688      	mov	r8, r1
 8006a8c:	4614      	mov	r4, r2
 8006a8e:	2600      	movs	r6, #0
 8006a90:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006a94:	f1b9 0901 	subs.w	r9, r9, #1
 8006a98:	d505      	bpl.n	8006aa6 <_fwalk_sglue+0x22>
 8006a9a:	6824      	ldr	r4, [r4, #0]
 8006a9c:	2c00      	cmp	r4, #0
 8006a9e:	d1f7      	bne.n	8006a90 <_fwalk_sglue+0xc>
 8006aa0:	4630      	mov	r0, r6
 8006aa2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006aa6:	89ab      	ldrh	r3, [r5, #12]
 8006aa8:	2b01      	cmp	r3, #1
 8006aaa:	d907      	bls.n	8006abc <_fwalk_sglue+0x38>
 8006aac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006ab0:	3301      	adds	r3, #1
 8006ab2:	d003      	beq.n	8006abc <_fwalk_sglue+0x38>
 8006ab4:	4629      	mov	r1, r5
 8006ab6:	4638      	mov	r0, r7
 8006ab8:	47c0      	blx	r8
 8006aba:	4306      	orrs	r6, r0
 8006abc:	3568      	adds	r5, #104	@ 0x68
 8006abe:	e7e9      	b.n	8006a94 <_fwalk_sglue+0x10>

08006ac0 <iprintf>:
 8006ac0:	b40f      	push	{r0, r1, r2, r3}
 8006ac2:	b507      	push	{r0, r1, r2, lr}
 8006ac4:	4906      	ldr	r1, [pc, #24]	@ (8006ae0 <iprintf+0x20>)
 8006ac6:	ab04      	add	r3, sp, #16
 8006ac8:	6808      	ldr	r0, [r1, #0]
 8006aca:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ace:	6881      	ldr	r1, [r0, #8]
 8006ad0:	9301      	str	r3, [sp, #4]
 8006ad2:	f002 fdeb 	bl	80096ac <_vfiprintf_r>
 8006ad6:	b003      	add	sp, #12
 8006ad8:	f85d eb04 	ldr.w	lr, [sp], #4
 8006adc:	b004      	add	sp, #16
 8006ade:	4770      	bx	lr
 8006ae0:	20000018 	.word	0x20000018

08006ae4 <putchar>:
 8006ae4:	4b02      	ldr	r3, [pc, #8]	@ (8006af0 <putchar+0xc>)
 8006ae6:	4601      	mov	r1, r0
 8006ae8:	6818      	ldr	r0, [r3, #0]
 8006aea:	6882      	ldr	r2, [r0, #8]
 8006aec:	f002 bfff 	b.w	8009aee <_putc_r>
 8006af0:	20000018 	.word	0x20000018

08006af4 <_puts_r>:
 8006af4:	6a03      	ldr	r3, [r0, #32]
 8006af6:	b570      	push	{r4, r5, r6, lr}
 8006af8:	4605      	mov	r5, r0
 8006afa:	460e      	mov	r6, r1
 8006afc:	6884      	ldr	r4, [r0, #8]
 8006afe:	b90b      	cbnz	r3, 8006b04 <_puts_r+0x10>
 8006b00:	f7ff ffa8 	bl	8006a54 <__sinit>
 8006b04:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006b06:	07db      	lsls	r3, r3, #31
 8006b08:	d405      	bmi.n	8006b16 <_puts_r+0x22>
 8006b0a:	89a3      	ldrh	r3, [r4, #12]
 8006b0c:	0598      	lsls	r0, r3, #22
 8006b0e:	d402      	bmi.n	8006b16 <_puts_r+0x22>
 8006b10:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006b12:	f000 f9c2 	bl	8006e9a <__retarget_lock_acquire_recursive>
 8006b16:	89a3      	ldrh	r3, [r4, #12]
 8006b18:	0719      	lsls	r1, r3, #28
 8006b1a:	d502      	bpl.n	8006b22 <_puts_r+0x2e>
 8006b1c:	6923      	ldr	r3, [r4, #16]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d135      	bne.n	8006b8e <_puts_r+0x9a>
 8006b22:	4621      	mov	r1, r4
 8006b24:	4628      	mov	r0, r5
 8006b26:	f000 f8e5 	bl	8006cf4 <__swsetup_r>
 8006b2a:	b380      	cbz	r0, 8006b8e <_puts_r+0x9a>
 8006b2c:	f04f 35ff 	mov.w	r5, #4294967295
 8006b30:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006b32:	07da      	lsls	r2, r3, #31
 8006b34:	d405      	bmi.n	8006b42 <_puts_r+0x4e>
 8006b36:	89a3      	ldrh	r3, [r4, #12]
 8006b38:	059b      	lsls	r3, r3, #22
 8006b3a:	d402      	bmi.n	8006b42 <_puts_r+0x4e>
 8006b3c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006b3e:	f000 f9ad 	bl	8006e9c <__retarget_lock_release_recursive>
 8006b42:	4628      	mov	r0, r5
 8006b44:	bd70      	pop	{r4, r5, r6, pc}
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	da04      	bge.n	8006b54 <_puts_r+0x60>
 8006b4a:	69a2      	ldr	r2, [r4, #24]
 8006b4c:	429a      	cmp	r2, r3
 8006b4e:	dc17      	bgt.n	8006b80 <_puts_r+0x8c>
 8006b50:	290a      	cmp	r1, #10
 8006b52:	d015      	beq.n	8006b80 <_puts_r+0x8c>
 8006b54:	6823      	ldr	r3, [r4, #0]
 8006b56:	1c5a      	adds	r2, r3, #1
 8006b58:	6022      	str	r2, [r4, #0]
 8006b5a:	7019      	strb	r1, [r3, #0]
 8006b5c:	68a3      	ldr	r3, [r4, #8]
 8006b5e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006b62:	3b01      	subs	r3, #1
 8006b64:	60a3      	str	r3, [r4, #8]
 8006b66:	2900      	cmp	r1, #0
 8006b68:	d1ed      	bne.n	8006b46 <_puts_r+0x52>
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	da11      	bge.n	8006b92 <_puts_r+0x9e>
 8006b6e:	4622      	mov	r2, r4
 8006b70:	210a      	movs	r1, #10
 8006b72:	4628      	mov	r0, r5
 8006b74:	f000 f87f 	bl	8006c76 <__swbuf_r>
 8006b78:	3001      	adds	r0, #1
 8006b7a:	d0d7      	beq.n	8006b2c <_puts_r+0x38>
 8006b7c:	250a      	movs	r5, #10
 8006b7e:	e7d7      	b.n	8006b30 <_puts_r+0x3c>
 8006b80:	4622      	mov	r2, r4
 8006b82:	4628      	mov	r0, r5
 8006b84:	f000 f877 	bl	8006c76 <__swbuf_r>
 8006b88:	3001      	adds	r0, #1
 8006b8a:	d1e7      	bne.n	8006b5c <_puts_r+0x68>
 8006b8c:	e7ce      	b.n	8006b2c <_puts_r+0x38>
 8006b8e:	3e01      	subs	r6, #1
 8006b90:	e7e4      	b.n	8006b5c <_puts_r+0x68>
 8006b92:	6823      	ldr	r3, [r4, #0]
 8006b94:	1c5a      	adds	r2, r3, #1
 8006b96:	6022      	str	r2, [r4, #0]
 8006b98:	220a      	movs	r2, #10
 8006b9a:	701a      	strb	r2, [r3, #0]
 8006b9c:	e7ee      	b.n	8006b7c <_puts_r+0x88>
	...

08006ba0 <puts>:
 8006ba0:	4b02      	ldr	r3, [pc, #8]	@ (8006bac <puts+0xc>)
 8006ba2:	4601      	mov	r1, r0
 8006ba4:	6818      	ldr	r0, [r3, #0]
 8006ba6:	f7ff bfa5 	b.w	8006af4 <_puts_r>
 8006baa:	bf00      	nop
 8006bac:	20000018 	.word	0x20000018

08006bb0 <siprintf>:
 8006bb0:	b40e      	push	{r1, r2, r3}
 8006bb2:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006bb6:	b500      	push	{lr}
 8006bb8:	b09c      	sub	sp, #112	@ 0x70
 8006bba:	ab1d      	add	r3, sp, #116	@ 0x74
 8006bbc:	9002      	str	r0, [sp, #8]
 8006bbe:	9006      	str	r0, [sp, #24]
 8006bc0:	9107      	str	r1, [sp, #28]
 8006bc2:	9104      	str	r1, [sp, #16]
 8006bc4:	4808      	ldr	r0, [pc, #32]	@ (8006be8 <siprintf+0x38>)
 8006bc6:	4909      	ldr	r1, [pc, #36]	@ (8006bec <siprintf+0x3c>)
 8006bc8:	f853 2b04 	ldr.w	r2, [r3], #4
 8006bcc:	9105      	str	r1, [sp, #20]
 8006bce:	6800      	ldr	r0, [r0, #0]
 8006bd0:	a902      	add	r1, sp, #8
 8006bd2:	9301      	str	r3, [sp, #4]
 8006bd4:	f002 fc46 	bl	8009464 <_svfiprintf_r>
 8006bd8:	2200      	movs	r2, #0
 8006bda:	9b02      	ldr	r3, [sp, #8]
 8006bdc:	701a      	strb	r2, [r3, #0]
 8006bde:	b01c      	add	sp, #112	@ 0x70
 8006be0:	f85d eb04 	ldr.w	lr, [sp], #4
 8006be4:	b003      	add	sp, #12
 8006be6:	4770      	bx	lr
 8006be8:	20000018 	.word	0x20000018
 8006bec:	ffff0208 	.word	0xffff0208

08006bf0 <__sread>:
 8006bf0:	b510      	push	{r4, lr}
 8006bf2:	460c      	mov	r4, r1
 8006bf4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006bf8:	f000 f900 	bl	8006dfc <_read_r>
 8006bfc:	2800      	cmp	r0, #0
 8006bfe:	bfab      	itete	ge
 8006c00:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006c02:	89a3      	ldrhlt	r3, [r4, #12]
 8006c04:	181b      	addge	r3, r3, r0
 8006c06:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006c0a:	bfac      	ite	ge
 8006c0c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006c0e:	81a3      	strhlt	r3, [r4, #12]
 8006c10:	bd10      	pop	{r4, pc}

08006c12 <__swrite>:
 8006c12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c16:	461f      	mov	r7, r3
 8006c18:	898b      	ldrh	r3, [r1, #12]
 8006c1a:	4605      	mov	r5, r0
 8006c1c:	05db      	lsls	r3, r3, #23
 8006c1e:	460c      	mov	r4, r1
 8006c20:	4616      	mov	r6, r2
 8006c22:	d505      	bpl.n	8006c30 <__swrite+0x1e>
 8006c24:	2302      	movs	r3, #2
 8006c26:	2200      	movs	r2, #0
 8006c28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c2c:	f000 f8d4 	bl	8006dd8 <_lseek_r>
 8006c30:	89a3      	ldrh	r3, [r4, #12]
 8006c32:	4632      	mov	r2, r6
 8006c34:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006c38:	81a3      	strh	r3, [r4, #12]
 8006c3a:	4628      	mov	r0, r5
 8006c3c:	463b      	mov	r3, r7
 8006c3e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006c42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006c46:	f000 b8eb 	b.w	8006e20 <_write_r>

08006c4a <__sseek>:
 8006c4a:	b510      	push	{r4, lr}
 8006c4c:	460c      	mov	r4, r1
 8006c4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c52:	f000 f8c1 	bl	8006dd8 <_lseek_r>
 8006c56:	1c43      	adds	r3, r0, #1
 8006c58:	89a3      	ldrh	r3, [r4, #12]
 8006c5a:	bf15      	itete	ne
 8006c5c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006c5e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006c62:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006c66:	81a3      	strheq	r3, [r4, #12]
 8006c68:	bf18      	it	ne
 8006c6a:	81a3      	strhne	r3, [r4, #12]
 8006c6c:	bd10      	pop	{r4, pc}

08006c6e <__sclose>:
 8006c6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c72:	f000 b8a1 	b.w	8006db8 <_close_r>

08006c76 <__swbuf_r>:
 8006c76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c78:	460e      	mov	r6, r1
 8006c7a:	4614      	mov	r4, r2
 8006c7c:	4605      	mov	r5, r0
 8006c7e:	b118      	cbz	r0, 8006c88 <__swbuf_r+0x12>
 8006c80:	6a03      	ldr	r3, [r0, #32]
 8006c82:	b90b      	cbnz	r3, 8006c88 <__swbuf_r+0x12>
 8006c84:	f7ff fee6 	bl	8006a54 <__sinit>
 8006c88:	69a3      	ldr	r3, [r4, #24]
 8006c8a:	60a3      	str	r3, [r4, #8]
 8006c8c:	89a3      	ldrh	r3, [r4, #12]
 8006c8e:	071a      	lsls	r2, r3, #28
 8006c90:	d501      	bpl.n	8006c96 <__swbuf_r+0x20>
 8006c92:	6923      	ldr	r3, [r4, #16]
 8006c94:	b943      	cbnz	r3, 8006ca8 <__swbuf_r+0x32>
 8006c96:	4621      	mov	r1, r4
 8006c98:	4628      	mov	r0, r5
 8006c9a:	f000 f82b 	bl	8006cf4 <__swsetup_r>
 8006c9e:	b118      	cbz	r0, 8006ca8 <__swbuf_r+0x32>
 8006ca0:	f04f 37ff 	mov.w	r7, #4294967295
 8006ca4:	4638      	mov	r0, r7
 8006ca6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006ca8:	6823      	ldr	r3, [r4, #0]
 8006caa:	6922      	ldr	r2, [r4, #16]
 8006cac:	b2f6      	uxtb	r6, r6
 8006cae:	1a98      	subs	r0, r3, r2
 8006cb0:	6963      	ldr	r3, [r4, #20]
 8006cb2:	4637      	mov	r7, r6
 8006cb4:	4283      	cmp	r3, r0
 8006cb6:	dc05      	bgt.n	8006cc4 <__swbuf_r+0x4e>
 8006cb8:	4621      	mov	r1, r4
 8006cba:	4628      	mov	r0, r5
 8006cbc:	f002 fe8e 	bl	80099dc <_fflush_r>
 8006cc0:	2800      	cmp	r0, #0
 8006cc2:	d1ed      	bne.n	8006ca0 <__swbuf_r+0x2a>
 8006cc4:	68a3      	ldr	r3, [r4, #8]
 8006cc6:	3b01      	subs	r3, #1
 8006cc8:	60a3      	str	r3, [r4, #8]
 8006cca:	6823      	ldr	r3, [r4, #0]
 8006ccc:	1c5a      	adds	r2, r3, #1
 8006cce:	6022      	str	r2, [r4, #0]
 8006cd0:	701e      	strb	r6, [r3, #0]
 8006cd2:	6962      	ldr	r2, [r4, #20]
 8006cd4:	1c43      	adds	r3, r0, #1
 8006cd6:	429a      	cmp	r2, r3
 8006cd8:	d004      	beq.n	8006ce4 <__swbuf_r+0x6e>
 8006cda:	89a3      	ldrh	r3, [r4, #12]
 8006cdc:	07db      	lsls	r3, r3, #31
 8006cde:	d5e1      	bpl.n	8006ca4 <__swbuf_r+0x2e>
 8006ce0:	2e0a      	cmp	r6, #10
 8006ce2:	d1df      	bne.n	8006ca4 <__swbuf_r+0x2e>
 8006ce4:	4621      	mov	r1, r4
 8006ce6:	4628      	mov	r0, r5
 8006ce8:	f002 fe78 	bl	80099dc <_fflush_r>
 8006cec:	2800      	cmp	r0, #0
 8006cee:	d0d9      	beq.n	8006ca4 <__swbuf_r+0x2e>
 8006cf0:	e7d6      	b.n	8006ca0 <__swbuf_r+0x2a>
	...

08006cf4 <__swsetup_r>:
 8006cf4:	b538      	push	{r3, r4, r5, lr}
 8006cf6:	4b29      	ldr	r3, [pc, #164]	@ (8006d9c <__swsetup_r+0xa8>)
 8006cf8:	4605      	mov	r5, r0
 8006cfa:	6818      	ldr	r0, [r3, #0]
 8006cfc:	460c      	mov	r4, r1
 8006cfe:	b118      	cbz	r0, 8006d08 <__swsetup_r+0x14>
 8006d00:	6a03      	ldr	r3, [r0, #32]
 8006d02:	b90b      	cbnz	r3, 8006d08 <__swsetup_r+0x14>
 8006d04:	f7ff fea6 	bl	8006a54 <__sinit>
 8006d08:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006d0c:	0719      	lsls	r1, r3, #28
 8006d0e:	d422      	bmi.n	8006d56 <__swsetup_r+0x62>
 8006d10:	06da      	lsls	r2, r3, #27
 8006d12:	d407      	bmi.n	8006d24 <__swsetup_r+0x30>
 8006d14:	2209      	movs	r2, #9
 8006d16:	602a      	str	r2, [r5, #0]
 8006d18:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006d1c:	f04f 30ff 	mov.w	r0, #4294967295
 8006d20:	81a3      	strh	r3, [r4, #12]
 8006d22:	e033      	b.n	8006d8c <__swsetup_r+0x98>
 8006d24:	0758      	lsls	r0, r3, #29
 8006d26:	d512      	bpl.n	8006d4e <__swsetup_r+0x5a>
 8006d28:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006d2a:	b141      	cbz	r1, 8006d3e <__swsetup_r+0x4a>
 8006d2c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006d30:	4299      	cmp	r1, r3
 8006d32:	d002      	beq.n	8006d3a <__swsetup_r+0x46>
 8006d34:	4628      	mov	r0, r5
 8006d36:	f000 ff17 	bl	8007b68 <_free_r>
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	6363      	str	r3, [r4, #52]	@ 0x34
 8006d3e:	89a3      	ldrh	r3, [r4, #12]
 8006d40:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006d44:	81a3      	strh	r3, [r4, #12]
 8006d46:	2300      	movs	r3, #0
 8006d48:	6063      	str	r3, [r4, #4]
 8006d4a:	6923      	ldr	r3, [r4, #16]
 8006d4c:	6023      	str	r3, [r4, #0]
 8006d4e:	89a3      	ldrh	r3, [r4, #12]
 8006d50:	f043 0308 	orr.w	r3, r3, #8
 8006d54:	81a3      	strh	r3, [r4, #12]
 8006d56:	6923      	ldr	r3, [r4, #16]
 8006d58:	b94b      	cbnz	r3, 8006d6e <__swsetup_r+0x7a>
 8006d5a:	89a3      	ldrh	r3, [r4, #12]
 8006d5c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006d60:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006d64:	d003      	beq.n	8006d6e <__swsetup_r+0x7a>
 8006d66:	4621      	mov	r1, r4
 8006d68:	4628      	mov	r0, r5
 8006d6a:	f002 fe84 	bl	8009a76 <__smakebuf_r>
 8006d6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006d72:	f013 0201 	ands.w	r2, r3, #1
 8006d76:	d00a      	beq.n	8006d8e <__swsetup_r+0x9a>
 8006d78:	2200      	movs	r2, #0
 8006d7a:	60a2      	str	r2, [r4, #8]
 8006d7c:	6962      	ldr	r2, [r4, #20]
 8006d7e:	4252      	negs	r2, r2
 8006d80:	61a2      	str	r2, [r4, #24]
 8006d82:	6922      	ldr	r2, [r4, #16]
 8006d84:	b942      	cbnz	r2, 8006d98 <__swsetup_r+0xa4>
 8006d86:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006d8a:	d1c5      	bne.n	8006d18 <__swsetup_r+0x24>
 8006d8c:	bd38      	pop	{r3, r4, r5, pc}
 8006d8e:	0799      	lsls	r1, r3, #30
 8006d90:	bf58      	it	pl
 8006d92:	6962      	ldrpl	r2, [r4, #20]
 8006d94:	60a2      	str	r2, [r4, #8]
 8006d96:	e7f4      	b.n	8006d82 <__swsetup_r+0x8e>
 8006d98:	2000      	movs	r0, #0
 8006d9a:	e7f7      	b.n	8006d8c <__swsetup_r+0x98>
 8006d9c:	20000018 	.word	0x20000018

08006da0 <memset>:
 8006da0:	4603      	mov	r3, r0
 8006da2:	4402      	add	r2, r0
 8006da4:	4293      	cmp	r3, r2
 8006da6:	d100      	bne.n	8006daa <memset+0xa>
 8006da8:	4770      	bx	lr
 8006daa:	f803 1b01 	strb.w	r1, [r3], #1
 8006dae:	e7f9      	b.n	8006da4 <memset+0x4>

08006db0 <_localeconv_r>:
 8006db0:	4800      	ldr	r0, [pc, #0]	@ (8006db4 <_localeconv_r+0x4>)
 8006db2:	4770      	bx	lr
 8006db4:	20000158 	.word	0x20000158

08006db8 <_close_r>:
 8006db8:	b538      	push	{r3, r4, r5, lr}
 8006dba:	2300      	movs	r3, #0
 8006dbc:	4d05      	ldr	r5, [pc, #20]	@ (8006dd4 <_close_r+0x1c>)
 8006dbe:	4604      	mov	r4, r0
 8006dc0:	4608      	mov	r0, r1
 8006dc2:	602b      	str	r3, [r5, #0]
 8006dc4:	f7fa fe0d 	bl	80019e2 <_close>
 8006dc8:	1c43      	adds	r3, r0, #1
 8006dca:	d102      	bne.n	8006dd2 <_close_r+0x1a>
 8006dcc:	682b      	ldr	r3, [r5, #0]
 8006dce:	b103      	cbz	r3, 8006dd2 <_close_r+0x1a>
 8006dd0:	6023      	str	r3, [r4, #0]
 8006dd2:	bd38      	pop	{r3, r4, r5, pc}
 8006dd4:	20000560 	.word	0x20000560

08006dd8 <_lseek_r>:
 8006dd8:	b538      	push	{r3, r4, r5, lr}
 8006dda:	4604      	mov	r4, r0
 8006ddc:	4608      	mov	r0, r1
 8006dde:	4611      	mov	r1, r2
 8006de0:	2200      	movs	r2, #0
 8006de2:	4d05      	ldr	r5, [pc, #20]	@ (8006df8 <_lseek_r+0x20>)
 8006de4:	602a      	str	r2, [r5, #0]
 8006de6:	461a      	mov	r2, r3
 8006de8:	f7fa fe1f 	bl	8001a2a <_lseek>
 8006dec:	1c43      	adds	r3, r0, #1
 8006dee:	d102      	bne.n	8006df6 <_lseek_r+0x1e>
 8006df0:	682b      	ldr	r3, [r5, #0]
 8006df2:	b103      	cbz	r3, 8006df6 <_lseek_r+0x1e>
 8006df4:	6023      	str	r3, [r4, #0]
 8006df6:	bd38      	pop	{r3, r4, r5, pc}
 8006df8:	20000560 	.word	0x20000560

08006dfc <_read_r>:
 8006dfc:	b538      	push	{r3, r4, r5, lr}
 8006dfe:	4604      	mov	r4, r0
 8006e00:	4608      	mov	r0, r1
 8006e02:	4611      	mov	r1, r2
 8006e04:	2200      	movs	r2, #0
 8006e06:	4d05      	ldr	r5, [pc, #20]	@ (8006e1c <_read_r+0x20>)
 8006e08:	602a      	str	r2, [r5, #0]
 8006e0a:	461a      	mov	r2, r3
 8006e0c:	f7fa fdb0 	bl	8001970 <_read>
 8006e10:	1c43      	adds	r3, r0, #1
 8006e12:	d102      	bne.n	8006e1a <_read_r+0x1e>
 8006e14:	682b      	ldr	r3, [r5, #0]
 8006e16:	b103      	cbz	r3, 8006e1a <_read_r+0x1e>
 8006e18:	6023      	str	r3, [r4, #0]
 8006e1a:	bd38      	pop	{r3, r4, r5, pc}
 8006e1c:	20000560 	.word	0x20000560

08006e20 <_write_r>:
 8006e20:	b538      	push	{r3, r4, r5, lr}
 8006e22:	4604      	mov	r4, r0
 8006e24:	4608      	mov	r0, r1
 8006e26:	4611      	mov	r1, r2
 8006e28:	2200      	movs	r2, #0
 8006e2a:	4d05      	ldr	r5, [pc, #20]	@ (8006e40 <_write_r+0x20>)
 8006e2c:	602a      	str	r2, [r5, #0]
 8006e2e:	461a      	mov	r2, r3
 8006e30:	f7fa fdbb 	bl	80019aa <_write>
 8006e34:	1c43      	adds	r3, r0, #1
 8006e36:	d102      	bne.n	8006e3e <_write_r+0x1e>
 8006e38:	682b      	ldr	r3, [r5, #0]
 8006e3a:	b103      	cbz	r3, 8006e3e <_write_r+0x1e>
 8006e3c:	6023      	str	r3, [r4, #0]
 8006e3e:	bd38      	pop	{r3, r4, r5, pc}
 8006e40:	20000560 	.word	0x20000560

08006e44 <__errno>:
 8006e44:	4b01      	ldr	r3, [pc, #4]	@ (8006e4c <__errno+0x8>)
 8006e46:	6818      	ldr	r0, [r3, #0]
 8006e48:	4770      	bx	lr
 8006e4a:	bf00      	nop
 8006e4c:	20000018 	.word	0x20000018

08006e50 <__libc_init_array>:
 8006e50:	b570      	push	{r4, r5, r6, lr}
 8006e52:	2600      	movs	r6, #0
 8006e54:	4d0c      	ldr	r5, [pc, #48]	@ (8006e88 <__libc_init_array+0x38>)
 8006e56:	4c0d      	ldr	r4, [pc, #52]	@ (8006e8c <__libc_init_array+0x3c>)
 8006e58:	1b64      	subs	r4, r4, r5
 8006e5a:	10a4      	asrs	r4, r4, #2
 8006e5c:	42a6      	cmp	r6, r4
 8006e5e:	d109      	bne.n	8006e74 <__libc_init_array+0x24>
 8006e60:	f003 fb0a 	bl	800a478 <_init>
 8006e64:	2600      	movs	r6, #0
 8006e66:	4d0a      	ldr	r5, [pc, #40]	@ (8006e90 <__libc_init_array+0x40>)
 8006e68:	4c0a      	ldr	r4, [pc, #40]	@ (8006e94 <__libc_init_array+0x44>)
 8006e6a:	1b64      	subs	r4, r4, r5
 8006e6c:	10a4      	asrs	r4, r4, #2
 8006e6e:	42a6      	cmp	r6, r4
 8006e70:	d105      	bne.n	8006e7e <__libc_init_array+0x2e>
 8006e72:	bd70      	pop	{r4, r5, r6, pc}
 8006e74:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e78:	4798      	blx	r3
 8006e7a:	3601      	adds	r6, #1
 8006e7c:	e7ee      	b.n	8006e5c <__libc_init_array+0xc>
 8006e7e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e82:	4798      	blx	r3
 8006e84:	3601      	adds	r6, #1
 8006e86:	e7f2      	b.n	8006e6e <__libc_init_array+0x1e>
 8006e88:	0800b208 	.word	0x0800b208
 8006e8c:	0800b208 	.word	0x0800b208
 8006e90:	0800b208 	.word	0x0800b208
 8006e94:	0800b20c 	.word	0x0800b20c

08006e98 <__retarget_lock_init_recursive>:
 8006e98:	4770      	bx	lr

08006e9a <__retarget_lock_acquire_recursive>:
 8006e9a:	4770      	bx	lr

08006e9c <__retarget_lock_release_recursive>:
 8006e9c:	4770      	bx	lr

08006e9e <memchr>:
 8006e9e:	4603      	mov	r3, r0
 8006ea0:	b510      	push	{r4, lr}
 8006ea2:	b2c9      	uxtb	r1, r1
 8006ea4:	4402      	add	r2, r0
 8006ea6:	4293      	cmp	r3, r2
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	d101      	bne.n	8006eb0 <memchr+0x12>
 8006eac:	2000      	movs	r0, #0
 8006eae:	e003      	b.n	8006eb8 <memchr+0x1a>
 8006eb0:	7804      	ldrb	r4, [r0, #0]
 8006eb2:	3301      	adds	r3, #1
 8006eb4:	428c      	cmp	r4, r1
 8006eb6:	d1f6      	bne.n	8006ea6 <memchr+0x8>
 8006eb8:	bd10      	pop	{r4, pc}
	...

08006ebc <nanf>:
 8006ebc:	4800      	ldr	r0, [pc, #0]	@ (8006ec0 <nanf+0x4>)
 8006ebe:	4770      	bx	lr
 8006ec0:	7fc00000 	.word	0x7fc00000

08006ec4 <quorem>:
 8006ec4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ec8:	6903      	ldr	r3, [r0, #16]
 8006eca:	690c      	ldr	r4, [r1, #16]
 8006ecc:	4607      	mov	r7, r0
 8006ece:	42a3      	cmp	r3, r4
 8006ed0:	db7e      	blt.n	8006fd0 <quorem+0x10c>
 8006ed2:	3c01      	subs	r4, #1
 8006ed4:	00a3      	lsls	r3, r4, #2
 8006ed6:	f100 0514 	add.w	r5, r0, #20
 8006eda:	f101 0814 	add.w	r8, r1, #20
 8006ede:	9300      	str	r3, [sp, #0]
 8006ee0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006ee4:	9301      	str	r3, [sp, #4]
 8006ee6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006eea:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006eee:	3301      	adds	r3, #1
 8006ef0:	429a      	cmp	r2, r3
 8006ef2:	fbb2 f6f3 	udiv	r6, r2, r3
 8006ef6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006efa:	d32e      	bcc.n	8006f5a <quorem+0x96>
 8006efc:	f04f 0a00 	mov.w	sl, #0
 8006f00:	46c4      	mov	ip, r8
 8006f02:	46ae      	mov	lr, r5
 8006f04:	46d3      	mov	fp, sl
 8006f06:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006f0a:	b298      	uxth	r0, r3
 8006f0c:	fb06 a000 	mla	r0, r6, r0, sl
 8006f10:	0c1b      	lsrs	r3, r3, #16
 8006f12:	0c02      	lsrs	r2, r0, #16
 8006f14:	fb06 2303 	mla	r3, r6, r3, r2
 8006f18:	f8de 2000 	ldr.w	r2, [lr]
 8006f1c:	b280      	uxth	r0, r0
 8006f1e:	b292      	uxth	r2, r2
 8006f20:	1a12      	subs	r2, r2, r0
 8006f22:	445a      	add	r2, fp
 8006f24:	f8de 0000 	ldr.w	r0, [lr]
 8006f28:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006f2c:	b29b      	uxth	r3, r3
 8006f2e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006f32:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006f36:	b292      	uxth	r2, r2
 8006f38:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006f3c:	45e1      	cmp	r9, ip
 8006f3e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006f42:	f84e 2b04 	str.w	r2, [lr], #4
 8006f46:	d2de      	bcs.n	8006f06 <quorem+0x42>
 8006f48:	9b00      	ldr	r3, [sp, #0]
 8006f4a:	58eb      	ldr	r3, [r5, r3]
 8006f4c:	b92b      	cbnz	r3, 8006f5a <quorem+0x96>
 8006f4e:	9b01      	ldr	r3, [sp, #4]
 8006f50:	3b04      	subs	r3, #4
 8006f52:	429d      	cmp	r5, r3
 8006f54:	461a      	mov	r2, r3
 8006f56:	d32f      	bcc.n	8006fb8 <quorem+0xf4>
 8006f58:	613c      	str	r4, [r7, #16]
 8006f5a:	4638      	mov	r0, r7
 8006f5c:	f001 f9c4 	bl	80082e8 <__mcmp>
 8006f60:	2800      	cmp	r0, #0
 8006f62:	db25      	blt.n	8006fb0 <quorem+0xec>
 8006f64:	4629      	mov	r1, r5
 8006f66:	2000      	movs	r0, #0
 8006f68:	f858 2b04 	ldr.w	r2, [r8], #4
 8006f6c:	f8d1 c000 	ldr.w	ip, [r1]
 8006f70:	fa1f fe82 	uxth.w	lr, r2
 8006f74:	fa1f f38c 	uxth.w	r3, ip
 8006f78:	eba3 030e 	sub.w	r3, r3, lr
 8006f7c:	4403      	add	r3, r0
 8006f7e:	0c12      	lsrs	r2, r2, #16
 8006f80:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006f84:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8006f88:	b29b      	uxth	r3, r3
 8006f8a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006f8e:	45c1      	cmp	r9, r8
 8006f90:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006f94:	f841 3b04 	str.w	r3, [r1], #4
 8006f98:	d2e6      	bcs.n	8006f68 <quorem+0xa4>
 8006f9a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006f9e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006fa2:	b922      	cbnz	r2, 8006fae <quorem+0xea>
 8006fa4:	3b04      	subs	r3, #4
 8006fa6:	429d      	cmp	r5, r3
 8006fa8:	461a      	mov	r2, r3
 8006faa:	d30b      	bcc.n	8006fc4 <quorem+0x100>
 8006fac:	613c      	str	r4, [r7, #16]
 8006fae:	3601      	adds	r6, #1
 8006fb0:	4630      	mov	r0, r6
 8006fb2:	b003      	add	sp, #12
 8006fb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fb8:	6812      	ldr	r2, [r2, #0]
 8006fba:	3b04      	subs	r3, #4
 8006fbc:	2a00      	cmp	r2, #0
 8006fbe:	d1cb      	bne.n	8006f58 <quorem+0x94>
 8006fc0:	3c01      	subs	r4, #1
 8006fc2:	e7c6      	b.n	8006f52 <quorem+0x8e>
 8006fc4:	6812      	ldr	r2, [r2, #0]
 8006fc6:	3b04      	subs	r3, #4
 8006fc8:	2a00      	cmp	r2, #0
 8006fca:	d1ef      	bne.n	8006fac <quorem+0xe8>
 8006fcc:	3c01      	subs	r4, #1
 8006fce:	e7ea      	b.n	8006fa6 <quorem+0xe2>
 8006fd0:	2000      	movs	r0, #0
 8006fd2:	e7ee      	b.n	8006fb2 <quorem+0xee>
 8006fd4:	0000      	movs	r0, r0
	...

08006fd8 <_dtoa_r>:
 8006fd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fdc:	4614      	mov	r4, r2
 8006fde:	461d      	mov	r5, r3
 8006fe0:	69c7      	ldr	r7, [r0, #28]
 8006fe2:	b097      	sub	sp, #92	@ 0x5c
 8006fe4:	4683      	mov	fp, r0
 8006fe6:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8006fea:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8006fec:	b97f      	cbnz	r7, 800700e <_dtoa_r+0x36>
 8006fee:	2010      	movs	r0, #16
 8006ff0:	f000 fe02 	bl	8007bf8 <malloc>
 8006ff4:	4602      	mov	r2, r0
 8006ff6:	f8cb 001c 	str.w	r0, [fp, #28]
 8006ffa:	b920      	cbnz	r0, 8007006 <_dtoa_r+0x2e>
 8006ffc:	21ef      	movs	r1, #239	@ 0xef
 8006ffe:	4ba8      	ldr	r3, [pc, #672]	@ (80072a0 <_dtoa_r+0x2c8>)
 8007000:	48a8      	ldr	r0, [pc, #672]	@ (80072a4 <_dtoa_r+0x2cc>)
 8007002:	f002 fe1b 	bl	8009c3c <__assert_func>
 8007006:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800700a:	6007      	str	r7, [r0, #0]
 800700c:	60c7      	str	r7, [r0, #12]
 800700e:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007012:	6819      	ldr	r1, [r3, #0]
 8007014:	b159      	cbz	r1, 800702e <_dtoa_r+0x56>
 8007016:	685a      	ldr	r2, [r3, #4]
 8007018:	2301      	movs	r3, #1
 800701a:	4093      	lsls	r3, r2
 800701c:	604a      	str	r2, [r1, #4]
 800701e:	608b      	str	r3, [r1, #8]
 8007020:	4658      	mov	r0, fp
 8007022:	f000 fedf 	bl	8007de4 <_Bfree>
 8007026:	2200      	movs	r2, #0
 8007028:	f8db 301c 	ldr.w	r3, [fp, #28]
 800702c:	601a      	str	r2, [r3, #0]
 800702e:	1e2b      	subs	r3, r5, #0
 8007030:	bfaf      	iteee	ge
 8007032:	2300      	movge	r3, #0
 8007034:	2201      	movlt	r2, #1
 8007036:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800703a:	9303      	strlt	r3, [sp, #12]
 800703c:	bfa8      	it	ge
 800703e:	6033      	strge	r3, [r6, #0]
 8007040:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8007044:	4b98      	ldr	r3, [pc, #608]	@ (80072a8 <_dtoa_r+0x2d0>)
 8007046:	bfb8      	it	lt
 8007048:	6032      	strlt	r2, [r6, #0]
 800704a:	ea33 0308 	bics.w	r3, r3, r8
 800704e:	d112      	bne.n	8007076 <_dtoa_r+0x9e>
 8007050:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007054:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8007056:	6013      	str	r3, [r2, #0]
 8007058:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800705c:	4323      	orrs	r3, r4
 800705e:	f000 8550 	beq.w	8007b02 <_dtoa_r+0xb2a>
 8007062:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007064:	f8df a244 	ldr.w	sl, [pc, #580]	@ 80072ac <_dtoa_r+0x2d4>
 8007068:	2b00      	cmp	r3, #0
 800706a:	f000 8552 	beq.w	8007b12 <_dtoa_r+0xb3a>
 800706e:	f10a 0303 	add.w	r3, sl, #3
 8007072:	f000 bd4c 	b.w	8007b0e <_dtoa_r+0xb36>
 8007076:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800707a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800707e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007082:	2200      	movs	r2, #0
 8007084:	2300      	movs	r3, #0
 8007086:	f7f9 fc8f 	bl	80009a8 <__aeabi_dcmpeq>
 800708a:	4607      	mov	r7, r0
 800708c:	b158      	cbz	r0, 80070a6 <_dtoa_r+0xce>
 800708e:	2301      	movs	r3, #1
 8007090:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8007092:	6013      	str	r3, [r2, #0]
 8007094:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007096:	b113      	cbz	r3, 800709e <_dtoa_r+0xc6>
 8007098:	4b85      	ldr	r3, [pc, #532]	@ (80072b0 <_dtoa_r+0x2d8>)
 800709a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800709c:	6013      	str	r3, [r2, #0]
 800709e:	f8df a214 	ldr.w	sl, [pc, #532]	@ 80072b4 <_dtoa_r+0x2dc>
 80070a2:	f000 bd36 	b.w	8007b12 <_dtoa_r+0xb3a>
 80070a6:	ab14      	add	r3, sp, #80	@ 0x50
 80070a8:	9301      	str	r3, [sp, #4]
 80070aa:	ab15      	add	r3, sp, #84	@ 0x54
 80070ac:	9300      	str	r3, [sp, #0]
 80070ae:	4658      	mov	r0, fp
 80070b0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80070b4:	f001 fa30 	bl	8008518 <__d2b>
 80070b8:	f3c8 560a 	ubfx	r6, r8, #20, #11
 80070bc:	4681      	mov	r9, r0
 80070be:	2e00      	cmp	r6, #0
 80070c0:	d077      	beq.n	80071b2 <_dtoa_r+0x1da>
 80070c2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80070c6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80070c8:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80070cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80070d0:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80070d4:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80070d8:	9712      	str	r7, [sp, #72]	@ 0x48
 80070da:	4619      	mov	r1, r3
 80070dc:	2200      	movs	r2, #0
 80070de:	4b76      	ldr	r3, [pc, #472]	@ (80072b8 <_dtoa_r+0x2e0>)
 80070e0:	f7f9 f842 	bl	8000168 <__aeabi_dsub>
 80070e4:	a368      	add	r3, pc, #416	@ (adr r3, 8007288 <_dtoa_r+0x2b0>)
 80070e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070ea:	f7f9 f9f5 	bl	80004d8 <__aeabi_dmul>
 80070ee:	a368      	add	r3, pc, #416	@ (adr r3, 8007290 <_dtoa_r+0x2b8>)
 80070f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070f4:	f7f9 f83a 	bl	800016c <__adddf3>
 80070f8:	4604      	mov	r4, r0
 80070fa:	4630      	mov	r0, r6
 80070fc:	460d      	mov	r5, r1
 80070fe:	f7f9 f981 	bl	8000404 <__aeabi_i2d>
 8007102:	a365      	add	r3, pc, #404	@ (adr r3, 8007298 <_dtoa_r+0x2c0>)
 8007104:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007108:	f7f9 f9e6 	bl	80004d8 <__aeabi_dmul>
 800710c:	4602      	mov	r2, r0
 800710e:	460b      	mov	r3, r1
 8007110:	4620      	mov	r0, r4
 8007112:	4629      	mov	r1, r5
 8007114:	f7f9 f82a 	bl	800016c <__adddf3>
 8007118:	4604      	mov	r4, r0
 800711a:	460d      	mov	r5, r1
 800711c:	f7f9 fc8c 	bl	8000a38 <__aeabi_d2iz>
 8007120:	2200      	movs	r2, #0
 8007122:	4607      	mov	r7, r0
 8007124:	2300      	movs	r3, #0
 8007126:	4620      	mov	r0, r4
 8007128:	4629      	mov	r1, r5
 800712a:	f7f9 fc47 	bl	80009bc <__aeabi_dcmplt>
 800712e:	b140      	cbz	r0, 8007142 <_dtoa_r+0x16a>
 8007130:	4638      	mov	r0, r7
 8007132:	f7f9 f967 	bl	8000404 <__aeabi_i2d>
 8007136:	4622      	mov	r2, r4
 8007138:	462b      	mov	r3, r5
 800713a:	f7f9 fc35 	bl	80009a8 <__aeabi_dcmpeq>
 800713e:	b900      	cbnz	r0, 8007142 <_dtoa_r+0x16a>
 8007140:	3f01      	subs	r7, #1
 8007142:	2f16      	cmp	r7, #22
 8007144:	d853      	bhi.n	80071ee <_dtoa_r+0x216>
 8007146:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800714a:	4b5c      	ldr	r3, [pc, #368]	@ (80072bc <_dtoa_r+0x2e4>)
 800714c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007154:	f7f9 fc32 	bl	80009bc <__aeabi_dcmplt>
 8007158:	2800      	cmp	r0, #0
 800715a:	d04a      	beq.n	80071f2 <_dtoa_r+0x21a>
 800715c:	2300      	movs	r3, #0
 800715e:	3f01      	subs	r7, #1
 8007160:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007162:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007164:	1b9b      	subs	r3, r3, r6
 8007166:	1e5a      	subs	r2, r3, #1
 8007168:	bf46      	itte	mi
 800716a:	f1c3 0801 	rsbmi	r8, r3, #1
 800716e:	2300      	movmi	r3, #0
 8007170:	f04f 0800 	movpl.w	r8, #0
 8007174:	9209      	str	r2, [sp, #36]	@ 0x24
 8007176:	bf48      	it	mi
 8007178:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800717a:	2f00      	cmp	r7, #0
 800717c:	db3b      	blt.n	80071f6 <_dtoa_r+0x21e>
 800717e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007180:	970e      	str	r7, [sp, #56]	@ 0x38
 8007182:	443b      	add	r3, r7
 8007184:	9309      	str	r3, [sp, #36]	@ 0x24
 8007186:	2300      	movs	r3, #0
 8007188:	930a      	str	r3, [sp, #40]	@ 0x28
 800718a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800718c:	2b09      	cmp	r3, #9
 800718e:	d866      	bhi.n	800725e <_dtoa_r+0x286>
 8007190:	2b05      	cmp	r3, #5
 8007192:	bfc4      	itt	gt
 8007194:	3b04      	subgt	r3, #4
 8007196:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8007198:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800719a:	bfc8      	it	gt
 800719c:	2400      	movgt	r4, #0
 800719e:	f1a3 0302 	sub.w	r3, r3, #2
 80071a2:	bfd8      	it	le
 80071a4:	2401      	movle	r4, #1
 80071a6:	2b03      	cmp	r3, #3
 80071a8:	d864      	bhi.n	8007274 <_dtoa_r+0x29c>
 80071aa:	e8df f003 	tbb	[pc, r3]
 80071ae:	382b      	.short	0x382b
 80071b0:	5636      	.short	0x5636
 80071b2:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80071b6:	441e      	add	r6, r3
 80071b8:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80071bc:	2b20      	cmp	r3, #32
 80071be:	bfc1      	itttt	gt
 80071c0:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80071c4:	fa08 f803 	lslgt.w	r8, r8, r3
 80071c8:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80071cc:	fa24 f303 	lsrgt.w	r3, r4, r3
 80071d0:	bfd6      	itet	le
 80071d2:	f1c3 0320 	rsble	r3, r3, #32
 80071d6:	ea48 0003 	orrgt.w	r0, r8, r3
 80071da:	fa04 f003 	lslle.w	r0, r4, r3
 80071de:	f7f9 f901 	bl	80003e4 <__aeabi_ui2d>
 80071e2:	2201      	movs	r2, #1
 80071e4:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80071e8:	3e01      	subs	r6, #1
 80071ea:	9212      	str	r2, [sp, #72]	@ 0x48
 80071ec:	e775      	b.n	80070da <_dtoa_r+0x102>
 80071ee:	2301      	movs	r3, #1
 80071f0:	e7b6      	b.n	8007160 <_dtoa_r+0x188>
 80071f2:	900f      	str	r0, [sp, #60]	@ 0x3c
 80071f4:	e7b5      	b.n	8007162 <_dtoa_r+0x18a>
 80071f6:	427b      	negs	r3, r7
 80071f8:	930a      	str	r3, [sp, #40]	@ 0x28
 80071fa:	2300      	movs	r3, #0
 80071fc:	eba8 0807 	sub.w	r8, r8, r7
 8007200:	930e      	str	r3, [sp, #56]	@ 0x38
 8007202:	e7c2      	b.n	800718a <_dtoa_r+0x1b2>
 8007204:	2300      	movs	r3, #0
 8007206:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007208:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800720a:	2b00      	cmp	r3, #0
 800720c:	dc35      	bgt.n	800727a <_dtoa_r+0x2a2>
 800720e:	2301      	movs	r3, #1
 8007210:	461a      	mov	r2, r3
 8007212:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8007216:	9221      	str	r2, [sp, #132]	@ 0x84
 8007218:	e00b      	b.n	8007232 <_dtoa_r+0x25a>
 800721a:	2301      	movs	r3, #1
 800721c:	e7f3      	b.n	8007206 <_dtoa_r+0x22e>
 800721e:	2300      	movs	r3, #0
 8007220:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007222:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007224:	18fb      	adds	r3, r7, r3
 8007226:	9308      	str	r3, [sp, #32]
 8007228:	3301      	adds	r3, #1
 800722a:	2b01      	cmp	r3, #1
 800722c:	9307      	str	r3, [sp, #28]
 800722e:	bfb8      	it	lt
 8007230:	2301      	movlt	r3, #1
 8007232:	2100      	movs	r1, #0
 8007234:	2204      	movs	r2, #4
 8007236:	f8db 001c 	ldr.w	r0, [fp, #28]
 800723a:	f102 0514 	add.w	r5, r2, #20
 800723e:	429d      	cmp	r5, r3
 8007240:	d91f      	bls.n	8007282 <_dtoa_r+0x2aa>
 8007242:	6041      	str	r1, [r0, #4]
 8007244:	4658      	mov	r0, fp
 8007246:	f000 fd8d 	bl	8007d64 <_Balloc>
 800724a:	4682      	mov	sl, r0
 800724c:	2800      	cmp	r0, #0
 800724e:	d139      	bne.n	80072c4 <_dtoa_r+0x2ec>
 8007250:	4602      	mov	r2, r0
 8007252:	f240 11af 	movw	r1, #431	@ 0x1af
 8007256:	4b1a      	ldr	r3, [pc, #104]	@ (80072c0 <_dtoa_r+0x2e8>)
 8007258:	e6d2      	b.n	8007000 <_dtoa_r+0x28>
 800725a:	2301      	movs	r3, #1
 800725c:	e7e0      	b.n	8007220 <_dtoa_r+0x248>
 800725e:	2401      	movs	r4, #1
 8007260:	2300      	movs	r3, #0
 8007262:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007264:	9320      	str	r3, [sp, #128]	@ 0x80
 8007266:	f04f 33ff 	mov.w	r3, #4294967295
 800726a:	2200      	movs	r2, #0
 800726c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8007270:	2312      	movs	r3, #18
 8007272:	e7d0      	b.n	8007216 <_dtoa_r+0x23e>
 8007274:	2301      	movs	r3, #1
 8007276:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007278:	e7f5      	b.n	8007266 <_dtoa_r+0x28e>
 800727a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800727c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8007280:	e7d7      	b.n	8007232 <_dtoa_r+0x25a>
 8007282:	3101      	adds	r1, #1
 8007284:	0052      	lsls	r2, r2, #1
 8007286:	e7d8      	b.n	800723a <_dtoa_r+0x262>
 8007288:	636f4361 	.word	0x636f4361
 800728c:	3fd287a7 	.word	0x3fd287a7
 8007290:	8b60c8b3 	.word	0x8b60c8b3
 8007294:	3fc68a28 	.word	0x3fc68a28
 8007298:	509f79fb 	.word	0x509f79fb
 800729c:	3fd34413 	.word	0x3fd34413
 80072a0:	0800ae14 	.word	0x0800ae14
 80072a4:	0800ae2b 	.word	0x0800ae2b
 80072a8:	7ff00000 	.word	0x7ff00000
 80072ac:	0800ae10 	.word	0x0800ae10
 80072b0:	0800addf 	.word	0x0800addf
 80072b4:	0800adde 	.word	0x0800adde
 80072b8:	3ff80000 	.word	0x3ff80000
 80072bc:	0800af28 	.word	0x0800af28
 80072c0:	0800ae83 	.word	0x0800ae83
 80072c4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80072c8:	6018      	str	r0, [r3, #0]
 80072ca:	9b07      	ldr	r3, [sp, #28]
 80072cc:	2b0e      	cmp	r3, #14
 80072ce:	f200 80a4 	bhi.w	800741a <_dtoa_r+0x442>
 80072d2:	2c00      	cmp	r4, #0
 80072d4:	f000 80a1 	beq.w	800741a <_dtoa_r+0x442>
 80072d8:	2f00      	cmp	r7, #0
 80072da:	dd33      	ble.n	8007344 <_dtoa_r+0x36c>
 80072dc:	4b86      	ldr	r3, [pc, #536]	@ (80074f8 <_dtoa_r+0x520>)
 80072de:	f007 020f 	and.w	r2, r7, #15
 80072e2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80072e6:	05f8      	lsls	r0, r7, #23
 80072e8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80072ec:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80072f0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80072f4:	d516      	bpl.n	8007324 <_dtoa_r+0x34c>
 80072f6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80072fa:	4b80      	ldr	r3, [pc, #512]	@ (80074fc <_dtoa_r+0x524>)
 80072fc:	2603      	movs	r6, #3
 80072fe:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007302:	f7f9 fa13 	bl	800072c <__aeabi_ddiv>
 8007306:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800730a:	f004 040f 	and.w	r4, r4, #15
 800730e:	4d7b      	ldr	r5, [pc, #492]	@ (80074fc <_dtoa_r+0x524>)
 8007310:	b954      	cbnz	r4, 8007328 <_dtoa_r+0x350>
 8007312:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007316:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800731a:	f7f9 fa07 	bl	800072c <__aeabi_ddiv>
 800731e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007322:	e028      	b.n	8007376 <_dtoa_r+0x39e>
 8007324:	2602      	movs	r6, #2
 8007326:	e7f2      	b.n	800730e <_dtoa_r+0x336>
 8007328:	07e1      	lsls	r1, r4, #31
 800732a:	d508      	bpl.n	800733e <_dtoa_r+0x366>
 800732c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007330:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007334:	f7f9 f8d0 	bl	80004d8 <__aeabi_dmul>
 8007338:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800733c:	3601      	adds	r6, #1
 800733e:	1064      	asrs	r4, r4, #1
 8007340:	3508      	adds	r5, #8
 8007342:	e7e5      	b.n	8007310 <_dtoa_r+0x338>
 8007344:	f000 80d2 	beq.w	80074ec <_dtoa_r+0x514>
 8007348:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800734c:	427c      	negs	r4, r7
 800734e:	4b6a      	ldr	r3, [pc, #424]	@ (80074f8 <_dtoa_r+0x520>)
 8007350:	f004 020f 	and.w	r2, r4, #15
 8007354:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800735c:	f7f9 f8bc 	bl	80004d8 <__aeabi_dmul>
 8007360:	2602      	movs	r6, #2
 8007362:	2300      	movs	r3, #0
 8007364:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007368:	4d64      	ldr	r5, [pc, #400]	@ (80074fc <_dtoa_r+0x524>)
 800736a:	1124      	asrs	r4, r4, #4
 800736c:	2c00      	cmp	r4, #0
 800736e:	f040 80b2 	bne.w	80074d6 <_dtoa_r+0x4fe>
 8007372:	2b00      	cmp	r3, #0
 8007374:	d1d3      	bne.n	800731e <_dtoa_r+0x346>
 8007376:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800737a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800737c:	2b00      	cmp	r3, #0
 800737e:	f000 80b7 	beq.w	80074f0 <_dtoa_r+0x518>
 8007382:	2200      	movs	r2, #0
 8007384:	4620      	mov	r0, r4
 8007386:	4629      	mov	r1, r5
 8007388:	4b5d      	ldr	r3, [pc, #372]	@ (8007500 <_dtoa_r+0x528>)
 800738a:	f7f9 fb17 	bl	80009bc <__aeabi_dcmplt>
 800738e:	2800      	cmp	r0, #0
 8007390:	f000 80ae 	beq.w	80074f0 <_dtoa_r+0x518>
 8007394:	9b07      	ldr	r3, [sp, #28]
 8007396:	2b00      	cmp	r3, #0
 8007398:	f000 80aa 	beq.w	80074f0 <_dtoa_r+0x518>
 800739c:	9b08      	ldr	r3, [sp, #32]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	dd37      	ble.n	8007412 <_dtoa_r+0x43a>
 80073a2:	1e7b      	subs	r3, r7, #1
 80073a4:	4620      	mov	r0, r4
 80073a6:	9304      	str	r3, [sp, #16]
 80073a8:	2200      	movs	r2, #0
 80073aa:	4629      	mov	r1, r5
 80073ac:	4b55      	ldr	r3, [pc, #340]	@ (8007504 <_dtoa_r+0x52c>)
 80073ae:	f7f9 f893 	bl	80004d8 <__aeabi_dmul>
 80073b2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80073b6:	9c08      	ldr	r4, [sp, #32]
 80073b8:	3601      	adds	r6, #1
 80073ba:	4630      	mov	r0, r6
 80073bc:	f7f9 f822 	bl	8000404 <__aeabi_i2d>
 80073c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80073c4:	f7f9 f888 	bl	80004d8 <__aeabi_dmul>
 80073c8:	2200      	movs	r2, #0
 80073ca:	4b4f      	ldr	r3, [pc, #316]	@ (8007508 <_dtoa_r+0x530>)
 80073cc:	f7f8 fece 	bl	800016c <__adddf3>
 80073d0:	4605      	mov	r5, r0
 80073d2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80073d6:	2c00      	cmp	r4, #0
 80073d8:	f040 809a 	bne.w	8007510 <_dtoa_r+0x538>
 80073dc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80073e0:	2200      	movs	r2, #0
 80073e2:	4b4a      	ldr	r3, [pc, #296]	@ (800750c <_dtoa_r+0x534>)
 80073e4:	f7f8 fec0 	bl	8000168 <__aeabi_dsub>
 80073e8:	4602      	mov	r2, r0
 80073ea:	460b      	mov	r3, r1
 80073ec:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80073f0:	462a      	mov	r2, r5
 80073f2:	4633      	mov	r3, r6
 80073f4:	f7f9 fb00 	bl	80009f8 <__aeabi_dcmpgt>
 80073f8:	2800      	cmp	r0, #0
 80073fa:	f040 828e 	bne.w	800791a <_dtoa_r+0x942>
 80073fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007402:	462a      	mov	r2, r5
 8007404:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007408:	f7f9 fad8 	bl	80009bc <__aeabi_dcmplt>
 800740c:	2800      	cmp	r0, #0
 800740e:	f040 8127 	bne.w	8007660 <_dtoa_r+0x688>
 8007412:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8007416:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800741a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800741c:	2b00      	cmp	r3, #0
 800741e:	f2c0 8163 	blt.w	80076e8 <_dtoa_r+0x710>
 8007422:	2f0e      	cmp	r7, #14
 8007424:	f300 8160 	bgt.w	80076e8 <_dtoa_r+0x710>
 8007428:	4b33      	ldr	r3, [pc, #204]	@ (80074f8 <_dtoa_r+0x520>)
 800742a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800742e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007432:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007436:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007438:	2b00      	cmp	r3, #0
 800743a:	da03      	bge.n	8007444 <_dtoa_r+0x46c>
 800743c:	9b07      	ldr	r3, [sp, #28]
 800743e:	2b00      	cmp	r3, #0
 8007440:	f340 8100 	ble.w	8007644 <_dtoa_r+0x66c>
 8007444:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007448:	4656      	mov	r6, sl
 800744a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800744e:	4620      	mov	r0, r4
 8007450:	4629      	mov	r1, r5
 8007452:	f7f9 f96b 	bl	800072c <__aeabi_ddiv>
 8007456:	f7f9 faef 	bl	8000a38 <__aeabi_d2iz>
 800745a:	4680      	mov	r8, r0
 800745c:	f7f8 ffd2 	bl	8000404 <__aeabi_i2d>
 8007460:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007464:	f7f9 f838 	bl	80004d8 <__aeabi_dmul>
 8007468:	4602      	mov	r2, r0
 800746a:	460b      	mov	r3, r1
 800746c:	4620      	mov	r0, r4
 800746e:	4629      	mov	r1, r5
 8007470:	f7f8 fe7a 	bl	8000168 <__aeabi_dsub>
 8007474:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8007478:	9d07      	ldr	r5, [sp, #28]
 800747a:	f806 4b01 	strb.w	r4, [r6], #1
 800747e:	eba6 040a 	sub.w	r4, r6, sl
 8007482:	42a5      	cmp	r5, r4
 8007484:	4602      	mov	r2, r0
 8007486:	460b      	mov	r3, r1
 8007488:	f040 8116 	bne.w	80076b8 <_dtoa_r+0x6e0>
 800748c:	f7f8 fe6e 	bl	800016c <__adddf3>
 8007490:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007494:	4604      	mov	r4, r0
 8007496:	460d      	mov	r5, r1
 8007498:	f7f9 faae 	bl	80009f8 <__aeabi_dcmpgt>
 800749c:	2800      	cmp	r0, #0
 800749e:	f040 80f8 	bne.w	8007692 <_dtoa_r+0x6ba>
 80074a2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80074a6:	4620      	mov	r0, r4
 80074a8:	4629      	mov	r1, r5
 80074aa:	f7f9 fa7d 	bl	80009a8 <__aeabi_dcmpeq>
 80074ae:	b118      	cbz	r0, 80074b8 <_dtoa_r+0x4e0>
 80074b0:	f018 0f01 	tst.w	r8, #1
 80074b4:	f040 80ed 	bne.w	8007692 <_dtoa_r+0x6ba>
 80074b8:	4649      	mov	r1, r9
 80074ba:	4658      	mov	r0, fp
 80074bc:	f000 fc92 	bl	8007de4 <_Bfree>
 80074c0:	2300      	movs	r3, #0
 80074c2:	7033      	strb	r3, [r6, #0]
 80074c4:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80074c6:	3701      	adds	r7, #1
 80074c8:	601f      	str	r7, [r3, #0]
 80074ca:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	f000 8320 	beq.w	8007b12 <_dtoa_r+0xb3a>
 80074d2:	601e      	str	r6, [r3, #0]
 80074d4:	e31d      	b.n	8007b12 <_dtoa_r+0xb3a>
 80074d6:	07e2      	lsls	r2, r4, #31
 80074d8:	d505      	bpl.n	80074e6 <_dtoa_r+0x50e>
 80074da:	e9d5 2300 	ldrd	r2, r3, [r5]
 80074de:	f7f8 fffb 	bl	80004d8 <__aeabi_dmul>
 80074e2:	2301      	movs	r3, #1
 80074e4:	3601      	adds	r6, #1
 80074e6:	1064      	asrs	r4, r4, #1
 80074e8:	3508      	adds	r5, #8
 80074ea:	e73f      	b.n	800736c <_dtoa_r+0x394>
 80074ec:	2602      	movs	r6, #2
 80074ee:	e742      	b.n	8007376 <_dtoa_r+0x39e>
 80074f0:	9c07      	ldr	r4, [sp, #28]
 80074f2:	9704      	str	r7, [sp, #16]
 80074f4:	e761      	b.n	80073ba <_dtoa_r+0x3e2>
 80074f6:	bf00      	nop
 80074f8:	0800af28 	.word	0x0800af28
 80074fc:	0800af00 	.word	0x0800af00
 8007500:	3ff00000 	.word	0x3ff00000
 8007504:	40240000 	.word	0x40240000
 8007508:	401c0000 	.word	0x401c0000
 800750c:	40140000 	.word	0x40140000
 8007510:	4b70      	ldr	r3, [pc, #448]	@ (80076d4 <_dtoa_r+0x6fc>)
 8007512:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007514:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007518:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800751c:	4454      	add	r4, sl
 800751e:	2900      	cmp	r1, #0
 8007520:	d045      	beq.n	80075ae <_dtoa_r+0x5d6>
 8007522:	2000      	movs	r0, #0
 8007524:	496c      	ldr	r1, [pc, #432]	@ (80076d8 <_dtoa_r+0x700>)
 8007526:	f7f9 f901 	bl	800072c <__aeabi_ddiv>
 800752a:	4633      	mov	r3, r6
 800752c:	462a      	mov	r2, r5
 800752e:	f7f8 fe1b 	bl	8000168 <__aeabi_dsub>
 8007532:	4656      	mov	r6, sl
 8007534:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007538:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800753c:	f7f9 fa7c 	bl	8000a38 <__aeabi_d2iz>
 8007540:	4605      	mov	r5, r0
 8007542:	f7f8 ff5f 	bl	8000404 <__aeabi_i2d>
 8007546:	4602      	mov	r2, r0
 8007548:	460b      	mov	r3, r1
 800754a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800754e:	f7f8 fe0b 	bl	8000168 <__aeabi_dsub>
 8007552:	4602      	mov	r2, r0
 8007554:	460b      	mov	r3, r1
 8007556:	3530      	adds	r5, #48	@ 0x30
 8007558:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800755c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007560:	f806 5b01 	strb.w	r5, [r6], #1
 8007564:	f7f9 fa2a 	bl	80009bc <__aeabi_dcmplt>
 8007568:	2800      	cmp	r0, #0
 800756a:	d163      	bne.n	8007634 <_dtoa_r+0x65c>
 800756c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007570:	2000      	movs	r0, #0
 8007572:	495a      	ldr	r1, [pc, #360]	@ (80076dc <_dtoa_r+0x704>)
 8007574:	f7f8 fdf8 	bl	8000168 <__aeabi_dsub>
 8007578:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800757c:	f7f9 fa1e 	bl	80009bc <__aeabi_dcmplt>
 8007580:	2800      	cmp	r0, #0
 8007582:	f040 8087 	bne.w	8007694 <_dtoa_r+0x6bc>
 8007586:	42a6      	cmp	r6, r4
 8007588:	f43f af43 	beq.w	8007412 <_dtoa_r+0x43a>
 800758c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007590:	2200      	movs	r2, #0
 8007592:	4b53      	ldr	r3, [pc, #332]	@ (80076e0 <_dtoa_r+0x708>)
 8007594:	f7f8 ffa0 	bl	80004d8 <__aeabi_dmul>
 8007598:	2200      	movs	r2, #0
 800759a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800759e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80075a2:	4b4f      	ldr	r3, [pc, #316]	@ (80076e0 <_dtoa_r+0x708>)
 80075a4:	f7f8 ff98 	bl	80004d8 <__aeabi_dmul>
 80075a8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80075ac:	e7c4      	b.n	8007538 <_dtoa_r+0x560>
 80075ae:	4631      	mov	r1, r6
 80075b0:	4628      	mov	r0, r5
 80075b2:	f7f8 ff91 	bl	80004d8 <__aeabi_dmul>
 80075b6:	4656      	mov	r6, sl
 80075b8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80075bc:	9413      	str	r4, [sp, #76]	@ 0x4c
 80075be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80075c2:	f7f9 fa39 	bl	8000a38 <__aeabi_d2iz>
 80075c6:	4605      	mov	r5, r0
 80075c8:	f7f8 ff1c 	bl	8000404 <__aeabi_i2d>
 80075cc:	4602      	mov	r2, r0
 80075ce:	460b      	mov	r3, r1
 80075d0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80075d4:	f7f8 fdc8 	bl	8000168 <__aeabi_dsub>
 80075d8:	4602      	mov	r2, r0
 80075da:	460b      	mov	r3, r1
 80075dc:	3530      	adds	r5, #48	@ 0x30
 80075de:	f806 5b01 	strb.w	r5, [r6], #1
 80075e2:	42a6      	cmp	r6, r4
 80075e4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80075e8:	f04f 0200 	mov.w	r2, #0
 80075ec:	d124      	bne.n	8007638 <_dtoa_r+0x660>
 80075ee:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80075f2:	4b39      	ldr	r3, [pc, #228]	@ (80076d8 <_dtoa_r+0x700>)
 80075f4:	f7f8 fdba 	bl	800016c <__adddf3>
 80075f8:	4602      	mov	r2, r0
 80075fa:	460b      	mov	r3, r1
 80075fc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007600:	f7f9 f9fa 	bl	80009f8 <__aeabi_dcmpgt>
 8007604:	2800      	cmp	r0, #0
 8007606:	d145      	bne.n	8007694 <_dtoa_r+0x6bc>
 8007608:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800760c:	2000      	movs	r0, #0
 800760e:	4932      	ldr	r1, [pc, #200]	@ (80076d8 <_dtoa_r+0x700>)
 8007610:	f7f8 fdaa 	bl	8000168 <__aeabi_dsub>
 8007614:	4602      	mov	r2, r0
 8007616:	460b      	mov	r3, r1
 8007618:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800761c:	f7f9 f9ce 	bl	80009bc <__aeabi_dcmplt>
 8007620:	2800      	cmp	r0, #0
 8007622:	f43f aef6 	beq.w	8007412 <_dtoa_r+0x43a>
 8007626:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8007628:	1e73      	subs	r3, r6, #1
 800762a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800762c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007630:	2b30      	cmp	r3, #48	@ 0x30
 8007632:	d0f8      	beq.n	8007626 <_dtoa_r+0x64e>
 8007634:	9f04      	ldr	r7, [sp, #16]
 8007636:	e73f      	b.n	80074b8 <_dtoa_r+0x4e0>
 8007638:	4b29      	ldr	r3, [pc, #164]	@ (80076e0 <_dtoa_r+0x708>)
 800763a:	f7f8 ff4d 	bl	80004d8 <__aeabi_dmul>
 800763e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007642:	e7bc      	b.n	80075be <_dtoa_r+0x5e6>
 8007644:	d10c      	bne.n	8007660 <_dtoa_r+0x688>
 8007646:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800764a:	2200      	movs	r2, #0
 800764c:	4b25      	ldr	r3, [pc, #148]	@ (80076e4 <_dtoa_r+0x70c>)
 800764e:	f7f8 ff43 	bl	80004d8 <__aeabi_dmul>
 8007652:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007656:	f7f9 f9c5 	bl	80009e4 <__aeabi_dcmpge>
 800765a:	2800      	cmp	r0, #0
 800765c:	f000 815b 	beq.w	8007916 <_dtoa_r+0x93e>
 8007660:	2400      	movs	r4, #0
 8007662:	4625      	mov	r5, r4
 8007664:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007666:	4656      	mov	r6, sl
 8007668:	43db      	mvns	r3, r3
 800766a:	9304      	str	r3, [sp, #16]
 800766c:	2700      	movs	r7, #0
 800766e:	4621      	mov	r1, r4
 8007670:	4658      	mov	r0, fp
 8007672:	f000 fbb7 	bl	8007de4 <_Bfree>
 8007676:	2d00      	cmp	r5, #0
 8007678:	d0dc      	beq.n	8007634 <_dtoa_r+0x65c>
 800767a:	b12f      	cbz	r7, 8007688 <_dtoa_r+0x6b0>
 800767c:	42af      	cmp	r7, r5
 800767e:	d003      	beq.n	8007688 <_dtoa_r+0x6b0>
 8007680:	4639      	mov	r1, r7
 8007682:	4658      	mov	r0, fp
 8007684:	f000 fbae 	bl	8007de4 <_Bfree>
 8007688:	4629      	mov	r1, r5
 800768a:	4658      	mov	r0, fp
 800768c:	f000 fbaa 	bl	8007de4 <_Bfree>
 8007690:	e7d0      	b.n	8007634 <_dtoa_r+0x65c>
 8007692:	9704      	str	r7, [sp, #16]
 8007694:	4633      	mov	r3, r6
 8007696:	461e      	mov	r6, r3
 8007698:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800769c:	2a39      	cmp	r2, #57	@ 0x39
 800769e:	d107      	bne.n	80076b0 <_dtoa_r+0x6d8>
 80076a0:	459a      	cmp	sl, r3
 80076a2:	d1f8      	bne.n	8007696 <_dtoa_r+0x6be>
 80076a4:	9a04      	ldr	r2, [sp, #16]
 80076a6:	3201      	adds	r2, #1
 80076a8:	9204      	str	r2, [sp, #16]
 80076aa:	2230      	movs	r2, #48	@ 0x30
 80076ac:	f88a 2000 	strb.w	r2, [sl]
 80076b0:	781a      	ldrb	r2, [r3, #0]
 80076b2:	3201      	adds	r2, #1
 80076b4:	701a      	strb	r2, [r3, #0]
 80076b6:	e7bd      	b.n	8007634 <_dtoa_r+0x65c>
 80076b8:	2200      	movs	r2, #0
 80076ba:	4b09      	ldr	r3, [pc, #36]	@ (80076e0 <_dtoa_r+0x708>)
 80076bc:	f7f8 ff0c 	bl	80004d8 <__aeabi_dmul>
 80076c0:	2200      	movs	r2, #0
 80076c2:	2300      	movs	r3, #0
 80076c4:	4604      	mov	r4, r0
 80076c6:	460d      	mov	r5, r1
 80076c8:	f7f9 f96e 	bl	80009a8 <__aeabi_dcmpeq>
 80076cc:	2800      	cmp	r0, #0
 80076ce:	f43f aebc 	beq.w	800744a <_dtoa_r+0x472>
 80076d2:	e6f1      	b.n	80074b8 <_dtoa_r+0x4e0>
 80076d4:	0800af28 	.word	0x0800af28
 80076d8:	3fe00000 	.word	0x3fe00000
 80076dc:	3ff00000 	.word	0x3ff00000
 80076e0:	40240000 	.word	0x40240000
 80076e4:	40140000 	.word	0x40140000
 80076e8:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80076ea:	2a00      	cmp	r2, #0
 80076ec:	f000 80db 	beq.w	80078a6 <_dtoa_r+0x8ce>
 80076f0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80076f2:	2a01      	cmp	r2, #1
 80076f4:	f300 80bf 	bgt.w	8007876 <_dtoa_r+0x89e>
 80076f8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80076fa:	2a00      	cmp	r2, #0
 80076fc:	f000 80b7 	beq.w	800786e <_dtoa_r+0x896>
 8007700:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8007704:	4646      	mov	r6, r8
 8007706:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007708:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800770a:	2101      	movs	r1, #1
 800770c:	441a      	add	r2, r3
 800770e:	4658      	mov	r0, fp
 8007710:	4498      	add	r8, r3
 8007712:	9209      	str	r2, [sp, #36]	@ 0x24
 8007714:	f000 fc64 	bl	8007fe0 <__i2b>
 8007718:	4605      	mov	r5, r0
 800771a:	b15e      	cbz	r6, 8007734 <_dtoa_r+0x75c>
 800771c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800771e:	2b00      	cmp	r3, #0
 8007720:	dd08      	ble.n	8007734 <_dtoa_r+0x75c>
 8007722:	42b3      	cmp	r3, r6
 8007724:	bfa8      	it	ge
 8007726:	4633      	movge	r3, r6
 8007728:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800772a:	eba8 0803 	sub.w	r8, r8, r3
 800772e:	1af6      	subs	r6, r6, r3
 8007730:	1ad3      	subs	r3, r2, r3
 8007732:	9309      	str	r3, [sp, #36]	@ 0x24
 8007734:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007736:	b1f3      	cbz	r3, 8007776 <_dtoa_r+0x79e>
 8007738:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800773a:	2b00      	cmp	r3, #0
 800773c:	f000 80b7 	beq.w	80078ae <_dtoa_r+0x8d6>
 8007740:	b18c      	cbz	r4, 8007766 <_dtoa_r+0x78e>
 8007742:	4629      	mov	r1, r5
 8007744:	4622      	mov	r2, r4
 8007746:	4658      	mov	r0, fp
 8007748:	f000 fd08 	bl	800815c <__pow5mult>
 800774c:	464a      	mov	r2, r9
 800774e:	4601      	mov	r1, r0
 8007750:	4605      	mov	r5, r0
 8007752:	4658      	mov	r0, fp
 8007754:	f000 fc5a 	bl	800800c <__multiply>
 8007758:	4649      	mov	r1, r9
 800775a:	9004      	str	r0, [sp, #16]
 800775c:	4658      	mov	r0, fp
 800775e:	f000 fb41 	bl	8007de4 <_Bfree>
 8007762:	9b04      	ldr	r3, [sp, #16]
 8007764:	4699      	mov	r9, r3
 8007766:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007768:	1b1a      	subs	r2, r3, r4
 800776a:	d004      	beq.n	8007776 <_dtoa_r+0x79e>
 800776c:	4649      	mov	r1, r9
 800776e:	4658      	mov	r0, fp
 8007770:	f000 fcf4 	bl	800815c <__pow5mult>
 8007774:	4681      	mov	r9, r0
 8007776:	2101      	movs	r1, #1
 8007778:	4658      	mov	r0, fp
 800777a:	f000 fc31 	bl	8007fe0 <__i2b>
 800777e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007780:	4604      	mov	r4, r0
 8007782:	2b00      	cmp	r3, #0
 8007784:	f000 81c9 	beq.w	8007b1a <_dtoa_r+0xb42>
 8007788:	461a      	mov	r2, r3
 800778a:	4601      	mov	r1, r0
 800778c:	4658      	mov	r0, fp
 800778e:	f000 fce5 	bl	800815c <__pow5mult>
 8007792:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007794:	4604      	mov	r4, r0
 8007796:	2b01      	cmp	r3, #1
 8007798:	f300 808f 	bgt.w	80078ba <_dtoa_r+0x8e2>
 800779c:	9b02      	ldr	r3, [sp, #8]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	f040 8087 	bne.w	80078b2 <_dtoa_r+0x8da>
 80077a4:	9b03      	ldr	r3, [sp, #12]
 80077a6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	f040 8083 	bne.w	80078b6 <_dtoa_r+0x8de>
 80077b0:	9b03      	ldr	r3, [sp, #12]
 80077b2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80077b6:	0d1b      	lsrs	r3, r3, #20
 80077b8:	051b      	lsls	r3, r3, #20
 80077ba:	b12b      	cbz	r3, 80077c8 <_dtoa_r+0x7f0>
 80077bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80077be:	f108 0801 	add.w	r8, r8, #1
 80077c2:	3301      	adds	r3, #1
 80077c4:	9309      	str	r3, [sp, #36]	@ 0x24
 80077c6:	2301      	movs	r3, #1
 80077c8:	930a      	str	r3, [sp, #40]	@ 0x28
 80077ca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	f000 81aa 	beq.w	8007b26 <_dtoa_r+0xb4e>
 80077d2:	6923      	ldr	r3, [r4, #16]
 80077d4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80077d8:	6918      	ldr	r0, [r3, #16]
 80077da:	f000 fbb5 	bl	8007f48 <__hi0bits>
 80077de:	f1c0 0020 	rsb	r0, r0, #32
 80077e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80077e4:	4418      	add	r0, r3
 80077e6:	f010 001f 	ands.w	r0, r0, #31
 80077ea:	d071      	beq.n	80078d0 <_dtoa_r+0x8f8>
 80077ec:	f1c0 0320 	rsb	r3, r0, #32
 80077f0:	2b04      	cmp	r3, #4
 80077f2:	dd65      	ble.n	80078c0 <_dtoa_r+0x8e8>
 80077f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80077f6:	f1c0 001c 	rsb	r0, r0, #28
 80077fa:	4403      	add	r3, r0
 80077fc:	4480      	add	r8, r0
 80077fe:	4406      	add	r6, r0
 8007800:	9309      	str	r3, [sp, #36]	@ 0x24
 8007802:	f1b8 0f00 	cmp.w	r8, #0
 8007806:	dd05      	ble.n	8007814 <_dtoa_r+0x83c>
 8007808:	4649      	mov	r1, r9
 800780a:	4642      	mov	r2, r8
 800780c:	4658      	mov	r0, fp
 800780e:	f000 fcff 	bl	8008210 <__lshift>
 8007812:	4681      	mov	r9, r0
 8007814:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007816:	2b00      	cmp	r3, #0
 8007818:	dd05      	ble.n	8007826 <_dtoa_r+0x84e>
 800781a:	4621      	mov	r1, r4
 800781c:	461a      	mov	r2, r3
 800781e:	4658      	mov	r0, fp
 8007820:	f000 fcf6 	bl	8008210 <__lshift>
 8007824:	4604      	mov	r4, r0
 8007826:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007828:	2b00      	cmp	r3, #0
 800782a:	d053      	beq.n	80078d4 <_dtoa_r+0x8fc>
 800782c:	4621      	mov	r1, r4
 800782e:	4648      	mov	r0, r9
 8007830:	f000 fd5a 	bl	80082e8 <__mcmp>
 8007834:	2800      	cmp	r0, #0
 8007836:	da4d      	bge.n	80078d4 <_dtoa_r+0x8fc>
 8007838:	1e7b      	subs	r3, r7, #1
 800783a:	4649      	mov	r1, r9
 800783c:	9304      	str	r3, [sp, #16]
 800783e:	220a      	movs	r2, #10
 8007840:	2300      	movs	r3, #0
 8007842:	4658      	mov	r0, fp
 8007844:	f000 faf0 	bl	8007e28 <__multadd>
 8007848:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800784a:	4681      	mov	r9, r0
 800784c:	2b00      	cmp	r3, #0
 800784e:	f000 816c 	beq.w	8007b2a <_dtoa_r+0xb52>
 8007852:	2300      	movs	r3, #0
 8007854:	4629      	mov	r1, r5
 8007856:	220a      	movs	r2, #10
 8007858:	4658      	mov	r0, fp
 800785a:	f000 fae5 	bl	8007e28 <__multadd>
 800785e:	9b08      	ldr	r3, [sp, #32]
 8007860:	4605      	mov	r5, r0
 8007862:	2b00      	cmp	r3, #0
 8007864:	dc61      	bgt.n	800792a <_dtoa_r+0x952>
 8007866:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007868:	2b02      	cmp	r3, #2
 800786a:	dc3b      	bgt.n	80078e4 <_dtoa_r+0x90c>
 800786c:	e05d      	b.n	800792a <_dtoa_r+0x952>
 800786e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007870:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8007874:	e746      	b.n	8007704 <_dtoa_r+0x72c>
 8007876:	9b07      	ldr	r3, [sp, #28]
 8007878:	1e5c      	subs	r4, r3, #1
 800787a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800787c:	42a3      	cmp	r3, r4
 800787e:	bfbf      	itttt	lt
 8007880:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8007882:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 8007884:	1ae3      	sublt	r3, r4, r3
 8007886:	18d2      	addlt	r2, r2, r3
 8007888:	bfa8      	it	ge
 800788a:	1b1c      	subge	r4, r3, r4
 800788c:	9b07      	ldr	r3, [sp, #28]
 800788e:	bfbe      	ittt	lt
 8007890:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8007892:	920e      	strlt	r2, [sp, #56]	@ 0x38
 8007894:	2400      	movlt	r4, #0
 8007896:	2b00      	cmp	r3, #0
 8007898:	bfb5      	itete	lt
 800789a:	eba8 0603 	sublt.w	r6, r8, r3
 800789e:	4646      	movge	r6, r8
 80078a0:	2300      	movlt	r3, #0
 80078a2:	9b07      	ldrge	r3, [sp, #28]
 80078a4:	e730      	b.n	8007708 <_dtoa_r+0x730>
 80078a6:	4646      	mov	r6, r8
 80078a8:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80078aa:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80078ac:	e735      	b.n	800771a <_dtoa_r+0x742>
 80078ae:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80078b0:	e75c      	b.n	800776c <_dtoa_r+0x794>
 80078b2:	2300      	movs	r3, #0
 80078b4:	e788      	b.n	80077c8 <_dtoa_r+0x7f0>
 80078b6:	9b02      	ldr	r3, [sp, #8]
 80078b8:	e786      	b.n	80077c8 <_dtoa_r+0x7f0>
 80078ba:	2300      	movs	r3, #0
 80078bc:	930a      	str	r3, [sp, #40]	@ 0x28
 80078be:	e788      	b.n	80077d2 <_dtoa_r+0x7fa>
 80078c0:	d09f      	beq.n	8007802 <_dtoa_r+0x82a>
 80078c2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80078c4:	331c      	adds	r3, #28
 80078c6:	441a      	add	r2, r3
 80078c8:	4498      	add	r8, r3
 80078ca:	441e      	add	r6, r3
 80078cc:	9209      	str	r2, [sp, #36]	@ 0x24
 80078ce:	e798      	b.n	8007802 <_dtoa_r+0x82a>
 80078d0:	4603      	mov	r3, r0
 80078d2:	e7f6      	b.n	80078c2 <_dtoa_r+0x8ea>
 80078d4:	9b07      	ldr	r3, [sp, #28]
 80078d6:	9704      	str	r7, [sp, #16]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	dc20      	bgt.n	800791e <_dtoa_r+0x946>
 80078dc:	9308      	str	r3, [sp, #32]
 80078de:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80078e0:	2b02      	cmp	r3, #2
 80078e2:	dd1e      	ble.n	8007922 <_dtoa_r+0x94a>
 80078e4:	9b08      	ldr	r3, [sp, #32]
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	f47f aebc 	bne.w	8007664 <_dtoa_r+0x68c>
 80078ec:	4621      	mov	r1, r4
 80078ee:	2205      	movs	r2, #5
 80078f0:	4658      	mov	r0, fp
 80078f2:	f000 fa99 	bl	8007e28 <__multadd>
 80078f6:	4601      	mov	r1, r0
 80078f8:	4604      	mov	r4, r0
 80078fa:	4648      	mov	r0, r9
 80078fc:	f000 fcf4 	bl	80082e8 <__mcmp>
 8007900:	2800      	cmp	r0, #0
 8007902:	f77f aeaf 	ble.w	8007664 <_dtoa_r+0x68c>
 8007906:	2331      	movs	r3, #49	@ 0x31
 8007908:	4656      	mov	r6, sl
 800790a:	f806 3b01 	strb.w	r3, [r6], #1
 800790e:	9b04      	ldr	r3, [sp, #16]
 8007910:	3301      	adds	r3, #1
 8007912:	9304      	str	r3, [sp, #16]
 8007914:	e6aa      	b.n	800766c <_dtoa_r+0x694>
 8007916:	9c07      	ldr	r4, [sp, #28]
 8007918:	9704      	str	r7, [sp, #16]
 800791a:	4625      	mov	r5, r4
 800791c:	e7f3      	b.n	8007906 <_dtoa_r+0x92e>
 800791e:	9b07      	ldr	r3, [sp, #28]
 8007920:	9308      	str	r3, [sp, #32]
 8007922:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007924:	2b00      	cmp	r3, #0
 8007926:	f000 8104 	beq.w	8007b32 <_dtoa_r+0xb5a>
 800792a:	2e00      	cmp	r6, #0
 800792c:	dd05      	ble.n	800793a <_dtoa_r+0x962>
 800792e:	4629      	mov	r1, r5
 8007930:	4632      	mov	r2, r6
 8007932:	4658      	mov	r0, fp
 8007934:	f000 fc6c 	bl	8008210 <__lshift>
 8007938:	4605      	mov	r5, r0
 800793a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800793c:	2b00      	cmp	r3, #0
 800793e:	d05a      	beq.n	80079f6 <_dtoa_r+0xa1e>
 8007940:	4658      	mov	r0, fp
 8007942:	6869      	ldr	r1, [r5, #4]
 8007944:	f000 fa0e 	bl	8007d64 <_Balloc>
 8007948:	4606      	mov	r6, r0
 800794a:	b928      	cbnz	r0, 8007958 <_dtoa_r+0x980>
 800794c:	4602      	mov	r2, r0
 800794e:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8007952:	4b83      	ldr	r3, [pc, #524]	@ (8007b60 <_dtoa_r+0xb88>)
 8007954:	f7ff bb54 	b.w	8007000 <_dtoa_r+0x28>
 8007958:	692a      	ldr	r2, [r5, #16]
 800795a:	f105 010c 	add.w	r1, r5, #12
 800795e:	3202      	adds	r2, #2
 8007960:	0092      	lsls	r2, r2, #2
 8007962:	300c      	adds	r0, #12
 8007964:	f002 f956 	bl	8009c14 <memcpy>
 8007968:	2201      	movs	r2, #1
 800796a:	4631      	mov	r1, r6
 800796c:	4658      	mov	r0, fp
 800796e:	f000 fc4f 	bl	8008210 <__lshift>
 8007972:	462f      	mov	r7, r5
 8007974:	4605      	mov	r5, r0
 8007976:	f10a 0301 	add.w	r3, sl, #1
 800797a:	9307      	str	r3, [sp, #28]
 800797c:	9b08      	ldr	r3, [sp, #32]
 800797e:	4453      	add	r3, sl
 8007980:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007982:	9b02      	ldr	r3, [sp, #8]
 8007984:	f003 0301 	and.w	r3, r3, #1
 8007988:	930a      	str	r3, [sp, #40]	@ 0x28
 800798a:	9b07      	ldr	r3, [sp, #28]
 800798c:	4621      	mov	r1, r4
 800798e:	3b01      	subs	r3, #1
 8007990:	4648      	mov	r0, r9
 8007992:	9302      	str	r3, [sp, #8]
 8007994:	f7ff fa96 	bl	8006ec4 <quorem>
 8007998:	4639      	mov	r1, r7
 800799a:	9008      	str	r0, [sp, #32]
 800799c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80079a0:	4648      	mov	r0, r9
 80079a2:	f000 fca1 	bl	80082e8 <__mcmp>
 80079a6:	462a      	mov	r2, r5
 80079a8:	9009      	str	r0, [sp, #36]	@ 0x24
 80079aa:	4621      	mov	r1, r4
 80079ac:	4658      	mov	r0, fp
 80079ae:	f000 fcb7 	bl	8008320 <__mdiff>
 80079b2:	68c2      	ldr	r2, [r0, #12]
 80079b4:	4606      	mov	r6, r0
 80079b6:	bb02      	cbnz	r2, 80079fa <_dtoa_r+0xa22>
 80079b8:	4601      	mov	r1, r0
 80079ba:	4648      	mov	r0, r9
 80079bc:	f000 fc94 	bl	80082e8 <__mcmp>
 80079c0:	4602      	mov	r2, r0
 80079c2:	4631      	mov	r1, r6
 80079c4:	4658      	mov	r0, fp
 80079c6:	920c      	str	r2, [sp, #48]	@ 0x30
 80079c8:	f000 fa0c 	bl	8007de4 <_Bfree>
 80079cc:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80079ce:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80079d0:	9e07      	ldr	r6, [sp, #28]
 80079d2:	ea43 0102 	orr.w	r1, r3, r2
 80079d6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80079d8:	4319      	orrs	r1, r3
 80079da:	d110      	bne.n	80079fe <_dtoa_r+0xa26>
 80079dc:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80079e0:	d029      	beq.n	8007a36 <_dtoa_r+0xa5e>
 80079e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	dd02      	ble.n	80079ee <_dtoa_r+0xa16>
 80079e8:	9b08      	ldr	r3, [sp, #32]
 80079ea:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80079ee:	9b02      	ldr	r3, [sp, #8]
 80079f0:	f883 8000 	strb.w	r8, [r3]
 80079f4:	e63b      	b.n	800766e <_dtoa_r+0x696>
 80079f6:	4628      	mov	r0, r5
 80079f8:	e7bb      	b.n	8007972 <_dtoa_r+0x99a>
 80079fa:	2201      	movs	r2, #1
 80079fc:	e7e1      	b.n	80079c2 <_dtoa_r+0x9ea>
 80079fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	db04      	blt.n	8007a0e <_dtoa_r+0xa36>
 8007a04:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8007a06:	430b      	orrs	r3, r1
 8007a08:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007a0a:	430b      	orrs	r3, r1
 8007a0c:	d120      	bne.n	8007a50 <_dtoa_r+0xa78>
 8007a0e:	2a00      	cmp	r2, #0
 8007a10:	dded      	ble.n	80079ee <_dtoa_r+0xa16>
 8007a12:	4649      	mov	r1, r9
 8007a14:	2201      	movs	r2, #1
 8007a16:	4658      	mov	r0, fp
 8007a18:	f000 fbfa 	bl	8008210 <__lshift>
 8007a1c:	4621      	mov	r1, r4
 8007a1e:	4681      	mov	r9, r0
 8007a20:	f000 fc62 	bl	80082e8 <__mcmp>
 8007a24:	2800      	cmp	r0, #0
 8007a26:	dc03      	bgt.n	8007a30 <_dtoa_r+0xa58>
 8007a28:	d1e1      	bne.n	80079ee <_dtoa_r+0xa16>
 8007a2a:	f018 0f01 	tst.w	r8, #1
 8007a2e:	d0de      	beq.n	80079ee <_dtoa_r+0xa16>
 8007a30:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007a34:	d1d8      	bne.n	80079e8 <_dtoa_r+0xa10>
 8007a36:	2339      	movs	r3, #57	@ 0x39
 8007a38:	9a02      	ldr	r2, [sp, #8]
 8007a3a:	7013      	strb	r3, [r2, #0]
 8007a3c:	4633      	mov	r3, r6
 8007a3e:	461e      	mov	r6, r3
 8007a40:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007a44:	3b01      	subs	r3, #1
 8007a46:	2a39      	cmp	r2, #57	@ 0x39
 8007a48:	d052      	beq.n	8007af0 <_dtoa_r+0xb18>
 8007a4a:	3201      	adds	r2, #1
 8007a4c:	701a      	strb	r2, [r3, #0]
 8007a4e:	e60e      	b.n	800766e <_dtoa_r+0x696>
 8007a50:	2a00      	cmp	r2, #0
 8007a52:	dd07      	ble.n	8007a64 <_dtoa_r+0xa8c>
 8007a54:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007a58:	d0ed      	beq.n	8007a36 <_dtoa_r+0xa5e>
 8007a5a:	9a02      	ldr	r2, [sp, #8]
 8007a5c:	f108 0301 	add.w	r3, r8, #1
 8007a60:	7013      	strb	r3, [r2, #0]
 8007a62:	e604      	b.n	800766e <_dtoa_r+0x696>
 8007a64:	9b07      	ldr	r3, [sp, #28]
 8007a66:	9a07      	ldr	r2, [sp, #28]
 8007a68:	f803 8c01 	strb.w	r8, [r3, #-1]
 8007a6c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007a6e:	4293      	cmp	r3, r2
 8007a70:	d028      	beq.n	8007ac4 <_dtoa_r+0xaec>
 8007a72:	4649      	mov	r1, r9
 8007a74:	2300      	movs	r3, #0
 8007a76:	220a      	movs	r2, #10
 8007a78:	4658      	mov	r0, fp
 8007a7a:	f000 f9d5 	bl	8007e28 <__multadd>
 8007a7e:	42af      	cmp	r7, r5
 8007a80:	4681      	mov	r9, r0
 8007a82:	f04f 0300 	mov.w	r3, #0
 8007a86:	f04f 020a 	mov.w	r2, #10
 8007a8a:	4639      	mov	r1, r7
 8007a8c:	4658      	mov	r0, fp
 8007a8e:	d107      	bne.n	8007aa0 <_dtoa_r+0xac8>
 8007a90:	f000 f9ca 	bl	8007e28 <__multadd>
 8007a94:	4607      	mov	r7, r0
 8007a96:	4605      	mov	r5, r0
 8007a98:	9b07      	ldr	r3, [sp, #28]
 8007a9a:	3301      	adds	r3, #1
 8007a9c:	9307      	str	r3, [sp, #28]
 8007a9e:	e774      	b.n	800798a <_dtoa_r+0x9b2>
 8007aa0:	f000 f9c2 	bl	8007e28 <__multadd>
 8007aa4:	4629      	mov	r1, r5
 8007aa6:	4607      	mov	r7, r0
 8007aa8:	2300      	movs	r3, #0
 8007aaa:	220a      	movs	r2, #10
 8007aac:	4658      	mov	r0, fp
 8007aae:	f000 f9bb 	bl	8007e28 <__multadd>
 8007ab2:	4605      	mov	r5, r0
 8007ab4:	e7f0      	b.n	8007a98 <_dtoa_r+0xac0>
 8007ab6:	9b08      	ldr	r3, [sp, #32]
 8007ab8:	2700      	movs	r7, #0
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	bfcc      	ite	gt
 8007abe:	461e      	movgt	r6, r3
 8007ac0:	2601      	movle	r6, #1
 8007ac2:	4456      	add	r6, sl
 8007ac4:	4649      	mov	r1, r9
 8007ac6:	2201      	movs	r2, #1
 8007ac8:	4658      	mov	r0, fp
 8007aca:	f000 fba1 	bl	8008210 <__lshift>
 8007ace:	4621      	mov	r1, r4
 8007ad0:	4681      	mov	r9, r0
 8007ad2:	f000 fc09 	bl	80082e8 <__mcmp>
 8007ad6:	2800      	cmp	r0, #0
 8007ad8:	dcb0      	bgt.n	8007a3c <_dtoa_r+0xa64>
 8007ada:	d102      	bne.n	8007ae2 <_dtoa_r+0xb0a>
 8007adc:	f018 0f01 	tst.w	r8, #1
 8007ae0:	d1ac      	bne.n	8007a3c <_dtoa_r+0xa64>
 8007ae2:	4633      	mov	r3, r6
 8007ae4:	461e      	mov	r6, r3
 8007ae6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007aea:	2a30      	cmp	r2, #48	@ 0x30
 8007aec:	d0fa      	beq.n	8007ae4 <_dtoa_r+0xb0c>
 8007aee:	e5be      	b.n	800766e <_dtoa_r+0x696>
 8007af0:	459a      	cmp	sl, r3
 8007af2:	d1a4      	bne.n	8007a3e <_dtoa_r+0xa66>
 8007af4:	9b04      	ldr	r3, [sp, #16]
 8007af6:	3301      	adds	r3, #1
 8007af8:	9304      	str	r3, [sp, #16]
 8007afa:	2331      	movs	r3, #49	@ 0x31
 8007afc:	f88a 3000 	strb.w	r3, [sl]
 8007b00:	e5b5      	b.n	800766e <_dtoa_r+0x696>
 8007b02:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007b04:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8007b64 <_dtoa_r+0xb8c>
 8007b08:	b11b      	cbz	r3, 8007b12 <_dtoa_r+0xb3a>
 8007b0a:	f10a 0308 	add.w	r3, sl, #8
 8007b0e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8007b10:	6013      	str	r3, [r2, #0]
 8007b12:	4650      	mov	r0, sl
 8007b14:	b017      	add	sp, #92	@ 0x5c
 8007b16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b1a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007b1c:	2b01      	cmp	r3, #1
 8007b1e:	f77f ae3d 	ble.w	800779c <_dtoa_r+0x7c4>
 8007b22:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007b24:	930a      	str	r3, [sp, #40]	@ 0x28
 8007b26:	2001      	movs	r0, #1
 8007b28:	e65b      	b.n	80077e2 <_dtoa_r+0x80a>
 8007b2a:	9b08      	ldr	r3, [sp, #32]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	f77f aed6 	ble.w	80078de <_dtoa_r+0x906>
 8007b32:	4656      	mov	r6, sl
 8007b34:	4621      	mov	r1, r4
 8007b36:	4648      	mov	r0, r9
 8007b38:	f7ff f9c4 	bl	8006ec4 <quorem>
 8007b3c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007b40:	9b08      	ldr	r3, [sp, #32]
 8007b42:	f806 8b01 	strb.w	r8, [r6], #1
 8007b46:	eba6 020a 	sub.w	r2, r6, sl
 8007b4a:	4293      	cmp	r3, r2
 8007b4c:	ddb3      	ble.n	8007ab6 <_dtoa_r+0xade>
 8007b4e:	4649      	mov	r1, r9
 8007b50:	2300      	movs	r3, #0
 8007b52:	220a      	movs	r2, #10
 8007b54:	4658      	mov	r0, fp
 8007b56:	f000 f967 	bl	8007e28 <__multadd>
 8007b5a:	4681      	mov	r9, r0
 8007b5c:	e7ea      	b.n	8007b34 <_dtoa_r+0xb5c>
 8007b5e:	bf00      	nop
 8007b60:	0800ae83 	.word	0x0800ae83
 8007b64:	0800ae07 	.word	0x0800ae07

08007b68 <_free_r>:
 8007b68:	b538      	push	{r3, r4, r5, lr}
 8007b6a:	4605      	mov	r5, r0
 8007b6c:	2900      	cmp	r1, #0
 8007b6e:	d040      	beq.n	8007bf2 <_free_r+0x8a>
 8007b70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007b74:	1f0c      	subs	r4, r1, #4
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	bfb8      	it	lt
 8007b7a:	18e4      	addlt	r4, r4, r3
 8007b7c:	f000 f8e6 	bl	8007d4c <__malloc_lock>
 8007b80:	4a1c      	ldr	r2, [pc, #112]	@ (8007bf4 <_free_r+0x8c>)
 8007b82:	6813      	ldr	r3, [r2, #0]
 8007b84:	b933      	cbnz	r3, 8007b94 <_free_r+0x2c>
 8007b86:	6063      	str	r3, [r4, #4]
 8007b88:	6014      	str	r4, [r2, #0]
 8007b8a:	4628      	mov	r0, r5
 8007b8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007b90:	f000 b8e2 	b.w	8007d58 <__malloc_unlock>
 8007b94:	42a3      	cmp	r3, r4
 8007b96:	d908      	bls.n	8007baa <_free_r+0x42>
 8007b98:	6820      	ldr	r0, [r4, #0]
 8007b9a:	1821      	adds	r1, r4, r0
 8007b9c:	428b      	cmp	r3, r1
 8007b9e:	bf01      	itttt	eq
 8007ba0:	6819      	ldreq	r1, [r3, #0]
 8007ba2:	685b      	ldreq	r3, [r3, #4]
 8007ba4:	1809      	addeq	r1, r1, r0
 8007ba6:	6021      	streq	r1, [r4, #0]
 8007ba8:	e7ed      	b.n	8007b86 <_free_r+0x1e>
 8007baa:	461a      	mov	r2, r3
 8007bac:	685b      	ldr	r3, [r3, #4]
 8007bae:	b10b      	cbz	r3, 8007bb4 <_free_r+0x4c>
 8007bb0:	42a3      	cmp	r3, r4
 8007bb2:	d9fa      	bls.n	8007baa <_free_r+0x42>
 8007bb4:	6811      	ldr	r1, [r2, #0]
 8007bb6:	1850      	adds	r0, r2, r1
 8007bb8:	42a0      	cmp	r0, r4
 8007bba:	d10b      	bne.n	8007bd4 <_free_r+0x6c>
 8007bbc:	6820      	ldr	r0, [r4, #0]
 8007bbe:	4401      	add	r1, r0
 8007bc0:	1850      	adds	r0, r2, r1
 8007bc2:	4283      	cmp	r3, r0
 8007bc4:	6011      	str	r1, [r2, #0]
 8007bc6:	d1e0      	bne.n	8007b8a <_free_r+0x22>
 8007bc8:	6818      	ldr	r0, [r3, #0]
 8007bca:	685b      	ldr	r3, [r3, #4]
 8007bcc:	4408      	add	r0, r1
 8007bce:	6010      	str	r0, [r2, #0]
 8007bd0:	6053      	str	r3, [r2, #4]
 8007bd2:	e7da      	b.n	8007b8a <_free_r+0x22>
 8007bd4:	d902      	bls.n	8007bdc <_free_r+0x74>
 8007bd6:	230c      	movs	r3, #12
 8007bd8:	602b      	str	r3, [r5, #0]
 8007bda:	e7d6      	b.n	8007b8a <_free_r+0x22>
 8007bdc:	6820      	ldr	r0, [r4, #0]
 8007bde:	1821      	adds	r1, r4, r0
 8007be0:	428b      	cmp	r3, r1
 8007be2:	bf01      	itttt	eq
 8007be4:	6819      	ldreq	r1, [r3, #0]
 8007be6:	685b      	ldreq	r3, [r3, #4]
 8007be8:	1809      	addeq	r1, r1, r0
 8007bea:	6021      	streq	r1, [r4, #0]
 8007bec:	6063      	str	r3, [r4, #4]
 8007bee:	6054      	str	r4, [r2, #4]
 8007bf0:	e7cb      	b.n	8007b8a <_free_r+0x22>
 8007bf2:	bd38      	pop	{r3, r4, r5, pc}
 8007bf4:	2000056c 	.word	0x2000056c

08007bf8 <malloc>:
 8007bf8:	4b02      	ldr	r3, [pc, #8]	@ (8007c04 <malloc+0xc>)
 8007bfa:	4601      	mov	r1, r0
 8007bfc:	6818      	ldr	r0, [r3, #0]
 8007bfe:	f000 b825 	b.w	8007c4c <_malloc_r>
 8007c02:	bf00      	nop
 8007c04:	20000018 	.word	0x20000018

08007c08 <sbrk_aligned>:
 8007c08:	b570      	push	{r4, r5, r6, lr}
 8007c0a:	4e0f      	ldr	r6, [pc, #60]	@ (8007c48 <sbrk_aligned+0x40>)
 8007c0c:	460c      	mov	r4, r1
 8007c0e:	6831      	ldr	r1, [r6, #0]
 8007c10:	4605      	mov	r5, r0
 8007c12:	b911      	cbnz	r1, 8007c1a <sbrk_aligned+0x12>
 8007c14:	f001 ffee 	bl	8009bf4 <_sbrk_r>
 8007c18:	6030      	str	r0, [r6, #0]
 8007c1a:	4621      	mov	r1, r4
 8007c1c:	4628      	mov	r0, r5
 8007c1e:	f001 ffe9 	bl	8009bf4 <_sbrk_r>
 8007c22:	1c43      	adds	r3, r0, #1
 8007c24:	d103      	bne.n	8007c2e <sbrk_aligned+0x26>
 8007c26:	f04f 34ff 	mov.w	r4, #4294967295
 8007c2a:	4620      	mov	r0, r4
 8007c2c:	bd70      	pop	{r4, r5, r6, pc}
 8007c2e:	1cc4      	adds	r4, r0, #3
 8007c30:	f024 0403 	bic.w	r4, r4, #3
 8007c34:	42a0      	cmp	r0, r4
 8007c36:	d0f8      	beq.n	8007c2a <sbrk_aligned+0x22>
 8007c38:	1a21      	subs	r1, r4, r0
 8007c3a:	4628      	mov	r0, r5
 8007c3c:	f001 ffda 	bl	8009bf4 <_sbrk_r>
 8007c40:	3001      	adds	r0, #1
 8007c42:	d1f2      	bne.n	8007c2a <sbrk_aligned+0x22>
 8007c44:	e7ef      	b.n	8007c26 <sbrk_aligned+0x1e>
 8007c46:	bf00      	nop
 8007c48:	20000568 	.word	0x20000568

08007c4c <_malloc_r>:
 8007c4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007c50:	1ccd      	adds	r5, r1, #3
 8007c52:	f025 0503 	bic.w	r5, r5, #3
 8007c56:	3508      	adds	r5, #8
 8007c58:	2d0c      	cmp	r5, #12
 8007c5a:	bf38      	it	cc
 8007c5c:	250c      	movcc	r5, #12
 8007c5e:	2d00      	cmp	r5, #0
 8007c60:	4606      	mov	r6, r0
 8007c62:	db01      	blt.n	8007c68 <_malloc_r+0x1c>
 8007c64:	42a9      	cmp	r1, r5
 8007c66:	d904      	bls.n	8007c72 <_malloc_r+0x26>
 8007c68:	230c      	movs	r3, #12
 8007c6a:	6033      	str	r3, [r6, #0]
 8007c6c:	2000      	movs	r0, #0
 8007c6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007c72:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007d48 <_malloc_r+0xfc>
 8007c76:	f000 f869 	bl	8007d4c <__malloc_lock>
 8007c7a:	f8d8 3000 	ldr.w	r3, [r8]
 8007c7e:	461c      	mov	r4, r3
 8007c80:	bb44      	cbnz	r4, 8007cd4 <_malloc_r+0x88>
 8007c82:	4629      	mov	r1, r5
 8007c84:	4630      	mov	r0, r6
 8007c86:	f7ff ffbf 	bl	8007c08 <sbrk_aligned>
 8007c8a:	1c43      	adds	r3, r0, #1
 8007c8c:	4604      	mov	r4, r0
 8007c8e:	d158      	bne.n	8007d42 <_malloc_r+0xf6>
 8007c90:	f8d8 4000 	ldr.w	r4, [r8]
 8007c94:	4627      	mov	r7, r4
 8007c96:	2f00      	cmp	r7, #0
 8007c98:	d143      	bne.n	8007d22 <_malloc_r+0xd6>
 8007c9a:	2c00      	cmp	r4, #0
 8007c9c:	d04b      	beq.n	8007d36 <_malloc_r+0xea>
 8007c9e:	6823      	ldr	r3, [r4, #0]
 8007ca0:	4639      	mov	r1, r7
 8007ca2:	4630      	mov	r0, r6
 8007ca4:	eb04 0903 	add.w	r9, r4, r3
 8007ca8:	f001 ffa4 	bl	8009bf4 <_sbrk_r>
 8007cac:	4581      	cmp	r9, r0
 8007cae:	d142      	bne.n	8007d36 <_malloc_r+0xea>
 8007cb0:	6821      	ldr	r1, [r4, #0]
 8007cb2:	4630      	mov	r0, r6
 8007cb4:	1a6d      	subs	r5, r5, r1
 8007cb6:	4629      	mov	r1, r5
 8007cb8:	f7ff ffa6 	bl	8007c08 <sbrk_aligned>
 8007cbc:	3001      	adds	r0, #1
 8007cbe:	d03a      	beq.n	8007d36 <_malloc_r+0xea>
 8007cc0:	6823      	ldr	r3, [r4, #0]
 8007cc2:	442b      	add	r3, r5
 8007cc4:	6023      	str	r3, [r4, #0]
 8007cc6:	f8d8 3000 	ldr.w	r3, [r8]
 8007cca:	685a      	ldr	r2, [r3, #4]
 8007ccc:	bb62      	cbnz	r2, 8007d28 <_malloc_r+0xdc>
 8007cce:	f8c8 7000 	str.w	r7, [r8]
 8007cd2:	e00f      	b.n	8007cf4 <_malloc_r+0xa8>
 8007cd4:	6822      	ldr	r2, [r4, #0]
 8007cd6:	1b52      	subs	r2, r2, r5
 8007cd8:	d420      	bmi.n	8007d1c <_malloc_r+0xd0>
 8007cda:	2a0b      	cmp	r2, #11
 8007cdc:	d917      	bls.n	8007d0e <_malloc_r+0xc2>
 8007cde:	1961      	adds	r1, r4, r5
 8007ce0:	42a3      	cmp	r3, r4
 8007ce2:	6025      	str	r5, [r4, #0]
 8007ce4:	bf18      	it	ne
 8007ce6:	6059      	strne	r1, [r3, #4]
 8007ce8:	6863      	ldr	r3, [r4, #4]
 8007cea:	bf08      	it	eq
 8007cec:	f8c8 1000 	streq.w	r1, [r8]
 8007cf0:	5162      	str	r2, [r4, r5]
 8007cf2:	604b      	str	r3, [r1, #4]
 8007cf4:	4630      	mov	r0, r6
 8007cf6:	f000 f82f 	bl	8007d58 <__malloc_unlock>
 8007cfa:	f104 000b 	add.w	r0, r4, #11
 8007cfe:	1d23      	adds	r3, r4, #4
 8007d00:	f020 0007 	bic.w	r0, r0, #7
 8007d04:	1ac2      	subs	r2, r0, r3
 8007d06:	bf1c      	itt	ne
 8007d08:	1a1b      	subne	r3, r3, r0
 8007d0a:	50a3      	strne	r3, [r4, r2]
 8007d0c:	e7af      	b.n	8007c6e <_malloc_r+0x22>
 8007d0e:	6862      	ldr	r2, [r4, #4]
 8007d10:	42a3      	cmp	r3, r4
 8007d12:	bf0c      	ite	eq
 8007d14:	f8c8 2000 	streq.w	r2, [r8]
 8007d18:	605a      	strne	r2, [r3, #4]
 8007d1a:	e7eb      	b.n	8007cf4 <_malloc_r+0xa8>
 8007d1c:	4623      	mov	r3, r4
 8007d1e:	6864      	ldr	r4, [r4, #4]
 8007d20:	e7ae      	b.n	8007c80 <_malloc_r+0x34>
 8007d22:	463c      	mov	r4, r7
 8007d24:	687f      	ldr	r7, [r7, #4]
 8007d26:	e7b6      	b.n	8007c96 <_malloc_r+0x4a>
 8007d28:	461a      	mov	r2, r3
 8007d2a:	685b      	ldr	r3, [r3, #4]
 8007d2c:	42a3      	cmp	r3, r4
 8007d2e:	d1fb      	bne.n	8007d28 <_malloc_r+0xdc>
 8007d30:	2300      	movs	r3, #0
 8007d32:	6053      	str	r3, [r2, #4]
 8007d34:	e7de      	b.n	8007cf4 <_malloc_r+0xa8>
 8007d36:	230c      	movs	r3, #12
 8007d38:	4630      	mov	r0, r6
 8007d3a:	6033      	str	r3, [r6, #0]
 8007d3c:	f000 f80c 	bl	8007d58 <__malloc_unlock>
 8007d40:	e794      	b.n	8007c6c <_malloc_r+0x20>
 8007d42:	6005      	str	r5, [r0, #0]
 8007d44:	e7d6      	b.n	8007cf4 <_malloc_r+0xa8>
 8007d46:	bf00      	nop
 8007d48:	2000056c 	.word	0x2000056c

08007d4c <__malloc_lock>:
 8007d4c:	4801      	ldr	r0, [pc, #4]	@ (8007d54 <__malloc_lock+0x8>)
 8007d4e:	f7ff b8a4 	b.w	8006e9a <__retarget_lock_acquire_recursive>
 8007d52:	bf00      	nop
 8007d54:	20000564 	.word	0x20000564

08007d58 <__malloc_unlock>:
 8007d58:	4801      	ldr	r0, [pc, #4]	@ (8007d60 <__malloc_unlock+0x8>)
 8007d5a:	f7ff b89f 	b.w	8006e9c <__retarget_lock_release_recursive>
 8007d5e:	bf00      	nop
 8007d60:	20000564 	.word	0x20000564

08007d64 <_Balloc>:
 8007d64:	b570      	push	{r4, r5, r6, lr}
 8007d66:	69c6      	ldr	r6, [r0, #28]
 8007d68:	4604      	mov	r4, r0
 8007d6a:	460d      	mov	r5, r1
 8007d6c:	b976      	cbnz	r6, 8007d8c <_Balloc+0x28>
 8007d6e:	2010      	movs	r0, #16
 8007d70:	f7ff ff42 	bl	8007bf8 <malloc>
 8007d74:	4602      	mov	r2, r0
 8007d76:	61e0      	str	r0, [r4, #28]
 8007d78:	b920      	cbnz	r0, 8007d84 <_Balloc+0x20>
 8007d7a:	216b      	movs	r1, #107	@ 0x6b
 8007d7c:	4b17      	ldr	r3, [pc, #92]	@ (8007ddc <_Balloc+0x78>)
 8007d7e:	4818      	ldr	r0, [pc, #96]	@ (8007de0 <_Balloc+0x7c>)
 8007d80:	f001 ff5c 	bl	8009c3c <__assert_func>
 8007d84:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007d88:	6006      	str	r6, [r0, #0]
 8007d8a:	60c6      	str	r6, [r0, #12]
 8007d8c:	69e6      	ldr	r6, [r4, #28]
 8007d8e:	68f3      	ldr	r3, [r6, #12]
 8007d90:	b183      	cbz	r3, 8007db4 <_Balloc+0x50>
 8007d92:	69e3      	ldr	r3, [r4, #28]
 8007d94:	68db      	ldr	r3, [r3, #12]
 8007d96:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007d9a:	b9b8      	cbnz	r0, 8007dcc <_Balloc+0x68>
 8007d9c:	2101      	movs	r1, #1
 8007d9e:	fa01 f605 	lsl.w	r6, r1, r5
 8007da2:	1d72      	adds	r2, r6, #5
 8007da4:	4620      	mov	r0, r4
 8007da6:	0092      	lsls	r2, r2, #2
 8007da8:	f001 ff66 	bl	8009c78 <_calloc_r>
 8007dac:	b160      	cbz	r0, 8007dc8 <_Balloc+0x64>
 8007dae:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007db2:	e00e      	b.n	8007dd2 <_Balloc+0x6e>
 8007db4:	2221      	movs	r2, #33	@ 0x21
 8007db6:	2104      	movs	r1, #4
 8007db8:	4620      	mov	r0, r4
 8007dba:	f001 ff5d 	bl	8009c78 <_calloc_r>
 8007dbe:	69e3      	ldr	r3, [r4, #28]
 8007dc0:	60f0      	str	r0, [r6, #12]
 8007dc2:	68db      	ldr	r3, [r3, #12]
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d1e4      	bne.n	8007d92 <_Balloc+0x2e>
 8007dc8:	2000      	movs	r0, #0
 8007dca:	bd70      	pop	{r4, r5, r6, pc}
 8007dcc:	6802      	ldr	r2, [r0, #0]
 8007dce:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007dd2:	2300      	movs	r3, #0
 8007dd4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007dd8:	e7f7      	b.n	8007dca <_Balloc+0x66>
 8007dda:	bf00      	nop
 8007ddc:	0800ae14 	.word	0x0800ae14
 8007de0:	0800ae94 	.word	0x0800ae94

08007de4 <_Bfree>:
 8007de4:	b570      	push	{r4, r5, r6, lr}
 8007de6:	69c6      	ldr	r6, [r0, #28]
 8007de8:	4605      	mov	r5, r0
 8007dea:	460c      	mov	r4, r1
 8007dec:	b976      	cbnz	r6, 8007e0c <_Bfree+0x28>
 8007dee:	2010      	movs	r0, #16
 8007df0:	f7ff ff02 	bl	8007bf8 <malloc>
 8007df4:	4602      	mov	r2, r0
 8007df6:	61e8      	str	r0, [r5, #28]
 8007df8:	b920      	cbnz	r0, 8007e04 <_Bfree+0x20>
 8007dfa:	218f      	movs	r1, #143	@ 0x8f
 8007dfc:	4b08      	ldr	r3, [pc, #32]	@ (8007e20 <_Bfree+0x3c>)
 8007dfe:	4809      	ldr	r0, [pc, #36]	@ (8007e24 <_Bfree+0x40>)
 8007e00:	f001 ff1c 	bl	8009c3c <__assert_func>
 8007e04:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007e08:	6006      	str	r6, [r0, #0]
 8007e0a:	60c6      	str	r6, [r0, #12]
 8007e0c:	b13c      	cbz	r4, 8007e1e <_Bfree+0x3a>
 8007e0e:	69eb      	ldr	r3, [r5, #28]
 8007e10:	6862      	ldr	r2, [r4, #4]
 8007e12:	68db      	ldr	r3, [r3, #12]
 8007e14:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007e18:	6021      	str	r1, [r4, #0]
 8007e1a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007e1e:	bd70      	pop	{r4, r5, r6, pc}
 8007e20:	0800ae14 	.word	0x0800ae14
 8007e24:	0800ae94 	.word	0x0800ae94

08007e28 <__multadd>:
 8007e28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e2c:	4607      	mov	r7, r0
 8007e2e:	460c      	mov	r4, r1
 8007e30:	461e      	mov	r6, r3
 8007e32:	2000      	movs	r0, #0
 8007e34:	690d      	ldr	r5, [r1, #16]
 8007e36:	f101 0c14 	add.w	ip, r1, #20
 8007e3a:	f8dc 3000 	ldr.w	r3, [ip]
 8007e3e:	3001      	adds	r0, #1
 8007e40:	b299      	uxth	r1, r3
 8007e42:	fb02 6101 	mla	r1, r2, r1, r6
 8007e46:	0c1e      	lsrs	r6, r3, #16
 8007e48:	0c0b      	lsrs	r3, r1, #16
 8007e4a:	fb02 3306 	mla	r3, r2, r6, r3
 8007e4e:	b289      	uxth	r1, r1
 8007e50:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007e54:	4285      	cmp	r5, r0
 8007e56:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007e5a:	f84c 1b04 	str.w	r1, [ip], #4
 8007e5e:	dcec      	bgt.n	8007e3a <__multadd+0x12>
 8007e60:	b30e      	cbz	r6, 8007ea6 <__multadd+0x7e>
 8007e62:	68a3      	ldr	r3, [r4, #8]
 8007e64:	42ab      	cmp	r3, r5
 8007e66:	dc19      	bgt.n	8007e9c <__multadd+0x74>
 8007e68:	6861      	ldr	r1, [r4, #4]
 8007e6a:	4638      	mov	r0, r7
 8007e6c:	3101      	adds	r1, #1
 8007e6e:	f7ff ff79 	bl	8007d64 <_Balloc>
 8007e72:	4680      	mov	r8, r0
 8007e74:	b928      	cbnz	r0, 8007e82 <__multadd+0x5a>
 8007e76:	4602      	mov	r2, r0
 8007e78:	21ba      	movs	r1, #186	@ 0xba
 8007e7a:	4b0c      	ldr	r3, [pc, #48]	@ (8007eac <__multadd+0x84>)
 8007e7c:	480c      	ldr	r0, [pc, #48]	@ (8007eb0 <__multadd+0x88>)
 8007e7e:	f001 fedd 	bl	8009c3c <__assert_func>
 8007e82:	6922      	ldr	r2, [r4, #16]
 8007e84:	f104 010c 	add.w	r1, r4, #12
 8007e88:	3202      	adds	r2, #2
 8007e8a:	0092      	lsls	r2, r2, #2
 8007e8c:	300c      	adds	r0, #12
 8007e8e:	f001 fec1 	bl	8009c14 <memcpy>
 8007e92:	4621      	mov	r1, r4
 8007e94:	4638      	mov	r0, r7
 8007e96:	f7ff ffa5 	bl	8007de4 <_Bfree>
 8007e9a:	4644      	mov	r4, r8
 8007e9c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007ea0:	3501      	adds	r5, #1
 8007ea2:	615e      	str	r6, [r3, #20]
 8007ea4:	6125      	str	r5, [r4, #16]
 8007ea6:	4620      	mov	r0, r4
 8007ea8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007eac:	0800ae83 	.word	0x0800ae83
 8007eb0:	0800ae94 	.word	0x0800ae94

08007eb4 <__s2b>:
 8007eb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007eb8:	4615      	mov	r5, r2
 8007eba:	2209      	movs	r2, #9
 8007ebc:	461f      	mov	r7, r3
 8007ebe:	3308      	adds	r3, #8
 8007ec0:	460c      	mov	r4, r1
 8007ec2:	fb93 f3f2 	sdiv	r3, r3, r2
 8007ec6:	4606      	mov	r6, r0
 8007ec8:	2201      	movs	r2, #1
 8007eca:	2100      	movs	r1, #0
 8007ecc:	429a      	cmp	r2, r3
 8007ece:	db09      	blt.n	8007ee4 <__s2b+0x30>
 8007ed0:	4630      	mov	r0, r6
 8007ed2:	f7ff ff47 	bl	8007d64 <_Balloc>
 8007ed6:	b940      	cbnz	r0, 8007eea <__s2b+0x36>
 8007ed8:	4602      	mov	r2, r0
 8007eda:	21d3      	movs	r1, #211	@ 0xd3
 8007edc:	4b18      	ldr	r3, [pc, #96]	@ (8007f40 <__s2b+0x8c>)
 8007ede:	4819      	ldr	r0, [pc, #100]	@ (8007f44 <__s2b+0x90>)
 8007ee0:	f001 feac 	bl	8009c3c <__assert_func>
 8007ee4:	0052      	lsls	r2, r2, #1
 8007ee6:	3101      	adds	r1, #1
 8007ee8:	e7f0      	b.n	8007ecc <__s2b+0x18>
 8007eea:	9b08      	ldr	r3, [sp, #32]
 8007eec:	2d09      	cmp	r5, #9
 8007eee:	6143      	str	r3, [r0, #20]
 8007ef0:	f04f 0301 	mov.w	r3, #1
 8007ef4:	6103      	str	r3, [r0, #16]
 8007ef6:	dd16      	ble.n	8007f26 <__s2b+0x72>
 8007ef8:	f104 0909 	add.w	r9, r4, #9
 8007efc:	46c8      	mov	r8, r9
 8007efe:	442c      	add	r4, r5
 8007f00:	f818 3b01 	ldrb.w	r3, [r8], #1
 8007f04:	4601      	mov	r1, r0
 8007f06:	220a      	movs	r2, #10
 8007f08:	4630      	mov	r0, r6
 8007f0a:	3b30      	subs	r3, #48	@ 0x30
 8007f0c:	f7ff ff8c 	bl	8007e28 <__multadd>
 8007f10:	45a0      	cmp	r8, r4
 8007f12:	d1f5      	bne.n	8007f00 <__s2b+0x4c>
 8007f14:	f1a5 0408 	sub.w	r4, r5, #8
 8007f18:	444c      	add	r4, r9
 8007f1a:	1b2d      	subs	r5, r5, r4
 8007f1c:	1963      	adds	r3, r4, r5
 8007f1e:	42bb      	cmp	r3, r7
 8007f20:	db04      	blt.n	8007f2c <__s2b+0x78>
 8007f22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f26:	2509      	movs	r5, #9
 8007f28:	340a      	adds	r4, #10
 8007f2a:	e7f6      	b.n	8007f1a <__s2b+0x66>
 8007f2c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007f30:	4601      	mov	r1, r0
 8007f32:	220a      	movs	r2, #10
 8007f34:	4630      	mov	r0, r6
 8007f36:	3b30      	subs	r3, #48	@ 0x30
 8007f38:	f7ff ff76 	bl	8007e28 <__multadd>
 8007f3c:	e7ee      	b.n	8007f1c <__s2b+0x68>
 8007f3e:	bf00      	nop
 8007f40:	0800ae83 	.word	0x0800ae83
 8007f44:	0800ae94 	.word	0x0800ae94

08007f48 <__hi0bits>:
 8007f48:	4603      	mov	r3, r0
 8007f4a:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007f4e:	bf3a      	itte	cc
 8007f50:	0403      	lslcc	r3, r0, #16
 8007f52:	2010      	movcc	r0, #16
 8007f54:	2000      	movcs	r0, #0
 8007f56:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007f5a:	bf3c      	itt	cc
 8007f5c:	021b      	lslcc	r3, r3, #8
 8007f5e:	3008      	addcc	r0, #8
 8007f60:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007f64:	bf3c      	itt	cc
 8007f66:	011b      	lslcc	r3, r3, #4
 8007f68:	3004      	addcc	r0, #4
 8007f6a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007f6e:	bf3c      	itt	cc
 8007f70:	009b      	lslcc	r3, r3, #2
 8007f72:	3002      	addcc	r0, #2
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	db05      	blt.n	8007f84 <__hi0bits+0x3c>
 8007f78:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007f7c:	f100 0001 	add.w	r0, r0, #1
 8007f80:	bf08      	it	eq
 8007f82:	2020      	moveq	r0, #32
 8007f84:	4770      	bx	lr

08007f86 <__lo0bits>:
 8007f86:	6803      	ldr	r3, [r0, #0]
 8007f88:	4602      	mov	r2, r0
 8007f8a:	f013 0007 	ands.w	r0, r3, #7
 8007f8e:	d00b      	beq.n	8007fa8 <__lo0bits+0x22>
 8007f90:	07d9      	lsls	r1, r3, #31
 8007f92:	d421      	bmi.n	8007fd8 <__lo0bits+0x52>
 8007f94:	0798      	lsls	r0, r3, #30
 8007f96:	bf49      	itett	mi
 8007f98:	085b      	lsrmi	r3, r3, #1
 8007f9a:	089b      	lsrpl	r3, r3, #2
 8007f9c:	2001      	movmi	r0, #1
 8007f9e:	6013      	strmi	r3, [r2, #0]
 8007fa0:	bf5c      	itt	pl
 8007fa2:	2002      	movpl	r0, #2
 8007fa4:	6013      	strpl	r3, [r2, #0]
 8007fa6:	4770      	bx	lr
 8007fa8:	b299      	uxth	r1, r3
 8007faa:	b909      	cbnz	r1, 8007fb0 <__lo0bits+0x2a>
 8007fac:	2010      	movs	r0, #16
 8007fae:	0c1b      	lsrs	r3, r3, #16
 8007fb0:	b2d9      	uxtb	r1, r3
 8007fb2:	b909      	cbnz	r1, 8007fb8 <__lo0bits+0x32>
 8007fb4:	3008      	adds	r0, #8
 8007fb6:	0a1b      	lsrs	r3, r3, #8
 8007fb8:	0719      	lsls	r1, r3, #28
 8007fba:	bf04      	itt	eq
 8007fbc:	091b      	lsreq	r3, r3, #4
 8007fbe:	3004      	addeq	r0, #4
 8007fc0:	0799      	lsls	r1, r3, #30
 8007fc2:	bf04      	itt	eq
 8007fc4:	089b      	lsreq	r3, r3, #2
 8007fc6:	3002      	addeq	r0, #2
 8007fc8:	07d9      	lsls	r1, r3, #31
 8007fca:	d403      	bmi.n	8007fd4 <__lo0bits+0x4e>
 8007fcc:	085b      	lsrs	r3, r3, #1
 8007fce:	f100 0001 	add.w	r0, r0, #1
 8007fd2:	d003      	beq.n	8007fdc <__lo0bits+0x56>
 8007fd4:	6013      	str	r3, [r2, #0]
 8007fd6:	4770      	bx	lr
 8007fd8:	2000      	movs	r0, #0
 8007fda:	4770      	bx	lr
 8007fdc:	2020      	movs	r0, #32
 8007fde:	4770      	bx	lr

08007fe0 <__i2b>:
 8007fe0:	b510      	push	{r4, lr}
 8007fe2:	460c      	mov	r4, r1
 8007fe4:	2101      	movs	r1, #1
 8007fe6:	f7ff febd 	bl	8007d64 <_Balloc>
 8007fea:	4602      	mov	r2, r0
 8007fec:	b928      	cbnz	r0, 8007ffa <__i2b+0x1a>
 8007fee:	f240 1145 	movw	r1, #325	@ 0x145
 8007ff2:	4b04      	ldr	r3, [pc, #16]	@ (8008004 <__i2b+0x24>)
 8007ff4:	4804      	ldr	r0, [pc, #16]	@ (8008008 <__i2b+0x28>)
 8007ff6:	f001 fe21 	bl	8009c3c <__assert_func>
 8007ffa:	2301      	movs	r3, #1
 8007ffc:	6144      	str	r4, [r0, #20]
 8007ffe:	6103      	str	r3, [r0, #16]
 8008000:	bd10      	pop	{r4, pc}
 8008002:	bf00      	nop
 8008004:	0800ae83 	.word	0x0800ae83
 8008008:	0800ae94 	.word	0x0800ae94

0800800c <__multiply>:
 800800c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008010:	4614      	mov	r4, r2
 8008012:	690a      	ldr	r2, [r1, #16]
 8008014:	6923      	ldr	r3, [r4, #16]
 8008016:	460f      	mov	r7, r1
 8008018:	429a      	cmp	r2, r3
 800801a:	bfa2      	ittt	ge
 800801c:	4623      	movge	r3, r4
 800801e:	460c      	movge	r4, r1
 8008020:	461f      	movge	r7, r3
 8008022:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8008026:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800802a:	68a3      	ldr	r3, [r4, #8]
 800802c:	6861      	ldr	r1, [r4, #4]
 800802e:	eb0a 0609 	add.w	r6, sl, r9
 8008032:	42b3      	cmp	r3, r6
 8008034:	b085      	sub	sp, #20
 8008036:	bfb8      	it	lt
 8008038:	3101      	addlt	r1, #1
 800803a:	f7ff fe93 	bl	8007d64 <_Balloc>
 800803e:	b930      	cbnz	r0, 800804e <__multiply+0x42>
 8008040:	4602      	mov	r2, r0
 8008042:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008046:	4b43      	ldr	r3, [pc, #268]	@ (8008154 <__multiply+0x148>)
 8008048:	4843      	ldr	r0, [pc, #268]	@ (8008158 <__multiply+0x14c>)
 800804a:	f001 fdf7 	bl	8009c3c <__assert_func>
 800804e:	f100 0514 	add.w	r5, r0, #20
 8008052:	462b      	mov	r3, r5
 8008054:	2200      	movs	r2, #0
 8008056:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800805a:	4543      	cmp	r3, r8
 800805c:	d321      	bcc.n	80080a2 <__multiply+0x96>
 800805e:	f107 0114 	add.w	r1, r7, #20
 8008062:	f104 0214 	add.w	r2, r4, #20
 8008066:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800806a:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800806e:	9302      	str	r3, [sp, #8]
 8008070:	1b13      	subs	r3, r2, r4
 8008072:	3b15      	subs	r3, #21
 8008074:	f023 0303 	bic.w	r3, r3, #3
 8008078:	3304      	adds	r3, #4
 800807a:	f104 0715 	add.w	r7, r4, #21
 800807e:	42ba      	cmp	r2, r7
 8008080:	bf38      	it	cc
 8008082:	2304      	movcc	r3, #4
 8008084:	9301      	str	r3, [sp, #4]
 8008086:	9b02      	ldr	r3, [sp, #8]
 8008088:	9103      	str	r1, [sp, #12]
 800808a:	428b      	cmp	r3, r1
 800808c:	d80c      	bhi.n	80080a8 <__multiply+0x9c>
 800808e:	2e00      	cmp	r6, #0
 8008090:	dd03      	ble.n	800809a <__multiply+0x8e>
 8008092:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008096:	2b00      	cmp	r3, #0
 8008098:	d05a      	beq.n	8008150 <__multiply+0x144>
 800809a:	6106      	str	r6, [r0, #16]
 800809c:	b005      	add	sp, #20
 800809e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080a2:	f843 2b04 	str.w	r2, [r3], #4
 80080a6:	e7d8      	b.n	800805a <__multiply+0x4e>
 80080a8:	f8b1 a000 	ldrh.w	sl, [r1]
 80080ac:	f1ba 0f00 	cmp.w	sl, #0
 80080b0:	d023      	beq.n	80080fa <__multiply+0xee>
 80080b2:	46a9      	mov	r9, r5
 80080b4:	f04f 0c00 	mov.w	ip, #0
 80080b8:	f104 0e14 	add.w	lr, r4, #20
 80080bc:	f85e 7b04 	ldr.w	r7, [lr], #4
 80080c0:	f8d9 3000 	ldr.w	r3, [r9]
 80080c4:	fa1f fb87 	uxth.w	fp, r7
 80080c8:	b29b      	uxth	r3, r3
 80080ca:	fb0a 330b 	mla	r3, sl, fp, r3
 80080ce:	4463      	add	r3, ip
 80080d0:	f8d9 c000 	ldr.w	ip, [r9]
 80080d4:	0c3f      	lsrs	r7, r7, #16
 80080d6:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80080da:	fb0a c707 	mla	r7, sl, r7, ip
 80080de:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80080e2:	b29b      	uxth	r3, r3
 80080e4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80080e8:	4572      	cmp	r2, lr
 80080ea:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80080ee:	f849 3b04 	str.w	r3, [r9], #4
 80080f2:	d8e3      	bhi.n	80080bc <__multiply+0xb0>
 80080f4:	9b01      	ldr	r3, [sp, #4]
 80080f6:	f845 c003 	str.w	ip, [r5, r3]
 80080fa:	9b03      	ldr	r3, [sp, #12]
 80080fc:	3104      	adds	r1, #4
 80080fe:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008102:	f1b9 0f00 	cmp.w	r9, #0
 8008106:	d021      	beq.n	800814c <__multiply+0x140>
 8008108:	46ae      	mov	lr, r5
 800810a:	f04f 0a00 	mov.w	sl, #0
 800810e:	682b      	ldr	r3, [r5, #0]
 8008110:	f104 0c14 	add.w	ip, r4, #20
 8008114:	f8bc b000 	ldrh.w	fp, [ip]
 8008118:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800811c:	b29b      	uxth	r3, r3
 800811e:	fb09 770b 	mla	r7, r9, fp, r7
 8008122:	4457      	add	r7, sl
 8008124:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008128:	f84e 3b04 	str.w	r3, [lr], #4
 800812c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008130:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008134:	f8be 3000 	ldrh.w	r3, [lr]
 8008138:	4562      	cmp	r2, ip
 800813a:	fb09 330a 	mla	r3, r9, sl, r3
 800813e:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8008142:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008146:	d8e5      	bhi.n	8008114 <__multiply+0x108>
 8008148:	9f01      	ldr	r7, [sp, #4]
 800814a:	51eb      	str	r3, [r5, r7]
 800814c:	3504      	adds	r5, #4
 800814e:	e79a      	b.n	8008086 <__multiply+0x7a>
 8008150:	3e01      	subs	r6, #1
 8008152:	e79c      	b.n	800808e <__multiply+0x82>
 8008154:	0800ae83 	.word	0x0800ae83
 8008158:	0800ae94 	.word	0x0800ae94

0800815c <__pow5mult>:
 800815c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008160:	4615      	mov	r5, r2
 8008162:	f012 0203 	ands.w	r2, r2, #3
 8008166:	4607      	mov	r7, r0
 8008168:	460e      	mov	r6, r1
 800816a:	d007      	beq.n	800817c <__pow5mult+0x20>
 800816c:	4c25      	ldr	r4, [pc, #148]	@ (8008204 <__pow5mult+0xa8>)
 800816e:	3a01      	subs	r2, #1
 8008170:	2300      	movs	r3, #0
 8008172:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008176:	f7ff fe57 	bl	8007e28 <__multadd>
 800817a:	4606      	mov	r6, r0
 800817c:	10ad      	asrs	r5, r5, #2
 800817e:	d03d      	beq.n	80081fc <__pow5mult+0xa0>
 8008180:	69fc      	ldr	r4, [r7, #28]
 8008182:	b97c      	cbnz	r4, 80081a4 <__pow5mult+0x48>
 8008184:	2010      	movs	r0, #16
 8008186:	f7ff fd37 	bl	8007bf8 <malloc>
 800818a:	4602      	mov	r2, r0
 800818c:	61f8      	str	r0, [r7, #28]
 800818e:	b928      	cbnz	r0, 800819c <__pow5mult+0x40>
 8008190:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008194:	4b1c      	ldr	r3, [pc, #112]	@ (8008208 <__pow5mult+0xac>)
 8008196:	481d      	ldr	r0, [pc, #116]	@ (800820c <__pow5mult+0xb0>)
 8008198:	f001 fd50 	bl	8009c3c <__assert_func>
 800819c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80081a0:	6004      	str	r4, [r0, #0]
 80081a2:	60c4      	str	r4, [r0, #12]
 80081a4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80081a8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80081ac:	b94c      	cbnz	r4, 80081c2 <__pow5mult+0x66>
 80081ae:	f240 2171 	movw	r1, #625	@ 0x271
 80081b2:	4638      	mov	r0, r7
 80081b4:	f7ff ff14 	bl	8007fe0 <__i2b>
 80081b8:	2300      	movs	r3, #0
 80081ba:	4604      	mov	r4, r0
 80081bc:	f8c8 0008 	str.w	r0, [r8, #8]
 80081c0:	6003      	str	r3, [r0, #0]
 80081c2:	f04f 0900 	mov.w	r9, #0
 80081c6:	07eb      	lsls	r3, r5, #31
 80081c8:	d50a      	bpl.n	80081e0 <__pow5mult+0x84>
 80081ca:	4631      	mov	r1, r6
 80081cc:	4622      	mov	r2, r4
 80081ce:	4638      	mov	r0, r7
 80081d0:	f7ff ff1c 	bl	800800c <__multiply>
 80081d4:	4680      	mov	r8, r0
 80081d6:	4631      	mov	r1, r6
 80081d8:	4638      	mov	r0, r7
 80081da:	f7ff fe03 	bl	8007de4 <_Bfree>
 80081de:	4646      	mov	r6, r8
 80081e0:	106d      	asrs	r5, r5, #1
 80081e2:	d00b      	beq.n	80081fc <__pow5mult+0xa0>
 80081e4:	6820      	ldr	r0, [r4, #0]
 80081e6:	b938      	cbnz	r0, 80081f8 <__pow5mult+0x9c>
 80081e8:	4622      	mov	r2, r4
 80081ea:	4621      	mov	r1, r4
 80081ec:	4638      	mov	r0, r7
 80081ee:	f7ff ff0d 	bl	800800c <__multiply>
 80081f2:	6020      	str	r0, [r4, #0]
 80081f4:	f8c0 9000 	str.w	r9, [r0]
 80081f8:	4604      	mov	r4, r0
 80081fa:	e7e4      	b.n	80081c6 <__pow5mult+0x6a>
 80081fc:	4630      	mov	r0, r6
 80081fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008202:	bf00      	nop
 8008204:	0800aef0 	.word	0x0800aef0
 8008208:	0800ae14 	.word	0x0800ae14
 800820c:	0800ae94 	.word	0x0800ae94

08008210 <__lshift>:
 8008210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008214:	460c      	mov	r4, r1
 8008216:	4607      	mov	r7, r0
 8008218:	4691      	mov	r9, r2
 800821a:	6923      	ldr	r3, [r4, #16]
 800821c:	6849      	ldr	r1, [r1, #4]
 800821e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008222:	68a3      	ldr	r3, [r4, #8]
 8008224:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008228:	f108 0601 	add.w	r6, r8, #1
 800822c:	42b3      	cmp	r3, r6
 800822e:	db0b      	blt.n	8008248 <__lshift+0x38>
 8008230:	4638      	mov	r0, r7
 8008232:	f7ff fd97 	bl	8007d64 <_Balloc>
 8008236:	4605      	mov	r5, r0
 8008238:	b948      	cbnz	r0, 800824e <__lshift+0x3e>
 800823a:	4602      	mov	r2, r0
 800823c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008240:	4b27      	ldr	r3, [pc, #156]	@ (80082e0 <__lshift+0xd0>)
 8008242:	4828      	ldr	r0, [pc, #160]	@ (80082e4 <__lshift+0xd4>)
 8008244:	f001 fcfa 	bl	8009c3c <__assert_func>
 8008248:	3101      	adds	r1, #1
 800824a:	005b      	lsls	r3, r3, #1
 800824c:	e7ee      	b.n	800822c <__lshift+0x1c>
 800824e:	2300      	movs	r3, #0
 8008250:	f100 0114 	add.w	r1, r0, #20
 8008254:	f100 0210 	add.w	r2, r0, #16
 8008258:	4618      	mov	r0, r3
 800825a:	4553      	cmp	r3, sl
 800825c:	db33      	blt.n	80082c6 <__lshift+0xb6>
 800825e:	6920      	ldr	r0, [r4, #16]
 8008260:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008264:	f104 0314 	add.w	r3, r4, #20
 8008268:	f019 091f 	ands.w	r9, r9, #31
 800826c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008270:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008274:	d02b      	beq.n	80082ce <__lshift+0xbe>
 8008276:	468a      	mov	sl, r1
 8008278:	2200      	movs	r2, #0
 800827a:	f1c9 0e20 	rsb	lr, r9, #32
 800827e:	6818      	ldr	r0, [r3, #0]
 8008280:	fa00 f009 	lsl.w	r0, r0, r9
 8008284:	4310      	orrs	r0, r2
 8008286:	f84a 0b04 	str.w	r0, [sl], #4
 800828a:	f853 2b04 	ldr.w	r2, [r3], #4
 800828e:	459c      	cmp	ip, r3
 8008290:	fa22 f20e 	lsr.w	r2, r2, lr
 8008294:	d8f3      	bhi.n	800827e <__lshift+0x6e>
 8008296:	ebac 0304 	sub.w	r3, ip, r4
 800829a:	3b15      	subs	r3, #21
 800829c:	f023 0303 	bic.w	r3, r3, #3
 80082a0:	3304      	adds	r3, #4
 80082a2:	f104 0015 	add.w	r0, r4, #21
 80082a6:	4584      	cmp	ip, r0
 80082a8:	bf38      	it	cc
 80082aa:	2304      	movcc	r3, #4
 80082ac:	50ca      	str	r2, [r1, r3]
 80082ae:	b10a      	cbz	r2, 80082b4 <__lshift+0xa4>
 80082b0:	f108 0602 	add.w	r6, r8, #2
 80082b4:	3e01      	subs	r6, #1
 80082b6:	4638      	mov	r0, r7
 80082b8:	4621      	mov	r1, r4
 80082ba:	612e      	str	r6, [r5, #16]
 80082bc:	f7ff fd92 	bl	8007de4 <_Bfree>
 80082c0:	4628      	mov	r0, r5
 80082c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082c6:	f842 0f04 	str.w	r0, [r2, #4]!
 80082ca:	3301      	adds	r3, #1
 80082cc:	e7c5      	b.n	800825a <__lshift+0x4a>
 80082ce:	3904      	subs	r1, #4
 80082d0:	f853 2b04 	ldr.w	r2, [r3], #4
 80082d4:	459c      	cmp	ip, r3
 80082d6:	f841 2f04 	str.w	r2, [r1, #4]!
 80082da:	d8f9      	bhi.n	80082d0 <__lshift+0xc0>
 80082dc:	e7ea      	b.n	80082b4 <__lshift+0xa4>
 80082de:	bf00      	nop
 80082e0:	0800ae83 	.word	0x0800ae83
 80082e4:	0800ae94 	.word	0x0800ae94

080082e8 <__mcmp>:
 80082e8:	4603      	mov	r3, r0
 80082ea:	690a      	ldr	r2, [r1, #16]
 80082ec:	6900      	ldr	r0, [r0, #16]
 80082ee:	b530      	push	{r4, r5, lr}
 80082f0:	1a80      	subs	r0, r0, r2
 80082f2:	d10e      	bne.n	8008312 <__mcmp+0x2a>
 80082f4:	3314      	adds	r3, #20
 80082f6:	3114      	adds	r1, #20
 80082f8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80082fc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008300:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008304:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008308:	4295      	cmp	r5, r2
 800830a:	d003      	beq.n	8008314 <__mcmp+0x2c>
 800830c:	d205      	bcs.n	800831a <__mcmp+0x32>
 800830e:	f04f 30ff 	mov.w	r0, #4294967295
 8008312:	bd30      	pop	{r4, r5, pc}
 8008314:	42a3      	cmp	r3, r4
 8008316:	d3f3      	bcc.n	8008300 <__mcmp+0x18>
 8008318:	e7fb      	b.n	8008312 <__mcmp+0x2a>
 800831a:	2001      	movs	r0, #1
 800831c:	e7f9      	b.n	8008312 <__mcmp+0x2a>
	...

08008320 <__mdiff>:
 8008320:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008324:	4689      	mov	r9, r1
 8008326:	4606      	mov	r6, r0
 8008328:	4611      	mov	r1, r2
 800832a:	4648      	mov	r0, r9
 800832c:	4614      	mov	r4, r2
 800832e:	f7ff ffdb 	bl	80082e8 <__mcmp>
 8008332:	1e05      	subs	r5, r0, #0
 8008334:	d112      	bne.n	800835c <__mdiff+0x3c>
 8008336:	4629      	mov	r1, r5
 8008338:	4630      	mov	r0, r6
 800833a:	f7ff fd13 	bl	8007d64 <_Balloc>
 800833e:	4602      	mov	r2, r0
 8008340:	b928      	cbnz	r0, 800834e <__mdiff+0x2e>
 8008342:	f240 2137 	movw	r1, #567	@ 0x237
 8008346:	4b3e      	ldr	r3, [pc, #248]	@ (8008440 <__mdiff+0x120>)
 8008348:	483e      	ldr	r0, [pc, #248]	@ (8008444 <__mdiff+0x124>)
 800834a:	f001 fc77 	bl	8009c3c <__assert_func>
 800834e:	2301      	movs	r3, #1
 8008350:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008354:	4610      	mov	r0, r2
 8008356:	b003      	add	sp, #12
 8008358:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800835c:	bfbc      	itt	lt
 800835e:	464b      	movlt	r3, r9
 8008360:	46a1      	movlt	r9, r4
 8008362:	4630      	mov	r0, r6
 8008364:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008368:	bfba      	itte	lt
 800836a:	461c      	movlt	r4, r3
 800836c:	2501      	movlt	r5, #1
 800836e:	2500      	movge	r5, #0
 8008370:	f7ff fcf8 	bl	8007d64 <_Balloc>
 8008374:	4602      	mov	r2, r0
 8008376:	b918      	cbnz	r0, 8008380 <__mdiff+0x60>
 8008378:	f240 2145 	movw	r1, #581	@ 0x245
 800837c:	4b30      	ldr	r3, [pc, #192]	@ (8008440 <__mdiff+0x120>)
 800837e:	e7e3      	b.n	8008348 <__mdiff+0x28>
 8008380:	f100 0b14 	add.w	fp, r0, #20
 8008384:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008388:	f109 0310 	add.w	r3, r9, #16
 800838c:	60c5      	str	r5, [r0, #12]
 800838e:	f04f 0c00 	mov.w	ip, #0
 8008392:	f109 0514 	add.w	r5, r9, #20
 8008396:	46d9      	mov	r9, fp
 8008398:	6926      	ldr	r6, [r4, #16]
 800839a:	f104 0e14 	add.w	lr, r4, #20
 800839e:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80083a2:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80083a6:	9301      	str	r3, [sp, #4]
 80083a8:	9b01      	ldr	r3, [sp, #4]
 80083aa:	f85e 0b04 	ldr.w	r0, [lr], #4
 80083ae:	f853 af04 	ldr.w	sl, [r3, #4]!
 80083b2:	b281      	uxth	r1, r0
 80083b4:	9301      	str	r3, [sp, #4]
 80083b6:	fa1f f38a 	uxth.w	r3, sl
 80083ba:	1a5b      	subs	r3, r3, r1
 80083bc:	0c00      	lsrs	r0, r0, #16
 80083be:	4463      	add	r3, ip
 80083c0:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80083c4:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80083c8:	b29b      	uxth	r3, r3
 80083ca:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80083ce:	4576      	cmp	r6, lr
 80083d0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80083d4:	f849 3b04 	str.w	r3, [r9], #4
 80083d8:	d8e6      	bhi.n	80083a8 <__mdiff+0x88>
 80083da:	1b33      	subs	r3, r6, r4
 80083dc:	3b15      	subs	r3, #21
 80083de:	f023 0303 	bic.w	r3, r3, #3
 80083e2:	3415      	adds	r4, #21
 80083e4:	3304      	adds	r3, #4
 80083e6:	42a6      	cmp	r6, r4
 80083e8:	bf38      	it	cc
 80083ea:	2304      	movcc	r3, #4
 80083ec:	441d      	add	r5, r3
 80083ee:	445b      	add	r3, fp
 80083f0:	461e      	mov	r6, r3
 80083f2:	462c      	mov	r4, r5
 80083f4:	4544      	cmp	r4, r8
 80083f6:	d30e      	bcc.n	8008416 <__mdiff+0xf6>
 80083f8:	f108 0103 	add.w	r1, r8, #3
 80083fc:	1b49      	subs	r1, r1, r5
 80083fe:	f021 0103 	bic.w	r1, r1, #3
 8008402:	3d03      	subs	r5, #3
 8008404:	45a8      	cmp	r8, r5
 8008406:	bf38      	it	cc
 8008408:	2100      	movcc	r1, #0
 800840a:	440b      	add	r3, r1
 800840c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008410:	b199      	cbz	r1, 800843a <__mdiff+0x11a>
 8008412:	6117      	str	r7, [r2, #16]
 8008414:	e79e      	b.n	8008354 <__mdiff+0x34>
 8008416:	46e6      	mov	lr, ip
 8008418:	f854 1b04 	ldr.w	r1, [r4], #4
 800841c:	fa1f fc81 	uxth.w	ip, r1
 8008420:	44f4      	add	ip, lr
 8008422:	0c08      	lsrs	r0, r1, #16
 8008424:	4471      	add	r1, lr
 8008426:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800842a:	b289      	uxth	r1, r1
 800842c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008430:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008434:	f846 1b04 	str.w	r1, [r6], #4
 8008438:	e7dc      	b.n	80083f4 <__mdiff+0xd4>
 800843a:	3f01      	subs	r7, #1
 800843c:	e7e6      	b.n	800840c <__mdiff+0xec>
 800843e:	bf00      	nop
 8008440:	0800ae83 	.word	0x0800ae83
 8008444:	0800ae94 	.word	0x0800ae94

08008448 <__ulp>:
 8008448:	4b0e      	ldr	r3, [pc, #56]	@ (8008484 <__ulp+0x3c>)
 800844a:	400b      	ands	r3, r1
 800844c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8008450:	2b00      	cmp	r3, #0
 8008452:	dc08      	bgt.n	8008466 <__ulp+0x1e>
 8008454:	425b      	negs	r3, r3
 8008456:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800845a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800845e:	da04      	bge.n	800846a <__ulp+0x22>
 8008460:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8008464:	4113      	asrs	r3, r2
 8008466:	2200      	movs	r2, #0
 8008468:	e008      	b.n	800847c <__ulp+0x34>
 800846a:	f1a2 0314 	sub.w	r3, r2, #20
 800846e:	2b1e      	cmp	r3, #30
 8008470:	bfd6      	itet	le
 8008472:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8008476:	2201      	movgt	r2, #1
 8008478:	40da      	lsrle	r2, r3
 800847a:	2300      	movs	r3, #0
 800847c:	4619      	mov	r1, r3
 800847e:	4610      	mov	r0, r2
 8008480:	4770      	bx	lr
 8008482:	bf00      	nop
 8008484:	7ff00000 	.word	0x7ff00000

08008488 <__b2d>:
 8008488:	6902      	ldr	r2, [r0, #16]
 800848a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800848c:	f100 0614 	add.w	r6, r0, #20
 8008490:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 8008494:	f852 4c04 	ldr.w	r4, [r2, #-4]
 8008498:	4f1e      	ldr	r7, [pc, #120]	@ (8008514 <__b2d+0x8c>)
 800849a:	4620      	mov	r0, r4
 800849c:	f7ff fd54 	bl	8007f48 <__hi0bits>
 80084a0:	4603      	mov	r3, r0
 80084a2:	f1c0 0020 	rsb	r0, r0, #32
 80084a6:	2b0a      	cmp	r3, #10
 80084a8:	f1a2 0504 	sub.w	r5, r2, #4
 80084ac:	6008      	str	r0, [r1, #0]
 80084ae:	dc12      	bgt.n	80084d6 <__b2d+0x4e>
 80084b0:	42ae      	cmp	r6, r5
 80084b2:	bf2c      	ite	cs
 80084b4:	2200      	movcs	r2, #0
 80084b6:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 80084ba:	f1c3 0c0b 	rsb	ip, r3, #11
 80084be:	3315      	adds	r3, #21
 80084c0:	fa24 fe0c 	lsr.w	lr, r4, ip
 80084c4:	fa04 f303 	lsl.w	r3, r4, r3
 80084c8:	fa22 f20c 	lsr.w	r2, r2, ip
 80084cc:	ea4e 0107 	orr.w	r1, lr, r7
 80084d0:	431a      	orrs	r2, r3
 80084d2:	4610      	mov	r0, r2
 80084d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80084d6:	42ae      	cmp	r6, r5
 80084d8:	bf36      	itet	cc
 80084da:	f1a2 0508 	subcc.w	r5, r2, #8
 80084de:	2200      	movcs	r2, #0
 80084e0:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 80084e4:	3b0b      	subs	r3, #11
 80084e6:	d012      	beq.n	800850e <__b2d+0x86>
 80084e8:	f1c3 0720 	rsb	r7, r3, #32
 80084ec:	fa22 f107 	lsr.w	r1, r2, r7
 80084f0:	409c      	lsls	r4, r3
 80084f2:	430c      	orrs	r4, r1
 80084f4:	42b5      	cmp	r5, r6
 80084f6:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 80084fa:	bf94      	ite	ls
 80084fc:	2400      	movls	r4, #0
 80084fe:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 8008502:	409a      	lsls	r2, r3
 8008504:	40fc      	lsrs	r4, r7
 8008506:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800850a:	4322      	orrs	r2, r4
 800850c:	e7e1      	b.n	80084d2 <__b2d+0x4a>
 800850e:	ea44 0107 	orr.w	r1, r4, r7
 8008512:	e7de      	b.n	80084d2 <__b2d+0x4a>
 8008514:	3ff00000 	.word	0x3ff00000

08008518 <__d2b>:
 8008518:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800851c:	2101      	movs	r1, #1
 800851e:	4690      	mov	r8, r2
 8008520:	4699      	mov	r9, r3
 8008522:	9e08      	ldr	r6, [sp, #32]
 8008524:	f7ff fc1e 	bl	8007d64 <_Balloc>
 8008528:	4604      	mov	r4, r0
 800852a:	b930      	cbnz	r0, 800853a <__d2b+0x22>
 800852c:	4602      	mov	r2, r0
 800852e:	f240 310f 	movw	r1, #783	@ 0x30f
 8008532:	4b23      	ldr	r3, [pc, #140]	@ (80085c0 <__d2b+0xa8>)
 8008534:	4823      	ldr	r0, [pc, #140]	@ (80085c4 <__d2b+0xac>)
 8008536:	f001 fb81 	bl	8009c3c <__assert_func>
 800853a:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800853e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008542:	b10d      	cbz	r5, 8008548 <__d2b+0x30>
 8008544:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008548:	9301      	str	r3, [sp, #4]
 800854a:	f1b8 0300 	subs.w	r3, r8, #0
 800854e:	d024      	beq.n	800859a <__d2b+0x82>
 8008550:	4668      	mov	r0, sp
 8008552:	9300      	str	r3, [sp, #0]
 8008554:	f7ff fd17 	bl	8007f86 <__lo0bits>
 8008558:	e9dd 1200 	ldrd	r1, r2, [sp]
 800855c:	b1d8      	cbz	r0, 8008596 <__d2b+0x7e>
 800855e:	f1c0 0320 	rsb	r3, r0, #32
 8008562:	fa02 f303 	lsl.w	r3, r2, r3
 8008566:	430b      	orrs	r3, r1
 8008568:	40c2      	lsrs	r2, r0
 800856a:	6163      	str	r3, [r4, #20]
 800856c:	9201      	str	r2, [sp, #4]
 800856e:	9b01      	ldr	r3, [sp, #4]
 8008570:	2b00      	cmp	r3, #0
 8008572:	bf0c      	ite	eq
 8008574:	2201      	moveq	r2, #1
 8008576:	2202      	movne	r2, #2
 8008578:	61a3      	str	r3, [r4, #24]
 800857a:	6122      	str	r2, [r4, #16]
 800857c:	b1ad      	cbz	r5, 80085aa <__d2b+0x92>
 800857e:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008582:	4405      	add	r5, r0
 8008584:	6035      	str	r5, [r6, #0]
 8008586:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800858a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800858c:	6018      	str	r0, [r3, #0]
 800858e:	4620      	mov	r0, r4
 8008590:	b002      	add	sp, #8
 8008592:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8008596:	6161      	str	r1, [r4, #20]
 8008598:	e7e9      	b.n	800856e <__d2b+0x56>
 800859a:	a801      	add	r0, sp, #4
 800859c:	f7ff fcf3 	bl	8007f86 <__lo0bits>
 80085a0:	9b01      	ldr	r3, [sp, #4]
 80085a2:	2201      	movs	r2, #1
 80085a4:	6163      	str	r3, [r4, #20]
 80085a6:	3020      	adds	r0, #32
 80085a8:	e7e7      	b.n	800857a <__d2b+0x62>
 80085aa:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80085ae:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80085b2:	6030      	str	r0, [r6, #0]
 80085b4:	6918      	ldr	r0, [r3, #16]
 80085b6:	f7ff fcc7 	bl	8007f48 <__hi0bits>
 80085ba:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80085be:	e7e4      	b.n	800858a <__d2b+0x72>
 80085c0:	0800ae83 	.word	0x0800ae83
 80085c4:	0800ae94 	.word	0x0800ae94

080085c8 <__ratio>:
 80085c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085cc:	b085      	sub	sp, #20
 80085ce:	e9cd 1000 	strd	r1, r0, [sp]
 80085d2:	a902      	add	r1, sp, #8
 80085d4:	f7ff ff58 	bl	8008488 <__b2d>
 80085d8:	468b      	mov	fp, r1
 80085da:	4606      	mov	r6, r0
 80085dc:	460f      	mov	r7, r1
 80085de:	9800      	ldr	r0, [sp, #0]
 80085e0:	a903      	add	r1, sp, #12
 80085e2:	f7ff ff51 	bl	8008488 <__b2d>
 80085e6:	460d      	mov	r5, r1
 80085e8:	9b01      	ldr	r3, [sp, #4]
 80085ea:	4689      	mov	r9, r1
 80085ec:	6919      	ldr	r1, [r3, #16]
 80085ee:	9b00      	ldr	r3, [sp, #0]
 80085f0:	4604      	mov	r4, r0
 80085f2:	691b      	ldr	r3, [r3, #16]
 80085f4:	4630      	mov	r0, r6
 80085f6:	1ac9      	subs	r1, r1, r3
 80085f8:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80085fc:	1a9b      	subs	r3, r3, r2
 80085fe:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8008602:	2b00      	cmp	r3, #0
 8008604:	bfcd      	iteet	gt
 8008606:	463a      	movgt	r2, r7
 8008608:	462a      	movle	r2, r5
 800860a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800860e:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8008612:	bfd8      	it	le
 8008614:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8008618:	464b      	mov	r3, r9
 800861a:	4622      	mov	r2, r4
 800861c:	4659      	mov	r1, fp
 800861e:	f7f8 f885 	bl	800072c <__aeabi_ddiv>
 8008622:	b005      	add	sp, #20
 8008624:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008628 <__copybits>:
 8008628:	3901      	subs	r1, #1
 800862a:	b570      	push	{r4, r5, r6, lr}
 800862c:	1149      	asrs	r1, r1, #5
 800862e:	6914      	ldr	r4, [r2, #16]
 8008630:	3101      	adds	r1, #1
 8008632:	f102 0314 	add.w	r3, r2, #20
 8008636:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800863a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800863e:	1f05      	subs	r5, r0, #4
 8008640:	42a3      	cmp	r3, r4
 8008642:	d30c      	bcc.n	800865e <__copybits+0x36>
 8008644:	1aa3      	subs	r3, r4, r2
 8008646:	3b11      	subs	r3, #17
 8008648:	f023 0303 	bic.w	r3, r3, #3
 800864c:	3211      	adds	r2, #17
 800864e:	42a2      	cmp	r2, r4
 8008650:	bf88      	it	hi
 8008652:	2300      	movhi	r3, #0
 8008654:	4418      	add	r0, r3
 8008656:	2300      	movs	r3, #0
 8008658:	4288      	cmp	r0, r1
 800865a:	d305      	bcc.n	8008668 <__copybits+0x40>
 800865c:	bd70      	pop	{r4, r5, r6, pc}
 800865e:	f853 6b04 	ldr.w	r6, [r3], #4
 8008662:	f845 6f04 	str.w	r6, [r5, #4]!
 8008666:	e7eb      	b.n	8008640 <__copybits+0x18>
 8008668:	f840 3b04 	str.w	r3, [r0], #4
 800866c:	e7f4      	b.n	8008658 <__copybits+0x30>

0800866e <__any_on>:
 800866e:	f100 0214 	add.w	r2, r0, #20
 8008672:	6900      	ldr	r0, [r0, #16]
 8008674:	114b      	asrs	r3, r1, #5
 8008676:	4298      	cmp	r0, r3
 8008678:	b510      	push	{r4, lr}
 800867a:	db11      	blt.n	80086a0 <__any_on+0x32>
 800867c:	dd0a      	ble.n	8008694 <__any_on+0x26>
 800867e:	f011 011f 	ands.w	r1, r1, #31
 8008682:	d007      	beq.n	8008694 <__any_on+0x26>
 8008684:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008688:	fa24 f001 	lsr.w	r0, r4, r1
 800868c:	fa00 f101 	lsl.w	r1, r0, r1
 8008690:	428c      	cmp	r4, r1
 8008692:	d10b      	bne.n	80086ac <__any_on+0x3e>
 8008694:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008698:	4293      	cmp	r3, r2
 800869a:	d803      	bhi.n	80086a4 <__any_on+0x36>
 800869c:	2000      	movs	r0, #0
 800869e:	bd10      	pop	{r4, pc}
 80086a0:	4603      	mov	r3, r0
 80086a2:	e7f7      	b.n	8008694 <__any_on+0x26>
 80086a4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80086a8:	2900      	cmp	r1, #0
 80086aa:	d0f5      	beq.n	8008698 <__any_on+0x2a>
 80086ac:	2001      	movs	r0, #1
 80086ae:	e7f6      	b.n	800869e <__any_on+0x30>

080086b0 <sulp>:
 80086b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80086b4:	460f      	mov	r7, r1
 80086b6:	4690      	mov	r8, r2
 80086b8:	f7ff fec6 	bl	8008448 <__ulp>
 80086bc:	4604      	mov	r4, r0
 80086be:	460d      	mov	r5, r1
 80086c0:	f1b8 0f00 	cmp.w	r8, #0
 80086c4:	d011      	beq.n	80086ea <sulp+0x3a>
 80086c6:	f3c7 530a 	ubfx	r3, r7, #20, #11
 80086ca:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	dd0b      	ble.n	80086ea <sulp+0x3a>
 80086d2:	2400      	movs	r4, #0
 80086d4:	051b      	lsls	r3, r3, #20
 80086d6:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 80086da:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 80086de:	4622      	mov	r2, r4
 80086e0:	462b      	mov	r3, r5
 80086e2:	f7f7 fef9 	bl	80004d8 <__aeabi_dmul>
 80086e6:	4604      	mov	r4, r0
 80086e8:	460d      	mov	r5, r1
 80086ea:	4620      	mov	r0, r4
 80086ec:	4629      	mov	r1, r5
 80086ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80086f2:	0000      	movs	r0, r0
 80086f4:	0000      	movs	r0, r0
	...

080086f8 <_strtod_l>:
 80086f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086fc:	b09f      	sub	sp, #124	@ 0x7c
 80086fe:	9217      	str	r2, [sp, #92]	@ 0x5c
 8008700:	2200      	movs	r2, #0
 8008702:	460c      	mov	r4, r1
 8008704:	921a      	str	r2, [sp, #104]	@ 0x68
 8008706:	f04f 0a00 	mov.w	sl, #0
 800870a:	f04f 0b00 	mov.w	fp, #0
 800870e:	460a      	mov	r2, r1
 8008710:	9005      	str	r0, [sp, #20]
 8008712:	9219      	str	r2, [sp, #100]	@ 0x64
 8008714:	7811      	ldrb	r1, [r2, #0]
 8008716:	292b      	cmp	r1, #43	@ 0x2b
 8008718:	d048      	beq.n	80087ac <_strtod_l+0xb4>
 800871a:	d836      	bhi.n	800878a <_strtod_l+0x92>
 800871c:	290d      	cmp	r1, #13
 800871e:	d830      	bhi.n	8008782 <_strtod_l+0x8a>
 8008720:	2908      	cmp	r1, #8
 8008722:	d830      	bhi.n	8008786 <_strtod_l+0x8e>
 8008724:	2900      	cmp	r1, #0
 8008726:	d039      	beq.n	800879c <_strtod_l+0xa4>
 8008728:	2200      	movs	r2, #0
 800872a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800872c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800872e:	782a      	ldrb	r2, [r5, #0]
 8008730:	2a30      	cmp	r2, #48	@ 0x30
 8008732:	f040 80b1 	bne.w	8008898 <_strtod_l+0x1a0>
 8008736:	786a      	ldrb	r2, [r5, #1]
 8008738:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800873c:	2a58      	cmp	r2, #88	@ 0x58
 800873e:	d16c      	bne.n	800881a <_strtod_l+0x122>
 8008740:	9302      	str	r3, [sp, #8]
 8008742:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008744:	4a8e      	ldr	r2, [pc, #568]	@ (8008980 <_strtod_l+0x288>)
 8008746:	9301      	str	r3, [sp, #4]
 8008748:	ab1a      	add	r3, sp, #104	@ 0x68
 800874a:	9300      	str	r3, [sp, #0]
 800874c:	9805      	ldr	r0, [sp, #20]
 800874e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8008750:	a919      	add	r1, sp, #100	@ 0x64
 8008752:	f001 fb0d 	bl	8009d70 <__gethex>
 8008756:	f010 060f 	ands.w	r6, r0, #15
 800875a:	4604      	mov	r4, r0
 800875c:	d005      	beq.n	800876a <_strtod_l+0x72>
 800875e:	2e06      	cmp	r6, #6
 8008760:	d126      	bne.n	80087b0 <_strtod_l+0xb8>
 8008762:	2300      	movs	r3, #0
 8008764:	3501      	adds	r5, #1
 8008766:	9519      	str	r5, [sp, #100]	@ 0x64
 8008768:	930b      	str	r3, [sp, #44]	@ 0x2c
 800876a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800876c:	2b00      	cmp	r3, #0
 800876e:	f040 8584 	bne.w	800927a <_strtod_l+0xb82>
 8008772:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008774:	b1bb      	cbz	r3, 80087a6 <_strtod_l+0xae>
 8008776:	4650      	mov	r0, sl
 8008778:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 800877c:	b01f      	add	sp, #124	@ 0x7c
 800877e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008782:	2920      	cmp	r1, #32
 8008784:	d1d0      	bne.n	8008728 <_strtod_l+0x30>
 8008786:	3201      	adds	r2, #1
 8008788:	e7c3      	b.n	8008712 <_strtod_l+0x1a>
 800878a:	292d      	cmp	r1, #45	@ 0x2d
 800878c:	d1cc      	bne.n	8008728 <_strtod_l+0x30>
 800878e:	2101      	movs	r1, #1
 8008790:	910b      	str	r1, [sp, #44]	@ 0x2c
 8008792:	1c51      	adds	r1, r2, #1
 8008794:	9119      	str	r1, [sp, #100]	@ 0x64
 8008796:	7852      	ldrb	r2, [r2, #1]
 8008798:	2a00      	cmp	r2, #0
 800879a:	d1c7      	bne.n	800872c <_strtod_l+0x34>
 800879c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800879e:	9419      	str	r4, [sp, #100]	@ 0x64
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	f040 8568 	bne.w	8009276 <_strtod_l+0xb7e>
 80087a6:	4650      	mov	r0, sl
 80087a8:	4659      	mov	r1, fp
 80087aa:	e7e7      	b.n	800877c <_strtod_l+0x84>
 80087ac:	2100      	movs	r1, #0
 80087ae:	e7ef      	b.n	8008790 <_strtod_l+0x98>
 80087b0:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80087b2:	b13a      	cbz	r2, 80087c4 <_strtod_l+0xcc>
 80087b4:	2135      	movs	r1, #53	@ 0x35
 80087b6:	a81c      	add	r0, sp, #112	@ 0x70
 80087b8:	f7ff ff36 	bl	8008628 <__copybits>
 80087bc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80087be:	9805      	ldr	r0, [sp, #20]
 80087c0:	f7ff fb10 	bl	8007de4 <_Bfree>
 80087c4:	3e01      	subs	r6, #1
 80087c6:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80087c8:	2e04      	cmp	r6, #4
 80087ca:	d806      	bhi.n	80087da <_strtod_l+0xe2>
 80087cc:	e8df f006 	tbb	[pc, r6]
 80087d0:	201d0314 	.word	0x201d0314
 80087d4:	14          	.byte	0x14
 80087d5:	00          	.byte	0x00
 80087d6:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 80087da:	05e1      	lsls	r1, r4, #23
 80087dc:	bf48      	it	mi
 80087de:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80087e2:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80087e6:	0d1b      	lsrs	r3, r3, #20
 80087e8:	051b      	lsls	r3, r3, #20
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d1bd      	bne.n	800876a <_strtod_l+0x72>
 80087ee:	f7fe fb29 	bl	8006e44 <__errno>
 80087f2:	2322      	movs	r3, #34	@ 0x22
 80087f4:	6003      	str	r3, [r0, #0]
 80087f6:	e7b8      	b.n	800876a <_strtod_l+0x72>
 80087f8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80087fc:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8008800:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8008804:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8008808:	e7e7      	b.n	80087da <_strtod_l+0xe2>
 800880a:	f8df b178 	ldr.w	fp, [pc, #376]	@ 8008984 <_strtod_l+0x28c>
 800880e:	e7e4      	b.n	80087da <_strtod_l+0xe2>
 8008810:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8008814:	f04f 3aff 	mov.w	sl, #4294967295
 8008818:	e7df      	b.n	80087da <_strtod_l+0xe2>
 800881a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800881c:	1c5a      	adds	r2, r3, #1
 800881e:	9219      	str	r2, [sp, #100]	@ 0x64
 8008820:	785b      	ldrb	r3, [r3, #1]
 8008822:	2b30      	cmp	r3, #48	@ 0x30
 8008824:	d0f9      	beq.n	800881a <_strtod_l+0x122>
 8008826:	2b00      	cmp	r3, #0
 8008828:	d09f      	beq.n	800876a <_strtod_l+0x72>
 800882a:	2301      	movs	r3, #1
 800882c:	9309      	str	r3, [sp, #36]	@ 0x24
 800882e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008830:	220a      	movs	r2, #10
 8008832:	930c      	str	r3, [sp, #48]	@ 0x30
 8008834:	2300      	movs	r3, #0
 8008836:	461f      	mov	r7, r3
 8008838:	9308      	str	r3, [sp, #32]
 800883a:	930a      	str	r3, [sp, #40]	@ 0x28
 800883c:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800883e:	7805      	ldrb	r5, [r0, #0]
 8008840:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8008844:	b2d9      	uxtb	r1, r3
 8008846:	2909      	cmp	r1, #9
 8008848:	d928      	bls.n	800889c <_strtod_l+0x1a4>
 800884a:	2201      	movs	r2, #1
 800884c:	494e      	ldr	r1, [pc, #312]	@ (8008988 <_strtod_l+0x290>)
 800884e:	f001 f99c 	bl	8009b8a <strncmp>
 8008852:	2800      	cmp	r0, #0
 8008854:	d032      	beq.n	80088bc <_strtod_l+0x1c4>
 8008856:	2000      	movs	r0, #0
 8008858:	462a      	mov	r2, r5
 800885a:	4681      	mov	r9, r0
 800885c:	463d      	mov	r5, r7
 800885e:	4603      	mov	r3, r0
 8008860:	2a65      	cmp	r2, #101	@ 0x65
 8008862:	d001      	beq.n	8008868 <_strtod_l+0x170>
 8008864:	2a45      	cmp	r2, #69	@ 0x45
 8008866:	d114      	bne.n	8008892 <_strtod_l+0x19a>
 8008868:	b91d      	cbnz	r5, 8008872 <_strtod_l+0x17a>
 800886a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800886c:	4302      	orrs	r2, r0
 800886e:	d095      	beq.n	800879c <_strtod_l+0xa4>
 8008870:	2500      	movs	r5, #0
 8008872:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8008874:	1c62      	adds	r2, r4, #1
 8008876:	9219      	str	r2, [sp, #100]	@ 0x64
 8008878:	7862      	ldrb	r2, [r4, #1]
 800887a:	2a2b      	cmp	r2, #43	@ 0x2b
 800887c:	d077      	beq.n	800896e <_strtod_l+0x276>
 800887e:	2a2d      	cmp	r2, #45	@ 0x2d
 8008880:	d07b      	beq.n	800897a <_strtod_l+0x282>
 8008882:	f04f 0c00 	mov.w	ip, #0
 8008886:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800888a:	2909      	cmp	r1, #9
 800888c:	f240 8082 	bls.w	8008994 <_strtod_l+0x29c>
 8008890:	9419      	str	r4, [sp, #100]	@ 0x64
 8008892:	f04f 0800 	mov.w	r8, #0
 8008896:	e0a2      	b.n	80089de <_strtod_l+0x2e6>
 8008898:	2300      	movs	r3, #0
 800889a:	e7c7      	b.n	800882c <_strtod_l+0x134>
 800889c:	2f08      	cmp	r7, #8
 800889e:	bfd5      	itete	le
 80088a0:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 80088a2:	9908      	ldrgt	r1, [sp, #32]
 80088a4:	fb02 3301 	mlale	r3, r2, r1, r3
 80088a8:	fb02 3301 	mlagt	r3, r2, r1, r3
 80088ac:	f100 0001 	add.w	r0, r0, #1
 80088b0:	bfd4      	ite	le
 80088b2:	930a      	strle	r3, [sp, #40]	@ 0x28
 80088b4:	9308      	strgt	r3, [sp, #32]
 80088b6:	3701      	adds	r7, #1
 80088b8:	9019      	str	r0, [sp, #100]	@ 0x64
 80088ba:	e7bf      	b.n	800883c <_strtod_l+0x144>
 80088bc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80088be:	1c5a      	adds	r2, r3, #1
 80088c0:	9219      	str	r2, [sp, #100]	@ 0x64
 80088c2:	785a      	ldrb	r2, [r3, #1]
 80088c4:	b37f      	cbz	r7, 8008926 <_strtod_l+0x22e>
 80088c6:	4681      	mov	r9, r0
 80088c8:	463d      	mov	r5, r7
 80088ca:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 80088ce:	2b09      	cmp	r3, #9
 80088d0:	d912      	bls.n	80088f8 <_strtod_l+0x200>
 80088d2:	2301      	movs	r3, #1
 80088d4:	e7c4      	b.n	8008860 <_strtod_l+0x168>
 80088d6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80088d8:	3001      	adds	r0, #1
 80088da:	1c5a      	adds	r2, r3, #1
 80088dc:	9219      	str	r2, [sp, #100]	@ 0x64
 80088de:	785a      	ldrb	r2, [r3, #1]
 80088e0:	2a30      	cmp	r2, #48	@ 0x30
 80088e2:	d0f8      	beq.n	80088d6 <_strtod_l+0x1de>
 80088e4:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80088e8:	2b08      	cmp	r3, #8
 80088ea:	f200 84cb 	bhi.w	8009284 <_strtod_l+0xb8c>
 80088ee:	4681      	mov	r9, r0
 80088f0:	2000      	movs	r0, #0
 80088f2:	4605      	mov	r5, r0
 80088f4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80088f6:	930c      	str	r3, [sp, #48]	@ 0x30
 80088f8:	3a30      	subs	r2, #48	@ 0x30
 80088fa:	f100 0301 	add.w	r3, r0, #1
 80088fe:	d02a      	beq.n	8008956 <_strtod_l+0x25e>
 8008900:	4499      	add	r9, r3
 8008902:	210a      	movs	r1, #10
 8008904:	462b      	mov	r3, r5
 8008906:	eb00 0c05 	add.w	ip, r0, r5
 800890a:	4563      	cmp	r3, ip
 800890c:	d10d      	bne.n	800892a <_strtod_l+0x232>
 800890e:	1c69      	adds	r1, r5, #1
 8008910:	4401      	add	r1, r0
 8008912:	4428      	add	r0, r5
 8008914:	2808      	cmp	r0, #8
 8008916:	dc16      	bgt.n	8008946 <_strtod_l+0x24e>
 8008918:	230a      	movs	r3, #10
 800891a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800891c:	fb03 2300 	mla	r3, r3, r0, r2
 8008920:	930a      	str	r3, [sp, #40]	@ 0x28
 8008922:	2300      	movs	r3, #0
 8008924:	e018      	b.n	8008958 <_strtod_l+0x260>
 8008926:	4638      	mov	r0, r7
 8008928:	e7da      	b.n	80088e0 <_strtod_l+0x1e8>
 800892a:	2b08      	cmp	r3, #8
 800892c:	f103 0301 	add.w	r3, r3, #1
 8008930:	dc03      	bgt.n	800893a <_strtod_l+0x242>
 8008932:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8008934:	434e      	muls	r6, r1
 8008936:	960a      	str	r6, [sp, #40]	@ 0x28
 8008938:	e7e7      	b.n	800890a <_strtod_l+0x212>
 800893a:	2b10      	cmp	r3, #16
 800893c:	bfde      	ittt	le
 800893e:	9e08      	ldrle	r6, [sp, #32]
 8008940:	434e      	mulle	r6, r1
 8008942:	9608      	strle	r6, [sp, #32]
 8008944:	e7e1      	b.n	800890a <_strtod_l+0x212>
 8008946:	280f      	cmp	r0, #15
 8008948:	dceb      	bgt.n	8008922 <_strtod_l+0x22a>
 800894a:	230a      	movs	r3, #10
 800894c:	9808      	ldr	r0, [sp, #32]
 800894e:	fb03 2300 	mla	r3, r3, r0, r2
 8008952:	9308      	str	r3, [sp, #32]
 8008954:	e7e5      	b.n	8008922 <_strtod_l+0x22a>
 8008956:	4629      	mov	r1, r5
 8008958:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800895a:	460d      	mov	r5, r1
 800895c:	1c50      	adds	r0, r2, #1
 800895e:	9019      	str	r0, [sp, #100]	@ 0x64
 8008960:	7852      	ldrb	r2, [r2, #1]
 8008962:	4618      	mov	r0, r3
 8008964:	e7b1      	b.n	80088ca <_strtod_l+0x1d2>
 8008966:	f04f 0900 	mov.w	r9, #0
 800896a:	2301      	movs	r3, #1
 800896c:	e77d      	b.n	800886a <_strtod_l+0x172>
 800896e:	f04f 0c00 	mov.w	ip, #0
 8008972:	1ca2      	adds	r2, r4, #2
 8008974:	9219      	str	r2, [sp, #100]	@ 0x64
 8008976:	78a2      	ldrb	r2, [r4, #2]
 8008978:	e785      	b.n	8008886 <_strtod_l+0x18e>
 800897a:	f04f 0c01 	mov.w	ip, #1
 800897e:	e7f8      	b.n	8008972 <_strtod_l+0x27a>
 8008980:	0800b008 	.word	0x0800b008
 8008984:	7ff00000 	.word	0x7ff00000
 8008988:	0800aff0 	.word	0x0800aff0
 800898c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800898e:	1c51      	adds	r1, r2, #1
 8008990:	9119      	str	r1, [sp, #100]	@ 0x64
 8008992:	7852      	ldrb	r2, [r2, #1]
 8008994:	2a30      	cmp	r2, #48	@ 0x30
 8008996:	d0f9      	beq.n	800898c <_strtod_l+0x294>
 8008998:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800899c:	2908      	cmp	r1, #8
 800899e:	f63f af78 	bhi.w	8008892 <_strtod_l+0x19a>
 80089a2:	f04f 080a 	mov.w	r8, #10
 80089a6:	3a30      	subs	r2, #48	@ 0x30
 80089a8:	920e      	str	r2, [sp, #56]	@ 0x38
 80089aa:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80089ac:	920f      	str	r2, [sp, #60]	@ 0x3c
 80089ae:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80089b0:	1c56      	adds	r6, r2, #1
 80089b2:	9619      	str	r6, [sp, #100]	@ 0x64
 80089b4:	7852      	ldrb	r2, [r2, #1]
 80089b6:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 80089ba:	f1be 0f09 	cmp.w	lr, #9
 80089be:	d939      	bls.n	8008a34 <_strtod_l+0x33c>
 80089c0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80089c2:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 80089c6:	1a76      	subs	r6, r6, r1
 80089c8:	2e08      	cmp	r6, #8
 80089ca:	dc03      	bgt.n	80089d4 <_strtod_l+0x2dc>
 80089cc:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80089ce:	4588      	cmp	r8, r1
 80089d0:	bfa8      	it	ge
 80089d2:	4688      	movge	r8, r1
 80089d4:	f1bc 0f00 	cmp.w	ip, #0
 80089d8:	d001      	beq.n	80089de <_strtod_l+0x2e6>
 80089da:	f1c8 0800 	rsb	r8, r8, #0
 80089de:	2d00      	cmp	r5, #0
 80089e0:	d14e      	bne.n	8008a80 <_strtod_l+0x388>
 80089e2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80089e4:	4308      	orrs	r0, r1
 80089e6:	f47f aec0 	bne.w	800876a <_strtod_l+0x72>
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	f47f aed6 	bne.w	800879c <_strtod_l+0xa4>
 80089f0:	2a69      	cmp	r2, #105	@ 0x69
 80089f2:	d028      	beq.n	8008a46 <_strtod_l+0x34e>
 80089f4:	dc25      	bgt.n	8008a42 <_strtod_l+0x34a>
 80089f6:	2a49      	cmp	r2, #73	@ 0x49
 80089f8:	d025      	beq.n	8008a46 <_strtod_l+0x34e>
 80089fa:	2a4e      	cmp	r2, #78	@ 0x4e
 80089fc:	f47f aece 	bne.w	800879c <_strtod_l+0xa4>
 8008a00:	499a      	ldr	r1, [pc, #616]	@ (8008c6c <_strtod_l+0x574>)
 8008a02:	a819      	add	r0, sp, #100	@ 0x64
 8008a04:	f001 fbd6 	bl	800a1b4 <__match>
 8008a08:	2800      	cmp	r0, #0
 8008a0a:	f43f aec7 	beq.w	800879c <_strtod_l+0xa4>
 8008a0e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008a10:	781b      	ldrb	r3, [r3, #0]
 8008a12:	2b28      	cmp	r3, #40	@ 0x28
 8008a14:	d12e      	bne.n	8008a74 <_strtod_l+0x37c>
 8008a16:	4996      	ldr	r1, [pc, #600]	@ (8008c70 <_strtod_l+0x578>)
 8008a18:	aa1c      	add	r2, sp, #112	@ 0x70
 8008a1a:	a819      	add	r0, sp, #100	@ 0x64
 8008a1c:	f001 fbde 	bl	800a1dc <__hexnan>
 8008a20:	2805      	cmp	r0, #5
 8008a22:	d127      	bne.n	8008a74 <_strtod_l+0x37c>
 8008a24:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8008a26:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8008a2a:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8008a2e:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8008a32:	e69a      	b.n	800876a <_strtod_l+0x72>
 8008a34:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8008a36:	fb08 2101 	mla	r1, r8, r1, r2
 8008a3a:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8008a3e:	920e      	str	r2, [sp, #56]	@ 0x38
 8008a40:	e7b5      	b.n	80089ae <_strtod_l+0x2b6>
 8008a42:	2a6e      	cmp	r2, #110	@ 0x6e
 8008a44:	e7da      	b.n	80089fc <_strtod_l+0x304>
 8008a46:	498b      	ldr	r1, [pc, #556]	@ (8008c74 <_strtod_l+0x57c>)
 8008a48:	a819      	add	r0, sp, #100	@ 0x64
 8008a4a:	f001 fbb3 	bl	800a1b4 <__match>
 8008a4e:	2800      	cmp	r0, #0
 8008a50:	f43f aea4 	beq.w	800879c <_strtod_l+0xa4>
 8008a54:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008a56:	4988      	ldr	r1, [pc, #544]	@ (8008c78 <_strtod_l+0x580>)
 8008a58:	3b01      	subs	r3, #1
 8008a5a:	a819      	add	r0, sp, #100	@ 0x64
 8008a5c:	9319      	str	r3, [sp, #100]	@ 0x64
 8008a5e:	f001 fba9 	bl	800a1b4 <__match>
 8008a62:	b910      	cbnz	r0, 8008a6a <_strtod_l+0x372>
 8008a64:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008a66:	3301      	adds	r3, #1
 8008a68:	9319      	str	r3, [sp, #100]	@ 0x64
 8008a6a:	f04f 0a00 	mov.w	sl, #0
 8008a6e:	f8df b20c 	ldr.w	fp, [pc, #524]	@ 8008c7c <_strtod_l+0x584>
 8008a72:	e67a      	b.n	800876a <_strtod_l+0x72>
 8008a74:	4882      	ldr	r0, [pc, #520]	@ (8008c80 <_strtod_l+0x588>)
 8008a76:	f001 f8db 	bl	8009c30 <nan>
 8008a7a:	4682      	mov	sl, r0
 8008a7c:	468b      	mov	fp, r1
 8008a7e:	e674      	b.n	800876a <_strtod_l+0x72>
 8008a80:	eba8 0309 	sub.w	r3, r8, r9
 8008a84:	2f00      	cmp	r7, #0
 8008a86:	bf08      	it	eq
 8008a88:	462f      	moveq	r7, r5
 8008a8a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008a8c:	2d10      	cmp	r5, #16
 8008a8e:	462c      	mov	r4, r5
 8008a90:	9309      	str	r3, [sp, #36]	@ 0x24
 8008a92:	bfa8      	it	ge
 8008a94:	2410      	movge	r4, #16
 8008a96:	f7f7 fca5 	bl	80003e4 <__aeabi_ui2d>
 8008a9a:	2d09      	cmp	r5, #9
 8008a9c:	4682      	mov	sl, r0
 8008a9e:	468b      	mov	fp, r1
 8008aa0:	dc11      	bgt.n	8008ac6 <_strtod_l+0x3ce>
 8008aa2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	f43f ae60 	beq.w	800876a <_strtod_l+0x72>
 8008aaa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008aac:	dd76      	ble.n	8008b9c <_strtod_l+0x4a4>
 8008aae:	2b16      	cmp	r3, #22
 8008ab0:	dc5d      	bgt.n	8008b6e <_strtod_l+0x476>
 8008ab2:	4974      	ldr	r1, [pc, #464]	@ (8008c84 <_strtod_l+0x58c>)
 8008ab4:	4652      	mov	r2, sl
 8008ab6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008aba:	465b      	mov	r3, fp
 8008abc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008ac0:	f7f7 fd0a 	bl	80004d8 <__aeabi_dmul>
 8008ac4:	e7d9      	b.n	8008a7a <_strtod_l+0x382>
 8008ac6:	4b6f      	ldr	r3, [pc, #444]	@ (8008c84 <_strtod_l+0x58c>)
 8008ac8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008acc:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8008ad0:	f7f7 fd02 	bl	80004d8 <__aeabi_dmul>
 8008ad4:	4682      	mov	sl, r0
 8008ad6:	9808      	ldr	r0, [sp, #32]
 8008ad8:	468b      	mov	fp, r1
 8008ada:	f7f7 fc83 	bl	80003e4 <__aeabi_ui2d>
 8008ade:	4602      	mov	r2, r0
 8008ae0:	460b      	mov	r3, r1
 8008ae2:	4650      	mov	r0, sl
 8008ae4:	4659      	mov	r1, fp
 8008ae6:	f7f7 fb41 	bl	800016c <__adddf3>
 8008aea:	2d0f      	cmp	r5, #15
 8008aec:	4682      	mov	sl, r0
 8008aee:	468b      	mov	fp, r1
 8008af0:	ddd7      	ble.n	8008aa2 <_strtod_l+0x3aa>
 8008af2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008af4:	1b2c      	subs	r4, r5, r4
 8008af6:	441c      	add	r4, r3
 8008af8:	2c00      	cmp	r4, #0
 8008afa:	f340 8096 	ble.w	8008c2a <_strtod_l+0x532>
 8008afe:	f014 030f 	ands.w	r3, r4, #15
 8008b02:	d00a      	beq.n	8008b1a <_strtod_l+0x422>
 8008b04:	495f      	ldr	r1, [pc, #380]	@ (8008c84 <_strtod_l+0x58c>)
 8008b06:	4652      	mov	r2, sl
 8008b08:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008b0c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008b10:	465b      	mov	r3, fp
 8008b12:	f7f7 fce1 	bl	80004d8 <__aeabi_dmul>
 8008b16:	4682      	mov	sl, r0
 8008b18:	468b      	mov	fp, r1
 8008b1a:	f034 040f 	bics.w	r4, r4, #15
 8008b1e:	d073      	beq.n	8008c08 <_strtod_l+0x510>
 8008b20:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8008b24:	dd48      	ble.n	8008bb8 <_strtod_l+0x4c0>
 8008b26:	2400      	movs	r4, #0
 8008b28:	46a0      	mov	r8, r4
 8008b2a:	46a1      	mov	r9, r4
 8008b2c:	940a      	str	r4, [sp, #40]	@ 0x28
 8008b2e:	2322      	movs	r3, #34	@ 0x22
 8008b30:	f04f 0a00 	mov.w	sl, #0
 8008b34:	9a05      	ldr	r2, [sp, #20]
 8008b36:	f8df b144 	ldr.w	fp, [pc, #324]	@ 8008c7c <_strtod_l+0x584>
 8008b3a:	6013      	str	r3, [r2, #0]
 8008b3c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	f43f ae13 	beq.w	800876a <_strtod_l+0x72>
 8008b44:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008b46:	9805      	ldr	r0, [sp, #20]
 8008b48:	f7ff f94c 	bl	8007de4 <_Bfree>
 8008b4c:	4649      	mov	r1, r9
 8008b4e:	9805      	ldr	r0, [sp, #20]
 8008b50:	f7ff f948 	bl	8007de4 <_Bfree>
 8008b54:	4641      	mov	r1, r8
 8008b56:	9805      	ldr	r0, [sp, #20]
 8008b58:	f7ff f944 	bl	8007de4 <_Bfree>
 8008b5c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008b5e:	9805      	ldr	r0, [sp, #20]
 8008b60:	f7ff f940 	bl	8007de4 <_Bfree>
 8008b64:	4621      	mov	r1, r4
 8008b66:	9805      	ldr	r0, [sp, #20]
 8008b68:	f7ff f93c 	bl	8007de4 <_Bfree>
 8008b6c:	e5fd      	b.n	800876a <_strtod_l+0x72>
 8008b6e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008b70:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8008b74:	4293      	cmp	r3, r2
 8008b76:	dbbc      	blt.n	8008af2 <_strtod_l+0x3fa>
 8008b78:	4c42      	ldr	r4, [pc, #264]	@ (8008c84 <_strtod_l+0x58c>)
 8008b7a:	f1c5 050f 	rsb	r5, r5, #15
 8008b7e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8008b82:	4652      	mov	r2, sl
 8008b84:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008b88:	465b      	mov	r3, fp
 8008b8a:	f7f7 fca5 	bl	80004d8 <__aeabi_dmul>
 8008b8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b90:	1b5d      	subs	r5, r3, r5
 8008b92:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8008b96:	e9d4 2300 	ldrd	r2, r3, [r4]
 8008b9a:	e791      	b.n	8008ac0 <_strtod_l+0x3c8>
 8008b9c:	3316      	adds	r3, #22
 8008b9e:	dba8      	blt.n	8008af2 <_strtod_l+0x3fa>
 8008ba0:	4b38      	ldr	r3, [pc, #224]	@ (8008c84 <_strtod_l+0x58c>)
 8008ba2:	eba9 0808 	sub.w	r8, r9, r8
 8008ba6:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8008baa:	4650      	mov	r0, sl
 8008bac:	e9d8 2300 	ldrd	r2, r3, [r8]
 8008bb0:	4659      	mov	r1, fp
 8008bb2:	f7f7 fdbb 	bl	800072c <__aeabi_ddiv>
 8008bb6:	e760      	b.n	8008a7a <_strtod_l+0x382>
 8008bb8:	4b33      	ldr	r3, [pc, #204]	@ (8008c88 <_strtod_l+0x590>)
 8008bba:	4650      	mov	r0, sl
 8008bbc:	9308      	str	r3, [sp, #32]
 8008bbe:	2300      	movs	r3, #0
 8008bc0:	4659      	mov	r1, fp
 8008bc2:	461e      	mov	r6, r3
 8008bc4:	1124      	asrs	r4, r4, #4
 8008bc6:	2c01      	cmp	r4, #1
 8008bc8:	dc21      	bgt.n	8008c0e <_strtod_l+0x516>
 8008bca:	b10b      	cbz	r3, 8008bd0 <_strtod_l+0x4d8>
 8008bcc:	4682      	mov	sl, r0
 8008bce:	468b      	mov	fp, r1
 8008bd0:	492d      	ldr	r1, [pc, #180]	@ (8008c88 <_strtod_l+0x590>)
 8008bd2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8008bd6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8008bda:	4652      	mov	r2, sl
 8008bdc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008be0:	465b      	mov	r3, fp
 8008be2:	f7f7 fc79 	bl	80004d8 <__aeabi_dmul>
 8008be6:	4b25      	ldr	r3, [pc, #148]	@ (8008c7c <_strtod_l+0x584>)
 8008be8:	460a      	mov	r2, r1
 8008bea:	400b      	ands	r3, r1
 8008bec:	4927      	ldr	r1, [pc, #156]	@ (8008c8c <_strtod_l+0x594>)
 8008bee:	4682      	mov	sl, r0
 8008bf0:	428b      	cmp	r3, r1
 8008bf2:	d898      	bhi.n	8008b26 <_strtod_l+0x42e>
 8008bf4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8008bf8:	428b      	cmp	r3, r1
 8008bfa:	bf86      	itte	hi
 8008bfc:	f04f 3aff 	movhi.w	sl, #4294967295
 8008c00:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 8008c90 <_strtod_l+0x598>
 8008c04:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8008c08:	2300      	movs	r3, #0
 8008c0a:	9308      	str	r3, [sp, #32]
 8008c0c:	e07a      	b.n	8008d04 <_strtod_l+0x60c>
 8008c0e:	07e2      	lsls	r2, r4, #31
 8008c10:	d505      	bpl.n	8008c1e <_strtod_l+0x526>
 8008c12:	9b08      	ldr	r3, [sp, #32]
 8008c14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c18:	f7f7 fc5e 	bl	80004d8 <__aeabi_dmul>
 8008c1c:	2301      	movs	r3, #1
 8008c1e:	9a08      	ldr	r2, [sp, #32]
 8008c20:	3601      	adds	r6, #1
 8008c22:	3208      	adds	r2, #8
 8008c24:	1064      	asrs	r4, r4, #1
 8008c26:	9208      	str	r2, [sp, #32]
 8008c28:	e7cd      	b.n	8008bc6 <_strtod_l+0x4ce>
 8008c2a:	d0ed      	beq.n	8008c08 <_strtod_l+0x510>
 8008c2c:	4264      	negs	r4, r4
 8008c2e:	f014 020f 	ands.w	r2, r4, #15
 8008c32:	d00a      	beq.n	8008c4a <_strtod_l+0x552>
 8008c34:	4b13      	ldr	r3, [pc, #76]	@ (8008c84 <_strtod_l+0x58c>)
 8008c36:	4650      	mov	r0, sl
 8008c38:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008c3c:	4659      	mov	r1, fp
 8008c3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c42:	f7f7 fd73 	bl	800072c <__aeabi_ddiv>
 8008c46:	4682      	mov	sl, r0
 8008c48:	468b      	mov	fp, r1
 8008c4a:	1124      	asrs	r4, r4, #4
 8008c4c:	d0dc      	beq.n	8008c08 <_strtod_l+0x510>
 8008c4e:	2c1f      	cmp	r4, #31
 8008c50:	dd20      	ble.n	8008c94 <_strtod_l+0x59c>
 8008c52:	2400      	movs	r4, #0
 8008c54:	46a0      	mov	r8, r4
 8008c56:	46a1      	mov	r9, r4
 8008c58:	940a      	str	r4, [sp, #40]	@ 0x28
 8008c5a:	2322      	movs	r3, #34	@ 0x22
 8008c5c:	9a05      	ldr	r2, [sp, #20]
 8008c5e:	f04f 0a00 	mov.w	sl, #0
 8008c62:	f04f 0b00 	mov.w	fp, #0
 8008c66:	6013      	str	r3, [r2, #0]
 8008c68:	e768      	b.n	8008b3c <_strtod_l+0x444>
 8008c6a:	bf00      	nop
 8008c6c:	0800addb 	.word	0x0800addb
 8008c70:	0800aff4 	.word	0x0800aff4
 8008c74:	0800add3 	.word	0x0800add3
 8008c78:	0800ae0a 	.word	0x0800ae0a
 8008c7c:	7ff00000 	.word	0x7ff00000
 8008c80:	0800b19d 	.word	0x0800b19d
 8008c84:	0800af28 	.word	0x0800af28
 8008c88:	0800af00 	.word	0x0800af00
 8008c8c:	7ca00000 	.word	0x7ca00000
 8008c90:	7fefffff 	.word	0x7fefffff
 8008c94:	f014 0310 	ands.w	r3, r4, #16
 8008c98:	bf18      	it	ne
 8008c9a:	236a      	movne	r3, #106	@ 0x6a
 8008c9c:	4650      	mov	r0, sl
 8008c9e:	9308      	str	r3, [sp, #32]
 8008ca0:	4659      	mov	r1, fp
 8008ca2:	2300      	movs	r3, #0
 8008ca4:	4ea9      	ldr	r6, [pc, #676]	@ (8008f4c <_strtod_l+0x854>)
 8008ca6:	07e2      	lsls	r2, r4, #31
 8008ca8:	d504      	bpl.n	8008cb4 <_strtod_l+0x5bc>
 8008caa:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008cae:	f7f7 fc13 	bl	80004d8 <__aeabi_dmul>
 8008cb2:	2301      	movs	r3, #1
 8008cb4:	1064      	asrs	r4, r4, #1
 8008cb6:	f106 0608 	add.w	r6, r6, #8
 8008cba:	d1f4      	bne.n	8008ca6 <_strtod_l+0x5ae>
 8008cbc:	b10b      	cbz	r3, 8008cc2 <_strtod_l+0x5ca>
 8008cbe:	4682      	mov	sl, r0
 8008cc0:	468b      	mov	fp, r1
 8008cc2:	9b08      	ldr	r3, [sp, #32]
 8008cc4:	b1b3      	cbz	r3, 8008cf4 <_strtod_l+0x5fc>
 8008cc6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8008cca:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	4659      	mov	r1, fp
 8008cd2:	dd0f      	ble.n	8008cf4 <_strtod_l+0x5fc>
 8008cd4:	2b1f      	cmp	r3, #31
 8008cd6:	dd57      	ble.n	8008d88 <_strtod_l+0x690>
 8008cd8:	2b34      	cmp	r3, #52	@ 0x34
 8008cda:	bfd8      	it	le
 8008cdc:	f04f 33ff 	movle.w	r3, #4294967295
 8008ce0:	f04f 0a00 	mov.w	sl, #0
 8008ce4:	bfcf      	iteee	gt
 8008ce6:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8008cea:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8008cee:	4093      	lslle	r3, r2
 8008cf0:	ea03 0b01 	andle.w	fp, r3, r1
 8008cf4:	2200      	movs	r2, #0
 8008cf6:	2300      	movs	r3, #0
 8008cf8:	4650      	mov	r0, sl
 8008cfa:	4659      	mov	r1, fp
 8008cfc:	f7f7 fe54 	bl	80009a8 <__aeabi_dcmpeq>
 8008d00:	2800      	cmp	r0, #0
 8008d02:	d1a6      	bne.n	8008c52 <_strtod_l+0x55a>
 8008d04:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008d06:	463a      	mov	r2, r7
 8008d08:	9300      	str	r3, [sp, #0]
 8008d0a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8008d0c:	462b      	mov	r3, r5
 8008d0e:	9805      	ldr	r0, [sp, #20]
 8008d10:	f7ff f8d0 	bl	8007eb4 <__s2b>
 8008d14:	900a      	str	r0, [sp, #40]	@ 0x28
 8008d16:	2800      	cmp	r0, #0
 8008d18:	f43f af05 	beq.w	8008b26 <_strtod_l+0x42e>
 8008d1c:	2400      	movs	r4, #0
 8008d1e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008d20:	eba9 0308 	sub.w	r3, r9, r8
 8008d24:	2a00      	cmp	r2, #0
 8008d26:	bfa8      	it	ge
 8008d28:	2300      	movge	r3, #0
 8008d2a:	46a0      	mov	r8, r4
 8008d2c:	9312      	str	r3, [sp, #72]	@ 0x48
 8008d2e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8008d32:	9316      	str	r3, [sp, #88]	@ 0x58
 8008d34:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008d36:	9805      	ldr	r0, [sp, #20]
 8008d38:	6859      	ldr	r1, [r3, #4]
 8008d3a:	f7ff f813 	bl	8007d64 <_Balloc>
 8008d3e:	4681      	mov	r9, r0
 8008d40:	2800      	cmp	r0, #0
 8008d42:	f43f aef4 	beq.w	8008b2e <_strtod_l+0x436>
 8008d46:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008d48:	300c      	adds	r0, #12
 8008d4a:	691a      	ldr	r2, [r3, #16]
 8008d4c:	f103 010c 	add.w	r1, r3, #12
 8008d50:	3202      	adds	r2, #2
 8008d52:	0092      	lsls	r2, r2, #2
 8008d54:	f000 ff5e 	bl	8009c14 <memcpy>
 8008d58:	ab1c      	add	r3, sp, #112	@ 0x70
 8008d5a:	9301      	str	r3, [sp, #4]
 8008d5c:	ab1b      	add	r3, sp, #108	@ 0x6c
 8008d5e:	9300      	str	r3, [sp, #0]
 8008d60:	4652      	mov	r2, sl
 8008d62:	465b      	mov	r3, fp
 8008d64:	9805      	ldr	r0, [sp, #20]
 8008d66:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8008d6a:	f7ff fbd5 	bl	8008518 <__d2b>
 8008d6e:	901a      	str	r0, [sp, #104]	@ 0x68
 8008d70:	2800      	cmp	r0, #0
 8008d72:	f43f aedc 	beq.w	8008b2e <_strtod_l+0x436>
 8008d76:	2101      	movs	r1, #1
 8008d78:	9805      	ldr	r0, [sp, #20]
 8008d7a:	f7ff f931 	bl	8007fe0 <__i2b>
 8008d7e:	4680      	mov	r8, r0
 8008d80:	b948      	cbnz	r0, 8008d96 <_strtod_l+0x69e>
 8008d82:	f04f 0800 	mov.w	r8, #0
 8008d86:	e6d2      	b.n	8008b2e <_strtod_l+0x436>
 8008d88:	f04f 32ff 	mov.w	r2, #4294967295
 8008d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8008d90:	ea03 0a0a 	and.w	sl, r3, sl
 8008d94:	e7ae      	b.n	8008cf4 <_strtod_l+0x5fc>
 8008d96:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8008d98:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8008d9a:	2d00      	cmp	r5, #0
 8008d9c:	bfab      	itete	ge
 8008d9e:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8008da0:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8008da2:	18ef      	addge	r7, r5, r3
 8008da4:	1b5e      	sublt	r6, r3, r5
 8008da6:	9b08      	ldr	r3, [sp, #32]
 8008da8:	bfa8      	it	ge
 8008daa:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8008dac:	eba5 0503 	sub.w	r5, r5, r3
 8008db0:	4415      	add	r5, r2
 8008db2:	4b67      	ldr	r3, [pc, #412]	@ (8008f50 <_strtod_l+0x858>)
 8008db4:	f105 35ff 	add.w	r5, r5, #4294967295
 8008db8:	bfb8      	it	lt
 8008dba:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8008dbc:	429d      	cmp	r5, r3
 8008dbe:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8008dc2:	da50      	bge.n	8008e66 <_strtod_l+0x76e>
 8008dc4:	1b5b      	subs	r3, r3, r5
 8008dc6:	2b1f      	cmp	r3, #31
 8008dc8:	f04f 0101 	mov.w	r1, #1
 8008dcc:	eba2 0203 	sub.w	r2, r2, r3
 8008dd0:	dc3d      	bgt.n	8008e4e <_strtod_l+0x756>
 8008dd2:	fa01 f303 	lsl.w	r3, r1, r3
 8008dd6:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008dd8:	2300      	movs	r3, #0
 8008dda:	9310      	str	r3, [sp, #64]	@ 0x40
 8008ddc:	18bd      	adds	r5, r7, r2
 8008dde:	9b08      	ldr	r3, [sp, #32]
 8008de0:	42af      	cmp	r7, r5
 8008de2:	4416      	add	r6, r2
 8008de4:	441e      	add	r6, r3
 8008de6:	463b      	mov	r3, r7
 8008de8:	bfa8      	it	ge
 8008dea:	462b      	movge	r3, r5
 8008dec:	42b3      	cmp	r3, r6
 8008dee:	bfa8      	it	ge
 8008df0:	4633      	movge	r3, r6
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	bfc2      	ittt	gt
 8008df6:	1aed      	subgt	r5, r5, r3
 8008df8:	1af6      	subgt	r6, r6, r3
 8008dfa:	1aff      	subgt	r7, r7, r3
 8008dfc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	dd16      	ble.n	8008e30 <_strtod_l+0x738>
 8008e02:	4641      	mov	r1, r8
 8008e04:	461a      	mov	r2, r3
 8008e06:	9805      	ldr	r0, [sp, #20]
 8008e08:	f7ff f9a8 	bl	800815c <__pow5mult>
 8008e0c:	4680      	mov	r8, r0
 8008e0e:	2800      	cmp	r0, #0
 8008e10:	d0b7      	beq.n	8008d82 <_strtod_l+0x68a>
 8008e12:	4601      	mov	r1, r0
 8008e14:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8008e16:	9805      	ldr	r0, [sp, #20]
 8008e18:	f7ff f8f8 	bl	800800c <__multiply>
 8008e1c:	900e      	str	r0, [sp, #56]	@ 0x38
 8008e1e:	2800      	cmp	r0, #0
 8008e20:	f43f ae85 	beq.w	8008b2e <_strtod_l+0x436>
 8008e24:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008e26:	9805      	ldr	r0, [sp, #20]
 8008e28:	f7fe ffdc 	bl	8007de4 <_Bfree>
 8008e2c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008e2e:	931a      	str	r3, [sp, #104]	@ 0x68
 8008e30:	2d00      	cmp	r5, #0
 8008e32:	dc1d      	bgt.n	8008e70 <_strtod_l+0x778>
 8008e34:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	dd23      	ble.n	8008e82 <_strtod_l+0x78a>
 8008e3a:	4649      	mov	r1, r9
 8008e3c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8008e3e:	9805      	ldr	r0, [sp, #20]
 8008e40:	f7ff f98c 	bl	800815c <__pow5mult>
 8008e44:	4681      	mov	r9, r0
 8008e46:	b9e0      	cbnz	r0, 8008e82 <_strtod_l+0x78a>
 8008e48:	f04f 0900 	mov.w	r9, #0
 8008e4c:	e66f      	b.n	8008b2e <_strtod_l+0x436>
 8008e4e:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8008e52:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8008e56:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8008e5a:	35e2      	adds	r5, #226	@ 0xe2
 8008e5c:	fa01 f305 	lsl.w	r3, r1, r5
 8008e60:	9310      	str	r3, [sp, #64]	@ 0x40
 8008e62:	9113      	str	r1, [sp, #76]	@ 0x4c
 8008e64:	e7ba      	b.n	8008ddc <_strtod_l+0x6e4>
 8008e66:	2300      	movs	r3, #0
 8008e68:	9310      	str	r3, [sp, #64]	@ 0x40
 8008e6a:	2301      	movs	r3, #1
 8008e6c:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008e6e:	e7b5      	b.n	8008ddc <_strtod_l+0x6e4>
 8008e70:	462a      	mov	r2, r5
 8008e72:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008e74:	9805      	ldr	r0, [sp, #20]
 8008e76:	f7ff f9cb 	bl	8008210 <__lshift>
 8008e7a:	901a      	str	r0, [sp, #104]	@ 0x68
 8008e7c:	2800      	cmp	r0, #0
 8008e7e:	d1d9      	bne.n	8008e34 <_strtod_l+0x73c>
 8008e80:	e655      	b.n	8008b2e <_strtod_l+0x436>
 8008e82:	2e00      	cmp	r6, #0
 8008e84:	dd07      	ble.n	8008e96 <_strtod_l+0x79e>
 8008e86:	4649      	mov	r1, r9
 8008e88:	4632      	mov	r2, r6
 8008e8a:	9805      	ldr	r0, [sp, #20]
 8008e8c:	f7ff f9c0 	bl	8008210 <__lshift>
 8008e90:	4681      	mov	r9, r0
 8008e92:	2800      	cmp	r0, #0
 8008e94:	d0d8      	beq.n	8008e48 <_strtod_l+0x750>
 8008e96:	2f00      	cmp	r7, #0
 8008e98:	dd08      	ble.n	8008eac <_strtod_l+0x7b4>
 8008e9a:	4641      	mov	r1, r8
 8008e9c:	463a      	mov	r2, r7
 8008e9e:	9805      	ldr	r0, [sp, #20]
 8008ea0:	f7ff f9b6 	bl	8008210 <__lshift>
 8008ea4:	4680      	mov	r8, r0
 8008ea6:	2800      	cmp	r0, #0
 8008ea8:	f43f ae41 	beq.w	8008b2e <_strtod_l+0x436>
 8008eac:	464a      	mov	r2, r9
 8008eae:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008eb0:	9805      	ldr	r0, [sp, #20]
 8008eb2:	f7ff fa35 	bl	8008320 <__mdiff>
 8008eb6:	4604      	mov	r4, r0
 8008eb8:	2800      	cmp	r0, #0
 8008eba:	f43f ae38 	beq.w	8008b2e <_strtod_l+0x436>
 8008ebe:	68c3      	ldr	r3, [r0, #12]
 8008ec0:	4641      	mov	r1, r8
 8008ec2:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008ec4:	2300      	movs	r3, #0
 8008ec6:	60c3      	str	r3, [r0, #12]
 8008ec8:	f7ff fa0e 	bl	80082e8 <__mcmp>
 8008ecc:	2800      	cmp	r0, #0
 8008ece:	da45      	bge.n	8008f5c <_strtod_l+0x864>
 8008ed0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008ed2:	ea53 030a 	orrs.w	r3, r3, sl
 8008ed6:	d16b      	bne.n	8008fb0 <_strtod_l+0x8b8>
 8008ed8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d167      	bne.n	8008fb0 <_strtod_l+0x8b8>
 8008ee0:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008ee4:	0d1b      	lsrs	r3, r3, #20
 8008ee6:	051b      	lsls	r3, r3, #20
 8008ee8:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8008eec:	d960      	bls.n	8008fb0 <_strtod_l+0x8b8>
 8008eee:	6963      	ldr	r3, [r4, #20]
 8008ef0:	b913      	cbnz	r3, 8008ef8 <_strtod_l+0x800>
 8008ef2:	6923      	ldr	r3, [r4, #16]
 8008ef4:	2b01      	cmp	r3, #1
 8008ef6:	dd5b      	ble.n	8008fb0 <_strtod_l+0x8b8>
 8008ef8:	4621      	mov	r1, r4
 8008efa:	2201      	movs	r2, #1
 8008efc:	9805      	ldr	r0, [sp, #20]
 8008efe:	f7ff f987 	bl	8008210 <__lshift>
 8008f02:	4641      	mov	r1, r8
 8008f04:	4604      	mov	r4, r0
 8008f06:	f7ff f9ef 	bl	80082e8 <__mcmp>
 8008f0a:	2800      	cmp	r0, #0
 8008f0c:	dd50      	ble.n	8008fb0 <_strtod_l+0x8b8>
 8008f0e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008f12:	9a08      	ldr	r2, [sp, #32]
 8008f14:	0d1b      	lsrs	r3, r3, #20
 8008f16:	051b      	lsls	r3, r3, #20
 8008f18:	2a00      	cmp	r2, #0
 8008f1a:	d06a      	beq.n	8008ff2 <_strtod_l+0x8fa>
 8008f1c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8008f20:	d867      	bhi.n	8008ff2 <_strtod_l+0x8fa>
 8008f22:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8008f26:	f67f ae98 	bls.w	8008c5a <_strtod_l+0x562>
 8008f2a:	4650      	mov	r0, sl
 8008f2c:	4659      	mov	r1, fp
 8008f2e:	4b09      	ldr	r3, [pc, #36]	@ (8008f54 <_strtod_l+0x85c>)
 8008f30:	2200      	movs	r2, #0
 8008f32:	f7f7 fad1 	bl	80004d8 <__aeabi_dmul>
 8008f36:	4b08      	ldr	r3, [pc, #32]	@ (8008f58 <_strtod_l+0x860>)
 8008f38:	4682      	mov	sl, r0
 8008f3a:	400b      	ands	r3, r1
 8008f3c:	468b      	mov	fp, r1
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	f47f ae00 	bne.w	8008b44 <_strtod_l+0x44c>
 8008f44:	2322      	movs	r3, #34	@ 0x22
 8008f46:	9a05      	ldr	r2, [sp, #20]
 8008f48:	6013      	str	r3, [r2, #0]
 8008f4a:	e5fb      	b.n	8008b44 <_strtod_l+0x44c>
 8008f4c:	0800b020 	.word	0x0800b020
 8008f50:	fffffc02 	.word	0xfffffc02
 8008f54:	39500000 	.word	0x39500000
 8008f58:	7ff00000 	.word	0x7ff00000
 8008f5c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8008f60:	d165      	bne.n	800902e <_strtod_l+0x936>
 8008f62:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8008f64:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008f68:	b35a      	cbz	r2, 8008fc2 <_strtod_l+0x8ca>
 8008f6a:	4a99      	ldr	r2, [pc, #612]	@ (80091d0 <_strtod_l+0xad8>)
 8008f6c:	4293      	cmp	r3, r2
 8008f6e:	d12b      	bne.n	8008fc8 <_strtod_l+0x8d0>
 8008f70:	9b08      	ldr	r3, [sp, #32]
 8008f72:	4651      	mov	r1, sl
 8008f74:	b303      	cbz	r3, 8008fb8 <_strtod_l+0x8c0>
 8008f76:	465a      	mov	r2, fp
 8008f78:	4b96      	ldr	r3, [pc, #600]	@ (80091d4 <_strtod_l+0xadc>)
 8008f7a:	4013      	ands	r3, r2
 8008f7c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8008f80:	f04f 32ff 	mov.w	r2, #4294967295
 8008f84:	d81b      	bhi.n	8008fbe <_strtod_l+0x8c6>
 8008f86:	0d1b      	lsrs	r3, r3, #20
 8008f88:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8008f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8008f90:	4299      	cmp	r1, r3
 8008f92:	d119      	bne.n	8008fc8 <_strtod_l+0x8d0>
 8008f94:	4b90      	ldr	r3, [pc, #576]	@ (80091d8 <_strtod_l+0xae0>)
 8008f96:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008f98:	429a      	cmp	r2, r3
 8008f9a:	d102      	bne.n	8008fa2 <_strtod_l+0x8aa>
 8008f9c:	3101      	adds	r1, #1
 8008f9e:	f43f adc6 	beq.w	8008b2e <_strtod_l+0x436>
 8008fa2:	f04f 0a00 	mov.w	sl, #0
 8008fa6:	4b8b      	ldr	r3, [pc, #556]	@ (80091d4 <_strtod_l+0xadc>)
 8008fa8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008faa:	401a      	ands	r2, r3
 8008fac:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8008fb0:	9b08      	ldr	r3, [sp, #32]
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d1b9      	bne.n	8008f2a <_strtod_l+0x832>
 8008fb6:	e5c5      	b.n	8008b44 <_strtod_l+0x44c>
 8008fb8:	f04f 33ff 	mov.w	r3, #4294967295
 8008fbc:	e7e8      	b.n	8008f90 <_strtod_l+0x898>
 8008fbe:	4613      	mov	r3, r2
 8008fc0:	e7e6      	b.n	8008f90 <_strtod_l+0x898>
 8008fc2:	ea53 030a 	orrs.w	r3, r3, sl
 8008fc6:	d0a2      	beq.n	8008f0e <_strtod_l+0x816>
 8008fc8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008fca:	b1db      	cbz	r3, 8009004 <_strtod_l+0x90c>
 8008fcc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008fce:	4213      	tst	r3, r2
 8008fd0:	d0ee      	beq.n	8008fb0 <_strtod_l+0x8b8>
 8008fd2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008fd4:	4650      	mov	r0, sl
 8008fd6:	4659      	mov	r1, fp
 8008fd8:	9a08      	ldr	r2, [sp, #32]
 8008fda:	b1bb      	cbz	r3, 800900c <_strtod_l+0x914>
 8008fdc:	f7ff fb68 	bl	80086b0 <sulp>
 8008fe0:	4602      	mov	r2, r0
 8008fe2:	460b      	mov	r3, r1
 8008fe4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008fe8:	f7f7 f8c0 	bl	800016c <__adddf3>
 8008fec:	4682      	mov	sl, r0
 8008fee:	468b      	mov	fp, r1
 8008ff0:	e7de      	b.n	8008fb0 <_strtod_l+0x8b8>
 8008ff2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8008ff6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8008ffa:	f04f 3aff 	mov.w	sl, #4294967295
 8008ffe:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8009002:	e7d5      	b.n	8008fb0 <_strtod_l+0x8b8>
 8009004:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009006:	ea13 0f0a 	tst.w	r3, sl
 800900a:	e7e1      	b.n	8008fd0 <_strtod_l+0x8d8>
 800900c:	f7ff fb50 	bl	80086b0 <sulp>
 8009010:	4602      	mov	r2, r0
 8009012:	460b      	mov	r3, r1
 8009014:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009018:	f7f7 f8a6 	bl	8000168 <__aeabi_dsub>
 800901c:	2200      	movs	r2, #0
 800901e:	2300      	movs	r3, #0
 8009020:	4682      	mov	sl, r0
 8009022:	468b      	mov	fp, r1
 8009024:	f7f7 fcc0 	bl	80009a8 <__aeabi_dcmpeq>
 8009028:	2800      	cmp	r0, #0
 800902a:	d0c1      	beq.n	8008fb0 <_strtod_l+0x8b8>
 800902c:	e615      	b.n	8008c5a <_strtod_l+0x562>
 800902e:	4641      	mov	r1, r8
 8009030:	4620      	mov	r0, r4
 8009032:	f7ff fac9 	bl	80085c8 <__ratio>
 8009036:	2200      	movs	r2, #0
 8009038:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800903c:	4606      	mov	r6, r0
 800903e:	460f      	mov	r7, r1
 8009040:	f7f7 fcc6 	bl	80009d0 <__aeabi_dcmple>
 8009044:	2800      	cmp	r0, #0
 8009046:	d06d      	beq.n	8009124 <_strtod_l+0xa2c>
 8009048:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800904a:	2b00      	cmp	r3, #0
 800904c:	d178      	bne.n	8009140 <_strtod_l+0xa48>
 800904e:	f1ba 0f00 	cmp.w	sl, #0
 8009052:	d156      	bne.n	8009102 <_strtod_l+0xa0a>
 8009054:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009056:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800905a:	2b00      	cmp	r3, #0
 800905c:	d158      	bne.n	8009110 <_strtod_l+0xa18>
 800905e:	2200      	movs	r2, #0
 8009060:	4630      	mov	r0, r6
 8009062:	4639      	mov	r1, r7
 8009064:	4b5d      	ldr	r3, [pc, #372]	@ (80091dc <_strtod_l+0xae4>)
 8009066:	f7f7 fca9 	bl	80009bc <__aeabi_dcmplt>
 800906a:	2800      	cmp	r0, #0
 800906c:	d157      	bne.n	800911e <_strtod_l+0xa26>
 800906e:	4630      	mov	r0, r6
 8009070:	4639      	mov	r1, r7
 8009072:	2200      	movs	r2, #0
 8009074:	4b5a      	ldr	r3, [pc, #360]	@ (80091e0 <_strtod_l+0xae8>)
 8009076:	f7f7 fa2f 	bl	80004d8 <__aeabi_dmul>
 800907a:	4606      	mov	r6, r0
 800907c:	460f      	mov	r7, r1
 800907e:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8009082:	9606      	str	r6, [sp, #24]
 8009084:	9307      	str	r3, [sp, #28]
 8009086:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800908a:	4d52      	ldr	r5, [pc, #328]	@ (80091d4 <_strtod_l+0xadc>)
 800908c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009090:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009092:	401d      	ands	r5, r3
 8009094:	4b53      	ldr	r3, [pc, #332]	@ (80091e4 <_strtod_l+0xaec>)
 8009096:	429d      	cmp	r5, r3
 8009098:	f040 80aa 	bne.w	80091f0 <_strtod_l+0xaf8>
 800909c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800909e:	4650      	mov	r0, sl
 80090a0:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 80090a4:	4659      	mov	r1, fp
 80090a6:	f7ff f9cf 	bl	8008448 <__ulp>
 80090aa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80090ae:	f7f7 fa13 	bl	80004d8 <__aeabi_dmul>
 80090b2:	4652      	mov	r2, sl
 80090b4:	465b      	mov	r3, fp
 80090b6:	f7f7 f859 	bl	800016c <__adddf3>
 80090ba:	460b      	mov	r3, r1
 80090bc:	4945      	ldr	r1, [pc, #276]	@ (80091d4 <_strtod_l+0xadc>)
 80090be:	4a4a      	ldr	r2, [pc, #296]	@ (80091e8 <_strtod_l+0xaf0>)
 80090c0:	4019      	ands	r1, r3
 80090c2:	4291      	cmp	r1, r2
 80090c4:	4682      	mov	sl, r0
 80090c6:	d942      	bls.n	800914e <_strtod_l+0xa56>
 80090c8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80090ca:	4b43      	ldr	r3, [pc, #268]	@ (80091d8 <_strtod_l+0xae0>)
 80090cc:	429a      	cmp	r2, r3
 80090ce:	d103      	bne.n	80090d8 <_strtod_l+0x9e0>
 80090d0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80090d2:	3301      	adds	r3, #1
 80090d4:	f43f ad2b 	beq.w	8008b2e <_strtod_l+0x436>
 80090d8:	f04f 3aff 	mov.w	sl, #4294967295
 80090dc:	f8df b0f8 	ldr.w	fp, [pc, #248]	@ 80091d8 <_strtod_l+0xae0>
 80090e0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80090e2:	9805      	ldr	r0, [sp, #20]
 80090e4:	f7fe fe7e 	bl	8007de4 <_Bfree>
 80090e8:	4649      	mov	r1, r9
 80090ea:	9805      	ldr	r0, [sp, #20]
 80090ec:	f7fe fe7a 	bl	8007de4 <_Bfree>
 80090f0:	4641      	mov	r1, r8
 80090f2:	9805      	ldr	r0, [sp, #20]
 80090f4:	f7fe fe76 	bl	8007de4 <_Bfree>
 80090f8:	4621      	mov	r1, r4
 80090fa:	9805      	ldr	r0, [sp, #20]
 80090fc:	f7fe fe72 	bl	8007de4 <_Bfree>
 8009100:	e618      	b.n	8008d34 <_strtod_l+0x63c>
 8009102:	f1ba 0f01 	cmp.w	sl, #1
 8009106:	d103      	bne.n	8009110 <_strtod_l+0xa18>
 8009108:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800910a:	2b00      	cmp	r3, #0
 800910c:	f43f ada5 	beq.w	8008c5a <_strtod_l+0x562>
 8009110:	2200      	movs	r2, #0
 8009112:	4b36      	ldr	r3, [pc, #216]	@ (80091ec <_strtod_l+0xaf4>)
 8009114:	2600      	movs	r6, #0
 8009116:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800911a:	4f30      	ldr	r7, [pc, #192]	@ (80091dc <_strtod_l+0xae4>)
 800911c:	e7b3      	b.n	8009086 <_strtod_l+0x98e>
 800911e:	2600      	movs	r6, #0
 8009120:	4f2f      	ldr	r7, [pc, #188]	@ (80091e0 <_strtod_l+0xae8>)
 8009122:	e7ac      	b.n	800907e <_strtod_l+0x986>
 8009124:	4630      	mov	r0, r6
 8009126:	4639      	mov	r1, r7
 8009128:	4b2d      	ldr	r3, [pc, #180]	@ (80091e0 <_strtod_l+0xae8>)
 800912a:	2200      	movs	r2, #0
 800912c:	f7f7 f9d4 	bl	80004d8 <__aeabi_dmul>
 8009130:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009132:	4606      	mov	r6, r0
 8009134:	460f      	mov	r7, r1
 8009136:	2b00      	cmp	r3, #0
 8009138:	d0a1      	beq.n	800907e <_strtod_l+0x986>
 800913a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800913e:	e7a2      	b.n	8009086 <_strtod_l+0x98e>
 8009140:	2200      	movs	r2, #0
 8009142:	4b26      	ldr	r3, [pc, #152]	@ (80091dc <_strtod_l+0xae4>)
 8009144:	4616      	mov	r6, r2
 8009146:	461f      	mov	r7, r3
 8009148:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800914c:	e79b      	b.n	8009086 <_strtod_l+0x98e>
 800914e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8009152:	9b08      	ldr	r3, [sp, #32]
 8009154:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8009158:	2b00      	cmp	r3, #0
 800915a:	d1c1      	bne.n	80090e0 <_strtod_l+0x9e8>
 800915c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009160:	0d1b      	lsrs	r3, r3, #20
 8009162:	051b      	lsls	r3, r3, #20
 8009164:	429d      	cmp	r5, r3
 8009166:	d1bb      	bne.n	80090e0 <_strtod_l+0x9e8>
 8009168:	4630      	mov	r0, r6
 800916a:	4639      	mov	r1, r7
 800916c:	f7f7 fcfc 	bl	8000b68 <__aeabi_d2lz>
 8009170:	f7f7 f984 	bl	800047c <__aeabi_l2d>
 8009174:	4602      	mov	r2, r0
 8009176:	460b      	mov	r3, r1
 8009178:	4630      	mov	r0, r6
 800917a:	4639      	mov	r1, r7
 800917c:	f7f6 fff4 	bl	8000168 <__aeabi_dsub>
 8009180:	460b      	mov	r3, r1
 8009182:	4602      	mov	r2, r0
 8009184:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8009188:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800918c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800918e:	ea46 060a 	orr.w	r6, r6, sl
 8009192:	431e      	orrs	r6, r3
 8009194:	d069      	beq.n	800926a <_strtod_l+0xb72>
 8009196:	a30a      	add	r3, pc, #40	@ (adr r3, 80091c0 <_strtod_l+0xac8>)
 8009198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800919c:	f7f7 fc0e 	bl	80009bc <__aeabi_dcmplt>
 80091a0:	2800      	cmp	r0, #0
 80091a2:	f47f accf 	bne.w	8008b44 <_strtod_l+0x44c>
 80091a6:	a308      	add	r3, pc, #32	@ (adr r3, 80091c8 <_strtod_l+0xad0>)
 80091a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091ac:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80091b0:	f7f7 fc22 	bl	80009f8 <__aeabi_dcmpgt>
 80091b4:	2800      	cmp	r0, #0
 80091b6:	d093      	beq.n	80090e0 <_strtod_l+0x9e8>
 80091b8:	e4c4      	b.n	8008b44 <_strtod_l+0x44c>
 80091ba:	bf00      	nop
 80091bc:	f3af 8000 	nop.w
 80091c0:	94a03595 	.word	0x94a03595
 80091c4:	3fdfffff 	.word	0x3fdfffff
 80091c8:	35afe535 	.word	0x35afe535
 80091cc:	3fe00000 	.word	0x3fe00000
 80091d0:	000fffff 	.word	0x000fffff
 80091d4:	7ff00000 	.word	0x7ff00000
 80091d8:	7fefffff 	.word	0x7fefffff
 80091dc:	3ff00000 	.word	0x3ff00000
 80091e0:	3fe00000 	.word	0x3fe00000
 80091e4:	7fe00000 	.word	0x7fe00000
 80091e8:	7c9fffff 	.word	0x7c9fffff
 80091ec:	bff00000 	.word	0xbff00000
 80091f0:	9b08      	ldr	r3, [sp, #32]
 80091f2:	b323      	cbz	r3, 800923e <_strtod_l+0xb46>
 80091f4:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 80091f8:	d821      	bhi.n	800923e <_strtod_l+0xb46>
 80091fa:	a327      	add	r3, pc, #156	@ (adr r3, 8009298 <_strtod_l+0xba0>)
 80091fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009200:	4630      	mov	r0, r6
 8009202:	4639      	mov	r1, r7
 8009204:	f7f7 fbe4 	bl	80009d0 <__aeabi_dcmple>
 8009208:	b1a0      	cbz	r0, 8009234 <_strtod_l+0xb3c>
 800920a:	4639      	mov	r1, r7
 800920c:	4630      	mov	r0, r6
 800920e:	f7f7 fc3b 	bl	8000a88 <__aeabi_d2uiz>
 8009212:	2801      	cmp	r0, #1
 8009214:	bf38      	it	cc
 8009216:	2001      	movcc	r0, #1
 8009218:	f7f7 f8e4 	bl	80003e4 <__aeabi_ui2d>
 800921c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800921e:	4606      	mov	r6, r0
 8009220:	460f      	mov	r7, r1
 8009222:	b9fb      	cbnz	r3, 8009264 <_strtod_l+0xb6c>
 8009224:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009228:	9014      	str	r0, [sp, #80]	@ 0x50
 800922a:	9315      	str	r3, [sp, #84]	@ 0x54
 800922c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8009230:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009234:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009236:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800923a:	1b5b      	subs	r3, r3, r5
 800923c:	9311      	str	r3, [sp, #68]	@ 0x44
 800923e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009242:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8009246:	f7ff f8ff 	bl	8008448 <__ulp>
 800924a:	4602      	mov	r2, r0
 800924c:	460b      	mov	r3, r1
 800924e:	4650      	mov	r0, sl
 8009250:	4659      	mov	r1, fp
 8009252:	f7f7 f941 	bl	80004d8 <__aeabi_dmul>
 8009256:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800925a:	f7f6 ff87 	bl	800016c <__adddf3>
 800925e:	4682      	mov	sl, r0
 8009260:	468b      	mov	fp, r1
 8009262:	e776      	b.n	8009152 <_strtod_l+0xa5a>
 8009264:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8009268:	e7e0      	b.n	800922c <_strtod_l+0xb34>
 800926a:	a30d      	add	r3, pc, #52	@ (adr r3, 80092a0 <_strtod_l+0xba8>)
 800926c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009270:	f7f7 fba4 	bl	80009bc <__aeabi_dcmplt>
 8009274:	e79e      	b.n	80091b4 <_strtod_l+0xabc>
 8009276:	2300      	movs	r3, #0
 8009278:	930b      	str	r3, [sp, #44]	@ 0x2c
 800927a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800927c:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800927e:	6013      	str	r3, [r2, #0]
 8009280:	f7ff ba77 	b.w	8008772 <_strtod_l+0x7a>
 8009284:	2a65      	cmp	r2, #101	@ 0x65
 8009286:	f43f ab6e 	beq.w	8008966 <_strtod_l+0x26e>
 800928a:	2a45      	cmp	r2, #69	@ 0x45
 800928c:	f43f ab6b 	beq.w	8008966 <_strtod_l+0x26e>
 8009290:	2301      	movs	r3, #1
 8009292:	f7ff bba6 	b.w	80089e2 <_strtod_l+0x2ea>
 8009296:	bf00      	nop
 8009298:	ffc00000 	.word	0xffc00000
 800929c:	41dfffff 	.word	0x41dfffff
 80092a0:	94a03595 	.word	0x94a03595
 80092a4:	3fcfffff 	.word	0x3fcfffff

080092a8 <_strtod_r>:
 80092a8:	4b01      	ldr	r3, [pc, #4]	@ (80092b0 <_strtod_r+0x8>)
 80092aa:	f7ff ba25 	b.w	80086f8 <_strtod_l>
 80092ae:	bf00      	nop
 80092b0:	20000068 	.word	0x20000068

080092b4 <_strtol_l.constprop.0>:
 80092b4:	2b24      	cmp	r3, #36	@ 0x24
 80092b6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80092ba:	4686      	mov	lr, r0
 80092bc:	4690      	mov	r8, r2
 80092be:	d801      	bhi.n	80092c4 <_strtol_l.constprop.0+0x10>
 80092c0:	2b01      	cmp	r3, #1
 80092c2:	d106      	bne.n	80092d2 <_strtol_l.constprop.0+0x1e>
 80092c4:	f7fd fdbe 	bl	8006e44 <__errno>
 80092c8:	2316      	movs	r3, #22
 80092ca:	6003      	str	r3, [r0, #0]
 80092cc:	2000      	movs	r0, #0
 80092ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80092d2:	460d      	mov	r5, r1
 80092d4:	4833      	ldr	r0, [pc, #204]	@ (80093a4 <_strtol_l.constprop.0+0xf0>)
 80092d6:	462a      	mov	r2, r5
 80092d8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80092dc:	5d06      	ldrb	r6, [r0, r4]
 80092de:	f016 0608 	ands.w	r6, r6, #8
 80092e2:	d1f8      	bne.n	80092d6 <_strtol_l.constprop.0+0x22>
 80092e4:	2c2d      	cmp	r4, #45	@ 0x2d
 80092e6:	d12d      	bne.n	8009344 <_strtol_l.constprop.0+0x90>
 80092e8:	2601      	movs	r6, #1
 80092ea:	782c      	ldrb	r4, [r5, #0]
 80092ec:	1c95      	adds	r5, r2, #2
 80092ee:	f033 0210 	bics.w	r2, r3, #16
 80092f2:	d109      	bne.n	8009308 <_strtol_l.constprop.0+0x54>
 80092f4:	2c30      	cmp	r4, #48	@ 0x30
 80092f6:	d12a      	bne.n	800934e <_strtol_l.constprop.0+0x9a>
 80092f8:	782a      	ldrb	r2, [r5, #0]
 80092fa:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80092fe:	2a58      	cmp	r2, #88	@ 0x58
 8009300:	d125      	bne.n	800934e <_strtol_l.constprop.0+0x9a>
 8009302:	2310      	movs	r3, #16
 8009304:	786c      	ldrb	r4, [r5, #1]
 8009306:	3502      	adds	r5, #2
 8009308:	2200      	movs	r2, #0
 800930a:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800930e:	f10c 3cff 	add.w	ip, ip, #4294967295
 8009312:	fbbc f9f3 	udiv	r9, ip, r3
 8009316:	4610      	mov	r0, r2
 8009318:	fb03 ca19 	mls	sl, r3, r9, ip
 800931c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8009320:	2f09      	cmp	r7, #9
 8009322:	d81b      	bhi.n	800935c <_strtol_l.constprop.0+0xa8>
 8009324:	463c      	mov	r4, r7
 8009326:	42a3      	cmp	r3, r4
 8009328:	dd27      	ble.n	800937a <_strtol_l.constprop.0+0xc6>
 800932a:	1c57      	adds	r7, r2, #1
 800932c:	d007      	beq.n	800933e <_strtol_l.constprop.0+0x8a>
 800932e:	4581      	cmp	r9, r0
 8009330:	d320      	bcc.n	8009374 <_strtol_l.constprop.0+0xc0>
 8009332:	d101      	bne.n	8009338 <_strtol_l.constprop.0+0x84>
 8009334:	45a2      	cmp	sl, r4
 8009336:	db1d      	blt.n	8009374 <_strtol_l.constprop.0+0xc0>
 8009338:	2201      	movs	r2, #1
 800933a:	fb00 4003 	mla	r0, r0, r3, r4
 800933e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009342:	e7eb      	b.n	800931c <_strtol_l.constprop.0+0x68>
 8009344:	2c2b      	cmp	r4, #43	@ 0x2b
 8009346:	bf04      	itt	eq
 8009348:	782c      	ldrbeq	r4, [r5, #0]
 800934a:	1c95      	addeq	r5, r2, #2
 800934c:	e7cf      	b.n	80092ee <_strtol_l.constprop.0+0x3a>
 800934e:	2b00      	cmp	r3, #0
 8009350:	d1da      	bne.n	8009308 <_strtol_l.constprop.0+0x54>
 8009352:	2c30      	cmp	r4, #48	@ 0x30
 8009354:	bf0c      	ite	eq
 8009356:	2308      	moveq	r3, #8
 8009358:	230a      	movne	r3, #10
 800935a:	e7d5      	b.n	8009308 <_strtol_l.constprop.0+0x54>
 800935c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8009360:	2f19      	cmp	r7, #25
 8009362:	d801      	bhi.n	8009368 <_strtol_l.constprop.0+0xb4>
 8009364:	3c37      	subs	r4, #55	@ 0x37
 8009366:	e7de      	b.n	8009326 <_strtol_l.constprop.0+0x72>
 8009368:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800936c:	2f19      	cmp	r7, #25
 800936e:	d804      	bhi.n	800937a <_strtol_l.constprop.0+0xc6>
 8009370:	3c57      	subs	r4, #87	@ 0x57
 8009372:	e7d8      	b.n	8009326 <_strtol_l.constprop.0+0x72>
 8009374:	f04f 32ff 	mov.w	r2, #4294967295
 8009378:	e7e1      	b.n	800933e <_strtol_l.constprop.0+0x8a>
 800937a:	1c53      	adds	r3, r2, #1
 800937c:	d108      	bne.n	8009390 <_strtol_l.constprop.0+0xdc>
 800937e:	2322      	movs	r3, #34	@ 0x22
 8009380:	4660      	mov	r0, ip
 8009382:	f8ce 3000 	str.w	r3, [lr]
 8009386:	f1b8 0f00 	cmp.w	r8, #0
 800938a:	d0a0      	beq.n	80092ce <_strtol_l.constprop.0+0x1a>
 800938c:	1e69      	subs	r1, r5, #1
 800938e:	e006      	b.n	800939e <_strtol_l.constprop.0+0xea>
 8009390:	b106      	cbz	r6, 8009394 <_strtol_l.constprop.0+0xe0>
 8009392:	4240      	negs	r0, r0
 8009394:	f1b8 0f00 	cmp.w	r8, #0
 8009398:	d099      	beq.n	80092ce <_strtol_l.constprop.0+0x1a>
 800939a:	2a00      	cmp	r2, #0
 800939c:	d1f6      	bne.n	800938c <_strtol_l.constprop.0+0xd8>
 800939e:	f8c8 1000 	str.w	r1, [r8]
 80093a2:	e794      	b.n	80092ce <_strtol_l.constprop.0+0x1a>
 80093a4:	0800b049 	.word	0x0800b049

080093a8 <_strtol_r>:
 80093a8:	f7ff bf84 	b.w	80092b4 <_strtol_l.constprop.0>

080093ac <__ssputs_r>:
 80093ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80093b0:	461f      	mov	r7, r3
 80093b2:	688e      	ldr	r6, [r1, #8]
 80093b4:	4682      	mov	sl, r0
 80093b6:	42be      	cmp	r6, r7
 80093b8:	460c      	mov	r4, r1
 80093ba:	4690      	mov	r8, r2
 80093bc:	680b      	ldr	r3, [r1, #0]
 80093be:	d82d      	bhi.n	800941c <__ssputs_r+0x70>
 80093c0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80093c4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80093c8:	d026      	beq.n	8009418 <__ssputs_r+0x6c>
 80093ca:	6965      	ldr	r5, [r4, #20]
 80093cc:	6909      	ldr	r1, [r1, #16]
 80093ce:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80093d2:	eba3 0901 	sub.w	r9, r3, r1
 80093d6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80093da:	1c7b      	adds	r3, r7, #1
 80093dc:	444b      	add	r3, r9
 80093de:	106d      	asrs	r5, r5, #1
 80093e0:	429d      	cmp	r5, r3
 80093e2:	bf38      	it	cc
 80093e4:	461d      	movcc	r5, r3
 80093e6:	0553      	lsls	r3, r2, #21
 80093e8:	d527      	bpl.n	800943a <__ssputs_r+0x8e>
 80093ea:	4629      	mov	r1, r5
 80093ec:	f7fe fc2e 	bl	8007c4c <_malloc_r>
 80093f0:	4606      	mov	r6, r0
 80093f2:	b360      	cbz	r0, 800944e <__ssputs_r+0xa2>
 80093f4:	464a      	mov	r2, r9
 80093f6:	6921      	ldr	r1, [r4, #16]
 80093f8:	f000 fc0c 	bl	8009c14 <memcpy>
 80093fc:	89a3      	ldrh	r3, [r4, #12]
 80093fe:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009402:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009406:	81a3      	strh	r3, [r4, #12]
 8009408:	6126      	str	r6, [r4, #16]
 800940a:	444e      	add	r6, r9
 800940c:	6026      	str	r6, [r4, #0]
 800940e:	463e      	mov	r6, r7
 8009410:	6165      	str	r5, [r4, #20]
 8009412:	eba5 0509 	sub.w	r5, r5, r9
 8009416:	60a5      	str	r5, [r4, #8]
 8009418:	42be      	cmp	r6, r7
 800941a:	d900      	bls.n	800941e <__ssputs_r+0x72>
 800941c:	463e      	mov	r6, r7
 800941e:	4632      	mov	r2, r6
 8009420:	4641      	mov	r1, r8
 8009422:	6820      	ldr	r0, [r4, #0]
 8009424:	f000 fb97 	bl	8009b56 <memmove>
 8009428:	2000      	movs	r0, #0
 800942a:	68a3      	ldr	r3, [r4, #8]
 800942c:	1b9b      	subs	r3, r3, r6
 800942e:	60a3      	str	r3, [r4, #8]
 8009430:	6823      	ldr	r3, [r4, #0]
 8009432:	4433      	add	r3, r6
 8009434:	6023      	str	r3, [r4, #0]
 8009436:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800943a:	462a      	mov	r2, r5
 800943c:	f000 ff7b 	bl	800a336 <_realloc_r>
 8009440:	4606      	mov	r6, r0
 8009442:	2800      	cmp	r0, #0
 8009444:	d1e0      	bne.n	8009408 <__ssputs_r+0x5c>
 8009446:	4650      	mov	r0, sl
 8009448:	6921      	ldr	r1, [r4, #16]
 800944a:	f7fe fb8d 	bl	8007b68 <_free_r>
 800944e:	230c      	movs	r3, #12
 8009450:	f8ca 3000 	str.w	r3, [sl]
 8009454:	89a3      	ldrh	r3, [r4, #12]
 8009456:	f04f 30ff 	mov.w	r0, #4294967295
 800945a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800945e:	81a3      	strh	r3, [r4, #12]
 8009460:	e7e9      	b.n	8009436 <__ssputs_r+0x8a>
	...

08009464 <_svfiprintf_r>:
 8009464:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009468:	4698      	mov	r8, r3
 800946a:	898b      	ldrh	r3, [r1, #12]
 800946c:	4607      	mov	r7, r0
 800946e:	061b      	lsls	r3, r3, #24
 8009470:	460d      	mov	r5, r1
 8009472:	4614      	mov	r4, r2
 8009474:	b09d      	sub	sp, #116	@ 0x74
 8009476:	d510      	bpl.n	800949a <_svfiprintf_r+0x36>
 8009478:	690b      	ldr	r3, [r1, #16]
 800947a:	b973      	cbnz	r3, 800949a <_svfiprintf_r+0x36>
 800947c:	2140      	movs	r1, #64	@ 0x40
 800947e:	f7fe fbe5 	bl	8007c4c <_malloc_r>
 8009482:	6028      	str	r0, [r5, #0]
 8009484:	6128      	str	r0, [r5, #16]
 8009486:	b930      	cbnz	r0, 8009496 <_svfiprintf_r+0x32>
 8009488:	230c      	movs	r3, #12
 800948a:	603b      	str	r3, [r7, #0]
 800948c:	f04f 30ff 	mov.w	r0, #4294967295
 8009490:	b01d      	add	sp, #116	@ 0x74
 8009492:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009496:	2340      	movs	r3, #64	@ 0x40
 8009498:	616b      	str	r3, [r5, #20]
 800949a:	2300      	movs	r3, #0
 800949c:	9309      	str	r3, [sp, #36]	@ 0x24
 800949e:	2320      	movs	r3, #32
 80094a0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80094a4:	2330      	movs	r3, #48	@ 0x30
 80094a6:	f04f 0901 	mov.w	r9, #1
 80094aa:	f8cd 800c 	str.w	r8, [sp, #12]
 80094ae:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8009648 <_svfiprintf_r+0x1e4>
 80094b2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80094b6:	4623      	mov	r3, r4
 80094b8:	469a      	mov	sl, r3
 80094ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 80094be:	b10a      	cbz	r2, 80094c4 <_svfiprintf_r+0x60>
 80094c0:	2a25      	cmp	r2, #37	@ 0x25
 80094c2:	d1f9      	bne.n	80094b8 <_svfiprintf_r+0x54>
 80094c4:	ebba 0b04 	subs.w	fp, sl, r4
 80094c8:	d00b      	beq.n	80094e2 <_svfiprintf_r+0x7e>
 80094ca:	465b      	mov	r3, fp
 80094cc:	4622      	mov	r2, r4
 80094ce:	4629      	mov	r1, r5
 80094d0:	4638      	mov	r0, r7
 80094d2:	f7ff ff6b 	bl	80093ac <__ssputs_r>
 80094d6:	3001      	adds	r0, #1
 80094d8:	f000 80a7 	beq.w	800962a <_svfiprintf_r+0x1c6>
 80094dc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80094de:	445a      	add	r2, fp
 80094e0:	9209      	str	r2, [sp, #36]	@ 0x24
 80094e2:	f89a 3000 	ldrb.w	r3, [sl]
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	f000 809f 	beq.w	800962a <_svfiprintf_r+0x1c6>
 80094ec:	2300      	movs	r3, #0
 80094ee:	f04f 32ff 	mov.w	r2, #4294967295
 80094f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80094f6:	f10a 0a01 	add.w	sl, sl, #1
 80094fa:	9304      	str	r3, [sp, #16]
 80094fc:	9307      	str	r3, [sp, #28]
 80094fe:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009502:	931a      	str	r3, [sp, #104]	@ 0x68
 8009504:	4654      	mov	r4, sl
 8009506:	2205      	movs	r2, #5
 8009508:	f814 1b01 	ldrb.w	r1, [r4], #1
 800950c:	484e      	ldr	r0, [pc, #312]	@ (8009648 <_svfiprintf_r+0x1e4>)
 800950e:	f7fd fcc6 	bl	8006e9e <memchr>
 8009512:	9a04      	ldr	r2, [sp, #16]
 8009514:	b9d8      	cbnz	r0, 800954e <_svfiprintf_r+0xea>
 8009516:	06d0      	lsls	r0, r2, #27
 8009518:	bf44      	itt	mi
 800951a:	2320      	movmi	r3, #32
 800951c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009520:	0711      	lsls	r1, r2, #28
 8009522:	bf44      	itt	mi
 8009524:	232b      	movmi	r3, #43	@ 0x2b
 8009526:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800952a:	f89a 3000 	ldrb.w	r3, [sl]
 800952e:	2b2a      	cmp	r3, #42	@ 0x2a
 8009530:	d015      	beq.n	800955e <_svfiprintf_r+0xfa>
 8009532:	4654      	mov	r4, sl
 8009534:	2000      	movs	r0, #0
 8009536:	f04f 0c0a 	mov.w	ip, #10
 800953a:	9a07      	ldr	r2, [sp, #28]
 800953c:	4621      	mov	r1, r4
 800953e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009542:	3b30      	subs	r3, #48	@ 0x30
 8009544:	2b09      	cmp	r3, #9
 8009546:	d94b      	bls.n	80095e0 <_svfiprintf_r+0x17c>
 8009548:	b1b0      	cbz	r0, 8009578 <_svfiprintf_r+0x114>
 800954a:	9207      	str	r2, [sp, #28]
 800954c:	e014      	b.n	8009578 <_svfiprintf_r+0x114>
 800954e:	eba0 0308 	sub.w	r3, r0, r8
 8009552:	fa09 f303 	lsl.w	r3, r9, r3
 8009556:	4313      	orrs	r3, r2
 8009558:	46a2      	mov	sl, r4
 800955a:	9304      	str	r3, [sp, #16]
 800955c:	e7d2      	b.n	8009504 <_svfiprintf_r+0xa0>
 800955e:	9b03      	ldr	r3, [sp, #12]
 8009560:	1d19      	adds	r1, r3, #4
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	9103      	str	r1, [sp, #12]
 8009566:	2b00      	cmp	r3, #0
 8009568:	bfbb      	ittet	lt
 800956a:	425b      	neglt	r3, r3
 800956c:	f042 0202 	orrlt.w	r2, r2, #2
 8009570:	9307      	strge	r3, [sp, #28]
 8009572:	9307      	strlt	r3, [sp, #28]
 8009574:	bfb8      	it	lt
 8009576:	9204      	strlt	r2, [sp, #16]
 8009578:	7823      	ldrb	r3, [r4, #0]
 800957a:	2b2e      	cmp	r3, #46	@ 0x2e
 800957c:	d10a      	bne.n	8009594 <_svfiprintf_r+0x130>
 800957e:	7863      	ldrb	r3, [r4, #1]
 8009580:	2b2a      	cmp	r3, #42	@ 0x2a
 8009582:	d132      	bne.n	80095ea <_svfiprintf_r+0x186>
 8009584:	9b03      	ldr	r3, [sp, #12]
 8009586:	3402      	adds	r4, #2
 8009588:	1d1a      	adds	r2, r3, #4
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	9203      	str	r2, [sp, #12]
 800958e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009592:	9305      	str	r3, [sp, #20]
 8009594:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800964c <_svfiprintf_r+0x1e8>
 8009598:	2203      	movs	r2, #3
 800959a:	4650      	mov	r0, sl
 800959c:	7821      	ldrb	r1, [r4, #0]
 800959e:	f7fd fc7e 	bl	8006e9e <memchr>
 80095a2:	b138      	cbz	r0, 80095b4 <_svfiprintf_r+0x150>
 80095a4:	2240      	movs	r2, #64	@ 0x40
 80095a6:	9b04      	ldr	r3, [sp, #16]
 80095a8:	eba0 000a 	sub.w	r0, r0, sl
 80095ac:	4082      	lsls	r2, r0
 80095ae:	4313      	orrs	r3, r2
 80095b0:	3401      	adds	r4, #1
 80095b2:	9304      	str	r3, [sp, #16]
 80095b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80095b8:	2206      	movs	r2, #6
 80095ba:	4825      	ldr	r0, [pc, #148]	@ (8009650 <_svfiprintf_r+0x1ec>)
 80095bc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80095c0:	f7fd fc6d 	bl	8006e9e <memchr>
 80095c4:	2800      	cmp	r0, #0
 80095c6:	d036      	beq.n	8009636 <_svfiprintf_r+0x1d2>
 80095c8:	4b22      	ldr	r3, [pc, #136]	@ (8009654 <_svfiprintf_r+0x1f0>)
 80095ca:	bb1b      	cbnz	r3, 8009614 <_svfiprintf_r+0x1b0>
 80095cc:	9b03      	ldr	r3, [sp, #12]
 80095ce:	3307      	adds	r3, #7
 80095d0:	f023 0307 	bic.w	r3, r3, #7
 80095d4:	3308      	adds	r3, #8
 80095d6:	9303      	str	r3, [sp, #12]
 80095d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80095da:	4433      	add	r3, r6
 80095dc:	9309      	str	r3, [sp, #36]	@ 0x24
 80095de:	e76a      	b.n	80094b6 <_svfiprintf_r+0x52>
 80095e0:	460c      	mov	r4, r1
 80095e2:	2001      	movs	r0, #1
 80095e4:	fb0c 3202 	mla	r2, ip, r2, r3
 80095e8:	e7a8      	b.n	800953c <_svfiprintf_r+0xd8>
 80095ea:	2300      	movs	r3, #0
 80095ec:	f04f 0c0a 	mov.w	ip, #10
 80095f0:	4619      	mov	r1, r3
 80095f2:	3401      	adds	r4, #1
 80095f4:	9305      	str	r3, [sp, #20]
 80095f6:	4620      	mov	r0, r4
 80095f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80095fc:	3a30      	subs	r2, #48	@ 0x30
 80095fe:	2a09      	cmp	r2, #9
 8009600:	d903      	bls.n	800960a <_svfiprintf_r+0x1a6>
 8009602:	2b00      	cmp	r3, #0
 8009604:	d0c6      	beq.n	8009594 <_svfiprintf_r+0x130>
 8009606:	9105      	str	r1, [sp, #20]
 8009608:	e7c4      	b.n	8009594 <_svfiprintf_r+0x130>
 800960a:	4604      	mov	r4, r0
 800960c:	2301      	movs	r3, #1
 800960e:	fb0c 2101 	mla	r1, ip, r1, r2
 8009612:	e7f0      	b.n	80095f6 <_svfiprintf_r+0x192>
 8009614:	ab03      	add	r3, sp, #12
 8009616:	9300      	str	r3, [sp, #0]
 8009618:	462a      	mov	r2, r5
 800961a:	4638      	mov	r0, r7
 800961c:	4b0e      	ldr	r3, [pc, #56]	@ (8009658 <_svfiprintf_r+0x1f4>)
 800961e:	a904      	add	r1, sp, #16
 8009620:	f7fc fbbe 	bl	8005da0 <_printf_float>
 8009624:	1c42      	adds	r2, r0, #1
 8009626:	4606      	mov	r6, r0
 8009628:	d1d6      	bne.n	80095d8 <_svfiprintf_r+0x174>
 800962a:	89ab      	ldrh	r3, [r5, #12]
 800962c:	065b      	lsls	r3, r3, #25
 800962e:	f53f af2d 	bmi.w	800948c <_svfiprintf_r+0x28>
 8009632:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009634:	e72c      	b.n	8009490 <_svfiprintf_r+0x2c>
 8009636:	ab03      	add	r3, sp, #12
 8009638:	9300      	str	r3, [sp, #0]
 800963a:	462a      	mov	r2, r5
 800963c:	4638      	mov	r0, r7
 800963e:	4b06      	ldr	r3, [pc, #24]	@ (8009658 <_svfiprintf_r+0x1f4>)
 8009640:	a904      	add	r1, sp, #16
 8009642:	f7fc fe4b 	bl	80062dc <_printf_i>
 8009646:	e7ed      	b.n	8009624 <_svfiprintf_r+0x1c0>
 8009648:	0800b149 	.word	0x0800b149
 800964c:	0800b14f 	.word	0x0800b14f
 8009650:	0800b153 	.word	0x0800b153
 8009654:	08005da1 	.word	0x08005da1
 8009658:	080093ad 	.word	0x080093ad

0800965c <__sfputc_r>:
 800965c:	6893      	ldr	r3, [r2, #8]
 800965e:	b410      	push	{r4}
 8009660:	3b01      	subs	r3, #1
 8009662:	2b00      	cmp	r3, #0
 8009664:	6093      	str	r3, [r2, #8]
 8009666:	da07      	bge.n	8009678 <__sfputc_r+0x1c>
 8009668:	6994      	ldr	r4, [r2, #24]
 800966a:	42a3      	cmp	r3, r4
 800966c:	db01      	blt.n	8009672 <__sfputc_r+0x16>
 800966e:	290a      	cmp	r1, #10
 8009670:	d102      	bne.n	8009678 <__sfputc_r+0x1c>
 8009672:	bc10      	pop	{r4}
 8009674:	f7fd baff 	b.w	8006c76 <__swbuf_r>
 8009678:	6813      	ldr	r3, [r2, #0]
 800967a:	1c58      	adds	r0, r3, #1
 800967c:	6010      	str	r0, [r2, #0]
 800967e:	7019      	strb	r1, [r3, #0]
 8009680:	4608      	mov	r0, r1
 8009682:	bc10      	pop	{r4}
 8009684:	4770      	bx	lr

08009686 <__sfputs_r>:
 8009686:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009688:	4606      	mov	r6, r0
 800968a:	460f      	mov	r7, r1
 800968c:	4614      	mov	r4, r2
 800968e:	18d5      	adds	r5, r2, r3
 8009690:	42ac      	cmp	r4, r5
 8009692:	d101      	bne.n	8009698 <__sfputs_r+0x12>
 8009694:	2000      	movs	r0, #0
 8009696:	e007      	b.n	80096a8 <__sfputs_r+0x22>
 8009698:	463a      	mov	r2, r7
 800969a:	4630      	mov	r0, r6
 800969c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80096a0:	f7ff ffdc 	bl	800965c <__sfputc_r>
 80096a4:	1c43      	adds	r3, r0, #1
 80096a6:	d1f3      	bne.n	8009690 <__sfputs_r+0xa>
 80096a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080096ac <_vfiprintf_r>:
 80096ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096b0:	460d      	mov	r5, r1
 80096b2:	4614      	mov	r4, r2
 80096b4:	4698      	mov	r8, r3
 80096b6:	4606      	mov	r6, r0
 80096b8:	b09d      	sub	sp, #116	@ 0x74
 80096ba:	b118      	cbz	r0, 80096c4 <_vfiprintf_r+0x18>
 80096bc:	6a03      	ldr	r3, [r0, #32]
 80096be:	b90b      	cbnz	r3, 80096c4 <_vfiprintf_r+0x18>
 80096c0:	f7fd f9c8 	bl	8006a54 <__sinit>
 80096c4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80096c6:	07d9      	lsls	r1, r3, #31
 80096c8:	d405      	bmi.n	80096d6 <_vfiprintf_r+0x2a>
 80096ca:	89ab      	ldrh	r3, [r5, #12]
 80096cc:	059a      	lsls	r2, r3, #22
 80096ce:	d402      	bmi.n	80096d6 <_vfiprintf_r+0x2a>
 80096d0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80096d2:	f7fd fbe2 	bl	8006e9a <__retarget_lock_acquire_recursive>
 80096d6:	89ab      	ldrh	r3, [r5, #12]
 80096d8:	071b      	lsls	r3, r3, #28
 80096da:	d501      	bpl.n	80096e0 <_vfiprintf_r+0x34>
 80096dc:	692b      	ldr	r3, [r5, #16]
 80096de:	b99b      	cbnz	r3, 8009708 <_vfiprintf_r+0x5c>
 80096e0:	4629      	mov	r1, r5
 80096e2:	4630      	mov	r0, r6
 80096e4:	f7fd fb06 	bl	8006cf4 <__swsetup_r>
 80096e8:	b170      	cbz	r0, 8009708 <_vfiprintf_r+0x5c>
 80096ea:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80096ec:	07dc      	lsls	r4, r3, #31
 80096ee:	d504      	bpl.n	80096fa <_vfiprintf_r+0x4e>
 80096f0:	f04f 30ff 	mov.w	r0, #4294967295
 80096f4:	b01d      	add	sp, #116	@ 0x74
 80096f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096fa:	89ab      	ldrh	r3, [r5, #12]
 80096fc:	0598      	lsls	r0, r3, #22
 80096fe:	d4f7      	bmi.n	80096f0 <_vfiprintf_r+0x44>
 8009700:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009702:	f7fd fbcb 	bl	8006e9c <__retarget_lock_release_recursive>
 8009706:	e7f3      	b.n	80096f0 <_vfiprintf_r+0x44>
 8009708:	2300      	movs	r3, #0
 800970a:	9309      	str	r3, [sp, #36]	@ 0x24
 800970c:	2320      	movs	r3, #32
 800970e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009712:	2330      	movs	r3, #48	@ 0x30
 8009714:	f04f 0901 	mov.w	r9, #1
 8009718:	f8cd 800c 	str.w	r8, [sp, #12]
 800971c:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 80098c8 <_vfiprintf_r+0x21c>
 8009720:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009724:	4623      	mov	r3, r4
 8009726:	469a      	mov	sl, r3
 8009728:	f813 2b01 	ldrb.w	r2, [r3], #1
 800972c:	b10a      	cbz	r2, 8009732 <_vfiprintf_r+0x86>
 800972e:	2a25      	cmp	r2, #37	@ 0x25
 8009730:	d1f9      	bne.n	8009726 <_vfiprintf_r+0x7a>
 8009732:	ebba 0b04 	subs.w	fp, sl, r4
 8009736:	d00b      	beq.n	8009750 <_vfiprintf_r+0xa4>
 8009738:	465b      	mov	r3, fp
 800973a:	4622      	mov	r2, r4
 800973c:	4629      	mov	r1, r5
 800973e:	4630      	mov	r0, r6
 8009740:	f7ff ffa1 	bl	8009686 <__sfputs_r>
 8009744:	3001      	adds	r0, #1
 8009746:	f000 80a7 	beq.w	8009898 <_vfiprintf_r+0x1ec>
 800974a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800974c:	445a      	add	r2, fp
 800974e:	9209      	str	r2, [sp, #36]	@ 0x24
 8009750:	f89a 3000 	ldrb.w	r3, [sl]
 8009754:	2b00      	cmp	r3, #0
 8009756:	f000 809f 	beq.w	8009898 <_vfiprintf_r+0x1ec>
 800975a:	2300      	movs	r3, #0
 800975c:	f04f 32ff 	mov.w	r2, #4294967295
 8009760:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009764:	f10a 0a01 	add.w	sl, sl, #1
 8009768:	9304      	str	r3, [sp, #16]
 800976a:	9307      	str	r3, [sp, #28]
 800976c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009770:	931a      	str	r3, [sp, #104]	@ 0x68
 8009772:	4654      	mov	r4, sl
 8009774:	2205      	movs	r2, #5
 8009776:	f814 1b01 	ldrb.w	r1, [r4], #1
 800977a:	4853      	ldr	r0, [pc, #332]	@ (80098c8 <_vfiprintf_r+0x21c>)
 800977c:	f7fd fb8f 	bl	8006e9e <memchr>
 8009780:	9a04      	ldr	r2, [sp, #16]
 8009782:	b9d8      	cbnz	r0, 80097bc <_vfiprintf_r+0x110>
 8009784:	06d1      	lsls	r1, r2, #27
 8009786:	bf44      	itt	mi
 8009788:	2320      	movmi	r3, #32
 800978a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800978e:	0713      	lsls	r3, r2, #28
 8009790:	bf44      	itt	mi
 8009792:	232b      	movmi	r3, #43	@ 0x2b
 8009794:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009798:	f89a 3000 	ldrb.w	r3, [sl]
 800979c:	2b2a      	cmp	r3, #42	@ 0x2a
 800979e:	d015      	beq.n	80097cc <_vfiprintf_r+0x120>
 80097a0:	4654      	mov	r4, sl
 80097a2:	2000      	movs	r0, #0
 80097a4:	f04f 0c0a 	mov.w	ip, #10
 80097a8:	9a07      	ldr	r2, [sp, #28]
 80097aa:	4621      	mov	r1, r4
 80097ac:	f811 3b01 	ldrb.w	r3, [r1], #1
 80097b0:	3b30      	subs	r3, #48	@ 0x30
 80097b2:	2b09      	cmp	r3, #9
 80097b4:	d94b      	bls.n	800984e <_vfiprintf_r+0x1a2>
 80097b6:	b1b0      	cbz	r0, 80097e6 <_vfiprintf_r+0x13a>
 80097b8:	9207      	str	r2, [sp, #28]
 80097ba:	e014      	b.n	80097e6 <_vfiprintf_r+0x13a>
 80097bc:	eba0 0308 	sub.w	r3, r0, r8
 80097c0:	fa09 f303 	lsl.w	r3, r9, r3
 80097c4:	4313      	orrs	r3, r2
 80097c6:	46a2      	mov	sl, r4
 80097c8:	9304      	str	r3, [sp, #16]
 80097ca:	e7d2      	b.n	8009772 <_vfiprintf_r+0xc6>
 80097cc:	9b03      	ldr	r3, [sp, #12]
 80097ce:	1d19      	adds	r1, r3, #4
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	9103      	str	r1, [sp, #12]
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	bfbb      	ittet	lt
 80097d8:	425b      	neglt	r3, r3
 80097da:	f042 0202 	orrlt.w	r2, r2, #2
 80097de:	9307      	strge	r3, [sp, #28]
 80097e0:	9307      	strlt	r3, [sp, #28]
 80097e2:	bfb8      	it	lt
 80097e4:	9204      	strlt	r2, [sp, #16]
 80097e6:	7823      	ldrb	r3, [r4, #0]
 80097e8:	2b2e      	cmp	r3, #46	@ 0x2e
 80097ea:	d10a      	bne.n	8009802 <_vfiprintf_r+0x156>
 80097ec:	7863      	ldrb	r3, [r4, #1]
 80097ee:	2b2a      	cmp	r3, #42	@ 0x2a
 80097f0:	d132      	bne.n	8009858 <_vfiprintf_r+0x1ac>
 80097f2:	9b03      	ldr	r3, [sp, #12]
 80097f4:	3402      	adds	r4, #2
 80097f6:	1d1a      	adds	r2, r3, #4
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	9203      	str	r2, [sp, #12]
 80097fc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009800:	9305      	str	r3, [sp, #20]
 8009802:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 80098cc <_vfiprintf_r+0x220>
 8009806:	2203      	movs	r2, #3
 8009808:	4650      	mov	r0, sl
 800980a:	7821      	ldrb	r1, [r4, #0]
 800980c:	f7fd fb47 	bl	8006e9e <memchr>
 8009810:	b138      	cbz	r0, 8009822 <_vfiprintf_r+0x176>
 8009812:	2240      	movs	r2, #64	@ 0x40
 8009814:	9b04      	ldr	r3, [sp, #16]
 8009816:	eba0 000a 	sub.w	r0, r0, sl
 800981a:	4082      	lsls	r2, r0
 800981c:	4313      	orrs	r3, r2
 800981e:	3401      	adds	r4, #1
 8009820:	9304      	str	r3, [sp, #16]
 8009822:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009826:	2206      	movs	r2, #6
 8009828:	4829      	ldr	r0, [pc, #164]	@ (80098d0 <_vfiprintf_r+0x224>)
 800982a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800982e:	f7fd fb36 	bl	8006e9e <memchr>
 8009832:	2800      	cmp	r0, #0
 8009834:	d03f      	beq.n	80098b6 <_vfiprintf_r+0x20a>
 8009836:	4b27      	ldr	r3, [pc, #156]	@ (80098d4 <_vfiprintf_r+0x228>)
 8009838:	bb1b      	cbnz	r3, 8009882 <_vfiprintf_r+0x1d6>
 800983a:	9b03      	ldr	r3, [sp, #12]
 800983c:	3307      	adds	r3, #7
 800983e:	f023 0307 	bic.w	r3, r3, #7
 8009842:	3308      	adds	r3, #8
 8009844:	9303      	str	r3, [sp, #12]
 8009846:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009848:	443b      	add	r3, r7
 800984a:	9309      	str	r3, [sp, #36]	@ 0x24
 800984c:	e76a      	b.n	8009724 <_vfiprintf_r+0x78>
 800984e:	460c      	mov	r4, r1
 8009850:	2001      	movs	r0, #1
 8009852:	fb0c 3202 	mla	r2, ip, r2, r3
 8009856:	e7a8      	b.n	80097aa <_vfiprintf_r+0xfe>
 8009858:	2300      	movs	r3, #0
 800985a:	f04f 0c0a 	mov.w	ip, #10
 800985e:	4619      	mov	r1, r3
 8009860:	3401      	adds	r4, #1
 8009862:	9305      	str	r3, [sp, #20]
 8009864:	4620      	mov	r0, r4
 8009866:	f810 2b01 	ldrb.w	r2, [r0], #1
 800986a:	3a30      	subs	r2, #48	@ 0x30
 800986c:	2a09      	cmp	r2, #9
 800986e:	d903      	bls.n	8009878 <_vfiprintf_r+0x1cc>
 8009870:	2b00      	cmp	r3, #0
 8009872:	d0c6      	beq.n	8009802 <_vfiprintf_r+0x156>
 8009874:	9105      	str	r1, [sp, #20]
 8009876:	e7c4      	b.n	8009802 <_vfiprintf_r+0x156>
 8009878:	4604      	mov	r4, r0
 800987a:	2301      	movs	r3, #1
 800987c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009880:	e7f0      	b.n	8009864 <_vfiprintf_r+0x1b8>
 8009882:	ab03      	add	r3, sp, #12
 8009884:	9300      	str	r3, [sp, #0]
 8009886:	462a      	mov	r2, r5
 8009888:	4630      	mov	r0, r6
 800988a:	4b13      	ldr	r3, [pc, #76]	@ (80098d8 <_vfiprintf_r+0x22c>)
 800988c:	a904      	add	r1, sp, #16
 800988e:	f7fc fa87 	bl	8005da0 <_printf_float>
 8009892:	4607      	mov	r7, r0
 8009894:	1c78      	adds	r0, r7, #1
 8009896:	d1d6      	bne.n	8009846 <_vfiprintf_r+0x19a>
 8009898:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800989a:	07d9      	lsls	r1, r3, #31
 800989c:	d405      	bmi.n	80098aa <_vfiprintf_r+0x1fe>
 800989e:	89ab      	ldrh	r3, [r5, #12]
 80098a0:	059a      	lsls	r2, r3, #22
 80098a2:	d402      	bmi.n	80098aa <_vfiprintf_r+0x1fe>
 80098a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80098a6:	f7fd faf9 	bl	8006e9c <__retarget_lock_release_recursive>
 80098aa:	89ab      	ldrh	r3, [r5, #12]
 80098ac:	065b      	lsls	r3, r3, #25
 80098ae:	f53f af1f 	bmi.w	80096f0 <_vfiprintf_r+0x44>
 80098b2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80098b4:	e71e      	b.n	80096f4 <_vfiprintf_r+0x48>
 80098b6:	ab03      	add	r3, sp, #12
 80098b8:	9300      	str	r3, [sp, #0]
 80098ba:	462a      	mov	r2, r5
 80098bc:	4630      	mov	r0, r6
 80098be:	4b06      	ldr	r3, [pc, #24]	@ (80098d8 <_vfiprintf_r+0x22c>)
 80098c0:	a904      	add	r1, sp, #16
 80098c2:	f7fc fd0b 	bl	80062dc <_printf_i>
 80098c6:	e7e4      	b.n	8009892 <_vfiprintf_r+0x1e6>
 80098c8:	0800b149 	.word	0x0800b149
 80098cc:	0800b14f 	.word	0x0800b14f
 80098d0:	0800b153 	.word	0x0800b153
 80098d4:	08005da1 	.word	0x08005da1
 80098d8:	08009687 	.word	0x08009687

080098dc <__sflush_r>:
 80098dc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80098e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098e2:	0716      	lsls	r6, r2, #28
 80098e4:	4605      	mov	r5, r0
 80098e6:	460c      	mov	r4, r1
 80098e8:	d454      	bmi.n	8009994 <__sflush_r+0xb8>
 80098ea:	684b      	ldr	r3, [r1, #4]
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	dc02      	bgt.n	80098f6 <__sflush_r+0x1a>
 80098f0:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	dd48      	ble.n	8009988 <__sflush_r+0xac>
 80098f6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80098f8:	2e00      	cmp	r6, #0
 80098fa:	d045      	beq.n	8009988 <__sflush_r+0xac>
 80098fc:	2300      	movs	r3, #0
 80098fe:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009902:	682f      	ldr	r7, [r5, #0]
 8009904:	6a21      	ldr	r1, [r4, #32]
 8009906:	602b      	str	r3, [r5, #0]
 8009908:	d030      	beq.n	800996c <__sflush_r+0x90>
 800990a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800990c:	89a3      	ldrh	r3, [r4, #12]
 800990e:	0759      	lsls	r1, r3, #29
 8009910:	d505      	bpl.n	800991e <__sflush_r+0x42>
 8009912:	6863      	ldr	r3, [r4, #4]
 8009914:	1ad2      	subs	r2, r2, r3
 8009916:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009918:	b10b      	cbz	r3, 800991e <__sflush_r+0x42>
 800991a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800991c:	1ad2      	subs	r2, r2, r3
 800991e:	2300      	movs	r3, #0
 8009920:	4628      	mov	r0, r5
 8009922:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009924:	6a21      	ldr	r1, [r4, #32]
 8009926:	47b0      	blx	r6
 8009928:	1c43      	adds	r3, r0, #1
 800992a:	89a3      	ldrh	r3, [r4, #12]
 800992c:	d106      	bne.n	800993c <__sflush_r+0x60>
 800992e:	6829      	ldr	r1, [r5, #0]
 8009930:	291d      	cmp	r1, #29
 8009932:	d82b      	bhi.n	800998c <__sflush_r+0xb0>
 8009934:	4a28      	ldr	r2, [pc, #160]	@ (80099d8 <__sflush_r+0xfc>)
 8009936:	410a      	asrs	r2, r1
 8009938:	07d6      	lsls	r6, r2, #31
 800993a:	d427      	bmi.n	800998c <__sflush_r+0xb0>
 800993c:	2200      	movs	r2, #0
 800993e:	6062      	str	r2, [r4, #4]
 8009940:	6922      	ldr	r2, [r4, #16]
 8009942:	04d9      	lsls	r1, r3, #19
 8009944:	6022      	str	r2, [r4, #0]
 8009946:	d504      	bpl.n	8009952 <__sflush_r+0x76>
 8009948:	1c42      	adds	r2, r0, #1
 800994a:	d101      	bne.n	8009950 <__sflush_r+0x74>
 800994c:	682b      	ldr	r3, [r5, #0]
 800994e:	b903      	cbnz	r3, 8009952 <__sflush_r+0x76>
 8009950:	6560      	str	r0, [r4, #84]	@ 0x54
 8009952:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009954:	602f      	str	r7, [r5, #0]
 8009956:	b1b9      	cbz	r1, 8009988 <__sflush_r+0xac>
 8009958:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800995c:	4299      	cmp	r1, r3
 800995e:	d002      	beq.n	8009966 <__sflush_r+0x8a>
 8009960:	4628      	mov	r0, r5
 8009962:	f7fe f901 	bl	8007b68 <_free_r>
 8009966:	2300      	movs	r3, #0
 8009968:	6363      	str	r3, [r4, #52]	@ 0x34
 800996a:	e00d      	b.n	8009988 <__sflush_r+0xac>
 800996c:	2301      	movs	r3, #1
 800996e:	4628      	mov	r0, r5
 8009970:	47b0      	blx	r6
 8009972:	4602      	mov	r2, r0
 8009974:	1c50      	adds	r0, r2, #1
 8009976:	d1c9      	bne.n	800990c <__sflush_r+0x30>
 8009978:	682b      	ldr	r3, [r5, #0]
 800997a:	2b00      	cmp	r3, #0
 800997c:	d0c6      	beq.n	800990c <__sflush_r+0x30>
 800997e:	2b1d      	cmp	r3, #29
 8009980:	d001      	beq.n	8009986 <__sflush_r+0xaa>
 8009982:	2b16      	cmp	r3, #22
 8009984:	d11d      	bne.n	80099c2 <__sflush_r+0xe6>
 8009986:	602f      	str	r7, [r5, #0]
 8009988:	2000      	movs	r0, #0
 800998a:	e021      	b.n	80099d0 <__sflush_r+0xf4>
 800998c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009990:	b21b      	sxth	r3, r3
 8009992:	e01a      	b.n	80099ca <__sflush_r+0xee>
 8009994:	690f      	ldr	r7, [r1, #16]
 8009996:	2f00      	cmp	r7, #0
 8009998:	d0f6      	beq.n	8009988 <__sflush_r+0xac>
 800999a:	0793      	lsls	r3, r2, #30
 800999c:	bf18      	it	ne
 800999e:	2300      	movne	r3, #0
 80099a0:	680e      	ldr	r6, [r1, #0]
 80099a2:	bf08      	it	eq
 80099a4:	694b      	ldreq	r3, [r1, #20]
 80099a6:	1bf6      	subs	r6, r6, r7
 80099a8:	600f      	str	r7, [r1, #0]
 80099aa:	608b      	str	r3, [r1, #8]
 80099ac:	2e00      	cmp	r6, #0
 80099ae:	ddeb      	ble.n	8009988 <__sflush_r+0xac>
 80099b0:	4633      	mov	r3, r6
 80099b2:	463a      	mov	r2, r7
 80099b4:	4628      	mov	r0, r5
 80099b6:	6a21      	ldr	r1, [r4, #32]
 80099b8:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 80099bc:	47e0      	blx	ip
 80099be:	2800      	cmp	r0, #0
 80099c0:	dc07      	bgt.n	80099d2 <__sflush_r+0xf6>
 80099c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80099c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80099ca:	f04f 30ff 	mov.w	r0, #4294967295
 80099ce:	81a3      	strh	r3, [r4, #12]
 80099d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80099d2:	4407      	add	r7, r0
 80099d4:	1a36      	subs	r6, r6, r0
 80099d6:	e7e9      	b.n	80099ac <__sflush_r+0xd0>
 80099d8:	dfbffffe 	.word	0xdfbffffe

080099dc <_fflush_r>:
 80099dc:	b538      	push	{r3, r4, r5, lr}
 80099de:	690b      	ldr	r3, [r1, #16]
 80099e0:	4605      	mov	r5, r0
 80099e2:	460c      	mov	r4, r1
 80099e4:	b913      	cbnz	r3, 80099ec <_fflush_r+0x10>
 80099e6:	2500      	movs	r5, #0
 80099e8:	4628      	mov	r0, r5
 80099ea:	bd38      	pop	{r3, r4, r5, pc}
 80099ec:	b118      	cbz	r0, 80099f6 <_fflush_r+0x1a>
 80099ee:	6a03      	ldr	r3, [r0, #32]
 80099f0:	b90b      	cbnz	r3, 80099f6 <_fflush_r+0x1a>
 80099f2:	f7fd f82f 	bl	8006a54 <__sinit>
 80099f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d0f3      	beq.n	80099e6 <_fflush_r+0xa>
 80099fe:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009a00:	07d0      	lsls	r0, r2, #31
 8009a02:	d404      	bmi.n	8009a0e <_fflush_r+0x32>
 8009a04:	0599      	lsls	r1, r3, #22
 8009a06:	d402      	bmi.n	8009a0e <_fflush_r+0x32>
 8009a08:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009a0a:	f7fd fa46 	bl	8006e9a <__retarget_lock_acquire_recursive>
 8009a0e:	4628      	mov	r0, r5
 8009a10:	4621      	mov	r1, r4
 8009a12:	f7ff ff63 	bl	80098dc <__sflush_r>
 8009a16:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009a18:	4605      	mov	r5, r0
 8009a1a:	07da      	lsls	r2, r3, #31
 8009a1c:	d4e4      	bmi.n	80099e8 <_fflush_r+0xc>
 8009a1e:	89a3      	ldrh	r3, [r4, #12]
 8009a20:	059b      	lsls	r3, r3, #22
 8009a22:	d4e1      	bmi.n	80099e8 <_fflush_r+0xc>
 8009a24:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009a26:	f7fd fa39 	bl	8006e9c <__retarget_lock_release_recursive>
 8009a2a:	e7dd      	b.n	80099e8 <_fflush_r+0xc>

08009a2c <__swhatbuf_r>:
 8009a2c:	b570      	push	{r4, r5, r6, lr}
 8009a2e:	460c      	mov	r4, r1
 8009a30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a34:	4615      	mov	r5, r2
 8009a36:	2900      	cmp	r1, #0
 8009a38:	461e      	mov	r6, r3
 8009a3a:	b096      	sub	sp, #88	@ 0x58
 8009a3c:	da0c      	bge.n	8009a58 <__swhatbuf_r+0x2c>
 8009a3e:	89a3      	ldrh	r3, [r4, #12]
 8009a40:	2100      	movs	r1, #0
 8009a42:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009a46:	bf14      	ite	ne
 8009a48:	2340      	movne	r3, #64	@ 0x40
 8009a4a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009a4e:	2000      	movs	r0, #0
 8009a50:	6031      	str	r1, [r6, #0]
 8009a52:	602b      	str	r3, [r5, #0]
 8009a54:	b016      	add	sp, #88	@ 0x58
 8009a56:	bd70      	pop	{r4, r5, r6, pc}
 8009a58:	466a      	mov	r2, sp
 8009a5a:	f000 f8a9 	bl	8009bb0 <_fstat_r>
 8009a5e:	2800      	cmp	r0, #0
 8009a60:	dbed      	blt.n	8009a3e <__swhatbuf_r+0x12>
 8009a62:	9901      	ldr	r1, [sp, #4]
 8009a64:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009a68:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009a6c:	4259      	negs	r1, r3
 8009a6e:	4159      	adcs	r1, r3
 8009a70:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009a74:	e7eb      	b.n	8009a4e <__swhatbuf_r+0x22>

08009a76 <__smakebuf_r>:
 8009a76:	898b      	ldrh	r3, [r1, #12]
 8009a78:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009a7a:	079d      	lsls	r5, r3, #30
 8009a7c:	4606      	mov	r6, r0
 8009a7e:	460c      	mov	r4, r1
 8009a80:	d507      	bpl.n	8009a92 <__smakebuf_r+0x1c>
 8009a82:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009a86:	6023      	str	r3, [r4, #0]
 8009a88:	6123      	str	r3, [r4, #16]
 8009a8a:	2301      	movs	r3, #1
 8009a8c:	6163      	str	r3, [r4, #20]
 8009a8e:	b003      	add	sp, #12
 8009a90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009a92:	466a      	mov	r2, sp
 8009a94:	ab01      	add	r3, sp, #4
 8009a96:	f7ff ffc9 	bl	8009a2c <__swhatbuf_r>
 8009a9a:	9f00      	ldr	r7, [sp, #0]
 8009a9c:	4605      	mov	r5, r0
 8009a9e:	4639      	mov	r1, r7
 8009aa0:	4630      	mov	r0, r6
 8009aa2:	f7fe f8d3 	bl	8007c4c <_malloc_r>
 8009aa6:	b948      	cbnz	r0, 8009abc <__smakebuf_r+0x46>
 8009aa8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009aac:	059a      	lsls	r2, r3, #22
 8009aae:	d4ee      	bmi.n	8009a8e <__smakebuf_r+0x18>
 8009ab0:	f023 0303 	bic.w	r3, r3, #3
 8009ab4:	f043 0302 	orr.w	r3, r3, #2
 8009ab8:	81a3      	strh	r3, [r4, #12]
 8009aba:	e7e2      	b.n	8009a82 <__smakebuf_r+0xc>
 8009abc:	89a3      	ldrh	r3, [r4, #12]
 8009abe:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009ac2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009ac6:	81a3      	strh	r3, [r4, #12]
 8009ac8:	9b01      	ldr	r3, [sp, #4]
 8009aca:	6020      	str	r0, [r4, #0]
 8009acc:	b15b      	cbz	r3, 8009ae6 <__smakebuf_r+0x70>
 8009ace:	4630      	mov	r0, r6
 8009ad0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009ad4:	f000 f87e 	bl	8009bd4 <_isatty_r>
 8009ad8:	b128      	cbz	r0, 8009ae6 <__smakebuf_r+0x70>
 8009ada:	89a3      	ldrh	r3, [r4, #12]
 8009adc:	f023 0303 	bic.w	r3, r3, #3
 8009ae0:	f043 0301 	orr.w	r3, r3, #1
 8009ae4:	81a3      	strh	r3, [r4, #12]
 8009ae6:	89a3      	ldrh	r3, [r4, #12]
 8009ae8:	431d      	orrs	r5, r3
 8009aea:	81a5      	strh	r5, [r4, #12]
 8009aec:	e7cf      	b.n	8009a8e <__smakebuf_r+0x18>

08009aee <_putc_r>:
 8009aee:	b570      	push	{r4, r5, r6, lr}
 8009af0:	460d      	mov	r5, r1
 8009af2:	4614      	mov	r4, r2
 8009af4:	4606      	mov	r6, r0
 8009af6:	b118      	cbz	r0, 8009b00 <_putc_r+0x12>
 8009af8:	6a03      	ldr	r3, [r0, #32]
 8009afa:	b90b      	cbnz	r3, 8009b00 <_putc_r+0x12>
 8009afc:	f7fc ffaa 	bl	8006a54 <__sinit>
 8009b00:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009b02:	07d8      	lsls	r0, r3, #31
 8009b04:	d405      	bmi.n	8009b12 <_putc_r+0x24>
 8009b06:	89a3      	ldrh	r3, [r4, #12]
 8009b08:	0599      	lsls	r1, r3, #22
 8009b0a:	d402      	bmi.n	8009b12 <_putc_r+0x24>
 8009b0c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009b0e:	f7fd f9c4 	bl	8006e9a <__retarget_lock_acquire_recursive>
 8009b12:	68a3      	ldr	r3, [r4, #8]
 8009b14:	3b01      	subs	r3, #1
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	60a3      	str	r3, [r4, #8]
 8009b1a:	da05      	bge.n	8009b28 <_putc_r+0x3a>
 8009b1c:	69a2      	ldr	r2, [r4, #24]
 8009b1e:	4293      	cmp	r3, r2
 8009b20:	db12      	blt.n	8009b48 <_putc_r+0x5a>
 8009b22:	b2eb      	uxtb	r3, r5
 8009b24:	2b0a      	cmp	r3, #10
 8009b26:	d00f      	beq.n	8009b48 <_putc_r+0x5a>
 8009b28:	6823      	ldr	r3, [r4, #0]
 8009b2a:	1c5a      	adds	r2, r3, #1
 8009b2c:	6022      	str	r2, [r4, #0]
 8009b2e:	701d      	strb	r5, [r3, #0]
 8009b30:	b2ed      	uxtb	r5, r5
 8009b32:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009b34:	07da      	lsls	r2, r3, #31
 8009b36:	d405      	bmi.n	8009b44 <_putc_r+0x56>
 8009b38:	89a3      	ldrh	r3, [r4, #12]
 8009b3a:	059b      	lsls	r3, r3, #22
 8009b3c:	d402      	bmi.n	8009b44 <_putc_r+0x56>
 8009b3e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009b40:	f7fd f9ac 	bl	8006e9c <__retarget_lock_release_recursive>
 8009b44:	4628      	mov	r0, r5
 8009b46:	bd70      	pop	{r4, r5, r6, pc}
 8009b48:	4629      	mov	r1, r5
 8009b4a:	4622      	mov	r2, r4
 8009b4c:	4630      	mov	r0, r6
 8009b4e:	f7fd f892 	bl	8006c76 <__swbuf_r>
 8009b52:	4605      	mov	r5, r0
 8009b54:	e7ed      	b.n	8009b32 <_putc_r+0x44>

08009b56 <memmove>:
 8009b56:	4288      	cmp	r0, r1
 8009b58:	b510      	push	{r4, lr}
 8009b5a:	eb01 0402 	add.w	r4, r1, r2
 8009b5e:	d902      	bls.n	8009b66 <memmove+0x10>
 8009b60:	4284      	cmp	r4, r0
 8009b62:	4623      	mov	r3, r4
 8009b64:	d807      	bhi.n	8009b76 <memmove+0x20>
 8009b66:	1e43      	subs	r3, r0, #1
 8009b68:	42a1      	cmp	r1, r4
 8009b6a:	d008      	beq.n	8009b7e <memmove+0x28>
 8009b6c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009b70:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009b74:	e7f8      	b.n	8009b68 <memmove+0x12>
 8009b76:	4601      	mov	r1, r0
 8009b78:	4402      	add	r2, r0
 8009b7a:	428a      	cmp	r2, r1
 8009b7c:	d100      	bne.n	8009b80 <memmove+0x2a>
 8009b7e:	bd10      	pop	{r4, pc}
 8009b80:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009b84:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009b88:	e7f7      	b.n	8009b7a <memmove+0x24>

08009b8a <strncmp>:
 8009b8a:	b510      	push	{r4, lr}
 8009b8c:	b16a      	cbz	r2, 8009baa <strncmp+0x20>
 8009b8e:	3901      	subs	r1, #1
 8009b90:	1884      	adds	r4, r0, r2
 8009b92:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009b96:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8009b9a:	429a      	cmp	r2, r3
 8009b9c:	d103      	bne.n	8009ba6 <strncmp+0x1c>
 8009b9e:	42a0      	cmp	r0, r4
 8009ba0:	d001      	beq.n	8009ba6 <strncmp+0x1c>
 8009ba2:	2a00      	cmp	r2, #0
 8009ba4:	d1f5      	bne.n	8009b92 <strncmp+0x8>
 8009ba6:	1ad0      	subs	r0, r2, r3
 8009ba8:	bd10      	pop	{r4, pc}
 8009baa:	4610      	mov	r0, r2
 8009bac:	e7fc      	b.n	8009ba8 <strncmp+0x1e>
	...

08009bb0 <_fstat_r>:
 8009bb0:	b538      	push	{r3, r4, r5, lr}
 8009bb2:	2300      	movs	r3, #0
 8009bb4:	4d06      	ldr	r5, [pc, #24]	@ (8009bd0 <_fstat_r+0x20>)
 8009bb6:	4604      	mov	r4, r0
 8009bb8:	4608      	mov	r0, r1
 8009bba:	4611      	mov	r1, r2
 8009bbc:	602b      	str	r3, [r5, #0]
 8009bbe:	f7f7 ff1b 	bl	80019f8 <_fstat>
 8009bc2:	1c43      	adds	r3, r0, #1
 8009bc4:	d102      	bne.n	8009bcc <_fstat_r+0x1c>
 8009bc6:	682b      	ldr	r3, [r5, #0]
 8009bc8:	b103      	cbz	r3, 8009bcc <_fstat_r+0x1c>
 8009bca:	6023      	str	r3, [r4, #0]
 8009bcc:	bd38      	pop	{r3, r4, r5, pc}
 8009bce:	bf00      	nop
 8009bd0:	20000560 	.word	0x20000560

08009bd4 <_isatty_r>:
 8009bd4:	b538      	push	{r3, r4, r5, lr}
 8009bd6:	2300      	movs	r3, #0
 8009bd8:	4d05      	ldr	r5, [pc, #20]	@ (8009bf0 <_isatty_r+0x1c>)
 8009bda:	4604      	mov	r4, r0
 8009bdc:	4608      	mov	r0, r1
 8009bde:	602b      	str	r3, [r5, #0]
 8009be0:	f7f7 ff19 	bl	8001a16 <_isatty>
 8009be4:	1c43      	adds	r3, r0, #1
 8009be6:	d102      	bne.n	8009bee <_isatty_r+0x1a>
 8009be8:	682b      	ldr	r3, [r5, #0]
 8009bea:	b103      	cbz	r3, 8009bee <_isatty_r+0x1a>
 8009bec:	6023      	str	r3, [r4, #0]
 8009bee:	bd38      	pop	{r3, r4, r5, pc}
 8009bf0:	20000560 	.word	0x20000560

08009bf4 <_sbrk_r>:
 8009bf4:	b538      	push	{r3, r4, r5, lr}
 8009bf6:	2300      	movs	r3, #0
 8009bf8:	4d05      	ldr	r5, [pc, #20]	@ (8009c10 <_sbrk_r+0x1c>)
 8009bfa:	4604      	mov	r4, r0
 8009bfc:	4608      	mov	r0, r1
 8009bfe:	602b      	str	r3, [r5, #0]
 8009c00:	f7f7 ff20 	bl	8001a44 <_sbrk>
 8009c04:	1c43      	adds	r3, r0, #1
 8009c06:	d102      	bne.n	8009c0e <_sbrk_r+0x1a>
 8009c08:	682b      	ldr	r3, [r5, #0]
 8009c0a:	b103      	cbz	r3, 8009c0e <_sbrk_r+0x1a>
 8009c0c:	6023      	str	r3, [r4, #0]
 8009c0e:	bd38      	pop	{r3, r4, r5, pc}
 8009c10:	20000560 	.word	0x20000560

08009c14 <memcpy>:
 8009c14:	440a      	add	r2, r1
 8009c16:	4291      	cmp	r1, r2
 8009c18:	f100 33ff 	add.w	r3, r0, #4294967295
 8009c1c:	d100      	bne.n	8009c20 <memcpy+0xc>
 8009c1e:	4770      	bx	lr
 8009c20:	b510      	push	{r4, lr}
 8009c22:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009c26:	4291      	cmp	r1, r2
 8009c28:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009c2c:	d1f9      	bne.n	8009c22 <memcpy+0xe>
 8009c2e:	bd10      	pop	{r4, pc}

08009c30 <nan>:
 8009c30:	2000      	movs	r0, #0
 8009c32:	4901      	ldr	r1, [pc, #4]	@ (8009c38 <nan+0x8>)
 8009c34:	4770      	bx	lr
 8009c36:	bf00      	nop
 8009c38:	7ff80000 	.word	0x7ff80000

08009c3c <__assert_func>:
 8009c3c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009c3e:	4614      	mov	r4, r2
 8009c40:	461a      	mov	r2, r3
 8009c42:	4b09      	ldr	r3, [pc, #36]	@ (8009c68 <__assert_func+0x2c>)
 8009c44:	4605      	mov	r5, r0
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	68d8      	ldr	r0, [r3, #12]
 8009c4a:	b954      	cbnz	r4, 8009c62 <__assert_func+0x26>
 8009c4c:	4b07      	ldr	r3, [pc, #28]	@ (8009c6c <__assert_func+0x30>)
 8009c4e:	461c      	mov	r4, r3
 8009c50:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009c54:	9100      	str	r1, [sp, #0]
 8009c56:	462b      	mov	r3, r5
 8009c58:	4905      	ldr	r1, [pc, #20]	@ (8009c70 <__assert_func+0x34>)
 8009c5a:	f000 fba7 	bl	800a3ac <fiprintf>
 8009c5e:	f000 fbb7 	bl	800a3d0 <abort>
 8009c62:	4b04      	ldr	r3, [pc, #16]	@ (8009c74 <__assert_func+0x38>)
 8009c64:	e7f4      	b.n	8009c50 <__assert_func+0x14>
 8009c66:	bf00      	nop
 8009c68:	20000018 	.word	0x20000018
 8009c6c:	0800b19d 	.word	0x0800b19d
 8009c70:	0800b16f 	.word	0x0800b16f
 8009c74:	0800b162 	.word	0x0800b162

08009c78 <_calloc_r>:
 8009c78:	b570      	push	{r4, r5, r6, lr}
 8009c7a:	fba1 5402 	umull	r5, r4, r1, r2
 8009c7e:	b93c      	cbnz	r4, 8009c90 <_calloc_r+0x18>
 8009c80:	4629      	mov	r1, r5
 8009c82:	f7fd ffe3 	bl	8007c4c <_malloc_r>
 8009c86:	4606      	mov	r6, r0
 8009c88:	b928      	cbnz	r0, 8009c96 <_calloc_r+0x1e>
 8009c8a:	2600      	movs	r6, #0
 8009c8c:	4630      	mov	r0, r6
 8009c8e:	bd70      	pop	{r4, r5, r6, pc}
 8009c90:	220c      	movs	r2, #12
 8009c92:	6002      	str	r2, [r0, #0]
 8009c94:	e7f9      	b.n	8009c8a <_calloc_r+0x12>
 8009c96:	462a      	mov	r2, r5
 8009c98:	4621      	mov	r1, r4
 8009c9a:	f7fd f881 	bl	8006da0 <memset>
 8009c9e:	e7f5      	b.n	8009c8c <_calloc_r+0x14>

08009ca0 <rshift>:
 8009ca0:	6903      	ldr	r3, [r0, #16]
 8009ca2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009ca6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009caa:	f100 0414 	add.w	r4, r0, #20
 8009cae:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009cb2:	dd46      	ble.n	8009d42 <rshift+0xa2>
 8009cb4:	f011 011f 	ands.w	r1, r1, #31
 8009cb8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009cbc:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009cc0:	d10c      	bne.n	8009cdc <rshift+0x3c>
 8009cc2:	4629      	mov	r1, r5
 8009cc4:	f100 0710 	add.w	r7, r0, #16
 8009cc8:	42b1      	cmp	r1, r6
 8009cca:	d335      	bcc.n	8009d38 <rshift+0x98>
 8009ccc:	1a9b      	subs	r3, r3, r2
 8009cce:	009b      	lsls	r3, r3, #2
 8009cd0:	1eea      	subs	r2, r5, #3
 8009cd2:	4296      	cmp	r6, r2
 8009cd4:	bf38      	it	cc
 8009cd6:	2300      	movcc	r3, #0
 8009cd8:	4423      	add	r3, r4
 8009cda:	e015      	b.n	8009d08 <rshift+0x68>
 8009cdc:	46a1      	mov	r9, r4
 8009cde:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009ce2:	f1c1 0820 	rsb	r8, r1, #32
 8009ce6:	40cf      	lsrs	r7, r1
 8009ce8:	f105 0e04 	add.w	lr, r5, #4
 8009cec:	4576      	cmp	r6, lr
 8009cee:	46f4      	mov	ip, lr
 8009cf0:	d816      	bhi.n	8009d20 <rshift+0x80>
 8009cf2:	1a9a      	subs	r2, r3, r2
 8009cf4:	0092      	lsls	r2, r2, #2
 8009cf6:	3a04      	subs	r2, #4
 8009cf8:	3501      	adds	r5, #1
 8009cfa:	42ae      	cmp	r6, r5
 8009cfc:	bf38      	it	cc
 8009cfe:	2200      	movcc	r2, #0
 8009d00:	18a3      	adds	r3, r4, r2
 8009d02:	50a7      	str	r7, [r4, r2]
 8009d04:	b107      	cbz	r7, 8009d08 <rshift+0x68>
 8009d06:	3304      	adds	r3, #4
 8009d08:	42a3      	cmp	r3, r4
 8009d0a:	eba3 0204 	sub.w	r2, r3, r4
 8009d0e:	bf08      	it	eq
 8009d10:	2300      	moveq	r3, #0
 8009d12:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009d16:	6102      	str	r2, [r0, #16]
 8009d18:	bf08      	it	eq
 8009d1a:	6143      	streq	r3, [r0, #20]
 8009d1c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009d20:	f8dc c000 	ldr.w	ip, [ip]
 8009d24:	fa0c fc08 	lsl.w	ip, ip, r8
 8009d28:	ea4c 0707 	orr.w	r7, ip, r7
 8009d2c:	f849 7b04 	str.w	r7, [r9], #4
 8009d30:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009d34:	40cf      	lsrs	r7, r1
 8009d36:	e7d9      	b.n	8009cec <rshift+0x4c>
 8009d38:	f851 cb04 	ldr.w	ip, [r1], #4
 8009d3c:	f847 cf04 	str.w	ip, [r7, #4]!
 8009d40:	e7c2      	b.n	8009cc8 <rshift+0x28>
 8009d42:	4623      	mov	r3, r4
 8009d44:	e7e0      	b.n	8009d08 <rshift+0x68>

08009d46 <__hexdig_fun>:
 8009d46:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8009d4a:	2b09      	cmp	r3, #9
 8009d4c:	d802      	bhi.n	8009d54 <__hexdig_fun+0xe>
 8009d4e:	3820      	subs	r0, #32
 8009d50:	b2c0      	uxtb	r0, r0
 8009d52:	4770      	bx	lr
 8009d54:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8009d58:	2b05      	cmp	r3, #5
 8009d5a:	d801      	bhi.n	8009d60 <__hexdig_fun+0x1a>
 8009d5c:	3847      	subs	r0, #71	@ 0x47
 8009d5e:	e7f7      	b.n	8009d50 <__hexdig_fun+0xa>
 8009d60:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8009d64:	2b05      	cmp	r3, #5
 8009d66:	d801      	bhi.n	8009d6c <__hexdig_fun+0x26>
 8009d68:	3827      	subs	r0, #39	@ 0x27
 8009d6a:	e7f1      	b.n	8009d50 <__hexdig_fun+0xa>
 8009d6c:	2000      	movs	r0, #0
 8009d6e:	4770      	bx	lr

08009d70 <__gethex>:
 8009d70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d74:	468a      	mov	sl, r1
 8009d76:	4690      	mov	r8, r2
 8009d78:	b085      	sub	sp, #20
 8009d7a:	9302      	str	r3, [sp, #8]
 8009d7c:	680b      	ldr	r3, [r1, #0]
 8009d7e:	9001      	str	r0, [sp, #4]
 8009d80:	1c9c      	adds	r4, r3, #2
 8009d82:	46a1      	mov	r9, r4
 8009d84:	f814 0b01 	ldrb.w	r0, [r4], #1
 8009d88:	2830      	cmp	r0, #48	@ 0x30
 8009d8a:	d0fa      	beq.n	8009d82 <__gethex+0x12>
 8009d8c:	eba9 0303 	sub.w	r3, r9, r3
 8009d90:	f1a3 0b02 	sub.w	fp, r3, #2
 8009d94:	f7ff ffd7 	bl	8009d46 <__hexdig_fun>
 8009d98:	4605      	mov	r5, r0
 8009d9a:	2800      	cmp	r0, #0
 8009d9c:	d168      	bne.n	8009e70 <__gethex+0x100>
 8009d9e:	2201      	movs	r2, #1
 8009da0:	4648      	mov	r0, r9
 8009da2:	499f      	ldr	r1, [pc, #636]	@ (800a020 <__gethex+0x2b0>)
 8009da4:	f7ff fef1 	bl	8009b8a <strncmp>
 8009da8:	4607      	mov	r7, r0
 8009daa:	2800      	cmp	r0, #0
 8009dac:	d167      	bne.n	8009e7e <__gethex+0x10e>
 8009dae:	f899 0001 	ldrb.w	r0, [r9, #1]
 8009db2:	4626      	mov	r6, r4
 8009db4:	f7ff ffc7 	bl	8009d46 <__hexdig_fun>
 8009db8:	2800      	cmp	r0, #0
 8009dba:	d062      	beq.n	8009e82 <__gethex+0x112>
 8009dbc:	4623      	mov	r3, r4
 8009dbe:	7818      	ldrb	r0, [r3, #0]
 8009dc0:	4699      	mov	r9, r3
 8009dc2:	2830      	cmp	r0, #48	@ 0x30
 8009dc4:	f103 0301 	add.w	r3, r3, #1
 8009dc8:	d0f9      	beq.n	8009dbe <__gethex+0x4e>
 8009dca:	f7ff ffbc 	bl	8009d46 <__hexdig_fun>
 8009dce:	fab0 f580 	clz	r5, r0
 8009dd2:	f04f 0b01 	mov.w	fp, #1
 8009dd6:	096d      	lsrs	r5, r5, #5
 8009dd8:	464a      	mov	r2, r9
 8009dda:	4616      	mov	r6, r2
 8009ddc:	7830      	ldrb	r0, [r6, #0]
 8009dde:	3201      	adds	r2, #1
 8009de0:	f7ff ffb1 	bl	8009d46 <__hexdig_fun>
 8009de4:	2800      	cmp	r0, #0
 8009de6:	d1f8      	bne.n	8009dda <__gethex+0x6a>
 8009de8:	2201      	movs	r2, #1
 8009dea:	4630      	mov	r0, r6
 8009dec:	498c      	ldr	r1, [pc, #560]	@ (800a020 <__gethex+0x2b0>)
 8009dee:	f7ff fecc 	bl	8009b8a <strncmp>
 8009df2:	2800      	cmp	r0, #0
 8009df4:	d13f      	bne.n	8009e76 <__gethex+0x106>
 8009df6:	b944      	cbnz	r4, 8009e0a <__gethex+0x9a>
 8009df8:	1c74      	adds	r4, r6, #1
 8009dfa:	4622      	mov	r2, r4
 8009dfc:	4616      	mov	r6, r2
 8009dfe:	7830      	ldrb	r0, [r6, #0]
 8009e00:	3201      	adds	r2, #1
 8009e02:	f7ff ffa0 	bl	8009d46 <__hexdig_fun>
 8009e06:	2800      	cmp	r0, #0
 8009e08:	d1f8      	bne.n	8009dfc <__gethex+0x8c>
 8009e0a:	1ba4      	subs	r4, r4, r6
 8009e0c:	00a7      	lsls	r7, r4, #2
 8009e0e:	7833      	ldrb	r3, [r6, #0]
 8009e10:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8009e14:	2b50      	cmp	r3, #80	@ 0x50
 8009e16:	d13e      	bne.n	8009e96 <__gethex+0x126>
 8009e18:	7873      	ldrb	r3, [r6, #1]
 8009e1a:	2b2b      	cmp	r3, #43	@ 0x2b
 8009e1c:	d033      	beq.n	8009e86 <__gethex+0x116>
 8009e1e:	2b2d      	cmp	r3, #45	@ 0x2d
 8009e20:	d034      	beq.n	8009e8c <__gethex+0x11c>
 8009e22:	2400      	movs	r4, #0
 8009e24:	1c71      	adds	r1, r6, #1
 8009e26:	7808      	ldrb	r0, [r1, #0]
 8009e28:	f7ff ff8d 	bl	8009d46 <__hexdig_fun>
 8009e2c:	1e43      	subs	r3, r0, #1
 8009e2e:	b2db      	uxtb	r3, r3
 8009e30:	2b18      	cmp	r3, #24
 8009e32:	d830      	bhi.n	8009e96 <__gethex+0x126>
 8009e34:	f1a0 0210 	sub.w	r2, r0, #16
 8009e38:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009e3c:	f7ff ff83 	bl	8009d46 <__hexdig_fun>
 8009e40:	f100 3cff 	add.w	ip, r0, #4294967295
 8009e44:	fa5f fc8c 	uxtb.w	ip, ip
 8009e48:	f1bc 0f18 	cmp.w	ip, #24
 8009e4c:	f04f 030a 	mov.w	r3, #10
 8009e50:	d91e      	bls.n	8009e90 <__gethex+0x120>
 8009e52:	b104      	cbz	r4, 8009e56 <__gethex+0xe6>
 8009e54:	4252      	negs	r2, r2
 8009e56:	4417      	add	r7, r2
 8009e58:	f8ca 1000 	str.w	r1, [sl]
 8009e5c:	b1ed      	cbz	r5, 8009e9a <__gethex+0x12a>
 8009e5e:	f1bb 0f00 	cmp.w	fp, #0
 8009e62:	bf0c      	ite	eq
 8009e64:	2506      	moveq	r5, #6
 8009e66:	2500      	movne	r5, #0
 8009e68:	4628      	mov	r0, r5
 8009e6a:	b005      	add	sp, #20
 8009e6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e70:	2500      	movs	r5, #0
 8009e72:	462c      	mov	r4, r5
 8009e74:	e7b0      	b.n	8009dd8 <__gethex+0x68>
 8009e76:	2c00      	cmp	r4, #0
 8009e78:	d1c7      	bne.n	8009e0a <__gethex+0x9a>
 8009e7a:	4627      	mov	r7, r4
 8009e7c:	e7c7      	b.n	8009e0e <__gethex+0x9e>
 8009e7e:	464e      	mov	r6, r9
 8009e80:	462f      	mov	r7, r5
 8009e82:	2501      	movs	r5, #1
 8009e84:	e7c3      	b.n	8009e0e <__gethex+0x9e>
 8009e86:	2400      	movs	r4, #0
 8009e88:	1cb1      	adds	r1, r6, #2
 8009e8a:	e7cc      	b.n	8009e26 <__gethex+0xb6>
 8009e8c:	2401      	movs	r4, #1
 8009e8e:	e7fb      	b.n	8009e88 <__gethex+0x118>
 8009e90:	fb03 0002 	mla	r0, r3, r2, r0
 8009e94:	e7ce      	b.n	8009e34 <__gethex+0xc4>
 8009e96:	4631      	mov	r1, r6
 8009e98:	e7de      	b.n	8009e58 <__gethex+0xe8>
 8009e9a:	4629      	mov	r1, r5
 8009e9c:	eba6 0309 	sub.w	r3, r6, r9
 8009ea0:	3b01      	subs	r3, #1
 8009ea2:	2b07      	cmp	r3, #7
 8009ea4:	dc0a      	bgt.n	8009ebc <__gethex+0x14c>
 8009ea6:	9801      	ldr	r0, [sp, #4]
 8009ea8:	f7fd ff5c 	bl	8007d64 <_Balloc>
 8009eac:	4604      	mov	r4, r0
 8009eae:	b940      	cbnz	r0, 8009ec2 <__gethex+0x152>
 8009eb0:	4602      	mov	r2, r0
 8009eb2:	21e4      	movs	r1, #228	@ 0xe4
 8009eb4:	4b5b      	ldr	r3, [pc, #364]	@ (800a024 <__gethex+0x2b4>)
 8009eb6:	485c      	ldr	r0, [pc, #368]	@ (800a028 <__gethex+0x2b8>)
 8009eb8:	f7ff fec0 	bl	8009c3c <__assert_func>
 8009ebc:	3101      	adds	r1, #1
 8009ebe:	105b      	asrs	r3, r3, #1
 8009ec0:	e7ef      	b.n	8009ea2 <__gethex+0x132>
 8009ec2:	2300      	movs	r3, #0
 8009ec4:	f100 0a14 	add.w	sl, r0, #20
 8009ec8:	4655      	mov	r5, sl
 8009eca:	469b      	mov	fp, r3
 8009ecc:	45b1      	cmp	r9, r6
 8009ece:	d337      	bcc.n	8009f40 <__gethex+0x1d0>
 8009ed0:	f845 bb04 	str.w	fp, [r5], #4
 8009ed4:	eba5 050a 	sub.w	r5, r5, sl
 8009ed8:	10ad      	asrs	r5, r5, #2
 8009eda:	6125      	str	r5, [r4, #16]
 8009edc:	4658      	mov	r0, fp
 8009ede:	f7fe f833 	bl	8007f48 <__hi0bits>
 8009ee2:	016d      	lsls	r5, r5, #5
 8009ee4:	f8d8 6000 	ldr.w	r6, [r8]
 8009ee8:	1a2d      	subs	r5, r5, r0
 8009eea:	42b5      	cmp	r5, r6
 8009eec:	dd54      	ble.n	8009f98 <__gethex+0x228>
 8009eee:	1bad      	subs	r5, r5, r6
 8009ef0:	4629      	mov	r1, r5
 8009ef2:	4620      	mov	r0, r4
 8009ef4:	f7fe fbbb 	bl	800866e <__any_on>
 8009ef8:	4681      	mov	r9, r0
 8009efa:	b178      	cbz	r0, 8009f1c <__gethex+0x1ac>
 8009efc:	f04f 0901 	mov.w	r9, #1
 8009f00:	1e6b      	subs	r3, r5, #1
 8009f02:	1159      	asrs	r1, r3, #5
 8009f04:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8009f08:	f003 021f 	and.w	r2, r3, #31
 8009f0c:	fa09 f202 	lsl.w	r2, r9, r2
 8009f10:	420a      	tst	r2, r1
 8009f12:	d003      	beq.n	8009f1c <__gethex+0x1ac>
 8009f14:	454b      	cmp	r3, r9
 8009f16:	dc36      	bgt.n	8009f86 <__gethex+0x216>
 8009f18:	f04f 0902 	mov.w	r9, #2
 8009f1c:	4629      	mov	r1, r5
 8009f1e:	4620      	mov	r0, r4
 8009f20:	f7ff febe 	bl	8009ca0 <rshift>
 8009f24:	442f      	add	r7, r5
 8009f26:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009f2a:	42bb      	cmp	r3, r7
 8009f2c:	da42      	bge.n	8009fb4 <__gethex+0x244>
 8009f2e:	4621      	mov	r1, r4
 8009f30:	9801      	ldr	r0, [sp, #4]
 8009f32:	f7fd ff57 	bl	8007de4 <_Bfree>
 8009f36:	2300      	movs	r3, #0
 8009f38:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009f3a:	25a3      	movs	r5, #163	@ 0xa3
 8009f3c:	6013      	str	r3, [r2, #0]
 8009f3e:	e793      	b.n	8009e68 <__gethex+0xf8>
 8009f40:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8009f44:	2a2e      	cmp	r2, #46	@ 0x2e
 8009f46:	d012      	beq.n	8009f6e <__gethex+0x1fe>
 8009f48:	2b20      	cmp	r3, #32
 8009f4a:	d104      	bne.n	8009f56 <__gethex+0x1e6>
 8009f4c:	f845 bb04 	str.w	fp, [r5], #4
 8009f50:	f04f 0b00 	mov.w	fp, #0
 8009f54:	465b      	mov	r3, fp
 8009f56:	7830      	ldrb	r0, [r6, #0]
 8009f58:	9303      	str	r3, [sp, #12]
 8009f5a:	f7ff fef4 	bl	8009d46 <__hexdig_fun>
 8009f5e:	9b03      	ldr	r3, [sp, #12]
 8009f60:	f000 000f 	and.w	r0, r0, #15
 8009f64:	4098      	lsls	r0, r3
 8009f66:	ea4b 0b00 	orr.w	fp, fp, r0
 8009f6a:	3304      	adds	r3, #4
 8009f6c:	e7ae      	b.n	8009ecc <__gethex+0x15c>
 8009f6e:	45b1      	cmp	r9, r6
 8009f70:	d8ea      	bhi.n	8009f48 <__gethex+0x1d8>
 8009f72:	2201      	movs	r2, #1
 8009f74:	4630      	mov	r0, r6
 8009f76:	492a      	ldr	r1, [pc, #168]	@ (800a020 <__gethex+0x2b0>)
 8009f78:	9303      	str	r3, [sp, #12]
 8009f7a:	f7ff fe06 	bl	8009b8a <strncmp>
 8009f7e:	9b03      	ldr	r3, [sp, #12]
 8009f80:	2800      	cmp	r0, #0
 8009f82:	d1e1      	bne.n	8009f48 <__gethex+0x1d8>
 8009f84:	e7a2      	b.n	8009ecc <__gethex+0x15c>
 8009f86:	4620      	mov	r0, r4
 8009f88:	1ea9      	subs	r1, r5, #2
 8009f8a:	f7fe fb70 	bl	800866e <__any_on>
 8009f8e:	2800      	cmp	r0, #0
 8009f90:	d0c2      	beq.n	8009f18 <__gethex+0x1a8>
 8009f92:	f04f 0903 	mov.w	r9, #3
 8009f96:	e7c1      	b.n	8009f1c <__gethex+0x1ac>
 8009f98:	da09      	bge.n	8009fae <__gethex+0x23e>
 8009f9a:	1b75      	subs	r5, r6, r5
 8009f9c:	4621      	mov	r1, r4
 8009f9e:	462a      	mov	r2, r5
 8009fa0:	9801      	ldr	r0, [sp, #4]
 8009fa2:	f7fe f935 	bl	8008210 <__lshift>
 8009fa6:	4604      	mov	r4, r0
 8009fa8:	1b7f      	subs	r7, r7, r5
 8009faa:	f100 0a14 	add.w	sl, r0, #20
 8009fae:	f04f 0900 	mov.w	r9, #0
 8009fb2:	e7b8      	b.n	8009f26 <__gethex+0x1b6>
 8009fb4:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009fb8:	42bd      	cmp	r5, r7
 8009fba:	dd6f      	ble.n	800a09c <__gethex+0x32c>
 8009fbc:	1bed      	subs	r5, r5, r7
 8009fbe:	42ae      	cmp	r6, r5
 8009fc0:	dc34      	bgt.n	800a02c <__gethex+0x2bc>
 8009fc2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009fc6:	2b02      	cmp	r3, #2
 8009fc8:	d022      	beq.n	800a010 <__gethex+0x2a0>
 8009fca:	2b03      	cmp	r3, #3
 8009fcc:	d024      	beq.n	800a018 <__gethex+0x2a8>
 8009fce:	2b01      	cmp	r3, #1
 8009fd0:	d115      	bne.n	8009ffe <__gethex+0x28e>
 8009fd2:	42ae      	cmp	r6, r5
 8009fd4:	d113      	bne.n	8009ffe <__gethex+0x28e>
 8009fd6:	2e01      	cmp	r6, #1
 8009fd8:	d10b      	bne.n	8009ff2 <__gethex+0x282>
 8009fda:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009fde:	9a02      	ldr	r2, [sp, #8]
 8009fe0:	2562      	movs	r5, #98	@ 0x62
 8009fe2:	6013      	str	r3, [r2, #0]
 8009fe4:	2301      	movs	r3, #1
 8009fe6:	6123      	str	r3, [r4, #16]
 8009fe8:	f8ca 3000 	str.w	r3, [sl]
 8009fec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009fee:	601c      	str	r4, [r3, #0]
 8009ff0:	e73a      	b.n	8009e68 <__gethex+0xf8>
 8009ff2:	4620      	mov	r0, r4
 8009ff4:	1e71      	subs	r1, r6, #1
 8009ff6:	f7fe fb3a 	bl	800866e <__any_on>
 8009ffa:	2800      	cmp	r0, #0
 8009ffc:	d1ed      	bne.n	8009fda <__gethex+0x26a>
 8009ffe:	4621      	mov	r1, r4
 800a000:	9801      	ldr	r0, [sp, #4]
 800a002:	f7fd feef 	bl	8007de4 <_Bfree>
 800a006:	2300      	movs	r3, #0
 800a008:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a00a:	2550      	movs	r5, #80	@ 0x50
 800a00c:	6013      	str	r3, [r2, #0]
 800a00e:	e72b      	b.n	8009e68 <__gethex+0xf8>
 800a010:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a012:	2b00      	cmp	r3, #0
 800a014:	d1f3      	bne.n	8009ffe <__gethex+0x28e>
 800a016:	e7e0      	b.n	8009fda <__gethex+0x26a>
 800a018:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d1dd      	bne.n	8009fda <__gethex+0x26a>
 800a01e:	e7ee      	b.n	8009ffe <__gethex+0x28e>
 800a020:	0800aff0 	.word	0x0800aff0
 800a024:	0800ae83 	.word	0x0800ae83
 800a028:	0800b19e 	.word	0x0800b19e
 800a02c:	1e6f      	subs	r7, r5, #1
 800a02e:	f1b9 0f00 	cmp.w	r9, #0
 800a032:	d130      	bne.n	800a096 <__gethex+0x326>
 800a034:	b127      	cbz	r7, 800a040 <__gethex+0x2d0>
 800a036:	4639      	mov	r1, r7
 800a038:	4620      	mov	r0, r4
 800a03a:	f7fe fb18 	bl	800866e <__any_on>
 800a03e:	4681      	mov	r9, r0
 800a040:	2301      	movs	r3, #1
 800a042:	4629      	mov	r1, r5
 800a044:	1b76      	subs	r6, r6, r5
 800a046:	2502      	movs	r5, #2
 800a048:	117a      	asrs	r2, r7, #5
 800a04a:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800a04e:	f007 071f 	and.w	r7, r7, #31
 800a052:	40bb      	lsls	r3, r7
 800a054:	4213      	tst	r3, r2
 800a056:	4620      	mov	r0, r4
 800a058:	bf18      	it	ne
 800a05a:	f049 0902 	orrne.w	r9, r9, #2
 800a05e:	f7ff fe1f 	bl	8009ca0 <rshift>
 800a062:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800a066:	f1b9 0f00 	cmp.w	r9, #0
 800a06a:	d047      	beq.n	800a0fc <__gethex+0x38c>
 800a06c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a070:	2b02      	cmp	r3, #2
 800a072:	d015      	beq.n	800a0a0 <__gethex+0x330>
 800a074:	2b03      	cmp	r3, #3
 800a076:	d017      	beq.n	800a0a8 <__gethex+0x338>
 800a078:	2b01      	cmp	r3, #1
 800a07a:	d109      	bne.n	800a090 <__gethex+0x320>
 800a07c:	f019 0f02 	tst.w	r9, #2
 800a080:	d006      	beq.n	800a090 <__gethex+0x320>
 800a082:	f8da 3000 	ldr.w	r3, [sl]
 800a086:	ea49 0903 	orr.w	r9, r9, r3
 800a08a:	f019 0f01 	tst.w	r9, #1
 800a08e:	d10e      	bne.n	800a0ae <__gethex+0x33e>
 800a090:	f045 0510 	orr.w	r5, r5, #16
 800a094:	e032      	b.n	800a0fc <__gethex+0x38c>
 800a096:	f04f 0901 	mov.w	r9, #1
 800a09a:	e7d1      	b.n	800a040 <__gethex+0x2d0>
 800a09c:	2501      	movs	r5, #1
 800a09e:	e7e2      	b.n	800a066 <__gethex+0x2f6>
 800a0a0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a0a2:	f1c3 0301 	rsb	r3, r3, #1
 800a0a6:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a0a8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d0f0      	beq.n	800a090 <__gethex+0x320>
 800a0ae:	f04f 0c00 	mov.w	ip, #0
 800a0b2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a0b6:	f104 0314 	add.w	r3, r4, #20
 800a0ba:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a0be:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a0c2:	4618      	mov	r0, r3
 800a0c4:	f853 2b04 	ldr.w	r2, [r3], #4
 800a0c8:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a0cc:	d01b      	beq.n	800a106 <__gethex+0x396>
 800a0ce:	3201      	adds	r2, #1
 800a0d0:	6002      	str	r2, [r0, #0]
 800a0d2:	2d02      	cmp	r5, #2
 800a0d4:	f104 0314 	add.w	r3, r4, #20
 800a0d8:	d13c      	bne.n	800a154 <__gethex+0x3e4>
 800a0da:	f8d8 2000 	ldr.w	r2, [r8]
 800a0de:	3a01      	subs	r2, #1
 800a0e0:	42b2      	cmp	r2, r6
 800a0e2:	d109      	bne.n	800a0f8 <__gethex+0x388>
 800a0e4:	2201      	movs	r2, #1
 800a0e6:	1171      	asrs	r1, r6, #5
 800a0e8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a0ec:	f006 061f 	and.w	r6, r6, #31
 800a0f0:	fa02 f606 	lsl.w	r6, r2, r6
 800a0f4:	421e      	tst	r6, r3
 800a0f6:	d13a      	bne.n	800a16e <__gethex+0x3fe>
 800a0f8:	f045 0520 	orr.w	r5, r5, #32
 800a0fc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a0fe:	601c      	str	r4, [r3, #0]
 800a100:	9b02      	ldr	r3, [sp, #8]
 800a102:	601f      	str	r7, [r3, #0]
 800a104:	e6b0      	b.n	8009e68 <__gethex+0xf8>
 800a106:	4299      	cmp	r1, r3
 800a108:	f843 cc04 	str.w	ip, [r3, #-4]
 800a10c:	d8d9      	bhi.n	800a0c2 <__gethex+0x352>
 800a10e:	68a3      	ldr	r3, [r4, #8]
 800a110:	459b      	cmp	fp, r3
 800a112:	db17      	blt.n	800a144 <__gethex+0x3d4>
 800a114:	6861      	ldr	r1, [r4, #4]
 800a116:	9801      	ldr	r0, [sp, #4]
 800a118:	3101      	adds	r1, #1
 800a11a:	f7fd fe23 	bl	8007d64 <_Balloc>
 800a11e:	4681      	mov	r9, r0
 800a120:	b918      	cbnz	r0, 800a12a <__gethex+0x3ba>
 800a122:	4602      	mov	r2, r0
 800a124:	2184      	movs	r1, #132	@ 0x84
 800a126:	4b19      	ldr	r3, [pc, #100]	@ (800a18c <__gethex+0x41c>)
 800a128:	e6c5      	b.n	8009eb6 <__gethex+0x146>
 800a12a:	6922      	ldr	r2, [r4, #16]
 800a12c:	f104 010c 	add.w	r1, r4, #12
 800a130:	3202      	adds	r2, #2
 800a132:	0092      	lsls	r2, r2, #2
 800a134:	300c      	adds	r0, #12
 800a136:	f7ff fd6d 	bl	8009c14 <memcpy>
 800a13a:	4621      	mov	r1, r4
 800a13c:	9801      	ldr	r0, [sp, #4]
 800a13e:	f7fd fe51 	bl	8007de4 <_Bfree>
 800a142:	464c      	mov	r4, r9
 800a144:	6923      	ldr	r3, [r4, #16]
 800a146:	1c5a      	adds	r2, r3, #1
 800a148:	6122      	str	r2, [r4, #16]
 800a14a:	2201      	movs	r2, #1
 800a14c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a150:	615a      	str	r2, [r3, #20]
 800a152:	e7be      	b.n	800a0d2 <__gethex+0x362>
 800a154:	6922      	ldr	r2, [r4, #16]
 800a156:	455a      	cmp	r2, fp
 800a158:	dd0b      	ble.n	800a172 <__gethex+0x402>
 800a15a:	2101      	movs	r1, #1
 800a15c:	4620      	mov	r0, r4
 800a15e:	f7ff fd9f 	bl	8009ca0 <rshift>
 800a162:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a166:	3701      	adds	r7, #1
 800a168:	42bb      	cmp	r3, r7
 800a16a:	f6ff aee0 	blt.w	8009f2e <__gethex+0x1be>
 800a16e:	2501      	movs	r5, #1
 800a170:	e7c2      	b.n	800a0f8 <__gethex+0x388>
 800a172:	f016 061f 	ands.w	r6, r6, #31
 800a176:	d0fa      	beq.n	800a16e <__gethex+0x3fe>
 800a178:	4453      	add	r3, sl
 800a17a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800a17e:	f7fd fee3 	bl	8007f48 <__hi0bits>
 800a182:	f1c6 0620 	rsb	r6, r6, #32
 800a186:	42b0      	cmp	r0, r6
 800a188:	dbe7      	blt.n	800a15a <__gethex+0x3ea>
 800a18a:	e7f0      	b.n	800a16e <__gethex+0x3fe>
 800a18c:	0800ae83 	.word	0x0800ae83

0800a190 <L_shift>:
 800a190:	f1c2 0208 	rsb	r2, r2, #8
 800a194:	0092      	lsls	r2, r2, #2
 800a196:	b570      	push	{r4, r5, r6, lr}
 800a198:	f1c2 0620 	rsb	r6, r2, #32
 800a19c:	6843      	ldr	r3, [r0, #4]
 800a19e:	6804      	ldr	r4, [r0, #0]
 800a1a0:	fa03 f506 	lsl.w	r5, r3, r6
 800a1a4:	432c      	orrs	r4, r5
 800a1a6:	40d3      	lsrs	r3, r2
 800a1a8:	6004      	str	r4, [r0, #0]
 800a1aa:	f840 3f04 	str.w	r3, [r0, #4]!
 800a1ae:	4288      	cmp	r0, r1
 800a1b0:	d3f4      	bcc.n	800a19c <L_shift+0xc>
 800a1b2:	bd70      	pop	{r4, r5, r6, pc}

0800a1b4 <__match>:
 800a1b4:	b530      	push	{r4, r5, lr}
 800a1b6:	6803      	ldr	r3, [r0, #0]
 800a1b8:	3301      	adds	r3, #1
 800a1ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a1be:	b914      	cbnz	r4, 800a1c6 <__match+0x12>
 800a1c0:	6003      	str	r3, [r0, #0]
 800a1c2:	2001      	movs	r0, #1
 800a1c4:	bd30      	pop	{r4, r5, pc}
 800a1c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a1ca:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800a1ce:	2d19      	cmp	r5, #25
 800a1d0:	bf98      	it	ls
 800a1d2:	3220      	addls	r2, #32
 800a1d4:	42a2      	cmp	r2, r4
 800a1d6:	d0f0      	beq.n	800a1ba <__match+0x6>
 800a1d8:	2000      	movs	r0, #0
 800a1da:	e7f3      	b.n	800a1c4 <__match+0x10>

0800a1dc <__hexnan>:
 800a1dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1e0:	2500      	movs	r5, #0
 800a1e2:	680b      	ldr	r3, [r1, #0]
 800a1e4:	4682      	mov	sl, r0
 800a1e6:	115e      	asrs	r6, r3, #5
 800a1e8:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a1ec:	f013 031f 	ands.w	r3, r3, #31
 800a1f0:	bf18      	it	ne
 800a1f2:	3604      	addne	r6, #4
 800a1f4:	1f37      	subs	r7, r6, #4
 800a1f6:	4690      	mov	r8, r2
 800a1f8:	46b9      	mov	r9, r7
 800a1fa:	463c      	mov	r4, r7
 800a1fc:	46ab      	mov	fp, r5
 800a1fe:	b087      	sub	sp, #28
 800a200:	6801      	ldr	r1, [r0, #0]
 800a202:	9301      	str	r3, [sp, #4]
 800a204:	f846 5c04 	str.w	r5, [r6, #-4]
 800a208:	9502      	str	r5, [sp, #8]
 800a20a:	784a      	ldrb	r2, [r1, #1]
 800a20c:	1c4b      	adds	r3, r1, #1
 800a20e:	9303      	str	r3, [sp, #12]
 800a210:	b342      	cbz	r2, 800a264 <__hexnan+0x88>
 800a212:	4610      	mov	r0, r2
 800a214:	9105      	str	r1, [sp, #20]
 800a216:	9204      	str	r2, [sp, #16]
 800a218:	f7ff fd95 	bl	8009d46 <__hexdig_fun>
 800a21c:	2800      	cmp	r0, #0
 800a21e:	d151      	bne.n	800a2c4 <__hexnan+0xe8>
 800a220:	9a04      	ldr	r2, [sp, #16]
 800a222:	9905      	ldr	r1, [sp, #20]
 800a224:	2a20      	cmp	r2, #32
 800a226:	d818      	bhi.n	800a25a <__hexnan+0x7e>
 800a228:	9b02      	ldr	r3, [sp, #8]
 800a22a:	459b      	cmp	fp, r3
 800a22c:	dd13      	ble.n	800a256 <__hexnan+0x7a>
 800a22e:	454c      	cmp	r4, r9
 800a230:	d206      	bcs.n	800a240 <__hexnan+0x64>
 800a232:	2d07      	cmp	r5, #7
 800a234:	dc04      	bgt.n	800a240 <__hexnan+0x64>
 800a236:	462a      	mov	r2, r5
 800a238:	4649      	mov	r1, r9
 800a23a:	4620      	mov	r0, r4
 800a23c:	f7ff ffa8 	bl	800a190 <L_shift>
 800a240:	4544      	cmp	r4, r8
 800a242:	d952      	bls.n	800a2ea <__hexnan+0x10e>
 800a244:	2300      	movs	r3, #0
 800a246:	f1a4 0904 	sub.w	r9, r4, #4
 800a24a:	f844 3c04 	str.w	r3, [r4, #-4]
 800a24e:	461d      	mov	r5, r3
 800a250:	464c      	mov	r4, r9
 800a252:	f8cd b008 	str.w	fp, [sp, #8]
 800a256:	9903      	ldr	r1, [sp, #12]
 800a258:	e7d7      	b.n	800a20a <__hexnan+0x2e>
 800a25a:	2a29      	cmp	r2, #41	@ 0x29
 800a25c:	d157      	bne.n	800a30e <__hexnan+0x132>
 800a25e:	3102      	adds	r1, #2
 800a260:	f8ca 1000 	str.w	r1, [sl]
 800a264:	f1bb 0f00 	cmp.w	fp, #0
 800a268:	d051      	beq.n	800a30e <__hexnan+0x132>
 800a26a:	454c      	cmp	r4, r9
 800a26c:	d206      	bcs.n	800a27c <__hexnan+0xa0>
 800a26e:	2d07      	cmp	r5, #7
 800a270:	dc04      	bgt.n	800a27c <__hexnan+0xa0>
 800a272:	462a      	mov	r2, r5
 800a274:	4649      	mov	r1, r9
 800a276:	4620      	mov	r0, r4
 800a278:	f7ff ff8a 	bl	800a190 <L_shift>
 800a27c:	4544      	cmp	r4, r8
 800a27e:	d936      	bls.n	800a2ee <__hexnan+0x112>
 800a280:	4623      	mov	r3, r4
 800a282:	f1a8 0204 	sub.w	r2, r8, #4
 800a286:	f853 1b04 	ldr.w	r1, [r3], #4
 800a28a:	429f      	cmp	r7, r3
 800a28c:	f842 1f04 	str.w	r1, [r2, #4]!
 800a290:	d2f9      	bcs.n	800a286 <__hexnan+0xaa>
 800a292:	1b3b      	subs	r3, r7, r4
 800a294:	f023 0303 	bic.w	r3, r3, #3
 800a298:	3304      	adds	r3, #4
 800a29a:	3401      	adds	r4, #1
 800a29c:	3e03      	subs	r6, #3
 800a29e:	42b4      	cmp	r4, r6
 800a2a0:	bf88      	it	hi
 800a2a2:	2304      	movhi	r3, #4
 800a2a4:	2200      	movs	r2, #0
 800a2a6:	4443      	add	r3, r8
 800a2a8:	f843 2b04 	str.w	r2, [r3], #4
 800a2ac:	429f      	cmp	r7, r3
 800a2ae:	d2fb      	bcs.n	800a2a8 <__hexnan+0xcc>
 800a2b0:	683b      	ldr	r3, [r7, #0]
 800a2b2:	b91b      	cbnz	r3, 800a2bc <__hexnan+0xe0>
 800a2b4:	4547      	cmp	r7, r8
 800a2b6:	d128      	bne.n	800a30a <__hexnan+0x12e>
 800a2b8:	2301      	movs	r3, #1
 800a2ba:	603b      	str	r3, [r7, #0]
 800a2bc:	2005      	movs	r0, #5
 800a2be:	b007      	add	sp, #28
 800a2c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2c4:	3501      	adds	r5, #1
 800a2c6:	2d08      	cmp	r5, #8
 800a2c8:	f10b 0b01 	add.w	fp, fp, #1
 800a2cc:	dd06      	ble.n	800a2dc <__hexnan+0x100>
 800a2ce:	4544      	cmp	r4, r8
 800a2d0:	d9c1      	bls.n	800a256 <__hexnan+0x7a>
 800a2d2:	2300      	movs	r3, #0
 800a2d4:	2501      	movs	r5, #1
 800a2d6:	f844 3c04 	str.w	r3, [r4, #-4]
 800a2da:	3c04      	subs	r4, #4
 800a2dc:	6822      	ldr	r2, [r4, #0]
 800a2de:	f000 000f 	and.w	r0, r0, #15
 800a2e2:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800a2e6:	6020      	str	r0, [r4, #0]
 800a2e8:	e7b5      	b.n	800a256 <__hexnan+0x7a>
 800a2ea:	2508      	movs	r5, #8
 800a2ec:	e7b3      	b.n	800a256 <__hexnan+0x7a>
 800a2ee:	9b01      	ldr	r3, [sp, #4]
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d0dd      	beq.n	800a2b0 <__hexnan+0xd4>
 800a2f4:	f04f 32ff 	mov.w	r2, #4294967295
 800a2f8:	f1c3 0320 	rsb	r3, r3, #32
 800a2fc:	40da      	lsrs	r2, r3
 800a2fe:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800a302:	4013      	ands	r3, r2
 800a304:	f846 3c04 	str.w	r3, [r6, #-4]
 800a308:	e7d2      	b.n	800a2b0 <__hexnan+0xd4>
 800a30a:	3f04      	subs	r7, #4
 800a30c:	e7d0      	b.n	800a2b0 <__hexnan+0xd4>
 800a30e:	2004      	movs	r0, #4
 800a310:	e7d5      	b.n	800a2be <__hexnan+0xe2>

0800a312 <__ascii_mbtowc>:
 800a312:	b082      	sub	sp, #8
 800a314:	b901      	cbnz	r1, 800a318 <__ascii_mbtowc+0x6>
 800a316:	a901      	add	r1, sp, #4
 800a318:	b142      	cbz	r2, 800a32c <__ascii_mbtowc+0x1a>
 800a31a:	b14b      	cbz	r3, 800a330 <__ascii_mbtowc+0x1e>
 800a31c:	7813      	ldrb	r3, [r2, #0]
 800a31e:	600b      	str	r3, [r1, #0]
 800a320:	7812      	ldrb	r2, [r2, #0]
 800a322:	1e10      	subs	r0, r2, #0
 800a324:	bf18      	it	ne
 800a326:	2001      	movne	r0, #1
 800a328:	b002      	add	sp, #8
 800a32a:	4770      	bx	lr
 800a32c:	4610      	mov	r0, r2
 800a32e:	e7fb      	b.n	800a328 <__ascii_mbtowc+0x16>
 800a330:	f06f 0001 	mvn.w	r0, #1
 800a334:	e7f8      	b.n	800a328 <__ascii_mbtowc+0x16>

0800a336 <_realloc_r>:
 800a336:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a33a:	4680      	mov	r8, r0
 800a33c:	4615      	mov	r5, r2
 800a33e:	460c      	mov	r4, r1
 800a340:	b921      	cbnz	r1, 800a34c <_realloc_r+0x16>
 800a342:	4611      	mov	r1, r2
 800a344:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a348:	f7fd bc80 	b.w	8007c4c <_malloc_r>
 800a34c:	b92a      	cbnz	r2, 800a35a <_realloc_r+0x24>
 800a34e:	f7fd fc0b 	bl	8007b68 <_free_r>
 800a352:	2400      	movs	r4, #0
 800a354:	4620      	mov	r0, r4
 800a356:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a35a:	f000 f840 	bl	800a3de <_malloc_usable_size_r>
 800a35e:	4285      	cmp	r5, r0
 800a360:	4606      	mov	r6, r0
 800a362:	d802      	bhi.n	800a36a <_realloc_r+0x34>
 800a364:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800a368:	d8f4      	bhi.n	800a354 <_realloc_r+0x1e>
 800a36a:	4629      	mov	r1, r5
 800a36c:	4640      	mov	r0, r8
 800a36e:	f7fd fc6d 	bl	8007c4c <_malloc_r>
 800a372:	4607      	mov	r7, r0
 800a374:	2800      	cmp	r0, #0
 800a376:	d0ec      	beq.n	800a352 <_realloc_r+0x1c>
 800a378:	42b5      	cmp	r5, r6
 800a37a:	462a      	mov	r2, r5
 800a37c:	4621      	mov	r1, r4
 800a37e:	bf28      	it	cs
 800a380:	4632      	movcs	r2, r6
 800a382:	f7ff fc47 	bl	8009c14 <memcpy>
 800a386:	4621      	mov	r1, r4
 800a388:	4640      	mov	r0, r8
 800a38a:	f7fd fbed 	bl	8007b68 <_free_r>
 800a38e:	463c      	mov	r4, r7
 800a390:	e7e0      	b.n	800a354 <_realloc_r+0x1e>

0800a392 <__ascii_wctomb>:
 800a392:	4603      	mov	r3, r0
 800a394:	4608      	mov	r0, r1
 800a396:	b141      	cbz	r1, 800a3aa <__ascii_wctomb+0x18>
 800a398:	2aff      	cmp	r2, #255	@ 0xff
 800a39a:	d904      	bls.n	800a3a6 <__ascii_wctomb+0x14>
 800a39c:	228a      	movs	r2, #138	@ 0x8a
 800a39e:	f04f 30ff 	mov.w	r0, #4294967295
 800a3a2:	601a      	str	r2, [r3, #0]
 800a3a4:	4770      	bx	lr
 800a3a6:	2001      	movs	r0, #1
 800a3a8:	700a      	strb	r2, [r1, #0]
 800a3aa:	4770      	bx	lr

0800a3ac <fiprintf>:
 800a3ac:	b40e      	push	{r1, r2, r3}
 800a3ae:	b503      	push	{r0, r1, lr}
 800a3b0:	4601      	mov	r1, r0
 800a3b2:	ab03      	add	r3, sp, #12
 800a3b4:	4805      	ldr	r0, [pc, #20]	@ (800a3cc <fiprintf+0x20>)
 800a3b6:	f853 2b04 	ldr.w	r2, [r3], #4
 800a3ba:	6800      	ldr	r0, [r0, #0]
 800a3bc:	9301      	str	r3, [sp, #4]
 800a3be:	f7ff f975 	bl	80096ac <_vfiprintf_r>
 800a3c2:	b002      	add	sp, #8
 800a3c4:	f85d eb04 	ldr.w	lr, [sp], #4
 800a3c8:	b003      	add	sp, #12
 800a3ca:	4770      	bx	lr
 800a3cc:	20000018 	.word	0x20000018

0800a3d0 <abort>:
 800a3d0:	2006      	movs	r0, #6
 800a3d2:	b508      	push	{r3, lr}
 800a3d4:	f000 f834 	bl	800a440 <raise>
 800a3d8:	2001      	movs	r0, #1
 800a3da:	f7f7 fabe 	bl	800195a <_exit>

0800a3de <_malloc_usable_size_r>:
 800a3de:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a3e2:	1f18      	subs	r0, r3, #4
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	bfbc      	itt	lt
 800a3e8:	580b      	ldrlt	r3, [r1, r0]
 800a3ea:	18c0      	addlt	r0, r0, r3
 800a3ec:	4770      	bx	lr

0800a3ee <_raise_r>:
 800a3ee:	291f      	cmp	r1, #31
 800a3f0:	b538      	push	{r3, r4, r5, lr}
 800a3f2:	4605      	mov	r5, r0
 800a3f4:	460c      	mov	r4, r1
 800a3f6:	d904      	bls.n	800a402 <_raise_r+0x14>
 800a3f8:	2316      	movs	r3, #22
 800a3fa:	6003      	str	r3, [r0, #0]
 800a3fc:	f04f 30ff 	mov.w	r0, #4294967295
 800a400:	bd38      	pop	{r3, r4, r5, pc}
 800a402:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a404:	b112      	cbz	r2, 800a40c <_raise_r+0x1e>
 800a406:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a40a:	b94b      	cbnz	r3, 800a420 <_raise_r+0x32>
 800a40c:	4628      	mov	r0, r5
 800a40e:	f000 f831 	bl	800a474 <_getpid_r>
 800a412:	4622      	mov	r2, r4
 800a414:	4601      	mov	r1, r0
 800a416:	4628      	mov	r0, r5
 800a418:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a41c:	f000 b818 	b.w	800a450 <_kill_r>
 800a420:	2b01      	cmp	r3, #1
 800a422:	d00a      	beq.n	800a43a <_raise_r+0x4c>
 800a424:	1c59      	adds	r1, r3, #1
 800a426:	d103      	bne.n	800a430 <_raise_r+0x42>
 800a428:	2316      	movs	r3, #22
 800a42a:	6003      	str	r3, [r0, #0]
 800a42c:	2001      	movs	r0, #1
 800a42e:	e7e7      	b.n	800a400 <_raise_r+0x12>
 800a430:	2100      	movs	r1, #0
 800a432:	4620      	mov	r0, r4
 800a434:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a438:	4798      	blx	r3
 800a43a:	2000      	movs	r0, #0
 800a43c:	e7e0      	b.n	800a400 <_raise_r+0x12>
	...

0800a440 <raise>:
 800a440:	4b02      	ldr	r3, [pc, #8]	@ (800a44c <raise+0xc>)
 800a442:	4601      	mov	r1, r0
 800a444:	6818      	ldr	r0, [r3, #0]
 800a446:	f7ff bfd2 	b.w	800a3ee <_raise_r>
 800a44a:	bf00      	nop
 800a44c:	20000018 	.word	0x20000018

0800a450 <_kill_r>:
 800a450:	b538      	push	{r3, r4, r5, lr}
 800a452:	2300      	movs	r3, #0
 800a454:	4d06      	ldr	r5, [pc, #24]	@ (800a470 <_kill_r+0x20>)
 800a456:	4604      	mov	r4, r0
 800a458:	4608      	mov	r0, r1
 800a45a:	4611      	mov	r1, r2
 800a45c:	602b      	str	r3, [r5, #0]
 800a45e:	f7f7 fa6c 	bl	800193a <_kill>
 800a462:	1c43      	adds	r3, r0, #1
 800a464:	d102      	bne.n	800a46c <_kill_r+0x1c>
 800a466:	682b      	ldr	r3, [r5, #0]
 800a468:	b103      	cbz	r3, 800a46c <_kill_r+0x1c>
 800a46a:	6023      	str	r3, [r4, #0]
 800a46c:	bd38      	pop	{r3, r4, r5, pc}
 800a46e:	bf00      	nop
 800a470:	20000560 	.word	0x20000560

0800a474 <_getpid_r>:
 800a474:	f7f7 ba5a 	b.w	800192c <_getpid>

0800a478 <_init>:
 800a478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a47a:	bf00      	nop
 800a47c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a47e:	bc08      	pop	{r3}
 800a480:	469e      	mov	lr, r3
 800a482:	4770      	bx	lr

0800a484 <_fini>:
 800a484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a486:	bf00      	nop
 800a488:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a48a:	bc08      	pop	{r3}
 800a48c:	469e      	mov	lr, r3
 800a48e:	4770      	bx	lr
