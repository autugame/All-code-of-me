
26_PWR_Stop.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000054fc  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e4  08005608  08005608  00006608  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080057ec  080057ec  00007068  2**0
                  CONTENTS
  4 .ARM          00000000  080057ec  080057ec  00007068  2**0
                  CONTENTS
  5 .preinit_array 00000000  080057ec  080057ec  00007068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080057ec  080057ec  000067ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080057f0  080057f0  000067f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080057f4  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000036c  20000068  0800585c  00007068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003d4  0800585c  000073d4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00007068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000df33  00000000  00000000  00007091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d7b  00000000  00000000  00014fc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000de0  00000000  00000000  00017d40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a9e  00000000  00000000  00018b20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019b44  00000000  00000000  000195be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001449d  00000000  00000000  00033102  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00088d6e  00000000  00000000  0004759f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d030d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f10  00000000  00000000  000d0350  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004a  00000000  00000000  000d4260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	080055f0 	.word	0x080055f0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	080055f0 	.word	0x080055f0

0800014c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000152:	4b0c      	ldr	r3, [pc, #48]	@ (8000184 <MX_DMA_Init+0x38>)
 8000154:	695b      	ldr	r3, [r3, #20]
 8000156:	4a0b      	ldr	r2, [pc, #44]	@ (8000184 <MX_DMA_Init+0x38>)
 8000158:	f043 0301 	orr.w	r3, r3, #1
 800015c:	6153      	str	r3, [r2, #20]
 800015e:	4b09      	ldr	r3, [pc, #36]	@ (8000184 <MX_DMA_Init+0x38>)
 8000160:	695b      	ldr	r3, [r3, #20]
 8000162:	f003 0301 	and.w	r3, r3, #1
 8000166:	607b      	str	r3, [r7, #4]
 8000168:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800016a:	2200      	movs	r2, #0
 800016c:	2100      	movs	r1, #0
 800016e:	200f      	movs	r0, #15
 8000170:	f000 ffc5 	bl	80010fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000174:	200f      	movs	r0, #15
 8000176:	f000 ffde 	bl	8001136 <HAL_NVIC_EnableIRQ>

}
 800017a:	bf00      	nop
 800017c:	3708      	adds	r7, #8
 800017e:	46bd      	mov	sp, r7
 8000180:	bd80      	pop	{r7, pc}
 8000182:	bf00      	nop
 8000184:	40021000 	.word	0x40021000

08000188 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000188:	b580      	push	{r7, lr}
 800018a:	b088      	sub	sp, #32
 800018c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800018e:	f107 0310 	add.w	r3, r7, #16
 8000192:	2200      	movs	r2, #0
 8000194:	601a      	str	r2, [r3, #0]
 8000196:	605a      	str	r2, [r3, #4]
 8000198:	609a      	str	r2, [r3, #8]
 800019a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800019c:	4b3b      	ldr	r3, [pc, #236]	@ (800028c <MX_GPIO_Init+0x104>)
 800019e:	699b      	ldr	r3, [r3, #24]
 80001a0:	4a3a      	ldr	r2, [pc, #232]	@ (800028c <MX_GPIO_Init+0x104>)
 80001a2:	f043 0320 	orr.w	r3, r3, #32
 80001a6:	6193      	str	r3, [r2, #24]
 80001a8:	4b38      	ldr	r3, [pc, #224]	@ (800028c <MX_GPIO_Init+0x104>)
 80001aa:	699b      	ldr	r3, [r3, #24]
 80001ac:	f003 0320 	and.w	r3, r3, #32
 80001b0:	60fb      	str	r3, [r7, #12]
 80001b2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80001b4:	4b35      	ldr	r3, [pc, #212]	@ (800028c <MX_GPIO_Init+0x104>)
 80001b6:	699b      	ldr	r3, [r3, #24]
 80001b8:	4a34      	ldr	r2, [pc, #208]	@ (800028c <MX_GPIO_Init+0x104>)
 80001ba:	f043 0304 	orr.w	r3, r3, #4
 80001be:	6193      	str	r3, [r2, #24]
 80001c0:	4b32      	ldr	r3, [pc, #200]	@ (800028c <MX_GPIO_Init+0x104>)
 80001c2:	699b      	ldr	r3, [r3, #24]
 80001c4:	f003 0304 	and.w	r3, r3, #4
 80001c8:	60bb      	str	r3, [r7, #8]
 80001ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80001cc:	4b2f      	ldr	r3, [pc, #188]	@ (800028c <MX_GPIO_Init+0x104>)
 80001ce:	699b      	ldr	r3, [r3, #24]
 80001d0:	4a2e      	ldr	r2, [pc, #184]	@ (800028c <MX_GPIO_Init+0x104>)
 80001d2:	f043 0308 	orr.w	r3, r3, #8
 80001d6:	6193      	str	r3, [r2, #24]
 80001d8:	4b2c      	ldr	r3, [pc, #176]	@ (800028c <MX_GPIO_Init+0x104>)
 80001da:	699b      	ldr	r3, [r3, #24]
 80001dc:	f003 0308 	and.w	r3, r3, #8
 80001e0:	607b      	str	r3, [r7, #4]
 80001e2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 80001e4:	2200      	movs	r2, #0
 80001e6:	2106      	movs	r1, #6
 80001e8:	4829      	ldr	r0, [pc, #164]	@ (8000290 <MX_GPIO_Init+0x108>)
 80001ea:	f001 fbe5 	bl	80019b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 80001ee:	2201      	movs	r2, #1
 80001f0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80001f4:	4826      	ldr	r0, [pc, #152]	@ (8000290 <MX_GPIO_Init+0x108>)
 80001f6:	f001 fbdf 	bl	80019b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA1 PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 80001fa:	2306      	movs	r3, #6
 80001fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80001fe:	2301      	movs	r3, #1
 8000200:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000202:	2300      	movs	r3, #0
 8000204:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000206:	2302      	movs	r3, #2
 8000208:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800020a:	f107 0310 	add.w	r3, r7, #16
 800020e:	4619      	mov	r1, r3
 8000210:	481f      	ldr	r0, [pc, #124]	@ (8000290 <MX_GPIO_Init+0x108>)
 8000212:	f001 fa4d 	bl	80016b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000216:	2320      	movs	r3, #32
 8000218:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800021a:	4b1e      	ldr	r3, [pc, #120]	@ (8000294 <MX_GPIO_Init+0x10c>)
 800021c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800021e:	2301      	movs	r3, #1
 8000220:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000222:	f107 0310 	add.w	r3, r7, #16
 8000226:	4619      	mov	r1, r3
 8000228:	4819      	ldr	r0, [pc, #100]	@ (8000290 <MX_GPIO_Init+0x108>)
 800022a:	f001 fa41 	bl	80016b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800022e:	2301      	movs	r3, #1
 8000230:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000232:	4b18      	ldr	r3, [pc, #96]	@ (8000294 <MX_GPIO_Init+0x10c>)
 8000234:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000236:	2301      	movs	r3, #1
 8000238:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800023a:	f107 0310 	add.w	r3, r7, #16
 800023e:	4619      	mov	r1, r3
 8000240:	4815      	ldr	r0, [pc, #84]	@ (8000298 <MX_GPIO_Init+0x110>)
 8000242:	f001 fa35 	bl	80016b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000246:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800024a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800024c:	2311      	movs	r3, #17
 800024e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000250:	2300      	movs	r3, #0
 8000252:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000254:	2302      	movs	r3, #2
 8000256:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000258:	f107 0310 	add.w	r3, r7, #16
 800025c:	4619      	mov	r1, r3
 800025e:	480c      	ldr	r0, [pc, #48]	@ (8000290 <MX_GPIO_Init+0x108>)
 8000260:	f001 fa26 	bl	80016b0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000264:	2200      	movs	r2, #0
 8000266:	2100      	movs	r1, #0
 8000268:	2006      	movs	r0, #6
 800026a:	f000 ff48 	bl	80010fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800026e:	2006      	movs	r0, #6
 8000270:	f000 ff61 	bl	8001136 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000274:	2200      	movs	r2, #0
 8000276:	2100      	movs	r1, #0
 8000278:	2017      	movs	r0, #23
 800027a:	f000 ff40 	bl	80010fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800027e:	2017      	movs	r0, #23
 8000280:	f000 ff59 	bl	8001136 <HAL_NVIC_EnableIRQ>

}
 8000284:	bf00      	nop
 8000286:	3720      	adds	r7, #32
 8000288:	46bd      	mov	sp, r7
 800028a:	bd80      	pop	{r7, pc}
 800028c:	40021000 	.word	0x40021000
 8000290:	40010800 	.word	0x40010800
 8000294:	10210000 	.word	0x10210000
 8000298:	40010c00 	.word	0x40010c00

0800029c <LED_Control>:

/* USER CODE BEGIN 2 */
void LED_Control(uint8_t device, uint8_t cmd)
{
 800029c:	b580      	push	{r7, lr}
 800029e:	b082      	sub	sp, #8
 80002a0:	af00      	add	r7, sp, #0
 80002a2:	4603      	mov	r3, r0
 80002a4:	460a      	mov	r2, r1
 80002a6:	71fb      	strb	r3, [r7, #7]
 80002a8:	4613      	mov	r3, r2
 80002aa:	71bb      	strb	r3, [r7, #6]
	if (device == LED1)
 80002ac:	79fb      	ldrb	r3, [r7, #7]
 80002ae:	2b01      	cmp	r3, #1
 80002b0:	d111      	bne.n	80002d6 <LED_Control+0x3a>
	{
		if (cmd == ON)
 80002b2:	79bb      	ldrb	r3, [r7, #6]
 80002b4:	2b01      	cmp	r3, #1
 80002b6:	d105      	bne.n	80002c4 <LED_Control+0x28>
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 80002b8:	2201      	movs	r2, #1
 80002ba:	2102      	movs	r1, #2
 80002bc:	4812      	ldr	r0, [pc, #72]	@ (8000308 <LED_Control+0x6c>)
 80002be:	f001 fb7b 	bl	80019b8 <HAL_GPIO_WritePin>
		else if (cmd == OFF)
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
		}
	}
}
 80002c2:	e01c      	b.n	80002fe <LED_Control+0x62>
		else if (cmd == OFF)
 80002c4:	79bb      	ldrb	r3, [r7, #6]
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	d119      	bne.n	80002fe <LED_Control+0x62>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 80002ca:	2200      	movs	r2, #0
 80002cc:	2102      	movs	r1, #2
 80002ce:	480e      	ldr	r0, [pc, #56]	@ (8000308 <LED_Control+0x6c>)
 80002d0:	f001 fb72 	bl	80019b8 <HAL_GPIO_WritePin>
}
 80002d4:	e013      	b.n	80002fe <LED_Control+0x62>
	else if (device == LED2)
 80002d6:	79fb      	ldrb	r3, [r7, #7]
 80002d8:	2b02      	cmp	r3, #2
 80002da:	d110      	bne.n	80002fe <LED_Control+0x62>
		if (cmd == ON)
 80002dc:	79bb      	ldrb	r3, [r7, #6]
 80002de:	2b01      	cmp	r3, #1
 80002e0:	d105      	bne.n	80002ee <LED_Control+0x52>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 80002e2:	2201      	movs	r2, #1
 80002e4:	2104      	movs	r1, #4
 80002e6:	4808      	ldr	r0, [pc, #32]	@ (8000308 <LED_Control+0x6c>)
 80002e8:	f001 fb66 	bl	80019b8 <HAL_GPIO_WritePin>
}
 80002ec:	e007      	b.n	80002fe <LED_Control+0x62>
		else if (cmd == OFF)
 80002ee:	79bb      	ldrb	r3, [r7, #6]
 80002f0:	2b00      	cmp	r3, #0
 80002f2:	d104      	bne.n	80002fe <LED_Control+0x62>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 80002f4:	2200      	movs	r2, #0
 80002f6:	2104      	movs	r1, #4
 80002f8:	4803      	ldr	r0, [pc, #12]	@ (8000308 <LED_Control+0x6c>)
 80002fa:	f001 fb5d 	bl	80019b8 <HAL_GPIO_WritePin>
}
 80002fe:	bf00      	nop
 8000300:	3708      	adds	r7, #8
 8000302:	46bd      	mov	sp, r7
 8000304:	bd80      	pop	{r7, pc}
 8000306:	bf00      	nop
 8000308:	40010800 	.word	0x40010800

0800030c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800030c:	b580      	push	{r7, lr}
 800030e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000310:	4b12      	ldr	r3, [pc, #72]	@ (800035c <MX_I2C1_Init+0x50>)
 8000312:	4a13      	ldr	r2, [pc, #76]	@ (8000360 <MX_I2C1_Init+0x54>)
 8000314:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000316:	4b11      	ldr	r3, [pc, #68]	@ (800035c <MX_I2C1_Init+0x50>)
 8000318:	4a12      	ldr	r2, [pc, #72]	@ (8000364 <MX_I2C1_Init+0x58>)
 800031a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800031c:	4b0f      	ldr	r3, [pc, #60]	@ (800035c <MX_I2C1_Init+0x50>)
 800031e:	2200      	movs	r2, #0
 8000320:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000322:	4b0e      	ldr	r3, [pc, #56]	@ (800035c <MX_I2C1_Init+0x50>)
 8000324:	2200      	movs	r2, #0
 8000326:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000328:	4b0c      	ldr	r3, [pc, #48]	@ (800035c <MX_I2C1_Init+0x50>)
 800032a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800032e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000330:	4b0a      	ldr	r3, [pc, #40]	@ (800035c <MX_I2C1_Init+0x50>)
 8000332:	2200      	movs	r2, #0
 8000334:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000336:	4b09      	ldr	r3, [pc, #36]	@ (800035c <MX_I2C1_Init+0x50>)
 8000338:	2200      	movs	r2, #0
 800033a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800033c:	4b07      	ldr	r3, [pc, #28]	@ (800035c <MX_I2C1_Init+0x50>)
 800033e:	2200      	movs	r2, #0
 8000340:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000342:	4b06      	ldr	r3, [pc, #24]	@ (800035c <MX_I2C1_Init+0x50>)
 8000344:	2200      	movs	r2, #0
 8000346:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000348:	4804      	ldr	r0, [pc, #16]	@ (800035c <MX_I2C1_Init+0x50>)
 800034a:	f001 fb65 	bl	8001a18 <HAL_I2C_Init>
 800034e:	4603      	mov	r3, r0
 8000350:	2b00      	cmp	r3, #0
 8000352:	d001      	beq.n	8000358 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000354:	f000 f93d 	bl	80005d2 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000358:	bf00      	nop
 800035a:	bd80      	pop	{r7, pc}
 800035c:	20000084 	.word	0x20000084
 8000360:	40005400 	.word	0x40005400
 8000364:	000186a0 	.word	0x000186a0

08000368 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	b08a      	sub	sp, #40	@ 0x28
 800036c:	af00      	add	r7, sp, #0
 800036e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000370:	f107 0314 	add.w	r3, r7, #20
 8000374:	2200      	movs	r2, #0
 8000376:	601a      	str	r2, [r3, #0]
 8000378:	605a      	str	r2, [r3, #4]
 800037a:	609a      	str	r2, [r3, #8]
 800037c:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	681b      	ldr	r3, [r3, #0]
 8000382:	4a1d      	ldr	r2, [pc, #116]	@ (80003f8 <HAL_I2C_MspInit+0x90>)
 8000384:	4293      	cmp	r3, r2
 8000386:	d132      	bne.n	80003ee <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000388:	4b1c      	ldr	r3, [pc, #112]	@ (80003fc <HAL_I2C_MspInit+0x94>)
 800038a:	699b      	ldr	r3, [r3, #24]
 800038c:	4a1b      	ldr	r2, [pc, #108]	@ (80003fc <HAL_I2C_MspInit+0x94>)
 800038e:	f043 0308 	orr.w	r3, r3, #8
 8000392:	6193      	str	r3, [r2, #24]
 8000394:	4b19      	ldr	r3, [pc, #100]	@ (80003fc <HAL_I2C_MspInit+0x94>)
 8000396:	699b      	ldr	r3, [r3, #24]
 8000398:	f003 0308 	and.w	r3, r3, #8
 800039c:	613b      	str	r3, [r7, #16]
 800039e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80003a0:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80003a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80003a6:	2312      	movs	r3, #18
 80003a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80003aa:	2303      	movs	r3, #3
 80003ac:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003ae:	f107 0314 	add.w	r3, r7, #20
 80003b2:	4619      	mov	r1, r3
 80003b4:	4812      	ldr	r0, [pc, #72]	@ (8000400 <HAL_I2C_MspInit+0x98>)
 80003b6:	f001 f97b 	bl	80016b0 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 80003ba:	4b12      	ldr	r3, [pc, #72]	@ (8000404 <HAL_I2C_MspInit+0x9c>)
 80003bc:	685b      	ldr	r3, [r3, #4]
 80003be:	627b      	str	r3, [r7, #36]	@ 0x24
 80003c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80003c2:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 80003c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80003c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80003ca:	f043 0302 	orr.w	r3, r3, #2
 80003ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80003d0:	4a0c      	ldr	r2, [pc, #48]	@ (8000404 <HAL_I2C_MspInit+0x9c>)
 80003d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80003d4:	6053      	str	r3, [r2, #4]

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80003d6:	4b09      	ldr	r3, [pc, #36]	@ (80003fc <HAL_I2C_MspInit+0x94>)
 80003d8:	69db      	ldr	r3, [r3, #28]
 80003da:	4a08      	ldr	r2, [pc, #32]	@ (80003fc <HAL_I2C_MspInit+0x94>)
 80003dc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80003e0:	61d3      	str	r3, [r2, #28]
 80003e2:	4b06      	ldr	r3, [pc, #24]	@ (80003fc <HAL_I2C_MspInit+0x94>)
 80003e4:	69db      	ldr	r3, [r3, #28]
 80003e6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80003ea:	60fb      	str	r3, [r7, #12]
 80003ec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80003ee:	bf00      	nop
 80003f0:	3728      	adds	r7, #40	@ 0x28
 80003f2:	46bd      	mov	sp, r7
 80003f4:	bd80      	pop	{r7, pc}
 80003f6:	bf00      	nop
 80003f8:	40005400 	.word	0x40005400
 80003fc:	40021000 	.word	0x40021000
 8000400:	40010c00 	.word	0x40010c00
 8000404:	40010000 	.word	0x40010000

08000408 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	b088      	sub	sp, #32
 800040c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800040e:	f000 fcfd 	bl	8000e0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000412:	f000 f881 	bl	8000518 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000416:	f7ff feb7 	bl	8000188 <MX_GPIO_Init>
  MX_DMA_Init();
 800041a:	f7ff fe97 	bl	800014c <MX_DMA_Init>
  MX_USART1_UART_Init();
 800041e:	f000 fc15 	bl	8000c4c <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8000422:	f7ff ff73 	bl	800030c <MX_I2C1_Init>
  MX_RTC_Init();
 8000426:	f000 f94f 	bl	80006c8 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  //HAL_UART_Receive_IT(&huart1, RX1_Buffer, 4);
  //HAL_UART_Receive_DMA(&huart1, RX1_Buffer, 1);
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);
 800042a:	4b30      	ldr	r3, [pc, #192]	@ (80004ec <main+0xe4>)
 800042c:	681b      	ldr	r3, [r3, #0]
 800042e:	68da      	ldr	r2, [r3, #12]
 8000430:	4b2e      	ldr	r3, [pc, #184]	@ (80004ec <main+0xe4>)
 8000432:	681b      	ldr	r3, [r3, #0]
 8000434:	f042 0210 	orr.w	r2, r2, #16
 8000438:	60da      	str	r2, [r3, #12]
  HAL_UART_Receive_DMA(&huart1, RX1_Buffer, DMA_BUF_SIZE);
 800043a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800043e:	492c      	ldr	r1, [pc, #176]	@ (80004f0 <main+0xe8>)
 8000440:	482a      	ldr	r0, [pc, #168]	@ (80004ec <main+0xe4>)
 8000442:	f003 f9ec 	bl	800381e <HAL_UART_Receive_DMA>
  printf("The system has been initialized!\n");
 8000446:	482b      	ldr	r0, [pc, #172]	@ (80004f4 <main+0xec>)
 8000448:	f004 fa30 	bl	80048ac <puts>
  OLED_Init();
 800044c:	f000 f8e0 	bl	8000610 <OLED_Init>
  printf("The OLED has been initialized!\n");
 8000450:	4829      	ldr	r0, [pc, #164]	@ (80004f8 <main+0xf0>)
 8000452:	f004 fa2b 	bl	80048ac <puts>
  //OLED_Test();
  //printf("The IWDG has been initialized!\n");
  printf("The WWDG has been initialized!\n");
 8000456:	4829      	ldr	r0, [pc, #164]	@ (80004fc <main+0xf4>)
 8000458:	f004 fa28 	bl	80048ac <puts>
  printf("The PWR sleep has been initialized!\n");
 800045c:	4828      	ldr	r0, [pc, #160]	@ (8000500 <main+0xf8>)
 800045e:	f004 fa25 	bl	80048ac <puts>
	  //HAL_Delay(1000);
	  //RTC_Test();
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  printf("The system is running!\n");
 8000462:	4828      	ldr	r0, [pc, #160]	@ (8000504 <main+0xfc>)
 8000464:	f004 fa22 	bl	80048ac <puts>
	  LED_Control(LED1, ON);
 8000468:	2101      	movs	r1, #1
 800046a:	2001      	movs	r0, #1
 800046c:	f7ff ff16 	bl	800029c <LED_Control>
	  HAL_Delay(2000);
 8000470:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000474:	f000 fd2c 	bl	8000ed0 <HAL_Delay>
	  LED_Control(LED1, OFF);
 8000478:	2100      	movs	r1, #0
 800047a:	2001      	movs	r0, #1
 800047c:	f7ff ff0e 	bl	800029c <LED_Control>

	  LED_Control(LED2, ON);
 8000480:	2101      	movs	r1, #1
 8000482:	2002      	movs	r0, #2
 8000484:	f7ff ff0a 	bl	800029c <LED_Control>
	  HAL_SuspendTick();
 8000488:	f000 fd46 	bl	8000f18 <HAL_SuspendTick>
	  printf("The system is sleeping!\n");
 800048c:	481e      	ldr	r0, [pc, #120]	@ (8000508 <main+0x100>)
 800048e:	f004 fa0d 	bl	80048ac <puts>
	  HAL_PWR_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8000492:	2101      	movs	r1, #1
 8000494:	2000      	movs	r0, #0
 8000496:	f001 ff7f 	bl	8002398 <HAL_PWR_EnterSTOPMode>

	  SystemClock_Config();
 800049a:	f000 f83d 	bl	8000518 <SystemClock_Config>
	  LED_Control(LED2, OFF);
 800049e:	2100      	movs	r1, #0
 80004a0:	2002      	movs	r0, #2
 80004a2:	f7ff fefb 	bl	800029c <LED_Control>
	  HAL_ResumeTick();
 80004a6:	f000 fd45 	bl	8000f34 <HAL_ResumeTick>
	  printf("The system is awakened!\n");
 80004aa:	4818      	ldr	r0, [pc, #96]	@ (800050c <main+0x104>)
 80004ac:	f004 f9fe 	bl	80048ac <puts>

	  uint32_t SYSCLK_Frequency = HAL_RCC_GetSysClockFreq();
 80004b0:	f002 fb10 	bl	8002ad4 <HAL_RCC_GetSysClockFreq>
 80004b4:	6178      	str	r0, [r7, #20]
	  uint32_t HCLK_Frequency = HAL_RCC_GetHCLKFreq();
 80004b6:	f002 fb61 	bl	8002b7c <HAL_RCC_GetHCLKFreq>
 80004ba:	6138      	str	r0, [r7, #16]
	  uint32_t PCLK1_Frequency = HAL_RCC_GetPCLK1Freq();
 80004bc:	f002 fb68 	bl	8002b90 <HAL_RCC_GetPCLK1Freq>
 80004c0:	60f8      	str	r0, [r7, #12]
	  uint32_t PCLK2_Frequency = HAL_RCC_GetPCLK2Freq();
 80004c2:	f002 fb79 	bl	8002bb8 <HAL_RCC_GetPCLK2Freq>
 80004c6:	60b8      	str	r0, [r7, #8]
	  uint32_t SYSCLK_Source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80004c8:	4b11      	ldr	r3, [pc, #68]	@ (8000510 <main+0x108>)
 80004ca:	685b      	ldr	r3, [r3, #4]
 80004cc:	f003 030c 	and.w	r3, r3, #12
 80004d0:	607b      	str	r3, [r7, #4]
	  printf("SYSCLK:%ld, \nHCLK:%ld, \nPCLK1:%ld, \nPCLK2:%ld, \nSource:%ld (0 HSI, 8 PLLCLK)\n", SYSCLK_Frequency, HCLK_Frequency, PCLK1_Frequency, PCLK2_Frequency, SYSCLK_Source);
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	9301      	str	r3, [sp, #4]
 80004d6:	68bb      	ldr	r3, [r7, #8]
 80004d8:	9300      	str	r3, [sp, #0]
 80004da:	68fb      	ldr	r3, [r7, #12]
 80004dc:	693a      	ldr	r2, [r7, #16]
 80004de:	6979      	ldr	r1, [r7, #20]
 80004e0:	480c      	ldr	r0, [pc, #48]	@ (8000514 <main+0x10c>)
 80004e2:	f004 f973 	bl	80047cc <iprintf>
  {
 80004e6:	bf00      	nop
 80004e8:	e7bb      	b.n	8000462 <main+0x5a>
 80004ea:	bf00      	nop
 80004ec:	200001f8 	.word	0x200001f8
 80004f0:	200000d8 	.word	0x200000d8
 80004f4:	08005608 	.word	0x08005608
 80004f8:	0800562c 	.word	0x0800562c
 80004fc:	0800564c 	.word	0x0800564c
 8000500:	0800566c 	.word	0x0800566c
 8000504:	08005690 	.word	0x08005690
 8000508:	080056a8 	.word	0x080056a8
 800050c:	080056c0 	.word	0x080056c0
 8000510:	40021000 	.word	0x40021000
 8000514:	080056d8 	.word	0x080056d8

08000518 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b094      	sub	sp, #80	@ 0x50
 800051c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800051e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000522:	2228      	movs	r2, #40	@ 0x28
 8000524:	2100      	movs	r1, #0
 8000526:	4618      	mov	r0, r3
 8000528:	f004 faa0 	bl	8004a6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800052c:	f107 0314 	add.w	r3, r7, #20
 8000530:	2200      	movs	r2, #0
 8000532:	601a      	str	r2, [r3, #0]
 8000534:	605a      	str	r2, [r3, #4]
 8000536:	609a      	str	r2, [r3, #8]
 8000538:	60da      	str	r2, [r3, #12]
 800053a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800053c:	1d3b      	adds	r3, r7, #4
 800053e:	2200      	movs	r2, #0
 8000540:	601a      	str	r2, [r3, #0]
 8000542:	605a      	str	r2, [r3, #4]
 8000544:	609a      	str	r2, [r3, #8]
 8000546:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000548:	2309      	movs	r3, #9
 800054a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800054c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000550:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000552:	2300      	movs	r3, #0
 8000554:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000556:	2301      	movs	r3, #1
 8000558:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800055a:	2301      	movs	r3, #1
 800055c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800055e:	2302      	movs	r3, #2
 8000560:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000562:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000566:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000568:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800056c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800056e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000572:	4618      	mov	r0, r3
 8000574:	f001 ff42 	bl	80023fc <HAL_RCC_OscConfig>
 8000578:	4603      	mov	r3, r0
 800057a:	2b00      	cmp	r3, #0
 800057c:	d001      	beq.n	8000582 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800057e:	f000 f828 	bl	80005d2 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000582:	230f      	movs	r3, #15
 8000584:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000586:	2302      	movs	r3, #2
 8000588:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800058a:	2300      	movs	r3, #0
 800058c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800058e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000592:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000594:	2300      	movs	r3, #0
 8000596:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000598:	f107 0314 	add.w	r3, r7, #20
 800059c:	2102      	movs	r1, #2
 800059e:	4618      	mov	r0, r3
 80005a0:	f002 f9ae 	bl	8002900 <HAL_RCC_ClockConfig>
 80005a4:	4603      	mov	r3, r0
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d001      	beq.n	80005ae <SystemClock_Config+0x96>
  {
    Error_Handler();
 80005aa:	f000 f812 	bl	80005d2 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80005ae:	2301      	movs	r3, #1
 80005b0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80005b2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80005b6:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005b8:	1d3b      	adds	r3, r7, #4
 80005ba:	4618      	mov	r0, r3
 80005bc:	f002 fb2e 	bl	8002c1c <HAL_RCCEx_PeriphCLKConfig>
 80005c0:	4603      	mov	r3, r0
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d001      	beq.n	80005ca <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80005c6:	f000 f804 	bl	80005d2 <Error_Handler>
  }
}
 80005ca:	bf00      	nop
 80005cc:	3750      	adds	r7, #80	@ 0x50
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}

080005d2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005d2:	b480      	push	{r7}
 80005d4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005d6:	b672      	cpsid	i
}
 80005d8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005da:	bf00      	nop
 80005dc:	e7fd      	b.n	80005da <Error_Handler+0x8>
	...

080005e0 <WriteCmd>:
#include "oled.h"
#include "codetab.h"

void WriteCmd(unsigned char I2C_Command)//写命令
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b086      	sub	sp, #24
 80005e4:	af04      	add	r7, sp, #16
 80005e6:	4603      	mov	r3, r0
 80005e8:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1,OLED0561_ADD,COM,I2C_MEMADD_SIZE_8BIT,&I2C_Command,1,1000);
 80005ea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80005ee:	9302      	str	r3, [sp, #8]
 80005f0:	2301      	movs	r3, #1
 80005f2:	9301      	str	r3, [sp, #4]
 80005f4:	1dfb      	adds	r3, r7, #7
 80005f6:	9300      	str	r3, [sp, #0]
 80005f8:	2301      	movs	r3, #1
 80005fa:	2200      	movs	r2, #0
 80005fc:	2178      	movs	r1, #120	@ 0x78
 80005fe:	4803      	ldr	r0, [pc, #12]	@ (800060c <WriteCmd+0x2c>)
 8000600:	f001 fb4e 	bl	8001ca0 <HAL_I2C_Mem_Write>
}
 8000604:	bf00      	nop
 8000606:	3708      	adds	r7, #8
 8000608:	46bd      	mov	sp, r7
 800060a:	bd80      	pop	{r7, pc}
 800060c:	20000084 	.word	0x20000084

08000610 <OLED_Init>:
{
		HAL_I2C_Mem_Write(&hi2c1,OLED0561_ADD,DAT,I2C_MEMADD_SIZE_8BIT,&I2C_Data,1,1000);
}

void OLED_Init(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0
	HAL_Delay(100); //这里的延时很重要
 8000614:	2064      	movs	r0, #100	@ 0x64
 8000616:	f000 fc5b 	bl	8000ed0 <HAL_Delay>

	WriteCmd(0xAE); //display off
 800061a:	20ae      	movs	r0, #174	@ 0xae
 800061c:	f7ff ffe0 	bl	80005e0 <WriteCmd>
	WriteCmd(0x20);	//Set Memory Addressing Mode
 8000620:	2020      	movs	r0, #32
 8000622:	f7ff ffdd 	bl	80005e0 <WriteCmd>
	WriteCmd(0x10);	//00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8000626:	2010      	movs	r0, #16
 8000628:	f7ff ffda 	bl	80005e0 <WriteCmd>
	WriteCmd(0xb0);	//Set Page Start Address for Page Addressing Mode,0-7
 800062c:	20b0      	movs	r0, #176	@ 0xb0
 800062e:	f7ff ffd7 	bl	80005e0 <WriteCmd>
	WriteCmd(0xc8);	//Set COM Output Scan Direction
 8000632:	20c8      	movs	r0, #200	@ 0xc8
 8000634:	f7ff ffd4 	bl	80005e0 <WriteCmd>
	WriteCmd(0x00); //---set low column address
 8000638:	2000      	movs	r0, #0
 800063a:	f7ff ffd1 	bl	80005e0 <WriteCmd>
	WriteCmd(0x10); //---set high column address
 800063e:	2010      	movs	r0, #16
 8000640:	f7ff ffce 	bl	80005e0 <WriteCmd>
	WriteCmd(0x40); //--set start line address
 8000644:	2040      	movs	r0, #64	@ 0x40
 8000646:	f7ff ffcb 	bl	80005e0 <WriteCmd>
	WriteCmd(0x81); //--set contrast control register
 800064a:	2081      	movs	r0, #129	@ 0x81
 800064c:	f7ff ffc8 	bl	80005e0 <WriteCmd>
	WriteCmd(0xff); //亮度调节 0x00~0xff
 8000650:	20ff      	movs	r0, #255	@ 0xff
 8000652:	f7ff ffc5 	bl	80005e0 <WriteCmd>
	WriteCmd(0xa1); //--set segment re-map 0 to 127
 8000656:	20a1      	movs	r0, #161	@ 0xa1
 8000658:	f7ff ffc2 	bl	80005e0 <WriteCmd>
	WriteCmd(0xa6); //--set normal display
 800065c:	20a6      	movs	r0, #166	@ 0xa6
 800065e:	f7ff ffbf 	bl	80005e0 <WriteCmd>
	WriteCmd(0xa8); //--set multiplex ratio(1 to 64)
 8000662:	20a8      	movs	r0, #168	@ 0xa8
 8000664:	f7ff ffbc 	bl	80005e0 <WriteCmd>
	WriteCmd(0x3F); //
 8000668:	203f      	movs	r0, #63	@ 0x3f
 800066a:	f7ff ffb9 	bl	80005e0 <WriteCmd>
	WriteCmd(0xa4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800066e:	20a4      	movs	r0, #164	@ 0xa4
 8000670:	f7ff ffb6 	bl	80005e0 <WriteCmd>
	WriteCmd(0xd3); //-set display offset
 8000674:	20d3      	movs	r0, #211	@ 0xd3
 8000676:	f7ff ffb3 	bl	80005e0 <WriteCmd>
	WriteCmd(0x00); //-not offset
 800067a:	2000      	movs	r0, #0
 800067c:	f7ff ffb0 	bl	80005e0 <WriteCmd>
	WriteCmd(0xd5); //--set display clock divide ratio/oscillator frequency
 8000680:	20d5      	movs	r0, #213	@ 0xd5
 8000682:	f7ff ffad 	bl	80005e0 <WriteCmd>
	WriteCmd(0xf0); //--set divide ratio
 8000686:	20f0      	movs	r0, #240	@ 0xf0
 8000688:	f7ff ffaa 	bl	80005e0 <WriteCmd>
	WriteCmd(0xd9); //--set pre-charge period
 800068c:	20d9      	movs	r0, #217	@ 0xd9
 800068e:	f7ff ffa7 	bl	80005e0 <WriteCmd>
	WriteCmd(0x22); //
 8000692:	2022      	movs	r0, #34	@ 0x22
 8000694:	f7ff ffa4 	bl	80005e0 <WriteCmd>
	WriteCmd(0xda); //--set com pins hardware configuration
 8000698:	20da      	movs	r0, #218	@ 0xda
 800069a:	f7ff ffa1 	bl	80005e0 <WriteCmd>
	WriteCmd(0x12);
 800069e:	2012      	movs	r0, #18
 80006a0:	f7ff ff9e 	bl	80005e0 <WriteCmd>
	WriteCmd(0xdb); //--set vcomh
 80006a4:	20db      	movs	r0, #219	@ 0xdb
 80006a6:	f7ff ff9b 	bl	80005e0 <WriteCmd>
	WriteCmd(0x20); //0x20,0.77xVcc
 80006aa:	2020      	movs	r0, #32
 80006ac:	f7ff ff98 	bl	80005e0 <WriteCmd>
	WriteCmd(0x8d); //--set DC-DC enable
 80006b0:	208d      	movs	r0, #141	@ 0x8d
 80006b2:	f7ff ff95 	bl	80005e0 <WriteCmd>
	WriteCmd(0x14); //
 80006b6:	2014      	movs	r0, #20
 80006b8:	f7ff ff92 	bl	80005e0 <WriteCmd>
	WriteCmd(0xaf); //--turn on oled panel
 80006bc:	20af      	movs	r0, #175	@ 0xaf
 80006be:	f7ff ff8f 	bl	80005e0 <WriteCmd>
}
 80006c2:	bf00      	nop
 80006c4:	bd80      	pop	{r7, pc}
	...

080006c8 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b084      	sub	sp, #16
 80006cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80006ce:	f107 030c 	add.w	r3, r7, #12
 80006d2:	2100      	movs	r1, #0
 80006d4:	460a      	mov	r2, r1
 80006d6:	801a      	strh	r2, [r3, #0]
 80006d8:	460a      	mov	r2, r1
 80006da:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 80006dc:	2300      	movs	r3, #0
 80006de:	60bb      	str	r3, [r7, #8]

  /* USER CODE BEGIN RTC_Init 1 */
  __HAL_RCC_BKP_CLK_ENABLE();
 80006e0:	4b31      	ldr	r3, [pc, #196]	@ (80007a8 <MX_RTC_Init+0xe0>)
 80006e2:	69db      	ldr	r3, [r3, #28]
 80006e4:	4a30      	ldr	r2, [pc, #192]	@ (80007a8 <MX_RTC_Init+0xe0>)
 80006e6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80006ea:	61d3      	str	r3, [r2, #28]
 80006ec:	4b2e      	ldr	r3, [pc, #184]	@ (80007a8 <MX_RTC_Init+0xe0>)
 80006ee:	69db      	ldr	r3, [r3, #28]
 80006f0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80006f4:	607b      	str	r3, [r7, #4]
 80006f6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006f8:	4b2b      	ldr	r3, [pc, #172]	@ (80007a8 <MX_RTC_Init+0xe0>)
 80006fa:	69db      	ldr	r3, [r3, #28]
 80006fc:	4a2a      	ldr	r2, [pc, #168]	@ (80007a8 <MX_RTC_Init+0xe0>)
 80006fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000702:	61d3      	str	r3, [r2, #28]
 8000704:	4b28      	ldr	r3, [pc, #160]	@ (80007a8 <MX_RTC_Init+0xe0>)
 8000706:	69db      	ldr	r3, [r3, #28]
 8000708:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800070c:	603b      	str	r3, [r7, #0]
 800070e:	683b      	ldr	r3, [r7, #0]
  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000710:	4b26      	ldr	r3, [pc, #152]	@ (80007ac <MX_RTC_Init+0xe4>)
 8000712:	4a27      	ldr	r2, [pc, #156]	@ (80007b0 <MX_RTC_Init+0xe8>)
 8000714:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8000716:	4b25      	ldr	r3, [pc, #148]	@ (80007ac <MX_RTC_Init+0xe4>)
 8000718:	f04f 32ff 	mov.w	r2, #4294967295
 800071c:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_NONE;
 800071e:	4b23      	ldr	r3, [pc, #140]	@ (80007ac <MX_RTC_Init+0xe4>)
 8000720:	2200      	movs	r2, #0
 8000722:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000724:	4821      	ldr	r0, [pc, #132]	@ (80007ac <MX_RTC_Init+0xe4>)
 8000726:	f002 fbe5 	bl	8002ef4 <HAL_RTC_Init>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d001      	beq.n	8000734 <MX_RTC_Init+0x6c>
  {
    Error_Handler();
 8000730:	f7ff ff4f 	bl	80005d2 <Error_Handler>
  }

  /* USER CODE BEGIN Check_RTC_BKUP */
  if (HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR1) != 0x5051)
 8000734:	2101      	movs	r1, #1
 8000736:	481d      	ldr	r0, [pc, #116]	@ (80007ac <MX_RTC_Init+0xe4>)
 8000738:	f002 ff7a 	bl	8003630 <HAL_RTCEx_BKUPRead>
 800073c:	4603      	mov	r3, r0
 800073e:	f245 0251 	movw	r2, #20561	@ 0x5051
 8000742:	4293      	cmp	r3, r2
 8000744:	d02b      	beq.n	800079e <MX_RTC_Init+0xd6>
  {
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000746:	2300      	movs	r3, #0
 8000748:	733b      	strb	r3, [r7, #12]
  sTime.Minutes = 0x0;
 800074a:	2300      	movs	r3, #0
 800074c:	737b      	strb	r3, [r7, #13]
  sTime.Seconds = 0x0;
 800074e:	2300      	movs	r3, #0
 8000750:	73bb      	strb	r3, [r7, #14]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000752:	f107 030c 	add.w	r3, r7, #12
 8000756:	2201      	movs	r2, #1
 8000758:	4619      	mov	r1, r3
 800075a:	4814      	ldr	r0, [pc, #80]	@ (80007ac <MX_RTC_Init+0xe4>)
 800075c:	f002 fc56 	bl	800300c <HAL_RTC_SetTime>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8000766:	f7ff ff34 	bl	80005d2 <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_SATURDAY;
 800076a:	2306      	movs	r3, #6
 800076c:	723b      	strb	r3, [r7, #8]
  DateToUpdate.Month = RTC_MONTH_FEBRUARY;
 800076e:	2302      	movs	r3, #2
 8000770:	727b      	strb	r3, [r7, #9]
  DateToUpdate.Date = 0x7;
 8000772:	2307      	movs	r3, #7
 8000774:	72bb      	strb	r3, [r7, #10]
  DateToUpdate.Year = 0x25;
 8000776:	2325      	movs	r3, #37	@ 0x25
 8000778:	72fb      	strb	r3, [r7, #11]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 800077a:	f107 0308 	add.w	r3, r7, #8
 800077e:	2201      	movs	r2, #1
 8000780:	4619      	mov	r1, r3
 8000782:	480a      	ldr	r0, [pc, #40]	@ (80007ac <MX_RTC_Init+0xe4>)
 8000784:	f002 fcda 	bl	800313c <HAL_RTC_SetDate>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d001      	beq.n	8000792 <MX_RTC_Init+0xca>
  {
    Error_Handler();
 800078e:	f7ff ff20 	bl	80005d2 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */
	  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x5051);
 8000792:	f245 0251 	movw	r2, #20561	@ 0x5051
 8000796:	2101      	movs	r1, #1
 8000798:	4804      	ldr	r0, [pc, #16]	@ (80007ac <MX_RTC_Init+0xe4>)
 800079a:	f002 ff2f 	bl	80035fc <HAL_RTCEx_BKUPWrite>
  }
  /* USER CODE END RTC_Init 2 */

}
 800079e:	bf00      	nop
 80007a0:	3710      	adds	r7, #16
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	40021000 	.word	0x40021000
 80007ac:	200001dc 	.word	0x200001dc
 80007b0:	40002800 	.word	0x40002800

080007b4 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b084      	sub	sp, #16
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	4a0b      	ldr	r2, [pc, #44]	@ (80007f0 <HAL_RTC_MspInit+0x3c>)
 80007c2:	4293      	cmp	r3, r2
 80007c4:	d110      	bne.n	80007e8 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 80007c6:	f001 fddb 	bl	8002380 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 80007ca:	4b0a      	ldr	r3, [pc, #40]	@ (80007f4 <HAL_RTC_MspInit+0x40>)
 80007cc:	69db      	ldr	r3, [r3, #28]
 80007ce:	4a09      	ldr	r2, [pc, #36]	@ (80007f4 <HAL_RTC_MspInit+0x40>)
 80007d0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80007d4:	61d3      	str	r3, [r2, #28]
 80007d6:	4b07      	ldr	r3, [pc, #28]	@ (80007f4 <HAL_RTC_MspInit+0x40>)
 80007d8:	69db      	ldr	r3, [r3, #28]
 80007da:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80007de:	60fb      	str	r3, [r7, #12]
 80007e0:	68fb      	ldr	r3, [r7, #12]
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80007e2:	4b05      	ldr	r3, [pc, #20]	@ (80007f8 <HAL_RTC_MspInit+0x44>)
 80007e4:	2201      	movs	r2, #1
 80007e6:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80007e8:	bf00      	nop
 80007ea:	3710      	adds	r7, #16
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	40002800 	.word	0x40002800
 80007f4:	40021000 	.word	0x40021000
 80007f8:	4242043c 	.word	0x4242043c

080007fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007fc:	b480      	push	{r7}
 80007fe:	b085      	sub	sp, #20
 8000800:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000802:	4b15      	ldr	r3, [pc, #84]	@ (8000858 <HAL_MspInit+0x5c>)
 8000804:	699b      	ldr	r3, [r3, #24]
 8000806:	4a14      	ldr	r2, [pc, #80]	@ (8000858 <HAL_MspInit+0x5c>)
 8000808:	f043 0301 	orr.w	r3, r3, #1
 800080c:	6193      	str	r3, [r2, #24]
 800080e:	4b12      	ldr	r3, [pc, #72]	@ (8000858 <HAL_MspInit+0x5c>)
 8000810:	699b      	ldr	r3, [r3, #24]
 8000812:	f003 0301 	and.w	r3, r3, #1
 8000816:	60bb      	str	r3, [r7, #8]
 8000818:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800081a:	4b0f      	ldr	r3, [pc, #60]	@ (8000858 <HAL_MspInit+0x5c>)
 800081c:	69db      	ldr	r3, [r3, #28]
 800081e:	4a0e      	ldr	r2, [pc, #56]	@ (8000858 <HAL_MspInit+0x5c>)
 8000820:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000824:	61d3      	str	r3, [r2, #28]
 8000826:	4b0c      	ldr	r3, [pc, #48]	@ (8000858 <HAL_MspInit+0x5c>)
 8000828:	69db      	ldr	r3, [r3, #28]
 800082a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800082e:	607b      	str	r3, [r7, #4]
 8000830:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000832:	4b0a      	ldr	r3, [pc, #40]	@ (800085c <HAL_MspInit+0x60>)
 8000834:	685b      	ldr	r3, [r3, #4]
 8000836:	60fb      	str	r3, [r7, #12]
 8000838:	68fb      	ldr	r3, [r7, #12]
 800083a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800083e:	60fb      	str	r3, [r7, #12]
 8000840:	68fb      	ldr	r3, [r7, #12]
 8000842:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000846:	60fb      	str	r3, [r7, #12]
 8000848:	4a04      	ldr	r2, [pc, #16]	@ (800085c <HAL_MspInit+0x60>)
 800084a:	68fb      	ldr	r3, [r7, #12]
 800084c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800084e:	bf00      	nop
 8000850:	3714      	adds	r7, #20
 8000852:	46bd      	mov	sp, r7
 8000854:	bc80      	pop	{r7}
 8000856:	4770      	bx	lr
 8000858:	40021000 	.word	0x40021000
 800085c:	40010000 	.word	0x40010000

08000860 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000860:	b480      	push	{r7}
 8000862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000864:	bf00      	nop
 8000866:	e7fd      	b.n	8000864 <NMI_Handler+0x4>

08000868 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000868:	b480      	push	{r7}
 800086a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800086c:	bf00      	nop
 800086e:	e7fd      	b.n	800086c <HardFault_Handler+0x4>

08000870 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000874:	bf00      	nop
 8000876:	e7fd      	b.n	8000874 <MemManage_Handler+0x4>

08000878 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000878:	b480      	push	{r7}
 800087a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800087c:	bf00      	nop
 800087e:	e7fd      	b.n	800087c <BusFault_Handler+0x4>

08000880 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000880:	b480      	push	{r7}
 8000882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000884:	bf00      	nop
 8000886:	e7fd      	b.n	8000884 <UsageFault_Handler+0x4>

08000888 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800088c:	bf00      	nop
 800088e:	46bd      	mov	sp, r7
 8000890:	bc80      	pop	{r7}
 8000892:	4770      	bx	lr

08000894 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000894:	b480      	push	{r7}
 8000896:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000898:	bf00      	nop
 800089a:	46bd      	mov	sp, r7
 800089c:	bc80      	pop	{r7}
 800089e:	4770      	bx	lr

080008a0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008a4:	bf00      	nop
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bc80      	pop	{r7}
 80008aa:	4770      	bx	lr

080008ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008b0:	f000 faf2 	bl	8000e98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008b4:	bf00      	nop
 80008b6:	bd80      	pop	{r7, pc}

080008b8 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80008bc:	2001      	movs	r0, #1
 80008be:	f001 f893 	bl	80019e8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80008c2:	bf00      	nop
 80008c4:	bd80      	pop	{r7, pc}
	...

080008c8 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80008cc:	4802      	ldr	r0, [pc, #8]	@ (80008d8 <DMA1_Channel5_IRQHandler+0x10>)
 80008ce:	f000 fdbb 	bl	8001448 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80008d2:	bf00      	nop
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	20000240 	.word	0x20000240

080008dc <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 80008e0:	2020      	movs	r0, #32
 80008e2:	f001 f881 	bl	80019e8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80008e6:	bf00      	nop
 80008e8:	bd80      	pop	{r7, pc}
	...

080008ec <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80008f0:	4803      	ldr	r0, [pc, #12]	@ (8000900 <USART1_IRQHandler+0x14>)
 80008f2:	f002 ffb9 	bl	8003868 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  UART_IRQHandler(&huart1);
 80008f6:	4802      	ldr	r0, [pc, #8]	@ (8000900 <USART1_IRQHandler+0x14>)
 80008f8:	f000 f8b4 	bl	8000a64 <UART_IRQHandler>
  /* USER CODE END USART1_IRQn 1 */
}
 80008fc:	bf00      	nop
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	200001f8 	.word	0x200001f8

08000904 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 1 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b082      	sub	sp, #8
 8000908:	af00      	add	r7, sp, #0
 800090a:	4603      	mov	r3, r0
 800090c:	80fb      	strh	r3, [r7, #6]
	static uint32_t oldUWTick = 0;
	if ((uwTick - oldUWTick) < 200) return;
 800090e:	4b19      	ldr	r3, [pc, #100]	@ (8000974 <HAL_GPIO_EXTI_Callback+0x70>)
 8000910:	681a      	ldr	r2, [r3, #0]
 8000912:	4b19      	ldr	r3, [pc, #100]	@ (8000978 <HAL_GPIO_EXTI_Callback+0x74>)
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	1ad3      	subs	r3, r2, r3
 8000918:	2bc7      	cmp	r3, #199	@ 0xc7
 800091a:	d927      	bls.n	800096c <HAL_GPIO_EXTI_Callback+0x68>
	oldUWTick = uwTick;
 800091c:	4b15      	ldr	r3, [pc, #84]	@ (8000974 <HAL_GPIO_EXTI_Callback+0x70>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	4a15      	ldr	r2, [pc, #84]	@ (8000978 <HAL_GPIO_EXTI_Callback+0x74>)
 8000922:	6013      	str	r3, [r2, #0]
	if (GPIO_Pin == GPIO_PIN_5)
 8000924:	88fb      	ldrh	r3, [r7, #6]
 8000926:	2b20      	cmp	r3, #32
 8000928:	d10e      	bne.n	8000948 <HAL_GPIO_EXTI_Callback+0x44>
	{
		LED_Control(LED1, ON);
 800092a:	2101      	movs	r1, #1
 800092c:	2001      	movs	r0, #1
 800092e:	f7ff fcb5 	bl	800029c <LED_Control>
		LED_Control(LED2, ON);
 8000932:	2101      	movs	r1, #1
 8000934:	2002      	movs	r0, #2
 8000936:	f7ff fcb1 	bl	800029c <LED_Control>
		Key_Value = GPIO_PIN_5;
 800093a:	4b10      	ldr	r3, [pc, #64]	@ (800097c <HAL_GPIO_EXTI_Callback+0x78>)
 800093c:	2220      	movs	r2, #32
 800093e:	701a      	strb	r2, [r3, #0]
		printf("GPIO pin 5 has pressed\n");
 8000940:	480f      	ldr	r0, [pc, #60]	@ (8000980 <HAL_GPIO_EXTI_Callback+0x7c>)
 8000942:	f003 ffb3 	bl	80048ac <puts>
 8000946:	e012      	b.n	800096e <HAL_GPIO_EXTI_Callback+0x6a>
	}
	else if (GPIO_Pin == GPIO_PIN_0)
 8000948:	88fb      	ldrh	r3, [r7, #6]
 800094a:	2b01      	cmp	r3, #1
 800094c:	d10f      	bne.n	800096e <HAL_GPIO_EXTI_Callback+0x6a>
	{
		LED_Control(LED1, OFF);
 800094e:	2100      	movs	r1, #0
 8000950:	2001      	movs	r0, #1
 8000952:	f7ff fca3 	bl	800029c <LED_Control>
		LED_Control(LED2, OFF);
 8000956:	2100      	movs	r1, #0
 8000958:	2002      	movs	r0, #2
 800095a:	f7ff fc9f 	bl	800029c <LED_Control>
		Key_Value = GPIO_PIN_0;
 800095e:	4b07      	ldr	r3, [pc, #28]	@ (800097c <HAL_GPIO_EXTI_Callback+0x78>)
 8000960:	2201      	movs	r2, #1
 8000962:	701a      	strb	r2, [r3, #0]
		printf("GPIO pin 0 has pressed\n");
 8000964:	4807      	ldr	r0, [pc, #28]	@ (8000984 <HAL_GPIO_EXTI_Callback+0x80>)
 8000966:	f003 ffa1 	bl	80048ac <puts>
 800096a:	e000      	b.n	800096e <HAL_GPIO_EXTI_Callback+0x6a>
	if ((uwTick - oldUWTick) < 200) return;
 800096c:	bf00      	nop
	}
}
 800096e:	3708      	adds	r7, #8
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}
 8000974:	20000284 	.word	0x20000284
 8000978:	200001f0 	.word	0x200001f0
 800097c:	200001d9 	.word	0x200001d9
 8000980:	08005728 	.word	0x08005728
 8000984:	08005740 	.word	0x08005740

08000988 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b084      	sub	sp, #16
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1)
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	4a12      	ldr	r2, [pc, #72]	@ (80009e0 <HAL_UART_RxCpltCallback+0x58>)
 8000996:	4293      	cmp	r3, r2
 8000998:	d11e      	bne.n	80009d8 <HAL_UART_RxCpltCallback+0x50>
	{
		//HAL_UART_Transmit(&huart1, RX1_Buffer, 4, HAL_MAX_DELAY);
		//HAL_UART_Receive_IT(&huart1, RX1_Buffer, 4);
//		HAL_UART_Transmit_DMA(huart, RX1_Buffer, 1);
//		HAL_UART_Receive_IT(huart, RX1_Buffer, 1);
		uint8_t length = DMA_BUF_SIZE - RX1_OffSet;
 800099a:	4b12      	ldr	r3, [pc, #72]	@ (80009e4 <HAL_UART_RxCpltCallback+0x5c>)
 800099c:	781b      	ldrb	r3, [r3, #0]
 800099e:	425b      	negs	r3, r3
 80009a0:	73fb      	strb	r3, [r7, #15]
		HAL_UART_Transmit(huart, RX1_Buffer + RX1_OffSet, length, HAL_MAX_DELAY);
 80009a2:	4b10      	ldr	r3, [pc, #64]	@ (80009e4 <HAL_UART_RxCpltCallback+0x5c>)
 80009a4:	781b      	ldrb	r3, [r3, #0]
 80009a6:	461a      	mov	r2, r3
 80009a8:	4b0f      	ldr	r3, [pc, #60]	@ (80009e8 <HAL_UART_RxCpltCallback+0x60>)
 80009aa:	18d1      	adds	r1, r2, r3
 80009ac:	7bfb      	ldrb	r3, [r7, #15]
 80009ae:	b29a      	uxth	r2, r3
 80009b0:	f04f 33ff 	mov.w	r3, #4294967295
 80009b4:	6878      	ldr	r0, [r7, #4]
 80009b6:	f002 fea7 	bl	8003708 <HAL_UART_Transmit>
		printf("\n");
 80009ba:	200a      	movs	r0, #10
 80009bc:	f003 ff18 	bl	80047f0 <putchar>
		printf("RX1_OffSet=%d\n", RX1_OffSet + length);
 80009c0:	4b08      	ldr	r3, [pc, #32]	@ (80009e4 <HAL_UART_RxCpltCallback+0x5c>)
 80009c2:	781b      	ldrb	r3, [r3, #0]
 80009c4:	461a      	mov	r2, r3
 80009c6:	7bfb      	ldrb	r3, [r7, #15]
 80009c8:	4413      	add	r3, r2
 80009ca:	4619      	mov	r1, r3
 80009cc:	4807      	ldr	r0, [pc, #28]	@ (80009ec <HAL_UART_RxCpltCallback+0x64>)
 80009ce:	f003 fefd 	bl	80047cc <iprintf>
		RX1_OffSet = 0;
 80009d2:	4b04      	ldr	r3, [pc, #16]	@ (80009e4 <HAL_UART_RxCpltCallback+0x5c>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	701a      	strb	r2, [r3, #0]
	}
}
 80009d8:	bf00      	nop
 80009da:	3710      	adds	r7, #16
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	40013800 	.word	0x40013800
 80009e4:	200001d8 	.word	0x200001d8
 80009e8:	200000d8 	.word	0x200000d8
 80009ec:	08005758 	.word	0x08005758

080009f0 <HAL_UART_RxHalfCpltCallback>:

void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b084      	sub	sp, #16
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1)
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	4a15      	ldr	r2, [pc, #84]	@ (8000a54 <HAL_UART_RxHalfCpltCallback+0x64>)
 80009fe:	4293      	cmp	r3, r2
 8000a00:	d124      	bne.n	8000a4c <HAL_UART_RxHalfCpltCallback+0x5c>
	{
		uint8_t length = DMA_BUF_SIZE / 2 - RX1_OffSet;
 8000a02:	4b15      	ldr	r3, [pc, #84]	@ (8000a58 <HAL_UART_RxHalfCpltCallback+0x68>)
 8000a04:	781a      	ldrb	r2, [r3, #0]
 8000a06:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 8000a0a:	1a9b      	subs	r3, r3, r2
 8000a0c:	73fb      	strb	r3, [r7, #15]
		//printf("HLength=%d\n", length);
		HAL_UART_Transmit(huart, RX1_Buffer + RX1_OffSet, length, HAL_MAX_DELAY);
 8000a0e:	4b12      	ldr	r3, [pc, #72]	@ (8000a58 <HAL_UART_RxHalfCpltCallback+0x68>)
 8000a10:	781b      	ldrb	r3, [r3, #0]
 8000a12:	461a      	mov	r2, r3
 8000a14:	4b11      	ldr	r3, [pc, #68]	@ (8000a5c <HAL_UART_RxHalfCpltCallback+0x6c>)
 8000a16:	18d1      	adds	r1, r2, r3
 8000a18:	7bfb      	ldrb	r3, [r7, #15]
 8000a1a:	b29a      	uxth	r2, r3
 8000a1c:	f04f 33ff 	mov.w	r3, #4294967295
 8000a20:	6878      	ldr	r0, [r7, #4]
 8000a22:	f002 fe71 	bl	8003708 <HAL_UART_Transmit>
		printf("\n");
 8000a26:	200a      	movs	r0, #10
 8000a28:	f003 fee2 	bl	80047f0 <putchar>
		printf("RX1_OffSet=%d\n", RX1_OffSet + length);
 8000a2c:	4b0a      	ldr	r3, [pc, #40]	@ (8000a58 <HAL_UART_RxHalfCpltCallback+0x68>)
 8000a2e:	781b      	ldrb	r3, [r3, #0]
 8000a30:	461a      	mov	r2, r3
 8000a32:	7bfb      	ldrb	r3, [r7, #15]
 8000a34:	4413      	add	r3, r2
 8000a36:	4619      	mov	r1, r3
 8000a38:	4809      	ldr	r0, [pc, #36]	@ (8000a60 <HAL_UART_RxHalfCpltCallback+0x70>)
 8000a3a:	f003 fec7 	bl	80047cc <iprintf>
		RX1_OffSet += length;
 8000a3e:	4b06      	ldr	r3, [pc, #24]	@ (8000a58 <HAL_UART_RxHalfCpltCallback+0x68>)
 8000a40:	781a      	ldrb	r2, [r3, #0]
 8000a42:	7bfb      	ldrb	r3, [r7, #15]
 8000a44:	4413      	add	r3, r2
 8000a46:	b2da      	uxtb	r2, r3
 8000a48:	4b03      	ldr	r3, [pc, #12]	@ (8000a58 <HAL_UART_RxHalfCpltCallback+0x68>)
 8000a4a:	701a      	strb	r2, [r3, #0]
	}
}
 8000a4c:	bf00      	nop
 8000a4e:	3710      	adds	r7, #16
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	40013800 	.word	0x40013800
 8000a58:	200001d8 	.word	0x200001d8
 8000a5c:	200000d8 	.word	0x200000d8
 8000a60:	08005758 	.word	0x08005758

08000a64 <UART_IRQHandler>:

void UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b084      	sub	sp, #16
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1)
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	4a1e      	ldr	r2, [pc, #120]	@ (8000aec <UART_IRQHandler+0x88>)
 8000a72:	4293      	cmp	r3, r2
 8000a74:	d136      	bne.n	8000ae4 <UART_IRQHandler+0x80>
	{
		if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) != RESET)
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	f003 0310 	and.w	r3, r3, #16
 8000a80:	2b10      	cmp	r3, #16
 8000a82:	d12f      	bne.n	8000ae4 <UART_IRQHandler+0x80>
		{
			__HAL_UART_CLEAR_IDLEFLAG(huart);
 8000a84:	2300      	movs	r3, #0
 8000a86:	60bb      	str	r3, [r7, #8]
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	60bb      	str	r3, [r7, #8]
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	685b      	ldr	r3, [r3, #4]
 8000a96:	60bb      	str	r3, [r7, #8]
 8000a98:	68bb      	ldr	r3, [r7, #8]
			uint8_t length = DMA_BUF_SIZE - __HAL_DMA_GET_COUNTER(&hdma_usart1_rx) - RX1_OffSet;
 8000a9a:	4b15      	ldr	r3, [pc, #84]	@ (8000af0 <UART_IRQHandler+0x8c>)
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	685b      	ldr	r3, [r3, #4]
 8000aa0:	b2da      	uxtb	r2, r3
 8000aa2:	4b14      	ldr	r3, [pc, #80]	@ (8000af4 <UART_IRQHandler+0x90>)
 8000aa4:	781b      	ldrb	r3, [r3, #0]
 8000aa6:	4413      	add	r3, r2
 8000aa8:	b2db      	uxtb	r3, r3
 8000aaa:	425b      	negs	r3, r3
 8000aac:	73fb      	strb	r3, [r7, #15]
			HAL_UART_Transmit(huart, RX1_Buffer + RX1_OffSet, length, HAL_MAX_DELAY);
 8000aae:	4b11      	ldr	r3, [pc, #68]	@ (8000af4 <UART_IRQHandler+0x90>)
 8000ab0:	781b      	ldrb	r3, [r3, #0]
 8000ab2:	461a      	mov	r2, r3
 8000ab4:	4b10      	ldr	r3, [pc, #64]	@ (8000af8 <UART_IRQHandler+0x94>)
 8000ab6:	18d1      	adds	r1, r2, r3
 8000ab8:	7bfb      	ldrb	r3, [r7, #15]
 8000aba:	b29a      	uxth	r2, r3
 8000abc:	f04f 33ff 	mov.w	r3, #4294967295
 8000ac0:	6878      	ldr	r0, [r7, #4]
 8000ac2:	f002 fe21 	bl	8003708 <HAL_UART_Transmit>
			printf("\n");
 8000ac6:	200a      	movs	r0, #10
 8000ac8:	f003 fe92 	bl	80047f0 <putchar>
			printf("Idle Length=%d\n", length);
 8000acc:	7bfb      	ldrb	r3, [r7, #15]
 8000ace:	4619      	mov	r1, r3
 8000ad0:	480a      	ldr	r0, [pc, #40]	@ (8000afc <UART_IRQHandler+0x98>)
 8000ad2:	f003 fe7b 	bl	80047cc <iprintf>
			RX1_OffSet += length;
 8000ad6:	4b07      	ldr	r3, [pc, #28]	@ (8000af4 <UART_IRQHandler+0x90>)
 8000ad8:	781a      	ldrb	r2, [r3, #0]
 8000ada:	7bfb      	ldrb	r3, [r7, #15]
 8000adc:	4413      	add	r3, r2
 8000ade:	b2da      	uxtb	r2, r3
 8000ae0:	4b04      	ldr	r3, [pc, #16]	@ (8000af4 <UART_IRQHandler+0x90>)
 8000ae2:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8000ae4:	bf00      	nop
 8000ae6:	3710      	adds	r7, #16
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	40013800 	.word	0x40013800
 8000af0:	20000240 	.word	0x20000240
 8000af4:	200001d8 	.word	0x200001d8
 8000af8:	200000d8 	.word	0x200000d8
 8000afc:	08005768 	.word	0x08005768

08000b00 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b086      	sub	sp, #24
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	60f8      	str	r0, [r7, #12]
 8000b08:	60b9      	str	r1, [r7, #8]
 8000b0a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	617b      	str	r3, [r7, #20]
 8000b10:	e00a      	b.n	8000b28 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000b12:	f3af 8000 	nop.w
 8000b16:	4601      	mov	r1, r0
 8000b18:	68bb      	ldr	r3, [r7, #8]
 8000b1a:	1c5a      	adds	r2, r3, #1
 8000b1c:	60ba      	str	r2, [r7, #8]
 8000b1e:	b2ca      	uxtb	r2, r1
 8000b20:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b22:	697b      	ldr	r3, [r7, #20]
 8000b24:	3301      	adds	r3, #1
 8000b26:	617b      	str	r3, [r7, #20]
 8000b28:	697a      	ldr	r2, [r7, #20]
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	429a      	cmp	r2, r3
 8000b2e:	dbf0      	blt.n	8000b12 <_read+0x12>
  }

  return len;
 8000b30:	687b      	ldr	r3, [r7, #4]
}
 8000b32:	4618      	mov	r0, r3
 8000b34:	3718      	adds	r7, #24
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}

08000b3a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b3a:	b580      	push	{r7, lr}
 8000b3c:	b086      	sub	sp, #24
 8000b3e:	af00      	add	r7, sp, #0
 8000b40:	60f8      	str	r0, [r7, #12]
 8000b42:	60b9      	str	r1, [r7, #8]
 8000b44:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b46:	2300      	movs	r3, #0
 8000b48:	617b      	str	r3, [r7, #20]
 8000b4a:	e009      	b.n	8000b60 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000b4c:	68bb      	ldr	r3, [r7, #8]
 8000b4e:	1c5a      	adds	r2, r3, #1
 8000b50:	60ba      	str	r2, [r7, #8]
 8000b52:	781b      	ldrb	r3, [r3, #0]
 8000b54:	4618      	mov	r0, r3
 8000b56:	f000 f921 	bl	8000d9c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b5a:	697b      	ldr	r3, [r7, #20]
 8000b5c:	3301      	adds	r3, #1
 8000b5e:	617b      	str	r3, [r7, #20]
 8000b60:	697a      	ldr	r2, [r7, #20]
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	429a      	cmp	r2, r3
 8000b66:	dbf1      	blt.n	8000b4c <_write+0x12>
  }
  return len;
 8000b68:	687b      	ldr	r3, [r7, #4]
}
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	3718      	adds	r7, #24
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}

08000b72 <_close>:

int _close(int file)
{
 8000b72:	b480      	push	{r7}
 8000b74:	b083      	sub	sp, #12
 8000b76:	af00      	add	r7, sp, #0
 8000b78:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000b7a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b7e:	4618      	mov	r0, r3
 8000b80:	370c      	adds	r7, #12
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bc80      	pop	{r7}
 8000b86:	4770      	bx	lr

08000b88 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	b083      	sub	sp, #12
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
 8000b90:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000b92:	683b      	ldr	r3, [r7, #0]
 8000b94:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000b98:	605a      	str	r2, [r3, #4]
  return 0;
 8000b9a:	2300      	movs	r3, #0
}
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	370c      	adds	r7, #12
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bc80      	pop	{r7}
 8000ba4:	4770      	bx	lr

08000ba6 <_isatty>:

int _isatty(int file)
{
 8000ba6:	b480      	push	{r7}
 8000ba8:	b083      	sub	sp, #12
 8000baa:	af00      	add	r7, sp, #0
 8000bac:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000bae:	2301      	movs	r3, #1
}
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	370c      	adds	r7, #12
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bc80      	pop	{r7}
 8000bb8:	4770      	bx	lr

08000bba <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000bba:	b480      	push	{r7}
 8000bbc:	b085      	sub	sp, #20
 8000bbe:	af00      	add	r7, sp, #0
 8000bc0:	60f8      	str	r0, [r7, #12]
 8000bc2:	60b9      	str	r1, [r7, #8]
 8000bc4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000bc6:	2300      	movs	r3, #0
}
 8000bc8:	4618      	mov	r0, r3
 8000bca:	3714      	adds	r7, #20
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bc80      	pop	{r7}
 8000bd0:	4770      	bx	lr
	...

08000bd4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b086      	sub	sp, #24
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bdc:	4a14      	ldr	r2, [pc, #80]	@ (8000c30 <_sbrk+0x5c>)
 8000bde:	4b15      	ldr	r3, [pc, #84]	@ (8000c34 <_sbrk+0x60>)
 8000be0:	1ad3      	subs	r3, r2, r3
 8000be2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000be4:	697b      	ldr	r3, [r7, #20]
 8000be6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000be8:	4b13      	ldr	r3, [pc, #76]	@ (8000c38 <_sbrk+0x64>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d102      	bne.n	8000bf6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bf0:	4b11      	ldr	r3, [pc, #68]	@ (8000c38 <_sbrk+0x64>)
 8000bf2:	4a12      	ldr	r2, [pc, #72]	@ (8000c3c <_sbrk+0x68>)
 8000bf4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bf6:	4b10      	ldr	r3, [pc, #64]	@ (8000c38 <_sbrk+0x64>)
 8000bf8:	681a      	ldr	r2, [r3, #0]
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	4413      	add	r3, r2
 8000bfe:	693a      	ldr	r2, [r7, #16]
 8000c00:	429a      	cmp	r2, r3
 8000c02:	d207      	bcs.n	8000c14 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c04:	f003 ff80 	bl	8004b08 <__errno>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	220c      	movs	r2, #12
 8000c0c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c0e:	f04f 33ff 	mov.w	r3, #4294967295
 8000c12:	e009      	b.n	8000c28 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c14:	4b08      	ldr	r3, [pc, #32]	@ (8000c38 <_sbrk+0x64>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c1a:	4b07      	ldr	r3, [pc, #28]	@ (8000c38 <_sbrk+0x64>)
 8000c1c:	681a      	ldr	r2, [r3, #0]
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	4413      	add	r3, r2
 8000c22:	4a05      	ldr	r2, [pc, #20]	@ (8000c38 <_sbrk+0x64>)
 8000c24:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c26:	68fb      	ldr	r3, [r7, #12]
}
 8000c28:	4618      	mov	r0, r3
 8000c2a:	3718      	adds	r7, #24
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	20005000 	.word	0x20005000
 8000c34:	00000400 	.word	0x00000400
 8000c38:	200001f4 	.word	0x200001f4
 8000c3c:	200003d8 	.word	0x200003d8

08000c40 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c44:	bf00      	nop
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bc80      	pop	{r7}
 8000c4a:	4770      	bx	lr

08000c4c <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000c50:	4b11      	ldr	r3, [pc, #68]	@ (8000c98 <MX_USART1_UART_Init+0x4c>)
 8000c52:	4a12      	ldr	r2, [pc, #72]	@ (8000c9c <MX_USART1_UART_Init+0x50>)
 8000c54:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000c56:	4b10      	ldr	r3, [pc, #64]	@ (8000c98 <MX_USART1_UART_Init+0x4c>)
 8000c58:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c5c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c5e:	4b0e      	ldr	r3, [pc, #56]	@ (8000c98 <MX_USART1_UART_Init+0x4c>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000c64:	4b0c      	ldr	r3, [pc, #48]	@ (8000c98 <MX_USART1_UART_Init+0x4c>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000c6a:	4b0b      	ldr	r3, [pc, #44]	@ (8000c98 <MX_USART1_UART_Init+0x4c>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000c70:	4b09      	ldr	r3, [pc, #36]	@ (8000c98 <MX_USART1_UART_Init+0x4c>)
 8000c72:	220c      	movs	r2, #12
 8000c74:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c76:	4b08      	ldr	r3, [pc, #32]	@ (8000c98 <MX_USART1_UART_Init+0x4c>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c7c:	4b06      	ldr	r3, [pc, #24]	@ (8000c98 <MX_USART1_UART_Init+0x4c>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c82:	4805      	ldr	r0, [pc, #20]	@ (8000c98 <MX_USART1_UART_Init+0x4c>)
 8000c84:	f002 fcf0 	bl	8003668 <HAL_UART_Init>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d001      	beq.n	8000c92 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000c8e:	f7ff fca0 	bl	80005d2 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c92:	bf00      	nop
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	200001f8 	.word	0x200001f8
 8000c9c:	40013800 	.word	0x40013800

08000ca0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b088      	sub	sp, #32
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca8:	f107 0310 	add.w	r3, r7, #16
 8000cac:	2200      	movs	r2, #0
 8000cae:	601a      	str	r2, [r3, #0]
 8000cb0:	605a      	str	r2, [r3, #4]
 8000cb2:	609a      	str	r2, [r3, #8]
 8000cb4:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	4a33      	ldr	r2, [pc, #204]	@ (8000d88 <HAL_UART_MspInit+0xe8>)
 8000cbc:	4293      	cmp	r3, r2
 8000cbe:	d15f      	bne.n	8000d80 <HAL_UART_MspInit+0xe0>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000cc0:	4b32      	ldr	r3, [pc, #200]	@ (8000d8c <HAL_UART_MspInit+0xec>)
 8000cc2:	699b      	ldr	r3, [r3, #24]
 8000cc4:	4a31      	ldr	r2, [pc, #196]	@ (8000d8c <HAL_UART_MspInit+0xec>)
 8000cc6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000cca:	6193      	str	r3, [r2, #24]
 8000ccc:	4b2f      	ldr	r3, [pc, #188]	@ (8000d8c <HAL_UART_MspInit+0xec>)
 8000cce:	699b      	ldr	r3, [r3, #24]
 8000cd0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000cd4:	60fb      	str	r3, [r7, #12]
 8000cd6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cd8:	4b2c      	ldr	r3, [pc, #176]	@ (8000d8c <HAL_UART_MspInit+0xec>)
 8000cda:	699b      	ldr	r3, [r3, #24]
 8000cdc:	4a2b      	ldr	r2, [pc, #172]	@ (8000d8c <HAL_UART_MspInit+0xec>)
 8000cde:	f043 0304 	orr.w	r3, r3, #4
 8000ce2:	6193      	str	r3, [r2, #24]
 8000ce4:	4b29      	ldr	r3, [pc, #164]	@ (8000d8c <HAL_UART_MspInit+0xec>)
 8000ce6:	699b      	ldr	r3, [r3, #24]
 8000ce8:	f003 0304 	and.w	r3, r3, #4
 8000cec:	60bb      	str	r3, [r7, #8]
 8000cee:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000cf0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000cf4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf6:	2302      	movs	r3, #2
 8000cf8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cfa:	2303      	movs	r3, #3
 8000cfc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cfe:	f107 0310 	add.w	r3, r7, #16
 8000d02:	4619      	mov	r1, r3
 8000d04:	4822      	ldr	r0, [pc, #136]	@ (8000d90 <HAL_UART_MspInit+0xf0>)
 8000d06:	f000 fcd3 	bl	80016b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000d0a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000d0e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d10:	2300      	movs	r3, #0
 8000d12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d14:	2301      	movs	r3, #1
 8000d16:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d18:	f107 0310 	add.w	r3, r7, #16
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	481c      	ldr	r0, [pc, #112]	@ (8000d90 <HAL_UART_MspInit+0xf0>)
 8000d20:	f000 fcc6 	bl	80016b0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8000d24:	4b1b      	ldr	r3, [pc, #108]	@ (8000d94 <HAL_UART_MspInit+0xf4>)
 8000d26:	4a1c      	ldr	r2, [pc, #112]	@ (8000d98 <HAL_UART_MspInit+0xf8>)
 8000d28:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d2a:	4b1a      	ldr	r3, [pc, #104]	@ (8000d94 <HAL_UART_MspInit+0xf4>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d30:	4b18      	ldr	r3, [pc, #96]	@ (8000d94 <HAL_UART_MspInit+0xf4>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000d36:	4b17      	ldr	r3, [pc, #92]	@ (8000d94 <HAL_UART_MspInit+0xf4>)
 8000d38:	2280      	movs	r2, #128	@ 0x80
 8000d3a:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d3c:	4b15      	ldr	r3, [pc, #84]	@ (8000d94 <HAL_UART_MspInit+0xf4>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d42:	4b14      	ldr	r3, [pc, #80]	@ (8000d94 <HAL_UART_MspInit+0xf4>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8000d48:	4b12      	ldr	r3, [pc, #72]	@ (8000d94 <HAL_UART_MspInit+0xf4>)
 8000d4a:	2220      	movs	r2, #32
 8000d4c:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000d4e:	4b11      	ldr	r3, [pc, #68]	@ (8000d94 <HAL_UART_MspInit+0xf4>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000d54:	480f      	ldr	r0, [pc, #60]	@ (8000d94 <HAL_UART_MspInit+0xf4>)
 8000d56:	f000 fa09 	bl	800116c <HAL_DMA_Init>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d001      	beq.n	8000d64 <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 8000d60:	f7ff fc37 	bl	80005d2 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	4a0b      	ldr	r2, [pc, #44]	@ (8000d94 <HAL_UART_MspInit+0xf4>)
 8000d68:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000d6a:	4a0a      	ldr	r2, [pc, #40]	@ (8000d94 <HAL_UART_MspInit+0xf4>)
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000d70:	2200      	movs	r2, #0
 8000d72:	2100      	movs	r1, #0
 8000d74:	2025      	movs	r0, #37	@ 0x25
 8000d76:	f000 f9c2 	bl	80010fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000d7a:	2025      	movs	r0, #37	@ 0x25
 8000d7c:	f000 f9db 	bl	8001136 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000d80:	bf00      	nop
 8000d82:	3720      	adds	r7, #32
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}
 8000d88:	40013800 	.word	0x40013800
 8000d8c:	40021000 	.word	0x40021000
 8000d90:	40010800 	.word	0x40010800
 8000d94:	20000240 	.word	0x20000240
 8000d98:	40020058 	.word	0x40020058

08000d9c <__io_putchar>:
  }
}

/* USER CODE BEGIN 1 */
int __io_putchar(int ch)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b082      	sub	sp, #8
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000da4:	1d39      	adds	r1, r7, #4
 8000da6:	f04f 33ff 	mov.w	r3, #4294967295
 8000daa:	2201      	movs	r2, #1
 8000dac:	4803      	ldr	r0, [pc, #12]	@ (8000dbc <__io_putchar+0x20>)
 8000dae:	f002 fcab 	bl	8003708 <HAL_UART_Transmit>
  return ch;
 8000db2:	687b      	ldr	r3, [r7, #4]
}
 8000db4:	4618      	mov	r0, r3
 8000db6:	3708      	adds	r7, #8
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	200001f8 	.word	0x200001f8

08000dc0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000dc0:	f7ff ff3e 	bl	8000c40 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000dc4:	480b      	ldr	r0, [pc, #44]	@ (8000df4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000dc6:	490c      	ldr	r1, [pc, #48]	@ (8000df8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000dc8:	4a0c      	ldr	r2, [pc, #48]	@ (8000dfc <LoopFillZerobss+0x16>)
  movs r3, #0
 8000dca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dcc:	e002      	b.n	8000dd4 <LoopCopyDataInit>

08000dce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dd0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dd2:	3304      	adds	r3, #4

08000dd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dd4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dd6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dd8:	d3f9      	bcc.n	8000dce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dda:	4a09      	ldr	r2, [pc, #36]	@ (8000e00 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000ddc:	4c09      	ldr	r4, [pc, #36]	@ (8000e04 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000dde:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000de0:	e001      	b.n	8000de6 <LoopFillZerobss>

08000de2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000de2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000de4:	3204      	adds	r2, #4

08000de6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000de6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000de8:	d3fb      	bcc.n	8000de2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000dea:	f003 fe93 	bl	8004b14 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000dee:	f7ff fb0b 	bl	8000408 <main>
  bx lr
 8000df2:	4770      	bx	lr
  ldr r0, =_sdata
 8000df4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000df8:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000dfc:	080057f4 	.word	0x080057f4
  ldr r2, =_sbss
 8000e00:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000e04:	200003d4 	.word	0x200003d4

08000e08 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e08:	e7fe      	b.n	8000e08 <ADC1_2_IRQHandler>
	...

08000e0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e10:	4b08      	ldr	r3, [pc, #32]	@ (8000e34 <HAL_Init+0x28>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	4a07      	ldr	r2, [pc, #28]	@ (8000e34 <HAL_Init+0x28>)
 8000e16:	f043 0310 	orr.w	r3, r3, #16
 8000e1a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e1c:	2003      	movs	r0, #3
 8000e1e:	f000 f963 	bl	80010e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e22:	200f      	movs	r0, #15
 8000e24:	f000 f808 	bl	8000e38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e28:	f7ff fce8 	bl	80007fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e2c:	2300      	movs	r3, #0
}
 8000e2e:	4618      	mov	r0, r3
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	40022000 	.word	0x40022000

08000e38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b082      	sub	sp, #8
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e40:	4b12      	ldr	r3, [pc, #72]	@ (8000e8c <HAL_InitTick+0x54>)
 8000e42:	681a      	ldr	r2, [r3, #0]
 8000e44:	4b12      	ldr	r3, [pc, #72]	@ (8000e90 <HAL_InitTick+0x58>)
 8000e46:	781b      	ldrb	r3, [r3, #0]
 8000e48:	4619      	mov	r1, r3
 8000e4a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e52:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e56:	4618      	mov	r0, r3
 8000e58:	f000 f97b 	bl	8001152 <HAL_SYSTICK_Config>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d001      	beq.n	8000e66 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e62:	2301      	movs	r3, #1
 8000e64:	e00e      	b.n	8000e84 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	2b0f      	cmp	r3, #15
 8000e6a:	d80a      	bhi.n	8000e82 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	6879      	ldr	r1, [r7, #4]
 8000e70:	f04f 30ff 	mov.w	r0, #4294967295
 8000e74:	f000 f943 	bl	80010fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e78:	4a06      	ldr	r2, [pc, #24]	@ (8000e94 <HAL_InitTick+0x5c>)
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	e000      	b.n	8000e84 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e82:	2301      	movs	r3, #1
}
 8000e84:	4618      	mov	r0, r3
 8000e86:	3708      	adds	r7, #8
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	20000000 	.word	0x20000000
 8000e90:	20000008 	.word	0x20000008
 8000e94:	20000004 	.word	0x20000004

08000e98 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e9c:	4b05      	ldr	r3, [pc, #20]	@ (8000eb4 <HAL_IncTick+0x1c>)
 8000e9e:	781b      	ldrb	r3, [r3, #0]
 8000ea0:	461a      	mov	r2, r3
 8000ea2:	4b05      	ldr	r3, [pc, #20]	@ (8000eb8 <HAL_IncTick+0x20>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	4413      	add	r3, r2
 8000ea8:	4a03      	ldr	r2, [pc, #12]	@ (8000eb8 <HAL_IncTick+0x20>)
 8000eaa:	6013      	str	r3, [r2, #0]
}
 8000eac:	bf00      	nop
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bc80      	pop	{r7}
 8000eb2:	4770      	bx	lr
 8000eb4:	20000008 	.word	0x20000008
 8000eb8:	20000284 	.word	0x20000284

08000ebc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
  return uwTick;
 8000ec0:	4b02      	ldr	r3, [pc, #8]	@ (8000ecc <HAL_GetTick+0x10>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
}
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bc80      	pop	{r7}
 8000eca:	4770      	bx	lr
 8000ecc:	20000284 	.word	0x20000284

08000ed0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b084      	sub	sp, #16
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ed8:	f7ff fff0 	bl	8000ebc <HAL_GetTick>
 8000edc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ee8:	d005      	beq.n	8000ef6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000eea:	4b0a      	ldr	r3, [pc, #40]	@ (8000f14 <HAL_Delay+0x44>)
 8000eec:	781b      	ldrb	r3, [r3, #0]
 8000eee:	461a      	mov	r2, r3
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	4413      	add	r3, r2
 8000ef4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ef6:	bf00      	nop
 8000ef8:	f7ff ffe0 	bl	8000ebc <HAL_GetTick>
 8000efc:	4602      	mov	r2, r0
 8000efe:	68bb      	ldr	r3, [r7, #8]
 8000f00:	1ad3      	subs	r3, r2, r3
 8000f02:	68fa      	ldr	r2, [r7, #12]
 8000f04:	429a      	cmp	r2, r3
 8000f06:	d8f7      	bhi.n	8000ef8 <HAL_Delay+0x28>
  {
  }
}
 8000f08:	bf00      	nop
 8000f0a:	bf00      	nop
 8000f0c:	3710      	adds	r7, #16
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	20000008 	.word	0x20000008

08000f18 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8000f1c:	4b04      	ldr	r3, [pc, #16]	@ (8000f30 <HAL_SuspendTick+0x18>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	4a03      	ldr	r2, [pc, #12]	@ (8000f30 <HAL_SuspendTick+0x18>)
 8000f22:	f023 0302 	bic.w	r3, r3, #2
 8000f26:	6013      	str	r3, [r2, #0]
}
 8000f28:	bf00      	nop
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bc80      	pop	{r7}
 8000f2e:	4770      	bx	lr
 8000f30:	e000e010 	.word	0xe000e010

08000f34 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8000f38:	4b04      	ldr	r3, [pc, #16]	@ (8000f4c <HAL_ResumeTick+0x18>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	4a03      	ldr	r2, [pc, #12]	@ (8000f4c <HAL_ResumeTick+0x18>)
 8000f3e:	f043 0302 	orr.w	r3, r3, #2
 8000f42:	6013      	str	r3, [r2, #0]
}
 8000f44:	bf00      	nop
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bc80      	pop	{r7}
 8000f4a:	4770      	bx	lr
 8000f4c:	e000e010 	.word	0xe000e010

08000f50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b085      	sub	sp, #20
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	f003 0307 	and.w	r3, r3, #7
 8000f5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f60:	4b0c      	ldr	r3, [pc, #48]	@ (8000f94 <__NVIC_SetPriorityGrouping+0x44>)
 8000f62:	68db      	ldr	r3, [r3, #12]
 8000f64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f66:	68ba      	ldr	r2, [r7, #8]
 8000f68:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f6c:	4013      	ands	r3, r2
 8000f6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f74:	68bb      	ldr	r3, [r7, #8]
 8000f76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f78:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000f7c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f82:	4a04      	ldr	r2, [pc, #16]	@ (8000f94 <__NVIC_SetPriorityGrouping+0x44>)
 8000f84:	68bb      	ldr	r3, [r7, #8]
 8000f86:	60d3      	str	r3, [r2, #12]
}
 8000f88:	bf00      	nop
 8000f8a:	3714      	adds	r7, #20
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bc80      	pop	{r7}
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop
 8000f94:	e000ed00 	.word	0xe000ed00

08000f98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f9c:	4b04      	ldr	r3, [pc, #16]	@ (8000fb0 <__NVIC_GetPriorityGrouping+0x18>)
 8000f9e:	68db      	ldr	r3, [r3, #12]
 8000fa0:	0a1b      	lsrs	r3, r3, #8
 8000fa2:	f003 0307 	and.w	r3, r3, #7
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bc80      	pop	{r7}
 8000fac:	4770      	bx	lr
 8000fae:	bf00      	nop
 8000fb0:	e000ed00 	.word	0xe000ed00

08000fb4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b083      	sub	sp, #12
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	4603      	mov	r3, r0
 8000fbc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	db0b      	blt.n	8000fde <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fc6:	79fb      	ldrb	r3, [r7, #7]
 8000fc8:	f003 021f 	and.w	r2, r3, #31
 8000fcc:	4906      	ldr	r1, [pc, #24]	@ (8000fe8 <__NVIC_EnableIRQ+0x34>)
 8000fce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fd2:	095b      	lsrs	r3, r3, #5
 8000fd4:	2001      	movs	r0, #1
 8000fd6:	fa00 f202 	lsl.w	r2, r0, r2
 8000fda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000fde:	bf00      	nop
 8000fe0:	370c      	adds	r7, #12
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bc80      	pop	{r7}
 8000fe6:	4770      	bx	lr
 8000fe8:	e000e100 	.word	0xe000e100

08000fec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b083      	sub	sp, #12
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	6039      	str	r1, [r7, #0]
 8000ff6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ff8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	db0a      	blt.n	8001016 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	b2da      	uxtb	r2, r3
 8001004:	490c      	ldr	r1, [pc, #48]	@ (8001038 <__NVIC_SetPriority+0x4c>)
 8001006:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800100a:	0112      	lsls	r2, r2, #4
 800100c:	b2d2      	uxtb	r2, r2
 800100e:	440b      	add	r3, r1
 8001010:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001014:	e00a      	b.n	800102c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	b2da      	uxtb	r2, r3
 800101a:	4908      	ldr	r1, [pc, #32]	@ (800103c <__NVIC_SetPriority+0x50>)
 800101c:	79fb      	ldrb	r3, [r7, #7]
 800101e:	f003 030f 	and.w	r3, r3, #15
 8001022:	3b04      	subs	r3, #4
 8001024:	0112      	lsls	r2, r2, #4
 8001026:	b2d2      	uxtb	r2, r2
 8001028:	440b      	add	r3, r1
 800102a:	761a      	strb	r2, [r3, #24]
}
 800102c:	bf00      	nop
 800102e:	370c      	adds	r7, #12
 8001030:	46bd      	mov	sp, r7
 8001032:	bc80      	pop	{r7}
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop
 8001038:	e000e100 	.word	0xe000e100
 800103c:	e000ed00 	.word	0xe000ed00

08001040 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001040:	b480      	push	{r7}
 8001042:	b089      	sub	sp, #36	@ 0x24
 8001044:	af00      	add	r7, sp, #0
 8001046:	60f8      	str	r0, [r7, #12]
 8001048:	60b9      	str	r1, [r7, #8]
 800104a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	f003 0307 	and.w	r3, r3, #7
 8001052:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001054:	69fb      	ldr	r3, [r7, #28]
 8001056:	f1c3 0307 	rsb	r3, r3, #7
 800105a:	2b04      	cmp	r3, #4
 800105c:	bf28      	it	cs
 800105e:	2304      	movcs	r3, #4
 8001060:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001062:	69fb      	ldr	r3, [r7, #28]
 8001064:	3304      	adds	r3, #4
 8001066:	2b06      	cmp	r3, #6
 8001068:	d902      	bls.n	8001070 <NVIC_EncodePriority+0x30>
 800106a:	69fb      	ldr	r3, [r7, #28]
 800106c:	3b03      	subs	r3, #3
 800106e:	e000      	b.n	8001072 <NVIC_EncodePriority+0x32>
 8001070:	2300      	movs	r3, #0
 8001072:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001074:	f04f 32ff 	mov.w	r2, #4294967295
 8001078:	69bb      	ldr	r3, [r7, #24]
 800107a:	fa02 f303 	lsl.w	r3, r2, r3
 800107e:	43da      	mvns	r2, r3
 8001080:	68bb      	ldr	r3, [r7, #8]
 8001082:	401a      	ands	r2, r3
 8001084:	697b      	ldr	r3, [r7, #20]
 8001086:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001088:	f04f 31ff 	mov.w	r1, #4294967295
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	fa01 f303 	lsl.w	r3, r1, r3
 8001092:	43d9      	mvns	r1, r3
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001098:	4313      	orrs	r3, r2
         );
}
 800109a:	4618      	mov	r0, r3
 800109c:	3724      	adds	r7, #36	@ 0x24
 800109e:	46bd      	mov	sp, r7
 80010a0:	bc80      	pop	{r7}
 80010a2:	4770      	bx	lr

080010a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b082      	sub	sp, #8
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	3b01      	subs	r3, #1
 80010b0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80010b4:	d301      	bcc.n	80010ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010b6:	2301      	movs	r3, #1
 80010b8:	e00f      	b.n	80010da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010ba:	4a0a      	ldr	r2, [pc, #40]	@ (80010e4 <SysTick_Config+0x40>)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	3b01      	subs	r3, #1
 80010c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010c2:	210f      	movs	r1, #15
 80010c4:	f04f 30ff 	mov.w	r0, #4294967295
 80010c8:	f7ff ff90 	bl	8000fec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010cc:	4b05      	ldr	r3, [pc, #20]	@ (80010e4 <SysTick_Config+0x40>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010d2:	4b04      	ldr	r3, [pc, #16]	@ (80010e4 <SysTick_Config+0x40>)
 80010d4:	2207      	movs	r2, #7
 80010d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010d8:	2300      	movs	r3, #0
}
 80010da:	4618      	mov	r0, r3
 80010dc:	3708      	adds	r7, #8
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	e000e010 	.word	0xe000e010

080010e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010f0:	6878      	ldr	r0, [r7, #4]
 80010f2:	f7ff ff2d 	bl	8000f50 <__NVIC_SetPriorityGrouping>
}
 80010f6:	bf00      	nop
 80010f8:	3708      	adds	r7, #8
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}

080010fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010fe:	b580      	push	{r7, lr}
 8001100:	b086      	sub	sp, #24
 8001102:	af00      	add	r7, sp, #0
 8001104:	4603      	mov	r3, r0
 8001106:	60b9      	str	r1, [r7, #8]
 8001108:	607a      	str	r2, [r7, #4]
 800110a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800110c:	2300      	movs	r3, #0
 800110e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001110:	f7ff ff42 	bl	8000f98 <__NVIC_GetPriorityGrouping>
 8001114:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001116:	687a      	ldr	r2, [r7, #4]
 8001118:	68b9      	ldr	r1, [r7, #8]
 800111a:	6978      	ldr	r0, [r7, #20]
 800111c:	f7ff ff90 	bl	8001040 <NVIC_EncodePriority>
 8001120:	4602      	mov	r2, r0
 8001122:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001126:	4611      	mov	r1, r2
 8001128:	4618      	mov	r0, r3
 800112a:	f7ff ff5f 	bl	8000fec <__NVIC_SetPriority>
}
 800112e:	bf00      	nop
 8001130:	3718      	adds	r7, #24
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}

08001136 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001136:	b580      	push	{r7, lr}
 8001138:	b082      	sub	sp, #8
 800113a:	af00      	add	r7, sp, #0
 800113c:	4603      	mov	r3, r0
 800113e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001140:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001144:	4618      	mov	r0, r3
 8001146:	f7ff ff35 	bl	8000fb4 <__NVIC_EnableIRQ>
}
 800114a:	bf00      	nop
 800114c:	3708      	adds	r7, #8
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}

08001152 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001152:	b580      	push	{r7, lr}
 8001154:	b082      	sub	sp, #8
 8001156:	af00      	add	r7, sp, #0
 8001158:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800115a:	6878      	ldr	r0, [r7, #4]
 800115c:	f7ff ffa2 	bl	80010a4 <SysTick_Config>
 8001160:	4603      	mov	r3, r0
}
 8001162:	4618      	mov	r0, r3
 8001164:	3708      	adds	r7, #8
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
	...

0800116c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800116c:	b480      	push	{r7}
 800116e:	b085      	sub	sp, #20
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001174:	2300      	movs	r3, #0
 8001176:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d101      	bne.n	8001182 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800117e:	2301      	movs	r3, #1
 8001180:	e043      	b.n	800120a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	461a      	mov	r2, r3
 8001188:	4b22      	ldr	r3, [pc, #136]	@ (8001214 <HAL_DMA_Init+0xa8>)
 800118a:	4413      	add	r3, r2
 800118c:	4a22      	ldr	r2, [pc, #136]	@ (8001218 <HAL_DMA_Init+0xac>)
 800118e:	fba2 2303 	umull	r2, r3, r2, r3
 8001192:	091b      	lsrs	r3, r3, #4
 8001194:	009a      	lsls	r2, r3, #2
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	4a1f      	ldr	r2, [pc, #124]	@ (800121c <HAL_DMA_Init+0xb0>)
 800119e:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	2202      	movs	r2, #2
 80011a4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80011b6:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80011ba:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80011c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	68db      	ldr	r3, [r3, #12]
 80011ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80011d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	695b      	ldr	r3, [r3, #20]
 80011d6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80011dc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	69db      	ldr	r3, [r3, #28]
 80011e2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80011e4:	68fa      	ldr	r2, [r7, #12]
 80011e6:	4313      	orrs	r3, r2
 80011e8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	68fa      	ldr	r2, [r7, #12]
 80011f0:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	2200      	movs	r2, #0
 80011f6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	2201      	movs	r2, #1
 80011fc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	2200      	movs	r2, #0
 8001204:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001208:	2300      	movs	r3, #0
}
 800120a:	4618      	mov	r0, r3
 800120c:	3714      	adds	r7, #20
 800120e:	46bd      	mov	sp, r7
 8001210:	bc80      	pop	{r7}
 8001212:	4770      	bx	lr
 8001214:	bffdfff8 	.word	0xbffdfff8
 8001218:	cccccccd 	.word	0xcccccccd
 800121c:	40020000 	.word	0x40020000

08001220 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b086      	sub	sp, #24
 8001224:	af00      	add	r7, sp, #0
 8001226:	60f8      	str	r0, [r7, #12]
 8001228:	60b9      	str	r1, [r7, #8]
 800122a:	607a      	str	r2, [r7, #4]
 800122c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800122e:	2300      	movs	r3, #0
 8001230:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001238:	2b01      	cmp	r3, #1
 800123a:	d101      	bne.n	8001240 <HAL_DMA_Start_IT+0x20>
 800123c:	2302      	movs	r3, #2
 800123e:	e04b      	b.n	80012d8 <HAL_DMA_Start_IT+0xb8>
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	2201      	movs	r2, #1
 8001244:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800124e:	b2db      	uxtb	r3, r3
 8001250:	2b01      	cmp	r3, #1
 8001252:	d13a      	bne.n	80012ca <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	2202      	movs	r2, #2
 8001258:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	2200      	movs	r2, #0
 8001260:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	681a      	ldr	r2, [r3, #0]
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f022 0201 	bic.w	r2, r2, #1
 8001270:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	687a      	ldr	r2, [r7, #4]
 8001276:	68b9      	ldr	r1, [r7, #8]
 8001278:	68f8      	ldr	r0, [r7, #12]
 800127a:	f000 f9eb 	bl	8001654 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001282:	2b00      	cmp	r3, #0
 8001284:	d008      	beq.n	8001298 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	681a      	ldr	r2, [r3, #0]
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f042 020e 	orr.w	r2, r2, #14
 8001294:	601a      	str	r2, [r3, #0]
 8001296:	e00f      	b.n	80012b8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	681a      	ldr	r2, [r3, #0]
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f022 0204 	bic.w	r2, r2, #4
 80012a6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	681a      	ldr	r2, [r3, #0]
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f042 020a 	orr.w	r2, r2, #10
 80012b6:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	681a      	ldr	r2, [r3, #0]
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f042 0201 	orr.w	r2, r2, #1
 80012c6:	601a      	str	r2, [r3, #0]
 80012c8:	e005      	b.n	80012d6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	2200      	movs	r2, #0
 80012ce:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80012d2:	2302      	movs	r3, #2
 80012d4:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80012d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80012d8:	4618      	mov	r0, r3
 80012da:	3718      	adds	r7, #24
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}

080012e0 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b085      	sub	sp, #20
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80012e8:	2300      	movs	r3, #0
 80012ea:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80012f2:	b2db      	uxtb	r3, r3
 80012f4:	2b02      	cmp	r3, #2
 80012f6:	d008      	beq.n	800130a <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	2204      	movs	r2, #4
 80012fc:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	2200      	movs	r2, #0
 8001302:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001306:	2301      	movs	r3, #1
 8001308:	e020      	b.n	800134c <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	681a      	ldr	r2, [r3, #0]
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f022 020e 	bic.w	r2, r2, #14
 8001318:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	681a      	ldr	r2, [r3, #0]
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f022 0201 	bic.w	r2, r2, #1
 8001328:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001332:	2101      	movs	r1, #1
 8001334:	fa01 f202 	lsl.w	r2, r1, r2
 8001338:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	2201      	movs	r2, #1
 800133e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	2200      	movs	r2, #0
 8001346:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800134a:	7bfb      	ldrb	r3, [r7, #15]
}
 800134c:	4618      	mov	r0, r3
 800134e:	3714      	adds	r7, #20
 8001350:	46bd      	mov	sp, r7
 8001352:	bc80      	pop	{r7}
 8001354:	4770      	bx	lr
	...

08001358 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001358:	b580      	push	{r7, lr}
 800135a:	b084      	sub	sp, #16
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001360:	2300      	movs	r3, #0
 8001362:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800136a:	b2db      	uxtb	r3, r3
 800136c:	2b02      	cmp	r3, #2
 800136e:	d005      	beq.n	800137c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	2204      	movs	r2, #4
 8001374:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8001376:	2301      	movs	r3, #1
 8001378:	73fb      	strb	r3, [r7, #15]
 800137a:	e051      	b.n	8001420 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	681a      	ldr	r2, [r3, #0]
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f022 020e 	bic.w	r2, r2, #14
 800138a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	681a      	ldr	r2, [r3, #0]
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f022 0201 	bic.w	r2, r2, #1
 800139a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4a22      	ldr	r2, [pc, #136]	@ (800142c <HAL_DMA_Abort_IT+0xd4>)
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d029      	beq.n	80013fa <HAL_DMA_Abort_IT+0xa2>
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4a21      	ldr	r2, [pc, #132]	@ (8001430 <HAL_DMA_Abort_IT+0xd8>)
 80013ac:	4293      	cmp	r3, r2
 80013ae:	d022      	beq.n	80013f6 <HAL_DMA_Abort_IT+0x9e>
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4a1f      	ldr	r2, [pc, #124]	@ (8001434 <HAL_DMA_Abort_IT+0xdc>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d01a      	beq.n	80013f0 <HAL_DMA_Abort_IT+0x98>
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	4a1e      	ldr	r2, [pc, #120]	@ (8001438 <HAL_DMA_Abort_IT+0xe0>)
 80013c0:	4293      	cmp	r3, r2
 80013c2:	d012      	beq.n	80013ea <HAL_DMA_Abort_IT+0x92>
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4a1c      	ldr	r2, [pc, #112]	@ (800143c <HAL_DMA_Abort_IT+0xe4>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d00a      	beq.n	80013e4 <HAL_DMA_Abort_IT+0x8c>
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	4a1b      	ldr	r2, [pc, #108]	@ (8001440 <HAL_DMA_Abort_IT+0xe8>)
 80013d4:	4293      	cmp	r3, r2
 80013d6:	d102      	bne.n	80013de <HAL_DMA_Abort_IT+0x86>
 80013d8:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80013dc:	e00e      	b.n	80013fc <HAL_DMA_Abort_IT+0xa4>
 80013de:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80013e2:	e00b      	b.n	80013fc <HAL_DMA_Abort_IT+0xa4>
 80013e4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80013e8:	e008      	b.n	80013fc <HAL_DMA_Abort_IT+0xa4>
 80013ea:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013ee:	e005      	b.n	80013fc <HAL_DMA_Abort_IT+0xa4>
 80013f0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80013f4:	e002      	b.n	80013fc <HAL_DMA_Abort_IT+0xa4>
 80013f6:	2310      	movs	r3, #16
 80013f8:	e000      	b.n	80013fc <HAL_DMA_Abort_IT+0xa4>
 80013fa:	2301      	movs	r3, #1
 80013fc:	4a11      	ldr	r2, [pc, #68]	@ (8001444 <HAL_DMA_Abort_IT+0xec>)
 80013fe:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	2201      	movs	r2, #1
 8001404:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2200      	movs	r2, #0
 800140c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001414:	2b00      	cmp	r3, #0
 8001416:	d003      	beq.n	8001420 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800141c:	6878      	ldr	r0, [r7, #4]
 800141e:	4798      	blx	r3
    } 
  }
  return status;
 8001420:	7bfb      	ldrb	r3, [r7, #15]
}
 8001422:	4618      	mov	r0, r3
 8001424:	3710      	adds	r7, #16
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	40020008 	.word	0x40020008
 8001430:	4002001c 	.word	0x4002001c
 8001434:	40020030 	.word	0x40020030
 8001438:	40020044 	.word	0x40020044
 800143c:	40020058 	.word	0x40020058
 8001440:	4002006c 	.word	0x4002006c
 8001444:	40020000 	.word	0x40020000

08001448 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b084      	sub	sp, #16
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001464:	2204      	movs	r2, #4
 8001466:	409a      	lsls	r2, r3
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	4013      	ands	r3, r2
 800146c:	2b00      	cmp	r3, #0
 800146e:	d04f      	beq.n	8001510 <HAL_DMA_IRQHandler+0xc8>
 8001470:	68bb      	ldr	r3, [r7, #8]
 8001472:	f003 0304 	and.w	r3, r3, #4
 8001476:	2b00      	cmp	r3, #0
 8001478:	d04a      	beq.n	8001510 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f003 0320 	and.w	r3, r3, #32
 8001484:	2b00      	cmp	r3, #0
 8001486:	d107      	bne.n	8001498 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	681a      	ldr	r2, [r3, #0]
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f022 0204 	bic.w	r2, r2, #4
 8001496:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4a66      	ldr	r2, [pc, #408]	@ (8001638 <HAL_DMA_IRQHandler+0x1f0>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d029      	beq.n	80014f6 <HAL_DMA_IRQHandler+0xae>
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4a65      	ldr	r2, [pc, #404]	@ (800163c <HAL_DMA_IRQHandler+0x1f4>)
 80014a8:	4293      	cmp	r3, r2
 80014aa:	d022      	beq.n	80014f2 <HAL_DMA_IRQHandler+0xaa>
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4a63      	ldr	r2, [pc, #396]	@ (8001640 <HAL_DMA_IRQHandler+0x1f8>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d01a      	beq.n	80014ec <HAL_DMA_IRQHandler+0xa4>
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4a62      	ldr	r2, [pc, #392]	@ (8001644 <HAL_DMA_IRQHandler+0x1fc>)
 80014bc:	4293      	cmp	r3, r2
 80014be:	d012      	beq.n	80014e6 <HAL_DMA_IRQHandler+0x9e>
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a60      	ldr	r2, [pc, #384]	@ (8001648 <HAL_DMA_IRQHandler+0x200>)
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d00a      	beq.n	80014e0 <HAL_DMA_IRQHandler+0x98>
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	4a5f      	ldr	r2, [pc, #380]	@ (800164c <HAL_DMA_IRQHandler+0x204>)
 80014d0:	4293      	cmp	r3, r2
 80014d2:	d102      	bne.n	80014da <HAL_DMA_IRQHandler+0x92>
 80014d4:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80014d8:	e00e      	b.n	80014f8 <HAL_DMA_IRQHandler+0xb0>
 80014da:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80014de:	e00b      	b.n	80014f8 <HAL_DMA_IRQHandler+0xb0>
 80014e0:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80014e4:	e008      	b.n	80014f8 <HAL_DMA_IRQHandler+0xb0>
 80014e6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80014ea:	e005      	b.n	80014f8 <HAL_DMA_IRQHandler+0xb0>
 80014ec:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80014f0:	e002      	b.n	80014f8 <HAL_DMA_IRQHandler+0xb0>
 80014f2:	2340      	movs	r3, #64	@ 0x40
 80014f4:	e000      	b.n	80014f8 <HAL_DMA_IRQHandler+0xb0>
 80014f6:	2304      	movs	r3, #4
 80014f8:	4a55      	ldr	r2, [pc, #340]	@ (8001650 <HAL_DMA_IRQHandler+0x208>)
 80014fa:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001500:	2b00      	cmp	r3, #0
 8001502:	f000 8094 	beq.w	800162e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800150a:	6878      	ldr	r0, [r7, #4]
 800150c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800150e:	e08e      	b.n	800162e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001514:	2202      	movs	r2, #2
 8001516:	409a      	lsls	r2, r3
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	4013      	ands	r3, r2
 800151c:	2b00      	cmp	r3, #0
 800151e:	d056      	beq.n	80015ce <HAL_DMA_IRQHandler+0x186>
 8001520:	68bb      	ldr	r3, [r7, #8]
 8001522:	f003 0302 	and.w	r3, r3, #2
 8001526:	2b00      	cmp	r3, #0
 8001528:	d051      	beq.n	80015ce <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f003 0320 	and.w	r3, r3, #32
 8001534:	2b00      	cmp	r3, #0
 8001536:	d10b      	bne.n	8001550 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	681a      	ldr	r2, [r3, #0]
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f022 020a 	bic.w	r2, r2, #10
 8001546:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	2201      	movs	r2, #1
 800154c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a38      	ldr	r2, [pc, #224]	@ (8001638 <HAL_DMA_IRQHandler+0x1f0>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d029      	beq.n	80015ae <HAL_DMA_IRQHandler+0x166>
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	4a37      	ldr	r2, [pc, #220]	@ (800163c <HAL_DMA_IRQHandler+0x1f4>)
 8001560:	4293      	cmp	r3, r2
 8001562:	d022      	beq.n	80015aa <HAL_DMA_IRQHandler+0x162>
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a35      	ldr	r2, [pc, #212]	@ (8001640 <HAL_DMA_IRQHandler+0x1f8>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d01a      	beq.n	80015a4 <HAL_DMA_IRQHandler+0x15c>
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4a34      	ldr	r2, [pc, #208]	@ (8001644 <HAL_DMA_IRQHandler+0x1fc>)
 8001574:	4293      	cmp	r3, r2
 8001576:	d012      	beq.n	800159e <HAL_DMA_IRQHandler+0x156>
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4a32      	ldr	r2, [pc, #200]	@ (8001648 <HAL_DMA_IRQHandler+0x200>)
 800157e:	4293      	cmp	r3, r2
 8001580:	d00a      	beq.n	8001598 <HAL_DMA_IRQHandler+0x150>
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4a31      	ldr	r2, [pc, #196]	@ (800164c <HAL_DMA_IRQHandler+0x204>)
 8001588:	4293      	cmp	r3, r2
 800158a:	d102      	bne.n	8001592 <HAL_DMA_IRQHandler+0x14a>
 800158c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001590:	e00e      	b.n	80015b0 <HAL_DMA_IRQHandler+0x168>
 8001592:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001596:	e00b      	b.n	80015b0 <HAL_DMA_IRQHandler+0x168>
 8001598:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800159c:	e008      	b.n	80015b0 <HAL_DMA_IRQHandler+0x168>
 800159e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80015a2:	e005      	b.n	80015b0 <HAL_DMA_IRQHandler+0x168>
 80015a4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80015a8:	e002      	b.n	80015b0 <HAL_DMA_IRQHandler+0x168>
 80015aa:	2320      	movs	r3, #32
 80015ac:	e000      	b.n	80015b0 <HAL_DMA_IRQHandler+0x168>
 80015ae:	2302      	movs	r3, #2
 80015b0:	4a27      	ldr	r2, [pc, #156]	@ (8001650 <HAL_DMA_IRQHandler+0x208>)
 80015b2:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2200      	movs	r2, #0
 80015b8:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d034      	beq.n	800162e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015c8:	6878      	ldr	r0, [r7, #4]
 80015ca:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80015cc:	e02f      	b.n	800162e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015d2:	2208      	movs	r2, #8
 80015d4:	409a      	lsls	r2, r3
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	4013      	ands	r3, r2
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d028      	beq.n	8001630 <HAL_DMA_IRQHandler+0x1e8>
 80015de:	68bb      	ldr	r3, [r7, #8]
 80015e0:	f003 0308 	and.w	r3, r3, #8
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d023      	beq.n	8001630 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	681a      	ldr	r2, [r3, #0]
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f022 020e 	bic.w	r2, r2, #14
 80015f6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001600:	2101      	movs	r1, #1
 8001602:	fa01 f202 	lsl.w	r2, r1, r2
 8001606:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	2201      	movs	r2, #1
 800160c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	2201      	movs	r2, #1
 8001612:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2200      	movs	r2, #0
 800161a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001622:	2b00      	cmp	r3, #0
 8001624:	d004      	beq.n	8001630 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800162a:	6878      	ldr	r0, [r7, #4]
 800162c:	4798      	blx	r3
    }
  }
  return;
 800162e:	bf00      	nop
 8001630:	bf00      	nop
}
 8001632:	3710      	adds	r7, #16
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}
 8001638:	40020008 	.word	0x40020008
 800163c:	4002001c 	.word	0x4002001c
 8001640:	40020030 	.word	0x40020030
 8001644:	40020044 	.word	0x40020044
 8001648:	40020058 	.word	0x40020058
 800164c:	4002006c 	.word	0x4002006c
 8001650:	40020000 	.word	0x40020000

08001654 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001654:	b480      	push	{r7}
 8001656:	b085      	sub	sp, #20
 8001658:	af00      	add	r7, sp, #0
 800165a:	60f8      	str	r0, [r7, #12]
 800165c:	60b9      	str	r1, [r7, #8]
 800165e:	607a      	str	r2, [r7, #4]
 8001660:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800166a:	2101      	movs	r1, #1
 800166c:	fa01 f202 	lsl.w	r2, r1, r2
 8001670:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	683a      	ldr	r2, [r7, #0]
 8001678:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	2b10      	cmp	r3, #16
 8001680:	d108      	bne.n	8001694 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	687a      	ldr	r2, [r7, #4]
 8001688:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	68ba      	ldr	r2, [r7, #8]
 8001690:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001692:	e007      	b.n	80016a4 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	68ba      	ldr	r2, [r7, #8]
 800169a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	687a      	ldr	r2, [r7, #4]
 80016a2:	60da      	str	r2, [r3, #12]
}
 80016a4:	bf00      	nop
 80016a6:	3714      	adds	r7, #20
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bc80      	pop	{r7}
 80016ac:	4770      	bx	lr
	...

080016b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b08b      	sub	sp, #44	@ 0x2c
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
 80016b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016ba:	2300      	movs	r3, #0
 80016bc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80016be:	2300      	movs	r3, #0
 80016c0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016c2:	e169      	b.n	8001998 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80016c4:	2201      	movs	r2, #1
 80016c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016c8:	fa02 f303 	lsl.w	r3, r2, r3
 80016cc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	69fa      	ldr	r2, [r7, #28]
 80016d4:	4013      	ands	r3, r2
 80016d6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80016d8:	69ba      	ldr	r2, [r7, #24]
 80016da:	69fb      	ldr	r3, [r7, #28]
 80016dc:	429a      	cmp	r2, r3
 80016de:	f040 8158 	bne.w	8001992 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	4a9a      	ldr	r2, [pc, #616]	@ (8001950 <HAL_GPIO_Init+0x2a0>)
 80016e8:	4293      	cmp	r3, r2
 80016ea:	d05e      	beq.n	80017aa <HAL_GPIO_Init+0xfa>
 80016ec:	4a98      	ldr	r2, [pc, #608]	@ (8001950 <HAL_GPIO_Init+0x2a0>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d875      	bhi.n	80017de <HAL_GPIO_Init+0x12e>
 80016f2:	4a98      	ldr	r2, [pc, #608]	@ (8001954 <HAL_GPIO_Init+0x2a4>)
 80016f4:	4293      	cmp	r3, r2
 80016f6:	d058      	beq.n	80017aa <HAL_GPIO_Init+0xfa>
 80016f8:	4a96      	ldr	r2, [pc, #600]	@ (8001954 <HAL_GPIO_Init+0x2a4>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d86f      	bhi.n	80017de <HAL_GPIO_Init+0x12e>
 80016fe:	4a96      	ldr	r2, [pc, #600]	@ (8001958 <HAL_GPIO_Init+0x2a8>)
 8001700:	4293      	cmp	r3, r2
 8001702:	d052      	beq.n	80017aa <HAL_GPIO_Init+0xfa>
 8001704:	4a94      	ldr	r2, [pc, #592]	@ (8001958 <HAL_GPIO_Init+0x2a8>)
 8001706:	4293      	cmp	r3, r2
 8001708:	d869      	bhi.n	80017de <HAL_GPIO_Init+0x12e>
 800170a:	4a94      	ldr	r2, [pc, #592]	@ (800195c <HAL_GPIO_Init+0x2ac>)
 800170c:	4293      	cmp	r3, r2
 800170e:	d04c      	beq.n	80017aa <HAL_GPIO_Init+0xfa>
 8001710:	4a92      	ldr	r2, [pc, #584]	@ (800195c <HAL_GPIO_Init+0x2ac>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d863      	bhi.n	80017de <HAL_GPIO_Init+0x12e>
 8001716:	4a92      	ldr	r2, [pc, #584]	@ (8001960 <HAL_GPIO_Init+0x2b0>)
 8001718:	4293      	cmp	r3, r2
 800171a:	d046      	beq.n	80017aa <HAL_GPIO_Init+0xfa>
 800171c:	4a90      	ldr	r2, [pc, #576]	@ (8001960 <HAL_GPIO_Init+0x2b0>)
 800171e:	4293      	cmp	r3, r2
 8001720:	d85d      	bhi.n	80017de <HAL_GPIO_Init+0x12e>
 8001722:	2b12      	cmp	r3, #18
 8001724:	d82a      	bhi.n	800177c <HAL_GPIO_Init+0xcc>
 8001726:	2b12      	cmp	r3, #18
 8001728:	d859      	bhi.n	80017de <HAL_GPIO_Init+0x12e>
 800172a:	a201      	add	r2, pc, #4	@ (adr r2, 8001730 <HAL_GPIO_Init+0x80>)
 800172c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001730:	080017ab 	.word	0x080017ab
 8001734:	08001785 	.word	0x08001785
 8001738:	08001797 	.word	0x08001797
 800173c:	080017d9 	.word	0x080017d9
 8001740:	080017df 	.word	0x080017df
 8001744:	080017df 	.word	0x080017df
 8001748:	080017df 	.word	0x080017df
 800174c:	080017df 	.word	0x080017df
 8001750:	080017df 	.word	0x080017df
 8001754:	080017df 	.word	0x080017df
 8001758:	080017df 	.word	0x080017df
 800175c:	080017df 	.word	0x080017df
 8001760:	080017df 	.word	0x080017df
 8001764:	080017df 	.word	0x080017df
 8001768:	080017df 	.word	0x080017df
 800176c:	080017df 	.word	0x080017df
 8001770:	080017df 	.word	0x080017df
 8001774:	0800178d 	.word	0x0800178d
 8001778:	080017a1 	.word	0x080017a1
 800177c:	4a79      	ldr	r2, [pc, #484]	@ (8001964 <HAL_GPIO_Init+0x2b4>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d013      	beq.n	80017aa <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001782:	e02c      	b.n	80017de <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	68db      	ldr	r3, [r3, #12]
 8001788:	623b      	str	r3, [r7, #32]
          break;
 800178a:	e029      	b.n	80017e0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	68db      	ldr	r3, [r3, #12]
 8001790:	3304      	adds	r3, #4
 8001792:	623b      	str	r3, [r7, #32]
          break;
 8001794:	e024      	b.n	80017e0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	68db      	ldr	r3, [r3, #12]
 800179a:	3308      	adds	r3, #8
 800179c:	623b      	str	r3, [r7, #32]
          break;
 800179e:	e01f      	b.n	80017e0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	68db      	ldr	r3, [r3, #12]
 80017a4:	330c      	adds	r3, #12
 80017a6:	623b      	str	r3, [r7, #32]
          break;
 80017a8:	e01a      	b.n	80017e0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	689b      	ldr	r3, [r3, #8]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d102      	bne.n	80017b8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80017b2:	2304      	movs	r3, #4
 80017b4:	623b      	str	r3, [r7, #32]
          break;
 80017b6:	e013      	b.n	80017e0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	689b      	ldr	r3, [r3, #8]
 80017bc:	2b01      	cmp	r3, #1
 80017be:	d105      	bne.n	80017cc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80017c0:	2308      	movs	r3, #8
 80017c2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	69fa      	ldr	r2, [r7, #28]
 80017c8:	611a      	str	r2, [r3, #16]
          break;
 80017ca:	e009      	b.n	80017e0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80017cc:	2308      	movs	r3, #8
 80017ce:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	69fa      	ldr	r2, [r7, #28]
 80017d4:	615a      	str	r2, [r3, #20]
          break;
 80017d6:	e003      	b.n	80017e0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80017d8:	2300      	movs	r3, #0
 80017da:	623b      	str	r3, [r7, #32]
          break;
 80017dc:	e000      	b.n	80017e0 <HAL_GPIO_Init+0x130>
          break;
 80017de:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80017e0:	69bb      	ldr	r3, [r7, #24]
 80017e2:	2bff      	cmp	r3, #255	@ 0xff
 80017e4:	d801      	bhi.n	80017ea <HAL_GPIO_Init+0x13a>
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	e001      	b.n	80017ee <HAL_GPIO_Init+0x13e>
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	3304      	adds	r3, #4
 80017ee:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80017f0:	69bb      	ldr	r3, [r7, #24]
 80017f2:	2bff      	cmp	r3, #255	@ 0xff
 80017f4:	d802      	bhi.n	80017fc <HAL_GPIO_Init+0x14c>
 80017f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017f8:	009b      	lsls	r3, r3, #2
 80017fa:	e002      	b.n	8001802 <HAL_GPIO_Init+0x152>
 80017fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017fe:	3b08      	subs	r3, #8
 8001800:	009b      	lsls	r3, r3, #2
 8001802:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001804:	697b      	ldr	r3, [r7, #20]
 8001806:	681a      	ldr	r2, [r3, #0]
 8001808:	210f      	movs	r1, #15
 800180a:	693b      	ldr	r3, [r7, #16]
 800180c:	fa01 f303 	lsl.w	r3, r1, r3
 8001810:	43db      	mvns	r3, r3
 8001812:	401a      	ands	r2, r3
 8001814:	6a39      	ldr	r1, [r7, #32]
 8001816:	693b      	ldr	r3, [r7, #16]
 8001818:	fa01 f303 	lsl.w	r3, r1, r3
 800181c:	431a      	orrs	r2, r3
 800181e:	697b      	ldr	r3, [r7, #20]
 8001820:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800182a:	2b00      	cmp	r3, #0
 800182c:	f000 80b1 	beq.w	8001992 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001830:	4b4d      	ldr	r3, [pc, #308]	@ (8001968 <HAL_GPIO_Init+0x2b8>)
 8001832:	699b      	ldr	r3, [r3, #24]
 8001834:	4a4c      	ldr	r2, [pc, #304]	@ (8001968 <HAL_GPIO_Init+0x2b8>)
 8001836:	f043 0301 	orr.w	r3, r3, #1
 800183a:	6193      	str	r3, [r2, #24]
 800183c:	4b4a      	ldr	r3, [pc, #296]	@ (8001968 <HAL_GPIO_Init+0x2b8>)
 800183e:	699b      	ldr	r3, [r3, #24]
 8001840:	f003 0301 	and.w	r3, r3, #1
 8001844:	60bb      	str	r3, [r7, #8]
 8001846:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001848:	4a48      	ldr	r2, [pc, #288]	@ (800196c <HAL_GPIO_Init+0x2bc>)
 800184a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800184c:	089b      	lsrs	r3, r3, #2
 800184e:	3302      	adds	r3, #2
 8001850:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001854:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001856:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001858:	f003 0303 	and.w	r3, r3, #3
 800185c:	009b      	lsls	r3, r3, #2
 800185e:	220f      	movs	r2, #15
 8001860:	fa02 f303 	lsl.w	r3, r2, r3
 8001864:	43db      	mvns	r3, r3
 8001866:	68fa      	ldr	r2, [r7, #12]
 8001868:	4013      	ands	r3, r2
 800186a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	4a40      	ldr	r2, [pc, #256]	@ (8001970 <HAL_GPIO_Init+0x2c0>)
 8001870:	4293      	cmp	r3, r2
 8001872:	d013      	beq.n	800189c <HAL_GPIO_Init+0x1ec>
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	4a3f      	ldr	r2, [pc, #252]	@ (8001974 <HAL_GPIO_Init+0x2c4>)
 8001878:	4293      	cmp	r3, r2
 800187a:	d00d      	beq.n	8001898 <HAL_GPIO_Init+0x1e8>
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	4a3e      	ldr	r2, [pc, #248]	@ (8001978 <HAL_GPIO_Init+0x2c8>)
 8001880:	4293      	cmp	r3, r2
 8001882:	d007      	beq.n	8001894 <HAL_GPIO_Init+0x1e4>
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	4a3d      	ldr	r2, [pc, #244]	@ (800197c <HAL_GPIO_Init+0x2cc>)
 8001888:	4293      	cmp	r3, r2
 800188a:	d101      	bne.n	8001890 <HAL_GPIO_Init+0x1e0>
 800188c:	2303      	movs	r3, #3
 800188e:	e006      	b.n	800189e <HAL_GPIO_Init+0x1ee>
 8001890:	2304      	movs	r3, #4
 8001892:	e004      	b.n	800189e <HAL_GPIO_Init+0x1ee>
 8001894:	2302      	movs	r3, #2
 8001896:	e002      	b.n	800189e <HAL_GPIO_Init+0x1ee>
 8001898:	2301      	movs	r3, #1
 800189a:	e000      	b.n	800189e <HAL_GPIO_Init+0x1ee>
 800189c:	2300      	movs	r3, #0
 800189e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80018a0:	f002 0203 	and.w	r2, r2, #3
 80018a4:	0092      	lsls	r2, r2, #2
 80018a6:	4093      	lsls	r3, r2
 80018a8:	68fa      	ldr	r2, [r7, #12]
 80018aa:	4313      	orrs	r3, r2
 80018ac:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80018ae:	492f      	ldr	r1, [pc, #188]	@ (800196c <HAL_GPIO_Init+0x2bc>)
 80018b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018b2:	089b      	lsrs	r3, r3, #2
 80018b4:	3302      	adds	r3, #2
 80018b6:	68fa      	ldr	r2, [r7, #12]
 80018b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d006      	beq.n	80018d6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80018c8:	4b2d      	ldr	r3, [pc, #180]	@ (8001980 <HAL_GPIO_Init+0x2d0>)
 80018ca:	689a      	ldr	r2, [r3, #8]
 80018cc:	492c      	ldr	r1, [pc, #176]	@ (8001980 <HAL_GPIO_Init+0x2d0>)
 80018ce:	69bb      	ldr	r3, [r7, #24]
 80018d0:	4313      	orrs	r3, r2
 80018d2:	608b      	str	r3, [r1, #8]
 80018d4:	e006      	b.n	80018e4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80018d6:	4b2a      	ldr	r3, [pc, #168]	@ (8001980 <HAL_GPIO_Init+0x2d0>)
 80018d8:	689a      	ldr	r2, [r3, #8]
 80018da:	69bb      	ldr	r3, [r7, #24]
 80018dc:	43db      	mvns	r3, r3
 80018de:	4928      	ldr	r1, [pc, #160]	@ (8001980 <HAL_GPIO_Init+0x2d0>)
 80018e0:	4013      	ands	r3, r2
 80018e2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d006      	beq.n	80018fe <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80018f0:	4b23      	ldr	r3, [pc, #140]	@ (8001980 <HAL_GPIO_Init+0x2d0>)
 80018f2:	68da      	ldr	r2, [r3, #12]
 80018f4:	4922      	ldr	r1, [pc, #136]	@ (8001980 <HAL_GPIO_Init+0x2d0>)
 80018f6:	69bb      	ldr	r3, [r7, #24]
 80018f8:	4313      	orrs	r3, r2
 80018fa:	60cb      	str	r3, [r1, #12]
 80018fc:	e006      	b.n	800190c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80018fe:	4b20      	ldr	r3, [pc, #128]	@ (8001980 <HAL_GPIO_Init+0x2d0>)
 8001900:	68da      	ldr	r2, [r3, #12]
 8001902:	69bb      	ldr	r3, [r7, #24]
 8001904:	43db      	mvns	r3, r3
 8001906:	491e      	ldr	r1, [pc, #120]	@ (8001980 <HAL_GPIO_Init+0x2d0>)
 8001908:	4013      	ands	r3, r2
 800190a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001914:	2b00      	cmp	r3, #0
 8001916:	d006      	beq.n	8001926 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001918:	4b19      	ldr	r3, [pc, #100]	@ (8001980 <HAL_GPIO_Init+0x2d0>)
 800191a:	685a      	ldr	r2, [r3, #4]
 800191c:	4918      	ldr	r1, [pc, #96]	@ (8001980 <HAL_GPIO_Init+0x2d0>)
 800191e:	69bb      	ldr	r3, [r7, #24]
 8001920:	4313      	orrs	r3, r2
 8001922:	604b      	str	r3, [r1, #4]
 8001924:	e006      	b.n	8001934 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001926:	4b16      	ldr	r3, [pc, #88]	@ (8001980 <HAL_GPIO_Init+0x2d0>)
 8001928:	685a      	ldr	r2, [r3, #4]
 800192a:	69bb      	ldr	r3, [r7, #24]
 800192c:	43db      	mvns	r3, r3
 800192e:	4914      	ldr	r1, [pc, #80]	@ (8001980 <HAL_GPIO_Init+0x2d0>)
 8001930:	4013      	ands	r3, r2
 8001932:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800193c:	2b00      	cmp	r3, #0
 800193e:	d021      	beq.n	8001984 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001940:	4b0f      	ldr	r3, [pc, #60]	@ (8001980 <HAL_GPIO_Init+0x2d0>)
 8001942:	681a      	ldr	r2, [r3, #0]
 8001944:	490e      	ldr	r1, [pc, #56]	@ (8001980 <HAL_GPIO_Init+0x2d0>)
 8001946:	69bb      	ldr	r3, [r7, #24]
 8001948:	4313      	orrs	r3, r2
 800194a:	600b      	str	r3, [r1, #0]
 800194c:	e021      	b.n	8001992 <HAL_GPIO_Init+0x2e2>
 800194e:	bf00      	nop
 8001950:	10320000 	.word	0x10320000
 8001954:	10310000 	.word	0x10310000
 8001958:	10220000 	.word	0x10220000
 800195c:	10210000 	.word	0x10210000
 8001960:	10120000 	.word	0x10120000
 8001964:	10110000 	.word	0x10110000
 8001968:	40021000 	.word	0x40021000
 800196c:	40010000 	.word	0x40010000
 8001970:	40010800 	.word	0x40010800
 8001974:	40010c00 	.word	0x40010c00
 8001978:	40011000 	.word	0x40011000
 800197c:	40011400 	.word	0x40011400
 8001980:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001984:	4b0b      	ldr	r3, [pc, #44]	@ (80019b4 <HAL_GPIO_Init+0x304>)
 8001986:	681a      	ldr	r2, [r3, #0]
 8001988:	69bb      	ldr	r3, [r7, #24]
 800198a:	43db      	mvns	r3, r3
 800198c:	4909      	ldr	r1, [pc, #36]	@ (80019b4 <HAL_GPIO_Init+0x304>)
 800198e:	4013      	ands	r3, r2
 8001990:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001992:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001994:	3301      	adds	r3, #1
 8001996:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	681a      	ldr	r2, [r3, #0]
 800199c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800199e:	fa22 f303 	lsr.w	r3, r2, r3
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	f47f ae8e 	bne.w	80016c4 <HAL_GPIO_Init+0x14>
  }
}
 80019a8:	bf00      	nop
 80019aa:	bf00      	nop
 80019ac:	372c      	adds	r7, #44	@ 0x2c
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bc80      	pop	{r7}
 80019b2:	4770      	bx	lr
 80019b4:	40010400 	.word	0x40010400

080019b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b083      	sub	sp, #12
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
 80019c0:	460b      	mov	r3, r1
 80019c2:	807b      	strh	r3, [r7, #2]
 80019c4:	4613      	mov	r3, r2
 80019c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80019c8:	787b      	ldrb	r3, [r7, #1]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d003      	beq.n	80019d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80019ce:	887a      	ldrh	r2, [r7, #2]
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80019d4:	e003      	b.n	80019de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80019d6:	887b      	ldrh	r3, [r7, #2]
 80019d8:	041a      	lsls	r2, r3, #16
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	611a      	str	r2, [r3, #16]
}
 80019de:	bf00      	nop
 80019e0:	370c      	adds	r7, #12
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bc80      	pop	{r7}
 80019e6:	4770      	bx	lr

080019e8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b082      	sub	sp, #8
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	4603      	mov	r3, r0
 80019f0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80019f2:	4b08      	ldr	r3, [pc, #32]	@ (8001a14 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80019f4:	695a      	ldr	r2, [r3, #20]
 80019f6:	88fb      	ldrh	r3, [r7, #6]
 80019f8:	4013      	ands	r3, r2
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d006      	beq.n	8001a0c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80019fe:	4a05      	ldr	r2, [pc, #20]	@ (8001a14 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a00:	88fb      	ldrh	r3, [r7, #6]
 8001a02:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001a04:	88fb      	ldrh	r3, [r7, #6]
 8001a06:	4618      	mov	r0, r3
 8001a08:	f7fe ff7c 	bl	8000904 <HAL_GPIO_EXTI_Callback>
  }
}
 8001a0c:	bf00      	nop
 8001a0e:	3708      	adds	r7, #8
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}
 8001a14:	40010400 	.word	0x40010400

08001a18 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b084      	sub	sp, #16
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d101      	bne.n	8001a2a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001a26:	2301      	movs	r3, #1
 8001a28:	e12b      	b.n	8001c82 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001a30:	b2db      	uxtb	r3, r3
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d106      	bne.n	8001a44 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2200      	movs	r2, #0
 8001a3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001a3e:	6878      	ldr	r0, [r7, #4]
 8001a40:	f7fe fc92 	bl	8000368 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2224      	movs	r2, #36	@ 0x24
 8001a48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	681a      	ldr	r2, [r3, #0]
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f022 0201 	bic.w	r2, r2, #1
 8001a5a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	681a      	ldr	r2, [r3, #0]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001a6a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	681a      	ldr	r2, [r3, #0]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001a7a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001a7c:	f001 f888 	bl	8002b90 <HAL_RCC_GetPCLK1Freq>
 8001a80:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	4a81      	ldr	r2, [pc, #516]	@ (8001c8c <HAL_I2C_Init+0x274>)
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	d807      	bhi.n	8001a9c <HAL_I2C_Init+0x84>
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	4a80      	ldr	r2, [pc, #512]	@ (8001c90 <HAL_I2C_Init+0x278>)
 8001a90:	4293      	cmp	r3, r2
 8001a92:	bf94      	ite	ls
 8001a94:	2301      	movls	r3, #1
 8001a96:	2300      	movhi	r3, #0
 8001a98:	b2db      	uxtb	r3, r3
 8001a9a:	e006      	b.n	8001aaa <HAL_I2C_Init+0x92>
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	4a7d      	ldr	r2, [pc, #500]	@ (8001c94 <HAL_I2C_Init+0x27c>)
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	bf94      	ite	ls
 8001aa4:	2301      	movls	r3, #1
 8001aa6:	2300      	movhi	r3, #0
 8001aa8:	b2db      	uxtb	r3, r3
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d001      	beq.n	8001ab2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e0e7      	b.n	8001c82 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	4a78      	ldr	r2, [pc, #480]	@ (8001c98 <HAL_I2C_Init+0x280>)
 8001ab6:	fba2 2303 	umull	r2, r3, r2, r3
 8001aba:	0c9b      	lsrs	r3, r3, #18
 8001abc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	68ba      	ldr	r2, [r7, #8]
 8001ace:	430a      	orrs	r2, r1
 8001ad0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	6a1b      	ldr	r3, [r3, #32]
 8001ad8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	4a6a      	ldr	r2, [pc, #424]	@ (8001c8c <HAL_I2C_Init+0x274>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d802      	bhi.n	8001aec <HAL_I2C_Init+0xd4>
 8001ae6:	68bb      	ldr	r3, [r7, #8]
 8001ae8:	3301      	adds	r3, #1
 8001aea:	e009      	b.n	8001b00 <HAL_I2C_Init+0xe8>
 8001aec:	68bb      	ldr	r3, [r7, #8]
 8001aee:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001af2:	fb02 f303 	mul.w	r3, r2, r3
 8001af6:	4a69      	ldr	r2, [pc, #420]	@ (8001c9c <HAL_I2C_Init+0x284>)
 8001af8:	fba2 2303 	umull	r2, r3, r2, r3
 8001afc:	099b      	lsrs	r3, r3, #6
 8001afe:	3301      	adds	r3, #1
 8001b00:	687a      	ldr	r2, [r7, #4]
 8001b02:	6812      	ldr	r2, [r2, #0]
 8001b04:	430b      	orrs	r3, r1
 8001b06:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	69db      	ldr	r3, [r3, #28]
 8001b0e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001b12:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	495c      	ldr	r1, [pc, #368]	@ (8001c8c <HAL_I2C_Init+0x274>)
 8001b1c:	428b      	cmp	r3, r1
 8001b1e:	d819      	bhi.n	8001b54 <HAL_I2C_Init+0x13c>
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	1e59      	subs	r1, r3, #1
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	005b      	lsls	r3, r3, #1
 8001b2a:	fbb1 f3f3 	udiv	r3, r1, r3
 8001b2e:	1c59      	adds	r1, r3, #1
 8001b30:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001b34:	400b      	ands	r3, r1
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d00a      	beq.n	8001b50 <HAL_I2C_Init+0x138>
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	1e59      	subs	r1, r3, #1
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	005b      	lsls	r3, r3, #1
 8001b44:	fbb1 f3f3 	udiv	r3, r1, r3
 8001b48:	3301      	adds	r3, #1
 8001b4a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b4e:	e051      	b.n	8001bf4 <HAL_I2C_Init+0x1dc>
 8001b50:	2304      	movs	r3, #4
 8001b52:	e04f      	b.n	8001bf4 <HAL_I2C_Init+0x1dc>
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	689b      	ldr	r3, [r3, #8]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d111      	bne.n	8001b80 <HAL_I2C_Init+0x168>
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	1e58      	subs	r0, r3, #1
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6859      	ldr	r1, [r3, #4]
 8001b64:	460b      	mov	r3, r1
 8001b66:	005b      	lsls	r3, r3, #1
 8001b68:	440b      	add	r3, r1
 8001b6a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b6e:	3301      	adds	r3, #1
 8001b70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	bf0c      	ite	eq
 8001b78:	2301      	moveq	r3, #1
 8001b7a:	2300      	movne	r3, #0
 8001b7c:	b2db      	uxtb	r3, r3
 8001b7e:	e012      	b.n	8001ba6 <HAL_I2C_Init+0x18e>
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	1e58      	subs	r0, r3, #1
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6859      	ldr	r1, [r3, #4]
 8001b88:	460b      	mov	r3, r1
 8001b8a:	009b      	lsls	r3, r3, #2
 8001b8c:	440b      	add	r3, r1
 8001b8e:	0099      	lsls	r1, r3, #2
 8001b90:	440b      	add	r3, r1
 8001b92:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b96:	3301      	adds	r3, #1
 8001b98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	bf0c      	ite	eq
 8001ba0:	2301      	moveq	r3, #1
 8001ba2:	2300      	movne	r3, #0
 8001ba4:	b2db      	uxtb	r3, r3
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d001      	beq.n	8001bae <HAL_I2C_Init+0x196>
 8001baa:	2301      	movs	r3, #1
 8001bac:	e022      	b.n	8001bf4 <HAL_I2C_Init+0x1dc>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	689b      	ldr	r3, [r3, #8]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d10e      	bne.n	8001bd4 <HAL_I2C_Init+0x1bc>
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	1e58      	subs	r0, r3, #1
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6859      	ldr	r1, [r3, #4]
 8001bbe:	460b      	mov	r3, r1
 8001bc0:	005b      	lsls	r3, r3, #1
 8001bc2:	440b      	add	r3, r1
 8001bc4:	fbb0 f3f3 	udiv	r3, r0, r3
 8001bc8:	3301      	adds	r3, #1
 8001bca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001bd2:	e00f      	b.n	8001bf4 <HAL_I2C_Init+0x1dc>
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	1e58      	subs	r0, r3, #1
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6859      	ldr	r1, [r3, #4]
 8001bdc:	460b      	mov	r3, r1
 8001bde:	009b      	lsls	r3, r3, #2
 8001be0:	440b      	add	r3, r1
 8001be2:	0099      	lsls	r1, r3, #2
 8001be4:	440b      	add	r3, r1
 8001be6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001bea:	3301      	adds	r3, #1
 8001bec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bf0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001bf4:	6879      	ldr	r1, [r7, #4]
 8001bf6:	6809      	ldr	r1, [r1, #0]
 8001bf8:	4313      	orrs	r3, r2
 8001bfa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	69da      	ldr	r2, [r3, #28]
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6a1b      	ldr	r3, [r3, #32]
 8001c0e:	431a      	orrs	r2, r3
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	430a      	orrs	r2, r1
 8001c16:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	689b      	ldr	r3, [r3, #8]
 8001c1e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001c22:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001c26:	687a      	ldr	r2, [r7, #4]
 8001c28:	6911      	ldr	r1, [r2, #16]
 8001c2a:	687a      	ldr	r2, [r7, #4]
 8001c2c:	68d2      	ldr	r2, [r2, #12]
 8001c2e:	4311      	orrs	r1, r2
 8001c30:	687a      	ldr	r2, [r7, #4]
 8001c32:	6812      	ldr	r2, [r2, #0]
 8001c34:	430b      	orrs	r3, r1
 8001c36:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	68db      	ldr	r3, [r3, #12]
 8001c3e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	695a      	ldr	r2, [r3, #20]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	699b      	ldr	r3, [r3, #24]
 8001c4a:	431a      	orrs	r2, r3
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	430a      	orrs	r2, r1
 8001c52:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	681a      	ldr	r2, [r3, #0]
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f042 0201 	orr.w	r2, r2, #1
 8001c62:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2200      	movs	r2, #0
 8001c68:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2220      	movs	r2, #32
 8001c6e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2200      	movs	r2, #0
 8001c76:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001c80:	2300      	movs	r3, #0
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	3710      	adds	r7, #16
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	000186a0 	.word	0x000186a0
 8001c90:	001e847f 	.word	0x001e847f
 8001c94:	003d08ff 	.word	0x003d08ff
 8001c98:	431bde83 	.word	0x431bde83
 8001c9c:	10624dd3 	.word	0x10624dd3

08001ca0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b088      	sub	sp, #32
 8001ca4:	af02      	add	r7, sp, #8
 8001ca6:	60f8      	str	r0, [r7, #12]
 8001ca8:	4608      	mov	r0, r1
 8001caa:	4611      	mov	r1, r2
 8001cac:	461a      	mov	r2, r3
 8001cae:	4603      	mov	r3, r0
 8001cb0:	817b      	strh	r3, [r7, #10]
 8001cb2:	460b      	mov	r3, r1
 8001cb4:	813b      	strh	r3, [r7, #8]
 8001cb6:	4613      	mov	r3, r2
 8001cb8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001cba:	f7ff f8ff 	bl	8000ebc <HAL_GetTick>
 8001cbe:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001cc6:	b2db      	uxtb	r3, r3
 8001cc8:	2b20      	cmp	r3, #32
 8001cca:	f040 80d9 	bne.w	8001e80 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	9300      	str	r3, [sp, #0]
 8001cd2:	2319      	movs	r3, #25
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	496d      	ldr	r1, [pc, #436]	@ (8001e8c <HAL_I2C_Mem_Write+0x1ec>)
 8001cd8:	68f8      	ldr	r0, [r7, #12]
 8001cda:	f000 f971 	bl	8001fc0 <I2C_WaitOnFlagUntilTimeout>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d001      	beq.n	8001ce8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001ce4:	2302      	movs	r3, #2
 8001ce6:	e0cc      	b.n	8001e82 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001cee:	2b01      	cmp	r3, #1
 8001cf0:	d101      	bne.n	8001cf6 <HAL_I2C_Mem_Write+0x56>
 8001cf2:	2302      	movs	r3, #2
 8001cf4:	e0c5      	b.n	8001e82 <HAL_I2C_Mem_Write+0x1e2>
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	2201      	movs	r2, #1
 8001cfa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f003 0301 	and.w	r3, r3, #1
 8001d08:	2b01      	cmp	r3, #1
 8001d0a:	d007      	beq.n	8001d1c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	681a      	ldr	r2, [r3, #0]
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f042 0201 	orr.w	r2, r2, #1
 8001d1a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	681a      	ldr	r2, [r3, #0]
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001d2a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	2221      	movs	r2, #33	@ 0x21
 8001d30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	2240      	movs	r2, #64	@ 0x40
 8001d38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	2200      	movs	r2, #0
 8001d40:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	6a3a      	ldr	r2, [r7, #32]
 8001d46:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001d4c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d52:	b29a      	uxth	r2, r3
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	4a4d      	ldr	r2, [pc, #308]	@ (8001e90 <HAL_I2C_Mem_Write+0x1f0>)
 8001d5c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001d5e:	88f8      	ldrh	r0, [r7, #6]
 8001d60:	893a      	ldrh	r2, [r7, #8]
 8001d62:	8979      	ldrh	r1, [r7, #10]
 8001d64:	697b      	ldr	r3, [r7, #20]
 8001d66:	9301      	str	r3, [sp, #4]
 8001d68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d6a:	9300      	str	r3, [sp, #0]
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	68f8      	ldr	r0, [r7, #12]
 8001d70:	f000 f890 	bl	8001e94 <I2C_RequestMemoryWrite>
 8001d74:	4603      	mov	r3, r0
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d052      	beq.n	8001e20 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	e081      	b.n	8001e82 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d7e:	697a      	ldr	r2, [r7, #20]
 8001d80:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001d82:	68f8      	ldr	r0, [r7, #12]
 8001d84:	f000 fa36 	bl	80021f4 <I2C_WaitOnTXEFlagUntilTimeout>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d00d      	beq.n	8001daa <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d92:	2b04      	cmp	r3, #4
 8001d94:	d107      	bne.n	8001da6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	681a      	ldr	r2, [r3, #0]
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001da4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001da6:	2301      	movs	r3, #1
 8001da8:	e06b      	b.n	8001e82 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dae:	781a      	ldrb	r2, [r3, #0]
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dba:	1c5a      	adds	r2, r3, #1
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001dc4:	3b01      	subs	r3, #1
 8001dc6:	b29a      	uxth	r2, r3
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001dd0:	b29b      	uxth	r3, r3
 8001dd2:	3b01      	subs	r3, #1
 8001dd4:	b29a      	uxth	r2, r3
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	695b      	ldr	r3, [r3, #20]
 8001de0:	f003 0304 	and.w	r3, r3, #4
 8001de4:	2b04      	cmp	r3, #4
 8001de6:	d11b      	bne.n	8001e20 <HAL_I2C_Mem_Write+0x180>
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d017      	beq.n	8001e20 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001df4:	781a      	ldrb	r2, [r3, #0]
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e00:	1c5a      	adds	r2, r3, #1
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e0a:	3b01      	subs	r3, #1
 8001e0c:	b29a      	uxth	r2, r3
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e16:	b29b      	uxth	r3, r3
 8001e18:	3b01      	subs	r3, #1
 8001e1a:	b29a      	uxth	r2, r3
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d1aa      	bne.n	8001d7e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e28:	697a      	ldr	r2, [r7, #20]
 8001e2a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001e2c:	68f8      	ldr	r0, [r7, #12]
 8001e2e:	f000 fa29 	bl	8002284 <I2C_WaitOnBTFFlagUntilTimeout>
 8001e32:	4603      	mov	r3, r0
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d00d      	beq.n	8001e54 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e3c:	2b04      	cmp	r3, #4
 8001e3e:	d107      	bne.n	8001e50 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	681a      	ldr	r2, [r3, #0]
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001e4e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001e50:	2301      	movs	r3, #1
 8001e52:	e016      	b.n	8001e82 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	681a      	ldr	r2, [r3, #0]
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001e62:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	2220      	movs	r2, #32
 8001e68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	2200      	movs	r2, #0
 8001e70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	2200      	movs	r2, #0
 8001e78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	e000      	b.n	8001e82 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001e80:	2302      	movs	r3, #2
  }
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	3718      	adds	r7, #24
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	00100002 	.word	0x00100002
 8001e90:	ffff0000 	.word	0xffff0000

08001e94 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b088      	sub	sp, #32
 8001e98:	af02      	add	r7, sp, #8
 8001e9a:	60f8      	str	r0, [r7, #12]
 8001e9c:	4608      	mov	r0, r1
 8001e9e:	4611      	mov	r1, r2
 8001ea0:	461a      	mov	r2, r3
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	817b      	strh	r3, [r7, #10]
 8001ea6:	460b      	mov	r3, r1
 8001ea8:	813b      	strh	r3, [r7, #8]
 8001eaa:	4613      	mov	r3, r2
 8001eac:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	681a      	ldr	r2, [r3, #0]
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001ebc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001ebe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ec0:	9300      	str	r3, [sp, #0]
 8001ec2:	6a3b      	ldr	r3, [r7, #32]
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001eca:	68f8      	ldr	r0, [r7, #12]
 8001ecc:	f000 f878 	bl	8001fc0 <I2C_WaitOnFlagUntilTimeout>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d00d      	beq.n	8001ef2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ee0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001ee4:	d103      	bne.n	8001eee <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001eec:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001eee:	2303      	movs	r3, #3
 8001ef0:	e05f      	b.n	8001fb2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001ef2:	897b      	ldrh	r3, [r7, #10]
 8001ef4:	b2db      	uxtb	r3, r3
 8001ef6:	461a      	mov	r2, r3
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001f00:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001f02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f04:	6a3a      	ldr	r2, [r7, #32]
 8001f06:	492d      	ldr	r1, [pc, #180]	@ (8001fbc <I2C_RequestMemoryWrite+0x128>)
 8001f08:	68f8      	ldr	r0, [r7, #12]
 8001f0a:	f000 f8d3 	bl	80020b4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d001      	beq.n	8001f18 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8001f14:	2301      	movs	r3, #1
 8001f16:	e04c      	b.n	8001fb2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f18:	2300      	movs	r3, #0
 8001f1a:	617b      	str	r3, [r7, #20]
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	695b      	ldr	r3, [r3, #20]
 8001f22:	617b      	str	r3, [r7, #20]
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	699b      	ldr	r3, [r3, #24]
 8001f2a:	617b      	str	r3, [r7, #20]
 8001f2c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f30:	6a39      	ldr	r1, [r7, #32]
 8001f32:	68f8      	ldr	r0, [r7, #12]
 8001f34:	f000 f95e 	bl	80021f4 <I2C_WaitOnTXEFlagUntilTimeout>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d00d      	beq.n	8001f5a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f42:	2b04      	cmp	r3, #4
 8001f44:	d107      	bne.n	8001f56 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	681a      	ldr	r2, [r3, #0]
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001f54:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001f56:	2301      	movs	r3, #1
 8001f58:	e02b      	b.n	8001fb2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001f5a:	88fb      	ldrh	r3, [r7, #6]
 8001f5c:	2b01      	cmp	r3, #1
 8001f5e:	d105      	bne.n	8001f6c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001f60:	893b      	ldrh	r3, [r7, #8]
 8001f62:	b2da      	uxtb	r2, r3
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	611a      	str	r2, [r3, #16]
 8001f6a:	e021      	b.n	8001fb0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001f6c:	893b      	ldrh	r3, [r7, #8]
 8001f6e:	0a1b      	lsrs	r3, r3, #8
 8001f70:	b29b      	uxth	r3, r3
 8001f72:	b2da      	uxtb	r2, r3
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f7c:	6a39      	ldr	r1, [r7, #32]
 8001f7e:	68f8      	ldr	r0, [r7, #12]
 8001f80:	f000 f938 	bl	80021f4 <I2C_WaitOnTXEFlagUntilTimeout>
 8001f84:	4603      	mov	r3, r0
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d00d      	beq.n	8001fa6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f8e:	2b04      	cmp	r3, #4
 8001f90:	d107      	bne.n	8001fa2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	681a      	ldr	r2, [r3, #0]
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001fa0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	e005      	b.n	8001fb2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001fa6:	893b      	ldrh	r3, [r7, #8]
 8001fa8:	b2da      	uxtb	r2, r3
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8001fb0:	2300      	movs	r3, #0
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	3718      	adds	r7, #24
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	00010002 	.word	0x00010002

08001fc0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b084      	sub	sp, #16
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	60f8      	str	r0, [r7, #12]
 8001fc8:	60b9      	str	r1, [r7, #8]
 8001fca:	603b      	str	r3, [r7, #0]
 8001fcc:	4613      	mov	r3, r2
 8001fce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001fd0:	e048      	b.n	8002064 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fd8:	d044      	beq.n	8002064 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001fda:	f7fe ff6f 	bl	8000ebc <HAL_GetTick>
 8001fde:	4602      	mov	r2, r0
 8001fe0:	69bb      	ldr	r3, [r7, #24]
 8001fe2:	1ad3      	subs	r3, r2, r3
 8001fe4:	683a      	ldr	r2, [r7, #0]
 8001fe6:	429a      	cmp	r2, r3
 8001fe8:	d302      	bcc.n	8001ff0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d139      	bne.n	8002064 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001ff0:	68bb      	ldr	r3, [r7, #8]
 8001ff2:	0c1b      	lsrs	r3, r3, #16
 8001ff4:	b2db      	uxtb	r3, r3
 8001ff6:	2b01      	cmp	r3, #1
 8001ff8:	d10d      	bne.n	8002016 <I2C_WaitOnFlagUntilTimeout+0x56>
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	695b      	ldr	r3, [r3, #20]
 8002000:	43da      	mvns	r2, r3
 8002002:	68bb      	ldr	r3, [r7, #8]
 8002004:	4013      	ands	r3, r2
 8002006:	b29b      	uxth	r3, r3
 8002008:	2b00      	cmp	r3, #0
 800200a:	bf0c      	ite	eq
 800200c:	2301      	moveq	r3, #1
 800200e:	2300      	movne	r3, #0
 8002010:	b2db      	uxtb	r3, r3
 8002012:	461a      	mov	r2, r3
 8002014:	e00c      	b.n	8002030 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	699b      	ldr	r3, [r3, #24]
 800201c:	43da      	mvns	r2, r3
 800201e:	68bb      	ldr	r3, [r7, #8]
 8002020:	4013      	ands	r3, r2
 8002022:	b29b      	uxth	r3, r3
 8002024:	2b00      	cmp	r3, #0
 8002026:	bf0c      	ite	eq
 8002028:	2301      	moveq	r3, #1
 800202a:	2300      	movne	r3, #0
 800202c:	b2db      	uxtb	r3, r3
 800202e:	461a      	mov	r2, r3
 8002030:	79fb      	ldrb	r3, [r7, #7]
 8002032:	429a      	cmp	r2, r3
 8002034:	d116      	bne.n	8002064 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	2200      	movs	r2, #0
 800203a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	2220      	movs	r2, #32
 8002040:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	2200      	movs	r2, #0
 8002048:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002050:	f043 0220 	orr.w	r2, r3, #32
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	2200      	movs	r2, #0
 800205c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002060:	2301      	movs	r3, #1
 8002062:	e023      	b.n	80020ac <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002064:	68bb      	ldr	r3, [r7, #8]
 8002066:	0c1b      	lsrs	r3, r3, #16
 8002068:	b2db      	uxtb	r3, r3
 800206a:	2b01      	cmp	r3, #1
 800206c:	d10d      	bne.n	800208a <I2C_WaitOnFlagUntilTimeout+0xca>
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	695b      	ldr	r3, [r3, #20]
 8002074:	43da      	mvns	r2, r3
 8002076:	68bb      	ldr	r3, [r7, #8]
 8002078:	4013      	ands	r3, r2
 800207a:	b29b      	uxth	r3, r3
 800207c:	2b00      	cmp	r3, #0
 800207e:	bf0c      	ite	eq
 8002080:	2301      	moveq	r3, #1
 8002082:	2300      	movne	r3, #0
 8002084:	b2db      	uxtb	r3, r3
 8002086:	461a      	mov	r2, r3
 8002088:	e00c      	b.n	80020a4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	699b      	ldr	r3, [r3, #24]
 8002090:	43da      	mvns	r2, r3
 8002092:	68bb      	ldr	r3, [r7, #8]
 8002094:	4013      	ands	r3, r2
 8002096:	b29b      	uxth	r3, r3
 8002098:	2b00      	cmp	r3, #0
 800209a:	bf0c      	ite	eq
 800209c:	2301      	moveq	r3, #1
 800209e:	2300      	movne	r3, #0
 80020a0:	b2db      	uxtb	r3, r3
 80020a2:	461a      	mov	r2, r3
 80020a4:	79fb      	ldrb	r3, [r7, #7]
 80020a6:	429a      	cmp	r2, r3
 80020a8:	d093      	beq.n	8001fd2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80020aa:	2300      	movs	r3, #0
}
 80020ac:	4618      	mov	r0, r3
 80020ae:	3710      	adds	r7, #16
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}

080020b4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b084      	sub	sp, #16
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	60f8      	str	r0, [r7, #12]
 80020bc:	60b9      	str	r1, [r7, #8]
 80020be:	607a      	str	r2, [r7, #4]
 80020c0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80020c2:	e071      	b.n	80021a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	695b      	ldr	r3, [r3, #20]
 80020ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80020d2:	d123      	bne.n	800211c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	681a      	ldr	r2, [r3, #0]
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80020e2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80020ec:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	2200      	movs	r2, #0
 80020f2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	2220      	movs	r2, #32
 80020f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	2200      	movs	r2, #0
 8002100:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002108:	f043 0204 	orr.w	r2, r3, #4
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	2200      	movs	r2, #0
 8002114:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002118:	2301      	movs	r3, #1
 800211a:	e067      	b.n	80021ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002122:	d041      	beq.n	80021a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002124:	f7fe feca 	bl	8000ebc <HAL_GetTick>
 8002128:	4602      	mov	r2, r0
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	1ad3      	subs	r3, r2, r3
 800212e:	687a      	ldr	r2, [r7, #4]
 8002130:	429a      	cmp	r2, r3
 8002132:	d302      	bcc.n	800213a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d136      	bne.n	80021a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800213a:	68bb      	ldr	r3, [r7, #8]
 800213c:	0c1b      	lsrs	r3, r3, #16
 800213e:	b2db      	uxtb	r3, r3
 8002140:	2b01      	cmp	r3, #1
 8002142:	d10c      	bne.n	800215e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	695b      	ldr	r3, [r3, #20]
 800214a:	43da      	mvns	r2, r3
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	4013      	ands	r3, r2
 8002150:	b29b      	uxth	r3, r3
 8002152:	2b00      	cmp	r3, #0
 8002154:	bf14      	ite	ne
 8002156:	2301      	movne	r3, #1
 8002158:	2300      	moveq	r3, #0
 800215a:	b2db      	uxtb	r3, r3
 800215c:	e00b      	b.n	8002176 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	699b      	ldr	r3, [r3, #24]
 8002164:	43da      	mvns	r2, r3
 8002166:	68bb      	ldr	r3, [r7, #8]
 8002168:	4013      	ands	r3, r2
 800216a:	b29b      	uxth	r3, r3
 800216c:	2b00      	cmp	r3, #0
 800216e:	bf14      	ite	ne
 8002170:	2301      	movne	r3, #1
 8002172:	2300      	moveq	r3, #0
 8002174:	b2db      	uxtb	r3, r3
 8002176:	2b00      	cmp	r3, #0
 8002178:	d016      	beq.n	80021a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	2200      	movs	r2, #0
 800217e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	2220      	movs	r2, #32
 8002184:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	2200      	movs	r2, #0
 800218c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002194:	f043 0220 	orr.w	r2, r3, #32
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	2200      	movs	r2, #0
 80021a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80021a4:	2301      	movs	r3, #1
 80021a6:	e021      	b.n	80021ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80021a8:	68bb      	ldr	r3, [r7, #8]
 80021aa:	0c1b      	lsrs	r3, r3, #16
 80021ac:	b2db      	uxtb	r3, r3
 80021ae:	2b01      	cmp	r3, #1
 80021b0:	d10c      	bne.n	80021cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	695b      	ldr	r3, [r3, #20]
 80021b8:	43da      	mvns	r2, r3
 80021ba:	68bb      	ldr	r3, [r7, #8]
 80021bc:	4013      	ands	r3, r2
 80021be:	b29b      	uxth	r3, r3
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	bf14      	ite	ne
 80021c4:	2301      	movne	r3, #1
 80021c6:	2300      	moveq	r3, #0
 80021c8:	b2db      	uxtb	r3, r3
 80021ca:	e00b      	b.n	80021e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	699b      	ldr	r3, [r3, #24]
 80021d2:	43da      	mvns	r2, r3
 80021d4:	68bb      	ldr	r3, [r7, #8]
 80021d6:	4013      	ands	r3, r2
 80021d8:	b29b      	uxth	r3, r3
 80021da:	2b00      	cmp	r3, #0
 80021dc:	bf14      	ite	ne
 80021de:	2301      	movne	r3, #1
 80021e0:	2300      	moveq	r3, #0
 80021e2:	b2db      	uxtb	r3, r3
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	f47f af6d 	bne.w	80020c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80021ea:	2300      	movs	r3, #0
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	3710      	adds	r7, #16
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd80      	pop	{r7, pc}

080021f4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b084      	sub	sp, #16
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	60f8      	str	r0, [r7, #12]
 80021fc:	60b9      	str	r1, [r7, #8]
 80021fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002200:	e034      	b.n	800226c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002202:	68f8      	ldr	r0, [r7, #12]
 8002204:	f000 f886 	bl	8002314 <I2C_IsAcknowledgeFailed>
 8002208:	4603      	mov	r3, r0
 800220a:	2b00      	cmp	r3, #0
 800220c:	d001      	beq.n	8002212 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	e034      	b.n	800227c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002212:	68bb      	ldr	r3, [r7, #8]
 8002214:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002218:	d028      	beq.n	800226c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800221a:	f7fe fe4f 	bl	8000ebc <HAL_GetTick>
 800221e:	4602      	mov	r2, r0
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	1ad3      	subs	r3, r2, r3
 8002224:	68ba      	ldr	r2, [r7, #8]
 8002226:	429a      	cmp	r2, r3
 8002228:	d302      	bcc.n	8002230 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800222a:	68bb      	ldr	r3, [r7, #8]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d11d      	bne.n	800226c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	695b      	ldr	r3, [r3, #20]
 8002236:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800223a:	2b80      	cmp	r3, #128	@ 0x80
 800223c:	d016      	beq.n	800226c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	2200      	movs	r2, #0
 8002242:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	2220      	movs	r2, #32
 8002248:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	2200      	movs	r2, #0
 8002250:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002258:	f043 0220 	orr.w	r2, r3, #32
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	2200      	movs	r2, #0
 8002264:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002268:	2301      	movs	r3, #1
 800226a:	e007      	b.n	800227c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	695b      	ldr	r3, [r3, #20]
 8002272:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002276:	2b80      	cmp	r3, #128	@ 0x80
 8002278:	d1c3      	bne.n	8002202 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800227a:	2300      	movs	r3, #0
}
 800227c:	4618      	mov	r0, r3
 800227e:	3710      	adds	r7, #16
 8002280:	46bd      	mov	sp, r7
 8002282:	bd80      	pop	{r7, pc}

08002284 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b084      	sub	sp, #16
 8002288:	af00      	add	r7, sp, #0
 800228a:	60f8      	str	r0, [r7, #12]
 800228c:	60b9      	str	r1, [r7, #8]
 800228e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002290:	e034      	b.n	80022fc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002292:	68f8      	ldr	r0, [r7, #12]
 8002294:	f000 f83e 	bl	8002314 <I2C_IsAcknowledgeFailed>
 8002298:	4603      	mov	r3, r0
 800229a:	2b00      	cmp	r3, #0
 800229c:	d001      	beq.n	80022a2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800229e:	2301      	movs	r3, #1
 80022a0:	e034      	b.n	800230c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80022a2:	68bb      	ldr	r3, [r7, #8]
 80022a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022a8:	d028      	beq.n	80022fc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022aa:	f7fe fe07 	bl	8000ebc <HAL_GetTick>
 80022ae:	4602      	mov	r2, r0
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	1ad3      	subs	r3, r2, r3
 80022b4:	68ba      	ldr	r2, [r7, #8]
 80022b6:	429a      	cmp	r2, r3
 80022b8:	d302      	bcc.n	80022c0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80022ba:	68bb      	ldr	r3, [r7, #8]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d11d      	bne.n	80022fc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	695b      	ldr	r3, [r3, #20]
 80022c6:	f003 0304 	and.w	r3, r3, #4
 80022ca:	2b04      	cmp	r3, #4
 80022cc:	d016      	beq.n	80022fc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	2200      	movs	r2, #0
 80022d2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	2220      	movs	r2, #32
 80022d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	2200      	movs	r2, #0
 80022e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022e8:	f043 0220 	orr.w	r2, r3, #32
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	2200      	movs	r2, #0
 80022f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80022f8:	2301      	movs	r3, #1
 80022fa:	e007      	b.n	800230c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	695b      	ldr	r3, [r3, #20]
 8002302:	f003 0304 	and.w	r3, r3, #4
 8002306:	2b04      	cmp	r3, #4
 8002308:	d1c3      	bne.n	8002292 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800230a:	2300      	movs	r3, #0
}
 800230c:	4618      	mov	r0, r3
 800230e:	3710      	adds	r7, #16
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}

08002314 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002314:	b480      	push	{r7}
 8002316:	b083      	sub	sp, #12
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	695b      	ldr	r3, [r3, #20]
 8002322:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002326:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800232a:	d11b      	bne.n	8002364 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002334:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2200      	movs	r2, #0
 800233a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2220      	movs	r2, #32
 8002340:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2200      	movs	r2, #0
 8002348:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002350:	f043 0204 	orr.w	r2, r3, #4
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2200      	movs	r2, #0
 800235c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002360:	2301      	movs	r3, #1
 8002362:	e000      	b.n	8002366 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002364:	2300      	movs	r3, #0
}
 8002366:	4618      	mov	r0, r3
 8002368:	370c      	adds	r7, #12
 800236a:	46bd      	mov	sp, r7
 800236c:	bc80      	pop	{r7}
 800236e:	4770      	bx	lr

08002370 <PWR_OverloadWfe>:
static void PWR_OverloadWfe(void);

/* Private functions ---------------------------------------------------------*/
__NOINLINE
static void PWR_OverloadWfe(void)
{
 8002370:	b480      	push	{r7}
 8002372:	af00      	add	r7, sp, #0
  __asm volatile( "wfe" );
 8002374:	bf20      	wfe
  __asm volatile( "nop" );
 8002376:	bf00      	nop
}
 8002378:	bf00      	nop
 800237a:	46bd      	mov	sp, r7
 800237c:	bc80      	pop	{r7}
 800237e:	4770      	bx	lr

08002380 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002380:	b480      	push	{r7}
 8002382:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8002384:	4b03      	ldr	r3, [pc, #12]	@ (8002394 <HAL_PWR_EnableBkUpAccess+0x14>)
 8002386:	2201      	movs	r2, #1
 8002388:	601a      	str	r2, [r3, #0]
}
 800238a:	bf00      	nop
 800238c:	46bd      	mov	sp, r7
 800238e:	bc80      	pop	{r7}
 8002390:	4770      	bx	lr
 8002392:	bf00      	nop
 8002394:	420e0020 	.word	0x420e0020

08002398 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction   
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b082      	sub	sp, #8
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
 80023a0:	460b      	mov	r3, r1
 80023a2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Clear PDDS bit in PWR register to specify entering in STOP mode when CPU enter in Deepsleep */ 
  CLEAR_BIT(PWR->CR,  PWR_CR_PDDS);
 80023a4:	4b13      	ldr	r3, [pc, #76]	@ (80023f4 <HAL_PWR_EnterSTOPMode+0x5c>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a12      	ldr	r2, [pc, #72]	@ (80023f4 <HAL_PWR_EnterSTOPMode+0x5c>)
 80023aa:	f023 0302 	bic.w	r3, r3, #2
 80023ae:	6013      	str	r3, [r2, #0]

  /* Select the voltage regulator mode by setting LPDS bit in PWR register according to Regulator parameter value */
  MODIFY_REG(PWR->CR, PWR_CR_LPDS, Regulator);
 80023b0:	4b10      	ldr	r3, [pc, #64]	@ (80023f4 <HAL_PWR_EnterSTOPMode+0x5c>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f023 0201 	bic.w	r2, r3, #1
 80023b8:	490e      	ldr	r1, [pc, #56]	@ (80023f4 <HAL_PWR_EnterSTOPMode+0x5c>)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	4313      	orrs	r3, r2
 80023be:	600b      	str	r3, [r1, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80023c0:	4b0d      	ldr	r3, [pc, #52]	@ (80023f8 <HAL_PWR_EnterSTOPMode+0x60>)
 80023c2:	691b      	ldr	r3, [r3, #16]
 80023c4:	4a0c      	ldr	r2, [pc, #48]	@ (80023f8 <HAL_PWR_EnterSTOPMode+0x60>)
 80023c6:	f043 0304 	orr.w	r3, r3, #4
 80023ca:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 80023cc:	78fb      	ldrb	r3, [r7, #3]
 80023ce:	2b01      	cmp	r3, #1
 80023d0:	d101      	bne.n	80023d6 <HAL_PWR_EnterSTOPMode+0x3e>
  {
    /* Request Wait For Interrupt */
    __WFI();
 80023d2:	bf30      	wfi
 80023d4:	e004      	b.n	80023e0 <HAL_PWR_EnterSTOPMode+0x48>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 80023d6:	bf40      	sev
    PWR_OverloadWfe(); /* WFE redefine locally */
 80023d8:	f7ff ffca 	bl	8002370 <PWR_OverloadWfe>
    PWR_OverloadWfe(); /* WFE redefine locally */
 80023dc:	f7ff ffc8 	bl	8002370 <PWR_OverloadWfe>
  }
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80023e0:	4b05      	ldr	r3, [pc, #20]	@ (80023f8 <HAL_PWR_EnterSTOPMode+0x60>)
 80023e2:	691b      	ldr	r3, [r3, #16]
 80023e4:	4a04      	ldr	r2, [pc, #16]	@ (80023f8 <HAL_PWR_EnterSTOPMode+0x60>)
 80023e6:	f023 0304 	bic.w	r3, r3, #4
 80023ea:	6113      	str	r3, [r2, #16]
}
 80023ec:	bf00      	nop
 80023ee:	3708      	adds	r7, #8
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bd80      	pop	{r7, pc}
 80023f4:	40007000 	.word	0x40007000
 80023f8:	e000ed00 	.word	0xe000ed00

080023fc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b086      	sub	sp, #24
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d101      	bne.n	800240e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800240a:	2301      	movs	r3, #1
 800240c:	e272      	b.n	80028f4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f003 0301 	and.w	r3, r3, #1
 8002416:	2b00      	cmp	r3, #0
 8002418:	f000 8087 	beq.w	800252a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800241c:	4b92      	ldr	r3, [pc, #584]	@ (8002668 <HAL_RCC_OscConfig+0x26c>)
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	f003 030c 	and.w	r3, r3, #12
 8002424:	2b04      	cmp	r3, #4
 8002426:	d00c      	beq.n	8002442 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002428:	4b8f      	ldr	r3, [pc, #572]	@ (8002668 <HAL_RCC_OscConfig+0x26c>)
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	f003 030c 	and.w	r3, r3, #12
 8002430:	2b08      	cmp	r3, #8
 8002432:	d112      	bne.n	800245a <HAL_RCC_OscConfig+0x5e>
 8002434:	4b8c      	ldr	r3, [pc, #560]	@ (8002668 <HAL_RCC_OscConfig+0x26c>)
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800243c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002440:	d10b      	bne.n	800245a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002442:	4b89      	ldr	r3, [pc, #548]	@ (8002668 <HAL_RCC_OscConfig+0x26c>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800244a:	2b00      	cmp	r3, #0
 800244c:	d06c      	beq.n	8002528 <HAL_RCC_OscConfig+0x12c>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d168      	bne.n	8002528 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002456:	2301      	movs	r3, #1
 8002458:	e24c      	b.n	80028f4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002462:	d106      	bne.n	8002472 <HAL_RCC_OscConfig+0x76>
 8002464:	4b80      	ldr	r3, [pc, #512]	@ (8002668 <HAL_RCC_OscConfig+0x26c>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a7f      	ldr	r2, [pc, #508]	@ (8002668 <HAL_RCC_OscConfig+0x26c>)
 800246a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800246e:	6013      	str	r3, [r2, #0]
 8002470:	e02e      	b.n	80024d0 <HAL_RCC_OscConfig+0xd4>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d10c      	bne.n	8002494 <HAL_RCC_OscConfig+0x98>
 800247a:	4b7b      	ldr	r3, [pc, #492]	@ (8002668 <HAL_RCC_OscConfig+0x26c>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a7a      	ldr	r2, [pc, #488]	@ (8002668 <HAL_RCC_OscConfig+0x26c>)
 8002480:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002484:	6013      	str	r3, [r2, #0]
 8002486:	4b78      	ldr	r3, [pc, #480]	@ (8002668 <HAL_RCC_OscConfig+0x26c>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a77      	ldr	r2, [pc, #476]	@ (8002668 <HAL_RCC_OscConfig+0x26c>)
 800248c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002490:	6013      	str	r3, [r2, #0]
 8002492:	e01d      	b.n	80024d0 <HAL_RCC_OscConfig+0xd4>
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800249c:	d10c      	bne.n	80024b8 <HAL_RCC_OscConfig+0xbc>
 800249e:	4b72      	ldr	r3, [pc, #456]	@ (8002668 <HAL_RCC_OscConfig+0x26c>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a71      	ldr	r2, [pc, #452]	@ (8002668 <HAL_RCC_OscConfig+0x26c>)
 80024a4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80024a8:	6013      	str	r3, [r2, #0]
 80024aa:	4b6f      	ldr	r3, [pc, #444]	@ (8002668 <HAL_RCC_OscConfig+0x26c>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4a6e      	ldr	r2, [pc, #440]	@ (8002668 <HAL_RCC_OscConfig+0x26c>)
 80024b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024b4:	6013      	str	r3, [r2, #0]
 80024b6:	e00b      	b.n	80024d0 <HAL_RCC_OscConfig+0xd4>
 80024b8:	4b6b      	ldr	r3, [pc, #428]	@ (8002668 <HAL_RCC_OscConfig+0x26c>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a6a      	ldr	r2, [pc, #424]	@ (8002668 <HAL_RCC_OscConfig+0x26c>)
 80024be:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80024c2:	6013      	str	r3, [r2, #0]
 80024c4:	4b68      	ldr	r3, [pc, #416]	@ (8002668 <HAL_RCC_OscConfig+0x26c>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a67      	ldr	r2, [pc, #412]	@ (8002668 <HAL_RCC_OscConfig+0x26c>)
 80024ca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80024ce:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d013      	beq.n	8002500 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024d8:	f7fe fcf0 	bl	8000ebc <HAL_GetTick>
 80024dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024de:	e008      	b.n	80024f2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024e0:	f7fe fcec 	bl	8000ebc <HAL_GetTick>
 80024e4:	4602      	mov	r2, r0
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	1ad3      	subs	r3, r2, r3
 80024ea:	2b64      	cmp	r3, #100	@ 0x64
 80024ec:	d901      	bls.n	80024f2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80024ee:	2303      	movs	r3, #3
 80024f0:	e200      	b.n	80028f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024f2:	4b5d      	ldr	r3, [pc, #372]	@ (8002668 <HAL_RCC_OscConfig+0x26c>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d0f0      	beq.n	80024e0 <HAL_RCC_OscConfig+0xe4>
 80024fe:	e014      	b.n	800252a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002500:	f7fe fcdc 	bl	8000ebc <HAL_GetTick>
 8002504:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002506:	e008      	b.n	800251a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002508:	f7fe fcd8 	bl	8000ebc <HAL_GetTick>
 800250c:	4602      	mov	r2, r0
 800250e:	693b      	ldr	r3, [r7, #16]
 8002510:	1ad3      	subs	r3, r2, r3
 8002512:	2b64      	cmp	r3, #100	@ 0x64
 8002514:	d901      	bls.n	800251a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002516:	2303      	movs	r3, #3
 8002518:	e1ec      	b.n	80028f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800251a:	4b53      	ldr	r3, [pc, #332]	@ (8002668 <HAL_RCC_OscConfig+0x26c>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002522:	2b00      	cmp	r3, #0
 8002524:	d1f0      	bne.n	8002508 <HAL_RCC_OscConfig+0x10c>
 8002526:	e000      	b.n	800252a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002528:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f003 0302 	and.w	r3, r3, #2
 8002532:	2b00      	cmp	r3, #0
 8002534:	d063      	beq.n	80025fe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002536:	4b4c      	ldr	r3, [pc, #304]	@ (8002668 <HAL_RCC_OscConfig+0x26c>)
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	f003 030c 	and.w	r3, r3, #12
 800253e:	2b00      	cmp	r3, #0
 8002540:	d00b      	beq.n	800255a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002542:	4b49      	ldr	r3, [pc, #292]	@ (8002668 <HAL_RCC_OscConfig+0x26c>)
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	f003 030c 	and.w	r3, r3, #12
 800254a:	2b08      	cmp	r3, #8
 800254c:	d11c      	bne.n	8002588 <HAL_RCC_OscConfig+0x18c>
 800254e:	4b46      	ldr	r3, [pc, #280]	@ (8002668 <HAL_RCC_OscConfig+0x26c>)
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002556:	2b00      	cmp	r3, #0
 8002558:	d116      	bne.n	8002588 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800255a:	4b43      	ldr	r3, [pc, #268]	@ (8002668 <HAL_RCC_OscConfig+0x26c>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f003 0302 	and.w	r3, r3, #2
 8002562:	2b00      	cmp	r3, #0
 8002564:	d005      	beq.n	8002572 <HAL_RCC_OscConfig+0x176>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	691b      	ldr	r3, [r3, #16]
 800256a:	2b01      	cmp	r3, #1
 800256c:	d001      	beq.n	8002572 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800256e:	2301      	movs	r3, #1
 8002570:	e1c0      	b.n	80028f4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002572:	4b3d      	ldr	r3, [pc, #244]	@ (8002668 <HAL_RCC_OscConfig+0x26c>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	695b      	ldr	r3, [r3, #20]
 800257e:	00db      	lsls	r3, r3, #3
 8002580:	4939      	ldr	r1, [pc, #228]	@ (8002668 <HAL_RCC_OscConfig+0x26c>)
 8002582:	4313      	orrs	r3, r2
 8002584:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002586:	e03a      	b.n	80025fe <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	691b      	ldr	r3, [r3, #16]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d020      	beq.n	80025d2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002590:	4b36      	ldr	r3, [pc, #216]	@ (800266c <HAL_RCC_OscConfig+0x270>)
 8002592:	2201      	movs	r2, #1
 8002594:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002596:	f7fe fc91 	bl	8000ebc <HAL_GetTick>
 800259a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800259c:	e008      	b.n	80025b0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800259e:	f7fe fc8d 	bl	8000ebc <HAL_GetTick>
 80025a2:	4602      	mov	r2, r0
 80025a4:	693b      	ldr	r3, [r7, #16]
 80025a6:	1ad3      	subs	r3, r2, r3
 80025a8:	2b02      	cmp	r3, #2
 80025aa:	d901      	bls.n	80025b0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80025ac:	2303      	movs	r3, #3
 80025ae:	e1a1      	b.n	80028f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025b0:	4b2d      	ldr	r3, [pc, #180]	@ (8002668 <HAL_RCC_OscConfig+0x26c>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f003 0302 	and.w	r3, r3, #2
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d0f0      	beq.n	800259e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025bc:	4b2a      	ldr	r3, [pc, #168]	@ (8002668 <HAL_RCC_OscConfig+0x26c>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	695b      	ldr	r3, [r3, #20]
 80025c8:	00db      	lsls	r3, r3, #3
 80025ca:	4927      	ldr	r1, [pc, #156]	@ (8002668 <HAL_RCC_OscConfig+0x26c>)
 80025cc:	4313      	orrs	r3, r2
 80025ce:	600b      	str	r3, [r1, #0]
 80025d0:	e015      	b.n	80025fe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025d2:	4b26      	ldr	r3, [pc, #152]	@ (800266c <HAL_RCC_OscConfig+0x270>)
 80025d4:	2200      	movs	r2, #0
 80025d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025d8:	f7fe fc70 	bl	8000ebc <HAL_GetTick>
 80025dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025de:	e008      	b.n	80025f2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025e0:	f7fe fc6c 	bl	8000ebc <HAL_GetTick>
 80025e4:	4602      	mov	r2, r0
 80025e6:	693b      	ldr	r3, [r7, #16]
 80025e8:	1ad3      	subs	r3, r2, r3
 80025ea:	2b02      	cmp	r3, #2
 80025ec:	d901      	bls.n	80025f2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80025ee:	2303      	movs	r3, #3
 80025f0:	e180      	b.n	80028f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025f2:	4b1d      	ldr	r3, [pc, #116]	@ (8002668 <HAL_RCC_OscConfig+0x26c>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f003 0302 	and.w	r3, r3, #2
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d1f0      	bne.n	80025e0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f003 0308 	and.w	r3, r3, #8
 8002606:	2b00      	cmp	r3, #0
 8002608:	d03a      	beq.n	8002680 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	699b      	ldr	r3, [r3, #24]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d019      	beq.n	8002646 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002612:	4b17      	ldr	r3, [pc, #92]	@ (8002670 <HAL_RCC_OscConfig+0x274>)
 8002614:	2201      	movs	r2, #1
 8002616:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002618:	f7fe fc50 	bl	8000ebc <HAL_GetTick>
 800261c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800261e:	e008      	b.n	8002632 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002620:	f7fe fc4c 	bl	8000ebc <HAL_GetTick>
 8002624:	4602      	mov	r2, r0
 8002626:	693b      	ldr	r3, [r7, #16]
 8002628:	1ad3      	subs	r3, r2, r3
 800262a:	2b02      	cmp	r3, #2
 800262c:	d901      	bls.n	8002632 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800262e:	2303      	movs	r3, #3
 8002630:	e160      	b.n	80028f4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002632:	4b0d      	ldr	r3, [pc, #52]	@ (8002668 <HAL_RCC_OscConfig+0x26c>)
 8002634:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002636:	f003 0302 	and.w	r3, r3, #2
 800263a:	2b00      	cmp	r3, #0
 800263c:	d0f0      	beq.n	8002620 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800263e:	2001      	movs	r0, #1
 8002640:	f000 face 	bl	8002be0 <RCC_Delay>
 8002644:	e01c      	b.n	8002680 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002646:	4b0a      	ldr	r3, [pc, #40]	@ (8002670 <HAL_RCC_OscConfig+0x274>)
 8002648:	2200      	movs	r2, #0
 800264a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800264c:	f7fe fc36 	bl	8000ebc <HAL_GetTick>
 8002650:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002652:	e00f      	b.n	8002674 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002654:	f7fe fc32 	bl	8000ebc <HAL_GetTick>
 8002658:	4602      	mov	r2, r0
 800265a:	693b      	ldr	r3, [r7, #16]
 800265c:	1ad3      	subs	r3, r2, r3
 800265e:	2b02      	cmp	r3, #2
 8002660:	d908      	bls.n	8002674 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002662:	2303      	movs	r3, #3
 8002664:	e146      	b.n	80028f4 <HAL_RCC_OscConfig+0x4f8>
 8002666:	bf00      	nop
 8002668:	40021000 	.word	0x40021000
 800266c:	42420000 	.word	0x42420000
 8002670:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002674:	4b92      	ldr	r3, [pc, #584]	@ (80028c0 <HAL_RCC_OscConfig+0x4c4>)
 8002676:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002678:	f003 0302 	and.w	r3, r3, #2
 800267c:	2b00      	cmp	r3, #0
 800267e:	d1e9      	bne.n	8002654 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f003 0304 	and.w	r3, r3, #4
 8002688:	2b00      	cmp	r3, #0
 800268a:	f000 80a6 	beq.w	80027da <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800268e:	2300      	movs	r3, #0
 8002690:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002692:	4b8b      	ldr	r3, [pc, #556]	@ (80028c0 <HAL_RCC_OscConfig+0x4c4>)
 8002694:	69db      	ldr	r3, [r3, #28]
 8002696:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800269a:	2b00      	cmp	r3, #0
 800269c:	d10d      	bne.n	80026ba <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800269e:	4b88      	ldr	r3, [pc, #544]	@ (80028c0 <HAL_RCC_OscConfig+0x4c4>)
 80026a0:	69db      	ldr	r3, [r3, #28]
 80026a2:	4a87      	ldr	r2, [pc, #540]	@ (80028c0 <HAL_RCC_OscConfig+0x4c4>)
 80026a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80026a8:	61d3      	str	r3, [r2, #28]
 80026aa:	4b85      	ldr	r3, [pc, #532]	@ (80028c0 <HAL_RCC_OscConfig+0x4c4>)
 80026ac:	69db      	ldr	r3, [r3, #28]
 80026ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026b2:	60bb      	str	r3, [r7, #8]
 80026b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026b6:	2301      	movs	r3, #1
 80026b8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026ba:	4b82      	ldr	r3, [pc, #520]	@ (80028c4 <HAL_RCC_OscConfig+0x4c8>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d118      	bne.n	80026f8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026c6:	4b7f      	ldr	r3, [pc, #508]	@ (80028c4 <HAL_RCC_OscConfig+0x4c8>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a7e      	ldr	r2, [pc, #504]	@ (80028c4 <HAL_RCC_OscConfig+0x4c8>)
 80026cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026d2:	f7fe fbf3 	bl	8000ebc <HAL_GetTick>
 80026d6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026d8:	e008      	b.n	80026ec <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026da:	f7fe fbef 	bl	8000ebc <HAL_GetTick>
 80026de:	4602      	mov	r2, r0
 80026e0:	693b      	ldr	r3, [r7, #16]
 80026e2:	1ad3      	subs	r3, r2, r3
 80026e4:	2b64      	cmp	r3, #100	@ 0x64
 80026e6:	d901      	bls.n	80026ec <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80026e8:	2303      	movs	r3, #3
 80026ea:	e103      	b.n	80028f4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026ec:	4b75      	ldr	r3, [pc, #468]	@ (80028c4 <HAL_RCC_OscConfig+0x4c8>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d0f0      	beq.n	80026da <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	68db      	ldr	r3, [r3, #12]
 80026fc:	2b01      	cmp	r3, #1
 80026fe:	d106      	bne.n	800270e <HAL_RCC_OscConfig+0x312>
 8002700:	4b6f      	ldr	r3, [pc, #444]	@ (80028c0 <HAL_RCC_OscConfig+0x4c4>)
 8002702:	6a1b      	ldr	r3, [r3, #32]
 8002704:	4a6e      	ldr	r2, [pc, #440]	@ (80028c0 <HAL_RCC_OscConfig+0x4c4>)
 8002706:	f043 0301 	orr.w	r3, r3, #1
 800270a:	6213      	str	r3, [r2, #32]
 800270c:	e02d      	b.n	800276a <HAL_RCC_OscConfig+0x36e>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	68db      	ldr	r3, [r3, #12]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d10c      	bne.n	8002730 <HAL_RCC_OscConfig+0x334>
 8002716:	4b6a      	ldr	r3, [pc, #424]	@ (80028c0 <HAL_RCC_OscConfig+0x4c4>)
 8002718:	6a1b      	ldr	r3, [r3, #32]
 800271a:	4a69      	ldr	r2, [pc, #420]	@ (80028c0 <HAL_RCC_OscConfig+0x4c4>)
 800271c:	f023 0301 	bic.w	r3, r3, #1
 8002720:	6213      	str	r3, [r2, #32]
 8002722:	4b67      	ldr	r3, [pc, #412]	@ (80028c0 <HAL_RCC_OscConfig+0x4c4>)
 8002724:	6a1b      	ldr	r3, [r3, #32]
 8002726:	4a66      	ldr	r2, [pc, #408]	@ (80028c0 <HAL_RCC_OscConfig+0x4c4>)
 8002728:	f023 0304 	bic.w	r3, r3, #4
 800272c:	6213      	str	r3, [r2, #32]
 800272e:	e01c      	b.n	800276a <HAL_RCC_OscConfig+0x36e>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	68db      	ldr	r3, [r3, #12]
 8002734:	2b05      	cmp	r3, #5
 8002736:	d10c      	bne.n	8002752 <HAL_RCC_OscConfig+0x356>
 8002738:	4b61      	ldr	r3, [pc, #388]	@ (80028c0 <HAL_RCC_OscConfig+0x4c4>)
 800273a:	6a1b      	ldr	r3, [r3, #32]
 800273c:	4a60      	ldr	r2, [pc, #384]	@ (80028c0 <HAL_RCC_OscConfig+0x4c4>)
 800273e:	f043 0304 	orr.w	r3, r3, #4
 8002742:	6213      	str	r3, [r2, #32]
 8002744:	4b5e      	ldr	r3, [pc, #376]	@ (80028c0 <HAL_RCC_OscConfig+0x4c4>)
 8002746:	6a1b      	ldr	r3, [r3, #32]
 8002748:	4a5d      	ldr	r2, [pc, #372]	@ (80028c0 <HAL_RCC_OscConfig+0x4c4>)
 800274a:	f043 0301 	orr.w	r3, r3, #1
 800274e:	6213      	str	r3, [r2, #32]
 8002750:	e00b      	b.n	800276a <HAL_RCC_OscConfig+0x36e>
 8002752:	4b5b      	ldr	r3, [pc, #364]	@ (80028c0 <HAL_RCC_OscConfig+0x4c4>)
 8002754:	6a1b      	ldr	r3, [r3, #32]
 8002756:	4a5a      	ldr	r2, [pc, #360]	@ (80028c0 <HAL_RCC_OscConfig+0x4c4>)
 8002758:	f023 0301 	bic.w	r3, r3, #1
 800275c:	6213      	str	r3, [r2, #32]
 800275e:	4b58      	ldr	r3, [pc, #352]	@ (80028c0 <HAL_RCC_OscConfig+0x4c4>)
 8002760:	6a1b      	ldr	r3, [r3, #32]
 8002762:	4a57      	ldr	r2, [pc, #348]	@ (80028c0 <HAL_RCC_OscConfig+0x4c4>)
 8002764:	f023 0304 	bic.w	r3, r3, #4
 8002768:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	68db      	ldr	r3, [r3, #12]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d015      	beq.n	800279e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002772:	f7fe fba3 	bl	8000ebc <HAL_GetTick>
 8002776:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002778:	e00a      	b.n	8002790 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800277a:	f7fe fb9f 	bl	8000ebc <HAL_GetTick>
 800277e:	4602      	mov	r2, r0
 8002780:	693b      	ldr	r3, [r7, #16]
 8002782:	1ad3      	subs	r3, r2, r3
 8002784:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002788:	4293      	cmp	r3, r2
 800278a:	d901      	bls.n	8002790 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800278c:	2303      	movs	r3, #3
 800278e:	e0b1      	b.n	80028f4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002790:	4b4b      	ldr	r3, [pc, #300]	@ (80028c0 <HAL_RCC_OscConfig+0x4c4>)
 8002792:	6a1b      	ldr	r3, [r3, #32]
 8002794:	f003 0302 	and.w	r3, r3, #2
 8002798:	2b00      	cmp	r3, #0
 800279a:	d0ee      	beq.n	800277a <HAL_RCC_OscConfig+0x37e>
 800279c:	e014      	b.n	80027c8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800279e:	f7fe fb8d 	bl	8000ebc <HAL_GetTick>
 80027a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027a4:	e00a      	b.n	80027bc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027a6:	f7fe fb89 	bl	8000ebc <HAL_GetTick>
 80027aa:	4602      	mov	r2, r0
 80027ac:	693b      	ldr	r3, [r7, #16]
 80027ae:	1ad3      	subs	r3, r2, r3
 80027b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d901      	bls.n	80027bc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80027b8:	2303      	movs	r3, #3
 80027ba:	e09b      	b.n	80028f4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027bc:	4b40      	ldr	r3, [pc, #256]	@ (80028c0 <HAL_RCC_OscConfig+0x4c4>)
 80027be:	6a1b      	ldr	r3, [r3, #32]
 80027c0:	f003 0302 	and.w	r3, r3, #2
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d1ee      	bne.n	80027a6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80027c8:	7dfb      	ldrb	r3, [r7, #23]
 80027ca:	2b01      	cmp	r3, #1
 80027cc:	d105      	bne.n	80027da <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027ce:	4b3c      	ldr	r3, [pc, #240]	@ (80028c0 <HAL_RCC_OscConfig+0x4c4>)
 80027d0:	69db      	ldr	r3, [r3, #28]
 80027d2:	4a3b      	ldr	r2, [pc, #236]	@ (80028c0 <HAL_RCC_OscConfig+0x4c4>)
 80027d4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80027d8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	69db      	ldr	r3, [r3, #28]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	f000 8087 	beq.w	80028f2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80027e4:	4b36      	ldr	r3, [pc, #216]	@ (80028c0 <HAL_RCC_OscConfig+0x4c4>)
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	f003 030c 	and.w	r3, r3, #12
 80027ec:	2b08      	cmp	r3, #8
 80027ee:	d061      	beq.n	80028b4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	69db      	ldr	r3, [r3, #28]
 80027f4:	2b02      	cmp	r3, #2
 80027f6:	d146      	bne.n	8002886 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027f8:	4b33      	ldr	r3, [pc, #204]	@ (80028c8 <HAL_RCC_OscConfig+0x4cc>)
 80027fa:	2200      	movs	r2, #0
 80027fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027fe:	f7fe fb5d 	bl	8000ebc <HAL_GetTick>
 8002802:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002804:	e008      	b.n	8002818 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002806:	f7fe fb59 	bl	8000ebc <HAL_GetTick>
 800280a:	4602      	mov	r2, r0
 800280c:	693b      	ldr	r3, [r7, #16]
 800280e:	1ad3      	subs	r3, r2, r3
 8002810:	2b02      	cmp	r3, #2
 8002812:	d901      	bls.n	8002818 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002814:	2303      	movs	r3, #3
 8002816:	e06d      	b.n	80028f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002818:	4b29      	ldr	r3, [pc, #164]	@ (80028c0 <HAL_RCC_OscConfig+0x4c4>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002820:	2b00      	cmp	r3, #0
 8002822:	d1f0      	bne.n	8002806 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6a1b      	ldr	r3, [r3, #32]
 8002828:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800282c:	d108      	bne.n	8002840 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800282e:	4b24      	ldr	r3, [pc, #144]	@ (80028c0 <HAL_RCC_OscConfig+0x4c4>)
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	689b      	ldr	r3, [r3, #8]
 800283a:	4921      	ldr	r1, [pc, #132]	@ (80028c0 <HAL_RCC_OscConfig+0x4c4>)
 800283c:	4313      	orrs	r3, r2
 800283e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002840:	4b1f      	ldr	r3, [pc, #124]	@ (80028c0 <HAL_RCC_OscConfig+0x4c4>)
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6a19      	ldr	r1, [r3, #32]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002850:	430b      	orrs	r3, r1
 8002852:	491b      	ldr	r1, [pc, #108]	@ (80028c0 <HAL_RCC_OscConfig+0x4c4>)
 8002854:	4313      	orrs	r3, r2
 8002856:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002858:	4b1b      	ldr	r3, [pc, #108]	@ (80028c8 <HAL_RCC_OscConfig+0x4cc>)
 800285a:	2201      	movs	r2, #1
 800285c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800285e:	f7fe fb2d 	bl	8000ebc <HAL_GetTick>
 8002862:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002864:	e008      	b.n	8002878 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002866:	f7fe fb29 	bl	8000ebc <HAL_GetTick>
 800286a:	4602      	mov	r2, r0
 800286c:	693b      	ldr	r3, [r7, #16]
 800286e:	1ad3      	subs	r3, r2, r3
 8002870:	2b02      	cmp	r3, #2
 8002872:	d901      	bls.n	8002878 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002874:	2303      	movs	r3, #3
 8002876:	e03d      	b.n	80028f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002878:	4b11      	ldr	r3, [pc, #68]	@ (80028c0 <HAL_RCC_OscConfig+0x4c4>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002880:	2b00      	cmp	r3, #0
 8002882:	d0f0      	beq.n	8002866 <HAL_RCC_OscConfig+0x46a>
 8002884:	e035      	b.n	80028f2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002886:	4b10      	ldr	r3, [pc, #64]	@ (80028c8 <HAL_RCC_OscConfig+0x4cc>)
 8002888:	2200      	movs	r2, #0
 800288a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800288c:	f7fe fb16 	bl	8000ebc <HAL_GetTick>
 8002890:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002892:	e008      	b.n	80028a6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002894:	f7fe fb12 	bl	8000ebc <HAL_GetTick>
 8002898:	4602      	mov	r2, r0
 800289a:	693b      	ldr	r3, [r7, #16]
 800289c:	1ad3      	subs	r3, r2, r3
 800289e:	2b02      	cmp	r3, #2
 80028a0:	d901      	bls.n	80028a6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80028a2:	2303      	movs	r3, #3
 80028a4:	e026      	b.n	80028f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028a6:	4b06      	ldr	r3, [pc, #24]	@ (80028c0 <HAL_RCC_OscConfig+0x4c4>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d1f0      	bne.n	8002894 <HAL_RCC_OscConfig+0x498>
 80028b2:	e01e      	b.n	80028f2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	69db      	ldr	r3, [r3, #28]
 80028b8:	2b01      	cmp	r3, #1
 80028ba:	d107      	bne.n	80028cc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80028bc:	2301      	movs	r3, #1
 80028be:	e019      	b.n	80028f4 <HAL_RCC_OscConfig+0x4f8>
 80028c0:	40021000 	.word	0x40021000
 80028c4:	40007000 	.word	0x40007000
 80028c8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80028cc:	4b0b      	ldr	r3, [pc, #44]	@ (80028fc <HAL_RCC_OscConfig+0x500>)
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6a1b      	ldr	r3, [r3, #32]
 80028dc:	429a      	cmp	r2, r3
 80028de:	d106      	bne.n	80028ee <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028ea:	429a      	cmp	r2, r3
 80028ec:	d001      	beq.n	80028f2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80028ee:	2301      	movs	r3, #1
 80028f0:	e000      	b.n	80028f4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80028f2:	2300      	movs	r3, #0
}
 80028f4:	4618      	mov	r0, r3
 80028f6:	3718      	adds	r7, #24
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bd80      	pop	{r7, pc}
 80028fc:	40021000 	.word	0x40021000

08002900 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b084      	sub	sp, #16
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
 8002908:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d101      	bne.n	8002914 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002910:	2301      	movs	r3, #1
 8002912:	e0d0      	b.n	8002ab6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002914:	4b6a      	ldr	r3, [pc, #424]	@ (8002ac0 <HAL_RCC_ClockConfig+0x1c0>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f003 0307 	and.w	r3, r3, #7
 800291c:	683a      	ldr	r2, [r7, #0]
 800291e:	429a      	cmp	r2, r3
 8002920:	d910      	bls.n	8002944 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002922:	4b67      	ldr	r3, [pc, #412]	@ (8002ac0 <HAL_RCC_ClockConfig+0x1c0>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f023 0207 	bic.w	r2, r3, #7
 800292a:	4965      	ldr	r1, [pc, #404]	@ (8002ac0 <HAL_RCC_ClockConfig+0x1c0>)
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	4313      	orrs	r3, r2
 8002930:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002932:	4b63      	ldr	r3, [pc, #396]	@ (8002ac0 <HAL_RCC_ClockConfig+0x1c0>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f003 0307 	and.w	r3, r3, #7
 800293a:	683a      	ldr	r2, [r7, #0]
 800293c:	429a      	cmp	r2, r3
 800293e:	d001      	beq.n	8002944 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002940:	2301      	movs	r3, #1
 8002942:	e0b8      	b.n	8002ab6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f003 0302 	and.w	r3, r3, #2
 800294c:	2b00      	cmp	r3, #0
 800294e:	d020      	beq.n	8002992 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f003 0304 	and.w	r3, r3, #4
 8002958:	2b00      	cmp	r3, #0
 800295a:	d005      	beq.n	8002968 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800295c:	4b59      	ldr	r3, [pc, #356]	@ (8002ac4 <HAL_RCC_ClockConfig+0x1c4>)
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	4a58      	ldr	r2, [pc, #352]	@ (8002ac4 <HAL_RCC_ClockConfig+0x1c4>)
 8002962:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002966:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f003 0308 	and.w	r3, r3, #8
 8002970:	2b00      	cmp	r3, #0
 8002972:	d005      	beq.n	8002980 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002974:	4b53      	ldr	r3, [pc, #332]	@ (8002ac4 <HAL_RCC_ClockConfig+0x1c4>)
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	4a52      	ldr	r2, [pc, #328]	@ (8002ac4 <HAL_RCC_ClockConfig+0x1c4>)
 800297a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800297e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002980:	4b50      	ldr	r3, [pc, #320]	@ (8002ac4 <HAL_RCC_ClockConfig+0x1c4>)
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	689b      	ldr	r3, [r3, #8]
 800298c:	494d      	ldr	r1, [pc, #308]	@ (8002ac4 <HAL_RCC_ClockConfig+0x1c4>)
 800298e:	4313      	orrs	r3, r2
 8002990:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f003 0301 	and.w	r3, r3, #1
 800299a:	2b00      	cmp	r3, #0
 800299c:	d040      	beq.n	8002a20 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	2b01      	cmp	r3, #1
 80029a4:	d107      	bne.n	80029b6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029a6:	4b47      	ldr	r3, [pc, #284]	@ (8002ac4 <HAL_RCC_ClockConfig+0x1c4>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d115      	bne.n	80029de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029b2:	2301      	movs	r3, #1
 80029b4:	e07f      	b.n	8002ab6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	2b02      	cmp	r3, #2
 80029bc:	d107      	bne.n	80029ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029be:	4b41      	ldr	r3, [pc, #260]	@ (8002ac4 <HAL_RCC_ClockConfig+0x1c4>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d109      	bne.n	80029de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029ca:	2301      	movs	r3, #1
 80029cc:	e073      	b.n	8002ab6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029ce:	4b3d      	ldr	r3, [pc, #244]	@ (8002ac4 <HAL_RCC_ClockConfig+0x1c4>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f003 0302 	and.w	r3, r3, #2
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d101      	bne.n	80029de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	e06b      	b.n	8002ab6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029de:	4b39      	ldr	r3, [pc, #228]	@ (8002ac4 <HAL_RCC_ClockConfig+0x1c4>)
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	f023 0203 	bic.w	r2, r3, #3
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	4936      	ldr	r1, [pc, #216]	@ (8002ac4 <HAL_RCC_ClockConfig+0x1c4>)
 80029ec:	4313      	orrs	r3, r2
 80029ee:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029f0:	f7fe fa64 	bl	8000ebc <HAL_GetTick>
 80029f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029f6:	e00a      	b.n	8002a0e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029f8:	f7fe fa60 	bl	8000ebc <HAL_GetTick>
 80029fc:	4602      	mov	r2, r0
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	1ad3      	subs	r3, r2, r3
 8002a02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d901      	bls.n	8002a0e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a0a:	2303      	movs	r3, #3
 8002a0c:	e053      	b.n	8002ab6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a0e:	4b2d      	ldr	r3, [pc, #180]	@ (8002ac4 <HAL_RCC_ClockConfig+0x1c4>)
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	f003 020c 	and.w	r2, r3, #12
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	009b      	lsls	r3, r3, #2
 8002a1c:	429a      	cmp	r2, r3
 8002a1e:	d1eb      	bne.n	80029f8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a20:	4b27      	ldr	r3, [pc, #156]	@ (8002ac0 <HAL_RCC_ClockConfig+0x1c0>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f003 0307 	and.w	r3, r3, #7
 8002a28:	683a      	ldr	r2, [r7, #0]
 8002a2a:	429a      	cmp	r2, r3
 8002a2c:	d210      	bcs.n	8002a50 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a2e:	4b24      	ldr	r3, [pc, #144]	@ (8002ac0 <HAL_RCC_ClockConfig+0x1c0>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f023 0207 	bic.w	r2, r3, #7
 8002a36:	4922      	ldr	r1, [pc, #136]	@ (8002ac0 <HAL_RCC_ClockConfig+0x1c0>)
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a3e:	4b20      	ldr	r3, [pc, #128]	@ (8002ac0 <HAL_RCC_ClockConfig+0x1c0>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f003 0307 	and.w	r3, r3, #7
 8002a46:	683a      	ldr	r2, [r7, #0]
 8002a48:	429a      	cmp	r2, r3
 8002a4a:	d001      	beq.n	8002a50 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	e032      	b.n	8002ab6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f003 0304 	and.w	r3, r3, #4
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d008      	beq.n	8002a6e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a5c:	4b19      	ldr	r3, [pc, #100]	@ (8002ac4 <HAL_RCC_ClockConfig+0x1c4>)
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	68db      	ldr	r3, [r3, #12]
 8002a68:	4916      	ldr	r1, [pc, #88]	@ (8002ac4 <HAL_RCC_ClockConfig+0x1c4>)
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f003 0308 	and.w	r3, r3, #8
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d009      	beq.n	8002a8e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002a7a:	4b12      	ldr	r3, [pc, #72]	@ (8002ac4 <HAL_RCC_ClockConfig+0x1c4>)
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	691b      	ldr	r3, [r3, #16]
 8002a86:	00db      	lsls	r3, r3, #3
 8002a88:	490e      	ldr	r1, [pc, #56]	@ (8002ac4 <HAL_RCC_ClockConfig+0x1c4>)
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002a8e:	f000 f821 	bl	8002ad4 <HAL_RCC_GetSysClockFreq>
 8002a92:	4602      	mov	r2, r0
 8002a94:	4b0b      	ldr	r3, [pc, #44]	@ (8002ac4 <HAL_RCC_ClockConfig+0x1c4>)
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	091b      	lsrs	r3, r3, #4
 8002a9a:	f003 030f 	and.w	r3, r3, #15
 8002a9e:	490a      	ldr	r1, [pc, #40]	@ (8002ac8 <HAL_RCC_ClockConfig+0x1c8>)
 8002aa0:	5ccb      	ldrb	r3, [r1, r3]
 8002aa2:	fa22 f303 	lsr.w	r3, r2, r3
 8002aa6:	4a09      	ldr	r2, [pc, #36]	@ (8002acc <HAL_RCC_ClockConfig+0x1cc>)
 8002aa8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002aaa:	4b09      	ldr	r3, [pc, #36]	@ (8002ad0 <HAL_RCC_ClockConfig+0x1d0>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4618      	mov	r0, r3
 8002ab0:	f7fe f9c2 	bl	8000e38 <HAL_InitTick>

  return HAL_OK;
 8002ab4:	2300      	movs	r3, #0
}
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	3710      	adds	r7, #16
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}
 8002abe:	bf00      	nop
 8002ac0:	40022000 	.word	0x40022000
 8002ac4:	40021000 	.word	0x40021000
 8002ac8:	08005778 	.word	0x08005778
 8002acc:	20000000 	.word	0x20000000
 8002ad0:	20000004 	.word	0x20000004

08002ad4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b087      	sub	sp, #28
 8002ad8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002ada:	2300      	movs	r3, #0
 8002adc:	60fb      	str	r3, [r7, #12]
 8002ade:	2300      	movs	r3, #0
 8002ae0:	60bb      	str	r3, [r7, #8]
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	617b      	str	r3, [r7, #20]
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002aea:	2300      	movs	r3, #0
 8002aec:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002aee:	4b1e      	ldr	r3, [pc, #120]	@ (8002b68 <HAL_RCC_GetSysClockFreq+0x94>)
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	f003 030c 	and.w	r3, r3, #12
 8002afa:	2b04      	cmp	r3, #4
 8002afc:	d002      	beq.n	8002b04 <HAL_RCC_GetSysClockFreq+0x30>
 8002afe:	2b08      	cmp	r3, #8
 8002b00:	d003      	beq.n	8002b0a <HAL_RCC_GetSysClockFreq+0x36>
 8002b02:	e027      	b.n	8002b54 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002b04:	4b19      	ldr	r3, [pc, #100]	@ (8002b6c <HAL_RCC_GetSysClockFreq+0x98>)
 8002b06:	613b      	str	r3, [r7, #16]
      break;
 8002b08:	e027      	b.n	8002b5a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	0c9b      	lsrs	r3, r3, #18
 8002b0e:	f003 030f 	and.w	r3, r3, #15
 8002b12:	4a17      	ldr	r2, [pc, #92]	@ (8002b70 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002b14:	5cd3      	ldrb	r3, [r2, r3]
 8002b16:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d010      	beq.n	8002b44 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002b22:	4b11      	ldr	r3, [pc, #68]	@ (8002b68 <HAL_RCC_GetSysClockFreq+0x94>)
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	0c5b      	lsrs	r3, r3, #17
 8002b28:	f003 0301 	and.w	r3, r3, #1
 8002b2c:	4a11      	ldr	r2, [pc, #68]	@ (8002b74 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002b2e:	5cd3      	ldrb	r3, [r2, r3]
 8002b30:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	4a0d      	ldr	r2, [pc, #52]	@ (8002b6c <HAL_RCC_GetSysClockFreq+0x98>)
 8002b36:	fb03 f202 	mul.w	r2, r3, r2
 8002b3a:	68bb      	ldr	r3, [r7, #8]
 8002b3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b40:	617b      	str	r3, [r7, #20]
 8002b42:	e004      	b.n	8002b4e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	4a0c      	ldr	r2, [pc, #48]	@ (8002b78 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002b48:	fb02 f303 	mul.w	r3, r2, r3
 8002b4c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002b4e:	697b      	ldr	r3, [r7, #20]
 8002b50:	613b      	str	r3, [r7, #16]
      break;
 8002b52:	e002      	b.n	8002b5a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002b54:	4b05      	ldr	r3, [pc, #20]	@ (8002b6c <HAL_RCC_GetSysClockFreq+0x98>)
 8002b56:	613b      	str	r3, [r7, #16]
      break;
 8002b58:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b5a:	693b      	ldr	r3, [r7, #16]
}
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	371c      	adds	r7, #28
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bc80      	pop	{r7}
 8002b64:	4770      	bx	lr
 8002b66:	bf00      	nop
 8002b68:	40021000 	.word	0x40021000
 8002b6c:	007a1200 	.word	0x007a1200
 8002b70:	08005790 	.word	0x08005790
 8002b74:	080057a0 	.word	0x080057a0
 8002b78:	003d0900 	.word	0x003d0900

08002b7c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b80:	4b02      	ldr	r3, [pc, #8]	@ (8002b8c <HAL_RCC_GetHCLKFreq+0x10>)
 8002b82:	681b      	ldr	r3, [r3, #0]
}
 8002b84:	4618      	mov	r0, r3
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bc80      	pop	{r7}
 8002b8a:	4770      	bx	lr
 8002b8c:	20000000 	.word	0x20000000

08002b90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002b94:	f7ff fff2 	bl	8002b7c <HAL_RCC_GetHCLKFreq>
 8002b98:	4602      	mov	r2, r0
 8002b9a:	4b05      	ldr	r3, [pc, #20]	@ (8002bb0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	0a1b      	lsrs	r3, r3, #8
 8002ba0:	f003 0307 	and.w	r3, r3, #7
 8002ba4:	4903      	ldr	r1, [pc, #12]	@ (8002bb4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ba6:	5ccb      	ldrb	r3, [r1, r3]
 8002ba8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002bac:	4618      	mov	r0, r3
 8002bae:	bd80      	pop	{r7, pc}
 8002bb0:	40021000 	.word	0x40021000
 8002bb4:	08005788 	.word	0x08005788

08002bb8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002bbc:	f7ff ffde 	bl	8002b7c <HAL_RCC_GetHCLKFreq>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	4b05      	ldr	r3, [pc, #20]	@ (8002bd8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	0adb      	lsrs	r3, r3, #11
 8002bc8:	f003 0307 	and.w	r3, r3, #7
 8002bcc:	4903      	ldr	r1, [pc, #12]	@ (8002bdc <HAL_RCC_GetPCLK2Freq+0x24>)
 8002bce:	5ccb      	ldrb	r3, [r1, r3]
 8002bd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	bd80      	pop	{r7, pc}
 8002bd8:	40021000 	.word	0x40021000
 8002bdc:	08005788 	.word	0x08005788

08002be0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002be0:	b480      	push	{r7}
 8002be2:	b085      	sub	sp, #20
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002be8:	4b0a      	ldr	r3, [pc, #40]	@ (8002c14 <RCC_Delay+0x34>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a0a      	ldr	r2, [pc, #40]	@ (8002c18 <RCC_Delay+0x38>)
 8002bee:	fba2 2303 	umull	r2, r3, r2, r3
 8002bf2:	0a5b      	lsrs	r3, r3, #9
 8002bf4:	687a      	ldr	r2, [r7, #4]
 8002bf6:	fb02 f303 	mul.w	r3, r2, r3
 8002bfa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002bfc:	bf00      	nop
  }
  while (Delay --);
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	1e5a      	subs	r2, r3, #1
 8002c02:	60fa      	str	r2, [r7, #12]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d1f9      	bne.n	8002bfc <RCC_Delay+0x1c>
}
 8002c08:	bf00      	nop
 8002c0a:	bf00      	nop
 8002c0c:	3714      	adds	r7, #20
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bc80      	pop	{r7}
 8002c12:	4770      	bx	lr
 8002c14:	20000000 	.word	0x20000000
 8002c18:	10624dd3 	.word	0x10624dd3

08002c1c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b086      	sub	sp, #24
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002c24:	2300      	movs	r3, #0
 8002c26:	613b      	str	r3, [r7, #16]
 8002c28:	2300      	movs	r3, #0
 8002c2a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f003 0301 	and.w	r3, r3, #1
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d07d      	beq.n	8002d34 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c3c:	4b4f      	ldr	r3, [pc, #316]	@ (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c3e:	69db      	ldr	r3, [r3, #28]
 8002c40:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d10d      	bne.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c48:	4b4c      	ldr	r3, [pc, #304]	@ (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c4a:	69db      	ldr	r3, [r3, #28]
 8002c4c:	4a4b      	ldr	r2, [pc, #300]	@ (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c4e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c52:	61d3      	str	r3, [r2, #28]
 8002c54:	4b49      	ldr	r3, [pc, #292]	@ (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c56:	69db      	ldr	r3, [r3, #28]
 8002c58:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c5c:	60bb      	str	r3, [r7, #8]
 8002c5e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c60:	2301      	movs	r3, #1
 8002c62:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c64:	4b46      	ldr	r3, [pc, #280]	@ (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d118      	bne.n	8002ca2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c70:	4b43      	ldr	r3, [pc, #268]	@ (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a42      	ldr	r2, [pc, #264]	@ (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c76:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c7a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c7c:	f7fe f91e 	bl	8000ebc <HAL_GetTick>
 8002c80:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c82:	e008      	b.n	8002c96 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c84:	f7fe f91a 	bl	8000ebc <HAL_GetTick>
 8002c88:	4602      	mov	r2, r0
 8002c8a:	693b      	ldr	r3, [r7, #16]
 8002c8c:	1ad3      	subs	r3, r2, r3
 8002c8e:	2b64      	cmp	r3, #100	@ 0x64
 8002c90:	d901      	bls.n	8002c96 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002c92:	2303      	movs	r3, #3
 8002c94:	e06d      	b.n	8002d72 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c96:	4b3a      	ldr	r3, [pc, #232]	@ (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d0f0      	beq.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002ca2:	4b36      	ldr	r3, [pc, #216]	@ (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ca4:	6a1b      	ldr	r3, [r3, #32]
 8002ca6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002caa:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d02e      	beq.n	8002d10 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002cba:	68fa      	ldr	r2, [r7, #12]
 8002cbc:	429a      	cmp	r2, r3
 8002cbe:	d027      	beq.n	8002d10 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002cc0:	4b2e      	ldr	r3, [pc, #184]	@ (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cc2:	6a1b      	ldr	r3, [r3, #32]
 8002cc4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002cc8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002cca:	4b2e      	ldr	r3, [pc, #184]	@ (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002ccc:	2201      	movs	r2, #1
 8002cce:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002cd0:	4b2c      	ldr	r3, [pc, #176]	@ (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002cd6:	4a29      	ldr	r2, [pc, #164]	@ (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	f003 0301 	and.w	r3, r3, #1
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d014      	beq.n	8002d10 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ce6:	f7fe f8e9 	bl	8000ebc <HAL_GetTick>
 8002cea:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cec:	e00a      	b.n	8002d04 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cee:	f7fe f8e5 	bl	8000ebc <HAL_GetTick>
 8002cf2:	4602      	mov	r2, r0
 8002cf4:	693b      	ldr	r3, [r7, #16]
 8002cf6:	1ad3      	subs	r3, r2, r3
 8002cf8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d901      	bls.n	8002d04 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002d00:	2303      	movs	r3, #3
 8002d02:	e036      	b.n	8002d72 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d04:	4b1d      	ldr	r3, [pc, #116]	@ (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d06:	6a1b      	ldr	r3, [r3, #32]
 8002d08:	f003 0302 	and.w	r3, r3, #2
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d0ee      	beq.n	8002cee <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d10:	4b1a      	ldr	r3, [pc, #104]	@ (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d12:	6a1b      	ldr	r3, [r3, #32]
 8002d14:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	4917      	ldr	r1, [pc, #92]	@ (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002d22:	7dfb      	ldrb	r3, [r7, #23]
 8002d24:	2b01      	cmp	r3, #1
 8002d26:	d105      	bne.n	8002d34 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d28:	4b14      	ldr	r3, [pc, #80]	@ (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d2a:	69db      	ldr	r3, [r3, #28]
 8002d2c:	4a13      	ldr	r2, [pc, #76]	@ (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d2e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d32:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f003 0302 	and.w	r3, r3, #2
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d008      	beq.n	8002d52 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002d40:	4b0e      	ldr	r3, [pc, #56]	@ (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	689b      	ldr	r3, [r3, #8]
 8002d4c:	490b      	ldr	r1, [pc, #44]	@ (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f003 0310 	and.w	r3, r3, #16
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d008      	beq.n	8002d70 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002d5e:	4b07      	ldr	r3, [pc, #28]	@ (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	68db      	ldr	r3, [r3, #12]
 8002d6a:	4904      	ldr	r1, [pc, #16]	@ (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002d70:	2300      	movs	r3, #0
}
 8002d72:	4618      	mov	r0, r3
 8002d74:	3718      	adds	r7, #24
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}
 8002d7a:	bf00      	nop
 8002d7c:	40021000 	.word	0x40021000
 8002d80:	40007000 	.word	0x40007000
 8002d84:	42420440 	.word	0x42420440

08002d88 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b088      	sub	sp, #32
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8002d90:	2300      	movs	r3, #0
 8002d92:	617b      	str	r3, [r7, #20]
 8002d94:	2300      	movs	r3, #0
 8002d96:	61fb      	str	r3, [r7, #28]
 8002d98:	2300      	movs	r3, #0
 8002d9a:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	60fb      	str	r3, [r7, #12]
 8002da0:	2300      	movs	r3, #0
 8002da2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2b10      	cmp	r3, #16
 8002da8:	d00a      	beq.n	8002dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2b10      	cmp	r3, #16
 8002dae:	f200 808a 	bhi.w	8002ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2b01      	cmp	r3, #1
 8002db6:	d045      	beq.n	8002e44 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2b02      	cmp	r3, #2
 8002dbc:	d075      	beq.n	8002eaa <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8002dbe:	e082      	b.n	8002ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8002dc0:	4b46      	ldr	r3, [pc, #280]	@ (8002edc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8002dc6:	4b45      	ldr	r3, [pc, #276]	@ (8002edc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d07b      	beq.n	8002eca <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	0c9b      	lsrs	r3, r3, #18
 8002dd6:	f003 030f 	and.w	r3, r3, #15
 8002dda:	4a41      	ldr	r2, [pc, #260]	@ (8002ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8002ddc:	5cd3      	ldrb	r3, [r2, r3]
 8002dde:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d015      	beq.n	8002e16 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002dea:	4b3c      	ldr	r3, [pc, #240]	@ (8002edc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	0c5b      	lsrs	r3, r3, #17
 8002df0:	f003 0301 	and.w	r3, r3, #1
 8002df4:	4a3b      	ldr	r2, [pc, #236]	@ (8002ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8002df6:	5cd3      	ldrb	r3, [r2, r3]
 8002df8:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d00d      	beq.n	8002e20 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002e04:	4a38      	ldr	r2, [pc, #224]	@ (8002ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8002e06:	697b      	ldr	r3, [r7, #20]
 8002e08:	fbb2 f2f3 	udiv	r2, r2, r3
 8002e0c:	693b      	ldr	r3, [r7, #16]
 8002e0e:	fb02 f303 	mul.w	r3, r2, r3
 8002e12:	61fb      	str	r3, [r7, #28]
 8002e14:	e004      	b.n	8002e20 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002e16:	693b      	ldr	r3, [r7, #16]
 8002e18:	4a34      	ldr	r2, [pc, #208]	@ (8002eec <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8002e1a:	fb02 f303 	mul.w	r3, r2, r3
 8002e1e:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002e20:	4b2e      	ldr	r3, [pc, #184]	@ (8002edc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e28:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002e2c:	d102      	bne.n	8002e34 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8002e2e:	69fb      	ldr	r3, [r7, #28]
 8002e30:	61bb      	str	r3, [r7, #24]
      break;
 8002e32:	e04a      	b.n	8002eca <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8002e34:	69fb      	ldr	r3, [r7, #28]
 8002e36:	005b      	lsls	r3, r3, #1
 8002e38:	4a2d      	ldr	r2, [pc, #180]	@ (8002ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002e3a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e3e:	085b      	lsrs	r3, r3, #1
 8002e40:	61bb      	str	r3, [r7, #24]
      break;
 8002e42:	e042      	b.n	8002eca <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8002e44:	4b25      	ldr	r3, [pc, #148]	@ (8002edc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002e46:	6a1b      	ldr	r3, [r3, #32]
 8002e48:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002e50:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002e54:	d108      	bne.n	8002e68 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	f003 0302 	and.w	r3, r3, #2
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d003      	beq.n	8002e68 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8002e60:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002e64:	61bb      	str	r3, [r7, #24]
 8002e66:	e01f      	b.n	8002ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002e6e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002e72:	d109      	bne.n	8002e88 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8002e74:	4b19      	ldr	r3, [pc, #100]	@ (8002edc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002e76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e78:	f003 0302 	and.w	r3, r3, #2
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d003      	beq.n	8002e88 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8002e80:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8002e84:	61bb      	str	r3, [r7, #24]
 8002e86:	e00f      	b.n	8002ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002e8e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002e92:	d11c      	bne.n	8002ece <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8002e94:	4b11      	ldr	r3, [pc, #68]	@ (8002edc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d016      	beq.n	8002ece <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8002ea0:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8002ea4:	61bb      	str	r3, [r7, #24]
      break;
 8002ea6:	e012      	b.n	8002ece <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8002ea8:	e011      	b.n	8002ece <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8002eaa:	f7ff fe85 	bl	8002bb8 <HAL_RCC_GetPCLK2Freq>
 8002eae:	4602      	mov	r2, r0
 8002eb0:	4b0a      	ldr	r3, [pc, #40]	@ (8002edc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	0b9b      	lsrs	r3, r3, #14
 8002eb6:	f003 0303 	and.w	r3, r3, #3
 8002eba:	3301      	adds	r3, #1
 8002ebc:	005b      	lsls	r3, r3, #1
 8002ebe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ec2:	61bb      	str	r3, [r7, #24]
      break;
 8002ec4:	e004      	b.n	8002ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002ec6:	bf00      	nop
 8002ec8:	e002      	b.n	8002ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002eca:	bf00      	nop
 8002ecc:	e000      	b.n	8002ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002ece:	bf00      	nop
    }
  }
  return (frequency);
 8002ed0:	69bb      	ldr	r3, [r7, #24]
}
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	3720      	adds	r7, #32
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}
 8002eda:	bf00      	nop
 8002edc:	40021000 	.word	0x40021000
 8002ee0:	080057a4 	.word	0x080057a4
 8002ee4:	080057b4 	.word	0x080057b4
 8002ee8:	007a1200 	.word	0x007a1200
 8002eec:	003d0900 	.word	0x003d0900
 8002ef0:	aaaaaaab 	.word	0xaaaaaaab

08002ef4 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b084      	sub	sp, #16
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8002efc:	2300      	movs	r3, #0
 8002efe:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d101      	bne.n	8002f0a <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8002f06:	2301      	movs	r3, #1
 8002f08:	e07a      	b.n	8003000 <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	7c5b      	ldrb	r3, [r3, #17]
 8002f0e:	b2db      	uxtb	r3, r3
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d105      	bne.n	8002f20 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2200      	movs	r2, #0
 8002f18:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002f1a:	6878      	ldr	r0, [r7, #4]
 8002f1c:	f7fd fc4a 	bl	80007b4 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2202      	movs	r2, #2
 8002f24:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002f26:	6878      	ldr	r0, [r7, #4]
 8002f28:	f000 f9be 	bl	80032a8 <HAL_RTC_WaitForSynchro>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d004      	beq.n	8002f3c <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2204      	movs	r2, #4
 8002f36:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	e061      	b.n	8003000 <HAL_RTC_Init+0x10c>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002f3c:	6878      	ldr	r0, [r7, #4]
 8002f3e:	f000 fa77 	bl	8003430 <RTC_EnterInitMode>
 8002f42:	4603      	mov	r3, r0
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d004      	beq.n	8002f52 <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2204      	movs	r2, #4
 8002f4c:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	e056      	b.n	8003000 <HAL_RTC_Init+0x10c>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	685a      	ldr	r2, [r3, #4]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f022 0207 	bic.w	r2, r2, #7
 8002f60:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	689b      	ldr	r3, [r3, #8]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d005      	beq.n	8002f76 <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8002f6a:	4b27      	ldr	r3, [pc, #156]	@ (8003008 <HAL_RTC_Init+0x114>)
 8002f6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f6e:	4a26      	ldr	r2, [pc, #152]	@ (8003008 <HAL_RTC_Init+0x114>)
 8002f70:	f023 0301 	bic.w	r3, r3, #1
 8002f74:	6313      	str	r3, [r2, #48]	@ 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8002f76:	4b24      	ldr	r3, [pc, #144]	@ (8003008 <HAL_RTC_Init+0x114>)
 8002f78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f7a:	f423 7260 	bic.w	r2, r3, #896	@ 0x380
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	689b      	ldr	r3, [r3, #8]
 8002f82:	4921      	ldr	r1, [pc, #132]	@ (8003008 <HAL_RTC_Init+0x114>)
 8002f84:	4313      	orrs	r3, r2
 8002f86:	62cb      	str	r3, [r1, #44]	@ 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f90:	d003      	beq.n	8002f9a <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	60fb      	str	r3, [r7, #12]
 8002f98:	e00e      	b.n	8002fb8 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8002f9a:	2001      	movs	r0, #1
 8002f9c:	f7ff fef4 	bl	8002d88 <HAL_RCCEx_GetPeriphCLKFreq>
 8002fa0:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d104      	bne.n	8002fb2 <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2204      	movs	r2, #4
 8002fac:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e026      	b.n	8003000 <HAL_RTC_Init+0x10c>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	3b01      	subs	r3, #1
 8002fb6:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	0c1a      	lsrs	r2, r3, #16
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f002 020f 	and.w	r2, r2, #15
 8002fc4:	609a      	str	r2, [r3, #8]
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	68fa      	ldr	r2, [r7, #12]
 8002fcc:	b292      	uxth	r2, r2
 8002fce:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8002fd0:	6878      	ldr	r0, [r7, #4]
 8002fd2:	f000 fa55 	bl	8003480 <RTC_ExitInitMode>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d004      	beq.n	8002fe6 <HAL_RTC_Init+0xf2>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2204      	movs	r2, #4
 8002fe0:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	e00c      	b.n	8003000 <HAL_RTC_Init+0x10c>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2200      	movs	r2, #0
 8002fea:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2201      	movs	r2, #1
 8002ff0:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2201      	movs	r2, #1
 8002ff6:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8002ffe:	2300      	movs	r3, #0
  }
}
 8003000:	4618      	mov	r0, r3
 8003002:	3710      	adds	r7, #16
 8003004:	46bd      	mov	sp, r7
 8003006:	bd80      	pop	{r7, pc}
 8003008:	40006c00 	.word	0x40006c00

0800300c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800300c:	b590      	push	{r4, r7, lr}
 800300e:	b087      	sub	sp, #28
 8003010:	af00      	add	r7, sp, #0
 8003012:	60f8      	str	r0, [r7, #12]
 8003014:	60b9      	str	r1, [r7, #8]
 8003016:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 8003018:	2300      	movs	r3, #0
 800301a:	617b      	str	r3, [r7, #20]
 800301c:	2300      	movs	r3, #0
 800301e:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d002      	beq.n	800302c <HAL_RTC_SetTime+0x20>
 8003026:	68bb      	ldr	r3, [r7, #8]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d101      	bne.n	8003030 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 800302c:	2301      	movs	r3, #1
 800302e:	e080      	b.n	8003132 <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	7c1b      	ldrb	r3, [r3, #16]
 8003034:	2b01      	cmp	r3, #1
 8003036:	d101      	bne.n	800303c <HAL_RTC_SetTime+0x30>
 8003038:	2302      	movs	r3, #2
 800303a:	e07a      	b.n	8003132 <HAL_RTC_SetTime+0x126>
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	2201      	movs	r2, #1
 8003040:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	2202      	movs	r2, #2
 8003046:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d113      	bne.n	8003076 <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 800304e:	68bb      	ldr	r3, [r7, #8]
 8003050:	781b      	ldrb	r3, [r3, #0]
 8003052:	461a      	mov	r2, r3
 8003054:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 8003058:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 800305c:	68bb      	ldr	r3, [r7, #8]
 800305e:	785b      	ldrb	r3, [r3, #1]
 8003060:	4619      	mov	r1, r3
 8003062:	460b      	mov	r3, r1
 8003064:	011b      	lsls	r3, r3, #4
 8003066:	1a5b      	subs	r3, r3, r1
 8003068:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 800306a:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 800306c:	68ba      	ldr	r2, [r7, #8]
 800306e:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8003070:	4413      	add	r3, r2
 8003072:	617b      	str	r3, [r7, #20]
 8003074:	e01e      	b.n	80030b4 <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8003076:	68bb      	ldr	r3, [r7, #8]
 8003078:	781b      	ldrb	r3, [r3, #0]
 800307a:	4618      	mov	r0, r3
 800307c:	f000 fa28 	bl	80034d0 <RTC_Bcd2ToByte>
 8003080:	4603      	mov	r3, r0
 8003082:	461a      	mov	r2, r3
 8003084:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 8003088:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 800308c:	68bb      	ldr	r3, [r7, #8]
 800308e:	785b      	ldrb	r3, [r3, #1]
 8003090:	4618      	mov	r0, r3
 8003092:	f000 fa1d 	bl	80034d0 <RTC_Bcd2ToByte>
 8003096:	4603      	mov	r3, r0
 8003098:	461a      	mov	r2, r3
 800309a:	4613      	mov	r3, r2
 800309c:	011b      	lsls	r3, r3, #4
 800309e:	1a9b      	subs	r3, r3, r2
 80030a0:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80030a2:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 80030a4:	68bb      	ldr	r3, [r7, #8]
 80030a6:	789b      	ldrb	r3, [r3, #2]
 80030a8:	4618      	mov	r0, r3
 80030aa:	f000 fa11 	bl	80034d0 <RTC_Bcd2ToByte>
 80030ae:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80030b0:	4423      	add	r3, r4
 80030b2:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 80030b4:	6979      	ldr	r1, [r7, #20]
 80030b6:	68f8      	ldr	r0, [r7, #12]
 80030b8:	f000 f953 	bl	8003362 <RTC_WriteTimeCounter>
 80030bc:	4603      	mov	r3, r0
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d007      	beq.n	80030d2 <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	2204      	movs	r2, #4
 80030c6:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	2200      	movs	r2, #0
 80030cc:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 80030ce:	2301      	movs	r3, #1
 80030d0:	e02f      	b.n	8003132 <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	685a      	ldr	r2, [r3, #4]
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f022 0205 	bic.w	r2, r2, #5
 80030e0:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80030e2:	68f8      	ldr	r0, [r7, #12]
 80030e4:	f000 f964 	bl	80033b0 <RTC_ReadAlarmCounter>
 80030e8:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 80030ea:	693b      	ldr	r3, [r7, #16]
 80030ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030f0:	d018      	beq.n	8003124 <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 80030f2:	693a      	ldr	r2, [r7, #16]
 80030f4:	697b      	ldr	r3, [r7, #20]
 80030f6:	429a      	cmp	r2, r3
 80030f8:	d214      	bcs.n	8003124 <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	f503 33a8 	add.w	r3, r3, #86016	@ 0x15000
 8003100:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 8003104:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8003106:	6939      	ldr	r1, [r7, #16]
 8003108:	68f8      	ldr	r0, [r7, #12]
 800310a:	f000 f96a 	bl	80033e2 <RTC_WriteAlarmCounter>
 800310e:	4603      	mov	r3, r0
 8003110:	2b00      	cmp	r3, #0
 8003112:	d007      	beq.n	8003124 <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	2204      	movs	r2, #4
 8003118:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	2200      	movs	r2, #0
 800311e:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8003120:	2301      	movs	r3, #1
 8003122:	e006      	b.n	8003132 <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	2201      	movs	r2, #1
 8003128:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	2200      	movs	r2, #0
 800312e:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8003130:	2300      	movs	r3, #0
  }
}
 8003132:	4618      	mov	r0, r3
 8003134:	371c      	adds	r7, #28
 8003136:	46bd      	mov	sp, r7
 8003138:	bd90      	pop	{r4, r7, pc}
	...

0800313c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b088      	sub	sp, #32
 8003140:	af00      	add	r7, sp, #0
 8003142:	60f8      	str	r0, [r7, #12]
 8003144:	60b9      	str	r1, [r7, #8]
 8003146:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 8003148:	2300      	movs	r3, #0
 800314a:	61fb      	str	r3, [r7, #28]
 800314c:	2300      	movs	r3, #0
 800314e:	61bb      	str	r3, [r7, #24]
 8003150:	2300      	movs	r3, #0
 8003152:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d002      	beq.n	8003160 <HAL_RTC_SetDate+0x24>
 800315a:	68bb      	ldr	r3, [r7, #8]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d101      	bne.n	8003164 <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 8003160:	2301      	movs	r3, #1
 8003162:	e097      	b.n	8003294 <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	7c1b      	ldrb	r3, [r3, #16]
 8003168:	2b01      	cmp	r3, #1
 800316a:	d101      	bne.n	8003170 <HAL_RTC_SetDate+0x34>
 800316c:	2302      	movs	r3, #2
 800316e:	e091      	b.n	8003294 <HAL_RTC_SetDate+0x158>
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	2201      	movs	r2, #1
 8003174:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	2202      	movs	r2, #2
 800317a:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d10c      	bne.n	800319c <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 8003182:	68bb      	ldr	r3, [r7, #8]
 8003184:	78da      	ldrb	r2, [r3, #3]
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 800318a:	68bb      	ldr	r3, [r7, #8]
 800318c:	785a      	ldrb	r2, [r3, #1]
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 8003192:	68bb      	ldr	r3, [r7, #8]
 8003194:	789a      	ldrb	r2, [r3, #2]
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	739a      	strb	r2, [r3, #14]
 800319a:	e01a      	b.n	80031d2 <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 800319c:	68bb      	ldr	r3, [r7, #8]
 800319e:	78db      	ldrb	r3, [r3, #3]
 80031a0:	4618      	mov	r0, r3
 80031a2:	f000 f995 	bl	80034d0 <RTC_Bcd2ToByte>
 80031a6:	4603      	mov	r3, r0
 80031a8:	461a      	mov	r2, r3
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	785b      	ldrb	r3, [r3, #1]
 80031b2:	4618      	mov	r0, r3
 80031b4:	f000 f98c 	bl	80034d0 <RTC_Bcd2ToByte>
 80031b8:	4603      	mov	r3, r0
 80031ba:	461a      	mov	r2, r3
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 80031c0:	68bb      	ldr	r3, [r7, #8]
 80031c2:	789b      	ldrb	r3, [r3, #2]
 80031c4:	4618      	mov	r0, r3
 80031c6:	f000 f983 	bl	80034d0 <RTC_Bcd2ToByte>
 80031ca:	4603      	mov	r3, r0
 80031cc:	461a      	mov	r2, r3
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	7bdb      	ldrb	r3, [r3, #15]
 80031d6:	4618      	mov	r0, r3
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	7b59      	ldrb	r1, [r3, #13]
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	7b9b      	ldrb	r3, [r3, #14]
 80031e0:	461a      	mov	r2, r3
 80031e2:	f000 f993 	bl	800350c <RTC_WeekDayNum>
 80031e6:	4603      	mov	r3, r0
 80031e8:	461a      	mov	r2, r3
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	7b1a      	ldrb	r2, [r3, #12]
 80031f2:	68bb      	ldr	r3, [r7, #8]
 80031f4:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 80031f6:	68f8      	ldr	r0, [r7, #12]
 80031f8:	f000 f883 	bl	8003302 <RTC_ReadTimeCounter>
 80031fc:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 80031fe:	69fb      	ldr	r3, [r7, #28]
 8003200:	4a26      	ldr	r2, [pc, #152]	@ (800329c <HAL_RTC_SetDate+0x160>)
 8003202:	fba2 2303 	umull	r2, r3, r2, r3
 8003206:	0adb      	lsrs	r3, r3, #11
 8003208:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 800320a:	697b      	ldr	r3, [r7, #20]
 800320c:	2b18      	cmp	r3, #24
 800320e:	d93a      	bls.n	8003286 <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 8003210:	697b      	ldr	r3, [r7, #20]
 8003212:	4a23      	ldr	r2, [pc, #140]	@ (80032a0 <HAL_RTC_SetDate+0x164>)
 8003214:	fba2 2303 	umull	r2, r3, r2, r3
 8003218:	091b      	lsrs	r3, r3, #4
 800321a:	4a22      	ldr	r2, [pc, #136]	@ (80032a4 <HAL_RTC_SetDate+0x168>)
 800321c:	fb02 f303 	mul.w	r3, r2, r3
 8003220:	69fa      	ldr	r2, [r7, #28]
 8003222:	1ad3      	subs	r3, r2, r3
 8003224:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8003226:	69f9      	ldr	r1, [r7, #28]
 8003228:	68f8      	ldr	r0, [r7, #12]
 800322a:	f000 f89a 	bl	8003362 <RTC_WriteTimeCounter>
 800322e:	4603      	mov	r3, r0
 8003230:	2b00      	cmp	r3, #0
 8003232:	d007      	beq.n	8003244 <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	2204      	movs	r2, #4
 8003238:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	2200      	movs	r2, #0
 800323e:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 8003240:	2301      	movs	r3, #1
 8003242:	e027      	b.n	8003294 <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8003244:	68f8      	ldr	r0, [r7, #12]
 8003246:	f000 f8b3 	bl	80033b0 <RTC_ReadAlarmCounter>
 800324a:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 800324c:	69bb      	ldr	r3, [r7, #24]
 800324e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003252:	d018      	beq.n	8003286 <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 8003254:	69ba      	ldr	r2, [r7, #24]
 8003256:	69fb      	ldr	r3, [r7, #28]
 8003258:	429a      	cmp	r2, r3
 800325a:	d214      	bcs.n	8003286 <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 800325c:	69bb      	ldr	r3, [r7, #24]
 800325e:	f503 33a8 	add.w	r3, r3, #86016	@ 0x15000
 8003262:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 8003266:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8003268:	69b9      	ldr	r1, [r7, #24]
 800326a:	68f8      	ldr	r0, [r7, #12]
 800326c:	f000 f8b9 	bl	80033e2 <RTC_WriteAlarmCounter>
 8003270:	4603      	mov	r3, r0
 8003272:	2b00      	cmp	r3, #0
 8003274:	d007      	beq.n	8003286 <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	2204      	movs	r2, #4
 800327a:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	2200      	movs	r2, #0
 8003280:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8003282:	2301      	movs	r3, #1
 8003284:	e006      	b.n	8003294 <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	2201      	movs	r2, #1
 800328a:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	2200      	movs	r2, #0
 8003290:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003292:	2300      	movs	r3, #0
}
 8003294:	4618      	mov	r0, r3
 8003296:	3720      	adds	r7, #32
 8003298:	46bd      	mov	sp, r7
 800329a:	bd80      	pop	{r7, pc}
 800329c:	91a2b3c5 	.word	0x91a2b3c5
 80032a0:	aaaaaaab 	.word	0xaaaaaaab
 80032a4:	00015180 	.word	0x00015180

080032a8 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b084      	sub	sp, #16
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80032b0:	2300      	movs	r3, #0
 80032b2:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d101      	bne.n	80032be <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	e01d      	b.n	80032fa <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	685a      	ldr	r2, [r3, #4]
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f022 0208 	bic.w	r2, r2, #8
 80032cc:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 80032ce:	f7fd fdf5 	bl	8000ebc <HAL_GetTick>
 80032d2:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 80032d4:	e009      	b.n	80032ea <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80032d6:	f7fd fdf1 	bl	8000ebc <HAL_GetTick>
 80032da:	4602      	mov	r2, r0
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	1ad3      	subs	r3, r2, r3
 80032e0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80032e4:	d901      	bls.n	80032ea <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 80032e6:	2303      	movs	r3, #3
 80032e8:	e007      	b.n	80032fa <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	f003 0308 	and.w	r3, r3, #8
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d0ee      	beq.n	80032d6 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 80032f8:	2300      	movs	r3, #0
}
 80032fa:	4618      	mov	r0, r3
 80032fc:	3710      	adds	r7, #16
 80032fe:	46bd      	mov	sp, r7
 8003300:	bd80      	pop	{r7, pc}

08003302 <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 8003302:	b480      	push	{r7}
 8003304:	b087      	sub	sp, #28
 8003306:	af00      	add	r7, sp, #0
 8003308:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 800330a:	2300      	movs	r3, #0
 800330c:	827b      	strh	r3, [r7, #18]
 800330e:	2300      	movs	r3, #0
 8003310:	823b      	strh	r3, [r7, #16]
 8003312:	2300      	movs	r3, #0
 8003314:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 8003316:	2300      	movs	r3, #0
 8003318:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	699b      	ldr	r3, [r3, #24]
 8003320:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	69db      	ldr	r3, [r3, #28]
 8003328:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	699b      	ldr	r3, [r3, #24]
 8003330:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 8003332:	8a7a      	ldrh	r2, [r7, #18]
 8003334:	8a3b      	ldrh	r3, [r7, #16]
 8003336:	429a      	cmp	r2, r3
 8003338:	d008      	beq.n	800334c <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 800333a:	8a3b      	ldrh	r3, [r7, #16]
 800333c:	041a      	lsls	r2, r3, #16
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	69db      	ldr	r3, [r3, #28]
 8003344:	b29b      	uxth	r3, r3
 8003346:	4313      	orrs	r3, r2
 8003348:	617b      	str	r3, [r7, #20]
 800334a:	e004      	b.n	8003356 <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 800334c:	8a7b      	ldrh	r3, [r7, #18]
 800334e:	041a      	lsls	r2, r3, #16
 8003350:	89fb      	ldrh	r3, [r7, #14]
 8003352:	4313      	orrs	r3, r2
 8003354:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 8003356:	697b      	ldr	r3, [r7, #20]
}
 8003358:	4618      	mov	r0, r3
 800335a:	371c      	adds	r7, #28
 800335c:	46bd      	mov	sp, r7
 800335e:	bc80      	pop	{r7}
 8003360:	4770      	bx	lr

08003362 <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 8003362:	b580      	push	{r7, lr}
 8003364:	b084      	sub	sp, #16
 8003366:	af00      	add	r7, sp, #0
 8003368:	6078      	str	r0, [r7, #4]
 800336a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800336c:	2300      	movs	r3, #0
 800336e:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003370:	6878      	ldr	r0, [r7, #4]
 8003372:	f000 f85d 	bl	8003430 <RTC_EnterInitMode>
 8003376:	4603      	mov	r3, r0
 8003378:	2b00      	cmp	r3, #0
 800337a:	d002      	beq.n	8003382 <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 800337c:	2301      	movs	r3, #1
 800337e:	73fb      	strb	r3, [r7, #15]
 8003380:	e011      	b.n	80033a6 <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	683a      	ldr	r2, [r7, #0]
 8003388:	0c12      	lsrs	r2, r2, #16
 800338a:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	683a      	ldr	r2, [r7, #0]
 8003392:	b292      	uxth	r2, r2
 8003394:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8003396:	6878      	ldr	r0, [r7, #4]
 8003398:	f000 f872 	bl	8003480 <RTC_ExitInitMode>
 800339c:	4603      	mov	r3, r0
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d001      	beq.n	80033a6 <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 80033a2:	2301      	movs	r3, #1
 80033a4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80033a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80033a8:	4618      	mov	r0, r3
 80033aa:	3710      	adds	r7, #16
 80033ac:	46bd      	mov	sp, r7
 80033ae:	bd80      	pop	{r7, pc}

080033b0 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 80033b0:	b480      	push	{r7}
 80033b2:	b085      	sub	sp, #20
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 80033b8:	2300      	movs	r3, #0
 80033ba:	81fb      	strh	r3, [r7, #14]
 80033bc:	2300      	movs	r3, #0
 80033be:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	6a1b      	ldr	r3, [r3, #32]
 80033c6:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033ce:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 80033d0:	89fb      	ldrh	r3, [r7, #14]
 80033d2:	041a      	lsls	r2, r3, #16
 80033d4:	89bb      	ldrh	r3, [r7, #12]
 80033d6:	4313      	orrs	r3, r2
}
 80033d8:	4618      	mov	r0, r3
 80033da:	3714      	adds	r7, #20
 80033dc:	46bd      	mov	sp, r7
 80033de:	bc80      	pop	{r7}
 80033e0:	4770      	bx	lr

080033e2 <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 80033e2:	b580      	push	{r7, lr}
 80033e4:	b084      	sub	sp, #16
 80033e6:	af00      	add	r7, sp, #0
 80033e8:	6078      	str	r0, [r7, #4]
 80033ea:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80033ec:	2300      	movs	r3, #0
 80033ee:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80033f0:	6878      	ldr	r0, [r7, #4]
 80033f2:	f000 f81d 	bl	8003430 <RTC_EnterInitMode>
 80033f6:	4603      	mov	r3, r0
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d002      	beq.n	8003402 <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 80033fc:	2301      	movs	r3, #1
 80033fe:	73fb      	strb	r3, [r7, #15]
 8003400:	e011      	b.n	8003426 <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	683a      	ldr	r2, [r7, #0]
 8003408:	0c12      	lsrs	r2, r2, #16
 800340a:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	683a      	ldr	r2, [r7, #0]
 8003412:	b292      	uxth	r2, r2
 8003414:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8003416:	6878      	ldr	r0, [r7, #4]
 8003418:	f000 f832 	bl	8003480 <RTC_ExitInitMode>
 800341c:	4603      	mov	r3, r0
 800341e:	2b00      	cmp	r3, #0
 8003420:	d001      	beq.n	8003426 <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 8003422:	2301      	movs	r3, #1
 8003424:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8003426:	7bfb      	ldrb	r3, [r7, #15]
}
 8003428:	4618      	mov	r0, r3
 800342a:	3710      	adds	r7, #16
 800342c:	46bd      	mov	sp, r7
 800342e:	bd80      	pop	{r7, pc}

08003430 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b084      	sub	sp, #16
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003438:	2300      	movs	r3, #0
 800343a:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 800343c:	f7fd fd3e 	bl	8000ebc <HAL_GetTick>
 8003440:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003442:	e009      	b.n	8003458 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8003444:	f7fd fd3a 	bl	8000ebc <HAL_GetTick>
 8003448:	4602      	mov	r2, r0
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	1ad3      	subs	r3, r2, r3
 800344e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003452:	d901      	bls.n	8003458 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8003454:	2303      	movs	r3, #3
 8003456:	e00f      	b.n	8003478 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	f003 0320 	and.w	r3, r3, #32
 8003462:	2b00      	cmp	r3, #0
 8003464:	d0ee      	beq.n	8003444 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	685a      	ldr	r2, [r3, #4]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f042 0210 	orr.w	r2, r2, #16
 8003474:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8003476:	2300      	movs	r3, #0
}
 8003478:	4618      	mov	r0, r3
 800347a:	3710      	adds	r7, #16
 800347c:	46bd      	mov	sp, r7
 800347e:	bd80      	pop	{r7, pc}

08003480 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b084      	sub	sp, #16
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003488:	2300      	movs	r3, #0
 800348a:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	685a      	ldr	r2, [r3, #4]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f022 0210 	bic.w	r2, r2, #16
 800349a:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 800349c:	f7fd fd0e 	bl	8000ebc <HAL_GetTick>
 80034a0:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80034a2:	e009      	b.n	80034b8 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80034a4:	f7fd fd0a 	bl	8000ebc <HAL_GetTick>
 80034a8:	4602      	mov	r2, r0
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	1ad3      	subs	r3, r2, r3
 80034ae:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80034b2:	d901      	bls.n	80034b8 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 80034b4:	2303      	movs	r3, #3
 80034b6:	e007      	b.n	80034c8 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	f003 0320 	and.w	r3, r3, #32
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d0ee      	beq.n	80034a4 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 80034c6:	2300      	movs	r3, #0
}
 80034c8:	4618      	mov	r0, r3
 80034ca:	3710      	adds	r7, #16
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bd80      	pop	{r7, pc}

080034d0 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80034d0:	b480      	push	{r7}
 80034d2:	b085      	sub	sp, #20
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	4603      	mov	r3, r0
 80034d8:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 80034da:	2300      	movs	r3, #0
 80034dc:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 80034de:	79fb      	ldrb	r3, [r7, #7]
 80034e0:	091b      	lsrs	r3, r3, #4
 80034e2:	b2db      	uxtb	r3, r3
 80034e4:	461a      	mov	r2, r3
 80034e6:	4613      	mov	r3, r2
 80034e8:	009b      	lsls	r3, r3, #2
 80034ea:	4413      	add	r3, r2
 80034ec:	005b      	lsls	r3, r3, #1
 80034ee:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 80034f0:	79fb      	ldrb	r3, [r7, #7]
 80034f2:	f003 030f 	and.w	r3, r3, #15
 80034f6:	b2da      	uxtb	r2, r3
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	b2db      	uxtb	r3, r3
 80034fc:	4413      	add	r3, r2
 80034fe:	b2db      	uxtb	r3, r3
}
 8003500:	4618      	mov	r0, r3
 8003502:	3714      	adds	r7, #20
 8003504:	46bd      	mov	sp, r7
 8003506:	bc80      	pop	{r7}
 8003508:	4770      	bx	lr
	...

0800350c <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 800350c:	b480      	push	{r7}
 800350e:	b085      	sub	sp, #20
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
 8003514:	460b      	mov	r3, r1
 8003516:	70fb      	strb	r3, [r7, #3]
 8003518:	4613      	mov	r3, r2
 800351a:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 800351c:	2300      	movs	r3, #0
 800351e:	60bb      	str	r3, [r7, #8]
 8003520:	2300      	movs	r3, #0
 8003522:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 800352a:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 800352c:	78fb      	ldrb	r3, [r7, #3]
 800352e:	2b02      	cmp	r3, #2
 8003530:	d82d      	bhi.n	800358e <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8003532:	78fa      	ldrb	r2, [r7, #3]
 8003534:	4613      	mov	r3, r2
 8003536:	005b      	lsls	r3, r3, #1
 8003538:	4413      	add	r3, r2
 800353a:	00db      	lsls	r3, r3, #3
 800353c:	1a9b      	subs	r3, r3, r2
 800353e:	4a2c      	ldr	r2, [pc, #176]	@ (80035f0 <RTC_WeekDayNum+0xe4>)
 8003540:	fba2 2303 	umull	r2, r3, r2, r3
 8003544:	085a      	lsrs	r2, r3, #1
 8003546:	78bb      	ldrb	r3, [r7, #2]
 8003548:	441a      	add	r2, r3
 800354a:	68bb      	ldr	r3, [r7, #8]
 800354c:	441a      	add	r2, r3
 800354e:	68bb      	ldr	r3, [r7, #8]
 8003550:	3b01      	subs	r3, #1
 8003552:	089b      	lsrs	r3, r3, #2
 8003554:	441a      	add	r2, r3
 8003556:	68bb      	ldr	r3, [r7, #8]
 8003558:	3b01      	subs	r3, #1
 800355a:	4926      	ldr	r1, [pc, #152]	@ (80035f4 <RTC_WeekDayNum+0xe8>)
 800355c:	fba1 1303 	umull	r1, r3, r1, r3
 8003560:	095b      	lsrs	r3, r3, #5
 8003562:	1ad2      	subs	r2, r2, r3
 8003564:	68bb      	ldr	r3, [r7, #8]
 8003566:	3b01      	subs	r3, #1
 8003568:	4922      	ldr	r1, [pc, #136]	@ (80035f4 <RTC_WeekDayNum+0xe8>)
 800356a:	fba1 1303 	umull	r1, r3, r1, r3
 800356e:	09db      	lsrs	r3, r3, #7
 8003570:	4413      	add	r3, r2
 8003572:	1d1a      	adds	r2, r3, #4
 8003574:	4b20      	ldr	r3, [pc, #128]	@ (80035f8 <RTC_WeekDayNum+0xec>)
 8003576:	fba3 1302 	umull	r1, r3, r3, r2
 800357a:	1ad1      	subs	r1, r2, r3
 800357c:	0849      	lsrs	r1, r1, #1
 800357e:	440b      	add	r3, r1
 8003580:	0899      	lsrs	r1, r3, #2
 8003582:	460b      	mov	r3, r1
 8003584:	00db      	lsls	r3, r3, #3
 8003586:	1a5b      	subs	r3, r3, r1
 8003588:	1ad3      	subs	r3, r2, r3
 800358a:	60fb      	str	r3, [r7, #12]
 800358c:	e029      	b.n	80035e2 <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 800358e:	78fa      	ldrb	r2, [r7, #3]
 8003590:	4613      	mov	r3, r2
 8003592:	005b      	lsls	r3, r3, #1
 8003594:	4413      	add	r3, r2
 8003596:	00db      	lsls	r3, r3, #3
 8003598:	1a9b      	subs	r3, r3, r2
 800359a:	4a15      	ldr	r2, [pc, #84]	@ (80035f0 <RTC_WeekDayNum+0xe4>)
 800359c:	fba2 2303 	umull	r2, r3, r2, r3
 80035a0:	085a      	lsrs	r2, r3, #1
 80035a2:	78bb      	ldrb	r3, [r7, #2]
 80035a4:	441a      	add	r2, r3
 80035a6:	68bb      	ldr	r3, [r7, #8]
 80035a8:	441a      	add	r2, r3
 80035aa:	68bb      	ldr	r3, [r7, #8]
 80035ac:	089b      	lsrs	r3, r3, #2
 80035ae:	441a      	add	r2, r3
 80035b0:	68bb      	ldr	r3, [r7, #8]
 80035b2:	4910      	ldr	r1, [pc, #64]	@ (80035f4 <RTC_WeekDayNum+0xe8>)
 80035b4:	fba1 1303 	umull	r1, r3, r1, r3
 80035b8:	095b      	lsrs	r3, r3, #5
 80035ba:	1ad2      	subs	r2, r2, r3
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	490d      	ldr	r1, [pc, #52]	@ (80035f4 <RTC_WeekDayNum+0xe8>)
 80035c0:	fba1 1303 	umull	r1, r3, r1, r3
 80035c4:	09db      	lsrs	r3, r3, #7
 80035c6:	4413      	add	r3, r2
 80035c8:	1c9a      	adds	r2, r3, #2
 80035ca:	4b0b      	ldr	r3, [pc, #44]	@ (80035f8 <RTC_WeekDayNum+0xec>)
 80035cc:	fba3 1302 	umull	r1, r3, r3, r2
 80035d0:	1ad1      	subs	r1, r2, r3
 80035d2:	0849      	lsrs	r1, r1, #1
 80035d4:	440b      	add	r3, r1
 80035d6:	0899      	lsrs	r1, r3, #2
 80035d8:	460b      	mov	r3, r1
 80035da:	00db      	lsls	r3, r3, #3
 80035dc:	1a5b      	subs	r3, r3, r1
 80035de:	1ad3      	subs	r3, r2, r3
 80035e0:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	b2db      	uxtb	r3, r3
}
 80035e6:	4618      	mov	r0, r3
 80035e8:	3714      	adds	r7, #20
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bc80      	pop	{r7}
 80035ee:	4770      	bx	lr
 80035f0:	38e38e39 	.word	0x38e38e39
 80035f4:	51eb851f 	.word	0x51eb851f
 80035f8:	24924925 	.word	0x24924925

080035fc <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register (depending devices).
  * @param  Data: Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 80035fc:	b480      	push	{r7}
 80035fe:	b087      	sub	sp, #28
 8003600:	af00      	add	r7, sp, #0
 8003602:	60f8      	str	r0, [r7, #12]
 8003604:	60b9      	str	r1, [r7, #8]
 8003606:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8003608:	2300      	movs	r3, #0
 800360a:	617b      	str	r3, [r7, #20]
  UNUSED(hrtc);

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)BKP_BASE;
 800360c:	4b07      	ldr	r3, [pc, #28]	@ (800362c <HAL_RTCEx_BKUPWrite+0x30>)
 800360e:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8003610:	68bb      	ldr	r3, [r7, #8]
 8003612:	009b      	lsls	r3, r3, #2
 8003614:	697a      	ldr	r2, [r7, #20]
 8003616:	4413      	add	r3, r2
 8003618:	617b      	str	r3, [r7, #20]

  *(__IO uint32_t *) tmp = (Data & BKP_DR1_D);
 800361a:	697b      	ldr	r3, [r7, #20]
 800361c:	687a      	ldr	r2, [r7, #4]
 800361e:	b292      	uxth	r2, r2
 8003620:	601a      	str	r2, [r3, #0]
}
 8003622:	bf00      	nop
 8003624:	371c      	adds	r7, #28
 8003626:	46bd      	mov	sp, r7
 8003628:	bc80      	pop	{r7}
 800362a:	4770      	bx	lr
 800362c:	40006c00 	.word	0x40006c00

08003630 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 1 to 10 (or 42) to
  *                                 specify the register (depending devices).
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8003630:	b480      	push	{r7}
 8003632:	b085      	sub	sp, #20
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
 8003638:	6039      	str	r1, [r7, #0]
  uint32_t backupregister = 0U;
 800363a:	2300      	movs	r3, #0
 800363c:	60fb      	str	r3, [r7, #12]
  uint32_t pvalue = 0U;
 800363e:	2300      	movs	r3, #0
 8003640:	60bb      	str	r3, [r7, #8]
  UNUSED(hrtc);

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  backupregister = (uint32_t)BKP_BASE;
 8003642:	4b08      	ldr	r3, [pc, #32]	@ (8003664 <HAL_RTCEx_BKUPRead+0x34>)
 8003644:	60fb      	str	r3, [r7, #12]
  backupregister += (BackupRegister * 4U);
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	009b      	lsls	r3, r3, #2
 800364a:	68fa      	ldr	r2, [r7, #12]
 800364c:	4413      	add	r3, r2
 800364e:	60fb      	str	r3, [r7, #12]

  pvalue = (*(__IO uint32_t *)(backupregister)) & BKP_DR1_D;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	b29b      	uxth	r3, r3
 8003656:	60bb      	str	r3, [r7, #8]

  /* Read the specified register */
  return pvalue;
 8003658:	68bb      	ldr	r3, [r7, #8]
}
 800365a:	4618      	mov	r0, r3
 800365c:	3714      	adds	r7, #20
 800365e:	46bd      	mov	sp, r7
 8003660:	bc80      	pop	{r7}
 8003662:	4770      	bx	lr
 8003664:	40006c00 	.word	0x40006c00

08003668 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b082      	sub	sp, #8
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d101      	bne.n	800367a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003676:	2301      	movs	r3, #1
 8003678:	e042      	b.n	8003700 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003680:	b2db      	uxtb	r3, r3
 8003682:	2b00      	cmp	r3, #0
 8003684:	d106      	bne.n	8003694 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2200      	movs	r2, #0
 800368a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800368e:	6878      	ldr	r0, [r7, #4]
 8003690:	f7fd fb06 	bl	8000ca0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2224      	movs	r2, #36	@ 0x24
 8003698:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	68da      	ldr	r2, [r3, #12]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80036aa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80036ac:	6878      	ldr	r0, [r7, #4]
 80036ae:	f000 ff3d 	bl	800452c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	691a      	ldr	r2, [r3, #16]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80036c0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	695a      	ldr	r2, [r3, #20]
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80036d0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	68da      	ldr	r2, [r3, #12]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80036e0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2200      	movs	r2, #0
 80036e6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2220      	movs	r2, #32
 80036ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2220      	movs	r2, #32
 80036f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2200      	movs	r2, #0
 80036fc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80036fe:	2300      	movs	r3, #0
}
 8003700:	4618      	mov	r0, r3
 8003702:	3708      	adds	r7, #8
 8003704:	46bd      	mov	sp, r7
 8003706:	bd80      	pop	{r7, pc}

08003708 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b08a      	sub	sp, #40	@ 0x28
 800370c:	af02      	add	r7, sp, #8
 800370e:	60f8      	str	r0, [r7, #12]
 8003710:	60b9      	str	r1, [r7, #8]
 8003712:	603b      	str	r3, [r7, #0]
 8003714:	4613      	mov	r3, r2
 8003716:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003718:	2300      	movs	r3, #0
 800371a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003722:	b2db      	uxtb	r3, r3
 8003724:	2b20      	cmp	r3, #32
 8003726:	d175      	bne.n	8003814 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003728:	68bb      	ldr	r3, [r7, #8]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d002      	beq.n	8003734 <HAL_UART_Transmit+0x2c>
 800372e:	88fb      	ldrh	r3, [r7, #6]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d101      	bne.n	8003738 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003734:	2301      	movs	r3, #1
 8003736:	e06e      	b.n	8003816 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	2200      	movs	r2, #0
 800373c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	2221      	movs	r2, #33	@ 0x21
 8003742:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003746:	f7fd fbb9 	bl	8000ebc <HAL_GetTick>
 800374a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	88fa      	ldrh	r2, [r7, #6]
 8003750:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	88fa      	ldrh	r2, [r7, #6]
 8003756:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	689b      	ldr	r3, [r3, #8]
 800375c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003760:	d108      	bne.n	8003774 <HAL_UART_Transmit+0x6c>
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	691b      	ldr	r3, [r3, #16]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d104      	bne.n	8003774 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800376a:	2300      	movs	r3, #0
 800376c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800376e:	68bb      	ldr	r3, [r7, #8]
 8003770:	61bb      	str	r3, [r7, #24]
 8003772:	e003      	b.n	800377c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003774:	68bb      	ldr	r3, [r7, #8]
 8003776:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003778:	2300      	movs	r3, #0
 800377a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800377c:	e02e      	b.n	80037dc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	9300      	str	r3, [sp, #0]
 8003782:	697b      	ldr	r3, [r7, #20]
 8003784:	2200      	movs	r2, #0
 8003786:	2180      	movs	r1, #128	@ 0x80
 8003788:	68f8      	ldr	r0, [r7, #12]
 800378a:	f000 fc1a 	bl	8003fc2 <UART_WaitOnFlagUntilTimeout>
 800378e:	4603      	mov	r3, r0
 8003790:	2b00      	cmp	r3, #0
 8003792:	d005      	beq.n	80037a0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	2220      	movs	r2, #32
 8003798:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800379c:	2303      	movs	r3, #3
 800379e:	e03a      	b.n	8003816 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80037a0:	69fb      	ldr	r3, [r7, #28]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d10b      	bne.n	80037be <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80037a6:	69bb      	ldr	r3, [r7, #24]
 80037a8:	881b      	ldrh	r3, [r3, #0]
 80037aa:	461a      	mov	r2, r3
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80037b4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80037b6:	69bb      	ldr	r3, [r7, #24]
 80037b8:	3302      	adds	r3, #2
 80037ba:	61bb      	str	r3, [r7, #24]
 80037bc:	e007      	b.n	80037ce <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80037be:	69fb      	ldr	r3, [r7, #28]
 80037c0:	781a      	ldrb	r2, [r3, #0]
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80037c8:	69fb      	ldr	r3, [r7, #28]
 80037ca:	3301      	adds	r3, #1
 80037cc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80037d2:	b29b      	uxth	r3, r3
 80037d4:	3b01      	subs	r3, #1
 80037d6:	b29a      	uxth	r2, r3
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80037e0:	b29b      	uxth	r3, r3
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d1cb      	bne.n	800377e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	9300      	str	r3, [sp, #0]
 80037ea:	697b      	ldr	r3, [r7, #20]
 80037ec:	2200      	movs	r2, #0
 80037ee:	2140      	movs	r1, #64	@ 0x40
 80037f0:	68f8      	ldr	r0, [r7, #12]
 80037f2:	f000 fbe6 	bl	8003fc2 <UART_WaitOnFlagUntilTimeout>
 80037f6:	4603      	mov	r3, r0
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d005      	beq.n	8003808 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	2220      	movs	r2, #32
 8003800:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003804:	2303      	movs	r3, #3
 8003806:	e006      	b.n	8003816 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	2220      	movs	r2, #32
 800380c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003810:	2300      	movs	r3, #0
 8003812:	e000      	b.n	8003816 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003814:	2302      	movs	r3, #2
  }
}
 8003816:	4618      	mov	r0, r3
 8003818:	3720      	adds	r7, #32
 800381a:	46bd      	mov	sp, r7
 800381c:	bd80      	pop	{r7, pc}

0800381e <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800381e:	b580      	push	{r7, lr}
 8003820:	b084      	sub	sp, #16
 8003822:	af00      	add	r7, sp, #0
 8003824:	60f8      	str	r0, [r7, #12]
 8003826:	60b9      	str	r1, [r7, #8]
 8003828:	4613      	mov	r3, r2
 800382a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003832:	b2db      	uxtb	r3, r3
 8003834:	2b20      	cmp	r3, #32
 8003836:	d112      	bne.n	800385e <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003838:	68bb      	ldr	r3, [r7, #8]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d002      	beq.n	8003844 <HAL_UART_Receive_DMA+0x26>
 800383e:	88fb      	ldrh	r3, [r7, #6]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d101      	bne.n	8003848 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8003844:	2301      	movs	r3, #1
 8003846:	e00b      	b.n	8003860 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	2200      	movs	r2, #0
 800384c:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800384e:	88fb      	ldrh	r3, [r7, #6]
 8003850:	461a      	mov	r2, r3
 8003852:	68b9      	ldr	r1, [r7, #8]
 8003854:	68f8      	ldr	r0, [r7, #12]
 8003856:	f000 fc0d 	bl	8004074 <UART_Start_Receive_DMA>
 800385a:	4603      	mov	r3, r0
 800385c:	e000      	b.n	8003860 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 800385e:	2302      	movs	r3, #2
  }
}
 8003860:	4618      	mov	r0, r3
 8003862:	3710      	adds	r7, #16
 8003864:	46bd      	mov	sp, r7
 8003866:	bd80      	pop	{r7, pc}

08003868 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b0ba      	sub	sp, #232	@ 0xe8
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	68db      	ldr	r3, [r3, #12]
 8003880:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	695b      	ldr	r3, [r3, #20]
 800388a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800388e:	2300      	movs	r3, #0
 8003890:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003894:	2300      	movs	r3, #0
 8003896:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800389a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800389e:	f003 030f 	and.w	r3, r3, #15
 80038a2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80038a6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d10f      	bne.n	80038ce <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80038ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80038b2:	f003 0320 	and.w	r3, r3, #32
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d009      	beq.n	80038ce <HAL_UART_IRQHandler+0x66>
 80038ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80038be:	f003 0320 	and.w	r3, r3, #32
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d003      	beq.n	80038ce <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80038c6:	6878      	ldr	r0, [r7, #4]
 80038c8:	f000 fd72 	bl	80043b0 <UART_Receive_IT>
      return;
 80038cc:	e25b      	b.n	8003d86 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80038ce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	f000 80de 	beq.w	8003a94 <HAL_UART_IRQHandler+0x22c>
 80038d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80038dc:	f003 0301 	and.w	r3, r3, #1
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d106      	bne.n	80038f2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80038e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80038e8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	f000 80d1 	beq.w	8003a94 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80038f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80038f6:	f003 0301 	and.w	r3, r3, #1
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d00b      	beq.n	8003916 <HAL_UART_IRQHandler+0xae>
 80038fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003902:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003906:	2b00      	cmp	r3, #0
 8003908:	d005      	beq.n	8003916 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800390e:	f043 0201 	orr.w	r2, r3, #1
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003916:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800391a:	f003 0304 	and.w	r3, r3, #4
 800391e:	2b00      	cmp	r3, #0
 8003920:	d00b      	beq.n	800393a <HAL_UART_IRQHandler+0xd2>
 8003922:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003926:	f003 0301 	and.w	r3, r3, #1
 800392a:	2b00      	cmp	r3, #0
 800392c:	d005      	beq.n	800393a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003932:	f043 0202 	orr.w	r2, r3, #2
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800393a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800393e:	f003 0302 	and.w	r3, r3, #2
 8003942:	2b00      	cmp	r3, #0
 8003944:	d00b      	beq.n	800395e <HAL_UART_IRQHandler+0xf6>
 8003946:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800394a:	f003 0301 	and.w	r3, r3, #1
 800394e:	2b00      	cmp	r3, #0
 8003950:	d005      	beq.n	800395e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003956:	f043 0204 	orr.w	r2, r3, #4
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800395e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003962:	f003 0308 	and.w	r3, r3, #8
 8003966:	2b00      	cmp	r3, #0
 8003968:	d011      	beq.n	800398e <HAL_UART_IRQHandler+0x126>
 800396a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800396e:	f003 0320 	and.w	r3, r3, #32
 8003972:	2b00      	cmp	r3, #0
 8003974:	d105      	bne.n	8003982 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003976:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800397a:	f003 0301 	and.w	r3, r3, #1
 800397e:	2b00      	cmp	r3, #0
 8003980:	d005      	beq.n	800398e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003986:	f043 0208 	orr.w	r2, r3, #8
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003992:	2b00      	cmp	r3, #0
 8003994:	f000 81f2 	beq.w	8003d7c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003998:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800399c:	f003 0320 	and.w	r3, r3, #32
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d008      	beq.n	80039b6 <HAL_UART_IRQHandler+0x14e>
 80039a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80039a8:	f003 0320 	and.w	r3, r3, #32
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d002      	beq.n	80039b6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80039b0:	6878      	ldr	r0, [r7, #4]
 80039b2:	f000 fcfd 	bl	80043b0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	695b      	ldr	r3, [r3, #20]
 80039bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	bf14      	ite	ne
 80039c4:	2301      	movne	r3, #1
 80039c6:	2300      	moveq	r3, #0
 80039c8:	b2db      	uxtb	r3, r3
 80039ca:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039d2:	f003 0308 	and.w	r3, r3, #8
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d103      	bne.n	80039e2 <HAL_UART_IRQHandler+0x17a>
 80039da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d04f      	beq.n	8003a82 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80039e2:	6878      	ldr	r0, [r7, #4]
 80039e4:	f000 fc07 	bl	80041f6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	695b      	ldr	r3, [r3, #20]
 80039ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d041      	beq.n	8003a7a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	3314      	adds	r3, #20
 80039fc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a00:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003a04:	e853 3f00 	ldrex	r3, [r3]
 8003a08:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003a0c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003a10:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003a14:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	3314      	adds	r3, #20
 8003a1e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003a22:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003a26:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a2a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003a2e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003a32:	e841 2300 	strex	r3, r2, [r1]
 8003a36:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003a3a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d1d9      	bne.n	80039f6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d013      	beq.n	8003a72 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a4e:	4a7e      	ldr	r2, [pc, #504]	@ (8003c48 <HAL_UART_IRQHandler+0x3e0>)
 8003a50:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a56:	4618      	mov	r0, r3
 8003a58:	f7fd fc7e 	bl	8001358 <HAL_DMA_Abort_IT>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d016      	beq.n	8003a90 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a68:	687a      	ldr	r2, [r7, #4]
 8003a6a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003a6c:	4610      	mov	r0, r2
 8003a6e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a70:	e00e      	b.n	8003a90 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003a72:	6878      	ldr	r0, [r7, #4]
 8003a74:	f000 f993 	bl	8003d9e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a78:	e00a      	b.n	8003a90 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003a7a:	6878      	ldr	r0, [r7, #4]
 8003a7c:	f000 f98f 	bl	8003d9e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a80:	e006      	b.n	8003a90 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003a82:	6878      	ldr	r0, [r7, #4]
 8003a84:	f000 f98b 	bl	8003d9e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003a8e:	e175      	b.n	8003d7c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a90:	bf00      	nop
    return;
 8003a92:	e173      	b.n	8003d7c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a98:	2b01      	cmp	r3, #1
 8003a9a:	f040 814f 	bne.w	8003d3c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003a9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003aa2:	f003 0310 	and.w	r3, r3, #16
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	f000 8148 	beq.w	8003d3c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003aac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ab0:	f003 0310 	and.w	r3, r3, #16
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	f000 8141 	beq.w	8003d3c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003aba:	2300      	movs	r3, #0
 8003abc:	60bb      	str	r3, [r7, #8]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	60bb      	str	r3, [r7, #8]
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	60bb      	str	r3, [r7, #8]
 8003ace:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	695b      	ldr	r3, [r3, #20]
 8003ad6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	f000 80b6 	beq.w	8003c4c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003aec:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	f000 8145 	beq.w	8003d80 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003afa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003afe:	429a      	cmp	r2, r3
 8003b00:	f080 813e 	bcs.w	8003d80 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003b0a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b10:	699b      	ldr	r3, [r3, #24]
 8003b12:	2b20      	cmp	r3, #32
 8003b14:	f000 8088 	beq.w	8003c28 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	330c      	adds	r3, #12
 8003b1e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b22:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003b26:	e853 3f00 	ldrex	r3, [r3]
 8003b2a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003b2e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003b32:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003b36:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	330c      	adds	r3, #12
 8003b40:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003b44:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003b48:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b4c:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003b50:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003b54:	e841 2300 	strex	r3, r2, [r1]
 8003b58:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003b5c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d1d9      	bne.n	8003b18 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	3314      	adds	r3, #20
 8003b6a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b6c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003b6e:	e853 3f00 	ldrex	r3, [r3]
 8003b72:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003b74:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003b76:	f023 0301 	bic.w	r3, r3, #1
 8003b7a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	3314      	adds	r3, #20
 8003b84:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003b88:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003b8c:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b8e:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003b90:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003b94:	e841 2300 	strex	r3, r2, [r1]
 8003b98:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003b9a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d1e1      	bne.n	8003b64 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	3314      	adds	r3, #20
 8003ba6:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ba8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003baa:	e853 3f00 	ldrex	r3, [r3]
 8003bae:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003bb0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003bb2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003bb6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	3314      	adds	r3, #20
 8003bc0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003bc4:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003bc6:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bc8:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003bca:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003bcc:	e841 2300 	strex	r3, r2, [r1]
 8003bd0:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003bd2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d1e3      	bne.n	8003ba0 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2220      	movs	r2, #32
 8003bdc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2200      	movs	r2, #0
 8003be4:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	330c      	adds	r3, #12
 8003bec:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003bf0:	e853 3f00 	ldrex	r3, [r3]
 8003bf4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003bf6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003bf8:	f023 0310 	bic.w	r3, r3, #16
 8003bfc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	330c      	adds	r3, #12
 8003c06:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003c0a:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003c0c:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c0e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003c10:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003c12:	e841 2300 	strex	r3, r2, [r1]
 8003c16:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003c18:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d1e3      	bne.n	8003be6 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c22:	4618      	mov	r0, r3
 8003c24:	f7fd fb5c 	bl	80012e0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2202      	movs	r2, #2
 8003c2c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003c36:	b29b      	uxth	r3, r3
 8003c38:	1ad3      	subs	r3, r2, r3
 8003c3a:	b29b      	uxth	r3, r3
 8003c3c:	4619      	mov	r1, r3
 8003c3e:	6878      	ldr	r0, [r7, #4]
 8003c40:	f000 f8b6 	bl	8003db0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003c44:	e09c      	b.n	8003d80 <HAL_UART_IRQHandler+0x518>
 8003c46:	bf00      	nop
 8003c48:	080042bb 	.word	0x080042bb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003c54:	b29b      	uxth	r3, r3
 8003c56:	1ad3      	subs	r3, r2, r3
 8003c58:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003c60:	b29b      	uxth	r3, r3
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	f000 808e 	beq.w	8003d84 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003c68:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	f000 8089 	beq.w	8003d84 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	330c      	adds	r3, #12
 8003c78:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c7c:	e853 3f00 	ldrex	r3, [r3]
 8003c80:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003c82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c84:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003c88:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	330c      	adds	r3, #12
 8003c92:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003c96:	647a      	str	r2, [r7, #68]	@ 0x44
 8003c98:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c9a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003c9c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003c9e:	e841 2300 	strex	r3, r2, [r1]
 8003ca2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003ca4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d1e3      	bne.n	8003c72 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	3314      	adds	r3, #20
 8003cb0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cb4:	e853 3f00 	ldrex	r3, [r3]
 8003cb8:	623b      	str	r3, [r7, #32]
   return(result);
 8003cba:	6a3b      	ldr	r3, [r7, #32]
 8003cbc:	f023 0301 	bic.w	r3, r3, #1
 8003cc0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	3314      	adds	r3, #20
 8003cca:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003cce:	633a      	str	r2, [r7, #48]	@ 0x30
 8003cd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cd2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003cd4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003cd6:	e841 2300 	strex	r3, r2, [r1]
 8003cda:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003cdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d1e3      	bne.n	8003caa <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2220      	movs	r2, #32
 8003ce6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2200      	movs	r2, #0
 8003cee:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	330c      	adds	r3, #12
 8003cf6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cf8:	693b      	ldr	r3, [r7, #16]
 8003cfa:	e853 3f00 	ldrex	r3, [r3]
 8003cfe:	60fb      	str	r3, [r7, #12]
   return(result);
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	f023 0310 	bic.w	r3, r3, #16
 8003d06:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	330c      	adds	r3, #12
 8003d10:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003d14:	61fa      	str	r2, [r7, #28]
 8003d16:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d18:	69b9      	ldr	r1, [r7, #24]
 8003d1a:	69fa      	ldr	r2, [r7, #28]
 8003d1c:	e841 2300 	strex	r3, r2, [r1]
 8003d20:	617b      	str	r3, [r7, #20]
   return(result);
 8003d22:	697b      	ldr	r3, [r7, #20]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d1e3      	bne.n	8003cf0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2202      	movs	r2, #2
 8003d2c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003d2e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003d32:	4619      	mov	r1, r3
 8003d34:	6878      	ldr	r0, [r7, #4]
 8003d36:	f000 f83b 	bl	8003db0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003d3a:	e023      	b.n	8003d84 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003d3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d40:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d009      	beq.n	8003d5c <HAL_UART_IRQHandler+0x4f4>
 8003d48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d4c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d003      	beq.n	8003d5c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003d54:	6878      	ldr	r0, [r7, #4]
 8003d56:	f000 fac4 	bl	80042e2 <UART_Transmit_IT>
    return;
 8003d5a:	e014      	b.n	8003d86 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003d5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d00e      	beq.n	8003d86 <HAL_UART_IRQHandler+0x51e>
 8003d68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d008      	beq.n	8003d86 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003d74:	6878      	ldr	r0, [r7, #4]
 8003d76:	f000 fb03 	bl	8004380 <UART_EndTransmit_IT>
    return;
 8003d7a:	e004      	b.n	8003d86 <HAL_UART_IRQHandler+0x51e>
    return;
 8003d7c:	bf00      	nop
 8003d7e:	e002      	b.n	8003d86 <HAL_UART_IRQHandler+0x51e>
      return;
 8003d80:	bf00      	nop
 8003d82:	e000      	b.n	8003d86 <HAL_UART_IRQHandler+0x51e>
      return;
 8003d84:	bf00      	nop
  }
}
 8003d86:	37e8      	adds	r7, #232	@ 0xe8
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	bd80      	pop	{r7, pc}

08003d8c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	b083      	sub	sp, #12
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003d94:	bf00      	nop
 8003d96:	370c      	adds	r7, #12
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	bc80      	pop	{r7}
 8003d9c:	4770      	bx	lr

08003d9e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003d9e:	b480      	push	{r7}
 8003da0:	b083      	sub	sp, #12
 8003da2:	af00      	add	r7, sp, #0
 8003da4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003da6:	bf00      	nop
 8003da8:	370c      	adds	r7, #12
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bc80      	pop	{r7}
 8003dae:	4770      	bx	lr

08003db0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003db0:	b480      	push	{r7}
 8003db2:	b083      	sub	sp, #12
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
 8003db8:	460b      	mov	r3, r1
 8003dba:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003dbc:	bf00      	nop
 8003dbe:	370c      	adds	r7, #12
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	bc80      	pop	{r7}
 8003dc4:	4770      	bx	lr

08003dc6 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003dc6:	b580      	push	{r7, lr}
 8003dc8:	b09c      	sub	sp, #112	@ 0x70
 8003dca:	af00      	add	r7, sp, #0
 8003dcc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dd2:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f003 0320 	and.w	r3, r3, #32
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d172      	bne.n	8003ec8 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8003de2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003de4:	2200      	movs	r2, #0
 8003de6:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003de8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	330c      	adds	r3, #12
 8003dee:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003df0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003df2:	e853 3f00 	ldrex	r3, [r3]
 8003df6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003df8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003dfa:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003dfe:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003e00:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	330c      	adds	r3, #12
 8003e06:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8003e08:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003e0a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e0c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003e0e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003e10:	e841 2300 	strex	r3, r2, [r1]
 8003e14:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003e16:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d1e5      	bne.n	8003de8 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e1c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	3314      	adds	r3, #20
 8003e22:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e26:	e853 3f00 	ldrex	r3, [r3]
 8003e2a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003e2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e2e:	f023 0301 	bic.w	r3, r3, #1
 8003e32:	667b      	str	r3, [r7, #100]	@ 0x64
 8003e34:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	3314      	adds	r3, #20
 8003e3a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8003e3c:	647a      	str	r2, [r7, #68]	@ 0x44
 8003e3e:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e40:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003e42:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003e44:	e841 2300 	strex	r3, r2, [r1]
 8003e48:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003e4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d1e5      	bne.n	8003e1c <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e50:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	3314      	adds	r3, #20
 8003e56:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e5a:	e853 3f00 	ldrex	r3, [r3]
 8003e5e:	623b      	str	r3, [r7, #32]
   return(result);
 8003e60:	6a3b      	ldr	r3, [r7, #32]
 8003e62:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003e66:	663b      	str	r3, [r7, #96]	@ 0x60
 8003e68:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	3314      	adds	r3, #20
 8003e6e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003e70:	633a      	str	r2, [r7, #48]	@ 0x30
 8003e72:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e74:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003e76:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003e78:	e841 2300 	strex	r3, r2, [r1]
 8003e7c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003e7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d1e5      	bne.n	8003e50 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003e84:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003e86:	2220      	movs	r2, #32
 8003e88:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e8c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003e8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e90:	2b01      	cmp	r3, #1
 8003e92:	d119      	bne.n	8003ec8 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e94:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	330c      	adds	r3, #12
 8003e9a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e9c:	693b      	ldr	r3, [r7, #16]
 8003e9e:	e853 3f00 	ldrex	r3, [r3]
 8003ea2:	60fb      	str	r3, [r7, #12]
   return(result);
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	f023 0310 	bic.w	r3, r3, #16
 8003eaa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003eac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	330c      	adds	r3, #12
 8003eb2:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8003eb4:	61fa      	str	r2, [r7, #28]
 8003eb6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eb8:	69b9      	ldr	r1, [r7, #24]
 8003eba:	69fa      	ldr	r2, [r7, #28]
 8003ebc:	e841 2300 	strex	r3, r2, [r1]
 8003ec0:	617b      	str	r3, [r7, #20]
   return(result);
 8003ec2:	697b      	ldr	r3, [r7, #20]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d1e5      	bne.n	8003e94 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003ec8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003eca:	2200      	movs	r2, #0
 8003ecc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ece:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003ed0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ed2:	2b01      	cmp	r3, #1
 8003ed4:	d106      	bne.n	8003ee4 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003ed6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003ed8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003eda:	4619      	mov	r1, r3
 8003edc:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8003ede:	f7ff ff67 	bl	8003db0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003ee2:	e002      	b.n	8003eea <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8003ee4:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8003ee6:	f7fc fd4f 	bl	8000988 <HAL_UART_RxCpltCallback>
}
 8003eea:	bf00      	nop
 8003eec:	3770      	adds	r7, #112	@ 0x70
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd80      	pop	{r7, pc}

08003ef2 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003ef2:	b580      	push	{r7, lr}
 8003ef4:	b084      	sub	sp, #16
 8003ef6:	af00      	add	r7, sp, #0
 8003ef8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003efe:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	2201      	movs	r2, #1
 8003f04:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f0a:	2b01      	cmp	r3, #1
 8003f0c:	d108      	bne.n	8003f20 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003f12:	085b      	lsrs	r3, r3, #1
 8003f14:	b29b      	uxth	r3, r3
 8003f16:	4619      	mov	r1, r3
 8003f18:	68f8      	ldr	r0, [r7, #12]
 8003f1a:	f7ff ff49 	bl	8003db0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003f1e:	e002      	b.n	8003f26 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8003f20:	68f8      	ldr	r0, [r7, #12]
 8003f22:	f7fc fd65 	bl	80009f0 <HAL_UART_RxHalfCpltCallback>
}
 8003f26:	bf00      	nop
 8003f28:	3710      	adds	r7, #16
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bd80      	pop	{r7, pc}

08003f2e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003f2e:	b580      	push	{r7, lr}
 8003f30:	b084      	sub	sp, #16
 8003f32:	af00      	add	r7, sp, #0
 8003f34:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003f36:	2300      	movs	r3, #0
 8003f38:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f3e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003f40:	68bb      	ldr	r3, [r7, #8]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	695b      	ldr	r3, [r3, #20]
 8003f46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	bf14      	ite	ne
 8003f4e:	2301      	movne	r3, #1
 8003f50:	2300      	moveq	r3, #0
 8003f52:	b2db      	uxtb	r3, r3
 8003f54:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003f56:	68bb      	ldr	r3, [r7, #8]
 8003f58:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f5c:	b2db      	uxtb	r3, r3
 8003f5e:	2b21      	cmp	r3, #33	@ 0x21
 8003f60:	d108      	bne.n	8003f74 <UART_DMAError+0x46>
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d005      	beq.n	8003f74 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8003f6e:	68b8      	ldr	r0, [r7, #8]
 8003f70:	f000 f91a 	bl	80041a8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003f74:	68bb      	ldr	r3, [r7, #8]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	695b      	ldr	r3, [r3, #20]
 8003f7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	bf14      	ite	ne
 8003f82:	2301      	movne	r3, #1
 8003f84:	2300      	moveq	r3, #0
 8003f86:	b2db      	uxtb	r3, r3
 8003f88:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003f8a:	68bb      	ldr	r3, [r7, #8]
 8003f8c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003f90:	b2db      	uxtb	r3, r3
 8003f92:	2b22      	cmp	r3, #34	@ 0x22
 8003f94:	d108      	bne.n	8003fa8 <UART_DMAError+0x7a>
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d005      	beq.n	8003fa8 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8003f9c:	68bb      	ldr	r3, [r7, #8]
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8003fa2:	68b8      	ldr	r0, [r7, #8]
 8003fa4:	f000 f927 	bl	80041f6 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fac:	f043 0210 	orr.w	r2, r3, #16
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003fb4:	68b8      	ldr	r0, [r7, #8]
 8003fb6:	f7ff fef2 	bl	8003d9e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003fba:	bf00      	nop
 8003fbc:	3710      	adds	r7, #16
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bd80      	pop	{r7, pc}

08003fc2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003fc2:	b580      	push	{r7, lr}
 8003fc4:	b086      	sub	sp, #24
 8003fc6:	af00      	add	r7, sp, #0
 8003fc8:	60f8      	str	r0, [r7, #12]
 8003fca:	60b9      	str	r1, [r7, #8]
 8003fcc:	603b      	str	r3, [r7, #0]
 8003fce:	4613      	mov	r3, r2
 8003fd0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fd2:	e03b      	b.n	800404c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fd4:	6a3b      	ldr	r3, [r7, #32]
 8003fd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fda:	d037      	beq.n	800404c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fdc:	f7fc ff6e 	bl	8000ebc <HAL_GetTick>
 8003fe0:	4602      	mov	r2, r0
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	1ad3      	subs	r3, r2, r3
 8003fe6:	6a3a      	ldr	r2, [r7, #32]
 8003fe8:	429a      	cmp	r2, r3
 8003fea:	d302      	bcc.n	8003ff2 <UART_WaitOnFlagUntilTimeout+0x30>
 8003fec:	6a3b      	ldr	r3, [r7, #32]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d101      	bne.n	8003ff6 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003ff2:	2303      	movs	r3, #3
 8003ff4:	e03a      	b.n	800406c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	68db      	ldr	r3, [r3, #12]
 8003ffc:	f003 0304 	and.w	r3, r3, #4
 8004000:	2b00      	cmp	r3, #0
 8004002:	d023      	beq.n	800404c <UART_WaitOnFlagUntilTimeout+0x8a>
 8004004:	68bb      	ldr	r3, [r7, #8]
 8004006:	2b80      	cmp	r3, #128	@ 0x80
 8004008:	d020      	beq.n	800404c <UART_WaitOnFlagUntilTimeout+0x8a>
 800400a:	68bb      	ldr	r3, [r7, #8]
 800400c:	2b40      	cmp	r3, #64	@ 0x40
 800400e:	d01d      	beq.n	800404c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f003 0308 	and.w	r3, r3, #8
 800401a:	2b08      	cmp	r3, #8
 800401c:	d116      	bne.n	800404c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800401e:	2300      	movs	r3, #0
 8004020:	617b      	str	r3, [r7, #20]
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	617b      	str	r3, [r7, #20]
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	685b      	ldr	r3, [r3, #4]
 8004030:	617b      	str	r3, [r7, #20]
 8004032:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004034:	68f8      	ldr	r0, [r7, #12]
 8004036:	f000 f8de 	bl	80041f6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	2208      	movs	r2, #8
 800403e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	2200      	movs	r2, #0
 8004044:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004048:	2301      	movs	r3, #1
 800404a:	e00f      	b.n	800406c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	681a      	ldr	r2, [r3, #0]
 8004052:	68bb      	ldr	r3, [r7, #8]
 8004054:	4013      	ands	r3, r2
 8004056:	68ba      	ldr	r2, [r7, #8]
 8004058:	429a      	cmp	r2, r3
 800405a:	bf0c      	ite	eq
 800405c:	2301      	moveq	r3, #1
 800405e:	2300      	movne	r3, #0
 8004060:	b2db      	uxtb	r3, r3
 8004062:	461a      	mov	r2, r3
 8004064:	79fb      	ldrb	r3, [r7, #7]
 8004066:	429a      	cmp	r2, r3
 8004068:	d0b4      	beq.n	8003fd4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800406a:	2300      	movs	r3, #0
}
 800406c:	4618      	mov	r0, r3
 800406e:	3718      	adds	r7, #24
 8004070:	46bd      	mov	sp, r7
 8004072:	bd80      	pop	{r7, pc}

08004074 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b098      	sub	sp, #96	@ 0x60
 8004078:	af00      	add	r7, sp, #0
 800407a:	60f8      	str	r0, [r7, #12]
 800407c:	60b9      	str	r1, [r7, #8]
 800407e:	4613      	mov	r3, r2
 8004080:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8004082:	68ba      	ldr	r2, [r7, #8]
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	88fa      	ldrh	r2, [r7, #6]
 800408c:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	2200      	movs	r2, #0
 8004092:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	2222      	movs	r2, #34	@ 0x22
 8004098:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040a0:	4a3e      	ldr	r2, [pc, #248]	@ (800419c <UART_Start_Receive_DMA+0x128>)
 80040a2:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040a8:	4a3d      	ldr	r2, [pc, #244]	@ (80041a0 <UART_Start_Receive_DMA+0x12c>)
 80040aa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040b0:	4a3c      	ldr	r2, [pc, #240]	@ (80041a4 <UART_Start_Receive_DMA+0x130>)
 80040b2:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040b8:	2200      	movs	r2, #0
 80040ba:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80040bc:	f107 0308 	add.w	r3, r7, #8
 80040c0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	3304      	adds	r3, #4
 80040cc:	4619      	mov	r1, r3
 80040ce:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80040d0:	681a      	ldr	r2, [r3, #0]
 80040d2:	88fb      	ldrh	r3, [r7, #6]
 80040d4:	f7fd f8a4 	bl	8001220 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80040d8:	2300      	movs	r3, #0
 80040da:	613b      	str	r3, [r7, #16]
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	613b      	str	r3, [r7, #16]
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	613b      	str	r3, [r7, #16]
 80040ec:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	691b      	ldr	r3, [r3, #16]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d019      	beq.n	800412a <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	330c      	adds	r3, #12
 80040fc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004100:	e853 3f00 	ldrex	r3, [r3]
 8004104:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004106:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004108:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800410c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	330c      	adds	r3, #12
 8004114:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004116:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8004118:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800411a:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800411c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800411e:	e841 2300 	strex	r3, r2, [r1]
 8004122:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8004124:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004126:	2b00      	cmp	r3, #0
 8004128:	d1e5      	bne.n	80040f6 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	3314      	adds	r3, #20
 8004130:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004132:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004134:	e853 3f00 	ldrex	r3, [r3]
 8004138:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800413a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800413c:	f043 0301 	orr.w	r3, r3, #1
 8004140:	657b      	str	r3, [r7, #84]	@ 0x54
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	3314      	adds	r3, #20
 8004148:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800414a:	63ba      	str	r2, [r7, #56]	@ 0x38
 800414c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800414e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8004150:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004152:	e841 2300 	strex	r3, r2, [r1]
 8004156:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004158:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800415a:	2b00      	cmp	r3, #0
 800415c:	d1e5      	bne.n	800412a <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	3314      	adds	r3, #20
 8004164:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004166:	69bb      	ldr	r3, [r7, #24]
 8004168:	e853 3f00 	ldrex	r3, [r3]
 800416c:	617b      	str	r3, [r7, #20]
   return(result);
 800416e:	697b      	ldr	r3, [r7, #20]
 8004170:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004174:	653b      	str	r3, [r7, #80]	@ 0x50
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	3314      	adds	r3, #20
 800417c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800417e:	627a      	str	r2, [r7, #36]	@ 0x24
 8004180:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004182:	6a39      	ldr	r1, [r7, #32]
 8004184:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004186:	e841 2300 	strex	r3, r2, [r1]
 800418a:	61fb      	str	r3, [r7, #28]
   return(result);
 800418c:	69fb      	ldr	r3, [r7, #28]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d1e5      	bne.n	800415e <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8004192:	2300      	movs	r3, #0
}
 8004194:	4618      	mov	r0, r3
 8004196:	3760      	adds	r7, #96	@ 0x60
 8004198:	46bd      	mov	sp, r7
 800419a:	bd80      	pop	{r7, pc}
 800419c:	08003dc7 	.word	0x08003dc7
 80041a0:	08003ef3 	.word	0x08003ef3
 80041a4:	08003f2f 	.word	0x08003f2f

080041a8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80041a8:	b480      	push	{r7}
 80041aa:	b089      	sub	sp, #36	@ 0x24
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	330c      	adds	r3, #12
 80041b6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	e853 3f00 	ldrex	r3, [r3]
 80041be:	60bb      	str	r3, [r7, #8]
   return(result);
 80041c0:	68bb      	ldr	r3, [r7, #8]
 80041c2:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80041c6:	61fb      	str	r3, [r7, #28]
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	330c      	adds	r3, #12
 80041ce:	69fa      	ldr	r2, [r7, #28]
 80041d0:	61ba      	str	r2, [r7, #24]
 80041d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041d4:	6979      	ldr	r1, [r7, #20]
 80041d6:	69ba      	ldr	r2, [r7, #24]
 80041d8:	e841 2300 	strex	r3, r2, [r1]
 80041dc:	613b      	str	r3, [r7, #16]
   return(result);
 80041de:	693b      	ldr	r3, [r7, #16]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d1e5      	bne.n	80041b0 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2220      	movs	r2, #32
 80041e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 80041ec:	bf00      	nop
 80041ee:	3724      	adds	r7, #36	@ 0x24
 80041f0:	46bd      	mov	sp, r7
 80041f2:	bc80      	pop	{r7}
 80041f4:	4770      	bx	lr

080041f6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80041f6:	b480      	push	{r7}
 80041f8:	b095      	sub	sp, #84	@ 0x54
 80041fa:	af00      	add	r7, sp, #0
 80041fc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	330c      	adds	r3, #12
 8004204:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004206:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004208:	e853 3f00 	ldrex	r3, [r3]
 800420c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800420e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004210:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004214:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	330c      	adds	r3, #12
 800421c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800421e:	643a      	str	r2, [r7, #64]	@ 0x40
 8004220:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004222:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004224:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004226:	e841 2300 	strex	r3, r2, [r1]
 800422a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800422c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800422e:	2b00      	cmp	r3, #0
 8004230:	d1e5      	bne.n	80041fe <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	3314      	adds	r3, #20
 8004238:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800423a:	6a3b      	ldr	r3, [r7, #32]
 800423c:	e853 3f00 	ldrex	r3, [r3]
 8004240:	61fb      	str	r3, [r7, #28]
   return(result);
 8004242:	69fb      	ldr	r3, [r7, #28]
 8004244:	f023 0301 	bic.w	r3, r3, #1
 8004248:	64bb      	str	r3, [r7, #72]	@ 0x48
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	3314      	adds	r3, #20
 8004250:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004252:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004254:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004256:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004258:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800425a:	e841 2300 	strex	r3, r2, [r1]
 800425e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004260:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004262:	2b00      	cmp	r3, #0
 8004264:	d1e5      	bne.n	8004232 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800426a:	2b01      	cmp	r3, #1
 800426c:	d119      	bne.n	80042a2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	330c      	adds	r3, #12
 8004274:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	e853 3f00 	ldrex	r3, [r3]
 800427c:	60bb      	str	r3, [r7, #8]
   return(result);
 800427e:	68bb      	ldr	r3, [r7, #8]
 8004280:	f023 0310 	bic.w	r3, r3, #16
 8004284:	647b      	str	r3, [r7, #68]	@ 0x44
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	330c      	adds	r3, #12
 800428c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800428e:	61ba      	str	r2, [r7, #24]
 8004290:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004292:	6979      	ldr	r1, [r7, #20]
 8004294:	69ba      	ldr	r2, [r7, #24]
 8004296:	e841 2300 	strex	r3, r2, [r1]
 800429a:	613b      	str	r3, [r7, #16]
   return(result);
 800429c:	693b      	ldr	r3, [r7, #16]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d1e5      	bne.n	800426e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2220      	movs	r2, #32
 80042a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2200      	movs	r2, #0
 80042ae:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80042b0:	bf00      	nop
 80042b2:	3754      	adds	r7, #84	@ 0x54
 80042b4:	46bd      	mov	sp, r7
 80042b6:	bc80      	pop	{r7}
 80042b8:	4770      	bx	lr

080042ba <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80042ba:	b580      	push	{r7, lr}
 80042bc:	b084      	sub	sp, #16
 80042be:	af00      	add	r7, sp, #0
 80042c0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042c6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	2200      	movs	r2, #0
 80042cc:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	2200      	movs	r2, #0
 80042d2:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80042d4:	68f8      	ldr	r0, [r7, #12]
 80042d6:	f7ff fd62 	bl	8003d9e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80042da:	bf00      	nop
 80042dc:	3710      	adds	r7, #16
 80042de:	46bd      	mov	sp, r7
 80042e0:	bd80      	pop	{r7, pc}

080042e2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80042e2:	b480      	push	{r7}
 80042e4:	b085      	sub	sp, #20
 80042e6:	af00      	add	r7, sp, #0
 80042e8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80042f0:	b2db      	uxtb	r3, r3
 80042f2:	2b21      	cmp	r3, #33	@ 0x21
 80042f4:	d13e      	bne.n	8004374 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	689b      	ldr	r3, [r3, #8]
 80042fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80042fe:	d114      	bne.n	800432a <UART_Transmit_IT+0x48>
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	691b      	ldr	r3, [r3, #16]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d110      	bne.n	800432a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6a1b      	ldr	r3, [r3, #32]
 800430c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	881b      	ldrh	r3, [r3, #0]
 8004312:	461a      	mov	r2, r3
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800431c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6a1b      	ldr	r3, [r3, #32]
 8004322:	1c9a      	adds	r2, r3, #2
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	621a      	str	r2, [r3, #32]
 8004328:	e008      	b.n	800433c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6a1b      	ldr	r3, [r3, #32]
 800432e:	1c59      	adds	r1, r3, #1
 8004330:	687a      	ldr	r2, [r7, #4]
 8004332:	6211      	str	r1, [r2, #32]
 8004334:	781a      	ldrb	r2, [r3, #0]
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004340:	b29b      	uxth	r3, r3
 8004342:	3b01      	subs	r3, #1
 8004344:	b29b      	uxth	r3, r3
 8004346:	687a      	ldr	r2, [r7, #4]
 8004348:	4619      	mov	r1, r3
 800434a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800434c:	2b00      	cmp	r3, #0
 800434e:	d10f      	bne.n	8004370 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	68da      	ldr	r2, [r3, #12]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800435e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	68da      	ldr	r2, [r3, #12]
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800436e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004370:	2300      	movs	r3, #0
 8004372:	e000      	b.n	8004376 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004374:	2302      	movs	r3, #2
  }
}
 8004376:	4618      	mov	r0, r3
 8004378:	3714      	adds	r7, #20
 800437a:	46bd      	mov	sp, r7
 800437c:	bc80      	pop	{r7}
 800437e:	4770      	bx	lr

08004380 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b082      	sub	sp, #8
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	68da      	ldr	r2, [r3, #12]
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004396:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2220      	movs	r2, #32
 800439c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80043a0:	6878      	ldr	r0, [r7, #4]
 80043a2:	f7ff fcf3 	bl	8003d8c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80043a6:	2300      	movs	r3, #0
}
 80043a8:	4618      	mov	r0, r3
 80043aa:	3708      	adds	r7, #8
 80043ac:	46bd      	mov	sp, r7
 80043ae:	bd80      	pop	{r7, pc}

080043b0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b08c      	sub	sp, #48	@ 0x30
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80043be:	b2db      	uxtb	r3, r3
 80043c0:	2b22      	cmp	r3, #34	@ 0x22
 80043c2:	f040 80ae 	bne.w	8004522 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	689b      	ldr	r3, [r3, #8]
 80043ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80043ce:	d117      	bne.n	8004400 <UART_Receive_IT+0x50>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	691b      	ldr	r3, [r3, #16]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d113      	bne.n	8004400 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80043d8:	2300      	movs	r3, #0
 80043da:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043e0:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	b29b      	uxth	r3, r3
 80043ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043ee:	b29a      	uxth	r2, r3
 80043f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043f2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043f8:	1c9a      	adds	r2, r3, #2
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	629a      	str	r2, [r3, #40]	@ 0x28
 80043fe:	e026      	b.n	800444e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004404:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004406:	2300      	movs	r3, #0
 8004408:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	689b      	ldr	r3, [r3, #8]
 800440e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004412:	d007      	beq.n	8004424 <UART_Receive_IT+0x74>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	689b      	ldr	r3, [r3, #8]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d10a      	bne.n	8004432 <UART_Receive_IT+0x82>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	691b      	ldr	r3, [r3, #16]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d106      	bne.n	8004432 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	b2da      	uxtb	r2, r3
 800442c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800442e:	701a      	strb	r2, [r3, #0]
 8004430:	e008      	b.n	8004444 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	b2db      	uxtb	r3, r3
 800443a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800443e:	b2da      	uxtb	r2, r3
 8004440:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004442:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004448:	1c5a      	adds	r2, r3, #1
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004452:	b29b      	uxth	r3, r3
 8004454:	3b01      	subs	r3, #1
 8004456:	b29b      	uxth	r3, r3
 8004458:	687a      	ldr	r2, [r7, #4]
 800445a:	4619      	mov	r1, r3
 800445c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800445e:	2b00      	cmp	r3, #0
 8004460:	d15d      	bne.n	800451e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	68da      	ldr	r2, [r3, #12]
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f022 0220 	bic.w	r2, r2, #32
 8004470:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	68da      	ldr	r2, [r3, #12]
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004480:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	695a      	ldr	r2, [r3, #20]
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f022 0201 	bic.w	r2, r2, #1
 8004490:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2220      	movs	r2, #32
 8004496:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2200      	movs	r2, #0
 800449e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044a4:	2b01      	cmp	r3, #1
 80044a6:	d135      	bne.n	8004514 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2200      	movs	r2, #0
 80044ac:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	330c      	adds	r3, #12
 80044b4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044b6:	697b      	ldr	r3, [r7, #20]
 80044b8:	e853 3f00 	ldrex	r3, [r3]
 80044bc:	613b      	str	r3, [r7, #16]
   return(result);
 80044be:	693b      	ldr	r3, [r7, #16]
 80044c0:	f023 0310 	bic.w	r3, r3, #16
 80044c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	330c      	adds	r3, #12
 80044cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80044ce:	623a      	str	r2, [r7, #32]
 80044d0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044d2:	69f9      	ldr	r1, [r7, #28]
 80044d4:	6a3a      	ldr	r2, [r7, #32]
 80044d6:	e841 2300 	strex	r3, r2, [r1]
 80044da:	61bb      	str	r3, [r7, #24]
   return(result);
 80044dc:	69bb      	ldr	r3, [r7, #24]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d1e5      	bne.n	80044ae <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f003 0310 	and.w	r3, r3, #16
 80044ec:	2b10      	cmp	r3, #16
 80044ee:	d10a      	bne.n	8004506 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80044f0:	2300      	movs	r3, #0
 80044f2:	60fb      	str	r3, [r7, #12]
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	60fb      	str	r3, [r7, #12]
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	685b      	ldr	r3, [r3, #4]
 8004502:	60fb      	str	r3, [r7, #12]
 8004504:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800450a:	4619      	mov	r1, r3
 800450c:	6878      	ldr	r0, [r7, #4]
 800450e:	f7ff fc4f 	bl	8003db0 <HAL_UARTEx_RxEventCallback>
 8004512:	e002      	b.n	800451a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004514:	6878      	ldr	r0, [r7, #4]
 8004516:	f7fc fa37 	bl	8000988 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800451a:	2300      	movs	r3, #0
 800451c:	e002      	b.n	8004524 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800451e:	2300      	movs	r3, #0
 8004520:	e000      	b.n	8004524 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004522:	2302      	movs	r3, #2
  }
}
 8004524:	4618      	mov	r0, r3
 8004526:	3730      	adds	r7, #48	@ 0x30
 8004528:	46bd      	mov	sp, r7
 800452a:	bd80      	pop	{r7, pc}

0800452c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b084      	sub	sp, #16
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	691b      	ldr	r3, [r3, #16]
 800453a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	68da      	ldr	r2, [r3, #12]
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	430a      	orrs	r2, r1
 8004548:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	689a      	ldr	r2, [r3, #8]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	691b      	ldr	r3, [r3, #16]
 8004552:	431a      	orrs	r2, r3
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	695b      	ldr	r3, [r3, #20]
 8004558:	4313      	orrs	r3, r2
 800455a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	68db      	ldr	r3, [r3, #12]
 8004562:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8004566:	f023 030c 	bic.w	r3, r3, #12
 800456a:	687a      	ldr	r2, [r7, #4]
 800456c:	6812      	ldr	r2, [r2, #0]
 800456e:	68b9      	ldr	r1, [r7, #8]
 8004570:	430b      	orrs	r3, r1
 8004572:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	695b      	ldr	r3, [r3, #20]
 800457a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	699a      	ldr	r2, [r3, #24]
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	430a      	orrs	r2, r1
 8004588:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4a2c      	ldr	r2, [pc, #176]	@ (8004640 <UART_SetConfig+0x114>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d103      	bne.n	800459c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004594:	f7fe fb10 	bl	8002bb8 <HAL_RCC_GetPCLK2Freq>
 8004598:	60f8      	str	r0, [r7, #12]
 800459a:	e002      	b.n	80045a2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800459c:	f7fe faf8 	bl	8002b90 <HAL_RCC_GetPCLK1Freq>
 80045a0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80045a2:	68fa      	ldr	r2, [r7, #12]
 80045a4:	4613      	mov	r3, r2
 80045a6:	009b      	lsls	r3, r3, #2
 80045a8:	4413      	add	r3, r2
 80045aa:	009a      	lsls	r2, r3, #2
 80045ac:	441a      	add	r2, r3
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	685b      	ldr	r3, [r3, #4]
 80045b2:	009b      	lsls	r3, r3, #2
 80045b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80045b8:	4a22      	ldr	r2, [pc, #136]	@ (8004644 <UART_SetConfig+0x118>)
 80045ba:	fba2 2303 	umull	r2, r3, r2, r3
 80045be:	095b      	lsrs	r3, r3, #5
 80045c0:	0119      	lsls	r1, r3, #4
 80045c2:	68fa      	ldr	r2, [r7, #12]
 80045c4:	4613      	mov	r3, r2
 80045c6:	009b      	lsls	r3, r3, #2
 80045c8:	4413      	add	r3, r2
 80045ca:	009a      	lsls	r2, r3, #2
 80045cc:	441a      	add	r2, r3
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	009b      	lsls	r3, r3, #2
 80045d4:	fbb2 f2f3 	udiv	r2, r2, r3
 80045d8:	4b1a      	ldr	r3, [pc, #104]	@ (8004644 <UART_SetConfig+0x118>)
 80045da:	fba3 0302 	umull	r0, r3, r3, r2
 80045de:	095b      	lsrs	r3, r3, #5
 80045e0:	2064      	movs	r0, #100	@ 0x64
 80045e2:	fb00 f303 	mul.w	r3, r0, r3
 80045e6:	1ad3      	subs	r3, r2, r3
 80045e8:	011b      	lsls	r3, r3, #4
 80045ea:	3332      	adds	r3, #50	@ 0x32
 80045ec:	4a15      	ldr	r2, [pc, #84]	@ (8004644 <UART_SetConfig+0x118>)
 80045ee:	fba2 2303 	umull	r2, r3, r2, r3
 80045f2:	095b      	lsrs	r3, r3, #5
 80045f4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80045f8:	4419      	add	r1, r3
 80045fa:	68fa      	ldr	r2, [r7, #12]
 80045fc:	4613      	mov	r3, r2
 80045fe:	009b      	lsls	r3, r3, #2
 8004600:	4413      	add	r3, r2
 8004602:	009a      	lsls	r2, r3, #2
 8004604:	441a      	add	r2, r3
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	685b      	ldr	r3, [r3, #4]
 800460a:	009b      	lsls	r3, r3, #2
 800460c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004610:	4b0c      	ldr	r3, [pc, #48]	@ (8004644 <UART_SetConfig+0x118>)
 8004612:	fba3 0302 	umull	r0, r3, r3, r2
 8004616:	095b      	lsrs	r3, r3, #5
 8004618:	2064      	movs	r0, #100	@ 0x64
 800461a:	fb00 f303 	mul.w	r3, r0, r3
 800461e:	1ad3      	subs	r3, r2, r3
 8004620:	011b      	lsls	r3, r3, #4
 8004622:	3332      	adds	r3, #50	@ 0x32
 8004624:	4a07      	ldr	r2, [pc, #28]	@ (8004644 <UART_SetConfig+0x118>)
 8004626:	fba2 2303 	umull	r2, r3, r2, r3
 800462a:	095b      	lsrs	r3, r3, #5
 800462c:	f003 020f 	and.w	r2, r3, #15
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	440a      	add	r2, r1
 8004636:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004638:	bf00      	nop
 800463a:	3710      	adds	r7, #16
 800463c:	46bd      	mov	sp, r7
 800463e:	bd80      	pop	{r7, pc}
 8004640:	40013800 	.word	0x40013800
 8004644:	51eb851f 	.word	0x51eb851f

08004648 <std>:
 8004648:	2300      	movs	r3, #0
 800464a:	b510      	push	{r4, lr}
 800464c:	4604      	mov	r4, r0
 800464e:	e9c0 3300 	strd	r3, r3, [r0]
 8004652:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004656:	6083      	str	r3, [r0, #8]
 8004658:	8181      	strh	r1, [r0, #12]
 800465a:	6643      	str	r3, [r0, #100]	@ 0x64
 800465c:	81c2      	strh	r2, [r0, #14]
 800465e:	6183      	str	r3, [r0, #24]
 8004660:	4619      	mov	r1, r3
 8004662:	2208      	movs	r2, #8
 8004664:	305c      	adds	r0, #92	@ 0x5c
 8004666:	f000 fa01 	bl	8004a6c <memset>
 800466a:	4b0d      	ldr	r3, [pc, #52]	@ (80046a0 <std+0x58>)
 800466c:	6224      	str	r4, [r4, #32]
 800466e:	6263      	str	r3, [r4, #36]	@ 0x24
 8004670:	4b0c      	ldr	r3, [pc, #48]	@ (80046a4 <std+0x5c>)
 8004672:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004674:	4b0c      	ldr	r3, [pc, #48]	@ (80046a8 <std+0x60>)
 8004676:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004678:	4b0c      	ldr	r3, [pc, #48]	@ (80046ac <std+0x64>)
 800467a:	6323      	str	r3, [r4, #48]	@ 0x30
 800467c:	4b0c      	ldr	r3, [pc, #48]	@ (80046b0 <std+0x68>)
 800467e:	429c      	cmp	r4, r3
 8004680:	d006      	beq.n	8004690 <std+0x48>
 8004682:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004686:	4294      	cmp	r4, r2
 8004688:	d002      	beq.n	8004690 <std+0x48>
 800468a:	33d0      	adds	r3, #208	@ 0xd0
 800468c:	429c      	cmp	r4, r3
 800468e:	d105      	bne.n	800469c <std+0x54>
 8004690:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004694:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004698:	f000 ba60 	b.w	8004b5c <__retarget_lock_init_recursive>
 800469c:	bd10      	pop	{r4, pc}
 800469e:	bf00      	nop
 80046a0:	080048bd 	.word	0x080048bd
 80046a4:	080048df 	.word	0x080048df
 80046a8:	08004917 	.word	0x08004917
 80046ac:	0800493b 	.word	0x0800493b
 80046b0:	20000288 	.word	0x20000288

080046b4 <stdio_exit_handler>:
 80046b4:	4a02      	ldr	r2, [pc, #8]	@ (80046c0 <stdio_exit_handler+0xc>)
 80046b6:	4903      	ldr	r1, [pc, #12]	@ (80046c4 <stdio_exit_handler+0x10>)
 80046b8:	4803      	ldr	r0, [pc, #12]	@ (80046c8 <stdio_exit_handler+0x14>)
 80046ba:	f000 b869 	b.w	8004790 <_fwalk_sglue>
 80046be:	bf00      	nop
 80046c0:	2000000c 	.word	0x2000000c
 80046c4:	080053f5 	.word	0x080053f5
 80046c8:	2000001c 	.word	0x2000001c

080046cc <cleanup_stdio>:
 80046cc:	6841      	ldr	r1, [r0, #4]
 80046ce:	4b0c      	ldr	r3, [pc, #48]	@ (8004700 <cleanup_stdio+0x34>)
 80046d0:	b510      	push	{r4, lr}
 80046d2:	4299      	cmp	r1, r3
 80046d4:	4604      	mov	r4, r0
 80046d6:	d001      	beq.n	80046dc <cleanup_stdio+0x10>
 80046d8:	f000 fe8c 	bl	80053f4 <_fflush_r>
 80046dc:	68a1      	ldr	r1, [r4, #8]
 80046de:	4b09      	ldr	r3, [pc, #36]	@ (8004704 <cleanup_stdio+0x38>)
 80046e0:	4299      	cmp	r1, r3
 80046e2:	d002      	beq.n	80046ea <cleanup_stdio+0x1e>
 80046e4:	4620      	mov	r0, r4
 80046e6:	f000 fe85 	bl	80053f4 <_fflush_r>
 80046ea:	68e1      	ldr	r1, [r4, #12]
 80046ec:	4b06      	ldr	r3, [pc, #24]	@ (8004708 <cleanup_stdio+0x3c>)
 80046ee:	4299      	cmp	r1, r3
 80046f0:	d004      	beq.n	80046fc <cleanup_stdio+0x30>
 80046f2:	4620      	mov	r0, r4
 80046f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80046f8:	f000 be7c 	b.w	80053f4 <_fflush_r>
 80046fc:	bd10      	pop	{r4, pc}
 80046fe:	bf00      	nop
 8004700:	20000288 	.word	0x20000288
 8004704:	200002f0 	.word	0x200002f0
 8004708:	20000358 	.word	0x20000358

0800470c <global_stdio_init.part.0>:
 800470c:	b510      	push	{r4, lr}
 800470e:	4b0b      	ldr	r3, [pc, #44]	@ (800473c <global_stdio_init.part.0+0x30>)
 8004710:	4c0b      	ldr	r4, [pc, #44]	@ (8004740 <global_stdio_init.part.0+0x34>)
 8004712:	4a0c      	ldr	r2, [pc, #48]	@ (8004744 <global_stdio_init.part.0+0x38>)
 8004714:	4620      	mov	r0, r4
 8004716:	601a      	str	r2, [r3, #0]
 8004718:	2104      	movs	r1, #4
 800471a:	2200      	movs	r2, #0
 800471c:	f7ff ff94 	bl	8004648 <std>
 8004720:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004724:	2201      	movs	r2, #1
 8004726:	2109      	movs	r1, #9
 8004728:	f7ff ff8e 	bl	8004648 <std>
 800472c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004730:	2202      	movs	r2, #2
 8004732:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004736:	2112      	movs	r1, #18
 8004738:	f7ff bf86 	b.w	8004648 <std>
 800473c:	200003c0 	.word	0x200003c0
 8004740:	20000288 	.word	0x20000288
 8004744:	080046b5 	.word	0x080046b5

08004748 <__sfp_lock_acquire>:
 8004748:	4801      	ldr	r0, [pc, #4]	@ (8004750 <__sfp_lock_acquire+0x8>)
 800474a:	f000 ba08 	b.w	8004b5e <__retarget_lock_acquire_recursive>
 800474e:	bf00      	nop
 8004750:	200003c9 	.word	0x200003c9

08004754 <__sfp_lock_release>:
 8004754:	4801      	ldr	r0, [pc, #4]	@ (800475c <__sfp_lock_release+0x8>)
 8004756:	f000 ba03 	b.w	8004b60 <__retarget_lock_release_recursive>
 800475a:	bf00      	nop
 800475c:	200003c9 	.word	0x200003c9

08004760 <__sinit>:
 8004760:	b510      	push	{r4, lr}
 8004762:	4604      	mov	r4, r0
 8004764:	f7ff fff0 	bl	8004748 <__sfp_lock_acquire>
 8004768:	6a23      	ldr	r3, [r4, #32]
 800476a:	b11b      	cbz	r3, 8004774 <__sinit+0x14>
 800476c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004770:	f7ff bff0 	b.w	8004754 <__sfp_lock_release>
 8004774:	4b04      	ldr	r3, [pc, #16]	@ (8004788 <__sinit+0x28>)
 8004776:	6223      	str	r3, [r4, #32]
 8004778:	4b04      	ldr	r3, [pc, #16]	@ (800478c <__sinit+0x2c>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d1f5      	bne.n	800476c <__sinit+0xc>
 8004780:	f7ff ffc4 	bl	800470c <global_stdio_init.part.0>
 8004784:	e7f2      	b.n	800476c <__sinit+0xc>
 8004786:	bf00      	nop
 8004788:	080046cd 	.word	0x080046cd
 800478c:	200003c0 	.word	0x200003c0

08004790 <_fwalk_sglue>:
 8004790:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004794:	4607      	mov	r7, r0
 8004796:	4688      	mov	r8, r1
 8004798:	4614      	mov	r4, r2
 800479a:	2600      	movs	r6, #0
 800479c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80047a0:	f1b9 0901 	subs.w	r9, r9, #1
 80047a4:	d505      	bpl.n	80047b2 <_fwalk_sglue+0x22>
 80047a6:	6824      	ldr	r4, [r4, #0]
 80047a8:	2c00      	cmp	r4, #0
 80047aa:	d1f7      	bne.n	800479c <_fwalk_sglue+0xc>
 80047ac:	4630      	mov	r0, r6
 80047ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80047b2:	89ab      	ldrh	r3, [r5, #12]
 80047b4:	2b01      	cmp	r3, #1
 80047b6:	d907      	bls.n	80047c8 <_fwalk_sglue+0x38>
 80047b8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80047bc:	3301      	adds	r3, #1
 80047be:	d003      	beq.n	80047c8 <_fwalk_sglue+0x38>
 80047c0:	4629      	mov	r1, r5
 80047c2:	4638      	mov	r0, r7
 80047c4:	47c0      	blx	r8
 80047c6:	4306      	orrs	r6, r0
 80047c8:	3568      	adds	r5, #104	@ 0x68
 80047ca:	e7e9      	b.n	80047a0 <_fwalk_sglue+0x10>

080047cc <iprintf>:
 80047cc:	b40f      	push	{r0, r1, r2, r3}
 80047ce:	b507      	push	{r0, r1, r2, lr}
 80047d0:	4906      	ldr	r1, [pc, #24]	@ (80047ec <iprintf+0x20>)
 80047d2:	ab04      	add	r3, sp, #16
 80047d4:	6808      	ldr	r0, [r1, #0]
 80047d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80047da:	6881      	ldr	r1, [r0, #8]
 80047dc:	9301      	str	r3, [sp, #4]
 80047de:	f000 fadf 	bl	8004da0 <_vfiprintf_r>
 80047e2:	b003      	add	sp, #12
 80047e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80047e8:	b004      	add	sp, #16
 80047ea:	4770      	bx	lr
 80047ec:	20000018 	.word	0x20000018

080047f0 <putchar>:
 80047f0:	4b02      	ldr	r3, [pc, #8]	@ (80047fc <putchar+0xc>)
 80047f2:	4601      	mov	r1, r0
 80047f4:	6818      	ldr	r0, [r3, #0]
 80047f6:	6882      	ldr	r2, [r0, #8]
 80047f8:	f000 be85 	b.w	8005506 <_putc_r>
 80047fc:	20000018 	.word	0x20000018

08004800 <_puts_r>:
 8004800:	6a03      	ldr	r3, [r0, #32]
 8004802:	b570      	push	{r4, r5, r6, lr}
 8004804:	4605      	mov	r5, r0
 8004806:	460e      	mov	r6, r1
 8004808:	6884      	ldr	r4, [r0, #8]
 800480a:	b90b      	cbnz	r3, 8004810 <_puts_r+0x10>
 800480c:	f7ff ffa8 	bl	8004760 <__sinit>
 8004810:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004812:	07db      	lsls	r3, r3, #31
 8004814:	d405      	bmi.n	8004822 <_puts_r+0x22>
 8004816:	89a3      	ldrh	r3, [r4, #12]
 8004818:	0598      	lsls	r0, r3, #22
 800481a:	d402      	bmi.n	8004822 <_puts_r+0x22>
 800481c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800481e:	f000 f99e 	bl	8004b5e <__retarget_lock_acquire_recursive>
 8004822:	89a3      	ldrh	r3, [r4, #12]
 8004824:	0719      	lsls	r1, r3, #28
 8004826:	d502      	bpl.n	800482e <_puts_r+0x2e>
 8004828:	6923      	ldr	r3, [r4, #16]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d135      	bne.n	800489a <_puts_r+0x9a>
 800482e:	4621      	mov	r1, r4
 8004830:	4628      	mov	r0, r5
 8004832:	f000 f8c5 	bl	80049c0 <__swsetup_r>
 8004836:	b380      	cbz	r0, 800489a <_puts_r+0x9a>
 8004838:	f04f 35ff 	mov.w	r5, #4294967295
 800483c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800483e:	07da      	lsls	r2, r3, #31
 8004840:	d405      	bmi.n	800484e <_puts_r+0x4e>
 8004842:	89a3      	ldrh	r3, [r4, #12]
 8004844:	059b      	lsls	r3, r3, #22
 8004846:	d402      	bmi.n	800484e <_puts_r+0x4e>
 8004848:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800484a:	f000 f989 	bl	8004b60 <__retarget_lock_release_recursive>
 800484e:	4628      	mov	r0, r5
 8004850:	bd70      	pop	{r4, r5, r6, pc}
 8004852:	2b00      	cmp	r3, #0
 8004854:	da04      	bge.n	8004860 <_puts_r+0x60>
 8004856:	69a2      	ldr	r2, [r4, #24]
 8004858:	429a      	cmp	r2, r3
 800485a:	dc17      	bgt.n	800488c <_puts_r+0x8c>
 800485c:	290a      	cmp	r1, #10
 800485e:	d015      	beq.n	800488c <_puts_r+0x8c>
 8004860:	6823      	ldr	r3, [r4, #0]
 8004862:	1c5a      	adds	r2, r3, #1
 8004864:	6022      	str	r2, [r4, #0]
 8004866:	7019      	strb	r1, [r3, #0]
 8004868:	68a3      	ldr	r3, [r4, #8]
 800486a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800486e:	3b01      	subs	r3, #1
 8004870:	60a3      	str	r3, [r4, #8]
 8004872:	2900      	cmp	r1, #0
 8004874:	d1ed      	bne.n	8004852 <_puts_r+0x52>
 8004876:	2b00      	cmp	r3, #0
 8004878:	da11      	bge.n	800489e <_puts_r+0x9e>
 800487a:	4622      	mov	r2, r4
 800487c:	210a      	movs	r1, #10
 800487e:	4628      	mov	r0, r5
 8004880:	f000 f85f 	bl	8004942 <__swbuf_r>
 8004884:	3001      	adds	r0, #1
 8004886:	d0d7      	beq.n	8004838 <_puts_r+0x38>
 8004888:	250a      	movs	r5, #10
 800488a:	e7d7      	b.n	800483c <_puts_r+0x3c>
 800488c:	4622      	mov	r2, r4
 800488e:	4628      	mov	r0, r5
 8004890:	f000 f857 	bl	8004942 <__swbuf_r>
 8004894:	3001      	adds	r0, #1
 8004896:	d1e7      	bne.n	8004868 <_puts_r+0x68>
 8004898:	e7ce      	b.n	8004838 <_puts_r+0x38>
 800489a:	3e01      	subs	r6, #1
 800489c:	e7e4      	b.n	8004868 <_puts_r+0x68>
 800489e:	6823      	ldr	r3, [r4, #0]
 80048a0:	1c5a      	adds	r2, r3, #1
 80048a2:	6022      	str	r2, [r4, #0]
 80048a4:	220a      	movs	r2, #10
 80048a6:	701a      	strb	r2, [r3, #0]
 80048a8:	e7ee      	b.n	8004888 <_puts_r+0x88>
	...

080048ac <puts>:
 80048ac:	4b02      	ldr	r3, [pc, #8]	@ (80048b8 <puts+0xc>)
 80048ae:	4601      	mov	r1, r0
 80048b0:	6818      	ldr	r0, [r3, #0]
 80048b2:	f7ff bfa5 	b.w	8004800 <_puts_r>
 80048b6:	bf00      	nop
 80048b8:	20000018 	.word	0x20000018

080048bc <__sread>:
 80048bc:	b510      	push	{r4, lr}
 80048be:	460c      	mov	r4, r1
 80048c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80048c4:	f000 f8fc 	bl	8004ac0 <_read_r>
 80048c8:	2800      	cmp	r0, #0
 80048ca:	bfab      	itete	ge
 80048cc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80048ce:	89a3      	ldrhlt	r3, [r4, #12]
 80048d0:	181b      	addge	r3, r3, r0
 80048d2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80048d6:	bfac      	ite	ge
 80048d8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80048da:	81a3      	strhlt	r3, [r4, #12]
 80048dc:	bd10      	pop	{r4, pc}

080048de <__swrite>:
 80048de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80048e2:	461f      	mov	r7, r3
 80048e4:	898b      	ldrh	r3, [r1, #12]
 80048e6:	4605      	mov	r5, r0
 80048e8:	05db      	lsls	r3, r3, #23
 80048ea:	460c      	mov	r4, r1
 80048ec:	4616      	mov	r6, r2
 80048ee:	d505      	bpl.n	80048fc <__swrite+0x1e>
 80048f0:	2302      	movs	r3, #2
 80048f2:	2200      	movs	r2, #0
 80048f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80048f8:	f000 f8d0 	bl	8004a9c <_lseek_r>
 80048fc:	89a3      	ldrh	r3, [r4, #12]
 80048fe:	4632      	mov	r2, r6
 8004900:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004904:	81a3      	strh	r3, [r4, #12]
 8004906:	4628      	mov	r0, r5
 8004908:	463b      	mov	r3, r7
 800490a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800490e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004912:	f000 b8e7 	b.w	8004ae4 <_write_r>

08004916 <__sseek>:
 8004916:	b510      	push	{r4, lr}
 8004918:	460c      	mov	r4, r1
 800491a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800491e:	f000 f8bd 	bl	8004a9c <_lseek_r>
 8004922:	1c43      	adds	r3, r0, #1
 8004924:	89a3      	ldrh	r3, [r4, #12]
 8004926:	bf15      	itete	ne
 8004928:	6560      	strne	r0, [r4, #84]	@ 0x54
 800492a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800492e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004932:	81a3      	strheq	r3, [r4, #12]
 8004934:	bf18      	it	ne
 8004936:	81a3      	strhne	r3, [r4, #12]
 8004938:	bd10      	pop	{r4, pc}

0800493a <__sclose>:
 800493a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800493e:	f000 b89d 	b.w	8004a7c <_close_r>

08004942 <__swbuf_r>:
 8004942:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004944:	460e      	mov	r6, r1
 8004946:	4614      	mov	r4, r2
 8004948:	4605      	mov	r5, r0
 800494a:	b118      	cbz	r0, 8004954 <__swbuf_r+0x12>
 800494c:	6a03      	ldr	r3, [r0, #32]
 800494e:	b90b      	cbnz	r3, 8004954 <__swbuf_r+0x12>
 8004950:	f7ff ff06 	bl	8004760 <__sinit>
 8004954:	69a3      	ldr	r3, [r4, #24]
 8004956:	60a3      	str	r3, [r4, #8]
 8004958:	89a3      	ldrh	r3, [r4, #12]
 800495a:	071a      	lsls	r2, r3, #28
 800495c:	d501      	bpl.n	8004962 <__swbuf_r+0x20>
 800495e:	6923      	ldr	r3, [r4, #16]
 8004960:	b943      	cbnz	r3, 8004974 <__swbuf_r+0x32>
 8004962:	4621      	mov	r1, r4
 8004964:	4628      	mov	r0, r5
 8004966:	f000 f82b 	bl	80049c0 <__swsetup_r>
 800496a:	b118      	cbz	r0, 8004974 <__swbuf_r+0x32>
 800496c:	f04f 37ff 	mov.w	r7, #4294967295
 8004970:	4638      	mov	r0, r7
 8004972:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004974:	6823      	ldr	r3, [r4, #0]
 8004976:	6922      	ldr	r2, [r4, #16]
 8004978:	b2f6      	uxtb	r6, r6
 800497a:	1a98      	subs	r0, r3, r2
 800497c:	6963      	ldr	r3, [r4, #20]
 800497e:	4637      	mov	r7, r6
 8004980:	4283      	cmp	r3, r0
 8004982:	dc05      	bgt.n	8004990 <__swbuf_r+0x4e>
 8004984:	4621      	mov	r1, r4
 8004986:	4628      	mov	r0, r5
 8004988:	f000 fd34 	bl	80053f4 <_fflush_r>
 800498c:	2800      	cmp	r0, #0
 800498e:	d1ed      	bne.n	800496c <__swbuf_r+0x2a>
 8004990:	68a3      	ldr	r3, [r4, #8]
 8004992:	3b01      	subs	r3, #1
 8004994:	60a3      	str	r3, [r4, #8]
 8004996:	6823      	ldr	r3, [r4, #0]
 8004998:	1c5a      	adds	r2, r3, #1
 800499a:	6022      	str	r2, [r4, #0]
 800499c:	701e      	strb	r6, [r3, #0]
 800499e:	6962      	ldr	r2, [r4, #20]
 80049a0:	1c43      	adds	r3, r0, #1
 80049a2:	429a      	cmp	r2, r3
 80049a4:	d004      	beq.n	80049b0 <__swbuf_r+0x6e>
 80049a6:	89a3      	ldrh	r3, [r4, #12]
 80049a8:	07db      	lsls	r3, r3, #31
 80049aa:	d5e1      	bpl.n	8004970 <__swbuf_r+0x2e>
 80049ac:	2e0a      	cmp	r6, #10
 80049ae:	d1df      	bne.n	8004970 <__swbuf_r+0x2e>
 80049b0:	4621      	mov	r1, r4
 80049b2:	4628      	mov	r0, r5
 80049b4:	f000 fd1e 	bl	80053f4 <_fflush_r>
 80049b8:	2800      	cmp	r0, #0
 80049ba:	d0d9      	beq.n	8004970 <__swbuf_r+0x2e>
 80049bc:	e7d6      	b.n	800496c <__swbuf_r+0x2a>
	...

080049c0 <__swsetup_r>:
 80049c0:	b538      	push	{r3, r4, r5, lr}
 80049c2:	4b29      	ldr	r3, [pc, #164]	@ (8004a68 <__swsetup_r+0xa8>)
 80049c4:	4605      	mov	r5, r0
 80049c6:	6818      	ldr	r0, [r3, #0]
 80049c8:	460c      	mov	r4, r1
 80049ca:	b118      	cbz	r0, 80049d4 <__swsetup_r+0x14>
 80049cc:	6a03      	ldr	r3, [r0, #32]
 80049ce:	b90b      	cbnz	r3, 80049d4 <__swsetup_r+0x14>
 80049d0:	f7ff fec6 	bl	8004760 <__sinit>
 80049d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80049d8:	0719      	lsls	r1, r3, #28
 80049da:	d422      	bmi.n	8004a22 <__swsetup_r+0x62>
 80049dc:	06da      	lsls	r2, r3, #27
 80049de:	d407      	bmi.n	80049f0 <__swsetup_r+0x30>
 80049e0:	2209      	movs	r2, #9
 80049e2:	602a      	str	r2, [r5, #0]
 80049e4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80049e8:	f04f 30ff 	mov.w	r0, #4294967295
 80049ec:	81a3      	strh	r3, [r4, #12]
 80049ee:	e033      	b.n	8004a58 <__swsetup_r+0x98>
 80049f0:	0758      	lsls	r0, r3, #29
 80049f2:	d512      	bpl.n	8004a1a <__swsetup_r+0x5a>
 80049f4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80049f6:	b141      	cbz	r1, 8004a0a <__swsetup_r+0x4a>
 80049f8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80049fc:	4299      	cmp	r1, r3
 80049fe:	d002      	beq.n	8004a06 <__swsetup_r+0x46>
 8004a00:	4628      	mov	r0, r5
 8004a02:	f000 f8af 	bl	8004b64 <_free_r>
 8004a06:	2300      	movs	r3, #0
 8004a08:	6363      	str	r3, [r4, #52]	@ 0x34
 8004a0a:	89a3      	ldrh	r3, [r4, #12]
 8004a0c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004a10:	81a3      	strh	r3, [r4, #12]
 8004a12:	2300      	movs	r3, #0
 8004a14:	6063      	str	r3, [r4, #4]
 8004a16:	6923      	ldr	r3, [r4, #16]
 8004a18:	6023      	str	r3, [r4, #0]
 8004a1a:	89a3      	ldrh	r3, [r4, #12]
 8004a1c:	f043 0308 	orr.w	r3, r3, #8
 8004a20:	81a3      	strh	r3, [r4, #12]
 8004a22:	6923      	ldr	r3, [r4, #16]
 8004a24:	b94b      	cbnz	r3, 8004a3a <__swsetup_r+0x7a>
 8004a26:	89a3      	ldrh	r3, [r4, #12]
 8004a28:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004a2c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004a30:	d003      	beq.n	8004a3a <__swsetup_r+0x7a>
 8004a32:	4621      	mov	r1, r4
 8004a34:	4628      	mov	r0, r5
 8004a36:	f000 fd2a 	bl	800548e <__smakebuf_r>
 8004a3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004a3e:	f013 0201 	ands.w	r2, r3, #1
 8004a42:	d00a      	beq.n	8004a5a <__swsetup_r+0x9a>
 8004a44:	2200      	movs	r2, #0
 8004a46:	60a2      	str	r2, [r4, #8]
 8004a48:	6962      	ldr	r2, [r4, #20]
 8004a4a:	4252      	negs	r2, r2
 8004a4c:	61a2      	str	r2, [r4, #24]
 8004a4e:	6922      	ldr	r2, [r4, #16]
 8004a50:	b942      	cbnz	r2, 8004a64 <__swsetup_r+0xa4>
 8004a52:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004a56:	d1c5      	bne.n	80049e4 <__swsetup_r+0x24>
 8004a58:	bd38      	pop	{r3, r4, r5, pc}
 8004a5a:	0799      	lsls	r1, r3, #30
 8004a5c:	bf58      	it	pl
 8004a5e:	6962      	ldrpl	r2, [r4, #20]
 8004a60:	60a2      	str	r2, [r4, #8]
 8004a62:	e7f4      	b.n	8004a4e <__swsetup_r+0x8e>
 8004a64:	2000      	movs	r0, #0
 8004a66:	e7f7      	b.n	8004a58 <__swsetup_r+0x98>
 8004a68:	20000018 	.word	0x20000018

08004a6c <memset>:
 8004a6c:	4603      	mov	r3, r0
 8004a6e:	4402      	add	r2, r0
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d100      	bne.n	8004a76 <memset+0xa>
 8004a74:	4770      	bx	lr
 8004a76:	f803 1b01 	strb.w	r1, [r3], #1
 8004a7a:	e7f9      	b.n	8004a70 <memset+0x4>

08004a7c <_close_r>:
 8004a7c:	b538      	push	{r3, r4, r5, lr}
 8004a7e:	2300      	movs	r3, #0
 8004a80:	4d05      	ldr	r5, [pc, #20]	@ (8004a98 <_close_r+0x1c>)
 8004a82:	4604      	mov	r4, r0
 8004a84:	4608      	mov	r0, r1
 8004a86:	602b      	str	r3, [r5, #0]
 8004a88:	f7fc f873 	bl	8000b72 <_close>
 8004a8c:	1c43      	adds	r3, r0, #1
 8004a8e:	d102      	bne.n	8004a96 <_close_r+0x1a>
 8004a90:	682b      	ldr	r3, [r5, #0]
 8004a92:	b103      	cbz	r3, 8004a96 <_close_r+0x1a>
 8004a94:	6023      	str	r3, [r4, #0]
 8004a96:	bd38      	pop	{r3, r4, r5, pc}
 8004a98:	200003c4 	.word	0x200003c4

08004a9c <_lseek_r>:
 8004a9c:	b538      	push	{r3, r4, r5, lr}
 8004a9e:	4604      	mov	r4, r0
 8004aa0:	4608      	mov	r0, r1
 8004aa2:	4611      	mov	r1, r2
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	4d05      	ldr	r5, [pc, #20]	@ (8004abc <_lseek_r+0x20>)
 8004aa8:	602a      	str	r2, [r5, #0]
 8004aaa:	461a      	mov	r2, r3
 8004aac:	f7fc f885 	bl	8000bba <_lseek>
 8004ab0:	1c43      	adds	r3, r0, #1
 8004ab2:	d102      	bne.n	8004aba <_lseek_r+0x1e>
 8004ab4:	682b      	ldr	r3, [r5, #0]
 8004ab6:	b103      	cbz	r3, 8004aba <_lseek_r+0x1e>
 8004ab8:	6023      	str	r3, [r4, #0]
 8004aba:	bd38      	pop	{r3, r4, r5, pc}
 8004abc:	200003c4 	.word	0x200003c4

08004ac0 <_read_r>:
 8004ac0:	b538      	push	{r3, r4, r5, lr}
 8004ac2:	4604      	mov	r4, r0
 8004ac4:	4608      	mov	r0, r1
 8004ac6:	4611      	mov	r1, r2
 8004ac8:	2200      	movs	r2, #0
 8004aca:	4d05      	ldr	r5, [pc, #20]	@ (8004ae0 <_read_r+0x20>)
 8004acc:	602a      	str	r2, [r5, #0]
 8004ace:	461a      	mov	r2, r3
 8004ad0:	f7fc f816 	bl	8000b00 <_read>
 8004ad4:	1c43      	adds	r3, r0, #1
 8004ad6:	d102      	bne.n	8004ade <_read_r+0x1e>
 8004ad8:	682b      	ldr	r3, [r5, #0]
 8004ada:	b103      	cbz	r3, 8004ade <_read_r+0x1e>
 8004adc:	6023      	str	r3, [r4, #0]
 8004ade:	bd38      	pop	{r3, r4, r5, pc}
 8004ae0:	200003c4 	.word	0x200003c4

08004ae4 <_write_r>:
 8004ae4:	b538      	push	{r3, r4, r5, lr}
 8004ae6:	4604      	mov	r4, r0
 8004ae8:	4608      	mov	r0, r1
 8004aea:	4611      	mov	r1, r2
 8004aec:	2200      	movs	r2, #0
 8004aee:	4d05      	ldr	r5, [pc, #20]	@ (8004b04 <_write_r+0x20>)
 8004af0:	602a      	str	r2, [r5, #0]
 8004af2:	461a      	mov	r2, r3
 8004af4:	f7fc f821 	bl	8000b3a <_write>
 8004af8:	1c43      	adds	r3, r0, #1
 8004afa:	d102      	bne.n	8004b02 <_write_r+0x1e>
 8004afc:	682b      	ldr	r3, [r5, #0]
 8004afe:	b103      	cbz	r3, 8004b02 <_write_r+0x1e>
 8004b00:	6023      	str	r3, [r4, #0]
 8004b02:	bd38      	pop	{r3, r4, r5, pc}
 8004b04:	200003c4 	.word	0x200003c4

08004b08 <__errno>:
 8004b08:	4b01      	ldr	r3, [pc, #4]	@ (8004b10 <__errno+0x8>)
 8004b0a:	6818      	ldr	r0, [r3, #0]
 8004b0c:	4770      	bx	lr
 8004b0e:	bf00      	nop
 8004b10:	20000018 	.word	0x20000018

08004b14 <__libc_init_array>:
 8004b14:	b570      	push	{r4, r5, r6, lr}
 8004b16:	2600      	movs	r6, #0
 8004b18:	4d0c      	ldr	r5, [pc, #48]	@ (8004b4c <__libc_init_array+0x38>)
 8004b1a:	4c0d      	ldr	r4, [pc, #52]	@ (8004b50 <__libc_init_array+0x3c>)
 8004b1c:	1b64      	subs	r4, r4, r5
 8004b1e:	10a4      	asrs	r4, r4, #2
 8004b20:	42a6      	cmp	r6, r4
 8004b22:	d109      	bne.n	8004b38 <__libc_init_array+0x24>
 8004b24:	f000 fd64 	bl	80055f0 <_init>
 8004b28:	2600      	movs	r6, #0
 8004b2a:	4d0a      	ldr	r5, [pc, #40]	@ (8004b54 <__libc_init_array+0x40>)
 8004b2c:	4c0a      	ldr	r4, [pc, #40]	@ (8004b58 <__libc_init_array+0x44>)
 8004b2e:	1b64      	subs	r4, r4, r5
 8004b30:	10a4      	asrs	r4, r4, #2
 8004b32:	42a6      	cmp	r6, r4
 8004b34:	d105      	bne.n	8004b42 <__libc_init_array+0x2e>
 8004b36:	bd70      	pop	{r4, r5, r6, pc}
 8004b38:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b3c:	4798      	blx	r3
 8004b3e:	3601      	adds	r6, #1
 8004b40:	e7ee      	b.n	8004b20 <__libc_init_array+0xc>
 8004b42:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b46:	4798      	blx	r3
 8004b48:	3601      	adds	r6, #1
 8004b4a:	e7f2      	b.n	8004b32 <__libc_init_array+0x1e>
 8004b4c:	080057ec 	.word	0x080057ec
 8004b50:	080057ec 	.word	0x080057ec
 8004b54:	080057ec 	.word	0x080057ec
 8004b58:	080057f0 	.word	0x080057f0

08004b5c <__retarget_lock_init_recursive>:
 8004b5c:	4770      	bx	lr

08004b5e <__retarget_lock_acquire_recursive>:
 8004b5e:	4770      	bx	lr

08004b60 <__retarget_lock_release_recursive>:
 8004b60:	4770      	bx	lr
	...

08004b64 <_free_r>:
 8004b64:	b538      	push	{r3, r4, r5, lr}
 8004b66:	4605      	mov	r5, r0
 8004b68:	2900      	cmp	r1, #0
 8004b6a:	d040      	beq.n	8004bee <_free_r+0x8a>
 8004b6c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004b70:	1f0c      	subs	r4, r1, #4
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	bfb8      	it	lt
 8004b76:	18e4      	addlt	r4, r4, r3
 8004b78:	f000 f8de 	bl	8004d38 <__malloc_lock>
 8004b7c:	4a1c      	ldr	r2, [pc, #112]	@ (8004bf0 <_free_r+0x8c>)
 8004b7e:	6813      	ldr	r3, [r2, #0]
 8004b80:	b933      	cbnz	r3, 8004b90 <_free_r+0x2c>
 8004b82:	6063      	str	r3, [r4, #4]
 8004b84:	6014      	str	r4, [r2, #0]
 8004b86:	4628      	mov	r0, r5
 8004b88:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004b8c:	f000 b8da 	b.w	8004d44 <__malloc_unlock>
 8004b90:	42a3      	cmp	r3, r4
 8004b92:	d908      	bls.n	8004ba6 <_free_r+0x42>
 8004b94:	6820      	ldr	r0, [r4, #0]
 8004b96:	1821      	adds	r1, r4, r0
 8004b98:	428b      	cmp	r3, r1
 8004b9a:	bf01      	itttt	eq
 8004b9c:	6819      	ldreq	r1, [r3, #0]
 8004b9e:	685b      	ldreq	r3, [r3, #4]
 8004ba0:	1809      	addeq	r1, r1, r0
 8004ba2:	6021      	streq	r1, [r4, #0]
 8004ba4:	e7ed      	b.n	8004b82 <_free_r+0x1e>
 8004ba6:	461a      	mov	r2, r3
 8004ba8:	685b      	ldr	r3, [r3, #4]
 8004baa:	b10b      	cbz	r3, 8004bb0 <_free_r+0x4c>
 8004bac:	42a3      	cmp	r3, r4
 8004bae:	d9fa      	bls.n	8004ba6 <_free_r+0x42>
 8004bb0:	6811      	ldr	r1, [r2, #0]
 8004bb2:	1850      	adds	r0, r2, r1
 8004bb4:	42a0      	cmp	r0, r4
 8004bb6:	d10b      	bne.n	8004bd0 <_free_r+0x6c>
 8004bb8:	6820      	ldr	r0, [r4, #0]
 8004bba:	4401      	add	r1, r0
 8004bbc:	1850      	adds	r0, r2, r1
 8004bbe:	4283      	cmp	r3, r0
 8004bc0:	6011      	str	r1, [r2, #0]
 8004bc2:	d1e0      	bne.n	8004b86 <_free_r+0x22>
 8004bc4:	6818      	ldr	r0, [r3, #0]
 8004bc6:	685b      	ldr	r3, [r3, #4]
 8004bc8:	4408      	add	r0, r1
 8004bca:	6010      	str	r0, [r2, #0]
 8004bcc:	6053      	str	r3, [r2, #4]
 8004bce:	e7da      	b.n	8004b86 <_free_r+0x22>
 8004bd0:	d902      	bls.n	8004bd8 <_free_r+0x74>
 8004bd2:	230c      	movs	r3, #12
 8004bd4:	602b      	str	r3, [r5, #0]
 8004bd6:	e7d6      	b.n	8004b86 <_free_r+0x22>
 8004bd8:	6820      	ldr	r0, [r4, #0]
 8004bda:	1821      	adds	r1, r4, r0
 8004bdc:	428b      	cmp	r3, r1
 8004bde:	bf01      	itttt	eq
 8004be0:	6819      	ldreq	r1, [r3, #0]
 8004be2:	685b      	ldreq	r3, [r3, #4]
 8004be4:	1809      	addeq	r1, r1, r0
 8004be6:	6021      	streq	r1, [r4, #0]
 8004be8:	6063      	str	r3, [r4, #4]
 8004bea:	6054      	str	r4, [r2, #4]
 8004bec:	e7cb      	b.n	8004b86 <_free_r+0x22>
 8004bee:	bd38      	pop	{r3, r4, r5, pc}
 8004bf0:	200003d0 	.word	0x200003d0

08004bf4 <sbrk_aligned>:
 8004bf4:	b570      	push	{r4, r5, r6, lr}
 8004bf6:	4e0f      	ldr	r6, [pc, #60]	@ (8004c34 <sbrk_aligned+0x40>)
 8004bf8:	460c      	mov	r4, r1
 8004bfa:	6831      	ldr	r1, [r6, #0]
 8004bfc:	4605      	mov	r5, r0
 8004bfe:	b911      	cbnz	r1, 8004c06 <sbrk_aligned+0x12>
 8004c00:	f000 fcd8 	bl	80055b4 <_sbrk_r>
 8004c04:	6030      	str	r0, [r6, #0]
 8004c06:	4621      	mov	r1, r4
 8004c08:	4628      	mov	r0, r5
 8004c0a:	f000 fcd3 	bl	80055b4 <_sbrk_r>
 8004c0e:	1c43      	adds	r3, r0, #1
 8004c10:	d103      	bne.n	8004c1a <sbrk_aligned+0x26>
 8004c12:	f04f 34ff 	mov.w	r4, #4294967295
 8004c16:	4620      	mov	r0, r4
 8004c18:	bd70      	pop	{r4, r5, r6, pc}
 8004c1a:	1cc4      	adds	r4, r0, #3
 8004c1c:	f024 0403 	bic.w	r4, r4, #3
 8004c20:	42a0      	cmp	r0, r4
 8004c22:	d0f8      	beq.n	8004c16 <sbrk_aligned+0x22>
 8004c24:	1a21      	subs	r1, r4, r0
 8004c26:	4628      	mov	r0, r5
 8004c28:	f000 fcc4 	bl	80055b4 <_sbrk_r>
 8004c2c:	3001      	adds	r0, #1
 8004c2e:	d1f2      	bne.n	8004c16 <sbrk_aligned+0x22>
 8004c30:	e7ef      	b.n	8004c12 <sbrk_aligned+0x1e>
 8004c32:	bf00      	nop
 8004c34:	200003cc 	.word	0x200003cc

08004c38 <_malloc_r>:
 8004c38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004c3c:	1ccd      	adds	r5, r1, #3
 8004c3e:	f025 0503 	bic.w	r5, r5, #3
 8004c42:	3508      	adds	r5, #8
 8004c44:	2d0c      	cmp	r5, #12
 8004c46:	bf38      	it	cc
 8004c48:	250c      	movcc	r5, #12
 8004c4a:	2d00      	cmp	r5, #0
 8004c4c:	4606      	mov	r6, r0
 8004c4e:	db01      	blt.n	8004c54 <_malloc_r+0x1c>
 8004c50:	42a9      	cmp	r1, r5
 8004c52:	d904      	bls.n	8004c5e <_malloc_r+0x26>
 8004c54:	230c      	movs	r3, #12
 8004c56:	6033      	str	r3, [r6, #0]
 8004c58:	2000      	movs	r0, #0
 8004c5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004c5e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004d34 <_malloc_r+0xfc>
 8004c62:	f000 f869 	bl	8004d38 <__malloc_lock>
 8004c66:	f8d8 3000 	ldr.w	r3, [r8]
 8004c6a:	461c      	mov	r4, r3
 8004c6c:	bb44      	cbnz	r4, 8004cc0 <_malloc_r+0x88>
 8004c6e:	4629      	mov	r1, r5
 8004c70:	4630      	mov	r0, r6
 8004c72:	f7ff ffbf 	bl	8004bf4 <sbrk_aligned>
 8004c76:	1c43      	adds	r3, r0, #1
 8004c78:	4604      	mov	r4, r0
 8004c7a:	d158      	bne.n	8004d2e <_malloc_r+0xf6>
 8004c7c:	f8d8 4000 	ldr.w	r4, [r8]
 8004c80:	4627      	mov	r7, r4
 8004c82:	2f00      	cmp	r7, #0
 8004c84:	d143      	bne.n	8004d0e <_malloc_r+0xd6>
 8004c86:	2c00      	cmp	r4, #0
 8004c88:	d04b      	beq.n	8004d22 <_malloc_r+0xea>
 8004c8a:	6823      	ldr	r3, [r4, #0]
 8004c8c:	4639      	mov	r1, r7
 8004c8e:	4630      	mov	r0, r6
 8004c90:	eb04 0903 	add.w	r9, r4, r3
 8004c94:	f000 fc8e 	bl	80055b4 <_sbrk_r>
 8004c98:	4581      	cmp	r9, r0
 8004c9a:	d142      	bne.n	8004d22 <_malloc_r+0xea>
 8004c9c:	6821      	ldr	r1, [r4, #0]
 8004c9e:	4630      	mov	r0, r6
 8004ca0:	1a6d      	subs	r5, r5, r1
 8004ca2:	4629      	mov	r1, r5
 8004ca4:	f7ff ffa6 	bl	8004bf4 <sbrk_aligned>
 8004ca8:	3001      	adds	r0, #1
 8004caa:	d03a      	beq.n	8004d22 <_malloc_r+0xea>
 8004cac:	6823      	ldr	r3, [r4, #0]
 8004cae:	442b      	add	r3, r5
 8004cb0:	6023      	str	r3, [r4, #0]
 8004cb2:	f8d8 3000 	ldr.w	r3, [r8]
 8004cb6:	685a      	ldr	r2, [r3, #4]
 8004cb8:	bb62      	cbnz	r2, 8004d14 <_malloc_r+0xdc>
 8004cba:	f8c8 7000 	str.w	r7, [r8]
 8004cbe:	e00f      	b.n	8004ce0 <_malloc_r+0xa8>
 8004cc0:	6822      	ldr	r2, [r4, #0]
 8004cc2:	1b52      	subs	r2, r2, r5
 8004cc4:	d420      	bmi.n	8004d08 <_malloc_r+0xd0>
 8004cc6:	2a0b      	cmp	r2, #11
 8004cc8:	d917      	bls.n	8004cfa <_malloc_r+0xc2>
 8004cca:	1961      	adds	r1, r4, r5
 8004ccc:	42a3      	cmp	r3, r4
 8004cce:	6025      	str	r5, [r4, #0]
 8004cd0:	bf18      	it	ne
 8004cd2:	6059      	strne	r1, [r3, #4]
 8004cd4:	6863      	ldr	r3, [r4, #4]
 8004cd6:	bf08      	it	eq
 8004cd8:	f8c8 1000 	streq.w	r1, [r8]
 8004cdc:	5162      	str	r2, [r4, r5]
 8004cde:	604b      	str	r3, [r1, #4]
 8004ce0:	4630      	mov	r0, r6
 8004ce2:	f000 f82f 	bl	8004d44 <__malloc_unlock>
 8004ce6:	f104 000b 	add.w	r0, r4, #11
 8004cea:	1d23      	adds	r3, r4, #4
 8004cec:	f020 0007 	bic.w	r0, r0, #7
 8004cf0:	1ac2      	subs	r2, r0, r3
 8004cf2:	bf1c      	itt	ne
 8004cf4:	1a1b      	subne	r3, r3, r0
 8004cf6:	50a3      	strne	r3, [r4, r2]
 8004cf8:	e7af      	b.n	8004c5a <_malloc_r+0x22>
 8004cfa:	6862      	ldr	r2, [r4, #4]
 8004cfc:	42a3      	cmp	r3, r4
 8004cfe:	bf0c      	ite	eq
 8004d00:	f8c8 2000 	streq.w	r2, [r8]
 8004d04:	605a      	strne	r2, [r3, #4]
 8004d06:	e7eb      	b.n	8004ce0 <_malloc_r+0xa8>
 8004d08:	4623      	mov	r3, r4
 8004d0a:	6864      	ldr	r4, [r4, #4]
 8004d0c:	e7ae      	b.n	8004c6c <_malloc_r+0x34>
 8004d0e:	463c      	mov	r4, r7
 8004d10:	687f      	ldr	r7, [r7, #4]
 8004d12:	e7b6      	b.n	8004c82 <_malloc_r+0x4a>
 8004d14:	461a      	mov	r2, r3
 8004d16:	685b      	ldr	r3, [r3, #4]
 8004d18:	42a3      	cmp	r3, r4
 8004d1a:	d1fb      	bne.n	8004d14 <_malloc_r+0xdc>
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	6053      	str	r3, [r2, #4]
 8004d20:	e7de      	b.n	8004ce0 <_malloc_r+0xa8>
 8004d22:	230c      	movs	r3, #12
 8004d24:	4630      	mov	r0, r6
 8004d26:	6033      	str	r3, [r6, #0]
 8004d28:	f000 f80c 	bl	8004d44 <__malloc_unlock>
 8004d2c:	e794      	b.n	8004c58 <_malloc_r+0x20>
 8004d2e:	6005      	str	r5, [r0, #0]
 8004d30:	e7d6      	b.n	8004ce0 <_malloc_r+0xa8>
 8004d32:	bf00      	nop
 8004d34:	200003d0 	.word	0x200003d0

08004d38 <__malloc_lock>:
 8004d38:	4801      	ldr	r0, [pc, #4]	@ (8004d40 <__malloc_lock+0x8>)
 8004d3a:	f7ff bf10 	b.w	8004b5e <__retarget_lock_acquire_recursive>
 8004d3e:	bf00      	nop
 8004d40:	200003c8 	.word	0x200003c8

08004d44 <__malloc_unlock>:
 8004d44:	4801      	ldr	r0, [pc, #4]	@ (8004d4c <__malloc_unlock+0x8>)
 8004d46:	f7ff bf0b 	b.w	8004b60 <__retarget_lock_release_recursive>
 8004d4a:	bf00      	nop
 8004d4c:	200003c8 	.word	0x200003c8

08004d50 <__sfputc_r>:
 8004d50:	6893      	ldr	r3, [r2, #8]
 8004d52:	b410      	push	{r4}
 8004d54:	3b01      	subs	r3, #1
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	6093      	str	r3, [r2, #8]
 8004d5a:	da07      	bge.n	8004d6c <__sfputc_r+0x1c>
 8004d5c:	6994      	ldr	r4, [r2, #24]
 8004d5e:	42a3      	cmp	r3, r4
 8004d60:	db01      	blt.n	8004d66 <__sfputc_r+0x16>
 8004d62:	290a      	cmp	r1, #10
 8004d64:	d102      	bne.n	8004d6c <__sfputc_r+0x1c>
 8004d66:	bc10      	pop	{r4}
 8004d68:	f7ff bdeb 	b.w	8004942 <__swbuf_r>
 8004d6c:	6813      	ldr	r3, [r2, #0]
 8004d6e:	1c58      	adds	r0, r3, #1
 8004d70:	6010      	str	r0, [r2, #0]
 8004d72:	7019      	strb	r1, [r3, #0]
 8004d74:	4608      	mov	r0, r1
 8004d76:	bc10      	pop	{r4}
 8004d78:	4770      	bx	lr

08004d7a <__sfputs_r>:
 8004d7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d7c:	4606      	mov	r6, r0
 8004d7e:	460f      	mov	r7, r1
 8004d80:	4614      	mov	r4, r2
 8004d82:	18d5      	adds	r5, r2, r3
 8004d84:	42ac      	cmp	r4, r5
 8004d86:	d101      	bne.n	8004d8c <__sfputs_r+0x12>
 8004d88:	2000      	movs	r0, #0
 8004d8a:	e007      	b.n	8004d9c <__sfputs_r+0x22>
 8004d8c:	463a      	mov	r2, r7
 8004d8e:	4630      	mov	r0, r6
 8004d90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d94:	f7ff ffdc 	bl	8004d50 <__sfputc_r>
 8004d98:	1c43      	adds	r3, r0, #1
 8004d9a:	d1f3      	bne.n	8004d84 <__sfputs_r+0xa>
 8004d9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004da0 <_vfiprintf_r>:
 8004da0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004da4:	460d      	mov	r5, r1
 8004da6:	4614      	mov	r4, r2
 8004da8:	4698      	mov	r8, r3
 8004daa:	4606      	mov	r6, r0
 8004dac:	b09d      	sub	sp, #116	@ 0x74
 8004dae:	b118      	cbz	r0, 8004db8 <_vfiprintf_r+0x18>
 8004db0:	6a03      	ldr	r3, [r0, #32]
 8004db2:	b90b      	cbnz	r3, 8004db8 <_vfiprintf_r+0x18>
 8004db4:	f7ff fcd4 	bl	8004760 <__sinit>
 8004db8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004dba:	07d9      	lsls	r1, r3, #31
 8004dbc:	d405      	bmi.n	8004dca <_vfiprintf_r+0x2a>
 8004dbe:	89ab      	ldrh	r3, [r5, #12]
 8004dc0:	059a      	lsls	r2, r3, #22
 8004dc2:	d402      	bmi.n	8004dca <_vfiprintf_r+0x2a>
 8004dc4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004dc6:	f7ff feca 	bl	8004b5e <__retarget_lock_acquire_recursive>
 8004dca:	89ab      	ldrh	r3, [r5, #12]
 8004dcc:	071b      	lsls	r3, r3, #28
 8004dce:	d501      	bpl.n	8004dd4 <_vfiprintf_r+0x34>
 8004dd0:	692b      	ldr	r3, [r5, #16]
 8004dd2:	b99b      	cbnz	r3, 8004dfc <_vfiprintf_r+0x5c>
 8004dd4:	4629      	mov	r1, r5
 8004dd6:	4630      	mov	r0, r6
 8004dd8:	f7ff fdf2 	bl	80049c0 <__swsetup_r>
 8004ddc:	b170      	cbz	r0, 8004dfc <_vfiprintf_r+0x5c>
 8004dde:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004de0:	07dc      	lsls	r4, r3, #31
 8004de2:	d504      	bpl.n	8004dee <_vfiprintf_r+0x4e>
 8004de4:	f04f 30ff 	mov.w	r0, #4294967295
 8004de8:	b01d      	add	sp, #116	@ 0x74
 8004dea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004dee:	89ab      	ldrh	r3, [r5, #12]
 8004df0:	0598      	lsls	r0, r3, #22
 8004df2:	d4f7      	bmi.n	8004de4 <_vfiprintf_r+0x44>
 8004df4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004df6:	f7ff feb3 	bl	8004b60 <__retarget_lock_release_recursive>
 8004dfa:	e7f3      	b.n	8004de4 <_vfiprintf_r+0x44>
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	9309      	str	r3, [sp, #36]	@ 0x24
 8004e00:	2320      	movs	r3, #32
 8004e02:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004e06:	2330      	movs	r3, #48	@ 0x30
 8004e08:	f04f 0901 	mov.w	r9, #1
 8004e0c:	f8cd 800c 	str.w	r8, [sp, #12]
 8004e10:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8004fbc <_vfiprintf_r+0x21c>
 8004e14:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004e18:	4623      	mov	r3, r4
 8004e1a:	469a      	mov	sl, r3
 8004e1c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004e20:	b10a      	cbz	r2, 8004e26 <_vfiprintf_r+0x86>
 8004e22:	2a25      	cmp	r2, #37	@ 0x25
 8004e24:	d1f9      	bne.n	8004e1a <_vfiprintf_r+0x7a>
 8004e26:	ebba 0b04 	subs.w	fp, sl, r4
 8004e2a:	d00b      	beq.n	8004e44 <_vfiprintf_r+0xa4>
 8004e2c:	465b      	mov	r3, fp
 8004e2e:	4622      	mov	r2, r4
 8004e30:	4629      	mov	r1, r5
 8004e32:	4630      	mov	r0, r6
 8004e34:	f7ff ffa1 	bl	8004d7a <__sfputs_r>
 8004e38:	3001      	adds	r0, #1
 8004e3a:	f000 80a7 	beq.w	8004f8c <_vfiprintf_r+0x1ec>
 8004e3e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004e40:	445a      	add	r2, fp
 8004e42:	9209      	str	r2, [sp, #36]	@ 0x24
 8004e44:	f89a 3000 	ldrb.w	r3, [sl]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	f000 809f 	beq.w	8004f8c <_vfiprintf_r+0x1ec>
 8004e4e:	2300      	movs	r3, #0
 8004e50:	f04f 32ff 	mov.w	r2, #4294967295
 8004e54:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004e58:	f10a 0a01 	add.w	sl, sl, #1
 8004e5c:	9304      	str	r3, [sp, #16]
 8004e5e:	9307      	str	r3, [sp, #28]
 8004e60:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004e64:	931a      	str	r3, [sp, #104]	@ 0x68
 8004e66:	4654      	mov	r4, sl
 8004e68:	2205      	movs	r2, #5
 8004e6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e6e:	4853      	ldr	r0, [pc, #332]	@ (8004fbc <_vfiprintf_r+0x21c>)
 8004e70:	f000 fbb0 	bl	80055d4 <memchr>
 8004e74:	9a04      	ldr	r2, [sp, #16]
 8004e76:	b9d8      	cbnz	r0, 8004eb0 <_vfiprintf_r+0x110>
 8004e78:	06d1      	lsls	r1, r2, #27
 8004e7a:	bf44      	itt	mi
 8004e7c:	2320      	movmi	r3, #32
 8004e7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004e82:	0713      	lsls	r3, r2, #28
 8004e84:	bf44      	itt	mi
 8004e86:	232b      	movmi	r3, #43	@ 0x2b
 8004e88:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004e8c:	f89a 3000 	ldrb.w	r3, [sl]
 8004e90:	2b2a      	cmp	r3, #42	@ 0x2a
 8004e92:	d015      	beq.n	8004ec0 <_vfiprintf_r+0x120>
 8004e94:	4654      	mov	r4, sl
 8004e96:	2000      	movs	r0, #0
 8004e98:	f04f 0c0a 	mov.w	ip, #10
 8004e9c:	9a07      	ldr	r2, [sp, #28]
 8004e9e:	4621      	mov	r1, r4
 8004ea0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004ea4:	3b30      	subs	r3, #48	@ 0x30
 8004ea6:	2b09      	cmp	r3, #9
 8004ea8:	d94b      	bls.n	8004f42 <_vfiprintf_r+0x1a2>
 8004eaa:	b1b0      	cbz	r0, 8004eda <_vfiprintf_r+0x13a>
 8004eac:	9207      	str	r2, [sp, #28]
 8004eae:	e014      	b.n	8004eda <_vfiprintf_r+0x13a>
 8004eb0:	eba0 0308 	sub.w	r3, r0, r8
 8004eb4:	fa09 f303 	lsl.w	r3, r9, r3
 8004eb8:	4313      	orrs	r3, r2
 8004eba:	46a2      	mov	sl, r4
 8004ebc:	9304      	str	r3, [sp, #16]
 8004ebe:	e7d2      	b.n	8004e66 <_vfiprintf_r+0xc6>
 8004ec0:	9b03      	ldr	r3, [sp, #12]
 8004ec2:	1d19      	adds	r1, r3, #4
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	9103      	str	r1, [sp, #12]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	bfbb      	ittet	lt
 8004ecc:	425b      	neglt	r3, r3
 8004ece:	f042 0202 	orrlt.w	r2, r2, #2
 8004ed2:	9307      	strge	r3, [sp, #28]
 8004ed4:	9307      	strlt	r3, [sp, #28]
 8004ed6:	bfb8      	it	lt
 8004ed8:	9204      	strlt	r2, [sp, #16]
 8004eda:	7823      	ldrb	r3, [r4, #0]
 8004edc:	2b2e      	cmp	r3, #46	@ 0x2e
 8004ede:	d10a      	bne.n	8004ef6 <_vfiprintf_r+0x156>
 8004ee0:	7863      	ldrb	r3, [r4, #1]
 8004ee2:	2b2a      	cmp	r3, #42	@ 0x2a
 8004ee4:	d132      	bne.n	8004f4c <_vfiprintf_r+0x1ac>
 8004ee6:	9b03      	ldr	r3, [sp, #12]
 8004ee8:	3402      	adds	r4, #2
 8004eea:	1d1a      	adds	r2, r3, #4
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	9203      	str	r2, [sp, #12]
 8004ef0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004ef4:	9305      	str	r3, [sp, #20]
 8004ef6:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8004fc0 <_vfiprintf_r+0x220>
 8004efa:	2203      	movs	r2, #3
 8004efc:	4650      	mov	r0, sl
 8004efe:	7821      	ldrb	r1, [r4, #0]
 8004f00:	f000 fb68 	bl	80055d4 <memchr>
 8004f04:	b138      	cbz	r0, 8004f16 <_vfiprintf_r+0x176>
 8004f06:	2240      	movs	r2, #64	@ 0x40
 8004f08:	9b04      	ldr	r3, [sp, #16]
 8004f0a:	eba0 000a 	sub.w	r0, r0, sl
 8004f0e:	4082      	lsls	r2, r0
 8004f10:	4313      	orrs	r3, r2
 8004f12:	3401      	adds	r4, #1
 8004f14:	9304      	str	r3, [sp, #16]
 8004f16:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f1a:	2206      	movs	r2, #6
 8004f1c:	4829      	ldr	r0, [pc, #164]	@ (8004fc4 <_vfiprintf_r+0x224>)
 8004f1e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004f22:	f000 fb57 	bl	80055d4 <memchr>
 8004f26:	2800      	cmp	r0, #0
 8004f28:	d03f      	beq.n	8004faa <_vfiprintf_r+0x20a>
 8004f2a:	4b27      	ldr	r3, [pc, #156]	@ (8004fc8 <_vfiprintf_r+0x228>)
 8004f2c:	bb1b      	cbnz	r3, 8004f76 <_vfiprintf_r+0x1d6>
 8004f2e:	9b03      	ldr	r3, [sp, #12]
 8004f30:	3307      	adds	r3, #7
 8004f32:	f023 0307 	bic.w	r3, r3, #7
 8004f36:	3308      	adds	r3, #8
 8004f38:	9303      	str	r3, [sp, #12]
 8004f3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004f3c:	443b      	add	r3, r7
 8004f3e:	9309      	str	r3, [sp, #36]	@ 0x24
 8004f40:	e76a      	b.n	8004e18 <_vfiprintf_r+0x78>
 8004f42:	460c      	mov	r4, r1
 8004f44:	2001      	movs	r0, #1
 8004f46:	fb0c 3202 	mla	r2, ip, r2, r3
 8004f4a:	e7a8      	b.n	8004e9e <_vfiprintf_r+0xfe>
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	f04f 0c0a 	mov.w	ip, #10
 8004f52:	4619      	mov	r1, r3
 8004f54:	3401      	adds	r4, #1
 8004f56:	9305      	str	r3, [sp, #20]
 8004f58:	4620      	mov	r0, r4
 8004f5a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004f5e:	3a30      	subs	r2, #48	@ 0x30
 8004f60:	2a09      	cmp	r2, #9
 8004f62:	d903      	bls.n	8004f6c <_vfiprintf_r+0x1cc>
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d0c6      	beq.n	8004ef6 <_vfiprintf_r+0x156>
 8004f68:	9105      	str	r1, [sp, #20]
 8004f6a:	e7c4      	b.n	8004ef6 <_vfiprintf_r+0x156>
 8004f6c:	4604      	mov	r4, r0
 8004f6e:	2301      	movs	r3, #1
 8004f70:	fb0c 2101 	mla	r1, ip, r1, r2
 8004f74:	e7f0      	b.n	8004f58 <_vfiprintf_r+0x1b8>
 8004f76:	ab03      	add	r3, sp, #12
 8004f78:	9300      	str	r3, [sp, #0]
 8004f7a:	462a      	mov	r2, r5
 8004f7c:	4630      	mov	r0, r6
 8004f7e:	4b13      	ldr	r3, [pc, #76]	@ (8004fcc <_vfiprintf_r+0x22c>)
 8004f80:	a904      	add	r1, sp, #16
 8004f82:	f3af 8000 	nop.w
 8004f86:	4607      	mov	r7, r0
 8004f88:	1c78      	adds	r0, r7, #1
 8004f8a:	d1d6      	bne.n	8004f3a <_vfiprintf_r+0x19a>
 8004f8c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004f8e:	07d9      	lsls	r1, r3, #31
 8004f90:	d405      	bmi.n	8004f9e <_vfiprintf_r+0x1fe>
 8004f92:	89ab      	ldrh	r3, [r5, #12]
 8004f94:	059a      	lsls	r2, r3, #22
 8004f96:	d402      	bmi.n	8004f9e <_vfiprintf_r+0x1fe>
 8004f98:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004f9a:	f7ff fde1 	bl	8004b60 <__retarget_lock_release_recursive>
 8004f9e:	89ab      	ldrh	r3, [r5, #12]
 8004fa0:	065b      	lsls	r3, r3, #25
 8004fa2:	f53f af1f 	bmi.w	8004de4 <_vfiprintf_r+0x44>
 8004fa6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004fa8:	e71e      	b.n	8004de8 <_vfiprintf_r+0x48>
 8004faa:	ab03      	add	r3, sp, #12
 8004fac:	9300      	str	r3, [sp, #0]
 8004fae:	462a      	mov	r2, r5
 8004fb0:	4630      	mov	r0, r6
 8004fb2:	4b06      	ldr	r3, [pc, #24]	@ (8004fcc <_vfiprintf_r+0x22c>)
 8004fb4:	a904      	add	r1, sp, #16
 8004fb6:	f000 f87d 	bl	80050b4 <_printf_i>
 8004fba:	e7e4      	b.n	8004f86 <_vfiprintf_r+0x1e6>
 8004fbc:	080057b6 	.word	0x080057b6
 8004fc0:	080057bc 	.word	0x080057bc
 8004fc4:	080057c0 	.word	0x080057c0
 8004fc8:	00000000 	.word	0x00000000
 8004fcc:	08004d7b 	.word	0x08004d7b

08004fd0 <_printf_common>:
 8004fd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004fd4:	4616      	mov	r6, r2
 8004fd6:	4698      	mov	r8, r3
 8004fd8:	688a      	ldr	r2, [r1, #8]
 8004fda:	690b      	ldr	r3, [r1, #16]
 8004fdc:	4607      	mov	r7, r0
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	bfb8      	it	lt
 8004fe2:	4613      	movlt	r3, r2
 8004fe4:	6033      	str	r3, [r6, #0]
 8004fe6:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004fea:	460c      	mov	r4, r1
 8004fec:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004ff0:	b10a      	cbz	r2, 8004ff6 <_printf_common+0x26>
 8004ff2:	3301      	adds	r3, #1
 8004ff4:	6033      	str	r3, [r6, #0]
 8004ff6:	6823      	ldr	r3, [r4, #0]
 8004ff8:	0699      	lsls	r1, r3, #26
 8004ffa:	bf42      	ittt	mi
 8004ffc:	6833      	ldrmi	r3, [r6, #0]
 8004ffe:	3302      	addmi	r3, #2
 8005000:	6033      	strmi	r3, [r6, #0]
 8005002:	6825      	ldr	r5, [r4, #0]
 8005004:	f015 0506 	ands.w	r5, r5, #6
 8005008:	d106      	bne.n	8005018 <_printf_common+0x48>
 800500a:	f104 0a19 	add.w	sl, r4, #25
 800500e:	68e3      	ldr	r3, [r4, #12]
 8005010:	6832      	ldr	r2, [r6, #0]
 8005012:	1a9b      	subs	r3, r3, r2
 8005014:	42ab      	cmp	r3, r5
 8005016:	dc2b      	bgt.n	8005070 <_printf_common+0xa0>
 8005018:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800501c:	6822      	ldr	r2, [r4, #0]
 800501e:	3b00      	subs	r3, #0
 8005020:	bf18      	it	ne
 8005022:	2301      	movne	r3, #1
 8005024:	0692      	lsls	r2, r2, #26
 8005026:	d430      	bmi.n	800508a <_printf_common+0xba>
 8005028:	4641      	mov	r1, r8
 800502a:	4638      	mov	r0, r7
 800502c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005030:	47c8      	blx	r9
 8005032:	3001      	adds	r0, #1
 8005034:	d023      	beq.n	800507e <_printf_common+0xae>
 8005036:	6823      	ldr	r3, [r4, #0]
 8005038:	6922      	ldr	r2, [r4, #16]
 800503a:	f003 0306 	and.w	r3, r3, #6
 800503e:	2b04      	cmp	r3, #4
 8005040:	bf14      	ite	ne
 8005042:	2500      	movne	r5, #0
 8005044:	6833      	ldreq	r3, [r6, #0]
 8005046:	f04f 0600 	mov.w	r6, #0
 800504a:	bf08      	it	eq
 800504c:	68e5      	ldreq	r5, [r4, #12]
 800504e:	f104 041a 	add.w	r4, r4, #26
 8005052:	bf08      	it	eq
 8005054:	1aed      	subeq	r5, r5, r3
 8005056:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800505a:	bf08      	it	eq
 800505c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005060:	4293      	cmp	r3, r2
 8005062:	bfc4      	itt	gt
 8005064:	1a9b      	subgt	r3, r3, r2
 8005066:	18ed      	addgt	r5, r5, r3
 8005068:	42b5      	cmp	r5, r6
 800506a:	d11a      	bne.n	80050a2 <_printf_common+0xd2>
 800506c:	2000      	movs	r0, #0
 800506e:	e008      	b.n	8005082 <_printf_common+0xb2>
 8005070:	2301      	movs	r3, #1
 8005072:	4652      	mov	r2, sl
 8005074:	4641      	mov	r1, r8
 8005076:	4638      	mov	r0, r7
 8005078:	47c8      	blx	r9
 800507a:	3001      	adds	r0, #1
 800507c:	d103      	bne.n	8005086 <_printf_common+0xb6>
 800507e:	f04f 30ff 	mov.w	r0, #4294967295
 8005082:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005086:	3501      	adds	r5, #1
 8005088:	e7c1      	b.n	800500e <_printf_common+0x3e>
 800508a:	2030      	movs	r0, #48	@ 0x30
 800508c:	18e1      	adds	r1, r4, r3
 800508e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005092:	1c5a      	adds	r2, r3, #1
 8005094:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005098:	4422      	add	r2, r4
 800509a:	3302      	adds	r3, #2
 800509c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80050a0:	e7c2      	b.n	8005028 <_printf_common+0x58>
 80050a2:	2301      	movs	r3, #1
 80050a4:	4622      	mov	r2, r4
 80050a6:	4641      	mov	r1, r8
 80050a8:	4638      	mov	r0, r7
 80050aa:	47c8      	blx	r9
 80050ac:	3001      	adds	r0, #1
 80050ae:	d0e6      	beq.n	800507e <_printf_common+0xae>
 80050b0:	3601      	adds	r6, #1
 80050b2:	e7d9      	b.n	8005068 <_printf_common+0x98>

080050b4 <_printf_i>:
 80050b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80050b8:	7e0f      	ldrb	r7, [r1, #24]
 80050ba:	4691      	mov	r9, r2
 80050bc:	2f78      	cmp	r7, #120	@ 0x78
 80050be:	4680      	mov	r8, r0
 80050c0:	460c      	mov	r4, r1
 80050c2:	469a      	mov	sl, r3
 80050c4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80050c6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80050ca:	d807      	bhi.n	80050dc <_printf_i+0x28>
 80050cc:	2f62      	cmp	r7, #98	@ 0x62
 80050ce:	d80a      	bhi.n	80050e6 <_printf_i+0x32>
 80050d0:	2f00      	cmp	r7, #0
 80050d2:	f000 80d3 	beq.w	800527c <_printf_i+0x1c8>
 80050d6:	2f58      	cmp	r7, #88	@ 0x58
 80050d8:	f000 80ba 	beq.w	8005250 <_printf_i+0x19c>
 80050dc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80050e0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80050e4:	e03a      	b.n	800515c <_printf_i+0xa8>
 80050e6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80050ea:	2b15      	cmp	r3, #21
 80050ec:	d8f6      	bhi.n	80050dc <_printf_i+0x28>
 80050ee:	a101      	add	r1, pc, #4	@ (adr r1, 80050f4 <_printf_i+0x40>)
 80050f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80050f4:	0800514d 	.word	0x0800514d
 80050f8:	08005161 	.word	0x08005161
 80050fc:	080050dd 	.word	0x080050dd
 8005100:	080050dd 	.word	0x080050dd
 8005104:	080050dd 	.word	0x080050dd
 8005108:	080050dd 	.word	0x080050dd
 800510c:	08005161 	.word	0x08005161
 8005110:	080050dd 	.word	0x080050dd
 8005114:	080050dd 	.word	0x080050dd
 8005118:	080050dd 	.word	0x080050dd
 800511c:	080050dd 	.word	0x080050dd
 8005120:	08005263 	.word	0x08005263
 8005124:	0800518b 	.word	0x0800518b
 8005128:	0800521d 	.word	0x0800521d
 800512c:	080050dd 	.word	0x080050dd
 8005130:	080050dd 	.word	0x080050dd
 8005134:	08005285 	.word	0x08005285
 8005138:	080050dd 	.word	0x080050dd
 800513c:	0800518b 	.word	0x0800518b
 8005140:	080050dd 	.word	0x080050dd
 8005144:	080050dd 	.word	0x080050dd
 8005148:	08005225 	.word	0x08005225
 800514c:	6833      	ldr	r3, [r6, #0]
 800514e:	1d1a      	adds	r2, r3, #4
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	6032      	str	r2, [r6, #0]
 8005154:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005158:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800515c:	2301      	movs	r3, #1
 800515e:	e09e      	b.n	800529e <_printf_i+0x1ea>
 8005160:	6833      	ldr	r3, [r6, #0]
 8005162:	6820      	ldr	r0, [r4, #0]
 8005164:	1d19      	adds	r1, r3, #4
 8005166:	6031      	str	r1, [r6, #0]
 8005168:	0606      	lsls	r6, r0, #24
 800516a:	d501      	bpl.n	8005170 <_printf_i+0xbc>
 800516c:	681d      	ldr	r5, [r3, #0]
 800516e:	e003      	b.n	8005178 <_printf_i+0xc4>
 8005170:	0645      	lsls	r5, r0, #25
 8005172:	d5fb      	bpl.n	800516c <_printf_i+0xb8>
 8005174:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005178:	2d00      	cmp	r5, #0
 800517a:	da03      	bge.n	8005184 <_printf_i+0xd0>
 800517c:	232d      	movs	r3, #45	@ 0x2d
 800517e:	426d      	negs	r5, r5
 8005180:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005184:	230a      	movs	r3, #10
 8005186:	4859      	ldr	r0, [pc, #356]	@ (80052ec <_printf_i+0x238>)
 8005188:	e011      	b.n	80051ae <_printf_i+0xfa>
 800518a:	6821      	ldr	r1, [r4, #0]
 800518c:	6833      	ldr	r3, [r6, #0]
 800518e:	0608      	lsls	r0, r1, #24
 8005190:	f853 5b04 	ldr.w	r5, [r3], #4
 8005194:	d402      	bmi.n	800519c <_printf_i+0xe8>
 8005196:	0649      	lsls	r1, r1, #25
 8005198:	bf48      	it	mi
 800519a:	b2ad      	uxthmi	r5, r5
 800519c:	2f6f      	cmp	r7, #111	@ 0x6f
 800519e:	6033      	str	r3, [r6, #0]
 80051a0:	bf14      	ite	ne
 80051a2:	230a      	movne	r3, #10
 80051a4:	2308      	moveq	r3, #8
 80051a6:	4851      	ldr	r0, [pc, #324]	@ (80052ec <_printf_i+0x238>)
 80051a8:	2100      	movs	r1, #0
 80051aa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80051ae:	6866      	ldr	r6, [r4, #4]
 80051b0:	2e00      	cmp	r6, #0
 80051b2:	bfa8      	it	ge
 80051b4:	6821      	ldrge	r1, [r4, #0]
 80051b6:	60a6      	str	r6, [r4, #8]
 80051b8:	bfa4      	itt	ge
 80051ba:	f021 0104 	bicge.w	r1, r1, #4
 80051be:	6021      	strge	r1, [r4, #0]
 80051c0:	b90d      	cbnz	r5, 80051c6 <_printf_i+0x112>
 80051c2:	2e00      	cmp	r6, #0
 80051c4:	d04b      	beq.n	800525e <_printf_i+0x1aa>
 80051c6:	4616      	mov	r6, r2
 80051c8:	fbb5 f1f3 	udiv	r1, r5, r3
 80051cc:	fb03 5711 	mls	r7, r3, r1, r5
 80051d0:	5dc7      	ldrb	r7, [r0, r7]
 80051d2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80051d6:	462f      	mov	r7, r5
 80051d8:	42bb      	cmp	r3, r7
 80051da:	460d      	mov	r5, r1
 80051dc:	d9f4      	bls.n	80051c8 <_printf_i+0x114>
 80051de:	2b08      	cmp	r3, #8
 80051e0:	d10b      	bne.n	80051fa <_printf_i+0x146>
 80051e2:	6823      	ldr	r3, [r4, #0]
 80051e4:	07df      	lsls	r7, r3, #31
 80051e6:	d508      	bpl.n	80051fa <_printf_i+0x146>
 80051e8:	6923      	ldr	r3, [r4, #16]
 80051ea:	6861      	ldr	r1, [r4, #4]
 80051ec:	4299      	cmp	r1, r3
 80051ee:	bfde      	ittt	le
 80051f0:	2330      	movle	r3, #48	@ 0x30
 80051f2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80051f6:	f106 36ff 	addle.w	r6, r6, #4294967295
 80051fa:	1b92      	subs	r2, r2, r6
 80051fc:	6122      	str	r2, [r4, #16]
 80051fe:	464b      	mov	r3, r9
 8005200:	4621      	mov	r1, r4
 8005202:	4640      	mov	r0, r8
 8005204:	f8cd a000 	str.w	sl, [sp]
 8005208:	aa03      	add	r2, sp, #12
 800520a:	f7ff fee1 	bl	8004fd0 <_printf_common>
 800520e:	3001      	adds	r0, #1
 8005210:	d14a      	bne.n	80052a8 <_printf_i+0x1f4>
 8005212:	f04f 30ff 	mov.w	r0, #4294967295
 8005216:	b004      	add	sp, #16
 8005218:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800521c:	6823      	ldr	r3, [r4, #0]
 800521e:	f043 0320 	orr.w	r3, r3, #32
 8005222:	6023      	str	r3, [r4, #0]
 8005224:	2778      	movs	r7, #120	@ 0x78
 8005226:	4832      	ldr	r0, [pc, #200]	@ (80052f0 <_printf_i+0x23c>)
 8005228:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800522c:	6823      	ldr	r3, [r4, #0]
 800522e:	6831      	ldr	r1, [r6, #0]
 8005230:	061f      	lsls	r7, r3, #24
 8005232:	f851 5b04 	ldr.w	r5, [r1], #4
 8005236:	d402      	bmi.n	800523e <_printf_i+0x18a>
 8005238:	065f      	lsls	r7, r3, #25
 800523a:	bf48      	it	mi
 800523c:	b2ad      	uxthmi	r5, r5
 800523e:	6031      	str	r1, [r6, #0]
 8005240:	07d9      	lsls	r1, r3, #31
 8005242:	bf44      	itt	mi
 8005244:	f043 0320 	orrmi.w	r3, r3, #32
 8005248:	6023      	strmi	r3, [r4, #0]
 800524a:	b11d      	cbz	r5, 8005254 <_printf_i+0x1a0>
 800524c:	2310      	movs	r3, #16
 800524e:	e7ab      	b.n	80051a8 <_printf_i+0xf4>
 8005250:	4826      	ldr	r0, [pc, #152]	@ (80052ec <_printf_i+0x238>)
 8005252:	e7e9      	b.n	8005228 <_printf_i+0x174>
 8005254:	6823      	ldr	r3, [r4, #0]
 8005256:	f023 0320 	bic.w	r3, r3, #32
 800525a:	6023      	str	r3, [r4, #0]
 800525c:	e7f6      	b.n	800524c <_printf_i+0x198>
 800525e:	4616      	mov	r6, r2
 8005260:	e7bd      	b.n	80051de <_printf_i+0x12a>
 8005262:	6833      	ldr	r3, [r6, #0]
 8005264:	6825      	ldr	r5, [r4, #0]
 8005266:	1d18      	adds	r0, r3, #4
 8005268:	6961      	ldr	r1, [r4, #20]
 800526a:	6030      	str	r0, [r6, #0]
 800526c:	062e      	lsls	r6, r5, #24
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	d501      	bpl.n	8005276 <_printf_i+0x1c2>
 8005272:	6019      	str	r1, [r3, #0]
 8005274:	e002      	b.n	800527c <_printf_i+0x1c8>
 8005276:	0668      	lsls	r0, r5, #25
 8005278:	d5fb      	bpl.n	8005272 <_printf_i+0x1be>
 800527a:	8019      	strh	r1, [r3, #0]
 800527c:	2300      	movs	r3, #0
 800527e:	4616      	mov	r6, r2
 8005280:	6123      	str	r3, [r4, #16]
 8005282:	e7bc      	b.n	80051fe <_printf_i+0x14a>
 8005284:	6833      	ldr	r3, [r6, #0]
 8005286:	2100      	movs	r1, #0
 8005288:	1d1a      	adds	r2, r3, #4
 800528a:	6032      	str	r2, [r6, #0]
 800528c:	681e      	ldr	r6, [r3, #0]
 800528e:	6862      	ldr	r2, [r4, #4]
 8005290:	4630      	mov	r0, r6
 8005292:	f000 f99f 	bl	80055d4 <memchr>
 8005296:	b108      	cbz	r0, 800529c <_printf_i+0x1e8>
 8005298:	1b80      	subs	r0, r0, r6
 800529a:	6060      	str	r0, [r4, #4]
 800529c:	6863      	ldr	r3, [r4, #4]
 800529e:	6123      	str	r3, [r4, #16]
 80052a0:	2300      	movs	r3, #0
 80052a2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80052a6:	e7aa      	b.n	80051fe <_printf_i+0x14a>
 80052a8:	4632      	mov	r2, r6
 80052aa:	4649      	mov	r1, r9
 80052ac:	4640      	mov	r0, r8
 80052ae:	6923      	ldr	r3, [r4, #16]
 80052b0:	47d0      	blx	sl
 80052b2:	3001      	adds	r0, #1
 80052b4:	d0ad      	beq.n	8005212 <_printf_i+0x15e>
 80052b6:	6823      	ldr	r3, [r4, #0]
 80052b8:	079b      	lsls	r3, r3, #30
 80052ba:	d413      	bmi.n	80052e4 <_printf_i+0x230>
 80052bc:	68e0      	ldr	r0, [r4, #12]
 80052be:	9b03      	ldr	r3, [sp, #12]
 80052c0:	4298      	cmp	r0, r3
 80052c2:	bfb8      	it	lt
 80052c4:	4618      	movlt	r0, r3
 80052c6:	e7a6      	b.n	8005216 <_printf_i+0x162>
 80052c8:	2301      	movs	r3, #1
 80052ca:	4632      	mov	r2, r6
 80052cc:	4649      	mov	r1, r9
 80052ce:	4640      	mov	r0, r8
 80052d0:	47d0      	blx	sl
 80052d2:	3001      	adds	r0, #1
 80052d4:	d09d      	beq.n	8005212 <_printf_i+0x15e>
 80052d6:	3501      	adds	r5, #1
 80052d8:	68e3      	ldr	r3, [r4, #12]
 80052da:	9903      	ldr	r1, [sp, #12]
 80052dc:	1a5b      	subs	r3, r3, r1
 80052de:	42ab      	cmp	r3, r5
 80052e0:	dcf2      	bgt.n	80052c8 <_printf_i+0x214>
 80052e2:	e7eb      	b.n	80052bc <_printf_i+0x208>
 80052e4:	2500      	movs	r5, #0
 80052e6:	f104 0619 	add.w	r6, r4, #25
 80052ea:	e7f5      	b.n	80052d8 <_printf_i+0x224>
 80052ec:	080057c7 	.word	0x080057c7
 80052f0:	080057d8 	.word	0x080057d8

080052f4 <__sflush_r>:
 80052f4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80052f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052fa:	0716      	lsls	r6, r2, #28
 80052fc:	4605      	mov	r5, r0
 80052fe:	460c      	mov	r4, r1
 8005300:	d454      	bmi.n	80053ac <__sflush_r+0xb8>
 8005302:	684b      	ldr	r3, [r1, #4]
 8005304:	2b00      	cmp	r3, #0
 8005306:	dc02      	bgt.n	800530e <__sflush_r+0x1a>
 8005308:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800530a:	2b00      	cmp	r3, #0
 800530c:	dd48      	ble.n	80053a0 <__sflush_r+0xac>
 800530e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005310:	2e00      	cmp	r6, #0
 8005312:	d045      	beq.n	80053a0 <__sflush_r+0xac>
 8005314:	2300      	movs	r3, #0
 8005316:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800531a:	682f      	ldr	r7, [r5, #0]
 800531c:	6a21      	ldr	r1, [r4, #32]
 800531e:	602b      	str	r3, [r5, #0]
 8005320:	d030      	beq.n	8005384 <__sflush_r+0x90>
 8005322:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005324:	89a3      	ldrh	r3, [r4, #12]
 8005326:	0759      	lsls	r1, r3, #29
 8005328:	d505      	bpl.n	8005336 <__sflush_r+0x42>
 800532a:	6863      	ldr	r3, [r4, #4]
 800532c:	1ad2      	subs	r2, r2, r3
 800532e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005330:	b10b      	cbz	r3, 8005336 <__sflush_r+0x42>
 8005332:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005334:	1ad2      	subs	r2, r2, r3
 8005336:	2300      	movs	r3, #0
 8005338:	4628      	mov	r0, r5
 800533a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800533c:	6a21      	ldr	r1, [r4, #32]
 800533e:	47b0      	blx	r6
 8005340:	1c43      	adds	r3, r0, #1
 8005342:	89a3      	ldrh	r3, [r4, #12]
 8005344:	d106      	bne.n	8005354 <__sflush_r+0x60>
 8005346:	6829      	ldr	r1, [r5, #0]
 8005348:	291d      	cmp	r1, #29
 800534a:	d82b      	bhi.n	80053a4 <__sflush_r+0xb0>
 800534c:	4a28      	ldr	r2, [pc, #160]	@ (80053f0 <__sflush_r+0xfc>)
 800534e:	410a      	asrs	r2, r1
 8005350:	07d6      	lsls	r6, r2, #31
 8005352:	d427      	bmi.n	80053a4 <__sflush_r+0xb0>
 8005354:	2200      	movs	r2, #0
 8005356:	6062      	str	r2, [r4, #4]
 8005358:	6922      	ldr	r2, [r4, #16]
 800535a:	04d9      	lsls	r1, r3, #19
 800535c:	6022      	str	r2, [r4, #0]
 800535e:	d504      	bpl.n	800536a <__sflush_r+0x76>
 8005360:	1c42      	adds	r2, r0, #1
 8005362:	d101      	bne.n	8005368 <__sflush_r+0x74>
 8005364:	682b      	ldr	r3, [r5, #0]
 8005366:	b903      	cbnz	r3, 800536a <__sflush_r+0x76>
 8005368:	6560      	str	r0, [r4, #84]	@ 0x54
 800536a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800536c:	602f      	str	r7, [r5, #0]
 800536e:	b1b9      	cbz	r1, 80053a0 <__sflush_r+0xac>
 8005370:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005374:	4299      	cmp	r1, r3
 8005376:	d002      	beq.n	800537e <__sflush_r+0x8a>
 8005378:	4628      	mov	r0, r5
 800537a:	f7ff fbf3 	bl	8004b64 <_free_r>
 800537e:	2300      	movs	r3, #0
 8005380:	6363      	str	r3, [r4, #52]	@ 0x34
 8005382:	e00d      	b.n	80053a0 <__sflush_r+0xac>
 8005384:	2301      	movs	r3, #1
 8005386:	4628      	mov	r0, r5
 8005388:	47b0      	blx	r6
 800538a:	4602      	mov	r2, r0
 800538c:	1c50      	adds	r0, r2, #1
 800538e:	d1c9      	bne.n	8005324 <__sflush_r+0x30>
 8005390:	682b      	ldr	r3, [r5, #0]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d0c6      	beq.n	8005324 <__sflush_r+0x30>
 8005396:	2b1d      	cmp	r3, #29
 8005398:	d001      	beq.n	800539e <__sflush_r+0xaa>
 800539a:	2b16      	cmp	r3, #22
 800539c:	d11d      	bne.n	80053da <__sflush_r+0xe6>
 800539e:	602f      	str	r7, [r5, #0]
 80053a0:	2000      	movs	r0, #0
 80053a2:	e021      	b.n	80053e8 <__sflush_r+0xf4>
 80053a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80053a8:	b21b      	sxth	r3, r3
 80053aa:	e01a      	b.n	80053e2 <__sflush_r+0xee>
 80053ac:	690f      	ldr	r7, [r1, #16]
 80053ae:	2f00      	cmp	r7, #0
 80053b0:	d0f6      	beq.n	80053a0 <__sflush_r+0xac>
 80053b2:	0793      	lsls	r3, r2, #30
 80053b4:	bf18      	it	ne
 80053b6:	2300      	movne	r3, #0
 80053b8:	680e      	ldr	r6, [r1, #0]
 80053ba:	bf08      	it	eq
 80053bc:	694b      	ldreq	r3, [r1, #20]
 80053be:	1bf6      	subs	r6, r6, r7
 80053c0:	600f      	str	r7, [r1, #0]
 80053c2:	608b      	str	r3, [r1, #8]
 80053c4:	2e00      	cmp	r6, #0
 80053c6:	ddeb      	ble.n	80053a0 <__sflush_r+0xac>
 80053c8:	4633      	mov	r3, r6
 80053ca:	463a      	mov	r2, r7
 80053cc:	4628      	mov	r0, r5
 80053ce:	6a21      	ldr	r1, [r4, #32]
 80053d0:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 80053d4:	47e0      	blx	ip
 80053d6:	2800      	cmp	r0, #0
 80053d8:	dc07      	bgt.n	80053ea <__sflush_r+0xf6>
 80053da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80053de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80053e2:	f04f 30ff 	mov.w	r0, #4294967295
 80053e6:	81a3      	strh	r3, [r4, #12]
 80053e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80053ea:	4407      	add	r7, r0
 80053ec:	1a36      	subs	r6, r6, r0
 80053ee:	e7e9      	b.n	80053c4 <__sflush_r+0xd0>
 80053f0:	dfbffffe 	.word	0xdfbffffe

080053f4 <_fflush_r>:
 80053f4:	b538      	push	{r3, r4, r5, lr}
 80053f6:	690b      	ldr	r3, [r1, #16]
 80053f8:	4605      	mov	r5, r0
 80053fa:	460c      	mov	r4, r1
 80053fc:	b913      	cbnz	r3, 8005404 <_fflush_r+0x10>
 80053fe:	2500      	movs	r5, #0
 8005400:	4628      	mov	r0, r5
 8005402:	bd38      	pop	{r3, r4, r5, pc}
 8005404:	b118      	cbz	r0, 800540e <_fflush_r+0x1a>
 8005406:	6a03      	ldr	r3, [r0, #32]
 8005408:	b90b      	cbnz	r3, 800540e <_fflush_r+0x1a>
 800540a:	f7ff f9a9 	bl	8004760 <__sinit>
 800540e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d0f3      	beq.n	80053fe <_fflush_r+0xa>
 8005416:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005418:	07d0      	lsls	r0, r2, #31
 800541a:	d404      	bmi.n	8005426 <_fflush_r+0x32>
 800541c:	0599      	lsls	r1, r3, #22
 800541e:	d402      	bmi.n	8005426 <_fflush_r+0x32>
 8005420:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005422:	f7ff fb9c 	bl	8004b5e <__retarget_lock_acquire_recursive>
 8005426:	4628      	mov	r0, r5
 8005428:	4621      	mov	r1, r4
 800542a:	f7ff ff63 	bl	80052f4 <__sflush_r>
 800542e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005430:	4605      	mov	r5, r0
 8005432:	07da      	lsls	r2, r3, #31
 8005434:	d4e4      	bmi.n	8005400 <_fflush_r+0xc>
 8005436:	89a3      	ldrh	r3, [r4, #12]
 8005438:	059b      	lsls	r3, r3, #22
 800543a:	d4e1      	bmi.n	8005400 <_fflush_r+0xc>
 800543c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800543e:	f7ff fb8f 	bl	8004b60 <__retarget_lock_release_recursive>
 8005442:	e7dd      	b.n	8005400 <_fflush_r+0xc>

08005444 <__swhatbuf_r>:
 8005444:	b570      	push	{r4, r5, r6, lr}
 8005446:	460c      	mov	r4, r1
 8005448:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800544c:	4615      	mov	r5, r2
 800544e:	2900      	cmp	r1, #0
 8005450:	461e      	mov	r6, r3
 8005452:	b096      	sub	sp, #88	@ 0x58
 8005454:	da0c      	bge.n	8005470 <__swhatbuf_r+0x2c>
 8005456:	89a3      	ldrh	r3, [r4, #12]
 8005458:	2100      	movs	r1, #0
 800545a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800545e:	bf14      	ite	ne
 8005460:	2340      	movne	r3, #64	@ 0x40
 8005462:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005466:	2000      	movs	r0, #0
 8005468:	6031      	str	r1, [r6, #0]
 800546a:	602b      	str	r3, [r5, #0]
 800546c:	b016      	add	sp, #88	@ 0x58
 800546e:	bd70      	pop	{r4, r5, r6, pc}
 8005470:	466a      	mov	r2, sp
 8005472:	f000 f87d 	bl	8005570 <_fstat_r>
 8005476:	2800      	cmp	r0, #0
 8005478:	dbed      	blt.n	8005456 <__swhatbuf_r+0x12>
 800547a:	9901      	ldr	r1, [sp, #4]
 800547c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005480:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005484:	4259      	negs	r1, r3
 8005486:	4159      	adcs	r1, r3
 8005488:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800548c:	e7eb      	b.n	8005466 <__swhatbuf_r+0x22>

0800548e <__smakebuf_r>:
 800548e:	898b      	ldrh	r3, [r1, #12]
 8005490:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005492:	079d      	lsls	r5, r3, #30
 8005494:	4606      	mov	r6, r0
 8005496:	460c      	mov	r4, r1
 8005498:	d507      	bpl.n	80054aa <__smakebuf_r+0x1c>
 800549a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800549e:	6023      	str	r3, [r4, #0]
 80054a0:	6123      	str	r3, [r4, #16]
 80054a2:	2301      	movs	r3, #1
 80054a4:	6163      	str	r3, [r4, #20]
 80054a6:	b003      	add	sp, #12
 80054a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80054aa:	466a      	mov	r2, sp
 80054ac:	ab01      	add	r3, sp, #4
 80054ae:	f7ff ffc9 	bl	8005444 <__swhatbuf_r>
 80054b2:	9f00      	ldr	r7, [sp, #0]
 80054b4:	4605      	mov	r5, r0
 80054b6:	4639      	mov	r1, r7
 80054b8:	4630      	mov	r0, r6
 80054ba:	f7ff fbbd 	bl	8004c38 <_malloc_r>
 80054be:	b948      	cbnz	r0, 80054d4 <__smakebuf_r+0x46>
 80054c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80054c4:	059a      	lsls	r2, r3, #22
 80054c6:	d4ee      	bmi.n	80054a6 <__smakebuf_r+0x18>
 80054c8:	f023 0303 	bic.w	r3, r3, #3
 80054cc:	f043 0302 	orr.w	r3, r3, #2
 80054d0:	81a3      	strh	r3, [r4, #12]
 80054d2:	e7e2      	b.n	800549a <__smakebuf_r+0xc>
 80054d4:	89a3      	ldrh	r3, [r4, #12]
 80054d6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80054da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80054de:	81a3      	strh	r3, [r4, #12]
 80054e0:	9b01      	ldr	r3, [sp, #4]
 80054e2:	6020      	str	r0, [r4, #0]
 80054e4:	b15b      	cbz	r3, 80054fe <__smakebuf_r+0x70>
 80054e6:	4630      	mov	r0, r6
 80054e8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80054ec:	f000 f852 	bl	8005594 <_isatty_r>
 80054f0:	b128      	cbz	r0, 80054fe <__smakebuf_r+0x70>
 80054f2:	89a3      	ldrh	r3, [r4, #12]
 80054f4:	f023 0303 	bic.w	r3, r3, #3
 80054f8:	f043 0301 	orr.w	r3, r3, #1
 80054fc:	81a3      	strh	r3, [r4, #12]
 80054fe:	89a3      	ldrh	r3, [r4, #12]
 8005500:	431d      	orrs	r5, r3
 8005502:	81a5      	strh	r5, [r4, #12]
 8005504:	e7cf      	b.n	80054a6 <__smakebuf_r+0x18>

08005506 <_putc_r>:
 8005506:	b570      	push	{r4, r5, r6, lr}
 8005508:	460d      	mov	r5, r1
 800550a:	4614      	mov	r4, r2
 800550c:	4606      	mov	r6, r0
 800550e:	b118      	cbz	r0, 8005518 <_putc_r+0x12>
 8005510:	6a03      	ldr	r3, [r0, #32]
 8005512:	b90b      	cbnz	r3, 8005518 <_putc_r+0x12>
 8005514:	f7ff f924 	bl	8004760 <__sinit>
 8005518:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800551a:	07d8      	lsls	r0, r3, #31
 800551c:	d405      	bmi.n	800552a <_putc_r+0x24>
 800551e:	89a3      	ldrh	r3, [r4, #12]
 8005520:	0599      	lsls	r1, r3, #22
 8005522:	d402      	bmi.n	800552a <_putc_r+0x24>
 8005524:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005526:	f7ff fb1a 	bl	8004b5e <__retarget_lock_acquire_recursive>
 800552a:	68a3      	ldr	r3, [r4, #8]
 800552c:	3b01      	subs	r3, #1
 800552e:	2b00      	cmp	r3, #0
 8005530:	60a3      	str	r3, [r4, #8]
 8005532:	da05      	bge.n	8005540 <_putc_r+0x3a>
 8005534:	69a2      	ldr	r2, [r4, #24]
 8005536:	4293      	cmp	r3, r2
 8005538:	db12      	blt.n	8005560 <_putc_r+0x5a>
 800553a:	b2eb      	uxtb	r3, r5
 800553c:	2b0a      	cmp	r3, #10
 800553e:	d00f      	beq.n	8005560 <_putc_r+0x5a>
 8005540:	6823      	ldr	r3, [r4, #0]
 8005542:	1c5a      	adds	r2, r3, #1
 8005544:	6022      	str	r2, [r4, #0]
 8005546:	701d      	strb	r5, [r3, #0]
 8005548:	b2ed      	uxtb	r5, r5
 800554a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800554c:	07da      	lsls	r2, r3, #31
 800554e:	d405      	bmi.n	800555c <_putc_r+0x56>
 8005550:	89a3      	ldrh	r3, [r4, #12]
 8005552:	059b      	lsls	r3, r3, #22
 8005554:	d402      	bmi.n	800555c <_putc_r+0x56>
 8005556:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005558:	f7ff fb02 	bl	8004b60 <__retarget_lock_release_recursive>
 800555c:	4628      	mov	r0, r5
 800555e:	bd70      	pop	{r4, r5, r6, pc}
 8005560:	4629      	mov	r1, r5
 8005562:	4622      	mov	r2, r4
 8005564:	4630      	mov	r0, r6
 8005566:	f7ff f9ec 	bl	8004942 <__swbuf_r>
 800556a:	4605      	mov	r5, r0
 800556c:	e7ed      	b.n	800554a <_putc_r+0x44>
	...

08005570 <_fstat_r>:
 8005570:	b538      	push	{r3, r4, r5, lr}
 8005572:	2300      	movs	r3, #0
 8005574:	4d06      	ldr	r5, [pc, #24]	@ (8005590 <_fstat_r+0x20>)
 8005576:	4604      	mov	r4, r0
 8005578:	4608      	mov	r0, r1
 800557a:	4611      	mov	r1, r2
 800557c:	602b      	str	r3, [r5, #0]
 800557e:	f7fb fb03 	bl	8000b88 <_fstat>
 8005582:	1c43      	adds	r3, r0, #1
 8005584:	d102      	bne.n	800558c <_fstat_r+0x1c>
 8005586:	682b      	ldr	r3, [r5, #0]
 8005588:	b103      	cbz	r3, 800558c <_fstat_r+0x1c>
 800558a:	6023      	str	r3, [r4, #0]
 800558c:	bd38      	pop	{r3, r4, r5, pc}
 800558e:	bf00      	nop
 8005590:	200003c4 	.word	0x200003c4

08005594 <_isatty_r>:
 8005594:	b538      	push	{r3, r4, r5, lr}
 8005596:	2300      	movs	r3, #0
 8005598:	4d05      	ldr	r5, [pc, #20]	@ (80055b0 <_isatty_r+0x1c>)
 800559a:	4604      	mov	r4, r0
 800559c:	4608      	mov	r0, r1
 800559e:	602b      	str	r3, [r5, #0]
 80055a0:	f7fb fb01 	bl	8000ba6 <_isatty>
 80055a4:	1c43      	adds	r3, r0, #1
 80055a6:	d102      	bne.n	80055ae <_isatty_r+0x1a>
 80055a8:	682b      	ldr	r3, [r5, #0]
 80055aa:	b103      	cbz	r3, 80055ae <_isatty_r+0x1a>
 80055ac:	6023      	str	r3, [r4, #0]
 80055ae:	bd38      	pop	{r3, r4, r5, pc}
 80055b0:	200003c4 	.word	0x200003c4

080055b4 <_sbrk_r>:
 80055b4:	b538      	push	{r3, r4, r5, lr}
 80055b6:	2300      	movs	r3, #0
 80055b8:	4d05      	ldr	r5, [pc, #20]	@ (80055d0 <_sbrk_r+0x1c>)
 80055ba:	4604      	mov	r4, r0
 80055bc:	4608      	mov	r0, r1
 80055be:	602b      	str	r3, [r5, #0]
 80055c0:	f7fb fb08 	bl	8000bd4 <_sbrk>
 80055c4:	1c43      	adds	r3, r0, #1
 80055c6:	d102      	bne.n	80055ce <_sbrk_r+0x1a>
 80055c8:	682b      	ldr	r3, [r5, #0]
 80055ca:	b103      	cbz	r3, 80055ce <_sbrk_r+0x1a>
 80055cc:	6023      	str	r3, [r4, #0]
 80055ce:	bd38      	pop	{r3, r4, r5, pc}
 80055d0:	200003c4 	.word	0x200003c4

080055d4 <memchr>:
 80055d4:	4603      	mov	r3, r0
 80055d6:	b510      	push	{r4, lr}
 80055d8:	b2c9      	uxtb	r1, r1
 80055da:	4402      	add	r2, r0
 80055dc:	4293      	cmp	r3, r2
 80055de:	4618      	mov	r0, r3
 80055e0:	d101      	bne.n	80055e6 <memchr+0x12>
 80055e2:	2000      	movs	r0, #0
 80055e4:	e003      	b.n	80055ee <memchr+0x1a>
 80055e6:	7804      	ldrb	r4, [r0, #0]
 80055e8:	3301      	adds	r3, #1
 80055ea:	428c      	cmp	r4, r1
 80055ec:	d1f6      	bne.n	80055dc <memchr+0x8>
 80055ee:	bd10      	pop	{r4, pc}

080055f0 <_init>:
 80055f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055f2:	bf00      	nop
 80055f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055f6:	bc08      	pop	{r3}
 80055f8:	469e      	mov	lr, r3
 80055fa:	4770      	bx	lr

080055fc <_fini>:
 80055fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055fe:	bf00      	nop
 8005600:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005602:	bc08      	pop	{r3}
 8005604:	469e      	mov	lr, r3
 8005606:	4770      	bx	lr
