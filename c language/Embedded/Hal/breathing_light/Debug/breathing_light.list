
breathing_light.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ac0  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000200  08003bd0  08003bd0  00004bd0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003dd0  08003dd0  0000500c  2**0
                  CONTENTS
  4 .ARM          00000000  08003dd0  08003dd0  0000500c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003dd0  08003dd0  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003dd0  08003dd0  00004dd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003dd4  08003dd4  00004dd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003dd8  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000068  2000000c  08003de4  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000074  08003de4  00005074  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007681  00000000  00000000  00005035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000149a  00000000  00000000  0000c6b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000928  00000000  00000000  0000db50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000711  00000000  00000000  0000e478  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016fbc  00000000  00000000  0000eb89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009c01  00000000  00000000  00025b45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00087a2c  00000000  00000000  0002f746  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b7172  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000029e8  00000000  00000000  000b71b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  000b9ba0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000000c 	.word	0x2000000c
 800012c:	00000000 	.word	0x00000000
 8000130:	08003bb8 	.word	0x08003bb8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000010 	.word	0x20000010
 800014c:	08003bb8 	.word	0x08003bb8

08000150 <__aeabi_dmul>:
 8000150:	b570      	push	{r4, r5, r6, lr}
 8000152:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000156:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800015a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800015e:	bf1d      	ittte	ne
 8000160:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000164:	ea94 0f0c 	teqne	r4, ip
 8000168:	ea95 0f0c 	teqne	r5, ip
 800016c:	f000 f8de 	bleq	800032c <__aeabi_dmul+0x1dc>
 8000170:	442c      	add	r4, r5
 8000172:	ea81 0603 	eor.w	r6, r1, r3
 8000176:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800017a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800017e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000182:	bf18      	it	ne
 8000184:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000188:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800018c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000190:	d038      	beq.n	8000204 <__aeabi_dmul+0xb4>
 8000192:	fba0 ce02 	umull	ip, lr, r0, r2
 8000196:	f04f 0500 	mov.w	r5, #0
 800019a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800019e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80001a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001a6:	f04f 0600 	mov.w	r6, #0
 80001aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80001ae:	f09c 0f00 	teq	ip, #0
 80001b2:	bf18      	it	ne
 80001b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80001b8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80001bc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80001c0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80001c4:	d204      	bcs.n	80001d0 <__aeabi_dmul+0x80>
 80001c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80001ca:	416d      	adcs	r5, r5
 80001cc:	eb46 0606 	adc.w	r6, r6, r6
 80001d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80001d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80001d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80001dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80001e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80001e4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80001e8:	bf88      	it	hi
 80001ea:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80001ee:	d81e      	bhi.n	800022e <__aeabi_dmul+0xde>
 80001f0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80001f4:	bf08      	it	eq
 80001f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80001fa:	f150 0000 	adcs.w	r0, r0, #0
 80001fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000202:	bd70      	pop	{r4, r5, r6, pc}
 8000204:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000208:	ea46 0101 	orr.w	r1, r6, r1
 800020c:	ea40 0002 	orr.w	r0, r0, r2
 8000210:	ea81 0103 	eor.w	r1, r1, r3
 8000214:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000218:	bfc2      	ittt	gt
 800021a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800021e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000222:	bd70      	popgt	{r4, r5, r6, pc}
 8000224:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000228:	f04f 0e00 	mov.w	lr, #0
 800022c:	3c01      	subs	r4, #1
 800022e:	f300 80ab 	bgt.w	8000388 <__aeabi_dmul+0x238>
 8000232:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000236:	bfde      	ittt	le
 8000238:	2000      	movle	r0, #0
 800023a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800023e:	bd70      	pople	{r4, r5, r6, pc}
 8000240:	f1c4 0400 	rsb	r4, r4, #0
 8000244:	3c20      	subs	r4, #32
 8000246:	da35      	bge.n	80002b4 <__aeabi_dmul+0x164>
 8000248:	340c      	adds	r4, #12
 800024a:	dc1b      	bgt.n	8000284 <__aeabi_dmul+0x134>
 800024c:	f104 0414 	add.w	r4, r4, #20
 8000250:	f1c4 0520 	rsb	r5, r4, #32
 8000254:	fa00 f305 	lsl.w	r3, r0, r5
 8000258:	fa20 f004 	lsr.w	r0, r0, r4
 800025c:	fa01 f205 	lsl.w	r2, r1, r5
 8000260:	ea40 0002 	orr.w	r0, r0, r2
 8000264:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000268:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800026c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000270:	fa21 f604 	lsr.w	r6, r1, r4
 8000274:	eb42 0106 	adc.w	r1, r2, r6
 8000278:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800027c:	bf08      	it	eq
 800027e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000282:	bd70      	pop	{r4, r5, r6, pc}
 8000284:	f1c4 040c 	rsb	r4, r4, #12
 8000288:	f1c4 0520 	rsb	r5, r4, #32
 800028c:	fa00 f304 	lsl.w	r3, r0, r4
 8000290:	fa20 f005 	lsr.w	r0, r0, r5
 8000294:	fa01 f204 	lsl.w	r2, r1, r4
 8000298:	ea40 0002 	orr.w	r0, r0, r2
 800029c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80002a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002a4:	f141 0100 	adc.w	r1, r1, #0
 80002a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002ac:	bf08      	it	eq
 80002ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002b2:	bd70      	pop	{r4, r5, r6, pc}
 80002b4:	f1c4 0520 	rsb	r5, r4, #32
 80002b8:	fa00 f205 	lsl.w	r2, r0, r5
 80002bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80002c0:	fa20 f304 	lsr.w	r3, r0, r4
 80002c4:	fa01 f205 	lsl.w	r2, r1, r5
 80002c8:	ea43 0302 	orr.w	r3, r3, r2
 80002cc:	fa21 f004 	lsr.w	r0, r1, r4
 80002d0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	fa21 f204 	lsr.w	r2, r1, r4
 80002d8:	ea20 0002 	bic.w	r0, r0, r2
 80002dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80002e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002e4:	bf08      	it	eq
 80002e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002ea:	bd70      	pop	{r4, r5, r6, pc}
 80002ec:	f094 0f00 	teq	r4, #0
 80002f0:	d10f      	bne.n	8000312 <__aeabi_dmul+0x1c2>
 80002f2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80002f6:	0040      	lsls	r0, r0, #1
 80002f8:	eb41 0101 	adc.w	r1, r1, r1
 80002fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000300:	bf08      	it	eq
 8000302:	3c01      	subeq	r4, #1
 8000304:	d0f7      	beq.n	80002f6 <__aeabi_dmul+0x1a6>
 8000306:	ea41 0106 	orr.w	r1, r1, r6
 800030a:	f095 0f00 	teq	r5, #0
 800030e:	bf18      	it	ne
 8000310:	4770      	bxne	lr
 8000312:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000316:	0052      	lsls	r2, r2, #1
 8000318:	eb43 0303 	adc.w	r3, r3, r3
 800031c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000320:	bf08      	it	eq
 8000322:	3d01      	subeq	r5, #1
 8000324:	d0f7      	beq.n	8000316 <__aeabi_dmul+0x1c6>
 8000326:	ea43 0306 	orr.w	r3, r3, r6
 800032a:	4770      	bx	lr
 800032c:	ea94 0f0c 	teq	r4, ip
 8000330:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000334:	bf18      	it	ne
 8000336:	ea95 0f0c 	teqne	r5, ip
 800033a:	d00c      	beq.n	8000356 <__aeabi_dmul+0x206>
 800033c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000340:	bf18      	it	ne
 8000342:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000346:	d1d1      	bne.n	80002ec <__aeabi_dmul+0x19c>
 8000348:	ea81 0103 	eor.w	r1, r1, r3
 800034c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000350:	f04f 0000 	mov.w	r0, #0
 8000354:	bd70      	pop	{r4, r5, r6, pc}
 8000356:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800035a:	bf06      	itte	eq
 800035c:	4610      	moveq	r0, r2
 800035e:	4619      	moveq	r1, r3
 8000360:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000364:	d019      	beq.n	800039a <__aeabi_dmul+0x24a>
 8000366:	ea94 0f0c 	teq	r4, ip
 800036a:	d102      	bne.n	8000372 <__aeabi_dmul+0x222>
 800036c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000370:	d113      	bne.n	800039a <__aeabi_dmul+0x24a>
 8000372:	ea95 0f0c 	teq	r5, ip
 8000376:	d105      	bne.n	8000384 <__aeabi_dmul+0x234>
 8000378:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800037c:	bf1c      	itt	ne
 800037e:	4610      	movne	r0, r2
 8000380:	4619      	movne	r1, r3
 8000382:	d10a      	bne.n	800039a <__aeabi_dmul+0x24a>
 8000384:	ea81 0103 	eor.w	r1, r1, r3
 8000388:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800038c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000390:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000394:	f04f 0000 	mov.w	r0, #0
 8000398:	bd70      	pop	{r4, r5, r6, pc}
 800039a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800039e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80003a2:	bd70      	pop	{r4, r5, r6, pc}

080003a4 <__aeabi_fmul>:
 80003a4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80003a8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80003ac:	bf1e      	ittt	ne
 80003ae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80003b2:	ea92 0f0c 	teqne	r2, ip
 80003b6:	ea93 0f0c 	teqne	r3, ip
 80003ba:	d06f      	beq.n	800049c <__aeabi_fmul+0xf8>
 80003bc:	441a      	add	r2, r3
 80003be:	ea80 0c01 	eor.w	ip, r0, r1
 80003c2:	0240      	lsls	r0, r0, #9
 80003c4:	bf18      	it	ne
 80003c6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80003ca:	d01e      	beq.n	800040a <__aeabi_fmul+0x66>
 80003cc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80003d0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80003d4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003d8:	fba0 3101 	umull	r3, r1, r0, r1
 80003dc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80003e0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80003e4:	bf3e      	ittt	cc
 80003e6:	0049      	lslcc	r1, r1, #1
 80003e8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003ec:	005b      	lslcc	r3, r3, #1
 80003ee:	ea40 0001 	orr.w	r0, r0, r1
 80003f2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80003f6:	2afd      	cmp	r2, #253	@ 0xfd
 80003f8:	d81d      	bhi.n	8000436 <__aeabi_fmul+0x92>
 80003fa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80003fe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000402:	bf08      	it	eq
 8000404:	f020 0001 	biceq.w	r0, r0, #1
 8000408:	4770      	bx	lr
 800040a:	f090 0f00 	teq	r0, #0
 800040e:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000412:	bf08      	it	eq
 8000414:	0249      	lsleq	r1, r1, #9
 8000416:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 800041a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 800041e:	3a7f      	subs	r2, #127	@ 0x7f
 8000420:	bfc2      	ittt	gt
 8000422:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000426:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800042a:	4770      	bxgt	lr
 800042c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000430:	f04f 0300 	mov.w	r3, #0
 8000434:	3a01      	subs	r2, #1
 8000436:	dc5d      	bgt.n	80004f4 <__aeabi_fmul+0x150>
 8000438:	f112 0f19 	cmn.w	r2, #25
 800043c:	bfdc      	itt	le
 800043e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000442:	4770      	bxle	lr
 8000444:	f1c2 0200 	rsb	r2, r2, #0
 8000448:	0041      	lsls	r1, r0, #1
 800044a:	fa21 f102 	lsr.w	r1, r1, r2
 800044e:	f1c2 0220 	rsb	r2, r2, #32
 8000452:	fa00 fc02 	lsl.w	ip, r0, r2
 8000456:	ea5f 0031 	movs.w	r0, r1, rrx
 800045a:	f140 0000 	adc.w	r0, r0, #0
 800045e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000462:	bf08      	it	eq
 8000464:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000468:	4770      	bx	lr
 800046a:	f092 0f00 	teq	r2, #0
 800046e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000472:	bf02      	ittt	eq
 8000474:	0040      	lsleq	r0, r0, #1
 8000476:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800047a:	3a01      	subeq	r2, #1
 800047c:	d0f9      	beq.n	8000472 <__aeabi_fmul+0xce>
 800047e:	ea40 000c 	orr.w	r0, r0, ip
 8000482:	f093 0f00 	teq	r3, #0
 8000486:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 800048a:	bf02      	ittt	eq
 800048c:	0049      	lsleq	r1, r1, #1
 800048e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000492:	3b01      	subeq	r3, #1
 8000494:	d0f9      	beq.n	800048a <__aeabi_fmul+0xe6>
 8000496:	ea41 010c 	orr.w	r1, r1, ip
 800049a:	e78f      	b.n	80003bc <__aeabi_fmul+0x18>
 800049c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80004a0:	ea92 0f0c 	teq	r2, ip
 80004a4:	bf18      	it	ne
 80004a6:	ea93 0f0c 	teqne	r3, ip
 80004aa:	d00a      	beq.n	80004c2 <__aeabi_fmul+0x11e>
 80004ac:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 80004b0:	bf18      	it	ne
 80004b2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 80004b6:	d1d8      	bne.n	800046a <__aeabi_fmul+0xc6>
 80004b8:	ea80 0001 	eor.w	r0, r0, r1
 80004bc:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80004c0:	4770      	bx	lr
 80004c2:	f090 0f00 	teq	r0, #0
 80004c6:	bf17      	itett	ne
 80004c8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 80004cc:	4608      	moveq	r0, r1
 80004ce:	f091 0f00 	teqne	r1, #0
 80004d2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 80004d6:	d014      	beq.n	8000502 <__aeabi_fmul+0x15e>
 80004d8:	ea92 0f0c 	teq	r2, ip
 80004dc:	d101      	bne.n	80004e2 <__aeabi_fmul+0x13e>
 80004de:	0242      	lsls	r2, r0, #9
 80004e0:	d10f      	bne.n	8000502 <__aeabi_fmul+0x15e>
 80004e2:	ea93 0f0c 	teq	r3, ip
 80004e6:	d103      	bne.n	80004f0 <__aeabi_fmul+0x14c>
 80004e8:	024b      	lsls	r3, r1, #9
 80004ea:	bf18      	it	ne
 80004ec:	4608      	movne	r0, r1
 80004ee:	d108      	bne.n	8000502 <__aeabi_fmul+0x15e>
 80004f0:	ea80 0001 	eor.w	r0, r0, r1
 80004f4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80004f8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004fc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000500:	4770      	bx	lr
 8000502:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000506:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 800050a:	4770      	bx	lr

0800050c <__aeabi_drsub>:
 800050c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000510:	e002      	b.n	8000518 <__adddf3>
 8000512:	bf00      	nop

08000514 <__aeabi_dsub>:
 8000514:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000518 <__adddf3>:
 8000518:	b530      	push	{r4, r5, lr}
 800051a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800051e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000522:	ea94 0f05 	teq	r4, r5
 8000526:	bf08      	it	eq
 8000528:	ea90 0f02 	teqeq	r0, r2
 800052c:	bf1f      	itttt	ne
 800052e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000532:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000536:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800053a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800053e:	f000 80e2 	beq.w	8000706 <__adddf3+0x1ee>
 8000542:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000546:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800054a:	bfb8      	it	lt
 800054c:	426d      	neglt	r5, r5
 800054e:	dd0c      	ble.n	800056a <__adddf3+0x52>
 8000550:	442c      	add	r4, r5
 8000552:	ea80 0202 	eor.w	r2, r0, r2
 8000556:	ea81 0303 	eor.w	r3, r1, r3
 800055a:	ea82 0000 	eor.w	r0, r2, r0
 800055e:	ea83 0101 	eor.w	r1, r3, r1
 8000562:	ea80 0202 	eor.w	r2, r0, r2
 8000566:	ea81 0303 	eor.w	r3, r1, r3
 800056a:	2d36      	cmp	r5, #54	@ 0x36
 800056c:	bf88      	it	hi
 800056e:	bd30      	pophi	{r4, r5, pc}
 8000570:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000574:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000578:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 800057c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000580:	d002      	beq.n	8000588 <__adddf3+0x70>
 8000582:	4240      	negs	r0, r0
 8000584:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000588:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 800058c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000590:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000594:	d002      	beq.n	800059c <__adddf3+0x84>
 8000596:	4252      	negs	r2, r2
 8000598:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800059c:	ea94 0f05 	teq	r4, r5
 80005a0:	f000 80a7 	beq.w	80006f2 <__adddf3+0x1da>
 80005a4:	f1a4 0401 	sub.w	r4, r4, #1
 80005a8:	f1d5 0e20 	rsbs	lr, r5, #32
 80005ac:	db0d      	blt.n	80005ca <__adddf3+0xb2>
 80005ae:	fa02 fc0e 	lsl.w	ip, r2, lr
 80005b2:	fa22 f205 	lsr.w	r2, r2, r5
 80005b6:	1880      	adds	r0, r0, r2
 80005b8:	f141 0100 	adc.w	r1, r1, #0
 80005bc:	fa03 f20e 	lsl.w	r2, r3, lr
 80005c0:	1880      	adds	r0, r0, r2
 80005c2:	fa43 f305 	asr.w	r3, r3, r5
 80005c6:	4159      	adcs	r1, r3
 80005c8:	e00e      	b.n	80005e8 <__adddf3+0xd0>
 80005ca:	f1a5 0520 	sub.w	r5, r5, #32
 80005ce:	f10e 0e20 	add.w	lr, lr, #32
 80005d2:	2a01      	cmp	r2, #1
 80005d4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005d8:	bf28      	it	cs
 80005da:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005de:	fa43 f305 	asr.w	r3, r3, r5
 80005e2:	18c0      	adds	r0, r0, r3
 80005e4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005ec:	d507      	bpl.n	80005fe <__adddf3+0xe6>
 80005ee:	f04f 0e00 	mov.w	lr, #0
 80005f2:	f1dc 0c00 	rsbs	ip, ip, #0
 80005f6:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005fa:	eb6e 0101 	sbc.w	r1, lr, r1
 80005fe:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000602:	d31b      	bcc.n	800063c <__adddf3+0x124>
 8000604:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000608:	d30c      	bcc.n	8000624 <__adddf3+0x10c>
 800060a:	0849      	lsrs	r1, r1, #1
 800060c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000610:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000614:	f104 0401 	add.w	r4, r4, #1
 8000618:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800061c:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000620:	f080 809a 	bcs.w	8000758 <__adddf3+0x240>
 8000624:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000628:	bf08      	it	eq
 800062a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800062e:	f150 0000 	adcs.w	r0, r0, #0
 8000632:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000636:	ea41 0105 	orr.w	r1, r1, r5
 800063a:	bd30      	pop	{r4, r5, pc}
 800063c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000640:	4140      	adcs	r0, r0
 8000642:	eb41 0101 	adc.w	r1, r1, r1
 8000646:	3c01      	subs	r4, #1
 8000648:	bf28      	it	cs
 800064a:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800064e:	d2e9      	bcs.n	8000624 <__adddf3+0x10c>
 8000650:	f091 0f00 	teq	r1, #0
 8000654:	bf04      	itt	eq
 8000656:	4601      	moveq	r1, r0
 8000658:	2000      	moveq	r0, #0
 800065a:	fab1 f381 	clz	r3, r1
 800065e:	bf08      	it	eq
 8000660:	3320      	addeq	r3, #32
 8000662:	f1a3 030b 	sub.w	r3, r3, #11
 8000666:	f1b3 0220 	subs.w	r2, r3, #32
 800066a:	da0c      	bge.n	8000686 <__adddf3+0x16e>
 800066c:	320c      	adds	r2, #12
 800066e:	dd08      	ble.n	8000682 <__adddf3+0x16a>
 8000670:	f102 0c14 	add.w	ip, r2, #20
 8000674:	f1c2 020c 	rsb	r2, r2, #12
 8000678:	fa01 f00c 	lsl.w	r0, r1, ip
 800067c:	fa21 f102 	lsr.w	r1, r1, r2
 8000680:	e00c      	b.n	800069c <__adddf3+0x184>
 8000682:	f102 0214 	add.w	r2, r2, #20
 8000686:	bfd8      	it	le
 8000688:	f1c2 0c20 	rsble	ip, r2, #32
 800068c:	fa01 f102 	lsl.w	r1, r1, r2
 8000690:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000694:	bfdc      	itt	le
 8000696:	ea41 010c 	orrle.w	r1, r1, ip
 800069a:	4090      	lslle	r0, r2
 800069c:	1ae4      	subs	r4, r4, r3
 800069e:	bfa2      	ittt	ge
 80006a0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80006a4:	4329      	orrge	r1, r5
 80006a6:	bd30      	popge	{r4, r5, pc}
 80006a8:	ea6f 0404 	mvn.w	r4, r4
 80006ac:	3c1f      	subs	r4, #31
 80006ae:	da1c      	bge.n	80006ea <__adddf3+0x1d2>
 80006b0:	340c      	adds	r4, #12
 80006b2:	dc0e      	bgt.n	80006d2 <__adddf3+0x1ba>
 80006b4:	f104 0414 	add.w	r4, r4, #20
 80006b8:	f1c4 0220 	rsb	r2, r4, #32
 80006bc:	fa20 f004 	lsr.w	r0, r0, r4
 80006c0:	fa01 f302 	lsl.w	r3, r1, r2
 80006c4:	ea40 0003 	orr.w	r0, r0, r3
 80006c8:	fa21 f304 	lsr.w	r3, r1, r4
 80006cc:	ea45 0103 	orr.w	r1, r5, r3
 80006d0:	bd30      	pop	{r4, r5, pc}
 80006d2:	f1c4 040c 	rsb	r4, r4, #12
 80006d6:	f1c4 0220 	rsb	r2, r4, #32
 80006da:	fa20 f002 	lsr.w	r0, r0, r2
 80006de:	fa01 f304 	lsl.w	r3, r1, r4
 80006e2:	ea40 0003 	orr.w	r0, r0, r3
 80006e6:	4629      	mov	r1, r5
 80006e8:	bd30      	pop	{r4, r5, pc}
 80006ea:	fa21 f004 	lsr.w	r0, r1, r4
 80006ee:	4629      	mov	r1, r5
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	f094 0f00 	teq	r4, #0
 80006f6:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80006fa:	bf06      	itte	eq
 80006fc:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000700:	3401      	addeq	r4, #1
 8000702:	3d01      	subne	r5, #1
 8000704:	e74e      	b.n	80005a4 <__adddf3+0x8c>
 8000706:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800070a:	bf18      	it	ne
 800070c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000710:	d029      	beq.n	8000766 <__adddf3+0x24e>
 8000712:	ea94 0f05 	teq	r4, r5
 8000716:	bf08      	it	eq
 8000718:	ea90 0f02 	teqeq	r0, r2
 800071c:	d005      	beq.n	800072a <__adddf3+0x212>
 800071e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000722:	bf04      	itt	eq
 8000724:	4619      	moveq	r1, r3
 8000726:	4610      	moveq	r0, r2
 8000728:	bd30      	pop	{r4, r5, pc}
 800072a:	ea91 0f03 	teq	r1, r3
 800072e:	bf1e      	ittt	ne
 8000730:	2100      	movne	r1, #0
 8000732:	2000      	movne	r0, #0
 8000734:	bd30      	popne	{r4, r5, pc}
 8000736:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800073a:	d105      	bne.n	8000748 <__adddf3+0x230>
 800073c:	0040      	lsls	r0, r0, #1
 800073e:	4149      	adcs	r1, r1
 8000740:	bf28      	it	cs
 8000742:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000746:	bd30      	pop	{r4, r5, pc}
 8000748:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 800074c:	bf3c      	itt	cc
 800074e:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000752:	bd30      	popcc	{r4, r5, pc}
 8000754:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000758:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 800075c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000760:	f04f 0000 	mov.w	r0, #0
 8000764:	bd30      	pop	{r4, r5, pc}
 8000766:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800076a:	bf1a      	itte	ne
 800076c:	4619      	movne	r1, r3
 800076e:	4610      	movne	r0, r2
 8000770:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000774:	bf1c      	itt	ne
 8000776:	460b      	movne	r3, r1
 8000778:	4602      	movne	r2, r0
 800077a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800077e:	bf06      	itte	eq
 8000780:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000784:	ea91 0f03 	teqeq	r1, r3
 8000788:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 800078c:	bd30      	pop	{r4, r5, pc}
 800078e:	bf00      	nop

08000790 <__aeabi_ui2d>:
 8000790:	f090 0f00 	teq	r0, #0
 8000794:	bf04      	itt	eq
 8000796:	2100      	moveq	r1, #0
 8000798:	4770      	bxeq	lr
 800079a:	b530      	push	{r4, r5, lr}
 800079c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007a0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007a4:	f04f 0500 	mov.w	r5, #0
 80007a8:	f04f 0100 	mov.w	r1, #0
 80007ac:	e750      	b.n	8000650 <__adddf3+0x138>
 80007ae:	bf00      	nop

080007b0 <__aeabi_i2d>:
 80007b0:	f090 0f00 	teq	r0, #0
 80007b4:	bf04      	itt	eq
 80007b6:	2100      	moveq	r1, #0
 80007b8:	4770      	bxeq	lr
 80007ba:	b530      	push	{r4, r5, lr}
 80007bc:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007c0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007c4:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80007c8:	bf48      	it	mi
 80007ca:	4240      	negmi	r0, r0
 80007cc:	f04f 0100 	mov.w	r1, #0
 80007d0:	e73e      	b.n	8000650 <__adddf3+0x138>
 80007d2:	bf00      	nop

080007d4 <__aeabi_f2d>:
 80007d4:	0042      	lsls	r2, r0, #1
 80007d6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007da:	ea4f 0131 	mov.w	r1, r1, rrx
 80007de:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007e2:	bf1f      	itttt	ne
 80007e4:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80007e8:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80007ec:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80007f0:	4770      	bxne	lr
 80007f2:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80007f6:	bf08      	it	eq
 80007f8:	4770      	bxeq	lr
 80007fa:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80007fe:	bf04      	itt	eq
 8000800:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000804:	4770      	bxeq	lr
 8000806:	b530      	push	{r4, r5, lr}
 8000808:	f44f 7460 	mov.w	r4, #896	@ 0x380
 800080c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000810:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000814:	e71c      	b.n	8000650 <__adddf3+0x138>
 8000816:	bf00      	nop

08000818 <__aeabi_ul2d>:
 8000818:	ea50 0201 	orrs.w	r2, r0, r1
 800081c:	bf08      	it	eq
 800081e:	4770      	bxeq	lr
 8000820:	b530      	push	{r4, r5, lr}
 8000822:	f04f 0500 	mov.w	r5, #0
 8000826:	e00a      	b.n	800083e <__aeabi_l2d+0x16>

08000828 <__aeabi_l2d>:
 8000828:	ea50 0201 	orrs.w	r2, r0, r1
 800082c:	bf08      	it	eq
 800082e:	4770      	bxeq	lr
 8000830:	b530      	push	{r4, r5, lr}
 8000832:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000836:	d502      	bpl.n	800083e <__aeabi_l2d+0x16>
 8000838:	4240      	negs	r0, r0
 800083a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800083e:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000842:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000846:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800084a:	f43f aed8 	beq.w	80005fe <__adddf3+0xe6>
 800084e:	f04f 0203 	mov.w	r2, #3
 8000852:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000856:	bf18      	it	ne
 8000858:	3203      	addne	r2, #3
 800085a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800085e:	bf18      	it	ne
 8000860:	3203      	addne	r2, #3
 8000862:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000866:	f1c2 0320 	rsb	r3, r2, #32
 800086a:	fa00 fc03 	lsl.w	ip, r0, r3
 800086e:	fa20 f002 	lsr.w	r0, r0, r2
 8000872:	fa01 fe03 	lsl.w	lr, r1, r3
 8000876:	ea40 000e 	orr.w	r0, r0, lr
 800087a:	fa21 f102 	lsr.w	r1, r1, r2
 800087e:	4414      	add	r4, r2
 8000880:	e6bd      	b.n	80005fe <__adddf3+0xe6>
 8000882:	bf00      	nop

08000884 <__gedf2>:
 8000884:	f04f 3cff 	mov.w	ip, #4294967295
 8000888:	e006      	b.n	8000898 <__cmpdf2+0x4>
 800088a:	bf00      	nop

0800088c <__ledf2>:
 800088c:	f04f 0c01 	mov.w	ip, #1
 8000890:	e002      	b.n	8000898 <__cmpdf2+0x4>
 8000892:	bf00      	nop

08000894 <__cmpdf2>:
 8000894:	f04f 0c01 	mov.w	ip, #1
 8000898:	f84d cd04 	str.w	ip, [sp, #-4]!
 800089c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80008a0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80008a4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80008a8:	bf18      	it	ne
 80008aa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80008ae:	d01b      	beq.n	80008e8 <__cmpdf2+0x54>
 80008b0:	b001      	add	sp, #4
 80008b2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80008b6:	bf0c      	ite	eq
 80008b8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80008bc:	ea91 0f03 	teqne	r1, r3
 80008c0:	bf02      	ittt	eq
 80008c2:	ea90 0f02 	teqeq	r0, r2
 80008c6:	2000      	moveq	r0, #0
 80008c8:	4770      	bxeq	lr
 80008ca:	f110 0f00 	cmn.w	r0, #0
 80008ce:	ea91 0f03 	teq	r1, r3
 80008d2:	bf58      	it	pl
 80008d4:	4299      	cmppl	r1, r3
 80008d6:	bf08      	it	eq
 80008d8:	4290      	cmpeq	r0, r2
 80008da:	bf2c      	ite	cs
 80008dc:	17d8      	asrcs	r0, r3, #31
 80008de:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80008e2:	f040 0001 	orr.w	r0, r0, #1
 80008e6:	4770      	bx	lr
 80008e8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80008ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80008f0:	d102      	bne.n	80008f8 <__cmpdf2+0x64>
 80008f2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80008f6:	d107      	bne.n	8000908 <__cmpdf2+0x74>
 80008f8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80008fc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000900:	d1d6      	bne.n	80008b0 <__cmpdf2+0x1c>
 8000902:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000906:	d0d3      	beq.n	80008b0 <__cmpdf2+0x1c>
 8000908:	f85d 0b04 	ldr.w	r0, [sp], #4
 800090c:	4770      	bx	lr
 800090e:	bf00      	nop

08000910 <__aeabi_cdrcmple>:
 8000910:	4684      	mov	ip, r0
 8000912:	4610      	mov	r0, r2
 8000914:	4662      	mov	r2, ip
 8000916:	468c      	mov	ip, r1
 8000918:	4619      	mov	r1, r3
 800091a:	4663      	mov	r3, ip
 800091c:	e000      	b.n	8000920 <__aeabi_cdcmpeq>
 800091e:	bf00      	nop

08000920 <__aeabi_cdcmpeq>:
 8000920:	b501      	push	{r0, lr}
 8000922:	f7ff ffb7 	bl	8000894 <__cmpdf2>
 8000926:	2800      	cmp	r0, #0
 8000928:	bf48      	it	mi
 800092a:	f110 0f00 	cmnmi.w	r0, #0
 800092e:	bd01      	pop	{r0, pc}

08000930 <__aeabi_dcmpeq>:
 8000930:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000934:	f7ff fff4 	bl	8000920 <__aeabi_cdcmpeq>
 8000938:	bf0c      	ite	eq
 800093a:	2001      	moveq	r0, #1
 800093c:	2000      	movne	r0, #0
 800093e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000942:	bf00      	nop

08000944 <__aeabi_dcmplt>:
 8000944:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000948:	f7ff ffea 	bl	8000920 <__aeabi_cdcmpeq>
 800094c:	bf34      	ite	cc
 800094e:	2001      	movcc	r0, #1
 8000950:	2000      	movcs	r0, #0
 8000952:	f85d fb08 	ldr.w	pc, [sp], #8
 8000956:	bf00      	nop

08000958 <__aeabi_dcmple>:
 8000958:	f84d ed08 	str.w	lr, [sp, #-8]!
 800095c:	f7ff ffe0 	bl	8000920 <__aeabi_cdcmpeq>
 8000960:	bf94      	ite	ls
 8000962:	2001      	movls	r0, #1
 8000964:	2000      	movhi	r0, #0
 8000966:	f85d fb08 	ldr.w	pc, [sp], #8
 800096a:	bf00      	nop

0800096c <__aeabi_dcmpge>:
 800096c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000970:	f7ff ffce 	bl	8000910 <__aeabi_cdrcmple>
 8000974:	bf94      	ite	ls
 8000976:	2001      	movls	r0, #1
 8000978:	2000      	movhi	r0, #0
 800097a:	f85d fb08 	ldr.w	pc, [sp], #8
 800097e:	bf00      	nop

08000980 <__aeabi_dcmpgt>:
 8000980:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000984:	f7ff ffc4 	bl	8000910 <__aeabi_cdrcmple>
 8000988:	bf34      	ite	cc
 800098a:	2001      	movcc	r0, #1
 800098c:	2000      	movcs	r0, #0
 800098e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000992:	bf00      	nop

08000994 <__aeabi_d2iz>:
 8000994:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000998:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 800099c:	d215      	bcs.n	80009ca <__aeabi_d2iz+0x36>
 800099e:	d511      	bpl.n	80009c4 <__aeabi_d2iz+0x30>
 80009a0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80009a4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009a8:	d912      	bls.n	80009d0 <__aeabi_d2iz+0x3c>
 80009aa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009ae:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80009b2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009b6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80009ba:	fa23 f002 	lsr.w	r0, r3, r2
 80009be:	bf18      	it	ne
 80009c0:	4240      	negne	r0, r0
 80009c2:	4770      	bx	lr
 80009c4:	f04f 0000 	mov.w	r0, #0
 80009c8:	4770      	bx	lr
 80009ca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009ce:	d105      	bne.n	80009dc <__aeabi_d2iz+0x48>
 80009d0:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 80009d4:	bf08      	it	eq
 80009d6:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80009da:	4770      	bx	lr
 80009dc:	f04f 0000 	mov.w	r0, #0
 80009e0:	4770      	bx	lr
 80009e2:	bf00      	nop

080009e4 <__aeabi_d2f>:
 80009e4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009e8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80009ec:	bf24      	itt	cs
 80009ee:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 80009f2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 80009f6:	d90d      	bls.n	8000a14 <__aeabi_d2f+0x30>
 80009f8:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80009fc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a00:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a04:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a08:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a0c:	bf08      	it	eq
 8000a0e:	f020 0001 	biceq.w	r0, r0, #1
 8000a12:	4770      	bx	lr
 8000a14:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a18:	d121      	bne.n	8000a5e <__aeabi_d2f+0x7a>
 8000a1a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a1e:	bfbc      	itt	lt
 8000a20:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a24:	4770      	bxlt	lr
 8000a26:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a2a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a2e:	f1c2 0218 	rsb	r2, r2, #24
 8000a32:	f1c2 0c20 	rsb	ip, r2, #32
 8000a36:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a3a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a3e:	bf18      	it	ne
 8000a40:	f040 0001 	orrne.w	r0, r0, #1
 8000a44:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a48:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a4c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a50:	ea40 000c 	orr.w	r0, r0, ip
 8000a54:	fa23 f302 	lsr.w	r3, r3, r2
 8000a58:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a5c:	e7cc      	b.n	80009f8 <__aeabi_d2f+0x14>
 8000a5e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a62:	d107      	bne.n	8000a74 <__aeabi_d2f+0x90>
 8000a64:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a68:	bf1e      	ittt	ne
 8000a6a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000a6e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000a72:	4770      	bxne	lr
 8000a74:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a7c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a80:	4770      	bx	lr
 8000a82:	bf00      	nop

08000a84 <__aeabi_frsub>:
 8000a84:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000a88:	e002      	b.n	8000a90 <__addsf3>
 8000a8a:	bf00      	nop

08000a8c <__aeabi_fsub>:
 8000a8c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000a90 <__addsf3>:
 8000a90:	0042      	lsls	r2, r0, #1
 8000a92:	bf1f      	itttt	ne
 8000a94:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a98:	ea92 0f03 	teqne	r2, r3
 8000a9c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa4:	d06a      	beq.n	8000b7c <__addsf3+0xec>
 8000aa6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aaa:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000aae:	bfc1      	itttt	gt
 8000ab0:	18d2      	addgt	r2, r2, r3
 8000ab2:	4041      	eorgt	r1, r0
 8000ab4:	4048      	eorgt	r0, r1
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	bfb8      	it	lt
 8000aba:	425b      	neglt	r3, r3
 8000abc:	2b19      	cmp	r3, #25
 8000abe:	bf88      	it	hi
 8000ac0:	4770      	bxhi	lr
 8000ac2:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000ac6:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000aca:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000ace:	bf18      	it	ne
 8000ad0:	4240      	negne	r0, r0
 8000ad2:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000ad6:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000ada:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000ade:	bf18      	it	ne
 8000ae0:	4249      	negne	r1, r1
 8000ae2:	ea92 0f03 	teq	r2, r3
 8000ae6:	d03f      	beq.n	8000b68 <__addsf3+0xd8>
 8000ae8:	f1a2 0201 	sub.w	r2, r2, #1
 8000aec:	fa41 fc03 	asr.w	ip, r1, r3
 8000af0:	eb10 000c 	adds.w	r0, r0, ip
 8000af4:	f1c3 0320 	rsb	r3, r3, #32
 8000af8:	fa01 f103 	lsl.w	r1, r1, r3
 8000afc:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b00:	d502      	bpl.n	8000b08 <__addsf3+0x78>
 8000b02:	4249      	negs	r1, r1
 8000b04:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b08:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000b0c:	d313      	bcc.n	8000b36 <__addsf3+0xa6>
 8000b0e:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000b12:	d306      	bcc.n	8000b22 <__addsf3+0x92>
 8000b14:	0840      	lsrs	r0, r0, #1
 8000b16:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1a:	f102 0201 	add.w	r2, r2, #1
 8000b1e:	2afe      	cmp	r2, #254	@ 0xfe
 8000b20:	d251      	bcs.n	8000bc6 <__addsf3+0x136>
 8000b22:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000b26:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2a:	bf08      	it	eq
 8000b2c:	f020 0001 	biceq.w	r0, r0, #1
 8000b30:	ea40 0003 	orr.w	r0, r0, r3
 8000b34:	4770      	bx	lr
 8000b36:	0049      	lsls	r1, r1, #1
 8000b38:	eb40 0000 	adc.w	r0, r0, r0
 8000b3c:	3a01      	subs	r2, #1
 8000b3e:	bf28      	it	cs
 8000b40:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000b44:	d2ed      	bcs.n	8000b22 <__addsf3+0x92>
 8000b46:	fab0 fc80 	clz	ip, r0
 8000b4a:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b4e:	ebb2 020c 	subs.w	r2, r2, ip
 8000b52:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b56:	bfaa      	itet	ge
 8000b58:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b5c:	4252      	neglt	r2, r2
 8000b5e:	4318      	orrge	r0, r3
 8000b60:	bfbc      	itt	lt
 8000b62:	40d0      	lsrlt	r0, r2
 8000b64:	4318      	orrlt	r0, r3
 8000b66:	4770      	bx	lr
 8000b68:	f092 0f00 	teq	r2, #0
 8000b6c:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000b70:	bf06      	itte	eq
 8000b72:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000b76:	3201      	addeq	r2, #1
 8000b78:	3b01      	subne	r3, #1
 8000b7a:	e7b5      	b.n	8000ae8 <__addsf3+0x58>
 8000b7c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b80:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b84:	bf18      	it	ne
 8000b86:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8a:	d021      	beq.n	8000bd0 <__addsf3+0x140>
 8000b8c:	ea92 0f03 	teq	r2, r3
 8000b90:	d004      	beq.n	8000b9c <__addsf3+0x10c>
 8000b92:	f092 0f00 	teq	r2, #0
 8000b96:	bf08      	it	eq
 8000b98:	4608      	moveq	r0, r1
 8000b9a:	4770      	bx	lr
 8000b9c:	ea90 0f01 	teq	r0, r1
 8000ba0:	bf1c      	itt	ne
 8000ba2:	2000      	movne	r0, #0
 8000ba4:	4770      	bxne	lr
 8000ba6:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000baa:	d104      	bne.n	8000bb6 <__addsf3+0x126>
 8000bac:	0040      	lsls	r0, r0, #1
 8000bae:	bf28      	it	cs
 8000bb0:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000bb4:	4770      	bx	lr
 8000bb6:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000bba:	bf3c      	itt	cc
 8000bbc:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000bc0:	4770      	bxcc	lr
 8000bc2:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000bc6:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000bca:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bce:	4770      	bx	lr
 8000bd0:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd4:	bf16      	itet	ne
 8000bd6:	4608      	movne	r0, r1
 8000bd8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000bdc:	4601      	movne	r1, r0
 8000bde:	0242      	lsls	r2, r0, #9
 8000be0:	bf06      	itte	eq
 8000be2:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000be6:	ea90 0f01 	teqeq	r0, r1
 8000bea:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000bee:	4770      	bx	lr

08000bf0 <__aeabi_ui2f>:
 8000bf0:	f04f 0300 	mov.w	r3, #0
 8000bf4:	e004      	b.n	8000c00 <__aeabi_i2f+0x8>
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_i2f>:
 8000bf8:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000bfc:	bf48      	it	mi
 8000bfe:	4240      	negmi	r0, r0
 8000c00:	ea5f 0c00 	movs.w	ip, r0
 8000c04:	bf08      	it	eq
 8000c06:	4770      	bxeq	lr
 8000c08:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000c0c:	4601      	mov	r1, r0
 8000c0e:	f04f 0000 	mov.w	r0, #0
 8000c12:	e01c      	b.n	8000c4e <__aeabi_l2f+0x2a>

08000c14 <__aeabi_ul2f>:
 8000c14:	ea50 0201 	orrs.w	r2, r0, r1
 8000c18:	bf08      	it	eq
 8000c1a:	4770      	bxeq	lr
 8000c1c:	f04f 0300 	mov.w	r3, #0
 8000c20:	e00a      	b.n	8000c38 <__aeabi_l2f+0x14>
 8000c22:	bf00      	nop

08000c24 <__aeabi_l2f>:
 8000c24:	ea50 0201 	orrs.w	r2, r0, r1
 8000c28:	bf08      	it	eq
 8000c2a:	4770      	bxeq	lr
 8000c2c:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000c30:	d502      	bpl.n	8000c38 <__aeabi_l2f+0x14>
 8000c32:	4240      	negs	r0, r0
 8000c34:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c38:	ea5f 0c01 	movs.w	ip, r1
 8000c3c:	bf02      	ittt	eq
 8000c3e:	4684      	moveq	ip, r0
 8000c40:	4601      	moveq	r1, r0
 8000c42:	2000      	moveq	r0, #0
 8000c44:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000c48:	bf08      	it	eq
 8000c4a:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000c4e:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000c52:	fabc f28c 	clz	r2, ip
 8000c56:	3a08      	subs	r2, #8
 8000c58:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c5c:	db10      	blt.n	8000c80 <__aeabi_l2f+0x5c>
 8000c5e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c62:	4463      	add	r3, ip
 8000c64:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c68:	f1c2 0220 	rsb	r2, r2, #32
 8000c6c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000c70:	fa20 f202 	lsr.w	r2, r0, r2
 8000c74:	eb43 0002 	adc.w	r0, r3, r2
 8000c78:	bf08      	it	eq
 8000c7a:	f020 0001 	biceq.w	r0, r0, #1
 8000c7e:	4770      	bx	lr
 8000c80:	f102 0220 	add.w	r2, r2, #32
 8000c84:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c88:	f1c2 0220 	rsb	r2, r2, #32
 8000c8c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c90:	fa21 f202 	lsr.w	r2, r1, r2
 8000c94:	eb43 0002 	adc.w	r0, r3, r2
 8000c98:	bf08      	it	eq
 8000c9a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c9e:	4770      	bx	lr

08000ca0 <__aeabi_f2uiz>:
 8000ca0:	0042      	lsls	r2, r0, #1
 8000ca2:	d20e      	bcs.n	8000cc2 <__aeabi_f2uiz+0x22>
 8000ca4:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000ca8:	d30b      	bcc.n	8000cc2 <__aeabi_f2uiz+0x22>
 8000caa:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000cae:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000cb2:	d409      	bmi.n	8000cc8 <__aeabi_f2uiz+0x28>
 8000cb4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000cb8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000cbc:	fa23 f002 	lsr.w	r0, r3, r2
 8000cc0:	4770      	bx	lr
 8000cc2:	f04f 0000 	mov.w	r0, #0
 8000cc6:	4770      	bx	lr
 8000cc8:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000ccc:	d101      	bne.n	8000cd2 <__aeabi_f2uiz+0x32>
 8000cce:	0242      	lsls	r2, r0, #9
 8000cd0:	d102      	bne.n	8000cd8 <__aeabi_f2uiz+0x38>
 8000cd2:	f04f 30ff 	mov.w	r0, #4294967295
 8000cd6:	4770      	bx	lr
 8000cd8:	f04f 0000 	mov.w	r0, #0
 8000cdc:	4770      	bx	lr
 8000cde:	bf00      	nop

08000ce0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b084      	sub	sp, #16
 8000ce4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ce6:	f000 fa6f 	bl	80011c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cea:	f000 f86f 	bl	8000dcc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cee:	f000 f949 	bl	8000f84 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000cf2:	f000 f8a7 	bl	8000e44 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000cf6:	2100      	movs	r1, #0
 8000cf8:	4831      	ldr	r0, [pc, #196]	@ (8000dc0 <main+0xe0>)
 8000cfa:	f001 f9cd 	bl	8002098 <HAL_TIM_PWM_Start>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000cfe:	2200      	movs	r2, #0
 8000d00:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000d04:	482f      	ldr	r0, [pc, #188]	@ (8000dc4 <main+0xe4>)
 8000d06:	f000 fd29 	bl	800175c <HAL_GPIO_WritePin>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		float t = HAL_GetTick() * 0.001;
 8000d0a:	f000 fab5 	bl	8001278 <HAL_GetTick>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	4618      	mov	r0, r3
 8000d12:	f7ff fd3d 	bl	8000790 <__aeabi_ui2d>
 8000d16:	a326      	add	r3, pc, #152	@ (adr r3, 8000db0 <main+0xd0>)
 8000d18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d1c:	f7ff fa18 	bl	8000150 <__aeabi_dmul>
 8000d20:	4602      	mov	r2, r0
 8000d22:	460b      	mov	r3, r1
 8000d24:	4610      	mov	r0, r2
 8000d26:	4619      	mov	r1, r3
 8000d28:	f7ff fe5c 	bl	80009e4 <__aeabi_d2f>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	60fb      	str	r3, [r7, #12]

		float duty = 0.5 * sin(2 * 3.14 * t) + 0.5;
 8000d30:	68f8      	ldr	r0, [r7, #12]
 8000d32:	f7ff fd4f 	bl	80007d4 <__aeabi_f2d>
 8000d36:	a320      	add	r3, pc, #128	@ (adr r3, 8000db8 <main+0xd8>)
 8000d38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d3c:	f7ff fa08 	bl	8000150 <__aeabi_dmul>
 8000d40:	4602      	mov	r2, r0
 8000d42:	460b      	mov	r3, r1
 8000d44:	4610      	mov	r0, r2
 8000d46:	4619      	mov	r1, r3
 8000d48:	f001 ff5e 	bl	8002c08 <sin>
 8000d4c:	f04f 0200 	mov.w	r2, #0
 8000d50:	4b1d      	ldr	r3, [pc, #116]	@ (8000dc8 <main+0xe8>)
 8000d52:	f7ff f9fd 	bl	8000150 <__aeabi_dmul>
 8000d56:	4602      	mov	r2, r0
 8000d58:	460b      	mov	r3, r1
 8000d5a:	4610      	mov	r0, r2
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	f04f 0200 	mov.w	r2, #0
 8000d62:	4b19      	ldr	r3, [pc, #100]	@ (8000dc8 <main+0xe8>)
 8000d64:	f7ff fbd8 	bl	8000518 <__adddf3>
 8000d68:	4602      	mov	r2, r0
 8000d6a:	460b      	mov	r3, r1
 8000d6c:	4610      	mov	r0, r2
 8000d6e:	4619      	mov	r1, r3
 8000d70:	f7ff fe38 	bl	80009e4 <__aeabi_d2f>
 8000d74:	4603      	mov	r3, r0
 8000d76:	60bb      	str	r3, [r7, #8]

		uint16_t arr = __HAL_TIM_GET_AUTORELOAD(&htim1);
 8000d78:	4b11      	ldr	r3, [pc, #68]	@ (8000dc0 <main+0xe0>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d7e:	80fb      	strh	r3, [r7, #6]

		uint16_t ccr = duty * (arr + 1);
 8000d80:	88fb      	ldrh	r3, [r7, #6]
 8000d82:	3301      	adds	r3, #1
 8000d84:	4618      	mov	r0, r3
 8000d86:	f7ff ff37 	bl	8000bf8 <__aeabi_i2f>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	68b9      	ldr	r1, [r7, #8]
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f7ff fb08 	bl	80003a4 <__aeabi_fmul>
 8000d94:	4603      	mov	r3, r0
 8000d96:	4618      	mov	r0, r3
 8000d98:	f7ff ff82 	bl	8000ca0 <__aeabi_f2uiz>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	80bb      	strh	r3, [r7, #4]

		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, ccr);
 8000da0:	4b07      	ldr	r3, [pc, #28]	@ (8000dc0 <main+0xe0>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	88ba      	ldrh	r2, [r7, #4]
 8000da6:	635a      	str	r2, [r3, #52]	@ 0x34
	while (1) {
 8000da8:	bf00      	nop
 8000daa:	e7ae      	b.n	8000d0a <main+0x2a>
 8000dac:	f3af 8000 	nop.w
 8000db0:	d2f1a9fc 	.word	0xd2f1a9fc
 8000db4:	3f50624d 	.word	0x3f50624d
 8000db8:	51eb851f 	.word	0x51eb851f
 8000dbc:	40191eb8 	.word	0x40191eb8
 8000dc0:	20000028 	.word	0x20000028
 8000dc4:	40011000 	.word	0x40011000
 8000dc8:	3fe00000 	.word	0x3fe00000

08000dcc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b090      	sub	sp, #64	@ 0x40
 8000dd0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dd2:	f107 0318 	add.w	r3, r7, #24
 8000dd6:	2228      	movs	r2, #40	@ 0x28
 8000dd8:	2100      	movs	r1, #0
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f001 fee7 	bl	8002bae <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000de0:	1d3b      	adds	r3, r7, #4
 8000de2:	2200      	movs	r2, #0
 8000de4:	601a      	str	r2, [r3, #0]
 8000de6:	605a      	str	r2, [r3, #4]
 8000de8:	609a      	str	r2, [r3, #8]
 8000dea:	60da      	str	r2, [r3, #12]
 8000dec:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000dee:	2302      	movs	r3, #2
 8000df0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000df2:	2301      	movs	r3, #1
 8000df4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000df6:	2310      	movs	r3, #16
 8000df8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dfe:	f107 0318 	add.w	r3, r7, #24
 8000e02:	4618      	mov	r0, r3
 8000e04:	f000 fcc2 	bl	800178c <HAL_RCC_OscConfig>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d001      	beq.n	8000e12 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000e0e:	f000 f8f9 	bl	8001004 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e12:	230f      	movs	r3, #15
 8000e14:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000e16:	2300      	movs	r3, #0
 8000e18:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e22:	2300      	movs	r3, #0
 8000e24:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000e26:	1d3b      	adds	r3, r7, #4
 8000e28:	2100      	movs	r1, #0
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f000 ff30 	bl	8001c90 <HAL_RCC_ClockConfig>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d001      	beq.n	8000e3a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000e36:	f000 f8e5 	bl	8001004 <Error_Handler>
  }
}
 8000e3a:	bf00      	nop
 8000e3c:	3740      	adds	r7, #64	@ 0x40
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}
	...

08000e44 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b096      	sub	sp, #88	@ 0x58
 8000e48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e4a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000e4e:	2200      	movs	r2, #0
 8000e50:	601a      	str	r2, [r3, #0]
 8000e52:	605a      	str	r2, [r3, #4]
 8000e54:	609a      	str	r2, [r3, #8]
 8000e56:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e58:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	601a      	str	r2, [r3, #0]
 8000e60:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e62:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e66:	2200      	movs	r2, #0
 8000e68:	601a      	str	r2, [r3, #0]
 8000e6a:	605a      	str	r2, [r3, #4]
 8000e6c:	609a      	str	r2, [r3, #8]
 8000e6e:	60da      	str	r2, [r3, #12]
 8000e70:	611a      	str	r2, [r3, #16]
 8000e72:	615a      	str	r2, [r3, #20]
 8000e74:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000e76:	1d3b      	adds	r3, r7, #4
 8000e78:	2220      	movs	r2, #32
 8000e7a:	2100      	movs	r1, #0
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f001 fe96 	bl	8002bae <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000e82:	4b3e      	ldr	r3, [pc, #248]	@ (8000f7c <MX_TIM1_Init+0x138>)
 8000e84:	4a3e      	ldr	r2, [pc, #248]	@ (8000f80 <MX_TIM1_Init+0x13c>)
 8000e86:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 7;
 8000e88:	4b3c      	ldr	r3, [pc, #240]	@ (8000f7c <MX_TIM1_Init+0x138>)
 8000e8a:	2207      	movs	r2, #7
 8000e8c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e8e:	4b3b      	ldr	r3, [pc, #236]	@ (8000f7c <MX_TIM1_Init+0x138>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8000e94:	4b39      	ldr	r3, [pc, #228]	@ (8000f7c <MX_TIM1_Init+0x138>)
 8000e96:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000e9a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e9c:	4b37      	ldr	r3, [pc, #220]	@ (8000f7c <MX_TIM1_Init+0x138>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000ea2:	4b36      	ldr	r3, [pc, #216]	@ (8000f7c <MX_TIM1_Init+0x138>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000ea8:	4b34      	ldr	r3, [pc, #208]	@ (8000f7c <MX_TIM1_Init+0x138>)
 8000eaa:	2280      	movs	r2, #128	@ 0x80
 8000eac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000eae:	4833      	ldr	r0, [pc, #204]	@ (8000f7c <MX_TIM1_Init+0x138>)
 8000eb0:	f001 f84a 	bl	8001f48 <HAL_TIM_Base_Init>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d001      	beq.n	8000ebe <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000eba:	f000 f8a3 	bl	8001004 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ebe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ec2:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000ec4:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000ec8:	4619      	mov	r1, r3
 8000eca:	482c      	ldr	r0, [pc, #176]	@ (8000f7c <MX_TIM1_Init+0x138>)
 8000ecc:	f001 fa48 	bl	8002360 <HAL_TIM_ConfigClockSource>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d001      	beq.n	8000eda <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000ed6:	f000 f895 	bl	8001004 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000eda:	4828      	ldr	r0, [pc, #160]	@ (8000f7c <MX_TIM1_Init+0x138>)
 8000edc:	f001 f883 	bl	8001fe6 <HAL_TIM_PWM_Init>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d001      	beq.n	8000eea <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000ee6:	f000 f88d 	bl	8001004 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000eea:	2300      	movs	r3, #0
 8000eec:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000ef2:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	4820      	ldr	r0, [pc, #128]	@ (8000f7c <MX_TIM1_Init+0x138>)
 8000efa:	f001 fda9 	bl	8002a50 <HAL_TIMEx_MasterConfigSynchronization>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d001      	beq.n	8000f08 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000f04:	f000 f87e 	bl	8001004 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f08:	2360      	movs	r3, #96	@ 0x60
 8000f0a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f10:	2300      	movs	r3, #0
 8000f12:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000f14:	2300      	movs	r3, #0
 8000f16:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000f20:	2300      	movs	r3, #0
 8000f22:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f24:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f28:	2200      	movs	r2, #0
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	4813      	ldr	r0, [pc, #76]	@ (8000f7c <MX_TIM1_Init+0x138>)
 8000f2e:	f001 f955 	bl	80021dc <HAL_TIM_PWM_ConfigChannel>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d001      	beq.n	8000f3c <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8000f38:	f000 f864 	bl	8001004 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000f40:	2300      	movs	r3, #0
 8000f42:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000f44:	2300      	movs	r3, #0
 8000f46:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000f50:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f54:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000f56:	2300      	movs	r3, #0
 8000f58:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000f5a:	1d3b      	adds	r3, r7, #4
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	4807      	ldr	r0, [pc, #28]	@ (8000f7c <MX_TIM1_Init+0x138>)
 8000f60:	f001 fdd4 	bl	8002b0c <HAL_TIMEx_ConfigBreakDeadTime>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d001      	beq.n	8000f6e <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8000f6a:	f000 f84b 	bl	8001004 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000f6e:	4803      	ldr	r0, [pc, #12]	@ (8000f7c <MX_TIM1_Init+0x138>)
 8000f70:	f000 f89e 	bl	80010b0 <HAL_TIM_MspPostInit>

}
 8000f74:	bf00      	nop
 8000f76:	3758      	adds	r7, #88	@ 0x58
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	20000028 	.word	0x20000028
 8000f80:	40012c00 	.word	0x40012c00

08000f84 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b086      	sub	sp, #24
 8000f88:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f8a:	f107 0308 	add.w	r3, r7, #8
 8000f8e:	2200      	movs	r2, #0
 8000f90:	601a      	str	r2, [r3, #0]
 8000f92:	605a      	str	r2, [r3, #4]
 8000f94:	609a      	str	r2, [r3, #8]
 8000f96:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f98:	4b18      	ldr	r3, [pc, #96]	@ (8000ffc <MX_GPIO_Init+0x78>)
 8000f9a:	699b      	ldr	r3, [r3, #24]
 8000f9c:	4a17      	ldr	r2, [pc, #92]	@ (8000ffc <MX_GPIO_Init+0x78>)
 8000f9e:	f043 0310 	orr.w	r3, r3, #16
 8000fa2:	6193      	str	r3, [r2, #24]
 8000fa4:	4b15      	ldr	r3, [pc, #84]	@ (8000ffc <MX_GPIO_Init+0x78>)
 8000fa6:	699b      	ldr	r3, [r3, #24]
 8000fa8:	f003 0310 	and.w	r3, r3, #16
 8000fac:	607b      	str	r3, [r7, #4]
 8000fae:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fb0:	4b12      	ldr	r3, [pc, #72]	@ (8000ffc <MX_GPIO_Init+0x78>)
 8000fb2:	699b      	ldr	r3, [r3, #24]
 8000fb4:	4a11      	ldr	r2, [pc, #68]	@ (8000ffc <MX_GPIO_Init+0x78>)
 8000fb6:	f043 0304 	orr.w	r3, r3, #4
 8000fba:	6193      	str	r3, [r2, #24]
 8000fbc:	4b0f      	ldr	r3, [pc, #60]	@ (8000ffc <MX_GPIO_Init+0x78>)
 8000fbe:	699b      	ldr	r3, [r3, #24]
 8000fc0:	f003 0304 	and.w	r3, r3, #4
 8000fc4:	603b      	str	r3, [r7, #0]
 8000fc6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8000fc8:	2201      	movs	r2, #1
 8000fca:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000fce:	480c      	ldr	r0, [pc, #48]	@ (8001000 <MX_GPIO_Init+0x7c>)
 8000fd0:	f000 fbc4 	bl	800175c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000fd4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000fd8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000fda:	2311      	movs	r3, #17
 8000fdc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fde:	2301      	movs	r3, #1
 8000fe0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fe2:	2302      	movs	r3, #2
 8000fe4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fe6:	f107 0308 	add.w	r3, r7, #8
 8000fea:	4619      	mov	r1, r3
 8000fec:	4804      	ldr	r0, [pc, #16]	@ (8001000 <MX_GPIO_Init+0x7c>)
 8000fee:	f000 fa31 	bl	8001454 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ff2:	bf00      	nop
 8000ff4:	3718      	adds	r7, #24
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	40021000 	.word	0x40021000
 8001000:	40011000 	.word	0x40011000

08001004 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001008:	b672      	cpsid	i
}
 800100a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800100c:	bf00      	nop
 800100e:	e7fd      	b.n	800100c <Error_Handler+0x8>

08001010 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001010:	b480      	push	{r7}
 8001012:	b085      	sub	sp, #20
 8001014:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001016:	4b15      	ldr	r3, [pc, #84]	@ (800106c <HAL_MspInit+0x5c>)
 8001018:	699b      	ldr	r3, [r3, #24]
 800101a:	4a14      	ldr	r2, [pc, #80]	@ (800106c <HAL_MspInit+0x5c>)
 800101c:	f043 0301 	orr.w	r3, r3, #1
 8001020:	6193      	str	r3, [r2, #24]
 8001022:	4b12      	ldr	r3, [pc, #72]	@ (800106c <HAL_MspInit+0x5c>)
 8001024:	699b      	ldr	r3, [r3, #24]
 8001026:	f003 0301 	and.w	r3, r3, #1
 800102a:	60bb      	str	r3, [r7, #8]
 800102c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800102e:	4b0f      	ldr	r3, [pc, #60]	@ (800106c <HAL_MspInit+0x5c>)
 8001030:	69db      	ldr	r3, [r3, #28]
 8001032:	4a0e      	ldr	r2, [pc, #56]	@ (800106c <HAL_MspInit+0x5c>)
 8001034:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001038:	61d3      	str	r3, [r2, #28]
 800103a:	4b0c      	ldr	r3, [pc, #48]	@ (800106c <HAL_MspInit+0x5c>)
 800103c:	69db      	ldr	r3, [r3, #28]
 800103e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001042:	607b      	str	r3, [r7, #4]
 8001044:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001046:	4b0a      	ldr	r3, [pc, #40]	@ (8001070 <HAL_MspInit+0x60>)
 8001048:	685b      	ldr	r3, [r3, #4]
 800104a:	60fb      	str	r3, [r7, #12]
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001052:	60fb      	str	r3, [r7, #12]
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800105a:	60fb      	str	r3, [r7, #12]
 800105c:	4a04      	ldr	r2, [pc, #16]	@ (8001070 <HAL_MspInit+0x60>)
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001062:	bf00      	nop
 8001064:	3714      	adds	r7, #20
 8001066:	46bd      	mov	sp, r7
 8001068:	bc80      	pop	{r7}
 800106a:	4770      	bx	lr
 800106c:	40021000 	.word	0x40021000
 8001070:	40010000 	.word	0x40010000

08001074 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001074:	b480      	push	{r7}
 8001076:	b085      	sub	sp, #20
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4a09      	ldr	r2, [pc, #36]	@ (80010a8 <HAL_TIM_Base_MspInit+0x34>)
 8001082:	4293      	cmp	r3, r2
 8001084:	d10b      	bne.n	800109e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001086:	4b09      	ldr	r3, [pc, #36]	@ (80010ac <HAL_TIM_Base_MspInit+0x38>)
 8001088:	699b      	ldr	r3, [r3, #24]
 800108a:	4a08      	ldr	r2, [pc, #32]	@ (80010ac <HAL_TIM_Base_MspInit+0x38>)
 800108c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001090:	6193      	str	r3, [r2, #24]
 8001092:	4b06      	ldr	r3, [pc, #24]	@ (80010ac <HAL_TIM_Base_MspInit+0x38>)
 8001094:	699b      	ldr	r3, [r3, #24]
 8001096:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800109a:	60fb      	str	r3, [r7, #12]
 800109c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 800109e:	bf00      	nop
 80010a0:	3714      	adds	r7, #20
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bc80      	pop	{r7}
 80010a6:	4770      	bx	lr
 80010a8:	40012c00 	.word	0x40012c00
 80010ac:	40021000 	.word	0x40021000

080010b0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b088      	sub	sp, #32
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b8:	f107 0310 	add.w	r3, r7, #16
 80010bc:	2200      	movs	r2, #0
 80010be:	601a      	str	r2, [r3, #0]
 80010c0:	605a      	str	r2, [r3, #4]
 80010c2:	609a      	str	r2, [r3, #8]
 80010c4:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	4a10      	ldr	r2, [pc, #64]	@ (800110c <HAL_TIM_MspPostInit+0x5c>)
 80010cc:	4293      	cmp	r3, r2
 80010ce:	d118      	bne.n	8001102 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010d0:	4b0f      	ldr	r3, [pc, #60]	@ (8001110 <HAL_TIM_MspPostInit+0x60>)
 80010d2:	699b      	ldr	r3, [r3, #24]
 80010d4:	4a0e      	ldr	r2, [pc, #56]	@ (8001110 <HAL_TIM_MspPostInit+0x60>)
 80010d6:	f043 0304 	orr.w	r3, r3, #4
 80010da:	6193      	str	r3, [r2, #24]
 80010dc:	4b0c      	ldr	r3, [pc, #48]	@ (8001110 <HAL_TIM_MspPostInit+0x60>)
 80010de:	699b      	ldr	r3, [r3, #24]
 80010e0:	f003 0304 	and.w	r3, r3, #4
 80010e4:	60fb      	str	r3, [r7, #12]
 80010e6:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80010e8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80010ec:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ee:	2302      	movs	r3, #2
 80010f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f2:	2302      	movs	r3, #2
 80010f4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010f6:	f107 0310 	add.w	r3, r7, #16
 80010fa:	4619      	mov	r1, r3
 80010fc:	4805      	ldr	r0, [pc, #20]	@ (8001114 <HAL_TIM_MspPostInit+0x64>)
 80010fe:	f000 f9a9 	bl	8001454 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001102:	bf00      	nop
 8001104:	3720      	adds	r7, #32
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	40012c00 	.word	0x40012c00
 8001110:	40021000 	.word	0x40021000
 8001114:	40010800 	.word	0x40010800

08001118 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800111c:	bf00      	nop
 800111e:	e7fd      	b.n	800111c <NMI_Handler+0x4>

08001120 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001124:	bf00      	nop
 8001126:	e7fd      	b.n	8001124 <HardFault_Handler+0x4>

08001128 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800112c:	bf00      	nop
 800112e:	e7fd      	b.n	800112c <MemManage_Handler+0x4>

08001130 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001134:	bf00      	nop
 8001136:	e7fd      	b.n	8001134 <BusFault_Handler+0x4>

08001138 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800113c:	bf00      	nop
 800113e:	e7fd      	b.n	800113c <UsageFault_Handler+0x4>

08001140 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001144:	bf00      	nop
 8001146:	46bd      	mov	sp, r7
 8001148:	bc80      	pop	{r7}
 800114a:	4770      	bx	lr

0800114c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001150:	bf00      	nop
 8001152:	46bd      	mov	sp, r7
 8001154:	bc80      	pop	{r7}
 8001156:	4770      	bx	lr

08001158 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800115c:	bf00      	nop
 800115e:	46bd      	mov	sp, r7
 8001160:	bc80      	pop	{r7}
 8001162:	4770      	bx	lr

08001164 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001168:	f000 f874 	bl	8001254 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800116c:	bf00      	nop
 800116e:	bd80      	pop	{r7, pc}

08001170 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001174:	bf00      	nop
 8001176:	46bd      	mov	sp, r7
 8001178:	bc80      	pop	{r7}
 800117a:	4770      	bx	lr

0800117c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800117c:	f7ff fff8 	bl	8001170 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001180:	480b      	ldr	r0, [pc, #44]	@ (80011b0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001182:	490c      	ldr	r1, [pc, #48]	@ (80011b4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001184:	4a0c      	ldr	r2, [pc, #48]	@ (80011b8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001186:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001188:	e002      	b.n	8001190 <LoopCopyDataInit>

0800118a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800118a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800118c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800118e:	3304      	adds	r3, #4

08001190 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001190:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001192:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001194:	d3f9      	bcc.n	800118a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001196:	4a09      	ldr	r2, [pc, #36]	@ (80011bc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001198:	4c09      	ldr	r4, [pc, #36]	@ (80011c0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800119a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800119c:	e001      	b.n	80011a2 <LoopFillZerobss>

0800119e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800119e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011a0:	3204      	adds	r2, #4

080011a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011a4:	d3fb      	bcc.n	800119e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011a6:	f001 fd0b 	bl	8002bc0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80011aa:	f7ff fd99 	bl	8000ce0 <main>
  bx lr
 80011ae:	4770      	bx	lr
  ldr r0, =_sdata
 80011b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011b4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80011b8:	08003dd8 	.word	0x08003dd8
  ldr r2, =_sbss
 80011bc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80011c0:	20000074 	.word	0x20000074

080011c4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80011c4:	e7fe      	b.n	80011c4 <ADC1_2_IRQHandler>
	...

080011c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011cc:	4b08      	ldr	r3, [pc, #32]	@ (80011f0 <HAL_Init+0x28>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4a07      	ldr	r2, [pc, #28]	@ (80011f0 <HAL_Init+0x28>)
 80011d2:	f043 0310 	orr.w	r3, r3, #16
 80011d6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011d8:	2003      	movs	r0, #3
 80011da:	f000 f907 	bl	80013ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011de:	200f      	movs	r0, #15
 80011e0:	f000 f808 	bl	80011f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011e4:	f7ff ff14 	bl	8001010 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011e8:	2300      	movs	r3, #0
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	40022000 	.word	0x40022000

080011f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011fc:	4b12      	ldr	r3, [pc, #72]	@ (8001248 <HAL_InitTick+0x54>)
 80011fe:	681a      	ldr	r2, [r3, #0]
 8001200:	4b12      	ldr	r3, [pc, #72]	@ (800124c <HAL_InitTick+0x58>)
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	4619      	mov	r1, r3
 8001206:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800120a:	fbb3 f3f1 	udiv	r3, r3, r1
 800120e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001212:	4618      	mov	r0, r3
 8001214:	f000 f911 	bl	800143a <HAL_SYSTICK_Config>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d001      	beq.n	8001222 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800121e:	2301      	movs	r3, #1
 8001220:	e00e      	b.n	8001240 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	2b0f      	cmp	r3, #15
 8001226:	d80a      	bhi.n	800123e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001228:	2200      	movs	r2, #0
 800122a:	6879      	ldr	r1, [r7, #4]
 800122c:	f04f 30ff 	mov.w	r0, #4294967295
 8001230:	f000 f8e7 	bl	8001402 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001234:	4a06      	ldr	r2, [pc, #24]	@ (8001250 <HAL_InitTick+0x5c>)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800123a:	2300      	movs	r3, #0
 800123c:	e000      	b.n	8001240 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800123e:	2301      	movs	r3, #1
}
 8001240:	4618      	mov	r0, r3
 8001242:	3708      	adds	r7, #8
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}
 8001248:	20000000 	.word	0x20000000
 800124c:	20000008 	.word	0x20000008
 8001250:	20000004 	.word	0x20000004

08001254 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001258:	4b05      	ldr	r3, [pc, #20]	@ (8001270 <HAL_IncTick+0x1c>)
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	461a      	mov	r2, r3
 800125e:	4b05      	ldr	r3, [pc, #20]	@ (8001274 <HAL_IncTick+0x20>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	4413      	add	r3, r2
 8001264:	4a03      	ldr	r2, [pc, #12]	@ (8001274 <HAL_IncTick+0x20>)
 8001266:	6013      	str	r3, [r2, #0]
}
 8001268:	bf00      	nop
 800126a:	46bd      	mov	sp, r7
 800126c:	bc80      	pop	{r7}
 800126e:	4770      	bx	lr
 8001270:	20000008 	.word	0x20000008
 8001274:	20000070 	.word	0x20000070

08001278 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0
  return uwTick;
 800127c:	4b02      	ldr	r3, [pc, #8]	@ (8001288 <HAL_GetTick+0x10>)
 800127e:	681b      	ldr	r3, [r3, #0]
}
 8001280:	4618      	mov	r0, r3
 8001282:	46bd      	mov	sp, r7
 8001284:	bc80      	pop	{r7}
 8001286:	4770      	bx	lr
 8001288:	20000070 	.word	0x20000070

0800128c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800128c:	b480      	push	{r7}
 800128e:	b085      	sub	sp, #20
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	f003 0307 	and.w	r3, r3, #7
 800129a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800129c:	4b0c      	ldr	r3, [pc, #48]	@ (80012d0 <__NVIC_SetPriorityGrouping+0x44>)
 800129e:	68db      	ldr	r3, [r3, #12]
 80012a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012a2:	68ba      	ldr	r2, [r7, #8]
 80012a4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80012a8:	4013      	ands	r3, r2
 80012aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012b0:	68bb      	ldr	r3, [r7, #8]
 80012b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012b4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80012b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80012bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012be:	4a04      	ldr	r2, [pc, #16]	@ (80012d0 <__NVIC_SetPriorityGrouping+0x44>)
 80012c0:	68bb      	ldr	r3, [r7, #8]
 80012c2:	60d3      	str	r3, [r2, #12]
}
 80012c4:	bf00      	nop
 80012c6:	3714      	adds	r7, #20
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bc80      	pop	{r7}
 80012cc:	4770      	bx	lr
 80012ce:	bf00      	nop
 80012d0:	e000ed00 	.word	0xe000ed00

080012d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012d8:	4b04      	ldr	r3, [pc, #16]	@ (80012ec <__NVIC_GetPriorityGrouping+0x18>)
 80012da:	68db      	ldr	r3, [r3, #12]
 80012dc:	0a1b      	lsrs	r3, r3, #8
 80012de:	f003 0307 	and.w	r3, r3, #7
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bc80      	pop	{r7}
 80012e8:	4770      	bx	lr
 80012ea:	bf00      	nop
 80012ec:	e000ed00 	.word	0xe000ed00

080012f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b083      	sub	sp, #12
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	4603      	mov	r3, r0
 80012f8:	6039      	str	r1, [r7, #0]
 80012fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001300:	2b00      	cmp	r3, #0
 8001302:	db0a      	blt.n	800131a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	b2da      	uxtb	r2, r3
 8001308:	490c      	ldr	r1, [pc, #48]	@ (800133c <__NVIC_SetPriority+0x4c>)
 800130a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800130e:	0112      	lsls	r2, r2, #4
 8001310:	b2d2      	uxtb	r2, r2
 8001312:	440b      	add	r3, r1
 8001314:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001318:	e00a      	b.n	8001330 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	b2da      	uxtb	r2, r3
 800131e:	4908      	ldr	r1, [pc, #32]	@ (8001340 <__NVIC_SetPriority+0x50>)
 8001320:	79fb      	ldrb	r3, [r7, #7]
 8001322:	f003 030f 	and.w	r3, r3, #15
 8001326:	3b04      	subs	r3, #4
 8001328:	0112      	lsls	r2, r2, #4
 800132a:	b2d2      	uxtb	r2, r2
 800132c:	440b      	add	r3, r1
 800132e:	761a      	strb	r2, [r3, #24]
}
 8001330:	bf00      	nop
 8001332:	370c      	adds	r7, #12
 8001334:	46bd      	mov	sp, r7
 8001336:	bc80      	pop	{r7}
 8001338:	4770      	bx	lr
 800133a:	bf00      	nop
 800133c:	e000e100 	.word	0xe000e100
 8001340:	e000ed00 	.word	0xe000ed00

08001344 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001344:	b480      	push	{r7}
 8001346:	b089      	sub	sp, #36	@ 0x24
 8001348:	af00      	add	r7, sp, #0
 800134a:	60f8      	str	r0, [r7, #12]
 800134c:	60b9      	str	r1, [r7, #8]
 800134e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	f003 0307 	and.w	r3, r3, #7
 8001356:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001358:	69fb      	ldr	r3, [r7, #28]
 800135a:	f1c3 0307 	rsb	r3, r3, #7
 800135e:	2b04      	cmp	r3, #4
 8001360:	bf28      	it	cs
 8001362:	2304      	movcs	r3, #4
 8001364:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001366:	69fb      	ldr	r3, [r7, #28]
 8001368:	3304      	adds	r3, #4
 800136a:	2b06      	cmp	r3, #6
 800136c:	d902      	bls.n	8001374 <NVIC_EncodePriority+0x30>
 800136e:	69fb      	ldr	r3, [r7, #28]
 8001370:	3b03      	subs	r3, #3
 8001372:	e000      	b.n	8001376 <NVIC_EncodePriority+0x32>
 8001374:	2300      	movs	r3, #0
 8001376:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001378:	f04f 32ff 	mov.w	r2, #4294967295
 800137c:	69bb      	ldr	r3, [r7, #24]
 800137e:	fa02 f303 	lsl.w	r3, r2, r3
 8001382:	43da      	mvns	r2, r3
 8001384:	68bb      	ldr	r3, [r7, #8]
 8001386:	401a      	ands	r2, r3
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800138c:	f04f 31ff 	mov.w	r1, #4294967295
 8001390:	697b      	ldr	r3, [r7, #20]
 8001392:	fa01 f303 	lsl.w	r3, r1, r3
 8001396:	43d9      	mvns	r1, r3
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800139c:	4313      	orrs	r3, r2
         );
}
 800139e:	4618      	mov	r0, r3
 80013a0:	3724      	adds	r7, #36	@ 0x24
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bc80      	pop	{r7}
 80013a6:	4770      	bx	lr

080013a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	3b01      	subs	r3, #1
 80013b4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80013b8:	d301      	bcc.n	80013be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013ba:	2301      	movs	r3, #1
 80013bc:	e00f      	b.n	80013de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013be:	4a0a      	ldr	r2, [pc, #40]	@ (80013e8 <SysTick_Config+0x40>)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	3b01      	subs	r3, #1
 80013c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013c6:	210f      	movs	r1, #15
 80013c8:	f04f 30ff 	mov.w	r0, #4294967295
 80013cc:	f7ff ff90 	bl	80012f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013d0:	4b05      	ldr	r3, [pc, #20]	@ (80013e8 <SysTick_Config+0x40>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013d6:	4b04      	ldr	r3, [pc, #16]	@ (80013e8 <SysTick_Config+0x40>)
 80013d8:	2207      	movs	r2, #7
 80013da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013dc:	2300      	movs	r3, #0
}
 80013de:	4618      	mov	r0, r3
 80013e0:	3708      	adds	r7, #8
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	e000e010 	.word	0xe000e010

080013ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b082      	sub	sp, #8
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013f4:	6878      	ldr	r0, [r7, #4]
 80013f6:	f7ff ff49 	bl	800128c <__NVIC_SetPriorityGrouping>
}
 80013fa:	bf00      	nop
 80013fc:	3708      	adds	r7, #8
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}

08001402 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001402:	b580      	push	{r7, lr}
 8001404:	b086      	sub	sp, #24
 8001406:	af00      	add	r7, sp, #0
 8001408:	4603      	mov	r3, r0
 800140a:	60b9      	str	r1, [r7, #8]
 800140c:	607a      	str	r2, [r7, #4]
 800140e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001410:	2300      	movs	r3, #0
 8001412:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001414:	f7ff ff5e 	bl	80012d4 <__NVIC_GetPriorityGrouping>
 8001418:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800141a:	687a      	ldr	r2, [r7, #4]
 800141c:	68b9      	ldr	r1, [r7, #8]
 800141e:	6978      	ldr	r0, [r7, #20]
 8001420:	f7ff ff90 	bl	8001344 <NVIC_EncodePriority>
 8001424:	4602      	mov	r2, r0
 8001426:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800142a:	4611      	mov	r1, r2
 800142c:	4618      	mov	r0, r3
 800142e:	f7ff ff5f 	bl	80012f0 <__NVIC_SetPriority>
}
 8001432:	bf00      	nop
 8001434:	3718      	adds	r7, #24
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}

0800143a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800143a:	b580      	push	{r7, lr}
 800143c:	b082      	sub	sp, #8
 800143e:	af00      	add	r7, sp, #0
 8001440:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001442:	6878      	ldr	r0, [r7, #4]
 8001444:	f7ff ffb0 	bl	80013a8 <SysTick_Config>
 8001448:	4603      	mov	r3, r0
}
 800144a:	4618      	mov	r0, r3
 800144c:	3708      	adds	r7, #8
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
	...

08001454 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001454:	b480      	push	{r7}
 8001456:	b08b      	sub	sp, #44	@ 0x2c
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
 800145c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800145e:	2300      	movs	r3, #0
 8001460:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001462:	2300      	movs	r3, #0
 8001464:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001466:	e169      	b.n	800173c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001468:	2201      	movs	r2, #1
 800146a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800146c:	fa02 f303 	lsl.w	r3, r2, r3
 8001470:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	69fa      	ldr	r2, [r7, #28]
 8001478:	4013      	ands	r3, r2
 800147a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800147c:	69ba      	ldr	r2, [r7, #24]
 800147e:	69fb      	ldr	r3, [r7, #28]
 8001480:	429a      	cmp	r2, r3
 8001482:	f040 8158 	bne.w	8001736 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	4a9a      	ldr	r2, [pc, #616]	@ (80016f4 <HAL_GPIO_Init+0x2a0>)
 800148c:	4293      	cmp	r3, r2
 800148e:	d05e      	beq.n	800154e <HAL_GPIO_Init+0xfa>
 8001490:	4a98      	ldr	r2, [pc, #608]	@ (80016f4 <HAL_GPIO_Init+0x2a0>)
 8001492:	4293      	cmp	r3, r2
 8001494:	d875      	bhi.n	8001582 <HAL_GPIO_Init+0x12e>
 8001496:	4a98      	ldr	r2, [pc, #608]	@ (80016f8 <HAL_GPIO_Init+0x2a4>)
 8001498:	4293      	cmp	r3, r2
 800149a:	d058      	beq.n	800154e <HAL_GPIO_Init+0xfa>
 800149c:	4a96      	ldr	r2, [pc, #600]	@ (80016f8 <HAL_GPIO_Init+0x2a4>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d86f      	bhi.n	8001582 <HAL_GPIO_Init+0x12e>
 80014a2:	4a96      	ldr	r2, [pc, #600]	@ (80016fc <HAL_GPIO_Init+0x2a8>)
 80014a4:	4293      	cmp	r3, r2
 80014a6:	d052      	beq.n	800154e <HAL_GPIO_Init+0xfa>
 80014a8:	4a94      	ldr	r2, [pc, #592]	@ (80016fc <HAL_GPIO_Init+0x2a8>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d869      	bhi.n	8001582 <HAL_GPIO_Init+0x12e>
 80014ae:	4a94      	ldr	r2, [pc, #592]	@ (8001700 <HAL_GPIO_Init+0x2ac>)
 80014b0:	4293      	cmp	r3, r2
 80014b2:	d04c      	beq.n	800154e <HAL_GPIO_Init+0xfa>
 80014b4:	4a92      	ldr	r2, [pc, #584]	@ (8001700 <HAL_GPIO_Init+0x2ac>)
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d863      	bhi.n	8001582 <HAL_GPIO_Init+0x12e>
 80014ba:	4a92      	ldr	r2, [pc, #584]	@ (8001704 <HAL_GPIO_Init+0x2b0>)
 80014bc:	4293      	cmp	r3, r2
 80014be:	d046      	beq.n	800154e <HAL_GPIO_Init+0xfa>
 80014c0:	4a90      	ldr	r2, [pc, #576]	@ (8001704 <HAL_GPIO_Init+0x2b0>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d85d      	bhi.n	8001582 <HAL_GPIO_Init+0x12e>
 80014c6:	2b12      	cmp	r3, #18
 80014c8:	d82a      	bhi.n	8001520 <HAL_GPIO_Init+0xcc>
 80014ca:	2b12      	cmp	r3, #18
 80014cc:	d859      	bhi.n	8001582 <HAL_GPIO_Init+0x12e>
 80014ce:	a201      	add	r2, pc, #4	@ (adr r2, 80014d4 <HAL_GPIO_Init+0x80>)
 80014d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014d4:	0800154f 	.word	0x0800154f
 80014d8:	08001529 	.word	0x08001529
 80014dc:	0800153b 	.word	0x0800153b
 80014e0:	0800157d 	.word	0x0800157d
 80014e4:	08001583 	.word	0x08001583
 80014e8:	08001583 	.word	0x08001583
 80014ec:	08001583 	.word	0x08001583
 80014f0:	08001583 	.word	0x08001583
 80014f4:	08001583 	.word	0x08001583
 80014f8:	08001583 	.word	0x08001583
 80014fc:	08001583 	.word	0x08001583
 8001500:	08001583 	.word	0x08001583
 8001504:	08001583 	.word	0x08001583
 8001508:	08001583 	.word	0x08001583
 800150c:	08001583 	.word	0x08001583
 8001510:	08001583 	.word	0x08001583
 8001514:	08001583 	.word	0x08001583
 8001518:	08001531 	.word	0x08001531
 800151c:	08001545 	.word	0x08001545
 8001520:	4a79      	ldr	r2, [pc, #484]	@ (8001708 <HAL_GPIO_Init+0x2b4>)
 8001522:	4293      	cmp	r3, r2
 8001524:	d013      	beq.n	800154e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001526:	e02c      	b.n	8001582 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	68db      	ldr	r3, [r3, #12]
 800152c:	623b      	str	r3, [r7, #32]
          break;
 800152e:	e029      	b.n	8001584 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	68db      	ldr	r3, [r3, #12]
 8001534:	3304      	adds	r3, #4
 8001536:	623b      	str	r3, [r7, #32]
          break;
 8001538:	e024      	b.n	8001584 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	68db      	ldr	r3, [r3, #12]
 800153e:	3308      	adds	r3, #8
 8001540:	623b      	str	r3, [r7, #32]
          break;
 8001542:	e01f      	b.n	8001584 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	68db      	ldr	r3, [r3, #12]
 8001548:	330c      	adds	r3, #12
 800154a:	623b      	str	r3, [r7, #32]
          break;
 800154c:	e01a      	b.n	8001584 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	689b      	ldr	r3, [r3, #8]
 8001552:	2b00      	cmp	r3, #0
 8001554:	d102      	bne.n	800155c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001556:	2304      	movs	r3, #4
 8001558:	623b      	str	r3, [r7, #32]
          break;
 800155a:	e013      	b.n	8001584 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	689b      	ldr	r3, [r3, #8]
 8001560:	2b01      	cmp	r3, #1
 8001562:	d105      	bne.n	8001570 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001564:	2308      	movs	r3, #8
 8001566:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	69fa      	ldr	r2, [r7, #28]
 800156c:	611a      	str	r2, [r3, #16]
          break;
 800156e:	e009      	b.n	8001584 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001570:	2308      	movs	r3, #8
 8001572:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	69fa      	ldr	r2, [r7, #28]
 8001578:	615a      	str	r2, [r3, #20]
          break;
 800157a:	e003      	b.n	8001584 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800157c:	2300      	movs	r3, #0
 800157e:	623b      	str	r3, [r7, #32]
          break;
 8001580:	e000      	b.n	8001584 <HAL_GPIO_Init+0x130>
          break;
 8001582:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001584:	69bb      	ldr	r3, [r7, #24]
 8001586:	2bff      	cmp	r3, #255	@ 0xff
 8001588:	d801      	bhi.n	800158e <HAL_GPIO_Init+0x13a>
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	e001      	b.n	8001592 <HAL_GPIO_Init+0x13e>
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	3304      	adds	r3, #4
 8001592:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001594:	69bb      	ldr	r3, [r7, #24]
 8001596:	2bff      	cmp	r3, #255	@ 0xff
 8001598:	d802      	bhi.n	80015a0 <HAL_GPIO_Init+0x14c>
 800159a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800159c:	009b      	lsls	r3, r3, #2
 800159e:	e002      	b.n	80015a6 <HAL_GPIO_Init+0x152>
 80015a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015a2:	3b08      	subs	r3, #8
 80015a4:	009b      	lsls	r3, r3, #2
 80015a6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80015a8:	697b      	ldr	r3, [r7, #20]
 80015aa:	681a      	ldr	r2, [r3, #0]
 80015ac:	210f      	movs	r1, #15
 80015ae:	693b      	ldr	r3, [r7, #16]
 80015b0:	fa01 f303 	lsl.w	r3, r1, r3
 80015b4:	43db      	mvns	r3, r3
 80015b6:	401a      	ands	r2, r3
 80015b8:	6a39      	ldr	r1, [r7, #32]
 80015ba:	693b      	ldr	r3, [r7, #16]
 80015bc:	fa01 f303 	lsl.w	r3, r1, r3
 80015c0:	431a      	orrs	r2, r3
 80015c2:	697b      	ldr	r3, [r7, #20]
 80015c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	f000 80b1 	beq.w	8001736 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80015d4:	4b4d      	ldr	r3, [pc, #308]	@ (800170c <HAL_GPIO_Init+0x2b8>)
 80015d6:	699b      	ldr	r3, [r3, #24]
 80015d8:	4a4c      	ldr	r2, [pc, #304]	@ (800170c <HAL_GPIO_Init+0x2b8>)
 80015da:	f043 0301 	orr.w	r3, r3, #1
 80015de:	6193      	str	r3, [r2, #24]
 80015e0:	4b4a      	ldr	r3, [pc, #296]	@ (800170c <HAL_GPIO_Init+0x2b8>)
 80015e2:	699b      	ldr	r3, [r3, #24]
 80015e4:	f003 0301 	and.w	r3, r3, #1
 80015e8:	60bb      	str	r3, [r7, #8]
 80015ea:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80015ec:	4a48      	ldr	r2, [pc, #288]	@ (8001710 <HAL_GPIO_Init+0x2bc>)
 80015ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015f0:	089b      	lsrs	r3, r3, #2
 80015f2:	3302      	adds	r3, #2
 80015f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015f8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80015fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015fc:	f003 0303 	and.w	r3, r3, #3
 8001600:	009b      	lsls	r3, r3, #2
 8001602:	220f      	movs	r2, #15
 8001604:	fa02 f303 	lsl.w	r3, r2, r3
 8001608:	43db      	mvns	r3, r3
 800160a:	68fa      	ldr	r2, [r7, #12]
 800160c:	4013      	ands	r3, r2
 800160e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	4a40      	ldr	r2, [pc, #256]	@ (8001714 <HAL_GPIO_Init+0x2c0>)
 8001614:	4293      	cmp	r3, r2
 8001616:	d013      	beq.n	8001640 <HAL_GPIO_Init+0x1ec>
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	4a3f      	ldr	r2, [pc, #252]	@ (8001718 <HAL_GPIO_Init+0x2c4>)
 800161c:	4293      	cmp	r3, r2
 800161e:	d00d      	beq.n	800163c <HAL_GPIO_Init+0x1e8>
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	4a3e      	ldr	r2, [pc, #248]	@ (800171c <HAL_GPIO_Init+0x2c8>)
 8001624:	4293      	cmp	r3, r2
 8001626:	d007      	beq.n	8001638 <HAL_GPIO_Init+0x1e4>
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	4a3d      	ldr	r2, [pc, #244]	@ (8001720 <HAL_GPIO_Init+0x2cc>)
 800162c:	4293      	cmp	r3, r2
 800162e:	d101      	bne.n	8001634 <HAL_GPIO_Init+0x1e0>
 8001630:	2303      	movs	r3, #3
 8001632:	e006      	b.n	8001642 <HAL_GPIO_Init+0x1ee>
 8001634:	2304      	movs	r3, #4
 8001636:	e004      	b.n	8001642 <HAL_GPIO_Init+0x1ee>
 8001638:	2302      	movs	r3, #2
 800163a:	e002      	b.n	8001642 <HAL_GPIO_Init+0x1ee>
 800163c:	2301      	movs	r3, #1
 800163e:	e000      	b.n	8001642 <HAL_GPIO_Init+0x1ee>
 8001640:	2300      	movs	r3, #0
 8001642:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001644:	f002 0203 	and.w	r2, r2, #3
 8001648:	0092      	lsls	r2, r2, #2
 800164a:	4093      	lsls	r3, r2
 800164c:	68fa      	ldr	r2, [r7, #12]
 800164e:	4313      	orrs	r3, r2
 8001650:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001652:	492f      	ldr	r1, [pc, #188]	@ (8001710 <HAL_GPIO_Init+0x2bc>)
 8001654:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001656:	089b      	lsrs	r3, r3, #2
 8001658:	3302      	adds	r3, #2
 800165a:	68fa      	ldr	r2, [r7, #12]
 800165c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001668:	2b00      	cmp	r3, #0
 800166a:	d006      	beq.n	800167a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800166c:	4b2d      	ldr	r3, [pc, #180]	@ (8001724 <HAL_GPIO_Init+0x2d0>)
 800166e:	689a      	ldr	r2, [r3, #8]
 8001670:	492c      	ldr	r1, [pc, #176]	@ (8001724 <HAL_GPIO_Init+0x2d0>)
 8001672:	69bb      	ldr	r3, [r7, #24]
 8001674:	4313      	orrs	r3, r2
 8001676:	608b      	str	r3, [r1, #8]
 8001678:	e006      	b.n	8001688 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800167a:	4b2a      	ldr	r3, [pc, #168]	@ (8001724 <HAL_GPIO_Init+0x2d0>)
 800167c:	689a      	ldr	r2, [r3, #8]
 800167e:	69bb      	ldr	r3, [r7, #24]
 8001680:	43db      	mvns	r3, r3
 8001682:	4928      	ldr	r1, [pc, #160]	@ (8001724 <HAL_GPIO_Init+0x2d0>)
 8001684:	4013      	ands	r3, r2
 8001686:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001690:	2b00      	cmp	r3, #0
 8001692:	d006      	beq.n	80016a2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001694:	4b23      	ldr	r3, [pc, #140]	@ (8001724 <HAL_GPIO_Init+0x2d0>)
 8001696:	68da      	ldr	r2, [r3, #12]
 8001698:	4922      	ldr	r1, [pc, #136]	@ (8001724 <HAL_GPIO_Init+0x2d0>)
 800169a:	69bb      	ldr	r3, [r7, #24]
 800169c:	4313      	orrs	r3, r2
 800169e:	60cb      	str	r3, [r1, #12]
 80016a0:	e006      	b.n	80016b0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80016a2:	4b20      	ldr	r3, [pc, #128]	@ (8001724 <HAL_GPIO_Init+0x2d0>)
 80016a4:	68da      	ldr	r2, [r3, #12]
 80016a6:	69bb      	ldr	r3, [r7, #24]
 80016a8:	43db      	mvns	r3, r3
 80016aa:	491e      	ldr	r1, [pc, #120]	@ (8001724 <HAL_GPIO_Init+0x2d0>)
 80016ac:	4013      	ands	r3, r2
 80016ae:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d006      	beq.n	80016ca <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80016bc:	4b19      	ldr	r3, [pc, #100]	@ (8001724 <HAL_GPIO_Init+0x2d0>)
 80016be:	685a      	ldr	r2, [r3, #4]
 80016c0:	4918      	ldr	r1, [pc, #96]	@ (8001724 <HAL_GPIO_Init+0x2d0>)
 80016c2:	69bb      	ldr	r3, [r7, #24]
 80016c4:	4313      	orrs	r3, r2
 80016c6:	604b      	str	r3, [r1, #4]
 80016c8:	e006      	b.n	80016d8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80016ca:	4b16      	ldr	r3, [pc, #88]	@ (8001724 <HAL_GPIO_Init+0x2d0>)
 80016cc:	685a      	ldr	r2, [r3, #4]
 80016ce:	69bb      	ldr	r3, [r7, #24]
 80016d0:	43db      	mvns	r3, r3
 80016d2:	4914      	ldr	r1, [pc, #80]	@ (8001724 <HAL_GPIO_Init+0x2d0>)
 80016d4:	4013      	ands	r3, r2
 80016d6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d021      	beq.n	8001728 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80016e4:	4b0f      	ldr	r3, [pc, #60]	@ (8001724 <HAL_GPIO_Init+0x2d0>)
 80016e6:	681a      	ldr	r2, [r3, #0]
 80016e8:	490e      	ldr	r1, [pc, #56]	@ (8001724 <HAL_GPIO_Init+0x2d0>)
 80016ea:	69bb      	ldr	r3, [r7, #24]
 80016ec:	4313      	orrs	r3, r2
 80016ee:	600b      	str	r3, [r1, #0]
 80016f0:	e021      	b.n	8001736 <HAL_GPIO_Init+0x2e2>
 80016f2:	bf00      	nop
 80016f4:	10320000 	.word	0x10320000
 80016f8:	10310000 	.word	0x10310000
 80016fc:	10220000 	.word	0x10220000
 8001700:	10210000 	.word	0x10210000
 8001704:	10120000 	.word	0x10120000
 8001708:	10110000 	.word	0x10110000
 800170c:	40021000 	.word	0x40021000
 8001710:	40010000 	.word	0x40010000
 8001714:	40010800 	.word	0x40010800
 8001718:	40010c00 	.word	0x40010c00
 800171c:	40011000 	.word	0x40011000
 8001720:	40011400 	.word	0x40011400
 8001724:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001728:	4b0b      	ldr	r3, [pc, #44]	@ (8001758 <HAL_GPIO_Init+0x304>)
 800172a:	681a      	ldr	r2, [r3, #0]
 800172c:	69bb      	ldr	r3, [r7, #24]
 800172e:	43db      	mvns	r3, r3
 8001730:	4909      	ldr	r1, [pc, #36]	@ (8001758 <HAL_GPIO_Init+0x304>)
 8001732:	4013      	ands	r3, r2
 8001734:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001736:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001738:	3301      	adds	r3, #1
 800173a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	681a      	ldr	r2, [r3, #0]
 8001740:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001742:	fa22 f303 	lsr.w	r3, r2, r3
 8001746:	2b00      	cmp	r3, #0
 8001748:	f47f ae8e 	bne.w	8001468 <HAL_GPIO_Init+0x14>
  }
}
 800174c:	bf00      	nop
 800174e:	bf00      	nop
 8001750:	372c      	adds	r7, #44	@ 0x2c
 8001752:	46bd      	mov	sp, r7
 8001754:	bc80      	pop	{r7}
 8001756:	4770      	bx	lr
 8001758:	40010400 	.word	0x40010400

0800175c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800175c:	b480      	push	{r7}
 800175e:	b083      	sub	sp, #12
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
 8001764:	460b      	mov	r3, r1
 8001766:	807b      	strh	r3, [r7, #2]
 8001768:	4613      	mov	r3, r2
 800176a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800176c:	787b      	ldrb	r3, [r7, #1]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d003      	beq.n	800177a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001772:	887a      	ldrh	r2, [r7, #2]
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001778:	e003      	b.n	8001782 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800177a:	887b      	ldrh	r3, [r7, #2]
 800177c:	041a      	lsls	r2, r3, #16
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	611a      	str	r2, [r3, #16]
}
 8001782:	bf00      	nop
 8001784:	370c      	adds	r7, #12
 8001786:	46bd      	mov	sp, r7
 8001788:	bc80      	pop	{r7}
 800178a:	4770      	bx	lr

0800178c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b086      	sub	sp, #24
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2b00      	cmp	r3, #0
 8001798:	d101      	bne.n	800179e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800179a:	2301      	movs	r3, #1
 800179c:	e272      	b.n	8001c84 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f003 0301 	and.w	r3, r3, #1
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	f000 8087 	beq.w	80018ba <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80017ac:	4b92      	ldr	r3, [pc, #584]	@ (80019f8 <HAL_RCC_OscConfig+0x26c>)
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	f003 030c 	and.w	r3, r3, #12
 80017b4:	2b04      	cmp	r3, #4
 80017b6:	d00c      	beq.n	80017d2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80017b8:	4b8f      	ldr	r3, [pc, #572]	@ (80019f8 <HAL_RCC_OscConfig+0x26c>)
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	f003 030c 	and.w	r3, r3, #12
 80017c0:	2b08      	cmp	r3, #8
 80017c2:	d112      	bne.n	80017ea <HAL_RCC_OscConfig+0x5e>
 80017c4:	4b8c      	ldr	r3, [pc, #560]	@ (80019f8 <HAL_RCC_OscConfig+0x26c>)
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80017cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80017d0:	d10b      	bne.n	80017ea <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017d2:	4b89      	ldr	r3, [pc, #548]	@ (80019f8 <HAL_RCC_OscConfig+0x26c>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d06c      	beq.n	80018b8 <HAL_RCC_OscConfig+0x12c>
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d168      	bne.n	80018b8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80017e6:	2301      	movs	r3, #1
 80017e8:	e24c      	b.n	8001c84 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80017f2:	d106      	bne.n	8001802 <HAL_RCC_OscConfig+0x76>
 80017f4:	4b80      	ldr	r3, [pc, #512]	@ (80019f8 <HAL_RCC_OscConfig+0x26c>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a7f      	ldr	r2, [pc, #508]	@ (80019f8 <HAL_RCC_OscConfig+0x26c>)
 80017fa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80017fe:	6013      	str	r3, [r2, #0]
 8001800:	e02e      	b.n	8001860 <HAL_RCC_OscConfig+0xd4>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d10c      	bne.n	8001824 <HAL_RCC_OscConfig+0x98>
 800180a:	4b7b      	ldr	r3, [pc, #492]	@ (80019f8 <HAL_RCC_OscConfig+0x26c>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4a7a      	ldr	r2, [pc, #488]	@ (80019f8 <HAL_RCC_OscConfig+0x26c>)
 8001810:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001814:	6013      	str	r3, [r2, #0]
 8001816:	4b78      	ldr	r3, [pc, #480]	@ (80019f8 <HAL_RCC_OscConfig+0x26c>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4a77      	ldr	r2, [pc, #476]	@ (80019f8 <HAL_RCC_OscConfig+0x26c>)
 800181c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001820:	6013      	str	r3, [r2, #0]
 8001822:	e01d      	b.n	8001860 <HAL_RCC_OscConfig+0xd4>
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800182c:	d10c      	bne.n	8001848 <HAL_RCC_OscConfig+0xbc>
 800182e:	4b72      	ldr	r3, [pc, #456]	@ (80019f8 <HAL_RCC_OscConfig+0x26c>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4a71      	ldr	r2, [pc, #452]	@ (80019f8 <HAL_RCC_OscConfig+0x26c>)
 8001834:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001838:	6013      	str	r3, [r2, #0]
 800183a:	4b6f      	ldr	r3, [pc, #444]	@ (80019f8 <HAL_RCC_OscConfig+0x26c>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4a6e      	ldr	r2, [pc, #440]	@ (80019f8 <HAL_RCC_OscConfig+0x26c>)
 8001840:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001844:	6013      	str	r3, [r2, #0]
 8001846:	e00b      	b.n	8001860 <HAL_RCC_OscConfig+0xd4>
 8001848:	4b6b      	ldr	r3, [pc, #428]	@ (80019f8 <HAL_RCC_OscConfig+0x26c>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a6a      	ldr	r2, [pc, #424]	@ (80019f8 <HAL_RCC_OscConfig+0x26c>)
 800184e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001852:	6013      	str	r3, [r2, #0]
 8001854:	4b68      	ldr	r3, [pc, #416]	@ (80019f8 <HAL_RCC_OscConfig+0x26c>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4a67      	ldr	r2, [pc, #412]	@ (80019f8 <HAL_RCC_OscConfig+0x26c>)
 800185a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800185e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d013      	beq.n	8001890 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001868:	f7ff fd06 	bl	8001278 <HAL_GetTick>
 800186c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800186e:	e008      	b.n	8001882 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001870:	f7ff fd02 	bl	8001278 <HAL_GetTick>
 8001874:	4602      	mov	r2, r0
 8001876:	693b      	ldr	r3, [r7, #16]
 8001878:	1ad3      	subs	r3, r2, r3
 800187a:	2b64      	cmp	r3, #100	@ 0x64
 800187c:	d901      	bls.n	8001882 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800187e:	2303      	movs	r3, #3
 8001880:	e200      	b.n	8001c84 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001882:	4b5d      	ldr	r3, [pc, #372]	@ (80019f8 <HAL_RCC_OscConfig+0x26c>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800188a:	2b00      	cmp	r3, #0
 800188c:	d0f0      	beq.n	8001870 <HAL_RCC_OscConfig+0xe4>
 800188e:	e014      	b.n	80018ba <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001890:	f7ff fcf2 	bl	8001278 <HAL_GetTick>
 8001894:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001896:	e008      	b.n	80018aa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001898:	f7ff fcee 	bl	8001278 <HAL_GetTick>
 800189c:	4602      	mov	r2, r0
 800189e:	693b      	ldr	r3, [r7, #16]
 80018a0:	1ad3      	subs	r3, r2, r3
 80018a2:	2b64      	cmp	r3, #100	@ 0x64
 80018a4:	d901      	bls.n	80018aa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80018a6:	2303      	movs	r3, #3
 80018a8:	e1ec      	b.n	8001c84 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018aa:	4b53      	ldr	r3, [pc, #332]	@ (80019f8 <HAL_RCC_OscConfig+0x26c>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d1f0      	bne.n	8001898 <HAL_RCC_OscConfig+0x10c>
 80018b6:	e000      	b.n	80018ba <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f003 0302 	and.w	r3, r3, #2
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d063      	beq.n	800198e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80018c6:	4b4c      	ldr	r3, [pc, #304]	@ (80019f8 <HAL_RCC_OscConfig+0x26c>)
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	f003 030c 	and.w	r3, r3, #12
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d00b      	beq.n	80018ea <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80018d2:	4b49      	ldr	r3, [pc, #292]	@ (80019f8 <HAL_RCC_OscConfig+0x26c>)
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	f003 030c 	and.w	r3, r3, #12
 80018da:	2b08      	cmp	r3, #8
 80018dc:	d11c      	bne.n	8001918 <HAL_RCC_OscConfig+0x18c>
 80018de:	4b46      	ldr	r3, [pc, #280]	@ (80019f8 <HAL_RCC_OscConfig+0x26c>)
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d116      	bne.n	8001918 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018ea:	4b43      	ldr	r3, [pc, #268]	@ (80019f8 <HAL_RCC_OscConfig+0x26c>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f003 0302 	and.w	r3, r3, #2
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d005      	beq.n	8001902 <HAL_RCC_OscConfig+0x176>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	691b      	ldr	r3, [r3, #16]
 80018fa:	2b01      	cmp	r3, #1
 80018fc:	d001      	beq.n	8001902 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80018fe:	2301      	movs	r3, #1
 8001900:	e1c0      	b.n	8001c84 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001902:	4b3d      	ldr	r3, [pc, #244]	@ (80019f8 <HAL_RCC_OscConfig+0x26c>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	695b      	ldr	r3, [r3, #20]
 800190e:	00db      	lsls	r3, r3, #3
 8001910:	4939      	ldr	r1, [pc, #228]	@ (80019f8 <HAL_RCC_OscConfig+0x26c>)
 8001912:	4313      	orrs	r3, r2
 8001914:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001916:	e03a      	b.n	800198e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	691b      	ldr	r3, [r3, #16]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d020      	beq.n	8001962 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001920:	4b36      	ldr	r3, [pc, #216]	@ (80019fc <HAL_RCC_OscConfig+0x270>)
 8001922:	2201      	movs	r2, #1
 8001924:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001926:	f7ff fca7 	bl	8001278 <HAL_GetTick>
 800192a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800192c:	e008      	b.n	8001940 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800192e:	f7ff fca3 	bl	8001278 <HAL_GetTick>
 8001932:	4602      	mov	r2, r0
 8001934:	693b      	ldr	r3, [r7, #16]
 8001936:	1ad3      	subs	r3, r2, r3
 8001938:	2b02      	cmp	r3, #2
 800193a:	d901      	bls.n	8001940 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800193c:	2303      	movs	r3, #3
 800193e:	e1a1      	b.n	8001c84 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001940:	4b2d      	ldr	r3, [pc, #180]	@ (80019f8 <HAL_RCC_OscConfig+0x26c>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f003 0302 	and.w	r3, r3, #2
 8001948:	2b00      	cmp	r3, #0
 800194a:	d0f0      	beq.n	800192e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800194c:	4b2a      	ldr	r3, [pc, #168]	@ (80019f8 <HAL_RCC_OscConfig+0x26c>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	695b      	ldr	r3, [r3, #20]
 8001958:	00db      	lsls	r3, r3, #3
 800195a:	4927      	ldr	r1, [pc, #156]	@ (80019f8 <HAL_RCC_OscConfig+0x26c>)
 800195c:	4313      	orrs	r3, r2
 800195e:	600b      	str	r3, [r1, #0]
 8001960:	e015      	b.n	800198e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001962:	4b26      	ldr	r3, [pc, #152]	@ (80019fc <HAL_RCC_OscConfig+0x270>)
 8001964:	2200      	movs	r2, #0
 8001966:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001968:	f7ff fc86 	bl	8001278 <HAL_GetTick>
 800196c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800196e:	e008      	b.n	8001982 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001970:	f7ff fc82 	bl	8001278 <HAL_GetTick>
 8001974:	4602      	mov	r2, r0
 8001976:	693b      	ldr	r3, [r7, #16]
 8001978:	1ad3      	subs	r3, r2, r3
 800197a:	2b02      	cmp	r3, #2
 800197c:	d901      	bls.n	8001982 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800197e:	2303      	movs	r3, #3
 8001980:	e180      	b.n	8001c84 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001982:	4b1d      	ldr	r3, [pc, #116]	@ (80019f8 <HAL_RCC_OscConfig+0x26c>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f003 0302 	and.w	r3, r3, #2
 800198a:	2b00      	cmp	r3, #0
 800198c:	d1f0      	bne.n	8001970 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f003 0308 	and.w	r3, r3, #8
 8001996:	2b00      	cmp	r3, #0
 8001998:	d03a      	beq.n	8001a10 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	699b      	ldr	r3, [r3, #24]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d019      	beq.n	80019d6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019a2:	4b17      	ldr	r3, [pc, #92]	@ (8001a00 <HAL_RCC_OscConfig+0x274>)
 80019a4:	2201      	movs	r2, #1
 80019a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019a8:	f7ff fc66 	bl	8001278 <HAL_GetTick>
 80019ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019ae:	e008      	b.n	80019c2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019b0:	f7ff fc62 	bl	8001278 <HAL_GetTick>
 80019b4:	4602      	mov	r2, r0
 80019b6:	693b      	ldr	r3, [r7, #16]
 80019b8:	1ad3      	subs	r3, r2, r3
 80019ba:	2b02      	cmp	r3, #2
 80019bc:	d901      	bls.n	80019c2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80019be:	2303      	movs	r3, #3
 80019c0:	e160      	b.n	8001c84 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019c2:	4b0d      	ldr	r3, [pc, #52]	@ (80019f8 <HAL_RCC_OscConfig+0x26c>)
 80019c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019c6:	f003 0302 	and.w	r3, r3, #2
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d0f0      	beq.n	80019b0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80019ce:	2001      	movs	r0, #1
 80019d0:	f000 fa9c 	bl	8001f0c <RCC_Delay>
 80019d4:	e01c      	b.n	8001a10 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019d6:	4b0a      	ldr	r3, [pc, #40]	@ (8001a00 <HAL_RCC_OscConfig+0x274>)
 80019d8:	2200      	movs	r2, #0
 80019da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019dc:	f7ff fc4c 	bl	8001278 <HAL_GetTick>
 80019e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019e2:	e00f      	b.n	8001a04 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019e4:	f7ff fc48 	bl	8001278 <HAL_GetTick>
 80019e8:	4602      	mov	r2, r0
 80019ea:	693b      	ldr	r3, [r7, #16]
 80019ec:	1ad3      	subs	r3, r2, r3
 80019ee:	2b02      	cmp	r3, #2
 80019f0:	d908      	bls.n	8001a04 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80019f2:	2303      	movs	r3, #3
 80019f4:	e146      	b.n	8001c84 <HAL_RCC_OscConfig+0x4f8>
 80019f6:	bf00      	nop
 80019f8:	40021000 	.word	0x40021000
 80019fc:	42420000 	.word	0x42420000
 8001a00:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a04:	4b92      	ldr	r3, [pc, #584]	@ (8001c50 <HAL_RCC_OscConfig+0x4c4>)
 8001a06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a08:	f003 0302 	and.w	r3, r3, #2
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d1e9      	bne.n	80019e4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f003 0304 	and.w	r3, r3, #4
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	f000 80a6 	beq.w	8001b6a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a22:	4b8b      	ldr	r3, [pc, #556]	@ (8001c50 <HAL_RCC_OscConfig+0x4c4>)
 8001a24:	69db      	ldr	r3, [r3, #28]
 8001a26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d10d      	bne.n	8001a4a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a2e:	4b88      	ldr	r3, [pc, #544]	@ (8001c50 <HAL_RCC_OscConfig+0x4c4>)
 8001a30:	69db      	ldr	r3, [r3, #28]
 8001a32:	4a87      	ldr	r2, [pc, #540]	@ (8001c50 <HAL_RCC_OscConfig+0x4c4>)
 8001a34:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a38:	61d3      	str	r3, [r2, #28]
 8001a3a:	4b85      	ldr	r3, [pc, #532]	@ (8001c50 <HAL_RCC_OscConfig+0x4c4>)
 8001a3c:	69db      	ldr	r3, [r3, #28]
 8001a3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a42:	60bb      	str	r3, [r7, #8]
 8001a44:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a46:	2301      	movs	r3, #1
 8001a48:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a4a:	4b82      	ldr	r3, [pc, #520]	@ (8001c54 <HAL_RCC_OscConfig+0x4c8>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d118      	bne.n	8001a88 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a56:	4b7f      	ldr	r3, [pc, #508]	@ (8001c54 <HAL_RCC_OscConfig+0x4c8>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4a7e      	ldr	r2, [pc, #504]	@ (8001c54 <HAL_RCC_OscConfig+0x4c8>)
 8001a5c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a60:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a62:	f7ff fc09 	bl	8001278 <HAL_GetTick>
 8001a66:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a68:	e008      	b.n	8001a7c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a6a:	f7ff fc05 	bl	8001278 <HAL_GetTick>
 8001a6e:	4602      	mov	r2, r0
 8001a70:	693b      	ldr	r3, [r7, #16]
 8001a72:	1ad3      	subs	r3, r2, r3
 8001a74:	2b64      	cmp	r3, #100	@ 0x64
 8001a76:	d901      	bls.n	8001a7c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001a78:	2303      	movs	r3, #3
 8001a7a:	e103      	b.n	8001c84 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a7c:	4b75      	ldr	r3, [pc, #468]	@ (8001c54 <HAL_RCC_OscConfig+0x4c8>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d0f0      	beq.n	8001a6a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	68db      	ldr	r3, [r3, #12]
 8001a8c:	2b01      	cmp	r3, #1
 8001a8e:	d106      	bne.n	8001a9e <HAL_RCC_OscConfig+0x312>
 8001a90:	4b6f      	ldr	r3, [pc, #444]	@ (8001c50 <HAL_RCC_OscConfig+0x4c4>)
 8001a92:	6a1b      	ldr	r3, [r3, #32]
 8001a94:	4a6e      	ldr	r2, [pc, #440]	@ (8001c50 <HAL_RCC_OscConfig+0x4c4>)
 8001a96:	f043 0301 	orr.w	r3, r3, #1
 8001a9a:	6213      	str	r3, [r2, #32]
 8001a9c:	e02d      	b.n	8001afa <HAL_RCC_OscConfig+0x36e>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	68db      	ldr	r3, [r3, #12]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d10c      	bne.n	8001ac0 <HAL_RCC_OscConfig+0x334>
 8001aa6:	4b6a      	ldr	r3, [pc, #424]	@ (8001c50 <HAL_RCC_OscConfig+0x4c4>)
 8001aa8:	6a1b      	ldr	r3, [r3, #32]
 8001aaa:	4a69      	ldr	r2, [pc, #420]	@ (8001c50 <HAL_RCC_OscConfig+0x4c4>)
 8001aac:	f023 0301 	bic.w	r3, r3, #1
 8001ab0:	6213      	str	r3, [r2, #32]
 8001ab2:	4b67      	ldr	r3, [pc, #412]	@ (8001c50 <HAL_RCC_OscConfig+0x4c4>)
 8001ab4:	6a1b      	ldr	r3, [r3, #32]
 8001ab6:	4a66      	ldr	r2, [pc, #408]	@ (8001c50 <HAL_RCC_OscConfig+0x4c4>)
 8001ab8:	f023 0304 	bic.w	r3, r3, #4
 8001abc:	6213      	str	r3, [r2, #32]
 8001abe:	e01c      	b.n	8001afa <HAL_RCC_OscConfig+0x36e>
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	68db      	ldr	r3, [r3, #12]
 8001ac4:	2b05      	cmp	r3, #5
 8001ac6:	d10c      	bne.n	8001ae2 <HAL_RCC_OscConfig+0x356>
 8001ac8:	4b61      	ldr	r3, [pc, #388]	@ (8001c50 <HAL_RCC_OscConfig+0x4c4>)
 8001aca:	6a1b      	ldr	r3, [r3, #32]
 8001acc:	4a60      	ldr	r2, [pc, #384]	@ (8001c50 <HAL_RCC_OscConfig+0x4c4>)
 8001ace:	f043 0304 	orr.w	r3, r3, #4
 8001ad2:	6213      	str	r3, [r2, #32]
 8001ad4:	4b5e      	ldr	r3, [pc, #376]	@ (8001c50 <HAL_RCC_OscConfig+0x4c4>)
 8001ad6:	6a1b      	ldr	r3, [r3, #32]
 8001ad8:	4a5d      	ldr	r2, [pc, #372]	@ (8001c50 <HAL_RCC_OscConfig+0x4c4>)
 8001ada:	f043 0301 	orr.w	r3, r3, #1
 8001ade:	6213      	str	r3, [r2, #32]
 8001ae0:	e00b      	b.n	8001afa <HAL_RCC_OscConfig+0x36e>
 8001ae2:	4b5b      	ldr	r3, [pc, #364]	@ (8001c50 <HAL_RCC_OscConfig+0x4c4>)
 8001ae4:	6a1b      	ldr	r3, [r3, #32]
 8001ae6:	4a5a      	ldr	r2, [pc, #360]	@ (8001c50 <HAL_RCC_OscConfig+0x4c4>)
 8001ae8:	f023 0301 	bic.w	r3, r3, #1
 8001aec:	6213      	str	r3, [r2, #32]
 8001aee:	4b58      	ldr	r3, [pc, #352]	@ (8001c50 <HAL_RCC_OscConfig+0x4c4>)
 8001af0:	6a1b      	ldr	r3, [r3, #32]
 8001af2:	4a57      	ldr	r2, [pc, #348]	@ (8001c50 <HAL_RCC_OscConfig+0x4c4>)
 8001af4:	f023 0304 	bic.w	r3, r3, #4
 8001af8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	68db      	ldr	r3, [r3, #12]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d015      	beq.n	8001b2e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b02:	f7ff fbb9 	bl	8001278 <HAL_GetTick>
 8001b06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b08:	e00a      	b.n	8001b20 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b0a:	f7ff fbb5 	bl	8001278 <HAL_GetTick>
 8001b0e:	4602      	mov	r2, r0
 8001b10:	693b      	ldr	r3, [r7, #16]
 8001b12:	1ad3      	subs	r3, r2, r3
 8001b14:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	d901      	bls.n	8001b20 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001b1c:	2303      	movs	r3, #3
 8001b1e:	e0b1      	b.n	8001c84 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b20:	4b4b      	ldr	r3, [pc, #300]	@ (8001c50 <HAL_RCC_OscConfig+0x4c4>)
 8001b22:	6a1b      	ldr	r3, [r3, #32]
 8001b24:	f003 0302 	and.w	r3, r3, #2
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d0ee      	beq.n	8001b0a <HAL_RCC_OscConfig+0x37e>
 8001b2c:	e014      	b.n	8001b58 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b2e:	f7ff fba3 	bl	8001278 <HAL_GetTick>
 8001b32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b34:	e00a      	b.n	8001b4c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b36:	f7ff fb9f 	bl	8001278 <HAL_GetTick>
 8001b3a:	4602      	mov	r2, r0
 8001b3c:	693b      	ldr	r3, [r7, #16]
 8001b3e:	1ad3      	subs	r3, r2, r3
 8001b40:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b44:	4293      	cmp	r3, r2
 8001b46:	d901      	bls.n	8001b4c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001b48:	2303      	movs	r3, #3
 8001b4a:	e09b      	b.n	8001c84 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b4c:	4b40      	ldr	r3, [pc, #256]	@ (8001c50 <HAL_RCC_OscConfig+0x4c4>)
 8001b4e:	6a1b      	ldr	r3, [r3, #32]
 8001b50:	f003 0302 	and.w	r3, r3, #2
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d1ee      	bne.n	8001b36 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001b58:	7dfb      	ldrb	r3, [r7, #23]
 8001b5a:	2b01      	cmp	r3, #1
 8001b5c:	d105      	bne.n	8001b6a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b5e:	4b3c      	ldr	r3, [pc, #240]	@ (8001c50 <HAL_RCC_OscConfig+0x4c4>)
 8001b60:	69db      	ldr	r3, [r3, #28]
 8001b62:	4a3b      	ldr	r2, [pc, #236]	@ (8001c50 <HAL_RCC_OscConfig+0x4c4>)
 8001b64:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001b68:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	69db      	ldr	r3, [r3, #28]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	f000 8087 	beq.w	8001c82 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b74:	4b36      	ldr	r3, [pc, #216]	@ (8001c50 <HAL_RCC_OscConfig+0x4c4>)
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	f003 030c 	and.w	r3, r3, #12
 8001b7c:	2b08      	cmp	r3, #8
 8001b7e:	d061      	beq.n	8001c44 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	69db      	ldr	r3, [r3, #28]
 8001b84:	2b02      	cmp	r3, #2
 8001b86:	d146      	bne.n	8001c16 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b88:	4b33      	ldr	r3, [pc, #204]	@ (8001c58 <HAL_RCC_OscConfig+0x4cc>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b8e:	f7ff fb73 	bl	8001278 <HAL_GetTick>
 8001b92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b94:	e008      	b.n	8001ba8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b96:	f7ff fb6f 	bl	8001278 <HAL_GetTick>
 8001b9a:	4602      	mov	r2, r0
 8001b9c:	693b      	ldr	r3, [r7, #16]
 8001b9e:	1ad3      	subs	r3, r2, r3
 8001ba0:	2b02      	cmp	r3, #2
 8001ba2:	d901      	bls.n	8001ba8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001ba4:	2303      	movs	r3, #3
 8001ba6:	e06d      	b.n	8001c84 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ba8:	4b29      	ldr	r3, [pc, #164]	@ (8001c50 <HAL_RCC_OscConfig+0x4c4>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d1f0      	bne.n	8001b96 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6a1b      	ldr	r3, [r3, #32]
 8001bb8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001bbc:	d108      	bne.n	8001bd0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001bbe:	4b24      	ldr	r3, [pc, #144]	@ (8001c50 <HAL_RCC_OscConfig+0x4c4>)
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	689b      	ldr	r3, [r3, #8]
 8001bca:	4921      	ldr	r1, [pc, #132]	@ (8001c50 <HAL_RCC_OscConfig+0x4c4>)
 8001bcc:	4313      	orrs	r3, r2
 8001bce:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001bd0:	4b1f      	ldr	r3, [pc, #124]	@ (8001c50 <HAL_RCC_OscConfig+0x4c4>)
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6a19      	ldr	r1, [r3, #32]
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001be0:	430b      	orrs	r3, r1
 8001be2:	491b      	ldr	r1, [pc, #108]	@ (8001c50 <HAL_RCC_OscConfig+0x4c4>)
 8001be4:	4313      	orrs	r3, r2
 8001be6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001be8:	4b1b      	ldr	r3, [pc, #108]	@ (8001c58 <HAL_RCC_OscConfig+0x4cc>)
 8001bea:	2201      	movs	r2, #1
 8001bec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bee:	f7ff fb43 	bl	8001278 <HAL_GetTick>
 8001bf2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001bf4:	e008      	b.n	8001c08 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bf6:	f7ff fb3f 	bl	8001278 <HAL_GetTick>
 8001bfa:	4602      	mov	r2, r0
 8001bfc:	693b      	ldr	r3, [r7, #16]
 8001bfe:	1ad3      	subs	r3, r2, r3
 8001c00:	2b02      	cmp	r3, #2
 8001c02:	d901      	bls.n	8001c08 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001c04:	2303      	movs	r3, #3
 8001c06:	e03d      	b.n	8001c84 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c08:	4b11      	ldr	r3, [pc, #68]	@ (8001c50 <HAL_RCC_OscConfig+0x4c4>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d0f0      	beq.n	8001bf6 <HAL_RCC_OscConfig+0x46a>
 8001c14:	e035      	b.n	8001c82 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c16:	4b10      	ldr	r3, [pc, #64]	@ (8001c58 <HAL_RCC_OscConfig+0x4cc>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c1c:	f7ff fb2c 	bl	8001278 <HAL_GetTick>
 8001c20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c22:	e008      	b.n	8001c36 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c24:	f7ff fb28 	bl	8001278 <HAL_GetTick>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	693b      	ldr	r3, [r7, #16]
 8001c2c:	1ad3      	subs	r3, r2, r3
 8001c2e:	2b02      	cmp	r3, #2
 8001c30:	d901      	bls.n	8001c36 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001c32:	2303      	movs	r3, #3
 8001c34:	e026      	b.n	8001c84 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c36:	4b06      	ldr	r3, [pc, #24]	@ (8001c50 <HAL_RCC_OscConfig+0x4c4>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d1f0      	bne.n	8001c24 <HAL_RCC_OscConfig+0x498>
 8001c42:	e01e      	b.n	8001c82 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	69db      	ldr	r3, [r3, #28]
 8001c48:	2b01      	cmp	r3, #1
 8001c4a:	d107      	bne.n	8001c5c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	e019      	b.n	8001c84 <HAL_RCC_OscConfig+0x4f8>
 8001c50:	40021000 	.word	0x40021000
 8001c54:	40007000 	.word	0x40007000
 8001c58:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001c5c:	4b0b      	ldr	r3, [pc, #44]	@ (8001c8c <HAL_RCC_OscConfig+0x500>)
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6a1b      	ldr	r3, [r3, #32]
 8001c6c:	429a      	cmp	r2, r3
 8001c6e:	d106      	bne.n	8001c7e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c7a:	429a      	cmp	r2, r3
 8001c7c:	d001      	beq.n	8001c82 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e000      	b.n	8001c84 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001c82:	2300      	movs	r3, #0
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	3718      	adds	r7, #24
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}
 8001c8c:	40021000 	.word	0x40021000

08001c90 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b084      	sub	sp, #16
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
 8001c98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d101      	bne.n	8001ca4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	e0d0      	b.n	8001e46 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ca4:	4b6a      	ldr	r3, [pc, #424]	@ (8001e50 <HAL_RCC_ClockConfig+0x1c0>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f003 0307 	and.w	r3, r3, #7
 8001cac:	683a      	ldr	r2, [r7, #0]
 8001cae:	429a      	cmp	r2, r3
 8001cb0:	d910      	bls.n	8001cd4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cb2:	4b67      	ldr	r3, [pc, #412]	@ (8001e50 <HAL_RCC_ClockConfig+0x1c0>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f023 0207 	bic.w	r2, r3, #7
 8001cba:	4965      	ldr	r1, [pc, #404]	@ (8001e50 <HAL_RCC_ClockConfig+0x1c0>)
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cc2:	4b63      	ldr	r3, [pc, #396]	@ (8001e50 <HAL_RCC_ClockConfig+0x1c0>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f003 0307 	and.w	r3, r3, #7
 8001cca:	683a      	ldr	r2, [r7, #0]
 8001ccc:	429a      	cmp	r2, r3
 8001cce:	d001      	beq.n	8001cd4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	e0b8      	b.n	8001e46 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f003 0302 	and.w	r3, r3, #2
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d020      	beq.n	8001d22 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f003 0304 	and.w	r3, r3, #4
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d005      	beq.n	8001cf8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001cec:	4b59      	ldr	r3, [pc, #356]	@ (8001e54 <HAL_RCC_ClockConfig+0x1c4>)
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	4a58      	ldr	r2, [pc, #352]	@ (8001e54 <HAL_RCC_ClockConfig+0x1c4>)
 8001cf2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001cf6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f003 0308 	and.w	r3, r3, #8
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d005      	beq.n	8001d10 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d04:	4b53      	ldr	r3, [pc, #332]	@ (8001e54 <HAL_RCC_ClockConfig+0x1c4>)
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	4a52      	ldr	r2, [pc, #328]	@ (8001e54 <HAL_RCC_ClockConfig+0x1c4>)
 8001d0a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001d0e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d10:	4b50      	ldr	r3, [pc, #320]	@ (8001e54 <HAL_RCC_ClockConfig+0x1c4>)
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	689b      	ldr	r3, [r3, #8]
 8001d1c:	494d      	ldr	r1, [pc, #308]	@ (8001e54 <HAL_RCC_ClockConfig+0x1c4>)
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f003 0301 	and.w	r3, r3, #1
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d040      	beq.n	8001db0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	2b01      	cmp	r3, #1
 8001d34:	d107      	bne.n	8001d46 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d36:	4b47      	ldr	r3, [pc, #284]	@ (8001e54 <HAL_RCC_ClockConfig+0x1c4>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d115      	bne.n	8001d6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d42:	2301      	movs	r3, #1
 8001d44:	e07f      	b.n	8001e46 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	2b02      	cmp	r3, #2
 8001d4c:	d107      	bne.n	8001d5e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d4e:	4b41      	ldr	r3, [pc, #260]	@ (8001e54 <HAL_RCC_ClockConfig+0x1c4>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d109      	bne.n	8001d6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e073      	b.n	8001e46 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d5e:	4b3d      	ldr	r3, [pc, #244]	@ (8001e54 <HAL_RCC_ClockConfig+0x1c4>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f003 0302 	and.w	r3, r3, #2
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d101      	bne.n	8001d6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	e06b      	b.n	8001e46 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d6e:	4b39      	ldr	r3, [pc, #228]	@ (8001e54 <HAL_RCC_ClockConfig+0x1c4>)
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	f023 0203 	bic.w	r2, r3, #3
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	4936      	ldr	r1, [pc, #216]	@ (8001e54 <HAL_RCC_ClockConfig+0x1c4>)
 8001d7c:	4313      	orrs	r3, r2
 8001d7e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d80:	f7ff fa7a 	bl	8001278 <HAL_GetTick>
 8001d84:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d86:	e00a      	b.n	8001d9e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d88:	f7ff fa76 	bl	8001278 <HAL_GetTick>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	1ad3      	subs	r3, r2, r3
 8001d92:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d901      	bls.n	8001d9e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d9a:	2303      	movs	r3, #3
 8001d9c:	e053      	b.n	8001e46 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d9e:	4b2d      	ldr	r3, [pc, #180]	@ (8001e54 <HAL_RCC_ClockConfig+0x1c4>)
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	f003 020c 	and.w	r2, r3, #12
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	009b      	lsls	r3, r3, #2
 8001dac:	429a      	cmp	r2, r3
 8001dae:	d1eb      	bne.n	8001d88 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001db0:	4b27      	ldr	r3, [pc, #156]	@ (8001e50 <HAL_RCC_ClockConfig+0x1c0>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f003 0307 	and.w	r3, r3, #7
 8001db8:	683a      	ldr	r2, [r7, #0]
 8001dba:	429a      	cmp	r2, r3
 8001dbc:	d210      	bcs.n	8001de0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dbe:	4b24      	ldr	r3, [pc, #144]	@ (8001e50 <HAL_RCC_ClockConfig+0x1c0>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f023 0207 	bic.w	r2, r3, #7
 8001dc6:	4922      	ldr	r1, [pc, #136]	@ (8001e50 <HAL_RCC_ClockConfig+0x1c0>)
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	4313      	orrs	r3, r2
 8001dcc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dce:	4b20      	ldr	r3, [pc, #128]	@ (8001e50 <HAL_RCC_ClockConfig+0x1c0>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f003 0307 	and.w	r3, r3, #7
 8001dd6:	683a      	ldr	r2, [r7, #0]
 8001dd8:	429a      	cmp	r2, r3
 8001dda:	d001      	beq.n	8001de0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	e032      	b.n	8001e46 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f003 0304 	and.w	r3, r3, #4
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d008      	beq.n	8001dfe <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001dec:	4b19      	ldr	r3, [pc, #100]	@ (8001e54 <HAL_RCC_ClockConfig+0x1c4>)
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	68db      	ldr	r3, [r3, #12]
 8001df8:	4916      	ldr	r1, [pc, #88]	@ (8001e54 <HAL_RCC_ClockConfig+0x1c4>)
 8001dfa:	4313      	orrs	r3, r2
 8001dfc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f003 0308 	and.w	r3, r3, #8
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d009      	beq.n	8001e1e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001e0a:	4b12      	ldr	r3, [pc, #72]	@ (8001e54 <HAL_RCC_ClockConfig+0x1c4>)
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	691b      	ldr	r3, [r3, #16]
 8001e16:	00db      	lsls	r3, r3, #3
 8001e18:	490e      	ldr	r1, [pc, #56]	@ (8001e54 <HAL_RCC_ClockConfig+0x1c4>)
 8001e1a:	4313      	orrs	r3, r2
 8001e1c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001e1e:	f000 f821 	bl	8001e64 <HAL_RCC_GetSysClockFreq>
 8001e22:	4602      	mov	r2, r0
 8001e24:	4b0b      	ldr	r3, [pc, #44]	@ (8001e54 <HAL_RCC_ClockConfig+0x1c4>)
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	091b      	lsrs	r3, r3, #4
 8001e2a:	f003 030f 	and.w	r3, r3, #15
 8001e2e:	490a      	ldr	r1, [pc, #40]	@ (8001e58 <HAL_RCC_ClockConfig+0x1c8>)
 8001e30:	5ccb      	ldrb	r3, [r1, r3]
 8001e32:	fa22 f303 	lsr.w	r3, r2, r3
 8001e36:	4a09      	ldr	r2, [pc, #36]	@ (8001e5c <HAL_RCC_ClockConfig+0x1cc>)
 8001e38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001e3a:	4b09      	ldr	r3, [pc, #36]	@ (8001e60 <HAL_RCC_ClockConfig+0x1d0>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f7ff f9d8 	bl	80011f4 <HAL_InitTick>

  return HAL_OK;
 8001e44:	2300      	movs	r3, #0
}
 8001e46:	4618      	mov	r0, r3
 8001e48:	3710      	adds	r7, #16
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	40022000 	.word	0x40022000
 8001e54:	40021000 	.word	0x40021000
 8001e58:	08003bd0 	.word	0x08003bd0
 8001e5c:	20000000 	.word	0x20000000
 8001e60:	20000004 	.word	0x20000004

08001e64 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b087      	sub	sp, #28
 8001e68:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	60fb      	str	r3, [r7, #12]
 8001e6e:	2300      	movs	r3, #0
 8001e70:	60bb      	str	r3, [r7, #8]
 8001e72:	2300      	movs	r3, #0
 8001e74:	617b      	str	r3, [r7, #20]
 8001e76:	2300      	movs	r3, #0
 8001e78:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001e7e:	4b1e      	ldr	r3, [pc, #120]	@ (8001ef8 <HAL_RCC_GetSysClockFreq+0x94>)
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	f003 030c 	and.w	r3, r3, #12
 8001e8a:	2b04      	cmp	r3, #4
 8001e8c:	d002      	beq.n	8001e94 <HAL_RCC_GetSysClockFreq+0x30>
 8001e8e:	2b08      	cmp	r3, #8
 8001e90:	d003      	beq.n	8001e9a <HAL_RCC_GetSysClockFreq+0x36>
 8001e92:	e027      	b.n	8001ee4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001e94:	4b19      	ldr	r3, [pc, #100]	@ (8001efc <HAL_RCC_GetSysClockFreq+0x98>)
 8001e96:	613b      	str	r3, [r7, #16]
      break;
 8001e98:	e027      	b.n	8001eea <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	0c9b      	lsrs	r3, r3, #18
 8001e9e:	f003 030f 	and.w	r3, r3, #15
 8001ea2:	4a17      	ldr	r2, [pc, #92]	@ (8001f00 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001ea4:	5cd3      	ldrb	r3, [r2, r3]
 8001ea6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d010      	beq.n	8001ed4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001eb2:	4b11      	ldr	r3, [pc, #68]	@ (8001ef8 <HAL_RCC_GetSysClockFreq+0x94>)
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	0c5b      	lsrs	r3, r3, #17
 8001eb8:	f003 0301 	and.w	r3, r3, #1
 8001ebc:	4a11      	ldr	r2, [pc, #68]	@ (8001f04 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001ebe:	5cd3      	ldrb	r3, [r2, r3]
 8001ec0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	4a0d      	ldr	r2, [pc, #52]	@ (8001efc <HAL_RCC_GetSysClockFreq+0x98>)
 8001ec6:	fb03 f202 	mul.w	r2, r3, r2
 8001eca:	68bb      	ldr	r3, [r7, #8]
 8001ecc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ed0:	617b      	str	r3, [r7, #20]
 8001ed2:	e004      	b.n	8001ede <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	4a0c      	ldr	r2, [pc, #48]	@ (8001f08 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001ed8:	fb02 f303 	mul.w	r3, r2, r3
 8001edc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001ede:	697b      	ldr	r3, [r7, #20]
 8001ee0:	613b      	str	r3, [r7, #16]
      break;
 8001ee2:	e002      	b.n	8001eea <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001ee4:	4b05      	ldr	r3, [pc, #20]	@ (8001efc <HAL_RCC_GetSysClockFreq+0x98>)
 8001ee6:	613b      	str	r3, [r7, #16]
      break;
 8001ee8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001eea:	693b      	ldr	r3, [r7, #16]
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	371c      	adds	r7, #28
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bc80      	pop	{r7}
 8001ef4:	4770      	bx	lr
 8001ef6:	bf00      	nop
 8001ef8:	40021000 	.word	0x40021000
 8001efc:	007a1200 	.word	0x007a1200
 8001f00:	08003be0 	.word	0x08003be0
 8001f04:	08003bf0 	.word	0x08003bf0
 8001f08:	003d0900 	.word	0x003d0900

08001f0c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b085      	sub	sp, #20
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001f14:	4b0a      	ldr	r3, [pc, #40]	@ (8001f40 <RCC_Delay+0x34>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a0a      	ldr	r2, [pc, #40]	@ (8001f44 <RCC_Delay+0x38>)
 8001f1a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f1e:	0a5b      	lsrs	r3, r3, #9
 8001f20:	687a      	ldr	r2, [r7, #4]
 8001f22:	fb02 f303 	mul.w	r3, r2, r3
 8001f26:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001f28:	bf00      	nop
  }
  while (Delay --);
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	1e5a      	subs	r2, r3, #1
 8001f2e:	60fa      	str	r2, [r7, #12]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d1f9      	bne.n	8001f28 <RCC_Delay+0x1c>
}
 8001f34:	bf00      	nop
 8001f36:	bf00      	nop
 8001f38:	3714      	adds	r7, #20
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bc80      	pop	{r7}
 8001f3e:	4770      	bx	lr
 8001f40:	20000000 	.word	0x20000000
 8001f44:	10624dd3 	.word	0x10624dd3

08001f48 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b082      	sub	sp, #8
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d101      	bne.n	8001f5a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001f56:	2301      	movs	r3, #1
 8001f58:	e041      	b.n	8001fde <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001f60:	b2db      	uxtb	r3, r3
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d106      	bne.n	8001f74 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2200      	movs	r2, #0
 8001f6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001f6e:	6878      	ldr	r0, [r7, #4]
 8001f70:	f7ff f880 	bl	8001074 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2202      	movs	r2, #2
 8001f78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681a      	ldr	r2, [r3, #0]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	3304      	adds	r3, #4
 8001f84:	4619      	mov	r1, r3
 8001f86:	4610      	mov	r0, r2
 8001f88:	f000 fab2 	bl	80024f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2201      	movs	r2, #1
 8001f90:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2201      	movs	r2, #1
 8001f98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2201      	movs	r2, #1
 8001fa0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2201      	movs	r2, #1
 8001fa8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2201      	movs	r2, #1
 8001fb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2201      	movs	r2, #1
 8001fb8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2201      	movs	r2, #1
 8001fd0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001fdc:	2300      	movs	r3, #0
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	3708      	adds	r7, #8
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}

08001fe6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001fe6:	b580      	push	{r7, lr}
 8001fe8:	b082      	sub	sp, #8
 8001fea:	af00      	add	r7, sp, #0
 8001fec:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d101      	bne.n	8001ff8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	e041      	b.n	800207c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001ffe:	b2db      	uxtb	r3, r3
 8002000:	2b00      	cmp	r3, #0
 8002002:	d106      	bne.n	8002012 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2200      	movs	r2, #0
 8002008:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800200c:	6878      	ldr	r0, [r7, #4]
 800200e:	f000 f839 	bl	8002084 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2202      	movs	r2, #2
 8002016:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681a      	ldr	r2, [r3, #0]
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	3304      	adds	r3, #4
 8002022:	4619      	mov	r1, r3
 8002024:	4610      	mov	r0, r2
 8002026:	f000 fa63 	bl	80024f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2201      	movs	r2, #1
 800202e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2201      	movs	r2, #1
 8002036:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2201      	movs	r2, #1
 800203e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2201      	movs	r2, #1
 8002046:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2201      	movs	r2, #1
 800204e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2201      	movs	r2, #1
 8002056:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2201      	movs	r2, #1
 800205e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2201      	movs	r2, #1
 8002066:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2201      	movs	r2, #1
 800206e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2201      	movs	r2, #1
 8002076:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800207a:	2300      	movs	r3, #0
}
 800207c:	4618      	mov	r0, r3
 800207e:	3708      	adds	r7, #8
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}

08002084 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002084:	b480      	push	{r7}
 8002086:	b083      	sub	sp, #12
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800208c:	bf00      	nop
 800208e:	370c      	adds	r7, #12
 8002090:	46bd      	mov	sp, r7
 8002092:	bc80      	pop	{r7}
 8002094:	4770      	bx	lr
	...

08002098 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b084      	sub	sp, #16
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
 80020a0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d109      	bne.n	80020bc <HAL_TIM_PWM_Start+0x24>
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80020ae:	b2db      	uxtb	r3, r3
 80020b0:	2b01      	cmp	r3, #1
 80020b2:	bf14      	ite	ne
 80020b4:	2301      	movne	r3, #1
 80020b6:	2300      	moveq	r3, #0
 80020b8:	b2db      	uxtb	r3, r3
 80020ba:	e022      	b.n	8002102 <HAL_TIM_PWM_Start+0x6a>
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	2b04      	cmp	r3, #4
 80020c0:	d109      	bne.n	80020d6 <HAL_TIM_PWM_Start+0x3e>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80020c8:	b2db      	uxtb	r3, r3
 80020ca:	2b01      	cmp	r3, #1
 80020cc:	bf14      	ite	ne
 80020ce:	2301      	movne	r3, #1
 80020d0:	2300      	moveq	r3, #0
 80020d2:	b2db      	uxtb	r3, r3
 80020d4:	e015      	b.n	8002102 <HAL_TIM_PWM_Start+0x6a>
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	2b08      	cmp	r3, #8
 80020da:	d109      	bne.n	80020f0 <HAL_TIM_PWM_Start+0x58>
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80020e2:	b2db      	uxtb	r3, r3
 80020e4:	2b01      	cmp	r3, #1
 80020e6:	bf14      	ite	ne
 80020e8:	2301      	movne	r3, #1
 80020ea:	2300      	moveq	r3, #0
 80020ec:	b2db      	uxtb	r3, r3
 80020ee:	e008      	b.n	8002102 <HAL_TIM_PWM_Start+0x6a>
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80020f6:	b2db      	uxtb	r3, r3
 80020f8:	2b01      	cmp	r3, #1
 80020fa:	bf14      	ite	ne
 80020fc:	2301      	movne	r3, #1
 80020fe:	2300      	moveq	r3, #0
 8002100:	b2db      	uxtb	r3, r3
 8002102:	2b00      	cmp	r3, #0
 8002104:	d001      	beq.n	800210a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002106:	2301      	movs	r3, #1
 8002108:	e05e      	b.n	80021c8 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d104      	bne.n	800211a <HAL_TIM_PWM_Start+0x82>
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2202      	movs	r2, #2
 8002114:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002118:	e013      	b.n	8002142 <HAL_TIM_PWM_Start+0xaa>
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	2b04      	cmp	r3, #4
 800211e:	d104      	bne.n	800212a <HAL_TIM_PWM_Start+0x92>
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2202      	movs	r2, #2
 8002124:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002128:	e00b      	b.n	8002142 <HAL_TIM_PWM_Start+0xaa>
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	2b08      	cmp	r3, #8
 800212e:	d104      	bne.n	800213a <HAL_TIM_PWM_Start+0xa2>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2202      	movs	r2, #2
 8002134:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002138:	e003      	b.n	8002142 <HAL_TIM_PWM_Start+0xaa>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2202      	movs	r2, #2
 800213e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	2201      	movs	r2, #1
 8002148:	6839      	ldr	r1, [r7, #0]
 800214a:	4618      	mov	r0, r3
 800214c:	f000 fc5c 	bl	8002a08 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a1e      	ldr	r2, [pc, #120]	@ (80021d0 <HAL_TIM_PWM_Start+0x138>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d107      	bne.n	800216a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002168:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4a18      	ldr	r2, [pc, #96]	@ (80021d0 <HAL_TIM_PWM_Start+0x138>)
 8002170:	4293      	cmp	r3, r2
 8002172:	d00e      	beq.n	8002192 <HAL_TIM_PWM_Start+0xfa>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800217c:	d009      	beq.n	8002192 <HAL_TIM_PWM_Start+0xfa>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4a14      	ldr	r2, [pc, #80]	@ (80021d4 <HAL_TIM_PWM_Start+0x13c>)
 8002184:	4293      	cmp	r3, r2
 8002186:	d004      	beq.n	8002192 <HAL_TIM_PWM_Start+0xfa>
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a12      	ldr	r2, [pc, #72]	@ (80021d8 <HAL_TIM_PWM_Start+0x140>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d111      	bne.n	80021b6 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	689b      	ldr	r3, [r3, #8]
 8002198:	f003 0307 	and.w	r3, r3, #7
 800219c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	2b06      	cmp	r3, #6
 80021a2:	d010      	beq.n	80021c6 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	681a      	ldr	r2, [r3, #0]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f042 0201 	orr.w	r2, r2, #1
 80021b2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021b4:	e007      	b.n	80021c6 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	681a      	ldr	r2, [r3, #0]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f042 0201 	orr.w	r2, r2, #1
 80021c4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80021c6:	2300      	movs	r3, #0
}
 80021c8:	4618      	mov	r0, r3
 80021ca:	3710      	adds	r7, #16
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}
 80021d0:	40012c00 	.word	0x40012c00
 80021d4:	40000400 	.word	0x40000400
 80021d8:	40000800 	.word	0x40000800

080021dc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b086      	sub	sp, #24
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	60f8      	str	r0, [r7, #12]
 80021e4:	60b9      	str	r1, [r7, #8]
 80021e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80021e8:	2300      	movs	r3, #0
 80021ea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80021f2:	2b01      	cmp	r3, #1
 80021f4:	d101      	bne.n	80021fa <HAL_TIM_PWM_ConfigChannel+0x1e>
 80021f6:	2302      	movs	r3, #2
 80021f8:	e0ae      	b.n	8002358 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	2201      	movs	r2, #1
 80021fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2b0c      	cmp	r3, #12
 8002206:	f200 809f 	bhi.w	8002348 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800220a:	a201      	add	r2, pc, #4	@ (adr r2, 8002210 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800220c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002210:	08002245 	.word	0x08002245
 8002214:	08002349 	.word	0x08002349
 8002218:	08002349 	.word	0x08002349
 800221c:	08002349 	.word	0x08002349
 8002220:	08002285 	.word	0x08002285
 8002224:	08002349 	.word	0x08002349
 8002228:	08002349 	.word	0x08002349
 800222c:	08002349 	.word	0x08002349
 8002230:	080022c7 	.word	0x080022c7
 8002234:	08002349 	.word	0x08002349
 8002238:	08002349 	.word	0x08002349
 800223c:	08002349 	.word	0x08002349
 8002240:	08002307 	.word	0x08002307
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	68b9      	ldr	r1, [r7, #8]
 800224a:	4618      	mov	r0, r3
 800224c:	f000 f9be 	bl	80025cc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	699a      	ldr	r2, [r3, #24]
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f042 0208 	orr.w	r2, r2, #8
 800225e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	699a      	ldr	r2, [r3, #24]
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f022 0204 	bic.w	r2, r2, #4
 800226e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	6999      	ldr	r1, [r3, #24]
 8002276:	68bb      	ldr	r3, [r7, #8]
 8002278:	691a      	ldr	r2, [r3, #16]
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	430a      	orrs	r2, r1
 8002280:	619a      	str	r2, [r3, #24]
      break;
 8002282:	e064      	b.n	800234e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	68b9      	ldr	r1, [r7, #8]
 800228a:	4618      	mov	r0, r3
 800228c:	f000 fa04 	bl	8002698 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	699a      	ldr	r2, [r3, #24]
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800229e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	699a      	ldr	r2, [r3, #24]
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80022ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	6999      	ldr	r1, [r3, #24]
 80022b6:	68bb      	ldr	r3, [r7, #8]
 80022b8:	691b      	ldr	r3, [r3, #16]
 80022ba:	021a      	lsls	r2, r3, #8
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	430a      	orrs	r2, r1
 80022c2:	619a      	str	r2, [r3, #24]
      break;
 80022c4:	e043      	b.n	800234e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	68b9      	ldr	r1, [r7, #8]
 80022cc:	4618      	mov	r0, r3
 80022ce:	f000 fa4d 	bl	800276c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	69da      	ldr	r2, [r3, #28]
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f042 0208 	orr.w	r2, r2, #8
 80022e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	69da      	ldr	r2, [r3, #28]
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f022 0204 	bic.w	r2, r2, #4
 80022f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	69d9      	ldr	r1, [r3, #28]
 80022f8:	68bb      	ldr	r3, [r7, #8]
 80022fa:	691a      	ldr	r2, [r3, #16]
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	430a      	orrs	r2, r1
 8002302:	61da      	str	r2, [r3, #28]
      break;
 8002304:	e023      	b.n	800234e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	68b9      	ldr	r1, [r7, #8]
 800230c:	4618      	mov	r0, r3
 800230e:	f000 fa97 	bl	8002840 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	69da      	ldr	r2, [r3, #28]
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002320:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	69da      	ldr	r2, [r3, #28]
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002330:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	69d9      	ldr	r1, [r3, #28]
 8002338:	68bb      	ldr	r3, [r7, #8]
 800233a:	691b      	ldr	r3, [r3, #16]
 800233c:	021a      	lsls	r2, r3, #8
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	430a      	orrs	r2, r1
 8002344:	61da      	str	r2, [r3, #28]
      break;
 8002346:	e002      	b.n	800234e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002348:	2301      	movs	r3, #1
 800234a:	75fb      	strb	r3, [r7, #23]
      break;
 800234c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	2200      	movs	r2, #0
 8002352:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002356:	7dfb      	ldrb	r3, [r7, #23]
}
 8002358:	4618      	mov	r0, r3
 800235a:	3718      	adds	r7, #24
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}

08002360 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b084      	sub	sp, #16
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
 8002368:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800236a:	2300      	movs	r3, #0
 800236c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002374:	2b01      	cmp	r3, #1
 8002376:	d101      	bne.n	800237c <HAL_TIM_ConfigClockSource+0x1c>
 8002378:	2302      	movs	r3, #2
 800237a:	e0b4      	b.n	80024e6 <HAL_TIM_ConfigClockSource+0x186>
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2201      	movs	r2, #1
 8002380:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2202      	movs	r2, #2
 8002388:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	689b      	ldr	r3, [r3, #8]
 8002392:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800239a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800239c:	68bb      	ldr	r3, [r7, #8]
 800239e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80023a2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	68ba      	ldr	r2, [r7, #8]
 80023aa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80023b4:	d03e      	beq.n	8002434 <HAL_TIM_ConfigClockSource+0xd4>
 80023b6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80023ba:	f200 8087 	bhi.w	80024cc <HAL_TIM_ConfigClockSource+0x16c>
 80023be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80023c2:	f000 8086 	beq.w	80024d2 <HAL_TIM_ConfigClockSource+0x172>
 80023c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80023ca:	d87f      	bhi.n	80024cc <HAL_TIM_ConfigClockSource+0x16c>
 80023cc:	2b70      	cmp	r3, #112	@ 0x70
 80023ce:	d01a      	beq.n	8002406 <HAL_TIM_ConfigClockSource+0xa6>
 80023d0:	2b70      	cmp	r3, #112	@ 0x70
 80023d2:	d87b      	bhi.n	80024cc <HAL_TIM_ConfigClockSource+0x16c>
 80023d4:	2b60      	cmp	r3, #96	@ 0x60
 80023d6:	d050      	beq.n	800247a <HAL_TIM_ConfigClockSource+0x11a>
 80023d8:	2b60      	cmp	r3, #96	@ 0x60
 80023da:	d877      	bhi.n	80024cc <HAL_TIM_ConfigClockSource+0x16c>
 80023dc:	2b50      	cmp	r3, #80	@ 0x50
 80023de:	d03c      	beq.n	800245a <HAL_TIM_ConfigClockSource+0xfa>
 80023e0:	2b50      	cmp	r3, #80	@ 0x50
 80023e2:	d873      	bhi.n	80024cc <HAL_TIM_ConfigClockSource+0x16c>
 80023e4:	2b40      	cmp	r3, #64	@ 0x40
 80023e6:	d058      	beq.n	800249a <HAL_TIM_ConfigClockSource+0x13a>
 80023e8:	2b40      	cmp	r3, #64	@ 0x40
 80023ea:	d86f      	bhi.n	80024cc <HAL_TIM_ConfigClockSource+0x16c>
 80023ec:	2b30      	cmp	r3, #48	@ 0x30
 80023ee:	d064      	beq.n	80024ba <HAL_TIM_ConfigClockSource+0x15a>
 80023f0:	2b30      	cmp	r3, #48	@ 0x30
 80023f2:	d86b      	bhi.n	80024cc <HAL_TIM_ConfigClockSource+0x16c>
 80023f4:	2b20      	cmp	r3, #32
 80023f6:	d060      	beq.n	80024ba <HAL_TIM_ConfigClockSource+0x15a>
 80023f8:	2b20      	cmp	r3, #32
 80023fa:	d867      	bhi.n	80024cc <HAL_TIM_ConfigClockSource+0x16c>
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d05c      	beq.n	80024ba <HAL_TIM_ConfigClockSource+0x15a>
 8002400:	2b10      	cmp	r3, #16
 8002402:	d05a      	beq.n	80024ba <HAL_TIM_ConfigClockSource+0x15a>
 8002404:	e062      	b.n	80024cc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002416:	f000 fad8 	bl	80029ca <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	689b      	ldr	r3, [r3, #8]
 8002420:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002422:	68bb      	ldr	r3, [r7, #8]
 8002424:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002428:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	68ba      	ldr	r2, [r7, #8]
 8002430:	609a      	str	r2, [r3, #8]
      break;
 8002432:	e04f      	b.n	80024d4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002444:	f000 fac1 	bl	80029ca <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	689a      	ldr	r2, [r3, #8]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002456:	609a      	str	r2, [r3, #8]
      break;
 8002458:	e03c      	b.n	80024d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002466:	461a      	mov	r2, r3
 8002468:	f000 fa38 	bl	80028dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	2150      	movs	r1, #80	@ 0x50
 8002472:	4618      	mov	r0, r3
 8002474:	f000 fa8f 	bl	8002996 <TIM_ITRx_SetConfig>
      break;
 8002478:	e02c      	b.n	80024d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002486:	461a      	mov	r2, r3
 8002488:	f000 fa56 	bl	8002938 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	2160      	movs	r1, #96	@ 0x60
 8002492:	4618      	mov	r0, r3
 8002494:	f000 fa7f 	bl	8002996 <TIM_ITRx_SetConfig>
      break;
 8002498:	e01c      	b.n	80024d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80024a6:	461a      	mov	r2, r3
 80024a8:	f000 fa18 	bl	80028dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	2140      	movs	r1, #64	@ 0x40
 80024b2:	4618      	mov	r0, r3
 80024b4:	f000 fa6f 	bl	8002996 <TIM_ITRx_SetConfig>
      break;
 80024b8:	e00c      	b.n	80024d4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681a      	ldr	r2, [r3, #0]
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4619      	mov	r1, r3
 80024c4:	4610      	mov	r0, r2
 80024c6:	f000 fa66 	bl	8002996 <TIM_ITRx_SetConfig>
      break;
 80024ca:	e003      	b.n	80024d4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80024cc:	2301      	movs	r3, #1
 80024ce:	73fb      	strb	r3, [r7, #15]
      break;
 80024d0:	e000      	b.n	80024d4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80024d2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2201      	movs	r2, #1
 80024d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2200      	movs	r2, #0
 80024e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80024e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	3710      	adds	r7, #16
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}
	...

080024f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b085      	sub	sp, #20
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
 80024f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	4a2f      	ldr	r2, [pc, #188]	@ (80025c0 <TIM_Base_SetConfig+0xd0>)
 8002504:	4293      	cmp	r3, r2
 8002506:	d00b      	beq.n	8002520 <TIM_Base_SetConfig+0x30>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800250e:	d007      	beq.n	8002520 <TIM_Base_SetConfig+0x30>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	4a2c      	ldr	r2, [pc, #176]	@ (80025c4 <TIM_Base_SetConfig+0xd4>)
 8002514:	4293      	cmp	r3, r2
 8002516:	d003      	beq.n	8002520 <TIM_Base_SetConfig+0x30>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	4a2b      	ldr	r2, [pc, #172]	@ (80025c8 <TIM_Base_SetConfig+0xd8>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d108      	bne.n	8002532 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002526:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	68fa      	ldr	r2, [r7, #12]
 800252e:	4313      	orrs	r3, r2
 8002530:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	4a22      	ldr	r2, [pc, #136]	@ (80025c0 <TIM_Base_SetConfig+0xd0>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d00b      	beq.n	8002552 <TIM_Base_SetConfig+0x62>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002540:	d007      	beq.n	8002552 <TIM_Base_SetConfig+0x62>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	4a1f      	ldr	r2, [pc, #124]	@ (80025c4 <TIM_Base_SetConfig+0xd4>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d003      	beq.n	8002552 <TIM_Base_SetConfig+0x62>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	4a1e      	ldr	r2, [pc, #120]	@ (80025c8 <TIM_Base_SetConfig+0xd8>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d108      	bne.n	8002564 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002558:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	68db      	ldr	r3, [r3, #12]
 800255e:	68fa      	ldr	r2, [r7, #12]
 8002560:	4313      	orrs	r3, r2
 8002562:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	695b      	ldr	r3, [r3, #20]
 800256e:	4313      	orrs	r3, r2
 8002570:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	68fa      	ldr	r2, [r7, #12]
 8002576:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	689a      	ldr	r2, [r3, #8]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	681a      	ldr	r2, [r3, #0]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	4a0d      	ldr	r2, [pc, #52]	@ (80025c0 <TIM_Base_SetConfig+0xd0>)
 800258c:	4293      	cmp	r3, r2
 800258e:	d103      	bne.n	8002598 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	691a      	ldr	r2, [r3, #16]
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2201      	movs	r2, #1
 800259c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	691b      	ldr	r3, [r3, #16]
 80025a2:	f003 0301 	and.w	r3, r3, #1
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d005      	beq.n	80025b6 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	691b      	ldr	r3, [r3, #16]
 80025ae:	f023 0201 	bic.w	r2, r3, #1
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	611a      	str	r2, [r3, #16]
  }
}
 80025b6:	bf00      	nop
 80025b8:	3714      	adds	r7, #20
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bc80      	pop	{r7}
 80025be:	4770      	bx	lr
 80025c0:	40012c00 	.word	0x40012c00
 80025c4:	40000400 	.word	0x40000400
 80025c8:	40000800 	.word	0x40000800

080025cc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80025cc:	b480      	push	{r7}
 80025ce:	b087      	sub	sp, #28
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
 80025d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6a1b      	ldr	r3, [r3, #32]
 80025da:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6a1b      	ldr	r3, [r3, #32]
 80025e0:	f023 0201 	bic.w	r2, r3, #1
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	699b      	ldr	r3, [r3, #24]
 80025f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80025fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	f023 0303 	bic.w	r3, r3, #3
 8002602:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	68fa      	ldr	r2, [r7, #12]
 800260a:	4313      	orrs	r3, r2
 800260c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800260e:	697b      	ldr	r3, [r7, #20]
 8002610:	f023 0302 	bic.w	r3, r3, #2
 8002614:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	689b      	ldr	r3, [r3, #8]
 800261a:	697a      	ldr	r2, [r7, #20]
 800261c:	4313      	orrs	r3, r2
 800261e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	4a1c      	ldr	r2, [pc, #112]	@ (8002694 <TIM_OC1_SetConfig+0xc8>)
 8002624:	4293      	cmp	r3, r2
 8002626:	d10c      	bne.n	8002642 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002628:	697b      	ldr	r3, [r7, #20]
 800262a:	f023 0308 	bic.w	r3, r3, #8
 800262e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	68db      	ldr	r3, [r3, #12]
 8002634:	697a      	ldr	r2, [r7, #20]
 8002636:	4313      	orrs	r3, r2
 8002638:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800263a:	697b      	ldr	r3, [r7, #20]
 800263c:	f023 0304 	bic.w	r3, r3, #4
 8002640:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	4a13      	ldr	r2, [pc, #76]	@ (8002694 <TIM_OC1_SetConfig+0xc8>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d111      	bne.n	800266e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800264a:	693b      	ldr	r3, [r7, #16]
 800264c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002650:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002658:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	695b      	ldr	r3, [r3, #20]
 800265e:	693a      	ldr	r2, [r7, #16]
 8002660:	4313      	orrs	r3, r2
 8002662:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	699b      	ldr	r3, [r3, #24]
 8002668:	693a      	ldr	r2, [r7, #16]
 800266a:	4313      	orrs	r3, r2
 800266c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	693a      	ldr	r2, [r7, #16]
 8002672:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	68fa      	ldr	r2, [r7, #12]
 8002678:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	685a      	ldr	r2, [r3, #4]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	697a      	ldr	r2, [r7, #20]
 8002686:	621a      	str	r2, [r3, #32]
}
 8002688:	bf00      	nop
 800268a:	371c      	adds	r7, #28
 800268c:	46bd      	mov	sp, r7
 800268e:	bc80      	pop	{r7}
 8002690:	4770      	bx	lr
 8002692:	bf00      	nop
 8002694:	40012c00 	.word	0x40012c00

08002698 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002698:	b480      	push	{r7}
 800269a:	b087      	sub	sp, #28
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
 80026a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6a1b      	ldr	r3, [r3, #32]
 80026a6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6a1b      	ldr	r3, [r3, #32]
 80026ac:	f023 0210 	bic.w	r2, r3, #16
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	699b      	ldr	r3, [r3, #24]
 80026be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80026c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80026ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	021b      	lsls	r3, r3, #8
 80026d6:	68fa      	ldr	r2, [r7, #12]
 80026d8:	4313      	orrs	r3, r2
 80026da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	f023 0320 	bic.w	r3, r3, #32
 80026e2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	689b      	ldr	r3, [r3, #8]
 80026e8:	011b      	lsls	r3, r3, #4
 80026ea:	697a      	ldr	r2, [r7, #20]
 80026ec:	4313      	orrs	r3, r2
 80026ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	4a1d      	ldr	r2, [pc, #116]	@ (8002768 <TIM_OC2_SetConfig+0xd0>)
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d10d      	bne.n	8002714 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80026fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	68db      	ldr	r3, [r3, #12]
 8002704:	011b      	lsls	r3, r3, #4
 8002706:	697a      	ldr	r2, [r7, #20]
 8002708:	4313      	orrs	r3, r2
 800270a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800270c:	697b      	ldr	r3, [r7, #20]
 800270e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002712:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	4a14      	ldr	r2, [pc, #80]	@ (8002768 <TIM_OC2_SetConfig+0xd0>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d113      	bne.n	8002744 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800271c:	693b      	ldr	r3, [r7, #16]
 800271e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002722:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002724:	693b      	ldr	r3, [r7, #16]
 8002726:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800272a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	695b      	ldr	r3, [r3, #20]
 8002730:	009b      	lsls	r3, r3, #2
 8002732:	693a      	ldr	r2, [r7, #16]
 8002734:	4313      	orrs	r3, r2
 8002736:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	699b      	ldr	r3, [r3, #24]
 800273c:	009b      	lsls	r3, r3, #2
 800273e:	693a      	ldr	r2, [r7, #16]
 8002740:	4313      	orrs	r3, r2
 8002742:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	693a      	ldr	r2, [r7, #16]
 8002748:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	68fa      	ldr	r2, [r7, #12]
 800274e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	685a      	ldr	r2, [r3, #4]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	697a      	ldr	r2, [r7, #20]
 800275c:	621a      	str	r2, [r3, #32]
}
 800275e:	bf00      	nop
 8002760:	371c      	adds	r7, #28
 8002762:	46bd      	mov	sp, r7
 8002764:	bc80      	pop	{r7}
 8002766:	4770      	bx	lr
 8002768:	40012c00 	.word	0x40012c00

0800276c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800276c:	b480      	push	{r7}
 800276e:	b087      	sub	sp, #28
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
 8002774:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6a1b      	ldr	r3, [r3, #32]
 800277a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6a1b      	ldr	r3, [r3, #32]
 8002780:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	69db      	ldr	r3, [r3, #28]
 8002792:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800279a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	f023 0303 	bic.w	r3, r3, #3
 80027a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	68fa      	ldr	r2, [r7, #12]
 80027aa:	4313      	orrs	r3, r2
 80027ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80027ae:	697b      	ldr	r3, [r7, #20]
 80027b0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80027b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	689b      	ldr	r3, [r3, #8]
 80027ba:	021b      	lsls	r3, r3, #8
 80027bc:	697a      	ldr	r2, [r7, #20]
 80027be:	4313      	orrs	r3, r2
 80027c0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	4a1d      	ldr	r2, [pc, #116]	@ (800283c <TIM_OC3_SetConfig+0xd0>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d10d      	bne.n	80027e6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80027ca:	697b      	ldr	r3, [r7, #20]
 80027cc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80027d0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	68db      	ldr	r3, [r3, #12]
 80027d6:	021b      	lsls	r3, r3, #8
 80027d8:	697a      	ldr	r2, [r7, #20]
 80027da:	4313      	orrs	r3, r2
 80027dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80027e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	4a14      	ldr	r2, [pc, #80]	@ (800283c <TIM_OC3_SetConfig+0xd0>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d113      	bne.n	8002816 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80027ee:	693b      	ldr	r3, [r7, #16]
 80027f0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80027f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80027f6:	693b      	ldr	r3, [r7, #16]
 80027f8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80027fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	695b      	ldr	r3, [r3, #20]
 8002802:	011b      	lsls	r3, r3, #4
 8002804:	693a      	ldr	r2, [r7, #16]
 8002806:	4313      	orrs	r3, r2
 8002808:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	699b      	ldr	r3, [r3, #24]
 800280e:	011b      	lsls	r3, r3, #4
 8002810:	693a      	ldr	r2, [r7, #16]
 8002812:	4313      	orrs	r3, r2
 8002814:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	693a      	ldr	r2, [r7, #16]
 800281a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	68fa      	ldr	r2, [r7, #12]
 8002820:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	685a      	ldr	r2, [r3, #4]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	697a      	ldr	r2, [r7, #20]
 800282e:	621a      	str	r2, [r3, #32]
}
 8002830:	bf00      	nop
 8002832:	371c      	adds	r7, #28
 8002834:	46bd      	mov	sp, r7
 8002836:	bc80      	pop	{r7}
 8002838:	4770      	bx	lr
 800283a:	bf00      	nop
 800283c:	40012c00 	.word	0x40012c00

08002840 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002840:	b480      	push	{r7}
 8002842:	b087      	sub	sp, #28
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
 8002848:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6a1b      	ldr	r3, [r3, #32]
 800284e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6a1b      	ldr	r3, [r3, #32]
 8002854:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	69db      	ldr	r3, [r3, #28]
 8002866:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800286e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002876:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	021b      	lsls	r3, r3, #8
 800287e:	68fa      	ldr	r2, [r7, #12]
 8002880:	4313      	orrs	r3, r2
 8002882:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002884:	693b      	ldr	r3, [r7, #16]
 8002886:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800288a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	689b      	ldr	r3, [r3, #8]
 8002890:	031b      	lsls	r3, r3, #12
 8002892:	693a      	ldr	r2, [r7, #16]
 8002894:	4313      	orrs	r3, r2
 8002896:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	4a0f      	ldr	r2, [pc, #60]	@ (80028d8 <TIM_OC4_SetConfig+0x98>)
 800289c:	4293      	cmp	r3, r2
 800289e:	d109      	bne.n	80028b4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80028a6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	695b      	ldr	r3, [r3, #20]
 80028ac:	019b      	lsls	r3, r3, #6
 80028ae:	697a      	ldr	r2, [r7, #20]
 80028b0:	4313      	orrs	r3, r2
 80028b2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	697a      	ldr	r2, [r7, #20]
 80028b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	68fa      	ldr	r2, [r7, #12]
 80028be:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	685a      	ldr	r2, [r3, #4]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	693a      	ldr	r2, [r7, #16]
 80028cc:	621a      	str	r2, [r3, #32]
}
 80028ce:	bf00      	nop
 80028d0:	371c      	adds	r7, #28
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bc80      	pop	{r7}
 80028d6:	4770      	bx	lr
 80028d8:	40012c00 	.word	0x40012c00

080028dc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80028dc:	b480      	push	{r7}
 80028de:	b087      	sub	sp, #28
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	60f8      	str	r0, [r7, #12]
 80028e4:	60b9      	str	r1, [r7, #8]
 80028e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	6a1b      	ldr	r3, [r3, #32]
 80028ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	6a1b      	ldr	r3, [r3, #32]
 80028f2:	f023 0201 	bic.w	r2, r3, #1
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	699b      	ldr	r3, [r3, #24]
 80028fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002900:	693b      	ldr	r3, [r7, #16]
 8002902:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002906:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	011b      	lsls	r3, r3, #4
 800290c:	693a      	ldr	r2, [r7, #16]
 800290e:	4313      	orrs	r3, r2
 8002910:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002912:	697b      	ldr	r3, [r7, #20]
 8002914:	f023 030a 	bic.w	r3, r3, #10
 8002918:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800291a:	697a      	ldr	r2, [r7, #20]
 800291c:	68bb      	ldr	r3, [r7, #8]
 800291e:	4313      	orrs	r3, r2
 8002920:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	693a      	ldr	r2, [r7, #16]
 8002926:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	697a      	ldr	r2, [r7, #20]
 800292c:	621a      	str	r2, [r3, #32]
}
 800292e:	bf00      	nop
 8002930:	371c      	adds	r7, #28
 8002932:	46bd      	mov	sp, r7
 8002934:	bc80      	pop	{r7}
 8002936:	4770      	bx	lr

08002938 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002938:	b480      	push	{r7}
 800293a:	b087      	sub	sp, #28
 800293c:	af00      	add	r7, sp, #0
 800293e:	60f8      	str	r0, [r7, #12]
 8002940:	60b9      	str	r1, [r7, #8]
 8002942:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	6a1b      	ldr	r3, [r3, #32]
 8002948:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	6a1b      	ldr	r3, [r3, #32]
 800294e:	f023 0210 	bic.w	r2, r3, #16
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	699b      	ldr	r3, [r3, #24]
 800295a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800295c:	693b      	ldr	r3, [r7, #16]
 800295e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002962:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	031b      	lsls	r3, r3, #12
 8002968:	693a      	ldr	r2, [r7, #16]
 800296a:	4313      	orrs	r3, r2
 800296c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800296e:	697b      	ldr	r3, [r7, #20]
 8002970:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002974:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002976:	68bb      	ldr	r3, [r7, #8]
 8002978:	011b      	lsls	r3, r3, #4
 800297a:	697a      	ldr	r2, [r7, #20]
 800297c:	4313      	orrs	r3, r2
 800297e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	693a      	ldr	r2, [r7, #16]
 8002984:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	697a      	ldr	r2, [r7, #20]
 800298a:	621a      	str	r2, [r3, #32]
}
 800298c:	bf00      	nop
 800298e:	371c      	adds	r7, #28
 8002990:	46bd      	mov	sp, r7
 8002992:	bc80      	pop	{r7}
 8002994:	4770      	bx	lr

08002996 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002996:	b480      	push	{r7}
 8002998:	b085      	sub	sp, #20
 800299a:	af00      	add	r7, sp, #0
 800299c:	6078      	str	r0, [r7, #4]
 800299e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80029ac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80029ae:	683a      	ldr	r2, [r7, #0]
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	4313      	orrs	r3, r2
 80029b4:	f043 0307 	orr.w	r3, r3, #7
 80029b8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	68fa      	ldr	r2, [r7, #12]
 80029be:	609a      	str	r2, [r3, #8]
}
 80029c0:	bf00      	nop
 80029c2:	3714      	adds	r7, #20
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bc80      	pop	{r7}
 80029c8:	4770      	bx	lr

080029ca <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80029ca:	b480      	push	{r7}
 80029cc:	b087      	sub	sp, #28
 80029ce:	af00      	add	r7, sp, #0
 80029d0:	60f8      	str	r0, [r7, #12]
 80029d2:	60b9      	str	r1, [r7, #8]
 80029d4:	607a      	str	r2, [r7, #4]
 80029d6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	689b      	ldr	r3, [r3, #8]
 80029dc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80029de:	697b      	ldr	r3, [r7, #20]
 80029e0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80029e4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	021a      	lsls	r2, r3, #8
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	431a      	orrs	r2, r3
 80029ee:	68bb      	ldr	r3, [r7, #8]
 80029f0:	4313      	orrs	r3, r2
 80029f2:	697a      	ldr	r2, [r7, #20]
 80029f4:	4313      	orrs	r3, r2
 80029f6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	697a      	ldr	r2, [r7, #20]
 80029fc:	609a      	str	r2, [r3, #8]
}
 80029fe:	bf00      	nop
 8002a00:	371c      	adds	r7, #28
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bc80      	pop	{r7}
 8002a06:	4770      	bx	lr

08002a08 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b087      	sub	sp, #28
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	60f8      	str	r0, [r7, #12]
 8002a10:	60b9      	str	r1, [r7, #8]
 8002a12:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	f003 031f 	and.w	r3, r3, #31
 8002a1a:	2201      	movs	r2, #1
 8002a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a20:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	6a1a      	ldr	r2, [r3, #32]
 8002a26:	697b      	ldr	r3, [r7, #20]
 8002a28:	43db      	mvns	r3, r3
 8002a2a:	401a      	ands	r2, r3
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	6a1a      	ldr	r2, [r3, #32]
 8002a34:	68bb      	ldr	r3, [r7, #8]
 8002a36:	f003 031f 	and.w	r3, r3, #31
 8002a3a:	6879      	ldr	r1, [r7, #4]
 8002a3c:	fa01 f303 	lsl.w	r3, r1, r3
 8002a40:	431a      	orrs	r2, r3
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	621a      	str	r2, [r3, #32]
}
 8002a46:	bf00      	nop
 8002a48:	371c      	adds	r7, #28
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bc80      	pop	{r7}
 8002a4e:	4770      	bx	lr

08002a50 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002a50:	b480      	push	{r7}
 8002a52:	b085      	sub	sp, #20
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
 8002a58:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002a60:	2b01      	cmp	r3, #1
 8002a62:	d101      	bne.n	8002a68 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002a64:	2302      	movs	r3, #2
 8002a66:	e046      	b.n	8002af6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2202      	movs	r2, #2
 8002a74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	689b      	ldr	r3, [r3, #8]
 8002a86:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002a8e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	68fa      	ldr	r2, [r7, #12]
 8002a96:	4313      	orrs	r3, r2
 8002a98:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	68fa      	ldr	r2, [r7, #12]
 8002aa0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4a16      	ldr	r2, [pc, #88]	@ (8002b00 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d00e      	beq.n	8002aca <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ab4:	d009      	beq.n	8002aca <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a12      	ldr	r2, [pc, #72]	@ (8002b04 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d004      	beq.n	8002aca <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a10      	ldr	r2, [pc, #64]	@ (8002b08 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d10c      	bne.n	8002ae4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002aca:	68bb      	ldr	r3, [r7, #8]
 8002acc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002ad0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	68ba      	ldr	r2, [r7, #8]
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	68ba      	ldr	r2, [r7, #8]
 8002ae2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2200      	movs	r2, #0
 8002af0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002af4:	2300      	movs	r3, #0
}
 8002af6:	4618      	mov	r0, r3
 8002af8:	3714      	adds	r7, #20
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bc80      	pop	{r7}
 8002afe:	4770      	bx	lr
 8002b00:	40012c00 	.word	0x40012c00
 8002b04:	40000400 	.word	0x40000400
 8002b08:	40000800 	.word	0x40000800

08002b0c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	b085      	sub	sp, #20
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
 8002b14:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002b16:	2300      	movs	r3, #0
 8002b18:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002b20:	2b01      	cmp	r3, #1
 8002b22:	d101      	bne.n	8002b28 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002b24:	2302      	movs	r3, #2
 8002b26:	e03d      	b.n	8002ba4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	68db      	ldr	r3, [r3, #12]
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	689b      	ldr	r3, [r3, #8]
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	4313      	orrs	r3, r2
 8002b58:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4313      	orrs	r3, r2
 8002b66:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	691b      	ldr	r3, [r3, #16]
 8002b72:	4313      	orrs	r3, r2
 8002b74:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	695b      	ldr	r3, [r3, #20]
 8002b80:	4313      	orrs	r3, r2
 8002b82:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	69db      	ldr	r3, [r3, #28]
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	68fa      	ldr	r2, [r7, #12]
 8002b98:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002ba2:	2300      	movs	r3, #0
}
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	3714      	adds	r7, #20
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bc80      	pop	{r7}
 8002bac:	4770      	bx	lr

08002bae <memset>:
 8002bae:	4603      	mov	r3, r0
 8002bb0:	4402      	add	r2, r0
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d100      	bne.n	8002bb8 <memset+0xa>
 8002bb6:	4770      	bx	lr
 8002bb8:	f803 1b01 	strb.w	r1, [r3], #1
 8002bbc:	e7f9      	b.n	8002bb2 <memset+0x4>
	...

08002bc0 <__libc_init_array>:
 8002bc0:	b570      	push	{r4, r5, r6, lr}
 8002bc2:	2600      	movs	r6, #0
 8002bc4:	4d0c      	ldr	r5, [pc, #48]	@ (8002bf8 <__libc_init_array+0x38>)
 8002bc6:	4c0d      	ldr	r4, [pc, #52]	@ (8002bfc <__libc_init_array+0x3c>)
 8002bc8:	1b64      	subs	r4, r4, r5
 8002bca:	10a4      	asrs	r4, r4, #2
 8002bcc:	42a6      	cmp	r6, r4
 8002bce:	d109      	bne.n	8002be4 <__libc_init_array+0x24>
 8002bd0:	f000 fff2 	bl	8003bb8 <_init>
 8002bd4:	2600      	movs	r6, #0
 8002bd6:	4d0a      	ldr	r5, [pc, #40]	@ (8002c00 <__libc_init_array+0x40>)
 8002bd8:	4c0a      	ldr	r4, [pc, #40]	@ (8002c04 <__libc_init_array+0x44>)
 8002bda:	1b64      	subs	r4, r4, r5
 8002bdc:	10a4      	asrs	r4, r4, #2
 8002bde:	42a6      	cmp	r6, r4
 8002be0:	d105      	bne.n	8002bee <__libc_init_array+0x2e>
 8002be2:	bd70      	pop	{r4, r5, r6, pc}
 8002be4:	f855 3b04 	ldr.w	r3, [r5], #4
 8002be8:	4798      	blx	r3
 8002bea:	3601      	adds	r6, #1
 8002bec:	e7ee      	b.n	8002bcc <__libc_init_array+0xc>
 8002bee:	f855 3b04 	ldr.w	r3, [r5], #4
 8002bf2:	4798      	blx	r3
 8002bf4:	3601      	adds	r6, #1
 8002bf6:	e7f2      	b.n	8002bde <__libc_init_array+0x1e>
 8002bf8:	08003dd0 	.word	0x08003dd0
 8002bfc:	08003dd0 	.word	0x08003dd0
 8002c00:	08003dd0 	.word	0x08003dd0
 8002c04:	08003dd4 	.word	0x08003dd4

08002c08 <sin>:
 8002c08:	b530      	push	{r4, r5, lr}
 8002c0a:	4d20      	ldr	r5, [pc, #128]	@ (8002c8c <sin+0x84>)
 8002c0c:	f021 4400 	bic.w	r4, r1, #2147483648	@ 0x80000000
 8002c10:	42ac      	cmp	r4, r5
 8002c12:	4602      	mov	r2, r0
 8002c14:	460b      	mov	r3, r1
 8002c16:	b087      	sub	sp, #28
 8002c18:	d806      	bhi.n	8002c28 <sin+0x20>
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	9300      	str	r3, [sp, #0]
 8002c20:	2300      	movs	r3, #0
 8002c22:	f000 f8f9 	bl	8002e18 <__kernel_sin>
 8002c26:	e004      	b.n	8002c32 <sin+0x2a>
 8002c28:	4d19      	ldr	r5, [pc, #100]	@ (8002c90 <sin+0x88>)
 8002c2a:	42ac      	cmp	r4, r5
 8002c2c:	d903      	bls.n	8002c36 <sin+0x2e>
 8002c2e:	f7fd fc71 	bl	8000514 <__aeabi_dsub>
 8002c32:	b007      	add	sp, #28
 8002c34:	bd30      	pop	{r4, r5, pc}
 8002c36:	aa02      	add	r2, sp, #8
 8002c38:	f000 f9a6 	bl	8002f88 <__ieee754_rem_pio2>
 8002c3c:	f000 0003 	and.w	r0, r0, #3
 8002c40:	2801      	cmp	r0, #1
 8002c42:	d009      	beq.n	8002c58 <sin+0x50>
 8002c44:	2802      	cmp	r0, #2
 8002c46:	d00e      	beq.n	8002c66 <sin+0x5e>
 8002c48:	b9c0      	cbnz	r0, 8002c7c <sin+0x74>
 8002c4a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002c4e:	2301      	movs	r3, #1
 8002c50:	9300      	str	r3, [sp, #0]
 8002c52:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002c56:	e7e4      	b.n	8002c22 <sin+0x1a>
 8002c58:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002c5c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002c60:	f000 f81a 	bl	8002c98 <__kernel_cos>
 8002c64:	e7e5      	b.n	8002c32 <sin+0x2a>
 8002c66:	2301      	movs	r3, #1
 8002c68:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002c6c:	9300      	str	r3, [sp, #0]
 8002c6e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002c72:	f000 f8d1 	bl	8002e18 <__kernel_sin>
 8002c76:	f101 4100 	add.w	r1, r1, #2147483648	@ 0x80000000
 8002c7a:	e7da      	b.n	8002c32 <sin+0x2a>
 8002c7c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002c80:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002c84:	f000 f808 	bl	8002c98 <__kernel_cos>
 8002c88:	e7f5      	b.n	8002c76 <sin+0x6e>
 8002c8a:	bf00      	nop
 8002c8c:	3fe921fb 	.word	0x3fe921fb
 8002c90:	7fefffff 	.word	0x7fefffff
 8002c94:	00000000 	.word	0x00000000

08002c98 <__kernel_cos>:
 8002c98:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c9c:	f021 4600 	bic.w	r6, r1, #2147483648	@ 0x80000000
 8002ca0:	f1b6 5f79 	cmp.w	r6, #1044381696	@ 0x3e400000
 8002ca4:	4680      	mov	r8, r0
 8002ca6:	4689      	mov	r9, r1
 8002ca8:	e9cd 2300 	strd	r2, r3, [sp]
 8002cac:	d204      	bcs.n	8002cb8 <__kernel_cos+0x20>
 8002cae:	f7fd fe71 	bl	8000994 <__aeabi_d2iz>
 8002cb2:	2800      	cmp	r0, #0
 8002cb4:	f000 8086 	beq.w	8002dc4 <__kernel_cos+0x12c>
 8002cb8:	4642      	mov	r2, r8
 8002cba:	464b      	mov	r3, r9
 8002cbc:	4640      	mov	r0, r8
 8002cbe:	4649      	mov	r1, r9
 8002cc0:	f7fd fa46 	bl	8000150 <__aeabi_dmul>
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	4b4e      	ldr	r3, [pc, #312]	@ (8002e00 <__kernel_cos+0x168>)
 8002cc8:	4604      	mov	r4, r0
 8002cca:	460d      	mov	r5, r1
 8002ccc:	f7fd fa40 	bl	8000150 <__aeabi_dmul>
 8002cd0:	a33f      	add	r3, pc, #252	@ (adr r3, 8002dd0 <__kernel_cos+0x138>)
 8002cd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cd6:	4682      	mov	sl, r0
 8002cd8:	468b      	mov	fp, r1
 8002cda:	4620      	mov	r0, r4
 8002cdc:	4629      	mov	r1, r5
 8002cde:	f7fd fa37 	bl	8000150 <__aeabi_dmul>
 8002ce2:	a33d      	add	r3, pc, #244	@ (adr r3, 8002dd8 <__kernel_cos+0x140>)
 8002ce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ce8:	f7fd fc16 	bl	8000518 <__adddf3>
 8002cec:	4622      	mov	r2, r4
 8002cee:	462b      	mov	r3, r5
 8002cf0:	f7fd fa2e 	bl	8000150 <__aeabi_dmul>
 8002cf4:	a33a      	add	r3, pc, #232	@ (adr r3, 8002de0 <__kernel_cos+0x148>)
 8002cf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cfa:	f7fd fc0b 	bl	8000514 <__aeabi_dsub>
 8002cfe:	4622      	mov	r2, r4
 8002d00:	462b      	mov	r3, r5
 8002d02:	f7fd fa25 	bl	8000150 <__aeabi_dmul>
 8002d06:	a338      	add	r3, pc, #224	@ (adr r3, 8002de8 <__kernel_cos+0x150>)
 8002d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d0c:	f7fd fc04 	bl	8000518 <__adddf3>
 8002d10:	4622      	mov	r2, r4
 8002d12:	462b      	mov	r3, r5
 8002d14:	f7fd fa1c 	bl	8000150 <__aeabi_dmul>
 8002d18:	a335      	add	r3, pc, #212	@ (adr r3, 8002df0 <__kernel_cos+0x158>)
 8002d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d1e:	f7fd fbf9 	bl	8000514 <__aeabi_dsub>
 8002d22:	4622      	mov	r2, r4
 8002d24:	462b      	mov	r3, r5
 8002d26:	f7fd fa13 	bl	8000150 <__aeabi_dmul>
 8002d2a:	a333      	add	r3, pc, #204	@ (adr r3, 8002df8 <__kernel_cos+0x160>)
 8002d2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d30:	f7fd fbf2 	bl	8000518 <__adddf3>
 8002d34:	4622      	mov	r2, r4
 8002d36:	462b      	mov	r3, r5
 8002d38:	f7fd fa0a 	bl	8000150 <__aeabi_dmul>
 8002d3c:	4622      	mov	r2, r4
 8002d3e:	462b      	mov	r3, r5
 8002d40:	f7fd fa06 	bl	8000150 <__aeabi_dmul>
 8002d44:	e9dd 2300 	ldrd	r2, r3, [sp]
 8002d48:	4604      	mov	r4, r0
 8002d4a:	460d      	mov	r5, r1
 8002d4c:	4640      	mov	r0, r8
 8002d4e:	4649      	mov	r1, r9
 8002d50:	f7fd f9fe 	bl	8000150 <__aeabi_dmul>
 8002d54:	460b      	mov	r3, r1
 8002d56:	4602      	mov	r2, r0
 8002d58:	4629      	mov	r1, r5
 8002d5a:	4620      	mov	r0, r4
 8002d5c:	f7fd fbda 	bl	8000514 <__aeabi_dsub>
 8002d60:	4b28      	ldr	r3, [pc, #160]	@ (8002e04 <__kernel_cos+0x16c>)
 8002d62:	4680      	mov	r8, r0
 8002d64:	429e      	cmp	r6, r3
 8002d66:	4689      	mov	r9, r1
 8002d68:	d80e      	bhi.n	8002d88 <__kernel_cos+0xf0>
 8002d6a:	4602      	mov	r2, r0
 8002d6c:	460b      	mov	r3, r1
 8002d6e:	4650      	mov	r0, sl
 8002d70:	4659      	mov	r1, fp
 8002d72:	f7fd fbcf 	bl	8000514 <__aeabi_dsub>
 8002d76:	4602      	mov	r2, r0
 8002d78:	2000      	movs	r0, #0
 8002d7a:	460b      	mov	r3, r1
 8002d7c:	4922      	ldr	r1, [pc, #136]	@ (8002e08 <__kernel_cos+0x170>)
 8002d7e:	f7fd fbc9 	bl	8000514 <__aeabi_dsub>
 8002d82:	b003      	add	sp, #12
 8002d84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002d88:	2400      	movs	r4, #0
 8002d8a:	4b20      	ldr	r3, [pc, #128]	@ (8002e0c <__kernel_cos+0x174>)
 8002d8c:	4622      	mov	r2, r4
 8002d8e:	429e      	cmp	r6, r3
 8002d90:	bf8c      	ite	hi
 8002d92:	4d1f      	ldrhi	r5, [pc, #124]	@ (8002e10 <__kernel_cos+0x178>)
 8002d94:	f5a6 1500 	subls.w	r5, r6, #2097152	@ 0x200000
 8002d98:	462b      	mov	r3, r5
 8002d9a:	2000      	movs	r0, #0
 8002d9c:	491a      	ldr	r1, [pc, #104]	@ (8002e08 <__kernel_cos+0x170>)
 8002d9e:	f7fd fbb9 	bl	8000514 <__aeabi_dsub>
 8002da2:	4622      	mov	r2, r4
 8002da4:	4606      	mov	r6, r0
 8002da6:	460f      	mov	r7, r1
 8002da8:	462b      	mov	r3, r5
 8002daa:	4650      	mov	r0, sl
 8002dac:	4659      	mov	r1, fp
 8002dae:	f7fd fbb1 	bl	8000514 <__aeabi_dsub>
 8002db2:	4642      	mov	r2, r8
 8002db4:	464b      	mov	r3, r9
 8002db6:	f7fd fbad 	bl	8000514 <__aeabi_dsub>
 8002dba:	4602      	mov	r2, r0
 8002dbc:	460b      	mov	r3, r1
 8002dbe:	4630      	mov	r0, r6
 8002dc0:	4639      	mov	r1, r7
 8002dc2:	e7dc      	b.n	8002d7e <__kernel_cos+0xe6>
 8002dc4:	2000      	movs	r0, #0
 8002dc6:	4910      	ldr	r1, [pc, #64]	@ (8002e08 <__kernel_cos+0x170>)
 8002dc8:	e7db      	b.n	8002d82 <__kernel_cos+0xea>
 8002dca:	bf00      	nop
 8002dcc:	f3af 8000 	nop.w
 8002dd0:	be8838d4 	.word	0xbe8838d4
 8002dd4:	bda8fae9 	.word	0xbda8fae9
 8002dd8:	bdb4b1c4 	.word	0xbdb4b1c4
 8002ddc:	3e21ee9e 	.word	0x3e21ee9e
 8002de0:	809c52ad 	.word	0x809c52ad
 8002de4:	3e927e4f 	.word	0x3e927e4f
 8002de8:	19cb1590 	.word	0x19cb1590
 8002dec:	3efa01a0 	.word	0x3efa01a0
 8002df0:	16c15177 	.word	0x16c15177
 8002df4:	3f56c16c 	.word	0x3f56c16c
 8002df8:	5555554c 	.word	0x5555554c
 8002dfc:	3fa55555 	.word	0x3fa55555
 8002e00:	3fe00000 	.word	0x3fe00000
 8002e04:	3fd33332 	.word	0x3fd33332
 8002e08:	3ff00000 	.word	0x3ff00000
 8002e0c:	3fe90000 	.word	0x3fe90000
 8002e10:	3fd20000 	.word	0x3fd20000
 8002e14:	00000000 	.word	0x00000000

08002e18 <__kernel_sin>:
 8002e18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e1c:	461f      	mov	r7, r3
 8002e1e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8002e22:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 8002e26:	4604      	mov	r4, r0
 8002e28:	460d      	mov	r5, r1
 8002e2a:	4616      	mov	r6, r2
 8002e2c:	b085      	sub	sp, #20
 8002e2e:	d203      	bcs.n	8002e38 <__kernel_sin+0x20>
 8002e30:	f7fd fdb0 	bl	8000994 <__aeabi_d2iz>
 8002e34:	2800      	cmp	r0, #0
 8002e36:	d051      	beq.n	8002edc <__kernel_sin+0xc4>
 8002e38:	4622      	mov	r2, r4
 8002e3a:	462b      	mov	r3, r5
 8002e3c:	4620      	mov	r0, r4
 8002e3e:	4629      	mov	r1, r5
 8002e40:	f7fd f986 	bl	8000150 <__aeabi_dmul>
 8002e44:	4682      	mov	sl, r0
 8002e46:	468b      	mov	fp, r1
 8002e48:	4602      	mov	r2, r0
 8002e4a:	460b      	mov	r3, r1
 8002e4c:	4620      	mov	r0, r4
 8002e4e:	4629      	mov	r1, r5
 8002e50:	f7fd f97e 	bl	8000150 <__aeabi_dmul>
 8002e54:	a33e      	add	r3, pc, #248	@ (adr r3, 8002f50 <__kernel_sin+0x138>)
 8002e56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e5a:	4680      	mov	r8, r0
 8002e5c:	4689      	mov	r9, r1
 8002e5e:	4650      	mov	r0, sl
 8002e60:	4659      	mov	r1, fp
 8002e62:	f7fd f975 	bl	8000150 <__aeabi_dmul>
 8002e66:	a33c      	add	r3, pc, #240	@ (adr r3, 8002f58 <__kernel_sin+0x140>)
 8002e68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e6c:	f7fd fb52 	bl	8000514 <__aeabi_dsub>
 8002e70:	4652      	mov	r2, sl
 8002e72:	465b      	mov	r3, fp
 8002e74:	f7fd f96c 	bl	8000150 <__aeabi_dmul>
 8002e78:	a339      	add	r3, pc, #228	@ (adr r3, 8002f60 <__kernel_sin+0x148>)
 8002e7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e7e:	f7fd fb4b 	bl	8000518 <__adddf3>
 8002e82:	4652      	mov	r2, sl
 8002e84:	465b      	mov	r3, fp
 8002e86:	f7fd f963 	bl	8000150 <__aeabi_dmul>
 8002e8a:	a337      	add	r3, pc, #220	@ (adr r3, 8002f68 <__kernel_sin+0x150>)
 8002e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e90:	f7fd fb40 	bl	8000514 <__aeabi_dsub>
 8002e94:	4652      	mov	r2, sl
 8002e96:	465b      	mov	r3, fp
 8002e98:	f7fd f95a 	bl	8000150 <__aeabi_dmul>
 8002e9c:	a334      	add	r3, pc, #208	@ (adr r3, 8002f70 <__kernel_sin+0x158>)
 8002e9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ea2:	f7fd fb39 	bl	8000518 <__adddf3>
 8002ea6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8002ea8:	e9cd 0100 	strd	r0, r1, [sp]
 8002eac:	b9db      	cbnz	r3, 8002ee6 <__kernel_sin+0xce>
 8002eae:	4602      	mov	r2, r0
 8002eb0:	460b      	mov	r3, r1
 8002eb2:	4650      	mov	r0, sl
 8002eb4:	4659      	mov	r1, fp
 8002eb6:	f7fd f94b 	bl	8000150 <__aeabi_dmul>
 8002eba:	a32f      	add	r3, pc, #188	@ (adr r3, 8002f78 <__kernel_sin+0x160>)
 8002ebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ec0:	f7fd fb28 	bl	8000514 <__aeabi_dsub>
 8002ec4:	4642      	mov	r2, r8
 8002ec6:	464b      	mov	r3, r9
 8002ec8:	f7fd f942 	bl	8000150 <__aeabi_dmul>
 8002ecc:	4602      	mov	r2, r0
 8002ece:	460b      	mov	r3, r1
 8002ed0:	4620      	mov	r0, r4
 8002ed2:	4629      	mov	r1, r5
 8002ed4:	f7fd fb20 	bl	8000518 <__adddf3>
 8002ed8:	4604      	mov	r4, r0
 8002eda:	460d      	mov	r5, r1
 8002edc:	4620      	mov	r0, r4
 8002ede:	4629      	mov	r1, r5
 8002ee0:	b005      	add	sp, #20
 8002ee2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	4630      	mov	r0, r6
 8002eea:	4639      	mov	r1, r7
 8002eec:	4b24      	ldr	r3, [pc, #144]	@ (8002f80 <__kernel_sin+0x168>)
 8002eee:	f7fd f92f 	bl	8000150 <__aeabi_dmul>
 8002ef2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8002ef6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002efa:	4640      	mov	r0, r8
 8002efc:	4649      	mov	r1, r9
 8002efe:	f7fd f927 	bl	8000150 <__aeabi_dmul>
 8002f02:	4602      	mov	r2, r0
 8002f04:	460b      	mov	r3, r1
 8002f06:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002f0a:	f7fd fb03 	bl	8000514 <__aeabi_dsub>
 8002f0e:	4652      	mov	r2, sl
 8002f10:	465b      	mov	r3, fp
 8002f12:	f7fd f91d 	bl	8000150 <__aeabi_dmul>
 8002f16:	4632      	mov	r2, r6
 8002f18:	463b      	mov	r3, r7
 8002f1a:	f7fd fafb 	bl	8000514 <__aeabi_dsub>
 8002f1e:	a316      	add	r3, pc, #88	@ (adr r3, 8002f78 <__kernel_sin+0x160>)
 8002f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f24:	4606      	mov	r6, r0
 8002f26:	460f      	mov	r7, r1
 8002f28:	4640      	mov	r0, r8
 8002f2a:	4649      	mov	r1, r9
 8002f2c:	f7fd f910 	bl	8000150 <__aeabi_dmul>
 8002f30:	4602      	mov	r2, r0
 8002f32:	460b      	mov	r3, r1
 8002f34:	4630      	mov	r0, r6
 8002f36:	4639      	mov	r1, r7
 8002f38:	f7fd faee 	bl	8000518 <__adddf3>
 8002f3c:	4602      	mov	r2, r0
 8002f3e:	460b      	mov	r3, r1
 8002f40:	4620      	mov	r0, r4
 8002f42:	4629      	mov	r1, r5
 8002f44:	f7fd fae6 	bl	8000514 <__aeabi_dsub>
 8002f48:	e7c6      	b.n	8002ed8 <__kernel_sin+0xc0>
 8002f4a:	bf00      	nop
 8002f4c:	f3af 8000 	nop.w
 8002f50:	5acfd57c 	.word	0x5acfd57c
 8002f54:	3de5d93a 	.word	0x3de5d93a
 8002f58:	8a2b9ceb 	.word	0x8a2b9ceb
 8002f5c:	3e5ae5e6 	.word	0x3e5ae5e6
 8002f60:	57b1fe7d 	.word	0x57b1fe7d
 8002f64:	3ec71de3 	.word	0x3ec71de3
 8002f68:	19c161d5 	.word	0x19c161d5
 8002f6c:	3f2a01a0 	.word	0x3f2a01a0
 8002f70:	1110f8a6 	.word	0x1110f8a6
 8002f74:	3f811111 	.word	0x3f811111
 8002f78:	55555549 	.word	0x55555549
 8002f7c:	3fc55555 	.word	0x3fc55555
 8002f80:	3fe00000 	.word	0x3fe00000
 8002f84:	00000000 	.word	0x00000000

08002f88 <__ieee754_rem_pio2>:
 8002f88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f8c:	4bc4      	ldr	r3, [pc, #784]	@ (80032a0 <__ieee754_rem_pio2+0x318>)
 8002f8e:	f021 4800 	bic.w	r8, r1, #2147483648	@ 0x80000000
 8002f92:	b08d      	sub	sp, #52	@ 0x34
 8002f94:	4598      	cmp	r8, r3
 8002f96:	4606      	mov	r6, r0
 8002f98:	460f      	mov	r7, r1
 8002f9a:	4614      	mov	r4, r2
 8002f9c:	9104      	str	r1, [sp, #16]
 8002f9e:	d807      	bhi.n	8002fb0 <__ieee754_rem_pio2+0x28>
 8002fa0:	e9c2 6700 	strd	r6, r7, [r2]
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8002fac:	2500      	movs	r5, #0
 8002fae:	e026      	b.n	8002ffe <__ieee754_rem_pio2+0x76>
 8002fb0:	4bbc      	ldr	r3, [pc, #752]	@ (80032a4 <__ieee754_rem_pio2+0x31c>)
 8002fb2:	4598      	cmp	r8, r3
 8002fb4:	d876      	bhi.n	80030a4 <__ieee754_rem_pio2+0x11c>
 8002fb6:	9b04      	ldr	r3, [sp, #16]
 8002fb8:	4dbb      	ldr	r5, [pc, #748]	@ (80032a8 <__ieee754_rem_pio2+0x320>)
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	a3aa      	add	r3, pc, #680	@ (adr r3, 8003268 <__ieee754_rem_pio2+0x2e0>)
 8002fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fc2:	dd38      	ble.n	8003036 <__ieee754_rem_pio2+0xae>
 8002fc4:	f7fd faa6 	bl	8000514 <__aeabi_dsub>
 8002fc8:	45a8      	cmp	r8, r5
 8002fca:	4606      	mov	r6, r0
 8002fcc:	460f      	mov	r7, r1
 8002fce:	d01a      	beq.n	8003006 <__ieee754_rem_pio2+0x7e>
 8002fd0:	a3a7      	add	r3, pc, #668	@ (adr r3, 8003270 <__ieee754_rem_pio2+0x2e8>)
 8002fd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fd6:	f7fd fa9d 	bl	8000514 <__aeabi_dsub>
 8002fda:	4602      	mov	r2, r0
 8002fdc:	460b      	mov	r3, r1
 8002fde:	4680      	mov	r8, r0
 8002fe0:	4689      	mov	r9, r1
 8002fe2:	4630      	mov	r0, r6
 8002fe4:	4639      	mov	r1, r7
 8002fe6:	f7fd fa95 	bl	8000514 <__aeabi_dsub>
 8002fea:	a3a1      	add	r3, pc, #644	@ (adr r3, 8003270 <__ieee754_rem_pio2+0x2e8>)
 8002fec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ff0:	f7fd fa90 	bl	8000514 <__aeabi_dsub>
 8002ff4:	2501      	movs	r5, #1
 8002ff6:	e9c4 8900 	strd	r8, r9, [r4]
 8002ffa:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8002ffe:	4628      	mov	r0, r5
 8003000:	b00d      	add	sp, #52	@ 0x34
 8003002:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003006:	a39c      	add	r3, pc, #624	@ (adr r3, 8003278 <__ieee754_rem_pio2+0x2f0>)
 8003008:	e9d3 2300 	ldrd	r2, r3, [r3]
 800300c:	f7fd fa82 	bl	8000514 <__aeabi_dsub>
 8003010:	a39b      	add	r3, pc, #620	@ (adr r3, 8003280 <__ieee754_rem_pio2+0x2f8>)
 8003012:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003016:	4606      	mov	r6, r0
 8003018:	460f      	mov	r7, r1
 800301a:	f7fd fa7b 	bl	8000514 <__aeabi_dsub>
 800301e:	4602      	mov	r2, r0
 8003020:	460b      	mov	r3, r1
 8003022:	4680      	mov	r8, r0
 8003024:	4689      	mov	r9, r1
 8003026:	4630      	mov	r0, r6
 8003028:	4639      	mov	r1, r7
 800302a:	f7fd fa73 	bl	8000514 <__aeabi_dsub>
 800302e:	a394      	add	r3, pc, #592	@ (adr r3, 8003280 <__ieee754_rem_pio2+0x2f8>)
 8003030:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003034:	e7dc      	b.n	8002ff0 <__ieee754_rem_pio2+0x68>
 8003036:	f7fd fa6f 	bl	8000518 <__adddf3>
 800303a:	45a8      	cmp	r8, r5
 800303c:	4606      	mov	r6, r0
 800303e:	460f      	mov	r7, r1
 8003040:	d018      	beq.n	8003074 <__ieee754_rem_pio2+0xec>
 8003042:	a38b      	add	r3, pc, #556	@ (adr r3, 8003270 <__ieee754_rem_pio2+0x2e8>)
 8003044:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003048:	f7fd fa66 	bl	8000518 <__adddf3>
 800304c:	4602      	mov	r2, r0
 800304e:	460b      	mov	r3, r1
 8003050:	4680      	mov	r8, r0
 8003052:	4689      	mov	r9, r1
 8003054:	4630      	mov	r0, r6
 8003056:	4639      	mov	r1, r7
 8003058:	f7fd fa5c 	bl	8000514 <__aeabi_dsub>
 800305c:	a384      	add	r3, pc, #528	@ (adr r3, 8003270 <__ieee754_rem_pio2+0x2e8>)
 800305e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003062:	f7fd fa59 	bl	8000518 <__adddf3>
 8003066:	f04f 35ff 	mov.w	r5, #4294967295
 800306a:	e9c4 8900 	strd	r8, r9, [r4]
 800306e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8003072:	e7c4      	b.n	8002ffe <__ieee754_rem_pio2+0x76>
 8003074:	a380      	add	r3, pc, #512	@ (adr r3, 8003278 <__ieee754_rem_pio2+0x2f0>)
 8003076:	e9d3 2300 	ldrd	r2, r3, [r3]
 800307a:	f7fd fa4d 	bl	8000518 <__adddf3>
 800307e:	a380      	add	r3, pc, #512	@ (adr r3, 8003280 <__ieee754_rem_pio2+0x2f8>)
 8003080:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003084:	4606      	mov	r6, r0
 8003086:	460f      	mov	r7, r1
 8003088:	f7fd fa46 	bl	8000518 <__adddf3>
 800308c:	4602      	mov	r2, r0
 800308e:	460b      	mov	r3, r1
 8003090:	4680      	mov	r8, r0
 8003092:	4689      	mov	r9, r1
 8003094:	4630      	mov	r0, r6
 8003096:	4639      	mov	r1, r7
 8003098:	f7fd fa3c 	bl	8000514 <__aeabi_dsub>
 800309c:	a378      	add	r3, pc, #480	@ (adr r3, 8003280 <__ieee754_rem_pio2+0x2f8>)
 800309e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030a2:	e7de      	b.n	8003062 <__ieee754_rem_pio2+0xda>
 80030a4:	4b81      	ldr	r3, [pc, #516]	@ (80032ac <__ieee754_rem_pio2+0x324>)
 80030a6:	4598      	cmp	r8, r3
 80030a8:	f200 80cf 	bhi.w	800324a <__ieee754_rem_pio2+0x2c2>
 80030ac:	f000 f962 	bl	8003374 <fabs>
 80030b0:	a375      	add	r3, pc, #468	@ (adr r3, 8003288 <__ieee754_rem_pio2+0x300>)
 80030b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030b6:	4606      	mov	r6, r0
 80030b8:	460f      	mov	r7, r1
 80030ba:	f7fd f849 	bl	8000150 <__aeabi_dmul>
 80030be:	2200      	movs	r2, #0
 80030c0:	4b7b      	ldr	r3, [pc, #492]	@ (80032b0 <__ieee754_rem_pio2+0x328>)
 80030c2:	f7fd fa29 	bl	8000518 <__adddf3>
 80030c6:	f7fd fc65 	bl	8000994 <__aeabi_d2iz>
 80030ca:	4605      	mov	r5, r0
 80030cc:	f7fd fb70 	bl	80007b0 <__aeabi_i2d>
 80030d0:	4602      	mov	r2, r0
 80030d2:	460b      	mov	r3, r1
 80030d4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80030d8:	a363      	add	r3, pc, #396	@ (adr r3, 8003268 <__ieee754_rem_pio2+0x2e0>)
 80030da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030de:	f7fd f837 	bl	8000150 <__aeabi_dmul>
 80030e2:	4602      	mov	r2, r0
 80030e4:	460b      	mov	r3, r1
 80030e6:	4630      	mov	r0, r6
 80030e8:	4639      	mov	r1, r7
 80030ea:	f7fd fa13 	bl	8000514 <__aeabi_dsub>
 80030ee:	a360      	add	r3, pc, #384	@ (adr r3, 8003270 <__ieee754_rem_pio2+0x2e8>)
 80030f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030f4:	4682      	mov	sl, r0
 80030f6:	468b      	mov	fp, r1
 80030f8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80030fc:	f7fd f828 	bl	8000150 <__aeabi_dmul>
 8003100:	2d1f      	cmp	r5, #31
 8003102:	4606      	mov	r6, r0
 8003104:	460f      	mov	r7, r1
 8003106:	dc0c      	bgt.n	8003122 <__ieee754_rem_pio2+0x19a>
 8003108:	4b6a      	ldr	r3, [pc, #424]	@ (80032b4 <__ieee754_rem_pio2+0x32c>)
 800310a:	1e6a      	subs	r2, r5, #1
 800310c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003110:	4543      	cmp	r3, r8
 8003112:	d006      	beq.n	8003122 <__ieee754_rem_pio2+0x19a>
 8003114:	4632      	mov	r2, r6
 8003116:	463b      	mov	r3, r7
 8003118:	4650      	mov	r0, sl
 800311a:	4659      	mov	r1, fp
 800311c:	f7fd f9fa 	bl	8000514 <__aeabi_dsub>
 8003120:	e00e      	b.n	8003140 <__ieee754_rem_pio2+0x1b8>
 8003122:	463b      	mov	r3, r7
 8003124:	4632      	mov	r2, r6
 8003126:	4650      	mov	r0, sl
 8003128:	4659      	mov	r1, fp
 800312a:	f7fd f9f3 	bl	8000514 <__aeabi_dsub>
 800312e:	ea4f 5328 	mov.w	r3, r8, asr #20
 8003132:	9305      	str	r3, [sp, #20]
 8003134:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8003138:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800313c:	2b10      	cmp	r3, #16
 800313e:	dc02      	bgt.n	8003146 <__ieee754_rem_pio2+0x1be>
 8003140:	e9c4 0100 	strd	r0, r1, [r4]
 8003144:	e039      	b.n	80031ba <__ieee754_rem_pio2+0x232>
 8003146:	a34c      	add	r3, pc, #304	@ (adr r3, 8003278 <__ieee754_rem_pio2+0x2f0>)
 8003148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800314c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003150:	f7fc fffe 	bl	8000150 <__aeabi_dmul>
 8003154:	4606      	mov	r6, r0
 8003156:	460f      	mov	r7, r1
 8003158:	4602      	mov	r2, r0
 800315a:	460b      	mov	r3, r1
 800315c:	4650      	mov	r0, sl
 800315e:	4659      	mov	r1, fp
 8003160:	f7fd f9d8 	bl	8000514 <__aeabi_dsub>
 8003164:	4602      	mov	r2, r0
 8003166:	460b      	mov	r3, r1
 8003168:	4680      	mov	r8, r0
 800316a:	4689      	mov	r9, r1
 800316c:	4650      	mov	r0, sl
 800316e:	4659      	mov	r1, fp
 8003170:	f7fd f9d0 	bl	8000514 <__aeabi_dsub>
 8003174:	4632      	mov	r2, r6
 8003176:	463b      	mov	r3, r7
 8003178:	f7fd f9cc 	bl	8000514 <__aeabi_dsub>
 800317c:	a340      	add	r3, pc, #256	@ (adr r3, 8003280 <__ieee754_rem_pio2+0x2f8>)
 800317e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003182:	4606      	mov	r6, r0
 8003184:	460f      	mov	r7, r1
 8003186:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800318a:	f7fc ffe1 	bl	8000150 <__aeabi_dmul>
 800318e:	4632      	mov	r2, r6
 8003190:	463b      	mov	r3, r7
 8003192:	f7fd f9bf 	bl	8000514 <__aeabi_dsub>
 8003196:	4602      	mov	r2, r0
 8003198:	460b      	mov	r3, r1
 800319a:	4606      	mov	r6, r0
 800319c:	460f      	mov	r7, r1
 800319e:	4640      	mov	r0, r8
 80031a0:	4649      	mov	r1, r9
 80031a2:	f7fd f9b7 	bl	8000514 <__aeabi_dsub>
 80031a6:	9a05      	ldr	r2, [sp, #20]
 80031a8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80031ac:	1ad3      	subs	r3, r2, r3
 80031ae:	2b31      	cmp	r3, #49	@ 0x31
 80031b0:	dc20      	bgt.n	80031f4 <__ieee754_rem_pio2+0x26c>
 80031b2:	46c2      	mov	sl, r8
 80031b4:	46cb      	mov	fp, r9
 80031b6:	e9c4 0100 	strd	r0, r1, [r4]
 80031ba:	e9d4 8900 	ldrd	r8, r9, [r4]
 80031be:	4650      	mov	r0, sl
 80031c0:	4642      	mov	r2, r8
 80031c2:	464b      	mov	r3, r9
 80031c4:	4659      	mov	r1, fp
 80031c6:	f7fd f9a5 	bl	8000514 <__aeabi_dsub>
 80031ca:	463b      	mov	r3, r7
 80031cc:	4632      	mov	r2, r6
 80031ce:	f7fd f9a1 	bl	8000514 <__aeabi_dsub>
 80031d2:	9b04      	ldr	r3, [sp, #16]
 80031d4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	f6bf af10 	bge.w	8002ffe <__ieee754_rem_pio2+0x76>
 80031de:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 80031e2:	6063      	str	r3, [r4, #4]
 80031e4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80031e8:	f8c4 8000 	str.w	r8, [r4]
 80031ec:	60a0      	str	r0, [r4, #8]
 80031ee:	60e3      	str	r3, [r4, #12]
 80031f0:	426d      	negs	r5, r5
 80031f2:	e704      	b.n	8002ffe <__ieee754_rem_pio2+0x76>
 80031f4:	a326      	add	r3, pc, #152	@ (adr r3, 8003290 <__ieee754_rem_pio2+0x308>)
 80031f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80031fe:	f7fc ffa7 	bl	8000150 <__aeabi_dmul>
 8003202:	4606      	mov	r6, r0
 8003204:	460f      	mov	r7, r1
 8003206:	4602      	mov	r2, r0
 8003208:	460b      	mov	r3, r1
 800320a:	4640      	mov	r0, r8
 800320c:	4649      	mov	r1, r9
 800320e:	f7fd f981 	bl	8000514 <__aeabi_dsub>
 8003212:	4602      	mov	r2, r0
 8003214:	460b      	mov	r3, r1
 8003216:	4682      	mov	sl, r0
 8003218:	468b      	mov	fp, r1
 800321a:	4640      	mov	r0, r8
 800321c:	4649      	mov	r1, r9
 800321e:	f7fd f979 	bl	8000514 <__aeabi_dsub>
 8003222:	4632      	mov	r2, r6
 8003224:	463b      	mov	r3, r7
 8003226:	f7fd f975 	bl	8000514 <__aeabi_dsub>
 800322a:	a31b      	add	r3, pc, #108	@ (adr r3, 8003298 <__ieee754_rem_pio2+0x310>)
 800322c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003230:	4606      	mov	r6, r0
 8003232:	460f      	mov	r7, r1
 8003234:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003238:	f7fc ff8a 	bl	8000150 <__aeabi_dmul>
 800323c:	4632      	mov	r2, r6
 800323e:	463b      	mov	r3, r7
 8003240:	f7fd f968 	bl	8000514 <__aeabi_dsub>
 8003244:	4606      	mov	r6, r0
 8003246:	460f      	mov	r7, r1
 8003248:	e764      	b.n	8003114 <__ieee754_rem_pio2+0x18c>
 800324a:	4b1b      	ldr	r3, [pc, #108]	@ (80032b8 <__ieee754_rem_pio2+0x330>)
 800324c:	4598      	cmp	r8, r3
 800324e:	d935      	bls.n	80032bc <__ieee754_rem_pio2+0x334>
 8003250:	4602      	mov	r2, r0
 8003252:	460b      	mov	r3, r1
 8003254:	f7fd f95e 	bl	8000514 <__aeabi_dsub>
 8003258:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800325c:	e9c4 0100 	strd	r0, r1, [r4]
 8003260:	e6a4      	b.n	8002fac <__ieee754_rem_pio2+0x24>
 8003262:	bf00      	nop
 8003264:	f3af 8000 	nop.w
 8003268:	54400000 	.word	0x54400000
 800326c:	3ff921fb 	.word	0x3ff921fb
 8003270:	1a626331 	.word	0x1a626331
 8003274:	3dd0b461 	.word	0x3dd0b461
 8003278:	1a600000 	.word	0x1a600000
 800327c:	3dd0b461 	.word	0x3dd0b461
 8003280:	2e037073 	.word	0x2e037073
 8003284:	3ba3198a 	.word	0x3ba3198a
 8003288:	6dc9c883 	.word	0x6dc9c883
 800328c:	3fe45f30 	.word	0x3fe45f30
 8003290:	2e000000 	.word	0x2e000000
 8003294:	3ba3198a 	.word	0x3ba3198a
 8003298:	252049c1 	.word	0x252049c1
 800329c:	397b839a 	.word	0x397b839a
 80032a0:	3fe921fb 	.word	0x3fe921fb
 80032a4:	4002d97b 	.word	0x4002d97b
 80032a8:	3ff921fb 	.word	0x3ff921fb
 80032ac:	413921fb 	.word	0x413921fb
 80032b0:	3fe00000 	.word	0x3fe00000
 80032b4:	08003bf4 	.word	0x08003bf4
 80032b8:	7fefffff 	.word	0x7fefffff
 80032bc:	ea4f 5528 	mov.w	r5, r8, asr #20
 80032c0:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 80032c4:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 80032c8:	460f      	mov	r7, r1
 80032ca:	f7fd fb63 	bl	8000994 <__aeabi_d2iz>
 80032ce:	f7fd fa6f 	bl	80007b0 <__aeabi_i2d>
 80032d2:	4602      	mov	r2, r0
 80032d4:	460b      	mov	r3, r1
 80032d6:	4630      	mov	r0, r6
 80032d8:	4639      	mov	r1, r7
 80032da:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80032de:	f7fd f919 	bl	8000514 <__aeabi_dsub>
 80032e2:	2200      	movs	r2, #0
 80032e4:	4b21      	ldr	r3, [pc, #132]	@ (800336c <__ieee754_rem_pio2+0x3e4>)
 80032e6:	f7fc ff33 	bl	8000150 <__aeabi_dmul>
 80032ea:	460f      	mov	r7, r1
 80032ec:	4606      	mov	r6, r0
 80032ee:	f7fd fb51 	bl	8000994 <__aeabi_d2iz>
 80032f2:	f7fd fa5d 	bl	80007b0 <__aeabi_i2d>
 80032f6:	4602      	mov	r2, r0
 80032f8:	460b      	mov	r3, r1
 80032fa:	4630      	mov	r0, r6
 80032fc:	4639      	mov	r1, r7
 80032fe:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8003302:	f7fd f907 	bl	8000514 <__aeabi_dsub>
 8003306:	2200      	movs	r2, #0
 8003308:	4b18      	ldr	r3, [pc, #96]	@ (800336c <__ieee754_rem_pio2+0x3e4>)
 800330a:	f7fc ff21 	bl	8000150 <__aeabi_dmul>
 800330e:	f04f 0803 	mov.w	r8, #3
 8003312:	2600      	movs	r6, #0
 8003314:	2700      	movs	r7, #0
 8003316:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 800331a:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 800331e:	4632      	mov	r2, r6
 8003320:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8003324:	463b      	mov	r3, r7
 8003326:	46c2      	mov	sl, r8
 8003328:	f108 38ff 	add.w	r8, r8, #4294967295
 800332c:	f7fd fb00 	bl	8000930 <__aeabi_dcmpeq>
 8003330:	2800      	cmp	r0, #0
 8003332:	d1f4      	bne.n	800331e <__ieee754_rem_pio2+0x396>
 8003334:	4b0e      	ldr	r3, [pc, #56]	@ (8003370 <__ieee754_rem_pio2+0x3e8>)
 8003336:	462a      	mov	r2, r5
 8003338:	9301      	str	r3, [sp, #4]
 800333a:	2302      	movs	r3, #2
 800333c:	4621      	mov	r1, r4
 800333e:	9300      	str	r3, [sp, #0]
 8003340:	a806      	add	r0, sp, #24
 8003342:	4653      	mov	r3, sl
 8003344:	f000 f81a 	bl	800337c <__kernel_rem_pio2>
 8003348:	9b04      	ldr	r3, [sp, #16]
 800334a:	4605      	mov	r5, r0
 800334c:	2b00      	cmp	r3, #0
 800334e:	f6bf ae56 	bge.w	8002ffe <__ieee754_rem_pio2+0x76>
 8003352:	e9d4 2100 	ldrd	r2, r1, [r4]
 8003356:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800335a:	e9c4 2300 	strd	r2, r3, [r4]
 800335e:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8003362:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8003366:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800336a:	e741      	b.n	80031f0 <__ieee754_rem_pio2+0x268>
 800336c:	41700000 	.word	0x41700000
 8003370:	08003c74 	.word	0x08003c74

08003374 <fabs>:
 8003374:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8003378:	4619      	mov	r1, r3
 800337a:	4770      	bx	lr

0800337c <__kernel_rem_pio2>:
 800337c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003380:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 8003384:	9308      	str	r3, [sp, #32]
 8003386:	9104      	str	r1, [sp, #16]
 8003388:	4bb6      	ldr	r3, [pc, #728]	@ (8003664 <__kernel_rem_pio2+0x2e8>)
 800338a:	99a2      	ldr	r1, [sp, #648]	@ 0x288
 800338c:	f112 0f14 	cmn.w	r2, #20
 8003390:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003394:	bfa8      	it	ge
 8003396:	1ed4      	subge	r4, r2, #3
 8003398:	9302      	str	r3, [sp, #8]
 800339a:	9b08      	ldr	r3, [sp, #32]
 800339c:	bfb8      	it	lt
 800339e:	2400      	movlt	r4, #0
 80033a0:	f103 33ff 	add.w	r3, r3, #4294967295
 80033a4:	9306      	str	r3, [sp, #24]
 80033a6:	bfa4      	itt	ge
 80033a8:	2318      	movge	r3, #24
 80033aa:	fb94 f4f3 	sdivge	r4, r4, r3
 80033ae:	f06f 0317 	mvn.w	r3, #23
 80033b2:	fb04 3303 	mla	r3, r4, r3, r3
 80033b6:	eb03 0a02 	add.w	sl, r3, r2
 80033ba:	9a06      	ldr	r2, [sp, #24]
 80033bc:	9b02      	ldr	r3, [sp, #8]
 80033be:	1aa7      	subs	r7, r4, r2
 80033c0:	eb03 0802 	add.w	r8, r3, r2
 80033c4:	9ba3      	ldr	r3, [sp, #652]	@ 0x28c
 80033c6:	2500      	movs	r5, #0
 80033c8:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80033cc:	2200      	movs	r2, #0
 80033ce:	2300      	movs	r3, #0
 80033d0:	9009      	str	r0, [sp, #36]	@ 0x24
 80033d2:	ae20      	add	r6, sp, #128	@ 0x80
 80033d4:	4545      	cmp	r5, r8
 80033d6:	dd14      	ble.n	8003402 <__kernel_rem_pio2+0x86>
 80033d8:	f04f 0800 	mov.w	r8, #0
 80033dc:	9a08      	ldr	r2, [sp, #32]
 80033de:	ab20      	add	r3, sp, #128	@ 0x80
 80033e0:	eb03 05c2 	add.w	r5, r3, r2, lsl #3
 80033e4:	f50d 7be0 	add.w	fp, sp, #448	@ 0x1c0
 80033e8:	9b02      	ldr	r3, [sp, #8]
 80033ea:	4598      	cmp	r8, r3
 80033ec:	dc35      	bgt.n	800345a <__kernel_rem_pio2+0xde>
 80033ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80033f0:	2200      	movs	r2, #0
 80033f2:	f1a3 0908 	sub.w	r9, r3, #8
 80033f6:	2300      	movs	r3, #0
 80033f8:	462f      	mov	r7, r5
 80033fa:	2600      	movs	r6, #0
 80033fc:	e9cd 2300 	strd	r2, r3, [sp]
 8003400:	e01f      	b.n	8003442 <__kernel_rem_pio2+0xc6>
 8003402:	42ef      	cmn	r7, r5
 8003404:	d40b      	bmi.n	800341e <__kernel_rem_pio2+0xa2>
 8003406:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800340a:	e9cd 2300 	strd	r2, r3, [sp]
 800340e:	f7fd f9cf 	bl	80007b0 <__aeabi_i2d>
 8003412:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003416:	e8e6 0102 	strd	r0, r1, [r6], #8
 800341a:	3501      	adds	r5, #1
 800341c:	e7da      	b.n	80033d4 <__kernel_rem_pio2+0x58>
 800341e:	4610      	mov	r0, r2
 8003420:	4619      	mov	r1, r3
 8003422:	e7f8      	b.n	8003416 <__kernel_rem_pio2+0x9a>
 8003424:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003428:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 800342c:	f7fc fe90 	bl	8000150 <__aeabi_dmul>
 8003430:	4602      	mov	r2, r0
 8003432:	460b      	mov	r3, r1
 8003434:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003438:	f7fd f86e 	bl	8000518 <__adddf3>
 800343c:	e9cd 0100 	strd	r0, r1, [sp]
 8003440:	3601      	adds	r6, #1
 8003442:	9b06      	ldr	r3, [sp, #24]
 8003444:	3f08      	subs	r7, #8
 8003446:	429e      	cmp	r6, r3
 8003448:	ddec      	ble.n	8003424 <__kernel_rem_pio2+0xa8>
 800344a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800344e:	f108 0801 	add.w	r8, r8, #1
 8003452:	e8eb 2302 	strd	r2, r3, [fp], #8
 8003456:	3508      	adds	r5, #8
 8003458:	e7c6      	b.n	80033e8 <__kernel_rem_pio2+0x6c>
 800345a:	9b02      	ldr	r3, [sp, #8]
 800345c:	aa0c      	add	r2, sp, #48	@ 0x30
 800345e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8003462:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003464:	9ba3      	ldr	r3, [sp, #652]	@ 0x28c
 8003466:	f8dd b008 	ldr.w	fp, [sp, #8]
 800346a:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800346e:	930a      	str	r3, [sp, #40]	@ 0x28
 8003470:	ab98      	add	r3, sp, #608	@ 0x260
 8003472:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8003476:	e953 4528 	ldrd	r4, r5, [r3, #-160]	@ 0xa0
 800347a:	ab70      	add	r3, sp, #448	@ 0x1c0
 800347c:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8003480:	ae0c      	add	r6, sp, #48	@ 0x30
 8003482:	4698      	mov	r8, r3
 8003484:	46b1      	mov	r9, r6
 8003486:	465f      	mov	r7, fp
 8003488:	9307      	str	r3, [sp, #28]
 800348a:	2f00      	cmp	r7, #0
 800348c:	f1a8 0808 	sub.w	r8, r8, #8
 8003490:	dc71      	bgt.n	8003576 <__kernel_rem_pio2+0x1fa>
 8003492:	4652      	mov	r2, sl
 8003494:	4620      	mov	r0, r4
 8003496:	4629      	mov	r1, r5
 8003498:	f000 fa96 	bl	80039c8 <scalbn>
 800349c:	2200      	movs	r2, #0
 800349e:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 80034a2:	4604      	mov	r4, r0
 80034a4:	460d      	mov	r5, r1
 80034a6:	f7fc fe53 	bl	8000150 <__aeabi_dmul>
 80034aa:	f000 fb05 	bl	8003ab8 <floor>
 80034ae:	2200      	movs	r2, #0
 80034b0:	4b6d      	ldr	r3, [pc, #436]	@ (8003668 <__kernel_rem_pio2+0x2ec>)
 80034b2:	f7fc fe4d 	bl	8000150 <__aeabi_dmul>
 80034b6:	4602      	mov	r2, r0
 80034b8:	460b      	mov	r3, r1
 80034ba:	4620      	mov	r0, r4
 80034bc:	4629      	mov	r1, r5
 80034be:	f7fd f829 	bl	8000514 <__aeabi_dsub>
 80034c2:	460d      	mov	r5, r1
 80034c4:	4604      	mov	r4, r0
 80034c6:	f7fd fa65 	bl	8000994 <__aeabi_d2iz>
 80034ca:	9005      	str	r0, [sp, #20]
 80034cc:	f7fd f970 	bl	80007b0 <__aeabi_i2d>
 80034d0:	4602      	mov	r2, r0
 80034d2:	460b      	mov	r3, r1
 80034d4:	4620      	mov	r0, r4
 80034d6:	4629      	mov	r1, r5
 80034d8:	f7fd f81c 	bl	8000514 <__aeabi_dsub>
 80034dc:	f1ba 0f00 	cmp.w	sl, #0
 80034e0:	4680      	mov	r8, r0
 80034e2:	4689      	mov	r9, r1
 80034e4:	dd6d      	ble.n	80035c2 <__kernel_rem_pio2+0x246>
 80034e6:	f10b 31ff 	add.w	r1, fp, #4294967295
 80034ea:	ab0c      	add	r3, sp, #48	@ 0x30
 80034ec:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80034f0:	9c05      	ldr	r4, [sp, #20]
 80034f2:	f1ca 0018 	rsb	r0, sl, #24
 80034f6:	fa43 f200 	asr.w	r2, r3, r0
 80034fa:	4414      	add	r4, r2
 80034fc:	4082      	lsls	r2, r0
 80034fe:	1a9b      	subs	r3, r3, r2
 8003500:	aa0c      	add	r2, sp, #48	@ 0x30
 8003502:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8003506:	f1ca 0217 	rsb	r2, sl, #23
 800350a:	9405      	str	r4, [sp, #20]
 800350c:	4113      	asrs	r3, r2
 800350e:	9300      	str	r3, [sp, #0]
 8003510:	9b00      	ldr	r3, [sp, #0]
 8003512:	2b00      	cmp	r3, #0
 8003514:	dd64      	ble.n	80035e0 <__kernel_rem_pio2+0x264>
 8003516:	2200      	movs	r2, #0
 8003518:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 800351c:	4614      	mov	r4, r2
 800351e:	9b05      	ldr	r3, [sp, #20]
 8003520:	3301      	adds	r3, #1
 8003522:	9305      	str	r3, [sp, #20]
 8003524:	4593      	cmp	fp, r2
 8003526:	f300 80ab 	bgt.w	8003680 <__kernel_rem_pio2+0x304>
 800352a:	f1ba 0f00 	cmp.w	sl, #0
 800352e:	dd07      	ble.n	8003540 <__kernel_rem_pio2+0x1c4>
 8003530:	f1ba 0f01 	cmp.w	sl, #1
 8003534:	f000 80b2 	beq.w	800369c <__kernel_rem_pio2+0x320>
 8003538:	f1ba 0f02 	cmp.w	sl, #2
 800353c:	f000 80b9 	beq.w	80036b2 <__kernel_rem_pio2+0x336>
 8003540:	9b00      	ldr	r3, [sp, #0]
 8003542:	2b02      	cmp	r3, #2
 8003544:	d14c      	bne.n	80035e0 <__kernel_rem_pio2+0x264>
 8003546:	4642      	mov	r2, r8
 8003548:	464b      	mov	r3, r9
 800354a:	2000      	movs	r0, #0
 800354c:	4947      	ldr	r1, [pc, #284]	@ (800366c <__kernel_rem_pio2+0x2f0>)
 800354e:	f7fc ffe1 	bl	8000514 <__aeabi_dsub>
 8003552:	4680      	mov	r8, r0
 8003554:	4689      	mov	r9, r1
 8003556:	2c00      	cmp	r4, #0
 8003558:	d042      	beq.n	80035e0 <__kernel_rem_pio2+0x264>
 800355a:	4652      	mov	r2, sl
 800355c:	2000      	movs	r0, #0
 800355e:	4943      	ldr	r1, [pc, #268]	@ (800366c <__kernel_rem_pio2+0x2f0>)
 8003560:	f000 fa32 	bl	80039c8 <scalbn>
 8003564:	4602      	mov	r2, r0
 8003566:	460b      	mov	r3, r1
 8003568:	4640      	mov	r0, r8
 800356a:	4649      	mov	r1, r9
 800356c:	f7fc ffd2 	bl	8000514 <__aeabi_dsub>
 8003570:	4680      	mov	r8, r0
 8003572:	4689      	mov	r9, r1
 8003574:	e034      	b.n	80035e0 <__kernel_rem_pio2+0x264>
 8003576:	2200      	movs	r2, #0
 8003578:	4b3d      	ldr	r3, [pc, #244]	@ (8003670 <__kernel_rem_pio2+0x2f4>)
 800357a:	4620      	mov	r0, r4
 800357c:	4629      	mov	r1, r5
 800357e:	f7fc fde7 	bl	8000150 <__aeabi_dmul>
 8003582:	f7fd fa07 	bl	8000994 <__aeabi_d2iz>
 8003586:	f7fd f913 	bl	80007b0 <__aeabi_i2d>
 800358a:	4602      	mov	r2, r0
 800358c:	460b      	mov	r3, r1
 800358e:	e9cd 2300 	strd	r2, r3, [sp]
 8003592:	2200      	movs	r2, #0
 8003594:	4b37      	ldr	r3, [pc, #220]	@ (8003674 <__kernel_rem_pio2+0x2f8>)
 8003596:	f7fc fddb 	bl	8000150 <__aeabi_dmul>
 800359a:	4602      	mov	r2, r0
 800359c:	460b      	mov	r3, r1
 800359e:	4620      	mov	r0, r4
 80035a0:	4629      	mov	r1, r5
 80035a2:	f7fc ffb7 	bl	8000514 <__aeabi_dsub>
 80035a6:	f7fd f9f5 	bl	8000994 <__aeabi_d2iz>
 80035aa:	e9d8 2300 	ldrd	r2, r3, [r8]
 80035ae:	f849 0b04 	str.w	r0, [r9], #4
 80035b2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80035b6:	f7fc ffaf 	bl	8000518 <__adddf3>
 80035ba:	3f01      	subs	r7, #1
 80035bc:	4604      	mov	r4, r0
 80035be:	460d      	mov	r5, r1
 80035c0:	e763      	b.n	800348a <__kernel_rem_pio2+0x10e>
 80035c2:	d106      	bne.n	80035d2 <__kernel_rem_pio2+0x256>
 80035c4:	f10b 33ff 	add.w	r3, fp, #4294967295
 80035c8:	aa0c      	add	r2, sp, #48	@ 0x30
 80035ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035ce:	15db      	asrs	r3, r3, #23
 80035d0:	e79d      	b.n	800350e <__kernel_rem_pio2+0x192>
 80035d2:	2200      	movs	r2, #0
 80035d4:	4b28      	ldr	r3, [pc, #160]	@ (8003678 <__kernel_rem_pio2+0x2fc>)
 80035d6:	f7fd f9c9 	bl	800096c <__aeabi_dcmpge>
 80035da:	2800      	cmp	r0, #0
 80035dc:	d13f      	bne.n	800365e <__kernel_rem_pio2+0x2e2>
 80035de:	9000      	str	r0, [sp, #0]
 80035e0:	2200      	movs	r2, #0
 80035e2:	2300      	movs	r3, #0
 80035e4:	4640      	mov	r0, r8
 80035e6:	4649      	mov	r1, r9
 80035e8:	f7fd f9a2 	bl	8000930 <__aeabi_dcmpeq>
 80035ec:	2800      	cmp	r0, #0
 80035ee:	f000 80af 	beq.w	8003750 <__kernel_rem_pio2+0x3d4>
 80035f2:	2200      	movs	r2, #0
 80035f4:	f10b 33ff 	add.w	r3, fp, #4294967295
 80035f8:	9902      	ldr	r1, [sp, #8]
 80035fa:	428b      	cmp	r3, r1
 80035fc:	da61      	bge.n	80036c2 <__kernel_rem_pio2+0x346>
 80035fe:	2a00      	cmp	r2, #0
 8003600:	d076      	beq.n	80036f0 <__kernel_rem_pio2+0x374>
 8003602:	f10b 3bff 	add.w	fp, fp, #4294967295
 8003606:	ab0c      	add	r3, sp, #48	@ 0x30
 8003608:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 800360c:	f1aa 0a18 	sub.w	sl, sl, #24
 8003610:	2b00      	cmp	r3, #0
 8003612:	d0f6      	beq.n	8003602 <__kernel_rem_pio2+0x286>
 8003614:	4652      	mov	r2, sl
 8003616:	2000      	movs	r0, #0
 8003618:	4914      	ldr	r1, [pc, #80]	@ (800366c <__kernel_rem_pio2+0x2f0>)
 800361a:	f000 f9d5 	bl	80039c8 <scalbn>
 800361e:	465d      	mov	r5, fp
 8003620:	4606      	mov	r6, r0
 8003622:	460f      	mov	r7, r1
 8003624:	f04f 0900 	mov.w	r9, #0
 8003628:	ab70      	add	r3, sp, #448	@ 0x1c0
 800362a:	f8df a044 	ldr.w	sl, [pc, #68]	@ 8003670 <__kernel_rem_pio2+0x2f4>
 800362e:	ea4f 04cb 	mov.w	r4, fp, lsl #3
 8003632:	eb03 08cb 	add.w	r8, r3, fp, lsl #3
 8003636:	2d00      	cmp	r5, #0
 8003638:	f280 80c0 	bge.w	80037bc <__kernel_rem_pio2+0x440>
 800363c:	465d      	mov	r5, fp
 800363e:	2d00      	cmp	r5, #0
 8003640:	f2c0 80f0 	blt.w	8003824 <__kernel_rem_pio2+0x4a8>
 8003644:	4b0d      	ldr	r3, [pc, #52]	@ (800367c <__kernel_rem_pio2+0x300>)
 8003646:	f04f 0900 	mov.w	r9, #0
 800364a:	9306      	str	r3, [sp, #24]
 800364c:	ab70      	add	r3, sp, #448	@ 0x1c0
 800364e:	f04f 0a00 	mov.w	sl, #0
 8003652:	2700      	movs	r7, #0
 8003654:	eb03 08c5 	add.w	r8, r3, r5, lsl #3
 8003658:	ebab 0605 	sub.w	r6, fp, r5
 800365c:	e0d6      	b.n	800380c <__kernel_rem_pio2+0x490>
 800365e:	2302      	movs	r3, #2
 8003660:	9300      	str	r3, [sp, #0]
 8003662:	e758      	b.n	8003516 <__kernel_rem_pio2+0x19a>
 8003664:	08003dc0 	.word	0x08003dc0
 8003668:	40200000 	.word	0x40200000
 800366c:	3ff00000 	.word	0x3ff00000
 8003670:	3e700000 	.word	0x3e700000
 8003674:	41700000 	.word	0x41700000
 8003678:	3fe00000 	.word	0x3fe00000
 800367c:	08003d80 	.word	0x08003d80
 8003680:	f856 3b04 	ldr.w	r3, [r6], #4
 8003684:	b944      	cbnz	r4, 8003698 <__kernel_rem_pio2+0x31c>
 8003686:	b123      	cbz	r3, 8003692 <__kernel_rem_pio2+0x316>
 8003688:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 800368c:	f846 3c04 	str.w	r3, [r6, #-4]
 8003690:	2301      	movs	r3, #1
 8003692:	461c      	mov	r4, r3
 8003694:	3201      	adds	r2, #1
 8003696:	e745      	b.n	8003524 <__kernel_rem_pio2+0x1a8>
 8003698:	1acb      	subs	r3, r1, r3
 800369a:	e7f7      	b.n	800368c <__kernel_rem_pio2+0x310>
 800369c:	f10b 32ff 	add.w	r2, fp, #4294967295
 80036a0:	ab0c      	add	r3, sp, #48	@ 0x30
 80036a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80036a6:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80036aa:	a90c      	add	r1, sp, #48	@ 0x30
 80036ac:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80036b0:	e746      	b.n	8003540 <__kernel_rem_pio2+0x1c4>
 80036b2:	f10b 32ff 	add.w	r2, fp, #4294967295
 80036b6:	ab0c      	add	r3, sp, #48	@ 0x30
 80036b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80036bc:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80036c0:	e7f3      	b.n	80036aa <__kernel_rem_pio2+0x32e>
 80036c2:	a90c      	add	r1, sp, #48	@ 0x30
 80036c4:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80036c8:	3b01      	subs	r3, #1
 80036ca:	430a      	orrs	r2, r1
 80036cc:	e794      	b.n	80035f8 <__kernel_rem_pio2+0x27c>
 80036ce:	3401      	adds	r4, #1
 80036d0:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80036d4:	2a00      	cmp	r2, #0
 80036d6:	d0fa      	beq.n	80036ce <__kernel_rem_pio2+0x352>
 80036d8:	9b08      	ldr	r3, [sp, #32]
 80036da:	aa20      	add	r2, sp, #128	@ 0x80
 80036dc:	445b      	add	r3, fp
 80036de:	f10b 0801 	add.w	r8, fp, #1
 80036e2:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 80036e6:	445c      	add	r4, fp
 80036e8:	4544      	cmp	r4, r8
 80036ea:	da04      	bge.n	80036f6 <__kernel_rem_pio2+0x37a>
 80036ec:	46a3      	mov	fp, r4
 80036ee:	e6bf      	b.n	8003470 <__kernel_rem_pio2+0xf4>
 80036f0:	2401      	movs	r4, #1
 80036f2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80036f4:	e7ec      	b.n	80036d0 <__kernel_rem_pio2+0x354>
 80036f6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80036f8:	46ab      	mov	fp, r5
 80036fa:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80036fe:	f7fd f857 	bl	80007b0 <__aeabi_i2d>
 8003702:	f04f 0900 	mov.w	r9, #0
 8003706:	2600      	movs	r6, #0
 8003708:	2700      	movs	r7, #0
 800370a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800370c:	e9c5 0100 	strd	r0, r1, [r5]
 8003710:	3b08      	subs	r3, #8
 8003712:	9300      	str	r3, [sp, #0]
 8003714:	9b06      	ldr	r3, [sp, #24]
 8003716:	4599      	cmp	r9, r3
 8003718:	dd07      	ble.n	800372a <__kernel_rem_pio2+0x3ae>
 800371a:	9b07      	ldr	r3, [sp, #28]
 800371c:	f108 0801 	add.w	r8, r8, #1
 8003720:	e9e3 6702 	strd	r6, r7, [r3, #8]!
 8003724:	3508      	adds	r5, #8
 8003726:	9307      	str	r3, [sp, #28]
 8003728:	e7de      	b.n	80036e8 <__kernel_rem_pio2+0x36c>
 800372a:	9900      	ldr	r1, [sp, #0]
 800372c:	f109 0901 	add.w	r9, r9, #1
 8003730:	e9f1 2302 	ldrd	r2, r3, [r1, #8]!
 8003734:	9100      	str	r1, [sp, #0]
 8003736:	e87b 0102 	ldrd	r0, r1, [fp], #-8
 800373a:	f7fc fd09 	bl	8000150 <__aeabi_dmul>
 800373e:	4602      	mov	r2, r0
 8003740:	460b      	mov	r3, r1
 8003742:	4630      	mov	r0, r6
 8003744:	4639      	mov	r1, r7
 8003746:	f7fc fee7 	bl	8000518 <__adddf3>
 800374a:	4606      	mov	r6, r0
 800374c:	460f      	mov	r7, r1
 800374e:	e7e1      	b.n	8003714 <__kernel_rem_pio2+0x398>
 8003750:	f1ca 0200 	rsb	r2, sl, #0
 8003754:	4640      	mov	r0, r8
 8003756:	4649      	mov	r1, r9
 8003758:	f000 f936 	bl	80039c8 <scalbn>
 800375c:	2200      	movs	r2, #0
 800375e:	4b97      	ldr	r3, [pc, #604]	@ (80039bc <__kernel_rem_pio2+0x640>)
 8003760:	4604      	mov	r4, r0
 8003762:	460d      	mov	r5, r1
 8003764:	f7fd f902 	bl	800096c <__aeabi_dcmpge>
 8003768:	b300      	cbz	r0, 80037ac <__kernel_rem_pio2+0x430>
 800376a:	2200      	movs	r2, #0
 800376c:	4b94      	ldr	r3, [pc, #592]	@ (80039c0 <__kernel_rem_pio2+0x644>)
 800376e:	4620      	mov	r0, r4
 8003770:	4629      	mov	r1, r5
 8003772:	f7fc fced 	bl	8000150 <__aeabi_dmul>
 8003776:	f7fd f90d 	bl	8000994 <__aeabi_d2iz>
 800377a:	4606      	mov	r6, r0
 800377c:	f7fd f818 	bl	80007b0 <__aeabi_i2d>
 8003780:	2200      	movs	r2, #0
 8003782:	4b8e      	ldr	r3, [pc, #568]	@ (80039bc <__kernel_rem_pio2+0x640>)
 8003784:	f7fc fce4 	bl	8000150 <__aeabi_dmul>
 8003788:	460b      	mov	r3, r1
 800378a:	4602      	mov	r2, r0
 800378c:	4629      	mov	r1, r5
 800378e:	4620      	mov	r0, r4
 8003790:	f7fc fec0 	bl	8000514 <__aeabi_dsub>
 8003794:	f7fd f8fe 	bl	8000994 <__aeabi_d2iz>
 8003798:	ab0c      	add	r3, sp, #48	@ 0x30
 800379a:	f843 002b 	str.w	r0, [r3, fp, lsl #2]
 800379e:	f10b 0b01 	add.w	fp, fp, #1
 80037a2:	f10a 0a18 	add.w	sl, sl, #24
 80037a6:	f843 602b 	str.w	r6, [r3, fp, lsl #2]
 80037aa:	e733      	b.n	8003614 <__kernel_rem_pio2+0x298>
 80037ac:	4620      	mov	r0, r4
 80037ae:	4629      	mov	r1, r5
 80037b0:	f7fd f8f0 	bl	8000994 <__aeabi_d2iz>
 80037b4:	ab0c      	add	r3, sp, #48	@ 0x30
 80037b6:	f843 002b 	str.w	r0, [r3, fp, lsl #2]
 80037ba:	e72b      	b.n	8003614 <__kernel_rem_pio2+0x298>
 80037bc:	ab0c      	add	r3, sp, #48	@ 0x30
 80037be:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80037c2:	f7fc fff5 	bl	80007b0 <__aeabi_i2d>
 80037c6:	4632      	mov	r2, r6
 80037c8:	463b      	mov	r3, r7
 80037ca:	f7fc fcc1 	bl	8000150 <__aeabi_dmul>
 80037ce:	464a      	mov	r2, r9
 80037d0:	e868 0102 	strd	r0, r1, [r8], #-8
 80037d4:	4653      	mov	r3, sl
 80037d6:	4630      	mov	r0, r6
 80037d8:	4639      	mov	r1, r7
 80037da:	f7fc fcb9 	bl	8000150 <__aeabi_dmul>
 80037de:	3d01      	subs	r5, #1
 80037e0:	4606      	mov	r6, r0
 80037e2:	460f      	mov	r7, r1
 80037e4:	e727      	b.n	8003636 <__kernel_rem_pio2+0x2ba>
 80037e6:	f8dd c018 	ldr.w	ip, [sp, #24]
 80037ea:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 80037ee:	e8fc 0102 	ldrd	r0, r1, [ip], #8
 80037f2:	f8cd c018 	str.w	ip, [sp, #24]
 80037f6:	f7fc fcab 	bl	8000150 <__aeabi_dmul>
 80037fa:	4602      	mov	r2, r0
 80037fc:	460b      	mov	r3, r1
 80037fe:	4648      	mov	r0, r9
 8003800:	4651      	mov	r1, sl
 8003802:	f7fc fe89 	bl	8000518 <__adddf3>
 8003806:	4681      	mov	r9, r0
 8003808:	468a      	mov	sl, r1
 800380a:	3701      	adds	r7, #1
 800380c:	9b02      	ldr	r3, [sp, #8]
 800380e:	429f      	cmp	r7, r3
 8003810:	dc01      	bgt.n	8003816 <__kernel_rem_pio2+0x49a>
 8003812:	42be      	cmp	r6, r7
 8003814:	dae7      	bge.n	80037e6 <__kernel_rem_pio2+0x46a>
 8003816:	ab48      	add	r3, sp, #288	@ 0x120
 8003818:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800381c:	e9c6 9a00 	strd	r9, sl, [r6]
 8003820:	3d01      	subs	r5, #1
 8003822:	e70c      	b.n	800363e <__kernel_rem_pio2+0x2c2>
 8003824:	9ba2      	ldr	r3, [sp, #648]	@ 0x288
 8003826:	2b02      	cmp	r3, #2
 8003828:	dc09      	bgt.n	800383e <__kernel_rem_pio2+0x4c2>
 800382a:	2b00      	cmp	r3, #0
 800382c:	dc2c      	bgt.n	8003888 <__kernel_rem_pio2+0x50c>
 800382e:	d04e      	beq.n	80038ce <__kernel_rem_pio2+0x552>
 8003830:	9b05      	ldr	r3, [sp, #20]
 8003832:	f003 0007 	and.w	r0, r3, #7
 8003836:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 800383a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800383e:	9ba2      	ldr	r3, [sp, #648]	@ 0x288
 8003840:	2b03      	cmp	r3, #3
 8003842:	d1f5      	bne.n	8003830 <__kernel_rem_pio2+0x4b4>
 8003844:	ab48      	add	r3, sp, #288	@ 0x120
 8003846:	441c      	add	r4, r3
 8003848:	4625      	mov	r5, r4
 800384a:	46da      	mov	sl, fp
 800384c:	f1ba 0f00 	cmp.w	sl, #0
 8003850:	dc63      	bgt.n	800391a <__kernel_rem_pio2+0x59e>
 8003852:	4625      	mov	r5, r4
 8003854:	46da      	mov	sl, fp
 8003856:	f1ba 0f01 	cmp.w	sl, #1
 800385a:	dc7b      	bgt.n	8003954 <__kernel_rem_pio2+0x5d8>
 800385c:	2000      	movs	r0, #0
 800385e:	2100      	movs	r1, #0
 8003860:	f1bb 0f01 	cmp.w	fp, #1
 8003864:	f300 8093 	bgt.w	800398e <__kernel_rem_pio2+0x612>
 8003868:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 800386c:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 8003870:	9b00      	ldr	r3, [sp, #0]
 8003872:	2b00      	cmp	r3, #0
 8003874:	f040 8092 	bne.w	800399c <__kernel_rem_pio2+0x620>
 8003878:	9b04      	ldr	r3, [sp, #16]
 800387a:	e9c3 7800 	strd	r7, r8, [r3]
 800387e:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8003882:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8003886:	e7d3      	b.n	8003830 <__kernel_rem_pio2+0x4b4>
 8003888:	465d      	mov	r5, fp
 800388a:	2000      	movs	r0, #0
 800388c:	2100      	movs	r1, #0
 800388e:	ab48      	add	r3, sp, #288	@ 0x120
 8003890:	441c      	add	r4, r3
 8003892:	2d00      	cmp	r5, #0
 8003894:	da32      	bge.n	80038fc <__kernel_rem_pio2+0x580>
 8003896:	9b00      	ldr	r3, [sp, #0]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d035      	beq.n	8003908 <__kernel_rem_pio2+0x58c>
 800389c:	4602      	mov	r2, r0
 800389e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80038a2:	9c04      	ldr	r4, [sp, #16]
 80038a4:	2501      	movs	r5, #1
 80038a6:	e9c4 2300 	strd	r2, r3, [r4]
 80038aa:	4602      	mov	r2, r0
 80038ac:	460b      	mov	r3, r1
 80038ae:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 80038b2:	f7fc fe2f 	bl	8000514 <__aeabi_dsub>
 80038b6:	ac48      	add	r4, sp, #288	@ 0x120
 80038b8:	45ab      	cmp	fp, r5
 80038ba:	da28      	bge.n	800390e <__kernel_rem_pio2+0x592>
 80038bc:	9b00      	ldr	r3, [sp, #0]
 80038be:	b113      	cbz	r3, 80038c6 <__kernel_rem_pio2+0x54a>
 80038c0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80038c4:	4619      	mov	r1, r3
 80038c6:	9b04      	ldr	r3, [sp, #16]
 80038c8:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80038cc:	e7b0      	b.n	8003830 <__kernel_rem_pio2+0x4b4>
 80038ce:	2000      	movs	r0, #0
 80038d0:	2100      	movs	r1, #0
 80038d2:	ab48      	add	r3, sp, #288	@ 0x120
 80038d4:	441c      	add	r4, r3
 80038d6:	f1bb 0f00 	cmp.w	fp, #0
 80038da:	da08      	bge.n	80038ee <__kernel_rem_pio2+0x572>
 80038dc:	9b00      	ldr	r3, [sp, #0]
 80038de:	b113      	cbz	r3, 80038e6 <__kernel_rem_pio2+0x56a>
 80038e0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80038e4:	4619      	mov	r1, r3
 80038e6:	9b04      	ldr	r3, [sp, #16]
 80038e8:	e9c3 0100 	strd	r0, r1, [r3]
 80038ec:	e7a0      	b.n	8003830 <__kernel_rem_pio2+0x4b4>
 80038ee:	e874 2302 	ldrd	r2, r3, [r4], #-8
 80038f2:	f7fc fe11 	bl	8000518 <__adddf3>
 80038f6:	f10b 3bff 	add.w	fp, fp, #4294967295
 80038fa:	e7ec      	b.n	80038d6 <__kernel_rem_pio2+0x55a>
 80038fc:	e874 2302 	ldrd	r2, r3, [r4], #-8
 8003900:	f7fc fe0a 	bl	8000518 <__adddf3>
 8003904:	3d01      	subs	r5, #1
 8003906:	e7c4      	b.n	8003892 <__kernel_rem_pio2+0x516>
 8003908:	4602      	mov	r2, r0
 800390a:	460b      	mov	r3, r1
 800390c:	e7c9      	b.n	80038a2 <__kernel_rem_pio2+0x526>
 800390e:	e9f4 2302 	ldrd	r2, r3, [r4, #8]!
 8003912:	f7fc fe01 	bl	8000518 <__adddf3>
 8003916:	3501      	adds	r5, #1
 8003918:	e7ce      	b.n	80038b8 <__kernel_rem_pio2+0x53c>
 800391a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800391e:	e955 8902 	ldrd	r8, r9, [r5, #-8]
 8003922:	4640      	mov	r0, r8
 8003924:	4649      	mov	r1, r9
 8003926:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800392a:	f7fc fdf5 	bl	8000518 <__adddf3>
 800392e:	4602      	mov	r2, r0
 8003930:	460b      	mov	r3, r1
 8003932:	4606      	mov	r6, r0
 8003934:	460f      	mov	r7, r1
 8003936:	4640      	mov	r0, r8
 8003938:	4649      	mov	r1, r9
 800393a:	f7fc fdeb 	bl	8000514 <__aeabi_dsub>
 800393e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003942:	f7fc fde9 	bl	8000518 <__adddf3>
 8003946:	e865 0102 	strd	r0, r1, [r5], #-8
 800394a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800394e:	e9c5 6700 	strd	r6, r7, [r5]
 8003952:	e77b      	b.n	800384c <__kernel_rem_pio2+0x4d0>
 8003954:	e9d5 2300 	ldrd	r2, r3, [r5]
 8003958:	e955 8902 	ldrd	r8, r9, [r5, #-8]
 800395c:	4640      	mov	r0, r8
 800395e:	4649      	mov	r1, r9
 8003960:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003964:	f7fc fdd8 	bl	8000518 <__adddf3>
 8003968:	4602      	mov	r2, r0
 800396a:	460b      	mov	r3, r1
 800396c:	4606      	mov	r6, r0
 800396e:	460f      	mov	r7, r1
 8003970:	4640      	mov	r0, r8
 8003972:	4649      	mov	r1, r9
 8003974:	f7fc fdce 	bl	8000514 <__aeabi_dsub>
 8003978:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800397c:	f7fc fdcc 	bl	8000518 <__adddf3>
 8003980:	e865 0102 	strd	r0, r1, [r5], #-8
 8003984:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003988:	e9c5 6700 	strd	r6, r7, [r5]
 800398c:	e763      	b.n	8003856 <__kernel_rem_pio2+0x4da>
 800398e:	e874 2302 	ldrd	r2, r3, [r4], #-8
 8003992:	f7fc fdc1 	bl	8000518 <__adddf3>
 8003996:	f10b 3bff 	add.w	fp, fp, #4294967295
 800399a:	e761      	b.n	8003860 <__kernel_rem_pio2+0x4e4>
 800399c:	9b04      	ldr	r3, [sp, #16]
 800399e:	9a04      	ldr	r2, [sp, #16]
 80039a0:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 80039a4:	601f      	str	r7, [r3, #0]
 80039a6:	605c      	str	r4, [r3, #4]
 80039a8:	609d      	str	r5, [r3, #8]
 80039aa:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80039ae:	60d3      	str	r3, [r2, #12]
 80039b0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80039b4:	6110      	str	r0, [r2, #16]
 80039b6:	6153      	str	r3, [r2, #20]
 80039b8:	e73a      	b.n	8003830 <__kernel_rem_pio2+0x4b4>
 80039ba:	bf00      	nop
 80039bc:	41700000 	.word	0x41700000
 80039c0:	3e700000 	.word	0x3e700000
 80039c4:	00000000 	.word	0x00000000

080039c8 <scalbn>:
 80039c8:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 80039cc:	4616      	mov	r6, r2
 80039ce:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80039d2:	4683      	mov	fp, r0
 80039d4:	468c      	mov	ip, r1
 80039d6:	460b      	mov	r3, r1
 80039d8:	b982      	cbnz	r2, 80039fc <scalbn+0x34>
 80039da:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80039de:	4303      	orrs	r3, r0
 80039e0:	d039      	beq.n	8003a56 <scalbn+0x8e>
 80039e2:	4b2f      	ldr	r3, [pc, #188]	@ (8003aa0 <scalbn+0xd8>)
 80039e4:	2200      	movs	r2, #0
 80039e6:	f7fc fbb3 	bl	8000150 <__aeabi_dmul>
 80039ea:	4b2e      	ldr	r3, [pc, #184]	@ (8003aa4 <scalbn+0xdc>)
 80039ec:	4683      	mov	fp, r0
 80039ee:	429e      	cmp	r6, r3
 80039f0:	468c      	mov	ip, r1
 80039f2:	da0d      	bge.n	8003a10 <scalbn+0x48>
 80039f4:	a326      	add	r3, pc, #152	@ (adr r3, 8003a90 <scalbn+0xc8>)
 80039f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039fa:	e01b      	b.n	8003a34 <scalbn+0x6c>
 80039fc:	f240 77ff 	movw	r7, #2047	@ 0x7ff
 8003a00:	42ba      	cmp	r2, r7
 8003a02:	d109      	bne.n	8003a18 <scalbn+0x50>
 8003a04:	4602      	mov	r2, r0
 8003a06:	f7fc fd87 	bl	8000518 <__adddf3>
 8003a0a:	4683      	mov	fp, r0
 8003a0c:	468c      	mov	ip, r1
 8003a0e:	e022      	b.n	8003a56 <scalbn+0x8e>
 8003a10:	460b      	mov	r3, r1
 8003a12:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8003a16:	3a36      	subs	r2, #54	@ 0x36
 8003a18:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8003a1c:	428e      	cmp	r6, r1
 8003a1e:	dd0c      	ble.n	8003a3a <scalbn+0x72>
 8003a20:	a31d      	add	r3, pc, #116	@ (adr r3, 8003a98 <scalbn+0xd0>)
 8003a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a26:	461c      	mov	r4, r3
 8003a28:	ea4f 71dc 	mov.w	r1, ip, lsr #31
 8003a2c:	f361 74df 	bfi	r4, r1, #31, #1
 8003a30:	4621      	mov	r1, r4
 8003a32:	481d      	ldr	r0, [pc, #116]	@ (8003aa8 <scalbn+0xe0>)
 8003a34:	f7fc fb8c 	bl	8000150 <__aeabi_dmul>
 8003a38:	e7e7      	b.n	8003a0a <scalbn+0x42>
 8003a3a:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8003a3e:	4432      	add	r2, r6
 8003a40:	428a      	cmp	r2, r1
 8003a42:	dced      	bgt.n	8003a20 <scalbn+0x58>
 8003a44:	2a00      	cmp	r2, #0
 8003a46:	dd0a      	ble.n	8003a5e <scalbn+0x96>
 8003a48:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8003a4c:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8003a50:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8003a54:	46ac      	mov	ip, r5
 8003a56:	4658      	mov	r0, fp
 8003a58:	4661      	mov	r1, ip
 8003a5a:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 8003a5e:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8003a62:	da09      	bge.n	8003a78 <scalbn+0xb0>
 8003a64:	f00c 4300 	and.w	r3, ip, #2147483648	@ 0x80000000
 8003a68:	f043 71d2 	orr.w	r1, r3, #27525120	@ 0x1a40000
 8003a6c:	f441 31b7 	orr.w	r1, r1, #93696	@ 0x16e00
 8003a70:	480e      	ldr	r0, [pc, #56]	@ (8003aac <scalbn+0xe4>)
 8003a72:	f041 011f 	orr.w	r1, r1, #31
 8003a76:	e7bd      	b.n	80039f4 <scalbn+0x2c>
 8003a78:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8003a7c:	3236      	adds	r2, #54	@ 0x36
 8003a7e:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8003a82:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8003a86:	4658      	mov	r0, fp
 8003a88:	4629      	mov	r1, r5
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	4b08      	ldr	r3, [pc, #32]	@ (8003ab0 <scalbn+0xe8>)
 8003a8e:	e7d1      	b.n	8003a34 <scalbn+0x6c>
 8003a90:	c2f8f359 	.word	0xc2f8f359
 8003a94:	01a56e1f 	.word	0x01a56e1f
 8003a98:	8800759c 	.word	0x8800759c
 8003a9c:	7e37e43c 	.word	0x7e37e43c
 8003aa0:	43500000 	.word	0x43500000
 8003aa4:	ffff3cb0 	.word	0xffff3cb0
 8003aa8:	8800759c 	.word	0x8800759c
 8003aac:	c2f8f359 	.word	0xc2f8f359
 8003ab0:	3c900000 	.word	0x3c900000
 8003ab4:	00000000 	.word	0x00000000

08003ab8 <floor>:
 8003ab8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003abc:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8003ac0:	f2a7 36ff 	subw	r6, r7, #1023	@ 0x3ff
 8003ac4:	2e13      	cmp	r6, #19
 8003ac6:	4602      	mov	r2, r0
 8003ac8:	460b      	mov	r3, r1
 8003aca:	460c      	mov	r4, r1
 8003acc:	4605      	mov	r5, r0
 8003ace:	4680      	mov	r8, r0
 8003ad0:	dc35      	bgt.n	8003b3e <floor+0x86>
 8003ad2:	2e00      	cmp	r6, #0
 8003ad4:	da17      	bge.n	8003b06 <floor+0x4e>
 8003ad6:	a334      	add	r3, pc, #208	@ (adr r3, 8003ba8 <floor+0xf0>)
 8003ad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003adc:	f7fc fd1c 	bl	8000518 <__adddf3>
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	f7fc ff4c 	bl	8000980 <__aeabi_dcmpgt>
 8003ae8:	b150      	cbz	r0, 8003b00 <floor+0x48>
 8003aea:	2c00      	cmp	r4, #0
 8003aec:	da57      	bge.n	8003b9e <floor+0xe6>
 8003aee:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8003af2:	432c      	orrs	r4, r5
 8003af4:	2500      	movs	r5, #0
 8003af6:	42ac      	cmp	r4, r5
 8003af8:	4c2d      	ldr	r4, [pc, #180]	@ (8003bb0 <floor+0xf8>)
 8003afa:	bf08      	it	eq
 8003afc:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8003b00:	4623      	mov	r3, r4
 8003b02:	462a      	mov	r2, r5
 8003b04:	e024      	b.n	8003b50 <floor+0x98>
 8003b06:	4f2b      	ldr	r7, [pc, #172]	@ (8003bb4 <floor+0xfc>)
 8003b08:	4137      	asrs	r7, r6
 8003b0a:	ea01 0c07 	and.w	ip, r1, r7
 8003b0e:	ea5c 0c00 	orrs.w	ip, ip, r0
 8003b12:	d01d      	beq.n	8003b50 <floor+0x98>
 8003b14:	a324      	add	r3, pc, #144	@ (adr r3, 8003ba8 <floor+0xf0>)
 8003b16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b1a:	f7fc fcfd 	bl	8000518 <__adddf3>
 8003b1e:	2200      	movs	r2, #0
 8003b20:	2300      	movs	r3, #0
 8003b22:	f7fc ff2d 	bl	8000980 <__aeabi_dcmpgt>
 8003b26:	2800      	cmp	r0, #0
 8003b28:	d0ea      	beq.n	8003b00 <floor+0x48>
 8003b2a:	2c00      	cmp	r4, #0
 8003b2c:	bfbe      	ittt	lt
 8003b2e:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8003b32:	4133      	asrlt	r3, r6
 8003b34:	18e4      	addlt	r4, r4, r3
 8003b36:	2500      	movs	r5, #0
 8003b38:	ea24 0407 	bic.w	r4, r4, r7
 8003b3c:	e7e0      	b.n	8003b00 <floor+0x48>
 8003b3e:	2e33      	cmp	r6, #51	@ 0x33
 8003b40:	dd0a      	ble.n	8003b58 <floor+0xa0>
 8003b42:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8003b46:	d103      	bne.n	8003b50 <floor+0x98>
 8003b48:	f7fc fce6 	bl	8000518 <__adddf3>
 8003b4c:	4602      	mov	r2, r0
 8003b4e:	460b      	mov	r3, r1
 8003b50:	4610      	mov	r0, r2
 8003b52:	4619      	mov	r1, r3
 8003b54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003b58:	f04f 3cff 	mov.w	ip, #4294967295
 8003b5c:	f2a7 4713 	subw	r7, r7, #1043	@ 0x413
 8003b60:	fa2c f707 	lsr.w	r7, ip, r7
 8003b64:	4207      	tst	r7, r0
 8003b66:	d0f3      	beq.n	8003b50 <floor+0x98>
 8003b68:	a30f      	add	r3, pc, #60	@ (adr r3, 8003ba8 <floor+0xf0>)
 8003b6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b6e:	f7fc fcd3 	bl	8000518 <__adddf3>
 8003b72:	2200      	movs	r2, #0
 8003b74:	2300      	movs	r3, #0
 8003b76:	f7fc ff03 	bl	8000980 <__aeabi_dcmpgt>
 8003b7a:	2800      	cmp	r0, #0
 8003b7c:	d0c0      	beq.n	8003b00 <floor+0x48>
 8003b7e:	2c00      	cmp	r4, #0
 8003b80:	da0a      	bge.n	8003b98 <floor+0xe0>
 8003b82:	2e14      	cmp	r6, #20
 8003b84:	d101      	bne.n	8003b8a <floor+0xd2>
 8003b86:	3401      	adds	r4, #1
 8003b88:	e006      	b.n	8003b98 <floor+0xe0>
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8003b90:	40b3      	lsls	r3, r6
 8003b92:	441d      	add	r5, r3
 8003b94:	4545      	cmp	r5, r8
 8003b96:	d3f6      	bcc.n	8003b86 <floor+0xce>
 8003b98:	ea25 0507 	bic.w	r5, r5, r7
 8003b9c:	e7b0      	b.n	8003b00 <floor+0x48>
 8003b9e:	2500      	movs	r5, #0
 8003ba0:	462c      	mov	r4, r5
 8003ba2:	e7ad      	b.n	8003b00 <floor+0x48>
 8003ba4:	f3af 8000 	nop.w
 8003ba8:	8800759c 	.word	0x8800759c
 8003bac:	7e37e43c 	.word	0x7e37e43c
 8003bb0:	bff00000 	.word	0xbff00000
 8003bb4:	000fffff 	.word	0x000fffff

08003bb8 <_init>:
 8003bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bba:	bf00      	nop
 8003bbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003bbe:	bc08      	pop	{r3}
 8003bc0:	469e      	mov	lr, r3
 8003bc2:	4770      	bx	lr

08003bc4 <_fini>:
 8003bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bc6:	bf00      	nop
 8003bc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003bca:	bc08      	pop	{r3}
 8003bcc:	469e      	mov	lr, r3
 8003bce:	4770      	bx	lr
