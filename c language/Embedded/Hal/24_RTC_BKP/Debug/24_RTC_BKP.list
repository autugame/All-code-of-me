
24_RTC_BKP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a18  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000148  08005b24  08005b24  00006b24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005c6c  08005c6c  000070a8  2**0
                  CONTENTS
  4 .ARM          00000000  08005c6c  08005c6c  000070a8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005c6c  08005c6c  000070a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005c6c  08005c6c  00006c6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005c70  08005c70  00006c70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000a8  20000000  08005c74  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000036c  200000a8  08005d1c  000070a8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000414  08005d1c  00007414  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000070a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ddbf  00000000  00000000  000070d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d2c  00000000  00000000  00014e90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000de0  00000000  00000000  00017bc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a9d  00000000  00000000  000189a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019b44  00000000  00000000  0001943d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001442b  00000000  00000000  00032f81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00088d1f  00000000  00000000  000473ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d00cb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f0c  00000000  00000000  000d0110  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000049  00000000  00000000  000d401c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000a8 	.word	0x200000a8
 8000128:	00000000 	.word	0x00000000
 800012c:	08005b0c 	.word	0x08005b0c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000ac 	.word	0x200000ac
 8000148:	08005b0c 	.word	0x08005b0c

0800014c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000152:	4b0c      	ldr	r3, [pc, #48]	@ (8000184 <MX_DMA_Init+0x38>)
 8000154:	695b      	ldr	r3, [r3, #20]
 8000156:	4a0b      	ldr	r2, [pc, #44]	@ (8000184 <MX_DMA_Init+0x38>)
 8000158:	f043 0301 	orr.w	r3, r3, #1
 800015c:	6153      	str	r3, [r2, #20]
 800015e:	4b09      	ldr	r3, [pc, #36]	@ (8000184 <MX_DMA_Init+0x38>)
 8000160:	695b      	ldr	r3, [r3, #20]
 8000162:	f003 0301 	and.w	r3, r3, #1
 8000166:	607b      	str	r3, [r7, #4]
 8000168:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800016a:	2200      	movs	r2, #0
 800016c:	2100      	movs	r1, #0
 800016e:	200f      	movs	r0, #15
 8000170:	f001 f869 	bl	8001246 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000174:	200f      	movs	r0, #15
 8000176:	f001 f882 	bl	800127e <HAL_NVIC_EnableIRQ>

}
 800017a:	bf00      	nop
 800017c:	3708      	adds	r7, #8
 800017e:	46bd      	mov	sp, r7
 8000180:	bd80      	pop	{r7, pc}
 8000182:	bf00      	nop
 8000184:	40021000 	.word	0x40021000

08000188 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000188:	b580      	push	{r7, lr}
 800018a:	b088      	sub	sp, #32
 800018c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800018e:	f107 0310 	add.w	r3, r7, #16
 8000192:	2200      	movs	r2, #0
 8000194:	601a      	str	r2, [r3, #0]
 8000196:	605a      	str	r2, [r3, #4]
 8000198:	609a      	str	r2, [r3, #8]
 800019a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800019c:	4b3b      	ldr	r3, [pc, #236]	@ (800028c <MX_GPIO_Init+0x104>)
 800019e:	699b      	ldr	r3, [r3, #24]
 80001a0:	4a3a      	ldr	r2, [pc, #232]	@ (800028c <MX_GPIO_Init+0x104>)
 80001a2:	f043 0320 	orr.w	r3, r3, #32
 80001a6:	6193      	str	r3, [r2, #24]
 80001a8:	4b38      	ldr	r3, [pc, #224]	@ (800028c <MX_GPIO_Init+0x104>)
 80001aa:	699b      	ldr	r3, [r3, #24]
 80001ac:	f003 0320 	and.w	r3, r3, #32
 80001b0:	60fb      	str	r3, [r7, #12]
 80001b2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80001b4:	4b35      	ldr	r3, [pc, #212]	@ (800028c <MX_GPIO_Init+0x104>)
 80001b6:	699b      	ldr	r3, [r3, #24]
 80001b8:	4a34      	ldr	r2, [pc, #208]	@ (800028c <MX_GPIO_Init+0x104>)
 80001ba:	f043 0304 	orr.w	r3, r3, #4
 80001be:	6193      	str	r3, [r2, #24]
 80001c0:	4b32      	ldr	r3, [pc, #200]	@ (800028c <MX_GPIO_Init+0x104>)
 80001c2:	699b      	ldr	r3, [r3, #24]
 80001c4:	f003 0304 	and.w	r3, r3, #4
 80001c8:	60bb      	str	r3, [r7, #8]
 80001ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80001cc:	4b2f      	ldr	r3, [pc, #188]	@ (800028c <MX_GPIO_Init+0x104>)
 80001ce:	699b      	ldr	r3, [r3, #24]
 80001d0:	4a2e      	ldr	r2, [pc, #184]	@ (800028c <MX_GPIO_Init+0x104>)
 80001d2:	f043 0308 	orr.w	r3, r3, #8
 80001d6:	6193      	str	r3, [r2, #24]
 80001d8:	4b2c      	ldr	r3, [pc, #176]	@ (800028c <MX_GPIO_Init+0x104>)
 80001da:	699b      	ldr	r3, [r3, #24]
 80001dc:	f003 0308 	and.w	r3, r3, #8
 80001e0:	607b      	str	r3, [r7, #4]
 80001e2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 80001e4:	2200      	movs	r2, #0
 80001e6:	2106      	movs	r1, #6
 80001e8:	4829      	ldr	r0, [pc, #164]	@ (8000290 <MX_GPIO_Init+0x108>)
 80001ea:	f001 fc89 	bl	8001b00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 80001ee:	2201      	movs	r2, #1
 80001f0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80001f4:	4826      	ldr	r0, [pc, #152]	@ (8000290 <MX_GPIO_Init+0x108>)
 80001f6:	f001 fc83 	bl	8001b00 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA1 PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 80001fa:	2306      	movs	r3, #6
 80001fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80001fe:	2301      	movs	r3, #1
 8000200:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000202:	2300      	movs	r3, #0
 8000204:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000206:	2302      	movs	r3, #2
 8000208:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800020a:	f107 0310 	add.w	r3, r7, #16
 800020e:	4619      	mov	r1, r3
 8000210:	481f      	ldr	r0, [pc, #124]	@ (8000290 <MX_GPIO_Init+0x108>)
 8000212:	f001 faf1 	bl	80017f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000216:	2320      	movs	r3, #32
 8000218:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800021a:	4b1e      	ldr	r3, [pc, #120]	@ (8000294 <MX_GPIO_Init+0x10c>)
 800021c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800021e:	2301      	movs	r3, #1
 8000220:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000222:	f107 0310 	add.w	r3, r7, #16
 8000226:	4619      	mov	r1, r3
 8000228:	4819      	ldr	r0, [pc, #100]	@ (8000290 <MX_GPIO_Init+0x108>)
 800022a:	f001 fae5 	bl	80017f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800022e:	2301      	movs	r3, #1
 8000230:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000232:	4b18      	ldr	r3, [pc, #96]	@ (8000294 <MX_GPIO_Init+0x10c>)
 8000234:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000236:	2301      	movs	r3, #1
 8000238:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800023a:	f107 0310 	add.w	r3, r7, #16
 800023e:	4619      	mov	r1, r3
 8000240:	4815      	ldr	r0, [pc, #84]	@ (8000298 <MX_GPIO_Init+0x110>)
 8000242:	f001 fad9 	bl	80017f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000246:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800024a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800024c:	2311      	movs	r3, #17
 800024e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000250:	2300      	movs	r3, #0
 8000252:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000254:	2302      	movs	r3, #2
 8000256:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000258:	f107 0310 	add.w	r3, r7, #16
 800025c:	4619      	mov	r1, r3
 800025e:	480c      	ldr	r0, [pc, #48]	@ (8000290 <MX_GPIO_Init+0x108>)
 8000260:	f001 faca 	bl	80017f8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000264:	2200      	movs	r2, #0
 8000266:	2100      	movs	r1, #0
 8000268:	2006      	movs	r0, #6
 800026a:	f000 ffec 	bl	8001246 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800026e:	2006      	movs	r0, #6
 8000270:	f001 f805 	bl	800127e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000274:	2200      	movs	r2, #0
 8000276:	2100      	movs	r1, #0
 8000278:	2017      	movs	r0, #23
 800027a:	f000 ffe4 	bl	8001246 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800027e:	2017      	movs	r0, #23
 8000280:	f000 fffd 	bl	800127e <HAL_NVIC_EnableIRQ>

}
 8000284:	bf00      	nop
 8000286:	3720      	adds	r7, #32
 8000288:	46bd      	mov	sp, r7
 800028a:	bd80      	pop	{r7, pc}
 800028c:	40021000 	.word	0x40021000
 8000290:	40010800 	.word	0x40010800
 8000294:	10210000 	.word	0x10210000
 8000298:	40010c00 	.word	0x40010c00

0800029c <LED_Control>:

/* USER CODE BEGIN 2 */
void LED_Control(uint8_t device, uint8_t cmd)
{
 800029c:	b580      	push	{r7, lr}
 800029e:	b082      	sub	sp, #8
 80002a0:	af00      	add	r7, sp, #0
 80002a2:	4603      	mov	r3, r0
 80002a4:	460a      	mov	r2, r1
 80002a6:	71fb      	strb	r3, [r7, #7]
 80002a8:	4613      	mov	r3, r2
 80002aa:	71bb      	strb	r3, [r7, #6]
	if (device == LED1)
 80002ac:	79fb      	ldrb	r3, [r7, #7]
 80002ae:	2b01      	cmp	r3, #1
 80002b0:	d111      	bne.n	80002d6 <LED_Control+0x3a>
	{
		if (cmd == ON)
 80002b2:	79bb      	ldrb	r3, [r7, #6]
 80002b4:	2b01      	cmp	r3, #1
 80002b6:	d105      	bne.n	80002c4 <LED_Control+0x28>
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 80002b8:	2201      	movs	r2, #1
 80002ba:	2102      	movs	r1, #2
 80002bc:	4812      	ldr	r0, [pc, #72]	@ (8000308 <LED_Control+0x6c>)
 80002be:	f001 fc1f 	bl	8001b00 <HAL_GPIO_WritePin>
		else if (cmd == OFF)
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
		}
	}
}
 80002c2:	e01c      	b.n	80002fe <LED_Control+0x62>
		else if (cmd == OFF)
 80002c4:	79bb      	ldrb	r3, [r7, #6]
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	d119      	bne.n	80002fe <LED_Control+0x62>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 80002ca:	2200      	movs	r2, #0
 80002cc:	2102      	movs	r1, #2
 80002ce:	480e      	ldr	r0, [pc, #56]	@ (8000308 <LED_Control+0x6c>)
 80002d0:	f001 fc16 	bl	8001b00 <HAL_GPIO_WritePin>
}
 80002d4:	e013      	b.n	80002fe <LED_Control+0x62>
	else if (device == LED2)
 80002d6:	79fb      	ldrb	r3, [r7, #7]
 80002d8:	2b02      	cmp	r3, #2
 80002da:	d110      	bne.n	80002fe <LED_Control+0x62>
		if (cmd == ON)
 80002dc:	79bb      	ldrb	r3, [r7, #6]
 80002de:	2b01      	cmp	r3, #1
 80002e0:	d105      	bne.n	80002ee <LED_Control+0x52>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 80002e2:	2201      	movs	r2, #1
 80002e4:	2104      	movs	r1, #4
 80002e6:	4808      	ldr	r0, [pc, #32]	@ (8000308 <LED_Control+0x6c>)
 80002e8:	f001 fc0a 	bl	8001b00 <HAL_GPIO_WritePin>
}
 80002ec:	e007      	b.n	80002fe <LED_Control+0x62>
		else if (cmd == OFF)
 80002ee:	79bb      	ldrb	r3, [r7, #6]
 80002f0:	2b00      	cmp	r3, #0
 80002f2:	d104      	bne.n	80002fe <LED_Control+0x62>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 80002f4:	2200      	movs	r2, #0
 80002f6:	2104      	movs	r1, #4
 80002f8:	4803      	ldr	r0, [pc, #12]	@ (8000308 <LED_Control+0x6c>)
 80002fa:	f001 fc01 	bl	8001b00 <HAL_GPIO_WritePin>
}
 80002fe:	bf00      	nop
 8000300:	3708      	adds	r7, #8
 8000302:	46bd      	mov	sp, r7
 8000304:	bd80      	pop	{r7, pc}
 8000306:	bf00      	nop
 8000308:	40010800 	.word	0x40010800

0800030c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800030c:	b580      	push	{r7, lr}
 800030e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000310:	4b12      	ldr	r3, [pc, #72]	@ (800035c <MX_I2C1_Init+0x50>)
 8000312:	4a13      	ldr	r2, [pc, #76]	@ (8000360 <MX_I2C1_Init+0x54>)
 8000314:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000316:	4b11      	ldr	r3, [pc, #68]	@ (800035c <MX_I2C1_Init+0x50>)
 8000318:	4a12      	ldr	r2, [pc, #72]	@ (8000364 <MX_I2C1_Init+0x58>)
 800031a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800031c:	4b0f      	ldr	r3, [pc, #60]	@ (800035c <MX_I2C1_Init+0x50>)
 800031e:	2200      	movs	r2, #0
 8000320:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000322:	4b0e      	ldr	r3, [pc, #56]	@ (800035c <MX_I2C1_Init+0x50>)
 8000324:	2200      	movs	r2, #0
 8000326:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000328:	4b0c      	ldr	r3, [pc, #48]	@ (800035c <MX_I2C1_Init+0x50>)
 800032a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800032e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000330:	4b0a      	ldr	r3, [pc, #40]	@ (800035c <MX_I2C1_Init+0x50>)
 8000332:	2200      	movs	r2, #0
 8000334:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000336:	4b09      	ldr	r3, [pc, #36]	@ (800035c <MX_I2C1_Init+0x50>)
 8000338:	2200      	movs	r2, #0
 800033a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800033c:	4b07      	ldr	r3, [pc, #28]	@ (800035c <MX_I2C1_Init+0x50>)
 800033e:	2200      	movs	r2, #0
 8000340:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000342:	4b06      	ldr	r3, [pc, #24]	@ (800035c <MX_I2C1_Init+0x50>)
 8000344:	2200      	movs	r2, #0
 8000346:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000348:	4804      	ldr	r0, [pc, #16]	@ (800035c <MX_I2C1_Init+0x50>)
 800034a:	f001 fc09 	bl	8001b60 <HAL_I2C_Init>
 800034e:	4603      	mov	r3, r0
 8000350:	2b00      	cmp	r3, #0
 8000352:	d001      	beq.n	8000358 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000354:	f000 f8ed 	bl	8000532 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000358:	bf00      	nop
 800035a:	bd80      	pop	{r7, pc}
 800035c:	200000c4 	.word	0x200000c4
 8000360:	40005400 	.word	0x40005400
 8000364:	000186a0 	.word	0x000186a0

08000368 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	b08a      	sub	sp, #40	@ 0x28
 800036c:	af00      	add	r7, sp, #0
 800036e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000370:	f107 0314 	add.w	r3, r7, #20
 8000374:	2200      	movs	r2, #0
 8000376:	601a      	str	r2, [r3, #0]
 8000378:	605a      	str	r2, [r3, #4]
 800037a:	609a      	str	r2, [r3, #8]
 800037c:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	681b      	ldr	r3, [r3, #0]
 8000382:	4a1d      	ldr	r2, [pc, #116]	@ (80003f8 <HAL_I2C_MspInit+0x90>)
 8000384:	4293      	cmp	r3, r2
 8000386:	d132      	bne.n	80003ee <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000388:	4b1c      	ldr	r3, [pc, #112]	@ (80003fc <HAL_I2C_MspInit+0x94>)
 800038a:	699b      	ldr	r3, [r3, #24]
 800038c:	4a1b      	ldr	r2, [pc, #108]	@ (80003fc <HAL_I2C_MspInit+0x94>)
 800038e:	f043 0308 	orr.w	r3, r3, #8
 8000392:	6193      	str	r3, [r2, #24]
 8000394:	4b19      	ldr	r3, [pc, #100]	@ (80003fc <HAL_I2C_MspInit+0x94>)
 8000396:	699b      	ldr	r3, [r3, #24]
 8000398:	f003 0308 	and.w	r3, r3, #8
 800039c:	613b      	str	r3, [r7, #16]
 800039e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80003a0:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80003a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80003a6:	2312      	movs	r3, #18
 80003a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80003aa:	2303      	movs	r3, #3
 80003ac:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003ae:	f107 0314 	add.w	r3, r7, #20
 80003b2:	4619      	mov	r1, r3
 80003b4:	4812      	ldr	r0, [pc, #72]	@ (8000400 <HAL_I2C_MspInit+0x98>)
 80003b6:	f001 fa1f 	bl	80017f8 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 80003ba:	4b12      	ldr	r3, [pc, #72]	@ (8000404 <HAL_I2C_MspInit+0x9c>)
 80003bc:	685b      	ldr	r3, [r3, #4]
 80003be:	627b      	str	r3, [r7, #36]	@ 0x24
 80003c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80003c2:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 80003c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80003c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80003ca:	f043 0302 	orr.w	r3, r3, #2
 80003ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80003d0:	4a0c      	ldr	r2, [pc, #48]	@ (8000404 <HAL_I2C_MspInit+0x9c>)
 80003d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80003d4:	6053      	str	r3, [r2, #4]

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80003d6:	4b09      	ldr	r3, [pc, #36]	@ (80003fc <HAL_I2C_MspInit+0x94>)
 80003d8:	69db      	ldr	r3, [r3, #28]
 80003da:	4a08      	ldr	r2, [pc, #32]	@ (80003fc <HAL_I2C_MspInit+0x94>)
 80003dc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80003e0:	61d3      	str	r3, [r2, #28]
 80003e2:	4b06      	ldr	r3, [pc, #24]	@ (80003fc <HAL_I2C_MspInit+0x94>)
 80003e4:	69db      	ldr	r3, [r3, #28]
 80003e6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80003ea:	60fb      	str	r3, [r7, #12]
 80003ec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80003ee:	bf00      	nop
 80003f0:	3728      	adds	r7, #40	@ 0x28
 80003f2:	46bd      	mov	sp, r7
 80003f4:	bd80      	pop	{r7, pc}
 80003f6:	bf00      	nop
 80003f8:	40005400 	.word	0x40005400
 80003fc:	40021000 	.word	0x40021000
 8000400:	40010c00 	.word	0x40010c00
 8000404:	40010000 	.word	0x40010000

08000408 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800040c:	f000 fdbe 	bl	8000f8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000410:	f000 f832 	bl	8000478 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000414:	f7ff feb8 	bl	8000188 <MX_GPIO_Init>
  MX_DMA_Init();
 8000418:	f7ff fe98 	bl	800014c <MX_DMA_Init>
  MX_USART1_UART_Init();
 800041c:	f000 fcd6 	bl	8000dcc <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8000420:	f7ff ff74 	bl	800030c <MX_I2C1_Init>
  MX_RTC_Init();
 8000424:	f000 f9da 	bl	80007dc <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  //HAL_UART_Receive_IT(&huart1, RX1_Buffer, 4);
  //HAL_UART_Receive_DMA(&huart1, RX1_Buffer, 1);
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);
 8000428:	4b0e      	ldr	r3, [pc, #56]	@ (8000464 <main+0x5c>)
 800042a:	681b      	ldr	r3, [r3, #0]
 800042c:	68da      	ldr	r2, [r3, #12]
 800042e:	4b0d      	ldr	r3, [pc, #52]	@ (8000464 <main+0x5c>)
 8000430:	681b      	ldr	r3, [r3, #0]
 8000432:	f042 0210 	orr.w	r2, r2, #16
 8000436:	60da      	str	r2, [r3, #12]
  HAL_UART_Receive_DMA(&huart1, RX1_Buffer, DMA_BUF_SIZE);
 8000438:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800043c:	490a      	ldr	r1, [pc, #40]	@ (8000468 <main+0x60>)
 800043e:	4809      	ldr	r0, [pc, #36]	@ (8000464 <main+0x5c>)
 8000440:	f003 fc7b 	bl	8003d3a <HAL_UART_Receive_DMA>
  printf("The system has been initialized!\n");
 8000444:	4809      	ldr	r0, [pc, #36]	@ (800046c <main+0x64>)
 8000446:	f004 fcbf 	bl	8004dc8 <puts>
  OLED_Init();
 800044a:	f000 f8a9 	bl	80005a0 <OLED_Init>
  printf("The OLED has been initialized!\n");
 800044e:	4808      	ldr	r0, [pc, #32]	@ (8000470 <main+0x68>)
 8000450:	f004 fcba 	bl	8004dc8 <puts>
  OLED_Test();
 8000454:	f000 f9a4 	bl	80007a0 <OLED_Test>
  //printf("The IWDG has been initialized!\n");
  printf("The WWDG has been initialized!\n");
 8000458:	4806      	ldr	r0, [pc, #24]	@ (8000474 <main+0x6c>)
 800045a:	f004 fcb5 	bl	8004dc8 <puts>
  while (1)
  {
	  //IWDG_Test();
	  //printf("HELLO WORLD!\n");
	  //HAL_Delay(1000);
	  RTC_Test();
 800045e:	f000 fa57 	bl	8000910 <RTC_Test>
 8000462:	e7fc      	b.n	800045e <main+0x56>
 8000464:	20000238 	.word	0x20000238
 8000468:	20000118 	.word	0x20000118
 800046c:	08005b24 	.word	0x08005b24
 8000470:	08005b48 	.word	0x08005b48
 8000474:	08005b68 	.word	0x08005b68

08000478 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	b094      	sub	sp, #80	@ 0x50
 800047c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800047e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000482:	2228      	movs	r2, #40	@ 0x28
 8000484:	2100      	movs	r1, #0
 8000486:	4618      	mov	r0, r3
 8000488:	f004 fd7e 	bl	8004f88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800048c:	f107 0314 	add.w	r3, r7, #20
 8000490:	2200      	movs	r2, #0
 8000492:	601a      	str	r2, [r3, #0]
 8000494:	605a      	str	r2, [r3, #4]
 8000496:	609a      	str	r2, [r3, #8]
 8000498:	60da      	str	r2, [r3, #12]
 800049a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800049c:	1d3b      	adds	r3, r7, #4
 800049e:	2200      	movs	r2, #0
 80004a0:	601a      	str	r2, [r3, #0]
 80004a2:	605a      	str	r2, [r3, #4]
 80004a4:	609a      	str	r2, [r3, #8]
 80004a6:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80004a8:	2309      	movs	r3, #9
 80004aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80004ac:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80004b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80004b2:	2300      	movs	r3, #0
 80004b4:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004b6:	2301      	movs	r3, #1
 80004b8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80004ba:	2301      	movs	r3, #1
 80004bc:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004be:	2302      	movs	r3, #2
 80004c0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80004c2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80004c6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80004c8:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80004cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004ce:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80004d2:	4618      	mov	r0, r3
 80004d4:	f001 fffc 	bl	80024d0 <HAL_RCC_OscConfig>
 80004d8:	4603      	mov	r3, r0
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d001      	beq.n	80004e2 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80004de:	f000 f828 	bl	8000532 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004e2:	230f      	movs	r3, #15
 80004e4:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004e6:	2302      	movs	r3, #2
 80004e8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004ea:	2300      	movs	r3, #0
 80004ec:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80004ee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80004f2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004f4:	2300      	movs	r3, #0
 80004f6:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80004f8:	f107 0314 	add.w	r3, r7, #20
 80004fc:	2102      	movs	r1, #2
 80004fe:	4618      	mov	r0, r3
 8000500:	f002 fa68 	bl	80029d4 <HAL_RCC_ClockConfig>
 8000504:	4603      	mov	r3, r0
 8000506:	2b00      	cmp	r3, #0
 8000508:	d001      	beq.n	800050e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800050a:	f000 f812 	bl	8000532 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800050e:	2301      	movs	r3, #1
 8000510:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000512:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000516:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000518:	1d3b      	adds	r3, r7, #4
 800051a:	4618      	mov	r0, r3
 800051c:	f002 fbe8 	bl	8002cf0 <HAL_RCCEx_PeriphCLKConfig>
 8000520:	4603      	mov	r3, r0
 8000522:	2b00      	cmp	r3, #0
 8000524:	d001      	beq.n	800052a <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000526:	f000 f804 	bl	8000532 <Error_Handler>
  }
}
 800052a:	bf00      	nop
 800052c:	3750      	adds	r7, #80	@ 0x50
 800052e:	46bd      	mov	sp, r7
 8000530:	bd80      	pop	{r7, pc}

08000532 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000532:	b480      	push	{r7}
 8000534:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000536:	b672      	cpsid	i
}
 8000538:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800053a:	bf00      	nop
 800053c:	e7fd      	b.n	800053a <Error_Handler+0x8>
	...

08000540 <WriteCmd>:
#include "oled.h"
#include "codetab.h"

void WriteCmd(unsigned char I2C_Command)//写命令
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b086      	sub	sp, #24
 8000544:	af04      	add	r7, sp, #16
 8000546:	4603      	mov	r3, r0
 8000548:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1,OLED0561_ADD,COM,I2C_MEMADD_SIZE_8BIT,&I2C_Command,1,1000);
 800054a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800054e:	9302      	str	r3, [sp, #8]
 8000550:	2301      	movs	r3, #1
 8000552:	9301      	str	r3, [sp, #4]
 8000554:	1dfb      	adds	r3, r7, #7
 8000556:	9300      	str	r3, [sp, #0]
 8000558:	2301      	movs	r3, #1
 800055a:	2200      	movs	r2, #0
 800055c:	2178      	movs	r1, #120	@ 0x78
 800055e:	4803      	ldr	r0, [pc, #12]	@ (800056c <WriteCmd+0x2c>)
 8000560:	f001 fc42 	bl	8001de8 <HAL_I2C_Mem_Write>
}
 8000564:	bf00      	nop
 8000566:	3708      	adds	r7, #8
 8000568:	46bd      	mov	sp, r7
 800056a:	bd80      	pop	{r7, pc}
 800056c:	200000c4 	.word	0x200000c4

08000570 <WriteDat>:

void WriteDat(unsigned char I2C_Data)//写数据
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b086      	sub	sp, #24
 8000574:	af04      	add	r7, sp, #16
 8000576:	4603      	mov	r3, r0
 8000578:	71fb      	strb	r3, [r7, #7]
		HAL_I2C_Mem_Write(&hi2c1,OLED0561_ADD,DAT,I2C_MEMADD_SIZE_8BIT,&I2C_Data,1,1000);
 800057a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800057e:	9302      	str	r3, [sp, #8]
 8000580:	2301      	movs	r3, #1
 8000582:	9301      	str	r3, [sp, #4]
 8000584:	1dfb      	adds	r3, r7, #7
 8000586:	9300      	str	r3, [sp, #0]
 8000588:	2301      	movs	r3, #1
 800058a:	2240      	movs	r2, #64	@ 0x40
 800058c:	2178      	movs	r1, #120	@ 0x78
 800058e:	4803      	ldr	r0, [pc, #12]	@ (800059c <WriteDat+0x2c>)
 8000590:	f001 fc2a 	bl	8001de8 <HAL_I2C_Mem_Write>
}
 8000594:	bf00      	nop
 8000596:	3708      	adds	r7, #8
 8000598:	46bd      	mov	sp, r7
 800059a:	bd80      	pop	{r7, pc}
 800059c:	200000c4 	.word	0x200000c4

080005a0 <OLED_Init>:

void OLED_Init(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0
	HAL_Delay(100); //这里的延时很重要
 80005a4:	2064      	movs	r0, #100	@ 0x64
 80005a6:	f000 fd53 	bl	8001050 <HAL_Delay>

	WriteCmd(0xAE); //display off
 80005aa:	20ae      	movs	r0, #174	@ 0xae
 80005ac:	f7ff ffc8 	bl	8000540 <WriteCmd>
	WriteCmd(0x20);	//Set Memory Addressing Mode
 80005b0:	2020      	movs	r0, #32
 80005b2:	f7ff ffc5 	bl	8000540 <WriteCmd>
	WriteCmd(0x10);	//00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80005b6:	2010      	movs	r0, #16
 80005b8:	f7ff ffc2 	bl	8000540 <WriteCmd>
	WriteCmd(0xb0);	//Set Page Start Address for Page Addressing Mode,0-7
 80005bc:	20b0      	movs	r0, #176	@ 0xb0
 80005be:	f7ff ffbf 	bl	8000540 <WriteCmd>
	WriteCmd(0xc8);	//Set COM Output Scan Direction
 80005c2:	20c8      	movs	r0, #200	@ 0xc8
 80005c4:	f7ff ffbc 	bl	8000540 <WriteCmd>
	WriteCmd(0x00); //---set low column address
 80005c8:	2000      	movs	r0, #0
 80005ca:	f7ff ffb9 	bl	8000540 <WriteCmd>
	WriteCmd(0x10); //---set high column address
 80005ce:	2010      	movs	r0, #16
 80005d0:	f7ff ffb6 	bl	8000540 <WriteCmd>
	WriteCmd(0x40); //--set start line address
 80005d4:	2040      	movs	r0, #64	@ 0x40
 80005d6:	f7ff ffb3 	bl	8000540 <WriteCmd>
	WriteCmd(0x81); //--set contrast control register
 80005da:	2081      	movs	r0, #129	@ 0x81
 80005dc:	f7ff ffb0 	bl	8000540 <WriteCmd>
	WriteCmd(0xff); //亮度调节 0x00~0xff
 80005e0:	20ff      	movs	r0, #255	@ 0xff
 80005e2:	f7ff ffad 	bl	8000540 <WriteCmd>
	WriteCmd(0xa1); //--set segment re-map 0 to 127
 80005e6:	20a1      	movs	r0, #161	@ 0xa1
 80005e8:	f7ff ffaa 	bl	8000540 <WriteCmd>
	WriteCmd(0xa6); //--set normal display
 80005ec:	20a6      	movs	r0, #166	@ 0xa6
 80005ee:	f7ff ffa7 	bl	8000540 <WriteCmd>
	WriteCmd(0xa8); //--set multiplex ratio(1 to 64)
 80005f2:	20a8      	movs	r0, #168	@ 0xa8
 80005f4:	f7ff ffa4 	bl	8000540 <WriteCmd>
	WriteCmd(0x3F); //
 80005f8:	203f      	movs	r0, #63	@ 0x3f
 80005fa:	f7ff ffa1 	bl	8000540 <WriteCmd>
	WriteCmd(0xa4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80005fe:	20a4      	movs	r0, #164	@ 0xa4
 8000600:	f7ff ff9e 	bl	8000540 <WriteCmd>
	WriteCmd(0xd3); //-set display offset
 8000604:	20d3      	movs	r0, #211	@ 0xd3
 8000606:	f7ff ff9b 	bl	8000540 <WriteCmd>
	WriteCmd(0x00); //-not offset
 800060a:	2000      	movs	r0, #0
 800060c:	f7ff ff98 	bl	8000540 <WriteCmd>
	WriteCmd(0xd5); //--set display clock divide ratio/oscillator frequency
 8000610:	20d5      	movs	r0, #213	@ 0xd5
 8000612:	f7ff ff95 	bl	8000540 <WriteCmd>
	WriteCmd(0xf0); //--set divide ratio
 8000616:	20f0      	movs	r0, #240	@ 0xf0
 8000618:	f7ff ff92 	bl	8000540 <WriteCmd>
	WriteCmd(0xd9); //--set pre-charge period
 800061c:	20d9      	movs	r0, #217	@ 0xd9
 800061e:	f7ff ff8f 	bl	8000540 <WriteCmd>
	WriteCmd(0x22); //
 8000622:	2022      	movs	r0, #34	@ 0x22
 8000624:	f7ff ff8c 	bl	8000540 <WriteCmd>
	WriteCmd(0xda); //--set com pins hardware configuration
 8000628:	20da      	movs	r0, #218	@ 0xda
 800062a:	f7ff ff89 	bl	8000540 <WriteCmd>
	WriteCmd(0x12);
 800062e:	2012      	movs	r0, #18
 8000630:	f7ff ff86 	bl	8000540 <WriteCmd>
	WriteCmd(0xdb); //--set vcomh
 8000634:	20db      	movs	r0, #219	@ 0xdb
 8000636:	f7ff ff83 	bl	8000540 <WriteCmd>
	WriteCmd(0x20); //0x20,0.77xVcc
 800063a:	2020      	movs	r0, #32
 800063c:	f7ff ff80 	bl	8000540 <WriteCmd>
	WriteCmd(0x8d); //--set DC-DC enable
 8000640:	208d      	movs	r0, #141	@ 0x8d
 8000642:	f7ff ff7d 	bl	8000540 <WriteCmd>
	WriteCmd(0x14); //
 8000646:	2014      	movs	r0, #20
 8000648:	f7ff ff7a 	bl	8000540 <WriteCmd>
	WriteCmd(0xaf); //--turn on oled panel
 800064c:	20af      	movs	r0, #175	@ 0xaf
 800064e:	f7ff ff77 	bl	8000540 <WriteCmd>
}
 8000652:	bf00      	nop
 8000654:	bd80      	pop	{r7, pc}

08000656 <OLED_SetPos>:

void OLED_SetPos(unsigned char x, unsigned char y) //设置起始点坐标
{
 8000656:	b580      	push	{r7, lr}
 8000658:	b082      	sub	sp, #8
 800065a:	af00      	add	r7, sp, #0
 800065c:	4603      	mov	r3, r0
 800065e:	460a      	mov	r2, r1
 8000660:	71fb      	strb	r3, [r7, #7]
 8000662:	4613      	mov	r3, r2
 8000664:	71bb      	strb	r3, [r7, #6]
	WriteCmd(0xb0+y);
 8000666:	79bb      	ldrb	r3, [r7, #6]
 8000668:	3b50      	subs	r3, #80	@ 0x50
 800066a:	b2db      	uxtb	r3, r3
 800066c:	4618      	mov	r0, r3
 800066e:	f7ff ff67 	bl	8000540 <WriteCmd>
	WriteCmd(((x&0xf0)>>4)|0x10);
 8000672:	79fb      	ldrb	r3, [r7, #7]
 8000674:	091b      	lsrs	r3, r3, #4
 8000676:	b2db      	uxtb	r3, r3
 8000678:	f043 0310 	orr.w	r3, r3, #16
 800067c:	b2db      	uxtb	r3, r3
 800067e:	4618      	mov	r0, r3
 8000680:	f7ff ff5e 	bl	8000540 <WriteCmd>
	WriteCmd((x&0x0f)|0x01);
 8000684:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000688:	f003 030e 	and.w	r3, r3, #14
 800068c:	b25b      	sxtb	r3, r3
 800068e:	f043 0301 	orr.w	r3, r3, #1
 8000692:	b25b      	sxtb	r3, r3
 8000694:	b2db      	uxtb	r3, r3
 8000696:	4618      	mov	r0, r3
 8000698:	f7ff ff52 	bl	8000540 <WriteCmd>
}
 800069c:	bf00      	nop
 800069e:	3708      	adds	r7, #8
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}

080006a4 <OLED_Fill>:

void OLED_Fill(unsigned char fill_Data)//全屏填充
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b084      	sub	sp, #16
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	4603      	mov	r3, r0
 80006ac:	71fb      	strb	r3, [r7, #7]
	unsigned char m,n;
	for(m=0;m<8;m++)
 80006ae:	2300      	movs	r3, #0
 80006b0:	73fb      	strb	r3, [r7, #15]
 80006b2:	e01c      	b.n	80006ee <OLED_Fill+0x4a>
	{
		WriteCmd(0xb0+m);		//page0-page1
 80006b4:	7bfb      	ldrb	r3, [r7, #15]
 80006b6:	3b50      	subs	r3, #80	@ 0x50
 80006b8:	b2db      	uxtb	r3, r3
 80006ba:	4618      	mov	r0, r3
 80006bc:	f7ff ff40 	bl	8000540 <WriteCmd>
		WriteCmd(0x00);		//low column start address
 80006c0:	2000      	movs	r0, #0
 80006c2:	f7ff ff3d 	bl	8000540 <WriteCmd>
		WriteCmd(0x10);		//high column start address
 80006c6:	2010      	movs	r0, #16
 80006c8:	f7ff ff3a 	bl	8000540 <WriteCmd>
		for(n=0;n<128;n++)
 80006cc:	2300      	movs	r3, #0
 80006ce:	73bb      	strb	r3, [r7, #14]
 80006d0:	e006      	b.n	80006e0 <OLED_Fill+0x3c>
		{
			WriteDat(fill_Data);
 80006d2:	79fb      	ldrb	r3, [r7, #7]
 80006d4:	4618      	mov	r0, r3
 80006d6:	f7ff ff4b 	bl	8000570 <WriteDat>
		for(n=0;n<128;n++)
 80006da:	7bbb      	ldrb	r3, [r7, #14]
 80006dc:	3301      	adds	r3, #1
 80006de:	73bb      	strb	r3, [r7, #14]
 80006e0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	daf4      	bge.n	80006d2 <OLED_Fill+0x2e>
	for(m=0;m<8;m++)
 80006e8:	7bfb      	ldrb	r3, [r7, #15]
 80006ea:	3301      	adds	r3, #1
 80006ec:	73fb      	strb	r3, [r7, #15]
 80006ee:	7bfb      	ldrb	r3, [r7, #15]
 80006f0:	2b07      	cmp	r3, #7
 80006f2:	d9df      	bls.n	80006b4 <OLED_Fill+0x10>
		}
	}
}
 80006f4:	bf00      	nop
 80006f6:	bf00      	nop
 80006f8:	3710      	adds	r7, #16
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}

080006fe <OLED_CLS>:

void OLED_CLS(void)//清屏
{
 80006fe:	b580      	push	{r7, lr}
 8000700:	af00      	add	r7, sp, #0
	OLED_Fill(0x00);
 8000702:	2000      	movs	r0, #0
 8000704:	f7ff ffce 	bl	80006a4 <OLED_Fill>
}
 8000708:	bf00      	nop
 800070a:	bd80      	pop	{r7, pc}

0800070c <OLED_ShowCN>:
}

// Parameters     : x,y -- 起始点坐标(x:0~127, y:0~7); N:汉字在.h中的索引
// Description    : 显示ASCII_8x16.h中的汉字,16*16点阵
void OLED_ShowCN(unsigned char x, unsigned char y, unsigned char N)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b084      	sub	sp, #16
 8000710:	af00      	add	r7, sp, #0
 8000712:	4603      	mov	r3, r0
 8000714:	71fb      	strb	r3, [r7, #7]
 8000716:	460b      	mov	r3, r1
 8000718:	71bb      	strb	r3, [r7, #6]
 800071a:	4613      	mov	r3, r2
 800071c:	717b      	strb	r3, [r7, #5]
	unsigned char wm=0;
 800071e:	2300      	movs	r3, #0
 8000720:	73fb      	strb	r3, [r7, #15]
	unsigned int  adder=32*N;
 8000722:	797b      	ldrb	r3, [r7, #5]
 8000724:	015b      	lsls	r3, r3, #5
 8000726:	60bb      	str	r3, [r7, #8]
	OLED_SetPos(x , y);
 8000728:	79ba      	ldrb	r2, [r7, #6]
 800072a:	79fb      	ldrb	r3, [r7, #7]
 800072c:	4611      	mov	r1, r2
 800072e:	4618      	mov	r0, r3
 8000730:	f7ff ff91 	bl	8000656 <OLED_SetPos>
	for(wm = 0;wm < 16;wm++)
 8000734:	2300      	movs	r3, #0
 8000736:	73fb      	strb	r3, [r7, #15]
 8000738:	e00c      	b.n	8000754 <OLED_ShowCN+0x48>
	{
		WriteDat(F16x16[adder]);
 800073a:	4a18      	ldr	r2, [pc, #96]	@ (800079c <OLED_ShowCN+0x90>)
 800073c:	68bb      	ldr	r3, [r7, #8]
 800073e:	4413      	add	r3, r2
 8000740:	781b      	ldrb	r3, [r3, #0]
 8000742:	4618      	mov	r0, r3
 8000744:	f7ff ff14 	bl	8000570 <WriteDat>
		adder += 1;
 8000748:	68bb      	ldr	r3, [r7, #8]
 800074a:	3301      	adds	r3, #1
 800074c:	60bb      	str	r3, [r7, #8]
	for(wm = 0;wm < 16;wm++)
 800074e:	7bfb      	ldrb	r3, [r7, #15]
 8000750:	3301      	adds	r3, #1
 8000752:	73fb      	strb	r3, [r7, #15]
 8000754:	7bfb      	ldrb	r3, [r7, #15]
 8000756:	2b0f      	cmp	r3, #15
 8000758:	d9ef      	bls.n	800073a <OLED_ShowCN+0x2e>
	}
	OLED_SetPos(x,y + 1);
 800075a:	79bb      	ldrb	r3, [r7, #6]
 800075c:	3301      	adds	r3, #1
 800075e:	b2da      	uxtb	r2, r3
 8000760:	79fb      	ldrb	r3, [r7, #7]
 8000762:	4611      	mov	r1, r2
 8000764:	4618      	mov	r0, r3
 8000766:	f7ff ff76 	bl	8000656 <OLED_SetPos>
	for(wm = 0;wm < 16;wm++)
 800076a:	2300      	movs	r3, #0
 800076c:	73fb      	strb	r3, [r7, #15]
 800076e:	e00c      	b.n	800078a <OLED_ShowCN+0x7e>
	{
		WriteDat(F16x16[adder]);
 8000770:	4a0a      	ldr	r2, [pc, #40]	@ (800079c <OLED_ShowCN+0x90>)
 8000772:	68bb      	ldr	r3, [r7, #8]
 8000774:	4413      	add	r3, r2
 8000776:	781b      	ldrb	r3, [r3, #0]
 8000778:	4618      	mov	r0, r3
 800077a:	f7ff fef9 	bl	8000570 <WriteDat>
		adder += 1;
 800077e:	68bb      	ldr	r3, [r7, #8]
 8000780:	3301      	adds	r3, #1
 8000782:	60bb      	str	r3, [r7, #8]
	for(wm = 0;wm < 16;wm++)
 8000784:	7bfb      	ldrb	r3, [r7, #15]
 8000786:	3301      	adds	r3, #1
 8000788:	73fb      	strb	r3, [r7, #15]
 800078a:	7bfb      	ldrb	r3, [r7, #15]
 800078c:	2b0f      	cmp	r3, #15
 800078e:	d9ef      	bls.n	8000770 <OLED_ShowCN+0x64>
	}
}
 8000790:	bf00      	nop
 8000792:	bf00      	nop
 8000794:	3710      	adds	r7, #16
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	20000000 	.word	0x20000000

080007a0 <OLED_Test>:
	 	OLED_ShowChar(x+(size2/2)*t,y,temp+'0',size2);
	}
}

void OLED_Test()
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b082      	sub	sp, #8
 80007a4:	af00      	add	r7, sp, #0
	OLED_CLS();
 80007a6:	f7ff ffaa 	bl	80006fe <OLED_CLS>
	//OLED_ShowStr(0, 0, (unsigned char *) "hello world", 2);
	//OLED_DrawBMP(0,0,128,7,BMP1);
	for (int i = 0; i < 2; i++)
 80007aa:	2300      	movs	r3, #0
 80007ac:	607b      	str	r3, [r7, #4]
 80007ae:	e00c      	b.n	80007ca <OLED_Test+0x2a>
	{
		OLED_ShowCN(i * 16, 2, i);
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	b2db      	uxtb	r3, r3
 80007b4:	011b      	lsls	r3, r3, #4
 80007b6:	b2db      	uxtb	r3, r3
 80007b8:	687a      	ldr	r2, [r7, #4]
 80007ba:	b2d2      	uxtb	r2, r2
 80007bc:	2102      	movs	r1, #2
 80007be:	4618      	mov	r0, r3
 80007c0:	f7ff ffa4 	bl	800070c <OLED_ShowCN>
	for (int i = 0; i < 2; i++)
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	3301      	adds	r3, #1
 80007c8:	607b      	str	r3, [r7, #4]
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	2b01      	cmp	r3, #1
 80007ce:	ddef      	ble.n	80007b0 <OLED_Test+0x10>
	}
}
 80007d0:	bf00      	nop
 80007d2:	bf00      	nop
 80007d4:	3708      	adds	r7, #8
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
	...

080007dc <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b084      	sub	sp, #16
 80007e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80007e2:	f107 030c 	add.w	r3, r7, #12
 80007e6:	2100      	movs	r1, #0
 80007e8:	460a      	mov	r2, r1
 80007ea:	801a      	strh	r2, [r3, #0]
 80007ec:	460a      	mov	r2, r1
 80007ee:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 80007f0:	2300      	movs	r3, #0
 80007f2:	60bb      	str	r3, [r7, #8]

  /* USER CODE BEGIN RTC_Init 1 */
  __HAL_RCC_BKP_CLK_ENABLE();
 80007f4:	4b31      	ldr	r3, [pc, #196]	@ (80008bc <MX_RTC_Init+0xe0>)
 80007f6:	69db      	ldr	r3, [r3, #28]
 80007f8:	4a30      	ldr	r2, [pc, #192]	@ (80008bc <MX_RTC_Init+0xe0>)
 80007fa:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80007fe:	61d3      	str	r3, [r2, #28]
 8000800:	4b2e      	ldr	r3, [pc, #184]	@ (80008bc <MX_RTC_Init+0xe0>)
 8000802:	69db      	ldr	r3, [r3, #28]
 8000804:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000808:	607b      	str	r3, [r7, #4]
 800080a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800080c:	4b2b      	ldr	r3, [pc, #172]	@ (80008bc <MX_RTC_Init+0xe0>)
 800080e:	69db      	ldr	r3, [r3, #28]
 8000810:	4a2a      	ldr	r2, [pc, #168]	@ (80008bc <MX_RTC_Init+0xe0>)
 8000812:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000816:	61d3      	str	r3, [r2, #28]
 8000818:	4b28      	ldr	r3, [pc, #160]	@ (80008bc <MX_RTC_Init+0xe0>)
 800081a:	69db      	ldr	r3, [r3, #28]
 800081c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000820:	603b      	str	r3, [r7, #0]
 8000822:	683b      	ldr	r3, [r7, #0]
  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000824:	4b26      	ldr	r3, [pc, #152]	@ (80008c0 <MX_RTC_Init+0xe4>)
 8000826:	4a27      	ldr	r2, [pc, #156]	@ (80008c4 <MX_RTC_Init+0xe8>)
 8000828:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 800082a:	4b25      	ldr	r3, [pc, #148]	@ (80008c0 <MX_RTC_Init+0xe4>)
 800082c:	f04f 32ff 	mov.w	r2, #4294967295
 8000830:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_NONE;
 8000832:	4b23      	ldr	r3, [pc, #140]	@ (80008c0 <MX_RTC_Init+0xe4>)
 8000834:	2200      	movs	r2, #0
 8000836:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000838:	4821      	ldr	r0, [pc, #132]	@ (80008c0 <MX_RTC_Init+0xe4>)
 800083a:	f002 fbc5 	bl	8002fc8 <HAL_RTC_Init>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d001      	beq.n	8000848 <MX_RTC_Init+0x6c>
  {
    Error_Handler();
 8000844:	f7ff fe75 	bl	8000532 <Error_Handler>
  }

  /* USER CODE BEGIN Check_RTC_BKUP */
  if (HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR1) != 0x5051)
 8000848:	2101      	movs	r1, #1
 800084a:	481d      	ldr	r0, [pc, #116]	@ (80008c0 <MX_RTC_Init+0xe4>)
 800084c:	f003 f97e 	bl	8003b4c <HAL_RTCEx_BKUPRead>
 8000850:	4603      	mov	r3, r0
 8000852:	f245 0251 	movw	r2, #20561	@ 0x5051
 8000856:	4293      	cmp	r3, r2
 8000858:	d02b      	beq.n	80008b2 <MX_RTC_Init+0xd6>
  {
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 800085a:	2300      	movs	r3, #0
 800085c:	733b      	strb	r3, [r7, #12]
  sTime.Minutes = 0x0;
 800085e:	2300      	movs	r3, #0
 8000860:	737b      	strb	r3, [r7, #13]
  sTime.Seconds = 0x0;
 8000862:	2300      	movs	r3, #0
 8000864:	73bb      	strb	r3, [r7, #14]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000866:	f107 030c 	add.w	r3, r7, #12
 800086a:	2201      	movs	r2, #1
 800086c:	4619      	mov	r1, r3
 800086e:	4814      	ldr	r0, [pc, #80]	@ (80008c0 <MX_RTC_Init+0xe4>)
 8000870:	f002 fc36 	bl	80030e0 <HAL_RTC_SetTime>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d001      	beq.n	800087e <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 800087a:	f7ff fe5a 	bl	8000532 <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_SATURDAY;
 800087e:	2306      	movs	r3, #6
 8000880:	723b      	strb	r3, [r7, #8]
  DateToUpdate.Month = RTC_MONTH_FEBRUARY;
 8000882:	2302      	movs	r3, #2
 8000884:	727b      	strb	r3, [r7, #9]
  DateToUpdate.Date = 0x7;
 8000886:	2307      	movs	r3, #7
 8000888:	72bb      	strb	r3, [r7, #10]
  DateToUpdate.Year = 0x25;
 800088a:	2325      	movs	r3, #37	@ 0x25
 800088c:	72fb      	strb	r3, [r7, #11]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 800088e:	f107 0308 	add.w	r3, r7, #8
 8000892:	2201      	movs	r2, #1
 8000894:	4619      	mov	r1, r3
 8000896:	480a      	ldr	r0, [pc, #40]	@ (80008c0 <MX_RTC_Init+0xe4>)
 8000898:	f002 fd92 	bl	80033c0 <HAL_RTC_SetDate>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d001      	beq.n	80008a6 <MX_RTC_Init+0xca>
  {
	  Error_Handler();
 80008a2:	f7ff fe46 	bl	8000532 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */
	  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x5051);
 80008a6:	f245 0251 	movw	r2, #20561	@ 0x5051
 80008aa:	2101      	movs	r1, #1
 80008ac:	4804      	ldr	r0, [pc, #16]	@ (80008c0 <MX_RTC_Init+0xe4>)
 80008ae:	f003 f933 	bl	8003b18 <HAL_RTCEx_BKUPWrite>
  }
  /* USER CODE END RTC_Init 2 */

}
 80008b2:	bf00      	nop
 80008b4:	3710      	adds	r7, #16
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	40021000 	.word	0x40021000
 80008c0:	2000021c 	.word	0x2000021c
 80008c4:	40002800 	.word	0x40002800

080008c8 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b084      	sub	sp, #16
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	4a0b      	ldr	r2, [pc, #44]	@ (8000904 <HAL_RTC_MspInit+0x3c>)
 80008d6:	4293      	cmp	r3, r2
 80008d8:	d110      	bne.n	80008fc <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 80008da:	f001 fded 	bl	80024b8 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 80008de:	4b0a      	ldr	r3, [pc, #40]	@ (8000908 <HAL_RTC_MspInit+0x40>)
 80008e0:	69db      	ldr	r3, [r3, #28]
 80008e2:	4a09      	ldr	r2, [pc, #36]	@ (8000908 <HAL_RTC_MspInit+0x40>)
 80008e4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80008e8:	61d3      	str	r3, [r2, #28]
 80008ea:	4b07      	ldr	r3, [pc, #28]	@ (8000908 <HAL_RTC_MspInit+0x40>)
 80008ec:	69db      	ldr	r3, [r3, #28]
 80008ee:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80008f2:	60fb      	str	r3, [r7, #12]
 80008f4:	68fb      	ldr	r3, [r7, #12]
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80008f6:	4b05      	ldr	r3, [pc, #20]	@ (800090c <HAL_RTC_MspInit+0x44>)
 80008f8:	2201      	movs	r2, #1
 80008fa:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80008fc:	bf00      	nop
 80008fe:	3710      	adds	r7, #16
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}
 8000904:	40002800 	.word	0x40002800
 8000908:	40021000 	.word	0x40021000
 800090c:	4242043c 	.word	0x4242043c

08000910 <RTC_Test>:
  }
}

/* USER CODE BEGIN 1 */
void RTC_Test()
{
 8000910:	b5b0      	push	{r4, r5, r7, lr}
 8000912:	b086      	sub	sp, #24
 8000914:	af04      	add	r7, sp, #16
	RTC_TimeTypeDef time = { 0 };
 8000916:	1d3b      	adds	r3, r7, #4
 8000918:	2100      	movs	r1, #0
 800091a:	460a      	mov	r2, r1
 800091c:	801a      	strh	r2, [r3, #0]
 800091e:	460a      	mov	r2, r1
 8000920:	709a      	strb	r2, [r3, #2]
	RTC_DateTypeDef data = { 0 };
 8000922:	2300      	movs	r3, #0
 8000924:	603b      	str	r3, [r7, #0]
	HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN);
 8000926:	1d3b      	adds	r3, r7, #4
 8000928:	2200      	movs	r2, #0
 800092a:	4619      	mov	r1, r3
 800092c:	4811      	ldr	r0, [pc, #68]	@ (8000974 <RTC_Test+0x64>)
 800092e:	f002 fc6f 	bl	8003210 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &data, RTC_FORMAT_BIN);
 8000932:	463b      	mov	r3, r7
 8000934:	2200      	movs	r2, #0
 8000936:	4619      	mov	r1, r3
 8000938:	480e      	ldr	r0, [pc, #56]	@ (8000974 <RTC_Test+0x64>)
 800093a:	f002 fdf7 	bl	800352c <HAL_RTC_GetDate>
	printf("%04d-%02d-%02d %02d:%02d:%02d\n", 2000+data.Year, data.Month, data.Date, time.Hours, time.Minutes, time.Seconds);
 800093e:	78fb      	ldrb	r3, [r7, #3]
 8000940:	f503 61fa 	add.w	r1, r3, #2000	@ 0x7d0
 8000944:	787b      	ldrb	r3, [r7, #1]
 8000946:	461c      	mov	r4, r3
 8000948:	78bb      	ldrb	r3, [r7, #2]
 800094a:	461d      	mov	r5, r3
 800094c:	793b      	ldrb	r3, [r7, #4]
 800094e:	797a      	ldrb	r2, [r7, #5]
 8000950:	79b8      	ldrb	r0, [r7, #6]
 8000952:	9002      	str	r0, [sp, #8]
 8000954:	9201      	str	r2, [sp, #4]
 8000956:	9300      	str	r3, [sp, #0]
 8000958:	462b      	mov	r3, r5
 800095a:	4622      	mov	r2, r4
 800095c:	4806      	ldr	r0, [pc, #24]	@ (8000978 <RTC_Test+0x68>)
 800095e:	f004 f9c3 	bl	8004ce8 <iprintf>
	HAL_Delay(1000);
 8000962:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000966:	f000 fb73 	bl	8001050 <HAL_Delay>
}
 800096a:	bf00      	nop
 800096c:	3708      	adds	r7, #8
 800096e:	46bd      	mov	sp, r7
 8000970:	bdb0      	pop	{r4, r5, r7, pc}
 8000972:	bf00      	nop
 8000974:	2000021c 	.word	0x2000021c
 8000978:	08005b88 	.word	0x08005b88

0800097c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800097c:	b480      	push	{r7}
 800097e:	b085      	sub	sp, #20
 8000980:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000982:	4b15      	ldr	r3, [pc, #84]	@ (80009d8 <HAL_MspInit+0x5c>)
 8000984:	699b      	ldr	r3, [r3, #24]
 8000986:	4a14      	ldr	r2, [pc, #80]	@ (80009d8 <HAL_MspInit+0x5c>)
 8000988:	f043 0301 	orr.w	r3, r3, #1
 800098c:	6193      	str	r3, [r2, #24]
 800098e:	4b12      	ldr	r3, [pc, #72]	@ (80009d8 <HAL_MspInit+0x5c>)
 8000990:	699b      	ldr	r3, [r3, #24]
 8000992:	f003 0301 	and.w	r3, r3, #1
 8000996:	60bb      	str	r3, [r7, #8]
 8000998:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800099a:	4b0f      	ldr	r3, [pc, #60]	@ (80009d8 <HAL_MspInit+0x5c>)
 800099c:	69db      	ldr	r3, [r3, #28]
 800099e:	4a0e      	ldr	r2, [pc, #56]	@ (80009d8 <HAL_MspInit+0x5c>)
 80009a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009a4:	61d3      	str	r3, [r2, #28]
 80009a6:	4b0c      	ldr	r3, [pc, #48]	@ (80009d8 <HAL_MspInit+0x5c>)
 80009a8:	69db      	ldr	r3, [r3, #28]
 80009aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009ae:	607b      	str	r3, [r7, #4]
 80009b0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80009b2:	4b0a      	ldr	r3, [pc, #40]	@ (80009dc <HAL_MspInit+0x60>)
 80009b4:	685b      	ldr	r3, [r3, #4]
 80009b6:	60fb      	str	r3, [r7, #12]
 80009b8:	68fb      	ldr	r3, [r7, #12]
 80009ba:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80009be:	60fb      	str	r3, [r7, #12]
 80009c0:	68fb      	ldr	r3, [r7, #12]
 80009c2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80009c6:	60fb      	str	r3, [r7, #12]
 80009c8:	4a04      	ldr	r2, [pc, #16]	@ (80009dc <HAL_MspInit+0x60>)
 80009ca:	68fb      	ldr	r3, [r7, #12]
 80009cc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009ce:	bf00      	nop
 80009d0:	3714      	adds	r7, #20
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bc80      	pop	{r7}
 80009d6:	4770      	bx	lr
 80009d8:	40021000 	.word	0x40021000
 80009dc:	40010000 	.word	0x40010000

080009e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009e4:	bf00      	nop
 80009e6:	e7fd      	b.n	80009e4 <NMI_Handler+0x4>

080009e8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009ec:	bf00      	nop
 80009ee:	e7fd      	b.n	80009ec <HardFault_Handler+0x4>

080009f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009f4:	bf00      	nop
 80009f6:	e7fd      	b.n	80009f4 <MemManage_Handler+0x4>

080009f8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009fc:	bf00      	nop
 80009fe:	e7fd      	b.n	80009fc <BusFault_Handler+0x4>

08000a00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a04:	bf00      	nop
 8000a06:	e7fd      	b.n	8000a04 <UsageFault_Handler+0x4>

08000a08 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a0c:	bf00      	nop
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bc80      	pop	{r7}
 8000a12:	4770      	bx	lr

08000a14 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a18:	bf00      	nop
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bc80      	pop	{r7}
 8000a1e:	4770      	bx	lr

08000a20 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a24:	bf00      	nop
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bc80      	pop	{r7}
 8000a2a:	4770      	bx	lr

08000a2c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a30:	f000 faf2 	bl	8001018 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a34:	bf00      	nop
 8000a36:	bd80      	pop	{r7, pc}

08000a38 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000a3c:	2001      	movs	r0, #1
 8000a3e:	f001 f877 	bl	8001b30 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000a42:	bf00      	nop
 8000a44:	bd80      	pop	{r7, pc}
	...

08000a48 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000a4c:	4802      	ldr	r0, [pc, #8]	@ (8000a58 <DMA1_Channel5_IRQHandler+0x10>)
 8000a4e:	f000 fd9f 	bl	8001590 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8000a52:	bf00      	nop
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	20000280 	.word	0x20000280

08000a5c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8000a60:	2020      	movs	r0, #32
 8000a62:	f001 f865 	bl	8001b30 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000a66:	bf00      	nop
 8000a68:	bd80      	pop	{r7, pc}
	...

08000a6c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000a70:	4803      	ldr	r0, [pc, #12]	@ (8000a80 <USART1_IRQHandler+0x14>)
 8000a72:	f003 f987 	bl	8003d84 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  UART_IRQHandler(&huart1);
 8000a76:	4802      	ldr	r0, [pc, #8]	@ (8000a80 <USART1_IRQHandler+0x14>)
 8000a78:	f000 f8b4 	bl	8000be4 <UART_IRQHandler>
  /* USER CODE END USART1_IRQn 1 */
}
 8000a7c:	bf00      	nop
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	20000238 	.word	0x20000238

08000a84 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 1 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b082      	sub	sp, #8
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	80fb      	strh	r3, [r7, #6]
	static uint32_t oldUWTick = 0;
	if ((uwTick - oldUWTick) < 200) return;
 8000a8e:	4b19      	ldr	r3, [pc, #100]	@ (8000af4 <HAL_GPIO_EXTI_Callback+0x70>)
 8000a90:	681a      	ldr	r2, [r3, #0]
 8000a92:	4b19      	ldr	r3, [pc, #100]	@ (8000af8 <HAL_GPIO_EXTI_Callback+0x74>)
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	1ad3      	subs	r3, r2, r3
 8000a98:	2bc7      	cmp	r3, #199	@ 0xc7
 8000a9a:	d927      	bls.n	8000aec <HAL_GPIO_EXTI_Callback+0x68>
	oldUWTick = uwTick;
 8000a9c:	4b15      	ldr	r3, [pc, #84]	@ (8000af4 <HAL_GPIO_EXTI_Callback+0x70>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	4a15      	ldr	r2, [pc, #84]	@ (8000af8 <HAL_GPIO_EXTI_Callback+0x74>)
 8000aa2:	6013      	str	r3, [r2, #0]
	if (GPIO_Pin == GPIO_PIN_5)
 8000aa4:	88fb      	ldrh	r3, [r7, #6]
 8000aa6:	2b20      	cmp	r3, #32
 8000aa8:	d10e      	bne.n	8000ac8 <HAL_GPIO_EXTI_Callback+0x44>
	{
		LED_Control(LED1, ON);
 8000aaa:	2101      	movs	r1, #1
 8000aac:	2001      	movs	r0, #1
 8000aae:	f7ff fbf5 	bl	800029c <LED_Control>
		LED_Control(LED2, ON);
 8000ab2:	2101      	movs	r1, #1
 8000ab4:	2002      	movs	r0, #2
 8000ab6:	f7ff fbf1 	bl	800029c <LED_Control>
		Key_Value = GPIO_PIN_5;
 8000aba:	4b10      	ldr	r3, [pc, #64]	@ (8000afc <HAL_GPIO_EXTI_Callback+0x78>)
 8000abc:	2220      	movs	r2, #32
 8000abe:	701a      	strb	r2, [r3, #0]
		printf("GPIO pin 5 has pressed\n");
 8000ac0:	480f      	ldr	r0, [pc, #60]	@ (8000b00 <HAL_GPIO_EXTI_Callback+0x7c>)
 8000ac2:	f004 f981 	bl	8004dc8 <puts>
 8000ac6:	e012      	b.n	8000aee <HAL_GPIO_EXTI_Callback+0x6a>
	}
	else if (GPIO_Pin == GPIO_PIN_0)
 8000ac8:	88fb      	ldrh	r3, [r7, #6]
 8000aca:	2b01      	cmp	r3, #1
 8000acc:	d10f      	bne.n	8000aee <HAL_GPIO_EXTI_Callback+0x6a>
	{
		LED_Control(LED1, OFF);
 8000ace:	2100      	movs	r1, #0
 8000ad0:	2001      	movs	r0, #1
 8000ad2:	f7ff fbe3 	bl	800029c <LED_Control>
		LED_Control(LED2, OFF);
 8000ad6:	2100      	movs	r1, #0
 8000ad8:	2002      	movs	r0, #2
 8000ada:	f7ff fbdf 	bl	800029c <LED_Control>
		Key_Value = GPIO_PIN_0;
 8000ade:	4b07      	ldr	r3, [pc, #28]	@ (8000afc <HAL_GPIO_EXTI_Callback+0x78>)
 8000ae0:	2201      	movs	r2, #1
 8000ae2:	701a      	strb	r2, [r3, #0]
		printf("GPIO pin 0 has pressed\n");
 8000ae4:	4807      	ldr	r0, [pc, #28]	@ (8000b04 <HAL_GPIO_EXTI_Callback+0x80>)
 8000ae6:	f004 f96f 	bl	8004dc8 <puts>
 8000aea:	e000      	b.n	8000aee <HAL_GPIO_EXTI_Callback+0x6a>
	if ((uwTick - oldUWTick) < 200) return;
 8000aec:	bf00      	nop
	}
}
 8000aee:	3708      	adds	r7, #8
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	200002c4 	.word	0x200002c4
 8000af8:	20000230 	.word	0x20000230
 8000afc:	20000219 	.word	0x20000219
 8000b00:	08005ba8 	.word	0x08005ba8
 8000b04:	08005bc0 	.word	0x08005bc0

08000b08 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b084      	sub	sp, #16
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1)
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	4a12      	ldr	r2, [pc, #72]	@ (8000b60 <HAL_UART_RxCpltCallback+0x58>)
 8000b16:	4293      	cmp	r3, r2
 8000b18:	d11e      	bne.n	8000b58 <HAL_UART_RxCpltCallback+0x50>
	{
		//HAL_UART_Transmit(&huart1, RX1_Buffer, 4, HAL_MAX_DELAY);
		//HAL_UART_Receive_IT(&huart1, RX1_Buffer, 4);
//		HAL_UART_Transmit_DMA(huart, RX1_Buffer, 1);
//		HAL_UART_Receive_IT(huart, RX1_Buffer, 1);
		uint8_t length = DMA_BUF_SIZE - RX1_OffSet;
 8000b1a:	4b12      	ldr	r3, [pc, #72]	@ (8000b64 <HAL_UART_RxCpltCallback+0x5c>)
 8000b1c:	781b      	ldrb	r3, [r3, #0]
 8000b1e:	425b      	negs	r3, r3
 8000b20:	73fb      	strb	r3, [r7, #15]
		HAL_UART_Transmit(huart, RX1_Buffer + RX1_OffSet, length, HAL_MAX_DELAY);
 8000b22:	4b10      	ldr	r3, [pc, #64]	@ (8000b64 <HAL_UART_RxCpltCallback+0x5c>)
 8000b24:	781b      	ldrb	r3, [r3, #0]
 8000b26:	461a      	mov	r2, r3
 8000b28:	4b0f      	ldr	r3, [pc, #60]	@ (8000b68 <HAL_UART_RxCpltCallback+0x60>)
 8000b2a:	18d1      	adds	r1, r2, r3
 8000b2c:	7bfb      	ldrb	r3, [r7, #15]
 8000b2e:	b29a      	uxth	r2, r3
 8000b30:	f04f 33ff 	mov.w	r3, #4294967295
 8000b34:	6878      	ldr	r0, [r7, #4]
 8000b36:	f003 f875 	bl	8003c24 <HAL_UART_Transmit>
		printf("\n");
 8000b3a:	200a      	movs	r0, #10
 8000b3c:	f004 f8e6 	bl	8004d0c <putchar>
		printf("RX1_OffSet=%d\n", RX1_OffSet + length);
 8000b40:	4b08      	ldr	r3, [pc, #32]	@ (8000b64 <HAL_UART_RxCpltCallback+0x5c>)
 8000b42:	781b      	ldrb	r3, [r3, #0]
 8000b44:	461a      	mov	r2, r3
 8000b46:	7bfb      	ldrb	r3, [r7, #15]
 8000b48:	4413      	add	r3, r2
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	4807      	ldr	r0, [pc, #28]	@ (8000b6c <HAL_UART_RxCpltCallback+0x64>)
 8000b4e:	f004 f8cb 	bl	8004ce8 <iprintf>
		RX1_OffSet = 0;
 8000b52:	4b04      	ldr	r3, [pc, #16]	@ (8000b64 <HAL_UART_RxCpltCallback+0x5c>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	701a      	strb	r2, [r3, #0]
	}
}
 8000b58:	bf00      	nop
 8000b5a:	3710      	adds	r7, #16
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	40013800 	.word	0x40013800
 8000b64:	20000218 	.word	0x20000218
 8000b68:	20000118 	.word	0x20000118
 8000b6c:	08005bd8 	.word	0x08005bd8

08000b70 <HAL_UART_RxHalfCpltCallback>:

void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b084      	sub	sp, #16
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1)
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	4a15      	ldr	r2, [pc, #84]	@ (8000bd4 <HAL_UART_RxHalfCpltCallback+0x64>)
 8000b7e:	4293      	cmp	r3, r2
 8000b80:	d124      	bne.n	8000bcc <HAL_UART_RxHalfCpltCallback+0x5c>
	{
		uint8_t length = DMA_BUF_SIZE / 2 - RX1_OffSet;
 8000b82:	4b15      	ldr	r3, [pc, #84]	@ (8000bd8 <HAL_UART_RxHalfCpltCallback+0x68>)
 8000b84:	781a      	ldrb	r2, [r3, #0]
 8000b86:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 8000b8a:	1a9b      	subs	r3, r3, r2
 8000b8c:	73fb      	strb	r3, [r7, #15]
		//printf("HLength=%d\n", length);
		HAL_UART_Transmit(huart, RX1_Buffer + RX1_OffSet, length, HAL_MAX_DELAY);
 8000b8e:	4b12      	ldr	r3, [pc, #72]	@ (8000bd8 <HAL_UART_RxHalfCpltCallback+0x68>)
 8000b90:	781b      	ldrb	r3, [r3, #0]
 8000b92:	461a      	mov	r2, r3
 8000b94:	4b11      	ldr	r3, [pc, #68]	@ (8000bdc <HAL_UART_RxHalfCpltCallback+0x6c>)
 8000b96:	18d1      	adds	r1, r2, r3
 8000b98:	7bfb      	ldrb	r3, [r7, #15]
 8000b9a:	b29a      	uxth	r2, r3
 8000b9c:	f04f 33ff 	mov.w	r3, #4294967295
 8000ba0:	6878      	ldr	r0, [r7, #4]
 8000ba2:	f003 f83f 	bl	8003c24 <HAL_UART_Transmit>
		printf("\n");
 8000ba6:	200a      	movs	r0, #10
 8000ba8:	f004 f8b0 	bl	8004d0c <putchar>
		printf("RX1_OffSet=%d\n", RX1_OffSet + length);
 8000bac:	4b0a      	ldr	r3, [pc, #40]	@ (8000bd8 <HAL_UART_RxHalfCpltCallback+0x68>)
 8000bae:	781b      	ldrb	r3, [r3, #0]
 8000bb0:	461a      	mov	r2, r3
 8000bb2:	7bfb      	ldrb	r3, [r7, #15]
 8000bb4:	4413      	add	r3, r2
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	4809      	ldr	r0, [pc, #36]	@ (8000be0 <HAL_UART_RxHalfCpltCallback+0x70>)
 8000bba:	f004 f895 	bl	8004ce8 <iprintf>
		RX1_OffSet += length;
 8000bbe:	4b06      	ldr	r3, [pc, #24]	@ (8000bd8 <HAL_UART_RxHalfCpltCallback+0x68>)
 8000bc0:	781a      	ldrb	r2, [r3, #0]
 8000bc2:	7bfb      	ldrb	r3, [r7, #15]
 8000bc4:	4413      	add	r3, r2
 8000bc6:	b2da      	uxtb	r2, r3
 8000bc8:	4b03      	ldr	r3, [pc, #12]	@ (8000bd8 <HAL_UART_RxHalfCpltCallback+0x68>)
 8000bca:	701a      	strb	r2, [r3, #0]
	}
}
 8000bcc:	bf00      	nop
 8000bce:	3710      	adds	r7, #16
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	40013800 	.word	0x40013800
 8000bd8:	20000218 	.word	0x20000218
 8000bdc:	20000118 	.word	0x20000118
 8000be0:	08005bd8 	.word	0x08005bd8

08000be4 <UART_IRQHandler>:

void UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b084      	sub	sp, #16
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1)
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	4a1e      	ldr	r2, [pc, #120]	@ (8000c6c <UART_IRQHandler+0x88>)
 8000bf2:	4293      	cmp	r3, r2
 8000bf4:	d136      	bne.n	8000c64 <UART_IRQHandler+0x80>
	{
		if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) != RESET)
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	f003 0310 	and.w	r3, r3, #16
 8000c00:	2b10      	cmp	r3, #16
 8000c02:	d12f      	bne.n	8000c64 <UART_IRQHandler+0x80>
		{
			__HAL_UART_CLEAR_IDLEFLAG(huart);
 8000c04:	2300      	movs	r3, #0
 8000c06:	60bb      	str	r3, [r7, #8]
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	60bb      	str	r3, [r7, #8]
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	685b      	ldr	r3, [r3, #4]
 8000c16:	60bb      	str	r3, [r7, #8]
 8000c18:	68bb      	ldr	r3, [r7, #8]
			uint8_t length = DMA_BUF_SIZE - __HAL_DMA_GET_COUNTER(&hdma_usart1_rx) - RX1_OffSet;
 8000c1a:	4b15      	ldr	r3, [pc, #84]	@ (8000c70 <UART_IRQHandler+0x8c>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	685b      	ldr	r3, [r3, #4]
 8000c20:	b2da      	uxtb	r2, r3
 8000c22:	4b14      	ldr	r3, [pc, #80]	@ (8000c74 <UART_IRQHandler+0x90>)
 8000c24:	781b      	ldrb	r3, [r3, #0]
 8000c26:	4413      	add	r3, r2
 8000c28:	b2db      	uxtb	r3, r3
 8000c2a:	425b      	negs	r3, r3
 8000c2c:	73fb      	strb	r3, [r7, #15]
			HAL_UART_Transmit(huart, RX1_Buffer + RX1_OffSet, length, HAL_MAX_DELAY);
 8000c2e:	4b11      	ldr	r3, [pc, #68]	@ (8000c74 <UART_IRQHandler+0x90>)
 8000c30:	781b      	ldrb	r3, [r3, #0]
 8000c32:	461a      	mov	r2, r3
 8000c34:	4b10      	ldr	r3, [pc, #64]	@ (8000c78 <UART_IRQHandler+0x94>)
 8000c36:	18d1      	adds	r1, r2, r3
 8000c38:	7bfb      	ldrb	r3, [r7, #15]
 8000c3a:	b29a      	uxth	r2, r3
 8000c3c:	f04f 33ff 	mov.w	r3, #4294967295
 8000c40:	6878      	ldr	r0, [r7, #4]
 8000c42:	f002 ffef 	bl	8003c24 <HAL_UART_Transmit>
			printf("\n");
 8000c46:	200a      	movs	r0, #10
 8000c48:	f004 f860 	bl	8004d0c <putchar>
			printf("Idle Length=%d\n", length);
 8000c4c:	7bfb      	ldrb	r3, [r7, #15]
 8000c4e:	4619      	mov	r1, r3
 8000c50:	480a      	ldr	r0, [pc, #40]	@ (8000c7c <UART_IRQHandler+0x98>)
 8000c52:	f004 f849 	bl	8004ce8 <iprintf>
			RX1_OffSet += length;
 8000c56:	4b07      	ldr	r3, [pc, #28]	@ (8000c74 <UART_IRQHandler+0x90>)
 8000c58:	781a      	ldrb	r2, [r3, #0]
 8000c5a:	7bfb      	ldrb	r3, [r7, #15]
 8000c5c:	4413      	add	r3, r2
 8000c5e:	b2da      	uxtb	r2, r3
 8000c60:	4b04      	ldr	r3, [pc, #16]	@ (8000c74 <UART_IRQHandler+0x90>)
 8000c62:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8000c64:	bf00      	nop
 8000c66:	3710      	adds	r7, #16
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	40013800 	.word	0x40013800
 8000c70:	20000280 	.word	0x20000280
 8000c74:	20000218 	.word	0x20000218
 8000c78:	20000118 	.word	0x20000118
 8000c7c:	08005be8 	.word	0x08005be8

08000c80 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b086      	sub	sp, #24
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	60f8      	str	r0, [r7, #12]
 8000c88:	60b9      	str	r1, [r7, #8]
 8000c8a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	617b      	str	r3, [r7, #20]
 8000c90:	e00a      	b.n	8000ca8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000c92:	f3af 8000 	nop.w
 8000c96:	4601      	mov	r1, r0
 8000c98:	68bb      	ldr	r3, [r7, #8]
 8000c9a:	1c5a      	adds	r2, r3, #1
 8000c9c:	60ba      	str	r2, [r7, #8]
 8000c9e:	b2ca      	uxtb	r2, r1
 8000ca0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ca2:	697b      	ldr	r3, [r7, #20]
 8000ca4:	3301      	adds	r3, #1
 8000ca6:	617b      	str	r3, [r7, #20]
 8000ca8:	697a      	ldr	r2, [r7, #20]
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	429a      	cmp	r2, r3
 8000cae:	dbf0      	blt.n	8000c92 <_read+0x12>
  }

  return len;
 8000cb0:	687b      	ldr	r3, [r7, #4]
}
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	3718      	adds	r7, #24
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}

08000cba <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000cba:	b580      	push	{r7, lr}
 8000cbc:	b086      	sub	sp, #24
 8000cbe:	af00      	add	r7, sp, #0
 8000cc0:	60f8      	str	r0, [r7, #12]
 8000cc2:	60b9      	str	r1, [r7, #8]
 8000cc4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	617b      	str	r3, [r7, #20]
 8000cca:	e009      	b.n	8000ce0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000ccc:	68bb      	ldr	r3, [r7, #8]
 8000cce:	1c5a      	adds	r2, r3, #1
 8000cd0:	60ba      	str	r2, [r7, #8]
 8000cd2:	781b      	ldrb	r3, [r3, #0]
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f000 f921 	bl	8000f1c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cda:	697b      	ldr	r3, [r7, #20]
 8000cdc:	3301      	adds	r3, #1
 8000cde:	617b      	str	r3, [r7, #20]
 8000ce0:	697a      	ldr	r2, [r7, #20]
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	429a      	cmp	r2, r3
 8000ce6:	dbf1      	blt.n	8000ccc <_write+0x12>
  }
  return len;
 8000ce8:	687b      	ldr	r3, [r7, #4]
}
 8000cea:	4618      	mov	r0, r3
 8000cec:	3718      	adds	r7, #24
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}

08000cf2 <_close>:

int _close(int file)
{
 8000cf2:	b480      	push	{r7}
 8000cf4:	b083      	sub	sp, #12
 8000cf6:	af00      	add	r7, sp, #0
 8000cf8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000cfa:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000cfe:	4618      	mov	r0, r3
 8000d00:	370c      	adds	r7, #12
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bc80      	pop	{r7}
 8000d06:	4770      	bx	lr

08000d08 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b083      	sub	sp, #12
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
 8000d10:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000d12:	683b      	ldr	r3, [r7, #0]
 8000d14:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000d18:	605a      	str	r2, [r3, #4]
  return 0;
 8000d1a:	2300      	movs	r3, #0
}
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	370c      	adds	r7, #12
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bc80      	pop	{r7}
 8000d24:	4770      	bx	lr

08000d26 <_isatty>:

int _isatty(int file)
{
 8000d26:	b480      	push	{r7}
 8000d28:	b083      	sub	sp, #12
 8000d2a:	af00      	add	r7, sp, #0
 8000d2c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000d2e:	2301      	movs	r3, #1
}
 8000d30:	4618      	mov	r0, r3
 8000d32:	370c      	adds	r7, #12
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bc80      	pop	{r7}
 8000d38:	4770      	bx	lr

08000d3a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d3a:	b480      	push	{r7}
 8000d3c:	b085      	sub	sp, #20
 8000d3e:	af00      	add	r7, sp, #0
 8000d40:	60f8      	str	r0, [r7, #12]
 8000d42:	60b9      	str	r1, [r7, #8]
 8000d44:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000d46:	2300      	movs	r3, #0
}
 8000d48:	4618      	mov	r0, r3
 8000d4a:	3714      	adds	r7, #20
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bc80      	pop	{r7}
 8000d50:	4770      	bx	lr
	...

08000d54 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b086      	sub	sp, #24
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d5c:	4a14      	ldr	r2, [pc, #80]	@ (8000db0 <_sbrk+0x5c>)
 8000d5e:	4b15      	ldr	r3, [pc, #84]	@ (8000db4 <_sbrk+0x60>)
 8000d60:	1ad3      	subs	r3, r2, r3
 8000d62:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d64:	697b      	ldr	r3, [r7, #20]
 8000d66:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d68:	4b13      	ldr	r3, [pc, #76]	@ (8000db8 <_sbrk+0x64>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d102      	bne.n	8000d76 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d70:	4b11      	ldr	r3, [pc, #68]	@ (8000db8 <_sbrk+0x64>)
 8000d72:	4a12      	ldr	r2, [pc, #72]	@ (8000dbc <_sbrk+0x68>)
 8000d74:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d76:	4b10      	ldr	r3, [pc, #64]	@ (8000db8 <_sbrk+0x64>)
 8000d78:	681a      	ldr	r2, [r3, #0]
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	4413      	add	r3, r2
 8000d7e:	693a      	ldr	r2, [r7, #16]
 8000d80:	429a      	cmp	r2, r3
 8000d82:	d207      	bcs.n	8000d94 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d84:	f004 f94e 	bl	8005024 <__errno>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	220c      	movs	r2, #12
 8000d8c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d8e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d92:	e009      	b.n	8000da8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d94:	4b08      	ldr	r3, [pc, #32]	@ (8000db8 <_sbrk+0x64>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d9a:	4b07      	ldr	r3, [pc, #28]	@ (8000db8 <_sbrk+0x64>)
 8000d9c:	681a      	ldr	r2, [r3, #0]
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	4413      	add	r3, r2
 8000da2:	4a05      	ldr	r2, [pc, #20]	@ (8000db8 <_sbrk+0x64>)
 8000da4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000da6:	68fb      	ldr	r3, [r7, #12]
}
 8000da8:	4618      	mov	r0, r3
 8000daa:	3718      	adds	r7, #24
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	20005000 	.word	0x20005000
 8000db4:	00000400 	.word	0x00000400
 8000db8:	20000234 	.word	0x20000234
 8000dbc:	20000418 	.word	0x20000418

08000dc0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000dc4:	bf00      	nop
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bc80      	pop	{r7}
 8000dca:	4770      	bx	lr

08000dcc <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000dd0:	4b11      	ldr	r3, [pc, #68]	@ (8000e18 <MX_USART1_UART_Init+0x4c>)
 8000dd2:	4a12      	ldr	r2, [pc, #72]	@ (8000e1c <MX_USART1_UART_Init+0x50>)
 8000dd4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000dd6:	4b10      	ldr	r3, [pc, #64]	@ (8000e18 <MX_USART1_UART_Init+0x4c>)
 8000dd8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ddc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000dde:	4b0e      	ldr	r3, [pc, #56]	@ (8000e18 <MX_USART1_UART_Init+0x4c>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000de4:	4b0c      	ldr	r3, [pc, #48]	@ (8000e18 <MX_USART1_UART_Init+0x4c>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000dea:	4b0b      	ldr	r3, [pc, #44]	@ (8000e18 <MX_USART1_UART_Init+0x4c>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000df0:	4b09      	ldr	r3, [pc, #36]	@ (8000e18 <MX_USART1_UART_Init+0x4c>)
 8000df2:	220c      	movs	r2, #12
 8000df4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000df6:	4b08      	ldr	r3, [pc, #32]	@ (8000e18 <MX_USART1_UART_Init+0x4c>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dfc:	4b06      	ldr	r3, [pc, #24]	@ (8000e18 <MX_USART1_UART_Init+0x4c>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000e02:	4805      	ldr	r0, [pc, #20]	@ (8000e18 <MX_USART1_UART_Init+0x4c>)
 8000e04:	f002 febe 	bl	8003b84 <HAL_UART_Init>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d001      	beq.n	8000e12 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000e0e:	f7ff fb90 	bl	8000532 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000e12:	bf00      	nop
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	20000238 	.word	0x20000238
 8000e1c:	40013800 	.word	0x40013800

08000e20 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b088      	sub	sp, #32
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e28:	f107 0310 	add.w	r3, r7, #16
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	601a      	str	r2, [r3, #0]
 8000e30:	605a      	str	r2, [r3, #4]
 8000e32:	609a      	str	r2, [r3, #8]
 8000e34:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	4a33      	ldr	r2, [pc, #204]	@ (8000f08 <HAL_UART_MspInit+0xe8>)
 8000e3c:	4293      	cmp	r3, r2
 8000e3e:	d15f      	bne.n	8000f00 <HAL_UART_MspInit+0xe0>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e40:	4b32      	ldr	r3, [pc, #200]	@ (8000f0c <HAL_UART_MspInit+0xec>)
 8000e42:	699b      	ldr	r3, [r3, #24]
 8000e44:	4a31      	ldr	r2, [pc, #196]	@ (8000f0c <HAL_UART_MspInit+0xec>)
 8000e46:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e4a:	6193      	str	r3, [r2, #24]
 8000e4c:	4b2f      	ldr	r3, [pc, #188]	@ (8000f0c <HAL_UART_MspInit+0xec>)
 8000e4e:	699b      	ldr	r3, [r3, #24]
 8000e50:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e54:	60fb      	str	r3, [r7, #12]
 8000e56:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e58:	4b2c      	ldr	r3, [pc, #176]	@ (8000f0c <HAL_UART_MspInit+0xec>)
 8000e5a:	699b      	ldr	r3, [r3, #24]
 8000e5c:	4a2b      	ldr	r2, [pc, #172]	@ (8000f0c <HAL_UART_MspInit+0xec>)
 8000e5e:	f043 0304 	orr.w	r3, r3, #4
 8000e62:	6193      	str	r3, [r2, #24]
 8000e64:	4b29      	ldr	r3, [pc, #164]	@ (8000f0c <HAL_UART_MspInit+0xec>)
 8000e66:	699b      	ldr	r3, [r3, #24]
 8000e68:	f003 0304 	and.w	r3, r3, #4
 8000e6c:	60bb      	str	r3, [r7, #8]
 8000e6e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000e70:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000e74:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e76:	2302      	movs	r3, #2
 8000e78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e7a:	2303      	movs	r3, #3
 8000e7c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e7e:	f107 0310 	add.w	r3, r7, #16
 8000e82:	4619      	mov	r1, r3
 8000e84:	4822      	ldr	r0, [pc, #136]	@ (8000f10 <HAL_UART_MspInit+0xf0>)
 8000e86:	f000 fcb7 	bl	80017f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000e8a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000e8e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e90:	2300      	movs	r3, #0
 8000e92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e94:	2301      	movs	r3, #1
 8000e96:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e98:	f107 0310 	add.w	r3, r7, #16
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	481c      	ldr	r0, [pc, #112]	@ (8000f10 <HAL_UART_MspInit+0xf0>)
 8000ea0:	f000 fcaa 	bl	80017f8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8000ea4:	4b1b      	ldr	r3, [pc, #108]	@ (8000f14 <HAL_UART_MspInit+0xf4>)
 8000ea6:	4a1c      	ldr	r2, [pc, #112]	@ (8000f18 <HAL_UART_MspInit+0xf8>)
 8000ea8:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000eaa:	4b1a      	ldr	r3, [pc, #104]	@ (8000f14 <HAL_UART_MspInit+0xf4>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000eb0:	4b18      	ldr	r3, [pc, #96]	@ (8000f14 <HAL_UART_MspInit+0xf4>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000eb6:	4b17      	ldr	r3, [pc, #92]	@ (8000f14 <HAL_UART_MspInit+0xf4>)
 8000eb8:	2280      	movs	r2, #128	@ 0x80
 8000eba:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000ebc:	4b15      	ldr	r3, [pc, #84]	@ (8000f14 <HAL_UART_MspInit+0xf4>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000ec2:	4b14      	ldr	r3, [pc, #80]	@ (8000f14 <HAL_UART_MspInit+0xf4>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8000ec8:	4b12      	ldr	r3, [pc, #72]	@ (8000f14 <HAL_UART_MspInit+0xf4>)
 8000eca:	2220      	movs	r2, #32
 8000ecc:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000ece:	4b11      	ldr	r3, [pc, #68]	@ (8000f14 <HAL_UART_MspInit+0xf4>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000ed4:	480f      	ldr	r0, [pc, #60]	@ (8000f14 <HAL_UART_MspInit+0xf4>)
 8000ed6:	f000 f9ed 	bl	80012b4 <HAL_DMA_Init>
 8000eda:	4603      	mov	r3, r0
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d001      	beq.n	8000ee4 <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 8000ee0:	f7ff fb27 	bl	8000532 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	4a0b      	ldr	r2, [pc, #44]	@ (8000f14 <HAL_UART_MspInit+0xf4>)
 8000ee8:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000eea:	4a0a      	ldr	r2, [pc, #40]	@ (8000f14 <HAL_UART_MspInit+0xf4>)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	2100      	movs	r1, #0
 8000ef4:	2025      	movs	r0, #37	@ 0x25
 8000ef6:	f000 f9a6 	bl	8001246 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000efa:	2025      	movs	r0, #37	@ 0x25
 8000efc:	f000 f9bf 	bl	800127e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000f00:	bf00      	nop
 8000f02:	3720      	adds	r7, #32
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	40013800 	.word	0x40013800
 8000f0c:	40021000 	.word	0x40021000
 8000f10:	40010800 	.word	0x40010800
 8000f14:	20000280 	.word	0x20000280
 8000f18:	40020058 	.word	0x40020058

08000f1c <__io_putchar>:
  }
}

/* USER CODE BEGIN 1 */
int __io_putchar(int ch)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000f24:	1d39      	adds	r1, r7, #4
 8000f26:	f04f 33ff 	mov.w	r3, #4294967295
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	4803      	ldr	r0, [pc, #12]	@ (8000f3c <__io_putchar+0x20>)
 8000f2e:	f002 fe79 	bl	8003c24 <HAL_UART_Transmit>
  return ch;
 8000f32:	687b      	ldr	r3, [r7, #4]
}
 8000f34:	4618      	mov	r0, r3
 8000f36:	3708      	adds	r7, #8
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	20000238 	.word	0x20000238

08000f40 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f40:	f7ff ff3e 	bl	8000dc0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f44:	480b      	ldr	r0, [pc, #44]	@ (8000f74 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000f46:	490c      	ldr	r1, [pc, #48]	@ (8000f78 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000f48:	4a0c      	ldr	r2, [pc, #48]	@ (8000f7c <LoopFillZerobss+0x16>)
  movs r3, #0
 8000f4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f4c:	e002      	b.n	8000f54 <LoopCopyDataInit>

08000f4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f52:	3304      	adds	r3, #4

08000f54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f58:	d3f9      	bcc.n	8000f4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f5a:	4a09      	ldr	r2, [pc, #36]	@ (8000f80 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000f5c:	4c09      	ldr	r4, [pc, #36]	@ (8000f84 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f60:	e001      	b.n	8000f66 <LoopFillZerobss>

08000f62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f64:	3204      	adds	r2, #4

08000f66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f68:	d3fb      	bcc.n	8000f62 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f6a:	f004 f861 	bl	8005030 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f6e:	f7ff fa4b 	bl	8000408 <main>
  bx lr
 8000f72:	4770      	bx	lr
  ldr r0, =_sdata
 8000f74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f78:	200000a8 	.word	0x200000a8
  ldr r2, =_sidata
 8000f7c:	08005c74 	.word	0x08005c74
  ldr r2, =_sbss
 8000f80:	200000a8 	.word	0x200000a8
  ldr r4, =_ebss
 8000f84:	20000414 	.word	0x20000414

08000f88 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f88:	e7fe      	b.n	8000f88 <ADC1_2_IRQHandler>
	...

08000f8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f90:	4b08      	ldr	r3, [pc, #32]	@ (8000fb4 <HAL_Init+0x28>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	4a07      	ldr	r2, [pc, #28]	@ (8000fb4 <HAL_Init+0x28>)
 8000f96:	f043 0310 	orr.w	r3, r3, #16
 8000f9a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f9c:	2003      	movs	r0, #3
 8000f9e:	f000 f947 	bl	8001230 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fa2:	200f      	movs	r0, #15
 8000fa4:	f000 f808 	bl	8000fb8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fa8:	f7ff fce8 	bl	800097c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fac:	2300      	movs	r3, #0
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	40022000 	.word	0x40022000

08000fb8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fc0:	4b12      	ldr	r3, [pc, #72]	@ (800100c <HAL_InitTick+0x54>)
 8000fc2:	681a      	ldr	r2, [r3, #0]
 8000fc4:	4b12      	ldr	r3, [pc, #72]	@ (8001010 <HAL_InitTick+0x58>)
 8000fc6:	781b      	ldrb	r3, [r3, #0]
 8000fc8:	4619      	mov	r1, r3
 8000fca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fce:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f000 f95f 	bl	800129a <HAL_SYSTICK_Config>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d001      	beq.n	8000fe6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	e00e      	b.n	8001004 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	2b0f      	cmp	r3, #15
 8000fea:	d80a      	bhi.n	8001002 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fec:	2200      	movs	r2, #0
 8000fee:	6879      	ldr	r1, [r7, #4]
 8000ff0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ff4:	f000 f927 	bl	8001246 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ff8:	4a06      	ldr	r2, [pc, #24]	@ (8001014 <HAL_InitTick+0x5c>)
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ffe:	2300      	movs	r3, #0
 8001000:	e000      	b.n	8001004 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001002:	2301      	movs	r3, #1
}
 8001004:	4618      	mov	r0, r3
 8001006:	3708      	adds	r7, #8
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	20000040 	.word	0x20000040
 8001010:	20000048 	.word	0x20000048
 8001014:	20000044 	.word	0x20000044

08001018 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800101c:	4b05      	ldr	r3, [pc, #20]	@ (8001034 <HAL_IncTick+0x1c>)
 800101e:	781b      	ldrb	r3, [r3, #0]
 8001020:	461a      	mov	r2, r3
 8001022:	4b05      	ldr	r3, [pc, #20]	@ (8001038 <HAL_IncTick+0x20>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	4413      	add	r3, r2
 8001028:	4a03      	ldr	r2, [pc, #12]	@ (8001038 <HAL_IncTick+0x20>)
 800102a:	6013      	str	r3, [r2, #0]
}
 800102c:	bf00      	nop
 800102e:	46bd      	mov	sp, r7
 8001030:	bc80      	pop	{r7}
 8001032:	4770      	bx	lr
 8001034:	20000048 	.word	0x20000048
 8001038:	200002c4 	.word	0x200002c4

0800103c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0
  return uwTick;
 8001040:	4b02      	ldr	r3, [pc, #8]	@ (800104c <HAL_GetTick+0x10>)
 8001042:	681b      	ldr	r3, [r3, #0]
}
 8001044:	4618      	mov	r0, r3
 8001046:	46bd      	mov	sp, r7
 8001048:	bc80      	pop	{r7}
 800104a:	4770      	bx	lr
 800104c:	200002c4 	.word	0x200002c4

08001050 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b084      	sub	sp, #16
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001058:	f7ff fff0 	bl	800103c <HAL_GetTick>
 800105c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001068:	d005      	beq.n	8001076 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800106a:	4b0a      	ldr	r3, [pc, #40]	@ (8001094 <HAL_Delay+0x44>)
 800106c:	781b      	ldrb	r3, [r3, #0]
 800106e:	461a      	mov	r2, r3
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	4413      	add	r3, r2
 8001074:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001076:	bf00      	nop
 8001078:	f7ff ffe0 	bl	800103c <HAL_GetTick>
 800107c:	4602      	mov	r2, r0
 800107e:	68bb      	ldr	r3, [r7, #8]
 8001080:	1ad3      	subs	r3, r2, r3
 8001082:	68fa      	ldr	r2, [r7, #12]
 8001084:	429a      	cmp	r2, r3
 8001086:	d8f7      	bhi.n	8001078 <HAL_Delay+0x28>
  {
  }
}
 8001088:	bf00      	nop
 800108a:	bf00      	nop
 800108c:	3710      	adds	r7, #16
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	20000048 	.word	0x20000048

08001098 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001098:	b480      	push	{r7}
 800109a:	b085      	sub	sp, #20
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	f003 0307 	and.w	r3, r3, #7
 80010a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010a8:	4b0c      	ldr	r3, [pc, #48]	@ (80010dc <__NVIC_SetPriorityGrouping+0x44>)
 80010aa:	68db      	ldr	r3, [r3, #12]
 80010ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010ae:	68ba      	ldr	r2, [r7, #8]
 80010b0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80010b4:	4013      	ands	r3, r2
 80010b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010bc:	68bb      	ldr	r3, [r7, #8]
 80010be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010c0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80010c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80010c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010ca:	4a04      	ldr	r2, [pc, #16]	@ (80010dc <__NVIC_SetPriorityGrouping+0x44>)
 80010cc:	68bb      	ldr	r3, [r7, #8]
 80010ce:	60d3      	str	r3, [r2, #12]
}
 80010d0:	bf00      	nop
 80010d2:	3714      	adds	r7, #20
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bc80      	pop	{r7}
 80010d8:	4770      	bx	lr
 80010da:	bf00      	nop
 80010dc:	e000ed00 	.word	0xe000ed00

080010e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010e4:	4b04      	ldr	r3, [pc, #16]	@ (80010f8 <__NVIC_GetPriorityGrouping+0x18>)
 80010e6:	68db      	ldr	r3, [r3, #12]
 80010e8:	0a1b      	lsrs	r3, r3, #8
 80010ea:	f003 0307 	and.w	r3, r3, #7
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bc80      	pop	{r7}
 80010f4:	4770      	bx	lr
 80010f6:	bf00      	nop
 80010f8:	e000ed00 	.word	0xe000ed00

080010fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010fc:	b480      	push	{r7}
 80010fe:	b083      	sub	sp, #12
 8001100:	af00      	add	r7, sp, #0
 8001102:	4603      	mov	r3, r0
 8001104:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001106:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800110a:	2b00      	cmp	r3, #0
 800110c:	db0b      	blt.n	8001126 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800110e:	79fb      	ldrb	r3, [r7, #7]
 8001110:	f003 021f 	and.w	r2, r3, #31
 8001114:	4906      	ldr	r1, [pc, #24]	@ (8001130 <__NVIC_EnableIRQ+0x34>)
 8001116:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800111a:	095b      	lsrs	r3, r3, #5
 800111c:	2001      	movs	r0, #1
 800111e:	fa00 f202 	lsl.w	r2, r0, r2
 8001122:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001126:	bf00      	nop
 8001128:	370c      	adds	r7, #12
 800112a:	46bd      	mov	sp, r7
 800112c:	bc80      	pop	{r7}
 800112e:	4770      	bx	lr
 8001130:	e000e100 	.word	0xe000e100

08001134 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001134:	b480      	push	{r7}
 8001136:	b083      	sub	sp, #12
 8001138:	af00      	add	r7, sp, #0
 800113a:	4603      	mov	r3, r0
 800113c:	6039      	str	r1, [r7, #0]
 800113e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001140:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001144:	2b00      	cmp	r3, #0
 8001146:	db0a      	blt.n	800115e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	b2da      	uxtb	r2, r3
 800114c:	490c      	ldr	r1, [pc, #48]	@ (8001180 <__NVIC_SetPriority+0x4c>)
 800114e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001152:	0112      	lsls	r2, r2, #4
 8001154:	b2d2      	uxtb	r2, r2
 8001156:	440b      	add	r3, r1
 8001158:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800115c:	e00a      	b.n	8001174 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	b2da      	uxtb	r2, r3
 8001162:	4908      	ldr	r1, [pc, #32]	@ (8001184 <__NVIC_SetPriority+0x50>)
 8001164:	79fb      	ldrb	r3, [r7, #7]
 8001166:	f003 030f 	and.w	r3, r3, #15
 800116a:	3b04      	subs	r3, #4
 800116c:	0112      	lsls	r2, r2, #4
 800116e:	b2d2      	uxtb	r2, r2
 8001170:	440b      	add	r3, r1
 8001172:	761a      	strb	r2, [r3, #24]
}
 8001174:	bf00      	nop
 8001176:	370c      	adds	r7, #12
 8001178:	46bd      	mov	sp, r7
 800117a:	bc80      	pop	{r7}
 800117c:	4770      	bx	lr
 800117e:	bf00      	nop
 8001180:	e000e100 	.word	0xe000e100
 8001184:	e000ed00 	.word	0xe000ed00

08001188 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001188:	b480      	push	{r7}
 800118a:	b089      	sub	sp, #36	@ 0x24
 800118c:	af00      	add	r7, sp, #0
 800118e:	60f8      	str	r0, [r7, #12]
 8001190:	60b9      	str	r1, [r7, #8]
 8001192:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	f003 0307 	and.w	r3, r3, #7
 800119a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800119c:	69fb      	ldr	r3, [r7, #28]
 800119e:	f1c3 0307 	rsb	r3, r3, #7
 80011a2:	2b04      	cmp	r3, #4
 80011a4:	bf28      	it	cs
 80011a6:	2304      	movcs	r3, #4
 80011a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011aa:	69fb      	ldr	r3, [r7, #28]
 80011ac:	3304      	adds	r3, #4
 80011ae:	2b06      	cmp	r3, #6
 80011b0:	d902      	bls.n	80011b8 <NVIC_EncodePriority+0x30>
 80011b2:	69fb      	ldr	r3, [r7, #28]
 80011b4:	3b03      	subs	r3, #3
 80011b6:	e000      	b.n	80011ba <NVIC_EncodePriority+0x32>
 80011b8:	2300      	movs	r3, #0
 80011ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011bc:	f04f 32ff 	mov.w	r2, #4294967295
 80011c0:	69bb      	ldr	r3, [r7, #24]
 80011c2:	fa02 f303 	lsl.w	r3, r2, r3
 80011c6:	43da      	mvns	r2, r3
 80011c8:	68bb      	ldr	r3, [r7, #8]
 80011ca:	401a      	ands	r2, r3
 80011cc:	697b      	ldr	r3, [r7, #20]
 80011ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011d0:	f04f 31ff 	mov.w	r1, #4294967295
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	fa01 f303 	lsl.w	r3, r1, r3
 80011da:	43d9      	mvns	r1, r3
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011e0:	4313      	orrs	r3, r2
         );
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	3724      	adds	r7, #36	@ 0x24
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bc80      	pop	{r7}
 80011ea:	4770      	bx	lr

080011ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	3b01      	subs	r3, #1
 80011f8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80011fc:	d301      	bcc.n	8001202 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011fe:	2301      	movs	r3, #1
 8001200:	e00f      	b.n	8001222 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001202:	4a0a      	ldr	r2, [pc, #40]	@ (800122c <SysTick_Config+0x40>)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	3b01      	subs	r3, #1
 8001208:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800120a:	210f      	movs	r1, #15
 800120c:	f04f 30ff 	mov.w	r0, #4294967295
 8001210:	f7ff ff90 	bl	8001134 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001214:	4b05      	ldr	r3, [pc, #20]	@ (800122c <SysTick_Config+0x40>)
 8001216:	2200      	movs	r2, #0
 8001218:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800121a:	4b04      	ldr	r3, [pc, #16]	@ (800122c <SysTick_Config+0x40>)
 800121c:	2207      	movs	r2, #7
 800121e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001220:	2300      	movs	r3, #0
}
 8001222:	4618      	mov	r0, r3
 8001224:	3708      	adds	r7, #8
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	e000e010 	.word	0xe000e010

08001230 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001238:	6878      	ldr	r0, [r7, #4]
 800123a:	f7ff ff2d 	bl	8001098 <__NVIC_SetPriorityGrouping>
}
 800123e:	bf00      	nop
 8001240:	3708      	adds	r7, #8
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}

08001246 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001246:	b580      	push	{r7, lr}
 8001248:	b086      	sub	sp, #24
 800124a:	af00      	add	r7, sp, #0
 800124c:	4603      	mov	r3, r0
 800124e:	60b9      	str	r1, [r7, #8]
 8001250:	607a      	str	r2, [r7, #4]
 8001252:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001254:	2300      	movs	r3, #0
 8001256:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001258:	f7ff ff42 	bl	80010e0 <__NVIC_GetPriorityGrouping>
 800125c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800125e:	687a      	ldr	r2, [r7, #4]
 8001260:	68b9      	ldr	r1, [r7, #8]
 8001262:	6978      	ldr	r0, [r7, #20]
 8001264:	f7ff ff90 	bl	8001188 <NVIC_EncodePriority>
 8001268:	4602      	mov	r2, r0
 800126a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800126e:	4611      	mov	r1, r2
 8001270:	4618      	mov	r0, r3
 8001272:	f7ff ff5f 	bl	8001134 <__NVIC_SetPriority>
}
 8001276:	bf00      	nop
 8001278:	3718      	adds	r7, #24
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}

0800127e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800127e:	b580      	push	{r7, lr}
 8001280:	b082      	sub	sp, #8
 8001282:	af00      	add	r7, sp, #0
 8001284:	4603      	mov	r3, r0
 8001286:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001288:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800128c:	4618      	mov	r0, r3
 800128e:	f7ff ff35 	bl	80010fc <__NVIC_EnableIRQ>
}
 8001292:	bf00      	nop
 8001294:	3708      	adds	r7, #8
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}

0800129a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800129a:	b580      	push	{r7, lr}
 800129c:	b082      	sub	sp, #8
 800129e:	af00      	add	r7, sp, #0
 80012a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012a2:	6878      	ldr	r0, [r7, #4]
 80012a4:	f7ff ffa2 	bl	80011ec <SysTick_Config>
 80012a8:	4603      	mov	r3, r0
}
 80012aa:	4618      	mov	r0, r3
 80012ac:	3708      	adds	r7, #8
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
	...

080012b4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80012b4:	b480      	push	{r7}
 80012b6:	b085      	sub	sp, #20
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80012bc:	2300      	movs	r3, #0
 80012be:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d101      	bne.n	80012ca <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80012c6:	2301      	movs	r3, #1
 80012c8:	e043      	b.n	8001352 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	461a      	mov	r2, r3
 80012d0:	4b22      	ldr	r3, [pc, #136]	@ (800135c <HAL_DMA_Init+0xa8>)
 80012d2:	4413      	add	r3, r2
 80012d4:	4a22      	ldr	r2, [pc, #136]	@ (8001360 <HAL_DMA_Init+0xac>)
 80012d6:	fba2 2303 	umull	r2, r3, r2, r3
 80012da:	091b      	lsrs	r3, r3, #4
 80012dc:	009a      	lsls	r2, r3, #2
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	4a1f      	ldr	r2, [pc, #124]	@ (8001364 <HAL_DMA_Init+0xb0>)
 80012e6:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	2202      	movs	r2, #2
 80012ec:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80012fe:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8001302:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800130c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	68db      	ldr	r3, [r3, #12]
 8001312:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001318:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	695b      	ldr	r3, [r3, #20]
 800131e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001324:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	69db      	ldr	r3, [r3, #28]
 800132a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800132c:	68fa      	ldr	r2, [r7, #12]
 800132e:	4313      	orrs	r3, r2
 8001330:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	68fa      	ldr	r2, [r7, #12]
 8001338:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	2200      	movs	r2, #0
 800133e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	2201      	movs	r2, #1
 8001344:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	2200      	movs	r2, #0
 800134c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001350:	2300      	movs	r3, #0
}
 8001352:	4618      	mov	r0, r3
 8001354:	3714      	adds	r7, #20
 8001356:	46bd      	mov	sp, r7
 8001358:	bc80      	pop	{r7}
 800135a:	4770      	bx	lr
 800135c:	bffdfff8 	.word	0xbffdfff8
 8001360:	cccccccd 	.word	0xcccccccd
 8001364:	40020000 	.word	0x40020000

08001368 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b086      	sub	sp, #24
 800136c:	af00      	add	r7, sp, #0
 800136e:	60f8      	str	r0, [r7, #12]
 8001370:	60b9      	str	r1, [r7, #8]
 8001372:	607a      	str	r2, [r7, #4]
 8001374:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001376:	2300      	movs	r3, #0
 8001378:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001380:	2b01      	cmp	r3, #1
 8001382:	d101      	bne.n	8001388 <HAL_DMA_Start_IT+0x20>
 8001384:	2302      	movs	r3, #2
 8001386:	e04b      	b.n	8001420 <HAL_DMA_Start_IT+0xb8>
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	2201      	movs	r2, #1
 800138c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001396:	b2db      	uxtb	r3, r3
 8001398:	2b01      	cmp	r3, #1
 800139a:	d13a      	bne.n	8001412 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	2202      	movs	r2, #2
 80013a0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	2200      	movs	r2, #0
 80013a8:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	681a      	ldr	r2, [r3, #0]
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f022 0201 	bic.w	r2, r2, #1
 80013b8:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	687a      	ldr	r2, [r7, #4]
 80013be:	68b9      	ldr	r1, [r7, #8]
 80013c0:	68f8      	ldr	r0, [r7, #12]
 80013c2:	f000 f9eb 	bl	800179c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d008      	beq.n	80013e0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	681a      	ldr	r2, [r3, #0]
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f042 020e 	orr.w	r2, r2, #14
 80013dc:	601a      	str	r2, [r3, #0]
 80013de:	e00f      	b.n	8001400 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	681a      	ldr	r2, [r3, #0]
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f022 0204 	bic.w	r2, r2, #4
 80013ee:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	681a      	ldr	r2, [r3, #0]
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f042 020a 	orr.w	r2, r2, #10
 80013fe:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	681a      	ldr	r2, [r3, #0]
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f042 0201 	orr.w	r2, r2, #1
 800140e:	601a      	str	r2, [r3, #0]
 8001410:	e005      	b.n	800141e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	2200      	movs	r2, #0
 8001416:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800141a:	2302      	movs	r3, #2
 800141c:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800141e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001420:	4618      	mov	r0, r3
 8001422:	3718      	adds	r7, #24
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}

08001428 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001428:	b480      	push	{r7}
 800142a:	b085      	sub	sp, #20
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001430:	2300      	movs	r3, #0
 8001432:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800143a:	b2db      	uxtb	r3, r3
 800143c:	2b02      	cmp	r3, #2
 800143e:	d008      	beq.n	8001452 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2204      	movs	r2, #4
 8001444:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	2200      	movs	r2, #0
 800144a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800144e:	2301      	movs	r3, #1
 8001450:	e020      	b.n	8001494 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	681a      	ldr	r2, [r3, #0]
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f022 020e 	bic.w	r2, r2, #14
 8001460:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	681a      	ldr	r2, [r3, #0]
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f022 0201 	bic.w	r2, r2, #1
 8001470:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800147a:	2101      	movs	r1, #1
 800147c:	fa01 f202 	lsl.w	r2, r1, r2
 8001480:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	2201      	movs	r2, #1
 8001486:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	2200      	movs	r2, #0
 800148e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001492:	7bfb      	ldrb	r3, [r7, #15]
}
 8001494:	4618      	mov	r0, r3
 8001496:	3714      	adds	r7, #20
 8001498:	46bd      	mov	sp, r7
 800149a:	bc80      	pop	{r7}
 800149c:	4770      	bx	lr
	...

080014a0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b084      	sub	sp, #16
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80014a8:	2300      	movs	r3, #0
 80014aa:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80014b2:	b2db      	uxtb	r3, r3
 80014b4:	2b02      	cmp	r3, #2
 80014b6:	d005      	beq.n	80014c4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	2204      	movs	r2, #4
 80014bc:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 80014be:	2301      	movs	r3, #1
 80014c0:	73fb      	strb	r3, [r7, #15]
 80014c2:	e051      	b.n	8001568 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	681a      	ldr	r2, [r3, #0]
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f022 020e 	bic.w	r2, r2, #14
 80014d2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	681a      	ldr	r2, [r3, #0]
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f022 0201 	bic.w	r2, r2, #1
 80014e2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4a22      	ldr	r2, [pc, #136]	@ (8001574 <HAL_DMA_Abort_IT+0xd4>)
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d029      	beq.n	8001542 <HAL_DMA_Abort_IT+0xa2>
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	4a21      	ldr	r2, [pc, #132]	@ (8001578 <HAL_DMA_Abort_IT+0xd8>)
 80014f4:	4293      	cmp	r3, r2
 80014f6:	d022      	beq.n	800153e <HAL_DMA_Abort_IT+0x9e>
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4a1f      	ldr	r2, [pc, #124]	@ (800157c <HAL_DMA_Abort_IT+0xdc>)
 80014fe:	4293      	cmp	r3, r2
 8001500:	d01a      	beq.n	8001538 <HAL_DMA_Abort_IT+0x98>
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	4a1e      	ldr	r2, [pc, #120]	@ (8001580 <HAL_DMA_Abort_IT+0xe0>)
 8001508:	4293      	cmp	r3, r2
 800150a:	d012      	beq.n	8001532 <HAL_DMA_Abort_IT+0x92>
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4a1c      	ldr	r2, [pc, #112]	@ (8001584 <HAL_DMA_Abort_IT+0xe4>)
 8001512:	4293      	cmp	r3, r2
 8001514:	d00a      	beq.n	800152c <HAL_DMA_Abort_IT+0x8c>
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	4a1b      	ldr	r2, [pc, #108]	@ (8001588 <HAL_DMA_Abort_IT+0xe8>)
 800151c:	4293      	cmp	r3, r2
 800151e:	d102      	bne.n	8001526 <HAL_DMA_Abort_IT+0x86>
 8001520:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001524:	e00e      	b.n	8001544 <HAL_DMA_Abort_IT+0xa4>
 8001526:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800152a:	e00b      	b.n	8001544 <HAL_DMA_Abort_IT+0xa4>
 800152c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001530:	e008      	b.n	8001544 <HAL_DMA_Abort_IT+0xa4>
 8001532:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001536:	e005      	b.n	8001544 <HAL_DMA_Abort_IT+0xa4>
 8001538:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800153c:	e002      	b.n	8001544 <HAL_DMA_Abort_IT+0xa4>
 800153e:	2310      	movs	r3, #16
 8001540:	e000      	b.n	8001544 <HAL_DMA_Abort_IT+0xa4>
 8001542:	2301      	movs	r3, #1
 8001544:	4a11      	ldr	r2, [pc, #68]	@ (800158c <HAL_DMA_Abort_IT+0xec>)
 8001546:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	2201      	movs	r2, #1
 800154c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	2200      	movs	r2, #0
 8001554:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800155c:	2b00      	cmp	r3, #0
 800155e:	d003      	beq.n	8001568 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001564:	6878      	ldr	r0, [r7, #4]
 8001566:	4798      	blx	r3
    } 
  }
  return status;
 8001568:	7bfb      	ldrb	r3, [r7, #15]
}
 800156a:	4618      	mov	r0, r3
 800156c:	3710      	adds	r7, #16
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	40020008 	.word	0x40020008
 8001578:	4002001c 	.word	0x4002001c
 800157c:	40020030 	.word	0x40020030
 8001580:	40020044 	.word	0x40020044
 8001584:	40020058 	.word	0x40020058
 8001588:	4002006c 	.word	0x4002006c
 800158c:	40020000 	.word	0x40020000

08001590 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b084      	sub	sp, #16
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015ac:	2204      	movs	r2, #4
 80015ae:	409a      	lsls	r2, r3
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	4013      	ands	r3, r2
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d04f      	beq.n	8001658 <HAL_DMA_IRQHandler+0xc8>
 80015b8:	68bb      	ldr	r3, [r7, #8]
 80015ba:	f003 0304 	and.w	r3, r3, #4
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d04a      	beq.n	8001658 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f003 0320 	and.w	r3, r3, #32
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d107      	bne.n	80015e0 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	681a      	ldr	r2, [r3, #0]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f022 0204 	bic.w	r2, r2, #4
 80015de:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4a66      	ldr	r2, [pc, #408]	@ (8001780 <HAL_DMA_IRQHandler+0x1f0>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d029      	beq.n	800163e <HAL_DMA_IRQHandler+0xae>
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	4a65      	ldr	r2, [pc, #404]	@ (8001784 <HAL_DMA_IRQHandler+0x1f4>)
 80015f0:	4293      	cmp	r3, r2
 80015f2:	d022      	beq.n	800163a <HAL_DMA_IRQHandler+0xaa>
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4a63      	ldr	r2, [pc, #396]	@ (8001788 <HAL_DMA_IRQHandler+0x1f8>)
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d01a      	beq.n	8001634 <HAL_DMA_IRQHandler+0xa4>
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4a62      	ldr	r2, [pc, #392]	@ (800178c <HAL_DMA_IRQHandler+0x1fc>)
 8001604:	4293      	cmp	r3, r2
 8001606:	d012      	beq.n	800162e <HAL_DMA_IRQHandler+0x9e>
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4a60      	ldr	r2, [pc, #384]	@ (8001790 <HAL_DMA_IRQHandler+0x200>)
 800160e:	4293      	cmp	r3, r2
 8001610:	d00a      	beq.n	8001628 <HAL_DMA_IRQHandler+0x98>
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	4a5f      	ldr	r2, [pc, #380]	@ (8001794 <HAL_DMA_IRQHandler+0x204>)
 8001618:	4293      	cmp	r3, r2
 800161a:	d102      	bne.n	8001622 <HAL_DMA_IRQHandler+0x92>
 800161c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001620:	e00e      	b.n	8001640 <HAL_DMA_IRQHandler+0xb0>
 8001622:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8001626:	e00b      	b.n	8001640 <HAL_DMA_IRQHandler+0xb0>
 8001628:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800162c:	e008      	b.n	8001640 <HAL_DMA_IRQHandler+0xb0>
 800162e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001632:	e005      	b.n	8001640 <HAL_DMA_IRQHandler+0xb0>
 8001634:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001638:	e002      	b.n	8001640 <HAL_DMA_IRQHandler+0xb0>
 800163a:	2340      	movs	r3, #64	@ 0x40
 800163c:	e000      	b.n	8001640 <HAL_DMA_IRQHandler+0xb0>
 800163e:	2304      	movs	r3, #4
 8001640:	4a55      	ldr	r2, [pc, #340]	@ (8001798 <HAL_DMA_IRQHandler+0x208>)
 8001642:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001648:	2b00      	cmp	r3, #0
 800164a:	f000 8094 	beq.w	8001776 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001652:	6878      	ldr	r0, [r7, #4]
 8001654:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001656:	e08e      	b.n	8001776 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800165c:	2202      	movs	r2, #2
 800165e:	409a      	lsls	r2, r3
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	4013      	ands	r3, r2
 8001664:	2b00      	cmp	r3, #0
 8001666:	d056      	beq.n	8001716 <HAL_DMA_IRQHandler+0x186>
 8001668:	68bb      	ldr	r3, [r7, #8]
 800166a:	f003 0302 	and.w	r3, r3, #2
 800166e:	2b00      	cmp	r3, #0
 8001670:	d051      	beq.n	8001716 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f003 0320 	and.w	r3, r3, #32
 800167c:	2b00      	cmp	r3, #0
 800167e:	d10b      	bne.n	8001698 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	681a      	ldr	r2, [r3, #0]
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f022 020a 	bic.w	r2, r2, #10
 800168e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	2201      	movs	r2, #1
 8001694:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4a38      	ldr	r2, [pc, #224]	@ (8001780 <HAL_DMA_IRQHandler+0x1f0>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d029      	beq.n	80016f6 <HAL_DMA_IRQHandler+0x166>
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4a37      	ldr	r2, [pc, #220]	@ (8001784 <HAL_DMA_IRQHandler+0x1f4>)
 80016a8:	4293      	cmp	r3, r2
 80016aa:	d022      	beq.n	80016f2 <HAL_DMA_IRQHandler+0x162>
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a35      	ldr	r2, [pc, #212]	@ (8001788 <HAL_DMA_IRQHandler+0x1f8>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d01a      	beq.n	80016ec <HAL_DMA_IRQHandler+0x15c>
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4a34      	ldr	r2, [pc, #208]	@ (800178c <HAL_DMA_IRQHandler+0x1fc>)
 80016bc:	4293      	cmp	r3, r2
 80016be:	d012      	beq.n	80016e6 <HAL_DMA_IRQHandler+0x156>
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4a32      	ldr	r2, [pc, #200]	@ (8001790 <HAL_DMA_IRQHandler+0x200>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d00a      	beq.n	80016e0 <HAL_DMA_IRQHandler+0x150>
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4a31      	ldr	r2, [pc, #196]	@ (8001794 <HAL_DMA_IRQHandler+0x204>)
 80016d0:	4293      	cmp	r3, r2
 80016d2:	d102      	bne.n	80016da <HAL_DMA_IRQHandler+0x14a>
 80016d4:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80016d8:	e00e      	b.n	80016f8 <HAL_DMA_IRQHandler+0x168>
 80016da:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80016de:	e00b      	b.n	80016f8 <HAL_DMA_IRQHandler+0x168>
 80016e0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80016e4:	e008      	b.n	80016f8 <HAL_DMA_IRQHandler+0x168>
 80016e6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80016ea:	e005      	b.n	80016f8 <HAL_DMA_IRQHandler+0x168>
 80016ec:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80016f0:	e002      	b.n	80016f8 <HAL_DMA_IRQHandler+0x168>
 80016f2:	2320      	movs	r3, #32
 80016f4:	e000      	b.n	80016f8 <HAL_DMA_IRQHandler+0x168>
 80016f6:	2302      	movs	r3, #2
 80016f8:	4a27      	ldr	r2, [pc, #156]	@ (8001798 <HAL_DMA_IRQHandler+0x208>)
 80016fa:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2200      	movs	r2, #0
 8001700:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001708:	2b00      	cmp	r3, #0
 800170a:	d034      	beq.n	8001776 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001710:	6878      	ldr	r0, [r7, #4]
 8001712:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001714:	e02f      	b.n	8001776 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800171a:	2208      	movs	r2, #8
 800171c:	409a      	lsls	r2, r3
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	4013      	ands	r3, r2
 8001722:	2b00      	cmp	r3, #0
 8001724:	d028      	beq.n	8001778 <HAL_DMA_IRQHandler+0x1e8>
 8001726:	68bb      	ldr	r3, [r7, #8]
 8001728:	f003 0308 	and.w	r3, r3, #8
 800172c:	2b00      	cmp	r3, #0
 800172e:	d023      	beq.n	8001778 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	681a      	ldr	r2, [r3, #0]
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f022 020e 	bic.w	r2, r2, #14
 800173e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001748:	2101      	movs	r1, #1
 800174a:	fa01 f202 	lsl.w	r2, r1, r2
 800174e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2201      	movs	r2, #1
 8001754:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2201      	movs	r2, #1
 800175a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	2200      	movs	r2, #0
 8001762:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800176a:	2b00      	cmp	r3, #0
 800176c:	d004      	beq.n	8001778 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001772:	6878      	ldr	r0, [r7, #4]
 8001774:	4798      	blx	r3
    }
  }
  return;
 8001776:	bf00      	nop
 8001778:	bf00      	nop
}
 800177a:	3710      	adds	r7, #16
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}
 8001780:	40020008 	.word	0x40020008
 8001784:	4002001c 	.word	0x4002001c
 8001788:	40020030 	.word	0x40020030
 800178c:	40020044 	.word	0x40020044
 8001790:	40020058 	.word	0x40020058
 8001794:	4002006c 	.word	0x4002006c
 8001798:	40020000 	.word	0x40020000

0800179c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800179c:	b480      	push	{r7}
 800179e:	b085      	sub	sp, #20
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	60f8      	str	r0, [r7, #12]
 80017a4:	60b9      	str	r1, [r7, #8]
 80017a6:	607a      	str	r2, [r7, #4]
 80017a8:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80017b2:	2101      	movs	r1, #1
 80017b4:	fa01 f202 	lsl.w	r2, r1, r2
 80017b8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	683a      	ldr	r2, [r7, #0]
 80017c0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	2b10      	cmp	r3, #16
 80017c8:	d108      	bne.n	80017dc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	687a      	ldr	r2, [r7, #4]
 80017d0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	68ba      	ldr	r2, [r7, #8]
 80017d8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80017da:	e007      	b.n	80017ec <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	68ba      	ldr	r2, [r7, #8]
 80017e2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	687a      	ldr	r2, [r7, #4]
 80017ea:	60da      	str	r2, [r3, #12]
}
 80017ec:	bf00      	nop
 80017ee:	3714      	adds	r7, #20
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bc80      	pop	{r7}
 80017f4:	4770      	bx	lr
	...

080017f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b08b      	sub	sp, #44	@ 0x2c
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
 8001800:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001802:	2300      	movs	r3, #0
 8001804:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001806:	2300      	movs	r3, #0
 8001808:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800180a:	e169      	b.n	8001ae0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800180c:	2201      	movs	r2, #1
 800180e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001810:	fa02 f303 	lsl.w	r3, r2, r3
 8001814:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	69fa      	ldr	r2, [r7, #28]
 800181c:	4013      	ands	r3, r2
 800181e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001820:	69ba      	ldr	r2, [r7, #24]
 8001822:	69fb      	ldr	r3, [r7, #28]
 8001824:	429a      	cmp	r2, r3
 8001826:	f040 8158 	bne.w	8001ada <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	4a9a      	ldr	r2, [pc, #616]	@ (8001a98 <HAL_GPIO_Init+0x2a0>)
 8001830:	4293      	cmp	r3, r2
 8001832:	d05e      	beq.n	80018f2 <HAL_GPIO_Init+0xfa>
 8001834:	4a98      	ldr	r2, [pc, #608]	@ (8001a98 <HAL_GPIO_Init+0x2a0>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d875      	bhi.n	8001926 <HAL_GPIO_Init+0x12e>
 800183a:	4a98      	ldr	r2, [pc, #608]	@ (8001a9c <HAL_GPIO_Init+0x2a4>)
 800183c:	4293      	cmp	r3, r2
 800183e:	d058      	beq.n	80018f2 <HAL_GPIO_Init+0xfa>
 8001840:	4a96      	ldr	r2, [pc, #600]	@ (8001a9c <HAL_GPIO_Init+0x2a4>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d86f      	bhi.n	8001926 <HAL_GPIO_Init+0x12e>
 8001846:	4a96      	ldr	r2, [pc, #600]	@ (8001aa0 <HAL_GPIO_Init+0x2a8>)
 8001848:	4293      	cmp	r3, r2
 800184a:	d052      	beq.n	80018f2 <HAL_GPIO_Init+0xfa>
 800184c:	4a94      	ldr	r2, [pc, #592]	@ (8001aa0 <HAL_GPIO_Init+0x2a8>)
 800184e:	4293      	cmp	r3, r2
 8001850:	d869      	bhi.n	8001926 <HAL_GPIO_Init+0x12e>
 8001852:	4a94      	ldr	r2, [pc, #592]	@ (8001aa4 <HAL_GPIO_Init+0x2ac>)
 8001854:	4293      	cmp	r3, r2
 8001856:	d04c      	beq.n	80018f2 <HAL_GPIO_Init+0xfa>
 8001858:	4a92      	ldr	r2, [pc, #584]	@ (8001aa4 <HAL_GPIO_Init+0x2ac>)
 800185a:	4293      	cmp	r3, r2
 800185c:	d863      	bhi.n	8001926 <HAL_GPIO_Init+0x12e>
 800185e:	4a92      	ldr	r2, [pc, #584]	@ (8001aa8 <HAL_GPIO_Init+0x2b0>)
 8001860:	4293      	cmp	r3, r2
 8001862:	d046      	beq.n	80018f2 <HAL_GPIO_Init+0xfa>
 8001864:	4a90      	ldr	r2, [pc, #576]	@ (8001aa8 <HAL_GPIO_Init+0x2b0>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d85d      	bhi.n	8001926 <HAL_GPIO_Init+0x12e>
 800186a:	2b12      	cmp	r3, #18
 800186c:	d82a      	bhi.n	80018c4 <HAL_GPIO_Init+0xcc>
 800186e:	2b12      	cmp	r3, #18
 8001870:	d859      	bhi.n	8001926 <HAL_GPIO_Init+0x12e>
 8001872:	a201      	add	r2, pc, #4	@ (adr r2, 8001878 <HAL_GPIO_Init+0x80>)
 8001874:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001878:	080018f3 	.word	0x080018f3
 800187c:	080018cd 	.word	0x080018cd
 8001880:	080018df 	.word	0x080018df
 8001884:	08001921 	.word	0x08001921
 8001888:	08001927 	.word	0x08001927
 800188c:	08001927 	.word	0x08001927
 8001890:	08001927 	.word	0x08001927
 8001894:	08001927 	.word	0x08001927
 8001898:	08001927 	.word	0x08001927
 800189c:	08001927 	.word	0x08001927
 80018a0:	08001927 	.word	0x08001927
 80018a4:	08001927 	.word	0x08001927
 80018a8:	08001927 	.word	0x08001927
 80018ac:	08001927 	.word	0x08001927
 80018b0:	08001927 	.word	0x08001927
 80018b4:	08001927 	.word	0x08001927
 80018b8:	08001927 	.word	0x08001927
 80018bc:	080018d5 	.word	0x080018d5
 80018c0:	080018e9 	.word	0x080018e9
 80018c4:	4a79      	ldr	r2, [pc, #484]	@ (8001aac <HAL_GPIO_Init+0x2b4>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d013      	beq.n	80018f2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80018ca:	e02c      	b.n	8001926 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	68db      	ldr	r3, [r3, #12]
 80018d0:	623b      	str	r3, [r7, #32]
          break;
 80018d2:	e029      	b.n	8001928 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	68db      	ldr	r3, [r3, #12]
 80018d8:	3304      	adds	r3, #4
 80018da:	623b      	str	r3, [r7, #32]
          break;
 80018dc:	e024      	b.n	8001928 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	68db      	ldr	r3, [r3, #12]
 80018e2:	3308      	adds	r3, #8
 80018e4:	623b      	str	r3, [r7, #32]
          break;
 80018e6:	e01f      	b.n	8001928 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	68db      	ldr	r3, [r3, #12]
 80018ec:	330c      	adds	r3, #12
 80018ee:	623b      	str	r3, [r7, #32]
          break;
 80018f0:	e01a      	b.n	8001928 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	689b      	ldr	r3, [r3, #8]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d102      	bne.n	8001900 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80018fa:	2304      	movs	r3, #4
 80018fc:	623b      	str	r3, [r7, #32]
          break;
 80018fe:	e013      	b.n	8001928 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	689b      	ldr	r3, [r3, #8]
 8001904:	2b01      	cmp	r3, #1
 8001906:	d105      	bne.n	8001914 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001908:	2308      	movs	r3, #8
 800190a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	69fa      	ldr	r2, [r7, #28]
 8001910:	611a      	str	r2, [r3, #16]
          break;
 8001912:	e009      	b.n	8001928 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001914:	2308      	movs	r3, #8
 8001916:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	69fa      	ldr	r2, [r7, #28]
 800191c:	615a      	str	r2, [r3, #20]
          break;
 800191e:	e003      	b.n	8001928 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001920:	2300      	movs	r3, #0
 8001922:	623b      	str	r3, [r7, #32]
          break;
 8001924:	e000      	b.n	8001928 <HAL_GPIO_Init+0x130>
          break;
 8001926:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001928:	69bb      	ldr	r3, [r7, #24]
 800192a:	2bff      	cmp	r3, #255	@ 0xff
 800192c:	d801      	bhi.n	8001932 <HAL_GPIO_Init+0x13a>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	e001      	b.n	8001936 <HAL_GPIO_Init+0x13e>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	3304      	adds	r3, #4
 8001936:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001938:	69bb      	ldr	r3, [r7, #24]
 800193a:	2bff      	cmp	r3, #255	@ 0xff
 800193c:	d802      	bhi.n	8001944 <HAL_GPIO_Init+0x14c>
 800193e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001940:	009b      	lsls	r3, r3, #2
 8001942:	e002      	b.n	800194a <HAL_GPIO_Init+0x152>
 8001944:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001946:	3b08      	subs	r3, #8
 8001948:	009b      	lsls	r3, r3, #2
 800194a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	681a      	ldr	r2, [r3, #0]
 8001950:	210f      	movs	r1, #15
 8001952:	693b      	ldr	r3, [r7, #16]
 8001954:	fa01 f303 	lsl.w	r3, r1, r3
 8001958:	43db      	mvns	r3, r3
 800195a:	401a      	ands	r2, r3
 800195c:	6a39      	ldr	r1, [r7, #32]
 800195e:	693b      	ldr	r3, [r7, #16]
 8001960:	fa01 f303 	lsl.w	r3, r1, r3
 8001964:	431a      	orrs	r2, r3
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001972:	2b00      	cmp	r3, #0
 8001974:	f000 80b1 	beq.w	8001ada <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001978:	4b4d      	ldr	r3, [pc, #308]	@ (8001ab0 <HAL_GPIO_Init+0x2b8>)
 800197a:	699b      	ldr	r3, [r3, #24]
 800197c:	4a4c      	ldr	r2, [pc, #304]	@ (8001ab0 <HAL_GPIO_Init+0x2b8>)
 800197e:	f043 0301 	orr.w	r3, r3, #1
 8001982:	6193      	str	r3, [r2, #24]
 8001984:	4b4a      	ldr	r3, [pc, #296]	@ (8001ab0 <HAL_GPIO_Init+0x2b8>)
 8001986:	699b      	ldr	r3, [r3, #24]
 8001988:	f003 0301 	and.w	r3, r3, #1
 800198c:	60bb      	str	r3, [r7, #8]
 800198e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001990:	4a48      	ldr	r2, [pc, #288]	@ (8001ab4 <HAL_GPIO_Init+0x2bc>)
 8001992:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001994:	089b      	lsrs	r3, r3, #2
 8001996:	3302      	adds	r3, #2
 8001998:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800199c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800199e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019a0:	f003 0303 	and.w	r3, r3, #3
 80019a4:	009b      	lsls	r3, r3, #2
 80019a6:	220f      	movs	r2, #15
 80019a8:	fa02 f303 	lsl.w	r3, r2, r3
 80019ac:	43db      	mvns	r3, r3
 80019ae:	68fa      	ldr	r2, [r7, #12]
 80019b0:	4013      	ands	r3, r2
 80019b2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	4a40      	ldr	r2, [pc, #256]	@ (8001ab8 <HAL_GPIO_Init+0x2c0>)
 80019b8:	4293      	cmp	r3, r2
 80019ba:	d013      	beq.n	80019e4 <HAL_GPIO_Init+0x1ec>
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	4a3f      	ldr	r2, [pc, #252]	@ (8001abc <HAL_GPIO_Init+0x2c4>)
 80019c0:	4293      	cmp	r3, r2
 80019c2:	d00d      	beq.n	80019e0 <HAL_GPIO_Init+0x1e8>
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	4a3e      	ldr	r2, [pc, #248]	@ (8001ac0 <HAL_GPIO_Init+0x2c8>)
 80019c8:	4293      	cmp	r3, r2
 80019ca:	d007      	beq.n	80019dc <HAL_GPIO_Init+0x1e4>
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	4a3d      	ldr	r2, [pc, #244]	@ (8001ac4 <HAL_GPIO_Init+0x2cc>)
 80019d0:	4293      	cmp	r3, r2
 80019d2:	d101      	bne.n	80019d8 <HAL_GPIO_Init+0x1e0>
 80019d4:	2303      	movs	r3, #3
 80019d6:	e006      	b.n	80019e6 <HAL_GPIO_Init+0x1ee>
 80019d8:	2304      	movs	r3, #4
 80019da:	e004      	b.n	80019e6 <HAL_GPIO_Init+0x1ee>
 80019dc:	2302      	movs	r3, #2
 80019de:	e002      	b.n	80019e6 <HAL_GPIO_Init+0x1ee>
 80019e0:	2301      	movs	r3, #1
 80019e2:	e000      	b.n	80019e6 <HAL_GPIO_Init+0x1ee>
 80019e4:	2300      	movs	r3, #0
 80019e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80019e8:	f002 0203 	and.w	r2, r2, #3
 80019ec:	0092      	lsls	r2, r2, #2
 80019ee:	4093      	lsls	r3, r2
 80019f0:	68fa      	ldr	r2, [r7, #12]
 80019f2:	4313      	orrs	r3, r2
 80019f4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80019f6:	492f      	ldr	r1, [pc, #188]	@ (8001ab4 <HAL_GPIO_Init+0x2bc>)
 80019f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019fa:	089b      	lsrs	r3, r3, #2
 80019fc:	3302      	adds	r3, #2
 80019fe:	68fa      	ldr	r2, [r7, #12]
 8001a00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d006      	beq.n	8001a1e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001a10:	4b2d      	ldr	r3, [pc, #180]	@ (8001ac8 <HAL_GPIO_Init+0x2d0>)
 8001a12:	689a      	ldr	r2, [r3, #8]
 8001a14:	492c      	ldr	r1, [pc, #176]	@ (8001ac8 <HAL_GPIO_Init+0x2d0>)
 8001a16:	69bb      	ldr	r3, [r7, #24]
 8001a18:	4313      	orrs	r3, r2
 8001a1a:	608b      	str	r3, [r1, #8]
 8001a1c:	e006      	b.n	8001a2c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001a1e:	4b2a      	ldr	r3, [pc, #168]	@ (8001ac8 <HAL_GPIO_Init+0x2d0>)
 8001a20:	689a      	ldr	r2, [r3, #8]
 8001a22:	69bb      	ldr	r3, [r7, #24]
 8001a24:	43db      	mvns	r3, r3
 8001a26:	4928      	ldr	r1, [pc, #160]	@ (8001ac8 <HAL_GPIO_Init+0x2d0>)
 8001a28:	4013      	ands	r3, r2
 8001a2a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d006      	beq.n	8001a46 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001a38:	4b23      	ldr	r3, [pc, #140]	@ (8001ac8 <HAL_GPIO_Init+0x2d0>)
 8001a3a:	68da      	ldr	r2, [r3, #12]
 8001a3c:	4922      	ldr	r1, [pc, #136]	@ (8001ac8 <HAL_GPIO_Init+0x2d0>)
 8001a3e:	69bb      	ldr	r3, [r7, #24]
 8001a40:	4313      	orrs	r3, r2
 8001a42:	60cb      	str	r3, [r1, #12]
 8001a44:	e006      	b.n	8001a54 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001a46:	4b20      	ldr	r3, [pc, #128]	@ (8001ac8 <HAL_GPIO_Init+0x2d0>)
 8001a48:	68da      	ldr	r2, [r3, #12]
 8001a4a:	69bb      	ldr	r3, [r7, #24]
 8001a4c:	43db      	mvns	r3, r3
 8001a4e:	491e      	ldr	r1, [pc, #120]	@ (8001ac8 <HAL_GPIO_Init+0x2d0>)
 8001a50:	4013      	ands	r3, r2
 8001a52:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d006      	beq.n	8001a6e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001a60:	4b19      	ldr	r3, [pc, #100]	@ (8001ac8 <HAL_GPIO_Init+0x2d0>)
 8001a62:	685a      	ldr	r2, [r3, #4]
 8001a64:	4918      	ldr	r1, [pc, #96]	@ (8001ac8 <HAL_GPIO_Init+0x2d0>)
 8001a66:	69bb      	ldr	r3, [r7, #24]
 8001a68:	4313      	orrs	r3, r2
 8001a6a:	604b      	str	r3, [r1, #4]
 8001a6c:	e006      	b.n	8001a7c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001a6e:	4b16      	ldr	r3, [pc, #88]	@ (8001ac8 <HAL_GPIO_Init+0x2d0>)
 8001a70:	685a      	ldr	r2, [r3, #4]
 8001a72:	69bb      	ldr	r3, [r7, #24]
 8001a74:	43db      	mvns	r3, r3
 8001a76:	4914      	ldr	r1, [pc, #80]	@ (8001ac8 <HAL_GPIO_Init+0x2d0>)
 8001a78:	4013      	ands	r3, r2
 8001a7a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d021      	beq.n	8001acc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001a88:	4b0f      	ldr	r3, [pc, #60]	@ (8001ac8 <HAL_GPIO_Init+0x2d0>)
 8001a8a:	681a      	ldr	r2, [r3, #0]
 8001a8c:	490e      	ldr	r1, [pc, #56]	@ (8001ac8 <HAL_GPIO_Init+0x2d0>)
 8001a8e:	69bb      	ldr	r3, [r7, #24]
 8001a90:	4313      	orrs	r3, r2
 8001a92:	600b      	str	r3, [r1, #0]
 8001a94:	e021      	b.n	8001ada <HAL_GPIO_Init+0x2e2>
 8001a96:	bf00      	nop
 8001a98:	10320000 	.word	0x10320000
 8001a9c:	10310000 	.word	0x10310000
 8001aa0:	10220000 	.word	0x10220000
 8001aa4:	10210000 	.word	0x10210000
 8001aa8:	10120000 	.word	0x10120000
 8001aac:	10110000 	.word	0x10110000
 8001ab0:	40021000 	.word	0x40021000
 8001ab4:	40010000 	.word	0x40010000
 8001ab8:	40010800 	.word	0x40010800
 8001abc:	40010c00 	.word	0x40010c00
 8001ac0:	40011000 	.word	0x40011000
 8001ac4:	40011400 	.word	0x40011400
 8001ac8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001acc:	4b0b      	ldr	r3, [pc, #44]	@ (8001afc <HAL_GPIO_Init+0x304>)
 8001ace:	681a      	ldr	r2, [r3, #0]
 8001ad0:	69bb      	ldr	r3, [r7, #24]
 8001ad2:	43db      	mvns	r3, r3
 8001ad4:	4909      	ldr	r1, [pc, #36]	@ (8001afc <HAL_GPIO_Init+0x304>)
 8001ad6:	4013      	ands	r3, r2
 8001ad8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001ada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001adc:	3301      	adds	r3, #1
 8001ade:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	681a      	ldr	r2, [r3, #0]
 8001ae4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ae6:	fa22 f303 	lsr.w	r3, r2, r3
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	f47f ae8e 	bne.w	800180c <HAL_GPIO_Init+0x14>
  }
}
 8001af0:	bf00      	nop
 8001af2:	bf00      	nop
 8001af4:	372c      	adds	r7, #44	@ 0x2c
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bc80      	pop	{r7}
 8001afa:	4770      	bx	lr
 8001afc:	40010400 	.word	0x40010400

08001b00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b083      	sub	sp, #12
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
 8001b08:	460b      	mov	r3, r1
 8001b0a:	807b      	strh	r3, [r7, #2]
 8001b0c:	4613      	mov	r3, r2
 8001b0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b10:	787b      	ldrb	r3, [r7, #1]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d003      	beq.n	8001b1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b16:	887a      	ldrh	r2, [r7, #2]
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001b1c:	e003      	b.n	8001b26 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001b1e:	887b      	ldrh	r3, [r7, #2]
 8001b20:	041a      	lsls	r2, r3, #16
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	611a      	str	r2, [r3, #16]
}
 8001b26:	bf00      	nop
 8001b28:	370c      	adds	r7, #12
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bc80      	pop	{r7}
 8001b2e:	4770      	bx	lr

08001b30 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b082      	sub	sp, #8
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	4603      	mov	r3, r0
 8001b38:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001b3a:	4b08      	ldr	r3, [pc, #32]	@ (8001b5c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b3c:	695a      	ldr	r2, [r3, #20]
 8001b3e:	88fb      	ldrh	r3, [r7, #6]
 8001b40:	4013      	ands	r3, r2
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d006      	beq.n	8001b54 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001b46:	4a05      	ldr	r2, [pc, #20]	@ (8001b5c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b48:	88fb      	ldrh	r3, [r7, #6]
 8001b4a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001b4c:	88fb      	ldrh	r3, [r7, #6]
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f7fe ff98 	bl	8000a84 <HAL_GPIO_EXTI_Callback>
  }
}
 8001b54:	bf00      	nop
 8001b56:	3708      	adds	r7, #8
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	40010400 	.word	0x40010400

08001b60 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b084      	sub	sp, #16
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d101      	bne.n	8001b72 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e12b      	b.n	8001dca <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001b78:	b2db      	uxtb	r3, r3
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d106      	bne.n	8001b8c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2200      	movs	r2, #0
 8001b82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001b86:	6878      	ldr	r0, [r7, #4]
 8001b88:	f7fe fbee 	bl	8000368 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2224      	movs	r2, #36	@ 0x24
 8001b90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	681a      	ldr	r2, [r3, #0]
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f022 0201 	bic.w	r2, r2, #1
 8001ba2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	681a      	ldr	r2, [r3, #0]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001bb2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	681a      	ldr	r2, [r3, #0]
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001bc2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001bc4:	f001 f84e 	bl	8002c64 <HAL_RCC_GetPCLK1Freq>
 8001bc8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	4a81      	ldr	r2, [pc, #516]	@ (8001dd4 <HAL_I2C_Init+0x274>)
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d807      	bhi.n	8001be4 <HAL_I2C_Init+0x84>
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	4a80      	ldr	r2, [pc, #512]	@ (8001dd8 <HAL_I2C_Init+0x278>)
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	bf94      	ite	ls
 8001bdc:	2301      	movls	r3, #1
 8001bde:	2300      	movhi	r3, #0
 8001be0:	b2db      	uxtb	r3, r3
 8001be2:	e006      	b.n	8001bf2 <HAL_I2C_Init+0x92>
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	4a7d      	ldr	r2, [pc, #500]	@ (8001ddc <HAL_I2C_Init+0x27c>)
 8001be8:	4293      	cmp	r3, r2
 8001bea:	bf94      	ite	ls
 8001bec:	2301      	movls	r3, #1
 8001bee:	2300      	movhi	r3, #0
 8001bf0:	b2db      	uxtb	r3, r3
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d001      	beq.n	8001bfa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e0e7      	b.n	8001dca <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	4a78      	ldr	r2, [pc, #480]	@ (8001de0 <HAL_I2C_Init+0x280>)
 8001bfe:	fba2 2303 	umull	r2, r3, r2, r3
 8001c02:	0c9b      	lsrs	r3, r3, #18
 8001c04:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	68ba      	ldr	r2, [r7, #8]
 8001c16:	430a      	orrs	r2, r1
 8001c18:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	6a1b      	ldr	r3, [r3, #32]
 8001c20:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	4a6a      	ldr	r2, [pc, #424]	@ (8001dd4 <HAL_I2C_Init+0x274>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d802      	bhi.n	8001c34 <HAL_I2C_Init+0xd4>
 8001c2e:	68bb      	ldr	r3, [r7, #8]
 8001c30:	3301      	adds	r3, #1
 8001c32:	e009      	b.n	8001c48 <HAL_I2C_Init+0xe8>
 8001c34:	68bb      	ldr	r3, [r7, #8]
 8001c36:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001c3a:	fb02 f303 	mul.w	r3, r2, r3
 8001c3e:	4a69      	ldr	r2, [pc, #420]	@ (8001de4 <HAL_I2C_Init+0x284>)
 8001c40:	fba2 2303 	umull	r2, r3, r2, r3
 8001c44:	099b      	lsrs	r3, r3, #6
 8001c46:	3301      	adds	r3, #1
 8001c48:	687a      	ldr	r2, [r7, #4]
 8001c4a:	6812      	ldr	r2, [r2, #0]
 8001c4c:	430b      	orrs	r3, r1
 8001c4e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	69db      	ldr	r3, [r3, #28]
 8001c56:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001c5a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	495c      	ldr	r1, [pc, #368]	@ (8001dd4 <HAL_I2C_Init+0x274>)
 8001c64:	428b      	cmp	r3, r1
 8001c66:	d819      	bhi.n	8001c9c <HAL_I2C_Init+0x13c>
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	1e59      	subs	r1, r3, #1
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	005b      	lsls	r3, r3, #1
 8001c72:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c76:	1c59      	adds	r1, r3, #1
 8001c78:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001c7c:	400b      	ands	r3, r1
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d00a      	beq.n	8001c98 <HAL_I2C_Init+0x138>
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	1e59      	subs	r1, r3, #1
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	005b      	lsls	r3, r3, #1
 8001c8c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c90:	3301      	adds	r3, #1
 8001c92:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c96:	e051      	b.n	8001d3c <HAL_I2C_Init+0x1dc>
 8001c98:	2304      	movs	r3, #4
 8001c9a:	e04f      	b.n	8001d3c <HAL_I2C_Init+0x1dc>
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	689b      	ldr	r3, [r3, #8]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d111      	bne.n	8001cc8 <HAL_I2C_Init+0x168>
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	1e58      	subs	r0, r3, #1
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6859      	ldr	r1, [r3, #4]
 8001cac:	460b      	mov	r3, r1
 8001cae:	005b      	lsls	r3, r3, #1
 8001cb0:	440b      	add	r3, r1
 8001cb2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001cb6:	3301      	adds	r3, #1
 8001cb8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	bf0c      	ite	eq
 8001cc0:	2301      	moveq	r3, #1
 8001cc2:	2300      	movne	r3, #0
 8001cc4:	b2db      	uxtb	r3, r3
 8001cc6:	e012      	b.n	8001cee <HAL_I2C_Init+0x18e>
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	1e58      	subs	r0, r3, #1
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6859      	ldr	r1, [r3, #4]
 8001cd0:	460b      	mov	r3, r1
 8001cd2:	009b      	lsls	r3, r3, #2
 8001cd4:	440b      	add	r3, r1
 8001cd6:	0099      	lsls	r1, r3, #2
 8001cd8:	440b      	add	r3, r1
 8001cda:	fbb0 f3f3 	udiv	r3, r0, r3
 8001cde:	3301      	adds	r3, #1
 8001ce0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	bf0c      	ite	eq
 8001ce8:	2301      	moveq	r3, #1
 8001cea:	2300      	movne	r3, #0
 8001cec:	b2db      	uxtb	r3, r3
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d001      	beq.n	8001cf6 <HAL_I2C_Init+0x196>
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	e022      	b.n	8001d3c <HAL_I2C_Init+0x1dc>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	689b      	ldr	r3, [r3, #8]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d10e      	bne.n	8001d1c <HAL_I2C_Init+0x1bc>
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	1e58      	subs	r0, r3, #1
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6859      	ldr	r1, [r3, #4]
 8001d06:	460b      	mov	r3, r1
 8001d08:	005b      	lsls	r3, r3, #1
 8001d0a:	440b      	add	r3, r1
 8001d0c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d10:	3301      	adds	r3, #1
 8001d12:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d16:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001d1a:	e00f      	b.n	8001d3c <HAL_I2C_Init+0x1dc>
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	1e58      	subs	r0, r3, #1
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6859      	ldr	r1, [r3, #4]
 8001d24:	460b      	mov	r3, r1
 8001d26:	009b      	lsls	r3, r3, #2
 8001d28:	440b      	add	r3, r1
 8001d2a:	0099      	lsls	r1, r3, #2
 8001d2c:	440b      	add	r3, r1
 8001d2e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d32:	3301      	adds	r3, #1
 8001d34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d38:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001d3c:	6879      	ldr	r1, [r7, #4]
 8001d3e:	6809      	ldr	r1, [r1, #0]
 8001d40:	4313      	orrs	r3, r2
 8001d42:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	69da      	ldr	r2, [r3, #28]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6a1b      	ldr	r3, [r3, #32]
 8001d56:	431a      	orrs	r2, r3
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	430a      	orrs	r2, r1
 8001d5e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	689b      	ldr	r3, [r3, #8]
 8001d66:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001d6a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001d6e:	687a      	ldr	r2, [r7, #4]
 8001d70:	6911      	ldr	r1, [r2, #16]
 8001d72:	687a      	ldr	r2, [r7, #4]
 8001d74:	68d2      	ldr	r2, [r2, #12]
 8001d76:	4311      	orrs	r1, r2
 8001d78:	687a      	ldr	r2, [r7, #4]
 8001d7a:	6812      	ldr	r2, [r2, #0]
 8001d7c:	430b      	orrs	r3, r1
 8001d7e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	68db      	ldr	r3, [r3, #12]
 8001d86:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	695a      	ldr	r2, [r3, #20]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	699b      	ldr	r3, [r3, #24]
 8001d92:	431a      	orrs	r2, r3
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	430a      	orrs	r2, r1
 8001d9a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	681a      	ldr	r2, [r3, #0]
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f042 0201 	orr.w	r2, r2, #1
 8001daa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2200      	movs	r2, #0
 8001db0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2220      	movs	r2, #32
 8001db6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001dc8:	2300      	movs	r3, #0
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	3710      	adds	r7, #16
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	000186a0 	.word	0x000186a0
 8001dd8:	001e847f 	.word	0x001e847f
 8001ddc:	003d08ff 	.word	0x003d08ff
 8001de0:	431bde83 	.word	0x431bde83
 8001de4:	10624dd3 	.word	0x10624dd3

08001de8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b088      	sub	sp, #32
 8001dec:	af02      	add	r7, sp, #8
 8001dee:	60f8      	str	r0, [r7, #12]
 8001df0:	4608      	mov	r0, r1
 8001df2:	4611      	mov	r1, r2
 8001df4:	461a      	mov	r2, r3
 8001df6:	4603      	mov	r3, r0
 8001df8:	817b      	strh	r3, [r7, #10]
 8001dfa:	460b      	mov	r3, r1
 8001dfc:	813b      	strh	r3, [r7, #8]
 8001dfe:	4613      	mov	r3, r2
 8001e00:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001e02:	f7ff f91b 	bl	800103c <HAL_GetTick>
 8001e06:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001e0e:	b2db      	uxtb	r3, r3
 8001e10:	2b20      	cmp	r3, #32
 8001e12:	f040 80d9 	bne.w	8001fc8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001e16:	697b      	ldr	r3, [r7, #20]
 8001e18:	9300      	str	r3, [sp, #0]
 8001e1a:	2319      	movs	r3, #25
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	496d      	ldr	r1, [pc, #436]	@ (8001fd4 <HAL_I2C_Mem_Write+0x1ec>)
 8001e20:	68f8      	ldr	r0, [r7, #12]
 8001e22:	f000 f971 	bl	8002108 <I2C_WaitOnFlagUntilTimeout>
 8001e26:	4603      	mov	r3, r0
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d001      	beq.n	8001e30 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001e2c:	2302      	movs	r3, #2
 8001e2e:	e0cc      	b.n	8001fca <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001e36:	2b01      	cmp	r3, #1
 8001e38:	d101      	bne.n	8001e3e <HAL_I2C_Mem_Write+0x56>
 8001e3a:	2302      	movs	r3, #2
 8001e3c:	e0c5      	b.n	8001fca <HAL_I2C_Mem_Write+0x1e2>
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	2201      	movs	r2, #1
 8001e42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f003 0301 	and.w	r3, r3, #1
 8001e50:	2b01      	cmp	r3, #1
 8001e52:	d007      	beq.n	8001e64 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	681a      	ldr	r2, [r3, #0]
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f042 0201 	orr.w	r2, r2, #1
 8001e62:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	681a      	ldr	r2, [r3, #0]
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001e72:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	2221      	movs	r2, #33	@ 0x21
 8001e78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	2240      	movs	r2, #64	@ 0x40
 8001e80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	2200      	movs	r2, #0
 8001e88:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	6a3a      	ldr	r2, [r7, #32]
 8001e8e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001e94:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e9a:	b29a      	uxth	r2, r3
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	4a4d      	ldr	r2, [pc, #308]	@ (8001fd8 <HAL_I2C_Mem_Write+0x1f0>)
 8001ea4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001ea6:	88f8      	ldrh	r0, [r7, #6]
 8001ea8:	893a      	ldrh	r2, [r7, #8]
 8001eaa:	8979      	ldrh	r1, [r7, #10]
 8001eac:	697b      	ldr	r3, [r7, #20]
 8001eae:	9301      	str	r3, [sp, #4]
 8001eb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001eb2:	9300      	str	r3, [sp, #0]
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	68f8      	ldr	r0, [r7, #12]
 8001eb8:	f000 f890 	bl	8001fdc <I2C_RequestMemoryWrite>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d052      	beq.n	8001f68 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	e081      	b.n	8001fca <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ec6:	697a      	ldr	r2, [r7, #20]
 8001ec8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001eca:	68f8      	ldr	r0, [r7, #12]
 8001ecc:	f000 fa36 	bl	800233c <I2C_WaitOnTXEFlagUntilTimeout>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d00d      	beq.n	8001ef2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eda:	2b04      	cmp	r3, #4
 8001edc:	d107      	bne.n	8001eee <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	681a      	ldr	r2, [r3, #0]
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001eec:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	e06b      	b.n	8001fca <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ef6:	781a      	ldrb	r2, [r3, #0]
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f02:	1c5a      	adds	r2, r3, #1
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f0c:	3b01      	subs	r3, #1
 8001f0e:	b29a      	uxth	r2, r3
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f18:	b29b      	uxth	r3, r3
 8001f1a:	3b01      	subs	r3, #1
 8001f1c:	b29a      	uxth	r2, r3
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	695b      	ldr	r3, [r3, #20]
 8001f28:	f003 0304 	and.w	r3, r3, #4
 8001f2c:	2b04      	cmp	r3, #4
 8001f2e:	d11b      	bne.n	8001f68 <HAL_I2C_Mem_Write+0x180>
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d017      	beq.n	8001f68 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f3c:	781a      	ldrb	r2, [r3, #0]
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f48:	1c5a      	adds	r2, r3, #1
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f52:	3b01      	subs	r3, #1
 8001f54:	b29a      	uxth	r2, r3
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f5e:	b29b      	uxth	r3, r3
 8001f60:	3b01      	subs	r3, #1
 8001f62:	b29a      	uxth	r2, r3
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d1aa      	bne.n	8001ec6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f70:	697a      	ldr	r2, [r7, #20]
 8001f72:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001f74:	68f8      	ldr	r0, [r7, #12]
 8001f76:	f000 fa29 	bl	80023cc <I2C_WaitOnBTFFlagUntilTimeout>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d00d      	beq.n	8001f9c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f84:	2b04      	cmp	r3, #4
 8001f86:	d107      	bne.n	8001f98 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	681a      	ldr	r2, [r3, #0]
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001f96:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001f98:	2301      	movs	r3, #1
 8001f9a:	e016      	b.n	8001fca <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	681a      	ldr	r2, [r3, #0]
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001faa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	2220      	movs	r2, #32
 8001fb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	e000      	b.n	8001fca <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001fc8:	2302      	movs	r3, #2
  }
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	3718      	adds	r7, #24
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	00100002 	.word	0x00100002
 8001fd8:	ffff0000 	.word	0xffff0000

08001fdc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b088      	sub	sp, #32
 8001fe0:	af02      	add	r7, sp, #8
 8001fe2:	60f8      	str	r0, [r7, #12]
 8001fe4:	4608      	mov	r0, r1
 8001fe6:	4611      	mov	r1, r2
 8001fe8:	461a      	mov	r2, r3
 8001fea:	4603      	mov	r3, r0
 8001fec:	817b      	strh	r3, [r7, #10]
 8001fee:	460b      	mov	r3, r1
 8001ff0:	813b      	strh	r3, [r7, #8]
 8001ff2:	4613      	mov	r3, r2
 8001ff4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	681a      	ldr	r2, [r3, #0]
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002004:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002008:	9300      	str	r3, [sp, #0]
 800200a:	6a3b      	ldr	r3, [r7, #32]
 800200c:	2200      	movs	r2, #0
 800200e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002012:	68f8      	ldr	r0, [r7, #12]
 8002014:	f000 f878 	bl	8002108 <I2C_WaitOnFlagUntilTimeout>
 8002018:	4603      	mov	r3, r0
 800201a:	2b00      	cmp	r3, #0
 800201c:	d00d      	beq.n	800203a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002028:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800202c:	d103      	bne.n	8002036 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002034:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002036:	2303      	movs	r3, #3
 8002038:	e05f      	b.n	80020fa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800203a:	897b      	ldrh	r3, [r7, #10]
 800203c:	b2db      	uxtb	r3, r3
 800203e:	461a      	mov	r2, r3
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002048:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800204a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800204c:	6a3a      	ldr	r2, [r7, #32]
 800204e:	492d      	ldr	r1, [pc, #180]	@ (8002104 <I2C_RequestMemoryWrite+0x128>)
 8002050:	68f8      	ldr	r0, [r7, #12]
 8002052:	f000 f8d3 	bl	80021fc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002056:	4603      	mov	r3, r0
 8002058:	2b00      	cmp	r3, #0
 800205a:	d001      	beq.n	8002060 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800205c:	2301      	movs	r3, #1
 800205e:	e04c      	b.n	80020fa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002060:	2300      	movs	r3, #0
 8002062:	617b      	str	r3, [r7, #20]
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	695b      	ldr	r3, [r3, #20]
 800206a:	617b      	str	r3, [r7, #20]
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	699b      	ldr	r3, [r3, #24]
 8002072:	617b      	str	r3, [r7, #20]
 8002074:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002076:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002078:	6a39      	ldr	r1, [r7, #32]
 800207a:	68f8      	ldr	r0, [r7, #12]
 800207c:	f000 f95e 	bl	800233c <I2C_WaitOnTXEFlagUntilTimeout>
 8002080:	4603      	mov	r3, r0
 8002082:	2b00      	cmp	r3, #0
 8002084:	d00d      	beq.n	80020a2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800208a:	2b04      	cmp	r3, #4
 800208c:	d107      	bne.n	800209e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	681a      	ldr	r2, [r3, #0]
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800209c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800209e:	2301      	movs	r3, #1
 80020a0:	e02b      	b.n	80020fa <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80020a2:	88fb      	ldrh	r3, [r7, #6]
 80020a4:	2b01      	cmp	r3, #1
 80020a6:	d105      	bne.n	80020b4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80020a8:	893b      	ldrh	r3, [r7, #8]
 80020aa:	b2da      	uxtb	r2, r3
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	611a      	str	r2, [r3, #16]
 80020b2:	e021      	b.n	80020f8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80020b4:	893b      	ldrh	r3, [r7, #8]
 80020b6:	0a1b      	lsrs	r3, r3, #8
 80020b8:	b29b      	uxth	r3, r3
 80020ba:	b2da      	uxtb	r2, r3
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80020c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80020c4:	6a39      	ldr	r1, [r7, #32]
 80020c6:	68f8      	ldr	r0, [r7, #12]
 80020c8:	f000 f938 	bl	800233c <I2C_WaitOnTXEFlagUntilTimeout>
 80020cc:	4603      	mov	r3, r0
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d00d      	beq.n	80020ee <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020d6:	2b04      	cmp	r3, #4
 80020d8:	d107      	bne.n	80020ea <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	681a      	ldr	r2, [r3, #0]
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80020e8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80020ea:	2301      	movs	r3, #1
 80020ec:	e005      	b.n	80020fa <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80020ee:	893b      	ldrh	r3, [r7, #8]
 80020f0:	b2da      	uxtb	r2, r3
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80020f8:	2300      	movs	r3, #0
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	3718      	adds	r7, #24
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}
 8002102:	bf00      	nop
 8002104:	00010002 	.word	0x00010002

08002108 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b084      	sub	sp, #16
 800210c:	af00      	add	r7, sp, #0
 800210e:	60f8      	str	r0, [r7, #12]
 8002110:	60b9      	str	r1, [r7, #8]
 8002112:	603b      	str	r3, [r7, #0]
 8002114:	4613      	mov	r3, r2
 8002116:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002118:	e048      	b.n	80021ac <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002120:	d044      	beq.n	80021ac <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002122:	f7fe ff8b 	bl	800103c <HAL_GetTick>
 8002126:	4602      	mov	r2, r0
 8002128:	69bb      	ldr	r3, [r7, #24]
 800212a:	1ad3      	subs	r3, r2, r3
 800212c:	683a      	ldr	r2, [r7, #0]
 800212e:	429a      	cmp	r2, r3
 8002130:	d302      	bcc.n	8002138 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d139      	bne.n	80021ac <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002138:	68bb      	ldr	r3, [r7, #8]
 800213a:	0c1b      	lsrs	r3, r3, #16
 800213c:	b2db      	uxtb	r3, r3
 800213e:	2b01      	cmp	r3, #1
 8002140:	d10d      	bne.n	800215e <I2C_WaitOnFlagUntilTimeout+0x56>
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	695b      	ldr	r3, [r3, #20]
 8002148:	43da      	mvns	r2, r3
 800214a:	68bb      	ldr	r3, [r7, #8]
 800214c:	4013      	ands	r3, r2
 800214e:	b29b      	uxth	r3, r3
 8002150:	2b00      	cmp	r3, #0
 8002152:	bf0c      	ite	eq
 8002154:	2301      	moveq	r3, #1
 8002156:	2300      	movne	r3, #0
 8002158:	b2db      	uxtb	r3, r3
 800215a:	461a      	mov	r2, r3
 800215c:	e00c      	b.n	8002178 <I2C_WaitOnFlagUntilTimeout+0x70>
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	699b      	ldr	r3, [r3, #24]
 8002164:	43da      	mvns	r2, r3
 8002166:	68bb      	ldr	r3, [r7, #8]
 8002168:	4013      	ands	r3, r2
 800216a:	b29b      	uxth	r3, r3
 800216c:	2b00      	cmp	r3, #0
 800216e:	bf0c      	ite	eq
 8002170:	2301      	moveq	r3, #1
 8002172:	2300      	movne	r3, #0
 8002174:	b2db      	uxtb	r3, r3
 8002176:	461a      	mov	r2, r3
 8002178:	79fb      	ldrb	r3, [r7, #7]
 800217a:	429a      	cmp	r2, r3
 800217c:	d116      	bne.n	80021ac <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	2200      	movs	r2, #0
 8002182:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	2220      	movs	r2, #32
 8002188:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	2200      	movs	r2, #0
 8002190:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002198:	f043 0220 	orr.w	r2, r3, #32
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	2200      	movs	r2, #0
 80021a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80021a8:	2301      	movs	r3, #1
 80021aa:	e023      	b.n	80021f4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80021ac:	68bb      	ldr	r3, [r7, #8]
 80021ae:	0c1b      	lsrs	r3, r3, #16
 80021b0:	b2db      	uxtb	r3, r3
 80021b2:	2b01      	cmp	r3, #1
 80021b4:	d10d      	bne.n	80021d2 <I2C_WaitOnFlagUntilTimeout+0xca>
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	695b      	ldr	r3, [r3, #20]
 80021bc:	43da      	mvns	r2, r3
 80021be:	68bb      	ldr	r3, [r7, #8]
 80021c0:	4013      	ands	r3, r2
 80021c2:	b29b      	uxth	r3, r3
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	bf0c      	ite	eq
 80021c8:	2301      	moveq	r3, #1
 80021ca:	2300      	movne	r3, #0
 80021cc:	b2db      	uxtb	r3, r3
 80021ce:	461a      	mov	r2, r3
 80021d0:	e00c      	b.n	80021ec <I2C_WaitOnFlagUntilTimeout+0xe4>
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	699b      	ldr	r3, [r3, #24]
 80021d8:	43da      	mvns	r2, r3
 80021da:	68bb      	ldr	r3, [r7, #8]
 80021dc:	4013      	ands	r3, r2
 80021de:	b29b      	uxth	r3, r3
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	bf0c      	ite	eq
 80021e4:	2301      	moveq	r3, #1
 80021e6:	2300      	movne	r3, #0
 80021e8:	b2db      	uxtb	r3, r3
 80021ea:	461a      	mov	r2, r3
 80021ec:	79fb      	ldrb	r3, [r7, #7]
 80021ee:	429a      	cmp	r2, r3
 80021f0:	d093      	beq.n	800211a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80021f2:	2300      	movs	r3, #0
}
 80021f4:	4618      	mov	r0, r3
 80021f6:	3710      	adds	r7, #16
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bd80      	pop	{r7, pc}

080021fc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b084      	sub	sp, #16
 8002200:	af00      	add	r7, sp, #0
 8002202:	60f8      	str	r0, [r7, #12]
 8002204:	60b9      	str	r1, [r7, #8]
 8002206:	607a      	str	r2, [r7, #4]
 8002208:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800220a:	e071      	b.n	80022f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	695b      	ldr	r3, [r3, #20]
 8002212:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002216:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800221a:	d123      	bne.n	8002264 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	681a      	ldr	r2, [r3, #0]
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800222a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002234:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	2200      	movs	r2, #0
 800223a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	2220      	movs	r2, #32
 8002240:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	2200      	movs	r2, #0
 8002248:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002250:	f043 0204 	orr.w	r2, r3, #4
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	2200      	movs	r2, #0
 800225c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002260:	2301      	movs	r3, #1
 8002262:	e067      	b.n	8002334 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	f1b3 3fff 	cmp.w	r3, #4294967295
 800226a:	d041      	beq.n	80022f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800226c:	f7fe fee6 	bl	800103c <HAL_GetTick>
 8002270:	4602      	mov	r2, r0
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	1ad3      	subs	r3, r2, r3
 8002276:	687a      	ldr	r2, [r7, #4]
 8002278:	429a      	cmp	r2, r3
 800227a:	d302      	bcc.n	8002282 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d136      	bne.n	80022f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002282:	68bb      	ldr	r3, [r7, #8]
 8002284:	0c1b      	lsrs	r3, r3, #16
 8002286:	b2db      	uxtb	r3, r3
 8002288:	2b01      	cmp	r3, #1
 800228a:	d10c      	bne.n	80022a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	695b      	ldr	r3, [r3, #20]
 8002292:	43da      	mvns	r2, r3
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	4013      	ands	r3, r2
 8002298:	b29b      	uxth	r3, r3
 800229a:	2b00      	cmp	r3, #0
 800229c:	bf14      	ite	ne
 800229e:	2301      	movne	r3, #1
 80022a0:	2300      	moveq	r3, #0
 80022a2:	b2db      	uxtb	r3, r3
 80022a4:	e00b      	b.n	80022be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	699b      	ldr	r3, [r3, #24]
 80022ac:	43da      	mvns	r2, r3
 80022ae:	68bb      	ldr	r3, [r7, #8]
 80022b0:	4013      	ands	r3, r2
 80022b2:	b29b      	uxth	r3, r3
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	bf14      	ite	ne
 80022b8:	2301      	movne	r3, #1
 80022ba:	2300      	moveq	r3, #0
 80022bc:	b2db      	uxtb	r3, r3
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d016      	beq.n	80022f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	2200      	movs	r2, #0
 80022c6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	2220      	movs	r2, #32
 80022cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	2200      	movs	r2, #0
 80022d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022dc:	f043 0220 	orr.w	r2, r3, #32
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	2200      	movs	r2, #0
 80022e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80022ec:	2301      	movs	r3, #1
 80022ee:	e021      	b.n	8002334 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80022f0:	68bb      	ldr	r3, [r7, #8]
 80022f2:	0c1b      	lsrs	r3, r3, #16
 80022f4:	b2db      	uxtb	r3, r3
 80022f6:	2b01      	cmp	r3, #1
 80022f8:	d10c      	bne.n	8002314 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	695b      	ldr	r3, [r3, #20]
 8002300:	43da      	mvns	r2, r3
 8002302:	68bb      	ldr	r3, [r7, #8]
 8002304:	4013      	ands	r3, r2
 8002306:	b29b      	uxth	r3, r3
 8002308:	2b00      	cmp	r3, #0
 800230a:	bf14      	ite	ne
 800230c:	2301      	movne	r3, #1
 800230e:	2300      	moveq	r3, #0
 8002310:	b2db      	uxtb	r3, r3
 8002312:	e00b      	b.n	800232c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	699b      	ldr	r3, [r3, #24]
 800231a:	43da      	mvns	r2, r3
 800231c:	68bb      	ldr	r3, [r7, #8]
 800231e:	4013      	ands	r3, r2
 8002320:	b29b      	uxth	r3, r3
 8002322:	2b00      	cmp	r3, #0
 8002324:	bf14      	ite	ne
 8002326:	2301      	movne	r3, #1
 8002328:	2300      	moveq	r3, #0
 800232a:	b2db      	uxtb	r3, r3
 800232c:	2b00      	cmp	r3, #0
 800232e:	f47f af6d 	bne.w	800220c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002332:	2300      	movs	r3, #0
}
 8002334:	4618      	mov	r0, r3
 8002336:	3710      	adds	r7, #16
 8002338:	46bd      	mov	sp, r7
 800233a:	bd80      	pop	{r7, pc}

0800233c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b084      	sub	sp, #16
 8002340:	af00      	add	r7, sp, #0
 8002342:	60f8      	str	r0, [r7, #12]
 8002344:	60b9      	str	r1, [r7, #8]
 8002346:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002348:	e034      	b.n	80023b4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800234a:	68f8      	ldr	r0, [r7, #12]
 800234c:	f000 f886 	bl	800245c <I2C_IsAcknowledgeFailed>
 8002350:	4603      	mov	r3, r0
 8002352:	2b00      	cmp	r3, #0
 8002354:	d001      	beq.n	800235a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002356:	2301      	movs	r3, #1
 8002358:	e034      	b.n	80023c4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800235a:	68bb      	ldr	r3, [r7, #8]
 800235c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002360:	d028      	beq.n	80023b4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002362:	f7fe fe6b 	bl	800103c <HAL_GetTick>
 8002366:	4602      	mov	r2, r0
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	1ad3      	subs	r3, r2, r3
 800236c:	68ba      	ldr	r2, [r7, #8]
 800236e:	429a      	cmp	r2, r3
 8002370:	d302      	bcc.n	8002378 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002372:	68bb      	ldr	r3, [r7, #8]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d11d      	bne.n	80023b4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	695b      	ldr	r3, [r3, #20]
 800237e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002382:	2b80      	cmp	r3, #128	@ 0x80
 8002384:	d016      	beq.n	80023b4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	2200      	movs	r2, #0
 800238a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	2220      	movs	r2, #32
 8002390:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	2200      	movs	r2, #0
 8002398:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023a0:	f043 0220 	orr.w	r2, r3, #32
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	2200      	movs	r2, #0
 80023ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80023b0:	2301      	movs	r3, #1
 80023b2:	e007      	b.n	80023c4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	695b      	ldr	r3, [r3, #20]
 80023ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80023be:	2b80      	cmp	r3, #128	@ 0x80
 80023c0:	d1c3      	bne.n	800234a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80023c2:	2300      	movs	r3, #0
}
 80023c4:	4618      	mov	r0, r3
 80023c6:	3710      	adds	r7, #16
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bd80      	pop	{r7, pc}

080023cc <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b084      	sub	sp, #16
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	60f8      	str	r0, [r7, #12]
 80023d4:	60b9      	str	r1, [r7, #8]
 80023d6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80023d8:	e034      	b.n	8002444 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80023da:	68f8      	ldr	r0, [r7, #12]
 80023dc:	f000 f83e 	bl	800245c <I2C_IsAcknowledgeFailed>
 80023e0:	4603      	mov	r3, r0
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d001      	beq.n	80023ea <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
 80023e8:	e034      	b.n	8002454 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80023ea:	68bb      	ldr	r3, [r7, #8]
 80023ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023f0:	d028      	beq.n	8002444 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023f2:	f7fe fe23 	bl	800103c <HAL_GetTick>
 80023f6:	4602      	mov	r2, r0
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	1ad3      	subs	r3, r2, r3
 80023fc:	68ba      	ldr	r2, [r7, #8]
 80023fe:	429a      	cmp	r2, r3
 8002400:	d302      	bcc.n	8002408 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002402:	68bb      	ldr	r3, [r7, #8]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d11d      	bne.n	8002444 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	695b      	ldr	r3, [r3, #20]
 800240e:	f003 0304 	and.w	r3, r3, #4
 8002412:	2b04      	cmp	r3, #4
 8002414:	d016      	beq.n	8002444 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	2200      	movs	r2, #0
 800241a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	2220      	movs	r2, #32
 8002420:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	2200      	movs	r2, #0
 8002428:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002430:	f043 0220 	orr.w	r2, r3, #32
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	2200      	movs	r2, #0
 800243c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002440:	2301      	movs	r3, #1
 8002442:	e007      	b.n	8002454 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	695b      	ldr	r3, [r3, #20]
 800244a:	f003 0304 	and.w	r3, r3, #4
 800244e:	2b04      	cmp	r3, #4
 8002450:	d1c3      	bne.n	80023da <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002452:	2300      	movs	r3, #0
}
 8002454:	4618      	mov	r0, r3
 8002456:	3710      	adds	r7, #16
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}

0800245c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800245c:	b480      	push	{r7}
 800245e:	b083      	sub	sp, #12
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	695b      	ldr	r3, [r3, #20]
 800246a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800246e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002472:	d11b      	bne.n	80024ac <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800247c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2200      	movs	r2, #0
 8002482:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2220      	movs	r2, #32
 8002488:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2200      	movs	r2, #0
 8002490:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002498:	f043 0204 	orr.w	r2, r3, #4
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2200      	movs	r2, #0
 80024a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80024a8:	2301      	movs	r3, #1
 80024aa:	e000      	b.n	80024ae <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80024ac:	2300      	movs	r3, #0
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	370c      	adds	r7, #12
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bc80      	pop	{r7}
 80024b6:	4770      	bx	lr

080024b8 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80024b8:	b480      	push	{r7}
 80024ba:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 80024bc:	4b03      	ldr	r3, [pc, #12]	@ (80024cc <HAL_PWR_EnableBkUpAccess+0x14>)
 80024be:	2201      	movs	r2, #1
 80024c0:	601a      	str	r2, [r3, #0]
}
 80024c2:	bf00      	nop
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bc80      	pop	{r7}
 80024c8:	4770      	bx	lr
 80024ca:	bf00      	nop
 80024cc:	420e0020 	.word	0x420e0020

080024d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b086      	sub	sp, #24
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d101      	bne.n	80024e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80024de:	2301      	movs	r3, #1
 80024e0:	e272      	b.n	80029c8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f003 0301 	and.w	r3, r3, #1
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	f000 8087 	beq.w	80025fe <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80024f0:	4b92      	ldr	r3, [pc, #584]	@ (800273c <HAL_RCC_OscConfig+0x26c>)
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	f003 030c 	and.w	r3, r3, #12
 80024f8:	2b04      	cmp	r3, #4
 80024fa:	d00c      	beq.n	8002516 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80024fc:	4b8f      	ldr	r3, [pc, #572]	@ (800273c <HAL_RCC_OscConfig+0x26c>)
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	f003 030c 	and.w	r3, r3, #12
 8002504:	2b08      	cmp	r3, #8
 8002506:	d112      	bne.n	800252e <HAL_RCC_OscConfig+0x5e>
 8002508:	4b8c      	ldr	r3, [pc, #560]	@ (800273c <HAL_RCC_OscConfig+0x26c>)
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002510:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002514:	d10b      	bne.n	800252e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002516:	4b89      	ldr	r3, [pc, #548]	@ (800273c <HAL_RCC_OscConfig+0x26c>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800251e:	2b00      	cmp	r3, #0
 8002520:	d06c      	beq.n	80025fc <HAL_RCC_OscConfig+0x12c>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d168      	bne.n	80025fc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800252a:	2301      	movs	r3, #1
 800252c:	e24c      	b.n	80029c8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002536:	d106      	bne.n	8002546 <HAL_RCC_OscConfig+0x76>
 8002538:	4b80      	ldr	r3, [pc, #512]	@ (800273c <HAL_RCC_OscConfig+0x26c>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a7f      	ldr	r2, [pc, #508]	@ (800273c <HAL_RCC_OscConfig+0x26c>)
 800253e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002542:	6013      	str	r3, [r2, #0]
 8002544:	e02e      	b.n	80025a4 <HAL_RCC_OscConfig+0xd4>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d10c      	bne.n	8002568 <HAL_RCC_OscConfig+0x98>
 800254e:	4b7b      	ldr	r3, [pc, #492]	@ (800273c <HAL_RCC_OscConfig+0x26c>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a7a      	ldr	r2, [pc, #488]	@ (800273c <HAL_RCC_OscConfig+0x26c>)
 8002554:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002558:	6013      	str	r3, [r2, #0]
 800255a:	4b78      	ldr	r3, [pc, #480]	@ (800273c <HAL_RCC_OscConfig+0x26c>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4a77      	ldr	r2, [pc, #476]	@ (800273c <HAL_RCC_OscConfig+0x26c>)
 8002560:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002564:	6013      	str	r3, [r2, #0]
 8002566:	e01d      	b.n	80025a4 <HAL_RCC_OscConfig+0xd4>
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002570:	d10c      	bne.n	800258c <HAL_RCC_OscConfig+0xbc>
 8002572:	4b72      	ldr	r3, [pc, #456]	@ (800273c <HAL_RCC_OscConfig+0x26c>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4a71      	ldr	r2, [pc, #452]	@ (800273c <HAL_RCC_OscConfig+0x26c>)
 8002578:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800257c:	6013      	str	r3, [r2, #0]
 800257e:	4b6f      	ldr	r3, [pc, #444]	@ (800273c <HAL_RCC_OscConfig+0x26c>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4a6e      	ldr	r2, [pc, #440]	@ (800273c <HAL_RCC_OscConfig+0x26c>)
 8002584:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002588:	6013      	str	r3, [r2, #0]
 800258a:	e00b      	b.n	80025a4 <HAL_RCC_OscConfig+0xd4>
 800258c:	4b6b      	ldr	r3, [pc, #428]	@ (800273c <HAL_RCC_OscConfig+0x26c>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a6a      	ldr	r2, [pc, #424]	@ (800273c <HAL_RCC_OscConfig+0x26c>)
 8002592:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002596:	6013      	str	r3, [r2, #0]
 8002598:	4b68      	ldr	r3, [pc, #416]	@ (800273c <HAL_RCC_OscConfig+0x26c>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a67      	ldr	r2, [pc, #412]	@ (800273c <HAL_RCC_OscConfig+0x26c>)
 800259e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80025a2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d013      	beq.n	80025d4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025ac:	f7fe fd46 	bl	800103c <HAL_GetTick>
 80025b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025b2:	e008      	b.n	80025c6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025b4:	f7fe fd42 	bl	800103c <HAL_GetTick>
 80025b8:	4602      	mov	r2, r0
 80025ba:	693b      	ldr	r3, [r7, #16]
 80025bc:	1ad3      	subs	r3, r2, r3
 80025be:	2b64      	cmp	r3, #100	@ 0x64
 80025c0:	d901      	bls.n	80025c6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80025c2:	2303      	movs	r3, #3
 80025c4:	e200      	b.n	80029c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025c6:	4b5d      	ldr	r3, [pc, #372]	@ (800273c <HAL_RCC_OscConfig+0x26c>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d0f0      	beq.n	80025b4 <HAL_RCC_OscConfig+0xe4>
 80025d2:	e014      	b.n	80025fe <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025d4:	f7fe fd32 	bl	800103c <HAL_GetTick>
 80025d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025da:	e008      	b.n	80025ee <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025dc:	f7fe fd2e 	bl	800103c <HAL_GetTick>
 80025e0:	4602      	mov	r2, r0
 80025e2:	693b      	ldr	r3, [r7, #16]
 80025e4:	1ad3      	subs	r3, r2, r3
 80025e6:	2b64      	cmp	r3, #100	@ 0x64
 80025e8:	d901      	bls.n	80025ee <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80025ea:	2303      	movs	r3, #3
 80025ec:	e1ec      	b.n	80029c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025ee:	4b53      	ldr	r3, [pc, #332]	@ (800273c <HAL_RCC_OscConfig+0x26c>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d1f0      	bne.n	80025dc <HAL_RCC_OscConfig+0x10c>
 80025fa:	e000      	b.n	80025fe <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f003 0302 	and.w	r3, r3, #2
 8002606:	2b00      	cmp	r3, #0
 8002608:	d063      	beq.n	80026d2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800260a:	4b4c      	ldr	r3, [pc, #304]	@ (800273c <HAL_RCC_OscConfig+0x26c>)
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	f003 030c 	and.w	r3, r3, #12
 8002612:	2b00      	cmp	r3, #0
 8002614:	d00b      	beq.n	800262e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002616:	4b49      	ldr	r3, [pc, #292]	@ (800273c <HAL_RCC_OscConfig+0x26c>)
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	f003 030c 	and.w	r3, r3, #12
 800261e:	2b08      	cmp	r3, #8
 8002620:	d11c      	bne.n	800265c <HAL_RCC_OscConfig+0x18c>
 8002622:	4b46      	ldr	r3, [pc, #280]	@ (800273c <HAL_RCC_OscConfig+0x26c>)
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800262a:	2b00      	cmp	r3, #0
 800262c:	d116      	bne.n	800265c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800262e:	4b43      	ldr	r3, [pc, #268]	@ (800273c <HAL_RCC_OscConfig+0x26c>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f003 0302 	and.w	r3, r3, #2
 8002636:	2b00      	cmp	r3, #0
 8002638:	d005      	beq.n	8002646 <HAL_RCC_OscConfig+0x176>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	691b      	ldr	r3, [r3, #16]
 800263e:	2b01      	cmp	r3, #1
 8002640:	d001      	beq.n	8002646 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002642:	2301      	movs	r3, #1
 8002644:	e1c0      	b.n	80029c8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002646:	4b3d      	ldr	r3, [pc, #244]	@ (800273c <HAL_RCC_OscConfig+0x26c>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	695b      	ldr	r3, [r3, #20]
 8002652:	00db      	lsls	r3, r3, #3
 8002654:	4939      	ldr	r1, [pc, #228]	@ (800273c <HAL_RCC_OscConfig+0x26c>)
 8002656:	4313      	orrs	r3, r2
 8002658:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800265a:	e03a      	b.n	80026d2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	691b      	ldr	r3, [r3, #16]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d020      	beq.n	80026a6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002664:	4b36      	ldr	r3, [pc, #216]	@ (8002740 <HAL_RCC_OscConfig+0x270>)
 8002666:	2201      	movs	r2, #1
 8002668:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800266a:	f7fe fce7 	bl	800103c <HAL_GetTick>
 800266e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002670:	e008      	b.n	8002684 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002672:	f7fe fce3 	bl	800103c <HAL_GetTick>
 8002676:	4602      	mov	r2, r0
 8002678:	693b      	ldr	r3, [r7, #16]
 800267a:	1ad3      	subs	r3, r2, r3
 800267c:	2b02      	cmp	r3, #2
 800267e:	d901      	bls.n	8002684 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002680:	2303      	movs	r3, #3
 8002682:	e1a1      	b.n	80029c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002684:	4b2d      	ldr	r3, [pc, #180]	@ (800273c <HAL_RCC_OscConfig+0x26c>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f003 0302 	and.w	r3, r3, #2
 800268c:	2b00      	cmp	r3, #0
 800268e:	d0f0      	beq.n	8002672 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002690:	4b2a      	ldr	r3, [pc, #168]	@ (800273c <HAL_RCC_OscConfig+0x26c>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	695b      	ldr	r3, [r3, #20]
 800269c:	00db      	lsls	r3, r3, #3
 800269e:	4927      	ldr	r1, [pc, #156]	@ (800273c <HAL_RCC_OscConfig+0x26c>)
 80026a0:	4313      	orrs	r3, r2
 80026a2:	600b      	str	r3, [r1, #0]
 80026a4:	e015      	b.n	80026d2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026a6:	4b26      	ldr	r3, [pc, #152]	@ (8002740 <HAL_RCC_OscConfig+0x270>)
 80026a8:	2200      	movs	r2, #0
 80026aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026ac:	f7fe fcc6 	bl	800103c <HAL_GetTick>
 80026b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026b2:	e008      	b.n	80026c6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026b4:	f7fe fcc2 	bl	800103c <HAL_GetTick>
 80026b8:	4602      	mov	r2, r0
 80026ba:	693b      	ldr	r3, [r7, #16]
 80026bc:	1ad3      	subs	r3, r2, r3
 80026be:	2b02      	cmp	r3, #2
 80026c0:	d901      	bls.n	80026c6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80026c2:	2303      	movs	r3, #3
 80026c4:	e180      	b.n	80029c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026c6:	4b1d      	ldr	r3, [pc, #116]	@ (800273c <HAL_RCC_OscConfig+0x26c>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f003 0302 	and.w	r3, r3, #2
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d1f0      	bne.n	80026b4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f003 0308 	and.w	r3, r3, #8
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d03a      	beq.n	8002754 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	699b      	ldr	r3, [r3, #24]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d019      	beq.n	800271a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026e6:	4b17      	ldr	r3, [pc, #92]	@ (8002744 <HAL_RCC_OscConfig+0x274>)
 80026e8:	2201      	movs	r2, #1
 80026ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026ec:	f7fe fca6 	bl	800103c <HAL_GetTick>
 80026f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026f2:	e008      	b.n	8002706 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026f4:	f7fe fca2 	bl	800103c <HAL_GetTick>
 80026f8:	4602      	mov	r2, r0
 80026fa:	693b      	ldr	r3, [r7, #16]
 80026fc:	1ad3      	subs	r3, r2, r3
 80026fe:	2b02      	cmp	r3, #2
 8002700:	d901      	bls.n	8002706 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002702:	2303      	movs	r3, #3
 8002704:	e160      	b.n	80029c8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002706:	4b0d      	ldr	r3, [pc, #52]	@ (800273c <HAL_RCC_OscConfig+0x26c>)
 8002708:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800270a:	f003 0302 	and.w	r3, r3, #2
 800270e:	2b00      	cmp	r3, #0
 8002710:	d0f0      	beq.n	80026f4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002712:	2001      	movs	r0, #1
 8002714:	f000 face 	bl	8002cb4 <RCC_Delay>
 8002718:	e01c      	b.n	8002754 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800271a:	4b0a      	ldr	r3, [pc, #40]	@ (8002744 <HAL_RCC_OscConfig+0x274>)
 800271c:	2200      	movs	r2, #0
 800271e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002720:	f7fe fc8c 	bl	800103c <HAL_GetTick>
 8002724:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002726:	e00f      	b.n	8002748 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002728:	f7fe fc88 	bl	800103c <HAL_GetTick>
 800272c:	4602      	mov	r2, r0
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	1ad3      	subs	r3, r2, r3
 8002732:	2b02      	cmp	r3, #2
 8002734:	d908      	bls.n	8002748 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002736:	2303      	movs	r3, #3
 8002738:	e146      	b.n	80029c8 <HAL_RCC_OscConfig+0x4f8>
 800273a:	bf00      	nop
 800273c:	40021000 	.word	0x40021000
 8002740:	42420000 	.word	0x42420000
 8002744:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002748:	4b92      	ldr	r3, [pc, #584]	@ (8002994 <HAL_RCC_OscConfig+0x4c4>)
 800274a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800274c:	f003 0302 	and.w	r3, r3, #2
 8002750:	2b00      	cmp	r3, #0
 8002752:	d1e9      	bne.n	8002728 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f003 0304 	and.w	r3, r3, #4
 800275c:	2b00      	cmp	r3, #0
 800275e:	f000 80a6 	beq.w	80028ae <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002762:	2300      	movs	r3, #0
 8002764:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002766:	4b8b      	ldr	r3, [pc, #556]	@ (8002994 <HAL_RCC_OscConfig+0x4c4>)
 8002768:	69db      	ldr	r3, [r3, #28]
 800276a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800276e:	2b00      	cmp	r3, #0
 8002770:	d10d      	bne.n	800278e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002772:	4b88      	ldr	r3, [pc, #544]	@ (8002994 <HAL_RCC_OscConfig+0x4c4>)
 8002774:	69db      	ldr	r3, [r3, #28]
 8002776:	4a87      	ldr	r2, [pc, #540]	@ (8002994 <HAL_RCC_OscConfig+0x4c4>)
 8002778:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800277c:	61d3      	str	r3, [r2, #28]
 800277e:	4b85      	ldr	r3, [pc, #532]	@ (8002994 <HAL_RCC_OscConfig+0x4c4>)
 8002780:	69db      	ldr	r3, [r3, #28]
 8002782:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002786:	60bb      	str	r3, [r7, #8]
 8002788:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800278a:	2301      	movs	r3, #1
 800278c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800278e:	4b82      	ldr	r3, [pc, #520]	@ (8002998 <HAL_RCC_OscConfig+0x4c8>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002796:	2b00      	cmp	r3, #0
 8002798:	d118      	bne.n	80027cc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800279a:	4b7f      	ldr	r3, [pc, #508]	@ (8002998 <HAL_RCC_OscConfig+0x4c8>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4a7e      	ldr	r2, [pc, #504]	@ (8002998 <HAL_RCC_OscConfig+0x4c8>)
 80027a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80027a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027a6:	f7fe fc49 	bl	800103c <HAL_GetTick>
 80027aa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027ac:	e008      	b.n	80027c0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027ae:	f7fe fc45 	bl	800103c <HAL_GetTick>
 80027b2:	4602      	mov	r2, r0
 80027b4:	693b      	ldr	r3, [r7, #16]
 80027b6:	1ad3      	subs	r3, r2, r3
 80027b8:	2b64      	cmp	r3, #100	@ 0x64
 80027ba:	d901      	bls.n	80027c0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80027bc:	2303      	movs	r3, #3
 80027be:	e103      	b.n	80029c8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027c0:	4b75      	ldr	r3, [pc, #468]	@ (8002998 <HAL_RCC_OscConfig+0x4c8>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d0f0      	beq.n	80027ae <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	68db      	ldr	r3, [r3, #12]
 80027d0:	2b01      	cmp	r3, #1
 80027d2:	d106      	bne.n	80027e2 <HAL_RCC_OscConfig+0x312>
 80027d4:	4b6f      	ldr	r3, [pc, #444]	@ (8002994 <HAL_RCC_OscConfig+0x4c4>)
 80027d6:	6a1b      	ldr	r3, [r3, #32]
 80027d8:	4a6e      	ldr	r2, [pc, #440]	@ (8002994 <HAL_RCC_OscConfig+0x4c4>)
 80027da:	f043 0301 	orr.w	r3, r3, #1
 80027de:	6213      	str	r3, [r2, #32]
 80027e0:	e02d      	b.n	800283e <HAL_RCC_OscConfig+0x36e>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	68db      	ldr	r3, [r3, #12]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d10c      	bne.n	8002804 <HAL_RCC_OscConfig+0x334>
 80027ea:	4b6a      	ldr	r3, [pc, #424]	@ (8002994 <HAL_RCC_OscConfig+0x4c4>)
 80027ec:	6a1b      	ldr	r3, [r3, #32]
 80027ee:	4a69      	ldr	r2, [pc, #420]	@ (8002994 <HAL_RCC_OscConfig+0x4c4>)
 80027f0:	f023 0301 	bic.w	r3, r3, #1
 80027f4:	6213      	str	r3, [r2, #32]
 80027f6:	4b67      	ldr	r3, [pc, #412]	@ (8002994 <HAL_RCC_OscConfig+0x4c4>)
 80027f8:	6a1b      	ldr	r3, [r3, #32]
 80027fa:	4a66      	ldr	r2, [pc, #408]	@ (8002994 <HAL_RCC_OscConfig+0x4c4>)
 80027fc:	f023 0304 	bic.w	r3, r3, #4
 8002800:	6213      	str	r3, [r2, #32]
 8002802:	e01c      	b.n	800283e <HAL_RCC_OscConfig+0x36e>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	68db      	ldr	r3, [r3, #12]
 8002808:	2b05      	cmp	r3, #5
 800280a:	d10c      	bne.n	8002826 <HAL_RCC_OscConfig+0x356>
 800280c:	4b61      	ldr	r3, [pc, #388]	@ (8002994 <HAL_RCC_OscConfig+0x4c4>)
 800280e:	6a1b      	ldr	r3, [r3, #32]
 8002810:	4a60      	ldr	r2, [pc, #384]	@ (8002994 <HAL_RCC_OscConfig+0x4c4>)
 8002812:	f043 0304 	orr.w	r3, r3, #4
 8002816:	6213      	str	r3, [r2, #32]
 8002818:	4b5e      	ldr	r3, [pc, #376]	@ (8002994 <HAL_RCC_OscConfig+0x4c4>)
 800281a:	6a1b      	ldr	r3, [r3, #32]
 800281c:	4a5d      	ldr	r2, [pc, #372]	@ (8002994 <HAL_RCC_OscConfig+0x4c4>)
 800281e:	f043 0301 	orr.w	r3, r3, #1
 8002822:	6213      	str	r3, [r2, #32]
 8002824:	e00b      	b.n	800283e <HAL_RCC_OscConfig+0x36e>
 8002826:	4b5b      	ldr	r3, [pc, #364]	@ (8002994 <HAL_RCC_OscConfig+0x4c4>)
 8002828:	6a1b      	ldr	r3, [r3, #32]
 800282a:	4a5a      	ldr	r2, [pc, #360]	@ (8002994 <HAL_RCC_OscConfig+0x4c4>)
 800282c:	f023 0301 	bic.w	r3, r3, #1
 8002830:	6213      	str	r3, [r2, #32]
 8002832:	4b58      	ldr	r3, [pc, #352]	@ (8002994 <HAL_RCC_OscConfig+0x4c4>)
 8002834:	6a1b      	ldr	r3, [r3, #32]
 8002836:	4a57      	ldr	r2, [pc, #348]	@ (8002994 <HAL_RCC_OscConfig+0x4c4>)
 8002838:	f023 0304 	bic.w	r3, r3, #4
 800283c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	68db      	ldr	r3, [r3, #12]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d015      	beq.n	8002872 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002846:	f7fe fbf9 	bl	800103c <HAL_GetTick>
 800284a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800284c:	e00a      	b.n	8002864 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800284e:	f7fe fbf5 	bl	800103c <HAL_GetTick>
 8002852:	4602      	mov	r2, r0
 8002854:	693b      	ldr	r3, [r7, #16]
 8002856:	1ad3      	subs	r3, r2, r3
 8002858:	f241 3288 	movw	r2, #5000	@ 0x1388
 800285c:	4293      	cmp	r3, r2
 800285e:	d901      	bls.n	8002864 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002860:	2303      	movs	r3, #3
 8002862:	e0b1      	b.n	80029c8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002864:	4b4b      	ldr	r3, [pc, #300]	@ (8002994 <HAL_RCC_OscConfig+0x4c4>)
 8002866:	6a1b      	ldr	r3, [r3, #32]
 8002868:	f003 0302 	and.w	r3, r3, #2
 800286c:	2b00      	cmp	r3, #0
 800286e:	d0ee      	beq.n	800284e <HAL_RCC_OscConfig+0x37e>
 8002870:	e014      	b.n	800289c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002872:	f7fe fbe3 	bl	800103c <HAL_GetTick>
 8002876:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002878:	e00a      	b.n	8002890 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800287a:	f7fe fbdf 	bl	800103c <HAL_GetTick>
 800287e:	4602      	mov	r2, r0
 8002880:	693b      	ldr	r3, [r7, #16]
 8002882:	1ad3      	subs	r3, r2, r3
 8002884:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002888:	4293      	cmp	r3, r2
 800288a:	d901      	bls.n	8002890 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800288c:	2303      	movs	r3, #3
 800288e:	e09b      	b.n	80029c8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002890:	4b40      	ldr	r3, [pc, #256]	@ (8002994 <HAL_RCC_OscConfig+0x4c4>)
 8002892:	6a1b      	ldr	r3, [r3, #32]
 8002894:	f003 0302 	and.w	r3, r3, #2
 8002898:	2b00      	cmp	r3, #0
 800289a:	d1ee      	bne.n	800287a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800289c:	7dfb      	ldrb	r3, [r7, #23]
 800289e:	2b01      	cmp	r3, #1
 80028a0:	d105      	bne.n	80028ae <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028a2:	4b3c      	ldr	r3, [pc, #240]	@ (8002994 <HAL_RCC_OscConfig+0x4c4>)
 80028a4:	69db      	ldr	r3, [r3, #28]
 80028a6:	4a3b      	ldr	r2, [pc, #236]	@ (8002994 <HAL_RCC_OscConfig+0x4c4>)
 80028a8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80028ac:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	69db      	ldr	r3, [r3, #28]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	f000 8087 	beq.w	80029c6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80028b8:	4b36      	ldr	r3, [pc, #216]	@ (8002994 <HAL_RCC_OscConfig+0x4c4>)
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	f003 030c 	and.w	r3, r3, #12
 80028c0:	2b08      	cmp	r3, #8
 80028c2:	d061      	beq.n	8002988 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	69db      	ldr	r3, [r3, #28]
 80028c8:	2b02      	cmp	r3, #2
 80028ca:	d146      	bne.n	800295a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028cc:	4b33      	ldr	r3, [pc, #204]	@ (800299c <HAL_RCC_OscConfig+0x4cc>)
 80028ce:	2200      	movs	r2, #0
 80028d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028d2:	f7fe fbb3 	bl	800103c <HAL_GetTick>
 80028d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028d8:	e008      	b.n	80028ec <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028da:	f7fe fbaf 	bl	800103c <HAL_GetTick>
 80028de:	4602      	mov	r2, r0
 80028e0:	693b      	ldr	r3, [r7, #16]
 80028e2:	1ad3      	subs	r3, r2, r3
 80028e4:	2b02      	cmp	r3, #2
 80028e6:	d901      	bls.n	80028ec <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80028e8:	2303      	movs	r3, #3
 80028ea:	e06d      	b.n	80029c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028ec:	4b29      	ldr	r3, [pc, #164]	@ (8002994 <HAL_RCC_OscConfig+0x4c4>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d1f0      	bne.n	80028da <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6a1b      	ldr	r3, [r3, #32]
 80028fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002900:	d108      	bne.n	8002914 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002902:	4b24      	ldr	r3, [pc, #144]	@ (8002994 <HAL_RCC_OscConfig+0x4c4>)
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	689b      	ldr	r3, [r3, #8]
 800290e:	4921      	ldr	r1, [pc, #132]	@ (8002994 <HAL_RCC_OscConfig+0x4c4>)
 8002910:	4313      	orrs	r3, r2
 8002912:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002914:	4b1f      	ldr	r3, [pc, #124]	@ (8002994 <HAL_RCC_OscConfig+0x4c4>)
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6a19      	ldr	r1, [r3, #32]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002924:	430b      	orrs	r3, r1
 8002926:	491b      	ldr	r1, [pc, #108]	@ (8002994 <HAL_RCC_OscConfig+0x4c4>)
 8002928:	4313      	orrs	r3, r2
 800292a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800292c:	4b1b      	ldr	r3, [pc, #108]	@ (800299c <HAL_RCC_OscConfig+0x4cc>)
 800292e:	2201      	movs	r2, #1
 8002930:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002932:	f7fe fb83 	bl	800103c <HAL_GetTick>
 8002936:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002938:	e008      	b.n	800294c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800293a:	f7fe fb7f 	bl	800103c <HAL_GetTick>
 800293e:	4602      	mov	r2, r0
 8002940:	693b      	ldr	r3, [r7, #16]
 8002942:	1ad3      	subs	r3, r2, r3
 8002944:	2b02      	cmp	r3, #2
 8002946:	d901      	bls.n	800294c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002948:	2303      	movs	r3, #3
 800294a:	e03d      	b.n	80029c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800294c:	4b11      	ldr	r3, [pc, #68]	@ (8002994 <HAL_RCC_OscConfig+0x4c4>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002954:	2b00      	cmp	r3, #0
 8002956:	d0f0      	beq.n	800293a <HAL_RCC_OscConfig+0x46a>
 8002958:	e035      	b.n	80029c6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800295a:	4b10      	ldr	r3, [pc, #64]	@ (800299c <HAL_RCC_OscConfig+0x4cc>)
 800295c:	2200      	movs	r2, #0
 800295e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002960:	f7fe fb6c 	bl	800103c <HAL_GetTick>
 8002964:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002966:	e008      	b.n	800297a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002968:	f7fe fb68 	bl	800103c <HAL_GetTick>
 800296c:	4602      	mov	r2, r0
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	1ad3      	subs	r3, r2, r3
 8002972:	2b02      	cmp	r3, #2
 8002974:	d901      	bls.n	800297a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002976:	2303      	movs	r3, #3
 8002978:	e026      	b.n	80029c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800297a:	4b06      	ldr	r3, [pc, #24]	@ (8002994 <HAL_RCC_OscConfig+0x4c4>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002982:	2b00      	cmp	r3, #0
 8002984:	d1f0      	bne.n	8002968 <HAL_RCC_OscConfig+0x498>
 8002986:	e01e      	b.n	80029c6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	69db      	ldr	r3, [r3, #28]
 800298c:	2b01      	cmp	r3, #1
 800298e:	d107      	bne.n	80029a0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002990:	2301      	movs	r3, #1
 8002992:	e019      	b.n	80029c8 <HAL_RCC_OscConfig+0x4f8>
 8002994:	40021000 	.word	0x40021000
 8002998:	40007000 	.word	0x40007000
 800299c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80029a0:	4b0b      	ldr	r3, [pc, #44]	@ (80029d0 <HAL_RCC_OscConfig+0x500>)
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6a1b      	ldr	r3, [r3, #32]
 80029b0:	429a      	cmp	r2, r3
 80029b2:	d106      	bne.n	80029c2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029be:	429a      	cmp	r2, r3
 80029c0:	d001      	beq.n	80029c6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
 80029c4:	e000      	b.n	80029c8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80029c6:	2300      	movs	r3, #0
}
 80029c8:	4618      	mov	r0, r3
 80029ca:	3718      	adds	r7, #24
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bd80      	pop	{r7, pc}
 80029d0:	40021000 	.word	0x40021000

080029d4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b084      	sub	sp, #16
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
 80029dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d101      	bne.n	80029e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029e4:	2301      	movs	r3, #1
 80029e6:	e0d0      	b.n	8002b8a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80029e8:	4b6a      	ldr	r3, [pc, #424]	@ (8002b94 <HAL_RCC_ClockConfig+0x1c0>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f003 0307 	and.w	r3, r3, #7
 80029f0:	683a      	ldr	r2, [r7, #0]
 80029f2:	429a      	cmp	r2, r3
 80029f4:	d910      	bls.n	8002a18 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029f6:	4b67      	ldr	r3, [pc, #412]	@ (8002b94 <HAL_RCC_ClockConfig+0x1c0>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f023 0207 	bic.w	r2, r3, #7
 80029fe:	4965      	ldr	r1, [pc, #404]	@ (8002b94 <HAL_RCC_ClockConfig+0x1c0>)
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	4313      	orrs	r3, r2
 8002a04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a06:	4b63      	ldr	r3, [pc, #396]	@ (8002b94 <HAL_RCC_ClockConfig+0x1c0>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f003 0307 	and.w	r3, r3, #7
 8002a0e:	683a      	ldr	r2, [r7, #0]
 8002a10:	429a      	cmp	r2, r3
 8002a12:	d001      	beq.n	8002a18 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002a14:	2301      	movs	r3, #1
 8002a16:	e0b8      	b.n	8002b8a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f003 0302 	and.w	r3, r3, #2
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d020      	beq.n	8002a66 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f003 0304 	and.w	r3, r3, #4
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d005      	beq.n	8002a3c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a30:	4b59      	ldr	r3, [pc, #356]	@ (8002b98 <HAL_RCC_ClockConfig+0x1c4>)
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	4a58      	ldr	r2, [pc, #352]	@ (8002b98 <HAL_RCC_ClockConfig+0x1c4>)
 8002a36:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002a3a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f003 0308 	and.w	r3, r3, #8
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d005      	beq.n	8002a54 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a48:	4b53      	ldr	r3, [pc, #332]	@ (8002b98 <HAL_RCC_ClockConfig+0x1c4>)
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	4a52      	ldr	r2, [pc, #328]	@ (8002b98 <HAL_RCC_ClockConfig+0x1c4>)
 8002a4e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002a52:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a54:	4b50      	ldr	r3, [pc, #320]	@ (8002b98 <HAL_RCC_ClockConfig+0x1c4>)
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	689b      	ldr	r3, [r3, #8]
 8002a60:	494d      	ldr	r1, [pc, #308]	@ (8002b98 <HAL_RCC_ClockConfig+0x1c4>)
 8002a62:	4313      	orrs	r3, r2
 8002a64:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f003 0301 	and.w	r3, r3, #1
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d040      	beq.n	8002af4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	2b01      	cmp	r3, #1
 8002a78:	d107      	bne.n	8002a8a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a7a:	4b47      	ldr	r3, [pc, #284]	@ (8002b98 <HAL_RCC_ClockConfig+0x1c4>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d115      	bne.n	8002ab2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a86:	2301      	movs	r3, #1
 8002a88:	e07f      	b.n	8002b8a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	2b02      	cmp	r3, #2
 8002a90:	d107      	bne.n	8002aa2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a92:	4b41      	ldr	r3, [pc, #260]	@ (8002b98 <HAL_RCC_ClockConfig+0x1c4>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d109      	bne.n	8002ab2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e073      	b.n	8002b8a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002aa2:	4b3d      	ldr	r3, [pc, #244]	@ (8002b98 <HAL_RCC_ClockConfig+0x1c4>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f003 0302 	and.w	r3, r3, #2
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d101      	bne.n	8002ab2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e06b      	b.n	8002b8a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ab2:	4b39      	ldr	r3, [pc, #228]	@ (8002b98 <HAL_RCC_ClockConfig+0x1c4>)
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	f023 0203 	bic.w	r2, r3, #3
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	4936      	ldr	r1, [pc, #216]	@ (8002b98 <HAL_RCC_ClockConfig+0x1c4>)
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ac4:	f7fe faba 	bl	800103c <HAL_GetTick>
 8002ac8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002aca:	e00a      	b.n	8002ae2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002acc:	f7fe fab6 	bl	800103c <HAL_GetTick>
 8002ad0:	4602      	mov	r2, r0
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	1ad3      	subs	r3, r2, r3
 8002ad6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d901      	bls.n	8002ae2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002ade:	2303      	movs	r3, #3
 8002ae0:	e053      	b.n	8002b8a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ae2:	4b2d      	ldr	r3, [pc, #180]	@ (8002b98 <HAL_RCC_ClockConfig+0x1c4>)
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	f003 020c 	and.w	r2, r3, #12
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	009b      	lsls	r3, r3, #2
 8002af0:	429a      	cmp	r2, r3
 8002af2:	d1eb      	bne.n	8002acc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002af4:	4b27      	ldr	r3, [pc, #156]	@ (8002b94 <HAL_RCC_ClockConfig+0x1c0>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f003 0307 	and.w	r3, r3, #7
 8002afc:	683a      	ldr	r2, [r7, #0]
 8002afe:	429a      	cmp	r2, r3
 8002b00:	d210      	bcs.n	8002b24 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b02:	4b24      	ldr	r3, [pc, #144]	@ (8002b94 <HAL_RCC_ClockConfig+0x1c0>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f023 0207 	bic.w	r2, r3, #7
 8002b0a:	4922      	ldr	r1, [pc, #136]	@ (8002b94 <HAL_RCC_ClockConfig+0x1c0>)
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b12:	4b20      	ldr	r3, [pc, #128]	@ (8002b94 <HAL_RCC_ClockConfig+0x1c0>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f003 0307 	and.w	r3, r3, #7
 8002b1a:	683a      	ldr	r2, [r7, #0]
 8002b1c:	429a      	cmp	r2, r3
 8002b1e:	d001      	beq.n	8002b24 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002b20:	2301      	movs	r3, #1
 8002b22:	e032      	b.n	8002b8a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f003 0304 	and.w	r3, r3, #4
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d008      	beq.n	8002b42 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b30:	4b19      	ldr	r3, [pc, #100]	@ (8002b98 <HAL_RCC_ClockConfig+0x1c4>)
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	68db      	ldr	r3, [r3, #12]
 8002b3c:	4916      	ldr	r1, [pc, #88]	@ (8002b98 <HAL_RCC_ClockConfig+0x1c4>)
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f003 0308 	and.w	r3, r3, #8
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d009      	beq.n	8002b62 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002b4e:	4b12      	ldr	r3, [pc, #72]	@ (8002b98 <HAL_RCC_ClockConfig+0x1c4>)
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	691b      	ldr	r3, [r3, #16]
 8002b5a:	00db      	lsls	r3, r3, #3
 8002b5c:	490e      	ldr	r1, [pc, #56]	@ (8002b98 <HAL_RCC_ClockConfig+0x1c4>)
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002b62:	f000 f821 	bl	8002ba8 <HAL_RCC_GetSysClockFreq>
 8002b66:	4602      	mov	r2, r0
 8002b68:	4b0b      	ldr	r3, [pc, #44]	@ (8002b98 <HAL_RCC_ClockConfig+0x1c4>)
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	091b      	lsrs	r3, r3, #4
 8002b6e:	f003 030f 	and.w	r3, r3, #15
 8002b72:	490a      	ldr	r1, [pc, #40]	@ (8002b9c <HAL_RCC_ClockConfig+0x1c8>)
 8002b74:	5ccb      	ldrb	r3, [r1, r3]
 8002b76:	fa22 f303 	lsr.w	r3, r2, r3
 8002b7a:	4a09      	ldr	r2, [pc, #36]	@ (8002ba0 <HAL_RCC_ClockConfig+0x1cc>)
 8002b7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002b7e:	4b09      	ldr	r3, [pc, #36]	@ (8002ba4 <HAL_RCC_ClockConfig+0x1d0>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4618      	mov	r0, r3
 8002b84:	f7fe fa18 	bl	8000fb8 <HAL_InitTick>

  return HAL_OK;
 8002b88:	2300      	movs	r3, #0
}
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	3710      	adds	r7, #16
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}
 8002b92:	bf00      	nop
 8002b94:	40022000 	.word	0x40022000
 8002b98:	40021000 	.word	0x40021000
 8002b9c:	08005bf8 	.word	0x08005bf8
 8002ba0:	20000040 	.word	0x20000040
 8002ba4:	20000044 	.word	0x20000044

08002ba8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b087      	sub	sp, #28
 8002bac:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	60fb      	str	r3, [r7, #12]
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	60bb      	str	r3, [r7, #8]
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	617b      	str	r3, [r7, #20]
 8002bba:	2300      	movs	r3, #0
 8002bbc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002bc2:	4b1e      	ldr	r3, [pc, #120]	@ (8002c3c <HAL_RCC_GetSysClockFreq+0x94>)
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	f003 030c 	and.w	r3, r3, #12
 8002bce:	2b04      	cmp	r3, #4
 8002bd0:	d002      	beq.n	8002bd8 <HAL_RCC_GetSysClockFreq+0x30>
 8002bd2:	2b08      	cmp	r3, #8
 8002bd4:	d003      	beq.n	8002bde <HAL_RCC_GetSysClockFreq+0x36>
 8002bd6:	e027      	b.n	8002c28 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002bd8:	4b19      	ldr	r3, [pc, #100]	@ (8002c40 <HAL_RCC_GetSysClockFreq+0x98>)
 8002bda:	613b      	str	r3, [r7, #16]
      break;
 8002bdc:	e027      	b.n	8002c2e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	0c9b      	lsrs	r3, r3, #18
 8002be2:	f003 030f 	and.w	r3, r3, #15
 8002be6:	4a17      	ldr	r2, [pc, #92]	@ (8002c44 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002be8:	5cd3      	ldrb	r3, [r2, r3]
 8002bea:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d010      	beq.n	8002c18 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002bf6:	4b11      	ldr	r3, [pc, #68]	@ (8002c3c <HAL_RCC_GetSysClockFreq+0x94>)
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	0c5b      	lsrs	r3, r3, #17
 8002bfc:	f003 0301 	and.w	r3, r3, #1
 8002c00:	4a11      	ldr	r2, [pc, #68]	@ (8002c48 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002c02:	5cd3      	ldrb	r3, [r2, r3]
 8002c04:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	4a0d      	ldr	r2, [pc, #52]	@ (8002c40 <HAL_RCC_GetSysClockFreq+0x98>)
 8002c0a:	fb03 f202 	mul.w	r2, r3, r2
 8002c0e:	68bb      	ldr	r3, [r7, #8]
 8002c10:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c14:	617b      	str	r3, [r7, #20]
 8002c16:	e004      	b.n	8002c22 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	4a0c      	ldr	r2, [pc, #48]	@ (8002c4c <HAL_RCC_GetSysClockFreq+0xa4>)
 8002c1c:	fb02 f303 	mul.w	r3, r2, r3
 8002c20:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002c22:	697b      	ldr	r3, [r7, #20]
 8002c24:	613b      	str	r3, [r7, #16]
      break;
 8002c26:	e002      	b.n	8002c2e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002c28:	4b05      	ldr	r3, [pc, #20]	@ (8002c40 <HAL_RCC_GetSysClockFreq+0x98>)
 8002c2a:	613b      	str	r3, [r7, #16]
      break;
 8002c2c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c2e:	693b      	ldr	r3, [r7, #16]
}
 8002c30:	4618      	mov	r0, r3
 8002c32:	371c      	adds	r7, #28
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bc80      	pop	{r7}
 8002c38:	4770      	bx	lr
 8002c3a:	bf00      	nop
 8002c3c:	40021000 	.word	0x40021000
 8002c40:	007a1200 	.word	0x007a1200
 8002c44:	08005c10 	.word	0x08005c10
 8002c48:	08005c20 	.word	0x08005c20
 8002c4c:	003d0900 	.word	0x003d0900

08002c50 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c50:	b480      	push	{r7}
 8002c52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c54:	4b02      	ldr	r3, [pc, #8]	@ (8002c60 <HAL_RCC_GetHCLKFreq+0x10>)
 8002c56:	681b      	ldr	r3, [r3, #0]
}
 8002c58:	4618      	mov	r0, r3
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bc80      	pop	{r7}
 8002c5e:	4770      	bx	lr
 8002c60:	20000040 	.word	0x20000040

08002c64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002c68:	f7ff fff2 	bl	8002c50 <HAL_RCC_GetHCLKFreq>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	4b05      	ldr	r3, [pc, #20]	@ (8002c84 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	0a1b      	lsrs	r3, r3, #8
 8002c74:	f003 0307 	and.w	r3, r3, #7
 8002c78:	4903      	ldr	r1, [pc, #12]	@ (8002c88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c7a:	5ccb      	ldrb	r3, [r1, r3]
 8002c7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c80:	4618      	mov	r0, r3
 8002c82:	bd80      	pop	{r7, pc}
 8002c84:	40021000 	.word	0x40021000
 8002c88:	08005c08 	.word	0x08005c08

08002c8c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002c90:	f7ff ffde 	bl	8002c50 <HAL_RCC_GetHCLKFreq>
 8002c94:	4602      	mov	r2, r0
 8002c96:	4b05      	ldr	r3, [pc, #20]	@ (8002cac <HAL_RCC_GetPCLK2Freq+0x20>)
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	0adb      	lsrs	r3, r3, #11
 8002c9c:	f003 0307 	and.w	r3, r3, #7
 8002ca0:	4903      	ldr	r1, [pc, #12]	@ (8002cb0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ca2:	5ccb      	ldrb	r3, [r1, r3]
 8002ca4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ca8:	4618      	mov	r0, r3
 8002caa:	bd80      	pop	{r7, pc}
 8002cac:	40021000 	.word	0x40021000
 8002cb0:	08005c08 	.word	0x08005c08

08002cb4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b085      	sub	sp, #20
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002cbc:	4b0a      	ldr	r3, [pc, #40]	@ (8002ce8 <RCC_Delay+0x34>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a0a      	ldr	r2, [pc, #40]	@ (8002cec <RCC_Delay+0x38>)
 8002cc2:	fba2 2303 	umull	r2, r3, r2, r3
 8002cc6:	0a5b      	lsrs	r3, r3, #9
 8002cc8:	687a      	ldr	r2, [r7, #4]
 8002cca:	fb02 f303 	mul.w	r3, r2, r3
 8002cce:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002cd0:	bf00      	nop
  }
  while (Delay --);
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	1e5a      	subs	r2, r3, #1
 8002cd6:	60fa      	str	r2, [r7, #12]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d1f9      	bne.n	8002cd0 <RCC_Delay+0x1c>
}
 8002cdc:	bf00      	nop
 8002cde:	bf00      	nop
 8002ce0:	3714      	adds	r7, #20
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bc80      	pop	{r7}
 8002ce6:	4770      	bx	lr
 8002ce8:	20000040 	.word	0x20000040
 8002cec:	10624dd3 	.word	0x10624dd3

08002cf0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b086      	sub	sp, #24
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	613b      	str	r3, [r7, #16]
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f003 0301 	and.w	r3, r3, #1
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d07d      	beq.n	8002e08 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d10:	4b4f      	ldr	r3, [pc, #316]	@ (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d12:	69db      	ldr	r3, [r3, #28]
 8002d14:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d10d      	bne.n	8002d38 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d1c:	4b4c      	ldr	r3, [pc, #304]	@ (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d1e:	69db      	ldr	r3, [r3, #28]
 8002d20:	4a4b      	ldr	r2, [pc, #300]	@ (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d22:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d26:	61d3      	str	r3, [r2, #28]
 8002d28:	4b49      	ldr	r3, [pc, #292]	@ (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d2a:	69db      	ldr	r3, [r3, #28]
 8002d2c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d30:	60bb      	str	r3, [r7, #8]
 8002d32:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d34:	2301      	movs	r3, #1
 8002d36:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d38:	4b46      	ldr	r3, [pc, #280]	@ (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d118      	bne.n	8002d76 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d44:	4b43      	ldr	r3, [pc, #268]	@ (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a42      	ldr	r2, [pc, #264]	@ (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002d4a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d4e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d50:	f7fe f974 	bl	800103c <HAL_GetTick>
 8002d54:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d56:	e008      	b.n	8002d6a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d58:	f7fe f970 	bl	800103c <HAL_GetTick>
 8002d5c:	4602      	mov	r2, r0
 8002d5e:	693b      	ldr	r3, [r7, #16]
 8002d60:	1ad3      	subs	r3, r2, r3
 8002d62:	2b64      	cmp	r3, #100	@ 0x64
 8002d64:	d901      	bls.n	8002d6a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002d66:	2303      	movs	r3, #3
 8002d68:	e06d      	b.n	8002e46 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d6a:	4b3a      	ldr	r3, [pc, #232]	@ (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d0f0      	beq.n	8002d58 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002d76:	4b36      	ldr	r3, [pc, #216]	@ (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d78:	6a1b      	ldr	r3, [r3, #32]
 8002d7a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002d7e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d02e      	beq.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002d8e:	68fa      	ldr	r2, [r7, #12]
 8002d90:	429a      	cmp	r2, r3
 8002d92:	d027      	beq.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002d94:	4b2e      	ldr	r3, [pc, #184]	@ (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d96:	6a1b      	ldr	r3, [r3, #32]
 8002d98:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002d9c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002d9e:	4b2e      	ldr	r3, [pc, #184]	@ (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002da0:	2201      	movs	r2, #1
 8002da2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002da4:	4b2c      	ldr	r3, [pc, #176]	@ (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002da6:	2200      	movs	r2, #0
 8002da8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002daa:	4a29      	ldr	r2, [pc, #164]	@ (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	f003 0301 	and.w	r3, r3, #1
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d014      	beq.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dba:	f7fe f93f 	bl	800103c <HAL_GetTick>
 8002dbe:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dc0:	e00a      	b.n	8002dd8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dc2:	f7fe f93b 	bl	800103c <HAL_GetTick>
 8002dc6:	4602      	mov	r2, r0
 8002dc8:	693b      	ldr	r3, [r7, #16]
 8002dca:	1ad3      	subs	r3, r2, r3
 8002dcc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d901      	bls.n	8002dd8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002dd4:	2303      	movs	r3, #3
 8002dd6:	e036      	b.n	8002e46 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dd8:	4b1d      	ldr	r3, [pc, #116]	@ (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dda:	6a1b      	ldr	r3, [r3, #32]
 8002ddc:	f003 0302 	and.w	r3, r3, #2
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d0ee      	beq.n	8002dc2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002de4:	4b1a      	ldr	r3, [pc, #104]	@ (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002de6:	6a1b      	ldr	r3, [r3, #32]
 8002de8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	4917      	ldr	r1, [pc, #92]	@ (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002df2:	4313      	orrs	r3, r2
 8002df4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002df6:	7dfb      	ldrb	r3, [r7, #23]
 8002df8:	2b01      	cmp	r3, #1
 8002dfa:	d105      	bne.n	8002e08 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002dfc:	4b14      	ldr	r3, [pc, #80]	@ (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dfe:	69db      	ldr	r3, [r3, #28]
 8002e00:	4a13      	ldr	r2, [pc, #76]	@ (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e02:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002e06:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f003 0302 	and.w	r3, r3, #2
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d008      	beq.n	8002e26 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002e14:	4b0e      	ldr	r3, [pc, #56]	@ (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	689b      	ldr	r3, [r3, #8]
 8002e20:	490b      	ldr	r1, [pc, #44]	@ (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e22:	4313      	orrs	r3, r2
 8002e24:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f003 0310 	and.w	r3, r3, #16
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d008      	beq.n	8002e44 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002e32:	4b07      	ldr	r3, [pc, #28]	@ (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	68db      	ldr	r3, [r3, #12]
 8002e3e:	4904      	ldr	r1, [pc, #16]	@ (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e40:	4313      	orrs	r3, r2
 8002e42:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002e44:	2300      	movs	r3, #0
}
 8002e46:	4618      	mov	r0, r3
 8002e48:	3718      	adds	r7, #24
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}
 8002e4e:	bf00      	nop
 8002e50:	40021000 	.word	0x40021000
 8002e54:	40007000 	.word	0x40007000
 8002e58:	42420440 	.word	0x42420440

08002e5c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b088      	sub	sp, #32
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8002e64:	2300      	movs	r3, #0
 8002e66:	617b      	str	r3, [r7, #20]
 8002e68:	2300      	movs	r3, #0
 8002e6a:	61fb      	str	r3, [r7, #28]
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8002e70:	2300      	movs	r3, #0
 8002e72:	60fb      	str	r3, [r7, #12]
 8002e74:	2300      	movs	r3, #0
 8002e76:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2b10      	cmp	r3, #16
 8002e7c:	d00a      	beq.n	8002e94 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2b10      	cmp	r3, #16
 8002e82:	f200 808a 	bhi.w	8002f9a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2b01      	cmp	r3, #1
 8002e8a:	d045      	beq.n	8002f18 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2b02      	cmp	r3, #2
 8002e90:	d075      	beq.n	8002f7e <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8002e92:	e082      	b.n	8002f9a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8002e94:	4b46      	ldr	r3, [pc, #280]	@ (8002fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8002e9a:	4b45      	ldr	r3, [pc, #276]	@ (8002fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d07b      	beq.n	8002f9e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	0c9b      	lsrs	r3, r3, #18
 8002eaa:	f003 030f 	and.w	r3, r3, #15
 8002eae:	4a41      	ldr	r2, [pc, #260]	@ (8002fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8002eb0:	5cd3      	ldrb	r3, [r2, r3]
 8002eb2:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d015      	beq.n	8002eea <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002ebe:	4b3c      	ldr	r3, [pc, #240]	@ (8002fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	0c5b      	lsrs	r3, r3, #17
 8002ec4:	f003 0301 	and.w	r3, r3, #1
 8002ec8:	4a3b      	ldr	r2, [pc, #236]	@ (8002fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8002eca:	5cd3      	ldrb	r3, [r2, r3]
 8002ecc:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d00d      	beq.n	8002ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002ed8:	4a38      	ldr	r2, [pc, #224]	@ (8002fbc <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8002eda:	697b      	ldr	r3, [r7, #20]
 8002edc:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ee0:	693b      	ldr	r3, [r7, #16]
 8002ee2:	fb02 f303 	mul.w	r3, r2, r3
 8002ee6:	61fb      	str	r3, [r7, #28]
 8002ee8:	e004      	b.n	8002ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002eea:	693b      	ldr	r3, [r7, #16]
 8002eec:	4a34      	ldr	r2, [pc, #208]	@ (8002fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8002eee:	fb02 f303 	mul.w	r3, r2, r3
 8002ef2:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002ef4:	4b2e      	ldr	r3, [pc, #184]	@ (8002fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002efc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002f00:	d102      	bne.n	8002f08 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8002f02:	69fb      	ldr	r3, [r7, #28]
 8002f04:	61bb      	str	r3, [r7, #24]
      break;
 8002f06:	e04a      	b.n	8002f9e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8002f08:	69fb      	ldr	r3, [r7, #28]
 8002f0a:	005b      	lsls	r3, r3, #1
 8002f0c:	4a2d      	ldr	r2, [pc, #180]	@ (8002fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002f0e:	fba2 2303 	umull	r2, r3, r2, r3
 8002f12:	085b      	lsrs	r3, r3, #1
 8002f14:	61bb      	str	r3, [r7, #24]
      break;
 8002f16:	e042      	b.n	8002f9e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8002f18:	4b25      	ldr	r3, [pc, #148]	@ (8002fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002f1a:	6a1b      	ldr	r3, [r3, #32]
 8002f1c:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002f24:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002f28:	d108      	bne.n	8002f3c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	f003 0302 	and.w	r3, r3, #2
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d003      	beq.n	8002f3c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8002f34:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002f38:	61bb      	str	r3, [r7, #24]
 8002f3a:	e01f      	b.n	8002f7c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002f42:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002f46:	d109      	bne.n	8002f5c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8002f48:	4b19      	ldr	r3, [pc, #100]	@ (8002fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002f4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f4c:	f003 0302 	and.w	r3, r3, #2
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d003      	beq.n	8002f5c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8002f54:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8002f58:	61bb      	str	r3, [r7, #24]
 8002f5a:	e00f      	b.n	8002f7c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002f62:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002f66:	d11c      	bne.n	8002fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8002f68:	4b11      	ldr	r3, [pc, #68]	@ (8002fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d016      	beq.n	8002fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8002f74:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8002f78:	61bb      	str	r3, [r7, #24]
      break;
 8002f7a:	e012      	b.n	8002fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8002f7c:	e011      	b.n	8002fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8002f7e:	f7ff fe85 	bl	8002c8c <HAL_RCC_GetPCLK2Freq>
 8002f82:	4602      	mov	r2, r0
 8002f84:	4b0a      	ldr	r3, [pc, #40]	@ (8002fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	0b9b      	lsrs	r3, r3, #14
 8002f8a:	f003 0303 	and.w	r3, r3, #3
 8002f8e:	3301      	adds	r3, #1
 8002f90:	005b      	lsls	r3, r3, #1
 8002f92:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f96:	61bb      	str	r3, [r7, #24]
      break;
 8002f98:	e004      	b.n	8002fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002f9a:	bf00      	nop
 8002f9c:	e002      	b.n	8002fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002f9e:	bf00      	nop
 8002fa0:	e000      	b.n	8002fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002fa2:	bf00      	nop
    }
  }
  return (frequency);
 8002fa4:	69bb      	ldr	r3, [r7, #24]
}
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	3720      	adds	r7, #32
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}
 8002fae:	bf00      	nop
 8002fb0:	40021000 	.word	0x40021000
 8002fb4:	08005c24 	.word	0x08005c24
 8002fb8:	08005c34 	.word	0x08005c34
 8002fbc:	007a1200 	.word	0x007a1200
 8002fc0:	003d0900 	.word	0x003d0900
 8002fc4:	aaaaaaab 	.word	0xaaaaaaab

08002fc8 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b084      	sub	sp, #16
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d101      	bne.n	8002fde <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	e07a      	b.n	80030d4 <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	7c5b      	ldrb	r3, [r3, #17]
 8002fe2:	b2db      	uxtb	r3, r3
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d105      	bne.n	8002ff4 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2200      	movs	r2, #0
 8002fec:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002fee:	6878      	ldr	r0, [r7, #4]
 8002ff0:	f7fd fc6a 	bl	80008c8 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2202      	movs	r2, #2
 8002ff8:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002ffa:	6878      	ldr	r0, [r7, #4]
 8002ffc:	f000 faea 	bl	80035d4 <HAL_RTC_WaitForSynchro>
 8003000:	4603      	mov	r3, r0
 8003002:	2b00      	cmp	r3, #0
 8003004:	d004      	beq.n	8003010 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2204      	movs	r2, #4
 800300a:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 800300c:	2301      	movs	r3, #1
 800300e:	e061      	b.n	80030d4 <HAL_RTC_Init+0x10c>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003010:	6878      	ldr	r0, [r7, #4]
 8003012:	f000 fba3 	bl	800375c <RTC_EnterInitMode>
 8003016:	4603      	mov	r3, r0
 8003018:	2b00      	cmp	r3, #0
 800301a:	d004      	beq.n	8003026 <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2204      	movs	r2, #4
 8003020:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8003022:	2301      	movs	r3, #1
 8003024:	e056      	b.n	80030d4 <HAL_RTC_Init+0x10c>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	685a      	ldr	r2, [r3, #4]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f022 0207 	bic.w	r2, r2, #7
 8003034:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	689b      	ldr	r3, [r3, #8]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d005      	beq.n	800304a <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 800303e:	4b27      	ldr	r3, [pc, #156]	@ (80030dc <HAL_RTC_Init+0x114>)
 8003040:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003042:	4a26      	ldr	r2, [pc, #152]	@ (80030dc <HAL_RTC_Init+0x114>)
 8003044:	f023 0301 	bic.w	r3, r3, #1
 8003048:	6313      	str	r3, [r2, #48]	@ 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 800304a:	4b24      	ldr	r3, [pc, #144]	@ (80030dc <HAL_RTC_Init+0x114>)
 800304c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800304e:	f423 7260 	bic.w	r2, r3, #896	@ 0x380
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	689b      	ldr	r3, [r3, #8]
 8003056:	4921      	ldr	r1, [pc, #132]	@ (80030dc <HAL_RTC_Init+0x114>)
 8003058:	4313      	orrs	r3, r2
 800305a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003064:	d003      	beq.n	800306e <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	60fb      	str	r3, [r7, #12]
 800306c:	e00e      	b.n	800308c <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 800306e:	2001      	movs	r0, #1
 8003070:	f7ff fef4 	bl	8002e5c <HAL_RCCEx_GetPeriphCLKFreq>
 8003074:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d104      	bne.n	8003086 <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2204      	movs	r2, #4
 8003080:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8003082:	2301      	movs	r3, #1
 8003084:	e026      	b.n	80030d4 <HAL_RTC_Init+0x10c>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	3b01      	subs	r3, #1
 800308a:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	0c1a      	lsrs	r2, r3, #16
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f002 020f 	and.w	r2, r2, #15
 8003098:	609a      	str	r2, [r3, #8]
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	68fa      	ldr	r2, [r7, #12]
 80030a0:	b292      	uxth	r2, r2
 80030a2:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80030a4:	6878      	ldr	r0, [r7, #4]
 80030a6:	f000 fb81 	bl	80037ac <RTC_ExitInitMode>
 80030aa:	4603      	mov	r3, r0
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d004      	beq.n	80030ba <HAL_RTC_Init+0xf2>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2204      	movs	r2, #4
 80030b4:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 80030b6:	2301      	movs	r3, #1
 80030b8:	e00c      	b.n	80030d4 <HAL_RTC_Init+0x10c>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2200      	movs	r2, #0
 80030be:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2201      	movs	r2, #1
 80030c4:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2201      	movs	r2, #1
 80030ca:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2201      	movs	r2, #1
 80030d0:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 80030d2:	2300      	movs	r3, #0
  }
}
 80030d4:	4618      	mov	r0, r3
 80030d6:	3710      	adds	r7, #16
 80030d8:	46bd      	mov	sp, r7
 80030da:	bd80      	pop	{r7, pc}
 80030dc:	40006c00 	.word	0x40006c00

080030e0 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80030e0:	b590      	push	{r4, r7, lr}
 80030e2:	b087      	sub	sp, #28
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	60f8      	str	r0, [r7, #12]
 80030e8:	60b9      	str	r1, [r7, #8]
 80030ea:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 80030ec:	2300      	movs	r3, #0
 80030ee:	617b      	str	r3, [r7, #20]
 80030f0:	2300      	movs	r3, #0
 80030f2:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d002      	beq.n	8003100 <HAL_RTC_SetTime+0x20>
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d101      	bne.n	8003104 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 8003100:	2301      	movs	r3, #1
 8003102:	e080      	b.n	8003206 <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	7c1b      	ldrb	r3, [r3, #16]
 8003108:	2b01      	cmp	r3, #1
 800310a:	d101      	bne.n	8003110 <HAL_RTC_SetTime+0x30>
 800310c:	2302      	movs	r3, #2
 800310e:	e07a      	b.n	8003206 <HAL_RTC_SetTime+0x126>
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	2201      	movs	r2, #1
 8003114:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	2202      	movs	r2, #2
 800311a:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d113      	bne.n	800314a <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8003122:	68bb      	ldr	r3, [r7, #8]
 8003124:	781b      	ldrb	r3, [r3, #0]
 8003126:	461a      	mov	r2, r3
 8003128:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 800312c:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	785b      	ldrb	r3, [r3, #1]
 8003134:	4619      	mov	r1, r3
 8003136:	460b      	mov	r3, r1
 8003138:	011b      	lsls	r3, r3, #4
 800313a:	1a5b      	subs	r3, r3, r1
 800313c:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 800313e:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 8003140:	68ba      	ldr	r2, [r7, #8]
 8003142:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8003144:	4413      	add	r3, r2
 8003146:	617b      	str	r3, [r7, #20]
 8003148:	e01e      	b.n	8003188 <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 800314a:	68bb      	ldr	r3, [r7, #8]
 800314c:	781b      	ldrb	r3, [r3, #0]
 800314e:	4618      	mov	r0, r3
 8003150:	f000 fb71 	bl	8003836 <RTC_Bcd2ToByte>
 8003154:	4603      	mov	r3, r0
 8003156:	461a      	mov	r2, r3
 8003158:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 800315c:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	785b      	ldrb	r3, [r3, #1]
 8003164:	4618      	mov	r0, r3
 8003166:	f000 fb66 	bl	8003836 <RTC_Bcd2ToByte>
 800316a:	4603      	mov	r3, r0
 800316c:	461a      	mov	r2, r3
 800316e:	4613      	mov	r3, r2
 8003170:	011b      	lsls	r3, r3, #4
 8003172:	1a9b      	subs	r3, r3, r2
 8003174:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8003176:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8003178:	68bb      	ldr	r3, [r7, #8]
 800317a:	789b      	ldrb	r3, [r3, #2]
 800317c:	4618      	mov	r0, r3
 800317e:	f000 fb5a 	bl	8003836 <RTC_Bcd2ToByte>
 8003182:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8003184:	4423      	add	r3, r4
 8003186:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8003188:	6979      	ldr	r1, [r7, #20]
 800318a:	68f8      	ldr	r0, [r7, #12]
 800318c:	f000 fa7f 	bl	800368e <RTC_WriteTimeCounter>
 8003190:	4603      	mov	r3, r0
 8003192:	2b00      	cmp	r3, #0
 8003194:	d007      	beq.n	80031a6 <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	2204      	movs	r2, #4
 800319a:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	2200      	movs	r2, #0
 80031a0:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 80031a2:	2301      	movs	r3, #1
 80031a4:	e02f      	b.n	8003206 <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	685a      	ldr	r2, [r3, #4]
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f022 0205 	bic.w	r2, r2, #5
 80031b4:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80031b6:	68f8      	ldr	r0, [r7, #12]
 80031b8:	f000 fa90 	bl	80036dc <RTC_ReadAlarmCounter>
 80031bc:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031c4:	d018      	beq.n	80031f8 <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 80031c6:	693a      	ldr	r2, [r7, #16]
 80031c8:	697b      	ldr	r3, [r7, #20]
 80031ca:	429a      	cmp	r2, r3
 80031cc:	d214      	bcs.n	80031f8 <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 80031ce:	693b      	ldr	r3, [r7, #16]
 80031d0:	f503 33a8 	add.w	r3, r3, #86016	@ 0x15000
 80031d4:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 80031d8:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80031da:	6939      	ldr	r1, [r7, #16]
 80031dc:	68f8      	ldr	r0, [r7, #12]
 80031de:	f000 fa96 	bl	800370e <RTC_WriteAlarmCounter>
 80031e2:	4603      	mov	r3, r0
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d007      	beq.n	80031f8 <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	2204      	movs	r2, #4
 80031ec:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	2200      	movs	r2, #0
 80031f2:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 80031f4:	2301      	movs	r3, #1
 80031f6:	e006      	b.n	8003206 <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	2201      	movs	r2, #1
 80031fc:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	2200      	movs	r2, #0
 8003202:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8003204:	2300      	movs	r3, #0
  }
}
 8003206:	4618      	mov	r0, r3
 8003208:	371c      	adds	r7, #28
 800320a:	46bd      	mov	sp, r7
 800320c:	bd90      	pop	{r4, r7, pc}
	...

08003210 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b088      	sub	sp, #32
 8003214:	af00      	add	r7, sp, #0
 8003216:	60f8      	str	r0, [r7, #12]
 8003218:	60b9      	str	r1, [r7, #8]
 800321a:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 800321c:	2300      	movs	r3, #0
 800321e:	61bb      	str	r3, [r7, #24]
 8003220:	2300      	movs	r3, #0
 8003222:	61fb      	str	r3, [r7, #28]
 8003224:	2300      	movs	r3, #0
 8003226:	617b      	str	r3, [r7, #20]
 8003228:	2300      	movs	r3, #0
 800322a:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d002      	beq.n	8003238 <HAL_RTC_GetTime+0x28>
 8003232:	68bb      	ldr	r3, [r7, #8]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d101      	bne.n	800323c <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 8003238:	2301      	movs	r3, #1
 800323a:	e0b5      	b.n	80033a8 <HAL_RTC_GetTime+0x198>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	f003 0304 	and.w	r3, r3, #4
 8003246:	2b00      	cmp	r3, #0
 8003248:	d001      	beq.n	800324e <HAL_RTC_GetTime+0x3e>
  {
    return HAL_ERROR;
 800324a:	2301      	movs	r3, #1
 800324c:	e0ac      	b.n	80033a8 <HAL_RTC_GetTime+0x198>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 800324e:	68f8      	ldr	r0, [r7, #12]
 8003250:	f000 f9ed 	bl	800362e <RTC_ReadTimeCounter>
 8003254:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8003256:	69bb      	ldr	r3, [r7, #24]
 8003258:	4a55      	ldr	r2, [pc, #340]	@ (80033b0 <HAL_RTC_GetTime+0x1a0>)
 800325a:	fba2 2303 	umull	r2, r3, r2, r3
 800325e:	0adb      	lsrs	r3, r3, #11
 8003260:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 8003262:	69ba      	ldr	r2, [r7, #24]
 8003264:	4b52      	ldr	r3, [pc, #328]	@ (80033b0 <HAL_RTC_GetTime+0x1a0>)
 8003266:	fba3 1302 	umull	r1, r3, r3, r2
 800326a:	0adb      	lsrs	r3, r3, #11
 800326c:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 8003270:	fb01 f303 	mul.w	r3, r1, r3
 8003274:	1ad3      	subs	r3, r2, r3
 8003276:	4a4f      	ldr	r2, [pc, #316]	@ (80033b4 <HAL_RTC_GetTime+0x1a4>)
 8003278:	fba2 2303 	umull	r2, r3, r2, r3
 800327c:	095b      	lsrs	r3, r3, #5
 800327e:	b2da      	uxtb	r2, r3
 8003280:	68bb      	ldr	r3, [r7, #8]
 8003282:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 8003284:	69bb      	ldr	r3, [r7, #24]
 8003286:	4a4a      	ldr	r2, [pc, #296]	@ (80033b0 <HAL_RTC_GetTime+0x1a0>)
 8003288:	fba2 1203 	umull	r1, r2, r2, r3
 800328c:	0ad2      	lsrs	r2, r2, #11
 800328e:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 8003292:	fb01 f202 	mul.w	r2, r1, r2
 8003296:	1a9a      	subs	r2, r3, r2
 8003298:	4b46      	ldr	r3, [pc, #280]	@ (80033b4 <HAL_RTC_GetTime+0x1a4>)
 800329a:	fba3 1302 	umull	r1, r3, r3, r2
 800329e:	0959      	lsrs	r1, r3, #5
 80032a0:	460b      	mov	r3, r1
 80032a2:	011b      	lsls	r3, r3, #4
 80032a4:	1a5b      	subs	r3, r3, r1
 80032a6:	009b      	lsls	r3, r3, #2
 80032a8:	1ad1      	subs	r1, r2, r3
 80032aa:	b2ca      	uxtb	r2, r1
 80032ac:	68bb      	ldr	r3, [r7, #8]
 80032ae:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 80032b0:	693b      	ldr	r3, [r7, #16]
 80032b2:	2b17      	cmp	r3, #23
 80032b4:	d955      	bls.n	8003362 <HAL_RTC_GetTime+0x152>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 80032b6:	693b      	ldr	r3, [r7, #16]
 80032b8:	4a3f      	ldr	r2, [pc, #252]	@ (80033b8 <HAL_RTC_GetTime+0x1a8>)
 80032ba:	fba2 2303 	umull	r2, r3, r2, r3
 80032be:	091b      	lsrs	r3, r3, #4
 80032c0:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 80032c2:	6939      	ldr	r1, [r7, #16]
 80032c4:	4b3c      	ldr	r3, [pc, #240]	@ (80033b8 <HAL_RTC_GetTime+0x1a8>)
 80032c6:	fba3 2301 	umull	r2, r3, r3, r1
 80032ca:	091a      	lsrs	r2, r3, #4
 80032cc:	4613      	mov	r3, r2
 80032ce:	005b      	lsls	r3, r3, #1
 80032d0:	4413      	add	r3, r2
 80032d2:	00db      	lsls	r3, r3, #3
 80032d4:	1aca      	subs	r2, r1, r3
 80032d6:	b2d2      	uxtb	r2, r2
 80032d8:	68bb      	ldr	r3, [r7, #8]
 80032da:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80032dc:	68f8      	ldr	r0, [r7, #12]
 80032de:	f000 f9fd 	bl	80036dc <RTC_ReadAlarmCounter>
 80032e2:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 80032e4:	69fb      	ldr	r3, [r7, #28]
 80032e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032ea:	d008      	beq.n	80032fe <HAL_RTC_GetTime+0xee>
 80032ec:	69fa      	ldr	r2, [r7, #28]
 80032ee:	69bb      	ldr	r3, [r7, #24]
 80032f0:	429a      	cmp	r2, r3
 80032f2:	d904      	bls.n	80032fe <HAL_RTC_GetTime+0xee>
    {
      counter_alarm -= counter_time;
 80032f4:	69fa      	ldr	r2, [r7, #28]
 80032f6:	69bb      	ldr	r3, [r7, #24]
 80032f8:	1ad3      	subs	r3, r2, r3
 80032fa:	61fb      	str	r3, [r7, #28]
 80032fc:	e002      	b.n	8003304 <HAL_RTC_GetTime+0xf4>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 80032fe:	f04f 33ff 	mov.w	r3, #4294967295
 8003302:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	4a2d      	ldr	r2, [pc, #180]	@ (80033bc <HAL_RTC_GetTime+0x1ac>)
 8003308:	fb02 f303 	mul.w	r3, r2, r3
 800330c:	69ba      	ldr	r2, [r7, #24]
 800330e:	1ad3      	subs	r3, r2, r3
 8003310:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8003312:	69b9      	ldr	r1, [r7, #24]
 8003314:	68f8      	ldr	r0, [r7, #12]
 8003316:	f000 f9ba 	bl	800368e <RTC_WriteTimeCounter>
 800331a:	4603      	mov	r3, r0
 800331c:	2b00      	cmp	r3, #0
 800331e:	d001      	beq.n	8003324 <HAL_RTC_GetTime+0x114>
    {
      return HAL_ERROR;
 8003320:	2301      	movs	r3, #1
 8003322:	e041      	b.n	80033a8 <HAL_RTC_GetTime+0x198>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8003324:	69fb      	ldr	r3, [r7, #28]
 8003326:	f1b3 3fff 	cmp.w	r3, #4294967295
 800332a:	d00c      	beq.n	8003346 <HAL_RTC_GetTime+0x136>
    {
      counter_alarm += counter_time;
 800332c:	69fa      	ldr	r2, [r7, #28]
 800332e:	69bb      	ldr	r3, [r7, #24]
 8003330:	4413      	add	r3, r2
 8003332:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8003334:	69f9      	ldr	r1, [r7, #28]
 8003336:	68f8      	ldr	r0, [r7, #12]
 8003338:	f000 f9e9 	bl	800370e <RTC_WriteAlarmCounter>
 800333c:	4603      	mov	r3, r0
 800333e:	2b00      	cmp	r3, #0
 8003340:	d00a      	beq.n	8003358 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8003342:	2301      	movs	r3, #1
 8003344:	e030      	b.n	80033a8 <HAL_RTC_GetTime+0x198>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8003346:	69f9      	ldr	r1, [r7, #28]
 8003348:	68f8      	ldr	r0, [r7, #12]
 800334a:	f000 f9e0 	bl	800370e <RTC_WriteAlarmCounter>
 800334e:	4603      	mov	r3, r0
 8003350:	2b00      	cmp	r3, #0
 8003352:	d001      	beq.n	8003358 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8003354:	2301      	movs	r3, #1
 8003356:	e027      	b.n	80033a8 <HAL_RTC_GetTime+0x198>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 8003358:	6979      	ldr	r1, [r7, #20]
 800335a:	68f8      	ldr	r0, [r7, #12]
 800335c:	f000 fa88 	bl	8003870 <RTC_DateUpdate>
 8003360:	e003      	b.n	800336a <HAL_RTC_GetTime+0x15a>
  }
  else
  {
    sTime->Hours = hours;
 8003362:	693b      	ldr	r3, [r7, #16]
 8003364:	b2da      	uxtb	r2, r3
 8003366:	68bb      	ldr	r3, [r7, #8]
 8003368:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d01a      	beq.n	80033a6 <HAL_RTC_GetTime+0x196>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 8003370:	68bb      	ldr	r3, [r7, #8]
 8003372:	781b      	ldrb	r3, [r3, #0]
 8003374:	4618      	mov	r0, r3
 8003376:	f000 fa41 	bl	80037fc <RTC_ByteToBcd2>
 800337a:	4603      	mov	r3, r0
 800337c:	461a      	mov	r2, r3
 800337e:	68bb      	ldr	r3, [r7, #8]
 8003380:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 8003382:	68bb      	ldr	r3, [r7, #8]
 8003384:	785b      	ldrb	r3, [r3, #1]
 8003386:	4618      	mov	r0, r3
 8003388:	f000 fa38 	bl	80037fc <RTC_ByteToBcd2>
 800338c:	4603      	mov	r3, r0
 800338e:	461a      	mov	r2, r3
 8003390:	68bb      	ldr	r3, [r7, #8]
 8003392:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	789b      	ldrb	r3, [r3, #2]
 8003398:	4618      	mov	r0, r3
 800339a:	f000 fa2f 	bl	80037fc <RTC_ByteToBcd2>
 800339e:	4603      	mov	r3, r0
 80033a0:	461a      	mov	r2, r3
 80033a2:	68bb      	ldr	r3, [r7, #8]
 80033a4:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80033a6:	2300      	movs	r3, #0
}
 80033a8:	4618      	mov	r0, r3
 80033aa:	3720      	adds	r7, #32
 80033ac:	46bd      	mov	sp, r7
 80033ae:	bd80      	pop	{r7, pc}
 80033b0:	91a2b3c5 	.word	0x91a2b3c5
 80033b4:	88888889 	.word	0x88888889
 80033b8:	aaaaaaab 	.word	0xaaaaaaab
 80033bc:	00015180 	.word	0x00015180

080033c0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b088      	sub	sp, #32
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	60f8      	str	r0, [r7, #12]
 80033c8:	60b9      	str	r1, [r7, #8]
 80033ca:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 80033cc:	2300      	movs	r3, #0
 80033ce:	61fb      	str	r3, [r7, #28]
 80033d0:	2300      	movs	r3, #0
 80033d2:	61bb      	str	r3, [r7, #24]
 80033d4:	2300      	movs	r3, #0
 80033d6:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d002      	beq.n	80033e4 <HAL_RTC_SetDate+0x24>
 80033de:	68bb      	ldr	r3, [r7, #8]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d101      	bne.n	80033e8 <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 80033e4:	2301      	movs	r3, #1
 80033e6:	e097      	b.n	8003518 <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	7c1b      	ldrb	r3, [r3, #16]
 80033ec:	2b01      	cmp	r3, #1
 80033ee:	d101      	bne.n	80033f4 <HAL_RTC_SetDate+0x34>
 80033f0:	2302      	movs	r3, #2
 80033f2:	e091      	b.n	8003518 <HAL_RTC_SetDate+0x158>
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	2201      	movs	r2, #1
 80033f8:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	2202      	movs	r2, #2
 80033fe:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d10c      	bne.n	8003420 <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 8003406:	68bb      	ldr	r3, [r7, #8]
 8003408:	78da      	ldrb	r2, [r3, #3]
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 800340e:	68bb      	ldr	r3, [r7, #8]
 8003410:	785a      	ldrb	r2, [r3, #1]
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 8003416:	68bb      	ldr	r3, [r7, #8]
 8003418:	789a      	ldrb	r2, [r3, #2]
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	739a      	strb	r2, [r3, #14]
 800341e:	e01a      	b.n	8003456 <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	78db      	ldrb	r3, [r3, #3]
 8003424:	4618      	mov	r0, r3
 8003426:	f000 fa06 	bl	8003836 <RTC_Bcd2ToByte>
 800342a:	4603      	mov	r3, r0
 800342c:	461a      	mov	r2, r3
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8003432:	68bb      	ldr	r3, [r7, #8]
 8003434:	785b      	ldrb	r3, [r3, #1]
 8003436:	4618      	mov	r0, r3
 8003438:	f000 f9fd 	bl	8003836 <RTC_Bcd2ToByte>
 800343c:	4603      	mov	r3, r0
 800343e:	461a      	mov	r2, r3
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	789b      	ldrb	r3, [r3, #2]
 8003448:	4618      	mov	r0, r3
 800344a:	f000 f9f4 	bl	8003836 <RTC_Bcd2ToByte>
 800344e:	4603      	mov	r3, r0
 8003450:	461a      	mov	r2, r3
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	7bdb      	ldrb	r3, [r3, #15]
 800345a:	4618      	mov	r0, r3
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	7b59      	ldrb	r1, [r3, #13]
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	7b9b      	ldrb	r3, [r3, #14]
 8003464:	461a      	mov	r2, r3
 8003466:	f000 fadf 	bl	8003a28 <RTC_WeekDayNum>
 800346a:	4603      	mov	r3, r0
 800346c:	461a      	mov	r2, r3
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	7b1a      	ldrb	r2, [r3, #12]
 8003476:	68bb      	ldr	r3, [r7, #8]
 8003478:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 800347a:	68f8      	ldr	r0, [r7, #12]
 800347c:	f000 f8d7 	bl	800362e <RTC_ReadTimeCounter>
 8003480:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8003482:	69fb      	ldr	r3, [r7, #28]
 8003484:	4a26      	ldr	r2, [pc, #152]	@ (8003520 <HAL_RTC_SetDate+0x160>)
 8003486:	fba2 2303 	umull	r2, r3, r2, r3
 800348a:	0adb      	lsrs	r3, r3, #11
 800348c:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 800348e:	697b      	ldr	r3, [r7, #20]
 8003490:	2b18      	cmp	r3, #24
 8003492:	d93a      	bls.n	800350a <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 8003494:	697b      	ldr	r3, [r7, #20]
 8003496:	4a23      	ldr	r2, [pc, #140]	@ (8003524 <HAL_RTC_SetDate+0x164>)
 8003498:	fba2 2303 	umull	r2, r3, r2, r3
 800349c:	091b      	lsrs	r3, r3, #4
 800349e:	4a22      	ldr	r2, [pc, #136]	@ (8003528 <HAL_RTC_SetDate+0x168>)
 80034a0:	fb02 f303 	mul.w	r3, r2, r3
 80034a4:	69fa      	ldr	r2, [r7, #28]
 80034a6:	1ad3      	subs	r3, r2, r3
 80034a8:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 80034aa:	69f9      	ldr	r1, [r7, #28]
 80034ac:	68f8      	ldr	r0, [r7, #12]
 80034ae:	f000 f8ee 	bl	800368e <RTC_WriteTimeCounter>
 80034b2:	4603      	mov	r3, r0
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d007      	beq.n	80034c8 <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	2204      	movs	r2, #4
 80034bc:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	2200      	movs	r2, #0
 80034c2:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 80034c4:	2301      	movs	r3, #1
 80034c6:	e027      	b.n	8003518 <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80034c8:	68f8      	ldr	r0, [r7, #12]
 80034ca:	f000 f907 	bl	80036dc <RTC_ReadAlarmCounter>
 80034ce:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 80034d0:	69bb      	ldr	r3, [r7, #24]
 80034d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034d6:	d018      	beq.n	800350a <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 80034d8:	69ba      	ldr	r2, [r7, #24]
 80034da:	69fb      	ldr	r3, [r7, #28]
 80034dc:	429a      	cmp	r2, r3
 80034de:	d214      	bcs.n	800350a <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 80034e0:	69bb      	ldr	r3, [r7, #24]
 80034e2:	f503 33a8 	add.w	r3, r3, #86016	@ 0x15000
 80034e6:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 80034ea:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80034ec:	69b9      	ldr	r1, [r7, #24]
 80034ee:	68f8      	ldr	r0, [r7, #12]
 80034f0:	f000 f90d 	bl	800370e <RTC_WriteAlarmCounter>
 80034f4:	4603      	mov	r3, r0
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d007      	beq.n	800350a <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	2204      	movs	r2, #4
 80034fe:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	2200      	movs	r2, #0
 8003504:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8003506:	2301      	movs	r3, #1
 8003508:	e006      	b.n	8003518 <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	2201      	movs	r2, #1
 800350e:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	2200      	movs	r2, #0
 8003514:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003516:	2300      	movs	r3, #0
}
 8003518:	4618      	mov	r0, r3
 800351a:	3720      	adds	r7, #32
 800351c:	46bd      	mov	sp, r7
 800351e:	bd80      	pop	{r7, pc}
 8003520:	91a2b3c5 	.word	0x91a2b3c5
 8003524:	aaaaaaab 	.word	0xaaaaaaab
 8003528:	00015180 	.word	0x00015180

0800352c <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b086      	sub	sp, #24
 8003530:	af00      	add	r7, sp, #0
 8003532:	60f8      	str	r0, [r7, #12]
 8003534:	60b9      	str	r1, [r7, #8]
 8003536:	607a      	str	r2, [r7, #4]
  RTC_TimeTypeDef stime = {0U};
 8003538:	f107 0314 	add.w	r3, r7, #20
 800353c:	2100      	movs	r1, #0
 800353e:	460a      	mov	r2, r1
 8003540:	801a      	strh	r2, [r3, #0]
 8003542:	460a      	mov	r2, r1
 8003544:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d002      	beq.n	8003552 <HAL_RTC_GetDate+0x26>
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d101      	bne.n	8003556 <HAL_RTC_GetDate+0x2a>
  {
    return HAL_ERROR;
 8003552:	2301      	movs	r3, #1
 8003554:	e03a      	b.n	80035cc <HAL_RTC_GetDate+0xa0>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 8003556:	f107 0314 	add.w	r3, r7, #20
 800355a:	2200      	movs	r2, #0
 800355c:	4619      	mov	r1, r3
 800355e:	68f8      	ldr	r0, [r7, #12]
 8003560:	f7ff fe56 	bl	8003210 <HAL_RTC_GetTime>
 8003564:	4603      	mov	r3, r0
 8003566:	2b00      	cmp	r3, #0
 8003568:	d001      	beq.n	800356e <HAL_RTC_GetDate+0x42>
  {
    return HAL_ERROR;
 800356a:	2301      	movs	r3, #1
 800356c:	e02e      	b.n	80035cc <HAL_RTC_GetDate+0xa0>
  }

  /* Fill the structure fields with the read parameters */
  sDate->WeekDay  = hrtc->DateToUpdate.WeekDay;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	7b1a      	ldrb	r2, [r3, #12]
 8003572:	68bb      	ldr	r3, [r7, #8]
 8003574:	701a      	strb	r2, [r3, #0]
  sDate->Year     = hrtc->DateToUpdate.Year;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	7bda      	ldrb	r2, [r3, #15]
 800357a:	68bb      	ldr	r3, [r7, #8]
 800357c:	70da      	strb	r2, [r3, #3]
  sDate->Month    = hrtc->DateToUpdate.Month;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	7b5a      	ldrb	r2, [r3, #13]
 8003582:	68bb      	ldr	r3, [r7, #8]
 8003584:	705a      	strb	r2, [r3, #1]
  sDate->Date     = hrtc->DateToUpdate.Date;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	7b9a      	ldrb	r2, [r3, #14]
 800358a:	68bb      	ldr	r3, [r7, #8]
 800358c:	709a      	strb	r2, [r3, #2]

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d01a      	beq.n	80035ca <HAL_RTC_GetDate+0x9e>
  {
    /* Convert the date structure parameters to BCD format */
    sDate->Year   = (uint8_t)RTC_ByteToBcd2(sDate->Year);
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	78db      	ldrb	r3, [r3, #3]
 8003598:	4618      	mov	r0, r3
 800359a:	f000 f92f 	bl	80037fc <RTC_ByteToBcd2>
 800359e:	4603      	mov	r3, r0
 80035a0:	461a      	mov	r2, r3
 80035a2:	68bb      	ldr	r3, [r7, #8]
 80035a4:	70da      	strb	r2, [r3, #3]
    sDate->Month  = (uint8_t)RTC_ByteToBcd2(sDate->Month);
 80035a6:	68bb      	ldr	r3, [r7, #8]
 80035a8:	785b      	ldrb	r3, [r3, #1]
 80035aa:	4618      	mov	r0, r3
 80035ac:	f000 f926 	bl	80037fc <RTC_ByteToBcd2>
 80035b0:	4603      	mov	r3, r0
 80035b2:	461a      	mov	r2, r3
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	705a      	strb	r2, [r3, #1]
    sDate->Date   = (uint8_t)RTC_ByteToBcd2(sDate->Date);
 80035b8:	68bb      	ldr	r3, [r7, #8]
 80035ba:	789b      	ldrb	r3, [r3, #2]
 80035bc:	4618      	mov	r0, r3
 80035be:	f000 f91d 	bl	80037fc <RTC_ByteToBcd2>
 80035c2:	4603      	mov	r3, r0
 80035c4:	461a      	mov	r2, r3
 80035c6:	68bb      	ldr	r3, [r7, #8]
 80035c8:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80035ca:	2300      	movs	r3, #0
}
 80035cc:	4618      	mov	r0, r3
 80035ce:	3718      	adds	r7, #24
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bd80      	pop	{r7, pc}

080035d4 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b084      	sub	sp, #16
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80035dc:	2300      	movs	r3, #0
 80035de:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d101      	bne.n	80035ea <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 80035e6:	2301      	movs	r3, #1
 80035e8:	e01d      	b.n	8003626 <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	685a      	ldr	r2, [r3, #4]
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f022 0208 	bic.w	r2, r2, #8
 80035f8:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 80035fa:	f7fd fd1f 	bl	800103c <HAL_GetTick>
 80035fe:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8003600:	e009      	b.n	8003616 <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8003602:	f7fd fd1b 	bl	800103c <HAL_GetTick>
 8003606:	4602      	mov	r2, r0
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	1ad3      	subs	r3, r2, r3
 800360c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003610:	d901      	bls.n	8003616 <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8003612:	2303      	movs	r3, #3
 8003614:	e007      	b.n	8003626 <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	f003 0308 	and.w	r3, r3, #8
 8003620:	2b00      	cmp	r3, #0
 8003622:	d0ee      	beq.n	8003602 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8003624:	2300      	movs	r3, #0
}
 8003626:	4618      	mov	r0, r3
 8003628:	3710      	adds	r7, #16
 800362a:	46bd      	mov	sp, r7
 800362c:	bd80      	pop	{r7, pc}

0800362e <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 800362e:	b480      	push	{r7}
 8003630:	b087      	sub	sp, #28
 8003632:	af00      	add	r7, sp, #0
 8003634:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 8003636:	2300      	movs	r3, #0
 8003638:	827b      	strh	r3, [r7, #18]
 800363a:	2300      	movs	r3, #0
 800363c:	823b      	strh	r3, [r7, #16]
 800363e:	2300      	movs	r3, #0
 8003640:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 8003642:	2300      	movs	r3, #0
 8003644:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	699b      	ldr	r3, [r3, #24]
 800364c:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	69db      	ldr	r3, [r3, #28]
 8003654:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	699b      	ldr	r3, [r3, #24]
 800365c:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 800365e:	8a7a      	ldrh	r2, [r7, #18]
 8003660:	8a3b      	ldrh	r3, [r7, #16]
 8003662:	429a      	cmp	r2, r3
 8003664:	d008      	beq.n	8003678 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8003666:	8a3b      	ldrh	r3, [r7, #16]
 8003668:	041a      	lsls	r2, r3, #16
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	69db      	ldr	r3, [r3, #28]
 8003670:	b29b      	uxth	r3, r3
 8003672:	4313      	orrs	r3, r2
 8003674:	617b      	str	r3, [r7, #20]
 8003676:	e004      	b.n	8003682 <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8003678:	8a7b      	ldrh	r3, [r7, #18]
 800367a:	041a      	lsls	r2, r3, #16
 800367c:	89fb      	ldrh	r3, [r7, #14]
 800367e:	4313      	orrs	r3, r2
 8003680:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 8003682:	697b      	ldr	r3, [r7, #20]
}
 8003684:	4618      	mov	r0, r3
 8003686:	371c      	adds	r7, #28
 8003688:	46bd      	mov	sp, r7
 800368a:	bc80      	pop	{r7}
 800368c:	4770      	bx	lr

0800368e <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 800368e:	b580      	push	{r7, lr}
 8003690:	b084      	sub	sp, #16
 8003692:	af00      	add	r7, sp, #0
 8003694:	6078      	str	r0, [r7, #4]
 8003696:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003698:	2300      	movs	r3, #0
 800369a:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800369c:	6878      	ldr	r0, [r7, #4]
 800369e:	f000 f85d 	bl	800375c <RTC_EnterInitMode>
 80036a2:	4603      	mov	r3, r0
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d002      	beq.n	80036ae <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 80036a8:	2301      	movs	r3, #1
 80036aa:	73fb      	strb	r3, [r7, #15]
 80036ac:	e011      	b.n	80036d2 <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	683a      	ldr	r2, [r7, #0]
 80036b4:	0c12      	lsrs	r2, r2, #16
 80036b6:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	683a      	ldr	r2, [r7, #0]
 80036be:	b292      	uxth	r2, r2
 80036c0:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80036c2:	6878      	ldr	r0, [r7, #4]
 80036c4:	f000 f872 	bl	80037ac <RTC_ExitInitMode>
 80036c8:	4603      	mov	r3, r0
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d001      	beq.n	80036d2 <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 80036ce:	2301      	movs	r3, #1
 80036d0:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80036d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80036d4:	4618      	mov	r0, r3
 80036d6:	3710      	adds	r7, #16
 80036d8:	46bd      	mov	sp, r7
 80036da:	bd80      	pop	{r7, pc}

080036dc <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 80036dc:	b480      	push	{r7}
 80036de:	b085      	sub	sp, #20
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 80036e4:	2300      	movs	r3, #0
 80036e6:	81fb      	strh	r3, [r7, #14]
 80036e8:	2300      	movs	r3, #0
 80036ea:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	6a1b      	ldr	r3, [r3, #32]
 80036f2:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036fa:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 80036fc:	89fb      	ldrh	r3, [r7, #14]
 80036fe:	041a      	lsls	r2, r3, #16
 8003700:	89bb      	ldrh	r3, [r7, #12]
 8003702:	4313      	orrs	r3, r2
}
 8003704:	4618      	mov	r0, r3
 8003706:	3714      	adds	r7, #20
 8003708:	46bd      	mov	sp, r7
 800370a:	bc80      	pop	{r7}
 800370c:	4770      	bx	lr

0800370e <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 800370e:	b580      	push	{r7, lr}
 8003710:	b084      	sub	sp, #16
 8003712:	af00      	add	r7, sp, #0
 8003714:	6078      	str	r0, [r7, #4]
 8003716:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003718:	2300      	movs	r3, #0
 800371a:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800371c:	6878      	ldr	r0, [r7, #4]
 800371e:	f000 f81d 	bl	800375c <RTC_EnterInitMode>
 8003722:	4603      	mov	r3, r0
 8003724:	2b00      	cmp	r3, #0
 8003726:	d002      	beq.n	800372e <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 8003728:	2301      	movs	r3, #1
 800372a:	73fb      	strb	r3, [r7, #15]
 800372c:	e011      	b.n	8003752 <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	683a      	ldr	r2, [r7, #0]
 8003734:	0c12      	lsrs	r2, r2, #16
 8003736:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	683a      	ldr	r2, [r7, #0]
 800373e:	b292      	uxth	r2, r2
 8003740:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8003742:	6878      	ldr	r0, [r7, #4]
 8003744:	f000 f832 	bl	80037ac <RTC_ExitInitMode>
 8003748:	4603      	mov	r3, r0
 800374a:	2b00      	cmp	r3, #0
 800374c:	d001      	beq.n	8003752 <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 800374e:	2301      	movs	r3, #1
 8003750:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8003752:	7bfb      	ldrb	r3, [r7, #15]
}
 8003754:	4618      	mov	r0, r3
 8003756:	3710      	adds	r7, #16
 8003758:	46bd      	mov	sp, r7
 800375a:	bd80      	pop	{r7, pc}

0800375c <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b084      	sub	sp, #16
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003764:	2300      	movs	r3, #0
 8003766:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8003768:	f7fd fc68 	bl	800103c <HAL_GetTick>
 800376c:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800376e:	e009      	b.n	8003784 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8003770:	f7fd fc64 	bl	800103c <HAL_GetTick>
 8003774:	4602      	mov	r2, r0
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	1ad3      	subs	r3, r2, r3
 800377a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800377e:	d901      	bls.n	8003784 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8003780:	2303      	movs	r3, #3
 8003782:	e00f      	b.n	80037a4 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	f003 0320 	and.w	r3, r3, #32
 800378e:	2b00      	cmp	r3, #0
 8003790:	d0ee      	beq.n	8003770 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	685a      	ldr	r2, [r3, #4]
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f042 0210 	orr.w	r2, r2, #16
 80037a0:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 80037a2:	2300      	movs	r3, #0
}
 80037a4:	4618      	mov	r0, r3
 80037a6:	3710      	adds	r7, #16
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bd80      	pop	{r7, pc}

080037ac <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b084      	sub	sp, #16
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80037b4:	2300      	movs	r3, #0
 80037b6:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	685a      	ldr	r2, [r3, #4]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f022 0210 	bic.w	r2, r2, #16
 80037c6:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 80037c8:	f7fd fc38 	bl	800103c <HAL_GetTick>
 80037cc:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80037ce:	e009      	b.n	80037e4 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80037d0:	f7fd fc34 	bl	800103c <HAL_GetTick>
 80037d4:	4602      	mov	r2, r0
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	1ad3      	subs	r3, r2, r3
 80037da:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80037de:	d901      	bls.n	80037e4 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 80037e0:	2303      	movs	r3, #3
 80037e2:	e007      	b.n	80037f4 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	f003 0320 	and.w	r3, r3, #32
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d0ee      	beq.n	80037d0 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 80037f2:	2300      	movs	r3, #0
}
 80037f4:	4618      	mov	r0, r3
 80037f6:	3710      	adds	r7, #16
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bd80      	pop	{r7, pc}

080037fc <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80037fc:	b480      	push	{r7}
 80037fe:	b085      	sub	sp, #20
 8003800:	af00      	add	r7, sp, #0
 8003802:	4603      	mov	r3, r0
 8003804:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8003806:	2300      	movs	r3, #0
 8003808:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 800380a:	e005      	b.n	8003818 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	3301      	adds	r3, #1
 8003810:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8003812:	79fb      	ldrb	r3, [r7, #7]
 8003814:	3b0a      	subs	r3, #10
 8003816:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 8003818:	79fb      	ldrb	r3, [r7, #7]
 800381a:	2b09      	cmp	r3, #9
 800381c:	d8f6      	bhi.n	800380c <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	b2db      	uxtb	r3, r3
 8003822:	011b      	lsls	r3, r3, #4
 8003824:	b2da      	uxtb	r2, r3
 8003826:	79fb      	ldrb	r3, [r7, #7]
 8003828:	4313      	orrs	r3, r2
 800382a:	b2db      	uxtb	r3, r3
}
 800382c:	4618      	mov	r0, r3
 800382e:	3714      	adds	r7, #20
 8003830:	46bd      	mov	sp, r7
 8003832:	bc80      	pop	{r7}
 8003834:	4770      	bx	lr

08003836 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8003836:	b480      	push	{r7}
 8003838:	b085      	sub	sp, #20
 800383a:	af00      	add	r7, sp, #0
 800383c:	4603      	mov	r3, r0
 800383e:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8003840:	2300      	movs	r3, #0
 8003842:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8003844:	79fb      	ldrb	r3, [r7, #7]
 8003846:	091b      	lsrs	r3, r3, #4
 8003848:	b2db      	uxtb	r3, r3
 800384a:	461a      	mov	r2, r3
 800384c:	4613      	mov	r3, r2
 800384e:	009b      	lsls	r3, r3, #2
 8003850:	4413      	add	r3, r2
 8003852:	005b      	lsls	r3, r3, #1
 8003854:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8003856:	79fb      	ldrb	r3, [r7, #7]
 8003858:	f003 030f 	and.w	r3, r3, #15
 800385c:	b2da      	uxtb	r2, r3
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	b2db      	uxtb	r3, r3
 8003862:	4413      	add	r3, r2
 8003864:	b2db      	uxtb	r3, r3
}
 8003866:	4618      	mov	r0, r3
 8003868:	3714      	adds	r7, #20
 800386a:	46bd      	mov	sp, r7
 800386c:	bc80      	pop	{r7}
 800386e:	4770      	bx	lr

08003870 <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b086      	sub	sp, #24
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
 8003878:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 800387a:	2300      	movs	r3, #0
 800387c:	617b      	str	r3, [r7, #20]
 800387e:	2300      	movs	r3, #0
 8003880:	613b      	str	r3, [r7, #16]
 8003882:	2300      	movs	r3, #0
 8003884:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 8003886:	2300      	movs	r3, #0
 8003888:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	7bdb      	ldrb	r3, [r3, #15]
 800388e:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	7b5b      	ldrb	r3, [r3, #13]
 8003894:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	7b9b      	ldrb	r3, [r3, #14]
 800389a:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 800389c:	2300      	movs	r3, #0
 800389e:	60bb      	str	r3, [r7, #8]
 80038a0:	e06f      	b.n	8003982 <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 80038a2:	693b      	ldr	r3, [r7, #16]
 80038a4:	2b01      	cmp	r3, #1
 80038a6:	d011      	beq.n	80038cc <RTC_DateUpdate+0x5c>
 80038a8:	693b      	ldr	r3, [r7, #16]
 80038aa:	2b03      	cmp	r3, #3
 80038ac:	d00e      	beq.n	80038cc <RTC_DateUpdate+0x5c>
 80038ae:	693b      	ldr	r3, [r7, #16]
 80038b0:	2b05      	cmp	r3, #5
 80038b2:	d00b      	beq.n	80038cc <RTC_DateUpdate+0x5c>
 80038b4:	693b      	ldr	r3, [r7, #16]
 80038b6:	2b07      	cmp	r3, #7
 80038b8:	d008      	beq.n	80038cc <RTC_DateUpdate+0x5c>
 80038ba:	693b      	ldr	r3, [r7, #16]
 80038bc:	2b08      	cmp	r3, #8
 80038be:	d005      	beq.n	80038cc <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 80038c0:	693b      	ldr	r3, [r7, #16]
 80038c2:	2b0a      	cmp	r3, #10
 80038c4:	d002      	beq.n	80038cc <RTC_DateUpdate+0x5c>
 80038c6:	693b      	ldr	r3, [r7, #16]
 80038c8:	2b0c      	cmp	r3, #12
 80038ca:	d117      	bne.n	80038fc <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	2b1e      	cmp	r3, #30
 80038d0:	d803      	bhi.n	80038da <RTC_DateUpdate+0x6a>
      {
        day++;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	3301      	adds	r3, #1
 80038d6:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 80038d8:	e050      	b.n	800397c <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	2b0c      	cmp	r3, #12
 80038de:	d005      	beq.n	80038ec <RTC_DateUpdate+0x7c>
        {
          month++;
 80038e0:	693b      	ldr	r3, [r7, #16]
 80038e2:	3301      	adds	r3, #1
 80038e4:	613b      	str	r3, [r7, #16]
          day = 1U;
 80038e6:	2301      	movs	r3, #1
 80038e8:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 80038ea:	e047      	b.n	800397c <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 80038ec:	2301      	movs	r3, #1
 80038ee:	613b      	str	r3, [r7, #16]
          day = 1U;
 80038f0:	2301      	movs	r3, #1
 80038f2:	60fb      	str	r3, [r7, #12]
          year++;
 80038f4:	697b      	ldr	r3, [r7, #20]
 80038f6:	3301      	adds	r3, #1
 80038f8:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 80038fa:	e03f      	b.n	800397c <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 80038fc:	693b      	ldr	r3, [r7, #16]
 80038fe:	2b04      	cmp	r3, #4
 8003900:	d008      	beq.n	8003914 <RTC_DateUpdate+0xa4>
 8003902:	693b      	ldr	r3, [r7, #16]
 8003904:	2b06      	cmp	r3, #6
 8003906:	d005      	beq.n	8003914 <RTC_DateUpdate+0xa4>
 8003908:	693b      	ldr	r3, [r7, #16]
 800390a:	2b09      	cmp	r3, #9
 800390c:	d002      	beq.n	8003914 <RTC_DateUpdate+0xa4>
 800390e:	693b      	ldr	r3, [r7, #16]
 8003910:	2b0b      	cmp	r3, #11
 8003912:	d10c      	bne.n	800392e <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	2b1d      	cmp	r3, #29
 8003918:	d803      	bhi.n	8003922 <RTC_DateUpdate+0xb2>
      {
        day++;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	3301      	adds	r3, #1
 800391e:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8003920:	e02c      	b.n	800397c <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 8003922:	693b      	ldr	r3, [r7, #16]
 8003924:	3301      	adds	r3, #1
 8003926:	613b      	str	r3, [r7, #16]
        day = 1U;
 8003928:	2301      	movs	r3, #1
 800392a:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 800392c:	e026      	b.n	800397c <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 800392e:	693b      	ldr	r3, [r7, #16]
 8003930:	2b02      	cmp	r3, #2
 8003932:	d123      	bne.n	800397c <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	2b1b      	cmp	r3, #27
 8003938:	d803      	bhi.n	8003942 <RTC_DateUpdate+0xd2>
      {
        day++;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	3301      	adds	r3, #1
 800393e:	60fb      	str	r3, [r7, #12]
 8003940:	e01c      	b.n	800397c <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	2b1c      	cmp	r3, #28
 8003946:	d111      	bne.n	800396c <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 8003948:	697b      	ldr	r3, [r7, #20]
 800394a:	b29b      	uxth	r3, r3
 800394c:	4618      	mov	r0, r3
 800394e:	f000 f839 	bl	80039c4 <RTC_IsLeapYear>
 8003952:	4603      	mov	r3, r0
 8003954:	2b00      	cmp	r3, #0
 8003956:	d003      	beq.n	8003960 <RTC_DateUpdate+0xf0>
        {
          day++;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	3301      	adds	r3, #1
 800395c:	60fb      	str	r3, [r7, #12]
 800395e:	e00d      	b.n	800397c <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 8003960:	693b      	ldr	r3, [r7, #16]
 8003962:	3301      	adds	r3, #1
 8003964:	613b      	str	r3, [r7, #16]
          day = 1U;
 8003966:	2301      	movs	r3, #1
 8003968:	60fb      	str	r3, [r7, #12]
 800396a:	e007      	b.n	800397c <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	2b1d      	cmp	r3, #29
 8003970:	d104      	bne.n	800397c <RTC_DateUpdate+0x10c>
      {
        month++;
 8003972:	693b      	ldr	r3, [r7, #16]
 8003974:	3301      	adds	r3, #1
 8003976:	613b      	str	r3, [r7, #16]
        day = 1U;
 8003978:	2301      	movs	r3, #1
 800397a:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 800397c:	68bb      	ldr	r3, [r7, #8]
 800397e:	3301      	adds	r3, #1
 8003980:	60bb      	str	r3, [r7, #8]
 8003982:	68ba      	ldr	r2, [r7, #8]
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	429a      	cmp	r2, r3
 8003988:	d38b      	bcc.n	80038a2 <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 800398a:	697b      	ldr	r3, [r7, #20]
 800398c:	b2da      	uxtb	r2, r3
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	b2da      	uxtb	r2, r3
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	b2da      	uxtb	r2, r3
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 80039a2:	693b      	ldr	r3, [r7, #16]
 80039a4:	b2db      	uxtb	r3, r3
 80039a6:	68fa      	ldr	r2, [r7, #12]
 80039a8:	b2d2      	uxtb	r2, r2
 80039aa:	4619      	mov	r1, r3
 80039ac:	6978      	ldr	r0, [r7, #20]
 80039ae:	f000 f83b 	bl	8003a28 <RTC_WeekDayNum>
 80039b2:	4603      	mov	r3, r0
 80039b4:	461a      	mov	r2, r3
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	731a      	strb	r2, [r3, #12]
}
 80039ba:	bf00      	nop
 80039bc:	3718      	adds	r7, #24
 80039be:	46bd      	mov	sp, r7
 80039c0:	bd80      	pop	{r7, pc}
	...

080039c4 <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 80039c4:	b480      	push	{r7}
 80039c6:	b083      	sub	sp, #12
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	4603      	mov	r3, r0
 80039cc:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 80039ce:	88fb      	ldrh	r3, [r7, #6]
 80039d0:	f003 0303 	and.w	r3, r3, #3
 80039d4:	b29b      	uxth	r3, r3
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d001      	beq.n	80039de <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 80039da:	2300      	movs	r3, #0
 80039dc:	e01d      	b.n	8003a1a <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 80039de:	88fb      	ldrh	r3, [r7, #6]
 80039e0:	4a10      	ldr	r2, [pc, #64]	@ (8003a24 <RTC_IsLeapYear+0x60>)
 80039e2:	fba2 1203 	umull	r1, r2, r2, r3
 80039e6:	0952      	lsrs	r2, r2, #5
 80039e8:	2164      	movs	r1, #100	@ 0x64
 80039ea:	fb01 f202 	mul.w	r2, r1, r2
 80039ee:	1a9b      	subs	r3, r3, r2
 80039f0:	b29b      	uxth	r3, r3
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d001      	beq.n	80039fa <RTC_IsLeapYear+0x36>
  {
    return 1U;
 80039f6:	2301      	movs	r3, #1
 80039f8:	e00f      	b.n	8003a1a <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 80039fa:	88fb      	ldrh	r3, [r7, #6]
 80039fc:	4a09      	ldr	r2, [pc, #36]	@ (8003a24 <RTC_IsLeapYear+0x60>)
 80039fe:	fba2 1203 	umull	r1, r2, r2, r3
 8003a02:	09d2      	lsrs	r2, r2, #7
 8003a04:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8003a08:	fb01 f202 	mul.w	r2, r1, r2
 8003a0c:	1a9b      	subs	r3, r3, r2
 8003a0e:	b29b      	uxth	r3, r3
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d101      	bne.n	8003a18 <RTC_IsLeapYear+0x54>
  {
    return 1U;
 8003a14:	2301      	movs	r3, #1
 8003a16:	e000      	b.n	8003a1a <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 8003a18:	2300      	movs	r3, #0
  }
}
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	370c      	adds	r7, #12
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bc80      	pop	{r7}
 8003a22:	4770      	bx	lr
 8003a24:	51eb851f 	.word	0x51eb851f

08003a28 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	b085      	sub	sp, #20
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
 8003a30:	460b      	mov	r3, r1
 8003a32:	70fb      	strb	r3, [r7, #3]
 8003a34:	4613      	mov	r3, r2
 8003a36:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 8003a38:	2300      	movs	r3, #0
 8003a3a:	60bb      	str	r3, [r7, #8]
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8003a46:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 8003a48:	78fb      	ldrb	r3, [r7, #3]
 8003a4a:	2b02      	cmp	r3, #2
 8003a4c:	d82d      	bhi.n	8003aaa <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8003a4e:	78fa      	ldrb	r2, [r7, #3]
 8003a50:	4613      	mov	r3, r2
 8003a52:	005b      	lsls	r3, r3, #1
 8003a54:	4413      	add	r3, r2
 8003a56:	00db      	lsls	r3, r3, #3
 8003a58:	1a9b      	subs	r3, r3, r2
 8003a5a:	4a2c      	ldr	r2, [pc, #176]	@ (8003b0c <RTC_WeekDayNum+0xe4>)
 8003a5c:	fba2 2303 	umull	r2, r3, r2, r3
 8003a60:	085a      	lsrs	r2, r3, #1
 8003a62:	78bb      	ldrb	r3, [r7, #2]
 8003a64:	441a      	add	r2, r3
 8003a66:	68bb      	ldr	r3, [r7, #8]
 8003a68:	441a      	add	r2, r3
 8003a6a:	68bb      	ldr	r3, [r7, #8]
 8003a6c:	3b01      	subs	r3, #1
 8003a6e:	089b      	lsrs	r3, r3, #2
 8003a70:	441a      	add	r2, r3
 8003a72:	68bb      	ldr	r3, [r7, #8]
 8003a74:	3b01      	subs	r3, #1
 8003a76:	4926      	ldr	r1, [pc, #152]	@ (8003b10 <RTC_WeekDayNum+0xe8>)
 8003a78:	fba1 1303 	umull	r1, r3, r1, r3
 8003a7c:	095b      	lsrs	r3, r3, #5
 8003a7e:	1ad2      	subs	r2, r2, r3
 8003a80:	68bb      	ldr	r3, [r7, #8]
 8003a82:	3b01      	subs	r3, #1
 8003a84:	4922      	ldr	r1, [pc, #136]	@ (8003b10 <RTC_WeekDayNum+0xe8>)
 8003a86:	fba1 1303 	umull	r1, r3, r1, r3
 8003a8a:	09db      	lsrs	r3, r3, #7
 8003a8c:	4413      	add	r3, r2
 8003a8e:	1d1a      	adds	r2, r3, #4
 8003a90:	4b20      	ldr	r3, [pc, #128]	@ (8003b14 <RTC_WeekDayNum+0xec>)
 8003a92:	fba3 1302 	umull	r1, r3, r3, r2
 8003a96:	1ad1      	subs	r1, r2, r3
 8003a98:	0849      	lsrs	r1, r1, #1
 8003a9a:	440b      	add	r3, r1
 8003a9c:	0899      	lsrs	r1, r3, #2
 8003a9e:	460b      	mov	r3, r1
 8003aa0:	00db      	lsls	r3, r3, #3
 8003aa2:	1a5b      	subs	r3, r3, r1
 8003aa4:	1ad3      	subs	r3, r2, r3
 8003aa6:	60fb      	str	r3, [r7, #12]
 8003aa8:	e029      	b.n	8003afe <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8003aaa:	78fa      	ldrb	r2, [r7, #3]
 8003aac:	4613      	mov	r3, r2
 8003aae:	005b      	lsls	r3, r3, #1
 8003ab0:	4413      	add	r3, r2
 8003ab2:	00db      	lsls	r3, r3, #3
 8003ab4:	1a9b      	subs	r3, r3, r2
 8003ab6:	4a15      	ldr	r2, [pc, #84]	@ (8003b0c <RTC_WeekDayNum+0xe4>)
 8003ab8:	fba2 2303 	umull	r2, r3, r2, r3
 8003abc:	085a      	lsrs	r2, r3, #1
 8003abe:	78bb      	ldrb	r3, [r7, #2]
 8003ac0:	441a      	add	r2, r3
 8003ac2:	68bb      	ldr	r3, [r7, #8]
 8003ac4:	441a      	add	r2, r3
 8003ac6:	68bb      	ldr	r3, [r7, #8]
 8003ac8:	089b      	lsrs	r3, r3, #2
 8003aca:	441a      	add	r2, r3
 8003acc:	68bb      	ldr	r3, [r7, #8]
 8003ace:	4910      	ldr	r1, [pc, #64]	@ (8003b10 <RTC_WeekDayNum+0xe8>)
 8003ad0:	fba1 1303 	umull	r1, r3, r1, r3
 8003ad4:	095b      	lsrs	r3, r3, #5
 8003ad6:	1ad2      	subs	r2, r2, r3
 8003ad8:	68bb      	ldr	r3, [r7, #8]
 8003ada:	490d      	ldr	r1, [pc, #52]	@ (8003b10 <RTC_WeekDayNum+0xe8>)
 8003adc:	fba1 1303 	umull	r1, r3, r1, r3
 8003ae0:	09db      	lsrs	r3, r3, #7
 8003ae2:	4413      	add	r3, r2
 8003ae4:	1c9a      	adds	r2, r3, #2
 8003ae6:	4b0b      	ldr	r3, [pc, #44]	@ (8003b14 <RTC_WeekDayNum+0xec>)
 8003ae8:	fba3 1302 	umull	r1, r3, r3, r2
 8003aec:	1ad1      	subs	r1, r2, r3
 8003aee:	0849      	lsrs	r1, r1, #1
 8003af0:	440b      	add	r3, r1
 8003af2:	0899      	lsrs	r1, r3, #2
 8003af4:	460b      	mov	r3, r1
 8003af6:	00db      	lsls	r3, r3, #3
 8003af8:	1a5b      	subs	r3, r3, r1
 8003afa:	1ad3      	subs	r3, r2, r3
 8003afc:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	b2db      	uxtb	r3, r3
}
 8003b02:	4618      	mov	r0, r3
 8003b04:	3714      	adds	r7, #20
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bc80      	pop	{r7}
 8003b0a:	4770      	bx	lr
 8003b0c:	38e38e39 	.word	0x38e38e39
 8003b10:	51eb851f 	.word	0x51eb851f
 8003b14:	24924925 	.word	0x24924925

08003b18 <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register (depending devices).
  * @param  Data: Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	b087      	sub	sp, #28
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	60f8      	str	r0, [r7, #12]
 8003b20:	60b9      	str	r1, [r7, #8]
 8003b22:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8003b24:	2300      	movs	r3, #0
 8003b26:	617b      	str	r3, [r7, #20]
  UNUSED(hrtc);

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)BKP_BASE;
 8003b28:	4b07      	ldr	r3, [pc, #28]	@ (8003b48 <HAL_RTCEx_BKUPWrite+0x30>)
 8003b2a:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	009b      	lsls	r3, r3, #2
 8003b30:	697a      	ldr	r2, [r7, #20]
 8003b32:	4413      	add	r3, r2
 8003b34:	617b      	str	r3, [r7, #20]

  *(__IO uint32_t *) tmp = (Data & BKP_DR1_D);
 8003b36:	697b      	ldr	r3, [r7, #20]
 8003b38:	687a      	ldr	r2, [r7, #4]
 8003b3a:	b292      	uxth	r2, r2
 8003b3c:	601a      	str	r2, [r3, #0]
}
 8003b3e:	bf00      	nop
 8003b40:	371c      	adds	r7, #28
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bc80      	pop	{r7}
 8003b46:	4770      	bx	lr
 8003b48:	40006c00 	.word	0x40006c00

08003b4c <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 1 to 10 (or 42) to
  *                                 specify the register (depending devices).
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b085      	sub	sp, #20
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
 8003b54:	6039      	str	r1, [r7, #0]
  uint32_t backupregister = 0U;
 8003b56:	2300      	movs	r3, #0
 8003b58:	60fb      	str	r3, [r7, #12]
  uint32_t pvalue = 0U;
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	60bb      	str	r3, [r7, #8]
  UNUSED(hrtc);

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  backupregister = (uint32_t)BKP_BASE;
 8003b5e:	4b08      	ldr	r3, [pc, #32]	@ (8003b80 <HAL_RTCEx_BKUPRead+0x34>)
 8003b60:	60fb      	str	r3, [r7, #12]
  backupregister += (BackupRegister * 4U);
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	009b      	lsls	r3, r3, #2
 8003b66:	68fa      	ldr	r2, [r7, #12]
 8003b68:	4413      	add	r3, r2
 8003b6a:	60fb      	str	r3, [r7, #12]

  pvalue = (*(__IO uint32_t *)(backupregister)) & BKP_DR1_D;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	b29b      	uxth	r3, r3
 8003b72:	60bb      	str	r3, [r7, #8]

  /* Read the specified register */
  return pvalue;
 8003b74:	68bb      	ldr	r3, [r7, #8]
}
 8003b76:	4618      	mov	r0, r3
 8003b78:	3714      	adds	r7, #20
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bc80      	pop	{r7}
 8003b7e:	4770      	bx	lr
 8003b80:	40006c00 	.word	0x40006c00

08003b84 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b082      	sub	sp, #8
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d101      	bne.n	8003b96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b92:	2301      	movs	r3, #1
 8003b94:	e042      	b.n	8003c1c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b9c:	b2db      	uxtb	r3, r3
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d106      	bne.n	8003bb0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003baa:	6878      	ldr	r0, [r7, #4]
 8003bac:	f7fd f938 	bl	8000e20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2224      	movs	r2, #36	@ 0x24
 8003bb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	68da      	ldr	r2, [r3, #12]
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003bc6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003bc8:	6878      	ldr	r0, [r7, #4]
 8003bca:	f000 ff3d 	bl	8004a48 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	691a      	ldr	r2, [r3, #16]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003bdc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	695a      	ldr	r2, [r3, #20]
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003bec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	68da      	ldr	r2, [r3, #12]
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003bfc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2200      	movs	r2, #0
 8003c02:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2220      	movs	r2, #32
 8003c08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2220      	movs	r2, #32
 8003c10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2200      	movs	r2, #0
 8003c18:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003c1a:	2300      	movs	r3, #0
}
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	3708      	adds	r7, #8
 8003c20:	46bd      	mov	sp, r7
 8003c22:	bd80      	pop	{r7, pc}

08003c24 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b08a      	sub	sp, #40	@ 0x28
 8003c28:	af02      	add	r7, sp, #8
 8003c2a:	60f8      	str	r0, [r7, #12]
 8003c2c:	60b9      	str	r1, [r7, #8]
 8003c2e:	603b      	str	r3, [r7, #0]
 8003c30:	4613      	mov	r3, r2
 8003c32:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003c34:	2300      	movs	r3, #0
 8003c36:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c3e:	b2db      	uxtb	r3, r3
 8003c40:	2b20      	cmp	r3, #32
 8003c42:	d175      	bne.n	8003d30 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c44:	68bb      	ldr	r3, [r7, #8]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d002      	beq.n	8003c50 <HAL_UART_Transmit+0x2c>
 8003c4a:	88fb      	ldrh	r3, [r7, #6]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d101      	bne.n	8003c54 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003c50:	2301      	movs	r3, #1
 8003c52:	e06e      	b.n	8003d32 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	2200      	movs	r2, #0
 8003c58:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	2221      	movs	r2, #33	@ 0x21
 8003c5e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003c62:	f7fd f9eb 	bl	800103c <HAL_GetTick>
 8003c66:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	88fa      	ldrh	r2, [r7, #6]
 8003c6c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	88fa      	ldrh	r2, [r7, #6]
 8003c72:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	689b      	ldr	r3, [r3, #8]
 8003c78:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c7c:	d108      	bne.n	8003c90 <HAL_UART_Transmit+0x6c>
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	691b      	ldr	r3, [r3, #16]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d104      	bne.n	8003c90 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003c86:	2300      	movs	r3, #0
 8003c88:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003c8a:	68bb      	ldr	r3, [r7, #8]
 8003c8c:	61bb      	str	r3, [r7, #24]
 8003c8e:	e003      	b.n	8003c98 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003c90:	68bb      	ldr	r3, [r7, #8]
 8003c92:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003c94:	2300      	movs	r3, #0
 8003c96:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003c98:	e02e      	b.n	8003cf8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	9300      	str	r3, [sp, #0]
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	2180      	movs	r1, #128	@ 0x80
 8003ca4:	68f8      	ldr	r0, [r7, #12]
 8003ca6:	f000 fc1a 	bl	80044de <UART_WaitOnFlagUntilTimeout>
 8003caa:	4603      	mov	r3, r0
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d005      	beq.n	8003cbc <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	2220      	movs	r2, #32
 8003cb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003cb8:	2303      	movs	r3, #3
 8003cba:	e03a      	b.n	8003d32 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003cbc:	69fb      	ldr	r3, [r7, #28]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d10b      	bne.n	8003cda <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003cc2:	69bb      	ldr	r3, [r7, #24]
 8003cc4:	881b      	ldrh	r3, [r3, #0]
 8003cc6:	461a      	mov	r2, r3
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003cd0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003cd2:	69bb      	ldr	r3, [r7, #24]
 8003cd4:	3302      	adds	r3, #2
 8003cd6:	61bb      	str	r3, [r7, #24]
 8003cd8:	e007      	b.n	8003cea <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003cda:	69fb      	ldr	r3, [r7, #28]
 8003cdc:	781a      	ldrb	r2, [r3, #0]
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003ce4:	69fb      	ldr	r3, [r7, #28]
 8003ce6:	3301      	adds	r3, #1
 8003ce8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003cee:	b29b      	uxth	r3, r3
 8003cf0:	3b01      	subs	r3, #1
 8003cf2:	b29a      	uxth	r2, r3
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003cfc:	b29b      	uxth	r3, r3
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d1cb      	bne.n	8003c9a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	9300      	str	r3, [sp, #0]
 8003d06:	697b      	ldr	r3, [r7, #20]
 8003d08:	2200      	movs	r2, #0
 8003d0a:	2140      	movs	r1, #64	@ 0x40
 8003d0c:	68f8      	ldr	r0, [r7, #12]
 8003d0e:	f000 fbe6 	bl	80044de <UART_WaitOnFlagUntilTimeout>
 8003d12:	4603      	mov	r3, r0
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d005      	beq.n	8003d24 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	2220      	movs	r2, #32
 8003d1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003d20:	2303      	movs	r3, #3
 8003d22:	e006      	b.n	8003d32 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	2220      	movs	r2, #32
 8003d28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	e000      	b.n	8003d32 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003d30:	2302      	movs	r3, #2
  }
}
 8003d32:	4618      	mov	r0, r3
 8003d34:	3720      	adds	r7, #32
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bd80      	pop	{r7, pc}

08003d3a <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003d3a:	b580      	push	{r7, lr}
 8003d3c:	b084      	sub	sp, #16
 8003d3e:	af00      	add	r7, sp, #0
 8003d40:	60f8      	str	r0, [r7, #12]
 8003d42:	60b9      	str	r1, [r7, #8]
 8003d44:	4613      	mov	r3, r2
 8003d46:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003d4e:	b2db      	uxtb	r3, r3
 8003d50:	2b20      	cmp	r3, #32
 8003d52:	d112      	bne.n	8003d7a <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d002      	beq.n	8003d60 <HAL_UART_Receive_DMA+0x26>
 8003d5a:	88fb      	ldrh	r3, [r7, #6]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d101      	bne.n	8003d64 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8003d60:	2301      	movs	r3, #1
 8003d62:	e00b      	b.n	8003d7c <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	2200      	movs	r2, #0
 8003d68:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8003d6a:	88fb      	ldrh	r3, [r7, #6]
 8003d6c:	461a      	mov	r2, r3
 8003d6e:	68b9      	ldr	r1, [r7, #8]
 8003d70:	68f8      	ldr	r0, [r7, #12]
 8003d72:	f000 fc0d 	bl	8004590 <UART_Start_Receive_DMA>
 8003d76:	4603      	mov	r3, r0
 8003d78:	e000      	b.n	8003d7c <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003d7a:	2302      	movs	r3, #2
  }
}
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	3710      	adds	r7, #16
 8003d80:	46bd      	mov	sp, r7
 8003d82:	bd80      	pop	{r7, pc}

08003d84 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b0ba      	sub	sp, #232	@ 0xe8
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	68db      	ldr	r3, [r3, #12]
 8003d9c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	695b      	ldr	r3, [r3, #20]
 8003da6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003daa:	2300      	movs	r3, #0
 8003dac:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003db0:	2300      	movs	r3, #0
 8003db2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003db6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003dba:	f003 030f 	and.w	r3, r3, #15
 8003dbe:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003dc2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d10f      	bne.n	8003dea <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003dca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003dce:	f003 0320 	and.w	r3, r3, #32
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d009      	beq.n	8003dea <HAL_UART_IRQHandler+0x66>
 8003dd6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003dda:	f003 0320 	and.w	r3, r3, #32
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d003      	beq.n	8003dea <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003de2:	6878      	ldr	r0, [r7, #4]
 8003de4:	f000 fd72 	bl	80048cc <UART_Receive_IT>
      return;
 8003de8:	e25b      	b.n	80042a2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003dea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	f000 80de 	beq.w	8003fb0 <HAL_UART_IRQHandler+0x22c>
 8003df4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003df8:	f003 0301 	and.w	r3, r3, #1
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d106      	bne.n	8003e0e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003e00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e04:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	f000 80d1 	beq.w	8003fb0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003e0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e12:	f003 0301 	and.w	r3, r3, #1
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d00b      	beq.n	8003e32 <HAL_UART_IRQHandler+0xae>
 8003e1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d005      	beq.n	8003e32 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e2a:	f043 0201 	orr.w	r2, r3, #1
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003e32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e36:	f003 0304 	and.w	r3, r3, #4
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d00b      	beq.n	8003e56 <HAL_UART_IRQHandler+0xd2>
 8003e3e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003e42:	f003 0301 	and.w	r3, r3, #1
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d005      	beq.n	8003e56 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e4e:	f043 0202 	orr.w	r2, r3, #2
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003e56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e5a:	f003 0302 	and.w	r3, r3, #2
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d00b      	beq.n	8003e7a <HAL_UART_IRQHandler+0xf6>
 8003e62:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003e66:	f003 0301 	and.w	r3, r3, #1
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d005      	beq.n	8003e7a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e72:	f043 0204 	orr.w	r2, r3, #4
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003e7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e7e:	f003 0308 	and.w	r3, r3, #8
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d011      	beq.n	8003eaa <HAL_UART_IRQHandler+0x126>
 8003e86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e8a:	f003 0320 	and.w	r3, r3, #32
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d105      	bne.n	8003e9e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003e92:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003e96:	f003 0301 	and.w	r3, r3, #1
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d005      	beq.n	8003eaa <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ea2:	f043 0208 	orr.w	r2, r3, #8
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	f000 81f2 	beq.w	8004298 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003eb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003eb8:	f003 0320 	and.w	r3, r3, #32
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d008      	beq.n	8003ed2 <HAL_UART_IRQHandler+0x14e>
 8003ec0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ec4:	f003 0320 	and.w	r3, r3, #32
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d002      	beq.n	8003ed2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003ecc:	6878      	ldr	r0, [r7, #4]
 8003ece:	f000 fcfd 	bl	80048cc <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	695b      	ldr	r3, [r3, #20]
 8003ed8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	bf14      	ite	ne
 8003ee0:	2301      	movne	r3, #1
 8003ee2:	2300      	moveq	r3, #0
 8003ee4:	b2db      	uxtb	r3, r3
 8003ee6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003eee:	f003 0308 	and.w	r3, r3, #8
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d103      	bne.n	8003efe <HAL_UART_IRQHandler+0x17a>
 8003ef6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d04f      	beq.n	8003f9e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003efe:	6878      	ldr	r0, [r7, #4]
 8003f00:	f000 fc07 	bl	8004712 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	695b      	ldr	r3, [r3, #20]
 8003f0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d041      	beq.n	8003f96 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	3314      	adds	r3, #20
 8003f18:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f1c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003f20:	e853 3f00 	ldrex	r3, [r3]
 8003f24:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003f28:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003f2c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003f30:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	3314      	adds	r3, #20
 8003f3a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003f3e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003f42:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f46:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003f4a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003f4e:	e841 2300 	strex	r3, r2, [r1]
 8003f52:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003f56:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d1d9      	bne.n	8003f12 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d013      	beq.n	8003f8e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f6a:	4a7e      	ldr	r2, [pc, #504]	@ (8004164 <HAL_UART_IRQHandler+0x3e0>)
 8003f6c:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f72:	4618      	mov	r0, r3
 8003f74:	f7fd fa94 	bl	80014a0 <HAL_DMA_Abort_IT>
 8003f78:	4603      	mov	r3, r0
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d016      	beq.n	8003fac <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f84:	687a      	ldr	r2, [r7, #4]
 8003f86:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003f88:	4610      	mov	r0, r2
 8003f8a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f8c:	e00e      	b.n	8003fac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003f8e:	6878      	ldr	r0, [r7, #4]
 8003f90:	f000 f993 	bl	80042ba <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f94:	e00a      	b.n	8003fac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003f96:	6878      	ldr	r0, [r7, #4]
 8003f98:	f000 f98f 	bl	80042ba <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f9c:	e006      	b.n	8003fac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003f9e:	6878      	ldr	r0, [r7, #4]
 8003fa0:	f000 f98b 	bl	80042ba <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003faa:	e175      	b.n	8004298 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fac:	bf00      	nop
    return;
 8003fae:	e173      	b.n	8004298 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fb4:	2b01      	cmp	r3, #1
 8003fb6:	f040 814f 	bne.w	8004258 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003fba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003fbe:	f003 0310 	and.w	r3, r3, #16
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	f000 8148 	beq.w	8004258 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003fc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003fcc:	f003 0310 	and.w	r3, r3, #16
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	f000 8141 	beq.w	8004258 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	60bb      	str	r3, [r7, #8]
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	60bb      	str	r3, [r7, #8]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	60bb      	str	r3, [r7, #8]
 8003fea:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	695b      	ldr	r3, [r3, #20]
 8003ff2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	f000 80b6 	beq.w	8004168 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004008:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800400c:	2b00      	cmp	r3, #0
 800400e:	f000 8145 	beq.w	800429c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004016:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800401a:	429a      	cmp	r2, r3
 800401c:	f080 813e 	bcs.w	800429c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004026:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800402c:	699b      	ldr	r3, [r3, #24]
 800402e:	2b20      	cmp	r3, #32
 8004030:	f000 8088 	beq.w	8004144 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	330c      	adds	r3, #12
 800403a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800403e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004042:	e853 3f00 	ldrex	r3, [r3]
 8004046:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800404a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800404e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004052:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	330c      	adds	r3, #12
 800405c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004060:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004064:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004068:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800406c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004070:	e841 2300 	strex	r3, r2, [r1]
 8004074:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004078:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800407c:	2b00      	cmp	r3, #0
 800407e:	d1d9      	bne.n	8004034 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	3314      	adds	r3, #20
 8004086:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004088:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800408a:	e853 3f00 	ldrex	r3, [r3]
 800408e:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004090:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004092:	f023 0301 	bic.w	r3, r3, #1
 8004096:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	3314      	adds	r3, #20
 80040a0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80040a4:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80040a8:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040aa:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80040ac:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80040b0:	e841 2300 	strex	r3, r2, [r1]
 80040b4:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80040b6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d1e1      	bne.n	8004080 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	3314      	adds	r3, #20
 80040c2:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040c4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80040c6:	e853 3f00 	ldrex	r3, [r3]
 80040ca:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80040cc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80040ce:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80040d2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	3314      	adds	r3, #20
 80040dc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80040e0:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80040e2:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040e4:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80040e6:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80040e8:	e841 2300 	strex	r3, r2, [r1]
 80040ec:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80040ee:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d1e3      	bne.n	80040bc <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2220      	movs	r2, #32
 80040f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2200      	movs	r2, #0
 8004100:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	330c      	adds	r3, #12
 8004108:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800410a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800410c:	e853 3f00 	ldrex	r3, [r3]
 8004110:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004112:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004114:	f023 0310 	bic.w	r3, r3, #16
 8004118:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	330c      	adds	r3, #12
 8004122:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004126:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004128:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800412a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800412c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800412e:	e841 2300 	strex	r3, r2, [r1]
 8004132:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004134:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004136:	2b00      	cmp	r3, #0
 8004138:	d1e3      	bne.n	8004102 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800413e:	4618      	mov	r0, r3
 8004140:	f7fd f972 	bl	8001428 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2202      	movs	r2, #2
 8004148:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004152:	b29b      	uxth	r3, r3
 8004154:	1ad3      	subs	r3, r2, r3
 8004156:	b29b      	uxth	r3, r3
 8004158:	4619      	mov	r1, r3
 800415a:	6878      	ldr	r0, [r7, #4]
 800415c:	f000 f8b6 	bl	80042cc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004160:	e09c      	b.n	800429c <HAL_UART_IRQHandler+0x518>
 8004162:	bf00      	nop
 8004164:	080047d7 	.word	0x080047d7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004170:	b29b      	uxth	r3, r3
 8004172:	1ad3      	subs	r3, r2, r3
 8004174:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800417c:	b29b      	uxth	r3, r3
 800417e:	2b00      	cmp	r3, #0
 8004180:	f000 808e 	beq.w	80042a0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004184:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004188:	2b00      	cmp	r3, #0
 800418a:	f000 8089 	beq.w	80042a0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	330c      	adds	r3, #12
 8004194:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004196:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004198:	e853 3f00 	ldrex	r3, [r3]
 800419c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800419e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041a0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80041a4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	330c      	adds	r3, #12
 80041ae:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80041b2:	647a      	str	r2, [r7, #68]	@ 0x44
 80041b4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041b6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80041b8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80041ba:	e841 2300 	strex	r3, r2, [r1]
 80041be:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80041c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d1e3      	bne.n	800418e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	3314      	adds	r3, #20
 80041cc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041d0:	e853 3f00 	ldrex	r3, [r3]
 80041d4:	623b      	str	r3, [r7, #32]
   return(result);
 80041d6:	6a3b      	ldr	r3, [r7, #32]
 80041d8:	f023 0301 	bic.w	r3, r3, #1
 80041dc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	3314      	adds	r3, #20
 80041e6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80041ea:	633a      	str	r2, [r7, #48]	@ 0x30
 80041ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041ee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80041f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80041f2:	e841 2300 	strex	r3, r2, [r1]
 80041f6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80041f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d1e3      	bne.n	80041c6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2220      	movs	r2, #32
 8004202:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2200      	movs	r2, #0
 800420a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	330c      	adds	r3, #12
 8004212:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004214:	693b      	ldr	r3, [r7, #16]
 8004216:	e853 3f00 	ldrex	r3, [r3]
 800421a:	60fb      	str	r3, [r7, #12]
   return(result);
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	f023 0310 	bic.w	r3, r3, #16
 8004222:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	330c      	adds	r3, #12
 800422c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004230:	61fa      	str	r2, [r7, #28]
 8004232:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004234:	69b9      	ldr	r1, [r7, #24]
 8004236:	69fa      	ldr	r2, [r7, #28]
 8004238:	e841 2300 	strex	r3, r2, [r1]
 800423c:	617b      	str	r3, [r7, #20]
   return(result);
 800423e:	697b      	ldr	r3, [r7, #20]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d1e3      	bne.n	800420c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2202      	movs	r2, #2
 8004248:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800424a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800424e:	4619      	mov	r1, r3
 8004250:	6878      	ldr	r0, [r7, #4]
 8004252:	f000 f83b 	bl	80042cc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004256:	e023      	b.n	80042a0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004258:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800425c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004260:	2b00      	cmp	r3, #0
 8004262:	d009      	beq.n	8004278 <HAL_UART_IRQHandler+0x4f4>
 8004264:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004268:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800426c:	2b00      	cmp	r3, #0
 800426e:	d003      	beq.n	8004278 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004270:	6878      	ldr	r0, [r7, #4]
 8004272:	f000 fac4 	bl	80047fe <UART_Transmit_IT>
    return;
 8004276:	e014      	b.n	80042a2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004278:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800427c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004280:	2b00      	cmp	r3, #0
 8004282:	d00e      	beq.n	80042a2 <HAL_UART_IRQHandler+0x51e>
 8004284:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004288:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800428c:	2b00      	cmp	r3, #0
 800428e:	d008      	beq.n	80042a2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004290:	6878      	ldr	r0, [r7, #4]
 8004292:	f000 fb03 	bl	800489c <UART_EndTransmit_IT>
    return;
 8004296:	e004      	b.n	80042a2 <HAL_UART_IRQHandler+0x51e>
    return;
 8004298:	bf00      	nop
 800429a:	e002      	b.n	80042a2 <HAL_UART_IRQHandler+0x51e>
      return;
 800429c:	bf00      	nop
 800429e:	e000      	b.n	80042a2 <HAL_UART_IRQHandler+0x51e>
      return;
 80042a0:	bf00      	nop
  }
}
 80042a2:	37e8      	adds	r7, #232	@ 0xe8
 80042a4:	46bd      	mov	sp, r7
 80042a6:	bd80      	pop	{r7, pc}

080042a8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80042a8:	b480      	push	{r7}
 80042aa:	b083      	sub	sp, #12
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80042b0:	bf00      	nop
 80042b2:	370c      	adds	r7, #12
 80042b4:	46bd      	mov	sp, r7
 80042b6:	bc80      	pop	{r7}
 80042b8:	4770      	bx	lr

080042ba <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80042ba:	b480      	push	{r7}
 80042bc:	b083      	sub	sp, #12
 80042be:	af00      	add	r7, sp, #0
 80042c0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80042c2:	bf00      	nop
 80042c4:	370c      	adds	r7, #12
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bc80      	pop	{r7}
 80042ca:	4770      	bx	lr

080042cc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80042cc:	b480      	push	{r7}
 80042ce:	b083      	sub	sp, #12
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
 80042d4:	460b      	mov	r3, r1
 80042d6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80042d8:	bf00      	nop
 80042da:	370c      	adds	r7, #12
 80042dc:	46bd      	mov	sp, r7
 80042de:	bc80      	pop	{r7}
 80042e0:	4770      	bx	lr

080042e2 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80042e2:	b580      	push	{r7, lr}
 80042e4:	b09c      	sub	sp, #112	@ 0x70
 80042e6:	af00      	add	r7, sp, #0
 80042e8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042ee:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f003 0320 	and.w	r3, r3, #32
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d172      	bne.n	80043e4 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80042fe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004300:	2200      	movs	r2, #0
 8004302:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004304:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	330c      	adds	r3, #12
 800430a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800430c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800430e:	e853 3f00 	ldrex	r3, [r3]
 8004312:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004314:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004316:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800431a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800431c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	330c      	adds	r3, #12
 8004322:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8004324:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004326:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004328:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800432a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800432c:	e841 2300 	strex	r3, r2, [r1]
 8004330:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004332:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004334:	2b00      	cmp	r3, #0
 8004336:	d1e5      	bne.n	8004304 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004338:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	3314      	adds	r3, #20
 800433e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004340:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004342:	e853 3f00 	ldrex	r3, [r3]
 8004346:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004348:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800434a:	f023 0301 	bic.w	r3, r3, #1
 800434e:	667b      	str	r3, [r7, #100]	@ 0x64
 8004350:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	3314      	adds	r3, #20
 8004356:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8004358:	647a      	str	r2, [r7, #68]	@ 0x44
 800435a:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800435c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800435e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004360:	e841 2300 	strex	r3, r2, [r1]
 8004364:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004366:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004368:	2b00      	cmp	r3, #0
 800436a:	d1e5      	bne.n	8004338 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800436c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	3314      	adds	r3, #20
 8004372:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004374:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004376:	e853 3f00 	ldrex	r3, [r3]
 800437a:	623b      	str	r3, [r7, #32]
   return(result);
 800437c:	6a3b      	ldr	r3, [r7, #32]
 800437e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004382:	663b      	str	r3, [r7, #96]	@ 0x60
 8004384:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	3314      	adds	r3, #20
 800438a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800438c:	633a      	str	r2, [r7, #48]	@ 0x30
 800438e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004390:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004392:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004394:	e841 2300 	strex	r3, r2, [r1]
 8004398:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800439a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800439c:	2b00      	cmp	r3, #0
 800439e:	d1e5      	bne.n	800436c <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80043a0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80043a2:	2220      	movs	r2, #32
 80043a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043a8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80043aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043ac:	2b01      	cmp	r3, #1
 80043ae:	d119      	bne.n	80043e4 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043b0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	330c      	adds	r3, #12
 80043b6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043b8:	693b      	ldr	r3, [r7, #16]
 80043ba:	e853 3f00 	ldrex	r3, [r3]
 80043be:	60fb      	str	r3, [r7, #12]
   return(result);
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	f023 0310 	bic.w	r3, r3, #16
 80043c6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80043c8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	330c      	adds	r3, #12
 80043ce:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80043d0:	61fa      	str	r2, [r7, #28]
 80043d2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043d4:	69b9      	ldr	r1, [r7, #24]
 80043d6:	69fa      	ldr	r2, [r7, #28]
 80043d8:	e841 2300 	strex	r3, r2, [r1]
 80043dc:	617b      	str	r3, [r7, #20]
   return(result);
 80043de:	697b      	ldr	r3, [r7, #20]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d1e5      	bne.n	80043b0 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80043e4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80043e6:	2200      	movs	r2, #0
 80043e8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043ea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80043ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043ee:	2b01      	cmp	r3, #1
 80043f0:	d106      	bne.n	8004400 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80043f2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80043f4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80043f6:	4619      	mov	r1, r3
 80043f8:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80043fa:	f7ff ff67 	bl	80042cc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80043fe:	e002      	b.n	8004406 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8004400:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8004402:	f7fc fb81 	bl	8000b08 <HAL_UART_RxCpltCallback>
}
 8004406:	bf00      	nop
 8004408:	3770      	adds	r7, #112	@ 0x70
 800440a:	46bd      	mov	sp, r7
 800440c:	bd80      	pop	{r7, pc}

0800440e <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800440e:	b580      	push	{r7, lr}
 8004410:	b084      	sub	sp, #16
 8004412:	af00      	add	r7, sp, #0
 8004414:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800441a:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	2201      	movs	r2, #1
 8004420:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004426:	2b01      	cmp	r3, #1
 8004428:	d108      	bne.n	800443c <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800442e:	085b      	lsrs	r3, r3, #1
 8004430:	b29b      	uxth	r3, r3
 8004432:	4619      	mov	r1, r3
 8004434:	68f8      	ldr	r0, [r7, #12]
 8004436:	f7ff ff49 	bl	80042cc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800443a:	e002      	b.n	8004442 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800443c:	68f8      	ldr	r0, [r7, #12]
 800443e:	f7fc fb97 	bl	8000b70 <HAL_UART_RxHalfCpltCallback>
}
 8004442:	bf00      	nop
 8004444:	3710      	adds	r7, #16
 8004446:	46bd      	mov	sp, r7
 8004448:	bd80      	pop	{r7, pc}

0800444a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800444a:	b580      	push	{r7, lr}
 800444c:	b084      	sub	sp, #16
 800444e:	af00      	add	r7, sp, #0
 8004450:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004452:	2300      	movs	r3, #0
 8004454:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800445a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800445c:	68bb      	ldr	r3, [r7, #8]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	695b      	ldr	r3, [r3, #20]
 8004462:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004466:	2b00      	cmp	r3, #0
 8004468:	bf14      	ite	ne
 800446a:	2301      	movne	r3, #1
 800446c:	2300      	moveq	r3, #0
 800446e:	b2db      	uxtb	r3, r3
 8004470:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004472:	68bb      	ldr	r3, [r7, #8]
 8004474:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004478:	b2db      	uxtb	r3, r3
 800447a:	2b21      	cmp	r3, #33	@ 0x21
 800447c:	d108      	bne.n	8004490 <UART_DMAError+0x46>
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d005      	beq.n	8004490 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	2200      	movs	r2, #0
 8004488:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 800448a:	68b8      	ldr	r0, [r7, #8]
 800448c:	f000 f91a 	bl	80046c4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004490:	68bb      	ldr	r3, [r7, #8]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	695b      	ldr	r3, [r3, #20]
 8004496:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800449a:	2b00      	cmp	r3, #0
 800449c:	bf14      	ite	ne
 800449e:	2301      	movne	r3, #1
 80044a0:	2300      	moveq	r3, #0
 80044a2:	b2db      	uxtb	r3, r3
 80044a4:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80044a6:	68bb      	ldr	r3, [r7, #8]
 80044a8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80044ac:	b2db      	uxtb	r3, r3
 80044ae:	2b22      	cmp	r3, #34	@ 0x22
 80044b0:	d108      	bne.n	80044c4 <UART_DMAError+0x7a>
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d005      	beq.n	80044c4 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80044b8:	68bb      	ldr	r3, [r7, #8]
 80044ba:	2200      	movs	r2, #0
 80044bc:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 80044be:	68b8      	ldr	r0, [r7, #8]
 80044c0:	f000 f927 	bl	8004712 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80044c4:	68bb      	ldr	r3, [r7, #8]
 80044c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044c8:	f043 0210 	orr.w	r2, r3, #16
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80044d0:	68b8      	ldr	r0, [r7, #8]
 80044d2:	f7ff fef2 	bl	80042ba <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80044d6:	bf00      	nop
 80044d8:	3710      	adds	r7, #16
 80044da:	46bd      	mov	sp, r7
 80044dc:	bd80      	pop	{r7, pc}

080044de <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80044de:	b580      	push	{r7, lr}
 80044e0:	b086      	sub	sp, #24
 80044e2:	af00      	add	r7, sp, #0
 80044e4:	60f8      	str	r0, [r7, #12]
 80044e6:	60b9      	str	r1, [r7, #8]
 80044e8:	603b      	str	r3, [r7, #0]
 80044ea:	4613      	mov	r3, r2
 80044ec:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044ee:	e03b      	b.n	8004568 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044f0:	6a3b      	ldr	r3, [r7, #32]
 80044f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044f6:	d037      	beq.n	8004568 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044f8:	f7fc fda0 	bl	800103c <HAL_GetTick>
 80044fc:	4602      	mov	r2, r0
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	1ad3      	subs	r3, r2, r3
 8004502:	6a3a      	ldr	r2, [r7, #32]
 8004504:	429a      	cmp	r2, r3
 8004506:	d302      	bcc.n	800450e <UART_WaitOnFlagUntilTimeout+0x30>
 8004508:	6a3b      	ldr	r3, [r7, #32]
 800450a:	2b00      	cmp	r3, #0
 800450c:	d101      	bne.n	8004512 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800450e:	2303      	movs	r3, #3
 8004510:	e03a      	b.n	8004588 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	68db      	ldr	r3, [r3, #12]
 8004518:	f003 0304 	and.w	r3, r3, #4
 800451c:	2b00      	cmp	r3, #0
 800451e:	d023      	beq.n	8004568 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004520:	68bb      	ldr	r3, [r7, #8]
 8004522:	2b80      	cmp	r3, #128	@ 0x80
 8004524:	d020      	beq.n	8004568 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004526:	68bb      	ldr	r3, [r7, #8]
 8004528:	2b40      	cmp	r3, #64	@ 0x40
 800452a:	d01d      	beq.n	8004568 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f003 0308 	and.w	r3, r3, #8
 8004536:	2b08      	cmp	r3, #8
 8004538:	d116      	bne.n	8004568 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800453a:	2300      	movs	r3, #0
 800453c:	617b      	str	r3, [r7, #20]
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	617b      	str	r3, [r7, #20]
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	685b      	ldr	r3, [r3, #4]
 800454c:	617b      	str	r3, [r7, #20]
 800454e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004550:	68f8      	ldr	r0, [r7, #12]
 8004552:	f000 f8de 	bl	8004712 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	2208      	movs	r2, #8
 800455a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	2200      	movs	r2, #0
 8004560:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004564:	2301      	movs	r3, #1
 8004566:	e00f      	b.n	8004588 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	681a      	ldr	r2, [r3, #0]
 800456e:	68bb      	ldr	r3, [r7, #8]
 8004570:	4013      	ands	r3, r2
 8004572:	68ba      	ldr	r2, [r7, #8]
 8004574:	429a      	cmp	r2, r3
 8004576:	bf0c      	ite	eq
 8004578:	2301      	moveq	r3, #1
 800457a:	2300      	movne	r3, #0
 800457c:	b2db      	uxtb	r3, r3
 800457e:	461a      	mov	r2, r3
 8004580:	79fb      	ldrb	r3, [r7, #7]
 8004582:	429a      	cmp	r2, r3
 8004584:	d0b4      	beq.n	80044f0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004586:	2300      	movs	r3, #0
}
 8004588:	4618      	mov	r0, r3
 800458a:	3718      	adds	r7, #24
 800458c:	46bd      	mov	sp, r7
 800458e:	bd80      	pop	{r7, pc}

08004590 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b098      	sub	sp, #96	@ 0x60
 8004594:	af00      	add	r7, sp, #0
 8004596:	60f8      	str	r0, [r7, #12]
 8004598:	60b9      	str	r1, [r7, #8]
 800459a:	4613      	mov	r3, r2
 800459c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800459e:	68ba      	ldr	r2, [r7, #8]
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	88fa      	ldrh	r2, [r7, #6]
 80045a8:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	2200      	movs	r2, #0
 80045ae:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	2222      	movs	r2, #34	@ 0x22
 80045b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045bc:	4a3e      	ldr	r2, [pc, #248]	@ (80046b8 <UART_Start_Receive_DMA+0x128>)
 80045be:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045c4:	4a3d      	ldr	r2, [pc, #244]	@ (80046bc <UART_Start_Receive_DMA+0x12c>)
 80045c6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045cc:	4a3c      	ldr	r2, [pc, #240]	@ (80046c0 <UART_Start_Receive_DMA+0x130>)
 80045ce:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045d4:	2200      	movs	r2, #0
 80045d6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80045d8:	f107 0308 	add.w	r3, r7, #8
 80045dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	3304      	adds	r3, #4
 80045e8:	4619      	mov	r1, r3
 80045ea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80045ec:	681a      	ldr	r2, [r3, #0]
 80045ee:	88fb      	ldrh	r3, [r7, #6]
 80045f0:	f7fc feba 	bl	8001368 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80045f4:	2300      	movs	r3, #0
 80045f6:	613b      	str	r3, [r7, #16]
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	613b      	str	r3, [r7, #16]
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	685b      	ldr	r3, [r3, #4]
 8004606:	613b      	str	r3, [r7, #16]
 8004608:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	691b      	ldr	r3, [r3, #16]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d019      	beq.n	8004646 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	330c      	adds	r3, #12
 8004618:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800461a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800461c:	e853 3f00 	ldrex	r3, [r3]
 8004620:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004622:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004624:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004628:	65bb      	str	r3, [r7, #88]	@ 0x58
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	330c      	adds	r3, #12
 8004630:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004632:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8004634:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004636:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8004638:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800463a:	e841 2300 	strex	r3, r2, [r1]
 800463e:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8004640:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004642:	2b00      	cmp	r3, #0
 8004644:	d1e5      	bne.n	8004612 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	3314      	adds	r3, #20
 800464c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800464e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004650:	e853 3f00 	ldrex	r3, [r3]
 8004654:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004656:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004658:	f043 0301 	orr.w	r3, r3, #1
 800465c:	657b      	str	r3, [r7, #84]	@ 0x54
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	3314      	adds	r3, #20
 8004664:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004666:	63ba      	str	r2, [r7, #56]	@ 0x38
 8004668:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800466a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800466c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800466e:	e841 2300 	strex	r3, r2, [r1]
 8004672:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004674:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004676:	2b00      	cmp	r3, #0
 8004678:	d1e5      	bne.n	8004646 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	3314      	adds	r3, #20
 8004680:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004682:	69bb      	ldr	r3, [r7, #24]
 8004684:	e853 3f00 	ldrex	r3, [r3]
 8004688:	617b      	str	r3, [r7, #20]
   return(result);
 800468a:	697b      	ldr	r3, [r7, #20]
 800468c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004690:	653b      	str	r3, [r7, #80]	@ 0x50
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	3314      	adds	r3, #20
 8004698:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800469a:	627a      	str	r2, [r7, #36]	@ 0x24
 800469c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800469e:	6a39      	ldr	r1, [r7, #32]
 80046a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80046a2:	e841 2300 	strex	r3, r2, [r1]
 80046a6:	61fb      	str	r3, [r7, #28]
   return(result);
 80046a8:	69fb      	ldr	r3, [r7, #28]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d1e5      	bne.n	800467a <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 80046ae:	2300      	movs	r3, #0
}
 80046b0:	4618      	mov	r0, r3
 80046b2:	3760      	adds	r7, #96	@ 0x60
 80046b4:	46bd      	mov	sp, r7
 80046b6:	bd80      	pop	{r7, pc}
 80046b8:	080042e3 	.word	0x080042e3
 80046bc:	0800440f 	.word	0x0800440f
 80046c0:	0800444b 	.word	0x0800444b

080046c4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80046c4:	b480      	push	{r7}
 80046c6:	b089      	sub	sp, #36	@ 0x24
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	330c      	adds	r3, #12
 80046d2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	e853 3f00 	ldrex	r3, [r3]
 80046da:	60bb      	str	r3, [r7, #8]
   return(result);
 80046dc:	68bb      	ldr	r3, [r7, #8]
 80046de:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80046e2:	61fb      	str	r3, [r7, #28]
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	330c      	adds	r3, #12
 80046ea:	69fa      	ldr	r2, [r7, #28]
 80046ec:	61ba      	str	r2, [r7, #24]
 80046ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046f0:	6979      	ldr	r1, [r7, #20]
 80046f2:	69ba      	ldr	r2, [r7, #24]
 80046f4:	e841 2300 	strex	r3, r2, [r1]
 80046f8:	613b      	str	r3, [r7, #16]
   return(result);
 80046fa:	693b      	ldr	r3, [r7, #16]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d1e5      	bne.n	80046cc <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2220      	movs	r2, #32
 8004704:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8004708:	bf00      	nop
 800470a:	3724      	adds	r7, #36	@ 0x24
 800470c:	46bd      	mov	sp, r7
 800470e:	bc80      	pop	{r7}
 8004710:	4770      	bx	lr

08004712 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004712:	b480      	push	{r7}
 8004714:	b095      	sub	sp, #84	@ 0x54
 8004716:	af00      	add	r7, sp, #0
 8004718:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	330c      	adds	r3, #12
 8004720:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004722:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004724:	e853 3f00 	ldrex	r3, [r3]
 8004728:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800472a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800472c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004730:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	330c      	adds	r3, #12
 8004738:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800473a:	643a      	str	r2, [r7, #64]	@ 0x40
 800473c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800473e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004740:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004742:	e841 2300 	strex	r3, r2, [r1]
 8004746:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004748:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800474a:	2b00      	cmp	r3, #0
 800474c:	d1e5      	bne.n	800471a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	3314      	adds	r3, #20
 8004754:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004756:	6a3b      	ldr	r3, [r7, #32]
 8004758:	e853 3f00 	ldrex	r3, [r3]
 800475c:	61fb      	str	r3, [r7, #28]
   return(result);
 800475e:	69fb      	ldr	r3, [r7, #28]
 8004760:	f023 0301 	bic.w	r3, r3, #1
 8004764:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	3314      	adds	r3, #20
 800476c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800476e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004770:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004772:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004774:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004776:	e841 2300 	strex	r3, r2, [r1]
 800477a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800477c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800477e:	2b00      	cmp	r3, #0
 8004780:	d1e5      	bne.n	800474e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004786:	2b01      	cmp	r3, #1
 8004788:	d119      	bne.n	80047be <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	330c      	adds	r3, #12
 8004790:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	e853 3f00 	ldrex	r3, [r3]
 8004798:	60bb      	str	r3, [r7, #8]
   return(result);
 800479a:	68bb      	ldr	r3, [r7, #8]
 800479c:	f023 0310 	bic.w	r3, r3, #16
 80047a0:	647b      	str	r3, [r7, #68]	@ 0x44
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	330c      	adds	r3, #12
 80047a8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80047aa:	61ba      	str	r2, [r7, #24]
 80047ac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047ae:	6979      	ldr	r1, [r7, #20]
 80047b0:	69ba      	ldr	r2, [r7, #24]
 80047b2:	e841 2300 	strex	r3, r2, [r1]
 80047b6:	613b      	str	r3, [r7, #16]
   return(result);
 80047b8:	693b      	ldr	r3, [r7, #16]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d1e5      	bne.n	800478a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2220      	movs	r2, #32
 80047c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2200      	movs	r2, #0
 80047ca:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80047cc:	bf00      	nop
 80047ce:	3754      	adds	r7, #84	@ 0x54
 80047d0:	46bd      	mov	sp, r7
 80047d2:	bc80      	pop	{r7}
 80047d4:	4770      	bx	lr

080047d6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80047d6:	b580      	push	{r7, lr}
 80047d8:	b084      	sub	sp, #16
 80047da:	af00      	add	r7, sp, #0
 80047dc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047e2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	2200      	movs	r2, #0
 80047e8:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	2200      	movs	r2, #0
 80047ee:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80047f0:	68f8      	ldr	r0, [r7, #12]
 80047f2:	f7ff fd62 	bl	80042ba <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80047f6:	bf00      	nop
 80047f8:	3710      	adds	r7, #16
 80047fa:	46bd      	mov	sp, r7
 80047fc:	bd80      	pop	{r7, pc}

080047fe <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80047fe:	b480      	push	{r7}
 8004800:	b085      	sub	sp, #20
 8004802:	af00      	add	r7, sp, #0
 8004804:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800480c:	b2db      	uxtb	r3, r3
 800480e:	2b21      	cmp	r3, #33	@ 0x21
 8004810:	d13e      	bne.n	8004890 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	689b      	ldr	r3, [r3, #8]
 8004816:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800481a:	d114      	bne.n	8004846 <UART_Transmit_IT+0x48>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	691b      	ldr	r3, [r3, #16]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d110      	bne.n	8004846 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6a1b      	ldr	r3, [r3, #32]
 8004828:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	881b      	ldrh	r3, [r3, #0]
 800482e:	461a      	mov	r2, r3
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004838:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6a1b      	ldr	r3, [r3, #32]
 800483e:	1c9a      	adds	r2, r3, #2
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	621a      	str	r2, [r3, #32]
 8004844:	e008      	b.n	8004858 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6a1b      	ldr	r3, [r3, #32]
 800484a:	1c59      	adds	r1, r3, #1
 800484c:	687a      	ldr	r2, [r7, #4]
 800484e:	6211      	str	r1, [r2, #32]
 8004850:	781a      	ldrb	r2, [r3, #0]
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800485c:	b29b      	uxth	r3, r3
 800485e:	3b01      	subs	r3, #1
 8004860:	b29b      	uxth	r3, r3
 8004862:	687a      	ldr	r2, [r7, #4]
 8004864:	4619      	mov	r1, r3
 8004866:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004868:	2b00      	cmp	r3, #0
 800486a:	d10f      	bne.n	800488c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	68da      	ldr	r2, [r3, #12]
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800487a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	68da      	ldr	r2, [r3, #12]
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800488a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800488c:	2300      	movs	r3, #0
 800488e:	e000      	b.n	8004892 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004890:	2302      	movs	r3, #2
  }
}
 8004892:	4618      	mov	r0, r3
 8004894:	3714      	adds	r7, #20
 8004896:	46bd      	mov	sp, r7
 8004898:	bc80      	pop	{r7}
 800489a:	4770      	bx	lr

0800489c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	b082      	sub	sp, #8
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	68da      	ldr	r2, [r3, #12]
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80048b2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2220      	movs	r2, #32
 80048b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80048bc:	6878      	ldr	r0, [r7, #4]
 80048be:	f7ff fcf3 	bl	80042a8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80048c2:	2300      	movs	r3, #0
}
 80048c4:	4618      	mov	r0, r3
 80048c6:	3708      	adds	r7, #8
 80048c8:	46bd      	mov	sp, r7
 80048ca:	bd80      	pop	{r7, pc}

080048cc <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b08c      	sub	sp, #48	@ 0x30
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80048da:	b2db      	uxtb	r3, r3
 80048dc:	2b22      	cmp	r3, #34	@ 0x22
 80048de:	f040 80ae 	bne.w	8004a3e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	689b      	ldr	r3, [r3, #8]
 80048e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80048ea:	d117      	bne.n	800491c <UART_Receive_IT+0x50>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	691b      	ldr	r3, [r3, #16]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d113      	bne.n	800491c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80048f4:	2300      	movs	r3, #0
 80048f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048fc:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	b29b      	uxth	r3, r3
 8004906:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800490a:	b29a      	uxth	r2, r3
 800490c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800490e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004914:	1c9a      	adds	r2, r3, #2
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	629a      	str	r2, [r3, #40]	@ 0x28
 800491a:	e026      	b.n	800496a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004920:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004922:	2300      	movs	r3, #0
 8004924:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	689b      	ldr	r3, [r3, #8]
 800492a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800492e:	d007      	beq.n	8004940 <UART_Receive_IT+0x74>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	689b      	ldr	r3, [r3, #8]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d10a      	bne.n	800494e <UART_Receive_IT+0x82>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	691b      	ldr	r3, [r3, #16]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d106      	bne.n	800494e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	b2da      	uxtb	r2, r3
 8004948:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800494a:	701a      	strb	r2, [r3, #0]
 800494c:	e008      	b.n	8004960 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	685b      	ldr	r3, [r3, #4]
 8004954:	b2db      	uxtb	r3, r3
 8004956:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800495a:	b2da      	uxtb	r2, r3
 800495c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800495e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004964:	1c5a      	adds	r2, r3, #1
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800496e:	b29b      	uxth	r3, r3
 8004970:	3b01      	subs	r3, #1
 8004972:	b29b      	uxth	r3, r3
 8004974:	687a      	ldr	r2, [r7, #4]
 8004976:	4619      	mov	r1, r3
 8004978:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800497a:	2b00      	cmp	r3, #0
 800497c:	d15d      	bne.n	8004a3a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	68da      	ldr	r2, [r3, #12]
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f022 0220 	bic.w	r2, r2, #32
 800498c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	68da      	ldr	r2, [r3, #12]
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800499c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	695a      	ldr	r2, [r3, #20]
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f022 0201 	bic.w	r2, r2, #1
 80049ac:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2220      	movs	r2, #32
 80049b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2200      	movs	r2, #0
 80049ba:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049c0:	2b01      	cmp	r3, #1
 80049c2:	d135      	bne.n	8004a30 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2200      	movs	r2, #0
 80049c8:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	330c      	adds	r3, #12
 80049d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049d2:	697b      	ldr	r3, [r7, #20]
 80049d4:	e853 3f00 	ldrex	r3, [r3]
 80049d8:	613b      	str	r3, [r7, #16]
   return(result);
 80049da:	693b      	ldr	r3, [r7, #16]
 80049dc:	f023 0310 	bic.w	r3, r3, #16
 80049e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	330c      	adds	r3, #12
 80049e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80049ea:	623a      	str	r2, [r7, #32]
 80049ec:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049ee:	69f9      	ldr	r1, [r7, #28]
 80049f0:	6a3a      	ldr	r2, [r7, #32]
 80049f2:	e841 2300 	strex	r3, r2, [r1]
 80049f6:	61bb      	str	r3, [r7, #24]
   return(result);
 80049f8:	69bb      	ldr	r3, [r7, #24]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d1e5      	bne.n	80049ca <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f003 0310 	and.w	r3, r3, #16
 8004a08:	2b10      	cmp	r3, #16
 8004a0a:	d10a      	bne.n	8004a22 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	60fb      	str	r3, [r7, #12]
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	60fb      	str	r3, [r7, #12]
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	685b      	ldr	r3, [r3, #4]
 8004a1e:	60fb      	str	r3, [r7, #12]
 8004a20:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004a26:	4619      	mov	r1, r3
 8004a28:	6878      	ldr	r0, [r7, #4]
 8004a2a:	f7ff fc4f 	bl	80042cc <HAL_UARTEx_RxEventCallback>
 8004a2e:	e002      	b.n	8004a36 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004a30:	6878      	ldr	r0, [r7, #4]
 8004a32:	f7fc f869 	bl	8000b08 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004a36:	2300      	movs	r3, #0
 8004a38:	e002      	b.n	8004a40 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	e000      	b.n	8004a40 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004a3e:	2302      	movs	r3, #2
  }
}
 8004a40:	4618      	mov	r0, r3
 8004a42:	3730      	adds	r7, #48	@ 0x30
 8004a44:	46bd      	mov	sp, r7
 8004a46:	bd80      	pop	{r7, pc}

08004a48 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b084      	sub	sp, #16
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	691b      	ldr	r3, [r3, #16]
 8004a56:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	68da      	ldr	r2, [r3, #12]
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	430a      	orrs	r2, r1
 8004a64:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	689a      	ldr	r2, [r3, #8]
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	691b      	ldr	r3, [r3, #16]
 8004a6e:	431a      	orrs	r2, r3
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	695b      	ldr	r3, [r3, #20]
 8004a74:	4313      	orrs	r3, r2
 8004a76:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	68db      	ldr	r3, [r3, #12]
 8004a7e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8004a82:	f023 030c 	bic.w	r3, r3, #12
 8004a86:	687a      	ldr	r2, [r7, #4]
 8004a88:	6812      	ldr	r2, [r2, #0]
 8004a8a:	68b9      	ldr	r1, [r7, #8]
 8004a8c:	430b      	orrs	r3, r1
 8004a8e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	695b      	ldr	r3, [r3, #20]
 8004a96:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	699a      	ldr	r2, [r3, #24]
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	430a      	orrs	r2, r1
 8004aa4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	4a2c      	ldr	r2, [pc, #176]	@ (8004b5c <UART_SetConfig+0x114>)
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d103      	bne.n	8004ab8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004ab0:	f7fe f8ec 	bl	8002c8c <HAL_RCC_GetPCLK2Freq>
 8004ab4:	60f8      	str	r0, [r7, #12]
 8004ab6:	e002      	b.n	8004abe <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004ab8:	f7fe f8d4 	bl	8002c64 <HAL_RCC_GetPCLK1Freq>
 8004abc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004abe:	68fa      	ldr	r2, [r7, #12]
 8004ac0:	4613      	mov	r3, r2
 8004ac2:	009b      	lsls	r3, r3, #2
 8004ac4:	4413      	add	r3, r2
 8004ac6:	009a      	lsls	r2, r3, #2
 8004ac8:	441a      	add	r2, r3
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	685b      	ldr	r3, [r3, #4]
 8004ace:	009b      	lsls	r3, r3, #2
 8004ad0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ad4:	4a22      	ldr	r2, [pc, #136]	@ (8004b60 <UART_SetConfig+0x118>)
 8004ad6:	fba2 2303 	umull	r2, r3, r2, r3
 8004ada:	095b      	lsrs	r3, r3, #5
 8004adc:	0119      	lsls	r1, r3, #4
 8004ade:	68fa      	ldr	r2, [r7, #12]
 8004ae0:	4613      	mov	r3, r2
 8004ae2:	009b      	lsls	r3, r3, #2
 8004ae4:	4413      	add	r3, r2
 8004ae6:	009a      	lsls	r2, r3, #2
 8004ae8:	441a      	add	r2, r3
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	685b      	ldr	r3, [r3, #4]
 8004aee:	009b      	lsls	r3, r3, #2
 8004af0:	fbb2 f2f3 	udiv	r2, r2, r3
 8004af4:	4b1a      	ldr	r3, [pc, #104]	@ (8004b60 <UART_SetConfig+0x118>)
 8004af6:	fba3 0302 	umull	r0, r3, r3, r2
 8004afa:	095b      	lsrs	r3, r3, #5
 8004afc:	2064      	movs	r0, #100	@ 0x64
 8004afe:	fb00 f303 	mul.w	r3, r0, r3
 8004b02:	1ad3      	subs	r3, r2, r3
 8004b04:	011b      	lsls	r3, r3, #4
 8004b06:	3332      	adds	r3, #50	@ 0x32
 8004b08:	4a15      	ldr	r2, [pc, #84]	@ (8004b60 <UART_SetConfig+0x118>)
 8004b0a:	fba2 2303 	umull	r2, r3, r2, r3
 8004b0e:	095b      	lsrs	r3, r3, #5
 8004b10:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004b14:	4419      	add	r1, r3
 8004b16:	68fa      	ldr	r2, [r7, #12]
 8004b18:	4613      	mov	r3, r2
 8004b1a:	009b      	lsls	r3, r3, #2
 8004b1c:	4413      	add	r3, r2
 8004b1e:	009a      	lsls	r2, r3, #2
 8004b20:	441a      	add	r2, r3
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	685b      	ldr	r3, [r3, #4]
 8004b26:	009b      	lsls	r3, r3, #2
 8004b28:	fbb2 f2f3 	udiv	r2, r2, r3
 8004b2c:	4b0c      	ldr	r3, [pc, #48]	@ (8004b60 <UART_SetConfig+0x118>)
 8004b2e:	fba3 0302 	umull	r0, r3, r3, r2
 8004b32:	095b      	lsrs	r3, r3, #5
 8004b34:	2064      	movs	r0, #100	@ 0x64
 8004b36:	fb00 f303 	mul.w	r3, r0, r3
 8004b3a:	1ad3      	subs	r3, r2, r3
 8004b3c:	011b      	lsls	r3, r3, #4
 8004b3e:	3332      	adds	r3, #50	@ 0x32
 8004b40:	4a07      	ldr	r2, [pc, #28]	@ (8004b60 <UART_SetConfig+0x118>)
 8004b42:	fba2 2303 	umull	r2, r3, r2, r3
 8004b46:	095b      	lsrs	r3, r3, #5
 8004b48:	f003 020f 	and.w	r2, r3, #15
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	440a      	add	r2, r1
 8004b52:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004b54:	bf00      	nop
 8004b56:	3710      	adds	r7, #16
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	bd80      	pop	{r7, pc}
 8004b5c:	40013800 	.word	0x40013800
 8004b60:	51eb851f 	.word	0x51eb851f

08004b64 <std>:
 8004b64:	2300      	movs	r3, #0
 8004b66:	b510      	push	{r4, lr}
 8004b68:	4604      	mov	r4, r0
 8004b6a:	e9c0 3300 	strd	r3, r3, [r0]
 8004b6e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004b72:	6083      	str	r3, [r0, #8]
 8004b74:	8181      	strh	r1, [r0, #12]
 8004b76:	6643      	str	r3, [r0, #100]	@ 0x64
 8004b78:	81c2      	strh	r2, [r0, #14]
 8004b7a:	6183      	str	r3, [r0, #24]
 8004b7c:	4619      	mov	r1, r3
 8004b7e:	2208      	movs	r2, #8
 8004b80:	305c      	adds	r0, #92	@ 0x5c
 8004b82:	f000 fa01 	bl	8004f88 <memset>
 8004b86:	4b0d      	ldr	r3, [pc, #52]	@ (8004bbc <std+0x58>)
 8004b88:	6224      	str	r4, [r4, #32]
 8004b8a:	6263      	str	r3, [r4, #36]	@ 0x24
 8004b8c:	4b0c      	ldr	r3, [pc, #48]	@ (8004bc0 <std+0x5c>)
 8004b8e:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004b90:	4b0c      	ldr	r3, [pc, #48]	@ (8004bc4 <std+0x60>)
 8004b92:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004b94:	4b0c      	ldr	r3, [pc, #48]	@ (8004bc8 <std+0x64>)
 8004b96:	6323      	str	r3, [r4, #48]	@ 0x30
 8004b98:	4b0c      	ldr	r3, [pc, #48]	@ (8004bcc <std+0x68>)
 8004b9a:	429c      	cmp	r4, r3
 8004b9c:	d006      	beq.n	8004bac <std+0x48>
 8004b9e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004ba2:	4294      	cmp	r4, r2
 8004ba4:	d002      	beq.n	8004bac <std+0x48>
 8004ba6:	33d0      	adds	r3, #208	@ 0xd0
 8004ba8:	429c      	cmp	r4, r3
 8004baa:	d105      	bne.n	8004bb8 <std+0x54>
 8004bac:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004bb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004bb4:	f000 ba60 	b.w	8005078 <__retarget_lock_init_recursive>
 8004bb8:	bd10      	pop	{r4, pc}
 8004bba:	bf00      	nop
 8004bbc:	08004dd9 	.word	0x08004dd9
 8004bc0:	08004dfb 	.word	0x08004dfb
 8004bc4:	08004e33 	.word	0x08004e33
 8004bc8:	08004e57 	.word	0x08004e57
 8004bcc:	200002c8 	.word	0x200002c8

08004bd0 <stdio_exit_handler>:
 8004bd0:	4a02      	ldr	r2, [pc, #8]	@ (8004bdc <stdio_exit_handler+0xc>)
 8004bd2:	4903      	ldr	r1, [pc, #12]	@ (8004be0 <stdio_exit_handler+0x10>)
 8004bd4:	4803      	ldr	r0, [pc, #12]	@ (8004be4 <stdio_exit_handler+0x14>)
 8004bd6:	f000 b869 	b.w	8004cac <_fwalk_sglue>
 8004bda:	bf00      	nop
 8004bdc:	2000004c 	.word	0x2000004c
 8004be0:	08005911 	.word	0x08005911
 8004be4:	2000005c 	.word	0x2000005c

08004be8 <cleanup_stdio>:
 8004be8:	6841      	ldr	r1, [r0, #4]
 8004bea:	4b0c      	ldr	r3, [pc, #48]	@ (8004c1c <cleanup_stdio+0x34>)
 8004bec:	b510      	push	{r4, lr}
 8004bee:	4299      	cmp	r1, r3
 8004bf0:	4604      	mov	r4, r0
 8004bf2:	d001      	beq.n	8004bf8 <cleanup_stdio+0x10>
 8004bf4:	f000 fe8c 	bl	8005910 <_fflush_r>
 8004bf8:	68a1      	ldr	r1, [r4, #8]
 8004bfa:	4b09      	ldr	r3, [pc, #36]	@ (8004c20 <cleanup_stdio+0x38>)
 8004bfc:	4299      	cmp	r1, r3
 8004bfe:	d002      	beq.n	8004c06 <cleanup_stdio+0x1e>
 8004c00:	4620      	mov	r0, r4
 8004c02:	f000 fe85 	bl	8005910 <_fflush_r>
 8004c06:	68e1      	ldr	r1, [r4, #12]
 8004c08:	4b06      	ldr	r3, [pc, #24]	@ (8004c24 <cleanup_stdio+0x3c>)
 8004c0a:	4299      	cmp	r1, r3
 8004c0c:	d004      	beq.n	8004c18 <cleanup_stdio+0x30>
 8004c0e:	4620      	mov	r0, r4
 8004c10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004c14:	f000 be7c 	b.w	8005910 <_fflush_r>
 8004c18:	bd10      	pop	{r4, pc}
 8004c1a:	bf00      	nop
 8004c1c:	200002c8 	.word	0x200002c8
 8004c20:	20000330 	.word	0x20000330
 8004c24:	20000398 	.word	0x20000398

08004c28 <global_stdio_init.part.0>:
 8004c28:	b510      	push	{r4, lr}
 8004c2a:	4b0b      	ldr	r3, [pc, #44]	@ (8004c58 <global_stdio_init.part.0+0x30>)
 8004c2c:	4c0b      	ldr	r4, [pc, #44]	@ (8004c5c <global_stdio_init.part.0+0x34>)
 8004c2e:	4a0c      	ldr	r2, [pc, #48]	@ (8004c60 <global_stdio_init.part.0+0x38>)
 8004c30:	4620      	mov	r0, r4
 8004c32:	601a      	str	r2, [r3, #0]
 8004c34:	2104      	movs	r1, #4
 8004c36:	2200      	movs	r2, #0
 8004c38:	f7ff ff94 	bl	8004b64 <std>
 8004c3c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004c40:	2201      	movs	r2, #1
 8004c42:	2109      	movs	r1, #9
 8004c44:	f7ff ff8e 	bl	8004b64 <std>
 8004c48:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004c4c:	2202      	movs	r2, #2
 8004c4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004c52:	2112      	movs	r1, #18
 8004c54:	f7ff bf86 	b.w	8004b64 <std>
 8004c58:	20000400 	.word	0x20000400
 8004c5c:	200002c8 	.word	0x200002c8
 8004c60:	08004bd1 	.word	0x08004bd1

08004c64 <__sfp_lock_acquire>:
 8004c64:	4801      	ldr	r0, [pc, #4]	@ (8004c6c <__sfp_lock_acquire+0x8>)
 8004c66:	f000 ba08 	b.w	800507a <__retarget_lock_acquire_recursive>
 8004c6a:	bf00      	nop
 8004c6c:	20000409 	.word	0x20000409

08004c70 <__sfp_lock_release>:
 8004c70:	4801      	ldr	r0, [pc, #4]	@ (8004c78 <__sfp_lock_release+0x8>)
 8004c72:	f000 ba03 	b.w	800507c <__retarget_lock_release_recursive>
 8004c76:	bf00      	nop
 8004c78:	20000409 	.word	0x20000409

08004c7c <__sinit>:
 8004c7c:	b510      	push	{r4, lr}
 8004c7e:	4604      	mov	r4, r0
 8004c80:	f7ff fff0 	bl	8004c64 <__sfp_lock_acquire>
 8004c84:	6a23      	ldr	r3, [r4, #32]
 8004c86:	b11b      	cbz	r3, 8004c90 <__sinit+0x14>
 8004c88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004c8c:	f7ff bff0 	b.w	8004c70 <__sfp_lock_release>
 8004c90:	4b04      	ldr	r3, [pc, #16]	@ (8004ca4 <__sinit+0x28>)
 8004c92:	6223      	str	r3, [r4, #32]
 8004c94:	4b04      	ldr	r3, [pc, #16]	@ (8004ca8 <__sinit+0x2c>)
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d1f5      	bne.n	8004c88 <__sinit+0xc>
 8004c9c:	f7ff ffc4 	bl	8004c28 <global_stdio_init.part.0>
 8004ca0:	e7f2      	b.n	8004c88 <__sinit+0xc>
 8004ca2:	bf00      	nop
 8004ca4:	08004be9 	.word	0x08004be9
 8004ca8:	20000400 	.word	0x20000400

08004cac <_fwalk_sglue>:
 8004cac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004cb0:	4607      	mov	r7, r0
 8004cb2:	4688      	mov	r8, r1
 8004cb4:	4614      	mov	r4, r2
 8004cb6:	2600      	movs	r6, #0
 8004cb8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004cbc:	f1b9 0901 	subs.w	r9, r9, #1
 8004cc0:	d505      	bpl.n	8004cce <_fwalk_sglue+0x22>
 8004cc2:	6824      	ldr	r4, [r4, #0]
 8004cc4:	2c00      	cmp	r4, #0
 8004cc6:	d1f7      	bne.n	8004cb8 <_fwalk_sglue+0xc>
 8004cc8:	4630      	mov	r0, r6
 8004cca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004cce:	89ab      	ldrh	r3, [r5, #12]
 8004cd0:	2b01      	cmp	r3, #1
 8004cd2:	d907      	bls.n	8004ce4 <_fwalk_sglue+0x38>
 8004cd4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004cd8:	3301      	adds	r3, #1
 8004cda:	d003      	beq.n	8004ce4 <_fwalk_sglue+0x38>
 8004cdc:	4629      	mov	r1, r5
 8004cde:	4638      	mov	r0, r7
 8004ce0:	47c0      	blx	r8
 8004ce2:	4306      	orrs	r6, r0
 8004ce4:	3568      	adds	r5, #104	@ 0x68
 8004ce6:	e7e9      	b.n	8004cbc <_fwalk_sglue+0x10>

08004ce8 <iprintf>:
 8004ce8:	b40f      	push	{r0, r1, r2, r3}
 8004cea:	b507      	push	{r0, r1, r2, lr}
 8004cec:	4906      	ldr	r1, [pc, #24]	@ (8004d08 <iprintf+0x20>)
 8004cee:	ab04      	add	r3, sp, #16
 8004cf0:	6808      	ldr	r0, [r1, #0]
 8004cf2:	f853 2b04 	ldr.w	r2, [r3], #4
 8004cf6:	6881      	ldr	r1, [r0, #8]
 8004cf8:	9301      	str	r3, [sp, #4]
 8004cfa:	f000 fadf 	bl	80052bc <_vfiprintf_r>
 8004cfe:	b003      	add	sp, #12
 8004d00:	f85d eb04 	ldr.w	lr, [sp], #4
 8004d04:	b004      	add	sp, #16
 8004d06:	4770      	bx	lr
 8004d08:	20000058 	.word	0x20000058

08004d0c <putchar>:
 8004d0c:	4b02      	ldr	r3, [pc, #8]	@ (8004d18 <putchar+0xc>)
 8004d0e:	4601      	mov	r1, r0
 8004d10:	6818      	ldr	r0, [r3, #0]
 8004d12:	6882      	ldr	r2, [r0, #8]
 8004d14:	f000 be85 	b.w	8005a22 <_putc_r>
 8004d18:	20000058 	.word	0x20000058

08004d1c <_puts_r>:
 8004d1c:	6a03      	ldr	r3, [r0, #32]
 8004d1e:	b570      	push	{r4, r5, r6, lr}
 8004d20:	4605      	mov	r5, r0
 8004d22:	460e      	mov	r6, r1
 8004d24:	6884      	ldr	r4, [r0, #8]
 8004d26:	b90b      	cbnz	r3, 8004d2c <_puts_r+0x10>
 8004d28:	f7ff ffa8 	bl	8004c7c <__sinit>
 8004d2c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004d2e:	07db      	lsls	r3, r3, #31
 8004d30:	d405      	bmi.n	8004d3e <_puts_r+0x22>
 8004d32:	89a3      	ldrh	r3, [r4, #12]
 8004d34:	0598      	lsls	r0, r3, #22
 8004d36:	d402      	bmi.n	8004d3e <_puts_r+0x22>
 8004d38:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004d3a:	f000 f99e 	bl	800507a <__retarget_lock_acquire_recursive>
 8004d3e:	89a3      	ldrh	r3, [r4, #12]
 8004d40:	0719      	lsls	r1, r3, #28
 8004d42:	d502      	bpl.n	8004d4a <_puts_r+0x2e>
 8004d44:	6923      	ldr	r3, [r4, #16]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d135      	bne.n	8004db6 <_puts_r+0x9a>
 8004d4a:	4621      	mov	r1, r4
 8004d4c:	4628      	mov	r0, r5
 8004d4e:	f000 f8c5 	bl	8004edc <__swsetup_r>
 8004d52:	b380      	cbz	r0, 8004db6 <_puts_r+0x9a>
 8004d54:	f04f 35ff 	mov.w	r5, #4294967295
 8004d58:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004d5a:	07da      	lsls	r2, r3, #31
 8004d5c:	d405      	bmi.n	8004d6a <_puts_r+0x4e>
 8004d5e:	89a3      	ldrh	r3, [r4, #12]
 8004d60:	059b      	lsls	r3, r3, #22
 8004d62:	d402      	bmi.n	8004d6a <_puts_r+0x4e>
 8004d64:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004d66:	f000 f989 	bl	800507c <__retarget_lock_release_recursive>
 8004d6a:	4628      	mov	r0, r5
 8004d6c:	bd70      	pop	{r4, r5, r6, pc}
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	da04      	bge.n	8004d7c <_puts_r+0x60>
 8004d72:	69a2      	ldr	r2, [r4, #24]
 8004d74:	429a      	cmp	r2, r3
 8004d76:	dc17      	bgt.n	8004da8 <_puts_r+0x8c>
 8004d78:	290a      	cmp	r1, #10
 8004d7a:	d015      	beq.n	8004da8 <_puts_r+0x8c>
 8004d7c:	6823      	ldr	r3, [r4, #0]
 8004d7e:	1c5a      	adds	r2, r3, #1
 8004d80:	6022      	str	r2, [r4, #0]
 8004d82:	7019      	strb	r1, [r3, #0]
 8004d84:	68a3      	ldr	r3, [r4, #8]
 8004d86:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004d8a:	3b01      	subs	r3, #1
 8004d8c:	60a3      	str	r3, [r4, #8]
 8004d8e:	2900      	cmp	r1, #0
 8004d90:	d1ed      	bne.n	8004d6e <_puts_r+0x52>
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	da11      	bge.n	8004dba <_puts_r+0x9e>
 8004d96:	4622      	mov	r2, r4
 8004d98:	210a      	movs	r1, #10
 8004d9a:	4628      	mov	r0, r5
 8004d9c:	f000 f85f 	bl	8004e5e <__swbuf_r>
 8004da0:	3001      	adds	r0, #1
 8004da2:	d0d7      	beq.n	8004d54 <_puts_r+0x38>
 8004da4:	250a      	movs	r5, #10
 8004da6:	e7d7      	b.n	8004d58 <_puts_r+0x3c>
 8004da8:	4622      	mov	r2, r4
 8004daa:	4628      	mov	r0, r5
 8004dac:	f000 f857 	bl	8004e5e <__swbuf_r>
 8004db0:	3001      	adds	r0, #1
 8004db2:	d1e7      	bne.n	8004d84 <_puts_r+0x68>
 8004db4:	e7ce      	b.n	8004d54 <_puts_r+0x38>
 8004db6:	3e01      	subs	r6, #1
 8004db8:	e7e4      	b.n	8004d84 <_puts_r+0x68>
 8004dba:	6823      	ldr	r3, [r4, #0]
 8004dbc:	1c5a      	adds	r2, r3, #1
 8004dbe:	6022      	str	r2, [r4, #0]
 8004dc0:	220a      	movs	r2, #10
 8004dc2:	701a      	strb	r2, [r3, #0]
 8004dc4:	e7ee      	b.n	8004da4 <_puts_r+0x88>
	...

08004dc8 <puts>:
 8004dc8:	4b02      	ldr	r3, [pc, #8]	@ (8004dd4 <puts+0xc>)
 8004dca:	4601      	mov	r1, r0
 8004dcc:	6818      	ldr	r0, [r3, #0]
 8004dce:	f7ff bfa5 	b.w	8004d1c <_puts_r>
 8004dd2:	bf00      	nop
 8004dd4:	20000058 	.word	0x20000058

08004dd8 <__sread>:
 8004dd8:	b510      	push	{r4, lr}
 8004dda:	460c      	mov	r4, r1
 8004ddc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004de0:	f000 f8fc 	bl	8004fdc <_read_r>
 8004de4:	2800      	cmp	r0, #0
 8004de6:	bfab      	itete	ge
 8004de8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004dea:	89a3      	ldrhlt	r3, [r4, #12]
 8004dec:	181b      	addge	r3, r3, r0
 8004dee:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004df2:	bfac      	ite	ge
 8004df4:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004df6:	81a3      	strhlt	r3, [r4, #12]
 8004df8:	bd10      	pop	{r4, pc}

08004dfa <__swrite>:
 8004dfa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004dfe:	461f      	mov	r7, r3
 8004e00:	898b      	ldrh	r3, [r1, #12]
 8004e02:	4605      	mov	r5, r0
 8004e04:	05db      	lsls	r3, r3, #23
 8004e06:	460c      	mov	r4, r1
 8004e08:	4616      	mov	r6, r2
 8004e0a:	d505      	bpl.n	8004e18 <__swrite+0x1e>
 8004e0c:	2302      	movs	r3, #2
 8004e0e:	2200      	movs	r2, #0
 8004e10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e14:	f000 f8d0 	bl	8004fb8 <_lseek_r>
 8004e18:	89a3      	ldrh	r3, [r4, #12]
 8004e1a:	4632      	mov	r2, r6
 8004e1c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004e20:	81a3      	strh	r3, [r4, #12]
 8004e22:	4628      	mov	r0, r5
 8004e24:	463b      	mov	r3, r7
 8004e26:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004e2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004e2e:	f000 b8e7 	b.w	8005000 <_write_r>

08004e32 <__sseek>:
 8004e32:	b510      	push	{r4, lr}
 8004e34:	460c      	mov	r4, r1
 8004e36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e3a:	f000 f8bd 	bl	8004fb8 <_lseek_r>
 8004e3e:	1c43      	adds	r3, r0, #1
 8004e40:	89a3      	ldrh	r3, [r4, #12]
 8004e42:	bf15      	itete	ne
 8004e44:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004e46:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004e4a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004e4e:	81a3      	strheq	r3, [r4, #12]
 8004e50:	bf18      	it	ne
 8004e52:	81a3      	strhne	r3, [r4, #12]
 8004e54:	bd10      	pop	{r4, pc}

08004e56 <__sclose>:
 8004e56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e5a:	f000 b89d 	b.w	8004f98 <_close_r>

08004e5e <__swbuf_r>:
 8004e5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e60:	460e      	mov	r6, r1
 8004e62:	4614      	mov	r4, r2
 8004e64:	4605      	mov	r5, r0
 8004e66:	b118      	cbz	r0, 8004e70 <__swbuf_r+0x12>
 8004e68:	6a03      	ldr	r3, [r0, #32]
 8004e6a:	b90b      	cbnz	r3, 8004e70 <__swbuf_r+0x12>
 8004e6c:	f7ff ff06 	bl	8004c7c <__sinit>
 8004e70:	69a3      	ldr	r3, [r4, #24]
 8004e72:	60a3      	str	r3, [r4, #8]
 8004e74:	89a3      	ldrh	r3, [r4, #12]
 8004e76:	071a      	lsls	r2, r3, #28
 8004e78:	d501      	bpl.n	8004e7e <__swbuf_r+0x20>
 8004e7a:	6923      	ldr	r3, [r4, #16]
 8004e7c:	b943      	cbnz	r3, 8004e90 <__swbuf_r+0x32>
 8004e7e:	4621      	mov	r1, r4
 8004e80:	4628      	mov	r0, r5
 8004e82:	f000 f82b 	bl	8004edc <__swsetup_r>
 8004e86:	b118      	cbz	r0, 8004e90 <__swbuf_r+0x32>
 8004e88:	f04f 37ff 	mov.w	r7, #4294967295
 8004e8c:	4638      	mov	r0, r7
 8004e8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004e90:	6823      	ldr	r3, [r4, #0]
 8004e92:	6922      	ldr	r2, [r4, #16]
 8004e94:	b2f6      	uxtb	r6, r6
 8004e96:	1a98      	subs	r0, r3, r2
 8004e98:	6963      	ldr	r3, [r4, #20]
 8004e9a:	4637      	mov	r7, r6
 8004e9c:	4283      	cmp	r3, r0
 8004e9e:	dc05      	bgt.n	8004eac <__swbuf_r+0x4e>
 8004ea0:	4621      	mov	r1, r4
 8004ea2:	4628      	mov	r0, r5
 8004ea4:	f000 fd34 	bl	8005910 <_fflush_r>
 8004ea8:	2800      	cmp	r0, #0
 8004eaa:	d1ed      	bne.n	8004e88 <__swbuf_r+0x2a>
 8004eac:	68a3      	ldr	r3, [r4, #8]
 8004eae:	3b01      	subs	r3, #1
 8004eb0:	60a3      	str	r3, [r4, #8]
 8004eb2:	6823      	ldr	r3, [r4, #0]
 8004eb4:	1c5a      	adds	r2, r3, #1
 8004eb6:	6022      	str	r2, [r4, #0]
 8004eb8:	701e      	strb	r6, [r3, #0]
 8004eba:	6962      	ldr	r2, [r4, #20]
 8004ebc:	1c43      	adds	r3, r0, #1
 8004ebe:	429a      	cmp	r2, r3
 8004ec0:	d004      	beq.n	8004ecc <__swbuf_r+0x6e>
 8004ec2:	89a3      	ldrh	r3, [r4, #12]
 8004ec4:	07db      	lsls	r3, r3, #31
 8004ec6:	d5e1      	bpl.n	8004e8c <__swbuf_r+0x2e>
 8004ec8:	2e0a      	cmp	r6, #10
 8004eca:	d1df      	bne.n	8004e8c <__swbuf_r+0x2e>
 8004ecc:	4621      	mov	r1, r4
 8004ece:	4628      	mov	r0, r5
 8004ed0:	f000 fd1e 	bl	8005910 <_fflush_r>
 8004ed4:	2800      	cmp	r0, #0
 8004ed6:	d0d9      	beq.n	8004e8c <__swbuf_r+0x2e>
 8004ed8:	e7d6      	b.n	8004e88 <__swbuf_r+0x2a>
	...

08004edc <__swsetup_r>:
 8004edc:	b538      	push	{r3, r4, r5, lr}
 8004ede:	4b29      	ldr	r3, [pc, #164]	@ (8004f84 <__swsetup_r+0xa8>)
 8004ee0:	4605      	mov	r5, r0
 8004ee2:	6818      	ldr	r0, [r3, #0]
 8004ee4:	460c      	mov	r4, r1
 8004ee6:	b118      	cbz	r0, 8004ef0 <__swsetup_r+0x14>
 8004ee8:	6a03      	ldr	r3, [r0, #32]
 8004eea:	b90b      	cbnz	r3, 8004ef0 <__swsetup_r+0x14>
 8004eec:	f7ff fec6 	bl	8004c7c <__sinit>
 8004ef0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004ef4:	0719      	lsls	r1, r3, #28
 8004ef6:	d422      	bmi.n	8004f3e <__swsetup_r+0x62>
 8004ef8:	06da      	lsls	r2, r3, #27
 8004efa:	d407      	bmi.n	8004f0c <__swsetup_r+0x30>
 8004efc:	2209      	movs	r2, #9
 8004efe:	602a      	str	r2, [r5, #0]
 8004f00:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004f04:	f04f 30ff 	mov.w	r0, #4294967295
 8004f08:	81a3      	strh	r3, [r4, #12]
 8004f0a:	e033      	b.n	8004f74 <__swsetup_r+0x98>
 8004f0c:	0758      	lsls	r0, r3, #29
 8004f0e:	d512      	bpl.n	8004f36 <__swsetup_r+0x5a>
 8004f10:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004f12:	b141      	cbz	r1, 8004f26 <__swsetup_r+0x4a>
 8004f14:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004f18:	4299      	cmp	r1, r3
 8004f1a:	d002      	beq.n	8004f22 <__swsetup_r+0x46>
 8004f1c:	4628      	mov	r0, r5
 8004f1e:	f000 f8af 	bl	8005080 <_free_r>
 8004f22:	2300      	movs	r3, #0
 8004f24:	6363      	str	r3, [r4, #52]	@ 0x34
 8004f26:	89a3      	ldrh	r3, [r4, #12]
 8004f28:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004f2c:	81a3      	strh	r3, [r4, #12]
 8004f2e:	2300      	movs	r3, #0
 8004f30:	6063      	str	r3, [r4, #4]
 8004f32:	6923      	ldr	r3, [r4, #16]
 8004f34:	6023      	str	r3, [r4, #0]
 8004f36:	89a3      	ldrh	r3, [r4, #12]
 8004f38:	f043 0308 	orr.w	r3, r3, #8
 8004f3c:	81a3      	strh	r3, [r4, #12]
 8004f3e:	6923      	ldr	r3, [r4, #16]
 8004f40:	b94b      	cbnz	r3, 8004f56 <__swsetup_r+0x7a>
 8004f42:	89a3      	ldrh	r3, [r4, #12]
 8004f44:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004f48:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004f4c:	d003      	beq.n	8004f56 <__swsetup_r+0x7a>
 8004f4e:	4621      	mov	r1, r4
 8004f50:	4628      	mov	r0, r5
 8004f52:	f000 fd2a 	bl	80059aa <__smakebuf_r>
 8004f56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004f5a:	f013 0201 	ands.w	r2, r3, #1
 8004f5e:	d00a      	beq.n	8004f76 <__swsetup_r+0x9a>
 8004f60:	2200      	movs	r2, #0
 8004f62:	60a2      	str	r2, [r4, #8]
 8004f64:	6962      	ldr	r2, [r4, #20]
 8004f66:	4252      	negs	r2, r2
 8004f68:	61a2      	str	r2, [r4, #24]
 8004f6a:	6922      	ldr	r2, [r4, #16]
 8004f6c:	b942      	cbnz	r2, 8004f80 <__swsetup_r+0xa4>
 8004f6e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004f72:	d1c5      	bne.n	8004f00 <__swsetup_r+0x24>
 8004f74:	bd38      	pop	{r3, r4, r5, pc}
 8004f76:	0799      	lsls	r1, r3, #30
 8004f78:	bf58      	it	pl
 8004f7a:	6962      	ldrpl	r2, [r4, #20]
 8004f7c:	60a2      	str	r2, [r4, #8]
 8004f7e:	e7f4      	b.n	8004f6a <__swsetup_r+0x8e>
 8004f80:	2000      	movs	r0, #0
 8004f82:	e7f7      	b.n	8004f74 <__swsetup_r+0x98>
 8004f84:	20000058 	.word	0x20000058

08004f88 <memset>:
 8004f88:	4603      	mov	r3, r0
 8004f8a:	4402      	add	r2, r0
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d100      	bne.n	8004f92 <memset+0xa>
 8004f90:	4770      	bx	lr
 8004f92:	f803 1b01 	strb.w	r1, [r3], #1
 8004f96:	e7f9      	b.n	8004f8c <memset+0x4>

08004f98 <_close_r>:
 8004f98:	b538      	push	{r3, r4, r5, lr}
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	4d05      	ldr	r5, [pc, #20]	@ (8004fb4 <_close_r+0x1c>)
 8004f9e:	4604      	mov	r4, r0
 8004fa0:	4608      	mov	r0, r1
 8004fa2:	602b      	str	r3, [r5, #0]
 8004fa4:	f7fb fea5 	bl	8000cf2 <_close>
 8004fa8:	1c43      	adds	r3, r0, #1
 8004faa:	d102      	bne.n	8004fb2 <_close_r+0x1a>
 8004fac:	682b      	ldr	r3, [r5, #0]
 8004fae:	b103      	cbz	r3, 8004fb2 <_close_r+0x1a>
 8004fb0:	6023      	str	r3, [r4, #0]
 8004fb2:	bd38      	pop	{r3, r4, r5, pc}
 8004fb4:	20000404 	.word	0x20000404

08004fb8 <_lseek_r>:
 8004fb8:	b538      	push	{r3, r4, r5, lr}
 8004fba:	4604      	mov	r4, r0
 8004fbc:	4608      	mov	r0, r1
 8004fbe:	4611      	mov	r1, r2
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	4d05      	ldr	r5, [pc, #20]	@ (8004fd8 <_lseek_r+0x20>)
 8004fc4:	602a      	str	r2, [r5, #0]
 8004fc6:	461a      	mov	r2, r3
 8004fc8:	f7fb feb7 	bl	8000d3a <_lseek>
 8004fcc:	1c43      	adds	r3, r0, #1
 8004fce:	d102      	bne.n	8004fd6 <_lseek_r+0x1e>
 8004fd0:	682b      	ldr	r3, [r5, #0]
 8004fd2:	b103      	cbz	r3, 8004fd6 <_lseek_r+0x1e>
 8004fd4:	6023      	str	r3, [r4, #0]
 8004fd6:	bd38      	pop	{r3, r4, r5, pc}
 8004fd8:	20000404 	.word	0x20000404

08004fdc <_read_r>:
 8004fdc:	b538      	push	{r3, r4, r5, lr}
 8004fde:	4604      	mov	r4, r0
 8004fe0:	4608      	mov	r0, r1
 8004fe2:	4611      	mov	r1, r2
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	4d05      	ldr	r5, [pc, #20]	@ (8004ffc <_read_r+0x20>)
 8004fe8:	602a      	str	r2, [r5, #0]
 8004fea:	461a      	mov	r2, r3
 8004fec:	f7fb fe48 	bl	8000c80 <_read>
 8004ff0:	1c43      	adds	r3, r0, #1
 8004ff2:	d102      	bne.n	8004ffa <_read_r+0x1e>
 8004ff4:	682b      	ldr	r3, [r5, #0]
 8004ff6:	b103      	cbz	r3, 8004ffa <_read_r+0x1e>
 8004ff8:	6023      	str	r3, [r4, #0]
 8004ffa:	bd38      	pop	{r3, r4, r5, pc}
 8004ffc:	20000404 	.word	0x20000404

08005000 <_write_r>:
 8005000:	b538      	push	{r3, r4, r5, lr}
 8005002:	4604      	mov	r4, r0
 8005004:	4608      	mov	r0, r1
 8005006:	4611      	mov	r1, r2
 8005008:	2200      	movs	r2, #0
 800500a:	4d05      	ldr	r5, [pc, #20]	@ (8005020 <_write_r+0x20>)
 800500c:	602a      	str	r2, [r5, #0]
 800500e:	461a      	mov	r2, r3
 8005010:	f7fb fe53 	bl	8000cba <_write>
 8005014:	1c43      	adds	r3, r0, #1
 8005016:	d102      	bne.n	800501e <_write_r+0x1e>
 8005018:	682b      	ldr	r3, [r5, #0]
 800501a:	b103      	cbz	r3, 800501e <_write_r+0x1e>
 800501c:	6023      	str	r3, [r4, #0]
 800501e:	bd38      	pop	{r3, r4, r5, pc}
 8005020:	20000404 	.word	0x20000404

08005024 <__errno>:
 8005024:	4b01      	ldr	r3, [pc, #4]	@ (800502c <__errno+0x8>)
 8005026:	6818      	ldr	r0, [r3, #0]
 8005028:	4770      	bx	lr
 800502a:	bf00      	nop
 800502c:	20000058 	.word	0x20000058

08005030 <__libc_init_array>:
 8005030:	b570      	push	{r4, r5, r6, lr}
 8005032:	2600      	movs	r6, #0
 8005034:	4d0c      	ldr	r5, [pc, #48]	@ (8005068 <__libc_init_array+0x38>)
 8005036:	4c0d      	ldr	r4, [pc, #52]	@ (800506c <__libc_init_array+0x3c>)
 8005038:	1b64      	subs	r4, r4, r5
 800503a:	10a4      	asrs	r4, r4, #2
 800503c:	42a6      	cmp	r6, r4
 800503e:	d109      	bne.n	8005054 <__libc_init_array+0x24>
 8005040:	f000 fd64 	bl	8005b0c <_init>
 8005044:	2600      	movs	r6, #0
 8005046:	4d0a      	ldr	r5, [pc, #40]	@ (8005070 <__libc_init_array+0x40>)
 8005048:	4c0a      	ldr	r4, [pc, #40]	@ (8005074 <__libc_init_array+0x44>)
 800504a:	1b64      	subs	r4, r4, r5
 800504c:	10a4      	asrs	r4, r4, #2
 800504e:	42a6      	cmp	r6, r4
 8005050:	d105      	bne.n	800505e <__libc_init_array+0x2e>
 8005052:	bd70      	pop	{r4, r5, r6, pc}
 8005054:	f855 3b04 	ldr.w	r3, [r5], #4
 8005058:	4798      	blx	r3
 800505a:	3601      	adds	r6, #1
 800505c:	e7ee      	b.n	800503c <__libc_init_array+0xc>
 800505e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005062:	4798      	blx	r3
 8005064:	3601      	adds	r6, #1
 8005066:	e7f2      	b.n	800504e <__libc_init_array+0x1e>
 8005068:	08005c6c 	.word	0x08005c6c
 800506c:	08005c6c 	.word	0x08005c6c
 8005070:	08005c6c 	.word	0x08005c6c
 8005074:	08005c70 	.word	0x08005c70

08005078 <__retarget_lock_init_recursive>:
 8005078:	4770      	bx	lr

0800507a <__retarget_lock_acquire_recursive>:
 800507a:	4770      	bx	lr

0800507c <__retarget_lock_release_recursive>:
 800507c:	4770      	bx	lr
	...

08005080 <_free_r>:
 8005080:	b538      	push	{r3, r4, r5, lr}
 8005082:	4605      	mov	r5, r0
 8005084:	2900      	cmp	r1, #0
 8005086:	d040      	beq.n	800510a <_free_r+0x8a>
 8005088:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800508c:	1f0c      	subs	r4, r1, #4
 800508e:	2b00      	cmp	r3, #0
 8005090:	bfb8      	it	lt
 8005092:	18e4      	addlt	r4, r4, r3
 8005094:	f000 f8de 	bl	8005254 <__malloc_lock>
 8005098:	4a1c      	ldr	r2, [pc, #112]	@ (800510c <_free_r+0x8c>)
 800509a:	6813      	ldr	r3, [r2, #0]
 800509c:	b933      	cbnz	r3, 80050ac <_free_r+0x2c>
 800509e:	6063      	str	r3, [r4, #4]
 80050a0:	6014      	str	r4, [r2, #0]
 80050a2:	4628      	mov	r0, r5
 80050a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80050a8:	f000 b8da 	b.w	8005260 <__malloc_unlock>
 80050ac:	42a3      	cmp	r3, r4
 80050ae:	d908      	bls.n	80050c2 <_free_r+0x42>
 80050b0:	6820      	ldr	r0, [r4, #0]
 80050b2:	1821      	adds	r1, r4, r0
 80050b4:	428b      	cmp	r3, r1
 80050b6:	bf01      	itttt	eq
 80050b8:	6819      	ldreq	r1, [r3, #0]
 80050ba:	685b      	ldreq	r3, [r3, #4]
 80050bc:	1809      	addeq	r1, r1, r0
 80050be:	6021      	streq	r1, [r4, #0]
 80050c0:	e7ed      	b.n	800509e <_free_r+0x1e>
 80050c2:	461a      	mov	r2, r3
 80050c4:	685b      	ldr	r3, [r3, #4]
 80050c6:	b10b      	cbz	r3, 80050cc <_free_r+0x4c>
 80050c8:	42a3      	cmp	r3, r4
 80050ca:	d9fa      	bls.n	80050c2 <_free_r+0x42>
 80050cc:	6811      	ldr	r1, [r2, #0]
 80050ce:	1850      	adds	r0, r2, r1
 80050d0:	42a0      	cmp	r0, r4
 80050d2:	d10b      	bne.n	80050ec <_free_r+0x6c>
 80050d4:	6820      	ldr	r0, [r4, #0]
 80050d6:	4401      	add	r1, r0
 80050d8:	1850      	adds	r0, r2, r1
 80050da:	4283      	cmp	r3, r0
 80050dc:	6011      	str	r1, [r2, #0]
 80050de:	d1e0      	bne.n	80050a2 <_free_r+0x22>
 80050e0:	6818      	ldr	r0, [r3, #0]
 80050e2:	685b      	ldr	r3, [r3, #4]
 80050e4:	4408      	add	r0, r1
 80050e6:	6010      	str	r0, [r2, #0]
 80050e8:	6053      	str	r3, [r2, #4]
 80050ea:	e7da      	b.n	80050a2 <_free_r+0x22>
 80050ec:	d902      	bls.n	80050f4 <_free_r+0x74>
 80050ee:	230c      	movs	r3, #12
 80050f0:	602b      	str	r3, [r5, #0]
 80050f2:	e7d6      	b.n	80050a2 <_free_r+0x22>
 80050f4:	6820      	ldr	r0, [r4, #0]
 80050f6:	1821      	adds	r1, r4, r0
 80050f8:	428b      	cmp	r3, r1
 80050fa:	bf01      	itttt	eq
 80050fc:	6819      	ldreq	r1, [r3, #0]
 80050fe:	685b      	ldreq	r3, [r3, #4]
 8005100:	1809      	addeq	r1, r1, r0
 8005102:	6021      	streq	r1, [r4, #0]
 8005104:	6063      	str	r3, [r4, #4]
 8005106:	6054      	str	r4, [r2, #4]
 8005108:	e7cb      	b.n	80050a2 <_free_r+0x22>
 800510a:	bd38      	pop	{r3, r4, r5, pc}
 800510c:	20000410 	.word	0x20000410

08005110 <sbrk_aligned>:
 8005110:	b570      	push	{r4, r5, r6, lr}
 8005112:	4e0f      	ldr	r6, [pc, #60]	@ (8005150 <sbrk_aligned+0x40>)
 8005114:	460c      	mov	r4, r1
 8005116:	6831      	ldr	r1, [r6, #0]
 8005118:	4605      	mov	r5, r0
 800511a:	b911      	cbnz	r1, 8005122 <sbrk_aligned+0x12>
 800511c:	f000 fcd8 	bl	8005ad0 <_sbrk_r>
 8005120:	6030      	str	r0, [r6, #0]
 8005122:	4621      	mov	r1, r4
 8005124:	4628      	mov	r0, r5
 8005126:	f000 fcd3 	bl	8005ad0 <_sbrk_r>
 800512a:	1c43      	adds	r3, r0, #1
 800512c:	d103      	bne.n	8005136 <sbrk_aligned+0x26>
 800512e:	f04f 34ff 	mov.w	r4, #4294967295
 8005132:	4620      	mov	r0, r4
 8005134:	bd70      	pop	{r4, r5, r6, pc}
 8005136:	1cc4      	adds	r4, r0, #3
 8005138:	f024 0403 	bic.w	r4, r4, #3
 800513c:	42a0      	cmp	r0, r4
 800513e:	d0f8      	beq.n	8005132 <sbrk_aligned+0x22>
 8005140:	1a21      	subs	r1, r4, r0
 8005142:	4628      	mov	r0, r5
 8005144:	f000 fcc4 	bl	8005ad0 <_sbrk_r>
 8005148:	3001      	adds	r0, #1
 800514a:	d1f2      	bne.n	8005132 <sbrk_aligned+0x22>
 800514c:	e7ef      	b.n	800512e <sbrk_aligned+0x1e>
 800514e:	bf00      	nop
 8005150:	2000040c 	.word	0x2000040c

08005154 <_malloc_r>:
 8005154:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005158:	1ccd      	adds	r5, r1, #3
 800515a:	f025 0503 	bic.w	r5, r5, #3
 800515e:	3508      	adds	r5, #8
 8005160:	2d0c      	cmp	r5, #12
 8005162:	bf38      	it	cc
 8005164:	250c      	movcc	r5, #12
 8005166:	2d00      	cmp	r5, #0
 8005168:	4606      	mov	r6, r0
 800516a:	db01      	blt.n	8005170 <_malloc_r+0x1c>
 800516c:	42a9      	cmp	r1, r5
 800516e:	d904      	bls.n	800517a <_malloc_r+0x26>
 8005170:	230c      	movs	r3, #12
 8005172:	6033      	str	r3, [r6, #0]
 8005174:	2000      	movs	r0, #0
 8005176:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800517a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005250 <_malloc_r+0xfc>
 800517e:	f000 f869 	bl	8005254 <__malloc_lock>
 8005182:	f8d8 3000 	ldr.w	r3, [r8]
 8005186:	461c      	mov	r4, r3
 8005188:	bb44      	cbnz	r4, 80051dc <_malloc_r+0x88>
 800518a:	4629      	mov	r1, r5
 800518c:	4630      	mov	r0, r6
 800518e:	f7ff ffbf 	bl	8005110 <sbrk_aligned>
 8005192:	1c43      	adds	r3, r0, #1
 8005194:	4604      	mov	r4, r0
 8005196:	d158      	bne.n	800524a <_malloc_r+0xf6>
 8005198:	f8d8 4000 	ldr.w	r4, [r8]
 800519c:	4627      	mov	r7, r4
 800519e:	2f00      	cmp	r7, #0
 80051a0:	d143      	bne.n	800522a <_malloc_r+0xd6>
 80051a2:	2c00      	cmp	r4, #0
 80051a4:	d04b      	beq.n	800523e <_malloc_r+0xea>
 80051a6:	6823      	ldr	r3, [r4, #0]
 80051a8:	4639      	mov	r1, r7
 80051aa:	4630      	mov	r0, r6
 80051ac:	eb04 0903 	add.w	r9, r4, r3
 80051b0:	f000 fc8e 	bl	8005ad0 <_sbrk_r>
 80051b4:	4581      	cmp	r9, r0
 80051b6:	d142      	bne.n	800523e <_malloc_r+0xea>
 80051b8:	6821      	ldr	r1, [r4, #0]
 80051ba:	4630      	mov	r0, r6
 80051bc:	1a6d      	subs	r5, r5, r1
 80051be:	4629      	mov	r1, r5
 80051c0:	f7ff ffa6 	bl	8005110 <sbrk_aligned>
 80051c4:	3001      	adds	r0, #1
 80051c6:	d03a      	beq.n	800523e <_malloc_r+0xea>
 80051c8:	6823      	ldr	r3, [r4, #0]
 80051ca:	442b      	add	r3, r5
 80051cc:	6023      	str	r3, [r4, #0]
 80051ce:	f8d8 3000 	ldr.w	r3, [r8]
 80051d2:	685a      	ldr	r2, [r3, #4]
 80051d4:	bb62      	cbnz	r2, 8005230 <_malloc_r+0xdc>
 80051d6:	f8c8 7000 	str.w	r7, [r8]
 80051da:	e00f      	b.n	80051fc <_malloc_r+0xa8>
 80051dc:	6822      	ldr	r2, [r4, #0]
 80051de:	1b52      	subs	r2, r2, r5
 80051e0:	d420      	bmi.n	8005224 <_malloc_r+0xd0>
 80051e2:	2a0b      	cmp	r2, #11
 80051e4:	d917      	bls.n	8005216 <_malloc_r+0xc2>
 80051e6:	1961      	adds	r1, r4, r5
 80051e8:	42a3      	cmp	r3, r4
 80051ea:	6025      	str	r5, [r4, #0]
 80051ec:	bf18      	it	ne
 80051ee:	6059      	strne	r1, [r3, #4]
 80051f0:	6863      	ldr	r3, [r4, #4]
 80051f2:	bf08      	it	eq
 80051f4:	f8c8 1000 	streq.w	r1, [r8]
 80051f8:	5162      	str	r2, [r4, r5]
 80051fa:	604b      	str	r3, [r1, #4]
 80051fc:	4630      	mov	r0, r6
 80051fe:	f000 f82f 	bl	8005260 <__malloc_unlock>
 8005202:	f104 000b 	add.w	r0, r4, #11
 8005206:	1d23      	adds	r3, r4, #4
 8005208:	f020 0007 	bic.w	r0, r0, #7
 800520c:	1ac2      	subs	r2, r0, r3
 800520e:	bf1c      	itt	ne
 8005210:	1a1b      	subne	r3, r3, r0
 8005212:	50a3      	strne	r3, [r4, r2]
 8005214:	e7af      	b.n	8005176 <_malloc_r+0x22>
 8005216:	6862      	ldr	r2, [r4, #4]
 8005218:	42a3      	cmp	r3, r4
 800521a:	bf0c      	ite	eq
 800521c:	f8c8 2000 	streq.w	r2, [r8]
 8005220:	605a      	strne	r2, [r3, #4]
 8005222:	e7eb      	b.n	80051fc <_malloc_r+0xa8>
 8005224:	4623      	mov	r3, r4
 8005226:	6864      	ldr	r4, [r4, #4]
 8005228:	e7ae      	b.n	8005188 <_malloc_r+0x34>
 800522a:	463c      	mov	r4, r7
 800522c:	687f      	ldr	r7, [r7, #4]
 800522e:	e7b6      	b.n	800519e <_malloc_r+0x4a>
 8005230:	461a      	mov	r2, r3
 8005232:	685b      	ldr	r3, [r3, #4]
 8005234:	42a3      	cmp	r3, r4
 8005236:	d1fb      	bne.n	8005230 <_malloc_r+0xdc>
 8005238:	2300      	movs	r3, #0
 800523a:	6053      	str	r3, [r2, #4]
 800523c:	e7de      	b.n	80051fc <_malloc_r+0xa8>
 800523e:	230c      	movs	r3, #12
 8005240:	4630      	mov	r0, r6
 8005242:	6033      	str	r3, [r6, #0]
 8005244:	f000 f80c 	bl	8005260 <__malloc_unlock>
 8005248:	e794      	b.n	8005174 <_malloc_r+0x20>
 800524a:	6005      	str	r5, [r0, #0]
 800524c:	e7d6      	b.n	80051fc <_malloc_r+0xa8>
 800524e:	bf00      	nop
 8005250:	20000410 	.word	0x20000410

08005254 <__malloc_lock>:
 8005254:	4801      	ldr	r0, [pc, #4]	@ (800525c <__malloc_lock+0x8>)
 8005256:	f7ff bf10 	b.w	800507a <__retarget_lock_acquire_recursive>
 800525a:	bf00      	nop
 800525c:	20000408 	.word	0x20000408

08005260 <__malloc_unlock>:
 8005260:	4801      	ldr	r0, [pc, #4]	@ (8005268 <__malloc_unlock+0x8>)
 8005262:	f7ff bf0b 	b.w	800507c <__retarget_lock_release_recursive>
 8005266:	bf00      	nop
 8005268:	20000408 	.word	0x20000408

0800526c <__sfputc_r>:
 800526c:	6893      	ldr	r3, [r2, #8]
 800526e:	b410      	push	{r4}
 8005270:	3b01      	subs	r3, #1
 8005272:	2b00      	cmp	r3, #0
 8005274:	6093      	str	r3, [r2, #8]
 8005276:	da07      	bge.n	8005288 <__sfputc_r+0x1c>
 8005278:	6994      	ldr	r4, [r2, #24]
 800527a:	42a3      	cmp	r3, r4
 800527c:	db01      	blt.n	8005282 <__sfputc_r+0x16>
 800527e:	290a      	cmp	r1, #10
 8005280:	d102      	bne.n	8005288 <__sfputc_r+0x1c>
 8005282:	bc10      	pop	{r4}
 8005284:	f7ff bdeb 	b.w	8004e5e <__swbuf_r>
 8005288:	6813      	ldr	r3, [r2, #0]
 800528a:	1c58      	adds	r0, r3, #1
 800528c:	6010      	str	r0, [r2, #0]
 800528e:	7019      	strb	r1, [r3, #0]
 8005290:	4608      	mov	r0, r1
 8005292:	bc10      	pop	{r4}
 8005294:	4770      	bx	lr

08005296 <__sfputs_r>:
 8005296:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005298:	4606      	mov	r6, r0
 800529a:	460f      	mov	r7, r1
 800529c:	4614      	mov	r4, r2
 800529e:	18d5      	adds	r5, r2, r3
 80052a0:	42ac      	cmp	r4, r5
 80052a2:	d101      	bne.n	80052a8 <__sfputs_r+0x12>
 80052a4:	2000      	movs	r0, #0
 80052a6:	e007      	b.n	80052b8 <__sfputs_r+0x22>
 80052a8:	463a      	mov	r2, r7
 80052aa:	4630      	mov	r0, r6
 80052ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80052b0:	f7ff ffdc 	bl	800526c <__sfputc_r>
 80052b4:	1c43      	adds	r3, r0, #1
 80052b6:	d1f3      	bne.n	80052a0 <__sfputs_r+0xa>
 80052b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080052bc <_vfiprintf_r>:
 80052bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052c0:	460d      	mov	r5, r1
 80052c2:	4614      	mov	r4, r2
 80052c4:	4698      	mov	r8, r3
 80052c6:	4606      	mov	r6, r0
 80052c8:	b09d      	sub	sp, #116	@ 0x74
 80052ca:	b118      	cbz	r0, 80052d4 <_vfiprintf_r+0x18>
 80052cc:	6a03      	ldr	r3, [r0, #32]
 80052ce:	b90b      	cbnz	r3, 80052d4 <_vfiprintf_r+0x18>
 80052d0:	f7ff fcd4 	bl	8004c7c <__sinit>
 80052d4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80052d6:	07d9      	lsls	r1, r3, #31
 80052d8:	d405      	bmi.n	80052e6 <_vfiprintf_r+0x2a>
 80052da:	89ab      	ldrh	r3, [r5, #12]
 80052dc:	059a      	lsls	r2, r3, #22
 80052de:	d402      	bmi.n	80052e6 <_vfiprintf_r+0x2a>
 80052e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80052e2:	f7ff feca 	bl	800507a <__retarget_lock_acquire_recursive>
 80052e6:	89ab      	ldrh	r3, [r5, #12]
 80052e8:	071b      	lsls	r3, r3, #28
 80052ea:	d501      	bpl.n	80052f0 <_vfiprintf_r+0x34>
 80052ec:	692b      	ldr	r3, [r5, #16]
 80052ee:	b99b      	cbnz	r3, 8005318 <_vfiprintf_r+0x5c>
 80052f0:	4629      	mov	r1, r5
 80052f2:	4630      	mov	r0, r6
 80052f4:	f7ff fdf2 	bl	8004edc <__swsetup_r>
 80052f8:	b170      	cbz	r0, 8005318 <_vfiprintf_r+0x5c>
 80052fa:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80052fc:	07dc      	lsls	r4, r3, #31
 80052fe:	d504      	bpl.n	800530a <_vfiprintf_r+0x4e>
 8005300:	f04f 30ff 	mov.w	r0, #4294967295
 8005304:	b01d      	add	sp, #116	@ 0x74
 8005306:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800530a:	89ab      	ldrh	r3, [r5, #12]
 800530c:	0598      	lsls	r0, r3, #22
 800530e:	d4f7      	bmi.n	8005300 <_vfiprintf_r+0x44>
 8005310:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005312:	f7ff feb3 	bl	800507c <__retarget_lock_release_recursive>
 8005316:	e7f3      	b.n	8005300 <_vfiprintf_r+0x44>
 8005318:	2300      	movs	r3, #0
 800531a:	9309      	str	r3, [sp, #36]	@ 0x24
 800531c:	2320      	movs	r3, #32
 800531e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005322:	2330      	movs	r3, #48	@ 0x30
 8005324:	f04f 0901 	mov.w	r9, #1
 8005328:	f8cd 800c 	str.w	r8, [sp, #12]
 800532c:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 80054d8 <_vfiprintf_r+0x21c>
 8005330:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005334:	4623      	mov	r3, r4
 8005336:	469a      	mov	sl, r3
 8005338:	f813 2b01 	ldrb.w	r2, [r3], #1
 800533c:	b10a      	cbz	r2, 8005342 <_vfiprintf_r+0x86>
 800533e:	2a25      	cmp	r2, #37	@ 0x25
 8005340:	d1f9      	bne.n	8005336 <_vfiprintf_r+0x7a>
 8005342:	ebba 0b04 	subs.w	fp, sl, r4
 8005346:	d00b      	beq.n	8005360 <_vfiprintf_r+0xa4>
 8005348:	465b      	mov	r3, fp
 800534a:	4622      	mov	r2, r4
 800534c:	4629      	mov	r1, r5
 800534e:	4630      	mov	r0, r6
 8005350:	f7ff ffa1 	bl	8005296 <__sfputs_r>
 8005354:	3001      	adds	r0, #1
 8005356:	f000 80a7 	beq.w	80054a8 <_vfiprintf_r+0x1ec>
 800535a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800535c:	445a      	add	r2, fp
 800535e:	9209      	str	r2, [sp, #36]	@ 0x24
 8005360:	f89a 3000 	ldrb.w	r3, [sl]
 8005364:	2b00      	cmp	r3, #0
 8005366:	f000 809f 	beq.w	80054a8 <_vfiprintf_r+0x1ec>
 800536a:	2300      	movs	r3, #0
 800536c:	f04f 32ff 	mov.w	r2, #4294967295
 8005370:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005374:	f10a 0a01 	add.w	sl, sl, #1
 8005378:	9304      	str	r3, [sp, #16]
 800537a:	9307      	str	r3, [sp, #28]
 800537c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005380:	931a      	str	r3, [sp, #104]	@ 0x68
 8005382:	4654      	mov	r4, sl
 8005384:	2205      	movs	r2, #5
 8005386:	f814 1b01 	ldrb.w	r1, [r4], #1
 800538a:	4853      	ldr	r0, [pc, #332]	@ (80054d8 <_vfiprintf_r+0x21c>)
 800538c:	f000 fbb0 	bl	8005af0 <memchr>
 8005390:	9a04      	ldr	r2, [sp, #16]
 8005392:	b9d8      	cbnz	r0, 80053cc <_vfiprintf_r+0x110>
 8005394:	06d1      	lsls	r1, r2, #27
 8005396:	bf44      	itt	mi
 8005398:	2320      	movmi	r3, #32
 800539a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800539e:	0713      	lsls	r3, r2, #28
 80053a0:	bf44      	itt	mi
 80053a2:	232b      	movmi	r3, #43	@ 0x2b
 80053a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80053a8:	f89a 3000 	ldrb.w	r3, [sl]
 80053ac:	2b2a      	cmp	r3, #42	@ 0x2a
 80053ae:	d015      	beq.n	80053dc <_vfiprintf_r+0x120>
 80053b0:	4654      	mov	r4, sl
 80053b2:	2000      	movs	r0, #0
 80053b4:	f04f 0c0a 	mov.w	ip, #10
 80053b8:	9a07      	ldr	r2, [sp, #28]
 80053ba:	4621      	mov	r1, r4
 80053bc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80053c0:	3b30      	subs	r3, #48	@ 0x30
 80053c2:	2b09      	cmp	r3, #9
 80053c4:	d94b      	bls.n	800545e <_vfiprintf_r+0x1a2>
 80053c6:	b1b0      	cbz	r0, 80053f6 <_vfiprintf_r+0x13a>
 80053c8:	9207      	str	r2, [sp, #28]
 80053ca:	e014      	b.n	80053f6 <_vfiprintf_r+0x13a>
 80053cc:	eba0 0308 	sub.w	r3, r0, r8
 80053d0:	fa09 f303 	lsl.w	r3, r9, r3
 80053d4:	4313      	orrs	r3, r2
 80053d6:	46a2      	mov	sl, r4
 80053d8:	9304      	str	r3, [sp, #16]
 80053da:	e7d2      	b.n	8005382 <_vfiprintf_r+0xc6>
 80053dc:	9b03      	ldr	r3, [sp, #12]
 80053de:	1d19      	adds	r1, r3, #4
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	9103      	str	r1, [sp, #12]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	bfbb      	ittet	lt
 80053e8:	425b      	neglt	r3, r3
 80053ea:	f042 0202 	orrlt.w	r2, r2, #2
 80053ee:	9307      	strge	r3, [sp, #28]
 80053f0:	9307      	strlt	r3, [sp, #28]
 80053f2:	bfb8      	it	lt
 80053f4:	9204      	strlt	r2, [sp, #16]
 80053f6:	7823      	ldrb	r3, [r4, #0]
 80053f8:	2b2e      	cmp	r3, #46	@ 0x2e
 80053fa:	d10a      	bne.n	8005412 <_vfiprintf_r+0x156>
 80053fc:	7863      	ldrb	r3, [r4, #1]
 80053fe:	2b2a      	cmp	r3, #42	@ 0x2a
 8005400:	d132      	bne.n	8005468 <_vfiprintf_r+0x1ac>
 8005402:	9b03      	ldr	r3, [sp, #12]
 8005404:	3402      	adds	r4, #2
 8005406:	1d1a      	adds	r2, r3, #4
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	9203      	str	r2, [sp, #12]
 800540c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005410:	9305      	str	r3, [sp, #20]
 8005412:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 80054dc <_vfiprintf_r+0x220>
 8005416:	2203      	movs	r2, #3
 8005418:	4650      	mov	r0, sl
 800541a:	7821      	ldrb	r1, [r4, #0]
 800541c:	f000 fb68 	bl	8005af0 <memchr>
 8005420:	b138      	cbz	r0, 8005432 <_vfiprintf_r+0x176>
 8005422:	2240      	movs	r2, #64	@ 0x40
 8005424:	9b04      	ldr	r3, [sp, #16]
 8005426:	eba0 000a 	sub.w	r0, r0, sl
 800542a:	4082      	lsls	r2, r0
 800542c:	4313      	orrs	r3, r2
 800542e:	3401      	adds	r4, #1
 8005430:	9304      	str	r3, [sp, #16]
 8005432:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005436:	2206      	movs	r2, #6
 8005438:	4829      	ldr	r0, [pc, #164]	@ (80054e0 <_vfiprintf_r+0x224>)
 800543a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800543e:	f000 fb57 	bl	8005af0 <memchr>
 8005442:	2800      	cmp	r0, #0
 8005444:	d03f      	beq.n	80054c6 <_vfiprintf_r+0x20a>
 8005446:	4b27      	ldr	r3, [pc, #156]	@ (80054e4 <_vfiprintf_r+0x228>)
 8005448:	bb1b      	cbnz	r3, 8005492 <_vfiprintf_r+0x1d6>
 800544a:	9b03      	ldr	r3, [sp, #12]
 800544c:	3307      	adds	r3, #7
 800544e:	f023 0307 	bic.w	r3, r3, #7
 8005452:	3308      	adds	r3, #8
 8005454:	9303      	str	r3, [sp, #12]
 8005456:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005458:	443b      	add	r3, r7
 800545a:	9309      	str	r3, [sp, #36]	@ 0x24
 800545c:	e76a      	b.n	8005334 <_vfiprintf_r+0x78>
 800545e:	460c      	mov	r4, r1
 8005460:	2001      	movs	r0, #1
 8005462:	fb0c 3202 	mla	r2, ip, r2, r3
 8005466:	e7a8      	b.n	80053ba <_vfiprintf_r+0xfe>
 8005468:	2300      	movs	r3, #0
 800546a:	f04f 0c0a 	mov.w	ip, #10
 800546e:	4619      	mov	r1, r3
 8005470:	3401      	adds	r4, #1
 8005472:	9305      	str	r3, [sp, #20]
 8005474:	4620      	mov	r0, r4
 8005476:	f810 2b01 	ldrb.w	r2, [r0], #1
 800547a:	3a30      	subs	r2, #48	@ 0x30
 800547c:	2a09      	cmp	r2, #9
 800547e:	d903      	bls.n	8005488 <_vfiprintf_r+0x1cc>
 8005480:	2b00      	cmp	r3, #0
 8005482:	d0c6      	beq.n	8005412 <_vfiprintf_r+0x156>
 8005484:	9105      	str	r1, [sp, #20]
 8005486:	e7c4      	b.n	8005412 <_vfiprintf_r+0x156>
 8005488:	4604      	mov	r4, r0
 800548a:	2301      	movs	r3, #1
 800548c:	fb0c 2101 	mla	r1, ip, r1, r2
 8005490:	e7f0      	b.n	8005474 <_vfiprintf_r+0x1b8>
 8005492:	ab03      	add	r3, sp, #12
 8005494:	9300      	str	r3, [sp, #0]
 8005496:	462a      	mov	r2, r5
 8005498:	4630      	mov	r0, r6
 800549a:	4b13      	ldr	r3, [pc, #76]	@ (80054e8 <_vfiprintf_r+0x22c>)
 800549c:	a904      	add	r1, sp, #16
 800549e:	f3af 8000 	nop.w
 80054a2:	4607      	mov	r7, r0
 80054a4:	1c78      	adds	r0, r7, #1
 80054a6:	d1d6      	bne.n	8005456 <_vfiprintf_r+0x19a>
 80054a8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80054aa:	07d9      	lsls	r1, r3, #31
 80054ac:	d405      	bmi.n	80054ba <_vfiprintf_r+0x1fe>
 80054ae:	89ab      	ldrh	r3, [r5, #12]
 80054b0:	059a      	lsls	r2, r3, #22
 80054b2:	d402      	bmi.n	80054ba <_vfiprintf_r+0x1fe>
 80054b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80054b6:	f7ff fde1 	bl	800507c <__retarget_lock_release_recursive>
 80054ba:	89ab      	ldrh	r3, [r5, #12]
 80054bc:	065b      	lsls	r3, r3, #25
 80054be:	f53f af1f 	bmi.w	8005300 <_vfiprintf_r+0x44>
 80054c2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80054c4:	e71e      	b.n	8005304 <_vfiprintf_r+0x48>
 80054c6:	ab03      	add	r3, sp, #12
 80054c8:	9300      	str	r3, [sp, #0]
 80054ca:	462a      	mov	r2, r5
 80054cc:	4630      	mov	r0, r6
 80054ce:	4b06      	ldr	r3, [pc, #24]	@ (80054e8 <_vfiprintf_r+0x22c>)
 80054d0:	a904      	add	r1, sp, #16
 80054d2:	f000 f87d 	bl	80055d0 <_printf_i>
 80054d6:	e7e4      	b.n	80054a2 <_vfiprintf_r+0x1e6>
 80054d8:	08005c36 	.word	0x08005c36
 80054dc:	08005c3c 	.word	0x08005c3c
 80054e0:	08005c40 	.word	0x08005c40
 80054e4:	00000000 	.word	0x00000000
 80054e8:	08005297 	.word	0x08005297

080054ec <_printf_common>:
 80054ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80054f0:	4616      	mov	r6, r2
 80054f2:	4698      	mov	r8, r3
 80054f4:	688a      	ldr	r2, [r1, #8]
 80054f6:	690b      	ldr	r3, [r1, #16]
 80054f8:	4607      	mov	r7, r0
 80054fa:	4293      	cmp	r3, r2
 80054fc:	bfb8      	it	lt
 80054fe:	4613      	movlt	r3, r2
 8005500:	6033      	str	r3, [r6, #0]
 8005502:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005506:	460c      	mov	r4, r1
 8005508:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800550c:	b10a      	cbz	r2, 8005512 <_printf_common+0x26>
 800550e:	3301      	adds	r3, #1
 8005510:	6033      	str	r3, [r6, #0]
 8005512:	6823      	ldr	r3, [r4, #0]
 8005514:	0699      	lsls	r1, r3, #26
 8005516:	bf42      	ittt	mi
 8005518:	6833      	ldrmi	r3, [r6, #0]
 800551a:	3302      	addmi	r3, #2
 800551c:	6033      	strmi	r3, [r6, #0]
 800551e:	6825      	ldr	r5, [r4, #0]
 8005520:	f015 0506 	ands.w	r5, r5, #6
 8005524:	d106      	bne.n	8005534 <_printf_common+0x48>
 8005526:	f104 0a19 	add.w	sl, r4, #25
 800552a:	68e3      	ldr	r3, [r4, #12]
 800552c:	6832      	ldr	r2, [r6, #0]
 800552e:	1a9b      	subs	r3, r3, r2
 8005530:	42ab      	cmp	r3, r5
 8005532:	dc2b      	bgt.n	800558c <_printf_common+0xa0>
 8005534:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005538:	6822      	ldr	r2, [r4, #0]
 800553a:	3b00      	subs	r3, #0
 800553c:	bf18      	it	ne
 800553e:	2301      	movne	r3, #1
 8005540:	0692      	lsls	r2, r2, #26
 8005542:	d430      	bmi.n	80055a6 <_printf_common+0xba>
 8005544:	4641      	mov	r1, r8
 8005546:	4638      	mov	r0, r7
 8005548:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800554c:	47c8      	blx	r9
 800554e:	3001      	adds	r0, #1
 8005550:	d023      	beq.n	800559a <_printf_common+0xae>
 8005552:	6823      	ldr	r3, [r4, #0]
 8005554:	6922      	ldr	r2, [r4, #16]
 8005556:	f003 0306 	and.w	r3, r3, #6
 800555a:	2b04      	cmp	r3, #4
 800555c:	bf14      	ite	ne
 800555e:	2500      	movne	r5, #0
 8005560:	6833      	ldreq	r3, [r6, #0]
 8005562:	f04f 0600 	mov.w	r6, #0
 8005566:	bf08      	it	eq
 8005568:	68e5      	ldreq	r5, [r4, #12]
 800556a:	f104 041a 	add.w	r4, r4, #26
 800556e:	bf08      	it	eq
 8005570:	1aed      	subeq	r5, r5, r3
 8005572:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8005576:	bf08      	it	eq
 8005578:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800557c:	4293      	cmp	r3, r2
 800557e:	bfc4      	itt	gt
 8005580:	1a9b      	subgt	r3, r3, r2
 8005582:	18ed      	addgt	r5, r5, r3
 8005584:	42b5      	cmp	r5, r6
 8005586:	d11a      	bne.n	80055be <_printf_common+0xd2>
 8005588:	2000      	movs	r0, #0
 800558a:	e008      	b.n	800559e <_printf_common+0xb2>
 800558c:	2301      	movs	r3, #1
 800558e:	4652      	mov	r2, sl
 8005590:	4641      	mov	r1, r8
 8005592:	4638      	mov	r0, r7
 8005594:	47c8      	blx	r9
 8005596:	3001      	adds	r0, #1
 8005598:	d103      	bne.n	80055a2 <_printf_common+0xb6>
 800559a:	f04f 30ff 	mov.w	r0, #4294967295
 800559e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055a2:	3501      	adds	r5, #1
 80055a4:	e7c1      	b.n	800552a <_printf_common+0x3e>
 80055a6:	2030      	movs	r0, #48	@ 0x30
 80055a8:	18e1      	adds	r1, r4, r3
 80055aa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80055ae:	1c5a      	adds	r2, r3, #1
 80055b0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80055b4:	4422      	add	r2, r4
 80055b6:	3302      	adds	r3, #2
 80055b8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80055bc:	e7c2      	b.n	8005544 <_printf_common+0x58>
 80055be:	2301      	movs	r3, #1
 80055c0:	4622      	mov	r2, r4
 80055c2:	4641      	mov	r1, r8
 80055c4:	4638      	mov	r0, r7
 80055c6:	47c8      	blx	r9
 80055c8:	3001      	adds	r0, #1
 80055ca:	d0e6      	beq.n	800559a <_printf_common+0xae>
 80055cc:	3601      	adds	r6, #1
 80055ce:	e7d9      	b.n	8005584 <_printf_common+0x98>

080055d0 <_printf_i>:
 80055d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80055d4:	7e0f      	ldrb	r7, [r1, #24]
 80055d6:	4691      	mov	r9, r2
 80055d8:	2f78      	cmp	r7, #120	@ 0x78
 80055da:	4680      	mov	r8, r0
 80055dc:	460c      	mov	r4, r1
 80055de:	469a      	mov	sl, r3
 80055e0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80055e2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80055e6:	d807      	bhi.n	80055f8 <_printf_i+0x28>
 80055e8:	2f62      	cmp	r7, #98	@ 0x62
 80055ea:	d80a      	bhi.n	8005602 <_printf_i+0x32>
 80055ec:	2f00      	cmp	r7, #0
 80055ee:	f000 80d3 	beq.w	8005798 <_printf_i+0x1c8>
 80055f2:	2f58      	cmp	r7, #88	@ 0x58
 80055f4:	f000 80ba 	beq.w	800576c <_printf_i+0x19c>
 80055f8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80055fc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005600:	e03a      	b.n	8005678 <_printf_i+0xa8>
 8005602:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005606:	2b15      	cmp	r3, #21
 8005608:	d8f6      	bhi.n	80055f8 <_printf_i+0x28>
 800560a:	a101      	add	r1, pc, #4	@ (adr r1, 8005610 <_printf_i+0x40>)
 800560c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005610:	08005669 	.word	0x08005669
 8005614:	0800567d 	.word	0x0800567d
 8005618:	080055f9 	.word	0x080055f9
 800561c:	080055f9 	.word	0x080055f9
 8005620:	080055f9 	.word	0x080055f9
 8005624:	080055f9 	.word	0x080055f9
 8005628:	0800567d 	.word	0x0800567d
 800562c:	080055f9 	.word	0x080055f9
 8005630:	080055f9 	.word	0x080055f9
 8005634:	080055f9 	.word	0x080055f9
 8005638:	080055f9 	.word	0x080055f9
 800563c:	0800577f 	.word	0x0800577f
 8005640:	080056a7 	.word	0x080056a7
 8005644:	08005739 	.word	0x08005739
 8005648:	080055f9 	.word	0x080055f9
 800564c:	080055f9 	.word	0x080055f9
 8005650:	080057a1 	.word	0x080057a1
 8005654:	080055f9 	.word	0x080055f9
 8005658:	080056a7 	.word	0x080056a7
 800565c:	080055f9 	.word	0x080055f9
 8005660:	080055f9 	.word	0x080055f9
 8005664:	08005741 	.word	0x08005741
 8005668:	6833      	ldr	r3, [r6, #0]
 800566a:	1d1a      	adds	r2, r3, #4
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	6032      	str	r2, [r6, #0]
 8005670:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005674:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005678:	2301      	movs	r3, #1
 800567a:	e09e      	b.n	80057ba <_printf_i+0x1ea>
 800567c:	6833      	ldr	r3, [r6, #0]
 800567e:	6820      	ldr	r0, [r4, #0]
 8005680:	1d19      	adds	r1, r3, #4
 8005682:	6031      	str	r1, [r6, #0]
 8005684:	0606      	lsls	r6, r0, #24
 8005686:	d501      	bpl.n	800568c <_printf_i+0xbc>
 8005688:	681d      	ldr	r5, [r3, #0]
 800568a:	e003      	b.n	8005694 <_printf_i+0xc4>
 800568c:	0645      	lsls	r5, r0, #25
 800568e:	d5fb      	bpl.n	8005688 <_printf_i+0xb8>
 8005690:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005694:	2d00      	cmp	r5, #0
 8005696:	da03      	bge.n	80056a0 <_printf_i+0xd0>
 8005698:	232d      	movs	r3, #45	@ 0x2d
 800569a:	426d      	negs	r5, r5
 800569c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80056a0:	230a      	movs	r3, #10
 80056a2:	4859      	ldr	r0, [pc, #356]	@ (8005808 <_printf_i+0x238>)
 80056a4:	e011      	b.n	80056ca <_printf_i+0xfa>
 80056a6:	6821      	ldr	r1, [r4, #0]
 80056a8:	6833      	ldr	r3, [r6, #0]
 80056aa:	0608      	lsls	r0, r1, #24
 80056ac:	f853 5b04 	ldr.w	r5, [r3], #4
 80056b0:	d402      	bmi.n	80056b8 <_printf_i+0xe8>
 80056b2:	0649      	lsls	r1, r1, #25
 80056b4:	bf48      	it	mi
 80056b6:	b2ad      	uxthmi	r5, r5
 80056b8:	2f6f      	cmp	r7, #111	@ 0x6f
 80056ba:	6033      	str	r3, [r6, #0]
 80056bc:	bf14      	ite	ne
 80056be:	230a      	movne	r3, #10
 80056c0:	2308      	moveq	r3, #8
 80056c2:	4851      	ldr	r0, [pc, #324]	@ (8005808 <_printf_i+0x238>)
 80056c4:	2100      	movs	r1, #0
 80056c6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80056ca:	6866      	ldr	r6, [r4, #4]
 80056cc:	2e00      	cmp	r6, #0
 80056ce:	bfa8      	it	ge
 80056d0:	6821      	ldrge	r1, [r4, #0]
 80056d2:	60a6      	str	r6, [r4, #8]
 80056d4:	bfa4      	itt	ge
 80056d6:	f021 0104 	bicge.w	r1, r1, #4
 80056da:	6021      	strge	r1, [r4, #0]
 80056dc:	b90d      	cbnz	r5, 80056e2 <_printf_i+0x112>
 80056de:	2e00      	cmp	r6, #0
 80056e0:	d04b      	beq.n	800577a <_printf_i+0x1aa>
 80056e2:	4616      	mov	r6, r2
 80056e4:	fbb5 f1f3 	udiv	r1, r5, r3
 80056e8:	fb03 5711 	mls	r7, r3, r1, r5
 80056ec:	5dc7      	ldrb	r7, [r0, r7]
 80056ee:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80056f2:	462f      	mov	r7, r5
 80056f4:	42bb      	cmp	r3, r7
 80056f6:	460d      	mov	r5, r1
 80056f8:	d9f4      	bls.n	80056e4 <_printf_i+0x114>
 80056fa:	2b08      	cmp	r3, #8
 80056fc:	d10b      	bne.n	8005716 <_printf_i+0x146>
 80056fe:	6823      	ldr	r3, [r4, #0]
 8005700:	07df      	lsls	r7, r3, #31
 8005702:	d508      	bpl.n	8005716 <_printf_i+0x146>
 8005704:	6923      	ldr	r3, [r4, #16]
 8005706:	6861      	ldr	r1, [r4, #4]
 8005708:	4299      	cmp	r1, r3
 800570a:	bfde      	ittt	le
 800570c:	2330      	movle	r3, #48	@ 0x30
 800570e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005712:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005716:	1b92      	subs	r2, r2, r6
 8005718:	6122      	str	r2, [r4, #16]
 800571a:	464b      	mov	r3, r9
 800571c:	4621      	mov	r1, r4
 800571e:	4640      	mov	r0, r8
 8005720:	f8cd a000 	str.w	sl, [sp]
 8005724:	aa03      	add	r2, sp, #12
 8005726:	f7ff fee1 	bl	80054ec <_printf_common>
 800572a:	3001      	adds	r0, #1
 800572c:	d14a      	bne.n	80057c4 <_printf_i+0x1f4>
 800572e:	f04f 30ff 	mov.w	r0, #4294967295
 8005732:	b004      	add	sp, #16
 8005734:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005738:	6823      	ldr	r3, [r4, #0]
 800573a:	f043 0320 	orr.w	r3, r3, #32
 800573e:	6023      	str	r3, [r4, #0]
 8005740:	2778      	movs	r7, #120	@ 0x78
 8005742:	4832      	ldr	r0, [pc, #200]	@ (800580c <_printf_i+0x23c>)
 8005744:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005748:	6823      	ldr	r3, [r4, #0]
 800574a:	6831      	ldr	r1, [r6, #0]
 800574c:	061f      	lsls	r7, r3, #24
 800574e:	f851 5b04 	ldr.w	r5, [r1], #4
 8005752:	d402      	bmi.n	800575a <_printf_i+0x18a>
 8005754:	065f      	lsls	r7, r3, #25
 8005756:	bf48      	it	mi
 8005758:	b2ad      	uxthmi	r5, r5
 800575a:	6031      	str	r1, [r6, #0]
 800575c:	07d9      	lsls	r1, r3, #31
 800575e:	bf44      	itt	mi
 8005760:	f043 0320 	orrmi.w	r3, r3, #32
 8005764:	6023      	strmi	r3, [r4, #0]
 8005766:	b11d      	cbz	r5, 8005770 <_printf_i+0x1a0>
 8005768:	2310      	movs	r3, #16
 800576a:	e7ab      	b.n	80056c4 <_printf_i+0xf4>
 800576c:	4826      	ldr	r0, [pc, #152]	@ (8005808 <_printf_i+0x238>)
 800576e:	e7e9      	b.n	8005744 <_printf_i+0x174>
 8005770:	6823      	ldr	r3, [r4, #0]
 8005772:	f023 0320 	bic.w	r3, r3, #32
 8005776:	6023      	str	r3, [r4, #0]
 8005778:	e7f6      	b.n	8005768 <_printf_i+0x198>
 800577a:	4616      	mov	r6, r2
 800577c:	e7bd      	b.n	80056fa <_printf_i+0x12a>
 800577e:	6833      	ldr	r3, [r6, #0]
 8005780:	6825      	ldr	r5, [r4, #0]
 8005782:	1d18      	adds	r0, r3, #4
 8005784:	6961      	ldr	r1, [r4, #20]
 8005786:	6030      	str	r0, [r6, #0]
 8005788:	062e      	lsls	r6, r5, #24
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	d501      	bpl.n	8005792 <_printf_i+0x1c2>
 800578e:	6019      	str	r1, [r3, #0]
 8005790:	e002      	b.n	8005798 <_printf_i+0x1c8>
 8005792:	0668      	lsls	r0, r5, #25
 8005794:	d5fb      	bpl.n	800578e <_printf_i+0x1be>
 8005796:	8019      	strh	r1, [r3, #0]
 8005798:	2300      	movs	r3, #0
 800579a:	4616      	mov	r6, r2
 800579c:	6123      	str	r3, [r4, #16]
 800579e:	e7bc      	b.n	800571a <_printf_i+0x14a>
 80057a0:	6833      	ldr	r3, [r6, #0]
 80057a2:	2100      	movs	r1, #0
 80057a4:	1d1a      	adds	r2, r3, #4
 80057a6:	6032      	str	r2, [r6, #0]
 80057a8:	681e      	ldr	r6, [r3, #0]
 80057aa:	6862      	ldr	r2, [r4, #4]
 80057ac:	4630      	mov	r0, r6
 80057ae:	f000 f99f 	bl	8005af0 <memchr>
 80057b2:	b108      	cbz	r0, 80057b8 <_printf_i+0x1e8>
 80057b4:	1b80      	subs	r0, r0, r6
 80057b6:	6060      	str	r0, [r4, #4]
 80057b8:	6863      	ldr	r3, [r4, #4]
 80057ba:	6123      	str	r3, [r4, #16]
 80057bc:	2300      	movs	r3, #0
 80057be:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80057c2:	e7aa      	b.n	800571a <_printf_i+0x14a>
 80057c4:	4632      	mov	r2, r6
 80057c6:	4649      	mov	r1, r9
 80057c8:	4640      	mov	r0, r8
 80057ca:	6923      	ldr	r3, [r4, #16]
 80057cc:	47d0      	blx	sl
 80057ce:	3001      	adds	r0, #1
 80057d0:	d0ad      	beq.n	800572e <_printf_i+0x15e>
 80057d2:	6823      	ldr	r3, [r4, #0]
 80057d4:	079b      	lsls	r3, r3, #30
 80057d6:	d413      	bmi.n	8005800 <_printf_i+0x230>
 80057d8:	68e0      	ldr	r0, [r4, #12]
 80057da:	9b03      	ldr	r3, [sp, #12]
 80057dc:	4298      	cmp	r0, r3
 80057de:	bfb8      	it	lt
 80057e0:	4618      	movlt	r0, r3
 80057e2:	e7a6      	b.n	8005732 <_printf_i+0x162>
 80057e4:	2301      	movs	r3, #1
 80057e6:	4632      	mov	r2, r6
 80057e8:	4649      	mov	r1, r9
 80057ea:	4640      	mov	r0, r8
 80057ec:	47d0      	blx	sl
 80057ee:	3001      	adds	r0, #1
 80057f0:	d09d      	beq.n	800572e <_printf_i+0x15e>
 80057f2:	3501      	adds	r5, #1
 80057f4:	68e3      	ldr	r3, [r4, #12]
 80057f6:	9903      	ldr	r1, [sp, #12]
 80057f8:	1a5b      	subs	r3, r3, r1
 80057fa:	42ab      	cmp	r3, r5
 80057fc:	dcf2      	bgt.n	80057e4 <_printf_i+0x214>
 80057fe:	e7eb      	b.n	80057d8 <_printf_i+0x208>
 8005800:	2500      	movs	r5, #0
 8005802:	f104 0619 	add.w	r6, r4, #25
 8005806:	e7f5      	b.n	80057f4 <_printf_i+0x224>
 8005808:	08005c47 	.word	0x08005c47
 800580c:	08005c58 	.word	0x08005c58

08005810 <__sflush_r>:
 8005810:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005816:	0716      	lsls	r6, r2, #28
 8005818:	4605      	mov	r5, r0
 800581a:	460c      	mov	r4, r1
 800581c:	d454      	bmi.n	80058c8 <__sflush_r+0xb8>
 800581e:	684b      	ldr	r3, [r1, #4]
 8005820:	2b00      	cmp	r3, #0
 8005822:	dc02      	bgt.n	800582a <__sflush_r+0x1a>
 8005824:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005826:	2b00      	cmp	r3, #0
 8005828:	dd48      	ble.n	80058bc <__sflush_r+0xac>
 800582a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800582c:	2e00      	cmp	r6, #0
 800582e:	d045      	beq.n	80058bc <__sflush_r+0xac>
 8005830:	2300      	movs	r3, #0
 8005832:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005836:	682f      	ldr	r7, [r5, #0]
 8005838:	6a21      	ldr	r1, [r4, #32]
 800583a:	602b      	str	r3, [r5, #0]
 800583c:	d030      	beq.n	80058a0 <__sflush_r+0x90>
 800583e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005840:	89a3      	ldrh	r3, [r4, #12]
 8005842:	0759      	lsls	r1, r3, #29
 8005844:	d505      	bpl.n	8005852 <__sflush_r+0x42>
 8005846:	6863      	ldr	r3, [r4, #4]
 8005848:	1ad2      	subs	r2, r2, r3
 800584a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800584c:	b10b      	cbz	r3, 8005852 <__sflush_r+0x42>
 800584e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005850:	1ad2      	subs	r2, r2, r3
 8005852:	2300      	movs	r3, #0
 8005854:	4628      	mov	r0, r5
 8005856:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005858:	6a21      	ldr	r1, [r4, #32]
 800585a:	47b0      	blx	r6
 800585c:	1c43      	adds	r3, r0, #1
 800585e:	89a3      	ldrh	r3, [r4, #12]
 8005860:	d106      	bne.n	8005870 <__sflush_r+0x60>
 8005862:	6829      	ldr	r1, [r5, #0]
 8005864:	291d      	cmp	r1, #29
 8005866:	d82b      	bhi.n	80058c0 <__sflush_r+0xb0>
 8005868:	4a28      	ldr	r2, [pc, #160]	@ (800590c <__sflush_r+0xfc>)
 800586a:	410a      	asrs	r2, r1
 800586c:	07d6      	lsls	r6, r2, #31
 800586e:	d427      	bmi.n	80058c0 <__sflush_r+0xb0>
 8005870:	2200      	movs	r2, #0
 8005872:	6062      	str	r2, [r4, #4]
 8005874:	6922      	ldr	r2, [r4, #16]
 8005876:	04d9      	lsls	r1, r3, #19
 8005878:	6022      	str	r2, [r4, #0]
 800587a:	d504      	bpl.n	8005886 <__sflush_r+0x76>
 800587c:	1c42      	adds	r2, r0, #1
 800587e:	d101      	bne.n	8005884 <__sflush_r+0x74>
 8005880:	682b      	ldr	r3, [r5, #0]
 8005882:	b903      	cbnz	r3, 8005886 <__sflush_r+0x76>
 8005884:	6560      	str	r0, [r4, #84]	@ 0x54
 8005886:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005888:	602f      	str	r7, [r5, #0]
 800588a:	b1b9      	cbz	r1, 80058bc <__sflush_r+0xac>
 800588c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005890:	4299      	cmp	r1, r3
 8005892:	d002      	beq.n	800589a <__sflush_r+0x8a>
 8005894:	4628      	mov	r0, r5
 8005896:	f7ff fbf3 	bl	8005080 <_free_r>
 800589a:	2300      	movs	r3, #0
 800589c:	6363      	str	r3, [r4, #52]	@ 0x34
 800589e:	e00d      	b.n	80058bc <__sflush_r+0xac>
 80058a0:	2301      	movs	r3, #1
 80058a2:	4628      	mov	r0, r5
 80058a4:	47b0      	blx	r6
 80058a6:	4602      	mov	r2, r0
 80058a8:	1c50      	adds	r0, r2, #1
 80058aa:	d1c9      	bne.n	8005840 <__sflush_r+0x30>
 80058ac:	682b      	ldr	r3, [r5, #0]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d0c6      	beq.n	8005840 <__sflush_r+0x30>
 80058b2:	2b1d      	cmp	r3, #29
 80058b4:	d001      	beq.n	80058ba <__sflush_r+0xaa>
 80058b6:	2b16      	cmp	r3, #22
 80058b8:	d11d      	bne.n	80058f6 <__sflush_r+0xe6>
 80058ba:	602f      	str	r7, [r5, #0]
 80058bc:	2000      	movs	r0, #0
 80058be:	e021      	b.n	8005904 <__sflush_r+0xf4>
 80058c0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80058c4:	b21b      	sxth	r3, r3
 80058c6:	e01a      	b.n	80058fe <__sflush_r+0xee>
 80058c8:	690f      	ldr	r7, [r1, #16]
 80058ca:	2f00      	cmp	r7, #0
 80058cc:	d0f6      	beq.n	80058bc <__sflush_r+0xac>
 80058ce:	0793      	lsls	r3, r2, #30
 80058d0:	bf18      	it	ne
 80058d2:	2300      	movne	r3, #0
 80058d4:	680e      	ldr	r6, [r1, #0]
 80058d6:	bf08      	it	eq
 80058d8:	694b      	ldreq	r3, [r1, #20]
 80058da:	1bf6      	subs	r6, r6, r7
 80058dc:	600f      	str	r7, [r1, #0]
 80058de:	608b      	str	r3, [r1, #8]
 80058e0:	2e00      	cmp	r6, #0
 80058e2:	ddeb      	ble.n	80058bc <__sflush_r+0xac>
 80058e4:	4633      	mov	r3, r6
 80058e6:	463a      	mov	r2, r7
 80058e8:	4628      	mov	r0, r5
 80058ea:	6a21      	ldr	r1, [r4, #32]
 80058ec:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 80058f0:	47e0      	blx	ip
 80058f2:	2800      	cmp	r0, #0
 80058f4:	dc07      	bgt.n	8005906 <__sflush_r+0xf6>
 80058f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80058fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80058fe:	f04f 30ff 	mov.w	r0, #4294967295
 8005902:	81a3      	strh	r3, [r4, #12]
 8005904:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005906:	4407      	add	r7, r0
 8005908:	1a36      	subs	r6, r6, r0
 800590a:	e7e9      	b.n	80058e0 <__sflush_r+0xd0>
 800590c:	dfbffffe 	.word	0xdfbffffe

08005910 <_fflush_r>:
 8005910:	b538      	push	{r3, r4, r5, lr}
 8005912:	690b      	ldr	r3, [r1, #16]
 8005914:	4605      	mov	r5, r0
 8005916:	460c      	mov	r4, r1
 8005918:	b913      	cbnz	r3, 8005920 <_fflush_r+0x10>
 800591a:	2500      	movs	r5, #0
 800591c:	4628      	mov	r0, r5
 800591e:	bd38      	pop	{r3, r4, r5, pc}
 8005920:	b118      	cbz	r0, 800592a <_fflush_r+0x1a>
 8005922:	6a03      	ldr	r3, [r0, #32]
 8005924:	b90b      	cbnz	r3, 800592a <_fflush_r+0x1a>
 8005926:	f7ff f9a9 	bl	8004c7c <__sinit>
 800592a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d0f3      	beq.n	800591a <_fflush_r+0xa>
 8005932:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005934:	07d0      	lsls	r0, r2, #31
 8005936:	d404      	bmi.n	8005942 <_fflush_r+0x32>
 8005938:	0599      	lsls	r1, r3, #22
 800593a:	d402      	bmi.n	8005942 <_fflush_r+0x32>
 800593c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800593e:	f7ff fb9c 	bl	800507a <__retarget_lock_acquire_recursive>
 8005942:	4628      	mov	r0, r5
 8005944:	4621      	mov	r1, r4
 8005946:	f7ff ff63 	bl	8005810 <__sflush_r>
 800594a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800594c:	4605      	mov	r5, r0
 800594e:	07da      	lsls	r2, r3, #31
 8005950:	d4e4      	bmi.n	800591c <_fflush_r+0xc>
 8005952:	89a3      	ldrh	r3, [r4, #12]
 8005954:	059b      	lsls	r3, r3, #22
 8005956:	d4e1      	bmi.n	800591c <_fflush_r+0xc>
 8005958:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800595a:	f7ff fb8f 	bl	800507c <__retarget_lock_release_recursive>
 800595e:	e7dd      	b.n	800591c <_fflush_r+0xc>

08005960 <__swhatbuf_r>:
 8005960:	b570      	push	{r4, r5, r6, lr}
 8005962:	460c      	mov	r4, r1
 8005964:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005968:	4615      	mov	r5, r2
 800596a:	2900      	cmp	r1, #0
 800596c:	461e      	mov	r6, r3
 800596e:	b096      	sub	sp, #88	@ 0x58
 8005970:	da0c      	bge.n	800598c <__swhatbuf_r+0x2c>
 8005972:	89a3      	ldrh	r3, [r4, #12]
 8005974:	2100      	movs	r1, #0
 8005976:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800597a:	bf14      	ite	ne
 800597c:	2340      	movne	r3, #64	@ 0x40
 800597e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005982:	2000      	movs	r0, #0
 8005984:	6031      	str	r1, [r6, #0]
 8005986:	602b      	str	r3, [r5, #0]
 8005988:	b016      	add	sp, #88	@ 0x58
 800598a:	bd70      	pop	{r4, r5, r6, pc}
 800598c:	466a      	mov	r2, sp
 800598e:	f000 f87d 	bl	8005a8c <_fstat_r>
 8005992:	2800      	cmp	r0, #0
 8005994:	dbed      	blt.n	8005972 <__swhatbuf_r+0x12>
 8005996:	9901      	ldr	r1, [sp, #4]
 8005998:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800599c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80059a0:	4259      	negs	r1, r3
 80059a2:	4159      	adcs	r1, r3
 80059a4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80059a8:	e7eb      	b.n	8005982 <__swhatbuf_r+0x22>

080059aa <__smakebuf_r>:
 80059aa:	898b      	ldrh	r3, [r1, #12]
 80059ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80059ae:	079d      	lsls	r5, r3, #30
 80059b0:	4606      	mov	r6, r0
 80059b2:	460c      	mov	r4, r1
 80059b4:	d507      	bpl.n	80059c6 <__smakebuf_r+0x1c>
 80059b6:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80059ba:	6023      	str	r3, [r4, #0]
 80059bc:	6123      	str	r3, [r4, #16]
 80059be:	2301      	movs	r3, #1
 80059c0:	6163      	str	r3, [r4, #20]
 80059c2:	b003      	add	sp, #12
 80059c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80059c6:	466a      	mov	r2, sp
 80059c8:	ab01      	add	r3, sp, #4
 80059ca:	f7ff ffc9 	bl	8005960 <__swhatbuf_r>
 80059ce:	9f00      	ldr	r7, [sp, #0]
 80059d0:	4605      	mov	r5, r0
 80059d2:	4639      	mov	r1, r7
 80059d4:	4630      	mov	r0, r6
 80059d6:	f7ff fbbd 	bl	8005154 <_malloc_r>
 80059da:	b948      	cbnz	r0, 80059f0 <__smakebuf_r+0x46>
 80059dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80059e0:	059a      	lsls	r2, r3, #22
 80059e2:	d4ee      	bmi.n	80059c2 <__smakebuf_r+0x18>
 80059e4:	f023 0303 	bic.w	r3, r3, #3
 80059e8:	f043 0302 	orr.w	r3, r3, #2
 80059ec:	81a3      	strh	r3, [r4, #12]
 80059ee:	e7e2      	b.n	80059b6 <__smakebuf_r+0xc>
 80059f0:	89a3      	ldrh	r3, [r4, #12]
 80059f2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80059f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80059fa:	81a3      	strh	r3, [r4, #12]
 80059fc:	9b01      	ldr	r3, [sp, #4]
 80059fe:	6020      	str	r0, [r4, #0]
 8005a00:	b15b      	cbz	r3, 8005a1a <__smakebuf_r+0x70>
 8005a02:	4630      	mov	r0, r6
 8005a04:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005a08:	f000 f852 	bl	8005ab0 <_isatty_r>
 8005a0c:	b128      	cbz	r0, 8005a1a <__smakebuf_r+0x70>
 8005a0e:	89a3      	ldrh	r3, [r4, #12]
 8005a10:	f023 0303 	bic.w	r3, r3, #3
 8005a14:	f043 0301 	orr.w	r3, r3, #1
 8005a18:	81a3      	strh	r3, [r4, #12]
 8005a1a:	89a3      	ldrh	r3, [r4, #12]
 8005a1c:	431d      	orrs	r5, r3
 8005a1e:	81a5      	strh	r5, [r4, #12]
 8005a20:	e7cf      	b.n	80059c2 <__smakebuf_r+0x18>

08005a22 <_putc_r>:
 8005a22:	b570      	push	{r4, r5, r6, lr}
 8005a24:	460d      	mov	r5, r1
 8005a26:	4614      	mov	r4, r2
 8005a28:	4606      	mov	r6, r0
 8005a2a:	b118      	cbz	r0, 8005a34 <_putc_r+0x12>
 8005a2c:	6a03      	ldr	r3, [r0, #32]
 8005a2e:	b90b      	cbnz	r3, 8005a34 <_putc_r+0x12>
 8005a30:	f7ff f924 	bl	8004c7c <__sinit>
 8005a34:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005a36:	07d8      	lsls	r0, r3, #31
 8005a38:	d405      	bmi.n	8005a46 <_putc_r+0x24>
 8005a3a:	89a3      	ldrh	r3, [r4, #12]
 8005a3c:	0599      	lsls	r1, r3, #22
 8005a3e:	d402      	bmi.n	8005a46 <_putc_r+0x24>
 8005a40:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005a42:	f7ff fb1a 	bl	800507a <__retarget_lock_acquire_recursive>
 8005a46:	68a3      	ldr	r3, [r4, #8]
 8005a48:	3b01      	subs	r3, #1
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	60a3      	str	r3, [r4, #8]
 8005a4e:	da05      	bge.n	8005a5c <_putc_r+0x3a>
 8005a50:	69a2      	ldr	r2, [r4, #24]
 8005a52:	4293      	cmp	r3, r2
 8005a54:	db12      	blt.n	8005a7c <_putc_r+0x5a>
 8005a56:	b2eb      	uxtb	r3, r5
 8005a58:	2b0a      	cmp	r3, #10
 8005a5a:	d00f      	beq.n	8005a7c <_putc_r+0x5a>
 8005a5c:	6823      	ldr	r3, [r4, #0]
 8005a5e:	1c5a      	adds	r2, r3, #1
 8005a60:	6022      	str	r2, [r4, #0]
 8005a62:	701d      	strb	r5, [r3, #0]
 8005a64:	b2ed      	uxtb	r5, r5
 8005a66:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005a68:	07da      	lsls	r2, r3, #31
 8005a6a:	d405      	bmi.n	8005a78 <_putc_r+0x56>
 8005a6c:	89a3      	ldrh	r3, [r4, #12]
 8005a6e:	059b      	lsls	r3, r3, #22
 8005a70:	d402      	bmi.n	8005a78 <_putc_r+0x56>
 8005a72:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005a74:	f7ff fb02 	bl	800507c <__retarget_lock_release_recursive>
 8005a78:	4628      	mov	r0, r5
 8005a7a:	bd70      	pop	{r4, r5, r6, pc}
 8005a7c:	4629      	mov	r1, r5
 8005a7e:	4622      	mov	r2, r4
 8005a80:	4630      	mov	r0, r6
 8005a82:	f7ff f9ec 	bl	8004e5e <__swbuf_r>
 8005a86:	4605      	mov	r5, r0
 8005a88:	e7ed      	b.n	8005a66 <_putc_r+0x44>
	...

08005a8c <_fstat_r>:
 8005a8c:	b538      	push	{r3, r4, r5, lr}
 8005a8e:	2300      	movs	r3, #0
 8005a90:	4d06      	ldr	r5, [pc, #24]	@ (8005aac <_fstat_r+0x20>)
 8005a92:	4604      	mov	r4, r0
 8005a94:	4608      	mov	r0, r1
 8005a96:	4611      	mov	r1, r2
 8005a98:	602b      	str	r3, [r5, #0]
 8005a9a:	f7fb f935 	bl	8000d08 <_fstat>
 8005a9e:	1c43      	adds	r3, r0, #1
 8005aa0:	d102      	bne.n	8005aa8 <_fstat_r+0x1c>
 8005aa2:	682b      	ldr	r3, [r5, #0]
 8005aa4:	b103      	cbz	r3, 8005aa8 <_fstat_r+0x1c>
 8005aa6:	6023      	str	r3, [r4, #0]
 8005aa8:	bd38      	pop	{r3, r4, r5, pc}
 8005aaa:	bf00      	nop
 8005aac:	20000404 	.word	0x20000404

08005ab0 <_isatty_r>:
 8005ab0:	b538      	push	{r3, r4, r5, lr}
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	4d05      	ldr	r5, [pc, #20]	@ (8005acc <_isatty_r+0x1c>)
 8005ab6:	4604      	mov	r4, r0
 8005ab8:	4608      	mov	r0, r1
 8005aba:	602b      	str	r3, [r5, #0]
 8005abc:	f7fb f933 	bl	8000d26 <_isatty>
 8005ac0:	1c43      	adds	r3, r0, #1
 8005ac2:	d102      	bne.n	8005aca <_isatty_r+0x1a>
 8005ac4:	682b      	ldr	r3, [r5, #0]
 8005ac6:	b103      	cbz	r3, 8005aca <_isatty_r+0x1a>
 8005ac8:	6023      	str	r3, [r4, #0]
 8005aca:	bd38      	pop	{r3, r4, r5, pc}
 8005acc:	20000404 	.word	0x20000404

08005ad0 <_sbrk_r>:
 8005ad0:	b538      	push	{r3, r4, r5, lr}
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	4d05      	ldr	r5, [pc, #20]	@ (8005aec <_sbrk_r+0x1c>)
 8005ad6:	4604      	mov	r4, r0
 8005ad8:	4608      	mov	r0, r1
 8005ada:	602b      	str	r3, [r5, #0]
 8005adc:	f7fb f93a 	bl	8000d54 <_sbrk>
 8005ae0:	1c43      	adds	r3, r0, #1
 8005ae2:	d102      	bne.n	8005aea <_sbrk_r+0x1a>
 8005ae4:	682b      	ldr	r3, [r5, #0]
 8005ae6:	b103      	cbz	r3, 8005aea <_sbrk_r+0x1a>
 8005ae8:	6023      	str	r3, [r4, #0]
 8005aea:	bd38      	pop	{r3, r4, r5, pc}
 8005aec:	20000404 	.word	0x20000404

08005af0 <memchr>:
 8005af0:	4603      	mov	r3, r0
 8005af2:	b510      	push	{r4, lr}
 8005af4:	b2c9      	uxtb	r1, r1
 8005af6:	4402      	add	r2, r0
 8005af8:	4293      	cmp	r3, r2
 8005afa:	4618      	mov	r0, r3
 8005afc:	d101      	bne.n	8005b02 <memchr+0x12>
 8005afe:	2000      	movs	r0, #0
 8005b00:	e003      	b.n	8005b0a <memchr+0x1a>
 8005b02:	7804      	ldrb	r4, [r0, #0]
 8005b04:	3301      	adds	r3, #1
 8005b06:	428c      	cmp	r4, r1
 8005b08:	d1f6      	bne.n	8005af8 <memchr+0x8>
 8005b0a:	bd10      	pop	{r4, pc}

08005b0c <_init>:
 8005b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b0e:	bf00      	nop
 8005b10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b12:	bc08      	pop	{r3}
 8005b14:	469e      	mov	lr, r3
 8005b16:	4770      	bx	lr

08005b18 <_fini>:
 8005b18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b1a:	bf00      	nop
 8005b1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b1e:	bc08      	pop	{r3}
 8005b20:	469e      	mov	lr, r3
 8005b22:	4770      	bx	lr
