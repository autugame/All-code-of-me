
freertos_dynamic_tasks.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002a48  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  08002b58  08002b58  00003b58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002ba4  08002ba4  00004014  2**0
                  CONTENTS
  4 .ARM          00000000  08002ba4  08002ba4  00004014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002ba4  08002ba4  00004014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002ba4  08002ba4  00003ba4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002ba8  08002ba8  00003ba8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  08002bac  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004990  20000014  08002bc0  00004014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200049a4  08002bc0  000049a4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00004014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000aaab  00000000  00000000  0000403d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020e7  00000000  00000000  0000eae8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ca0  00000000  00000000  00010bd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009bc  00000000  00000000  00011870  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018b84  00000000  00000000  0001222c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000df7f  00000000  00000000  0002adb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00094fc0  00000000  00000000  00038d2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cdcef  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000332c  00000000  00000000  000cdd34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  000d1060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000014 	.word	0x20000014
 800012c:	00000000 	.word	0x00000000
 8000130:	08002b40 	.word	0x08002b40

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000018 	.word	0x20000018
 800014c:	08002b40 	.word	0x08002b40

08000150 <freertos_dynamic_tasks_init>:
TaskHandle_t start_task1_handle;

void start_task(const void *pv_parameters);
void start_task1(const void *pv_parameters);

void freertos_dynamic_tasks_init() {
 8000150:	b580      	push	{r7, lr}
 8000152:	b082      	sub	sp, #8
 8000154:	af02      	add	r7, sp, #8
	//1.Create a startup task.
	xTaskCreate((TaskFunction_t) start_task, "start_task", stack_depth, NULL, (UBaseType_t) priority, &start_task_handle);
 8000156:	4b07      	ldr	r3, [pc, #28]	@ (8000174 <freertos_dynamic_tasks_init+0x24>)
 8000158:	9301      	str	r3, [sp, #4]
 800015a:	2301      	movs	r3, #1
 800015c:	9300      	str	r3, [sp, #0]
 800015e:	2300      	movs	r3, #0
 8000160:	2280      	movs	r2, #128	@ 0x80
 8000162:	4905      	ldr	r1, [pc, #20]	@ (8000178 <freertos_dynamic_tasks_init+0x28>)
 8000164:	4805      	ldr	r0, [pc, #20]	@ (800017c <freertos_dynamic_tasks_init+0x2c>)
 8000166:	f001 fec4 	bl	8001ef2 <xTaskCreate>
	//2.Start the scheduler.
	vTaskStartScheduler();
 800016a:	f002 f8eb 	bl	8002344 <vTaskStartScheduler>
}
 800016e:	bf00      	nop
 8000170:	46bd      	mov	sp, r7
 8000172:	bd80      	pop	{r7, pc}
 8000174:	20000030 	.word	0x20000030
 8000178:	08002b58 	.word	0x08002b58
 800017c:	08000181 	.word	0x08000181

08000180 <start_task>:

void start_task(const void *pv_parameters) {
 8000180:	b580      	push	{r7, lr}
 8000182:	b084      	sub	sp, #16
 8000184:	af02      	add	r7, sp, #8
 8000186:	6078      	str	r0, [r7, #4]
	taskENTER_CRITICAL();
 8000188:	f001 fb96 	bl	80018b8 <vPortEnterCritical>
	xTaskCreate((TaskFunction_t) start_task1, "start_task1", stack_depth, NULL, (UBaseType_t) priority, &start_task1_handle);
 800018c:	4b09      	ldr	r3, [pc, #36]	@ (80001b4 <start_task+0x34>)
 800018e:	9301      	str	r3, [sp, #4]
 8000190:	2301      	movs	r3, #1
 8000192:	9300      	str	r3, [sp, #0]
 8000194:	2300      	movs	r3, #0
 8000196:	2280      	movs	r2, #128	@ 0x80
 8000198:	4907      	ldr	r1, [pc, #28]	@ (80001b8 <start_task+0x38>)
 800019a:	4808      	ldr	r0, [pc, #32]	@ (80001bc <start_task+0x3c>)
 800019c:	f001 fea9 	bl	8001ef2 <xTaskCreate>
	//Delete the init task.
	vTaskDelete(NULL);
 80001a0:	2000      	movs	r0, #0
 80001a2:	f001 ffd1 	bl	8002148 <vTaskDelete>
	taskEXIT_CRITICAL();
 80001a6:	f001 fba1 	bl	80018ec <vPortExitCritical>
}
 80001aa:	bf00      	nop
 80001ac:	3708      	adds	r7, #8
 80001ae:	46bd      	mov	sp, r7
 80001b0:	bd80      	pop	{r7, pc}
 80001b2:	bf00      	nop
 80001b4:	20000034 	.word	0x20000034
 80001b8:	08002b64 	.word	0x08002b64
 80001bc:	080001c1 	.word	0x080001c1

080001c0 <start_task1>:

void start_task1(const void *pv_parameters) {
 80001c0:	b580      	push	{r7, lr}
 80001c2:	b082      	sub	sp, #8
 80001c4:	af00      	add	r7, sp, #0
 80001c6:	6078      	str	r0, [r7, #4]
	while (1) {
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80001c8:	2200      	movs	r2, #0
 80001ca:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80001ce:	4809      	ldr	r0, [pc, #36]	@ (80001f4 <start_task1+0x34>)
 80001d0:	f000 fc54 	bl	8000a7c <HAL_GPIO_WritePin>
		vTaskDelay(500);
 80001d4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80001d8:	f002 f846 	bl	8002268 <vTaskDelay>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80001dc:	2201      	movs	r2, #1
 80001de:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80001e2:	4804      	ldr	r0, [pc, #16]	@ (80001f4 <start_task1+0x34>)
 80001e4:	f000 fc4a 	bl	8000a7c <HAL_GPIO_WritePin>
		vTaskDelay(500);
 80001e8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80001ec:	f002 f83c 	bl	8002268 <vTaskDelay>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80001f0:	bf00      	nop
 80001f2:	e7e9      	b.n	80001c8 <start_task1+0x8>
 80001f4:	40011000 	.word	0x40011000

080001f8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80001f8:	b580      	push	{r7, lr}
 80001fa:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80001fc:	f000 f9a8 	bl	8000550 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000200:	f000 f806 	bl	8000210 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000204:	f000 f840 	bl	8000288 <MX_GPIO_Init>
	/* USER CODE BEGIN 2 */
	freertos_dynamic_tasks_init();
 8000208:	f7ff ffa2 	bl	8000150 <freertos_dynamic_tasks_init>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 800020c:	bf00      	nop
 800020e:	e7fd      	b.n	800020c <main+0x14>

08000210 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000210:	b580      	push	{r7, lr}
 8000212:	b090      	sub	sp, #64	@ 0x40
 8000214:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000216:	f107 0318 	add.w	r3, r7, #24
 800021a:	2228      	movs	r2, #40	@ 0x28
 800021c:	2100      	movs	r1, #0
 800021e:	4618      	mov	r0, r3
 8000220:	f002 fc62 	bl	8002ae8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000224:	1d3b      	adds	r3, r7, #4
 8000226:	2200      	movs	r2, #0
 8000228:	601a      	str	r2, [r3, #0]
 800022a:	605a      	str	r2, [r3, #4]
 800022c:	609a      	str	r2, [r3, #8]
 800022e:	60da      	str	r2, [r3, #12]
 8000230:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000232:	2302      	movs	r3, #2
 8000234:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000236:	2301      	movs	r3, #1
 8000238:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800023a:	2310      	movs	r3, #16
 800023c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800023e:	2300      	movs	r3, #0
 8000240:	637b      	str	r3, [r7, #52]	@ 0x34
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000242:	f107 0318 	add.w	r3, r7, #24
 8000246:	4618      	mov	r0, r3
 8000248:	f000 fc30 	bl	8000aac <HAL_RCC_OscConfig>
 800024c:	4603      	mov	r3, r0
 800024e:	2b00      	cmp	r3, #0
 8000250:	d001      	beq.n	8000256 <SystemClock_Config+0x46>
		Error_Handler();
 8000252:	f000 f86b 	bl	800032c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000256:	230f      	movs	r3, #15
 8000258:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800025a:	2300      	movs	r3, #0
 800025c:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800025e:	2300      	movs	r3, #0
 8000260:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000262:	2300      	movs	r3, #0
 8000264:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000266:	2300      	movs	r3, #0
 8000268:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 800026a:	1d3b      	adds	r3, r7, #4
 800026c:	2100      	movs	r1, #0
 800026e:	4618      	mov	r0, r3
 8000270:	f000 fe9e 	bl	8000fb0 <HAL_RCC_ClockConfig>
 8000274:	4603      	mov	r3, r0
 8000276:	2b00      	cmp	r3, #0
 8000278:	d001      	beq.n	800027e <SystemClock_Config+0x6e>
		Error_Handler();
 800027a:	f000 f857 	bl	800032c <Error_Handler>
	}
}
 800027e:	bf00      	nop
 8000280:	3740      	adds	r7, #64	@ 0x40
 8000282:	46bd      	mov	sp, r7
 8000284:	bd80      	pop	{r7, pc}
	...

08000288 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000288:	b580      	push	{r7, lr}
 800028a:	b086      	sub	sp, #24
 800028c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800028e:	f107 0308 	add.w	r3, r7, #8
 8000292:	2200      	movs	r2, #0
 8000294:	601a      	str	r2, [r3, #0]
 8000296:	605a      	str	r2, [r3, #4]
 8000298:	609a      	str	r2, [r3, #8]
 800029a:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800029c:	4b18      	ldr	r3, [pc, #96]	@ (8000300 <MX_GPIO_Init+0x78>)
 800029e:	699b      	ldr	r3, [r3, #24]
 80002a0:	4a17      	ldr	r2, [pc, #92]	@ (8000300 <MX_GPIO_Init+0x78>)
 80002a2:	f043 0310 	orr.w	r3, r3, #16
 80002a6:	6193      	str	r3, [r2, #24]
 80002a8:	4b15      	ldr	r3, [pc, #84]	@ (8000300 <MX_GPIO_Init+0x78>)
 80002aa:	699b      	ldr	r3, [r3, #24]
 80002ac:	f003 0310 	and.w	r3, r3, #16
 80002b0:	607b      	str	r3, [r7, #4]
 80002b2:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80002b4:	4b12      	ldr	r3, [pc, #72]	@ (8000300 <MX_GPIO_Init+0x78>)
 80002b6:	699b      	ldr	r3, [r3, #24]
 80002b8:	4a11      	ldr	r2, [pc, #68]	@ (8000300 <MX_GPIO_Init+0x78>)
 80002ba:	f043 0304 	orr.w	r3, r3, #4
 80002be:	6193      	str	r3, [r2, #24]
 80002c0:	4b0f      	ldr	r3, [pc, #60]	@ (8000300 <MX_GPIO_Init+0x78>)
 80002c2:	699b      	ldr	r3, [r3, #24]
 80002c4:	f003 0304 	and.w	r3, r3, #4
 80002c8:	603b      	str	r3, [r7, #0]
 80002ca:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80002cc:	2201      	movs	r2, #1
 80002ce:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80002d2:	480c      	ldr	r0, [pc, #48]	@ (8000304 <MX_GPIO_Init+0x7c>)
 80002d4:	f000 fbd2 	bl	8000a7c <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PC13 */
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 80002d8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80002dc:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80002de:	2311      	movs	r3, #17
 80002e0:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80002e2:	2301      	movs	r3, #1
 80002e4:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002e6:	2302      	movs	r3, #2
 80002e8:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80002ea:	f107 0308 	add.w	r3, r7, #8
 80002ee:	4619      	mov	r1, r3
 80002f0:	4804      	ldr	r0, [pc, #16]	@ (8000304 <MX_GPIO_Init+0x7c>)
 80002f2:	f000 fa3f 	bl	8000774 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 80002f6:	bf00      	nop
 80002f8:	3718      	adds	r7, #24
 80002fa:	46bd      	mov	sp, r7
 80002fc:	bd80      	pop	{r7, pc}
 80002fe:	bf00      	nop
 8000300:	40021000 	.word	0x40021000
 8000304:	40011000 	.word	0x40011000

08000308 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000308:	b580      	push	{r7, lr}
 800030a:	b082      	sub	sp, #8
 800030c:	af00      	add	r7, sp, #0
 800030e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM4) {
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	681b      	ldr	r3, [r3, #0]
 8000314:	4a04      	ldr	r2, [pc, #16]	@ (8000328 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000316:	4293      	cmp	r3, r2
 8000318:	d101      	bne.n	800031e <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 800031a:	f000 f92f 	bl	800057c <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 800031e:	bf00      	nop
 8000320:	3708      	adds	r7, #8
 8000322:	46bd      	mov	sp, r7
 8000324:	bd80      	pop	{r7, pc}
 8000326:	bf00      	nop
 8000328:	40000800 	.word	0x40000800

0800032c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800032c:	b480      	push	{r7}
 800032e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000330:	b672      	cpsid	i
}
 8000332:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000334:	bf00      	nop
 8000336:	e7fd      	b.n	8000334 <Error_Handler+0x8>

08000338 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000338:	b480      	push	{r7}
 800033a:	b085      	sub	sp, #20
 800033c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800033e:	4b15      	ldr	r3, [pc, #84]	@ (8000394 <HAL_MspInit+0x5c>)
 8000340:	699b      	ldr	r3, [r3, #24]
 8000342:	4a14      	ldr	r2, [pc, #80]	@ (8000394 <HAL_MspInit+0x5c>)
 8000344:	f043 0301 	orr.w	r3, r3, #1
 8000348:	6193      	str	r3, [r2, #24]
 800034a:	4b12      	ldr	r3, [pc, #72]	@ (8000394 <HAL_MspInit+0x5c>)
 800034c:	699b      	ldr	r3, [r3, #24]
 800034e:	f003 0301 	and.w	r3, r3, #1
 8000352:	60bb      	str	r3, [r7, #8]
 8000354:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000356:	4b0f      	ldr	r3, [pc, #60]	@ (8000394 <HAL_MspInit+0x5c>)
 8000358:	69db      	ldr	r3, [r3, #28]
 800035a:	4a0e      	ldr	r2, [pc, #56]	@ (8000394 <HAL_MspInit+0x5c>)
 800035c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000360:	61d3      	str	r3, [r2, #28]
 8000362:	4b0c      	ldr	r3, [pc, #48]	@ (8000394 <HAL_MspInit+0x5c>)
 8000364:	69db      	ldr	r3, [r3, #28]
 8000366:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800036a:	607b      	str	r3, [r7, #4]
 800036c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800036e:	4b0a      	ldr	r3, [pc, #40]	@ (8000398 <HAL_MspInit+0x60>)
 8000370:	685b      	ldr	r3, [r3, #4]
 8000372:	60fb      	str	r3, [r7, #12]
 8000374:	68fb      	ldr	r3, [r7, #12]
 8000376:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800037a:	60fb      	str	r3, [r7, #12]
 800037c:	68fb      	ldr	r3, [r7, #12]
 800037e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000382:	60fb      	str	r3, [r7, #12]
 8000384:	4a04      	ldr	r2, [pc, #16]	@ (8000398 <HAL_MspInit+0x60>)
 8000386:	68fb      	ldr	r3, [r7, #12]
 8000388:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800038a:	bf00      	nop
 800038c:	3714      	adds	r7, #20
 800038e:	46bd      	mov	sp, r7
 8000390:	bc80      	pop	{r7}
 8000392:	4770      	bx	lr
 8000394:	40021000 	.word	0x40021000
 8000398:	40010000 	.word	0x40010000

0800039c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800039c:	b580      	push	{r7, lr}
 800039e:	b08e      	sub	sp, #56	@ 0x38
 80003a0:	af00      	add	r7, sp, #0
 80003a2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80003a4:	2300      	movs	r3, #0
 80003a6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80003a8:	2300      	movs	r3, #0
 80003aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80003ac:	2300      	movs	r3, #0
 80003ae:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 80003b2:	4b34      	ldr	r3, [pc, #208]	@ (8000484 <HAL_InitTick+0xe8>)
 80003b4:	69db      	ldr	r3, [r3, #28]
 80003b6:	4a33      	ldr	r2, [pc, #204]	@ (8000484 <HAL_InitTick+0xe8>)
 80003b8:	f043 0304 	orr.w	r3, r3, #4
 80003bc:	61d3      	str	r3, [r2, #28]
 80003be:	4b31      	ldr	r3, [pc, #196]	@ (8000484 <HAL_InitTick+0xe8>)
 80003c0:	69db      	ldr	r3, [r3, #28]
 80003c2:	f003 0304 	and.w	r3, r3, #4
 80003c6:	60fb      	str	r3, [r7, #12]
 80003c8:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80003ca:	f107 0210 	add.w	r2, r7, #16
 80003ce:	f107 0314 	add.w	r3, r7, #20
 80003d2:	4611      	mov	r1, r2
 80003d4:	4618      	mov	r0, r3
 80003d6:	f000 ff47 	bl	8001268 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80003da:	6a3b      	ldr	r3, [r7, #32]
 80003dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80003de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	d103      	bne.n	80003ec <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80003e4:	f000 ff2c 	bl	8001240 <HAL_RCC_GetPCLK1Freq>
 80003e8:	6378      	str	r0, [r7, #52]	@ 0x34
 80003ea:	e004      	b.n	80003f6 <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80003ec:	f000 ff28 	bl	8001240 <HAL_RCC_GetPCLK1Freq>
 80003f0:	4603      	mov	r3, r0
 80003f2:	005b      	lsls	r3, r3, #1
 80003f4:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80003f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80003f8:	4a23      	ldr	r2, [pc, #140]	@ (8000488 <HAL_InitTick+0xec>)
 80003fa:	fba2 2303 	umull	r2, r3, r2, r3
 80003fe:	0c9b      	lsrs	r3, r3, #18
 8000400:	3b01      	subs	r3, #1
 8000402:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8000404:	4b21      	ldr	r3, [pc, #132]	@ (800048c <HAL_InitTick+0xf0>)
 8000406:	4a22      	ldr	r2, [pc, #136]	@ (8000490 <HAL_InitTick+0xf4>)
 8000408:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 800040a:	4b20      	ldr	r3, [pc, #128]	@ (800048c <HAL_InitTick+0xf0>)
 800040c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000410:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8000412:	4a1e      	ldr	r2, [pc, #120]	@ (800048c <HAL_InitTick+0xf0>)
 8000414:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000416:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8000418:	4b1c      	ldr	r3, [pc, #112]	@ (800048c <HAL_InitTick+0xf0>)
 800041a:	2200      	movs	r2, #0
 800041c:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800041e:	4b1b      	ldr	r3, [pc, #108]	@ (800048c <HAL_InitTick+0xf0>)
 8000420:	2200      	movs	r2, #0
 8000422:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000424:	4b19      	ldr	r3, [pc, #100]	@ (800048c <HAL_InitTick+0xf0>)
 8000426:	2200      	movs	r2, #0
 8000428:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 800042a:	4818      	ldr	r0, [pc, #96]	@ (800048c <HAL_InitTick+0xf0>)
 800042c:	f000 ff6a 	bl	8001304 <HAL_TIM_Base_Init>
 8000430:	4603      	mov	r3, r0
 8000432:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000436:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800043a:	2b00      	cmp	r3, #0
 800043c:	d11b      	bne.n	8000476 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 800043e:	4813      	ldr	r0, [pc, #76]	@ (800048c <HAL_InitTick+0xf0>)
 8000440:	f000 ffb8 	bl	80013b4 <HAL_TIM_Base_Start_IT>
 8000444:	4603      	mov	r3, r0
 8000446:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 800044a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800044e:	2b00      	cmp	r3, #0
 8000450:	d111      	bne.n	8000476 <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000452:	201e      	movs	r0, #30
 8000454:	f000 f97f 	bl	8000756 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	2b0f      	cmp	r3, #15
 800045c:	d808      	bhi.n	8000470 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 800045e:	2200      	movs	r2, #0
 8000460:	6879      	ldr	r1, [r7, #4]
 8000462:	201e      	movs	r0, #30
 8000464:	f000 f95b 	bl	800071e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000468:	4a0a      	ldr	r2, [pc, #40]	@ (8000494 <HAL_InitTick+0xf8>)
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	6013      	str	r3, [r2, #0]
 800046e:	e002      	b.n	8000476 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8000470:	2301      	movs	r3, #1
 8000472:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000476:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 800047a:	4618      	mov	r0, r3
 800047c:	3738      	adds	r7, #56	@ 0x38
 800047e:	46bd      	mov	sp, r7
 8000480:	bd80      	pop	{r7, pc}
 8000482:	bf00      	nop
 8000484:	40021000 	.word	0x40021000
 8000488:	431bde83 	.word	0x431bde83
 800048c:	20000038 	.word	0x20000038
 8000490:	40000800 	.word	0x40000800
 8000494:	20000004 	.word	0x20000004

08000498 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000498:	b480      	push	{r7}
 800049a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800049c:	bf00      	nop
 800049e:	e7fd      	b.n	800049c <NMI_Handler+0x4>

080004a0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004a0:	b480      	push	{r7}
 80004a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004a4:	bf00      	nop
 80004a6:	e7fd      	b.n	80004a4 <HardFault_Handler+0x4>

080004a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004a8:	b480      	push	{r7}
 80004aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004ac:	bf00      	nop
 80004ae:	e7fd      	b.n	80004ac <MemManage_Handler+0x4>

080004b0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004b0:	b480      	push	{r7}
 80004b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004b4:	bf00      	nop
 80004b6:	e7fd      	b.n	80004b4 <BusFault_Handler+0x4>

080004b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004b8:	b480      	push	{r7}
 80004ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004bc:	bf00      	nop
 80004be:	e7fd      	b.n	80004bc <UsageFault_Handler+0x4>

080004c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004c0:	b480      	push	{r7}
 80004c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004c4:	bf00      	nop
 80004c6:	46bd      	mov	sp, r7
 80004c8:	bc80      	pop	{r7}
 80004ca:	4770      	bx	lr

080004cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80004d0:	f002 fa6a 	bl	80029a8 <xTaskGetSchedulerState>
 80004d4:	4603      	mov	r3, r0
 80004d6:	2b01      	cmp	r3, #1
 80004d8:	d001      	beq.n	80004de <SysTick_Handler+0x12>
	  xPortSysTickHandler();
 80004da:	f001 fa45 	bl	8001968 <xPortSysTickHandler>
  }
  /* USER CODE END SysTick_IRQn 1 */
}
 80004de:	bf00      	nop
 80004e0:	bd80      	pop	{r7, pc}
	...

080004e4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80004e8:	4802      	ldr	r0, [pc, #8]	@ (80004f4 <TIM4_IRQHandler+0x10>)
 80004ea:	f000 ffb5 	bl	8001458 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80004ee:	bf00      	nop
 80004f0:	bd80      	pop	{r7, pc}
 80004f2:	bf00      	nop
 80004f4:	20000038 	.word	0x20000038

080004f8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80004f8:	b480      	push	{r7}
 80004fa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80004fc:	bf00      	nop
 80004fe:	46bd      	mov	sp, r7
 8000500:	bc80      	pop	{r7}
 8000502:	4770      	bx	lr

08000504 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000504:	f7ff fff8 	bl	80004f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000508:	480b      	ldr	r0, [pc, #44]	@ (8000538 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800050a:	490c      	ldr	r1, [pc, #48]	@ (800053c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800050c:	4a0c      	ldr	r2, [pc, #48]	@ (8000540 <LoopFillZerobss+0x16>)
  movs r3, #0
 800050e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000510:	e002      	b.n	8000518 <LoopCopyDataInit>

08000512 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000512:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000514:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000516:	3304      	adds	r3, #4

08000518 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000518:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800051a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800051c:	d3f9      	bcc.n	8000512 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800051e:	4a09      	ldr	r2, [pc, #36]	@ (8000544 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000520:	4c09      	ldr	r4, [pc, #36]	@ (8000548 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000522:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000524:	e001      	b.n	800052a <LoopFillZerobss>

08000526 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000526:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000528:	3204      	adds	r2, #4

0800052a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800052a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800052c:	d3fb      	bcc.n	8000526 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800052e:	f002 fae3 	bl	8002af8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000532:	f7ff fe61 	bl	80001f8 <main>
  bx lr
 8000536:	4770      	bx	lr
  ldr r0, =_sdata
 8000538:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800053c:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000540:	08002bac 	.word	0x08002bac
  ldr r2, =_sbss
 8000544:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000548:	200049a4 	.word	0x200049a4

0800054c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800054c:	e7fe      	b.n	800054c <ADC1_2_IRQHandler>
	...

08000550 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000554:	4b08      	ldr	r3, [pc, #32]	@ (8000578 <HAL_Init+0x28>)
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	4a07      	ldr	r2, [pc, #28]	@ (8000578 <HAL_Init+0x28>)
 800055a:	f043 0310 	orr.w	r3, r3, #16
 800055e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000560:	2003      	movs	r0, #3
 8000562:	f000 f8d1 	bl	8000708 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000566:	2001      	movs	r0, #1
 8000568:	f7ff ff18 	bl	800039c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800056c:	f7ff fee4 	bl	8000338 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000570:	2300      	movs	r3, #0
}
 8000572:	4618      	mov	r0, r3
 8000574:	bd80      	pop	{r7, pc}
 8000576:	bf00      	nop
 8000578:	40022000 	.word	0x40022000

0800057c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800057c:	b480      	push	{r7}
 800057e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000580:	4b05      	ldr	r3, [pc, #20]	@ (8000598 <HAL_IncTick+0x1c>)
 8000582:	781b      	ldrb	r3, [r3, #0]
 8000584:	461a      	mov	r2, r3
 8000586:	4b05      	ldr	r3, [pc, #20]	@ (800059c <HAL_IncTick+0x20>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	4413      	add	r3, r2
 800058c:	4a03      	ldr	r2, [pc, #12]	@ (800059c <HAL_IncTick+0x20>)
 800058e:	6013      	str	r3, [r2, #0]
}
 8000590:	bf00      	nop
 8000592:	46bd      	mov	sp, r7
 8000594:	bc80      	pop	{r7}
 8000596:	4770      	bx	lr
 8000598:	20000008 	.word	0x20000008
 800059c:	20000080 	.word	0x20000080

080005a0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005a0:	b480      	push	{r7}
 80005a2:	af00      	add	r7, sp, #0
  return uwTick;
 80005a4:	4b02      	ldr	r3, [pc, #8]	@ (80005b0 <HAL_GetTick+0x10>)
 80005a6:	681b      	ldr	r3, [r3, #0]
}
 80005a8:	4618      	mov	r0, r3
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bc80      	pop	{r7}
 80005ae:	4770      	bx	lr
 80005b0:	20000080 	.word	0x20000080

080005b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005b4:	b480      	push	{r7}
 80005b6:	b085      	sub	sp, #20
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	f003 0307 	and.w	r3, r3, #7
 80005c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005c4:	4b0c      	ldr	r3, [pc, #48]	@ (80005f8 <__NVIC_SetPriorityGrouping+0x44>)
 80005c6:	68db      	ldr	r3, [r3, #12]
 80005c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005ca:	68ba      	ldr	r2, [r7, #8]
 80005cc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80005d0:	4013      	ands	r3, r2
 80005d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80005d4:	68fb      	ldr	r3, [r7, #12]
 80005d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80005d8:	68bb      	ldr	r3, [r7, #8]
 80005da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80005dc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80005e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80005e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80005e6:	4a04      	ldr	r2, [pc, #16]	@ (80005f8 <__NVIC_SetPriorityGrouping+0x44>)
 80005e8:	68bb      	ldr	r3, [r7, #8]
 80005ea:	60d3      	str	r3, [r2, #12]
}
 80005ec:	bf00      	nop
 80005ee:	3714      	adds	r7, #20
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bc80      	pop	{r7}
 80005f4:	4770      	bx	lr
 80005f6:	bf00      	nop
 80005f8:	e000ed00 	.word	0xe000ed00

080005fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80005fc:	b480      	push	{r7}
 80005fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000600:	4b04      	ldr	r3, [pc, #16]	@ (8000614 <__NVIC_GetPriorityGrouping+0x18>)
 8000602:	68db      	ldr	r3, [r3, #12]
 8000604:	0a1b      	lsrs	r3, r3, #8
 8000606:	f003 0307 	and.w	r3, r3, #7
}
 800060a:	4618      	mov	r0, r3
 800060c:	46bd      	mov	sp, r7
 800060e:	bc80      	pop	{r7}
 8000610:	4770      	bx	lr
 8000612:	bf00      	nop
 8000614:	e000ed00 	.word	0xe000ed00

08000618 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000618:	b480      	push	{r7}
 800061a:	b083      	sub	sp, #12
 800061c:	af00      	add	r7, sp, #0
 800061e:	4603      	mov	r3, r0
 8000620:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000622:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000626:	2b00      	cmp	r3, #0
 8000628:	db0b      	blt.n	8000642 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800062a:	79fb      	ldrb	r3, [r7, #7]
 800062c:	f003 021f 	and.w	r2, r3, #31
 8000630:	4906      	ldr	r1, [pc, #24]	@ (800064c <__NVIC_EnableIRQ+0x34>)
 8000632:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000636:	095b      	lsrs	r3, r3, #5
 8000638:	2001      	movs	r0, #1
 800063a:	fa00 f202 	lsl.w	r2, r0, r2
 800063e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000642:	bf00      	nop
 8000644:	370c      	adds	r7, #12
 8000646:	46bd      	mov	sp, r7
 8000648:	bc80      	pop	{r7}
 800064a:	4770      	bx	lr
 800064c:	e000e100 	.word	0xe000e100

08000650 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000650:	b480      	push	{r7}
 8000652:	b083      	sub	sp, #12
 8000654:	af00      	add	r7, sp, #0
 8000656:	4603      	mov	r3, r0
 8000658:	6039      	str	r1, [r7, #0]
 800065a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800065c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000660:	2b00      	cmp	r3, #0
 8000662:	db0a      	blt.n	800067a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000664:	683b      	ldr	r3, [r7, #0]
 8000666:	b2da      	uxtb	r2, r3
 8000668:	490c      	ldr	r1, [pc, #48]	@ (800069c <__NVIC_SetPriority+0x4c>)
 800066a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800066e:	0112      	lsls	r2, r2, #4
 8000670:	b2d2      	uxtb	r2, r2
 8000672:	440b      	add	r3, r1
 8000674:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000678:	e00a      	b.n	8000690 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800067a:	683b      	ldr	r3, [r7, #0]
 800067c:	b2da      	uxtb	r2, r3
 800067e:	4908      	ldr	r1, [pc, #32]	@ (80006a0 <__NVIC_SetPriority+0x50>)
 8000680:	79fb      	ldrb	r3, [r7, #7]
 8000682:	f003 030f 	and.w	r3, r3, #15
 8000686:	3b04      	subs	r3, #4
 8000688:	0112      	lsls	r2, r2, #4
 800068a:	b2d2      	uxtb	r2, r2
 800068c:	440b      	add	r3, r1
 800068e:	761a      	strb	r2, [r3, #24]
}
 8000690:	bf00      	nop
 8000692:	370c      	adds	r7, #12
 8000694:	46bd      	mov	sp, r7
 8000696:	bc80      	pop	{r7}
 8000698:	4770      	bx	lr
 800069a:	bf00      	nop
 800069c:	e000e100 	.word	0xe000e100
 80006a0:	e000ed00 	.word	0xe000ed00

080006a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006a4:	b480      	push	{r7}
 80006a6:	b089      	sub	sp, #36	@ 0x24
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	60f8      	str	r0, [r7, #12]
 80006ac:	60b9      	str	r1, [r7, #8]
 80006ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006b0:	68fb      	ldr	r3, [r7, #12]
 80006b2:	f003 0307 	and.w	r3, r3, #7
 80006b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006b8:	69fb      	ldr	r3, [r7, #28]
 80006ba:	f1c3 0307 	rsb	r3, r3, #7
 80006be:	2b04      	cmp	r3, #4
 80006c0:	bf28      	it	cs
 80006c2:	2304      	movcs	r3, #4
 80006c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006c6:	69fb      	ldr	r3, [r7, #28]
 80006c8:	3304      	adds	r3, #4
 80006ca:	2b06      	cmp	r3, #6
 80006cc:	d902      	bls.n	80006d4 <NVIC_EncodePriority+0x30>
 80006ce:	69fb      	ldr	r3, [r7, #28]
 80006d0:	3b03      	subs	r3, #3
 80006d2:	e000      	b.n	80006d6 <NVIC_EncodePriority+0x32>
 80006d4:	2300      	movs	r3, #0
 80006d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006d8:	f04f 32ff 	mov.w	r2, #4294967295
 80006dc:	69bb      	ldr	r3, [r7, #24]
 80006de:	fa02 f303 	lsl.w	r3, r2, r3
 80006e2:	43da      	mvns	r2, r3
 80006e4:	68bb      	ldr	r3, [r7, #8]
 80006e6:	401a      	ands	r2, r3
 80006e8:	697b      	ldr	r3, [r7, #20]
 80006ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006ec:	f04f 31ff 	mov.w	r1, #4294967295
 80006f0:	697b      	ldr	r3, [r7, #20]
 80006f2:	fa01 f303 	lsl.w	r3, r1, r3
 80006f6:	43d9      	mvns	r1, r3
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006fc:	4313      	orrs	r3, r2
         );
}
 80006fe:	4618      	mov	r0, r3
 8000700:	3724      	adds	r7, #36	@ 0x24
 8000702:	46bd      	mov	sp, r7
 8000704:	bc80      	pop	{r7}
 8000706:	4770      	bx	lr

08000708 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b082      	sub	sp, #8
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000710:	6878      	ldr	r0, [r7, #4]
 8000712:	f7ff ff4f 	bl	80005b4 <__NVIC_SetPriorityGrouping>
}
 8000716:	bf00      	nop
 8000718:	3708      	adds	r7, #8
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}

0800071e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800071e:	b580      	push	{r7, lr}
 8000720:	b086      	sub	sp, #24
 8000722:	af00      	add	r7, sp, #0
 8000724:	4603      	mov	r3, r0
 8000726:	60b9      	str	r1, [r7, #8]
 8000728:	607a      	str	r2, [r7, #4]
 800072a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800072c:	2300      	movs	r3, #0
 800072e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000730:	f7ff ff64 	bl	80005fc <__NVIC_GetPriorityGrouping>
 8000734:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000736:	687a      	ldr	r2, [r7, #4]
 8000738:	68b9      	ldr	r1, [r7, #8]
 800073a:	6978      	ldr	r0, [r7, #20]
 800073c:	f7ff ffb2 	bl	80006a4 <NVIC_EncodePriority>
 8000740:	4602      	mov	r2, r0
 8000742:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000746:	4611      	mov	r1, r2
 8000748:	4618      	mov	r0, r3
 800074a:	f7ff ff81 	bl	8000650 <__NVIC_SetPriority>
}
 800074e:	bf00      	nop
 8000750:	3718      	adds	r7, #24
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}

08000756 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000756:	b580      	push	{r7, lr}
 8000758:	b082      	sub	sp, #8
 800075a:	af00      	add	r7, sp, #0
 800075c:	4603      	mov	r3, r0
 800075e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000760:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000764:	4618      	mov	r0, r3
 8000766:	f7ff ff57 	bl	8000618 <__NVIC_EnableIRQ>
}
 800076a:	bf00      	nop
 800076c:	3708      	adds	r7, #8
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}
	...

08000774 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000774:	b480      	push	{r7}
 8000776:	b08b      	sub	sp, #44	@ 0x2c
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
 800077c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800077e:	2300      	movs	r3, #0
 8000780:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000782:	2300      	movs	r3, #0
 8000784:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000786:	e169      	b.n	8000a5c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000788:	2201      	movs	r2, #1
 800078a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800078c:	fa02 f303 	lsl.w	r3, r2, r3
 8000790:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000792:	683b      	ldr	r3, [r7, #0]
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	69fa      	ldr	r2, [r7, #28]
 8000798:	4013      	ands	r3, r2
 800079a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800079c:	69ba      	ldr	r2, [r7, #24]
 800079e:	69fb      	ldr	r3, [r7, #28]
 80007a0:	429a      	cmp	r2, r3
 80007a2:	f040 8158 	bne.w	8000a56 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80007a6:	683b      	ldr	r3, [r7, #0]
 80007a8:	685b      	ldr	r3, [r3, #4]
 80007aa:	4a9a      	ldr	r2, [pc, #616]	@ (8000a14 <HAL_GPIO_Init+0x2a0>)
 80007ac:	4293      	cmp	r3, r2
 80007ae:	d05e      	beq.n	800086e <HAL_GPIO_Init+0xfa>
 80007b0:	4a98      	ldr	r2, [pc, #608]	@ (8000a14 <HAL_GPIO_Init+0x2a0>)
 80007b2:	4293      	cmp	r3, r2
 80007b4:	d875      	bhi.n	80008a2 <HAL_GPIO_Init+0x12e>
 80007b6:	4a98      	ldr	r2, [pc, #608]	@ (8000a18 <HAL_GPIO_Init+0x2a4>)
 80007b8:	4293      	cmp	r3, r2
 80007ba:	d058      	beq.n	800086e <HAL_GPIO_Init+0xfa>
 80007bc:	4a96      	ldr	r2, [pc, #600]	@ (8000a18 <HAL_GPIO_Init+0x2a4>)
 80007be:	4293      	cmp	r3, r2
 80007c0:	d86f      	bhi.n	80008a2 <HAL_GPIO_Init+0x12e>
 80007c2:	4a96      	ldr	r2, [pc, #600]	@ (8000a1c <HAL_GPIO_Init+0x2a8>)
 80007c4:	4293      	cmp	r3, r2
 80007c6:	d052      	beq.n	800086e <HAL_GPIO_Init+0xfa>
 80007c8:	4a94      	ldr	r2, [pc, #592]	@ (8000a1c <HAL_GPIO_Init+0x2a8>)
 80007ca:	4293      	cmp	r3, r2
 80007cc:	d869      	bhi.n	80008a2 <HAL_GPIO_Init+0x12e>
 80007ce:	4a94      	ldr	r2, [pc, #592]	@ (8000a20 <HAL_GPIO_Init+0x2ac>)
 80007d0:	4293      	cmp	r3, r2
 80007d2:	d04c      	beq.n	800086e <HAL_GPIO_Init+0xfa>
 80007d4:	4a92      	ldr	r2, [pc, #584]	@ (8000a20 <HAL_GPIO_Init+0x2ac>)
 80007d6:	4293      	cmp	r3, r2
 80007d8:	d863      	bhi.n	80008a2 <HAL_GPIO_Init+0x12e>
 80007da:	4a92      	ldr	r2, [pc, #584]	@ (8000a24 <HAL_GPIO_Init+0x2b0>)
 80007dc:	4293      	cmp	r3, r2
 80007de:	d046      	beq.n	800086e <HAL_GPIO_Init+0xfa>
 80007e0:	4a90      	ldr	r2, [pc, #576]	@ (8000a24 <HAL_GPIO_Init+0x2b0>)
 80007e2:	4293      	cmp	r3, r2
 80007e4:	d85d      	bhi.n	80008a2 <HAL_GPIO_Init+0x12e>
 80007e6:	2b12      	cmp	r3, #18
 80007e8:	d82a      	bhi.n	8000840 <HAL_GPIO_Init+0xcc>
 80007ea:	2b12      	cmp	r3, #18
 80007ec:	d859      	bhi.n	80008a2 <HAL_GPIO_Init+0x12e>
 80007ee:	a201      	add	r2, pc, #4	@ (adr r2, 80007f4 <HAL_GPIO_Init+0x80>)
 80007f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007f4:	0800086f 	.word	0x0800086f
 80007f8:	08000849 	.word	0x08000849
 80007fc:	0800085b 	.word	0x0800085b
 8000800:	0800089d 	.word	0x0800089d
 8000804:	080008a3 	.word	0x080008a3
 8000808:	080008a3 	.word	0x080008a3
 800080c:	080008a3 	.word	0x080008a3
 8000810:	080008a3 	.word	0x080008a3
 8000814:	080008a3 	.word	0x080008a3
 8000818:	080008a3 	.word	0x080008a3
 800081c:	080008a3 	.word	0x080008a3
 8000820:	080008a3 	.word	0x080008a3
 8000824:	080008a3 	.word	0x080008a3
 8000828:	080008a3 	.word	0x080008a3
 800082c:	080008a3 	.word	0x080008a3
 8000830:	080008a3 	.word	0x080008a3
 8000834:	080008a3 	.word	0x080008a3
 8000838:	08000851 	.word	0x08000851
 800083c:	08000865 	.word	0x08000865
 8000840:	4a79      	ldr	r2, [pc, #484]	@ (8000a28 <HAL_GPIO_Init+0x2b4>)
 8000842:	4293      	cmp	r3, r2
 8000844:	d013      	beq.n	800086e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000846:	e02c      	b.n	80008a2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000848:	683b      	ldr	r3, [r7, #0]
 800084a:	68db      	ldr	r3, [r3, #12]
 800084c:	623b      	str	r3, [r7, #32]
          break;
 800084e:	e029      	b.n	80008a4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000850:	683b      	ldr	r3, [r7, #0]
 8000852:	68db      	ldr	r3, [r3, #12]
 8000854:	3304      	adds	r3, #4
 8000856:	623b      	str	r3, [r7, #32]
          break;
 8000858:	e024      	b.n	80008a4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800085a:	683b      	ldr	r3, [r7, #0]
 800085c:	68db      	ldr	r3, [r3, #12]
 800085e:	3308      	adds	r3, #8
 8000860:	623b      	str	r3, [r7, #32]
          break;
 8000862:	e01f      	b.n	80008a4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000864:	683b      	ldr	r3, [r7, #0]
 8000866:	68db      	ldr	r3, [r3, #12]
 8000868:	330c      	adds	r3, #12
 800086a:	623b      	str	r3, [r7, #32]
          break;
 800086c:	e01a      	b.n	80008a4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800086e:	683b      	ldr	r3, [r7, #0]
 8000870:	689b      	ldr	r3, [r3, #8]
 8000872:	2b00      	cmp	r3, #0
 8000874:	d102      	bne.n	800087c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000876:	2304      	movs	r3, #4
 8000878:	623b      	str	r3, [r7, #32]
          break;
 800087a:	e013      	b.n	80008a4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800087c:	683b      	ldr	r3, [r7, #0]
 800087e:	689b      	ldr	r3, [r3, #8]
 8000880:	2b01      	cmp	r3, #1
 8000882:	d105      	bne.n	8000890 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000884:	2308      	movs	r3, #8
 8000886:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	69fa      	ldr	r2, [r7, #28]
 800088c:	611a      	str	r2, [r3, #16]
          break;
 800088e:	e009      	b.n	80008a4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000890:	2308      	movs	r3, #8
 8000892:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	69fa      	ldr	r2, [r7, #28]
 8000898:	615a      	str	r2, [r3, #20]
          break;
 800089a:	e003      	b.n	80008a4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800089c:	2300      	movs	r3, #0
 800089e:	623b      	str	r3, [r7, #32]
          break;
 80008a0:	e000      	b.n	80008a4 <HAL_GPIO_Init+0x130>
          break;
 80008a2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80008a4:	69bb      	ldr	r3, [r7, #24]
 80008a6:	2bff      	cmp	r3, #255	@ 0xff
 80008a8:	d801      	bhi.n	80008ae <HAL_GPIO_Init+0x13a>
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	e001      	b.n	80008b2 <HAL_GPIO_Init+0x13e>
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	3304      	adds	r3, #4
 80008b2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80008b4:	69bb      	ldr	r3, [r7, #24]
 80008b6:	2bff      	cmp	r3, #255	@ 0xff
 80008b8:	d802      	bhi.n	80008c0 <HAL_GPIO_Init+0x14c>
 80008ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80008bc:	009b      	lsls	r3, r3, #2
 80008be:	e002      	b.n	80008c6 <HAL_GPIO_Init+0x152>
 80008c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80008c2:	3b08      	subs	r3, #8
 80008c4:	009b      	lsls	r3, r3, #2
 80008c6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80008c8:	697b      	ldr	r3, [r7, #20]
 80008ca:	681a      	ldr	r2, [r3, #0]
 80008cc:	210f      	movs	r1, #15
 80008ce:	693b      	ldr	r3, [r7, #16]
 80008d0:	fa01 f303 	lsl.w	r3, r1, r3
 80008d4:	43db      	mvns	r3, r3
 80008d6:	401a      	ands	r2, r3
 80008d8:	6a39      	ldr	r1, [r7, #32]
 80008da:	693b      	ldr	r3, [r7, #16]
 80008dc:	fa01 f303 	lsl.w	r3, r1, r3
 80008e0:	431a      	orrs	r2, r3
 80008e2:	697b      	ldr	r3, [r7, #20]
 80008e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80008e6:	683b      	ldr	r3, [r7, #0]
 80008e8:	685b      	ldr	r3, [r3, #4]
 80008ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	f000 80b1 	beq.w	8000a56 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80008f4:	4b4d      	ldr	r3, [pc, #308]	@ (8000a2c <HAL_GPIO_Init+0x2b8>)
 80008f6:	699b      	ldr	r3, [r3, #24]
 80008f8:	4a4c      	ldr	r2, [pc, #304]	@ (8000a2c <HAL_GPIO_Init+0x2b8>)
 80008fa:	f043 0301 	orr.w	r3, r3, #1
 80008fe:	6193      	str	r3, [r2, #24]
 8000900:	4b4a      	ldr	r3, [pc, #296]	@ (8000a2c <HAL_GPIO_Init+0x2b8>)
 8000902:	699b      	ldr	r3, [r3, #24]
 8000904:	f003 0301 	and.w	r3, r3, #1
 8000908:	60bb      	str	r3, [r7, #8]
 800090a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800090c:	4a48      	ldr	r2, [pc, #288]	@ (8000a30 <HAL_GPIO_Init+0x2bc>)
 800090e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000910:	089b      	lsrs	r3, r3, #2
 8000912:	3302      	adds	r3, #2
 8000914:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000918:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800091a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800091c:	f003 0303 	and.w	r3, r3, #3
 8000920:	009b      	lsls	r3, r3, #2
 8000922:	220f      	movs	r2, #15
 8000924:	fa02 f303 	lsl.w	r3, r2, r3
 8000928:	43db      	mvns	r3, r3
 800092a:	68fa      	ldr	r2, [r7, #12]
 800092c:	4013      	ands	r3, r2
 800092e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	4a40      	ldr	r2, [pc, #256]	@ (8000a34 <HAL_GPIO_Init+0x2c0>)
 8000934:	4293      	cmp	r3, r2
 8000936:	d013      	beq.n	8000960 <HAL_GPIO_Init+0x1ec>
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	4a3f      	ldr	r2, [pc, #252]	@ (8000a38 <HAL_GPIO_Init+0x2c4>)
 800093c:	4293      	cmp	r3, r2
 800093e:	d00d      	beq.n	800095c <HAL_GPIO_Init+0x1e8>
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	4a3e      	ldr	r2, [pc, #248]	@ (8000a3c <HAL_GPIO_Init+0x2c8>)
 8000944:	4293      	cmp	r3, r2
 8000946:	d007      	beq.n	8000958 <HAL_GPIO_Init+0x1e4>
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	4a3d      	ldr	r2, [pc, #244]	@ (8000a40 <HAL_GPIO_Init+0x2cc>)
 800094c:	4293      	cmp	r3, r2
 800094e:	d101      	bne.n	8000954 <HAL_GPIO_Init+0x1e0>
 8000950:	2303      	movs	r3, #3
 8000952:	e006      	b.n	8000962 <HAL_GPIO_Init+0x1ee>
 8000954:	2304      	movs	r3, #4
 8000956:	e004      	b.n	8000962 <HAL_GPIO_Init+0x1ee>
 8000958:	2302      	movs	r3, #2
 800095a:	e002      	b.n	8000962 <HAL_GPIO_Init+0x1ee>
 800095c:	2301      	movs	r3, #1
 800095e:	e000      	b.n	8000962 <HAL_GPIO_Init+0x1ee>
 8000960:	2300      	movs	r3, #0
 8000962:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000964:	f002 0203 	and.w	r2, r2, #3
 8000968:	0092      	lsls	r2, r2, #2
 800096a:	4093      	lsls	r3, r2
 800096c:	68fa      	ldr	r2, [r7, #12]
 800096e:	4313      	orrs	r3, r2
 8000970:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000972:	492f      	ldr	r1, [pc, #188]	@ (8000a30 <HAL_GPIO_Init+0x2bc>)
 8000974:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000976:	089b      	lsrs	r3, r3, #2
 8000978:	3302      	adds	r3, #2
 800097a:	68fa      	ldr	r2, [r7, #12]
 800097c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000980:	683b      	ldr	r3, [r7, #0]
 8000982:	685b      	ldr	r3, [r3, #4]
 8000984:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000988:	2b00      	cmp	r3, #0
 800098a:	d006      	beq.n	800099a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800098c:	4b2d      	ldr	r3, [pc, #180]	@ (8000a44 <HAL_GPIO_Init+0x2d0>)
 800098e:	689a      	ldr	r2, [r3, #8]
 8000990:	492c      	ldr	r1, [pc, #176]	@ (8000a44 <HAL_GPIO_Init+0x2d0>)
 8000992:	69bb      	ldr	r3, [r7, #24]
 8000994:	4313      	orrs	r3, r2
 8000996:	608b      	str	r3, [r1, #8]
 8000998:	e006      	b.n	80009a8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800099a:	4b2a      	ldr	r3, [pc, #168]	@ (8000a44 <HAL_GPIO_Init+0x2d0>)
 800099c:	689a      	ldr	r2, [r3, #8]
 800099e:	69bb      	ldr	r3, [r7, #24]
 80009a0:	43db      	mvns	r3, r3
 80009a2:	4928      	ldr	r1, [pc, #160]	@ (8000a44 <HAL_GPIO_Init+0x2d0>)
 80009a4:	4013      	ands	r3, r2
 80009a6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80009a8:	683b      	ldr	r3, [r7, #0]
 80009aa:	685b      	ldr	r3, [r3, #4]
 80009ac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d006      	beq.n	80009c2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80009b4:	4b23      	ldr	r3, [pc, #140]	@ (8000a44 <HAL_GPIO_Init+0x2d0>)
 80009b6:	68da      	ldr	r2, [r3, #12]
 80009b8:	4922      	ldr	r1, [pc, #136]	@ (8000a44 <HAL_GPIO_Init+0x2d0>)
 80009ba:	69bb      	ldr	r3, [r7, #24]
 80009bc:	4313      	orrs	r3, r2
 80009be:	60cb      	str	r3, [r1, #12]
 80009c0:	e006      	b.n	80009d0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80009c2:	4b20      	ldr	r3, [pc, #128]	@ (8000a44 <HAL_GPIO_Init+0x2d0>)
 80009c4:	68da      	ldr	r2, [r3, #12]
 80009c6:	69bb      	ldr	r3, [r7, #24]
 80009c8:	43db      	mvns	r3, r3
 80009ca:	491e      	ldr	r1, [pc, #120]	@ (8000a44 <HAL_GPIO_Init+0x2d0>)
 80009cc:	4013      	ands	r3, r2
 80009ce:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80009d0:	683b      	ldr	r3, [r7, #0]
 80009d2:	685b      	ldr	r3, [r3, #4]
 80009d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d006      	beq.n	80009ea <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80009dc:	4b19      	ldr	r3, [pc, #100]	@ (8000a44 <HAL_GPIO_Init+0x2d0>)
 80009de:	685a      	ldr	r2, [r3, #4]
 80009e0:	4918      	ldr	r1, [pc, #96]	@ (8000a44 <HAL_GPIO_Init+0x2d0>)
 80009e2:	69bb      	ldr	r3, [r7, #24]
 80009e4:	4313      	orrs	r3, r2
 80009e6:	604b      	str	r3, [r1, #4]
 80009e8:	e006      	b.n	80009f8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80009ea:	4b16      	ldr	r3, [pc, #88]	@ (8000a44 <HAL_GPIO_Init+0x2d0>)
 80009ec:	685a      	ldr	r2, [r3, #4]
 80009ee:	69bb      	ldr	r3, [r7, #24]
 80009f0:	43db      	mvns	r3, r3
 80009f2:	4914      	ldr	r1, [pc, #80]	@ (8000a44 <HAL_GPIO_Init+0x2d0>)
 80009f4:	4013      	ands	r3, r2
 80009f6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80009f8:	683b      	ldr	r3, [r7, #0]
 80009fa:	685b      	ldr	r3, [r3, #4]
 80009fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d021      	beq.n	8000a48 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000a04:	4b0f      	ldr	r3, [pc, #60]	@ (8000a44 <HAL_GPIO_Init+0x2d0>)
 8000a06:	681a      	ldr	r2, [r3, #0]
 8000a08:	490e      	ldr	r1, [pc, #56]	@ (8000a44 <HAL_GPIO_Init+0x2d0>)
 8000a0a:	69bb      	ldr	r3, [r7, #24]
 8000a0c:	4313      	orrs	r3, r2
 8000a0e:	600b      	str	r3, [r1, #0]
 8000a10:	e021      	b.n	8000a56 <HAL_GPIO_Init+0x2e2>
 8000a12:	bf00      	nop
 8000a14:	10320000 	.word	0x10320000
 8000a18:	10310000 	.word	0x10310000
 8000a1c:	10220000 	.word	0x10220000
 8000a20:	10210000 	.word	0x10210000
 8000a24:	10120000 	.word	0x10120000
 8000a28:	10110000 	.word	0x10110000
 8000a2c:	40021000 	.word	0x40021000
 8000a30:	40010000 	.word	0x40010000
 8000a34:	40010800 	.word	0x40010800
 8000a38:	40010c00 	.word	0x40010c00
 8000a3c:	40011000 	.word	0x40011000
 8000a40:	40011400 	.word	0x40011400
 8000a44:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000a48:	4b0b      	ldr	r3, [pc, #44]	@ (8000a78 <HAL_GPIO_Init+0x304>)
 8000a4a:	681a      	ldr	r2, [r3, #0]
 8000a4c:	69bb      	ldr	r3, [r7, #24]
 8000a4e:	43db      	mvns	r3, r3
 8000a50:	4909      	ldr	r1, [pc, #36]	@ (8000a78 <HAL_GPIO_Init+0x304>)
 8000a52:	4013      	ands	r3, r2
 8000a54:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000a56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a58:	3301      	adds	r3, #1
 8000a5a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a5c:	683b      	ldr	r3, [r7, #0]
 8000a5e:	681a      	ldr	r2, [r3, #0]
 8000a60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a62:	fa22 f303 	lsr.w	r3, r2, r3
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	f47f ae8e 	bne.w	8000788 <HAL_GPIO_Init+0x14>
  }
}
 8000a6c:	bf00      	nop
 8000a6e:	bf00      	nop
 8000a70:	372c      	adds	r7, #44	@ 0x2c
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bc80      	pop	{r7}
 8000a76:	4770      	bx	lr
 8000a78:	40010400 	.word	0x40010400

08000a7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	b083      	sub	sp, #12
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
 8000a84:	460b      	mov	r3, r1
 8000a86:	807b      	strh	r3, [r7, #2]
 8000a88:	4613      	mov	r3, r2
 8000a8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000a8c:	787b      	ldrb	r3, [r7, #1]
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d003      	beq.n	8000a9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000a92:	887a      	ldrh	r2, [r7, #2]
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000a98:	e003      	b.n	8000aa2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000a9a:	887b      	ldrh	r3, [r7, #2]
 8000a9c:	041a      	lsls	r2, r3, #16
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	611a      	str	r2, [r3, #16]
}
 8000aa2:	bf00      	nop
 8000aa4:	370c      	adds	r7, #12
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bc80      	pop	{r7}
 8000aaa:	4770      	bx	lr

08000aac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b086      	sub	sp, #24
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d101      	bne.n	8000abe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000aba:	2301      	movs	r3, #1
 8000abc:	e272      	b.n	8000fa4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	f003 0301 	and.w	r3, r3, #1
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	f000 8087 	beq.w	8000bda <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000acc:	4b92      	ldr	r3, [pc, #584]	@ (8000d18 <HAL_RCC_OscConfig+0x26c>)
 8000ace:	685b      	ldr	r3, [r3, #4]
 8000ad0:	f003 030c 	and.w	r3, r3, #12
 8000ad4:	2b04      	cmp	r3, #4
 8000ad6:	d00c      	beq.n	8000af2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000ad8:	4b8f      	ldr	r3, [pc, #572]	@ (8000d18 <HAL_RCC_OscConfig+0x26c>)
 8000ada:	685b      	ldr	r3, [r3, #4]
 8000adc:	f003 030c 	and.w	r3, r3, #12
 8000ae0:	2b08      	cmp	r3, #8
 8000ae2:	d112      	bne.n	8000b0a <HAL_RCC_OscConfig+0x5e>
 8000ae4:	4b8c      	ldr	r3, [pc, #560]	@ (8000d18 <HAL_RCC_OscConfig+0x26c>)
 8000ae6:	685b      	ldr	r3, [r3, #4]
 8000ae8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000aec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000af0:	d10b      	bne.n	8000b0a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000af2:	4b89      	ldr	r3, [pc, #548]	@ (8000d18 <HAL_RCC_OscConfig+0x26c>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d06c      	beq.n	8000bd8 <HAL_RCC_OscConfig+0x12c>
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	685b      	ldr	r3, [r3, #4]
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d168      	bne.n	8000bd8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000b06:	2301      	movs	r3, #1
 8000b08:	e24c      	b.n	8000fa4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	685b      	ldr	r3, [r3, #4]
 8000b0e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000b12:	d106      	bne.n	8000b22 <HAL_RCC_OscConfig+0x76>
 8000b14:	4b80      	ldr	r3, [pc, #512]	@ (8000d18 <HAL_RCC_OscConfig+0x26c>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	4a7f      	ldr	r2, [pc, #508]	@ (8000d18 <HAL_RCC_OscConfig+0x26c>)
 8000b1a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000b1e:	6013      	str	r3, [r2, #0]
 8000b20:	e02e      	b.n	8000b80 <HAL_RCC_OscConfig+0xd4>
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	685b      	ldr	r3, [r3, #4]
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d10c      	bne.n	8000b44 <HAL_RCC_OscConfig+0x98>
 8000b2a:	4b7b      	ldr	r3, [pc, #492]	@ (8000d18 <HAL_RCC_OscConfig+0x26c>)
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	4a7a      	ldr	r2, [pc, #488]	@ (8000d18 <HAL_RCC_OscConfig+0x26c>)
 8000b30:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000b34:	6013      	str	r3, [r2, #0]
 8000b36:	4b78      	ldr	r3, [pc, #480]	@ (8000d18 <HAL_RCC_OscConfig+0x26c>)
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	4a77      	ldr	r2, [pc, #476]	@ (8000d18 <HAL_RCC_OscConfig+0x26c>)
 8000b3c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000b40:	6013      	str	r3, [r2, #0]
 8000b42:	e01d      	b.n	8000b80 <HAL_RCC_OscConfig+0xd4>
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	685b      	ldr	r3, [r3, #4]
 8000b48:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000b4c:	d10c      	bne.n	8000b68 <HAL_RCC_OscConfig+0xbc>
 8000b4e:	4b72      	ldr	r3, [pc, #456]	@ (8000d18 <HAL_RCC_OscConfig+0x26c>)
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	4a71      	ldr	r2, [pc, #452]	@ (8000d18 <HAL_RCC_OscConfig+0x26c>)
 8000b54:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000b58:	6013      	str	r3, [r2, #0]
 8000b5a:	4b6f      	ldr	r3, [pc, #444]	@ (8000d18 <HAL_RCC_OscConfig+0x26c>)
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	4a6e      	ldr	r2, [pc, #440]	@ (8000d18 <HAL_RCC_OscConfig+0x26c>)
 8000b60:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000b64:	6013      	str	r3, [r2, #0]
 8000b66:	e00b      	b.n	8000b80 <HAL_RCC_OscConfig+0xd4>
 8000b68:	4b6b      	ldr	r3, [pc, #428]	@ (8000d18 <HAL_RCC_OscConfig+0x26c>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	4a6a      	ldr	r2, [pc, #424]	@ (8000d18 <HAL_RCC_OscConfig+0x26c>)
 8000b6e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000b72:	6013      	str	r3, [r2, #0]
 8000b74:	4b68      	ldr	r3, [pc, #416]	@ (8000d18 <HAL_RCC_OscConfig+0x26c>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	4a67      	ldr	r2, [pc, #412]	@ (8000d18 <HAL_RCC_OscConfig+0x26c>)
 8000b7a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000b7e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	685b      	ldr	r3, [r3, #4]
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d013      	beq.n	8000bb0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b88:	f7ff fd0a 	bl	80005a0 <HAL_GetTick>
 8000b8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b8e:	e008      	b.n	8000ba2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000b90:	f7ff fd06 	bl	80005a0 <HAL_GetTick>
 8000b94:	4602      	mov	r2, r0
 8000b96:	693b      	ldr	r3, [r7, #16]
 8000b98:	1ad3      	subs	r3, r2, r3
 8000b9a:	2b64      	cmp	r3, #100	@ 0x64
 8000b9c:	d901      	bls.n	8000ba2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000b9e:	2303      	movs	r3, #3
 8000ba0:	e200      	b.n	8000fa4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ba2:	4b5d      	ldr	r3, [pc, #372]	@ (8000d18 <HAL_RCC_OscConfig+0x26c>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d0f0      	beq.n	8000b90 <HAL_RCC_OscConfig+0xe4>
 8000bae:	e014      	b.n	8000bda <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000bb0:	f7ff fcf6 	bl	80005a0 <HAL_GetTick>
 8000bb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000bb6:	e008      	b.n	8000bca <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000bb8:	f7ff fcf2 	bl	80005a0 <HAL_GetTick>
 8000bbc:	4602      	mov	r2, r0
 8000bbe:	693b      	ldr	r3, [r7, #16]
 8000bc0:	1ad3      	subs	r3, r2, r3
 8000bc2:	2b64      	cmp	r3, #100	@ 0x64
 8000bc4:	d901      	bls.n	8000bca <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000bc6:	2303      	movs	r3, #3
 8000bc8:	e1ec      	b.n	8000fa4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000bca:	4b53      	ldr	r3, [pc, #332]	@ (8000d18 <HAL_RCC_OscConfig+0x26c>)
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d1f0      	bne.n	8000bb8 <HAL_RCC_OscConfig+0x10c>
 8000bd6:	e000      	b.n	8000bda <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000bd8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	f003 0302 	and.w	r3, r3, #2
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d063      	beq.n	8000cae <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000be6:	4b4c      	ldr	r3, [pc, #304]	@ (8000d18 <HAL_RCC_OscConfig+0x26c>)
 8000be8:	685b      	ldr	r3, [r3, #4]
 8000bea:	f003 030c 	and.w	r3, r3, #12
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d00b      	beq.n	8000c0a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000bf2:	4b49      	ldr	r3, [pc, #292]	@ (8000d18 <HAL_RCC_OscConfig+0x26c>)
 8000bf4:	685b      	ldr	r3, [r3, #4]
 8000bf6:	f003 030c 	and.w	r3, r3, #12
 8000bfa:	2b08      	cmp	r3, #8
 8000bfc:	d11c      	bne.n	8000c38 <HAL_RCC_OscConfig+0x18c>
 8000bfe:	4b46      	ldr	r3, [pc, #280]	@ (8000d18 <HAL_RCC_OscConfig+0x26c>)
 8000c00:	685b      	ldr	r3, [r3, #4]
 8000c02:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d116      	bne.n	8000c38 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c0a:	4b43      	ldr	r3, [pc, #268]	@ (8000d18 <HAL_RCC_OscConfig+0x26c>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	f003 0302 	and.w	r3, r3, #2
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d005      	beq.n	8000c22 <HAL_RCC_OscConfig+0x176>
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	691b      	ldr	r3, [r3, #16]
 8000c1a:	2b01      	cmp	r3, #1
 8000c1c:	d001      	beq.n	8000c22 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000c1e:	2301      	movs	r3, #1
 8000c20:	e1c0      	b.n	8000fa4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c22:	4b3d      	ldr	r3, [pc, #244]	@ (8000d18 <HAL_RCC_OscConfig+0x26c>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	695b      	ldr	r3, [r3, #20]
 8000c2e:	00db      	lsls	r3, r3, #3
 8000c30:	4939      	ldr	r1, [pc, #228]	@ (8000d18 <HAL_RCC_OscConfig+0x26c>)
 8000c32:	4313      	orrs	r3, r2
 8000c34:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c36:	e03a      	b.n	8000cae <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	691b      	ldr	r3, [r3, #16]
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d020      	beq.n	8000c82 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000c40:	4b36      	ldr	r3, [pc, #216]	@ (8000d1c <HAL_RCC_OscConfig+0x270>)
 8000c42:	2201      	movs	r2, #1
 8000c44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c46:	f7ff fcab 	bl	80005a0 <HAL_GetTick>
 8000c4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c4c:	e008      	b.n	8000c60 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000c4e:	f7ff fca7 	bl	80005a0 <HAL_GetTick>
 8000c52:	4602      	mov	r2, r0
 8000c54:	693b      	ldr	r3, [r7, #16]
 8000c56:	1ad3      	subs	r3, r2, r3
 8000c58:	2b02      	cmp	r3, #2
 8000c5a:	d901      	bls.n	8000c60 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000c5c:	2303      	movs	r3, #3
 8000c5e:	e1a1      	b.n	8000fa4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c60:	4b2d      	ldr	r3, [pc, #180]	@ (8000d18 <HAL_RCC_OscConfig+0x26c>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	f003 0302 	and.w	r3, r3, #2
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d0f0      	beq.n	8000c4e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c6c:	4b2a      	ldr	r3, [pc, #168]	@ (8000d18 <HAL_RCC_OscConfig+0x26c>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	695b      	ldr	r3, [r3, #20]
 8000c78:	00db      	lsls	r3, r3, #3
 8000c7a:	4927      	ldr	r1, [pc, #156]	@ (8000d18 <HAL_RCC_OscConfig+0x26c>)
 8000c7c:	4313      	orrs	r3, r2
 8000c7e:	600b      	str	r3, [r1, #0]
 8000c80:	e015      	b.n	8000cae <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000c82:	4b26      	ldr	r3, [pc, #152]	@ (8000d1c <HAL_RCC_OscConfig+0x270>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c88:	f7ff fc8a 	bl	80005a0 <HAL_GetTick>
 8000c8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000c8e:	e008      	b.n	8000ca2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000c90:	f7ff fc86 	bl	80005a0 <HAL_GetTick>
 8000c94:	4602      	mov	r2, r0
 8000c96:	693b      	ldr	r3, [r7, #16]
 8000c98:	1ad3      	subs	r3, r2, r3
 8000c9a:	2b02      	cmp	r3, #2
 8000c9c:	d901      	bls.n	8000ca2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000c9e:	2303      	movs	r3, #3
 8000ca0:	e180      	b.n	8000fa4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ca2:	4b1d      	ldr	r3, [pc, #116]	@ (8000d18 <HAL_RCC_OscConfig+0x26c>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	f003 0302 	and.w	r3, r3, #2
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d1f0      	bne.n	8000c90 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	f003 0308 	and.w	r3, r3, #8
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d03a      	beq.n	8000d30 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	699b      	ldr	r3, [r3, #24]
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d019      	beq.n	8000cf6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000cc2:	4b17      	ldr	r3, [pc, #92]	@ (8000d20 <HAL_RCC_OscConfig+0x274>)
 8000cc4:	2201      	movs	r2, #1
 8000cc6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000cc8:	f7ff fc6a 	bl	80005a0 <HAL_GetTick>
 8000ccc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000cce:	e008      	b.n	8000ce2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000cd0:	f7ff fc66 	bl	80005a0 <HAL_GetTick>
 8000cd4:	4602      	mov	r2, r0
 8000cd6:	693b      	ldr	r3, [r7, #16]
 8000cd8:	1ad3      	subs	r3, r2, r3
 8000cda:	2b02      	cmp	r3, #2
 8000cdc:	d901      	bls.n	8000ce2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000cde:	2303      	movs	r3, #3
 8000ce0:	e160      	b.n	8000fa4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000ce2:	4b0d      	ldr	r3, [pc, #52]	@ (8000d18 <HAL_RCC_OscConfig+0x26c>)
 8000ce4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ce6:	f003 0302 	and.w	r3, r3, #2
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d0f0      	beq.n	8000cd0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000cee:	2001      	movs	r0, #1
 8000cf0:	f000 faea 	bl	80012c8 <RCC_Delay>
 8000cf4:	e01c      	b.n	8000d30 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000cf6:	4b0a      	ldr	r3, [pc, #40]	@ (8000d20 <HAL_RCC_OscConfig+0x274>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000cfc:	f7ff fc50 	bl	80005a0 <HAL_GetTick>
 8000d00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d02:	e00f      	b.n	8000d24 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000d04:	f7ff fc4c 	bl	80005a0 <HAL_GetTick>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	693b      	ldr	r3, [r7, #16]
 8000d0c:	1ad3      	subs	r3, r2, r3
 8000d0e:	2b02      	cmp	r3, #2
 8000d10:	d908      	bls.n	8000d24 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000d12:	2303      	movs	r3, #3
 8000d14:	e146      	b.n	8000fa4 <HAL_RCC_OscConfig+0x4f8>
 8000d16:	bf00      	nop
 8000d18:	40021000 	.word	0x40021000
 8000d1c:	42420000 	.word	0x42420000
 8000d20:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d24:	4b92      	ldr	r3, [pc, #584]	@ (8000f70 <HAL_RCC_OscConfig+0x4c4>)
 8000d26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d28:	f003 0302 	and.w	r3, r3, #2
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d1e9      	bne.n	8000d04 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	f003 0304 	and.w	r3, r3, #4
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	f000 80a6 	beq.w	8000e8a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000d42:	4b8b      	ldr	r3, [pc, #556]	@ (8000f70 <HAL_RCC_OscConfig+0x4c4>)
 8000d44:	69db      	ldr	r3, [r3, #28]
 8000d46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d10d      	bne.n	8000d6a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000d4e:	4b88      	ldr	r3, [pc, #544]	@ (8000f70 <HAL_RCC_OscConfig+0x4c4>)
 8000d50:	69db      	ldr	r3, [r3, #28]
 8000d52:	4a87      	ldr	r2, [pc, #540]	@ (8000f70 <HAL_RCC_OscConfig+0x4c4>)
 8000d54:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d58:	61d3      	str	r3, [r2, #28]
 8000d5a:	4b85      	ldr	r3, [pc, #532]	@ (8000f70 <HAL_RCC_OscConfig+0x4c4>)
 8000d5c:	69db      	ldr	r3, [r3, #28]
 8000d5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d62:	60bb      	str	r3, [r7, #8]
 8000d64:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000d66:	2301      	movs	r3, #1
 8000d68:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d6a:	4b82      	ldr	r3, [pc, #520]	@ (8000f74 <HAL_RCC_OscConfig+0x4c8>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d118      	bne.n	8000da8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000d76:	4b7f      	ldr	r3, [pc, #508]	@ (8000f74 <HAL_RCC_OscConfig+0x4c8>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	4a7e      	ldr	r2, [pc, #504]	@ (8000f74 <HAL_RCC_OscConfig+0x4c8>)
 8000d7c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d80:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000d82:	f7ff fc0d 	bl	80005a0 <HAL_GetTick>
 8000d86:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d88:	e008      	b.n	8000d9c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000d8a:	f7ff fc09 	bl	80005a0 <HAL_GetTick>
 8000d8e:	4602      	mov	r2, r0
 8000d90:	693b      	ldr	r3, [r7, #16]
 8000d92:	1ad3      	subs	r3, r2, r3
 8000d94:	2b64      	cmp	r3, #100	@ 0x64
 8000d96:	d901      	bls.n	8000d9c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000d98:	2303      	movs	r3, #3
 8000d9a:	e103      	b.n	8000fa4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d9c:	4b75      	ldr	r3, [pc, #468]	@ (8000f74 <HAL_RCC_OscConfig+0x4c8>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d0f0      	beq.n	8000d8a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	68db      	ldr	r3, [r3, #12]
 8000dac:	2b01      	cmp	r3, #1
 8000dae:	d106      	bne.n	8000dbe <HAL_RCC_OscConfig+0x312>
 8000db0:	4b6f      	ldr	r3, [pc, #444]	@ (8000f70 <HAL_RCC_OscConfig+0x4c4>)
 8000db2:	6a1b      	ldr	r3, [r3, #32]
 8000db4:	4a6e      	ldr	r2, [pc, #440]	@ (8000f70 <HAL_RCC_OscConfig+0x4c4>)
 8000db6:	f043 0301 	orr.w	r3, r3, #1
 8000dba:	6213      	str	r3, [r2, #32]
 8000dbc:	e02d      	b.n	8000e1a <HAL_RCC_OscConfig+0x36e>
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	68db      	ldr	r3, [r3, #12]
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d10c      	bne.n	8000de0 <HAL_RCC_OscConfig+0x334>
 8000dc6:	4b6a      	ldr	r3, [pc, #424]	@ (8000f70 <HAL_RCC_OscConfig+0x4c4>)
 8000dc8:	6a1b      	ldr	r3, [r3, #32]
 8000dca:	4a69      	ldr	r2, [pc, #420]	@ (8000f70 <HAL_RCC_OscConfig+0x4c4>)
 8000dcc:	f023 0301 	bic.w	r3, r3, #1
 8000dd0:	6213      	str	r3, [r2, #32]
 8000dd2:	4b67      	ldr	r3, [pc, #412]	@ (8000f70 <HAL_RCC_OscConfig+0x4c4>)
 8000dd4:	6a1b      	ldr	r3, [r3, #32]
 8000dd6:	4a66      	ldr	r2, [pc, #408]	@ (8000f70 <HAL_RCC_OscConfig+0x4c4>)
 8000dd8:	f023 0304 	bic.w	r3, r3, #4
 8000ddc:	6213      	str	r3, [r2, #32]
 8000dde:	e01c      	b.n	8000e1a <HAL_RCC_OscConfig+0x36e>
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	68db      	ldr	r3, [r3, #12]
 8000de4:	2b05      	cmp	r3, #5
 8000de6:	d10c      	bne.n	8000e02 <HAL_RCC_OscConfig+0x356>
 8000de8:	4b61      	ldr	r3, [pc, #388]	@ (8000f70 <HAL_RCC_OscConfig+0x4c4>)
 8000dea:	6a1b      	ldr	r3, [r3, #32]
 8000dec:	4a60      	ldr	r2, [pc, #384]	@ (8000f70 <HAL_RCC_OscConfig+0x4c4>)
 8000dee:	f043 0304 	orr.w	r3, r3, #4
 8000df2:	6213      	str	r3, [r2, #32]
 8000df4:	4b5e      	ldr	r3, [pc, #376]	@ (8000f70 <HAL_RCC_OscConfig+0x4c4>)
 8000df6:	6a1b      	ldr	r3, [r3, #32]
 8000df8:	4a5d      	ldr	r2, [pc, #372]	@ (8000f70 <HAL_RCC_OscConfig+0x4c4>)
 8000dfa:	f043 0301 	orr.w	r3, r3, #1
 8000dfe:	6213      	str	r3, [r2, #32]
 8000e00:	e00b      	b.n	8000e1a <HAL_RCC_OscConfig+0x36e>
 8000e02:	4b5b      	ldr	r3, [pc, #364]	@ (8000f70 <HAL_RCC_OscConfig+0x4c4>)
 8000e04:	6a1b      	ldr	r3, [r3, #32]
 8000e06:	4a5a      	ldr	r2, [pc, #360]	@ (8000f70 <HAL_RCC_OscConfig+0x4c4>)
 8000e08:	f023 0301 	bic.w	r3, r3, #1
 8000e0c:	6213      	str	r3, [r2, #32]
 8000e0e:	4b58      	ldr	r3, [pc, #352]	@ (8000f70 <HAL_RCC_OscConfig+0x4c4>)
 8000e10:	6a1b      	ldr	r3, [r3, #32]
 8000e12:	4a57      	ldr	r2, [pc, #348]	@ (8000f70 <HAL_RCC_OscConfig+0x4c4>)
 8000e14:	f023 0304 	bic.w	r3, r3, #4
 8000e18:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	68db      	ldr	r3, [r3, #12]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d015      	beq.n	8000e4e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e22:	f7ff fbbd 	bl	80005a0 <HAL_GetTick>
 8000e26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e28:	e00a      	b.n	8000e40 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000e2a:	f7ff fbb9 	bl	80005a0 <HAL_GetTick>
 8000e2e:	4602      	mov	r2, r0
 8000e30:	693b      	ldr	r3, [r7, #16]
 8000e32:	1ad3      	subs	r3, r2, r3
 8000e34:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000e38:	4293      	cmp	r3, r2
 8000e3a:	d901      	bls.n	8000e40 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000e3c:	2303      	movs	r3, #3
 8000e3e:	e0b1      	b.n	8000fa4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e40:	4b4b      	ldr	r3, [pc, #300]	@ (8000f70 <HAL_RCC_OscConfig+0x4c4>)
 8000e42:	6a1b      	ldr	r3, [r3, #32]
 8000e44:	f003 0302 	and.w	r3, r3, #2
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d0ee      	beq.n	8000e2a <HAL_RCC_OscConfig+0x37e>
 8000e4c:	e014      	b.n	8000e78 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e4e:	f7ff fba7 	bl	80005a0 <HAL_GetTick>
 8000e52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000e54:	e00a      	b.n	8000e6c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000e56:	f7ff fba3 	bl	80005a0 <HAL_GetTick>
 8000e5a:	4602      	mov	r2, r0
 8000e5c:	693b      	ldr	r3, [r7, #16]
 8000e5e:	1ad3      	subs	r3, r2, r3
 8000e60:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000e64:	4293      	cmp	r3, r2
 8000e66:	d901      	bls.n	8000e6c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000e68:	2303      	movs	r3, #3
 8000e6a:	e09b      	b.n	8000fa4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000e6c:	4b40      	ldr	r3, [pc, #256]	@ (8000f70 <HAL_RCC_OscConfig+0x4c4>)
 8000e6e:	6a1b      	ldr	r3, [r3, #32]
 8000e70:	f003 0302 	and.w	r3, r3, #2
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d1ee      	bne.n	8000e56 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000e78:	7dfb      	ldrb	r3, [r7, #23]
 8000e7a:	2b01      	cmp	r3, #1
 8000e7c:	d105      	bne.n	8000e8a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000e7e:	4b3c      	ldr	r3, [pc, #240]	@ (8000f70 <HAL_RCC_OscConfig+0x4c4>)
 8000e80:	69db      	ldr	r3, [r3, #28]
 8000e82:	4a3b      	ldr	r2, [pc, #236]	@ (8000f70 <HAL_RCC_OscConfig+0x4c4>)
 8000e84:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8000e88:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	69db      	ldr	r3, [r3, #28]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	f000 8087 	beq.w	8000fa2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000e94:	4b36      	ldr	r3, [pc, #216]	@ (8000f70 <HAL_RCC_OscConfig+0x4c4>)
 8000e96:	685b      	ldr	r3, [r3, #4]
 8000e98:	f003 030c 	and.w	r3, r3, #12
 8000e9c:	2b08      	cmp	r3, #8
 8000e9e:	d061      	beq.n	8000f64 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	69db      	ldr	r3, [r3, #28]
 8000ea4:	2b02      	cmp	r3, #2
 8000ea6:	d146      	bne.n	8000f36 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000ea8:	4b33      	ldr	r3, [pc, #204]	@ (8000f78 <HAL_RCC_OscConfig+0x4cc>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000eae:	f7ff fb77 	bl	80005a0 <HAL_GetTick>
 8000eb2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000eb4:	e008      	b.n	8000ec8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000eb6:	f7ff fb73 	bl	80005a0 <HAL_GetTick>
 8000eba:	4602      	mov	r2, r0
 8000ebc:	693b      	ldr	r3, [r7, #16]
 8000ebe:	1ad3      	subs	r3, r2, r3
 8000ec0:	2b02      	cmp	r3, #2
 8000ec2:	d901      	bls.n	8000ec8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000ec4:	2303      	movs	r3, #3
 8000ec6:	e06d      	b.n	8000fa4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000ec8:	4b29      	ldr	r3, [pc, #164]	@ (8000f70 <HAL_RCC_OscConfig+0x4c4>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d1f0      	bne.n	8000eb6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	6a1b      	ldr	r3, [r3, #32]
 8000ed8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000edc:	d108      	bne.n	8000ef0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000ede:	4b24      	ldr	r3, [pc, #144]	@ (8000f70 <HAL_RCC_OscConfig+0x4c4>)
 8000ee0:	685b      	ldr	r3, [r3, #4]
 8000ee2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	689b      	ldr	r3, [r3, #8]
 8000eea:	4921      	ldr	r1, [pc, #132]	@ (8000f70 <HAL_RCC_OscConfig+0x4c4>)
 8000eec:	4313      	orrs	r3, r2
 8000eee:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000ef0:	4b1f      	ldr	r3, [pc, #124]	@ (8000f70 <HAL_RCC_OscConfig+0x4c4>)
 8000ef2:	685b      	ldr	r3, [r3, #4]
 8000ef4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	6a19      	ldr	r1, [r3, #32]
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f00:	430b      	orrs	r3, r1
 8000f02:	491b      	ldr	r1, [pc, #108]	@ (8000f70 <HAL_RCC_OscConfig+0x4c4>)
 8000f04:	4313      	orrs	r3, r2
 8000f06:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000f08:	4b1b      	ldr	r3, [pc, #108]	@ (8000f78 <HAL_RCC_OscConfig+0x4cc>)
 8000f0a:	2201      	movs	r2, #1
 8000f0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f0e:	f7ff fb47 	bl	80005a0 <HAL_GetTick>
 8000f12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000f14:	e008      	b.n	8000f28 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000f16:	f7ff fb43 	bl	80005a0 <HAL_GetTick>
 8000f1a:	4602      	mov	r2, r0
 8000f1c:	693b      	ldr	r3, [r7, #16]
 8000f1e:	1ad3      	subs	r3, r2, r3
 8000f20:	2b02      	cmp	r3, #2
 8000f22:	d901      	bls.n	8000f28 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8000f24:	2303      	movs	r3, #3
 8000f26:	e03d      	b.n	8000fa4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000f28:	4b11      	ldr	r3, [pc, #68]	@ (8000f70 <HAL_RCC_OscConfig+0x4c4>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d0f0      	beq.n	8000f16 <HAL_RCC_OscConfig+0x46a>
 8000f34:	e035      	b.n	8000fa2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f36:	4b10      	ldr	r3, [pc, #64]	@ (8000f78 <HAL_RCC_OscConfig+0x4cc>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f3c:	f7ff fb30 	bl	80005a0 <HAL_GetTick>
 8000f40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f42:	e008      	b.n	8000f56 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000f44:	f7ff fb2c 	bl	80005a0 <HAL_GetTick>
 8000f48:	4602      	mov	r2, r0
 8000f4a:	693b      	ldr	r3, [r7, #16]
 8000f4c:	1ad3      	subs	r3, r2, r3
 8000f4e:	2b02      	cmp	r3, #2
 8000f50:	d901      	bls.n	8000f56 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8000f52:	2303      	movs	r3, #3
 8000f54:	e026      	b.n	8000fa4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f56:	4b06      	ldr	r3, [pc, #24]	@ (8000f70 <HAL_RCC_OscConfig+0x4c4>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d1f0      	bne.n	8000f44 <HAL_RCC_OscConfig+0x498>
 8000f62:	e01e      	b.n	8000fa2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	69db      	ldr	r3, [r3, #28]
 8000f68:	2b01      	cmp	r3, #1
 8000f6a:	d107      	bne.n	8000f7c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8000f6c:	2301      	movs	r3, #1
 8000f6e:	e019      	b.n	8000fa4 <HAL_RCC_OscConfig+0x4f8>
 8000f70:	40021000 	.word	0x40021000
 8000f74:	40007000 	.word	0x40007000
 8000f78:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8000f7c:	4b0b      	ldr	r3, [pc, #44]	@ (8000fac <HAL_RCC_OscConfig+0x500>)
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	6a1b      	ldr	r3, [r3, #32]
 8000f8c:	429a      	cmp	r2, r3
 8000f8e:	d106      	bne.n	8000f9e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000f9a:	429a      	cmp	r2, r3
 8000f9c:	d001      	beq.n	8000fa2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	e000      	b.n	8000fa4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8000fa2:	2300      	movs	r3, #0
}
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	3718      	adds	r7, #24
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	40021000 	.word	0x40021000

08000fb0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b084      	sub	sp, #16
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
 8000fb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d101      	bne.n	8000fc4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	e0d0      	b.n	8001166 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000fc4:	4b6a      	ldr	r3, [pc, #424]	@ (8001170 <HAL_RCC_ClockConfig+0x1c0>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	f003 0307 	and.w	r3, r3, #7
 8000fcc:	683a      	ldr	r2, [r7, #0]
 8000fce:	429a      	cmp	r2, r3
 8000fd0:	d910      	bls.n	8000ff4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000fd2:	4b67      	ldr	r3, [pc, #412]	@ (8001170 <HAL_RCC_ClockConfig+0x1c0>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	f023 0207 	bic.w	r2, r3, #7
 8000fda:	4965      	ldr	r1, [pc, #404]	@ (8001170 <HAL_RCC_ClockConfig+0x1c0>)
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	4313      	orrs	r3, r2
 8000fe0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000fe2:	4b63      	ldr	r3, [pc, #396]	@ (8001170 <HAL_RCC_ClockConfig+0x1c0>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	f003 0307 	and.w	r3, r3, #7
 8000fea:	683a      	ldr	r2, [r7, #0]
 8000fec:	429a      	cmp	r2, r3
 8000fee:	d001      	beq.n	8000ff4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	e0b8      	b.n	8001166 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	f003 0302 	and.w	r3, r3, #2
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d020      	beq.n	8001042 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	f003 0304 	and.w	r3, r3, #4
 8001008:	2b00      	cmp	r3, #0
 800100a:	d005      	beq.n	8001018 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800100c:	4b59      	ldr	r3, [pc, #356]	@ (8001174 <HAL_RCC_ClockConfig+0x1c4>)
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	4a58      	ldr	r2, [pc, #352]	@ (8001174 <HAL_RCC_ClockConfig+0x1c4>)
 8001012:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001016:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	f003 0308 	and.w	r3, r3, #8
 8001020:	2b00      	cmp	r3, #0
 8001022:	d005      	beq.n	8001030 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001024:	4b53      	ldr	r3, [pc, #332]	@ (8001174 <HAL_RCC_ClockConfig+0x1c4>)
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	4a52      	ldr	r2, [pc, #328]	@ (8001174 <HAL_RCC_ClockConfig+0x1c4>)
 800102a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800102e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001030:	4b50      	ldr	r3, [pc, #320]	@ (8001174 <HAL_RCC_ClockConfig+0x1c4>)
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	689b      	ldr	r3, [r3, #8]
 800103c:	494d      	ldr	r1, [pc, #308]	@ (8001174 <HAL_RCC_ClockConfig+0x1c4>)
 800103e:	4313      	orrs	r3, r2
 8001040:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	f003 0301 	and.w	r3, r3, #1
 800104a:	2b00      	cmp	r3, #0
 800104c:	d040      	beq.n	80010d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	685b      	ldr	r3, [r3, #4]
 8001052:	2b01      	cmp	r3, #1
 8001054:	d107      	bne.n	8001066 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001056:	4b47      	ldr	r3, [pc, #284]	@ (8001174 <HAL_RCC_ClockConfig+0x1c4>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800105e:	2b00      	cmp	r3, #0
 8001060:	d115      	bne.n	800108e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001062:	2301      	movs	r3, #1
 8001064:	e07f      	b.n	8001166 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	2b02      	cmp	r3, #2
 800106c:	d107      	bne.n	800107e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800106e:	4b41      	ldr	r3, [pc, #260]	@ (8001174 <HAL_RCC_ClockConfig+0x1c4>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001076:	2b00      	cmp	r3, #0
 8001078:	d109      	bne.n	800108e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800107a:	2301      	movs	r3, #1
 800107c:	e073      	b.n	8001166 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800107e:	4b3d      	ldr	r3, [pc, #244]	@ (8001174 <HAL_RCC_ClockConfig+0x1c4>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	f003 0302 	and.w	r3, r3, #2
 8001086:	2b00      	cmp	r3, #0
 8001088:	d101      	bne.n	800108e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800108a:	2301      	movs	r3, #1
 800108c:	e06b      	b.n	8001166 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800108e:	4b39      	ldr	r3, [pc, #228]	@ (8001174 <HAL_RCC_ClockConfig+0x1c4>)
 8001090:	685b      	ldr	r3, [r3, #4]
 8001092:	f023 0203 	bic.w	r2, r3, #3
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	685b      	ldr	r3, [r3, #4]
 800109a:	4936      	ldr	r1, [pc, #216]	@ (8001174 <HAL_RCC_ClockConfig+0x1c4>)
 800109c:	4313      	orrs	r3, r2
 800109e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80010a0:	f7ff fa7e 	bl	80005a0 <HAL_GetTick>
 80010a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80010a6:	e00a      	b.n	80010be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80010a8:	f7ff fa7a 	bl	80005a0 <HAL_GetTick>
 80010ac:	4602      	mov	r2, r0
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	1ad3      	subs	r3, r2, r3
 80010b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80010b6:	4293      	cmp	r3, r2
 80010b8:	d901      	bls.n	80010be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80010ba:	2303      	movs	r3, #3
 80010bc:	e053      	b.n	8001166 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80010be:	4b2d      	ldr	r3, [pc, #180]	@ (8001174 <HAL_RCC_ClockConfig+0x1c4>)
 80010c0:	685b      	ldr	r3, [r3, #4]
 80010c2:	f003 020c 	and.w	r2, r3, #12
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	009b      	lsls	r3, r3, #2
 80010cc:	429a      	cmp	r2, r3
 80010ce:	d1eb      	bne.n	80010a8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80010d0:	4b27      	ldr	r3, [pc, #156]	@ (8001170 <HAL_RCC_ClockConfig+0x1c0>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f003 0307 	and.w	r3, r3, #7
 80010d8:	683a      	ldr	r2, [r7, #0]
 80010da:	429a      	cmp	r2, r3
 80010dc:	d210      	bcs.n	8001100 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010de:	4b24      	ldr	r3, [pc, #144]	@ (8001170 <HAL_RCC_ClockConfig+0x1c0>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f023 0207 	bic.w	r2, r3, #7
 80010e6:	4922      	ldr	r1, [pc, #136]	@ (8001170 <HAL_RCC_ClockConfig+0x1c0>)
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	4313      	orrs	r3, r2
 80010ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80010ee:	4b20      	ldr	r3, [pc, #128]	@ (8001170 <HAL_RCC_ClockConfig+0x1c0>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f003 0307 	and.w	r3, r3, #7
 80010f6:	683a      	ldr	r2, [r7, #0]
 80010f8:	429a      	cmp	r2, r3
 80010fa:	d001      	beq.n	8001100 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80010fc:	2301      	movs	r3, #1
 80010fe:	e032      	b.n	8001166 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	f003 0304 	and.w	r3, r3, #4
 8001108:	2b00      	cmp	r3, #0
 800110a:	d008      	beq.n	800111e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800110c:	4b19      	ldr	r3, [pc, #100]	@ (8001174 <HAL_RCC_ClockConfig+0x1c4>)
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	68db      	ldr	r3, [r3, #12]
 8001118:	4916      	ldr	r1, [pc, #88]	@ (8001174 <HAL_RCC_ClockConfig+0x1c4>)
 800111a:	4313      	orrs	r3, r2
 800111c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f003 0308 	and.w	r3, r3, #8
 8001126:	2b00      	cmp	r3, #0
 8001128:	d009      	beq.n	800113e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800112a:	4b12      	ldr	r3, [pc, #72]	@ (8001174 <HAL_RCC_ClockConfig+0x1c4>)
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	691b      	ldr	r3, [r3, #16]
 8001136:	00db      	lsls	r3, r3, #3
 8001138:	490e      	ldr	r1, [pc, #56]	@ (8001174 <HAL_RCC_ClockConfig+0x1c4>)
 800113a:	4313      	orrs	r3, r2
 800113c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800113e:	f000 f821 	bl	8001184 <HAL_RCC_GetSysClockFreq>
 8001142:	4602      	mov	r2, r0
 8001144:	4b0b      	ldr	r3, [pc, #44]	@ (8001174 <HAL_RCC_ClockConfig+0x1c4>)
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	091b      	lsrs	r3, r3, #4
 800114a:	f003 030f 	and.w	r3, r3, #15
 800114e:	490a      	ldr	r1, [pc, #40]	@ (8001178 <HAL_RCC_ClockConfig+0x1c8>)
 8001150:	5ccb      	ldrb	r3, [r1, r3]
 8001152:	fa22 f303 	lsr.w	r3, r2, r3
 8001156:	4a09      	ldr	r2, [pc, #36]	@ (800117c <HAL_RCC_ClockConfig+0x1cc>)
 8001158:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800115a:	4b09      	ldr	r3, [pc, #36]	@ (8001180 <HAL_RCC_ClockConfig+0x1d0>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	4618      	mov	r0, r3
 8001160:	f7ff f91c 	bl	800039c <HAL_InitTick>

  return HAL_OK;
 8001164:	2300      	movs	r3, #0
}
 8001166:	4618      	mov	r0, r3
 8001168:	3710      	adds	r7, #16
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	40022000 	.word	0x40022000
 8001174:	40021000 	.word	0x40021000
 8001178:	08002b78 	.word	0x08002b78
 800117c:	20000000 	.word	0x20000000
 8001180:	20000004 	.word	0x20000004

08001184 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001184:	b480      	push	{r7}
 8001186:	b087      	sub	sp, #28
 8001188:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800118a:	2300      	movs	r3, #0
 800118c:	60fb      	str	r3, [r7, #12]
 800118e:	2300      	movs	r3, #0
 8001190:	60bb      	str	r3, [r7, #8]
 8001192:	2300      	movs	r3, #0
 8001194:	617b      	str	r3, [r7, #20]
 8001196:	2300      	movs	r3, #0
 8001198:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800119a:	2300      	movs	r3, #0
 800119c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800119e:	4b1e      	ldr	r3, [pc, #120]	@ (8001218 <HAL_RCC_GetSysClockFreq+0x94>)
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	f003 030c 	and.w	r3, r3, #12
 80011aa:	2b04      	cmp	r3, #4
 80011ac:	d002      	beq.n	80011b4 <HAL_RCC_GetSysClockFreq+0x30>
 80011ae:	2b08      	cmp	r3, #8
 80011b0:	d003      	beq.n	80011ba <HAL_RCC_GetSysClockFreq+0x36>
 80011b2:	e027      	b.n	8001204 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80011b4:	4b19      	ldr	r3, [pc, #100]	@ (800121c <HAL_RCC_GetSysClockFreq+0x98>)
 80011b6:	613b      	str	r3, [r7, #16]
      break;
 80011b8:	e027      	b.n	800120a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	0c9b      	lsrs	r3, r3, #18
 80011be:	f003 030f 	and.w	r3, r3, #15
 80011c2:	4a17      	ldr	r2, [pc, #92]	@ (8001220 <HAL_RCC_GetSysClockFreq+0x9c>)
 80011c4:	5cd3      	ldrb	r3, [r2, r3]
 80011c6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d010      	beq.n	80011f4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80011d2:	4b11      	ldr	r3, [pc, #68]	@ (8001218 <HAL_RCC_GetSysClockFreq+0x94>)
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	0c5b      	lsrs	r3, r3, #17
 80011d8:	f003 0301 	and.w	r3, r3, #1
 80011dc:	4a11      	ldr	r2, [pc, #68]	@ (8001224 <HAL_RCC_GetSysClockFreq+0xa0>)
 80011de:	5cd3      	ldrb	r3, [r2, r3]
 80011e0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	4a0d      	ldr	r2, [pc, #52]	@ (800121c <HAL_RCC_GetSysClockFreq+0x98>)
 80011e6:	fb03 f202 	mul.w	r2, r3, r2
 80011ea:	68bb      	ldr	r3, [r7, #8]
 80011ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80011f0:	617b      	str	r3, [r7, #20]
 80011f2:	e004      	b.n	80011fe <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	4a0c      	ldr	r2, [pc, #48]	@ (8001228 <HAL_RCC_GetSysClockFreq+0xa4>)
 80011f8:	fb02 f303 	mul.w	r3, r2, r3
 80011fc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80011fe:	697b      	ldr	r3, [r7, #20]
 8001200:	613b      	str	r3, [r7, #16]
      break;
 8001202:	e002      	b.n	800120a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001204:	4b05      	ldr	r3, [pc, #20]	@ (800121c <HAL_RCC_GetSysClockFreq+0x98>)
 8001206:	613b      	str	r3, [r7, #16]
      break;
 8001208:	bf00      	nop
    }
  }
  return sysclockfreq;
 800120a:	693b      	ldr	r3, [r7, #16]
}
 800120c:	4618      	mov	r0, r3
 800120e:	371c      	adds	r7, #28
 8001210:	46bd      	mov	sp, r7
 8001212:	bc80      	pop	{r7}
 8001214:	4770      	bx	lr
 8001216:	bf00      	nop
 8001218:	40021000 	.word	0x40021000
 800121c:	007a1200 	.word	0x007a1200
 8001220:	08002b90 	.word	0x08002b90
 8001224:	08002ba0 	.word	0x08002ba0
 8001228:	003d0900 	.word	0x003d0900

0800122c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001230:	4b02      	ldr	r3, [pc, #8]	@ (800123c <HAL_RCC_GetHCLKFreq+0x10>)
 8001232:	681b      	ldr	r3, [r3, #0]
}
 8001234:	4618      	mov	r0, r3
 8001236:	46bd      	mov	sp, r7
 8001238:	bc80      	pop	{r7}
 800123a:	4770      	bx	lr
 800123c:	20000000 	.word	0x20000000

08001240 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001244:	f7ff fff2 	bl	800122c <HAL_RCC_GetHCLKFreq>
 8001248:	4602      	mov	r2, r0
 800124a:	4b05      	ldr	r3, [pc, #20]	@ (8001260 <HAL_RCC_GetPCLK1Freq+0x20>)
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	0a1b      	lsrs	r3, r3, #8
 8001250:	f003 0307 	and.w	r3, r3, #7
 8001254:	4903      	ldr	r1, [pc, #12]	@ (8001264 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001256:	5ccb      	ldrb	r3, [r1, r3]
 8001258:	fa22 f303 	lsr.w	r3, r2, r3
}
 800125c:	4618      	mov	r0, r3
 800125e:	bd80      	pop	{r7, pc}
 8001260:	40021000 	.word	0x40021000
 8001264:	08002b88 	.word	0x08002b88

08001268 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001268:	b480      	push	{r7}
 800126a:	b083      	sub	sp, #12
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
 8001270:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	220f      	movs	r2, #15
 8001276:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001278:	4b11      	ldr	r3, [pc, #68]	@ (80012c0 <HAL_RCC_GetClockConfig+0x58>)
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	f003 0203 	and.w	r2, r3, #3
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001284:	4b0e      	ldr	r3, [pc, #56]	@ (80012c0 <HAL_RCC_GetClockConfig+0x58>)
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001290:	4b0b      	ldr	r3, [pc, #44]	@ (80012c0 <HAL_RCC_GetClockConfig+0x58>)
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800129c:	4b08      	ldr	r3, [pc, #32]	@ (80012c0 <HAL_RCC_GetClockConfig+0x58>)
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	08db      	lsrs	r3, r3, #3
 80012a2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80012aa:	4b06      	ldr	r3, [pc, #24]	@ (80012c4 <HAL_RCC_GetClockConfig+0x5c>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f003 0207 	and.w	r2, r3, #7
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80012b6:	bf00      	nop
 80012b8:	370c      	adds	r7, #12
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bc80      	pop	{r7}
 80012be:	4770      	bx	lr
 80012c0:	40021000 	.word	0x40021000
 80012c4:	40022000 	.word	0x40022000

080012c8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b085      	sub	sp, #20
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80012d0:	4b0a      	ldr	r3, [pc, #40]	@ (80012fc <RCC_Delay+0x34>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4a0a      	ldr	r2, [pc, #40]	@ (8001300 <RCC_Delay+0x38>)
 80012d6:	fba2 2303 	umull	r2, r3, r2, r3
 80012da:	0a5b      	lsrs	r3, r3, #9
 80012dc:	687a      	ldr	r2, [r7, #4]
 80012de:	fb02 f303 	mul.w	r3, r2, r3
 80012e2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80012e4:	bf00      	nop
  }
  while (Delay --);
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	1e5a      	subs	r2, r3, #1
 80012ea:	60fa      	str	r2, [r7, #12]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d1f9      	bne.n	80012e4 <RCC_Delay+0x1c>
}
 80012f0:	bf00      	nop
 80012f2:	bf00      	nop
 80012f4:	3714      	adds	r7, #20
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bc80      	pop	{r7}
 80012fa:	4770      	bx	lr
 80012fc:	20000000 	.word	0x20000000
 8001300:	10624dd3 	.word	0x10624dd3

08001304 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b082      	sub	sp, #8
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	2b00      	cmp	r3, #0
 8001310:	d101      	bne.n	8001316 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001312:	2301      	movs	r3, #1
 8001314:	e041      	b.n	800139a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800131c:	b2db      	uxtb	r3, r3
 800131e:	2b00      	cmp	r3, #0
 8001320:	d106      	bne.n	8001330 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	2200      	movs	r2, #0
 8001326:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800132a:	6878      	ldr	r0, [r7, #4]
 800132c:	f000 f839 	bl	80013a2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	2202      	movs	r2, #2
 8001334:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681a      	ldr	r2, [r3, #0]
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	3304      	adds	r3, #4
 8001340:	4619      	mov	r1, r3
 8001342:	4610      	mov	r0, r2
 8001344:	f000 f99c 	bl	8001680 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	2201      	movs	r2, #1
 800134c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	2201      	movs	r2, #1
 8001354:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	2201      	movs	r2, #1
 800135c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	2201      	movs	r2, #1
 8001364:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	2201      	movs	r2, #1
 800136c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	2201      	movs	r2, #1
 8001374:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	2201      	movs	r2, #1
 800137c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	2201      	movs	r2, #1
 8001384:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	2201      	movs	r2, #1
 800138c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	2201      	movs	r2, #1
 8001394:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001398:	2300      	movs	r3, #0
}
 800139a:	4618      	mov	r0, r3
 800139c:	3708      	adds	r7, #8
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}

080013a2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80013a2:	b480      	push	{r7}
 80013a4:	b083      	sub	sp, #12
 80013a6:	af00      	add	r7, sp, #0
 80013a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80013aa:	bf00      	nop
 80013ac:	370c      	adds	r7, #12
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bc80      	pop	{r7}
 80013b2:	4770      	bx	lr

080013b4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b085      	sub	sp, #20
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80013c2:	b2db      	uxtb	r3, r3
 80013c4:	2b01      	cmp	r3, #1
 80013c6:	d001      	beq.n	80013cc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80013c8:	2301      	movs	r3, #1
 80013ca:	e03a      	b.n	8001442 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	2202      	movs	r2, #2
 80013d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	68da      	ldr	r2, [r3, #12]
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f042 0201 	orr.w	r2, r2, #1
 80013e2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4a18      	ldr	r2, [pc, #96]	@ (800144c <HAL_TIM_Base_Start_IT+0x98>)
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d00e      	beq.n	800140c <HAL_TIM_Base_Start_IT+0x58>
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80013f6:	d009      	beq.n	800140c <HAL_TIM_Base_Start_IT+0x58>
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4a14      	ldr	r2, [pc, #80]	@ (8001450 <HAL_TIM_Base_Start_IT+0x9c>)
 80013fe:	4293      	cmp	r3, r2
 8001400:	d004      	beq.n	800140c <HAL_TIM_Base_Start_IT+0x58>
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	4a13      	ldr	r2, [pc, #76]	@ (8001454 <HAL_TIM_Base_Start_IT+0xa0>)
 8001408:	4293      	cmp	r3, r2
 800140a:	d111      	bne.n	8001430 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	689b      	ldr	r3, [r3, #8]
 8001412:	f003 0307 	and.w	r3, r3, #7
 8001416:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	2b06      	cmp	r3, #6
 800141c:	d010      	beq.n	8001440 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	681a      	ldr	r2, [r3, #0]
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f042 0201 	orr.w	r2, r2, #1
 800142c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800142e:	e007      	b.n	8001440 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	681a      	ldr	r2, [r3, #0]
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f042 0201 	orr.w	r2, r2, #1
 800143e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001440:	2300      	movs	r3, #0
}
 8001442:	4618      	mov	r0, r3
 8001444:	3714      	adds	r7, #20
 8001446:	46bd      	mov	sp, r7
 8001448:	bc80      	pop	{r7}
 800144a:	4770      	bx	lr
 800144c:	40012c00 	.word	0x40012c00
 8001450:	40000400 	.word	0x40000400
 8001454:	40000800 	.word	0x40000800

08001458 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b084      	sub	sp, #16
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	68db      	ldr	r3, [r3, #12]
 8001466:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	691b      	ldr	r3, [r3, #16]
 800146e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001470:	68bb      	ldr	r3, [r7, #8]
 8001472:	f003 0302 	and.w	r3, r3, #2
 8001476:	2b00      	cmp	r3, #0
 8001478:	d020      	beq.n	80014bc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	f003 0302 	and.w	r3, r3, #2
 8001480:	2b00      	cmp	r3, #0
 8001482:	d01b      	beq.n	80014bc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f06f 0202 	mvn.w	r2, #2
 800148c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	2201      	movs	r2, #1
 8001492:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	699b      	ldr	r3, [r3, #24]
 800149a:	f003 0303 	and.w	r3, r3, #3
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d003      	beq.n	80014aa <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80014a2:	6878      	ldr	r0, [r7, #4]
 80014a4:	f000 f8d1 	bl	800164a <HAL_TIM_IC_CaptureCallback>
 80014a8:	e005      	b.n	80014b6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80014aa:	6878      	ldr	r0, [r7, #4]
 80014ac:	f000 f8c4 	bl	8001638 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80014b0:	6878      	ldr	r0, [r7, #4]
 80014b2:	f000 f8d3 	bl	800165c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	2200      	movs	r2, #0
 80014ba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80014bc:	68bb      	ldr	r3, [r7, #8]
 80014be:	f003 0304 	and.w	r3, r3, #4
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d020      	beq.n	8001508 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	f003 0304 	and.w	r3, r3, #4
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d01b      	beq.n	8001508 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f06f 0204 	mvn.w	r2, #4
 80014d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	2202      	movs	r2, #2
 80014de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	699b      	ldr	r3, [r3, #24]
 80014e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d003      	beq.n	80014f6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80014ee:	6878      	ldr	r0, [r7, #4]
 80014f0:	f000 f8ab 	bl	800164a <HAL_TIM_IC_CaptureCallback>
 80014f4:	e005      	b.n	8001502 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80014f6:	6878      	ldr	r0, [r7, #4]
 80014f8:	f000 f89e 	bl	8001638 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80014fc:	6878      	ldr	r0, [r7, #4]
 80014fe:	f000 f8ad 	bl	800165c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	2200      	movs	r2, #0
 8001506:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001508:	68bb      	ldr	r3, [r7, #8]
 800150a:	f003 0308 	and.w	r3, r3, #8
 800150e:	2b00      	cmp	r3, #0
 8001510:	d020      	beq.n	8001554 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	f003 0308 	and.w	r3, r3, #8
 8001518:	2b00      	cmp	r3, #0
 800151a:	d01b      	beq.n	8001554 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f06f 0208 	mvn.w	r2, #8
 8001524:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	2204      	movs	r2, #4
 800152a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	69db      	ldr	r3, [r3, #28]
 8001532:	f003 0303 	and.w	r3, r3, #3
 8001536:	2b00      	cmp	r3, #0
 8001538:	d003      	beq.n	8001542 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800153a:	6878      	ldr	r0, [r7, #4]
 800153c:	f000 f885 	bl	800164a <HAL_TIM_IC_CaptureCallback>
 8001540:	e005      	b.n	800154e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001542:	6878      	ldr	r0, [r7, #4]
 8001544:	f000 f878 	bl	8001638 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001548:	6878      	ldr	r0, [r7, #4]
 800154a:	f000 f887 	bl	800165c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	2200      	movs	r2, #0
 8001552:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001554:	68bb      	ldr	r3, [r7, #8]
 8001556:	f003 0310 	and.w	r3, r3, #16
 800155a:	2b00      	cmp	r3, #0
 800155c:	d020      	beq.n	80015a0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	f003 0310 	and.w	r3, r3, #16
 8001564:	2b00      	cmp	r3, #0
 8001566:	d01b      	beq.n	80015a0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f06f 0210 	mvn.w	r2, #16
 8001570:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	2208      	movs	r2, #8
 8001576:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	69db      	ldr	r3, [r3, #28]
 800157e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001582:	2b00      	cmp	r3, #0
 8001584:	d003      	beq.n	800158e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001586:	6878      	ldr	r0, [r7, #4]
 8001588:	f000 f85f 	bl	800164a <HAL_TIM_IC_CaptureCallback>
 800158c:	e005      	b.n	800159a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800158e:	6878      	ldr	r0, [r7, #4]
 8001590:	f000 f852 	bl	8001638 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001594:	6878      	ldr	r0, [r7, #4]
 8001596:	f000 f861 	bl	800165c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	2200      	movs	r2, #0
 800159e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80015a0:	68bb      	ldr	r3, [r7, #8]
 80015a2:	f003 0301 	and.w	r3, r3, #1
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d00c      	beq.n	80015c4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	f003 0301 	and.w	r3, r3, #1
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d007      	beq.n	80015c4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f06f 0201 	mvn.w	r2, #1
 80015bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80015be:	6878      	ldr	r0, [r7, #4]
 80015c0:	f7fe fea2 	bl	8000308 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80015c4:	68bb      	ldr	r3, [r7, #8]
 80015c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d00c      	beq.n	80015e8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d007      	beq.n	80015e8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80015e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80015e2:	6878      	ldr	r0, [r7, #4]
 80015e4:	f000 f8c3 	bl	800176e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80015e8:	68bb      	ldr	r3, [r7, #8]
 80015ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d00c      	beq.n	800160c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d007      	beq.n	800160c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001604:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001606:	6878      	ldr	r0, [r7, #4]
 8001608:	f000 f831 	bl	800166e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800160c:	68bb      	ldr	r3, [r7, #8]
 800160e:	f003 0320 	and.w	r3, r3, #32
 8001612:	2b00      	cmp	r3, #0
 8001614:	d00c      	beq.n	8001630 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	f003 0320 	and.w	r3, r3, #32
 800161c:	2b00      	cmp	r3, #0
 800161e:	d007      	beq.n	8001630 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f06f 0220 	mvn.w	r2, #32
 8001628:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800162a:	6878      	ldr	r0, [r7, #4]
 800162c:	f000 f896 	bl	800175c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001630:	bf00      	nop
 8001632:	3710      	adds	r7, #16
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}

08001638 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001638:	b480      	push	{r7}
 800163a:	b083      	sub	sp, #12
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001640:	bf00      	nop
 8001642:	370c      	adds	r7, #12
 8001644:	46bd      	mov	sp, r7
 8001646:	bc80      	pop	{r7}
 8001648:	4770      	bx	lr

0800164a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800164a:	b480      	push	{r7}
 800164c:	b083      	sub	sp, #12
 800164e:	af00      	add	r7, sp, #0
 8001650:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001652:	bf00      	nop
 8001654:	370c      	adds	r7, #12
 8001656:	46bd      	mov	sp, r7
 8001658:	bc80      	pop	{r7}
 800165a:	4770      	bx	lr

0800165c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800165c:	b480      	push	{r7}
 800165e:	b083      	sub	sp, #12
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001664:	bf00      	nop
 8001666:	370c      	adds	r7, #12
 8001668:	46bd      	mov	sp, r7
 800166a:	bc80      	pop	{r7}
 800166c:	4770      	bx	lr

0800166e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800166e:	b480      	push	{r7}
 8001670:	b083      	sub	sp, #12
 8001672:	af00      	add	r7, sp, #0
 8001674:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001676:	bf00      	nop
 8001678:	370c      	adds	r7, #12
 800167a:	46bd      	mov	sp, r7
 800167c:	bc80      	pop	{r7}
 800167e:	4770      	bx	lr

08001680 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001680:	b480      	push	{r7}
 8001682:	b085      	sub	sp, #20
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
 8001688:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	4a2f      	ldr	r2, [pc, #188]	@ (8001750 <TIM_Base_SetConfig+0xd0>)
 8001694:	4293      	cmp	r3, r2
 8001696:	d00b      	beq.n	80016b0 <TIM_Base_SetConfig+0x30>
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800169e:	d007      	beq.n	80016b0 <TIM_Base_SetConfig+0x30>
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	4a2c      	ldr	r2, [pc, #176]	@ (8001754 <TIM_Base_SetConfig+0xd4>)
 80016a4:	4293      	cmp	r3, r2
 80016a6:	d003      	beq.n	80016b0 <TIM_Base_SetConfig+0x30>
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	4a2b      	ldr	r2, [pc, #172]	@ (8001758 <TIM_Base_SetConfig+0xd8>)
 80016ac:	4293      	cmp	r3, r2
 80016ae:	d108      	bne.n	80016c2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80016b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	68fa      	ldr	r2, [r7, #12]
 80016be:	4313      	orrs	r3, r2
 80016c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	4a22      	ldr	r2, [pc, #136]	@ (8001750 <TIM_Base_SetConfig+0xd0>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d00b      	beq.n	80016e2 <TIM_Base_SetConfig+0x62>
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80016d0:	d007      	beq.n	80016e2 <TIM_Base_SetConfig+0x62>
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	4a1f      	ldr	r2, [pc, #124]	@ (8001754 <TIM_Base_SetConfig+0xd4>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d003      	beq.n	80016e2 <TIM_Base_SetConfig+0x62>
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	4a1e      	ldr	r2, [pc, #120]	@ (8001758 <TIM_Base_SetConfig+0xd8>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	d108      	bne.n	80016f4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80016e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	68db      	ldr	r3, [r3, #12]
 80016ee:	68fa      	ldr	r2, [r7, #12]
 80016f0:	4313      	orrs	r3, r2
 80016f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	695b      	ldr	r3, [r3, #20]
 80016fe:	4313      	orrs	r3, r2
 8001700:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	68fa      	ldr	r2, [r7, #12]
 8001706:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	689a      	ldr	r2, [r3, #8]
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	681a      	ldr	r2, [r3, #0]
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	4a0d      	ldr	r2, [pc, #52]	@ (8001750 <TIM_Base_SetConfig+0xd0>)
 800171c:	4293      	cmp	r3, r2
 800171e:	d103      	bne.n	8001728 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	691a      	ldr	r2, [r3, #16]
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2201      	movs	r2, #1
 800172c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	691b      	ldr	r3, [r3, #16]
 8001732:	f003 0301 	and.w	r3, r3, #1
 8001736:	2b00      	cmp	r3, #0
 8001738:	d005      	beq.n	8001746 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	691b      	ldr	r3, [r3, #16]
 800173e:	f023 0201 	bic.w	r2, r3, #1
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	611a      	str	r2, [r3, #16]
  }
}
 8001746:	bf00      	nop
 8001748:	3714      	adds	r7, #20
 800174a:	46bd      	mov	sp, r7
 800174c:	bc80      	pop	{r7}
 800174e:	4770      	bx	lr
 8001750:	40012c00 	.word	0x40012c00
 8001754:	40000400 	.word	0x40000400
 8001758:	40000800 	.word	0x40000800

0800175c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800175c:	b480      	push	{r7}
 800175e:	b083      	sub	sp, #12
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001764:	bf00      	nop
 8001766:	370c      	adds	r7, #12
 8001768:	46bd      	mov	sp, r7
 800176a:	bc80      	pop	{r7}
 800176c:	4770      	bx	lr

0800176e <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800176e:	b480      	push	{r7}
 8001770:	b083      	sub	sp, #12
 8001772:	af00      	add	r7, sp, #0
 8001774:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001776:	bf00      	nop
 8001778:	370c      	adds	r7, #12
 800177a:	46bd      	mov	sp, r7
 800177c:	bc80      	pop	{r7}
 800177e:	4770      	bx	lr

08001780 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8001780:	b480      	push	{r7}
 8001782:	b085      	sub	sp, #20
 8001784:	af00      	add	r7, sp, #0
 8001786:	60f8      	str	r0, [r7, #12]
 8001788:	60b9      	str	r1, [r7, #8]
 800178a:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */
    pxTopOfStack--;                                                      /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	3b04      	subs	r3, #4
 8001790:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001798:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	3b04      	subs	r3, #4
 800179e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80017a0:	68bb      	ldr	r3, [r7, #8]
 80017a2:	f023 0201 	bic.w	r2, r3, #1
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	3b04      	subs	r3, #4
 80017ae:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80017b0:	4a08      	ldr	r2, [pc, #32]	@ (80017d4 <pxPortInitialiseStack+0x54>)
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 5;                                                   /* R12, R3, R2 and R1. */
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	3b14      	subs	r3, #20
 80017ba:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters;                        /* R0 */
 80017bc:	687a      	ldr	r2, [r7, #4]
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 8;                                                   /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	3b20      	subs	r3, #32
 80017c6:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80017c8:	68fb      	ldr	r3, [r7, #12]
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	3714      	adds	r7, #20
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bc80      	pop	{r7}
 80017d2:	4770      	bx	lr
 80017d4:	080017d9 	.word	0x080017d9

080017d8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80017d8:	b480      	push	{r7}
 80017da:	b083      	sub	sp, #12
 80017dc:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0UL;
 80017de:	2300      	movs	r3, #0
 80017e0:	603b      	str	r3, [r7, #0]

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
    uint32_t ulNewBASEPRI;

    __asm volatile
 80017e2:	f04f 03bf 	mov.w	r3, #191	@ 0xbf
 80017e6:	f383 8811 	msr	BASEPRI, r3
 80017ea:	f3bf 8f6f 	isb	sy
 80017ee:	f3bf 8f4f 	dsb	sy
 80017f2:	607b      	str	r3, [r7, #4]
        "   msr basepri, %0                                         \n" \
        "   isb                                                     \n" \
        "   dsb                                                     \n" \
        : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );
}
 80017f4:	bf00      	nop
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80017f6:	bf00      	nop
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d0fc      	beq.n	80017f8 <prvTaskExitError+0x20>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80017fe:	bf00      	nop
 8001800:	bf00      	nop
 8001802:	370c      	adds	r7, #12
 8001804:	46bd      	mov	sp, r7
 8001806:	bc80      	pop	{r7}
 8001808:	4770      	bx	lr
 800180a:	0000      	movs	r0, r0
 800180c:	0000      	movs	r0, r0
	...

08001810 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8001810:	4b07      	ldr	r3, [pc, #28]	@ (8001830 <pxCurrentTCBConst2>)
 8001812:	6819      	ldr	r1, [r3, #0]
 8001814:	6808      	ldr	r0, [r1, #0]
 8001816:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800181a:	f380 8809 	msr	PSP, r0
 800181e:	f3bf 8f6f 	isb	sy
 8001822:	f04f 0000 	mov.w	r0, #0
 8001826:	f380 8811 	msr	BASEPRI, r0
 800182a:	f04e 0e0d 	orr.w	lr, lr, #13
 800182e:	4770      	bx	lr

08001830 <pxCurrentTCBConst2>:
 8001830:	200048a0 	.word	0x200048a0
        "   bx r14                          \n"
        "                                   \n"
        "   .align 4                        \n"
        "pxCurrentTCBConst2: .word pxCurrentTCB             \n"
        );
}
 8001834:	bf00      	nop
 8001836:	bf00      	nop

08001838 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
    __asm volatile (
 8001838:	4806      	ldr	r0, [pc, #24]	@ (8001854 <prvPortStartFirstTask+0x1c>)
 800183a:	6800      	ldr	r0, [r0, #0]
 800183c:	6800      	ldr	r0, [r0, #0]
 800183e:	f380 8808 	msr	MSP, r0
 8001842:	b662      	cpsie	i
 8001844:	b661      	cpsie	f
 8001846:	f3bf 8f4f 	dsb	sy
 800184a:	f3bf 8f6f 	isb	sy
 800184e:	df00      	svc	0
 8001850:	bf00      	nop
 8001852:	0000      	.short	0x0000
 8001854:	e000ed08 	.word	0xe000ed08
        " isb                   \n"
        " svc 0                 \n" /* System call to start first task. */
        " nop                   \n"
        " .ltorg                \n"
        );
}
 8001858:	bf00      	nop
 800185a:	bf00      	nop

0800185c <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b082      	sub	sp, #8
 8001860:	af00      	add	r7, sp, #0
     * configCHECK_HANDLER_INSTALLATION to 0 in their FreeRTOSConfig.h. Direct
     * routing, which is validated here when configCHECK_HANDLER_INSTALLATION
     * is 1, should be preferred when possible. */
    #if ( configCHECK_HANDLER_INSTALLATION == 1 )
    {
        const portISR_t * const pxVectorTable = portSCB_VTOR_REG;
 8001862:	4b11      	ldr	r3, [pc, #68]	@ (80018a8 <xPortStartScheduler+0x4c>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	607b      	str	r3, [r7, #4]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts, and make SVCall
     * the highest priority. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8001868:	4b10      	ldr	r3, [pc, #64]	@ (80018ac <xPortStartScheduler+0x50>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a0f      	ldr	r2, [pc, #60]	@ (80018ac <xPortStartScheduler+0x50>)
 800186e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001872:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8001874:	4b0d      	ldr	r3, [pc, #52]	@ (80018ac <xPortStartScheduler+0x50>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a0c      	ldr	r2, [pc, #48]	@ (80018ac <xPortStartScheduler+0x50>)
 800187a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800187e:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR2_REG = 0;
 8001880:	4b0b      	ldr	r3, [pc, #44]	@ (80018b0 <xPortStartScheduler+0x54>)
 8001882:	2200      	movs	r2, #0
 8001884:	601a      	str	r2, [r3, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8001886:	f000 f891 	bl	80019ac <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 800188a:	4b0a      	ldr	r3, [pc, #40]	@ (80018b4 <xPortStartScheduler+0x58>)
 800188c:	2200      	movs	r2, #0
 800188e:	601a      	str	r2, [r3, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8001890:	f7ff ffd2 	bl	8001838 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8001894:	f000 ff92 	bl	80027bc <vTaskSwitchContext>
    prvTaskExitError();
 8001898:	f7ff ff9e 	bl	80017d8 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 800189c:	2300      	movs	r3, #0
}
 800189e:	4618      	mov	r0, r3
 80018a0:	3708      	adds	r7, #8
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	e000ed08 	.word	0xe000ed08
 80018ac:	e000ed20 	.word	0xe000ed20
 80018b0:	e000ed1c 	.word	0xe000ed1c
 80018b4:	2000000c 	.word	0x2000000c

080018b8 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80018b8:	b480      	push	{r7}
 80018ba:	b083      	sub	sp, #12
 80018bc:	af00      	add	r7, sp, #0
    __asm volatile
 80018be:	f04f 03bf 	mov.w	r3, #191	@ 0xbf
 80018c2:	f383 8811 	msr	BASEPRI, r3
 80018c6:	f3bf 8f6f 	isb	sy
 80018ca:	f3bf 8f4f 	dsb	sy
 80018ce:	607b      	str	r3, [r7, #4]
}
 80018d0:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80018d2:	4b05      	ldr	r3, [pc, #20]	@ (80018e8 <vPortEnterCritical+0x30>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	3301      	adds	r3, #1
 80018d8:	4a03      	ldr	r2, [pc, #12]	@ (80018e8 <vPortEnterCritical+0x30>)
 80018da:	6013      	str	r3, [r2, #0]
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
    }
}
 80018dc:	bf00      	nop
 80018de:	370c      	adds	r7, #12
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bc80      	pop	{r7}
 80018e4:	4770      	bx	lr
 80018e6:	bf00      	nop
 80018e8:	2000000c 	.word	0x2000000c

080018ec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80018ec:	b480      	push	{r7}
 80018ee:	b083      	sub	sp, #12
 80018f0:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
    uxCriticalNesting--;
 80018f2:	4b0a      	ldr	r3, [pc, #40]	@ (800191c <vPortExitCritical+0x30>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	3b01      	subs	r3, #1
 80018f8:	4a08      	ldr	r2, [pc, #32]	@ (800191c <vPortExitCritical+0x30>)
 80018fa:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80018fc:	4b07      	ldr	r3, [pc, #28]	@ (800191c <vPortExitCritical+0x30>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	2b00      	cmp	r3, #0
 8001902:	d105      	bne.n	8001910 <vPortExitCritical+0x24>
 8001904:	2300      	movs	r3, #0
 8001906:	607b      	str	r3, [r7, #4]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
    __asm volatile
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	f383 8811 	msr	BASEPRI, r3
    (
        "   msr basepri, %0 " ::"r" ( ulNewMaskValue ) : "memory"
    );
}
 800190e:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8001910:	bf00      	nop
 8001912:	370c      	adds	r7, #12
 8001914:	46bd      	mov	sp, r7
 8001916:	bc80      	pop	{r7}
 8001918:	4770      	bx	lr
 800191a:	bf00      	nop
 800191c:	2000000c 	.word	0x2000000c

08001920 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8001920:	f3ef 8009 	mrs	r0, PSP
 8001924:	f3bf 8f6f 	isb	sy
 8001928:	4b0d      	ldr	r3, [pc, #52]	@ (8001960 <pxCurrentTCBConst>)
 800192a:	681a      	ldr	r2, [r3, #0]
 800192c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001930:	6010      	str	r0, [r2, #0]
 8001932:	e92d 4008 	stmdb	sp!, {r3, lr}
 8001936:	f04f 00bf 	mov.w	r0, #191	@ 0xbf
 800193a:	f380 8811 	msr	BASEPRI, r0
 800193e:	f000 ff3d 	bl	80027bc <vTaskSwitchContext>
 8001942:	f04f 0000 	mov.w	r0, #0
 8001946:	f380 8811 	msr	BASEPRI, r0
 800194a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800194e:	6819      	ldr	r1, [r3, #0]
 8001950:	6808      	ldr	r0, [r1, #0]
 8001952:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001956:	f380 8809 	msr	PSP, r0
 800195a:	f3bf 8f6f 	isb	sy
 800195e:	4770      	bx	lr

08001960 <pxCurrentTCBConst>:
 8001960:	200048a0 	.word	0x200048a0
        "                                       \n"
        "   .align 4                            \n"
        "pxCurrentTCBConst: .word pxCurrentTCB  \n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8001964:	bf00      	nop
 8001966:	bf00      	nop

08001968 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b082      	sub	sp, #8
 800196c:	af00      	add	r7, sp, #0
    __asm volatile
 800196e:	f04f 03bf 	mov.w	r3, #191	@ 0xbf
 8001972:	f383 8811 	msr	BASEPRI, r3
 8001976:	f3bf 8f6f 	isb	sy
 800197a:	f3bf 8f4f 	dsb	sy
 800197e:	607b      	str	r3, [r7, #4]
}
 8001980:	bf00      	nop
     * known. */
    portDISABLE_INTERRUPTS();
    traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8001982:	f000 fe13 	bl	80025ac <xTaskIncrementTick>
 8001986:	4603      	mov	r3, r0
 8001988:	2b00      	cmp	r3, #0
 800198a:	d003      	beq.n	8001994 <xPortSysTickHandler+0x2c>
        {
            traceISR_EXIT_TO_SCHEDULER();

            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800198c:	4b06      	ldr	r3, [pc, #24]	@ (80019a8 <xPortSysTickHandler+0x40>)
 800198e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001992:	601a      	str	r2, [r3, #0]
 8001994:	2300      	movs	r3, #0
 8001996:	603b      	str	r3, [r7, #0]
    __asm volatile
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	f383 8811 	msr	BASEPRI, r3
}
 800199e:	bf00      	nop
        {
            traceISR_EXIT();
        }
    }
    portENABLE_INTERRUPTS();
}
 80019a0:	bf00      	nop
 80019a2:	3708      	adds	r7, #8
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	e000ed04 	.word	0xe000ed04

080019ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80019ac:	b480      	push	{r7}
 80019ae:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80019b0:	4b07      	ldr	r3, [pc, #28]	@ (80019d0 <vPortSetupTimerInterrupt+0x24>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80019b6:	4b07      	ldr	r3, [pc, #28]	@ (80019d4 <vPortSetupTimerInterrupt+0x28>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80019bc:	4b06      	ldr	r3, [pc, #24]	@ (80019d8 <vPortSetupTimerInterrupt+0x2c>)
 80019be:	4a07      	ldr	r2, [pc, #28]	@ (80019dc <vPortSetupTimerInterrupt+0x30>)
 80019c0:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80019c2:	4b03      	ldr	r3, [pc, #12]	@ (80019d0 <vPortSetupTimerInterrupt+0x24>)
 80019c4:	2207      	movs	r2, #7
 80019c6:	601a      	str	r2, [r3, #0]
}
 80019c8:	bf00      	nop
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bc80      	pop	{r7}
 80019ce:	4770      	bx	lr
 80019d0:	e000e010 	.word	0xe000e010
 80019d4:	e000e018 	.word	0xe000e018
 80019d8:	e000e014 	.word	0xe000e014
 80019dc:	0001193f 	.word	0x0001193f

080019e0 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = ( size_t ) 0U;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b088      	sub	sp, #32
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 80019e8:	2300      	movs	r3, #0
 80019ea:	617b      	str	r3, [r7, #20]
    size_t xAdditionalRequiredSize;

    if( xWantedSize > 0 )
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d022      	beq.n	8001a38 <pvPortMalloc+0x58>
    {
        /* The wanted size must be increased so it can contain a BlockLink_t
         * structure in addition to the requested amount of bytes. */
        if( heapADD_WILL_OVERFLOW( xWantedSize, xHeapStructSize ) == 0 )
 80019f2:	2308      	movs	r3, #8
 80019f4:	43db      	mvns	r3, r3
 80019f6:	687a      	ldr	r2, [r7, #4]
 80019f8:	429a      	cmp	r2, r3
 80019fa:	d81b      	bhi.n	8001a34 <pvPortMalloc+0x54>
        {
            xWantedSize += xHeapStructSize;
 80019fc:	2208      	movs	r2, #8
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	4413      	add	r3, r2
 8001a02:	607b      	str	r3, [r7, #4]

            /* Ensure that blocks are always aligned to the required number
             * of bytes. */
            if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	f003 0307 	and.w	r3, r3, #7
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d014      	beq.n	8001a38 <pvPortMalloc+0x58>
            {
                /* Byte alignment required. */
                xAdditionalRequiredSize = portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	f003 0307 	and.w	r3, r3, #7
 8001a14:	f1c3 0308 	rsb	r3, r3, #8
 8001a18:	613b      	str	r3, [r7, #16]

                if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	43db      	mvns	r3, r3
 8001a1e:	687a      	ldr	r2, [r7, #4]
 8001a20:	429a      	cmp	r2, r3
 8001a22:	d804      	bhi.n	8001a2e <pvPortMalloc+0x4e>
                {
                    xWantedSize += xAdditionalRequiredSize;
 8001a24:	687a      	ldr	r2, [r7, #4]
 8001a26:	693b      	ldr	r3, [r7, #16]
 8001a28:	4413      	add	r3, r2
 8001a2a:	607b      	str	r3, [r7, #4]
 8001a2c:	e004      	b.n	8001a38 <pvPortMalloc+0x58>
                }
                else
                {
                    xWantedSize = 0;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	607b      	str	r3, [r7, #4]
 8001a32:	e001      	b.n	8001a38 <pvPortMalloc+0x58>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            xWantedSize = 0;
 8001a34:	2300      	movs	r3, #0
 8001a36:	607b      	str	r3, [r7, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    vTaskSuspendAll();
 8001a38:	f000 fcb2 	bl	80023a0 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8001a3c:	4b3a      	ldr	r3, [pc, #232]	@ (8001b28 <pvPortMalloc+0x148>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d101      	bne.n	8001a48 <pvPortMalloc+0x68>
        {
            prvHeapInit();
 8001a44:	f000 f8b8 	bl	8001bb8 <prvHeapInit>

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	db64      	blt.n	8001b18 <pvPortMalloc+0x138>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d061      	beq.n	8001b18 <pvPortMalloc+0x138>
 8001a54:	4b35      	ldr	r3, [pc, #212]	@ (8001b2c <pvPortMalloc+0x14c>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	687a      	ldr	r2, [r7, #4]
 8001a5a:	429a      	cmp	r2, r3
 8001a5c:	d85c      	bhi.n	8001b18 <pvPortMalloc+0x138>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8001a5e:	4b34      	ldr	r3, [pc, #208]	@ (8001b30 <pvPortMalloc+0x150>)
 8001a60:	61bb      	str	r3, [r7, #24]
                pxBlock = heapPROTECT_BLOCK_POINTER( xStart.pxNextFreeBlock );
 8001a62:	4b33      	ldr	r3, [pc, #204]	@ (8001b30 <pvPortMalloc+0x150>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	61fb      	str	r3, [r7, #28]
                heapVALIDATE_BLOCK_POINTER( pxBlock );

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
 8001a68:	e004      	b.n	8001a74 <pvPortMalloc+0x94>
                {
                    pxPreviousBlock = pxBlock;
 8001a6a:	69fb      	ldr	r3, [r7, #28]
 8001a6c:	61bb      	str	r3, [r7, #24]
                    pxBlock = heapPROTECT_BLOCK_POINTER( pxBlock->pxNextFreeBlock );
 8001a6e:	69fb      	ldr	r3, [r7, #28]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	61fb      	str	r3, [r7, #28]
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
 8001a74:	69fb      	ldr	r3, [r7, #28]
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	687a      	ldr	r2, [r7, #4]
 8001a7a:	429a      	cmp	r2, r3
 8001a7c:	d903      	bls.n	8001a86 <pvPortMalloc+0xa6>
 8001a7e:	69fb      	ldr	r3, [r7, #28]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d1f1      	bne.n	8001a6a <pvPortMalloc+0x8a>
                    heapVALIDATE_BLOCK_POINTER( pxBlock );
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8001a86:	4b28      	ldr	r3, [pc, #160]	@ (8001b28 <pvPortMalloc+0x148>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	69fa      	ldr	r2, [r7, #28]
 8001a8c:	429a      	cmp	r2, r3
 8001a8e:	d043      	beq.n	8001b18 <pvPortMalloc+0x138>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxPreviousBlock->pxNextFreeBlock ) ) + xHeapStructSize );
 8001a90:	69bb      	ldr	r3, [r7, #24]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	2208      	movs	r2, #8
 8001a96:	4413      	add	r3, r2
 8001a98:	617b      	str	r3, [r7, #20]
                    heapVALIDATE_BLOCK_POINTER( pvReturn );

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8001a9a:	69fb      	ldr	r3, [r7, #28]
 8001a9c:	681a      	ldr	r2, [r3, #0]
 8001a9e:	69bb      	ldr	r3, [r7, #24]
 8001aa0:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    configASSERT( heapSUBTRACT_WILL_UNDERFLOW( pxBlock->xBlockSize, xWantedSize ) == 0 );

                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8001aa2:	69fb      	ldr	r3, [r7, #28]
 8001aa4:	685a      	ldr	r2, [r3, #4]
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	1ad2      	subs	r2, r2, r3
 8001aaa:	2308      	movs	r3, #8
 8001aac:	005b      	lsls	r3, r3, #1
 8001aae:	429a      	cmp	r2, r3
 8001ab0:	d913      	bls.n	8001ada <pvPortMalloc+0xfa>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8001ab2:	69fa      	ldr	r2, [r7, #28]
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	4413      	add	r3, r2
 8001ab8:	60fb      	str	r3, [r7, #12]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8001aba:	69fb      	ldr	r3, [r7, #28]
 8001abc:	685a      	ldr	r2, [r3, #4]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	1ad2      	subs	r2, r2, r3
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8001ac6:	69fb      	ldr	r3, [r7, #28]
 8001ac8:	687a      	ldr	r2, [r7, #4]
 8001aca:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        pxNewBlockLink->pxNextFreeBlock = pxPreviousBlock->pxNextFreeBlock;
 8001acc:	69bb      	ldr	r3, [r7, #24]
 8001ace:	681a      	ldr	r2, [r3, #0]
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	601a      	str	r2, [r3, #0]
                        pxPreviousBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxNewBlockLink );
 8001ad4:	69bb      	ldr	r3, [r7, #24]
 8001ad6:	68fa      	ldr	r2, [r7, #12]
 8001ad8:	601a      	str	r2, [r3, #0]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001ada:	4b14      	ldr	r3, [pc, #80]	@ (8001b2c <pvPortMalloc+0x14c>)
 8001adc:	681a      	ldr	r2, [r3, #0]
 8001ade:	69fb      	ldr	r3, [r7, #28]
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	1ad3      	subs	r3, r2, r3
 8001ae4:	4a11      	ldr	r2, [pc, #68]	@ (8001b2c <pvPortMalloc+0x14c>)
 8001ae6:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001ae8:	4b10      	ldr	r3, [pc, #64]	@ (8001b2c <pvPortMalloc+0x14c>)
 8001aea:	681a      	ldr	r2, [r3, #0]
 8001aec:	4b11      	ldr	r3, [pc, #68]	@ (8001b34 <pvPortMalloc+0x154>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	429a      	cmp	r2, r3
 8001af2:	d203      	bcs.n	8001afc <pvPortMalloc+0x11c>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8001af4:	4b0d      	ldr	r3, [pc, #52]	@ (8001b2c <pvPortMalloc+0x14c>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a0e      	ldr	r2, [pc, #56]	@ (8001b34 <pvPortMalloc+0x154>)
 8001afa:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8001afc:	69fb      	ldr	r3, [r7, #28]
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001b04:	69fb      	ldr	r3, [r7, #28]
 8001b06:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8001b08:	69fb      	ldr	r3, [r7, #28]
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8001b0e:	4b0a      	ldr	r3, [pc, #40]	@ (8001b38 <pvPortMalloc+0x158>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	3301      	adds	r3, #1
 8001b14:	4a08      	ldr	r2, [pc, #32]	@ (8001b38 <pvPortMalloc+0x158>)
 8001b16:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8001b18:	f000 fc50 	bl	80023bc <xTaskResumeAll>
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
    return pvReturn;
 8001b1c:	697b      	ldr	r3, [r7, #20]
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	3720      	adds	r7, #32
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	2000488c 	.word	0x2000488c
 8001b2c:	20004890 	.word	0x20004890
 8001b30:	20004884 	.word	0x20004884
 8001b34:	20004894 	.word	0x20004894
 8001b38:	20004898 	.word	0x20004898

08001b3c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b084      	sub	sp, #16
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	60fb      	str	r3, [r7, #12]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d02b      	beq.n	8001ba6 <vPortFree+0x6a>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8001b4e:	2308      	movs	r3, #8
 8001b50:	425b      	negs	r3, r3
 8001b52:	68fa      	ldr	r2, [r7, #12]
 8001b54:	4413      	add	r3, r2
 8001b56:	60fb      	str	r3, [r7, #12]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	60bb      	str	r3, [r7, #8]

        heapVALIDATE_BLOCK_POINTER( pxLink );
        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
        configASSERT( pxLink->pxNextFreeBlock == NULL );

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8001b5c:	68bb      	ldr	r3, [r7, #8]
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	0fdb      	lsrs	r3, r3, #31
 8001b62:	f003 0301 	and.w	r3, r3, #1
 8001b66:	b2db      	uxtb	r3, r3
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d01c      	beq.n	8001ba6 <vPortFree+0x6a>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8001b6c:	68bb      	ldr	r3, [r7, #8]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d118      	bne.n	8001ba6 <vPortFree+0x6a>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8001b74:	68bb      	ldr	r3, [r7, #8]
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001b7c:	68bb      	ldr	r3, [r7, #8]
 8001b7e:	605a      	str	r2, [r3, #4]
                        ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                    }
                }
                #endif

                vTaskSuspendAll();
 8001b80:	f000 fc0e 	bl	80023a0 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8001b84:	68bb      	ldr	r3, [r7, #8]
 8001b86:	685a      	ldr	r2, [r3, #4]
 8001b88:	4b09      	ldr	r3, [pc, #36]	@ (8001bb0 <vPortFree+0x74>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4413      	add	r3, r2
 8001b8e:	4a08      	ldr	r2, [pc, #32]	@ (8001bb0 <vPortFree+0x74>)
 8001b90:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8001b92:	68b8      	ldr	r0, [r7, #8]
 8001b94:	f000 f86a 	bl	8001c6c <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8001b98:	4b06      	ldr	r3, [pc, #24]	@ (8001bb4 <vPortFree+0x78>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	3301      	adds	r3, #1
 8001b9e:	4a05      	ldr	r2, [pc, #20]	@ (8001bb4 <vPortFree+0x78>)
 8001ba0:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8001ba2:	f000 fc0b 	bl	80023bc <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8001ba6:	bf00      	nop
 8001ba8:	3710      	adds	r7, #16
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	20004890 	.word	0x20004890
 8001bb4:	2000489c 	.word	0x2000489c

08001bb8 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b085      	sub	sp, #20
 8001bbc:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    portPOINTER_SIZE_TYPE uxStartAddress, uxEndAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8001bbe:	f44f 4390 	mov.w	r3, #18432	@ 0x4800
 8001bc2:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxStartAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8001bc4:	4b24      	ldr	r3, [pc, #144]	@ (8001c58 <prvHeapInit+0xa0>)
 8001bc6:	60fb      	str	r3, [r7, #12]

    if( ( uxStartAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	f003 0307 	and.w	r3, r3, #7
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d00c      	beq.n	8001bec <prvHeapInit+0x34>
    {
        uxStartAddress += ( portBYTE_ALIGNMENT - 1 );
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	3307      	adds	r3, #7
 8001bd6:	60fb      	str	r3, [r7, #12]
        uxStartAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	f023 0307 	bic.w	r3, r3, #7
 8001bde:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= ( size_t ) ( uxStartAddress - ( portPOINTER_SIZE_TYPE ) ucHeap );
 8001be0:	68ba      	ldr	r2, [r7, #8]
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	1ad3      	subs	r3, r2, r3
 8001be6:	4a1c      	ldr	r2, [pc, #112]	@ (8001c58 <prvHeapInit+0xa0>)
 8001be8:	4413      	add	r3, r2
 8001bea:	60bb      	str	r3, [r7, #8]
    }
    #endif

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) heapPROTECT_BLOCK_POINTER( uxStartAddress );
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	4a1b      	ldr	r2, [pc, #108]	@ (8001c5c <prvHeapInit+0xa4>)
 8001bf0:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8001bf2:	4b1a      	ldr	r3, [pc, #104]	@ (8001c5c <prvHeapInit+0xa4>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxEndAddress = uxStartAddress + ( portPOINTER_SIZE_TYPE ) xTotalHeapSize;
 8001bf8:	68fa      	ldr	r2, [r7, #12]
 8001bfa:	68bb      	ldr	r3, [r7, #8]
 8001bfc:	4413      	add	r3, r2
 8001bfe:	607b      	str	r3, [r7, #4]
    uxEndAddress -= ( portPOINTER_SIZE_TYPE ) xHeapStructSize;
 8001c00:	2208      	movs	r2, #8
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	1a9b      	subs	r3, r3, r2
 8001c06:	607b      	str	r3, [r7, #4]
    uxEndAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	f023 0307 	bic.w	r3, r3, #7
 8001c0e:	607b      	str	r3, [r7, #4]
    pxEnd = ( BlockLink_t * ) uxEndAddress;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	4a13      	ldr	r2, [pc, #76]	@ (8001c60 <prvHeapInit+0xa8>)
 8001c14:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8001c16:	4b12      	ldr	r3, [pc, #72]	@ (8001c60 <prvHeapInit+0xa8>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( NULL );
 8001c1e:	4b10      	ldr	r3, [pc, #64]	@ (8001c60 <prvHeapInit+0xa8>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	2200      	movs	r2, #0
 8001c24:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) uxStartAddress;
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxEndAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	687a      	ldr	r2, [r7, #4]
 8001c2e:	1ad2      	subs	r2, r2, r3
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 8001c34:	4b0a      	ldr	r3, [pc, #40]	@ (8001c60 <prvHeapInit+0xa8>)
 8001c36:	681a      	ldr	r2, [r3, #0]
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	4a08      	ldr	r2, [pc, #32]	@ (8001c64 <prvHeapInit+0xac>)
 8001c42:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	4a07      	ldr	r2, [pc, #28]	@ (8001c68 <prvHeapInit+0xb0>)
 8001c4a:	6013      	str	r3, [r2, #0]
}
 8001c4c:	bf00      	nop
 8001c4e:	3714      	adds	r7, #20
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bc80      	pop	{r7}
 8001c54:	4770      	bx	lr
 8001c56:	bf00      	nop
 8001c58:	20000084 	.word	0x20000084
 8001c5c:	20004884 	.word	0x20004884
 8001c60:	2000488c 	.word	0x2000488c
 8001c64:	20004894 	.word	0x20004894
 8001c68:	20004890 	.word	0x20004890

08001c6c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b085      	sub	sp, #20
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) < pxBlockToInsert; pxIterator = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 8001c74:	4b27      	ldr	r3, [pc, #156]	@ (8001d14 <prvInsertBlockIntoFreeList+0xa8>)
 8001c76:	60fb      	str	r3, [r7, #12]
 8001c78:	e002      	b.n	8001c80 <prvInsertBlockIntoFreeList+0x14>
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	60fb      	str	r3, [r7, #12]
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	687a      	ldr	r2, [r7, #4]
 8001c86:	429a      	cmp	r2, r3
 8001c88:	d8f7      	bhi.n	8001c7a <prvInsertBlockIntoFreeList+0xe>
        heapVALIDATE_BLOCK_POINTER( pxIterator );
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	68ba      	ldr	r2, [r7, #8]
 8001c94:	4413      	add	r3, r2
 8001c96:	687a      	ldr	r2, [r7, #4]
 8001c98:	429a      	cmp	r2, r3
 8001c9a:	d108      	bne.n	8001cae <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	685a      	ldr	r2, [r3, #4]
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	441a      	add	r2, r3
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	68ba      	ldr	r2, [r7, #8]
 8001cb8:	441a      	add	r2, r3
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	429a      	cmp	r2, r3
 8001cc0:	d118      	bne.n	8001cf4 <prvInsertBlockIntoFreeList+0x88>
    {
        if( heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) != pxEnd )
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	681a      	ldr	r2, [r3, #0]
 8001cc6:	4b14      	ldr	r3, [pc, #80]	@ (8001d18 <prvInsertBlockIntoFreeList+0xac>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	429a      	cmp	r2, r3
 8001ccc:	d00d      	beq.n	8001cea <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->xBlockSize;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	685a      	ldr	r2, [r3, #4]
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	441a      	add	r2, r3
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->pxNextFreeBlock;
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	681a      	ldr	r2, [r3, #0]
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	601a      	str	r2, [r3, #0]
 8001ce8:	e008      	b.n	8001cfc <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 8001cea:	4b0b      	ldr	r3, [pc, #44]	@ (8001d18 <prvInsertBlockIntoFreeList+0xac>)
 8001cec:	681a      	ldr	r2, [r3, #0]
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	601a      	str	r2, [r3, #0]
 8001cf2:	e003      	b.n	8001cfc <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	681a      	ldr	r2, [r3, #0]
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8001cfc:	68fa      	ldr	r2, [r7, #12]
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	429a      	cmp	r2, r3
 8001d02:	d002      	beq.n	8001d0a <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxBlockToInsert );
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	687a      	ldr	r2, [r7, #4]
 8001d08:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8001d0a:	bf00      	nop
 8001d0c:	3714      	adds	r7, #20
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bc80      	pop	{r7}
 8001d12:	4770      	bx	lr
 8001d14:	20004884 	.word	0x20004884
 8001d18:	2000488c 	.word	0x2000488c

08001d1c <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b083      	sub	sp, #12
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialise( pxList );

    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	f103 0208 	add.w	r2, r3, #8
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	f04f 32ff 	mov.w	r2, #4294967295
 8001d34:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	f103 0208 	add.w	r2, r3, #8
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	f103 0208 	add.w	r2, r3, #8
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	601a      	str	r2, [r3, #0]
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );

    traceRETURN_vListInitialise();
}
 8001d50:	bf00      	nop
 8001d52:	370c      	adds	r7, #12
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bc80      	pop	{r7}
 8001d58:	4770      	bx	lr

08001d5a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001d5a:	b480      	push	{r7}
 8001d5c:	b083      	sub	sp, #12
 8001d5e:	af00      	add	r7, sp, #0
 8001d60:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialiseItem( pxItem );

    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2200      	movs	r2, #0
 8001d66:	611a      	str	r2, [r3, #16]
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );

    traceRETURN_vListInitialiseItem();
}
 8001d68:	bf00      	nop
 8001d6a:	370c      	adds	r7, #12
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bc80      	pop	{r7}
 8001d70:	4770      	bx	lr

08001d72 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8001d72:	b480      	push	{r7}
 8001d74:	b085      	sub	sp, #20
 8001d76:	af00      	add	r7, sp, #0
 8001d78:	6078      	str	r0, [r7, #4]
 8001d7a:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	68fa      	ldr	r2, [r7, #12]
 8001d86:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	689a      	ldr	r2, [r3, #8]
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	689b      	ldr	r3, [r3, #8]
 8001d94:	683a      	ldr	r2, [r7, #0]
 8001d96:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	683a      	ldr	r2, [r7, #0]
 8001d9c:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	687a      	ldr	r2, [r7, #4]
 8001da2:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	1c5a      	adds	r2, r3, #1
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	601a      	str	r2, [r3, #0]

    traceRETURN_vListInsertEnd();
}
 8001dae:	bf00      	nop
 8001db0:	3714      	adds	r7, #20
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bc80      	pop	{r7}
 8001db6:	4770      	bx	lr

08001db8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8001db8:	b480      	push	{r7}
 8001dba:	b085      	sub	sp, #20
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
 8001dc0:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dce:	d103      	bne.n	8001dd8 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	691b      	ldr	r3, [r3, #16]
 8001dd4:	60fb      	str	r3, [r7, #12]
 8001dd6:	e00c      	b.n	8001df2 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	3308      	adds	r3, #8
 8001ddc:	60fb      	str	r3, [r7, #12]
 8001dde:	e002      	b.n	8001de6 <vListInsert+0x2e>
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	60fb      	str	r3, [r7, #12]
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	68ba      	ldr	r2, [r7, #8]
 8001dee:	429a      	cmp	r2, r3
 8001df0:	d2f6      	bcs.n	8001de0 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	685a      	ldr	r2, [r3, #4]
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	683a      	ldr	r2, [r7, #0]
 8001e00:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	68fa      	ldr	r2, [r7, #12]
 8001e06:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	683a      	ldr	r2, [r7, #0]
 8001e0c:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	687a      	ldr	r2, [r7, #4]
 8001e12:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	1c5a      	adds	r2, r3, #1
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	601a      	str	r2, [r3, #0]

    traceRETURN_vListInsert();
}
 8001e1e:	bf00      	nop
 8001e20:	3714      	adds	r7, #20
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bc80      	pop	{r7}
 8001e26:	4770      	bx	lr

08001e28 <uxListRemove>:
/*-----------------------------------------------------------*/


UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b085      	sub	sp, #20
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
    /* The list item knows which list it is in.  Obtain the list from the list
     * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	691b      	ldr	r3, [r3, #16]
 8001e34:	60fb      	str	r3, [r7, #12]

    traceENTER_uxListRemove( pxItemToRemove );

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	687a      	ldr	r2, [r7, #4]
 8001e3c:	6892      	ldr	r2, [r2, #8]
 8001e3e:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	689b      	ldr	r3, [r3, #8]
 8001e44:	687a      	ldr	r2, [r7, #4]
 8001e46:	6852      	ldr	r2, [r2, #4]
 8001e48:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	687a      	ldr	r2, [r7, #4]
 8001e50:	429a      	cmp	r2, r3
 8001e52:	d103      	bne.n	8001e5c <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	689a      	ldr	r2, [r3, #8]
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2200      	movs	r2, #0
 8001e60:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems - 1U );
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	1e5a      	subs	r2, r3, #1
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	601a      	str	r2, [r3, #0]

    traceRETURN_uxListRemove( pxList->uxNumberOfItems );

    return pxList->uxNumberOfItems;
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	681b      	ldr	r3, [r3, #0]
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	3714      	adds	r7, #20
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bc80      	pop	{r7}
 8001e78:	4770      	bx	lr

08001e7a <prvCreateTask>:
                                  const char * const pcName,
                                  const configSTACK_DEPTH_TYPE uxStackDepth,
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask )
    {
 8001e7a:	b580      	push	{r7, lr}
 8001e7c:	b08a      	sub	sp, #40	@ 0x28
 8001e7e:	af04      	add	r7, sp, #16
 8001e80:	60f8      	str	r0, [r7, #12]
 8001e82:	60b9      	str	r1, [r7, #8]
 8001e84:	607a      	str	r2, [r7, #4]
 8001e86:	603b      	str	r3, [r7, #0]

            /* Allocate space for the stack used by the task being created. */
            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxStack = pvPortMallocStack( ( ( ( size_t ) uxStackDepth ) * sizeof( StackType_t ) ) );
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	009b      	lsls	r3, r3, #2
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f7ff fda7 	bl	80019e0 <pvPortMalloc>
 8001e92:	6138      	str	r0, [r7, #16]

            if( pxStack != NULL )
 8001e94:	693b      	ldr	r3, [r7, #16]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d013      	beq.n	8001ec2 <prvCreateTask+0x48>
            {
                /* Allocate space for the TCB. */
                /* MISRA Ref 11.5.1 [Malloc memory assignment] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                /* coverity[misra_c_2012_rule_11_5_violation] */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 8001e9a:	205c      	movs	r0, #92	@ 0x5c
 8001e9c:	f7ff fda0 	bl	80019e0 <pvPortMalloc>
 8001ea0:	6178      	str	r0, [r7, #20]

                if( pxNewTCB != NULL )
 8001ea2:	697b      	ldr	r3, [r7, #20]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d008      	beq.n	8001eba <prvCreateTask+0x40>
                {
                    ( void ) memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8001ea8:	225c      	movs	r2, #92	@ 0x5c
 8001eaa:	2100      	movs	r1, #0
 8001eac:	6978      	ldr	r0, [r7, #20]
 8001eae:	f000 fe1b 	bl	8002ae8 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8001eb2:	697b      	ldr	r3, [r7, #20]
 8001eb4:	693a      	ldr	r2, [r7, #16]
 8001eb6:	631a      	str	r2, [r3, #48]	@ 0x30
 8001eb8:	e005      	b.n	8001ec6 <prvCreateTask+0x4c>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8001eba:	6938      	ldr	r0, [r7, #16]
 8001ebc:	f7ff fe3e 	bl	8001b3c <vPortFree>
 8001ec0:	e001      	b.n	8001ec6 <prvCreateTask+0x4c>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	617b      	str	r3, [r7, #20]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8001ec6:	697b      	ldr	r3, [r7, #20]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d00d      	beq.n	8001ee8 <prvCreateTask+0x6e>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8001ecc:	2300      	movs	r3, #0
 8001ece:	9303      	str	r3, [sp, #12]
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	9302      	str	r3, [sp, #8]
 8001ed4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ed6:	9301      	str	r3, [sp, #4]
 8001ed8:	6a3b      	ldr	r3, [r7, #32]
 8001eda:	9300      	str	r3, [sp, #0]
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	687a      	ldr	r2, [r7, #4]
 8001ee0:	68b9      	ldr	r1, [r7, #8]
 8001ee2:	68f8      	ldr	r0, [r7, #12]
 8001ee4:	f000 f828 	bl	8001f38 <prvInitialiseNewTask>
        }

        return pxNewTCB;
 8001ee8:	697b      	ldr	r3, [r7, #20]
    }
 8001eea:	4618      	mov	r0, r3
 8001eec:	3718      	adds	r7, #24
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}

08001ef2 <xTaskCreate>:
                            const char * const pcName,
                            const configSTACK_DEPTH_TYPE uxStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8001ef2:	b580      	push	{r7, lr}
 8001ef4:	b088      	sub	sp, #32
 8001ef6:	af02      	add	r7, sp, #8
 8001ef8:	60f8      	str	r0, [r7, #12]
 8001efa:	60b9      	str	r1, [r7, #8]
 8001efc:	607a      	str	r2, [r7, #4]
 8001efe:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        BaseType_t xReturn;

        traceENTER_xTaskCreate( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );

        pxNewTCB = prvCreateTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );
 8001f00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f02:	9301      	str	r3, [sp, #4]
 8001f04:	6a3b      	ldr	r3, [r7, #32]
 8001f06:	9300      	str	r3, [sp, #0]
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	687a      	ldr	r2, [r7, #4]
 8001f0c:	68b9      	ldr	r1, [r7, #8]
 8001f0e:	68f8      	ldr	r0, [r7, #12]
 8001f10:	f7ff ffb3 	bl	8001e7a <prvCreateTask>
 8001f14:	6138      	str	r0, [r7, #16]

        if( pxNewTCB != NULL )
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d005      	beq.n	8001f28 <xTaskCreate+0x36>
                /* Set the task's affinity before scheduling it. */
                pxNewTCB->uxCoreAffinityMask = configTASK_DEFAULT_CORE_AFFINITY;
            }
            #endif

            prvAddNewTaskToReadyList( pxNewTCB );
 8001f1c:	6938      	ldr	r0, [r7, #16]
 8001f1e:	f000 f87b 	bl	8002018 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8001f22:	2301      	movs	r3, #1
 8001f24:	617b      	str	r3, [r7, #20]
 8001f26:	e002      	b.n	8001f2e <xTaskCreate+0x3c>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001f28:	f04f 33ff 	mov.w	r3, #4294967295
 8001f2c:	617b      	str	r3, [r7, #20]
        }

        traceRETURN_xTaskCreate( xReturn );

        return xReturn;
 8001f2e:	697b      	ldr	r3, [r7, #20]
    }
 8001f30:	4618      	mov	r0, r3
 8001f32:	3718      	adds	r7, #24
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}

08001f38 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b086      	sub	sp, #24
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	60f8      	str	r0, [r7, #12]
 8001f40:	60b9      	str	r1, [r7, #8]
 8001f42:	607a      	str	r2, [r7, #4]
 8001f44:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) uxStackDepth * sizeof( StackType_t ) );
 8001f46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f48:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	009b      	lsls	r3, r3, #2
 8001f4e:	461a      	mov	r2, r3
 8001f50:	21a5      	movs	r1, #165	@ 0xa5
 8001f52:	f000 fdc9 	bl	8002ae8 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 ] );
 8001f56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f58:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001f60:	3b01      	subs	r3, #1
 8001f62:	009b      	lsls	r3, r3, #2
 8001f64:	4413      	add	r3, r2
 8001f66:	613b      	str	r3, [r7, #16]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 8001f68:	693b      	ldr	r3, [r7, #16]
 8001f6a:	f023 0307 	bic.w	r3, r3, #7
 8001f6e:	613b      	str	r3, [r7, #16]
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8001f70:	68bb      	ldr	r3, [r7, #8]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d01e      	beq.n	8001fb4 <prvInitialiseNewTask+0x7c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001f76:	2300      	movs	r3, #0
 8001f78:	617b      	str	r3, [r7, #20]
 8001f7a:	e012      	b.n	8001fa2 <prvInitialiseNewTask+0x6a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001f7c:	68ba      	ldr	r2, [r7, #8]
 8001f7e:	697b      	ldr	r3, [r7, #20]
 8001f80:	4413      	add	r3, r2
 8001f82:	7819      	ldrb	r1, [r3, #0]
 8001f84:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001f86:	697b      	ldr	r3, [r7, #20]
 8001f88:	4413      	add	r3, r2
 8001f8a:	3334      	adds	r3, #52	@ 0x34
 8001f8c:	460a      	mov	r2, r1
 8001f8e:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8001f90:	68ba      	ldr	r2, [r7, #8]
 8001f92:	697b      	ldr	r3, [r7, #20]
 8001f94:	4413      	add	r3, r2
 8001f96:	781b      	ldrb	r3, [r3, #0]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d006      	beq.n	8001faa <prvInitialiseNewTask+0x72>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	3301      	adds	r3, #1
 8001fa0:	617b      	str	r3, [r7, #20]
 8001fa2:	697b      	ldr	r3, [r7, #20]
 8001fa4:	2b0f      	cmp	r3, #15
 8001fa6:	d9e9      	bls.n	8001f7c <prvInitialiseNewTask+0x44>
 8001fa8:	e000      	b.n	8001fac <prvInitialiseNewTask+0x74>
            {
                break;
 8001faa:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1U ] = '\0';
 8001fac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001fae:	2200      	movs	r2, #0
 8001fb0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001fb4:	6a3b      	ldr	r3, [r7, #32]
 8001fb6:	2b04      	cmp	r3, #4
 8001fb8:	d901      	bls.n	8001fbe <prvInitialiseNewTask+0x86>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8001fba:	2304      	movs	r3, #4
 8001fbc:	623b      	str	r3, [r7, #32]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8001fbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001fc0:	6a3a      	ldr	r2, [r7, #32]
 8001fc2:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8001fc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001fc6:	6a3a      	ldr	r2, [r7, #32]
 8001fc8:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001fca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001fcc:	3304      	adds	r3, #4
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f7ff fec3 	bl	8001d5a <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001fd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001fd6:	3318      	adds	r3, #24
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f7ff febe 	bl	8001d5a <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001fde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001fe0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001fe2:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority );
 8001fe4:	6a3b      	ldr	r3, [r7, #32]
 8001fe6:	f1c3 0205 	rsb	r2, r3, #5
 8001fea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001fec:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001fee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ff0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001ff2:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001ff4:	683a      	ldr	r2, [r7, #0]
 8001ff6:	68f9      	ldr	r1, [r7, #12]
 8001ff8:	6938      	ldr	r0, [r7, #16]
 8001ffa:	f7ff fbc1 	bl	8001780 <pxPortInitialiseStack>
 8001ffe:	4602      	mov	r2, r0
 8002000:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002002:	601a      	str	r2, [r3, #0]
            pxNewTCB->uxTaskAttributes |= taskATTRIBUTE_IS_IDLE;
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES > 1 ) */

    if( pxCreatedTask != NULL )
 8002004:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002006:	2b00      	cmp	r3, #0
 8002008:	d002      	beq.n	8002010 <prvInitialiseNewTask+0xd8>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800200a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800200c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800200e:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002010:	bf00      	nop
 8002012:	3718      	adds	r7, #24
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}

08002018 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )

    static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
    {
 8002018:	b580      	push	{r7, lr}
 800201a:	b084      	sub	sp, #16
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
        /* Ensure interrupts don't access the task lists while the lists are being
         * updated. */
        taskENTER_CRITICAL();
 8002020:	f7ff fc4a 	bl	80018b8 <vPortEnterCritical>
        {
            uxCurrentNumberOfTasks = ( UBaseType_t ) ( uxCurrentNumberOfTasks + 1U );
 8002024:	4b41      	ldr	r3, [pc, #260]	@ (800212c <prvAddNewTaskToReadyList+0x114>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	3301      	adds	r3, #1
 800202a:	4a40      	ldr	r2, [pc, #256]	@ (800212c <prvAddNewTaskToReadyList+0x114>)
 800202c:	6013      	str	r3, [r2, #0]

            if( pxCurrentTCB == NULL )
 800202e:	4b40      	ldr	r3, [pc, #256]	@ (8002130 <prvAddNewTaskToReadyList+0x118>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d109      	bne.n	800204a <prvAddNewTaskToReadyList+0x32>
            {
                /* There are no other tasks, or all the other tasks are in
                 * the suspended state - make this the current task. */
                pxCurrentTCB = pxNewTCB;
 8002036:	4a3e      	ldr	r2, [pc, #248]	@ (8002130 <prvAddNewTaskToReadyList+0x118>)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6013      	str	r3, [r2, #0]

                if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800203c:	4b3b      	ldr	r3, [pc, #236]	@ (800212c <prvAddNewTaskToReadyList+0x114>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	2b01      	cmp	r3, #1
 8002042:	d110      	bne.n	8002066 <prvAddNewTaskToReadyList+0x4e>
                {
                    /* This is the first task to be created so do the preliminary
                     * initialisation required.  We will not recover if this call
                     * fails, but we will report the failure. */
                    prvInitialiseTaskLists();
 8002044:	f000 fc18 	bl	8002878 <prvInitialiseTaskLists>
 8002048:	e00d      	b.n	8002066 <prvAddNewTaskToReadyList+0x4e>
            else
            {
                /* If the scheduler is not already running, make this task the
                 * current task if it is the highest priority task to be created
                 * so far. */
                if( xSchedulerRunning == pdFALSE )
 800204a:	4b3a      	ldr	r3, [pc, #232]	@ (8002134 <prvAddNewTaskToReadyList+0x11c>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d109      	bne.n	8002066 <prvAddNewTaskToReadyList+0x4e>
                {
                    if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002052:	4b37      	ldr	r3, [pc, #220]	@ (8002130 <prvAddNewTaskToReadyList+0x118>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800205c:	429a      	cmp	r2, r3
 800205e:	d802      	bhi.n	8002066 <prvAddNewTaskToReadyList+0x4e>
                    {
                        pxCurrentTCB = pxNewTCB;
 8002060:	4a33      	ldr	r2, [pc, #204]	@ (8002130 <prvAddNewTaskToReadyList+0x118>)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6013      	str	r3, [r2, #0]
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            uxTaskNumber++;
 8002066:	4b34      	ldr	r3, [pc, #208]	@ (8002138 <prvAddNewTaskToReadyList+0x120>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	3301      	adds	r3, #1
 800206c:	4a32      	ldr	r2, [pc, #200]	@ (8002138 <prvAddNewTaskToReadyList+0x120>)
 800206e:	6013      	str	r3, [r2, #0]

            #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002070:	4b31      	ldr	r3, [pc, #196]	@ (8002138 <prvAddNewTaskToReadyList+0x120>)
 8002072:	681a      	ldr	r2, [r3, #0]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	645a      	str	r2, [r3, #68]	@ 0x44
            }
            #endif /* configUSE_TRACE_FACILITY */
            traceTASK_CREATE( pxNewTCB );

            prvAddTaskToReadyList( pxNewTCB );
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800207c:	2201      	movs	r2, #1
 800207e:	409a      	lsls	r2, r3
 8002080:	4b2e      	ldr	r3, [pc, #184]	@ (800213c <prvAddNewTaskToReadyList+0x124>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4313      	orrs	r3, r2
 8002086:	4a2d      	ldr	r2, [pc, #180]	@ (800213c <prvAddNewTaskToReadyList+0x124>)
 8002088:	6013      	str	r3, [r2, #0]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800208e:	492c      	ldr	r1, [pc, #176]	@ (8002140 <prvAddNewTaskToReadyList+0x128>)
 8002090:	4613      	mov	r3, r2
 8002092:	009b      	lsls	r3, r3, #2
 8002094:	4413      	add	r3, r2
 8002096:	009b      	lsls	r3, r3, #2
 8002098:	440b      	add	r3, r1
 800209a:	3304      	adds	r3, #4
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	60fb      	str	r3, [r7, #12]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	68fa      	ldr	r2, [r7, #12]
 80020a4:	609a      	str	r2, [r3, #8]
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	689a      	ldr	r2, [r3, #8]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	60da      	str	r2, [r3, #12]
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	689b      	ldr	r3, [r3, #8]
 80020b2:	687a      	ldr	r2, [r7, #4]
 80020b4:	3204      	adds	r2, #4
 80020b6:	605a      	str	r2, [r3, #4]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	1d1a      	adds	r2, r3, #4
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	609a      	str	r2, [r3, #8]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80020c4:	4613      	mov	r3, r2
 80020c6:	009b      	lsls	r3, r3, #2
 80020c8:	4413      	add	r3, r2
 80020ca:	009b      	lsls	r3, r3, #2
 80020cc:	4a1c      	ldr	r2, [pc, #112]	@ (8002140 <prvAddNewTaskToReadyList+0x128>)
 80020ce:	441a      	add	r2, r3
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	615a      	str	r2, [r3, #20]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80020d8:	4919      	ldr	r1, [pc, #100]	@ (8002140 <prvAddNewTaskToReadyList+0x128>)
 80020da:	4613      	mov	r3, r2
 80020dc:	009b      	lsls	r3, r3, #2
 80020de:	4413      	add	r3, r2
 80020e0:	009b      	lsls	r3, r3, #2
 80020e2:	440b      	add	r3, r1
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	687a      	ldr	r2, [r7, #4]
 80020e8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80020ea:	1c59      	adds	r1, r3, #1
 80020ec:	4814      	ldr	r0, [pc, #80]	@ (8002140 <prvAddNewTaskToReadyList+0x128>)
 80020ee:	4613      	mov	r3, r2
 80020f0:	009b      	lsls	r3, r3, #2
 80020f2:	4413      	add	r3, r2
 80020f4:	009b      	lsls	r3, r3, #2
 80020f6:	4403      	add	r3, r0
 80020f8:	6019      	str	r1, [r3, #0]

            portSETUP_TCB( pxNewTCB );
        }
        taskEXIT_CRITICAL();
 80020fa:	f7ff fbf7 	bl	80018ec <vPortExitCritical>

        if( xSchedulerRunning != pdFALSE )
 80020fe:	4b0d      	ldr	r3, [pc, #52]	@ (8002134 <prvAddNewTaskToReadyList+0x11c>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d00e      	beq.n	8002124 <prvAddNewTaskToReadyList+0x10c>
        {
            /* If the created task is of a higher priority than the current task
             * then it should run now. */
            taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxNewTCB );
 8002106:	4b0a      	ldr	r3, [pc, #40]	@ (8002130 <prvAddNewTaskToReadyList+0x118>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002110:	429a      	cmp	r2, r3
 8002112:	d207      	bcs.n	8002124 <prvAddNewTaskToReadyList+0x10c>
 8002114:	4b0b      	ldr	r3, [pc, #44]	@ (8002144 <prvAddNewTaskToReadyList+0x12c>)
 8002116:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800211a:	601a      	str	r2, [r3, #0]
 800211c:	f3bf 8f4f 	dsb	sy
 8002120:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8002124:	bf00      	nop
 8002126:	3710      	adds	r7, #16
 8002128:	46bd      	mov	sp, r7
 800212a:	bd80      	pop	{r7, pc}
 800212c:	20004978 	.word	0x20004978
 8002130:	200048a0 	.word	0x200048a0
 8002134:	20004984 	.word	0x20004984
 8002138:	20004994 	.word	0x20004994
 800213c:	20004980 	.word	0x20004980
 8002140:	200048a4 	.word	0x200048a4
 8002144:	e000ed04 	.word	0xe000ed04

08002148 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    void vTaskDelete( TaskHandle_t xTaskToDelete )
    {
 8002148:	b580      	push	{r7, lr}
 800214a:	b086      	sub	sp, #24
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;
        BaseType_t xDeleteTCBInIdleTask = pdFALSE;
 8002150:	2300      	movs	r3, #0
 8002152:	617b      	str	r3, [r7, #20]
        BaseType_t xTaskIsRunningOrYielding;

        traceENTER_vTaskDelete( xTaskToDelete );

        taskENTER_CRITICAL();
 8002154:	f7ff fbb0 	bl	80018b8 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the calling task that is
             * being deleted. */
            pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d102      	bne.n	8002164 <vTaskDelete+0x1c>
 800215e:	4b39      	ldr	r3, [pc, #228]	@ (8002244 <vTaskDelete+0xfc>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	e000      	b.n	8002166 <vTaskDelete+0x1e>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	613b      	str	r3, [r7, #16]

            /* Remove task from the ready/delayed list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002168:	693b      	ldr	r3, [r7, #16]
 800216a:	3304      	adds	r3, #4
 800216c:	4618      	mov	r0, r3
 800216e:	f7ff fe5b 	bl	8001e28 <uxListRemove>
 8002172:	4603      	mov	r3, r0
 8002174:	2b00      	cmp	r3, #0
 8002176:	d115      	bne.n	80021a4 <vTaskDelete+0x5c>
            {
                taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8002178:	693b      	ldr	r3, [r7, #16]
 800217a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800217c:	4932      	ldr	r1, [pc, #200]	@ (8002248 <vTaskDelete+0x100>)
 800217e:	4613      	mov	r3, r2
 8002180:	009b      	lsls	r3, r3, #2
 8002182:	4413      	add	r3, r2
 8002184:	009b      	lsls	r3, r3, #2
 8002186:	440b      	add	r3, r1
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d10a      	bne.n	80021a4 <vTaskDelete+0x5c>
 800218e:	693b      	ldr	r3, [r7, #16]
 8002190:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002192:	2201      	movs	r2, #1
 8002194:	fa02 f303 	lsl.w	r3, r2, r3
 8002198:	43da      	mvns	r2, r3
 800219a:	4b2c      	ldr	r3, [pc, #176]	@ (800224c <vTaskDelete+0x104>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4013      	ands	r3, r2
 80021a0:	4a2a      	ldr	r2, [pc, #168]	@ (800224c <vTaskDelete+0x104>)
 80021a2:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80021a4:	693b      	ldr	r3, [r7, #16]
 80021a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d004      	beq.n	80021b6 <vTaskDelete+0x6e>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80021ac:	693b      	ldr	r3, [r7, #16]
 80021ae:	3318      	adds	r3, #24
 80021b0:	4618      	mov	r0, r3
 80021b2:	f7ff fe39 	bl	8001e28 <uxListRemove>

            /* Increment the uxTaskNumber also so kernel aware debuggers can
             * detect that the task lists need re-generating.  This is done before
             * portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
             * not return. */
            uxTaskNumber++;
 80021b6:	4b26      	ldr	r3, [pc, #152]	@ (8002250 <vTaskDelete+0x108>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	3301      	adds	r3, #1
 80021bc:	4a24      	ldr	r2, [pc, #144]	@ (8002250 <vTaskDelete+0x108>)
 80021be:	6013      	str	r3, [r2, #0]

            /* Use temp variable as distinct sequence points for reading volatile
             * variables prior to a logical operator to ensure compliance with
             * MISRA C 2012 Rule 13.5. */
            xTaskIsRunningOrYielding = taskTASK_IS_RUNNING_OR_SCHEDULED_TO_YIELD( pxTCB );
 80021c0:	4b20      	ldr	r3, [pc, #128]	@ (8002244 <vTaskDelete+0xfc>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	693a      	ldr	r2, [r7, #16]
 80021c6:	429a      	cmp	r2, r3
 80021c8:	d101      	bne.n	80021ce <vTaskDelete+0x86>
 80021ca:	2301      	movs	r3, #1
 80021cc:	e000      	b.n	80021d0 <vTaskDelete+0x88>
 80021ce:	2300      	movs	r3, #0
 80021d0:	60fb      	str	r3, [r7, #12]

            /* If the task is running (or yielding), we must add it to the
             * termination list so that an idle task can delete it when it is
             * no longer running. */
            if( ( xSchedulerRunning != pdFALSE ) && ( xTaskIsRunningOrYielding != pdFALSE ) )
 80021d2:	4b20      	ldr	r3, [pc, #128]	@ (8002254 <vTaskDelete+0x10c>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d010      	beq.n	80021fc <vTaskDelete+0xb4>
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d00d      	beq.n	80021fc <vTaskDelete+0xb4>
                 * deleted. This cannot complete when the task is still running
                 * on a core, as a context switch to another task is required.
                 * Place the task in the termination list. The idle task will check
                 * the termination list and free up any memory allocated by the
                 * scheduler for the TCB and stack of the deleted task. */
                vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 80021e0:	693b      	ldr	r3, [r7, #16]
 80021e2:	3304      	adds	r3, #4
 80021e4:	4619      	mov	r1, r3
 80021e6:	481c      	ldr	r0, [pc, #112]	@ (8002258 <vTaskDelete+0x110>)
 80021e8:	f7ff fdc3 	bl	8001d72 <vListInsertEnd>

                /* Increment the ucTasksDeleted variable so the idle task knows
                 * there is a task that has been deleted and that it should therefore
                 * check the xTasksWaitingTermination list. */
                ++uxDeletedTasksWaitingCleanUp;
 80021ec:	4b1b      	ldr	r3, [pc, #108]	@ (800225c <vTaskDelete+0x114>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	3301      	adds	r3, #1
 80021f2:	4a1a      	ldr	r2, [pc, #104]	@ (800225c <vTaskDelete+0x114>)
 80021f4:	6013      	str	r3, [r2, #0]
                /* Call the delete hook before portPRE_TASK_DELETE_HOOK() as
                 * portPRE_TASK_DELETE_HOOK() does not return in the Win32 port. */
                traceTASK_DELETE( pxTCB );

                /* Delete the task TCB in idle task. */
                xDeleteTCBInIdleTask = pdTRUE;
 80021f6:	2301      	movs	r3, #1
 80021f8:	617b      	str	r3, [r7, #20]
 80021fa:	e006      	b.n	800220a <vTaskDelete+0xc2>
                }
                #endif /* #if ( configNUMBER_OF_CORES > 1 ) */
            }
            else
            {
                --uxCurrentNumberOfTasks;
 80021fc:	4b18      	ldr	r3, [pc, #96]	@ (8002260 <vTaskDelete+0x118>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	3b01      	subs	r3, #1
 8002202:	4a17      	ldr	r2, [pc, #92]	@ (8002260 <vTaskDelete+0x118>)
 8002204:	6013      	str	r3, [r2, #0]
                traceTASK_DELETE( pxTCB );

                /* Reset the next expected unblock time in case it referred to
                 * the task that has just been deleted. */
                prvResetNextTaskUnblockTime();
 8002206:	f000 fbb5 	bl	8002974 <prvResetNextTaskUnblockTime>
            }
        }
        taskEXIT_CRITICAL();
 800220a:	f7ff fb6f 	bl	80018ec <vPortExitCritical>

        /* If the task is not deleting itself, call prvDeleteTCB from outside of
         * critical section. If a task deletes itself, prvDeleteTCB is called
         * from prvCheckTasksWaitingTermination which is called from Idle task. */
        if( xDeleteTCBInIdleTask != pdTRUE )
 800220e:	697b      	ldr	r3, [r7, #20]
 8002210:	2b01      	cmp	r3, #1
 8002212:	d002      	beq.n	800221a <vTaskDelete+0xd2>
        {
            prvDeleteTCB( pxTCB );
 8002214:	6938      	ldr	r0, [r7, #16]
 8002216:	f000 fb9d 	bl	8002954 <prvDeleteTCB>

        /* Force a reschedule if it is the currently running task that has just
         * been deleted. */
        #if ( configNUMBER_OF_CORES == 1 )
        {
            if( xSchedulerRunning != pdFALSE )
 800221a:	4b0e      	ldr	r3, [pc, #56]	@ (8002254 <vTaskDelete+0x10c>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d00c      	beq.n	800223c <vTaskDelete+0xf4>
            {
                if( pxTCB == pxCurrentTCB )
 8002222:	4b08      	ldr	r3, [pc, #32]	@ (8002244 <vTaskDelete+0xfc>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	693a      	ldr	r2, [r7, #16]
 8002228:	429a      	cmp	r2, r3
 800222a:	d107      	bne.n	800223c <vTaskDelete+0xf4>
                {
                    configASSERT( uxSchedulerSuspended == 0 );
                    taskYIELD_WITHIN_API();
 800222c:	4b0d      	ldr	r3, [pc, #52]	@ (8002264 <vTaskDelete+0x11c>)
 800222e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002232:	601a      	str	r2, [r3, #0]
 8002234:	f3bf 8f4f 	dsb	sy
 8002238:	f3bf 8f6f 	isb	sy
            }
        }
        #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

        traceRETURN_vTaskDelete();
    }
 800223c:	bf00      	nop
 800223e:	3718      	adds	r7, #24
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}
 8002244:	200048a0 	.word	0x200048a0
 8002248:	200048a4 	.word	0x200048a4
 800224c:	20004980 	.word	0x20004980
 8002250:	20004994 	.word	0x20004994
 8002254:	20004984 	.word	0x20004984
 8002258:	2000494c 	.word	0x2000494c
 800225c:	20004960 	.word	0x20004960
 8002260:	20004978 	.word	0x20004978
 8002264:	e000ed04 	.word	0xe000ed04

08002268 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8002268:	b580      	push	{r7, lr}
 800226a:	b084      	sub	sp, #16
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8002270:	2300      	movs	r3, #0
 8002272:	60fb      	str	r3, [r7, #12]

        traceENTER_vTaskDelay( xTicksToDelay );

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d008      	beq.n	800228c <vTaskDelay+0x24>
        {
            vTaskSuspendAll();
 800227a:	f000 f891 	bl	80023a0 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800227e:	2100      	movs	r1, #0
 8002280:	6878      	ldr	r0, [r7, #4]
 8002282:	f000 fbaf 	bl	80029e4 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8002286:	f000 f899 	bl	80023bc <xTaskResumeAll>
 800228a:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d107      	bne.n	80022a2 <vTaskDelay+0x3a>
        {
            taskYIELD_WITHIN_API();
 8002292:	4b06      	ldr	r3, [pc, #24]	@ (80022ac <vTaskDelay+0x44>)
 8002294:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002298:	601a      	str	r2, [r3, #0]
 800229a:	f3bf 8f4f 	dsb	sy
 800229e:	f3bf 8f6f 	isb	sy
        {
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_vTaskDelay();
    }
 80022a2:	bf00      	nop
 80022a4:	3710      	adds	r7, #16
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	e000ed04 	.word	0xe000ed04

080022b0 <prvCreateIdleTasks>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

static BaseType_t prvCreateIdleTasks( void )
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b08a      	sub	sp, #40	@ 0x28
 80022b4:	af02      	add	r7, sp, #8
    BaseType_t xReturn = pdPASS;
 80022b6:	2301      	movs	r3, #1
 80022b8:	61fb      	str	r3, [r7, #28]
    BaseType_t xCoreID;
    char cIdleName[ configMAX_TASK_NAME_LEN ];
    TaskFunction_t pxIdleTaskFunction = NULL;
 80022ba:	2300      	movs	r3, #0
 80022bc:	613b      	str	r3, [r7, #16]
    BaseType_t xIdleTaskNameIndex;

    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 80022be:	2300      	movs	r3, #0
 80022c0:	617b      	str	r3, [r7, #20]
 80022c2:	e011      	b.n	80022e8 <prvCreateIdleTasks+0x38>
    {
        cIdleName[ xIdleTaskNameIndex ] = configIDLE_TASK_NAME[ xIdleTaskNameIndex ];
 80022c4:	4a1c      	ldr	r2, [pc, #112]	@ (8002338 <prvCreateIdleTasks+0x88>)
 80022c6:	697b      	ldr	r3, [r7, #20]
 80022c8:	4413      	add	r3, r2
 80022ca:	7819      	ldrb	r1, [r3, #0]
 80022cc:	463a      	mov	r2, r7
 80022ce:	697b      	ldr	r3, [r7, #20]
 80022d0:	4413      	add	r3, r2
 80022d2:	460a      	mov	r2, r1
 80022d4:	701a      	strb	r2, [r3, #0]

        /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
         * configMAX_TASK_NAME_LEN characters just in case the memory after the
         * string is not accessible (extremely unlikely). */
        if( cIdleName[ xIdleTaskNameIndex ] == ( char ) 0x00 )
 80022d6:	463a      	mov	r2, r7
 80022d8:	697b      	ldr	r3, [r7, #20]
 80022da:	4413      	add	r3, r2
 80022dc:	781b      	ldrb	r3, [r3, #0]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d006      	beq.n	80022f0 <prvCreateIdleTasks+0x40>
    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 80022e2:	697b      	ldr	r3, [r7, #20]
 80022e4:	3301      	adds	r3, #1
 80022e6:	617b      	str	r3, [r7, #20]
 80022e8:	697b      	ldr	r3, [r7, #20]
 80022ea:	2b0f      	cmp	r3, #15
 80022ec:	ddea      	ble.n	80022c4 <prvCreateIdleTasks+0x14>
 80022ee:	e000      	b.n	80022f2 <prvCreateIdleTasks+0x42>
        {
            break;
 80022f0:	bf00      	nop
            mtCOVERAGE_TEST_MARKER();
        }
    }

    /* Add each idle task at the lowest priority. */
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 80022f2:	2300      	movs	r3, #0
 80022f4:	61bb      	str	r3, [r7, #24]
 80022f6:	e015      	b.n	8002324 <prvCreateIdleTasks+0x74>
    {
        #if ( configNUMBER_OF_CORES == 1 )
        {
            pxIdleTaskFunction = prvIdleTask;
 80022f8:	4b10      	ldr	r3, [pc, #64]	@ (800233c <prvCreateIdleTasks+0x8c>)
 80022fa:	613b      	str	r3, [r7, #16]
            }
        }
        #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( pxIdleTaskFunction,
 80022fc:	69bb      	ldr	r3, [r7, #24]
 80022fe:	009b      	lsls	r3, r3, #2
 8002300:	4a0f      	ldr	r2, [pc, #60]	@ (8002340 <prvCreateIdleTasks+0x90>)
 8002302:	4413      	add	r3, r2
 8002304:	4639      	mov	r1, r7
 8002306:	9301      	str	r3, [sp, #4]
 8002308:	2300      	movs	r3, #0
 800230a:	9300      	str	r3, [sp, #0]
 800230c:	2300      	movs	r3, #0
 800230e:	2278      	movs	r2, #120	@ 0x78
 8002310:	6938      	ldr	r0, [r7, #16]
 8002312:	f7ff fdee 	bl	8001ef2 <xTaskCreate>
 8002316:	61f8      	str	r0, [r7, #28]
                                   &xIdleTaskHandles[ xCoreID ] );
        }
        #endif /* configSUPPORT_STATIC_ALLOCATION */

        /* Break the loop if any of the idle task is failed to be created. */
        if( xReturn == pdFAIL )
 8002318:	69fb      	ldr	r3, [r7, #28]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d006      	beq.n	800232c <prvCreateIdleTasks+0x7c>
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 800231e:	69bb      	ldr	r3, [r7, #24]
 8002320:	3301      	adds	r3, #1
 8002322:	61bb      	str	r3, [r7, #24]
 8002324:	69bb      	ldr	r3, [r7, #24]
 8002326:	2b00      	cmp	r3, #0
 8002328:	dde6      	ble.n	80022f8 <prvCreateIdleTasks+0x48>
 800232a:	e000      	b.n	800232e <prvCreateIdleTasks+0x7e>
        {
            break;
 800232c:	bf00      	nop
            }
            #endif
        }
    }

    return xReturn;
 800232e:	69fb      	ldr	r3, [r7, #28]
}
 8002330:	4618      	mov	r0, r3
 8002332:	3720      	adds	r7, #32
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}
 8002338:	08002b70 	.word	0x08002b70
 800233c:	08002849 	.word	0x08002849
 8002340:	2000499c 	.word	0x2000499c

08002344 <vTaskStartScheduler>:

/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b082      	sub	sp, #8
 8002348:	af00      	add	r7, sp, #0
         * the number of bits as confNUMBER_OF_CORES. */
        configASSERT( ( sizeof( UBaseType_t ) * taskBITS_PER_BYTE ) >= configNUMBER_OF_CORES );
    }
    #endif /* #if ( configUSE_CORE_AFFINITY == 1 ) && ( configNUMBER_OF_CORES > 1 ) */

    xReturn = prvCreateIdleTasks();
 800234a:	f7ff ffb1 	bl	80022b0 <prvCreateIdleTasks>
 800234e:	6078      	str	r0, [r7, #4]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2b01      	cmp	r3, #1
 8002354:	d115      	bne.n	8002382 <vTaskStartScheduler+0x3e>
    __asm volatile
 8002356:	f04f 03bf 	mov.w	r3, #191	@ 0xbf
 800235a:	f383 8811 	msr	BASEPRI, r3
 800235e:	f3bf 8f6f 	isb	sy
 8002362:	f3bf 8f4f 	dsb	sy
 8002366:	603b      	str	r3, [r7, #0]
}
 8002368:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 800236a:	4b09      	ldr	r3, [pc, #36]	@ (8002390 <vTaskStartScheduler+0x4c>)
 800236c:	f04f 32ff 	mov.w	r2, #4294967295
 8002370:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8002372:	4b08      	ldr	r3, [pc, #32]	@ (8002394 <vTaskStartScheduler+0x50>)
 8002374:	2201      	movs	r2, #1
 8002376:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002378:	4b07      	ldr	r3, [pc, #28]	@ (8002398 <vTaskStartScheduler+0x54>)
 800237a:	2200      	movs	r2, #0
 800237c:	601a      	str	r2, [r3, #0]
        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */

        /* The return value for xPortStartScheduler is not required
         * hence using a void datatype. */
        ( void ) xPortStartScheduler();
 800237e:	f7ff fa6d 	bl	800185c <xPortStartScheduler>
     * meaning xIdleTaskHandles are not used anywhere else. */
    ( void ) xIdleTaskHandles;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002382:	4b06      	ldr	r3, [pc, #24]	@ (800239c <vTaskStartScheduler+0x58>)
 8002384:	681b      	ldr	r3, [r3, #0]

    traceRETURN_vTaskStartScheduler();
}
 8002386:	bf00      	nop
 8002388:	3708      	adds	r7, #8
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}
 800238e:	bf00      	nop
 8002390:	20004998 	.word	0x20004998
 8002394:	20004984 	.word	0x20004984
 8002398:	2000497c 	.word	0x2000497c
 800239c:	20000010 	.word	0x20000010

080023a0 <vTaskSuspendAll>:
    traceRETURN_vTaskEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80023a0:	b480      	push	{r7}
 80023a2:	af00      	add	r7, sp, #0
         * do not otherwise exhibit real time behaviour. */
        portSOFTWARE_BARRIER();

        /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
         * is used to allow calls to vTaskSuspendAll() to nest. */
        uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended + 1U );
 80023a4:	4b04      	ldr	r3, [pc, #16]	@ (80023b8 <vTaskSuspendAll+0x18>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	3301      	adds	r3, #1
 80023aa:	4a03      	ldr	r2, [pc, #12]	@ (80023b8 <vTaskSuspendAll+0x18>)
 80023ac:	6013      	str	r3, [r2, #0]
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_vTaskSuspendAll();
}
 80023ae:	bf00      	nop
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bc80      	pop	{r7}
 80023b4:	4770      	bx	lr
 80023b6:	bf00      	nop
 80023b8:	200049a0 	.word	0x200049a0

080023bc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b088      	sub	sp, #32
 80023c0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80023c2:	2300      	movs	r3, #0
 80023c4:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 80023c6:	2300      	movs	r3, #0
 80023c8:	61bb      	str	r3, [r7, #24]
        /* It is possible that an ISR caused a task to be removed from an event
         * list while the scheduler was suspended.  If this was the case then the
         * removed task will have been added to the xPendingReadyList.  Once the
         * scheduler has been resumed it is safe to move all the pending ready
         * tasks from this list into their appropriate ready list. */
        taskENTER_CRITICAL();
 80023ca:	f7ff fa75 	bl	80018b8 <vPortEnterCritical>
        {
            BaseType_t xCoreID;
            xCoreID = ( BaseType_t ) portGET_CORE_ID();
 80023ce:	2300      	movs	r3, #0
 80023d0:	613b      	str	r3, [r7, #16]

            /* If uxSchedulerSuspended is zero then this function does not match a
             * previous call to vTaskSuspendAll(). */
            configASSERT( uxSchedulerSuspended != 0U );

            uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended - 1U );
 80023d2:	4b6d      	ldr	r3, [pc, #436]	@ (8002588 <xTaskResumeAll+0x1cc>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	3b01      	subs	r3, #1
 80023d8:	4a6b      	ldr	r2, [pc, #428]	@ (8002588 <xTaskResumeAll+0x1cc>)
 80023da:	6013      	str	r3, [r2, #0]
            portRELEASE_TASK_LOCK();

            if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 80023dc:	4b6a      	ldr	r3, [pc, #424]	@ (8002588 <xTaskResumeAll+0x1cc>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	f040 80ca 	bne.w	800257a <xTaskResumeAll+0x1be>
            {
                if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80023e6:	4b69      	ldr	r3, [pc, #420]	@ (800258c <xTaskResumeAll+0x1d0>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	f000 80c5 	beq.w	800257a <xTaskResumeAll+0x1be>
                {
                    /* Move any readied tasks from the pending list into the
                     * appropriate ready list. */
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80023f0:	e08e      	b.n	8002510 <xTaskResumeAll+0x154>
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80023f2:	4b67      	ldr	r3, [pc, #412]	@ (8002590 <xTaskResumeAll+0x1d4>)
 80023f4:	68db      	ldr	r3, [r3, #12]
 80023f6:	68db      	ldr	r3, [r3, #12]
 80023f8:	61fb      	str	r3, [r7, #28]
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80023fa:	69fb      	ldr	r3, [r7, #28]
 80023fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023fe:	60fb      	str	r3, [r7, #12]
 8002400:	69fb      	ldr	r3, [r7, #28]
 8002402:	69db      	ldr	r3, [r3, #28]
 8002404:	69fa      	ldr	r2, [r7, #28]
 8002406:	6a12      	ldr	r2, [r2, #32]
 8002408:	609a      	str	r2, [r3, #8]
 800240a:	69fb      	ldr	r3, [r7, #28]
 800240c:	6a1b      	ldr	r3, [r3, #32]
 800240e:	69fa      	ldr	r2, [r7, #28]
 8002410:	69d2      	ldr	r2, [r2, #28]
 8002412:	605a      	str	r2, [r3, #4]
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	685a      	ldr	r2, [r3, #4]
 8002418:	69fb      	ldr	r3, [r7, #28]
 800241a:	3318      	adds	r3, #24
 800241c:	429a      	cmp	r2, r3
 800241e:	d103      	bne.n	8002428 <xTaskResumeAll+0x6c>
 8002420:	69fb      	ldr	r3, [r7, #28]
 8002422:	6a1a      	ldr	r2, [r3, #32]
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	605a      	str	r2, [r3, #4]
 8002428:	69fb      	ldr	r3, [r7, #28]
 800242a:	2200      	movs	r2, #0
 800242c:	629a      	str	r2, [r3, #40]	@ 0x28
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	1e5a      	subs	r2, r3, #1
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	601a      	str	r2, [r3, #0]
                        portMEMORY_BARRIER();
                        listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002438:	69fb      	ldr	r3, [r7, #28]
 800243a:	695b      	ldr	r3, [r3, #20]
 800243c:	60bb      	str	r3, [r7, #8]
 800243e:	69fb      	ldr	r3, [r7, #28]
 8002440:	689b      	ldr	r3, [r3, #8]
 8002442:	69fa      	ldr	r2, [r7, #28]
 8002444:	68d2      	ldr	r2, [r2, #12]
 8002446:	609a      	str	r2, [r3, #8]
 8002448:	69fb      	ldr	r3, [r7, #28]
 800244a:	68db      	ldr	r3, [r3, #12]
 800244c:	69fa      	ldr	r2, [r7, #28]
 800244e:	6892      	ldr	r2, [r2, #8]
 8002450:	605a      	str	r2, [r3, #4]
 8002452:	68bb      	ldr	r3, [r7, #8]
 8002454:	685a      	ldr	r2, [r3, #4]
 8002456:	69fb      	ldr	r3, [r7, #28]
 8002458:	3304      	adds	r3, #4
 800245a:	429a      	cmp	r2, r3
 800245c:	d103      	bne.n	8002466 <xTaskResumeAll+0xaa>
 800245e:	69fb      	ldr	r3, [r7, #28]
 8002460:	68da      	ldr	r2, [r3, #12]
 8002462:	68bb      	ldr	r3, [r7, #8]
 8002464:	605a      	str	r2, [r3, #4]
 8002466:	69fb      	ldr	r3, [r7, #28]
 8002468:	2200      	movs	r2, #0
 800246a:	615a      	str	r2, [r3, #20]
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	1e5a      	subs	r2, r3, #1
 8002472:	68bb      	ldr	r3, [r7, #8]
 8002474:	601a      	str	r2, [r3, #0]
                        prvAddTaskToReadyList( pxTCB );
 8002476:	69fb      	ldr	r3, [r7, #28]
 8002478:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800247a:	2201      	movs	r2, #1
 800247c:	409a      	lsls	r2, r3
 800247e:	4b45      	ldr	r3, [pc, #276]	@ (8002594 <xTaskResumeAll+0x1d8>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4313      	orrs	r3, r2
 8002484:	4a43      	ldr	r2, [pc, #268]	@ (8002594 <xTaskResumeAll+0x1d8>)
 8002486:	6013      	str	r3, [r2, #0]
 8002488:	69fb      	ldr	r3, [r7, #28]
 800248a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800248c:	4942      	ldr	r1, [pc, #264]	@ (8002598 <xTaskResumeAll+0x1dc>)
 800248e:	4613      	mov	r3, r2
 8002490:	009b      	lsls	r3, r3, #2
 8002492:	4413      	add	r3, r2
 8002494:	009b      	lsls	r3, r3, #2
 8002496:	440b      	add	r3, r1
 8002498:	3304      	adds	r3, #4
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	607b      	str	r3, [r7, #4]
 800249e:	69fb      	ldr	r3, [r7, #28]
 80024a0:	687a      	ldr	r2, [r7, #4]
 80024a2:	609a      	str	r2, [r3, #8]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	689a      	ldr	r2, [r3, #8]
 80024a8:	69fb      	ldr	r3, [r7, #28]
 80024aa:	60da      	str	r2, [r3, #12]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	69fa      	ldr	r2, [r7, #28]
 80024b2:	3204      	adds	r2, #4
 80024b4:	605a      	str	r2, [r3, #4]
 80024b6:	69fb      	ldr	r3, [r7, #28]
 80024b8:	1d1a      	adds	r2, r3, #4
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	609a      	str	r2, [r3, #8]
 80024be:	69fb      	ldr	r3, [r7, #28]
 80024c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80024c2:	4613      	mov	r3, r2
 80024c4:	009b      	lsls	r3, r3, #2
 80024c6:	4413      	add	r3, r2
 80024c8:	009b      	lsls	r3, r3, #2
 80024ca:	4a33      	ldr	r2, [pc, #204]	@ (8002598 <xTaskResumeAll+0x1dc>)
 80024cc:	441a      	add	r2, r3
 80024ce:	69fb      	ldr	r3, [r7, #28]
 80024d0:	615a      	str	r2, [r3, #20]
 80024d2:	69fb      	ldr	r3, [r7, #28]
 80024d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80024d6:	4930      	ldr	r1, [pc, #192]	@ (8002598 <xTaskResumeAll+0x1dc>)
 80024d8:	4613      	mov	r3, r2
 80024da:	009b      	lsls	r3, r3, #2
 80024dc:	4413      	add	r3, r2
 80024de:	009b      	lsls	r3, r3, #2
 80024e0:	440b      	add	r3, r1
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	69fa      	ldr	r2, [r7, #28]
 80024e6:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80024e8:	1c59      	adds	r1, r3, #1
 80024ea:	482b      	ldr	r0, [pc, #172]	@ (8002598 <xTaskResumeAll+0x1dc>)
 80024ec:	4613      	mov	r3, r2
 80024ee:	009b      	lsls	r3, r3, #2
 80024f0:	4413      	add	r3, r2
 80024f2:	009b      	lsls	r3, r3, #2
 80024f4:	4403      	add	r3, r0
 80024f6:	6019      	str	r1, [r3, #0]

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            /* If the moved task has a priority higher than the current
                             * task then a yield must be performed. */
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80024f8:	69fb      	ldr	r3, [r7, #28]
 80024fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80024fc:	4b27      	ldr	r3, [pc, #156]	@ (800259c <xTaskResumeAll+0x1e0>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002502:	429a      	cmp	r2, r3
 8002504:	d904      	bls.n	8002510 <xTaskResumeAll+0x154>
                            {
                                xYieldPendings[ xCoreID ] = pdTRUE;
 8002506:	4a26      	ldr	r2, [pc, #152]	@ (80025a0 <xTaskResumeAll+0x1e4>)
 8002508:	693b      	ldr	r3, [r7, #16]
 800250a:	2101      	movs	r1, #1
 800250c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002510:	4b1f      	ldr	r3, [pc, #124]	@ (8002590 <xTaskResumeAll+0x1d4>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	2b00      	cmp	r3, #0
 8002516:	f47f af6c 	bne.w	80023f2 <xTaskResumeAll+0x36>
                             * which sets xYieldPendings for the current core to pdTRUE. */
                        }
                        #endif /* #if ( configNUMBER_OF_CORES == 1 ) */
                    }

                    if( pxTCB != NULL )
 800251a:	69fb      	ldr	r3, [r7, #28]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d001      	beq.n	8002524 <xTaskResumeAll+0x168>
                         * which may have prevented the next unblock time from being
                         * re-calculated, in which case re-calculate it now.  Mainly
                         * important for low power tickless implementations, where
                         * this can prevent an unnecessary exit from low power
                         * state. */
                        prvResetNextTaskUnblockTime();
 8002520:	f000 fa28 	bl	8002974 <prvResetNextTaskUnblockTime>
                     * It should be safe to call xTaskIncrementTick here from any core
                     * since we are in a critical section and xTaskIncrementTick itself
                     * protects itself within a critical section. Suspending the scheduler
                     * from any core causes xTaskIncrementTick to increment uxPendedCounts. */
                    {
                        TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002524:	4b1f      	ldr	r3, [pc, #124]	@ (80025a4 <xTaskResumeAll+0x1e8>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	617b      	str	r3, [r7, #20]

                        if( xPendedCounts > ( TickType_t ) 0U )
 800252a:	697b      	ldr	r3, [r7, #20]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d012      	beq.n	8002556 <xTaskResumeAll+0x19a>
                        {
                            do
                            {
                                if( xTaskIncrementTick() != pdFALSE )
 8002530:	f000 f83c 	bl	80025ac <xTaskIncrementTick>
 8002534:	4603      	mov	r3, r0
 8002536:	2b00      	cmp	r3, #0
 8002538:	d004      	beq.n	8002544 <xTaskResumeAll+0x188>
                                {
                                    /* Other cores are interrupted from
                                     * within xTaskIncrementTick(). */
                                    xYieldPendings[ xCoreID ] = pdTRUE;
 800253a:	4a19      	ldr	r2, [pc, #100]	@ (80025a0 <xTaskResumeAll+0x1e4>)
 800253c:	693b      	ldr	r3, [r7, #16]
 800253e:	2101      	movs	r1, #1
 8002540:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                else
                                {
                                    mtCOVERAGE_TEST_MARKER();
                                }

                                --xPendedCounts;
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	3b01      	subs	r3, #1
 8002548:	617b      	str	r3, [r7, #20]
                            } while( xPendedCounts > ( TickType_t ) 0U );
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d1ef      	bne.n	8002530 <xTaskResumeAll+0x174>

                            xPendedTicks = 0;
 8002550:	4b14      	ldr	r3, [pc, #80]	@ (80025a4 <xTaskResumeAll+0x1e8>)
 8002552:	2200      	movs	r2, #0
 8002554:	601a      	str	r2, [r3, #0]
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }

                    if( xYieldPendings[ xCoreID ] != pdFALSE )
 8002556:	4a12      	ldr	r2, [pc, #72]	@ (80025a0 <xTaskResumeAll+0x1e4>)
 8002558:	693b      	ldr	r3, [r7, #16]
 800255a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d00b      	beq.n	800257a <xTaskResumeAll+0x1be>
                    {
                        #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8002562:	2301      	movs	r3, #1
 8002564:	61bb      	str	r3, [r7, #24]
                        }
                        #endif /* #if ( configUSE_PREEMPTION != 0 ) */

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            taskYIELD_TASK_CORE_IF_USING_PREEMPTION( pxCurrentTCB );
 8002566:	4b0d      	ldr	r3, [pc, #52]	@ (800259c <xTaskResumeAll+0x1e0>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4b0f      	ldr	r3, [pc, #60]	@ (80025a8 <xTaskResumeAll+0x1ec>)
 800256c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002570:	601a      	str	r2, [r3, #0]
 8002572:	f3bf 8f4f 	dsb	sy
 8002576:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800257a:	f7ff f9b7 	bl	80018ec <vPortExitCritical>
    }

    traceRETURN_xTaskResumeAll( xAlreadyYielded );

    return xAlreadyYielded;
 800257e:	69bb      	ldr	r3, [r7, #24]
}
 8002580:	4618      	mov	r0, r3
 8002582:	3720      	adds	r7, #32
 8002584:	46bd      	mov	sp, r7
 8002586:	bd80      	pop	{r7, pc}
 8002588:	200049a0 	.word	0x200049a0
 800258c:	20004978 	.word	0x20004978
 8002590:	20004938 	.word	0x20004938
 8002594:	20004980 	.word	0x20004980
 8002598:	200048a4 	.word	0x200048a4
 800259c:	200048a0 	.word	0x200048a0
 80025a0:	2000498c 	.word	0x2000498c
 80025a4:	20004988 	.word	0x20004988
 80025a8:	e000ed04 	.word	0xe000ed04

080025ac <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b088      	sub	sp, #32
 80025b0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80025b2:	2300      	movs	r3, #0
 80025b4:	61fb      	str	r3, [r7, #28]

    /* Tick increment should occur on every kernel timer event. Core 0 has the
     * responsibility to increment the tick, or increment the pended ticks if the
     * scheduler is suspended.  If pended ticks is greater than zero, the core that
     * calls xTaskResumeAll has the responsibility to increment the tick. */
    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 80025b6:	4b76      	ldr	r3, [pc, #472]	@ (8002790 <xTaskIncrementTick+0x1e4>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	f040 80de 	bne.w	800277c <xTaskIncrementTick+0x1d0>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80025c0:	4b74      	ldr	r3, [pc, #464]	@ (8002794 <xTaskIncrementTick+0x1e8>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	3301      	adds	r3, #1
 80025c6:	61bb      	str	r3, [r7, #24]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80025c8:	4a72      	ldr	r2, [pc, #456]	@ (8002794 <xTaskIncrementTick+0x1e8>)
 80025ca:	69bb      	ldr	r3, [r7, #24]
 80025cc:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U )
 80025ce:	69bb      	ldr	r3, [r7, #24]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d110      	bne.n	80025f6 <xTaskIncrementTick+0x4a>
        {
            taskSWITCH_DELAYED_LISTS();
 80025d4:	4b70      	ldr	r3, [pc, #448]	@ (8002798 <xTaskIncrementTick+0x1ec>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	617b      	str	r3, [r7, #20]
 80025da:	4b70      	ldr	r3, [pc, #448]	@ (800279c <xTaskIncrementTick+0x1f0>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4a6e      	ldr	r2, [pc, #440]	@ (8002798 <xTaskIncrementTick+0x1ec>)
 80025e0:	6013      	str	r3, [r2, #0]
 80025e2:	4a6e      	ldr	r2, [pc, #440]	@ (800279c <xTaskIncrementTick+0x1f0>)
 80025e4:	697b      	ldr	r3, [r7, #20]
 80025e6:	6013      	str	r3, [r2, #0]
 80025e8:	4b6d      	ldr	r3, [pc, #436]	@ (80027a0 <xTaskIncrementTick+0x1f4>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	3301      	adds	r3, #1
 80025ee:	4a6c      	ldr	r2, [pc, #432]	@ (80027a0 <xTaskIncrementTick+0x1f4>)
 80025f0:	6013      	str	r3, [r2, #0]
 80025f2:	f000 f9bf 	bl	8002974 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80025f6:	4b6b      	ldr	r3, [pc, #428]	@ (80027a4 <xTaskIncrementTick+0x1f8>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	69ba      	ldr	r2, [r7, #24]
 80025fc:	429a      	cmp	r2, r3
 80025fe:	f0c0 80a8 	bcc.w	8002752 <xTaskIncrementTick+0x1a6>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002602:	4b65      	ldr	r3, [pc, #404]	@ (8002798 <xTaskIncrementTick+0x1ec>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d104      	bne.n	8002616 <xTaskIncrementTick+0x6a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY;
 800260c:	4b65      	ldr	r3, [pc, #404]	@ (80027a4 <xTaskIncrementTick+0x1f8>)
 800260e:	f04f 32ff 	mov.w	r2, #4294967295
 8002612:	601a      	str	r2, [r3, #0]
                    break;
 8002614:	e09d      	b.n	8002752 <xTaskIncrementTick+0x1a6>
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    /* MISRA Ref 11.5.3 [Void pointer assignment] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                    /* coverity[misra_c_2012_rule_11_5_violation] */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002616:	4b60      	ldr	r3, [pc, #384]	@ (8002798 <xTaskIncrementTick+0x1ec>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	68db      	ldr	r3, [r3, #12]
 800261c:	68db      	ldr	r3, [r3, #12]
 800261e:	613b      	str	r3, [r7, #16]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002620:	693b      	ldr	r3, [r7, #16]
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	60fb      	str	r3, [r7, #12]

                    if( xConstTickCount < xItemValue )
 8002626:	69ba      	ldr	r2, [r7, #24]
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	429a      	cmp	r2, r3
 800262c:	d203      	bcs.n	8002636 <xTaskIncrementTick+0x8a>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800262e:	4a5d      	ldr	r2, [pc, #372]	@ (80027a4 <xTaskIncrementTick+0x1f8>)
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	6013      	str	r3, [r2, #0]
                        break;
 8002634:	e08d      	b.n	8002752 <xTaskIncrementTick+0x1a6>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002636:	693b      	ldr	r3, [r7, #16]
 8002638:	695b      	ldr	r3, [r3, #20]
 800263a:	60bb      	str	r3, [r7, #8]
 800263c:	693b      	ldr	r3, [r7, #16]
 800263e:	689b      	ldr	r3, [r3, #8]
 8002640:	693a      	ldr	r2, [r7, #16]
 8002642:	68d2      	ldr	r2, [r2, #12]
 8002644:	609a      	str	r2, [r3, #8]
 8002646:	693b      	ldr	r3, [r7, #16]
 8002648:	68db      	ldr	r3, [r3, #12]
 800264a:	693a      	ldr	r2, [r7, #16]
 800264c:	6892      	ldr	r2, [r2, #8]
 800264e:	605a      	str	r2, [r3, #4]
 8002650:	68bb      	ldr	r3, [r7, #8]
 8002652:	685a      	ldr	r2, [r3, #4]
 8002654:	693b      	ldr	r3, [r7, #16]
 8002656:	3304      	adds	r3, #4
 8002658:	429a      	cmp	r2, r3
 800265a:	d103      	bne.n	8002664 <xTaskIncrementTick+0xb8>
 800265c:	693b      	ldr	r3, [r7, #16]
 800265e:	68da      	ldr	r2, [r3, #12]
 8002660:	68bb      	ldr	r3, [r7, #8]
 8002662:	605a      	str	r2, [r3, #4]
 8002664:	693b      	ldr	r3, [r7, #16]
 8002666:	2200      	movs	r2, #0
 8002668:	615a      	str	r2, [r3, #20]
 800266a:	68bb      	ldr	r3, [r7, #8]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	1e5a      	subs	r2, r3, #1
 8002670:	68bb      	ldr	r3, [r7, #8]
 8002672:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002674:	693b      	ldr	r3, [r7, #16]
 8002676:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002678:	2b00      	cmp	r3, #0
 800267a:	d01e      	beq.n	80026ba <xTaskIncrementTick+0x10e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800267c:	693b      	ldr	r3, [r7, #16]
 800267e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002680:	607b      	str	r3, [r7, #4]
 8002682:	693b      	ldr	r3, [r7, #16]
 8002684:	69db      	ldr	r3, [r3, #28]
 8002686:	693a      	ldr	r2, [r7, #16]
 8002688:	6a12      	ldr	r2, [r2, #32]
 800268a:	609a      	str	r2, [r3, #8]
 800268c:	693b      	ldr	r3, [r7, #16]
 800268e:	6a1b      	ldr	r3, [r3, #32]
 8002690:	693a      	ldr	r2, [r7, #16]
 8002692:	69d2      	ldr	r2, [r2, #28]
 8002694:	605a      	str	r2, [r3, #4]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	685a      	ldr	r2, [r3, #4]
 800269a:	693b      	ldr	r3, [r7, #16]
 800269c:	3318      	adds	r3, #24
 800269e:	429a      	cmp	r2, r3
 80026a0:	d103      	bne.n	80026aa <xTaskIncrementTick+0xfe>
 80026a2:	693b      	ldr	r3, [r7, #16]
 80026a4:	6a1a      	ldr	r2, [r3, #32]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	605a      	str	r2, [r3, #4]
 80026aa:	693b      	ldr	r3, [r7, #16]
 80026ac:	2200      	movs	r2, #0
 80026ae:	629a      	str	r2, [r3, #40]	@ 0x28
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	1e5a      	subs	r2, r3, #1
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80026ba:	693b      	ldr	r3, [r7, #16]
 80026bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026be:	2201      	movs	r2, #1
 80026c0:	409a      	lsls	r2, r3
 80026c2:	4b39      	ldr	r3, [pc, #228]	@ (80027a8 <xTaskIncrementTick+0x1fc>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4313      	orrs	r3, r2
 80026c8:	4a37      	ldr	r2, [pc, #220]	@ (80027a8 <xTaskIncrementTick+0x1fc>)
 80026ca:	6013      	str	r3, [r2, #0]
 80026cc:	693b      	ldr	r3, [r7, #16]
 80026ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80026d0:	4936      	ldr	r1, [pc, #216]	@ (80027ac <xTaskIncrementTick+0x200>)
 80026d2:	4613      	mov	r3, r2
 80026d4:	009b      	lsls	r3, r3, #2
 80026d6:	4413      	add	r3, r2
 80026d8:	009b      	lsls	r3, r3, #2
 80026da:	440b      	add	r3, r1
 80026dc:	3304      	adds	r3, #4
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	603b      	str	r3, [r7, #0]
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	683a      	ldr	r2, [r7, #0]
 80026e6:	609a      	str	r2, [r3, #8]
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	689a      	ldr	r2, [r3, #8]
 80026ec:	693b      	ldr	r3, [r7, #16]
 80026ee:	60da      	str	r2, [r3, #12]
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	689b      	ldr	r3, [r3, #8]
 80026f4:	693a      	ldr	r2, [r7, #16]
 80026f6:	3204      	adds	r2, #4
 80026f8:	605a      	str	r2, [r3, #4]
 80026fa:	693b      	ldr	r3, [r7, #16]
 80026fc:	1d1a      	adds	r2, r3, #4
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	609a      	str	r2, [r3, #8]
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002706:	4613      	mov	r3, r2
 8002708:	009b      	lsls	r3, r3, #2
 800270a:	4413      	add	r3, r2
 800270c:	009b      	lsls	r3, r3, #2
 800270e:	4a27      	ldr	r2, [pc, #156]	@ (80027ac <xTaskIncrementTick+0x200>)
 8002710:	441a      	add	r2, r3
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	615a      	str	r2, [r3, #20]
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800271a:	4924      	ldr	r1, [pc, #144]	@ (80027ac <xTaskIncrementTick+0x200>)
 800271c:	4613      	mov	r3, r2
 800271e:	009b      	lsls	r3, r3, #2
 8002720:	4413      	add	r3, r2
 8002722:	009b      	lsls	r3, r3, #2
 8002724:	440b      	add	r3, r1
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	693a      	ldr	r2, [r7, #16]
 800272a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800272c:	1c59      	adds	r1, r3, #1
 800272e:	481f      	ldr	r0, [pc, #124]	@ (80027ac <xTaskIncrementTick+0x200>)
 8002730:	4613      	mov	r3, r2
 8002732:	009b      	lsls	r3, r3, #2
 8002734:	4413      	add	r3, r2
 8002736:	009b      	lsls	r3, r3, #2
 8002738:	4403      	add	r3, r0
 800273a:	6019      	str	r1, [r3, #0]
                             * task.
                             * The case of equal priority tasks sharing
                             * processing time (which happens when both
                             * preemption and time slicing are on) is
                             * handled below.*/
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800273c:	693b      	ldr	r3, [r7, #16]
 800273e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002740:	4b1b      	ldr	r3, [pc, #108]	@ (80027b0 <xTaskIncrementTick+0x204>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002746:	429a      	cmp	r2, r3
 8002748:	f67f af5b 	bls.w	8002602 <xTaskIncrementTick+0x56>
                            {
                                xSwitchRequired = pdTRUE;
 800274c:	2301      	movs	r3, #1
 800274e:	61fb      	str	r3, [r7, #28]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002750:	e757      	b.n	8002602 <xTaskIncrementTick+0x56>
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > 1U )
 8002752:	4b17      	ldr	r3, [pc, #92]	@ (80027b0 <xTaskIncrementTick+0x204>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002758:	4914      	ldr	r1, [pc, #80]	@ (80027ac <xTaskIncrementTick+0x200>)
 800275a:	4613      	mov	r3, r2
 800275c:	009b      	lsls	r3, r3, #2
 800275e:	4413      	add	r3, r2
 8002760:	009b      	lsls	r3, r3, #2
 8002762:	440b      	add	r3, r1
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	2b01      	cmp	r3, #1
 8002768:	d901      	bls.n	800276e <xTaskIncrementTick+0x1c2>
                {
                    xSwitchRequired = pdTRUE;
 800276a:	2301      	movs	r3, #1
 800276c:	61fb      	str	r3, [r7, #28]
        #if ( configUSE_PREEMPTION == 1 )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                /* For single core the core ID is always 0. */
                if( xYieldPendings[ 0 ] != pdFALSE )
 800276e:	4b11      	ldr	r3, [pc, #68]	@ (80027b4 <xTaskIncrementTick+0x208>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d007      	beq.n	8002786 <xTaskIncrementTick+0x1da>
                {
                    xSwitchRequired = pdTRUE;
 8002776:	2301      	movs	r3, #1
 8002778:	61fb      	str	r3, [r7, #28]
 800277a:	e004      	b.n	8002786 <xTaskIncrementTick+0x1da>
        }
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    else
    {
        xPendedTicks += 1U;
 800277c:	4b0e      	ldr	r3, [pc, #56]	@ (80027b8 <xTaskIncrementTick+0x20c>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	3301      	adds	r3, #1
 8002782:	4a0d      	ldr	r2, [pc, #52]	@ (80027b8 <xTaskIncrementTick+0x20c>)
 8002784:	6013      	str	r3, [r2, #0]
        #endif
    }

    traceRETURN_xTaskIncrementTick( xSwitchRequired );

    return xSwitchRequired;
 8002786:	69fb      	ldr	r3, [r7, #28]
}
 8002788:	4618      	mov	r0, r3
 800278a:	3720      	adds	r7, #32
 800278c:	46bd      	mov	sp, r7
 800278e:	bd80      	pop	{r7, pc}
 8002790:	200049a0 	.word	0x200049a0
 8002794:	2000497c 	.word	0x2000497c
 8002798:	20004930 	.word	0x20004930
 800279c:	20004934 	.word	0x20004934
 80027a0:	20004990 	.word	0x20004990
 80027a4:	20004998 	.word	0x20004998
 80027a8:	20004980 	.word	0x20004980
 80027ac:	200048a4 	.word	0x200048a4
 80027b0:	200048a0 	.word	0x200048a0
 80027b4:	2000498c 	.word	0x2000498c
 80027b8:	20004988 	.word	0x20004988

080027bc <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )
    void vTaskSwitchContext( void )
    {
 80027bc:	b480      	push	{r7}
 80027be:	b085      	sub	sp, #20
 80027c0:	af00      	add	r7, sp, #0
        traceENTER_vTaskSwitchContext();

        if( uxSchedulerSuspended != ( UBaseType_t ) 0U )
 80027c2:	4b1c      	ldr	r3, [pc, #112]	@ (8002834 <vTaskSwitchContext+0x78>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d003      	beq.n	80027d2 <vTaskSwitchContext+0x16>
        {
            /* The scheduler is currently suspended - do not allow a context
             * switch. */
            xYieldPendings[ 0 ] = pdTRUE;
 80027ca:	4b1b      	ldr	r3, [pc, #108]	@ (8002838 <vTaskSwitchContext+0x7c>)
 80027cc:	2201      	movs	r2, #1
 80027ce:	601a      	str	r2, [r3, #0]
            }
            #endif
        }

        traceRETURN_vTaskSwitchContext();
    }
 80027d0:	e02b      	b.n	800282a <vTaskSwitchContext+0x6e>
            xYieldPendings[ 0 ] = pdFALSE;
 80027d2:	4b19      	ldr	r3, [pc, #100]	@ (8002838 <vTaskSwitchContext+0x7c>)
 80027d4:	2200      	movs	r2, #0
 80027d6:	601a      	str	r2, [r3, #0]
            taskSELECT_HIGHEST_PRIORITY_TASK();
 80027d8:	4b18      	ldr	r3, [pc, #96]	@ (800283c <vTaskSwitchContext+0x80>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	607b      	str	r3, [r7, #4]
        __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	fab3 f383 	clz	r3, r3
 80027e4:	70fb      	strb	r3, [r7, #3]
        return ucReturn;
 80027e6:	78fb      	ldrb	r3, [r7, #3]
 80027e8:	f1c3 031f 	rsb	r3, r3, #31
 80027ec:	60fb      	str	r3, [r7, #12]
 80027ee:	68fa      	ldr	r2, [r7, #12]
 80027f0:	4613      	mov	r3, r2
 80027f2:	009b      	lsls	r3, r3, #2
 80027f4:	4413      	add	r3, r2
 80027f6:	009b      	lsls	r3, r3, #2
 80027f8:	4a11      	ldr	r2, [pc, #68]	@ (8002840 <vTaskSwitchContext+0x84>)
 80027fa:	4413      	add	r3, r2
 80027fc:	60bb      	str	r3, [r7, #8]
 80027fe:	68bb      	ldr	r3, [r7, #8]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	685a      	ldr	r2, [r3, #4]
 8002804:	68bb      	ldr	r3, [r7, #8]
 8002806:	605a      	str	r2, [r3, #4]
 8002808:	68bb      	ldr	r3, [r7, #8]
 800280a:	685a      	ldr	r2, [r3, #4]
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	3308      	adds	r3, #8
 8002810:	429a      	cmp	r2, r3
 8002812:	d103      	bne.n	800281c <vTaskSwitchContext+0x60>
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	68da      	ldr	r2, [r3, #12]
 8002818:	68bb      	ldr	r3, [r7, #8]
 800281a:	605a      	str	r2, [r3, #4]
 800281c:	68bb      	ldr	r3, [r7, #8]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	68db      	ldr	r3, [r3, #12]
 8002822:	4a08      	ldr	r2, [pc, #32]	@ (8002844 <vTaskSwitchContext+0x88>)
 8002824:	6013      	str	r3, [r2, #0]
            portTASK_SWITCH_HOOK( pxCurrentTCB );
 8002826:	4b07      	ldr	r3, [pc, #28]	@ (8002844 <vTaskSwitchContext+0x88>)
 8002828:	681b      	ldr	r3, [r3, #0]
    }
 800282a:	bf00      	nop
 800282c:	3714      	adds	r7, #20
 800282e:	46bd      	mov	sp, r7
 8002830:	bc80      	pop	{r7}
 8002832:	4770      	bx	lr
 8002834:	200049a0 	.word	0x200049a0
 8002838:	2000498c 	.word	0x2000498c
 800283c:	20004980 	.word	0x20004980
 8002840:	200048a4 	.word	0x200048a4
 8002844:	200048a0 	.word	0x200048a0

08002848 <prvIdleTask>:
 * void prvIdleTask( void *pvParameters );
 *
 */

static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b082      	sub	sp, #8
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]

    for( ; configCONTROL_INFINITE_LOOP(); )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8002850:	f000 f852 	bl	80028f8 <prvCheckTasksWaitingTermination>
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains one more task than the
             * number of idle tasks, which is equal to the configured numbers of cores
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) configNUMBER_OF_CORES )
 8002854:	4b06      	ldr	r3, [pc, #24]	@ (8002870 <prvIdleTask+0x28>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	2b01      	cmp	r3, #1
 800285a:	d9f9      	bls.n	8002850 <prvIdleTask+0x8>
            {
                taskYIELD();
 800285c:	4b05      	ldr	r3, [pc, #20]	@ (8002874 <prvIdleTask+0x2c>)
 800285e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002862:	601a      	str	r2, [r3, #0]
 8002864:	f3bf 8f4f 	dsb	sy
 8002868:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 800286c:	e7f0      	b.n	8002850 <prvIdleTask+0x8>
 800286e:	bf00      	nop
 8002870:	200048a4 	.word	0x200048a4
 8002874:	e000ed04 	.word	0xe000ed04

08002878 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b082      	sub	sp, #8
 800287c:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800287e:	2300      	movs	r3, #0
 8002880:	607b      	str	r3, [r7, #4]
 8002882:	e00c      	b.n	800289e <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002884:	687a      	ldr	r2, [r7, #4]
 8002886:	4613      	mov	r3, r2
 8002888:	009b      	lsls	r3, r3, #2
 800288a:	4413      	add	r3, r2
 800288c:	009b      	lsls	r3, r3, #2
 800288e:	4a12      	ldr	r2, [pc, #72]	@ (80028d8 <prvInitialiseTaskLists+0x60>)
 8002890:	4413      	add	r3, r2
 8002892:	4618      	mov	r0, r3
 8002894:	f7ff fa42 	bl	8001d1c <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	3301      	adds	r3, #1
 800289c:	607b      	str	r3, [r7, #4]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2b04      	cmp	r3, #4
 80028a2:	d9ef      	bls.n	8002884 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80028a4:	480d      	ldr	r0, [pc, #52]	@ (80028dc <prvInitialiseTaskLists+0x64>)
 80028a6:	f7ff fa39 	bl	8001d1c <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80028aa:	480d      	ldr	r0, [pc, #52]	@ (80028e0 <prvInitialiseTaskLists+0x68>)
 80028ac:	f7ff fa36 	bl	8001d1c <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80028b0:	480c      	ldr	r0, [pc, #48]	@ (80028e4 <prvInitialiseTaskLists+0x6c>)
 80028b2:	f7ff fa33 	bl	8001d1c <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 80028b6:	480c      	ldr	r0, [pc, #48]	@ (80028e8 <prvInitialiseTaskLists+0x70>)
 80028b8:	f7ff fa30 	bl	8001d1c <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 80028bc:	480b      	ldr	r0, [pc, #44]	@ (80028ec <prvInitialiseTaskLists+0x74>)
 80028be:	f7ff fa2d 	bl	8001d1c <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80028c2:	4b0b      	ldr	r3, [pc, #44]	@ (80028f0 <prvInitialiseTaskLists+0x78>)
 80028c4:	4a05      	ldr	r2, [pc, #20]	@ (80028dc <prvInitialiseTaskLists+0x64>)
 80028c6:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80028c8:	4b0a      	ldr	r3, [pc, #40]	@ (80028f4 <prvInitialiseTaskLists+0x7c>)
 80028ca:	4a05      	ldr	r2, [pc, #20]	@ (80028e0 <prvInitialiseTaskLists+0x68>)
 80028cc:	601a      	str	r2, [r3, #0]
}
 80028ce:	bf00      	nop
 80028d0:	3708      	adds	r7, #8
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}
 80028d6:	bf00      	nop
 80028d8:	200048a4 	.word	0x200048a4
 80028dc:	20004908 	.word	0x20004908
 80028e0:	2000491c 	.word	0x2000491c
 80028e4:	20004938 	.word	0x20004938
 80028e8:	2000494c 	.word	0x2000494c
 80028ec:	20004964 	.word	0x20004964
 80028f0:	20004930 	.word	0x20004930
 80028f4:	20004934 	.word	0x20004934

080028f8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b082      	sub	sp, #8
 80028fc:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80028fe:	e019      	b.n	8002934 <prvCheckTasksWaitingTermination+0x3c>
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                taskENTER_CRITICAL();
 8002900:	f7fe ffda 	bl	80018b8 <vPortEnterCritical>
                {
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8002904:	4b10      	ldr	r3, [pc, #64]	@ (8002948 <prvCheckTasksWaitingTermination+0x50>)
 8002906:	68db      	ldr	r3, [r3, #12]
 8002908:	68db      	ldr	r3, [r3, #12]
 800290a:	607b      	str	r3, [r7, #4]
                        ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	3304      	adds	r3, #4
 8002910:	4618      	mov	r0, r3
 8002912:	f7ff fa89 	bl	8001e28 <uxListRemove>
                        --uxCurrentNumberOfTasks;
 8002916:	4b0d      	ldr	r3, [pc, #52]	@ (800294c <prvCheckTasksWaitingTermination+0x54>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	3b01      	subs	r3, #1
 800291c:	4a0b      	ldr	r2, [pc, #44]	@ (800294c <prvCheckTasksWaitingTermination+0x54>)
 800291e:	6013      	str	r3, [r2, #0]
                        --uxDeletedTasksWaitingCleanUp;
 8002920:	4b0b      	ldr	r3, [pc, #44]	@ (8002950 <prvCheckTasksWaitingTermination+0x58>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	3b01      	subs	r3, #1
 8002926:	4a0a      	ldr	r2, [pc, #40]	@ (8002950 <prvCheckTasksWaitingTermination+0x58>)
 8002928:	6013      	str	r3, [r2, #0]
                    }
                }
                taskEXIT_CRITICAL();
 800292a:	f7fe ffdf 	bl	80018ec <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 800292e:	6878      	ldr	r0, [r7, #4]
 8002930:	f000 f810 	bl	8002954 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002934:	4b06      	ldr	r3, [pc, #24]	@ (8002950 <prvCheckTasksWaitingTermination+0x58>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d1e1      	bne.n	8002900 <prvCheckTasksWaitingTermination+0x8>
            }
            #endif /* #if( configNUMBER_OF_CORES == 1 ) */
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 800293c:	bf00      	nop
 800293e:	bf00      	nop
 8002940:	3708      	adds	r7, #8
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}
 8002946:	bf00      	nop
 8002948:	2000494c 	.word	0x2000494c
 800294c:	20004978 	.word	0x20004978
 8002950:	20004960 	.word	0x20004960

08002954 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8002954:	b580      	push	{r7, lr}
 8002956:	b082      	sub	sp, #8
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002960:	4618      	mov	r0, r3
 8002962:	f7ff f8eb 	bl	8001b3c <vPortFree>
            vPortFree( pxTCB );
 8002966:	6878      	ldr	r0, [r7, #4]
 8002968:	f7ff f8e8 	bl	8001b3c <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 800296c:	bf00      	nop
 800296e:	3708      	adds	r7, #8
 8002970:	46bd      	mov	sp, r7
 8002972:	bd80      	pop	{r7, pc}

08002974 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002974:	b480      	push	{r7}
 8002976:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002978:	4b09      	ldr	r3, [pc, #36]	@ (80029a0 <prvResetNextTaskUnblockTime+0x2c>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d104      	bne.n	800298c <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8002982:	4b08      	ldr	r3, [pc, #32]	@ (80029a4 <prvResetNextTaskUnblockTime+0x30>)
 8002984:	f04f 32ff 	mov.w	r2, #4294967295
 8002988:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800298a:	e005      	b.n	8002998 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 800298c:	4b04      	ldr	r3, [pc, #16]	@ (80029a0 <prvResetNextTaskUnblockTime+0x2c>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	68db      	ldr	r3, [r3, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a03      	ldr	r2, [pc, #12]	@ (80029a4 <prvResetNextTaskUnblockTime+0x30>)
 8002996:	6013      	str	r3, [r2, #0]
}
 8002998:	bf00      	nop
 800299a:	46bd      	mov	sp, r7
 800299c:	bc80      	pop	{r7}
 800299e:	4770      	bx	lr
 80029a0:	20004930 	.word	0x20004930
 80029a4:	20004998 	.word	0x20004998

080029a8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 80029a8:	b480      	push	{r7}
 80029aa:	b083      	sub	sp, #12
 80029ac:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        traceENTER_xTaskGetSchedulerState();

        if( xSchedulerRunning == pdFALSE )
 80029ae:	4b0b      	ldr	r3, [pc, #44]	@ (80029dc <xTaskGetSchedulerState+0x34>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d102      	bne.n	80029bc <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 80029b6:	2301      	movs	r3, #1
 80029b8:	607b      	str	r3, [r7, #4]
 80029ba:	e008      	b.n	80029ce <xTaskGetSchedulerState+0x26>
        {
            #if ( configNUMBER_OF_CORES > 1 )
                taskENTER_CRITICAL();
            #endif
            {
                if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 80029bc:	4b08      	ldr	r3, [pc, #32]	@ (80029e0 <xTaskGetSchedulerState+0x38>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d102      	bne.n	80029ca <xTaskGetSchedulerState+0x22>
                {
                    xReturn = taskSCHEDULER_RUNNING;
 80029c4:	2302      	movs	r3, #2
 80029c6:	607b      	str	r3, [r7, #4]
 80029c8:	e001      	b.n	80029ce <xTaskGetSchedulerState+0x26>
                }
                else
                {
                    xReturn = taskSCHEDULER_SUSPENDED;
 80029ca:	2300      	movs	r3, #0
 80029cc:	607b      	str	r3, [r7, #4]
            #endif
        }

        traceRETURN_xTaskGetSchedulerState( xReturn );

        return xReturn;
 80029ce:	687b      	ldr	r3, [r7, #4]
    }
 80029d0:	4618      	mov	r0, r3
 80029d2:	370c      	adds	r7, #12
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bc80      	pop	{r7}
 80029d8:	4770      	bx	lr
 80029da:	bf00      	nop
 80029dc:	20004984 	.word	0x20004984
 80029e0:	200049a0 	.word	0x200049a0

080029e4 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b088      	sub	sp, #32
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
 80029ec:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80029ee:	4b37      	ldr	r3, [pc, #220]	@ (8002acc <prvAddCurrentTaskToDelayedList+0xe8>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	61fb      	str	r3, [r7, #28]
    List_t * const pxDelayedList = pxDelayedTaskList;
 80029f4:	4b36      	ldr	r3, [pc, #216]	@ (8002ad0 <prvAddCurrentTaskToDelayedList+0xec>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	61bb      	str	r3, [r7, #24]
    List_t * const pxOverflowDelayedList = pxOverflowDelayedTaskList;
 80029fa:	4b36      	ldr	r3, [pc, #216]	@ (8002ad4 <prvAddCurrentTaskToDelayedList+0xf0>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002a00:	4b35      	ldr	r3, [pc, #212]	@ (8002ad8 <prvAddCurrentTaskToDelayedList+0xf4>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	3304      	adds	r3, #4
 8002a06:	4618      	mov	r0, r3
 8002a08:	f7ff fa0e 	bl	8001e28 <uxListRemove>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d10b      	bne.n	8002a2a <prvAddCurrentTaskToDelayedList+0x46>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8002a12:	4b31      	ldr	r3, [pc, #196]	@ (8002ad8 <prvAddCurrentTaskToDelayedList+0xf4>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a18:	2201      	movs	r2, #1
 8002a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a1e:	43da      	mvns	r2, r3
 8002a20:	4b2e      	ldr	r3, [pc, #184]	@ (8002adc <prvAddCurrentTaskToDelayedList+0xf8>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4013      	ands	r3, r2
 8002a26:	4a2d      	ldr	r2, [pc, #180]	@ (8002adc <prvAddCurrentTaskToDelayedList+0xf8>)
 8002a28:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a30:	d124      	bne.n	8002a7c <prvAddCurrentTaskToDelayedList+0x98>
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d021      	beq.n	8002a7c <prvAddCurrentTaskToDelayedList+0x98>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002a38:	4b29      	ldr	r3, [pc, #164]	@ (8002ae0 <prvAddCurrentTaskToDelayedList+0xfc>)
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	613b      	str	r3, [r7, #16]
 8002a3e:	4b26      	ldr	r3, [pc, #152]	@ (8002ad8 <prvAddCurrentTaskToDelayedList+0xf4>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	693a      	ldr	r2, [r7, #16]
 8002a44:	609a      	str	r2, [r3, #8]
 8002a46:	4b24      	ldr	r3, [pc, #144]	@ (8002ad8 <prvAddCurrentTaskToDelayedList+0xf4>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	693a      	ldr	r2, [r7, #16]
 8002a4c:	6892      	ldr	r2, [r2, #8]
 8002a4e:	60da      	str	r2, [r3, #12]
 8002a50:	4b21      	ldr	r3, [pc, #132]	@ (8002ad8 <prvAddCurrentTaskToDelayedList+0xf4>)
 8002a52:	681a      	ldr	r2, [r3, #0]
 8002a54:	693b      	ldr	r3, [r7, #16]
 8002a56:	689b      	ldr	r3, [r3, #8]
 8002a58:	3204      	adds	r2, #4
 8002a5a:	605a      	str	r2, [r3, #4]
 8002a5c:	4b1e      	ldr	r3, [pc, #120]	@ (8002ad8 <prvAddCurrentTaskToDelayedList+0xf4>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	1d1a      	adds	r2, r3, #4
 8002a62:	693b      	ldr	r3, [r7, #16]
 8002a64:	609a      	str	r2, [r3, #8]
 8002a66:	4b1c      	ldr	r3, [pc, #112]	@ (8002ad8 <prvAddCurrentTaskToDelayedList+0xf4>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4a1d      	ldr	r2, [pc, #116]	@ (8002ae0 <prvAddCurrentTaskToDelayedList+0xfc>)
 8002a6c:	615a      	str	r2, [r3, #20]
 8002a6e:	4b1c      	ldr	r3, [pc, #112]	@ (8002ae0 <prvAddCurrentTaskToDelayedList+0xfc>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	3301      	adds	r3, #1
 8002a74:	4a1a      	ldr	r2, [pc, #104]	@ (8002ae0 <prvAddCurrentTaskToDelayedList+0xfc>)
 8002a76:	6013      	str	r3, [r2, #0]
 8002a78:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8002a7a:	e022      	b.n	8002ac2 <prvAddCurrentTaskToDelayedList+0xde>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8002a7c:	69fa      	ldr	r2, [r7, #28]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	4413      	add	r3, r2
 8002a82:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002a84:	4b14      	ldr	r3, [pc, #80]	@ (8002ad8 <prvAddCurrentTaskToDelayedList+0xf4>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	68fa      	ldr	r2, [r7, #12]
 8002a8a:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8002a8c:	68fa      	ldr	r2, [r7, #12]
 8002a8e:	69fb      	ldr	r3, [r7, #28]
 8002a90:	429a      	cmp	r2, r3
 8002a92:	d207      	bcs.n	8002aa4 <prvAddCurrentTaskToDelayedList+0xc0>
                vListInsert( pxOverflowDelayedList, &( pxCurrentTCB->xStateListItem ) );
 8002a94:	4b10      	ldr	r3, [pc, #64]	@ (8002ad8 <prvAddCurrentTaskToDelayedList+0xf4>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	3304      	adds	r3, #4
 8002a9a:	4619      	mov	r1, r3
 8002a9c:	6978      	ldr	r0, [r7, #20]
 8002a9e:	f7ff f98b 	bl	8001db8 <vListInsert>
}
 8002aa2:	e00e      	b.n	8002ac2 <prvAddCurrentTaskToDelayedList+0xde>
                vListInsert( pxDelayedList, &( pxCurrentTCB->xStateListItem ) );
 8002aa4:	4b0c      	ldr	r3, [pc, #48]	@ (8002ad8 <prvAddCurrentTaskToDelayedList+0xf4>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	3304      	adds	r3, #4
 8002aaa:	4619      	mov	r1, r3
 8002aac:	69b8      	ldr	r0, [r7, #24]
 8002aae:	f7ff f983 	bl	8001db8 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8002ab2:	4b0c      	ldr	r3, [pc, #48]	@ (8002ae4 <prvAddCurrentTaskToDelayedList+0x100>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	68fa      	ldr	r2, [r7, #12]
 8002ab8:	429a      	cmp	r2, r3
 8002aba:	d202      	bcs.n	8002ac2 <prvAddCurrentTaskToDelayedList+0xde>
                    xNextTaskUnblockTime = xTimeToWake;
 8002abc:	4a09      	ldr	r2, [pc, #36]	@ (8002ae4 <prvAddCurrentTaskToDelayedList+0x100>)
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	6013      	str	r3, [r2, #0]
}
 8002ac2:	bf00      	nop
 8002ac4:	3720      	adds	r7, #32
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}
 8002aca:	bf00      	nop
 8002acc:	2000497c 	.word	0x2000497c
 8002ad0:	20004930 	.word	0x20004930
 8002ad4:	20004934 	.word	0x20004934
 8002ad8:	200048a0 	.word	0x200048a0
 8002adc:	20004980 	.word	0x20004980
 8002ae0:	20004964 	.word	0x20004964
 8002ae4:	20004998 	.word	0x20004998

08002ae8 <memset>:
 8002ae8:	4603      	mov	r3, r0
 8002aea:	4402      	add	r2, r0
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d100      	bne.n	8002af2 <memset+0xa>
 8002af0:	4770      	bx	lr
 8002af2:	f803 1b01 	strb.w	r1, [r3], #1
 8002af6:	e7f9      	b.n	8002aec <memset+0x4>

08002af8 <__libc_init_array>:
 8002af8:	b570      	push	{r4, r5, r6, lr}
 8002afa:	2600      	movs	r6, #0
 8002afc:	4d0c      	ldr	r5, [pc, #48]	@ (8002b30 <__libc_init_array+0x38>)
 8002afe:	4c0d      	ldr	r4, [pc, #52]	@ (8002b34 <__libc_init_array+0x3c>)
 8002b00:	1b64      	subs	r4, r4, r5
 8002b02:	10a4      	asrs	r4, r4, #2
 8002b04:	42a6      	cmp	r6, r4
 8002b06:	d109      	bne.n	8002b1c <__libc_init_array+0x24>
 8002b08:	f000 f81a 	bl	8002b40 <_init>
 8002b0c:	2600      	movs	r6, #0
 8002b0e:	4d0a      	ldr	r5, [pc, #40]	@ (8002b38 <__libc_init_array+0x40>)
 8002b10:	4c0a      	ldr	r4, [pc, #40]	@ (8002b3c <__libc_init_array+0x44>)
 8002b12:	1b64      	subs	r4, r4, r5
 8002b14:	10a4      	asrs	r4, r4, #2
 8002b16:	42a6      	cmp	r6, r4
 8002b18:	d105      	bne.n	8002b26 <__libc_init_array+0x2e>
 8002b1a:	bd70      	pop	{r4, r5, r6, pc}
 8002b1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b20:	4798      	blx	r3
 8002b22:	3601      	adds	r6, #1
 8002b24:	e7ee      	b.n	8002b04 <__libc_init_array+0xc>
 8002b26:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b2a:	4798      	blx	r3
 8002b2c:	3601      	adds	r6, #1
 8002b2e:	e7f2      	b.n	8002b16 <__libc_init_array+0x1e>
 8002b30:	08002ba4 	.word	0x08002ba4
 8002b34:	08002ba4 	.word	0x08002ba4
 8002b38:	08002ba4 	.word	0x08002ba4
 8002b3c:	08002ba8 	.word	0x08002ba8

08002b40 <_init>:
 8002b40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b42:	bf00      	nop
 8002b44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b46:	bc08      	pop	{r3}
 8002b48:	469e      	mov	lr, r3
 8002b4a:	4770      	bx	lr

08002b4c <_fini>:
 8002b4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b4e:	bf00      	nop
 8002b50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b52:	bc08      	pop	{r3}
 8002b54:	469e      	mov	lr, r3
 8002b56:	4770      	bx	lr
