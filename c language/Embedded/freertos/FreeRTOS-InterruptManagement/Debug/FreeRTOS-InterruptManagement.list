
FreeRTOS-InterruptManagement.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009ab0  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004c0  08009bc0  08009bc0  0000abc0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a080  0800a080  0000c5dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800a080  0800a080  0000b080  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a088  0800a088  0000c5dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a088  0800a088  0000b088  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a08c  0800a08c  0000b08c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000005dc  20000000  0800a090  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002db8  200005dc  0800a66c  0000c5dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20003394  0800a66c  0000d394  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000c5dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012ed7  00000000  00000000  0000c605  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000032eb  00000000  00000000  0001f4dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001378  00000000  00000000  000227c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f38  00000000  00000000  00023b40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ba62  00000000  00000000  00024a78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018474  00000000  00000000  000404da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009c348  00000000  00000000  0005894e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f4c96  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006640  00000000  00000000  000f4cdc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  000fb31c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200005dc 	.word	0x200005dc
 800012c:	00000000 	.word	0x00000000
 8000130:	08009ba8 	.word	0x08009ba8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200005e0 	.word	0x200005e0
 800014c:	08009ba8 	.word	0x08009ba8

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_d2lz>:
 8000b68:	b538      	push	{r3, r4, r5, lr}
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	4604      	mov	r4, r0
 8000b70:	460d      	mov	r5, r1
 8000b72:	f7ff ff23 	bl	80009bc <__aeabi_dcmplt>
 8000b76:	b928      	cbnz	r0, 8000b84 <__aeabi_d2lz+0x1c>
 8000b78:	4620      	mov	r0, r4
 8000b7a:	4629      	mov	r1, r5
 8000b7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000b80:	f000 b80a 	b.w	8000b98 <__aeabi_d2ulz>
 8000b84:	4620      	mov	r0, r4
 8000b86:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000b8a:	f000 f805 	bl	8000b98 <__aeabi_d2ulz>
 8000b8e:	4240      	negs	r0, r0
 8000b90:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b94:	bd38      	pop	{r3, r4, r5, pc}
 8000b96:	bf00      	nop

08000b98 <__aeabi_d2ulz>:
 8000b98:	b5d0      	push	{r4, r6, r7, lr}
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	4b0b      	ldr	r3, [pc, #44]	@ (8000bcc <__aeabi_d2ulz+0x34>)
 8000b9e:	4606      	mov	r6, r0
 8000ba0:	460f      	mov	r7, r1
 8000ba2:	f7ff fc99 	bl	80004d8 <__aeabi_dmul>
 8000ba6:	f7ff ff6f 	bl	8000a88 <__aeabi_d2uiz>
 8000baa:	4604      	mov	r4, r0
 8000bac:	f7ff fc1a 	bl	80003e4 <__aeabi_ui2d>
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	4b07      	ldr	r3, [pc, #28]	@ (8000bd0 <__aeabi_d2ulz+0x38>)
 8000bb4:	f7ff fc90 	bl	80004d8 <__aeabi_dmul>
 8000bb8:	4602      	mov	r2, r0
 8000bba:	460b      	mov	r3, r1
 8000bbc:	4630      	mov	r0, r6
 8000bbe:	4639      	mov	r1, r7
 8000bc0:	f7ff fad2 	bl	8000168 <__aeabi_dsub>
 8000bc4:	f7ff ff60 	bl	8000a88 <__aeabi_d2uiz>
 8000bc8:	4621      	mov	r1, r4
 8000bca:	bdd0      	pop	{r4, r6, r7, pc}
 8000bcc:	3df00000 	.word	0x3df00000
 8000bd0:	41f00000 	.word	0x41f00000

08000bd4 <StartTask>:
#define TASK1_PRIORITY 1
TaskHandle_t Task1Handle;
static void Task1(void *pvParameters);

static void StartTask(void *pvParameters)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b084      	sub	sp, #16
 8000bd8:	af02      	add	r7, sp, #8
 8000bda:	6078      	str	r0, [r7, #4]
	taskENTER_CRITICAL();
 8000bdc:	f002 fff4 	bl	8003bc8 <vPortEnterCritical>
	//Create three tasks.
	xTaskCreate(Task1, "Task1", TASK1_STACK, NULL, TASK1_PRIORITY, &Task1Handle);
 8000be0:	4b09      	ldr	r3, [pc, #36]	@ (8000c08 <StartTask+0x34>)
 8000be2:	9301      	str	r3, [sp, #4]
 8000be4:	2301      	movs	r3, #1
 8000be6:	9300      	str	r3, [sp, #0]
 8000be8:	2300      	movs	r3, #0
 8000bea:	2280      	movs	r2, #128	@ 0x80
 8000bec:	4907      	ldr	r1, [pc, #28]	@ (8000c0c <StartTask+0x38>)
 8000bee:	4808      	ldr	r0, [pc, #32]	@ (8000c10 <StartTask+0x3c>)
 8000bf0:	f003 fb07 	bl	8004202 <xTaskCreate>
	//Delete itself.
	vTaskDelete(NULL);
 8000bf4:	2000      	movs	r0, #0
 8000bf6:	f003 fc4b 	bl	8004490 <vTaskDelete>
	taskEXIT_CRITICAL();
 8000bfa:	f002 ffff 	bl	8003bfc <vPortExitCritical>
}
 8000bfe:	bf00      	nop
 8000c00:	3708      	adds	r7, #8
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	200005fc 	.word	0x200005fc
 8000c0c:	08009bc0 	.word	0x08009bc0
 8000c10:	08000c15 	.word	0x08000c15

08000c14 <Task1>:

char taskInfo[500];
static void Task1(void *pvParameters)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b082      	sub	sp, #8
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
	while (1)
	{
		printf("Task1 is running!\n");
 8000c1c:	480b      	ldr	r0, [pc, #44]	@ (8000c4c <Task1+0x38>)
 8000c1e:	f005 fb51 	bl	80062c4 <puts>
		LED_Toggle(LED1);
 8000c22:	2001      	movs	r0, #1
 8000c24:	f000 f886 	bl	8000d34 <LED_Toggle>
		vTaskDelay(1000);
 8000c28:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000c2c:	f003 fcc0 	bl	80045b0 <vTaskDelay>
		//Print task status.
		vTaskList(taskInfo);
 8000c30:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000c34:	4806      	ldr	r0, [pc, #24]	@ (8000c50 <Task1+0x3c>)
 8000c36:	f004 fa7d 	bl	8005134 <vTaskListTasks>
		printf("%s\n", taskInfo);
 8000c3a:	4805      	ldr	r0, [pc, #20]	@ (8000c50 <Task1+0x3c>)
 8000c3c:	f005 fb42 	bl	80062c4 <puts>
		vTaskDelay(1000);
 8000c40:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000c44:	f003 fcb4 	bl	80045b0 <vTaskDelay>
		printf("Task1 is running!\n");
 8000c48:	bf00      	nop
 8000c4a:	e7e7      	b.n	8000c1c <Task1+0x8>
 8000c4c:	08009bc8 	.word	0x08009bc8
 8000c50:	20000600 	.word	0x20000600

08000c54 <FreeRTOSStart>:
	}
}

void FreeRTOSStart()
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b082      	sub	sp, #8
 8000c58:	af02      	add	r7, sp, #8
	//Create a startup task.
	xTaskCreate(StartTask, "StartTask", START_TASK_STACK, NULL, START_TASK_PRIORITY, &startTaskHandle);
 8000c5a:	4b07      	ldr	r3, [pc, #28]	@ (8000c78 <FreeRTOSStart+0x24>)
 8000c5c:	9301      	str	r3, [sp, #4]
 8000c5e:	2301      	movs	r3, #1
 8000c60:	9300      	str	r3, [sp, #0]
 8000c62:	2300      	movs	r3, #0
 8000c64:	2280      	movs	r2, #128	@ 0x80
 8000c66:	4905      	ldr	r1, [pc, #20]	@ (8000c7c <FreeRTOSStart+0x28>)
 8000c68:	4805      	ldr	r0, [pc, #20]	@ (8000c80 <FreeRTOSStart+0x2c>)
 8000c6a:	f003 faca 	bl	8004202 <xTaskCreate>
	//Start the scheduler.
	vTaskStartScheduler();
 8000c6e:	f003 fd85 	bl	800477c <vTaskStartScheduler>
}
 8000c72:	bf00      	nop
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	200005f8 	.word	0x200005f8
 8000c7c:	08009bdc 	.word	0x08009bdc
 8000c80:	08000bd5 	.word	0x08000bd5

08000c84 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b088      	sub	sp, #32
 8000c88:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c8a:	f107 0310 	add.w	r3, r7, #16
 8000c8e:	2200      	movs	r2, #0
 8000c90:	601a      	str	r2, [r3, #0]
 8000c92:	605a      	str	r2, [r3, #4]
 8000c94:	609a      	str	r2, [r3, #8]
 8000c96:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c98:	4b23      	ldr	r3, [pc, #140]	@ (8000d28 <MX_GPIO_Init+0xa4>)
 8000c9a:	699b      	ldr	r3, [r3, #24]
 8000c9c:	4a22      	ldr	r2, [pc, #136]	@ (8000d28 <MX_GPIO_Init+0xa4>)
 8000c9e:	f043 0320 	orr.w	r3, r3, #32
 8000ca2:	6193      	str	r3, [r2, #24]
 8000ca4:	4b20      	ldr	r3, [pc, #128]	@ (8000d28 <MX_GPIO_Init+0xa4>)
 8000ca6:	699b      	ldr	r3, [r3, #24]
 8000ca8:	f003 0320 	and.w	r3, r3, #32
 8000cac:	60fb      	str	r3, [r7, #12]
 8000cae:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cb0:	4b1d      	ldr	r3, [pc, #116]	@ (8000d28 <MX_GPIO_Init+0xa4>)
 8000cb2:	699b      	ldr	r3, [r3, #24]
 8000cb4:	4a1c      	ldr	r2, [pc, #112]	@ (8000d28 <MX_GPIO_Init+0xa4>)
 8000cb6:	f043 0304 	orr.w	r3, r3, #4
 8000cba:	6193      	str	r3, [r2, #24]
 8000cbc:	4b1a      	ldr	r3, [pc, #104]	@ (8000d28 <MX_GPIO_Init+0xa4>)
 8000cbe:	699b      	ldr	r3, [r3, #24]
 8000cc0:	f003 0304 	and.w	r3, r3, #4
 8000cc4:	60bb      	str	r3, [r7, #8]
 8000cc6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cc8:	4b17      	ldr	r3, [pc, #92]	@ (8000d28 <MX_GPIO_Init+0xa4>)
 8000cca:	699b      	ldr	r3, [r3, #24]
 8000ccc:	4a16      	ldr	r2, [pc, #88]	@ (8000d28 <MX_GPIO_Init+0xa4>)
 8000cce:	f043 0308 	orr.w	r3, r3, #8
 8000cd2:	6193      	str	r3, [r2, #24]
 8000cd4:	4b14      	ldr	r3, [pc, #80]	@ (8000d28 <MX_GPIO_Init+0xa4>)
 8000cd6:	699b      	ldr	r3, [r3, #24]
 8000cd8:	f003 0308 	and.w	r3, r3, #8
 8000cdc:	607b      	str	r3, [r7, #4]
 8000cde:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	2106      	movs	r1, #6
 8000ce4:	4811      	ldr	r0, [pc, #68]	@ (8000d2c <MX_GPIO_Init+0xa8>)
 8000ce6:	f000 ff9d 	bl	8001c24 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA1 PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8000cea:	2306      	movs	r3, #6
 8000cec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cee:	2301      	movs	r3, #1
 8000cf0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf6:	2302      	movs	r3, #2
 8000cf8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cfa:	f107 0310 	add.w	r3, r7, #16
 8000cfe:	4619      	mov	r1, r3
 8000d00:	480a      	ldr	r0, [pc, #40]	@ (8000d2c <MX_GPIO_Init+0xa8>)
 8000d02:	f000 fe0b 	bl	800191c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_10;
 8000d06:	f240 4301 	movw	r3, #1025	@ 0x401
 8000d0a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d10:	2301      	movs	r3, #1
 8000d12:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d14:	f107 0310 	add.w	r3, r7, #16
 8000d18:	4619      	mov	r1, r3
 8000d1a:	4805      	ldr	r0, [pc, #20]	@ (8000d30 <MX_GPIO_Init+0xac>)
 8000d1c:	f000 fdfe 	bl	800191c <HAL_GPIO_Init>

}
 8000d20:	bf00      	nop
 8000d22:	3720      	adds	r7, #32
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	40021000 	.word	0x40021000
 8000d2c:	40010800 	.word	0x40010800
 8000d30:	40010c00 	.word	0x40010c00

08000d34 <LED_Toggle>:
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
		}
	}
}
void LED_Toggle(uint8_t device)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b082      	sub	sp, #8
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	71fb      	strb	r3, [r7, #7]
	if (device == LED1)
 8000d3e:	79fb      	ldrb	r3, [r7, #7]
 8000d40:	2b01      	cmp	r3, #1
 8000d42:	d104      	bne.n	8000d4e <LED_Toggle+0x1a>
	{
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1);
 8000d44:	2102      	movs	r1, #2
 8000d46:	4807      	ldr	r0, [pc, #28]	@ (8000d64 <LED_Toggle+0x30>)
 8000d48:	f000 ff84 	bl	8001c54 <HAL_GPIO_TogglePin>
	}
	else if (device == LED2)
	{
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_2);
	}
}
 8000d4c:	e006      	b.n	8000d5c <LED_Toggle+0x28>
	else if (device == LED2)
 8000d4e:	79fb      	ldrb	r3, [r7, #7]
 8000d50:	2b02      	cmp	r3, #2
 8000d52:	d103      	bne.n	8000d5c <LED_Toggle+0x28>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_2);
 8000d54:	2104      	movs	r1, #4
 8000d56:	4803      	ldr	r0, [pc, #12]	@ (8000d64 <LED_Toggle+0x30>)
 8000d58:	f000 ff7c 	bl	8001c54 <HAL_GPIO_TogglePin>
}
 8000d5c:	bf00      	nop
 8000d5e:	3708      	adds	r7, #8
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	40010800 	.word	0x40010800

08000d68 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000d6c:	4b12      	ldr	r3, [pc, #72]	@ (8000db8 <MX_I2C1_Init+0x50>)
 8000d6e:	4a13      	ldr	r2, [pc, #76]	@ (8000dbc <MX_I2C1_Init+0x54>)
 8000d70:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000d72:	4b11      	ldr	r3, [pc, #68]	@ (8000db8 <MX_I2C1_Init+0x50>)
 8000d74:	4a12      	ldr	r2, [pc, #72]	@ (8000dc0 <MX_I2C1_Init+0x58>)
 8000d76:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000d78:	4b0f      	ldr	r3, [pc, #60]	@ (8000db8 <MX_I2C1_Init+0x50>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000d7e:	4b0e      	ldr	r3, [pc, #56]	@ (8000db8 <MX_I2C1_Init+0x50>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d84:	4b0c      	ldr	r3, [pc, #48]	@ (8000db8 <MX_I2C1_Init+0x50>)
 8000d86:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000d8a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d8c:	4b0a      	ldr	r3, [pc, #40]	@ (8000db8 <MX_I2C1_Init+0x50>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000d92:	4b09      	ldr	r3, [pc, #36]	@ (8000db8 <MX_I2C1_Init+0x50>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d98:	4b07      	ldr	r3, [pc, #28]	@ (8000db8 <MX_I2C1_Init+0x50>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d9e:	4b06      	ldr	r3, [pc, #24]	@ (8000db8 <MX_I2C1_Init+0x50>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000da4:	4804      	ldr	r0, [pc, #16]	@ (8000db8 <MX_I2C1_Init+0x50>)
 8000da6:	f000 ff6f 	bl	8001c88 <HAL_I2C_Init>
 8000daa:	4603      	mov	r3, r0
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d001      	beq.n	8000db4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000db0:	f000 f8d8 	bl	8000f64 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000db4:	bf00      	nop
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	200007f4 	.word	0x200007f4
 8000dbc:	40005400 	.word	0x40005400
 8000dc0:	000186a0 	.word	0x000186a0

08000dc4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b08a      	sub	sp, #40	@ 0x28
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dcc:	f107 0314 	add.w	r3, r7, #20
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	601a      	str	r2, [r3, #0]
 8000dd4:	605a      	str	r2, [r3, #4]
 8000dd6:	609a      	str	r2, [r3, #8]
 8000dd8:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	4a1d      	ldr	r2, [pc, #116]	@ (8000e54 <HAL_I2C_MspInit+0x90>)
 8000de0:	4293      	cmp	r3, r2
 8000de2:	d132      	bne.n	8000e4a <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000de4:	4b1c      	ldr	r3, [pc, #112]	@ (8000e58 <HAL_I2C_MspInit+0x94>)
 8000de6:	699b      	ldr	r3, [r3, #24]
 8000de8:	4a1b      	ldr	r2, [pc, #108]	@ (8000e58 <HAL_I2C_MspInit+0x94>)
 8000dea:	f043 0308 	orr.w	r3, r3, #8
 8000dee:	6193      	str	r3, [r2, #24]
 8000df0:	4b19      	ldr	r3, [pc, #100]	@ (8000e58 <HAL_I2C_MspInit+0x94>)
 8000df2:	699b      	ldr	r3, [r3, #24]
 8000df4:	f003 0308 	and.w	r3, r3, #8
 8000df8:	613b      	str	r3, [r7, #16]
 8000dfa:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000dfc:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000e00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e02:	2312      	movs	r3, #18
 8000e04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e06:	2303      	movs	r3, #3
 8000e08:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e0a:	f107 0314 	add.w	r3, r7, #20
 8000e0e:	4619      	mov	r1, r3
 8000e10:	4812      	ldr	r0, [pc, #72]	@ (8000e5c <HAL_I2C_MspInit+0x98>)
 8000e12:	f000 fd83 	bl	800191c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8000e16:	4b12      	ldr	r3, [pc, #72]	@ (8000e60 <HAL_I2C_MspInit+0x9c>)
 8000e18:	685b      	ldr	r3, [r3, #4]
 8000e1a:	627b      	str	r3, [r7, #36]	@ 0x24
 8000e1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e1e:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8000e22:	627b      	str	r3, [r7, #36]	@ 0x24
 8000e24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e26:	f043 0302 	orr.w	r3, r3, #2
 8000e2a:	627b      	str	r3, [r7, #36]	@ 0x24
 8000e2c:	4a0c      	ldr	r2, [pc, #48]	@ (8000e60 <HAL_I2C_MspInit+0x9c>)
 8000e2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e30:	6053      	str	r3, [r2, #4]

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e32:	4b09      	ldr	r3, [pc, #36]	@ (8000e58 <HAL_I2C_MspInit+0x94>)
 8000e34:	69db      	ldr	r3, [r3, #28]
 8000e36:	4a08      	ldr	r2, [pc, #32]	@ (8000e58 <HAL_I2C_MspInit+0x94>)
 8000e38:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000e3c:	61d3      	str	r3, [r2, #28]
 8000e3e:	4b06      	ldr	r3, [pc, #24]	@ (8000e58 <HAL_I2C_MspInit+0x94>)
 8000e40:	69db      	ldr	r3, [r3, #28]
 8000e42:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000e46:	60fb      	str	r3, [r7, #12]
 8000e48:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000e4a:	bf00      	nop
 8000e4c:	3728      	adds	r7, #40	@ 0x28
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	40005400 	.word	0x40005400
 8000e58:	40021000 	.word	0x40021000
 8000e5c:	40010c00 	.word	0x40010c00
 8000e60:	40010000 	.word	0x40010000

08000e64 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e68:	f000 fc46 	bl	80016f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e6c:	f000 f816 	bl	8000e9c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e70:	f7ff ff08 	bl	8000c84 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000e74:	f7ff ff78 	bl	8000d68 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000e78:	f000 fb90 	bl	800159c <MX_USART1_UART_Init>
  MX_TIM3_Init();
 8000e7c:	f000 fb1a 	bl	80014b4 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  OLED_Init();
 8000e80:	f000 f8ca 	bl	8001018 <OLED_Init>
  OLED_Test();
 8000e84:	f000 f954 	bl	8001130 <OLED_Test>
  HAL_TIM_Base_Start_IT(&htim3);
 8000e88:	4803      	ldr	r0, [pc, #12]	@ (8000e98 <main+0x34>)
 8000e8a:	f002 f839 	bl	8002f00 <HAL_TIM_Base_Start_IT>
  FreeRTOSStart();
 8000e8e:	f7ff fee1 	bl	8000c54 <FreeRTOSStart>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000e92:	bf00      	nop
 8000e94:	e7fd      	b.n	8000e92 <main+0x2e>
 8000e96:	bf00      	nop
 8000e98:	20000894 	.word	0x20000894

08000e9c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b090      	sub	sp, #64	@ 0x40
 8000ea0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ea2:	f107 0318 	add.w	r3, r7, #24
 8000ea6:	2228      	movs	r2, #40	@ 0x28
 8000ea8:	2100      	movs	r1, #0
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f005 fb3e 	bl	800652c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000eb0:	1d3b      	adds	r3, r7, #4
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	601a      	str	r2, [r3, #0]
 8000eb6:	605a      	str	r2, [r3, #4]
 8000eb8:	609a      	str	r2, [r3, #8]
 8000eba:	60da      	str	r2, [r3, #12]
 8000ebc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ec2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000ec6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ecc:	2301      	movs	r3, #1
 8000ece:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ed0:	2302      	movs	r3, #2
 8000ed2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ed4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000ed8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000eda:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000ede:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ee0:	f107 0318 	add.w	r3, r7, #24
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f001 fb7b 	bl	80025e0 <HAL_RCC_OscConfig>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d001      	beq.n	8000ef4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000ef0:	f000 f838 	bl	8000f64 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ef4:	230f      	movs	r3, #15
 8000ef6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ef8:	2302      	movs	r3, #2
 8000efa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000efc:	2300      	movs	r3, #0
 8000efe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f00:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000f04:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f06:	2300      	movs	r3, #0
 8000f08:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f0a:	1d3b      	adds	r3, r7, #4
 8000f0c:	2102      	movs	r1, #2
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f001 fde8 	bl	8002ae4 <HAL_RCC_ClockConfig>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d001      	beq.n	8000f1e <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000f1a:	f000 f823 	bl	8000f64 <Error_Handler>
  }
}
 8000f1e:	bf00      	nop
 8000f20:	3740      	adds	r7, #64	@ 0x40
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
	...

08000f28 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b082      	sub	sp, #8
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	4a08      	ldr	r2, [pc, #32]	@ (8000f58 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000f36:	4293      	cmp	r3, r2
 8000f38:	d101      	bne.n	8000f3e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000f3a:	f000 fbf3 	bl	8001724 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if (htim->Instance == TIM3)
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	4a06      	ldr	r2, [pc, #24]	@ (8000f5c <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000f44:	4293      	cmp	r3, r2
 8000f46:	d102      	bne.n	8000f4e <HAL_TIM_PeriodElapsedCallback+0x26>
  {
	  printf("TIM3 priority 5\n");
 8000f48:	4805      	ldr	r0, [pc, #20]	@ (8000f60 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000f4a:	f005 f9bb 	bl	80062c4 <puts>
  }
  /* USER CODE END Callback 1 */
}
 8000f4e:	bf00      	nop
 8000f50:	3708      	adds	r7, #8
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	40000800 	.word	0x40000800
 8000f5c:	40000400 	.word	0x40000400
 8000f60:	08009be8 	.word	0x08009be8

08000f64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f68:	b672      	cpsid	i
}
 8000f6a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f6c:	bf00      	nop
 8000f6e:	e7fd      	b.n	8000f6c <Error_Handler+0x8>

08000f70 <WriteCMD>:
static void SetPosition(uint8_t x, uint8_t page);
static void GetNUMPOST(uint32_t num, uint8_t length, uint8_t* array);

//Private functions.
static void WriteCMD(uint8_t cmd)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b086      	sub	sp, #24
 8000f74:	af04      	add	r7, sp, #16
 8000f76:	4603      	mov	r3, r0
 8000f78:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, OLED_DEV_ADDRESS, OLED_CMD_ADDRESS, I2C_MEMADD_SIZE_8BIT, &cmd, 1, 0x100);
 8000f7a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000f7e:	9302      	str	r3, [sp, #8]
 8000f80:	2301      	movs	r3, #1
 8000f82:	9301      	str	r3, [sp, #4]
 8000f84:	1dfb      	adds	r3, r7, #7
 8000f86:	9300      	str	r3, [sp, #0]
 8000f88:	2301      	movs	r3, #1
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	2178      	movs	r1, #120	@ 0x78
 8000f8e:	4803      	ldr	r0, [pc, #12]	@ (8000f9c <WriteCMD+0x2c>)
 8000f90:	f000 ffbe 	bl	8001f10 <HAL_I2C_Mem_Write>
}
 8000f94:	bf00      	nop
 8000f96:	3708      	adds	r7, #8
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	200007f4 	.word	0x200007f4

08000fa0 <WriteData>:
static void WriteData(uint8_t data)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b086      	sub	sp, #24
 8000fa4:	af04      	add	r7, sp, #16
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, OLED_DEV_ADDRESS, OLED_DATA_ADDRESS, I2C_MEMADD_SIZE_8BIT, &data, 1, 0x100);
 8000faa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000fae:	9302      	str	r3, [sp, #8]
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	9301      	str	r3, [sp, #4]
 8000fb4:	1dfb      	adds	r3, r7, #7
 8000fb6:	9300      	str	r3, [sp, #0]
 8000fb8:	2301      	movs	r3, #1
 8000fba:	2240      	movs	r2, #64	@ 0x40
 8000fbc:	2178      	movs	r1, #120	@ 0x78
 8000fbe:	4803      	ldr	r0, [pc, #12]	@ (8000fcc <WriteData+0x2c>)
 8000fc0:	f000 ffa6 	bl	8001f10 <HAL_I2C_Mem_Write>
}
 8000fc4:	bf00      	nop
 8000fc6:	3708      	adds	r7, #8
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	200007f4 	.word	0x200007f4

08000fd0 <SetPosition>:
//Setting the screen pointer.
static void SetPosition(uint8_t x, uint8_t page)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	460a      	mov	r2, r1
 8000fda:	71fb      	strb	r3, [r7, #7]
 8000fdc:	4613      	mov	r3, r2
 8000fde:	71bb      	strb	r3, [r7, #6]
	WriteCMD(0x00 | (x & 0x0F));
 8000fe0:	79fb      	ldrb	r3, [r7, #7]
 8000fe2:	f003 030f 	and.w	r3, r3, #15
 8000fe6:	b2db      	uxtb	r3, r3
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f7ff ffc1 	bl	8000f70 <WriteCMD>
	WriteCMD(0x10 | (x & 0xF0) >> 4);
 8000fee:	79fb      	ldrb	r3, [r7, #7]
 8000ff0:	091b      	lsrs	r3, r3, #4
 8000ff2:	b2db      	uxtb	r3, r3
 8000ff4:	f043 0310 	orr.w	r3, r3, #16
 8000ff8:	b2db      	uxtb	r3, r3
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f7ff ffb8 	bl	8000f70 <WriteCMD>
	WriteCMD(0xB0 | page);
 8001000:	79bb      	ldrb	r3, [r7, #6]
 8001002:	f063 034f 	orn	r3, r3, #79	@ 0x4f
 8001006:	b2db      	uxtb	r3, r3
 8001008:	4618      	mov	r0, r3
 800100a:	f7ff ffb1 	bl	8000f70 <WriteCMD>
}
 800100e:	bf00      	nop
 8001010:	3708      	adds	r7, #8
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
	...

08001018 <OLED_Init>:
	}
}

//Public functions.
void OLED_Init()
{
 8001018:	b5b0      	push	{r4, r5, r7, lr}
 800101a:	b086      	sub	sp, #24
 800101c:	af00      	add	r7, sp, #0
	uint8_t cmdData[]={
 800101e:	4b12      	ldr	r3, [pc, #72]	@ (8001068 <OLED_Init+0x50>)
 8001020:	463c      	mov	r4, r7
 8001022:	461d      	mov	r5, r3
 8001024:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001026:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001028:	e895 0003 	ldmia.w	r5, {r0, r1}
 800102c:	6020      	str	r0, [r4, #0]
 800102e:	3404      	adds	r4, #4
 8001030:	8021      	strh	r1, [r4, #0]
 8001032:	3402      	adds	r4, #2
 8001034:	0c0b      	lsrs	r3, r1, #16
 8001036:	7023      	strb	r3, [r4, #0]
			0xAE, 0xD5, 0x80, 0xA8, 0x3F, 0xD3, 0x00, 0x40,0xA1, 0xC8, 0xDA,
			0x12, 0x81, 0xCF, 0xD9, 0xF1, 0xDB, 0x40, 0xA4, 0xA6,0x8D, 0x14,
			0xAF};
	for (uint8_t i = 0; i < 23; i++)
 8001038:	2300      	movs	r3, #0
 800103a:	75fb      	strb	r3, [r7, #23]
 800103c:	e00a      	b.n	8001054 <OLED_Init+0x3c>
	{
		WriteCMD(cmdData[i]);
 800103e:	7dfb      	ldrb	r3, [r7, #23]
 8001040:	3318      	adds	r3, #24
 8001042:	443b      	add	r3, r7
 8001044:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001048:	4618      	mov	r0, r3
 800104a:	f7ff ff91 	bl	8000f70 <WriteCMD>
	for (uint8_t i = 0; i < 23; i++)
 800104e:	7dfb      	ldrb	r3, [r7, #23]
 8001050:	3301      	adds	r3, #1
 8001052:	75fb      	strb	r3, [r7, #23]
 8001054:	7dfb      	ldrb	r3, [r7, #23]
 8001056:	2b16      	cmp	r3, #22
 8001058:	d9f1      	bls.n	800103e <OLED_Init+0x26>
	}
	OLED_Clear();
 800105a:	f000 f807 	bl	800106c <OLED_Clear>
}
 800105e:	bf00      	nop
 8001060:	3718      	adds	r7, #24
 8001062:	46bd      	mov	sp, r7
 8001064:	bdb0      	pop	{r4, r5, r7, pc}
 8001066:	bf00      	nop
 8001068:	08009bf8 	.word	0x08009bf8

0800106c <OLED_Clear>:
//Clear the entire screen.
void OLED_Clear()
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < 128; i++)
 8001072:	2300      	movs	r3, #0
 8001074:	71fb      	strb	r3, [r7, #7]
 8001076:	e014      	b.n	80010a2 <OLED_Clear+0x36>
	{
		for (uint8_t j = 0; j < 8; j++)
 8001078:	2300      	movs	r3, #0
 800107a:	71bb      	strb	r3, [r7, #6]
 800107c:	e00b      	b.n	8001096 <OLED_Clear+0x2a>
		{
			SetPosition(i, j);
 800107e:	79ba      	ldrb	r2, [r7, #6]
 8001080:	79fb      	ldrb	r3, [r7, #7]
 8001082:	4611      	mov	r1, r2
 8001084:	4618      	mov	r0, r3
 8001086:	f7ff ffa3 	bl	8000fd0 <SetPosition>
			WriteData(0x00);
 800108a:	2000      	movs	r0, #0
 800108c:	f7ff ff88 	bl	8000fa0 <WriteData>
		for (uint8_t j = 0; j < 8; j++)
 8001090:	79bb      	ldrb	r3, [r7, #6]
 8001092:	3301      	adds	r3, #1
 8001094:	71bb      	strb	r3, [r7, #6]
 8001096:	79bb      	ldrb	r3, [r7, #6]
 8001098:	2b07      	cmp	r3, #7
 800109a:	d9f0      	bls.n	800107e <OLED_Clear+0x12>
	for (uint8_t i = 0; i < 128; i++)
 800109c:	79fb      	ldrb	r3, [r7, #7]
 800109e:	3301      	adds	r3, #1
 80010a0:	71fb      	strb	r3, [r7, #7]
 80010a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	dae6      	bge.n	8001078 <OLED_Clear+0xc>
		}
	}
}
 80010aa:	bf00      	nop
 80010ac:	bf00      	nop
 80010ae:	3708      	adds	r7, #8
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}

080010b4 <OLED_ShowIMG>:
			}
			break;
	}
}
void OLED_ShowIMG(uint8_t x, uint8_t page, uint8_t imgWeight, uint8_t imgHeight, const uint8_t bmp[])
{
 80010b4:	b590      	push	{r4, r7, lr}
 80010b6:	b085      	sub	sp, #20
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	4604      	mov	r4, r0
 80010bc:	4608      	mov	r0, r1
 80010be:	4611      	mov	r1, r2
 80010c0:	461a      	mov	r2, r3
 80010c2:	4623      	mov	r3, r4
 80010c4:	71fb      	strb	r3, [r7, #7]
 80010c6:	4603      	mov	r3, r0
 80010c8:	71bb      	strb	r3, [r7, #6]
 80010ca:	460b      	mov	r3, r1
 80010cc:	717b      	strb	r3, [r7, #5]
 80010ce:	4613      	mov	r3, r2
 80010d0:	713b      	strb	r3, [r7, #4]
	for (uint8_t i = 0; i < imgHeight; i++)
 80010d2:	2300      	movs	r3, #0
 80010d4:	73fb      	strb	r3, [r7, #15]
 80010d6:	e022      	b.n	800111e <OLED_ShowIMG+0x6a>
	{
		SetPosition(x, page + i);
 80010d8:	79ba      	ldrb	r2, [r7, #6]
 80010da:	7bfb      	ldrb	r3, [r7, #15]
 80010dc:	4413      	add	r3, r2
 80010de:	b2da      	uxtb	r2, r3
 80010e0:	79fb      	ldrb	r3, [r7, #7]
 80010e2:	4611      	mov	r1, r2
 80010e4:	4618      	mov	r0, r3
 80010e6:	f7ff ff73 	bl	8000fd0 <SetPosition>
		for (uint8_t j = 0; j < imgWeight; j++)
 80010ea:	2300      	movs	r3, #0
 80010ec:	73bb      	strb	r3, [r7, #14]
 80010ee:	e00f      	b.n	8001110 <OLED_ShowIMG+0x5c>
		{
			WriteData(bmp[i * imgWeight + j]);
 80010f0:	7bfb      	ldrb	r3, [r7, #15]
 80010f2:	797a      	ldrb	r2, [r7, #5]
 80010f4:	fb03 f202 	mul.w	r2, r3, r2
 80010f8:	7bbb      	ldrb	r3, [r7, #14]
 80010fa:	4413      	add	r3, r2
 80010fc:	461a      	mov	r2, r3
 80010fe:	6a3b      	ldr	r3, [r7, #32]
 8001100:	4413      	add	r3, r2
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	4618      	mov	r0, r3
 8001106:	f7ff ff4b 	bl	8000fa0 <WriteData>
		for (uint8_t j = 0; j < imgWeight; j++)
 800110a:	7bbb      	ldrb	r3, [r7, #14]
 800110c:	3301      	adds	r3, #1
 800110e:	73bb      	strb	r3, [r7, #14]
 8001110:	7bba      	ldrb	r2, [r7, #14]
 8001112:	797b      	ldrb	r3, [r7, #5]
 8001114:	429a      	cmp	r2, r3
 8001116:	d3eb      	bcc.n	80010f0 <OLED_ShowIMG+0x3c>
	for (uint8_t i = 0; i < imgHeight; i++)
 8001118:	7bfb      	ldrb	r3, [r7, #15]
 800111a:	3301      	adds	r3, #1
 800111c:	73fb      	strb	r3, [r7, #15]
 800111e:	7bfa      	ldrb	r2, [r7, #15]
 8001120:	793b      	ldrb	r3, [r7, #4]
 8001122:	429a      	cmp	r2, r3
 8001124:	d3d8      	bcc.n	80010d8 <OLED_ShowIMG+0x24>
		}
	}
}
 8001126:	bf00      	nop
 8001128:	bf00      	nop
 800112a:	3714      	adds	r7, #20
 800112c:	46bd      	mov	sp, r7
 800112e:	bd90      	pop	{r4, r7, pc}

08001130 <OLED_Test>:
			break;
	}
}

void OLED_Test()
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af02      	add	r7, sp, #8
	//OLED_ShowString(0, 0, "Hello world!", VI_VIII_DOT_MATRIX);
	//OLED_ShowString(0, 1, "Hello world!", VIII_XVI_DOT_MATRIX);
	//OLED_ShowIMG(0, 0, 48, 6, image);
	OLED_ShowIMG(0, 0, 128, 8, BMP1);
 8001136:	4b05      	ldr	r3, [pc, #20]	@ (800114c <OLED_Test+0x1c>)
 8001138:	9300      	str	r3, [sp, #0]
 800113a:	2308      	movs	r3, #8
 800113c:	2280      	movs	r2, #128	@ 0x80
 800113e:	2100      	movs	r1, #0
 8001140:	2000      	movs	r0, #0
 8001142:	f7ff ffb7 	bl	80010b4 <OLED_ShowIMG>
	//OLED_ShowNUM(0, 0, 123, 3, VI_VIII_DOT_MATRIX);
	//OLED_ShowNUM(0, 1, 123, 3, VIII_XVI_DOT_MATRIX);
}
 8001146:	bf00      	nop
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	20000000 	.word	0x20000000

08001150 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001150:	b480      	push	{r7}
 8001152:	b085      	sub	sp, #20
 8001154:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001156:	4b15      	ldr	r3, [pc, #84]	@ (80011ac <HAL_MspInit+0x5c>)
 8001158:	699b      	ldr	r3, [r3, #24]
 800115a:	4a14      	ldr	r2, [pc, #80]	@ (80011ac <HAL_MspInit+0x5c>)
 800115c:	f043 0301 	orr.w	r3, r3, #1
 8001160:	6193      	str	r3, [r2, #24]
 8001162:	4b12      	ldr	r3, [pc, #72]	@ (80011ac <HAL_MspInit+0x5c>)
 8001164:	699b      	ldr	r3, [r3, #24]
 8001166:	f003 0301 	and.w	r3, r3, #1
 800116a:	60bb      	str	r3, [r7, #8]
 800116c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800116e:	4b0f      	ldr	r3, [pc, #60]	@ (80011ac <HAL_MspInit+0x5c>)
 8001170:	69db      	ldr	r3, [r3, #28]
 8001172:	4a0e      	ldr	r2, [pc, #56]	@ (80011ac <HAL_MspInit+0x5c>)
 8001174:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001178:	61d3      	str	r3, [r2, #28]
 800117a:	4b0c      	ldr	r3, [pc, #48]	@ (80011ac <HAL_MspInit+0x5c>)
 800117c:	69db      	ldr	r3, [r3, #28]
 800117e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001182:	607b      	str	r3, [r7, #4]
 8001184:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001186:	4b0a      	ldr	r3, [pc, #40]	@ (80011b0 <HAL_MspInit+0x60>)
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	60fb      	str	r3, [r7, #12]
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001192:	60fb      	str	r3, [r7, #12]
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800119a:	60fb      	str	r3, [r7, #12]
 800119c:	4a04      	ldr	r2, [pc, #16]	@ (80011b0 <HAL_MspInit+0x60>)
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011a2:	bf00      	nop
 80011a4:	3714      	adds	r7, #20
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bc80      	pop	{r7}
 80011aa:	4770      	bx	lr
 80011ac:	40021000 	.word	0x40021000
 80011b0:	40010000 	.word	0x40010000

080011b4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b08e      	sub	sp, #56	@ 0x38
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80011bc:	2300      	movs	r3, #0
 80011be:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80011c0:	2300      	movs	r3, #0
 80011c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 80011c4:	2300      	movs	r3, #0
 80011c6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 80011ca:	4b34      	ldr	r3, [pc, #208]	@ (800129c <HAL_InitTick+0xe8>)
 80011cc:	69db      	ldr	r3, [r3, #28]
 80011ce:	4a33      	ldr	r2, [pc, #204]	@ (800129c <HAL_InitTick+0xe8>)
 80011d0:	f043 0304 	orr.w	r3, r3, #4
 80011d4:	61d3      	str	r3, [r2, #28]
 80011d6:	4b31      	ldr	r3, [pc, #196]	@ (800129c <HAL_InitTick+0xe8>)
 80011d8:	69db      	ldr	r3, [r3, #28]
 80011da:	f003 0304 	and.w	r3, r3, #4
 80011de:	60fb      	str	r3, [r7, #12]
 80011e0:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80011e2:	f107 0210 	add.w	r2, r7, #16
 80011e6:	f107 0314 	add.w	r3, r7, #20
 80011ea:	4611      	mov	r1, r2
 80011ec:	4618      	mov	r0, r3
 80011ee:	f001 fde9 	bl	8002dc4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80011f2:	6a3b      	ldr	r3, [r7, #32]
 80011f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80011f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d103      	bne.n	8001204 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80011fc:	f001 fdba 	bl	8002d74 <HAL_RCC_GetPCLK1Freq>
 8001200:	6378      	str	r0, [r7, #52]	@ 0x34
 8001202:	e004      	b.n	800120e <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001204:	f001 fdb6 	bl	8002d74 <HAL_RCC_GetPCLK1Freq>
 8001208:	4603      	mov	r3, r0
 800120a:	005b      	lsls	r3, r3, #1
 800120c:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800120e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001210:	4a23      	ldr	r2, [pc, #140]	@ (80012a0 <HAL_InitTick+0xec>)
 8001212:	fba2 2303 	umull	r2, r3, r2, r3
 8001216:	0c9b      	lsrs	r3, r3, #18
 8001218:	3b01      	subs	r3, #1
 800121a:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 800121c:	4b21      	ldr	r3, [pc, #132]	@ (80012a4 <HAL_InitTick+0xf0>)
 800121e:	4a22      	ldr	r2, [pc, #136]	@ (80012a8 <HAL_InitTick+0xf4>)
 8001220:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8001222:	4b20      	ldr	r3, [pc, #128]	@ (80012a4 <HAL_InitTick+0xf0>)
 8001224:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001228:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 800122a:	4a1e      	ldr	r2, [pc, #120]	@ (80012a4 <HAL_InitTick+0xf0>)
 800122c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800122e:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8001230:	4b1c      	ldr	r3, [pc, #112]	@ (80012a4 <HAL_InitTick+0xf0>)
 8001232:	2200      	movs	r2, #0
 8001234:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001236:	4b1b      	ldr	r3, [pc, #108]	@ (80012a4 <HAL_InitTick+0xf0>)
 8001238:	2200      	movs	r2, #0
 800123a:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800123c:	4b19      	ldr	r3, [pc, #100]	@ (80012a4 <HAL_InitTick+0xf0>)
 800123e:	2200      	movs	r2, #0
 8001240:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 8001242:	4818      	ldr	r0, [pc, #96]	@ (80012a4 <HAL_InitTick+0xf0>)
 8001244:	f001 fe0c 	bl	8002e60 <HAL_TIM_Base_Init>
 8001248:	4603      	mov	r3, r0
 800124a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 800124e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001252:	2b00      	cmp	r3, #0
 8001254:	d11b      	bne.n	800128e <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 8001256:	4813      	ldr	r0, [pc, #76]	@ (80012a4 <HAL_InitTick+0xf0>)
 8001258:	f001 fe52 	bl	8002f00 <HAL_TIM_Base_Start_IT>
 800125c:	4603      	mov	r3, r0
 800125e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001262:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001266:	2b00      	cmp	r3, #0
 8001268:	d111      	bne.n	800128e <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800126a:	201e      	movs	r0, #30
 800126c:	f000 fb47 	bl	80018fe <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	2b0f      	cmp	r3, #15
 8001274:	d808      	bhi.n	8001288 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8001276:	2200      	movs	r2, #0
 8001278:	6879      	ldr	r1, [r7, #4]
 800127a:	201e      	movs	r0, #30
 800127c:	f000 fb23 	bl	80018c6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001280:	4a0a      	ldr	r2, [pc, #40]	@ (80012ac <HAL_InitTick+0xf8>)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	6013      	str	r3, [r2, #0]
 8001286:	e002      	b.n	800128e <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8001288:	2301      	movs	r3, #1
 800128a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800128e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001292:	4618      	mov	r0, r3
 8001294:	3738      	adds	r7, #56	@ 0x38
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	40021000 	.word	0x40021000
 80012a0:	431bde83 	.word	0x431bde83
 80012a4:	20000848 	.word	0x20000848
 80012a8:	40000800 	.word	0x40000800
 80012ac:	20000404 	.word	0x20000404

080012b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80012b4:	bf00      	nop
 80012b6:	e7fd      	b.n	80012b4 <NMI_Handler+0x4>

080012b8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012b8:	b480      	push	{r7}
 80012ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012bc:	bf00      	nop
 80012be:	e7fd      	b.n	80012bc <HardFault_Handler+0x4>

080012c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012c4:	bf00      	nop
 80012c6:	e7fd      	b.n	80012c4 <MemManage_Handler+0x4>

080012c8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012cc:	bf00      	nop
 80012ce:	e7fd      	b.n	80012cc <BusFault_Handler+0x4>

080012d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012d4:	bf00      	nop
 80012d6:	e7fd      	b.n	80012d4 <UsageFault_Handler+0x4>

080012d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012d8:	b480      	push	{r7}
 80012da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012dc:	bf00      	nop
 80012de:	46bd      	mov	sp, r7
 80012e0:	bc80      	pop	{r7}
 80012e2:	4770      	bx	lr

080012e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80012e8:	f003 fee0 	bl	80050ac <xTaskGetSchedulerState>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b01      	cmp	r3, #1
 80012f0:	d001      	beq.n	80012f6 <SysTick_Handler+0x12>
  {
	  xPortSysTickHandler();
 80012f2:	f002 fcc1 	bl	8003c78 <xPortSysTickHandler>
  }
  /* USER CODE END SysTick_IRQn 1 */
}
 80012f6:	bf00      	nop
 80012f8:	bd80      	pop	{r7, pc}
	...

080012fc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001300:	4802      	ldr	r0, [pc, #8]	@ (800130c <TIM3_IRQHandler+0x10>)
 8001302:	f001 fe4f 	bl	8002fa4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001306:	bf00      	nop
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	20000894 	.word	0x20000894

08001310 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001314:	4802      	ldr	r0, [pc, #8]	@ (8001320 <TIM4_IRQHandler+0x10>)
 8001316:	f001 fe45 	bl	8002fa4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800131a:	bf00      	nop
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	20000848 	.word	0x20000848

08001324 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
  return 1;
 8001328:	2301      	movs	r3, #1
}
 800132a:	4618      	mov	r0, r3
 800132c:	46bd      	mov	sp, r7
 800132e:	bc80      	pop	{r7}
 8001330:	4770      	bx	lr

08001332 <_kill>:

int _kill(int pid, int sig)
{
 8001332:	b580      	push	{r7, lr}
 8001334:	b082      	sub	sp, #8
 8001336:	af00      	add	r7, sp, #0
 8001338:	6078      	str	r0, [r7, #4]
 800133a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800133c:	f005 f948 	bl	80065d0 <__errno>
 8001340:	4603      	mov	r3, r0
 8001342:	2216      	movs	r2, #22
 8001344:	601a      	str	r2, [r3, #0]
  return -1;
 8001346:	f04f 33ff 	mov.w	r3, #4294967295
}
 800134a:	4618      	mov	r0, r3
 800134c:	3708      	adds	r7, #8
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}

08001352 <_exit>:

void _exit (int status)
{
 8001352:	b580      	push	{r7, lr}
 8001354:	b082      	sub	sp, #8
 8001356:	af00      	add	r7, sp, #0
 8001358:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800135a:	f04f 31ff 	mov.w	r1, #4294967295
 800135e:	6878      	ldr	r0, [r7, #4]
 8001360:	f7ff ffe7 	bl	8001332 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001364:	bf00      	nop
 8001366:	e7fd      	b.n	8001364 <_exit+0x12>

08001368 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b086      	sub	sp, #24
 800136c:	af00      	add	r7, sp, #0
 800136e:	60f8      	str	r0, [r7, #12]
 8001370:	60b9      	str	r1, [r7, #8]
 8001372:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001374:	2300      	movs	r3, #0
 8001376:	617b      	str	r3, [r7, #20]
 8001378:	e00a      	b.n	8001390 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800137a:	f3af 8000 	nop.w
 800137e:	4601      	mov	r1, r0
 8001380:	68bb      	ldr	r3, [r7, #8]
 8001382:	1c5a      	adds	r2, r3, #1
 8001384:	60ba      	str	r2, [r7, #8]
 8001386:	b2ca      	uxtb	r2, r1
 8001388:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800138a:	697b      	ldr	r3, [r7, #20]
 800138c:	3301      	adds	r3, #1
 800138e:	617b      	str	r3, [r7, #20]
 8001390:	697a      	ldr	r2, [r7, #20]
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	429a      	cmp	r2, r3
 8001396:	dbf0      	blt.n	800137a <_read+0x12>
  }

  return len;
 8001398:	687b      	ldr	r3, [r7, #4]
}
 800139a:	4618      	mov	r0, r3
 800139c:	3718      	adds	r7, #24
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}

080013a2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80013a2:	b580      	push	{r7, lr}
 80013a4:	b086      	sub	sp, #24
 80013a6:	af00      	add	r7, sp, #0
 80013a8:	60f8      	str	r0, [r7, #12]
 80013aa:	60b9      	str	r1, [r7, #8]
 80013ac:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013ae:	2300      	movs	r3, #0
 80013b0:	617b      	str	r3, [r7, #20]
 80013b2:	e009      	b.n	80013c8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80013b4:	68bb      	ldr	r3, [r7, #8]
 80013b6:	1c5a      	adds	r2, r3, #1
 80013b8:	60ba      	str	r2, [r7, #8]
 80013ba:	781b      	ldrb	r3, [r3, #0]
 80013bc:	4618      	mov	r0, r3
 80013be:	f000 f963 	bl	8001688 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013c2:	697b      	ldr	r3, [r7, #20]
 80013c4:	3301      	adds	r3, #1
 80013c6:	617b      	str	r3, [r7, #20]
 80013c8:	697a      	ldr	r2, [r7, #20]
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	429a      	cmp	r2, r3
 80013ce:	dbf1      	blt.n	80013b4 <_write+0x12>
  }
  return len;
 80013d0:	687b      	ldr	r3, [r7, #4]
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	3718      	adds	r7, #24
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}

080013da <_close>:

int _close(int file)
{
 80013da:	b480      	push	{r7}
 80013dc:	b083      	sub	sp, #12
 80013de:	af00      	add	r7, sp, #0
 80013e0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80013e2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	370c      	adds	r7, #12
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bc80      	pop	{r7}
 80013ee:	4770      	bx	lr

080013f0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b083      	sub	sp, #12
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
 80013f8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001400:	605a      	str	r2, [r3, #4]
  return 0;
 8001402:	2300      	movs	r3, #0
}
 8001404:	4618      	mov	r0, r3
 8001406:	370c      	adds	r7, #12
 8001408:	46bd      	mov	sp, r7
 800140a:	bc80      	pop	{r7}
 800140c:	4770      	bx	lr

0800140e <_isatty>:

int _isatty(int file)
{
 800140e:	b480      	push	{r7}
 8001410:	b083      	sub	sp, #12
 8001412:	af00      	add	r7, sp, #0
 8001414:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001416:	2301      	movs	r3, #1
}
 8001418:	4618      	mov	r0, r3
 800141a:	370c      	adds	r7, #12
 800141c:	46bd      	mov	sp, r7
 800141e:	bc80      	pop	{r7}
 8001420:	4770      	bx	lr

08001422 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001422:	b480      	push	{r7}
 8001424:	b085      	sub	sp, #20
 8001426:	af00      	add	r7, sp, #0
 8001428:	60f8      	str	r0, [r7, #12]
 800142a:	60b9      	str	r1, [r7, #8]
 800142c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800142e:	2300      	movs	r3, #0
}
 8001430:	4618      	mov	r0, r3
 8001432:	3714      	adds	r7, #20
 8001434:	46bd      	mov	sp, r7
 8001436:	bc80      	pop	{r7}
 8001438:	4770      	bx	lr
	...

0800143c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b086      	sub	sp, #24
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001444:	4a14      	ldr	r2, [pc, #80]	@ (8001498 <_sbrk+0x5c>)
 8001446:	4b15      	ldr	r3, [pc, #84]	@ (800149c <_sbrk+0x60>)
 8001448:	1ad3      	subs	r3, r2, r3
 800144a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001450:	4b13      	ldr	r3, [pc, #76]	@ (80014a0 <_sbrk+0x64>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	2b00      	cmp	r3, #0
 8001456:	d102      	bne.n	800145e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001458:	4b11      	ldr	r3, [pc, #68]	@ (80014a0 <_sbrk+0x64>)
 800145a:	4a12      	ldr	r2, [pc, #72]	@ (80014a4 <_sbrk+0x68>)
 800145c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800145e:	4b10      	ldr	r3, [pc, #64]	@ (80014a0 <_sbrk+0x64>)
 8001460:	681a      	ldr	r2, [r3, #0]
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	4413      	add	r3, r2
 8001466:	693a      	ldr	r2, [r7, #16]
 8001468:	429a      	cmp	r2, r3
 800146a:	d207      	bcs.n	800147c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800146c:	f005 f8b0 	bl	80065d0 <__errno>
 8001470:	4603      	mov	r3, r0
 8001472:	220c      	movs	r2, #12
 8001474:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001476:	f04f 33ff 	mov.w	r3, #4294967295
 800147a:	e009      	b.n	8001490 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800147c:	4b08      	ldr	r3, [pc, #32]	@ (80014a0 <_sbrk+0x64>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001482:	4b07      	ldr	r3, [pc, #28]	@ (80014a0 <_sbrk+0x64>)
 8001484:	681a      	ldr	r2, [r3, #0]
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	4413      	add	r3, r2
 800148a:	4a05      	ldr	r2, [pc, #20]	@ (80014a0 <_sbrk+0x64>)
 800148c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800148e:	68fb      	ldr	r3, [r7, #12]
}
 8001490:	4618      	mov	r0, r3
 8001492:	3718      	adds	r7, #24
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}
 8001498:	20005000 	.word	0x20005000
 800149c:	00000400 	.word	0x00000400
 80014a0:	20000890 	.word	0x20000890
 80014a4:	20003398 	.word	0x20003398

080014a8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014ac:	bf00      	nop
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bc80      	pop	{r7}
 80014b2:	4770      	bx	lr

080014b4 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b086      	sub	sp, #24
 80014b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014ba:	f107 0308 	add.w	r3, r7, #8
 80014be:	2200      	movs	r2, #0
 80014c0:	601a      	str	r2, [r3, #0]
 80014c2:	605a      	str	r2, [r3, #4]
 80014c4:	609a      	str	r2, [r3, #8]
 80014c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014c8:	463b      	mov	r3, r7
 80014ca:	2200      	movs	r2, #0
 80014cc:	601a      	str	r2, [r3, #0]
 80014ce:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80014d0:	4b1d      	ldr	r3, [pc, #116]	@ (8001548 <MX_TIM3_Init+0x94>)
 80014d2:	4a1e      	ldr	r2, [pc, #120]	@ (800154c <MX_TIM3_Init+0x98>)
 80014d4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7199;
 80014d6:	4b1c      	ldr	r3, [pc, #112]	@ (8001548 <MX_TIM3_Init+0x94>)
 80014d8:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 80014dc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014de:	4b1a      	ldr	r3, [pc, #104]	@ (8001548 <MX_TIM3_Init+0x94>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 80014e4:	4b18      	ldr	r3, [pc, #96]	@ (8001548 <MX_TIM3_Init+0x94>)
 80014e6:	f242 720f 	movw	r2, #9999	@ 0x270f
 80014ea:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014ec:	4b16      	ldr	r3, [pc, #88]	@ (8001548 <MX_TIM3_Init+0x94>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80014f2:	4b15      	ldr	r3, [pc, #84]	@ (8001548 <MX_TIM3_Init+0x94>)
 80014f4:	2280      	movs	r2, #128	@ 0x80
 80014f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80014f8:	4813      	ldr	r0, [pc, #76]	@ (8001548 <MX_TIM3_Init+0x94>)
 80014fa:	f001 fcb1 	bl	8002e60 <HAL_TIM_Base_Init>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d001      	beq.n	8001508 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001504:	f7ff fd2e 	bl	8000f64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001508:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800150c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800150e:	f107 0308 	add.w	r3, r7, #8
 8001512:	4619      	mov	r1, r3
 8001514:	480c      	ldr	r0, [pc, #48]	@ (8001548 <MX_TIM3_Init+0x94>)
 8001516:	f001 fe35 	bl	8003184 <HAL_TIM_ConfigClockSource>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	d001      	beq.n	8001524 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001520:	f7ff fd20 	bl	8000f64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001524:	2300      	movs	r3, #0
 8001526:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001528:	2300      	movs	r3, #0
 800152a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800152c:	463b      	mov	r3, r7
 800152e:	4619      	mov	r1, r3
 8001530:	4805      	ldr	r0, [pc, #20]	@ (8001548 <MX_TIM3_Init+0x94>)
 8001532:	f002 f817 	bl	8003564 <HAL_TIMEx_MasterConfigSynchronization>
 8001536:	4603      	mov	r3, r0
 8001538:	2b00      	cmp	r3, #0
 800153a:	d001      	beq.n	8001540 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 800153c:	f7ff fd12 	bl	8000f64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001540:	bf00      	nop
 8001542:	3718      	adds	r7, #24
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}
 8001548:	20000894 	.word	0x20000894
 800154c:	40000400 	.word	0x40000400

08001550 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b084      	sub	sp, #16
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a0d      	ldr	r2, [pc, #52]	@ (8001594 <HAL_TIM_Base_MspInit+0x44>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d113      	bne.n	800158a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001562:	4b0d      	ldr	r3, [pc, #52]	@ (8001598 <HAL_TIM_Base_MspInit+0x48>)
 8001564:	69db      	ldr	r3, [r3, #28]
 8001566:	4a0c      	ldr	r2, [pc, #48]	@ (8001598 <HAL_TIM_Base_MspInit+0x48>)
 8001568:	f043 0302 	orr.w	r3, r3, #2
 800156c:	61d3      	str	r3, [r2, #28]
 800156e:	4b0a      	ldr	r3, [pc, #40]	@ (8001598 <HAL_TIM_Base_MspInit+0x48>)
 8001570:	69db      	ldr	r3, [r3, #28]
 8001572:	f003 0302 	and.w	r3, r3, #2
 8001576:	60fb      	str	r3, [r7, #12]
 8001578:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 800157a:	2200      	movs	r2, #0
 800157c:	2105      	movs	r1, #5
 800157e:	201d      	movs	r0, #29
 8001580:	f000 f9a1 	bl	80018c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001584:	201d      	movs	r0, #29
 8001586:	f000 f9ba 	bl	80018fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800158a:	bf00      	nop
 800158c:	3710      	adds	r7, #16
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	40000400 	.word	0x40000400
 8001598:	40021000 	.word	0x40021000

0800159c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80015a0:	4b11      	ldr	r3, [pc, #68]	@ (80015e8 <MX_USART1_UART_Init+0x4c>)
 80015a2:	4a12      	ldr	r2, [pc, #72]	@ (80015ec <MX_USART1_UART_Init+0x50>)
 80015a4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80015a6:	4b10      	ldr	r3, [pc, #64]	@ (80015e8 <MX_USART1_UART_Init+0x4c>)
 80015a8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80015ac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80015ae:	4b0e      	ldr	r3, [pc, #56]	@ (80015e8 <MX_USART1_UART_Init+0x4c>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80015b4:	4b0c      	ldr	r3, [pc, #48]	@ (80015e8 <MX_USART1_UART_Init+0x4c>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80015ba:	4b0b      	ldr	r3, [pc, #44]	@ (80015e8 <MX_USART1_UART_Init+0x4c>)
 80015bc:	2200      	movs	r2, #0
 80015be:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80015c0:	4b09      	ldr	r3, [pc, #36]	@ (80015e8 <MX_USART1_UART_Init+0x4c>)
 80015c2:	220c      	movs	r2, #12
 80015c4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015c6:	4b08      	ldr	r3, [pc, #32]	@ (80015e8 <MX_USART1_UART_Init+0x4c>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80015cc:	4b06      	ldr	r3, [pc, #24]	@ (80015e8 <MX_USART1_UART_Init+0x4c>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80015d2:	4805      	ldr	r0, [pc, #20]	@ (80015e8 <MX_USART1_UART_Init+0x4c>)
 80015d4:	f002 f836 	bl	8003644 <HAL_UART_Init>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d001      	beq.n	80015e2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80015de:	f7ff fcc1 	bl	8000f64 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80015e2:	bf00      	nop
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	200008dc 	.word	0x200008dc
 80015ec:	40013800 	.word	0x40013800

080015f0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b088      	sub	sp, #32
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015f8:	f107 0310 	add.w	r3, r7, #16
 80015fc:	2200      	movs	r2, #0
 80015fe:	601a      	str	r2, [r3, #0]
 8001600:	605a      	str	r2, [r3, #4]
 8001602:	609a      	str	r2, [r3, #8]
 8001604:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4a1c      	ldr	r2, [pc, #112]	@ (800167c <HAL_UART_MspInit+0x8c>)
 800160c:	4293      	cmp	r3, r2
 800160e:	d131      	bne.n	8001674 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001610:	4b1b      	ldr	r3, [pc, #108]	@ (8001680 <HAL_UART_MspInit+0x90>)
 8001612:	699b      	ldr	r3, [r3, #24]
 8001614:	4a1a      	ldr	r2, [pc, #104]	@ (8001680 <HAL_UART_MspInit+0x90>)
 8001616:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800161a:	6193      	str	r3, [r2, #24]
 800161c:	4b18      	ldr	r3, [pc, #96]	@ (8001680 <HAL_UART_MspInit+0x90>)
 800161e:	699b      	ldr	r3, [r3, #24]
 8001620:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001624:	60fb      	str	r3, [r7, #12]
 8001626:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001628:	4b15      	ldr	r3, [pc, #84]	@ (8001680 <HAL_UART_MspInit+0x90>)
 800162a:	699b      	ldr	r3, [r3, #24]
 800162c:	4a14      	ldr	r2, [pc, #80]	@ (8001680 <HAL_UART_MspInit+0x90>)
 800162e:	f043 0304 	orr.w	r3, r3, #4
 8001632:	6193      	str	r3, [r2, #24]
 8001634:	4b12      	ldr	r3, [pc, #72]	@ (8001680 <HAL_UART_MspInit+0x90>)
 8001636:	699b      	ldr	r3, [r3, #24]
 8001638:	f003 0304 	and.w	r3, r3, #4
 800163c:	60bb      	str	r3, [r7, #8]
 800163e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001640:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001644:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001646:	2302      	movs	r3, #2
 8001648:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800164a:	2303      	movs	r3, #3
 800164c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800164e:	f107 0310 	add.w	r3, r7, #16
 8001652:	4619      	mov	r1, r3
 8001654:	480b      	ldr	r0, [pc, #44]	@ (8001684 <HAL_UART_MspInit+0x94>)
 8001656:	f000 f961 	bl	800191c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800165a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800165e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001660:	2300      	movs	r3, #0
 8001662:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001664:	2300      	movs	r3, #0
 8001666:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001668:	f107 0310 	add.w	r3, r7, #16
 800166c:	4619      	mov	r1, r3
 800166e:	4805      	ldr	r0, [pc, #20]	@ (8001684 <HAL_UART_MspInit+0x94>)
 8001670:	f000 f954 	bl	800191c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001674:	bf00      	nop
 8001676:	3720      	adds	r7, #32
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}
 800167c:	40013800 	.word	0x40013800
 8001680:	40021000 	.word	0x40021000
 8001684:	40010800 	.word	0x40010800

08001688 <__io_putchar>:
  }
}

/* USER CODE BEGIN 1 */
int __io_putchar(int ch)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8001690:	1d39      	adds	r1, r7, #4
 8001692:	f04f 33ff 	mov.w	r3, #4294967295
 8001696:	2201      	movs	r2, #1
 8001698:	4803      	ldr	r0, [pc, #12]	@ (80016a8 <__io_putchar+0x20>)
 800169a:	f002 f823 	bl	80036e4 <HAL_UART_Transmit>
  return ch;
 800169e:	687b      	ldr	r3, [r7, #4]
}
 80016a0:	4618      	mov	r0, r3
 80016a2:	3708      	adds	r7, #8
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	200008dc 	.word	0x200008dc

080016ac <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80016ac:	f7ff fefc 	bl	80014a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80016b0:	480b      	ldr	r0, [pc, #44]	@ (80016e0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80016b2:	490c      	ldr	r1, [pc, #48]	@ (80016e4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80016b4:	4a0c      	ldr	r2, [pc, #48]	@ (80016e8 <LoopFillZerobss+0x16>)
  movs r3, #0
 80016b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016b8:	e002      	b.n	80016c0 <LoopCopyDataInit>

080016ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016be:	3304      	adds	r3, #4

080016c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016c4:	d3f9      	bcc.n	80016ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016c6:	4a09      	ldr	r2, [pc, #36]	@ (80016ec <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80016c8:	4c09      	ldr	r4, [pc, #36]	@ (80016f0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80016ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016cc:	e001      	b.n	80016d2 <LoopFillZerobss>

080016ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016d0:	3204      	adds	r2, #4

080016d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016d4:	d3fb      	bcc.n	80016ce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80016d6:	f004 ff81 	bl	80065dc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80016da:	f7ff fbc3 	bl	8000e64 <main>
  bx lr
 80016de:	4770      	bx	lr
  ldr r0, =_sdata
 80016e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016e4:	200005dc 	.word	0x200005dc
  ldr r2, =_sidata
 80016e8:	0800a090 	.word	0x0800a090
  ldr r2, =_sbss
 80016ec:	200005dc 	.word	0x200005dc
  ldr r4, =_ebss
 80016f0:	20003394 	.word	0x20003394

080016f4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80016f4:	e7fe      	b.n	80016f4 <ADC1_2_IRQHandler>
	...

080016f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016fc:	4b08      	ldr	r3, [pc, #32]	@ (8001720 <HAL_Init+0x28>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a07      	ldr	r2, [pc, #28]	@ (8001720 <HAL_Init+0x28>)
 8001702:	f043 0310 	orr.w	r3, r3, #16
 8001706:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001708:	2003      	movs	r0, #3
 800170a:	f000 f8d1 	bl	80018b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800170e:	2001      	movs	r0, #1
 8001710:	f7ff fd50 	bl	80011b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001714:	f7ff fd1c 	bl	8001150 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001718:	2300      	movs	r3, #0
}
 800171a:	4618      	mov	r0, r3
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	40022000 	.word	0x40022000

08001724 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001728:	4b05      	ldr	r3, [pc, #20]	@ (8001740 <HAL_IncTick+0x1c>)
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	461a      	mov	r2, r3
 800172e:	4b05      	ldr	r3, [pc, #20]	@ (8001744 <HAL_IncTick+0x20>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4413      	add	r3, r2
 8001734:	4a03      	ldr	r2, [pc, #12]	@ (8001744 <HAL_IncTick+0x20>)
 8001736:	6013      	str	r3, [r2, #0]
}
 8001738:	bf00      	nop
 800173a:	46bd      	mov	sp, r7
 800173c:	bc80      	pop	{r7}
 800173e:	4770      	bx	lr
 8001740:	20000408 	.word	0x20000408
 8001744:	20000924 	.word	0x20000924

08001748 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001748:	b480      	push	{r7}
 800174a:	af00      	add	r7, sp, #0
  return uwTick;
 800174c:	4b02      	ldr	r3, [pc, #8]	@ (8001758 <HAL_GetTick+0x10>)
 800174e:	681b      	ldr	r3, [r3, #0]
}
 8001750:	4618      	mov	r0, r3
 8001752:	46bd      	mov	sp, r7
 8001754:	bc80      	pop	{r7}
 8001756:	4770      	bx	lr
 8001758:	20000924 	.word	0x20000924

0800175c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800175c:	b480      	push	{r7}
 800175e:	b085      	sub	sp, #20
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	f003 0307 	and.w	r3, r3, #7
 800176a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800176c:	4b0c      	ldr	r3, [pc, #48]	@ (80017a0 <__NVIC_SetPriorityGrouping+0x44>)
 800176e:	68db      	ldr	r3, [r3, #12]
 8001770:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001772:	68ba      	ldr	r2, [r7, #8]
 8001774:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001778:	4013      	ands	r3, r2
 800177a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001780:	68bb      	ldr	r3, [r7, #8]
 8001782:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001784:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001788:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800178c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800178e:	4a04      	ldr	r2, [pc, #16]	@ (80017a0 <__NVIC_SetPriorityGrouping+0x44>)
 8001790:	68bb      	ldr	r3, [r7, #8]
 8001792:	60d3      	str	r3, [r2, #12]
}
 8001794:	bf00      	nop
 8001796:	3714      	adds	r7, #20
 8001798:	46bd      	mov	sp, r7
 800179a:	bc80      	pop	{r7}
 800179c:	4770      	bx	lr
 800179e:	bf00      	nop
 80017a0:	e000ed00 	.word	0xe000ed00

080017a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017a8:	4b04      	ldr	r3, [pc, #16]	@ (80017bc <__NVIC_GetPriorityGrouping+0x18>)
 80017aa:	68db      	ldr	r3, [r3, #12]
 80017ac:	0a1b      	lsrs	r3, r3, #8
 80017ae:	f003 0307 	and.w	r3, r3, #7
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bc80      	pop	{r7}
 80017b8:	4770      	bx	lr
 80017ba:	bf00      	nop
 80017bc:	e000ed00 	.word	0xe000ed00

080017c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b083      	sub	sp, #12
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	4603      	mov	r3, r0
 80017c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	db0b      	blt.n	80017ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017d2:	79fb      	ldrb	r3, [r7, #7]
 80017d4:	f003 021f 	and.w	r2, r3, #31
 80017d8:	4906      	ldr	r1, [pc, #24]	@ (80017f4 <__NVIC_EnableIRQ+0x34>)
 80017da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017de:	095b      	lsrs	r3, r3, #5
 80017e0:	2001      	movs	r0, #1
 80017e2:	fa00 f202 	lsl.w	r2, r0, r2
 80017e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80017ea:	bf00      	nop
 80017ec:	370c      	adds	r7, #12
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bc80      	pop	{r7}
 80017f2:	4770      	bx	lr
 80017f4:	e000e100 	.word	0xe000e100

080017f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b083      	sub	sp, #12
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	4603      	mov	r3, r0
 8001800:	6039      	str	r1, [r7, #0]
 8001802:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001804:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001808:	2b00      	cmp	r3, #0
 800180a:	db0a      	blt.n	8001822 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	b2da      	uxtb	r2, r3
 8001810:	490c      	ldr	r1, [pc, #48]	@ (8001844 <__NVIC_SetPriority+0x4c>)
 8001812:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001816:	0112      	lsls	r2, r2, #4
 8001818:	b2d2      	uxtb	r2, r2
 800181a:	440b      	add	r3, r1
 800181c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001820:	e00a      	b.n	8001838 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	b2da      	uxtb	r2, r3
 8001826:	4908      	ldr	r1, [pc, #32]	@ (8001848 <__NVIC_SetPriority+0x50>)
 8001828:	79fb      	ldrb	r3, [r7, #7]
 800182a:	f003 030f 	and.w	r3, r3, #15
 800182e:	3b04      	subs	r3, #4
 8001830:	0112      	lsls	r2, r2, #4
 8001832:	b2d2      	uxtb	r2, r2
 8001834:	440b      	add	r3, r1
 8001836:	761a      	strb	r2, [r3, #24]
}
 8001838:	bf00      	nop
 800183a:	370c      	adds	r7, #12
 800183c:	46bd      	mov	sp, r7
 800183e:	bc80      	pop	{r7}
 8001840:	4770      	bx	lr
 8001842:	bf00      	nop
 8001844:	e000e100 	.word	0xe000e100
 8001848:	e000ed00 	.word	0xe000ed00

0800184c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800184c:	b480      	push	{r7}
 800184e:	b089      	sub	sp, #36	@ 0x24
 8001850:	af00      	add	r7, sp, #0
 8001852:	60f8      	str	r0, [r7, #12]
 8001854:	60b9      	str	r1, [r7, #8]
 8001856:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	f003 0307 	and.w	r3, r3, #7
 800185e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001860:	69fb      	ldr	r3, [r7, #28]
 8001862:	f1c3 0307 	rsb	r3, r3, #7
 8001866:	2b04      	cmp	r3, #4
 8001868:	bf28      	it	cs
 800186a:	2304      	movcs	r3, #4
 800186c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800186e:	69fb      	ldr	r3, [r7, #28]
 8001870:	3304      	adds	r3, #4
 8001872:	2b06      	cmp	r3, #6
 8001874:	d902      	bls.n	800187c <NVIC_EncodePriority+0x30>
 8001876:	69fb      	ldr	r3, [r7, #28]
 8001878:	3b03      	subs	r3, #3
 800187a:	e000      	b.n	800187e <NVIC_EncodePriority+0x32>
 800187c:	2300      	movs	r3, #0
 800187e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001880:	f04f 32ff 	mov.w	r2, #4294967295
 8001884:	69bb      	ldr	r3, [r7, #24]
 8001886:	fa02 f303 	lsl.w	r3, r2, r3
 800188a:	43da      	mvns	r2, r3
 800188c:	68bb      	ldr	r3, [r7, #8]
 800188e:	401a      	ands	r2, r3
 8001890:	697b      	ldr	r3, [r7, #20]
 8001892:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001894:	f04f 31ff 	mov.w	r1, #4294967295
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	fa01 f303 	lsl.w	r3, r1, r3
 800189e:	43d9      	mvns	r1, r3
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018a4:	4313      	orrs	r3, r2
         );
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	3724      	adds	r7, #36	@ 0x24
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bc80      	pop	{r7}
 80018ae:	4770      	bx	lr

080018b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b082      	sub	sp, #8
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018b8:	6878      	ldr	r0, [r7, #4]
 80018ba:	f7ff ff4f 	bl	800175c <__NVIC_SetPriorityGrouping>
}
 80018be:	bf00      	nop
 80018c0:	3708      	adds	r7, #8
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}

080018c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018c6:	b580      	push	{r7, lr}
 80018c8:	b086      	sub	sp, #24
 80018ca:	af00      	add	r7, sp, #0
 80018cc:	4603      	mov	r3, r0
 80018ce:	60b9      	str	r1, [r7, #8]
 80018d0:	607a      	str	r2, [r7, #4]
 80018d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018d4:	2300      	movs	r3, #0
 80018d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018d8:	f7ff ff64 	bl	80017a4 <__NVIC_GetPriorityGrouping>
 80018dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018de:	687a      	ldr	r2, [r7, #4]
 80018e0:	68b9      	ldr	r1, [r7, #8]
 80018e2:	6978      	ldr	r0, [r7, #20]
 80018e4:	f7ff ffb2 	bl	800184c <NVIC_EncodePriority>
 80018e8:	4602      	mov	r2, r0
 80018ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018ee:	4611      	mov	r1, r2
 80018f0:	4618      	mov	r0, r3
 80018f2:	f7ff ff81 	bl	80017f8 <__NVIC_SetPriority>
}
 80018f6:	bf00      	nop
 80018f8:	3718      	adds	r7, #24
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}

080018fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018fe:	b580      	push	{r7, lr}
 8001900:	b082      	sub	sp, #8
 8001902:	af00      	add	r7, sp, #0
 8001904:	4603      	mov	r3, r0
 8001906:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001908:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800190c:	4618      	mov	r0, r3
 800190e:	f7ff ff57 	bl	80017c0 <__NVIC_EnableIRQ>
}
 8001912:	bf00      	nop
 8001914:	3708      	adds	r7, #8
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}
	...

0800191c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800191c:	b480      	push	{r7}
 800191e:	b08b      	sub	sp, #44	@ 0x2c
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
 8001924:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001926:	2300      	movs	r3, #0
 8001928:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800192a:	2300      	movs	r3, #0
 800192c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800192e:	e169      	b.n	8001c04 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001930:	2201      	movs	r2, #1
 8001932:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001934:	fa02 f303 	lsl.w	r3, r2, r3
 8001938:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	69fa      	ldr	r2, [r7, #28]
 8001940:	4013      	ands	r3, r2
 8001942:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001944:	69ba      	ldr	r2, [r7, #24]
 8001946:	69fb      	ldr	r3, [r7, #28]
 8001948:	429a      	cmp	r2, r3
 800194a:	f040 8158 	bne.w	8001bfe <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	4a9a      	ldr	r2, [pc, #616]	@ (8001bbc <HAL_GPIO_Init+0x2a0>)
 8001954:	4293      	cmp	r3, r2
 8001956:	d05e      	beq.n	8001a16 <HAL_GPIO_Init+0xfa>
 8001958:	4a98      	ldr	r2, [pc, #608]	@ (8001bbc <HAL_GPIO_Init+0x2a0>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d875      	bhi.n	8001a4a <HAL_GPIO_Init+0x12e>
 800195e:	4a98      	ldr	r2, [pc, #608]	@ (8001bc0 <HAL_GPIO_Init+0x2a4>)
 8001960:	4293      	cmp	r3, r2
 8001962:	d058      	beq.n	8001a16 <HAL_GPIO_Init+0xfa>
 8001964:	4a96      	ldr	r2, [pc, #600]	@ (8001bc0 <HAL_GPIO_Init+0x2a4>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d86f      	bhi.n	8001a4a <HAL_GPIO_Init+0x12e>
 800196a:	4a96      	ldr	r2, [pc, #600]	@ (8001bc4 <HAL_GPIO_Init+0x2a8>)
 800196c:	4293      	cmp	r3, r2
 800196e:	d052      	beq.n	8001a16 <HAL_GPIO_Init+0xfa>
 8001970:	4a94      	ldr	r2, [pc, #592]	@ (8001bc4 <HAL_GPIO_Init+0x2a8>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d869      	bhi.n	8001a4a <HAL_GPIO_Init+0x12e>
 8001976:	4a94      	ldr	r2, [pc, #592]	@ (8001bc8 <HAL_GPIO_Init+0x2ac>)
 8001978:	4293      	cmp	r3, r2
 800197a:	d04c      	beq.n	8001a16 <HAL_GPIO_Init+0xfa>
 800197c:	4a92      	ldr	r2, [pc, #584]	@ (8001bc8 <HAL_GPIO_Init+0x2ac>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d863      	bhi.n	8001a4a <HAL_GPIO_Init+0x12e>
 8001982:	4a92      	ldr	r2, [pc, #584]	@ (8001bcc <HAL_GPIO_Init+0x2b0>)
 8001984:	4293      	cmp	r3, r2
 8001986:	d046      	beq.n	8001a16 <HAL_GPIO_Init+0xfa>
 8001988:	4a90      	ldr	r2, [pc, #576]	@ (8001bcc <HAL_GPIO_Init+0x2b0>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d85d      	bhi.n	8001a4a <HAL_GPIO_Init+0x12e>
 800198e:	2b12      	cmp	r3, #18
 8001990:	d82a      	bhi.n	80019e8 <HAL_GPIO_Init+0xcc>
 8001992:	2b12      	cmp	r3, #18
 8001994:	d859      	bhi.n	8001a4a <HAL_GPIO_Init+0x12e>
 8001996:	a201      	add	r2, pc, #4	@ (adr r2, 800199c <HAL_GPIO_Init+0x80>)
 8001998:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800199c:	08001a17 	.word	0x08001a17
 80019a0:	080019f1 	.word	0x080019f1
 80019a4:	08001a03 	.word	0x08001a03
 80019a8:	08001a45 	.word	0x08001a45
 80019ac:	08001a4b 	.word	0x08001a4b
 80019b0:	08001a4b 	.word	0x08001a4b
 80019b4:	08001a4b 	.word	0x08001a4b
 80019b8:	08001a4b 	.word	0x08001a4b
 80019bc:	08001a4b 	.word	0x08001a4b
 80019c0:	08001a4b 	.word	0x08001a4b
 80019c4:	08001a4b 	.word	0x08001a4b
 80019c8:	08001a4b 	.word	0x08001a4b
 80019cc:	08001a4b 	.word	0x08001a4b
 80019d0:	08001a4b 	.word	0x08001a4b
 80019d4:	08001a4b 	.word	0x08001a4b
 80019d8:	08001a4b 	.word	0x08001a4b
 80019dc:	08001a4b 	.word	0x08001a4b
 80019e0:	080019f9 	.word	0x080019f9
 80019e4:	08001a0d 	.word	0x08001a0d
 80019e8:	4a79      	ldr	r2, [pc, #484]	@ (8001bd0 <HAL_GPIO_Init+0x2b4>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d013      	beq.n	8001a16 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80019ee:	e02c      	b.n	8001a4a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	68db      	ldr	r3, [r3, #12]
 80019f4:	623b      	str	r3, [r7, #32]
          break;
 80019f6:	e029      	b.n	8001a4c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	68db      	ldr	r3, [r3, #12]
 80019fc:	3304      	adds	r3, #4
 80019fe:	623b      	str	r3, [r7, #32]
          break;
 8001a00:	e024      	b.n	8001a4c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	68db      	ldr	r3, [r3, #12]
 8001a06:	3308      	adds	r3, #8
 8001a08:	623b      	str	r3, [r7, #32]
          break;
 8001a0a:	e01f      	b.n	8001a4c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	68db      	ldr	r3, [r3, #12]
 8001a10:	330c      	adds	r3, #12
 8001a12:	623b      	str	r3, [r7, #32]
          break;
 8001a14:	e01a      	b.n	8001a4c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	689b      	ldr	r3, [r3, #8]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d102      	bne.n	8001a24 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001a1e:	2304      	movs	r3, #4
 8001a20:	623b      	str	r3, [r7, #32]
          break;
 8001a22:	e013      	b.n	8001a4c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	689b      	ldr	r3, [r3, #8]
 8001a28:	2b01      	cmp	r3, #1
 8001a2a:	d105      	bne.n	8001a38 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a2c:	2308      	movs	r3, #8
 8001a2e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	69fa      	ldr	r2, [r7, #28]
 8001a34:	611a      	str	r2, [r3, #16]
          break;
 8001a36:	e009      	b.n	8001a4c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a38:	2308      	movs	r3, #8
 8001a3a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	69fa      	ldr	r2, [r7, #28]
 8001a40:	615a      	str	r2, [r3, #20]
          break;
 8001a42:	e003      	b.n	8001a4c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001a44:	2300      	movs	r3, #0
 8001a46:	623b      	str	r3, [r7, #32]
          break;
 8001a48:	e000      	b.n	8001a4c <HAL_GPIO_Init+0x130>
          break;
 8001a4a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001a4c:	69bb      	ldr	r3, [r7, #24]
 8001a4e:	2bff      	cmp	r3, #255	@ 0xff
 8001a50:	d801      	bhi.n	8001a56 <HAL_GPIO_Init+0x13a>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	e001      	b.n	8001a5a <HAL_GPIO_Init+0x13e>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	3304      	adds	r3, #4
 8001a5a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001a5c:	69bb      	ldr	r3, [r7, #24]
 8001a5e:	2bff      	cmp	r3, #255	@ 0xff
 8001a60:	d802      	bhi.n	8001a68 <HAL_GPIO_Init+0x14c>
 8001a62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a64:	009b      	lsls	r3, r3, #2
 8001a66:	e002      	b.n	8001a6e <HAL_GPIO_Init+0x152>
 8001a68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a6a:	3b08      	subs	r3, #8
 8001a6c:	009b      	lsls	r3, r3, #2
 8001a6e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001a70:	697b      	ldr	r3, [r7, #20]
 8001a72:	681a      	ldr	r2, [r3, #0]
 8001a74:	210f      	movs	r1, #15
 8001a76:	693b      	ldr	r3, [r7, #16]
 8001a78:	fa01 f303 	lsl.w	r3, r1, r3
 8001a7c:	43db      	mvns	r3, r3
 8001a7e:	401a      	ands	r2, r3
 8001a80:	6a39      	ldr	r1, [r7, #32]
 8001a82:	693b      	ldr	r3, [r7, #16]
 8001a84:	fa01 f303 	lsl.w	r3, r1, r3
 8001a88:	431a      	orrs	r2, r3
 8001a8a:	697b      	ldr	r3, [r7, #20]
 8001a8c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	f000 80b1 	beq.w	8001bfe <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001a9c:	4b4d      	ldr	r3, [pc, #308]	@ (8001bd4 <HAL_GPIO_Init+0x2b8>)
 8001a9e:	699b      	ldr	r3, [r3, #24]
 8001aa0:	4a4c      	ldr	r2, [pc, #304]	@ (8001bd4 <HAL_GPIO_Init+0x2b8>)
 8001aa2:	f043 0301 	orr.w	r3, r3, #1
 8001aa6:	6193      	str	r3, [r2, #24]
 8001aa8:	4b4a      	ldr	r3, [pc, #296]	@ (8001bd4 <HAL_GPIO_Init+0x2b8>)
 8001aaa:	699b      	ldr	r3, [r3, #24]
 8001aac:	f003 0301 	and.w	r3, r3, #1
 8001ab0:	60bb      	str	r3, [r7, #8]
 8001ab2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001ab4:	4a48      	ldr	r2, [pc, #288]	@ (8001bd8 <HAL_GPIO_Init+0x2bc>)
 8001ab6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ab8:	089b      	lsrs	r3, r3, #2
 8001aba:	3302      	adds	r3, #2
 8001abc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ac0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001ac2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ac4:	f003 0303 	and.w	r3, r3, #3
 8001ac8:	009b      	lsls	r3, r3, #2
 8001aca:	220f      	movs	r2, #15
 8001acc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad0:	43db      	mvns	r3, r3
 8001ad2:	68fa      	ldr	r2, [r7, #12]
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	4a40      	ldr	r2, [pc, #256]	@ (8001bdc <HAL_GPIO_Init+0x2c0>)
 8001adc:	4293      	cmp	r3, r2
 8001ade:	d013      	beq.n	8001b08 <HAL_GPIO_Init+0x1ec>
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	4a3f      	ldr	r2, [pc, #252]	@ (8001be0 <HAL_GPIO_Init+0x2c4>)
 8001ae4:	4293      	cmp	r3, r2
 8001ae6:	d00d      	beq.n	8001b04 <HAL_GPIO_Init+0x1e8>
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	4a3e      	ldr	r2, [pc, #248]	@ (8001be4 <HAL_GPIO_Init+0x2c8>)
 8001aec:	4293      	cmp	r3, r2
 8001aee:	d007      	beq.n	8001b00 <HAL_GPIO_Init+0x1e4>
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	4a3d      	ldr	r2, [pc, #244]	@ (8001be8 <HAL_GPIO_Init+0x2cc>)
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d101      	bne.n	8001afc <HAL_GPIO_Init+0x1e0>
 8001af8:	2303      	movs	r3, #3
 8001afa:	e006      	b.n	8001b0a <HAL_GPIO_Init+0x1ee>
 8001afc:	2304      	movs	r3, #4
 8001afe:	e004      	b.n	8001b0a <HAL_GPIO_Init+0x1ee>
 8001b00:	2302      	movs	r3, #2
 8001b02:	e002      	b.n	8001b0a <HAL_GPIO_Init+0x1ee>
 8001b04:	2301      	movs	r3, #1
 8001b06:	e000      	b.n	8001b0a <HAL_GPIO_Init+0x1ee>
 8001b08:	2300      	movs	r3, #0
 8001b0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b0c:	f002 0203 	and.w	r2, r2, #3
 8001b10:	0092      	lsls	r2, r2, #2
 8001b12:	4093      	lsls	r3, r2
 8001b14:	68fa      	ldr	r2, [r7, #12]
 8001b16:	4313      	orrs	r3, r2
 8001b18:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001b1a:	492f      	ldr	r1, [pc, #188]	@ (8001bd8 <HAL_GPIO_Init+0x2bc>)
 8001b1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b1e:	089b      	lsrs	r3, r3, #2
 8001b20:	3302      	adds	r3, #2
 8001b22:	68fa      	ldr	r2, [r7, #12]
 8001b24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d006      	beq.n	8001b42 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001b34:	4b2d      	ldr	r3, [pc, #180]	@ (8001bec <HAL_GPIO_Init+0x2d0>)
 8001b36:	689a      	ldr	r2, [r3, #8]
 8001b38:	492c      	ldr	r1, [pc, #176]	@ (8001bec <HAL_GPIO_Init+0x2d0>)
 8001b3a:	69bb      	ldr	r3, [r7, #24]
 8001b3c:	4313      	orrs	r3, r2
 8001b3e:	608b      	str	r3, [r1, #8]
 8001b40:	e006      	b.n	8001b50 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001b42:	4b2a      	ldr	r3, [pc, #168]	@ (8001bec <HAL_GPIO_Init+0x2d0>)
 8001b44:	689a      	ldr	r2, [r3, #8]
 8001b46:	69bb      	ldr	r3, [r7, #24]
 8001b48:	43db      	mvns	r3, r3
 8001b4a:	4928      	ldr	r1, [pc, #160]	@ (8001bec <HAL_GPIO_Init+0x2d0>)
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d006      	beq.n	8001b6a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001b5c:	4b23      	ldr	r3, [pc, #140]	@ (8001bec <HAL_GPIO_Init+0x2d0>)
 8001b5e:	68da      	ldr	r2, [r3, #12]
 8001b60:	4922      	ldr	r1, [pc, #136]	@ (8001bec <HAL_GPIO_Init+0x2d0>)
 8001b62:	69bb      	ldr	r3, [r7, #24]
 8001b64:	4313      	orrs	r3, r2
 8001b66:	60cb      	str	r3, [r1, #12]
 8001b68:	e006      	b.n	8001b78 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001b6a:	4b20      	ldr	r3, [pc, #128]	@ (8001bec <HAL_GPIO_Init+0x2d0>)
 8001b6c:	68da      	ldr	r2, [r3, #12]
 8001b6e:	69bb      	ldr	r3, [r7, #24]
 8001b70:	43db      	mvns	r3, r3
 8001b72:	491e      	ldr	r1, [pc, #120]	@ (8001bec <HAL_GPIO_Init+0x2d0>)
 8001b74:	4013      	ands	r3, r2
 8001b76:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d006      	beq.n	8001b92 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001b84:	4b19      	ldr	r3, [pc, #100]	@ (8001bec <HAL_GPIO_Init+0x2d0>)
 8001b86:	685a      	ldr	r2, [r3, #4]
 8001b88:	4918      	ldr	r1, [pc, #96]	@ (8001bec <HAL_GPIO_Init+0x2d0>)
 8001b8a:	69bb      	ldr	r3, [r7, #24]
 8001b8c:	4313      	orrs	r3, r2
 8001b8e:	604b      	str	r3, [r1, #4]
 8001b90:	e006      	b.n	8001ba0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001b92:	4b16      	ldr	r3, [pc, #88]	@ (8001bec <HAL_GPIO_Init+0x2d0>)
 8001b94:	685a      	ldr	r2, [r3, #4]
 8001b96:	69bb      	ldr	r3, [r7, #24]
 8001b98:	43db      	mvns	r3, r3
 8001b9a:	4914      	ldr	r1, [pc, #80]	@ (8001bec <HAL_GPIO_Init+0x2d0>)
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d021      	beq.n	8001bf0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001bac:	4b0f      	ldr	r3, [pc, #60]	@ (8001bec <HAL_GPIO_Init+0x2d0>)
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	490e      	ldr	r1, [pc, #56]	@ (8001bec <HAL_GPIO_Init+0x2d0>)
 8001bb2:	69bb      	ldr	r3, [r7, #24]
 8001bb4:	4313      	orrs	r3, r2
 8001bb6:	600b      	str	r3, [r1, #0]
 8001bb8:	e021      	b.n	8001bfe <HAL_GPIO_Init+0x2e2>
 8001bba:	bf00      	nop
 8001bbc:	10320000 	.word	0x10320000
 8001bc0:	10310000 	.word	0x10310000
 8001bc4:	10220000 	.word	0x10220000
 8001bc8:	10210000 	.word	0x10210000
 8001bcc:	10120000 	.word	0x10120000
 8001bd0:	10110000 	.word	0x10110000
 8001bd4:	40021000 	.word	0x40021000
 8001bd8:	40010000 	.word	0x40010000
 8001bdc:	40010800 	.word	0x40010800
 8001be0:	40010c00 	.word	0x40010c00
 8001be4:	40011000 	.word	0x40011000
 8001be8:	40011400 	.word	0x40011400
 8001bec:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001bf0:	4b0b      	ldr	r3, [pc, #44]	@ (8001c20 <HAL_GPIO_Init+0x304>)
 8001bf2:	681a      	ldr	r2, [r3, #0]
 8001bf4:	69bb      	ldr	r3, [r7, #24]
 8001bf6:	43db      	mvns	r3, r3
 8001bf8:	4909      	ldr	r1, [pc, #36]	@ (8001c20 <HAL_GPIO_Init+0x304>)
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001bfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c00:	3301      	adds	r3, #1
 8001c02:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	681a      	ldr	r2, [r3, #0]
 8001c08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c0a:	fa22 f303 	lsr.w	r3, r2, r3
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	f47f ae8e 	bne.w	8001930 <HAL_GPIO_Init+0x14>
  }
}
 8001c14:	bf00      	nop
 8001c16:	bf00      	nop
 8001c18:	372c      	adds	r7, #44	@ 0x2c
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bc80      	pop	{r7}
 8001c1e:	4770      	bx	lr
 8001c20:	40010400 	.word	0x40010400

08001c24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b083      	sub	sp, #12
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
 8001c2c:	460b      	mov	r3, r1
 8001c2e:	807b      	strh	r3, [r7, #2]
 8001c30:	4613      	mov	r3, r2
 8001c32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c34:	787b      	ldrb	r3, [r7, #1]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d003      	beq.n	8001c42 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c3a:	887a      	ldrh	r2, [r7, #2]
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001c40:	e003      	b.n	8001c4a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001c42:	887b      	ldrh	r3, [r7, #2]
 8001c44:	041a      	lsls	r2, r3, #16
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	611a      	str	r2, [r3, #16]
}
 8001c4a:	bf00      	nop
 8001c4c:	370c      	adds	r7, #12
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bc80      	pop	{r7}
 8001c52:	4770      	bx	lr

08001c54 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b085      	sub	sp, #20
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
 8001c5c:	460b      	mov	r3, r1
 8001c5e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	68db      	ldr	r3, [r3, #12]
 8001c64:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001c66:	887a      	ldrh	r2, [r7, #2]
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	4013      	ands	r3, r2
 8001c6c:	041a      	lsls	r2, r3, #16
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	43d9      	mvns	r1, r3
 8001c72:	887b      	ldrh	r3, [r7, #2]
 8001c74:	400b      	ands	r3, r1
 8001c76:	431a      	orrs	r2, r3
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	611a      	str	r2, [r3, #16]
}
 8001c7c:	bf00      	nop
 8001c7e:	3714      	adds	r7, #20
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bc80      	pop	{r7}
 8001c84:	4770      	bx	lr
	...

08001c88 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b084      	sub	sp, #16
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d101      	bne.n	8001c9a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001c96:	2301      	movs	r3, #1
 8001c98:	e12b      	b.n	8001ef2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001ca0:	b2db      	uxtb	r3, r3
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d106      	bne.n	8001cb4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2200      	movs	r2, #0
 8001caa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001cae:	6878      	ldr	r0, [r7, #4]
 8001cb0:	f7ff f888 	bl	8000dc4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2224      	movs	r2, #36	@ 0x24
 8001cb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	681a      	ldr	r2, [r3, #0]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f022 0201 	bic.w	r2, r2, #1
 8001cca:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	681a      	ldr	r2, [r3, #0]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001cda:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	681a      	ldr	r2, [r3, #0]
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001cea:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001cec:	f001 f842 	bl	8002d74 <HAL_RCC_GetPCLK1Freq>
 8001cf0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	4a81      	ldr	r2, [pc, #516]	@ (8001efc <HAL_I2C_Init+0x274>)
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	d807      	bhi.n	8001d0c <HAL_I2C_Init+0x84>
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	4a80      	ldr	r2, [pc, #512]	@ (8001f00 <HAL_I2C_Init+0x278>)
 8001d00:	4293      	cmp	r3, r2
 8001d02:	bf94      	ite	ls
 8001d04:	2301      	movls	r3, #1
 8001d06:	2300      	movhi	r3, #0
 8001d08:	b2db      	uxtb	r3, r3
 8001d0a:	e006      	b.n	8001d1a <HAL_I2C_Init+0x92>
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	4a7d      	ldr	r2, [pc, #500]	@ (8001f04 <HAL_I2C_Init+0x27c>)
 8001d10:	4293      	cmp	r3, r2
 8001d12:	bf94      	ite	ls
 8001d14:	2301      	movls	r3, #1
 8001d16:	2300      	movhi	r3, #0
 8001d18:	b2db      	uxtb	r3, r3
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d001      	beq.n	8001d22 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	e0e7      	b.n	8001ef2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	4a78      	ldr	r2, [pc, #480]	@ (8001f08 <HAL_I2C_Init+0x280>)
 8001d26:	fba2 2303 	umull	r2, r3, r2, r3
 8001d2a:	0c9b      	lsrs	r3, r3, #18
 8001d2c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	68ba      	ldr	r2, [r7, #8]
 8001d3e:	430a      	orrs	r2, r1
 8001d40:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	6a1b      	ldr	r3, [r3, #32]
 8001d48:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	4a6a      	ldr	r2, [pc, #424]	@ (8001efc <HAL_I2C_Init+0x274>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d802      	bhi.n	8001d5c <HAL_I2C_Init+0xd4>
 8001d56:	68bb      	ldr	r3, [r7, #8]
 8001d58:	3301      	adds	r3, #1
 8001d5a:	e009      	b.n	8001d70 <HAL_I2C_Init+0xe8>
 8001d5c:	68bb      	ldr	r3, [r7, #8]
 8001d5e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001d62:	fb02 f303 	mul.w	r3, r2, r3
 8001d66:	4a69      	ldr	r2, [pc, #420]	@ (8001f0c <HAL_I2C_Init+0x284>)
 8001d68:	fba2 2303 	umull	r2, r3, r2, r3
 8001d6c:	099b      	lsrs	r3, r3, #6
 8001d6e:	3301      	adds	r3, #1
 8001d70:	687a      	ldr	r2, [r7, #4]
 8001d72:	6812      	ldr	r2, [r2, #0]
 8001d74:	430b      	orrs	r3, r1
 8001d76:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	69db      	ldr	r3, [r3, #28]
 8001d7e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001d82:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	495c      	ldr	r1, [pc, #368]	@ (8001efc <HAL_I2C_Init+0x274>)
 8001d8c:	428b      	cmp	r3, r1
 8001d8e:	d819      	bhi.n	8001dc4 <HAL_I2C_Init+0x13c>
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	1e59      	subs	r1, r3, #1
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	005b      	lsls	r3, r3, #1
 8001d9a:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d9e:	1c59      	adds	r1, r3, #1
 8001da0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001da4:	400b      	ands	r3, r1
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d00a      	beq.n	8001dc0 <HAL_I2C_Init+0x138>
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	1e59      	subs	r1, r3, #1
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	005b      	lsls	r3, r3, #1
 8001db4:	fbb1 f3f3 	udiv	r3, r1, r3
 8001db8:	3301      	adds	r3, #1
 8001dba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001dbe:	e051      	b.n	8001e64 <HAL_I2C_Init+0x1dc>
 8001dc0:	2304      	movs	r3, #4
 8001dc2:	e04f      	b.n	8001e64 <HAL_I2C_Init+0x1dc>
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	689b      	ldr	r3, [r3, #8]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d111      	bne.n	8001df0 <HAL_I2C_Init+0x168>
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	1e58      	subs	r0, r3, #1
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6859      	ldr	r1, [r3, #4]
 8001dd4:	460b      	mov	r3, r1
 8001dd6:	005b      	lsls	r3, r3, #1
 8001dd8:	440b      	add	r3, r1
 8001dda:	fbb0 f3f3 	udiv	r3, r0, r3
 8001dde:	3301      	adds	r3, #1
 8001de0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	bf0c      	ite	eq
 8001de8:	2301      	moveq	r3, #1
 8001dea:	2300      	movne	r3, #0
 8001dec:	b2db      	uxtb	r3, r3
 8001dee:	e012      	b.n	8001e16 <HAL_I2C_Init+0x18e>
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	1e58      	subs	r0, r3, #1
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6859      	ldr	r1, [r3, #4]
 8001df8:	460b      	mov	r3, r1
 8001dfa:	009b      	lsls	r3, r3, #2
 8001dfc:	440b      	add	r3, r1
 8001dfe:	0099      	lsls	r1, r3, #2
 8001e00:	440b      	add	r3, r1
 8001e02:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e06:	3301      	adds	r3, #1
 8001e08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	bf0c      	ite	eq
 8001e10:	2301      	moveq	r3, #1
 8001e12:	2300      	movne	r3, #0
 8001e14:	b2db      	uxtb	r3, r3
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d001      	beq.n	8001e1e <HAL_I2C_Init+0x196>
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e022      	b.n	8001e64 <HAL_I2C_Init+0x1dc>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	689b      	ldr	r3, [r3, #8]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d10e      	bne.n	8001e44 <HAL_I2C_Init+0x1bc>
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	1e58      	subs	r0, r3, #1
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6859      	ldr	r1, [r3, #4]
 8001e2e:	460b      	mov	r3, r1
 8001e30:	005b      	lsls	r3, r3, #1
 8001e32:	440b      	add	r3, r1
 8001e34:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e38:	3301      	adds	r3, #1
 8001e3a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e3e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001e42:	e00f      	b.n	8001e64 <HAL_I2C_Init+0x1dc>
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	1e58      	subs	r0, r3, #1
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6859      	ldr	r1, [r3, #4]
 8001e4c:	460b      	mov	r3, r1
 8001e4e:	009b      	lsls	r3, r3, #2
 8001e50:	440b      	add	r3, r1
 8001e52:	0099      	lsls	r1, r3, #2
 8001e54:	440b      	add	r3, r1
 8001e56:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e5a:	3301      	adds	r3, #1
 8001e5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e60:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001e64:	6879      	ldr	r1, [r7, #4]
 8001e66:	6809      	ldr	r1, [r1, #0]
 8001e68:	4313      	orrs	r3, r2
 8001e6a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	69da      	ldr	r2, [r3, #28]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6a1b      	ldr	r3, [r3, #32]
 8001e7e:	431a      	orrs	r2, r3
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	430a      	orrs	r2, r1
 8001e86:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	689b      	ldr	r3, [r3, #8]
 8001e8e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001e92:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001e96:	687a      	ldr	r2, [r7, #4]
 8001e98:	6911      	ldr	r1, [r2, #16]
 8001e9a:	687a      	ldr	r2, [r7, #4]
 8001e9c:	68d2      	ldr	r2, [r2, #12]
 8001e9e:	4311      	orrs	r1, r2
 8001ea0:	687a      	ldr	r2, [r7, #4]
 8001ea2:	6812      	ldr	r2, [r2, #0]
 8001ea4:	430b      	orrs	r3, r1
 8001ea6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	68db      	ldr	r3, [r3, #12]
 8001eae:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	695a      	ldr	r2, [r3, #20]
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	699b      	ldr	r3, [r3, #24]
 8001eba:	431a      	orrs	r2, r3
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	430a      	orrs	r2, r1
 8001ec2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	681a      	ldr	r2, [r3, #0]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f042 0201 	orr.w	r2, r2, #1
 8001ed2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2220      	movs	r2, #32
 8001ede:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2200      	movs	r2, #0
 8001eec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001ef0:	2300      	movs	r3, #0
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	3710      	adds	r7, #16
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	000186a0 	.word	0x000186a0
 8001f00:	001e847f 	.word	0x001e847f
 8001f04:	003d08ff 	.word	0x003d08ff
 8001f08:	431bde83 	.word	0x431bde83
 8001f0c:	10624dd3 	.word	0x10624dd3

08001f10 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b088      	sub	sp, #32
 8001f14:	af02      	add	r7, sp, #8
 8001f16:	60f8      	str	r0, [r7, #12]
 8001f18:	4608      	mov	r0, r1
 8001f1a:	4611      	mov	r1, r2
 8001f1c:	461a      	mov	r2, r3
 8001f1e:	4603      	mov	r3, r0
 8001f20:	817b      	strh	r3, [r7, #10]
 8001f22:	460b      	mov	r3, r1
 8001f24:	813b      	strh	r3, [r7, #8]
 8001f26:	4613      	mov	r3, r2
 8001f28:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001f2a:	f7ff fc0d 	bl	8001748 <HAL_GetTick>
 8001f2e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001f36:	b2db      	uxtb	r3, r3
 8001f38:	2b20      	cmp	r3, #32
 8001f3a:	f040 80d9 	bne.w	80020f0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001f3e:	697b      	ldr	r3, [r7, #20]
 8001f40:	9300      	str	r3, [sp, #0]
 8001f42:	2319      	movs	r3, #25
 8001f44:	2201      	movs	r2, #1
 8001f46:	496d      	ldr	r1, [pc, #436]	@ (80020fc <HAL_I2C_Mem_Write+0x1ec>)
 8001f48:	68f8      	ldr	r0, [r7, #12]
 8001f4a:	f000 f971 	bl	8002230 <I2C_WaitOnFlagUntilTimeout>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d001      	beq.n	8001f58 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001f54:	2302      	movs	r3, #2
 8001f56:	e0cc      	b.n	80020f2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001f5e:	2b01      	cmp	r3, #1
 8001f60:	d101      	bne.n	8001f66 <HAL_I2C_Mem_Write+0x56>
 8001f62:	2302      	movs	r3, #2
 8001f64:	e0c5      	b.n	80020f2 <HAL_I2C_Mem_Write+0x1e2>
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	2201      	movs	r2, #1
 8001f6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f003 0301 	and.w	r3, r3, #1
 8001f78:	2b01      	cmp	r3, #1
 8001f7a:	d007      	beq.n	8001f8c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	681a      	ldr	r2, [r3, #0]
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f042 0201 	orr.w	r2, r2, #1
 8001f8a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	681a      	ldr	r2, [r3, #0]
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001f9a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	2221      	movs	r2, #33	@ 0x21
 8001fa0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	2240      	movs	r2, #64	@ 0x40
 8001fa8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	2200      	movs	r2, #0
 8001fb0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	6a3a      	ldr	r2, [r7, #32]
 8001fb6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001fbc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001fc2:	b29a      	uxth	r2, r3
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	4a4d      	ldr	r2, [pc, #308]	@ (8002100 <HAL_I2C_Mem_Write+0x1f0>)
 8001fcc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001fce:	88f8      	ldrh	r0, [r7, #6]
 8001fd0:	893a      	ldrh	r2, [r7, #8]
 8001fd2:	8979      	ldrh	r1, [r7, #10]
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	9301      	str	r3, [sp, #4]
 8001fd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001fda:	9300      	str	r3, [sp, #0]
 8001fdc:	4603      	mov	r3, r0
 8001fde:	68f8      	ldr	r0, [r7, #12]
 8001fe0:	f000 f890 	bl	8002104 <I2C_RequestMemoryWrite>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d052      	beq.n	8002090 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001fea:	2301      	movs	r3, #1
 8001fec:	e081      	b.n	80020f2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001fee:	697a      	ldr	r2, [r7, #20]
 8001ff0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001ff2:	68f8      	ldr	r0, [r7, #12]
 8001ff4:	f000 fa36 	bl	8002464 <I2C_WaitOnTXEFlagUntilTimeout>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d00d      	beq.n	800201a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002002:	2b04      	cmp	r3, #4
 8002004:	d107      	bne.n	8002016 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	681a      	ldr	r2, [r3, #0]
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002014:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002016:	2301      	movs	r3, #1
 8002018:	e06b      	b.n	80020f2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800201e:	781a      	ldrb	r2, [r3, #0]
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800202a:	1c5a      	adds	r2, r3, #1
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002034:	3b01      	subs	r3, #1
 8002036:	b29a      	uxth	r2, r3
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002040:	b29b      	uxth	r3, r3
 8002042:	3b01      	subs	r3, #1
 8002044:	b29a      	uxth	r2, r3
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	695b      	ldr	r3, [r3, #20]
 8002050:	f003 0304 	and.w	r3, r3, #4
 8002054:	2b04      	cmp	r3, #4
 8002056:	d11b      	bne.n	8002090 <HAL_I2C_Mem_Write+0x180>
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800205c:	2b00      	cmp	r3, #0
 800205e:	d017      	beq.n	8002090 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002064:	781a      	ldrb	r2, [r3, #0]
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002070:	1c5a      	adds	r2, r3, #1
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800207a:	3b01      	subs	r3, #1
 800207c:	b29a      	uxth	r2, r3
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002086:	b29b      	uxth	r3, r3
 8002088:	3b01      	subs	r3, #1
 800208a:	b29a      	uxth	r2, r3
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002094:	2b00      	cmp	r3, #0
 8002096:	d1aa      	bne.n	8001fee <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002098:	697a      	ldr	r2, [r7, #20]
 800209a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800209c:	68f8      	ldr	r0, [r7, #12]
 800209e:	f000 fa29 	bl	80024f4 <I2C_WaitOnBTFFlagUntilTimeout>
 80020a2:	4603      	mov	r3, r0
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d00d      	beq.n	80020c4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020ac:	2b04      	cmp	r3, #4
 80020ae:	d107      	bne.n	80020c0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	681a      	ldr	r2, [r3, #0]
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80020be:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80020c0:	2301      	movs	r3, #1
 80020c2:	e016      	b.n	80020f2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	681a      	ldr	r2, [r3, #0]
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80020d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	2220      	movs	r2, #32
 80020d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	2200      	movs	r2, #0
 80020e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	2200      	movs	r2, #0
 80020e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80020ec:	2300      	movs	r3, #0
 80020ee:	e000      	b.n	80020f2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80020f0:	2302      	movs	r3, #2
  }
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	3718      	adds	r7, #24
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	bf00      	nop
 80020fc:	00100002 	.word	0x00100002
 8002100:	ffff0000 	.word	0xffff0000

08002104 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b088      	sub	sp, #32
 8002108:	af02      	add	r7, sp, #8
 800210a:	60f8      	str	r0, [r7, #12]
 800210c:	4608      	mov	r0, r1
 800210e:	4611      	mov	r1, r2
 8002110:	461a      	mov	r2, r3
 8002112:	4603      	mov	r3, r0
 8002114:	817b      	strh	r3, [r7, #10]
 8002116:	460b      	mov	r3, r1
 8002118:	813b      	strh	r3, [r7, #8]
 800211a:	4613      	mov	r3, r2
 800211c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	681a      	ldr	r2, [r3, #0]
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800212c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800212e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002130:	9300      	str	r3, [sp, #0]
 8002132:	6a3b      	ldr	r3, [r7, #32]
 8002134:	2200      	movs	r2, #0
 8002136:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800213a:	68f8      	ldr	r0, [r7, #12]
 800213c:	f000 f878 	bl	8002230 <I2C_WaitOnFlagUntilTimeout>
 8002140:	4603      	mov	r3, r0
 8002142:	2b00      	cmp	r3, #0
 8002144:	d00d      	beq.n	8002162 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002150:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002154:	d103      	bne.n	800215e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800215c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800215e:	2303      	movs	r3, #3
 8002160:	e05f      	b.n	8002222 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002162:	897b      	ldrh	r3, [r7, #10]
 8002164:	b2db      	uxtb	r3, r3
 8002166:	461a      	mov	r2, r3
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002170:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002172:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002174:	6a3a      	ldr	r2, [r7, #32]
 8002176:	492d      	ldr	r1, [pc, #180]	@ (800222c <I2C_RequestMemoryWrite+0x128>)
 8002178:	68f8      	ldr	r0, [r7, #12]
 800217a:	f000 f8d3 	bl	8002324 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800217e:	4603      	mov	r3, r0
 8002180:	2b00      	cmp	r3, #0
 8002182:	d001      	beq.n	8002188 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002184:	2301      	movs	r3, #1
 8002186:	e04c      	b.n	8002222 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002188:	2300      	movs	r3, #0
 800218a:	617b      	str	r3, [r7, #20]
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	695b      	ldr	r3, [r3, #20]
 8002192:	617b      	str	r3, [r7, #20]
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	699b      	ldr	r3, [r3, #24]
 800219a:	617b      	str	r3, [r7, #20]
 800219c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800219e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80021a0:	6a39      	ldr	r1, [r7, #32]
 80021a2:	68f8      	ldr	r0, [r7, #12]
 80021a4:	f000 f95e 	bl	8002464 <I2C_WaitOnTXEFlagUntilTimeout>
 80021a8:	4603      	mov	r3, r0
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d00d      	beq.n	80021ca <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021b2:	2b04      	cmp	r3, #4
 80021b4:	d107      	bne.n	80021c6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	681a      	ldr	r2, [r3, #0]
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80021c4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80021c6:	2301      	movs	r3, #1
 80021c8:	e02b      	b.n	8002222 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80021ca:	88fb      	ldrh	r3, [r7, #6]
 80021cc:	2b01      	cmp	r3, #1
 80021ce:	d105      	bne.n	80021dc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80021d0:	893b      	ldrh	r3, [r7, #8]
 80021d2:	b2da      	uxtb	r2, r3
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	611a      	str	r2, [r3, #16]
 80021da:	e021      	b.n	8002220 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80021dc:	893b      	ldrh	r3, [r7, #8]
 80021de:	0a1b      	lsrs	r3, r3, #8
 80021e0:	b29b      	uxth	r3, r3
 80021e2:	b2da      	uxtb	r2, r3
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80021ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80021ec:	6a39      	ldr	r1, [r7, #32]
 80021ee:	68f8      	ldr	r0, [r7, #12]
 80021f0:	f000 f938 	bl	8002464 <I2C_WaitOnTXEFlagUntilTimeout>
 80021f4:	4603      	mov	r3, r0
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d00d      	beq.n	8002216 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021fe:	2b04      	cmp	r3, #4
 8002200:	d107      	bne.n	8002212 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	681a      	ldr	r2, [r3, #0]
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002210:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002212:	2301      	movs	r3, #1
 8002214:	e005      	b.n	8002222 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002216:	893b      	ldrh	r3, [r7, #8]
 8002218:	b2da      	uxtb	r2, r3
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002220:	2300      	movs	r3, #0
}
 8002222:	4618      	mov	r0, r3
 8002224:	3718      	adds	r7, #24
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}
 800222a:	bf00      	nop
 800222c:	00010002 	.word	0x00010002

08002230 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b084      	sub	sp, #16
 8002234:	af00      	add	r7, sp, #0
 8002236:	60f8      	str	r0, [r7, #12]
 8002238:	60b9      	str	r1, [r7, #8]
 800223a:	603b      	str	r3, [r7, #0]
 800223c:	4613      	mov	r3, r2
 800223e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002240:	e048      	b.n	80022d4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002248:	d044      	beq.n	80022d4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800224a:	f7ff fa7d 	bl	8001748 <HAL_GetTick>
 800224e:	4602      	mov	r2, r0
 8002250:	69bb      	ldr	r3, [r7, #24]
 8002252:	1ad3      	subs	r3, r2, r3
 8002254:	683a      	ldr	r2, [r7, #0]
 8002256:	429a      	cmp	r2, r3
 8002258:	d302      	bcc.n	8002260 <I2C_WaitOnFlagUntilTimeout+0x30>
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d139      	bne.n	80022d4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002260:	68bb      	ldr	r3, [r7, #8]
 8002262:	0c1b      	lsrs	r3, r3, #16
 8002264:	b2db      	uxtb	r3, r3
 8002266:	2b01      	cmp	r3, #1
 8002268:	d10d      	bne.n	8002286 <I2C_WaitOnFlagUntilTimeout+0x56>
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	695b      	ldr	r3, [r3, #20]
 8002270:	43da      	mvns	r2, r3
 8002272:	68bb      	ldr	r3, [r7, #8]
 8002274:	4013      	ands	r3, r2
 8002276:	b29b      	uxth	r3, r3
 8002278:	2b00      	cmp	r3, #0
 800227a:	bf0c      	ite	eq
 800227c:	2301      	moveq	r3, #1
 800227e:	2300      	movne	r3, #0
 8002280:	b2db      	uxtb	r3, r3
 8002282:	461a      	mov	r2, r3
 8002284:	e00c      	b.n	80022a0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	699b      	ldr	r3, [r3, #24]
 800228c:	43da      	mvns	r2, r3
 800228e:	68bb      	ldr	r3, [r7, #8]
 8002290:	4013      	ands	r3, r2
 8002292:	b29b      	uxth	r3, r3
 8002294:	2b00      	cmp	r3, #0
 8002296:	bf0c      	ite	eq
 8002298:	2301      	moveq	r3, #1
 800229a:	2300      	movne	r3, #0
 800229c:	b2db      	uxtb	r3, r3
 800229e:	461a      	mov	r2, r3
 80022a0:	79fb      	ldrb	r3, [r7, #7]
 80022a2:	429a      	cmp	r2, r3
 80022a4:	d116      	bne.n	80022d4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	2200      	movs	r2, #0
 80022aa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	2220      	movs	r2, #32
 80022b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	2200      	movs	r2, #0
 80022b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022c0:	f043 0220 	orr.w	r2, r3, #32
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	2200      	movs	r2, #0
 80022cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80022d0:	2301      	movs	r3, #1
 80022d2:	e023      	b.n	800231c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80022d4:	68bb      	ldr	r3, [r7, #8]
 80022d6:	0c1b      	lsrs	r3, r3, #16
 80022d8:	b2db      	uxtb	r3, r3
 80022da:	2b01      	cmp	r3, #1
 80022dc:	d10d      	bne.n	80022fa <I2C_WaitOnFlagUntilTimeout+0xca>
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	695b      	ldr	r3, [r3, #20]
 80022e4:	43da      	mvns	r2, r3
 80022e6:	68bb      	ldr	r3, [r7, #8]
 80022e8:	4013      	ands	r3, r2
 80022ea:	b29b      	uxth	r3, r3
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	bf0c      	ite	eq
 80022f0:	2301      	moveq	r3, #1
 80022f2:	2300      	movne	r3, #0
 80022f4:	b2db      	uxtb	r3, r3
 80022f6:	461a      	mov	r2, r3
 80022f8:	e00c      	b.n	8002314 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	699b      	ldr	r3, [r3, #24]
 8002300:	43da      	mvns	r2, r3
 8002302:	68bb      	ldr	r3, [r7, #8]
 8002304:	4013      	ands	r3, r2
 8002306:	b29b      	uxth	r3, r3
 8002308:	2b00      	cmp	r3, #0
 800230a:	bf0c      	ite	eq
 800230c:	2301      	moveq	r3, #1
 800230e:	2300      	movne	r3, #0
 8002310:	b2db      	uxtb	r3, r3
 8002312:	461a      	mov	r2, r3
 8002314:	79fb      	ldrb	r3, [r7, #7]
 8002316:	429a      	cmp	r2, r3
 8002318:	d093      	beq.n	8002242 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800231a:	2300      	movs	r3, #0
}
 800231c:	4618      	mov	r0, r3
 800231e:	3710      	adds	r7, #16
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}

08002324 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b084      	sub	sp, #16
 8002328:	af00      	add	r7, sp, #0
 800232a:	60f8      	str	r0, [r7, #12]
 800232c:	60b9      	str	r1, [r7, #8]
 800232e:	607a      	str	r2, [r7, #4]
 8002330:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002332:	e071      	b.n	8002418 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	695b      	ldr	r3, [r3, #20]
 800233a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800233e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002342:	d123      	bne.n	800238c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	681a      	ldr	r2, [r3, #0]
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002352:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800235c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	2200      	movs	r2, #0
 8002362:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	2220      	movs	r2, #32
 8002368:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	2200      	movs	r2, #0
 8002370:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002378:	f043 0204 	orr.w	r2, r3, #4
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	2200      	movs	r2, #0
 8002384:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002388:	2301      	movs	r3, #1
 800238a:	e067      	b.n	800245c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002392:	d041      	beq.n	8002418 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002394:	f7ff f9d8 	bl	8001748 <HAL_GetTick>
 8002398:	4602      	mov	r2, r0
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	1ad3      	subs	r3, r2, r3
 800239e:	687a      	ldr	r2, [r7, #4]
 80023a0:	429a      	cmp	r2, r3
 80023a2:	d302      	bcc.n	80023aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d136      	bne.n	8002418 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80023aa:	68bb      	ldr	r3, [r7, #8]
 80023ac:	0c1b      	lsrs	r3, r3, #16
 80023ae:	b2db      	uxtb	r3, r3
 80023b0:	2b01      	cmp	r3, #1
 80023b2:	d10c      	bne.n	80023ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	695b      	ldr	r3, [r3, #20]
 80023ba:	43da      	mvns	r2, r3
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	4013      	ands	r3, r2
 80023c0:	b29b      	uxth	r3, r3
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	bf14      	ite	ne
 80023c6:	2301      	movne	r3, #1
 80023c8:	2300      	moveq	r3, #0
 80023ca:	b2db      	uxtb	r3, r3
 80023cc:	e00b      	b.n	80023e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	699b      	ldr	r3, [r3, #24]
 80023d4:	43da      	mvns	r2, r3
 80023d6:	68bb      	ldr	r3, [r7, #8]
 80023d8:	4013      	ands	r3, r2
 80023da:	b29b      	uxth	r3, r3
 80023dc:	2b00      	cmp	r3, #0
 80023de:	bf14      	ite	ne
 80023e0:	2301      	movne	r3, #1
 80023e2:	2300      	moveq	r3, #0
 80023e4:	b2db      	uxtb	r3, r3
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d016      	beq.n	8002418 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	2200      	movs	r2, #0
 80023ee:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	2220      	movs	r2, #32
 80023f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	2200      	movs	r2, #0
 80023fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002404:	f043 0220 	orr.w	r2, r3, #32
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	2200      	movs	r2, #0
 8002410:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002414:	2301      	movs	r3, #1
 8002416:	e021      	b.n	800245c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002418:	68bb      	ldr	r3, [r7, #8]
 800241a:	0c1b      	lsrs	r3, r3, #16
 800241c:	b2db      	uxtb	r3, r3
 800241e:	2b01      	cmp	r3, #1
 8002420:	d10c      	bne.n	800243c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	695b      	ldr	r3, [r3, #20]
 8002428:	43da      	mvns	r2, r3
 800242a:	68bb      	ldr	r3, [r7, #8]
 800242c:	4013      	ands	r3, r2
 800242e:	b29b      	uxth	r3, r3
 8002430:	2b00      	cmp	r3, #0
 8002432:	bf14      	ite	ne
 8002434:	2301      	movne	r3, #1
 8002436:	2300      	moveq	r3, #0
 8002438:	b2db      	uxtb	r3, r3
 800243a:	e00b      	b.n	8002454 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	699b      	ldr	r3, [r3, #24]
 8002442:	43da      	mvns	r2, r3
 8002444:	68bb      	ldr	r3, [r7, #8]
 8002446:	4013      	ands	r3, r2
 8002448:	b29b      	uxth	r3, r3
 800244a:	2b00      	cmp	r3, #0
 800244c:	bf14      	ite	ne
 800244e:	2301      	movne	r3, #1
 8002450:	2300      	moveq	r3, #0
 8002452:	b2db      	uxtb	r3, r3
 8002454:	2b00      	cmp	r3, #0
 8002456:	f47f af6d 	bne.w	8002334 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800245a:	2300      	movs	r3, #0
}
 800245c:	4618      	mov	r0, r3
 800245e:	3710      	adds	r7, #16
 8002460:	46bd      	mov	sp, r7
 8002462:	bd80      	pop	{r7, pc}

08002464 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b084      	sub	sp, #16
 8002468:	af00      	add	r7, sp, #0
 800246a:	60f8      	str	r0, [r7, #12]
 800246c:	60b9      	str	r1, [r7, #8]
 800246e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002470:	e034      	b.n	80024dc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002472:	68f8      	ldr	r0, [r7, #12]
 8002474:	f000 f886 	bl	8002584 <I2C_IsAcknowledgeFailed>
 8002478:	4603      	mov	r3, r0
 800247a:	2b00      	cmp	r3, #0
 800247c:	d001      	beq.n	8002482 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	e034      	b.n	80024ec <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002482:	68bb      	ldr	r3, [r7, #8]
 8002484:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002488:	d028      	beq.n	80024dc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800248a:	f7ff f95d 	bl	8001748 <HAL_GetTick>
 800248e:	4602      	mov	r2, r0
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	1ad3      	subs	r3, r2, r3
 8002494:	68ba      	ldr	r2, [r7, #8]
 8002496:	429a      	cmp	r2, r3
 8002498:	d302      	bcc.n	80024a0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800249a:	68bb      	ldr	r3, [r7, #8]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d11d      	bne.n	80024dc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	695b      	ldr	r3, [r3, #20]
 80024a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024aa:	2b80      	cmp	r3, #128	@ 0x80
 80024ac:	d016      	beq.n	80024dc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	2200      	movs	r2, #0
 80024b2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	2220      	movs	r2, #32
 80024b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	2200      	movs	r2, #0
 80024c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024c8:	f043 0220 	orr.w	r2, r3, #32
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	2200      	movs	r2, #0
 80024d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80024d8:	2301      	movs	r3, #1
 80024da:	e007      	b.n	80024ec <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	695b      	ldr	r3, [r3, #20]
 80024e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024e6:	2b80      	cmp	r3, #128	@ 0x80
 80024e8:	d1c3      	bne.n	8002472 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80024ea:	2300      	movs	r3, #0
}
 80024ec:	4618      	mov	r0, r3
 80024ee:	3710      	adds	r7, #16
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bd80      	pop	{r7, pc}

080024f4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b084      	sub	sp, #16
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	60f8      	str	r0, [r7, #12]
 80024fc:	60b9      	str	r1, [r7, #8]
 80024fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002500:	e034      	b.n	800256c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002502:	68f8      	ldr	r0, [r7, #12]
 8002504:	f000 f83e 	bl	8002584 <I2C_IsAcknowledgeFailed>
 8002508:	4603      	mov	r3, r0
 800250a:	2b00      	cmp	r3, #0
 800250c:	d001      	beq.n	8002512 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800250e:	2301      	movs	r3, #1
 8002510:	e034      	b.n	800257c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002512:	68bb      	ldr	r3, [r7, #8]
 8002514:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002518:	d028      	beq.n	800256c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800251a:	f7ff f915 	bl	8001748 <HAL_GetTick>
 800251e:	4602      	mov	r2, r0
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	1ad3      	subs	r3, r2, r3
 8002524:	68ba      	ldr	r2, [r7, #8]
 8002526:	429a      	cmp	r2, r3
 8002528:	d302      	bcc.n	8002530 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800252a:	68bb      	ldr	r3, [r7, #8]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d11d      	bne.n	800256c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	695b      	ldr	r3, [r3, #20]
 8002536:	f003 0304 	and.w	r3, r3, #4
 800253a:	2b04      	cmp	r3, #4
 800253c:	d016      	beq.n	800256c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	2200      	movs	r2, #0
 8002542:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	2220      	movs	r2, #32
 8002548:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	2200      	movs	r2, #0
 8002550:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002558:	f043 0220 	orr.w	r2, r3, #32
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	2200      	movs	r2, #0
 8002564:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002568:	2301      	movs	r3, #1
 800256a:	e007      	b.n	800257c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	695b      	ldr	r3, [r3, #20]
 8002572:	f003 0304 	and.w	r3, r3, #4
 8002576:	2b04      	cmp	r3, #4
 8002578:	d1c3      	bne.n	8002502 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800257a:	2300      	movs	r3, #0
}
 800257c:	4618      	mov	r0, r3
 800257e:	3710      	adds	r7, #16
 8002580:	46bd      	mov	sp, r7
 8002582:	bd80      	pop	{r7, pc}

08002584 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002584:	b480      	push	{r7}
 8002586:	b083      	sub	sp, #12
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	695b      	ldr	r3, [r3, #20]
 8002592:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002596:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800259a:	d11b      	bne.n	80025d4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80025a4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2200      	movs	r2, #0
 80025aa:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2220      	movs	r2, #32
 80025b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2200      	movs	r2, #0
 80025b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025c0:	f043 0204 	orr.w	r2, r3, #4
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2200      	movs	r2, #0
 80025cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80025d0:	2301      	movs	r3, #1
 80025d2:	e000      	b.n	80025d6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80025d4:	2300      	movs	r3, #0
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	370c      	adds	r7, #12
 80025da:	46bd      	mov	sp, r7
 80025dc:	bc80      	pop	{r7}
 80025de:	4770      	bx	lr

080025e0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b086      	sub	sp, #24
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d101      	bne.n	80025f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80025ee:	2301      	movs	r3, #1
 80025f0:	e272      	b.n	8002ad8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f003 0301 	and.w	r3, r3, #1
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	f000 8087 	beq.w	800270e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002600:	4b92      	ldr	r3, [pc, #584]	@ (800284c <HAL_RCC_OscConfig+0x26c>)
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	f003 030c 	and.w	r3, r3, #12
 8002608:	2b04      	cmp	r3, #4
 800260a:	d00c      	beq.n	8002626 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800260c:	4b8f      	ldr	r3, [pc, #572]	@ (800284c <HAL_RCC_OscConfig+0x26c>)
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	f003 030c 	and.w	r3, r3, #12
 8002614:	2b08      	cmp	r3, #8
 8002616:	d112      	bne.n	800263e <HAL_RCC_OscConfig+0x5e>
 8002618:	4b8c      	ldr	r3, [pc, #560]	@ (800284c <HAL_RCC_OscConfig+0x26c>)
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002620:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002624:	d10b      	bne.n	800263e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002626:	4b89      	ldr	r3, [pc, #548]	@ (800284c <HAL_RCC_OscConfig+0x26c>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800262e:	2b00      	cmp	r3, #0
 8002630:	d06c      	beq.n	800270c <HAL_RCC_OscConfig+0x12c>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d168      	bne.n	800270c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800263a:	2301      	movs	r3, #1
 800263c:	e24c      	b.n	8002ad8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002646:	d106      	bne.n	8002656 <HAL_RCC_OscConfig+0x76>
 8002648:	4b80      	ldr	r3, [pc, #512]	@ (800284c <HAL_RCC_OscConfig+0x26c>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a7f      	ldr	r2, [pc, #508]	@ (800284c <HAL_RCC_OscConfig+0x26c>)
 800264e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002652:	6013      	str	r3, [r2, #0]
 8002654:	e02e      	b.n	80026b4 <HAL_RCC_OscConfig+0xd4>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d10c      	bne.n	8002678 <HAL_RCC_OscConfig+0x98>
 800265e:	4b7b      	ldr	r3, [pc, #492]	@ (800284c <HAL_RCC_OscConfig+0x26c>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a7a      	ldr	r2, [pc, #488]	@ (800284c <HAL_RCC_OscConfig+0x26c>)
 8002664:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002668:	6013      	str	r3, [r2, #0]
 800266a:	4b78      	ldr	r3, [pc, #480]	@ (800284c <HAL_RCC_OscConfig+0x26c>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4a77      	ldr	r2, [pc, #476]	@ (800284c <HAL_RCC_OscConfig+0x26c>)
 8002670:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002674:	6013      	str	r3, [r2, #0]
 8002676:	e01d      	b.n	80026b4 <HAL_RCC_OscConfig+0xd4>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002680:	d10c      	bne.n	800269c <HAL_RCC_OscConfig+0xbc>
 8002682:	4b72      	ldr	r3, [pc, #456]	@ (800284c <HAL_RCC_OscConfig+0x26c>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4a71      	ldr	r2, [pc, #452]	@ (800284c <HAL_RCC_OscConfig+0x26c>)
 8002688:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800268c:	6013      	str	r3, [r2, #0]
 800268e:	4b6f      	ldr	r3, [pc, #444]	@ (800284c <HAL_RCC_OscConfig+0x26c>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4a6e      	ldr	r2, [pc, #440]	@ (800284c <HAL_RCC_OscConfig+0x26c>)
 8002694:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002698:	6013      	str	r3, [r2, #0]
 800269a:	e00b      	b.n	80026b4 <HAL_RCC_OscConfig+0xd4>
 800269c:	4b6b      	ldr	r3, [pc, #428]	@ (800284c <HAL_RCC_OscConfig+0x26c>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a6a      	ldr	r2, [pc, #424]	@ (800284c <HAL_RCC_OscConfig+0x26c>)
 80026a2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80026a6:	6013      	str	r3, [r2, #0]
 80026a8:	4b68      	ldr	r3, [pc, #416]	@ (800284c <HAL_RCC_OscConfig+0x26c>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a67      	ldr	r2, [pc, #412]	@ (800284c <HAL_RCC_OscConfig+0x26c>)
 80026ae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80026b2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d013      	beq.n	80026e4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026bc:	f7ff f844 	bl	8001748 <HAL_GetTick>
 80026c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026c2:	e008      	b.n	80026d6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026c4:	f7ff f840 	bl	8001748 <HAL_GetTick>
 80026c8:	4602      	mov	r2, r0
 80026ca:	693b      	ldr	r3, [r7, #16]
 80026cc:	1ad3      	subs	r3, r2, r3
 80026ce:	2b64      	cmp	r3, #100	@ 0x64
 80026d0:	d901      	bls.n	80026d6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80026d2:	2303      	movs	r3, #3
 80026d4:	e200      	b.n	8002ad8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026d6:	4b5d      	ldr	r3, [pc, #372]	@ (800284c <HAL_RCC_OscConfig+0x26c>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d0f0      	beq.n	80026c4 <HAL_RCC_OscConfig+0xe4>
 80026e2:	e014      	b.n	800270e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026e4:	f7ff f830 	bl	8001748 <HAL_GetTick>
 80026e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026ea:	e008      	b.n	80026fe <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026ec:	f7ff f82c 	bl	8001748 <HAL_GetTick>
 80026f0:	4602      	mov	r2, r0
 80026f2:	693b      	ldr	r3, [r7, #16]
 80026f4:	1ad3      	subs	r3, r2, r3
 80026f6:	2b64      	cmp	r3, #100	@ 0x64
 80026f8:	d901      	bls.n	80026fe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80026fa:	2303      	movs	r3, #3
 80026fc:	e1ec      	b.n	8002ad8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026fe:	4b53      	ldr	r3, [pc, #332]	@ (800284c <HAL_RCC_OscConfig+0x26c>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002706:	2b00      	cmp	r3, #0
 8002708:	d1f0      	bne.n	80026ec <HAL_RCC_OscConfig+0x10c>
 800270a:	e000      	b.n	800270e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800270c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 0302 	and.w	r3, r3, #2
 8002716:	2b00      	cmp	r3, #0
 8002718:	d063      	beq.n	80027e2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800271a:	4b4c      	ldr	r3, [pc, #304]	@ (800284c <HAL_RCC_OscConfig+0x26c>)
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	f003 030c 	and.w	r3, r3, #12
 8002722:	2b00      	cmp	r3, #0
 8002724:	d00b      	beq.n	800273e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002726:	4b49      	ldr	r3, [pc, #292]	@ (800284c <HAL_RCC_OscConfig+0x26c>)
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	f003 030c 	and.w	r3, r3, #12
 800272e:	2b08      	cmp	r3, #8
 8002730:	d11c      	bne.n	800276c <HAL_RCC_OscConfig+0x18c>
 8002732:	4b46      	ldr	r3, [pc, #280]	@ (800284c <HAL_RCC_OscConfig+0x26c>)
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800273a:	2b00      	cmp	r3, #0
 800273c:	d116      	bne.n	800276c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800273e:	4b43      	ldr	r3, [pc, #268]	@ (800284c <HAL_RCC_OscConfig+0x26c>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f003 0302 	and.w	r3, r3, #2
 8002746:	2b00      	cmp	r3, #0
 8002748:	d005      	beq.n	8002756 <HAL_RCC_OscConfig+0x176>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	691b      	ldr	r3, [r3, #16]
 800274e:	2b01      	cmp	r3, #1
 8002750:	d001      	beq.n	8002756 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002752:	2301      	movs	r3, #1
 8002754:	e1c0      	b.n	8002ad8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002756:	4b3d      	ldr	r3, [pc, #244]	@ (800284c <HAL_RCC_OscConfig+0x26c>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	695b      	ldr	r3, [r3, #20]
 8002762:	00db      	lsls	r3, r3, #3
 8002764:	4939      	ldr	r1, [pc, #228]	@ (800284c <HAL_RCC_OscConfig+0x26c>)
 8002766:	4313      	orrs	r3, r2
 8002768:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800276a:	e03a      	b.n	80027e2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	691b      	ldr	r3, [r3, #16]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d020      	beq.n	80027b6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002774:	4b36      	ldr	r3, [pc, #216]	@ (8002850 <HAL_RCC_OscConfig+0x270>)
 8002776:	2201      	movs	r2, #1
 8002778:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800277a:	f7fe ffe5 	bl	8001748 <HAL_GetTick>
 800277e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002780:	e008      	b.n	8002794 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002782:	f7fe ffe1 	bl	8001748 <HAL_GetTick>
 8002786:	4602      	mov	r2, r0
 8002788:	693b      	ldr	r3, [r7, #16]
 800278a:	1ad3      	subs	r3, r2, r3
 800278c:	2b02      	cmp	r3, #2
 800278e:	d901      	bls.n	8002794 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002790:	2303      	movs	r3, #3
 8002792:	e1a1      	b.n	8002ad8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002794:	4b2d      	ldr	r3, [pc, #180]	@ (800284c <HAL_RCC_OscConfig+0x26c>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f003 0302 	and.w	r3, r3, #2
 800279c:	2b00      	cmp	r3, #0
 800279e:	d0f0      	beq.n	8002782 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027a0:	4b2a      	ldr	r3, [pc, #168]	@ (800284c <HAL_RCC_OscConfig+0x26c>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	695b      	ldr	r3, [r3, #20]
 80027ac:	00db      	lsls	r3, r3, #3
 80027ae:	4927      	ldr	r1, [pc, #156]	@ (800284c <HAL_RCC_OscConfig+0x26c>)
 80027b0:	4313      	orrs	r3, r2
 80027b2:	600b      	str	r3, [r1, #0]
 80027b4:	e015      	b.n	80027e2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027b6:	4b26      	ldr	r3, [pc, #152]	@ (8002850 <HAL_RCC_OscConfig+0x270>)
 80027b8:	2200      	movs	r2, #0
 80027ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027bc:	f7fe ffc4 	bl	8001748 <HAL_GetTick>
 80027c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027c2:	e008      	b.n	80027d6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027c4:	f7fe ffc0 	bl	8001748 <HAL_GetTick>
 80027c8:	4602      	mov	r2, r0
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	1ad3      	subs	r3, r2, r3
 80027ce:	2b02      	cmp	r3, #2
 80027d0:	d901      	bls.n	80027d6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80027d2:	2303      	movs	r3, #3
 80027d4:	e180      	b.n	8002ad8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027d6:	4b1d      	ldr	r3, [pc, #116]	@ (800284c <HAL_RCC_OscConfig+0x26c>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f003 0302 	and.w	r3, r3, #2
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d1f0      	bne.n	80027c4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f003 0308 	and.w	r3, r3, #8
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d03a      	beq.n	8002864 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	699b      	ldr	r3, [r3, #24]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d019      	beq.n	800282a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027f6:	4b17      	ldr	r3, [pc, #92]	@ (8002854 <HAL_RCC_OscConfig+0x274>)
 80027f8:	2201      	movs	r2, #1
 80027fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027fc:	f7fe ffa4 	bl	8001748 <HAL_GetTick>
 8002800:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002802:	e008      	b.n	8002816 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002804:	f7fe ffa0 	bl	8001748 <HAL_GetTick>
 8002808:	4602      	mov	r2, r0
 800280a:	693b      	ldr	r3, [r7, #16]
 800280c:	1ad3      	subs	r3, r2, r3
 800280e:	2b02      	cmp	r3, #2
 8002810:	d901      	bls.n	8002816 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002812:	2303      	movs	r3, #3
 8002814:	e160      	b.n	8002ad8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002816:	4b0d      	ldr	r3, [pc, #52]	@ (800284c <HAL_RCC_OscConfig+0x26c>)
 8002818:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800281a:	f003 0302 	and.w	r3, r3, #2
 800281e:	2b00      	cmp	r3, #0
 8002820:	d0f0      	beq.n	8002804 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002822:	2001      	movs	r0, #1
 8002824:	f000 fafe 	bl	8002e24 <RCC_Delay>
 8002828:	e01c      	b.n	8002864 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800282a:	4b0a      	ldr	r3, [pc, #40]	@ (8002854 <HAL_RCC_OscConfig+0x274>)
 800282c:	2200      	movs	r2, #0
 800282e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002830:	f7fe ff8a 	bl	8001748 <HAL_GetTick>
 8002834:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002836:	e00f      	b.n	8002858 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002838:	f7fe ff86 	bl	8001748 <HAL_GetTick>
 800283c:	4602      	mov	r2, r0
 800283e:	693b      	ldr	r3, [r7, #16]
 8002840:	1ad3      	subs	r3, r2, r3
 8002842:	2b02      	cmp	r3, #2
 8002844:	d908      	bls.n	8002858 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002846:	2303      	movs	r3, #3
 8002848:	e146      	b.n	8002ad8 <HAL_RCC_OscConfig+0x4f8>
 800284a:	bf00      	nop
 800284c:	40021000 	.word	0x40021000
 8002850:	42420000 	.word	0x42420000
 8002854:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002858:	4b92      	ldr	r3, [pc, #584]	@ (8002aa4 <HAL_RCC_OscConfig+0x4c4>)
 800285a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800285c:	f003 0302 	and.w	r3, r3, #2
 8002860:	2b00      	cmp	r3, #0
 8002862:	d1e9      	bne.n	8002838 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f003 0304 	and.w	r3, r3, #4
 800286c:	2b00      	cmp	r3, #0
 800286e:	f000 80a6 	beq.w	80029be <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002872:	2300      	movs	r3, #0
 8002874:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002876:	4b8b      	ldr	r3, [pc, #556]	@ (8002aa4 <HAL_RCC_OscConfig+0x4c4>)
 8002878:	69db      	ldr	r3, [r3, #28]
 800287a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800287e:	2b00      	cmp	r3, #0
 8002880:	d10d      	bne.n	800289e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002882:	4b88      	ldr	r3, [pc, #544]	@ (8002aa4 <HAL_RCC_OscConfig+0x4c4>)
 8002884:	69db      	ldr	r3, [r3, #28]
 8002886:	4a87      	ldr	r2, [pc, #540]	@ (8002aa4 <HAL_RCC_OscConfig+0x4c4>)
 8002888:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800288c:	61d3      	str	r3, [r2, #28]
 800288e:	4b85      	ldr	r3, [pc, #532]	@ (8002aa4 <HAL_RCC_OscConfig+0x4c4>)
 8002890:	69db      	ldr	r3, [r3, #28]
 8002892:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002896:	60bb      	str	r3, [r7, #8]
 8002898:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800289a:	2301      	movs	r3, #1
 800289c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800289e:	4b82      	ldr	r3, [pc, #520]	@ (8002aa8 <HAL_RCC_OscConfig+0x4c8>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d118      	bne.n	80028dc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028aa:	4b7f      	ldr	r3, [pc, #508]	@ (8002aa8 <HAL_RCC_OscConfig+0x4c8>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4a7e      	ldr	r2, [pc, #504]	@ (8002aa8 <HAL_RCC_OscConfig+0x4c8>)
 80028b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80028b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028b6:	f7fe ff47 	bl	8001748 <HAL_GetTick>
 80028ba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028bc:	e008      	b.n	80028d0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028be:	f7fe ff43 	bl	8001748 <HAL_GetTick>
 80028c2:	4602      	mov	r2, r0
 80028c4:	693b      	ldr	r3, [r7, #16]
 80028c6:	1ad3      	subs	r3, r2, r3
 80028c8:	2b64      	cmp	r3, #100	@ 0x64
 80028ca:	d901      	bls.n	80028d0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80028cc:	2303      	movs	r3, #3
 80028ce:	e103      	b.n	8002ad8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028d0:	4b75      	ldr	r3, [pc, #468]	@ (8002aa8 <HAL_RCC_OscConfig+0x4c8>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d0f0      	beq.n	80028be <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	68db      	ldr	r3, [r3, #12]
 80028e0:	2b01      	cmp	r3, #1
 80028e2:	d106      	bne.n	80028f2 <HAL_RCC_OscConfig+0x312>
 80028e4:	4b6f      	ldr	r3, [pc, #444]	@ (8002aa4 <HAL_RCC_OscConfig+0x4c4>)
 80028e6:	6a1b      	ldr	r3, [r3, #32]
 80028e8:	4a6e      	ldr	r2, [pc, #440]	@ (8002aa4 <HAL_RCC_OscConfig+0x4c4>)
 80028ea:	f043 0301 	orr.w	r3, r3, #1
 80028ee:	6213      	str	r3, [r2, #32]
 80028f0:	e02d      	b.n	800294e <HAL_RCC_OscConfig+0x36e>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	68db      	ldr	r3, [r3, #12]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d10c      	bne.n	8002914 <HAL_RCC_OscConfig+0x334>
 80028fa:	4b6a      	ldr	r3, [pc, #424]	@ (8002aa4 <HAL_RCC_OscConfig+0x4c4>)
 80028fc:	6a1b      	ldr	r3, [r3, #32]
 80028fe:	4a69      	ldr	r2, [pc, #420]	@ (8002aa4 <HAL_RCC_OscConfig+0x4c4>)
 8002900:	f023 0301 	bic.w	r3, r3, #1
 8002904:	6213      	str	r3, [r2, #32]
 8002906:	4b67      	ldr	r3, [pc, #412]	@ (8002aa4 <HAL_RCC_OscConfig+0x4c4>)
 8002908:	6a1b      	ldr	r3, [r3, #32]
 800290a:	4a66      	ldr	r2, [pc, #408]	@ (8002aa4 <HAL_RCC_OscConfig+0x4c4>)
 800290c:	f023 0304 	bic.w	r3, r3, #4
 8002910:	6213      	str	r3, [r2, #32]
 8002912:	e01c      	b.n	800294e <HAL_RCC_OscConfig+0x36e>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	68db      	ldr	r3, [r3, #12]
 8002918:	2b05      	cmp	r3, #5
 800291a:	d10c      	bne.n	8002936 <HAL_RCC_OscConfig+0x356>
 800291c:	4b61      	ldr	r3, [pc, #388]	@ (8002aa4 <HAL_RCC_OscConfig+0x4c4>)
 800291e:	6a1b      	ldr	r3, [r3, #32]
 8002920:	4a60      	ldr	r2, [pc, #384]	@ (8002aa4 <HAL_RCC_OscConfig+0x4c4>)
 8002922:	f043 0304 	orr.w	r3, r3, #4
 8002926:	6213      	str	r3, [r2, #32]
 8002928:	4b5e      	ldr	r3, [pc, #376]	@ (8002aa4 <HAL_RCC_OscConfig+0x4c4>)
 800292a:	6a1b      	ldr	r3, [r3, #32]
 800292c:	4a5d      	ldr	r2, [pc, #372]	@ (8002aa4 <HAL_RCC_OscConfig+0x4c4>)
 800292e:	f043 0301 	orr.w	r3, r3, #1
 8002932:	6213      	str	r3, [r2, #32]
 8002934:	e00b      	b.n	800294e <HAL_RCC_OscConfig+0x36e>
 8002936:	4b5b      	ldr	r3, [pc, #364]	@ (8002aa4 <HAL_RCC_OscConfig+0x4c4>)
 8002938:	6a1b      	ldr	r3, [r3, #32]
 800293a:	4a5a      	ldr	r2, [pc, #360]	@ (8002aa4 <HAL_RCC_OscConfig+0x4c4>)
 800293c:	f023 0301 	bic.w	r3, r3, #1
 8002940:	6213      	str	r3, [r2, #32]
 8002942:	4b58      	ldr	r3, [pc, #352]	@ (8002aa4 <HAL_RCC_OscConfig+0x4c4>)
 8002944:	6a1b      	ldr	r3, [r3, #32]
 8002946:	4a57      	ldr	r2, [pc, #348]	@ (8002aa4 <HAL_RCC_OscConfig+0x4c4>)
 8002948:	f023 0304 	bic.w	r3, r3, #4
 800294c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	68db      	ldr	r3, [r3, #12]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d015      	beq.n	8002982 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002956:	f7fe fef7 	bl	8001748 <HAL_GetTick>
 800295a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800295c:	e00a      	b.n	8002974 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800295e:	f7fe fef3 	bl	8001748 <HAL_GetTick>
 8002962:	4602      	mov	r2, r0
 8002964:	693b      	ldr	r3, [r7, #16]
 8002966:	1ad3      	subs	r3, r2, r3
 8002968:	f241 3288 	movw	r2, #5000	@ 0x1388
 800296c:	4293      	cmp	r3, r2
 800296e:	d901      	bls.n	8002974 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002970:	2303      	movs	r3, #3
 8002972:	e0b1      	b.n	8002ad8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002974:	4b4b      	ldr	r3, [pc, #300]	@ (8002aa4 <HAL_RCC_OscConfig+0x4c4>)
 8002976:	6a1b      	ldr	r3, [r3, #32]
 8002978:	f003 0302 	and.w	r3, r3, #2
 800297c:	2b00      	cmp	r3, #0
 800297e:	d0ee      	beq.n	800295e <HAL_RCC_OscConfig+0x37e>
 8002980:	e014      	b.n	80029ac <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002982:	f7fe fee1 	bl	8001748 <HAL_GetTick>
 8002986:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002988:	e00a      	b.n	80029a0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800298a:	f7fe fedd 	bl	8001748 <HAL_GetTick>
 800298e:	4602      	mov	r2, r0
 8002990:	693b      	ldr	r3, [r7, #16]
 8002992:	1ad3      	subs	r3, r2, r3
 8002994:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002998:	4293      	cmp	r3, r2
 800299a:	d901      	bls.n	80029a0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800299c:	2303      	movs	r3, #3
 800299e:	e09b      	b.n	8002ad8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029a0:	4b40      	ldr	r3, [pc, #256]	@ (8002aa4 <HAL_RCC_OscConfig+0x4c4>)
 80029a2:	6a1b      	ldr	r3, [r3, #32]
 80029a4:	f003 0302 	and.w	r3, r3, #2
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d1ee      	bne.n	800298a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80029ac:	7dfb      	ldrb	r3, [r7, #23]
 80029ae:	2b01      	cmp	r3, #1
 80029b0:	d105      	bne.n	80029be <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029b2:	4b3c      	ldr	r3, [pc, #240]	@ (8002aa4 <HAL_RCC_OscConfig+0x4c4>)
 80029b4:	69db      	ldr	r3, [r3, #28]
 80029b6:	4a3b      	ldr	r2, [pc, #236]	@ (8002aa4 <HAL_RCC_OscConfig+0x4c4>)
 80029b8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80029bc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	69db      	ldr	r3, [r3, #28]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	f000 8087 	beq.w	8002ad6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80029c8:	4b36      	ldr	r3, [pc, #216]	@ (8002aa4 <HAL_RCC_OscConfig+0x4c4>)
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	f003 030c 	and.w	r3, r3, #12
 80029d0:	2b08      	cmp	r3, #8
 80029d2:	d061      	beq.n	8002a98 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	69db      	ldr	r3, [r3, #28]
 80029d8:	2b02      	cmp	r3, #2
 80029da:	d146      	bne.n	8002a6a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029dc:	4b33      	ldr	r3, [pc, #204]	@ (8002aac <HAL_RCC_OscConfig+0x4cc>)
 80029de:	2200      	movs	r2, #0
 80029e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029e2:	f7fe feb1 	bl	8001748 <HAL_GetTick>
 80029e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029e8:	e008      	b.n	80029fc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029ea:	f7fe fead 	bl	8001748 <HAL_GetTick>
 80029ee:	4602      	mov	r2, r0
 80029f0:	693b      	ldr	r3, [r7, #16]
 80029f2:	1ad3      	subs	r3, r2, r3
 80029f4:	2b02      	cmp	r3, #2
 80029f6:	d901      	bls.n	80029fc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80029f8:	2303      	movs	r3, #3
 80029fa:	e06d      	b.n	8002ad8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029fc:	4b29      	ldr	r3, [pc, #164]	@ (8002aa4 <HAL_RCC_OscConfig+0x4c4>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d1f0      	bne.n	80029ea <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6a1b      	ldr	r3, [r3, #32]
 8002a0c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a10:	d108      	bne.n	8002a24 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002a12:	4b24      	ldr	r3, [pc, #144]	@ (8002aa4 <HAL_RCC_OscConfig+0x4c4>)
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	689b      	ldr	r3, [r3, #8]
 8002a1e:	4921      	ldr	r1, [pc, #132]	@ (8002aa4 <HAL_RCC_OscConfig+0x4c4>)
 8002a20:	4313      	orrs	r3, r2
 8002a22:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a24:	4b1f      	ldr	r3, [pc, #124]	@ (8002aa4 <HAL_RCC_OscConfig+0x4c4>)
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6a19      	ldr	r1, [r3, #32]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a34:	430b      	orrs	r3, r1
 8002a36:	491b      	ldr	r1, [pc, #108]	@ (8002aa4 <HAL_RCC_OscConfig+0x4c4>)
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a3c:	4b1b      	ldr	r3, [pc, #108]	@ (8002aac <HAL_RCC_OscConfig+0x4cc>)
 8002a3e:	2201      	movs	r2, #1
 8002a40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a42:	f7fe fe81 	bl	8001748 <HAL_GetTick>
 8002a46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a48:	e008      	b.n	8002a5c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a4a:	f7fe fe7d 	bl	8001748 <HAL_GetTick>
 8002a4e:	4602      	mov	r2, r0
 8002a50:	693b      	ldr	r3, [r7, #16]
 8002a52:	1ad3      	subs	r3, r2, r3
 8002a54:	2b02      	cmp	r3, #2
 8002a56:	d901      	bls.n	8002a5c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002a58:	2303      	movs	r3, #3
 8002a5a:	e03d      	b.n	8002ad8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a5c:	4b11      	ldr	r3, [pc, #68]	@ (8002aa4 <HAL_RCC_OscConfig+0x4c4>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d0f0      	beq.n	8002a4a <HAL_RCC_OscConfig+0x46a>
 8002a68:	e035      	b.n	8002ad6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a6a:	4b10      	ldr	r3, [pc, #64]	@ (8002aac <HAL_RCC_OscConfig+0x4cc>)
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a70:	f7fe fe6a 	bl	8001748 <HAL_GetTick>
 8002a74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a76:	e008      	b.n	8002a8a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a78:	f7fe fe66 	bl	8001748 <HAL_GetTick>
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	693b      	ldr	r3, [r7, #16]
 8002a80:	1ad3      	subs	r3, r2, r3
 8002a82:	2b02      	cmp	r3, #2
 8002a84:	d901      	bls.n	8002a8a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002a86:	2303      	movs	r3, #3
 8002a88:	e026      	b.n	8002ad8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a8a:	4b06      	ldr	r3, [pc, #24]	@ (8002aa4 <HAL_RCC_OscConfig+0x4c4>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d1f0      	bne.n	8002a78 <HAL_RCC_OscConfig+0x498>
 8002a96:	e01e      	b.n	8002ad6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	69db      	ldr	r3, [r3, #28]
 8002a9c:	2b01      	cmp	r3, #1
 8002a9e:	d107      	bne.n	8002ab0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	e019      	b.n	8002ad8 <HAL_RCC_OscConfig+0x4f8>
 8002aa4:	40021000 	.word	0x40021000
 8002aa8:	40007000 	.word	0x40007000
 8002aac:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002ab0:	4b0b      	ldr	r3, [pc, #44]	@ (8002ae0 <HAL_RCC_OscConfig+0x500>)
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6a1b      	ldr	r3, [r3, #32]
 8002ac0:	429a      	cmp	r2, r3
 8002ac2:	d106      	bne.n	8002ad2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ace:	429a      	cmp	r2, r3
 8002ad0:	d001      	beq.n	8002ad6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e000      	b.n	8002ad8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002ad6:	2300      	movs	r3, #0
}
 8002ad8:	4618      	mov	r0, r3
 8002ada:	3718      	adds	r7, #24
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bd80      	pop	{r7, pc}
 8002ae0:	40021000 	.word	0x40021000

08002ae4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b084      	sub	sp, #16
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
 8002aec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d101      	bne.n	8002af8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002af4:	2301      	movs	r3, #1
 8002af6:	e0d0      	b.n	8002c9a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002af8:	4b6a      	ldr	r3, [pc, #424]	@ (8002ca4 <HAL_RCC_ClockConfig+0x1c0>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f003 0307 	and.w	r3, r3, #7
 8002b00:	683a      	ldr	r2, [r7, #0]
 8002b02:	429a      	cmp	r2, r3
 8002b04:	d910      	bls.n	8002b28 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b06:	4b67      	ldr	r3, [pc, #412]	@ (8002ca4 <HAL_RCC_ClockConfig+0x1c0>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f023 0207 	bic.w	r2, r3, #7
 8002b0e:	4965      	ldr	r1, [pc, #404]	@ (8002ca4 <HAL_RCC_ClockConfig+0x1c0>)
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	4313      	orrs	r3, r2
 8002b14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b16:	4b63      	ldr	r3, [pc, #396]	@ (8002ca4 <HAL_RCC_ClockConfig+0x1c0>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f003 0307 	and.w	r3, r3, #7
 8002b1e:	683a      	ldr	r2, [r7, #0]
 8002b20:	429a      	cmp	r2, r3
 8002b22:	d001      	beq.n	8002b28 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002b24:	2301      	movs	r3, #1
 8002b26:	e0b8      	b.n	8002c9a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f003 0302 	and.w	r3, r3, #2
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d020      	beq.n	8002b76 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f003 0304 	and.w	r3, r3, #4
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d005      	beq.n	8002b4c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b40:	4b59      	ldr	r3, [pc, #356]	@ (8002ca8 <HAL_RCC_ClockConfig+0x1c4>)
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	4a58      	ldr	r2, [pc, #352]	@ (8002ca8 <HAL_RCC_ClockConfig+0x1c4>)
 8002b46:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002b4a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f003 0308 	and.w	r3, r3, #8
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d005      	beq.n	8002b64 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b58:	4b53      	ldr	r3, [pc, #332]	@ (8002ca8 <HAL_RCC_ClockConfig+0x1c4>)
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	4a52      	ldr	r2, [pc, #328]	@ (8002ca8 <HAL_RCC_ClockConfig+0x1c4>)
 8002b5e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002b62:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b64:	4b50      	ldr	r3, [pc, #320]	@ (8002ca8 <HAL_RCC_ClockConfig+0x1c4>)
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	689b      	ldr	r3, [r3, #8]
 8002b70:	494d      	ldr	r1, [pc, #308]	@ (8002ca8 <HAL_RCC_ClockConfig+0x1c4>)
 8002b72:	4313      	orrs	r3, r2
 8002b74:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f003 0301 	and.w	r3, r3, #1
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d040      	beq.n	8002c04 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	2b01      	cmp	r3, #1
 8002b88:	d107      	bne.n	8002b9a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b8a:	4b47      	ldr	r3, [pc, #284]	@ (8002ca8 <HAL_RCC_ClockConfig+0x1c4>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d115      	bne.n	8002bc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b96:	2301      	movs	r3, #1
 8002b98:	e07f      	b.n	8002c9a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	2b02      	cmp	r3, #2
 8002ba0:	d107      	bne.n	8002bb2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ba2:	4b41      	ldr	r3, [pc, #260]	@ (8002ca8 <HAL_RCC_ClockConfig+0x1c4>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d109      	bne.n	8002bc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	e073      	b.n	8002c9a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bb2:	4b3d      	ldr	r3, [pc, #244]	@ (8002ca8 <HAL_RCC_ClockConfig+0x1c4>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f003 0302 	and.w	r3, r3, #2
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d101      	bne.n	8002bc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	e06b      	b.n	8002c9a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002bc2:	4b39      	ldr	r3, [pc, #228]	@ (8002ca8 <HAL_RCC_ClockConfig+0x1c4>)
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	f023 0203 	bic.w	r2, r3, #3
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	4936      	ldr	r1, [pc, #216]	@ (8002ca8 <HAL_RCC_ClockConfig+0x1c4>)
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002bd4:	f7fe fdb8 	bl	8001748 <HAL_GetTick>
 8002bd8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bda:	e00a      	b.n	8002bf2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bdc:	f7fe fdb4 	bl	8001748 <HAL_GetTick>
 8002be0:	4602      	mov	r2, r0
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	1ad3      	subs	r3, r2, r3
 8002be6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d901      	bls.n	8002bf2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002bee:	2303      	movs	r3, #3
 8002bf0:	e053      	b.n	8002c9a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bf2:	4b2d      	ldr	r3, [pc, #180]	@ (8002ca8 <HAL_RCC_ClockConfig+0x1c4>)
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	f003 020c 	and.w	r2, r3, #12
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	009b      	lsls	r3, r3, #2
 8002c00:	429a      	cmp	r2, r3
 8002c02:	d1eb      	bne.n	8002bdc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002c04:	4b27      	ldr	r3, [pc, #156]	@ (8002ca4 <HAL_RCC_ClockConfig+0x1c0>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f003 0307 	and.w	r3, r3, #7
 8002c0c:	683a      	ldr	r2, [r7, #0]
 8002c0e:	429a      	cmp	r2, r3
 8002c10:	d210      	bcs.n	8002c34 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c12:	4b24      	ldr	r3, [pc, #144]	@ (8002ca4 <HAL_RCC_ClockConfig+0x1c0>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f023 0207 	bic.w	r2, r3, #7
 8002c1a:	4922      	ldr	r1, [pc, #136]	@ (8002ca4 <HAL_RCC_ClockConfig+0x1c0>)
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c22:	4b20      	ldr	r3, [pc, #128]	@ (8002ca4 <HAL_RCC_ClockConfig+0x1c0>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f003 0307 	and.w	r3, r3, #7
 8002c2a:	683a      	ldr	r2, [r7, #0]
 8002c2c:	429a      	cmp	r2, r3
 8002c2e:	d001      	beq.n	8002c34 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002c30:	2301      	movs	r3, #1
 8002c32:	e032      	b.n	8002c9a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f003 0304 	and.w	r3, r3, #4
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d008      	beq.n	8002c52 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c40:	4b19      	ldr	r3, [pc, #100]	@ (8002ca8 <HAL_RCC_ClockConfig+0x1c4>)
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	68db      	ldr	r3, [r3, #12]
 8002c4c:	4916      	ldr	r1, [pc, #88]	@ (8002ca8 <HAL_RCC_ClockConfig+0x1c4>)
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f003 0308 	and.w	r3, r3, #8
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d009      	beq.n	8002c72 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002c5e:	4b12      	ldr	r3, [pc, #72]	@ (8002ca8 <HAL_RCC_ClockConfig+0x1c4>)
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	691b      	ldr	r3, [r3, #16]
 8002c6a:	00db      	lsls	r3, r3, #3
 8002c6c:	490e      	ldr	r1, [pc, #56]	@ (8002ca8 <HAL_RCC_ClockConfig+0x1c4>)
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002c72:	f000 f821 	bl	8002cb8 <HAL_RCC_GetSysClockFreq>
 8002c76:	4602      	mov	r2, r0
 8002c78:	4b0b      	ldr	r3, [pc, #44]	@ (8002ca8 <HAL_RCC_ClockConfig+0x1c4>)
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	091b      	lsrs	r3, r3, #4
 8002c7e:	f003 030f 	and.w	r3, r3, #15
 8002c82:	490a      	ldr	r1, [pc, #40]	@ (8002cac <HAL_RCC_ClockConfig+0x1c8>)
 8002c84:	5ccb      	ldrb	r3, [r1, r3]
 8002c86:	fa22 f303 	lsr.w	r3, r2, r3
 8002c8a:	4a09      	ldr	r2, [pc, #36]	@ (8002cb0 <HAL_RCC_ClockConfig+0x1cc>)
 8002c8c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002c8e:	4b09      	ldr	r3, [pc, #36]	@ (8002cb4 <HAL_RCC_ClockConfig+0x1d0>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4618      	mov	r0, r3
 8002c94:	f7fe fa8e 	bl	80011b4 <HAL_InitTick>

  return HAL_OK;
 8002c98:	2300      	movs	r3, #0
}
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	3710      	adds	r7, #16
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}
 8002ca2:	bf00      	nop
 8002ca4:	40022000 	.word	0x40022000
 8002ca8:	40021000 	.word	0x40021000
 8002cac:	08009c28 	.word	0x08009c28
 8002cb0:	20000400 	.word	0x20000400
 8002cb4:	20000404 	.word	0x20000404

08002cb8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	b087      	sub	sp, #28
 8002cbc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	60fb      	str	r3, [r7, #12]
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	60bb      	str	r3, [r7, #8]
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	617b      	str	r3, [r7, #20]
 8002cca:	2300      	movs	r3, #0
 8002ccc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002cd2:	4b1e      	ldr	r3, [pc, #120]	@ (8002d4c <HAL_RCC_GetSysClockFreq+0x94>)
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	f003 030c 	and.w	r3, r3, #12
 8002cde:	2b04      	cmp	r3, #4
 8002ce0:	d002      	beq.n	8002ce8 <HAL_RCC_GetSysClockFreq+0x30>
 8002ce2:	2b08      	cmp	r3, #8
 8002ce4:	d003      	beq.n	8002cee <HAL_RCC_GetSysClockFreq+0x36>
 8002ce6:	e027      	b.n	8002d38 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002ce8:	4b19      	ldr	r3, [pc, #100]	@ (8002d50 <HAL_RCC_GetSysClockFreq+0x98>)
 8002cea:	613b      	str	r3, [r7, #16]
      break;
 8002cec:	e027      	b.n	8002d3e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	0c9b      	lsrs	r3, r3, #18
 8002cf2:	f003 030f 	and.w	r3, r3, #15
 8002cf6:	4a17      	ldr	r2, [pc, #92]	@ (8002d54 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002cf8:	5cd3      	ldrb	r3, [r2, r3]
 8002cfa:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d010      	beq.n	8002d28 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002d06:	4b11      	ldr	r3, [pc, #68]	@ (8002d4c <HAL_RCC_GetSysClockFreq+0x94>)
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	0c5b      	lsrs	r3, r3, #17
 8002d0c:	f003 0301 	and.w	r3, r3, #1
 8002d10:	4a11      	ldr	r2, [pc, #68]	@ (8002d58 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002d12:	5cd3      	ldrb	r3, [r2, r3]
 8002d14:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	4a0d      	ldr	r2, [pc, #52]	@ (8002d50 <HAL_RCC_GetSysClockFreq+0x98>)
 8002d1a:	fb03 f202 	mul.w	r2, r3, r2
 8002d1e:	68bb      	ldr	r3, [r7, #8]
 8002d20:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d24:	617b      	str	r3, [r7, #20]
 8002d26:	e004      	b.n	8002d32 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	4a0c      	ldr	r2, [pc, #48]	@ (8002d5c <HAL_RCC_GetSysClockFreq+0xa4>)
 8002d2c:	fb02 f303 	mul.w	r3, r2, r3
 8002d30:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002d32:	697b      	ldr	r3, [r7, #20]
 8002d34:	613b      	str	r3, [r7, #16]
      break;
 8002d36:	e002      	b.n	8002d3e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002d38:	4b05      	ldr	r3, [pc, #20]	@ (8002d50 <HAL_RCC_GetSysClockFreq+0x98>)
 8002d3a:	613b      	str	r3, [r7, #16]
      break;
 8002d3c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d3e:	693b      	ldr	r3, [r7, #16]
}
 8002d40:	4618      	mov	r0, r3
 8002d42:	371c      	adds	r7, #28
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bc80      	pop	{r7}
 8002d48:	4770      	bx	lr
 8002d4a:	bf00      	nop
 8002d4c:	40021000 	.word	0x40021000
 8002d50:	007a1200 	.word	0x007a1200
 8002d54:	08009c40 	.word	0x08009c40
 8002d58:	08009c50 	.word	0x08009c50
 8002d5c:	003d0900 	.word	0x003d0900

08002d60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d60:	b480      	push	{r7}
 8002d62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d64:	4b02      	ldr	r3, [pc, #8]	@ (8002d70 <HAL_RCC_GetHCLKFreq+0x10>)
 8002d66:	681b      	ldr	r3, [r3, #0]
}
 8002d68:	4618      	mov	r0, r3
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bc80      	pop	{r7}
 8002d6e:	4770      	bx	lr
 8002d70:	20000400 	.word	0x20000400

08002d74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002d78:	f7ff fff2 	bl	8002d60 <HAL_RCC_GetHCLKFreq>
 8002d7c:	4602      	mov	r2, r0
 8002d7e:	4b05      	ldr	r3, [pc, #20]	@ (8002d94 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	0a1b      	lsrs	r3, r3, #8
 8002d84:	f003 0307 	and.w	r3, r3, #7
 8002d88:	4903      	ldr	r1, [pc, #12]	@ (8002d98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d8a:	5ccb      	ldrb	r3, [r1, r3]
 8002d8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d90:	4618      	mov	r0, r3
 8002d92:	bd80      	pop	{r7, pc}
 8002d94:	40021000 	.word	0x40021000
 8002d98:	08009c38 	.word	0x08009c38

08002d9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002da0:	f7ff ffde 	bl	8002d60 <HAL_RCC_GetHCLKFreq>
 8002da4:	4602      	mov	r2, r0
 8002da6:	4b05      	ldr	r3, [pc, #20]	@ (8002dbc <HAL_RCC_GetPCLK2Freq+0x20>)
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	0adb      	lsrs	r3, r3, #11
 8002dac:	f003 0307 	and.w	r3, r3, #7
 8002db0:	4903      	ldr	r1, [pc, #12]	@ (8002dc0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002db2:	5ccb      	ldrb	r3, [r1, r3]
 8002db4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002db8:	4618      	mov	r0, r3
 8002dba:	bd80      	pop	{r7, pc}
 8002dbc:	40021000 	.word	0x40021000
 8002dc0:	08009c38 	.word	0x08009c38

08002dc4 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	b083      	sub	sp, #12
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
 8002dcc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	220f      	movs	r2, #15
 8002dd2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002dd4:	4b11      	ldr	r3, [pc, #68]	@ (8002e1c <HAL_RCC_GetClockConfig+0x58>)
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	f003 0203 	and.w	r2, r3, #3
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002de0:	4b0e      	ldr	r3, [pc, #56]	@ (8002e1c <HAL_RCC_GetClockConfig+0x58>)
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002dec:	4b0b      	ldr	r3, [pc, #44]	@ (8002e1c <HAL_RCC_GetClockConfig+0x58>)
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002df8:	4b08      	ldr	r3, [pc, #32]	@ (8002e1c <HAL_RCC_GetClockConfig+0x58>)
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	08db      	lsrs	r3, r3, #3
 8002dfe:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002e06:	4b06      	ldr	r3, [pc, #24]	@ (8002e20 <HAL_RCC_GetClockConfig+0x5c>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f003 0207 	and.w	r2, r3, #7
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8002e12:	bf00      	nop
 8002e14:	370c      	adds	r7, #12
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bc80      	pop	{r7}
 8002e1a:	4770      	bx	lr
 8002e1c:	40021000 	.word	0x40021000
 8002e20:	40022000 	.word	0x40022000

08002e24 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002e24:	b480      	push	{r7}
 8002e26:	b085      	sub	sp, #20
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002e2c:	4b0a      	ldr	r3, [pc, #40]	@ (8002e58 <RCC_Delay+0x34>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a0a      	ldr	r2, [pc, #40]	@ (8002e5c <RCC_Delay+0x38>)
 8002e32:	fba2 2303 	umull	r2, r3, r2, r3
 8002e36:	0a5b      	lsrs	r3, r3, #9
 8002e38:	687a      	ldr	r2, [r7, #4]
 8002e3a:	fb02 f303 	mul.w	r3, r2, r3
 8002e3e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002e40:	bf00      	nop
  }
  while (Delay --);
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	1e5a      	subs	r2, r3, #1
 8002e46:	60fa      	str	r2, [r7, #12]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d1f9      	bne.n	8002e40 <RCC_Delay+0x1c>
}
 8002e4c:	bf00      	nop
 8002e4e:	bf00      	nop
 8002e50:	3714      	adds	r7, #20
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bc80      	pop	{r7}
 8002e56:	4770      	bx	lr
 8002e58:	20000400 	.word	0x20000400
 8002e5c:	10624dd3 	.word	0x10624dd3

08002e60 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b082      	sub	sp, #8
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d101      	bne.n	8002e72 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	e041      	b.n	8002ef6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e78:	b2db      	uxtb	r3, r3
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d106      	bne.n	8002e8c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2200      	movs	r2, #0
 8002e82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002e86:	6878      	ldr	r0, [r7, #4]
 8002e88:	f7fe fb62 	bl	8001550 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2202      	movs	r2, #2
 8002e90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681a      	ldr	r2, [r3, #0]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	3304      	adds	r3, #4
 8002e9c:	4619      	mov	r1, r3
 8002e9e:	4610      	mov	r0, r2
 8002ea0:	f000 fa5c 	bl	800335c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2201      	movs	r2, #1
 8002eb0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2201      	movs	r2, #1
 8002ed0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2201      	movs	r2, #1
 8002ed8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2201      	movs	r2, #1
 8002ee0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2201      	movs	r2, #1
 8002ee8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2201      	movs	r2, #1
 8002ef0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002ef4:	2300      	movs	r3, #0
}
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	3708      	adds	r7, #8
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bd80      	pop	{r7, pc}
	...

08002f00 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002f00:	b480      	push	{r7}
 8002f02:	b085      	sub	sp, #20
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f0e:	b2db      	uxtb	r3, r3
 8002f10:	2b01      	cmp	r3, #1
 8002f12:	d001      	beq.n	8002f18 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002f14:	2301      	movs	r3, #1
 8002f16:	e03a      	b.n	8002f8e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2202      	movs	r2, #2
 8002f1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	68da      	ldr	r2, [r3, #12]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f042 0201 	orr.w	r2, r2, #1
 8002f2e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a18      	ldr	r2, [pc, #96]	@ (8002f98 <HAL_TIM_Base_Start_IT+0x98>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d00e      	beq.n	8002f58 <HAL_TIM_Base_Start_IT+0x58>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f42:	d009      	beq.n	8002f58 <HAL_TIM_Base_Start_IT+0x58>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a14      	ldr	r2, [pc, #80]	@ (8002f9c <HAL_TIM_Base_Start_IT+0x9c>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d004      	beq.n	8002f58 <HAL_TIM_Base_Start_IT+0x58>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a13      	ldr	r2, [pc, #76]	@ (8002fa0 <HAL_TIM_Base_Start_IT+0xa0>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d111      	bne.n	8002f7c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	689b      	ldr	r3, [r3, #8]
 8002f5e:	f003 0307 	and.w	r3, r3, #7
 8002f62:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	2b06      	cmp	r3, #6
 8002f68:	d010      	beq.n	8002f8c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	681a      	ldr	r2, [r3, #0]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f042 0201 	orr.w	r2, r2, #1
 8002f78:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f7a:	e007      	b.n	8002f8c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	681a      	ldr	r2, [r3, #0]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f042 0201 	orr.w	r2, r2, #1
 8002f8a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002f8c:	2300      	movs	r3, #0
}
 8002f8e:	4618      	mov	r0, r3
 8002f90:	3714      	adds	r7, #20
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bc80      	pop	{r7}
 8002f96:	4770      	bx	lr
 8002f98:	40012c00 	.word	0x40012c00
 8002f9c:	40000400 	.word	0x40000400
 8002fa0:	40000800 	.word	0x40000800

08002fa4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b084      	sub	sp, #16
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	68db      	ldr	r3, [r3, #12]
 8002fb2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	691b      	ldr	r3, [r3, #16]
 8002fba:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	f003 0302 	and.w	r3, r3, #2
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d020      	beq.n	8003008 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	f003 0302 	and.w	r3, r3, #2
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d01b      	beq.n	8003008 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f06f 0202 	mvn.w	r2, #2
 8002fd8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2201      	movs	r2, #1
 8002fde:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	699b      	ldr	r3, [r3, #24]
 8002fe6:	f003 0303 	and.w	r3, r3, #3
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d003      	beq.n	8002ff6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002fee:	6878      	ldr	r0, [r7, #4]
 8002ff0:	f000 f998 	bl	8003324 <HAL_TIM_IC_CaptureCallback>
 8002ff4:	e005      	b.n	8003002 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ff6:	6878      	ldr	r0, [r7, #4]
 8002ff8:	f000 f98b 	bl	8003312 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ffc:	6878      	ldr	r0, [r7, #4]
 8002ffe:	f000 f99a 	bl	8003336 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2200      	movs	r2, #0
 8003006:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003008:	68bb      	ldr	r3, [r7, #8]
 800300a:	f003 0304 	and.w	r3, r3, #4
 800300e:	2b00      	cmp	r3, #0
 8003010:	d020      	beq.n	8003054 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	f003 0304 	and.w	r3, r3, #4
 8003018:	2b00      	cmp	r3, #0
 800301a:	d01b      	beq.n	8003054 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f06f 0204 	mvn.w	r2, #4
 8003024:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2202      	movs	r2, #2
 800302a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	699b      	ldr	r3, [r3, #24]
 8003032:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003036:	2b00      	cmp	r3, #0
 8003038:	d003      	beq.n	8003042 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800303a:	6878      	ldr	r0, [r7, #4]
 800303c:	f000 f972 	bl	8003324 <HAL_TIM_IC_CaptureCallback>
 8003040:	e005      	b.n	800304e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003042:	6878      	ldr	r0, [r7, #4]
 8003044:	f000 f965 	bl	8003312 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003048:	6878      	ldr	r0, [r7, #4]
 800304a:	f000 f974 	bl	8003336 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2200      	movs	r2, #0
 8003052:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	f003 0308 	and.w	r3, r3, #8
 800305a:	2b00      	cmp	r3, #0
 800305c:	d020      	beq.n	80030a0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	f003 0308 	and.w	r3, r3, #8
 8003064:	2b00      	cmp	r3, #0
 8003066:	d01b      	beq.n	80030a0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f06f 0208 	mvn.w	r2, #8
 8003070:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2204      	movs	r2, #4
 8003076:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	69db      	ldr	r3, [r3, #28]
 800307e:	f003 0303 	and.w	r3, r3, #3
 8003082:	2b00      	cmp	r3, #0
 8003084:	d003      	beq.n	800308e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003086:	6878      	ldr	r0, [r7, #4]
 8003088:	f000 f94c 	bl	8003324 <HAL_TIM_IC_CaptureCallback>
 800308c:	e005      	b.n	800309a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800308e:	6878      	ldr	r0, [r7, #4]
 8003090:	f000 f93f 	bl	8003312 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003094:	6878      	ldr	r0, [r7, #4]
 8003096:	f000 f94e 	bl	8003336 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2200      	movs	r2, #0
 800309e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	f003 0310 	and.w	r3, r3, #16
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d020      	beq.n	80030ec <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	f003 0310 	and.w	r3, r3, #16
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d01b      	beq.n	80030ec <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f06f 0210 	mvn.w	r2, #16
 80030bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2208      	movs	r2, #8
 80030c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	69db      	ldr	r3, [r3, #28]
 80030ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d003      	beq.n	80030da <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030d2:	6878      	ldr	r0, [r7, #4]
 80030d4:	f000 f926 	bl	8003324 <HAL_TIM_IC_CaptureCallback>
 80030d8:	e005      	b.n	80030e6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030da:	6878      	ldr	r0, [r7, #4]
 80030dc:	f000 f919 	bl	8003312 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030e0:	6878      	ldr	r0, [r7, #4]
 80030e2:	f000 f928 	bl	8003336 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2200      	movs	r2, #0
 80030ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80030ec:	68bb      	ldr	r3, [r7, #8]
 80030ee:	f003 0301 	and.w	r3, r3, #1
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d00c      	beq.n	8003110 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	f003 0301 	and.w	r3, r3, #1
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d007      	beq.n	8003110 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f06f 0201 	mvn.w	r2, #1
 8003108:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800310a:	6878      	ldr	r0, [r7, #4]
 800310c:	f7fd ff0c 	bl	8000f28 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003110:	68bb      	ldr	r3, [r7, #8]
 8003112:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003116:	2b00      	cmp	r3, #0
 8003118:	d00c      	beq.n	8003134 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003120:	2b00      	cmp	r3, #0
 8003122:	d007      	beq.n	8003134 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800312c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800312e:	6878      	ldr	r0, [r7, #4]
 8003130:	f000 fa7f 	bl	8003632 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003134:	68bb      	ldr	r3, [r7, #8]
 8003136:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800313a:	2b00      	cmp	r3, #0
 800313c:	d00c      	beq.n	8003158 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003144:	2b00      	cmp	r3, #0
 8003146:	d007      	beq.n	8003158 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003150:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003152:	6878      	ldr	r0, [r7, #4]
 8003154:	f000 f8f8 	bl	8003348 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003158:	68bb      	ldr	r3, [r7, #8]
 800315a:	f003 0320 	and.w	r3, r3, #32
 800315e:	2b00      	cmp	r3, #0
 8003160:	d00c      	beq.n	800317c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	f003 0320 	and.w	r3, r3, #32
 8003168:	2b00      	cmp	r3, #0
 800316a:	d007      	beq.n	800317c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f06f 0220 	mvn.w	r2, #32
 8003174:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003176:	6878      	ldr	r0, [r7, #4]
 8003178:	f000 fa52 	bl	8003620 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800317c:	bf00      	nop
 800317e:	3710      	adds	r7, #16
 8003180:	46bd      	mov	sp, r7
 8003182:	bd80      	pop	{r7, pc}

08003184 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b084      	sub	sp, #16
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
 800318c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800318e:	2300      	movs	r3, #0
 8003190:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003198:	2b01      	cmp	r3, #1
 800319a:	d101      	bne.n	80031a0 <HAL_TIM_ConfigClockSource+0x1c>
 800319c:	2302      	movs	r3, #2
 800319e:	e0b4      	b.n	800330a <HAL_TIM_ConfigClockSource+0x186>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2201      	movs	r2, #1
 80031a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2202      	movs	r2, #2
 80031ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	689b      	ldr	r3, [r3, #8]
 80031b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80031be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80031c0:	68bb      	ldr	r3, [r7, #8]
 80031c2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80031c6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	68ba      	ldr	r2, [r7, #8]
 80031ce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80031d8:	d03e      	beq.n	8003258 <HAL_TIM_ConfigClockSource+0xd4>
 80031da:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80031de:	f200 8087 	bhi.w	80032f0 <HAL_TIM_ConfigClockSource+0x16c>
 80031e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80031e6:	f000 8086 	beq.w	80032f6 <HAL_TIM_ConfigClockSource+0x172>
 80031ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80031ee:	d87f      	bhi.n	80032f0 <HAL_TIM_ConfigClockSource+0x16c>
 80031f0:	2b70      	cmp	r3, #112	@ 0x70
 80031f2:	d01a      	beq.n	800322a <HAL_TIM_ConfigClockSource+0xa6>
 80031f4:	2b70      	cmp	r3, #112	@ 0x70
 80031f6:	d87b      	bhi.n	80032f0 <HAL_TIM_ConfigClockSource+0x16c>
 80031f8:	2b60      	cmp	r3, #96	@ 0x60
 80031fa:	d050      	beq.n	800329e <HAL_TIM_ConfigClockSource+0x11a>
 80031fc:	2b60      	cmp	r3, #96	@ 0x60
 80031fe:	d877      	bhi.n	80032f0 <HAL_TIM_ConfigClockSource+0x16c>
 8003200:	2b50      	cmp	r3, #80	@ 0x50
 8003202:	d03c      	beq.n	800327e <HAL_TIM_ConfigClockSource+0xfa>
 8003204:	2b50      	cmp	r3, #80	@ 0x50
 8003206:	d873      	bhi.n	80032f0 <HAL_TIM_ConfigClockSource+0x16c>
 8003208:	2b40      	cmp	r3, #64	@ 0x40
 800320a:	d058      	beq.n	80032be <HAL_TIM_ConfigClockSource+0x13a>
 800320c:	2b40      	cmp	r3, #64	@ 0x40
 800320e:	d86f      	bhi.n	80032f0 <HAL_TIM_ConfigClockSource+0x16c>
 8003210:	2b30      	cmp	r3, #48	@ 0x30
 8003212:	d064      	beq.n	80032de <HAL_TIM_ConfigClockSource+0x15a>
 8003214:	2b30      	cmp	r3, #48	@ 0x30
 8003216:	d86b      	bhi.n	80032f0 <HAL_TIM_ConfigClockSource+0x16c>
 8003218:	2b20      	cmp	r3, #32
 800321a:	d060      	beq.n	80032de <HAL_TIM_ConfigClockSource+0x15a>
 800321c:	2b20      	cmp	r3, #32
 800321e:	d867      	bhi.n	80032f0 <HAL_TIM_ConfigClockSource+0x16c>
 8003220:	2b00      	cmp	r3, #0
 8003222:	d05c      	beq.n	80032de <HAL_TIM_ConfigClockSource+0x15a>
 8003224:	2b10      	cmp	r3, #16
 8003226:	d05a      	beq.n	80032de <HAL_TIM_ConfigClockSource+0x15a>
 8003228:	e062      	b.n	80032f0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800323a:	f000 f974 	bl	8003526 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	689b      	ldr	r3, [r3, #8]
 8003244:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003246:	68bb      	ldr	r3, [r7, #8]
 8003248:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800324c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	68ba      	ldr	r2, [r7, #8]
 8003254:	609a      	str	r2, [r3, #8]
      break;
 8003256:	e04f      	b.n	80032f8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003268:	f000 f95d 	bl	8003526 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	689a      	ldr	r2, [r3, #8]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800327a:	609a      	str	r2, [r3, #8]
      break;
 800327c:	e03c      	b.n	80032f8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800328a:	461a      	mov	r2, r3
 800328c:	f000 f8d4 	bl	8003438 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	2150      	movs	r1, #80	@ 0x50
 8003296:	4618      	mov	r0, r3
 8003298:	f000 f92b 	bl	80034f2 <TIM_ITRx_SetConfig>
      break;
 800329c:	e02c      	b.n	80032f8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80032aa:	461a      	mov	r2, r3
 80032ac:	f000 f8f2 	bl	8003494 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	2160      	movs	r1, #96	@ 0x60
 80032b6:	4618      	mov	r0, r3
 80032b8:	f000 f91b 	bl	80034f2 <TIM_ITRx_SetConfig>
      break;
 80032bc:	e01c      	b.n	80032f8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80032ca:	461a      	mov	r2, r3
 80032cc:	f000 f8b4 	bl	8003438 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	2140      	movs	r1, #64	@ 0x40
 80032d6:	4618      	mov	r0, r3
 80032d8:	f000 f90b 	bl	80034f2 <TIM_ITRx_SetConfig>
      break;
 80032dc:	e00c      	b.n	80032f8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681a      	ldr	r2, [r3, #0]
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4619      	mov	r1, r3
 80032e8:	4610      	mov	r0, r2
 80032ea:	f000 f902 	bl	80034f2 <TIM_ITRx_SetConfig>
      break;
 80032ee:	e003      	b.n	80032f8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80032f0:	2301      	movs	r3, #1
 80032f2:	73fb      	strb	r3, [r7, #15]
      break;
 80032f4:	e000      	b.n	80032f8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80032f6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2201      	movs	r2, #1
 80032fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2200      	movs	r2, #0
 8003304:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003308:	7bfb      	ldrb	r3, [r7, #15]
}
 800330a:	4618      	mov	r0, r3
 800330c:	3710      	adds	r7, #16
 800330e:	46bd      	mov	sp, r7
 8003310:	bd80      	pop	{r7, pc}

08003312 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003312:	b480      	push	{r7}
 8003314:	b083      	sub	sp, #12
 8003316:	af00      	add	r7, sp, #0
 8003318:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800331a:	bf00      	nop
 800331c:	370c      	adds	r7, #12
 800331e:	46bd      	mov	sp, r7
 8003320:	bc80      	pop	{r7}
 8003322:	4770      	bx	lr

08003324 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003324:	b480      	push	{r7}
 8003326:	b083      	sub	sp, #12
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800332c:	bf00      	nop
 800332e:	370c      	adds	r7, #12
 8003330:	46bd      	mov	sp, r7
 8003332:	bc80      	pop	{r7}
 8003334:	4770      	bx	lr

08003336 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003336:	b480      	push	{r7}
 8003338:	b083      	sub	sp, #12
 800333a:	af00      	add	r7, sp, #0
 800333c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800333e:	bf00      	nop
 8003340:	370c      	adds	r7, #12
 8003342:	46bd      	mov	sp, r7
 8003344:	bc80      	pop	{r7}
 8003346:	4770      	bx	lr

08003348 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003348:	b480      	push	{r7}
 800334a:	b083      	sub	sp, #12
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003350:	bf00      	nop
 8003352:	370c      	adds	r7, #12
 8003354:	46bd      	mov	sp, r7
 8003356:	bc80      	pop	{r7}
 8003358:	4770      	bx	lr
	...

0800335c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800335c:	b480      	push	{r7}
 800335e:	b085      	sub	sp, #20
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
 8003364:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	4a2f      	ldr	r2, [pc, #188]	@ (800342c <TIM_Base_SetConfig+0xd0>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d00b      	beq.n	800338c <TIM_Base_SetConfig+0x30>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800337a:	d007      	beq.n	800338c <TIM_Base_SetConfig+0x30>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	4a2c      	ldr	r2, [pc, #176]	@ (8003430 <TIM_Base_SetConfig+0xd4>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d003      	beq.n	800338c <TIM_Base_SetConfig+0x30>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	4a2b      	ldr	r2, [pc, #172]	@ (8003434 <TIM_Base_SetConfig+0xd8>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d108      	bne.n	800339e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003392:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	68fa      	ldr	r2, [r7, #12]
 800339a:	4313      	orrs	r3, r2
 800339c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	4a22      	ldr	r2, [pc, #136]	@ (800342c <TIM_Base_SetConfig+0xd0>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d00b      	beq.n	80033be <TIM_Base_SetConfig+0x62>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80033ac:	d007      	beq.n	80033be <TIM_Base_SetConfig+0x62>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	4a1f      	ldr	r2, [pc, #124]	@ (8003430 <TIM_Base_SetConfig+0xd4>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d003      	beq.n	80033be <TIM_Base_SetConfig+0x62>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	4a1e      	ldr	r2, [pc, #120]	@ (8003434 <TIM_Base_SetConfig+0xd8>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d108      	bne.n	80033d0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80033c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	68db      	ldr	r3, [r3, #12]
 80033ca:	68fa      	ldr	r2, [r7, #12]
 80033cc:	4313      	orrs	r3, r2
 80033ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	695b      	ldr	r3, [r3, #20]
 80033da:	4313      	orrs	r3, r2
 80033dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	68fa      	ldr	r2, [r7, #12]
 80033e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	689a      	ldr	r2, [r3, #8]
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	681a      	ldr	r2, [r3, #0]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	4a0d      	ldr	r2, [pc, #52]	@ (800342c <TIM_Base_SetConfig+0xd0>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d103      	bne.n	8003404 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	691a      	ldr	r2, [r3, #16]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2201      	movs	r2, #1
 8003408:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	691b      	ldr	r3, [r3, #16]
 800340e:	f003 0301 	and.w	r3, r3, #1
 8003412:	2b00      	cmp	r3, #0
 8003414:	d005      	beq.n	8003422 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	691b      	ldr	r3, [r3, #16]
 800341a:	f023 0201 	bic.w	r2, r3, #1
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	611a      	str	r2, [r3, #16]
  }
}
 8003422:	bf00      	nop
 8003424:	3714      	adds	r7, #20
 8003426:	46bd      	mov	sp, r7
 8003428:	bc80      	pop	{r7}
 800342a:	4770      	bx	lr
 800342c:	40012c00 	.word	0x40012c00
 8003430:	40000400 	.word	0x40000400
 8003434:	40000800 	.word	0x40000800

08003438 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003438:	b480      	push	{r7}
 800343a:	b087      	sub	sp, #28
 800343c:	af00      	add	r7, sp, #0
 800343e:	60f8      	str	r0, [r7, #12]
 8003440:	60b9      	str	r1, [r7, #8]
 8003442:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	6a1b      	ldr	r3, [r3, #32]
 8003448:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	6a1b      	ldr	r3, [r3, #32]
 800344e:	f023 0201 	bic.w	r2, r3, #1
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	699b      	ldr	r3, [r3, #24]
 800345a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800345c:	693b      	ldr	r3, [r7, #16]
 800345e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003462:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	011b      	lsls	r3, r3, #4
 8003468:	693a      	ldr	r2, [r7, #16]
 800346a:	4313      	orrs	r3, r2
 800346c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800346e:	697b      	ldr	r3, [r7, #20]
 8003470:	f023 030a 	bic.w	r3, r3, #10
 8003474:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003476:	697a      	ldr	r2, [r7, #20]
 8003478:	68bb      	ldr	r3, [r7, #8]
 800347a:	4313      	orrs	r3, r2
 800347c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	693a      	ldr	r2, [r7, #16]
 8003482:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	697a      	ldr	r2, [r7, #20]
 8003488:	621a      	str	r2, [r3, #32]
}
 800348a:	bf00      	nop
 800348c:	371c      	adds	r7, #28
 800348e:	46bd      	mov	sp, r7
 8003490:	bc80      	pop	{r7}
 8003492:	4770      	bx	lr

08003494 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003494:	b480      	push	{r7}
 8003496:	b087      	sub	sp, #28
 8003498:	af00      	add	r7, sp, #0
 800349a:	60f8      	str	r0, [r7, #12]
 800349c:	60b9      	str	r1, [r7, #8]
 800349e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	6a1b      	ldr	r3, [r3, #32]
 80034a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	6a1b      	ldr	r3, [r3, #32]
 80034aa:	f023 0210 	bic.w	r2, r3, #16
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	699b      	ldr	r3, [r3, #24]
 80034b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80034b8:	693b      	ldr	r3, [r7, #16]
 80034ba:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80034be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	031b      	lsls	r3, r3, #12
 80034c4:	693a      	ldr	r2, [r7, #16]
 80034c6:	4313      	orrs	r3, r2
 80034c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80034ca:	697b      	ldr	r3, [r7, #20]
 80034cc:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80034d0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80034d2:	68bb      	ldr	r3, [r7, #8]
 80034d4:	011b      	lsls	r3, r3, #4
 80034d6:	697a      	ldr	r2, [r7, #20]
 80034d8:	4313      	orrs	r3, r2
 80034da:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	693a      	ldr	r2, [r7, #16]
 80034e0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	697a      	ldr	r2, [r7, #20]
 80034e6:	621a      	str	r2, [r3, #32]
}
 80034e8:	bf00      	nop
 80034ea:	371c      	adds	r7, #28
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bc80      	pop	{r7}
 80034f0:	4770      	bx	lr

080034f2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80034f2:	b480      	push	{r7}
 80034f4:	b085      	sub	sp, #20
 80034f6:	af00      	add	r7, sp, #0
 80034f8:	6078      	str	r0, [r7, #4]
 80034fa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	689b      	ldr	r3, [r3, #8]
 8003500:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003508:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800350a:	683a      	ldr	r2, [r7, #0]
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	4313      	orrs	r3, r2
 8003510:	f043 0307 	orr.w	r3, r3, #7
 8003514:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	68fa      	ldr	r2, [r7, #12]
 800351a:	609a      	str	r2, [r3, #8]
}
 800351c:	bf00      	nop
 800351e:	3714      	adds	r7, #20
 8003520:	46bd      	mov	sp, r7
 8003522:	bc80      	pop	{r7}
 8003524:	4770      	bx	lr

08003526 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003526:	b480      	push	{r7}
 8003528:	b087      	sub	sp, #28
 800352a:	af00      	add	r7, sp, #0
 800352c:	60f8      	str	r0, [r7, #12]
 800352e:	60b9      	str	r1, [r7, #8]
 8003530:	607a      	str	r2, [r7, #4]
 8003532:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	689b      	ldr	r3, [r3, #8]
 8003538:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003540:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	021a      	lsls	r2, r3, #8
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	431a      	orrs	r2, r3
 800354a:	68bb      	ldr	r3, [r7, #8]
 800354c:	4313      	orrs	r3, r2
 800354e:	697a      	ldr	r2, [r7, #20]
 8003550:	4313      	orrs	r3, r2
 8003552:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	697a      	ldr	r2, [r7, #20]
 8003558:	609a      	str	r2, [r3, #8]
}
 800355a:	bf00      	nop
 800355c:	371c      	adds	r7, #28
 800355e:	46bd      	mov	sp, r7
 8003560:	bc80      	pop	{r7}
 8003562:	4770      	bx	lr

08003564 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003564:	b480      	push	{r7}
 8003566:	b085      	sub	sp, #20
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
 800356c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003574:	2b01      	cmp	r3, #1
 8003576:	d101      	bne.n	800357c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003578:	2302      	movs	r3, #2
 800357a:	e046      	b.n	800360a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2201      	movs	r2, #1
 8003580:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2202      	movs	r2, #2
 8003588:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	689b      	ldr	r3, [r3, #8]
 800359a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80035a2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	68fa      	ldr	r2, [r7, #12]
 80035aa:	4313      	orrs	r3, r2
 80035ac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	68fa      	ldr	r2, [r7, #12]
 80035b4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4a16      	ldr	r2, [pc, #88]	@ (8003614 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d00e      	beq.n	80035de <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80035c8:	d009      	beq.n	80035de <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a12      	ldr	r2, [pc, #72]	@ (8003618 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d004      	beq.n	80035de <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a10      	ldr	r2, [pc, #64]	@ (800361c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d10c      	bne.n	80035f8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80035e4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	68ba      	ldr	r2, [r7, #8]
 80035ec:	4313      	orrs	r3, r2
 80035ee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	68ba      	ldr	r2, [r7, #8]
 80035f6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2201      	movs	r2, #1
 80035fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2200      	movs	r2, #0
 8003604:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003608:	2300      	movs	r3, #0
}
 800360a:	4618      	mov	r0, r3
 800360c:	3714      	adds	r7, #20
 800360e:	46bd      	mov	sp, r7
 8003610:	bc80      	pop	{r7}
 8003612:	4770      	bx	lr
 8003614:	40012c00 	.word	0x40012c00
 8003618:	40000400 	.word	0x40000400
 800361c:	40000800 	.word	0x40000800

08003620 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003620:	b480      	push	{r7}
 8003622:	b083      	sub	sp, #12
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003628:	bf00      	nop
 800362a:	370c      	adds	r7, #12
 800362c:	46bd      	mov	sp, r7
 800362e:	bc80      	pop	{r7}
 8003630:	4770      	bx	lr

08003632 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003632:	b480      	push	{r7}
 8003634:	b083      	sub	sp, #12
 8003636:	af00      	add	r7, sp, #0
 8003638:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800363a:	bf00      	nop
 800363c:	370c      	adds	r7, #12
 800363e:	46bd      	mov	sp, r7
 8003640:	bc80      	pop	{r7}
 8003642:	4770      	bx	lr

08003644 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b082      	sub	sp, #8
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d101      	bne.n	8003656 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003652:	2301      	movs	r3, #1
 8003654:	e042      	b.n	80036dc <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800365c:	b2db      	uxtb	r3, r3
 800365e:	2b00      	cmp	r3, #0
 8003660:	d106      	bne.n	8003670 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2200      	movs	r2, #0
 8003666:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800366a:	6878      	ldr	r0, [r7, #4]
 800366c:	f7fd ffc0 	bl	80015f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2224      	movs	r2, #36	@ 0x24
 8003674:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	68da      	ldr	r2, [r3, #12]
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003686:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003688:	6878      	ldr	r0, [r7, #4]
 800368a:	f000 f971 	bl	8003970 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	691a      	ldr	r2, [r3, #16]
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800369c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	695a      	ldr	r2, [r3, #20]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80036ac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	68da      	ldr	r2, [r3, #12]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80036bc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2200      	movs	r2, #0
 80036c2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2220      	movs	r2, #32
 80036c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2220      	movs	r2, #32
 80036d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2200      	movs	r2, #0
 80036d8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80036da:	2300      	movs	r3, #0
}
 80036dc:	4618      	mov	r0, r3
 80036de:	3708      	adds	r7, #8
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bd80      	pop	{r7, pc}

080036e4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b08a      	sub	sp, #40	@ 0x28
 80036e8:	af02      	add	r7, sp, #8
 80036ea:	60f8      	str	r0, [r7, #12]
 80036ec:	60b9      	str	r1, [r7, #8]
 80036ee:	603b      	str	r3, [r7, #0]
 80036f0:	4613      	mov	r3, r2
 80036f2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80036f4:	2300      	movs	r3, #0
 80036f6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80036fe:	b2db      	uxtb	r3, r3
 8003700:	2b20      	cmp	r3, #32
 8003702:	d175      	bne.n	80037f0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d002      	beq.n	8003710 <HAL_UART_Transmit+0x2c>
 800370a:	88fb      	ldrh	r3, [r7, #6]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d101      	bne.n	8003714 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003710:	2301      	movs	r3, #1
 8003712:	e06e      	b.n	80037f2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	2200      	movs	r2, #0
 8003718:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	2221      	movs	r2, #33	@ 0x21
 800371e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003722:	f7fe f811 	bl	8001748 <HAL_GetTick>
 8003726:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	88fa      	ldrh	r2, [r7, #6]
 800372c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	88fa      	ldrh	r2, [r7, #6]
 8003732:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	689b      	ldr	r3, [r3, #8]
 8003738:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800373c:	d108      	bne.n	8003750 <HAL_UART_Transmit+0x6c>
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	691b      	ldr	r3, [r3, #16]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d104      	bne.n	8003750 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003746:	2300      	movs	r3, #0
 8003748:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800374a:	68bb      	ldr	r3, [r7, #8]
 800374c:	61bb      	str	r3, [r7, #24]
 800374e:	e003      	b.n	8003758 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003750:	68bb      	ldr	r3, [r7, #8]
 8003752:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003754:	2300      	movs	r3, #0
 8003756:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003758:	e02e      	b.n	80037b8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	9300      	str	r3, [sp, #0]
 800375e:	697b      	ldr	r3, [r7, #20]
 8003760:	2200      	movs	r2, #0
 8003762:	2180      	movs	r1, #128	@ 0x80
 8003764:	68f8      	ldr	r0, [r7, #12]
 8003766:	f000 f848 	bl	80037fa <UART_WaitOnFlagUntilTimeout>
 800376a:	4603      	mov	r3, r0
 800376c:	2b00      	cmp	r3, #0
 800376e:	d005      	beq.n	800377c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	2220      	movs	r2, #32
 8003774:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003778:	2303      	movs	r3, #3
 800377a:	e03a      	b.n	80037f2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800377c:	69fb      	ldr	r3, [r7, #28]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d10b      	bne.n	800379a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003782:	69bb      	ldr	r3, [r7, #24]
 8003784:	881b      	ldrh	r3, [r3, #0]
 8003786:	461a      	mov	r2, r3
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003790:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003792:	69bb      	ldr	r3, [r7, #24]
 8003794:	3302      	adds	r3, #2
 8003796:	61bb      	str	r3, [r7, #24]
 8003798:	e007      	b.n	80037aa <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800379a:	69fb      	ldr	r3, [r7, #28]
 800379c:	781a      	ldrb	r2, [r3, #0]
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80037a4:	69fb      	ldr	r3, [r7, #28]
 80037a6:	3301      	adds	r3, #1
 80037a8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80037ae:	b29b      	uxth	r3, r3
 80037b0:	3b01      	subs	r3, #1
 80037b2:	b29a      	uxth	r2, r3
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80037bc:	b29b      	uxth	r3, r3
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d1cb      	bne.n	800375a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	9300      	str	r3, [sp, #0]
 80037c6:	697b      	ldr	r3, [r7, #20]
 80037c8:	2200      	movs	r2, #0
 80037ca:	2140      	movs	r1, #64	@ 0x40
 80037cc:	68f8      	ldr	r0, [r7, #12]
 80037ce:	f000 f814 	bl	80037fa <UART_WaitOnFlagUntilTimeout>
 80037d2:	4603      	mov	r3, r0
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d005      	beq.n	80037e4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	2220      	movs	r2, #32
 80037dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80037e0:	2303      	movs	r3, #3
 80037e2:	e006      	b.n	80037f2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	2220      	movs	r2, #32
 80037e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80037ec:	2300      	movs	r3, #0
 80037ee:	e000      	b.n	80037f2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80037f0:	2302      	movs	r3, #2
  }
}
 80037f2:	4618      	mov	r0, r3
 80037f4:	3720      	adds	r7, #32
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bd80      	pop	{r7, pc}

080037fa <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80037fa:	b580      	push	{r7, lr}
 80037fc:	b086      	sub	sp, #24
 80037fe:	af00      	add	r7, sp, #0
 8003800:	60f8      	str	r0, [r7, #12]
 8003802:	60b9      	str	r1, [r7, #8]
 8003804:	603b      	str	r3, [r7, #0]
 8003806:	4613      	mov	r3, r2
 8003808:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800380a:	e03b      	b.n	8003884 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800380c:	6a3b      	ldr	r3, [r7, #32]
 800380e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003812:	d037      	beq.n	8003884 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003814:	f7fd ff98 	bl	8001748 <HAL_GetTick>
 8003818:	4602      	mov	r2, r0
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	1ad3      	subs	r3, r2, r3
 800381e:	6a3a      	ldr	r2, [r7, #32]
 8003820:	429a      	cmp	r2, r3
 8003822:	d302      	bcc.n	800382a <UART_WaitOnFlagUntilTimeout+0x30>
 8003824:	6a3b      	ldr	r3, [r7, #32]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d101      	bne.n	800382e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800382a:	2303      	movs	r3, #3
 800382c:	e03a      	b.n	80038a4 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	68db      	ldr	r3, [r3, #12]
 8003834:	f003 0304 	and.w	r3, r3, #4
 8003838:	2b00      	cmp	r3, #0
 800383a:	d023      	beq.n	8003884 <UART_WaitOnFlagUntilTimeout+0x8a>
 800383c:	68bb      	ldr	r3, [r7, #8]
 800383e:	2b80      	cmp	r3, #128	@ 0x80
 8003840:	d020      	beq.n	8003884 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003842:	68bb      	ldr	r3, [r7, #8]
 8003844:	2b40      	cmp	r3, #64	@ 0x40
 8003846:	d01d      	beq.n	8003884 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f003 0308 	and.w	r3, r3, #8
 8003852:	2b08      	cmp	r3, #8
 8003854:	d116      	bne.n	8003884 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003856:	2300      	movs	r3, #0
 8003858:	617b      	str	r3, [r7, #20]
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	617b      	str	r3, [r7, #20]
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	617b      	str	r3, [r7, #20]
 800386a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800386c:	68f8      	ldr	r0, [r7, #12]
 800386e:	f000 f81d 	bl	80038ac <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	2208      	movs	r2, #8
 8003876:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	2200      	movs	r2, #0
 800387c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003880:	2301      	movs	r3, #1
 8003882:	e00f      	b.n	80038a4 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	681a      	ldr	r2, [r3, #0]
 800388a:	68bb      	ldr	r3, [r7, #8]
 800388c:	4013      	ands	r3, r2
 800388e:	68ba      	ldr	r2, [r7, #8]
 8003890:	429a      	cmp	r2, r3
 8003892:	bf0c      	ite	eq
 8003894:	2301      	moveq	r3, #1
 8003896:	2300      	movne	r3, #0
 8003898:	b2db      	uxtb	r3, r3
 800389a:	461a      	mov	r2, r3
 800389c:	79fb      	ldrb	r3, [r7, #7]
 800389e:	429a      	cmp	r2, r3
 80038a0:	d0b4      	beq.n	800380c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80038a2:	2300      	movs	r3, #0
}
 80038a4:	4618      	mov	r0, r3
 80038a6:	3718      	adds	r7, #24
 80038a8:	46bd      	mov	sp, r7
 80038aa:	bd80      	pop	{r7, pc}

080038ac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80038ac:	b480      	push	{r7}
 80038ae:	b095      	sub	sp, #84	@ 0x54
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	330c      	adds	r3, #12
 80038ba:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038be:	e853 3f00 	ldrex	r3, [r3]
 80038c2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80038c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038c6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80038ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	330c      	adds	r3, #12
 80038d2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80038d4:	643a      	str	r2, [r7, #64]	@ 0x40
 80038d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038d8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80038da:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80038dc:	e841 2300 	strex	r3, r2, [r1]
 80038e0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80038e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d1e5      	bne.n	80038b4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	3314      	adds	r3, #20
 80038ee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038f0:	6a3b      	ldr	r3, [r7, #32]
 80038f2:	e853 3f00 	ldrex	r3, [r3]
 80038f6:	61fb      	str	r3, [r7, #28]
   return(result);
 80038f8:	69fb      	ldr	r3, [r7, #28]
 80038fa:	f023 0301 	bic.w	r3, r3, #1
 80038fe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	3314      	adds	r3, #20
 8003906:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003908:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800390a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800390c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800390e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003910:	e841 2300 	strex	r3, r2, [r1]
 8003914:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003916:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003918:	2b00      	cmp	r3, #0
 800391a:	d1e5      	bne.n	80038e8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003920:	2b01      	cmp	r3, #1
 8003922:	d119      	bne.n	8003958 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	330c      	adds	r3, #12
 800392a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	e853 3f00 	ldrex	r3, [r3]
 8003932:	60bb      	str	r3, [r7, #8]
   return(result);
 8003934:	68bb      	ldr	r3, [r7, #8]
 8003936:	f023 0310 	bic.w	r3, r3, #16
 800393a:	647b      	str	r3, [r7, #68]	@ 0x44
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	330c      	adds	r3, #12
 8003942:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003944:	61ba      	str	r2, [r7, #24]
 8003946:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003948:	6979      	ldr	r1, [r7, #20]
 800394a:	69ba      	ldr	r2, [r7, #24]
 800394c:	e841 2300 	strex	r3, r2, [r1]
 8003950:	613b      	str	r3, [r7, #16]
   return(result);
 8003952:	693b      	ldr	r3, [r7, #16]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d1e5      	bne.n	8003924 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2220      	movs	r2, #32
 800395c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2200      	movs	r2, #0
 8003964:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003966:	bf00      	nop
 8003968:	3754      	adds	r7, #84	@ 0x54
 800396a:	46bd      	mov	sp, r7
 800396c:	bc80      	pop	{r7}
 800396e:	4770      	bx	lr

08003970 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b084      	sub	sp, #16
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	691b      	ldr	r3, [r3, #16]
 800397e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	68da      	ldr	r2, [r3, #12]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	430a      	orrs	r2, r1
 800398c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	689a      	ldr	r2, [r3, #8]
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	691b      	ldr	r3, [r3, #16]
 8003996:	431a      	orrs	r2, r3
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	695b      	ldr	r3, [r3, #20]
 800399c:	4313      	orrs	r3, r2
 800399e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	68db      	ldr	r3, [r3, #12]
 80039a6:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80039aa:	f023 030c 	bic.w	r3, r3, #12
 80039ae:	687a      	ldr	r2, [r7, #4]
 80039b0:	6812      	ldr	r2, [r2, #0]
 80039b2:	68b9      	ldr	r1, [r7, #8]
 80039b4:	430b      	orrs	r3, r1
 80039b6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	695b      	ldr	r3, [r3, #20]
 80039be:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	699a      	ldr	r2, [r3, #24]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	430a      	orrs	r2, r1
 80039cc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4a2c      	ldr	r2, [pc, #176]	@ (8003a84 <UART_SetConfig+0x114>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d103      	bne.n	80039e0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80039d8:	f7ff f9e0 	bl	8002d9c <HAL_RCC_GetPCLK2Freq>
 80039dc:	60f8      	str	r0, [r7, #12]
 80039de:	e002      	b.n	80039e6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80039e0:	f7ff f9c8 	bl	8002d74 <HAL_RCC_GetPCLK1Freq>
 80039e4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80039e6:	68fa      	ldr	r2, [r7, #12]
 80039e8:	4613      	mov	r3, r2
 80039ea:	009b      	lsls	r3, r3, #2
 80039ec:	4413      	add	r3, r2
 80039ee:	009a      	lsls	r2, r3, #2
 80039f0:	441a      	add	r2, r3
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	009b      	lsls	r3, r3, #2
 80039f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80039fc:	4a22      	ldr	r2, [pc, #136]	@ (8003a88 <UART_SetConfig+0x118>)
 80039fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003a02:	095b      	lsrs	r3, r3, #5
 8003a04:	0119      	lsls	r1, r3, #4
 8003a06:	68fa      	ldr	r2, [r7, #12]
 8003a08:	4613      	mov	r3, r2
 8003a0a:	009b      	lsls	r3, r3, #2
 8003a0c:	4413      	add	r3, r2
 8003a0e:	009a      	lsls	r2, r3, #2
 8003a10:	441a      	add	r2, r3
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	685b      	ldr	r3, [r3, #4]
 8003a16:	009b      	lsls	r3, r3, #2
 8003a18:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a1c:	4b1a      	ldr	r3, [pc, #104]	@ (8003a88 <UART_SetConfig+0x118>)
 8003a1e:	fba3 0302 	umull	r0, r3, r3, r2
 8003a22:	095b      	lsrs	r3, r3, #5
 8003a24:	2064      	movs	r0, #100	@ 0x64
 8003a26:	fb00 f303 	mul.w	r3, r0, r3
 8003a2a:	1ad3      	subs	r3, r2, r3
 8003a2c:	011b      	lsls	r3, r3, #4
 8003a2e:	3332      	adds	r3, #50	@ 0x32
 8003a30:	4a15      	ldr	r2, [pc, #84]	@ (8003a88 <UART_SetConfig+0x118>)
 8003a32:	fba2 2303 	umull	r2, r3, r2, r3
 8003a36:	095b      	lsrs	r3, r3, #5
 8003a38:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003a3c:	4419      	add	r1, r3
 8003a3e:	68fa      	ldr	r2, [r7, #12]
 8003a40:	4613      	mov	r3, r2
 8003a42:	009b      	lsls	r3, r3, #2
 8003a44:	4413      	add	r3, r2
 8003a46:	009a      	lsls	r2, r3, #2
 8003a48:	441a      	add	r2, r3
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	009b      	lsls	r3, r3, #2
 8003a50:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a54:	4b0c      	ldr	r3, [pc, #48]	@ (8003a88 <UART_SetConfig+0x118>)
 8003a56:	fba3 0302 	umull	r0, r3, r3, r2
 8003a5a:	095b      	lsrs	r3, r3, #5
 8003a5c:	2064      	movs	r0, #100	@ 0x64
 8003a5e:	fb00 f303 	mul.w	r3, r0, r3
 8003a62:	1ad3      	subs	r3, r2, r3
 8003a64:	011b      	lsls	r3, r3, #4
 8003a66:	3332      	adds	r3, #50	@ 0x32
 8003a68:	4a07      	ldr	r2, [pc, #28]	@ (8003a88 <UART_SetConfig+0x118>)
 8003a6a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a6e:	095b      	lsrs	r3, r3, #5
 8003a70:	f003 020f 	and.w	r2, r3, #15
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	440a      	add	r2, r1
 8003a7a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003a7c:	bf00      	nop
 8003a7e:	3710      	adds	r7, #16
 8003a80:	46bd      	mov	sp, r7
 8003a82:	bd80      	pop	{r7, pc}
 8003a84:	40013800 	.word	0x40013800
 8003a88:	51eb851f 	.word	0x51eb851f

08003a8c <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	b085      	sub	sp, #20
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	60f8      	str	r0, [r7, #12]
 8003a94:	60b9      	str	r1, [r7, #8]
 8003a96:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */
    pxTopOfStack--;                                                      /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	3b04      	subs	r3, #4
 8003a9c:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003aa4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	3b04      	subs	r3, #4
 8003aaa:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8003aac:	68bb      	ldr	r3, [r7, #8]
 8003aae:	f023 0201 	bic.w	r2, r3, #1
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	3b04      	subs	r3, #4
 8003aba:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8003abc:	4a08      	ldr	r2, [pc, #32]	@ (8003ae0 <pxPortInitialiseStack+0x54>)
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 5;                                                   /* R12, R3, R2 and R1. */
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	3b14      	subs	r3, #20
 8003ac6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters;                        /* R0 */
 8003ac8:	687a      	ldr	r2, [r7, #4]
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 8;                                                   /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	3b20      	subs	r3, #32
 8003ad2:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
}
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	3714      	adds	r7, #20
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bc80      	pop	{r7}
 8003ade:	4770      	bx	lr
 8003ae0:	08003ae5 	.word	0x08003ae5

08003ae4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	b083      	sub	sp, #12
 8003ae8:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0UL;
 8003aea:	2300      	movs	r3, #0
 8003aec:	603b      	str	r3, [r7, #0]

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
    uint32_t ulNewBASEPRI;

    __asm volatile
 8003aee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003af2:	f383 8811 	msr	BASEPRI, r3
 8003af6:	f3bf 8f6f 	isb	sy
 8003afa:	f3bf 8f4f 	dsb	sy
 8003afe:	607b      	str	r3, [r7, #4]
        "   msr basepri, %0                                         \n" \
        "   isb                                                     \n" \
        "   dsb                                                     \n" \
        : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );
}
 8003b00:	bf00      	nop
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8003b02:	bf00      	nop
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d0fc      	beq.n	8003b04 <prvTaskExitError+0x20>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8003b0a:	bf00      	nop
 8003b0c:	bf00      	nop
 8003b0e:	370c      	adds	r7, #12
 8003b10:	46bd      	mov	sp, r7
 8003b12:	bc80      	pop	{r7}
 8003b14:	4770      	bx	lr
	...

08003b20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8003b20:	4b07      	ldr	r3, [pc, #28]	@ (8003b40 <pxCurrentTCBConst2>)
 8003b22:	6819      	ldr	r1, [r3, #0]
 8003b24:	6808      	ldr	r0, [r1, #0]
 8003b26:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003b2a:	f380 8809 	msr	PSP, r0
 8003b2e:	f3bf 8f6f 	isb	sy
 8003b32:	f04f 0000 	mov.w	r0, #0
 8003b36:	f380 8811 	msr	BASEPRI, r0
 8003b3a:	f04e 0e0d 	orr.w	lr, lr, #13
 8003b3e:	4770      	bx	lr

08003b40 <pxCurrentTCBConst2>:
 8003b40:	20003144 	.word	0x20003144
        "   bx r14                          \n"
        "                                   \n"
        "   .align 4                        \n"
        "pxCurrentTCBConst2: .word pxCurrentTCB             \n"
        );
}
 8003b44:	bf00      	nop
 8003b46:	bf00      	nop

08003b48 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
    __asm volatile (
 8003b48:	4806      	ldr	r0, [pc, #24]	@ (8003b64 <prvPortStartFirstTask+0x1c>)
 8003b4a:	6800      	ldr	r0, [r0, #0]
 8003b4c:	6800      	ldr	r0, [r0, #0]
 8003b4e:	f380 8808 	msr	MSP, r0
 8003b52:	b662      	cpsie	i
 8003b54:	b661      	cpsie	f
 8003b56:	f3bf 8f4f 	dsb	sy
 8003b5a:	f3bf 8f6f 	isb	sy
 8003b5e:	df00      	svc	0
 8003b60:	bf00      	nop
 8003b62:	0000      	.short	0x0000
 8003b64:	e000ed08 	.word	0xe000ed08
        " isb                   \n"
        " svc 0                 \n" /* System call to start first task. */
        " nop                   \n"
        " .ltorg                \n"
        );
}
 8003b68:	bf00      	nop
 8003b6a:	bf00      	nop

08003b6c <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b082      	sub	sp, #8
 8003b70:	af00      	add	r7, sp, #0
     * configCHECK_HANDLER_INSTALLATION to 0 in their FreeRTOSConfig.h. Direct
     * routing, which is validated here when configCHECK_HANDLER_INSTALLATION
     * is 1, should be preferred when possible. */
    #if ( configCHECK_HANDLER_INSTALLATION == 1 )
    {
        const portISR_t * const pxVectorTable = portSCB_VTOR_REG;
 8003b72:	4b11      	ldr	r3, [pc, #68]	@ (8003bb8 <xPortStartScheduler+0x4c>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	607b      	str	r3, [r7, #4]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts, and make SVCall
     * the highest priority. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8003b78:	4b10      	ldr	r3, [pc, #64]	@ (8003bbc <xPortStartScheduler+0x50>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a0f      	ldr	r2, [pc, #60]	@ (8003bbc <xPortStartScheduler+0x50>)
 8003b7e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003b82:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8003b84:	4b0d      	ldr	r3, [pc, #52]	@ (8003bbc <xPortStartScheduler+0x50>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a0c      	ldr	r2, [pc, #48]	@ (8003bbc <xPortStartScheduler+0x50>)
 8003b8a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003b8e:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR2_REG = 0;
 8003b90:	4b0b      	ldr	r3, [pc, #44]	@ (8003bc0 <xPortStartScheduler+0x54>)
 8003b92:	2200      	movs	r2, #0
 8003b94:	601a      	str	r2, [r3, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8003b96:	f000 f891 	bl	8003cbc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8003b9a:	4b0a      	ldr	r3, [pc, #40]	@ (8003bc4 <xPortStartScheduler+0x58>)
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	601a      	str	r2, [r3, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8003ba0:	f7ff ffd2 	bl	8003b48 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8003ba4:	f001 f8b4 	bl	8004d10 <vTaskSwitchContext>
    prvTaskExitError();
 8003ba8:	f7ff ff9c 	bl	8003ae4 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8003bac:	2300      	movs	r3, #0
}
 8003bae:	4618      	mov	r0, r3
 8003bb0:	3708      	adds	r7, #8
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bd80      	pop	{r7, pc}
 8003bb6:	bf00      	nop
 8003bb8:	e000ed08 	.word	0xe000ed08
 8003bbc:	e000ed20 	.word	0xe000ed20
 8003bc0:	e000ed1c 	.word	0xe000ed1c
 8003bc4:	2000040c 	.word	0x2000040c

08003bc8 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003bc8:	b480      	push	{r7}
 8003bca:	b083      	sub	sp, #12
 8003bcc:	af00      	add	r7, sp, #0
    __asm volatile
 8003bce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bd2:	f383 8811 	msr	BASEPRI, r3
 8003bd6:	f3bf 8f6f 	isb	sy
 8003bda:	f3bf 8f4f 	dsb	sy
 8003bde:	607b      	str	r3, [r7, #4]
}
 8003be0:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8003be2:	4b05      	ldr	r3, [pc, #20]	@ (8003bf8 <vPortEnterCritical+0x30>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	3301      	adds	r3, #1
 8003be8:	4a03      	ldr	r2, [pc, #12]	@ (8003bf8 <vPortEnterCritical+0x30>)
 8003bea:	6013      	str	r3, [r2, #0]
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
    }
}
 8003bec:	bf00      	nop
 8003bee:	370c      	adds	r7, #12
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	bc80      	pop	{r7}
 8003bf4:	4770      	bx	lr
 8003bf6:	bf00      	nop
 8003bf8:	2000040c 	.word	0x2000040c

08003bfc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	b083      	sub	sp, #12
 8003c00:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
    uxCriticalNesting--;
 8003c02:	4b0a      	ldr	r3, [pc, #40]	@ (8003c2c <vPortExitCritical+0x30>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	3b01      	subs	r3, #1
 8003c08:	4a08      	ldr	r2, [pc, #32]	@ (8003c2c <vPortExitCritical+0x30>)
 8003c0a:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8003c0c:	4b07      	ldr	r3, [pc, #28]	@ (8003c2c <vPortExitCritical+0x30>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d105      	bne.n	8003c20 <vPortExitCritical+0x24>
 8003c14:	2300      	movs	r3, #0
 8003c16:	607b      	str	r3, [r7, #4]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
    __asm volatile
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	f383 8811 	msr	BASEPRI, r3
    (
        "   msr basepri, %0 " ::"r" ( ulNewMaskValue ) : "memory"
    );
}
 8003c1e:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8003c20:	bf00      	nop
 8003c22:	370c      	adds	r7, #12
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bc80      	pop	{r7}
 8003c28:	4770      	bx	lr
 8003c2a:	bf00      	nop
 8003c2c:	2000040c 	.word	0x2000040c

08003c30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8003c30:	f3ef 8009 	mrs	r0, PSP
 8003c34:	f3bf 8f6f 	isb	sy
 8003c38:	4b0d      	ldr	r3, [pc, #52]	@ (8003c70 <pxCurrentTCBConst>)
 8003c3a:	681a      	ldr	r2, [r3, #0]
 8003c3c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003c40:	6010      	str	r0, [r2, #0]
 8003c42:	e92d 4008 	stmdb	sp!, {r3, lr}
 8003c46:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8003c4a:	f380 8811 	msr	BASEPRI, r0
 8003c4e:	f001 f85f 	bl	8004d10 <vTaskSwitchContext>
 8003c52:	f04f 0000 	mov.w	r0, #0
 8003c56:	f380 8811 	msr	BASEPRI, r0
 8003c5a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8003c5e:	6819      	ldr	r1, [r3, #0]
 8003c60:	6808      	ldr	r0, [r1, #0]
 8003c62:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003c66:	f380 8809 	msr	PSP, r0
 8003c6a:	f3bf 8f6f 	isb	sy
 8003c6e:	4770      	bx	lr

08003c70 <pxCurrentTCBConst>:
 8003c70:	20003144 	.word	0x20003144
        "                                       \n"
        "   .align 4                            \n"
        "pxCurrentTCBConst: .word pxCurrentTCB  \n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8003c74:	bf00      	nop
 8003c76:	bf00      	nop

08003c78 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b082      	sub	sp, #8
 8003c7c:	af00      	add	r7, sp, #0
    __asm volatile
 8003c7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c82:	f383 8811 	msr	BASEPRI, r3
 8003c86:	f3bf 8f6f 	isb	sy
 8003c8a:	f3bf 8f4f 	dsb	sy
 8003c8e:	607b      	str	r3, [r7, #4]
}
 8003c90:	bf00      	nop
     * known. */
    portDISABLE_INTERRUPTS();
    traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8003c92:	f000 ff35 	bl	8004b00 <xTaskIncrementTick>
 8003c96:	4603      	mov	r3, r0
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d003      	beq.n	8003ca4 <xPortSysTickHandler+0x2c>
        {
            traceISR_EXIT_TO_SCHEDULER();

            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003c9c:	4b06      	ldr	r3, [pc, #24]	@ (8003cb8 <xPortSysTickHandler+0x40>)
 8003c9e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003ca2:	601a      	str	r2, [r3, #0]
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	603b      	str	r3, [r7, #0]
    __asm volatile
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	f383 8811 	msr	BASEPRI, r3
}
 8003cae:	bf00      	nop
        {
            traceISR_EXIT();
        }
    }
    portENABLE_INTERRUPTS();
}
 8003cb0:	bf00      	nop
 8003cb2:	3708      	adds	r7, #8
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bd80      	pop	{r7, pc}
 8003cb8:	e000ed04 	.word	0xe000ed04

08003cbc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003cc0:	4b07      	ldr	r3, [pc, #28]	@ (8003ce0 <vPortSetupTimerInterrupt+0x24>)
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003cc6:	4b07      	ldr	r3, [pc, #28]	@ (8003ce4 <vPortSetupTimerInterrupt+0x28>)
 8003cc8:	2200      	movs	r2, #0
 8003cca:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003ccc:	4b06      	ldr	r3, [pc, #24]	@ (8003ce8 <vPortSetupTimerInterrupt+0x2c>)
 8003cce:	4a07      	ldr	r2, [pc, #28]	@ (8003cec <vPortSetupTimerInterrupt+0x30>)
 8003cd0:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003cd2:	4b03      	ldr	r3, [pc, #12]	@ (8003ce0 <vPortSetupTimerInterrupt+0x24>)
 8003cd4:	2207      	movs	r2, #7
 8003cd6:	601a      	str	r2, [r3, #0]
}
 8003cd8:	bf00      	nop
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bc80      	pop	{r7}
 8003cde:	4770      	bx	lr
 8003ce0:	e000e010 	.word	0xe000e010
 8003ce4:	e000e018 	.word	0xe000e018
 8003ce8:	e000e014 	.word	0xe000e014
 8003cec:	0001193f 	.word	0x0001193f

08003cf0 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = ( size_t ) 0U;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b088      	sub	sp, #32
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	617b      	str	r3, [r7, #20]
    size_t xAdditionalRequiredSize;

    if( xWantedSize > 0 )
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d022      	beq.n	8003d48 <pvPortMalloc+0x58>
    {
        /* The wanted size must be increased so it can contain a BlockLink_t
         * structure in addition to the requested amount of bytes. */
        if( heapADD_WILL_OVERFLOW( xWantedSize, xHeapStructSize ) == 0 )
 8003d02:	2308      	movs	r3, #8
 8003d04:	43db      	mvns	r3, r3
 8003d06:	687a      	ldr	r2, [r7, #4]
 8003d08:	429a      	cmp	r2, r3
 8003d0a:	d81b      	bhi.n	8003d44 <pvPortMalloc+0x54>
        {
            xWantedSize += xHeapStructSize;
 8003d0c:	2208      	movs	r2, #8
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	4413      	add	r3, r2
 8003d12:	607b      	str	r3, [r7, #4]

            /* Ensure that blocks are always aligned to the required number
             * of bytes. */
            if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	f003 0307 	and.w	r3, r3, #7
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d014      	beq.n	8003d48 <pvPortMalloc+0x58>
            {
                /* Byte alignment required. */
                xAdditionalRequiredSize = portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	f003 0307 	and.w	r3, r3, #7
 8003d24:	f1c3 0308 	rsb	r3, r3, #8
 8003d28:	613b      	str	r3, [r7, #16]

                if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8003d2a:	693b      	ldr	r3, [r7, #16]
 8003d2c:	43db      	mvns	r3, r3
 8003d2e:	687a      	ldr	r2, [r7, #4]
 8003d30:	429a      	cmp	r2, r3
 8003d32:	d804      	bhi.n	8003d3e <pvPortMalloc+0x4e>
                {
                    xWantedSize += xAdditionalRequiredSize;
 8003d34:	687a      	ldr	r2, [r7, #4]
 8003d36:	693b      	ldr	r3, [r7, #16]
 8003d38:	4413      	add	r3, r2
 8003d3a:	607b      	str	r3, [r7, #4]
 8003d3c:	e004      	b.n	8003d48 <pvPortMalloc+0x58>
                }
                else
                {
                    xWantedSize = 0;
 8003d3e:	2300      	movs	r3, #0
 8003d40:	607b      	str	r3, [r7, #4]
 8003d42:	e001      	b.n	8003d48 <pvPortMalloc+0x58>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            xWantedSize = 0;
 8003d44:	2300      	movs	r3, #0
 8003d46:	607b      	str	r3, [r7, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    vTaskSuspendAll();
 8003d48:	f000 fd46 	bl	80047d8 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8003d4c:	4b3a      	ldr	r3, [pc, #232]	@ (8003e38 <pvPortMalloc+0x148>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d101      	bne.n	8003d58 <pvPortMalloc+0x68>
        {
            prvHeapInit();
 8003d54:	f000 f8b8 	bl	8003ec8 <prvHeapInit>

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	db64      	blt.n	8003e28 <pvPortMalloc+0x138>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d061      	beq.n	8003e28 <pvPortMalloc+0x138>
 8003d64:	4b35      	ldr	r3, [pc, #212]	@ (8003e3c <pvPortMalloc+0x14c>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	687a      	ldr	r2, [r7, #4]
 8003d6a:	429a      	cmp	r2, r3
 8003d6c:	d85c      	bhi.n	8003e28 <pvPortMalloc+0x138>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8003d6e:	4b34      	ldr	r3, [pc, #208]	@ (8003e40 <pvPortMalloc+0x150>)
 8003d70:	61bb      	str	r3, [r7, #24]
                pxBlock = heapPROTECT_BLOCK_POINTER( xStart.pxNextFreeBlock );
 8003d72:	4b33      	ldr	r3, [pc, #204]	@ (8003e40 <pvPortMalloc+0x150>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	61fb      	str	r3, [r7, #28]
                heapVALIDATE_BLOCK_POINTER( pxBlock );

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
 8003d78:	e004      	b.n	8003d84 <pvPortMalloc+0x94>
                {
                    pxPreviousBlock = pxBlock;
 8003d7a:	69fb      	ldr	r3, [r7, #28]
 8003d7c:	61bb      	str	r3, [r7, #24]
                    pxBlock = heapPROTECT_BLOCK_POINTER( pxBlock->pxNextFreeBlock );
 8003d7e:	69fb      	ldr	r3, [r7, #28]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	61fb      	str	r3, [r7, #28]
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
 8003d84:	69fb      	ldr	r3, [r7, #28]
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	687a      	ldr	r2, [r7, #4]
 8003d8a:	429a      	cmp	r2, r3
 8003d8c:	d903      	bls.n	8003d96 <pvPortMalloc+0xa6>
 8003d8e:	69fb      	ldr	r3, [r7, #28]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d1f1      	bne.n	8003d7a <pvPortMalloc+0x8a>
                    heapVALIDATE_BLOCK_POINTER( pxBlock );
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8003d96:	4b28      	ldr	r3, [pc, #160]	@ (8003e38 <pvPortMalloc+0x148>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	69fa      	ldr	r2, [r7, #28]
 8003d9c:	429a      	cmp	r2, r3
 8003d9e:	d043      	beq.n	8003e28 <pvPortMalloc+0x138>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxPreviousBlock->pxNextFreeBlock ) ) + xHeapStructSize );
 8003da0:	69bb      	ldr	r3, [r7, #24]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	2208      	movs	r2, #8
 8003da6:	4413      	add	r3, r2
 8003da8:	617b      	str	r3, [r7, #20]
                    heapVALIDATE_BLOCK_POINTER( pvReturn );

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003daa:	69fb      	ldr	r3, [r7, #28]
 8003dac:	681a      	ldr	r2, [r3, #0]
 8003dae:	69bb      	ldr	r3, [r7, #24]
 8003db0:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    configASSERT( heapSUBTRACT_WILL_UNDERFLOW( pxBlock->xBlockSize, xWantedSize ) == 0 );

                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003db2:	69fb      	ldr	r3, [r7, #28]
 8003db4:	685a      	ldr	r2, [r3, #4]
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	1ad2      	subs	r2, r2, r3
 8003dba:	2308      	movs	r3, #8
 8003dbc:	005b      	lsls	r3, r3, #1
 8003dbe:	429a      	cmp	r2, r3
 8003dc0:	d913      	bls.n	8003dea <pvPortMalloc+0xfa>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003dc2:	69fa      	ldr	r2, [r7, #28]
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	4413      	add	r3, r2
 8003dc8:	60fb      	str	r3, [r7, #12]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003dca:	69fb      	ldr	r3, [r7, #28]
 8003dcc:	685a      	ldr	r2, [r3, #4]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	1ad2      	subs	r2, r2, r3
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8003dd6:	69fb      	ldr	r3, [r7, #28]
 8003dd8:	687a      	ldr	r2, [r7, #4]
 8003dda:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        pxNewBlockLink->pxNextFreeBlock = pxPreviousBlock->pxNextFreeBlock;
 8003ddc:	69bb      	ldr	r3, [r7, #24]
 8003dde:	681a      	ldr	r2, [r3, #0]
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	601a      	str	r2, [r3, #0]
                        pxPreviousBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxNewBlockLink );
 8003de4:	69bb      	ldr	r3, [r7, #24]
 8003de6:	68fa      	ldr	r2, [r7, #12]
 8003de8:	601a      	str	r2, [r3, #0]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003dea:	4b14      	ldr	r3, [pc, #80]	@ (8003e3c <pvPortMalloc+0x14c>)
 8003dec:	681a      	ldr	r2, [r3, #0]
 8003dee:	69fb      	ldr	r3, [r7, #28]
 8003df0:	685b      	ldr	r3, [r3, #4]
 8003df2:	1ad3      	subs	r3, r2, r3
 8003df4:	4a11      	ldr	r2, [pc, #68]	@ (8003e3c <pvPortMalloc+0x14c>)
 8003df6:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003df8:	4b10      	ldr	r3, [pc, #64]	@ (8003e3c <pvPortMalloc+0x14c>)
 8003dfa:	681a      	ldr	r2, [r3, #0]
 8003dfc:	4b11      	ldr	r3, [pc, #68]	@ (8003e44 <pvPortMalloc+0x154>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	429a      	cmp	r2, r3
 8003e02:	d203      	bcs.n	8003e0c <pvPortMalloc+0x11c>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003e04:	4b0d      	ldr	r3, [pc, #52]	@ (8003e3c <pvPortMalloc+0x14c>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4a0e      	ldr	r2, [pc, #56]	@ (8003e44 <pvPortMalloc+0x154>)
 8003e0a:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8003e0c:	69fb      	ldr	r3, [r7, #28]
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003e14:	69fb      	ldr	r3, [r7, #28]
 8003e16:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8003e18:	69fb      	ldr	r3, [r7, #28]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8003e1e:	4b0a      	ldr	r3, [pc, #40]	@ (8003e48 <pvPortMalloc+0x158>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	3301      	adds	r3, #1
 8003e24:	4a08      	ldr	r2, [pc, #32]	@ (8003e48 <pvPortMalloc+0x158>)
 8003e26:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8003e28:	f000 fce4 	bl	80047f4 <xTaskResumeAll>
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
    return pvReturn;
 8003e2c:	697b      	ldr	r3, [r7, #20]
}
 8003e2e:	4618      	mov	r0, r3
 8003e30:	3720      	adds	r7, #32
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bd80      	pop	{r7, pc}
 8003e36:	bf00      	nop
 8003e38:	20003130 	.word	0x20003130
 8003e3c:	20003134 	.word	0x20003134
 8003e40:	20003128 	.word	0x20003128
 8003e44:	20003138 	.word	0x20003138
 8003e48:	2000313c 	.word	0x2000313c

08003e4c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b084      	sub	sp, #16
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	60fb      	str	r3, [r7, #12]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d02b      	beq.n	8003eb6 <vPortFree+0x6a>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8003e5e:	2308      	movs	r3, #8
 8003e60:	425b      	negs	r3, r3
 8003e62:	68fa      	ldr	r2, [r7, #12]
 8003e64:	4413      	add	r3, r2
 8003e66:	60fb      	str	r3, [r7, #12]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	60bb      	str	r3, [r7, #8]

        heapVALIDATE_BLOCK_POINTER( pxLink );
        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
        configASSERT( pxLink->pxNextFreeBlock == NULL );

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8003e6c:	68bb      	ldr	r3, [r7, #8]
 8003e6e:	685b      	ldr	r3, [r3, #4]
 8003e70:	0fdb      	lsrs	r3, r3, #31
 8003e72:	f003 0301 	and.w	r3, r3, #1
 8003e76:	b2db      	uxtb	r3, r3
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d01c      	beq.n	8003eb6 <vPortFree+0x6a>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d118      	bne.n	8003eb6 <vPortFree+0x6a>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003e8c:	68bb      	ldr	r3, [r7, #8]
 8003e8e:	605a      	str	r2, [r3, #4]
                        ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                    }
                }
                #endif

                vTaskSuspendAll();
 8003e90:	f000 fca2 	bl	80047d8 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8003e94:	68bb      	ldr	r3, [r7, #8]
 8003e96:	685a      	ldr	r2, [r3, #4]
 8003e98:	4b09      	ldr	r3, [pc, #36]	@ (8003ec0 <vPortFree+0x74>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4413      	add	r3, r2
 8003e9e:	4a08      	ldr	r2, [pc, #32]	@ (8003ec0 <vPortFree+0x74>)
 8003ea0:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003ea2:	68b8      	ldr	r0, [r7, #8]
 8003ea4:	f000 f86a 	bl	8003f7c <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8003ea8:	4b06      	ldr	r3, [pc, #24]	@ (8003ec4 <vPortFree+0x78>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	3301      	adds	r3, #1
 8003eae:	4a05      	ldr	r2, [pc, #20]	@ (8003ec4 <vPortFree+0x78>)
 8003eb0:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8003eb2:	f000 fc9f 	bl	80047f4 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8003eb6:	bf00      	nop
 8003eb8:	3710      	adds	r7, #16
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bd80      	pop	{r7, pc}
 8003ebe:	bf00      	nop
 8003ec0:	20003134 	.word	0x20003134
 8003ec4:	20003140 	.word	0x20003140

08003ec8 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8003ec8:	b480      	push	{r7}
 8003eca:	b085      	sub	sp, #20
 8003ecc:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    portPOINTER_SIZE_TYPE uxStartAddress, uxEndAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003ece:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8003ed2:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxStartAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8003ed4:	4b24      	ldr	r3, [pc, #144]	@ (8003f68 <prvHeapInit+0xa0>)
 8003ed6:	60fb      	str	r3, [r7, #12]

    if( ( uxStartAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	f003 0307 	and.w	r3, r3, #7
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d00c      	beq.n	8003efc <prvHeapInit+0x34>
    {
        uxStartAddress += ( portBYTE_ALIGNMENT - 1 );
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	3307      	adds	r3, #7
 8003ee6:	60fb      	str	r3, [r7, #12]
        uxStartAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	f023 0307 	bic.w	r3, r3, #7
 8003eee:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= ( size_t ) ( uxStartAddress - ( portPOINTER_SIZE_TYPE ) ucHeap );
 8003ef0:	68ba      	ldr	r2, [r7, #8]
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	1ad3      	subs	r3, r2, r3
 8003ef6:	4a1c      	ldr	r2, [pc, #112]	@ (8003f68 <prvHeapInit+0xa0>)
 8003ef8:	4413      	add	r3, r2
 8003efa:	60bb      	str	r3, [r7, #8]
    }
    #endif

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) heapPROTECT_BLOCK_POINTER( uxStartAddress );
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	4a1b      	ldr	r2, [pc, #108]	@ (8003f6c <prvHeapInit+0xa4>)
 8003f00:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8003f02:	4b1a      	ldr	r3, [pc, #104]	@ (8003f6c <prvHeapInit+0xa4>)
 8003f04:	2200      	movs	r2, #0
 8003f06:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxEndAddress = uxStartAddress + ( portPOINTER_SIZE_TYPE ) xTotalHeapSize;
 8003f08:	68fa      	ldr	r2, [r7, #12]
 8003f0a:	68bb      	ldr	r3, [r7, #8]
 8003f0c:	4413      	add	r3, r2
 8003f0e:	607b      	str	r3, [r7, #4]
    uxEndAddress -= ( portPOINTER_SIZE_TYPE ) xHeapStructSize;
 8003f10:	2208      	movs	r2, #8
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	1a9b      	subs	r3, r3, r2
 8003f16:	607b      	str	r3, [r7, #4]
    uxEndAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	f023 0307 	bic.w	r3, r3, #7
 8003f1e:	607b      	str	r3, [r7, #4]
    pxEnd = ( BlockLink_t * ) uxEndAddress;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	4a13      	ldr	r2, [pc, #76]	@ (8003f70 <prvHeapInit+0xa8>)
 8003f24:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8003f26:	4b12      	ldr	r3, [pc, #72]	@ (8003f70 <prvHeapInit+0xa8>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( NULL );
 8003f2e:	4b10      	ldr	r3, [pc, #64]	@ (8003f70 <prvHeapInit+0xa8>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	2200      	movs	r2, #0
 8003f34:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) uxStartAddress;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxEndAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	687a      	ldr	r2, [r7, #4]
 8003f3e:	1ad2      	subs	r2, r2, r3
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 8003f44:	4b0a      	ldr	r3, [pc, #40]	@ (8003f70 <prvHeapInit+0xa8>)
 8003f46:	681a      	ldr	r2, [r3, #0]
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	4a08      	ldr	r2, [pc, #32]	@ (8003f74 <prvHeapInit+0xac>)
 8003f52:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	4a07      	ldr	r2, [pc, #28]	@ (8003f78 <prvHeapInit+0xb0>)
 8003f5a:	6013      	str	r3, [r2, #0]
}
 8003f5c:	bf00      	nop
 8003f5e:	3714      	adds	r7, #20
 8003f60:	46bd      	mov	sp, r7
 8003f62:	bc80      	pop	{r7}
 8003f64:	4770      	bx	lr
 8003f66:	bf00      	nop
 8003f68:	20000928 	.word	0x20000928
 8003f6c:	20003128 	.word	0x20003128
 8003f70:	20003130 	.word	0x20003130
 8003f74:	20003138 	.word	0x20003138
 8003f78:	20003134 	.word	0x20003134

08003f7c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	b085      	sub	sp, #20
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) < pxBlockToInsert; pxIterator = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 8003f84:	4b27      	ldr	r3, [pc, #156]	@ (8004024 <prvInsertBlockIntoFreeList+0xa8>)
 8003f86:	60fb      	str	r3, [r7, #12]
 8003f88:	e002      	b.n	8003f90 <prvInsertBlockIntoFreeList+0x14>
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	60fb      	str	r3, [r7, #12]
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	687a      	ldr	r2, [r7, #4]
 8003f96:	429a      	cmp	r2, r3
 8003f98:	d8f7      	bhi.n	8003f8a <prvInsertBlockIntoFreeList+0xe>
        heapVALIDATE_BLOCK_POINTER( pxIterator );
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	68ba      	ldr	r2, [r7, #8]
 8003fa4:	4413      	add	r3, r2
 8003fa6:	687a      	ldr	r2, [r7, #4]
 8003fa8:	429a      	cmp	r2, r3
 8003faa:	d108      	bne.n	8003fbe <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	685a      	ldr	r2, [r3, #4]
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	441a      	add	r2, r3
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	68ba      	ldr	r2, [r7, #8]
 8003fc8:	441a      	add	r2, r3
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	429a      	cmp	r2, r3
 8003fd0:	d118      	bne.n	8004004 <prvInsertBlockIntoFreeList+0x88>
    {
        if( heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) != pxEnd )
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681a      	ldr	r2, [r3, #0]
 8003fd6:	4b14      	ldr	r3, [pc, #80]	@ (8004028 <prvInsertBlockIntoFreeList+0xac>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	429a      	cmp	r2, r3
 8003fdc:	d00d      	beq.n	8003ffa <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->xBlockSize;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	685a      	ldr	r2, [r3, #4]
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	441a      	add	r2, r3
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->pxNextFreeBlock;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	681a      	ldr	r2, [r3, #0]
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	601a      	str	r2, [r3, #0]
 8003ff8:	e008      	b.n	800400c <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 8003ffa:	4b0b      	ldr	r3, [pc, #44]	@ (8004028 <prvInsertBlockIntoFreeList+0xac>)
 8003ffc:	681a      	ldr	r2, [r3, #0]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	601a      	str	r2, [r3, #0]
 8004002:	e003      	b.n	800400c <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681a      	ldr	r2, [r3, #0]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 800400c:	68fa      	ldr	r2, [r7, #12]
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	429a      	cmp	r2, r3
 8004012:	d002      	beq.n	800401a <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxBlockToInsert );
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	687a      	ldr	r2, [r7, #4]
 8004018:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800401a:	bf00      	nop
 800401c:	3714      	adds	r7, #20
 800401e:	46bd      	mov	sp, r7
 8004020:	bc80      	pop	{r7}
 8004022:	4770      	bx	lr
 8004024:	20003128 	.word	0x20003128
 8004028:	20003130 	.word	0x20003130

0800402c <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800402c:	b480      	push	{r7}
 800402e:	b083      	sub	sp, #12
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialise( pxList );

    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	f103 0208 	add.w	r2, r3, #8
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	f04f 32ff 	mov.w	r2, #4294967295
 8004044:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	f103 0208 	add.w	r2, r3, #8
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	f103 0208 	add.w	r2, r3, #8
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2200      	movs	r2, #0
 800405e:	601a      	str	r2, [r3, #0]
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );

    traceRETURN_vListInitialise();
}
 8004060:	bf00      	nop
 8004062:	370c      	adds	r7, #12
 8004064:	46bd      	mov	sp, r7
 8004066:	bc80      	pop	{r7}
 8004068:	4770      	bx	lr

0800406a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800406a:	b480      	push	{r7}
 800406c:	b083      	sub	sp, #12
 800406e:	af00      	add	r7, sp, #0
 8004070:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialiseItem( pxItem );

    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2200      	movs	r2, #0
 8004076:	611a      	str	r2, [r3, #16]
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );

    traceRETURN_vListInitialiseItem();
}
 8004078:	bf00      	nop
 800407a:	370c      	adds	r7, #12
 800407c:	46bd      	mov	sp, r7
 800407e:	bc80      	pop	{r7}
 8004080:	4770      	bx	lr

08004082 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8004082:	b480      	push	{r7}
 8004084:	b085      	sub	sp, #20
 8004086:	af00      	add	r7, sp, #0
 8004088:	6078      	str	r0, [r7, #4]
 800408a:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	685b      	ldr	r3, [r3, #4]
 8004090:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	68fa      	ldr	r2, [r7, #12]
 8004096:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	689a      	ldr	r2, [r3, #8]
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	689b      	ldr	r3, [r3, #8]
 80040a4:	683a      	ldr	r2, [r7, #0]
 80040a6:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	683a      	ldr	r2, [r7, #0]
 80040ac:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	687a      	ldr	r2, [r7, #4]
 80040b2:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	1c5a      	adds	r2, r3, #1
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	601a      	str	r2, [r3, #0]

    traceRETURN_vListInsertEnd();
}
 80040be:	bf00      	nop
 80040c0:	3714      	adds	r7, #20
 80040c2:	46bd      	mov	sp, r7
 80040c4:	bc80      	pop	{r7}
 80040c6:	4770      	bx	lr

080040c8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80040c8:	b480      	push	{r7}
 80040ca:	b085      	sub	sp, #20
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
 80040d0:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040de:	d103      	bne.n	80040e8 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	691b      	ldr	r3, [r3, #16]
 80040e4:	60fb      	str	r3, [r7, #12]
 80040e6:	e00c      	b.n	8004102 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	3308      	adds	r3, #8
 80040ec:	60fb      	str	r3, [r7, #12]
 80040ee:	e002      	b.n	80040f6 <vListInsert+0x2e>
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	60fb      	str	r3, [r7, #12]
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	685b      	ldr	r3, [r3, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	68ba      	ldr	r2, [r7, #8]
 80040fe:	429a      	cmp	r2, r3
 8004100:	d2f6      	bcs.n	80040f0 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	685a      	ldr	r2, [r3, #4]
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	683a      	ldr	r2, [r7, #0]
 8004110:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	68fa      	ldr	r2, [r7, #12]
 8004116:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	683a      	ldr	r2, [r7, #0]
 800411c:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	687a      	ldr	r2, [r7, #4]
 8004122:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	1c5a      	adds	r2, r3, #1
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	601a      	str	r2, [r3, #0]

    traceRETURN_vListInsert();
}
 800412e:	bf00      	nop
 8004130:	3714      	adds	r7, #20
 8004132:	46bd      	mov	sp, r7
 8004134:	bc80      	pop	{r7}
 8004136:	4770      	bx	lr

08004138 <uxListRemove>:
/*-----------------------------------------------------------*/


UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004138:	b480      	push	{r7}
 800413a:	b085      	sub	sp, #20
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
    /* The list item knows which list it is in.  Obtain the list from the list
     * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	691b      	ldr	r3, [r3, #16]
 8004144:	60fb      	str	r3, [r7, #12]

    traceENTER_uxListRemove( pxItemToRemove );

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	685b      	ldr	r3, [r3, #4]
 800414a:	687a      	ldr	r2, [r7, #4]
 800414c:	6892      	ldr	r2, [r2, #8]
 800414e:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	689b      	ldr	r3, [r3, #8]
 8004154:	687a      	ldr	r2, [r7, #4]
 8004156:	6852      	ldr	r2, [r2, #4]
 8004158:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	687a      	ldr	r2, [r7, #4]
 8004160:	429a      	cmp	r2, r3
 8004162:	d103      	bne.n	800416c <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	689a      	ldr	r2, [r3, #8]
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2200      	movs	r2, #0
 8004170:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems - 1U );
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	1e5a      	subs	r2, r3, #1
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	601a      	str	r2, [r3, #0]

    traceRETURN_uxListRemove( pxList->uxNumberOfItems );

    return pxList->uxNumberOfItems;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
}
 8004180:	4618      	mov	r0, r3
 8004182:	3714      	adds	r7, #20
 8004184:	46bd      	mov	sp, r7
 8004186:	bc80      	pop	{r7}
 8004188:	4770      	bx	lr

0800418a <prvCreateTask>:
                                  const char * const pcName,
                                  const configSTACK_DEPTH_TYPE uxStackDepth,
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask )
    {
 800418a:	b580      	push	{r7, lr}
 800418c:	b08a      	sub	sp, #40	@ 0x28
 800418e:	af04      	add	r7, sp, #16
 8004190:	60f8      	str	r0, [r7, #12]
 8004192:	60b9      	str	r1, [r7, #8]
 8004194:	607a      	str	r2, [r7, #4]
 8004196:	603b      	str	r3, [r7, #0]

            /* Allocate space for the stack used by the task being created. */
            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxStack = pvPortMallocStack( ( ( ( size_t ) uxStackDepth ) * sizeof( StackType_t ) ) );
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	009b      	lsls	r3, r3, #2
 800419c:	4618      	mov	r0, r3
 800419e:	f7ff fda7 	bl	8003cf0 <pvPortMalloc>
 80041a2:	6138      	str	r0, [r7, #16]

            if( pxStack != NULL )
 80041a4:	693b      	ldr	r3, [r7, #16]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d013      	beq.n	80041d2 <prvCreateTask+0x48>
            {
                /* Allocate space for the TCB. */
                /* MISRA Ref 11.5.1 [Malloc memory assignment] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                /* coverity[misra_c_2012_rule_11_5_violation] */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 80041aa:	205c      	movs	r0, #92	@ 0x5c
 80041ac:	f7ff fda0 	bl	8003cf0 <pvPortMalloc>
 80041b0:	6178      	str	r0, [r7, #20]

                if( pxNewTCB != NULL )
 80041b2:	697b      	ldr	r3, [r7, #20]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d008      	beq.n	80041ca <prvCreateTask+0x40>
                {
                    ( void ) memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 80041b8:	225c      	movs	r2, #92	@ 0x5c
 80041ba:	2100      	movs	r1, #0
 80041bc:	6978      	ldr	r0, [r7, #20]
 80041be:	f002 f9b5 	bl	800652c <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 80041c2:	697b      	ldr	r3, [r7, #20]
 80041c4:	693a      	ldr	r2, [r7, #16]
 80041c6:	631a      	str	r2, [r3, #48]	@ 0x30
 80041c8:	e005      	b.n	80041d6 <prvCreateTask+0x4c>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 80041ca:	6938      	ldr	r0, [r7, #16]
 80041cc:	f7ff fe3e 	bl	8003e4c <vPortFree>
 80041d0:	e001      	b.n	80041d6 <prvCreateTask+0x4c>
                }
            }
            else
            {
                pxNewTCB = NULL;
 80041d2:	2300      	movs	r3, #0
 80041d4:	617b      	str	r3, [r7, #20]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80041d6:	697b      	ldr	r3, [r7, #20]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d00d      	beq.n	80041f8 <prvCreateTask+0x6e>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80041dc:	2300      	movs	r3, #0
 80041de:	9303      	str	r3, [sp, #12]
 80041e0:	697b      	ldr	r3, [r7, #20]
 80041e2:	9302      	str	r3, [sp, #8]
 80041e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041e6:	9301      	str	r3, [sp, #4]
 80041e8:	6a3b      	ldr	r3, [r7, #32]
 80041ea:	9300      	str	r3, [sp, #0]
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	687a      	ldr	r2, [r7, #4]
 80041f0:	68b9      	ldr	r1, [r7, #8]
 80041f2:	68f8      	ldr	r0, [r7, #12]
 80041f4:	f000 f828 	bl	8004248 <prvInitialiseNewTask>
        }

        return pxNewTCB;
 80041f8:	697b      	ldr	r3, [r7, #20]
    }
 80041fa:	4618      	mov	r0, r3
 80041fc:	3718      	adds	r7, #24
 80041fe:	46bd      	mov	sp, r7
 8004200:	bd80      	pop	{r7, pc}

08004202 <xTaskCreate>:
                            const char * const pcName,
                            const configSTACK_DEPTH_TYPE uxStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8004202:	b580      	push	{r7, lr}
 8004204:	b088      	sub	sp, #32
 8004206:	af02      	add	r7, sp, #8
 8004208:	60f8      	str	r0, [r7, #12]
 800420a:	60b9      	str	r1, [r7, #8]
 800420c:	607a      	str	r2, [r7, #4]
 800420e:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        BaseType_t xReturn;

        traceENTER_xTaskCreate( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );

        pxNewTCB = prvCreateTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );
 8004210:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004212:	9301      	str	r3, [sp, #4]
 8004214:	6a3b      	ldr	r3, [r7, #32]
 8004216:	9300      	str	r3, [sp, #0]
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	687a      	ldr	r2, [r7, #4]
 800421c:	68b9      	ldr	r1, [r7, #8]
 800421e:	68f8      	ldr	r0, [r7, #12]
 8004220:	f7ff ffb3 	bl	800418a <prvCreateTask>
 8004224:	6138      	str	r0, [r7, #16]

        if( pxNewTCB != NULL )
 8004226:	693b      	ldr	r3, [r7, #16]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d005      	beq.n	8004238 <xTaskCreate+0x36>
                /* Set the task's affinity before scheduling it. */
                pxNewTCB->uxCoreAffinityMask = configTASK_DEFAULT_CORE_AFFINITY;
            }
            #endif

            prvAddNewTaskToReadyList( pxNewTCB );
 800422c:	6938      	ldr	r0, [r7, #16]
 800422e:	f000 f87b 	bl	8004328 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8004232:	2301      	movs	r3, #1
 8004234:	617b      	str	r3, [r7, #20]
 8004236:	e002      	b.n	800423e <xTaskCreate+0x3c>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004238:	f04f 33ff 	mov.w	r3, #4294967295
 800423c:	617b      	str	r3, [r7, #20]
        }

        traceRETURN_xTaskCreate( xReturn );

        return xReturn;
 800423e:	697b      	ldr	r3, [r7, #20]
    }
 8004240:	4618      	mov	r0, r3
 8004242:	3718      	adds	r7, #24
 8004244:	46bd      	mov	sp, r7
 8004246:	bd80      	pop	{r7, pc}

08004248 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b086      	sub	sp, #24
 800424c:	af00      	add	r7, sp, #0
 800424e:	60f8      	str	r0, [r7, #12]
 8004250:	60b9      	str	r1, [r7, #8]
 8004252:	607a      	str	r2, [r7, #4]
 8004254:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) uxStackDepth * sizeof( StackType_t ) );
 8004256:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004258:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	009b      	lsls	r3, r3, #2
 800425e:	461a      	mov	r2, r3
 8004260:	21a5      	movs	r1, #165	@ 0xa5
 8004262:	f002 f963 	bl	800652c <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 ] );
 8004266:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004268:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004270:	3b01      	subs	r3, #1
 8004272:	009b      	lsls	r3, r3, #2
 8004274:	4413      	add	r3, r2
 8004276:	613b      	str	r3, [r7, #16]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 8004278:	693b      	ldr	r3, [r7, #16]
 800427a:	f023 0307 	bic.w	r3, r3, #7
 800427e:	613b      	str	r3, [r7, #16]
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d01e      	beq.n	80042c4 <prvInitialiseNewTask+0x7c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004286:	2300      	movs	r3, #0
 8004288:	617b      	str	r3, [r7, #20]
 800428a:	e012      	b.n	80042b2 <prvInitialiseNewTask+0x6a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800428c:	68ba      	ldr	r2, [r7, #8]
 800428e:	697b      	ldr	r3, [r7, #20]
 8004290:	4413      	add	r3, r2
 8004292:	7819      	ldrb	r1, [r3, #0]
 8004294:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004296:	697b      	ldr	r3, [r7, #20]
 8004298:	4413      	add	r3, r2
 800429a:	3334      	adds	r3, #52	@ 0x34
 800429c:	460a      	mov	r2, r1
 800429e:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80042a0:	68ba      	ldr	r2, [r7, #8]
 80042a2:	697b      	ldr	r3, [r7, #20]
 80042a4:	4413      	add	r3, r2
 80042a6:	781b      	ldrb	r3, [r3, #0]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d006      	beq.n	80042ba <prvInitialiseNewTask+0x72>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80042ac:	697b      	ldr	r3, [r7, #20]
 80042ae:	3301      	adds	r3, #1
 80042b0:	617b      	str	r3, [r7, #20]
 80042b2:	697b      	ldr	r3, [r7, #20]
 80042b4:	2b0f      	cmp	r3, #15
 80042b6:	d9e9      	bls.n	800428c <prvInitialiseNewTask+0x44>
 80042b8:	e000      	b.n	80042bc <prvInitialiseNewTask+0x74>
            {
                break;
 80042ba:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1U ] = '\0';
 80042bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042be:	2200      	movs	r2, #0
 80042c0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80042c4:	6a3b      	ldr	r3, [r7, #32]
 80042c6:	2b04      	cmp	r3, #4
 80042c8:	d901      	bls.n	80042ce <prvInitialiseNewTask+0x86>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80042ca:	2304      	movs	r3, #4
 80042cc:	623b      	str	r3, [r7, #32]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80042ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042d0:	6a3a      	ldr	r2, [r7, #32]
 80042d2:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 80042d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042d6:	6a3a      	ldr	r2, [r7, #32]
 80042d8:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80042da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042dc:	3304      	adds	r3, #4
 80042de:	4618      	mov	r0, r3
 80042e0:	f7ff fec3 	bl	800406a <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80042e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042e6:	3318      	adds	r3, #24
 80042e8:	4618      	mov	r0, r3
 80042ea:	f7ff febe 	bl	800406a <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80042ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042f0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80042f2:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority );
 80042f4:	6a3b      	ldr	r3, [r7, #32]
 80042f6:	f1c3 0205 	rsb	r2, r3, #5
 80042fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042fc:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80042fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004300:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004302:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004304:	683a      	ldr	r2, [r7, #0]
 8004306:	68f9      	ldr	r1, [r7, #12]
 8004308:	6938      	ldr	r0, [r7, #16]
 800430a:	f7ff fbbf 	bl	8003a8c <pxPortInitialiseStack>
 800430e:	4602      	mov	r2, r0
 8004310:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004312:	601a      	str	r2, [r3, #0]
            pxNewTCB->uxTaskAttributes |= taskATTRIBUTE_IS_IDLE;
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES > 1 ) */

    if( pxCreatedTask != NULL )
 8004314:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004316:	2b00      	cmp	r3, #0
 8004318:	d002      	beq.n	8004320 <prvInitialiseNewTask+0xd8>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800431a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800431c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800431e:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004320:	bf00      	nop
 8004322:	3718      	adds	r7, #24
 8004324:	46bd      	mov	sp, r7
 8004326:	bd80      	pop	{r7, pc}

08004328 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )

    static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
    {
 8004328:	b580      	push	{r7, lr}
 800432a:	b084      	sub	sp, #16
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
        /* Ensure interrupts don't access the task lists while the lists are being
         * updated. */
        taskENTER_CRITICAL();
 8004330:	f7ff fc4a 	bl	8003bc8 <vPortEnterCritical>
        {
            uxCurrentNumberOfTasks = ( UBaseType_t ) ( uxCurrentNumberOfTasks + 1U );
 8004334:	4b41      	ldr	r3, [pc, #260]	@ (800443c <prvAddNewTaskToReadyList+0x114>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	3301      	adds	r3, #1
 800433a:	4a40      	ldr	r2, [pc, #256]	@ (800443c <prvAddNewTaskToReadyList+0x114>)
 800433c:	6013      	str	r3, [r2, #0]

            if( pxCurrentTCB == NULL )
 800433e:	4b40      	ldr	r3, [pc, #256]	@ (8004440 <prvAddNewTaskToReadyList+0x118>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d109      	bne.n	800435a <prvAddNewTaskToReadyList+0x32>
            {
                /* There are no other tasks, or all the other tasks are in
                 * the suspended state - make this the current task. */
                pxCurrentTCB = pxNewTCB;
 8004346:	4a3e      	ldr	r2, [pc, #248]	@ (8004440 <prvAddNewTaskToReadyList+0x118>)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6013      	str	r3, [r2, #0]

                if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800434c:	4b3b      	ldr	r3, [pc, #236]	@ (800443c <prvAddNewTaskToReadyList+0x114>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	2b01      	cmp	r3, #1
 8004352:	d110      	bne.n	8004376 <prvAddNewTaskToReadyList+0x4e>
                {
                    /* This is the first task to be created so do the preliminary
                     * initialisation required.  We will not recover if this call
                     * fails, but we will report the failure. */
                    prvInitialiseTaskLists();
 8004354:	f000 fd3a 	bl	8004dcc <prvInitialiseTaskLists>
 8004358:	e00d      	b.n	8004376 <prvAddNewTaskToReadyList+0x4e>
            else
            {
                /* If the scheduler is not already running, make this task the
                 * current task if it is the highest priority task to be created
                 * so far. */
                if( xSchedulerRunning == pdFALSE )
 800435a:	4b3a      	ldr	r3, [pc, #232]	@ (8004444 <prvAddNewTaskToReadyList+0x11c>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d109      	bne.n	8004376 <prvAddNewTaskToReadyList+0x4e>
                {
                    if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004362:	4b37      	ldr	r3, [pc, #220]	@ (8004440 <prvAddNewTaskToReadyList+0x118>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800436c:	429a      	cmp	r2, r3
 800436e:	d802      	bhi.n	8004376 <prvAddNewTaskToReadyList+0x4e>
                    {
                        pxCurrentTCB = pxNewTCB;
 8004370:	4a33      	ldr	r2, [pc, #204]	@ (8004440 <prvAddNewTaskToReadyList+0x118>)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6013      	str	r3, [r2, #0]
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            uxTaskNumber++;
 8004376:	4b34      	ldr	r3, [pc, #208]	@ (8004448 <prvAddNewTaskToReadyList+0x120>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	3301      	adds	r3, #1
 800437c:	4a32      	ldr	r2, [pc, #200]	@ (8004448 <prvAddNewTaskToReadyList+0x120>)
 800437e:	6013      	str	r3, [r2, #0]

            #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004380:	4b31      	ldr	r3, [pc, #196]	@ (8004448 <prvAddNewTaskToReadyList+0x120>)
 8004382:	681a      	ldr	r2, [r3, #0]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	645a      	str	r2, [r3, #68]	@ 0x44
            }
            #endif /* configUSE_TRACE_FACILITY */
            traceTASK_CREATE( pxNewTCB );

            prvAddTaskToReadyList( pxNewTCB );
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800438c:	2201      	movs	r2, #1
 800438e:	409a      	lsls	r2, r3
 8004390:	4b2e      	ldr	r3, [pc, #184]	@ (800444c <prvAddNewTaskToReadyList+0x124>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4313      	orrs	r3, r2
 8004396:	4a2d      	ldr	r2, [pc, #180]	@ (800444c <prvAddNewTaskToReadyList+0x124>)
 8004398:	6013      	str	r3, [r2, #0]
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800439e:	492c      	ldr	r1, [pc, #176]	@ (8004450 <prvAddNewTaskToReadyList+0x128>)
 80043a0:	4613      	mov	r3, r2
 80043a2:	009b      	lsls	r3, r3, #2
 80043a4:	4413      	add	r3, r2
 80043a6:	009b      	lsls	r3, r3, #2
 80043a8:	440b      	add	r3, r1
 80043aa:	3304      	adds	r3, #4
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	60fb      	str	r3, [r7, #12]
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	68fa      	ldr	r2, [r7, #12]
 80043b4:	609a      	str	r2, [r3, #8]
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	689a      	ldr	r2, [r3, #8]
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	60da      	str	r2, [r3, #12]
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	689b      	ldr	r3, [r3, #8]
 80043c2:	687a      	ldr	r2, [r7, #4]
 80043c4:	3204      	adds	r2, #4
 80043c6:	605a      	str	r2, [r3, #4]
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	1d1a      	adds	r2, r3, #4
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	609a      	str	r2, [r3, #8]
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80043d4:	4613      	mov	r3, r2
 80043d6:	009b      	lsls	r3, r3, #2
 80043d8:	4413      	add	r3, r2
 80043da:	009b      	lsls	r3, r3, #2
 80043dc:	4a1c      	ldr	r2, [pc, #112]	@ (8004450 <prvAddNewTaskToReadyList+0x128>)
 80043de:	441a      	add	r2, r3
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	615a      	str	r2, [r3, #20]
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80043e8:	4919      	ldr	r1, [pc, #100]	@ (8004450 <prvAddNewTaskToReadyList+0x128>)
 80043ea:	4613      	mov	r3, r2
 80043ec:	009b      	lsls	r3, r3, #2
 80043ee:	4413      	add	r3, r2
 80043f0:	009b      	lsls	r3, r3, #2
 80043f2:	440b      	add	r3, r1
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	687a      	ldr	r2, [r7, #4]
 80043f8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80043fa:	1c59      	adds	r1, r3, #1
 80043fc:	4814      	ldr	r0, [pc, #80]	@ (8004450 <prvAddNewTaskToReadyList+0x128>)
 80043fe:	4613      	mov	r3, r2
 8004400:	009b      	lsls	r3, r3, #2
 8004402:	4413      	add	r3, r2
 8004404:	009b      	lsls	r3, r3, #2
 8004406:	4403      	add	r3, r0
 8004408:	6019      	str	r1, [r3, #0]

            portSETUP_TCB( pxNewTCB );
        }
        taskEXIT_CRITICAL();
 800440a:	f7ff fbf7 	bl	8003bfc <vPortExitCritical>

        if( xSchedulerRunning != pdFALSE )
 800440e:	4b0d      	ldr	r3, [pc, #52]	@ (8004444 <prvAddNewTaskToReadyList+0x11c>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d00e      	beq.n	8004434 <prvAddNewTaskToReadyList+0x10c>
        {
            /* If the created task is of a higher priority than the current task
             * then it should run now. */
            taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxNewTCB );
 8004416:	4b0a      	ldr	r3, [pc, #40]	@ (8004440 <prvAddNewTaskToReadyList+0x118>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004420:	429a      	cmp	r2, r3
 8004422:	d207      	bcs.n	8004434 <prvAddNewTaskToReadyList+0x10c>
 8004424:	4b0b      	ldr	r3, [pc, #44]	@ (8004454 <prvAddNewTaskToReadyList+0x12c>)
 8004426:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800442a:	601a      	str	r2, [r3, #0]
 800442c:	f3bf 8f4f 	dsb	sy
 8004430:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8004434:	bf00      	nop
 8004436:	3710      	adds	r7, #16
 8004438:	46bd      	mov	sp, r7
 800443a:	bd80      	pop	{r7, pc}
 800443c:	2000321c 	.word	0x2000321c
 8004440:	20003144 	.word	0x20003144
 8004444:	20003228 	.word	0x20003228
 8004448:	20003238 	.word	0x20003238
 800444c:	20003224 	.word	0x20003224
 8004450:	20003148 	.word	0x20003148
 8004454:	e000ed04 	.word	0xe000ed04

08004458 <prvSnprintfReturnValueToCharsWritten>:

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

    static size_t prvSnprintfReturnValueToCharsWritten( int iSnprintfReturnValue,
                                                        size_t n )
    {
 8004458:	b480      	push	{r7}
 800445a:	b085      	sub	sp, #20
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
 8004460:	6039      	str	r1, [r7, #0]
        size_t uxCharsWritten;

        if( iSnprintfReturnValue < 0 )
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2b00      	cmp	r3, #0
 8004466:	da02      	bge.n	800446e <prvSnprintfReturnValueToCharsWritten+0x16>
        {
            /* Encoding error - Return 0 to indicate that nothing
             * was written to the buffer. */
            uxCharsWritten = 0;
 8004468:	2300      	movs	r3, #0
 800446a:	60fb      	str	r3, [r7, #12]
 800446c:	e009      	b.n	8004482 <prvSnprintfReturnValueToCharsWritten+0x2a>
        }
        else if( iSnprintfReturnValue >= ( int ) n )
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	687a      	ldr	r2, [r7, #4]
 8004472:	429a      	cmp	r2, r3
 8004474:	db03      	blt.n	800447e <prvSnprintfReturnValueToCharsWritten+0x26>
        {
            /* This is the case when the supplied buffer is not
             * large to hold the generated string. Return the
             * number of characters actually written without
             * counting the terminating NULL character. */
            uxCharsWritten = n - 1U;
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	3b01      	subs	r3, #1
 800447a:	60fb      	str	r3, [r7, #12]
 800447c:	e001      	b.n	8004482 <prvSnprintfReturnValueToCharsWritten+0x2a>
        }
        else
        {
            /* Complete string was written to the buffer. */
            uxCharsWritten = ( size_t ) iSnprintfReturnValue;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	60fb      	str	r3, [r7, #12]
        }

        return uxCharsWritten;
 8004482:	68fb      	ldr	r3, [r7, #12]
    }
 8004484:	4618      	mov	r0, r3
 8004486:	3714      	adds	r7, #20
 8004488:	46bd      	mov	sp, r7
 800448a:	bc80      	pop	{r7}
 800448c:	4770      	bx	lr
	...

08004490 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    void vTaskDelete( TaskHandle_t xTaskToDelete )
    {
 8004490:	b580      	push	{r7, lr}
 8004492:	b086      	sub	sp, #24
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;
        BaseType_t xDeleteTCBInIdleTask = pdFALSE;
 8004498:	2300      	movs	r3, #0
 800449a:	617b      	str	r3, [r7, #20]
        BaseType_t xTaskIsRunningOrYielding;

        traceENTER_vTaskDelete( xTaskToDelete );

        taskENTER_CRITICAL();
 800449c:	f7ff fb94 	bl	8003bc8 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the calling task that is
             * being deleted. */
            pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d102      	bne.n	80044ac <vTaskDelete+0x1c>
 80044a6:	4b39      	ldr	r3, [pc, #228]	@ (800458c <vTaskDelete+0xfc>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	e000      	b.n	80044ae <vTaskDelete+0x1e>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	613b      	str	r3, [r7, #16]

            /* Remove task from the ready/delayed list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80044b0:	693b      	ldr	r3, [r7, #16]
 80044b2:	3304      	adds	r3, #4
 80044b4:	4618      	mov	r0, r3
 80044b6:	f7ff fe3f 	bl	8004138 <uxListRemove>
 80044ba:	4603      	mov	r3, r0
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d115      	bne.n	80044ec <vTaskDelete+0x5c>
            {
                taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80044c0:	693b      	ldr	r3, [r7, #16]
 80044c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80044c4:	4932      	ldr	r1, [pc, #200]	@ (8004590 <vTaskDelete+0x100>)
 80044c6:	4613      	mov	r3, r2
 80044c8:	009b      	lsls	r3, r3, #2
 80044ca:	4413      	add	r3, r2
 80044cc:	009b      	lsls	r3, r3, #2
 80044ce:	440b      	add	r3, r1
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d10a      	bne.n	80044ec <vTaskDelete+0x5c>
 80044d6:	693b      	ldr	r3, [r7, #16]
 80044d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044da:	2201      	movs	r2, #1
 80044dc:	fa02 f303 	lsl.w	r3, r2, r3
 80044e0:	43da      	mvns	r2, r3
 80044e2:	4b2c      	ldr	r3, [pc, #176]	@ (8004594 <vTaskDelete+0x104>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4013      	ands	r3, r2
 80044e8:	4a2a      	ldr	r2, [pc, #168]	@ (8004594 <vTaskDelete+0x104>)
 80044ea:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80044ec:	693b      	ldr	r3, [r7, #16]
 80044ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d004      	beq.n	80044fe <vTaskDelete+0x6e>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80044f4:	693b      	ldr	r3, [r7, #16]
 80044f6:	3318      	adds	r3, #24
 80044f8:	4618      	mov	r0, r3
 80044fa:	f7ff fe1d 	bl	8004138 <uxListRemove>

            /* Increment the uxTaskNumber also so kernel aware debuggers can
             * detect that the task lists need re-generating.  This is done before
             * portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
             * not return. */
            uxTaskNumber++;
 80044fe:	4b26      	ldr	r3, [pc, #152]	@ (8004598 <vTaskDelete+0x108>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	3301      	adds	r3, #1
 8004504:	4a24      	ldr	r2, [pc, #144]	@ (8004598 <vTaskDelete+0x108>)
 8004506:	6013      	str	r3, [r2, #0]

            /* Use temp variable as distinct sequence points for reading volatile
             * variables prior to a logical operator to ensure compliance with
             * MISRA C 2012 Rule 13.5. */
            xTaskIsRunningOrYielding = taskTASK_IS_RUNNING_OR_SCHEDULED_TO_YIELD( pxTCB );
 8004508:	4b20      	ldr	r3, [pc, #128]	@ (800458c <vTaskDelete+0xfc>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	693a      	ldr	r2, [r7, #16]
 800450e:	429a      	cmp	r2, r3
 8004510:	d101      	bne.n	8004516 <vTaskDelete+0x86>
 8004512:	2301      	movs	r3, #1
 8004514:	e000      	b.n	8004518 <vTaskDelete+0x88>
 8004516:	2300      	movs	r3, #0
 8004518:	60fb      	str	r3, [r7, #12]

            /* If the task is running (or yielding), we must add it to the
             * termination list so that an idle task can delete it when it is
             * no longer running. */
            if( ( xSchedulerRunning != pdFALSE ) && ( xTaskIsRunningOrYielding != pdFALSE ) )
 800451a:	4b20      	ldr	r3, [pc, #128]	@ (800459c <vTaskDelete+0x10c>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d010      	beq.n	8004544 <vTaskDelete+0xb4>
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d00d      	beq.n	8004544 <vTaskDelete+0xb4>
                 * deleted. This cannot complete when the task is still running
                 * on a core, as a context switch to another task is required.
                 * Place the task in the termination list. The idle task will check
                 * the termination list and free up any memory allocated by the
                 * scheduler for the TCB and stack of the deleted task. */
                vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8004528:	693b      	ldr	r3, [r7, #16]
 800452a:	3304      	adds	r3, #4
 800452c:	4619      	mov	r1, r3
 800452e:	481c      	ldr	r0, [pc, #112]	@ (80045a0 <vTaskDelete+0x110>)
 8004530:	f7ff fda7 	bl	8004082 <vListInsertEnd>

                /* Increment the ucTasksDeleted variable so the idle task knows
                 * there is a task that has been deleted and that it should therefore
                 * check the xTasksWaitingTermination list. */
                ++uxDeletedTasksWaitingCleanUp;
 8004534:	4b1b      	ldr	r3, [pc, #108]	@ (80045a4 <vTaskDelete+0x114>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	3301      	adds	r3, #1
 800453a:	4a1a      	ldr	r2, [pc, #104]	@ (80045a4 <vTaskDelete+0x114>)
 800453c:	6013      	str	r3, [r2, #0]
                /* Call the delete hook before portPRE_TASK_DELETE_HOOK() as
                 * portPRE_TASK_DELETE_HOOK() does not return in the Win32 port. */
                traceTASK_DELETE( pxTCB );

                /* Delete the task TCB in idle task. */
                xDeleteTCBInIdleTask = pdTRUE;
 800453e:	2301      	movs	r3, #1
 8004540:	617b      	str	r3, [r7, #20]
 8004542:	e006      	b.n	8004552 <vTaskDelete+0xc2>
                }
                #endif /* #if ( configNUMBER_OF_CORES > 1 ) */
            }
            else
            {
                --uxCurrentNumberOfTasks;
 8004544:	4b18      	ldr	r3, [pc, #96]	@ (80045a8 <vTaskDelete+0x118>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	3b01      	subs	r3, #1
 800454a:	4a17      	ldr	r2, [pc, #92]	@ (80045a8 <vTaskDelete+0x118>)
 800454c:	6013      	str	r3, [r2, #0]
                traceTASK_DELETE( pxTCB );

                /* Reset the next expected unblock time in case it referred to
                 * the task that has just been deleted. */
                prvResetNextTaskUnblockTime();
 800454e:	f000 fd93 	bl	8005078 <prvResetNextTaskUnblockTime>
            }
        }
        taskEXIT_CRITICAL();
 8004552:	f7ff fb53 	bl	8003bfc <vPortExitCritical>

        /* If the task is not deleting itself, call prvDeleteTCB from outside of
         * critical section. If a task deletes itself, prvDeleteTCB is called
         * from prvCheckTasksWaitingTermination which is called from Idle task. */
        if( xDeleteTCBInIdleTask != pdTRUE )
 8004556:	697b      	ldr	r3, [r7, #20]
 8004558:	2b01      	cmp	r3, #1
 800455a:	d002      	beq.n	8004562 <vTaskDelete+0xd2>
        {
            prvDeleteTCB( pxTCB );
 800455c:	6938      	ldr	r0, [r7, #16]
 800455e:	f000 fd7a 	bl	8005056 <prvDeleteTCB>

        /* Force a reschedule if it is the currently running task that has just
         * been deleted. */
        #if ( configNUMBER_OF_CORES == 1 )
        {
            if( xSchedulerRunning != pdFALSE )
 8004562:	4b0e      	ldr	r3, [pc, #56]	@ (800459c <vTaskDelete+0x10c>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d00c      	beq.n	8004584 <vTaskDelete+0xf4>
            {
                if( pxTCB == pxCurrentTCB )
 800456a:	4b08      	ldr	r3, [pc, #32]	@ (800458c <vTaskDelete+0xfc>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	693a      	ldr	r2, [r7, #16]
 8004570:	429a      	cmp	r2, r3
 8004572:	d107      	bne.n	8004584 <vTaskDelete+0xf4>
                {
                    configASSERT( uxSchedulerSuspended == 0 );
                    taskYIELD_WITHIN_API();
 8004574:	4b0d      	ldr	r3, [pc, #52]	@ (80045ac <vTaskDelete+0x11c>)
 8004576:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800457a:	601a      	str	r2, [r3, #0]
 800457c:	f3bf 8f4f 	dsb	sy
 8004580:	f3bf 8f6f 	isb	sy
            }
        }
        #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

        traceRETURN_vTaskDelete();
    }
 8004584:	bf00      	nop
 8004586:	3718      	adds	r7, #24
 8004588:	46bd      	mov	sp, r7
 800458a:	bd80      	pop	{r7, pc}
 800458c:	20003144 	.word	0x20003144
 8004590:	20003148 	.word	0x20003148
 8004594:	20003224 	.word	0x20003224
 8004598:	20003238 	.word	0x20003238
 800459c:	20003228 	.word	0x20003228
 80045a0:	200031f0 	.word	0x200031f0
 80045a4:	20003204 	.word	0x20003204
 80045a8:	2000321c 	.word	0x2000321c
 80045ac:	e000ed04 	.word	0xe000ed04

080045b0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b084      	sub	sp, #16
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 80045b8:	2300      	movs	r3, #0
 80045ba:	60fb      	str	r3, [r7, #12]

        traceENTER_vTaskDelay( xTicksToDelay );

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d008      	beq.n	80045d4 <vTaskDelay+0x24>
        {
            vTaskSuspendAll();
 80045c2:	f000 f909 	bl	80047d8 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80045c6:	2100      	movs	r1, #0
 80045c8:	6878      	ldr	r0, [r7, #4]
 80045ca:	f000 fe75 	bl	80052b8 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 80045ce:	f000 f911 	bl	80047f4 <xTaskResumeAll>
 80045d2:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d107      	bne.n	80045ea <vTaskDelay+0x3a>
        {
            taskYIELD_WITHIN_API();
 80045da:	4b06      	ldr	r3, [pc, #24]	@ (80045f4 <vTaskDelay+0x44>)
 80045dc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80045e0:	601a      	str	r2, [r3, #0]
 80045e2:	f3bf 8f4f 	dsb	sy
 80045e6:	f3bf 8f6f 	isb	sy
        {
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_vTaskDelay();
    }
 80045ea:	bf00      	nop
 80045ec:	3710      	adds	r7, #16
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bd80      	pop	{r7, pc}
 80045f2:	bf00      	nop
 80045f4:	e000ed04 	.word	0xe000ed04

080045f8 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

    eTaskState eTaskGetState( TaskHandle_t xTask )
    {
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b08a      	sub	sp, #40	@ 0x28
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
        eTaskState eReturn;
        List_t const * pxStateList;
        List_t const * pxEventList;
        List_t const * pxDelayedList;
        List_t const * pxOverflowedDelayedList;
        const TCB_t * const pxTCB = xTask;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	61fb      	str	r3, [r7, #28]
        traceENTER_eTaskGetState( xTask );

        configASSERT( pxTCB );

        #if ( configNUMBER_OF_CORES == 1 )
            if( pxTCB == pxCurrentTCB )
 8004604:	4b32      	ldr	r3, [pc, #200]	@ (80046d0 <eTaskGetState+0xd8>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	69fa      	ldr	r2, [r7, #28]
 800460a:	429a      	cmp	r2, r3
 800460c:	d103      	bne.n	8004616 <eTaskGetState+0x1e>
            {
                /* The task calling this function is querying its own state. */
                eReturn = eRunning;
 800460e:	2300      	movs	r3, #0
 8004610:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8004614:	e056      	b.n	80046c4 <eTaskGetState+0xcc>
            }
            else
        #endif
        {
            taskENTER_CRITICAL();
 8004616:	f7ff fad7 	bl	8003bc8 <vPortEnterCritical>
            {
                pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 800461a:	69fb      	ldr	r3, [r7, #28]
 800461c:	695b      	ldr	r3, [r3, #20]
 800461e:	61bb      	str	r3, [r7, #24]
                pxEventList = listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) );
 8004620:	69fb      	ldr	r3, [r7, #28]
 8004622:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004624:	617b      	str	r3, [r7, #20]
                pxDelayedList = pxDelayedTaskList;
 8004626:	4b2b      	ldr	r3, [pc, #172]	@ (80046d4 <eTaskGetState+0xdc>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	613b      	str	r3, [r7, #16]
                pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 800462c:	4b2a      	ldr	r3, [pc, #168]	@ (80046d8 <eTaskGetState+0xe0>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	60fb      	str	r3, [r7, #12]
            }
            taskEXIT_CRITICAL();
 8004632:	f7ff fae3 	bl	8003bfc <vPortExitCritical>

            if( pxEventList == &xPendingReadyList )
 8004636:	697b      	ldr	r3, [r7, #20]
 8004638:	4a28      	ldr	r2, [pc, #160]	@ (80046dc <eTaskGetState+0xe4>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d103      	bne.n	8004646 <eTaskGetState+0x4e>
            {
                /* The task has been placed on the pending ready list, so its
                 * state is eReady regardless of what list the task's state list
                 * item is currently placed on. */
                eReturn = eReady;
 800463e:	2301      	movs	r3, #1
 8004640:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8004644:	e03e      	b.n	80046c4 <eTaskGetState+0xcc>
            }
            else if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 8004646:	69ba      	ldr	r2, [r7, #24]
 8004648:	693b      	ldr	r3, [r7, #16]
 800464a:	429a      	cmp	r2, r3
 800464c:	d003      	beq.n	8004656 <eTaskGetState+0x5e>
 800464e:	69ba      	ldr	r2, [r7, #24]
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	429a      	cmp	r2, r3
 8004654:	d103      	bne.n	800465e <eTaskGetState+0x66>
            {
                /* The task being queried is referenced from one of the Blocked
                 * lists. */
                eReturn = eBlocked;
 8004656:	2302      	movs	r3, #2
 8004658:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800465c:	e032      	b.n	80046c4 <eTaskGetState+0xcc>
            }

            #if ( INCLUDE_vTaskSuspend == 1 )
                else if( pxStateList == &xSuspendedTaskList )
 800465e:	69bb      	ldr	r3, [r7, #24]
 8004660:	4a1f      	ldr	r2, [pc, #124]	@ (80046e0 <eTaskGetState+0xe8>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d120      	bne.n	80046a8 <eTaskGetState+0xb0>
                {
                    /* The task being queried is referenced from the suspended
                     * list.  Is it genuinely suspended or is it blocked
                     * indefinitely? */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 8004666:	69fb      	ldr	r3, [r7, #28]
 8004668:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800466a:	2b00      	cmp	r3, #0
 800466c:	d118      	bne.n	80046a0 <eTaskGetState+0xa8>
                            /* The task does not appear on the event list item of
                             * and of the RTOS objects, but could still be in the
                             * blocked state if it is waiting on its notification
                             * rather than waiting on an object.  If not, is
                             * suspended. */
                            eReturn = eSuspended;
 800466e:	2303      	movs	r3, #3
 8004670:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

                            for( x = ( BaseType_t ) 0; x < ( BaseType_t ) configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 8004674:	2300      	movs	r3, #0
 8004676:	623b      	str	r3, [r7, #32]
 8004678:	e00e      	b.n	8004698 <eTaskGetState+0xa0>
                            {
                                if( pxTCB->ucNotifyState[ x ] == taskWAITING_NOTIFICATION )
 800467a:	69fa      	ldr	r2, [r7, #28]
 800467c:	6a3b      	ldr	r3, [r7, #32]
 800467e:	4413      	add	r3, r2
 8004680:	3358      	adds	r3, #88	@ 0x58
 8004682:	781b      	ldrb	r3, [r3, #0]
 8004684:	b2db      	uxtb	r3, r3
 8004686:	2b01      	cmp	r3, #1
 8004688:	d103      	bne.n	8004692 <eTaskGetState+0x9a>
                                {
                                    eReturn = eBlocked;
 800468a:	2302      	movs	r3, #2
 800468c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                                    break;
 8004690:	e018      	b.n	80046c4 <eTaskGetState+0xcc>
                            for( x = ( BaseType_t ) 0; x < ( BaseType_t ) configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 8004692:	6a3b      	ldr	r3, [r7, #32]
 8004694:	3301      	adds	r3, #1
 8004696:	623b      	str	r3, [r7, #32]
 8004698:	6a3b      	ldr	r3, [r7, #32]
 800469a:	2b00      	cmp	r3, #0
 800469c:	dded      	ble.n	800467a <eTaskGetState+0x82>
 800469e:	e011      	b.n	80046c4 <eTaskGetState+0xcc>
                        }
                        #endif /* if ( configUSE_TASK_NOTIFICATIONS == 1 ) */
                    }
                    else
                    {
                        eReturn = eBlocked;
 80046a0:	2302      	movs	r3, #2
 80046a2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80046a6:	e00d      	b.n	80046c4 <eTaskGetState+0xcc>
                    }
                }
            #endif /* if ( INCLUDE_vTaskSuspend == 1 ) */

            #if ( INCLUDE_vTaskDelete == 1 )
                else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 80046a8:	69bb      	ldr	r3, [r7, #24]
 80046aa:	4a0e      	ldr	r2, [pc, #56]	@ (80046e4 <eTaskGetState+0xec>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d002      	beq.n	80046b6 <eTaskGetState+0xbe>
 80046b0:	69bb      	ldr	r3, [r7, #24]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d103      	bne.n	80046be <eTaskGetState+0xc6>
                {
                    /* The task being queried is referenced from the deleted
                     * tasks list, or it is not referenced from any lists at
                     * all. */
                    eReturn = eDeleted;
 80046b6:	2304      	movs	r3, #4
 80046b8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80046bc:	e002      	b.n	80046c4 <eTaskGetState+0xcc>
            {
                #if ( configNUMBER_OF_CORES == 1 )
                {
                    /* If the task is not in any other state, it must be in the
                     * Ready (including pending ready) state. */
                    eReturn = eReady;
 80046be:	2301      	movs	r3, #1
 80046c0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            }
        }

        traceRETURN_eTaskGetState( eReturn );

        return eReturn;
 80046c4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
    }
 80046c8:	4618      	mov	r0, r3
 80046ca:	3728      	adds	r7, #40	@ 0x28
 80046cc:	46bd      	mov	sp, r7
 80046ce:	bd80      	pop	{r7, pc}
 80046d0:	20003144 	.word	0x20003144
 80046d4:	200031d4 	.word	0x200031d4
 80046d8:	200031d8 	.word	0x200031d8
 80046dc:	200031dc 	.word	0x200031dc
 80046e0:	20003208 	.word	0x20003208
 80046e4:	200031f0 	.word	0x200031f0

080046e8 <prvCreateIdleTasks>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

static BaseType_t prvCreateIdleTasks( void )
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b08a      	sub	sp, #40	@ 0x28
 80046ec:	af02      	add	r7, sp, #8
    BaseType_t xReturn = pdPASS;
 80046ee:	2301      	movs	r3, #1
 80046f0:	61fb      	str	r3, [r7, #28]
    BaseType_t xCoreID;
    char cIdleName[ configMAX_TASK_NAME_LEN ];
    TaskFunction_t pxIdleTaskFunction = NULL;
 80046f2:	2300      	movs	r3, #0
 80046f4:	613b      	str	r3, [r7, #16]
    BaseType_t xIdleTaskNameIndex;

    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 80046f6:	2300      	movs	r3, #0
 80046f8:	617b      	str	r3, [r7, #20]
 80046fa:	e011      	b.n	8004720 <prvCreateIdleTasks+0x38>
    {
        cIdleName[ xIdleTaskNameIndex ] = configIDLE_TASK_NAME[ xIdleTaskNameIndex ];
 80046fc:	4a1c      	ldr	r2, [pc, #112]	@ (8004770 <prvCreateIdleTasks+0x88>)
 80046fe:	697b      	ldr	r3, [r7, #20]
 8004700:	4413      	add	r3, r2
 8004702:	7819      	ldrb	r1, [r3, #0]
 8004704:	463a      	mov	r2, r7
 8004706:	697b      	ldr	r3, [r7, #20]
 8004708:	4413      	add	r3, r2
 800470a:	460a      	mov	r2, r1
 800470c:	701a      	strb	r2, [r3, #0]

        /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
         * configMAX_TASK_NAME_LEN characters just in case the memory after the
         * string is not accessible (extremely unlikely). */
        if( cIdleName[ xIdleTaskNameIndex ] == ( char ) 0x00 )
 800470e:	463a      	mov	r2, r7
 8004710:	697b      	ldr	r3, [r7, #20]
 8004712:	4413      	add	r3, r2
 8004714:	781b      	ldrb	r3, [r3, #0]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d006      	beq.n	8004728 <prvCreateIdleTasks+0x40>
    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 800471a:	697b      	ldr	r3, [r7, #20]
 800471c:	3301      	adds	r3, #1
 800471e:	617b      	str	r3, [r7, #20]
 8004720:	697b      	ldr	r3, [r7, #20]
 8004722:	2b0f      	cmp	r3, #15
 8004724:	ddea      	ble.n	80046fc <prvCreateIdleTasks+0x14>
 8004726:	e000      	b.n	800472a <prvCreateIdleTasks+0x42>
        {
            break;
 8004728:	bf00      	nop
            mtCOVERAGE_TEST_MARKER();
        }
    }

    /* Add each idle task at the lowest priority. */
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 800472a:	2300      	movs	r3, #0
 800472c:	61bb      	str	r3, [r7, #24]
 800472e:	e015      	b.n	800475c <prvCreateIdleTasks+0x74>
    {
        #if ( configNUMBER_OF_CORES == 1 )
        {
            pxIdleTaskFunction = prvIdleTask;
 8004730:	4b10      	ldr	r3, [pc, #64]	@ (8004774 <prvCreateIdleTasks+0x8c>)
 8004732:	613b      	str	r3, [r7, #16]
            }
        }
        #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( pxIdleTaskFunction,
 8004734:	69bb      	ldr	r3, [r7, #24]
 8004736:	009b      	lsls	r3, r3, #2
 8004738:	4a0f      	ldr	r2, [pc, #60]	@ (8004778 <prvCreateIdleTasks+0x90>)
 800473a:	4413      	add	r3, r2
 800473c:	4639      	mov	r1, r7
 800473e:	9301      	str	r3, [sp, #4]
 8004740:	2300      	movs	r3, #0
 8004742:	9300      	str	r3, [sp, #0]
 8004744:	2300      	movs	r3, #0
 8004746:	2280      	movs	r2, #128	@ 0x80
 8004748:	6938      	ldr	r0, [r7, #16]
 800474a:	f7ff fd5a 	bl	8004202 <xTaskCreate>
 800474e:	61f8      	str	r0, [r7, #28]
                                   &xIdleTaskHandles[ xCoreID ] );
        }
        #endif /* configSUPPORT_STATIC_ALLOCATION */

        /* Break the loop if any of the idle task is failed to be created. */
        if( xReturn == pdFAIL )
 8004750:	69fb      	ldr	r3, [r7, #28]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d006      	beq.n	8004764 <prvCreateIdleTasks+0x7c>
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 8004756:	69bb      	ldr	r3, [r7, #24]
 8004758:	3301      	adds	r3, #1
 800475a:	61bb      	str	r3, [r7, #24]
 800475c:	69bb      	ldr	r3, [r7, #24]
 800475e:	2b00      	cmp	r3, #0
 8004760:	dde6      	ble.n	8004730 <prvCreateIdleTasks+0x48>
 8004762:	e000      	b.n	8004766 <prvCreateIdleTasks+0x7e>
        {
            break;
 8004764:	bf00      	nop
            }
            #endif
        }
    }

    return xReturn;
 8004766:	69fb      	ldr	r3, [r7, #28]
}
 8004768:	4618      	mov	r0, r3
 800476a:	3720      	adds	r7, #32
 800476c:	46bd      	mov	sp, r7
 800476e:	bd80      	pop	{r7, pc}
 8004770:	08009c10 	.word	0x08009c10
 8004774:	08004d9d 	.word	0x08004d9d
 8004778:	20003240 	.word	0x20003240

0800477c <vTaskStartScheduler>:

/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b082      	sub	sp, #8
 8004780:	af00      	add	r7, sp, #0
         * the number of bits as confNUMBER_OF_CORES. */
        configASSERT( ( sizeof( UBaseType_t ) * taskBITS_PER_BYTE ) >= configNUMBER_OF_CORES );
    }
    #endif /* #if ( configUSE_CORE_AFFINITY == 1 ) && ( configNUMBER_OF_CORES > 1 ) */

    xReturn = prvCreateIdleTasks();
 8004782:	f7ff ffb1 	bl	80046e8 <prvCreateIdleTasks>
 8004786:	6078      	str	r0, [r7, #4]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2b01      	cmp	r3, #1
 800478c:	d115      	bne.n	80047ba <vTaskStartScheduler+0x3e>
    __asm volatile
 800478e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004792:	f383 8811 	msr	BASEPRI, r3
 8004796:	f3bf 8f6f 	isb	sy
 800479a:	f3bf 8f4f 	dsb	sy
 800479e:	603b      	str	r3, [r7, #0]
}
 80047a0:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 80047a2:	4b09      	ldr	r3, [pc, #36]	@ (80047c8 <vTaskStartScheduler+0x4c>)
 80047a4:	f04f 32ff 	mov.w	r2, #4294967295
 80047a8:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80047aa:	4b08      	ldr	r3, [pc, #32]	@ (80047cc <vTaskStartScheduler+0x50>)
 80047ac:	2201      	movs	r2, #1
 80047ae:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80047b0:	4b07      	ldr	r3, [pc, #28]	@ (80047d0 <vTaskStartScheduler+0x54>)
 80047b2:	2200      	movs	r2, #0
 80047b4:	601a      	str	r2, [r3, #0]
        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */

        /* The return value for xPortStartScheduler is not required
         * hence using a void datatype. */
        ( void ) xPortStartScheduler();
 80047b6:	f7ff f9d9 	bl	8003b6c <xPortStartScheduler>
     * meaning xIdleTaskHandles are not used anywhere else. */
    ( void ) xIdleTaskHandles;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80047ba:	4b06      	ldr	r3, [pc, #24]	@ (80047d4 <vTaskStartScheduler+0x58>)
 80047bc:	681b      	ldr	r3, [r3, #0]

    traceRETURN_vTaskStartScheduler();
}
 80047be:	bf00      	nop
 80047c0:	3708      	adds	r7, #8
 80047c2:	46bd      	mov	sp, r7
 80047c4:	bd80      	pop	{r7, pc}
 80047c6:	bf00      	nop
 80047c8:	2000323c 	.word	0x2000323c
 80047cc:	20003228 	.word	0x20003228
 80047d0:	20003220 	.word	0x20003220
 80047d4:	20000410 	.word	0x20000410

080047d8 <vTaskSuspendAll>:
    traceRETURN_vTaskEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80047d8:	b480      	push	{r7}
 80047da:	af00      	add	r7, sp, #0
         * do not otherwise exhibit real time behaviour. */
        portSOFTWARE_BARRIER();

        /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
         * is used to allow calls to vTaskSuspendAll() to nest. */
        uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended + 1U );
 80047dc:	4b04      	ldr	r3, [pc, #16]	@ (80047f0 <vTaskSuspendAll+0x18>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	3301      	adds	r3, #1
 80047e2:	4a03      	ldr	r2, [pc, #12]	@ (80047f0 <vTaskSuspendAll+0x18>)
 80047e4:	6013      	str	r3, [r2, #0]
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_vTaskSuspendAll();
}
 80047e6:	bf00      	nop
 80047e8:	46bd      	mov	sp, r7
 80047ea:	bc80      	pop	{r7}
 80047ec:	4770      	bx	lr
 80047ee:	bf00      	nop
 80047f0:	20003244 	.word	0x20003244

080047f4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b088      	sub	sp, #32
 80047f8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80047fa:	2300      	movs	r3, #0
 80047fc:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 80047fe:	2300      	movs	r3, #0
 8004800:	61bb      	str	r3, [r7, #24]
        /* It is possible that an ISR caused a task to be removed from an event
         * list while the scheduler was suspended.  If this was the case then the
         * removed task will have been added to the xPendingReadyList.  Once the
         * scheduler has been resumed it is safe to move all the pending ready
         * tasks from this list into their appropriate ready list. */
        taskENTER_CRITICAL();
 8004802:	f7ff f9e1 	bl	8003bc8 <vPortEnterCritical>
        {
            BaseType_t xCoreID;
            xCoreID = ( BaseType_t ) portGET_CORE_ID();
 8004806:	2300      	movs	r3, #0
 8004808:	613b      	str	r3, [r7, #16]

            /* If uxSchedulerSuspended is zero then this function does not match a
             * previous call to vTaskSuspendAll(). */
            configASSERT( uxSchedulerSuspended != 0U );

            uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended - 1U );
 800480a:	4b6d      	ldr	r3, [pc, #436]	@ (80049c0 <xTaskResumeAll+0x1cc>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	3b01      	subs	r3, #1
 8004810:	4a6b      	ldr	r2, [pc, #428]	@ (80049c0 <xTaskResumeAll+0x1cc>)
 8004812:	6013      	str	r3, [r2, #0]
            portRELEASE_TASK_LOCK();

            if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8004814:	4b6a      	ldr	r3, [pc, #424]	@ (80049c0 <xTaskResumeAll+0x1cc>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	2b00      	cmp	r3, #0
 800481a:	f040 80ca 	bne.w	80049b2 <xTaskResumeAll+0x1be>
            {
                if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800481e:	4b69      	ldr	r3, [pc, #420]	@ (80049c4 <xTaskResumeAll+0x1d0>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	2b00      	cmp	r3, #0
 8004824:	f000 80c5 	beq.w	80049b2 <xTaskResumeAll+0x1be>
                {
                    /* Move any readied tasks from the pending list into the
                     * appropriate ready list. */
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004828:	e08e      	b.n	8004948 <xTaskResumeAll+0x154>
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800482a:	4b67      	ldr	r3, [pc, #412]	@ (80049c8 <xTaskResumeAll+0x1d4>)
 800482c:	68db      	ldr	r3, [r3, #12]
 800482e:	68db      	ldr	r3, [r3, #12]
 8004830:	61fb      	str	r3, [r7, #28]
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8004832:	69fb      	ldr	r3, [r7, #28]
 8004834:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004836:	60fb      	str	r3, [r7, #12]
 8004838:	69fb      	ldr	r3, [r7, #28]
 800483a:	69db      	ldr	r3, [r3, #28]
 800483c:	69fa      	ldr	r2, [r7, #28]
 800483e:	6a12      	ldr	r2, [r2, #32]
 8004840:	609a      	str	r2, [r3, #8]
 8004842:	69fb      	ldr	r3, [r7, #28]
 8004844:	6a1b      	ldr	r3, [r3, #32]
 8004846:	69fa      	ldr	r2, [r7, #28]
 8004848:	69d2      	ldr	r2, [r2, #28]
 800484a:	605a      	str	r2, [r3, #4]
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	685a      	ldr	r2, [r3, #4]
 8004850:	69fb      	ldr	r3, [r7, #28]
 8004852:	3318      	adds	r3, #24
 8004854:	429a      	cmp	r2, r3
 8004856:	d103      	bne.n	8004860 <xTaskResumeAll+0x6c>
 8004858:	69fb      	ldr	r3, [r7, #28]
 800485a:	6a1a      	ldr	r2, [r3, #32]
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	605a      	str	r2, [r3, #4]
 8004860:	69fb      	ldr	r3, [r7, #28]
 8004862:	2200      	movs	r2, #0
 8004864:	629a      	str	r2, [r3, #40]	@ 0x28
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	1e5a      	subs	r2, r3, #1
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	601a      	str	r2, [r3, #0]
                        portMEMORY_BARRIER();
                        listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8004870:	69fb      	ldr	r3, [r7, #28]
 8004872:	695b      	ldr	r3, [r3, #20]
 8004874:	60bb      	str	r3, [r7, #8]
 8004876:	69fb      	ldr	r3, [r7, #28]
 8004878:	689b      	ldr	r3, [r3, #8]
 800487a:	69fa      	ldr	r2, [r7, #28]
 800487c:	68d2      	ldr	r2, [r2, #12]
 800487e:	609a      	str	r2, [r3, #8]
 8004880:	69fb      	ldr	r3, [r7, #28]
 8004882:	68db      	ldr	r3, [r3, #12]
 8004884:	69fa      	ldr	r2, [r7, #28]
 8004886:	6892      	ldr	r2, [r2, #8]
 8004888:	605a      	str	r2, [r3, #4]
 800488a:	68bb      	ldr	r3, [r7, #8]
 800488c:	685a      	ldr	r2, [r3, #4]
 800488e:	69fb      	ldr	r3, [r7, #28]
 8004890:	3304      	adds	r3, #4
 8004892:	429a      	cmp	r2, r3
 8004894:	d103      	bne.n	800489e <xTaskResumeAll+0xaa>
 8004896:	69fb      	ldr	r3, [r7, #28]
 8004898:	68da      	ldr	r2, [r3, #12]
 800489a:	68bb      	ldr	r3, [r7, #8]
 800489c:	605a      	str	r2, [r3, #4]
 800489e:	69fb      	ldr	r3, [r7, #28]
 80048a0:	2200      	movs	r2, #0
 80048a2:	615a      	str	r2, [r3, #20]
 80048a4:	68bb      	ldr	r3, [r7, #8]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	1e5a      	subs	r2, r3, #1
 80048aa:	68bb      	ldr	r3, [r7, #8]
 80048ac:	601a      	str	r2, [r3, #0]
                        prvAddTaskToReadyList( pxTCB );
 80048ae:	69fb      	ldr	r3, [r7, #28]
 80048b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048b2:	2201      	movs	r2, #1
 80048b4:	409a      	lsls	r2, r3
 80048b6:	4b45      	ldr	r3, [pc, #276]	@ (80049cc <xTaskResumeAll+0x1d8>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4313      	orrs	r3, r2
 80048bc:	4a43      	ldr	r2, [pc, #268]	@ (80049cc <xTaskResumeAll+0x1d8>)
 80048be:	6013      	str	r3, [r2, #0]
 80048c0:	69fb      	ldr	r3, [r7, #28]
 80048c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80048c4:	4942      	ldr	r1, [pc, #264]	@ (80049d0 <xTaskResumeAll+0x1dc>)
 80048c6:	4613      	mov	r3, r2
 80048c8:	009b      	lsls	r3, r3, #2
 80048ca:	4413      	add	r3, r2
 80048cc:	009b      	lsls	r3, r3, #2
 80048ce:	440b      	add	r3, r1
 80048d0:	3304      	adds	r3, #4
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	607b      	str	r3, [r7, #4]
 80048d6:	69fb      	ldr	r3, [r7, #28]
 80048d8:	687a      	ldr	r2, [r7, #4]
 80048da:	609a      	str	r2, [r3, #8]
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	689a      	ldr	r2, [r3, #8]
 80048e0:	69fb      	ldr	r3, [r7, #28]
 80048e2:	60da      	str	r2, [r3, #12]
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	689b      	ldr	r3, [r3, #8]
 80048e8:	69fa      	ldr	r2, [r7, #28]
 80048ea:	3204      	adds	r2, #4
 80048ec:	605a      	str	r2, [r3, #4]
 80048ee:	69fb      	ldr	r3, [r7, #28]
 80048f0:	1d1a      	adds	r2, r3, #4
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	609a      	str	r2, [r3, #8]
 80048f6:	69fb      	ldr	r3, [r7, #28]
 80048f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80048fa:	4613      	mov	r3, r2
 80048fc:	009b      	lsls	r3, r3, #2
 80048fe:	4413      	add	r3, r2
 8004900:	009b      	lsls	r3, r3, #2
 8004902:	4a33      	ldr	r2, [pc, #204]	@ (80049d0 <xTaskResumeAll+0x1dc>)
 8004904:	441a      	add	r2, r3
 8004906:	69fb      	ldr	r3, [r7, #28]
 8004908:	615a      	str	r2, [r3, #20]
 800490a:	69fb      	ldr	r3, [r7, #28]
 800490c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800490e:	4930      	ldr	r1, [pc, #192]	@ (80049d0 <xTaskResumeAll+0x1dc>)
 8004910:	4613      	mov	r3, r2
 8004912:	009b      	lsls	r3, r3, #2
 8004914:	4413      	add	r3, r2
 8004916:	009b      	lsls	r3, r3, #2
 8004918:	440b      	add	r3, r1
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	69fa      	ldr	r2, [r7, #28]
 800491e:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004920:	1c59      	adds	r1, r3, #1
 8004922:	482b      	ldr	r0, [pc, #172]	@ (80049d0 <xTaskResumeAll+0x1dc>)
 8004924:	4613      	mov	r3, r2
 8004926:	009b      	lsls	r3, r3, #2
 8004928:	4413      	add	r3, r2
 800492a:	009b      	lsls	r3, r3, #2
 800492c:	4403      	add	r3, r0
 800492e:	6019      	str	r1, [r3, #0]

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            /* If the moved task has a priority higher than the current
                             * task then a yield must be performed. */
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004930:	69fb      	ldr	r3, [r7, #28]
 8004932:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004934:	4b27      	ldr	r3, [pc, #156]	@ (80049d4 <xTaskResumeAll+0x1e0>)
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800493a:	429a      	cmp	r2, r3
 800493c:	d904      	bls.n	8004948 <xTaskResumeAll+0x154>
                            {
                                xYieldPendings[ xCoreID ] = pdTRUE;
 800493e:	4a26      	ldr	r2, [pc, #152]	@ (80049d8 <xTaskResumeAll+0x1e4>)
 8004940:	693b      	ldr	r3, [r7, #16]
 8004942:	2101      	movs	r1, #1
 8004944:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004948:	4b1f      	ldr	r3, [pc, #124]	@ (80049c8 <xTaskResumeAll+0x1d4>)
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	2b00      	cmp	r3, #0
 800494e:	f47f af6c 	bne.w	800482a <xTaskResumeAll+0x36>
                             * which sets xYieldPendings for the current core to pdTRUE. */
                        }
                        #endif /* #if ( configNUMBER_OF_CORES == 1 ) */
                    }

                    if( pxTCB != NULL )
 8004952:	69fb      	ldr	r3, [r7, #28]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d001      	beq.n	800495c <xTaskResumeAll+0x168>
                         * which may have prevented the next unblock time from being
                         * re-calculated, in which case re-calculate it now.  Mainly
                         * important for low power tickless implementations, where
                         * this can prevent an unnecessary exit from low power
                         * state. */
                        prvResetNextTaskUnblockTime();
 8004958:	f000 fb8e 	bl	8005078 <prvResetNextTaskUnblockTime>
                     * It should be safe to call xTaskIncrementTick here from any core
                     * since we are in a critical section and xTaskIncrementTick itself
                     * protects itself within a critical section. Suspending the scheduler
                     * from any core causes xTaskIncrementTick to increment uxPendedCounts. */
                    {
                        TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800495c:	4b1f      	ldr	r3, [pc, #124]	@ (80049dc <xTaskResumeAll+0x1e8>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	617b      	str	r3, [r7, #20]

                        if( xPendedCounts > ( TickType_t ) 0U )
 8004962:	697b      	ldr	r3, [r7, #20]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d012      	beq.n	800498e <xTaskResumeAll+0x19a>
                        {
                            do
                            {
                                if( xTaskIncrementTick() != pdFALSE )
 8004968:	f000 f8ca 	bl	8004b00 <xTaskIncrementTick>
 800496c:	4603      	mov	r3, r0
 800496e:	2b00      	cmp	r3, #0
 8004970:	d004      	beq.n	800497c <xTaskResumeAll+0x188>
                                {
                                    /* Other cores are interrupted from
                                     * within xTaskIncrementTick(). */
                                    xYieldPendings[ xCoreID ] = pdTRUE;
 8004972:	4a19      	ldr	r2, [pc, #100]	@ (80049d8 <xTaskResumeAll+0x1e4>)
 8004974:	693b      	ldr	r3, [r7, #16]
 8004976:	2101      	movs	r1, #1
 8004978:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                else
                                {
                                    mtCOVERAGE_TEST_MARKER();
                                }

                                --xPendedCounts;
 800497c:	697b      	ldr	r3, [r7, #20]
 800497e:	3b01      	subs	r3, #1
 8004980:	617b      	str	r3, [r7, #20]
                            } while( xPendedCounts > ( TickType_t ) 0U );
 8004982:	697b      	ldr	r3, [r7, #20]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d1ef      	bne.n	8004968 <xTaskResumeAll+0x174>

                            xPendedTicks = 0;
 8004988:	4b14      	ldr	r3, [pc, #80]	@ (80049dc <xTaskResumeAll+0x1e8>)
 800498a:	2200      	movs	r2, #0
 800498c:	601a      	str	r2, [r3, #0]
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }

                    if( xYieldPendings[ xCoreID ] != pdFALSE )
 800498e:	4a12      	ldr	r2, [pc, #72]	@ (80049d8 <xTaskResumeAll+0x1e4>)
 8004990:	693b      	ldr	r3, [r7, #16]
 8004992:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d00b      	beq.n	80049b2 <xTaskResumeAll+0x1be>
                    {
                        #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 800499a:	2301      	movs	r3, #1
 800499c:	61bb      	str	r3, [r7, #24]
                        }
                        #endif /* #if ( configUSE_PREEMPTION != 0 ) */

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            taskYIELD_TASK_CORE_IF_USING_PREEMPTION( pxCurrentTCB );
 800499e:	4b0d      	ldr	r3, [pc, #52]	@ (80049d4 <xTaskResumeAll+0x1e0>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	4b0f      	ldr	r3, [pc, #60]	@ (80049e0 <xTaskResumeAll+0x1ec>)
 80049a4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80049a8:	601a      	str	r2, [r3, #0]
 80049aa:	f3bf 8f4f 	dsb	sy
 80049ae:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80049b2:	f7ff f923 	bl	8003bfc <vPortExitCritical>
    }

    traceRETURN_xTaskResumeAll( xAlreadyYielded );

    return xAlreadyYielded;
 80049b6:	69bb      	ldr	r3, [r7, #24]
}
 80049b8:	4618      	mov	r0, r3
 80049ba:	3720      	adds	r7, #32
 80049bc:	46bd      	mov	sp, r7
 80049be:	bd80      	pop	{r7, pc}
 80049c0:	20003244 	.word	0x20003244
 80049c4:	2000321c 	.word	0x2000321c
 80049c8:	200031dc 	.word	0x200031dc
 80049cc:	20003224 	.word	0x20003224
 80049d0:	20003148 	.word	0x20003148
 80049d4:	20003144 	.word	0x20003144
 80049d8:	20003230 	.word	0x20003230
 80049dc:	2000322c 	.word	0x2000322c
 80049e0:	e000ed04 	.word	0xe000ed04

080049e4 <uxTaskGetSystemState>:
#if ( configUSE_TRACE_FACILITY == 1 )

    UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray,
                                      const UBaseType_t uxArraySize,
                                      configRUN_TIME_COUNTER_TYPE * const pulTotalRunTime )
    {
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b086      	sub	sp, #24
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	60f8      	str	r0, [r7, #12]
 80049ec:	60b9      	str	r1, [r7, #8]
 80049ee:	607a      	str	r2, [r7, #4]
        UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 80049f0:	2300      	movs	r3, #0
 80049f2:	617b      	str	r3, [r7, #20]
 80049f4:	2305      	movs	r3, #5
 80049f6:	613b      	str	r3, [r7, #16]

        traceENTER_uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, pulTotalRunTime );

        vTaskSuspendAll();
 80049f8:	f7ff feee 	bl	80047d8 <vTaskSuspendAll>
        {
            /* Is there a space in the array for each task in the system? */
            if( uxArraySize >= uxCurrentNumberOfTasks )
 80049fc:	4b3a      	ldr	r3, [pc, #232]	@ (8004ae8 <uxTaskGetSystemState+0x104>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	68ba      	ldr	r2, [r7, #8]
 8004a02:	429a      	cmp	r2, r3
 8004a04:	d368      	bcc.n	8004ad8 <uxTaskGetSystemState+0xf4>
            {
                /* Fill in an TaskStatus_t structure with information on each
                 * task in the Ready state. */
                do
                {
                    uxQueue--;
 8004a06:	693b      	ldr	r3, [r7, #16]
 8004a08:	3b01      	subs	r3, #1
 8004a0a:	613b      	str	r3, [r7, #16]
                    uxTask = ( UBaseType_t ) ( uxTask + prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady ) );
 8004a0c:	697a      	ldr	r2, [r7, #20]
 8004a0e:	4613      	mov	r3, r2
 8004a10:	00db      	lsls	r3, r3, #3
 8004a12:	4413      	add	r3, r2
 8004a14:	009b      	lsls	r3, r3, #2
 8004a16:	461a      	mov	r2, r3
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	1898      	adds	r0, r3, r2
 8004a1c:	693a      	ldr	r2, [r7, #16]
 8004a1e:	4613      	mov	r3, r2
 8004a20:	009b      	lsls	r3, r3, #2
 8004a22:	4413      	add	r3, r2
 8004a24:	009b      	lsls	r3, r3, #2
 8004a26:	4a31      	ldr	r2, [pc, #196]	@ (8004aec <uxTaskGetSystemState+0x108>)
 8004a28:	4413      	add	r3, r2
 8004a2a:	2201      	movs	r2, #1
 8004a2c:	4619      	mov	r1, r3
 8004a2e:	f000 fac3 	bl	8004fb8 <prvListTasksWithinSingleList>
 8004a32:	4602      	mov	r2, r0
 8004a34:	697b      	ldr	r3, [r7, #20]
 8004a36:	4413      	add	r3, r2
 8004a38:	617b      	str	r3, [r7, #20]
                } while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY );
 8004a3a:	693b      	ldr	r3, [r7, #16]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d1e2      	bne.n	8004a06 <uxTaskGetSystemState+0x22>

                /* Fill in an TaskStatus_t structure with information on each
                 * task in the Blocked state. */
                uxTask = ( UBaseType_t ) ( uxTask + prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked ) );
 8004a40:	697a      	ldr	r2, [r7, #20]
 8004a42:	4613      	mov	r3, r2
 8004a44:	00db      	lsls	r3, r3, #3
 8004a46:	4413      	add	r3, r2
 8004a48:	009b      	lsls	r3, r3, #2
 8004a4a:	461a      	mov	r2, r3
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	4413      	add	r3, r2
 8004a50:	4a27      	ldr	r2, [pc, #156]	@ (8004af0 <uxTaskGetSystemState+0x10c>)
 8004a52:	6811      	ldr	r1, [r2, #0]
 8004a54:	2202      	movs	r2, #2
 8004a56:	4618      	mov	r0, r3
 8004a58:	f000 faae 	bl	8004fb8 <prvListTasksWithinSingleList>
 8004a5c:	4602      	mov	r2, r0
 8004a5e:	697b      	ldr	r3, [r7, #20]
 8004a60:	4413      	add	r3, r2
 8004a62:	617b      	str	r3, [r7, #20]
                uxTask = ( UBaseType_t ) ( uxTask + prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked ) );
 8004a64:	697a      	ldr	r2, [r7, #20]
 8004a66:	4613      	mov	r3, r2
 8004a68:	00db      	lsls	r3, r3, #3
 8004a6a:	4413      	add	r3, r2
 8004a6c:	009b      	lsls	r3, r3, #2
 8004a6e:	461a      	mov	r2, r3
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	4413      	add	r3, r2
 8004a74:	4a1f      	ldr	r2, [pc, #124]	@ (8004af4 <uxTaskGetSystemState+0x110>)
 8004a76:	6811      	ldr	r1, [r2, #0]
 8004a78:	2202      	movs	r2, #2
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	f000 fa9c 	bl	8004fb8 <prvListTasksWithinSingleList>
 8004a80:	4602      	mov	r2, r0
 8004a82:	697b      	ldr	r3, [r7, #20]
 8004a84:	4413      	add	r3, r2
 8004a86:	617b      	str	r3, [r7, #20]

                #if ( INCLUDE_vTaskDelete == 1 )
                {
                    /* Fill in an TaskStatus_t structure with information on
                     * each task that has been deleted but not yet cleaned up. */
                    uxTask = ( UBaseType_t ) ( uxTask + prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted ) );
 8004a88:	697a      	ldr	r2, [r7, #20]
 8004a8a:	4613      	mov	r3, r2
 8004a8c:	00db      	lsls	r3, r3, #3
 8004a8e:	4413      	add	r3, r2
 8004a90:	009b      	lsls	r3, r3, #2
 8004a92:	461a      	mov	r2, r3
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	4413      	add	r3, r2
 8004a98:	2204      	movs	r2, #4
 8004a9a:	4917      	ldr	r1, [pc, #92]	@ (8004af8 <uxTaskGetSystemState+0x114>)
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	f000 fa8b 	bl	8004fb8 <prvListTasksWithinSingleList>
 8004aa2:	4602      	mov	r2, r0
 8004aa4:	697b      	ldr	r3, [r7, #20]
 8004aa6:	4413      	add	r3, r2
 8004aa8:	617b      	str	r3, [r7, #20]

                #if ( INCLUDE_vTaskSuspend == 1 )
                {
                    /* Fill in an TaskStatus_t structure with information on
                     * each task in the Suspended state. */
                    uxTask = ( UBaseType_t ) ( uxTask + prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended ) );
 8004aaa:	697a      	ldr	r2, [r7, #20]
 8004aac:	4613      	mov	r3, r2
 8004aae:	00db      	lsls	r3, r3, #3
 8004ab0:	4413      	add	r3, r2
 8004ab2:	009b      	lsls	r3, r3, #2
 8004ab4:	461a      	mov	r2, r3
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	4413      	add	r3, r2
 8004aba:	2203      	movs	r2, #3
 8004abc:	490f      	ldr	r1, [pc, #60]	@ (8004afc <uxTaskGetSystemState+0x118>)
 8004abe:	4618      	mov	r0, r3
 8004ac0:	f000 fa7a 	bl	8004fb8 <prvListTasksWithinSingleList>
 8004ac4:	4602      	mov	r2, r0
 8004ac6:	697b      	ldr	r3, [r7, #20]
 8004ac8:	4413      	add	r3, r2
 8004aca:	617b      	str	r3, [r7, #20]
                        #endif
                    }
                }
                #else /* if ( configGENERATE_RUN_TIME_STATS == 1 ) */
                {
                    if( pulTotalRunTime != NULL )
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d002      	beq.n	8004ad8 <uxTaskGetSystemState+0xf4>
                    {
                        *pulTotalRunTime = 0;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	601a      	str	r2, [r3, #0]
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        ( void ) xTaskResumeAll();
 8004ad8:	f7ff fe8c 	bl	80047f4 <xTaskResumeAll>

        traceRETURN_uxTaskGetSystemState( uxTask );

        return uxTask;
 8004adc:	697b      	ldr	r3, [r7, #20]
    }
 8004ade:	4618      	mov	r0, r3
 8004ae0:	3718      	adds	r7, #24
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	bd80      	pop	{r7, pc}
 8004ae6:	bf00      	nop
 8004ae8:	2000321c 	.word	0x2000321c
 8004aec:	20003148 	.word	0x20003148
 8004af0:	200031d4 	.word	0x200031d4
 8004af4:	200031d8 	.word	0x200031d8
 8004af8:	200031f0 	.word	0x200031f0
 8004afc:	20003208 	.word	0x20003208

08004b00 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b088      	sub	sp, #32
 8004b04:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8004b06:	2300      	movs	r3, #0
 8004b08:	61fb      	str	r3, [r7, #28]

    /* Tick increment should occur on every kernel timer event. Core 0 has the
     * responsibility to increment the tick, or increment the pended ticks if the
     * scheduler is suspended.  If pended ticks is greater than zero, the core that
     * calls xTaskResumeAll has the responsibility to increment the tick. */
    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8004b0a:	4b76      	ldr	r3, [pc, #472]	@ (8004ce4 <xTaskIncrementTick+0x1e4>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	f040 80de 	bne.w	8004cd0 <xTaskIncrementTick+0x1d0>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004b14:	4b74      	ldr	r3, [pc, #464]	@ (8004ce8 <xTaskIncrementTick+0x1e8>)
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	3301      	adds	r3, #1
 8004b1a:	61bb      	str	r3, [r7, #24]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8004b1c:	4a72      	ldr	r2, [pc, #456]	@ (8004ce8 <xTaskIncrementTick+0x1e8>)
 8004b1e:	69bb      	ldr	r3, [r7, #24]
 8004b20:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U )
 8004b22:	69bb      	ldr	r3, [r7, #24]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d110      	bne.n	8004b4a <xTaskIncrementTick+0x4a>
        {
            taskSWITCH_DELAYED_LISTS();
 8004b28:	4b70      	ldr	r3, [pc, #448]	@ (8004cec <xTaskIncrementTick+0x1ec>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	617b      	str	r3, [r7, #20]
 8004b2e:	4b70      	ldr	r3, [pc, #448]	@ (8004cf0 <xTaskIncrementTick+0x1f0>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	4a6e      	ldr	r2, [pc, #440]	@ (8004cec <xTaskIncrementTick+0x1ec>)
 8004b34:	6013      	str	r3, [r2, #0]
 8004b36:	4a6e      	ldr	r2, [pc, #440]	@ (8004cf0 <xTaskIncrementTick+0x1f0>)
 8004b38:	697b      	ldr	r3, [r7, #20]
 8004b3a:	6013      	str	r3, [r2, #0]
 8004b3c:	4b6d      	ldr	r3, [pc, #436]	@ (8004cf4 <xTaskIncrementTick+0x1f4>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	3301      	adds	r3, #1
 8004b42:	4a6c      	ldr	r2, [pc, #432]	@ (8004cf4 <xTaskIncrementTick+0x1f4>)
 8004b44:	6013      	str	r3, [r2, #0]
 8004b46:	f000 fa97 	bl	8005078 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8004b4a:	4b6b      	ldr	r3, [pc, #428]	@ (8004cf8 <xTaskIncrementTick+0x1f8>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	69ba      	ldr	r2, [r7, #24]
 8004b50:	429a      	cmp	r2, r3
 8004b52:	f0c0 80a8 	bcc.w	8004ca6 <xTaskIncrementTick+0x1a6>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004b56:	4b65      	ldr	r3, [pc, #404]	@ (8004cec <xTaskIncrementTick+0x1ec>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d104      	bne.n	8004b6a <xTaskIncrementTick+0x6a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY;
 8004b60:	4b65      	ldr	r3, [pc, #404]	@ (8004cf8 <xTaskIncrementTick+0x1f8>)
 8004b62:	f04f 32ff 	mov.w	r2, #4294967295
 8004b66:	601a      	str	r2, [r3, #0]
                    break;
 8004b68:	e09d      	b.n	8004ca6 <xTaskIncrementTick+0x1a6>
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    /* MISRA Ref 11.5.3 [Void pointer assignment] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                    /* coverity[misra_c_2012_rule_11_5_violation] */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004b6a:	4b60      	ldr	r3, [pc, #384]	@ (8004cec <xTaskIncrementTick+0x1ec>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	68db      	ldr	r3, [r3, #12]
 8004b70:	68db      	ldr	r3, [r3, #12]
 8004b72:	613b      	str	r3, [r7, #16]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004b74:	693b      	ldr	r3, [r7, #16]
 8004b76:	685b      	ldr	r3, [r3, #4]
 8004b78:	60fb      	str	r3, [r7, #12]

                    if( xConstTickCount < xItemValue )
 8004b7a:	69ba      	ldr	r2, [r7, #24]
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	429a      	cmp	r2, r3
 8004b80:	d203      	bcs.n	8004b8a <xTaskIncrementTick+0x8a>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8004b82:	4a5d      	ldr	r2, [pc, #372]	@ (8004cf8 <xTaskIncrementTick+0x1f8>)
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	6013      	str	r3, [r2, #0]
                        break;
 8004b88:	e08d      	b.n	8004ca6 <xTaskIncrementTick+0x1a6>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8004b8a:	693b      	ldr	r3, [r7, #16]
 8004b8c:	695b      	ldr	r3, [r3, #20]
 8004b8e:	60bb      	str	r3, [r7, #8]
 8004b90:	693b      	ldr	r3, [r7, #16]
 8004b92:	689b      	ldr	r3, [r3, #8]
 8004b94:	693a      	ldr	r2, [r7, #16]
 8004b96:	68d2      	ldr	r2, [r2, #12]
 8004b98:	609a      	str	r2, [r3, #8]
 8004b9a:	693b      	ldr	r3, [r7, #16]
 8004b9c:	68db      	ldr	r3, [r3, #12]
 8004b9e:	693a      	ldr	r2, [r7, #16]
 8004ba0:	6892      	ldr	r2, [r2, #8]
 8004ba2:	605a      	str	r2, [r3, #4]
 8004ba4:	68bb      	ldr	r3, [r7, #8]
 8004ba6:	685a      	ldr	r2, [r3, #4]
 8004ba8:	693b      	ldr	r3, [r7, #16]
 8004baa:	3304      	adds	r3, #4
 8004bac:	429a      	cmp	r2, r3
 8004bae:	d103      	bne.n	8004bb8 <xTaskIncrementTick+0xb8>
 8004bb0:	693b      	ldr	r3, [r7, #16]
 8004bb2:	68da      	ldr	r2, [r3, #12]
 8004bb4:	68bb      	ldr	r3, [r7, #8]
 8004bb6:	605a      	str	r2, [r3, #4]
 8004bb8:	693b      	ldr	r3, [r7, #16]
 8004bba:	2200      	movs	r2, #0
 8004bbc:	615a      	str	r2, [r3, #20]
 8004bbe:	68bb      	ldr	r3, [r7, #8]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	1e5a      	subs	r2, r3, #1
 8004bc4:	68bb      	ldr	r3, [r7, #8]
 8004bc6:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004bc8:	693b      	ldr	r3, [r7, #16]
 8004bca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d01e      	beq.n	8004c0e <xTaskIncrementTick+0x10e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8004bd0:	693b      	ldr	r3, [r7, #16]
 8004bd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bd4:	607b      	str	r3, [r7, #4]
 8004bd6:	693b      	ldr	r3, [r7, #16]
 8004bd8:	69db      	ldr	r3, [r3, #28]
 8004bda:	693a      	ldr	r2, [r7, #16]
 8004bdc:	6a12      	ldr	r2, [r2, #32]
 8004bde:	609a      	str	r2, [r3, #8]
 8004be0:	693b      	ldr	r3, [r7, #16]
 8004be2:	6a1b      	ldr	r3, [r3, #32]
 8004be4:	693a      	ldr	r2, [r7, #16]
 8004be6:	69d2      	ldr	r2, [r2, #28]
 8004be8:	605a      	str	r2, [r3, #4]
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	685a      	ldr	r2, [r3, #4]
 8004bee:	693b      	ldr	r3, [r7, #16]
 8004bf0:	3318      	adds	r3, #24
 8004bf2:	429a      	cmp	r2, r3
 8004bf4:	d103      	bne.n	8004bfe <xTaskIncrementTick+0xfe>
 8004bf6:	693b      	ldr	r3, [r7, #16]
 8004bf8:	6a1a      	ldr	r2, [r3, #32]
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	605a      	str	r2, [r3, #4]
 8004bfe:	693b      	ldr	r3, [r7, #16]
 8004c00:	2200      	movs	r2, #0
 8004c02:	629a      	str	r2, [r3, #40]	@ 0x28
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	1e5a      	subs	r2, r3, #1
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8004c0e:	693b      	ldr	r3, [r7, #16]
 8004c10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c12:	2201      	movs	r2, #1
 8004c14:	409a      	lsls	r2, r3
 8004c16:	4b39      	ldr	r3, [pc, #228]	@ (8004cfc <xTaskIncrementTick+0x1fc>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4313      	orrs	r3, r2
 8004c1c:	4a37      	ldr	r2, [pc, #220]	@ (8004cfc <xTaskIncrementTick+0x1fc>)
 8004c1e:	6013      	str	r3, [r2, #0]
 8004c20:	693b      	ldr	r3, [r7, #16]
 8004c22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c24:	4936      	ldr	r1, [pc, #216]	@ (8004d00 <xTaskIncrementTick+0x200>)
 8004c26:	4613      	mov	r3, r2
 8004c28:	009b      	lsls	r3, r3, #2
 8004c2a:	4413      	add	r3, r2
 8004c2c:	009b      	lsls	r3, r3, #2
 8004c2e:	440b      	add	r3, r1
 8004c30:	3304      	adds	r3, #4
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	603b      	str	r3, [r7, #0]
 8004c36:	693b      	ldr	r3, [r7, #16]
 8004c38:	683a      	ldr	r2, [r7, #0]
 8004c3a:	609a      	str	r2, [r3, #8]
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	689a      	ldr	r2, [r3, #8]
 8004c40:	693b      	ldr	r3, [r7, #16]
 8004c42:	60da      	str	r2, [r3, #12]
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	689b      	ldr	r3, [r3, #8]
 8004c48:	693a      	ldr	r2, [r7, #16]
 8004c4a:	3204      	adds	r2, #4
 8004c4c:	605a      	str	r2, [r3, #4]
 8004c4e:	693b      	ldr	r3, [r7, #16]
 8004c50:	1d1a      	adds	r2, r3, #4
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	609a      	str	r2, [r3, #8]
 8004c56:	693b      	ldr	r3, [r7, #16]
 8004c58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c5a:	4613      	mov	r3, r2
 8004c5c:	009b      	lsls	r3, r3, #2
 8004c5e:	4413      	add	r3, r2
 8004c60:	009b      	lsls	r3, r3, #2
 8004c62:	4a27      	ldr	r2, [pc, #156]	@ (8004d00 <xTaskIncrementTick+0x200>)
 8004c64:	441a      	add	r2, r3
 8004c66:	693b      	ldr	r3, [r7, #16]
 8004c68:	615a      	str	r2, [r3, #20]
 8004c6a:	693b      	ldr	r3, [r7, #16]
 8004c6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c6e:	4924      	ldr	r1, [pc, #144]	@ (8004d00 <xTaskIncrementTick+0x200>)
 8004c70:	4613      	mov	r3, r2
 8004c72:	009b      	lsls	r3, r3, #2
 8004c74:	4413      	add	r3, r2
 8004c76:	009b      	lsls	r3, r3, #2
 8004c78:	440b      	add	r3, r1
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	693a      	ldr	r2, [r7, #16]
 8004c7e:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004c80:	1c59      	adds	r1, r3, #1
 8004c82:	481f      	ldr	r0, [pc, #124]	@ (8004d00 <xTaskIncrementTick+0x200>)
 8004c84:	4613      	mov	r3, r2
 8004c86:	009b      	lsls	r3, r3, #2
 8004c88:	4413      	add	r3, r2
 8004c8a:	009b      	lsls	r3, r3, #2
 8004c8c:	4403      	add	r3, r0
 8004c8e:	6019      	str	r1, [r3, #0]
                             * task.
                             * The case of equal priority tasks sharing
                             * processing time (which happens when both
                             * preemption and time slicing are on) is
                             * handled below.*/
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004c90:	693b      	ldr	r3, [r7, #16]
 8004c92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c94:	4b1b      	ldr	r3, [pc, #108]	@ (8004d04 <xTaskIncrementTick+0x204>)
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c9a:	429a      	cmp	r2, r3
 8004c9c:	f67f af5b 	bls.w	8004b56 <xTaskIncrementTick+0x56>
                            {
                                xSwitchRequired = pdTRUE;
 8004ca0:	2301      	movs	r3, #1
 8004ca2:	61fb      	str	r3, [r7, #28]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004ca4:	e757      	b.n	8004b56 <xTaskIncrementTick+0x56>
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > 1U )
 8004ca6:	4b17      	ldr	r3, [pc, #92]	@ (8004d04 <xTaskIncrementTick+0x204>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004cac:	4914      	ldr	r1, [pc, #80]	@ (8004d00 <xTaskIncrementTick+0x200>)
 8004cae:	4613      	mov	r3, r2
 8004cb0:	009b      	lsls	r3, r3, #2
 8004cb2:	4413      	add	r3, r2
 8004cb4:	009b      	lsls	r3, r3, #2
 8004cb6:	440b      	add	r3, r1
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	2b01      	cmp	r3, #1
 8004cbc:	d901      	bls.n	8004cc2 <xTaskIncrementTick+0x1c2>
                {
                    xSwitchRequired = pdTRUE;
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	61fb      	str	r3, [r7, #28]
        #if ( configUSE_PREEMPTION == 1 )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                /* For single core the core ID is always 0. */
                if( xYieldPendings[ 0 ] != pdFALSE )
 8004cc2:	4b11      	ldr	r3, [pc, #68]	@ (8004d08 <xTaskIncrementTick+0x208>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d007      	beq.n	8004cda <xTaskIncrementTick+0x1da>
                {
                    xSwitchRequired = pdTRUE;
 8004cca:	2301      	movs	r3, #1
 8004ccc:	61fb      	str	r3, [r7, #28]
 8004cce:	e004      	b.n	8004cda <xTaskIncrementTick+0x1da>
        }
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    else
    {
        xPendedTicks += 1U;
 8004cd0:	4b0e      	ldr	r3, [pc, #56]	@ (8004d0c <xTaskIncrementTick+0x20c>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	3301      	adds	r3, #1
 8004cd6:	4a0d      	ldr	r2, [pc, #52]	@ (8004d0c <xTaskIncrementTick+0x20c>)
 8004cd8:	6013      	str	r3, [r2, #0]
        #endif
    }

    traceRETURN_xTaskIncrementTick( xSwitchRequired );

    return xSwitchRequired;
 8004cda:	69fb      	ldr	r3, [r7, #28]
}
 8004cdc:	4618      	mov	r0, r3
 8004cde:	3720      	adds	r7, #32
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	bd80      	pop	{r7, pc}
 8004ce4:	20003244 	.word	0x20003244
 8004ce8:	20003220 	.word	0x20003220
 8004cec:	200031d4 	.word	0x200031d4
 8004cf0:	200031d8 	.word	0x200031d8
 8004cf4:	20003234 	.word	0x20003234
 8004cf8:	2000323c 	.word	0x2000323c
 8004cfc:	20003224 	.word	0x20003224
 8004d00:	20003148 	.word	0x20003148
 8004d04:	20003144 	.word	0x20003144
 8004d08:	20003230 	.word	0x20003230
 8004d0c:	2000322c 	.word	0x2000322c

08004d10 <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )
    void vTaskSwitchContext( void )
    {
 8004d10:	b480      	push	{r7}
 8004d12:	b085      	sub	sp, #20
 8004d14:	af00      	add	r7, sp, #0
        traceENTER_vTaskSwitchContext();

        if( uxSchedulerSuspended != ( UBaseType_t ) 0U )
 8004d16:	4b1c      	ldr	r3, [pc, #112]	@ (8004d88 <vTaskSwitchContext+0x78>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d003      	beq.n	8004d26 <vTaskSwitchContext+0x16>
        {
            /* The scheduler is currently suspended - do not allow a context
             * switch. */
            xYieldPendings[ 0 ] = pdTRUE;
 8004d1e:	4b1b      	ldr	r3, [pc, #108]	@ (8004d8c <vTaskSwitchContext+0x7c>)
 8004d20:	2201      	movs	r2, #1
 8004d22:	601a      	str	r2, [r3, #0]
            }
            #endif
        }

        traceRETURN_vTaskSwitchContext();
    }
 8004d24:	e02b      	b.n	8004d7e <vTaskSwitchContext+0x6e>
            xYieldPendings[ 0 ] = pdFALSE;
 8004d26:	4b19      	ldr	r3, [pc, #100]	@ (8004d8c <vTaskSwitchContext+0x7c>)
 8004d28:	2200      	movs	r2, #0
 8004d2a:	601a      	str	r2, [r3, #0]
            taskSELECT_HIGHEST_PRIORITY_TASK();
 8004d2c:	4b18      	ldr	r3, [pc, #96]	@ (8004d90 <vTaskSwitchContext+0x80>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	607b      	str	r3, [r7, #4]
        __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	fab3 f383 	clz	r3, r3
 8004d38:	70fb      	strb	r3, [r7, #3]
        return ucReturn;
 8004d3a:	78fb      	ldrb	r3, [r7, #3]
 8004d3c:	f1c3 031f 	rsb	r3, r3, #31
 8004d40:	60fb      	str	r3, [r7, #12]
 8004d42:	68fa      	ldr	r2, [r7, #12]
 8004d44:	4613      	mov	r3, r2
 8004d46:	009b      	lsls	r3, r3, #2
 8004d48:	4413      	add	r3, r2
 8004d4a:	009b      	lsls	r3, r3, #2
 8004d4c:	4a11      	ldr	r2, [pc, #68]	@ (8004d94 <vTaskSwitchContext+0x84>)
 8004d4e:	4413      	add	r3, r2
 8004d50:	60bb      	str	r3, [r7, #8]
 8004d52:	68bb      	ldr	r3, [r7, #8]
 8004d54:	685b      	ldr	r3, [r3, #4]
 8004d56:	685a      	ldr	r2, [r3, #4]
 8004d58:	68bb      	ldr	r3, [r7, #8]
 8004d5a:	605a      	str	r2, [r3, #4]
 8004d5c:	68bb      	ldr	r3, [r7, #8]
 8004d5e:	685a      	ldr	r2, [r3, #4]
 8004d60:	68bb      	ldr	r3, [r7, #8]
 8004d62:	3308      	adds	r3, #8
 8004d64:	429a      	cmp	r2, r3
 8004d66:	d103      	bne.n	8004d70 <vTaskSwitchContext+0x60>
 8004d68:	68bb      	ldr	r3, [r7, #8]
 8004d6a:	68da      	ldr	r2, [r3, #12]
 8004d6c:	68bb      	ldr	r3, [r7, #8]
 8004d6e:	605a      	str	r2, [r3, #4]
 8004d70:	68bb      	ldr	r3, [r7, #8]
 8004d72:	685b      	ldr	r3, [r3, #4]
 8004d74:	68db      	ldr	r3, [r3, #12]
 8004d76:	4a08      	ldr	r2, [pc, #32]	@ (8004d98 <vTaskSwitchContext+0x88>)
 8004d78:	6013      	str	r3, [r2, #0]
            portTASK_SWITCH_HOOK( pxCurrentTCB );
 8004d7a:	4b07      	ldr	r3, [pc, #28]	@ (8004d98 <vTaskSwitchContext+0x88>)
 8004d7c:	681b      	ldr	r3, [r3, #0]
    }
 8004d7e:	bf00      	nop
 8004d80:	3714      	adds	r7, #20
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bc80      	pop	{r7}
 8004d86:	4770      	bx	lr
 8004d88:	20003244 	.word	0x20003244
 8004d8c:	20003230 	.word	0x20003230
 8004d90:	20003224 	.word	0x20003224
 8004d94:	20003148 	.word	0x20003148
 8004d98:	20003144 	.word	0x20003144

08004d9c <prvIdleTask>:
 * void prvIdleTask( void *pvParameters );
 *
 */

static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b082      	sub	sp, #8
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]

    for( ; configCONTROL_INFINITE_LOOP(); )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8004da4:	f000 f852 	bl	8004e4c <prvCheckTasksWaitingTermination>
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains one more task than the
             * number of idle tasks, which is equal to the configured numbers of cores
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) configNUMBER_OF_CORES )
 8004da8:	4b06      	ldr	r3, [pc, #24]	@ (8004dc4 <prvIdleTask+0x28>)
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	2b01      	cmp	r3, #1
 8004dae:	d9f9      	bls.n	8004da4 <prvIdleTask+0x8>
            {
                taskYIELD();
 8004db0:	4b05      	ldr	r3, [pc, #20]	@ (8004dc8 <prvIdleTask+0x2c>)
 8004db2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004db6:	601a      	str	r2, [r3, #0]
 8004db8:	f3bf 8f4f 	dsb	sy
 8004dbc:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8004dc0:	e7f0      	b.n	8004da4 <prvIdleTask+0x8>
 8004dc2:	bf00      	nop
 8004dc4:	20003148 	.word	0x20003148
 8004dc8:	e000ed04 	.word	0xe000ed04

08004dcc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b082      	sub	sp, #8
 8004dd0:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	607b      	str	r3, [r7, #4]
 8004dd6:	e00c      	b.n	8004df2 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004dd8:	687a      	ldr	r2, [r7, #4]
 8004dda:	4613      	mov	r3, r2
 8004ddc:	009b      	lsls	r3, r3, #2
 8004dde:	4413      	add	r3, r2
 8004de0:	009b      	lsls	r3, r3, #2
 8004de2:	4a12      	ldr	r2, [pc, #72]	@ (8004e2c <prvInitialiseTaskLists+0x60>)
 8004de4:	4413      	add	r3, r2
 8004de6:	4618      	mov	r0, r3
 8004de8:	f7ff f920 	bl	800402c <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	3301      	adds	r3, #1
 8004df0:	607b      	str	r3, [r7, #4]
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2b04      	cmp	r3, #4
 8004df6:	d9ef      	bls.n	8004dd8 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8004df8:	480d      	ldr	r0, [pc, #52]	@ (8004e30 <prvInitialiseTaskLists+0x64>)
 8004dfa:	f7ff f917 	bl	800402c <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8004dfe:	480d      	ldr	r0, [pc, #52]	@ (8004e34 <prvInitialiseTaskLists+0x68>)
 8004e00:	f7ff f914 	bl	800402c <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8004e04:	480c      	ldr	r0, [pc, #48]	@ (8004e38 <prvInitialiseTaskLists+0x6c>)
 8004e06:	f7ff f911 	bl	800402c <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8004e0a:	480c      	ldr	r0, [pc, #48]	@ (8004e3c <prvInitialiseTaskLists+0x70>)
 8004e0c:	f7ff f90e 	bl	800402c <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8004e10:	480b      	ldr	r0, [pc, #44]	@ (8004e40 <prvInitialiseTaskLists+0x74>)
 8004e12:	f7ff f90b 	bl	800402c <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8004e16:	4b0b      	ldr	r3, [pc, #44]	@ (8004e44 <prvInitialiseTaskLists+0x78>)
 8004e18:	4a05      	ldr	r2, [pc, #20]	@ (8004e30 <prvInitialiseTaskLists+0x64>)
 8004e1a:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004e1c:	4b0a      	ldr	r3, [pc, #40]	@ (8004e48 <prvInitialiseTaskLists+0x7c>)
 8004e1e:	4a05      	ldr	r2, [pc, #20]	@ (8004e34 <prvInitialiseTaskLists+0x68>)
 8004e20:	601a      	str	r2, [r3, #0]
}
 8004e22:	bf00      	nop
 8004e24:	3708      	adds	r7, #8
 8004e26:	46bd      	mov	sp, r7
 8004e28:	bd80      	pop	{r7, pc}
 8004e2a:	bf00      	nop
 8004e2c:	20003148 	.word	0x20003148
 8004e30:	200031ac 	.word	0x200031ac
 8004e34:	200031c0 	.word	0x200031c0
 8004e38:	200031dc 	.word	0x200031dc
 8004e3c:	200031f0 	.word	0x200031f0
 8004e40:	20003208 	.word	0x20003208
 8004e44:	200031d4 	.word	0x200031d4
 8004e48:	200031d8 	.word	0x200031d8

08004e4c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b082      	sub	sp, #8
 8004e50:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004e52:	e019      	b.n	8004e88 <prvCheckTasksWaitingTermination+0x3c>
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                taskENTER_CRITICAL();
 8004e54:	f7fe feb8 	bl	8003bc8 <vPortEnterCritical>
                {
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004e58:	4b10      	ldr	r3, [pc, #64]	@ (8004e9c <prvCheckTasksWaitingTermination+0x50>)
 8004e5a:	68db      	ldr	r3, [r3, #12]
 8004e5c:	68db      	ldr	r3, [r3, #12]
 8004e5e:	607b      	str	r3, [r7, #4]
                        ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	3304      	adds	r3, #4
 8004e64:	4618      	mov	r0, r3
 8004e66:	f7ff f967 	bl	8004138 <uxListRemove>
                        --uxCurrentNumberOfTasks;
 8004e6a:	4b0d      	ldr	r3, [pc, #52]	@ (8004ea0 <prvCheckTasksWaitingTermination+0x54>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	3b01      	subs	r3, #1
 8004e70:	4a0b      	ldr	r2, [pc, #44]	@ (8004ea0 <prvCheckTasksWaitingTermination+0x54>)
 8004e72:	6013      	str	r3, [r2, #0]
                        --uxDeletedTasksWaitingCleanUp;
 8004e74:	4b0b      	ldr	r3, [pc, #44]	@ (8004ea4 <prvCheckTasksWaitingTermination+0x58>)
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	3b01      	subs	r3, #1
 8004e7a:	4a0a      	ldr	r2, [pc, #40]	@ (8004ea4 <prvCheckTasksWaitingTermination+0x58>)
 8004e7c:	6013      	str	r3, [r2, #0]
                    }
                }
                taskEXIT_CRITICAL();
 8004e7e:	f7fe febd 	bl	8003bfc <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8004e82:	6878      	ldr	r0, [r7, #4]
 8004e84:	f000 f8e7 	bl	8005056 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004e88:	4b06      	ldr	r3, [pc, #24]	@ (8004ea4 <prvCheckTasksWaitingTermination+0x58>)
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d1e1      	bne.n	8004e54 <prvCheckTasksWaitingTermination+0x8>
            }
            #endif /* #if( configNUMBER_OF_CORES == 1 ) */
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8004e90:	bf00      	nop
 8004e92:	bf00      	nop
 8004e94:	3708      	adds	r7, #8
 8004e96:	46bd      	mov	sp, r7
 8004e98:	bd80      	pop	{r7, pc}
 8004e9a:	bf00      	nop
 8004e9c:	200031f0 	.word	0x200031f0
 8004ea0:	2000321c 	.word	0x2000321c
 8004ea4:	20003204 	.word	0x20003204

08004ea8 <vTaskGetInfo>:

    void vTaskGetInfo( TaskHandle_t xTask,
                       TaskStatus_t * pxTaskStatus,
                       BaseType_t xGetFreeStackSpace,
                       eTaskState eState )
    {
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b086      	sub	sp, #24
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	60f8      	str	r0, [r7, #12]
 8004eb0:	60b9      	str	r1, [r7, #8]
 8004eb2:	607a      	str	r2, [r7, #4]
 8004eb4:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;

        traceENTER_vTaskGetInfo( xTask, pxTaskStatus, xGetFreeStackSpace, eState );

        /* xTask is NULL then get the state of the calling task. */
        pxTCB = prvGetTCBFromHandle( xTask );
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d102      	bne.n	8004ec2 <vTaskGetInfo+0x1a>
 8004ebc:	4b3c      	ldr	r3, [pc, #240]	@ (8004fb0 <vTaskGetInfo+0x108>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	e000      	b.n	8004ec4 <vTaskGetInfo+0x1c>
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	613b      	str	r3, [r7, #16]

        pxTaskStatus->xHandle = pxTCB;
 8004ec6:	68bb      	ldr	r3, [r7, #8]
 8004ec8:	693a      	ldr	r2, [r7, #16]
 8004eca:	601a      	str	r2, [r3, #0]
        pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName[ 0 ] );
 8004ecc:	693b      	ldr	r3, [r7, #16]
 8004ece:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8004ed2:	68bb      	ldr	r3, [r7, #8]
 8004ed4:	605a      	str	r2, [r3, #4]
        pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 8004ed6:	693b      	ldr	r3, [r7, #16]
 8004ed8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004eda:	68bb      	ldr	r3, [r7, #8]
 8004edc:	611a      	str	r2, [r3, #16]
        pxTaskStatus->pxStackBase = pxTCB->pxStack;
 8004ede:	693b      	ldr	r3, [r7, #16]
 8004ee0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004ee2:	68bb      	ldr	r3, [r7, #8]
 8004ee4:	61da      	str	r2, [r3, #28]
        #if ( ( portSTACK_GROWTH > 0 ) || ( configRECORD_STACK_HIGH_ADDRESS == 1 ) )
            pxTaskStatus->pxTopOfStack = ( StackType_t * ) pxTCB->pxTopOfStack;
            pxTaskStatus->pxEndOfStack = pxTCB->pxEndOfStack;
        #endif
        pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 8004ee6:	693b      	ldr	r3, [r7, #16]
 8004ee8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004eea:	68bb      	ldr	r3, [r7, #8]
 8004eec:	609a      	str	r2, [r3, #8]
        }
        #endif

        #if ( configUSE_MUTEXES == 1 )
        {
            pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
 8004eee:	693b      	ldr	r3, [r7, #16]
 8004ef0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004ef2:	68bb      	ldr	r3, [r7, #8]
 8004ef4:	615a      	str	r2, [r3, #20]
        {
            pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
        }
        #else
        {
            pxTaskStatus->ulRunTimeCounter = ( configRUN_TIME_COUNTER_TYPE ) 0;
 8004ef6:	68bb      	ldr	r3, [r7, #8]
 8004ef8:	2200      	movs	r2, #0
 8004efa:	619a      	str	r2, [r3, #24]
        #endif

        /* Obtaining the task state is a little fiddly, so is only done if the
         * value of eState passed into this function is eInvalid - otherwise the
         * state is just set to whatever is passed in. */
        if( eState != eInvalid )
 8004efc:	78fb      	ldrb	r3, [r7, #3]
 8004efe:	2b05      	cmp	r3, #5
 8004f00:	d03c      	beq.n	8004f7c <vTaskGetInfo+0xd4>
        {
            if( taskTASK_IS_RUNNING( pxTCB ) == pdTRUE )
 8004f02:	4b2b      	ldr	r3, [pc, #172]	@ (8004fb0 <vTaskGetInfo+0x108>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	693a      	ldr	r2, [r7, #16]
 8004f08:	429a      	cmp	r2, r3
 8004f0a:	d103      	bne.n	8004f14 <vTaskGetInfo+0x6c>
            {
                pxTaskStatus->eCurrentState = eRunning;
 8004f0c:	68bb      	ldr	r3, [r7, #8]
 8004f0e:	2200      	movs	r2, #0
 8004f10:	731a      	strb	r2, [r3, #12]
 8004f12:	e03a      	b.n	8004f8a <vTaskGetInfo+0xe2>
            }
            else
            {
                pxTaskStatus->eCurrentState = eState;
 8004f14:	68bb      	ldr	r3, [r7, #8]
 8004f16:	78fa      	ldrb	r2, [r7, #3]
 8004f18:	731a      	strb	r2, [r3, #12]
                #if ( INCLUDE_vTaskSuspend == 1 )
                {
                    /* If the task is in the suspended list then there is a
                     *  chance it is actually just blocked indefinitely - so really
                     *  it should be reported as being in the Blocked state. */
                    if( eState == eSuspended )
 8004f1a:	78fb      	ldrb	r3, [r7, #3]
 8004f1c:	2b03      	cmp	r3, #3
 8004f1e:	d120      	bne.n	8004f62 <vTaskGetInfo+0xba>
                    {
                        vTaskSuspendAll();
 8004f20:	f7ff fc5a 	bl	80047d8 <vTaskSuspendAll>
                        {
                            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004f24:	693b      	ldr	r3, [r7, #16]
 8004f26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d003      	beq.n	8004f34 <vTaskGetInfo+0x8c>
                            {
                                pxTaskStatus->eCurrentState = eBlocked;
 8004f2c:	68bb      	ldr	r3, [r7, #8]
 8004f2e:	2202      	movs	r2, #2
 8004f30:	731a      	strb	r2, [r3, #12]
 8004f32:	e014      	b.n	8004f5e <vTaskGetInfo+0xb6>
                                    /* The task does not appear on the event list item of
                                     * and of the RTOS objects, but could still be in the
                                     * blocked state if it is waiting on its notification
                                     * rather than waiting on an object.  If not, is
                                     * suspended. */
                                    for( x = ( BaseType_t ) 0; x < ( BaseType_t ) configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 8004f34:	2300      	movs	r3, #0
 8004f36:	617b      	str	r3, [r7, #20]
 8004f38:	e00e      	b.n	8004f58 <vTaskGetInfo+0xb0>
                                    {
                                        if( pxTCB->ucNotifyState[ x ] == taskWAITING_NOTIFICATION )
 8004f3a:	693a      	ldr	r2, [r7, #16]
 8004f3c:	697b      	ldr	r3, [r7, #20]
 8004f3e:	4413      	add	r3, r2
 8004f40:	3358      	adds	r3, #88	@ 0x58
 8004f42:	781b      	ldrb	r3, [r3, #0]
 8004f44:	b2db      	uxtb	r3, r3
 8004f46:	2b01      	cmp	r3, #1
 8004f48:	d103      	bne.n	8004f52 <vTaskGetInfo+0xaa>
                                        {
                                            pxTaskStatus->eCurrentState = eBlocked;
 8004f4a:	68bb      	ldr	r3, [r7, #8]
 8004f4c:	2202      	movs	r2, #2
 8004f4e:	731a      	strb	r2, [r3, #12]
                                            break;
 8004f50:	e005      	b.n	8004f5e <vTaskGetInfo+0xb6>
                                    for( x = ( BaseType_t ) 0; x < ( BaseType_t ) configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 8004f52:	697b      	ldr	r3, [r7, #20]
 8004f54:	3301      	adds	r3, #1
 8004f56:	617b      	str	r3, [r7, #20]
 8004f58:	697b      	ldr	r3, [r7, #20]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	dded      	ble.n	8004f3a <vTaskGetInfo+0x92>
                                    }
                                }
                                #endif /* if ( configUSE_TASK_NOTIFICATIONS == 1 ) */
                            }
                        }
                        ( void ) xTaskResumeAll();
 8004f5e:	f7ff fc49 	bl	80047f4 <xTaskResumeAll>
                #endif /* INCLUDE_vTaskSuspend */

                /* Tasks can be in pending ready list and other state list at the
                 * same time. These tasks are in ready state no matter what state
                 * list the task is in. */
                taskENTER_CRITICAL();
 8004f62:	f7fe fe31 	bl	8003bc8 <vPortEnterCritical>
                {
                    if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) != pdFALSE )
 8004f66:	693b      	ldr	r3, [r7, #16]
 8004f68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f6a:	4a12      	ldr	r2, [pc, #72]	@ (8004fb4 <vTaskGetInfo+0x10c>)
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d102      	bne.n	8004f76 <vTaskGetInfo+0xce>
                    {
                        pxTaskStatus->eCurrentState = eReady;
 8004f70:	68bb      	ldr	r3, [r7, #8]
 8004f72:	2201      	movs	r2, #1
 8004f74:	731a      	strb	r2, [r3, #12]
                    }
                }
                taskEXIT_CRITICAL();
 8004f76:	f7fe fe41 	bl	8003bfc <vPortExitCritical>
 8004f7a:	e006      	b.n	8004f8a <vTaskGetInfo+0xe2>
            }
        }
        else
        {
            pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
 8004f7c:	6938      	ldr	r0, [r7, #16]
 8004f7e:	f7ff fb3b 	bl	80045f8 <eTaskGetState>
 8004f82:	4603      	mov	r3, r0
 8004f84:	461a      	mov	r2, r3
 8004f86:	68bb      	ldr	r3, [r7, #8]
 8004f88:	731a      	strb	r2, [r3, #12]
        }

        /* Obtaining the stack space takes some time, so the xGetFreeStackSpace
         * parameter is provided to allow it to be skipped. */
        if( xGetFreeStackSpace != pdFALSE )
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d008      	beq.n	8004fa2 <vTaskGetInfo+0xfa>
            {
                pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfStack );
            }
            #else
            {
                pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack );
 8004f90:	693b      	ldr	r3, [r7, #16]
 8004f92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f94:	4618      	mov	r0, r3
 8004f96:	f000 f844 	bl	8005022 <prvTaskCheckFreeStackSpace>
 8004f9a:	4602      	mov	r2, r0
 8004f9c:	68bb      	ldr	r3, [r7, #8]
 8004f9e:	621a      	str	r2, [r3, #32]
        {
            pxTaskStatus->usStackHighWaterMark = 0;
        }

        traceRETURN_vTaskGetInfo();
    }
 8004fa0:	e002      	b.n	8004fa8 <vTaskGetInfo+0x100>
            pxTaskStatus->usStackHighWaterMark = 0;
 8004fa2:	68bb      	ldr	r3, [r7, #8]
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	621a      	str	r2, [r3, #32]
    }
 8004fa8:	bf00      	nop
 8004faa:	3718      	adds	r7, #24
 8004fac:	46bd      	mov	sp, r7
 8004fae:	bd80      	pop	{r7, pc}
 8004fb0:	20003144 	.word	0x20003144
 8004fb4:	200031dc 	.word	0x200031dc

08004fb8 <prvListTasksWithinSingleList>:
#if ( configUSE_TRACE_FACILITY == 1 )

    static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t * pxTaskStatusArray,
                                                     List_t * pxList,
                                                     eTaskState eState )
    {
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b088      	sub	sp, #32
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	60f8      	str	r0, [r7, #12]
 8004fc0:	60b9      	str	r1, [r7, #8]
 8004fc2:	4613      	mov	r3, r2
 8004fc4:	71fb      	strb	r3, [r7, #7]
        UBaseType_t uxTask = 0;
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	61fb      	str	r3, [r7, #28]
        const ListItem_t * pxEndMarker = listGET_END_MARKER( pxList );
 8004fca:	68bb      	ldr	r3, [r7, #8]
 8004fcc:	3308      	adds	r3, #8
 8004fce:	617b      	str	r3, [r7, #20]
        ListItem_t * pxIterator;
        TCB_t * pxTCB = NULL;
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	613b      	str	r3, [r7, #16]

        if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 8004fd4:	68bb      	ldr	r3, [r7, #8]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d01d      	beq.n	8005018 <prvListTasksWithinSingleList+0x60>
        {
            /* Populate an TaskStatus_t structure within the
             * pxTaskStatusArray array for each task that is referenced from
             * pxList.  See the definition of TaskStatus_t in task.h for the
             * meaning of each TaskStatus_t structure member. */
            for( pxIterator = listGET_HEAD_ENTRY( pxList ); pxIterator != pxEndMarker; pxIterator = listGET_NEXT( pxIterator ) )
 8004fdc:	68bb      	ldr	r3, [r7, #8]
 8004fde:	68db      	ldr	r3, [r3, #12]
 8004fe0:	61bb      	str	r3, [r7, #24]
 8004fe2:	e015      	b.n	8005010 <prvListTasksWithinSingleList+0x58>
            {
                /* MISRA Ref 11.5.3 [Void pointer assignment] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                /* coverity[misra_c_2012_rule_11_5_violation] */
                pxTCB = listGET_LIST_ITEM_OWNER( pxIterator );
 8004fe4:	69bb      	ldr	r3, [r7, #24]
 8004fe6:	68db      	ldr	r3, [r3, #12]
 8004fe8:	613b      	str	r3, [r7, #16]

                vTaskGetInfo( ( TaskHandle_t ) pxTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 8004fea:	69fa      	ldr	r2, [r7, #28]
 8004fec:	4613      	mov	r3, r2
 8004fee:	00db      	lsls	r3, r3, #3
 8004ff0:	4413      	add	r3, r2
 8004ff2:	009b      	lsls	r3, r3, #2
 8004ff4:	461a      	mov	r2, r3
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	1899      	adds	r1, r3, r2
 8004ffa:	79fb      	ldrb	r3, [r7, #7]
 8004ffc:	2201      	movs	r2, #1
 8004ffe:	6938      	ldr	r0, [r7, #16]
 8005000:	f7ff ff52 	bl	8004ea8 <vTaskGetInfo>
                uxTask++;
 8005004:	69fb      	ldr	r3, [r7, #28]
 8005006:	3301      	adds	r3, #1
 8005008:	61fb      	str	r3, [r7, #28]
            for( pxIterator = listGET_HEAD_ENTRY( pxList ); pxIterator != pxEndMarker; pxIterator = listGET_NEXT( pxIterator ) )
 800500a:	69bb      	ldr	r3, [r7, #24]
 800500c:	685b      	ldr	r3, [r3, #4]
 800500e:	61bb      	str	r3, [r7, #24]
 8005010:	69ba      	ldr	r2, [r7, #24]
 8005012:	697b      	ldr	r3, [r7, #20]
 8005014:	429a      	cmp	r2, r3
 8005016:	d1e5      	bne.n	8004fe4 <prvListTasksWithinSingleList+0x2c>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return uxTask;
 8005018:	69fb      	ldr	r3, [r7, #28]
    }
 800501a:	4618      	mov	r0, r3
 800501c:	3720      	adds	r7, #32
 800501e:	46bd      	mov	sp, r7
 8005020:	bd80      	pop	{r7, pc}

08005022 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

    static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
    {
 8005022:	b480      	push	{r7}
 8005024:	b085      	sub	sp, #20
 8005026:	af00      	add	r7, sp, #0
 8005028:	6078      	str	r0, [r7, #4]
        configSTACK_DEPTH_TYPE uxCount = 0U;
 800502a:	2300      	movs	r3, #0
 800502c:	60fb      	str	r3, [r7, #12]

        while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800502e:	e005      	b.n	800503c <prvTaskCheckFreeStackSpace+0x1a>
        {
            pucStackByte -= portSTACK_GROWTH;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	3301      	adds	r3, #1
 8005034:	607b      	str	r3, [r7, #4]
            uxCount++;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	3301      	adds	r3, #1
 800503a:	60fb      	str	r3, [r7, #12]
        while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	781b      	ldrb	r3, [r3, #0]
 8005040:	2ba5      	cmp	r3, #165	@ 0xa5
 8005042:	d0f5      	beq.n	8005030 <prvTaskCheckFreeStackSpace+0xe>
        }

        uxCount /= ( configSTACK_DEPTH_TYPE ) sizeof( StackType_t );
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	089b      	lsrs	r3, r3, #2
 8005048:	60fb      	str	r3, [r7, #12]

        return uxCount;
 800504a:	68fb      	ldr	r3, [r7, #12]
    }
 800504c:	4618      	mov	r0, r3
 800504e:	3714      	adds	r7, #20
 8005050:	46bd      	mov	sp, r7
 8005052:	bc80      	pop	{r7}
 8005054:	4770      	bx	lr

08005056 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8005056:	b580      	push	{r7, lr}
 8005058:	b082      	sub	sp, #8
 800505a:	af00      	add	r7, sp, #0
 800505c:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005062:	4618      	mov	r0, r3
 8005064:	f7fe fef2 	bl	8003e4c <vPortFree>
            vPortFree( pxTCB );
 8005068:	6878      	ldr	r0, [r7, #4]
 800506a:	f7fe feef 	bl	8003e4c <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 800506e:	bf00      	nop
 8005070:	3708      	adds	r7, #8
 8005072:	46bd      	mov	sp, r7
 8005074:	bd80      	pop	{r7, pc}
	...

08005078 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005078:	b480      	push	{r7}
 800507a:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800507c:	4b09      	ldr	r3, [pc, #36]	@ (80050a4 <prvResetNextTaskUnblockTime+0x2c>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d104      	bne.n	8005090 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8005086:	4b08      	ldr	r3, [pc, #32]	@ (80050a8 <prvResetNextTaskUnblockTime+0x30>)
 8005088:	f04f 32ff 	mov.w	r2, #4294967295
 800508c:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800508e:	e005      	b.n	800509c <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005090:	4b04      	ldr	r3, [pc, #16]	@ (80050a4 <prvResetNextTaskUnblockTime+0x2c>)
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	68db      	ldr	r3, [r3, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4a03      	ldr	r2, [pc, #12]	@ (80050a8 <prvResetNextTaskUnblockTime+0x30>)
 800509a:	6013      	str	r3, [r2, #0]
}
 800509c:	bf00      	nop
 800509e:	46bd      	mov	sp, r7
 80050a0:	bc80      	pop	{r7}
 80050a2:	4770      	bx	lr
 80050a4:	200031d4 	.word	0x200031d4
 80050a8:	2000323c 	.word	0x2000323c

080050ac <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 80050ac:	b480      	push	{r7}
 80050ae:	b083      	sub	sp, #12
 80050b0:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        traceENTER_xTaskGetSchedulerState();

        if( xSchedulerRunning == pdFALSE )
 80050b2:	4b0b      	ldr	r3, [pc, #44]	@ (80050e0 <xTaskGetSchedulerState+0x34>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d102      	bne.n	80050c0 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 80050ba:	2301      	movs	r3, #1
 80050bc:	607b      	str	r3, [r7, #4]
 80050be:	e008      	b.n	80050d2 <xTaskGetSchedulerState+0x26>
        {
            #if ( configNUMBER_OF_CORES > 1 )
                taskENTER_CRITICAL();
            #endif
            {
                if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 80050c0:	4b08      	ldr	r3, [pc, #32]	@ (80050e4 <xTaskGetSchedulerState+0x38>)
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d102      	bne.n	80050ce <xTaskGetSchedulerState+0x22>
                {
                    xReturn = taskSCHEDULER_RUNNING;
 80050c8:	2302      	movs	r3, #2
 80050ca:	607b      	str	r3, [r7, #4]
 80050cc:	e001      	b.n	80050d2 <xTaskGetSchedulerState+0x26>
                }
                else
                {
                    xReturn = taskSCHEDULER_SUSPENDED;
 80050ce:	2300      	movs	r3, #0
 80050d0:	607b      	str	r3, [r7, #4]
            #endif
        }

        traceRETURN_xTaskGetSchedulerState( xReturn );

        return xReturn;
 80050d2:	687b      	ldr	r3, [r7, #4]
    }
 80050d4:	4618      	mov	r0, r3
 80050d6:	370c      	adds	r7, #12
 80050d8:	46bd      	mov	sp, r7
 80050da:	bc80      	pop	{r7}
 80050dc:	4770      	bx	lr
 80050de:	bf00      	nop
 80050e0:	20003228 	.word	0x20003228
 80050e4:	20003244 	.word	0x20003244

080050e8 <prvWriteNameToBuffer>:

#if ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 )

    static char * prvWriteNameToBuffer( char * pcBuffer,
                                        const char * pcTaskName )
    {
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b084      	sub	sp, #16
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
 80050f0:	6039      	str	r1, [r7, #0]
        size_t x;

        /* Start by copying the entire string. */
        ( void ) strcpy( pcBuffer, pcTaskName );
 80050f2:	6839      	ldr	r1, [r7, #0]
 80050f4:	6878      	ldr	r0, [r7, #4]
 80050f6:	f001 fa98 	bl	800662a <strcpy>

        /* Pad the end of the string with spaces to ensure columns line up when
         * printed out. */
        for( x = strlen( pcBuffer ); x < ( size_t ) ( ( size_t ) configMAX_TASK_NAME_LEN - 1U ); x++ )
 80050fa:	6878      	ldr	r0, [r7, #4]
 80050fc:	f7fb f828 	bl	8000150 <strlen>
 8005100:	60f8      	str	r0, [r7, #12]
 8005102:	e007      	b.n	8005114 <prvWriteNameToBuffer+0x2c>
        {
            pcBuffer[ x ] = ' ';
 8005104:	687a      	ldr	r2, [r7, #4]
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	4413      	add	r3, r2
 800510a:	2220      	movs	r2, #32
 800510c:	701a      	strb	r2, [r3, #0]
        for( x = strlen( pcBuffer ); x < ( size_t ) ( ( size_t ) configMAX_TASK_NAME_LEN - 1U ); x++ )
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	3301      	adds	r3, #1
 8005112:	60fb      	str	r3, [r7, #12]
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	2b0e      	cmp	r3, #14
 8005118:	d9f4      	bls.n	8005104 <prvWriteNameToBuffer+0x1c>
        }

        /* Terminate. */
        pcBuffer[ x ] = ( char ) 0x00;
 800511a:	687a      	ldr	r2, [r7, #4]
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	4413      	add	r3, r2
 8005120:	2200      	movs	r2, #0
 8005122:	701a      	strb	r2, [r3, #0]

        /* Return the new end of string. */
        return &( pcBuffer[ x ] );
 8005124:	687a      	ldr	r2, [r7, #4]
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	4413      	add	r3, r2
    }
 800512a:	4618      	mov	r0, r3
 800512c:	3710      	adds	r7, #16
 800512e:	46bd      	mov	sp, r7
 8005130:	bd80      	pop	{r7, pc}
	...

08005134 <vTaskListTasks>:

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

    void vTaskListTasks( char * pcWriteBuffer,
                         size_t uxBufferLength )
    {
 8005134:	b5b0      	push	{r4, r5, r7, lr}
 8005136:	b08e      	sub	sp, #56	@ 0x38
 8005138:	af04      	add	r7, sp, #16
 800513a:	6078      	str	r0, [r7, #4]
 800513c:	6039      	str	r1, [r7, #0]
        TaskStatus_t * pxTaskStatusArray;
        size_t uxConsumedBufferLength = 0;
 800513e:	2300      	movs	r3, #0
 8005140:	627b      	str	r3, [r7, #36]	@ 0x24
        size_t uxCharsWrittenBySnprintf;
        int iSnprintfReturnValue;
        BaseType_t xOutputBufferFull = pdFALSE;
 8005142:	2300      	movs	r3, #0
 8005144:	623b      	str	r3, [r7, #32]
         * through a call to vTaskListTasks().
         */


        /* Make sure the write buffer does not contain a string. */
        *pcWriteBuffer = ( char ) 0x00;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2200      	movs	r2, #0
 800514a:	701a      	strb	r2, [r3, #0]

        /* Take a snapshot of the number of tasks in case it changes while this
         * function is executing. */
        uxArraySize = uxCurrentNumberOfTasks;
 800514c:	4b58      	ldr	r3, [pc, #352]	@ (80052b0 <vTaskListTasks+0x17c>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	617b      	str	r3, [r7, #20]
         * configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
         * equate to NULL. */
        /* MISRA Ref 11.5.1 [Malloc memory assignment] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
        /* coverity[misra_c_2012_rule_11_5_violation] */
        pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
 8005152:	4b57      	ldr	r3, [pc, #348]	@ (80052b0 <vTaskListTasks+0x17c>)
 8005154:	681a      	ldr	r2, [r3, #0]
 8005156:	4613      	mov	r3, r2
 8005158:	00db      	lsls	r3, r3, #3
 800515a:	4413      	add	r3, r2
 800515c:	009b      	lsls	r3, r3, #2
 800515e:	4618      	mov	r0, r3
 8005160:	f7fe fdc6 	bl	8003cf0 <pvPortMalloc>
 8005164:	6138      	str	r0, [r7, #16]

        if( pxTaskStatusArray != NULL )
 8005166:	693b      	ldr	r3, [r7, #16]
 8005168:	2b00      	cmp	r3, #0
 800516a:	f000 809d 	beq.w	80052a8 <vTaskListTasks+0x174>
        {
            /* Generate the (binary) data. */
            uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
 800516e:	2200      	movs	r2, #0
 8005170:	6979      	ldr	r1, [r7, #20]
 8005172:	6938      	ldr	r0, [r7, #16]
 8005174:	f7ff fc36 	bl	80049e4 <uxTaskGetSystemState>
 8005178:	6178      	str	r0, [r7, #20]

            /* Create a human readable table from the binary data. */
            for( x = 0; x < uxArraySize; x++ )
 800517a:	2300      	movs	r3, #0
 800517c:	61fb      	str	r3, [r7, #28]
 800517e:	e089      	b.n	8005294 <vTaskListTasks+0x160>
            {
                switch( pxTaskStatusArray[ x ].eCurrentState )
 8005180:	69fa      	ldr	r2, [r7, #28]
 8005182:	4613      	mov	r3, r2
 8005184:	00db      	lsls	r3, r3, #3
 8005186:	4413      	add	r3, r2
 8005188:	009b      	lsls	r3, r3, #2
 800518a:	461a      	mov	r2, r3
 800518c:	693b      	ldr	r3, [r7, #16]
 800518e:	4413      	add	r3, r2
 8005190:	7b1b      	ldrb	r3, [r3, #12]
 8005192:	2b04      	cmp	r3, #4
 8005194:	d81b      	bhi.n	80051ce <vTaskListTasks+0x9a>
 8005196:	a201      	add	r2, pc, #4	@ (adr r2, 800519c <vTaskListTasks+0x68>)
 8005198:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800519c:	080051b1 	.word	0x080051b1
 80051a0:	080051b7 	.word	0x080051b7
 80051a4:	080051bd 	.word	0x080051bd
 80051a8:	080051c3 	.word	0x080051c3
 80051ac:	080051c9 	.word	0x080051c9
                {
                    case eRunning:
                        cStatus = tskRUNNING_CHAR;
 80051b0:	2358      	movs	r3, #88	@ 0x58
 80051b2:	76fb      	strb	r3, [r7, #27]
                        break;
 80051b4:	e00e      	b.n	80051d4 <vTaskListTasks+0xa0>

                    case eReady:
                        cStatus = tskREADY_CHAR;
 80051b6:	2352      	movs	r3, #82	@ 0x52
 80051b8:	76fb      	strb	r3, [r7, #27]
                        break;
 80051ba:	e00b      	b.n	80051d4 <vTaskListTasks+0xa0>

                    case eBlocked:
                        cStatus = tskBLOCKED_CHAR;
 80051bc:	2342      	movs	r3, #66	@ 0x42
 80051be:	76fb      	strb	r3, [r7, #27]
                        break;
 80051c0:	e008      	b.n	80051d4 <vTaskListTasks+0xa0>

                    case eSuspended:
                        cStatus = tskSUSPENDED_CHAR;
 80051c2:	2353      	movs	r3, #83	@ 0x53
 80051c4:	76fb      	strb	r3, [r7, #27]
                        break;
 80051c6:	e005      	b.n	80051d4 <vTaskListTasks+0xa0>

                    case eDeleted:
                        cStatus = tskDELETED_CHAR;
 80051c8:	2344      	movs	r3, #68	@ 0x44
 80051ca:	76fb      	strb	r3, [r7, #27]
                        break;
 80051cc:	e002      	b.n	80051d4 <vTaskListTasks+0xa0>

                    case eInvalid: /* Fall through. */
                    default:       /* Should not get here, but it is included
                                    * to prevent static checking errors. */
                        cStatus = ( char ) 0x00;
 80051ce:	2300      	movs	r3, #0
 80051d0:	76fb      	strb	r3, [r7, #27]
                        break;
 80051d2:	bf00      	nop
                }

                /* Is there enough space in the buffer to hold task name? */
                if( ( uxConsumedBufferLength + configMAX_TASK_NAME_LEN ) <= uxBufferLength )
 80051d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051d6:	3310      	adds	r3, #16
 80051d8:	683a      	ldr	r2, [r7, #0]
 80051da:	429a      	cmp	r2, r3
 80051dc:	d352      	bcc.n	8005284 <vTaskListTasks+0x150>
                {
                    /* Write the task name to the string, padding with spaces so it
                     * can be printed in tabular form more easily. */
                    pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 80051de:	69fa      	ldr	r2, [r7, #28]
 80051e0:	4613      	mov	r3, r2
 80051e2:	00db      	lsls	r3, r3, #3
 80051e4:	4413      	add	r3, r2
 80051e6:	009b      	lsls	r3, r3, #2
 80051e8:	461a      	mov	r2, r3
 80051ea:	693b      	ldr	r3, [r7, #16]
 80051ec:	4413      	add	r3, r2
 80051ee:	685b      	ldr	r3, [r3, #4]
 80051f0:	4619      	mov	r1, r3
 80051f2:	6878      	ldr	r0, [r7, #4]
 80051f4:	f7ff ff78 	bl	80050e8 <prvWriteNameToBuffer>
 80051f8:	6078      	str	r0, [r7, #4]
                    /* Do not count the terminating null character. */
                    uxConsumedBufferLength = uxConsumedBufferLength + ( configMAX_TASK_NAME_LEN - 1U );
 80051fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051fc:	330f      	adds	r3, #15
 80051fe:	627b      	str	r3, [r7, #36]	@ 0x24

                    /* Is there space left in the buffer? -1 is done because snprintf
                     * writes a terminating null character. So we are essentially
                     * checking if the buffer has space to write at least one non-null
                     * character. */
                    if( uxConsumedBufferLength < ( uxBufferLength - 1U ) )
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	3b01      	subs	r3, #1
 8005204:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005206:	429a      	cmp	r2, r3
 8005208:	d239      	bcs.n	800527e <vTaskListTasks+0x14a>
                                                             ( unsigned int ) pxTaskStatusArray[ x ].uxCoreAffinityMask );
                        #else /* ( ( configUSE_CORE_AFFINITY == 1 ) && ( configNUMBER_OF_CORES > 1 ) ) */
                            /* MISRA Ref 21.6.1 [snprintf for utility] */
                            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-216 */
                            /* coverity[misra_c_2012_rule_21_6_violation] */
                            iSnprintfReturnValue = snprintf( pcWriteBuffer,
 800520a:	683a      	ldr	r2, [r7, #0]
 800520c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800520e:	1ad4      	subs	r4, r2, r3
 8005210:	7efd      	ldrb	r5, [r7, #27]
                                                             uxBufferLength - uxConsumedBufferLength,
                                                             "\t%c\t%u\t%u\t%u\r\n",
                                                             cStatus,
                                                             ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority,
 8005212:	69fa      	ldr	r2, [r7, #28]
 8005214:	4613      	mov	r3, r2
 8005216:	00db      	lsls	r3, r3, #3
 8005218:	4413      	add	r3, r2
 800521a:	009b      	lsls	r3, r3, #2
 800521c:	461a      	mov	r2, r3
 800521e:	693b      	ldr	r3, [r7, #16]
 8005220:	4413      	add	r3, r2
 8005222:	6919      	ldr	r1, [r3, #16]
                                                             ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark,
 8005224:	69fa      	ldr	r2, [r7, #28]
 8005226:	4613      	mov	r3, r2
 8005228:	00db      	lsls	r3, r3, #3
 800522a:	4413      	add	r3, r2
 800522c:	009b      	lsls	r3, r3, #2
 800522e:	461a      	mov	r2, r3
 8005230:	693b      	ldr	r3, [r7, #16]
 8005232:	4413      	add	r3, r2
 8005234:	6a18      	ldr	r0, [r3, #32]
                                                             ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber );
 8005236:	69fa      	ldr	r2, [r7, #28]
 8005238:	4613      	mov	r3, r2
 800523a:	00db      	lsls	r3, r3, #3
 800523c:	4413      	add	r3, r2
 800523e:	009b      	lsls	r3, r3, #2
 8005240:	461a      	mov	r2, r3
 8005242:	693b      	ldr	r3, [r7, #16]
 8005244:	4413      	add	r3, r2
 8005246:	689b      	ldr	r3, [r3, #8]
                            iSnprintfReturnValue = snprintf( pcWriteBuffer,
 8005248:	9302      	str	r3, [sp, #8]
 800524a:	9001      	str	r0, [sp, #4]
 800524c:	9100      	str	r1, [sp, #0]
 800524e:	462b      	mov	r3, r5
 8005250:	4a18      	ldr	r2, [pc, #96]	@ (80052b4 <vTaskListTasks+0x180>)
 8005252:	4621      	mov	r1, r4
 8005254:	6878      	ldr	r0, [r7, #4]
 8005256:	f001 f83d 	bl	80062d4 <sniprintf>
 800525a:	60f8      	str	r0, [r7, #12]
                        #endif /* ( ( configUSE_CORE_AFFINITY == 1 ) && ( configNUMBER_OF_CORES > 1 ) ) */
                        uxCharsWrittenBySnprintf = prvSnprintfReturnValueToCharsWritten( iSnprintfReturnValue, uxBufferLength - uxConsumedBufferLength );
 800525c:	683a      	ldr	r2, [r7, #0]
 800525e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005260:	1ad3      	subs	r3, r2, r3
 8005262:	4619      	mov	r1, r3
 8005264:	68f8      	ldr	r0, [r7, #12]
 8005266:	f7ff f8f7 	bl	8004458 <prvSnprintfReturnValueToCharsWritten>
 800526a:	60b8      	str	r0, [r7, #8]

                        uxConsumedBufferLength += uxCharsWrittenBySnprintf;
 800526c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800526e:	68bb      	ldr	r3, [r7, #8]
 8005270:	4413      	add	r3, r2
 8005272:	627b      	str	r3, [r7, #36]	@ 0x24
                        pcWriteBuffer += uxCharsWrittenBySnprintf;
 8005274:	687a      	ldr	r2, [r7, #4]
 8005276:	68bb      	ldr	r3, [r7, #8]
 8005278:	4413      	add	r3, r2
 800527a:	607b      	str	r3, [r7, #4]
 800527c:	e004      	b.n	8005288 <vTaskListTasks+0x154>
                    }
                    else
                    {
                        xOutputBufferFull = pdTRUE;
 800527e:	2301      	movs	r3, #1
 8005280:	623b      	str	r3, [r7, #32]
 8005282:	e001      	b.n	8005288 <vTaskListTasks+0x154>
                    }
                }
                else
                {
                    xOutputBufferFull = pdTRUE;
 8005284:	2301      	movs	r3, #1
 8005286:	623b      	str	r3, [r7, #32]
                }

                if( xOutputBufferFull == pdTRUE )
 8005288:	6a3b      	ldr	r3, [r7, #32]
 800528a:	2b01      	cmp	r3, #1
 800528c:	d008      	beq.n	80052a0 <vTaskListTasks+0x16c>
            for( x = 0; x < uxArraySize; x++ )
 800528e:	69fb      	ldr	r3, [r7, #28]
 8005290:	3301      	adds	r3, #1
 8005292:	61fb      	str	r3, [r7, #28]
 8005294:	69fa      	ldr	r2, [r7, #28]
 8005296:	697b      	ldr	r3, [r7, #20]
 8005298:	429a      	cmp	r2, r3
 800529a:	f4ff af71 	bcc.w	8005180 <vTaskListTasks+0x4c>
 800529e:	e000      	b.n	80052a2 <vTaskListTasks+0x16e>
                {
                    break;
 80052a0:	bf00      	nop
                }
            }

            /* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
             * is 0 then vPortFree() will be #defined to nothing. */
            vPortFree( pxTaskStatusArray );
 80052a2:	6938      	ldr	r0, [r7, #16]
 80052a4:	f7fe fdd2 	bl	8003e4c <vPortFree>
        {
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_vTaskListTasks();
    }
 80052a8:	bf00      	nop
 80052aa:	3728      	adds	r7, #40	@ 0x28
 80052ac:	46bd      	mov	sp, r7
 80052ae:	bdb0      	pop	{r4, r5, r7, pc}
 80052b0:	2000321c 	.word	0x2000321c
 80052b4:	08009c18 	.word	0x08009c18

080052b8 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b088      	sub	sp, #32
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
 80052c0:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80052c2:	4b37      	ldr	r3, [pc, #220]	@ (80053a0 <prvAddCurrentTaskToDelayedList+0xe8>)
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	61fb      	str	r3, [r7, #28]
    List_t * const pxDelayedList = pxDelayedTaskList;
 80052c8:	4b36      	ldr	r3, [pc, #216]	@ (80053a4 <prvAddCurrentTaskToDelayedList+0xec>)
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	61bb      	str	r3, [r7, #24]
    List_t * const pxOverflowDelayedList = pxOverflowDelayedTaskList;
 80052ce:	4b36      	ldr	r3, [pc, #216]	@ (80053a8 <prvAddCurrentTaskToDelayedList+0xf0>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80052d4:	4b35      	ldr	r3, [pc, #212]	@ (80053ac <prvAddCurrentTaskToDelayedList+0xf4>)
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	3304      	adds	r3, #4
 80052da:	4618      	mov	r0, r3
 80052dc:	f7fe ff2c 	bl	8004138 <uxListRemove>
 80052e0:	4603      	mov	r3, r0
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d10b      	bne.n	80052fe <prvAddCurrentTaskToDelayedList+0x46>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80052e6:	4b31      	ldr	r3, [pc, #196]	@ (80053ac <prvAddCurrentTaskToDelayedList+0xf4>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052ec:	2201      	movs	r2, #1
 80052ee:	fa02 f303 	lsl.w	r3, r2, r3
 80052f2:	43da      	mvns	r2, r3
 80052f4:	4b2e      	ldr	r3, [pc, #184]	@ (80053b0 <prvAddCurrentTaskToDelayedList+0xf8>)
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4013      	ands	r3, r2
 80052fa:	4a2d      	ldr	r2, [pc, #180]	@ (80053b0 <prvAddCurrentTaskToDelayedList+0xf8>)
 80052fc:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005304:	d124      	bne.n	8005350 <prvAddCurrentTaskToDelayedList+0x98>
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d021      	beq.n	8005350 <prvAddCurrentTaskToDelayedList+0x98>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800530c:	4b29      	ldr	r3, [pc, #164]	@ (80053b4 <prvAddCurrentTaskToDelayedList+0xfc>)
 800530e:	685b      	ldr	r3, [r3, #4]
 8005310:	613b      	str	r3, [r7, #16]
 8005312:	4b26      	ldr	r3, [pc, #152]	@ (80053ac <prvAddCurrentTaskToDelayedList+0xf4>)
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	693a      	ldr	r2, [r7, #16]
 8005318:	609a      	str	r2, [r3, #8]
 800531a:	4b24      	ldr	r3, [pc, #144]	@ (80053ac <prvAddCurrentTaskToDelayedList+0xf4>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	693a      	ldr	r2, [r7, #16]
 8005320:	6892      	ldr	r2, [r2, #8]
 8005322:	60da      	str	r2, [r3, #12]
 8005324:	4b21      	ldr	r3, [pc, #132]	@ (80053ac <prvAddCurrentTaskToDelayedList+0xf4>)
 8005326:	681a      	ldr	r2, [r3, #0]
 8005328:	693b      	ldr	r3, [r7, #16]
 800532a:	689b      	ldr	r3, [r3, #8]
 800532c:	3204      	adds	r2, #4
 800532e:	605a      	str	r2, [r3, #4]
 8005330:	4b1e      	ldr	r3, [pc, #120]	@ (80053ac <prvAddCurrentTaskToDelayedList+0xf4>)
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	1d1a      	adds	r2, r3, #4
 8005336:	693b      	ldr	r3, [r7, #16]
 8005338:	609a      	str	r2, [r3, #8]
 800533a:	4b1c      	ldr	r3, [pc, #112]	@ (80053ac <prvAddCurrentTaskToDelayedList+0xf4>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	4a1d      	ldr	r2, [pc, #116]	@ (80053b4 <prvAddCurrentTaskToDelayedList+0xfc>)
 8005340:	615a      	str	r2, [r3, #20]
 8005342:	4b1c      	ldr	r3, [pc, #112]	@ (80053b4 <prvAddCurrentTaskToDelayedList+0xfc>)
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	3301      	adds	r3, #1
 8005348:	4a1a      	ldr	r2, [pc, #104]	@ (80053b4 <prvAddCurrentTaskToDelayedList+0xfc>)
 800534a:	6013      	str	r3, [r2, #0]
 800534c:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 800534e:	e022      	b.n	8005396 <prvAddCurrentTaskToDelayedList+0xde>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8005350:	69fa      	ldr	r2, [r7, #28]
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	4413      	add	r3, r2
 8005356:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005358:	4b14      	ldr	r3, [pc, #80]	@ (80053ac <prvAddCurrentTaskToDelayedList+0xf4>)
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	68fa      	ldr	r2, [r7, #12]
 800535e:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8005360:	68fa      	ldr	r2, [r7, #12]
 8005362:	69fb      	ldr	r3, [r7, #28]
 8005364:	429a      	cmp	r2, r3
 8005366:	d207      	bcs.n	8005378 <prvAddCurrentTaskToDelayedList+0xc0>
                vListInsert( pxOverflowDelayedList, &( pxCurrentTCB->xStateListItem ) );
 8005368:	4b10      	ldr	r3, [pc, #64]	@ (80053ac <prvAddCurrentTaskToDelayedList+0xf4>)
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	3304      	adds	r3, #4
 800536e:	4619      	mov	r1, r3
 8005370:	6978      	ldr	r0, [r7, #20]
 8005372:	f7fe fea9 	bl	80040c8 <vListInsert>
}
 8005376:	e00e      	b.n	8005396 <prvAddCurrentTaskToDelayedList+0xde>
                vListInsert( pxDelayedList, &( pxCurrentTCB->xStateListItem ) );
 8005378:	4b0c      	ldr	r3, [pc, #48]	@ (80053ac <prvAddCurrentTaskToDelayedList+0xf4>)
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	3304      	adds	r3, #4
 800537e:	4619      	mov	r1, r3
 8005380:	69b8      	ldr	r0, [r7, #24]
 8005382:	f7fe fea1 	bl	80040c8 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8005386:	4b0c      	ldr	r3, [pc, #48]	@ (80053b8 <prvAddCurrentTaskToDelayedList+0x100>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	68fa      	ldr	r2, [r7, #12]
 800538c:	429a      	cmp	r2, r3
 800538e:	d202      	bcs.n	8005396 <prvAddCurrentTaskToDelayedList+0xde>
                    xNextTaskUnblockTime = xTimeToWake;
 8005390:	4a09      	ldr	r2, [pc, #36]	@ (80053b8 <prvAddCurrentTaskToDelayedList+0x100>)
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	6013      	str	r3, [r2, #0]
}
 8005396:	bf00      	nop
 8005398:	3720      	adds	r7, #32
 800539a:	46bd      	mov	sp, r7
 800539c:	bd80      	pop	{r7, pc}
 800539e:	bf00      	nop
 80053a0:	20003220 	.word	0x20003220
 80053a4:	200031d4 	.word	0x200031d4
 80053a8:	200031d8 	.word	0x200031d8
 80053ac:	20003144 	.word	0x20003144
 80053b0:	20003224 	.word	0x20003224
 80053b4:	20003208 	.word	0x20003208
 80053b8:	2000323c 	.word	0x2000323c

080053bc <__cvt>:
 80053bc:	2b00      	cmp	r3, #0
 80053be:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80053c2:	461d      	mov	r5, r3
 80053c4:	bfbb      	ittet	lt
 80053c6:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 80053ca:	461d      	movlt	r5, r3
 80053cc:	2300      	movge	r3, #0
 80053ce:	232d      	movlt	r3, #45	@ 0x2d
 80053d0:	b088      	sub	sp, #32
 80053d2:	4614      	mov	r4, r2
 80053d4:	bfb8      	it	lt
 80053d6:	4614      	movlt	r4, r2
 80053d8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80053da:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 80053dc:	7013      	strb	r3, [r2, #0]
 80053de:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80053e0:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 80053e4:	f023 0820 	bic.w	r8, r3, #32
 80053e8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80053ec:	d005      	beq.n	80053fa <__cvt+0x3e>
 80053ee:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80053f2:	d100      	bne.n	80053f6 <__cvt+0x3a>
 80053f4:	3601      	adds	r6, #1
 80053f6:	2302      	movs	r3, #2
 80053f8:	e000      	b.n	80053fc <__cvt+0x40>
 80053fa:	2303      	movs	r3, #3
 80053fc:	aa07      	add	r2, sp, #28
 80053fe:	9204      	str	r2, [sp, #16]
 8005400:	aa06      	add	r2, sp, #24
 8005402:	e9cd a202 	strd	sl, r2, [sp, #8]
 8005406:	e9cd 3600 	strd	r3, r6, [sp]
 800540a:	4622      	mov	r2, r4
 800540c:	462b      	mov	r3, r5
 800540e:	f001 f9bf 	bl	8006790 <_dtoa_r>
 8005412:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005416:	4607      	mov	r7, r0
 8005418:	d119      	bne.n	800544e <__cvt+0x92>
 800541a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800541c:	07db      	lsls	r3, r3, #31
 800541e:	d50e      	bpl.n	800543e <__cvt+0x82>
 8005420:	eb00 0906 	add.w	r9, r0, r6
 8005424:	2200      	movs	r2, #0
 8005426:	2300      	movs	r3, #0
 8005428:	4620      	mov	r0, r4
 800542a:	4629      	mov	r1, r5
 800542c:	f7fb fabc 	bl	80009a8 <__aeabi_dcmpeq>
 8005430:	b108      	cbz	r0, 8005436 <__cvt+0x7a>
 8005432:	f8cd 901c 	str.w	r9, [sp, #28]
 8005436:	2230      	movs	r2, #48	@ 0x30
 8005438:	9b07      	ldr	r3, [sp, #28]
 800543a:	454b      	cmp	r3, r9
 800543c:	d31e      	bcc.n	800547c <__cvt+0xc0>
 800543e:	4638      	mov	r0, r7
 8005440:	9b07      	ldr	r3, [sp, #28]
 8005442:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8005444:	1bdb      	subs	r3, r3, r7
 8005446:	6013      	str	r3, [r2, #0]
 8005448:	b008      	add	sp, #32
 800544a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800544e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005452:	eb00 0906 	add.w	r9, r0, r6
 8005456:	d1e5      	bne.n	8005424 <__cvt+0x68>
 8005458:	7803      	ldrb	r3, [r0, #0]
 800545a:	2b30      	cmp	r3, #48	@ 0x30
 800545c:	d10a      	bne.n	8005474 <__cvt+0xb8>
 800545e:	2200      	movs	r2, #0
 8005460:	2300      	movs	r3, #0
 8005462:	4620      	mov	r0, r4
 8005464:	4629      	mov	r1, r5
 8005466:	f7fb fa9f 	bl	80009a8 <__aeabi_dcmpeq>
 800546a:	b918      	cbnz	r0, 8005474 <__cvt+0xb8>
 800546c:	f1c6 0601 	rsb	r6, r6, #1
 8005470:	f8ca 6000 	str.w	r6, [sl]
 8005474:	f8da 3000 	ldr.w	r3, [sl]
 8005478:	4499      	add	r9, r3
 800547a:	e7d3      	b.n	8005424 <__cvt+0x68>
 800547c:	1c59      	adds	r1, r3, #1
 800547e:	9107      	str	r1, [sp, #28]
 8005480:	701a      	strb	r2, [r3, #0]
 8005482:	e7d9      	b.n	8005438 <__cvt+0x7c>

08005484 <__exponent>:
 8005484:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005486:	2900      	cmp	r1, #0
 8005488:	bfb6      	itet	lt
 800548a:	232d      	movlt	r3, #45	@ 0x2d
 800548c:	232b      	movge	r3, #43	@ 0x2b
 800548e:	4249      	neglt	r1, r1
 8005490:	2909      	cmp	r1, #9
 8005492:	7002      	strb	r2, [r0, #0]
 8005494:	7043      	strb	r3, [r0, #1]
 8005496:	dd29      	ble.n	80054ec <__exponent+0x68>
 8005498:	f10d 0307 	add.w	r3, sp, #7
 800549c:	461d      	mov	r5, r3
 800549e:	270a      	movs	r7, #10
 80054a0:	fbb1 f6f7 	udiv	r6, r1, r7
 80054a4:	461a      	mov	r2, r3
 80054a6:	fb07 1416 	mls	r4, r7, r6, r1
 80054aa:	3430      	adds	r4, #48	@ 0x30
 80054ac:	f802 4c01 	strb.w	r4, [r2, #-1]
 80054b0:	460c      	mov	r4, r1
 80054b2:	2c63      	cmp	r4, #99	@ 0x63
 80054b4:	4631      	mov	r1, r6
 80054b6:	f103 33ff 	add.w	r3, r3, #4294967295
 80054ba:	dcf1      	bgt.n	80054a0 <__exponent+0x1c>
 80054bc:	3130      	adds	r1, #48	@ 0x30
 80054be:	1e94      	subs	r4, r2, #2
 80054c0:	f803 1c01 	strb.w	r1, [r3, #-1]
 80054c4:	4623      	mov	r3, r4
 80054c6:	1c41      	adds	r1, r0, #1
 80054c8:	42ab      	cmp	r3, r5
 80054ca:	d30a      	bcc.n	80054e2 <__exponent+0x5e>
 80054cc:	f10d 0309 	add.w	r3, sp, #9
 80054d0:	1a9b      	subs	r3, r3, r2
 80054d2:	42ac      	cmp	r4, r5
 80054d4:	bf88      	it	hi
 80054d6:	2300      	movhi	r3, #0
 80054d8:	3302      	adds	r3, #2
 80054da:	4403      	add	r3, r0
 80054dc:	1a18      	subs	r0, r3, r0
 80054de:	b003      	add	sp, #12
 80054e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80054e2:	f813 6b01 	ldrb.w	r6, [r3], #1
 80054e6:	f801 6f01 	strb.w	r6, [r1, #1]!
 80054ea:	e7ed      	b.n	80054c8 <__exponent+0x44>
 80054ec:	2330      	movs	r3, #48	@ 0x30
 80054ee:	3130      	adds	r1, #48	@ 0x30
 80054f0:	7083      	strb	r3, [r0, #2]
 80054f2:	70c1      	strb	r1, [r0, #3]
 80054f4:	1d03      	adds	r3, r0, #4
 80054f6:	e7f1      	b.n	80054dc <__exponent+0x58>

080054f8 <_printf_float>:
 80054f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054fc:	b091      	sub	sp, #68	@ 0x44
 80054fe:	460c      	mov	r4, r1
 8005500:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8005504:	4616      	mov	r6, r2
 8005506:	461f      	mov	r7, r3
 8005508:	4605      	mov	r5, r0
 800550a:	f001 f817 	bl	800653c <_localeconv_r>
 800550e:	6803      	ldr	r3, [r0, #0]
 8005510:	4618      	mov	r0, r3
 8005512:	9308      	str	r3, [sp, #32]
 8005514:	f7fa fe1c 	bl	8000150 <strlen>
 8005518:	2300      	movs	r3, #0
 800551a:	930e      	str	r3, [sp, #56]	@ 0x38
 800551c:	f8d8 3000 	ldr.w	r3, [r8]
 8005520:	9009      	str	r0, [sp, #36]	@ 0x24
 8005522:	3307      	adds	r3, #7
 8005524:	f023 0307 	bic.w	r3, r3, #7
 8005528:	f103 0208 	add.w	r2, r3, #8
 800552c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005530:	f8d4 b000 	ldr.w	fp, [r4]
 8005534:	f8c8 2000 	str.w	r2, [r8]
 8005538:	e9d3 8900 	ldrd	r8, r9, [r3]
 800553c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005540:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005542:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8005546:	f04f 32ff 	mov.w	r2, #4294967295
 800554a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800554e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8005552:	4b9c      	ldr	r3, [pc, #624]	@ (80057c4 <_printf_float+0x2cc>)
 8005554:	f7fb fa5a 	bl	8000a0c <__aeabi_dcmpun>
 8005558:	bb70      	cbnz	r0, 80055b8 <_printf_float+0xc0>
 800555a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800555e:	f04f 32ff 	mov.w	r2, #4294967295
 8005562:	4b98      	ldr	r3, [pc, #608]	@ (80057c4 <_printf_float+0x2cc>)
 8005564:	f7fb fa34 	bl	80009d0 <__aeabi_dcmple>
 8005568:	bb30      	cbnz	r0, 80055b8 <_printf_float+0xc0>
 800556a:	2200      	movs	r2, #0
 800556c:	2300      	movs	r3, #0
 800556e:	4640      	mov	r0, r8
 8005570:	4649      	mov	r1, r9
 8005572:	f7fb fa23 	bl	80009bc <__aeabi_dcmplt>
 8005576:	b110      	cbz	r0, 800557e <_printf_float+0x86>
 8005578:	232d      	movs	r3, #45	@ 0x2d
 800557a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800557e:	4a92      	ldr	r2, [pc, #584]	@ (80057c8 <_printf_float+0x2d0>)
 8005580:	4b92      	ldr	r3, [pc, #584]	@ (80057cc <_printf_float+0x2d4>)
 8005582:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8005586:	bf94      	ite	ls
 8005588:	4690      	movls	r8, r2
 800558a:	4698      	movhi	r8, r3
 800558c:	2303      	movs	r3, #3
 800558e:	f04f 0900 	mov.w	r9, #0
 8005592:	6123      	str	r3, [r4, #16]
 8005594:	f02b 0304 	bic.w	r3, fp, #4
 8005598:	6023      	str	r3, [r4, #0]
 800559a:	4633      	mov	r3, r6
 800559c:	4621      	mov	r1, r4
 800559e:	4628      	mov	r0, r5
 80055a0:	9700      	str	r7, [sp, #0]
 80055a2:	aa0f      	add	r2, sp, #60	@ 0x3c
 80055a4:	f000 f9d4 	bl	8005950 <_printf_common>
 80055a8:	3001      	adds	r0, #1
 80055aa:	f040 8090 	bne.w	80056ce <_printf_float+0x1d6>
 80055ae:	f04f 30ff 	mov.w	r0, #4294967295
 80055b2:	b011      	add	sp, #68	@ 0x44
 80055b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055b8:	4642      	mov	r2, r8
 80055ba:	464b      	mov	r3, r9
 80055bc:	4640      	mov	r0, r8
 80055be:	4649      	mov	r1, r9
 80055c0:	f7fb fa24 	bl	8000a0c <__aeabi_dcmpun>
 80055c4:	b148      	cbz	r0, 80055da <_printf_float+0xe2>
 80055c6:	464b      	mov	r3, r9
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	bfb8      	it	lt
 80055cc:	232d      	movlt	r3, #45	@ 0x2d
 80055ce:	4a80      	ldr	r2, [pc, #512]	@ (80057d0 <_printf_float+0x2d8>)
 80055d0:	bfb8      	it	lt
 80055d2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80055d6:	4b7f      	ldr	r3, [pc, #508]	@ (80057d4 <_printf_float+0x2dc>)
 80055d8:	e7d3      	b.n	8005582 <_printf_float+0x8a>
 80055da:	6863      	ldr	r3, [r4, #4]
 80055dc:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 80055e0:	1c5a      	adds	r2, r3, #1
 80055e2:	d13f      	bne.n	8005664 <_printf_float+0x16c>
 80055e4:	2306      	movs	r3, #6
 80055e6:	6063      	str	r3, [r4, #4]
 80055e8:	2200      	movs	r2, #0
 80055ea:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 80055ee:	6023      	str	r3, [r4, #0]
 80055f0:	9206      	str	r2, [sp, #24]
 80055f2:	aa0e      	add	r2, sp, #56	@ 0x38
 80055f4:	e9cd a204 	strd	sl, r2, [sp, #16]
 80055f8:	aa0d      	add	r2, sp, #52	@ 0x34
 80055fa:	9203      	str	r2, [sp, #12]
 80055fc:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8005600:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8005604:	6863      	ldr	r3, [r4, #4]
 8005606:	4642      	mov	r2, r8
 8005608:	9300      	str	r3, [sp, #0]
 800560a:	4628      	mov	r0, r5
 800560c:	464b      	mov	r3, r9
 800560e:	910a      	str	r1, [sp, #40]	@ 0x28
 8005610:	f7ff fed4 	bl	80053bc <__cvt>
 8005614:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005616:	4680      	mov	r8, r0
 8005618:	2947      	cmp	r1, #71	@ 0x47
 800561a:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800561c:	d128      	bne.n	8005670 <_printf_float+0x178>
 800561e:	1cc8      	adds	r0, r1, #3
 8005620:	db02      	blt.n	8005628 <_printf_float+0x130>
 8005622:	6863      	ldr	r3, [r4, #4]
 8005624:	4299      	cmp	r1, r3
 8005626:	dd40      	ble.n	80056aa <_printf_float+0x1b2>
 8005628:	f1aa 0a02 	sub.w	sl, sl, #2
 800562c:	fa5f fa8a 	uxtb.w	sl, sl
 8005630:	4652      	mov	r2, sl
 8005632:	3901      	subs	r1, #1
 8005634:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005638:	910d      	str	r1, [sp, #52]	@ 0x34
 800563a:	f7ff ff23 	bl	8005484 <__exponent>
 800563e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005640:	4681      	mov	r9, r0
 8005642:	1813      	adds	r3, r2, r0
 8005644:	2a01      	cmp	r2, #1
 8005646:	6123      	str	r3, [r4, #16]
 8005648:	dc02      	bgt.n	8005650 <_printf_float+0x158>
 800564a:	6822      	ldr	r2, [r4, #0]
 800564c:	07d2      	lsls	r2, r2, #31
 800564e:	d501      	bpl.n	8005654 <_printf_float+0x15c>
 8005650:	3301      	adds	r3, #1
 8005652:	6123      	str	r3, [r4, #16]
 8005654:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8005658:	2b00      	cmp	r3, #0
 800565a:	d09e      	beq.n	800559a <_printf_float+0xa2>
 800565c:	232d      	movs	r3, #45	@ 0x2d
 800565e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005662:	e79a      	b.n	800559a <_printf_float+0xa2>
 8005664:	2947      	cmp	r1, #71	@ 0x47
 8005666:	d1bf      	bne.n	80055e8 <_printf_float+0xf0>
 8005668:	2b00      	cmp	r3, #0
 800566a:	d1bd      	bne.n	80055e8 <_printf_float+0xf0>
 800566c:	2301      	movs	r3, #1
 800566e:	e7ba      	b.n	80055e6 <_printf_float+0xee>
 8005670:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005674:	d9dc      	bls.n	8005630 <_printf_float+0x138>
 8005676:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800567a:	d118      	bne.n	80056ae <_printf_float+0x1b6>
 800567c:	2900      	cmp	r1, #0
 800567e:	6863      	ldr	r3, [r4, #4]
 8005680:	dd0b      	ble.n	800569a <_printf_float+0x1a2>
 8005682:	6121      	str	r1, [r4, #16]
 8005684:	b913      	cbnz	r3, 800568c <_printf_float+0x194>
 8005686:	6822      	ldr	r2, [r4, #0]
 8005688:	07d0      	lsls	r0, r2, #31
 800568a:	d502      	bpl.n	8005692 <_printf_float+0x19a>
 800568c:	3301      	adds	r3, #1
 800568e:	440b      	add	r3, r1
 8005690:	6123      	str	r3, [r4, #16]
 8005692:	f04f 0900 	mov.w	r9, #0
 8005696:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005698:	e7dc      	b.n	8005654 <_printf_float+0x15c>
 800569a:	b913      	cbnz	r3, 80056a2 <_printf_float+0x1aa>
 800569c:	6822      	ldr	r2, [r4, #0]
 800569e:	07d2      	lsls	r2, r2, #31
 80056a0:	d501      	bpl.n	80056a6 <_printf_float+0x1ae>
 80056a2:	3302      	adds	r3, #2
 80056a4:	e7f4      	b.n	8005690 <_printf_float+0x198>
 80056a6:	2301      	movs	r3, #1
 80056a8:	e7f2      	b.n	8005690 <_printf_float+0x198>
 80056aa:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80056ae:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80056b0:	4299      	cmp	r1, r3
 80056b2:	db05      	blt.n	80056c0 <_printf_float+0x1c8>
 80056b4:	6823      	ldr	r3, [r4, #0]
 80056b6:	6121      	str	r1, [r4, #16]
 80056b8:	07d8      	lsls	r0, r3, #31
 80056ba:	d5ea      	bpl.n	8005692 <_printf_float+0x19a>
 80056bc:	1c4b      	adds	r3, r1, #1
 80056be:	e7e7      	b.n	8005690 <_printf_float+0x198>
 80056c0:	2900      	cmp	r1, #0
 80056c2:	bfcc      	ite	gt
 80056c4:	2201      	movgt	r2, #1
 80056c6:	f1c1 0202 	rsble	r2, r1, #2
 80056ca:	4413      	add	r3, r2
 80056cc:	e7e0      	b.n	8005690 <_printf_float+0x198>
 80056ce:	6823      	ldr	r3, [r4, #0]
 80056d0:	055a      	lsls	r2, r3, #21
 80056d2:	d407      	bmi.n	80056e4 <_printf_float+0x1ec>
 80056d4:	6923      	ldr	r3, [r4, #16]
 80056d6:	4642      	mov	r2, r8
 80056d8:	4631      	mov	r1, r6
 80056da:	4628      	mov	r0, r5
 80056dc:	47b8      	blx	r7
 80056de:	3001      	adds	r0, #1
 80056e0:	d12b      	bne.n	800573a <_printf_float+0x242>
 80056e2:	e764      	b.n	80055ae <_printf_float+0xb6>
 80056e4:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80056e8:	f240 80dc 	bls.w	80058a4 <_printf_float+0x3ac>
 80056ec:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80056f0:	2200      	movs	r2, #0
 80056f2:	2300      	movs	r3, #0
 80056f4:	f7fb f958 	bl	80009a8 <__aeabi_dcmpeq>
 80056f8:	2800      	cmp	r0, #0
 80056fa:	d033      	beq.n	8005764 <_printf_float+0x26c>
 80056fc:	2301      	movs	r3, #1
 80056fe:	4631      	mov	r1, r6
 8005700:	4628      	mov	r0, r5
 8005702:	4a35      	ldr	r2, [pc, #212]	@ (80057d8 <_printf_float+0x2e0>)
 8005704:	47b8      	blx	r7
 8005706:	3001      	adds	r0, #1
 8005708:	f43f af51 	beq.w	80055ae <_printf_float+0xb6>
 800570c:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8005710:	4543      	cmp	r3, r8
 8005712:	db02      	blt.n	800571a <_printf_float+0x222>
 8005714:	6823      	ldr	r3, [r4, #0]
 8005716:	07d8      	lsls	r0, r3, #31
 8005718:	d50f      	bpl.n	800573a <_printf_float+0x242>
 800571a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800571e:	4631      	mov	r1, r6
 8005720:	4628      	mov	r0, r5
 8005722:	47b8      	blx	r7
 8005724:	3001      	adds	r0, #1
 8005726:	f43f af42 	beq.w	80055ae <_printf_float+0xb6>
 800572a:	f04f 0900 	mov.w	r9, #0
 800572e:	f108 38ff 	add.w	r8, r8, #4294967295
 8005732:	f104 0a1a 	add.w	sl, r4, #26
 8005736:	45c8      	cmp	r8, r9
 8005738:	dc09      	bgt.n	800574e <_printf_float+0x256>
 800573a:	6823      	ldr	r3, [r4, #0]
 800573c:	079b      	lsls	r3, r3, #30
 800573e:	f100 8102 	bmi.w	8005946 <_printf_float+0x44e>
 8005742:	68e0      	ldr	r0, [r4, #12]
 8005744:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005746:	4298      	cmp	r0, r3
 8005748:	bfb8      	it	lt
 800574a:	4618      	movlt	r0, r3
 800574c:	e731      	b.n	80055b2 <_printf_float+0xba>
 800574e:	2301      	movs	r3, #1
 8005750:	4652      	mov	r2, sl
 8005752:	4631      	mov	r1, r6
 8005754:	4628      	mov	r0, r5
 8005756:	47b8      	blx	r7
 8005758:	3001      	adds	r0, #1
 800575a:	f43f af28 	beq.w	80055ae <_printf_float+0xb6>
 800575e:	f109 0901 	add.w	r9, r9, #1
 8005762:	e7e8      	b.n	8005736 <_printf_float+0x23e>
 8005764:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005766:	2b00      	cmp	r3, #0
 8005768:	dc38      	bgt.n	80057dc <_printf_float+0x2e4>
 800576a:	2301      	movs	r3, #1
 800576c:	4631      	mov	r1, r6
 800576e:	4628      	mov	r0, r5
 8005770:	4a19      	ldr	r2, [pc, #100]	@ (80057d8 <_printf_float+0x2e0>)
 8005772:	47b8      	blx	r7
 8005774:	3001      	adds	r0, #1
 8005776:	f43f af1a 	beq.w	80055ae <_printf_float+0xb6>
 800577a:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 800577e:	ea59 0303 	orrs.w	r3, r9, r3
 8005782:	d102      	bne.n	800578a <_printf_float+0x292>
 8005784:	6823      	ldr	r3, [r4, #0]
 8005786:	07d9      	lsls	r1, r3, #31
 8005788:	d5d7      	bpl.n	800573a <_printf_float+0x242>
 800578a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800578e:	4631      	mov	r1, r6
 8005790:	4628      	mov	r0, r5
 8005792:	47b8      	blx	r7
 8005794:	3001      	adds	r0, #1
 8005796:	f43f af0a 	beq.w	80055ae <_printf_float+0xb6>
 800579a:	f04f 0a00 	mov.w	sl, #0
 800579e:	f104 0b1a 	add.w	fp, r4, #26
 80057a2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80057a4:	425b      	negs	r3, r3
 80057a6:	4553      	cmp	r3, sl
 80057a8:	dc01      	bgt.n	80057ae <_printf_float+0x2b6>
 80057aa:	464b      	mov	r3, r9
 80057ac:	e793      	b.n	80056d6 <_printf_float+0x1de>
 80057ae:	2301      	movs	r3, #1
 80057b0:	465a      	mov	r2, fp
 80057b2:	4631      	mov	r1, r6
 80057b4:	4628      	mov	r0, r5
 80057b6:	47b8      	blx	r7
 80057b8:	3001      	adds	r0, #1
 80057ba:	f43f aef8 	beq.w	80055ae <_printf_float+0xb6>
 80057be:	f10a 0a01 	add.w	sl, sl, #1
 80057c2:	e7ee      	b.n	80057a2 <_printf_float+0x2aa>
 80057c4:	7fefffff 	.word	0x7fefffff
 80057c8:	08009c52 	.word	0x08009c52
 80057cc:	08009c56 	.word	0x08009c56
 80057d0:	08009c5a 	.word	0x08009c5a
 80057d4:	08009c5e 	.word	0x08009c5e
 80057d8:	08009c62 	.word	0x08009c62
 80057dc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80057de:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80057e2:	4553      	cmp	r3, sl
 80057e4:	bfa8      	it	ge
 80057e6:	4653      	movge	r3, sl
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	4699      	mov	r9, r3
 80057ec:	dc36      	bgt.n	800585c <_printf_float+0x364>
 80057ee:	f04f 0b00 	mov.w	fp, #0
 80057f2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80057f6:	f104 021a 	add.w	r2, r4, #26
 80057fa:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80057fc:	930a      	str	r3, [sp, #40]	@ 0x28
 80057fe:	eba3 0309 	sub.w	r3, r3, r9
 8005802:	455b      	cmp	r3, fp
 8005804:	dc31      	bgt.n	800586a <_printf_float+0x372>
 8005806:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005808:	459a      	cmp	sl, r3
 800580a:	dc3a      	bgt.n	8005882 <_printf_float+0x38a>
 800580c:	6823      	ldr	r3, [r4, #0]
 800580e:	07da      	lsls	r2, r3, #31
 8005810:	d437      	bmi.n	8005882 <_printf_float+0x38a>
 8005812:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005814:	ebaa 0903 	sub.w	r9, sl, r3
 8005818:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800581a:	ebaa 0303 	sub.w	r3, sl, r3
 800581e:	4599      	cmp	r9, r3
 8005820:	bfa8      	it	ge
 8005822:	4699      	movge	r9, r3
 8005824:	f1b9 0f00 	cmp.w	r9, #0
 8005828:	dc33      	bgt.n	8005892 <_printf_float+0x39a>
 800582a:	f04f 0800 	mov.w	r8, #0
 800582e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005832:	f104 0b1a 	add.w	fp, r4, #26
 8005836:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005838:	ebaa 0303 	sub.w	r3, sl, r3
 800583c:	eba3 0309 	sub.w	r3, r3, r9
 8005840:	4543      	cmp	r3, r8
 8005842:	f77f af7a 	ble.w	800573a <_printf_float+0x242>
 8005846:	2301      	movs	r3, #1
 8005848:	465a      	mov	r2, fp
 800584a:	4631      	mov	r1, r6
 800584c:	4628      	mov	r0, r5
 800584e:	47b8      	blx	r7
 8005850:	3001      	adds	r0, #1
 8005852:	f43f aeac 	beq.w	80055ae <_printf_float+0xb6>
 8005856:	f108 0801 	add.w	r8, r8, #1
 800585a:	e7ec      	b.n	8005836 <_printf_float+0x33e>
 800585c:	4642      	mov	r2, r8
 800585e:	4631      	mov	r1, r6
 8005860:	4628      	mov	r0, r5
 8005862:	47b8      	blx	r7
 8005864:	3001      	adds	r0, #1
 8005866:	d1c2      	bne.n	80057ee <_printf_float+0x2f6>
 8005868:	e6a1      	b.n	80055ae <_printf_float+0xb6>
 800586a:	2301      	movs	r3, #1
 800586c:	4631      	mov	r1, r6
 800586e:	4628      	mov	r0, r5
 8005870:	920a      	str	r2, [sp, #40]	@ 0x28
 8005872:	47b8      	blx	r7
 8005874:	3001      	adds	r0, #1
 8005876:	f43f ae9a 	beq.w	80055ae <_printf_float+0xb6>
 800587a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800587c:	f10b 0b01 	add.w	fp, fp, #1
 8005880:	e7bb      	b.n	80057fa <_printf_float+0x302>
 8005882:	4631      	mov	r1, r6
 8005884:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005888:	4628      	mov	r0, r5
 800588a:	47b8      	blx	r7
 800588c:	3001      	adds	r0, #1
 800588e:	d1c0      	bne.n	8005812 <_printf_float+0x31a>
 8005890:	e68d      	b.n	80055ae <_printf_float+0xb6>
 8005892:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005894:	464b      	mov	r3, r9
 8005896:	4631      	mov	r1, r6
 8005898:	4628      	mov	r0, r5
 800589a:	4442      	add	r2, r8
 800589c:	47b8      	blx	r7
 800589e:	3001      	adds	r0, #1
 80058a0:	d1c3      	bne.n	800582a <_printf_float+0x332>
 80058a2:	e684      	b.n	80055ae <_printf_float+0xb6>
 80058a4:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80058a8:	f1ba 0f01 	cmp.w	sl, #1
 80058ac:	dc01      	bgt.n	80058b2 <_printf_float+0x3ba>
 80058ae:	07db      	lsls	r3, r3, #31
 80058b0:	d536      	bpl.n	8005920 <_printf_float+0x428>
 80058b2:	2301      	movs	r3, #1
 80058b4:	4642      	mov	r2, r8
 80058b6:	4631      	mov	r1, r6
 80058b8:	4628      	mov	r0, r5
 80058ba:	47b8      	blx	r7
 80058bc:	3001      	adds	r0, #1
 80058be:	f43f ae76 	beq.w	80055ae <_printf_float+0xb6>
 80058c2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80058c6:	4631      	mov	r1, r6
 80058c8:	4628      	mov	r0, r5
 80058ca:	47b8      	blx	r7
 80058cc:	3001      	adds	r0, #1
 80058ce:	f43f ae6e 	beq.w	80055ae <_printf_float+0xb6>
 80058d2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80058d6:	2200      	movs	r2, #0
 80058d8:	2300      	movs	r3, #0
 80058da:	f10a 3aff 	add.w	sl, sl, #4294967295
 80058de:	f7fb f863 	bl	80009a8 <__aeabi_dcmpeq>
 80058e2:	b9c0      	cbnz	r0, 8005916 <_printf_float+0x41e>
 80058e4:	4653      	mov	r3, sl
 80058e6:	f108 0201 	add.w	r2, r8, #1
 80058ea:	4631      	mov	r1, r6
 80058ec:	4628      	mov	r0, r5
 80058ee:	47b8      	blx	r7
 80058f0:	3001      	adds	r0, #1
 80058f2:	d10c      	bne.n	800590e <_printf_float+0x416>
 80058f4:	e65b      	b.n	80055ae <_printf_float+0xb6>
 80058f6:	2301      	movs	r3, #1
 80058f8:	465a      	mov	r2, fp
 80058fa:	4631      	mov	r1, r6
 80058fc:	4628      	mov	r0, r5
 80058fe:	47b8      	blx	r7
 8005900:	3001      	adds	r0, #1
 8005902:	f43f ae54 	beq.w	80055ae <_printf_float+0xb6>
 8005906:	f108 0801 	add.w	r8, r8, #1
 800590a:	45d0      	cmp	r8, sl
 800590c:	dbf3      	blt.n	80058f6 <_printf_float+0x3fe>
 800590e:	464b      	mov	r3, r9
 8005910:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005914:	e6e0      	b.n	80056d8 <_printf_float+0x1e0>
 8005916:	f04f 0800 	mov.w	r8, #0
 800591a:	f104 0b1a 	add.w	fp, r4, #26
 800591e:	e7f4      	b.n	800590a <_printf_float+0x412>
 8005920:	2301      	movs	r3, #1
 8005922:	4642      	mov	r2, r8
 8005924:	e7e1      	b.n	80058ea <_printf_float+0x3f2>
 8005926:	2301      	movs	r3, #1
 8005928:	464a      	mov	r2, r9
 800592a:	4631      	mov	r1, r6
 800592c:	4628      	mov	r0, r5
 800592e:	47b8      	blx	r7
 8005930:	3001      	adds	r0, #1
 8005932:	f43f ae3c 	beq.w	80055ae <_printf_float+0xb6>
 8005936:	f108 0801 	add.w	r8, r8, #1
 800593a:	68e3      	ldr	r3, [r4, #12]
 800593c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800593e:	1a5b      	subs	r3, r3, r1
 8005940:	4543      	cmp	r3, r8
 8005942:	dcf0      	bgt.n	8005926 <_printf_float+0x42e>
 8005944:	e6fd      	b.n	8005742 <_printf_float+0x24a>
 8005946:	f04f 0800 	mov.w	r8, #0
 800594a:	f104 0919 	add.w	r9, r4, #25
 800594e:	e7f4      	b.n	800593a <_printf_float+0x442>

08005950 <_printf_common>:
 8005950:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005954:	4616      	mov	r6, r2
 8005956:	4698      	mov	r8, r3
 8005958:	688a      	ldr	r2, [r1, #8]
 800595a:	690b      	ldr	r3, [r1, #16]
 800595c:	4607      	mov	r7, r0
 800595e:	4293      	cmp	r3, r2
 8005960:	bfb8      	it	lt
 8005962:	4613      	movlt	r3, r2
 8005964:	6033      	str	r3, [r6, #0]
 8005966:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800596a:	460c      	mov	r4, r1
 800596c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005970:	b10a      	cbz	r2, 8005976 <_printf_common+0x26>
 8005972:	3301      	adds	r3, #1
 8005974:	6033      	str	r3, [r6, #0]
 8005976:	6823      	ldr	r3, [r4, #0]
 8005978:	0699      	lsls	r1, r3, #26
 800597a:	bf42      	ittt	mi
 800597c:	6833      	ldrmi	r3, [r6, #0]
 800597e:	3302      	addmi	r3, #2
 8005980:	6033      	strmi	r3, [r6, #0]
 8005982:	6825      	ldr	r5, [r4, #0]
 8005984:	f015 0506 	ands.w	r5, r5, #6
 8005988:	d106      	bne.n	8005998 <_printf_common+0x48>
 800598a:	f104 0a19 	add.w	sl, r4, #25
 800598e:	68e3      	ldr	r3, [r4, #12]
 8005990:	6832      	ldr	r2, [r6, #0]
 8005992:	1a9b      	subs	r3, r3, r2
 8005994:	42ab      	cmp	r3, r5
 8005996:	dc2b      	bgt.n	80059f0 <_printf_common+0xa0>
 8005998:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800599c:	6822      	ldr	r2, [r4, #0]
 800599e:	3b00      	subs	r3, #0
 80059a0:	bf18      	it	ne
 80059a2:	2301      	movne	r3, #1
 80059a4:	0692      	lsls	r2, r2, #26
 80059a6:	d430      	bmi.n	8005a0a <_printf_common+0xba>
 80059a8:	4641      	mov	r1, r8
 80059aa:	4638      	mov	r0, r7
 80059ac:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80059b0:	47c8      	blx	r9
 80059b2:	3001      	adds	r0, #1
 80059b4:	d023      	beq.n	80059fe <_printf_common+0xae>
 80059b6:	6823      	ldr	r3, [r4, #0]
 80059b8:	6922      	ldr	r2, [r4, #16]
 80059ba:	f003 0306 	and.w	r3, r3, #6
 80059be:	2b04      	cmp	r3, #4
 80059c0:	bf14      	ite	ne
 80059c2:	2500      	movne	r5, #0
 80059c4:	6833      	ldreq	r3, [r6, #0]
 80059c6:	f04f 0600 	mov.w	r6, #0
 80059ca:	bf08      	it	eq
 80059cc:	68e5      	ldreq	r5, [r4, #12]
 80059ce:	f104 041a 	add.w	r4, r4, #26
 80059d2:	bf08      	it	eq
 80059d4:	1aed      	subeq	r5, r5, r3
 80059d6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80059da:	bf08      	it	eq
 80059dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80059e0:	4293      	cmp	r3, r2
 80059e2:	bfc4      	itt	gt
 80059e4:	1a9b      	subgt	r3, r3, r2
 80059e6:	18ed      	addgt	r5, r5, r3
 80059e8:	42b5      	cmp	r5, r6
 80059ea:	d11a      	bne.n	8005a22 <_printf_common+0xd2>
 80059ec:	2000      	movs	r0, #0
 80059ee:	e008      	b.n	8005a02 <_printf_common+0xb2>
 80059f0:	2301      	movs	r3, #1
 80059f2:	4652      	mov	r2, sl
 80059f4:	4641      	mov	r1, r8
 80059f6:	4638      	mov	r0, r7
 80059f8:	47c8      	blx	r9
 80059fa:	3001      	adds	r0, #1
 80059fc:	d103      	bne.n	8005a06 <_printf_common+0xb6>
 80059fe:	f04f 30ff 	mov.w	r0, #4294967295
 8005a02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a06:	3501      	adds	r5, #1
 8005a08:	e7c1      	b.n	800598e <_printf_common+0x3e>
 8005a0a:	2030      	movs	r0, #48	@ 0x30
 8005a0c:	18e1      	adds	r1, r4, r3
 8005a0e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005a12:	1c5a      	adds	r2, r3, #1
 8005a14:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005a18:	4422      	add	r2, r4
 8005a1a:	3302      	adds	r3, #2
 8005a1c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005a20:	e7c2      	b.n	80059a8 <_printf_common+0x58>
 8005a22:	2301      	movs	r3, #1
 8005a24:	4622      	mov	r2, r4
 8005a26:	4641      	mov	r1, r8
 8005a28:	4638      	mov	r0, r7
 8005a2a:	47c8      	blx	r9
 8005a2c:	3001      	adds	r0, #1
 8005a2e:	d0e6      	beq.n	80059fe <_printf_common+0xae>
 8005a30:	3601      	adds	r6, #1
 8005a32:	e7d9      	b.n	80059e8 <_printf_common+0x98>

08005a34 <_printf_i>:
 8005a34:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005a38:	7e0f      	ldrb	r7, [r1, #24]
 8005a3a:	4691      	mov	r9, r2
 8005a3c:	2f78      	cmp	r7, #120	@ 0x78
 8005a3e:	4680      	mov	r8, r0
 8005a40:	460c      	mov	r4, r1
 8005a42:	469a      	mov	sl, r3
 8005a44:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005a46:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005a4a:	d807      	bhi.n	8005a5c <_printf_i+0x28>
 8005a4c:	2f62      	cmp	r7, #98	@ 0x62
 8005a4e:	d80a      	bhi.n	8005a66 <_printf_i+0x32>
 8005a50:	2f00      	cmp	r7, #0
 8005a52:	f000 80d3 	beq.w	8005bfc <_printf_i+0x1c8>
 8005a56:	2f58      	cmp	r7, #88	@ 0x58
 8005a58:	f000 80ba 	beq.w	8005bd0 <_printf_i+0x19c>
 8005a5c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005a60:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005a64:	e03a      	b.n	8005adc <_printf_i+0xa8>
 8005a66:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005a6a:	2b15      	cmp	r3, #21
 8005a6c:	d8f6      	bhi.n	8005a5c <_printf_i+0x28>
 8005a6e:	a101      	add	r1, pc, #4	@ (adr r1, 8005a74 <_printf_i+0x40>)
 8005a70:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005a74:	08005acd 	.word	0x08005acd
 8005a78:	08005ae1 	.word	0x08005ae1
 8005a7c:	08005a5d 	.word	0x08005a5d
 8005a80:	08005a5d 	.word	0x08005a5d
 8005a84:	08005a5d 	.word	0x08005a5d
 8005a88:	08005a5d 	.word	0x08005a5d
 8005a8c:	08005ae1 	.word	0x08005ae1
 8005a90:	08005a5d 	.word	0x08005a5d
 8005a94:	08005a5d 	.word	0x08005a5d
 8005a98:	08005a5d 	.word	0x08005a5d
 8005a9c:	08005a5d 	.word	0x08005a5d
 8005aa0:	08005be3 	.word	0x08005be3
 8005aa4:	08005b0b 	.word	0x08005b0b
 8005aa8:	08005b9d 	.word	0x08005b9d
 8005aac:	08005a5d 	.word	0x08005a5d
 8005ab0:	08005a5d 	.word	0x08005a5d
 8005ab4:	08005c05 	.word	0x08005c05
 8005ab8:	08005a5d 	.word	0x08005a5d
 8005abc:	08005b0b 	.word	0x08005b0b
 8005ac0:	08005a5d 	.word	0x08005a5d
 8005ac4:	08005a5d 	.word	0x08005a5d
 8005ac8:	08005ba5 	.word	0x08005ba5
 8005acc:	6833      	ldr	r3, [r6, #0]
 8005ace:	1d1a      	adds	r2, r3, #4
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	6032      	str	r2, [r6, #0]
 8005ad4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005ad8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005adc:	2301      	movs	r3, #1
 8005ade:	e09e      	b.n	8005c1e <_printf_i+0x1ea>
 8005ae0:	6833      	ldr	r3, [r6, #0]
 8005ae2:	6820      	ldr	r0, [r4, #0]
 8005ae4:	1d19      	adds	r1, r3, #4
 8005ae6:	6031      	str	r1, [r6, #0]
 8005ae8:	0606      	lsls	r6, r0, #24
 8005aea:	d501      	bpl.n	8005af0 <_printf_i+0xbc>
 8005aec:	681d      	ldr	r5, [r3, #0]
 8005aee:	e003      	b.n	8005af8 <_printf_i+0xc4>
 8005af0:	0645      	lsls	r5, r0, #25
 8005af2:	d5fb      	bpl.n	8005aec <_printf_i+0xb8>
 8005af4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005af8:	2d00      	cmp	r5, #0
 8005afa:	da03      	bge.n	8005b04 <_printf_i+0xd0>
 8005afc:	232d      	movs	r3, #45	@ 0x2d
 8005afe:	426d      	negs	r5, r5
 8005b00:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005b04:	230a      	movs	r3, #10
 8005b06:	4859      	ldr	r0, [pc, #356]	@ (8005c6c <_printf_i+0x238>)
 8005b08:	e011      	b.n	8005b2e <_printf_i+0xfa>
 8005b0a:	6821      	ldr	r1, [r4, #0]
 8005b0c:	6833      	ldr	r3, [r6, #0]
 8005b0e:	0608      	lsls	r0, r1, #24
 8005b10:	f853 5b04 	ldr.w	r5, [r3], #4
 8005b14:	d402      	bmi.n	8005b1c <_printf_i+0xe8>
 8005b16:	0649      	lsls	r1, r1, #25
 8005b18:	bf48      	it	mi
 8005b1a:	b2ad      	uxthmi	r5, r5
 8005b1c:	2f6f      	cmp	r7, #111	@ 0x6f
 8005b1e:	6033      	str	r3, [r6, #0]
 8005b20:	bf14      	ite	ne
 8005b22:	230a      	movne	r3, #10
 8005b24:	2308      	moveq	r3, #8
 8005b26:	4851      	ldr	r0, [pc, #324]	@ (8005c6c <_printf_i+0x238>)
 8005b28:	2100      	movs	r1, #0
 8005b2a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005b2e:	6866      	ldr	r6, [r4, #4]
 8005b30:	2e00      	cmp	r6, #0
 8005b32:	bfa8      	it	ge
 8005b34:	6821      	ldrge	r1, [r4, #0]
 8005b36:	60a6      	str	r6, [r4, #8]
 8005b38:	bfa4      	itt	ge
 8005b3a:	f021 0104 	bicge.w	r1, r1, #4
 8005b3e:	6021      	strge	r1, [r4, #0]
 8005b40:	b90d      	cbnz	r5, 8005b46 <_printf_i+0x112>
 8005b42:	2e00      	cmp	r6, #0
 8005b44:	d04b      	beq.n	8005bde <_printf_i+0x1aa>
 8005b46:	4616      	mov	r6, r2
 8005b48:	fbb5 f1f3 	udiv	r1, r5, r3
 8005b4c:	fb03 5711 	mls	r7, r3, r1, r5
 8005b50:	5dc7      	ldrb	r7, [r0, r7]
 8005b52:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005b56:	462f      	mov	r7, r5
 8005b58:	42bb      	cmp	r3, r7
 8005b5a:	460d      	mov	r5, r1
 8005b5c:	d9f4      	bls.n	8005b48 <_printf_i+0x114>
 8005b5e:	2b08      	cmp	r3, #8
 8005b60:	d10b      	bne.n	8005b7a <_printf_i+0x146>
 8005b62:	6823      	ldr	r3, [r4, #0]
 8005b64:	07df      	lsls	r7, r3, #31
 8005b66:	d508      	bpl.n	8005b7a <_printf_i+0x146>
 8005b68:	6923      	ldr	r3, [r4, #16]
 8005b6a:	6861      	ldr	r1, [r4, #4]
 8005b6c:	4299      	cmp	r1, r3
 8005b6e:	bfde      	ittt	le
 8005b70:	2330      	movle	r3, #48	@ 0x30
 8005b72:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005b76:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005b7a:	1b92      	subs	r2, r2, r6
 8005b7c:	6122      	str	r2, [r4, #16]
 8005b7e:	464b      	mov	r3, r9
 8005b80:	4621      	mov	r1, r4
 8005b82:	4640      	mov	r0, r8
 8005b84:	f8cd a000 	str.w	sl, [sp]
 8005b88:	aa03      	add	r2, sp, #12
 8005b8a:	f7ff fee1 	bl	8005950 <_printf_common>
 8005b8e:	3001      	adds	r0, #1
 8005b90:	d14a      	bne.n	8005c28 <_printf_i+0x1f4>
 8005b92:	f04f 30ff 	mov.w	r0, #4294967295
 8005b96:	b004      	add	sp, #16
 8005b98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b9c:	6823      	ldr	r3, [r4, #0]
 8005b9e:	f043 0320 	orr.w	r3, r3, #32
 8005ba2:	6023      	str	r3, [r4, #0]
 8005ba4:	2778      	movs	r7, #120	@ 0x78
 8005ba6:	4832      	ldr	r0, [pc, #200]	@ (8005c70 <_printf_i+0x23c>)
 8005ba8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005bac:	6823      	ldr	r3, [r4, #0]
 8005bae:	6831      	ldr	r1, [r6, #0]
 8005bb0:	061f      	lsls	r7, r3, #24
 8005bb2:	f851 5b04 	ldr.w	r5, [r1], #4
 8005bb6:	d402      	bmi.n	8005bbe <_printf_i+0x18a>
 8005bb8:	065f      	lsls	r7, r3, #25
 8005bba:	bf48      	it	mi
 8005bbc:	b2ad      	uxthmi	r5, r5
 8005bbe:	6031      	str	r1, [r6, #0]
 8005bc0:	07d9      	lsls	r1, r3, #31
 8005bc2:	bf44      	itt	mi
 8005bc4:	f043 0320 	orrmi.w	r3, r3, #32
 8005bc8:	6023      	strmi	r3, [r4, #0]
 8005bca:	b11d      	cbz	r5, 8005bd4 <_printf_i+0x1a0>
 8005bcc:	2310      	movs	r3, #16
 8005bce:	e7ab      	b.n	8005b28 <_printf_i+0xf4>
 8005bd0:	4826      	ldr	r0, [pc, #152]	@ (8005c6c <_printf_i+0x238>)
 8005bd2:	e7e9      	b.n	8005ba8 <_printf_i+0x174>
 8005bd4:	6823      	ldr	r3, [r4, #0]
 8005bd6:	f023 0320 	bic.w	r3, r3, #32
 8005bda:	6023      	str	r3, [r4, #0]
 8005bdc:	e7f6      	b.n	8005bcc <_printf_i+0x198>
 8005bde:	4616      	mov	r6, r2
 8005be0:	e7bd      	b.n	8005b5e <_printf_i+0x12a>
 8005be2:	6833      	ldr	r3, [r6, #0]
 8005be4:	6825      	ldr	r5, [r4, #0]
 8005be6:	1d18      	adds	r0, r3, #4
 8005be8:	6961      	ldr	r1, [r4, #20]
 8005bea:	6030      	str	r0, [r6, #0]
 8005bec:	062e      	lsls	r6, r5, #24
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	d501      	bpl.n	8005bf6 <_printf_i+0x1c2>
 8005bf2:	6019      	str	r1, [r3, #0]
 8005bf4:	e002      	b.n	8005bfc <_printf_i+0x1c8>
 8005bf6:	0668      	lsls	r0, r5, #25
 8005bf8:	d5fb      	bpl.n	8005bf2 <_printf_i+0x1be>
 8005bfa:	8019      	strh	r1, [r3, #0]
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	4616      	mov	r6, r2
 8005c00:	6123      	str	r3, [r4, #16]
 8005c02:	e7bc      	b.n	8005b7e <_printf_i+0x14a>
 8005c04:	6833      	ldr	r3, [r6, #0]
 8005c06:	2100      	movs	r1, #0
 8005c08:	1d1a      	adds	r2, r3, #4
 8005c0a:	6032      	str	r2, [r6, #0]
 8005c0c:	681e      	ldr	r6, [r3, #0]
 8005c0e:	6862      	ldr	r2, [r4, #4]
 8005c10:	4630      	mov	r0, r6
 8005c12:	f000 fd12 	bl	800663a <memchr>
 8005c16:	b108      	cbz	r0, 8005c1c <_printf_i+0x1e8>
 8005c18:	1b80      	subs	r0, r0, r6
 8005c1a:	6060      	str	r0, [r4, #4]
 8005c1c:	6863      	ldr	r3, [r4, #4]
 8005c1e:	6123      	str	r3, [r4, #16]
 8005c20:	2300      	movs	r3, #0
 8005c22:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005c26:	e7aa      	b.n	8005b7e <_printf_i+0x14a>
 8005c28:	4632      	mov	r2, r6
 8005c2a:	4649      	mov	r1, r9
 8005c2c:	4640      	mov	r0, r8
 8005c2e:	6923      	ldr	r3, [r4, #16]
 8005c30:	47d0      	blx	sl
 8005c32:	3001      	adds	r0, #1
 8005c34:	d0ad      	beq.n	8005b92 <_printf_i+0x15e>
 8005c36:	6823      	ldr	r3, [r4, #0]
 8005c38:	079b      	lsls	r3, r3, #30
 8005c3a:	d413      	bmi.n	8005c64 <_printf_i+0x230>
 8005c3c:	68e0      	ldr	r0, [r4, #12]
 8005c3e:	9b03      	ldr	r3, [sp, #12]
 8005c40:	4298      	cmp	r0, r3
 8005c42:	bfb8      	it	lt
 8005c44:	4618      	movlt	r0, r3
 8005c46:	e7a6      	b.n	8005b96 <_printf_i+0x162>
 8005c48:	2301      	movs	r3, #1
 8005c4a:	4632      	mov	r2, r6
 8005c4c:	4649      	mov	r1, r9
 8005c4e:	4640      	mov	r0, r8
 8005c50:	47d0      	blx	sl
 8005c52:	3001      	adds	r0, #1
 8005c54:	d09d      	beq.n	8005b92 <_printf_i+0x15e>
 8005c56:	3501      	adds	r5, #1
 8005c58:	68e3      	ldr	r3, [r4, #12]
 8005c5a:	9903      	ldr	r1, [sp, #12]
 8005c5c:	1a5b      	subs	r3, r3, r1
 8005c5e:	42ab      	cmp	r3, r5
 8005c60:	dcf2      	bgt.n	8005c48 <_printf_i+0x214>
 8005c62:	e7eb      	b.n	8005c3c <_printf_i+0x208>
 8005c64:	2500      	movs	r5, #0
 8005c66:	f104 0619 	add.w	r6, r4, #25
 8005c6a:	e7f5      	b.n	8005c58 <_printf_i+0x224>
 8005c6c:	08009c64 	.word	0x08009c64
 8005c70:	08009c75 	.word	0x08009c75

08005c74 <_scanf_float>:
 8005c74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c78:	b087      	sub	sp, #28
 8005c7a:	9303      	str	r3, [sp, #12]
 8005c7c:	688b      	ldr	r3, [r1, #8]
 8005c7e:	4617      	mov	r7, r2
 8005c80:	1e5a      	subs	r2, r3, #1
 8005c82:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8005c86:	bf82      	ittt	hi
 8005c88:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8005c8c:	eb03 0b05 	addhi.w	fp, r3, r5
 8005c90:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8005c94:	460a      	mov	r2, r1
 8005c96:	f04f 0500 	mov.w	r5, #0
 8005c9a:	bf88      	it	hi
 8005c9c:	608b      	strhi	r3, [r1, #8]
 8005c9e:	680b      	ldr	r3, [r1, #0]
 8005ca0:	4680      	mov	r8, r0
 8005ca2:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8005ca6:	f842 3b1c 	str.w	r3, [r2], #28
 8005caa:	460c      	mov	r4, r1
 8005cac:	bf98      	it	ls
 8005cae:	f04f 0b00 	movls.w	fp, #0
 8005cb2:	4616      	mov	r6, r2
 8005cb4:	46aa      	mov	sl, r5
 8005cb6:	46a9      	mov	r9, r5
 8005cb8:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8005cbc:	9201      	str	r2, [sp, #4]
 8005cbe:	9502      	str	r5, [sp, #8]
 8005cc0:	68a2      	ldr	r2, [r4, #8]
 8005cc2:	b152      	cbz	r2, 8005cda <_scanf_float+0x66>
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	781b      	ldrb	r3, [r3, #0]
 8005cc8:	2b4e      	cmp	r3, #78	@ 0x4e
 8005cca:	d865      	bhi.n	8005d98 <_scanf_float+0x124>
 8005ccc:	2b40      	cmp	r3, #64	@ 0x40
 8005cce:	d83d      	bhi.n	8005d4c <_scanf_float+0xd8>
 8005cd0:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8005cd4:	b2c8      	uxtb	r0, r1
 8005cd6:	280e      	cmp	r0, #14
 8005cd8:	d93b      	bls.n	8005d52 <_scanf_float+0xde>
 8005cda:	f1b9 0f00 	cmp.w	r9, #0
 8005cde:	d003      	beq.n	8005ce8 <_scanf_float+0x74>
 8005ce0:	6823      	ldr	r3, [r4, #0]
 8005ce2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005ce6:	6023      	str	r3, [r4, #0]
 8005ce8:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005cec:	f1ba 0f01 	cmp.w	sl, #1
 8005cf0:	f200 8118 	bhi.w	8005f24 <_scanf_float+0x2b0>
 8005cf4:	9b01      	ldr	r3, [sp, #4]
 8005cf6:	429e      	cmp	r6, r3
 8005cf8:	f200 8109 	bhi.w	8005f0e <_scanf_float+0x29a>
 8005cfc:	2001      	movs	r0, #1
 8005cfe:	b007      	add	sp, #28
 8005d00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d04:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8005d08:	2a0d      	cmp	r2, #13
 8005d0a:	d8e6      	bhi.n	8005cda <_scanf_float+0x66>
 8005d0c:	a101      	add	r1, pc, #4	@ (adr r1, 8005d14 <_scanf_float+0xa0>)
 8005d0e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005d12:	bf00      	nop
 8005d14:	08005e5b 	.word	0x08005e5b
 8005d18:	08005cdb 	.word	0x08005cdb
 8005d1c:	08005cdb 	.word	0x08005cdb
 8005d20:	08005cdb 	.word	0x08005cdb
 8005d24:	08005ebb 	.word	0x08005ebb
 8005d28:	08005e93 	.word	0x08005e93
 8005d2c:	08005cdb 	.word	0x08005cdb
 8005d30:	08005cdb 	.word	0x08005cdb
 8005d34:	08005e69 	.word	0x08005e69
 8005d38:	08005cdb 	.word	0x08005cdb
 8005d3c:	08005cdb 	.word	0x08005cdb
 8005d40:	08005cdb 	.word	0x08005cdb
 8005d44:	08005cdb 	.word	0x08005cdb
 8005d48:	08005e21 	.word	0x08005e21
 8005d4c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8005d50:	e7da      	b.n	8005d08 <_scanf_float+0x94>
 8005d52:	290e      	cmp	r1, #14
 8005d54:	d8c1      	bhi.n	8005cda <_scanf_float+0x66>
 8005d56:	a001      	add	r0, pc, #4	@ (adr r0, 8005d5c <_scanf_float+0xe8>)
 8005d58:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8005d5c:	08005e11 	.word	0x08005e11
 8005d60:	08005cdb 	.word	0x08005cdb
 8005d64:	08005e11 	.word	0x08005e11
 8005d68:	08005ea7 	.word	0x08005ea7
 8005d6c:	08005cdb 	.word	0x08005cdb
 8005d70:	08005db9 	.word	0x08005db9
 8005d74:	08005df7 	.word	0x08005df7
 8005d78:	08005df7 	.word	0x08005df7
 8005d7c:	08005df7 	.word	0x08005df7
 8005d80:	08005df7 	.word	0x08005df7
 8005d84:	08005df7 	.word	0x08005df7
 8005d88:	08005df7 	.word	0x08005df7
 8005d8c:	08005df7 	.word	0x08005df7
 8005d90:	08005df7 	.word	0x08005df7
 8005d94:	08005df7 	.word	0x08005df7
 8005d98:	2b6e      	cmp	r3, #110	@ 0x6e
 8005d9a:	d809      	bhi.n	8005db0 <_scanf_float+0x13c>
 8005d9c:	2b60      	cmp	r3, #96	@ 0x60
 8005d9e:	d8b1      	bhi.n	8005d04 <_scanf_float+0x90>
 8005da0:	2b54      	cmp	r3, #84	@ 0x54
 8005da2:	d07b      	beq.n	8005e9c <_scanf_float+0x228>
 8005da4:	2b59      	cmp	r3, #89	@ 0x59
 8005da6:	d198      	bne.n	8005cda <_scanf_float+0x66>
 8005da8:	2d07      	cmp	r5, #7
 8005daa:	d196      	bne.n	8005cda <_scanf_float+0x66>
 8005dac:	2508      	movs	r5, #8
 8005dae:	e02c      	b.n	8005e0a <_scanf_float+0x196>
 8005db0:	2b74      	cmp	r3, #116	@ 0x74
 8005db2:	d073      	beq.n	8005e9c <_scanf_float+0x228>
 8005db4:	2b79      	cmp	r3, #121	@ 0x79
 8005db6:	e7f6      	b.n	8005da6 <_scanf_float+0x132>
 8005db8:	6821      	ldr	r1, [r4, #0]
 8005dba:	05c8      	lsls	r0, r1, #23
 8005dbc:	d51b      	bpl.n	8005df6 <_scanf_float+0x182>
 8005dbe:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8005dc2:	6021      	str	r1, [r4, #0]
 8005dc4:	f109 0901 	add.w	r9, r9, #1
 8005dc8:	f1bb 0f00 	cmp.w	fp, #0
 8005dcc:	d003      	beq.n	8005dd6 <_scanf_float+0x162>
 8005dce:	3201      	adds	r2, #1
 8005dd0:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005dd4:	60a2      	str	r2, [r4, #8]
 8005dd6:	68a3      	ldr	r3, [r4, #8]
 8005dd8:	3b01      	subs	r3, #1
 8005dda:	60a3      	str	r3, [r4, #8]
 8005ddc:	6923      	ldr	r3, [r4, #16]
 8005dde:	3301      	adds	r3, #1
 8005de0:	6123      	str	r3, [r4, #16]
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	3b01      	subs	r3, #1
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	607b      	str	r3, [r7, #4]
 8005dea:	f340 8087 	ble.w	8005efc <_scanf_float+0x288>
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	3301      	adds	r3, #1
 8005df2:	603b      	str	r3, [r7, #0]
 8005df4:	e764      	b.n	8005cc0 <_scanf_float+0x4c>
 8005df6:	eb1a 0105 	adds.w	r1, sl, r5
 8005dfa:	f47f af6e 	bne.w	8005cda <_scanf_float+0x66>
 8005dfe:	460d      	mov	r5, r1
 8005e00:	468a      	mov	sl, r1
 8005e02:	6822      	ldr	r2, [r4, #0]
 8005e04:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8005e08:	6022      	str	r2, [r4, #0]
 8005e0a:	f806 3b01 	strb.w	r3, [r6], #1
 8005e0e:	e7e2      	b.n	8005dd6 <_scanf_float+0x162>
 8005e10:	6822      	ldr	r2, [r4, #0]
 8005e12:	0610      	lsls	r0, r2, #24
 8005e14:	f57f af61 	bpl.w	8005cda <_scanf_float+0x66>
 8005e18:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005e1c:	6022      	str	r2, [r4, #0]
 8005e1e:	e7f4      	b.n	8005e0a <_scanf_float+0x196>
 8005e20:	f1ba 0f00 	cmp.w	sl, #0
 8005e24:	d10e      	bne.n	8005e44 <_scanf_float+0x1d0>
 8005e26:	f1b9 0f00 	cmp.w	r9, #0
 8005e2a:	d10e      	bne.n	8005e4a <_scanf_float+0x1d6>
 8005e2c:	6822      	ldr	r2, [r4, #0]
 8005e2e:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8005e32:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8005e36:	d108      	bne.n	8005e4a <_scanf_float+0x1d6>
 8005e38:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8005e3c:	f04f 0a01 	mov.w	sl, #1
 8005e40:	6022      	str	r2, [r4, #0]
 8005e42:	e7e2      	b.n	8005e0a <_scanf_float+0x196>
 8005e44:	f1ba 0f02 	cmp.w	sl, #2
 8005e48:	d055      	beq.n	8005ef6 <_scanf_float+0x282>
 8005e4a:	2d01      	cmp	r5, #1
 8005e4c:	d002      	beq.n	8005e54 <_scanf_float+0x1e0>
 8005e4e:	2d04      	cmp	r5, #4
 8005e50:	f47f af43 	bne.w	8005cda <_scanf_float+0x66>
 8005e54:	3501      	adds	r5, #1
 8005e56:	b2ed      	uxtb	r5, r5
 8005e58:	e7d7      	b.n	8005e0a <_scanf_float+0x196>
 8005e5a:	f1ba 0f01 	cmp.w	sl, #1
 8005e5e:	f47f af3c 	bne.w	8005cda <_scanf_float+0x66>
 8005e62:	f04f 0a02 	mov.w	sl, #2
 8005e66:	e7d0      	b.n	8005e0a <_scanf_float+0x196>
 8005e68:	b97d      	cbnz	r5, 8005e8a <_scanf_float+0x216>
 8005e6a:	f1b9 0f00 	cmp.w	r9, #0
 8005e6e:	f47f af37 	bne.w	8005ce0 <_scanf_float+0x6c>
 8005e72:	6822      	ldr	r2, [r4, #0]
 8005e74:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8005e78:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8005e7c:	f040 8103 	bne.w	8006086 <_scanf_float+0x412>
 8005e80:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8005e84:	2501      	movs	r5, #1
 8005e86:	6022      	str	r2, [r4, #0]
 8005e88:	e7bf      	b.n	8005e0a <_scanf_float+0x196>
 8005e8a:	2d03      	cmp	r5, #3
 8005e8c:	d0e2      	beq.n	8005e54 <_scanf_float+0x1e0>
 8005e8e:	2d05      	cmp	r5, #5
 8005e90:	e7de      	b.n	8005e50 <_scanf_float+0x1dc>
 8005e92:	2d02      	cmp	r5, #2
 8005e94:	f47f af21 	bne.w	8005cda <_scanf_float+0x66>
 8005e98:	2503      	movs	r5, #3
 8005e9a:	e7b6      	b.n	8005e0a <_scanf_float+0x196>
 8005e9c:	2d06      	cmp	r5, #6
 8005e9e:	f47f af1c 	bne.w	8005cda <_scanf_float+0x66>
 8005ea2:	2507      	movs	r5, #7
 8005ea4:	e7b1      	b.n	8005e0a <_scanf_float+0x196>
 8005ea6:	6822      	ldr	r2, [r4, #0]
 8005ea8:	0591      	lsls	r1, r2, #22
 8005eaa:	f57f af16 	bpl.w	8005cda <_scanf_float+0x66>
 8005eae:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8005eb2:	6022      	str	r2, [r4, #0]
 8005eb4:	f8cd 9008 	str.w	r9, [sp, #8]
 8005eb8:	e7a7      	b.n	8005e0a <_scanf_float+0x196>
 8005eba:	6822      	ldr	r2, [r4, #0]
 8005ebc:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8005ec0:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8005ec4:	d006      	beq.n	8005ed4 <_scanf_float+0x260>
 8005ec6:	0550      	lsls	r0, r2, #21
 8005ec8:	f57f af07 	bpl.w	8005cda <_scanf_float+0x66>
 8005ecc:	f1b9 0f00 	cmp.w	r9, #0
 8005ed0:	f000 80d9 	beq.w	8006086 <_scanf_float+0x412>
 8005ed4:	0591      	lsls	r1, r2, #22
 8005ed6:	bf58      	it	pl
 8005ed8:	9902      	ldrpl	r1, [sp, #8]
 8005eda:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8005ede:	bf58      	it	pl
 8005ee0:	eba9 0101 	subpl.w	r1, r9, r1
 8005ee4:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8005ee8:	f04f 0900 	mov.w	r9, #0
 8005eec:	bf58      	it	pl
 8005eee:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8005ef2:	6022      	str	r2, [r4, #0]
 8005ef4:	e789      	b.n	8005e0a <_scanf_float+0x196>
 8005ef6:	f04f 0a03 	mov.w	sl, #3
 8005efa:	e786      	b.n	8005e0a <_scanf_float+0x196>
 8005efc:	4639      	mov	r1, r7
 8005efe:	4640      	mov	r0, r8
 8005f00:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8005f04:	4798      	blx	r3
 8005f06:	2800      	cmp	r0, #0
 8005f08:	f43f aeda 	beq.w	8005cc0 <_scanf_float+0x4c>
 8005f0c:	e6e5      	b.n	8005cda <_scanf_float+0x66>
 8005f0e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005f12:	463a      	mov	r2, r7
 8005f14:	4640      	mov	r0, r8
 8005f16:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005f1a:	4798      	blx	r3
 8005f1c:	6923      	ldr	r3, [r4, #16]
 8005f1e:	3b01      	subs	r3, #1
 8005f20:	6123      	str	r3, [r4, #16]
 8005f22:	e6e7      	b.n	8005cf4 <_scanf_float+0x80>
 8005f24:	1e6b      	subs	r3, r5, #1
 8005f26:	2b06      	cmp	r3, #6
 8005f28:	d824      	bhi.n	8005f74 <_scanf_float+0x300>
 8005f2a:	2d02      	cmp	r5, #2
 8005f2c:	d836      	bhi.n	8005f9c <_scanf_float+0x328>
 8005f2e:	9b01      	ldr	r3, [sp, #4]
 8005f30:	429e      	cmp	r6, r3
 8005f32:	f67f aee3 	bls.w	8005cfc <_scanf_float+0x88>
 8005f36:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005f3a:	463a      	mov	r2, r7
 8005f3c:	4640      	mov	r0, r8
 8005f3e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005f42:	4798      	blx	r3
 8005f44:	6923      	ldr	r3, [r4, #16]
 8005f46:	3b01      	subs	r3, #1
 8005f48:	6123      	str	r3, [r4, #16]
 8005f4a:	e7f0      	b.n	8005f2e <_scanf_float+0x2ba>
 8005f4c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005f50:	463a      	mov	r2, r7
 8005f52:	4640      	mov	r0, r8
 8005f54:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8005f58:	4798      	blx	r3
 8005f5a:	6923      	ldr	r3, [r4, #16]
 8005f5c:	3b01      	subs	r3, #1
 8005f5e:	6123      	str	r3, [r4, #16]
 8005f60:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005f64:	fa5f fa8a 	uxtb.w	sl, sl
 8005f68:	f1ba 0f02 	cmp.w	sl, #2
 8005f6c:	d1ee      	bne.n	8005f4c <_scanf_float+0x2d8>
 8005f6e:	3d03      	subs	r5, #3
 8005f70:	b2ed      	uxtb	r5, r5
 8005f72:	1b76      	subs	r6, r6, r5
 8005f74:	6823      	ldr	r3, [r4, #0]
 8005f76:	05da      	lsls	r2, r3, #23
 8005f78:	d530      	bpl.n	8005fdc <_scanf_float+0x368>
 8005f7a:	055b      	lsls	r3, r3, #21
 8005f7c:	d511      	bpl.n	8005fa2 <_scanf_float+0x32e>
 8005f7e:	9b01      	ldr	r3, [sp, #4]
 8005f80:	429e      	cmp	r6, r3
 8005f82:	f67f aebb 	bls.w	8005cfc <_scanf_float+0x88>
 8005f86:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005f8a:	463a      	mov	r2, r7
 8005f8c:	4640      	mov	r0, r8
 8005f8e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005f92:	4798      	blx	r3
 8005f94:	6923      	ldr	r3, [r4, #16]
 8005f96:	3b01      	subs	r3, #1
 8005f98:	6123      	str	r3, [r4, #16]
 8005f9a:	e7f0      	b.n	8005f7e <_scanf_float+0x30a>
 8005f9c:	46aa      	mov	sl, r5
 8005f9e:	46b3      	mov	fp, r6
 8005fa0:	e7de      	b.n	8005f60 <_scanf_float+0x2ec>
 8005fa2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8005fa6:	6923      	ldr	r3, [r4, #16]
 8005fa8:	2965      	cmp	r1, #101	@ 0x65
 8005faa:	f103 33ff 	add.w	r3, r3, #4294967295
 8005fae:	f106 35ff 	add.w	r5, r6, #4294967295
 8005fb2:	6123      	str	r3, [r4, #16]
 8005fb4:	d00c      	beq.n	8005fd0 <_scanf_float+0x35c>
 8005fb6:	2945      	cmp	r1, #69	@ 0x45
 8005fb8:	d00a      	beq.n	8005fd0 <_scanf_float+0x35c>
 8005fba:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005fbe:	463a      	mov	r2, r7
 8005fc0:	4640      	mov	r0, r8
 8005fc2:	4798      	blx	r3
 8005fc4:	6923      	ldr	r3, [r4, #16]
 8005fc6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8005fca:	3b01      	subs	r3, #1
 8005fcc:	1eb5      	subs	r5, r6, #2
 8005fce:	6123      	str	r3, [r4, #16]
 8005fd0:	463a      	mov	r2, r7
 8005fd2:	4640      	mov	r0, r8
 8005fd4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005fd8:	4798      	blx	r3
 8005fda:	462e      	mov	r6, r5
 8005fdc:	6822      	ldr	r2, [r4, #0]
 8005fde:	f012 0210 	ands.w	r2, r2, #16
 8005fe2:	d001      	beq.n	8005fe8 <_scanf_float+0x374>
 8005fe4:	2000      	movs	r0, #0
 8005fe6:	e68a      	b.n	8005cfe <_scanf_float+0x8a>
 8005fe8:	7032      	strb	r2, [r6, #0]
 8005fea:	6823      	ldr	r3, [r4, #0]
 8005fec:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005ff0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005ff4:	d11c      	bne.n	8006030 <_scanf_float+0x3bc>
 8005ff6:	9b02      	ldr	r3, [sp, #8]
 8005ff8:	454b      	cmp	r3, r9
 8005ffa:	eba3 0209 	sub.w	r2, r3, r9
 8005ffe:	d123      	bne.n	8006048 <_scanf_float+0x3d4>
 8006000:	2200      	movs	r2, #0
 8006002:	4640      	mov	r0, r8
 8006004:	9901      	ldr	r1, [sp, #4]
 8006006:	f002 fd2b 	bl	8008a60 <_strtod_r>
 800600a:	9b03      	ldr	r3, [sp, #12]
 800600c:	6825      	ldr	r5, [r4, #0]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f015 0f02 	tst.w	r5, #2
 8006014:	4606      	mov	r6, r0
 8006016:	460f      	mov	r7, r1
 8006018:	f103 0204 	add.w	r2, r3, #4
 800601c:	d01f      	beq.n	800605e <_scanf_float+0x3ea>
 800601e:	9903      	ldr	r1, [sp, #12]
 8006020:	600a      	str	r2, [r1, #0]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	e9c3 6700 	strd	r6, r7, [r3]
 8006028:	68e3      	ldr	r3, [r4, #12]
 800602a:	3301      	adds	r3, #1
 800602c:	60e3      	str	r3, [r4, #12]
 800602e:	e7d9      	b.n	8005fe4 <_scanf_float+0x370>
 8006030:	9b04      	ldr	r3, [sp, #16]
 8006032:	2b00      	cmp	r3, #0
 8006034:	d0e4      	beq.n	8006000 <_scanf_float+0x38c>
 8006036:	9905      	ldr	r1, [sp, #20]
 8006038:	230a      	movs	r3, #10
 800603a:	4640      	mov	r0, r8
 800603c:	3101      	adds	r1, #1
 800603e:	f002 fd8f 	bl	8008b60 <_strtol_r>
 8006042:	9b04      	ldr	r3, [sp, #16]
 8006044:	9e05      	ldr	r6, [sp, #20]
 8006046:	1ac2      	subs	r2, r0, r3
 8006048:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800604c:	429e      	cmp	r6, r3
 800604e:	bf28      	it	cs
 8006050:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8006054:	4630      	mov	r0, r6
 8006056:	490d      	ldr	r1, [pc, #52]	@ (800608c <_scanf_float+0x418>)
 8006058:	f000 f970 	bl	800633c <siprintf>
 800605c:	e7d0      	b.n	8006000 <_scanf_float+0x38c>
 800605e:	076d      	lsls	r5, r5, #29
 8006060:	d4dd      	bmi.n	800601e <_scanf_float+0x3aa>
 8006062:	9d03      	ldr	r5, [sp, #12]
 8006064:	602a      	str	r2, [r5, #0]
 8006066:	681d      	ldr	r5, [r3, #0]
 8006068:	4602      	mov	r2, r0
 800606a:	460b      	mov	r3, r1
 800606c:	f7fa fcce 	bl	8000a0c <__aeabi_dcmpun>
 8006070:	b120      	cbz	r0, 800607c <_scanf_float+0x408>
 8006072:	4807      	ldr	r0, [pc, #28]	@ (8006090 <_scanf_float+0x41c>)
 8006074:	f000 fafe 	bl	8006674 <nanf>
 8006078:	6028      	str	r0, [r5, #0]
 800607a:	e7d5      	b.n	8006028 <_scanf_float+0x3b4>
 800607c:	4630      	mov	r0, r6
 800607e:	4639      	mov	r1, r7
 8006080:	f7fa fd22 	bl	8000ac8 <__aeabi_d2f>
 8006084:	e7f8      	b.n	8006078 <_scanf_float+0x404>
 8006086:	f04f 0900 	mov.w	r9, #0
 800608a:	e62d      	b.n	8005ce8 <_scanf_float+0x74>
 800608c:	08009c86 	.word	0x08009c86
 8006090:	0800a01d 	.word	0x0800a01d

08006094 <std>:
 8006094:	2300      	movs	r3, #0
 8006096:	b510      	push	{r4, lr}
 8006098:	4604      	mov	r4, r0
 800609a:	e9c0 3300 	strd	r3, r3, [r0]
 800609e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80060a2:	6083      	str	r3, [r0, #8]
 80060a4:	8181      	strh	r1, [r0, #12]
 80060a6:	6643      	str	r3, [r0, #100]	@ 0x64
 80060a8:	81c2      	strh	r2, [r0, #14]
 80060aa:	6183      	str	r3, [r0, #24]
 80060ac:	4619      	mov	r1, r3
 80060ae:	2208      	movs	r2, #8
 80060b0:	305c      	adds	r0, #92	@ 0x5c
 80060b2:	f000 fa3b 	bl	800652c <memset>
 80060b6:	4b0d      	ldr	r3, [pc, #52]	@ (80060ec <std+0x58>)
 80060b8:	6224      	str	r4, [r4, #32]
 80060ba:	6263      	str	r3, [r4, #36]	@ 0x24
 80060bc:	4b0c      	ldr	r3, [pc, #48]	@ (80060f0 <std+0x5c>)
 80060be:	62a3      	str	r3, [r4, #40]	@ 0x28
 80060c0:	4b0c      	ldr	r3, [pc, #48]	@ (80060f4 <std+0x60>)
 80060c2:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80060c4:	4b0c      	ldr	r3, [pc, #48]	@ (80060f8 <std+0x64>)
 80060c6:	6323      	str	r3, [r4, #48]	@ 0x30
 80060c8:	4b0c      	ldr	r3, [pc, #48]	@ (80060fc <std+0x68>)
 80060ca:	429c      	cmp	r4, r3
 80060cc:	d006      	beq.n	80060dc <std+0x48>
 80060ce:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80060d2:	4294      	cmp	r4, r2
 80060d4:	d002      	beq.n	80060dc <std+0x48>
 80060d6:	33d0      	adds	r3, #208	@ 0xd0
 80060d8:	429c      	cmp	r4, r3
 80060da:	d105      	bne.n	80060e8 <std+0x54>
 80060dc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80060e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80060e4:	f000 ba9e 	b.w	8006624 <__retarget_lock_init_recursive>
 80060e8:	bd10      	pop	{r4, pc}
 80060ea:	bf00      	nop
 80060ec:	0800637d 	.word	0x0800637d
 80060f0:	0800639f 	.word	0x0800639f
 80060f4:	080063d7 	.word	0x080063d7
 80060f8:	080063fb 	.word	0x080063fb
 80060fc:	20003248 	.word	0x20003248

08006100 <stdio_exit_handler>:
 8006100:	4a02      	ldr	r2, [pc, #8]	@ (800610c <stdio_exit_handler+0xc>)
 8006102:	4903      	ldr	r1, [pc, #12]	@ (8006110 <stdio_exit_handler+0x10>)
 8006104:	4803      	ldr	r0, [pc, #12]	@ (8006114 <stdio_exit_handler+0x14>)
 8006106:	f000 b869 	b.w	80061dc <_fwalk_sglue>
 800610a:	bf00      	nop
 800610c:	20000414 	.word	0x20000414
 8006110:	08008f15 	.word	0x08008f15
 8006114:	20000424 	.word	0x20000424

08006118 <cleanup_stdio>:
 8006118:	6841      	ldr	r1, [r0, #4]
 800611a:	4b0c      	ldr	r3, [pc, #48]	@ (800614c <cleanup_stdio+0x34>)
 800611c:	b510      	push	{r4, lr}
 800611e:	4299      	cmp	r1, r3
 8006120:	4604      	mov	r4, r0
 8006122:	d001      	beq.n	8006128 <cleanup_stdio+0x10>
 8006124:	f002 fef6 	bl	8008f14 <_fflush_r>
 8006128:	68a1      	ldr	r1, [r4, #8]
 800612a:	4b09      	ldr	r3, [pc, #36]	@ (8006150 <cleanup_stdio+0x38>)
 800612c:	4299      	cmp	r1, r3
 800612e:	d002      	beq.n	8006136 <cleanup_stdio+0x1e>
 8006130:	4620      	mov	r0, r4
 8006132:	f002 feef 	bl	8008f14 <_fflush_r>
 8006136:	68e1      	ldr	r1, [r4, #12]
 8006138:	4b06      	ldr	r3, [pc, #24]	@ (8006154 <cleanup_stdio+0x3c>)
 800613a:	4299      	cmp	r1, r3
 800613c:	d004      	beq.n	8006148 <cleanup_stdio+0x30>
 800613e:	4620      	mov	r0, r4
 8006140:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006144:	f002 bee6 	b.w	8008f14 <_fflush_r>
 8006148:	bd10      	pop	{r4, pc}
 800614a:	bf00      	nop
 800614c:	20003248 	.word	0x20003248
 8006150:	200032b0 	.word	0x200032b0
 8006154:	20003318 	.word	0x20003318

08006158 <global_stdio_init.part.0>:
 8006158:	b510      	push	{r4, lr}
 800615a:	4b0b      	ldr	r3, [pc, #44]	@ (8006188 <global_stdio_init.part.0+0x30>)
 800615c:	4c0b      	ldr	r4, [pc, #44]	@ (800618c <global_stdio_init.part.0+0x34>)
 800615e:	4a0c      	ldr	r2, [pc, #48]	@ (8006190 <global_stdio_init.part.0+0x38>)
 8006160:	4620      	mov	r0, r4
 8006162:	601a      	str	r2, [r3, #0]
 8006164:	2104      	movs	r1, #4
 8006166:	2200      	movs	r2, #0
 8006168:	f7ff ff94 	bl	8006094 <std>
 800616c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006170:	2201      	movs	r2, #1
 8006172:	2109      	movs	r1, #9
 8006174:	f7ff ff8e 	bl	8006094 <std>
 8006178:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800617c:	2202      	movs	r2, #2
 800617e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006182:	2112      	movs	r1, #18
 8006184:	f7ff bf86 	b.w	8006094 <std>
 8006188:	20003380 	.word	0x20003380
 800618c:	20003248 	.word	0x20003248
 8006190:	08006101 	.word	0x08006101

08006194 <__sfp_lock_acquire>:
 8006194:	4801      	ldr	r0, [pc, #4]	@ (800619c <__sfp_lock_acquire+0x8>)
 8006196:	f000 ba46 	b.w	8006626 <__retarget_lock_acquire_recursive>
 800619a:	bf00      	nop
 800619c:	20003389 	.word	0x20003389

080061a0 <__sfp_lock_release>:
 80061a0:	4801      	ldr	r0, [pc, #4]	@ (80061a8 <__sfp_lock_release+0x8>)
 80061a2:	f000 ba41 	b.w	8006628 <__retarget_lock_release_recursive>
 80061a6:	bf00      	nop
 80061a8:	20003389 	.word	0x20003389

080061ac <__sinit>:
 80061ac:	b510      	push	{r4, lr}
 80061ae:	4604      	mov	r4, r0
 80061b0:	f7ff fff0 	bl	8006194 <__sfp_lock_acquire>
 80061b4:	6a23      	ldr	r3, [r4, #32]
 80061b6:	b11b      	cbz	r3, 80061c0 <__sinit+0x14>
 80061b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80061bc:	f7ff bff0 	b.w	80061a0 <__sfp_lock_release>
 80061c0:	4b04      	ldr	r3, [pc, #16]	@ (80061d4 <__sinit+0x28>)
 80061c2:	6223      	str	r3, [r4, #32]
 80061c4:	4b04      	ldr	r3, [pc, #16]	@ (80061d8 <__sinit+0x2c>)
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d1f5      	bne.n	80061b8 <__sinit+0xc>
 80061cc:	f7ff ffc4 	bl	8006158 <global_stdio_init.part.0>
 80061d0:	e7f2      	b.n	80061b8 <__sinit+0xc>
 80061d2:	bf00      	nop
 80061d4:	08006119 	.word	0x08006119
 80061d8:	20003380 	.word	0x20003380

080061dc <_fwalk_sglue>:
 80061dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80061e0:	4607      	mov	r7, r0
 80061e2:	4688      	mov	r8, r1
 80061e4:	4614      	mov	r4, r2
 80061e6:	2600      	movs	r6, #0
 80061e8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80061ec:	f1b9 0901 	subs.w	r9, r9, #1
 80061f0:	d505      	bpl.n	80061fe <_fwalk_sglue+0x22>
 80061f2:	6824      	ldr	r4, [r4, #0]
 80061f4:	2c00      	cmp	r4, #0
 80061f6:	d1f7      	bne.n	80061e8 <_fwalk_sglue+0xc>
 80061f8:	4630      	mov	r0, r6
 80061fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80061fe:	89ab      	ldrh	r3, [r5, #12]
 8006200:	2b01      	cmp	r3, #1
 8006202:	d907      	bls.n	8006214 <_fwalk_sglue+0x38>
 8006204:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006208:	3301      	adds	r3, #1
 800620a:	d003      	beq.n	8006214 <_fwalk_sglue+0x38>
 800620c:	4629      	mov	r1, r5
 800620e:	4638      	mov	r0, r7
 8006210:	47c0      	blx	r8
 8006212:	4306      	orrs	r6, r0
 8006214:	3568      	adds	r5, #104	@ 0x68
 8006216:	e7e9      	b.n	80061ec <_fwalk_sglue+0x10>

08006218 <_puts_r>:
 8006218:	6a03      	ldr	r3, [r0, #32]
 800621a:	b570      	push	{r4, r5, r6, lr}
 800621c:	4605      	mov	r5, r0
 800621e:	460e      	mov	r6, r1
 8006220:	6884      	ldr	r4, [r0, #8]
 8006222:	b90b      	cbnz	r3, 8006228 <_puts_r+0x10>
 8006224:	f7ff ffc2 	bl	80061ac <__sinit>
 8006228:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800622a:	07db      	lsls	r3, r3, #31
 800622c:	d405      	bmi.n	800623a <_puts_r+0x22>
 800622e:	89a3      	ldrh	r3, [r4, #12]
 8006230:	0598      	lsls	r0, r3, #22
 8006232:	d402      	bmi.n	800623a <_puts_r+0x22>
 8006234:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006236:	f000 f9f6 	bl	8006626 <__retarget_lock_acquire_recursive>
 800623a:	89a3      	ldrh	r3, [r4, #12]
 800623c:	0719      	lsls	r1, r3, #28
 800623e:	d502      	bpl.n	8006246 <_puts_r+0x2e>
 8006240:	6923      	ldr	r3, [r4, #16]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d135      	bne.n	80062b2 <_puts_r+0x9a>
 8006246:	4621      	mov	r1, r4
 8006248:	4628      	mov	r0, r5
 800624a:	f000 f919 	bl	8006480 <__swsetup_r>
 800624e:	b380      	cbz	r0, 80062b2 <_puts_r+0x9a>
 8006250:	f04f 35ff 	mov.w	r5, #4294967295
 8006254:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006256:	07da      	lsls	r2, r3, #31
 8006258:	d405      	bmi.n	8006266 <_puts_r+0x4e>
 800625a:	89a3      	ldrh	r3, [r4, #12]
 800625c:	059b      	lsls	r3, r3, #22
 800625e:	d402      	bmi.n	8006266 <_puts_r+0x4e>
 8006260:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006262:	f000 f9e1 	bl	8006628 <__retarget_lock_release_recursive>
 8006266:	4628      	mov	r0, r5
 8006268:	bd70      	pop	{r4, r5, r6, pc}
 800626a:	2b00      	cmp	r3, #0
 800626c:	da04      	bge.n	8006278 <_puts_r+0x60>
 800626e:	69a2      	ldr	r2, [r4, #24]
 8006270:	429a      	cmp	r2, r3
 8006272:	dc17      	bgt.n	80062a4 <_puts_r+0x8c>
 8006274:	290a      	cmp	r1, #10
 8006276:	d015      	beq.n	80062a4 <_puts_r+0x8c>
 8006278:	6823      	ldr	r3, [r4, #0]
 800627a:	1c5a      	adds	r2, r3, #1
 800627c:	6022      	str	r2, [r4, #0]
 800627e:	7019      	strb	r1, [r3, #0]
 8006280:	68a3      	ldr	r3, [r4, #8]
 8006282:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006286:	3b01      	subs	r3, #1
 8006288:	60a3      	str	r3, [r4, #8]
 800628a:	2900      	cmp	r1, #0
 800628c:	d1ed      	bne.n	800626a <_puts_r+0x52>
 800628e:	2b00      	cmp	r3, #0
 8006290:	da11      	bge.n	80062b6 <_puts_r+0x9e>
 8006292:	4622      	mov	r2, r4
 8006294:	210a      	movs	r1, #10
 8006296:	4628      	mov	r0, r5
 8006298:	f000 f8b3 	bl	8006402 <__swbuf_r>
 800629c:	3001      	adds	r0, #1
 800629e:	d0d7      	beq.n	8006250 <_puts_r+0x38>
 80062a0:	250a      	movs	r5, #10
 80062a2:	e7d7      	b.n	8006254 <_puts_r+0x3c>
 80062a4:	4622      	mov	r2, r4
 80062a6:	4628      	mov	r0, r5
 80062a8:	f000 f8ab 	bl	8006402 <__swbuf_r>
 80062ac:	3001      	adds	r0, #1
 80062ae:	d1e7      	bne.n	8006280 <_puts_r+0x68>
 80062b0:	e7ce      	b.n	8006250 <_puts_r+0x38>
 80062b2:	3e01      	subs	r6, #1
 80062b4:	e7e4      	b.n	8006280 <_puts_r+0x68>
 80062b6:	6823      	ldr	r3, [r4, #0]
 80062b8:	1c5a      	adds	r2, r3, #1
 80062ba:	6022      	str	r2, [r4, #0]
 80062bc:	220a      	movs	r2, #10
 80062be:	701a      	strb	r2, [r3, #0]
 80062c0:	e7ee      	b.n	80062a0 <_puts_r+0x88>
	...

080062c4 <puts>:
 80062c4:	4b02      	ldr	r3, [pc, #8]	@ (80062d0 <puts+0xc>)
 80062c6:	4601      	mov	r1, r0
 80062c8:	6818      	ldr	r0, [r3, #0]
 80062ca:	f7ff bfa5 	b.w	8006218 <_puts_r>
 80062ce:	bf00      	nop
 80062d0:	20000420 	.word	0x20000420

080062d4 <sniprintf>:
 80062d4:	b40c      	push	{r2, r3}
 80062d6:	b530      	push	{r4, r5, lr}
 80062d8:	4b17      	ldr	r3, [pc, #92]	@ (8006338 <sniprintf+0x64>)
 80062da:	1e0c      	subs	r4, r1, #0
 80062dc:	681d      	ldr	r5, [r3, #0]
 80062de:	b09d      	sub	sp, #116	@ 0x74
 80062e0:	da08      	bge.n	80062f4 <sniprintf+0x20>
 80062e2:	238b      	movs	r3, #139	@ 0x8b
 80062e4:	f04f 30ff 	mov.w	r0, #4294967295
 80062e8:	602b      	str	r3, [r5, #0]
 80062ea:	b01d      	add	sp, #116	@ 0x74
 80062ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80062f0:	b002      	add	sp, #8
 80062f2:	4770      	bx	lr
 80062f4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80062f8:	f8ad 3014 	strh.w	r3, [sp, #20]
 80062fc:	bf0c      	ite	eq
 80062fe:	4623      	moveq	r3, r4
 8006300:	f104 33ff 	addne.w	r3, r4, #4294967295
 8006304:	9304      	str	r3, [sp, #16]
 8006306:	9307      	str	r3, [sp, #28]
 8006308:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800630c:	9002      	str	r0, [sp, #8]
 800630e:	9006      	str	r0, [sp, #24]
 8006310:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006314:	4628      	mov	r0, r5
 8006316:	ab21      	add	r3, sp, #132	@ 0x84
 8006318:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800631a:	a902      	add	r1, sp, #8
 800631c:	9301      	str	r3, [sp, #4]
 800631e:	f002 fc7d 	bl	8008c1c <_svfiprintf_r>
 8006322:	1c43      	adds	r3, r0, #1
 8006324:	bfbc      	itt	lt
 8006326:	238b      	movlt	r3, #139	@ 0x8b
 8006328:	602b      	strlt	r3, [r5, #0]
 800632a:	2c00      	cmp	r4, #0
 800632c:	d0dd      	beq.n	80062ea <sniprintf+0x16>
 800632e:	2200      	movs	r2, #0
 8006330:	9b02      	ldr	r3, [sp, #8]
 8006332:	701a      	strb	r2, [r3, #0]
 8006334:	e7d9      	b.n	80062ea <sniprintf+0x16>
 8006336:	bf00      	nop
 8006338:	20000420 	.word	0x20000420

0800633c <siprintf>:
 800633c:	b40e      	push	{r1, r2, r3}
 800633e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006342:	b500      	push	{lr}
 8006344:	b09c      	sub	sp, #112	@ 0x70
 8006346:	ab1d      	add	r3, sp, #116	@ 0x74
 8006348:	9002      	str	r0, [sp, #8]
 800634a:	9006      	str	r0, [sp, #24]
 800634c:	9107      	str	r1, [sp, #28]
 800634e:	9104      	str	r1, [sp, #16]
 8006350:	4808      	ldr	r0, [pc, #32]	@ (8006374 <siprintf+0x38>)
 8006352:	4909      	ldr	r1, [pc, #36]	@ (8006378 <siprintf+0x3c>)
 8006354:	f853 2b04 	ldr.w	r2, [r3], #4
 8006358:	9105      	str	r1, [sp, #20]
 800635a:	6800      	ldr	r0, [r0, #0]
 800635c:	a902      	add	r1, sp, #8
 800635e:	9301      	str	r3, [sp, #4]
 8006360:	f002 fc5c 	bl	8008c1c <_svfiprintf_r>
 8006364:	2200      	movs	r2, #0
 8006366:	9b02      	ldr	r3, [sp, #8]
 8006368:	701a      	strb	r2, [r3, #0]
 800636a:	b01c      	add	sp, #112	@ 0x70
 800636c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006370:	b003      	add	sp, #12
 8006372:	4770      	bx	lr
 8006374:	20000420 	.word	0x20000420
 8006378:	ffff0208 	.word	0xffff0208

0800637c <__sread>:
 800637c:	b510      	push	{r4, lr}
 800637e:	460c      	mov	r4, r1
 8006380:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006384:	f000 f900 	bl	8006588 <_read_r>
 8006388:	2800      	cmp	r0, #0
 800638a:	bfab      	itete	ge
 800638c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800638e:	89a3      	ldrhlt	r3, [r4, #12]
 8006390:	181b      	addge	r3, r3, r0
 8006392:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006396:	bfac      	ite	ge
 8006398:	6563      	strge	r3, [r4, #84]	@ 0x54
 800639a:	81a3      	strhlt	r3, [r4, #12]
 800639c:	bd10      	pop	{r4, pc}

0800639e <__swrite>:
 800639e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80063a2:	461f      	mov	r7, r3
 80063a4:	898b      	ldrh	r3, [r1, #12]
 80063a6:	4605      	mov	r5, r0
 80063a8:	05db      	lsls	r3, r3, #23
 80063aa:	460c      	mov	r4, r1
 80063ac:	4616      	mov	r6, r2
 80063ae:	d505      	bpl.n	80063bc <__swrite+0x1e>
 80063b0:	2302      	movs	r3, #2
 80063b2:	2200      	movs	r2, #0
 80063b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063b8:	f000 f8d4 	bl	8006564 <_lseek_r>
 80063bc:	89a3      	ldrh	r3, [r4, #12]
 80063be:	4632      	mov	r2, r6
 80063c0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80063c4:	81a3      	strh	r3, [r4, #12]
 80063c6:	4628      	mov	r0, r5
 80063c8:	463b      	mov	r3, r7
 80063ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80063ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80063d2:	f000 b8eb 	b.w	80065ac <_write_r>

080063d6 <__sseek>:
 80063d6:	b510      	push	{r4, lr}
 80063d8:	460c      	mov	r4, r1
 80063da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063de:	f000 f8c1 	bl	8006564 <_lseek_r>
 80063e2:	1c43      	adds	r3, r0, #1
 80063e4:	89a3      	ldrh	r3, [r4, #12]
 80063e6:	bf15      	itete	ne
 80063e8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80063ea:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80063ee:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80063f2:	81a3      	strheq	r3, [r4, #12]
 80063f4:	bf18      	it	ne
 80063f6:	81a3      	strhne	r3, [r4, #12]
 80063f8:	bd10      	pop	{r4, pc}

080063fa <__sclose>:
 80063fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063fe:	f000 b8a1 	b.w	8006544 <_close_r>

08006402 <__swbuf_r>:
 8006402:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006404:	460e      	mov	r6, r1
 8006406:	4614      	mov	r4, r2
 8006408:	4605      	mov	r5, r0
 800640a:	b118      	cbz	r0, 8006414 <__swbuf_r+0x12>
 800640c:	6a03      	ldr	r3, [r0, #32]
 800640e:	b90b      	cbnz	r3, 8006414 <__swbuf_r+0x12>
 8006410:	f7ff fecc 	bl	80061ac <__sinit>
 8006414:	69a3      	ldr	r3, [r4, #24]
 8006416:	60a3      	str	r3, [r4, #8]
 8006418:	89a3      	ldrh	r3, [r4, #12]
 800641a:	071a      	lsls	r2, r3, #28
 800641c:	d501      	bpl.n	8006422 <__swbuf_r+0x20>
 800641e:	6923      	ldr	r3, [r4, #16]
 8006420:	b943      	cbnz	r3, 8006434 <__swbuf_r+0x32>
 8006422:	4621      	mov	r1, r4
 8006424:	4628      	mov	r0, r5
 8006426:	f000 f82b 	bl	8006480 <__swsetup_r>
 800642a:	b118      	cbz	r0, 8006434 <__swbuf_r+0x32>
 800642c:	f04f 37ff 	mov.w	r7, #4294967295
 8006430:	4638      	mov	r0, r7
 8006432:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006434:	6823      	ldr	r3, [r4, #0]
 8006436:	6922      	ldr	r2, [r4, #16]
 8006438:	b2f6      	uxtb	r6, r6
 800643a:	1a98      	subs	r0, r3, r2
 800643c:	6963      	ldr	r3, [r4, #20]
 800643e:	4637      	mov	r7, r6
 8006440:	4283      	cmp	r3, r0
 8006442:	dc05      	bgt.n	8006450 <__swbuf_r+0x4e>
 8006444:	4621      	mov	r1, r4
 8006446:	4628      	mov	r0, r5
 8006448:	f002 fd64 	bl	8008f14 <_fflush_r>
 800644c:	2800      	cmp	r0, #0
 800644e:	d1ed      	bne.n	800642c <__swbuf_r+0x2a>
 8006450:	68a3      	ldr	r3, [r4, #8]
 8006452:	3b01      	subs	r3, #1
 8006454:	60a3      	str	r3, [r4, #8]
 8006456:	6823      	ldr	r3, [r4, #0]
 8006458:	1c5a      	adds	r2, r3, #1
 800645a:	6022      	str	r2, [r4, #0]
 800645c:	701e      	strb	r6, [r3, #0]
 800645e:	6962      	ldr	r2, [r4, #20]
 8006460:	1c43      	adds	r3, r0, #1
 8006462:	429a      	cmp	r2, r3
 8006464:	d004      	beq.n	8006470 <__swbuf_r+0x6e>
 8006466:	89a3      	ldrh	r3, [r4, #12]
 8006468:	07db      	lsls	r3, r3, #31
 800646a:	d5e1      	bpl.n	8006430 <__swbuf_r+0x2e>
 800646c:	2e0a      	cmp	r6, #10
 800646e:	d1df      	bne.n	8006430 <__swbuf_r+0x2e>
 8006470:	4621      	mov	r1, r4
 8006472:	4628      	mov	r0, r5
 8006474:	f002 fd4e 	bl	8008f14 <_fflush_r>
 8006478:	2800      	cmp	r0, #0
 800647a:	d0d9      	beq.n	8006430 <__swbuf_r+0x2e>
 800647c:	e7d6      	b.n	800642c <__swbuf_r+0x2a>
	...

08006480 <__swsetup_r>:
 8006480:	b538      	push	{r3, r4, r5, lr}
 8006482:	4b29      	ldr	r3, [pc, #164]	@ (8006528 <__swsetup_r+0xa8>)
 8006484:	4605      	mov	r5, r0
 8006486:	6818      	ldr	r0, [r3, #0]
 8006488:	460c      	mov	r4, r1
 800648a:	b118      	cbz	r0, 8006494 <__swsetup_r+0x14>
 800648c:	6a03      	ldr	r3, [r0, #32]
 800648e:	b90b      	cbnz	r3, 8006494 <__swsetup_r+0x14>
 8006490:	f7ff fe8c 	bl	80061ac <__sinit>
 8006494:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006498:	0719      	lsls	r1, r3, #28
 800649a:	d422      	bmi.n	80064e2 <__swsetup_r+0x62>
 800649c:	06da      	lsls	r2, r3, #27
 800649e:	d407      	bmi.n	80064b0 <__swsetup_r+0x30>
 80064a0:	2209      	movs	r2, #9
 80064a2:	602a      	str	r2, [r5, #0]
 80064a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80064a8:	f04f 30ff 	mov.w	r0, #4294967295
 80064ac:	81a3      	strh	r3, [r4, #12]
 80064ae:	e033      	b.n	8006518 <__swsetup_r+0x98>
 80064b0:	0758      	lsls	r0, r3, #29
 80064b2:	d512      	bpl.n	80064da <__swsetup_r+0x5a>
 80064b4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80064b6:	b141      	cbz	r1, 80064ca <__swsetup_r+0x4a>
 80064b8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80064bc:	4299      	cmp	r1, r3
 80064be:	d002      	beq.n	80064c6 <__swsetup_r+0x46>
 80064c0:	4628      	mov	r0, r5
 80064c2:	f000 ff2d 	bl	8007320 <_free_r>
 80064c6:	2300      	movs	r3, #0
 80064c8:	6363      	str	r3, [r4, #52]	@ 0x34
 80064ca:	89a3      	ldrh	r3, [r4, #12]
 80064cc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80064d0:	81a3      	strh	r3, [r4, #12]
 80064d2:	2300      	movs	r3, #0
 80064d4:	6063      	str	r3, [r4, #4]
 80064d6:	6923      	ldr	r3, [r4, #16]
 80064d8:	6023      	str	r3, [r4, #0]
 80064da:	89a3      	ldrh	r3, [r4, #12]
 80064dc:	f043 0308 	orr.w	r3, r3, #8
 80064e0:	81a3      	strh	r3, [r4, #12]
 80064e2:	6923      	ldr	r3, [r4, #16]
 80064e4:	b94b      	cbnz	r3, 80064fa <__swsetup_r+0x7a>
 80064e6:	89a3      	ldrh	r3, [r4, #12]
 80064e8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80064ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80064f0:	d003      	beq.n	80064fa <__swsetup_r+0x7a>
 80064f2:	4621      	mov	r1, r4
 80064f4:	4628      	mov	r0, r5
 80064f6:	f002 fd5a 	bl	8008fae <__smakebuf_r>
 80064fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80064fe:	f013 0201 	ands.w	r2, r3, #1
 8006502:	d00a      	beq.n	800651a <__swsetup_r+0x9a>
 8006504:	2200      	movs	r2, #0
 8006506:	60a2      	str	r2, [r4, #8]
 8006508:	6962      	ldr	r2, [r4, #20]
 800650a:	4252      	negs	r2, r2
 800650c:	61a2      	str	r2, [r4, #24]
 800650e:	6922      	ldr	r2, [r4, #16]
 8006510:	b942      	cbnz	r2, 8006524 <__swsetup_r+0xa4>
 8006512:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006516:	d1c5      	bne.n	80064a4 <__swsetup_r+0x24>
 8006518:	bd38      	pop	{r3, r4, r5, pc}
 800651a:	0799      	lsls	r1, r3, #30
 800651c:	bf58      	it	pl
 800651e:	6962      	ldrpl	r2, [r4, #20]
 8006520:	60a2      	str	r2, [r4, #8]
 8006522:	e7f4      	b.n	800650e <__swsetup_r+0x8e>
 8006524:	2000      	movs	r0, #0
 8006526:	e7f7      	b.n	8006518 <__swsetup_r+0x98>
 8006528:	20000420 	.word	0x20000420

0800652c <memset>:
 800652c:	4603      	mov	r3, r0
 800652e:	4402      	add	r2, r0
 8006530:	4293      	cmp	r3, r2
 8006532:	d100      	bne.n	8006536 <memset+0xa>
 8006534:	4770      	bx	lr
 8006536:	f803 1b01 	strb.w	r1, [r3], #1
 800653a:	e7f9      	b.n	8006530 <memset+0x4>

0800653c <_localeconv_r>:
 800653c:	4800      	ldr	r0, [pc, #0]	@ (8006540 <_localeconv_r+0x4>)
 800653e:	4770      	bx	lr
 8006540:	20000560 	.word	0x20000560

08006544 <_close_r>:
 8006544:	b538      	push	{r3, r4, r5, lr}
 8006546:	2300      	movs	r3, #0
 8006548:	4d05      	ldr	r5, [pc, #20]	@ (8006560 <_close_r+0x1c>)
 800654a:	4604      	mov	r4, r0
 800654c:	4608      	mov	r0, r1
 800654e:	602b      	str	r3, [r5, #0]
 8006550:	f7fa ff43 	bl	80013da <_close>
 8006554:	1c43      	adds	r3, r0, #1
 8006556:	d102      	bne.n	800655e <_close_r+0x1a>
 8006558:	682b      	ldr	r3, [r5, #0]
 800655a:	b103      	cbz	r3, 800655e <_close_r+0x1a>
 800655c:	6023      	str	r3, [r4, #0]
 800655e:	bd38      	pop	{r3, r4, r5, pc}
 8006560:	20003384 	.word	0x20003384

08006564 <_lseek_r>:
 8006564:	b538      	push	{r3, r4, r5, lr}
 8006566:	4604      	mov	r4, r0
 8006568:	4608      	mov	r0, r1
 800656a:	4611      	mov	r1, r2
 800656c:	2200      	movs	r2, #0
 800656e:	4d05      	ldr	r5, [pc, #20]	@ (8006584 <_lseek_r+0x20>)
 8006570:	602a      	str	r2, [r5, #0]
 8006572:	461a      	mov	r2, r3
 8006574:	f7fa ff55 	bl	8001422 <_lseek>
 8006578:	1c43      	adds	r3, r0, #1
 800657a:	d102      	bne.n	8006582 <_lseek_r+0x1e>
 800657c:	682b      	ldr	r3, [r5, #0]
 800657e:	b103      	cbz	r3, 8006582 <_lseek_r+0x1e>
 8006580:	6023      	str	r3, [r4, #0]
 8006582:	bd38      	pop	{r3, r4, r5, pc}
 8006584:	20003384 	.word	0x20003384

08006588 <_read_r>:
 8006588:	b538      	push	{r3, r4, r5, lr}
 800658a:	4604      	mov	r4, r0
 800658c:	4608      	mov	r0, r1
 800658e:	4611      	mov	r1, r2
 8006590:	2200      	movs	r2, #0
 8006592:	4d05      	ldr	r5, [pc, #20]	@ (80065a8 <_read_r+0x20>)
 8006594:	602a      	str	r2, [r5, #0]
 8006596:	461a      	mov	r2, r3
 8006598:	f7fa fee6 	bl	8001368 <_read>
 800659c:	1c43      	adds	r3, r0, #1
 800659e:	d102      	bne.n	80065a6 <_read_r+0x1e>
 80065a0:	682b      	ldr	r3, [r5, #0]
 80065a2:	b103      	cbz	r3, 80065a6 <_read_r+0x1e>
 80065a4:	6023      	str	r3, [r4, #0]
 80065a6:	bd38      	pop	{r3, r4, r5, pc}
 80065a8:	20003384 	.word	0x20003384

080065ac <_write_r>:
 80065ac:	b538      	push	{r3, r4, r5, lr}
 80065ae:	4604      	mov	r4, r0
 80065b0:	4608      	mov	r0, r1
 80065b2:	4611      	mov	r1, r2
 80065b4:	2200      	movs	r2, #0
 80065b6:	4d05      	ldr	r5, [pc, #20]	@ (80065cc <_write_r+0x20>)
 80065b8:	602a      	str	r2, [r5, #0]
 80065ba:	461a      	mov	r2, r3
 80065bc:	f7fa fef1 	bl	80013a2 <_write>
 80065c0:	1c43      	adds	r3, r0, #1
 80065c2:	d102      	bne.n	80065ca <_write_r+0x1e>
 80065c4:	682b      	ldr	r3, [r5, #0]
 80065c6:	b103      	cbz	r3, 80065ca <_write_r+0x1e>
 80065c8:	6023      	str	r3, [r4, #0]
 80065ca:	bd38      	pop	{r3, r4, r5, pc}
 80065cc:	20003384 	.word	0x20003384

080065d0 <__errno>:
 80065d0:	4b01      	ldr	r3, [pc, #4]	@ (80065d8 <__errno+0x8>)
 80065d2:	6818      	ldr	r0, [r3, #0]
 80065d4:	4770      	bx	lr
 80065d6:	bf00      	nop
 80065d8:	20000420 	.word	0x20000420

080065dc <__libc_init_array>:
 80065dc:	b570      	push	{r4, r5, r6, lr}
 80065de:	2600      	movs	r6, #0
 80065e0:	4d0c      	ldr	r5, [pc, #48]	@ (8006614 <__libc_init_array+0x38>)
 80065e2:	4c0d      	ldr	r4, [pc, #52]	@ (8006618 <__libc_init_array+0x3c>)
 80065e4:	1b64      	subs	r4, r4, r5
 80065e6:	10a4      	asrs	r4, r4, #2
 80065e8:	42a6      	cmp	r6, r4
 80065ea:	d109      	bne.n	8006600 <__libc_init_array+0x24>
 80065ec:	f003 fadc 	bl	8009ba8 <_init>
 80065f0:	2600      	movs	r6, #0
 80065f2:	4d0a      	ldr	r5, [pc, #40]	@ (800661c <__libc_init_array+0x40>)
 80065f4:	4c0a      	ldr	r4, [pc, #40]	@ (8006620 <__libc_init_array+0x44>)
 80065f6:	1b64      	subs	r4, r4, r5
 80065f8:	10a4      	asrs	r4, r4, #2
 80065fa:	42a6      	cmp	r6, r4
 80065fc:	d105      	bne.n	800660a <__libc_init_array+0x2e>
 80065fe:	bd70      	pop	{r4, r5, r6, pc}
 8006600:	f855 3b04 	ldr.w	r3, [r5], #4
 8006604:	4798      	blx	r3
 8006606:	3601      	adds	r6, #1
 8006608:	e7ee      	b.n	80065e8 <__libc_init_array+0xc>
 800660a:	f855 3b04 	ldr.w	r3, [r5], #4
 800660e:	4798      	blx	r3
 8006610:	3601      	adds	r6, #1
 8006612:	e7f2      	b.n	80065fa <__libc_init_array+0x1e>
 8006614:	0800a088 	.word	0x0800a088
 8006618:	0800a088 	.word	0x0800a088
 800661c:	0800a088 	.word	0x0800a088
 8006620:	0800a08c 	.word	0x0800a08c

08006624 <__retarget_lock_init_recursive>:
 8006624:	4770      	bx	lr

08006626 <__retarget_lock_acquire_recursive>:
 8006626:	4770      	bx	lr

08006628 <__retarget_lock_release_recursive>:
 8006628:	4770      	bx	lr

0800662a <strcpy>:
 800662a:	4603      	mov	r3, r0
 800662c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006630:	f803 2b01 	strb.w	r2, [r3], #1
 8006634:	2a00      	cmp	r2, #0
 8006636:	d1f9      	bne.n	800662c <strcpy+0x2>
 8006638:	4770      	bx	lr

0800663a <memchr>:
 800663a:	4603      	mov	r3, r0
 800663c:	b510      	push	{r4, lr}
 800663e:	b2c9      	uxtb	r1, r1
 8006640:	4402      	add	r2, r0
 8006642:	4293      	cmp	r3, r2
 8006644:	4618      	mov	r0, r3
 8006646:	d101      	bne.n	800664c <memchr+0x12>
 8006648:	2000      	movs	r0, #0
 800664a:	e003      	b.n	8006654 <memchr+0x1a>
 800664c:	7804      	ldrb	r4, [r0, #0]
 800664e:	3301      	adds	r3, #1
 8006650:	428c      	cmp	r4, r1
 8006652:	d1f6      	bne.n	8006642 <memchr+0x8>
 8006654:	bd10      	pop	{r4, pc}

08006656 <memcpy>:
 8006656:	440a      	add	r2, r1
 8006658:	4291      	cmp	r1, r2
 800665a:	f100 33ff 	add.w	r3, r0, #4294967295
 800665e:	d100      	bne.n	8006662 <memcpy+0xc>
 8006660:	4770      	bx	lr
 8006662:	b510      	push	{r4, lr}
 8006664:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006668:	4291      	cmp	r1, r2
 800666a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800666e:	d1f9      	bne.n	8006664 <memcpy+0xe>
 8006670:	bd10      	pop	{r4, pc}
	...

08006674 <nanf>:
 8006674:	4800      	ldr	r0, [pc, #0]	@ (8006678 <nanf+0x4>)
 8006676:	4770      	bx	lr
 8006678:	7fc00000 	.word	0x7fc00000

0800667c <quorem>:
 800667c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006680:	6903      	ldr	r3, [r0, #16]
 8006682:	690c      	ldr	r4, [r1, #16]
 8006684:	4607      	mov	r7, r0
 8006686:	42a3      	cmp	r3, r4
 8006688:	db7e      	blt.n	8006788 <quorem+0x10c>
 800668a:	3c01      	subs	r4, #1
 800668c:	00a3      	lsls	r3, r4, #2
 800668e:	f100 0514 	add.w	r5, r0, #20
 8006692:	f101 0814 	add.w	r8, r1, #20
 8006696:	9300      	str	r3, [sp, #0]
 8006698:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800669c:	9301      	str	r3, [sp, #4]
 800669e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80066a2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80066a6:	3301      	adds	r3, #1
 80066a8:	429a      	cmp	r2, r3
 80066aa:	fbb2 f6f3 	udiv	r6, r2, r3
 80066ae:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80066b2:	d32e      	bcc.n	8006712 <quorem+0x96>
 80066b4:	f04f 0a00 	mov.w	sl, #0
 80066b8:	46c4      	mov	ip, r8
 80066ba:	46ae      	mov	lr, r5
 80066bc:	46d3      	mov	fp, sl
 80066be:	f85c 3b04 	ldr.w	r3, [ip], #4
 80066c2:	b298      	uxth	r0, r3
 80066c4:	fb06 a000 	mla	r0, r6, r0, sl
 80066c8:	0c1b      	lsrs	r3, r3, #16
 80066ca:	0c02      	lsrs	r2, r0, #16
 80066cc:	fb06 2303 	mla	r3, r6, r3, r2
 80066d0:	f8de 2000 	ldr.w	r2, [lr]
 80066d4:	b280      	uxth	r0, r0
 80066d6:	b292      	uxth	r2, r2
 80066d8:	1a12      	subs	r2, r2, r0
 80066da:	445a      	add	r2, fp
 80066dc:	f8de 0000 	ldr.w	r0, [lr]
 80066e0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80066e4:	b29b      	uxth	r3, r3
 80066e6:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80066ea:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80066ee:	b292      	uxth	r2, r2
 80066f0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80066f4:	45e1      	cmp	r9, ip
 80066f6:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80066fa:	f84e 2b04 	str.w	r2, [lr], #4
 80066fe:	d2de      	bcs.n	80066be <quorem+0x42>
 8006700:	9b00      	ldr	r3, [sp, #0]
 8006702:	58eb      	ldr	r3, [r5, r3]
 8006704:	b92b      	cbnz	r3, 8006712 <quorem+0x96>
 8006706:	9b01      	ldr	r3, [sp, #4]
 8006708:	3b04      	subs	r3, #4
 800670a:	429d      	cmp	r5, r3
 800670c:	461a      	mov	r2, r3
 800670e:	d32f      	bcc.n	8006770 <quorem+0xf4>
 8006710:	613c      	str	r4, [r7, #16]
 8006712:	4638      	mov	r0, r7
 8006714:	f001 f9c4 	bl	8007aa0 <__mcmp>
 8006718:	2800      	cmp	r0, #0
 800671a:	db25      	blt.n	8006768 <quorem+0xec>
 800671c:	4629      	mov	r1, r5
 800671e:	2000      	movs	r0, #0
 8006720:	f858 2b04 	ldr.w	r2, [r8], #4
 8006724:	f8d1 c000 	ldr.w	ip, [r1]
 8006728:	fa1f fe82 	uxth.w	lr, r2
 800672c:	fa1f f38c 	uxth.w	r3, ip
 8006730:	eba3 030e 	sub.w	r3, r3, lr
 8006734:	4403      	add	r3, r0
 8006736:	0c12      	lsrs	r2, r2, #16
 8006738:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800673c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8006740:	b29b      	uxth	r3, r3
 8006742:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006746:	45c1      	cmp	r9, r8
 8006748:	ea4f 4022 	mov.w	r0, r2, asr #16
 800674c:	f841 3b04 	str.w	r3, [r1], #4
 8006750:	d2e6      	bcs.n	8006720 <quorem+0xa4>
 8006752:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006756:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800675a:	b922      	cbnz	r2, 8006766 <quorem+0xea>
 800675c:	3b04      	subs	r3, #4
 800675e:	429d      	cmp	r5, r3
 8006760:	461a      	mov	r2, r3
 8006762:	d30b      	bcc.n	800677c <quorem+0x100>
 8006764:	613c      	str	r4, [r7, #16]
 8006766:	3601      	adds	r6, #1
 8006768:	4630      	mov	r0, r6
 800676a:	b003      	add	sp, #12
 800676c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006770:	6812      	ldr	r2, [r2, #0]
 8006772:	3b04      	subs	r3, #4
 8006774:	2a00      	cmp	r2, #0
 8006776:	d1cb      	bne.n	8006710 <quorem+0x94>
 8006778:	3c01      	subs	r4, #1
 800677a:	e7c6      	b.n	800670a <quorem+0x8e>
 800677c:	6812      	ldr	r2, [r2, #0]
 800677e:	3b04      	subs	r3, #4
 8006780:	2a00      	cmp	r2, #0
 8006782:	d1ef      	bne.n	8006764 <quorem+0xe8>
 8006784:	3c01      	subs	r4, #1
 8006786:	e7ea      	b.n	800675e <quorem+0xe2>
 8006788:	2000      	movs	r0, #0
 800678a:	e7ee      	b.n	800676a <quorem+0xee>
 800678c:	0000      	movs	r0, r0
	...

08006790 <_dtoa_r>:
 8006790:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006794:	4614      	mov	r4, r2
 8006796:	461d      	mov	r5, r3
 8006798:	69c7      	ldr	r7, [r0, #28]
 800679a:	b097      	sub	sp, #92	@ 0x5c
 800679c:	4683      	mov	fp, r0
 800679e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80067a2:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 80067a4:	b97f      	cbnz	r7, 80067c6 <_dtoa_r+0x36>
 80067a6:	2010      	movs	r0, #16
 80067a8:	f000 fe02 	bl	80073b0 <malloc>
 80067ac:	4602      	mov	r2, r0
 80067ae:	f8cb 001c 	str.w	r0, [fp, #28]
 80067b2:	b920      	cbnz	r0, 80067be <_dtoa_r+0x2e>
 80067b4:	21ef      	movs	r1, #239	@ 0xef
 80067b6:	4ba8      	ldr	r3, [pc, #672]	@ (8006a58 <_dtoa_r+0x2c8>)
 80067b8:	48a8      	ldr	r0, [pc, #672]	@ (8006a5c <_dtoa_r+0x2cc>)
 80067ba:	f002 fc99 	bl	80090f0 <__assert_func>
 80067be:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80067c2:	6007      	str	r7, [r0, #0]
 80067c4:	60c7      	str	r7, [r0, #12]
 80067c6:	f8db 301c 	ldr.w	r3, [fp, #28]
 80067ca:	6819      	ldr	r1, [r3, #0]
 80067cc:	b159      	cbz	r1, 80067e6 <_dtoa_r+0x56>
 80067ce:	685a      	ldr	r2, [r3, #4]
 80067d0:	2301      	movs	r3, #1
 80067d2:	4093      	lsls	r3, r2
 80067d4:	604a      	str	r2, [r1, #4]
 80067d6:	608b      	str	r3, [r1, #8]
 80067d8:	4658      	mov	r0, fp
 80067da:	f000 fedf 	bl	800759c <_Bfree>
 80067de:	2200      	movs	r2, #0
 80067e0:	f8db 301c 	ldr.w	r3, [fp, #28]
 80067e4:	601a      	str	r2, [r3, #0]
 80067e6:	1e2b      	subs	r3, r5, #0
 80067e8:	bfaf      	iteee	ge
 80067ea:	2300      	movge	r3, #0
 80067ec:	2201      	movlt	r2, #1
 80067ee:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80067f2:	9303      	strlt	r3, [sp, #12]
 80067f4:	bfa8      	it	ge
 80067f6:	6033      	strge	r3, [r6, #0]
 80067f8:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80067fc:	4b98      	ldr	r3, [pc, #608]	@ (8006a60 <_dtoa_r+0x2d0>)
 80067fe:	bfb8      	it	lt
 8006800:	6032      	strlt	r2, [r6, #0]
 8006802:	ea33 0308 	bics.w	r3, r3, r8
 8006806:	d112      	bne.n	800682e <_dtoa_r+0x9e>
 8006808:	f242 730f 	movw	r3, #9999	@ 0x270f
 800680c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800680e:	6013      	str	r3, [r2, #0]
 8006810:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8006814:	4323      	orrs	r3, r4
 8006816:	f000 8550 	beq.w	80072ba <_dtoa_r+0xb2a>
 800681a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800681c:	f8df a244 	ldr.w	sl, [pc, #580]	@ 8006a64 <_dtoa_r+0x2d4>
 8006820:	2b00      	cmp	r3, #0
 8006822:	f000 8552 	beq.w	80072ca <_dtoa_r+0xb3a>
 8006826:	f10a 0303 	add.w	r3, sl, #3
 800682a:	f000 bd4c 	b.w	80072c6 <_dtoa_r+0xb36>
 800682e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006832:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8006836:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800683a:	2200      	movs	r2, #0
 800683c:	2300      	movs	r3, #0
 800683e:	f7fa f8b3 	bl	80009a8 <__aeabi_dcmpeq>
 8006842:	4607      	mov	r7, r0
 8006844:	b158      	cbz	r0, 800685e <_dtoa_r+0xce>
 8006846:	2301      	movs	r3, #1
 8006848:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800684a:	6013      	str	r3, [r2, #0]
 800684c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800684e:	b113      	cbz	r3, 8006856 <_dtoa_r+0xc6>
 8006850:	4b85      	ldr	r3, [pc, #532]	@ (8006a68 <_dtoa_r+0x2d8>)
 8006852:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8006854:	6013      	str	r3, [r2, #0]
 8006856:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8006a6c <_dtoa_r+0x2dc>
 800685a:	f000 bd36 	b.w	80072ca <_dtoa_r+0xb3a>
 800685e:	ab14      	add	r3, sp, #80	@ 0x50
 8006860:	9301      	str	r3, [sp, #4]
 8006862:	ab15      	add	r3, sp, #84	@ 0x54
 8006864:	9300      	str	r3, [sp, #0]
 8006866:	4658      	mov	r0, fp
 8006868:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800686c:	f001 fa30 	bl	8007cd0 <__d2b>
 8006870:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8006874:	4681      	mov	r9, r0
 8006876:	2e00      	cmp	r6, #0
 8006878:	d077      	beq.n	800696a <_dtoa_r+0x1da>
 800687a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800687e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006880:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006884:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006888:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800688c:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8006890:	9712      	str	r7, [sp, #72]	@ 0x48
 8006892:	4619      	mov	r1, r3
 8006894:	2200      	movs	r2, #0
 8006896:	4b76      	ldr	r3, [pc, #472]	@ (8006a70 <_dtoa_r+0x2e0>)
 8006898:	f7f9 fc66 	bl	8000168 <__aeabi_dsub>
 800689c:	a368      	add	r3, pc, #416	@ (adr r3, 8006a40 <_dtoa_r+0x2b0>)
 800689e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068a2:	f7f9 fe19 	bl	80004d8 <__aeabi_dmul>
 80068a6:	a368      	add	r3, pc, #416	@ (adr r3, 8006a48 <_dtoa_r+0x2b8>)
 80068a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068ac:	f7f9 fc5e 	bl	800016c <__adddf3>
 80068b0:	4604      	mov	r4, r0
 80068b2:	4630      	mov	r0, r6
 80068b4:	460d      	mov	r5, r1
 80068b6:	f7f9 fda5 	bl	8000404 <__aeabi_i2d>
 80068ba:	a365      	add	r3, pc, #404	@ (adr r3, 8006a50 <_dtoa_r+0x2c0>)
 80068bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068c0:	f7f9 fe0a 	bl	80004d8 <__aeabi_dmul>
 80068c4:	4602      	mov	r2, r0
 80068c6:	460b      	mov	r3, r1
 80068c8:	4620      	mov	r0, r4
 80068ca:	4629      	mov	r1, r5
 80068cc:	f7f9 fc4e 	bl	800016c <__adddf3>
 80068d0:	4604      	mov	r4, r0
 80068d2:	460d      	mov	r5, r1
 80068d4:	f7fa f8b0 	bl	8000a38 <__aeabi_d2iz>
 80068d8:	2200      	movs	r2, #0
 80068da:	4607      	mov	r7, r0
 80068dc:	2300      	movs	r3, #0
 80068de:	4620      	mov	r0, r4
 80068e0:	4629      	mov	r1, r5
 80068e2:	f7fa f86b 	bl	80009bc <__aeabi_dcmplt>
 80068e6:	b140      	cbz	r0, 80068fa <_dtoa_r+0x16a>
 80068e8:	4638      	mov	r0, r7
 80068ea:	f7f9 fd8b 	bl	8000404 <__aeabi_i2d>
 80068ee:	4622      	mov	r2, r4
 80068f0:	462b      	mov	r3, r5
 80068f2:	f7fa f859 	bl	80009a8 <__aeabi_dcmpeq>
 80068f6:	b900      	cbnz	r0, 80068fa <_dtoa_r+0x16a>
 80068f8:	3f01      	subs	r7, #1
 80068fa:	2f16      	cmp	r7, #22
 80068fc:	d853      	bhi.n	80069a6 <_dtoa_r+0x216>
 80068fe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006902:	4b5c      	ldr	r3, [pc, #368]	@ (8006a74 <_dtoa_r+0x2e4>)
 8006904:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006908:	e9d3 2300 	ldrd	r2, r3, [r3]
 800690c:	f7fa f856 	bl	80009bc <__aeabi_dcmplt>
 8006910:	2800      	cmp	r0, #0
 8006912:	d04a      	beq.n	80069aa <_dtoa_r+0x21a>
 8006914:	2300      	movs	r3, #0
 8006916:	3f01      	subs	r7, #1
 8006918:	930f      	str	r3, [sp, #60]	@ 0x3c
 800691a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800691c:	1b9b      	subs	r3, r3, r6
 800691e:	1e5a      	subs	r2, r3, #1
 8006920:	bf46      	itte	mi
 8006922:	f1c3 0801 	rsbmi	r8, r3, #1
 8006926:	2300      	movmi	r3, #0
 8006928:	f04f 0800 	movpl.w	r8, #0
 800692c:	9209      	str	r2, [sp, #36]	@ 0x24
 800692e:	bf48      	it	mi
 8006930:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8006932:	2f00      	cmp	r7, #0
 8006934:	db3b      	blt.n	80069ae <_dtoa_r+0x21e>
 8006936:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006938:	970e      	str	r7, [sp, #56]	@ 0x38
 800693a:	443b      	add	r3, r7
 800693c:	9309      	str	r3, [sp, #36]	@ 0x24
 800693e:	2300      	movs	r3, #0
 8006940:	930a      	str	r3, [sp, #40]	@ 0x28
 8006942:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006944:	2b09      	cmp	r3, #9
 8006946:	d866      	bhi.n	8006a16 <_dtoa_r+0x286>
 8006948:	2b05      	cmp	r3, #5
 800694a:	bfc4      	itt	gt
 800694c:	3b04      	subgt	r3, #4
 800694e:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8006950:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006952:	bfc8      	it	gt
 8006954:	2400      	movgt	r4, #0
 8006956:	f1a3 0302 	sub.w	r3, r3, #2
 800695a:	bfd8      	it	le
 800695c:	2401      	movle	r4, #1
 800695e:	2b03      	cmp	r3, #3
 8006960:	d864      	bhi.n	8006a2c <_dtoa_r+0x29c>
 8006962:	e8df f003 	tbb	[pc, r3]
 8006966:	382b      	.short	0x382b
 8006968:	5636      	.short	0x5636
 800696a:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800696e:	441e      	add	r6, r3
 8006970:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006974:	2b20      	cmp	r3, #32
 8006976:	bfc1      	itttt	gt
 8006978:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800697c:	fa08 f803 	lslgt.w	r8, r8, r3
 8006980:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8006984:	fa24 f303 	lsrgt.w	r3, r4, r3
 8006988:	bfd6      	itet	le
 800698a:	f1c3 0320 	rsble	r3, r3, #32
 800698e:	ea48 0003 	orrgt.w	r0, r8, r3
 8006992:	fa04 f003 	lslle.w	r0, r4, r3
 8006996:	f7f9 fd25 	bl	80003e4 <__aeabi_ui2d>
 800699a:	2201      	movs	r2, #1
 800699c:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80069a0:	3e01      	subs	r6, #1
 80069a2:	9212      	str	r2, [sp, #72]	@ 0x48
 80069a4:	e775      	b.n	8006892 <_dtoa_r+0x102>
 80069a6:	2301      	movs	r3, #1
 80069a8:	e7b6      	b.n	8006918 <_dtoa_r+0x188>
 80069aa:	900f      	str	r0, [sp, #60]	@ 0x3c
 80069ac:	e7b5      	b.n	800691a <_dtoa_r+0x18a>
 80069ae:	427b      	negs	r3, r7
 80069b0:	930a      	str	r3, [sp, #40]	@ 0x28
 80069b2:	2300      	movs	r3, #0
 80069b4:	eba8 0807 	sub.w	r8, r8, r7
 80069b8:	930e      	str	r3, [sp, #56]	@ 0x38
 80069ba:	e7c2      	b.n	8006942 <_dtoa_r+0x1b2>
 80069bc:	2300      	movs	r3, #0
 80069be:	930b      	str	r3, [sp, #44]	@ 0x2c
 80069c0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	dc35      	bgt.n	8006a32 <_dtoa_r+0x2a2>
 80069c6:	2301      	movs	r3, #1
 80069c8:	461a      	mov	r2, r3
 80069ca:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80069ce:	9221      	str	r2, [sp, #132]	@ 0x84
 80069d0:	e00b      	b.n	80069ea <_dtoa_r+0x25a>
 80069d2:	2301      	movs	r3, #1
 80069d4:	e7f3      	b.n	80069be <_dtoa_r+0x22e>
 80069d6:	2300      	movs	r3, #0
 80069d8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80069da:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80069dc:	18fb      	adds	r3, r7, r3
 80069de:	9308      	str	r3, [sp, #32]
 80069e0:	3301      	adds	r3, #1
 80069e2:	2b01      	cmp	r3, #1
 80069e4:	9307      	str	r3, [sp, #28]
 80069e6:	bfb8      	it	lt
 80069e8:	2301      	movlt	r3, #1
 80069ea:	2100      	movs	r1, #0
 80069ec:	2204      	movs	r2, #4
 80069ee:	f8db 001c 	ldr.w	r0, [fp, #28]
 80069f2:	f102 0514 	add.w	r5, r2, #20
 80069f6:	429d      	cmp	r5, r3
 80069f8:	d91f      	bls.n	8006a3a <_dtoa_r+0x2aa>
 80069fa:	6041      	str	r1, [r0, #4]
 80069fc:	4658      	mov	r0, fp
 80069fe:	f000 fd8d 	bl	800751c <_Balloc>
 8006a02:	4682      	mov	sl, r0
 8006a04:	2800      	cmp	r0, #0
 8006a06:	d139      	bne.n	8006a7c <_dtoa_r+0x2ec>
 8006a08:	4602      	mov	r2, r0
 8006a0a:	f240 11af 	movw	r1, #431	@ 0x1af
 8006a0e:	4b1a      	ldr	r3, [pc, #104]	@ (8006a78 <_dtoa_r+0x2e8>)
 8006a10:	e6d2      	b.n	80067b8 <_dtoa_r+0x28>
 8006a12:	2301      	movs	r3, #1
 8006a14:	e7e0      	b.n	80069d8 <_dtoa_r+0x248>
 8006a16:	2401      	movs	r4, #1
 8006a18:	2300      	movs	r3, #0
 8006a1a:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006a1c:	9320      	str	r3, [sp, #128]	@ 0x80
 8006a1e:	f04f 33ff 	mov.w	r3, #4294967295
 8006a22:	2200      	movs	r2, #0
 8006a24:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8006a28:	2312      	movs	r3, #18
 8006a2a:	e7d0      	b.n	80069ce <_dtoa_r+0x23e>
 8006a2c:	2301      	movs	r3, #1
 8006a2e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006a30:	e7f5      	b.n	8006a1e <_dtoa_r+0x28e>
 8006a32:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006a34:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8006a38:	e7d7      	b.n	80069ea <_dtoa_r+0x25a>
 8006a3a:	3101      	adds	r1, #1
 8006a3c:	0052      	lsls	r2, r2, #1
 8006a3e:	e7d8      	b.n	80069f2 <_dtoa_r+0x262>
 8006a40:	636f4361 	.word	0x636f4361
 8006a44:	3fd287a7 	.word	0x3fd287a7
 8006a48:	8b60c8b3 	.word	0x8b60c8b3
 8006a4c:	3fc68a28 	.word	0x3fc68a28
 8006a50:	509f79fb 	.word	0x509f79fb
 8006a54:	3fd34413 	.word	0x3fd34413
 8006a58:	08009c98 	.word	0x08009c98
 8006a5c:	08009caf 	.word	0x08009caf
 8006a60:	7ff00000 	.word	0x7ff00000
 8006a64:	08009c94 	.word	0x08009c94
 8006a68:	08009c63 	.word	0x08009c63
 8006a6c:	08009c62 	.word	0x08009c62
 8006a70:	3ff80000 	.word	0x3ff80000
 8006a74:	08009da8 	.word	0x08009da8
 8006a78:	08009d07 	.word	0x08009d07
 8006a7c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006a80:	6018      	str	r0, [r3, #0]
 8006a82:	9b07      	ldr	r3, [sp, #28]
 8006a84:	2b0e      	cmp	r3, #14
 8006a86:	f200 80a4 	bhi.w	8006bd2 <_dtoa_r+0x442>
 8006a8a:	2c00      	cmp	r4, #0
 8006a8c:	f000 80a1 	beq.w	8006bd2 <_dtoa_r+0x442>
 8006a90:	2f00      	cmp	r7, #0
 8006a92:	dd33      	ble.n	8006afc <_dtoa_r+0x36c>
 8006a94:	4b86      	ldr	r3, [pc, #536]	@ (8006cb0 <_dtoa_r+0x520>)
 8006a96:	f007 020f 	and.w	r2, r7, #15
 8006a9a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006a9e:	05f8      	lsls	r0, r7, #23
 8006aa0:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006aa4:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006aa8:	ea4f 1427 	mov.w	r4, r7, asr #4
 8006aac:	d516      	bpl.n	8006adc <_dtoa_r+0x34c>
 8006aae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006ab2:	4b80      	ldr	r3, [pc, #512]	@ (8006cb4 <_dtoa_r+0x524>)
 8006ab4:	2603      	movs	r6, #3
 8006ab6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006aba:	f7f9 fe37 	bl	800072c <__aeabi_ddiv>
 8006abe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006ac2:	f004 040f 	and.w	r4, r4, #15
 8006ac6:	4d7b      	ldr	r5, [pc, #492]	@ (8006cb4 <_dtoa_r+0x524>)
 8006ac8:	b954      	cbnz	r4, 8006ae0 <_dtoa_r+0x350>
 8006aca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006ace:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006ad2:	f7f9 fe2b 	bl	800072c <__aeabi_ddiv>
 8006ad6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006ada:	e028      	b.n	8006b2e <_dtoa_r+0x39e>
 8006adc:	2602      	movs	r6, #2
 8006ade:	e7f2      	b.n	8006ac6 <_dtoa_r+0x336>
 8006ae0:	07e1      	lsls	r1, r4, #31
 8006ae2:	d508      	bpl.n	8006af6 <_dtoa_r+0x366>
 8006ae4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006ae8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006aec:	f7f9 fcf4 	bl	80004d8 <__aeabi_dmul>
 8006af0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006af4:	3601      	adds	r6, #1
 8006af6:	1064      	asrs	r4, r4, #1
 8006af8:	3508      	adds	r5, #8
 8006afa:	e7e5      	b.n	8006ac8 <_dtoa_r+0x338>
 8006afc:	f000 80d2 	beq.w	8006ca4 <_dtoa_r+0x514>
 8006b00:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006b04:	427c      	negs	r4, r7
 8006b06:	4b6a      	ldr	r3, [pc, #424]	@ (8006cb0 <_dtoa_r+0x520>)
 8006b08:	f004 020f 	and.w	r2, r4, #15
 8006b0c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006b10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b14:	f7f9 fce0 	bl	80004d8 <__aeabi_dmul>
 8006b18:	2602      	movs	r6, #2
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006b20:	4d64      	ldr	r5, [pc, #400]	@ (8006cb4 <_dtoa_r+0x524>)
 8006b22:	1124      	asrs	r4, r4, #4
 8006b24:	2c00      	cmp	r4, #0
 8006b26:	f040 80b2 	bne.w	8006c8e <_dtoa_r+0x4fe>
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d1d3      	bne.n	8006ad6 <_dtoa_r+0x346>
 8006b2e:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006b32:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	f000 80b7 	beq.w	8006ca8 <_dtoa_r+0x518>
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	4620      	mov	r0, r4
 8006b3e:	4629      	mov	r1, r5
 8006b40:	4b5d      	ldr	r3, [pc, #372]	@ (8006cb8 <_dtoa_r+0x528>)
 8006b42:	f7f9 ff3b 	bl	80009bc <__aeabi_dcmplt>
 8006b46:	2800      	cmp	r0, #0
 8006b48:	f000 80ae 	beq.w	8006ca8 <_dtoa_r+0x518>
 8006b4c:	9b07      	ldr	r3, [sp, #28]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	f000 80aa 	beq.w	8006ca8 <_dtoa_r+0x518>
 8006b54:	9b08      	ldr	r3, [sp, #32]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	dd37      	ble.n	8006bca <_dtoa_r+0x43a>
 8006b5a:	1e7b      	subs	r3, r7, #1
 8006b5c:	4620      	mov	r0, r4
 8006b5e:	9304      	str	r3, [sp, #16]
 8006b60:	2200      	movs	r2, #0
 8006b62:	4629      	mov	r1, r5
 8006b64:	4b55      	ldr	r3, [pc, #340]	@ (8006cbc <_dtoa_r+0x52c>)
 8006b66:	f7f9 fcb7 	bl	80004d8 <__aeabi_dmul>
 8006b6a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006b6e:	9c08      	ldr	r4, [sp, #32]
 8006b70:	3601      	adds	r6, #1
 8006b72:	4630      	mov	r0, r6
 8006b74:	f7f9 fc46 	bl	8000404 <__aeabi_i2d>
 8006b78:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006b7c:	f7f9 fcac 	bl	80004d8 <__aeabi_dmul>
 8006b80:	2200      	movs	r2, #0
 8006b82:	4b4f      	ldr	r3, [pc, #316]	@ (8006cc0 <_dtoa_r+0x530>)
 8006b84:	f7f9 faf2 	bl	800016c <__adddf3>
 8006b88:	4605      	mov	r5, r0
 8006b8a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8006b8e:	2c00      	cmp	r4, #0
 8006b90:	f040 809a 	bne.w	8006cc8 <_dtoa_r+0x538>
 8006b94:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006b98:	2200      	movs	r2, #0
 8006b9a:	4b4a      	ldr	r3, [pc, #296]	@ (8006cc4 <_dtoa_r+0x534>)
 8006b9c:	f7f9 fae4 	bl	8000168 <__aeabi_dsub>
 8006ba0:	4602      	mov	r2, r0
 8006ba2:	460b      	mov	r3, r1
 8006ba4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006ba8:	462a      	mov	r2, r5
 8006baa:	4633      	mov	r3, r6
 8006bac:	f7f9 ff24 	bl	80009f8 <__aeabi_dcmpgt>
 8006bb0:	2800      	cmp	r0, #0
 8006bb2:	f040 828e 	bne.w	80070d2 <_dtoa_r+0x942>
 8006bb6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006bba:	462a      	mov	r2, r5
 8006bbc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006bc0:	f7f9 fefc 	bl	80009bc <__aeabi_dcmplt>
 8006bc4:	2800      	cmp	r0, #0
 8006bc6:	f040 8127 	bne.w	8006e18 <_dtoa_r+0x688>
 8006bca:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8006bce:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8006bd2:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	f2c0 8163 	blt.w	8006ea0 <_dtoa_r+0x710>
 8006bda:	2f0e      	cmp	r7, #14
 8006bdc:	f300 8160 	bgt.w	8006ea0 <_dtoa_r+0x710>
 8006be0:	4b33      	ldr	r3, [pc, #204]	@ (8006cb0 <_dtoa_r+0x520>)
 8006be2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006be6:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006bea:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006bee:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	da03      	bge.n	8006bfc <_dtoa_r+0x46c>
 8006bf4:	9b07      	ldr	r3, [sp, #28]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	f340 8100 	ble.w	8006dfc <_dtoa_r+0x66c>
 8006bfc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006c00:	4656      	mov	r6, sl
 8006c02:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006c06:	4620      	mov	r0, r4
 8006c08:	4629      	mov	r1, r5
 8006c0a:	f7f9 fd8f 	bl	800072c <__aeabi_ddiv>
 8006c0e:	f7f9 ff13 	bl	8000a38 <__aeabi_d2iz>
 8006c12:	4680      	mov	r8, r0
 8006c14:	f7f9 fbf6 	bl	8000404 <__aeabi_i2d>
 8006c18:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006c1c:	f7f9 fc5c 	bl	80004d8 <__aeabi_dmul>
 8006c20:	4602      	mov	r2, r0
 8006c22:	460b      	mov	r3, r1
 8006c24:	4620      	mov	r0, r4
 8006c26:	4629      	mov	r1, r5
 8006c28:	f7f9 fa9e 	bl	8000168 <__aeabi_dsub>
 8006c2c:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8006c30:	9d07      	ldr	r5, [sp, #28]
 8006c32:	f806 4b01 	strb.w	r4, [r6], #1
 8006c36:	eba6 040a 	sub.w	r4, r6, sl
 8006c3a:	42a5      	cmp	r5, r4
 8006c3c:	4602      	mov	r2, r0
 8006c3e:	460b      	mov	r3, r1
 8006c40:	f040 8116 	bne.w	8006e70 <_dtoa_r+0x6e0>
 8006c44:	f7f9 fa92 	bl	800016c <__adddf3>
 8006c48:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006c4c:	4604      	mov	r4, r0
 8006c4e:	460d      	mov	r5, r1
 8006c50:	f7f9 fed2 	bl	80009f8 <__aeabi_dcmpgt>
 8006c54:	2800      	cmp	r0, #0
 8006c56:	f040 80f8 	bne.w	8006e4a <_dtoa_r+0x6ba>
 8006c5a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006c5e:	4620      	mov	r0, r4
 8006c60:	4629      	mov	r1, r5
 8006c62:	f7f9 fea1 	bl	80009a8 <__aeabi_dcmpeq>
 8006c66:	b118      	cbz	r0, 8006c70 <_dtoa_r+0x4e0>
 8006c68:	f018 0f01 	tst.w	r8, #1
 8006c6c:	f040 80ed 	bne.w	8006e4a <_dtoa_r+0x6ba>
 8006c70:	4649      	mov	r1, r9
 8006c72:	4658      	mov	r0, fp
 8006c74:	f000 fc92 	bl	800759c <_Bfree>
 8006c78:	2300      	movs	r3, #0
 8006c7a:	7033      	strb	r3, [r6, #0]
 8006c7c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8006c7e:	3701      	adds	r7, #1
 8006c80:	601f      	str	r7, [r3, #0]
 8006c82:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	f000 8320 	beq.w	80072ca <_dtoa_r+0xb3a>
 8006c8a:	601e      	str	r6, [r3, #0]
 8006c8c:	e31d      	b.n	80072ca <_dtoa_r+0xb3a>
 8006c8e:	07e2      	lsls	r2, r4, #31
 8006c90:	d505      	bpl.n	8006c9e <_dtoa_r+0x50e>
 8006c92:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006c96:	f7f9 fc1f 	bl	80004d8 <__aeabi_dmul>
 8006c9a:	2301      	movs	r3, #1
 8006c9c:	3601      	adds	r6, #1
 8006c9e:	1064      	asrs	r4, r4, #1
 8006ca0:	3508      	adds	r5, #8
 8006ca2:	e73f      	b.n	8006b24 <_dtoa_r+0x394>
 8006ca4:	2602      	movs	r6, #2
 8006ca6:	e742      	b.n	8006b2e <_dtoa_r+0x39e>
 8006ca8:	9c07      	ldr	r4, [sp, #28]
 8006caa:	9704      	str	r7, [sp, #16]
 8006cac:	e761      	b.n	8006b72 <_dtoa_r+0x3e2>
 8006cae:	bf00      	nop
 8006cb0:	08009da8 	.word	0x08009da8
 8006cb4:	08009d80 	.word	0x08009d80
 8006cb8:	3ff00000 	.word	0x3ff00000
 8006cbc:	40240000 	.word	0x40240000
 8006cc0:	401c0000 	.word	0x401c0000
 8006cc4:	40140000 	.word	0x40140000
 8006cc8:	4b70      	ldr	r3, [pc, #448]	@ (8006e8c <_dtoa_r+0x6fc>)
 8006cca:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006ccc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006cd0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006cd4:	4454      	add	r4, sl
 8006cd6:	2900      	cmp	r1, #0
 8006cd8:	d045      	beq.n	8006d66 <_dtoa_r+0x5d6>
 8006cda:	2000      	movs	r0, #0
 8006cdc:	496c      	ldr	r1, [pc, #432]	@ (8006e90 <_dtoa_r+0x700>)
 8006cde:	f7f9 fd25 	bl	800072c <__aeabi_ddiv>
 8006ce2:	4633      	mov	r3, r6
 8006ce4:	462a      	mov	r2, r5
 8006ce6:	f7f9 fa3f 	bl	8000168 <__aeabi_dsub>
 8006cea:	4656      	mov	r6, sl
 8006cec:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006cf0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006cf4:	f7f9 fea0 	bl	8000a38 <__aeabi_d2iz>
 8006cf8:	4605      	mov	r5, r0
 8006cfa:	f7f9 fb83 	bl	8000404 <__aeabi_i2d>
 8006cfe:	4602      	mov	r2, r0
 8006d00:	460b      	mov	r3, r1
 8006d02:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006d06:	f7f9 fa2f 	bl	8000168 <__aeabi_dsub>
 8006d0a:	4602      	mov	r2, r0
 8006d0c:	460b      	mov	r3, r1
 8006d0e:	3530      	adds	r5, #48	@ 0x30
 8006d10:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006d14:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006d18:	f806 5b01 	strb.w	r5, [r6], #1
 8006d1c:	f7f9 fe4e 	bl	80009bc <__aeabi_dcmplt>
 8006d20:	2800      	cmp	r0, #0
 8006d22:	d163      	bne.n	8006dec <_dtoa_r+0x65c>
 8006d24:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006d28:	2000      	movs	r0, #0
 8006d2a:	495a      	ldr	r1, [pc, #360]	@ (8006e94 <_dtoa_r+0x704>)
 8006d2c:	f7f9 fa1c 	bl	8000168 <__aeabi_dsub>
 8006d30:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006d34:	f7f9 fe42 	bl	80009bc <__aeabi_dcmplt>
 8006d38:	2800      	cmp	r0, #0
 8006d3a:	f040 8087 	bne.w	8006e4c <_dtoa_r+0x6bc>
 8006d3e:	42a6      	cmp	r6, r4
 8006d40:	f43f af43 	beq.w	8006bca <_dtoa_r+0x43a>
 8006d44:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006d48:	2200      	movs	r2, #0
 8006d4a:	4b53      	ldr	r3, [pc, #332]	@ (8006e98 <_dtoa_r+0x708>)
 8006d4c:	f7f9 fbc4 	bl	80004d8 <__aeabi_dmul>
 8006d50:	2200      	movs	r2, #0
 8006d52:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006d56:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006d5a:	4b4f      	ldr	r3, [pc, #316]	@ (8006e98 <_dtoa_r+0x708>)
 8006d5c:	f7f9 fbbc 	bl	80004d8 <__aeabi_dmul>
 8006d60:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006d64:	e7c4      	b.n	8006cf0 <_dtoa_r+0x560>
 8006d66:	4631      	mov	r1, r6
 8006d68:	4628      	mov	r0, r5
 8006d6a:	f7f9 fbb5 	bl	80004d8 <__aeabi_dmul>
 8006d6e:	4656      	mov	r6, sl
 8006d70:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006d74:	9413      	str	r4, [sp, #76]	@ 0x4c
 8006d76:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006d7a:	f7f9 fe5d 	bl	8000a38 <__aeabi_d2iz>
 8006d7e:	4605      	mov	r5, r0
 8006d80:	f7f9 fb40 	bl	8000404 <__aeabi_i2d>
 8006d84:	4602      	mov	r2, r0
 8006d86:	460b      	mov	r3, r1
 8006d88:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006d8c:	f7f9 f9ec 	bl	8000168 <__aeabi_dsub>
 8006d90:	4602      	mov	r2, r0
 8006d92:	460b      	mov	r3, r1
 8006d94:	3530      	adds	r5, #48	@ 0x30
 8006d96:	f806 5b01 	strb.w	r5, [r6], #1
 8006d9a:	42a6      	cmp	r6, r4
 8006d9c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006da0:	f04f 0200 	mov.w	r2, #0
 8006da4:	d124      	bne.n	8006df0 <_dtoa_r+0x660>
 8006da6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006daa:	4b39      	ldr	r3, [pc, #228]	@ (8006e90 <_dtoa_r+0x700>)
 8006dac:	f7f9 f9de 	bl	800016c <__adddf3>
 8006db0:	4602      	mov	r2, r0
 8006db2:	460b      	mov	r3, r1
 8006db4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006db8:	f7f9 fe1e 	bl	80009f8 <__aeabi_dcmpgt>
 8006dbc:	2800      	cmp	r0, #0
 8006dbe:	d145      	bne.n	8006e4c <_dtoa_r+0x6bc>
 8006dc0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006dc4:	2000      	movs	r0, #0
 8006dc6:	4932      	ldr	r1, [pc, #200]	@ (8006e90 <_dtoa_r+0x700>)
 8006dc8:	f7f9 f9ce 	bl	8000168 <__aeabi_dsub>
 8006dcc:	4602      	mov	r2, r0
 8006dce:	460b      	mov	r3, r1
 8006dd0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006dd4:	f7f9 fdf2 	bl	80009bc <__aeabi_dcmplt>
 8006dd8:	2800      	cmp	r0, #0
 8006dda:	f43f aef6 	beq.w	8006bca <_dtoa_r+0x43a>
 8006dde:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8006de0:	1e73      	subs	r3, r6, #1
 8006de2:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006de4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006de8:	2b30      	cmp	r3, #48	@ 0x30
 8006dea:	d0f8      	beq.n	8006dde <_dtoa_r+0x64e>
 8006dec:	9f04      	ldr	r7, [sp, #16]
 8006dee:	e73f      	b.n	8006c70 <_dtoa_r+0x4e0>
 8006df0:	4b29      	ldr	r3, [pc, #164]	@ (8006e98 <_dtoa_r+0x708>)
 8006df2:	f7f9 fb71 	bl	80004d8 <__aeabi_dmul>
 8006df6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006dfa:	e7bc      	b.n	8006d76 <_dtoa_r+0x5e6>
 8006dfc:	d10c      	bne.n	8006e18 <_dtoa_r+0x688>
 8006dfe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006e02:	2200      	movs	r2, #0
 8006e04:	4b25      	ldr	r3, [pc, #148]	@ (8006e9c <_dtoa_r+0x70c>)
 8006e06:	f7f9 fb67 	bl	80004d8 <__aeabi_dmul>
 8006e0a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006e0e:	f7f9 fde9 	bl	80009e4 <__aeabi_dcmpge>
 8006e12:	2800      	cmp	r0, #0
 8006e14:	f000 815b 	beq.w	80070ce <_dtoa_r+0x93e>
 8006e18:	2400      	movs	r4, #0
 8006e1a:	4625      	mov	r5, r4
 8006e1c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006e1e:	4656      	mov	r6, sl
 8006e20:	43db      	mvns	r3, r3
 8006e22:	9304      	str	r3, [sp, #16]
 8006e24:	2700      	movs	r7, #0
 8006e26:	4621      	mov	r1, r4
 8006e28:	4658      	mov	r0, fp
 8006e2a:	f000 fbb7 	bl	800759c <_Bfree>
 8006e2e:	2d00      	cmp	r5, #0
 8006e30:	d0dc      	beq.n	8006dec <_dtoa_r+0x65c>
 8006e32:	b12f      	cbz	r7, 8006e40 <_dtoa_r+0x6b0>
 8006e34:	42af      	cmp	r7, r5
 8006e36:	d003      	beq.n	8006e40 <_dtoa_r+0x6b0>
 8006e38:	4639      	mov	r1, r7
 8006e3a:	4658      	mov	r0, fp
 8006e3c:	f000 fbae 	bl	800759c <_Bfree>
 8006e40:	4629      	mov	r1, r5
 8006e42:	4658      	mov	r0, fp
 8006e44:	f000 fbaa 	bl	800759c <_Bfree>
 8006e48:	e7d0      	b.n	8006dec <_dtoa_r+0x65c>
 8006e4a:	9704      	str	r7, [sp, #16]
 8006e4c:	4633      	mov	r3, r6
 8006e4e:	461e      	mov	r6, r3
 8006e50:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006e54:	2a39      	cmp	r2, #57	@ 0x39
 8006e56:	d107      	bne.n	8006e68 <_dtoa_r+0x6d8>
 8006e58:	459a      	cmp	sl, r3
 8006e5a:	d1f8      	bne.n	8006e4e <_dtoa_r+0x6be>
 8006e5c:	9a04      	ldr	r2, [sp, #16]
 8006e5e:	3201      	adds	r2, #1
 8006e60:	9204      	str	r2, [sp, #16]
 8006e62:	2230      	movs	r2, #48	@ 0x30
 8006e64:	f88a 2000 	strb.w	r2, [sl]
 8006e68:	781a      	ldrb	r2, [r3, #0]
 8006e6a:	3201      	adds	r2, #1
 8006e6c:	701a      	strb	r2, [r3, #0]
 8006e6e:	e7bd      	b.n	8006dec <_dtoa_r+0x65c>
 8006e70:	2200      	movs	r2, #0
 8006e72:	4b09      	ldr	r3, [pc, #36]	@ (8006e98 <_dtoa_r+0x708>)
 8006e74:	f7f9 fb30 	bl	80004d8 <__aeabi_dmul>
 8006e78:	2200      	movs	r2, #0
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	4604      	mov	r4, r0
 8006e7e:	460d      	mov	r5, r1
 8006e80:	f7f9 fd92 	bl	80009a8 <__aeabi_dcmpeq>
 8006e84:	2800      	cmp	r0, #0
 8006e86:	f43f aebc 	beq.w	8006c02 <_dtoa_r+0x472>
 8006e8a:	e6f1      	b.n	8006c70 <_dtoa_r+0x4e0>
 8006e8c:	08009da8 	.word	0x08009da8
 8006e90:	3fe00000 	.word	0x3fe00000
 8006e94:	3ff00000 	.word	0x3ff00000
 8006e98:	40240000 	.word	0x40240000
 8006e9c:	40140000 	.word	0x40140000
 8006ea0:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006ea2:	2a00      	cmp	r2, #0
 8006ea4:	f000 80db 	beq.w	800705e <_dtoa_r+0x8ce>
 8006ea8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8006eaa:	2a01      	cmp	r2, #1
 8006eac:	f300 80bf 	bgt.w	800702e <_dtoa_r+0x89e>
 8006eb0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8006eb2:	2a00      	cmp	r2, #0
 8006eb4:	f000 80b7 	beq.w	8007026 <_dtoa_r+0x896>
 8006eb8:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8006ebc:	4646      	mov	r6, r8
 8006ebe:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006ec0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006ec2:	2101      	movs	r1, #1
 8006ec4:	441a      	add	r2, r3
 8006ec6:	4658      	mov	r0, fp
 8006ec8:	4498      	add	r8, r3
 8006eca:	9209      	str	r2, [sp, #36]	@ 0x24
 8006ecc:	f000 fc64 	bl	8007798 <__i2b>
 8006ed0:	4605      	mov	r5, r0
 8006ed2:	b15e      	cbz	r6, 8006eec <_dtoa_r+0x75c>
 8006ed4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	dd08      	ble.n	8006eec <_dtoa_r+0x75c>
 8006eda:	42b3      	cmp	r3, r6
 8006edc:	bfa8      	it	ge
 8006ede:	4633      	movge	r3, r6
 8006ee0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006ee2:	eba8 0803 	sub.w	r8, r8, r3
 8006ee6:	1af6      	subs	r6, r6, r3
 8006ee8:	1ad3      	subs	r3, r2, r3
 8006eea:	9309      	str	r3, [sp, #36]	@ 0x24
 8006eec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006eee:	b1f3      	cbz	r3, 8006f2e <_dtoa_r+0x79e>
 8006ef0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	f000 80b7 	beq.w	8007066 <_dtoa_r+0x8d6>
 8006ef8:	b18c      	cbz	r4, 8006f1e <_dtoa_r+0x78e>
 8006efa:	4629      	mov	r1, r5
 8006efc:	4622      	mov	r2, r4
 8006efe:	4658      	mov	r0, fp
 8006f00:	f000 fd08 	bl	8007914 <__pow5mult>
 8006f04:	464a      	mov	r2, r9
 8006f06:	4601      	mov	r1, r0
 8006f08:	4605      	mov	r5, r0
 8006f0a:	4658      	mov	r0, fp
 8006f0c:	f000 fc5a 	bl	80077c4 <__multiply>
 8006f10:	4649      	mov	r1, r9
 8006f12:	9004      	str	r0, [sp, #16]
 8006f14:	4658      	mov	r0, fp
 8006f16:	f000 fb41 	bl	800759c <_Bfree>
 8006f1a:	9b04      	ldr	r3, [sp, #16]
 8006f1c:	4699      	mov	r9, r3
 8006f1e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006f20:	1b1a      	subs	r2, r3, r4
 8006f22:	d004      	beq.n	8006f2e <_dtoa_r+0x79e>
 8006f24:	4649      	mov	r1, r9
 8006f26:	4658      	mov	r0, fp
 8006f28:	f000 fcf4 	bl	8007914 <__pow5mult>
 8006f2c:	4681      	mov	r9, r0
 8006f2e:	2101      	movs	r1, #1
 8006f30:	4658      	mov	r0, fp
 8006f32:	f000 fc31 	bl	8007798 <__i2b>
 8006f36:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006f38:	4604      	mov	r4, r0
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	f000 81c9 	beq.w	80072d2 <_dtoa_r+0xb42>
 8006f40:	461a      	mov	r2, r3
 8006f42:	4601      	mov	r1, r0
 8006f44:	4658      	mov	r0, fp
 8006f46:	f000 fce5 	bl	8007914 <__pow5mult>
 8006f4a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006f4c:	4604      	mov	r4, r0
 8006f4e:	2b01      	cmp	r3, #1
 8006f50:	f300 808f 	bgt.w	8007072 <_dtoa_r+0x8e2>
 8006f54:	9b02      	ldr	r3, [sp, #8]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	f040 8087 	bne.w	800706a <_dtoa_r+0x8da>
 8006f5c:	9b03      	ldr	r3, [sp, #12]
 8006f5e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	f040 8083 	bne.w	800706e <_dtoa_r+0x8de>
 8006f68:	9b03      	ldr	r3, [sp, #12]
 8006f6a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006f6e:	0d1b      	lsrs	r3, r3, #20
 8006f70:	051b      	lsls	r3, r3, #20
 8006f72:	b12b      	cbz	r3, 8006f80 <_dtoa_r+0x7f0>
 8006f74:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f76:	f108 0801 	add.w	r8, r8, #1
 8006f7a:	3301      	adds	r3, #1
 8006f7c:	9309      	str	r3, [sp, #36]	@ 0x24
 8006f7e:	2301      	movs	r3, #1
 8006f80:	930a      	str	r3, [sp, #40]	@ 0x28
 8006f82:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	f000 81aa 	beq.w	80072de <_dtoa_r+0xb4e>
 8006f8a:	6923      	ldr	r3, [r4, #16]
 8006f8c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006f90:	6918      	ldr	r0, [r3, #16]
 8006f92:	f000 fbb5 	bl	8007700 <__hi0bits>
 8006f96:	f1c0 0020 	rsb	r0, r0, #32
 8006f9a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f9c:	4418      	add	r0, r3
 8006f9e:	f010 001f 	ands.w	r0, r0, #31
 8006fa2:	d071      	beq.n	8007088 <_dtoa_r+0x8f8>
 8006fa4:	f1c0 0320 	rsb	r3, r0, #32
 8006fa8:	2b04      	cmp	r3, #4
 8006faa:	dd65      	ble.n	8007078 <_dtoa_r+0x8e8>
 8006fac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006fae:	f1c0 001c 	rsb	r0, r0, #28
 8006fb2:	4403      	add	r3, r0
 8006fb4:	4480      	add	r8, r0
 8006fb6:	4406      	add	r6, r0
 8006fb8:	9309      	str	r3, [sp, #36]	@ 0x24
 8006fba:	f1b8 0f00 	cmp.w	r8, #0
 8006fbe:	dd05      	ble.n	8006fcc <_dtoa_r+0x83c>
 8006fc0:	4649      	mov	r1, r9
 8006fc2:	4642      	mov	r2, r8
 8006fc4:	4658      	mov	r0, fp
 8006fc6:	f000 fcff 	bl	80079c8 <__lshift>
 8006fca:	4681      	mov	r9, r0
 8006fcc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	dd05      	ble.n	8006fde <_dtoa_r+0x84e>
 8006fd2:	4621      	mov	r1, r4
 8006fd4:	461a      	mov	r2, r3
 8006fd6:	4658      	mov	r0, fp
 8006fd8:	f000 fcf6 	bl	80079c8 <__lshift>
 8006fdc:	4604      	mov	r4, r0
 8006fde:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d053      	beq.n	800708c <_dtoa_r+0x8fc>
 8006fe4:	4621      	mov	r1, r4
 8006fe6:	4648      	mov	r0, r9
 8006fe8:	f000 fd5a 	bl	8007aa0 <__mcmp>
 8006fec:	2800      	cmp	r0, #0
 8006fee:	da4d      	bge.n	800708c <_dtoa_r+0x8fc>
 8006ff0:	1e7b      	subs	r3, r7, #1
 8006ff2:	4649      	mov	r1, r9
 8006ff4:	9304      	str	r3, [sp, #16]
 8006ff6:	220a      	movs	r2, #10
 8006ff8:	2300      	movs	r3, #0
 8006ffa:	4658      	mov	r0, fp
 8006ffc:	f000 faf0 	bl	80075e0 <__multadd>
 8007000:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007002:	4681      	mov	r9, r0
 8007004:	2b00      	cmp	r3, #0
 8007006:	f000 816c 	beq.w	80072e2 <_dtoa_r+0xb52>
 800700a:	2300      	movs	r3, #0
 800700c:	4629      	mov	r1, r5
 800700e:	220a      	movs	r2, #10
 8007010:	4658      	mov	r0, fp
 8007012:	f000 fae5 	bl	80075e0 <__multadd>
 8007016:	9b08      	ldr	r3, [sp, #32]
 8007018:	4605      	mov	r5, r0
 800701a:	2b00      	cmp	r3, #0
 800701c:	dc61      	bgt.n	80070e2 <_dtoa_r+0x952>
 800701e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007020:	2b02      	cmp	r3, #2
 8007022:	dc3b      	bgt.n	800709c <_dtoa_r+0x90c>
 8007024:	e05d      	b.n	80070e2 <_dtoa_r+0x952>
 8007026:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007028:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800702c:	e746      	b.n	8006ebc <_dtoa_r+0x72c>
 800702e:	9b07      	ldr	r3, [sp, #28]
 8007030:	1e5c      	subs	r4, r3, #1
 8007032:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007034:	42a3      	cmp	r3, r4
 8007036:	bfbf      	itttt	lt
 8007038:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800703a:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 800703c:	1ae3      	sublt	r3, r4, r3
 800703e:	18d2      	addlt	r2, r2, r3
 8007040:	bfa8      	it	ge
 8007042:	1b1c      	subge	r4, r3, r4
 8007044:	9b07      	ldr	r3, [sp, #28]
 8007046:	bfbe      	ittt	lt
 8007048:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800704a:	920e      	strlt	r2, [sp, #56]	@ 0x38
 800704c:	2400      	movlt	r4, #0
 800704e:	2b00      	cmp	r3, #0
 8007050:	bfb5      	itete	lt
 8007052:	eba8 0603 	sublt.w	r6, r8, r3
 8007056:	4646      	movge	r6, r8
 8007058:	2300      	movlt	r3, #0
 800705a:	9b07      	ldrge	r3, [sp, #28]
 800705c:	e730      	b.n	8006ec0 <_dtoa_r+0x730>
 800705e:	4646      	mov	r6, r8
 8007060:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007062:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8007064:	e735      	b.n	8006ed2 <_dtoa_r+0x742>
 8007066:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007068:	e75c      	b.n	8006f24 <_dtoa_r+0x794>
 800706a:	2300      	movs	r3, #0
 800706c:	e788      	b.n	8006f80 <_dtoa_r+0x7f0>
 800706e:	9b02      	ldr	r3, [sp, #8]
 8007070:	e786      	b.n	8006f80 <_dtoa_r+0x7f0>
 8007072:	2300      	movs	r3, #0
 8007074:	930a      	str	r3, [sp, #40]	@ 0x28
 8007076:	e788      	b.n	8006f8a <_dtoa_r+0x7fa>
 8007078:	d09f      	beq.n	8006fba <_dtoa_r+0x82a>
 800707a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800707c:	331c      	adds	r3, #28
 800707e:	441a      	add	r2, r3
 8007080:	4498      	add	r8, r3
 8007082:	441e      	add	r6, r3
 8007084:	9209      	str	r2, [sp, #36]	@ 0x24
 8007086:	e798      	b.n	8006fba <_dtoa_r+0x82a>
 8007088:	4603      	mov	r3, r0
 800708a:	e7f6      	b.n	800707a <_dtoa_r+0x8ea>
 800708c:	9b07      	ldr	r3, [sp, #28]
 800708e:	9704      	str	r7, [sp, #16]
 8007090:	2b00      	cmp	r3, #0
 8007092:	dc20      	bgt.n	80070d6 <_dtoa_r+0x946>
 8007094:	9308      	str	r3, [sp, #32]
 8007096:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007098:	2b02      	cmp	r3, #2
 800709a:	dd1e      	ble.n	80070da <_dtoa_r+0x94a>
 800709c:	9b08      	ldr	r3, [sp, #32]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	f47f aebc 	bne.w	8006e1c <_dtoa_r+0x68c>
 80070a4:	4621      	mov	r1, r4
 80070a6:	2205      	movs	r2, #5
 80070a8:	4658      	mov	r0, fp
 80070aa:	f000 fa99 	bl	80075e0 <__multadd>
 80070ae:	4601      	mov	r1, r0
 80070b0:	4604      	mov	r4, r0
 80070b2:	4648      	mov	r0, r9
 80070b4:	f000 fcf4 	bl	8007aa0 <__mcmp>
 80070b8:	2800      	cmp	r0, #0
 80070ba:	f77f aeaf 	ble.w	8006e1c <_dtoa_r+0x68c>
 80070be:	2331      	movs	r3, #49	@ 0x31
 80070c0:	4656      	mov	r6, sl
 80070c2:	f806 3b01 	strb.w	r3, [r6], #1
 80070c6:	9b04      	ldr	r3, [sp, #16]
 80070c8:	3301      	adds	r3, #1
 80070ca:	9304      	str	r3, [sp, #16]
 80070cc:	e6aa      	b.n	8006e24 <_dtoa_r+0x694>
 80070ce:	9c07      	ldr	r4, [sp, #28]
 80070d0:	9704      	str	r7, [sp, #16]
 80070d2:	4625      	mov	r5, r4
 80070d4:	e7f3      	b.n	80070be <_dtoa_r+0x92e>
 80070d6:	9b07      	ldr	r3, [sp, #28]
 80070d8:	9308      	str	r3, [sp, #32]
 80070da:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80070dc:	2b00      	cmp	r3, #0
 80070de:	f000 8104 	beq.w	80072ea <_dtoa_r+0xb5a>
 80070e2:	2e00      	cmp	r6, #0
 80070e4:	dd05      	ble.n	80070f2 <_dtoa_r+0x962>
 80070e6:	4629      	mov	r1, r5
 80070e8:	4632      	mov	r2, r6
 80070ea:	4658      	mov	r0, fp
 80070ec:	f000 fc6c 	bl	80079c8 <__lshift>
 80070f0:	4605      	mov	r5, r0
 80070f2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d05a      	beq.n	80071ae <_dtoa_r+0xa1e>
 80070f8:	4658      	mov	r0, fp
 80070fa:	6869      	ldr	r1, [r5, #4]
 80070fc:	f000 fa0e 	bl	800751c <_Balloc>
 8007100:	4606      	mov	r6, r0
 8007102:	b928      	cbnz	r0, 8007110 <_dtoa_r+0x980>
 8007104:	4602      	mov	r2, r0
 8007106:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800710a:	4b83      	ldr	r3, [pc, #524]	@ (8007318 <_dtoa_r+0xb88>)
 800710c:	f7ff bb54 	b.w	80067b8 <_dtoa_r+0x28>
 8007110:	692a      	ldr	r2, [r5, #16]
 8007112:	f105 010c 	add.w	r1, r5, #12
 8007116:	3202      	adds	r2, #2
 8007118:	0092      	lsls	r2, r2, #2
 800711a:	300c      	adds	r0, #12
 800711c:	f7ff fa9b 	bl	8006656 <memcpy>
 8007120:	2201      	movs	r2, #1
 8007122:	4631      	mov	r1, r6
 8007124:	4658      	mov	r0, fp
 8007126:	f000 fc4f 	bl	80079c8 <__lshift>
 800712a:	462f      	mov	r7, r5
 800712c:	4605      	mov	r5, r0
 800712e:	f10a 0301 	add.w	r3, sl, #1
 8007132:	9307      	str	r3, [sp, #28]
 8007134:	9b08      	ldr	r3, [sp, #32]
 8007136:	4453      	add	r3, sl
 8007138:	930b      	str	r3, [sp, #44]	@ 0x2c
 800713a:	9b02      	ldr	r3, [sp, #8]
 800713c:	f003 0301 	and.w	r3, r3, #1
 8007140:	930a      	str	r3, [sp, #40]	@ 0x28
 8007142:	9b07      	ldr	r3, [sp, #28]
 8007144:	4621      	mov	r1, r4
 8007146:	3b01      	subs	r3, #1
 8007148:	4648      	mov	r0, r9
 800714a:	9302      	str	r3, [sp, #8]
 800714c:	f7ff fa96 	bl	800667c <quorem>
 8007150:	4639      	mov	r1, r7
 8007152:	9008      	str	r0, [sp, #32]
 8007154:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007158:	4648      	mov	r0, r9
 800715a:	f000 fca1 	bl	8007aa0 <__mcmp>
 800715e:	462a      	mov	r2, r5
 8007160:	9009      	str	r0, [sp, #36]	@ 0x24
 8007162:	4621      	mov	r1, r4
 8007164:	4658      	mov	r0, fp
 8007166:	f000 fcb7 	bl	8007ad8 <__mdiff>
 800716a:	68c2      	ldr	r2, [r0, #12]
 800716c:	4606      	mov	r6, r0
 800716e:	bb02      	cbnz	r2, 80071b2 <_dtoa_r+0xa22>
 8007170:	4601      	mov	r1, r0
 8007172:	4648      	mov	r0, r9
 8007174:	f000 fc94 	bl	8007aa0 <__mcmp>
 8007178:	4602      	mov	r2, r0
 800717a:	4631      	mov	r1, r6
 800717c:	4658      	mov	r0, fp
 800717e:	920c      	str	r2, [sp, #48]	@ 0x30
 8007180:	f000 fa0c 	bl	800759c <_Bfree>
 8007184:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007186:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8007188:	9e07      	ldr	r6, [sp, #28]
 800718a:	ea43 0102 	orr.w	r1, r3, r2
 800718e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007190:	4319      	orrs	r1, r3
 8007192:	d110      	bne.n	80071b6 <_dtoa_r+0xa26>
 8007194:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007198:	d029      	beq.n	80071ee <_dtoa_r+0xa5e>
 800719a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800719c:	2b00      	cmp	r3, #0
 800719e:	dd02      	ble.n	80071a6 <_dtoa_r+0xa16>
 80071a0:	9b08      	ldr	r3, [sp, #32]
 80071a2:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80071a6:	9b02      	ldr	r3, [sp, #8]
 80071a8:	f883 8000 	strb.w	r8, [r3]
 80071ac:	e63b      	b.n	8006e26 <_dtoa_r+0x696>
 80071ae:	4628      	mov	r0, r5
 80071b0:	e7bb      	b.n	800712a <_dtoa_r+0x99a>
 80071b2:	2201      	movs	r2, #1
 80071b4:	e7e1      	b.n	800717a <_dtoa_r+0x9ea>
 80071b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	db04      	blt.n	80071c6 <_dtoa_r+0xa36>
 80071bc:	9920      	ldr	r1, [sp, #128]	@ 0x80
 80071be:	430b      	orrs	r3, r1
 80071c0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80071c2:	430b      	orrs	r3, r1
 80071c4:	d120      	bne.n	8007208 <_dtoa_r+0xa78>
 80071c6:	2a00      	cmp	r2, #0
 80071c8:	dded      	ble.n	80071a6 <_dtoa_r+0xa16>
 80071ca:	4649      	mov	r1, r9
 80071cc:	2201      	movs	r2, #1
 80071ce:	4658      	mov	r0, fp
 80071d0:	f000 fbfa 	bl	80079c8 <__lshift>
 80071d4:	4621      	mov	r1, r4
 80071d6:	4681      	mov	r9, r0
 80071d8:	f000 fc62 	bl	8007aa0 <__mcmp>
 80071dc:	2800      	cmp	r0, #0
 80071de:	dc03      	bgt.n	80071e8 <_dtoa_r+0xa58>
 80071e0:	d1e1      	bne.n	80071a6 <_dtoa_r+0xa16>
 80071e2:	f018 0f01 	tst.w	r8, #1
 80071e6:	d0de      	beq.n	80071a6 <_dtoa_r+0xa16>
 80071e8:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80071ec:	d1d8      	bne.n	80071a0 <_dtoa_r+0xa10>
 80071ee:	2339      	movs	r3, #57	@ 0x39
 80071f0:	9a02      	ldr	r2, [sp, #8]
 80071f2:	7013      	strb	r3, [r2, #0]
 80071f4:	4633      	mov	r3, r6
 80071f6:	461e      	mov	r6, r3
 80071f8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80071fc:	3b01      	subs	r3, #1
 80071fe:	2a39      	cmp	r2, #57	@ 0x39
 8007200:	d052      	beq.n	80072a8 <_dtoa_r+0xb18>
 8007202:	3201      	adds	r2, #1
 8007204:	701a      	strb	r2, [r3, #0]
 8007206:	e60e      	b.n	8006e26 <_dtoa_r+0x696>
 8007208:	2a00      	cmp	r2, #0
 800720a:	dd07      	ble.n	800721c <_dtoa_r+0xa8c>
 800720c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007210:	d0ed      	beq.n	80071ee <_dtoa_r+0xa5e>
 8007212:	9a02      	ldr	r2, [sp, #8]
 8007214:	f108 0301 	add.w	r3, r8, #1
 8007218:	7013      	strb	r3, [r2, #0]
 800721a:	e604      	b.n	8006e26 <_dtoa_r+0x696>
 800721c:	9b07      	ldr	r3, [sp, #28]
 800721e:	9a07      	ldr	r2, [sp, #28]
 8007220:	f803 8c01 	strb.w	r8, [r3, #-1]
 8007224:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007226:	4293      	cmp	r3, r2
 8007228:	d028      	beq.n	800727c <_dtoa_r+0xaec>
 800722a:	4649      	mov	r1, r9
 800722c:	2300      	movs	r3, #0
 800722e:	220a      	movs	r2, #10
 8007230:	4658      	mov	r0, fp
 8007232:	f000 f9d5 	bl	80075e0 <__multadd>
 8007236:	42af      	cmp	r7, r5
 8007238:	4681      	mov	r9, r0
 800723a:	f04f 0300 	mov.w	r3, #0
 800723e:	f04f 020a 	mov.w	r2, #10
 8007242:	4639      	mov	r1, r7
 8007244:	4658      	mov	r0, fp
 8007246:	d107      	bne.n	8007258 <_dtoa_r+0xac8>
 8007248:	f000 f9ca 	bl	80075e0 <__multadd>
 800724c:	4607      	mov	r7, r0
 800724e:	4605      	mov	r5, r0
 8007250:	9b07      	ldr	r3, [sp, #28]
 8007252:	3301      	adds	r3, #1
 8007254:	9307      	str	r3, [sp, #28]
 8007256:	e774      	b.n	8007142 <_dtoa_r+0x9b2>
 8007258:	f000 f9c2 	bl	80075e0 <__multadd>
 800725c:	4629      	mov	r1, r5
 800725e:	4607      	mov	r7, r0
 8007260:	2300      	movs	r3, #0
 8007262:	220a      	movs	r2, #10
 8007264:	4658      	mov	r0, fp
 8007266:	f000 f9bb 	bl	80075e0 <__multadd>
 800726a:	4605      	mov	r5, r0
 800726c:	e7f0      	b.n	8007250 <_dtoa_r+0xac0>
 800726e:	9b08      	ldr	r3, [sp, #32]
 8007270:	2700      	movs	r7, #0
 8007272:	2b00      	cmp	r3, #0
 8007274:	bfcc      	ite	gt
 8007276:	461e      	movgt	r6, r3
 8007278:	2601      	movle	r6, #1
 800727a:	4456      	add	r6, sl
 800727c:	4649      	mov	r1, r9
 800727e:	2201      	movs	r2, #1
 8007280:	4658      	mov	r0, fp
 8007282:	f000 fba1 	bl	80079c8 <__lshift>
 8007286:	4621      	mov	r1, r4
 8007288:	4681      	mov	r9, r0
 800728a:	f000 fc09 	bl	8007aa0 <__mcmp>
 800728e:	2800      	cmp	r0, #0
 8007290:	dcb0      	bgt.n	80071f4 <_dtoa_r+0xa64>
 8007292:	d102      	bne.n	800729a <_dtoa_r+0xb0a>
 8007294:	f018 0f01 	tst.w	r8, #1
 8007298:	d1ac      	bne.n	80071f4 <_dtoa_r+0xa64>
 800729a:	4633      	mov	r3, r6
 800729c:	461e      	mov	r6, r3
 800729e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80072a2:	2a30      	cmp	r2, #48	@ 0x30
 80072a4:	d0fa      	beq.n	800729c <_dtoa_r+0xb0c>
 80072a6:	e5be      	b.n	8006e26 <_dtoa_r+0x696>
 80072a8:	459a      	cmp	sl, r3
 80072aa:	d1a4      	bne.n	80071f6 <_dtoa_r+0xa66>
 80072ac:	9b04      	ldr	r3, [sp, #16]
 80072ae:	3301      	adds	r3, #1
 80072b0:	9304      	str	r3, [sp, #16]
 80072b2:	2331      	movs	r3, #49	@ 0x31
 80072b4:	f88a 3000 	strb.w	r3, [sl]
 80072b8:	e5b5      	b.n	8006e26 <_dtoa_r+0x696>
 80072ba:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80072bc:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800731c <_dtoa_r+0xb8c>
 80072c0:	b11b      	cbz	r3, 80072ca <_dtoa_r+0xb3a>
 80072c2:	f10a 0308 	add.w	r3, sl, #8
 80072c6:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80072c8:	6013      	str	r3, [r2, #0]
 80072ca:	4650      	mov	r0, sl
 80072cc:	b017      	add	sp, #92	@ 0x5c
 80072ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072d2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80072d4:	2b01      	cmp	r3, #1
 80072d6:	f77f ae3d 	ble.w	8006f54 <_dtoa_r+0x7c4>
 80072da:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80072dc:	930a      	str	r3, [sp, #40]	@ 0x28
 80072de:	2001      	movs	r0, #1
 80072e0:	e65b      	b.n	8006f9a <_dtoa_r+0x80a>
 80072e2:	9b08      	ldr	r3, [sp, #32]
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	f77f aed6 	ble.w	8007096 <_dtoa_r+0x906>
 80072ea:	4656      	mov	r6, sl
 80072ec:	4621      	mov	r1, r4
 80072ee:	4648      	mov	r0, r9
 80072f0:	f7ff f9c4 	bl	800667c <quorem>
 80072f4:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80072f8:	9b08      	ldr	r3, [sp, #32]
 80072fa:	f806 8b01 	strb.w	r8, [r6], #1
 80072fe:	eba6 020a 	sub.w	r2, r6, sl
 8007302:	4293      	cmp	r3, r2
 8007304:	ddb3      	ble.n	800726e <_dtoa_r+0xade>
 8007306:	4649      	mov	r1, r9
 8007308:	2300      	movs	r3, #0
 800730a:	220a      	movs	r2, #10
 800730c:	4658      	mov	r0, fp
 800730e:	f000 f967 	bl	80075e0 <__multadd>
 8007312:	4681      	mov	r9, r0
 8007314:	e7ea      	b.n	80072ec <_dtoa_r+0xb5c>
 8007316:	bf00      	nop
 8007318:	08009d07 	.word	0x08009d07
 800731c:	08009c8b 	.word	0x08009c8b

08007320 <_free_r>:
 8007320:	b538      	push	{r3, r4, r5, lr}
 8007322:	4605      	mov	r5, r0
 8007324:	2900      	cmp	r1, #0
 8007326:	d040      	beq.n	80073aa <_free_r+0x8a>
 8007328:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800732c:	1f0c      	subs	r4, r1, #4
 800732e:	2b00      	cmp	r3, #0
 8007330:	bfb8      	it	lt
 8007332:	18e4      	addlt	r4, r4, r3
 8007334:	f000 f8e6 	bl	8007504 <__malloc_lock>
 8007338:	4a1c      	ldr	r2, [pc, #112]	@ (80073ac <_free_r+0x8c>)
 800733a:	6813      	ldr	r3, [r2, #0]
 800733c:	b933      	cbnz	r3, 800734c <_free_r+0x2c>
 800733e:	6063      	str	r3, [r4, #4]
 8007340:	6014      	str	r4, [r2, #0]
 8007342:	4628      	mov	r0, r5
 8007344:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007348:	f000 b8e2 	b.w	8007510 <__malloc_unlock>
 800734c:	42a3      	cmp	r3, r4
 800734e:	d908      	bls.n	8007362 <_free_r+0x42>
 8007350:	6820      	ldr	r0, [r4, #0]
 8007352:	1821      	adds	r1, r4, r0
 8007354:	428b      	cmp	r3, r1
 8007356:	bf01      	itttt	eq
 8007358:	6819      	ldreq	r1, [r3, #0]
 800735a:	685b      	ldreq	r3, [r3, #4]
 800735c:	1809      	addeq	r1, r1, r0
 800735e:	6021      	streq	r1, [r4, #0]
 8007360:	e7ed      	b.n	800733e <_free_r+0x1e>
 8007362:	461a      	mov	r2, r3
 8007364:	685b      	ldr	r3, [r3, #4]
 8007366:	b10b      	cbz	r3, 800736c <_free_r+0x4c>
 8007368:	42a3      	cmp	r3, r4
 800736a:	d9fa      	bls.n	8007362 <_free_r+0x42>
 800736c:	6811      	ldr	r1, [r2, #0]
 800736e:	1850      	adds	r0, r2, r1
 8007370:	42a0      	cmp	r0, r4
 8007372:	d10b      	bne.n	800738c <_free_r+0x6c>
 8007374:	6820      	ldr	r0, [r4, #0]
 8007376:	4401      	add	r1, r0
 8007378:	1850      	adds	r0, r2, r1
 800737a:	4283      	cmp	r3, r0
 800737c:	6011      	str	r1, [r2, #0]
 800737e:	d1e0      	bne.n	8007342 <_free_r+0x22>
 8007380:	6818      	ldr	r0, [r3, #0]
 8007382:	685b      	ldr	r3, [r3, #4]
 8007384:	4408      	add	r0, r1
 8007386:	6010      	str	r0, [r2, #0]
 8007388:	6053      	str	r3, [r2, #4]
 800738a:	e7da      	b.n	8007342 <_free_r+0x22>
 800738c:	d902      	bls.n	8007394 <_free_r+0x74>
 800738e:	230c      	movs	r3, #12
 8007390:	602b      	str	r3, [r5, #0]
 8007392:	e7d6      	b.n	8007342 <_free_r+0x22>
 8007394:	6820      	ldr	r0, [r4, #0]
 8007396:	1821      	adds	r1, r4, r0
 8007398:	428b      	cmp	r3, r1
 800739a:	bf01      	itttt	eq
 800739c:	6819      	ldreq	r1, [r3, #0]
 800739e:	685b      	ldreq	r3, [r3, #4]
 80073a0:	1809      	addeq	r1, r1, r0
 80073a2:	6021      	streq	r1, [r4, #0]
 80073a4:	6063      	str	r3, [r4, #4]
 80073a6:	6054      	str	r4, [r2, #4]
 80073a8:	e7cb      	b.n	8007342 <_free_r+0x22>
 80073aa:	bd38      	pop	{r3, r4, r5, pc}
 80073ac:	20003390 	.word	0x20003390

080073b0 <malloc>:
 80073b0:	4b02      	ldr	r3, [pc, #8]	@ (80073bc <malloc+0xc>)
 80073b2:	4601      	mov	r1, r0
 80073b4:	6818      	ldr	r0, [r3, #0]
 80073b6:	f000 b825 	b.w	8007404 <_malloc_r>
 80073ba:	bf00      	nop
 80073bc:	20000420 	.word	0x20000420

080073c0 <sbrk_aligned>:
 80073c0:	b570      	push	{r4, r5, r6, lr}
 80073c2:	4e0f      	ldr	r6, [pc, #60]	@ (8007400 <sbrk_aligned+0x40>)
 80073c4:	460c      	mov	r4, r1
 80073c6:	6831      	ldr	r1, [r6, #0]
 80073c8:	4605      	mov	r5, r0
 80073ca:	b911      	cbnz	r1, 80073d2 <sbrk_aligned+0x12>
 80073cc:	f001 fe7a 	bl	80090c4 <_sbrk_r>
 80073d0:	6030      	str	r0, [r6, #0]
 80073d2:	4621      	mov	r1, r4
 80073d4:	4628      	mov	r0, r5
 80073d6:	f001 fe75 	bl	80090c4 <_sbrk_r>
 80073da:	1c43      	adds	r3, r0, #1
 80073dc:	d103      	bne.n	80073e6 <sbrk_aligned+0x26>
 80073de:	f04f 34ff 	mov.w	r4, #4294967295
 80073e2:	4620      	mov	r0, r4
 80073e4:	bd70      	pop	{r4, r5, r6, pc}
 80073e6:	1cc4      	adds	r4, r0, #3
 80073e8:	f024 0403 	bic.w	r4, r4, #3
 80073ec:	42a0      	cmp	r0, r4
 80073ee:	d0f8      	beq.n	80073e2 <sbrk_aligned+0x22>
 80073f0:	1a21      	subs	r1, r4, r0
 80073f2:	4628      	mov	r0, r5
 80073f4:	f001 fe66 	bl	80090c4 <_sbrk_r>
 80073f8:	3001      	adds	r0, #1
 80073fa:	d1f2      	bne.n	80073e2 <sbrk_aligned+0x22>
 80073fc:	e7ef      	b.n	80073de <sbrk_aligned+0x1e>
 80073fe:	bf00      	nop
 8007400:	2000338c 	.word	0x2000338c

08007404 <_malloc_r>:
 8007404:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007408:	1ccd      	adds	r5, r1, #3
 800740a:	f025 0503 	bic.w	r5, r5, #3
 800740e:	3508      	adds	r5, #8
 8007410:	2d0c      	cmp	r5, #12
 8007412:	bf38      	it	cc
 8007414:	250c      	movcc	r5, #12
 8007416:	2d00      	cmp	r5, #0
 8007418:	4606      	mov	r6, r0
 800741a:	db01      	blt.n	8007420 <_malloc_r+0x1c>
 800741c:	42a9      	cmp	r1, r5
 800741e:	d904      	bls.n	800742a <_malloc_r+0x26>
 8007420:	230c      	movs	r3, #12
 8007422:	6033      	str	r3, [r6, #0]
 8007424:	2000      	movs	r0, #0
 8007426:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800742a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007500 <_malloc_r+0xfc>
 800742e:	f000 f869 	bl	8007504 <__malloc_lock>
 8007432:	f8d8 3000 	ldr.w	r3, [r8]
 8007436:	461c      	mov	r4, r3
 8007438:	bb44      	cbnz	r4, 800748c <_malloc_r+0x88>
 800743a:	4629      	mov	r1, r5
 800743c:	4630      	mov	r0, r6
 800743e:	f7ff ffbf 	bl	80073c0 <sbrk_aligned>
 8007442:	1c43      	adds	r3, r0, #1
 8007444:	4604      	mov	r4, r0
 8007446:	d158      	bne.n	80074fa <_malloc_r+0xf6>
 8007448:	f8d8 4000 	ldr.w	r4, [r8]
 800744c:	4627      	mov	r7, r4
 800744e:	2f00      	cmp	r7, #0
 8007450:	d143      	bne.n	80074da <_malloc_r+0xd6>
 8007452:	2c00      	cmp	r4, #0
 8007454:	d04b      	beq.n	80074ee <_malloc_r+0xea>
 8007456:	6823      	ldr	r3, [r4, #0]
 8007458:	4639      	mov	r1, r7
 800745a:	4630      	mov	r0, r6
 800745c:	eb04 0903 	add.w	r9, r4, r3
 8007460:	f001 fe30 	bl	80090c4 <_sbrk_r>
 8007464:	4581      	cmp	r9, r0
 8007466:	d142      	bne.n	80074ee <_malloc_r+0xea>
 8007468:	6821      	ldr	r1, [r4, #0]
 800746a:	4630      	mov	r0, r6
 800746c:	1a6d      	subs	r5, r5, r1
 800746e:	4629      	mov	r1, r5
 8007470:	f7ff ffa6 	bl	80073c0 <sbrk_aligned>
 8007474:	3001      	adds	r0, #1
 8007476:	d03a      	beq.n	80074ee <_malloc_r+0xea>
 8007478:	6823      	ldr	r3, [r4, #0]
 800747a:	442b      	add	r3, r5
 800747c:	6023      	str	r3, [r4, #0]
 800747e:	f8d8 3000 	ldr.w	r3, [r8]
 8007482:	685a      	ldr	r2, [r3, #4]
 8007484:	bb62      	cbnz	r2, 80074e0 <_malloc_r+0xdc>
 8007486:	f8c8 7000 	str.w	r7, [r8]
 800748a:	e00f      	b.n	80074ac <_malloc_r+0xa8>
 800748c:	6822      	ldr	r2, [r4, #0]
 800748e:	1b52      	subs	r2, r2, r5
 8007490:	d420      	bmi.n	80074d4 <_malloc_r+0xd0>
 8007492:	2a0b      	cmp	r2, #11
 8007494:	d917      	bls.n	80074c6 <_malloc_r+0xc2>
 8007496:	1961      	adds	r1, r4, r5
 8007498:	42a3      	cmp	r3, r4
 800749a:	6025      	str	r5, [r4, #0]
 800749c:	bf18      	it	ne
 800749e:	6059      	strne	r1, [r3, #4]
 80074a0:	6863      	ldr	r3, [r4, #4]
 80074a2:	bf08      	it	eq
 80074a4:	f8c8 1000 	streq.w	r1, [r8]
 80074a8:	5162      	str	r2, [r4, r5]
 80074aa:	604b      	str	r3, [r1, #4]
 80074ac:	4630      	mov	r0, r6
 80074ae:	f000 f82f 	bl	8007510 <__malloc_unlock>
 80074b2:	f104 000b 	add.w	r0, r4, #11
 80074b6:	1d23      	adds	r3, r4, #4
 80074b8:	f020 0007 	bic.w	r0, r0, #7
 80074bc:	1ac2      	subs	r2, r0, r3
 80074be:	bf1c      	itt	ne
 80074c0:	1a1b      	subne	r3, r3, r0
 80074c2:	50a3      	strne	r3, [r4, r2]
 80074c4:	e7af      	b.n	8007426 <_malloc_r+0x22>
 80074c6:	6862      	ldr	r2, [r4, #4]
 80074c8:	42a3      	cmp	r3, r4
 80074ca:	bf0c      	ite	eq
 80074cc:	f8c8 2000 	streq.w	r2, [r8]
 80074d0:	605a      	strne	r2, [r3, #4]
 80074d2:	e7eb      	b.n	80074ac <_malloc_r+0xa8>
 80074d4:	4623      	mov	r3, r4
 80074d6:	6864      	ldr	r4, [r4, #4]
 80074d8:	e7ae      	b.n	8007438 <_malloc_r+0x34>
 80074da:	463c      	mov	r4, r7
 80074dc:	687f      	ldr	r7, [r7, #4]
 80074de:	e7b6      	b.n	800744e <_malloc_r+0x4a>
 80074e0:	461a      	mov	r2, r3
 80074e2:	685b      	ldr	r3, [r3, #4]
 80074e4:	42a3      	cmp	r3, r4
 80074e6:	d1fb      	bne.n	80074e0 <_malloc_r+0xdc>
 80074e8:	2300      	movs	r3, #0
 80074ea:	6053      	str	r3, [r2, #4]
 80074ec:	e7de      	b.n	80074ac <_malloc_r+0xa8>
 80074ee:	230c      	movs	r3, #12
 80074f0:	4630      	mov	r0, r6
 80074f2:	6033      	str	r3, [r6, #0]
 80074f4:	f000 f80c 	bl	8007510 <__malloc_unlock>
 80074f8:	e794      	b.n	8007424 <_malloc_r+0x20>
 80074fa:	6005      	str	r5, [r0, #0]
 80074fc:	e7d6      	b.n	80074ac <_malloc_r+0xa8>
 80074fe:	bf00      	nop
 8007500:	20003390 	.word	0x20003390

08007504 <__malloc_lock>:
 8007504:	4801      	ldr	r0, [pc, #4]	@ (800750c <__malloc_lock+0x8>)
 8007506:	f7ff b88e 	b.w	8006626 <__retarget_lock_acquire_recursive>
 800750a:	bf00      	nop
 800750c:	20003388 	.word	0x20003388

08007510 <__malloc_unlock>:
 8007510:	4801      	ldr	r0, [pc, #4]	@ (8007518 <__malloc_unlock+0x8>)
 8007512:	f7ff b889 	b.w	8006628 <__retarget_lock_release_recursive>
 8007516:	bf00      	nop
 8007518:	20003388 	.word	0x20003388

0800751c <_Balloc>:
 800751c:	b570      	push	{r4, r5, r6, lr}
 800751e:	69c6      	ldr	r6, [r0, #28]
 8007520:	4604      	mov	r4, r0
 8007522:	460d      	mov	r5, r1
 8007524:	b976      	cbnz	r6, 8007544 <_Balloc+0x28>
 8007526:	2010      	movs	r0, #16
 8007528:	f7ff ff42 	bl	80073b0 <malloc>
 800752c:	4602      	mov	r2, r0
 800752e:	61e0      	str	r0, [r4, #28]
 8007530:	b920      	cbnz	r0, 800753c <_Balloc+0x20>
 8007532:	216b      	movs	r1, #107	@ 0x6b
 8007534:	4b17      	ldr	r3, [pc, #92]	@ (8007594 <_Balloc+0x78>)
 8007536:	4818      	ldr	r0, [pc, #96]	@ (8007598 <_Balloc+0x7c>)
 8007538:	f001 fdda 	bl	80090f0 <__assert_func>
 800753c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007540:	6006      	str	r6, [r0, #0]
 8007542:	60c6      	str	r6, [r0, #12]
 8007544:	69e6      	ldr	r6, [r4, #28]
 8007546:	68f3      	ldr	r3, [r6, #12]
 8007548:	b183      	cbz	r3, 800756c <_Balloc+0x50>
 800754a:	69e3      	ldr	r3, [r4, #28]
 800754c:	68db      	ldr	r3, [r3, #12]
 800754e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007552:	b9b8      	cbnz	r0, 8007584 <_Balloc+0x68>
 8007554:	2101      	movs	r1, #1
 8007556:	fa01 f605 	lsl.w	r6, r1, r5
 800755a:	1d72      	adds	r2, r6, #5
 800755c:	4620      	mov	r0, r4
 800755e:	0092      	lsls	r2, r2, #2
 8007560:	f001 fde4 	bl	800912c <_calloc_r>
 8007564:	b160      	cbz	r0, 8007580 <_Balloc+0x64>
 8007566:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800756a:	e00e      	b.n	800758a <_Balloc+0x6e>
 800756c:	2221      	movs	r2, #33	@ 0x21
 800756e:	2104      	movs	r1, #4
 8007570:	4620      	mov	r0, r4
 8007572:	f001 fddb 	bl	800912c <_calloc_r>
 8007576:	69e3      	ldr	r3, [r4, #28]
 8007578:	60f0      	str	r0, [r6, #12]
 800757a:	68db      	ldr	r3, [r3, #12]
 800757c:	2b00      	cmp	r3, #0
 800757e:	d1e4      	bne.n	800754a <_Balloc+0x2e>
 8007580:	2000      	movs	r0, #0
 8007582:	bd70      	pop	{r4, r5, r6, pc}
 8007584:	6802      	ldr	r2, [r0, #0]
 8007586:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800758a:	2300      	movs	r3, #0
 800758c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007590:	e7f7      	b.n	8007582 <_Balloc+0x66>
 8007592:	bf00      	nop
 8007594:	08009c98 	.word	0x08009c98
 8007598:	08009d18 	.word	0x08009d18

0800759c <_Bfree>:
 800759c:	b570      	push	{r4, r5, r6, lr}
 800759e:	69c6      	ldr	r6, [r0, #28]
 80075a0:	4605      	mov	r5, r0
 80075a2:	460c      	mov	r4, r1
 80075a4:	b976      	cbnz	r6, 80075c4 <_Bfree+0x28>
 80075a6:	2010      	movs	r0, #16
 80075a8:	f7ff ff02 	bl	80073b0 <malloc>
 80075ac:	4602      	mov	r2, r0
 80075ae:	61e8      	str	r0, [r5, #28]
 80075b0:	b920      	cbnz	r0, 80075bc <_Bfree+0x20>
 80075b2:	218f      	movs	r1, #143	@ 0x8f
 80075b4:	4b08      	ldr	r3, [pc, #32]	@ (80075d8 <_Bfree+0x3c>)
 80075b6:	4809      	ldr	r0, [pc, #36]	@ (80075dc <_Bfree+0x40>)
 80075b8:	f001 fd9a 	bl	80090f0 <__assert_func>
 80075bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80075c0:	6006      	str	r6, [r0, #0]
 80075c2:	60c6      	str	r6, [r0, #12]
 80075c4:	b13c      	cbz	r4, 80075d6 <_Bfree+0x3a>
 80075c6:	69eb      	ldr	r3, [r5, #28]
 80075c8:	6862      	ldr	r2, [r4, #4]
 80075ca:	68db      	ldr	r3, [r3, #12]
 80075cc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80075d0:	6021      	str	r1, [r4, #0]
 80075d2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80075d6:	bd70      	pop	{r4, r5, r6, pc}
 80075d8:	08009c98 	.word	0x08009c98
 80075dc:	08009d18 	.word	0x08009d18

080075e0 <__multadd>:
 80075e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80075e4:	4607      	mov	r7, r0
 80075e6:	460c      	mov	r4, r1
 80075e8:	461e      	mov	r6, r3
 80075ea:	2000      	movs	r0, #0
 80075ec:	690d      	ldr	r5, [r1, #16]
 80075ee:	f101 0c14 	add.w	ip, r1, #20
 80075f2:	f8dc 3000 	ldr.w	r3, [ip]
 80075f6:	3001      	adds	r0, #1
 80075f8:	b299      	uxth	r1, r3
 80075fa:	fb02 6101 	mla	r1, r2, r1, r6
 80075fe:	0c1e      	lsrs	r6, r3, #16
 8007600:	0c0b      	lsrs	r3, r1, #16
 8007602:	fb02 3306 	mla	r3, r2, r6, r3
 8007606:	b289      	uxth	r1, r1
 8007608:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800760c:	4285      	cmp	r5, r0
 800760e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007612:	f84c 1b04 	str.w	r1, [ip], #4
 8007616:	dcec      	bgt.n	80075f2 <__multadd+0x12>
 8007618:	b30e      	cbz	r6, 800765e <__multadd+0x7e>
 800761a:	68a3      	ldr	r3, [r4, #8]
 800761c:	42ab      	cmp	r3, r5
 800761e:	dc19      	bgt.n	8007654 <__multadd+0x74>
 8007620:	6861      	ldr	r1, [r4, #4]
 8007622:	4638      	mov	r0, r7
 8007624:	3101      	adds	r1, #1
 8007626:	f7ff ff79 	bl	800751c <_Balloc>
 800762a:	4680      	mov	r8, r0
 800762c:	b928      	cbnz	r0, 800763a <__multadd+0x5a>
 800762e:	4602      	mov	r2, r0
 8007630:	21ba      	movs	r1, #186	@ 0xba
 8007632:	4b0c      	ldr	r3, [pc, #48]	@ (8007664 <__multadd+0x84>)
 8007634:	480c      	ldr	r0, [pc, #48]	@ (8007668 <__multadd+0x88>)
 8007636:	f001 fd5b 	bl	80090f0 <__assert_func>
 800763a:	6922      	ldr	r2, [r4, #16]
 800763c:	f104 010c 	add.w	r1, r4, #12
 8007640:	3202      	adds	r2, #2
 8007642:	0092      	lsls	r2, r2, #2
 8007644:	300c      	adds	r0, #12
 8007646:	f7ff f806 	bl	8006656 <memcpy>
 800764a:	4621      	mov	r1, r4
 800764c:	4638      	mov	r0, r7
 800764e:	f7ff ffa5 	bl	800759c <_Bfree>
 8007652:	4644      	mov	r4, r8
 8007654:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007658:	3501      	adds	r5, #1
 800765a:	615e      	str	r6, [r3, #20]
 800765c:	6125      	str	r5, [r4, #16]
 800765e:	4620      	mov	r0, r4
 8007660:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007664:	08009d07 	.word	0x08009d07
 8007668:	08009d18 	.word	0x08009d18

0800766c <__s2b>:
 800766c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007670:	4615      	mov	r5, r2
 8007672:	2209      	movs	r2, #9
 8007674:	461f      	mov	r7, r3
 8007676:	3308      	adds	r3, #8
 8007678:	460c      	mov	r4, r1
 800767a:	fb93 f3f2 	sdiv	r3, r3, r2
 800767e:	4606      	mov	r6, r0
 8007680:	2201      	movs	r2, #1
 8007682:	2100      	movs	r1, #0
 8007684:	429a      	cmp	r2, r3
 8007686:	db09      	blt.n	800769c <__s2b+0x30>
 8007688:	4630      	mov	r0, r6
 800768a:	f7ff ff47 	bl	800751c <_Balloc>
 800768e:	b940      	cbnz	r0, 80076a2 <__s2b+0x36>
 8007690:	4602      	mov	r2, r0
 8007692:	21d3      	movs	r1, #211	@ 0xd3
 8007694:	4b18      	ldr	r3, [pc, #96]	@ (80076f8 <__s2b+0x8c>)
 8007696:	4819      	ldr	r0, [pc, #100]	@ (80076fc <__s2b+0x90>)
 8007698:	f001 fd2a 	bl	80090f0 <__assert_func>
 800769c:	0052      	lsls	r2, r2, #1
 800769e:	3101      	adds	r1, #1
 80076a0:	e7f0      	b.n	8007684 <__s2b+0x18>
 80076a2:	9b08      	ldr	r3, [sp, #32]
 80076a4:	2d09      	cmp	r5, #9
 80076a6:	6143      	str	r3, [r0, #20]
 80076a8:	f04f 0301 	mov.w	r3, #1
 80076ac:	6103      	str	r3, [r0, #16]
 80076ae:	dd16      	ble.n	80076de <__s2b+0x72>
 80076b0:	f104 0909 	add.w	r9, r4, #9
 80076b4:	46c8      	mov	r8, r9
 80076b6:	442c      	add	r4, r5
 80076b8:	f818 3b01 	ldrb.w	r3, [r8], #1
 80076bc:	4601      	mov	r1, r0
 80076be:	220a      	movs	r2, #10
 80076c0:	4630      	mov	r0, r6
 80076c2:	3b30      	subs	r3, #48	@ 0x30
 80076c4:	f7ff ff8c 	bl	80075e0 <__multadd>
 80076c8:	45a0      	cmp	r8, r4
 80076ca:	d1f5      	bne.n	80076b8 <__s2b+0x4c>
 80076cc:	f1a5 0408 	sub.w	r4, r5, #8
 80076d0:	444c      	add	r4, r9
 80076d2:	1b2d      	subs	r5, r5, r4
 80076d4:	1963      	adds	r3, r4, r5
 80076d6:	42bb      	cmp	r3, r7
 80076d8:	db04      	blt.n	80076e4 <__s2b+0x78>
 80076da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80076de:	2509      	movs	r5, #9
 80076e0:	340a      	adds	r4, #10
 80076e2:	e7f6      	b.n	80076d2 <__s2b+0x66>
 80076e4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80076e8:	4601      	mov	r1, r0
 80076ea:	220a      	movs	r2, #10
 80076ec:	4630      	mov	r0, r6
 80076ee:	3b30      	subs	r3, #48	@ 0x30
 80076f0:	f7ff ff76 	bl	80075e0 <__multadd>
 80076f4:	e7ee      	b.n	80076d4 <__s2b+0x68>
 80076f6:	bf00      	nop
 80076f8:	08009d07 	.word	0x08009d07
 80076fc:	08009d18 	.word	0x08009d18

08007700 <__hi0bits>:
 8007700:	4603      	mov	r3, r0
 8007702:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007706:	bf3a      	itte	cc
 8007708:	0403      	lslcc	r3, r0, #16
 800770a:	2010      	movcc	r0, #16
 800770c:	2000      	movcs	r0, #0
 800770e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007712:	bf3c      	itt	cc
 8007714:	021b      	lslcc	r3, r3, #8
 8007716:	3008      	addcc	r0, #8
 8007718:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800771c:	bf3c      	itt	cc
 800771e:	011b      	lslcc	r3, r3, #4
 8007720:	3004      	addcc	r0, #4
 8007722:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007726:	bf3c      	itt	cc
 8007728:	009b      	lslcc	r3, r3, #2
 800772a:	3002      	addcc	r0, #2
 800772c:	2b00      	cmp	r3, #0
 800772e:	db05      	blt.n	800773c <__hi0bits+0x3c>
 8007730:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007734:	f100 0001 	add.w	r0, r0, #1
 8007738:	bf08      	it	eq
 800773a:	2020      	moveq	r0, #32
 800773c:	4770      	bx	lr

0800773e <__lo0bits>:
 800773e:	6803      	ldr	r3, [r0, #0]
 8007740:	4602      	mov	r2, r0
 8007742:	f013 0007 	ands.w	r0, r3, #7
 8007746:	d00b      	beq.n	8007760 <__lo0bits+0x22>
 8007748:	07d9      	lsls	r1, r3, #31
 800774a:	d421      	bmi.n	8007790 <__lo0bits+0x52>
 800774c:	0798      	lsls	r0, r3, #30
 800774e:	bf49      	itett	mi
 8007750:	085b      	lsrmi	r3, r3, #1
 8007752:	089b      	lsrpl	r3, r3, #2
 8007754:	2001      	movmi	r0, #1
 8007756:	6013      	strmi	r3, [r2, #0]
 8007758:	bf5c      	itt	pl
 800775a:	2002      	movpl	r0, #2
 800775c:	6013      	strpl	r3, [r2, #0]
 800775e:	4770      	bx	lr
 8007760:	b299      	uxth	r1, r3
 8007762:	b909      	cbnz	r1, 8007768 <__lo0bits+0x2a>
 8007764:	2010      	movs	r0, #16
 8007766:	0c1b      	lsrs	r3, r3, #16
 8007768:	b2d9      	uxtb	r1, r3
 800776a:	b909      	cbnz	r1, 8007770 <__lo0bits+0x32>
 800776c:	3008      	adds	r0, #8
 800776e:	0a1b      	lsrs	r3, r3, #8
 8007770:	0719      	lsls	r1, r3, #28
 8007772:	bf04      	itt	eq
 8007774:	091b      	lsreq	r3, r3, #4
 8007776:	3004      	addeq	r0, #4
 8007778:	0799      	lsls	r1, r3, #30
 800777a:	bf04      	itt	eq
 800777c:	089b      	lsreq	r3, r3, #2
 800777e:	3002      	addeq	r0, #2
 8007780:	07d9      	lsls	r1, r3, #31
 8007782:	d403      	bmi.n	800778c <__lo0bits+0x4e>
 8007784:	085b      	lsrs	r3, r3, #1
 8007786:	f100 0001 	add.w	r0, r0, #1
 800778a:	d003      	beq.n	8007794 <__lo0bits+0x56>
 800778c:	6013      	str	r3, [r2, #0]
 800778e:	4770      	bx	lr
 8007790:	2000      	movs	r0, #0
 8007792:	4770      	bx	lr
 8007794:	2020      	movs	r0, #32
 8007796:	4770      	bx	lr

08007798 <__i2b>:
 8007798:	b510      	push	{r4, lr}
 800779a:	460c      	mov	r4, r1
 800779c:	2101      	movs	r1, #1
 800779e:	f7ff febd 	bl	800751c <_Balloc>
 80077a2:	4602      	mov	r2, r0
 80077a4:	b928      	cbnz	r0, 80077b2 <__i2b+0x1a>
 80077a6:	f240 1145 	movw	r1, #325	@ 0x145
 80077aa:	4b04      	ldr	r3, [pc, #16]	@ (80077bc <__i2b+0x24>)
 80077ac:	4804      	ldr	r0, [pc, #16]	@ (80077c0 <__i2b+0x28>)
 80077ae:	f001 fc9f 	bl	80090f0 <__assert_func>
 80077b2:	2301      	movs	r3, #1
 80077b4:	6144      	str	r4, [r0, #20]
 80077b6:	6103      	str	r3, [r0, #16]
 80077b8:	bd10      	pop	{r4, pc}
 80077ba:	bf00      	nop
 80077bc:	08009d07 	.word	0x08009d07
 80077c0:	08009d18 	.word	0x08009d18

080077c4 <__multiply>:
 80077c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077c8:	4614      	mov	r4, r2
 80077ca:	690a      	ldr	r2, [r1, #16]
 80077cc:	6923      	ldr	r3, [r4, #16]
 80077ce:	460f      	mov	r7, r1
 80077d0:	429a      	cmp	r2, r3
 80077d2:	bfa2      	ittt	ge
 80077d4:	4623      	movge	r3, r4
 80077d6:	460c      	movge	r4, r1
 80077d8:	461f      	movge	r7, r3
 80077da:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80077de:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80077e2:	68a3      	ldr	r3, [r4, #8]
 80077e4:	6861      	ldr	r1, [r4, #4]
 80077e6:	eb0a 0609 	add.w	r6, sl, r9
 80077ea:	42b3      	cmp	r3, r6
 80077ec:	b085      	sub	sp, #20
 80077ee:	bfb8      	it	lt
 80077f0:	3101      	addlt	r1, #1
 80077f2:	f7ff fe93 	bl	800751c <_Balloc>
 80077f6:	b930      	cbnz	r0, 8007806 <__multiply+0x42>
 80077f8:	4602      	mov	r2, r0
 80077fa:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80077fe:	4b43      	ldr	r3, [pc, #268]	@ (800790c <__multiply+0x148>)
 8007800:	4843      	ldr	r0, [pc, #268]	@ (8007910 <__multiply+0x14c>)
 8007802:	f001 fc75 	bl	80090f0 <__assert_func>
 8007806:	f100 0514 	add.w	r5, r0, #20
 800780a:	462b      	mov	r3, r5
 800780c:	2200      	movs	r2, #0
 800780e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007812:	4543      	cmp	r3, r8
 8007814:	d321      	bcc.n	800785a <__multiply+0x96>
 8007816:	f107 0114 	add.w	r1, r7, #20
 800781a:	f104 0214 	add.w	r2, r4, #20
 800781e:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8007822:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8007826:	9302      	str	r3, [sp, #8]
 8007828:	1b13      	subs	r3, r2, r4
 800782a:	3b15      	subs	r3, #21
 800782c:	f023 0303 	bic.w	r3, r3, #3
 8007830:	3304      	adds	r3, #4
 8007832:	f104 0715 	add.w	r7, r4, #21
 8007836:	42ba      	cmp	r2, r7
 8007838:	bf38      	it	cc
 800783a:	2304      	movcc	r3, #4
 800783c:	9301      	str	r3, [sp, #4]
 800783e:	9b02      	ldr	r3, [sp, #8]
 8007840:	9103      	str	r1, [sp, #12]
 8007842:	428b      	cmp	r3, r1
 8007844:	d80c      	bhi.n	8007860 <__multiply+0x9c>
 8007846:	2e00      	cmp	r6, #0
 8007848:	dd03      	ble.n	8007852 <__multiply+0x8e>
 800784a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800784e:	2b00      	cmp	r3, #0
 8007850:	d05a      	beq.n	8007908 <__multiply+0x144>
 8007852:	6106      	str	r6, [r0, #16]
 8007854:	b005      	add	sp, #20
 8007856:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800785a:	f843 2b04 	str.w	r2, [r3], #4
 800785e:	e7d8      	b.n	8007812 <__multiply+0x4e>
 8007860:	f8b1 a000 	ldrh.w	sl, [r1]
 8007864:	f1ba 0f00 	cmp.w	sl, #0
 8007868:	d023      	beq.n	80078b2 <__multiply+0xee>
 800786a:	46a9      	mov	r9, r5
 800786c:	f04f 0c00 	mov.w	ip, #0
 8007870:	f104 0e14 	add.w	lr, r4, #20
 8007874:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007878:	f8d9 3000 	ldr.w	r3, [r9]
 800787c:	fa1f fb87 	uxth.w	fp, r7
 8007880:	b29b      	uxth	r3, r3
 8007882:	fb0a 330b 	mla	r3, sl, fp, r3
 8007886:	4463      	add	r3, ip
 8007888:	f8d9 c000 	ldr.w	ip, [r9]
 800788c:	0c3f      	lsrs	r7, r7, #16
 800788e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8007892:	fb0a c707 	mla	r7, sl, r7, ip
 8007896:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800789a:	b29b      	uxth	r3, r3
 800789c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80078a0:	4572      	cmp	r2, lr
 80078a2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80078a6:	f849 3b04 	str.w	r3, [r9], #4
 80078aa:	d8e3      	bhi.n	8007874 <__multiply+0xb0>
 80078ac:	9b01      	ldr	r3, [sp, #4]
 80078ae:	f845 c003 	str.w	ip, [r5, r3]
 80078b2:	9b03      	ldr	r3, [sp, #12]
 80078b4:	3104      	adds	r1, #4
 80078b6:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80078ba:	f1b9 0f00 	cmp.w	r9, #0
 80078be:	d021      	beq.n	8007904 <__multiply+0x140>
 80078c0:	46ae      	mov	lr, r5
 80078c2:	f04f 0a00 	mov.w	sl, #0
 80078c6:	682b      	ldr	r3, [r5, #0]
 80078c8:	f104 0c14 	add.w	ip, r4, #20
 80078cc:	f8bc b000 	ldrh.w	fp, [ip]
 80078d0:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80078d4:	b29b      	uxth	r3, r3
 80078d6:	fb09 770b 	mla	r7, r9, fp, r7
 80078da:	4457      	add	r7, sl
 80078dc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80078e0:	f84e 3b04 	str.w	r3, [lr], #4
 80078e4:	f85c 3b04 	ldr.w	r3, [ip], #4
 80078e8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80078ec:	f8be 3000 	ldrh.w	r3, [lr]
 80078f0:	4562      	cmp	r2, ip
 80078f2:	fb09 330a 	mla	r3, r9, sl, r3
 80078f6:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80078fa:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80078fe:	d8e5      	bhi.n	80078cc <__multiply+0x108>
 8007900:	9f01      	ldr	r7, [sp, #4]
 8007902:	51eb      	str	r3, [r5, r7]
 8007904:	3504      	adds	r5, #4
 8007906:	e79a      	b.n	800783e <__multiply+0x7a>
 8007908:	3e01      	subs	r6, #1
 800790a:	e79c      	b.n	8007846 <__multiply+0x82>
 800790c:	08009d07 	.word	0x08009d07
 8007910:	08009d18 	.word	0x08009d18

08007914 <__pow5mult>:
 8007914:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007918:	4615      	mov	r5, r2
 800791a:	f012 0203 	ands.w	r2, r2, #3
 800791e:	4607      	mov	r7, r0
 8007920:	460e      	mov	r6, r1
 8007922:	d007      	beq.n	8007934 <__pow5mult+0x20>
 8007924:	4c25      	ldr	r4, [pc, #148]	@ (80079bc <__pow5mult+0xa8>)
 8007926:	3a01      	subs	r2, #1
 8007928:	2300      	movs	r3, #0
 800792a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800792e:	f7ff fe57 	bl	80075e0 <__multadd>
 8007932:	4606      	mov	r6, r0
 8007934:	10ad      	asrs	r5, r5, #2
 8007936:	d03d      	beq.n	80079b4 <__pow5mult+0xa0>
 8007938:	69fc      	ldr	r4, [r7, #28]
 800793a:	b97c      	cbnz	r4, 800795c <__pow5mult+0x48>
 800793c:	2010      	movs	r0, #16
 800793e:	f7ff fd37 	bl	80073b0 <malloc>
 8007942:	4602      	mov	r2, r0
 8007944:	61f8      	str	r0, [r7, #28]
 8007946:	b928      	cbnz	r0, 8007954 <__pow5mult+0x40>
 8007948:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800794c:	4b1c      	ldr	r3, [pc, #112]	@ (80079c0 <__pow5mult+0xac>)
 800794e:	481d      	ldr	r0, [pc, #116]	@ (80079c4 <__pow5mult+0xb0>)
 8007950:	f001 fbce 	bl	80090f0 <__assert_func>
 8007954:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007958:	6004      	str	r4, [r0, #0]
 800795a:	60c4      	str	r4, [r0, #12]
 800795c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007960:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007964:	b94c      	cbnz	r4, 800797a <__pow5mult+0x66>
 8007966:	f240 2171 	movw	r1, #625	@ 0x271
 800796a:	4638      	mov	r0, r7
 800796c:	f7ff ff14 	bl	8007798 <__i2b>
 8007970:	2300      	movs	r3, #0
 8007972:	4604      	mov	r4, r0
 8007974:	f8c8 0008 	str.w	r0, [r8, #8]
 8007978:	6003      	str	r3, [r0, #0]
 800797a:	f04f 0900 	mov.w	r9, #0
 800797e:	07eb      	lsls	r3, r5, #31
 8007980:	d50a      	bpl.n	8007998 <__pow5mult+0x84>
 8007982:	4631      	mov	r1, r6
 8007984:	4622      	mov	r2, r4
 8007986:	4638      	mov	r0, r7
 8007988:	f7ff ff1c 	bl	80077c4 <__multiply>
 800798c:	4680      	mov	r8, r0
 800798e:	4631      	mov	r1, r6
 8007990:	4638      	mov	r0, r7
 8007992:	f7ff fe03 	bl	800759c <_Bfree>
 8007996:	4646      	mov	r6, r8
 8007998:	106d      	asrs	r5, r5, #1
 800799a:	d00b      	beq.n	80079b4 <__pow5mult+0xa0>
 800799c:	6820      	ldr	r0, [r4, #0]
 800799e:	b938      	cbnz	r0, 80079b0 <__pow5mult+0x9c>
 80079a0:	4622      	mov	r2, r4
 80079a2:	4621      	mov	r1, r4
 80079a4:	4638      	mov	r0, r7
 80079a6:	f7ff ff0d 	bl	80077c4 <__multiply>
 80079aa:	6020      	str	r0, [r4, #0]
 80079ac:	f8c0 9000 	str.w	r9, [r0]
 80079b0:	4604      	mov	r4, r0
 80079b2:	e7e4      	b.n	800797e <__pow5mult+0x6a>
 80079b4:	4630      	mov	r0, r6
 80079b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80079ba:	bf00      	nop
 80079bc:	08009d74 	.word	0x08009d74
 80079c0:	08009c98 	.word	0x08009c98
 80079c4:	08009d18 	.word	0x08009d18

080079c8 <__lshift>:
 80079c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80079cc:	460c      	mov	r4, r1
 80079ce:	4607      	mov	r7, r0
 80079d0:	4691      	mov	r9, r2
 80079d2:	6923      	ldr	r3, [r4, #16]
 80079d4:	6849      	ldr	r1, [r1, #4]
 80079d6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80079da:	68a3      	ldr	r3, [r4, #8]
 80079dc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80079e0:	f108 0601 	add.w	r6, r8, #1
 80079e4:	42b3      	cmp	r3, r6
 80079e6:	db0b      	blt.n	8007a00 <__lshift+0x38>
 80079e8:	4638      	mov	r0, r7
 80079ea:	f7ff fd97 	bl	800751c <_Balloc>
 80079ee:	4605      	mov	r5, r0
 80079f0:	b948      	cbnz	r0, 8007a06 <__lshift+0x3e>
 80079f2:	4602      	mov	r2, r0
 80079f4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80079f8:	4b27      	ldr	r3, [pc, #156]	@ (8007a98 <__lshift+0xd0>)
 80079fa:	4828      	ldr	r0, [pc, #160]	@ (8007a9c <__lshift+0xd4>)
 80079fc:	f001 fb78 	bl	80090f0 <__assert_func>
 8007a00:	3101      	adds	r1, #1
 8007a02:	005b      	lsls	r3, r3, #1
 8007a04:	e7ee      	b.n	80079e4 <__lshift+0x1c>
 8007a06:	2300      	movs	r3, #0
 8007a08:	f100 0114 	add.w	r1, r0, #20
 8007a0c:	f100 0210 	add.w	r2, r0, #16
 8007a10:	4618      	mov	r0, r3
 8007a12:	4553      	cmp	r3, sl
 8007a14:	db33      	blt.n	8007a7e <__lshift+0xb6>
 8007a16:	6920      	ldr	r0, [r4, #16]
 8007a18:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007a1c:	f104 0314 	add.w	r3, r4, #20
 8007a20:	f019 091f 	ands.w	r9, r9, #31
 8007a24:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007a28:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007a2c:	d02b      	beq.n	8007a86 <__lshift+0xbe>
 8007a2e:	468a      	mov	sl, r1
 8007a30:	2200      	movs	r2, #0
 8007a32:	f1c9 0e20 	rsb	lr, r9, #32
 8007a36:	6818      	ldr	r0, [r3, #0]
 8007a38:	fa00 f009 	lsl.w	r0, r0, r9
 8007a3c:	4310      	orrs	r0, r2
 8007a3e:	f84a 0b04 	str.w	r0, [sl], #4
 8007a42:	f853 2b04 	ldr.w	r2, [r3], #4
 8007a46:	459c      	cmp	ip, r3
 8007a48:	fa22 f20e 	lsr.w	r2, r2, lr
 8007a4c:	d8f3      	bhi.n	8007a36 <__lshift+0x6e>
 8007a4e:	ebac 0304 	sub.w	r3, ip, r4
 8007a52:	3b15      	subs	r3, #21
 8007a54:	f023 0303 	bic.w	r3, r3, #3
 8007a58:	3304      	adds	r3, #4
 8007a5a:	f104 0015 	add.w	r0, r4, #21
 8007a5e:	4584      	cmp	ip, r0
 8007a60:	bf38      	it	cc
 8007a62:	2304      	movcc	r3, #4
 8007a64:	50ca      	str	r2, [r1, r3]
 8007a66:	b10a      	cbz	r2, 8007a6c <__lshift+0xa4>
 8007a68:	f108 0602 	add.w	r6, r8, #2
 8007a6c:	3e01      	subs	r6, #1
 8007a6e:	4638      	mov	r0, r7
 8007a70:	4621      	mov	r1, r4
 8007a72:	612e      	str	r6, [r5, #16]
 8007a74:	f7ff fd92 	bl	800759c <_Bfree>
 8007a78:	4628      	mov	r0, r5
 8007a7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a7e:	f842 0f04 	str.w	r0, [r2, #4]!
 8007a82:	3301      	adds	r3, #1
 8007a84:	e7c5      	b.n	8007a12 <__lshift+0x4a>
 8007a86:	3904      	subs	r1, #4
 8007a88:	f853 2b04 	ldr.w	r2, [r3], #4
 8007a8c:	459c      	cmp	ip, r3
 8007a8e:	f841 2f04 	str.w	r2, [r1, #4]!
 8007a92:	d8f9      	bhi.n	8007a88 <__lshift+0xc0>
 8007a94:	e7ea      	b.n	8007a6c <__lshift+0xa4>
 8007a96:	bf00      	nop
 8007a98:	08009d07 	.word	0x08009d07
 8007a9c:	08009d18 	.word	0x08009d18

08007aa0 <__mcmp>:
 8007aa0:	4603      	mov	r3, r0
 8007aa2:	690a      	ldr	r2, [r1, #16]
 8007aa4:	6900      	ldr	r0, [r0, #16]
 8007aa6:	b530      	push	{r4, r5, lr}
 8007aa8:	1a80      	subs	r0, r0, r2
 8007aaa:	d10e      	bne.n	8007aca <__mcmp+0x2a>
 8007aac:	3314      	adds	r3, #20
 8007aae:	3114      	adds	r1, #20
 8007ab0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007ab4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007ab8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007abc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007ac0:	4295      	cmp	r5, r2
 8007ac2:	d003      	beq.n	8007acc <__mcmp+0x2c>
 8007ac4:	d205      	bcs.n	8007ad2 <__mcmp+0x32>
 8007ac6:	f04f 30ff 	mov.w	r0, #4294967295
 8007aca:	bd30      	pop	{r4, r5, pc}
 8007acc:	42a3      	cmp	r3, r4
 8007ace:	d3f3      	bcc.n	8007ab8 <__mcmp+0x18>
 8007ad0:	e7fb      	b.n	8007aca <__mcmp+0x2a>
 8007ad2:	2001      	movs	r0, #1
 8007ad4:	e7f9      	b.n	8007aca <__mcmp+0x2a>
	...

08007ad8 <__mdiff>:
 8007ad8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007adc:	4689      	mov	r9, r1
 8007ade:	4606      	mov	r6, r0
 8007ae0:	4611      	mov	r1, r2
 8007ae2:	4648      	mov	r0, r9
 8007ae4:	4614      	mov	r4, r2
 8007ae6:	f7ff ffdb 	bl	8007aa0 <__mcmp>
 8007aea:	1e05      	subs	r5, r0, #0
 8007aec:	d112      	bne.n	8007b14 <__mdiff+0x3c>
 8007aee:	4629      	mov	r1, r5
 8007af0:	4630      	mov	r0, r6
 8007af2:	f7ff fd13 	bl	800751c <_Balloc>
 8007af6:	4602      	mov	r2, r0
 8007af8:	b928      	cbnz	r0, 8007b06 <__mdiff+0x2e>
 8007afa:	f240 2137 	movw	r1, #567	@ 0x237
 8007afe:	4b3e      	ldr	r3, [pc, #248]	@ (8007bf8 <__mdiff+0x120>)
 8007b00:	483e      	ldr	r0, [pc, #248]	@ (8007bfc <__mdiff+0x124>)
 8007b02:	f001 faf5 	bl	80090f0 <__assert_func>
 8007b06:	2301      	movs	r3, #1
 8007b08:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007b0c:	4610      	mov	r0, r2
 8007b0e:	b003      	add	sp, #12
 8007b10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b14:	bfbc      	itt	lt
 8007b16:	464b      	movlt	r3, r9
 8007b18:	46a1      	movlt	r9, r4
 8007b1a:	4630      	mov	r0, r6
 8007b1c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007b20:	bfba      	itte	lt
 8007b22:	461c      	movlt	r4, r3
 8007b24:	2501      	movlt	r5, #1
 8007b26:	2500      	movge	r5, #0
 8007b28:	f7ff fcf8 	bl	800751c <_Balloc>
 8007b2c:	4602      	mov	r2, r0
 8007b2e:	b918      	cbnz	r0, 8007b38 <__mdiff+0x60>
 8007b30:	f240 2145 	movw	r1, #581	@ 0x245
 8007b34:	4b30      	ldr	r3, [pc, #192]	@ (8007bf8 <__mdiff+0x120>)
 8007b36:	e7e3      	b.n	8007b00 <__mdiff+0x28>
 8007b38:	f100 0b14 	add.w	fp, r0, #20
 8007b3c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007b40:	f109 0310 	add.w	r3, r9, #16
 8007b44:	60c5      	str	r5, [r0, #12]
 8007b46:	f04f 0c00 	mov.w	ip, #0
 8007b4a:	f109 0514 	add.w	r5, r9, #20
 8007b4e:	46d9      	mov	r9, fp
 8007b50:	6926      	ldr	r6, [r4, #16]
 8007b52:	f104 0e14 	add.w	lr, r4, #20
 8007b56:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007b5a:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007b5e:	9301      	str	r3, [sp, #4]
 8007b60:	9b01      	ldr	r3, [sp, #4]
 8007b62:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007b66:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007b6a:	b281      	uxth	r1, r0
 8007b6c:	9301      	str	r3, [sp, #4]
 8007b6e:	fa1f f38a 	uxth.w	r3, sl
 8007b72:	1a5b      	subs	r3, r3, r1
 8007b74:	0c00      	lsrs	r0, r0, #16
 8007b76:	4463      	add	r3, ip
 8007b78:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007b7c:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8007b80:	b29b      	uxth	r3, r3
 8007b82:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007b86:	4576      	cmp	r6, lr
 8007b88:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007b8c:	f849 3b04 	str.w	r3, [r9], #4
 8007b90:	d8e6      	bhi.n	8007b60 <__mdiff+0x88>
 8007b92:	1b33      	subs	r3, r6, r4
 8007b94:	3b15      	subs	r3, #21
 8007b96:	f023 0303 	bic.w	r3, r3, #3
 8007b9a:	3415      	adds	r4, #21
 8007b9c:	3304      	adds	r3, #4
 8007b9e:	42a6      	cmp	r6, r4
 8007ba0:	bf38      	it	cc
 8007ba2:	2304      	movcc	r3, #4
 8007ba4:	441d      	add	r5, r3
 8007ba6:	445b      	add	r3, fp
 8007ba8:	461e      	mov	r6, r3
 8007baa:	462c      	mov	r4, r5
 8007bac:	4544      	cmp	r4, r8
 8007bae:	d30e      	bcc.n	8007bce <__mdiff+0xf6>
 8007bb0:	f108 0103 	add.w	r1, r8, #3
 8007bb4:	1b49      	subs	r1, r1, r5
 8007bb6:	f021 0103 	bic.w	r1, r1, #3
 8007bba:	3d03      	subs	r5, #3
 8007bbc:	45a8      	cmp	r8, r5
 8007bbe:	bf38      	it	cc
 8007bc0:	2100      	movcc	r1, #0
 8007bc2:	440b      	add	r3, r1
 8007bc4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007bc8:	b199      	cbz	r1, 8007bf2 <__mdiff+0x11a>
 8007bca:	6117      	str	r7, [r2, #16]
 8007bcc:	e79e      	b.n	8007b0c <__mdiff+0x34>
 8007bce:	46e6      	mov	lr, ip
 8007bd0:	f854 1b04 	ldr.w	r1, [r4], #4
 8007bd4:	fa1f fc81 	uxth.w	ip, r1
 8007bd8:	44f4      	add	ip, lr
 8007bda:	0c08      	lsrs	r0, r1, #16
 8007bdc:	4471      	add	r1, lr
 8007bde:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8007be2:	b289      	uxth	r1, r1
 8007be4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007be8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007bec:	f846 1b04 	str.w	r1, [r6], #4
 8007bf0:	e7dc      	b.n	8007bac <__mdiff+0xd4>
 8007bf2:	3f01      	subs	r7, #1
 8007bf4:	e7e6      	b.n	8007bc4 <__mdiff+0xec>
 8007bf6:	bf00      	nop
 8007bf8:	08009d07 	.word	0x08009d07
 8007bfc:	08009d18 	.word	0x08009d18

08007c00 <__ulp>:
 8007c00:	4b0e      	ldr	r3, [pc, #56]	@ (8007c3c <__ulp+0x3c>)
 8007c02:	400b      	ands	r3, r1
 8007c04:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	dc08      	bgt.n	8007c1e <__ulp+0x1e>
 8007c0c:	425b      	negs	r3, r3
 8007c0e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8007c12:	ea4f 5223 	mov.w	r2, r3, asr #20
 8007c16:	da04      	bge.n	8007c22 <__ulp+0x22>
 8007c18:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8007c1c:	4113      	asrs	r3, r2
 8007c1e:	2200      	movs	r2, #0
 8007c20:	e008      	b.n	8007c34 <__ulp+0x34>
 8007c22:	f1a2 0314 	sub.w	r3, r2, #20
 8007c26:	2b1e      	cmp	r3, #30
 8007c28:	bfd6      	itet	le
 8007c2a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8007c2e:	2201      	movgt	r2, #1
 8007c30:	40da      	lsrle	r2, r3
 8007c32:	2300      	movs	r3, #0
 8007c34:	4619      	mov	r1, r3
 8007c36:	4610      	mov	r0, r2
 8007c38:	4770      	bx	lr
 8007c3a:	bf00      	nop
 8007c3c:	7ff00000 	.word	0x7ff00000

08007c40 <__b2d>:
 8007c40:	6902      	ldr	r2, [r0, #16]
 8007c42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c44:	f100 0614 	add.w	r6, r0, #20
 8007c48:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 8007c4c:	f852 4c04 	ldr.w	r4, [r2, #-4]
 8007c50:	4f1e      	ldr	r7, [pc, #120]	@ (8007ccc <__b2d+0x8c>)
 8007c52:	4620      	mov	r0, r4
 8007c54:	f7ff fd54 	bl	8007700 <__hi0bits>
 8007c58:	4603      	mov	r3, r0
 8007c5a:	f1c0 0020 	rsb	r0, r0, #32
 8007c5e:	2b0a      	cmp	r3, #10
 8007c60:	f1a2 0504 	sub.w	r5, r2, #4
 8007c64:	6008      	str	r0, [r1, #0]
 8007c66:	dc12      	bgt.n	8007c8e <__b2d+0x4e>
 8007c68:	42ae      	cmp	r6, r5
 8007c6a:	bf2c      	ite	cs
 8007c6c:	2200      	movcs	r2, #0
 8007c6e:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8007c72:	f1c3 0c0b 	rsb	ip, r3, #11
 8007c76:	3315      	adds	r3, #21
 8007c78:	fa24 fe0c 	lsr.w	lr, r4, ip
 8007c7c:	fa04 f303 	lsl.w	r3, r4, r3
 8007c80:	fa22 f20c 	lsr.w	r2, r2, ip
 8007c84:	ea4e 0107 	orr.w	r1, lr, r7
 8007c88:	431a      	orrs	r2, r3
 8007c8a:	4610      	mov	r0, r2
 8007c8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007c8e:	42ae      	cmp	r6, r5
 8007c90:	bf36      	itet	cc
 8007c92:	f1a2 0508 	subcc.w	r5, r2, #8
 8007c96:	2200      	movcs	r2, #0
 8007c98:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8007c9c:	3b0b      	subs	r3, #11
 8007c9e:	d012      	beq.n	8007cc6 <__b2d+0x86>
 8007ca0:	f1c3 0720 	rsb	r7, r3, #32
 8007ca4:	fa22 f107 	lsr.w	r1, r2, r7
 8007ca8:	409c      	lsls	r4, r3
 8007caa:	430c      	orrs	r4, r1
 8007cac:	42b5      	cmp	r5, r6
 8007cae:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 8007cb2:	bf94      	ite	ls
 8007cb4:	2400      	movls	r4, #0
 8007cb6:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 8007cba:	409a      	lsls	r2, r3
 8007cbc:	40fc      	lsrs	r4, r7
 8007cbe:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8007cc2:	4322      	orrs	r2, r4
 8007cc4:	e7e1      	b.n	8007c8a <__b2d+0x4a>
 8007cc6:	ea44 0107 	orr.w	r1, r4, r7
 8007cca:	e7de      	b.n	8007c8a <__b2d+0x4a>
 8007ccc:	3ff00000 	.word	0x3ff00000

08007cd0 <__d2b>:
 8007cd0:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8007cd4:	2101      	movs	r1, #1
 8007cd6:	4690      	mov	r8, r2
 8007cd8:	4699      	mov	r9, r3
 8007cda:	9e08      	ldr	r6, [sp, #32]
 8007cdc:	f7ff fc1e 	bl	800751c <_Balloc>
 8007ce0:	4604      	mov	r4, r0
 8007ce2:	b930      	cbnz	r0, 8007cf2 <__d2b+0x22>
 8007ce4:	4602      	mov	r2, r0
 8007ce6:	f240 310f 	movw	r1, #783	@ 0x30f
 8007cea:	4b23      	ldr	r3, [pc, #140]	@ (8007d78 <__d2b+0xa8>)
 8007cec:	4823      	ldr	r0, [pc, #140]	@ (8007d7c <__d2b+0xac>)
 8007cee:	f001 f9ff 	bl	80090f0 <__assert_func>
 8007cf2:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007cf6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007cfa:	b10d      	cbz	r5, 8007d00 <__d2b+0x30>
 8007cfc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007d00:	9301      	str	r3, [sp, #4]
 8007d02:	f1b8 0300 	subs.w	r3, r8, #0
 8007d06:	d024      	beq.n	8007d52 <__d2b+0x82>
 8007d08:	4668      	mov	r0, sp
 8007d0a:	9300      	str	r3, [sp, #0]
 8007d0c:	f7ff fd17 	bl	800773e <__lo0bits>
 8007d10:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007d14:	b1d8      	cbz	r0, 8007d4e <__d2b+0x7e>
 8007d16:	f1c0 0320 	rsb	r3, r0, #32
 8007d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8007d1e:	430b      	orrs	r3, r1
 8007d20:	40c2      	lsrs	r2, r0
 8007d22:	6163      	str	r3, [r4, #20]
 8007d24:	9201      	str	r2, [sp, #4]
 8007d26:	9b01      	ldr	r3, [sp, #4]
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	bf0c      	ite	eq
 8007d2c:	2201      	moveq	r2, #1
 8007d2e:	2202      	movne	r2, #2
 8007d30:	61a3      	str	r3, [r4, #24]
 8007d32:	6122      	str	r2, [r4, #16]
 8007d34:	b1ad      	cbz	r5, 8007d62 <__d2b+0x92>
 8007d36:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007d3a:	4405      	add	r5, r0
 8007d3c:	6035      	str	r5, [r6, #0]
 8007d3e:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007d42:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007d44:	6018      	str	r0, [r3, #0]
 8007d46:	4620      	mov	r0, r4
 8007d48:	b002      	add	sp, #8
 8007d4a:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8007d4e:	6161      	str	r1, [r4, #20]
 8007d50:	e7e9      	b.n	8007d26 <__d2b+0x56>
 8007d52:	a801      	add	r0, sp, #4
 8007d54:	f7ff fcf3 	bl	800773e <__lo0bits>
 8007d58:	9b01      	ldr	r3, [sp, #4]
 8007d5a:	2201      	movs	r2, #1
 8007d5c:	6163      	str	r3, [r4, #20]
 8007d5e:	3020      	adds	r0, #32
 8007d60:	e7e7      	b.n	8007d32 <__d2b+0x62>
 8007d62:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8007d66:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007d6a:	6030      	str	r0, [r6, #0]
 8007d6c:	6918      	ldr	r0, [r3, #16]
 8007d6e:	f7ff fcc7 	bl	8007700 <__hi0bits>
 8007d72:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007d76:	e7e4      	b.n	8007d42 <__d2b+0x72>
 8007d78:	08009d07 	.word	0x08009d07
 8007d7c:	08009d18 	.word	0x08009d18

08007d80 <__ratio>:
 8007d80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d84:	b085      	sub	sp, #20
 8007d86:	e9cd 1000 	strd	r1, r0, [sp]
 8007d8a:	a902      	add	r1, sp, #8
 8007d8c:	f7ff ff58 	bl	8007c40 <__b2d>
 8007d90:	468b      	mov	fp, r1
 8007d92:	4606      	mov	r6, r0
 8007d94:	460f      	mov	r7, r1
 8007d96:	9800      	ldr	r0, [sp, #0]
 8007d98:	a903      	add	r1, sp, #12
 8007d9a:	f7ff ff51 	bl	8007c40 <__b2d>
 8007d9e:	460d      	mov	r5, r1
 8007da0:	9b01      	ldr	r3, [sp, #4]
 8007da2:	4689      	mov	r9, r1
 8007da4:	6919      	ldr	r1, [r3, #16]
 8007da6:	9b00      	ldr	r3, [sp, #0]
 8007da8:	4604      	mov	r4, r0
 8007daa:	691b      	ldr	r3, [r3, #16]
 8007dac:	4630      	mov	r0, r6
 8007dae:	1ac9      	subs	r1, r1, r3
 8007db0:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8007db4:	1a9b      	subs	r3, r3, r2
 8007db6:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	bfcd      	iteet	gt
 8007dbe:	463a      	movgt	r2, r7
 8007dc0:	462a      	movle	r2, r5
 8007dc2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8007dc6:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8007dca:	bfd8      	it	le
 8007dcc:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8007dd0:	464b      	mov	r3, r9
 8007dd2:	4622      	mov	r2, r4
 8007dd4:	4659      	mov	r1, fp
 8007dd6:	f7f8 fca9 	bl	800072c <__aeabi_ddiv>
 8007dda:	b005      	add	sp, #20
 8007ddc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007de0 <__copybits>:
 8007de0:	3901      	subs	r1, #1
 8007de2:	b570      	push	{r4, r5, r6, lr}
 8007de4:	1149      	asrs	r1, r1, #5
 8007de6:	6914      	ldr	r4, [r2, #16]
 8007de8:	3101      	adds	r1, #1
 8007dea:	f102 0314 	add.w	r3, r2, #20
 8007dee:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007df2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007df6:	1f05      	subs	r5, r0, #4
 8007df8:	42a3      	cmp	r3, r4
 8007dfa:	d30c      	bcc.n	8007e16 <__copybits+0x36>
 8007dfc:	1aa3      	subs	r3, r4, r2
 8007dfe:	3b11      	subs	r3, #17
 8007e00:	f023 0303 	bic.w	r3, r3, #3
 8007e04:	3211      	adds	r2, #17
 8007e06:	42a2      	cmp	r2, r4
 8007e08:	bf88      	it	hi
 8007e0a:	2300      	movhi	r3, #0
 8007e0c:	4418      	add	r0, r3
 8007e0e:	2300      	movs	r3, #0
 8007e10:	4288      	cmp	r0, r1
 8007e12:	d305      	bcc.n	8007e20 <__copybits+0x40>
 8007e14:	bd70      	pop	{r4, r5, r6, pc}
 8007e16:	f853 6b04 	ldr.w	r6, [r3], #4
 8007e1a:	f845 6f04 	str.w	r6, [r5, #4]!
 8007e1e:	e7eb      	b.n	8007df8 <__copybits+0x18>
 8007e20:	f840 3b04 	str.w	r3, [r0], #4
 8007e24:	e7f4      	b.n	8007e10 <__copybits+0x30>

08007e26 <__any_on>:
 8007e26:	f100 0214 	add.w	r2, r0, #20
 8007e2a:	6900      	ldr	r0, [r0, #16]
 8007e2c:	114b      	asrs	r3, r1, #5
 8007e2e:	4298      	cmp	r0, r3
 8007e30:	b510      	push	{r4, lr}
 8007e32:	db11      	blt.n	8007e58 <__any_on+0x32>
 8007e34:	dd0a      	ble.n	8007e4c <__any_on+0x26>
 8007e36:	f011 011f 	ands.w	r1, r1, #31
 8007e3a:	d007      	beq.n	8007e4c <__any_on+0x26>
 8007e3c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8007e40:	fa24 f001 	lsr.w	r0, r4, r1
 8007e44:	fa00 f101 	lsl.w	r1, r0, r1
 8007e48:	428c      	cmp	r4, r1
 8007e4a:	d10b      	bne.n	8007e64 <__any_on+0x3e>
 8007e4c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007e50:	4293      	cmp	r3, r2
 8007e52:	d803      	bhi.n	8007e5c <__any_on+0x36>
 8007e54:	2000      	movs	r0, #0
 8007e56:	bd10      	pop	{r4, pc}
 8007e58:	4603      	mov	r3, r0
 8007e5a:	e7f7      	b.n	8007e4c <__any_on+0x26>
 8007e5c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007e60:	2900      	cmp	r1, #0
 8007e62:	d0f5      	beq.n	8007e50 <__any_on+0x2a>
 8007e64:	2001      	movs	r0, #1
 8007e66:	e7f6      	b.n	8007e56 <__any_on+0x30>

08007e68 <sulp>:
 8007e68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e6c:	460f      	mov	r7, r1
 8007e6e:	4690      	mov	r8, r2
 8007e70:	f7ff fec6 	bl	8007c00 <__ulp>
 8007e74:	4604      	mov	r4, r0
 8007e76:	460d      	mov	r5, r1
 8007e78:	f1b8 0f00 	cmp.w	r8, #0
 8007e7c:	d011      	beq.n	8007ea2 <sulp+0x3a>
 8007e7e:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8007e82:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	dd0b      	ble.n	8007ea2 <sulp+0x3a>
 8007e8a:	2400      	movs	r4, #0
 8007e8c:	051b      	lsls	r3, r3, #20
 8007e8e:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8007e92:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8007e96:	4622      	mov	r2, r4
 8007e98:	462b      	mov	r3, r5
 8007e9a:	f7f8 fb1d 	bl	80004d8 <__aeabi_dmul>
 8007e9e:	4604      	mov	r4, r0
 8007ea0:	460d      	mov	r5, r1
 8007ea2:	4620      	mov	r0, r4
 8007ea4:	4629      	mov	r1, r5
 8007ea6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007eaa:	0000      	movs	r0, r0
 8007eac:	0000      	movs	r0, r0
	...

08007eb0 <_strtod_l>:
 8007eb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007eb4:	b09f      	sub	sp, #124	@ 0x7c
 8007eb6:	9217      	str	r2, [sp, #92]	@ 0x5c
 8007eb8:	2200      	movs	r2, #0
 8007eba:	460c      	mov	r4, r1
 8007ebc:	921a      	str	r2, [sp, #104]	@ 0x68
 8007ebe:	f04f 0a00 	mov.w	sl, #0
 8007ec2:	f04f 0b00 	mov.w	fp, #0
 8007ec6:	460a      	mov	r2, r1
 8007ec8:	9005      	str	r0, [sp, #20]
 8007eca:	9219      	str	r2, [sp, #100]	@ 0x64
 8007ecc:	7811      	ldrb	r1, [r2, #0]
 8007ece:	292b      	cmp	r1, #43	@ 0x2b
 8007ed0:	d048      	beq.n	8007f64 <_strtod_l+0xb4>
 8007ed2:	d836      	bhi.n	8007f42 <_strtod_l+0x92>
 8007ed4:	290d      	cmp	r1, #13
 8007ed6:	d830      	bhi.n	8007f3a <_strtod_l+0x8a>
 8007ed8:	2908      	cmp	r1, #8
 8007eda:	d830      	bhi.n	8007f3e <_strtod_l+0x8e>
 8007edc:	2900      	cmp	r1, #0
 8007ede:	d039      	beq.n	8007f54 <_strtod_l+0xa4>
 8007ee0:	2200      	movs	r2, #0
 8007ee2:	920b      	str	r2, [sp, #44]	@ 0x2c
 8007ee4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8007ee6:	782a      	ldrb	r2, [r5, #0]
 8007ee8:	2a30      	cmp	r2, #48	@ 0x30
 8007eea:	f040 80b1 	bne.w	8008050 <_strtod_l+0x1a0>
 8007eee:	786a      	ldrb	r2, [r5, #1]
 8007ef0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8007ef4:	2a58      	cmp	r2, #88	@ 0x58
 8007ef6:	d16c      	bne.n	8007fd2 <_strtod_l+0x122>
 8007ef8:	9302      	str	r3, [sp, #8]
 8007efa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007efc:	4a8e      	ldr	r2, [pc, #568]	@ (8008138 <_strtod_l+0x288>)
 8007efe:	9301      	str	r3, [sp, #4]
 8007f00:	ab1a      	add	r3, sp, #104	@ 0x68
 8007f02:	9300      	str	r3, [sp, #0]
 8007f04:	9805      	ldr	r0, [sp, #20]
 8007f06:	ab1b      	add	r3, sp, #108	@ 0x6c
 8007f08:	a919      	add	r1, sp, #100	@ 0x64
 8007f0a:	f001 f98b 	bl	8009224 <__gethex>
 8007f0e:	f010 060f 	ands.w	r6, r0, #15
 8007f12:	4604      	mov	r4, r0
 8007f14:	d005      	beq.n	8007f22 <_strtod_l+0x72>
 8007f16:	2e06      	cmp	r6, #6
 8007f18:	d126      	bne.n	8007f68 <_strtod_l+0xb8>
 8007f1a:	2300      	movs	r3, #0
 8007f1c:	3501      	adds	r5, #1
 8007f1e:	9519      	str	r5, [sp, #100]	@ 0x64
 8007f20:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007f22:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	f040 8584 	bne.w	8008a32 <_strtod_l+0xb82>
 8007f2a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007f2c:	b1bb      	cbz	r3, 8007f5e <_strtod_l+0xae>
 8007f2e:	4650      	mov	r0, sl
 8007f30:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 8007f34:	b01f      	add	sp, #124	@ 0x7c
 8007f36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f3a:	2920      	cmp	r1, #32
 8007f3c:	d1d0      	bne.n	8007ee0 <_strtod_l+0x30>
 8007f3e:	3201      	adds	r2, #1
 8007f40:	e7c3      	b.n	8007eca <_strtod_l+0x1a>
 8007f42:	292d      	cmp	r1, #45	@ 0x2d
 8007f44:	d1cc      	bne.n	8007ee0 <_strtod_l+0x30>
 8007f46:	2101      	movs	r1, #1
 8007f48:	910b      	str	r1, [sp, #44]	@ 0x2c
 8007f4a:	1c51      	adds	r1, r2, #1
 8007f4c:	9119      	str	r1, [sp, #100]	@ 0x64
 8007f4e:	7852      	ldrb	r2, [r2, #1]
 8007f50:	2a00      	cmp	r2, #0
 8007f52:	d1c7      	bne.n	8007ee4 <_strtod_l+0x34>
 8007f54:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007f56:	9419      	str	r4, [sp, #100]	@ 0x64
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	f040 8568 	bne.w	8008a2e <_strtod_l+0xb7e>
 8007f5e:	4650      	mov	r0, sl
 8007f60:	4659      	mov	r1, fp
 8007f62:	e7e7      	b.n	8007f34 <_strtod_l+0x84>
 8007f64:	2100      	movs	r1, #0
 8007f66:	e7ef      	b.n	8007f48 <_strtod_l+0x98>
 8007f68:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8007f6a:	b13a      	cbz	r2, 8007f7c <_strtod_l+0xcc>
 8007f6c:	2135      	movs	r1, #53	@ 0x35
 8007f6e:	a81c      	add	r0, sp, #112	@ 0x70
 8007f70:	f7ff ff36 	bl	8007de0 <__copybits>
 8007f74:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007f76:	9805      	ldr	r0, [sp, #20]
 8007f78:	f7ff fb10 	bl	800759c <_Bfree>
 8007f7c:	3e01      	subs	r6, #1
 8007f7e:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8007f80:	2e04      	cmp	r6, #4
 8007f82:	d806      	bhi.n	8007f92 <_strtod_l+0xe2>
 8007f84:	e8df f006 	tbb	[pc, r6]
 8007f88:	201d0314 	.word	0x201d0314
 8007f8c:	14          	.byte	0x14
 8007f8d:	00          	.byte	0x00
 8007f8e:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8007f92:	05e1      	lsls	r1, r4, #23
 8007f94:	bf48      	it	mi
 8007f96:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8007f9a:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007f9e:	0d1b      	lsrs	r3, r3, #20
 8007fa0:	051b      	lsls	r3, r3, #20
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d1bd      	bne.n	8007f22 <_strtod_l+0x72>
 8007fa6:	f7fe fb13 	bl	80065d0 <__errno>
 8007faa:	2322      	movs	r3, #34	@ 0x22
 8007fac:	6003      	str	r3, [r0, #0]
 8007fae:	e7b8      	b.n	8007f22 <_strtod_l+0x72>
 8007fb0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8007fb4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8007fb8:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8007fbc:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8007fc0:	e7e7      	b.n	8007f92 <_strtod_l+0xe2>
 8007fc2:	f8df b178 	ldr.w	fp, [pc, #376]	@ 800813c <_strtod_l+0x28c>
 8007fc6:	e7e4      	b.n	8007f92 <_strtod_l+0xe2>
 8007fc8:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8007fcc:	f04f 3aff 	mov.w	sl, #4294967295
 8007fd0:	e7df      	b.n	8007f92 <_strtod_l+0xe2>
 8007fd2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007fd4:	1c5a      	adds	r2, r3, #1
 8007fd6:	9219      	str	r2, [sp, #100]	@ 0x64
 8007fd8:	785b      	ldrb	r3, [r3, #1]
 8007fda:	2b30      	cmp	r3, #48	@ 0x30
 8007fdc:	d0f9      	beq.n	8007fd2 <_strtod_l+0x122>
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d09f      	beq.n	8007f22 <_strtod_l+0x72>
 8007fe2:	2301      	movs	r3, #1
 8007fe4:	9309      	str	r3, [sp, #36]	@ 0x24
 8007fe6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007fe8:	220a      	movs	r2, #10
 8007fea:	930c      	str	r3, [sp, #48]	@ 0x30
 8007fec:	2300      	movs	r3, #0
 8007fee:	461f      	mov	r7, r3
 8007ff0:	9308      	str	r3, [sp, #32]
 8007ff2:	930a      	str	r3, [sp, #40]	@ 0x28
 8007ff4:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8007ff6:	7805      	ldrb	r5, [r0, #0]
 8007ff8:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8007ffc:	b2d9      	uxtb	r1, r3
 8007ffe:	2909      	cmp	r1, #9
 8008000:	d928      	bls.n	8008054 <_strtod_l+0x1a4>
 8008002:	2201      	movs	r2, #1
 8008004:	494e      	ldr	r1, [pc, #312]	@ (8008140 <_strtod_l+0x290>)
 8008006:	f001 f828 	bl	800905a <strncmp>
 800800a:	2800      	cmp	r0, #0
 800800c:	d032      	beq.n	8008074 <_strtod_l+0x1c4>
 800800e:	2000      	movs	r0, #0
 8008010:	462a      	mov	r2, r5
 8008012:	4681      	mov	r9, r0
 8008014:	463d      	mov	r5, r7
 8008016:	4603      	mov	r3, r0
 8008018:	2a65      	cmp	r2, #101	@ 0x65
 800801a:	d001      	beq.n	8008020 <_strtod_l+0x170>
 800801c:	2a45      	cmp	r2, #69	@ 0x45
 800801e:	d114      	bne.n	800804a <_strtod_l+0x19a>
 8008020:	b91d      	cbnz	r5, 800802a <_strtod_l+0x17a>
 8008022:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008024:	4302      	orrs	r2, r0
 8008026:	d095      	beq.n	8007f54 <_strtod_l+0xa4>
 8008028:	2500      	movs	r5, #0
 800802a:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800802c:	1c62      	adds	r2, r4, #1
 800802e:	9219      	str	r2, [sp, #100]	@ 0x64
 8008030:	7862      	ldrb	r2, [r4, #1]
 8008032:	2a2b      	cmp	r2, #43	@ 0x2b
 8008034:	d077      	beq.n	8008126 <_strtod_l+0x276>
 8008036:	2a2d      	cmp	r2, #45	@ 0x2d
 8008038:	d07b      	beq.n	8008132 <_strtod_l+0x282>
 800803a:	f04f 0c00 	mov.w	ip, #0
 800803e:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8008042:	2909      	cmp	r1, #9
 8008044:	f240 8082 	bls.w	800814c <_strtod_l+0x29c>
 8008048:	9419      	str	r4, [sp, #100]	@ 0x64
 800804a:	f04f 0800 	mov.w	r8, #0
 800804e:	e0a2      	b.n	8008196 <_strtod_l+0x2e6>
 8008050:	2300      	movs	r3, #0
 8008052:	e7c7      	b.n	8007fe4 <_strtod_l+0x134>
 8008054:	2f08      	cmp	r7, #8
 8008056:	bfd5      	itete	le
 8008058:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800805a:	9908      	ldrgt	r1, [sp, #32]
 800805c:	fb02 3301 	mlale	r3, r2, r1, r3
 8008060:	fb02 3301 	mlagt	r3, r2, r1, r3
 8008064:	f100 0001 	add.w	r0, r0, #1
 8008068:	bfd4      	ite	le
 800806a:	930a      	strle	r3, [sp, #40]	@ 0x28
 800806c:	9308      	strgt	r3, [sp, #32]
 800806e:	3701      	adds	r7, #1
 8008070:	9019      	str	r0, [sp, #100]	@ 0x64
 8008072:	e7bf      	b.n	8007ff4 <_strtod_l+0x144>
 8008074:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008076:	1c5a      	adds	r2, r3, #1
 8008078:	9219      	str	r2, [sp, #100]	@ 0x64
 800807a:	785a      	ldrb	r2, [r3, #1]
 800807c:	b37f      	cbz	r7, 80080de <_strtod_l+0x22e>
 800807e:	4681      	mov	r9, r0
 8008080:	463d      	mov	r5, r7
 8008082:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8008086:	2b09      	cmp	r3, #9
 8008088:	d912      	bls.n	80080b0 <_strtod_l+0x200>
 800808a:	2301      	movs	r3, #1
 800808c:	e7c4      	b.n	8008018 <_strtod_l+0x168>
 800808e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008090:	3001      	adds	r0, #1
 8008092:	1c5a      	adds	r2, r3, #1
 8008094:	9219      	str	r2, [sp, #100]	@ 0x64
 8008096:	785a      	ldrb	r2, [r3, #1]
 8008098:	2a30      	cmp	r2, #48	@ 0x30
 800809a:	d0f8      	beq.n	800808e <_strtod_l+0x1de>
 800809c:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80080a0:	2b08      	cmp	r3, #8
 80080a2:	f200 84cb 	bhi.w	8008a3c <_strtod_l+0xb8c>
 80080a6:	4681      	mov	r9, r0
 80080a8:	2000      	movs	r0, #0
 80080aa:	4605      	mov	r5, r0
 80080ac:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80080ae:	930c      	str	r3, [sp, #48]	@ 0x30
 80080b0:	3a30      	subs	r2, #48	@ 0x30
 80080b2:	f100 0301 	add.w	r3, r0, #1
 80080b6:	d02a      	beq.n	800810e <_strtod_l+0x25e>
 80080b8:	4499      	add	r9, r3
 80080ba:	210a      	movs	r1, #10
 80080bc:	462b      	mov	r3, r5
 80080be:	eb00 0c05 	add.w	ip, r0, r5
 80080c2:	4563      	cmp	r3, ip
 80080c4:	d10d      	bne.n	80080e2 <_strtod_l+0x232>
 80080c6:	1c69      	adds	r1, r5, #1
 80080c8:	4401      	add	r1, r0
 80080ca:	4428      	add	r0, r5
 80080cc:	2808      	cmp	r0, #8
 80080ce:	dc16      	bgt.n	80080fe <_strtod_l+0x24e>
 80080d0:	230a      	movs	r3, #10
 80080d2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80080d4:	fb03 2300 	mla	r3, r3, r0, r2
 80080d8:	930a      	str	r3, [sp, #40]	@ 0x28
 80080da:	2300      	movs	r3, #0
 80080dc:	e018      	b.n	8008110 <_strtod_l+0x260>
 80080de:	4638      	mov	r0, r7
 80080e0:	e7da      	b.n	8008098 <_strtod_l+0x1e8>
 80080e2:	2b08      	cmp	r3, #8
 80080e4:	f103 0301 	add.w	r3, r3, #1
 80080e8:	dc03      	bgt.n	80080f2 <_strtod_l+0x242>
 80080ea:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80080ec:	434e      	muls	r6, r1
 80080ee:	960a      	str	r6, [sp, #40]	@ 0x28
 80080f0:	e7e7      	b.n	80080c2 <_strtod_l+0x212>
 80080f2:	2b10      	cmp	r3, #16
 80080f4:	bfde      	ittt	le
 80080f6:	9e08      	ldrle	r6, [sp, #32]
 80080f8:	434e      	mulle	r6, r1
 80080fa:	9608      	strle	r6, [sp, #32]
 80080fc:	e7e1      	b.n	80080c2 <_strtod_l+0x212>
 80080fe:	280f      	cmp	r0, #15
 8008100:	dceb      	bgt.n	80080da <_strtod_l+0x22a>
 8008102:	230a      	movs	r3, #10
 8008104:	9808      	ldr	r0, [sp, #32]
 8008106:	fb03 2300 	mla	r3, r3, r0, r2
 800810a:	9308      	str	r3, [sp, #32]
 800810c:	e7e5      	b.n	80080da <_strtod_l+0x22a>
 800810e:	4629      	mov	r1, r5
 8008110:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008112:	460d      	mov	r5, r1
 8008114:	1c50      	adds	r0, r2, #1
 8008116:	9019      	str	r0, [sp, #100]	@ 0x64
 8008118:	7852      	ldrb	r2, [r2, #1]
 800811a:	4618      	mov	r0, r3
 800811c:	e7b1      	b.n	8008082 <_strtod_l+0x1d2>
 800811e:	f04f 0900 	mov.w	r9, #0
 8008122:	2301      	movs	r3, #1
 8008124:	e77d      	b.n	8008022 <_strtod_l+0x172>
 8008126:	f04f 0c00 	mov.w	ip, #0
 800812a:	1ca2      	adds	r2, r4, #2
 800812c:	9219      	str	r2, [sp, #100]	@ 0x64
 800812e:	78a2      	ldrb	r2, [r4, #2]
 8008130:	e785      	b.n	800803e <_strtod_l+0x18e>
 8008132:	f04f 0c01 	mov.w	ip, #1
 8008136:	e7f8      	b.n	800812a <_strtod_l+0x27a>
 8008138:	08009e88 	.word	0x08009e88
 800813c:	7ff00000 	.word	0x7ff00000
 8008140:	08009e70 	.word	0x08009e70
 8008144:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008146:	1c51      	adds	r1, r2, #1
 8008148:	9119      	str	r1, [sp, #100]	@ 0x64
 800814a:	7852      	ldrb	r2, [r2, #1]
 800814c:	2a30      	cmp	r2, #48	@ 0x30
 800814e:	d0f9      	beq.n	8008144 <_strtod_l+0x294>
 8008150:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8008154:	2908      	cmp	r1, #8
 8008156:	f63f af78 	bhi.w	800804a <_strtod_l+0x19a>
 800815a:	f04f 080a 	mov.w	r8, #10
 800815e:	3a30      	subs	r2, #48	@ 0x30
 8008160:	920e      	str	r2, [sp, #56]	@ 0x38
 8008162:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008164:	920f      	str	r2, [sp, #60]	@ 0x3c
 8008166:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008168:	1c56      	adds	r6, r2, #1
 800816a:	9619      	str	r6, [sp, #100]	@ 0x64
 800816c:	7852      	ldrb	r2, [r2, #1]
 800816e:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8008172:	f1be 0f09 	cmp.w	lr, #9
 8008176:	d939      	bls.n	80081ec <_strtod_l+0x33c>
 8008178:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800817a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800817e:	1a76      	subs	r6, r6, r1
 8008180:	2e08      	cmp	r6, #8
 8008182:	dc03      	bgt.n	800818c <_strtod_l+0x2dc>
 8008184:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8008186:	4588      	cmp	r8, r1
 8008188:	bfa8      	it	ge
 800818a:	4688      	movge	r8, r1
 800818c:	f1bc 0f00 	cmp.w	ip, #0
 8008190:	d001      	beq.n	8008196 <_strtod_l+0x2e6>
 8008192:	f1c8 0800 	rsb	r8, r8, #0
 8008196:	2d00      	cmp	r5, #0
 8008198:	d14e      	bne.n	8008238 <_strtod_l+0x388>
 800819a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800819c:	4308      	orrs	r0, r1
 800819e:	f47f aec0 	bne.w	8007f22 <_strtod_l+0x72>
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	f47f aed6 	bne.w	8007f54 <_strtod_l+0xa4>
 80081a8:	2a69      	cmp	r2, #105	@ 0x69
 80081aa:	d028      	beq.n	80081fe <_strtod_l+0x34e>
 80081ac:	dc25      	bgt.n	80081fa <_strtod_l+0x34a>
 80081ae:	2a49      	cmp	r2, #73	@ 0x49
 80081b0:	d025      	beq.n	80081fe <_strtod_l+0x34e>
 80081b2:	2a4e      	cmp	r2, #78	@ 0x4e
 80081b4:	f47f aece 	bne.w	8007f54 <_strtod_l+0xa4>
 80081b8:	499a      	ldr	r1, [pc, #616]	@ (8008424 <_strtod_l+0x574>)
 80081ba:	a819      	add	r0, sp, #100	@ 0x64
 80081bc:	f001 fa54 	bl	8009668 <__match>
 80081c0:	2800      	cmp	r0, #0
 80081c2:	f43f aec7 	beq.w	8007f54 <_strtod_l+0xa4>
 80081c6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80081c8:	781b      	ldrb	r3, [r3, #0]
 80081ca:	2b28      	cmp	r3, #40	@ 0x28
 80081cc:	d12e      	bne.n	800822c <_strtod_l+0x37c>
 80081ce:	4996      	ldr	r1, [pc, #600]	@ (8008428 <_strtod_l+0x578>)
 80081d0:	aa1c      	add	r2, sp, #112	@ 0x70
 80081d2:	a819      	add	r0, sp, #100	@ 0x64
 80081d4:	f001 fa5c 	bl	8009690 <__hexnan>
 80081d8:	2805      	cmp	r0, #5
 80081da:	d127      	bne.n	800822c <_strtod_l+0x37c>
 80081dc:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80081de:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 80081e2:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 80081e6:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80081ea:	e69a      	b.n	8007f22 <_strtod_l+0x72>
 80081ec:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80081ee:	fb08 2101 	mla	r1, r8, r1, r2
 80081f2:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80081f6:	920e      	str	r2, [sp, #56]	@ 0x38
 80081f8:	e7b5      	b.n	8008166 <_strtod_l+0x2b6>
 80081fa:	2a6e      	cmp	r2, #110	@ 0x6e
 80081fc:	e7da      	b.n	80081b4 <_strtod_l+0x304>
 80081fe:	498b      	ldr	r1, [pc, #556]	@ (800842c <_strtod_l+0x57c>)
 8008200:	a819      	add	r0, sp, #100	@ 0x64
 8008202:	f001 fa31 	bl	8009668 <__match>
 8008206:	2800      	cmp	r0, #0
 8008208:	f43f aea4 	beq.w	8007f54 <_strtod_l+0xa4>
 800820c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800820e:	4988      	ldr	r1, [pc, #544]	@ (8008430 <_strtod_l+0x580>)
 8008210:	3b01      	subs	r3, #1
 8008212:	a819      	add	r0, sp, #100	@ 0x64
 8008214:	9319      	str	r3, [sp, #100]	@ 0x64
 8008216:	f001 fa27 	bl	8009668 <__match>
 800821a:	b910      	cbnz	r0, 8008222 <_strtod_l+0x372>
 800821c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800821e:	3301      	adds	r3, #1
 8008220:	9319      	str	r3, [sp, #100]	@ 0x64
 8008222:	f04f 0a00 	mov.w	sl, #0
 8008226:	f8df b20c 	ldr.w	fp, [pc, #524]	@ 8008434 <_strtod_l+0x584>
 800822a:	e67a      	b.n	8007f22 <_strtod_l+0x72>
 800822c:	4882      	ldr	r0, [pc, #520]	@ (8008438 <_strtod_l+0x588>)
 800822e:	f000 ff59 	bl	80090e4 <nan>
 8008232:	4682      	mov	sl, r0
 8008234:	468b      	mov	fp, r1
 8008236:	e674      	b.n	8007f22 <_strtod_l+0x72>
 8008238:	eba8 0309 	sub.w	r3, r8, r9
 800823c:	2f00      	cmp	r7, #0
 800823e:	bf08      	it	eq
 8008240:	462f      	moveq	r7, r5
 8008242:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008244:	2d10      	cmp	r5, #16
 8008246:	462c      	mov	r4, r5
 8008248:	9309      	str	r3, [sp, #36]	@ 0x24
 800824a:	bfa8      	it	ge
 800824c:	2410      	movge	r4, #16
 800824e:	f7f8 f8c9 	bl	80003e4 <__aeabi_ui2d>
 8008252:	2d09      	cmp	r5, #9
 8008254:	4682      	mov	sl, r0
 8008256:	468b      	mov	fp, r1
 8008258:	dc11      	bgt.n	800827e <_strtod_l+0x3ce>
 800825a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800825c:	2b00      	cmp	r3, #0
 800825e:	f43f ae60 	beq.w	8007f22 <_strtod_l+0x72>
 8008262:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008264:	dd76      	ble.n	8008354 <_strtod_l+0x4a4>
 8008266:	2b16      	cmp	r3, #22
 8008268:	dc5d      	bgt.n	8008326 <_strtod_l+0x476>
 800826a:	4974      	ldr	r1, [pc, #464]	@ (800843c <_strtod_l+0x58c>)
 800826c:	4652      	mov	r2, sl
 800826e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008272:	465b      	mov	r3, fp
 8008274:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008278:	f7f8 f92e 	bl	80004d8 <__aeabi_dmul>
 800827c:	e7d9      	b.n	8008232 <_strtod_l+0x382>
 800827e:	4b6f      	ldr	r3, [pc, #444]	@ (800843c <_strtod_l+0x58c>)
 8008280:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008284:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8008288:	f7f8 f926 	bl	80004d8 <__aeabi_dmul>
 800828c:	4682      	mov	sl, r0
 800828e:	9808      	ldr	r0, [sp, #32]
 8008290:	468b      	mov	fp, r1
 8008292:	f7f8 f8a7 	bl	80003e4 <__aeabi_ui2d>
 8008296:	4602      	mov	r2, r0
 8008298:	460b      	mov	r3, r1
 800829a:	4650      	mov	r0, sl
 800829c:	4659      	mov	r1, fp
 800829e:	f7f7 ff65 	bl	800016c <__adddf3>
 80082a2:	2d0f      	cmp	r5, #15
 80082a4:	4682      	mov	sl, r0
 80082a6:	468b      	mov	fp, r1
 80082a8:	ddd7      	ble.n	800825a <_strtod_l+0x3aa>
 80082aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80082ac:	1b2c      	subs	r4, r5, r4
 80082ae:	441c      	add	r4, r3
 80082b0:	2c00      	cmp	r4, #0
 80082b2:	f340 8096 	ble.w	80083e2 <_strtod_l+0x532>
 80082b6:	f014 030f 	ands.w	r3, r4, #15
 80082ba:	d00a      	beq.n	80082d2 <_strtod_l+0x422>
 80082bc:	495f      	ldr	r1, [pc, #380]	@ (800843c <_strtod_l+0x58c>)
 80082be:	4652      	mov	r2, sl
 80082c0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80082c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80082c8:	465b      	mov	r3, fp
 80082ca:	f7f8 f905 	bl	80004d8 <__aeabi_dmul>
 80082ce:	4682      	mov	sl, r0
 80082d0:	468b      	mov	fp, r1
 80082d2:	f034 040f 	bics.w	r4, r4, #15
 80082d6:	d073      	beq.n	80083c0 <_strtod_l+0x510>
 80082d8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 80082dc:	dd48      	ble.n	8008370 <_strtod_l+0x4c0>
 80082de:	2400      	movs	r4, #0
 80082e0:	46a0      	mov	r8, r4
 80082e2:	46a1      	mov	r9, r4
 80082e4:	940a      	str	r4, [sp, #40]	@ 0x28
 80082e6:	2322      	movs	r3, #34	@ 0x22
 80082e8:	f04f 0a00 	mov.w	sl, #0
 80082ec:	9a05      	ldr	r2, [sp, #20]
 80082ee:	f8df b144 	ldr.w	fp, [pc, #324]	@ 8008434 <_strtod_l+0x584>
 80082f2:	6013      	str	r3, [r2, #0]
 80082f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	f43f ae13 	beq.w	8007f22 <_strtod_l+0x72>
 80082fc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80082fe:	9805      	ldr	r0, [sp, #20]
 8008300:	f7ff f94c 	bl	800759c <_Bfree>
 8008304:	4649      	mov	r1, r9
 8008306:	9805      	ldr	r0, [sp, #20]
 8008308:	f7ff f948 	bl	800759c <_Bfree>
 800830c:	4641      	mov	r1, r8
 800830e:	9805      	ldr	r0, [sp, #20]
 8008310:	f7ff f944 	bl	800759c <_Bfree>
 8008314:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008316:	9805      	ldr	r0, [sp, #20]
 8008318:	f7ff f940 	bl	800759c <_Bfree>
 800831c:	4621      	mov	r1, r4
 800831e:	9805      	ldr	r0, [sp, #20]
 8008320:	f7ff f93c 	bl	800759c <_Bfree>
 8008324:	e5fd      	b.n	8007f22 <_strtod_l+0x72>
 8008326:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008328:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800832c:	4293      	cmp	r3, r2
 800832e:	dbbc      	blt.n	80082aa <_strtod_l+0x3fa>
 8008330:	4c42      	ldr	r4, [pc, #264]	@ (800843c <_strtod_l+0x58c>)
 8008332:	f1c5 050f 	rsb	r5, r5, #15
 8008336:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800833a:	4652      	mov	r2, sl
 800833c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008340:	465b      	mov	r3, fp
 8008342:	f7f8 f8c9 	bl	80004d8 <__aeabi_dmul>
 8008346:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008348:	1b5d      	subs	r5, r3, r5
 800834a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800834e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8008352:	e791      	b.n	8008278 <_strtod_l+0x3c8>
 8008354:	3316      	adds	r3, #22
 8008356:	dba8      	blt.n	80082aa <_strtod_l+0x3fa>
 8008358:	4b38      	ldr	r3, [pc, #224]	@ (800843c <_strtod_l+0x58c>)
 800835a:	eba9 0808 	sub.w	r8, r9, r8
 800835e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8008362:	4650      	mov	r0, sl
 8008364:	e9d8 2300 	ldrd	r2, r3, [r8]
 8008368:	4659      	mov	r1, fp
 800836a:	f7f8 f9df 	bl	800072c <__aeabi_ddiv>
 800836e:	e760      	b.n	8008232 <_strtod_l+0x382>
 8008370:	4b33      	ldr	r3, [pc, #204]	@ (8008440 <_strtod_l+0x590>)
 8008372:	4650      	mov	r0, sl
 8008374:	9308      	str	r3, [sp, #32]
 8008376:	2300      	movs	r3, #0
 8008378:	4659      	mov	r1, fp
 800837a:	461e      	mov	r6, r3
 800837c:	1124      	asrs	r4, r4, #4
 800837e:	2c01      	cmp	r4, #1
 8008380:	dc21      	bgt.n	80083c6 <_strtod_l+0x516>
 8008382:	b10b      	cbz	r3, 8008388 <_strtod_l+0x4d8>
 8008384:	4682      	mov	sl, r0
 8008386:	468b      	mov	fp, r1
 8008388:	492d      	ldr	r1, [pc, #180]	@ (8008440 <_strtod_l+0x590>)
 800838a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800838e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8008392:	4652      	mov	r2, sl
 8008394:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008398:	465b      	mov	r3, fp
 800839a:	f7f8 f89d 	bl	80004d8 <__aeabi_dmul>
 800839e:	4b25      	ldr	r3, [pc, #148]	@ (8008434 <_strtod_l+0x584>)
 80083a0:	460a      	mov	r2, r1
 80083a2:	400b      	ands	r3, r1
 80083a4:	4927      	ldr	r1, [pc, #156]	@ (8008444 <_strtod_l+0x594>)
 80083a6:	4682      	mov	sl, r0
 80083a8:	428b      	cmp	r3, r1
 80083aa:	d898      	bhi.n	80082de <_strtod_l+0x42e>
 80083ac:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 80083b0:	428b      	cmp	r3, r1
 80083b2:	bf86      	itte	hi
 80083b4:	f04f 3aff 	movhi.w	sl, #4294967295
 80083b8:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 8008448 <_strtod_l+0x598>
 80083bc:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 80083c0:	2300      	movs	r3, #0
 80083c2:	9308      	str	r3, [sp, #32]
 80083c4:	e07a      	b.n	80084bc <_strtod_l+0x60c>
 80083c6:	07e2      	lsls	r2, r4, #31
 80083c8:	d505      	bpl.n	80083d6 <_strtod_l+0x526>
 80083ca:	9b08      	ldr	r3, [sp, #32]
 80083cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083d0:	f7f8 f882 	bl	80004d8 <__aeabi_dmul>
 80083d4:	2301      	movs	r3, #1
 80083d6:	9a08      	ldr	r2, [sp, #32]
 80083d8:	3601      	adds	r6, #1
 80083da:	3208      	adds	r2, #8
 80083dc:	1064      	asrs	r4, r4, #1
 80083de:	9208      	str	r2, [sp, #32]
 80083e0:	e7cd      	b.n	800837e <_strtod_l+0x4ce>
 80083e2:	d0ed      	beq.n	80083c0 <_strtod_l+0x510>
 80083e4:	4264      	negs	r4, r4
 80083e6:	f014 020f 	ands.w	r2, r4, #15
 80083ea:	d00a      	beq.n	8008402 <_strtod_l+0x552>
 80083ec:	4b13      	ldr	r3, [pc, #76]	@ (800843c <_strtod_l+0x58c>)
 80083ee:	4650      	mov	r0, sl
 80083f0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80083f4:	4659      	mov	r1, fp
 80083f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083fa:	f7f8 f997 	bl	800072c <__aeabi_ddiv>
 80083fe:	4682      	mov	sl, r0
 8008400:	468b      	mov	fp, r1
 8008402:	1124      	asrs	r4, r4, #4
 8008404:	d0dc      	beq.n	80083c0 <_strtod_l+0x510>
 8008406:	2c1f      	cmp	r4, #31
 8008408:	dd20      	ble.n	800844c <_strtod_l+0x59c>
 800840a:	2400      	movs	r4, #0
 800840c:	46a0      	mov	r8, r4
 800840e:	46a1      	mov	r9, r4
 8008410:	940a      	str	r4, [sp, #40]	@ 0x28
 8008412:	2322      	movs	r3, #34	@ 0x22
 8008414:	9a05      	ldr	r2, [sp, #20]
 8008416:	f04f 0a00 	mov.w	sl, #0
 800841a:	f04f 0b00 	mov.w	fp, #0
 800841e:	6013      	str	r3, [r2, #0]
 8008420:	e768      	b.n	80082f4 <_strtod_l+0x444>
 8008422:	bf00      	nop
 8008424:	08009c5f 	.word	0x08009c5f
 8008428:	08009e74 	.word	0x08009e74
 800842c:	08009c57 	.word	0x08009c57
 8008430:	08009c8e 	.word	0x08009c8e
 8008434:	7ff00000 	.word	0x7ff00000
 8008438:	0800a01d 	.word	0x0800a01d
 800843c:	08009da8 	.word	0x08009da8
 8008440:	08009d80 	.word	0x08009d80
 8008444:	7ca00000 	.word	0x7ca00000
 8008448:	7fefffff 	.word	0x7fefffff
 800844c:	f014 0310 	ands.w	r3, r4, #16
 8008450:	bf18      	it	ne
 8008452:	236a      	movne	r3, #106	@ 0x6a
 8008454:	4650      	mov	r0, sl
 8008456:	9308      	str	r3, [sp, #32]
 8008458:	4659      	mov	r1, fp
 800845a:	2300      	movs	r3, #0
 800845c:	4ea9      	ldr	r6, [pc, #676]	@ (8008704 <_strtod_l+0x854>)
 800845e:	07e2      	lsls	r2, r4, #31
 8008460:	d504      	bpl.n	800846c <_strtod_l+0x5bc>
 8008462:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008466:	f7f8 f837 	bl	80004d8 <__aeabi_dmul>
 800846a:	2301      	movs	r3, #1
 800846c:	1064      	asrs	r4, r4, #1
 800846e:	f106 0608 	add.w	r6, r6, #8
 8008472:	d1f4      	bne.n	800845e <_strtod_l+0x5ae>
 8008474:	b10b      	cbz	r3, 800847a <_strtod_l+0x5ca>
 8008476:	4682      	mov	sl, r0
 8008478:	468b      	mov	fp, r1
 800847a:	9b08      	ldr	r3, [sp, #32]
 800847c:	b1b3      	cbz	r3, 80084ac <_strtod_l+0x5fc>
 800847e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8008482:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8008486:	2b00      	cmp	r3, #0
 8008488:	4659      	mov	r1, fp
 800848a:	dd0f      	ble.n	80084ac <_strtod_l+0x5fc>
 800848c:	2b1f      	cmp	r3, #31
 800848e:	dd57      	ble.n	8008540 <_strtod_l+0x690>
 8008490:	2b34      	cmp	r3, #52	@ 0x34
 8008492:	bfd8      	it	le
 8008494:	f04f 33ff 	movle.w	r3, #4294967295
 8008498:	f04f 0a00 	mov.w	sl, #0
 800849c:	bfcf      	iteee	gt
 800849e:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80084a2:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 80084a6:	4093      	lslle	r3, r2
 80084a8:	ea03 0b01 	andle.w	fp, r3, r1
 80084ac:	2200      	movs	r2, #0
 80084ae:	2300      	movs	r3, #0
 80084b0:	4650      	mov	r0, sl
 80084b2:	4659      	mov	r1, fp
 80084b4:	f7f8 fa78 	bl	80009a8 <__aeabi_dcmpeq>
 80084b8:	2800      	cmp	r0, #0
 80084ba:	d1a6      	bne.n	800840a <_strtod_l+0x55a>
 80084bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80084be:	463a      	mov	r2, r7
 80084c0:	9300      	str	r3, [sp, #0]
 80084c2:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80084c4:	462b      	mov	r3, r5
 80084c6:	9805      	ldr	r0, [sp, #20]
 80084c8:	f7ff f8d0 	bl	800766c <__s2b>
 80084cc:	900a      	str	r0, [sp, #40]	@ 0x28
 80084ce:	2800      	cmp	r0, #0
 80084d0:	f43f af05 	beq.w	80082de <_strtod_l+0x42e>
 80084d4:	2400      	movs	r4, #0
 80084d6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80084d8:	eba9 0308 	sub.w	r3, r9, r8
 80084dc:	2a00      	cmp	r2, #0
 80084de:	bfa8      	it	ge
 80084e0:	2300      	movge	r3, #0
 80084e2:	46a0      	mov	r8, r4
 80084e4:	9312      	str	r3, [sp, #72]	@ 0x48
 80084e6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80084ea:	9316      	str	r3, [sp, #88]	@ 0x58
 80084ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80084ee:	9805      	ldr	r0, [sp, #20]
 80084f0:	6859      	ldr	r1, [r3, #4]
 80084f2:	f7ff f813 	bl	800751c <_Balloc>
 80084f6:	4681      	mov	r9, r0
 80084f8:	2800      	cmp	r0, #0
 80084fa:	f43f aef4 	beq.w	80082e6 <_strtod_l+0x436>
 80084fe:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008500:	300c      	adds	r0, #12
 8008502:	691a      	ldr	r2, [r3, #16]
 8008504:	f103 010c 	add.w	r1, r3, #12
 8008508:	3202      	adds	r2, #2
 800850a:	0092      	lsls	r2, r2, #2
 800850c:	f7fe f8a3 	bl	8006656 <memcpy>
 8008510:	ab1c      	add	r3, sp, #112	@ 0x70
 8008512:	9301      	str	r3, [sp, #4]
 8008514:	ab1b      	add	r3, sp, #108	@ 0x6c
 8008516:	9300      	str	r3, [sp, #0]
 8008518:	4652      	mov	r2, sl
 800851a:	465b      	mov	r3, fp
 800851c:	9805      	ldr	r0, [sp, #20]
 800851e:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8008522:	f7ff fbd5 	bl	8007cd0 <__d2b>
 8008526:	901a      	str	r0, [sp, #104]	@ 0x68
 8008528:	2800      	cmp	r0, #0
 800852a:	f43f aedc 	beq.w	80082e6 <_strtod_l+0x436>
 800852e:	2101      	movs	r1, #1
 8008530:	9805      	ldr	r0, [sp, #20]
 8008532:	f7ff f931 	bl	8007798 <__i2b>
 8008536:	4680      	mov	r8, r0
 8008538:	b948      	cbnz	r0, 800854e <_strtod_l+0x69e>
 800853a:	f04f 0800 	mov.w	r8, #0
 800853e:	e6d2      	b.n	80082e6 <_strtod_l+0x436>
 8008540:	f04f 32ff 	mov.w	r2, #4294967295
 8008544:	fa02 f303 	lsl.w	r3, r2, r3
 8008548:	ea03 0a0a 	and.w	sl, r3, sl
 800854c:	e7ae      	b.n	80084ac <_strtod_l+0x5fc>
 800854e:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8008550:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8008552:	2d00      	cmp	r5, #0
 8008554:	bfab      	itete	ge
 8008556:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8008558:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800855a:	18ef      	addge	r7, r5, r3
 800855c:	1b5e      	sublt	r6, r3, r5
 800855e:	9b08      	ldr	r3, [sp, #32]
 8008560:	bfa8      	it	ge
 8008562:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8008564:	eba5 0503 	sub.w	r5, r5, r3
 8008568:	4415      	add	r5, r2
 800856a:	4b67      	ldr	r3, [pc, #412]	@ (8008708 <_strtod_l+0x858>)
 800856c:	f105 35ff 	add.w	r5, r5, #4294967295
 8008570:	bfb8      	it	lt
 8008572:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8008574:	429d      	cmp	r5, r3
 8008576:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800857a:	da50      	bge.n	800861e <_strtod_l+0x76e>
 800857c:	1b5b      	subs	r3, r3, r5
 800857e:	2b1f      	cmp	r3, #31
 8008580:	f04f 0101 	mov.w	r1, #1
 8008584:	eba2 0203 	sub.w	r2, r2, r3
 8008588:	dc3d      	bgt.n	8008606 <_strtod_l+0x756>
 800858a:	fa01 f303 	lsl.w	r3, r1, r3
 800858e:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008590:	2300      	movs	r3, #0
 8008592:	9310      	str	r3, [sp, #64]	@ 0x40
 8008594:	18bd      	adds	r5, r7, r2
 8008596:	9b08      	ldr	r3, [sp, #32]
 8008598:	42af      	cmp	r7, r5
 800859a:	4416      	add	r6, r2
 800859c:	441e      	add	r6, r3
 800859e:	463b      	mov	r3, r7
 80085a0:	bfa8      	it	ge
 80085a2:	462b      	movge	r3, r5
 80085a4:	42b3      	cmp	r3, r6
 80085a6:	bfa8      	it	ge
 80085a8:	4633      	movge	r3, r6
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	bfc2      	ittt	gt
 80085ae:	1aed      	subgt	r5, r5, r3
 80085b0:	1af6      	subgt	r6, r6, r3
 80085b2:	1aff      	subgt	r7, r7, r3
 80085b4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	dd16      	ble.n	80085e8 <_strtod_l+0x738>
 80085ba:	4641      	mov	r1, r8
 80085bc:	461a      	mov	r2, r3
 80085be:	9805      	ldr	r0, [sp, #20]
 80085c0:	f7ff f9a8 	bl	8007914 <__pow5mult>
 80085c4:	4680      	mov	r8, r0
 80085c6:	2800      	cmp	r0, #0
 80085c8:	d0b7      	beq.n	800853a <_strtod_l+0x68a>
 80085ca:	4601      	mov	r1, r0
 80085cc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80085ce:	9805      	ldr	r0, [sp, #20]
 80085d0:	f7ff f8f8 	bl	80077c4 <__multiply>
 80085d4:	900e      	str	r0, [sp, #56]	@ 0x38
 80085d6:	2800      	cmp	r0, #0
 80085d8:	f43f ae85 	beq.w	80082e6 <_strtod_l+0x436>
 80085dc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80085de:	9805      	ldr	r0, [sp, #20]
 80085e0:	f7fe ffdc 	bl	800759c <_Bfree>
 80085e4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80085e6:	931a      	str	r3, [sp, #104]	@ 0x68
 80085e8:	2d00      	cmp	r5, #0
 80085ea:	dc1d      	bgt.n	8008628 <_strtod_l+0x778>
 80085ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	dd23      	ble.n	800863a <_strtod_l+0x78a>
 80085f2:	4649      	mov	r1, r9
 80085f4:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80085f6:	9805      	ldr	r0, [sp, #20]
 80085f8:	f7ff f98c 	bl	8007914 <__pow5mult>
 80085fc:	4681      	mov	r9, r0
 80085fe:	b9e0      	cbnz	r0, 800863a <_strtod_l+0x78a>
 8008600:	f04f 0900 	mov.w	r9, #0
 8008604:	e66f      	b.n	80082e6 <_strtod_l+0x436>
 8008606:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800860a:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800860e:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8008612:	35e2      	adds	r5, #226	@ 0xe2
 8008614:	fa01 f305 	lsl.w	r3, r1, r5
 8008618:	9310      	str	r3, [sp, #64]	@ 0x40
 800861a:	9113      	str	r1, [sp, #76]	@ 0x4c
 800861c:	e7ba      	b.n	8008594 <_strtod_l+0x6e4>
 800861e:	2300      	movs	r3, #0
 8008620:	9310      	str	r3, [sp, #64]	@ 0x40
 8008622:	2301      	movs	r3, #1
 8008624:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008626:	e7b5      	b.n	8008594 <_strtod_l+0x6e4>
 8008628:	462a      	mov	r2, r5
 800862a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800862c:	9805      	ldr	r0, [sp, #20]
 800862e:	f7ff f9cb 	bl	80079c8 <__lshift>
 8008632:	901a      	str	r0, [sp, #104]	@ 0x68
 8008634:	2800      	cmp	r0, #0
 8008636:	d1d9      	bne.n	80085ec <_strtod_l+0x73c>
 8008638:	e655      	b.n	80082e6 <_strtod_l+0x436>
 800863a:	2e00      	cmp	r6, #0
 800863c:	dd07      	ble.n	800864e <_strtod_l+0x79e>
 800863e:	4649      	mov	r1, r9
 8008640:	4632      	mov	r2, r6
 8008642:	9805      	ldr	r0, [sp, #20]
 8008644:	f7ff f9c0 	bl	80079c8 <__lshift>
 8008648:	4681      	mov	r9, r0
 800864a:	2800      	cmp	r0, #0
 800864c:	d0d8      	beq.n	8008600 <_strtod_l+0x750>
 800864e:	2f00      	cmp	r7, #0
 8008650:	dd08      	ble.n	8008664 <_strtod_l+0x7b4>
 8008652:	4641      	mov	r1, r8
 8008654:	463a      	mov	r2, r7
 8008656:	9805      	ldr	r0, [sp, #20]
 8008658:	f7ff f9b6 	bl	80079c8 <__lshift>
 800865c:	4680      	mov	r8, r0
 800865e:	2800      	cmp	r0, #0
 8008660:	f43f ae41 	beq.w	80082e6 <_strtod_l+0x436>
 8008664:	464a      	mov	r2, r9
 8008666:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008668:	9805      	ldr	r0, [sp, #20]
 800866a:	f7ff fa35 	bl	8007ad8 <__mdiff>
 800866e:	4604      	mov	r4, r0
 8008670:	2800      	cmp	r0, #0
 8008672:	f43f ae38 	beq.w	80082e6 <_strtod_l+0x436>
 8008676:	68c3      	ldr	r3, [r0, #12]
 8008678:	4641      	mov	r1, r8
 800867a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800867c:	2300      	movs	r3, #0
 800867e:	60c3      	str	r3, [r0, #12]
 8008680:	f7ff fa0e 	bl	8007aa0 <__mcmp>
 8008684:	2800      	cmp	r0, #0
 8008686:	da45      	bge.n	8008714 <_strtod_l+0x864>
 8008688:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800868a:	ea53 030a 	orrs.w	r3, r3, sl
 800868e:	d16b      	bne.n	8008768 <_strtod_l+0x8b8>
 8008690:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008694:	2b00      	cmp	r3, #0
 8008696:	d167      	bne.n	8008768 <_strtod_l+0x8b8>
 8008698:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800869c:	0d1b      	lsrs	r3, r3, #20
 800869e:	051b      	lsls	r3, r3, #20
 80086a0:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80086a4:	d960      	bls.n	8008768 <_strtod_l+0x8b8>
 80086a6:	6963      	ldr	r3, [r4, #20]
 80086a8:	b913      	cbnz	r3, 80086b0 <_strtod_l+0x800>
 80086aa:	6923      	ldr	r3, [r4, #16]
 80086ac:	2b01      	cmp	r3, #1
 80086ae:	dd5b      	ble.n	8008768 <_strtod_l+0x8b8>
 80086b0:	4621      	mov	r1, r4
 80086b2:	2201      	movs	r2, #1
 80086b4:	9805      	ldr	r0, [sp, #20]
 80086b6:	f7ff f987 	bl	80079c8 <__lshift>
 80086ba:	4641      	mov	r1, r8
 80086bc:	4604      	mov	r4, r0
 80086be:	f7ff f9ef 	bl	8007aa0 <__mcmp>
 80086c2:	2800      	cmp	r0, #0
 80086c4:	dd50      	ble.n	8008768 <_strtod_l+0x8b8>
 80086c6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80086ca:	9a08      	ldr	r2, [sp, #32]
 80086cc:	0d1b      	lsrs	r3, r3, #20
 80086ce:	051b      	lsls	r3, r3, #20
 80086d0:	2a00      	cmp	r2, #0
 80086d2:	d06a      	beq.n	80087aa <_strtod_l+0x8fa>
 80086d4:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80086d8:	d867      	bhi.n	80087aa <_strtod_l+0x8fa>
 80086da:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80086de:	f67f ae98 	bls.w	8008412 <_strtod_l+0x562>
 80086e2:	4650      	mov	r0, sl
 80086e4:	4659      	mov	r1, fp
 80086e6:	4b09      	ldr	r3, [pc, #36]	@ (800870c <_strtod_l+0x85c>)
 80086e8:	2200      	movs	r2, #0
 80086ea:	f7f7 fef5 	bl	80004d8 <__aeabi_dmul>
 80086ee:	4b08      	ldr	r3, [pc, #32]	@ (8008710 <_strtod_l+0x860>)
 80086f0:	4682      	mov	sl, r0
 80086f2:	400b      	ands	r3, r1
 80086f4:	468b      	mov	fp, r1
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	f47f ae00 	bne.w	80082fc <_strtod_l+0x44c>
 80086fc:	2322      	movs	r3, #34	@ 0x22
 80086fe:	9a05      	ldr	r2, [sp, #20]
 8008700:	6013      	str	r3, [r2, #0]
 8008702:	e5fb      	b.n	80082fc <_strtod_l+0x44c>
 8008704:	08009ea0 	.word	0x08009ea0
 8008708:	fffffc02 	.word	0xfffffc02
 800870c:	39500000 	.word	0x39500000
 8008710:	7ff00000 	.word	0x7ff00000
 8008714:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8008718:	d165      	bne.n	80087e6 <_strtod_l+0x936>
 800871a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800871c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008720:	b35a      	cbz	r2, 800877a <_strtod_l+0x8ca>
 8008722:	4a99      	ldr	r2, [pc, #612]	@ (8008988 <_strtod_l+0xad8>)
 8008724:	4293      	cmp	r3, r2
 8008726:	d12b      	bne.n	8008780 <_strtod_l+0x8d0>
 8008728:	9b08      	ldr	r3, [sp, #32]
 800872a:	4651      	mov	r1, sl
 800872c:	b303      	cbz	r3, 8008770 <_strtod_l+0x8c0>
 800872e:	465a      	mov	r2, fp
 8008730:	4b96      	ldr	r3, [pc, #600]	@ (800898c <_strtod_l+0xadc>)
 8008732:	4013      	ands	r3, r2
 8008734:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8008738:	f04f 32ff 	mov.w	r2, #4294967295
 800873c:	d81b      	bhi.n	8008776 <_strtod_l+0x8c6>
 800873e:	0d1b      	lsrs	r3, r3, #20
 8008740:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8008744:	fa02 f303 	lsl.w	r3, r2, r3
 8008748:	4299      	cmp	r1, r3
 800874a:	d119      	bne.n	8008780 <_strtod_l+0x8d0>
 800874c:	4b90      	ldr	r3, [pc, #576]	@ (8008990 <_strtod_l+0xae0>)
 800874e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008750:	429a      	cmp	r2, r3
 8008752:	d102      	bne.n	800875a <_strtod_l+0x8aa>
 8008754:	3101      	adds	r1, #1
 8008756:	f43f adc6 	beq.w	80082e6 <_strtod_l+0x436>
 800875a:	f04f 0a00 	mov.w	sl, #0
 800875e:	4b8b      	ldr	r3, [pc, #556]	@ (800898c <_strtod_l+0xadc>)
 8008760:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008762:	401a      	ands	r2, r3
 8008764:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8008768:	9b08      	ldr	r3, [sp, #32]
 800876a:	2b00      	cmp	r3, #0
 800876c:	d1b9      	bne.n	80086e2 <_strtod_l+0x832>
 800876e:	e5c5      	b.n	80082fc <_strtod_l+0x44c>
 8008770:	f04f 33ff 	mov.w	r3, #4294967295
 8008774:	e7e8      	b.n	8008748 <_strtod_l+0x898>
 8008776:	4613      	mov	r3, r2
 8008778:	e7e6      	b.n	8008748 <_strtod_l+0x898>
 800877a:	ea53 030a 	orrs.w	r3, r3, sl
 800877e:	d0a2      	beq.n	80086c6 <_strtod_l+0x816>
 8008780:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008782:	b1db      	cbz	r3, 80087bc <_strtod_l+0x90c>
 8008784:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008786:	4213      	tst	r3, r2
 8008788:	d0ee      	beq.n	8008768 <_strtod_l+0x8b8>
 800878a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800878c:	4650      	mov	r0, sl
 800878e:	4659      	mov	r1, fp
 8008790:	9a08      	ldr	r2, [sp, #32]
 8008792:	b1bb      	cbz	r3, 80087c4 <_strtod_l+0x914>
 8008794:	f7ff fb68 	bl	8007e68 <sulp>
 8008798:	4602      	mov	r2, r0
 800879a:	460b      	mov	r3, r1
 800879c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80087a0:	f7f7 fce4 	bl	800016c <__adddf3>
 80087a4:	4682      	mov	sl, r0
 80087a6:	468b      	mov	fp, r1
 80087a8:	e7de      	b.n	8008768 <_strtod_l+0x8b8>
 80087aa:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80087ae:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80087b2:	f04f 3aff 	mov.w	sl, #4294967295
 80087b6:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80087ba:	e7d5      	b.n	8008768 <_strtod_l+0x8b8>
 80087bc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80087be:	ea13 0f0a 	tst.w	r3, sl
 80087c2:	e7e1      	b.n	8008788 <_strtod_l+0x8d8>
 80087c4:	f7ff fb50 	bl	8007e68 <sulp>
 80087c8:	4602      	mov	r2, r0
 80087ca:	460b      	mov	r3, r1
 80087cc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80087d0:	f7f7 fcca 	bl	8000168 <__aeabi_dsub>
 80087d4:	2200      	movs	r2, #0
 80087d6:	2300      	movs	r3, #0
 80087d8:	4682      	mov	sl, r0
 80087da:	468b      	mov	fp, r1
 80087dc:	f7f8 f8e4 	bl	80009a8 <__aeabi_dcmpeq>
 80087e0:	2800      	cmp	r0, #0
 80087e2:	d0c1      	beq.n	8008768 <_strtod_l+0x8b8>
 80087e4:	e615      	b.n	8008412 <_strtod_l+0x562>
 80087e6:	4641      	mov	r1, r8
 80087e8:	4620      	mov	r0, r4
 80087ea:	f7ff fac9 	bl	8007d80 <__ratio>
 80087ee:	2200      	movs	r2, #0
 80087f0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80087f4:	4606      	mov	r6, r0
 80087f6:	460f      	mov	r7, r1
 80087f8:	f7f8 f8ea 	bl	80009d0 <__aeabi_dcmple>
 80087fc:	2800      	cmp	r0, #0
 80087fe:	d06d      	beq.n	80088dc <_strtod_l+0xa2c>
 8008800:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008802:	2b00      	cmp	r3, #0
 8008804:	d178      	bne.n	80088f8 <_strtod_l+0xa48>
 8008806:	f1ba 0f00 	cmp.w	sl, #0
 800880a:	d156      	bne.n	80088ba <_strtod_l+0xa0a>
 800880c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800880e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008812:	2b00      	cmp	r3, #0
 8008814:	d158      	bne.n	80088c8 <_strtod_l+0xa18>
 8008816:	2200      	movs	r2, #0
 8008818:	4630      	mov	r0, r6
 800881a:	4639      	mov	r1, r7
 800881c:	4b5d      	ldr	r3, [pc, #372]	@ (8008994 <_strtod_l+0xae4>)
 800881e:	f7f8 f8cd 	bl	80009bc <__aeabi_dcmplt>
 8008822:	2800      	cmp	r0, #0
 8008824:	d157      	bne.n	80088d6 <_strtod_l+0xa26>
 8008826:	4630      	mov	r0, r6
 8008828:	4639      	mov	r1, r7
 800882a:	2200      	movs	r2, #0
 800882c:	4b5a      	ldr	r3, [pc, #360]	@ (8008998 <_strtod_l+0xae8>)
 800882e:	f7f7 fe53 	bl	80004d8 <__aeabi_dmul>
 8008832:	4606      	mov	r6, r0
 8008834:	460f      	mov	r7, r1
 8008836:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800883a:	9606      	str	r6, [sp, #24]
 800883c:	9307      	str	r3, [sp, #28]
 800883e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008842:	4d52      	ldr	r5, [pc, #328]	@ (800898c <_strtod_l+0xadc>)
 8008844:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8008848:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800884a:	401d      	ands	r5, r3
 800884c:	4b53      	ldr	r3, [pc, #332]	@ (800899c <_strtod_l+0xaec>)
 800884e:	429d      	cmp	r5, r3
 8008850:	f040 80aa 	bne.w	80089a8 <_strtod_l+0xaf8>
 8008854:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008856:	4650      	mov	r0, sl
 8008858:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800885c:	4659      	mov	r1, fp
 800885e:	f7ff f9cf 	bl	8007c00 <__ulp>
 8008862:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008866:	f7f7 fe37 	bl	80004d8 <__aeabi_dmul>
 800886a:	4652      	mov	r2, sl
 800886c:	465b      	mov	r3, fp
 800886e:	f7f7 fc7d 	bl	800016c <__adddf3>
 8008872:	460b      	mov	r3, r1
 8008874:	4945      	ldr	r1, [pc, #276]	@ (800898c <_strtod_l+0xadc>)
 8008876:	4a4a      	ldr	r2, [pc, #296]	@ (80089a0 <_strtod_l+0xaf0>)
 8008878:	4019      	ands	r1, r3
 800887a:	4291      	cmp	r1, r2
 800887c:	4682      	mov	sl, r0
 800887e:	d942      	bls.n	8008906 <_strtod_l+0xa56>
 8008880:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008882:	4b43      	ldr	r3, [pc, #268]	@ (8008990 <_strtod_l+0xae0>)
 8008884:	429a      	cmp	r2, r3
 8008886:	d103      	bne.n	8008890 <_strtod_l+0x9e0>
 8008888:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800888a:	3301      	adds	r3, #1
 800888c:	f43f ad2b 	beq.w	80082e6 <_strtod_l+0x436>
 8008890:	f04f 3aff 	mov.w	sl, #4294967295
 8008894:	f8df b0f8 	ldr.w	fp, [pc, #248]	@ 8008990 <_strtod_l+0xae0>
 8008898:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800889a:	9805      	ldr	r0, [sp, #20]
 800889c:	f7fe fe7e 	bl	800759c <_Bfree>
 80088a0:	4649      	mov	r1, r9
 80088a2:	9805      	ldr	r0, [sp, #20]
 80088a4:	f7fe fe7a 	bl	800759c <_Bfree>
 80088a8:	4641      	mov	r1, r8
 80088aa:	9805      	ldr	r0, [sp, #20]
 80088ac:	f7fe fe76 	bl	800759c <_Bfree>
 80088b0:	4621      	mov	r1, r4
 80088b2:	9805      	ldr	r0, [sp, #20]
 80088b4:	f7fe fe72 	bl	800759c <_Bfree>
 80088b8:	e618      	b.n	80084ec <_strtod_l+0x63c>
 80088ba:	f1ba 0f01 	cmp.w	sl, #1
 80088be:	d103      	bne.n	80088c8 <_strtod_l+0xa18>
 80088c0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	f43f ada5 	beq.w	8008412 <_strtod_l+0x562>
 80088c8:	2200      	movs	r2, #0
 80088ca:	4b36      	ldr	r3, [pc, #216]	@ (80089a4 <_strtod_l+0xaf4>)
 80088cc:	2600      	movs	r6, #0
 80088ce:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80088d2:	4f30      	ldr	r7, [pc, #192]	@ (8008994 <_strtod_l+0xae4>)
 80088d4:	e7b3      	b.n	800883e <_strtod_l+0x98e>
 80088d6:	2600      	movs	r6, #0
 80088d8:	4f2f      	ldr	r7, [pc, #188]	@ (8008998 <_strtod_l+0xae8>)
 80088da:	e7ac      	b.n	8008836 <_strtod_l+0x986>
 80088dc:	4630      	mov	r0, r6
 80088de:	4639      	mov	r1, r7
 80088e0:	4b2d      	ldr	r3, [pc, #180]	@ (8008998 <_strtod_l+0xae8>)
 80088e2:	2200      	movs	r2, #0
 80088e4:	f7f7 fdf8 	bl	80004d8 <__aeabi_dmul>
 80088e8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80088ea:	4606      	mov	r6, r0
 80088ec:	460f      	mov	r7, r1
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d0a1      	beq.n	8008836 <_strtod_l+0x986>
 80088f2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80088f6:	e7a2      	b.n	800883e <_strtod_l+0x98e>
 80088f8:	2200      	movs	r2, #0
 80088fa:	4b26      	ldr	r3, [pc, #152]	@ (8008994 <_strtod_l+0xae4>)
 80088fc:	4616      	mov	r6, r2
 80088fe:	461f      	mov	r7, r3
 8008900:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008904:	e79b      	b.n	800883e <_strtod_l+0x98e>
 8008906:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800890a:	9b08      	ldr	r3, [sp, #32]
 800890c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8008910:	2b00      	cmp	r3, #0
 8008912:	d1c1      	bne.n	8008898 <_strtod_l+0x9e8>
 8008914:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008918:	0d1b      	lsrs	r3, r3, #20
 800891a:	051b      	lsls	r3, r3, #20
 800891c:	429d      	cmp	r5, r3
 800891e:	d1bb      	bne.n	8008898 <_strtod_l+0x9e8>
 8008920:	4630      	mov	r0, r6
 8008922:	4639      	mov	r1, r7
 8008924:	f7f8 f920 	bl	8000b68 <__aeabi_d2lz>
 8008928:	f7f7 fda8 	bl	800047c <__aeabi_l2d>
 800892c:	4602      	mov	r2, r0
 800892e:	460b      	mov	r3, r1
 8008930:	4630      	mov	r0, r6
 8008932:	4639      	mov	r1, r7
 8008934:	f7f7 fc18 	bl	8000168 <__aeabi_dsub>
 8008938:	460b      	mov	r3, r1
 800893a:	4602      	mov	r2, r0
 800893c:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8008940:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8008944:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008946:	ea46 060a 	orr.w	r6, r6, sl
 800894a:	431e      	orrs	r6, r3
 800894c:	d069      	beq.n	8008a22 <_strtod_l+0xb72>
 800894e:	a30a      	add	r3, pc, #40	@ (adr r3, 8008978 <_strtod_l+0xac8>)
 8008950:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008954:	f7f8 f832 	bl	80009bc <__aeabi_dcmplt>
 8008958:	2800      	cmp	r0, #0
 800895a:	f47f accf 	bne.w	80082fc <_strtod_l+0x44c>
 800895e:	a308      	add	r3, pc, #32	@ (adr r3, 8008980 <_strtod_l+0xad0>)
 8008960:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008964:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008968:	f7f8 f846 	bl	80009f8 <__aeabi_dcmpgt>
 800896c:	2800      	cmp	r0, #0
 800896e:	d093      	beq.n	8008898 <_strtod_l+0x9e8>
 8008970:	e4c4      	b.n	80082fc <_strtod_l+0x44c>
 8008972:	bf00      	nop
 8008974:	f3af 8000 	nop.w
 8008978:	94a03595 	.word	0x94a03595
 800897c:	3fdfffff 	.word	0x3fdfffff
 8008980:	35afe535 	.word	0x35afe535
 8008984:	3fe00000 	.word	0x3fe00000
 8008988:	000fffff 	.word	0x000fffff
 800898c:	7ff00000 	.word	0x7ff00000
 8008990:	7fefffff 	.word	0x7fefffff
 8008994:	3ff00000 	.word	0x3ff00000
 8008998:	3fe00000 	.word	0x3fe00000
 800899c:	7fe00000 	.word	0x7fe00000
 80089a0:	7c9fffff 	.word	0x7c9fffff
 80089a4:	bff00000 	.word	0xbff00000
 80089a8:	9b08      	ldr	r3, [sp, #32]
 80089aa:	b323      	cbz	r3, 80089f6 <_strtod_l+0xb46>
 80089ac:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 80089b0:	d821      	bhi.n	80089f6 <_strtod_l+0xb46>
 80089b2:	a327      	add	r3, pc, #156	@ (adr r3, 8008a50 <_strtod_l+0xba0>)
 80089b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089b8:	4630      	mov	r0, r6
 80089ba:	4639      	mov	r1, r7
 80089bc:	f7f8 f808 	bl	80009d0 <__aeabi_dcmple>
 80089c0:	b1a0      	cbz	r0, 80089ec <_strtod_l+0xb3c>
 80089c2:	4639      	mov	r1, r7
 80089c4:	4630      	mov	r0, r6
 80089c6:	f7f8 f85f 	bl	8000a88 <__aeabi_d2uiz>
 80089ca:	2801      	cmp	r0, #1
 80089cc:	bf38      	it	cc
 80089ce:	2001      	movcc	r0, #1
 80089d0:	f7f7 fd08 	bl	80003e4 <__aeabi_ui2d>
 80089d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80089d6:	4606      	mov	r6, r0
 80089d8:	460f      	mov	r7, r1
 80089da:	b9fb      	cbnz	r3, 8008a1c <_strtod_l+0xb6c>
 80089dc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80089e0:	9014      	str	r0, [sp, #80]	@ 0x50
 80089e2:	9315      	str	r3, [sp, #84]	@ 0x54
 80089e4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 80089e8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80089ec:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80089ee:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 80089f2:	1b5b      	subs	r3, r3, r5
 80089f4:	9311      	str	r3, [sp, #68]	@ 0x44
 80089f6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80089fa:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 80089fe:	f7ff f8ff 	bl	8007c00 <__ulp>
 8008a02:	4602      	mov	r2, r0
 8008a04:	460b      	mov	r3, r1
 8008a06:	4650      	mov	r0, sl
 8008a08:	4659      	mov	r1, fp
 8008a0a:	f7f7 fd65 	bl	80004d8 <__aeabi_dmul>
 8008a0e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8008a12:	f7f7 fbab 	bl	800016c <__adddf3>
 8008a16:	4682      	mov	sl, r0
 8008a18:	468b      	mov	fp, r1
 8008a1a:	e776      	b.n	800890a <_strtod_l+0xa5a>
 8008a1c:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8008a20:	e7e0      	b.n	80089e4 <_strtod_l+0xb34>
 8008a22:	a30d      	add	r3, pc, #52	@ (adr r3, 8008a58 <_strtod_l+0xba8>)
 8008a24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a28:	f7f7 ffc8 	bl	80009bc <__aeabi_dcmplt>
 8008a2c:	e79e      	b.n	800896c <_strtod_l+0xabc>
 8008a2e:	2300      	movs	r3, #0
 8008a30:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008a32:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008a34:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8008a36:	6013      	str	r3, [r2, #0]
 8008a38:	f7ff ba77 	b.w	8007f2a <_strtod_l+0x7a>
 8008a3c:	2a65      	cmp	r2, #101	@ 0x65
 8008a3e:	f43f ab6e 	beq.w	800811e <_strtod_l+0x26e>
 8008a42:	2a45      	cmp	r2, #69	@ 0x45
 8008a44:	f43f ab6b 	beq.w	800811e <_strtod_l+0x26e>
 8008a48:	2301      	movs	r3, #1
 8008a4a:	f7ff bba6 	b.w	800819a <_strtod_l+0x2ea>
 8008a4e:	bf00      	nop
 8008a50:	ffc00000 	.word	0xffc00000
 8008a54:	41dfffff 	.word	0x41dfffff
 8008a58:	94a03595 	.word	0x94a03595
 8008a5c:	3fcfffff 	.word	0x3fcfffff

08008a60 <_strtod_r>:
 8008a60:	4b01      	ldr	r3, [pc, #4]	@ (8008a68 <_strtod_r+0x8>)
 8008a62:	f7ff ba25 	b.w	8007eb0 <_strtod_l>
 8008a66:	bf00      	nop
 8008a68:	20000470 	.word	0x20000470

08008a6c <_strtol_l.constprop.0>:
 8008a6c:	2b24      	cmp	r3, #36	@ 0x24
 8008a6e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a72:	4686      	mov	lr, r0
 8008a74:	4690      	mov	r8, r2
 8008a76:	d801      	bhi.n	8008a7c <_strtol_l.constprop.0+0x10>
 8008a78:	2b01      	cmp	r3, #1
 8008a7a:	d106      	bne.n	8008a8a <_strtol_l.constprop.0+0x1e>
 8008a7c:	f7fd fda8 	bl	80065d0 <__errno>
 8008a80:	2316      	movs	r3, #22
 8008a82:	6003      	str	r3, [r0, #0]
 8008a84:	2000      	movs	r0, #0
 8008a86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a8a:	460d      	mov	r5, r1
 8008a8c:	4833      	ldr	r0, [pc, #204]	@ (8008b5c <_strtol_l.constprop.0+0xf0>)
 8008a8e:	462a      	mov	r2, r5
 8008a90:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008a94:	5d06      	ldrb	r6, [r0, r4]
 8008a96:	f016 0608 	ands.w	r6, r6, #8
 8008a9a:	d1f8      	bne.n	8008a8e <_strtol_l.constprop.0+0x22>
 8008a9c:	2c2d      	cmp	r4, #45	@ 0x2d
 8008a9e:	d12d      	bne.n	8008afc <_strtol_l.constprop.0+0x90>
 8008aa0:	2601      	movs	r6, #1
 8008aa2:	782c      	ldrb	r4, [r5, #0]
 8008aa4:	1c95      	adds	r5, r2, #2
 8008aa6:	f033 0210 	bics.w	r2, r3, #16
 8008aaa:	d109      	bne.n	8008ac0 <_strtol_l.constprop.0+0x54>
 8008aac:	2c30      	cmp	r4, #48	@ 0x30
 8008aae:	d12a      	bne.n	8008b06 <_strtol_l.constprop.0+0x9a>
 8008ab0:	782a      	ldrb	r2, [r5, #0]
 8008ab2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008ab6:	2a58      	cmp	r2, #88	@ 0x58
 8008ab8:	d125      	bne.n	8008b06 <_strtol_l.constprop.0+0x9a>
 8008aba:	2310      	movs	r3, #16
 8008abc:	786c      	ldrb	r4, [r5, #1]
 8008abe:	3502      	adds	r5, #2
 8008ac0:	2200      	movs	r2, #0
 8008ac2:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8008ac6:	f10c 3cff 	add.w	ip, ip, #4294967295
 8008aca:	fbbc f9f3 	udiv	r9, ip, r3
 8008ace:	4610      	mov	r0, r2
 8008ad0:	fb03 ca19 	mls	sl, r3, r9, ip
 8008ad4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8008ad8:	2f09      	cmp	r7, #9
 8008ada:	d81b      	bhi.n	8008b14 <_strtol_l.constprop.0+0xa8>
 8008adc:	463c      	mov	r4, r7
 8008ade:	42a3      	cmp	r3, r4
 8008ae0:	dd27      	ble.n	8008b32 <_strtol_l.constprop.0+0xc6>
 8008ae2:	1c57      	adds	r7, r2, #1
 8008ae4:	d007      	beq.n	8008af6 <_strtol_l.constprop.0+0x8a>
 8008ae6:	4581      	cmp	r9, r0
 8008ae8:	d320      	bcc.n	8008b2c <_strtol_l.constprop.0+0xc0>
 8008aea:	d101      	bne.n	8008af0 <_strtol_l.constprop.0+0x84>
 8008aec:	45a2      	cmp	sl, r4
 8008aee:	db1d      	blt.n	8008b2c <_strtol_l.constprop.0+0xc0>
 8008af0:	2201      	movs	r2, #1
 8008af2:	fb00 4003 	mla	r0, r0, r3, r4
 8008af6:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008afa:	e7eb      	b.n	8008ad4 <_strtol_l.constprop.0+0x68>
 8008afc:	2c2b      	cmp	r4, #43	@ 0x2b
 8008afe:	bf04      	itt	eq
 8008b00:	782c      	ldrbeq	r4, [r5, #0]
 8008b02:	1c95      	addeq	r5, r2, #2
 8008b04:	e7cf      	b.n	8008aa6 <_strtol_l.constprop.0+0x3a>
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d1da      	bne.n	8008ac0 <_strtol_l.constprop.0+0x54>
 8008b0a:	2c30      	cmp	r4, #48	@ 0x30
 8008b0c:	bf0c      	ite	eq
 8008b0e:	2308      	moveq	r3, #8
 8008b10:	230a      	movne	r3, #10
 8008b12:	e7d5      	b.n	8008ac0 <_strtol_l.constprop.0+0x54>
 8008b14:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8008b18:	2f19      	cmp	r7, #25
 8008b1a:	d801      	bhi.n	8008b20 <_strtol_l.constprop.0+0xb4>
 8008b1c:	3c37      	subs	r4, #55	@ 0x37
 8008b1e:	e7de      	b.n	8008ade <_strtol_l.constprop.0+0x72>
 8008b20:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8008b24:	2f19      	cmp	r7, #25
 8008b26:	d804      	bhi.n	8008b32 <_strtol_l.constprop.0+0xc6>
 8008b28:	3c57      	subs	r4, #87	@ 0x57
 8008b2a:	e7d8      	b.n	8008ade <_strtol_l.constprop.0+0x72>
 8008b2c:	f04f 32ff 	mov.w	r2, #4294967295
 8008b30:	e7e1      	b.n	8008af6 <_strtol_l.constprop.0+0x8a>
 8008b32:	1c53      	adds	r3, r2, #1
 8008b34:	d108      	bne.n	8008b48 <_strtol_l.constprop.0+0xdc>
 8008b36:	2322      	movs	r3, #34	@ 0x22
 8008b38:	4660      	mov	r0, ip
 8008b3a:	f8ce 3000 	str.w	r3, [lr]
 8008b3e:	f1b8 0f00 	cmp.w	r8, #0
 8008b42:	d0a0      	beq.n	8008a86 <_strtol_l.constprop.0+0x1a>
 8008b44:	1e69      	subs	r1, r5, #1
 8008b46:	e006      	b.n	8008b56 <_strtol_l.constprop.0+0xea>
 8008b48:	b106      	cbz	r6, 8008b4c <_strtol_l.constprop.0+0xe0>
 8008b4a:	4240      	negs	r0, r0
 8008b4c:	f1b8 0f00 	cmp.w	r8, #0
 8008b50:	d099      	beq.n	8008a86 <_strtol_l.constprop.0+0x1a>
 8008b52:	2a00      	cmp	r2, #0
 8008b54:	d1f6      	bne.n	8008b44 <_strtol_l.constprop.0+0xd8>
 8008b56:	f8c8 1000 	str.w	r1, [r8]
 8008b5a:	e794      	b.n	8008a86 <_strtol_l.constprop.0+0x1a>
 8008b5c:	08009ec9 	.word	0x08009ec9

08008b60 <_strtol_r>:
 8008b60:	f7ff bf84 	b.w	8008a6c <_strtol_l.constprop.0>

08008b64 <__ssputs_r>:
 8008b64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b68:	461f      	mov	r7, r3
 8008b6a:	688e      	ldr	r6, [r1, #8]
 8008b6c:	4682      	mov	sl, r0
 8008b6e:	42be      	cmp	r6, r7
 8008b70:	460c      	mov	r4, r1
 8008b72:	4690      	mov	r8, r2
 8008b74:	680b      	ldr	r3, [r1, #0]
 8008b76:	d82d      	bhi.n	8008bd4 <__ssputs_r+0x70>
 8008b78:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008b7c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008b80:	d026      	beq.n	8008bd0 <__ssputs_r+0x6c>
 8008b82:	6965      	ldr	r5, [r4, #20]
 8008b84:	6909      	ldr	r1, [r1, #16]
 8008b86:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008b8a:	eba3 0901 	sub.w	r9, r3, r1
 8008b8e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008b92:	1c7b      	adds	r3, r7, #1
 8008b94:	444b      	add	r3, r9
 8008b96:	106d      	asrs	r5, r5, #1
 8008b98:	429d      	cmp	r5, r3
 8008b9a:	bf38      	it	cc
 8008b9c:	461d      	movcc	r5, r3
 8008b9e:	0553      	lsls	r3, r2, #21
 8008ba0:	d527      	bpl.n	8008bf2 <__ssputs_r+0x8e>
 8008ba2:	4629      	mov	r1, r5
 8008ba4:	f7fe fc2e 	bl	8007404 <_malloc_r>
 8008ba8:	4606      	mov	r6, r0
 8008baa:	b360      	cbz	r0, 8008c06 <__ssputs_r+0xa2>
 8008bac:	464a      	mov	r2, r9
 8008bae:	6921      	ldr	r1, [r4, #16]
 8008bb0:	f7fd fd51 	bl	8006656 <memcpy>
 8008bb4:	89a3      	ldrh	r3, [r4, #12]
 8008bb6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008bba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008bbe:	81a3      	strh	r3, [r4, #12]
 8008bc0:	6126      	str	r6, [r4, #16]
 8008bc2:	444e      	add	r6, r9
 8008bc4:	6026      	str	r6, [r4, #0]
 8008bc6:	463e      	mov	r6, r7
 8008bc8:	6165      	str	r5, [r4, #20]
 8008bca:	eba5 0509 	sub.w	r5, r5, r9
 8008bce:	60a5      	str	r5, [r4, #8]
 8008bd0:	42be      	cmp	r6, r7
 8008bd2:	d900      	bls.n	8008bd6 <__ssputs_r+0x72>
 8008bd4:	463e      	mov	r6, r7
 8008bd6:	4632      	mov	r2, r6
 8008bd8:	4641      	mov	r1, r8
 8008bda:	6820      	ldr	r0, [r4, #0]
 8008bdc:	f000 fa23 	bl	8009026 <memmove>
 8008be0:	2000      	movs	r0, #0
 8008be2:	68a3      	ldr	r3, [r4, #8]
 8008be4:	1b9b      	subs	r3, r3, r6
 8008be6:	60a3      	str	r3, [r4, #8]
 8008be8:	6823      	ldr	r3, [r4, #0]
 8008bea:	4433      	add	r3, r6
 8008bec:	6023      	str	r3, [r4, #0]
 8008bee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008bf2:	462a      	mov	r2, r5
 8008bf4:	f000 fdf9 	bl	80097ea <_realloc_r>
 8008bf8:	4606      	mov	r6, r0
 8008bfa:	2800      	cmp	r0, #0
 8008bfc:	d1e0      	bne.n	8008bc0 <__ssputs_r+0x5c>
 8008bfe:	4650      	mov	r0, sl
 8008c00:	6921      	ldr	r1, [r4, #16]
 8008c02:	f7fe fb8d 	bl	8007320 <_free_r>
 8008c06:	230c      	movs	r3, #12
 8008c08:	f8ca 3000 	str.w	r3, [sl]
 8008c0c:	89a3      	ldrh	r3, [r4, #12]
 8008c0e:	f04f 30ff 	mov.w	r0, #4294967295
 8008c12:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008c16:	81a3      	strh	r3, [r4, #12]
 8008c18:	e7e9      	b.n	8008bee <__ssputs_r+0x8a>
	...

08008c1c <_svfiprintf_r>:
 8008c1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c20:	4698      	mov	r8, r3
 8008c22:	898b      	ldrh	r3, [r1, #12]
 8008c24:	4607      	mov	r7, r0
 8008c26:	061b      	lsls	r3, r3, #24
 8008c28:	460d      	mov	r5, r1
 8008c2a:	4614      	mov	r4, r2
 8008c2c:	b09d      	sub	sp, #116	@ 0x74
 8008c2e:	d510      	bpl.n	8008c52 <_svfiprintf_r+0x36>
 8008c30:	690b      	ldr	r3, [r1, #16]
 8008c32:	b973      	cbnz	r3, 8008c52 <_svfiprintf_r+0x36>
 8008c34:	2140      	movs	r1, #64	@ 0x40
 8008c36:	f7fe fbe5 	bl	8007404 <_malloc_r>
 8008c3a:	6028      	str	r0, [r5, #0]
 8008c3c:	6128      	str	r0, [r5, #16]
 8008c3e:	b930      	cbnz	r0, 8008c4e <_svfiprintf_r+0x32>
 8008c40:	230c      	movs	r3, #12
 8008c42:	603b      	str	r3, [r7, #0]
 8008c44:	f04f 30ff 	mov.w	r0, #4294967295
 8008c48:	b01d      	add	sp, #116	@ 0x74
 8008c4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c4e:	2340      	movs	r3, #64	@ 0x40
 8008c50:	616b      	str	r3, [r5, #20]
 8008c52:	2300      	movs	r3, #0
 8008c54:	9309      	str	r3, [sp, #36]	@ 0x24
 8008c56:	2320      	movs	r3, #32
 8008c58:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008c5c:	2330      	movs	r3, #48	@ 0x30
 8008c5e:	f04f 0901 	mov.w	r9, #1
 8008c62:	f8cd 800c 	str.w	r8, [sp, #12]
 8008c66:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8008e00 <_svfiprintf_r+0x1e4>
 8008c6a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008c6e:	4623      	mov	r3, r4
 8008c70:	469a      	mov	sl, r3
 8008c72:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008c76:	b10a      	cbz	r2, 8008c7c <_svfiprintf_r+0x60>
 8008c78:	2a25      	cmp	r2, #37	@ 0x25
 8008c7a:	d1f9      	bne.n	8008c70 <_svfiprintf_r+0x54>
 8008c7c:	ebba 0b04 	subs.w	fp, sl, r4
 8008c80:	d00b      	beq.n	8008c9a <_svfiprintf_r+0x7e>
 8008c82:	465b      	mov	r3, fp
 8008c84:	4622      	mov	r2, r4
 8008c86:	4629      	mov	r1, r5
 8008c88:	4638      	mov	r0, r7
 8008c8a:	f7ff ff6b 	bl	8008b64 <__ssputs_r>
 8008c8e:	3001      	adds	r0, #1
 8008c90:	f000 80a7 	beq.w	8008de2 <_svfiprintf_r+0x1c6>
 8008c94:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008c96:	445a      	add	r2, fp
 8008c98:	9209      	str	r2, [sp, #36]	@ 0x24
 8008c9a:	f89a 3000 	ldrb.w	r3, [sl]
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	f000 809f 	beq.w	8008de2 <_svfiprintf_r+0x1c6>
 8008ca4:	2300      	movs	r3, #0
 8008ca6:	f04f 32ff 	mov.w	r2, #4294967295
 8008caa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008cae:	f10a 0a01 	add.w	sl, sl, #1
 8008cb2:	9304      	str	r3, [sp, #16]
 8008cb4:	9307      	str	r3, [sp, #28]
 8008cb6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008cba:	931a      	str	r3, [sp, #104]	@ 0x68
 8008cbc:	4654      	mov	r4, sl
 8008cbe:	2205      	movs	r2, #5
 8008cc0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008cc4:	484e      	ldr	r0, [pc, #312]	@ (8008e00 <_svfiprintf_r+0x1e4>)
 8008cc6:	f7fd fcb8 	bl	800663a <memchr>
 8008cca:	9a04      	ldr	r2, [sp, #16]
 8008ccc:	b9d8      	cbnz	r0, 8008d06 <_svfiprintf_r+0xea>
 8008cce:	06d0      	lsls	r0, r2, #27
 8008cd0:	bf44      	itt	mi
 8008cd2:	2320      	movmi	r3, #32
 8008cd4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008cd8:	0711      	lsls	r1, r2, #28
 8008cda:	bf44      	itt	mi
 8008cdc:	232b      	movmi	r3, #43	@ 0x2b
 8008cde:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008ce2:	f89a 3000 	ldrb.w	r3, [sl]
 8008ce6:	2b2a      	cmp	r3, #42	@ 0x2a
 8008ce8:	d015      	beq.n	8008d16 <_svfiprintf_r+0xfa>
 8008cea:	4654      	mov	r4, sl
 8008cec:	2000      	movs	r0, #0
 8008cee:	f04f 0c0a 	mov.w	ip, #10
 8008cf2:	9a07      	ldr	r2, [sp, #28]
 8008cf4:	4621      	mov	r1, r4
 8008cf6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008cfa:	3b30      	subs	r3, #48	@ 0x30
 8008cfc:	2b09      	cmp	r3, #9
 8008cfe:	d94b      	bls.n	8008d98 <_svfiprintf_r+0x17c>
 8008d00:	b1b0      	cbz	r0, 8008d30 <_svfiprintf_r+0x114>
 8008d02:	9207      	str	r2, [sp, #28]
 8008d04:	e014      	b.n	8008d30 <_svfiprintf_r+0x114>
 8008d06:	eba0 0308 	sub.w	r3, r0, r8
 8008d0a:	fa09 f303 	lsl.w	r3, r9, r3
 8008d0e:	4313      	orrs	r3, r2
 8008d10:	46a2      	mov	sl, r4
 8008d12:	9304      	str	r3, [sp, #16]
 8008d14:	e7d2      	b.n	8008cbc <_svfiprintf_r+0xa0>
 8008d16:	9b03      	ldr	r3, [sp, #12]
 8008d18:	1d19      	adds	r1, r3, #4
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	9103      	str	r1, [sp, #12]
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	bfbb      	ittet	lt
 8008d22:	425b      	neglt	r3, r3
 8008d24:	f042 0202 	orrlt.w	r2, r2, #2
 8008d28:	9307      	strge	r3, [sp, #28]
 8008d2a:	9307      	strlt	r3, [sp, #28]
 8008d2c:	bfb8      	it	lt
 8008d2e:	9204      	strlt	r2, [sp, #16]
 8008d30:	7823      	ldrb	r3, [r4, #0]
 8008d32:	2b2e      	cmp	r3, #46	@ 0x2e
 8008d34:	d10a      	bne.n	8008d4c <_svfiprintf_r+0x130>
 8008d36:	7863      	ldrb	r3, [r4, #1]
 8008d38:	2b2a      	cmp	r3, #42	@ 0x2a
 8008d3a:	d132      	bne.n	8008da2 <_svfiprintf_r+0x186>
 8008d3c:	9b03      	ldr	r3, [sp, #12]
 8008d3e:	3402      	adds	r4, #2
 8008d40:	1d1a      	adds	r2, r3, #4
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	9203      	str	r2, [sp, #12]
 8008d46:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008d4a:	9305      	str	r3, [sp, #20]
 8008d4c:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8008e04 <_svfiprintf_r+0x1e8>
 8008d50:	2203      	movs	r2, #3
 8008d52:	4650      	mov	r0, sl
 8008d54:	7821      	ldrb	r1, [r4, #0]
 8008d56:	f7fd fc70 	bl	800663a <memchr>
 8008d5a:	b138      	cbz	r0, 8008d6c <_svfiprintf_r+0x150>
 8008d5c:	2240      	movs	r2, #64	@ 0x40
 8008d5e:	9b04      	ldr	r3, [sp, #16]
 8008d60:	eba0 000a 	sub.w	r0, r0, sl
 8008d64:	4082      	lsls	r2, r0
 8008d66:	4313      	orrs	r3, r2
 8008d68:	3401      	adds	r4, #1
 8008d6a:	9304      	str	r3, [sp, #16]
 8008d6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d70:	2206      	movs	r2, #6
 8008d72:	4825      	ldr	r0, [pc, #148]	@ (8008e08 <_svfiprintf_r+0x1ec>)
 8008d74:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008d78:	f7fd fc5f 	bl	800663a <memchr>
 8008d7c:	2800      	cmp	r0, #0
 8008d7e:	d036      	beq.n	8008dee <_svfiprintf_r+0x1d2>
 8008d80:	4b22      	ldr	r3, [pc, #136]	@ (8008e0c <_svfiprintf_r+0x1f0>)
 8008d82:	bb1b      	cbnz	r3, 8008dcc <_svfiprintf_r+0x1b0>
 8008d84:	9b03      	ldr	r3, [sp, #12]
 8008d86:	3307      	adds	r3, #7
 8008d88:	f023 0307 	bic.w	r3, r3, #7
 8008d8c:	3308      	adds	r3, #8
 8008d8e:	9303      	str	r3, [sp, #12]
 8008d90:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d92:	4433      	add	r3, r6
 8008d94:	9309      	str	r3, [sp, #36]	@ 0x24
 8008d96:	e76a      	b.n	8008c6e <_svfiprintf_r+0x52>
 8008d98:	460c      	mov	r4, r1
 8008d9a:	2001      	movs	r0, #1
 8008d9c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008da0:	e7a8      	b.n	8008cf4 <_svfiprintf_r+0xd8>
 8008da2:	2300      	movs	r3, #0
 8008da4:	f04f 0c0a 	mov.w	ip, #10
 8008da8:	4619      	mov	r1, r3
 8008daa:	3401      	adds	r4, #1
 8008dac:	9305      	str	r3, [sp, #20]
 8008dae:	4620      	mov	r0, r4
 8008db0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008db4:	3a30      	subs	r2, #48	@ 0x30
 8008db6:	2a09      	cmp	r2, #9
 8008db8:	d903      	bls.n	8008dc2 <_svfiprintf_r+0x1a6>
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d0c6      	beq.n	8008d4c <_svfiprintf_r+0x130>
 8008dbe:	9105      	str	r1, [sp, #20]
 8008dc0:	e7c4      	b.n	8008d4c <_svfiprintf_r+0x130>
 8008dc2:	4604      	mov	r4, r0
 8008dc4:	2301      	movs	r3, #1
 8008dc6:	fb0c 2101 	mla	r1, ip, r1, r2
 8008dca:	e7f0      	b.n	8008dae <_svfiprintf_r+0x192>
 8008dcc:	ab03      	add	r3, sp, #12
 8008dce:	9300      	str	r3, [sp, #0]
 8008dd0:	462a      	mov	r2, r5
 8008dd2:	4638      	mov	r0, r7
 8008dd4:	4b0e      	ldr	r3, [pc, #56]	@ (8008e10 <_svfiprintf_r+0x1f4>)
 8008dd6:	a904      	add	r1, sp, #16
 8008dd8:	f7fc fb8e 	bl	80054f8 <_printf_float>
 8008ddc:	1c42      	adds	r2, r0, #1
 8008dde:	4606      	mov	r6, r0
 8008de0:	d1d6      	bne.n	8008d90 <_svfiprintf_r+0x174>
 8008de2:	89ab      	ldrh	r3, [r5, #12]
 8008de4:	065b      	lsls	r3, r3, #25
 8008de6:	f53f af2d 	bmi.w	8008c44 <_svfiprintf_r+0x28>
 8008dea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008dec:	e72c      	b.n	8008c48 <_svfiprintf_r+0x2c>
 8008dee:	ab03      	add	r3, sp, #12
 8008df0:	9300      	str	r3, [sp, #0]
 8008df2:	462a      	mov	r2, r5
 8008df4:	4638      	mov	r0, r7
 8008df6:	4b06      	ldr	r3, [pc, #24]	@ (8008e10 <_svfiprintf_r+0x1f4>)
 8008df8:	a904      	add	r1, sp, #16
 8008dfa:	f7fc fe1b 	bl	8005a34 <_printf_i>
 8008dfe:	e7ed      	b.n	8008ddc <_svfiprintf_r+0x1c0>
 8008e00:	08009fc9 	.word	0x08009fc9
 8008e04:	08009fcf 	.word	0x08009fcf
 8008e08:	08009fd3 	.word	0x08009fd3
 8008e0c:	080054f9 	.word	0x080054f9
 8008e10:	08008b65 	.word	0x08008b65

08008e14 <__sflush_r>:
 8008e14:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008e18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e1a:	0716      	lsls	r6, r2, #28
 8008e1c:	4605      	mov	r5, r0
 8008e1e:	460c      	mov	r4, r1
 8008e20:	d454      	bmi.n	8008ecc <__sflush_r+0xb8>
 8008e22:	684b      	ldr	r3, [r1, #4]
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	dc02      	bgt.n	8008e2e <__sflush_r+0x1a>
 8008e28:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	dd48      	ble.n	8008ec0 <__sflush_r+0xac>
 8008e2e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008e30:	2e00      	cmp	r6, #0
 8008e32:	d045      	beq.n	8008ec0 <__sflush_r+0xac>
 8008e34:	2300      	movs	r3, #0
 8008e36:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008e3a:	682f      	ldr	r7, [r5, #0]
 8008e3c:	6a21      	ldr	r1, [r4, #32]
 8008e3e:	602b      	str	r3, [r5, #0]
 8008e40:	d030      	beq.n	8008ea4 <__sflush_r+0x90>
 8008e42:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008e44:	89a3      	ldrh	r3, [r4, #12]
 8008e46:	0759      	lsls	r1, r3, #29
 8008e48:	d505      	bpl.n	8008e56 <__sflush_r+0x42>
 8008e4a:	6863      	ldr	r3, [r4, #4]
 8008e4c:	1ad2      	subs	r2, r2, r3
 8008e4e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008e50:	b10b      	cbz	r3, 8008e56 <__sflush_r+0x42>
 8008e52:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008e54:	1ad2      	subs	r2, r2, r3
 8008e56:	2300      	movs	r3, #0
 8008e58:	4628      	mov	r0, r5
 8008e5a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008e5c:	6a21      	ldr	r1, [r4, #32]
 8008e5e:	47b0      	blx	r6
 8008e60:	1c43      	adds	r3, r0, #1
 8008e62:	89a3      	ldrh	r3, [r4, #12]
 8008e64:	d106      	bne.n	8008e74 <__sflush_r+0x60>
 8008e66:	6829      	ldr	r1, [r5, #0]
 8008e68:	291d      	cmp	r1, #29
 8008e6a:	d82b      	bhi.n	8008ec4 <__sflush_r+0xb0>
 8008e6c:	4a28      	ldr	r2, [pc, #160]	@ (8008f10 <__sflush_r+0xfc>)
 8008e6e:	410a      	asrs	r2, r1
 8008e70:	07d6      	lsls	r6, r2, #31
 8008e72:	d427      	bmi.n	8008ec4 <__sflush_r+0xb0>
 8008e74:	2200      	movs	r2, #0
 8008e76:	6062      	str	r2, [r4, #4]
 8008e78:	6922      	ldr	r2, [r4, #16]
 8008e7a:	04d9      	lsls	r1, r3, #19
 8008e7c:	6022      	str	r2, [r4, #0]
 8008e7e:	d504      	bpl.n	8008e8a <__sflush_r+0x76>
 8008e80:	1c42      	adds	r2, r0, #1
 8008e82:	d101      	bne.n	8008e88 <__sflush_r+0x74>
 8008e84:	682b      	ldr	r3, [r5, #0]
 8008e86:	b903      	cbnz	r3, 8008e8a <__sflush_r+0x76>
 8008e88:	6560      	str	r0, [r4, #84]	@ 0x54
 8008e8a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008e8c:	602f      	str	r7, [r5, #0]
 8008e8e:	b1b9      	cbz	r1, 8008ec0 <__sflush_r+0xac>
 8008e90:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008e94:	4299      	cmp	r1, r3
 8008e96:	d002      	beq.n	8008e9e <__sflush_r+0x8a>
 8008e98:	4628      	mov	r0, r5
 8008e9a:	f7fe fa41 	bl	8007320 <_free_r>
 8008e9e:	2300      	movs	r3, #0
 8008ea0:	6363      	str	r3, [r4, #52]	@ 0x34
 8008ea2:	e00d      	b.n	8008ec0 <__sflush_r+0xac>
 8008ea4:	2301      	movs	r3, #1
 8008ea6:	4628      	mov	r0, r5
 8008ea8:	47b0      	blx	r6
 8008eaa:	4602      	mov	r2, r0
 8008eac:	1c50      	adds	r0, r2, #1
 8008eae:	d1c9      	bne.n	8008e44 <__sflush_r+0x30>
 8008eb0:	682b      	ldr	r3, [r5, #0]
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d0c6      	beq.n	8008e44 <__sflush_r+0x30>
 8008eb6:	2b1d      	cmp	r3, #29
 8008eb8:	d001      	beq.n	8008ebe <__sflush_r+0xaa>
 8008eba:	2b16      	cmp	r3, #22
 8008ebc:	d11d      	bne.n	8008efa <__sflush_r+0xe6>
 8008ebe:	602f      	str	r7, [r5, #0]
 8008ec0:	2000      	movs	r0, #0
 8008ec2:	e021      	b.n	8008f08 <__sflush_r+0xf4>
 8008ec4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008ec8:	b21b      	sxth	r3, r3
 8008eca:	e01a      	b.n	8008f02 <__sflush_r+0xee>
 8008ecc:	690f      	ldr	r7, [r1, #16]
 8008ece:	2f00      	cmp	r7, #0
 8008ed0:	d0f6      	beq.n	8008ec0 <__sflush_r+0xac>
 8008ed2:	0793      	lsls	r3, r2, #30
 8008ed4:	bf18      	it	ne
 8008ed6:	2300      	movne	r3, #0
 8008ed8:	680e      	ldr	r6, [r1, #0]
 8008eda:	bf08      	it	eq
 8008edc:	694b      	ldreq	r3, [r1, #20]
 8008ede:	1bf6      	subs	r6, r6, r7
 8008ee0:	600f      	str	r7, [r1, #0]
 8008ee2:	608b      	str	r3, [r1, #8]
 8008ee4:	2e00      	cmp	r6, #0
 8008ee6:	ddeb      	ble.n	8008ec0 <__sflush_r+0xac>
 8008ee8:	4633      	mov	r3, r6
 8008eea:	463a      	mov	r2, r7
 8008eec:	4628      	mov	r0, r5
 8008eee:	6a21      	ldr	r1, [r4, #32]
 8008ef0:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8008ef4:	47e0      	blx	ip
 8008ef6:	2800      	cmp	r0, #0
 8008ef8:	dc07      	bgt.n	8008f0a <__sflush_r+0xf6>
 8008efa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008efe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008f02:	f04f 30ff 	mov.w	r0, #4294967295
 8008f06:	81a3      	strh	r3, [r4, #12]
 8008f08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008f0a:	4407      	add	r7, r0
 8008f0c:	1a36      	subs	r6, r6, r0
 8008f0e:	e7e9      	b.n	8008ee4 <__sflush_r+0xd0>
 8008f10:	dfbffffe 	.word	0xdfbffffe

08008f14 <_fflush_r>:
 8008f14:	b538      	push	{r3, r4, r5, lr}
 8008f16:	690b      	ldr	r3, [r1, #16]
 8008f18:	4605      	mov	r5, r0
 8008f1a:	460c      	mov	r4, r1
 8008f1c:	b913      	cbnz	r3, 8008f24 <_fflush_r+0x10>
 8008f1e:	2500      	movs	r5, #0
 8008f20:	4628      	mov	r0, r5
 8008f22:	bd38      	pop	{r3, r4, r5, pc}
 8008f24:	b118      	cbz	r0, 8008f2e <_fflush_r+0x1a>
 8008f26:	6a03      	ldr	r3, [r0, #32]
 8008f28:	b90b      	cbnz	r3, 8008f2e <_fflush_r+0x1a>
 8008f2a:	f7fd f93f 	bl	80061ac <__sinit>
 8008f2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d0f3      	beq.n	8008f1e <_fflush_r+0xa>
 8008f36:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008f38:	07d0      	lsls	r0, r2, #31
 8008f3a:	d404      	bmi.n	8008f46 <_fflush_r+0x32>
 8008f3c:	0599      	lsls	r1, r3, #22
 8008f3e:	d402      	bmi.n	8008f46 <_fflush_r+0x32>
 8008f40:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008f42:	f7fd fb70 	bl	8006626 <__retarget_lock_acquire_recursive>
 8008f46:	4628      	mov	r0, r5
 8008f48:	4621      	mov	r1, r4
 8008f4a:	f7ff ff63 	bl	8008e14 <__sflush_r>
 8008f4e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008f50:	4605      	mov	r5, r0
 8008f52:	07da      	lsls	r2, r3, #31
 8008f54:	d4e4      	bmi.n	8008f20 <_fflush_r+0xc>
 8008f56:	89a3      	ldrh	r3, [r4, #12]
 8008f58:	059b      	lsls	r3, r3, #22
 8008f5a:	d4e1      	bmi.n	8008f20 <_fflush_r+0xc>
 8008f5c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008f5e:	f7fd fb63 	bl	8006628 <__retarget_lock_release_recursive>
 8008f62:	e7dd      	b.n	8008f20 <_fflush_r+0xc>

08008f64 <__swhatbuf_r>:
 8008f64:	b570      	push	{r4, r5, r6, lr}
 8008f66:	460c      	mov	r4, r1
 8008f68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f6c:	4615      	mov	r5, r2
 8008f6e:	2900      	cmp	r1, #0
 8008f70:	461e      	mov	r6, r3
 8008f72:	b096      	sub	sp, #88	@ 0x58
 8008f74:	da0c      	bge.n	8008f90 <__swhatbuf_r+0x2c>
 8008f76:	89a3      	ldrh	r3, [r4, #12]
 8008f78:	2100      	movs	r1, #0
 8008f7a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008f7e:	bf14      	ite	ne
 8008f80:	2340      	movne	r3, #64	@ 0x40
 8008f82:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008f86:	2000      	movs	r0, #0
 8008f88:	6031      	str	r1, [r6, #0]
 8008f8a:	602b      	str	r3, [r5, #0]
 8008f8c:	b016      	add	sp, #88	@ 0x58
 8008f8e:	bd70      	pop	{r4, r5, r6, pc}
 8008f90:	466a      	mov	r2, sp
 8008f92:	f000 f875 	bl	8009080 <_fstat_r>
 8008f96:	2800      	cmp	r0, #0
 8008f98:	dbed      	blt.n	8008f76 <__swhatbuf_r+0x12>
 8008f9a:	9901      	ldr	r1, [sp, #4]
 8008f9c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008fa0:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008fa4:	4259      	negs	r1, r3
 8008fa6:	4159      	adcs	r1, r3
 8008fa8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008fac:	e7eb      	b.n	8008f86 <__swhatbuf_r+0x22>

08008fae <__smakebuf_r>:
 8008fae:	898b      	ldrh	r3, [r1, #12]
 8008fb0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008fb2:	079d      	lsls	r5, r3, #30
 8008fb4:	4606      	mov	r6, r0
 8008fb6:	460c      	mov	r4, r1
 8008fb8:	d507      	bpl.n	8008fca <__smakebuf_r+0x1c>
 8008fba:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008fbe:	6023      	str	r3, [r4, #0]
 8008fc0:	6123      	str	r3, [r4, #16]
 8008fc2:	2301      	movs	r3, #1
 8008fc4:	6163      	str	r3, [r4, #20]
 8008fc6:	b003      	add	sp, #12
 8008fc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008fca:	466a      	mov	r2, sp
 8008fcc:	ab01      	add	r3, sp, #4
 8008fce:	f7ff ffc9 	bl	8008f64 <__swhatbuf_r>
 8008fd2:	9f00      	ldr	r7, [sp, #0]
 8008fd4:	4605      	mov	r5, r0
 8008fd6:	4639      	mov	r1, r7
 8008fd8:	4630      	mov	r0, r6
 8008fda:	f7fe fa13 	bl	8007404 <_malloc_r>
 8008fde:	b948      	cbnz	r0, 8008ff4 <__smakebuf_r+0x46>
 8008fe0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008fe4:	059a      	lsls	r2, r3, #22
 8008fe6:	d4ee      	bmi.n	8008fc6 <__smakebuf_r+0x18>
 8008fe8:	f023 0303 	bic.w	r3, r3, #3
 8008fec:	f043 0302 	orr.w	r3, r3, #2
 8008ff0:	81a3      	strh	r3, [r4, #12]
 8008ff2:	e7e2      	b.n	8008fba <__smakebuf_r+0xc>
 8008ff4:	89a3      	ldrh	r3, [r4, #12]
 8008ff6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008ffa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008ffe:	81a3      	strh	r3, [r4, #12]
 8009000:	9b01      	ldr	r3, [sp, #4]
 8009002:	6020      	str	r0, [r4, #0]
 8009004:	b15b      	cbz	r3, 800901e <__smakebuf_r+0x70>
 8009006:	4630      	mov	r0, r6
 8009008:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800900c:	f000 f84a 	bl	80090a4 <_isatty_r>
 8009010:	b128      	cbz	r0, 800901e <__smakebuf_r+0x70>
 8009012:	89a3      	ldrh	r3, [r4, #12]
 8009014:	f023 0303 	bic.w	r3, r3, #3
 8009018:	f043 0301 	orr.w	r3, r3, #1
 800901c:	81a3      	strh	r3, [r4, #12]
 800901e:	89a3      	ldrh	r3, [r4, #12]
 8009020:	431d      	orrs	r5, r3
 8009022:	81a5      	strh	r5, [r4, #12]
 8009024:	e7cf      	b.n	8008fc6 <__smakebuf_r+0x18>

08009026 <memmove>:
 8009026:	4288      	cmp	r0, r1
 8009028:	b510      	push	{r4, lr}
 800902a:	eb01 0402 	add.w	r4, r1, r2
 800902e:	d902      	bls.n	8009036 <memmove+0x10>
 8009030:	4284      	cmp	r4, r0
 8009032:	4623      	mov	r3, r4
 8009034:	d807      	bhi.n	8009046 <memmove+0x20>
 8009036:	1e43      	subs	r3, r0, #1
 8009038:	42a1      	cmp	r1, r4
 800903a:	d008      	beq.n	800904e <memmove+0x28>
 800903c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009040:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009044:	e7f8      	b.n	8009038 <memmove+0x12>
 8009046:	4601      	mov	r1, r0
 8009048:	4402      	add	r2, r0
 800904a:	428a      	cmp	r2, r1
 800904c:	d100      	bne.n	8009050 <memmove+0x2a>
 800904e:	bd10      	pop	{r4, pc}
 8009050:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009054:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009058:	e7f7      	b.n	800904a <memmove+0x24>

0800905a <strncmp>:
 800905a:	b510      	push	{r4, lr}
 800905c:	b16a      	cbz	r2, 800907a <strncmp+0x20>
 800905e:	3901      	subs	r1, #1
 8009060:	1884      	adds	r4, r0, r2
 8009062:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009066:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800906a:	429a      	cmp	r2, r3
 800906c:	d103      	bne.n	8009076 <strncmp+0x1c>
 800906e:	42a0      	cmp	r0, r4
 8009070:	d001      	beq.n	8009076 <strncmp+0x1c>
 8009072:	2a00      	cmp	r2, #0
 8009074:	d1f5      	bne.n	8009062 <strncmp+0x8>
 8009076:	1ad0      	subs	r0, r2, r3
 8009078:	bd10      	pop	{r4, pc}
 800907a:	4610      	mov	r0, r2
 800907c:	e7fc      	b.n	8009078 <strncmp+0x1e>
	...

08009080 <_fstat_r>:
 8009080:	b538      	push	{r3, r4, r5, lr}
 8009082:	2300      	movs	r3, #0
 8009084:	4d06      	ldr	r5, [pc, #24]	@ (80090a0 <_fstat_r+0x20>)
 8009086:	4604      	mov	r4, r0
 8009088:	4608      	mov	r0, r1
 800908a:	4611      	mov	r1, r2
 800908c:	602b      	str	r3, [r5, #0]
 800908e:	f7f8 f9af 	bl	80013f0 <_fstat>
 8009092:	1c43      	adds	r3, r0, #1
 8009094:	d102      	bne.n	800909c <_fstat_r+0x1c>
 8009096:	682b      	ldr	r3, [r5, #0]
 8009098:	b103      	cbz	r3, 800909c <_fstat_r+0x1c>
 800909a:	6023      	str	r3, [r4, #0]
 800909c:	bd38      	pop	{r3, r4, r5, pc}
 800909e:	bf00      	nop
 80090a0:	20003384 	.word	0x20003384

080090a4 <_isatty_r>:
 80090a4:	b538      	push	{r3, r4, r5, lr}
 80090a6:	2300      	movs	r3, #0
 80090a8:	4d05      	ldr	r5, [pc, #20]	@ (80090c0 <_isatty_r+0x1c>)
 80090aa:	4604      	mov	r4, r0
 80090ac:	4608      	mov	r0, r1
 80090ae:	602b      	str	r3, [r5, #0]
 80090b0:	f7f8 f9ad 	bl	800140e <_isatty>
 80090b4:	1c43      	adds	r3, r0, #1
 80090b6:	d102      	bne.n	80090be <_isatty_r+0x1a>
 80090b8:	682b      	ldr	r3, [r5, #0]
 80090ba:	b103      	cbz	r3, 80090be <_isatty_r+0x1a>
 80090bc:	6023      	str	r3, [r4, #0]
 80090be:	bd38      	pop	{r3, r4, r5, pc}
 80090c0:	20003384 	.word	0x20003384

080090c4 <_sbrk_r>:
 80090c4:	b538      	push	{r3, r4, r5, lr}
 80090c6:	2300      	movs	r3, #0
 80090c8:	4d05      	ldr	r5, [pc, #20]	@ (80090e0 <_sbrk_r+0x1c>)
 80090ca:	4604      	mov	r4, r0
 80090cc:	4608      	mov	r0, r1
 80090ce:	602b      	str	r3, [r5, #0]
 80090d0:	f7f8 f9b4 	bl	800143c <_sbrk>
 80090d4:	1c43      	adds	r3, r0, #1
 80090d6:	d102      	bne.n	80090de <_sbrk_r+0x1a>
 80090d8:	682b      	ldr	r3, [r5, #0]
 80090da:	b103      	cbz	r3, 80090de <_sbrk_r+0x1a>
 80090dc:	6023      	str	r3, [r4, #0]
 80090de:	bd38      	pop	{r3, r4, r5, pc}
 80090e0:	20003384 	.word	0x20003384

080090e4 <nan>:
 80090e4:	2000      	movs	r0, #0
 80090e6:	4901      	ldr	r1, [pc, #4]	@ (80090ec <nan+0x8>)
 80090e8:	4770      	bx	lr
 80090ea:	bf00      	nop
 80090ec:	7ff80000 	.word	0x7ff80000

080090f0 <__assert_func>:
 80090f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80090f2:	4614      	mov	r4, r2
 80090f4:	461a      	mov	r2, r3
 80090f6:	4b09      	ldr	r3, [pc, #36]	@ (800911c <__assert_func+0x2c>)
 80090f8:	4605      	mov	r5, r0
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	68d8      	ldr	r0, [r3, #12]
 80090fe:	b954      	cbnz	r4, 8009116 <__assert_func+0x26>
 8009100:	4b07      	ldr	r3, [pc, #28]	@ (8009120 <__assert_func+0x30>)
 8009102:	461c      	mov	r4, r3
 8009104:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009108:	9100      	str	r1, [sp, #0]
 800910a:	462b      	mov	r3, r5
 800910c:	4905      	ldr	r1, [pc, #20]	@ (8009124 <__assert_func+0x34>)
 800910e:	f000 fba7 	bl	8009860 <fiprintf>
 8009112:	f000 fbb7 	bl	8009884 <abort>
 8009116:	4b04      	ldr	r3, [pc, #16]	@ (8009128 <__assert_func+0x38>)
 8009118:	e7f4      	b.n	8009104 <__assert_func+0x14>
 800911a:	bf00      	nop
 800911c:	20000420 	.word	0x20000420
 8009120:	0800a01d 	.word	0x0800a01d
 8009124:	08009fef 	.word	0x08009fef
 8009128:	08009fe2 	.word	0x08009fe2

0800912c <_calloc_r>:
 800912c:	b570      	push	{r4, r5, r6, lr}
 800912e:	fba1 5402 	umull	r5, r4, r1, r2
 8009132:	b93c      	cbnz	r4, 8009144 <_calloc_r+0x18>
 8009134:	4629      	mov	r1, r5
 8009136:	f7fe f965 	bl	8007404 <_malloc_r>
 800913a:	4606      	mov	r6, r0
 800913c:	b928      	cbnz	r0, 800914a <_calloc_r+0x1e>
 800913e:	2600      	movs	r6, #0
 8009140:	4630      	mov	r0, r6
 8009142:	bd70      	pop	{r4, r5, r6, pc}
 8009144:	220c      	movs	r2, #12
 8009146:	6002      	str	r2, [r0, #0]
 8009148:	e7f9      	b.n	800913e <_calloc_r+0x12>
 800914a:	462a      	mov	r2, r5
 800914c:	4621      	mov	r1, r4
 800914e:	f7fd f9ed 	bl	800652c <memset>
 8009152:	e7f5      	b.n	8009140 <_calloc_r+0x14>

08009154 <rshift>:
 8009154:	6903      	ldr	r3, [r0, #16]
 8009156:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800915a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800915e:	f100 0414 	add.w	r4, r0, #20
 8009162:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009166:	dd46      	ble.n	80091f6 <rshift+0xa2>
 8009168:	f011 011f 	ands.w	r1, r1, #31
 800916c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009170:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009174:	d10c      	bne.n	8009190 <rshift+0x3c>
 8009176:	4629      	mov	r1, r5
 8009178:	f100 0710 	add.w	r7, r0, #16
 800917c:	42b1      	cmp	r1, r6
 800917e:	d335      	bcc.n	80091ec <rshift+0x98>
 8009180:	1a9b      	subs	r3, r3, r2
 8009182:	009b      	lsls	r3, r3, #2
 8009184:	1eea      	subs	r2, r5, #3
 8009186:	4296      	cmp	r6, r2
 8009188:	bf38      	it	cc
 800918a:	2300      	movcc	r3, #0
 800918c:	4423      	add	r3, r4
 800918e:	e015      	b.n	80091bc <rshift+0x68>
 8009190:	46a1      	mov	r9, r4
 8009192:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009196:	f1c1 0820 	rsb	r8, r1, #32
 800919a:	40cf      	lsrs	r7, r1
 800919c:	f105 0e04 	add.w	lr, r5, #4
 80091a0:	4576      	cmp	r6, lr
 80091a2:	46f4      	mov	ip, lr
 80091a4:	d816      	bhi.n	80091d4 <rshift+0x80>
 80091a6:	1a9a      	subs	r2, r3, r2
 80091a8:	0092      	lsls	r2, r2, #2
 80091aa:	3a04      	subs	r2, #4
 80091ac:	3501      	adds	r5, #1
 80091ae:	42ae      	cmp	r6, r5
 80091b0:	bf38      	it	cc
 80091b2:	2200      	movcc	r2, #0
 80091b4:	18a3      	adds	r3, r4, r2
 80091b6:	50a7      	str	r7, [r4, r2]
 80091b8:	b107      	cbz	r7, 80091bc <rshift+0x68>
 80091ba:	3304      	adds	r3, #4
 80091bc:	42a3      	cmp	r3, r4
 80091be:	eba3 0204 	sub.w	r2, r3, r4
 80091c2:	bf08      	it	eq
 80091c4:	2300      	moveq	r3, #0
 80091c6:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80091ca:	6102      	str	r2, [r0, #16]
 80091cc:	bf08      	it	eq
 80091ce:	6143      	streq	r3, [r0, #20]
 80091d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80091d4:	f8dc c000 	ldr.w	ip, [ip]
 80091d8:	fa0c fc08 	lsl.w	ip, ip, r8
 80091dc:	ea4c 0707 	orr.w	r7, ip, r7
 80091e0:	f849 7b04 	str.w	r7, [r9], #4
 80091e4:	f85e 7b04 	ldr.w	r7, [lr], #4
 80091e8:	40cf      	lsrs	r7, r1
 80091ea:	e7d9      	b.n	80091a0 <rshift+0x4c>
 80091ec:	f851 cb04 	ldr.w	ip, [r1], #4
 80091f0:	f847 cf04 	str.w	ip, [r7, #4]!
 80091f4:	e7c2      	b.n	800917c <rshift+0x28>
 80091f6:	4623      	mov	r3, r4
 80091f8:	e7e0      	b.n	80091bc <rshift+0x68>

080091fa <__hexdig_fun>:
 80091fa:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 80091fe:	2b09      	cmp	r3, #9
 8009200:	d802      	bhi.n	8009208 <__hexdig_fun+0xe>
 8009202:	3820      	subs	r0, #32
 8009204:	b2c0      	uxtb	r0, r0
 8009206:	4770      	bx	lr
 8009208:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800920c:	2b05      	cmp	r3, #5
 800920e:	d801      	bhi.n	8009214 <__hexdig_fun+0x1a>
 8009210:	3847      	subs	r0, #71	@ 0x47
 8009212:	e7f7      	b.n	8009204 <__hexdig_fun+0xa>
 8009214:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8009218:	2b05      	cmp	r3, #5
 800921a:	d801      	bhi.n	8009220 <__hexdig_fun+0x26>
 800921c:	3827      	subs	r0, #39	@ 0x27
 800921e:	e7f1      	b.n	8009204 <__hexdig_fun+0xa>
 8009220:	2000      	movs	r0, #0
 8009222:	4770      	bx	lr

08009224 <__gethex>:
 8009224:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009228:	468a      	mov	sl, r1
 800922a:	4690      	mov	r8, r2
 800922c:	b085      	sub	sp, #20
 800922e:	9302      	str	r3, [sp, #8]
 8009230:	680b      	ldr	r3, [r1, #0]
 8009232:	9001      	str	r0, [sp, #4]
 8009234:	1c9c      	adds	r4, r3, #2
 8009236:	46a1      	mov	r9, r4
 8009238:	f814 0b01 	ldrb.w	r0, [r4], #1
 800923c:	2830      	cmp	r0, #48	@ 0x30
 800923e:	d0fa      	beq.n	8009236 <__gethex+0x12>
 8009240:	eba9 0303 	sub.w	r3, r9, r3
 8009244:	f1a3 0b02 	sub.w	fp, r3, #2
 8009248:	f7ff ffd7 	bl	80091fa <__hexdig_fun>
 800924c:	4605      	mov	r5, r0
 800924e:	2800      	cmp	r0, #0
 8009250:	d168      	bne.n	8009324 <__gethex+0x100>
 8009252:	2201      	movs	r2, #1
 8009254:	4648      	mov	r0, r9
 8009256:	499f      	ldr	r1, [pc, #636]	@ (80094d4 <__gethex+0x2b0>)
 8009258:	f7ff feff 	bl	800905a <strncmp>
 800925c:	4607      	mov	r7, r0
 800925e:	2800      	cmp	r0, #0
 8009260:	d167      	bne.n	8009332 <__gethex+0x10e>
 8009262:	f899 0001 	ldrb.w	r0, [r9, #1]
 8009266:	4626      	mov	r6, r4
 8009268:	f7ff ffc7 	bl	80091fa <__hexdig_fun>
 800926c:	2800      	cmp	r0, #0
 800926e:	d062      	beq.n	8009336 <__gethex+0x112>
 8009270:	4623      	mov	r3, r4
 8009272:	7818      	ldrb	r0, [r3, #0]
 8009274:	4699      	mov	r9, r3
 8009276:	2830      	cmp	r0, #48	@ 0x30
 8009278:	f103 0301 	add.w	r3, r3, #1
 800927c:	d0f9      	beq.n	8009272 <__gethex+0x4e>
 800927e:	f7ff ffbc 	bl	80091fa <__hexdig_fun>
 8009282:	fab0 f580 	clz	r5, r0
 8009286:	f04f 0b01 	mov.w	fp, #1
 800928a:	096d      	lsrs	r5, r5, #5
 800928c:	464a      	mov	r2, r9
 800928e:	4616      	mov	r6, r2
 8009290:	7830      	ldrb	r0, [r6, #0]
 8009292:	3201      	adds	r2, #1
 8009294:	f7ff ffb1 	bl	80091fa <__hexdig_fun>
 8009298:	2800      	cmp	r0, #0
 800929a:	d1f8      	bne.n	800928e <__gethex+0x6a>
 800929c:	2201      	movs	r2, #1
 800929e:	4630      	mov	r0, r6
 80092a0:	498c      	ldr	r1, [pc, #560]	@ (80094d4 <__gethex+0x2b0>)
 80092a2:	f7ff feda 	bl	800905a <strncmp>
 80092a6:	2800      	cmp	r0, #0
 80092a8:	d13f      	bne.n	800932a <__gethex+0x106>
 80092aa:	b944      	cbnz	r4, 80092be <__gethex+0x9a>
 80092ac:	1c74      	adds	r4, r6, #1
 80092ae:	4622      	mov	r2, r4
 80092b0:	4616      	mov	r6, r2
 80092b2:	7830      	ldrb	r0, [r6, #0]
 80092b4:	3201      	adds	r2, #1
 80092b6:	f7ff ffa0 	bl	80091fa <__hexdig_fun>
 80092ba:	2800      	cmp	r0, #0
 80092bc:	d1f8      	bne.n	80092b0 <__gethex+0x8c>
 80092be:	1ba4      	subs	r4, r4, r6
 80092c0:	00a7      	lsls	r7, r4, #2
 80092c2:	7833      	ldrb	r3, [r6, #0]
 80092c4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80092c8:	2b50      	cmp	r3, #80	@ 0x50
 80092ca:	d13e      	bne.n	800934a <__gethex+0x126>
 80092cc:	7873      	ldrb	r3, [r6, #1]
 80092ce:	2b2b      	cmp	r3, #43	@ 0x2b
 80092d0:	d033      	beq.n	800933a <__gethex+0x116>
 80092d2:	2b2d      	cmp	r3, #45	@ 0x2d
 80092d4:	d034      	beq.n	8009340 <__gethex+0x11c>
 80092d6:	2400      	movs	r4, #0
 80092d8:	1c71      	adds	r1, r6, #1
 80092da:	7808      	ldrb	r0, [r1, #0]
 80092dc:	f7ff ff8d 	bl	80091fa <__hexdig_fun>
 80092e0:	1e43      	subs	r3, r0, #1
 80092e2:	b2db      	uxtb	r3, r3
 80092e4:	2b18      	cmp	r3, #24
 80092e6:	d830      	bhi.n	800934a <__gethex+0x126>
 80092e8:	f1a0 0210 	sub.w	r2, r0, #16
 80092ec:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80092f0:	f7ff ff83 	bl	80091fa <__hexdig_fun>
 80092f4:	f100 3cff 	add.w	ip, r0, #4294967295
 80092f8:	fa5f fc8c 	uxtb.w	ip, ip
 80092fc:	f1bc 0f18 	cmp.w	ip, #24
 8009300:	f04f 030a 	mov.w	r3, #10
 8009304:	d91e      	bls.n	8009344 <__gethex+0x120>
 8009306:	b104      	cbz	r4, 800930a <__gethex+0xe6>
 8009308:	4252      	negs	r2, r2
 800930a:	4417      	add	r7, r2
 800930c:	f8ca 1000 	str.w	r1, [sl]
 8009310:	b1ed      	cbz	r5, 800934e <__gethex+0x12a>
 8009312:	f1bb 0f00 	cmp.w	fp, #0
 8009316:	bf0c      	ite	eq
 8009318:	2506      	moveq	r5, #6
 800931a:	2500      	movne	r5, #0
 800931c:	4628      	mov	r0, r5
 800931e:	b005      	add	sp, #20
 8009320:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009324:	2500      	movs	r5, #0
 8009326:	462c      	mov	r4, r5
 8009328:	e7b0      	b.n	800928c <__gethex+0x68>
 800932a:	2c00      	cmp	r4, #0
 800932c:	d1c7      	bne.n	80092be <__gethex+0x9a>
 800932e:	4627      	mov	r7, r4
 8009330:	e7c7      	b.n	80092c2 <__gethex+0x9e>
 8009332:	464e      	mov	r6, r9
 8009334:	462f      	mov	r7, r5
 8009336:	2501      	movs	r5, #1
 8009338:	e7c3      	b.n	80092c2 <__gethex+0x9e>
 800933a:	2400      	movs	r4, #0
 800933c:	1cb1      	adds	r1, r6, #2
 800933e:	e7cc      	b.n	80092da <__gethex+0xb6>
 8009340:	2401      	movs	r4, #1
 8009342:	e7fb      	b.n	800933c <__gethex+0x118>
 8009344:	fb03 0002 	mla	r0, r3, r2, r0
 8009348:	e7ce      	b.n	80092e8 <__gethex+0xc4>
 800934a:	4631      	mov	r1, r6
 800934c:	e7de      	b.n	800930c <__gethex+0xe8>
 800934e:	4629      	mov	r1, r5
 8009350:	eba6 0309 	sub.w	r3, r6, r9
 8009354:	3b01      	subs	r3, #1
 8009356:	2b07      	cmp	r3, #7
 8009358:	dc0a      	bgt.n	8009370 <__gethex+0x14c>
 800935a:	9801      	ldr	r0, [sp, #4]
 800935c:	f7fe f8de 	bl	800751c <_Balloc>
 8009360:	4604      	mov	r4, r0
 8009362:	b940      	cbnz	r0, 8009376 <__gethex+0x152>
 8009364:	4602      	mov	r2, r0
 8009366:	21e4      	movs	r1, #228	@ 0xe4
 8009368:	4b5b      	ldr	r3, [pc, #364]	@ (80094d8 <__gethex+0x2b4>)
 800936a:	485c      	ldr	r0, [pc, #368]	@ (80094dc <__gethex+0x2b8>)
 800936c:	f7ff fec0 	bl	80090f0 <__assert_func>
 8009370:	3101      	adds	r1, #1
 8009372:	105b      	asrs	r3, r3, #1
 8009374:	e7ef      	b.n	8009356 <__gethex+0x132>
 8009376:	2300      	movs	r3, #0
 8009378:	f100 0a14 	add.w	sl, r0, #20
 800937c:	4655      	mov	r5, sl
 800937e:	469b      	mov	fp, r3
 8009380:	45b1      	cmp	r9, r6
 8009382:	d337      	bcc.n	80093f4 <__gethex+0x1d0>
 8009384:	f845 bb04 	str.w	fp, [r5], #4
 8009388:	eba5 050a 	sub.w	r5, r5, sl
 800938c:	10ad      	asrs	r5, r5, #2
 800938e:	6125      	str	r5, [r4, #16]
 8009390:	4658      	mov	r0, fp
 8009392:	f7fe f9b5 	bl	8007700 <__hi0bits>
 8009396:	016d      	lsls	r5, r5, #5
 8009398:	f8d8 6000 	ldr.w	r6, [r8]
 800939c:	1a2d      	subs	r5, r5, r0
 800939e:	42b5      	cmp	r5, r6
 80093a0:	dd54      	ble.n	800944c <__gethex+0x228>
 80093a2:	1bad      	subs	r5, r5, r6
 80093a4:	4629      	mov	r1, r5
 80093a6:	4620      	mov	r0, r4
 80093a8:	f7fe fd3d 	bl	8007e26 <__any_on>
 80093ac:	4681      	mov	r9, r0
 80093ae:	b178      	cbz	r0, 80093d0 <__gethex+0x1ac>
 80093b0:	f04f 0901 	mov.w	r9, #1
 80093b4:	1e6b      	subs	r3, r5, #1
 80093b6:	1159      	asrs	r1, r3, #5
 80093b8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80093bc:	f003 021f 	and.w	r2, r3, #31
 80093c0:	fa09 f202 	lsl.w	r2, r9, r2
 80093c4:	420a      	tst	r2, r1
 80093c6:	d003      	beq.n	80093d0 <__gethex+0x1ac>
 80093c8:	454b      	cmp	r3, r9
 80093ca:	dc36      	bgt.n	800943a <__gethex+0x216>
 80093cc:	f04f 0902 	mov.w	r9, #2
 80093d0:	4629      	mov	r1, r5
 80093d2:	4620      	mov	r0, r4
 80093d4:	f7ff febe 	bl	8009154 <rshift>
 80093d8:	442f      	add	r7, r5
 80093da:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80093de:	42bb      	cmp	r3, r7
 80093e0:	da42      	bge.n	8009468 <__gethex+0x244>
 80093e2:	4621      	mov	r1, r4
 80093e4:	9801      	ldr	r0, [sp, #4]
 80093e6:	f7fe f8d9 	bl	800759c <_Bfree>
 80093ea:	2300      	movs	r3, #0
 80093ec:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80093ee:	25a3      	movs	r5, #163	@ 0xa3
 80093f0:	6013      	str	r3, [r2, #0]
 80093f2:	e793      	b.n	800931c <__gethex+0xf8>
 80093f4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 80093f8:	2a2e      	cmp	r2, #46	@ 0x2e
 80093fa:	d012      	beq.n	8009422 <__gethex+0x1fe>
 80093fc:	2b20      	cmp	r3, #32
 80093fe:	d104      	bne.n	800940a <__gethex+0x1e6>
 8009400:	f845 bb04 	str.w	fp, [r5], #4
 8009404:	f04f 0b00 	mov.w	fp, #0
 8009408:	465b      	mov	r3, fp
 800940a:	7830      	ldrb	r0, [r6, #0]
 800940c:	9303      	str	r3, [sp, #12]
 800940e:	f7ff fef4 	bl	80091fa <__hexdig_fun>
 8009412:	9b03      	ldr	r3, [sp, #12]
 8009414:	f000 000f 	and.w	r0, r0, #15
 8009418:	4098      	lsls	r0, r3
 800941a:	ea4b 0b00 	orr.w	fp, fp, r0
 800941e:	3304      	adds	r3, #4
 8009420:	e7ae      	b.n	8009380 <__gethex+0x15c>
 8009422:	45b1      	cmp	r9, r6
 8009424:	d8ea      	bhi.n	80093fc <__gethex+0x1d8>
 8009426:	2201      	movs	r2, #1
 8009428:	4630      	mov	r0, r6
 800942a:	492a      	ldr	r1, [pc, #168]	@ (80094d4 <__gethex+0x2b0>)
 800942c:	9303      	str	r3, [sp, #12]
 800942e:	f7ff fe14 	bl	800905a <strncmp>
 8009432:	9b03      	ldr	r3, [sp, #12]
 8009434:	2800      	cmp	r0, #0
 8009436:	d1e1      	bne.n	80093fc <__gethex+0x1d8>
 8009438:	e7a2      	b.n	8009380 <__gethex+0x15c>
 800943a:	4620      	mov	r0, r4
 800943c:	1ea9      	subs	r1, r5, #2
 800943e:	f7fe fcf2 	bl	8007e26 <__any_on>
 8009442:	2800      	cmp	r0, #0
 8009444:	d0c2      	beq.n	80093cc <__gethex+0x1a8>
 8009446:	f04f 0903 	mov.w	r9, #3
 800944a:	e7c1      	b.n	80093d0 <__gethex+0x1ac>
 800944c:	da09      	bge.n	8009462 <__gethex+0x23e>
 800944e:	1b75      	subs	r5, r6, r5
 8009450:	4621      	mov	r1, r4
 8009452:	462a      	mov	r2, r5
 8009454:	9801      	ldr	r0, [sp, #4]
 8009456:	f7fe fab7 	bl	80079c8 <__lshift>
 800945a:	4604      	mov	r4, r0
 800945c:	1b7f      	subs	r7, r7, r5
 800945e:	f100 0a14 	add.w	sl, r0, #20
 8009462:	f04f 0900 	mov.w	r9, #0
 8009466:	e7b8      	b.n	80093da <__gethex+0x1b6>
 8009468:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800946c:	42bd      	cmp	r5, r7
 800946e:	dd6f      	ble.n	8009550 <__gethex+0x32c>
 8009470:	1bed      	subs	r5, r5, r7
 8009472:	42ae      	cmp	r6, r5
 8009474:	dc34      	bgt.n	80094e0 <__gethex+0x2bc>
 8009476:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800947a:	2b02      	cmp	r3, #2
 800947c:	d022      	beq.n	80094c4 <__gethex+0x2a0>
 800947e:	2b03      	cmp	r3, #3
 8009480:	d024      	beq.n	80094cc <__gethex+0x2a8>
 8009482:	2b01      	cmp	r3, #1
 8009484:	d115      	bne.n	80094b2 <__gethex+0x28e>
 8009486:	42ae      	cmp	r6, r5
 8009488:	d113      	bne.n	80094b2 <__gethex+0x28e>
 800948a:	2e01      	cmp	r6, #1
 800948c:	d10b      	bne.n	80094a6 <__gethex+0x282>
 800948e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009492:	9a02      	ldr	r2, [sp, #8]
 8009494:	2562      	movs	r5, #98	@ 0x62
 8009496:	6013      	str	r3, [r2, #0]
 8009498:	2301      	movs	r3, #1
 800949a:	6123      	str	r3, [r4, #16]
 800949c:	f8ca 3000 	str.w	r3, [sl]
 80094a0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80094a2:	601c      	str	r4, [r3, #0]
 80094a4:	e73a      	b.n	800931c <__gethex+0xf8>
 80094a6:	4620      	mov	r0, r4
 80094a8:	1e71      	subs	r1, r6, #1
 80094aa:	f7fe fcbc 	bl	8007e26 <__any_on>
 80094ae:	2800      	cmp	r0, #0
 80094b0:	d1ed      	bne.n	800948e <__gethex+0x26a>
 80094b2:	4621      	mov	r1, r4
 80094b4:	9801      	ldr	r0, [sp, #4]
 80094b6:	f7fe f871 	bl	800759c <_Bfree>
 80094ba:	2300      	movs	r3, #0
 80094bc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80094be:	2550      	movs	r5, #80	@ 0x50
 80094c0:	6013      	str	r3, [r2, #0]
 80094c2:	e72b      	b.n	800931c <__gethex+0xf8>
 80094c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d1f3      	bne.n	80094b2 <__gethex+0x28e>
 80094ca:	e7e0      	b.n	800948e <__gethex+0x26a>
 80094cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d1dd      	bne.n	800948e <__gethex+0x26a>
 80094d2:	e7ee      	b.n	80094b2 <__gethex+0x28e>
 80094d4:	08009e70 	.word	0x08009e70
 80094d8:	08009d07 	.word	0x08009d07
 80094dc:	0800a01e 	.word	0x0800a01e
 80094e0:	1e6f      	subs	r7, r5, #1
 80094e2:	f1b9 0f00 	cmp.w	r9, #0
 80094e6:	d130      	bne.n	800954a <__gethex+0x326>
 80094e8:	b127      	cbz	r7, 80094f4 <__gethex+0x2d0>
 80094ea:	4639      	mov	r1, r7
 80094ec:	4620      	mov	r0, r4
 80094ee:	f7fe fc9a 	bl	8007e26 <__any_on>
 80094f2:	4681      	mov	r9, r0
 80094f4:	2301      	movs	r3, #1
 80094f6:	4629      	mov	r1, r5
 80094f8:	1b76      	subs	r6, r6, r5
 80094fa:	2502      	movs	r5, #2
 80094fc:	117a      	asrs	r2, r7, #5
 80094fe:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8009502:	f007 071f 	and.w	r7, r7, #31
 8009506:	40bb      	lsls	r3, r7
 8009508:	4213      	tst	r3, r2
 800950a:	4620      	mov	r0, r4
 800950c:	bf18      	it	ne
 800950e:	f049 0902 	orrne.w	r9, r9, #2
 8009512:	f7ff fe1f 	bl	8009154 <rshift>
 8009516:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800951a:	f1b9 0f00 	cmp.w	r9, #0
 800951e:	d047      	beq.n	80095b0 <__gethex+0x38c>
 8009520:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009524:	2b02      	cmp	r3, #2
 8009526:	d015      	beq.n	8009554 <__gethex+0x330>
 8009528:	2b03      	cmp	r3, #3
 800952a:	d017      	beq.n	800955c <__gethex+0x338>
 800952c:	2b01      	cmp	r3, #1
 800952e:	d109      	bne.n	8009544 <__gethex+0x320>
 8009530:	f019 0f02 	tst.w	r9, #2
 8009534:	d006      	beq.n	8009544 <__gethex+0x320>
 8009536:	f8da 3000 	ldr.w	r3, [sl]
 800953a:	ea49 0903 	orr.w	r9, r9, r3
 800953e:	f019 0f01 	tst.w	r9, #1
 8009542:	d10e      	bne.n	8009562 <__gethex+0x33e>
 8009544:	f045 0510 	orr.w	r5, r5, #16
 8009548:	e032      	b.n	80095b0 <__gethex+0x38c>
 800954a:	f04f 0901 	mov.w	r9, #1
 800954e:	e7d1      	b.n	80094f4 <__gethex+0x2d0>
 8009550:	2501      	movs	r5, #1
 8009552:	e7e2      	b.n	800951a <__gethex+0x2f6>
 8009554:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009556:	f1c3 0301 	rsb	r3, r3, #1
 800955a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800955c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800955e:	2b00      	cmp	r3, #0
 8009560:	d0f0      	beq.n	8009544 <__gethex+0x320>
 8009562:	f04f 0c00 	mov.w	ip, #0
 8009566:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800956a:	f104 0314 	add.w	r3, r4, #20
 800956e:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8009572:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8009576:	4618      	mov	r0, r3
 8009578:	f853 2b04 	ldr.w	r2, [r3], #4
 800957c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009580:	d01b      	beq.n	80095ba <__gethex+0x396>
 8009582:	3201      	adds	r2, #1
 8009584:	6002      	str	r2, [r0, #0]
 8009586:	2d02      	cmp	r5, #2
 8009588:	f104 0314 	add.w	r3, r4, #20
 800958c:	d13c      	bne.n	8009608 <__gethex+0x3e4>
 800958e:	f8d8 2000 	ldr.w	r2, [r8]
 8009592:	3a01      	subs	r2, #1
 8009594:	42b2      	cmp	r2, r6
 8009596:	d109      	bne.n	80095ac <__gethex+0x388>
 8009598:	2201      	movs	r2, #1
 800959a:	1171      	asrs	r1, r6, #5
 800959c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80095a0:	f006 061f 	and.w	r6, r6, #31
 80095a4:	fa02 f606 	lsl.w	r6, r2, r6
 80095a8:	421e      	tst	r6, r3
 80095aa:	d13a      	bne.n	8009622 <__gethex+0x3fe>
 80095ac:	f045 0520 	orr.w	r5, r5, #32
 80095b0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80095b2:	601c      	str	r4, [r3, #0]
 80095b4:	9b02      	ldr	r3, [sp, #8]
 80095b6:	601f      	str	r7, [r3, #0]
 80095b8:	e6b0      	b.n	800931c <__gethex+0xf8>
 80095ba:	4299      	cmp	r1, r3
 80095bc:	f843 cc04 	str.w	ip, [r3, #-4]
 80095c0:	d8d9      	bhi.n	8009576 <__gethex+0x352>
 80095c2:	68a3      	ldr	r3, [r4, #8]
 80095c4:	459b      	cmp	fp, r3
 80095c6:	db17      	blt.n	80095f8 <__gethex+0x3d4>
 80095c8:	6861      	ldr	r1, [r4, #4]
 80095ca:	9801      	ldr	r0, [sp, #4]
 80095cc:	3101      	adds	r1, #1
 80095ce:	f7fd ffa5 	bl	800751c <_Balloc>
 80095d2:	4681      	mov	r9, r0
 80095d4:	b918      	cbnz	r0, 80095de <__gethex+0x3ba>
 80095d6:	4602      	mov	r2, r0
 80095d8:	2184      	movs	r1, #132	@ 0x84
 80095da:	4b19      	ldr	r3, [pc, #100]	@ (8009640 <__gethex+0x41c>)
 80095dc:	e6c5      	b.n	800936a <__gethex+0x146>
 80095de:	6922      	ldr	r2, [r4, #16]
 80095e0:	f104 010c 	add.w	r1, r4, #12
 80095e4:	3202      	adds	r2, #2
 80095e6:	0092      	lsls	r2, r2, #2
 80095e8:	300c      	adds	r0, #12
 80095ea:	f7fd f834 	bl	8006656 <memcpy>
 80095ee:	4621      	mov	r1, r4
 80095f0:	9801      	ldr	r0, [sp, #4]
 80095f2:	f7fd ffd3 	bl	800759c <_Bfree>
 80095f6:	464c      	mov	r4, r9
 80095f8:	6923      	ldr	r3, [r4, #16]
 80095fa:	1c5a      	adds	r2, r3, #1
 80095fc:	6122      	str	r2, [r4, #16]
 80095fe:	2201      	movs	r2, #1
 8009600:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009604:	615a      	str	r2, [r3, #20]
 8009606:	e7be      	b.n	8009586 <__gethex+0x362>
 8009608:	6922      	ldr	r2, [r4, #16]
 800960a:	455a      	cmp	r2, fp
 800960c:	dd0b      	ble.n	8009626 <__gethex+0x402>
 800960e:	2101      	movs	r1, #1
 8009610:	4620      	mov	r0, r4
 8009612:	f7ff fd9f 	bl	8009154 <rshift>
 8009616:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800961a:	3701      	adds	r7, #1
 800961c:	42bb      	cmp	r3, r7
 800961e:	f6ff aee0 	blt.w	80093e2 <__gethex+0x1be>
 8009622:	2501      	movs	r5, #1
 8009624:	e7c2      	b.n	80095ac <__gethex+0x388>
 8009626:	f016 061f 	ands.w	r6, r6, #31
 800962a:	d0fa      	beq.n	8009622 <__gethex+0x3fe>
 800962c:	4453      	add	r3, sl
 800962e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8009632:	f7fe f865 	bl	8007700 <__hi0bits>
 8009636:	f1c6 0620 	rsb	r6, r6, #32
 800963a:	42b0      	cmp	r0, r6
 800963c:	dbe7      	blt.n	800960e <__gethex+0x3ea>
 800963e:	e7f0      	b.n	8009622 <__gethex+0x3fe>
 8009640:	08009d07 	.word	0x08009d07

08009644 <L_shift>:
 8009644:	f1c2 0208 	rsb	r2, r2, #8
 8009648:	0092      	lsls	r2, r2, #2
 800964a:	b570      	push	{r4, r5, r6, lr}
 800964c:	f1c2 0620 	rsb	r6, r2, #32
 8009650:	6843      	ldr	r3, [r0, #4]
 8009652:	6804      	ldr	r4, [r0, #0]
 8009654:	fa03 f506 	lsl.w	r5, r3, r6
 8009658:	432c      	orrs	r4, r5
 800965a:	40d3      	lsrs	r3, r2
 800965c:	6004      	str	r4, [r0, #0]
 800965e:	f840 3f04 	str.w	r3, [r0, #4]!
 8009662:	4288      	cmp	r0, r1
 8009664:	d3f4      	bcc.n	8009650 <L_shift+0xc>
 8009666:	bd70      	pop	{r4, r5, r6, pc}

08009668 <__match>:
 8009668:	b530      	push	{r4, r5, lr}
 800966a:	6803      	ldr	r3, [r0, #0]
 800966c:	3301      	adds	r3, #1
 800966e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009672:	b914      	cbnz	r4, 800967a <__match+0x12>
 8009674:	6003      	str	r3, [r0, #0]
 8009676:	2001      	movs	r0, #1
 8009678:	bd30      	pop	{r4, r5, pc}
 800967a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800967e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8009682:	2d19      	cmp	r5, #25
 8009684:	bf98      	it	ls
 8009686:	3220      	addls	r2, #32
 8009688:	42a2      	cmp	r2, r4
 800968a:	d0f0      	beq.n	800966e <__match+0x6>
 800968c:	2000      	movs	r0, #0
 800968e:	e7f3      	b.n	8009678 <__match+0x10>

08009690 <__hexnan>:
 8009690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009694:	2500      	movs	r5, #0
 8009696:	680b      	ldr	r3, [r1, #0]
 8009698:	4682      	mov	sl, r0
 800969a:	115e      	asrs	r6, r3, #5
 800969c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80096a0:	f013 031f 	ands.w	r3, r3, #31
 80096a4:	bf18      	it	ne
 80096a6:	3604      	addne	r6, #4
 80096a8:	1f37      	subs	r7, r6, #4
 80096aa:	4690      	mov	r8, r2
 80096ac:	46b9      	mov	r9, r7
 80096ae:	463c      	mov	r4, r7
 80096b0:	46ab      	mov	fp, r5
 80096b2:	b087      	sub	sp, #28
 80096b4:	6801      	ldr	r1, [r0, #0]
 80096b6:	9301      	str	r3, [sp, #4]
 80096b8:	f846 5c04 	str.w	r5, [r6, #-4]
 80096bc:	9502      	str	r5, [sp, #8]
 80096be:	784a      	ldrb	r2, [r1, #1]
 80096c0:	1c4b      	adds	r3, r1, #1
 80096c2:	9303      	str	r3, [sp, #12]
 80096c4:	b342      	cbz	r2, 8009718 <__hexnan+0x88>
 80096c6:	4610      	mov	r0, r2
 80096c8:	9105      	str	r1, [sp, #20]
 80096ca:	9204      	str	r2, [sp, #16]
 80096cc:	f7ff fd95 	bl	80091fa <__hexdig_fun>
 80096d0:	2800      	cmp	r0, #0
 80096d2:	d151      	bne.n	8009778 <__hexnan+0xe8>
 80096d4:	9a04      	ldr	r2, [sp, #16]
 80096d6:	9905      	ldr	r1, [sp, #20]
 80096d8:	2a20      	cmp	r2, #32
 80096da:	d818      	bhi.n	800970e <__hexnan+0x7e>
 80096dc:	9b02      	ldr	r3, [sp, #8]
 80096de:	459b      	cmp	fp, r3
 80096e0:	dd13      	ble.n	800970a <__hexnan+0x7a>
 80096e2:	454c      	cmp	r4, r9
 80096e4:	d206      	bcs.n	80096f4 <__hexnan+0x64>
 80096e6:	2d07      	cmp	r5, #7
 80096e8:	dc04      	bgt.n	80096f4 <__hexnan+0x64>
 80096ea:	462a      	mov	r2, r5
 80096ec:	4649      	mov	r1, r9
 80096ee:	4620      	mov	r0, r4
 80096f0:	f7ff ffa8 	bl	8009644 <L_shift>
 80096f4:	4544      	cmp	r4, r8
 80096f6:	d952      	bls.n	800979e <__hexnan+0x10e>
 80096f8:	2300      	movs	r3, #0
 80096fa:	f1a4 0904 	sub.w	r9, r4, #4
 80096fe:	f844 3c04 	str.w	r3, [r4, #-4]
 8009702:	461d      	mov	r5, r3
 8009704:	464c      	mov	r4, r9
 8009706:	f8cd b008 	str.w	fp, [sp, #8]
 800970a:	9903      	ldr	r1, [sp, #12]
 800970c:	e7d7      	b.n	80096be <__hexnan+0x2e>
 800970e:	2a29      	cmp	r2, #41	@ 0x29
 8009710:	d157      	bne.n	80097c2 <__hexnan+0x132>
 8009712:	3102      	adds	r1, #2
 8009714:	f8ca 1000 	str.w	r1, [sl]
 8009718:	f1bb 0f00 	cmp.w	fp, #0
 800971c:	d051      	beq.n	80097c2 <__hexnan+0x132>
 800971e:	454c      	cmp	r4, r9
 8009720:	d206      	bcs.n	8009730 <__hexnan+0xa0>
 8009722:	2d07      	cmp	r5, #7
 8009724:	dc04      	bgt.n	8009730 <__hexnan+0xa0>
 8009726:	462a      	mov	r2, r5
 8009728:	4649      	mov	r1, r9
 800972a:	4620      	mov	r0, r4
 800972c:	f7ff ff8a 	bl	8009644 <L_shift>
 8009730:	4544      	cmp	r4, r8
 8009732:	d936      	bls.n	80097a2 <__hexnan+0x112>
 8009734:	4623      	mov	r3, r4
 8009736:	f1a8 0204 	sub.w	r2, r8, #4
 800973a:	f853 1b04 	ldr.w	r1, [r3], #4
 800973e:	429f      	cmp	r7, r3
 8009740:	f842 1f04 	str.w	r1, [r2, #4]!
 8009744:	d2f9      	bcs.n	800973a <__hexnan+0xaa>
 8009746:	1b3b      	subs	r3, r7, r4
 8009748:	f023 0303 	bic.w	r3, r3, #3
 800974c:	3304      	adds	r3, #4
 800974e:	3401      	adds	r4, #1
 8009750:	3e03      	subs	r6, #3
 8009752:	42b4      	cmp	r4, r6
 8009754:	bf88      	it	hi
 8009756:	2304      	movhi	r3, #4
 8009758:	2200      	movs	r2, #0
 800975a:	4443      	add	r3, r8
 800975c:	f843 2b04 	str.w	r2, [r3], #4
 8009760:	429f      	cmp	r7, r3
 8009762:	d2fb      	bcs.n	800975c <__hexnan+0xcc>
 8009764:	683b      	ldr	r3, [r7, #0]
 8009766:	b91b      	cbnz	r3, 8009770 <__hexnan+0xe0>
 8009768:	4547      	cmp	r7, r8
 800976a:	d128      	bne.n	80097be <__hexnan+0x12e>
 800976c:	2301      	movs	r3, #1
 800976e:	603b      	str	r3, [r7, #0]
 8009770:	2005      	movs	r0, #5
 8009772:	b007      	add	sp, #28
 8009774:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009778:	3501      	adds	r5, #1
 800977a:	2d08      	cmp	r5, #8
 800977c:	f10b 0b01 	add.w	fp, fp, #1
 8009780:	dd06      	ble.n	8009790 <__hexnan+0x100>
 8009782:	4544      	cmp	r4, r8
 8009784:	d9c1      	bls.n	800970a <__hexnan+0x7a>
 8009786:	2300      	movs	r3, #0
 8009788:	2501      	movs	r5, #1
 800978a:	f844 3c04 	str.w	r3, [r4, #-4]
 800978e:	3c04      	subs	r4, #4
 8009790:	6822      	ldr	r2, [r4, #0]
 8009792:	f000 000f 	and.w	r0, r0, #15
 8009796:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800979a:	6020      	str	r0, [r4, #0]
 800979c:	e7b5      	b.n	800970a <__hexnan+0x7a>
 800979e:	2508      	movs	r5, #8
 80097a0:	e7b3      	b.n	800970a <__hexnan+0x7a>
 80097a2:	9b01      	ldr	r3, [sp, #4]
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d0dd      	beq.n	8009764 <__hexnan+0xd4>
 80097a8:	f04f 32ff 	mov.w	r2, #4294967295
 80097ac:	f1c3 0320 	rsb	r3, r3, #32
 80097b0:	40da      	lsrs	r2, r3
 80097b2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80097b6:	4013      	ands	r3, r2
 80097b8:	f846 3c04 	str.w	r3, [r6, #-4]
 80097bc:	e7d2      	b.n	8009764 <__hexnan+0xd4>
 80097be:	3f04      	subs	r7, #4
 80097c0:	e7d0      	b.n	8009764 <__hexnan+0xd4>
 80097c2:	2004      	movs	r0, #4
 80097c4:	e7d5      	b.n	8009772 <__hexnan+0xe2>

080097c6 <__ascii_mbtowc>:
 80097c6:	b082      	sub	sp, #8
 80097c8:	b901      	cbnz	r1, 80097cc <__ascii_mbtowc+0x6>
 80097ca:	a901      	add	r1, sp, #4
 80097cc:	b142      	cbz	r2, 80097e0 <__ascii_mbtowc+0x1a>
 80097ce:	b14b      	cbz	r3, 80097e4 <__ascii_mbtowc+0x1e>
 80097d0:	7813      	ldrb	r3, [r2, #0]
 80097d2:	600b      	str	r3, [r1, #0]
 80097d4:	7812      	ldrb	r2, [r2, #0]
 80097d6:	1e10      	subs	r0, r2, #0
 80097d8:	bf18      	it	ne
 80097da:	2001      	movne	r0, #1
 80097dc:	b002      	add	sp, #8
 80097de:	4770      	bx	lr
 80097e0:	4610      	mov	r0, r2
 80097e2:	e7fb      	b.n	80097dc <__ascii_mbtowc+0x16>
 80097e4:	f06f 0001 	mvn.w	r0, #1
 80097e8:	e7f8      	b.n	80097dc <__ascii_mbtowc+0x16>

080097ea <_realloc_r>:
 80097ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80097ee:	4680      	mov	r8, r0
 80097f0:	4615      	mov	r5, r2
 80097f2:	460c      	mov	r4, r1
 80097f4:	b921      	cbnz	r1, 8009800 <_realloc_r+0x16>
 80097f6:	4611      	mov	r1, r2
 80097f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80097fc:	f7fd be02 	b.w	8007404 <_malloc_r>
 8009800:	b92a      	cbnz	r2, 800980e <_realloc_r+0x24>
 8009802:	f7fd fd8d 	bl	8007320 <_free_r>
 8009806:	2400      	movs	r4, #0
 8009808:	4620      	mov	r0, r4
 800980a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800980e:	f000 f840 	bl	8009892 <_malloc_usable_size_r>
 8009812:	4285      	cmp	r5, r0
 8009814:	4606      	mov	r6, r0
 8009816:	d802      	bhi.n	800981e <_realloc_r+0x34>
 8009818:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800981c:	d8f4      	bhi.n	8009808 <_realloc_r+0x1e>
 800981e:	4629      	mov	r1, r5
 8009820:	4640      	mov	r0, r8
 8009822:	f7fd fdef 	bl	8007404 <_malloc_r>
 8009826:	4607      	mov	r7, r0
 8009828:	2800      	cmp	r0, #0
 800982a:	d0ec      	beq.n	8009806 <_realloc_r+0x1c>
 800982c:	42b5      	cmp	r5, r6
 800982e:	462a      	mov	r2, r5
 8009830:	4621      	mov	r1, r4
 8009832:	bf28      	it	cs
 8009834:	4632      	movcs	r2, r6
 8009836:	f7fc ff0e 	bl	8006656 <memcpy>
 800983a:	4621      	mov	r1, r4
 800983c:	4640      	mov	r0, r8
 800983e:	f7fd fd6f 	bl	8007320 <_free_r>
 8009842:	463c      	mov	r4, r7
 8009844:	e7e0      	b.n	8009808 <_realloc_r+0x1e>

08009846 <__ascii_wctomb>:
 8009846:	4603      	mov	r3, r0
 8009848:	4608      	mov	r0, r1
 800984a:	b141      	cbz	r1, 800985e <__ascii_wctomb+0x18>
 800984c:	2aff      	cmp	r2, #255	@ 0xff
 800984e:	d904      	bls.n	800985a <__ascii_wctomb+0x14>
 8009850:	228a      	movs	r2, #138	@ 0x8a
 8009852:	f04f 30ff 	mov.w	r0, #4294967295
 8009856:	601a      	str	r2, [r3, #0]
 8009858:	4770      	bx	lr
 800985a:	2001      	movs	r0, #1
 800985c:	700a      	strb	r2, [r1, #0]
 800985e:	4770      	bx	lr

08009860 <fiprintf>:
 8009860:	b40e      	push	{r1, r2, r3}
 8009862:	b503      	push	{r0, r1, lr}
 8009864:	4601      	mov	r1, r0
 8009866:	ab03      	add	r3, sp, #12
 8009868:	4805      	ldr	r0, [pc, #20]	@ (8009880 <fiprintf+0x20>)
 800986a:	f853 2b04 	ldr.w	r2, [r3], #4
 800986e:	6800      	ldr	r0, [r0, #0]
 8009870:	9301      	str	r3, [sp, #4]
 8009872:	f000 f83d 	bl	80098f0 <_vfiprintf_r>
 8009876:	b002      	add	sp, #8
 8009878:	f85d eb04 	ldr.w	lr, [sp], #4
 800987c:	b003      	add	sp, #12
 800987e:	4770      	bx	lr
 8009880:	20000420 	.word	0x20000420

08009884 <abort>:
 8009884:	2006      	movs	r0, #6
 8009886:	b508      	push	{r3, lr}
 8009888:	f000 f972 	bl	8009b70 <raise>
 800988c:	2001      	movs	r0, #1
 800988e:	f7f7 fd60 	bl	8001352 <_exit>

08009892 <_malloc_usable_size_r>:
 8009892:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009896:	1f18      	subs	r0, r3, #4
 8009898:	2b00      	cmp	r3, #0
 800989a:	bfbc      	itt	lt
 800989c:	580b      	ldrlt	r3, [r1, r0]
 800989e:	18c0      	addlt	r0, r0, r3
 80098a0:	4770      	bx	lr

080098a2 <__sfputc_r>:
 80098a2:	6893      	ldr	r3, [r2, #8]
 80098a4:	b410      	push	{r4}
 80098a6:	3b01      	subs	r3, #1
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	6093      	str	r3, [r2, #8]
 80098ac:	da07      	bge.n	80098be <__sfputc_r+0x1c>
 80098ae:	6994      	ldr	r4, [r2, #24]
 80098b0:	42a3      	cmp	r3, r4
 80098b2:	db01      	blt.n	80098b8 <__sfputc_r+0x16>
 80098b4:	290a      	cmp	r1, #10
 80098b6:	d102      	bne.n	80098be <__sfputc_r+0x1c>
 80098b8:	bc10      	pop	{r4}
 80098ba:	f7fc bda2 	b.w	8006402 <__swbuf_r>
 80098be:	6813      	ldr	r3, [r2, #0]
 80098c0:	1c58      	adds	r0, r3, #1
 80098c2:	6010      	str	r0, [r2, #0]
 80098c4:	7019      	strb	r1, [r3, #0]
 80098c6:	4608      	mov	r0, r1
 80098c8:	bc10      	pop	{r4}
 80098ca:	4770      	bx	lr

080098cc <__sfputs_r>:
 80098cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098ce:	4606      	mov	r6, r0
 80098d0:	460f      	mov	r7, r1
 80098d2:	4614      	mov	r4, r2
 80098d4:	18d5      	adds	r5, r2, r3
 80098d6:	42ac      	cmp	r4, r5
 80098d8:	d101      	bne.n	80098de <__sfputs_r+0x12>
 80098da:	2000      	movs	r0, #0
 80098dc:	e007      	b.n	80098ee <__sfputs_r+0x22>
 80098de:	463a      	mov	r2, r7
 80098e0:	4630      	mov	r0, r6
 80098e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80098e6:	f7ff ffdc 	bl	80098a2 <__sfputc_r>
 80098ea:	1c43      	adds	r3, r0, #1
 80098ec:	d1f3      	bne.n	80098d6 <__sfputs_r+0xa>
 80098ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080098f0 <_vfiprintf_r>:
 80098f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098f4:	460d      	mov	r5, r1
 80098f6:	4614      	mov	r4, r2
 80098f8:	4698      	mov	r8, r3
 80098fa:	4606      	mov	r6, r0
 80098fc:	b09d      	sub	sp, #116	@ 0x74
 80098fe:	b118      	cbz	r0, 8009908 <_vfiprintf_r+0x18>
 8009900:	6a03      	ldr	r3, [r0, #32]
 8009902:	b90b      	cbnz	r3, 8009908 <_vfiprintf_r+0x18>
 8009904:	f7fc fc52 	bl	80061ac <__sinit>
 8009908:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800990a:	07d9      	lsls	r1, r3, #31
 800990c:	d405      	bmi.n	800991a <_vfiprintf_r+0x2a>
 800990e:	89ab      	ldrh	r3, [r5, #12]
 8009910:	059a      	lsls	r2, r3, #22
 8009912:	d402      	bmi.n	800991a <_vfiprintf_r+0x2a>
 8009914:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009916:	f7fc fe86 	bl	8006626 <__retarget_lock_acquire_recursive>
 800991a:	89ab      	ldrh	r3, [r5, #12]
 800991c:	071b      	lsls	r3, r3, #28
 800991e:	d501      	bpl.n	8009924 <_vfiprintf_r+0x34>
 8009920:	692b      	ldr	r3, [r5, #16]
 8009922:	b99b      	cbnz	r3, 800994c <_vfiprintf_r+0x5c>
 8009924:	4629      	mov	r1, r5
 8009926:	4630      	mov	r0, r6
 8009928:	f7fc fdaa 	bl	8006480 <__swsetup_r>
 800992c:	b170      	cbz	r0, 800994c <_vfiprintf_r+0x5c>
 800992e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009930:	07dc      	lsls	r4, r3, #31
 8009932:	d504      	bpl.n	800993e <_vfiprintf_r+0x4e>
 8009934:	f04f 30ff 	mov.w	r0, #4294967295
 8009938:	b01d      	add	sp, #116	@ 0x74
 800993a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800993e:	89ab      	ldrh	r3, [r5, #12]
 8009940:	0598      	lsls	r0, r3, #22
 8009942:	d4f7      	bmi.n	8009934 <_vfiprintf_r+0x44>
 8009944:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009946:	f7fc fe6f 	bl	8006628 <__retarget_lock_release_recursive>
 800994a:	e7f3      	b.n	8009934 <_vfiprintf_r+0x44>
 800994c:	2300      	movs	r3, #0
 800994e:	9309      	str	r3, [sp, #36]	@ 0x24
 8009950:	2320      	movs	r3, #32
 8009952:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009956:	2330      	movs	r3, #48	@ 0x30
 8009958:	f04f 0901 	mov.w	r9, #1
 800995c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009960:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8009b0c <_vfiprintf_r+0x21c>
 8009964:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009968:	4623      	mov	r3, r4
 800996a:	469a      	mov	sl, r3
 800996c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009970:	b10a      	cbz	r2, 8009976 <_vfiprintf_r+0x86>
 8009972:	2a25      	cmp	r2, #37	@ 0x25
 8009974:	d1f9      	bne.n	800996a <_vfiprintf_r+0x7a>
 8009976:	ebba 0b04 	subs.w	fp, sl, r4
 800997a:	d00b      	beq.n	8009994 <_vfiprintf_r+0xa4>
 800997c:	465b      	mov	r3, fp
 800997e:	4622      	mov	r2, r4
 8009980:	4629      	mov	r1, r5
 8009982:	4630      	mov	r0, r6
 8009984:	f7ff ffa2 	bl	80098cc <__sfputs_r>
 8009988:	3001      	adds	r0, #1
 800998a:	f000 80a7 	beq.w	8009adc <_vfiprintf_r+0x1ec>
 800998e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009990:	445a      	add	r2, fp
 8009992:	9209      	str	r2, [sp, #36]	@ 0x24
 8009994:	f89a 3000 	ldrb.w	r3, [sl]
 8009998:	2b00      	cmp	r3, #0
 800999a:	f000 809f 	beq.w	8009adc <_vfiprintf_r+0x1ec>
 800999e:	2300      	movs	r3, #0
 80099a0:	f04f 32ff 	mov.w	r2, #4294967295
 80099a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80099a8:	f10a 0a01 	add.w	sl, sl, #1
 80099ac:	9304      	str	r3, [sp, #16]
 80099ae:	9307      	str	r3, [sp, #28]
 80099b0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80099b4:	931a      	str	r3, [sp, #104]	@ 0x68
 80099b6:	4654      	mov	r4, sl
 80099b8:	2205      	movs	r2, #5
 80099ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80099be:	4853      	ldr	r0, [pc, #332]	@ (8009b0c <_vfiprintf_r+0x21c>)
 80099c0:	f7fc fe3b 	bl	800663a <memchr>
 80099c4:	9a04      	ldr	r2, [sp, #16]
 80099c6:	b9d8      	cbnz	r0, 8009a00 <_vfiprintf_r+0x110>
 80099c8:	06d1      	lsls	r1, r2, #27
 80099ca:	bf44      	itt	mi
 80099cc:	2320      	movmi	r3, #32
 80099ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80099d2:	0713      	lsls	r3, r2, #28
 80099d4:	bf44      	itt	mi
 80099d6:	232b      	movmi	r3, #43	@ 0x2b
 80099d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80099dc:	f89a 3000 	ldrb.w	r3, [sl]
 80099e0:	2b2a      	cmp	r3, #42	@ 0x2a
 80099e2:	d015      	beq.n	8009a10 <_vfiprintf_r+0x120>
 80099e4:	4654      	mov	r4, sl
 80099e6:	2000      	movs	r0, #0
 80099e8:	f04f 0c0a 	mov.w	ip, #10
 80099ec:	9a07      	ldr	r2, [sp, #28]
 80099ee:	4621      	mov	r1, r4
 80099f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80099f4:	3b30      	subs	r3, #48	@ 0x30
 80099f6:	2b09      	cmp	r3, #9
 80099f8:	d94b      	bls.n	8009a92 <_vfiprintf_r+0x1a2>
 80099fa:	b1b0      	cbz	r0, 8009a2a <_vfiprintf_r+0x13a>
 80099fc:	9207      	str	r2, [sp, #28]
 80099fe:	e014      	b.n	8009a2a <_vfiprintf_r+0x13a>
 8009a00:	eba0 0308 	sub.w	r3, r0, r8
 8009a04:	fa09 f303 	lsl.w	r3, r9, r3
 8009a08:	4313      	orrs	r3, r2
 8009a0a:	46a2      	mov	sl, r4
 8009a0c:	9304      	str	r3, [sp, #16]
 8009a0e:	e7d2      	b.n	80099b6 <_vfiprintf_r+0xc6>
 8009a10:	9b03      	ldr	r3, [sp, #12]
 8009a12:	1d19      	adds	r1, r3, #4
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	9103      	str	r1, [sp, #12]
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	bfbb      	ittet	lt
 8009a1c:	425b      	neglt	r3, r3
 8009a1e:	f042 0202 	orrlt.w	r2, r2, #2
 8009a22:	9307      	strge	r3, [sp, #28]
 8009a24:	9307      	strlt	r3, [sp, #28]
 8009a26:	bfb8      	it	lt
 8009a28:	9204      	strlt	r2, [sp, #16]
 8009a2a:	7823      	ldrb	r3, [r4, #0]
 8009a2c:	2b2e      	cmp	r3, #46	@ 0x2e
 8009a2e:	d10a      	bne.n	8009a46 <_vfiprintf_r+0x156>
 8009a30:	7863      	ldrb	r3, [r4, #1]
 8009a32:	2b2a      	cmp	r3, #42	@ 0x2a
 8009a34:	d132      	bne.n	8009a9c <_vfiprintf_r+0x1ac>
 8009a36:	9b03      	ldr	r3, [sp, #12]
 8009a38:	3402      	adds	r4, #2
 8009a3a:	1d1a      	adds	r2, r3, #4
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	9203      	str	r2, [sp, #12]
 8009a40:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009a44:	9305      	str	r3, [sp, #20]
 8009a46:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8009b10 <_vfiprintf_r+0x220>
 8009a4a:	2203      	movs	r2, #3
 8009a4c:	4650      	mov	r0, sl
 8009a4e:	7821      	ldrb	r1, [r4, #0]
 8009a50:	f7fc fdf3 	bl	800663a <memchr>
 8009a54:	b138      	cbz	r0, 8009a66 <_vfiprintf_r+0x176>
 8009a56:	2240      	movs	r2, #64	@ 0x40
 8009a58:	9b04      	ldr	r3, [sp, #16]
 8009a5a:	eba0 000a 	sub.w	r0, r0, sl
 8009a5e:	4082      	lsls	r2, r0
 8009a60:	4313      	orrs	r3, r2
 8009a62:	3401      	adds	r4, #1
 8009a64:	9304      	str	r3, [sp, #16]
 8009a66:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a6a:	2206      	movs	r2, #6
 8009a6c:	4829      	ldr	r0, [pc, #164]	@ (8009b14 <_vfiprintf_r+0x224>)
 8009a6e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009a72:	f7fc fde2 	bl	800663a <memchr>
 8009a76:	2800      	cmp	r0, #0
 8009a78:	d03f      	beq.n	8009afa <_vfiprintf_r+0x20a>
 8009a7a:	4b27      	ldr	r3, [pc, #156]	@ (8009b18 <_vfiprintf_r+0x228>)
 8009a7c:	bb1b      	cbnz	r3, 8009ac6 <_vfiprintf_r+0x1d6>
 8009a7e:	9b03      	ldr	r3, [sp, #12]
 8009a80:	3307      	adds	r3, #7
 8009a82:	f023 0307 	bic.w	r3, r3, #7
 8009a86:	3308      	adds	r3, #8
 8009a88:	9303      	str	r3, [sp, #12]
 8009a8a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009a8c:	443b      	add	r3, r7
 8009a8e:	9309      	str	r3, [sp, #36]	@ 0x24
 8009a90:	e76a      	b.n	8009968 <_vfiprintf_r+0x78>
 8009a92:	460c      	mov	r4, r1
 8009a94:	2001      	movs	r0, #1
 8009a96:	fb0c 3202 	mla	r2, ip, r2, r3
 8009a9a:	e7a8      	b.n	80099ee <_vfiprintf_r+0xfe>
 8009a9c:	2300      	movs	r3, #0
 8009a9e:	f04f 0c0a 	mov.w	ip, #10
 8009aa2:	4619      	mov	r1, r3
 8009aa4:	3401      	adds	r4, #1
 8009aa6:	9305      	str	r3, [sp, #20]
 8009aa8:	4620      	mov	r0, r4
 8009aaa:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009aae:	3a30      	subs	r2, #48	@ 0x30
 8009ab0:	2a09      	cmp	r2, #9
 8009ab2:	d903      	bls.n	8009abc <_vfiprintf_r+0x1cc>
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d0c6      	beq.n	8009a46 <_vfiprintf_r+0x156>
 8009ab8:	9105      	str	r1, [sp, #20]
 8009aba:	e7c4      	b.n	8009a46 <_vfiprintf_r+0x156>
 8009abc:	4604      	mov	r4, r0
 8009abe:	2301      	movs	r3, #1
 8009ac0:	fb0c 2101 	mla	r1, ip, r1, r2
 8009ac4:	e7f0      	b.n	8009aa8 <_vfiprintf_r+0x1b8>
 8009ac6:	ab03      	add	r3, sp, #12
 8009ac8:	9300      	str	r3, [sp, #0]
 8009aca:	462a      	mov	r2, r5
 8009acc:	4630      	mov	r0, r6
 8009ace:	4b13      	ldr	r3, [pc, #76]	@ (8009b1c <_vfiprintf_r+0x22c>)
 8009ad0:	a904      	add	r1, sp, #16
 8009ad2:	f7fb fd11 	bl	80054f8 <_printf_float>
 8009ad6:	4607      	mov	r7, r0
 8009ad8:	1c78      	adds	r0, r7, #1
 8009ada:	d1d6      	bne.n	8009a8a <_vfiprintf_r+0x19a>
 8009adc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009ade:	07d9      	lsls	r1, r3, #31
 8009ae0:	d405      	bmi.n	8009aee <_vfiprintf_r+0x1fe>
 8009ae2:	89ab      	ldrh	r3, [r5, #12]
 8009ae4:	059a      	lsls	r2, r3, #22
 8009ae6:	d402      	bmi.n	8009aee <_vfiprintf_r+0x1fe>
 8009ae8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009aea:	f7fc fd9d 	bl	8006628 <__retarget_lock_release_recursive>
 8009aee:	89ab      	ldrh	r3, [r5, #12]
 8009af0:	065b      	lsls	r3, r3, #25
 8009af2:	f53f af1f 	bmi.w	8009934 <_vfiprintf_r+0x44>
 8009af6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009af8:	e71e      	b.n	8009938 <_vfiprintf_r+0x48>
 8009afa:	ab03      	add	r3, sp, #12
 8009afc:	9300      	str	r3, [sp, #0]
 8009afe:	462a      	mov	r2, r5
 8009b00:	4630      	mov	r0, r6
 8009b02:	4b06      	ldr	r3, [pc, #24]	@ (8009b1c <_vfiprintf_r+0x22c>)
 8009b04:	a904      	add	r1, sp, #16
 8009b06:	f7fb ff95 	bl	8005a34 <_printf_i>
 8009b0a:	e7e4      	b.n	8009ad6 <_vfiprintf_r+0x1e6>
 8009b0c:	08009fc9 	.word	0x08009fc9
 8009b10:	08009fcf 	.word	0x08009fcf
 8009b14:	08009fd3 	.word	0x08009fd3
 8009b18:	080054f9 	.word	0x080054f9
 8009b1c:	080098cd 	.word	0x080098cd

08009b20 <_raise_r>:
 8009b20:	291f      	cmp	r1, #31
 8009b22:	b538      	push	{r3, r4, r5, lr}
 8009b24:	4605      	mov	r5, r0
 8009b26:	460c      	mov	r4, r1
 8009b28:	d904      	bls.n	8009b34 <_raise_r+0x14>
 8009b2a:	2316      	movs	r3, #22
 8009b2c:	6003      	str	r3, [r0, #0]
 8009b2e:	f04f 30ff 	mov.w	r0, #4294967295
 8009b32:	bd38      	pop	{r3, r4, r5, pc}
 8009b34:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009b36:	b112      	cbz	r2, 8009b3e <_raise_r+0x1e>
 8009b38:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009b3c:	b94b      	cbnz	r3, 8009b52 <_raise_r+0x32>
 8009b3e:	4628      	mov	r0, r5
 8009b40:	f000 f830 	bl	8009ba4 <_getpid_r>
 8009b44:	4622      	mov	r2, r4
 8009b46:	4601      	mov	r1, r0
 8009b48:	4628      	mov	r0, r5
 8009b4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009b4e:	f000 b817 	b.w	8009b80 <_kill_r>
 8009b52:	2b01      	cmp	r3, #1
 8009b54:	d00a      	beq.n	8009b6c <_raise_r+0x4c>
 8009b56:	1c59      	adds	r1, r3, #1
 8009b58:	d103      	bne.n	8009b62 <_raise_r+0x42>
 8009b5a:	2316      	movs	r3, #22
 8009b5c:	6003      	str	r3, [r0, #0]
 8009b5e:	2001      	movs	r0, #1
 8009b60:	e7e7      	b.n	8009b32 <_raise_r+0x12>
 8009b62:	2100      	movs	r1, #0
 8009b64:	4620      	mov	r0, r4
 8009b66:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009b6a:	4798      	blx	r3
 8009b6c:	2000      	movs	r0, #0
 8009b6e:	e7e0      	b.n	8009b32 <_raise_r+0x12>

08009b70 <raise>:
 8009b70:	4b02      	ldr	r3, [pc, #8]	@ (8009b7c <raise+0xc>)
 8009b72:	4601      	mov	r1, r0
 8009b74:	6818      	ldr	r0, [r3, #0]
 8009b76:	f7ff bfd3 	b.w	8009b20 <_raise_r>
 8009b7a:	bf00      	nop
 8009b7c:	20000420 	.word	0x20000420

08009b80 <_kill_r>:
 8009b80:	b538      	push	{r3, r4, r5, lr}
 8009b82:	2300      	movs	r3, #0
 8009b84:	4d06      	ldr	r5, [pc, #24]	@ (8009ba0 <_kill_r+0x20>)
 8009b86:	4604      	mov	r4, r0
 8009b88:	4608      	mov	r0, r1
 8009b8a:	4611      	mov	r1, r2
 8009b8c:	602b      	str	r3, [r5, #0]
 8009b8e:	f7f7 fbd0 	bl	8001332 <_kill>
 8009b92:	1c43      	adds	r3, r0, #1
 8009b94:	d102      	bne.n	8009b9c <_kill_r+0x1c>
 8009b96:	682b      	ldr	r3, [r5, #0]
 8009b98:	b103      	cbz	r3, 8009b9c <_kill_r+0x1c>
 8009b9a:	6023      	str	r3, [r4, #0]
 8009b9c:	bd38      	pop	{r3, r4, r5, pc}
 8009b9e:	bf00      	nop
 8009ba0:	20003384 	.word	0x20003384

08009ba4 <_getpid_r>:
 8009ba4:	f7f7 bbbe 	b.w	8001324 <_getpid>

08009ba8 <_init>:
 8009ba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009baa:	bf00      	nop
 8009bac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009bae:	bc08      	pop	{r3}
 8009bb0:	469e      	mov	lr, r3
 8009bb2:	4770      	bx	lr

08009bb4 <_fini>:
 8009bb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bb6:	bf00      	nop
 8009bb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009bba:	bc08      	pop	{r3}
 8009bbc:	469e      	mov	lr, r3
 8009bbe:	4770      	bx	lr
