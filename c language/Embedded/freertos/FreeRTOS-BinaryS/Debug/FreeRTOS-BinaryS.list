
FreeRTOS-BinaryS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009d30  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000498  08009e40  08009e40  0000ae40  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a2d8  0800a2d8  0000c5dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800a2d8  0800a2d8  0000b2d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a2e0  0800a2e0  0000c5dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a2e0  0800a2e0  0000b2e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a2e4  0800a2e4  0000b2e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000005dc  20000000  0800a2e8  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002b88  200005dc  0800a8c4  0000c5dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20003164  0800a8c4  0000d164  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000c5dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000130ef  00000000  00000000  0000c605  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000338a  00000000  00000000  0001f6f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013e8  00000000  00000000  00022a80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f91  00000000  00000000  00023e68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001bb91  00000000  00000000  00024df9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001891a  00000000  00000000  0004098a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009d687  00000000  00000000  000592a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f692b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000067a0  00000000  00000000  000f6970  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  000fd110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200005dc 	.word	0x200005dc
 800012c:	00000000 	.word	0x00000000
 8000130:	08009e28 	.word	0x08009e28

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200005e0 	.word	0x200005e0
 800014c:	08009e28 	.word	0x08009e28

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_d2lz>:
 8000b68:	b538      	push	{r3, r4, r5, lr}
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	4604      	mov	r4, r0
 8000b70:	460d      	mov	r5, r1
 8000b72:	f7ff ff23 	bl	80009bc <__aeabi_dcmplt>
 8000b76:	b928      	cbnz	r0, 8000b84 <__aeabi_d2lz+0x1c>
 8000b78:	4620      	mov	r0, r4
 8000b7a:	4629      	mov	r1, r5
 8000b7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000b80:	f000 b80a 	b.w	8000b98 <__aeabi_d2ulz>
 8000b84:	4620      	mov	r0, r4
 8000b86:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000b8a:	f000 f805 	bl	8000b98 <__aeabi_d2ulz>
 8000b8e:	4240      	negs	r0, r0
 8000b90:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b94:	bd38      	pop	{r3, r4, r5, pc}
 8000b96:	bf00      	nop

08000b98 <__aeabi_d2ulz>:
 8000b98:	b5d0      	push	{r4, r6, r7, lr}
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	4b0b      	ldr	r3, [pc, #44]	@ (8000bcc <__aeabi_d2ulz+0x34>)
 8000b9e:	4606      	mov	r6, r0
 8000ba0:	460f      	mov	r7, r1
 8000ba2:	f7ff fc99 	bl	80004d8 <__aeabi_dmul>
 8000ba6:	f7ff ff6f 	bl	8000a88 <__aeabi_d2uiz>
 8000baa:	4604      	mov	r4, r0
 8000bac:	f7ff fc1a 	bl	80003e4 <__aeabi_ui2d>
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	4b07      	ldr	r3, [pc, #28]	@ (8000bd0 <__aeabi_d2ulz+0x38>)
 8000bb4:	f7ff fc90 	bl	80004d8 <__aeabi_dmul>
 8000bb8:	4602      	mov	r2, r0
 8000bba:	460b      	mov	r3, r1
 8000bbc:	4630      	mov	r0, r6
 8000bbe:	4639      	mov	r1, r7
 8000bc0:	f7ff fad2 	bl	8000168 <__aeabi_dsub>
 8000bc4:	f7ff ff60 	bl	8000a88 <__aeabi_d2uiz>
 8000bc8:	4621      	mov	r1, r4
 8000bca:	bdd0      	pop	{r4, r6, r7, pc}
 8000bcc:	3df00000 	.word	0x3df00000
 8000bd0:	41f00000 	.word	0x41f00000

08000bd4 <StartTask>:
static void Task2(void *pvParameters);

QueueHandle_t Semaphore;

static void StartTask(void *pvParameters)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b084      	sub	sp, #16
 8000bd8:	af02      	add	r7, sp, #8
 8000bda:	6078      	str	r0, [r7, #4]
	taskENTER_CRITICAL();
 8000bdc:	f002 fdfc 	bl	80037d8 <vPortEnterCritical>
	//Create three tasks.
	xTaskCreate(Task1, "Task1", TASK1_STACK, NULL, TASK1_PRIORITY, &Task1Handle);
 8000be0:	4b0e      	ldr	r3, [pc, #56]	@ (8000c1c <StartTask+0x48>)
 8000be2:	9301      	str	r3, [sp, #4]
 8000be4:	2301      	movs	r3, #1
 8000be6:	9300      	str	r3, [sp, #0]
 8000be8:	2300      	movs	r3, #0
 8000bea:	2280      	movs	r2, #128	@ 0x80
 8000bec:	490c      	ldr	r1, [pc, #48]	@ (8000c20 <StartTask+0x4c>)
 8000bee:	480d      	ldr	r0, [pc, #52]	@ (8000c24 <StartTask+0x50>)
 8000bf0:	f003 fc55 	bl	800449e <xTaskCreate>
	xTaskCreate(Task2, "Task2", TASK2_STACK, NULL, TASK2_PRIORITY, &Task2Handle);
 8000bf4:	4b0c      	ldr	r3, [pc, #48]	@ (8000c28 <StartTask+0x54>)
 8000bf6:	9301      	str	r3, [sp, #4]
 8000bf8:	2301      	movs	r3, #1
 8000bfa:	9300      	str	r3, [sp, #0]
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	2280      	movs	r2, #128	@ 0x80
 8000c00:	490a      	ldr	r1, [pc, #40]	@ (8000c2c <StartTask+0x58>)
 8000c02:	480b      	ldr	r0, [pc, #44]	@ (8000c30 <StartTask+0x5c>)
 8000c04:	f003 fc4b 	bl	800449e <xTaskCreate>
	//Delete itself.
	vTaskDelete(NULL);
 8000c08:	2000      	movs	r0, #0
 8000c0a:	f003 fd67 	bl	80046dc <vTaskDelete>
	taskEXIT_CRITICAL();
 8000c0e:	f002 fdfd 	bl	800380c <vPortExitCritical>
}
 8000c12:	bf00      	nop
 8000c14:	3708      	adds	r7, #8
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	200005fc 	.word	0x200005fc
 8000c20:	08009e40 	.word	0x08009e40
 8000c24:	08000c35 	.word	0x08000c35
 8000c28:	20000600 	.word	0x20000600
 8000c2c:	08009e48 	.word	0x08009e48
 8000c30:	08000c6d 	.word	0x08000c6d

08000c34 <Task1>:

static void Task1(void *pvParameters)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b084      	sub	sp, #16
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
	uint8_t key = 0;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	73fb      	strb	r3, [r7, #15]
	while (1)
	{
		key = Key_Scan();
 8000c40:	f000 f8ae 	bl	8000da0 <Key_Scan>
 8000c44:	4603      	mov	r3, r0
 8000c46:	73fb      	strb	r3, [r7, #15]
		if (key == KEY1)
 8000c48:	7bfb      	ldrb	r3, [r7, #15]
 8000c4a:	2b01      	cmp	r3, #1
 8000c4c:	d106      	bne.n	8000c5c <Task1+0x28>
		{
			xSemaphoreGive(Semaphore);
 8000c4e:	4b06      	ldr	r3, [pc, #24]	@ (8000c68 <Task1+0x34>)
 8000c50:	6818      	ldr	r0, [r3, #0]
 8000c52:	2300      	movs	r3, #0
 8000c54:	2200      	movs	r2, #0
 8000c56:	2100      	movs	r1, #0
 8000c58:	f003 f972 	bl	8003f40 <xQueueGenericSend>
		}
		vTaskDelay(1000);
 8000c5c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000c60:	f003 fdcc 	bl	80047fc <vTaskDelay>
		key = Key_Scan();
 8000c64:	e7ec      	b.n	8000c40 <Task1+0xc>
 8000c66:	bf00      	nop
 8000c68:	20000604 	.word	0x20000604

08000c6c <Task2>:
	}
}

static void Task2(void *pvParameters)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b082      	sub	sp, #8
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
	while (1)
	{
		xSemaphoreTake(Semaphore, HAL_MAX_DELAY);
 8000c74:	4b05      	ldr	r3, [pc, #20]	@ (8000c8c <Task2+0x20>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	f04f 31ff 	mov.w	r1, #4294967295
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f003 fa09 	bl	8004094 <xQueueSemaphoreTake>
		printf("ok\r\n");
 8000c82:	4803      	ldr	r0, [pc, #12]	@ (8000c90 <Task2+0x24>)
 8000c84:	f005 fc9c 	bl	80065c0 <puts>
		xSemaphoreTake(Semaphore, HAL_MAX_DELAY);
 8000c88:	bf00      	nop
 8000c8a:	e7f3      	b.n	8000c74 <Task2+0x8>
 8000c8c:	20000604 	.word	0x20000604
 8000c90:	08009e50 	.word	0x08009e50

08000c94 <FreeRTOSStart>:
	}
}

void FreeRTOSStart()
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b082      	sub	sp, #8
 8000c98:	af02      	add	r7, sp, #8
	vSemaphoreCreateBinary(Semaphore);
 8000c9a:	2203      	movs	r2, #3
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	2001      	movs	r0, #1
 8000ca0:	f003 f8f0 	bl	8003e84 <xQueueGenericCreate>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	4a0e      	ldr	r2, [pc, #56]	@ (8000ce0 <FreeRTOSStart+0x4c>)
 8000ca8:	6013      	str	r3, [r2, #0]
 8000caa:	4b0d      	ldr	r3, [pc, #52]	@ (8000ce0 <FreeRTOSStart+0x4c>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d006      	beq.n	8000cc0 <FreeRTOSStart+0x2c>
 8000cb2:	4b0b      	ldr	r3, [pc, #44]	@ (8000ce0 <FreeRTOSStart+0x4c>)
 8000cb4:	6818      	ldr	r0, [r3, #0]
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	2200      	movs	r2, #0
 8000cba:	2100      	movs	r1, #0
 8000cbc:	f003 f940 	bl	8003f40 <xQueueGenericSend>
	//Create a startup task.
	xTaskCreate(StartTask, "StartTask", START_TASK_STACK, NULL, START_TASK_PRIORITY, &startTaskHandle);
 8000cc0:	4b08      	ldr	r3, [pc, #32]	@ (8000ce4 <FreeRTOSStart+0x50>)
 8000cc2:	9301      	str	r3, [sp, #4]
 8000cc4:	2301      	movs	r3, #1
 8000cc6:	9300      	str	r3, [sp, #0]
 8000cc8:	2300      	movs	r3, #0
 8000cca:	2280      	movs	r2, #128	@ 0x80
 8000ccc:	4906      	ldr	r1, [pc, #24]	@ (8000ce8 <FreeRTOSStart+0x54>)
 8000cce:	4807      	ldr	r0, [pc, #28]	@ (8000cec <FreeRTOSStart+0x58>)
 8000cd0:	f003 fbe5 	bl	800449e <xTaskCreate>
	//Start the scheduler.
	vTaskStartScheduler();
 8000cd4:	f003 fe00 	bl	80048d8 <vTaskStartScheduler>
}
 8000cd8:	bf00      	nop
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	20000604 	.word	0x20000604
 8000ce4:	200005f8 	.word	0x200005f8
 8000ce8:	08009e54 	.word	0x08009e54
 8000cec:	08000bd5 	.word	0x08000bd5

08000cf0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b088      	sub	sp, #32
 8000cf4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cf6:	f107 0310 	add.w	r3, r7, #16
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	601a      	str	r2, [r3, #0]
 8000cfe:	605a      	str	r2, [r3, #4]
 8000d00:	609a      	str	r2, [r3, #8]
 8000d02:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d04:	4b23      	ldr	r3, [pc, #140]	@ (8000d94 <MX_GPIO_Init+0xa4>)
 8000d06:	699b      	ldr	r3, [r3, #24]
 8000d08:	4a22      	ldr	r2, [pc, #136]	@ (8000d94 <MX_GPIO_Init+0xa4>)
 8000d0a:	f043 0320 	orr.w	r3, r3, #32
 8000d0e:	6193      	str	r3, [r2, #24]
 8000d10:	4b20      	ldr	r3, [pc, #128]	@ (8000d94 <MX_GPIO_Init+0xa4>)
 8000d12:	699b      	ldr	r3, [r3, #24]
 8000d14:	f003 0320 	and.w	r3, r3, #32
 8000d18:	60fb      	str	r3, [r7, #12]
 8000d1a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d1c:	4b1d      	ldr	r3, [pc, #116]	@ (8000d94 <MX_GPIO_Init+0xa4>)
 8000d1e:	699b      	ldr	r3, [r3, #24]
 8000d20:	4a1c      	ldr	r2, [pc, #112]	@ (8000d94 <MX_GPIO_Init+0xa4>)
 8000d22:	f043 0304 	orr.w	r3, r3, #4
 8000d26:	6193      	str	r3, [r2, #24]
 8000d28:	4b1a      	ldr	r3, [pc, #104]	@ (8000d94 <MX_GPIO_Init+0xa4>)
 8000d2a:	699b      	ldr	r3, [r3, #24]
 8000d2c:	f003 0304 	and.w	r3, r3, #4
 8000d30:	60bb      	str	r3, [r7, #8]
 8000d32:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d34:	4b17      	ldr	r3, [pc, #92]	@ (8000d94 <MX_GPIO_Init+0xa4>)
 8000d36:	699b      	ldr	r3, [r3, #24]
 8000d38:	4a16      	ldr	r2, [pc, #88]	@ (8000d94 <MX_GPIO_Init+0xa4>)
 8000d3a:	f043 0308 	orr.w	r3, r3, #8
 8000d3e:	6193      	str	r3, [r2, #24]
 8000d40:	4b14      	ldr	r3, [pc, #80]	@ (8000d94 <MX_GPIO_Init+0xa4>)
 8000d42:	699b      	ldr	r3, [r3, #24]
 8000d44:	f003 0308 	and.w	r3, r3, #8
 8000d48:	607b      	str	r3, [r7, #4]
 8000d4a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	2106      	movs	r1, #6
 8000d50:	4811      	ldr	r0, [pc, #68]	@ (8000d98 <MX_GPIO_Init+0xa8>)
 8000d52:	f000 ff3a 	bl	8001bca <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA1 PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8000d56:	2306      	movs	r3, #6
 8000d58:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d62:	2302      	movs	r3, #2
 8000d64:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d66:	f107 0310 	add.w	r3, r7, #16
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	480a      	ldr	r0, [pc, #40]	@ (8000d98 <MX_GPIO_Init+0xa8>)
 8000d6e:	f000 fd91 	bl	8001894 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_10;
 8000d72:	f240 4301 	movw	r3, #1025	@ 0x401
 8000d76:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d7c:	2301      	movs	r3, #1
 8000d7e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d80:	f107 0310 	add.w	r3, r7, #16
 8000d84:	4619      	mov	r1, r3
 8000d86:	4805      	ldr	r0, [pc, #20]	@ (8000d9c <MX_GPIO_Init+0xac>)
 8000d88:	f000 fd84 	bl	8001894 <HAL_GPIO_Init>

}
 8000d8c:	bf00      	nop
 8000d8e:	3720      	adds	r7, #32
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	40021000 	.word	0x40021000
 8000d98:	40010800 	.word	0x40010800
 8000d9c:	40010c00 	.word	0x40010c00

08000da0 <Key_Scan>:
	{
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_2);
	}
}
uint8_t Key_Scan()
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b082      	sub	sp, #8
 8000da4:	af00      	add	r7, sp, #0
	static uint32_t oldUWTick = 0;
	if ((uwTick - oldUWTick) < 200) return 0;
 8000da6:	4b14      	ldr	r3, [pc, #80]	@ (8000df8 <Key_Scan+0x58>)
 8000da8:	681a      	ldr	r2, [r3, #0]
 8000daa:	4b14      	ldr	r3, [pc, #80]	@ (8000dfc <Key_Scan+0x5c>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	1ad3      	subs	r3, r2, r3
 8000db0:	2bc7      	cmp	r3, #199	@ 0xc7
 8000db2:	d801      	bhi.n	8000db8 <Key_Scan+0x18>
 8000db4:	2300      	movs	r3, #0
 8000db6:	e01a      	b.n	8000dee <Key_Scan+0x4e>
	oldUWTick = uwTick;
 8000db8:	4b0f      	ldr	r3, [pc, #60]	@ (8000df8 <Key_Scan+0x58>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	4a0f      	ldr	r2, [pc, #60]	@ (8000dfc <Key_Scan+0x5c>)
 8000dbe:	6013      	str	r3, [r2, #0]
	uint8_t keyval = 0;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	71fb      	strb	r3, [r7, #7]
	if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == GPIO_PIN_RESET)
 8000dc4:	2101      	movs	r1, #1
 8000dc6:	480e      	ldr	r0, [pc, #56]	@ (8000e00 <Key_Scan+0x60>)
 8000dc8:	f000 fee8 	bl	8001b9c <HAL_GPIO_ReadPin>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d102      	bne.n	8000dd8 <Key_Scan+0x38>
	{
		keyval = KEY1;
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	71fb      	strb	r3, [r7, #7]
 8000dd6:	e009      	b.n	8000dec <Key_Scan+0x4c>
	}
	else if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_10) == GPIO_PIN_RESET)
 8000dd8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000ddc:	4808      	ldr	r0, [pc, #32]	@ (8000e00 <Key_Scan+0x60>)
 8000dde:	f000 fedd 	bl	8001b9c <HAL_GPIO_ReadPin>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d101      	bne.n	8000dec <Key_Scan+0x4c>
	{
		keyval = KEY2;
 8000de8:	2302      	movs	r3, #2
 8000dea:	71fb      	strb	r3, [r7, #7]
	}
	return keyval;
 8000dec:	79fb      	ldrb	r3, [r7, #7]
}
 8000dee:	4618      	mov	r0, r3
 8000df0:	3708      	adds	r7, #8
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	200006f4 	.word	0x200006f4
 8000dfc:	20000608 	.word	0x20000608
 8000e00:	40010c00 	.word	0x40010c00

08000e04 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e08:	4b12      	ldr	r3, [pc, #72]	@ (8000e54 <MX_I2C1_Init+0x50>)
 8000e0a:	4a13      	ldr	r2, [pc, #76]	@ (8000e58 <MX_I2C1_Init+0x54>)
 8000e0c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000e0e:	4b11      	ldr	r3, [pc, #68]	@ (8000e54 <MX_I2C1_Init+0x50>)
 8000e10:	4a12      	ldr	r2, [pc, #72]	@ (8000e5c <MX_I2C1_Init+0x58>)
 8000e12:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000e14:	4b0f      	ldr	r3, [pc, #60]	@ (8000e54 <MX_I2C1_Init+0x50>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000e1a:	4b0e      	ldr	r3, [pc, #56]	@ (8000e54 <MX_I2C1_Init+0x50>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e20:	4b0c      	ldr	r3, [pc, #48]	@ (8000e54 <MX_I2C1_Init+0x50>)
 8000e22:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000e26:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e28:	4b0a      	ldr	r3, [pc, #40]	@ (8000e54 <MX_I2C1_Init+0x50>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000e2e:	4b09      	ldr	r3, [pc, #36]	@ (8000e54 <MX_I2C1_Init+0x50>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e34:	4b07      	ldr	r3, [pc, #28]	@ (8000e54 <MX_I2C1_Init+0x50>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e3a:	4b06      	ldr	r3, [pc, #24]	@ (8000e54 <MX_I2C1_Init+0x50>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e40:	4804      	ldr	r0, [pc, #16]	@ (8000e54 <MX_I2C1_Init+0x50>)
 8000e42:	f000 fedb 	bl	8001bfc <HAL_I2C_Init>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d001      	beq.n	8000e50 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000e4c:	f000 f8c4 	bl	8000fd8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000e50:	bf00      	nop
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	2000060c 	.word	0x2000060c
 8000e58:	40005400 	.word	0x40005400
 8000e5c:	000186a0 	.word	0x000186a0

08000e60 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b08a      	sub	sp, #40	@ 0x28
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e68:	f107 0314 	add.w	r3, r7, #20
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	601a      	str	r2, [r3, #0]
 8000e70:	605a      	str	r2, [r3, #4]
 8000e72:	609a      	str	r2, [r3, #8]
 8000e74:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	4a1d      	ldr	r2, [pc, #116]	@ (8000ef0 <HAL_I2C_MspInit+0x90>)
 8000e7c:	4293      	cmp	r3, r2
 8000e7e:	d132      	bne.n	8000ee6 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e80:	4b1c      	ldr	r3, [pc, #112]	@ (8000ef4 <HAL_I2C_MspInit+0x94>)
 8000e82:	699b      	ldr	r3, [r3, #24]
 8000e84:	4a1b      	ldr	r2, [pc, #108]	@ (8000ef4 <HAL_I2C_MspInit+0x94>)
 8000e86:	f043 0308 	orr.w	r3, r3, #8
 8000e8a:	6193      	str	r3, [r2, #24]
 8000e8c:	4b19      	ldr	r3, [pc, #100]	@ (8000ef4 <HAL_I2C_MspInit+0x94>)
 8000e8e:	699b      	ldr	r3, [r3, #24]
 8000e90:	f003 0308 	and.w	r3, r3, #8
 8000e94:	613b      	str	r3, [r7, #16]
 8000e96:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000e98:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000e9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e9e:	2312      	movs	r3, #18
 8000ea0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ea2:	2303      	movs	r3, #3
 8000ea4:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ea6:	f107 0314 	add.w	r3, r7, #20
 8000eaa:	4619      	mov	r1, r3
 8000eac:	4812      	ldr	r0, [pc, #72]	@ (8000ef8 <HAL_I2C_MspInit+0x98>)
 8000eae:	f000 fcf1 	bl	8001894 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8000eb2:	4b12      	ldr	r3, [pc, #72]	@ (8000efc <HAL_I2C_MspInit+0x9c>)
 8000eb4:	685b      	ldr	r3, [r3, #4]
 8000eb6:	627b      	str	r3, [r7, #36]	@ 0x24
 8000eb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000eba:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8000ebe:	627b      	str	r3, [r7, #36]	@ 0x24
 8000ec0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ec2:	f043 0302 	orr.w	r3, r3, #2
 8000ec6:	627b      	str	r3, [r7, #36]	@ 0x24
 8000ec8:	4a0c      	ldr	r2, [pc, #48]	@ (8000efc <HAL_I2C_MspInit+0x9c>)
 8000eca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ecc:	6053      	str	r3, [r2, #4]

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ece:	4b09      	ldr	r3, [pc, #36]	@ (8000ef4 <HAL_I2C_MspInit+0x94>)
 8000ed0:	69db      	ldr	r3, [r3, #28]
 8000ed2:	4a08      	ldr	r2, [pc, #32]	@ (8000ef4 <HAL_I2C_MspInit+0x94>)
 8000ed4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000ed8:	61d3      	str	r3, [r2, #28]
 8000eda:	4b06      	ldr	r3, [pc, #24]	@ (8000ef4 <HAL_I2C_MspInit+0x94>)
 8000edc:	69db      	ldr	r3, [r3, #28]
 8000ede:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ee2:	60fb      	str	r3, [r7, #12]
 8000ee4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000ee6:	bf00      	nop
 8000ee8:	3728      	adds	r7, #40	@ 0x28
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	40005400 	.word	0x40005400
 8000ef4:	40021000 	.word	0x40021000
 8000ef8:	40010c00 	.word	0x40010c00
 8000efc:	40010000 	.word	0x40010000

08000f00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f04:	f000 fbb4 	bl	8001670 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f08:	f000 f80e 	bl	8000f28 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f0c:	f7ff fef0 	bl	8000cf0 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000f10:	f7ff ff78 	bl	8000e04 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000f14:	f000 fafe 	bl	8001514 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  OLED_Init();
 8000f18:	f000 f8b8 	bl	800108c <OLED_Init>
  OLED_Test();
 8000f1c:	f000 f942 	bl	80011a4 <OLED_Test>
  FreeRTOSStart();
 8000f20:	f7ff feb8 	bl	8000c94 <FreeRTOSStart>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f24:	bf00      	nop
 8000f26:	e7fd      	b.n	8000f24 <main+0x24>

08000f28 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b090      	sub	sp, #64	@ 0x40
 8000f2c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f2e:	f107 0318 	add.w	r3, r7, #24
 8000f32:	2228      	movs	r2, #40	@ 0x28
 8000f34:	2100      	movs	r1, #0
 8000f36:	4618      	mov	r0, r3
 8000f38:	f005 fc42 	bl	80067c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f3c:	1d3b      	adds	r3, r7, #4
 8000f3e:	2200      	movs	r2, #0
 8000f40:	601a      	str	r2, [r3, #0]
 8000f42:	605a      	str	r2, [r3, #4]
 8000f44:	609a      	str	r2, [r3, #8]
 8000f46:	60da      	str	r2, [r3, #12]
 8000f48:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f4e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000f52:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000f54:	2300      	movs	r3, #0
 8000f56:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f58:	2301      	movs	r3, #1
 8000f5a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f5c:	2302      	movs	r3, #2
 8000f5e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f60:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000f64:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000f66:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000f6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f6c:	f107 0318 	add.w	r3, r7, #24
 8000f70:	4618      	mov	r0, r3
 8000f72:	f001 faef 	bl	8002554 <HAL_RCC_OscConfig>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d001      	beq.n	8000f80 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000f7c:	f000 f82c 	bl	8000fd8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f80:	230f      	movs	r3, #15
 8000f82:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f84:	2302      	movs	r3, #2
 8000f86:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f8c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000f90:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f92:	2300      	movs	r3, #0
 8000f94:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f96:	1d3b      	adds	r3, r7, #4
 8000f98:	2102      	movs	r1, #2
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f001 fd5c 	bl	8002a58 <HAL_RCC_ClockConfig>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000fa6:	f000 f817 	bl	8000fd8 <Error_Handler>
  }
}
 8000faa:	bf00      	nop
 8000fac:	3740      	adds	r7, #64	@ 0x40
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
	...

08000fb4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4a04      	ldr	r2, [pc, #16]	@ (8000fd4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d101      	bne.n	8000fca <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000fc6:	f000 fb69 	bl	800169c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000fca:	bf00      	nop
 8000fcc:	3708      	adds	r7, #8
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	40000800 	.word	0x40000800

08000fd8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fdc:	b672      	cpsid	i
}
 8000fde:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fe0:	bf00      	nop
 8000fe2:	e7fd      	b.n	8000fe0 <Error_Handler+0x8>

08000fe4 <WriteCMD>:
static void SetPosition(uint8_t x, uint8_t page);
static void GetNUMPOST(uint32_t num, uint8_t length, uint8_t* array);

//Private functions.
static void WriteCMD(uint8_t cmd)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b086      	sub	sp, #24
 8000fe8:	af04      	add	r7, sp, #16
 8000fea:	4603      	mov	r3, r0
 8000fec:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, OLED_DEV_ADDRESS, OLED_CMD_ADDRESS, I2C_MEMADD_SIZE_8BIT, &cmd, 1, 0x100);
 8000fee:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000ff2:	9302      	str	r3, [sp, #8]
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	9301      	str	r3, [sp, #4]
 8000ff8:	1dfb      	adds	r3, r7, #7
 8000ffa:	9300      	str	r3, [sp, #0]
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	2200      	movs	r2, #0
 8001000:	2178      	movs	r1, #120	@ 0x78
 8001002:	4803      	ldr	r0, [pc, #12]	@ (8001010 <WriteCMD+0x2c>)
 8001004:	f000 ff3e 	bl	8001e84 <HAL_I2C_Mem_Write>
}
 8001008:	bf00      	nop
 800100a:	3708      	adds	r7, #8
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}
 8001010:	2000060c 	.word	0x2000060c

08001014 <WriteData>:
static void WriteData(uint8_t data)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b086      	sub	sp, #24
 8001018:	af04      	add	r7, sp, #16
 800101a:	4603      	mov	r3, r0
 800101c:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, OLED_DEV_ADDRESS, OLED_DATA_ADDRESS, I2C_MEMADD_SIZE_8BIT, &data, 1, 0x100);
 800101e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001022:	9302      	str	r3, [sp, #8]
 8001024:	2301      	movs	r3, #1
 8001026:	9301      	str	r3, [sp, #4]
 8001028:	1dfb      	adds	r3, r7, #7
 800102a:	9300      	str	r3, [sp, #0]
 800102c:	2301      	movs	r3, #1
 800102e:	2240      	movs	r2, #64	@ 0x40
 8001030:	2178      	movs	r1, #120	@ 0x78
 8001032:	4803      	ldr	r0, [pc, #12]	@ (8001040 <WriteData+0x2c>)
 8001034:	f000 ff26 	bl	8001e84 <HAL_I2C_Mem_Write>
}
 8001038:	bf00      	nop
 800103a:	3708      	adds	r7, #8
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	2000060c 	.word	0x2000060c

08001044 <SetPosition>:
//Setting the screen pointer.
static void SetPosition(uint8_t x, uint8_t page)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0
 800104a:	4603      	mov	r3, r0
 800104c:	460a      	mov	r2, r1
 800104e:	71fb      	strb	r3, [r7, #7]
 8001050:	4613      	mov	r3, r2
 8001052:	71bb      	strb	r3, [r7, #6]
	WriteCMD(0x00 | (x & 0x0F));
 8001054:	79fb      	ldrb	r3, [r7, #7]
 8001056:	f003 030f 	and.w	r3, r3, #15
 800105a:	b2db      	uxtb	r3, r3
 800105c:	4618      	mov	r0, r3
 800105e:	f7ff ffc1 	bl	8000fe4 <WriteCMD>
	WriteCMD(0x10 | (x & 0xF0) >> 4);
 8001062:	79fb      	ldrb	r3, [r7, #7]
 8001064:	091b      	lsrs	r3, r3, #4
 8001066:	b2db      	uxtb	r3, r3
 8001068:	f043 0310 	orr.w	r3, r3, #16
 800106c:	b2db      	uxtb	r3, r3
 800106e:	4618      	mov	r0, r3
 8001070:	f7ff ffb8 	bl	8000fe4 <WriteCMD>
	WriteCMD(0xB0 | page);
 8001074:	79bb      	ldrb	r3, [r7, #6]
 8001076:	f063 034f 	orn	r3, r3, #79	@ 0x4f
 800107a:	b2db      	uxtb	r3, r3
 800107c:	4618      	mov	r0, r3
 800107e:	f7ff ffb1 	bl	8000fe4 <WriteCMD>
}
 8001082:	bf00      	nop
 8001084:	3708      	adds	r7, #8
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
	...

0800108c <OLED_Init>:
	}
}

//Public functions.
void OLED_Init()
{
 800108c:	b5b0      	push	{r4, r5, r7, lr}
 800108e:	b086      	sub	sp, #24
 8001090:	af00      	add	r7, sp, #0
	uint8_t cmdData[]={
 8001092:	4b12      	ldr	r3, [pc, #72]	@ (80010dc <OLED_Init+0x50>)
 8001094:	463c      	mov	r4, r7
 8001096:	461d      	mov	r5, r3
 8001098:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800109a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800109c:	e895 0003 	ldmia.w	r5, {r0, r1}
 80010a0:	6020      	str	r0, [r4, #0]
 80010a2:	3404      	adds	r4, #4
 80010a4:	8021      	strh	r1, [r4, #0]
 80010a6:	3402      	adds	r4, #2
 80010a8:	0c0b      	lsrs	r3, r1, #16
 80010aa:	7023      	strb	r3, [r4, #0]
			0xAE, 0xD5, 0x80, 0xA8, 0x3F, 0xD3, 0x00, 0x40,0xA1, 0xC8, 0xDA,
			0x12, 0x81, 0xCF, 0xD9, 0xF1, 0xDB, 0x40, 0xA4, 0xA6,0x8D, 0x14,
			0xAF};
	for (uint8_t i = 0; i < 23; i++)
 80010ac:	2300      	movs	r3, #0
 80010ae:	75fb      	strb	r3, [r7, #23]
 80010b0:	e00a      	b.n	80010c8 <OLED_Init+0x3c>
	{
		WriteCMD(cmdData[i]);
 80010b2:	7dfb      	ldrb	r3, [r7, #23]
 80010b4:	3318      	adds	r3, #24
 80010b6:	443b      	add	r3, r7
 80010b8:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80010bc:	4618      	mov	r0, r3
 80010be:	f7ff ff91 	bl	8000fe4 <WriteCMD>
	for (uint8_t i = 0; i < 23; i++)
 80010c2:	7dfb      	ldrb	r3, [r7, #23]
 80010c4:	3301      	adds	r3, #1
 80010c6:	75fb      	strb	r3, [r7, #23]
 80010c8:	7dfb      	ldrb	r3, [r7, #23]
 80010ca:	2b16      	cmp	r3, #22
 80010cc:	d9f1      	bls.n	80010b2 <OLED_Init+0x26>
	}
	OLED_Clear();
 80010ce:	f000 f807 	bl	80010e0 <OLED_Clear>
}
 80010d2:	bf00      	nop
 80010d4:	3718      	adds	r7, #24
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bdb0      	pop	{r4, r5, r7, pc}
 80010da:	bf00      	nop
 80010dc:	08009e60 	.word	0x08009e60

080010e0 <OLED_Clear>:
//Clear the entire screen.
void OLED_Clear()
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < 128; i++)
 80010e6:	2300      	movs	r3, #0
 80010e8:	71fb      	strb	r3, [r7, #7]
 80010ea:	e014      	b.n	8001116 <OLED_Clear+0x36>
	{
		for (uint8_t j = 0; j < 8; j++)
 80010ec:	2300      	movs	r3, #0
 80010ee:	71bb      	strb	r3, [r7, #6]
 80010f0:	e00b      	b.n	800110a <OLED_Clear+0x2a>
		{
			SetPosition(i, j);
 80010f2:	79ba      	ldrb	r2, [r7, #6]
 80010f4:	79fb      	ldrb	r3, [r7, #7]
 80010f6:	4611      	mov	r1, r2
 80010f8:	4618      	mov	r0, r3
 80010fa:	f7ff ffa3 	bl	8001044 <SetPosition>
			WriteData(0x00);
 80010fe:	2000      	movs	r0, #0
 8001100:	f7ff ff88 	bl	8001014 <WriteData>
		for (uint8_t j = 0; j < 8; j++)
 8001104:	79bb      	ldrb	r3, [r7, #6]
 8001106:	3301      	adds	r3, #1
 8001108:	71bb      	strb	r3, [r7, #6]
 800110a:	79bb      	ldrb	r3, [r7, #6]
 800110c:	2b07      	cmp	r3, #7
 800110e:	d9f0      	bls.n	80010f2 <OLED_Clear+0x12>
	for (uint8_t i = 0; i < 128; i++)
 8001110:	79fb      	ldrb	r3, [r7, #7]
 8001112:	3301      	adds	r3, #1
 8001114:	71fb      	strb	r3, [r7, #7]
 8001116:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800111a:	2b00      	cmp	r3, #0
 800111c:	dae6      	bge.n	80010ec <OLED_Clear+0xc>
		}
	}
}
 800111e:	bf00      	nop
 8001120:	bf00      	nop
 8001122:	3708      	adds	r7, #8
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}

08001128 <OLED_ShowIMG>:
			}
			break;
	}
}
void OLED_ShowIMG(uint8_t x, uint8_t page, uint8_t imgWeight, uint8_t imgHeight, const uint8_t bmp[])
{
 8001128:	b590      	push	{r4, r7, lr}
 800112a:	b085      	sub	sp, #20
 800112c:	af00      	add	r7, sp, #0
 800112e:	4604      	mov	r4, r0
 8001130:	4608      	mov	r0, r1
 8001132:	4611      	mov	r1, r2
 8001134:	461a      	mov	r2, r3
 8001136:	4623      	mov	r3, r4
 8001138:	71fb      	strb	r3, [r7, #7]
 800113a:	4603      	mov	r3, r0
 800113c:	71bb      	strb	r3, [r7, #6]
 800113e:	460b      	mov	r3, r1
 8001140:	717b      	strb	r3, [r7, #5]
 8001142:	4613      	mov	r3, r2
 8001144:	713b      	strb	r3, [r7, #4]
	for (uint8_t i = 0; i < imgHeight; i++)
 8001146:	2300      	movs	r3, #0
 8001148:	73fb      	strb	r3, [r7, #15]
 800114a:	e022      	b.n	8001192 <OLED_ShowIMG+0x6a>
	{
		SetPosition(x, page + i);
 800114c:	79ba      	ldrb	r2, [r7, #6]
 800114e:	7bfb      	ldrb	r3, [r7, #15]
 8001150:	4413      	add	r3, r2
 8001152:	b2da      	uxtb	r2, r3
 8001154:	79fb      	ldrb	r3, [r7, #7]
 8001156:	4611      	mov	r1, r2
 8001158:	4618      	mov	r0, r3
 800115a:	f7ff ff73 	bl	8001044 <SetPosition>
		for (uint8_t j = 0; j < imgWeight; j++)
 800115e:	2300      	movs	r3, #0
 8001160:	73bb      	strb	r3, [r7, #14]
 8001162:	e00f      	b.n	8001184 <OLED_ShowIMG+0x5c>
		{
			WriteData(bmp[i * imgWeight + j]);
 8001164:	7bfb      	ldrb	r3, [r7, #15]
 8001166:	797a      	ldrb	r2, [r7, #5]
 8001168:	fb03 f202 	mul.w	r2, r3, r2
 800116c:	7bbb      	ldrb	r3, [r7, #14]
 800116e:	4413      	add	r3, r2
 8001170:	461a      	mov	r2, r3
 8001172:	6a3b      	ldr	r3, [r7, #32]
 8001174:	4413      	add	r3, r2
 8001176:	781b      	ldrb	r3, [r3, #0]
 8001178:	4618      	mov	r0, r3
 800117a:	f7ff ff4b 	bl	8001014 <WriteData>
		for (uint8_t j = 0; j < imgWeight; j++)
 800117e:	7bbb      	ldrb	r3, [r7, #14]
 8001180:	3301      	adds	r3, #1
 8001182:	73bb      	strb	r3, [r7, #14]
 8001184:	7bba      	ldrb	r2, [r7, #14]
 8001186:	797b      	ldrb	r3, [r7, #5]
 8001188:	429a      	cmp	r2, r3
 800118a:	d3eb      	bcc.n	8001164 <OLED_ShowIMG+0x3c>
	for (uint8_t i = 0; i < imgHeight; i++)
 800118c:	7bfb      	ldrb	r3, [r7, #15]
 800118e:	3301      	adds	r3, #1
 8001190:	73fb      	strb	r3, [r7, #15]
 8001192:	7bfa      	ldrb	r2, [r7, #15]
 8001194:	793b      	ldrb	r3, [r7, #4]
 8001196:	429a      	cmp	r2, r3
 8001198:	d3d8      	bcc.n	800114c <OLED_ShowIMG+0x24>
		}
	}
}
 800119a:	bf00      	nop
 800119c:	bf00      	nop
 800119e:	3714      	adds	r7, #20
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd90      	pop	{r4, r7, pc}

080011a4 <OLED_Test>:
			break;
	}
}

void OLED_Test()
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b082      	sub	sp, #8
 80011a8:	af02      	add	r7, sp, #8
	//OLED_ShowString(0, 0, "Hello world!", VI_VIII_DOT_MATRIX);
	//OLED_ShowString(0, 1, "Hello world!", VIII_XVI_DOT_MATRIX);
	//OLED_ShowIMG(0, 0, 48, 6, image);
	OLED_ShowIMG(0, 0, 128, 8, BMP1);
 80011aa:	4b05      	ldr	r3, [pc, #20]	@ (80011c0 <OLED_Test+0x1c>)
 80011ac:	9300      	str	r3, [sp, #0]
 80011ae:	2308      	movs	r3, #8
 80011b0:	2280      	movs	r2, #128	@ 0x80
 80011b2:	2100      	movs	r1, #0
 80011b4:	2000      	movs	r0, #0
 80011b6:	f7ff ffb7 	bl	8001128 <OLED_ShowIMG>
	//OLED_ShowNUM(0, 0, 123, 3, VI_VIII_DOT_MATRIX);
	//OLED_ShowNUM(0, 1, 123, 3, VIII_XVI_DOT_MATRIX);
}
 80011ba:	bf00      	nop
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	20000000 	.word	0x20000000

080011c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b085      	sub	sp, #20
 80011c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80011ca:	4b15      	ldr	r3, [pc, #84]	@ (8001220 <HAL_MspInit+0x5c>)
 80011cc:	699b      	ldr	r3, [r3, #24]
 80011ce:	4a14      	ldr	r2, [pc, #80]	@ (8001220 <HAL_MspInit+0x5c>)
 80011d0:	f043 0301 	orr.w	r3, r3, #1
 80011d4:	6193      	str	r3, [r2, #24]
 80011d6:	4b12      	ldr	r3, [pc, #72]	@ (8001220 <HAL_MspInit+0x5c>)
 80011d8:	699b      	ldr	r3, [r3, #24]
 80011da:	f003 0301 	and.w	r3, r3, #1
 80011de:	60bb      	str	r3, [r7, #8]
 80011e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011e2:	4b0f      	ldr	r3, [pc, #60]	@ (8001220 <HAL_MspInit+0x5c>)
 80011e4:	69db      	ldr	r3, [r3, #28]
 80011e6:	4a0e      	ldr	r2, [pc, #56]	@ (8001220 <HAL_MspInit+0x5c>)
 80011e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011ec:	61d3      	str	r3, [r2, #28]
 80011ee:	4b0c      	ldr	r3, [pc, #48]	@ (8001220 <HAL_MspInit+0x5c>)
 80011f0:	69db      	ldr	r3, [r3, #28]
 80011f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011f6:	607b      	str	r3, [r7, #4]
 80011f8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80011fa:	4b0a      	ldr	r3, [pc, #40]	@ (8001224 <HAL_MspInit+0x60>)
 80011fc:	685b      	ldr	r3, [r3, #4]
 80011fe:	60fb      	str	r3, [r7, #12]
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001206:	60fb      	str	r3, [r7, #12]
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800120e:	60fb      	str	r3, [r7, #12]
 8001210:	4a04      	ldr	r2, [pc, #16]	@ (8001224 <HAL_MspInit+0x60>)
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001216:	bf00      	nop
 8001218:	3714      	adds	r7, #20
 800121a:	46bd      	mov	sp, r7
 800121c:	bc80      	pop	{r7}
 800121e:	4770      	bx	lr
 8001220:	40021000 	.word	0x40021000
 8001224:	40010000 	.word	0x40010000

08001228 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b08e      	sub	sp, #56	@ 0x38
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001230:	2300      	movs	r3, #0
 8001232:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001234:	2300      	movs	r3, #0
 8001236:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 8001238:	2300      	movs	r3, #0
 800123a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 800123e:	4b34      	ldr	r3, [pc, #208]	@ (8001310 <HAL_InitTick+0xe8>)
 8001240:	69db      	ldr	r3, [r3, #28]
 8001242:	4a33      	ldr	r2, [pc, #204]	@ (8001310 <HAL_InitTick+0xe8>)
 8001244:	f043 0304 	orr.w	r3, r3, #4
 8001248:	61d3      	str	r3, [r2, #28]
 800124a:	4b31      	ldr	r3, [pc, #196]	@ (8001310 <HAL_InitTick+0xe8>)
 800124c:	69db      	ldr	r3, [r3, #28]
 800124e:	f003 0304 	and.w	r3, r3, #4
 8001252:	60fb      	str	r3, [r7, #12]
 8001254:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001256:	f107 0210 	add.w	r2, r7, #16
 800125a:	f107 0314 	add.w	r3, r7, #20
 800125e:	4611      	mov	r1, r2
 8001260:	4618      	mov	r0, r3
 8001262:	f001 fd69 	bl	8002d38 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001266:	6a3b      	ldr	r3, [r7, #32]
 8001268:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800126a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800126c:	2b00      	cmp	r3, #0
 800126e:	d103      	bne.n	8001278 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001270:	f001 fd3a 	bl	8002ce8 <HAL_RCC_GetPCLK1Freq>
 8001274:	6378      	str	r0, [r7, #52]	@ 0x34
 8001276:	e004      	b.n	8001282 <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001278:	f001 fd36 	bl	8002ce8 <HAL_RCC_GetPCLK1Freq>
 800127c:	4603      	mov	r3, r0
 800127e:	005b      	lsls	r3, r3, #1
 8001280:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001282:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001284:	4a23      	ldr	r2, [pc, #140]	@ (8001314 <HAL_InitTick+0xec>)
 8001286:	fba2 2303 	umull	r2, r3, r2, r3
 800128a:	0c9b      	lsrs	r3, r3, #18
 800128c:	3b01      	subs	r3, #1
 800128e:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8001290:	4b21      	ldr	r3, [pc, #132]	@ (8001318 <HAL_InitTick+0xf0>)
 8001292:	4a22      	ldr	r2, [pc, #136]	@ (800131c <HAL_InitTick+0xf4>)
 8001294:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8001296:	4b20      	ldr	r3, [pc, #128]	@ (8001318 <HAL_InitTick+0xf0>)
 8001298:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800129c:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 800129e:	4a1e      	ldr	r2, [pc, #120]	@ (8001318 <HAL_InitTick+0xf0>)
 80012a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80012a2:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 80012a4:	4b1c      	ldr	r3, [pc, #112]	@ (8001318 <HAL_InitTick+0xf0>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012aa:	4b1b      	ldr	r3, [pc, #108]	@ (8001318 <HAL_InitTick+0xf0>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012b0:	4b19      	ldr	r3, [pc, #100]	@ (8001318 <HAL_InitTick+0xf0>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 80012b6:	4818      	ldr	r0, [pc, #96]	@ (8001318 <HAL_InitTick+0xf0>)
 80012b8:	f001 fd8c 	bl	8002dd4 <HAL_TIM_Base_Init>
 80012bc:	4603      	mov	r3, r0
 80012be:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80012c2:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d11b      	bne.n	8001302 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 80012ca:	4813      	ldr	r0, [pc, #76]	@ (8001318 <HAL_InitTick+0xf0>)
 80012cc:	f001 fdda 	bl	8002e84 <HAL_TIM_Base_Start_IT>
 80012d0:	4603      	mov	r3, r0
 80012d2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80012d6:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d111      	bne.n	8001302 <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80012de:	201e      	movs	r0, #30
 80012e0:	f000 fac9 	bl	8001876 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	2b0f      	cmp	r3, #15
 80012e8:	d808      	bhi.n	80012fc <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 80012ea:	2200      	movs	r2, #0
 80012ec:	6879      	ldr	r1, [r7, #4]
 80012ee:	201e      	movs	r0, #30
 80012f0:	f000 faa5 	bl	800183e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80012f4:	4a0a      	ldr	r2, [pc, #40]	@ (8001320 <HAL_InitTick+0xf8>)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	6013      	str	r3, [r2, #0]
 80012fa:	e002      	b.n	8001302 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 80012fc:	2301      	movs	r3, #1
 80012fe:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001302:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001306:	4618      	mov	r0, r3
 8001308:	3738      	adds	r7, #56	@ 0x38
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	40021000 	.word	0x40021000
 8001314:	431bde83 	.word	0x431bde83
 8001318:	20000660 	.word	0x20000660
 800131c:	40000800 	.word	0x40000800
 8001320:	20000404 	.word	0x20000404

08001324 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001328:	bf00      	nop
 800132a:	e7fd      	b.n	8001328 <NMI_Handler+0x4>

0800132c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800132c:	b480      	push	{r7}
 800132e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001330:	bf00      	nop
 8001332:	e7fd      	b.n	8001330 <HardFault_Handler+0x4>

08001334 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001338:	bf00      	nop
 800133a:	e7fd      	b.n	8001338 <MemManage_Handler+0x4>

0800133c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001340:	bf00      	nop
 8001342:	e7fd      	b.n	8001340 <BusFault_Handler+0x4>

08001344 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001348:	bf00      	nop
 800134a:	e7fd      	b.n	8001348 <UsageFault_Handler+0x4>

0800134c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001350:	bf00      	nop
 8001352:	46bd      	mov	sp, r7
 8001354:	bc80      	pop	{r7}
 8001356:	4770      	bx	lr

08001358 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800135c:	f003 ff3a 	bl	80051d4 <xTaskGetSchedulerState>
 8001360:	4603      	mov	r3, r0
 8001362:	2b01      	cmp	r3, #1
 8001364:	d001      	beq.n	800136a <SysTick_Handler+0x12>
  {
	  xPortSysTickHandler();
 8001366:	f002 fa8f 	bl	8003888 <xPortSysTickHandler>
  }
  /* USER CODE END SysTick_IRQn 1 */
}
 800136a:	bf00      	nop
 800136c:	bd80      	pop	{r7, pc}
	...

08001370 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001374:	4802      	ldr	r0, [pc, #8]	@ (8001380 <TIM4_IRQHandler+0x10>)
 8001376:	f001 fdd7 	bl	8002f28 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800137a:	bf00      	nop
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	20000660 	.word	0x20000660

08001384 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0
  return 1;
 8001388:	2301      	movs	r3, #1
}
 800138a:	4618      	mov	r0, r3
 800138c:	46bd      	mov	sp, r7
 800138e:	bc80      	pop	{r7}
 8001390:	4770      	bx	lr

08001392 <_kill>:

int _kill(int pid, int sig)
{
 8001392:	b580      	push	{r7, lr}
 8001394:	b082      	sub	sp, #8
 8001396:	af00      	add	r7, sp, #0
 8001398:	6078      	str	r0, [r7, #4]
 800139a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800139c:	f005 fa62 	bl	8006864 <__errno>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2216      	movs	r2, #22
 80013a4:	601a      	str	r2, [r3, #0]
  return -1;
 80013a6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	3708      	adds	r7, #8
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}

080013b2 <_exit>:

void _exit (int status)
{
 80013b2:	b580      	push	{r7, lr}
 80013b4:	b082      	sub	sp, #8
 80013b6:	af00      	add	r7, sp, #0
 80013b8:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80013ba:	f04f 31ff 	mov.w	r1, #4294967295
 80013be:	6878      	ldr	r0, [r7, #4]
 80013c0:	f7ff ffe7 	bl	8001392 <_kill>
  while (1) {}    /* Make sure we hang here */
 80013c4:	bf00      	nop
 80013c6:	e7fd      	b.n	80013c4 <_exit+0x12>

080013c8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b086      	sub	sp, #24
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	60f8      	str	r0, [r7, #12]
 80013d0:	60b9      	str	r1, [r7, #8]
 80013d2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013d4:	2300      	movs	r3, #0
 80013d6:	617b      	str	r3, [r7, #20]
 80013d8:	e00a      	b.n	80013f0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80013da:	f3af 8000 	nop.w
 80013de:	4601      	mov	r1, r0
 80013e0:	68bb      	ldr	r3, [r7, #8]
 80013e2:	1c5a      	adds	r2, r3, #1
 80013e4:	60ba      	str	r2, [r7, #8]
 80013e6:	b2ca      	uxtb	r2, r1
 80013e8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013ea:	697b      	ldr	r3, [r7, #20]
 80013ec:	3301      	adds	r3, #1
 80013ee:	617b      	str	r3, [r7, #20]
 80013f0:	697a      	ldr	r2, [r7, #20]
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	429a      	cmp	r2, r3
 80013f6:	dbf0      	blt.n	80013da <_read+0x12>
  }

  return len;
 80013f8:	687b      	ldr	r3, [r7, #4]
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	3718      	adds	r7, #24
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}

08001402 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001402:	b580      	push	{r7, lr}
 8001404:	b086      	sub	sp, #24
 8001406:	af00      	add	r7, sp, #0
 8001408:	60f8      	str	r0, [r7, #12]
 800140a:	60b9      	str	r1, [r7, #8]
 800140c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800140e:	2300      	movs	r3, #0
 8001410:	617b      	str	r3, [r7, #20]
 8001412:	e009      	b.n	8001428 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001414:	68bb      	ldr	r3, [r7, #8]
 8001416:	1c5a      	adds	r2, r3, #1
 8001418:	60ba      	str	r2, [r7, #8]
 800141a:	781b      	ldrb	r3, [r3, #0]
 800141c:	4618      	mov	r0, r3
 800141e:	f000 f8ef 	bl	8001600 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001422:	697b      	ldr	r3, [r7, #20]
 8001424:	3301      	adds	r3, #1
 8001426:	617b      	str	r3, [r7, #20]
 8001428:	697a      	ldr	r2, [r7, #20]
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	429a      	cmp	r2, r3
 800142e:	dbf1      	blt.n	8001414 <_write+0x12>
  }
  return len;
 8001430:	687b      	ldr	r3, [r7, #4]
}
 8001432:	4618      	mov	r0, r3
 8001434:	3718      	adds	r7, #24
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}

0800143a <_close>:

int _close(int file)
{
 800143a:	b480      	push	{r7}
 800143c:	b083      	sub	sp, #12
 800143e:	af00      	add	r7, sp, #0
 8001440:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001442:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001446:	4618      	mov	r0, r3
 8001448:	370c      	adds	r7, #12
 800144a:	46bd      	mov	sp, r7
 800144c:	bc80      	pop	{r7}
 800144e:	4770      	bx	lr

08001450 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001450:	b480      	push	{r7}
 8001452:	b083      	sub	sp, #12
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
 8001458:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001460:	605a      	str	r2, [r3, #4]
  return 0;
 8001462:	2300      	movs	r3, #0
}
 8001464:	4618      	mov	r0, r3
 8001466:	370c      	adds	r7, #12
 8001468:	46bd      	mov	sp, r7
 800146a:	bc80      	pop	{r7}
 800146c:	4770      	bx	lr

0800146e <_isatty>:

int _isatty(int file)
{
 800146e:	b480      	push	{r7}
 8001470:	b083      	sub	sp, #12
 8001472:	af00      	add	r7, sp, #0
 8001474:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001476:	2301      	movs	r3, #1
}
 8001478:	4618      	mov	r0, r3
 800147a:	370c      	adds	r7, #12
 800147c:	46bd      	mov	sp, r7
 800147e:	bc80      	pop	{r7}
 8001480:	4770      	bx	lr

08001482 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001482:	b480      	push	{r7}
 8001484:	b085      	sub	sp, #20
 8001486:	af00      	add	r7, sp, #0
 8001488:	60f8      	str	r0, [r7, #12]
 800148a:	60b9      	str	r1, [r7, #8]
 800148c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800148e:	2300      	movs	r3, #0
}
 8001490:	4618      	mov	r0, r3
 8001492:	3714      	adds	r7, #20
 8001494:	46bd      	mov	sp, r7
 8001496:	bc80      	pop	{r7}
 8001498:	4770      	bx	lr
	...

0800149c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b086      	sub	sp, #24
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014a4:	4a14      	ldr	r2, [pc, #80]	@ (80014f8 <_sbrk+0x5c>)
 80014a6:	4b15      	ldr	r3, [pc, #84]	@ (80014fc <_sbrk+0x60>)
 80014a8:	1ad3      	subs	r3, r2, r3
 80014aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014b0:	4b13      	ldr	r3, [pc, #76]	@ (8001500 <_sbrk+0x64>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d102      	bne.n	80014be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014b8:	4b11      	ldr	r3, [pc, #68]	@ (8001500 <_sbrk+0x64>)
 80014ba:	4a12      	ldr	r2, [pc, #72]	@ (8001504 <_sbrk+0x68>)
 80014bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014be:	4b10      	ldr	r3, [pc, #64]	@ (8001500 <_sbrk+0x64>)
 80014c0:	681a      	ldr	r2, [r3, #0]
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	4413      	add	r3, r2
 80014c6:	693a      	ldr	r2, [r7, #16]
 80014c8:	429a      	cmp	r2, r3
 80014ca:	d207      	bcs.n	80014dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014cc:	f005 f9ca 	bl	8006864 <__errno>
 80014d0:	4603      	mov	r3, r0
 80014d2:	220c      	movs	r2, #12
 80014d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014d6:	f04f 33ff 	mov.w	r3, #4294967295
 80014da:	e009      	b.n	80014f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014dc:	4b08      	ldr	r3, [pc, #32]	@ (8001500 <_sbrk+0x64>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014e2:	4b07      	ldr	r3, [pc, #28]	@ (8001500 <_sbrk+0x64>)
 80014e4:	681a      	ldr	r2, [r3, #0]
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	4413      	add	r3, r2
 80014ea:	4a05      	ldr	r2, [pc, #20]	@ (8001500 <_sbrk+0x64>)
 80014ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014ee:	68fb      	ldr	r3, [r7, #12]
}
 80014f0:	4618      	mov	r0, r3
 80014f2:	3718      	adds	r7, #24
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	20005000 	.word	0x20005000
 80014fc:	00000400 	.word	0x00000400
 8001500:	200006a8 	.word	0x200006a8
 8001504:	20003168 	.word	0x20003168

08001508 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800150c:	bf00      	nop
 800150e:	46bd      	mov	sp, r7
 8001510:	bc80      	pop	{r7}
 8001512:	4770      	bx	lr

08001514 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001518:	4b11      	ldr	r3, [pc, #68]	@ (8001560 <MX_USART1_UART_Init+0x4c>)
 800151a:	4a12      	ldr	r2, [pc, #72]	@ (8001564 <MX_USART1_UART_Init+0x50>)
 800151c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800151e:	4b10      	ldr	r3, [pc, #64]	@ (8001560 <MX_USART1_UART_Init+0x4c>)
 8001520:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001524:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001526:	4b0e      	ldr	r3, [pc, #56]	@ (8001560 <MX_USART1_UART_Init+0x4c>)
 8001528:	2200      	movs	r2, #0
 800152a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800152c:	4b0c      	ldr	r3, [pc, #48]	@ (8001560 <MX_USART1_UART_Init+0x4c>)
 800152e:	2200      	movs	r2, #0
 8001530:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001532:	4b0b      	ldr	r3, [pc, #44]	@ (8001560 <MX_USART1_UART_Init+0x4c>)
 8001534:	2200      	movs	r2, #0
 8001536:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001538:	4b09      	ldr	r3, [pc, #36]	@ (8001560 <MX_USART1_UART_Init+0x4c>)
 800153a:	220c      	movs	r2, #12
 800153c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800153e:	4b08      	ldr	r3, [pc, #32]	@ (8001560 <MX_USART1_UART_Init+0x4c>)
 8001540:	2200      	movs	r2, #0
 8001542:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001544:	4b06      	ldr	r3, [pc, #24]	@ (8001560 <MX_USART1_UART_Init+0x4c>)
 8001546:	2200      	movs	r2, #0
 8001548:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800154a:	4805      	ldr	r0, [pc, #20]	@ (8001560 <MX_USART1_UART_Init+0x4c>)
 800154c:	f001 fe80 	bl	8003250 <HAL_UART_Init>
 8001550:	4603      	mov	r3, r0
 8001552:	2b00      	cmp	r3, #0
 8001554:	d001      	beq.n	800155a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001556:	f7ff fd3f 	bl	8000fd8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800155a:	bf00      	nop
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	200006ac 	.word	0x200006ac
 8001564:	40013800 	.word	0x40013800

08001568 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b088      	sub	sp, #32
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001570:	f107 0310 	add.w	r3, r7, #16
 8001574:	2200      	movs	r2, #0
 8001576:	601a      	str	r2, [r3, #0]
 8001578:	605a      	str	r2, [r3, #4]
 800157a:	609a      	str	r2, [r3, #8]
 800157c:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4a1c      	ldr	r2, [pc, #112]	@ (80015f4 <HAL_UART_MspInit+0x8c>)
 8001584:	4293      	cmp	r3, r2
 8001586:	d131      	bne.n	80015ec <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001588:	4b1b      	ldr	r3, [pc, #108]	@ (80015f8 <HAL_UART_MspInit+0x90>)
 800158a:	699b      	ldr	r3, [r3, #24]
 800158c:	4a1a      	ldr	r2, [pc, #104]	@ (80015f8 <HAL_UART_MspInit+0x90>)
 800158e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001592:	6193      	str	r3, [r2, #24]
 8001594:	4b18      	ldr	r3, [pc, #96]	@ (80015f8 <HAL_UART_MspInit+0x90>)
 8001596:	699b      	ldr	r3, [r3, #24]
 8001598:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800159c:	60fb      	str	r3, [r7, #12]
 800159e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015a0:	4b15      	ldr	r3, [pc, #84]	@ (80015f8 <HAL_UART_MspInit+0x90>)
 80015a2:	699b      	ldr	r3, [r3, #24]
 80015a4:	4a14      	ldr	r2, [pc, #80]	@ (80015f8 <HAL_UART_MspInit+0x90>)
 80015a6:	f043 0304 	orr.w	r3, r3, #4
 80015aa:	6193      	str	r3, [r2, #24]
 80015ac:	4b12      	ldr	r3, [pc, #72]	@ (80015f8 <HAL_UART_MspInit+0x90>)
 80015ae:	699b      	ldr	r3, [r3, #24]
 80015b0:	f003 0304 	and.w	r3, r3, #4
 80015b4:	60bb      	str	r3, [r7, #8]
 80015b6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80015b8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80015bc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015be:	2302      	movs	r3, #2
 80015c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015c2:	2303      	movs	r3, #3
 80015c4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015c6:	f107 0310 	add.w	r3, r7, #16
 80015ca:	4619      	mov	r1, r3
 80015cc:	480b      	ldr	r0, [pc, #44]	@ (80015fc <HAL_UART_MspInit+0x94>)
 80015ce:	f000 f961 	bl	8001894 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80015d2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80015d6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015d8:	2300      	movs	r3, #0
 80015da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015dc:	2300      	movs	r3, #0
 80015de:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015e0:	f107 0310 	add.w	r3, r7, #16
 80015e4:	4619      	mov	r1, r3
 80015e6:	4805      	ldr	r0, [pc, #20]	@ (80015fc <HAL_UART_MspInit+0x94>)
 80015e8:	f000 f954 	bl	8001894 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80015ec:	bf00      	nop
 80015ee:	3720      	adds	r7, #32
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	40013800 	.word	0x40013800
 80015f8:	40021000 	.word	0x40021000
 80015fc:	40010800 	.word	0x40010800

08001600 <__io_putchar>:
  }
}

/* USER CODE BEGIN 1 */
int __io_putchar(int ch)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b082      	sub	sp, #8
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8001608:	1d39      	adds	r1, r7, #4
 800160a:	f04f 33ff 	mov.w	r3, #4294967295
 800160e:	2201      	movs	r2, #1
 8001610:	4803      	ldr	r0, [pc, #12]	@ (8001620 <__io_putchar+0x20>)
 8001612:	f001 fe6d 	bl	80032f0 <HAL_UART_Transmit>
  return ch;
 8001616:	687b      	ldr	r3, [r7, #4]
}
 8001618:	4618      	mov	r0, r3
 800161a:	3708      	adds	r7, #8
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}
 8001620:	200006ac 	.word	0x200006ac

08001624 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001624:	f7ff ff70 	bl	8001508 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001628:	480b      	ldr	r0, [pc, #44]	@ (8001658 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800162a:	490c      	ldr	r1, [pc, #48]	@ (800165c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800162c:	4a0c      	ldr	r2, [pc, #48]	@ (8001660 <LoopFillZerobss+0x16>)
  movs r3, #0
 800162e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001630:	e002      	b.n	8001638 <LoopCopyDataInit>

08001632 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001632:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001634:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001636:	3304      	adds	r3, #4

08001638 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001638:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800163a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800163c:	d3f9      	bcc.n	8001632 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800163e:	4a09      	ldr	r2, [pc, #36]	@ (8001664 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001640:	4c09      	ldr	r4, [pc, #36]	@ (8001668 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001642:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001644:	e001      	b.n	800164a <LoopFillZerobss>

08001646 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001646:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001648:	3204      	adds	r2, #4

0800164a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800164a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800164c:	d3fb      	bcc.n	8001646 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800164e:	f005 f90f 	bl	8006870 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001652:	f7ff fc55 	bl	8000f00 <main>
  bx lr
 8001656:	4770      	bx	lr
  ldr r0, =_sdata
 8001658:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800165c:	200005dc 	.word	0x200005dc
  ldr r2, =_sidata
 8001660:	0800a2e8 	.word	0x0800a2e8
  ldr r2, =_sbss
 8001664:	200005dc 	.word	0x200005dc
  ldr r4, =_ebss
 8001668:	20003164 	.word	0x20003164

0800166c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800166c:	e7fe      	b.n	800166c <ADC1_2_IRQHandler>
	...

08001670 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001674:	4b08      	ldr	r3, [pc, #32]	@ (8001698 <HAL_Init+0x28>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a07      	ldr	r2, [pc, #28]	@ (8001698 <HAL_Init+0x28>)
 800167a:	f043 0310 	orr.w	r3, r3, #16
 800167e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001680:	2003      	movs	r0, #3
 8001682:	f000 f8d1 	bl	8001828 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001686:	2001      	movs	r0, #1
 8001688:	f7ff fdce 	bl	8001228 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800168c:	f7ff fd9a 	bl	80011c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001690:	2300      	movs	r3, #0
}
 8001692:	4618      	mov	r0, r3
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	40022000 	.word	0x40022000

0800169c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800169c:	b480      	push	{r7}
 800169e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016a0:	4b05      	ldr	r3, [pc, #20]	@ (80016b8 <HAL_IncTick+0x1c>)
 80016a2:	781b      	ldrb	r3, [r3, #0]
 80016a4:	461a      	mov	r2, r3
 80016a6:	4b05      	ldr	r3, [pc, #20]	@ (80016bc <HAL_IncTick+0x20>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	4413      	add	r3, r2
 80016ac:	4a03      	ldr	r2, [pc, #12]	@ (80016bc <HAL_IncTick+0x20>)
 80016ae:	6013      	str	r3, [r2, #0]
}
 80016b0:	bf00      	nop
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bc80      	pop	{r7}
 80016b6:	4770      	bx	lr
 80016b8:	20000408 	.word	0x20000408
 80016bc:	200006f4 	.word	0x200006f4

080016c0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0
  return uwTick;
 80016c4:	4b02      	ldr	r3, [pc, #8]	@ (80016d0 <HAL_GetTick+0x10>)
 80016c6:	681b      	ldr	r3, [r3, #0]
}
 80016c8:	4618      	mov	r0, r3
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bc80      	pop	{r7}
 80016ce:	4770      	bx	lr
 80016d0:	200006f4 	.word	0x200006f4

080016d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b085      	sub	sp, #20
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	f003 0307 	and.w	r3, r3, #7
 80016e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016e4:	4b0c      	ldr	r3, [pc, #48]	@ (8001718 <__NVIC_SetPriorityGrouping+0x44>)
 80016e6:	68db      	ldr	r3, [r3, #12]
 80016e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016ea:	68ba      	ldr	r2, [r7, #8]
 80016ec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80016f0:	4013      	ands	r3, r2
 80016f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016f8:	68bb      	ldr	r3, [r7, #8]
 80016fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016fc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001700:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001704:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001706:	4a04      	ldr	r2, [pc, #16]	@ (8001718 <__NVIC_SetPriorityGrouping+0x44>)
 8001708:	68bb      	ldr	r3, [r7, #8]
 800170a:	60d3      	str	r3, [r2, #12]
}
 800170c:	bf00      	nop
 800170e:	3714      	adds	r7, #20
 8001710:	46bd      	mov	sp, r7
 8001712:	bc80      	pop	{r7}
 8001714:	4770      	bx	lr
 8001716:	bf00      	nop
 8001718:	e000ed00 	.word	0xe000ed00

0800171c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001720:	4b04      	ldr	r3, [pc, #16]	@ (8001734 <__NVIC_GetPriorityGrouping+0x18>)
 8001722:	68db      	ldr	r3, [r3, #12]
 8001724:	0a1b      	lsrs	r3, r3, #8
 8001726:	f003 0307 	and.w	r3, r3, #7
}
 800172a:	4618      	mov	r0, r3
 800172c:	46bd      	mov	sp, r7
 800172e:	bc80      	pop	{r7}
 8001730:	4770      	bx	lr
 8001732:	bf00      	nop
 8001734:	e000ed00 	.word	0xe000ed00

08001738 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001738:	b480      	push	{r7}
 800173a:	b083      	sub	sp, #12
 800173c:	af00      	add	r7, sp, #0
 800173e:	4603      	mov	r3, r0
 8001740:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001742:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001746:	2b00      	cmp	r3, #0
 8001748:	db0b      	blt.n	8001762 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800174a:	79fb      	ldrb	r3, [r7, #7]
 800174c:	f003 021f 	and.w	r2, r3, #31
 8001750:	4906      	ldr	r1, [pc, #24]	@ (800176c <__NVIC_EnableIRQ+0x34>)
 8001752:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001756:	095b      	lsrs	r3, r3, #5
 8001758:	2001      	movs	r0, #1
 800175a:	fa00 f202 	lsl.w	r2, r0, r2
 800175e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001762:	bf00      	nop
 8001764:	370c      	adds	r7, #12
 8001766:	46bd      	mov	sp, r7
 8001768:	bc80      	pop	{r7}
 800176a:	4770      	bx	lr
 800176c:	e000e100 	.word	0xe000e100

08001770 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001770:	b480      	push	{r7}
 8001772:	b083      	sub	sp, #12
 8001774:	af00      	add	r7, sp, #0
 8001776:	4603      	mov	r3, r0
 8001778:	6039      	str	r1, [r7, #0]
 800177a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800177c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001780:	2b00      	cmp	r3, #0
 8001782:	db0a      	blt.n	800179a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	b2da      	uxtb	r2, r3
 8001788:	490c      	ldr	r1, [pc, #48]	@ (80017bc <__NVIC_SetPriority+0x4c>)
 800178a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800178e:	0112      	lsls	r2, r2, #4
 8001790:	b2d2      	uxtb	r2, r2
 8001792:	440b      	add	r3, r1
 8001794:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001798:	e00a      	b.n	80017b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	b2da      	uxtb	r2, r3
 800179e:	4908      	ldr	r1, [pc, #32]	@ (80017c0 <__NVIC_SetPriority+0x50>)
 80017a0:	79fb      	ldrb	r3, [r7, #7]
 80017a2:	f003 030f 	and.w	r3, r3, #15
 80017a6:	3b04      	subs	r3, #4
 80017a8:	0112      	lsls	r2, r2, #4
 80017aa:	b2d2      	uxtb	r2, r2
 80017ac:	440b      	add	r3, r1
 80017ae:	761a      	strb	r2, [r3, #24]
}
 80017b0:	bf00      	nop
 80017b2:	370c      	adds	r7, #12
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bc80      	pop	{r7}
 80017b8:	4770      	bx	lr
 80017ba:	bf00      	nop
 80017bc:	e000e100 	.word	0xe000e100
 80017c0:	e000ed00 	.word	0xe000ed00

080017c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b089      	sub	sp, #36	@ 0x24
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	60f8      	str	r0, [r7, #12]
 80017cc:	60b9      	str	r1, [r7, #8]
 80017ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	f003 0307 	and.w	r3, r3, #7
 80017d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017d8:	69fb      	ldr	r3, [r7, #28]
 80017da:	f1c3 0307 	rsb	r3, r3, #7
 80017de:	2b04      	cmp	r3, #4
 80017e0:	bf28      	it	cs
 80017e2:	2304      	movcs	r3, #4
 80017e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017e6:	69fb      	ldr	r3, [r7, #28]
 80017e8:	3304      	adds	r3, #4
 80017ea:	2b06      	cmp	r3, #6
 80017ec:	d902      	bls.n	80017f4 <NVIC_EncodePriority+0x30>
 80017ee:	69fb      	ldr	r3, [r7, #28]
 80017f0:	3b03      	subs	r3, #3
 80017f2:	e000      	b.n	80017f6 <NVIC_EncodePriority+0x32>
 80017f4:	2300      	movs	r3, #0
 80017f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017f8:	f04f 32ff 	mov.w	r2, #4294967295
 80017fc:	69bb      	ldr	r3, [r7, #24]
 80017fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001802:	43da      	mvns	r2, r3
 8001804:	68bb      	ldr	r3, [r7, #8]
 8001806:	401a      	ands	r2, r3
 8001808:	697b      	ldr	r3, [r7, #20]
 800180a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800180c:	f04f 31ff 	mov.w	r1, #4294967295
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	fa01 f303 	lsl.w	r3, r1, r3
 8001816:	43d9      	mvns	r1, r3
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800181c:	4313      	orrs	r3, r2
         );
}
 800181e:	4618      	mov	r0, r3
 8001820:	3724      	adds	r7, #36	@ 0x24
 8001822:	46bd      	mov	sp, r7
 8001824:	bc80      	pop	{r7}
 8001826:	4770      	bx	lr

08001828 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b082      	sub	sp, #8
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001830:	6878      	ldr	r0, [r7, #4]
 8001832:	f7ff ff4f 	bl	80016d4 <__NVIC_SetPriorityGrouping>
}
 8001836:	bf00      	nop
 8001838:	3708      	adds	r7, #8
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}

0800183e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800183e:	b580      	push	{r7, lr}
 8001840:	b086      	sub	sp, #24
 8001842:	af00      	add	r7, sp, #0
 8001844:	4603      	mov	r3, r0
 8001846:	60b9      	str	r1, [r7, #8]
 8001848:	607a      	str	r2, [r7, #4]
 800184a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800184c:	2300      	movs	r3, #0
 800184e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001850:	f7ff ff64 	bl	800171c <__NVIC_GetPriorityGrouping>
 8001854:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001856:	687a      	ldr	r2, [r7, #4]
 8001858:	68b9      	ldr	r1, [r7, #8]
 800185a:	6978      	ldr	r0, [r7, #20]
 800185c:	f7ff ffb2 	bl	80017c4 <NVIC_EncodePriority>
 8001860:	4602      	mov	r2, r0
 8001862:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001866:	4611      	mov	r1, r2
 8001868:	4618      	mov	r0, r3
 800186a:	f7ff ff81 	bl	8001770 <__NVIC_SetPriority>
}
 800186e:	bf00      	nop
 8001870:	3718      	adds	r7, #24
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}

08001876 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001876:	b580      	push	{r7, lr}
 8001878:	b082      	sub	sp, #8
 800187a:	af00      	add	r7, sp, #0
 800187c:	4603      	mov	r3, r0
 800187e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001880:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001884:	4618      	mov	r0, r3
 8001886:	f7ff ff57 	bl	8001738 <__NVIC_EnableIRQ>
}
 800188a:	bf00      	nop
 800188c:	3708      	adds	r7, #8
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}
	...

08001894 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001894:	b480      	push	{r7}
 8001896:	b08b      	sub	sp, #44	@ 0x2c
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
 800189c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800189e:	2300      	movs	r3, #0
 80018a0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80018a2:	2300      	movs	r3, #0
 80018a4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018a6:	e169      	b.n	8001b7c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80018a8:	2201      	movs	r2, #1
 80018aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018ac:	fa02 f303 	lsl.w	r3, r2, r3
 80018b0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	69fa      	ldr	r2, [r7, #28]
 80018b8:	4013      	ands	r3, r2
 80018ba:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80018bc:	69ba      	ldr	r2, [r7, #24]
 80018be:	69fb      	ldr	r3, [r7, #28]
 80018c0:	429a      	cmp	r2, r3
 80018c2:	f040 8158 	bne.w	8001b76 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	4a9a      	ldr	r2, [pc, #616]	@ (8001b34 <HAL_GPIO_Init+0x2a0>)
 80018cc:	4293      	cmp	r3, r2
 80018ce:	d05e      	beq.n	800198e <HAL_GPIO_Init+0xfa>
 80018d0:	4a98      	ldr	r2, [pc, #608]	@ (8001b34 <HAL_GPIO_Init+0x2a0>)
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d875      	bhi.n	80019c2 <HAL_GPIO_Init+0x12e>
 80018d6:	4a98      	ldr	r2, [pc, #608]	@ (8001b38 <HAL_GPIO_Init+0x2a4>)
 80018d8:	4293      	cmp	r3, r2
 80018da:	d058      	beq.n	800198e <HAL_GPIO_Init+0xfa>
 80018dc:	4a96      	ldr	r2, [pc, #600]	@ (8001b38 <HAL_GPIO_Init+0x2a4>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d86f      	bhi.n	80019c2 <HAL_GPIO_Init+0x12e>
 80018e2:	4a96      	ldr	r2, [pc, #600]	@ (8001b3c <HAL_GPIO_Init+0x2a8>)
 80018e4:	4293      	cmp	r3, r2
 80018e6:	d052      	beq.n	800198e <HAL_GPIO_Init+0xfa>
 80018e8:	4a94      	ldr	r2, [pc, #592]	@ (8001b3c <HAL_GPIO_Init+0x2a8>)
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d869      	bhi.n	80019c2 <HAL_GPIO_Init+0x12e>
 80018ee:	4a94      	ldr	r2, [pc, #592]	@ (8001b40 <HAL_GPIO_Init+0x2ac>)
 80018f0:	4293      	cmp	r3, r2
 80018f2:	d04c      	beq.n	800198e <HAL_GPIO_Init+0xfa>
 80018f4:	4a92      	ldr	r2, [pc, #584]	@ (8001b40 <HAL_GPIO_Init+0x2ac>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d863      	bhi.n	80019c2 <HAL_GPIO_Init+0x12e>
 80018fa:	4a92      	ldr	r2, [pc, #584]	@ (8001b44 <HAL_GPIO_Init+0x2b0>)
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d046      	beq.n	800198e <HAL_GPIO_Init+0xfa>
 8001900:	4a90      	ldr	r2, [pc, #576]	@ (8001b44 <HAL_GPIO_Init+0x2b0>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d85d      	bhi.n	80019c2 <HAL_GPIO_Init+0x12e>
 8001906:	2b12      	cmp	r3, #18
 8001908:	d82a      	bhi.n	8001960 <HAL_GPIO_Init+0xcc>
 800190a:	2b12      	cmp	r3, #18
 800190c:	d859      	bhi.n	80019c2 <HAL_GPIO_Init+0x12e>
 800190e:	a201      	add	r2, pc, #4	@ (adr r2, 8001914 <HAL_GPIO_Init+0x80>)
 8001910:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001914:	0800198f 	.word	0x0800198f
 8001918:	08001969 	.word	0x08001969
 800191c:	0800197b 	.word	0x0800197b
 8001920:	080019bd 	.word	0x080019bd
 8001924:	080019c3 	.word	0x080019c3
 8001928:	080019c3 	.word	0x080019c3
 800192c:	080019c3 	.word	0x080019c3
 8001930:	080019c3 	.word	0x080019c3
 8001934:	080019c3 	.word	0x080019c3
 8001938:	080019c3 	.word	0x080019c3
 800193c:	080019c3 	.word	0x080019c3
 8001940:	080019c3 	.word	0x080019c3
 8001944:	080019c3 	.word	0x080019c3
 8001948:	080019c3 	.word	0x080019c3
 800194c:	080019c3 	.word	0x080019c3
 8001950:	080019c3 	.word	0x080019c3
 8001954:	080019c3 	.word	0x080019c3
 8001958:	08001971 	.word	0x08001971
 800195c:	08001985 	.word	0x08001985
 8001960:	4a79      	ldr	r2, [pc, #484]	@ (8001b48 <HAL_GPIO_Init+0x2b4>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d013      	beq.n	800198e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001966:	e02c      	b.n	80019c2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	68db      	ldr	r3, [r3, #12]
 800196c:	623b      	str	r3, [r7, #32]
          break;
 800196e:	e029      	b.n	80019c4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	68db      	ldr	r3, [r3, #12]
 8001974:	3304      	adds	r3, #4
 8001976:	623b      	str	r3, [r7, #32]
          break;
 8001978:	e024      	b.n	80019c4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	68db      	ldr	r3, [r3, #12]
 800197e:	3308      	adds	r3, #8
 8001980:	623b      	str	r3, [r7, #32]
          break;
 8001982:	e01f      	b.n	80019c4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	68db      	ldr	r3, [r3, #12]
 8001988:	330c      	adds	r3, #12
 800198a:	623b      	str	r3, [r7, #32]
          break;
 800198c:	e01a      	b.n	80019c4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	689b      	ldr	r3, [r3, #8]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d102      	bne.n	800199c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001996:	2304      	movs	r3, #4
 8001998:	623b      	str	r3, [r7, #32]
          break;
 800199a:	e013      	b.n	80019c4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	689b      	ldr	r3, [r3, #8]
 80019a0:	2b01      	cmp	r3, #1
 80019a2:	d105      	bne.n	80019b0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80019a4:	2308      	movs	r3, #8
 80019a6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	69fa      	ldr	r2, [r7, #28]
 80019ac:	611a      	str	r2, [r3, #16]
          break;
 80019ae:	e009      	b.n	80019c4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80019b0:	2308      	movs	r3, #8
 80019b2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	69fa      	ldr	r2, [r7, #28]
 80019b8:	615a      	str	r2, [r3, #20]
          break;
 80019ba:	e003      	b.n	80019c4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80019bc:	2300      	movs	r3, #0
 80019be:	623b      	str	r3, [r7, #32]
          break;
 80019c0:	e000      	b.n	80019c4 <HAL_GPIO_Init+0x130>
          break;
 80019c2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80019c4:	69bb      	ldr	r3, [r7, #24]
 80019c6:	2bff      	cmp	r3, #255	@ 0xff
 80019c8:	d801      	bhi.n	80019ce <HAL_GPIO_Init+0x13a>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	e001      	b.n	80019d2 <HAL_GPIO_Init+0x13e>
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	3304      	adds	r3, #4
 80019d2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80019d4:	69bb      	ldr	r3, [r7, #24]
 80019d6:	2bff      	cmp	r3, #255	@ 0xff
 80019d8:	d802      	bhi.n	80019e0 <HAL_GPIO_Init+0x14c>
 80019da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019dc:	009b      	lsls	r3, r3, #2
 80019de:	e002      	b.n	80019e6 <HAL_GPIO_Init+0x152>
 80019e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019e2:	3b08      	subs	r3, #8
 80019e4:	009b      	lsls	r3, r3, #2
 80019e6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	681a      	ldr	r2, [r3, #0]
 80019ec:	210f      	movs	r1, #15
 80019ee:	693b      	ldr	r3, [r7, #16]
 80019f0:	fa01 f303 	lsl.w	r3, r1, r3
 80019f4:	43db      	mvns	r3, r3
 80019f6:	401a      	ands	r2, r3
 80019f8:	6a39      	ldr	r1, [r7, #32]
 80019fa:	693b      	ldr	r3, [r7, #16]
 80019fc:	fa01 f303 	lsl.w	r3, r1, r3
 8001a00:	431a      	orrs	r2, r3
 8001a02:	697b      	ldr	r3, [r7, #20]
 8001a04:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	f000 80b1 	beq.w	8001b76 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001a14:	4b4d      	ldr	r3, [pc, #308]	@ (8001b4c <HAL_GPIO_Init+0x2b8>)
 8001a16:	699b      	ldr	r3, [r3, #24]
 8001a18:	4a4c      	ldr	r2, [pc, #304]	@ (8001b4c <HAL_GPIO_Init+0x2b8>)
 8001a1a:	f043 0301 	orr.w	r3, r3, #1
 8001a1e:	6193      	str	r3, [r2, #24]
 8001a20:	4b4a      	ldr	r3, [pc, #296]	@ (8001b4c <HAL_GPIO_Init+0x2b8>)
 8001a22:	699b      	ldr	r3, [r3, #24]
 8001a24:	f003 0301 	and.w	r3, r3, #1
 8001a28:	60bb      	str	r3, [r7, #8]
 8001a2a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001a2c:	4a48      	ldr	r2, [pc, #288]	@ (8001b50 <HAL_GPIO_Init+0x2bc>)
 8001a2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a30:	089b      	lsrs	r3, r3, #2
 8001a32:	3302      	adds	r3, #2
 8001a34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a38:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001a3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a3c:	f003 0303 	and.w	r3, r3, #3
 8001a40:	009b      	lsls	r3, r3, #2
 8001a42:	220f      	movs	r2, #15
 8001a44:	fa02 f303 	lsl.w	r3, r2, r3
 8001a48:	43db      	mvns	r3, r3
 8001a4a:	68fa      	ldr	r2, [r7, #12]
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	4a40      	ldr	r2, [pc, #256]	@ (8001b54 <HAL_GPIO_Init+0x2c0>)
 8001a54:	4293      	cmp	r3, r2
 8001a56:	d013      	beq.n	8001a80 <HAL_GPIO_Init+0x1ec>
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	4a3f      	ldr	r2, [pc, #252]	@ (8001b58 <HAL_GPIO_Init+0x2c4>)
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	d00d      	beq.n	8001a7c <HAL_GPIO_Init+0x1e8>
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	4a3e      	ldr	r2, [pc, #248]	@ (8001b5c <HAL_GPIO_Init+0x2c8>)
 8001a64:	4293      	cmp	r3, r2
 8001a66:	d007      	beq.n	8001a78 <HAL_GPIO_Init+0x1e4>
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	4a3d      	ldr	r2, [pc, #244]	@ (8001b60 <HAL_GPIO_Init+0x2cc>)
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	d101      	bne.n	8001a74 <HAL_GPIO_Init+0x1e0>
 8001a70:	2303      	movs	r3, #3
 8001a72:	e006      	b.n	8001a82 <HAL_GPIO_Init+0x1ee>
 8001a74:	2304      	movs	r3, #4
 8001a76:	e004      	b.n	8001a82 <HAL_GPIO_Init+0x1ee>
 8001a78:	2302      	movs	r3, #2
 8001a7a:	e002      	b.n	8001a82 <HAL_GPIO_Init+0x1ee>
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	e000      	b.n	8001a82 <HAL_GPIO_Init+0x1ee>
 8001a80:	2300      	movs	r3, #0
 8001a82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a84:	f002 0203 	and.w	r2, r2, #3
 8001a88:	0092      	lsls	r2, r2, #2
 8001a8a:	4093      	lsls	r3, r2
 8001a8c:	68fa      	ldr	r2, [r7, #12]
 8001a8e:	4313      	orrs	r3, r2
 8001a90:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001a92:	492f      	ldr	r1, [pc, #188]	@ (8001b50 <HAL_GPIO_Init+0x2bc>)
 8001a94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a96:	089b      	lsrs	r3, r3, #2
 8001a98:	3302      	adds	r3, #2
 8001a9a:	68fa      	ldr	r2, [r7, #12]
 8001a9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d006      	beq.n	8001aba <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001aac:	4b2d      	ldr	r3, [pc, #180]	@ (8001b64 <HAL_GPIO_Init+0x2d0>)
 8001aae:	689a      	ldr	r2, [r3, #8]
 8001ab0:	492c      	ldr	r1, [pc, #176]	@ (8001b64 <HAL_GPIO_Init+0x2d0>)
 8001ab2:	69bb      	ldr	r3, [r7, #24]
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	608b      	str	r3, [r1, #8]
 8001ab8:	e006      	b.n	8001ac8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001aba:	4b2a      	ldr	r3, [pc, #168]	@ (8001b64 <HAL_GPIO_Init+0x2d0>)
 8001abc:	689a      	ldr	r2, [r3, #8]
 8001abe:	69bb      	ldr	r3, [r7, #24]
 8001ac0:	43db      	mvns	r3, r3
 8001ac2:	4928      	ldr	r1, [pc, #160]	@ (8001b64 <HAL_GPIO_Init+0x2d0>)
 8001ac4:	4013      	ands	r3, r2
 8001ac6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d006      	beq.n	8001ae2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001ad4:	4b23      	ldr	r3, [pc, #140]	@ (8001b64 <HAL_GPIO_Init+0x2d0>)
 8001ad6:	68da      	ldr	r2, [r3, #12]
 8001ad8:	4922      	ldr	r1, [pc, #136]	@ (8001b64 <HAL_GPIO_Init+0x2d0>)
 8001ada:	69bb      	ldr	r3, [r7, #24]
 8001adc:	4313      	orrs	r3, r2
 8001ade:	60cb      	str	r3, [r1, #12]
 8001ae0:	e006      	b.n	8001af0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001ae2:	4b20      	ldr	r3, [pc, #128]	@ (8001b64 <HAL_GPIO_Init+0x2d0>)
 8001ae4:	68da      	ldr	r2, [r3, #12]
 8001ae6:	69bb      	ldr	r3, [r7, #24]
 8001ae8:	43db      	mvns	r3, r3
 8001aea:	491e      	ldr	r1, [pc, #120]	@ (8001b64 <HAL_GPIO_Init+0x2d0>)
 8001aec:	4013      	ands	r3, r2
 8001aee:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d006      	beq.n	8001b0a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001afc:	4b19      	ldr	r3, [pc, #100]	@ (8001b64 <HAL_GPIO_Init+0x2d0>)
 8001afe:	685a      	ldr	r2, [r3, #4]
 8001b00:	4918      	ldr	r1, [pc, #96]	@ (8001b64 <HAL_GPIO_Init+0x2d0>)
 8001b02:	69bb      	ldr	r3, [r7, #24]
 8001b04:	4313      	orrs	r3, r2
 8001b06:	604b      	str	r3, [r1, #4]
 8001b08:	e006      	b.n	8001b18 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001b0a:	4b16      	ldr	r3, [pc, #88]	@ (8001b64 <HAL_GPIO_Init+0x2d0>)
 8001b0c:	685a      	ldr	r2, [r3, #4]
 8001b0e:	69bb      	ldr	r3, [r7, #24]
 8001b10:	43db      	mvns	r3, r3
 8001b12:	4914      	ldr	r1, [pc, #80]	@ (8001b64 <HAL_GPIO_Init+0x2d0>)
 8001b14:	4013      	ands	r3, r2
 8001b16:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d021      	beq.n	8001b68 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001b24:	4b0f      	ldr	r3, [pc, #60]	@ (8001b64 <HAL_GPIO_Init+0x2d0>)
 8001b26:	681a      	ldr	r2, [r3, #0]
 8001b28:	490e      	ldr	r1, [pc, #56]	@ (8001b64 <HAL_GPIO_Init+0x2d0>)
 8001b2a:	69bb      	ldr	r3, [r7, #24]
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	600b      	str	r3, [r1, #0]
 8001b30:	e021      	b.n	8001b76 <HAL_GPIO_Init+0x2e2>
 8001b32:	bf00      	nop
 8001b34:	10320000 	.word	0x10320000
 8001b38:	10310000 	.word	0x10310000
 8001b3c:	10220000 	.word	0x10220000
 8001b40:	10210000 	.word	0x10210000
 8001b44:	10120000 	.word	0x10120000
 8001b48:	10110000 	.word	0x10110000
 8001b4c:	40021000 	.word	0x40021000
 8001b50:	40010000 	.word	0x40010000
 8001b54:	40010800 	.word	0x40010800
 8001b58:	40010c00 	.word	0x40010c00
 8001b5c:	40011000 	.word	0x40011000
 8001b60:	40011400 	.word	0x40011400
 8001b64:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001b68:	4b0b      	ldr	r3, [pc, #44]	@ (8001b98 <HAL_GPIO_Init+0x304>)
 8001b6a:	681a      	ldr	r2, [r3, #0]
 8001b6c:	69bb      	ldr	r3, [r7, #24]
 8001b6e:	43db      	mvns	r3, r3
 8001b70:	4909      	ldr	r1, [pc, #36]	@ (8001b98 <HAL_GPIO_Init+0x304>)
 8001b72:	4013      	ands	r3, r2
 8001b74:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001b76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b78:	3301      	adds	r3, #1
 8001b7a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	681a      	ldr	r2, [r3, #0]
 8001b80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b82:	fa22 f303 	lsr.w	r3, r2, r3
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	f47f ae8e 	bne.w	80018a8 <HAL_GPIO_Init+0x14>
  }
}
 8001b8c:	bf00      	nop
 8001b8e:	bf00      	nop
 8001b90:	372c      	adds	r7, #44	@ 0x2c
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bc80      	pop	{r7}
 8001b96:	4770      	bx	lr
 8001b98:	40010400 	.word	0x40010400

08001b9c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b085      	sub	sp, #20
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
 8001ba4:	460b      	mov	r3, r1
 8001ba6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	689a      	ldr	r2, [r3, #8]
 8001bac:	887b      	ldrh	r3, [r7, #2]
 8001bae:	4013      	ands	r3, r2
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d002      	beq.n	8001bba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	73fb      	strb	r3, [r7, #15]
 8001bb8:	e001      	b.n	8001bbe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001bbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	3714      	adds	r7, #20
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bc80      	pop	{r7}
 8001bc8:	4770      	bx	lr

08001bca <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bca:	b480      	push	{r7}
 8001bcc:	b083      	sub	sp, #12
 8001bce:	af00      	add	r7, sp, #0
 8001bd0:	6078      	str	r0, [r7, #4]
 8001bd2:	460b      	mov	r3, r1
 8001bd4:	807b      	strh	r3, [r7, #2]
 8001bd6:	4613      	mov	r3, r2
 8001bd8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001bda:	787b      	ldrb	r3, [r7, #1]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d003      	beq.n	8001be8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001be0:	887a      	ldrh	r2, [r7, #2]
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001be6:	e003      	b.n	8001bf0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001be8:	887b      	ldrh	r3, [r7, #2]
 8001bea:	041a      	lsls	r2, r3, #16
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	611a      	str	r2, [r3, #16]
}
 8001bf0:	bf00      	nop
 8001bf2:	370c      	adds	r7, #12
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bc80      	pop	{r7}
 8001bf8:	4770      	bx	lr
	...

08001bfc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b084      	sub	sp, #16
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d101      	bne.n	8001c0e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e12b      	b.n	8001e66 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001c14:	b2db      	uxtb	r3, r3
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d106      	bne.n	8001c28 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001c22:	6878      	ldr	r0, [r7, #4]
 8001c24:	f7ff f91c 	bl	8000e60 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2224      	movs	r2, #36	@ 0x24
 8001c2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	681a      	ldr	r2, [r3, #0]
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f022 0201 	bic.w	r2, r2, #1
 8001c3e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	681a      	ldr	r2, [r3, #0]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001c4e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	681a      	ldr	r2, [r3, #0]
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001c5e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001c60:	f001 f842 	bl	8002ce8 <HAL_RCC_GetPCLK1Freq>
 8001c64:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	4a81      	ldr	r2, [pc, #516]	@ (8001e70 <HAL_I2C_Init+0x274>)
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	d807      	bhi.n	8001c80 <HAL_I2C_Init+0x84>
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	4a80      	ldr	r2, [pc, #512]	@ (8001e74 <HAL_I2C_Init+0x278>)
 8001c74:	4293      	cmp	r3, r2
 8001c76:	bf94      	ite	ls
 8001c78:	2301      	movls	r3, #1
 8001c7a:	2300      	movhi	r3, #0
 8001c7c:	b2db      	uxtb	r3, r3
 8001c7e:	e006      	b.n	8001c8e <HAL_I2C_Init+0x92>
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	4a7d      	ldr	r2, [pc, #500]	@ (8001e78 <HAL_I2C_Init+0x27c>)
 8001c84:	4293      	cmp	r3, r2
 8001c86:	bf94      	ite	ls
 8001c88:	2301      	movls	r3, #1
 8001c8a:	2300      	movhi	r3, #0
 8001c8c:	b2db      	uxtb	r3, r3
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d001      	beq.n	8001c96 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001c92:	2301      	movs	r3, #1
 8001c94:	e0e7      	b.n	8001e66 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	4a78      	ldr	r2, [pc, #480]	@ (8001e7c <HAL_I2C_Init+0x280>)
 8001c9a:	fba2 2303 	umull	r2, r3, r2, r3
 8001c9e:	0c9b      	lsrs	r3, r3, #18
 8001ca0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	68ba      	ldr	r2, [r7, #8]
 8001cb2:	430a      	orrs	r2, r1
 8001cb4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	6a1b      	ldr	r3, [r3, #32]
 8001cbc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	4a6a      	ldr	r2, [pc, #424]	@ (8001e70 <HAL_I2C_Init+0x274>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d802      	bhi.n	8001cd0 <HAL_I2C_Init+0xd4>
 8001cca:	68bb      	ldr	r3, [r7, #8]
 8001ccc:	3301      	adds	r3, #1
 8001cce:	e009      	b.n	8001ce4 <HAL_I2C_Init+0xe8>
 8001cd0:	68bb      	ldr	r3, [r7, #8]
 8001cd2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001cd6:	fb02 f303 	mul.w	r3, r2, r3
 8001cda:	4a69      	ldr	r2, [pc, #420]	@ (8001e80 <HAL_I2C_Init+0x284>)
 8001cdc:	fba2 2303 	umull	r2, r3, r2, r3
 8001ce0:	099b      	lsrs	r3, r3, #6
 8001ce2:	3301      	adds	r3, #1
 8001ce4:	687a      	ldr	r2, [r7, #4]
 8001ce6:	6812      	ldr	r2, [r2, #0]
 8001ce8:	430b      	orrs	r3, r1
 8001cea:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	69db      	ldr	r3, [r3, #28]
 8001cf2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001cf6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	495c      	ldr	r1, [pc, #368]	@ (8001e70 <HAL_I2C_Init+0x274>)
 8001d00:	428b      	cmp	r3, r1
 8001d02:	d819      	bhi.n	8001d38 <HAL_I2C_Init+0x13c>
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	1e59      	subs	r1, r3, #1
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	005b      	lsls	r3, r3, #1
 8001d0e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d12:	1c59      	adds	r1, r3, #1
 8001d14:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001d18:	400b      	ands	r3, r1
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d00a      	beq.n	8001d34 <HAL_I2C_Init+0x138>
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	1e59      	subs	r1, r3, #1
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	005b      	lsls	r3, r3, #1
 8001d28:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d2c:	3301      	adds	r3, #1
 8001d2e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d32:	e051      	b.n	8001dd8 <HAL_I2C_Init+0x1dc>
 8001d34:	2304      	movs	r3, #4
 8001d36:	e04f      	b.n	8001dd8 <HAL_I2C_Init+0x1dc>
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	689b      	ldr	r3, [r3, #8]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d111      	bne.n	8001d64 <HAL_I2C_Init+0x168>
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	1e58      	subs	r0, r3, #1
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6859      	ldr	r1, [r3, #4]
 8001d48:	460b      	mov	r3, r1
 8001d4a:	005b      	lsls	r3, r3, #1
 8001d4c:	440b      	add	r3, r1
 8001d4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d52:	3301      	adds	r3, #1
 8001d54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	bf0c      	ite	eq
 8001d5c:	2301      	moveq	r3, #1
 8001d5e:	2300      	movne	r3, #0
 8001d60:	b2db      	uxtb	r3, r3
 8001d62:	e012      	b.n	8001d8a <HAL_I2C_Init+0x18e>
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	1e58      	subs	r0, r3, #1
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6859      	ldr	r1, [r3, #4]
 8001d6c:	460b      	mov	r3, r1
 8001d6e:	009b      	lsls	r3, r3, #2
 8001d70:	440b      	add	r3, r1
 8001d72:	0099      	lsls	r1, r3, #2
 8001d74:	440b      	add	r3, r1
 8001d76:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d7a:	3301      	adds	r3, #1
 8001d7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	bf0c      	ite	eq
 8001d84:	2301      	moveq	r3, #1
 8001d86:	2300      	movne	r3, #0
 8001d88:	b2db      	uxtb	r3, r3
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d001      	beq.n	8001d92 <HAL_I2C_Init+0x196>
 8001d8e:	2301      	movs	r3, #1
 8001d90:	e022      	b.n	8001dd8 <HAL_I2C_Init+0x1dc>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	689b      	ldr	r3, [r3, #8]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d10e      	bne.n	8001db8 <HAL_I2C_Init+0x1bc>
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	1e58      	subs	r0, r3, #1
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6859      	ldr	r1, [r3, #4]
 8001da2:	460b      	mov	r3, r1
 8001da4:	005b      	lsls	r3, r3, #1
 8001da6:	440b      	add	r3, r1
 8001da8:	fbb0 f3f3 	udiv	r3, r0, r3
 8001dac:	3301      	adds	r3, #1
 8001dae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001db2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001db6:	e00f      	b.n	8001dd8 <HAL_I2C_Init+0x1dc>
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	1e58      	subs	r0, r3, #1
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6859      	ldr	r1, [r3, #4]
 8001dc0:	460b      	mov	r3, r1
 8001dc2:	009b      	lsls	r3, r3, #2
 8001dc4:	440b      	add	r3, r1
 8001dc6:	0099      	lsls	r1, r3, #2
 8001dc8:	440b      	add	r3, r1
 8001dca:	fbb0 f3f3 	udiv	r3, r0, r3
 8001dce:	3301      	adds	r3, #1
 8001dd0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001dd4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001dd8:	6879      	ldr	r1, [r7, #4]
 8001dda:	6809      	ldr	r1, [r1, #0]
 8001ddc:	4313      	orrs	r3, r2
 8001dde:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	69da      	ldr	r2, [r3, #28]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6a1b      	ldr	r3, [r3, #32]
 8001df2:	431a      	orrs	r2, r3
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	430a      	orrs	r2, r1
 8001dfa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	689b      	ldr	r3, [r3, #8]
 8001e02:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001e06:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001e0a:	687a      	ldr	r2, [r7, #4]
 8001e0c:	6911      	ldr	r1, [r2, #16]
 8001e0e:	687a      	ldr	r2, [r7, #4]
 8001e10:	68d2      	ldr	r2, [r2, #12]
 8001e12:	4311      	orrs	r1, r2
 8001e14:	687a      	ldr	r2, [r7, #4]
 8001e16:	6812      	ldr	r2, [r2, #0]
 8001e18:	430b      	orrs	r3, r1
 8001e1a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	68db      	ldr	r3, [r3, #12]
 8001e22:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	695a      	ldr	r2, [r3, #20]
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	699b      	ldr	r3, [r3, #24]
 8001e2e:	431a      	orrs	r2, r3
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	430a      	orrs	r2, r1
 8001e36:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	681a      	ldr	r2, [r3, #0]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f042 0201 	orr.w	r2, r2, #1
 8001e46:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2220      	movs	r2, #32
 8001e52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2200      	movs	r2, #0
 8001e5a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2200      	movs	r2, #0
 8001e60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001e64:	2300      	movs	r3, #0
}
 8001e66:	4618      	mov	r0, r3
 8001e68:	3710      	adds	r7, #16
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	bf00      	nop
 8001e70:	000186a0 	.word	0x000186a0
 8001e74:	001e847f 	.word	0x001e847f
 8001e78:	003d08ff 	.word	0x003d08ff
 8001e7c:	431bde83 	.word	0x431bde83
 8001e80:	10624dd3 	.word	0x10624dd3

08001e84 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b088      	sub	sp, #32
 8001e88:	af02      	add	r7, sp, #8
 8001e8a:	60f8      	str	r0, [r7, #12]
 8001e8c:	4608      	mov	r0, r1
 8001e8e:	4611      	mov	r1, r2
 8001e90:	461a      	mov	r2, r3
 8001e92:	4603      	mov	r3, r0
 8001e94:	817b      	strh	r3, [r7, #10]
 8001e96:	460b      	mov	r3, r1
 8001e98:	813b      	strh	r3, [r7, #8]
 8001e9a:	4613      	mov	r3, r2
 8001e9c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001e9e:	f7ff fc0f 	bl	80016c0 <HAL_GetTick>
 8001ea2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001eaa:	b2db      	uxtb	r3, r3
 8001eac:	2b20      	cmp	r3, #32
 8001eae:	f040 80d9 	bne.w	8002064 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001eb2:	697b      	ldr	r3, [r7, #20]
 8001eb4:	9300      	str	r3, [sp, #0]
 8001eb6:	2319      	movs	r3, #25
 8001eb8:	2201      	movs	r2, #1
 8001eba:	496d      	ldr	r1, [pc, #436]	@ (8002070 <HAL_I2C_Mem_Write+0x1ec>)
 8001ebc:	68f8      	ldr	r0, [r7, #12]
 8001ebe:	f000 f971 	bl	80021a4 <I2C_WaitOnFlagUntilTimeout>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d001      	beq.n	8001ecc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001ec8:	2302      	movs	r3, #2
 8001eca:	e0cc      	b.n	8002066 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001ed2:	2b01      	cmp	r3, #1
 8001ed4:	d101      	bne.n	8001eda <HAL_I2C_Mem_Write+0x56>
 8001ed6:	2302      	movs	r3, #2
 8001ed8:	e0c5      	b.n	8002066 <HAL_I2C_Mem_Write+0x1e2>
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	2201      	movs	r2, #1
 8001ede:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f003 0301 	and.w	r3, r3, #1
 8001eec:	2b01      	cmp	r3, #1
 8001eee:	d007      	beq.n	8001f00 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	681a      	ldr	r2, [r3, #0]
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f042 0201 	orr.w	r2, r2, #1
 8001efe:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	681a      	ldr	r2, [r3, #0]
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001f0e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	2221      	movs	r2, #33	@ 0x21
 8001f14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	2240      	movs	r2, #64	@ 0x40
 8001f1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	2200      	movs	r2, #0
 8001f24:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	6a3a      	ldr	r2, [r7, #32]
 8001f2a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001f30:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f36:	b29a      	uxth	r2, r3
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	4a4d      	ldr	r2, [pc, #308]	@ (8002074 <HAL_I2C_Mem_Write+0x1f0>)
 8001f40:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001f42:	88f8      	ldrh	r0, [r7, #6]
 8001f44:	893a      	ldrh	r2, [r7, #8]
 8001f46:	8979      	ldrh	r1, [r7, #10]
 8001f48:	697b      	ldr	r3, [r7, #20]
 8001f4a:	9301      	str	r3, [sp, #4]
 8001f4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f4e:	9300      	str	r3, [sp, #0]
 8001f50:	4603      	mov	r3, r0
 8001f52:	68f8      	ldr	r0, [r7, #12]
 8001f54:	f000 f890 	bl	8002078 <I2C_RequestMemoryWrite>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d052      	beq.n	8002004 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e081      	b.n	8002066 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f62:	697a      	ldr	r2, [r7, #20]
 8001f64:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001f66:	68f8      	ldr	r0, [r7, #12]
 8001f68:	f000 fa36 	bl	80023d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d00d      	beq.n	8001f8e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f76:	2b04      	cmp	r3, #4
 8001f78:	d107      	bne.n	8001f8a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	681a      	ldr	r2, [r3, #0]
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001f88:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e06b      	b.n	8002066 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f92:	781a      	ldrb	r2, [r3, #0]
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f9e:	1c5a      	adds	r2, r3, #1
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001fa8:	3b01      	subs	r3, #1
 8001faa:	b29a      	uxth	r2, r3
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001fb4:	b29b      	uxth	r3, r3
 8001fb6:	3b01      	subs	r3, #1
 8001fb8:	b29a      	uxth	r2, r3
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	695b      	ldr	r3, [r3, #20]
 8001fc4:	f003 0304 	and.w	r3, r3, #4
 8001fc8:	2b04      	cmp	r3, #4
 8001fca:	d11b      	bne.n	8002004 <HAL_I2C_Mem_Write+0x180>
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d017      	beq.n	8002004 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fd8:	781a      	ldrb	r2, [r3, #0]
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fe4:	1c5a      	adds	r2, r3, #1
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001fee:	3b01      	subs	r3, #1
 8001ff0:	b29a      	uxth	r2, r3
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ffa:	b29b      	uxth	r3, r3
 8001ffc:	3b01      	subs	r3, #1
 8001ffe:	b29a      	uxth	r2, r3
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002008:	2b00      	cmp	r3, #0
 800200a:	d1aa      	bne.n	8001f62 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800200c:	697a      	ldr	r2, [r7, #20]
 800200e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002010:	68f8      	ldr	r0, [r7, #12]
 8002012:	f000 fa29 	bl	8002468 <I2C_WaitOnBTFFlagUntilTimeout>
 8002016:	4603      	mov	r3, r0
 8002018:	2b00      	cmp	r3, #0
 800201a:	d00d      	beq.n	8002038 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002020:	2b04      	cmp	r3, #4
 8002022:	d107      	bne.n	8002034 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	681a      	ldr	r2, [r3, #0]
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002032:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002034:	2301      	movs	r3, #1
 8002036:	e016      	b.n	8002066 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	681a      	ldr	r2, [r3, #0]
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002046:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	2220      	movs	r2, #32
 800204c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	2200      	movs	r2, #0
 8002054:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	2200      	movs	r2, #0
 800205c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002060:	2300      	movs	r3, #0
 8002062:	e000      	b.n	8002066 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002064:	2302      	movs	r3, #2
  }
}
 8002066:	4618      	mov	r0, r3
 8002068:	3718      	adds	r7, #24
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	00100002 	.word	0x00100002
 8002074:	ffff0000 	.word	0xffff0000

08002078 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b088      	sub	sp, #32
 800207c:	af02      	add	r7, sp, #8
 800207e:	60f8      	str	r0, [r7, #12]
 8002080:	4608      	mov	r0, r1
 8002082:	4611      	mov	r1, r2
 8002084:	461a      	mov	r2, r3
 8002086:	4603      	mov	r3, r0
 8002088:	817b      	strh	r3, [r7, #10]
 800208a:	460b      	mov	r3, r1
 800208c:	813b      	strh	r3, [r7, #8]
 800208e:	4613      	mov	r3, r2
 8002090:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	681a      	ldr	r2, [r3, #0]
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80020a0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80020a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020a4:	9300      	str	r3, [sp, #0]
 80020a6:	6a3b      	ldr	r3, [r7, #32]
 80020a8:	2200      	movs	r2, #0
 80020aa:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80020ae:	68f8      	ldr	r0, [r7, #12]
 80020b0:	f000 f878 	bl	80021a4 <I2C_WaitOnFlagUntilTimeout>
 80020b4:	4603      	mov	r3, r0
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d00d      	beq.n	80020d6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020c4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80020c8:	d103      	bne.n	80020d2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80020d0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80020d2:	2303      	movs	r3, #3
 80020d4:	e05f      	b.n	8002196 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80020d6:	897b      	ldrh	r3, [r7, #10]
 80020d8:	b2db      	uxtb	r3, r3
 80020da:	461a      	mov	r2, r3
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80020e4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80020e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020e8:	6a3a      	ldr	r2, [r7, #32]
 80020ea:	492d      	ldr	r1, [pc, #180]	@ (80021a0 <I2C_RequestMemoryWrite+0x128>)
 80020ec:	68f8      	ldr	r0, [r7, #12]
 80020ee:	f000 f8d3 	bl	8002298 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80020f2:	4603      	mov	r3, r0
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d001      	beq.n	80020fc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80020f8:	2301      	movs	r3, #1
 80020fa:	e04c      	b.n	8002196 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80020fc:	2300      	movs	r3, #0
 80020fe:	617b      	str	r3, [r7, #20]
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	695b      	ldr	r3, [r3, #20]
 8002106:	617b      	str	r3, [r7, #20]
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	699b      	ldr	r3, [r3, #24]
 800210e:	617b      	str	r3, [r7, #20]
 8002110:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002112:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002114:	6a39      	ldr	r1, [r7, #32]
 8002116:	68f8      	ldr	r0, [r7, #12]
 8002118:	f000 f95e 	bl	80023d8 <I2C_WaitOnTXEFlagUntilTimeout>
 800211c:	4603      	mov	r3, r0
 800211e:	2b00      	cmp	r3, #0
 8002120:	d00d      	beq.n	800213e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002126:	2b04      	cmp	r3, #4
 8002128:	d107      	bne.n	800213a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	681a      	ldr	r2, [r3, #0]
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002138:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800213a:	2301      	movs	r3, #1
 800213c:	e02b      	b.n	8002196 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800213e:	88fb      	ldrh	r3, [r7, #6]
 8002140:	2b01      	cmp	r3, #1
 8002142:	d105      	bne.n	8002150 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002144:	893b      	ldrh	r3, [r7, #8]
 8002146:	b2da      	uxtb	r2, r3
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	611a      	str	r2, [r3, #16]
 800214e:	e021      	b.n	8002194 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002150:	893b      	ldrh	r3, [r7, #8]
 8002152:	0a1b      	lsrs	r3, r3, #8
 8002154:	b29b      	uxth	r3, r3
 8002156:	b2da      	uxtb	r2, r3
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800215e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002160:	6a39      	ldr	r1, [r7, #32]
 8002162:	68f8      	ldr	r0, [r7, #12]
 8002164:	f000 f938 	bl	80023d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002168:	4603      	mov	r3, r0
 800216a:	2b00      	cmp	r3, #0
 800216c:	d00d      	beq.n	800218a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002172:	2b04      	cmp	r3, #4
 8002174:	d107      	bne.n	8002186 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	681a      	ldr	r2, [r3, #0]
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002184:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002186:	2301      	movs	r3, #1
 8002188:	e005      	b.n	8002196 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800218a:	893b      	ldrh	r3, [r7, #8]
 800218c:	b2da      	uxtb	r2, r3
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002194:	2300      	movs	r3, #0
}
 8002196:	4618      	mov	r0, r3
 8002198:	3718      	adds	r7, #24
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}
 800219e:	bf00      	nop
 80021a0:	00010002 	.word	0x00010002

080021a4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b084      	sub	sp, #16
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	60f8      	str	r0, [r7, #12]
 80021ac:	60b9      	str	r1, [r7, #8]
 80021ae:	603b      	str	r3, [r7, #0]
 80021b0:	4613      	mov	r3, r2
 80021b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80021b4:	e048      	b.n	8002248 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021bc:	d044      	beq.n	8002248 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021be:	f7ff fa7f 	bl	80016c0 <HAL_GetTick>
 80021c2:	4602      	mov	r2, r0
 80021c4:	69bb      	ldr	r3, [r7, #24]
 80021c6:	1ad3      	subs	r3, r2, r3
 80021c8:	683a      	ldr	r2, [r7, #0]
 80021ca:	429a      	cmp	r2, r3
 80021cc:	d302      	bcc.n	80021d4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d139      	bne.n	8002248 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80021d4:	68bb      	ldr	r3, [r7, #8]
 80021d6:	0c1b      	lsrs	r3, r3, #16
 80021d8:	b2db      	uxtb	r3, r3
 80021da:	2b01      	cmp	r3, #1
 80021dc:	d10d      	bne.n	80021fa <I2C_WaitOnFlagUntilTimeout+0x56>
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	695b      	ldr	r3, [r3, #20]
 80021e4:	43da      	mvns	r2, r3
 80021e6:	68bb      	ldr	r3, [r7, #8]
 80021e8:	4013      	ands	r3, r2
 80021ea:	b29b      	uxth	r3, r3
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	bf0c      	ite	eq
 80021f0:	2301      	moveq	r3, #1
 80021f2:	2300      	movne	r3, #0
 80021f4:	b2db      	uxtb	r3, r3
 80021f6:	461a      	mov	r2, r3
 80021f8:	e00c      	b.n	8002214 <I2C_WaitOnFlagUntilTimeout+0x70>
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	699b      	ldr	r3, [r3, #24]
 8002200:	43da      	mvns	r2, r3
 8002202:	68bb      	ldr	r3, [r7, #8]
 8002204:	4013      	ands	r3, r2
 8002206:	b29b      	uxth	r3, r3
 8002208:	2b00      	cmp	r3, #0
 800220a:	bf0c      	ite	eq
 800220c:	2301      	moveq	r3, #1
 800220e:	2300      	movne	r3, #0
 8002210:	b2db      	uxtb	r3, r3
 8002212:	461a      	mov	r2, r3
 8002214:	79fb      	ldrb	r3, [r7, #7]
 8002216:	429a      	cmp	r2, r3
 8002218:	d116      	bne.n	8002248 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	2200      	movs	r2, #0
 800221e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	2220      	movs	r2, #32
 8002224:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	2200      	movs	r2, #0
 800222c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002234:	f043 0220 	orr.w	r2, r3, #32
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	2200      	movs	r2, #0
 8002240:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002244:	2301      	movs	r3, #1
 8002246:	e023      	b.n	8002290 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002248:	68bb      	ldr	r3, [r7, #8]
 800224a:	0c1b      	lsrs	r3, r3, #16
 800224c:	b2db      	uxtb	r3, r3
 800224e:	2b01      	cmp	r3, #1
 8002250:	d10d      	bne.n	800226e <I2C_WaitOnFlagUntilTimeout+0xca>
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	695b      	ldr	r3, [r3, #20]
 8002258:	43da      	mvns	r2, r3
 800225a:	68bb      	ldr	r3, [r7, #8]
 800225c:	4013      	ands	r3, r2
 800225e:	b29b      	uxth	r3, r3
 8002260:	2b00      	cmp	r3, #0
 8002262:	bf0c      	ite	eq
 8002264:	2301      	moveq	r3, #1
 8002266:	2300      	movne	r3, #0
 8002268:	b2db      	uxtb	r3, r3
 800226a:	461a      	mov	r2, r3
 800226c:	e00c      	b.n	8002288 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	699b      	ldr	r3, [r3, #24]
 8002274:	43da      	mvns	r2, r3
 8002276:	68bb      	ldr	r3, [r7, #8]
 8002278:	4013      	ands	r3, r2
 800227a:	b29b      	uxth	r3, r3
 800227c:	2b00      	cmp	r3, #0
 800227e:	bf0c      	ite	eq
 8002280:	2301      	moveq	r3, #1
 8002282:	2300      	movne	r3, #0
 8002284:	b2db      	uxtb	r3, r3
 8002286:	461a      	mov	r2, r3
 8002288:	79fb      	ldrb	r3, [r7, #7]
 800228a:	429a      	cmp	r2, r3
 800228c:	d093      	beq.n	80021b6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800228e:	2300      	movs	r3, #0
}
 8002290:	4618      	mov	r0, r3
 8002292:	3710      	adds	r7, #16
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}

08002298 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b084      	sub	sp, #16
 800229c:	af00      	add	r7, sp, #0
 800229e:	60f8      	str	r0, [r7, #12]
 80022a0:	60b9      	str	r1, [r7, #8]
 80022a2:	607a      	str	r2, [r7, #4]
 80022a4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80022a6:	e071      	b.n	800238c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	695b      	ldr	r3, [r3, #20]
 80022ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80022b6:	d123      	bne.n	8002300 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	681a      	ldr	r2, [r3, #0]
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80022c6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80022d0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	2200      	movs	r2, #0
 80022d6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	2220      	movs	r2, #32
 80022dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	2200      	movs	r2, #0
 80022e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022ec:	f043 0204 	orr.w	r2, r3, #4
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	2200      	movs	r2, #0
 80022f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80022fc:	2301      	movs	r3, #1
 80022fe:	e067      	b.n	80023d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002306:	d041      	beq.n	800238c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002308:	f7ff f9da 	bl	80016c0 <HAL_GetTick>
 800230c:	4602      	mov	r2, r0
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	1ad3      	subs	r3, r2, r3
 8002312:	687a      	ldr	r2, [r7, #4]
 8002314:	429a      	cmp	r2, r3
 8002316:	d302      	bcc.n	800231e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d136      	bne.n	800238c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800231e:	68bb      	ldr	r3, [r7, #8]
 8002320:	0c1b      	lsrs	r3, r3, #16
 8002322:	b2db      	uxtb	r3, r3
 8002324:	2b01      	cmp	r3, #1
 8002326:	d10c      	bne.n	8002342 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	695b      	ldr	r3, [r3, #20]
 800232e:	43da      	mvns	r2, r3
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	4013      	ands	r3, r2
 8002334:	b29b      	uxth	r3, r3
 8002336:	2b00      	cmp	r3, #0
 8002338:	bf14      	ite	ne
 800233a:	2301      	movne	r3, #1
 800233c:	2300      	moveq	r3, #0
 800233e:	b2db      	uxtb	r3, r3
 8002340:	e00b      	b.n	800235a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	699b      	ldr	r3, [r3, #24]
 8002348:	43da      	mvns	r2, r3
 800234a:	68bb      	ldr	r3, [r7, #8]
 800234c:	4013      	ands	r3, r2
 800234e:	b29b      	uxth	r3, r3
 8002350:	2b00      	cmp	r3, #0
 8002352:	bf14      	ite	ne
 8002354:	2301      	movne	r3, #1
 8002356:	2300      	moveq	r3, #0
 8002358:	b2db      	uxtb	r3, r3
 800235a:	2b00      	cmp	r3, #0
 800235c:	d016      	beq.n	800238c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	2200      	movs	r2, #0
 8002362:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	2220      	movs	r2, #32
 8002368:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	2200      	movs	r2, #0
 8002370:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002378:	f043 0220 	orr.w	r2, r3, #32
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	2200      	movs	r2, #0
 8002384:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002388:	2301      	movs	r3, #1
 800238a:	e021      	b.n	80023d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800238c:	68bb      	ldr	r3, [r7, #8]
 800238e:	0c1b      	lsrs	r3, r3, #16
 8002390:	b2db      	uxtb	r3, r3
 8002392:	2b01      	cmp	r3, #1
 8002394:	d10c      	bne.n	80023b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	695b      	ldr	r3, [r3, #20]
 800239c:	43da      	mvns	r2, r3
 800239e:	68bb      	ldr	r3, [r7, #8]
 80023a0:	4013      	ands	r3, r2
 80023a2:	b29b      	uxth	r3, r3
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	bf14      	ite	ne
 80023a8:	2301      	movne	r3, #1
 80023aa:	2300      	moveq	r3, #0
 80023ac:	b2db      	uxtb	r3, r3
 80023ae:	e00b      	b.n	80023c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	699b      	ldr	r3, [r3, #24]
 80023b6:	43da      	mvns	r2, r3
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	4013      	ands	r3, r2
 80023bc:	b29b      	uxth	r3, r3
 80023be:	2b00      	cmp	r3, #0
 80023c0:	bf14      	ite	ne
 80023c2:	2301      	movne	r3, #1
 80023c4:	2300      	moveq	r3, #0
 80023c6:	b2db      	uxtb	r3, r3
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	f47f af6d 	bne.w	80022a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80023ce:	2300      	movs	r3, #0
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	3710      	adds	r7, #16
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}

080023d8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b084      	sub	sp, #16
 80023dc:	af00      	add	r7, sp, #0
 80023de:	60f8      	str	r0, [r7, #12]
 80023e0:	60b9      	str	r1, [r7, #8]
 80023e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80023e4:	e034      	b.n	8002450 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80023e6:	68f8      	ldr	r0, [r7, #12]
 80023e8:	f000 f886 	bl	80024f8 <I2C_IsAcknowledgeFailed>
 80023ec:	4603      	mov	r3, r0
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d001      	beq.n	80023f6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
 80023f4:	e034      	b.n	8002460 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80023f6:	68bb      	ldr	r3, [r7, #8]
 80023f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023fc:	d028      	beq.n	8002450 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023fe:	f7ff f95f 	bl	80016c0 <HAL_GetTick>
 8002402:	4602      	mov	r2, r0
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	1ad3      	subs	r3, r2, r3
 8002408:	68ba      	ldr	r2, [r7, #8]
 800240a:	429a      	cmp	r2, r3
 800240c:	d302      	bcc.n	8002414 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800240e:	68bb      	ldr	r3, [r7, #8]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d11d      	bne.n	8002450 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	695b      	ldr	r3, [r3, #20]
 800241a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800241e:	2b80      	cmp	r3, #128	@ 0x80
 8002420:	d016      	beq.n	8002450 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	2200      	movs	r2, #0
 8002426:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	2220      	movs	r2, #32
 800242c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	2200      	movs	r2, #0
 8002434:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800243c:	f043 0220 	orr.w	r2, r3, #32
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	2200      	movs	r2, #0
 8002448:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800244c:	2301      	movs	r3, #1
 800244e:	e007      	b.n	8002460 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	695b      	ldr	r3, [r3, #20]
 8002456:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800245a:	2b80      	cmp	r3, #128	@ 0x80
 800245c:	d1c3      	bne.n	80023e6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800245e:	2300      	movs	r3, #0
}
 8002460:	4618      	mov	r0, r3
 8002462:	3710      	adds	r7, #16
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}

08002468 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b084      	sub	sp, #16
 800246c:	af00      	add	r7, sp, #0
 800246e:	60f8      	str	r0, [r7, #12]
 8002470:	60b9      	str	r1, [r7, #8]
 8002472:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002474:	e034      	b.n	80024e0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002476:	68f8      	ldr	r0, [r7, #12]
 8002478:	f000 f83e 	bl	80024f8 <I2C_IsAcknowledgeFailed>
 800247c:	4603      	mov	r3, r0
 800247e:	2b00      	cmp	r3, #0
 8002480:	d001      	beq.n	8002486 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002482:	2301      	movs	r3, #1
 8002484:	e034      	b.n	80024f0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002486:	68bb      	ldr	r3, [r7, #8]
 8002488:	f1b3 3fff 	cmp.w	r3, #4294967295
 800248c:	d028      	beq.n	80024e0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800248e:	f7ff f917 	bl	80016c0 <HAL_GetTick>
 8002492:	4602      	mov	r2, r0
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	1ad3      	subs	r3, r2, r3
 8002498:	68ba      	ldr	r2, [r7, #8]
 800249a:	429a      	cmp	r2, r3
 800249c:	d302      	bcc.n	80024a4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800249e:	68bb      	ldr	r3, [r7, #8]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d11d      	bne.n	80024e0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	695b      	ldr	r3, [r3, #20]
 80024aa:	f003 0304 	and.w	r3, r3, #4
 80024ae:	2b04      	cmp	r3, #4
 80024b0:	d016      	beq.n	80024e0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	2200      	movs	r2, #0
 80024b6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	2220      	movs	r2, #32
 80024bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	2200      	movs	r2, #0
 80024c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024cc:	f043 0220 	orr.w	r2, r3, #32
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	2200      	movs	r2, #0
 80024d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80024dc:	2301      	movs	r3, #1
 80024de:	e007      	b.n	80024f0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	695b      	ldr	r3, [r3, #20]
 80024e6:	f003 0304 	and.w	r3, r3, #4
 80024ea:	2b04      	cmp	r3, #4
 80024ec:	d1c3      	bne.n	8002476 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80024ee:	2300      	movs	r3, #0
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	3710      	adds	r7, #16
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}

080024f8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b083      	sub	sp, #12
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	695b      	ldr	r3, [r3, #20]
 8002506:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800250a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800250e:	d11b      	bne.n	8002548 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002518:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2200      	movs	r2, #0
 800251e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2220      	movs	r2, #32
 8002524:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2200      	movs	r2, #0
 800252c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002534:	f043 0204 	orr.w	r2, r3, #4
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2200      	movs	r2, #0
 8002540:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002544:	2301      	movs	r3, #1
 8002546:	e000      	b.n	800254a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002548:	2300      	movs	r3, #0
}
 800254a:	4618      	mov	r0, r3
 800254c:	370c      	adds	r7, #12
 800254e:	46bd      	mov	sp, r7
 8002550:	bc80      	pop	{r7}
 8002552:	4770      	bx	lr

08002554 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b086      	sub	sp, #24
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d101      	bne.n	8002566 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002562:	2301      	movs	r3, #1
 8002564:	e272      	b.n	8002a4c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f003 0301 	and.w	r3, r3, #1
 800256e:	2b00      	cmp	r3, #0
 8002570:	f000 8087 	beq.w	8002682 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002574:	4b92      	ldr	r3, [pc, #584]	@ (80027c0 <HAL_RCC_OscConfig+0x26c>)
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	f003 030c 	and.w	r3, r3, #12
 800257c:	2b04      	cmp	r3, #4
 800257e:	d00c      	beq.n	800259a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002580:	4b8f      	ldr	r3, [pc, #572]	@ (80027c0 <HAL_RCC_OscConfig+0x26c>)
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	f003 030c 	and.w	r3, r3, #12
 8002588:	2b08      	cmp	r3, #8
 800258a:	d112      	bne.n	80025b2 <HAL_RCC_OscConfig+0x5e>
 800258c:	4b8c      	ldr	r3, [pc, #560]	@ (80027c0 <HAL_RCC_OscConfig+0x26c>)
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002594:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002598:	d10b      	bne.n	80025b2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800259a:	4b89      	ldr	r3, [pc, #548]	@ (80027c0 <HAL_RCC_OscConfig+0x26c>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d06c      	beq.n	8002680 <HAL_RCC_OscConfig+0x12c>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d168      	bne.n	8002680 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
 80025b0:	e24c      	b.n	8002a4c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80025ba:	d106      	bne.n	80025ca <HAL_RCC_OscConfig+0x76>
 80025bc:	4b80      	ldr	r3, [pc, #512]	@ (80027c0 <HAL_RCC_OscConfig+0x26c>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a7f      	ldr	r2, [pc, #508]	@ (80027c0 <HAL_RCC_OscConfig+0x26c>)
 80025c2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025c6:	6013      	str	r3, [r2, #0]
 80025c8:	e02e      	b.n	8002628 <HAL_RCC_OscConfig+0xd4>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d10c      	bne.n	80025ec <HAL_RCC_OscConfig+0x98>
 80025d2:	4b7b      	ldr	r3, [pc, #492]	@ (80027c0 <HAL_RCC_OscConfig+0x26c>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a7a      	ldr	r2, [pc, #488]	@ (80027c0 <HAL_RCC_OscConfig+0x26c>)
 80025d8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80025dc:	6013      	str	r3, [r2, #0]
 80025de:	4b78      	ldr	r3, [pc, #480]	@ (80027c0 <HAL_RCC_OscConfig+0x26c>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4a77      	ldr	r2, [pc, #476]	@ (80027c0 <HAL_RCC_OscConfig+0x26c>)
 80025e4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80025e8:	6013      	str	r3, [r2, #0]
 80025ea:	e01d      	b.n	8002628 <HAL_RCC_OscConfig+0xd4>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80025f4:	d10c      	bne.n	8002610 <HAL_RCC_OscConfig+0xbc>
 80025f6:	4b72      	ldr	r3, [pc, #456]	@ (80027c0 <HAL_RCC_OscConfig+0x26c>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4a71      	ldr	r2, [pc, #452]	@ (80027c0 <HAL_RCC_OscConfig+0x26c>)
 80025fc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002600:	6013      	str	r3, [r2, #0]
 8002602:	4b6f      	ldr	r3, [pc, #444]	@ (80027c0 <HAL_RCC_OscConfig+0x26c>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4a6e      	ldr	r2, [pc, #440]	@ (80027c0 <HAL_RCC_OscConfig+0x26c>)
 8002608:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800260c:	6013      	str	r3, [r2, #0]
 800260e:	e00b      	b.n	8002628 <HAL_RCC_OscConfig+0xd4>
 8002610:	4b6b      	ldr	r3, [pc, #428]	@ (80027c0 <HAL_RCC_OscConfig+0x26c>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a6a      	ldr	r2, [pc, #424]	@ (80027c0 <HAL_RCC_OscConfig+0x26c>)
 8002616:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800261a:	6013      	str	r3, [r2, #0]
 800261c:	4b68      	ldr	r3, [pc, #416]	@ (80027c0 <HAL_RCC_OscConfig+0x26c>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a67      	ldr	r2, [pc, #412]	@ (80027c0 <HAL_RCC_OscConfig+0x26c>)
 8002622:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002626:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d013      	beq.n	8002658 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002630:	f7ff f846 	bl	80016c0 <HAL_GetTick>
 8002634:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002636:	e008      	b.n	800264a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002638:	f7ff f842 	bl	80016c0 <HAL_GetTick>
 800263c:	4602      	mov	r2, r0
 800263e:	693b      	ldr	r3, [r7, #16]
 8002640:	1ad3      	subs	r3, r2, r3
 8002642:	2b64      	cmp	r3, #100	@ 0x64
 8002644:	d901      	bls.n	800264a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002646:	2303      	movs	r3, #3
 8002648:	e200      	b.n	8002a4c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800264a:	4b5d      	ldr	r3, [pc, #372]	@ (80027c0 <HAL_RCC_OscConfig+0x26c>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002652:	2b00      	cmp	r3, #0
 8002654:	d0f0      	beq.n	8002638 <HAL_RCC_OscConfig+0xe4>
 8002656:	e014      	b.n	8002682 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002658:	f7ff f832 	bl	80016c0 <HAL_GetTick>
 800265c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800265e:	e008      	b.n	8002672 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002660:	f7ff f82e 	bl	80016c0 <HAL_GetTick>
 8002664:	4602      	mov	r2, r0
 8002666:	693b      	ldr	r3, [r7, #16]
 8002668:	1ad3      	subs	r3, r2, r3
 800266a:	2b64      	cmp	r3, #100	@ 0x64
 800266c:	d901      	bls.n	8002672 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800266e:	2303      	movs	r3, #3
 8002670:	e1ec      	b.n	8002a4c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002672:	4b53      	ldr	r3, [pc, #332]	@ (80027c0 <HAL_RCC_OscConfig+0x26c>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800267a:	2b00      	cmp	r3, #0
 800267c:	d1f0      	bne.n	8002660 <HAL_RCC_OscConfig+0x10c>
 800267e:	e000      	b.n	8002682 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002680:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f003 0302 	and.w	r3, r3, #2
 800268a:	2b00      	cmp	r3, #0
 800268c:	d063      	beq.n	8002756 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800268e:	4b4c      	ldr	r3, [pc, #304]	@ (80027c0 <HAL_RCC_OscConfig+0x26c>)
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	f003 030c 	and.w	r3, r3, #12
 8002696:	2b00      	cmp	r3, #0
 8002698:	d00b      	beq.n	80026b2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800269a:	4b49      	ldr	r3, [pc, #292]	@ (80027c0 <HAL_RCC_OscConfig+0x26c>)
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	f003 030c 	and.w	r3, r3, #12
 80026a2:	2b08      	cmp	r3, #8
 80026a4:	d11c      	bne.n	80026e0 <HAL_RCC_OscConfig+0x18c>
 80026a6:	4b46      	ldr	r3, [pc, #280]	@ (80027c0 <HAL_RCC_OscConfig+0x26c>)
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d116      	bne.n	80026e0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026b2:	4b43      	ldr	r3, [pc, #268]	@ (80027c0 <HAL_RCC_OscConfig+0x26c>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f003 0302 	and.w	r3, r3, #2
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d005      	beq.n	80026ca <HAL_RCC_OscConfig+0x176>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	691b      	ldr	r3, [r3, #16]
 80026c2:	2b01      	cmp	r3, #1
 80026c4:	d001      	beq.n	80026ca <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80026c6:	2301      	movs	r3, #1
 80026c8:	e1c0      	b.n	8002a4c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026ca:	4b3d      	ldr	r3, [pc, #244]	@ (80027c0 <HAL_RCC_OscConfig+0x26c>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	695b      	ldr	r3, [r3, #20]
 80026d6:	00db      	lsls	r3, r3, #3
 80026d8:	4939      	ldr	r1, [pc, #228]	@ (80027c0 <HAL_RCC_OscConfig+0x26c>)
 80026da:	4313      	orrs	r3, r2
 80026dc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026de:	e03a      	b.n	8002756 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	691b      	ldr	r3, [r3, #16]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d020      	beq.n	800272a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026e8:	4b36      	ldr	r3, [pc, #216]	@ (80027c4 <HAL_RCC_OscConfig+0x270>)
 80026ea:	2201      	movs	r2, #1
 80026ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026ee:	f7fe ffe7 	bl	80016c0 <HAL_GetTick>
 80026f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026f4:	e008      	b.n	8002708 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026f6:	f7fe ffe3 	bl	80016c0 <HAL_GetTick>
 80026fa:	4602      	mov	r2, r0
 80026fc:	693b      	ldr	r3, [r7, #16]
 80026fe:	1ad3      	subs	r3, r2, r3
 8002700:	2b02      	cmp	r3, #2
 8002702:	d901      	bls.n	8002708 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002704:	2303      	movs	r3, #3
 8002706:	e1a1      	b.n	8002a4c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002708:	4b2d      	ldr	r3, [pc, #180]	@ (80027c0 <HAL_RCC_OscConfig+0x26c>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f003 0302 	and.w	r3, r3, #2
 8002710:	2b00      	cmp	r3, #0
 8002712:	d0f0      	beq.n	80026f6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002714:	4b2a      	ldr	r3, [pc, #168]	@ (80027c0 <HAL_RCC_OscConfig+0x26c>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	695b      	ldr	r3, [r3, #20]
 8002720:	00db      	lsls	r3, r3, #3
 8002722:	4927      	ldr	r1, [pc, #156]	@ (80027c0 <HAL_RCC_OscConfig+0x26c>)
 8002724:	4313      	orrs	r3, r2
 8002726:	600b      	str	r3, [r1, #0]
 8002728:	e015      	b.n	8002756 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800272a:	4b26      	ldr	r3, [pc, #152]	@ (80027c4 <HAL_RCC_OscConfig+0x270>)
 800272c:	2200      	movs	r2, #0
 800272e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002730:	f7fe ffc6 	bl	80016c0 <HAL_GetTick>
 8002734:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002736:	e008      	b.n	800274a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002738:	f7fe ffc2 	bl	80016c0 <HAL_GetTick>
 800273c:	4602      	mov	r2, r0
 800273e:	693b      	ldr	r3, [r7, #16]
 8002740:	1ad3      	subs	r3, r2, r3
 8002742:	2b02      	cmp	r3, #2
 8002744:	d901      	bls.n	800274a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002746:	2303      	movs	r3, #3
 8002748:	e180      	b.n	8002a4c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800274a:	4b1d      	ldr	r3, [pc, #116]	@ (80027c0 <HAL_RCC_OscConfig+0x26c>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f003 0302 	and.w	r3, r3, #2
 8002752:	2b00      	cmp	r3, #0
 8002754:	d1f0      	bne.n	8002738 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f003 0308 	and.w	r3, r3, #8
 800275e:	2b00      	cmp	r3, #0
 8002760:	d03a      	beq.n	80027d8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	699b      	ldr	r3, [r3, #24]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d019      	beq.n	800279e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800276a:	4b17      	ldr	r3, [pc, #92]	@ (80027c8 <HAL_RCC_OscConfig+0x274>)
 800276c:	2201      	movs	r2, #1
 800276e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002770:	f7fe ffa6 	bl	80016c0 <HAL_GetTick>
 8002774:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002776:	e008      	b.n	800278a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002778:	f7fe ffa2 	bl	80016c0 <HAL_GetTick>
 800277c:	4602      	mov	r2, r0
 800277e:	693b      	ldr	r3, [r7, #16]
 8002780:	1ad3      	subs	r3, r2, r3
 8002782:	2b02      	cmp	r3, #2
 8002784:	d901      	bls.n	800278a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002786:	2303      	movs	r3, #3
 8002788:	e160      	b.n	8002a4c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800278a:	4b0d      	ldr	r3, [pc, #52]	@ (80027c0 <HAL_RCC_OscConfig+0x26c>)
 800278c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800278e:	f003 0302 	and.w	r3, r3, #2
 8002792:	2b00      	cmp	r3, #0
 8002794:	d0f0      	beq.n	8002778 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002796:	2001      	movs	r0, #1
 8002798:	f000 fafe 	bl	8002d98 <RCC_Delay>
 800279c:	e01c      	b.n	80027d8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800279e:	4b0a      	ldr	r3, [pc, #40]	@ (80027c8 <HAL_RCC_OscConfig+0x274>)
 80027a0:	2200      	movs	r2, #0
 80027a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027a4:	f7fe ff8c 	bl	80016c0 <HAL_GetTick>
 80027a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027aa:	e00f      	b.n	80027cc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027ac:	f7fe ff88 	bl	80016c0 <HAL_GetTick>
 80027b0:	4602      	mov	r2, r0
 80027b2:	693b      	ldr	r3, [r7, #16]
 80027b4:	1ad3      	subs	r3, r2, r3
 80027b6:	2b02      	cmp	r3, #2
 80027b8:	d908      	bls.n	80027cc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80027ba:	2303      	movs	r3, #3
 80027bc:	e146      	b.n	8002a4c <HAL_RCC_OscConfig+0x4f8>
 80027be:	bf00      	nop
 80027c0:	40021000 	.word	0x40021000
 80027c4:	42420000 	.word	0x42420000
 80027c8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027cc:	4b92      	ldr	r3, [pc, #584]	@ (8002a18 <HAL_RCC_OscConfig+0x4c4>)
 80027ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027d0:	f003 0302 	and.w	r3, r3, #2
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d1e9      	bne.n	80027ac <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f003 0304 	and.w	r3, r3, #4
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	f000 80a6 	beq.w	8002932 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027e6:	2300      	movs	r3, #0
 80027e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027ea:	4b8b      	ldr	r3, [pc, #556]	@ (8002a18 <HAL_RCC_OscConfig+0x4c4>)
 80027ec:	69db      	ldr	r3, [r3, #28]
 80027ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d10d      	bne.n	8002812 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027f6:	4b88      	ldr	r3, [pc, #544]	@ (8002a18 <HAL_RCC_OscConfig+0x4c4>)
 80027f8:	69db      	ldr	r3, [r3, #28]
 80027fa:	4a87      	ldr	r2, [pc, #540]	@ (8002a18 <HAL_RCC_OscConfig+0x4c4>)
 80027fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002800:	61d3      	str	r3, [r2, #28]
 8002802:	4b85      	ldr	r3, [pc, #532]	@ (8002a18 <HAL_RCC_OscConfig+0x4c4>)
 8002804:	69db      	ldr	r3, [r3, #28]
 8002806:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800280a:	60bb      	str	r3, [r7, #8]
 800280c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800280e:	2301      	movs	r3, #1
 8002810:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002812:	4b82      	ldr	r3, [pc, #520]	@ (8002a1c <HAL_RCC_OscConfig+0x4c8>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800281a:	2b00      	cmp	r3, #0
 800281c:	d118      	bne.n	8002850 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800281e:	4b7f      	ldr	r3, [pc, #508]	@ (8002a1c <HAL_RCC_OscConfig+0x4c8>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a7e      	ldr	r2, [pc, #504]	@ (8002a1c <HAL_RCC_OscConfig+0x4c8>)
 8002824:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002828:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800282a:	f7fe ff49 	bl	80016c0 <HAL_GetTick>
 800282e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002830:	e008      	b.n	8002844 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002832:	f7fe ff45 	bl	80016c0 <HAL_GetTick>
 8002836:	4602      	mov	r2, r0
 8002838:	693b      	ldr	r3, [r7, #16]
 800283a:	1ad3      	subs	r3, r2, r3
 800283c:	2b64      	cmp	r3, #100	@ 0x64
 800283e:	d901      	bls.n	8002844 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002840:	2303      	movs	r3, #3
 8002842:	e103      	b.n	8002a4c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002844:	4b75      	ldr	r3, [pc, #468]	@ (8002a1c <HAL_RCC_OscConfig+0x4c8>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800284c:	2b00      	cmp	r3, #0
 800284e:	d0f0      	beq.n	8002832 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	68db      	ldr	r3, [r3, #12]
 8002854:	2b01      	cmp	r3, #1
 8002856:	d106      	bne.n	8002866 <HAL_RCC_OscConfig+0x312>
 8002858:	4b6f      	ldr	r3, [pc, #444]	@ (8002a18 <HAL_RCC_OscConfig+0x4c4>)
 800285a:	6a1b      	ldr	r3, [r3, #32]
 800285c:	4a6e      	ldr	r2, [pc, #440]	@ (8002a18 <HAL_RCC_OscConfig+0x4c4>)
 800285e:	f043 0301 	orr.w	r3, r3, #1
 8002862:	6213      	str	r3, [r2, #32]
 8002864:	e02d      	b.n	80028c2 <HAL_RCC_OscConfig+0x36e>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	68db      	ldr	r3, [r3, #12]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d10c      	bne.n	8002888 <HAL_RCC_OscConfig+0x334>
 800286e:	4b6a      	ldr	r3, [pc, #424]	@ (8002a18 <HAL_RCC_OscConfig+0x4c4>)
 8002870:	6a1b      	ldr	r3, [r3, #32]
 8002872:	4a69      	ldr	r2, [pc, #420]	@ (8002a18 <HAL_RCC_OscConfig+0x4c4>)
 8002874:	f023 0301 	bic.w	r3, r3, #1
 8002878:	6213      	str	r3, [r2, #32]
 800287a:	4b67      	ldr	r3, [pc, #412]	@ (8002a18 <HAL_RCC_OscConfig+0x4c4>)
 800287c:	6a1b      	ldr	r3, [r3, #32]
 800287e:	4a66      	ldr	r2, [pc, #408]	@ (8002a18 <HAL_RCC_OscConfig+0x4c4>)
 8002880:	f023 0304 	bic.w	r3, r3, #4
 8002884:	6213      	str	r3, [r2, #32]
 8002886:	e01c      	b.n	80028c2 <HAL_RCC_OscConfig+0x36e>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	68db      	ldr	r3, [r3, #12]
 800288c:	2b05      	cmp	r3, #5
 800288e:	d10c      	bne.n	80028aa <HAL_RCC_OscConfig+0x356>
 8002890:	4b61      	ldr	r3, [pc, #388]	@ (8002a18 <HAL_RCC_OscConfig+0x4c4>)
 8002892:	6a1b      	ldr	r3, [r3, #32]
 8002894:	4a60      	ldr	r2, [pc, #384]	@ (8002a18 <HAL_RCC_OscConfig+0x4c4>)
 8002896:	f043 0304 	orr.w	r3, r3, #4
 800289a:	6213      	str	r3, [r2, #32]
 800289c:	4b5e      	ldr	r3, [pc, #376]	@ (8002a18 <HAL_RCC_OscConfig+0x4c4>)
 800289e:	6a1b      	ldr	r3, [r3, #32]
 80028a0:	4a5d      	ldr	r2, [pc, #372]	@ (8002a18 <HAL_RCC_OscConfig+0x4c4>)
 80028a2:	f043 0301 	orr.w	r3, r3, #1
 80028a6:	6213      	str	r3, [r2, #32]
 80028a8:	e00b      	b.n	80028c2 <HAL_RCC_OscConfig+0x36e>
 80028aa:	4b5b      	ldr	r3, [pc, #364]	@ (8002a18 <HAL_RCC_OscConfig+0x4c4>)
 80028ac:	6a1b      	ldr	r3, [r3, #32]
 80028ae:	4a5a      	ldr	r2, [pc, #360]	@ (8002a18 <HAL_RCC_OscConfig+0x4c4>)
 80028b0:	f023 0301 	bic.w	r3, r3, #1
 80028b4:	6213      	str	r3, [r2, #32]
 80028b6:	4b58      	ldr	r3, [pc, #352]	@ (8002a18 <HAL_RCC_OscConfig+0x4c4>)
 80028b8:	6a1b      	ldr	r3, [r3, #32]
 80028ba:	4a57      	ldr	r2, [pc, #348]	@ (8002a18 <HAL_RCC_OscConfig+0x4c4>)
 80028bc:	f023 0304 	bic.w	r3, r3, #4
 80028c0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	68db      	ldr	r3, [r3, #12]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d015      	beq.n	80028f6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028ca:	f7fe fef9 	bl	80016c0 <HAL_GetTick>
 80028ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028d0:	e00a      	b.n	80028e8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028d2:	f7fe fef5 	bl	80016c0 <HAL_GetTick>
 80028d6:	4602      	mov	r2, r0
 80028d8:	693b      	ldr	r3, [r7, #16]
 80028da:	1ad3      	subs	r3, r2, r3
 80028dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d901      	bls.n	80028e8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80028e4:	2303      	movs	r3, #3
 80028e6:	e0b1      	b.n	8002a4c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028e8:	4b4b      	ldr	r3, [pc, #300]	@ (8002a18 <HAL_RCC_OscConfig+0x4c4>)
 80028ea:	6a1b      	ldr	r3, [r3, #32]
 80028ec:	f003 0302 	and.w	r3, r3, #2
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d0ee      	beq.n	80028d2 <HAL_RCC_OscConfig+0x37e>
 80028f4:	e014      	b.n	8002920 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028f6:	f7fe fee3 	bl	80016c0 <HAL_GetTick>
 80028fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028fc:	e00a      	b.n	8002914 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028fe:	f7fe fedf 	bl	80016c0 <HAL_GetTick>
 8002902:	4602      	mov	r2, r0
 8002904:	693b      	ldr	r3, [r7, #16]
 8002906:	1ad3      	subs	r3, r2, r3
 8002908:	f241 3288 	movw	r2, #5000	@ 0x1388
 800290c:	4293      	cmp	r3, r2
 800290e:	d901      	bls.n	8002914 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002910:	2303      	movs	r3, #3
 8002912:	e09b      	b.n	8002a4c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002914:	4b40      	ldr	r3, [pc, #256]	@ (8002a18 <HAL_RCC_OscConfig+0x4c4>)
 8002916:	6a1b      	ldr	r3, [r3, #32]
 8002918:	f003 0302 	and.w	r3, r3, #2
 800291c:	2b00      	cmp	r3, #0
 800291e:	d1ee      	bne.n	80028fe <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002920:	7dfb      	ldrb	r3, [r7, #23]
 8002922:	2b01      	cmp	r3, #1
 8002924:	d105      	bne.n	8002932 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002926:	4b3c      	ldr	r3, [pc, #240]	@ (8002a18 <HAL_RCC_OscConfig+0x4c4>)
 8002928:	69db      	ldr	r3, [r3, #28]
 800292a:	4a3b      	ldr	r2, [pc, #236]	@ (8002a18 <HAL_RCC_OscConfig+0x4c4>)
 800292c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002930:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	69db      	ldr	r3, [r3, #28]
 8002936:	2b00      	cmp	r3, #0
 8002938:	f000 8087 	beq.w	8002a4a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800293c:	4b36      	ldr	r3, [pc, #216]	@ (8002a18 <HAL_RCC_OscConfig+0x4c4>)
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	f003 030c 	and.w	r3, r3, #12
 8002944:	2b08      	cmp	r3, #8
 8002946:	d061      	beq.n	8002a0c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	69db      	ldr	r3, [r3, #28]
 800294c:	2b02      	cmp	r3, #2
 800294e:	d146      	bne.n	80029de <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002950:	4b33      	ldr	r3, [pc, #204]	@ (8002a20 <HAL_RCC_OscConfig+0x4cc>)
 8002952:	2200      	movs	r2, #0
 8002954:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002956:	f7fe feb3 	bl	80016c0 <HAL_GetTick>
 800295a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800295c:	e008      	b.n	8002970 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800295e:	f7fe feaf 	bl	80016c0 <HAL_GetTick>
 8002962:	4602      	mov	r2, r0
 8002964:	693b      	ldr	r3, [r7, #16]
 8002966:	1ad3      	subs	r3, r2, r3
 8002968:	2b02      	cmp	r3, #2
 800296a:	d901      	bls.n	8002970 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800296c:	2303      	movs	r3, #3
 800296e:	e06d      	b.n	8002a4c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002970:	4b29      	ldr	r3, [pc, #164]	@ (8002a18 <HAL_RCC_OscConfig+0x4c4>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002978:	2b00      	cmp	r3, #0
 800297a:	d1f0      	bne.n	800295e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6a1b      	ldr	r3, [r3, #32]
 8002980:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002984:	d108      	bne.n	8002998 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002986:	4b24      	ldr	r3, [pc, #144]	@ (8002a18 <HAL_RCC_OscConfig+0x4c4>)
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	689b      	ldr	r3, [r3, #8]
 8002992:	4921      	ldr	r1, [pc, #132]	@ (8002a18 <HAL_RCC_OscConfig+0x4c4>)
 8002994:	4313      	orrs	r3, r2
 8002996:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002998:	4b1f      	ldr	r3, [pc, #124]	@ (8002a18 <HAL_RCC_OscConfig+0x4c4>)
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6a19      	ldr	r1, [r3, #32]
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029a8:	430b      	orrs	r3, r1
 80029aa:	491b      	ldr	r1, [pc, #108]	@ (8002a18 <HAL_RCC_OscConfig+0x4c4>)
 80029ac:	4313      	orrs	r3, r2
 80029ae:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029b0:	4b1b      	ldr	r3, [pc, #108]	@ (8002a20 <HAL_RCC_OscConfig+0x4cc>)
 80029b2:	2201      	movs	r2, #1
 80029b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029b6:	f7fe fe83 	bl	80016c0 <HAL_GetTick>
 80029ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80029bc:	e008      	b.n	80029d0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029be:	f7fe fe7f 	bl	80016c0 <HAL_GetTick>
 80029c2:	4602      	mov	r2, r0
 80029c4:	693b      	ldr	r3, [r7, #16]
 80029c6:	1ad3      	subs	r3, r2, r3
 80029c8:	2b02      	cmp	r3, #2
 80029ca:	d901      	bls.n	80029d0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80029cc:	2303      	movs	r3, #3
 80029ce:	e03d      	b.n	8002a4c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80029d0:	4b11      	ldr	r3, [pc, #68]	@ (8002a18 <HAL_RCC_OscConfig+0x4c4>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d0f0      	beq.n	80029be <HAL_RCC_OscConfig+0x46a>
 80029dc:	e035      	b.n	8002a4a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029de:	4b10      	ldr	r3, [pc, #64]	@ (8002a20 <HAL_RCC_OscConfig+0x4cc>)
 80029e0:	2200      	movs	r2, #0
 80029e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029e4:	f7fe fe6c 	bl	80016c0 <HAL_GetTick>
 80029e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029ea:	e008      	b.n	80029fe <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029ec:	f7fe fe68 	bl	80016c0 <HAL_GetTick>
 80029f0:	4602      	mov	r2, r0
 80029f2:	693b      	ldr	r3, [r7, #16]
 80029f4:	1ad3      	subs	r3, r2, r3
 80029f6:	2b02      	cmp	r3, #2
 80029f8:	d901      	bls.n	80029fe <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80029fa:	2303      	movs	r3, #3
 80029fc:	e026      	b.n	8002a4c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029fe:	4b06      	ldr	r3, [pc, #24]	@ (8002a18 <HAL_RCC_OscConfig+0x4c4>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d1f0      	bne.n	80029ec <HAL_RCC_OscConfig+0x498>
 8002a0a:	e01e      	b.n	8002a4a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	69db      	ldr	r3, [r3, #28]
 8002a10:	2b01      	cmp	r3, #1
 8002a12:	d107      	bne.n	8002a24 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002a14:	2301      	movs	r3, #1
 8002a16:	e019      	b.n	8002a4c <HAL_RCC_OscConfig+0x4f8>
 8002a18:	40021000 	.word	0x40021000
 8002a1c:	40007000 	.word	0x40007000
 8002a20:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002a24:	4b0b      	ldr	r3, [pc, #44]	@ (8002a54 <HAL_RCC_OscConfig+0x500>)
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6a1b      	ldr	r3, [r3, #32]
 8002a34:	429a      	cmp	r2, r3
 8002a36:	d106      	bne.n	8002a46 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a42:	429a      	cmp	r2, r3
 8002a44:	d001      	beq.n	8002a4a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002a46:	2301      	movs	r3, #1
 8002a48:	e000      	b.n	8002a4c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002a4a:	2300      	movs	r3, #0
}
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	3718      	adds	r7, #24
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bd80      	pop	{r7, pc}
 8002a54:	40021000 	.word	0x40021000

08002a58 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b084      	sub	sp, #16
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
 8002a60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d101      	bne.n	8002a6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	e0d0      	b.n	8002c0e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a6c:	4b6a      	ldr	r3, [pc, #424]	@ (8002c18 <HAL_RCC_ClockConfig+0x1c0>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f003 0307 	and.w	r3, r3, #7
 8002a74:	683a      	ldr	r2, [r7, #0]
 8002a76:	429a      	cmp	r2, r3
 8002a78:	d910      	bls.n	8002a9c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a7a:	4b67      	ldr	r3, [pc, #412]	@ (8002c18 <HAL_RCC_ClockConfig+0x1c0>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f023 0207 	bic.w	r2, r3, #7
 8002a82:	4965      	ldr	r1, [pc, #404]	@ (8002c18 <HAL_RCC_ClockConfig+0x1c0>)
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	4313      	orrs	r3, r2
 8002a88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a8a:	4b63      	ldr	r3, [pc, #396]	@ (8002c18 <HAL_RCC_ClockConfig+0x1c0>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f003 0307 	and.w	r3, r3, #7
 8002a92:	683a      	ldr	r2, [r7, #0]
 8002a94:	429a      	cmp	r2, r3
 8002a96:	d001      	beq.n	8002a9c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	e0b8      	b.n	8002c0e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f003 0302 	and.w	r3, r3, #2
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d020      	beq.n	8002aea <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f003 0304 	and.w	r3, r3, #4
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d005      	beq.n	8002ac0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ab4:	4b59      	ldr	r3, [pc, #356]	@ (8002c1c <HAL_RCC_ClockConfig+0x1c4>)
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	4a58      	ldr	r2, [pc, #352]	@ (8002c1c <HAL_RCC_ClockConfig+0x1c4>)
 8002aba:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002abe:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f003 0308 	and.w	r3, r3, #8
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d005      	beq.n	8002ad8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002acc:	4b53      	ldr	r3, [pc, #332]	@ (8002c1c <HAL_RCC_ClockConfig+0x1c4>)
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	4a52      	ldr	r2, [pc, #328]	@ (8002c1c <HAL_RCC_ClockConfig+0x1c4>)
 8002ad2:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002ad6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ad8:	4b50      	ldr	r3, [pc, #320]	@ (8002c1c <HAL_RCC_ClockConfig+0x1c4>)
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	689b      	ldr	r3, [r3, #8]
 8002ae4:	494d      	ldr	r1, [pc, #308]	@ (8002c1c <HAL_RCC_ClockConfig+0x1c4>)
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f003 0301 	and.w	r3, r3, #1
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d040      	beq.n	8002b78 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	2b01      	cmp	r3, #1
 8002afc:	d107      	bne.n	8002b0e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002afe:	4b47      	ldr	r3, [pc, #284]	@ (8002c1c <HAL_RCC_ClockConfig+0x1c4>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d115      	bne.n	8002b36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	e07f      	b.n	8002c0e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	2b02      	cmp	r3, #2
 8002b14:	d107      	bne.n	8002b26 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b16:	4b41      	ldr	r3, [pc, #260]	@ (8002c1c <HAL_RCC_ClockConfig+0x1c4>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d109      	bne.n	8002b36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b22:	2301      	movs	r3, #1
 8002b24:	e073      	b.n	8002c0e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b26:	4b3d      	ldr	r3, [pc, #244]	@ (8002c1c <HAL_RCC_ClockConfig+0x1c4>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f003 0302 	and.w	r3, r3, #2
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d101      	bne.n	8002b36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	e06b      	b.n	8002c0e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b36:	4b39      	ldr	r3, [pc, #228]	@ (8002c1c <HAL_RCC_ClockConfig+0x1c4>)
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	f023 0203 	bic.w	r2, r3, #3
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	4936      	ldr	r1, [pc, #216]	@ (8002c1c <HAL_RCC_ClockConfig+0x1c4>)
 8002b44:	4313      	orrs	r3, r2
 8002b46:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b48:	f7fe fdba 	bl	80016c0 <HAL_GetTick>
 8002b4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b4e:	e00a      	b.n	8002b66 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b50:	f7fe fdb6 	bl	80016c0 <HAL_GetTick>
 8002b54:	4602      	mov	r2, r0
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	1ad3      	subs	r3, r2, r3
 8002b5a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d901      	bls.n	8002b66 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b62:	2303      	movs	r3, #3
 8002b64:	e053      	b.n	8002c0e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b66:	4b2d      	ldr	r3, [pc, #180]	@ (8002c1c <HAL_RCC_ClockConfig+0x1c4>)
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	f003 020c 	and.w	r2, r3, #12
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	009b      	lsls	r3, r3, #2
 8002b74:	429a      	cmp	r2, r3
 8002b76:	d1eb      	bne.n	8002b50 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b78:	4b27      	ldr	r3, [pc, #156]	@ (8002c18 <HAL_RCC_ClockConfig+0x1c0>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f003 0307 	and.w	r3, r3, #7
 8002b80:	683a      	ldr	r2, [r7, #0]
 8002b82:	429a      	cmp	r2, r3
 8002b84:	d210      	bcs.n	8002ba8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b86:	4b24      	ldr	r3, [pc, #144]	@ (8002c18 <HAL_RCC_ClockConfig+0x1c0>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f023 0207 	bic.w	r2, r3, #7
 8002b8e:	4922      	ldr	r1, [pc, #136]	@ (8002c18 <HAL_RCC_ClockConfig+0x1c0>)
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	4313      	orrs	r3, r2
 8002b94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b96:	4b20      	ldr	r3, [pc, #128]	@ (8002c18 <HAL_RCC_ClockConfig+0x1c0>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f003 0307 	and.w	r3, r3, #7
 8002b9e:	683a      	ldr	r2, [r7, #0]
 8002ba0:	429a      	cmp	r2, r3
 8002ba2:	d001      	beq.n	8002ba8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	e032      	b.n	8002c0e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f003 0304 	and.w	r3, r3, #4
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d008      	beq.n	8002bc6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002bb4:	4b19      	ldr	r3, [pc, #100]	@ (8002c1c <HAL_RCC_ClockConfig+0x1c4>)
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	68db      	ldr	r3, [r3, #12]
 8002bc0:	4916      	ldr	r1, [pc, #88]	@ (8002c1c <HAL_RCC_ClockConfig+0x1c4>)
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f003 0308 	and.w	r3, r3, #8
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d009      	beq.n	8002be6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002bd2:	4b12      	ldr	r3, [pc, #72]	@ (8002c1c <HAL_RCC_ClockConfig+0x1c4>)
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	691b      	ldr	r3, [r3, #16]
 8002bde:	00db      	lsls	r3, r3, #3
 8002be0:	490e      	ldr	r1, [pc, #56]	@ (8002c1c <HAL_RCC_ClockConfig+0x1c4>)
 8002be2:	4313      	orrs	r3, r2
 8002be4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002be6:	f000 f821 	bl	8002c2c <HAL_RCC_GetSysClockFreq>
 8002bea:	4602      	mov	r2, r0
 8002bec:	4b0b      	ldr	r3, [pc, #44]	@ (8002c1c <HAL_RCC_ClockConfig+0x1c4>)
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	091b      	lsrs	r3, r3, #4
 8002bf2:	f003 030f 	and.w	r3, r3, #15
 8002bf6:	490a      	ldr	r1, [pc, #40]	@ (8002c20 <HAL_RCC_ClockConfig+0x1c8>)
 8002bf8:	5ccb      	ldrb	r3, [r1, r3]
 8002bfa:	fa22 f303 	lsr.w	r3, r2, r3
 8002bfe:	4a09      	ldr	r2, [pc, #36]	@ (8002c24 <HAL_RCC_ClockConfig+0x1cc>)
 8002c00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002c02:	4b09      	ldr	r3, [pc, #36]	@ (8002c28 <HAL_RCC_ClockConfig+0x1d0>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4618      	mov	r0, r3
 8002c08:	f7fe fb0e 	bl	8001228 <HAL_InitTick>

  return HAL_OK;
 8002c0c:	2300      	movs	r3, #0
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	3710      	adds	r7, #16
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}
 8002c16:	bf00      	nop
 8002c18:	40022000 	.word	0x40022000
 8002c1c:	40021000 	.word	0x40021000
 8002c20:	08009e80 	.word	0x08009e80
 8002c24:	20000400 	.word	0x20000400
 8002c28:	20000404 	.word	0x20000404

08002c2c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b087      	sub	sp, #28
 8002c30:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002c32:	2300      	movs	r3, #0
 8002c34:	60fb      	str	r3, [r7, #12]
 8002c36:	2300      	movs	r3, #0
 8002c38:	60bb      	str	r3, [r7, #8]
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	617b      	str	r3, [r7, #20]
 8002c3e:	2300      	movs	r3, #0
 8002c40:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002c42:	2300      	movs	r3, #0
 8002c44:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002c46:	4b1e      	ldr	r3, [pc, #120]	@ (8002cc0 <HAL_RCC_GetSysClockFreq+0x94>)
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	f003 030c 	and.w	r3, r3, #12
 8002c52:	2b04      	cmp	r3, #4
 8002c54:	d002      	beq.n	8002c5c <HAL_RCC_GetSysClockFreq+0x30>
 8002c56:	2b08      	cmp	r3, #8
 8002c58:	d003      	beq.n	8002c62 <HAL_RCC_GetSysClockFreq+0x36>
 8002c5a:	e027      	b.n	8002cac <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002c5c:	4b19      	ldr	r3, [pc, #100]	@ (8002cc4 <HAL_RCC_GetSysClockFreq+0x98>)
 8002c5e:	613b      	str	r3, [r7, #16]
      break;
 8002c60:	e027      	b.n	8002cb2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	0c9b      	lsrs	r3, r3, #18
 8002c66:	f003 030f 	and.w	r3, r3, #15
 8002c6a:	4a17      	ldr	r2, [pc, #92]	@ (8002cc8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002c6c:	5cd3      	ldrb	r3, [r2, r3]
 8002c6e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d010      	beq.n	8002c9c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002c7a:	4b11      	ldr	r3, [pc, #68]	@ (8002cc0 <HAL_RCC_GetSysClockFreq+0x94>)
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	0c5b      	lsrs	r3, r3, #17
 8002c80:	f003 0301 	and.w	r3, r3, #1
 8002c84:	4a11      	ldr	r2, [pc, #68]	@ (8002ccc <HAL_RCC_GetSysClockFreq+0xa0>)
 8002c86:	5cd3      	ldrb	r3, [r2, r3]
 8002c88:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	4a0d      	ldr	r2, [pc, #52]	@ (8002cc4 <HAL_RCC_GetSysClockFreq+0x98>)
 8002c8e:	fb03 f202 	mul.w	r2, r3, r2
 8002c92:	68bb      	ldr	r3, [r7, #8]
 8002c94:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c98:	617b      	str	r3, [r7, #20]
 8002c9a:	e004      	b.n	8002ca6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	4a0c      	ldr	r2, [pc, #48]	@ (8002cd0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002ca0:	fb02 f303 	mul.w	r3, r2, r3
 8002ca4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002ca6:	697b      	ldr	r3, [r7, #20]
 8002ca8:	613b      	str	r3, [r7, #16]
      break;
 8002caa:	e002      	b.n	8002cb2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002cac:	4b05      	ldr	r3, [pc, #20]	@ (8002cc4 <HAL_RCC_GetSysClockFreq+0x98>)
 8002cae:	613b      	str	r3, [r7, #16]
      break;
 8002cb0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002cb2:	693b      	ldr	r3, [r7, #16]
}
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	371c      	adds	r7, #28
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bc80      	pop	{r7}
 8002cbc:	4770      	bx	lr
 8002cbe:	bf00      	nop
 8002cc0:	40021000 	.word	0x40021000
 8002cc4:	007a1200 	.word	0x007a1200
 8002cc8:	08009e98 	.word	0x08009e98
 8002ccc:	08009ea8 	.word	0x08009ea8
 8002cd0:	003d0900 	.word	0x003d0900

08002cd4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002cd8:	4b02      	ldr	r3, [pc, #8]	@ (8002ce4 <HAL_RCC_GetHCLKFreq+0x10>)
 8002cda:	681b      	ldr	r3, [r3, #0]
}
 8002cdc:	4618      	mov	r0, r3
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bc80      	pop	{r7}
 8002ce2:	4770      	bx	lr
 8002ce4:	20000400 	.word	0x20000400

08002ce8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002cec:	f7ff fff2 	bl	8002cd4 <HAL_RCC_GetHCLKFreq>
 8002cf0:	4602      	mov	r2, r0
 8002cf2:	4b05      	ldr	r3, [pc, #20]	@ (8002d08 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	0a1b      	lsrs	r3, r3, #8
 8002cf8:	f003 0307 	and.w	r3, r3, #7
 8002cfc:	4903      	ldr	r1, [pc, #12]	@ (8002d0c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002cfe:	5ccb      	ldrb	r3, [r1, r3]
 8002d00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d04:	4618      	mov	r0, r3
 8002d06:	bd80      	pop	{r7, pc}
 8002d08:	40021000 	.word	0x40021000
 8002d0c:	08009e90 	.word	0x08009e90

08002d10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002d14:	f7ff ffde 	bl	8002cd4 <HAL_RCC_GetHCLKFreq>
 8002d18:	4602      	mov	r2, r0
 8002d1a:	4b05      	ldr	r3, [pc, #20]	@ (8002d30 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	0adb      	lsrs	r3, r3, #11
 8002d20:	f003 0307 	and.w	r3, r3, #7
 8002d24:	4903      	ldr	r1, [pc, #12]	@ (8002d34 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d26:	5ccb      	ldrb	r3, [r1, r3]
 8002d28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	bd80      	pop	{r7, pc}
 8002d30:	40021000 	.word	0x40021000
 8002d34:	08009e90 	.word	0x08009e90

08002d38 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	b083      	sub	sp, #12
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
 8002d40:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	220f      	movs	r2, #15
 8002d46:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002d48:	4b11      	ldr	r3, [pc, #68]	@ (8002d90 <HAL_RCC_GetClockConfig+0x58>)
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	f003 0203 	and.w	r2, r3, #3
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002d54:	4b0e      	ldr	r3, [pc, #56]	@ (8002d90 <HAL_RCC_GetClockConfig+0x58>)
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002d60:	4b0b      	ldr	r3, [pc, #44]	@ (8002d90 <HAL_RCC_GetClockConfig+0x58>)
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002d6c:	4b08      	ldr	r3, [pc, #32]	@ (8002d90 <HAL_RCC_GetClockConfig+0x58>)
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	08db      	lsrs	r3, r3, #3
 8002d72:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002d7a:	4b06      	ldr	r3, [pc, #24]	@ (8002d94 <HAL_RCC_GetClockConfig+0x5c>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f003 0207 	and.w	r2, r3, #7
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8002d86:	bf00      	nop
 8002d88:	370c      	adds	r7, #12
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bc80      	pop	{r7}
 8002d8e:	4770      	bx	lr
 8002d90:	40021000 	.word	0x40021000
 8002d94:	40022000 	.word	0x40022000

08002d98 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b085      	sub	sp, #20
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002da0:	4b0a      	ldr	r3, [pc, #40]	@ (8002dcc <RCC_Delay+0x34>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a0a      	ldr	r2, [pc, #40]	@ (8002dd0 <RCC_Delay+0x38>)
 8002da6:	fba2 2303 	umull	r2, r3, r2, r3
 8002daa:	0a5b      	lsrs	r3, r3, #9
 8002dac:	687a      	ldr	r2, [r7, #4]
 8002dae:	fb02 f303 	mul.w	r3, r2, r3
 8002db2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002db4:	bf00      	nop
  }
  while (Delay --);
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	1e5a      	subs	r2, r3, #1
 8002dba:	60fa      	str	r2, [r7, #12]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d1f9      	bne.n	8002db4 <RCC_Delay+0x1c>
}
 8002dc0:	bf00      	nop
 8002dc2:	bf00      	nop
 8002dc4:	3714      	adds	r7, #20
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bc80      	pop	{r7}
 8002dca:	4770      	bx	lr
 8002dcc:	20000400 	.word	0x20000400
 8002dd0:	10624dd3 	.word	0x10624dd3

08002dd4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b082      	sub	sp, #8
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d101      	bne.n	8002de6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	e041      	b.n	8002e6a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002dec:	b2db      	uxtb	r3, r3
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d106      	bne.n	8002e00 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2200      	movs	r2, #0
 8002df6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002dfa:	6878      	ldr	r0, [r7, #4]
 8002dfc:	f000 f839 	bl	8002e72 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2202      	movs	r2, #2
 8002e04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681a      	ldr	r2, [r3, #0]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	3304      	adds	r3, #4
 8002e10:	4619      	mov	r1, r3
 8002e12:	4610      	mov	r0, r2
 8002e14:	f000 f99c 	bl	8003150 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2201      	movs	r2, #1
 8002e24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2201      	movs	r2, #1
 8002e34:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2201      	movs	r2, #1
 8002e44:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2201      	movs	r2, #1
 8002e54:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2201      	movs	r2, #1
 8002e64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002e68:	2300      	movs	r3, #0
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	3708      	adds	r7, #8
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}

08002e72 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002e72:	b480      	push	{r7}
 8002e74:	b083      	sub	sp, #12
 8002e76:	af00      	add	r7, sp, #0
 8002e78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002e7a:	bf00      	nop
 8002e7c:	370c      	adds	r7, #12
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bc80      	pop	{r7}
 8002e82:	4770      	bx	lr

08002e84 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b085      	sub	sp, #20
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e92:	b2db      	uxtb	r3, r3
 8002e94:	2b01      	cmp	r3, #1
 8002e96:	d001      	beq.n	8002e9c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	e03a      	b.n	8002f12 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2202      	movs	r2, #2
 8002ea0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	68da      	ldr	r2, [r3, #12]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f042 0201 	orr.w	r2, r2, #1
 8002eb2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a18      	ldr	r2, [pc, #96]	@ (8002f1c <HAL_TIM_Base_Start_IT+0x98>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d00e      	beq.n	8002edc <HAL_TIM_Base_Start_IT+0x58>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ec6:	d009      	beq.n	8002edc <HAL_TIM_Base_Start_IT+0x58>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a14      	ldr	r2, [pc, #80]	@ (8002f20 <HAL_TIM_Base_Start_IT+0x9c>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d004      	beq.n	8002edc <HAL_TIM_Base_Start_IT+0x58>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a13      	ldr	r2, [pc, #76]	@ (8002f24 <HAL_TIM_Base_Start_IT+0xa0>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d111      	bne.n	8002f00 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	689b      	ldr	r3, [r3, #8]
 8002ee2:	f003 0307 	and.w	r3, r3, #7
 8002ee6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	2b06      	cmp	r3, #6
 8002eec:	d010      	beq.n	8002f10 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	681a      	ldr	r2, [r3, #0]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f042 0201 	orr.w	r2, r2, #1
 8002efc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002efe:	e007      	b.n	8002f10 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	681a      	ldr	r2, [r3, #0]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f042 0201 	orr.w	r2, r2, #1
 8002f0e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002f10:	2300      	movs	r3, #0
}
 8002f12:	4618      	mov	r0, r3
 8002f14:	3714      	adds	r7, #20
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bc80      	pop	{r7}
 8002f1a:	4770      	bx	lr
 8002f1c:	40012c00 	.word	0x40012c00
 8002f20:	40000400 	.word	0x40000400
 8002f24:	40000800 	.word	0x40000800

08002f28 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b084      	sub	sp, #16
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	68db      	ldr	r3, [r3, #12]
 8002f36:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	691b      	ldr	r3, [r3, #16]
 8002f3e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	f003 0302 	and.w	r3, r3, #2
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d020      	beq.n	8002f8c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	f003 0302 	and.w	r3, r3, #2
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d01b      	beq.n	8002f8c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f06f 0202 	mvn.w	r2, #2
 8002f5c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2201      	movs	r2, #1
 8002f62:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	699b      	ldr	r3, [r3, #24]
 8002f6a:	f003 0303 	and.w	r3, r3, #3
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d003      	beq.n	8002f7a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002f72:	6878      	ldr	r0, [r7, #4]
 8002f74:	f000 f8d1 	bl	800311a <HAL_TIM_IC_CaptureCallback>
 8002f78:	e005      	b.n	8002f86 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f7a:	6878      	ldr	r0, [r7, #4]
 8002f7c:	f000 f8c4 	bl	8003108 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f80:	6878      	ldr	r0, [r7, #4]
 8002f82:	f000 f8d3 	bl	800312c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002f8c:	68bb      	ldr	r3, [r7, #8]
 8002f8e:	f003 0304 	and.w	r3, r3, #4
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d020      	beq.n	8002fd8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	f003 0304 	and.w	r3, r3, #4
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d01b      	beq.n	8002fd8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f06f 0204 	mvn.w	r2, #4
 8002fa8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2202      	movs	r2, #2
 8002fae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	699b      	ldr	r3, [r3, #24]
 8002fb6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d003      	beq.n	8002fc6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fbe:	6878      	ldr	r0, [r7, #4]
 8002fc0:	f000 f8ab 	bl	800311a <HAL_TIM_IC_CaptureCallback>
 8002fc4:	e005      	b.n	8002fd2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fc6:	6878      	ldr	r0, [r7, #4]
 8002fc8:	f000 f89e 	bl	8003108 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fcc:	6878      	ldr	r0, [r7, #4]
 8002fce:	f000 f8ad 	bl	800312c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	f003 0308 	and.w	r3, r3, #8
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d020      	beq.n	8003024 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	f003 0308 	and.w	r3, r3, #8
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d01b      	beq.n	8003024 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f06f 0208 	mvn.w	r2, #8
 8002ff4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2204      	movs	r2, #4
 8002ffa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	69db      	ldr	r3, [r3, #28]
 8003002:	f003 0303 	and.w	r3, r3, #3
 8003006:	2b00      	cmp	r3, #0
 8003008:	d003      	beq.n	8003012 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800300a:	6878      	ldr	r0, [r7, #4]
 800300c:	f000 f885 	bl	800311a <HAL_TIM_IC_CaptureCallback>
 8003010:	e005      	b.n	800301e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003012:	6878      	ldr	r0, [r7, #4]
 8003014:	f000 f878 	bl	8003108 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003018:	6878      	ldr	r0, [r7, #4]
 800301a:	f000 f887 	bl	800312c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2200      	movs	r2, #0
 8003022:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	f003 0310 	and.w	r3, r3, #16
 800302a:	2b00      	cmp	r3, #0
 800302c:	d020      	beq.n	8003070 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	f003 0310 	and.w	r3, r3, #16
 8003034:	2b00      	cmp	r3, #0
 8003036:	d01b      	beq.n	8003070 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f06f 0210 	mvn.w	r2, #16
 8003040:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2208      	movs	r2, #8
 8003046:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	69db      	ldr	r3, [r3, #28]
 800304e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003052:	2b00      	cmp	r3, #0
 8003054:	d003      	beq.n	800305e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003056:	6878      	ldr	r0, [r7, #4]
 8003058:	f000 f85f 	bl	800311a <HAL_TIM_IC_CaptureCallback>
 800305c:	e005      	b.n	800306a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800305e:	6878      	ldr	r0, [r7, #4]
 8003060:	f000 f852 	bl	8003108 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003064:	6878      	ldr	r0, [r7, #4]
 8003066:	f000 f861 	bl	800312c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2200      	movs	r2, #0
 800306e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003070:	68bb      	ldr	r3, [r7, #8]
 8003072:	f003 0301 	and.w	r3, r3, #1
 8003076:	2b00      	cmp	r3, #0
 8003078:	d00c      	beq.n	8003094 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	f003 0301 	and.w	r3, r3, #1
 8003080:	2b00      	cmp	r3, #0
 8003082:	d007      	beq.n	8003094 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f06f 0201 	mvn.w	r2, #1
 800308c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800308e:	6878      	ldr	r0, [r7, #4]
 8003090:	f7fd ff90 	bl	8000fb4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800309a:	2b00      	cmp	r3, #0
 800309c:	d00c      	beq.n	80030b8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d007      	beq.n	80030b8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80030b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80030b2:	6878      	ldr	r0, [r7, #4]
 80030b4:	f000 f8c3 	bl	800323e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d00c      	beq.n	80030dc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d007      	beq.n	80030dc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80030d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80030d6:	6878      	ldr	r0, [r7, #4]
 80030d8:	f000 f831 	bl	800313e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80030dc:	68bb      	ldr	r3, [r7, #8]
 80030de:	f003 0320 	and.w	r3, r3, #32
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d00c      	beq.n	8003100 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	f003 0320 	and.w	r3, r3, #32
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d007      	beq.n	8003100 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f06f 0220 	mvn.w	r2, #32
 80030f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80030fa:	6878      	ldr	r0, [r7, #4]
 80030fc:	f000 f896 	bl	800322c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003100:	bf00      	nop
 8003102:	3710      	adds	r7, #16
 8003104:	46bd      	mov	sp, r7
 8003106:	bd80      	pop	{r7, pc}

08003108 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003108:	b480      	push	{r7}
 800310a:	b083      	sub	sp, #12
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003110:	bf00      	nop
 8003112:	370c      	adds	r7, #12
 8003114:	46bd      	mov	sp, r7
 8003116:	bc80      	pop	{r7}
 8003118:	4770      	bx	lr

0800311a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800311a:	b480      	push	{r7}
 800311c:	b083      	sub	sp, #12
 800311e:	af00      	add	r7, sp, #0
 8003120:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003122:	bf00      	nop
 8003124:	370c      	adds	r7, #12
 8003126:	46bd      	mov	sp, r7
 8003128:	bc80      	pop	{r7}
 800312a:	4770      	bx	lr

0800312c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800312c:	b480      	push	{r7}
 800312e:	b083      	sub	sp, #12
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003134:	bf00      	nop
 8003136:	370c      	adds	r7, #12
 8003138:	46bd      	mov	sp, r7
 800313a:	bc80      	pop	{r7}
 800313c:	4770      	bx	lr

0800313e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800313e:	b480      	push	{r7}
 8003140:	b083      	sub	sp, #12
 8003142:	af00      	add	r7, sp, #0
 8003144:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003146:	bf00      	nop
 8003148:	370c      	adds	r7, #12
 800314a:	46bd      	mov	sp, r7
 800314c:	bc80      	pop	{r7}
 800314e:	4770      	bx	lr

08003150 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003150:	b480      	push	{r7}
 8003152:	b085      	sub	sp, #20
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
 8003158:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	4a2f      	ldr	r2, [pc, #188]	@ (8003220 <TIM_Base_SetConfig+0xd0>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d00b      	beq.n	8003180 <TIM_Base_SetConfig+0x30>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800316e:	d007      	beq.n	8003180 <TIM_Base_SetConfig+0x30>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	4a2c      	ldr	r2, [pc, #176]	@ (8003224 <TIM_Base_SetConfig+0xd4>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d003      	beq.n	8003180 <TIM_Base_SetConfig+0x30>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	4a2b      	ldr	r2, [pc, #172]	@ (8003228 <TIM_Base_SetConfig+0xd8>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d108      	bne.n	8003192 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003186:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	68fa      	ldr	r2, [r7, #12]
 800318e:	4313      	orrs	r3, r2
 8003190:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	4a22      	ldr	r2, [pc, #136]	@ (8003220 <TIM_Base_SetConfig+0xd0>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d00b      	beq.n	80031b2 <TIM_Base_SetConfig+0x62>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80031a0:	d007      	beq.n	80031b2 <TIM_Base_SetConfig+0x62>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	4a1f      	ldr	r2, [pc, #124]	@ (8003224 <TIM_Base_SetConfig+0xd4>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d003      	beq.n	80031b2 <TIM_Base_SetConfig+0x62>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	4a1e      	ldr	r2, [pc, #120]	@ (8003228 <TIM_Base_SetConfig+0xd8>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d108      	bne.n	80031c4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80031b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	68db      	ldr	r3, [r3, #12]
 80031be:	68fa      	ldr	r2, [r7, #12]
 80031c0:	4313      	orrs	r3, r2
 80031c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	695b      	ldr	r3, [r3, #20]
 80031ce:	4313      	orrs	r3, r2
 80031d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	68fa      	ldr	r2, [r7, #12]
 80031d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	689a      	ldr	r2, [r3, #8]
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	681a      	ldr	r2, [r3, #0]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	4a0d      	ldr	r2, [pc, #52]	@ (8003220 <TIM_Base_SetConfig+0xd0>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d103      	bne.n	80031f8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	691a      	ldr	r2, [r3, #16]
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2201      	movs	r2, #1
 80031fc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	691b      	ldr	r3, [r3, #16]
 8003202:	f003 0301 	and.w	r3, r3, #1
 8003206:	2b00      	cmp	r3, #0
 8003208:	d005      	beq.n	8003216 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	691b      	ldr	r3, [r3, #16]
 800320e:	f023 0201 	bic.w	r2, r3, #1
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	611a      	str	r2, [r3, #16]
  }
}
 8003216:	bf00      	nop
 8003218:	3714      	adds	r7, #20
 800321a:	46bd      	mov	sp, r7
 800321c:	bc80      	pop	{r7}
 800321e:	4770      	bx	lr
 8003220:	40012c00 	.word	0x40012c00
 8003224:	40000400 	.word	0x40000400
 8003228:	40000800 	.word	0x40000800

0800322c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800322c:	b480      	push	{r7}
 800322e:	b083      	sub	sp, #12
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003234:	bf00      	nop
 8003236:	370c      	adds	r7, #12
 8003238:	46bd      	mov	sp, r7
 800323a:	bc80      	pop	{r7}
 800323c:	4770      	bx	lr

0800323e <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800323e:	b480      	push	{r7}
 8003240:	b083      	sub	sp, #12
 8003242:	af00      	add	r7, sp, #0
 8003244:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003246:	bf00      	nop
 8003248:	370c      	adds	r7, #12
 800324a:	46bd      	mov	sp, r7
 800324c:	bc80      	pop	{r7}
 800324e:	4770      	bx	lr

08003250 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b082      	sub	sp, #8
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d101      	bne.n	8003262 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800325e:	2301      	movs	r3, #1
 8003260:	e042      	b.n	80032e8 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003268:	b2db      	uxtb	r3, r3
 800326a:	2b00      	cmp	r3, #0
 800326c:	d106      	bne.n	800327c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2200      	movs	r2, #0
 8003272:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003276:	6878      	ldr	r0, [r7, #4]
 8003278:	f7fe f976 	bl	8001568 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2224      	movs	r2, #36	@ 0x24
 8003280:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	68da      	ldr	r2, [r3, #12]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003292:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003294:	6878      	ldr	r0, [r7, #4]
 8003296:	f000 f971 	bl	800357c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	691a      	ldr	r2, [r3, #16]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80032a8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	695a      	ldr	r2, [r3, #20]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80032b8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	68da      	ldr	r2, [r3, #12]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80032c8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2200      	movs	r2, #0
 80032ce:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2220      	movs	r2, #32
 80032d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2220      	movs	r2, #32
 80032dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2200      	movs	r2, #0
 80032e4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80032e6:	2300      	movs	r3, #0
}
 80032e8:	4618      	mov	r0, r3
 80032ea:	3708      	adds	r7, #8
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bd80      	pop	{r7, pc}

080032f0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b08a      	sub	sp, #40	@ 0x28
 80032f4:	af02      	add	r7, sp, #8
 80032f6:	60f8      	str	r0, [r7, #12]
 80032f8:	60b9      	str	r1, [r7, #8]
 80032fa:	603b      	str	r3, [r7, #0]
 80032fc:	4613      	mov	r3, r2
 80032fe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003300:	2300      	movs	r3, #0
 8003302:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800330a:	b2db      	uxtb	r3, r3
 800330c:	2b20      	cmp	r3, #32
 800330e:	d175      	bne.n	80033fc <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d002      	beq.n	800331c <HAL_UART_Transmit+0x2c>
 8003316:	88fb      	ldrh	r3, [r7, #6]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d101      	bne.n	8003320 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800331c:	2301      	movs	r3, #1
 800331e:	e06e      	b.n	80033fe <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	2200      	movs	r2, #0
 8003324:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	2221      	movs	r2, #33	@ 0x21
 800332a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800332e:	f7fe f9c7 	bl	80016c0 <HAL_GetTick>
 8003332:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	88fa      	ldrh	r2, [r7, #6]
 8003338:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	88fa      	ldrh	r2, [r7, #6]
 800333e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	689b      	ldr	r3, [r3, #8]
 8003344:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003348:	d108      	bne.n	800335c <HAL_UART_Transmit+0x6c>
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	691b      	ldr	r3, [r3, #16]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d104      	bne.n	800335c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003352:	2300      	movs	r3, #0
 8003354:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003356:	68bb      	ldr	r3, [r7, #8]
 8003358:	61bb      	str	r3, [r7, #24]
 800335a:	e003      	b.n	8003364 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800335c:	68bb      	ldr	r3, [r7, #8]
 800335e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003360:	2300      	movs	r3, #0
 8003362:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003364:	e02e      	b.n	80033c4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	9300      	str	r3, [sp, #0]
 800336a:	697b      	ldr	r3, [r7, #20]
 800336c:	2200      	movs	r2, #0
 800336e:	2180      	movs	r1, #128	@ 0x80
 8003370:	68f8      	ldr	r0, [r7, #12]
 8003372:	f000 f848 	bl	8003406 <UART_WaitOnFlagUntilTimeout>
 8003376:	4603      	mov	r3, r0
 8003378:	2b00      	cmp	r3, #0
 800337a:	d005      	beq.n	8003388 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	2220      	movs	r2, #32
 8003380:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003384:	2303      	movs	r3, #3
 8003386:	e03a      	b.n	80033fe <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003388:	69fb      	ldr	r3, [r7, #28]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d10b      	bne.n	80033a6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800338e:	69bb      	ldr	r3, [r7, #24]
 8003390:	881b      	ldrh	r3, [r3, #0]
 8003392:	461a      	mov	r2, r3
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800339c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800339e:	69bb      	ldr	r3, [r7, #24]
 80033a0:	3302      	adds	r3, #2
 80033a2:	61bb      	str	r3, [r7, #24]
 80033a4:	e007      	b.n	80033b6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80033a6:	69fb      	ldr	r3, [r7, #28]
 80033a8:	781a      	ldrb	r2, [r3, #0]
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80033b0:	69fb      	ldr	r3, [r7, #28]
 80033b2:	3301      	adds	r3, #1
 80033b4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80033ba:	b29b      	uxth	r3, r3
 80033bc:	3b01      	subs	r3, #1
 80033be:	b29a      	uxth	r2, r3
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80033c8:	b29b      	uxth	r3, r3
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d1cb      	bne.n	8003366 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	9300      	str	r3, [sp, #0]
 80033d2:	697b      	ldr	r3, [r7, #20]
 80033d4:	2200      	movs	r2, #0
 80033d6:	2140      	movs	r1, #64	@ 0x40
 80033d8:	68f8      	ldr	r0, [r7, #12]
 80033da:	f000 f814 	bl	8003406 <UART_WaitOnFlagUntilTimeout>
 80033de:	4603      	mov	r3, r0
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d005      	beq.n	80033f0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	2220      	movs	r2, #32
 80033e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80033ec:	2303      	movs	r3, #3
 80033ee:	e006      	b.n	80033fe <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	2220      	movs	r2, #32
 80033f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80033f8:	2300      	movs	r3, #0
 80033fa:	e000      	b.n	80033fe <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80033fc:	2302      	movs	r3, #2
  }
}
 80033fe:	4618      	mov	r0, r3
 8003400:	3720      	adds	r7, #32
 8003402:	46bd      	mov	sp, r7
 8003404:	bd80      	pop	{r7, pc}

08003406 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003406:	b580      	push	{r7, lr}
 8003408:	b086      	sub	sp, #24
 800340a:	af00      	add	r7, sp, #0
 800340c:	60f8      	str	r0, [r7, #12]
 800340e:	60b9      	str	r1, [r7, #8]
 8003410:	603b      	str	r3, [r7, #0]
 8003412:	4613      	mov	r3, r2
 8003414:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003416:	e03b      	b.n	8003490 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003418:	6a3b      	ldr	r3, [r7, #32]
 800341a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800341e:	d037      	beq.n	8003490 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003420:	f7fe f94e 	bl	80016c0 <HAL_GetTick>
 8003424:	4602      	mov	r2, r0
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	1ad3      	subs	r3, r2, r3
 800342a:	6a3a      	ldr	r2, [r7, #32]
 800342c:	429a      	cmp	r2, r3
 800342e:	d302      	bcc.n	8003436 <UART_WaitOnFlagUntilTimeout+0x30>
 8003430:	6a3b      	ldr	r3, [r7, #32]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d101      	bne.n	800343a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003436:	2303      	movs	r3, #3
 8003438:	e03a      	b.n	80034b0 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	68db      	ldr	r3, [r3, #12]
 8003440:	f003 0304 	and.w	r3, r3, #4
 8003444:	2b00      	cmp	r3, #0
 8003446:	d023      	beq.n	8003490 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003448:	68bb      	ldr	r3, [r7, #8]
 800344a:	2b80      	cmp	r3, #128	@ 0x80
 800344c:	d020      	beq.n	8003490 <UART_WaitOnFlagUntilTimeout+0x8a>
 800344e:	68bb      	ldr	r3, [r7, #8]
 8003450:	2b40      	cmp	r3, #64	@ 0x40
 8003452:	d01d      	beq.n	8003490 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f003 0308 	and.w	r3, r3, #8
 800345e:	2b08      	cmp	r3, #8
 8003460:	d116      	bne.n	8003490 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003462:	2300      	movs	r3, #0
 8003464:	617b      	str	r3, [r7, #20]
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	617b      	str	r3, [r7, #20]
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	617b      	str	r3, [r7, #20]
 8003476:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003478:	68f8      	ldr	r0, [r7, #12]
 800347a:	f000 f81d 	bl	80034b8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	2208      	movs	r2, #8
 8003482:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	2200      	movs	r2, #0
 8003488:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800348c:	2301      	movs	r3, #1
 800348e:	e00f      	b.n	80034b0 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	681a      	ldr	r2, [r3, #0]
 8003496:	68bb      	ldr	r3, [r7, #8]
 8003498:	4013      	ands	r3, r2
 800349a:	68ba      	ldr	r2, [r7, #8]
 800349c:	429a      	cmp	r2, r3
 800349e:	bf0c      	ite	eq
 80034a0:	2301      	moveq	r3, #1
 80034a2:	2300      	movne	r3, #0
 80034a4:	b2db      	uxtb	r3, r3
 80034a6:	461a      	mov	r2, r3
 80034a8:	79fb      	ldrb	r3, [r7, #7]
 80034aa:	429a      	cmp	r2, r3
 80034ac:	d0b4      	beq.n	8003418 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80034ae:	2300      	movs	r3, #0
}
 80034b0:	4618      	mov	r0, r3
 80034b2:	3718      	adds	r7, #24
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bd80      	pop	{r7, pc}

080034b8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80034b8:	b480      	push	{r7}
 80034ba:	b095      	sub	sp, #84	@ 0x54
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	330c      	adds	r3, #12
 80034c6:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034ca:	e853 3f00 	ldrex	r3, [r3]
 80034ce:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80034d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034d2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80034d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	330c      	adds	r3, #12
 80034de:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80034e0:	643a      	str	r2, [r7, #64]	@ 0x40
 80034e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034e4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80034e6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80034e8:	e841 2300 	strex	r3, r2, [r1]
 80034ec:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80034ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d1e5      	bne.n	80034c0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	3314      	adds	r3, #20
 80034fa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034fc:	6a3b      	ldr	r3, [r7, #32]
 80034fe:	e853 3f00 	ldrex	r3, [r3]
 8003502:	61fb      	str	r3, [r7, #28]
   return(result);
 8003504:	69fb      	ldr	r3, [r7, #28]
 8003506:	f023 0301 	bic.w	r3, r3, #1
 800350a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	3314      	adds	r3, #20
 8003512:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003514:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003516:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003518:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800351a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800351c:	e841 2300 	strex	r3, r2, [r1]
 8003520:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003522:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003524:	2b00      	cmp	r3, #0
 8003526:	d1e5      	bne.n	80034f4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800352c:	2b01      	cmp	r3, #1
 800352e:	d119      	bne.n	8003564 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	330c      	adds	r3, #12
 8003536:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	e853 3f00 	ldrex	r3, [r3]
 800353e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003540:	68bb      	ldr	r3, [r7, #8]
 8003542:	f023 0310 	bic.w	r3, r3, #16
 8003546:	647b      	str	r3, [r7, #68]	@ 0x44
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	330c      	adds	r3, #12
 800354e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003550:	61ba      	str	r2, [r7, #24]
 8003552:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003554:	6979      	ldr	r1, [r7, #20]
 8003556:	69ba      	ldr	r2, [r7, #24]
 8003558:	e841 2300 	strex	r3, r2, [r1]
 800355c:	613b      	str	r3, [r7, #16]
   return(result);
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d1e5      	bne.n	8003530 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2220      	movs	r2, #32
 8003568:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2200      	movs	r2, #0
 8003570:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003572:	bf00      	nop
 8003574:	3754      	adds	r7, #84	@ 0x54
 8003576:	46bd      	mov	sp, r7
 8003578:	bc80      	pop	{r7}
 800357a:	4770      	bx	lr

0800357c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b084      	sub	sp, #16
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	691b      	ldr	r3, [r3, #16]
 800358a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	68da      	ldr	r2, [r3, #12]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	430a      	orrs	r2, r1
 8003598:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	689a      	ldr	r2, [r3, #8]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	691b      	ldr	r3, [r3, #16]
 80035a2:	431a      	orrs	r2, r3
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	695b      	ldr	r3, [r3, #20]
 80035a8:	4313      	orrs	r3, r2
 80035aa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	68db      	ldr	r3, [r3, #12]
 80035b2:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80035b6:	f023 030c 	bic.w	r3, r3, #12
 80035ba:	687a      	ldr	r2, [r7, #4]
 80035bc:	6812      	ldr	r2, [r2, #0]
 80035be:	68b9      	ldr	r1, [r7, #8]
 80035c0:	430b      	orrs	r3, r1
 80035c2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	695b      	ldr	r3, [r3, #20]
 80035ca:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	699a      	ldr	r2, [r3, #24]
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	430a      	orrs	r2, r1
 80035d8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4a2c      	ldr	r2, [pc, #176]	@ (8003690 <UART_SetConfig+0x114>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d103      	bne.n	80035ec <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80035e4:	f7ff fb94 	bl	8002d10 <HAL_RCC_GetPCLK2Freq>
 80035e8:	60f8      	str	r0, [r7, #12]
 80035ea:	e002      	b.n	80035f2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80035ec:	f7ff fb7c 	bl	8002ce8 <HAL_RCC_GetPCLK1Freq>
 80035f0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80035f2:	68fa      	ldr	r2, [r7, #12]
 80035f4:	4613      	mov	r3, r2
 80035f6:	009b      	lsls	r3, r3, #2
 80035f8:	4413      	add	r3, r2
 80035fa:	009a      	lsls	r2, r3, #2
 80035fc:	441a      	add	r2, r3
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	009b      	lsls	r3, r3, #2
 8003604:	fbb2 f3f3 	udiv	r3, r2, r3
 8003608:	4a22      	ldr	r2, [pc, #136]	@ (8003694 <UART_SetConfig+0x118>)
 800360a:	fba2 2303 	umull	r2, r3, r2, r3
 800360e:	095b      	lsrs	r3, r3, #5
 8003610:	0119      	lsls	r1, r3, #4
 8003612:	68fa      	ldr	r2, [r7, #12]
 8003614:	4613      	mov	r3, r2
 8003616:	009b      	lsls	r3, r3, #2
 8003618:	4413      	add	r3, r2
 800361a:	009a      	lsls	r2, r3, #2
 800361c:	441a      	add	r2, r3
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	009b      	lsls	r3, r3, #2
 8003624:	fbb2 f2f3 	udiv	r2, r2, r3
 8003628:	4b1a      	ldr	r3, [pc, #104]	@ (8003694 <UART_SetConfig+0x118>)
 800362a:	fba3 0302 	umull	r0, r3, r3, r2
 800362e:	095b      	lsrs	r3, r3, #5
 8003630:	2064      	movs	r0, #100	@ 0x64
 8003632:	fb00 f303 	mul.w	r3, r0, r3
 8003636:	1ad3      	subs	r3, r2, r3
 8003638:	011b      	lsls	r3, r3, #4
 800363a:	3332      	adds	r3, #50	@ 0x32
 800363c:	4a15      	ldr	r2, [pc, #84]	@ (8003694 <UART_SetConfig+0x118>)
 800363e:	fba2 2303 	umull	r2, r3, r2, r3
 8003642:	095b      	lsrs	r3, r3, #5
 8003644:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003648:	4419      	add	r1, r3
 800364a:	68fa      	ldr	r2, [r7, #12]
 800364c:	4613      	mov	r3, r2
 800364e:	009b      	lsls	r3, r3, #2
 8003650:	4413      	add	r3, r2
 8003652:	009a      	lsls	r2, r3, #2
 8003654:	441a      	add	r2, r3
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	009b      	lsls	r3, r3, #2
 800365c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003660:	4b0c      	ldr	r3, [pc, #48]	@ (8003694 <UART_SetConfig+0x118>)
 8003662:	fba3 0302 	umull	r0, r3, r3, r2
 8003666:	095b      	lsrs	r3, r3, #5
 8003668:	2064      	movs	r0, #100	@ 0x64
 800366a:	fb00 f303 	mul.w	r3, r0, r3
 800366e:	1ad3      	subs	r3, r2, r3
 8003670:	011b      	lsls	r3, r3, #4
 8003672:	3332      	adds	r3, #50	@ 0x32
 8003674:	4a07      	ldr	r2, [pc, #28]	@ (8003694 <UART_SetConfig+0x118>)
 8003676:	fba2 2303 	umull	r2, r3, r2, r3
 800367a:	095b      	lsrs	r3, r3, #5
 800367c:	f003 020f 	and.w	r2, r3, #15
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	440a      	add	r2, r1
 8003686:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003688:	bf00      	nop
 800368a:	3710      	adds	r7, #16
 800368c:	46bd      	mov	sp, r7
 800368e:	bd80      	pop	{r7, pc}
 8003690:	40013800 	.word	0x40013800
 8003694:	51eb851f 	.word	0x51eb851f

08003698 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8003698:	b480      	push	{r7}
 800369a:	b085      	sub	sp, #20
 800369c:	af00      	add	r7, sp, #0
 800369e:	60f8      	str	r0, [r7, #12]
 80036a0:	60b9      	str	r1, [r7, #8]
 80036a2:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */
    pxTopOfStack--;                                                      /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	3b04      	subs	r3, #4
 80036a8:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80036b0:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	3b04      	subs	r3, #4
 80036b6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80036b8:	68bb      	ldr	r3, [r7, #8]
 80036ba:	f023 0201 	bic.w	r2, r3, #1
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	3b04      	subs	r3, #4
 80036c6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80036c8:	4a08      	ldr	r2, [pc, #32]	@ (80036ec <pxPortInitialiseStack+0x54>)
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 5;                                                   /* R12, R3, R2 and R1. */
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	3b14      	subs	r3, #20
 80036d2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters;                        /* R0 */
 80036d4:	687a      	ldr	r2, [r7, #4]
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 8;                                                   /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	3b20      	subs	r3, #32
 80036de:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80036e0:	68fb      	ldr	r3, [r7, #12]
}
 80036e2:	4618      	mov	r0, r3
 80036e4:	3714      	adds	r7, #20
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bc80      	pop	{r7}
 80036ea:	4770      	bx	lr
 80036ec:	080036f1 	.word	0x080036f1

080036f0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80036f0:	b480      	push	{r7}
 80036f2:	b083      	sub	sp, #12
 80036f4:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0UL;
 80036f6:	2300      	movs	r3, #0
 80036f8:	603b      	str	r3, [r7, #0]

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
    uint32_t ulNewBASEPRI;

    __asm volatile
 80036fa:	f04f 03bf 	mov.w	r3, #191	@ 0xbf
 80036fe:	f383 8811 	msr	BASEPRI, r3
 8003702:	f3bf 8f6f 	isb	sy
 8003706:	f3bf 8f4f 	dsb	sy
 800370a:	607b      	str	r3, [r7, #4]
        "   msr basepri, %0                                         \n" \
        "   isb                                                     \n" \
        "   dsb                                                     \n" \
        : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );
}
 800370c:	bf00      	nop
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800370e:	bf00      	nop
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d0fc      	beq.n	8003710 <prvTaskExitError+0x20>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8003716:	bf00      	nop
 8003718:	bf00      	nop
 800371a:	370c      	adds	r7, #12
 800371c:	46bd      	mov	sp, r7
 800371e:	bc80      	pop	{r7}
 8003720:	4770      	bx	lr
	...

08003730 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8003730:	4b07      	ldr	r3, [pc, #28]	@ (8003750 <pxCurrentTCBConst2>)
 8003732:	6819      	ldr	r1, [r3, #0]
 8003734:	6808      	ldr	r0, [r1, #0]
 8003736:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800373a:	f380 8809 	msr	PSP, r0
 800373e:	f3bf 8f6f 	isb	sy
 8003742:	f04f 0000 	mov.w	r0, #0
 8003746:	f380 8811 	msr	BASEPRI, r0
 800374a:	f04e 0e0d 	orr.w	lr, lr, #13
 800374e:	4770      	bx	lr

08003750 <pxCurrentTCBConst2>:
 8003750:	20002f14 	.word	0x20002f14
        "   bx r14                          \n"
        "                                   \n"
        "   .align 4                        \n"
        "pxCurrentTCBConst2: .word pxCurrentTCB             \n"
        );
}
 8003754:	bf00      	nop
 8003756:	bf00      	nop

08003758 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
    __asm volatile (
 8003758:	4806      	ldr	r0, [pc, #24]	@ (8003774 <prvPortStartFirstTask+0x1c>)
 800375a:	6800      	ldr	r0, [r0, #0]
 800375c:	6800      	ldr	r0, [r0, #0]
 800375e:	f380 8808 	msr	MSP, r0
 8003762:	b662      	cpsie	i
 8003764:	b661      	cpsie	f
 8003766:	f3bf 8f4f 	dsb	sy
 800376a:	f3bf 8f6f 	isb	sy
 800376e:	df00      	svc	0
 8003770:	bf00      	nop
 8003772:	0000      	.short	0x0000
 8003774:	e000ed08 	.word	0xe000ed08
        " isb                   \n"
        " svc 0                 \n" /* System call to start first task. */
        " nop                   \n"
        " .ltorg                \n"
        );
}
 8003778:	bf00      	nop
 800377a:	bf00      	nop

0800377c <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b082      	sub	sp, #8
 8003780:	af00      	add	r7, sp, #0
     * configCHECK_HANDLER_INSTALLATION to 0 in their FreeRTOSConfig.h. Direct
     * routing, which is validated here when configCHECK_HANDLER_INSTALLATION
     * is 1, should be preferred when possible. */
    #if ( configCHECK_HANDLER_INSTALLATION == 1 )
    {
        const portISR_t * const pxVectorTable = portSCB_VTOR_REG;
 8003782:	4b11      	ldr	r3, [pc, #68]	@ (80037c8 <xPortStartScheduler+0x4c>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	607b      	str	r3, [r7, #4]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts, and make SVCall
     * the highest priority. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8003788:	4b10      	ldr	r3, [pc, #64]	@ (80037cc <xPortStartScheduler+0x50>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a0f      	ldr	r2, [pc, #60]	@ (80037cc <xPortStartScheduler+0x50>)
 800378e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003792:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8003794:	4b0d      	ldr	r3, [pc, #52]	@ (80037cc <xPortStartScheduler+0x50>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4a0c      	ldr	r2, [pc, #48]	@ (80037cc <xPortStartScheduler+0x50>)
 800379a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800379e:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR2_REG = 0;
 80037a0:	4b0b      	ldr	r3, [pc, #44]	@ (80037d0 <xPortStartScheduler+0x54>)
 80037a2:	2200      	movs	r2, #0
 80037a4:	601a      	str	r2, [r3, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80037a6:	f000 f891 	bl	80038cc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80037aa:	4b0a      	ldr	r3, [pc, #40]	@ (80037d4 <xPortStartScheduler+0x58>)
 80037ac:	2200      	movs	r2, #0
 80037ae:	601a      	str	r2, [r3, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80037b0:	f7ff ffd2 	bl	8003758 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80037b4:	f001 facc 	bl	8004d50 <vTaskSwitchContext>
    prvTaskExitError();
 80037b8:	f7ff ff9a 	bl	80036f0 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80037bc:	2300      	movs	r3, #0
}
 80037be:	4618      	mov	r0, r3
 80037c0:	3708      	adds	r7, #8
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bd80      	pop	{r7, pc}
 80037c6:	bf00      	nop
 80037c8:	e000ed08 	.word	0xe000ed08
 80037cc:	e000ed20 	.word	0xe000ed20
 80037d0:	e000ed1c 	.word	0xe000ed1c
 80037d4:	2000040c 	.word	0x2000040c

080037d8 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80037d8:	b480      	push	{r7}
 80037da:	b083      	sub	sp, #12
 80037dc:	af00      	add	r7, sp, #0
    __asm volatile
 80037de:	f04f 03bf 	mov.w	r3, #191	@ 0xbf
 80037e2:	f383 8811 	msr	BASEPRI, r3
 80037e6:	f3bf 8f6f 	isb	sy
 80037ea:	f3bf 8f4f 	dsb	sy
 80037ee:	607b      	str	r3, [r7, #4]
}
 80037f0:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80037f2:	4b05      	ldr	r3, [pc, #20]	@ (8003808 <vPortEnterCritical+0x30>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	3301      	adds	r3, #1
 80037f8:	4a03      	ldr	r2, [pc, #12]	@ (8003808 <vPortEnterCritical+0x30>)
 80037fa:	6013      	str	r3, [r2, #0]
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
    }
}
 80037fc:	bf00      	nop
 80037fe:	370c      	adds	r7, #12
 8003800:	46bd      	mov	sp, r7
 8003802:	bc80      	pop	{r7}
 8003804:	4770      	bx	lr
 8003806:	bf00      	nop
 8003808:	2000040c 	.word	0x2000040c

0800380c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800380c:	b480      	push	{r7}
 800380e:	b083      	sub	sp, #12
 8003810:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
    uxCriticalNesting--;
 8003812:	4b0a      	ldr	r3, [pc, #40]	@ (800383c <vPortExitCritical+0x30>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	3b01      	subs	r3, #1
 8003818:	4a08      	ldr	r2, [pc, #32]	@ (800383c <vPortExitCritical+0x30>)
 800381a:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 800381c:	4b07      	ldr	r3, [pc, #28]	@ (800383c <vPortExitCritical+0x30>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d105      	bne.n	8003830 <vPortExitCritical+0x24>
 8003824:	2300      	movs	r3, #0
 8003826:	607b      	str	r3, [r7, #4]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
    __asm volatile
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	f383 8811 	msr	BASEPRI, r3
    (
        "   msr basepri, %0 " ::"r" ( ulNewMaskValue ) : "memory"
    );
}
 800382e:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8003830:	bf00      	nop
 8003832:	370c      	adds	r7, #12
 8003834:	46bd      	mov	sp, r7
 8003836:	bc80      	pop	{r7}
 8003838:	4770      	bx	lr
 800383a:	bf00      	nop
 800383c:	2000040c 	.word	0x2000040c

08003840 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8003840:	f3ef 8009 	mrs	r0, PSP
 8003844:	f3bf 8f6f 	isb	sy
 8003848:	4b0d      	ldr	r3, [pc, #52]	@ (8003880 <pxCurrentTCBConst>)
 800384a:	681a      	ldr	r2, [r3, #0]
 800384c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003850:	6010      	str	r0, [r2, #0]
 8003852:	e92d 4008 	stmdb	sp!, {r3, lr}
 8003856:	f04f 00bf 	mov.w	r0, #191	@ 0xbf
 800385a:	f380 8811 	msr	BASEPRI, r0
 800385e:	f001 fa77 	bl	8004d50 <vTaskSwitchContext>
 8003862:	f04f 0000 	mov.w	r0, #0
 8003866:	f380 8811 	msr	BASEPRI, r0
 800386a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800386e:	6819      	ldr	r1, [r3, #0]
 8003870:	6808      	ldr	r0, [r1, #0]
 8003872:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003876:	f380 8809 	msr	PSP, r0
 800387a:	f3bf 8f6f 	isb	sy
 800387e:	4770      	bx	lr

08003880 <pxCurrentTCBConst>:
 8003880:	20002f14 	.word	0x20002f14
        "                                       \n"
        "   .align 4                            \n"
        "pxCurrentTCBConst: .word pxCurrentTCB  \n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8003884:	bf00      	nop
 8003886:	bf00      	nop

08003888 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b082      	sub	sp, #8
 800388c:	af00      	add	r7, sp, #0
    __asm volatile
 800388e:	f04f 03bf 	mov.w	r3, #191	@ 0xbf
 8003892:	f383 8811 	msr	BASEPRI, r3
 8003896:	f3bf 8f6f 	isb	sy
 800389a:	f3bf 8f4f 	dsb	sy
 800389e:	607b      	str	r3, [r7, #4]
}
 80038a0:	bf00      	nop
     * known. */
    portDISABLE_INTERRUPTS();
    traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80038a2:	f001 f94d 	bl	8004b40 <xTaskIncrementTick>
 80038a6:	4603      	mov	r3, r0
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d003      	beq.n	80038b4 <xPortSysTickHandler+0x2c>
        {
            traceISR_EXIT_TO_SCHEDULER();

            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80038ac:	4b06      	ldr	r3, [pc, #24]	@ (80038c8 <xPortSysTickHandler+0x40>)
 80038ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80038b2:	601a      	str	r2, [r3, #0]
 80038b4:	2300      	movs	r3, #0
 80038b6:	603b      	str	r3, [r7, #0]
    __asm volatile
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	f383 8811 	msr	BASEPRI, r3
}
 80038be:	bf00      	nop
        {
            traceISR_EXIT();
        }
    }
    portENABLE_INTERRUPTS();
}
 80038c0:	bf00      	nop
 80038c2:	3708      	adds	r7, #8
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bd80      	pop	{r7, pc}
 80038c8:	e000ed04 	.word	0xe000ed04

080038cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80038cc:	b480      	push	{r7}
 80038ce:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80038d0:	4b07      	ldr	r3, [pc, #28]	@ (80038f0 <vPortSetupTimerInterrupt+0x24>)
 80038d2:	2200      	movs	r2, #0
 80038d4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80038d6:	4b07      	ldr	r3, [pc, #28]	@ (80038f4 <vPortSetupTimerInterrupt+0x28>)
 80038d8:	2200      	movs	r2, #0
 80038da:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80038dc:	4b06      	ldr	r3, [pc, #24]	@ (80038f8 <vPortSetupTimerInterrupt+0x2c>)
 80038de:	4a07      	ldr	r2, [pc, #28]	@ (80038fc <vPortSetupTimerInterrupt+0x30>)
 80038e0:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80038e2:	4b03      	ldr	r3, [pc, #12]	@ (80038f0 <vPortSetupTimerInterrupt+0x24>)
 80038e4:	2207      	movs	r2, #7
 80038e6:	601a      	str	r2, [r3, #0]
}
 80038e8:	bf00      	nop
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bc80      	pop	{r7}
 80038ee:	4770      	bx	lr
 80038f0:	e000e010 	.word	0xe000e010
 80038f4:	e000e018 	.word	0xe000e018
 80038f8:	e000e014 	.word	0xe000e014
 80038fc:	0001193f 	.word	0x0001193f

08003900 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = ( size_t ) 0U;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b088      	sub	sp, #32
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8003908:	2300      	movs	r3, #0
 800390a:	617b      	str	r3, [r7, #20]
    size_t xAdditionalRequiredSize;

    if( xWantedSize > 0 )
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d022      	beq.n	8003958 <pvPortMalloc+0x58>
    {
        /* The wanted size must be increased so it can contain a BlockLink_t
         * structure in addition to the requested amount of bytes. */
        if( heapADD_WILL_OVERFLOW( xWantedSize, xHeapStructSize ) == 0 )
 8003912:	2308      	movs	r3, #8
 8003914:	43db      	mvns	r3, r3
 8003916:	687a      	ldr	r2, [r7, #4]
 8003918:	429a      	cmp	r2, r3
 800391a:	d81b      	bhi.n	8003954 <pvPortMalloc+0x54>
        {
            xWantedSize += xHeapStructSize;
 800391c:	2208      	movs	r2, #8
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	4413      	add	r3, r2
 8003922:	607b      	str	r3, [r7, #4]

            /* Ensure that blocks are always aligned to the required number
             * of bytes. */
            if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	f003 0307 	and.w	r3, r3, #7
 800392a:	2b00      	cmp	r3, #0
 800392c:	d014      	beq.n	8003958 <pvPortMalloc+0x58>
            {
                /* Byte alignment required. */
                xAdditionalRequiredSize = portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	f003 0307 	and.w	r3, r3, #7
 8003934:	f1c3 0308 	rsb	r3, r3, #8
 8003938:	613b      	str	r3, [r7, #16]

                if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 800393a:	693b      	ldr	r3, [r7, #16]
 800393c:	43db      	mvns	r3, r3
 800393e:	687a      	ldr	r2, [r7, #4]
 8003940:	429a      	cmp	r2, r3
 8003942:	d804      	bhi.n	800394e <pvPortMalloc+0x4e>
                {
                    xWantedSize += xAdditionalRequiredSize;
 8003944:	687a      	ldr	r2, [r7, #4]
 8003946:	693b      	ldr	r3, [r7, #16]
 8003948:	4413      	add	r3, r2
 800394a:	607b      	str	r3, [r7, #4]
 800394c:	e004      	b.n	8003958 <pvPortMalloc+0x58>
                }
                else
                {
                    xWantedSize = 0;
 800394e:	2300      	movs	r3, #0
 8003950:	607b      	str	r3, [r7, #4]
 8003952:	e001      	b.n	8003958 <pvPortMalloc+0x58>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            xWantedSize = 0;
 8003954:	2300      	movs	r3, #0
 8003956:	607b      	str	r3, [r7, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    vTaskSuspendAll();
 8003958:	f000 ffec 	bl	8004934 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800395c:	4b3a      	ldr	r3, [pc, #232]	@ (8003a48 <pvPortMalloc+0x148>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d101      	bne.n	8003968 <pvPortMalloc+0x68>
        {
            prvHeapInit();
 8003964:	f000 f8b8 	bl	8003ad8 <prvHeapInit>

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2b00      	cmp	r3, #0
 800396c:	db64      	blt.n	8003a38 <pvPortMalloc+0x138>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d061      	beq.n	8003a38 <pvPortMalloc+0x138>
 8003974:	4b35      	ldr	r3, [pc, #212]	@ (8003a4c <pvPortMalloc+0x14c>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	687a      	ldr	r2, [r7, #4]
 800397a:	429a      	cmp	r2, r3
 800397c:	d85c      	bhi.n	8003a38 <pvPortMalloc+0x138>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 800397e:	4b34      	ldr	r3, [pc, #208]	@ (8003a50 <pvPortMalloc+0x150>)
 8003980:	61bb      	str	r3, [r7, #24]
                pxBlock = heapPROTECT_BLOCK_POINTER( xStart.pxNextFreeBlock );
 8003982:	4b33      	ldr	r3, [pc, #204]	@ (8003a50 <pvPortMalloc+0x150>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	61fb      	str	r3, [r7, #28]
                heapVALIDATE_BLOCK_POINTER( pxBlock );

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
 8003988:	e004      	b.n	8003994 <pvPortMalloc+0x94>
                {
                    pxPreviousBlock = pxBlock;
 800398a:	69fb      	ldr	r3, [r7, #28]
 800398c:	61bb      	str	r3, [r7, #24]
                    pxBlock = heapPROTECT_BLOCK_POINTER( pxBlock->pxNextFreeBlock );
 800398e:	69fb      	ldr	r3, [r7, #28]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	61fb      	str	r3, [r7, #28]
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
 8003994:	69fb      	ldr	r3, [r7, #28]
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	687a      	ldr	r2, [r7, #4]
 800399a:	429a      	cmp	r2, r3
 800399c:	d903      	bls.n	80039a6 <pvPortMalloc+0xa6>
 800399e:	69fb      	ldr	r3, [r7, #28]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d1f1      	bne.n	800398a <pvPortMalloc+0x8a>
                    heapVALIDATE_BLOCK_POINTER( pxBlock );
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80039a6:	4b28      	ldr	r3, [pc, #160]	@ (8003a48 <pvPortMalloc+0x148>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	69fa      	ldr	r2, [r7, #28]
 80039ac:	429a      	cmp	r2, r3
 80039ae:	d043      	beq.n	8003a38 <pvPortMalloc+0x138>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxPreviousBlock->pxNextFreeBlock ) ) + xHeapStructSize );
 80039b0:	69bb      	ldr	r3, [r7, #24]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	2208      	movs	r2, #8
 80039b6:	4413      	add	r3, r2
 80039b8:	617b      	str	r3, [r7, #20]
                    heapVALIDATE_BLOCK_POINTER( pvReturn );

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80039ba:	69fb      	ldr	r3, [r7, #28]
 80039bc:	681a      	ldr	r2, [r3, #0]
 80039be:	69bb      	ldr	r3, [r7, #24]
 80039c0:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    configASSERT( heapSUBTRACT_WILL_UNDERFLOW( pxBlock->xBlockSize, xWantedSize ) == 0 );

                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80039c2:	69fb      	ldr	r3, [r7, #28]
 80039c4:	685a      	ldr	r2, [r3, #4]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	1ad2      	subs	r2, r2, r3
 80039ca:	2308      	movs	r3, #8
 80039cc:	005b      	lsls	r3, r3, #1
 80039ce:	429a      	cmp	r2, r3
 80039d0:	d913      	bls.n	80039fa <pvPortMalloc+0xfa>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80039d2:	69fa      	ldr	r2, [r7, #28]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	4413      	add	r3, r2
 80039d8:	60fb      	str	r3, [r7, #12]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80039da:	69fb      	ldr	r3, [r7, #28]
 80039dc:	685a      	ldr	r2, [r3, #4]
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	1ad2      	subs	r2, r2, r3
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80039e6:	69fb      	ldr	r3, [r7, #28]
 80039e8:	687a      	ldr	r2, [r7, #4]
 80039ea:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        pxNewBlockLink->pxNextFreeBlock = pxPreviousBlock->pxNextFreeBlock;
 80039ec:	69bb      	ldr	r3, [r7, #24]
 80039ee:	681a      	ldr	r2, [r3, #0]
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	601a      	str	r2, [r3, #0]
                        pxPreviousBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxNewBlockLink );
 80039f4:	69bb      	ldr	r3, [r7, #24]
 80039f6:	68fa      	ldr	r2, [r7, #12]
 80039f8:	601a      	str	r2, [r3, #0]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80039fa:	4b14      	ldr	r3, [pc, #80]	@ (8003a4c <pvPortMalloc+0x14c>)
 80039fc:	681a      	ldr	r2, [r3, #0]
 80039fe:	69fb      	ldr	r3, [r7, #28]
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	1ad3      	subs	r3, r2, r3
 8003a04:	4a11      	ldr	r2, [pc, #68]	@ (8003a4c <pvPortMalloc+0x14c>)
 8003a06:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003a08:	4b10      	ldr	r3, [pc, #64]	@ (8003a4c <pvPortMalloc+0x14c>)
 8003a0a:	681a      	ldr	r2, [r3, #0]
 8003a0c:	4b11      	ldr	r3, [pc, #68]	@ (8003a54 <pvPortMalloc+0x154>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	429a      	cmp	r2, r3
 8003a12:	d203      	bcs.n	8003a1c <pvPortMalloc+0x11c>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003a14:	4b0d      	ldr	r3, [pc, #52]	@ (8003a4c <pvPortMalloc+0x14c>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a0e      	ldr	r2, [pc, #56]	@ (8003a54 <pvPortMalloc+0x154>)
 8003a1a:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8003a1c:	69fb      	ldr	r3, [r7, #28]
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003a24:	69fb      	ldr	r3, [r7, #28]
 8003a26:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8003a28:	69fb      	ldr	r3, [r7, #28]
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8003a2e:	4b0a      	ldr	r3, [pc, #40]	@ (8003a58 <pvPortMalloc+0x158>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	3301      	adds	r3, #1
 8003a34:	4a08      	ldr	r2, [pc, #32]	@ (8003a58 <pvPortMalloc+0x158>)
 8003a36:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8003a38:	f000 ff8a 	bl	8004950 <xTaskResumeAll>
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
    return pvReturn;
 8003a3c:	697b      	ldr	r3, [r7, #20]
}
 8003a3e:	4618      	mov	r0, r3
 8003a40:	3720      	adds	r7, #32
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd80      	pop	{r7, pc}
 8003a46:	bf00      	nop
 8003a48:	20002f00 	.word	0x20002f00
 8003a4c:	20002f04 	.word	0x20002f04
 8003a50:	20002ef8 	.word	0x20002ef8
 8003a54:	20002f08 	.word	0x20002f08
 8003a58:	20002f0c 	.word	0x20002f0c

08003a5c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b084      	sub	sp, #16
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	60fb      	str	r3, [r7, #12]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d02b      	beq.n	8003ac6 <vPortFree+0x6a>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8003a6e:	2308      	movs	r3, #8
 8003a70:	425b      	negs	r3, r3
 8003a72:	68fa      	ldr	r2, [r7, #12]
 8003a74:	4413      	add	r3, r2
 8003a76:	60fb      	str	r3, [r7, #12]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	60bb      	str	r3, [r7, #8]

        heapVALIDATE_BLOCK_POINTER( pxLink );
        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
        configASSERT( pxLink->pxNextFreeBlock == NULL );

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8003a7c:	68bb      	ldr	r3, [r7, #8]
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	0fdb      	lsrs	r3, r3, #31
 8003a82:	f003 0301 	and.w	r3, r3, #1
 8003a86:	b2db      	uxtb	r3, r3
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d01c      	beq.n	8003ac6 <vPortFree+0x6a>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8003a8c:	68bb      	ldr	r3, [r7, #8]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d118      	bne.n	8003ac6 <vPortFree+0x6a>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8003a94:	68bb      	ldr	r3, [r7, #8]
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003a9c:	68bb      	ldr	r3, [r7, #8]
 8003a9e:	605a      	str	r2, [r3, #4]
                        ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                    }
                }
                #endif

                vTaskSuspendAll();
 8003aa0:	f000 ff48 	bl	8004934 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	685a      	ldr	r2, [r3, #4]
 8003aa8:	4b09      	ldr	r3, [pc, #36]	@ (8003ad0 <vPortFree+0x74>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4413      	add	r3, r2
 8003aae:	4a08      	ldr	r2, [pc, #32]	@ (8003ad0 <vPortFree+0x74>)
 8003ab0:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003ab2:	68b8      	ldr	r0, [r7, #8]
 8003ab4:	f000 f86a 	bl	8003b8c <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8003ab8:	4b06      	ldr	r3, [pc, #24]	@ (8003ad4 <vPortFree+0x78>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	3301      	adds	r3, #1
 8003abe:	4a05      	ldr	r2, [pc, #20]	@ (8003ad4 <vPortFree+0x78>)
 8003ac0:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8003ac2:	f000 ff45 	bl	8004950 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8003ac6:	bf00      	nop
 8003ac8:	3710      	adds	r7, #16
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}
 8003ace:	bf00      	nop
 8003ad0:	20002f04 	.word	0x20002f04
 8003ad4:	20002f10 	.word	0x20002f10

08003ad8 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8003ad8:	b480      	push	{r7}
 8003ada:	b085      	sub	sp, #20
 8003adc:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    portPOINTER_SIZE_TYPE uxStartAddress, uxEndAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003ade:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8003ae2:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxStartAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8003ae4:	4b24      	ldr	r3, [pc, #144]	@ (8003b78 <prvHeapInit+0xa0>)
 8003ae6:	60fb      	str	r3, [r7, #12]

    if( ( uxStartAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	f003 0307 	and.w	r3, r3, #7
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d00c      	beq.n	8003b0c <prvHeapInit+0x34>
    {
        uxStartAddress += ( portBYTE_ALIGNMENT - 1 );
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	3307      	adds	r3, #7
 8003af6:	60fb      	str	r3, [r7, #12]
        uxStartAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	f023 0307 	bic.w	r3, r3, #7
 8003afe:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= ( size_t ) ( uxStartAddress - ( portPOINTER_SIZE_TYPE ) ucHeap );
 8003b00:	68ba      	ldr	r2, [r7, #8]
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	1ad3      	subs	r3, r2, r3
 8003b06:	4a1c      	ldr	r2, [pc, #112]	@ (8003b78 <prvHeapInit+0xa0>)
 8003b08:	4413      	add	r3, r2
 8003b0a:	60bb      	str	r3, [r7, #8]
    }
    #endif

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) heapPROTECT_BLOCK_POINTER( uxStartAddress );
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	4a1b      	ldr	r2, [pc, #108]	@ (8003b7c <prvHeapInit+0xa4>)
 8003b10:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8003b12:	4b1a      	ldr	r3, [pc, #104]	@ (8003b7c <prvHeapInit+0xa4>)
 8003b14:	2200      	movs	r2, #0
 8003b16:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxEndAddress = uxStartAddress + ( portPOINTER_SIZE_TYPE ) xTotalHeapSize;
 8003b18:	68fa      	ldr	r2, [r7, #12]
 8003b1a:	68bb      	ldr	r3, [r7, #8]
 8003b1c:	4413      	add	r3, r2
 8003b1e:	607b      	str	r3, [r7, #4]
    uxEndAddress -= ( portPOINTER_SIZE_TYPE ) xHeapStructSize;
 8003b20:	2208      	movs	r2, #8
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	1a9b      	subs	r3, r3, r2
 8003b26:	607b      	str	r3, [r7, #4]
    uxEndAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	f023 0307 	bic.w	r3, r3, #7
 8003b2e:	607b      	str	r3, [r7, #4]
    pxEnd = ( BlockLink_t * ) uxEndAddress;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	4a13      	ldr	r2, [pc, #76]	@ (8003b80 <prvHeapInit+0xa8>)
 8003b34:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8003b36:	4b12      	ldr	r3, [pc, #72]	@ (8003b80 <prvHeapInit+0xa8>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( NULL );
 8003b3e:	4b10      	ldr	r3, [pc, #64]	@ (8003b80 <prvHeapInit+0xa8>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	2200      	movs	r2, #0
 8003b44:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) uxStartAddress;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxEndAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	687a      	ldr	r2, [r7, #4]
 8003b4e:	1ad2      	subs	r2, r2, r3
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 8003b54:	4b0a      	ldr	r3, [pc, #40]	@ (8003b80 <prvHeapInit+0xa8>)
 8003b56:	681a      	ldr	r2, [r3, #0]
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	4a08      	ldr	r2, [pc, #32]	@ (8003b84 <prvHeapInit+0xac>)
 8003b62:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	4a07      	ldr	r2, [pc, #28]	@ (8003b88 <prvHeapInit+0xb0>)
 8003b6a:	6013      	str	r3, [r2, #0]
}
 8003b6c:	bf00      	nop
 8003b6e:	3714      	adds	r7, #20
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bc80      	pop	{r7}
 8003b74:	4770      	bx	lr
 8003b76:	bf00      	nop
 8003b78:	200006f8 	.word	0x200006f8
 8003b7c:	20002ef8 	.word	0x20002ef8
 8003b80:	20002f00 	.word	0x20002f00
 8003b84:	20002f08 	.word	0x20002f08
 8003b88:	20002f04 	.word	0x20002f04

08003b8c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	b085      	sub	sp, #20
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) < pxBlockToInsert; pxIterator = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 8003b94:	4b27      	ldr	r3, [pc, #156]	@ (8003c34 <prvInsertBlockIntoFreeList+0xa8>)
 8003b96:	60fb      	str	r3, [r7, #12]
 8003b98:	e002      	b.n	8003ba0 <prvInsertBlockIntoFreeList+0x14>
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	60fb      	str	r3, [r7, #12]
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	687a      	ldr	r2, [r7, #4]
 8003ba6:	429a      	cmp	r2, r3
 8003ba8:	d8f7      	bhi.n	8003b9a <prvInsertBlockIntoFreeList+0xe>
        heapVALIDATE_BLOCK_POINTER( pxIterator );
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	68ba      	ldr	r2, [r7, #8]
 8003bb4:	4413      	add	r3, r2
 8003bb6:	687a      	ldr	r2, [r7, #4]
 8003bb8:	429a      	cmp	r2, r3
 8003bba:	d108      	bne.n	8003bce <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	685a      	ldr	r2, [r3, #4]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	441a      	add	r2, r3
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	68ba      	ldr	r2, [r7, #8]
 8003bd8:	441a      	add	r2, r3
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	429a      	cmp	r2, r3
 8003be0:	d118      	bne.n	8003c14 <prvInsertBlockIntoFreeList+0x88>
    {
        if( heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) != pxEnd )
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681a      	ldr	r2, [r3, #0]
 8003be6:	4b14      	ldr	r3, [pc, #80]	@ (8003c38 <prvInsertBlockIntoFreeList+0xac>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	429a      	cmp	r2, r3
 8003bec:	d00d      	beq.n	8003c0a <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->xBlockSize;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	685a      	ldr	r2, [r3, #4]
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	441a      	add	r2, r3
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->pxNextFreeBlock;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	681a      	ldr	r2, [r3, #0]
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	601a      	str	r2, [r3, #0]
 8003c08:	e008      	b.n	8003c1c <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 8003c0a:	4b0b      	ldr	r3, [pc, #44]	@ (8003c38 <prvInsertBlockIntoFreeList+0xac>)
 8003c0c:	681a      	ldr	r2, [r3, #0]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	601a      	str	r2, [r3, #0]
 8003c12:	e003      	b.n	8003c1c <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681a      	ldr	r2, [r3, #0]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8003c1c:	68fa      	ldr	r2, [r7, #12]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	429a      	cmp	r2, r3
 8003c22:	d002      	beq.n	8003c2a <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxBlockToInsert );
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	687a      	ldr	r2, [r7, #4]
 8003c28:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003c2a:	bf00      	nop
 8003c2c:	3714      	adds	r7, #20
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bc80      	pop	{r7}
 8003c32:	4770      	bx	lr
 8003c34:	20002ef8 	.word	0x20002ef8
 8003c38:	20002f00 	.word	0x20002f00

08003c3c <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	b083      	sub	sp, #12
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialise( pxList );

    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	f103 0208 	add.w	r2, r3, #8
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	f04f 32ff 	mov.w	r2, #4294967295
 8003c54:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	f103 0208 	add.w	r2, r3, #8
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	f103 0208 	add.w	r2, r3, #8
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	601a      	str	r2, [r3, #0]
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );

    traceRETURN_vListInitialise();
}
 8003c70:	bf00      	nop
 8003c72:	370c      	adds	r7, #12
 8003c74:	46bd      	mov	sp, r7
 8003c76:	bc80      	pop	{r7}
 8003c78:	4770      	bx	lr

08003c7a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003c7a:	b480      	push	{r7}
 8003c7c:	b083      	sub	sp, #12
 8003c7e:	af00      	add	r7, sp, #0
 8003c80:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialiseItem( pxItem );

    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2200      	movs	r2, #0
 8003c86:	611a      	str	r2, [r3, #16]
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );

    traceRETURN_vListInitialiseItem();
}
 8003c88:	bf00      	nop
 8003c8a:	370c      	adds	r7, #12
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	bc80      	pop	{r7}
 8003c90:	4770      	bx	lr

08003c92 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8003c92:	b480      	push	{r7}
 8003c94:	b085      	sub	sp, #20
 8003c96:	af00      	add	r7, sp, #0
 8003c98:	6078      	str	r0, [r7, #4]
 8003c9a:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	68fa      	ldr	r2, [r7, #12]
 8003ca6:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	689a      	ldr	r2, [r3, #8]
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	689b      	ldr	r3, [r3, #8]
 8003cb4:	683a      	ldr	r2, [r7, #0]
 8003cb6:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	683a      	ldr	r2, [r7, #0]
 8003cbc:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	687a      	ldr	r2, [r7, #4]
 8003cc2:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	1c5a      	adds	r2, r3, #1
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	601a      	str	r2, [r3, #0]

    traceRETURN_vListInsertEnd();
}
 8003cce:	bf00      	nop
 8003cd0:	3714      	adds	r7, #20
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	bc80      	pop	{r7}
 8003cd6:	4770      	bx	lr

08003cd8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8003cd8:	b480      	push	{r7}
 8003cda:	b085      	sub	sp, #20
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
 8003ce0:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8003ce8:	68bb      	ldr	r3, [r7, #8]
 8003cea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cee:	d103      	bne.n	8003cf8 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	691b      	ldr	r3, [r3, #16]
 8003cf4:	60fb      	str	r3, [r7, #12]
 8003cf6:	e00c      	b.n	8003d12 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	3308      	adds	r3, #8
 8003cfc:	60fb      	str	r3, [r7, #12]
 8003cfe:	e002      	b.n	8003d06 <vListInsert+0x2e>
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	60fb      	str	r3, [r7, #12]
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	68ba      	ldr	r2, [r7, #8]
 8003d0e:	429a      	cmp	r2, r3
 8003d10:	d2f6      	bcs.n	8003d00 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	685a      	ldr	r2, [r3, #4]
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	683a      	ldr	r2, [r7, #0]
 8003d20:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	68fa      	ldr	r2, [r7, #12]
 8003d26:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	683a      	ldr	r2, [r7, #0]
 8003d2c:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	687a      	ldr	r2, [r7, #4]
 8003d32:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	1c5a      	adds	r2, r3, #1
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	601a      	str	r2, [r3, #0]

    traceRETURN_vListInsert();
}
 8003d3e:	bf00      	nop
 8003d40:	3714      	adds	r7, #20
 8003d42:	46bd      	mov	sp, r7
 8003d44:	bc80      	pop	{r7}
 8003d46:	4770      	bx	lr

08003d48 <uxListRemove>:
/*-----------------------------------------------------------*/


UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003d48:	b480      	push	{r7}
 8003d4a:	b085      	sub	sp, #20
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
    /* The list item knows which list it is in.  Obtain the list from the list
     * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	691b      	ldr	r3, [r3, #16]
 8003d54:	60fb      	str	r3, [r7, #12]

    traceENTER_uxListRemove( pxItemToRemove );

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	687a      	ldr	r2, [r7, #4]
 8003d5c:	6892      	ldr	r2, [r2, #8]
 8003d5e:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	689b      	ldr	r3, [r3, #8]
 8003d64:	687a      	ldr	r2, [r7, #4]
 8003d66:	6852      	ldr	r2, [r2, #4]
 8003d68:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	687a      	ldr	r2, [r7, #4]
 8003d70:	429a      	cmp	r2, r3
 8003d72:	d103      	bne.n	8003d7c <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	689a      	ldr	r2, [r3, #8]
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2200      	movs	r2, #0
 8003d80:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems - 1U );
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	1e5a      	subs	r2, r3, #1
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	601a      	str	r2, [r3, #0]

    traceRETURN_uxListRemove( pxList->uxNumberOfItems );

    return pxList->uxNumberOfItems;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
}
 8003d90:	4618      	mov	r0, r3
 8003d92:	3714      	adds	r7, #20
 8003d94:	46bd      	mov	sp, r7
 8003d96:	bc80      	pop	{r7}
 8003d98:	4770      	bx	lr
	...

08003d9c <xQueueGenericReset>:
    } while( 0 )
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b084      	sub	sp, #16
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
 8003da4:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8003da6:	2301      	movs	r3, #1
 8003da8:	60fb      	str	r3, [r7, #12]
    Queue_t * const pxQueue = xQueue;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	60bb      	str	r3, [r7, #8]

    traceENTER_xQueueGenericReset( xQueue, xNewQueue );

    configASSERT( pxQueue );

    if( ( pxQueue != NULL ) &&
 8003dae:	68bb      	ldr	r3, [r7, #8]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d05d      	beq.n	8003e70 <xQueueGenericReset+0xd4>
        ( pxQueue->uxLength >= 1U ) &&
 8003db4:	68bb      	ldr	r3, [r7, #8]
 8003db6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d059      	beq.n	8003e70 <xQueueGenericReset+0xd4>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003dc0:	68bb      	ldr	r3, [r7, #8]
 8003dc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003dc4:	2100      	movs	r1, #0
 8003dc6:	fba3 2302 	umull	r2, r3, r3, r2
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d000      	beq.n	8003dd0 <xQueueGenericReset+0x34>
 8003dce:	2101      	movs	r1, #1
 8003dd0:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d14c      	bne.n	8003e70 <xQueueGenericReset+0xd4>
    {
        taskENTER_CRITICAL();
 8003dd6:	f7ff fcff 	bl	80037d8 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8003dda:	68bb      	ldr	r3, [r7, #8]
 8003ddc:	681a      	ldr	r2, [r3, #0]
 8003dde:	68bb      	ldr	r3, [r7, #8]
 8003de0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003de2:	68b9      	ldr	r1, [r7, #8]
 8003de4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003de6:	fb01 f303 	mul.w	r3, r1, r3
 8003dea:	441a      	add	r2, r3
 8003dec:	68bb      	ldr	r3, [r7, #8]
 8003dee:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003df0:	68bb      	ldr	r3, [r7, #8]
 8003df2:	2200      	movs	r2, #0
 8003df4:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8003df6:	68bb      	ldr	r3, [r7, #8]
 8003df8:	681a      	ldr	r2, [r3, #0]
 8003dfa:	68bb      	ldr	r3, [r7, #8]
 8003dfc:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize );
 8003dfe:	68bb      	ldr	r3, [r7, #8]
 8003e00:	681a      	ldr	r2, [r3, #0]
 8003e02:	68bb      	ldr	r3, [r7, #8]
 8003e04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e06:	3b01      	subs	r3, #1
 8003e08:	68b9      	ldr	r1, [r7, #8]
 8003e0a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003e0c:	fb01 f303 	mul.w	r3, r1, r3
 8003e10:	441a      	add	r2, r3
 8003e12:	68bb      	ldr	r3, [r7, #8]
 8003e14:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8003e16:	68bb      	ldr	r3, [r7, #8]
 8003e18:	22ff      	movs	r2, #255	@ 0xff
 8003e1a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8003e1e:	68bb      	ldr	r3, [r7, #8]
 8003e20:	22ff      	movs	r2, #255	@ 0xff
 8003e22:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            if( xNewQueue == pdFALSE )
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d114      	bne.n	8003e56 <xQueueGenericReset+0xba>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003e2c:	68bb      	ldr	r3, [r7, #8]
 8003e2e:	691b      	ldr	r3, [r3, #16]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d01a      	beq.n	8003e6a <xQueueGenericReset+0xce>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	3310      	adds	r3, #16
 8003e38:	4618      	mov	r0, r3
 8003e3a:	f000 ffe5 	bl	8004e08 <xTaskRemoveFromEventList>
 8003e3e:	4603      	mov	r3, r0
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d012      	beq.n	8003e6a <xQueueGenericReset+0xce>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8003e44:	4b0e      	ldr	r3, [pc, #56]	@ (8003e80 <xQueueGenericReset+0xe4>)
 8003e46:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003e4a:	601a      	str	r2, [r3, #0]
 8003e4c:	f3bf 8f4f 	dsb	sy
 8003e50:	f3bf 8f6f 	isb	sy
 8003e54:	e009      	b.n	8003e6a <xQueueGenericReset+0xce>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003e56:	68bb      	ldr	r3, [r7, #8]
 8003e58:	3310      	adds	r3, #16
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	f7ff feee 	bl	8003c3c <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003e60:	68bb      	ldr	r3, [r7, #8]
 8003e62:	3324      	adds	r3, #36	@ 0x24
 8003e64:	4618      	mov	r0, r3
 8003e66:	f7ff fee9 	bl	8003c3c <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8003e6a:	f7ff fccf 	bl	800380c <vPortExitCritical>
 8003e6e:	e001      	b.n	8003e74 <xQueueGenericReset+0xd8>
    }
    else
    {
        xReturn = pdFAIL;
 8003e70:	2300      	movs	r3, #0
 8003e72:	60fb      	str	r3, [r7, #12]

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    traceRETURN_xQueueGenericReset( xReturn );

    return xReturn;
 8003e74:	68fb      	ldr	r3, [r7, #12]
}
 8003e76:	4618      	mov	r0, r3
 8003e78:	3710      	adds	r7, #16
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bd80      	pop	{r7, pc}
 8003e7e:	bf00      	nop
 8003e80:	e000ed04 	.word	0xe000ed04

08003e84 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b08a      	sub	sp, #40	@ 0x28
 8003e88:	af02      	add	r7, sp, #8
 8003e8a:	60f8      	str	r0, [r7, #12]
 8003e8c:	60b9      	str	r1, [r7, #8]
 8003e8e:	4613      	mov	r3, r2
 8003e90:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8003e92:	2300      	movs	r3, #0
 8003e94:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        traceENTER_xQueueGenericCreate( uxQueueLength, uxItemSize, ucQueueType );

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d02d      	beq.n	8003ef8 <xQueueGenericCreate+0x74>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8003e9c:	2100      	movs	r1, #0
 8003e9e:	68ba      	ldr	r2, [r7, #8]
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	fba3 2302 	umull	r2, r3, r3, r2
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d000      	beq.n	8003eac <xQueueGenericCreate+0x28>
 8003eaa:	2101      	movs	r1, #1
 8003eac:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d122      	bne.n	8003ef8 <xQueueGenericCreate+0x74>
            /* Check for addition overflow. */
            ( ( UBaseType_t ) ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	68ba      	ldr	r2, [r7, #8]
 8003eb6:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8003eba:	f113 0f49 	cmn.w	r3, #73	@ 0x49
 8003ebe:	d81b      	bhi.n	8003ef8 <xQueueGenericCreate+0x74>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( ( size_t ) uxQueueLength * ( size_t ) uxItemSize );
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	68ba      	ldr	r2, [r7, #8]
 8003ec4:	fb02 f303 	mul.w	r3, r2, r3
 8003ec8:	61bb      	str	r3, [r7, #24]

            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8003eca:	69bb      	ldr	r3, [r7, #24]
 8003ecc:	3348      	adds	r3, #72	@ 0x48
 8003ece:	4618      	mov	r0, r3
 8003ed0:	f7ff fd16 	bl	8003900 <pvPortMalloc>
 8003ed4:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8003ed6:	69fb      	ldr	r3, [r7, #28]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d00d      	beq.n	8003ef8 <xQueueGenericCreate+0x74>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003edc:	69fb      	ldr	r3, [r7, #28]
 8003ede:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t );
 8003ee0:	697b      	ldr	r3, [r7, #20]
 8003ee2:	3348      	adds	r3, #72	@ 0x48
 8003ee4:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003ee6:	79fa      	ldrb	r2, [r7, #7]
 8003ee8:	69fb      	ldr	r3, [r7, #28]
 8003eea:	9300      	str	r3, [sp, #0]
 8003eec:	4613      	mov	r3, r2
 8003eee:	697a      	ldr	r2, [r7, #20]
 8003ef0:	68b9      	ldr	r1, [r7, #8]
 8003ef2:	68f8      	ldr	r0, [r7, #12]
 8003ef4:	f000 f805 	bl	8003f02 <prvInitialiseNewQueue>
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xQueueGenericCreate( pxNewQueue );

        return pxNewQueue;
 8003ef8:	69fb      	ldr	r3, [r7, #28]
    }
 8003efa:	4618      	mov	r0, r3
 8003efc:	3720      	adds	r7, #32
 8003efe:	46bd      	mov	sp, r7
 8003f00:	bd80      	pop	{r7, pc}

08003f02 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8003f02:	b580      	push	{r7, lr}
 8003f04:	b084      	sub	sp, #16
 8003f06:	af00      	add	r7, sp, #0
 8003f08:	60f8      	str	r0, [r7, #12]
 8003f0a:	60b9      	str	r1, [r7, #8]
 8003f0c:	607a      	str	r2, [r7, #4]
 8003f0e:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8003f10:	68bb      	ldr	r3, [r7, #8]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d103      	bne.n	8003f1e <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003f16:	69bb      	ldr	r3, [r7, #24]
 8003f18:	69ba      	ldr	r2, [r7, #24]
 8003f1a:	601a      	str	r2, [r3, #0]
 8003f1c:	e002      	b.n	8003f24 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003f1e:	69bb      	ldr	r3, [r7, #24]
 8003f20:	687a      	ldr	r2, [r7, #4]
 8003f22:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8003f24:	69bb      	ldr	r3, [r7, #24]
 8003f26:	68fa      	ldr	r2, [r7, #12]
 8003f28:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8003f2a:	69bb      	ldr	r3, [r7, #24]
 8003f2c:	68ba      	ldr	r2, [r7, #8]
 8003f2e:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003f30:	2101      	movs	r1, #1
 8003f32:	69b8      	ldr	r0, [r7, #24]
 8003f34:	f7ff ff32 	bl	8003d9c <xQueueGenericReset>
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8003f38:	bf00      	nop
 8003f3a:	3710      	adds	r7, #16
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	bd80      	pop	{r7, pc}

08003f40 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b08a      	sub	sp, #40	@ 0x28
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	60f8      	str	r0, [r7, #12]
 8003f48:	60b9      	str	r1, [r7, #8]
 8003f4a:	607a      	str	r2, [r7, #4]
 8003f4c:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003f4e:	2300      	movs	r3, #0
 8003f50:	627b      	str	r3, [r7, #36]	@ 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	623b      	str	r3, [r7, #32]
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 8003f56:	f7ff fc3f 	bl	80037d8 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003f5a:	6a3b      	ldr	r3, [r7, #32]
 8003f5c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003f5e:	6a3b      	ldr	r3, [r7, #32]
 8003f60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f62:	429a      	cmp	r2, r3
 8003f64:	d302      	bcc.n	8003f6c <xQueueGenericSend+0x2c>
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	2b02      	cmp	r3, #2
 8003f6a:	d129      	bne.n	8003fc0 <xQueueGenericSend+0x80>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003f6c:	683a      	ldr	r2, [r7, #0]
 8003f6e:	68b9      	ldr	r1, [r7, #8]
 8003f70:	6a38      	ldr	r0, [r7, #32]
 8003f72:	f000 f96e 	bl	8004252 <prvCopyDataToQueue>
 8003f76:	61f8      	str	r0, [r7, #28]

                    /* If there was a task waiting for data to arrive on the
                     * queue then unblock it now. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003f78:	6a3b      	ldr	r3, [r7, #32]
 8003f7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d010      	beq.n	8003fa2 <xQueueGenericSend+0x62>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003f80:	6a3b      	ldr	r3, [r7, #32]
 8003f82:	3324      	adds	r3, #36	@ 0x24
 8003f84:	4618      	mov	r0, r3
 8003f86:	f000 ff3f 	bl	8004e08 <xTaskRemoveFromEventList>
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d013      	beq.n	8003fb8 <xQueueGenericSend+0x78>
                        {
                            /* The unblocked task has a priority higher than
                             * our own so yield immediately.  Yes it is ok to do
                             * this from within the critical section - the kernel
                             * takes care of that. */
                            queueYIELD_IF_USING_PREEMPTION();
 8003f90:	4b3f      	ldr	r3, [pc, #252]	@ (8004090 <xQueueGenericSend+0x150>)
 8003f92:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003f96:	601a      	str	r2, [r3, #0]
 8003f98:	f3bf 8f4f 	dsb	sy
 8003f9c:	f3bf 8f6f 	isb	sy
 8003fa0:	e00a      	b.n	8003fb8 <xQueueGenericSend+0x78>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                    else if( xYieldRequired != pdFALSE )
 8003fa2:	69fb      	ldr	r3, [r7, #28]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d007      	beq.n	8003fb8 <xQueueGenericSend+0x78>
                    {
                        /* This path is a special case that will only get
                         * executed if the task was holding multiple mutexes and
                         * the mutexes were given back in an order that is
                         * different to that in which they were taken. */
                        queueYIELD_IF_USING_PREEMPTION();
 8003fa8:	4b39      	ldr	r3, [pc, #228]	@ (8004090 <xQueueGenericSend+0x150>)
 8003faa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003fae:	601a      	str	r2, [r3, #0]
 8003fb0:	f3bf 8f4f 	dsb	sy
 8003fb4:	f3bf 8f6f 	isb	sy
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8003fb8:	f7ff fc28 	bl	800380c <vPortExitCritical>

                traceRETURN_xQueueGenericSend( pdPASS );

                return pdPASS;
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	e063      	b.n	8004088 <xQueueGenericSend+0x148>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d103      	bne.n	8003fce <xQueueGenericSend+0x8e>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8003fc6:	f7ff fc21 	bl	800380c <vPortExitCritical>
                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    traceRETURN_xQueueGenericSend( errQUEUE_FULL );

                    return errQUEUE_FULL;
 8003fca:	2300      	movs	r3, #0
 8003fcc:	e05c      	b.n	8004088 <xQueueGenericSend+0x148>
                }
                else if( xEntryTimeSet == pdFALSE )
 8003fce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d106      	bne.n	8003fe2 <xQueueGenericSend+0xa2>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8003fd4:	f107 0314 	add.w	r3, r7, #20
 8003fd8:	4618      	mov	r0, r3
 8003fda:	f000 ffdf 	bl	8004f9c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	627b      	str	r3, [r7, #36]	@ 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8003fe2:	f7ff fc13 	bl	800380c <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8003fe6:	f000 fca5 	bl	8004934 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8003fea:	f7ff fbf5 	bl	80037d8 <vPortEnterCritical>
 8003fee:	6a3b      	ldr	r3, [r7, #32]
 8003ff0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003ff4:	b25b      	sxtb	r3, r3
 8003ff6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ffa:	d103      	bne.n	8004004 <xQueueGenericSend+0xc4>
 8003ffc:	6a3b      	ldr	r3, [r7, #32]
 8003ffe:	2200      	movs	r2, #0
 8004000:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004004:	6a3b      	ldr	r3, [r7, #32]
 8004006:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800400a:	b25b      	sxtb	r3, r3
 800400c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004010:	d103      	bne.n	800401a <xQueueGenericSend+0xda>
 8004012:	6a3b      	ldr	r3, [r7, #32]
 8004014:	2200      	movs	r2, #0
 8004016:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800401a:	f7ff fbf7 	bl	800380c <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800401e:	1d3a      	adds	r2, r7, #4
 8004020:	f107 0314 	add.w	r3, r7, #20
 8004024:	4611      	mov	r1, r2
 8004026:	4618      	mov	r0, r3
 8004028:	f000 ffce 	bl	8004fc8 <xTaskCheckForTimeOut>
 800402c:	4603      	mov	r3, r0
 800402e:	2b00      	cmp	r3, #0
 8004030:	d124      	bne.n	800407c <xQueueGenericSend+0x13c>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004032:	6a38      	ldr	r0, [r7, #32]
 8004034:	f000 f9df 	bl	80043f6 <prvIsQueueFull>
 8004038:	4603      	mov	r3, r0
 800403a:	2b00      	cmp	r3, #0
 800403c:	d018      	beq.n	8004070 <xQueueGenericSend+0x130>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800403e:	6a3b      	ldr	r3, [r7, #32]
 8004040:	3310      	adds	r3, #16
 8004042:	687a      	ldr	r2, [r7, #4]
 8004044:	4611      	mov	r1, r2
 8004046:	4618      	mov	r0, r3
 8004048:	f000 fec8 	bl	8004ddc <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 800404c:	6a38      	ldr	r0, [r7, #32]
 800404e:	f000 f96a 	bl	8004326 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8004052:	f000 fc7d 	bl	8004950 <xTaskResumeAll>
 8004056:	4603      	mov	r3, r0
 8004058:	2b00      	cmp	r3, #0
 800405a:	f47f af7c 	bne.w	8003f56 <xQueueGenericSend+0x16>
                {
                    taskYIELD_WITHIN_API();
 800405e:	4b0c      	ldr	r3, [pc, #48]	@ (8004090 <xQueueGenericSend+0x150>)
 8004060:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004064:	601a      	str	r2, [r3, #0]
 8004066:	f3bf 8f4f 	dsb	sy
 800406a:	f3bf 8f6f 	isb	sy
 800406e:	e772      	b.n	8003f56 <xQueueGenericSend+0x16>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8004070:	6a38      	ldr	r0, [r7, #32]
 8004072:	f000 f958 	bl	8004326 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8004076:	f000 fc6b 	bl	8004950 <xTaskResumeAll>
 800407a:	e76c      	b.n	8003f56 <xQueueGenericSend+0x16>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 800407c:	6a38      	ldr	r0, [r7, #32]
 800407e:	f000 f952 	bl	8004326 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8004082:	f000 fc65 	bl	8004950 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            traceRETURN_xQueueGenericSend( errQUEUE_FULL );

            return errQUEUE_FULL;
 8004086:	2300      	movs	r3, #0
        }
    }
}
 8004088:	4618      	mov	r0, r3
 800408a:	3728      	adds	r7, #40	@ 0x28
 800408c:	46bd      	mov	sp, r7
 800408e:	bd80      	pop	{r7, pc}
 8004090:	e000ed04 	.word	0xe000ed04

08004094 <xQueueSemaphoreTake>:
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b08a      	sub	sp, #40	@ 0x28
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
 800409c:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 800409e:	2300      	movs	r3, #0
 80040a0:	627b      	str	r3, [r7, #36]	@ 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	61fb      	str	r3, [r7, #28]

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
 80040a6:	2300      	movs	r3, #0
 80040a8:	623b      	str	r3, [r7, #32]
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 80040aa:	f7ff fb95 	bl	80037d8 <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80040ae:	69fb      	ldr	r3, [r7, #28]
 80040b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040b2:	61bb      	str	r3, [r7, #24]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80040b4:	69bb      	ldr	r3, [r7, #24]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d024      	beq.n	8004104 <xQueueSemaphoreTake+0x70>
            {
                traceQUEUE_RECEIVE( pxQueue );

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxSemaphoreCount - ( UBaseType_t ) 1 );
 80040ba:	69bb      	ldr	r3, [r7, #24]
 80040bc:	1e5a      	subs	r2, r3, #1
 80040be:	69fb      	ldr	r3, [r7, #28]
 80040c0:	639a      	str	r2, [r3, #56]	@ 0x38

                #if ( configUSE_MUTEXES == 1 )
                {
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80040c2:	69fb      	ldr	r3, [r7, #28]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d104      	bne.n	80040d4 <xQueueSemaphoreTake+0x40>
                    {
                        /* Record the information required to implement
                         * priority inheritance should it become necessary. */
                        pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80040ca:	f001 fa5d 	bl	8005588 <pvTaskIncrementMutexHeldCount>
 80040ce:	4602      	mov	r2, r0
 80040d0:	69fb      	ldr	r3, [r7, #28]
 80040d2:	609a      	str	r2, [r3, #8]
                }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80040d4:	69fb      	ldr	r3, [r7, #28]
 80040d6:	691b      	ldr	r3, [r3, #16]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d00f      	beq.n	80040fc <xQueueSemaphoreTake+0x68>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80040dc:	69fb      	ldr	r3, [r7, #28]
 80040de:	3310      	adds	r3, #16
 80040e0:	4618      	mov	r0, r3
 80040e2:	f000 fe91 	bl	8004e08 <xTaskRemoveFromEventList>
 80040e6:	4603      	mov	r3, r0
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d007      	beq.n	80040fc <xQueueSemaphoreTake+0x68>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80040ec:	4b4c      	ldr	r3, [pc, #304]	@ (8004220 <xQueueSemaphoreTake+0x18c>)
 80040ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80040f2:	601a      	str	r2, [r3, #0]
 80040f4:	f3bf 8f4f 	dsb	sy
 80040f8:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80040fc:	f7ff fb86 	bl	800380c <vPortExitCritical>

                traceRETURN_xQueueSemaphoreTake( pdPASS );

                return pdPASS;
 8004100:	2301      	movs	r3, #1
 8004102:	e089      	b.n	8004218 <xQueueSemaphoreTake+0x184>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d103      	bne.n	8004112 <xQueueSemaphoreTake+0x7e>
                {
                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 800410a:	f7ff fb7f 	bl	800380c <vPortExitCritical>

                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    traceRETURN_xQueueSemaphoreTake( errQUEUE_EMPTY );

                    return errQUEUE_EMPTY;
 800410e:	2300      	movs	r3, #0
 8004110:	e082      	b.n	8004218 <xQueueSemaphoreTake+0x184>
                }
                else if( xEntryTimeSet == pdFALSE )
 8004112:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004114:	2b00      	cmp	r3, #0
 8004116:	d106      	bne.n	8004126 <xQueueSemaphoreTake+0x92>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8004118:	f107 030c 	add.w	r3, r7, #12
 800411c:	4618      	mov	r0, r3
 800411e:	f000 ff3d 	bl	8004f9c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8004122:	2301      	movs	r3, #1
 8004124:	627b      	str	r3, [r7, #36]	@ 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8004126:	f7ff fb71 	bl	800380c <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800412a:	f000 fc03 	bl	8004934 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800412e:	f7ff fb53 	bl	80037d8 <vPortEnterCritical>
 8004132:	69fb      	ldr	r3, [r7, #28]
 8004134:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004138:	b25b      	sxtb	r3, r3
 800413a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800413e:	d103      	bne.n	8004148 <xQueueSemaphoreTake+0xb4>
 8004140:	69fb      	ldr	r3, [r7, #28]
 8004142:	2200      	movs	r2, #0
 8004144:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004148:	69fb      	ldr	r3, [r7, #28]
 800414a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800414e:	b25b      	sxtb	r3, r3
 8004150:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004154:	d103      	bne.n	800415e <xQueueSemaphoreTake+0xca>
 8004156:	69fb      	ldr	r3, [r7, #28]
 8004158:	2200      	movs	r2, #0
 800415a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800415e:	f7ff fb55 	bl	800380c <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004162:	463a      	mov	r2, r7
 8004164:	f107 030c 	add.w	r3, r7, #12
 8004168:	4611      	mov	r1, r2
 800416a:	4618      	mov	r0, r3
 800416c:	f000 ff2c 	bl	8004fc8 <xTaskCheckForTimeOut>
 8004170:	4603      	mov	r3, r0
 8004172:	2b00      	cmp	r3, #0
 8004174:	d132      	bne.n	80041dc <xQueueSemaphoreTake+0x148>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004176:	69f8      	ldr	r0, [r7, #28]
 8004178:	f000 f927 	bl	80043ca <prvIsQueueEmpty>
 800417c:	4603      	mov	r3, r0
 800417e:	2b00      	cmp	r3, #0
 8004180:	d026      	beq.n	80041d0 <xQueueSemaphoreTake+0x13c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                {
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004182:	69fb      	ldr	r3, [r7, #28]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d109      	bne.n	800419e <xQueueSemaphoreTake+0x10a>
                    {
                        taskENTER_CRITICAL();
 800418a:	f7ff fb25 	bl	80037d8 <vPortEnterCritical>
                        {
                            xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800418e:	69fb      	ldr	r3, [r7, #28]
 8004190:	689b      	ldr	r3, [r3, #8]
 8004192:	4618      	mov	r0, r3
 8004194:	f001 f83c 	bl	8005210 <xTaskPriorityInherit>
 8004198:	6238      	str	r0, [r7, #32]
                        }
                        taskEXIT_CRITICAL();
 800419a:	f7ff fb37 	bl	800380c <vPortExitCritical>
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800419e:	69fb      	ldr	r3, [r7, #28]
 80041a0:	3324      	adds	r3, #36	@ 0x24
 80041a2:	683a      	ldr	r2, [r7, #0]
 80041a4:	4611      	mov	r1, r2
 80041a6:	4618      	mov	r0, r3
 80041a8:	f000 fe18 	bl	8004ddc <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80041ac:	69f8      	ldr	r0, [r7, #28]
 80041ae:	f000 f8ba 	bl	8004326 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80041b2:	f000 fbcd 	bl	8004950 <xTaskResumeAll>
 80041b6:	4603      	mov	r3, r0
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	f47f af76 	bne.w	80040aa <xQueueSemaphoreTake+0x16>
                {
                    taskYIELD_WITHIN_API();
 80041be:	4b18      	ldr	r3, [pc, #96]	@ (8004220 <xQueueSemaphoreTake+0x18c>)
 80041c0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80041c4:	601a      	str	r2, [r3, #0]
 80041c6:	f3bf 8f4f 	dsb	sy
 80041ca:	f3bf 8f6f 	isb	sy
 80041ce:	e76c      	b.n	80040aa <xQueueSemaphoreTake+0x16>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 80041d0:	69f8      	ldr	r0, [r7, #28]
 80041d2:	f000 f8a8 	bl	8004326 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80041d6:	f000 fbbb 	bl	8004950 <xTaskResumeAll>
 80041da:	e766      	b.n	80040aa <xQueueSemaphoreTake+0x16>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 80041dc:	69f8      	ldr	r0, [r7, #28]
 80041de:	f000 f8a2 	bl	8004326 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80041e2:	f000 fbb5 	bl	8004950 <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80041e6:	69f8      	ldr	r0, [r7, #28]
 80041e8:	f000 f8ef 	bl	80043ca <prvIsQueueEmpty>
 80041ec:	4603      	mov	r3, r0
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	f43f af5b 	beq.w	80040aa <xQueueSemaphoreTake+0x16>
                #if ( configUSE_MUTEXES == 1 )
                {
                    /* xInheritanceOccurred could only have be set if
                     * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                     * test the mutex type again to check it is actually a mutex. */
                    if( xInheritanceOccurred != pdFALSE )
 80041f4:	6a3b      	ldr	r3, [r7, #32]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d00d      	beq.n	8004216 <xQueueSemaphoreTake+0x182>
                    {
                        taskENTER_CRITICAL();
 80041fa:	f7ff faed 	bl	80037d8 <vPortEnterCritical>
                            /* This task blocking on the mutex caused another
                             * task to inherit this task's priority.  Now this task
                             * has timed out the priority should be disinherited
                             * again, but only as low as the next highest priority
                             * task that is waiting for the same mutex. */
                            uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80041fe:	69f8      	ldr	r0, [r7, #28]
 8004200:	f000 f810 	bl	8004224 <prvGetDisinheritPriorityAfterTimeout>
 8004204:	6178      	str	r0, [r7, #20]
                             * mutex to the ready list for its new priority. Coverity thinks that
                             * it can result in out-of-bounds access which is not true because
                             * uxHighestWaitingPriority, as returned by prvGetDisinheritPriorityAfterTimeout,
                             * is capped at ( configMAX_PRIORITIES - 1 ). */
                            /* coverity[overrun] */
                            vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8004206:	69fb      	ldr	r3, [r7, #28]
 8004208:	689b      	ldr	r3, [r3, #8]
 800420a:	6979      	ldr	r1, [r7, #20]
 800420c:	4618      	mov	r0, r3
 800420e:	f001 f923 	bl	8005458 <vTaskPriorityDisinheritAfterTimeout>
                        }
                        taskEXIT_CRITICAL();
 8004212:	f7ff fafb 	bl	800380c <vPortExitCritical>
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
                traceRETURN_xQueueSemaphoreTake( errQUEUE_EMPTY );

                return errQUEUE_EMPTY;
 8004216:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
}
 8004218:	4618      	mov	r0, r3
 800421a:	3728      	adds	r7, #40	@ 0x28
 800421c:	46bd      	mov	sp, r7
 800421e:	bd80      	pop	{r7, pc}
 8004220:	e000ed04 	.word	0xe000ed04

08004224 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
    {
 8004224:	b480      	push	{r7}
 8004226:	b085      	sub	sp, #20
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004230:	2b00      	cmp	r3, #0
 8004232:	d006      	beq.n	8004242 <prvGetDisinheritPriorityAfterTimeout+0x1e>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) ( ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) ) );
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f1c3 0305 	rsb	r3, r3, #5
 800423e:	60fb      	str	r3, [r7, #12]
 8004240:	e001      	b.n	8004246 <prvGetDisinheritPriorityAfterTimeout+0x22>
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8004242:	2300      	movs	r3, #0
 8004244:	60fb      	str	r3, [r7, #12]
        }

        return uxHighestPriorityOfWaitingTasks;
 8004246:	68fb      	ldr	r3, [r7, #12]
    }
 8004248:	4618      	mov	r0, r3
 800424a:	3714      	adds	r7, #20
 800424c:	46bd      	mov	sp, r7
 800424e:	bc80      	pop	{r7}
 8004250:	4770      	bx	lr

08004252 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8004252:	b580      	push	{r7, lr}
 8004254:	b086      	sub	sp, #24
 8004256:	af00      	add	r7, sp, #0
 8004258:	60f8      	str	r0, [r7, #12]
 800425a:	60b9      	str	r1, [r7, #8]
 800425c:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 800425e:	2300      	movs	r3, #0
 8004260:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004266:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800426c:	2b00      	cmp	r3, #0
 800426e:	d10d      	bne.n	800428c <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d14d      	bne.n	8004314 <prvCopyDataToQueue+0xc2>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	689b      	ldr	r3, [r3, #8]
 800427c:	4618      	mov	r0, r3
 800427e:	f001 f867 	bl	8005350 <xTaskPriorityDisinherit>
 8004282:	6178      	str	r0, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	2200      	movs	r2, #0
 8004288:	609a      	str	r2, [r3, #8]
 800428a:	e043      	b.n	8004314 <prvCopyDataToQueue+0xc2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d119      	bne.n	80042c6 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize );
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	6858      	ldr	r0, [r3, #4]
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800429a:	461a      	mov	r2, r3
 800429c:	68b9      	ldr	r1, [r7, #8]
 800429e:	f002 fb1c 	bl	80068da <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	685a      	ldr	r2, [r3, #4]
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042aa:	441a      	add	r2, r3
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	685a      	ldr	r2, [r3, #4]
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	689b      	ldr	r3, [r3, #8]
 80042b8:	429a      	cmp	r2, r3
 80042ba:	d32b      	bcc.n	8004314 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681a      	ldr	r2, [r3, #0]
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	605a      	str	r2, [r3, #4]
 80042c4:	e026      	b.n	8004314 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize );
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	68d8      	ldr	r0, [r3, #12]
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042ce:	461a      	mov	r2, r3
 80042d0:	68b9      	ldr	r1, [r7, #8]
 80042d2:	f002 fb02 	bl	80068da <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	68da      	ldr	r2, [r3, #12]
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042de:	425b      	negs	r3, r3
 80042e0:	441a      	add	r2, r3
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead )
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	68da      	ldr	r2, [r3, #12]
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	429a      	cmp	r2, r3
 80042f0:	d207      	bcs.n	8004302 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	689a      	ldr	r2, [r3, #8]
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042fa:	425b      	negs	r3, r3
 80042fc:	441a      	add	r2, r3
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2b02      	cmp	r3, #2
 8004306:	d105      	bne.n	8004314 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004308:	693b      	ldr	r3, [r7, #16]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d002      	beq.n	8004314 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 800430e:	693b      	ldr	r3, [r7, #16]
 8004310:	3b01      	subs	r3, #1
 8004312:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting + ( UBaseType_t ) 1 );
 8004314:	693b      	ldr	r3, [r7, #16]
 8004316:	1c5a      	adds	r2, r3, #1
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 800431c:	697b      	ldr	r3, [r7, #20]
}
 800431e:	4618      	mov	r0, r3
 8004320:	3718      	adds	r7, #24
 8004322:	46bd      	mov	sp, r7
 8004324:	bd80      	pop	{r7, pc}

08004326 <prvUnlockQueue>:
    }
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004326:	b580      	push	{r7, lr}
 8004328:	b084      	sub	sp, #16
 800432a:	af00      	add	r7, sp, #0
 800432c:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 800432e:	f7ff fa53 	bl	80037d8 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004338:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800433a:	e011      	b.n	8004360 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004340:	2b00      	cmp	r3, #0
 8004342:	d012      	beq.n	800436a <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	3324      	adds	r3, #36	@ 0x24
 8004348:	4618      	mov	r0, r3
 800434a:	f000 fd5d 	bl	8004e08 <xTaskRemoveFromEventList>
 800434e:	4603      	mov	r3, r0
 8004350:	2b00      	cmp	r3, #0
 8004352:	d001      	beq.n	8004358 <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8004354:	f000 fe82 	bl	800505c <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8004358:	7bfb      	ldrb	r3, [r7, #15]
 800435a:	3b01      	subs	r3, #1
 800435c:	b2db      	uxtb	r3, r3
 800435e:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8004360:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004364:	2b00      	cmp	r3, #0
 8004366:	dce9      	bgt.n	800433c <prvUnlockQueue+0x16>
 8004368:	e000      	b.n	800436c <prvUnlockQueue+0x46>
                    break;
 800436a:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	22ff      	movs	r2, #255	@ 0xff
 8004370:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 8004374:	f7ff fa4a 	bl	800380c <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8004378:	f7ff fa2e 	bl	80037d8 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004382:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8004384:	e011      	b.n	80043aa <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	691b      	ldr	r3, [r3, #16]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d012      	beq.n	80043b4 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	3310      	adds	r3, #16
 8004392:	4618      	mov	r0, r3
 8004394:	f000 fd38 	bl	8004e08 <xTaskRemoveFromEventList>
 8004398:	4603      	mov	r3, r0
 800439a:	2b00      	cmp	r3, #0
 800439c:	d001      	beq.n	80043a2 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 800439e:	f000 fe5d 	bl	800505c <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 80043a2:	7bbb      	ldrb	r3, [r7, #14]
 80043a4:	3b01      	subs	r3, #1
 80043a6:	b2db      	uxtb	r3, r3
 80043a8:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80043aa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	dce9      	bgt.n	8004386 <prvUnlockQueue+0x60>
 80043b2:	e000      	b.n	80043b6 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 80043b4:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	22ff      	movs	r2, #255	@ 0xff
 80043ba:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 80043be:	f7ff fa25 	bl	800380c <vPortExitCritical>
}
 80043c2:	bf00      	nop
 80043c4:	3710      	adds	r7, #16
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bd80      	pop	{r7, pc}

080043ca <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 80043ca:	b580      	push	{r7, lr}
 80043cc:	b084      	sub	sp, #16
 80043ce:	af00      	add	r7, sp, #0
 80043d0:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80043d2:	f7ff fa01 	bl	80037d8 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d102      	bne.n	80043e4 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 80043de:	2301      	movs	r3, #1
 80043e0:	60fb      	str	r3, [r7, #12]
 80043e2:	e001      	b.n	80043e8 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 80043e4:	2300      	movs	r3, #0
 80043e6:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80043e8:	f7ff fa10 	bl	800380c <vPortExitCritical>

    return xReturn;
 80043ec:	68fb      	ldr	r3, [r7, #12]
}
 80043ee:	4618      	mov	r0, r3
 80043f0:	3710      	adds	r7, #16
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd80      	pop	{r7, pc}

080043f6 <prvIsQueueFull>:
    return xReturn;
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 80043f6:	b580      	push	{r7, lr}
 80043f8:	b084      	sub	sp, #16
 80043fa:	af00      	add	r7, sp, #0
 80043fc:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80043fe:	f7ff f9eb 	bl	80037d8 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800440a:	429a      	cmp	r2, r3
 800440c:	d102      	bne.n	8004414 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 800440e:	2301      	movs	r3, #1
 8004410:	60fb      	str	r3, [r7, #12]
 8004412:	e001      	b.n	8004418 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8004414:	2300      	movs	r3, #0
 8004416:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8004418:	f7ff f9f8 	bl	800380c <vPortExitCritical>

    return xReturn;
 800441c:	68fb      	ldr	r3, [r7, #12]
}
 800441e:	4618      	mov	r0, r3
 8004420:	3710      	adds	r7, #16
 8004422:	46bd      	mov	sp, r7
 8004424:	bd80      	pop	{r7, pc}

08004426 <prvCreateTask>:
                                  const char * const pcName,
                                  const configSTACK_DEPTH_TYPE uxStackDepth,
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask )
    {
 8004426:	b580      	push	{r7, lr}
 8004428:	b08a      	sub	sp, #40	@ 0x28
 800442a:	af04      	add	r7, sp, #16
 800442c:	60f8      	str	r0, [r7, #12]
 800442e:	60b9      	str	r1, [r7, #8]
 8004430:	607a      	str	r2, [r7, #4]
 8004432:	603b      	str	r3, [r7, #0]

            /* Allocate space for the stack used by the task being created. */
            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxStack = pvPortMallocStack( ( ( ( size_t ) uxStackDepth ) * sizeof( StackType_t ) ) );
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	009b      	lsls	r3, r3, #2
 8004438:	4618      	mov	r0, r3
 800443a:	f7ff fa61 	bl	8003900 <pvPortMalloc>
 800443e:	6138      	str	r0, [r7, #16]

            if( pxStack != NULL )
 8004440:	693b      	ldr	r3, [r7, #16]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d013      	beq.n	800446e <prvCreateTask+0x48>
            {
                /* Allocate space for the TCB. */
                /* MISRA Ref 11.5.1 [Malloc memory assignment] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                /* coverity[misra_c_2012_rule_11_5_violation] */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 8004446:	2054      	movs	r0, #84	@ 0x54
 8004448:	f7ff fa5a 	bl	8003900 <pvPortMalloc>
 800444c:	6178      	str	r0, [r7, #20]

                if( pxNewTCB != NULL )
 800444e:	697b      	ldr	r3, [r7, #20]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d008      	beq.n	8004466 <prvCreateTask+0x40>
                {
                    ( void ) memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8004454:	2254      	movs	r2, #84	@ 0x54
 8004456:	2100      	movs	r1, #0
 8004458:	6978      	ldr	r0, [r7, #20]
 800445a:	f002 f9b1 	bl	80067c0 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 800445e:	697b      	ldr	r3, [r7, #20]
 8004460:	693a      	ldr	r2, [r7, #16]
 8004462:	631a      	str	r2, [r3, #48]	@ 0x30
 8004464:	e005      	b.n	8004472 <prvCreateTask+0x4c>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8004466:	6938      	ldr	r0, [r7, #16]
 8004468:	f7ff faf8 	bl	8003a5c <vPortFree>
 800446c:	e001      	b.n	8004472 <prvCreateTask+0x4c>
                }
            }
            else
            {
                pxNewTCB = NULL;
 800446e:	2300      	movs	r3, #0
 8004470:	617b      	str	r3, [r7, #20]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8004472:	697b      	ldr	r3, [r7, #20]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d00d      	beq.n	8004494 <prvCreateTask+0x6e>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004478:	2300      	movs	r3, #0
 800447a:	9303      	str	r3, [sp, #12]
 800447c:	697b      	ldr	r3, [r7, #20]
 800447e:	9302      	str	r3, [sp, #8]
 8004480:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004482:	9301      	str	r3, [sp, #4]
 8004484:	6a3b      	ldr	r3, [r7, #32]
 8004486:	9300      	str	r3, [sp, #0]
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	687a      	ldr	r2, [r7, #4]
 800448c:	68b9      	ldr	r1, [r7, #8]
 800448e:	68f8      	ldr	r0, [r7, #12]
 8004490:	f000 f828 	bl	80044e4 <prvInitialiseNewTask>
        }

        return pxNewTCB;
 8004494:	697b      	ldr	r3, [r7, #20]
    }
 8004496:	4618      	mov	r0, r3
 8004498:	3718      	adds	r7, #24
 800449a:	46bd      	mov	sp, r7
 800449c:	bd80      	pop	{r7, pc}

0800449e <xTaskCreate>:
                            const char * const pcName,
                            const configSTACK_DEPTH_TYPE uxStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 800449e:	b580      	push	{r7, lr}
 80044a0:	b088      	sub	sp, #32
 80044a2:	af02      	add	r7, sp, #8
 80044a4:	60f8      	str	r0, [r7, #12]
 80044a6:	60b9      	str	r1, [r7, #8]
 80044a8:	607a      	str	r2, [r7, #4]
 80044aa:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        BaseType_t xReturn;

        traceENTER_xTaskCreate( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );

        pxNewTCB = prvCreateTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );
 80044ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044ae:	9301      	str	r3, [sp, #4]
 80044b0:	6a3b      	ldr	r3, [r7, #32]
 80044b2:	9300      	str	r3, [sp, #0]
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	687a      	ldr	r2, [r7, #4]
 80044b8:	68b9      	ldr	r1, [r7, #8]
 80044ba:	68f8      	ldr	r0, [r7, #12]
 80044bc:	f7ff ffb3 	bl	8004426 <prvCreateTask>
 80044c0:	6138      	str	r0, [r7, #16]

        if( pxNewTCB != NULL )
 80044c2:	693b      	ldr	r3, [r7, #16]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d005      	beq.n	80044d4 <xTaskCreate+0x36>
                /* Set the task's affinity before scheduling it. */
                pxNewTCB->uxCoreAffinityMask = configTASK_DEFAULT_CORE_AFFINITY;
            }
            #endif

            prvAddNewTaskToReadyList( pxNewTCB );
 80044c8:	6938      	ldr	r0, [r7, #16]
 80044ca:	f000 f873 	bl	80045b4 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80044ce:	2301      	movs	r3, #1
 80044d0:	617b      	str	r3, [r7, #20]
 80044d2:	e002      	b.n	80044da <xTaskCreate+0x3c>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80044d4:	f04f 33ff 	mov.w	r3, #4294967295
 80044d8:	617b      	str	r3, [r7, #20]
        }

        traceRETURN_xTaskCreate( xReturn );

        return xReturn;
 80044da:	697b      	ldr	r3, [r7, #20]
    }
 80044dc:	4618      	mov	r0, r3
 80044de:	3718      	adds	r7, #24
 80044e0:	46bd      	mov	sp, r7
 80044e2:	bd80      	pop	{r7, pc}

080044e4 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b086      	sub	sp, #24
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	60f8      	str	r0, [r7, #12]
 80044ec:	60b9      	str	r1, [r7, #8]
 80044ee:	607a      	str	r2, [r7, #4]
 80044f0:	603b      	str	r3, [r7, #0]
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 ] );
 80044f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044f4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80044fc:	3b01      	subs	r3, #1
 80044fe:	009b      	lsls	r3, r3, #2
 8004500:	4413      	add	r3, r2
 8004502:	613b      	str	r3, [r7, #16]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 8004504:	693b      	ldr	r3, [r7, #16]
 8004506:	f023 0307 	bic.w	r3, r3, #7
 800450a:	613b      	str	r3, [r7, #16]
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 800450c:	68bb      	ldr	r3, [r7, #8]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d01e      	beq.n	8004550 <prvInitialiseNewTask+0x6c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004512:	2300      	movs	r3, #0
 8004514:	617b      	str	r3, [r7, #20]
 8004516:	e012      	b.n	800453e <prvInitialiseNewTask+0x5a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004518:	68ba      	ldr	r2, [r7, #8]
 800451a:	697b      	ldr	r3, [r7, #20]
 800451c:	4413      	add	r3, r2
 800451e:	7819      	ldrb	r1, [r3, #0]
 8004520:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004522:	697b      	ldr	r3, [r7, #20]
 8004524:	4413      	add	r3, r2
 8004526:	3334      	adds	r3, #52	@ 0x34
 8004528:	460a      	mov	r2, r1
 800452a:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800452c:	68ba      	ldr	r2, [r7, #8]
 800452e:	697b      	ldr	r3, [r7, #20]
 8004530:	4413      	add	r3, r2
 8004532:	781b      	ldrb	r3, [r3, #0]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d006      	beq.n	8004546 <prvInitialiseNewTask+0x62>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004538:	697b      	ldr	r3, [r7, #20]
 800453a:	3301      	adds	r3, #1
 800453c:	617b      	str	r3, [r7, #20]
 800453e:	697b      	ldr	r3, [r7, #20]
 8004540:	2b0f      	cmp	r3, #15
 8004542:	d9e9      	bls.n	8004518 <prvInitialiseNewTask+0x34>
 8004544:	e000      	b.n	8004548 <prvInitialiseNewTask+0x64>
            {
                break;
 8004546:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1U ] = '\0';
 8004548:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800454a:	2200      	movs	r2, #0
 800454c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004550:	6a3b      	ldr	r3, [r7, #32]
 8004552:	2b04      	cmp	r3, #4
 8004554:	d901      	bls.n	800455a <prvInitialiseNewTask+0x76>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004556:	2304      	movs	r3, #4
 8004558:	623b      	str	r3, [r7, #32]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800455a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800455c:	6a3a      	ldr	r2, [r7, #32]
 800455e:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8004560:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004562:	6a3a      	ldr	r2, [r7, #32]
 8004564:	645a      	str	r2, [r3, #68]	@ 0x44
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004566:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004568:	3304      	adds	r3, #4
 800456a:	4618      	mov	r0, r3
 800456c:	f7ff fb85 	bl	8003c7a <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004570:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004572:	3318      	adds	r3, #24
 8004574:	4618      	mov	r0, r3
 8004576:	f7ff fb80 	bl	8003c7a <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800457a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800457c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800457e:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority );
 8004580:	6a3b      	ldr	r3, [r7, #32]
 8004582:	f1c3 0205 	rsb	r2, r3, #5
 8004586:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004588:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800458a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800458c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800458e:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004590:	683a      	ldr	r2, [r7, #0]
 8004592:	68f9      	ldr	r1, [r7, #12]
 8004594:	6938      	ldr	r0, [r7, #16]
 8004596:	f7ff f87f 	bl	8003698 <pxPortInitialiseStack>
 800459a:	4602      	mov	r2, r0
 800459c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800459e:	601a      	str	r2, [r3, #0]
            pxNewTCB->uxTaskAttributes |= taskATTRIBUTE_IS_IDLE;
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES > 1 ) */

    if( pxCreatedTask != NULL )
 80045a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d002      	beq.n	80045ac <prvInitialiseNewTask+0xc8>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80045a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045a8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80045aa:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80045ac:	bf00      	nop
 80045ae:	3718      	adds	r7, #24
 80045b0:	46bd      	mov	sp, r7
 80045b2:	bd80      	pop	{r7, pc}

080045b4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )

    static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
    {
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b084      	sub	sp, #16
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
        /* Ensure interrupts don't access the task lists while the lists are being
         * updated. */
        taskENTER_CRITICAL();
 80045bc:	f7ff f90c 	bl	80037d8 <vPortEnterCritical>
        {
            uxCurrentNumberOfTasks = ( UBaseType_t ) ( uxCurrentNumberOfTasks + 1U );
 80045c0:	4b3f      	ldr	r3, [pc, #252]	@ (80046c0 <prvAddNewTaskToReadyList+0x10c>)
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	3301      	adds	r3, #1
 80045c6:	4a3e      	ldr	r2, [pc, #248]	@ (80046c0 <prvAddNewTaskToReadyList+0x10c>)
 80045c8:	6013      	str	r3, [r2, #0]

            if( pxCurrentTCB == NULL )
 80045ca:	4b3e      	ldr	r3, [pc, #248]	@ (80046c4 <prvAddNewTaskToReadyList+0x110>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d109      	bne.n	80045e6 <prvAddNewTaskToReadyList+0x32>
            {
                /* There are no other tasks, or all the other tasks are in
                 * the suspended state - make this the current task. */
                pxCurrentTCB = pxNewTCB;
 80045d2:	4a3c      	ldr	r2, [pc, #240]	@ (80046c4 <prvAddNewTaskToReadyList+0x110>)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6013      	str	r3, [r2, #0]

                if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80045d8:	4b39      	ldr	r3, [pc, #228]	@ (80046c0 <prvAddNewTaskToReadyList+0x10c>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	2b01      	cmp	r3, #1
 80045de:	d110      	bne.n	8004602 <prvAddNewTaskToReadyList+0x4e>
                {
                    /* This is the first task to be created so do the preliminary
                     * initialisation required.  We will not recover if this call
                     * fails, but we will report the failure. */
                    prvInitialiseTaskLists();
 80045e0:	f000 fd60 	bl	80050a4 <prvInitialiseTaskLists>
 80045e4:	e00d      	b.n	8004602 <prvAddNewTaskToReadyList+0x4e>
            else
            {
                /* If the scheduler is not already running, make this task the
                 * current task if it is the highest priority task to be created
                 * so far. */
                if( xSchedulerRunning == pdFALSE )
 80045e6:	4b38      	ldr	r3, [pc, #224]	@ (80046c8 <prvAddNewTaskToReadyList+0x114>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d109      	bne.n	8004602 <prvAddNewTaskToReadyList+0x4e>
                {
                    if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80045ee:	4b35      	ldr	r3, [pc, #212]	@ (80046c4 <prvAddNewTaskToReadyList+0x110>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045f8:	429a      	cmp	r2, r3
 80045fa:	d802      	bhi.n	8004602 <prvAddNewTaskToReadyList+0x4e>
                    {
                        pxCurrentTCB = pxNewTCB;
 80045fc:	4a31      	ldr	r2, [pc, #196]	@ (80046c4 <prvAddNewTaskToReadyList+0x110>)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6013      	str	r3, [r2, #0]
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            uxTaskNumber++;
 8004602:	4b32      	ldr	r3, [pc, #200]	@ (80046cc <prvAddNewTaskToReadyList+0x118>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	3301      	adds	r3, #1
 8004608:	4a30      	ldr	r2, [pc, #192]	@ (80046cc <prvAddNewTaskToReadyList+0x118>)
 800460a:	6013      	str	r3, [r2, #0]
                pxNewTCB->uxTCBNumber = uxTaskNumber;
            }
            #endif /* configUSE_TRACE_FACILITY */
            traceTASK_CREATE( pxNewTCB );

            prvAddTaskToReadyList( pxNewTCB );
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004610:	2201      	movs	r2, #1
 8004612:	409a      	lsls	r2, r3
 8004614:	4b2e      	ldr	r3, [pc, #184]	@ (80046d0 <prvAddNewTaskToReadyList+0x11c>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4313      	orrs	r3, r2
 800461a:	4a2d      	ldr	r2, [pc, #180]	@ (80046d0 <prvAddNewTaskToReadyList+0x11c>)
 800461c:	6013      	str	r3, [r2, #0]
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004622:	492c      	ldr	r1, [pc, #176]	@ (80046d4 <prvAddNewTaskToReadyList+0x120>)
 8004624:	4613      	mov	r3, r2
 8004626:	009b      	lsls	r3, r3, #2
 8004628:	4413      	add	r3, r2
 800462a:	009b      	lsls	r3, r3, #2
 800462c:	440b      	add	r3, r1
 800462e:	3304      	adds	r3, #4
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	60fb      	str	r3, [r7, #12]
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	68fa      	ldr	r2, [r7, #12]
 8004638:	609a      	str	r2, [r3, #8]
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	689a      	ldr	r2, [r3, #8]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	60da      	str	r2, [r3, #12]
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	689b      	ldr	r3, [r3, #8]
 8004646:	687a      	ldr	r2, [r7, #4]
 8004648:	3204      	adds	r2, #4
 800464a:	605a      	str	r2, [r3, #4]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	1d1a      	adds	r2, r3, #4
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	609a      	str	r2, [r3, #8]
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004658:	4613      	mov	r3, r2
 800465a:	009b      	lsls	r3, r3, #2
 800465c:	4413      	add	r3, r2
 800465e:	009b      	lsls	r3, r3, #2
 8004660:	4a1c      	ldr	r2, [pc, #112]	@ (80046d4 <prvAddNewTaskToReadyList+0x120>)
 8004662:	441a      	add	r2, r3
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	615a      	str	r2, [r3, #20]
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800466c:	4919      	ldr	r1, [pc, #100]	@ (80046d4 <prvAddNewTaskToReadyList+0x120>)
 800466e:	4613      	mov	r3, r2
 8004670:	009b      	lsls	r3, r3, #2
 8004672:	4413      	add	r3, r2
 8004674:	009b      	lsls	r3, r3, #2
 8004676:	440b      	add	r3, r1
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	687a      	ldr	r2, [r7, #4]
 800467c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800467e:	1c59      	adds	r1, r3, #1
 8004680:	4814      	ldr	r0, [pc, #80]	@ (80046d4 <prvAddNewTaskToReadyList+0x120>)
 8004682:	4613      	mov	r3, r2
 8004684:	009b      	lsls	r3, r3, #2
 8004686:	4413      	add	r3, r2
 8004688:	009b      	lsls	r3, r3, #2
 800468a:	4403      	add	r3, r0
 800468c:	6019      	str	r1, [r3, #0]

            portSETUP_TCB( pxNewTCB );
        }
        taskEXIT_CRITICAL();
 800468e:	f7ff f8bd 	bl	800380c <vPortExitCritical>

        if( xSchedulerRunning != pdFALSE )
 8004692:	4b0d      	ldr	r3, [pc, #52]	@ (80046c8 <prvAddNewTaskToReadyList+0x114>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d00e      	beq.n	80046b8 <prvAddNewTaskToReadyList+0x104>
        {
            /* If the created task is of a higher priority than the current task
             * then it should run now. */
            taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxNewTCB );
 800469a:	4b0a      	ldr	r3, [pc, #40]	@ (80046c4 <prvAddNewTaskToReadyList+0x110>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046a4:	429a      	cmp	r2, r3
 80046a6:	d207      	bcs.n	80046b8 <prvAddNewTaskToReadyList+0x104>
 80046a8:	4b0b      	ldr	r3, [pc, #44]	@ (80046d8 <prvAddNewTaskToReadyList+0x124>)
 80046aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80046ae:	601a      	str	r2, [r3, #0]
 80046b0:	f3bf 8f4f 	dsb	sy
 80046b4:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 80046b8:	bf00      	nop
 80046ba:	3710      	adds	r7, #16
 80046bc:	46bd      	mov	sp, r7
 80046be:	bd80      	pop	{r7, pc}
 80046c0:	20002fec 	.word	0x20002fec
 80046c4:	20002f14 	.word	0x20002f14
 80046c8:	20002ff8 	.word	0x20002ff8
 80046cc:	20003008 	.word	0x20003008
 80046d0:	20002ff4 	.word	0x20002ff4
 80046d4:	20002f18 	.word	0x20002f18
 80046d8:	e000ed04 	.word	0xe000ed04

080046dc <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    void vTaskDelete( TaskHandle_t xTaskToDelete )
    {
 80046dc:	b580      	push	{r7, lr}
 80046de:	b086      	sub	sp, #24
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;
        BaseType_t xDeleteTCBInIdleTask = pdFALSE;
 80046e4:	2300      	movs	r3, #0
 80046e6:	617b      	str	r3, [r7, #20]
        BaseType_t xTaskIsRunningOrYielding;

        traceENTER_vTaskDelete( xTaskToDelete );

        taskENTER_CRITICAL();
 80046e8:	f7ff f876 	bl	80037d8 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the calling task that is
             * being deleted. */
            pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d102      	bne.n	80046f8 <vTaskDelete+0x1c>
 80046f2:	4b39      	ldr	r3, [pc, #228]	@ (80047d8 <vTaskDelete+0xfc>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	e000      	b.n	80046fa <vTaskDelete+0x1e>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	613b      	str	r3, [r7, #16]

            /* Remove task from the ready/delayed list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80046fc:	693b      	ldr	r3, [r7, #16]
 80046fe:	3304      	adds	r3, #4
 8004700:	4618      	mov	r0, r3
 8004702:	f7ff fb21 	bl	8003d48 <uxListRemove>
 8004706:	4603      	mov	r3, r0
 8004708:	2b00      	cmp	r3, #0
 800470a:	d115      	bne.n	8004738 <vTaskDelete+0x5c>
            {
                taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800470c:	693b      	ldr	r3, [r7, #16]
 800470e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004710:	4932      	ldr	r1, [pc, #200]	@ (80047dc <vTaskDelete+0x100>)
 8004712:	4613      	mov	r3, r2
 8004714:	009b      	lsls	r3, r3, #2
 8004716:	4413      	add	r3, r2
 8004718:	009b      	lsls	r3, r3, #2
 800471a:	440b      	add	r3, r1
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d10a      	bne.n	8004738 <vTaskDelete+0x5c>
 8004722:	693b      	ldr	r3, [r7, #16]
 8004724:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004726:	2201      	movs	r2, #1
 8004728:	fa02 f303 	lsl.w	r3, r2, r3
 800472c:	43da      	mvns	r2, r3
 800472e:	4b2c      	ldr	r3, [pc, #176]	@ (80047e0 <vTaskDelete+0x104>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4013      	ands	r3, r2
 8004734:	4a2a      	ldr	r2, [pc, #168]	@ (80047e0 <vTaskDelete+0x104>)
 8004736:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004738:	693b      	ldr	r3, [r7, #16]
 800473a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800473c:	2b00      	cmp	r3, #0
 800473e:	d004      	beq.n	800474a <vTaskDelete+0x6e>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004740:	693b      	ldr	r3, [r7, #16]
 8004742:	3318      	adds	r3, #24
 8004744:	4618      	mov	r0, r3
 8004746:	f7ff faff 	bl	8003d48 <uxListRemove>

            /* Increment the uxTaskNumber also so kernel aware debuggers can
             * detect that the task lists need re-generating.  This is done before
             * portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
             * not return. */
            uxTaskNumber++;
 800474a:	4b26      	ldr	r3, [pc, #152]	@ (80047e4 <vTaskDelete+0x108>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	3301      	adds	r3, #1
 8004750:	4a24      	ldr	r2, [pc, #144]	@ (80047e4 <vTaskDelete+0x108>)
 8004752:	6013      	str	r3, [r2, #0]

            /* Use temp variable as distinct sequence points for reading volatile
             * variables prior to a logical operator to ensure compliance with
             * MISRA C 2012 Rule 13.5. */
            xTaskIsRunningOrYielding = taskTASK_IS_RUNNING_OR_SCHEDULED_TO_YIELD( pxTCB );
 8004754:	4b20      	ldr	r3, [pc, #128]	@ (80047d8 <vTaskDelete+0xfc>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	693a      	ldr	r2, [r7, #16]
 800475a:	429a      	cmp	r2, r3
 800475c:	d101      	bne.n	8004762 <vTaskDelete+0x86>
 800475e:	2301      	movs	r3, #1
 8004760:	e000      	b.n	8004764 <vTaskDelete+0x88>
 8004762:	2300      	movs	r3, #0
 8004764:	60fb      	str	r3, [r7, #12]

            /* If the task is running (or yielding), we must add it to the
             * termination list so that an idle task can delete it when it is
             * no longer running. */
            if( ( xSchedulerRunning != pdFALSE ) && ( xTaskIsRunningOrYielding != pdFALSE ) )
 8004766:	4b20      	ldr	r3, [pc, #128]	@ (80047e8 <vTaskDelete+0x10c>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d010      	beq.n	8004790 <vTaskDelete+0xb4>
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d00d      	beq.n	8004790 <vTaskDelete+0xb4>
                 * deleted. This cannot complete when the task is still running
                 * on a core, as a context switch to another task is required.
                 * Place the task in the termination list. The idle task will check
                 * the termination list and free up any memory allocated by the
                 * scheduler for the TCB and stack of the deleted task. */
                vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8004774:	693b      	ldr	r3, [r7, #16]
 8004776:	3304      	adds	r3, #4
 8004778:	4619      	mov	r1, r3
 800477a:	481c      	ldr	r0, [pc, #112]	@ (80047ec <vTaskDelete+0x110>)
 800477c:	f7ff fa89 	bl	8003c92 <vListInsertEnd>

                /* Increment the ucTasksDeleted variable so the idle task knows
                 * there is a task that has been deleted and that it should therefore
                 * check the xTasksWaitingTermination list. */
                ++uxDeletedTasksWaitingCleanUp;
 8004780:	4b1b      	ldr	r3, [pc, #108]	@ (80047f0 <vTaskDelete+0x114>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	3301      	adds	r3, #1
 8004786:	4a1a      	ldr	r2, [pc, #104]	@ (80047f0 <vTaskDelete+0x114>)
 8004788:	6013      	str	r3, [r2, #0]
                /* Call the delete hook before portPRE_TASK_DELETE_HOOK() as
                 * portPRE_TASK_DELETE_HOOK() does not return in the Win32 port. */
                traceTASK_DELETE( pxTCB );

                /* Delete the task TCB in idle task. */
                xDeleteTCBInIdleTask = pdTRUE;
 800478a:	2301      	movs	r3, #1
 800478c:	617b      	str	r3, [r7, #20]
 800478e:	e006      	b.n	800479e <vTaskDelete+0xc2>
                }
                #endif /* #if ( configNUMBER_OF_CORES > 1 ) */
            }
            else
            {
                --uxCurrentNumberOfTasks;
 8004790:	4b18      	ldr	r3, [pc, #96]	@ (80047f4 <vTaskDelete+0x118>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	3b01      	subs	r3, #1
 8004796:	4a17      	ldr	r2, [pc, #92]	@ (80047f4 <vTaskDelete+0x118>)
 8004798:	6013      	str	r3, [r2, #0]
                traceTASK_DELETE( pxTCB );

                /* Reset the next expected unblock time in case it referred to
                 * the task that has just been deleted. */
                prvResetNextTaskUnblockTime();
 800479a:	f000 fd01 	bl	80051a0 <prvResetNextTaskUnblockTime>
            }
        }
        taskEXIT_CRITICAL();
 800479e:	f7ff f835 	bl	800380c <vPortExitCritical>

        /* If the task is not deleting itself, call prvDeleteTCB from outside of
         * critical section. If a task deletes itself, prvDeleteTCB is called
         * from prvCheckTasksWaitingTermination which is called from Idle task. */
        if( xDeleteTCBInIdleTask != pdTRUE )
 80047a2:	697b      	ldr	r3, [r7, #20]
 80047a4:	2b01      	cmp	r3, #1
 80047a6:	d002      	beq.n	80047ae <vTaskDelete+0xd2>
        {
            prvDeleteTCB( pxTCB );
 80047a8:	6938      	ldr	r0, [r7, #16]
 80047aa:	f000 fce9 	bl	8005180 <prvDeleteTCB>

        /* Force a reschedule if it is the currently running task that has just
         * been deleted. */
        #if ( configNUMBER_OF_CORES == 1 )
        {
            if( xSchedulerRunning != pdFALSE )
 80047ae:	4b0e      	ldr	r3, [pc, #56]	@ (80047e8 <vTaskDelete+0x10c>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d00c      	beq.n	80047d0 <vTaskDelete+0xf4>
            {
                if( pxTCB == pxCurrentTCB )
 80047b6:	4b08      	ldr	r3, [pc, #32]	@ (80047d8 <vTaskDelete+0xfc>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	693a      	ldr	r2, [r7, #16]
 80047bc:	429a      	cmp	r2, r3
 80047be:	d107      	bne.n	80047d0 <vTaskDelete+0xf4>
                {
                    configASSERT( uxSchedulerSuspended == 0 );
                    taskYIELD_WITHIN_API();
 80047c0:	4b0d      	ldr	r3, [pc, #52]	@ (80047f8 <vTaskDelete+0x11c>)
 80047c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80047c6:	601a      	str	r2, [r3, #0]
 80047c8:	f3bf 8f4f 	dsb	sy
 80047cc:	f3bf 8f6f 	isb	sy
            }
        }
        #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

        traceRETURN_vTaskDelete();
    }
 80047d0:	bf00      	nop
 80047d2:	3718      	adds	r7, #24
 80047d4:	46bd      	mov	sp, r7
 80047d6:	bd80      	pop	{r7, pc}
 80047d8:	20002f14 	.word	0x20002f14
 80047dc:	20002f18 	.word	0x20002f18
 80047e0:	20002ff4 	.word	0x20002ff4
 80047e4:	20003008 	.word	0x20003008
 80047e8:	20002ff8 	.word	0x20002ff8
 80047ec:	20002fc0 	.word	0x20002fc0
 80047f0:	20002fd4 	.word	0x20002fd4
 80047f4:	20002fec 	.word	0x20002fec
 80047f8:	e000ed04 	.word	0xe000ed04

080047fc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b084      	sub	sp, #16
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8004804:	2300      	movs	r3, #0
 8004806:	60fb      	str	r3, [r7, #12]

        traceENTER_vTaskDelay( xTicksToDelay );

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d008      	beq.n	8004820 <vTaskDelay+0x24>
        {
            vTaskSuspendAll();
 800480e:	f000 f891 	bl	8004934 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004812:	2100      	movs	r1, #0
 8004814:	6878      	ldr	r0, [r7, #4]
 8004816:	f000 fecd 	bl	80055b4 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 800481a:	f000 f899 	bl	8004950 <xTaskResumeAll>
 800481e:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d107      	bne.n	8004836 <vTaskDelay+0x3a>
        {
            taskYIELD_WITHIN_API();
 8004826:	4b06      	ldr	r3, [pc, #24]	@ (8004840 <vTaskDelay+0x44>)
 8004828:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800482c:	601a      	str	r2, [r3, #0]
 800482e:	f3bf 8f4f 	dsb	sy
 8004832:	f3bf 8f6f 	isb	sy
        {
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_vTaskDelay();
    }
 8004836:	bf00      	nop
 8004838:	3710      	adds	r7, #16
 800483a:	46bd      	mov	sp, r7
 800483c:	bd80      	pop	{r7, pc}
 800483e:	bf00      	nop
 8004840:	e000ed04 	.word	0xe000ed04

08004844 <prvCreateIdleTasks>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

static BaseType_t prvCreateIdleTasks( void )
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b08a      	sub	sp, #40	@ 0x28
 8004848:	af02      	add	r7, sp, #8
    BaseType_t xReturn = pdPASS;
 800484a:	2301      	movs	r3, #1
 800484c:	61fb      	str	r3, [r7, #28]
    BaseType_t xCoreID;
    char cIdleName[ configMAX_TASK_NAME_LEN ];
    TaskFunction_t pxIdleTaskFunction = NULL;
 800484e:	2300      	movs	r3, #0
 8004850:	613b      	str	r3, [r7, #16]
    BaseType_t xIdleTaskNameIndex;

    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 8004852:	2300      	movs	r3, #0
 8004854:	617b      	str	r3, [r7, #20]
 8004856:	e011      	b.n	800487c <prvCreateIdleTasks+0x38>
    {
        cIdleName[ xIdleTaskNameIndex ] = configIDLE_TASK_NAME[ xIdleTaskNameIndex ];
 8004858:	4a1c      	ldr	r2, [pc, #112]	@ (80048cc <prvCreateIdleTasks+0x88>)
 800485a:	697b      	ldr	r3, [r7, #20]
 800485c:	4413      	add	r3, r2
 800485e:	7819      	ldrb	r1, [r3, #0]
 8004860:	463a      	mov	r2, r7
 8004862:	697b      	ldr	r3, [r7, #20]
 8004864:	4413      	add	r3, r2
 8004866:	460a      	mov	r2, r1
 8004868:	701a      	strb	r2, [r3, #0]

        /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
         * configMAX_TASK_NAME_LEN characters just in case the memory after the
         * string is not accessible (extremely unlikely). */
        if( cIdleName[ xIdleTaskNameIndex ] == ( char ) 0x00 )
 800486a:	463a      	mov	r2, r7
 800486c:	697b      	ldr	r3, [r7, #20]
 800486e:	4413      	add	r3, r2
 8004870:	781b      	ldrb	r3, [r3, #0]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d006      	beq.n	8004884 <prvCreateIdleTasks+0x40>
    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 8004876:	697b      	ldr	r3, [r7, #20]
 8004878:	3301      	adds	r3, #1
 800487a:	617b      	str	r3, [r7, #20]
 800487c:	697b      	ldr	r3, [r7, #20]
 800487e:	2b0f      	cmp	r3, #15
 8004880:	ddea      	ble.n	8004858 <prvCreateIdleTasks+0x14>
 8004882:	e000      	b.n	8004886 <prvCreateIdleTasks+0x42>
        {
            break;
 8004884:	bf00      	nop
            mtCOVERAGE_TEST_MARKER();
        }
    }

    /* Add each idle task at the lowest priority. */
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 8004886:	2300      	movs	r3, #0
 8004888:	61bb      	str	r3, [r7, #24]
 800488a:	e015      	b.n	80048b8 <prvCreateIdleTasks+0x74>
    {
        #if ( configNUMBER_OF_CORES == 1 )
        {
            pxIdleTaskFunction = prvIdleTask;
 800488c:	4b10      	ldr	r3, [pc, #64]	@ (80048d0 <prvCreateIdleTasks+0x8c>)
 800488e:	613b      	str	r3, [r7, #16]
            }
        }
        #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( pxIdleTaskFunction,
 8004890:	69bb      	ldr	r3, [r7, #24]
 8004892:	009b      	lsls	r3, r3, #2
 8004894:	4a0f      	ldr	r2, [pc, #60]	@ (80048d4 <prvCreateIdleTasks+0x90>)
 8004896:	4413      	add	r3, r2
 8004898:	4639      	mov	r1, r7
 800489a:	9301      	str	r3, [sp, #4]
 800489c:	2300      	movs	r3, #0
 800489e:	9300      	str	r3, [sp, #0]
 80048a0:	2300      	movs	r3, #0
 80048a2:	2280      	movs	r2, #128	@ 0x80
 80048a4:	6938      	ldr	r0, [r7, #16]
 80048a6:	f7ff fdfa 	bl	800449e <xTaskCreate>
 80048aa:	61f8      	str	r0, [r7, #28]
                                   &xIdleTaskHandles[ xCoreID ] );
        }
        #endif /* configSUPPORT_STATIC_ALLOCATION */

        /* Break the loop if any of the idle task is failed to be created. */
        if( xReturn == pdFAIL )
 80048ac:	69fb      	ldr	r3, [r7, #28]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d006      	beq.n	80048c0 <prvCreateIdleTasks+0x7c>
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 80048b2:	69bb      	ldr	r3, [r7, #24]
 80048b4:	3301      	adds	r3, #1
 80048b6:	61bb      	str	r3, [r7, #24]
 80048b8:	69bb      	ldr	r3, [r7, #24]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	dde6      	ble.n	800488c <prvCreateIdleTasks+0x48>
 80048be:	e000      	b.n	80048c2 <prvCreateIdleTasks+0x7e>
        {
            break;
 80048c0:	bf00      	nop
            }
            #endif
        }
    }

    return xReturn;
 80048c2:	69fb      	ldr	r3, [r7, #28]
}
 80048c4:	4618      	mov	r0, r3
 80048c6:	3720      	adds	r7, #32
 80048c8:	46bd      	mov	sp, r7
 80048ca:	bd80      	pop	{r7, pc}
 80048cc:	08009e78 	.word	0x08009e78
 80048d0:	08005075 	.word	0x08005075
 80048d4:	20003010 	.word	0x20003010

080048d8 <vTaskStartScheduler>:

/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b082      	sub	sp, #8
 80048dc:	af00      	add	r7, sp, #0
         * the number of bits as confNUMBER_OF_CORES. */
        configASSERT( ( sizeof( UBaseType_t ) * taskBITS_PER_BYTE ) >= configNUMBER_OF_CORES );
    }
    #endif /* #if ( configUSE_CORE_AFFINITY == 1 ) && ( configNUMBER_OF_CORES > 1 ) */

    xReturn = prvCreateIdleTasks();
 80048de:	f7ff ffb1 	bl	8004844 <prvCreateIdleTasks>
 80048e2:	6078      	str	r0, [r7, #4]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2b01      	cmp	r3, #1
 80048e8:	d115      	bne.n	8004916 <vTaskStartScheduler+0x3e>
    __asm volatile
 80048ea:	f04f 03bf 	mov.w	r3, #191	@ 0xbf
 80048ee:	f383 8811 	msr	BASEPRI, r3
 80048f2:	f3bf 8f6f 	isb	sy
 80048f6:	f3bf 8f4f 	dsb	sy
 80048fa:	603b      	str	r3, [r7, #0]
}
 80048fc:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 80048fe:	4b09      	ldr	r3, [pc, #36]	@ (8004924 <vTaskStartScheduler+0x4c>)
 8004900:	f04f 32ff 	mov.w	r2, #4294967295
 8004904:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8004906:	4b08      	ldr	r3, [pc, #32]	@ (8004928 <vTaskStartScheduler+0x50>)
 8004908:	2201      	movs	r2, #1
 800490a:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800490c:	4b07      	ldr	r3, [pc, #28]	@ (800492c <vTaskStartScheduler+0x54>)
 800490e:	2200      	movs	r2, #0
 8004910:	601a      	str	r2, [r3, #0]
        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */

        /* The return value for xPortStartScheduler is not required
         * hence using a void datatype. */
        ( void ) xPortStartScheduler();
 8004912:	f7fe ff33 	bl	800377c <xPortStartScheduler>
     * meaning xIdleTaskHandles are not used anywhere else. */
    ( void ) xIdleTaskHandles;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8004916:	4b06      	ldr	r3, [pc, #24]	@ (8004930 <vTaskStartScheduler+0x58>)
 8004918:	681b      	ldr	r3, [r3, #0]

    traceRETURN_vTaskStartScheduler();
}
 800491a:	bf00      	nop
 800491c:	3708      	adds	r7, #8
 800491e:	46bd      	mov	sp, r7
 8004920:	bd80      	pop	{r7, pc}
 8004922:	bf00      	nop
 8004924:	2000300c 	.word	0x2000300c
 8004928:	20002ff8 	.word	0x20002ff8
 800492c:	20002ff0 	.word	0x20002ff0
 8004930:	20000410 	.word	0x20000410

08004934 <vTaskSuspendAll>:
    traceRETURN_vTaskEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004934:	b480      	push	{r7}
 8004936:	af00      	add	r7, sp, #0
         * do not otherwise exhibit real time behaviour. */
        portSOFTWARE_BARRIER();

        /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
         * is used to allow calls to vTaskSuspendAll() to nest. */
        uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended + 1U );
 8004938:	4b04      	ldr	r3, [pc, #16]	@ (800494c <vTaskSuspendAll+0x18>)
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	3301      	adds	r3, #1
 800493e:	4a03      	ldr	r2, [pc, #12]	@ (800494c <vTaskSuspendAll+0x18>)
 8004940:	6013      	str	r3, [r2, #0]
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_vTaskSuspendAll();
}
 8004942:	bf00      	nop
 8004944:	46bd      	mov	sp, r7
 8004946:	bc80      	pop	{r7}
 8004948:	4770      	bx	lr
 800494a:	bf00      	nop
 800494c:	20003014 	.word	0x20003014

08004950 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b088      	sub	sp, #32
 8004954:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8004956:	2300      	movs	r3, #0
 8004958:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 800495a:	2300      	movs	r3, #0
 800495c:	61bb      	str	r3, [r7, #24]
        /* It is possible that an ISR caused a task to be removed from an event
         * list while the scheduler was suspended.  If this was the case then the
         * removed task will have been added to the xPendingReadyList.  Once the
         * scheduler has been resumed it is safe to move all the pending ready
         * tasks from this list into their appropriate ready list. */
        taskENTER_CRITICAL();
 800495e:	f7fe ff3b 	bl	80037d8 <vPortEnterCritical>
        {
            BaseType_t xCoreID;
            xCoreID = ( BaseType_t ) portGET_CORE_ID();
 8004962:	2300      	movs	r3, #0
 8004964:	613b      	str	r3, [r7, #16]

            /* If uxSchedulerSuspended is zero then this function does not match a
             * previous call to vTaskSuspendAll(). */
            configASSERT( uxSchedulerSuspended != 0U );

            uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended - 1U );
 8004966:	4b6d      	ldr	r3, [pc, #436]	@ (8004b1c <xTaskResumeAll+0x1cc>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	3b01      	subs	r3, #1
 800496c:	4a6b      	ldr	r2, [pc, #428]	@ (8004b1c <xTaskResumeAll+0x1cc>)
 800496e:	6013      	str	r3, [r2, #0]
            portRELEASE_TASK_LOCK();

            if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8004970:	4b6a      	ldr	r3, [pc, #424]	@ (8004b1c <xTaskResumeAll+0x1cc>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	2b00      	cmp	r3, #0
 8004976:	f040 80ca 	bne.w	8004b0e <xTaskResumeAll+0x1be>
            {
                if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800497a:	4b69      	ldr	r3, [pc, #420]	@ (8004b20 <xTaskResumeAll+0x1d0>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	2b00      	cmp	r3, #0
 8004980:	f000 80c5 	beq.w	8004b0e <xTaskResumeAll+0x1be>
                {
                    /* Move any readied tasks from the pending list into the
                     * appropriate ready list. */
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004984:	e08e      	b.n	8004aa4 <xTaskResumeAll+0x154>
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8004986:	4b67      	ldr	r3, [pc, #412]	@ (8004b24 <xTaskResumeAll+0x1d4>)
 8004988:	68db      	ldr	r3, [r3, #12]
 800498a:	68db      	ldr	r3, [r3, #12]
 800498c:	61fb      	str	r3, [r7, #28]
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800498e:	69fb      	ldr	r3, [r7, #28]
 8004990:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004992:	60fb      	str	r3, [r7, #12]
 8004994:	69fb      	ldr	r3, [r7, #28]
 8004996:	69db      	ldr	r3, [r3, #28]
 8004998:	69fa      	ldr	r2, [r7, #28]
 800499a:	6a12      	ldr	r2, [r2, #32]
 800499c:	609a      	str	r2, [r3, #8]
 800499e:	69fb      	ldr	r3, [r7, #28]
 80049a0:	6a1b      	ldr	r3, [r3, #32]
 80049a2:	69fa      	ldr	r2, [r7, #28]
 80049a4:	69d2      	ldr	r2, [r2, #28]
 80049a6:	605a      	str	r2, [r3, #4]
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	685a      	ldr	r2, [r3, #4]
 80049ac:	69fb      	ldr	r3, [r7, #28]
 80049ae:	3318      	adds	r3, #24
 80049b0:	429a      	cmp	r2, r3
 80049b2:	d103      	bne.n	80049bc <xTaskResumeAll+0x6c>
 80049b4:	69fb      	ldr	r3, [r7, #28]
 80049b6:	6a1a      	ldr	r2, [r3, #32]
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	605a      	str	r2, [r3, #4]
 80049bc:	69fb      	ldr	r3, [r7, #28]
 80049be:	2200      	movs	r2, #0
 80049c0:	629a      	str	r2, [r3, #40]	@ 0x28
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	1e5a      	subs	r2, r3, #1
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	601a      	str	r2, [r3, #0]
                        portMEMORY_BARRIER();
                        listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80049cc:	69fb      	ldr	r3, [r7, #28]
 80049ce:	695b      	ldr	r3, [r3, #20]
 80049d0:	60bb      	str	r3, [r7, #8]
 80049d2:	69fb      	ldr	r3, [r7, #28]
 80049d4:	689b      	ldr	r3, [r3, #8]
 80049d6:	69fa      	ldr	r2, [r7, #28]
 80049d8:	68d2      	ldr	r2, [r2, #12]
 80049da:	609a      	str	r2, [r3, #8]
 80049dc:	69fb      	ldr	r3, [r7, #28]
 80049de:	68db      	ldr	r3, [r3, #12]
 80049e0:	69fa      	ldr	r2, [r7, #28]
 80049e2:	6892      	ldr	r2, [r2, #8]
 80049e4:	605a      	str	r2, [r3, #4]
 80049e6:	68bb      	ldr	r3, [r7, #8]
 80049e8:	685a      	ldr	r2, [r3, #4]
 80049ea:	69fb      	ldr	r3, [r7, #28]
 80049ec:	3304      	adds	r3, #4
 80049ee:	429a      	cmp	r2, r3
 80049f0:	d103      	bne.n	80049fa <xTaskResumeAll+0xaa>
 80049f2:	69fb      	ldr	r3, [r7, #28]
 80049f4:	68da      	ldr	r2, [r3, #12]
 80049f6:	68bb      	ldr	r3, [r7, #8]
 80049f8:	605a      	str	r2, [r3, #4]
 80049fa:	69fb      	ldr	r3, [r7, #28]
 80049fc:	2200      	movs	r2, #0
 80049fe:	615a      	str	r2, [r3, #20]
 8004a00:	68bb      	ldr	r3, [r7, #8]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	1e5a      	subs	r2, r3, #1
 8004a06:	68bb      	ldr	r3, [r7, #8]
 8004a08:	601a      	str	r2, [r3, #0]
                        prvAddTaskToReadyList( pxTCB );
 8004a0a:	69fb      	ldr	r3, [r7, #28]
 8004a0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a0e:	2201      	movs	r2, #1
 8004a10:	409a      	lsls	r2, r3
 8004a12:	4b45      	ldr	r3, [pc, #276]	@ (8004b28 <xTaskResumeAll+0x1d8>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	4313      	orrs	r3, r2
 8004a18:	4a43      	ldr	r2, [pc, #268]	@ (8004b28 <xTaskResumeAll+0x1d8>)
 8004a1a:	6013      	str	r3, [r2, #0]
 8004a1c:	69fb      	ldr	r3, [r7, #28]
 8004a1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a20:	4942      	ldr	r1, [pc, #264]	@ (8004b2c <xTaskResumeAll+0x1dc>)
 8004a22:	4613      	mov	r3, r2
 8004a24:	009b      	lsls	r3, r3, #2
 8004a26:	4413      	add	r3, r2
 8004a28:	009b      	lsls	r3, r3, #2
 8004a2a:	440b      	add	r3, r1
 8004a2c:	3304      	adds	r3, #4
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	607b      	str	r3, [r7, #4]
 8004a32:	69fb      	ldr	r3, [r7, #28]
 8004a34:	687a      	ldr	r2, [r7, #4]
 8004a36:	609a      	str	r2, [r3, #8]
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	689a      	ldr	r2, [r3, #8]
 8004a3c:	69fb      	ldr	r3, [r7, #28]
 8004a3e:	60da      	str	r2, [r3, #12]
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	689b      	ldr	r3, [r3, #8]
 8004a44:	69fa      	ldr	r2, [r7, #28]
 8004a46:	3204      	adds	r2, #4
 8004a48:	605a      	str	r2, [r3, #4]
 8004a4a:	69fb      	ldr	r3, [r7, #28]
 8004a4c:	1d1a      	adds	r2, r3, #4
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	609a      	str	r2, [r3, #8]
 8004a52:	69fb      	ldr	r3, [r7, #28]
 8004a54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a56:	4613      	mov	r3, r2
 8004a58:	009b      	lsls	r3, r3, #2
 8004a5a:	4413      	add	r3, r2
 8004a5c:	009b      	lsls	r3, r3, #2
 8004a5e:	4a33      	ldr	r2, [pc, #204]	@ (8004b2c <xTaskResumeAll+0x1dc>)
 8004a60:	441a      	add	r2, r3
 8004a62:	69fb      	ldr	r3, [r7, #28]
 8004a64:	615a      	str	r2, [r3, #20]
 8004a66:	69fb      	ldr	r3, [r7, #28]
 8004a68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a6a:	4930      	ldr	r1, [pc, #192]	@ (8004b2c <xTaskResumeAll+0x1dc>)
 8004a6c:	4613      	mov	r3, r2
 8004a6e:	009b      	lsls	r3, r3, #2
 8004a70:	4413      	add	r3, r2
 8004a72:	009b      	lsls	r3, r3, #2
 8004a74:	440b      	add	r3, r1
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	69fa      	ldr	r2, [r7, #28]
 8004a7a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004a7c:	1c59      	adds	r1, r3, #1
 8004a7e:	482b      	ldr	r0, [pc, #172]	@ (8004b2c <xTaskResumeAll+0x1dc>)
 8004a80:	4613      	mov	r3, r2
 8004a82:	009b      	lsls	r3, r3, #2
 8004a84:	4413      	add	r3, r2
 8004a86:	009b      	lsls	r3, r3, #2
 8004a88:	4403      	add	r3, r0
 8004a8a:	6019      	str	r1, [r3, #0]

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            /* If the moved task has a priority higher than the current
                             * task then a yield must be performed. */
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004a8c:	69fb      	ldr	r3, [r7, #28]
 8004a8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a90:	4b27      	ldr	r3, [pc, #156]	@ (8004b30 <xTaskResumeAll+0x1e0>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a96:	429a      	cmp	r2, r3
 8004a98:	d904      	bls.n	8004aa4 <xTaskResumeAll+0x154>
                            {
                                xYieldPendings[ xCoreID ] = pdTRUE;
 8004a9a:	4a26      	ldr	r2, [pc, #152]	@ (8004b34 <xTaskResumeAll+0x1e4>)
 8004a9c:	693b      	ldr	r3, [r7, #16]
 8004a9e:	2101      	movs	r1, #1
 8004aa0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004aa4:	4b1f      	ldr	r3, [pc, #124]	@ (8004b24 <xTaskResumeAll+0x1d4>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	f47f af6c 	bne.w	8004986 <xTaskResumeAll+0x36>
                             * which sets xYieldPendings for the current core to pdTRUE. */
                        }
                        #endif /* #if ( configNUMBER_OF_CORES == 1 ) */
                    }

                    if( pxTCB != NULL )
 8004aae:	69fb      	ldr	r3, [r7, #28]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d001      	beq.n	8004ab8 <xTaskResumeAll+0x168>
                         * which may have prevented the next unblock time from being
                         * re-calculated, in which case re-calculate it now.  Mainly
                         * important for low power tickless implementations, where
                         * this can prevent an unnecessary exit from low power
                         * state. */
                        prvResetNextTaskUnblockTime();
 8004ab4:	f000 fb74 	bl	80051a0 <prvResetNextTaskUnblockTime>
                     * It should be safe to call xTaskIncrementTick here from any core
                     * since we are in a critical section and xTaskIncrementTick itself
                     * protects itself within a critical section. Suspending the scheduler
                     * from any core causes xTaskIncrementTick to increment uxPendedCounts. */
                    {
                        TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004ab8:	4b1f      	ldr	r3, [pc, #124]	@ (8004b38 <xTaskResumeAll+0x1e8>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	617b      	str	r3, [r7, #20]

                        if( xPendedCounts > ( TickType_t ) 0U )
 8004abe:	697b      	ldr	r3, [r7, #20]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d012      	beq.n	8004aea <xTaskResumeAll+0x19a>
                        {
                            do
                            {
                                if( xTaskIncrementTick() != pdFALSE )
 8004ac4:	f000 f83c 	bl	8004b40 <xTaskIncrementTick>
 8004ac8:	4603      	mov	r3, r0
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d004      	beq.n	8004ad8 <xTaskResumeAll+0x188>
                                {
                                    /* Other cores are interrupted from
                                     * within xTaskIncrementTick(). */
                                    xYieldPendings[ xCoreID ] = pdTRUE;
 8004ace:	4a19      	ldr	r2, [pc, #100]	@ (8004b34 <xTaskResumeAll+0x1e4>)
 8004ad0:	693b      	ldr	r3, [r7, #16]
 8004ad2:	2101      	movs	r1, #1
 8004ad4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                else
                                {
                                    mtCOVERAGE_TEST_MARKER();
                                }

                                --xPendedCounts;
 8004ad8:	697b      	ldr	r3, [r7, #20]
 8004ada:	3b01      	subs	r3, #1
 8004adc:	617b      	str	r3, [r7, #20]
                            } while( xPendedCounts > ( TickType_t ) 0U );
 8004ade:	697b      	ldr	r3, [r7, #20]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d1ef      	bne.n	8004ac4 <xTaskResumeAll+0x174>

                            xPendedTicks = 0;
 8004ae4:	4b14      	ldr	r3, [pc, #80]	@ (8004b38 <xTaskResumeAll+0x1e8>)
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	601a      	str	r2, [r3, #0]
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }

                    if( xYieldPendings[ xCoreID ] != pdFALSE )
 8004aea:	4a12      	ldr	r2, [pc, #72]	@ (8004b34 <xTaskResumeAll+0x1e4>)
 8004aec:	693b      	ldr	r3, [r7, #16]
 8004aee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d00b      	beq.n	8004b0e <xTaskResumeAll+0x1be>
                    {
                        #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8004af6:	2301      	movs	r3, #1
 8004af8:	61bb      	str	r3, [r7, #24]
                        }
                        #endif /* #if ( configUSE_PREEMPTION != 0 ) */

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            taskYIELD_TASK_CORE_IF_USING_PREEMPTION( pxCurrentTCB );
 8004afa:	4b0d      	ldr	r3, [pc, #52]	@ (8004b30 <xTaskResumeAll+0x1e0>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	4b0f      	ldr	r3, [pc, #60]	@ (8004b3c <xTaskResumeAll+0x1ec>)
 8004b00:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004b04:	601a      	str	r2, [r3, #0]
 8004b06:	f3bf 8f4f 	dsb	sy
 8004b0a:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8004b0e:	f7fe fe7d 	bl	800380c <vPortExitCritical>
    }

    traceRETURN_xTaskResumeAll( xAlreadyYielded );

    return xAlreadyYielded;
 8004b12:	69bb      	ldr	r3, [r7, #24]
}
 8004b14:	4618      	mov	r0, r3
 8004b16:	3720      	adds	r7, #32
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	bd80      	pop	{r7, pc}
 8004b1c:	20003014 	.word	0x20003014
 8004b20:	20002fec 	.word	0x20002fec
 8004b24:	20002fac 	.word	0x20002fac
 8004b28:	20002ff4 	.word	0x20002ff4
 8004b2c:	20002f18 	.word	0x20002f18
 8004b30:	20002f14 	.word	0x20002f14
 8004b34:	20003000 	.word	0x20003000
 8004b38:	20002ffc 	.word	0x20002ffc
 8004b3c:	e000ed04 	.word	0xe000ed04

08004b40 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b088      	sub	sp, #32
 8004b44:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8004b46:	2300      	movs	r3, #0
 8004b48:	61fb      	str	r3, [r7, #28]

    /* Tick increment should occur on every kernel timer event. Core 0 has the
     * responsibility to increment the tick, or increment the pended ticks if the
     * scheduler is suspended.  If pended ticks is greater than zero, the core that
     * calls xTaskResumeAll has the responsibility to increment the tick. */
    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8004b4a:	4b76      	ldr	r3, [pc, #472]	@ (8004d24 <xTaskIncrementTick+0x1e4>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	f040 80de 	bne.w	8004d10 <xTaskIncrementTick+0x1d0>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004b54:	4b74      	ldr	r3, [pc, #464]	@ (8004d28 <xTaskIncrementTick+0x1e8>)
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	3301      	adds	r3, #1
 8004b5a:	61bb      	str	r3, [r7, #24]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8004b5c:	4a72      	ldr	r2, [pc, #456]	@ (8004d28 <xTaskIncrementTick+0x1e8>)
 8004b5e:	69bb      	ldr	r3, [r7, #24]
 8004b60:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U )
 8004b62:	69bb      	ldr	r3, [r7, #24]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d110      	bne.n	8004b8a <xTaskIncrementTick+0x4a>
        {
            taskSWITCH_DELAYED_LISTS();
 8004b68:	4b70      	ldr	r3, [pc, #448]	@ (8004d2c <xTaskIncrementTick+0x1ec>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	617b      	str	r3, [r7, #20]
 8004b6e:	4b70      	ldr	r3, [pc, #448]	@ (8004d30 <xTaskIncrementTick+0x1f0>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	4a6e      	ldr	r2, [pc, #440]	@ (8004d2c <xTaskIncrementTick+0x1ec>)
 8004b74:	6013      	str	r3, [r2, #0]
 8004b76:	4a6e      	ldr	r2, [pc, #440]	@ (8004d30 <xTaskIncrementTick+0x1f0>)
 8004b78:	697b      	ldr	r3, [r7, #20]
 8004b7a:	6013      	str	r3, [r2, #0]
 8004b7c:	4b6d      	ldr	r3, [pc, #436]	@ (8004d34 <xTaskIncrementTick+0x1f4>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	3301      	adds	r3, #1
 8004b82:	4a6c      	ldr	r2, [pc, #432]	@ (8004d34 <xTaskIncrementTick+0x1f4>)
 8004b84:	6013      	str	r3, [r2, #0]
 8004b86:	f000 fb0b 	bl	80051a0 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8004b8a:	4b6b      	ldr	r3, [pc, #428]	@ (8004d38 <xTaskIncrementTick+0x1f8>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	69ba      	ldr	r2, [r7, #24]
 8004b90:	429a      	cmp	r2, r3
 8004b92:	f0c0 80a8 	bcc.w	8004ce6 <xTaskIncrementTick+0x1a6>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004b96:	4b65      	ldr	r3, [pc, #404]	@ (8004d2c <xTaskIncrementTick+0x1ec>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d104      	bne.n	8004baa <xTaskIncrementTick+0x6a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY;
 8004ba0:	4b65      	ldr	r3, [pc, #404]	@ (8004d38 <xTaskIncrementTick+0x1f8>)
 8004ba2:	f04f 32ff 	mov.w	r2, #4294967295
 8004ba6:	601a      	str	r2, [r3, #0]
                    break;
 8004ba8:	e09d      	b.n	8004ce6 <xTaskIncrementTick+0x1a6>
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    /* MISRA Ref 11.5.3 [Void pointer assignment] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                    /* coverity[misra_c_2012_rule_11_5_violation] */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004baa:	4b60      	ldr	r3, [pc, #384]	@ (8004d2c <xTaskIncrementTick+0x1ec>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	68db      	ldr	r3, [r3, #12]
 8004bb0:	68db      	ldr	r3, [r3, #12]
 8004bb2:	613b      	str	r3, [r7, #16]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004bb4:	693b      	ldr	r3, [r7, #16]
 8004bb6:	685b      	ldr	r3, [r3, #4]
 8004bb8:	60fb      	str	r3, [r7, #12]

                    if( xConstTickCount < xItemValue )
 8004bba:	69ba      	ldr	r2, [r7, #24]
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	429a      	cmp	r2, r3
 8004bc0:	d203      	bcs.n	8004bca <xTaskIncrementTick+0x8a>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8004bc2:	4a5d      	ldr	r2, [pc, #372]	@ (8004d38 <xTaskIncrementTick+0x1f8>)
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	6013      	str	r3, [r2, #0]
                        break;
 8004bc8:	e08d      	b.n	8004ce6 <xTaskIncrementTick+0x1a6>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8004bca:	693b      	ldr	r3, [r7, #16]
 8004bcc:	695b      	ldr	r3, [r3, #20]
 8004bce:	60bb      	str	r3, [r7, #8]
 8004bd0:	693b      	ldr	r3, [r7, #16]
 8004bd2:	689b      	ldr	r3, [r3, #8]
 8004bd4:	693a      	ldr	r2, [r7, #16]
 8004bd6:	68d2      	ldr	r2, [r2, #12]
 8004bd8:	609a      	str	r2, [r3, #8]
 8004bda:	693b      	ldr	r3, [r7, #16]
 8004bdc:	68db      	ldr	r3, [r3, #12]
 8004bde:	693a      	ldr	r2, [r7, #16]
 8004be0:	6892      	ldr	r2, [r2, #8]
 8004be2:	605a      	str	r2, [r3, #4]
 8004be4:	68bb      	ldr	r3, [r7, #8]
 8004be6:	685a      	ldr	r2, [r3, #4]
 8004be8:	693b      	ldr	r3, [r7, #16]
 8004bea:	3304      	adds	r3, #4
 8004bec:	429a      	cmp	r2, r3
 8004bee:	d103      	bne.n	8004bf8 <xTaskIncrementTick+0xb8>
 8004bf0:	693b      	ldr	r3, [r7, #16]
 8004bf2:	68da      	ldr	r2, [r3, #12]
 8004bf4:	68bb      	ldr	r3, [r7, #8]
 8004bf6:	605a      	str	r2, [r3, #4]
 8004bf8:	693b      	ldr	r3, [r7, #16]
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	615a      	str	r2, [r3, #20]
 8004bfe:	68bb      	ldr	r3, [r7, #8]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	1e5a      	subs	r2, r3, #1
 8004c04:	68bb      	ldr	r3, [r7, #8]
 8004c06:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004c08:	693b      	ldr	r3, [r7, #16]
 8004c0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d01e      	beq.n	8004c4e <xTaskIncrementTick+0x10e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8004c10:	693b      	ldr	r3, [r7, #16]
 8004c12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c14:	607b      	str	r3, [r7, #4]
 8004c16:	693b      	ldr	r3, [r7, #16]
 8004c18:	69db      	ldr	r3, [r3, #28]
 8004c1a:	693a      	ldr	r2, [r7, #16]
 8004c1c:	6a12      	ldr	r2, [r2, #32]
 8004c1e:	609a      	str	r2, [r3, #8]
 8004c20:	693b      	ldr	r3, [r7, #16]
 8004c22:	6a1b      	ldr	r3, [r3, #32]
 8004c24:	693a      	ldr	r2, [r7, #16]
 8004c26:	69d2      	ldr	r2, [r2, #28]
 8004c28:	605a      	str	r2, [r3, #4]
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	685a      	ldr	r2, [r3, #4]
 8004c2e:	693b      	ldr	r3, [r7, #16]
 8004c30:	3318      	adds	r3, #24
 8004c32:	429a      	cmp	r2, r3
 8004c34:	d103      	bne.n	8004c3e <xTaskIncrementTick+0xfe>
 8004c36:	693b      	ldr	r3, [r7, #16]
 8004c38:	6a1a      	ldr	r2, [r3, #32]
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	605a      	str	r2, [r3, #4]
 8004c3e:	693b      	ldr	r3, [r7, #16]
 8004c40:	2200      	movs	r2, #0
 8004c42:	629a      	str	r2, [r3, #40]	@ 0x28
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	1e5a      	subs	r2, r3, #1
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8004c4e:	693b      	ldr	r3, [r7, #16]
 8004c50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c52:	2201      	movs	r2, #1
 8004c54:	409a      	lsls	r2, r3
 8004c56:	4b39      	ldr	r3, [pc, #228]	@ (8004d3c <xTaskIncrementTick+0x1fc>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	4313      	orrs	r3, r2
 8004c5c:	4a37      	ldr	r2, [pc, #220]	@ (8004d3c <xTaskIncrementTick+0x1fc>)
 8004c5e:	6013      	str	r3, [r2, #0]
 8004c60:	693b      	ldr	r3, [r7, #16]
 8004c62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c64:	4936      	ldr	r1, [pc, #216]	@ (8004d40 <xTaskIncrementTick+0x200>)
 8004c66:	4613      	mov	r3, r2
 8004c68:	009b      	lsls	r3, r3, #2
 8004c6a:	4413      	add	r3, r2
 8004c6c:	009b      	lsls	r3, r3, #2
 8004c6e:	440b      	add	r3, r1
 8004c70:	3304      	adds	r3, #4
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	603b      	str	r3, [r7, #0]
 8004c76:	693b      	ldr	r3, [r7, #16]
 8004c78:	683a      	ldr	r2, [r7, #0]
 8004c7a:	609a      	str	r2, [r3, #8]
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	689a      	ldr	r2, [r3, #8]
 8004c80:	693b      	ldr	r3, [r7, #16]
 8004c82:	60da      	str	r2, [r3, #12]
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	689b      	ldr	r3, [r3, #8]
 8004c88:	693a      	ldr	r2, [r7, #16]
 8004c8a:	3204      	adds	r2, #4
 8004c8c:	605a      	str	r2, [r3, #4]
 8004c8e:	693b      	ldr	r3, [r7, #16]
 8004c90:	1d1a      	adds	r2, r3, #4
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	609a      	str	r2, [r3, #8]
 8004c96:	693b      	ldr	r3, [r7, #16]
 8004c98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c9a:	4613      	mov	r3, r2
 8004c9c:	009b      	lsls	r3, r3, #2
 8004c9e:	4413      	add	r3, r2
 8004ca0:	009b      	lsls	r3, r3, #2
 8004ca2:	4a27      	ldr	r2, [pc, #156]	@ (8004d40 <xTaskIncrementTick+0x200>)
 8004ca4:	441a      	add	r2, r3
 8004ca6:	693b      	ldr	r3, [r7, #16]
 8004ca8:	615a      	str	r2, [r3, #20]
 8004caa:	693b      	ldr	r3, [r7, #16]
 8004cac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004cae:	4924      	ldr	r1, [pc, #144]	@ (8004d40 <xTaskIncrementTick+0x200>)
 8004cb0:	4613      	mov	r3, r2
 8004cb2:	009b      	lsls	r3, r3, #2
 8004cb4:	4413      	add	r3, r2
 8004cb6:	009b      	lsls	r3, r3, #2
 8004cb8:	440b      	add	r3, r1
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	693a      	ldr	r2, [r7, #16]
 8004cbe:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004cc0:	1c59      	adds	r1, r3, #1
 8004cc2:	481f      	ldr	r0, [pc, #124]	@ (8004d40 <xTaskIncrementTick+0x200>)
 8004cc4:	4613      	mov	r3, r2
 8004cc6:	009b      	lsls	r3, r3, #2
 8004cc8:	4413      	add	r3, r2
 8004cca:	009b      	lsls	r3, r3, #2
 8004ccc:	4403      	add	r3, r0
 8004cce:	6019      	str	r1, [r3, #0]
                             * task.
                             * The case of equal priority tasks sharing
                             * processing time (which happens when both
                             * preemption and time slicing are on) is
                             * handled below.*/
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004cd0:	693b      	ldr	r3, [r7, #16]
 8004cd2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004cd4:	4b1b      	ldr	r3, [pc, #108]	@ (8004d44 <xTaskIncrementTick+0x204>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cda:	429a      	cmp	r2, r3
 8004cdc:	f67f af5b 	bls.w	8004b96 <xTaskIncrementTick+0x56>
                            {
                                xSwitchRequired = pdTRUE;
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	61fb      	str	r3, [r7, #28]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004ce4:	e757      	b.n	8004b96 <xTaskIncrementTick+0x56>
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > 1U )
 8004ce6:	4b17      	ldr	r3, [pc, #92]	@ (8004d44 <xTaskIncrementTick+0x204>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004cec:	4914      	ldr	r1, [pc, #80]	@ (8004d40 <xTaskIncrementTick+0x200>)
 8004cee:	4613      	mov	r3, r2
 8004cf0:	009b      	lsls	r3, r3, #2
 8004cf2:	4413      	add	r3, r2
 8004cf4:	009b      	lsls	r3, r3, #2
 8004cf6:	440b      	add	r3, r1
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	2b01      	cmp	r3, #1
 8004cfc:	d901      	bls.n	8004d02 <xTaskIncrementTick+0x1c2>
                {
                    xSwitchRequired = pdTRUE;
 8004cfe:	2301      	movs	r3, #1
 8004d00:	61fb      	str	r3, [r7, #28]
        #if ( configUSE_PREEMPTION == 1 )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                /* For single core the core ID is always 0. */
                if( xYieldPendings[ 0 ] != pdFALSE )
 8004d02:	4b11      	ldr	r3, [pc, #68]	@ (8004d48 <xTaskIncrementTick+0x208>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d007      	beq.n	8004d1a <xTaskIncrementTick+0x1da>
                {
                    xSwitchRequired = pdTRUE;
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	61fb      	str	r3, [r7, #28]
 8004d0e:	e004      	b.n	8004d1a <xTaskIncrementTick+0x1da>
        }
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    else
    {
        xPendedTicks += 1U;
 8004d10:	4b0e      	ldr	r3, [pc, #56]	@ (8004d4c <xTaskIncrementTick+0x20c>)
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	3301      	adds	r3, #1
 8004d16:	4a0d      	ldr	r2, [pc, #52]	@ (8004d4c <xTaskIncrementTick+0x20c>)
 8004d18:	6013      	str	r3, [r2, #0]
        #endif
    }

    traceRETURN_xTaskIncrementTick( xSwitchRequired );

    return xSwitchRequired;
 8004d1a:	69fb      	ldr	r3, [r7, #28]
}
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	3720      	adds	r7, #32
 8004d20:	46bd      	mov	sp, r7
 8004d22:	bd80      	pop	{r7, pc}
 8004d24:	20003014 	.word	0x20003014
 8004d28:	20002ff0 	.word	0x20002ff0
 8004d2c:	20002fa4 	.word	0x20002fa4
 8004d30:	20002fa8 	.word	0x20002fa8
 8004d34:	20003004 	.word	0x20003004
 8004d38:	2000300c 	.word	0x2000300c
 8004d3c:	20002ff4 	.word	0x20002ff4
 8004d40:	20002f18 	.word	0x20002f18
 8004d44:	20002f14 	.word	0x20002f14
 8004d48:	20003000 	.word	0x20003000
 8004d4c:	20002ffc 	.word	0x20002ffc

08004d50 <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )
    void vTaskSwitchContext( void )
    {
 8004d50:	b480      	push	{r7}
 8004d52:	b085      	sub	sp, #20
 8004d54:	af00      	add	r7, sp, #0
        traceENTER_vTaskSwitchContext();

        if( uxSchedulerSuspended != ( UBaseType_t ) 0U )
 8004d56:	4b1c      	ldr	r3, [pc, #112]	@ (8004dc8 <vTaskSwitchContext+0x78>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d003      	beq.n	8004d66 <vTaskSwitchContext+0x16>
        {
            /* The scheduler is currently suspended - do not allow a context
             * switch. */
            xYieldPendings[ 0 ] = pdTRUE;
 8004d5e:	4b1b      	ldr	r3, [pc, #108]	@ (8004dcc <vTaskSwitchContext+0x7c>)
 8004d60:	2201      	movs	r2, #1
 8004d62:	601a      	str	r2, [r3, #0]
            }
            #endif
        }

        traceRETURN_vTaskSwitchContext();
    }
 8004d64:	e02b      	b.n	8004dbe <vTaskSwitchContext+0x6e>
            xYieldPendings[ 0 ] = pdFALSE;
 8004d66:	4b19      	ldr	r3, [pc, #100]	@ (8004dcc <vTaskSwitchContext+0x7c>)
 8004d68:	2200      	movs	r2, #0
 8004d6a:	601a      	str	r2, [r3, #0]
            taskSELECT_HIGHEST_PRIORITY_TASK();
 8004d6c:	4b18      	ldr	r3, [pc, #96]	@ (8004dd0 <vTaskSwitchContext+0x80>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	607b      	str	r3, [r7, #4]
        __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	fab3 f383 	clz	r3, r3
 8004d78:	70fb      	strb	r3, [r7, #3]
        return ucReturn;
 8004d7a:	78fb      	ldrb	r3, [r7, #3]
 8004d7c:	f1c3 031f 	rsb	r3, r3, #31
 8004d80:	60fb      	str	r3, [r7, #12]
 8004d82:	68fa      	ldr	r2, [r7, #12]
 8004d84:	4613      	mov	r3, r2
 8004d86:	009b      	lsls	r3, r3, #2
 8004d88:	4413      	add	r3, r2
 8004d8a:	009b      	lsls	r3, r3, #2
 8004d8c:	4a11      	ldr	r2, [pc, #68]	@ (8004dd4 <vTaskSwitchContext+0x84>)
 8004d8e:	4413      	add	r3, r2
 8004d90:	60bb      	str	r3, [r7, #8]
 8004d92:	68bb      	ldr	r3, [r7, #8]
 8004d94:	685b      	ldr	r3, [r3, #4]
 8004d96:	685a      	ldr	r2, [r3, #4]
 8004d98:	68bb      	ldr	r3, [r7, #8]
 8004d9a:	605a      	str	r2, [r3, #4]
 8004d9c:	68bb      	ldr	r3, [r7, #8]
 8004d9e:	685a      	ldr	r2, [r3, #4]
 8004da0:	68bb      	ldr	r3, [r7, #8]
 8004da2:	3308      	adds	r3, #8
 8004da4:	429a      	cmp	r2, r3
 8004da6:	d103      	bne.n	8004db0 <vTaskSwitchContext+0x60>
 8004da8:	68bb      	ldr	r3, [r7, #8]
 8004daa:	68da      	ldr	r2, [r3, #12]
 8004dac:	68bb      	ldr	r3, [r7, #8]
 8004dae:	605a      	str	r2, [r3, #4]
 8004db0:	68bb      	ldr	r3, [r7, #8]
 8004db2:	685b      	ldr	r3, [r3, #4]
 8004db4:	68db      	ldr	r3, [r3, #12]
 8004db6:	4a08      	ldr	r2, [pc, #32]	@ (8004dd8 <vTaskSwitchContext+0x88>)
 8004db8:	6013      	str	r3, [r2, #0]
            portTASK_SWITCH_HOOK( pxCurrentTCB );
 8004dba:	4b07      	ldr	r3, [pc, #28]	@ (8004dd8 <vTaskSwitchContext+0x88>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
    }
 8004dbe:	bf00      	nop
 8004dc0:	3714      	adds	r7, #20
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	bc80      	pop	{r7}
 8004dc6:	4770      	bx	lr
 8004dc8:	20003014 	.word	0x20003014
 8004dcc:	20003000 	.word	0x20003000
 8004dd0:	20002ff4 	.word	0x20002ff4
 8004dd4:	20002f18 	.word	0x20002f18
 8004dd8:	20002f14 	.word	0x20002f14

08004ddc <vTaskPlaceOnEventList>:
#endif /* if ( configNUMBER_OF_CORES > 1 ) */
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b082      	sub	sp, #8
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
 8004de4:	6039      	str	r1, [r7, #0]
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004de6:	4b07      	ldr	r3, [pc, #28]	@ (8004e04 <vTaskPlaceOnEventList+0x28>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	3318      	adds	r3, #24
 8004dec:	4619      	mov	r1, r3
 8004dee:	6878      	ldr	r0, [r7, #4]
 8004df0:	f7fe ff72 	bl	8003cd8 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004df4:	2101      	movs	r1, #1
 8004df6:	6838      	ldr	r0, [r7, #0]
 8004df8:	f000 fbdc 	bl	80055b4 <prvAddCurrentTaskToDelayedList>

    traceRETURN_vTaskPlaceOnEventList();
}
 8004dfc:	bf00      	nop
 8004dfe:	3708      	adds	r7, #8
 8004e00:	46bd      	mov	sp, r7
 8004e02:	bd80      	pop	{r7, pc}
 8004e04:	20002f14 	.word	0x20002f14

08004e08 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004e08:	b480      	push	{r7}
 8004e0a:	b089      	sub	sp, #36	@ 0x24
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    /* MISRA Ref 11.5.3 [Void pointer assignment] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
    /* coverity[misra_c_2012_rule_11_5_violation] */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	68db      	ldr	r3, [r3, #12]
 8004e14:	68db      	ldr	r3, [r3, #12]
 8004e16:	61bb      	str	r3, [r7, #24]
    configASSERT( pxUnblockedTCB );
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8004e18:	69bb      	ldr	r3, [r7, #24]
 8004e1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e1c:	617b      	str	r3, [r7, #20]
 8004e1e:	69bb      	ldr	r3, [r7, #24]
 8004e20:	69db      	ldr	r3, [r3, #28]
 8004e22:	69ba      	ldr	r2, [r7, #24]
 8004e24:	6a12      	ldr	r2, [r2, #32]
 8004e26:	609a      	str	r2, [r3, #8]
 8004e28:	69bb      	ldr	r3, [r7, #24]
 8004e2a:	6a1b      	ldr	r3, [r3, #32]
 8004e2c:	69ba      	ldr	r2, [r7, #24]
 8004e2e:	69d2      	ldr	r2, [r2, #28]
 8004e30:	605a      	str	r2, [r3, #4]
 8004e32:	697b      	ldr	r3, [r7, #20]
 8004e34:	685a      	ldr	r2, [r3, #4]
 8004e36:	69bb      	ldr	r3, [r7, #24]
 8004e38:	3318      	adds	r3, #24
 8004e3a:	429a      	cmp	r2, r3
 8004e3c:	d103      	bne.n	8004e46 <xTaskRemoveFromEventList+0x3e>
 8004e3e:	69bb      	ldr	r3, [r7, #24]
 8004e40:	6a1a      	ldr	r2, [r3, #32]
 8004e42:	697b      	ldr	r3, [r7, #20]
 8004e44:	605a      	str	r2, [r3, #4]
 8004e46:	69bb      	ldr	r3, [r7, #24]
 8004e48:	2200      	movs	r2, #0
 8004e4a:	629a      	str	r2, [r3, #40]	@ 0x28
 8004e4c:	697b      	ldr	r3, [r7, #20]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	1e5a      	subs	r2, r3, #1
 8004e52:	697b      	ldr	r3, [r7, #20]
 8004e54:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8004e56:	4b4b      	ldr	r3, [pc, #300]	@ (8004f84 <xTaskRemoveFromEventList+0x17c>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d160      	bne.n	8004f20 <xTaskRemoveFromEventList+0x118>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8004e5e:	69bb      	ldr	r3, [r7, #24]
 8004e60:	695b      	ldr	r3, [r3, #20]
 8004e62:	60fb      	str	r3, [r7, #12]
 8004e64:	69bb      	ldr	r3, [r7, #24]
 8004e66:	689b      	ldr	r3, [r3, #8]
 8004e68:	69ba      	ldr	r2, [r7, #24]
 8004e6a:	68d2      	ldr	r2, [r2, #12]
 8004e6c:	609a      	str	r2, [r3, #8]
 8004e6e:	69bb      	ldr	r3, [r7, #24]
 8004e70:	68db      	ldr	r3, [r3, #12]
 8004e72:	69ba      	ldr	r2, [r7, #24]
 8004e74:	6892      	ldr	r2, [r2, #8]
 8004e76:	605a      	str	r2, [r3, #4]
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	685a      	ldr	r2, [r3, #4]
 8004e7c:	69bb      	ldr	r3, [r7, #24]
 8004e7e:	3304      	adds	r3, #4
 8004e80:	429a      	cmp	r2, r3
 8004e82:	d103      	bne.n	8004e8c <xTaskRemoveFromEventList+0x84>
 8004e84:	69bb      	ldr	r3, [r7, #24]
 8004e86:	68da      	ldr	r2, [r3, #12]
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	605a      	str	r2, [r3, #4]
 8004e8c:	69bb      	ldr	r3, [r7, #24]
 8004e8e:	2200      	movs	r2, #0
 8004e90:	615a      	str	r2, [r3, #20]
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	1e5a      	subs	r2, r3, #1
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8004e9c:	69bb      	ldr	r3, [r7, #24]
 8004e9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ea0:	2201      	movs	r2, #1
 8004ea2:	409a      	lsls	r2, r3
 8004ea4:	4b38      	ldr	r3, [pc, #224]	@ (8004f88 <xTaskRemoveFromEventList+0x180>)
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	4313      	orrs	r3, r2
 8004eaa:	4a37      	ldr	r2, [pc, #220]	@ (8004f88 <xTaskRemoveFromEventList+0x180>)
 8004eac:	6013      	str	r3, [r2, #0]
 8004eae:	69bb      	ldr	r3, [r7, #24]
 8004eb0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004eb2:	4936      	ldr	r1, [pc, #216]	@ (8004f8c <xTaskRemoveFromEventList+0x184>)
 8004eb4:	4613      	mov	r3, r2
 8004eb6:	009b      	lsls	r3, r3, #2
 8004eb8:	4413      	add	r3, r2
 8004eba:	009b      	lsls	r3, r3, #2
 8004ebc:	440b      	add	r3, r1
 8004ebe:	3304      	adds	r3, #4
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	60bb      	str	r3, [r7, #8]
 8004ec4:	69bb      	ldr	r3, [r7, #24]
 8004ec6:	68ba      	ldr	r2, [r7, #8]
 8004ec8:	609a      	str	r2, [r3, #8]
 8004eca:	68bb      	ldr	r3, [r7, #8]
 8004ecc:	689a      	ldr	r2, [r3, #8]
 8004ece:	69bb      	ldr	r3, [r7, #24]
 8004ed0:	60da      	str	r2, [r3, #12]
 8004ed2:	68bb      	ldr	r3, [r7, #8]
 8004ed4:	689b      	ldr	r3, [r3, #8]
 8004ed6:	69ba      	ldr	r2, [r7, #24]
 8004ed8:	3204      	adds	r2, #4
 8004eda:	605a      	str	r2, [r3, #4]
 8004edc:	69bb      	ldr	r3, [r7, #24]
 8004ede:	1d1a      	adds	r2, r3, #4
 8004ee0:	68bb      	ldr	r3, [r7, #8]
 8004ee2:	609a      	str	r2, [r3, #8]
 8004ee4:	69bb      	ldr	r3, [r7, #24]
 8004ee6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ee8:	4613      	mov	r3, r2
 8004eea:	009b      	lsls	r3, r3, #2
 8004eec:	4413      	add	r3, r2
 8004eee:	009b      	lsls	r3, r3, #2
 8004ef0:	4a26      	ldr	r2, [pc, #152]	@ (8004f8c <xTaskRemoveFromEventList+0x184>)
 8004ef2:	441a      	add	r2, r3
 8004ef4:	69bb      	ldr	r3, [r7, #24]
 8004ef6:	615a      	str	r2, [r3, #20]
 8004ef8:	69bb      	ldr	r3, [r7, #24]
 8004efa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004efc:	4923      	ldr	r1, [pc, #140]	@ (8004f8c <xTaskRemoveFromEventList+0x184>)
 8004efe:	4613      	mov	r3, r2
 8004f00:	009b      	lsls	r3, r3, #2
 8004f02:	4413      	add	r3, r2
 8004f04:	009b      	lsls	r3, r3, #2
 8004f06:	440b      	add	r3, r1
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	69ba      	ldr	r2, [r7, #24]
 8004f0c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004f0e:	1c59      	adds	r1, r3, #1
 8004f10:	481e      	ldr	r0, [pc, #120]	@ (8004f8c <xTaskRemoveFromEventList+0x184>)
 8004f12:	4613      	mov	r3, r2
 8004f14:	009b      	lsls	r3, r3, #2
 8004f16:	4413      	add	r3, r2
 8004f18:	009b      	lsls	r3, r3, #2
 8004f1a:	4403      	add	r3, r0
 8004f1c:	6019      	str	r1, [r3, #0]
 8004f1e:	e01b      	b.n	8004f58 <xTaskRemoveFromEventList+0x150>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004f20:	4b1b      	ldr	r3, [pc, #108]	@ (8004f90 <xTaskRemoveFromEventList+0x188>)
 8004f22:	685b      	ldr	r3, [r3, #4]
 8004f24:	613b      	str	r3, [r7, #16]
 8004f26:	69bb      	ldr	r3, [r7, #24]
 8004f28:	693a      	ldr	r2, [r7, #16]
 8004f2a:	61da      	str	r2, [r3, #28]
 8004f2c:	693b      	ldr	r3, [r7, #16]
 8004f2e:	689a      	ldr	r2, [r3, #8]
 8004f30:	69bb      	ldr	r3, [r7, #24]
 8004f32:	621a      	str	r2, [r3, #32]
 8004f34:	693b      	ldr	r3, [r7, #16]
 8004f36:	689b      	ldr	r3, [r3, #8]
 8004f38:	69ba      	ldr	r2, [r7, #24]
 8004f3a:	3218      	adds	r2, #24
 8004f3c:	605a      	str	r2, [r3, #4]
 8004f3e:	69bb      	ldr	r3, [r7, #24]
 8004f40:	f103 0218 	add.w	r2, r3, #24
 8004f44:	693b      	ldr	r3, [r7, #16]
 8004f46:	609a      	str	r2, [r3, #8]
 8004f48:	69bb      	ldr	r3, [r7, #24]
 8004f4a:	4a11      	ldr	r2, [pc, #68]	@ (8004f90 <xTaskRemoveFromEventList+0x188>)
 8004f4c:	629a      	str	r2, [r3, #40]	@ 0x28
 8004f4e:	4b10      	ldr	r3, [pc, #64]	@ (8004f90 <xTaskRemoveFromEventList+0x188>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	3301      	adds	r3, #1
 8004f54:	4a0e      	ldr	r2, [pc, #56]	@ (8004f90 <xTaskRemoveFromEventList+0x188>)
 8004f56:	6013      	str	r3, [r2, #0]
    }

    #if ( configNUMBER_OF_CORES == 1 )
    {
        if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004f58:	69bb      	ldr	r3, [r7, #24]
 8004f5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f5c:	4b0d      	ldr	r3, [pc, #52]	@ (8004f94 <xTaskRemoveFromEventList+0x18c>)
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f62:	429a      	cmp	r2, r3
 8004f64:	d905      	bls.n	8004f72 <xTaskRemoveFromEventList+0x16a>
        {
            /* Return true if the task removed from the event list has a higher
             * priority than the calling task.  This allows the calling task to know if
             * it should force a context switch now. */
            xReturn = pdTRUE;
 8004f66:	2301      	movs	r3, #1
 8004f68:	61fb      	str	r3, [r7, #28]

            /* Mark that a yield is pending in case the user is not using the
             * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
            xYieldPendings[ 0 ] = pdTRUE;
 8004f6a:	4b0b      	ldr	r3, [pc, #44]	@ (8004f98 <xTaskRemoveFromEventList+0x190>)
 8004f6c:	2201      	movs	r2, #1
 8004f6e:	601a      	str	r2, [r3, #0]
 8004f70:	e001      	b.n	8004f76 <xTaskRemoveFromEventList+0x16e>
        }
        else
        {
            xReturn = pdFALSE;
 8004f72:	2300      	movs	r3, #0
 8004f74:	61fb      	str	r3, [r7, #28]
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_xTaskRemoveFromEventList( xReturn );
    return xReturn;
 8004f76:	69fb      	ldr	r3, [r7, #28]
}
 8004f78:	4618      	mov	r0, r3
 8004f7a:	3724      	adds	r7, #36	@ 0x24
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	bc80      	pop	{r7}
 8004f80:	4770      	bx	lr
 8004f82:	bf00      	nop
 8004f84:	20003014 	.word	0x20003014
 8004f88:	20002ff4 	.word	0x20002ff4
 8004f8c:	20002f18 	.word	0x20002f18
 8004f90:	20002fac 	.word	0x20002fac
 8004f94:	20002f14 	.word	0x20002f14
 8004f98:	20003000 	.word	0x20003000

08004f9c <vTaskInternalSetTimeOutState>:
    traceRETURN_vTaskSetTimeOutState();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004f9c:	b480      	push	{r7}
 8004f9e:	b083      	sub	sp, #12
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
    traceENTER_vTaskInternalSetTimeOutState( pxTimeOut );

    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004fa4:	4b06      	ldr	r3, [pc, #24]	@ (8004fc0 <vTaskInternalSetTimeOutState+0x24>)
 8004fa6:	681a      	ldr	r2, [r3, #0]
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8004fac:	4b05      	ldr	r3, [pc, #20]	@ (8004fc4 <vTaskInternalSetTimeOutState+0x28>)
 8004fae:	681a      	ldr	r2, [r3, #0]
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	605a      	str	r2, [r3, #4]

    traceRETURN_vTaskInternalSetTimeOutState();
}
 8004fb4:	bf00      	nop
 8004fb6:	370c      	adds	r7, #12
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	bc80      	pop	{r7}
 8004fbc:	4770      	bx	lr
 8004fbe:	bf00      	nop
 8004fc0:	20003004 	.word	0x20003004
 8004fc4:	20002ff0 	.word	0x20002ff0

08004fc8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b086      	sub	sp, #24
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
 8004fd0:	6039      	str	r1, [r7, #0]
    traceENTER_xTaskCheckForTimeOut( pxTimeOut, pxTicksToWait );

    configASSERT( pxTimeOut );
    configASSERT( pxTicksToWait );

    taskENTER_CRITICAL();
 8004fd2:	f7fe fc01 	bl	80037d8 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8004fd6:	4b1f      	ldr	r3, [pc, #124]	@ (8005054 <xTaskCheckForTimeOut+0x8c>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	613b      	str	r3, [r7, #16]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	685b      	ldr	r3, [r3, #4]
 8004fe0:	693a      	ldr	r2, [r7, #16]
 8004fe2:	1ad3      	subs	r3, r2, r3
 8004fe4:	60fb      	str	r3, [r7, #12]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fee:	d102      	bne.n	8004ff6 <xTaskCheckForTimeOut+0x2e>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	617b      	str	r3, [r7, #20]
 8004ff4:	e026      	b.n	8005044 <xTaskCheckForTimeOut+0x7c>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) )
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681a      	ldr	r2, [r3, #0]
 8004ffa:	4b17      	ldr	r3, [pc, #92]	@ (8005058 <xTaskCheckForTimeOut+0x90>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	429a      	cmp	r2, r3
 8005000:	d00a      	beq.n	8005018 <xTaskCheckForTimeOut+0x50>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	685b      	ldr	r3, [r3, #4]
 8005006:	693a      	ldr	r2, [r7, #16]
 8005008:	429a      	cmp	r2, r3
 800500a:	d305      	bcc.n	8005018 <xTaskCheckForTimeOut+0x50>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 800500c:	2301      	movs	r3, #1
 800500e:	617b      	str	r3, [r7, #20]
            *pxTicksToWait = ( TickType_t ) 0;
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	2200      	movs	r2, #0
 8005014:	601a      	str	r2, [r3, #0]
 8005016:	e015      	b.n	8005044 <xTaskCheckForTimeOut+0x7c>
        }
        else if( xElapsedTime < *pxTicksToWait )
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	68fa      	ldr	r2, [r7, #12]
 800501e:	429a      	cmp	r2, r3
 8005020:	d20b      	bcs.n	800503a <xTaskCheckForTimeOut+0x72>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	681a      	ldr	r2, [r3, #0]
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	1ad2      	subs	r2, r2, r3
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800502e:	6878      	ldr	r0, [r7, #4]
 8005030:	f7ff ffb4 	bl	8004f9c <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8005034:	2300      	movs	r3, #0
 8005036:	617b      	str	r3, [r7, #20]
 8005038:	e004      	b.n	8005044 <xTaskCheckForTimeOut+0x7c>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	2200      	movs	r2, #0
 800503e:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8005040:	2301      	movs	r3, #1
 8005042:	617b      	str	r3, [r7, #20]
        }
    }
    taskEXIT_CRITICAL();
 8005044:	f7fe fbe2 	bl	800380c <vPortExitCritical>

    traceRETURN_xTaskCheckForTimeOut( xReturn );

    return xReturn;
 8005048:	697b      	ldr	r3, [r7, #20]
}
 800504a:	4618      	mov	r0, r3
 800504c:	3718      	adds	r7, #24
 800504e:	46bd      	mov	sp, r7
 8005050:	bd80      	pop	{r7, pc}
 8005052:	bf00      	nop
 8005054:	20002ff0 	.word	0x20002ff0
 8005058:	20003004 	.word	0x20003004

0800505c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800505c:	b480      	push	{r7}
 800505e:	af00      	add	r7, sp, #0
    traceENTER_vTaskMissedYield();

    /* Must be called from within a critical section. */
    xYieldPendings[ portGET_CORE_ID() ] = pdTRUE;
 8005060:	4b03      	ldr	r3, [pc, #12]	@ (8005070 <vTaskMissedYield+0x14>)
 8005062:	2201      	movs	r2, #1
 8005064:	601a      	str	r2, [r3, #0]

    traceRETURN_vTaskMissedYield();
}
 8005066:	bf00      	nop
 8005068:	46bd      	mov	sp, r7
 800506a:	bc80      	pop	{r7}
 800506c:	4770      	bx	lr
 800506e:	bf00      	nop
 8005070:	20003000 	.word	0x20003000

08005074 <prvIdleTask>:
 * void prvIdleTask( void *pvParameters );
 *
 */

static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b082      	sub	sp, #8
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]

    for( ; configCONTROL_INFINITE_LOOP(); )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 800507c:	f000 f852 	bl	8005124 <prvCheckTasksWaitingTermination>
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains one more task than the
             * number of idle tasks, which is equal to the configured numbers of cores
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) configNUMBER_OF_CORES )
 8005080:	4b06      	ldr	r3, [pc, #24]	@ (800509c <prvIdleTask+0x28>)
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	2b01      	cmp	r3, #1
 8005086:	d9f9      	bls.n	800507c <prvIdleTask+0x8>
            {
                taskYIELD();
 8005088:	4b05      	ldr	r3, [pc, #20]	@ (80050a0 <prvIdleTask+0x2c>)
 800508a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800508e:	601a      	str	r2, [r3, #0]
 8005090:	f3bf 8f4f 	dsb	sy
 8005094:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8005098:	e7f0      	b.n	800507c <prvIdleTask+0x8>
 800509a:	bf00      	nop
 800509c:	20002f18 	.word	0x20002f18
 80050a0:	e000ed04 	.word	0xe000ed04

080050a4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b082      	sub	sp, #8
 80050a8:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80050aa:	2300      	movs	r3, #0
 80050ac:	607b      	str	r3, [r7, #4]
 80050ae:	e00c      	b.n	80050ca <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80050b0:	687a      	ldr	r2, [r7, #4]
 80050b2:	4613      	mov	r3, r2
 80050b4:	009b      	lsls	r3, r3, #2
 80050b6:	4413      	add	r3, r2
 80050b8:	009b      	lsls	r3, r3, #2
 80050ba:	4a12      	ldr	r2, [pc, #72]	@ (8005104 <prvInitialiseTaskLists+0x60>)
 80050bc:	4413      	add	r3, r2
 80050be:	4618      	mov	r0, r3
 80050c0:	f7fe fdbc 	bl	8003c3c <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	3301      	adds	r3, #1
 80050c8:	607b      	str	r3, [r7, #4]
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2b04      	cmp	r3, #4
 80050ce:	d9ef      	bls.n	80050b0 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80050d0:	480d      	ldr	r0, [pc, #52]	@ (8005108 <prvInitialiseTaskLists+0x64>)
 80050d2:	f7fe fdb3 	bl	8003c3c <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80050d6:	480d      	ldr	r0, [pc, #52]	@ (800510c <prvInitialiseTaskLists+0x68>)
 80050d8:	f7fe fdb0 	bl	8003c3c <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80050dc:	480c      	ldr	r0, [pc, #48]	@ (8005110 <prvInitialiseTaskLists+0x6c>)
 80050de:	f7fe fdad 	bl	8003c3c <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 80050e2:	480c      	ldr	r0, [pc, #48]	@ (8005114 <prvInitialiseTaskLists+0x70>)
 80050e4:	f7fe fdaa 	bl	8003c3c <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 80050e8:	480b      	ldr	r0, [pc, #44]	@ (8005118 <prvInitialiseTaskLists+0x74>)
 80050ea:	f7fe fda7 	bl	8003c3c <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80050ee:	4b0b      	ldr	r3, [pc, #44]	@ (800511c <prvInitialiseTaskLists+0x78>)
 80050f0:	4a05      	ldr	r2, [pc, #20]	@ (8005108 <prvInitialiseTaskLists+0x64>)
 80050f2:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80050f4:	4b0a      	ldr	r3, [pc, #40]	@ (8005120 <prvInitialiseTaskLists+0x7c>)
 80050f6:	4a05      	ldr	r2, [pc, #20]	@ (800510c <prvInitialiseTaskLists+0x68>)
 80050f8:	601a      	str	r2, [r3, #0]
}
 80050fa:	bf00      	nop
 80050fc:	3708      	adds	r7, #8
 80050fe:	46bd      	mov	sp, r7
 8005100:	bd80      	pop	{r7, pc}
 8005102:	bf00      	nop
 8005104:	20002f18 	.word	0x20002f18
 8005108:	20002f7c 	.word	0x20002f7c
 800510c:	20002f90 	.word	0x20002f90
 8005110:	20002fac 	.word	0x20002fac
 8005114:	20002fc0 	.word	0x20002fc0
 8005118:	20002fd8 	.word	0x20002fd8
 800511c:	20002fa4 	.word	0x20002fa4
 8005120:	20002fa8 	.word	0x20002fa8

08005124 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005124:	b580      	push	{r7, lr}
 8005126:	b082      	sub	sp, #8
 8005128:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800512a:	e019      	b.n	8005160 <prvCheckTasksWaitingTermination+0x3c>
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                taskENTER_CRITICAL();
 800512c:	f7fe fb54 	bl	80037d8 <vPortEnterCritical>
                {
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8005130:	4b10      	ldr	r3, [pc, #64]	@ (8005174 <prvCheckTasksWaitingTermination+0x50>)
 8005132:	68db      	ldr	r3, [r3, #12]
 8005134:	68db      	ldr	r3, [r3, #12]
 8005136:	607b      	str	r3, [r7, #4]
                        ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	3304      	adds	r3, #4
 800513c:	4618      	mov	r0, r3
 800513e:	f7fe fe03 	bl	8003d48 <uxListRemove>
                        --uxCurrentNumberOfTasks;
 8005142:	4b0d      	ldr	r3, [pc, #52]	@ (8005178 <prvCheckTasksWaitingTermination+0x54>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	3b01      	subs	r3, #1
 8005148:	4a0b      	ldr	r2, [pc, #44]	@ (8005178 <prvCheckTasksWaitingTermination+0x54>)
 800514a:	6013      	str	r3, [r2, #0]
                        --uxDeletedTasksWaitingCleanUp;
 800514c:	4b0b      	ldr	r3, [pc, #44]	@ (800517c <prvCheckTasksWaitingTermination+0x58>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	3b01      	subs	r3, #1
 8005152:	4a0a      	ldr	r2, [pc, #40]	@ (800517c <prvCheckTasksWaitingTermination+0x58>)
 8005154:	6013      	str	r3, [r2, #0]
                    }
                }
                taskEXIT_CRITICAL();
 8005156:	f7fe fb59 	bl	800380c <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 800515a:	6878      	ldr	r0, [r7, #4]
 800515c:	f000 f810 	bl	8005180 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005160:	4b06      	ldr	r3, [pc, #24]	@ (800517c <prvCheckTasksWaitingTermination+0x58>)
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d1e1      	bne.n	800512c <prvCheckTasksWaitingTermination+0x8>
            }
            #endif /* #if( configNUMBER_OF_CORES == 1 ) */
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8005168:	bf00      	nop
 800516a:	bf00      	nop
 800516c:	3708      	adds	r7, #8
 800516e:	46bd      	mov	sp, r7
 8005170:	bd80      	pop	{r7, pc}
 8005172:	bf00      	nop
 8005174:	20002fc0 	.word	0x20002fc0
 8005178:	20002fec 	.word	0x20002fec
 800517c:	20002fd4 	.word	0x20002fd4

08005180 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8005180:	b580      	push	{r7, lr}
 8005182:	b082      	sub	sp, #8
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800518c:	4618      	mov	r0, r3
 800518e:	f7fe fc65 	bl	8003a5c <vPortFree>
            vPortFree( pxTCB );
 8005192:	6878      	ldr	r0, [r7, #4]
 8005194:	f7fe fc62 	bl	8003a5c <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8005198:	bf00      	nop
 800519a:	3708      	adds	r7, #8
 800519c:	46bd      	mov	sp, r7
 800519e:	bd80      	pop	{r7, pc}

080051a0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80051a0:	b480      	push	{r7}
 80051a2:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80051a4:	4b09      	ldr	r3, [pc, #36]	@ (80051cc <prvResetNextTaskUnblockTime+0x2c>)
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d104      	bne.n	80051b8 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80051ae:	4b08      	ldr	r3, [pc, #32]	@ (80051d0 <prvResetNextTaskUnblockTime+0x30>)
 80051b0:	f04f 32ff 	mov.w	r2, #4294967295
 80051b4:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80051b6:	e005      	b.n	80051c4 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80051b8:	4b04      	ldr	r3, [pc, #16]	@ (80051cc <prvResetNextTaskUnblockTime+0x2c>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	68db      	ldr	r3, [r3, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	4a03      	ldr	r2, [pc, #12]	@ (80051d0 <prvResetNextTaskUnblockTime+0x30>)
 80051c2:	6013      	str	r3, [r2, #0]
}
 80051c4:	bf00      	nop
 80051c6:	46bd      	mov	sp, r7
 80051c8:	bc80      	pop	{r7}
 80051ca:	4770      	bx	lr
 80051cc:	20002fa4 	.word	0x20002fa4
 80051d0:	2000300c 	.word	0x2000300c

080051d4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 80051d4:	b480      	push	{r7}
 80051d6:	b083      	sub	sp, #12
 80051d8:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        traceENTER_xTaskGetSchedulerState();

        if( xSchedulerRunning == pdFALSE )
 80051da:	4b0b      	ldr	r3, [pc, #44]	@ (8005208 <xTaskGetSchedulerState+0x34>)
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d102      	bne.n	80051e8 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 80051e2:	2301      	movs	r3, #1
 80051e4:	607b      	str	r3, [r7, #4]
 80051e6:	e008      	b.n	80051fa <xTaskGetSchedulerState+0x26>
        {
            #if ( configNUMBER_OF_CORES > 1 )
                taskENTER_CRITICAL();
            #endif
            {
                if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 80051e8:	4b08      	ldr	r3, [pc, #32]	@ (800520c <xTaskGetSchedulerState+0x38>)
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d102      	bne.n	80051f6 <xTaskGetSchedulerState+0x22>
                {
                    xReturn = taskSCHEDULER_RUNNING;
 80051f0:	2302      	movs	r3, #2
 80051f2:	607b      	str	r3, [r7, #4]
 80051f4:	e001      	b.n	80051fa <xTaskGetSchedulerState+0x26>
                }
                else
                {
                    xReturn = taskSCHEDULER_SUSPENDED;
 80051f6:	2300      	movs	r3, #0
 80051f8:	607b      	str	r3, [r7, #4]
            #endif
        }

        traceRETURN_xTaskGetSchedulerState( xReturn );

        return xReturn;
 80051fa:	687b      	ldr	r3, [r7, #4]
    }
 80051fc:	4618      	mov	r0, r3
 80051fe:	370c      	adds	r7, #12
 8005200:	46bd      	mov	sp, r7
 8005202:	bc80      	pop	{r7}
 8005204:	4770      	bx	lr
 8005206:	bf00      	nop
 8005208:	20002ff8 	.word	0x20002ff8
 800520c:	20003014 	.word	0x20003014

08005210 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
 8005210:	b580      	push	{r7, lr}
 8005212:	b086      	sub	sp, #24
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 800521c:	2300      	movs	r3, #0
 800521e:	617b      	str	r3, [r7, #20]

        traceENTER_xTaskPriorityInherit( pxMutexHolder );

        /* If the mutex is taken by an interrupt, the mutex holder is NULL. Priority
         * inheritance is not applied in this scenario. */
        if( pxMutexHolder != NULL )
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2b00      	cmp	r3, #0
 8005224:	f000 8089 	beq.w	800533a <xTaskPriorityInherit+0x12a>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8005228:	693b      	ldr	r3, [r7, #16]
 800522a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800522c:	4b45      	ldr	r3, [pc, #276]	@ (8005344 <xTaskPriorityInherit+0x134>)
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005232:	429a      	cmp	r2, r3
 8005234:	d278      	bcs.n	8005328 <xTaskPriorityInherit+0x118>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == ( ( TickType_t ) 0U ) )
 8005236:	693b      	ldr	r3, [r7, #16]
 8005238:	699b      	ldr	r3, [r3, #24]
 800523a:	2b00      	cmp	r3, #0
 800523c:	db06      	blt.n	800524c <xTaskPriorityInherit+0x3c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority );
 800523e:	4b41      	ldr	r3, [pc, #260]	@ (8005344 <xTaskPriorityInherit+0x134>)
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005244:	f1c3 0205 	rsb	r2, r3, #5
 8005248:	693b      	ldr	r3, [r7, #16]
 800524a:	619a      	str	r2, [r3, #24]
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800524c:	693b      	ldr	r3, [r7, #16]
 800524e:	6959      	ldr	r1, [r3, #20]
 8005250:	693b      	ldr	r3, [r7, #16]
 8005252:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005254:	4613      	mov	r3, r2
 8005256:	009b      	lsls	r3, r3, #2
 8005258:	4413      	add	r3, r2
 800525a:	009b      	lsls	r3, r3, #2
 800525c:	4a3a      	ldr	r2, [pc, #232]	@ (8005348 <xTaskPriorityInherit+0x138>)
 800525e:	4413      	add	r3, r2
 8005260:	4299      	cmp	r1, r3
 8005262:	d159      	bne.n	8005318 <xTaskPriorityInherit+0x108>
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005264:	693b      	ldr	r3, [r7, #16]
 8005266:	3304      	adds	r3, #4
 8005268:	4618      	mov	r0, r3
 800526a:	f7fe fd6d 	bl	8003d48 <uxListRemove>
 800526e:	4603      	mov	r3, r0
 8005270:	2b00      	cmp	r3, #0
 8005272:	d10a      	bne.n	800528a <xTaskPriorityInherit+0x7a>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8005274:	693b      	ldr	r3, [r7, #16]
 8005276:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005278:	2201      	movs	r2, #1
 800527a:	fa02 f303 	lsl.w	r3, r2, r3
 800527e:	43da      	mvns	r2, r3
 8005280:	4b32      	ldr	r3, [pc, #200]	@ (800534c <xTaskPriorityInherit+0x13c>)
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	4013      	ands	r3, r2
 8005286:	4a31      	ldr	r2, [pc, #196]	@ (800534c <xTaskPriorityInherit+0x13c>)
 8005288:	6013      	str	r3, [r2, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800528a:	4b2e      	ldr	r3, [pc, #184]	@ (8005344 <xTaskPriorityInherit+0x134>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005290:	693b      	ldr	r3, [r7, #16]
 8005292:	62da      	str	r2, [r3, #44]	@ 0x2c
                    prvAddTaskToReadyList( pxMutexHolderTCB );
 8005294:	693b      	ldr	r3, [r7, #16]
 8005296:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005298:	2201      	movs	r2, #1
 800529a:	409a      	lsls	r2, r3
 800529c:	4b2b      	ldr	r3, [pc, #172]	@ (800534c <xTaskPriorityInherit+0x13c>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4313      	orrs	r3, r2
 80052a2:	4a2a      	ldr	r2, [pc, #168]	@ (800534c <xTaskPriorityInherit+0x13c>)
 80052a4:	6013      	str	r3, [r2, #0]
 80052a6:	693b      	ldr	r3, [r7, #16]
 80052a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80052aa:	4927      	ldr	r1, [pc, #156]	@ (8005348 <xTaskPriorityInherit+0x138>)
 80052ac:	4613      	mov	r3, r2
 80052ae:	009b      	lsls	r3, r3, #2
 80052b0:	4413      	add	r3, r2
 80052b2:	009b      	lsls	r3, r3, #2
 80052b4:	440b      	add	r3, r1
 80052b6:	3304      	adds	r3, #4
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	60fb      	str	r3, [r7, #12]
 80052bc:	693b      	ldr	r3, [r7, #16]
 80052be:	68fa      	ldr	r2, [r7, #12]
 80052c0:	609a      	str	r2, [r3, #8]
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	689a      	ldr	r2, [r3, #8]
 80052c6:	693b      	ldr	r3, [r7, #16]
 80052c8:	60da      	str	r2, [r3, #12]
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	689b      	ldr	r3, [r3, #8]
 80052ce:	693a      	ldr	r2, [r7, #16]
 80052d0:	3204      	adds	r2, #4
 80052d2:	605a      	str	r2, [r3, #4]
 80052d4:	693b      	ldr	r3, [r7, #16]
 80052d6:	1d1a      	adds	r2, r3, #4
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	609a      	str	r2, [r3, #8]
 80052dc:	693b      	ldr	r3, [r7, #16]
 80052de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80052e0:	4613      	mov	r3, r2
 80052e2:	009b      	lsls	r3, r3, #2
 80052e4:	4413      	add	r3, r2
 80052e6:	009b      	lsls	r3, r3, #2
 80052e8:	4a17      	ldr	r2, [pc, #92]	@ (8005348 <xTaskPriorityInherit+0x138>)
 80052ea:	441a      	add	r2, r3
 80052ec:	693b      	ldr	r3, [r7, #16]
 80052ee:	615a      	str	r2, [r3, #20]
 80052f0:	693b      	ldr	r3, [r7, #16]
 80052f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80052f4:	4914      	ldr	r1, [pc, #80]	@ (8005348 <xTaskPriorityInherit+0x138>)
 80052f6:	4613      	mov	r3, r2
 80052f8:	009b      	lsls	r3, r3, #2
 80052fa:	4413      	add	r3, r2
 80052fc:	009b      	lsls	r3, r3, #2
 80052fe:	440b      	add	r3, r1
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	693a      	ldr	r2, [r7, #16]
 8005304:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005306:	1c59      	adds	r1, r3, #1
 8005308:	480f      	ldr	r0, [pc, #60]	@ (8005348 <xTaskPriorityInherit+0x138>)
 800530a:	4613      	mov	r3, r2
 800530c:	009b      	lsls	r3, r3, #2
 800530e:	4413      	add	r3, r2
 8005310:	009b      	lsls	r3, r3, #2
 8005312:	4403      	add	r3, r0
 8005314:	6019      	str	r1, [r3, #0]
 8005316:	e004      	b.n	8005322 <xTaskPriorityInherit+0x112>
                    #endif /* if ( configNUMBER_OF_CORES > 1 ) */
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005318:	4b0a      	ldr	r3, [pc, #40]	@ (8005344 <xTaskPriorityInherit+0x134>)
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800531e:	693b      	ldr	r3, [r7, #16]
 8005320:	62da      	str	r2, [r3, #44]	@ 0x2c
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

                /* Inheritance occurred. */
                xReturn = pdTRUE;
 8005322:	2301      	movs	r3, #1
 8005324:	617b      	str	r3, [r7, #20]
 8005326:	e008      	b.n	800533a <xTaskPriorityInherit+0x12a>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8005328:	693b      	ldr	r3, [r7, #16]
 800532a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800532c:	4b05      	ldr	r3, [pc, #20]	@ (8005344 <xTaskPriorityInherit+0x134>)
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005332:	429a      	cmp	r2, r3
 8005334:	d201      	bcs.n	800533a <xTaskPriorityInherit+0x12a>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
 8005336:	2301      	movs	r3, #1
 8005338:	617b      	str	r3, [r7, #20]
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xTaskPriorityInherit( xReturn );

        return xReturn;
 800533a:	697b      	ldr	r3, [r7, #20]
    }
 800533c:	4618      	mov	r0, r3
 800533e:	3718      	adds	r7, #24
 8005340:	46bd      	mov	sp, r7
 8005342:	bd80      	pop	{r7, pc}
 8005344:	20002f14 	.word	0x20002f14
 8005348:	20002f18 	.word	0x20002f18
 800534c:	20002ff4 	.word	0x20002ff4

08005350 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8005350:	b580      	push	{r7, lr}
 8005352:	b086      	sub	sp, #24
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 800535c:	2300      	movs	r3, #0
 800535e:	617b      	str	r3, [r7, #20]

        traceENTER_xTaskPriorityDisinherit( pxMutexHolder );

        if( pxMutexHolder != NULL )
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d06e      	beq.n	8005444 <xTaskPriorityDisinherit+0xf4>
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
            configASSERT( pxTCB->uxMutexesHeld );
            ( pxTCB->uxMutexesHeld )--;
 8005366:	693b      	ldr	r3, [r7, #16]
 8005368:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800536a:	1e5a      	subs	r2, r3, #1
 800536c:	693b      	ldr	r3, [r7, #16]
 800536e:	649a      	str	r2, [r3, #72]	@ 0x48

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005370:	693b      	ldr	r3, [r7, #16]
 8005372:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005374:	693b      	ldr	r3, [r7, #16]
 8005376:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005378:	429a      	cmp	r2, r3
 800537a:	d063      	beq.n	8005444 <xTaskPriorityDisinherit+0xf4>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800537c:	693b      	ldr	r3, [r7, #16]
 800537e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005380:	2b00      	cmp	r3, #0
 8005382:	d15f      	bne.n	8005444 <xTaskPriorityDisinherit+0xf4>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005384:	693b      	ldr	r3, [r7, #16]
 8005386:	3304      	adds	r3, #4
 8005388:	4618      	mov	r0, r3
 800538a:	f7fe fcdd 	bl	8003d48 <uxListRemove>
 800538e:	4603      	mov	r3, r0
 8005390:	2b00      	cmp	r3, #0
 8005392:	d10a      	bne.n	80053aa <xTaskPriorityDisinherit+0x5a>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8005394:	693b      	ldr	r3, [r7, #16]
 8005396:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005398:	2201      	movs	r2, #1
 800539a:	fa02 f303 	lsl.w	r3, r2, r3
 800539e:	43da      	mvns	r2, r3
 80053a0:	4b2b      	ldr	r3, [pc, #172]	@ (8005450 <xTaskPriorityDisinherit+0x100>)
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	4013      	ands	r3, r2
 80053a6:	4a2a      	ldr	r2, [pc, #168]	@ (8005450 <xTaskPriorityDisinherit+0x100>)
 80053a8:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 80053aa:	693b      	ldr	r3, [r7, #16]
 80053ac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80053ae:	693b      	ldr	r3, [r7, #16]
 80053b0:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority );
 80053b2:	693b      	ldr	r3, [r7, #16]
 80053b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053b6:	f1c3 0205 	rsb	r2, r3, #5
 80053ba:	693b      	ldr	r3, [r7, #16]
 80053bc:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 80053be:	693b      	ldr	r3, [r7, #16]
 80053c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053c2:	2201      	movs	r2, #1
 80053c4:	409a      	lsls	r2, r3
 80053c6:	4b22      	ldr	r3, [pc, #136]	@ (8005450 <xTaskPriorityDisinherit+0x100>)
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	4313      	orrs	r3, r2
 80053cc:	4a20      	ldr	r2, [pc, #128]	@ (8005450 <xTaskPriorityDisinherit+0x100>)
 80053ce:	6013      	str	r3, [r2, #0]
 80053d0:	693b      	ldr	r3, [r7, #16]
 80053d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80053d4:	491f      	ldr	r1, [pc, #124]	@ (8005454 <xTaskPriorityDisinherit+0x104>)
 80053d6:	4613      	mov	r3, r2
 80053d8:	009b      	lsls	r3, r3, #2
 80053da:	4413      	add	r3, r2
 80053dc:	009b      	lsls	r3, r3, #2
 80053de:	440b      	add	r3, r1
 80053e0:	3304      	adds	r3, #4
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	60fb      	str	r3, [r7, #12]
 80053e6:	693b      	ldr	r3, [r7, #16]
 80053e8:	68fa      	ldr	r2, [r7, #12]
 80053ea:	609a      	str	r2, [r3, #8]
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	689a      	ldr	r2, [r3, #8]
 80053f0:	693b      	ldr	r3, [r7, #16]
 80053f2:	60da      	str	r2, [r3, #12]
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	689b      	ldr	r3, [r3, #8]
 80053f8:	693a      	ldr	r2, [r7, #16]
 80053fa:	3204      	adds	r2, #4
 80053fc:	605a      	str	r2, [r3, #4]
 80053fe:	693b      	ldr	r3, [r7, #16]
 8005400:	1d1a      	adds	r2, r3, #4
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	609a      	str	r2, [r3, #8]
 8005406:	693b      	ldr	r3, [r7, #16]
 8005408:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800540a:	4613      	mov	r3, r2
 800540c:	009b      	lsls	r3, r3, #2
 800540e:	4413      	add	r3, r2
 8005410:	009b      	lsls	r3, r3, #2
 8005412:	4a10      	ldr	r2, [pc, #64]	@ (8005454 <xTaskPriorityDisinherit+0x104>)
 8005414:	441a      	add	r2, r3
 8005416:	693b      	ldr	r3, [r7, #16]
 8005418:	615a      	str	r2, [r3, #20]
 800541a:	693b      	ldr	r3, [r7, #16]
 800541c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800541e:	490d      	ldr	r1, [pc, #52]	@ (8005454 <xTaskPriorityDisinherit+0x104>)
 8005420:	4613      	mov	r3, r2
 8005422:	009b      	lsls	r3, r3, #2
 8005424:	4413      	add	r3, r2
 8005426:	009b      	lsls	r3, r3, #2
 8005428:	440b      	add	r3, r1
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	693a      	ldr	r2, [r7, #16]
 800542e:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005430:	1c59      	adds	r1, r3, #1
 8005432:	4808      	ldr	r0, [pc, #32]	@ (8005454 <xTaskPriorityDisinherit+0x104>)
 8005434:	4613      	mov	r3, r2
 8005436:	009b      	lsls	r3, r3, #2
 8005438:	4413      	add	r3, r2
 800543a:	009b      	lsls	r3, r3, #2
 800543c:	4403      	add	r3, r0
 800543e:	6019      	str	r1, [r3, #0]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8005440:	2301      	movs	r3, #1
 8005442:	617b      	str	r3, [r7, #20]
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xTaskPriorityDisinherit( xReturn );

        return xReturn;
 8005444:	697b      	ldr	r3, [r7, #20]
    }
 8005446:	4618      	mov	r0, r3
 8005448:	3718      	adds	r7, #24
 800544a:	46bd      	mov	sp, r7
 800544c:	bd80      	pop	{r7, pc}
 800544e:	bf00      	nop
 8005450:	20002ff4 	.word	0x20002ff4
 8005454:	20002f18 	.word	0x20002f18

08005458 <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
 8005458:	b580      	push	{r7, lr}
 800545a:	b088      	sub	sp, #32
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
 8005460:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	61bb      	str	r3, [r7, #24]
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8005466:	2301      	movs	r3, #1
 8005468:	617b      	str	r3, [r7, #20]

        traceENTER_vTaskPriorityDisinheritAfterTimeout( pxMutexHolder, uxHighestPriorityWaitingTask );

        if( pxMutexHolder != NULL )
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2b00      	cmp	r3, #0
 800546e:	f000 8083 	beq.w	8005578 <vTaskPriorityDisinheritAfterTimeout+0x120>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8005472:	69bb      	ldr	r3, [r7, #24]
 8005474:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005476:	683a      	ldr	r2, [r7, #0]
 8005478:	429a      	cmp	r2, r3
 800547a:	d902      	bls.n	8005482 <vTaskPriorityDisinheritAfterTimeout+0x2a>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	61fb      	str	r3, [r7, #28]
 8005480:	e002      	b.n	8005488 <vTaskPriorityDisinheritAfterTimeout+0x30>
            }
            else
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
 8005482:	69bb      	ldr	r3, [r7, #24]
 8005484:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005486:	61fb      	str	r3, [r7, #28]
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
 8005488:	69bb      	ldr	r3, [r7, #24]
 800548a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800548c:	69fa      	ldr	r2, [r7, #28]
 800548e:	429a      	cmp	r2, r3
 8005490:	d072      	beq.n	8005578 <vTaskPriorityDisinheritAfterTimeout+0x120>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8005492:	69bb      	ldr	r3, [r7, #24]
 8005494:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005496:	697a      	ldr	r2, [r7, #20]
 8005498:	429a      	cmp	r2, r3
 800549a:	d16d      	bne.n	8005578 <vTaskPriorityDisinheritAfterTimeout+0x120>

                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800549c:	69bb      	ldr	r3, [r7, #24]
 800549e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054a0:	613b      	str	r3, [r7, #16]
                    pxTCB->uxPriority = uxPriorityToUse;
 80054a2:	69bb      	ldr	r3, [r7, #24]
 80054a4:	69fa      	ldr	r2, [r7, #28]
 80054a6:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == ( ( TickType_t ) 0U ) )
 80054a8:	69bb      	ldr	r3, [r7, #24]
 80054aa:	699b      	ldr	r3, [r3, #24]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	db04      	blt.n	80054ba <vTaskPriorityDisinheritAfterTimeout+0x62>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse );
 80054b0:	69fb      	ldr	r3, [r7, #28]
 80054b2:	f1c3 0205 	rsb	r2, r3, #5
 80054b6:	69bb      	ldr	r3, [r7, #24]
 80054b8:	619a      	str	r2, [r3, #24]
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80054ba:	69bb      	ldr	r3, [r7, #24]
 80054bc:	6959      	ldr	r1, [r3, #20]
 80054be:	693a      	ldr	r2, [r7, #16]
 80054c0:	4613      	mov	r3, r2
 80054c2:	009b      	lsls	r3, r3, #2
 80054c4:	4413      	add	r3, r2
 80054c6:	009b      	lsls	r3, r3, #2
 80054c8:	4a2d      	ldr	r2, [pc, #180]	@ (8005580 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 80054ca:	4413      	add	r3, r2
 80054cc:	4299      	cmp	r1, r3
 80054ce:	d153      	bne.n	8005578 <vTaskPriorityDisinheritAfterTimeout+0x120>
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80054d0:	69bb      	ldr	r3, [r7, #24]
 80054d2:	3304      	adds	r3, #4
 80054d4:	4618      	mov	r0, r3
 80054d6:	f7fe fc37 	bl	8003d48 <uxListRemove>
 80054da:	4603      	mov	r3, r0
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d10a      	bne.n	80054f6 <vTaskPriorityDisinheritAfterTimeout+0x9e>
                        {
                            /* It is known that the task is in its ready list so
                             * there is no need to check again and the port level
                             * reset macro can be called directly. */
                            portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80054e0:	69bb      	ldr	r3, [r7, #24]
 80054e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054e4:	2201      	movs	r2, #1
 80054e6:	fa02 f303 	lsl.w	r3, r2, r3
 80054ea:	43da      	mvns	r2, r3
 80054ec:	4b25      	ldr	r3, [pc, #148]	@ (8005584 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	4013      	ands	r3, r2
 80054f2:	4a24      	ldr	r2, [pc, #144]	@ (8005584 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 80054f4:	6013      	str	r3, [r2, #0]
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
 80054f6:	69bb      	ldr	r3, [r7, #24]
 80054f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054fa:	2201      	movs	r2, #1
 80054fc:	409a      	lsls	r2, r3
 80054fe:	4b21      	ldr	r3, [pc, #132]	@ (8005584 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	4313      	orrs	r3, r2
 8005504:	4a1f      	ldr	r2, [pc, #124]	@ (8005584 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8005506:	6013      	str	r3, [r2, #0]
 8005508:	69bb      	ldr	r3, [r7, #24]
 800550a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800550c:	491c      	ldr	r1, [pc, #112]	@ (8005580 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 800550e:	4613      	mov	r3, r2
 8005510:	009b      	lsls	r3, r3, #2
 8005512:	4413      	add	r3, r2
 8005514:	009b      	lsls	r3, r3, #2
 8005516:	440b      	add	r3, r1
 8005518:	3304      	adds	r3, #4
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	60fb      	str	r3, [r7, #12]
 800551e:	69bb      	ldr	r3, [r7, #24]
 8005520:	68fa      	ldr	r2, [r7, #12]
 8005522:	609a      	str	r2, [r3, #8]
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	689a      	ldr	r2, [r3, #8]
 8005528:	69bb      	ldr	r3, [r7, #24]
 800552a:	60da      	str	r2, [r3, #12]
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	689b      	ldr	r3, [r3, #8]
 8005530:	69ba      	ldr	r2, [r7, #24]
 8005532:	3204      	adds	r2, #4
 8005534:	605a      	str	r2, [r3, #4]
 8005536:	69bb      	ldr	r3, [r7, #24]
 8005538:	1d1a      	adds	r2, r3, #4
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	609a      	str	r2, [r3, #8]
 800553e:	69bb      	ldr	r3, [r7, #24]
 8005540:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005542:	4613      	mov	r3, r2
 8005544:	009b      	lsls	r3, r3, #2
 8005546:	4413      	add	r3, r2
 8005548:	009b      	lsls	r3, r3, #2
 800554a:	4a0d      	ldr	r2, [pc, #52]	@ (8005580 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 800554c:	441a      	add	r2, r3
 800554e:	69bb      	ldr	r3, [r7, #24]
 8005550:	615a      	str	r2, [r3, #20]
 8005552:	69bb      	ldr	r3, [r7, #24]
 8005554:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005556:	490a      	ldr	r1, [pc, #40]	@ (8005580 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 8005558:	4613      	mov	r3, r2
 800555a:	009b      	lsls	r3, r3, #2
 800555c:	4413      	add	r3, r2
 800555e:	009b      	lsls	r3, r3, #2
 8005560:	440b      	add	r3, r1
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	69ba      	ldr	r2, [r7, #24]
 8005566:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005568:	1c59      	adds	r1, r3, #1
 800556a:	4805      	ldr	r0, [pc, #20]	@ (8005580 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 800556c:	4613      	mov	r3, r2
 800556e:	009b      	lsls	r3, r3, #2
 8005570:	4413      	add	r3, r2
 8005572:	009b      	lsls	r3, r3, #2
 8005574:	4403      	add	r3, r0
 8005576:	6019      	str	r1, [r3, #0]
        {
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_vTaskPriorityDisinheritAfterTimeout();
    }
 8005578:	bf00      	nop
 800557a:	3720      	adds	r7, #32
 800557c:	46bd      	mov	sp, r7
 800557e:	bd80      	pop	{r7, pc}
 8005580:	20002f18 	.word	0x20002f18
 8005584:	20002ff4 	.word	0x20002ff4

08005588 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
 8005588:	b480      	push	{r7}
 800558a:	b083      	sub	sp, #12
 800558c:	af00      	add	r7, sp, #0
        TCB_t * pxTCB;

        traceENTER_pvTaskIncrementMutexHeldCount();

        pxTCB = pxCurrentTCB;
 800558e:	4b08      	ldr	r3, [pc, #32]	@ (80055b0 <pvTaskIncrementMutexHeldCount+0x28>)
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	607b      	str	r3, [r7, #4]

        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxTCB != NULL )
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d004      	beq.n	80055a4 <pvTaskIncrementMutexHeldCount+0x1c>
        {
            ( pxTCB->uxMutexesHeld )++;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800559e:	1c5a      	adds	r2, r3, #1
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	649a      	str	r2, [r3, #72]	@ 0x48
        }

        traceRETURN_pvTaskIncrementMutexHeldCount( pxTCB );

        return pxTCB;
 80055a4:	687b      	ldr	r3, [r7, #4]
    }
 80055a6:	4618      	mov	r0, r3
 80055a8:	370c      	adds	r7, #12
 80055aa:	46bd      	mov	sp, r7
 80055ac:	bc80      	pop	{r7}
 80055ae:	4770      	bx	lr
 80055b0:	20002f14 	.word	0x20002f14

080055b4 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b088      	sub	sp, #32
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
 80055bc:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80055be:	4b37      	ldr	r3, [pc, #220]	@ (800569c <prvAddCurrentTaskToDelayedList+0xe8>)
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	61fb      	str	r3, [r7, #28]
    List_t * const pxDelayedList = pxDelayedTaskList;
 80055c4:	4b36      	ldr	r3, [pc, #216]	@ (80056a0 <prvAddCurrentTaskToDelayedList+0xec>)
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	61bb      	str	r3, [r7, #24]
    List_t * const pxOverflowDelayedList = pxOverflowDelayedTaskList;
 80055ca:	4b36      	ldr	r3, [pc, #216]	@ (80056a4 <prvAddCurrentTaskToDelayedList+0xf0>)
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80055d0:	4b35      	ldr	r3, [pc, #212]	@ (80056a8 <prvAddCurrentTaskToDelayedList+0xf4>)
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	3304      	adds	r3, #4
 80055d6:	4618      	mov	r0, r3
 80055d8:	f7fe fbb6 	bl	8003d48 <uxListRemove>
 80055dc:	4603      	mov	r3, r0
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d10b      	bne.n	80055fa <prvAddCurrentTaskToDelayedList+0x46>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80055e2:	4b31      	ldr	r3, [pc, #196]	@ (80056a8 <prvAddCurrentTaskToDelayedList+0xf4>)
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055e8:	2201      	movs	r2, #1
 80055ea:	fa02 f303 	lsl.w	r3, r2, r3
 80055ee:	43da      	mvns	r2, r3
 80055f0:	4b2e      	ldr	r3, [pc, #184]	@ (80056ac <prvAddCurrentTaskToDelayedList+0xf8>)
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	4013      	ands	r3, r2
 80055f6:	4a2d      	ldr	r2, [pc, #180]	@ (80056ac <prvAddCurrentTaskToDelayedList+0xf8>)
 80055f8:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005600:	d124      	bne.n	800564c <prvAddCurrentTaskToDelayedList+0x98>
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d021      	beq.n	800564c <prvAddCurrentTaskToDelayedList+0x98>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005608:	4b29      	ldr	r3, [pc, #164]	@ (80056b0 <prvAddCurrentTaskToDelayedList+0xfc>)
 800560a:	685b      	ldr	r3, [r3, #4]
 800560c:	613b      	str	r3, [r7, #16]
 800560e:	4b26      	ldr	r3, [pc, #152]	@ (80056a8 <prvAddCurrentTaskToDelayedList+0xf4>)
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	693a      	ldr	r2, [r7, #16]
 8005614:	609a      	str	r2, [r3, #8]
 8005616:	4b24      	ldr	r3, [pc, #144]	@ (80056a8 <prvAddCurrentTaskToDelayedList+0xf4>)
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	693a      	ldr	r2, [r7, #16]
 800561c:	6892      	ldr	r2, [r2, #8]
 800561e:	60da      	str	r2, [r3, #12]
 8005620:	4b21      	ldr	r3, [pc, #132]	@ (80056a8 <prvAddCurrentTaskToDelayedList+0xf4>)
 8005622:	681a      	ldr	r2, [r3, #0]
 8005624:	693b      	ldr	r3, [r7, #16]
 8005626:	689b      	ldr	r3, [r3, #8]
 8005628:	3204      	adds	r2, #4
 800562a:	605a      	str	r2, [r3, #4]
 800562c:	4b1e      	ldr	r3, [pc, #120]	@ (80056a8 <prvAddCurrentTaskToDelayedList+0xf4>)
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	1d1a      	adds	r2, r3, #4
 8005632:	693b      	ldr	r3, [r7, #16]
 8005634:	609a      	str	r2, [r3, #8]
 8005636:	4b1c      	ldr	r3, [pc, #112]	@ (80056a8 <prvAddCurrentTaskToDelayedList+0xf4>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	4a1d      	ldr	r2, [pc, #116]	@ (80056b0 <prvAddCurrentTaskToDelayedList+0xfc>)
 800563c:	615a      	str	r2, [r3, #20]
 800563e:	4b1c      	ldr	r3, [pc, #112]	@ (80056b0 <prvAddCurrentTaskToDelayedList+0xfc>)
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	3301      	adds	r3, #1
 8005644:	4a1a      	ldr	r2, [pc, #104]	@ (80056b0 <prvAddCurrentTaskToDelayedList+0xfc>)
 8005646:	6013      	str	r3, [r2, #0]
 8005648:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 800564a:	e022      	b.n	8005692 <prvAddCurrentTaskToDelayedList+0xde>
            xTimeToWake = xConstTickCount + xTicksToWait;
 800564c:	69fa      	ldr	r2, [r7, #28]
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	4413      	add	r3, r2
 8005652:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005654:	4b14      	ldr	r3, [pc, #80]	@ (80056a8 <prvAddCurrentTaskToDelayedList+0xf4>)
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	68fa      	ldr	r2, [r7, #12]
 800565a:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 800565c:	68fa      	ldr	r2, [r7, #12]
 800565e:	69fb      	ldr	r3, [r7, #28]
 8005660:	429a      	cmp	r2, r3
 8005662:	d207      	bcs.n	8005674 <prvAddCurrentTaskToDelayedList+0xc0>
                vListInsert( pxOverflowDelayedList, &( pxCurrentTCB->xStateListItem ) );
 8005664:	4b10      	ldr	r3, [pc, #64]	@ (80056a8 <prvAddCurrentTaskToDelayedList+0xf4>)
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	3304      	adds	r3, #4
 800566a:	4619      	mov	r1, r3
 800566c:	6978      	ldr	r0, [r7, #20]
 800566e:	f7fe fb33 	bl	8003cd8 <vListInsert>
}
 8005672:	e00e      	b.n	8005692 <prvAddCurrentTaskToDelayedList+0xde>
                vListInsert( pxDelayedList, &( pxCurrentTCB->xStateListItem ) );
 8005674:	4b0c      	ldr	r3, [pc, #48]	@ (80056a8 <prvAddCurrentTaskToDelayedList+0xf4>)
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	3304      	adds	r3, #4
 800567a:	4619      	mov	r1, r3
 800567c:	69b8      	ldr	r0, [r7, #24]
 800567e:	f7fe fb2b 	bl	8003cd8 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8005682:	4b0c      	ldr	r3, [pc, #48]	@ (80056b4 <prvAddCurrentTaskToDelayedList+0x100>)
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	68fa      	ldr	r2, [r7, #12]
 8005688:	429a      	cmp	r2, r3
 800568a:	d202      	bcs.n	8005692 <prvAddCurrentTaskToDelayedList+0xde>
                    xNextTaskUnblockTime = xTimeToWake;
 800568c:	4a09      	ldr	r2, [pc, #36]	@ (80056b4 <prvAddCurrentTaskToDelayedList+0x100>)
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	6013      	str	r3, [r2, #0]
}
 8005692:	bf00      	nop
 8005694:	3720      	adds	r7, #32
 8005696:	46bd      	mov	sp, r7
 8005698:	bd80      	pop	{r7, pc}
 800569a:	bf00      	nop
 800569c:	20002ff0 	.word	0x20002ff0
 80056a0:	20002fa4 	.word	0x20002fa4
 80056a4:	20002fa8 	.word	0x20002fa8
 80056a8:	20002f14 	.word	0x20002f14
 80056ac:	20002ff4 	.word	0x20002ff4
 80056b0:	20002fd8 	.word	0x20002fd8
 80056b4:	2000300c 	.word	0x2000300c

080056b8 <__cvt>:
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80056be:	461d      	mov	r5, r3
 80056c0:	bfbb      	ittet	lt
 80056c2:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 80056c6:	461d      	movlt	r5, r3
 80056c8:	2300      	movge	r3, #0
 80056ca:	232d      	movlt	r3, #45	@ 0x2d
 80056cc:	b088      	sub	sp, #32
 80056ce:	4614      	mov	r4, r2
 80056d0:	bfb8      	it	lt
 80056d2:	4614      	movlt	r4, r2
 80056d4:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80056d6:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 80056d8:	7013      	strb	r3, [r2, #0]
 80056da:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80056dc:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 80056e0:	f023 0820 	bic.w	r8, r3, #32
 80056e4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80056e8:	d005      	beq.n	80056f6 <__cvt+0x3e>
 80056ea:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80056ee:	d100      	bne.n	80056f2 <__cvt+0x3a>
 80056f0:	3601      	adds	r6, #1
 80056f2:	2302      	movs	r3, #2
 80056f4:	e000      	b.n	80056f8 <__cvt+0x40>
 80056f6:	2303      	movs	r3, #3
 80056f8:	aa07      	add	r2, sp, #28
 80056fa:	9204      	str	r2, [sp, #16]
 80056fc:	aa06      	add	r2, sp, #24
 80056fe:	e9cd a202 	strd	sl, r2, [sp, #8]
 8005702:	e9cd 3600 	strd	r3, r6, [sp]
 8005706:	4622      	mov	r2, r4
 8005708:	462b      	mov	r3, r5
 800570a:	f001 f981 	bl	8006a10 <_dtoa_r>
 800570e:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005712:	4607      	mov	r7, r0
 8005714:	d119      	bne.n	800574a <__cvt+0x92>
 8005716:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8005718:	07db      	lsls	r3, r3, #31
 800571a:	d50e      	bpl.n	800573a <__cvt+0x82>
 800571c:	eb00 0906 	add.w	r9, r0, r6
 8005720:	2200      	movs	r2, #0
 8005722:	2300      	movs	r3, #0
 8005724:	4620      	mov	r0, r4
 8005726:	4629      	mov	r1, r5
 8005728:	f7fb f93e 	bl	80009a8 <__aeabi_dcmpeq>
 800572c:	b108      	cbz	r0, 8005732 <__cvt+0x7a>
 800572e:	f8cd 901c 	str.w	r9, [sp, #28]
 8005732:	2230      	movs	r2, #48	@ 0x30
 8005734:	9b07      	ldr	r3, [sp, #28]
 8005736:	454b      	cmp	r3, r9
 8005738:	d31e      	bcc.n	8005778 <__cvt+0xc0>
 800573a:	4638      	mov	r0, r7
 800573c:	9b07      	ldr	r3, [sp, #28]
 800573e:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8005740:	1bdb      	subs	r3, r3, r7
 8005742:	6013      	str	r3, [r2, #0]
 8005744:	b008      	add	sp, #32
 8005746:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800574a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800574e:	eb00 0906 	add.w	r9, r0, r6
 8005752:	d1e5      	bne.n	8005720 <__cvt+0x68>
 8005754:	7803      	ldrb	r3, [r0, #0]
 8005756:	2b30      	cmp	r3, #48	@ 0x30
 8005758:	d10a      	bne.n	8005770 <__cvt+0xb8>
 800575a:	2200      	movs	r2, #0
 800575c:	2300      	movs	r3, #0
 800575e:	4620      	mov	r0, r4
 8005760:	4629      	mov	r1, r5
 8005762:	f7fb f921 	bl	80009a8 <__aeabi_dcmpeq>
 8005766:	b918      	cbnz	r0, 8005770 <__cvt+0xb8>
 8005768:	f1c6 0601 	rsb	r6, r6, #1
 800576c:	f8ca 6000 	str.w	r6, [sl]
 8005770:	f8da 3000 	ldr.w	r3, [sl]
 8005774:	4499      	add	r9, r3
 8005776:	e7d3      	b.n	8005720 <__cvt+0x68>
 8005778:	1c59      	adds	r1, r3, #1
 800577a:	9107      	str	r1, [sp, #28]
 800577c:	701a      	strb	r2, [r3, #0]
 800577e:	e7d9      	b.n	8005734 <__cvt+0x7c>

08005780 <__exponent>:
 8005780:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005782:	2900      	cmp	r1, #0
 8005784:	bfb6      	itet	lt
 8005786:	232d      	movlt	r3, #45	@ 0x2d
 8005788:	232b      	movge	r3, #43	@ 0x2b
 800578a:	4249      	neglt	r1, r1
 800578c:	2909      	cmp	r1, #9
 800578e:	7002      	strb	r2, [r0, #0]
 8005790:	7043      	strb	r3, [r0, #1]
 8005792:	dd29      	ble.n	80057e8 <__exponent+0x68>
 8005794:	f10d 0307 	add.w	r3, sp, #7
 8005798:	461d      	mov	r5, r3
 800579a:	270a      	movs	r7, #10
 800579c:	fbb1 f6f7 	udiv	r6, r1, r7
 80057a0:	461a      	mov	r2, r3
 80057a2:	fb07 1416 	mls	r4, r7, r6, r1
 80057a6:	3430      	adds	r4, #48	@ 0x30
 80057a8:	f802 4c01 	strb.w	r4, [r2, #-1]
 80057ac:	460c      	mov	r4, r1
 80057ae:	2c63      	cmp	r4, #99	@ 0x63
 80057b0:	4631      	mov	r1, r6
 80057b2:	f103 33ff 	add.w	r3, r3, #4294967295
 80057b6:	dcf1      	bgt.n	800579c <__exponent+0x1c>
 80057b8:	3130      	adds	r1, #48	@ 0x30
 80057ba:	1e94      	subs	r4, r2, #2
 80057bc:	f803 1c01 	strb.w	r1, [r3, #-1]
 80057c0:	4623      	mov	r3, r4
 80057c2:	1c41      	adds	r1, r0, #1
 80057c4:	42ab      	cmp	r3, r5
 80057c6:	d30a      	bcc.n	80057de <__exponent+0x5e>
 80057c8:	f10d 0309 	add.w	r3, sp, #9
 80057cc:	1a9b      	subs	r3, r3, r2
 80057ce:	42ac      	cmp	r4, r5
 80057d0:	bf88      	it	hi
 80057d2:	2300      	movhi	r3, #0
 80057d4:	3302      	adds	r3, #2
 80057d6:	4403      	add	r3, r0
 80057d8:	1a18      	subs	r0, r3, r0
 80057da:	b003      	add	sp, #12
 80057dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80057de:	f813 6b01 	ldrb.w	r6, [r3], #1
 80057e2:	f801 6f01 	strb.w	r6, [r1, #1]!
 80057e6:	e7ed      	b.n	80057c4 <__exponent+0x44>
 80057e8:	2330      	movs	r3, #48	@ 0x30
 80057ea:	3130      	adds	r1, #48	@ 0x30
 80057ec:	7083      	strb	r3, [r0, #2]
 80057ee:	70c1      	strb	r1, [r0, #3]
 80057f0:	1d03      	adds	r3, r0, #4
 80057f2:	e7f1      	b.n	80057d8 <__exponent+0x58>

080057f4 <_printf_float>:
 80057f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057f8:	b091      	sub	sp, #68	@ 0x44
 80057fa:	460c      	mov	r4, r1
 80057fc:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8005800:	4616      	mov	r6, r2
 8005802:	461f      	mov	r7, r3
 8005804:	4605      	mov	r5, r0
 8005806:	f000 ffe3 	bl	80067d0 <_localeconv_r>
 800580a:	6803      	ldr	r3, [r0, #0]
 800580c:	4618      	mov	r0, r3
 800580e:	9308      	str	r3, [sp, #32]
 8005810:	f7fa fc9e 	bl	8000150 <strlen>
 8005814:	2300      	movs	r3, #0
 8005816:	930e      	str	r3, [sp, #56]	@ 0x38
 8005818:	f8d8 3000 	ldr.w	r3, [r8]
 800581c:	9009      	str	r0, [sp, #36]	@ 0x24
 800581e:	3307      	adds	r3, #7
 8005820:	f023 0307 	bic.w	r3, r3, #7
 8005824:	f103 0208 	add.w	r2, r3, #8
 8005828:	f894 a018 	ldrb.w	sl, [r4, #24]
 800582c:	f8d4 b000 	ldr.w	fp, [r4]
 8005830:	f8c8 2000 	str.w	r2, [r8]
 8005834:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005838:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800583c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800583e:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8005842:	f04f 32ff 	mov.w	r2, #4294967295
 8005846:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800584a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800584e:	4b9c      	ldr	r3, [pc, #624]	@ (8005ac0 <_printf_float+0x2cc>)
 8005850:	f7fb f8dc 	bl	8000a0c <__aeabi_dcmpun>
 8005854:	bb70      	cbnz	r0, 80058b4 <_printf_float+0xc0>
 8005856:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800585a:	f04f 32ff 	mov.w	r2, #4294967295
 800585e:	4b98      	ldr	r3, [pc, #608]	@ (8005ac0 <_printf_float+0x2cc>)
 8005860:	f7fb f8b6 	bl	80009d0 <__aeabi_dcmple>
 8005864:	bb30      	cbnz	r0, 80058b4 <_printf_float+0xc0>
 8005866:	2200      	movs	r2, #0
 8005868:	2300      	movs	r3, #0
 800586a:	4640      	mov	r0, r8
 800586c:	4649      	mov	r1, r9
 800586e:	f7fb f8a5 	bl	80009bc <__aeabi_dcmplt>
 8005872:	b110      	cbz	r0, 800587a <_printf_float+0x86>
 8005874:	232d      	movs	r3, #45	@ 0x2d
 8005876:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800587a:	4a92      	ldr	r2, [pc, #584]	@ (8005ac4 <_printf_float+0x2d0>)
 800587c:	4b92      	ldr	r3, [pc, #584]	@ (8005ac8 <_printf_float+0x2d4>)
 800587e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8005882:	bf94      	ite	ls
 8005884:	4690      	movls	r8, r2
 8005886:	4698      	movhi	r8, r3
 8005888:	2303      	movs	r3, #3
 800588a:	f04f 0900 	mov.w	r9, #0
 800588e:	6123      	str	r3, [r4, #16]
 8005890:	f02b 0304 	bic.w	r3, fp, #4
 8005894:	6023      	str	r3, [r4, #0]
 8005896:	4633      	mov	r3, r6
 8005898:	4621      	mov	r1, r4
 800589a:	4628      	mov	r0, r5
 800589c:	9700      	str	r7, [sp, #0]
 800589e:	aa0f      	add	r2, sp, #60	@ 0x3c
 80058a0:	f000 f9d4 	bl	8005c4c <_printf_common>
 80058a4:	3001      	adds	r0, #1
 80058a6:	f040 8090 	bne.w	80059ca <_printf_float+0x1d6>
 80058aa:	f04f 30ff 	mov.w	r0, #4294967295
 80058ae:	b011      	add	sp, #68	@ 0x44
 80058b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058b4:	4642      	mov	r2, r8
 80058b6:	464b      	mov	r3, r9
 80058b8:	4640      	mov	r0, r8
 80058ba:	4649      	mov	r1, r9
 80058bc:	f7fb f8a6 	bl	8000a0c <__aeabi_dcmpun>
 80058c0:	b148      	cbz	r0, 80058d6 <_printf_float+0xe2>
 80058c2:	464b      	mov	r3, r9
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	bfb8      	it	lt
 80058c8:	232d      	movlt	r3, #45	@ 0x2d
 80058ca:	4a80      	ldr	r2, [pc, #512]	@ (8005acc <_printf_float+0x2d8>)
 80058cc:	bfb8      	it	lt
 80058ce:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80058d2:	4b7f      	ldr	r3, [pc, #508]	@ (8005ad0 <_printf_float+0x2dc>)
 80058d4:	e7d3      	b.n	800587e <_printf_float+0x8a>
 80058d6:	6863      	ldr	r3, [r4, #4]
 80058d8:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 80058dc:	1c5a      	adds	r2, r3, #1
 80058de:	d13f      	bne.n	8005960 <_printf_float+0x16c>
 80058e0:	2306      	movs	r3, #6
 80058e2:	6063      	str	r3, [r4, #4]
 80058e4:	2200      	movs	r2, #0
 80058e6:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 80058ea:	6023      	str	r3, [r4, #0]
 80058ec:	9206      	str	r2, [sp, #24]
 80058ee:	aa0e      	add	r2, sp, #56	@ 0x38
 80058f0:	e9cd a204 	strd	sl, r2, [sp, #16]
 80058f4:	aa0d      	add	r2, sp, #52	@ 0x34
 80058f6:	9203      	str	r2, [sp, #12]
 80058f8:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 80058fc:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8005900:	6863      	ldr	r3, [r4, #4]
 8005902:	4642      	mov	r2, r8
 8005904:	9300      	str	r3, [sp, #0]
 8005906:	4628      	mov	r0, r5
 8005908:	464b      	mov	r3, r9
 800590a:	910a      	str	r1, [sp, #40]	@ 0x28
 800590c:	f7ff fed4 	bl	80056b8 <__cvt>
 8005910:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005912:	4680      	mov	r8, r0
 8005914:	2947      	cmp	r1, #71	@ 0x47
 8005916:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8005918:	d128      	bne.n	800596c <_printf_float+0x178>
 800591a:	1cc8      	adds	r0, r1, #3
 800591c:	db02      	blt.n	8005924 <_printf_float+0x130>
 800591e:	6863      	ldr	r3, [r4, #4]
 8005920:	4299      	cmp	r1, r3
 8005922:	dd40      	ble.n	80059a6 <_printf_float+0x1b2>
 8005924:	f1aa 0a02 	sub.w	sl, sl, #2
 8005928:	fa5f fa8a 	uxtb.w	sl, sl
 800592c:	4652      	mov	r2, sl
 800592e:	3901      	subs	r1, #1
 8005930:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005934:	910d      	str	r1, [sp, #52]	@ 0x34
 8005936:	f7ff ff23 	bl	8005780 <__exponent>
 800593a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800593c:	4681      	mov	r9, r0
 800593e:	1813      	adds	r3, r2, r0
 8005940:	2a01      	cmp	r2, #1
 8005942:	6123      	str	r3, [r4, #16]
 8005944:	dc02      	bgt.n	800594c <_printf_float+0x158>
 8005946:	6822      	ldr	r2, [r4, #0]
 8005948:	07d2      	lsls	r2, r2, #31
 800594a:	d501      	bpl.n	8005950 <_printf_float+0x15c>
 800594c:	3301      	adds	r3, #1
 800594e:	6123      	str	r3, [r4, #16]
 8005950:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8005954:	2b00      	cmp	r3, #0
 8005956:	d09e      	beq.n	8005896 <_printf_float+0xa2>
 8005958:	232d      	movs	r3, #45	@ 0x2d
 800595a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800595e:	e79a      	b.n	8005896 <_printf_float+0xa2>
 8005960:	2947      	cmp	r1, #71	@ 0x47
 8005962:	d1bf      	bne.n	80058e4 <_printf_float+0xf0>
 8005964:	2b00      	cmp	r3, #0
 8005966:	d1bd      	bne.n	80058e4 <_printf_float+0xf0>
 8005968:	2301      	movs	r3, #1
 800596a:	e7ba      	b.n	80058e2 <_printf_float+0xee>
 800596c:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005970:	d9dc      	bls.n	800592c <_printf_float+0x138>
 8005972:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005976:	d118      	bne.n	80059aa <_printf_float+0x1b6>
 8005978:	2900      	cmp	r1, #0
 800597a:	6863      	ldr	r3, [r4, #4]
 800597c:	dd0b      	ble.n	8005996 <_printf_float+0x1a2>
 800597e:	6121      	str	r1, [r4, #16]
 8005980:	b913      	cbnz	r3, 8005988 <_printf_float+0x194>
 8005982:	6822      	ldr	r2, [r4, #0]
 8005984:	07d0      	lsls	r0, r2, #31
 8005986:	d502      	bpl.n	800598e <_printf_float+0x19a>
 8005988:	3301      	adds	r3, #1
 800598a:	440b      	add	r3, r1
 800598c:	6123      	str	r3, [r4, #16]
 800598e:	f04f 0900 	mov.w	r9, #0
 8005992:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005994:	e7dc      	b.n	8005950 <_printf_float+0x15c>
 8005996:	b913      	cbnz	r3, 800599e <_printf_float+0x1aa>
 8005998:	6822      	ldr	r2, [r4, #0]
 800599a:	07d2      	lsls	r2, r2, #31
 800599c:	d501      	bpl.n	80059a2 <_printf_float+0x1ae>
 800599e:	3302      	adds	r3, #2
 80059a0:	e7f4      	b.n	800598c <_printf_float+0x198>
 80059a2:	2301      	movs	r3, #1
 80059a4:	e7f2      	b.n	800598c <_printf_float+0x198>
 80059a6:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80059aa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80059ac:	4299      	cmp	r1, r3
 80059ae:	db05      	blt.n	80059bc <_printf_float+0x1c8>
 80059b0:	6823      	ldr	r3, [r4, #0]
 80059b2:	6121      	str	r1, [r4, #16]
 80059b4:	07d8      	lsls	r0, r3, #31
 80059b6:	d5ea      	bpl.n	800598e <_printf_float+0x19a>
 80059b8:	1c4b      	adds	r3, r1, #1
 80059ba:	e7e7      	b.n	800598c <_printf_float+0x198>
 80059bc:	2900      	cmp	r1, #0
 80059be:	bfcc      	ite	gt
 80059c0:	2201      	movgt	r2, #1
 80059c2:	f1c1 0202 	rsble	r2, r1, #2
 80059c6:	4413      	add	r3, r2
 80059c8:	e7e0      	b.n	800598c <_printf_float+0x198>
 80059ca:	6823      	ldr	r3, [r4, #0]
 80059cc:	055a      	lsls	r2, r3, #21
 80059ce:	d407      	bmi.n	80059e0 <_printf_float+0x1ec>
 80059d0:	6923      	ldr	r3, [r4, #16]
 80059d2:	4642      	mov	r2, r8
 80059d4:	4631      	mov	r1, r6
 80059d6:	4628      	mov	r0, r5
 80059d8:	47b8      	blx	r7
 80059da:	3001      	adds	r0, #1
 80059dc:	d12b      	bne.n	8005a36 <_printf_float+0x242>
 80059de:	e764      	b.n	80058aa <_printf_float+0xb6>
 80059e0:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80059e4:	f240 80dc 	bls.w	8005ba0 <_printf_float+0x3ac>
 80059e8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80059ec:	2200      	movs	r2, #0
 80059ee:	2300      	movs	r3, #0
 80059f0:	f7fa ffda 	bl	80009a8 <__aeabi_dcmpeq>
 80059f4:	2800      	cmp	r0, #0
 80059f6:	d033      	beq.n	8005a60 <_printf_float+0x26c>
 80059f8:	2301      	movs	r3, #1
 80059fa:	4631      	mov	r1, r6
 80059fc:	4628      	mov	r0, r5
 80059fe:	4a35      	ldr	r2, [pc, #212]	@ (8005ad4 <_printf_float+0x2e0>)
 8005a00:	47b8      	blx	r7
 8005a02:	3001      	adds	r0, #1
 8005a04:	f43f af51 	beq.w	80058aa <_printf_float+0xb6>
 8005a08:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8005a0c:	4543      	cmp	r3, r8
 8005a0e:	db02      	blt.n	8005a16 <_printf_float+0x222>
 8005a10:	6823      	ldr	r3, [r4, #0]
 8005a12:	07d8      	lsls	r0, r3, #31
 8005a14:	d50f      	bpl.n	8005a36 <_printf_float+0x242>
 8005a16:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005a1a:	4631      	mov	r1, r6
 8005a1c:	4628      	mov	r0, r5
 8005a1e:	47b8      	blx	r7
 8005a20:	3001      	adds	r0, #1
 8005a22:	f43f af42 	beq.w	80058aa <_printf_float+0xb6>
 8005a26:	f04f 0900 	mov.w	r9, #0
 8005a2a:	f108 38ff 	add.w	r8, r8, #4294967295
 8005a2e:	f104 0a1a 	add.w	sl, r4, #26
 8005a32:	45c8      	cmp	r8, r9
 8005a34:	dc09      	bgt.n	8005a4a <_printf_float+0x256>
 8005a36:	6823      	ldr	r3, [r4, #0]
 8005a38:	079b      	lsls	r3, r3, #30
 8005a3a:	f100 8102 	bmi.w	8005c42 <_printf_float+0x44e>
 8005a3e:	68e0      	ldr	r0, [r4, #12]
 8005a40:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005a42:	4298      	cmp	r0, r3
 8005a44:	bfb8      	it	lt
 8005a46:	4618      	movlt	r0, r3
 8005a48:	e731      	b.n	80058ae <_printf_float+0xba>
 8005a4a:	2301      	movs	r3, #1
 8005a4c:	4652      	mov	r2, sl
 8005a4e:	4631      	mov	r1, r6
 8005a50:	4628      	mov	r0, r5
 8005a52:	47b8      	blx	r7
 8005a54:	3001      	adds	r0, #1
 8005a56:	f43f af28 	beq.w	80058aa <_printf_float+0xb6>
 8005a5a:	f109 0901 	add.w	r9, r9, #1
 8005a5e:	e7e8      	b.n	8005a32 <_printf_float+0x23e>
 8005a60:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	dc38      	bgt.n	8005ad8 <_printf_float+0x2e4>
 8005a66:	2301      	movs	r3, #1
 8005a68:	4631      	mov	r1, r6
 8005a6a:	4628      	mov	r0, r5
 8005a6c:	4a19      	ldr	r2, [pc, #100]	@ (8005ad4 <_printf_float+0x2e0>)
 8005a6e:	47b8      	blx	r7
 8005a70:	3001      	adds	r0, #1
 8005a72:	f43f af1a 	beq.w	80058aa <_printf_float+0xb6>
 8005a76:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8005a7a:	ea59 0303 	orrs.w	r3, r9, r3
 8005a7e:	d102      	bne.n	8005a86 <_printf_float+0x292>
 8005a80:	6823      	ldr	r3, [r4, #0]
 8005a82:	07d9      	lsls	r1, r3, #31
 8005a84:	d5d7      	bpl.n	8005a36 <_printf_float+0x242>
 8005a86:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005a8a:	4631      	mov	r1, r6
 8005a8c:	4628      	mov	r0, r5
 8005a8e:	47b8      	blx	r7
 8005a90:	3001      	adds	r0, #1
 8005a92:	f43f af0a 	beq.w	80058aa <_printf_float+0xb6>
 8005a96:	f04f 0a00 	mov.w	sl, #0
 8005a9a:	f104 0b1a 	add.w	fp, r4, #26
 8005a9e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005aa0:	425b      	negs	r3, r3
 8005aa2:	4553      	cmp	r3, sl
 8005aa4:	dc01      	bgt.n	8005aaa <_printf_float+0x2b6>
 8005aa6:	464b      	mov	r3, r9
 8005aa8:	e793      	b.n	80059d2 <_printf_float+0x1de>
 8005aaa:	2301      	movs	r3, #1
 8005aac:	465a      	mov	r2, fp
 8005aae:	4631      	mov	r1, r6
 8005ab0:	4628      	mov	r0, r5
 8005ab2:	47b8      	blx	r7
 8005ab4:	3001      	adds	r0, #1
 8005ab6:	f43f aef8 	beq.w	80058aa <_printf_float+0xb6>
 8005aba:	f10a 0a01 	add.w	sl, sl, #1
 8005abe:	e7ee      	b.n	8005a9e <_printf_float+0x2aa>
 8005ac0:	7fefffff 	.word	0x7fefffff
 8005ac4:	08009eaa 	.word	0x08009eaa
 8005ac8:	08009eae 	.word	0x08009eae
 8005acc:	08009eb2 	.word	0x08009eb2
 8005ad0:	08009eb6 	.word	0x08009eb6
 8005ad4:	08009eba 	.word	0x08009eba
 8005ad8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005ada:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8005ade:	4553      	cmp	r3, sl
 8005ae0:	bfa8      	it	ge
 8005ae2:	4653      	movge	r3, sl
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	4699      	mov	r9, r3
 8005ae8:	dc36      	bgt.n	8005b58 <_printf_float+0x364>
 8005aea:	f04f 0b00 	mov.w	fp, #0
 8005aee:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005af2:	f104 021a 	add.w	r2, r4, #26
 8005af6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005af8:	930a      	str	r3, [sp, #40]	@ 0x28
 8005afa:	eba3 0309 	sub.w	r3, r3, r9
 8005afe:	455b      	cmp	r3, fp
 8005b00:	dc31      	bgt.n	8005b66 <_printf_float+0x372>
 8005b02:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005b04:	459a      	cmp	sl, r3
 8005b06:	dc3a      	bgt.n	8005b7e <_printf_float+0x38a>
 8005b08:	6823      	ldr	r3, [r4, #0]
 8005b0a:	07da      	lsls	r2, r3, #31
 8005b0c:	d437      	bmi.n	8005b7e <_printf_float+0x38a>
 8005b0e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005b10:	ebaa 0903 	sub.w	r9, sl, r3
 8005b14:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005b16:	ebaa 0303 	sub.w	r3, sl, r3
 8005b1a:	4599      	cmp	r9, r3
 8005b1c:	bfa8      	it	ge
 8005b1e:	4699      	movge	r9, r3
 8005b20:	f1b9 0f00 	cmp.w	r9, #0
 8005b24:	dc33      	bgt.n	8005b8e <_printf_float+0x39a>
 8005b26:	f04f 0800 	mov.w	r8, #0
 8005b2a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005b2e:	f104 0b1a 	add.w	fp, r4, #26
 8005b32:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005b34:	ebaa 0303 	sub.w	r3, sl, r3
 8005b38:	eba3 0309 	sub.w	r3, r3, r9
 8005b3c:	4543      	cmp	r3, r8
 8005b3e:	f77f af7a 	ble.w	8005a36 <_printf_float+0x242>
 8005b42:	2301      	movs	r3, #1
 8005b44:	465a      	mov	r2, fp
 8005b46:	4631      	mov	r1, r6
 8005b48:	4628      	mov	r0, r5
 8005b4a:	47b8      	blx	r7
 8005b4c:	3001      	adds	r0, #1
 8005b4e:	f43f aeac 	beq.w	80058aa <_printf_float+0xb6>
 8005b52:	f108 0801 	add.w	r8, r8, #1
 8005b56:	e7ec      	b.n	8005b32 <_printf_float+0x33e>
 8005b58:	4642      	mov	r2, r8
 8005b5a:	4631      	mov	r1, r6
 8005b5c:	4628      	mov	r0, r5
 8005b5e:	47b8      	blx	r7
 8005b60:	3001      	adds	r0, #1
 8005b62:	d1c2      	bne.n	8005aea <_printf_float+0x2f6>
 8005b64:	e6a1      	b.n	80058aa <_printf_float+0xb6>
 8005b66:	2301      	movs	r3, #1
 8005b68:	4631      	mov	r1, r6
 8005b6a:	4628      	mov	r0, r5
 8005b6c:	920a      	str	r2, [sp, #40]	@ 0x28
 8005b6e:	47b8      	blx	r7
 8005b70:	3001      	adds	r0, #1
 8005b72:	f43f ae9a 	beq.w	80058aa <_printf_float+0xb6>
 8005b76:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005b78:	f10b 0b01 	add.w	fp, fp, #1
 8005b7c:	e7bb      	b.n	8005af6 <_printf_float+0x302>
 8005b7e:	4631      	mov	r1, r6
 8005b80:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005b84:	4628      	mov	r0, r5
 8005b86:	47b8      	blx	r7
 8005b88:	3001      	adds	r0, #1
 8005b8a:	d1c0      	bne.n	8005b0e <_printf_float+0x31a>
 8005b8c:	e68d      	b.n	80058aa <_printf_float+0xb6>
 8005b8e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005b90:	464b      	mov	r3, r9
 8005b92:	4631      	mov	r1, r6
 8005b94:	4628      	mov	r0, r5
 8005b96:	4442      	add	r2, r8
 8005b98:	47b8      	blx	r7
 8005b9a:	3001      	adds	r0, #1
 8005b9c:	d1c3      	bne.n	8005b26 <_printf_float+0x332>
 8005b9e:	e684      	b.n	80058aa <_printf_float+0xb6>
 8005ba0:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8005ba4:	f1ba 0f01 	cmp.w	sl, #1
 8005ba8:	dc01      	bgt.n	8005bae <_printf_float+0x3ba>
 8005baa:	07db      	lsls	r3, r3, #31
 8005bac:	d536      	bpl.n	8005c1c <_printf_float+0x428>
 8005bae:	2301      	movs	r3, #1
 8005bb0:	4642      	mov	r2, r8
 8005bb2:	4631      	mov	r1, r6
 8005bb4:	4628      	mov	r0, r5
 8005bb6:	47b8      	blx	r7
 8005bb8:	3001      	adds	r0, #1
 8005bba:	f43f ae76 	beq.w	80058aa <_printf_float+0xb6>
 8005bbe:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005bc2:	4631      	mov	r1, r6
 8005bc4:	4628      	mov	r0, r5
 8005bc6:	47b8      	blx	r7
 8005bc8:	3001      	adds	r0, #1
 8005bca:	f43f ae6e 	beq.w	80058aa <_printf_float+0xb6>
 8005bce:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005bda:	f7fa fee5 	bl	80009a8 <__aeabi_dcmpeq>
 8005bde:	b9c0      	cbnz	r0, 8005c12 <_printf_float+0x41e>
 8005be0:	4653      	mov	r3, sl
 8005be2:	f108 0201 	add.w	r2, r8, #1
 8005be6:	4631      	mov	r1, r6
 8005be8:	4628      	mov	r0, r5
 8005bea:	47b8      	blx	r7
 8005bec:	3001      	adds	r0, #1
 8005bee:	d10c      	bne.n	8005c0a <_printf_float+0x416>
 8005bf0:	e65b      	b.n	80058aa <_printf_float+0xb6>
 8005bf2:	2301      	movs	r3, #1
 8005bf4:	465a      	mov	r2, fp
 8005bf6:	4631      	mov	r1, r6
 8005bf8:	4628      	mov	r0, r5
 8005bfa:	47b8      	blx	r7
 8005bfc:	3001      	adds	r0, #1
 8005bfe:	f43f ae54 	beq.w	80058aa <_printf_float+0xb6>
 8005c02:	f108 0801 	add.w	r8, r8, #1
 8005c06:	45d0      	cmp	r8, sl
 8005c08:	dbf3      	blt.n	8005bf2 <_printf_float+0x3fe>
 8005c0a:	464b      	mov	r3, r9
 8005c0c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005c10:	e6e0      	b.n	80059d4 <_printf_float+0x1e0>
 8005c12:	f04f 0800 	mov.w	r8, #0
 8005c16:	f104 0b1a 	add.w	fp, r4, #26
 8005c1a:	e7f4      	b.n	8005c06 <_printf_float+0x412>
 8005c1c:	2301      	movs	r3, #1
 8005c1e:	4642      	mov	r2, r8
 8005c20:	e7e1      	b.n	8005be6 <_printf_float+0x3f2>
 8005c22:	2301      	movs	r3, #1
 8005c24:	464a      	mov	r2, r9
 8005c26:	4631      	mov	r1, r6
 8005c28:	4628      	mov	r0, r5
 8005c2a:	47b8      	blx	r7
 8005c2c:	3001      	adds	r0, #1
 8005c2e:	f43f ae3c 	beq.w	80058aa <_printf_float+0xb6>
 8005c32:	f108 0801 	add.w	r8, r8, #1
 8005c36:	68e3      	ldr	r3, [r4, #12]
 8005c38:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8005c3a:	1a5b      	subs	r3, r3, r1
 8005c3c:	4543      	cmp	r3, r8
 8005c3e:	dcf0      	bgt.n	8005c22 <_printf_float+0x42e>
 8005c40:	e6fd      	b.n	8005a3e <_printf_float+0x24a>
 8005c42:	f04f 0800 	mov.w	r8, #0
 8005c46:	f104 0919 	add.w	r9, r4, #25
 8005c4a:	e7f4      	b.n	8005c36 <_printf_float+0x442>

08005c4c <_printf_common>:
 8005c4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c50:	4616      	mov	r6, r2
 8005c52:	4698      	mov	r8, r3
 8005c54:	688a      	ldr	r2, [r1, #8]
 8005c56:	690b      	ldr	r3, [r1, #16]
 8005c58:	4607      	mov	r7, r0
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	bfb8      	it	lt
 8005c5e:	4613      	movlt	r3, r2
 8005c60:	6033      	str	r3, [r6, #0]
 8005c62:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005c66:	460c      	mov	r4, r1
 8005c68:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005c6c:	b10a      	cbz	r2, 8005c72 <_printf_common+0x26>
 8005c6e:	3301      	adds	r3, #1
 8005c70:	6033      	str	r3, [r6, #0]
 8005c72:	6823      	ldr	r3, [r4, #0]
 8005c74:	0699      	lsls	r1, r3, #26
 8005c76:	bf42      	ittt	mi
 8005c78:	6833      	ldrmi	r3, [r6, #0]
 8005c7a:	3302      	addmi	r3, #2
 8005c7c:	6033      	strmi	r3, [r6, #0]
 8005c7e:	6825      	ldr	r5, [r4, #0]
 8005c80:	f015 0506 	ands.w	r5, r5, #6
 8005c84:	d106      	bne.n	8005c94 <_printf_common+0x48>
 8005c86:	f104 0a19 	add.w	sl, r4, #25
 8005c8a:	68e3      	ldr	r3, [r4, #12]
 8005c8c:	6832      	ldr	r2, [r6, #0]
 8005c8e:	1a9b      	subs	r3, r3, r2
 8005c90:	42ab      	cmp	r3, r5
 8005c92:	dc2b      	bgt.n	8005cec <_printf_common+0xa0>
 8005c94:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005c98:	6822      	ldr	r2, [r4, #0]
 8005c9a:	3b00      	subs	r3, #0
 8005c9c:	bf18      	it	ne
 8005c9e:	2301      	movne	r3, #1
 8005ca0:	0692      	lsls	r2, r2, #26
 8005ca2:	d430      	bmi.n	8005d06 <_printf_common+0xba>
 8005ca4:	4641      	mov	r1, r8
 8005ca6:	4638      	mov	r0, r7
 8005ca8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005cac:	47c8      	blx	r9
 8005cae:	3001      	adds	r0, #1
 8005cb0:	d023      	beq.n	8005cfa <_printf_common+0xae>
 8005cb2:	6823      	ldr	r3, [r4, #0]
 8005cb4:	6922      	ldr	r2, [r4, #16]
 8005cb6:	f003 0306 	and.w	r3, r3, #6
 8005cba:	2b04      	cmp	r3, #4
 8005cbc:	bf14      	ite	ne
 8005cbe:	2500      	movne	r5, #0
 8005cc0:	6833      	ldreq	r3, [r6, #0]
 8005cc2:	f04f 0600 	mov.w	r6, #0
 8005cc6:	bf08      	it	eq
 8005cc8:	68e5      	ldreq	r5, [r4, #12]
 8005cca:	f104 041a 	add.w	r4, r4, #26
 8005cce:	bf08      	it	eq
 8005cd0:	1aed      	subeq	r5, r5, r3
 8005cd2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8005cd6:	bf08      	it	eq
 8005cd8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005cdc:	4293      	cmp	r3, r2
 8005cde:	bfc4      	itt	gt
 8005ce0:	1a9b      	subgt	r3, r3, r2
 8005ce2:	18ed      	addgt	r5, r5, r3
 8005ce4:	42b5      	cmp	r5, r6
 8005ce6:	d11a      	bne.n	8005d1e <_printf_common+0xd2>
 8005ce8:	2000      	movs	r0, #0
 8005cea:	e008      	b.n	8005cfe <_printf_common+0xb2>
 8005cec:	2301      	movs	r3, #1
 8005cee:	4652      	mov	r2, sl
 8005cf0:	4641      	mov	r1, r8
 8005cf2:	4638      	mov	r0, r7
 8005cf4:	47c8      	blx	r9
 8005cf6:	3001      	adds	r0, #1
 8005cf8:	d103      	bne.n	8005d02 <_printf_common+0xb6>
 8005cfa:	f04f 30ff 	mov.w	r0, #4294967295
 8005cfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d02:	3501      	adds	r5, #1
 8005d04:	e7c1      	b.n	8005c8a <_printf_common+0x3e>
 8005d06:	2030      	movs	r0, #48	@ 0x30
 8005d08:	18e1      	adds	r1, r4, r3
 8005d0a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005d0e:	1c5a      	adds	r2, r3, #1
 8005d10:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005d14:	4422      	add	r2, r4
 8005d16:	3302      	adds	r3, #2
 8005d18:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005d1c:	e7c2      	b.n	8005ca4 <_printf_common+0x58>
 8005d1e:	2301      	movs	r3, #1
 8005d20:	4622      	mov	r2, r4
 8005d22:	4641      	mov	r1, r8
 8005d24:	4638      	mov	r0, r7
 8005d26:	47c8      	blx	r9
 8005d28:	3001      	adds	r0, #1
 8005d2a:	d0e6      	beq.n	8005cfa <_printf_common+0xae>
 8005d2c:	3601      	adds	r6, #1
 8005d2e:	e7d9      	b.n	8005ce4 <_printf_common+0x98>

08005d30 <_printf_i>:
 8005d30:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005d34:	7e0f      	ldrb	r7, [r1, #24]
 8005d36:	4691      	mov	r9, r2
 8005d38:	2f78      	cmp	r7, #120	@ 0x78
 8005d3a:	4680      	mov	r8, r0
 8005d3c:	460c      	mov	r4, r1
 8005d3e:	469a      	mov	sl, r3
 8005d40:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005d42:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005d46:	d807      	bhi.n	8005d58 <_printf_i+0x28>
 8005d48:	2f62      	cmp	r7, #98	@ 0x62
 8005d4a:	d80a      	bhi.n	8005d62 <_printf_i+0x32>
 8005d4c:	2f00      	cmp	r7, #0
 8005d4e:	f000 80d3 	beq.w	8005ef8 <_printf_i+0x1c8>
 8005d52:	2f58      	cmp	r7, #88	@ 0x58
 8005d54:	f000 80ba 	beq.w	8005ecc <_printf_i+0x19c>
 8005d58:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005d5c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005d60:	e03a      	b.n	8005dd8 <_printf_i+0xa8>
 8005d62:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005d66:	2b15      	cmp	r3, #21
 8005d68:	d8f6      	bhi.n	8005d58 <_printf_i+0x28>
 8005d6a:	a101      	add	r1, pc, #4	@ (adr r1, 8005d70 <_printf_i+0x40>)
 8005d6c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005d70:	08005dc9 	.word	0x08005dc9
 8005d74:	08005ddd 	.word	0x08005ddd
 8005d78:	08005d59 	.word	0x08005d59
 8005d7c:	08005d59 	.word	0x08005d59
 8005d80:	08005d59 	.word	0x08005d59
 8005d84:	08005d59 	.word	0x08005d59
 8005d88:	08005ddd 	.word	0x08005ddd
 8005d8c:	08005d59 	.word	0x08005d59
 8005d90:	08005d59 	.word	0x08005d59
 8005d94:	08005d59 	.word	0x08005d59
 8005d98:	08005d59 	.word	0x08005d59
 8005d9c:	08005edf 	.word	0x08005edf
 8005da0:	08005e07 	.word	0x08005e07
 8005da4:	08005e99 	.word	0x08005e99
 8005da8:	08005d59 	.word	0x08005d59
 8005dac:	08005d59 	.word	0x08005d59
 8005db0:	08005f01 	.word	0x08005f01
 8005db4:	08005d59 	.word	0x08005d59
 8005db8:	08005e07 	.word	0x08005e07
 8005dbc:	08005d59 	.word	0x08005d59
 8005dc0:	08005d59 	.word	0x08005d59
 8005dc4:	08005ea1 	.word	0x08005ea1
 8005dc8:	6833      	ldr	r3, [r6, #0]
 8005dca:	1d1a      	adds	r2, r3, #4
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	6032      	str	r2, [r6, #0]
 8005dd0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005dd4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005dd8:	2301      	movs	r3, #1
 8005dda:	e09e      	b.n	8005f1a <_printf_i+0x1ea>
 8005ddc:	6833      	ldr	r3, [r6, #0]
 8005dde:	6820      	ldr	r0, [r4, #0]
 8005de0:	1d19      	adds	r1, r3, #4
 8005de2:	6031      	str	r1, [r6, #0]
 8005de4:	0606      	lsls	r6, r0, #24
 8005de6:	d501      	bpl.n	8005dec <_printf_i+0xbc>
 8005de8:	681d      	ldr	r5, [r3, #0]
 8005dea:	e003      	b.n	8005df4 <_printf_i+0xc4>
 8005dec:	0645      	lsls	r5, r0, #25
 8005dee:	d5fb      	bpl.n	8005de8 <_printf_i+0xb8>
 8005df0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005df4:	2d00      	cmp	r5, #0
 8005df6:	da03      	bge.n	8005e00 <_printf_i+0xd0>
 8005df8:	232d      	movs	r3, #45	@ 0x2d
 8005dfa:	426d      	negs	r5, r5
 8005dfc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005e00:	230a      	movs	r3, #10
 8005e02:	4859      	ldr	r0, [pc, #356]	@ (8005f68 <_printf_i+0x238>)
 8005e04:	e011      	b.n	8005e2a <_printf_i+0xfa>
 8005e06:	6821      	ldr	r1, [r4, #0]
 8005e08:	6833      	ldr	r3, [r6, #0]
 8005e0a:	0608      	lsls	r0, r1, #24
 8005e0c:	f853 5b04 	ldr.w	r5, [r3], #4
 8005e10:	d402      	bmi.n	8005e18 <_printf_i+0xe8>
 8005e12:	0649      	lsls	r1, r1, #25
 8005e14:	bf48      	it	mi
 8005e16:	b2ad      	uxthmi	r5, r5
 8005e18:	2f6f      	cmp	r7, #111	@ 0x6f
 8005e1a:	6033      	str	r3, [r6, #0]
 8005e1c:	bf14      	ite	ne
 8005e1e:	230a      	movne	r3, #10
 8005e20:	2308      	moveq	r3, #8
 8005e22:	4851      	ldr	r0, [pc, #324]	@ (8005f68 <_printf_i+0x238>)
 8005e24:	2100      	movs	r1, #0
 8005e26:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005e2a:	6866      	ldr	r6, [r4, #4]
 8005e2c:	2e00      	cmp	r6, #0
 8005e2e:	bfa8      	it	ge
 8005e30:	6821      	ldrge	r1, [r4, #0]
 8005e32:	60a6      	str	r6, [r4, #8]
 8005e34:	bfa4      	itt	ge
 8005e36:	f021 0104 	bicge.w	r1, r1, #4
 8005e3a:	6021      	strge	r1, [r4, #0]
 8005e3c:	b90d      	cbnz	r5, 8005e42 <_printf_i+0x112>
 8005e3e:	2e00      	cmp	r6, #0
 8005e40:	d04b      	beq.n	8005eda <_printf_i+0x1aa>
 8005e42:	4616      	mov	r6, r2
 8005e44:	fbb5 f1f3 	udiv	r1, r5, r3
 8005e48:	fb03 5711 	mls	r7, r3, r1, r5
 8005e4c:	5dc7      	ldrb	r7, [r0, r7]
 8005e4e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005e52:	462f      	mov	r7, r5
 8005e54:	42bb      	cmp	r3, r7
 8005e56:	460d      	mov	r5, r1
 8005e58:	d9f4      	bls.n	8005e44 <_printf_i+0x114>
 8005e5a:	2b08      	cmp	r3, #8
 8005e5c:	d10b      	bne.n	8005e76 <_printf_i+0x146>
 8005e5e:	6823      	ldr	r3, [r4, #0]
 8005e60:	07df      	lsls	r7, r3, #31
 8005e62:	d508      	bpl.n	8005e76 <_printf_i+0x146>
 8005e64:	6923      	ldr	r3, [r4, #16]
 8005e66:	6861      	ldr	r1, [r4, #4]
 8005e68:	4299      	cmp	r1, r3
 8005e6a:	bfde      	ittt	le
 8005e6c:	2330      	movle	r3, #48	@ 0x30
 8005e6e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005e72:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005e76:	1b92      	subs	r2, r2, r6
 8005e78:	6122      	str	r2, [r4, #16]
 8005e7a:	464b      	mov	r3, r9
 8005e7c:	4621      	mov	r1, r4
 8005e7e:	4640      	mov	r0, r8
 8005e80:	f8cd a000 	str.w	sl, [sp]
 8005e84:	aa03      	add	r2, sp, #12
 8005e86:	f7ff fee1 	bl	8005c4c <_printf_common>
 8005e8a:	3001      	adds	r0, #1
 8005e8c:	d14a      	bne.n	8005f24 <_printf_i+0x1f4>
 8005e8e:	f04f 30ff 	mov.w	r0, #4294967295
 8005e92:	b004      	add	sp, #16
 8005e94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e98:	6823      	ldr	r3, [r4, #0]
 8005e9a:	f043 0320 	orr.w	r3, r3, #32
 8005e9e:	6023      	str	r3, [r4, #0]
 8005ea0:	2778      	movs	r7, #120	@ 0x78
 8005ea2:	4832      	ldr	r0, [pc, #200]	@ (8005f6c <_printf_i+0x23c>)
 8005ea4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005ea8:	6823      	ldr	r3, [r4, #0]
 8005eaa:	6831      	ldr	r1, [r6, #0]
 8005eac:	061f      	lsls	r7, r3, #24
 8005eae:	f851 5b04 	ldr.w	r5, [r1], #4
 8005eb2:	d402      	bmi.n	8005eba <_printf_i+0x18a>
 8005eb4:	065f      	lsls	r7, r3, #25
 8005eb6:	bf48      	it	mi
 8005eb8:	b2ad      	uxthmi	r5, r5
 8005eba:	6031      	str	r1, [r6, #0]
 8005ebc:	07d9      	lsls	r1, r3, #31
 8005ebe:	bf44      	itt	mi
 8005ec0:	f043 0320 	orrmi.w	r3, r3, #32
 8005ec4:	6023      	strmi	r3, [r4, #0]
 8005ec6:	b11d      	cbz	r5, 8005ed0 <_printf_i+0x1a0>
 8005ec8:	2310      	movs	r3, #16
 8005eca:	e7ab      	b.n	8005e24 <_printf_i+0xf4>
 8005ecc:	4826      	ldr	r0, [pc, #152]	@ (8005f68 <_printf_i+0x238>)
 8005ece:	e7e9      	b.n	8005ea4 <_printf_i+0x174>
 8005ed0:	6823      	ldr	r3, [r4, #0]
 8005ed2:	f023 0320 	bic.w	r3, r3, #32
 8005ed6:	6023      	str	r3, [r4, #0]
 8005ed8:	e7f6      	b.n	8005ec8 <_printf_i+0x198>
 8005eda:	4616      	mov	r6, r2
 8005edc:	e7bd      	b.n	8005e5a <_printf_i+0x12a>
 8005ede:	6833      	ldr	r3, [r6, #0]
 8005ee0:	6825      	ldr	r5, [r4, #0]
 8005ee2:	1d18      	adds	r0, r3, #4
 8005ee4:	6961      	ldr	r1, [r4, #20]
 8005ee6:	6030      	str	r0, [r6, #0]
 8005ee8:	062e      	lsls	r6, r5, #24
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	d501      	bpl.n	8005ef2 <_printf_i+0x1c2>
 8005eee:	6019      	str	r1, [r3, #0]
 8005ef0:	e002      	b.n	8005ef8 <_printf_i+0x1c8>
 8005ef2:	0668      	lsls	r0, r5, #25
 8005ef4:	d5fb      	bpl.n	8005eee <_printf_i+0x1be>
 8005ef6:	8019      	strh	r1, [r3, #0]
 8005ef8:	2300      	movs	r3, #0
 8005efa:	4616      	mov	r6, r2
 8005efc:	6123      	str	r3, [r4, #16]
 8005efe:	e7bc      	b.n	8005e7a <_printf_i+0x14a>
 8005f00:	6833      	ldr	r3, [r6, #0]
 8005f02:	2100      	movs	r1, #0
 8005f04:	1d1a      	adds	r2, r3, #4
 8005f06:	6032      	str	r2, [r6, #0]
 8005f08:	681e      	ldr	r6, [r3, #0]
 8005f0a:	6862      	ldr	r2, [r4, #4]
 8005f0c:	4630      	mov	r0, r6
 8005f0e:	f000 fcd6 	bl	80068be <memchr>
 8005f12:	b108      	cbz	r0, 8005f18 <_printf_i+0x1e8>
 8005f14:	1b80      	subs	r0, r0, r6
 8005f16:	6060      	str	r0, [r4, #4]
 8005f18:	6863      	ldr	r3, [r4, #4]
 8005f1a:	6123      	str	r3, [r4, #16]
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005f22:	e7aa      	b.n	8005e7a <_printf_i+0x14a>
 8005f24:	4632      	mov	r2, r6
 8005f26:	4649      	mov	r1, r9
 8005f28:	4640      	mov	r0, r8
 8005f2a:	6923      	ldr	r3, [r4, #16]
 8005f2c:	47d0      	blx	sl
 8005f2e:	3001      	adds	r0, #1
 8005f30:	d0ad      	beq.n	8005e8e <_printf_i+0x15e>
 8005f32:	6823      	ldr	r3, [r4, #0]
 8005f34:	079b      	lsls	r3, r3, #30
 8005f36:	d413      	bmi.n	8005f60 <_printf_i+0x230>
 8005f38:	68e0      	ldr	r0, [r4, #12]
 8005f3a:	9b03      	ldr	r3, [sp, #12]
 8005f3c:	4298      	cmp	r0, r3
 8005f3e:	bfb8      	it	lt
 8005f40:	4618      	movlt	r0, r3
 8005f42:	e7a6      	b.n	8005e92 <_printf_i+0x162>
 8005f44:	2301      	movs	r3, #1
 8005f46:	4632      	mov	r2, r6
 8005f48:	4649      	mov	r1, r9
 8005f4a:	4640      	mov	r0, r8
 8005f4c:	47d0      	blx	sl
 8005f4e:	3001      	adds	r0, #1
 8005f50:	d09d      	beq.n	8005e8e <_printf_i+0x15e>
 8005f52:	3501      	adds	r5, #1
 8005f54:	68e3      	ldr	r3, [r4, #12]
 8005f56:	9903      	ldr	r1, [sp, #12]
 8005f58:	1a5b      	subs	r3, r3, r1
 8005f5a:	42ab      	cmp	r3, r5
 8005f5c:	dcf2      	bgt.n	8005f44 <_printf_i+0x214>
 8005f5e:	e7eb      	b.n	8005f38 <_printf_i+0x208>
 8005f60:	2500      	movs	r5, #0
 8005f62:	f104 0619 	add.w	r6, r4, #25
 8005f66:	e7f5      	b.n	8005f54 <_printf_i+0x224>
 8005f68:	08009ebc 	.word	0x08009ebc
 8005f6c:	08009ecd 	.word	0x08009ecd

08005f70 <_scanf_float>:
 8005f70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f74:	b087      	sub	sp, #28
 8005f76:	9303      	str	r3, [sp, #12]
 8005f78:	688b      	ldr	r3, [r1, #8]
 8005f7a:	4617      	mov	r7, r2
 8005f7c:	1e5a      	subs	r2, r3, #1
 8005f7e:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8005f82:	bf82      	ittt	hi
 8005f84:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8005f88:	eb03 0b05 	addhi.w	fp, r3, r5
 8005f8c:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8005f90:	460a      	mov	r2, r1
 8005f92:	f04f 0500 	mov.w	r5, #0
 8005f96:	bf88      	it	hi
 8005f98:	608b      	strhi	r3, [r1, #8]
 8005f9a:	680b      	ldr	r3, [r1, #0]
 8005f9c:	4680      	mov	r8, r0
 8005f9e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8005fa2:	f842 3b1c 	str.w	r3, [r2], #28
 8005fa6:	460c      	mov	r4, r1
 8005fa8:	bf98      	it	ls
 8005faa:	f04f 0b00 	movls.w	fp, #0
 8005fae:	4616      	mov	r6, r2
 8005fb0:	46aa      	mov	sl, r5
 8005fb2:	46a9      	mov	r9, r5
 8005fb4:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8005fb8:	9201      	str	r2, [sp, #4]
 8005fba:	9502      	str	r5, [sp, #8]
 8005fbc:	68a2      	ldr	r2, [r4, #8]
 8005fbe:	b152      	cbz	r2, 8005fd6 <_scanf_float+0x66>
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	781b      	ldrb	r3, [r3, #0]
 8005fc4:	2b4e      	cmp	r3, #78	@ 0x4e
 8005fc6:	d865      	bhi.n	8006094 <_scanf_float+0x124>
 8005fc8:	2b40      	cmp	r3, #64	@ 0x40
 8005fca:	d83d      	bhi.n	8006048 <_scanf_float+0xd8>
 8005fcc:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8005fd0:	b2c8      	uxtb	r0, r1
 8005fd2:	280e      	cmp	r0, #14
 8005fd4:	d93b      	bls.n	800604e <_scanf_float+0xde>
 8005fd6:	f1b9 0f00 	cmp.w	r9, #0
 8005fda:	d003      	beq.n	8005fe4 <_scanf_float+0x74>
 8005fdc:	6823      	ldr	r3, [r4, #0]
 8005fde:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005fe2:	6023      	str	r3, [r4, #0]
 8005fe4:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005fe8:	f1ba 0f01 	cmp.w	sl, #1
 8005fec:	f200 8118 	bhi.w	8006220 <_scanf_float+0x2b0>
 8005ff0:	9b01      	ldr	r3, [sp, #4]
 8005ff2:	429e      	cmp	r6, r3
 8005ff4:	f200 8109 	bhi.w	800620a <_scanf_float+0x29a>
 8005ff8:	2001      	movs	r0, #1
 8005ffa:	b007      	add	sp, #28
 8005ffc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006000:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8006004:	2a0d      	cmp	r2, #13
 8006006:	d8e6      	bhi.n	8005fd6 <_scanf_float+0x66>
 8006008:	a101      	add	r1, pc, #4	@ (adr r1, 8006010 <_scanf_float+0xa0>)
 800600a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800600e:	bf00      	nop
 8006010:	08006157 	.word	0x08006157
 8006014:	08005fd7 	.word	0x08005fd7
 8006018:	08005fd7 	.word	0x08005fd7
 800601c:	08005fd7 	.word	0x08005fd7
 8006020:	080061b7 	.word	0x080061b7
 8006024:	0800618f 	.word	0x0800618f
 8006028:	08005fd7 	.word	0x08005fd7
 800602c:	08005fd7 	.word	0x08005fd7
 8006030:	08006165 	.word	0x08006165
 8006034:	08005fd7 	.word	0x08005fd7
 8006038:	08005fd7 	.word	0x08005fd7
 800603c:	08005fd7 	.word	0x08005fd7
 8006040:	08005fd7 	.word	0x08005fd7
 8006044:	0800611d 	.word	0x0800611d
 8006048:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800604c:	e7da      	b.n	8006004 <_scanf_float+0x94>
 800604e:	290e      	cmp	r1, #14
 8006050:	d8c1      	bhi.n	8005fd6 <_scanf_float+0x66>
 8006052:	a001      	add	r0, pc, #4	@ (adr r0, 8006058 <_scanf_float+0xe8>)
 8006054:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006058:	0800610d 	.word	0x0800610d
 800605c:	08005fd7 	.word	0x08005fd7
 8006060:	0800610d 	.word	0x0800610d
 8006064:	080061a3 	.word	0x080061a3
 8006068:	08005fd7 	.word	0x08005fd7
 800606c:	080060b5 	.word	0x080060b5
 8006070:	080060f3 	.word	0x080060f3
 8006074:	080060f3 	.word	0x080060f3
 8006078:	080060f3 	.word	0x080060f3
 800607c:	080060f3 	.word	0x080060f3
 8006080:	080060f3 	.word	0x080060f3
 8006084:	080060f3 	.word	0x080060f3
 8006088:	080060f3 	.word	0x080060f3
 800608c:	080060f3 	.word	0x080060f3
 8006090:	080060f3 	.word	0x080060f3
 8006094:	2b6e      	cmp	r3, #110	@ 0x6e
 8006096:	d809      	bhi.n	80060ac <_scanf_float+0x13c>
 8006098:	2b60      	cmp	r3, #96	@ 0x60
 800609a:	d8b1      	bhi.n	8006000 <_scanf_float+0x90>
 800609c:	2b54      	cmp	r3, #84	@ 0x54
 800609e:	d07b      	beq.n	8006198 <_scanf_float+0x228>
 80060a0:	2b59      	cmp	r3, #89	@ 0x59
 80060a2:	d198      	bne.n	8005fd6 <_scanf_float+0x66>
 80060a4:	2d07      	cmp	r5, #7
 80060a6:	d196      	bne.n	8005fd6 <_scanf_float+0x66>
 80060a8:	2508      	movs	r5, #8
 80060aa:	e02c      	b.n	8006106 <_scanf_float+0x196>
 80060ac:	2b74      	cmp	r3, #116	@ 0x74
 80060ae:	d073      	beq.n	8006198 <_scanf_float+0x228>
 80060b0:	2b79      	cmp	r3, #121	@ 0x79
 80060b2:	e7f6      	b.n	80060a2 <_scanf_float+0x132>
 80060b4:	6821      	ldr	r1, [r4, #0]
 80060b6:	05c8      	lsls	r0, r1, #23
 80060b8:	d51b      	bpl.n	80060f2 <_scanf_float+0x182>
 80060ba:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80060be:	6021      	str	r1, [r4, #0]
 80060c0:	f109 0901 	add.w	r9, r9, #1
 80060c4:	f1bb 0f00 	cmp.w	fp, #0
 80060c8:	d003      	beq.n	80060d2 <_scanf_float+0x162>
 80060ca:	3201      	adds	r2, #1
 80060cc:	f10b 3bff 	add.w	fp, fp, #4294967295
 80060d0:	60a2      	str	r2, [r4, #8]
 80060d2:	68a3      	ldr	r3, [r4, #8]
 80060d4:	3b01      	subs	r3, #1
 80060d6:	60a3      	str	r3, [r4, #8]
 80060d8:	6923      	ldr	r3, [r4, #16]
 80060da:	3301      	adds	r3, #1
 80060dc:	6123      	str	r3, [r4, #16]
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	3b01      	subs	r3, #1
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	607b      	str	r3, [r7, #4]
 80060e6:	f340 8087 	ble.w	80061f8 <_scanf_float+0x288>
 80060ea:	683b      	ldr	r3, [r7, #0]
 80060ec:	3301      	adds	r3, #1
 80060ee:	603b      	str	r3, [r7, #0]
 80060f0:	e764      	b.n	8005fbc <_scanf_float+0x4c>
 80060f2:	eb1a 0105 	adds.w	r1, sl, r5
 80060f6:	f47f af6e 	bne.w	8005fd6 <_scanf_float+0x66>
 80060fa:	460d      	mov	r5, r1
 80060fc:	468a      	mov	sl, r1
 80060fe:	6822      	ldr	r2, [r4, #0]
 8006100:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8006104:	6022      	str	r2, [r4, #0]
 8006106:	f806 3b01 	strb.w	r3, [r6], #1
 800610a:	e7e2      	b.n	80060d2 <_scanf_float+0x162>
 800610c:	6822      	ldr	r2, [r4, #0]
 800610e:	0610      	lsls	r0, r2, #24
 8006110:	f57f af61 	bpl.w	8005fd6 <_scanf_float+0x66>
 8006114:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006118:	6022      	str	r2, [r4, #0]
 800611a:	e7f4      	b.n	8006106 <_scanf_float+0x196>
 800611c:	f1ba 0f00 	cmp.w	sl, #0
 8006120:	d10e      	bne.n	8006140 <_scanf_float+0x1d0>
 8006122:	f1b9 0f00 	cmp.w	r9, #0
 8006126:	d10e      	bne.n	8006146 <_scanf_float+0x1d6>
 8006128:	6822      	ldr	r2, [r4, #0]
 800612a:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800612e:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8006132:	d108      	bne.n	8006146 <_scanf_float+0x1d6>
 8006134:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006138:	f04f 0a01 	mov.w	sl, #1
 800613c:	6022      	str	r2, [r4, #0]
 800613e:	e7e2      	b.n	8006106 <_scanf_float+0x196>
 8006140:	f1ba 0f02 	cmp.w	sl, #2
 8006144:	d055      	beq.n	80061f2 <_scanf_float+0x282>
 8006146:	2d01      	cmp	r5, #1
 8006148:	d002      	beq.n	8006150 <_scanf_float+0x1e0>
 800614a:	2d04      	cmp	r5, #4
 800614c:	f47f af43 	bne.w	8005fd6 <_scanf_float+0x66>
 8006150:	3501      	adds	r5, #1
 8006152:	b2ed      	uxtb	r5, r5
 8006154:	e7d7      	b.n	8006106 <_scanf_float+0x196>
 8006156:	f1ba 0f01 	cmp.w	sl, #1
 800615a:	f47f af3c 	bne.w	8005fd6 <_scanf_float+0x66>
 800615e:	f04f 0a02 	mov.w	sl, #2
 8006162:	e7d0      	b.n	8006106 <_scanf_float+0x196>
 8006164:	b97d      	cbnz	r5, 8006186 <_scanf_float+0x216>
 8006166:	f1b9 0f00 	cmp.w	r9, #0
 800616a:	f47f af37 	bne.w	8005fdc <_scanf_float+0x6c>
 800616e:	6822      	ldr	r2, [r4, #0]
 8006170:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8006174:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8006178:	f040 8103 	bne.w	8006382 <_scanf_float+0x412>
 800617c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006180:	2501      	movs	r5, #1
 8006182:	6022      	str	r2, [r4, #0]
 8006184:	e7bf      	b.n	8006106 <_scanf_float+0x196>
 8006186:	2d03      	cmp	r5, #3
 8006188:	d0e2      	beq.n	8006150 <_scanf_float+0x1e0>
 800618a:	2d05      	cmp	r5, #5
 800618c:	e7de      	b.n	800614c <_scanf_float+0x1dc>
 800618e:	2d02      	cmp	r5, #2
 8006190:	f47f af21 	bne.w	8005fd6 <_scanf_float+0x66>
 8006194:	2503      	movs	r5, #3
 8006196:	e7b6      	b.n	8006106 <_scanf_float+0x196>
 8006198:	2d06      	cmp	r5, #6
 800619a:	f47f af1c 	bne.w	8005fd6 <_scanf_float+0x66>
 800619e:	2507      	movs	r5, #7
 80061a0:	e7b1      	b.n	8006106 <_scanf_float+0x196>
 80061a2:	6822      	ldr	r2, [r4, #0]
 80061a4:	0591      	lsls	r1, r2, #22
 80061a6:	f57f af16 	bpl.w	8005fd6 <_scanf_float+0x66>
 80061aa:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 80061ae:	6022      	str	r2, [r4, #0]
 80061b0:	f8cd 9008 	str.w	r9, [sp, #8]
 80061b4:	e7a7      	b.n	8006106 <_scanf_float+0x196>
 80061b6:	6822      	ldr	r2, [r4, #0]
 80061b8:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 80061bc:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80061c0:	d006      	beq.n	80061d0 <_scanf_float+0x260>
 80061c2:	0550      	lsls	r0, r2, #21
 80061c4:	f57f af07 	bpl.w	8005fd6 <_scanf_float+0x66>
 80061c8:	f1b9 0f00 	cmp.w	r9, #0
 80061cc:	f000 80d9 	beq.w	8006382 <_scanf_float+0x412>
 80061d0:	0591      	lsls	r1, r2, #22
 80061d2:	bf58      	it	pl
 80061d4:	9902      	ldrpl	r1, [sp, #8]
 80061d6:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80061da:	bf58      	it	pl
 80061dc:	eba9 0101 	subpl.w	r1, r9, r1
 80061e0:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 80061e4:	f04f 0900 	mov.w	r9, #0
 80061e8:	bf58      	it	pl
 80061ea:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80061ee:	6022      	str	r2, [r4, #0]
 80061f0:	e789      	b.n	8006106 <_scanf_float+0x196>
 80061f2:	f04f 0a03 	mov.w	sl, #3
 80061f6:	e786      	b.n	8006106 <_scanf_float+0x196>
 80061f8:	4639      	mov	r1, r7
 80061fa:	4640      	mov	r0, r8
 80061fc:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8006200:	4798      	blx	r3
 8006202:	2800      	cmp	r0, #0
 8006204:	f43f aeda 	beq.w	8005fbc <_scanf_float+0x4c>
 8006208:	e6e5      	b.n	8005fd6 <_scanf_float+0x66>
 800620a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800620e:	463a      	mov	r2, r7
 8006210:	4640      	mov	r0, r8
 8006212:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006216:	4798      	blx	r3
 8006218:	6923      	ldr	r3, [r4, #16]
 800621a:	3b01      	subs	r3, #1
 800621c:	6123      	str	r3, [r4, #16]
 800621e:	e6e7      	b.n	8005ff0 <_scanf_float+0x80>
 8006220:	1e6b      	subs	r3, r5, #1
 8006222:	2b06      	cmp	r3, #6
 8006224:	d824      	bhi.n	8006270 <_scanf_float+0x300>
 8006226:	2d02      	cmp	r5, #2
 8006228:	d836      	bhi.n	8006298 <_scanf_float+0x328>
 800622a:	9b01      	ldr	r3, [sp, #4]
 800622c:	429e      	cmp	r6, r3
 800622e:	f67f aee3 	bls.w	8005ff8 <_scanf_float+0x88>
 8006232:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006236:	463a      	mov	r2, r7
 8006238:	4640      	mov	r0, r8
 800623a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800623e:	4798      	blx	r3
 8006240:	6923      	ldr	r3, [r4, #16]
 8006242:	3b01      	subs	r3, #1
 8006244:	6123      	str	r3, [r4, #16]
 8006246:	e7f0      	b.n	800622a <_scanf_float+0x2ba>
 8006248:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800624c:	463a      	mov	r2, r7
 800624e:	4640      	mov	r0, r8
 8006250:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8006254:	4798      	blx	r3
 8006256:	6923      	ldr	r3, [r4, #16]
 8006258:	3b01      	subs	r3, #1
 800625a:	6123      	str	r3, [r4, #16]
 800625c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006260:	fa5f fa8a 	uxtb.w	sl, sl
 8006264:	f1ba 0f02 	cmp.w	sl, #2
 8006268:	d1ee      	bne.n	8006248 <_scanf_float+0x2d8>
 800626a:	3d03      	subs	r5, #3
 800626c:	b2ed      	uxtb	r5, r5
 800626e:	1b76      	subs	r6, r6, r5
 8006270:	6823      	ldr	r3, [r4, #0]
 8006272:	05da      	lsls	r2, r3, #23
 8006274:	d530      	bpl.n	80062d8 <_scanf_float+0x368>
 8006276:	055b      	lsls	r3, r3, #21
 8006278:	d511      	bpl.n	800629e <_scanf_float+0x32e>
 800627a:	9b01      	ldr	r3, [sp, #4]
 800627c:	429e      	cmp	r6, r3
 800627e:	f67f aebb 	bls.w	8005ff8 <_scanf_float+0x88>
 8006282:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006286:	463a      	mov	r2, r7
 8006288:	4640      	mov	r0, r8
 800628a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800628e:	4798      	blx	r3
 8006290:	6923      	ldr	r3, [r4, #16]
 8006292:	3b01      	subs	r3, #1
 8006294:	6123      	str	r3, [r4, #16]
 8006296:	e7f0      	b.n	800627a <_scanf_float+0x30a>
 8006298:	46aa      	mov	sl, r5
 800629a:	46b3      	mov	fp, r6
 800629c:	e7de      	b.n	800625c <_scanf_float+0x2ec>
 800629e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80062a2:	6923      	ldr	r3, [r4, #16]
 80062a4:	2965      	cmp	r1, #101	@ 0x65
 80062a6:	f103 33ff 	add.w	r3, r3, #4294967295
 80062aa:	f106 35ff 	add.w	r5, r6, #4294967295
 80062ae:	6123      	str	r3, [r4, #16]
 80062b0:	d00c      	beq.n	80062cc <_scanf_float+0x35c>
 80062b2:	2945      	cmp	r1, #69	@ 0x45
 80062b4:	d00a      	beq.n	80062cc <_scanf_float+0x35c>
 80062b6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80062ba:	463a      	mov	r2, r7
 80062bc:	4640      	mov	r0, r8
 80062be:	4798      	blx	r3
 80062c0:	6923      	ldr	r3, [r4, #16]
 80062c2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80062c6:	3b01      	subs	r3, #1
 80062c8:	1eb5      	subs	r5, r6, #2
 80062ca:	6123      	str	r3, [r4, #16]
 80062cc:	463a      	mov	r2, r7
 80062ce:	4640      	mov	r0, r8
 80062d0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80062d4:	4798      	blx	r3
 80062d6:	462e      	mov	r6, r5
 80062d8:	6822      	ldr	r2, [r4, #0]
 80062da:	f012 0210 	ands.w	r2, r2, #16
 80062de:	d001      	beq.n	80062e4 <_scanf_float+0x374>
 80062e0:	2000      	movs	r0, #0
 80062e2:	e68a      	b.n	8005ffa <_scanf_float+0x8a>
 80062e4:	7032      	strb	r2, [r6, #0]
 80062e6:	6823      	ldr	r3, [r4, #0]
 80062e8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80062ec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80062f0:	d11c      	bne.n	800632c <_scanf_float+0x3bc>
 80062f2:	9b02      	ldr	r3, [sp, #8]
 80062f4:	454b      	cmp	r3, r9
 80062f6:	eba3 0209 	sub.w	r2, r3, r9
 80062fa:	d123      	bne.n	8006344 <_scanf_float+0x3d4>
 80062fc:	2200      	movs	r2, #0
 80062fe:	4640      	mov	r0, r8
 8006300:	9901      	ldr	r1, [sp, #4]
 8006302:	f002 fced 	bl	8008ce0 <_strtod_r>
 8006306:	9b03      	ldr	r3, [sp, #12]
 8006308:	6825      	ldr	r5, [r4, #0]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f015 0f02 	tst.w	r5, #2
 8006310:	4606      	mov	r6, r0
 8006312:	460f      	mov	r7, r1
 8006314:	f103 0204 	add.w	r2, r3, #4
 8006318:	d01f      	beq.n	800635a <_scanf_float+0x3ea>
 800631a:	9903      	ldr	r1, [sp, #12]
 800631c:	600a      	str	r2, [r1, #0]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	e9c3 6700 	strd	r6, r7, [r3]
 8006324:	68e3      	ldr	r3, [r4, #12]
 8006326:	3301      	adds	r3, #1
 8006328:	60e3      	str	r3, [r4, #12]
 800632a:	e7d9      	b.n	80062e0 <_scanf_float+0x370>
 800632c:	9b04      	ldr	r3, [sp, #16]
 800632e:	2b00      	cmp	r3, #0
 8006330:	d0e4      	beq.n	80062fc <_scanf_float+0x38c>
 8006332:	9905      	ldr	r1, [sp, #20]
 8006334:	230a      	movs	r3, #10
 8006336:	4640      	mov	r0, r8
 8006338:	3101      	adds	r1, #1
 800633a:	f002 fd51 	bl	8008de0 <_strtol_r>
 800633e:	9b04      	ldr	r3, [sp, #16]
 8006340:	9e05      	ldr	r6, [sp, #20]
 8006342:	1ac2      	subs	r2, r0, r3
 8006344:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8006348:	429e      	cmp	r6, r3
 800634a:	bf28      	it	cs
 800634c:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8006350:	4630      	mov	r0, r6
 8006352:	490d      	ldr	r1, [pc, #52]	@ (8006388 <_scanf_float+0x418>)
 8006354:	f000 f93c 	bl	80065d0 <siprintf>
 8006358:	e7d0      	b.n	80062fc <_scanf_float+0x38c>
 800635a:	076d      	lsls	r5, r5, #29
 800635c:	d4dd      	bmi.n	800631a <_scanf_float+0x3aa>
 800635e:	9d03      	ldr	r5, [sp, #12]
 8006360:	602a      	str	r2, [r5, #0]
 8006362:	681d      	ldr	r5, [r3, #0]
 8006364:	4602      	mov	r2, r0
 8006366:	460b      	mov	r3, r1
 8006368:	f7fa fb50 	bl	8000a0c <__aeabi_dcmpun>
 800636c:	b120      	cbz	r0, 8006378 <_scanf_float+0x408>
 800636e:	4807      	ldr	r0, [pc, #28]	@ (800638c <_scanf_float+0x41c>)
 8006370:	f000 fac2 	bl	80068f8 <nanf>
 8006374:	6028      	str	r0, [r5, #0]
 8006376:	e7d5      	b.n	8006324 <_scanf_float+0x3b4>
 8006378:	4630      	mov	r0, r6
 800637a:	4639      	mov	r1, r7
 800637c:	f7fa fba4 	bl	8000ac8 <__aeabi_d2f>
 8006380:	e7f8      	b.n	8006374 <_scanf_float+0x404>
 8006382:	f04f 0900 	mov.w	r9, #0
 8006386:	e62d      	b.n	8005fe4 <_scanf_float+0x74>
 8006388:	08009ede 	.word	0x08009ede
 800638c:	0800a275 	.word	0x0800a275

08006390 <std>:
 8006390:	2300      	movs	r3, #0
 8006392:	b510      	push	{r4, lr}
 8006394:	4604      	mov	r4, r0
 8006396:	e9c0 3300 	strd	r3, r3, [r0]
 800639a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800639e:	6083      	str	r3, [r0, #8]
 80063a0:	8181      	strh	r1, [r0, #12]
 80063a2:	6643      	str	r3, [r0, #100]	@ 0x64
 80063a4:	81c2      	strh	r2, [r0, #14]
 80063a6:	6183      	str	r3, [r0, #24]
 80063a8:	4619      	mov	r1, r3
 80063aa:	2208      	movs	r2, #8
 80063ac:	305c      	adds	r0, #92	@ 0x5c
 80063ae:	f000 fa07 	bl	80067c0 <memset>
 80063b2:	4b0d      	ldr	r3, [pc, #52]	@ (80063e8 <std+0x58>)
 80063b4:	6224      	str	r4, [r4, #32]
 80063b6:	6263      	str	r3, [r4, #36]	@ 0x24
 80063b8:	4b0c      	ldr	r3, [pc, #48]	@ (80063ec <std+0x5c>)
 80063ba:	62a3      	str	r3, [r4, #40]	@ 0x28
 80063bc:	4b0c      	ldr	r3, [pc, #48]	@ (80063f0 <std+0x60>)
 80063be:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80063c0:	4b0c      	ldr	r3, [pc, #48]	@ (80063f4 <std+0x64>)
 80063c2:	6323      	str	r3, [r4, #48]	@ 0x30
 80063c4:	4b0c      	ldr	r3, [pc, #48]	@ (80063f8 <std+0x68>)
 80063c6:	429c      	cmp	r4, r3
 80063c8:	d006      	beq.n	80063d8 <std+0x48>
 80063ca:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80063ce:	4294      	cmp	r4, r2
 80063d0:	d002      	beq.n	80063d8 <std+0x48>
 80063d2:	33d0      	adds	r3, #208	@ 0xd0
 80063d4:	429c      	cmp	r4, r3
 80063d6:	d105      	bne.n	80063e4 <std+0x54>
 80063d8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80063dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80063e0:	f000 ba6a 	b.w	80068b8 <__retarget_lock_init_recursive>
 80063e4:	bd10      	pop	{r4, pc}
 80063e6:	bf00      	nop
 80063e8:	08006611 	.word	0x08006611
 80063ec:	08006633 	.word	0x08006633
 80063f0:	0800666b 	.word	0x0800666b
 80063f4:	0800668f 	.word	0x0800668f
 80063f8:	20003018 	.word	0x20003018

080063fc <stdio_exit_handler>:
 80063fc:	4a02      	ldr	r2, [pc, #8]	@ (8006408 <stdio_exit_handler+0xc>)
 80063fe:	4903      	ldr	r1, [pc, #12]	@ (800640c <stdio_exit_handler+0x10>)
 8006400:	4803      	ldr	r0, [pc, #12]	@ (8006410 <stdio_exit_handler+0x14>)
 8006402:	f000 b869 	b.w	80064d8 <_fwalk_sglue>
 8006406:	bf00      	nop
 8006408:	20000414 	.word	0x20000414
 800640c:	08009195 	.word	0x08009195
 8006410:	20000424 	.word	0x20000424

08006414 <cleanup_stdio>:
 8006414:	6841      	ldr	r1, [r0, #4]
 8006416:	4b0c      	ldr	r3, [pc, #48]	@ (8006448 <cleanup_stdio+0x34>)
 8006418:	b510      	push	{r4, lr}
 800641a:	4299      	cmp	r1, r3
 800641c:	4604      	mov	r4, r0
 800641e:	d001      	beq.n	8006424 <cleanup_stdio+0x10>
 8006420:	f002 feb8 	bl	8009194 <_fflush_r>
 8006424:	68a1      	ldr	r1, [r4, #8]
 8006426:	4b09      	ldr	r3, [pc, #36]	@ (800644c <cleanup_stdio+0x38>)
 8006428:	4299      	cmp	r1, r3
 800642a:	d002      	beq.n	8006432 <cleanup_stdio+0x1e>
 800642c:	4620      	mov	r0, r4
 800642e:	f002 feb1 	bl	8009194 <_fflush_r>
 8006432:	68e1      	ldr	r1, [r4, #12]
 8006434:	4b06      	ldr	r3, [pc, #24]	@ (8006450 <cleanup_stdio+0x3c>)
 8006436:	4299      	cmp	r1, r3
 8006438:	d004      	beq.n	8006444 <cleanup_stdio+0x30>
 800643a:	4620      	mov	r0, r4
 800643c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006440:	f002 bea8 	b.w	8009194 <_fflush_r>
 8006444:	bd10      	pop	{r4, pc}
 8006446:	bf00      	nop
 8006448:	20003018 	.word	0x20003018
 800644c:	20003080 	.word	0x20003080
 8006450:	200030e8 	.word	0x200030e8

08006454 <global_stdio_init.part.0>:
 8006454:	b510      	push	{r4, lr}
 8006456:	4b0b      	ldr	r3, [pc, #44]	@ (8006484 <global_stdio_init.part.0+0x30>)
 8006458:	4c0b      	ldr	r4, [pc, #44]	@ (8006488 <global_stdio_init.part.0+0x34>)
 800645a:	4a0c      	ldr	r2, [pc, #48]	@ (800648c <global_stdio_init.part.0+0x38>)
 800645c:	4620      	mov	r0, r4
 800645e:	601a      	str	r2, [r3, #0]
 8006460:	2104      	movs	r1, #4
 8006462:	2200      	movs	r2, #0
 8006464:	f7ff ff94 	bl	8006390 <std>
 8006468:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800646c:	2201      	movs	r2, #1
 800646e:	2109      	movs	r1, #9
 8006470:	f7ff ff8e 	bl	8006390 <std>
 8006474:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006478:	2202      	movs	r2, #2
 800647a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800647e:	2112      	movs	r1, #18
 8006480:	f7ff bf86 	b.w	8006390 <std>
 8006484:	20003150 	.word	0x20003150
 8006488:	20003018 	.word	0x20003018
 800648c:	080063fd 	.word	0x080063fd

08006490 <__sfp_lock_acquire>:
 8006490:	4801      	ldr	r0, [pc, #4]	@ (8006498 <__sfp_lock_acquire+0x8>)
 8006492:	f000 ba12 	b.w	80068ba <__retarget_lock_acquire_recursive>
 8006496:	bf00      	nop
 8006498:	20003159 	.word	0x20003159

0800649c <__sfp_lock_release>:
 800649c:	4801      	ldr	r0, [pc, #4]	@ (80064a4 <__sfp_lock_release+0x8>)
 800649e:	f000 ba0d 	b.w	80068bc <__retarget_lock_release_recursive>
 80064a2:	bf00      	nop
 80064a4:	20003159 	.word	0x20003159

080064a8 <__sinit>:
 80064a8:	b510      	push	{r4, lr}
 80064aa:	4604      	mov	r4, r0
 80064ac:	f7ff fff0 	bl	8006490 <__sfp_lock_acquire>
 80064b0:	6a23      	ldr	r3, [r4, #32]
 80064b2:	b11b      	cbz	r3, 80064bc <__sinit+0x14>
 80064b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80064b8:	f7ff bff0 	b.w	800649c <__sfp_lock_release>
 80064bc:	4b04      	ldr	r3, [pc, #16]	@ (80064d0 <__sinit+0x28>)
 80064be:	6223      	str	r3, [r4, #32]
 80064c0:	4b04      	ldr	r3, [pc, #16]	@ (80064d4 <__sinit+0x2c>)
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d1f5      	bne.n	80064b4 <__sinit+0xc>
 80064c8:	f7ff ffc4 	bl	8006454 <global_stdio_init.part.0>
 80064cc:	e7f2      	b.n	80064b4 <__sinit+0xc>
 80064ce:	bf00      	nop
 80064d0:	08006415 	.word	0x08006415
 80064d4:	20003150 	.word	0x20003150

080064d8 <_fwalk_sglue>:
 80064d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80064dc:	4607      	mov	r7, r0
 80064de:	4688      	mov	r8, r1
 80064e0:	4614      	mov	r4, r2
 80064e2:	2600      	movs	r6, #0
 80064e4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80064e8:	f1b9 0901 	subs.w	r9, r9, #1
 80064ec:	d505      	bpl.n	80064fa <_fwalk_sglue+0x22>
 80064ee:	6824      	ldr	r4, [r4, #0]
 80064f0:	2c00      	cmp	r4, #0
 80064f2:	d1f7      	bne.n	80064e4 <_fwalk_sglue+0xc>
 80064f4:	4630      	mov	r0, r6
 80064f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80064fa:	89ab      	ldrh	r3, [r5, #12]
 80064fc:	2b01      	cmp	r3, #1
 80064fe:	d907      	bls.n	8006510 <_fwalk_sglue+0x38>
 8006500:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006504:	3301      	adds	r3, #1
 8006506:	d003      	beq.n	8006510 <_fwalk_sglue+0x38>
 8006508:	4629      	mov	r1, r5
 800650a:	4638      	mov	r0, r7
 800650c:	47c0      	blx	r8
 800650e:	4306      	orrs	r6, r0
 8006510:	3568      	adds	r5, #104	@ 0x68
 8006512:	e7e9      	b.n	80064e8 <_fwalk_sglue+0x10>

08006514 <_puts_r>:
 8006514:	6a03      	ldr	r3, [r0, #32]
 8006516:	b570      	push	{r4, r5, r6, lr}
 8006518:	4605      	mov	r5, r0
 800651a:	460e      	mov	r6, r1
 800651c:	6884      	ldr	r4, [r0, #8]
 800651e:	b90b      	cbnz	r3, 8006524 <_puts_r+0x10>
 8006520:	f7ff ffc2 	bl	80064a8 <__sinit>
 8006524:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006526:	07db      	lsls	r3, r3, #31
 8006528:	d405      	bmi.n	8006536 <_puts_r+0x22>
 800652a:	89a3      	ldrh	r3, [r4, #12]
 800652c:	0598      	lsls	r0, r3, #22
 800652e:	d402      	bmi.n	8006536 <_puts_r+0x22>
 8006530:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006532:	f000 f9c2 	bl	80068ba <__retarget_lock_acquire_recursive>
 8006536:	89a3      	ldrh	r3, [r4, #12]
 8006538:	0719      	lsls	r1, r3, #28
 800653a:	d502      	bpl.n	8006542 <_puts_r+0x2e>
 800653c:	6923      	ldr	r3, [r4, #16]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d135      	bne.n	80065ae <_puts_r+0x9a>
 8006542:	4621      	mov	r1, r4
 8006544:	4628      	mov	r0, r5
 8006546:	f000 f8e5 	bl	8006714 <__swsetup_r>
 800654a:	b380      	cbz	r0, 80065ae <_puts_r+0x9a>
 800654c:	f04f 35ff 	mov.w	r5, #4294967295
 8006550:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006552:	07da      	lsls	r2, r3, #31
 8006554:	d405      	bmi.n	8006562 <_puts_r+0x4e>
 8006556:	89a3      	ldrh	r3, [r4, #12]
 8006558:	059b      	lsls	r3, r3, #22
 800655a:	d402      	bmi.n	8006562 <_puts_r+0x4e>
 800655c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800655e:	f000 f9ad 	bl	80068bc <__retarget_lock_release_recursive>
 8006562:	4628      	mov	r0, r5
 8006564:	bd70      	pop	{r4, r5, r6, pc}
 8006566:	2b00      	cmp	r3, #0
 8006568:	da04      	bge.n	8006574 <_puts_r+0x60>
 800656a:	69a2      	ldr	r2, [r4, #24]
 800656c:	429a      	cmp	r2, r3
 800656e:	dc17      	bgt.n	80065a0 <_puts_r+0x8c>
 8006570:	290a      	cmp	r1, #10
 8006572:	d015      	beq.n	80065a0 <_puts_r+0x8c>
 8006574:	6823      	ldr	r3, [r4, #0]
 8006576:	1c5a      	adds	r2, r3, #1
 8006578:	6022      	str	r2, [r4, #0]
 800657a:	7019      	strb	r1, [r3, #0]
 800657c:	68a3      	ldr	r3, [r4, #8]
 800657e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006582:	3b01      	subs	r3, #1
 8006584:	60a3      	str	r3, [r4, #8]
 8006586:	2900      	cmp	r1, #0
 8006588:	d1ed      	bne.n	8006566 <_puts_r+0x52>
 800658a:	2b00      	cmp	r3, #0
 800658c:	da11      	bge.n	80065b2 <_puts_r+0x9e>
 800658e:	4622      	mov	r2, r4
 8006590:	210a      	movs	r1, #10
 8006592:	4628      	mov	r0, r5
 8006594:	f000 f87f 	bl	8006696 <__swbuf_r>
 8006598:	3001      	adds	r0, #1
 800659a:	d0d7      	beq.n	800654c <_puts_r+0x38>
 800659c:	250a      	movs	r5, #10
 800659e:	e7d7      	b.n	8006550 <_puts_r+0x3c>
 80065a0:	4622      	mov	r2, r4
 80065a2:	4628      	mov	r0, r5
 80065a4:	f000 f877 	bl	8006696 <__swbuf_r>
 80065a8:	3001      	adds	r0, #1
 80065aa:	d1e7      	bne.n	800657c <_puts_r+0x68>
 80065ac:	e7ce      	b.n	800654c <_puts_r+0x38>
 80065ae:	3e01      	subs	r6, #1
 80065b0:	e7e4      	b.n	800657c <_puts_r+0x68>
 80065b2:	6823      	ldr	r3, [r4, #0]
 80065b4:	1c5a      	adds	r2, r3, #1
 80065b6:	6022      	str	r2, [r4, #0]
 80065b8:	220a      	movs	r2, #10
 80065ba:	701a      	strb	r2, [r3, #0]
 80065bc:	e7ee      	b.n	800659c <_puts_r+0x88>
	...

080065c0 <puts>:
 80065c0:	4b02      	ldr	r3, [pc, #8]	@ (80065cc <puts+0xc>)
 80065c2:	4601      	mov	r1, r0
 80065c4:	6818      	ldr	r0, [r3, #0]
 80065c6:	f7ff bfa5 	b.w	8006514 <_puts_r>
 80065ca:	bf00      	nop
 80065cc:	20000420 	.word	0x20000420

080065d0 <siprintf>:
 80065d0:	b40e      	push	{r1, r2, r3}
 80065d2:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80065d6:	b500      	push	{lr}
 80065d8:	b09c      	sub	sp, #112	@ 0x70
 80065da:	ab1d      	add	r3, sp, #116	@ 0x74
 80065dc:	9002      	str	r0, [sp, #8]
 80065de:	9006      	str	r0, [sp, #24]
 80065e0:	9107      	str	r1, [sp, #28]
 80065e2:	9104      	str	r1, [sp, #16]
 80065e4:	4808      	ldr	r0, [pc, #32]	@ (8006608 <siprintf+0x38>)
 80065e6:	4909      	ldr	r1, [pc, #36]	@ (800660c <siprintf+0x3c>)
 80065e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80065ec:	9105      	str	r1, [sp, #20]
 80065ee:	6800      	ldr	r0, [r0, #0]
 80065f0:	a902      	add	r1, sp, #8
 80065f2:	9301      	str	r3, [sp, #4]
 80065f4:	f002 fc52 	bl	8008e9c <_svfiprintf_r>
 80065f8:	2200      	movs	r2, #0
 80065fa:	9b02      	ldr	r3, [sp, #8]
 80065fc:	701a      	strb	r2, [r3, #0]
 80065fe:	b01c      	add	sp, #112	@ 0x70
 8006600:	f85d eb04 	ldr.w	lr, [sp], #4
 8006604:	b003      	add	sp, #12
 8006606:	4770      	bx	lr
 8006608:	20000420 	.word	0x20000420
 800660c:	ffff0208 	.word	0xffff0208

08006610 <__sread>:
 8006610:	b510      	push	{r4, lr}
 8006612:	460c      	mov	r4, r1
 8006614:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006618:	f000 f900 	bl	800681c <_read_r>
 800661c:	2800      	cmp	r0, #0
 800661e:	bfab      	itete	ge
 8006620:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006622:	89a3      	ldrhlt	r3, [r4, #12]
 8006624:	181b      	addge	r3, r3, r0
 8006626:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800662a:	bfac      	ite	ge
 800662c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800662e:	81a3      	strhlt	r3, [r4, #12]
 8006630:	bd10      	pop	{r4, pc}

08006632 <__swrite>:
 8006632:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006636:	461f      	mov	r7, r3
 8006638:	898b      	ldrh	r3, [r1, #12]
 800663a:	4605      	mov	r5, r0
 800663c:	05db      	lsls	r3, r3, #23
 800663e:	460c      	mov	r4, r1
 8006640:	4616      	mov	r6, r2
 8006642:	d505      	bpl.n	8006650 <__swrite+0x1e>
 8006644:	2302      	movs	r3, #2
 8006646:	2200      	movs	r2, #0
 8006648:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800664c:	f000 f8d4 	bl	80067f8 <_lseek_r>
 8006650:	89a3      	ldrh	r3, [r4, #12]
 8006652:	4632      	mov	r2, r6
 8006654:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006658:	81a3      	strh	r3, [r4, #12]
 800665a:	4628      	mov	r0, r5
 800665c:	463b      	mov	r3, r7
 800665e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006662:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006666:	f000 b8eb 	b.w	8006840 <_write_r>

0800666a <__sseek>:
 800666a:	b510      	push	{r4, lr}
 800666c:	460c      	mov	r4, r1
 800666e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006672:	f000 f8c1 	bl	80067f8 <_lseek_r>
 8006676:	1c43      	adds	r3, r0, #1
 8006678:	89a3      	ldrh	r3, [r4, #12]
 800667a:	bf15      	itete	ne
 800667c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800667e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006682:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006686:	81a3      	strheq	r3, [r4, #12]
 8006688:	bf18      	it	ne
 800668a:	81a3      	strhne	r3, [r4, #12]
 800668c:	bd10      	pop	{r4, pc}

0800668e <__sclose>:
 800668e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006692:	f000 b8a1 	b.w	80067d8 <_close_r>

08006696 <__swbuf_r>:
 8006696:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006698:	460e      	mov	r6, r1
 800669a:	4614      	mov	r4, r2
 800669c:	4605      	mov	r5, r0
 800669e:	b118      	cbz	r0, 80066a8 <__swbuf_r+0x12>
 80066a0:	6a03      	ldr	r3, [r0, #32]
 80066a2:	b90b      	cbnz	r3, 80066a8 <__swbuf_r+0x12>
 80066a4:	f7ff ff00 	bl	80064a8 <__sinit>
 80066a8:	69a3      	ldr	r3, [r4, #24]
 80066aa:	60a3      	str	r3, [r4, #8]
 80066ac:	89a3      	ldrh	r3, [r4, #12]
 80066ae:	071a      	lsls	r2, r3, #28
 80066b0:	d501      	bpl.n	80066b6 <__swbuf_r+0x20>
 80066b2:	6923      	ldr	r3, [r4, #16]
 80066b4:	b943      	cbnz	r3, 80066c8 <__swbuf_r+0x32>
 80066b6:	4621      	mov	r1, r4
 80066b8:	4628      	mov	r0, r5
 80066ba:	f000 f82b 	bl	8006714 <__swsetup_r>
 80066be:	b118      	cbz	r0, 80066c8 <__swbuf_r+0x32>
 80066c0:	f04f 37ff 	mov.w	r7, #4294967295
 80066c4:	4638      	mov	r0, r7
 80066c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80066c8:	6823      	ldr	r3, [r4, #0]
 80066ca:	6922      	ldr	r2, [r4, #16]
 80066cc:	b2f6      	uxtb	r6, r6
 80066ce:	1a98      	subs	r0, r3, r2
 80066d0:	6963      	ldr	r3, [r4, #20]
 80066d2:	4637      	mov	r7, r6
 80066d4:	4283      	cmp	r3, r0
 80066d6:	dc05      	bgt.n	80066e4 <__swbuf_r+0x4e>
 80066d8:	4621      	mov	r1, r4
 80066da:	4628      	mov	r0, r5
 80066dc:	f002 fd5a 	bl	8009194 <_fflush_r>
 80066e0:	2800      	cmp	r0, #0
 80066e2:	d1ed      	bne.n	80066c0 <__swbuf_r+0x2a>
 80066e4:	68a3      	ldr	r3, [r4, #8]
 80066e6:	3b01      	subs	r3, #1
 80066e8:	60a3      	str	r3, [r4, #8]
 80066ea:	6823      	ldr	r3, [r4, #0]
 80066ec:	1c5a      	adds	r2, r3, #1
 80066ee:	6022      	str	r2, [r4, #0]
 80066f0:	701e      	strb	r6, [r3, #0]
 80066f2:	6962      	ldr	r2, [r4, #20]
 80066f4:	1c43      	adds	r3, r0, #1
 80066f6:	429a      	cmp	r2, r3
 80066f8:	d004      	beq.n	8006704 <__swbuf_r+0x6e>
 80066fa:	89a3      	ldrh	r3, [r4, #12]
 80066fc:	07db      	lsls	r3, r3, #31
 80066fe:	d5e1      	bpl.n	80066c4 <__swbuf_r+0x2e>
 8006700:	2e0a      	cmp	r6, #10
 8006702:	d1df      	bne.n	80066c4 <__swbuf_r+0x2e>
 8006704:	4621      	mov	r1, r4
 8006706:	4628      	mov	r0, r5
 8006708:	f002 fd44 	bl	8009194 <_fflush_r>
 800670c:	2800      	cmp	r0, #0
 800670e:	d0d9      	beq.n	80066c4 <__swbuf_r+0x2e>
 8006710:	e7d6      	b.n	80066c0 <__swbuf_r+0x2a>
	...

08006714 <__swsetup_r>:
 8006714:	b538      	push	{r3, r4, r5, lr}
 8006716:	4b29      	ldr	r3, [pc, #164]	@ (80067bc <__swsetup_r+0xa8>)
 8006718:	4605      	mov	r5, r0
 800671a:	6818      	ldr	r0, [r3, #0]
 800671c:	460c      	mov	r4, r1
 800671e:	b118      	cbz	r0, 8006728 <__swsetup_r+0x14>
 8006720:	6a03      	ldr	r3, [r0, #32]
 8006722:	b90b      	cbnz	r3, 8006728 <__swsetup_r+0x14>
 8006724:	f7ff fec0 	bl	80064a8 <__sinit>
 8006728:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800672c:	0719      	lsls	r1, r3, #28
 800672e:	d422      	bmi.n	8006776 <__swsetup_r+0x62>
 8006730:	06da      	lsls	r2, r3, #27
 8006732:	d407      	bmi.n	8006744 <__swsetup_r+0x30>
 8006734:	2209      	movs	r2, #9
 8006736:	602a      	str	r2, [r5, #0]
 8006738:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800673c:	f04f 30ff 	mov.w	r0, #4294967295
 8006740:	81a3      	strh	r3, [r4, #12]
 8006742:	e033      	b.n	80067ac <__swsetup_r+0x98>
 8006744:	0758      	lsls	r0, r3, #29
 8006746:	d512      	bpl.n	800676e <__swsetup_r+0x5a>
 8006748:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800674a:	b141      	cbz	r1, 800675e <__swsetup_r+0x4a>
 800674c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006750:	4299      	cmp	r1, r3
 8006752:	d002      	beq.n	800675a <__swsetup_r+0x46>
 8006754:	4628      	mov	r0, r5
 8006756:	f000 ff23 	bl	80075a0 <_free_r>
 800675a:	2300      	movs	r3, #0
 800675c:	6363      	str	r3, [r4, #52]	@ 0x34
 800675e:	89a3      	ldrh	r3, [r4, #12]
 8006760:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006764:	81a3      	strh	r3, [r4, #12]
 8006766:	2300      	movs	r3, #0
 8006768:	6063      	str	r3, [r4, #4]
 800676a:	6923      	ldr	r3, [r4, #16]
 800676c:	6023      	str	r3, [r4, #0]
 800676e:	89a3      	ldrh	r3, [r4, #12]
 8006770:	f043 0308 	orr.w	r3, r3, #8
 8006774:	81a3      	strh	r3, [r4, #12]
 8006776:	6923      	ldr	r3, [r4, #16]
 8006778:	b94b      	cbnz	r3, 800678e <__swsetup_r+0x7a>
 800677a:	89a3      	ldrh	r3, [r4, #12]
 800677c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006780:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006784:	d003      	beq.n	800678e <__swsetup_r+0x7a>
 8006786:	4621      	mov	r1, r4
 8006788:	4628      	mov	r0, r5
 800678a:	f002 fd50 	bl	800922e <__smakebuf_r>
 800678e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006792:	f013 0201 	ands.w	r2, r3, #1
 8006796:	d00a      	beq.n	80067ae <__swsetup_r+0x9a>
 8006798:	2200      	movs	r2, #0
 800679a:	60a2      	str	r2, [r4, #8]
 800679c:	6962      	ldr	r2, [r4, #20]
 800679e:	4252      	negs	r2, r2
 80067a0:	61a2      	str	r2, [r4, #24]
 80067a2:	6922      	ldr	r2, [r4, #16]
 80067a4:	b942      	cbnz	r2, 80067b8 <__swsetup_r+0xa4>
 80067a6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80067aa:	d1c5      	bne.n	8006738 <__swsetup_r+0x24>
 80067ac:	bd38      	pop	{r3, r4, r5, pc}
 80067ae:	0799      	lsls	r1, r3, #30
 80067b0:	bf58      	it	pl
 80067b2:	6962      	ldrpl	r2, [r4, #20]
 80067b4:	60a2      	str	r2, [r4, #8]
 80067b6:	e7f4      	b.n	80067a2 <__swsetup_r+0x8e>
 80067b8:	2000      	movs	r0, #0
 80067ba:	e7f7      	b.n	80067ac <__swsetup_r+0x98>
 80067bc:	20000420 	.word	0x20000420

080067c0 <memset>:
 80067c0:	4603      	mov	r3, r0
 80067c2:	4402      	add	r2, r0
 80067c4:	4293      	cmp	r3, r2
 80067c6:	d100      	bne.n	80067ca <memset+0xa>
 80067c8:	4770      	bx	lr
 80067ca:	f803 1b01 	strb.w	r1, [r3], #1
 80067ce:	e7f9      	b.n	80067c4 <memset+0x4>

080067d0 <_localeconv_r>:
 80067d0:	4800      	ldr	r0, [pc, #0]	@ (80067d4 <_localeconv_r+0x4>)
 80067d2:	4770      	bx	lr
 80067d4:	20000560 	.word	0x20000560

080067d8 <_close_r>:
 80067d8:	b538      	push	{r3, r4, r5, lr}
 80067da:	2300      	movs	r3, #0
 80067dc:	4d05      	ldr	r5, [pc, #20]	@ (80067f4 <_close_r+0x1c>)
 80067de:	4604      	mov	r4, r0
 80067e0:	4608      	mov	r0, r1
 80067e2:	602b      	str	r3, [r5, #0]
 80067e4:	f7fa fe29 	bl	800143a <_close>
 80067e8:	1c43      	adds	r3, r0, #1
 80067ea:	d102      	bne.n	80067f2 <_close_r+0x1a>
 80067ec:	682b      	ldr	r3, [r5, #0]
 80067ee:	b103      	cbz	r3, 80067f2 <_close_r+0x1a>
 80067f0:	6023      	str	r3, [r4, #0]
 80067f2:	bd38      	pop	{r3, r4, r5, pc}
 80067f4:	20003154 	.word	0x20003154

080067f8 <_lseek_r>:
 80067f8:	b538      	push	{r3, r4, r5, lr}
 80067fa:	4604      	mov	r4, r0
 80067fc:	4608      	mov	r0, r1
 80067fe:	4611      	mov	r1, r2
 8006800:	2200      	movs	r2, #0
 8006802:	4d05      	ldr	r5, [pc, #20]	@ (8006818 <_lseek_r+0x20>)
 8006804:	602a      	str	r2, [r5, #0]
 8006806:	461a      	mov	r2, r3
 8006808:	f7fa fe3b 	bl	8001482 <_lseek>
 800680c:	1c43      	adds	r3, r0, #1
 800680e:	d102      	bne.n	8006816 <_lseek_r+0x1e>
 8006810:	682b      	ldr	r3, [r5, #0]
 8006812:	b103      	cbz	r3, 8006816 <_lseek_r+0x1e>
 8006814:	6023      	str	r3, [r4, #0]
 8006816:	bd38      	pop	{r3, r4, r5, pc}
 8006818:	20003154 	.word	0x20003154

0800681c <_read_r>:
 800681c:	b538      	push	{r3, r4, r5, lr}
 800681e:	4604      	mov	r4, r0
 8006820:	4608      	mov	r0, r1
 8006822:	4611      	mov	r1, r2
 8006824:	2200      	movs	r2, #0
 8006826:	4d05      	ldr	r5, [pc, #20]	@ (800683c <_read_r+0x20>)
 8006828:	602a      	str	r2, [r5, #0]
 800682a:	461a      	mov	r2, r3
 800682c:	f7fa fdcc 	bl	80013c8 <_read>
 8006830:	1c43      	adds	r3, r0, #1
 8006832:	d102      	bne.n	800683a <_read_r+0x1e>
 8006834:	682b      	ldr	r3, [r5, #0]
 8006836:	b103      	cbz	r3, 800683a <_read_r+0x1e>
 8006838:	6023      	str	r3, [r4, #0]
 800683a:	bd38      	pop	{r3, r4, r5, pc}
 800683c:	20003154 	.word	0x20003154

08006840 <_write_r>:
 8006840:	b538      	push	{r3, r4, r5, lr}
 8006842:	4604      	mov	r4, r0
 8006844:	4608      	mov	r0, r1
 8006846:	4611      	mov	r1, r2
 8006848:	2200      	movs	r2, #0
 800684a:	4d05      	ldr	r5, [pc, #20]	@ (8006860 <_write_r+0x20>)
 800684c:	602a      	str	r2, [r5, #0]
 800684e:	461a      	mov	r2, r3
 8006850:	f7fa fdd7 	bl	8001402 <_write>
 8006854:	1c43      	adds	r3, r0, #1
 8006856:	d102      	bne.n	800685e <_write_r+0x1e>
 8006858:	682b      	ldr	r3, [r5, #0]
 800685a:	b103      	cbz	r3, 800685e <_write_r+0x1e>
 800685c:	6023      	str	r3, [r4, #0]
 800685e:	bd38      	pop	{r3, r4, r5, pc}
 8006860:	20003154 	.word	0x20003154

08006864 <__errno>:
 8006864:	4b01      	ldr	r3, [pc, #4]	@ (800686c <__errno+0x8>)
 8006866:	6818      	ldr	r0, [r3, #0]
 8006868:	4770      	bx	lr
 800686a:	bf00      	nop
 800686c:	20000420 	.word	0x20000420

08006870 <__libc_init_array>:
 8006870:	b570      	push	{r4, r5, r6, lr}
 8006872:	2600      	movs	r6, #0
 8006874:	4d0c      	ldr	r5, [pc, #48]	@ (80068a8 <__libc_init_array+0x38>)
 8006876:	4c0d      	ldr	r4, [pc, #52]	@ (80068ac <__libc_init_array+0x3c>)
 8006878:	1b64      	subs	r4, r4, r5
 800687a:	10a4      	asrs	r4, r4, #2
 800687c:	42a6      	cmp	r6, r4
 800687e:	d109      	bne.n	8006894 <__libc_init_array+0x24>
 8006880:	f003 fad2 	bl	8009e28 <_init>
 8006884:	2600      	movs	r6, #0
 8006886:	4d0a      	ldr	r5, [pc, #40]	@ (80068b0 <__libc_init_array+0x40>)
 8006888:	4c0a      	ldr	r4, [pc, #40]	@ (80068b4 <__libc_init_array+0x44>)
 800688a:	1b64      	subs	r4, r4, r5
 800688c:	10a4      	asrs	r4, r4, #2
 800688e:	42a6      	cmp	r6, r4
 8006890:	d105      	bne.n	800689e <__libc_init_array+0x2e>
 8006892:	bd70      	pop	{r4, r5, r6, pc}
 8006894:	f855 3b04 	ldr.w	r3, [r5], #4
 8006898:	4798      	blx	r3
 800689a:	3601      	adds	r6, #1
 800689c:	e7ee      	b.n	800687c <__libc_init_array+0xc>
 800689e:	f855 3b04 	ldr.w	r3, [r5], #4
 80068a2:	4798      	blx	r3
 80068a4:	3601      	adds	r6, #1
 80068a6:	e7f2      	b.n	800688e <__libc_init_array+0x1e>
 80068a8:	0800a2e0 	.word	0x0800a2e0
 80068ac:	0800a2e0 	.word	0x0800a2e0
 80068b0:	0800a2e0 	.word	0x0800a2e0
 80068b4:	0800a2e4 	.word	0x0800a2e4

080068b8 <__retarget_lock_init_recursive>:
 80068b8:	4770      	bx	lr

080068ba <__retarget_lock_acquire_recursive>:
 80068ba:	4770      	bx	lr

080068bc <__retarget_lock_release_recursive>:
 80068bc:	4770      	bx	lr

080068be <memchr>:
 80068be:	4603      	mov	r3, r0
 80068c0:	b510      	push	{r4, lr}
 80068c2:	b2c9      	uxtb	r1, r1
 80068c4:	4402      	add	r2, r0
 80068c6:	4293      	cmp	r3, r2
 80068c8:	4618      	mov	r0, r3
 80068ca:	d101      	bne.n	80068d0 <memchr+0x12>
 80068cc:	2000      	movs	r0, #0
 80068ce:	e003      	b.n	80068d8 <memchr+0x1a>
 80068d0:	7804      	ldrb	r4, [r0, #0]
 80068d2:	3301      	adds	r3, #1
 80068d4:	428c      	cmp	r4, r1
 80068d6:	d1f6      	bne.n	80068c6 <memchr+0x8>
 80068d8:	bd10      	pop	{r4, pc}

080068da <memcpy>:
 80068da:	440a      	add	r2, r1
 80068dc:	4291      	cmp	r1, r2
 80068de:	f100 33ff 	add.w	r3, r0, #4294967295
 80068e2:	d100      	bne.n	80068e6 <memcpy+0xc>
 80068e4:	4770      	bx	lr
 80068e6:	b510      	push	{r4, lr}
 80068e8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80068ec:	4291      	cmp	r1, r2
 80068ee:	f803 4f01 	strb.w	r4, [r3, #1]!
 80068f2:	d1f9      	bne.n	80068e8 <memcpy+0xe>
 80068f4:	bd10      	pop	{r4, pc}
	...

080068f8 <nanf>:
 80068f8:	4800      	ldr	r0, [pc, #0]	@ (80068fc <nanf+0x4>)
 80068fa:	4770      	bx	lr
 80068fc:	7fc00000 	.word	0x7fc00000

08006900 <quorem>:
 8006900:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006904:	6903      	ldr	r3, [r0, #16]
 8006906:	690c      	ldr	r4, [r1, #16]
 8006908:	4607      	mov	r7, r0
 800690a:	42a3      	cmp	r3, r4
 800690c:	db7e      	blt.n	8006a0c <quorem+0x10c>
 800690e:	3c01      	subs	r4, #1
 8006910:	00a3      	lsls	r3, r4, #2
 8006912:	f100 0514 	add.w	r5, r0, #20
 8006916:	f101 0814 	add.w	r8, r1, #20
 800691a:	9300      	str	r3, [sp, #0]
 800691c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006920:	9301      	str	r3, [sp, #4]
 8006922:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006926:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800692a:	3301      	adds	r3, #1
 800692c:	429a      	cmp	r2, r3
 800692e:	fbb2 f6f3 	udiv	r6, r2, r3
 8006932:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006936:	d32e      	bcc.n	8006996 <quorem+0x96>
 8006938:	f04f 0a00 	mov.w	sl, #0
 800693c:	46c4      	mov	ip, r8
 800693e:	46ae      	mov	lr, r5
 8006940:	46d3      	mov	fp, sl
 8006942:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006946:	b298      	uxth	r0, r3
 8006948:	fb06 a000 	mla	r0, r6, r0, sl
 800694c:	0c1b      	lsrs	r3, r3, #16
 800694e:	0c02      	lsrs	r2, r0, #16
 8006950:	fb06 2303 	mla	r3, r6, r3, r2
 8006954:	f8de 2000 	ldr.w	r2, [lr]
 8006958:	b280      	uxth	r0, r0
 800695a:	b292      	uxth	r2, r2
 800695c:	1a12      	subs	r2, r2, r0
 800695e:	445a      	add	r2, fp
 8006960:	f8de 0000 	ldr.w	r0, [lr]
 8006964:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006968:	b29b      	uxth	r3, r3
 800696a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800696e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006972:	b292      	uxth	r2, r2
 8006974:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006978:	45e1      	cmp	r9, ip
 800697a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800697e:	f84e 2b04 	str.w	r2, [lr], #4
 8006982:	d2de      	bcs.n	8006942 <quorem+0x42>
 8006984:	9b00      	ldr	r3, [sp, #0]
 8006986:	58eb      	ldr	r3, [r5, r3]
 8006988:	b92b      	cbnz	r3, 8006996 <quorem+0x96>
 800698a:	9b01      	ldr	r3, [sp, #4]
 800698c:	3b04      	subs	r3, #4
 800698e:	429d      	cmp	r5, r3
 8006990:	461a      	mov	r2, r3
 8006992:	d32f      	bcc.n	80069f4 <quorem+0xf4>
 8006994:	613c      	str	r4, [r7, #16]
 8006996:	4638      	mov	r0, r7
 8006998:	f001 f9c2 	bl	8007d20 <__mcmp>
 800699c:	2800      	cmp	r0, #0
 800699e:	db25      	blt.n	80069ec <quorem+0xec>
 80069a0:	4629      	mov	r1, r5
 80069a2:	2000      	movs	r0, #0
 80069a4:	f858 2b04 	ldr.w	r2, [r8], #4
 80069a8:	f8d1 c000 	ldr.w	ip, [r1]
 80069ac:	fa1f fe82 	uxth.w	lr, r2
 80069b0:	fa1f f38c 	uxth.w	r3, ip
 80069b4:	eba3 030e 	sub.w	r3, r3, lr
 80069b8:	4403      	add	r3, r0
 80069ba:	0c12      	lsrs	r2, r2, #16
 80069bc:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80069c0:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80069c4:	b29b      	uxth	r3, r3
 80069c6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80069ca:	45c1      	cmp	r9, r8
 80069cc:	ea4f 4022 	mov.w	r0, r2, asr #16
 80069d0:	f841 3b04 	str.w	r3, [r1], #4
 80069d4:	d2e6      	bcs.n	80069a4 <quorem+0xa4>
 80069d6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80069da:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80069de:	b922      	cbnz	r2, 80069ea <quorem+0xea>
 80069e0:	3b04      	subs	r3, #4
 80069e2:	429d      	cmp	r5, r3
 80069e4:	461a      	mov	r2, r3
 80069e6:	d30b      	bcc.n	8006a00 <quorem+0x100>
 80069e8:	613c      	str	r4, [r7, #16]
 80069ea:	3601      	adds	r6, #1
 80069ec:	4630      	mov	r0, r6
 80069ee:	b003      	add	sp, #12
 80069f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069f4:	6812      	ldr	r2, [r2, #0]
 80069f6:	3b04      	subs	r3, #4
 80069f8:	2a00      	cmp	r2, #0
 80069fa:	d1cb      	bne.n	8006994 <quorem+0x94>
 80069fc:	3c01      	subs	r4, #1
 80069fe:	e7c6      	b.n	800698e <quorem+0x8e>
 8006a00:	6812      	ldr	r2, [r2, #0]
 8006a02:	3b04      	subs	r3, #4
 8006a04:	2a00      	cmp	r2, #0
 8006a06:	d1ef      	bne.n	80069e8 <quorem+0xe8>
 8006a08:	3c01      	subs	r4, #1
 8006a0a:	e7ea      	b.n	80069e2 <quorem+0xe2>
 8006a0c:	2000      	movs	r0, #0
 8006a0e:	e7ee      	b.n	80069ee <quorem+0xee>

08006a10 <_dtoa_r>:
 8006a10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a14:	4614      	mov	r4, r2
 8006a16:	461d      	mov	r5, r3
 8006a18:	69c7      	ldr	r7, [r0, #28]
 8006a1a:	b097      	sub	sp, #92	@ 0x5c
 8006a1c:	4683      	mov	fp, r0
 8006a1e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8006a22:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8006a24:	b97f      	cbnz	r7, 8006a46 <_dtoa_r+0x36>
 8006a26:	2010      	movs	r0, #16
 8006a28:	f000 fe02 	bl	8007630 <malloc>
 8006a2c:	4602      	mov	r2, r0
 8006a2e:	f8cb 001c 	str.w	r0, [fp, #28]
 8006a32:	b920      	cbnz	r0, 8006a3e <_dtoa_r+0x2e>
 8006a34:	21ef      	movs	r1, #239	@ 0xef
 8006a36:	4ba8      	ldr	r3, [pc, #672]	@ (8006cd8 <_dtoa_r+0x2c8>)
 8006a38:	48a8      	ldr	r0, [pc, #672]	@ (8006cdc <_dtoa_r+0x2cc>)
 8006a3a:	f002 fc99 	bl	8009370 <__assert_func>
 8006a3e:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006a42:	6007      	str	r7, [r0, #0]
 8006a44:	60c7      	str	r7, [r0, #12]
 8006a46:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006a4a:	6819      	ldr	r1, [r3, #0]
 8006a4c:	b159      	cbz	r1, 8006a66 <_dtoa_r+0x56>
 8006a4e:	685a      	ldr	r2, [r3, #4]
 8006a50:	2301      	movs	r3, #1
 8006a52:	4093      	lsls	r3, r2
 8006a54:	604a      	str	r2, [r1, #4]
 8006a56:	608b      	str	r3, [r1, #8]
 8006a58:	4658      	mov	r0, fp
 8006a5a:	f000 fedf 	bl	800781c <_Bfree>
 8006a5e:	2200      	movs	r2, #0
 8006a60:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006a64:	601a      	str	r2, [r3, #0]
 8006a66:	1e2b      	subs	r3, r5, #0
 8006a68:	bfaf      	iteee	ge
 8006a6a:	2300      	movge	r3, #0
 8006a6c:	2201      	movlt	r2, #1
 8006a6e:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006a72:	9303      	strlt	r3, [sp, #12]
 8006a74:	bfa8      	it	ge
 8006a76:	6033      	strge	r3, [r6, #0]
 8006a78:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8006a7c:	4b98      	ldr	r3, [pc, #608]	@ (8006ce0 <_dtoa_r+0x2d0>)
 8006a7e:	bfb8      	it	lt
 8006a80:	6032      	strlt	r2, [r6, #0]
 8006a82:	ea33 0308 	bics.w	r3, r3, r8
 8006a86:	d112      	bne.n	8006aae <_dtoa_r+0x9e>
 8006a88:	f242 730f 	movw	r3, #9999	@ 0x270f
 8006a8c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8006a8e:	6013      	str	r3, [r2, #0]
 8006a90:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8006a94:	4323      	orrs	r3, r4
 8006a96:	f000 8550 	beq.w	800753a <_dtoa_r+0xb2a>
 8006a9a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006a9c:	f8df a244 	ldr.w	sl, [pc, #580]	@ 8006ce4 <_dtoa_r+0x2d4>
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	f000 8552 	beq.w	800754a <_dtoa_r+0xb3a>
 8006aa6:	f10a 0303 	add.w	r3, sl, #3
 8006aaa:	f000 bd4c 	b.w	8007546 <_dtoa_r+0xb36>
 8006aae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006ab2:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8006ab6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006aba:	2200      	movs	r2, #0
 8006abc:	2300      	movs	r3, #0
 8006abe:	f7f9 ff73 	bl	80009a8 <__aeabi_dcmpeq>
 8006ac2:	4607      	mov	r7, r0
 8006ac4:	b158      	cbz	r0, 8006ade <_dtoa_r+0xce>
 8006ac6:	2301      	movs	r3, #1
 8006ac8:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8006aca:	6013      	str	r3, [r2, #0]
 8006acc:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006ace:	b113      	cbz	r3, 8006ad6 <_dtoa_r+0xc6>
 8006ad0:	4b85      	ldr	r3, [pc, #532]	@ (8006ce8 <_dtoa_r+0x2d8>)
 8006ad2:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8006ad4:	6013      	str	r3, [r2, #0]
 8006ad6:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8006cec <_dtoa_r+0x2dc>
 8006ada:	f000 bd36 	b.w	800754a <_dtoa_r+0xb3a>
 8006ade:	ab14      	add	r3, sp, #80	@ 0x50
 8006ae0:	9301      	str	r3, [sp, #4]
 8006ae2:	ab15      	add	r3, sp, #84	@ 0x54
 8006ae4:	9300      	str	r3, [sp, #0]
 8006ae6:	4658      	mov	r0, fp
 8006ae8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8006aec:	f001 fa30 	bl	8007f50 <__d2b>
 8006af0:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8006af4:	4681      	mov	r9, r0
 8006af6:	2e00      	cmp	r6, #0
 8006af8:	d077      	beq.n	8006bea <_dtoa_r+0x1da>
 8006afa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006afe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006b00:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006b04:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006b08:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006b0c:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8006b10:	9712      	str	r7, [sp, #72]	@ 0x48
 8006b12:	4619      	mov	r1, r3
 8006b14:	2200      	movs	r2, #0
 8006b16:	4b76      	ldr	r3, [pc, #472]	@ (8006cf0 <_dtoa_r+0x2e0>)
 8006b18:	f7f9 fb26 	bl	8000168 <__aeabi_dsub>
 8006b1c:	a368      	add	r3, pc, #416	@ (adr r3, 8006cc0 <_dtoa_r+0x2b0>)
 8006b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b22:	f7f9 fcd9 	bl	80004d8 <__aeabi_dmul>
 8006b26:	a368      	add	r3, pc, #416	@ (adr r3, 8006cc8 <_dtoa_r+0x2b8>)
 8006b28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b2c:	f7f9 fb1e 	bl	800016c <__adddf3>
 8006b30:	4604      	mov	r4, r0
 8006b32:	4630      	mov	r0, r6
 8006b34:	460d      	mov	r5, r1
 8006b36:	f7f9 fc65 	bl	8000404 <__aeabi_i2d>
 8006b3a:	a365      	add	r3, pc, #404	@ (adr r3, 8006cd0 <_dtoa_r+0x2c0>)
 8006b3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b40:	f7f9 fcca 	bl	80004d8 <__aeabi_dmul>
 8006b44:	4602      	mov	r2, r0
 8006b46:	460b      	mov	r3, r1
 8006b48:	4620      	mov	r0, r4
 8006b4a:	4629      	mov	r1, r5
 8006b4c:	f7f9 fb0e 	bl	800016c <__adddf3>
 8006b50:	4604      	mov	r4, r0
 8006b52:	460d      	mov	r5, r1
 8006b54:	f7f9 ff70 	bl	8000a38 <__aeabi_d2iz>
 8006b58:	2200      	movs	r2, #0
 8006b5a:	4607      	mov	r7, r0
 8006b5c:	2300      	movs	r3, #0
 8006b5e:	4620      	mov	r0, r4
 8006b60:	4629      	mov	r1, r5
 8006b62:	f7f9 ff2b 	bl	80009bc <__aeabi_dcmplt>
 8006b66:	b140      	cbz	r0, 8006b7a <_dtoa_r+0x16a>
 8006b68:	4638      	mov	r0, r7
 8006b6a:	f7f9 fc4b 	bl	8000404 <__aeabi_i2d>
 8006b6e:	4622      	mov	r2, r4
 8006b70:	462b      	mov	r3, r5
 8006b72:	f7f9 ff19 	bl	80009a8 <__aeabi_dcmpeq>
 8006b76:	b900      	cbnz	r0, 8006b7a <_dtoa_r+0x16a>
 8006b78:	3f01      	subs	r7, #1
 8006b7a:	2f16      	cmp	r7, #22
 8006b7c:	d853      	bhi.n	8006c26 <_dtoa_r+0x216>
 8006b7e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006b82:	4b5c      	ldr	r3, [pc, #368]	@ (8006cf4 <_dtoa_r+0x2e4>)
 8006b84:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006b88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b8c:	f7f9 ff16 	bl	80009bc <__aeabi_dcmplt>
 8006b90:	2800      	cmp	r0, #0
 8006b92:	d04a      	beq.n	8006c2a <_dtoa_r+0x21a>
 8006b94:	2300      	movs	r3, #0
 8006b96:	3f01      	subs	r7, #1
 8006b98:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006b9a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006b9c:	1b9b      	subs	r3, r3, r6
 8006b9e:	1e5a      	subs	r2, r3, #1
 8006ba0:	bf46      	itte	mi
 8006ba2:	f1c3 0801 	rsbmi	r8, r3, #1
 8006ba6:	2300      	movmi	r3, #0
 8006ba8:	f04f 0800 	movpl.w	r8, #0
 8006bac:	9209      	str	r2, [sp, #36]	@ 0x24
 8006bae:	bf48      	it	mi
 8006bb0:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8006bb2:	2f00      	cmp	r7, #0
 8006bb4:	db3b      	blt.n	8006c2e <_dtoa_r+0x21e>
 8006bb6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006bb8:	970e      	str	r7, [sp, #56]	@ 0x38
 8006bba:	443b      	add	r3, r7
 8006bbc:	9309      	str	r3, [sp, #36]	@ 0x24
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	930a      	str	r3, [sp, #40]	@ 0x28
 8006bc2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006bc4:	2b09      	cmp	r3, #9
 8006bc6:	d866      	bhi.n	8006c96 <_dtoa_r+0x286>
 8006bc8:	2b05      	cmp	r3, #5
 8006bca:	bfc4      	itt	gt
 8006bcc:	3b04      	subgt	r3, #4
 8006bce:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8006bd0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006bd2:	bfc8      	it	gt
 8006bd4:	2400      	movgt	r4, #0
 8006bd6:	f1a3 0302 	sub.w	r3, r3, #2
 8006bda:	bfd8      	it	le
 8006bdc:	2401      	movle	r4, #1
 8006bde:	2b03      	cmp	r3, #3
 8006be0:	d864      	bhi.n	8006cac <_dtoa_r+0x29c>
 8006be2:	e8df f003 	tbb	[pc, r3]
 8006be6:	382b      	.short	0x382b
 8006be8:	5636      	.short	0x5636
 8006bea:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8006bee:	441e      	add	r6, r3
 8006bf0:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006bf4:	2b20      	cmp	r3, #32
 8006bf6:	bfc1      	itttt	gt
 8006bf8:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006bfc:	fa08 f803 	lslgt.w	r8, r8, r3
 8006c00:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8006c04:	fa24 f303 	lsrgt.w	r3, r4, r3
 8006c08:	bfd6      	itet	le
 8006c0a:	f1c3 0320 	rsble	r3, r3, #32
 8006c0e:	ea48 0003 	orrgt.w	r0, r8, r3
 8006c12:	fa04 f003 	lslle.w	r0, r4, r3
 8006c16:	f7f9 fbe5 	bl	80003e4 <__aeabi_ui2d>
 8006c1a:	2201      	movs	r2, #1
 8006c1c:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8006c20:	3e01      	subs	r6, #1
 8006c22:	9212      	str	r2, [sp, #72]	@ 0x48
 8006c24:	e775      	b.n	8006b12 <_dtoa_r+0x102>
 8006c26:	2301      	movs	r3, #1
 8006c28:	e7b6      	b.n	8006b98 <_dtoa_r+0x188>
 8006c2a:	900f      	str	r0, [sp, #60]	@ 0x3c
 8006c2c:	e7b5      	b.n	8006b9a <_dtoa_r+0x18a>
 8006c2e:	427b      	negs	r3, r7
 8006c30:	930a      	str	r3, [sp, #40]	@ 0x28
 8006c32:	2300      	movs	r3, #0
 8006c34:	eba8 0807 	sub.w	r8, r8, r7
 8006c38:	930e      	str	r3, [sp, #56]	@ 0x38
 8006c3a:	e7c2      	b.n	8006bc2 <_dtoa_r+0x1b2>
 8006c3c:	2300      	movs	r3, #0
 8006c3e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006c40:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	dc35      	bgt.n	8006cb2 <_dtoa_r+0x2a2>
 8006c46:	2301      	movs	r3, #1
 8006c48:	461a      	mov	r2, r3
 8006c4a:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8006c4e:	9221      	str	r2, [sp, #132]	@ 0x84
 8006c50:	e00b      	b.n	8006c6a <_dtoa_r+0x25a>
 8006c52:	2301      	movs	r3, #1
 8006c54:	e7f3      	b.n	8006c3e <_dtoa_r+0x22e>
 8006c56:	2300      	movs	r3, #0
 8006c58:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006c5a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006c5c:	18fb      	adds	r3, r7, r3
 8006c5e:	9308      	str	r3, [sp, #32]
 8006c60:	3301      	adds	r3, #1
 8006c62:	2b01      	cmp	r3, #1
 8006c64:	9307      	str	r3, [sp, #28]
 8006c66:	bfb8      	it	lt
 8006c68:	2301      	movlt	r3, #1
 8006c6a:	2100      	movs	r1, #0
 8006c6c:	2204      	movs	r2, #4
 8006c6e:	f8db 001c 	ldr.w	r0, [fp, #28]
 8006c72:	f102 0514 	add.w	r5, r2, #20
 8006c76:	429d      	cmp	r5, r3
 8006c78:	d91f      	bls.n	8006cba <_dtoa_r+0x2aa>
 8006c7a:	6041      	str	r1, [r0, #4]
 8006c7c:	4658      	mov	r0, fp
 8006c7e:	f000 fd8d 	bl	800779c <_Balloc>
 8006c82:	4682      	mov	sl, r0
 8006c84:	2800      	cmp	r0, #0
 8006c86:	d139      	bne.n	8006cfc <_dtoa_r+0x2ec>
 8006c88:	4602      	mov	r2, r0
 8006c8a:	f240 11af 	movw	r1, #431	@ 0x1af
 8006c8e:	4b1a      	ldr	r3, [pc, #104]	@ (8006cf8 <_dtoa_r+0x2e8>)
 8006c90:	e6d2      	b.n	8006a38 <_dtoa_r+0x28>
 8006c92:	2301      	movs	r3, #1
 8006c94:	e7e0      	b.n	8006c58 <_dtoa_r+0x248>
 8006c96:	2401      	movs	r4, #1
 8006c98:	2300      	movs	r3, #0
 8006c9a:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006c9c:	9320      	str	r3, [sp, #128]	@ 0x80
 8006c9e:	f04f 33ff 	mov.w	r3, #4294967295
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8006ca8:	2312      	movs	r3, #18
 8006caa:	e7d0      	b.n	8006c4e <_dtoa_r+0x23e>
 8006cac:	2301      	movs	r3, #1
 8006cae:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006cb0:	e7f5      	b.n	8006c9e <_dtoa_r+0x28e>
 8006cb2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006cb4:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8006cb8:	e7d7      	b.n	8006c6a <_dtoa_r+0x25a>
 8006cba:	3101      	adds	r1, #1
 8006cbc:	0052      	lsls	r2, r2, #1
 8006cbe:	e7d8      	b.n	8006c72 <_dtoa_r+0x262>
 8006cc0:	636f4361 	.word	0x636f4361
 8006cc4:	3fd287a7 	.word	0x3fd287a7
 8006cc8:	8b60c8b3 	.word	0x8b60c8b3
 8006ccc:	3fc68a28 	.word	0x3fc68a28
 8006cd0:	509f79fb 	.word	0x509f79fb
 8006cd4:	3fd34413 	.word	0x3fd34413
 8006cd8:	08009ef0 	.word	0x08009ef0
 8006cdc:	08009f07 	.word	0x08009f07
 8006ce0:	7ff00000 	.word	0x7ff00000
 8006ce4:	08009eec 	.word	0x08009eec
 8006ce8:	08009ebb 	.word	0x08009ebb
 8006cec:	08009eba 	.word	0x08009eba
 8006cf0:	3ff80000 	.word	0x3ff80000
 8006cf4:	0800a000 	.word	0x0800a000
 8006cf8:	08009f5f 	.word	0x08009f5f
 8006cfc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006d00:	6018      	str	r0, [r3, #0]
 8006d02:	9b07      	ldr	r3, [sp, #28]
 8006d04:	2b0e      	cmp	r3, #14
 8006d06:	f200 80a4 	bhi.w	8006e52 <_dtoa_r+0x442>
 8006d0a:	2c00      	cmp	r4, #0
 8006d0c:	f000 80a1 	beq.w	8006e52 <_dtoa_r+0x442>
 8006d10:	2f00      	cmp	r7, #0
 8006d12:	dd33      	ble.n	8006d7c <_dtoa_r+0x36c>
 8006d14:	4b86      	ldr	r3, [pc, #536]	@ (8006f30 <_dtoa_r+0x520>)
 8006d16:	f007 020f 	and.w	r2, r7, #15
 8006d1a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006d1e:	05f8      	lsls	r0, r7, #23
 8006d20:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006d24:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006d28:	ea4f 1427 	mov.w	r4, r7, asr #4
 8006d2c:	d516      	bpl.n	8006d5c <_dtoa_r+0x34c>
 8006d2e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006d32:	4b80      	ldr	r3, [pc, #512]	@ (8006f34 <_dtoa_r+0x524>)
 8006d34:	2603      	movs	r6, #3
 8006d36:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006d3a:	f7f9 fcf7 	bl	800072c <__aeabi_ddiv>
 8006d3e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006d42:	f004 040f 	and.w	r4, r4, #15
 8006d46:	4d7b      	ldr	r5, [pc, #492]	@ (8006f34 <_dtoa_r+0x524>)
 8006d48:	b954      	cbnz	r4, 8006d60 <_dtoa_r+0x350>
 8006d4a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006d4e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006d52:	f7f9 fceb 	bl	800072c <__aeabi_ddiv>
 8006d56:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006d5a:	e028      	b.n	8006dae <_dtoa_r+0x39e>
 8006d5c:	2602      	movs	r6, #2
 8006d5e:	e7f2      	b.n	8006d46 <_dtoa_r+0x336>
 8006d60:	07e1      	lsls	r1, r4, #31
 8006d62:	d508      	bpl.n	8006d76 <_dtoa_r+0x366>
 8006d64:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006d68:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006d6c:	f7f9 fbb4 	bl	80004d8 <__aeabi_dmul>
 8006d70:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006d74:	3601      	adds	r6, #1
 8006d76:	1064      	asrs	r4, r4, #1
 8006d78:	3508      	adds	r5, #8
 8006d7a:	e7e5      	b.n	8006d48 <_dtoa_r+0x338>
 8006d7c:	f000 80d2 	beq.w	8006f24 <_dtoa_r+0x514>
 8006d80:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006d84:	427c      	negs	r4, r7
 8006d86:	4b6a      	ldr	r3, [pc, #424]	@ (8006f30 <_dtoa_r+0x520>)
 8006d88:	f004 020f 	and.w	r2, r4, #15
 8006d8c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006d90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d94:	f7f9 fba0 	bl	80004d8 <__aeabi_dmul>
 8006d98:	2602      	movs	r6, #2
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006da0:	4d64      	ldr	r5, [pc, #400]	@ (8006f34 <_dtoa_r+0x524>)
 8006da2:	1124      	asrs	r4, r4, #4
 8006da4:	2c00      	cmp	r4, #0
 8006da6:	f040 80b2 	bne.w	8006f0e <_dtoa_r+0x4fe>
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d1d3      	bne.n	8006d56 <_dtoa_r+0x346>
 8006dae:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006db2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	f000 80b7 	beq.w	8006f28 <_dtoa_r+0x518>
 8006dba:	2200      	movs	r2, #0
 8006dbc:	4620      	mov	r0, r4
 8006dbe:	4629      	mov	r1, r5
 8006dc0:	4b5d      	ldr	r3, [pc, #372]	@ (8006f38 <_dtoa_r+0x528>)
 8006dc2:	f7f9 fdfb 	bl	80009bc <__aeabi_dcmplt>
 8006dc6:	2800      	cmp	r0, #0
 8006dc8:	f000 80ae 	beq.w	8006f28 <_dtoa_r+0x518>
 8006dcc:	9b07      	ldr	r3, [sp, #28]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	f000 80aa 	beq.w	8006f28 <_dtoa_r+0x518>
 8006dd4:	9b08      	ldr	r3, [sp, #32]
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	dd37      	ble.n	8006e4a <_dtoa_r+0x43a>
 8006dda:	1e7b      	subs	r3, r7, #1
 8006ddc:	4620      	mov	r0, r4
 8006dde:	9304      	str	r3, [sp, #16]
 8006de0:	2200      	movs	r2, #0
 8006de2:	4629      	mov	r1, r5
 8006de4:	4b55      	ldr	r3, [pc, #340]	@ (8006f3c <_dtoa_r+0x52c>)
 8006de6:	f7f9 fb77 	bl	80004d8 <__aeabi_dmul>
 8006dea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006dee:	9c08      	ldr	r4, [sp, #32]
 8006df0:	3601      	adds	r6, #1
 8006df2:	4630      	mov	r0, r6
 8006df4:	f7f9 fb06 	bl	8000404 <__aeabi_i2d>
 8006df8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006dfc:	f7f9 fb6c 	bl	80004d8 <__aeabi_dmul>
 8006e00:	2200      	movs	r2, #0
 8006e02:	4b4f      	ldr	r3, [pc, #316]	@ (8006f40 <_dtoa_r+0x530>)
 8006e04:	f7f9 f9b2 	bl	800016c <__adddf3>
 8006e08:	4605      	mov	r5, r0
 8006e0a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8006e0e:	2c00      	cmp	r4, #0
 8006e10:	f040 809a 	bne.w	8006f48 <_dtoa_r+0x538>
 8006e14:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006e18:	2200      	movs	r2, #0
 8006e1a:	4b4a      	ldr	r3, [pc, #296]	@ (8006f44 <_dtoa_r+0x534>)
 8006e1c:	f7f9 f9a4 	bl	8000168 <__aeabi_dsub>
 8006e20:	4602      	mov	r2, r0
 8006e22:	460b      	mov	r3, r1
 8006e24:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006e28:	462a      	mov	r2, r5
 8006e2a:	4633      	mov	r3, r6
 8006e2c:	f7f9 fde4 	bl	80009f8 <__aeabi_dcmpgt>
 8006e30:	2800      	cmp	r0, #0
 8006e32:	f040 828e 	bne.w	8007352 <_dtoa_r+0x942>
 8006e36:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006e3a:	462a      	mov	r2, r5
 8006e3c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006e40:	f7f9 fdbc 	bl	80009bc <__aeabi_dcmplt>
 8006e44:	2800      	cmp	r0, #0
 8006e46:	f040 8127 	bne.w	8007098 <_dtoa_r+0x688>
 8006e4a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8006e4e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8006e52:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	f2c0 8163 	blt.w	8007120 <_dtoa_r+0x710>
 8006e5a:	2f0e      	cmp	r7, #14
 8006e5c:	f300 8160 	bgt.w	8007120 <_dtoa_r+0x710>
 8006e60:	4b33      	ldr	r3, [pc, #204]	@ (8006f30 <_dtoa_r+0x520>)
 8006e62:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006e66:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006e6a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006e6e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	da03      	bge.n	8006e7c <_dtoa_r+0x46c>
 8006e74:	9b07      	ldr	r3, [sp, #28]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	f340 8100 	ble.w	800707c <_dtoa_r+0x66c>
 8006e7c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006e80:	4656      	mov	r6, sl
 8006e82:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006e86:	4620      	mov	r0, r4
 8006e88:	4629      	mov	r1, r5
 8006e8a:	f7f9 fc4f 	bl	800072c <__aeabi_ddiv>
 8006e8e:	f7f9 fdd3 	bl	8000a38 <__aeabi_d2iz>
 8006e92:	4680      	mov	r8, r0
 8006e94:	f7f9 fab6 	bl	8000404 <__aeabi_i2d>
 8006e98:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006e9c:	f7f9 fb1c 	bl	80004d8 <__aeabi_dmul>
 8006ea0:	4602      	mov	r2, r0
 8006ea2:	460b      	mov	r3, r1
 8006ea4:	4620      	mov	r0, r4
 8006ea6:	4629      	mov	r1, r5
 8006ea8:	f7f9 f95e 	bl	8000168 <__aeabi_dsub>
 8006eac:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8006eb0:	9d07      	ldr	r5, [sp, #28]
 8006eb2:	f806 4b01 	strb.w	r4, [r6], #1
 8006eb6:	eba6 040a 	sub.w	r4, r6, sl
 8006eba:	42a5      	cmp	r5, r4
 8006ebc:	4602      	mov	r2, r0
 8006ebe:	460b      	mov	r3, r1
 8006ec0:	f040 8116 	bne.w	80070f0 <_dtoa_r+0x6e0>
 8006ec4:	f7f9 f952 	bl	800016c <__adddf3>
 8006ec8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006ecc:	4604      	mov	r4, r0
 8006ece:	460d      	mov	r5, r1
 8006ed0:	f7f9 fd92 	bl	80009f8 <__aeabi_dcmpgt>
 8006ed4:	2800      	cmp	r0, #0
 8006ed6:	f040 80f8 	bne.w	80070ca <_dtoa_r+0x6ba>
 8006eda:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006ede:	4620      	mov	r0, r4
 8006ee0:	4629      	mov	r1, r5
 8006ee2:	f7f9 fd61 	bl	80009a8 <__aeabi_dcmpeq>
 8006ee6:	b118      	cbz	r0, 8006ef0 <_dtoa_r+0x4e0>
 8006ee8:	f018 0f01 	tst.w	r8, #1
 8006eec:	f040 80ed 	bne.w	80070ca <_dtoa_r+0x6ba>
 8006ef0:	4649      	mov	r1, r9
 8006ef2:	4658      	mov	r0, fp
 8006ef4:	f000 fc92 	bl	800781c <_Bfree>
 8006ef8:	2300      	movs	r3, #0
 8006efa:	7033      	strb	r3, [r6, #0]
 8006efc:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8006efe:	3701      	adds	r7, #1
 8006f00:	601f      	str	r7, [r3, #0]
 8006f02:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	f000 8320 	beq.w	800754a <_dtoa_r+0xb3a>
 8006f0a:	601e      	str	r6, [r3, #0]
 8006f0c:	e31d      	b.n	800754a <_dtoa_r+0xb3a>
 8006f0e:	07e2      	lsls	r2, r4, #31
 8006f10:	d505      	bpl.n	8006f1e <_dtoa_r+0x50e>
 8006f12:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006f16:	f7f9 fadf 	bl	80004d8 <__aeabi_dmul>
 8006f1a:	2301      	movs	r3, #1
 8006f1c:	3601      	adds	r6, #1
 8006f1e:	1064      	asrs	r4, r4, #1
 8006f20:	3508      	adds	r5, #8
 8006f22:	e73f      	b.n	8006da4 <_dtoa_r+0x394>
 8006f24:	2602      	movs	r6, #2
 8006f26:	e742      	b.n	8006dae <_dtoa_r+0x39e>
 8006f28:	9c07      	ldr	r4, [sp, #28]
 8006f2a:	9704      	str	r7, [sp, #16]
 8006f2c:	e761      	b.n	8006df2 <_dtoa_r+0x3e2>
 8006f2e:	bf00      	nop
 8006f30:	0800a000 	.word	0x0800a000
 8006f34:	08009fd8 	.word	0x08009fd8
 8006f38:	3ff00000 	.word	0x3ff00000
 8006f3c:	40240000 	.word	0x40240000
 8006f40:	401c0000 	.word	0x401c0000
 8006f44:	40140000 	.word	0x40140000
 8006f48:	4b70      	ldr	r3, [pc, #448]	@ (800710c <_dtoa_r+0x6fc>)
 8006f4a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006f4c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006f50:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006f54:	4454      	add	r4, sl
 8006f56:	2900      	cmp	r1, #0
 8006f58:	d045      	beq.n	8006fe6 <_dtoa_r+0x5d6>
 8006f5a:	2000      	movs	r0, #0
 8006f5c:	496c      	ldr	r1, [pc, #432]	@ (8007110 <_dtoa_r+0x700>)
 8006f5e:	f7f9 fbe5 	bl	800072c <__aeabi_ddiv>
 8006f62:	4633      	mov	r3, r6
 8006f64:	462a      	mov	r2, r5
 8006f66:	f7f9 f8ff 	bl	8000168 <__aeabi_dsub>
 8006f6a:	4656      	mov	r6, sl
 8006f6c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006f70:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006f74:	f7f9 fd60 	bl	8000a38 <__aeabi_d2iz>
 8006f78:	4605      	mov	r5, r0
 8006f7a:	f7f9 fa43 	bl	8000404 <__aeabi_i2d>
 8006f7e:	4602      	mov	r2, r0
 8006f80:	460b      	mov	r3, r1
 8006f82:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006f86:	f7f9 f8ef 	bl	8000168 <__aeabi_dsub>
 8006f8a:	4602      	mov	r2, r0
 8006f8c:	460b      	mov	r3, r1
 8006f8e:	3530      	adds	r5, #48	@ 0x30
 8006f90:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006f94:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006f98:	f806 5b01 	strb.w	r5, [r6], #1
 8006f9c:	f7f9 fd0e 	bl	80009bc <__aeabi_dcmplt>
 8006fa0:	2800      	cmp	r0, #0
 8006fa2:	d163      	bne.n	800706c <_dtoa_r+0x65c>
 8006fa4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006fa8:	2000      	movs	r0, #0
 8006faa:	495a      	ldr	r1, [pc, #360]	@ (8007114 <_dtoa_r+0x704>)
 8006fac:	f7f9 f8dc 	bl	8000168 <__aeabi_dsub>
 8006fb0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006fb4:	f7f9 fd02 	bl	80009bc <__aeabi_dcmplt>
 8006fb8:	2800      	cmp	r0, #0
 8006fba:	f040 8087 	bne.w	80070cc <_dtoa_r+0x6bc>
 8006fbe:	42a6      	cmp	r6, r4
 8006fc0:	f43f af43 	beq.w	8006e4a <_dtoa_r+0x43a>
 8006fc4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006fc8:	2200      	movs	r2, #0
 8006fca:	4b53      	ldr	r3, [pc, #332]	@ (8007118 <_dtoa_r+0x708>)
 8006fcc:	f7f9 fa84 	bl	80004d8 <__aeabi_dmul>
 8006fd0:	2200      	movs	r2, #0
 8006fd2:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006fd6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006fda:	4b4f      	ldr	r3, [pc, #316]	@ (8007118 <_dtoa_r+0x708>)
 8006fdc:	f7f9 fa7c 	bl	80004d8 <__aeabi_dmul>
 8006fe0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006fe4:	e7c4      	b.n	8006f70 <_dtoa_r+0x560>
 8006fe6:	4631      	mov	r1, r6
 8006fe8:	4628      	mov	r0, r5
 8006fea:	f7f9 fa75 	bl	80004d8 <__aeabi_dmul>
 8006fee:	4656      	mov	r6, sl
 8006ff0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006ff4:	9413      	str	r4, [sp, #76]	@ 0x4c
 8006ff6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006ffa:	f7f9 fd1d 	bl	8000a38 <__aeabi_d2iz>
 8006ffe:	4605      	mov	r5, r0
 8007000:	f7f9 fa00 	bl	8000404 <__aeabi_i2d>
 8007004:	4602      	mov	r2, r0
 8007006:	460b      	mov	r3, r1
 8007008:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800700c:	f7f9 f8ac 	bl	8000168 <__aeabi_dsub>
 8007010:	4602      	mov	r2, r0
 8007012:	460b      	mov	r3, r1
 8007014:	3530      	adds	r5, #48	@ 0x30
 8007016:	f806 5b01 	strb.w	r5, [r6], #1
 800701a:	42a6      	cmp	r6, r4
 800701c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007020:	f04f 0200 	mov.w	r2, #0
 8007024:	d124      	bne.n	8007070 <_dtoa_r+0x660>
 8007026:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800702a:	4b39      	ldr	r3, [pc, #228]	@ (8007110 <_dtoa_r+0x700>)
 800702c:	f7f9 f89e 	bl	800016c <__adddf3>
 8007030:	4602      	mov	r2, r0
 8007032:	460b      	mov	r3, r1
 8007034:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007038:	f7f9 fcde 	bl	80009f8 <__aeabi_dcmpgt>
 800703c:	2800      	cmp	r0, #0
 800703e:	d145      	bne.n	80070cc <_dtoa_r+0x6bc>
 8007040:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007044:	2000      	movs	r0, #0
 8007046:	4932      	ldr	r1, [pc, #200]	@ (8007110 <_dtoa_r+0x700>)
 8007048:	f7f9 f88e 	bl	8000168 <__aeabi_dsub>
 800704c:	4602      	mov	r2, r0
 800704e:	460b      	mov	r3, r1
 8007050:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007054:	f7f9 fcb2 	bl	80009bc <__aeabi_dcmplt>
 8007058:	2800      	cmp	r0, #0
 800705a:	f43f aef6 	beq.w	8006e4a <_dtoa_r+0x43a>
 800705e:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8007060:	1e73      	subs	r3, r6, #1
 8007062:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007064:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007068:	2b30      	cmp	r3, #48	@ 0x30
 800706a:	d0f8      	beq.n	800705e <_dtoa_r+0x64e>
 800706c:	9f04      	ldr	r7, [sp, #16]
 800706e:	e73f      	b.n	8006ef0 <_dtoa_r+0x4e0>
 8007070:	4b29      	ldr	r3, [pc, #164]	@ (8007118 <_dtoa_r+0x708>)
 8007072:	f7f9 fa31 	bl	80004d8 <__aeabi_dmul>
 8007076:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800707a:	e7bc      	b.n	8006ff6 <_dtoa_r+0x5e6>
 800707c:	d10c      	bne.n	8007098 <_dtoa_r+0x688>
 800707e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007082:	2200      	movs	r2, #0
 8007084:	4b25      	ldr	r3, [pc, #148]	@ (800711c <_dtoa_r+0x70c>)
 8007086:	f7f9 fa27 	bl	80004d8 <__aeabi_dmul>
 800708a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800708e:	f7f9 fca9 	bl	80009e4 <__aeabi_dcmpge>
 8007092:	2800      	cmp	r0, #0
 8007094:	f000 815b 	beq.w	800734e <_dtoa_r+0x93e>
 8007098:	2400      	movs	r4, #0
 800709a:	4625      	mov	r5, r4
 800709c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800709e:	4656      	mov	r6, sl
 80070a0:	43db      	mvns	r3, r3
 80070a2:	9304      	str	r3, [sp, #16]
 80070a4:	2700      	movs	r7, #0
 80070a6:	4621      	mov	r1, r4
 80070a8:	4658      	mov	r0, fp
 80070aa:	f000 fbb7 	bl	800781c <_Bfree>
 80070ae:	2d00      	cmp	r5, #0
 80070b0:	d0dc      	beq.n	800706c <_dtoa_r+0x65c>
 80070b2:	b12f      	cbz	r7, 80070c0 <_dtoa_r+0x6b0>
 80070b4:	42af      	cmp	r7, r5
 80070b6:	d003      	beq.n	80070c0 <_dtoa_r+0x6b0>
 80070b8:	4639      	mov	r1, r7
 80070ba:	4658      	mov	r0, fp
 80070bc:	f000 fbae 	bl	800781c <_Bfree>
 80070c0:	4629      	mov	r1, r5
 80070c2:	4658      	mov	r0, fp
 80070c4:	f000 fbaa 	bl	800781c <_Bfree>
 80070c8:	e7d0      	b.n	800706c <_dtoa_r+0x65c>
 80070ca:	9704      	str	r7, [sp, #16]
 80070cc:	4633      	mov	r3, r6
 80070ce:	461e      	mov	r6, r3
 80070d0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80070d4:	2a39      	cmp	r2, #57	@ 0x39
 80070d6:	d107      	bne.n	80070e8 <_dtoa_r+0x6d8>
 80070d8:	459a      	cmp	sl, r3
 80070da:	d1f8      	bne.n	80070ce <_dtoa_r+0x6be>
 80070dc:	9a04      	ldr	r2, [sp, #16]
 80070de:	3201      	adds	r2, #1
 80070e0:	9204      	str	r2, [sp, #16]
 80070e2:	2230      	movs	r2, #48	@ 0x30
 80070e4:	f88a 2000 	strb.w	r2, [sl]
 80070e8:	781a      	ldrb	r2, [r3, #0]
 80070ea:	3201      	adds	r2, #1
 80070ec:	701a      	strb	r2, [r3, #0]
 80070ee:	e7bd      	b.n	800706c <_dtoa_r+0x65c>
 80070f0:	2200      	movs	r2, #0
 80070f2:	4b09      	ldr	r3, [pc, #36]	@ (8007118 <_dtoa_r+0x708>)
 80070f4:	f7f9 f9f0 	bl	80004d8 <__aeabi_dmul>
 80070f8:	2200      	movs	r2, #0
 80070fa:	2300      	movs	r3, #0
 80070fc:	4604      	mov	r4, r0
 80070fe:	460d      	mov	r5, r1
 8007100:	f7f9 fc52 	bl	80009a8 <__aeabi_dcmpeq>
 8007104:	2800      	cmp	r0, #0
 8007106:	f43f aebc 	beq.w	8006e82 <_dtoa_r+0x472>
 800710a:	e6f1      	b.n	8006ef0 <_dtoa_r+0x4e0>
 800710c:	0800a000 	.word	0x0800a000
 8007110:	3fe00000 	.word	0x3fe00000
 8007114:	3ff00000 	.word	0x3ff00000
 8007118:	40240000 	.word	0x40240000
 800711c:	40140000 	.word	0x40140000
 8007120:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007122:	2a00      	cmp	r2, #0
 8007124:	f000 80db 	beq.w	80072de <_dtoa_r+0x8ce>
 8007128:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800712a:	2a01      	cmp	r2, #1
 800712c:	f300 80bf 	bgt.w	80072ae <_dtoa_r+0x89e>
 8007130:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8007132:	2a00      	cmp	r2, #0
 8007134:	f000 80b7 	beq.w	80072a6 <_dtoa_r+0x896>
 8007138:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800713c:	4646      	mov	r6, r8
 800713e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007140:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007142:	2101      	movs	r1, #1
 8007144:	441a      	add	r2, r3
 8007146:	4658      	mov	r0, fp
 8007148:	4498      	add	r8, r3
 800714a:	9209      	str	r2, [sp, #36]	@ 0x24
 800714c:	f000 fc64 	bl	8007a18 <__i2b>
 8007150:	4605      	mov	r5, r0
 8007152:	b15e      	cbz	r6, 800716c <_dtoa_r+0x75c>
 8007154:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007156:	2b00      	cmp	r3, #0
 8007158:	dd08      	ble.n	800716c <_dtoa_r+0x75c>
 800715a:	42b3      	cmp	r3, r6
 800715c:	bfa8      	it	ge
 800715e:	4633      	movge	r3, r6
 8007160:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007162:	eba8 0803 	sub.w	r8, r8, r3
 8007166:	1af6      	subs	r6, r6, r3
 8007168:	1ad3      	subs	r3, r2, r3
 800716a:	9309      	str	r3, [sp, #36]	@ 0x24
 800716c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800716e:	b1f3      	cbz	r3, 80071ae <_dtoa_r+0x79e>
 8007170:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007172:	2b00      	cmp	r3, #0
 8007174:	f000 80b7 	beq.w	80072e6 <_dtoa_r+0x8d6>
 8007178:	b18c      	cbz	r4, 800719e <_dtoa_r+0x78e>
 800717a:	4629      	mov	r1, r5
 800717c:	4622      	mov	r2, r4
 800717e:	4658      	mov	r0, fp
 8007180:	f000 fd08 	bl	8007b94 <__pow5mult>
 8007184:	464a      	mov	r2, r9
 8007186:	4601      	mov	r1, r0
 8007188:	4605      	mov	r5, r0
 800718a:	4658      	mov	r0, fp
 800718c:	f000 fc5a 	bl	8007a44 <__multiply>
 8007190:	4649      	mov	r1, r9
 8007192:	9004      	str	r0, [sp, #16]
 8007194:	4658      	mov	r0, fp
 8007196:	f000 fb41 	bl	800781c <_Bfree>
 800719a:	9b04      	ldr	r3, [sp, #16]
 800719c:	4699      	mov	r9, r3
 800719e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80071a0:	1b1a      	subs	r2, r3, r4
 80071a2:	d004      	beq.n	80071ae <_dtoa_r+0x79e>
 80071a4:	4649      	mov	r1, r9
 80071a6:	4658      	mov	r0, fp
 80071a8:	f000 fcf4 	bl	8007b94 <__pow5mult>
 80071ac:	4681      	mov	r9, r0
 80071ae:	2101      	movs	r1, #1
 80071b0:	4658      	mov	r0, fp
 80071b2:	f000 fc31 	bl	8007a18 <__i2b>
 80071b6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80071b8:	4604      	mov	r4, r0
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	f000 81c9 	beq.w	8007552 <_dtoa_r+0xb42>
 80071c0:	461a      	mov	r2, r3
 80071c2:	4601      	mov	r1, r0
 80071c4:	4658      	mov	r0, fp
 80071c6:	f000 fce5 	bl	8007b94 <__pow5mult>
 80071ca:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80071cc:	4604      	mov	r4, r0
 80071ce:	2b01      	cmp	r3, #1
 80071d0:	f300 808f 	bgt.w	80072f2 <_dtoa_r+0x8e2>
 80071d4:	9b02      	ldr	r3, [sp, #8]
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	f040 8087 	bne.w	80072ea <_dtoa_r+0x8da>
 80071dc:	9b03      	ldr	r3, [sp, #12]
 80071de:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	f040 8083 	bne.w	80072ee <_dtoa_r+0x8de>
 80071e8:	9b03      	ldr	r3, [sp, #12]
 80071ea:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80071ee:	0d1b      	lsrs	r3, r3, #20
 80071f0:	051b      	lsls	r3, r3, #20
 80071f2:	b12b      	cbz	r3, 8007200 <_dtoa_r+0x7f0>
 80071f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80071f6:	f108 0801 	add.w	r8, r8, #1
 80071fa:	3301      	adds	r3, #1
 80071fc:	9309      	str	r3, [sp, #36]	@ 0x24
 80071fe:	2301      	movs	r3, #1
 8007200:	930a      	str	r3, [sp, #40]	@ 0x28
 8007202:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007204:	2b00      	cmp	r3, #0
 8007206:	f000 81aa 	beq.w	800755e <_dtoa_r+0xb4e>
 800720a:	6923      	ldr	r3, [r4, #16]
 800720c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007210:	6918      	ldr	r0, [r3, #16]
 8007212:	f000 fbb5 	bl	8007980 <__hi0bits>
 8007216:	f1c0 0020 	rsb	r0, r0, #32
 800721a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800721c:	4418      	add	r0, r3
 800721e:	f010 001f 	ands.w	r0, r0, #31
 8007222:	d071      	beq.n	8007308 <_dtoa_r+0x8f8>
 8007224:	f1c0 0320 	rsb	r3, r0, #32
 8007228:	2b04      	cmp	r3, #4
 800722a:	dd65      	ble.n	80072f8 <_dtoa_r+0x8e8>
 800722c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800722e:	f1c0 001c 	rsb	r0, r0, #28
 8007232:	4403      	add	r3, r0
 8007234:	4480      	add	r8, r0
 8007236:	4406      	add	r6, r0
 8007238:	9309      	str	r3, [sp, #36]	@ 0x24
 800723a:	f1b8 0f00 	cmp.w	r8, #0
 800723e:	dd05      	ble.n	800724c <_dtoa_r+0x83c>
 8007240:	4649      	mov	r1, r9
 8007242:	4642      	mov	r2, r8
 8007244:	4658      	mov	r0, fp
 8007246:	f000 fcff 	bl	8007c48 <__lshift>
 800724a:	4681      	mov	r9, r0
 800724c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800724e:	2b00      	cmp	r3, #0
 8007250:	dd05      	ble.n	800725e <_dtoa_r+0x84e>
 8007252:	4621      	mov	r1, r4
 8007254:	461a      	mov	r2, r3
 8007256:	4658      	mov	r0, fp
 8007258:	f000 fcf6 	bl	8007c48 <__lshift>
 800725c:	4604      	mov	r4, r0
 800725e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007260:	2b00      	cmp	r3, #0
 8007262:	d053      	beq.n	800730c <_dtoa_r+0x8fc>
 8007264:	4621      	mov	r1, r4
 8007266:	4648      	mov	r0, r9
 8007268:	f000 fd5a 	bl	8007d20 <__mcmp>
 800726c:	2800      	cmp	r0, #0
 800726e:	da4d      	bge.n	800730c <_dtoa_r+0x8fc>
 8007270:	1e7b      	subs	r3, r7, #1
 8007272:	4649      	mov	r1, r9
 8007274:	9304      	str	r3, [sp, #16]
 8007276:	220a      	movs	r2, #10
 8007278:	2300      	movs	r3, #0
 800727a:	4658      	mov	r0, fp
 800727c:	f000 faf0 	bl	8007860 <__multadd>
 8007280:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007282:	4681      	mov	r9, r0
 8007284:	2b00      	cmp	r3, #0
 8007286:	f000 816c 	beq.w	8007562 <_dtoa_r+0xb52>
 800728a:	2300      	movs	r3, #0
 800728c:	4629      	mov	r1, r5
 800728e:	220a      	movs	r2, #10
 8007290:	4658      	mov	r0, fp
 8007292:	f000 fae5 	bl	8007860 <__multadd>
 8007296:	9b08      	ldr	r3, [sp, #32]
 8007298:	4605      	mov	r5, r0
 800729a:	2b00      	cmp	r3, #0
 800729c:	dc61      	bgt.n	8007362 <_dtoa_r+0x952>
 800729e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80072a0:	2b02      	cmp	r3, #2
 80072a2:	dc3b      	bgt.n	800731c <_dtoa_r+0x90c>
 80072a4:	e05d      	b.n	8007362 <_dtoa_r+0x952>
 80072a6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80072a8:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80072ac:	e746      	b.n	800713c <_dtoa_r+0x72c>
 80072ae:	9b07      	ldr	r3, [sp, #28]
 80072b0:	1e5c      	subs	r4, r3, #1
 80072b2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80072b4:	42a3      	cmp	r3, r4
 80072b6:	bfbf      	itttt	lt
 80072b8:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80072ba:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 80072bc:	1ae3      	sublt	r3, r4, r3
 80072be:	18d2      	addlt	r2, r2, r3
 80072c0:	bfa8      	it	ge
 80072c2:	1b1c      	subge	r4, r3, r4
 80072c4:	9b07      	ldr	r3, [sp, #28]
 80072c6:	bfbe      	ittt	lt
 80072c8:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80072ca:	920e      	strlt	r2, [sp, #56]	@ 0x38
 80072cc:	2400      	movlt	r4, #0
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	bfb5      	itete	lt
 80072d2:	eba8 0603 	sublt.w	r6, r8, r3
 80072d6:	4646      	movge	r6, r8
 80072d8:	2300      	movlt	r3, #0
 80072da:	9b07      	ldrge	r3, [sp, #28]
 80072dc:	e730      	b.n	8007140 <_dtoa_r+0x730>
 80072de:	4646      	mov	r6, r8
 80072e0:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80072e2:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80072e4:	e735      	b.n	8007152 <_dtoa_r+0x742>
 80072e6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80072e8:	e75c      	b.n	80071a4 <_dtoa_r+0x794>
 80072ea:	2300      	movs	r3, #0
 80072ec:	e788      	b.n	8007200 <_dtoa_r+0x7f0>
 80072ee:	9b02      	ldr	r3, [sp, #8]
 80072f0:	e786      	b.n	8007200 <_dtoa_r+0x7f0>
 80072f2:	2300      	movs	r3, #0
 80072f4:	930a      	str	r3, [sp, #40]	@ 0x28
 80072f6:	e788      	b.n	800720a <_dtoa_r+0x7fa>
 80072f8:	d09f      	beq.n	800723a <_dtoa_r+0x82a>
 80072fa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80072fc:	331c      	adds	r3, #28
 80072fe:	441a      	add	r2, r3
 8007300:	4498      	add	r8, r3
 8007302:	441e      	add	r6, r3
 8007304:	9209      	str	r2, [sp, #36]	@ 0x24
 8007306:	e798      	b.n	800723a <_dtoa_r+0x82a>
 8007308:	4603      	mov	r3, r0
 800730a:	e7f6      	b.n	80072fa <_dtoa_r+0x8ea>
 800730c:	9b07      	ldr	r3, [sp, #28]
 800730e:	9704      	str	r7, [sp, #16]
 8007310:	2b00      	cmp	r3, #0
 8007312:	dc20      	bgt.n	8007356 <_dtoa_r+0x946>
 8007314:	9308      	str	r3, [sp, #32]
 8007316:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007318:	2b02      	cmp	r3, #2
 800731a:	dd1e      	ble.n	800735a <_dtoa_r+0x94a>
 800731c:	9b08      	ldr	r3, [sp, #32]
 800731e:	2b00      	cmp	r3, #0
 8007320:	f47f aebc 	bne.w	800709c <_dtoa_r+0x68c>
 8007324:	4621      	mov	r1, r4
 8007326:	2205      	movs	r2, #5
 8007328:	4658      	mov	r0, fp
 800732a:	f000 fa99 	bl	8007860 <__multadd>
 800732e:	4601      	mov	r1, r0
 8007330:	4604      	mov	r4, r0
 8007332:	4648      	mov	r0, r9
 8007334:	f000 fcf4 	bl	8007d20 <__mcmp>
 8007338:	2800      	cmp	r0, #0
 800733a:	f77f aeaf 	ble.w	800709c <_dtoa_r+0x68c>
 800733e:	2331      	movs	r3, #49	@ 0x31
 8007340:	4656      	mov	r6, sl
 8007342:	f806 3b01 	strb.w	r3, [r6], #1
 8007346:	9b04      	ldr	r3, [sp, #16]
 8007348:	3301      	adds	r3, #1
 800734a:	9304      	str	r3, [sp, #16]
 800734c:	e6aa      	b.n	80070a4 <_dtoa_r+0x694>
 800734e:	9c07      	ldr	r4, [sp, #28]
 8007350:	9704      	str	r7, [sp, #16]
 8007352:	4625      	mov	r5, r4
 8007354:	e7f3      	b.n	800733e <_dtoa_r+0x92e>
 8007356:	9b07      	ldr	r3, [sp, #28]
 8007358:	9308      	str	r3, [sp, #32]
 800735a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800735c:	2b00      	cmp	r3, #0
 800735e:	f000 8104 	beq.w	800756a <_dtoa_r+0xb5a>
 8007362:	2e00      	cmp	r6, #0
 8007364:	dd05      	ble.n	8007372 <_dtoa_r+0x962>
 8007366:	4629      	mov	r1, r5
 8007368:	4632      	mov	r2, r6
 800736a:	4658      	mov	r0, fp
 800736c:	f000 fc6c 	bl	8007c48 <__lshift>
 8007370:	4605      	mov	r5, r0
 8007372:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007374:	2b00      	cmp	r3, #0
 8007376:	d05a      	beq.n	800742e <_dtoa_r+0xa1e>
 8007378:	4658      	mov	r0, fp
 800737a:	6869      	ldr	r1, [r5, #4]
 800737c:	f000 fa0e 	bl	800779c <_Balloc>
 8007380:	4606      	mov	r6, r0
 8007382:	b928      	cbnz	r0, 8007390 <_dtoa_r+0x980>
 8007384:	4602      	mov	r2, r0
 8007386:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800738a:	4b83      	ldr	r3, [pc, #524]	@ (8007598 <_dtoa_r+0xb88>)
 800738c:	f7ff bb54 	b.w	8006a38 <_dtoa_r+0x28>
 8007390:	692a      	ldr	r2, [r5, #16]
 8007392:	f105 010c 	add.w	r1, r5, #12
 8007396:	3202      	adds	r2, #2
 8007398:	0092      	lsls	r2, r2, #2
 800739a:	300c      	adds	r0, #12
 800739c:	f7ff fa9d 	bl	80068da <memcpy>
 80073a0:	2201      	movs	r2, #1
 80073a2:	4631      	mov	r1, r6
 80073a4:	4658      	mov	r0, fp
 80073a6:	f000 fc4f 	bl	8007c48 <__lshift>
 80073aa:	462f      	mov	r7, r5
 80073ac:	4605      	mov	r5, r0
 80073ae:	f10a 0301 	add.w	r3, sl, #1
 80073b2:	9307      	str	r3, [sp, #28]
 80073b4:	9b08      	ldr	r3, [sp, #32]
 80073b6:	4453      	add	r3, sl
 80073b8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80073ba:	9b02      	ldr	r3, [sp, #8]
 80073bc:	f003 0301 	and.w	r3, r3, #1
 80073c0:	930a      	str	r3, [sp, #40]	@ 0x28
 80073c2:	9b07      	ldr	r3, [sp, #28]
 80073c4:	4621      	mov	r1, r4
 80073c6:	3b01      	subs	r3, #1
 80073c8:	4648      	mov	r0, r9
 80073ca:	9302      	str	r3, [sp, #8]
 80073cc:	f7ff fa98 	bl	8006900 <quorem>
 80073d0:	4639      	mov	r1, r7
 80073d2:	9008      	str	r0, [sp, #32]
 80073d4:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80073d8:	4648      	mov	r0, r9
 80073da:	f000 fca1 	bl	8007d20 <__mcmp>
 80073de:	462a      	mov	r2, r5
 80073e0:	9009      	str	r0, [sp, #36]	@ 0x24
 80073e2:	4621      	mov	r1, r4
 80073e4:	4658      	mov	r0, fp
 80073e6:	f000 fcb7 	bl	8007d58 <__mdiff>
 80073ea:	68c2      	ldr	r2, [r0, #12]
 80073ec:	4606      	mov	r6, r0
 80073ee:	bb02      	cbnz	r2, 8007432 <_dtoa_r+0xa22>
 80073f0:	4601      	mov	r1, r0
 80073f2:	4648      	mov	r0, r9
 80073f4:	f000 fc94 	bl	8007d20 <__mcmp>
 80073f8:	4602      	mov	r2, r0
 80073fa:	4631      	mov	r1, r6
 80073fc:	4658      	mov	r0, fp
 80073fe:	920c      	str	r2, [sp, #48]	@ 0x30
 8007400:	f000 fa0c 	bl	800781c <_Bfree>
 8007404:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007406:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8007408:	9e07      	ldr	r6, [sp, #28]
 800740a:	ea43 0102 	orr.w	r1, r3, r2
 800740e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007410:	4319      	orrs	r1, r3
 8007412:	d110      	bne.n	8007436 <_dtoa_r+0xa26>
 8007414:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007418:	d029      	beq.n	800746e <_dtoa_r+0xa5e>
 800741a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800741c:	2b00      	cmp	r3, #0
 800741e:	dd02      	ble.n	8007426 <_dtoa_r+0xa16>
 8007420:	9b08      	ldr	r3, [sp, #32]
 8007422:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8007426:	9b02      	ldr	r3, [sp, #8]
 8007428:	f883 8000 	strb.w	r8, [r3]
 800742c:	e63b      	b.n	80070a6 <_dtoa_r+0x696>
 800742e:	4628      	mov	r0, r5
 8007430:	e7bb      	b.n	80073aa <_dtoa_r+0x99a>
 8007432:	2201      	movs	r2, #1
 8007434:	e7e1      	b.n	80073fa <_dtoa_r+0x9ea>
 8007436:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007438:	2b00      	cmp	r3, #0
 800743a:	db04      	blt.n	8007446 <_dtoa_r+0xa36>
 800743c:	9920      	ldr	r1, [sp, #128]	@ 0x80
 800743e:	430b      	orrs	r3, r1
 8007440:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007442:	430b      	orrs	r3, r1
 8007444:	d120      	bne.n	8007488 <_dtoa_r+0xa78>
 8007446:	2a00      	cmp	r2, #0
 8007448:	dded      	ble.n	8007426 <_dtoa_r+0xa16>
 800744a:	4649      	mov	r1, r9
 800744c:	2201      	movs	r2, #1
 800744e:	4658      	mov	r0, fp
 8007450:	f000 fbfa 	bl	8007c48 <__lshift>
 8007454:	4621      	mov	r1, r4
 8007456:	4681      	mov	r9, r0
 8007458:	f000 fc62 	bl	8007d20 <__mcmp>
 800745c:	2800      	cmp	r0, #0
 800745e:	dc03      	bgt.n	8007468 <_dtoa_r+0xa58>
 8007460:	d1e1      	bne.n	8007426 <_dtoa_r+0xa16>
 8007462:	f018 0f01 	tst.w	r8, #1
 8007466:	d0de      	beq.n	8007426 <_dtoa_r+0xa16>
 8007468:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800746c:	d1d8      	bne.n	8007420 <_dtoa_r+0xa10>
 800746e:	2339      	movs	r3, #57	@ 0x39
 8007470:	9a02      	ldr	r2, [sp, #8]
 8007472:	7013      	strb	r3, [r2, #0]
 8007474:	4633      	mov	r3, r6
 8007476:	461e      	mov	r6, r3
 8007478:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800747c:	3b01      	subs	r3, #1
 800747e:	2a39      	cmp	r2, #57	@ 0x39
 8007480:	d052      	beq.n	8007528 <_dtoa_r+0xb18>
 8007482:	3201      	adds	r2, #1
 8007484:	701a      	strb	r2, [r3, #0]
 8007486:	e60e      	b.n	80070a6 <_dtoa_r+0x696>
 8007488:	2a00      	cmp	r2, #0
 800748a:	dd07      	ble.n	800749c <_dtoa_r+0xa8c>
 800748c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007490:	d0ed      	beq.n	800746e <_dtoa_r+0xa5e>
 8007492:	9a02      	ldr	r2, [sp, #8]
 8007494:	f108 0301 	add.w	r3, r8, #1
 8007498:	7013      	strb	r3, [r2, #0]
 800749a:	e604      	b.n	80070a6 <_dtoa_r+0x696>
 800749c:	9b07      	ldr	r3, [sp, #28]
 800749e:	9a07      	ldr	r2, [sp, #28]
 80074a0:	f803 8c01 	strb.w	r8, [r3, #-1]
 80074a4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80074a6:	4293      	cmp	r3, r2
 80074a8:	d028      	beq.n	80074fc <_dtoa_r+0xaec>
 80074aa:	4649      	mov	r1, r9
 80074ac:	2300      	movs	r3, #0
 80074ae:	220a      	movs	r2, #10
 80074b0:	4658      	mov	r0, fp
 80074b2:	f000 f9d5 	bl	8007860 <__multadd>
 80074b6:	42af      	cmp	r7, r5
 80074b8:	4681      	mov	r9, r0
 80074ba:	f04f 0300 	mov.w	r3, #0
 80074be:	f04f 020a 	mov.w	r2, #10
 80074c2:	4639      	mov	r1, r7
 80074c4:	4658      	mov	r0, fp
 80074c6:	d107      	bne.n	80074d8 <_dtoa_r+0xac8>
 80074c8:	f000 f9ca 	bl	8007860 <__multadd>
 80074cc:	4607      	mov	r7, r0
 80074ce:	4605      	mov	r5, r0
 80074d0:	9b07      	ldr	r3, [sp, #28]
 80074d2:	3301      	adds	r3, #1
 80074d4:	9307      	str	r3, [sp, #28]
 80074d6:	e774      	b.n	80073c2 <_dtoa_r+0x9b2>
 80074d8:	f000 f9c2 	bl	8007860 <__multadd>
 80074dc:	4629      	mov	r1, r5
 80074de:	4607      	mov	r7, r0
 80074e0:	2300      	movs	r3, #0
 80074e2:	220a      	movs	r2, #10
 80074e4:	4658      	mov	r0, fp
 80074e6:	f000 f9bb 	bl	8007860 <__multadd>
 80074ea:	4605      	mov	r5, r0
 80074ec:	e7f0      	b.n	80074d0 <_dtoa_r+0xac0>
 80074ee:	9b08      	ldr	r3, [sp, #32]
 80074f0:	2700      	movs	r7, #0
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	bfcc      	ite	gt
 80074f6:	461e      	movgt	r6, r3
 80074f8:	2601      	movle	r6, #1
 80074fa:	4456      	add	r6, sl
 80074fc:	4649      	mov	r1, r9
 80074fe:	2201      	movs	r2, #1
 8007500:	4658      	mov	r0, fp
 8007502:	f000 fba1 	bl	8007c48 <__lshift>
 8007506:	4621      	mov	r1, r4
 8007508:	4681      	mov	r9, r0
 800750a:	f000 fc09 	bl	8007d20 <__mcmp>
 800750e:	2800      	cmp	r0, #0
 8007510:	dcb0      	bgt.n	8007474 <_dtoa_r+0xa64>
 8007512:	d102      	bne.n	800751a <_dtoa_r+0xb0a>
 8007514:	f018 0f01 	tst.w	r8, #1
 8007518:	d1ac      	bne.n	8007474 <_dtoa_r+0xa64>
 800751a:	4633      	mov	r3, r6
 800751c:	461e      	mov	r6, r3
 800751e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007522:	2a30      	cmp	r2, #48	@ 0x30
 8007524:	d0fa      	beq.n	800751c <_dtoa_r+0xb0c>
 8007526:	e5be      	b.n	80070a6 <_dtoa_r+0x696>
 8007528:	459a      	cmp	sl, r3
 800752a:	d1a4      	bne.n	8007476 <_dtoa_r+0xa66>
 800752c:	9b04      	ldr	r3, [sp, #16]
 800752e:	3301      	adds	r3, #1
 8007530:	9304      	str	r3, [sp, #16]
 8007532:	2331      	movs	r3, #49	@ 0x31
 8007534:	f88a 3000 	strb.w	r3, [sl]
 8007538:	e5b5      	b.n	80070a6 <_dtoa_r+0x696>
 800753a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800753c:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800759c <_dtoa_r+0xb8c>
 8007540:	b11b      	cbz	r3, 800754a <_dtoa_r+0xb3a>
 8007542:	f10a 0308 	add.w	r3, sl, #8
 8007546:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8007548:	6013      	str	r3, [r2, #0]
 800754a:	4650      	mov	r0, sl
 800754c:	b017      	add	sp, #92	@ 0x5c
 800754e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007552:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007554:	2b01      	cmp	r3, #1
 8007556:	f77f ae3d 	ble.w	80071d4 <_dtoa_r+0x7c4>
 800755a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800755c:	930a      	str	r3, [sp, #40]	@ 0x28
 800755e:	2001      	movs	r0, #1
 8007560:	e65b      	b.n	800721a <_dtoa_r+0x80a>
 8007562:	9b08      	ldr	r3, [sp, #32]
 8007564:	2b00      	cmp	r3, #0
 8007566:	f77f aed6 	ble.w	8007316 <_dtoa_r+0x906>
 800756a:	4656      	mov	r6, sl
 800756c:	4621      	mov	r1, r4
 800756e:	4648      	mov	r0, r9
 8007570:	f7ff f9c6 	bl	8006900 <quorem>
 8007574:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007578:	9b08      	ldr	r3, [sp, #32]
 800757a:	f806 8b01 	strb.w	r8, [r6], #1
 800757e:	eba6 020a 	sub.w	r2, r6, sl
 8007582:	4293      	cmp	r3, r2
 8007584:	ddb3      	ble.n	80074ee <_dtoa_r+0xade>
 8007586:	4649      	mov	r1, r9
 8007588:	2300      	movs	r3, #0
 800758a:	220a      	movs	r2, #10
 800758c:	4658      	mov	r0, fp
 800758e:	f000 f967 	bl	8007860 <__multadd>
 8007592:	4681      	mov	r9, r0
 8007594:	e7ea      	b.n	800756c <_dtoa_r+0xb5c>
 8007596:	bf00      	nop
 8007598:	08009f5f 	.word	0x08009f5f
 800759c:	08009ee3 	.word	0x08009ee3

080075a0 <_free_r>:
 80075a0:	b538      	push	{r3, r4, r5, lr}
 80075a2:	4605      	mov	r5, r0
 80075a4:	2900      	cmp	r1, #0
 80075a6:	d040      	beq.n	800762a <_free_r+0x8a>
 80075a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80075ac:	1f0c      	subs	r4, r1, #4
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	bfb8      	it	lt
 80075b2:	18e4      	addlt	r4, r4, r3
 80075b4:	f000 f8e6 	bl	8007784 <__malloc_lock>
 80075b8:	4a1c      	ldr	r2, [pc, #112]	@ (800762c <_free_r+0x8c>)
 80075ba:	6813      	ldr	r3, [r2, #0]
 80075bc:	b933      	cbnz	r3, 80075cc <_free_r+0x2c>
 80075be:	6063      	str	r3, [r4, #4]
 80075c0:	6014      	str	r4, [r2, #0]
 80075c2:	4628      	mov	r0, r5
 80075c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80075c8:	f000 b8e2 	b.w	8007790 <__malloc_unlock>
 80075cc:	42a3      	cmp	r3, r4
 80075ce:	d908      	bls.n	80075e2 <_free_r+0x42>
 80075d0:	6820      	ldr	r0, [r4, #0]
 80075d2:	1821      	adds	r1, r4, r0
 80075d4:	428b      	cmp	r3, r1
 80075d6:	bf01      	itttt	eq
 80075d8:	6819      	ldreq	r1, [r3, #0]
 80075da:	685b      	ldreq	r3, [r3, #4]
 80075dc:	1809      	addeq	r1, r1, r0
 80075de:	6021      	streq	r1, [r4, #0]
 80075e0:	e7ed      	b.n	80075be <_free_r+0x1e>
 80075e2:	461a      	mov	r2, r3
 80075e4:	685b      	ldr	r3, [r3, #4]
 80075e6:	b10b      	cbz	r3, 80075ec <_free_r+0x4c>
 80075e8:	42a3      	cmp	r3, r4
 80075ea:	d9fa      	bls.n	80075e2 <_free_r+0x42>
 80075ec:	6811      	ldr	r1, [r2, #0]
 80075ee:	1850      	adds	r0, r2, r1
 80075f0:	42a0      	cmp	r0, r4
 80075f2:	d10b      	bne.n	800760c <_free_r+0x6c>
 80075f4:	6820      	ldr	r0, [r4, #0]
 80075f6:	4401      	add	r1, r0
 80075f8:	1850      	adds	r0, r2, r1
 80075fa:	4283      	cmp	r3, r0
 80075fc:	6011      	str	r1, [r2, #0]
 80075fe:	d1e0      	bne.n	80075c2 <_free_r+0x22>
 8007600:	6818      	ldr	r0, [r3, #0]
 8007602:	685b      	ldr	r3, [r3, #4]
 8007604:	4408      	add	r0, r1
 8007606:	6010      	str	r0, [r2, #0]
 8007608:	6053      	str	r3, [r2, #4]
 800760a:	e7da      	b.n	80075c2 <_free_r+0x22>
 800760c:	d902      	bls.n	8007614 <_free_r+0x74>
 800760e:	230c      	movs	r3, #12
 8007610:	602b      	str	r3, [r5, #0]
 8007612:	e7d6      	b.n	80075c2 <_free_r+0x22>
 8007614:	6820      	ldr	r0, [r4, #0]
 8007616:	1821      	adds	r1, r4, r0
 8007618:	428b      	cmp	r3, r1
 800761a:	bf01      	itttt	eq
 800761c:	6819      	ldreq	r1, [r3, #0]
 800761e:	685b      	ldreq	r3, [r3, #4]
 8007620:	1809      	addeq	r1, r1, r0
 8007622:	6021      	streq	r1, [r4, #0]
 8007624:	6063      	str	r3, [r4, #4]
 8007626:	6054      	str	r4, [r2, #4]
 8007628:	e7cb      	b.n	80075c2 <_free_r+0x22>
 800762a:	bd38      	pop	{r3, r4, r5, pc}
 800762c:	20003160 	.word	0x20003160

08007630 <malloc>:
 8007630:	4b02      	ldr	r3, [pc, #8]	@ (800763c <malloc+0xc>)
 8007632:	4601      	mov	r1, r0
 8007634:	6818      	ldr	r0, [r3, #0]
 8007636:	f000 b825 	b.w	8007684 <_malloc_r>
 800763a:	bf00      	nop
 800763c:	20000420 	.word	0x20000420

08007640 <sbrk_aligned>:
 8007640:	b570      	push	{r4, r5, r6, lr}
 8007642:	4e0f      	ldr	r6, [pc, #60]	@ (8007680 <sbrk_aligned+0x40>)
 8007644:	460c      	mov	r4, r1
 8007646:	6831      	ldr	r1, [r6, #0]
 8007648:	4605      	mov	r5, r0
 800764a:	b911      	cbnz	r1, 8007652 <sbrk_aligned+0x12>
 800764c:	f001 fe7a 	bl	8009344 <_sbrk_r>
 8007650:	6030      	str	r0, [r6, #0]
 8007652:	4621      	mov	r1, r4
 8007654:	4628      	mov	r0, r5
 8007656:	f001 fe75 	bl	8009344 <_sbrk_r>
 800765a:	1c43      	adds	r3, r0, #1
 800765c:	d103      	bne.n	8007666 <sbrk_aligned+0x26>
 800765e:	f04f 34ff 	mov.w	r4, #4294967295
 8007662:	4620      	mov	r0, r4
 8007664:	bd70      	pop	{r4, r5, r6, pc}
 8007666:	1cc4      	adds	r4, r0, #3
 8007668:	f024 0403 	bic.w	r4, r4, #3
 800766c:	42a0      	cmp	r0, r4
 800766e:	d0f8      	beq.n	8007662 <sbrk_aligned+0x22>
 8007670:	1a21      	subs	r1, r4, r0
 8007672:	4628      	mov	r0, r5
 8007674:	f001 fe66 	bl	8009344 <_sbrk_r>
 8007678:	3001      	adds	r0, #1
 800767a:	d1f2      	bne.n	8007662 <sbrk_aligned+0x22>
 800767c:	e7ef      	b.n	800765e <sbrk_aligned+0x1e>
 800767e:	bf00      	nop
 8007680:	2000315c 	.word	0x2000315c

08007684 <_malloc_r>:
 8007684:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007688:	1ccd      	adds	r5, r1, #3
 800768a:	f025 0503 	bic.w	r5, r5, #3
 800768e:	3508      	adds	r5, #8
 8007690:	2d0c      	cmp	r5, #12
 8007692:	bf38      	it	cc
 8007694:	250c      	movcc	r5, #12
 8007696:	2d00      	cmp	r5, #0
 8007698:	4606      	mov	r6, r0
 800769a:	db01      	blt.n	80076a0 <_malloc_r+0x1c>
 800769c:	42a9      	cmp	r1, r5
 800769e:	d904      	bls.n	80076aa <_malloc_r+0x26>
 80076a0:	230c      	movs	r3, #12
 80076a2:	6033      	str	r3, [r6, #0]
 80076a4:	2000      	movs	r0, #0
 80076a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80076aa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007780 <_malloc_r+0xfc>
 80076ae:	f000 f869 	bl	8007784 <__malloc_lock>
 80076b2:	f8d8 3000 	ldr.w	r3, [r8]
 80076b6:	461c      	mov	r4, r3
 80076b8:	bb44      	cbnz	r4, 800770c <_malloc_r+0x88>
 80076ba:	4629      	mov	r1, r5
 80076bc:	4630      	mov	r0, r6
 80076be:	f7ff ffbf 	bl	8007640 <sbrk_aligned>
 80076c2:	1c43      	adds	r3, r0, #1
 80076c4:	4604      	mov	r4, r0
 80076c6:	d158      	bne.n	800777a <_malloc_r+0xf6>
 80076c8:	f8d8 4000 	ldr.w	r4, [r8]
 80076cc:	4627      	mov	r7, r4
 80076ce:	2f00      	cmp	r7, #0
 80076d0:	d143      	bne.n	800775a <_malloc_r+0xd6>
 80076d2:	2c00      	cmp	r4, #0
 80076d4:	d04b      	beq.n	800776e <_malloc_r+0xea>
 80076d6:	6823      	ldr	r3, [r4, #0]
 80076d8:	4639      	mov	r1, r7
 80076da:	4630      	mov	r0, r6
 80076dc:	eb04 0903 	add.w	r9, r4, r3
 80076e0:	f001 fe30 	bl	8009344 <_sbrk_r>
 80076e4:	4581      	cmp	r9, r0
 80076e6:	d142      	bne.n	800776e <_malloc_r+0xea>
 80076e8:	6821      	ldr	r1, [r4, #0]
 80076ea:	4630      	mov	r0, r6
 80076ec:	1a6d      	subs	r5, r5, r1
 80076ee:	4629      	mov	r1, r5
 80076f0:	f7ff ffa6 	bl	8007640 <sbrk_aligned>
 80076f4:	3001      	adds	r0, #1
 80076f6:	d03a      	beq.n	800776e <_malloc_r+0xea>
 80076f8:	6823      	ldr	r3, [r4, #0]
 80076fa:	442b      	add	r3, r5
 80076fc:	6023      	str	r3, [r4, #0]
 80076fe:	f8d8 3000 	ldr.w	r3, [r8]
 8007702:	685a      	ldr	r2, [r3, #4]
 8007704:	bb62      	cbnz	r2, 8007760 <_malloc_r+0xdc>
 8007706:	f8c8 7000 	str.w	r7, [r8]
 800770a:	e00f      	b.n	800772c <_malloc_r+0xa8>
 800770c:	6822      	ldr	r2, [r4, #0]
 800770e:	1b52      	subs	r2, r2, r5
 8007710:	d420      	bmi.n	8007754 <_malloc_r+0xd0>
 8007712:	2a0b      	cmp	r2, #11
 8007714:	d917      	bls.n	8007746 <_malloc_r+0xc2>
 8007716:	1961      	adds	r1, r4, r5
 8007718:	42a3      	cmp	r3, r4
 800771a:	6025      	str	r5, [r4, #0]
 800771c:	bf18      	it	ne
 800771e:	6059      	strne	r1, [r3, #4]
 8007720:	6863      	ldr	r3, [r4, #4]
 8007722:	bf08      	it	eq
 8007724:	f8c8 1000 	streq.w	r1, [r8]
 8007728:	5162      	str	r2, [r4, r5]
 800772a:	604b      	str	r3, [r1, #4]
 800772c:	4630      	mov	r0, r6
 800772e:	f000 f82f 	bl	8007790 <__malloc_unlock>
 8007732:	f104 000b 	add.w	r0, r4, #11
 8007736:	1d23      	adds	r3, r4, #4
 8007738:	f020 0007 	bic.w	r0, r0, #7
 800773c:	1ac2      	subs	r2, r0, r3
 800773e:	bf1c      	itt	ne
 8007740:	1a1b      	subne	r3, r3, r0
 8007742:	50a3      	strne	r3, [r4, r2]
 8007744:	e7af      	b.n	80076a6 <_malloc_r+0x22>
 8007746:	6862      	ldr	r2, [r4, #4]
 8007748:	42a3      	cmp	r3, r4
 800774a:	bf0c      	ite	eq
 800774c:	f8c8 2000 	streq.w	r2, [r8]
 8007750:	605a      	strne	r2, [r3, #4]
 8007752:	e7eb      	b.n	800772c <_malloc_r+0xa8>
 8007754:	4623      	mov	r3, r4
 8007756:	6864      	ldr	r4, [r4, #4]
 8007758:	e7ae      	b.n	80076b8 <_malloc_r+0x34>
 800775a:	463c      	mov	r4, r7
 800775c:	687f      	ldr	r7, [r7, #4]
 800775e:	e7b6      	b.n	80076ce <_malloc_r+0x4a>
 8007760:	461a      	mov	r2, r3
 8007762:	685b      	ldr	r3, [r3, #4]
 8007764:	42a3      	cmp	r3, r4
 8007766:	d1fb      	bne.n	8007760 <_malloc_r+0xdc>
 8007768:	2300      	movs	r3, #0
 800776a:	6053      	str	r3, [r2, #4]
 800776c:	e7de      	b.n	800772c <_malloc_r+0xa8>
 800776e:	230c      	movs	r3, #12
 8007770:	4630      	mov	r0, r6
 8007772:	6033      	str	r3, [r6, #0]
 8007774:	f000 f80c 	bl	8007790 <__malloc_unlock>
 8007778:	e794      	b.n	80076a4 <_malloc_r+0x20>
 800777a:	6005      	str	r5, [r0, #0]
 800777c:	e7d6      	b.n	800772c <_malloc_r+0xa8>
 800777e:	bf00      	nop
 8007780:	20003160 	.word	0x20003160

08007784 <__malloc_lock>:
 8007784:	4801      	ldr	r0, [pc, #4]	@ (800778c <__malloc_lock+0x8>)
 8007786:	f7ff b898 	b.w	80068ba <__retarget_lock_acquire_recursive>
 800778a:	bf00      	nop
 800778c:	20003158 	.word	0x20003158

08007790 <__malloc_unlock>:
 8007790:	4801      	ldr	r0, [pc, #4]	@ (8007798 <__malloc_unlock+0x8>)
 8007792:	f7ff b893 	b.w	80068bc <__retarget_lock_release_recursive>
 8007796:	bf00      	nop
 8007798:	20003158 	.word	0x20003158

0800779c <_Balloc>:
 800779c:	b570      	push	{r4, r5, r6, lr}
 800779e:	69c6      	ldr	r6, [r0, #28]
 80077a0:	4604      	mov	r4, r0
 80077a2:	460d      	mov	r5, r1
 80077a4:	b976      	cbnz	r6, 80077c4 <_Balloc+0x28>
 80077a6:	2010      	movs	r0, #16
 80077a8:	f7ff ff42 	bl	8007630 <malloc>
 80077ac:	4602      	mov	r2, r0
 80077ae:	61e0      	str	r0, [r4, #28]
 80077b0:	b920      	cbnz	r0, 80077bc <_Balloc+0x20>
 80077b2:	216b      	movs	r1, #107	@ 0x6b
 80077b4:	4b17      	ldr	r3, [pc, #92]	@ (8007814 <_Balloc+0x78>)
 80077b6:	4818      	ldr	r0, [pc, #96]	@ (8007818 <_Balloc+0x7c>)
 80077b8:	f001 fdda 	bl	8009370 <__assert_func>
 80077bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80077c0:	6006      	str	r6, [r0, #0]
 80077c2:	60c6      	str	r6, [r0, #12]
 80077c4:	69e6      	ldr	r6, [r4, #28]
 80077c6:	68f3      	ldr	r3, [r6, #12]
 80077c8:	b183      	cbz	r3, 80077ec <_Balloc+0x50>
 80077ca:	69e3      	ldr	r3, [r4, #28]
 80077cc:	68db      	ldr	r3, [r3, #12]
 80077ce:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80077d2:	b9b8      	cbnz	r0, 8007804 <_Balloc+0x68>
 80077d4:	2101      	movs	r1, #1
 80077d6:	fa01 f605 	lsl.w	r6, r1, r5
 80077da:	1d72      	adds	r2, r6, #5
 80077dc:	4620      	mov	r0, r4
 80077de:	0092      	lsls	r2, r2, #2
 80077e0:	f001 fde4 	bl	80093ac <_calloc_r>
 80077e4:	b160      	cbz	r0, 8007800 <_Balloc+0x64>
 80077e6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80077ea:	e00e      	b.n	800780a <_Balloc+0x6e>
 80077ec:	2221      	movs	r2, #33	@ 0x21
 80077ee:	2104      	movs	r1, #4
 80077f0:	4620      	mov	r0, r4
 80077f2:	f001 fddb 	bl	80093ac <_calloc_r>
 80077f6:	69e3      	ldr	r3, [r4, #28]
 80077f8:	60f0      	str	r0, [r6, #12]
 80077fa:	68db      	ldr	r3, [r3, #12]
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d1e4      	bne.n	80077ca <_Balloc+0x2e>
 8007800:	2000      	movs	r0, #0
 8007802:	bd70      	pop	{r4, r5, r6, pc}
 8007804:	6802      	ldr	r2, [r0, #0]
 8007806:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800780a:	2300      	movs	r3, #0
 800780c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007810:	e7f7      	b.n	8007802 <_Balloc+0x66>
 8007812:	bf00      	nop
 8007814:	08009ef0 	.word	0x08009ef0
 8007818:	08009f70 	.word	0x08009f70

0800781c <_Bfree>:
 800781c:	b570      	push	{r4, r5, r6, lr}
 800781e:	69c6      	ldr	r6, [r0, #28]
 8007820:	4605      	mov	r5, r0
 8007822:	460c      	mov	r4, r1
 8007824:	b976      	cbnz	r6, 8007844 <_Bfree+0x28>
 8007826:	2010      	movs	r0, #16
 8007828:	f7ff ff02 	bl	8007630 <malloc>
 800782c:	4602      	mov	r2, r0
 800782e:	61e8      	str	r0, [r5, #28]
 8007830:	b920      	cbnz	r0, 800783c <_Bfree+0x20>
 8007832:	218f      	movs	r1, #143	@ 0x8f
 8007834:	4b08      	ldr	r3, [pc, #32]	@ (8007858 <_Bfree+0x3c>)
 8007836:	4809      	ldr	r0, [pc, #36]	@ (800785c <_Bfree+0x40>)
 8007838:	f001 fd9a 	bl	8009370 <__assert_func>
 800783c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007840:	6006      	str	r6, [r0, #0]
 8007842:	60c6      	str	r6, [r0, #12]
 8007844:	b13c      	cbz	r4, 8007856 <_Bfree+0x3a>
 8007846:	69eb      	ldr	r3, [r5, #28]
 8007848:	6862      	ldr	r2, [r4, #4]
 800784a:	68db      	ldr	r3, [r3, #12]
 800784c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007850:	6021      	str	r1, [r4, #0]
 8007852:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007856:	bd70      	pop	{r4, r5, r6, pc}
 8007858:	08009ef0 	.word	0x08009ef0
 800785c:	08009f70 	.word	0x08009f70

08007860 <__multadd>:
 8007860:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007864:	4607      	mov	r7, r0
 8007866:	460c      	mov	r4, r1
 8007868:	461e      	mov	r6, r3
 800786a:	2000      	movs	r0, #0
 800786c:	690d      	ldr	r5, [r1, #16]
 800786e:	f101 0c14 	add.w	ip, r1, #20
 8007872:	f8dc 3000 	ldr.w	r3, [ip]
 8007876:	3001      	adds	r0, #1
 8007878:	b299      	uxth	r1, r3
 800787a:	fb02 6101 	mla	r1, r2, r1, r6
 800787e:	0c1e      	lsrs	r6, r3, #16
 8007880:	0c0b      	lsrs	r3, r1, #16
 8007882:	fb02 3306 	mla	r3, r2, r6, r3
 8007886:	b289      	uxth	r1, r1
 8007888:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800788c:	4285      	cmp	r5, r0
 800788e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007892:	f84c 1b04 	str.w	r1, [ip], #4
 8007896:	dcec      	bgt.n	8007872 <__multadd+0x12>
 8007898:	b30e      	cbz	r6, 80078de <__multadd+0x7e>
 800789a:	68a3      	ldr	r3, [r4, #8]
 800789c:	42ab      	cmp	r3, r5
 800789e:	dc19      	bgt.n	80078d4 <__multadd+0x74>
 80078a0:	6861      	ldr	r1, [r4, #4]
 80078a2:	4638      	mov	r0, r7
 80078a4:	3101      	adds	r1, #1
 80078a6:	f7ff ff79 	bl	800779c <_Balloc>
 80078aa:	4680      	mov	r8, r0
 80078ac:	b928      	cbnz	r0, 80078ba <__multadd+0x5a>
 80078ae:	4602      	mov	r2, r0
 80078b0:	21ba      	movs	r1, #186	@ 0xba
 80078b2:	4b0c      	ldr	r3, [pc, #48]	@ (80078e4 <__multadd+0x84>)
 80078b4:	480c      	ldr	r0, [pc, #48]	@ (80078e8 <__multadd+0x88>)
 80078b6:	f001 fd5b 	bl	8009370 <__assert_func>
 80078ba:	6922      	ldr	r2, [r4, #16]
 80078bc:	f104 010c 	add.w	r1, r4, #12
 80078c0:	3202      	adds	r2, #2
 80078c2:	0092      	lsls	r2, r2, #2
 80078c4:	300c      	adds	r0, #12
 80078c6:	f7ff f808 	bl	80068da <memcpy>
 80078ca:	4621      	mov	r1, r4
 80078cc:	4638      	mov	r0, r7
 80078ce:	f7ff ffa5 	bl	800781c <_Bfree>
 80078d2:	4644      	mov	r4, r8
 80078d4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80078d8:	3501      	adds	r5, #1
 80078da:	615e      	str	r6, [r3, #20]
 80078dc:	6125      	str	r5, [r4, #16]
 80078de:	4620      	mov	r0, r4
 80078e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80078e4:	08009f5f 	.word	0x08009f5f
 80078e8:	08009f70 	.word	0x08009f70

080078ec <__s2b>:
 80078ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80078f0:	4615      	mov	r5, r2
 80078f2:	2209      	movs	r2, #9
 80078f4:	461f      	mov	r7, r3
 80078f6:	3308      	adds	r3, #8
 80078f8:	460c      	mov	r4, r1
 80078fa:	fb93 f3f2 	sdiv	r3, r3, r2
 80078fe:	4606      	mov	r6, r0
 8007900:	2201      	movs	r2, #1
 8007902:	2100      	movs	r1, #0
 8007904:	429a      	cmp	r2, r3
 8007906:	db09      	blt.n	800791c <__s2b+0x30>
 8007908:	4630      	mov	r0, r6
 800790a:	f7ff ff47 	bl	800779c <_Balloc>
 800790e:	b940      	cbnz	r0, 8007922 <__s2b+0x36>
 8007910:	4602      	mov	r2, r0
 8007912:	21d3      	movs	r1, #211	@ 0xd3
 8007914:	4b18      	ldr	r3, [pc, #96]	@ (8007978 <__s2b+0x8c>)
 8007916:	4819      	ldr	r0, [pc, #100]	@ (800797c <__s2b+0x90>)
 8007918:	f001 fd2a 	bl	8009370 <__assert_func>
 800791c:	0052      	lsls	r2, r2, #1
 800791e:	3101      	adds	r1, #1
 8007920:	e7f0      	b.n	8007904 <__s2b+0x18>
 8007922:	9b08      	ldr	r3, [sp, #32]
 8007924:	2d09      	cmp	r5, #9
 8007926:	6143      	str	r3, [r0, #20]
 8007928:	f04f 0301 	mov.w	r3, #1
 800792c:	6103      	str	r3, [r0, #16]
 800792e:	dd16      	ble.n	800795e <__s2b+0x72>
 8007930:	f104 0909 	add.w	r9, r4, #9
 8007934:	46c8      	mov	r8, r9
 8007936:	442c      	add	r4, r5
 8007938:	f818 3b01 	ldrb.w	r3, [r8], #1
 800793c:	4601      	mov	r1, r0
 800793e:	220a      	movs	r2, #10
 8007940:	4630      	mov	r0, r6
 8007942:	3b30      	subs	r3, #48	@ 0x30
 8007944:	f7ff ff8c 	bl	8007860 <__multadd>
 8007948:	45a0      	cmp	r8, r4
 800794a:	d1f5      	bne.n	8007938 <__s2b+0x4c>
 800794c:	f1a5 0408 	sub.w	r4, r5, #8
 8007950:	444c      	add	r4, r9
 8007952:	1b2d      	subs	r5, r5, r4
 8007954:	1963      	adds	r3, r4, r5
 8007956:	42bb      	cmp	r3, r7
 8007958:	db04      	blt.n	8007964 <__s2b+0x78>
 800795a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800795e:	2509      	movs	r5, #9
 8007960:	340a      	adds	r4, #10
 8007962:	e7f6      	b.n	8007952 <__s2b+0x66>
 8007964:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007968:	4601      	mov	r1, r0
 800796a:	220a      	movs	r2, #10
 800796c:	4630      	mov	r0, r6
 800796e:	3b30      	subs	r3, #48	@ 0x30
 8007970:	f7ff ff76 	bl	8007860 <__multadd>
 8007974:	e7ee      	b.n	8007954 <__s2b+0x68>
 8007976:	bf00      	nop
 8007978:	08009f5f 	.word	0x08009f5f
 800797c:	08009f70 	.word	0x08009f70

08007980 <__hi0bits>:
 8007980:	4603      	mov	r3, r0
 8007982:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007986:	bf3a      	itte	cc
 8007988:	0403      	lslcc	r3, r0, #16
 800798a:	2010      	movcc	r0, #16
 800798c:	2000      	movcs	r0, #0
 800798e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007992:	bf3c      	itt	cc
 8007994:	021b      	lslcc	r3, r3, #8
 8007996:	3008      	addcc	r0, #8
 8007998:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800799c:	bf3c      	itt	cc
 800799e:	011b      	lslcc	r3, r3, #4
 80079a0:	3004      	addcc	r0, #4
 80079a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80079a6:	bf3c      	itt	cc
 80079a8:	009b      	lslcc	r3, r3, #2
 80079aa:	3002      	addcc	r0, #2
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	db05      	blt.n	80079bc <__hi0bits+0x3c>
 80079b0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80079b4:	f100 0001 	add.w	r0, r0, #1
 80079b8:	bf08      	it	eq
 80079ba:	2020      	moveq	r0, #32
 80079bc:	4770      	bx	lr

080079be <__lo0bits>:
 80079be:	6803      	ldr	r3, [r0, #0]
 80079c0:	4602      	mov	r2, r0
 80079c2:	f013 0007 	ands.w	r0, r3, #7
 80079c6:	d00b      	beq.n	80079e0 <__lo0bits+0x22>
 80079c8:	07d9      	lsls	r1, r3, #31
 80079ca:	d421      	bmi.n	8007a10 <__lo0bits+0x52>
 80079cc:	0798      	lsls	r0, r3, #30
 80079ce:	bf49      	itett	mi
 80079d0:	085b      	lsrmi	r3, r3, #1
 80079d2:	089b      	lsrpl	r3, r3, #2
 80079d4:	2001      	movmi	r0, #1
 80079d6:	6013      	strmi	r3, [r2, #0]
 80079d8:	bf5c      	itt	pl
 80079da:	2002      	movpl	r0, #2
 80079dc:	6013      	strpl	r3, [r2, #0]
 80079de:	4770      	bx	lr
 80079e0:	b299      	uxth	r1, r3
 80079e2:	b909      	cbnz	r1, 80079e8 <__lo0bits+0x2a>
 80079e4:	2010      	movs	r0, #16
 80079e6:	0c1b      	lsrs	r3, r3, #16
 80079e8:	b2d9      	uxtb	r1, r3
 80079ea:	b909      	cbnz	r1, 80079f0 <__lo0bits+0x32>
 80079ec:	3008      	adds	r0, #8
 80079ee:	0a1b      	lsrs	r3, r3, #8
 80079f0:	0719      	lsls	r1, r3, #28
 80079f2:	bf04      	itt	eq
 80079f4:	091b      	lsreq	r3, r3, #4
 80079f6:	3004      	addeq	r0, #4
 80079f8:	0799      	lsls	r1, r3, #30
 80079fa:	bf04      	itt	eq
 80079fc:	089b      	lsreq	r3, r3, #2
 80079fe:	3002      	addeq	r0, #2
 8007a00:	07d9      	lsls	r1, r3, #31
 8007a02:	d403      	bmi.n	8007a0c <__lo0bits+0x4e>
 8007a04:	085b      	lsrs	r3, r3, #1
 8007a06:	f100 0001 	add.w	r0, r0, #1
 8007a0a:	d003      	beq.n	8007a14 <__lo0bits+0x56>
 8007a0c:	6013      	str	r3, [r2, #0]
 8007a0e:	4770      	bx	lr
 8007a10:	2000      	movs	r0, #0
 8007a12:	4770      	bx	lr
 8007a14:	2020      	movs	r0, #32
 8007a16:	4770      	bx	lr

08007a18 <__i2b>:
 8007a18:	b510      	push	{r4, lr}
 8007a1a:	460c      	mov	r4, r1
 8007a1c:	2101      	movs	r1, #1
 8007a1e:	f7ff febd 	bl	800779c <_Balloc>
 8007a22:	4602      	mov	r2, r0
 8007a24:	b928      	cbnz	r0, 8007a32 <__i2b+0x1a>
 8007a26:	f240 1145 	movw	r1, #325	@ 0x145
 8007a2a:	4b04      	ldr	r3, [pc, #16]	@ (8007a3c <__i2b+0x24>)
 8007a2c:	4804      	ldr	r0, [pc, #16]	@ (8007a40 <__i2b+0x28>)
 8007a2e:	f001 fc9f 	bl	8009370 <__assert_func>
 8007a32:	2301      	movs	r3, #1
 8007a34:	6144      	str	r4, [r0, #20]
 8007a36:	6103      	str	r3, [r0, #16]
 8007a38:	bd10      	pop	{r4, pc}
 8007a3a:	bf00      	nop
 8007a3c:	08009f5f 	.word	0x08009f5f
 8007a40:	08009f70 	.word	0x08009f70

08007a44 <__multiply>:
 8007a44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a48:	4614      	mov	r4, r2
 8007a4a:	690a      	ldr	r2, [r1, #16]
 8007a4c:	6923      	ldr	r3, [r4, #16]
 8007a4e:	460f      	mov	r7, r1
 8007a50:	429a      	cmp	r2, r3
 8007a52:	bfa2      	ittt	ge
 8007a54:	4623      	movge	r3, r4
 8007a56:	460c      	movge	r4, r1
 8007a58:	461f      	movge	r7, r3
 8007a5a:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8007a5e:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8007a62:	68a3      	ldr	r3, [r4, #8]
 8007a64:	6861      	ldr	r1, [r4, #4]
 8007a66:	eb0a 0609 	add.w	r6, sl, r9
 8007a6a:	42b3      	cmp	r3, r6
 8007a6c:	b085      	sub	sp, #20
 8007a6e:	bfb8      	it	lt
 8007a70:	3101      	addlt	r1, #1
 8007a72:	f7ff fe93 	bl	800779c <_Balloc>
 8007a76:	b930      	cbnz	r0, 8007a86 <__multiply+0x42>
 8007a78:	4602      	mov	r2, r0
 8007a7a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007a7e:	4b43      	ldr	r3, [pc, #268]	@ (8007b8c <__multiply+0x148>)
 8007a80:	4843      	ldr	r0, [pc, #268]	@ (8007b90 <__multiply+0x14c>)
 8007a82:	f001 fc75 	bl	8009370 <__assert_func>
 8007a86:	f100 0514 	add.w	r5, r0, #20
 8007a8a:	462b      	mov	r3, r5
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007a92:	4543      	cmp	r3, r8
 8007a94:	d321      	bcc.n	8007ada <__multiply+0x96>
 8007a96:	f107 0114 	add.w	r1, r7, #20
 8007a9a:	f104 0214 	add.w	r2, r4, #20
 8007a9e:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8007aa2:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8007aa6:	9302      	str	r3, [sp, #8]
 8007aa8:	1b13      	subs	r3, r2, r4
 8007aaa:	3b15      	subs	r3, #21
 8007aac:	f023 0303 	bic.w	r3, r3, #3
 8007ab0:	3304      	adds	r3, #4
 8007ab2:	f104 0715 	add.w	r7, r4, #21
 8007ab6:	42ba      	cmp	r2, r7
 8007ab8:	bf38      	it	cc
 8007aba:	2304      	movcc	r3, #4
 8007abc:	9301      	str	r3, [sp, #4]
 8007abe:	9b02      	ldr	r3, [sp, #8]
 8007ac0:	9103      	str	r1, [sp, #12]
 8007ac2:	428b      	cmp	r3, r1
 8007ac4:	d80c      	bhi.n	8007ae0 <__multiply+0x9c>
 8007ac6:	2e00      	cmp	r6, #0
 8007ac8:	dd03      	ble.n	8007ad2 <__multiply+0x8e>
 8007aca:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d05a      	beq.n	8007b88 <__multiply+0x144>
 8007ad2:	6106      	str	r6, [r0, #16]
 8007ad4:	b005      	add	sp, #20
 8007ad6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ada:	f843 2b04 	str.w	r2, [r3], #4
 8007ade:	e7d8      	b.n	8007a92 <__multiply+0x4e>
 8007ae0:	f8b1 a000 	ldrh.w	sl, [r1]
 8007ae4:	f1ba 0f00 	cmp.w	sl, #0
 8007ae8:	d023      	beq.n	8007b32 <__multiply+0xee>
 8007aea:	46a9      	mov	r9, r5
 8007aec:	f04f 0c00 	mov.w	ip, #0
 8007af0:	f104 0e14 	add.w	lr, r4, #20
 8007af4:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007af8:	f8d9 3000 	ldr.w	r3, [r9]
 8007afc:	fa1f fb87 	uxth.w	fp, r7
 8007b00:	b29b      	uxth	r3, r3
 8007b02:	fb0a 330b 	mla	r3, sl, fp, r3
 8007b06:	4463      	add	r3, ip
 8007b08:	f8d9 c000 	ldr.w	ip, [r9]
 8007b0c:	0c3f      	lsrs	r7, r7, #16
 8007b0e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8007b12:	fb0a c707 	mla	r7, sl, r7, ip
 8007b16:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8007b1a:	b29b      	uxth	r3, r3
 8007b1c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007b20:	4572      	cmp	r2, lr
 8007b22:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007b26:	f849 3b04 	str.w	r3, [r9], #4
 8007b2a:	d8e3      	bhi.n	8007af4 <__multiply+0xb0>
 8007b2c:	9b01      	ldr	r3, [sp, #4]
 8007b2e:	f845 c003 	str.w	ip, [r5, r3]
 8007b32:	9b03      	ldr	r3, [sp, #12]
 8007b34:	3104      	adds	r1, #4
 8007b36:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007b3a:	f1b9 0f00 	cmp.w	r9, #0
 8007b3e:	d021      	beq.n	8007b84 <__multiply+0x140>
 8007b40:	46ae      	mov	lr, r5
 8007b42:	f04f 0a00 	mov.w	sl, #0
 8007b46:	682b      	ldr	r3, [r5, #0]
 8007b48:	f104 0c14 	add.w	ip, r4, #20
 8007b4c:	f8bc b000 	ldrh.w	fp, [ip]
 8007b50:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8007b54:	b29b      	uxth	r3, r3
 8007b56:	fb09 770b 	mla	r7, r9, fp, r7
 8007b5a:	4457      	add	r7, sl
 8007b5c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007b60:	f84e 3b04 	str.w	r3, [lr], #4
 8007b64:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007b68:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007b6c:	f8be 3000 	ldrh.w	r3, [lr]
 8007b70:	4562      	cmp	r2, ip
 8007b72:	fb09 330a 	mla	r3, r9, sl, r3
 8007b76:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8007b7a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007b7e:	d8e5      	bhi.n	8007b4c <__multiply+0x108>
 8007b80:	9f01      	ldr	r7, [sp, #4]
 8007b82:	51eb      	str	r3, [r5, r7]
 8007b84:	3504      	adds	r5, #4
 8007b86:	e79a      	b.n	8007abe <__multiply+0x7a>
 8007b88:	3e01      	subs	r6, #1
 8007b8a:	e79c      	b.n	8007ac6 <__multiply+0x82>
 8007b8c:	08009f5f 	.word	0x08009f5f
 8007b90:	08009f70 	.word	0x08009f70

08007b94 <__pow5mult>:
 8007b94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007b98:	4615      	mov	r5, r2
 8007b9a:	f012 0203 	ands.w	r2, r2, #3
 8007b9e:	4607      	mov	r7, r0
 8007ba0:	460e      	mov	r6, r1
 8007ba2:	d007      	beq.n	8007bb4 <__pow5mult+0x20>
 8007ba4:	4c25      	ldr	r4, [pc, #148]	@ (8007c3c <__pow5mult+0xa8>)
 8007ba6:	3a01      	subs	r2, #1
 8007ba8:	2300      	movs	r3, #0
 8007baa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007bae:	f7ff fe57 	bl	8007860 <__multadd>
 8007bb2:	4606      	mov	r6, r0
 8007bb4:	10ad      	asrs	r5, r5, #2
 8007bb6:	d03d      	beq.n	8007c34 <__pow5mult+0xa0>
 8007bb8:	69fc      	ldr	r4, [r7, #28]
 8007bba:	b97c      	cbnz	r4, 8007bdc <__pow5mult+0x48>
 8007bbc:	2010      	movs	r0, #16
 8007bbe:	f7ff fd37 	bl	8007630 <malloc>
 8007bc2:	4602      	mov	r2, r0
 8007bc4:	61f8      	str	r0, [r7, #28]
 8007bc6:	b928      	cbnz	r0, 8007bd4 <__pow5mult+0x40>
 8007bc8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007bcc:	4b1c      	ldr	r3, [pc, #112]	@ (8007c40 <__pow5mult+0xac>)
 8007bce:	481d      	ldr	r0, [pc, #116]	@ (8007c44 <__pow5mult+0xb0>)
 8007bd0:	f001 fbce 	bl	8009370 <__assert_func>
 8007bd4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007bd8:	6004      	str	r4, [r0, #0]
 8007bda:	60c4      	str	r4, [r0, #12]
 8007bdc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007be0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007be4:	b94c      	cbnz	r4, 8007bfa <__pow5mult+0x66>
 8007be6:	f240 2171 	movw	r1, #625	@ 0x271
 8007bea:	4638      	mov	r0, r7
 8007bec:	f7ff ff14 	bl	8007a18 <__i2b>
 8007bf0:	2300      	movs	r3, #0
 8007bf2:	4604      	mov	r4, r0
 8007bf4:	f8c8 0008 	str.w	r0, [r8, #8]
 8007bf8:	6003      	str	r3, [r0, #0]
 8007bfa:	f04f 0900 	mov.w	r9, #0
 8007bfe:	07eb      	lsls	r3, r5, #31
 8007c00:	d50a      	bpl.n	8007c18 <__pow5mult+0x84>
 8007c02:	4631      	mov	r1, r6
 8007c04:	4622      	mov	r2, r4
 8007c06:	4638      	mov	r0, r7
 8007c08:	f7ff ff1c 	bl	8007a44 <__multiply>
 8007c0c:	4680      	mov	r8, r0
 8007c0e:	4631      	mov	r1, r6
 8007c10:	4638      	mov	r0, r7
 8007c12:	f7ff fe03 	bl	800781c <_Bfree>
 8007c16:	4646      	mov	r6, r8
 8007c18:	106d      	asrs	r5, r5, #1
 8007c1a:	d00b      	beq.n	8007c34 <__pow5mult+0xa0>
 8007c1c:	6820      	ldr	r0, [r4, #0]
 8007c1e:	b938      	cbnz	r0, 8007c30 <__pow5mult+0x9c>
 8007c20:	4622      	mov	r2, r4
 8007c22:	4621      	mov	r1, r4
 8007c24:	4638      	mov	r0, r7
 8007c26:	f7ff ff0d 	bl	8007a44 <__multiply>
 8007c2a:	6020      	str	r0, [r4, #0]
 8007c2c:	f8c0 9000 	str.w	r9, [r0]
 8007c30:	4604      	mov	r4, r0
 8007c32:	e7e4      	b.n	8007bfe <__pow5mult+0x6a>
 8007c34:	4630      	mov	r0, r6
 8007c36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007c3a:	bf00      	nop
 8007c3c:	08009fcc 	.word	0x08009fcc
 8007c40:	08009ef0 	.word	0x08009ef0
 8007c44:	08009f70 	.word	0x08009f70

08007c48 <__lshift>:
 8007c48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c4c:	460c      	mov	r4, r1
 8007c4e:	4607      	mov	r7, r0
 8007c50:	4691      	mov	r9, r2
 8007c52:	6923      	ldr	r3, [r4, #16]
 8007c54:	6849      	ldr	r1, [r1, #4]
 8007c56:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007c5a:	68a3      	ldr	r3, [r4, #8]
 8007c5c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007c60:	f108 0601 	add.w	r6, r8, #1
 8007c64:	42b3      	cmp	r3, r6
 8007c66:	db0b      	blt.n	8007c80 <__lshift+0x38>
 8007c68:	4638      	mov	r0, r7
 8007c6a:	f7ff fd97 	bl	800779c <_Balloc>
 8007c6e:	4605      	mov	r5, r0
 8007c70:	b948      	cbnz	r0, 8007c86 <__lshift+0x3e>
 8007c72:	4602      	mov	r2, r0
 8007c74:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007c78:	4b27      	ldr	r3, [pc, #156]	@ (8007d18 <__lshift+0xd0>)
 8007c7a:	4828      	ldr	r0, [pc, #160]	@ (8007d1c <__lshift+0xd4>)
 8007c7c:	f001 fb78 	bl	8009370 <__assert_func>
 8007c80:	3101      	adds	r1, #1
 8007c82:	005b      	lsls	r3, r3, #1
 8007c84:	e7ee      	b.n	8007c64 <__lshift+0x1c>
 8007c86:	2300      	movs	r3, #0
 8007c88:	f100 0114 	add.w	r1, r0, #20
 8007c8c:	f100 0210 	add.w	r2, r0, #16
 8007c90:	4618      	mov	r0, r3
 8007c92:	4553      	cmp	r3, sl
 8007c94:	db33      	blt.n	8007cfe <__lshift+0xb6>
 8007c96:	6920      	ldr	r0, [r4, #16]
 8007c98:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007c9c:	f104 0314 	add.w	r3, r4, #20
 8007ca0:	f019 091f 	ands.w	r9, r9, #31
 8007ca4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007ca8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007cac:	d02b      	beq.n	8007d06 <__lshift+0xbe>
 8007cae:	468a      	mov	sl, r1
 8007cb0:	2200      	movs	r2, #0
 8007cb2:	f1c9 0e20 	rsb	lr, r9, #32
 8007cb6:	6818      	ldr	r0, [r3, #0]
 8007cb8:	fa00 f009 	lsl.w	r0, r0, r9
 8007cbc:	4310      	orrs	r0, r2
 8007cbe:	f84a 0b04 	str.w	r0, [sl], #4
 8007cc2:	f853 2b04 	ldr.w	r2, [r3], #4
 8007cc6:	459c      	cmp	ip, r3
 8007cc8:	fa22 f20e 	lsr.w	r2, r2, lr
 8007ccc:	d8f3      	bhi.n	8007cb6 <__lshift+0x6e>
 8007cce:	ebac 0304 	sub.w	r3, ip, r4
 8007cd2:	3b15      	subs	r3, #21
 8007cd4:	f023 0303 	bic.w	r3, r3, #3
 8007cd8:	3304      	adds	r3, #4
 8007cda:	f104 0015 	add.w	r0, r4, #21
 8007cde:	4584      	cmp	ip, r0
 8007ce0:	bf38      	it	cc
 8007ce2:	2304      	movcc	r3, #4
 8007ce4:	50ca      	str	r2, [r1, r3]
 8007ce6:	b10a      	cbz	r2, 8007cec <__lshift+0xa4>
 8007ce8:	f108 0602 	add.w	r6, r8, #2
 8007cec:	3e01      	subs	r6, #1
 8007cee:	4638      	mov	r0, r7
 8007cf0:	4621      	mov	r1, r4
 8007cf2:	612e      	str	r6, [r5, #16]
 8007cf4:	f7ff fd92 	bl	800781c <_Bfree>
 8007cf8:	4628      	mov	r0, r5
 8007cfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007cfe:	f842 0f04 	str.w	r0, [r2, #4]!
 8007d02:	3301      	adds	r3, #1
 8007d04:	e7c5      	b.n	8007c92 <__lshift+0x4a>
 8007d06:	3904      	subs	r1, #4
 8007d08:	f853 2b04 	ldr.w	r2, [r3], #4
 8007d0c:	459c      	cmp	ip, r3
 8007d0e:	f841 2f04 	str.w	r2, [r1, #4]!
 8007d12:	d8f9      	bhi.n	8007d08 <__lshift+0xc0>
 8007d14:	e7ea      	b.n	8007cec <__lshift+0xa4>
 8007d16:	bf00      	nop
 8007d18:	08009f5f 	.word	0x08009f5f
 8007d1c:	08009f70 	.word	0x08009f70

08007d20 <__mcmp>:
 8007d20:	4603      	mov	r3, r0
 8007d22:	690a      	ldr	r2, [r1, #16]
 8007d24:	6900      	ldr	r0, [r0, #16]
 8007d26:	b530      	push	{r4, r5, lr}
 8007d28:	1a80      	subs	r0, r0, r2
 8007d2a:	d10e      	bne.n	8007d4a <__mcmp+0x2a>
 8007d2c:	3314      	adds	r3, #20
 8007d2e:	3114      	adds	r1, #20
 8007d30:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007d34:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007d38:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007d3c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007d40:	4295      	cmp	r5, r2
 8007d42:	d003      	beq.n	8007d4c <__mcmp+0x2c>
 8007d44:	d205      	bcs.n	8007d52 <__mcmp+0x32>
 8007d46:	f04f 30ff 	mov.w	r0, #4294967295
 8007d4a:	bd30      	pop	{r4, r5, pc}
 8007d4c:	42a3      	cmp	r3, r4
 8007d4e:	d3f3      	bcc.n	8007d38 <__mcmp+0x18>
 8007d50:	e7fb      	b.n	8007d4a <__mcmp+0x2a>
 8007d52:	2001      	movs	r0, #1
 8007d54:	e7f9      	b.n	8007d4a <__mcmp+0x2a>
	...

08007d58 <__mdiff>:
 8007d58:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d5c:	4689      	mov	r9, r1
 8007d5e:	4606      	mov	r6, r0
 8007d60:	4611      	mov	r1, r2
 8007d62:	4648      	mov	r0, r9
 8007d64:	4614      	mov	r4, r2
 8007d66:	f7ff ffdb 	bl	8007d20 <__mcmp>
 8007d6a:	1e05      	subs	r5, r0, #0
 8007d6c:	d112      	bne.n	8007d94 <__mdiff+0x3c>
 8007d6e:	4629      	mov	r1, r5
 8007d70:	4630      	mov	r0, r6
 8007d72:	f7ff fd13 	bl	800779c <_Balloc>
 8007d76:	4602      	mov	r2, r0
 8007d78:	b928      	cbnz	r0, 8007d86 <__mdiff+0x2e>
 8007d7a:	f240 2137 	movw	r1, #567	@ 0x237
 8007d7e:	4b3e      	ldr	r3, [pc, #248]	@ (8007e78 <__mdiff+0x120>)
 8007d80:	483e      	ldr	r0, [pc, #248]	@ (8007e7c <__mdiff+0x124>)
 8007d82:	f001 faf5 	bl	8009370 <__assert_func>
 8007d86:	2301      	movs	r3, #1
 8007d88:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007d8c:	4610      	mov	r0, r2
 8007d8e:	b003      	add	sp, #12
 8007d90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d94:	bfbc      	itt	lt
 8007d96:	464b      	movlt	r3, r9
 8007d98:	46a1      	movlt	r9, r4
 8007d9a:	4630      	mov	r0, r6
 8007d9c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007da0:	bfba      	itte	lt
 8007da2:	461c      	movlt	r4, r3
 8007da4:	2501      	movlt	r5, #1
 8007da6:	2500      	movge	r5, #0
 8007da8:	f7ff fcf8 	bl	800779c <_Balloc>
 8007dac:	4602      	mov	r2, r0
 8007dae:	b918      	cbnz	r0, 8007db8 <__mdiff+0x60>
 8007db0:	f240 2145 	movw	r1, #581	@ 0x245
 8007db4:	4b30      	ldr	r3, [pc, #192]	@ (8007e78 <__mdiff+0x120>)
 8007db6:	e7e3      	b.n	8007d80 <__mdiff+0x28>
 8007db8:	f100 0b14 	add.w	fp, r0, #20
 8007dbc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007dc0:	f109 0310 	add.w	r3, r9, #16
 8007dc4:	60c5      	str	r5, [r0, #12]
 8007dc6:	f04f 0c00 	mov.w	ip, #0
 8007dca:	f109 0514 	add.w	r5, r9, #20
 8007dce:	46d9      	mov	r9, fp
 8007dd0:	6926      	ldr	r6, [r4, #16]
 8007dd2:	f104 0e14 	add.w	lr, r4, #20
 8007dd6:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007dda:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007dde:	9301      	str	r3, [sp, #4]
 8007de0:	9b01      	ldr	r3, [sp, #4]
 8007de2:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007de6:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007dea:	b281      	uxth	r1, r0
 8007dec:	9301      	str	r3, [sp, #4]
 8007dee:	fa1f f38a 	uxth.w	r3, sl
 8007df2:	1a5b      	subs	r3, r3, r1
 8007df4:	0c00      	lsrs	r0, r0, #16
 8007df6:	4463      	add	r3, ip
 8007df8:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007dfc:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8007e00:	b29b      	uxth	r3, r3
 8007e02:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007e06:	4576      	cmp	r6, lr
 8007e08:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007e0c:	f849 3b04 	str.w	r3, [r9], #4
 8007e10:	d8e6      	bhi.n	8007de0 <__mdiff+0x88>
 8007e12:	1b33      	subs	r3, r6, r4
 8007e14:	3b15      	subs	r3, #21
 8007e16:	f023 0303 	bic.w	r3, r3, #3
 8007e1a:	3415      	adds	r4, #21
 8007e1c:	3304      	adds	r3, #4
 8007e1e:	42a6      	cmp	r6, r4
 8007e20:	bf38      	it	cc
 8007e22:	2304      	movcc	r3, #4
 8007e24:	441d      	add	r5, r3
 8007e26:	445b      	add	r3, fp
 8007e28:	461e      	mov	r6, r3
 8007e2a:	462c      	mov	r4, r5
 8007e2c:	4544      	cmp	r4, r8
 8007e2e:	d30e      	bcc.n	8007e4e <__mdiff+0xf6>
 8007e30:	f108 0103 	add.w	r1, r8, #3
 8007e34:	1b49      	subs	r1, r1, r5
 8007e36:	f021 0103 	bic.w	r1, r1, #3
 8007e3a:	3d03      	subs	r5, #3
 8007e3c:	45a8      	cmp	r8, r5
 8007e3e:	bf38      	it	cc
 8007e40:	2100      	movcc	r1, #0
 8007e42:	440b      	add	r3, r1
 8007e44:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007e48:	b199      	cbz	r1, 8007e72 <__mdiff+0x11a>
 8007e4a:	6117      	str	r7, [r2, #16]
 8007e4c:	e79e      	b.n	8007d8c <__mdiff+0x34>
 8007e4e:	46e6      	mov	lr, ip
 8007e50:	f854 1b04 	ldr.w	r1, [r4], #4
 8007e54:	fa1f fc81 	uxth.w	ip, r1
 8007e58:	44f4      	add	ip, lr
 8007e5a:	0c08      	lsrs	r0, r1, #16
 8007e5c:	4471      	add	r1, lr
 8007e5e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8007e62:	b289      	uxth	r1, r1
 8007e64:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007e68:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007e6c:	f846 1b04 	str.w	r1, [r6], #4
 8007e70:	e7dc      	b.n	8007e2c <__mdiff+0xd4>
 8007e72:	3f01      	subs	r7, #1
 8007e74:	e7e6      	b.n	8007e44 <__mdiff+0xec>
 8007e76:	bf00      	nop
 8007e78:	08009f5f 	.word	0x08009f5f
 8007e7c:	08009f70 	.word	0x08009f70

08007e80 <__ulp>:
 8007e80:	4b0e      	ldr	r3, [pc, #56]	@ (8007ebc <__ulp+0x3c>)
 8007e82:	400b      	ands	r3, r1
 8007e84:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	dc08      	bgt.n	8007e9e <__ulp+0x1e>
 8007e8c:	425b      	negs	r3, r3
 8007e8e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8007e92:	ea4f 5223 	mov.w	r2, r3, asr #20
 8007e96:	da04      	bge.n	8007ea2 <__ulp+0x22>
 8007e98:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8007e9c:	4113      	asrs	r3, r2
 8007e9e:	2200      	movs	r2, #0
 8007ea0:	e008      	b.n	8007eb4 <__ulp+0x34>
 8007ea2:	f1a2 0314 	sub.w	r3, r2, #20
 8007ea6:	2b1e      	cmp	r3, #30
 8007ea8:	bfd6      	itet	le
 8007eaa:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8007eae:	2201      	movgt	r2, #1
 8007eb0:	40da      	lsrle	r2, r3
 8007eb2:	2300      	movs	r3, #0
 8007eb4:	4619      	mov	r1, r3
 8007eb6:	4610      	mov	r0, r2
 8007eb8:	4770      	bx	lr
 8007eba:	bf00      	nop
 8007ebc:	7ff00000 	.word	0x7ff00000

08007ec0 <__b2d>:
 8007ec0:	6902      	ldr	r2, [r0, #16]
 8007ec2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ec4:	f100 0614 	add.w	r6, r0, #20
 8007ec8:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 8007ecc:	f852 4c04 	ldr.w	r4, [r2, #-4]
 8007ed0:	4f1e      	ldr	r7, [pc, #120]	@ (8007f4c <__b2d+0x8c>)
 8007ed2:	4620      	mov	r0, r4
 8007ed4:	f7ff fd54 	bl	8007980 <__hi0bits>
 8007ed8:	4603      	mov	r3, r0
 8007eda:	f1c0 0020 	rsb	r0, r0, #32
 8007ede:	2b0a      	cmp	r3, #10
 8007ee0:	f1a2 0504 	sub.w	r5, r2, #4
 8007ee4:	6008      	str	r0, [r1, #0]
 8007ee6:	dc12      	bgt.n	8007f0e <__b2d+0x4e>
 8007ee8:	42ae      	cmp	r6, r5
 8007eea:	bf2c      	ite	cs
 8007eec:	2200      	movcs	r2, #0
 8007eee:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8007ef2:	f1c3 0c0b 	rsb	ip, r3, #11
 8007ef6:	3315      	adds	r3, #21
 8007ef8:	fa24 fe0c 	lsr.w	lr, r4, ip
 8007efc:	fa04 f303 	lsl.w	r3, r4, r3
 8007f00:	fa22 f20c 	lsr.w	r2, r2, ip
 8007f04:	ea4e 0107 	orr.w	r1, lr, r7
 8007f08:	431a      	orrs	r2, r3
 8007f0a:	4610      	mov	r0, r2
 8007f0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007f0e:	42ae      	cmp	r6, r5
 8007f10:	bf36      	itet	cc
 8007f12:	f1a2 0508 	subcc.w	r5, r2, #8
 8007f16:	2200      	movcs	r2, #0
 8007f18:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8007f1c:	3b0b      	subs	r3, #11
 8007f1e:	d012      	beq.n	8007f46 <__b2d+0x86>
 8007f20:	f1c3 0720 	rsb	r7, r3, #32
 8007f24:	fa22 f107 	lsr.w	r1, r2, r7
 8007f28:	409c      	lsls	r4, r3
 8007f2a:	430c      	orrs	r4, r1
 8007f2c:	42b5      	cmp	r5, r6
 8007f2e:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 8007f32:	bf94      	ite	ls
 8007f34:	2400      	movls	r4, #0
 8007f36:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 8007f3a:	409a      	lsls	r2, r3
 8007f3c:	40fc      	lsrs	r4, r7
 8007f3e:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8007f42:	4322      	orrs	r2, r4
 8007f44:	e7e1      	b.n	8007f0a <__b2d+0x4a>
 8007f46:	ea44 0107 	orr.w	r1, r4, r7
 8007f4a:	e7de      	b.n	8007f0a <__b2d+0x4a>
 8007f4c:	3ff00000 	.word	0x3ff00000

08007f50 <__d2b>:
 8007f50:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8007f54:	2101      	movs	r1, #1
 8007f56:	4690      	mov	r8, r2
 8007f58:	4699      	mov	r9, r3
 8007f5a:	9e08      	ldr	r6, [sp, #32]
 8007f5c:	f7ff fc1e 	bl	800779c <_Balloc>
 8007f60:	4604      	mov	r4, r0
 8007f62:	b930      	cbnz	r0, 8007f72 <__d2b+0x22>
 8007f64:	4602      	mov	r2, r0
 8007f66:	f240 310f 	movw	r1, #783	@ 0x30f
 8007f6a:	4b23      	ldr	r3, [pc, #140]	@ (8007ff8 <__d2b+0xa8>)
 8007f6c:	4823      	ldr	r0, [pc, #140]	@ (8007ffc <__d2b+0xac>)
 8007f6e:	f001 f9ff 	bl	8009370 <__assert_func>
 8007f72:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007f76:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007f7a:	b10d      	cbz	r5, 8007f80 <__d2b+0x30>
 8007f7c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007f80:	9301      	str	r3, [sp, #4]
 8007f82:	f1b8 0300 	subs.w	r3, r8, #0
 8007f86:	d024      	beq.n	8007fd2 <__d2b+0x82>
 8007f88:	4668      	mov	r0, sp
 8007f8a:	9300      	str	r3, [sp, #0]
 8007f8c:	f7ff fd17 	bl	80079be <__lo0bits>
 8007f90:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007f94:	b1d8      	cbz	r0, 8007fce <__d2b+0x7e>
 8007f96:	f1c0 0320 	rsb	r3, r0, #32
 8007f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8007f9e:	430b      	orrs	r3, r1
 8007fa0:	40c2      	lsrs	r2, r0
 8007fa2:	6163      	str	r3, [r4, #20]
 8007fa4:	9201      	str	r2, [sp, #4]
 8007fa6:	9b01      	ldr	r3, [sp, #4]
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	bf0c      	ite	eq
 8007fac:	2201      	moveq	r2, #1
 8007fae:	2202      	movne	r2, #2
 8007fb0:	61a3      	str	r3, [r4, #24]
 8007fb2:	6122      	str	r2, [r4, #16]
 8007fb4:	b1ad      	cbz	r5, 8007fe2 <__d2b+0x92>
 8007fb6:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007fba:	4405      	add	r5, r0
 8007fbc:	6035      	str	r5, [r6, #0]
 8007fbe:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007fc2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007fc4:	6018      	str	r0, [r3, #0]
 8007fc6:	4620      	mov	r0, r4
 8007fc8:	b002      	add	sp, #8
 8007fca:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8007fce:	6161      	str	r1, [r4, #20]
 8007fd0:	e7e9      	b.n	8007fa6 <__d2b+0x56>
 8007fd2:	a801      	add	r0, sp, #4
 8007fd4:	f7ff fcf3 	bl	80079be <__lo0bits>
 8007fd8:	9b01      	ldr	r3, [sp, #4]
 8007fda:	2201      	movs	r2, #1
 8007fdc:	6163      	str	r3, [r4, #20]
 8007fde:	3020      	adds	r0, #32
 8007fe0:	e7e7      	b.n	8007fb2 <__d2b+0x62>
 8007fe2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8007fe6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007fea:	6030      	str	r0, [r6, #0]
 8007fec:	6918      	ldr	r0, [r3, #16]
 8007fee:	f7ff fcc7 	bl	8007980 <__hi0bits>
 8007ff2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007ff6:	e7e4      	b.n	8007fc2 <__d2b+0x72>
 8007ff8:	08009f5f 	.word	0x08009f5f
 8007ffc:	08009f70 	.word	0x08009f70

08008000 <__ratio>:
 8008000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008004:	b085      	sub	sp, #20
 8008006:	e9cd 1000 	strd	r1, r0, [sp]
 800800a:	a902      	add	r1, sp, #8
 800800c:	f7ff ff58 	bl	8007ec0 <__b2d>
 8008010:	468b      	mov	fp, r1
 8008012:	4606      	mov	r6, r0
 8008014:	460f      	mov	r7, r1
 8008016:	9800      	ldr	r0, [sp, #0]
 8008018:	a903      	add	r1, sp, #12
 800801a:	f7ff ff51 	bl	8007ec0 <__b2d>
 800801e:	460d      	mov	r5, r1
 8008020:	9b01      	ldr	r3, [sp, #4]
 8008022:	4689      	mov	r9, r1
 8008024:	6919      	ldr	r1, [r3, #16]
 8008026:	9b00      	ldr	r3, [sp, #0]
 8008028:	4604      	mov	r4, r0
 800802a:	691b      	ldr	r3, [r3, #16]
 800802c:	4630      	mov	r0, r6
 800802e:	1ac9      	subs	r1, r1, r3
 8008030:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8008034:	1a9b      	subs	r3, r3, r2
 8008036:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800803a:	2b00      	cmp	r3, #0
 800803c:	bfcd      	iteet	gt
 800803e:	463a      	movgt	r2, r7
 8008040:	462a      	movle	r2, r5
 8008042:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008046:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800804a:	bfd8      	it	le
 800804c:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8008050:	464b      	mov	r3, r9
 8008052:	4622      	mov	r2, r4
 8008054:	4659      	mov	r1, fp
 8008056:	f7f8 fb69 	bl	800072c <__aeabi_ddiv>
 800805a:	b005      	add	sp, #20
 800805c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008060 <__copybits>:
 8008060:	3901      	subs	r1, #1
 8008062:	b570      	push	{r4, r5, r6, lr}
 8008064:	1149      	asrs	r1, r1, #5
 8008066:	6914      	ldr	r4, [r2, #16]
 8008068:	3101      	adds	r1, #1
 800806a:	f102 0314 	add.w	r3, r2, #20
 800806e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008072:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008076:	1f05      	subs	r5, r0, #4
 8008078:	42a3      	cmp	r3, r4
 800807a:	d30c      	bcc.n	8008096 <__copybits+0x36>
 800807c:	1aa3      	subs	r3, r4, r2
 800807e:	3b11      	subs	r3, #17
 8008080:	f023 0303 	bic.w	r3, r3, #3
 8008084:	3211      	adds	r2, #17
 8008086:	42a2      	cmp	r2, r4
 8008088:	bf88      	it	hi
 800808a:	2300      	movhi	r3, #0
 800808c:	4418      	add	r0, r3
 800808e:	2300      	movs	r3, #0
 8008090:	4288      	cmp	r0, r1
 8008092:	d305      	bcc.n	80080a0 <__copybits+0x40>
 8008094:	bd70      	pop	{r4, r5, r6, pc}
 8008096:	f853 6b04 	ldr.w	r6, [r3], #4
 800809a:	f845 6f04 	str.w	r6, [r5, #4]!
 800809e:	e7eb      	b.n	8008078 <__copybits+0x18>
 80080a0:	f840 3b04 	str.w	r3, [r0], #4
 80080a4:	e7f4      	b.n	8008090 <__copybits+0x30>

080080a6 <__any_on>:
 80080a6:	f100 0214 	add.w	r2, r0, #20
 80080aa:	6900      	ldr	r0, [r0, #16]
 80080ac:	114b      	asrs	r3, r1, #5
 80080ae:	4298      	cmp	r0, r3
 80080b0:	b510      	push	{r4, lr}
 80080b2:	db11      	blt.n	80080d8 <__any_on+0x32>
 80080b4:	dd0a      	ble.n	80080cc <__any_on+0x26>
 80080b6:	f011 011f 	ands.w	r1, r1, #31
 80080ba:	d007      	beq.n	80080cc <__any_on+0x26>
 80080bc:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80080c0:	fa24 f001 	lsr.w	r0, r4, r1
 80080c4:	fa00 f101 	lsl.w	r1, r0, r1
 80080c8:	428c      	cmp	r4, r1
 80080ca:	d10b      	bne.n	80080e4 <__any_on+0x3e>
 80080cc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80080d0:	4293      	cmp	r3, r2
 80080d2:	d803      	bhi.n	80080dc <__any_on+0x36>
 80080d4:	2000      	movs	r0, #0
 80080d6:	bd10      	pop	{r4, pc}
 80080d8:	4603      	mov	r3, r0
 80080da:	e7f7      	b.n	80080cc <__any_on+0x26>
 80080dc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80080e0:	2900      	cmp	r1, #0
 80080e2:	d0f5      	beq.n	80080d0 <__any_on+0x2a>
 80080e4:	2001      	movs	r0, #1
 80080e6:	e7f6      	b.n	80080d6 <__any_on+0x30>

080080e8 <sulp>:
 80080e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80080ec:	460f      	mov	r7, r1
 80080ee:	4690      	mov	r8, r2
 80080f0:	f7ff fec6 	bl	8007e80 <__ulp>
 80080f4:	4604      	mov	r4, r0
 80080f6:	460d      	mov	r5, r1
 80080f8:	f1b8 0f00 	cmp.w	r8, #0
 80080fc:	d011      	beq.n	8008122 <sulp+0x3a>
 80080fe:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8008102:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8008106:	2b00      	cmp	r3, #0
 8008108:	dd0b      	ble.n	8008122 <sulp+0x3a>
 800810a:	2400      	movs	r4, #0
 800810c:	051b      	lsls	r3, r3, #20
 800810e:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8008112:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8008116:	4622      	mov	r2, r4
 8008118:	462b      	mov	r3, r5
 800811a:	f7f8 f9dd 	bl	80004d8 <__aeabi_dmul>
 800811e:	4604      	mov	r4, r0
 8008120:	460d      	mov	r5, r1
 8008122:	4620      	mov	r0, r4
 8008124:	4629      	mov	r1, r5
 8008126:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800812a:	0000      	movs	r0, r0
 800812c:	0000      	movs	r0, r0
	...

08008130 <_strtod_l>:
 8008130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008134:	b09f      	sub	sp, #124	@ 0x7c
 8008136:	9217      	str	r2, [sp, #92]	@ 0x5c
 8008138:	2200      	movs	r2, #0
 800813a:	460c      	mov	r4, r1
 800813c:	921a      	str	r2, [sp, #104]	@ 0x68
 800813e:	f04f 0a00 	mov.w	sl, #0
 8008142:	f04f 0b00 	mov.w	fp, #0
 8008146:	460a      	mov	r2, r1
 8008148:	9005      	str	r0, [sp, #20]
 800814a:	9219      	str	r2, [sp, #100]	@ 0x64
 800814c:	7811      	ldrb	r1, [r2, #0]
 800814e:	292b      	cmp	r1, #43	@ 0x2b
 8008150:	d048      	beq.n	80081e4 <_strtod_l+0xb4>
 8008152:	d836      	bhi.n	80081c2 <_strtod_l+0x92>
 8008154:	290d      	cmp	r1, #13
 8008156:	d830      	bhi.n	80081ba <_strtod_l+0x8a>
 8008158:	2908      	cmp	r1, #8
 800815a:	d830      	bhi.n	80081be <_strtod_l+0x8e>
 800815c:	2900      	cmp	r1, #0
 800815e:	d039      	beq.n	80081d4 <_strtod_l+0xa4>
 8008160:	2200      	movs	r2, #0
 8008162:	920b      	str	r2, [sp, #44]	@ 0x2c
 8008164:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8008166:	782a      	ldrb	r2, [r5, #0]
 8008168:	2a30      	cmp	r2, #48	@ 0x30
 800816a:	f040 80b1 	bne.w	80082d0 <_strtod_l+0x1a0>
 800816e:	786a      	ldrb	r2, [r5, #1]
 8008170:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008174:	2a58      	cmp	r2, #88	@ 0x58
 8008176:	d16c      	bne.n	8008252 <_strtod_l+0x122>
 8008178:	9302      	str	r3, [sp, #8]
 800817a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800817c:	4a8e      	ldr	r2, [pc, #568]	@ (80083b8 <_strtod_l+0x288>)
 800817e:	9301      	str	r3, [sp, #4]
 8008180:	ab1a      	add	r3, sp, #104	@ 0x68
 8008182:	9300      	str	r3, [sp, #0]
 8008184:	9805      	ldr	r0, [sp, #20]
 8008186:	ab1b      	add	r3, sp, #108	@ 0x6c
 8008188:	a919      	add	r1, sp, #100	@ 0x64
 800818a:	f001 f98b 	bl	80094a4 <__gethex>
 800818e:	f010 060f 	ands.w	r6, r0, #15
 8008192:	4604      	mov	r4, r0
 8008194:	d005      	beq.n	80081a2 <_strtod_l+0x72>
 8008196:	2e06      	cmp	r6, #6
 8008198:	d126      	bne.n	80081e8 <_strtod_l+0xb8>
 800819a:	2300      	movs	r3, #0
 800819c:	3501      	adds	r5, #1
 800819e:	9519      	str	r5, [sp, #100]	@ 0x64
 80081a0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80081a2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	f040 8584 	bne.w	8008cb2 <_strtod_l+0xb82>
 80081aa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80081ac:	b1bb      	cbz	r3, 80081de <_strtod_l+0xae>
 80081ae:	4650      	mov	r0, sl
 80081b0:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 80081b4:	b01f      	add	sp, #124	@ 0x7c
 80081b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081ba:	2920      	cmp	r1, #32
 80081bc:	d1d0      	bne.n	8008160 <_strtod_l+0x30>
 80081be:	3201      	adds	r2, #1
 80081c0:	e7c3      	b.n	800814a <_strtod_l+0x1a>
 80081c2:	292d      	cmp	r1, #45	@ 0x2d
 80081c4:	d1cc      	bne.n	8008160 <_strtod_l+0x30>
 80081c6:	2101      	movs	r1, #1
 80081c8:	910b      	str	r1, [sp, #44]	@ 0x2c
 80081ca:	1c51      	adds	r1, r2, #1
 80081cc:	9119      	str	r1, [sp, #100]	@ 0x64
 80081ce:	7852      	ldrb	r2, [r2, #1]
 80081d0:	2a00      	cmp	r2, #0
 80081d2:	d1c7      	bne.n	8008164 <_strtod_l+0x34>
 80081d4:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80081d6:	9419      	str	r4, [sp, #100]	@ 0x64
 80081d8:	2b00      	cmp	r3, #0
 80081da:	f040 8568 	bne.w	8008cae <_strtod_l+0xb7e>
 80081de:	4650      	mov	r0, sl
 80081e0:	4659      	mov	r1, fp
 80081e2:	e7e7      	b.n	80081b4 <_strtod_l+0x84>
 80081e4:	2100      	movs	r1, #0
 80081e6:	e7ef      	b.n	80081c8 <_strtod_l+0x98>
 80081e8:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80081ea:	b13a      	cbz	r2, 80081fc <_strtod_l+0xcc>
 80081ec:	2135      	movs	r1, #53	@ 0x35
 80081ee:	a81c      	add	r0, sp, #112	@ 0x70
 80081f0:	f7ff ff36 	bl	8008060 <__copybits>
 80081f4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80081f6:	9805      	ldr	r0, [sp, #20]
 80081f8:	f7ff fb10 	bl	800781c <_Bfree>
 80081fc:	3e01      	subs	r6, #1
 80081fe:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8008200:	2e04      	cmp	r6, #4
 8008202:	d806      	bhi.n	8008212 <_strtod_l+0xe2>
 8008204:	e8df f006 	tbb	[pc, r6]
 8008208:	201d0314 	.word	0x201d0314
 800820c:	14          	.byte	0x14
 800820d:	00          	.byte	0x00
 800820e:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8008212:	05e1      	lsls	r1, r4, #23
 8008214:	bf48      	it	mi
 8008216:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800821a:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800821e:	0d1b      	lsrs	r3, r3, #20
 8008220:	051b      	lsls	r3, r3, #20
 8008222:	2b00      	cmp	r3, #0
 8008224:	d1bd      	bne.n	80081a2 <_strtod_l+0x72>
 8008226:	f7fe fb1d 	bl	8006864 <__errno>
 800822a:	2322      	movs	r3, #34	@ 0x22
 800822c:	6003      	str	r3, [r0, #0]
 800822e:	e7b8      	b.n	80081a2 <_strtod_l+0x72>
 8008230:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8008234:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8008238:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800823c:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8008240:	e7e7      	b.n	8008212 <_strtod_l+0xe2>
 8008242:	f8df b178 	ldr.w	fp, [pc, #376]	@ 80083bc <_strtod_l+0x28c>
 8008246:	e7e4      	b.n	8008212 <_strtod_l+0xe2>
 8008248:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800824c:	f04f 3aff 	mov.w	sl, #4294967295
 8008250:	e7df      	b.n	8008212 <_strtod_l+0xe2>
 8008252:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008254:	1c5a      	adds	r2, r3, #1
 8008256:	9219      	str	r2, [sp, #100]	@ 0x64
 8008258:	785b      	ldrb	r3, [r3, #1]
 800825a:	2b30      	cmp	r3, #48	@ 0x30
 800825c:	d0f9      	beq.n	8008252 <_strtod_l+0x122>
 800825e:	2b00      	cmp	r3, #0
 8008260:	d09f      	beq.n	80081a2 <_strtod_l+0x72>
 8008262:	2301      	movs	r3, #1
 8008264:	9309      	str	r3, [sp, #36]	@ 0x24
 8008266:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008268:	220a      	movs	r2, #10
 800826a:	930c      	str	r3, [sp, #48]	@ 0x30
 800826c:	2300      	movs	r3, #0
 800826e:	461f      	mov	r7, r3
 8008270:	9308      	str	r3, [sp, #32]
 8008272:	930a      	str	r3, [sp, #40]	@ 0x28
 8008274:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8008276:	7805      	ldrb	r5, [r0, #0]
 8008278:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800827c:	b2d9      	uxtb	r1, r3
 800827e:	2909      	cmp	r1, #9
 8008280:	d928      	bls.n	80082d4 <_strtod_l+0x1a4>
 8008282:	2201      	movs	r2, #1
 8008284:	494e      	ldr	r1, [pc, #312]	@ (80083c0 <_strtod_l+0x290>)
 8008286:	f001 f828 	bl	80092da <strncmp>
 800828a:	2800      	cmp	r0, #0
 800828c:	d032      	beq.n	80082f4 <_strtod_l+0x1c4>
 800828e:	2000      	movs	r0, #0
 8008290:	462a      	mov	r2, r5
 8008292:	4681      	mov	r9, r0
 8008294:	463d      	mov	r5, r7
 8008296:	4603      	mov	r3, r0
 8008298:	2a65      	cmp	r2, #101	@ 0x65
 800829a:	d001      	beq.n	80082a0 <_strtod_l+0x170>
 800829c:	2a45      	cmp	r2, #69	@ 0x45
 800829e:	d114      	bne.n	80082ca <_strtod_l+0x19a>
 80082a0:	b91d      	cbnz	r5, 80082aa <_strtod_l+0x17a>
 80082a2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80082a4:	4302      	orrs	r2, r0
 80082a6:	d095      	beq.n	80081d4 <_strtod_l+0xa4>
 80082a8:	2500      	movs	r5, #0
 80082aa:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80082ac:	1c62      	adds	r2, r4, #1
 80082ae:	9219      	str	r2, [sp, #100]	@ 0x64
 80082b0:	7862      	ldrb	r2, [r4, #1]
 80082b2:	2a2b      	cmp	r2, #43	@ 0x2b
 80082b4:	d077      	beq.n	80083a6 <_strtod_l+0x276>
 80082b6:	2a2d      	cmp	r2, #45	@ 0x2d
 80082b8:	d07b      	beq.n	80083b2 <_strtod_l+0x282>
 80082ba:	f04f 0c00 	mov.w	ip, #0
 80082be:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80082c2:	2909      	cmp	r1, #9
 80082c4:	f240 8082 	bls.w	80083cc <_strtod_l+0x29c>
 80082c8:	9419      	str	r4, [sp, #100]	@ 0x64
 80082ca:	f04f 0800 	mov.w	r8, #0
 80082ce:	e0a2      	b.n	8008416 <_strtod_l+0x2e6>
 80082d0:	2300      	movs	r3, #0
 80082d2:	e7c7      	b.n	8008264 <_strtod_l+0x134>
 80082d4:	2f08      	cmp	r7, #8
 80082d6:	bfd5      	itete	le
 80082d8:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 80082da:	9908      	ldrgt	r1, [sp, #32]
 80082dc:	fb02 3301 	mlale	r3, r2, r1, r3
 80082e0:	fb02 3301 	mlagt	r3, r2, r1, r3
 80082e4:	f100 0001 	add.w	r0, r0, #1
 80082e8:	bfd4      	ite	le
 80082ea:	930a      	strle	r3, [sp, #40]	@ 0x28
 80082ec:	9308      	strgt	r3, [sp, #32]
 80082ee:	3701      	adds	r7, #1
 80082f0:	9019      	str	r0, [sp, #100]	@ 0x64
 80082f2:	e7bf      	b.n	8008274 <_strtod_l+0x144>
 80082f4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80082f6:	1c5a      	adds	r2, r3, #1
 80082f8:	9219      	str	r2, [sp, #100]	@ 0x64
 80082fa:	785a      	ldrb	r2, [r3, #1]
 80082fc:	b37f      	cbz	r7, 800835e <_strtod_l+0x22e>
 80082fe:	4681      	mov	r9, r0
 8008300:	463d      	mov	r5, r7
 8008302:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8008306:	2b09      	cmp	r3, #9
 8008308:	d912      	bls.n	8008330 <_strtod_l+0x200>
 800830a:	2301      	movs	r3, #1
 800830c:	e7c4      	b.n	8008298 <_strtod_l+0x168>
 800830e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008310:	3001      	adds	r0, #1
 8008312:	1c5a      	adds	r2, r3, #1
 8008314:	9219      	str	r2, [sp, #100]	@ 0x64
 8008316:	785a      	ldrb	r2, [r3, #1]
 8008318:	2a30      	cmp	r2, #48	@ 0x30
 800831a:	d0f8      	beq.n	800830e <_strtod_l+0x1de>
 800831c:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8008320:	2b08      	cmp	r3, #8
 8008322:	f200 84cb 	bhi.w	8008cbc <_strtod_l+0xb8c>
 8008326:	4681      	mov	r9, r0
 8008328:	2000      	movs	r0, #0
 800832a:	4605      	mov	r5, r0
 800832c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800832e:	930c      	str	r3, [sp, #48]	@ 0x30
 8008330:	3a30      	subs	r2, #48	@ 0x30
 8008332:	f100 0301 	add.w	r3, r0, #1
 8008336:	d02a      	beq.n	800838e <_strtod_l+0x25e>
 8008338:	4499      	add	r9, r3
 800833a:	210a      	movs	r1, #10
 800833c:	462b      	mov	r3, r5
 800833e:	eb00 0c05 	add.w	ip, r0, r5
 8008342:	4563      	cmp	r3, ip
 8008344:	d10d      	bne.n	8008362 <_strtod_l+0x232>
 8008346:	1c69      	adds	r1, r5, #1
 8008348:	4401      	add	r1, r0
 800834a:	4428      	add	r0, r5
 800834c:	2808      	cmp	r0, #8
 800834e:	dc16      	bgt.n	800837e <_strtod_l+0x24e>
 8008350:	230a      	movs	r3, #10
 8008352:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008354:	fb03 2300 	mla	r3, r3, r0, r2
 8008358:	930a      	str	r3, [sp, #40]	@ 0x28
 800835a:	2300      	movs	r3, #0
 800835c:	e018      	b.n	8008390 <_strtod_l+0x260>
 800835e:	4638      	mov	r0, r7
 8008360:	e7da      	b.n	8008318 <_strtod_l+0x1e8>
 8008362:	2b08      	cmp	r3, #8
 8008364:	f103 0301 	add.w	r3, r3, #1
 8008368:	dc03      	bgt.n	8008372 <_strtod_l+0x242>
 800836a:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800836c:	434e      	muls	r6, r1
 800836e:	960a      	str	r6, [sp, #40]	@ 0x28
 8008370:	e7e7      	b.n	8008342 <_strtod_l+0x212>
 8008372:	2b10      	cmp	r3, #16
 8008374:	bfde      	ittt	le
 8008376:	9e08      	ldrle	r6, [sp, #32]
 8008378:	434e      	mulle	r6, r1
 800837a:	9608      	strle	r6, [sp, #32]
 800837c:	e7e1      	b.n	8008342 <_strtod_l+0x212>
 800837e:	280f      	cmp	r0, #15
 8008380:	dceb      	bgt.n	800835a <_strtod_l+0x22a>
 8008382:	230a      	movs	r3, #10
 8008384:	9808      	ldr	r0, [sp, #32]
 8008386:	fb03 2300 	mla	r3, r3, r0, r2
 800838a:	9308      	str	r3, [sp, #32]
 800838c:	e7e5      	b.n	800835a <_strtod_l+0x22a>
 800838e:	4629      	mov	r1, r5
 8008390:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008392:	460d      	mov	r5, r1
 8008394:	1c50      	adds	r0, r2, #1
 8008396:	9019      	str	r0, [sp, #100]	@ 0x64
 8008398:	7852      	ldrb	r2, [r2, #1]
 800839a:	4618      	mov	r0, r3
 800839c:	e7b1      	b.n	8008302 <_strtod_l+0x1d2>
 800839e:	f04f 0900 	mov.w	r9, #0
 80083a2:	2301      	movs	r3, #1
 80083a4:	e77d      	b.n	80082a2 <_strtod_l+0x172>
 80083a6:	f04f 0c00 	mov.w	ip, #0
 80083aa:	1ca2      	adds	r2, r4, #2
 80083ac:	9219      	str	r2, [sp, #100]	@ 0x64
 80083ae:	78a2      	ldrb	r2, [r4, #2]
 80083b0:	e785      	b.n	80082be <_strtod_l+0x18e>
 80083b2:	f04f 0c01 	mov.w	ip, #1
 80083b6:	e7f8      	b.n	80083aa <_strtod_l+0x27a>
 80083b8:	0800a0e0 	.word	0x0800a0e0
 80083bc:	7ff00000 	.word	0x7ff00000
 80083c0:	0800a0c8 	.word	0x0800a0c8
 80083c4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80083c6:	1c51      	adds	r1, r2, #1
 80083c8:	9119      	str	r1, [sp, #100]	@ 0x64
 80083ca:	7852      	ldrb	r2, [r2, #1]
 80083cc:	2a30      	cmp	r2, #48	@ 0x30
 80083ce:	d0f9      	beq.n	80083c4 <_strtod_l+0x294>
 80083d0:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 80083d4:	2908      	cmp	r1, #8
 80083d6:	f63f af78 	bhi.w	80082ca <_strtod_l+0x19a>
 80083da:	f04f 080a 	mov.w	r8, #10
 80083de:	3a30      	subs	r2, #48	@ 0x30
 80083e0:	920e      	str	r2, [sp, #56]	@ 0x38
 80083e2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80083e4:	920f      	str	r2, [sp, #60]	@ 0x3c
 80083e6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80083e8:	1c56      	adds	r6, r2, #1
 80083ea:	9619      	str	r6, [sp, #100]	@ 0x64
 80083ec:	7852      	ldrb	r2, [r2, #1]
 80083ee:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 80083f2:	f1be 0f09 	cmp.w	lr, #9
 80083f6:	d939      	bls.n	800846c <_strtod_l+0x33c>
 80083f8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80083fa:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 80083fe:	1a76      	subs	r6, r6, r1
 8008400:	2e08      	cmp	r6, #8
 8008402:	dc03      	bgt.n	800840c <_strtod_l+0x2dc>
 8008404:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8008406:	4588      	cmp	r8, r1
 8008408:	bfa8      	it	ge
 800840a:	4688      	movge	r8, r1
 800840c:	f1bc 0f00 	cmp.w	ip, #0
 8008410:	d001      	beq.n	8008416 <_strtod_l+0x2e6>
 8008412:	f1c8 0800 	rsb	r8, r8, #0
 8008416:	2d00      	cmp	r5, #0
 8008418:	d14e      	bne.n	80084b8 <_strtod_l+0x388>
 800841a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800841c:	4308      	orrs	r0, r1
 800841e:	f47f aec0 	bne.w	80081a2 <_strtod_l+0x72>
 8008422:	2b00      	cmp	r3, #0
 8008424:	f47f aed6 	bne.w	80081d4 <_strtod_l+0xa4>
 8008428:	2a69      	cmp	r2, #105	@ 0x69
 800842a:	d028      	beq.n	800847e <_strtod_l+0x34e>
 800842c:	dc25      	bgt.n	800847a <_strtod_l+0x34a>
 800842e:	2a49      	cmp	r2, #73	@ 0x49
 8008430:	d025      	beq.n	800847e <_strtod_l+0x34e>
 8008432:	2a4e      	cmp	r2, #78	@ 0x4e
 8008434:	f47f aece 	bne.w	80081d4 <_strtod_l+0xa4>
 8008438:	499a      	ldr	r1, [pc, #616]	@ (80086a4 <_strtod_l+0x574>)
 800843a:	a819      	add	r0, sp, #100	@ 0x64
 800843c:	f001 fa54 	bl	80098e8 <__match>
 8008440:	2800      	cmp	r0, #0
 8008442:	f43f aec7 	beq.w	80081d4 <_strtod_l+0xa4>
 8008446:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008448:	781b      	ldrb	r3, [r3, #0]
 800844a:	2b28      	cmp	r3, #40	@ 0x28
 800844c:	d12e      	bne.n	80084ac <_strtod_l+0x37c>
 800844e:	4996      	ldr	r1, [pc, #600]	@ (80086a8 <_strtod_l+0x578>)
 8008450:	aa1c      	add	r2, sp, #112	@ 0x70
 8008452:	a819      	add	r0, sp, #100	@ 0x64
 8008454:	f001 fa5c 	bl	8009910 <__hexnan>
 8008458:	2805      	cmp	r0, #5
 800845a:	d127      	bne.n	80084ac <_strtod_l+0x37c>
 800845c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800845e:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8008462:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8008466:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800846a:	e69a      	b.n	80081a2 <_strtod_l+0x72>
 800846c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800846e:	fb08 2101 	mla	r1, r8, r1, r2
 8008472:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8008476:	920e      	str	r2, [sp, #56]	@ 0x38
 8008478:	e7b5      	b.n	80083e6 <_strtod_l+0x2b6>
 800847a:	2a6e      	cmp	r2, #110	@ 0x6e
 800847c:	e7da      	b.n	8008434 <_strtod_l+0x304>
 800847e:	498b      	ldr	r1, [pc, #556]	@ (80086ac <_strtod_l+0x57c>)
 8008480:	a819      	add	r0, sp, #100	@ 0x64
 8008482:	f001 fa31 	bl	80098e8 <__match>
 8008486:	2800      	cmp	r0, #0
 8008488:	f43f aea4 	beq.w	80081d4 <_strtod_l+0xa4>
 800848c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800848e:	4988      	ldr	r1, [pc, #544]	@ (80086b0 <_strtod_l+0x580>)
 8008490:	3b01      	subs	r3, #1
 8008492:	a819      	add	r0, sp, #100	@ 0x64
 8008494:	9319      	str	r3, [sp, #100]	@ 0x64
 8008496:	f001 fa27 	bl	80098e8 <__match>
 800849a:	b910      	cbnz	r0, 80084a2 <_strtod_l+0x372>
 800849c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800849e:	3301      	adds	r3, #1
 80084a0:	9319      	str	r3, [sp, #100]	@ 0x64
 80084a2:	f04f 0a00 	mov.w	sl, #0
 80084a6:	f8df b20c 	ldr.w	fp, [pc, #524]	@ 80086b4 <_strtod_l+0x584>
 80084aa:	e67a      	b.n	80081a2 <_strtod_l+0x72>
 80084ac:	4882      	ldr	r0, [pc, #520]	@ (80086b8 <_strtod_l+0x588>)
 80084ae:	f000 ff59 	bl	8009364 <nan>
 80084b2:	4682      	mov	sl, r0
 80084b4:	468b      	mov	fp, r1
 80084b6:	e674      	b.n	80081a2 <_strtod_l+0x72>
 80084b8:	eba8 0309 	sub.w	r3, r8, r9
 80084bc:	2f00      	cmp	r7, #0
 80084be:	bf08      	it	eq
 80084c0:	462f      	moveq	r7, r5
 80084c2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80084c4:	2d10      	cmp	r5, #16
 80084c6:	462c      	mov	r4, r5
 80084c8:	9309      	str	r3, [sp, #36]	@ 0x24
 80084ca:	bfa8      	it	ge
 80084cc:	2410      	movge	r4, #16
 80084ce:	f7f7 ff89 	bl	80003e4 <__aeabi_ui2d>
 80084d2:	2d09      	cmp	r5, #9
 80084d4:	4682      	mov	sl, r0
 80084d6:	468b      	mov	fp, r1
 80084d8:	dc11      	bgt.n	80084fe <_strtod_l+0x3ce>
 80084da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80084dc:	2b00      	cmp	r3, #0
 80084de:	f43f ae60 	beq.w	80081a2 <_strtod_l+0x72>
 80084e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80084e4:	dd76      	ble.n	80085d4 <_strtod_l+0x4a4>
 80084e6:	2b16      	cmp	r3, #22
 80084e8:	dc5d      	bgt.n	80085a6 <_strtod_l+0x476>
 80084ea:	4974      	ldr	r1, [pc, #464]	@ (80086bc <_strtod_l+0x58c>)
 80084ec:	4652      	mov	r2, sl
 80084ee:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80084f2:	465b      	mov	r3, fp
 80084f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80084f8:	f7f7 ffee 	bl	80004d8 <__aeabi_dmul>
 80084fc:	e7d9      	b.n	80084b2 <_strtod_l+0x382>
 80084fe:	4b6f      	ldr	r3, [pc, #444]	@ (80086bc <_strtod_l+0x58c>)
 8008500:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008504:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8008508:	f7f7 ffe6 	bl	80004d8 <__aeabi_dmul>
 800850c:	4682      	mov	sl, r0
 800850e:	9808      	ldr	r0, [sp, #32]
 8008510:	468b      	mov	fp, r1
 8008512:	f7f7 ff67 	bl	80003e4 <__aeabi_ui2d>
 8008516:	4602      	mov	r2, r0
 8008518:	460b      	mov	r3, r1
 800851a:	4650      	mov	r0, sl
 800851c:	4659      	mov	r1, fp
 800851e:	f7f7 fe25 	bl	800016c <__adddf3>
 8008522:	2d0f      	cmp	r5, #15
 8008524:	4682      	mov	sl, r0
 8008526:	468b      	mov	fp, r1
 8008528:	ddd7      	ble.n	80084da <_strtod_l+0x3aa>
 800852a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800852c:	1b2c      	subs	r4, r5, r4
 800852e:	441c      	add	r4, r3
 8008530:	2c00      	cmp	r4, #0
 8008532:	f340 8096 	ble.w	8008662 <_strtod_l+0x532>
 8008536:	f014 030f 	ands.w	r3, r4, #15
 800853a:	d00a      	beq.n	8008552 <_strtod_l+0x422>
 800853c:	495f      	ldr	r1, [pc, #380]	@ (80086bc <_strtod_l+0x58c>)
 800853e:	4652      	mov	r2, sl
 8008540:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008544:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008548:	465b      	mov	r3, fp
 800854a:	f7f7 ffc5 	bl	80004d8 <__aeabi_dmul>
 800854e:	4682      	mov	sl, r0
 8008550:	468b      	mov	fp, r1
 8008552:	f034 040f 	bics.w	r4, r4, #15
 8008556:	d073      	beq.n	8008640 <_strtod_l+0x510>
 8008558:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800855c:	dd48      	ble.n	80085f0 <_strtod_l+0x4c0>
 800855e:	2400      	movs	r4, #0
 8008560:	46a0      	mov	r8, r4
 8008562:	46a1      	mov	r9, r4
 8008564:	940a      	str	r4, [sp, #40]	@ 0x28
 8008566:	2322      	movs	r3, #34	@ 0x22
 8008568:	f04f 0a00 	mov.w	sl, #0
 800856c:	9a05      	ldr	r2, [sp, #20]
 800856e:	f8df b144 	ldr.w	fp, [pc, #324]	@ 80086b4 <_strtod_l+0x584>
 8008572:	6013      	str	r3, [r2, #0]
 8008574:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008576:	2b00      	cmp	r3, #0
 8008578:	f43f ae13 	beq.w	80081a2 <_strtod_l+0x72>
 800857c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800857e:	9805      	ldr	r0, [sp, #20]
 8008580:	f7ff f94c 	bl	800781c <_Bfree>
 8008584:	4649      	mov	r1, r9
 8008586:	9805      	ldr	r0, [sp, #20]
 8008588:	f7ff f948 	bl	800781c <_Bfree>
 800858c:	4641      	mov	r1, r8
 800858e:	9805      	ldr	r0, [sp, #20]
 8008590:	f7ff f944 	bl	800781c <_Bfree>
 8008594:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008596:	9805      	ldr	r0, [sp, #20]
 8008598:	f7ff f940 	bl	800781c <_Bfree>
 800859c:	4621      	mov	r1, r4
 800859e:	9805      	ldr	r0, [sp, #20]
 80085a0:	f7ff f93c 	bl	800781c <_Bfree>
 80085a4:	e5fd      	b.n	80081a2 <_strtod_l+0x72>
 80085a6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80085a8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 80085ac:	4293      	cmp	r3, r2
 80085ae:	dbbc      	blt.n	800852a <_strtod_l+0x3fa>
 80085b0:	4c42      	ldr	r4, [pc, #264]	@ (80086bc <_strtod_l+0x58c>)
 80085b2:	f1c5 050f 	rsb	r5, r5, #15
 80085b6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80085ba:	4652      	mov	r2, sl
 80085bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80085c0:	465b      	mov	r3, fp
 80085c2:	f7f7 ff89 	bl	80004d8 <__aeabi_dmul>
 80085c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80085c8:	1b5d      	subs	r5, r3, r5
 80085ca:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80085ce:	e9d4 2300 	ldrd	r2, r3, [r4]
 80085d2:	e791      	b.n	80084f8 <_strtod_l+0x3c8>
 80085d4:	3316      	adds	r3, #22
 80085d6:	dba8      	blt.n	800852a <_strtod_l+0x3fa>
 80085d8:	4b38      	ldr	r3, [pc, #224]	@ (80086bc <_strtod_l+0x58c>)
 80085da:	eba9 0808 	sub.w	r8, r9, r8
 80085de:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80085e2:	4650      	mov	r0, sl
 80085e4:	e9d8 2300 	ldrd	r2, r3, [r8]
 80085e8:	4659      	mov	r1, fp
 80085ea:	f7f8 f89f 	bl	800072c <__aeabi_ddiv>
 80085ee:	e760      	b.n	80084b2 <_strtod_l+0x382>
 80085f0:	4b33      	ldr	r3, [pc, #204]	@ (80086c0 <_strtod_l+0x590>)
 80085f2:	4650      	mov	r0, sl
 80085f4:	9308      	str	r3, [sp, #32]
 80085f6:	2300      	movs	r3, #0
 80085f8:	4659      	mov	r1, fp
 80085fa:	461e      	mov	r6, r3
 80085fc:	1124      	asrs	r4, r4, #4
 80085fe:	2c01      	cmp	r4, #1
 8008600:	dc21      	bgt.n	8008646 <_strtod_l+0x516>
 8008602:	b10b      	cbz	r3, 8008608 <_strtod_l+0x4d8>
 8008604:	4682      	mov	sl, r0
 8008606:	468b      	mov	fp, r1
 8008608:	492d      	ldr	r1, [pc, #180]	@ (80086c0 <_strtod_l+0x590>)
 800860a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800860e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8008612:	4652      	mov	r2, sl
 8008614:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008618:	465b      	mov	r3, fp
 800861a:	f7f7 ff5d 	bl	80004d8 <__aeabi_dmul>
 800861e:	4b25      	ldr	r3, [pc, #148]	@ (80086b4 <_strtod_l+0x584>)
 8008620:	460a      	mov	r2, r1
 8008622:	400b      	ands	r3, r1
 8008624:	4927      	ldr	r1, [pc, #156]	@ (80086c4 <_strtod_l+0x594>)
 8008626:	4682      	mov	sl, r0
 8008628:	428b      	cmp	r3, r1
 800862a:	d898      	bhi.n	800855e <_strtod_l+0x42e>
 800862c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8008630:	428b      	cmp	r3, r1
 8008632:	bf86      	itte	hi
 8008634:	f04f 3aff 	movhi.w	sl, #4294967295
 8008638:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 80086c8 <_strtod_l+0x598>
 800863c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8008640:	2300      	movs	r3, #0
 8008642:	9308      	str	r3, [sp, #32]
 8008644:	e07a      	b.n	800873c <_strtod_l+0x60c>
 8008646:	07e2      	lsls	r2, r4, #31
 8008648:	d505      	bpl.n	8008656 <_strtod_l+0x526>
 800864a:	9b08      	ldr	r3, [sp, #32]
 800864c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008650:	f7f7 ff42 	bl	80004d8 <__aeabi_dmul>
 8008654:	2301      	movs	r3, #1
 8008656:	9a08      	ldr	r2, [sp, #32]
 8008658:	3601      	adds	r6, #1
 800865a:	3208      	adds	r2, #8
 800865c:	1064      	asrs	r4, r4, #1
 800865e:	9208      	str	r2, [sp, #32]
 8008660:	e7cd      	b.n	80085fe <_strtod_l+0x4ce>
 8008662:	d0ed      	beq.n	8008640 <_strtod_l+0x510>
 8008664:	4264      	negs	r4, r4
 8008666:	f014 020f 	ands.w	r2, r4, #15
 800866a:	d00a      	beq.n	8008682 <_strtod_l+0x552>
 800866c:	4b13      	ldr	r3, [pc, #76]	@ (80086bc <_strtod_l+0x58c>)
 800866e:	4650      	mov	r0, sl
 8008670:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008674:	4659      	mov	r1, fp
 8008676:	e9d3 2300 	ldrd	r2, r3, [r3]
 800867a:	f7f8 f857 	bl	800072c <__aeabi_ddiv>
 800867e:	4682      	mov	sl, r0
 8008680:	468b      	mov	fp, r1
 8008682:	1124      	asrs	r4, r4, #4
 8008684:	d0dc      	beq.n	8008640 <_strtod_l+0x510>
 8008686:	2c1f      	cmp	r4, #31
 8008688:	dd20      	ble.n	80086cc <_strtod_l+0x59c>
 800868a:	2400      	movs	r4, #0
 800868c:	46a0      	mov	r8, r4
 800868e:	46a1      	mov	r9, r4
 8008690:	940a      	str	r4, [sp, #40]	@ 0x28
 8008692:	2322      	movs	r3, #34	@ 0x22
 8008694:	9a05      	ldr	r2, [sp, #20]
 8008696:	f04f 0a00 	mov.w	sl, #0
 800869a:	f04f 0b00 	mov.w	fp, #0
 800869e:	6013      	str	r3, [r2, #0]
 80086a0:	e768      	b.n	8008574 <_strtod_l+0x444>
 80086a2:	bf00      	nop
 80086a4:	08009eb7 	.word	0x08009eb7
 80086a8:	0800a0cc 	.word	0x0800a0cc
 80086ac:	08009eaf 	.word	0x08009eaf
 80086b0:	08009ee6 	.word	0x08009ee6
 80086b4:	7ff00000 	.word	0x7ff00000
 80086b8:	0800a275 	.word	0x0800a275
 80086bc:	0800a000 	.word	0x0800a000
 80086c0:	08009fd8 	.word	0x08009fd8
 80086c4:	7ca00000 	.word	0x7ca00000
 80086c8:	7fefffff 	.word	0x7fefffff
 80086cc:	f014 0310 	ands.w	r3, r4, #16
 80086d0:	bf18      	it	ne
 80086d2:	236a      	movne	r3, #106	@ 0x6a
 80086d4:	4650      	mov	r0, sl
 80086d6:	9308      	str	r3, [sp, #32]
 80086d8:	4659      	mov	r1, fp
 80086da:	2300      	movs	r3, #0
 80086dc:	4ea9      	ldr	r6, [pc, #676]	@ (8008984 <_strtod_l+0x854>)
 80086de:	07e2      	lsls	r2, r4, #31
 80086e0:	d504      	bpl.n	80086ec <_strtod_l+0x5bc>
 80086e2:	e9d6 2300 	ldrd	r2, r3, [r6]
 80086e6:	f7f7 fef7 	bl	80004d8 <__aeabi_dmul>
 80086ea:	2301      	movs	r3, #1
 80086ec:	1064      	asrs	r4, r4, #1
 80086ee:	f106 0608 	add.w	r6, r6, #8
 80086f2:	d1f4      	bne.n	80086de <_strtod_l+0x5ae>
 80086f4:	b10b      	cbz	r3, 80086fa <_strtod_l+0x5ca>
 80086f6:	4682      	mov	sl, r0
 80086f8:	468b      	mov	fp, r1
 80086fa:	9b08      	ldr	r3, [sp, #32]
 80086fc:	b1b3      	cbz	r3, 800872c <_strtod_l+0x5fc>
 80086fe:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8008702:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8008706:	2b00      	cmp	r3, #0
 8008708:	4659      	mov	r1, fp
 800870a:	dd0f      	ble.n	800872c <_strtod_l+0x5fc>
 800870c:	2b1f      	cmp	r3, #31
 800870e:	dd57      	ble.n	80087c0 <_strtod_l+0x690>
 8008710:	2b34      	cmp	r3, #52	@ 0x34
 8008712:	bfd8      	it	le
 8008714:	f04f 33ff 	movle.w	r3, #4294967295
 8008718:	f04f 0a00 	mov.w	sl, #0
 800871c:	bfcf      	iteee	gt
 800871e:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8008722:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8008726:	4093      	lslle	r3, r2
 8008728:	ea03 0b01 	andle.w	fp, r3, r1
 800872c:	2200      	movs	r2, #0
 800872e:	2300      	movs	r3, #0
 8008730:	4650      	mov	r0, sl
 8008732:	4659      	mov	r1, fp
 8008734:	f7f8 f938 	bl	80009a8 <__aeabi_dcmpeq>
 8008738:	2800      	cmp	r0, #0
 800873a:	d1a6      	bne.n	800868a <_strtod_l+0x55a>
 800873c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800873e:	463a      	mov	r2, r7
 8008740:	9300      	str	r3, [sp, #0]
 8008742:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8008744:	462b      	mov	r3, r5
 8008746:	9805      	ldr	r0, [sp, #20]
 8008748:	f7ff f8d0 	bl	80078ec <__s2b>
 800874c:	900a      	str	r0, [sp, #40]	@ 0x28
 800874e:	2800      	cmp	r0, #0
 8008750:	f43f af05 	beq.w	800855e <_strtod_l+0x42e>
 8008754:	2400      	movs	r4, #0
 8008756:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008758:	eba9 0308 	sub.w	r3, r9, r8
 800875c:	2a00      	cmp	r2, #0
 800875e:	bfa8      	it	ge
 8008760:	2300      	movge	r3, #0
 8008762:	46a0      	mov	r8, r4
 8008764:	9312      	str	r3, [sp, #72]	@ 0x48
 8008766:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800876a:	9316      	str	r3, [sp, #88]	@ 0x58
 800876c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800876e:	9805      	ldr	r0, [sp, #20]
 8008770:	6859      	ldr	r1, [r3, #4]
 8008772:	f7ff f813 	bl	800779c <_Balloc>
 8008776:	4681      	mov	r9, r0
 8008778:	2800      	cmp	r0, #0
 800877a:	f43f aef4 	beq.w	8008566 <_strtod_l+0x436>
 800877e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008780:	300c      	adds	r0, #12
 8008782:	691a      	ldr	r2, [r3, #16]
 8008784:	f103 010c 	add.w	r1, r3, #12
 8008788:	3202      	adds	r2, #2
 800878a:	0092      	lsls	r2, r2, #2
 800878c:	f7fe f8a5 	bl	80068da <memcpy>
 8008790:	ab1c      	add	r3, sp, #112	@ 0x70
 8008792:	9301      	str	r3, [sp, #4]
 8008794:	ab1b      	add	r3, sp, #108	@ 0x6c
 8008796:	9300      	str	r3, [sp, #0]
 8008798:	4652      	mov	r2, sl
 800879a:	465b      	mov	r3, fp
 800879c:	9805      	ldr	r0, [sp, #20]
 800879e:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 80087a2:	f7ff fbd5 	bl	8007f50 <__d2b>
 80087a6:	901a      	str	r0, [sp, #104]	@ 0x68
 80087a8:	2800      	cmp	r0, #0
 80087aa:	f43f aedc 	beq.w	8008566 <_strtod_l+0x436>
 80087ae:	2101      	movs	r1, #1
 80087b0:	9805      	ldr	r0, [sp, #20]
 80087b2:	f7ff f931 	bl	8007a18 <__i2b>
 80087b6:	4680      	mov	r8, r0
 80087b8:	b948      	cbnz	r0, 80087ce <_strtod_l+0x69e>
 80087ba:	f04f 0800 	mov.w	r8, #0
 80087be:	e6d2      	b.n	8008566 <_strtod_l+0x436>
 80087c0:	f04f 32ff 	mov.w	r2, #4294967295
 80087c4:	fa02 f303 	lsl.w	r3, r2, r3
 80087c8:	ea03 0a0a 	and.w	sl, r3, sl
 80087cc:	e7ae      	b.n	800872c <_strtod_l+0x5fc>
 80087ce:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 80087d0:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80087d2:	2d00      	cmp	r5, #0
 80087d4:	bfab      	itete	ge
 80087d6:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 80087d8:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 80087da:	18ef      	addge	r7, r5, r3
 80087dc:	1b5e      	sublt	r6, r3, r5
 80087de:	9b08      	ldr	r3, [sp, #32]
 80087e0:	bfa8      	it	ge
 80087e2:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 80087e4:	eba5 0503 	sub.w	r5, r5, r3
 80087e8:	4415      	add	r5, r2
 80087ea:	4b67      	ldr	r3, [pc, #412]	@ (8008988 <_strtod_l+0x858>)
 80087ec:	f105 35ff 	add.w	r5, r5, #4294967295
 80087f0:	bfb8      	it	lt
 80087f2:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 80087f4:	429d      	cmp	r5, r3
 80087f6:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80087fa:	da50      	bge.n	800889e <_strtod_l+0x76e>
 80087fc:	1b5b      	subs	r3, r3, r5
 80087fe:	2b1f      	cmp	r3, #31
 8008800:	f04f 0101 	mov.w	r1, #1
 8008804:	eba2 0203 	sub.w	r2, r2, r3
 8008808:	dc3d      	bgt.n	8008886 <_strtod_l+0x756>
 800880a:	fa01 f303 	lsl.w	r3, r1, r3
 800880e:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008810:	2300      	movs	r3, #0
 8008812:	9310      	str	r3, [sp, #64]	@ 0x40
 8008814:	18bd      	adds	r5, r7, r2
 8008816:	9b08      	ldr	r3, [sp, #32]
 8008818:	42af      	cmp	r7, r5
 800881a:	4416      	add	r6, r2
 800881c:	441e      	add	r6, r3
 800881e:	463b      	mov	r3, r7
 8008820:	bfa8      	it	ge
 8008822:	462b      	movge	r3, r5
 8008824:	42b3      	cmp	r3, r6
 8008826:	bfa8      	it	ge
 8008828:	4633      	movge	r3, r6
 800882a:	2b00      	cmp	r3, #0
 800882c:	bfc2      	ittt	gt
 800882e:	1aed      	subgt	r5, r5, r3
 8008830:	1af6      	subgt	r6, r6, r3
 8008832:	1aff      	subgt	r7, r7, r3
 8008834:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008836:	2b00      	cmp	r3, #0
 8008838:	dd16      	ble.n	8008868 <_strtod_l+0x738>
 800883a:	4641      	mov	r1, r8
 800883c:	461a      	mov	r2, r3
 800883e:	9805      	ldr	r0, [sp, #20]
 8008840:	f7ff f9a8 	bl	8007b94 <__pow5mult>
 8008844:	4680      	mov	r8, r0
 8008846:	2800      	cmp	r0, #0
 8008848:	d0b7      	beq.n	80087ba <_strtod_l+0x68a>
 800884a:	4601      	mov	r1, r0
 800884c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800884e:	9805      	ldr	r0, [sp, #20]
 8008850:	f7ff f8f8 	bl	8007a44 <__multiply>
 8008854:	900e      	str	r0, [sp, #56]	@ 0x38
 8008856:	2800      	cmp	r0, #0
 8008858:	f43f ae85 	beq.w	8008566 <_strtod_l+0x436>
 800885c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800885e:	9805      	ldr	r0, [sp, #20]
 8008860:	f7fe ffdc 	bl	800781c <_Bfree>
 8008864:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008866:	931a      	str	r3, [sp, #104]	@ 0x68
 8008868:	2d00      	cmp	r5, #0
 800886a:	dc1d      	bgt.n	80088a8 <_strtod_l+0x778>
 800886c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800886e:	2b00      	cmp	r3, #0
 8008870:	dd23      	ble.n	80088ba <_strtod_l+0x78a>
 8008872:	4649      	mov	r1, r9
 8008874:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8008876:	9805      	ldr	r0, [sp, #20]
 8008878:	f7ff f98c 	bl	8007b94 <__pow5mult>
 800887c:	4681      	mov	r9, r0
 800887e:	b9e0      	cbnz	r0, 80088ba <_strtod_l+0x78a>
 8008880:	f04f 0900 	mov.w	r9, #0
 8008884:	e66f      	b.n	8008566 <_strtod_l+0x436>
 8008886:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800888a:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800888e:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8008892:	35e2      	adds	r5, #226	@ 0xe2
 8008894:	fa01 f305 	lsl.w	r3, r1, r5
 8008898:	9310      	str	r3, [sp, #64]	@ 0x40
 800889a:	9113      	str	r1, [sp, #76]	@ 0x4c
 800889c:	e7ba      	b.n	8008814 <_strtod_l+0x6e4>
 800889e:	2300      	movs	r3, #0
 80088a0:	9310      	str	r3, [sp, #64]	@ 0x40
 80088a2:	2301      	movs	r3, #1
 80088a4:	9313      	str	r3, [sp, #76]	@ 0x4c
 80088a6:	e7b5      	b.n	8008814 <_strtod_l+0x6e4>
 80088a8:	462a      	mov	r2, r5
 80088aa:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80088ac:	9805      	ldr	r0, [sp, #20]
 80088ae:	f7ff f9cb 	bl	8007c48 <__lshift>
 80088b2:	901a      	str	r0, [sp, #104]	@ 0x68
 80088b4:	2800      	cmp	r0, #0
 80088b6:	d1d9      	bne.n	800886c <_strtod_l+0x73c>
 80088b8:	e655      	b.n	8008566 <_strtod_l+0x436>
 80088ba:	2e00      	cmp	r6, #0
 80088bc:	dd07      	ble.n	80088ce <_strtod_l+0x79e>
 80088be:	4649      	mov	r1, r9
 80088c0:	4632      	mov	r2, r6
 80088c2:	9805      	ldr	r0, [sp, #20]
 80088c4:	f7ff f9c0 	bl	8007c48 <__lshift>
 80088c8:	4681      	mov	r9, r0
 80088ca:	2800      	cmp	r0, #0
 80088cc:	d0d8      	beq.n	8008880 <_strtod_l+0x750>
 80088ce:	2f00      	cmp	r7, #0
 80088d0:	dd08      	ble.n	80088e4 <_strtod_l+0x7b4>
 80088d2:	4641      	mov	r1, r8
 80088d4:	463a      	mov	r2, r7
 80088d6:	9805      	ldr	r0, [sp, #20]
 80088d8:	f7ff f9b6 	bl	8007c48 <__lshift>
 80088dc:	4680      	mov	r8, r0
 80088de:	2800      	cmp	r0, #0
 80088e0:	f43f ae41 	beq.w	8008566 <_strtod_l+0x436>
 80088e4:	464a      	mov	r2, r9
 80088e6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80088e8:	9805      	ldr	r0, [sp, #20]
 80088ea:	f7ff fa35 	bl	8007d58 <__mdiff>
 80088ee:	4604      	mov	r4, r0
 80088f0:	2800      	cmp	r0, #0
 80088f2:	f43f ae38 	beq.w	8008566 <_strtod_l+0x436>
 80088f6:	68c3      	ldr	r3, [r0, #12]
 80088f8:	4641      	mov	r1, r8
 80088fa:	930f      	str	r3, [sp, #60]	@ 0x3c
 80088fc:	2300      	movs	r3, #0
 80088fe:	60c3      	str	r3, [r0, #12]
 8008900:	f7ff fa0e 	bl	8007d20 <__mcmp>
 8008904:	2800      	cmp	r0, #0
 8008906:	da45      	bge.n	8008994 <_strtod_l+0x864>
 8008908:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800890a:	ea53 030a 	orrs.w	r3, r3, sl
 800890e:	d16b      	bne.n	80089e8 <_strtod_l+0x8b8>
 8008910:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008914:	2b00      	cmp	r3, #0
 8008916:	d167      	bne.n	80089e8 <_strtod_l+0x8b8>
 8008918:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800891c:	0d1b      	lsrs	r3, r3, #20
 800891e:	051b      	lsls	r3, r3, #20
 8008920:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8008924:	d960      	bls.n	80089e8 <_strtod_l+0x8b8>
 8008926:	6963      	ldr	r3, [r4, #20]
 8008928:	b913      	cbnz	r3, 8008930 <_strtod_l+0x800>
 800892a:	6923      	ldr	r3, [r4, #16]
 800892c:	2b01      	cmp	r3, #1
 800892e:	dd5b      	ble.n	80089e8 <_strtod_l+0x8b8>
 8008930:	4621      	mov	r1, r4
 8008932:	2201      	movs	r2, #1
 8008934:	9805      	ldr	r0, [sp, #20]
 8008936:	f7ff f987 	bl	8007c48 <__lshift>
 800893a:	4641      	mov	r1, r8
 800893c:	4604      	mov	r4, r0
 800893e:	f7ff f9ef 	bl	8007d20 <__mcmp>
 8008942:	2800      	cmp	r0, #0
 8008944:	dd50      	ble.n	80089e8 <_strtod_l+0x8b8>
 8008946:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800894a:	9a08      	ldr	r2, [sp, #32]
 800894c:	0d1b      	lsrs	r3, r3, #20
 800894e:	051b      	lsls	r3, r3, #20
 8008950:	2a00      	cmp	r2, #0
 8008952:	d06a      	beq.n	8008a2a <_strtod_l+0x8fa>
 8008954:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8008958:	d867      	bhi.n	8008a2a <_strtod_l+0x8fa>
 800895a:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800895e:	f67f ae98 	bls.w	8008692 <_strtod_l+0x562>
 8008962:	4650      	mov	r0, sl
 8008964:	4659      	mov	r1, fp
 8008966:	4b09      	ldr	r3, [pc, #36]	@ (800898c <_strtod_l+0x85c>)
 8008968:	2200      	movs	r2, #0
 800896a:	f7f7 fdb5 	bl	80004d8 <__aeabi_dmul>
 800896e:	4b08      	ldr	r3, [pc, #32]	@ (8008990 <_strtod_l+0x860>)
 8008970:	4682      	mov	sl, r0
 8008972:	400b      	ands	r3, r1
 8008974:	468b      	mov	fp, r1
 8008976:	2b00      	cmp	r3, #0
 8008978:	f47f ae00 	bne.w	800857c <_strtod_l+0x44c>
 800897c:	2322      	movs	r3, #34	@ 0x22
 800897e:	9a05      	ldr	r2, [sp, #20]
 8008980:	6013      	str	r3, [r2, #0]
 8008982:	e5fb      	b.n	800857c <_strtod_l+0x44c>
 8008984:	0800a0f8 	.word	0x0800a0f8
 8008988:	fffffc02 	.word	0xfffffc02
 800898c:	39500000 	.word	0x39500000
 8008990:	7ff00000 	.word	0x7ff00000
 8008994:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8008998:	d165      	bne.n	8008a66 <_strtod_l+0x936>
 800899a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800899c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80089a0:	b35a      	cbz	r2, 80089fa <_strtod_l+0x8ca>
 80089a2:	4a99      	ldr	r2, [pc, #612]	@ (8008c08 <_strtod_l+0xad8>)
 80089a4:	4293      	cmp	r3, r2
 80089a6:	d12b      	bne.n	8008a00 <_strtod_l+0x8d0>
 80089a8:	9b08      	ldr	r3, [sp, #32]
 80089aa:	4651      	mov	r1, sl
 80089ac:	b303      	cbz	r3, 80089f0 <_strtod_l+0x8c0>
 80089ae:	465a      	mov	r2, fp
 80089b0:	4b96      	ldr	r3, [pc, #600]	@ (8008c0c <_strtod_l+0xadc>)
 80089b2:	4013      	ands	r3, r2
 80089b4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 80089b8:	f04f 32ff 	mov.w	r2, #4294967295
 80089bc:	d81b      	bhi.n	80089f6 <_strtod_l+0x8c6>
 80089be:	0d1b      	lsrs	r3, r3, #20
 80089c0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80089c4:	fa02 f303 	lsl.w	r3, r2, r3
 80089c8:	4299      	cmp	r1, r3
 80089ca:	d119      	bne.n	8008a00 <_strtod_l+0x8d0>
 80089cc:	4b90      	ldr	r3, [pc, #576]	@ (8008c10 <_strtod_l+0xae0>)
 80089ce:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80089d0:	429a      	cmp	r2, r3
 80089d2:	d102      	bne.n	80089da <_strtod_l+0x8aa>
 80089d4:	3101      	adds	r1, #1
 80089d6:	f43f adc6 	beq.w	8008566 <_strtod_l+0x436>
 80089da:	f04f 0a00 	mov.w	sl, #0
 80089de:	4b8b      	ldr	r3, [pc, #556]	@ (8008c0c <_strtod_l+0xadc>)
 80089e0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80089e2:	401a      	ands	r2, r3
 80089e4:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 80089e8:	9b08      	ldr	r3, [sp, #32]
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d1b9      	bne.n	8008962 <_strtod_l+0x832>
 80089ee:	e5c5      	b.n	800857c <_strtod_l+0x44c>
 80089f0:	f04f 33ff 	mov.w	r3, #4294967295
 80089f4:	e7e8      	b.n	80089c8 <_strtod_l+0x898>
 80089f6:	4613      	mov	r3, r2
 80089f8:	e7e6      	b.n	80089c8 <_strtod_l+0x898>
 80089fa:	ea53 030a 	orrs.w	r3, r3, sl
 80089fe:	d0a2      	beq.n	8008946 <_strtod_l+0x816>
 8008a00:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008a02:	b1db      	cbz	r3, 8008a3c <_strtod_l+0x90c>
 8008a04:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008a06:	4213      	tst	r3, r2
 8008a08:	d0ee      	beq.n	80089e8 <_strtod_l+0x8b8>
 8008a0a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008a0c:	4650      	mov	r0, sl
 8008a0e:	4659      	mov	r1, fp
 8008a10:	9a08      	ldr	r2, [sp, #32]
 8008a12:	b1bb      	cbz	r3, 8008a44 <_strtod_l+0x914>
 8008a14:	f7ff fb68 	bl	80080e8 <sulp>
 8008a18:	4602      	mov	r2, r0
 8008a1a:	460b      	mov	r3, r1
 8008a1c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008a20:	f7f7 fba4 	bl	800016c <__adddf3>
 8008a24:	4682      	mov	sl, r0
 8008a26:	468b      	mov	fp, r1
 8008a28:	e7de      	b.n	80089e8 <_strtod_l+0x8b8>
 8008a2a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8008a2e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8008a32:	f04f 3aff 	mov.w	sl, #4294967295
 8008a36:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8008a3a:	e7d5      	b.n	80089e8 <_strtod_l+0x8b8>
 8008a3c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008a3e:	ea13 0f0a 	tst.w	r3, sl
 8008a42:	e7e1      	b.n	8008a08 <_strtod_l+0x8d8>
 8008a44:	f7ff fb50 	bl	80080e8 <sulp>
 8008a48:	4602      	mov	r2, r0
 8008a4a:	460b      	mov	r3, r1
 8008a4c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008a50:	f7f7 fb8a 	bl	8000168 <__aeabi_dsub>
 8008a54:	2200      	movs	r2, #0
 8008a56:	2300      	movs	r3, #0
 8008a58:	4682      	mov	sl, r0
 8008a5a:	468b      	mov	fp, r1
 8008a5c:	f7f7 ffa4 	bl	80009a8 <__aeabi_dcmpeq>
 8008a60:	2800      	cmp	r0, #0
 8008a62:	d0c1      	beq.n	80089e8 <_strtod_l+0x8b8>
 8008a64:	e615      	b.n	8008692 <_strtod_l+0x562>
 8008a66:	4641      	mov	r1, r8
 8008a68:	4620      	mov	r0, r4
 8008a6a:	f7ff fac9 	bl	8008000 <__ratio>
 8008a6e:	2200      	movs	r2, #0
 8008a70:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8008a74:	4606      	mov	r6, r0
 8008a76:	460f      	mov	r7, r1
 8008a78:	f7f7 ffaa 	bl	80009d0 <__aeabi_dcmple>
 8008a7c:	2800      	cmp	r0, #0
 8008a7e:	d06d      	beq.n	8008b5c <_strtod_l+0xa2c>
 8008a80:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d178      	bne.n	8008b78 <_strtod_l+0xa48>
 8008a86:	f1ba 0f00 	cmp.w	sl, #0
 8008a8a:	d156      	bne.n	8008b3a <_strtod_l+0xa0a>
 8008a8c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008a8e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d158      	bne.n	8008b48 <_strtod_l+0xa18>
 8008a96:	2200      	movs	r2, #0
 8008a98:	4630      	mov	r0, r6
 8008a9a:	4639      	mov	r1, r7
 8008a9c:	4b5d      	ldr	r3, [pc, #372]	@ (8008c14 <_strtod_l+0xae4>)
 8008a9e:	f7f7 ff8d 	bl	80009bc <__aeabi_dcmplt>
 8008aa2:	2800      	cmp	r0, #0
 8008aa4:	d157      	bne.n	8008b56 <_strtod_l+0xa26>
 8008aa6:	4630      	mov	r0, r6
 8008aa8:	4639      	mov	r1, r7
 8008aaa:	2200      	movs	r2, #0
 8008aac:	4b5a      	ldr	r3, [pc, #360]	@ (8008c18 <_strtod_l+0xae8>)
 8008aae:	f7f7 fd13 	bl	80004d8 <__aeabi_dmul>
 8008ab2:	4606      	mov	r6, r0
 8008ab4:	460f      	mov	r7, r1
 8008ab6:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8008aba:	9606      	str	r6, [sp, #24]
 8008abc:	9307      	str	r3, [sp, #28]
 8008abe:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008ac2:	4d52      	ldr	r5, [pc, #328]	@ (8008c0c <_strtod_l+0xadc>)
 8008ac4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8008ac8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008aca:	401d      	ands	r5, r3
 8008acc:	4b53      	ldr	r3, [pc, #332]	@ (8008c1c <_strtod_l+0xaec>)
 8008ace:	429d      	cmp	r5, r3
 8008ad0:	f040 80aa 	bne.w	8008c28 <_strtod_l+0xaf8>
 8008ad4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008ad6:	4650      	mov	r0, sl
 8008ad8:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8008adc:	4659      	mov	r1, fp
 8008ade:	f7ff f9cf 	bl	8007e80 <__ulp>
 8008ae2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008ae6:	f7f7 fcf7 	bl	80004d8 <__aeabi_dmul>
 8008aea:	4652      	mov	r2, sl
 8008aec:	465b      	mov	r3, fp
 8008aee:	f7f7 fb3d 	bl	800016c <__adddf3>
 8008af2:	460b      	mov	r3, r1
 8008af4:	4945      	ldr	r1, [pc, #276]	@ (8008c0c <_strtod_l+0xadc>)
 8008af6:	4a4a      	ldr	r2, [pc, #296]	@ (8008c20 <_strtod_l+0xaf0>)
 8008af8:	4019      	ands	r1, r3
 8008afa:	4291      	cmp	r1, r2
 8008afc:	4682      	mov	sl, r0
 8008afe:	d942      	bls.n	8008b86 <_strtod_l+0xa56>
 8008b00:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008b02:	4b43      	ldr	r3, [pc, #268]	@ (8008c10 <_strtod_l+0xae0>)
 8008b04:	429a      	cmp	r2, r3
 8008b06:	d103      	bne.n	8008b10 <_strtod_l+0x9e0>
 8008b08:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008b0a:	3301      	adds	r3, #1
 8008b0c:	f43f ad2b 	beq.w	8008566 <_strtod_l+0x436>
 8008b10:	f04f 3aff 	mov.w	sl, #4294967295
 8008b14:	f8df b0f8 	ldr.w	fp, [pc, #248]	@ 8008c10 <_strtod_l+0xae0>
 8008b18:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008b1a:	9805      	ldr	r0, [sp, #20]
 8008b1c:	f7fe fe7e 	bl	800781c <_Bfree>
 8008b20:	4649      	mov	r1, r9
 8008b22:	9805      	ldr	r0, [sp, #20]
 8008b24:	f7fe fe7a 	bl	800781c <_Bfree>
 8008b28:	4641      	mov	r1, r8
 8008b2a:	9805      	ldr	r0, [sp, #20]
 8008b2c:	f7fe fe76 	bl	800781c <_Bfree>
 8008b30:	4621      	mov	r1, r4
 8008b32:	9805      	ldr	r0, [sp, #20]
 8008b34:	f7fe fe72 	bl	800781c <_Bfree>
 8008b38:	e618      	b.n	800876c <_strtod_l+0x63c>
 8008b3a:	f1ba 0f01 	cmp.w	sl, #1
 8008b3e:	d103      	bne.n	8008b48 <_strtod_l+0xa18>
 8008b40:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	f43f ada5 	beq.w	8008692 <_strtod_l+0x562>
 8008b48:	2200      	movs	r2, #0
 8008b4a:	4b36      	ldr	r3, [pc, #216]	@ (8008c24 <_strtod_l+0xaf4>)
 8008b4c:	2600      	movs	r6, #0
 8008b4e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008b52:	4f30      	ldr	r7, [pc, #192]	@ (8008c14 <_strtod_l+0xae4>)
 8008b54:	e7b3      	b.n	8008abe <_strtod_l+0x98e>
 8008b56:	2600      	movs	r6, #0
 8008b58:	4f2f      	ldr	r7, [pc, #188]	@ (8008c18 <_strtod_l+0xae8>)
 8008b5a:	e7ac      	b.n	8008ab6 <_strtod_l+0x986>
 8008b5c:	4630      	mov	r0, r6
 8008b5e:	4639      	mov	r1, r7
 8008b60:	4b2d      	ldr	r3, [pc, #180]	@ (8008c18 <_strtod_l+0xae8>)
 8008b62:	2200      	movs	r2, #0
 8008b64:	f7f7 fcb8 	bl	80004d8 <__aeabi_dmul>
 8008b68:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008b6a:	4606      	mov	r6, r0
 8008b6c:	460f      	mov	r7, r1
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d0a1      	beq.n	8008ab6 <_strtod_l+0x986>
 8008b72:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8008b76:	e7a2      	b.n	8008abe <_strtod_l+0x98e>
 8008b78:	2200      	movs	r2, #0
 8008b7a:	4b26      	ldr	r3, [pc, #152]	@ (8008c14 <_strtod_l+0xae4>)
 8008b7c:	4616      	mov	r6, r2
 8008b7e:	461f      	mov	r7, r3
 8008b80:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008b84:	e79b      	b.n	8008abe <_strtod_l+0x98e>
 8008b86:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8008b8a:	9b08      	ldr	r3, [sp, #32]
 8008b8c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d1c1      	bne.n	8008b18 <_strtod_l+0x9e8>
 8008b94:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008b98:	0d1b      	lsrs	r3, r3, #20
 8008b9a:	051b      	lsls	r3, r3, #20
 8008b9c:	429d      	cmp	r5, r3
 8008b9e:	d1bb      	bne.n	8008b18 <_strtod_l+0x9e8>
 8008ba0:	4630      	mov	r0, r6
 8008ba2:	4639      	mov	r1, r7
 8008ba4:	f7f7 ffe0 	bl	8000b68 <__aeabi_d2lz>
 8008ba8:	f7f7 fc68 	bl	800047c <__aeabi_l2d>
 8008bac:	4602      	mov	r2, r0
 8008bae:	460b      	mov	r3, r1
 8008bb0:	4630      	mov	r0, r6
 8008bb2:	4639      	mov	r1, r7
 8008bb4:	f7f7 fad8 	bl	8000168 <__aeabi_dsub>
 8008bb8:	460b      	mov	r3, r1
 8008bba:	4602      	mov	r2, r0
 8008bbc:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8008bc0:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8008bc4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008bc6:	ea46 060a 	orr.w	r6, r6, sl
 8008bca:	431e      	orrs	r6, r3
 8008bcc:	d069      	beq.n	8008ca2 <_strtod_l+0xb72>
 8008bce:	a30a      	add	r3, pc, #40	@ (adr r3, 8008bf8 <_strtod_l+0xac8>)
 8008bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bd4:	f7f7 fef2 	bl	80009bc <__aeabi_dcmplt>
 8008bd8:	2800      	cmp	r0, #0
 8008bda:	f47f accf 	bne.w	800857c <_strtod_l+0x44c>
 8008bde:	a308      	add	r3, pc, #32	@ (adr r3, 8008c00 <_strtod_l+0xad0>)
 8008be0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008be4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008be8:	f7f7 ff06 	bl	80009f8 <__aeabi_dcmpgt>
 8008bec:	2800      	cmp	r0, #0
 8008bee:	d093      	beq.n	8008b18 <_strtod_l+0x9e8>
 8008bf0:	e4c4      	b.n	800857c <_strtod_l+0x44c>
 8008bf2:	bf00      	nop
 8008bf4:	f3af 8000 	nop.w
 8008bf8:	94a03595 	.word	0x94a03595
 8008bfc:	3fdfffff 	.word	0x3fdfffff
 8008c00:	35afe535 	.word	0x35afe535
 8008c04:	3fe00000 	.word	0x3fe00000
 8008c08:	000fffff 	.word	0x000fffff
 8008c0c:	7ff00000 	.word	0x7ff00000
 8008c10:	7fefffff 	.word	0x7fefffff
 8008c14:	3ff00000 	.word	0x3ff00000
 8008c18:	3fe00000 	.word	0x3fe00000
 8008c1c:	7fe00000 	.word	0x7fe00000
 8008c20:	7c9fffff 	.word	0x7c9fffff
 8008c24:	bff00000 	.word	0xbff00000
 8008c28:	9b08      	ldr	r3, [sp, #32]
 8008c2a:	b323      	cbz	r3, 8008c76 <_strtod_l+0xb46>
 8008c2c:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8008c30:	d821      	bhi.n	8008c76 <_strtod_l+0xb46>
 8008c32:	a327      	add	r3, pc, #156	@ (adr r3, 8008cd0 <_strtod_l+0xba0>)
 8008c34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c38:	4630      	mov	r0, r6
 8008c3a:	4639      	mov	r1, r7
 8008c3c:	f7f7 fec8 	bl	80009d0 <__aeabi_dcmple>
 8008c40:	b1a0      	cbz	r0, 8008c6c <_strtod_l+0xb3c>
 8008c42:	4639      	mov	r1, r7
 8008c44:	4630      	mov	r0, r6
 8008c46:	f7f7 ff1f 	bl	8000a88 <__aeabi_d2uiz>
 8008c4a:	2801      	cmp	r0, #1
 8008c4c:	bf38      	it	cc
 8008c4e:	2001      	movcc	r0, #1
 8008c50:	f7f7 fbc8 	bl	80003e4 <__aeabi_ui2d>
 8008c54:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008c56:	4606      	mov	r6, r0
 8008c58:	460f      	mov	r7, r1
 8008c5a:	b9fb      	cbnz	r3, 8008c9c <_strtod_l+0xb6c>
 8008c5c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008c60:	9014      	str	r0, [sp, #80]	@ 0x50
 8008c62:	9315      	str	r3, [sp, #84]	@ 0x54
 8008c64:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8008c68:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8008c6c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008c6e:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8008c72:	1b5b      	subs	r3, r3, r5
 8008c74:	9311      	str	r3, [sp, #68]	@ 0x44
 8008c76:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008c7a:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8008c7e:	f7ff f8ff 	bl	8007e80 <__ulp>
 8008c82:	4602      	mov	r2, r0
 8008c84:	460b      	mov	r3, r1
 8008c86:	4650      	mov	r0, sl
 8008c88:	4659      	mov	r1, fp
 8008c8a:	f7f7 fc25 	bl	80004d8 <__aeabi_dmul>
 8008c8e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8008c92:	f7f7 fa6b 	bl	800016c <__adddf3>
 8008c96:	4682      	mov	sl, r0
 8008c98:	468b      	mov	fp, r1
 8008c9a:	e776      	b.n	8008b8a <_strtod_l+0xa5a>
 8008c9c:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8008ca0:	e7e0      	b.n	8008c64 <_strtod_l+0xb34>
 8008ca2:	a30d      	add	r3, pc, #52	@ (adr r3, 8008cd8 <_strtod_l+0xba8>)
 8008ca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ca8:	f7f7 fe88 	bl	80009bc <__aeabi_dcmplt>
 8008cac:	e79e      	b.n	8008bec <_strtod_l+0xabc>
 8008cae:	2300      	movs	r3, #0
 8008cb0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008cb2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008cb4:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8008cb6:	6013      	str	r3, [r2, #0]
 8008cb8:	f7ff ba77 	b.w	80081aa <_strtod_l+0x7a>
 8008cbc:	2a65      	cmp	r2, #101	@ 0x65
 8008cbe:	f43f ab6e 	beq.w	800839e <_strtod_l+0x26e>
 8008cc2:	2a45      	cmp	r2, #69	@ 0x45
 8008cc4:	f43f ab6b 	beq.w	800839e <_strtod_l+0x26e>
 8008cc8:	2301      	movs	r3, #1
 8008cca:	f7ff bba6 	b.w	800841a <_strtod_l+0x2ea>
 8008cce:	bf00      	nop
 8008cd0:	ffc00000 	.word	0xffc00000
 8008cd4:	41dfffff 	.word	0x41dfffff
 8008cd8:	94a03595 	.word	0x94a03595
 8008cdc:	3fcfffff 	.word	0x3fcfffff

08008ce0 <_strtod_r>:
 8008ce0:	4b01      	ldr	r3, [pc, #4]	@ (8008ce8 <_strtod_r+0x8>)
 8008ce2:	f7ff ba25 	b.w	8008130 <_strtod_l>
 8008ce6:	bf00      	nop
 8008ce8:	20000470 	.word	0x20000470

08008cec <_strtol_l.constprop.0>:
 8008cec:	2b24      	cmp	r3, #36	@ 0x24
 8008cee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008cf2:	4686      	mov	lr, r0
 8008cf4:	4690      	mov	r8, r2
 8008cf6:	d801      	bhi.n	8008cfc <_strtol_l.constprop.0+0x10>
 8008cf8:	2b01      	cmp	r3, #1
 8008cfa:	d106      	bne.n	8008d0a <_strtol_l.constprop.0+0x1e>
 8008cfc:	f7fd fdb2 	bl	8006864 <__errno>
 8008d00:	2316      	movs	r3, #22
 8008d02:	6003      	str	r3, [r0, #0]
 8008d04:	2000      	movs	r0, #0
 8008d06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d0a:	460d      	mov	r5, r1
 8008d0c:	4833      	ldr	r0, [pc, #204]	@ (8008ddc <_strtol_l.constprop.0+0xf0>)
 8008d0e:	462a      	mov	r2, r5
 8008d10:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008d14:	5d06      	ldrb	r6, [r0, r4]
 8008d16:	f016 0608 	ands.w	r6, r6, #8
 8008d1a:	d1f8      	bne.n	8008d0e <_strtol_l.constprop.0+0x22>
 8008d1c:	2c2d      	cmp	r4, #45	@ 0x2d
 8008d1e:	d12d      	bne.n	8008d7c <_strtol_l.constprop.0+0x90>
 8008d20:	2601      	movs	r6, #1
 8008d22:	782c      	ldrb	r4, [r5, #0]
 8008d24:	1c95      	adds	r5, r2, #2
 8008d26:	f033 0210 	bics.w	r2, r3, #16
 8008d2a:	d109      	bne.n	8008d40 <_strtol_l.constprop.0+0x54>
 8008d2c:	2c30      	cmp	r4, #48	@ 0x30
 8008d2e:	d12a      	bne.n	8008d86 <_strtol_l.constprop.0+0x9a>
 8008d30:	782a      	ldrb	r2, [r5, #0]
 8008d32:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008d36:	2a58      	cmp	r2, #88	@ 0x58
 8008d38:	d125      	bne.n	8008d86 <_strtol_l.constprop.0+0x9a>
 8008d3a:	2310      	movs	r3, #16
 8008d3c:	786c      	ldrb	r4, [r5, #1]
 8008d3e:	3502      	adds	r5, #2
 8008d40:	2200      	movs	r2, #0
 8008d42:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8008d46:	f10c 3cff 	add.w	ip, ip, #4294967295
 8008d4a:	fbbc f9f3 	udiv	r9, ip, r3
 8008d4e:	4610      	mov	r0, r2
 8008d50:	fb03 ca19 	mls	sl, r3, r9, ip
 8008d54:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8008d58:	2f09      	cmp	r7, #9
 8008d5a:	d81b      	bhi.n	8008d94 <_strtol_l.constprop.0+0xa8>
 8008d5c:	463c      	mov	r4, r7
 8008d5e:	42a3      	cmp	r3, r4
 8008d60:	dd27      	ble.n	8008db2 <_strtol_l.constprop.0+0xc6>
 8008d62:	1c57      	adds	r7, r2, #1
 8008d64:	d007      	beq.n	8008d76 <_strtol_l.constprop.0+0x8a>
 8008d66:	4581      	cmp	r9, r0
 8008d68:	d320      	bcc.n	8008dac <_strtol_l.constprop.0+0xc0>
 8008d6a:	d101      	bne.n	8008d70 <_strtol_l.constprop.0+0x84>
 8008d6c:	45a2      	cmp	sl, r4
 8008d6e:	db1d      	blt.n	8008dac <_strtol_l.constprop.0+0xc0>
 8008d70:	2201      	movs	r2, #1
 8008d72:	fb00 4003 	mla	r0, r0, r3, r4
 8008d76:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008d7a:	e7eb      	b.n	8008d54 <_strtol_l.constprop.0+0x68>
 8008d7c:	2c2b      	cmp	r4, #43	@ 0x2b
 8008d7e:	bf04      	itt	eq
 8008d80:	782c      	ldrbeq	r4, [r5, #0]
 8008d82:	1c95      	addeq	r5, r2, #2
 8008d84:	e7cf      	b.n	8008d26 <_strtol_l.constprop.0+0x3a>
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d1da      	bne.n	8008d40 <_strtol_l.constprop.0+0x54>
 8008d8a:	2c30      	cmp	r4, #48	@ 0x30
 8008d8c:	bf0c      	ite	eq
 8008d8e:	2308      	moveq	r3, #8
 8008d90:	230a      	movne	r3, #10
 8008d92:	e7d5      	b.n	8008d40 <_strtol_l.constprop.0+0x54>
 8008d94:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8008d98:	2f19      	cmp	r7, #25
 8008d9a:	d801      	bhi.n	8008da0 <_strtol_l.constprop.0+0xb4>
 8008d9c:	3c37      	subs	r4, #55	@ 0x37
 8008d9e:	e7de      	b.n	8008d5e <_strtol_l.constprop.0+0x72>
 8008da0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8008da4:	2f19      	cmp	r7, #25
 8008da6:	d804      	bhi.n	8008db2 <_strtol_l.constprop.0+0xc6>
 8008da8:	3c57      	subs	r4, #87	@ 0x57
 8008daa:	e7d8      	b.n	8008d5e <_strtol_l.constprop.0+0x72>
 8008dac:	f04f 32ff 	mov.w	r2, #4294967295
 8008db0:	e7e1      	b.n	8008d76 <_strtol_l.constprop.0+0x8a>
 8008db2:	1c53      	adds	r3, r2, #1
 8008db4:	d108      	bne.n	8008dc8 <_strtol_l.constprop.0+0xdc>
 8008db6:	2322      	movs	r3, #34	@ 0x22
 8008db8:	4660      	mov	r0, ip
 8008dba:	f8ce 3000 	str.w	r3, [lr]
 8008dbe:	f1b8 0f00 	cmp.w	r8, #0
 8008dc2:	d0a0      	beq.n	8008d06 <_strtol_l.constprop.0+0x1a>
 8008dc4:	1e69      	subs	r1, r5, #1
 8008dc6:	e006      	b.n	8008dd6 <_strtol_l.constprop.0+0xea>
 8008dc8:	b106      	cbz	r6, 8008dcc <_strtol_l.constprop.0+0xe0>
 8008dca:	4240      	negs	r0, r0
 8008dcc:	f1b8 0f00 	cmp.w	r8, #0
 8008dd0:	d099      	beq.n	8008d06 <_strtol_l.constprop.0+0x1a>
 8008dd2:	2a00      	cmp	r2, #0
 8008dd4:	d1f6      	bne.n	8008dc4 <_strtol_l.constprop.0+0xd8>
 8008dd6:	f8c8 1000 	str.w	r1, [r8]
 8008dda:	e794      	b.n	8008d06 <_strtol_l.constprop.0+0x1a>
 8008ddc:	0800a121 	.word	0x0800a121

08008de0 <_strtol_r>:
 8008de0:	f7ff bf84 	b.w	8008cec <_strtol_l.constprop.0>

08008de4 <__ssputs_r>:
 8008de4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008de8:	461f      	mov	r7, r3
 8008dea:	688e      	ldr	r6, [r1, #8]
 8008dec:	4682      	mov	sl, r0
 8008dee:	42be      	cmp	r6, r7
 8008df0:	460c      	mov	r4, r1
 8008df2:	4690      	mov	r8, r2
 8008df4:	680b      	ldr	r3, [r1, #0]
 8008df6:	d82d      	bhi.n	8008e54 <__ssputs_r+0x70>
 8008df8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008dfc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008e00:	d026      	beq.n	8008e50 <__ssputs_r+0x6c>
 8008e02:	6965      	ldr	r5, [r4, #20]
 8008e04:	6909      	ldr	r1, [r1, #16]
 8008e06:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008e0a:	eba3 0901 	sub.w	r9, r3, r1
 8008e0e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008e12:	1c7b      	adds	r3, r7, #1
 8008e14:	444b      	add	r3, r9
 8008e16:	106d      	asrs	r5, r5, #1
 8008e18:	429d      	cmp	r5, r3
 8008e1a:	bf38      	it	cc
 8008e1c:	461d      	movcc	r5, r3
 8008e1e:	0553      	lsls	r3, r2, #21
 8008e20:	d527      	bpl.n	8008e72 <__ssputs_r+0x8e>
 8008e22:	4629      	mov	r1, r5
 8008e24:	f7fe fc2e 	bl	8007684 <_malloc_r>
 8008e28:	4606      	mov	r6, r0
 8008e2a:	b360      	cbz	r0, 8008e86 <__ssputs_r+0xa2>
 8008e2c:	464a      	mov	r2, r9
 8008e2e:	6921      	ldr	r1, [r4, #16]
 8008e30:	f7fd fd53 	bl	80068da <memcpy>
 8008e34:	89a3      	ldrh	r3, [r4, #12]
 8008e36:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008e3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008e3e:	81a3      	strh	r3, [r4, #12]
 8008e40:	6126      	str	r6, [r4, #16]
 8008e42:	444e      	add	r6, r9
 8008e44:	6026      	str	r6, [r4, #0]
 8008e46:	463e      	mov	r6, r7
 8008e48:	6165      	str	r5, [r4, #20]
 8008e4a:	eba5 0509 	sub.w	r5, r5, r9
 8008e4e:	60a5      	str	r5, [r4, #8]
 8008e50:	42be      	cmp	r6, r7
 8008e52:	d900      	bls.n	8008e56 <__ssputs_r+0x72>
 8008e54:	463e      	mov	r6, r7
 8008e56:	4632      	mov	r2, r6
 8008e58:	4641      	mov	r1, r8
 8008e5a:	6820      	ldr	r0, [r4, #0]
 8008e5c:	f000 fa23 	bl	80092a6 <memmove>
 8008e60:	2000      	movs	r0, #0
 8008e62:	68a3      	ldr	r3, [r4, #8]
 8008e64:	1b9b      	subs	r3, r3, r6
 8008e66:	60a3      	str	r3, [r4, #8]
 8008e68:	6823      	ldr	r3, [r4, #0]
 8008e6a:	4433      	add	r3, r6
 8008e6c:	6023      	str	r3, [r4, #0]
 8008e6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e72:	462a      	mov	r2, r5
 8008e74:	f000 fdf9 	bl	8009a6a <_realloc_r>
 8008e78:	4606      	mov	r6, r0
 8008e7a:	2800      	cmp	r0, #0
 8008e7c:	d1e0      	bne.n	8008e40 <__ssputs_r+0x5c>
 8008e7e:	4650      	mov	r0, sl
 8008e80:	6921      	ldr	r1, [r4, #16]
 8008e82:	f7fe fb8d 	bl	80075a0 <_free_r>
 8008e86:	230c      	movs	r3, #12
 8008e88:	f8ca 3000 	str.w	r3, [sl]
 8008e8c:	89a3      	ldrh	r3, [r4, #12]
 8008e8e:	f04f 30ff 	mov.w	r0, #4294967295
 8008e92:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008e96:	81a3      	strh	r3, [r4, #12]
 8008e98:	e7e9      	b.n	8008e6e <__ssputs_r+0x8a>
	...

08008e9c <_svfiprintf_r>:
 8008e9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ea0:	4698      	mov	r8, r3
 8008ea2:	898b      	ldrh	r3, [r1, #12]
 8008ea4:	4607      	mov	r7, r0
 8008ea6:	061b      	lsls	r3, r3, #24
 8008ea8:	460d      	mov	r5, r1
 8008eaa:	4614      	mov	r4, r2
 8008eac:	b09d      	sub	sp, #116	@ 0x74
 8008eae:	d510      	bpl.n	8008ed2 <_svfiprintf_r+0x36>
 8008eb0:	690b      	ldr	r3, [r1, #16]
 8008eb2:	b973      	cbnz	r3, 8008ed2 <_svfiprintf_r+0x36>
 8008eb4:	2140      	movs	r1, #64	@ 0x40
 8008eb6:	f7fe fbe5 	bl	8007684 <_malloc_r>
 8008eba:	6028      	str	r0, [r5, #0]
 8008ebc:	6128      	str	r0, [r5, #16]
 8008ebe:	b930      	cbnz	r0, 8008ece <_svfiprintf_r+0x32>
 8008ec0:	230c      	movs	r3, #12
 8008ec2:	603b      	str	r3, [r7, #0]
 8008ec4:	f04f 30ff 	mov.w	r0, #4294967295
 8008ec8:	b01d      	add	sp, #116	@ 0x74
 8008eca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ece:	2340      	movs	r3, #64	@ 0x40
 8008ed0:	616b      	str	r3, [r5, #20]
 8008ed2:	2300      	movs	r3, #0
 8008ed4:	9309      	str	r3, [sp, #36]	@ 0x24
 8008ed6:	2320      	movs	r3, #32
 8008ed8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008edc:	2330      	movs	r3, #48	@ 0x30
 8008ede:	f04f 0901 	mov.w	r9, #1
 8008ee2:	f8cd 800c 	str.w	r8, [sp, #12]
 8008ee6:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8009080 <_svfiprintf_r+0x1e4>
 8008eea:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008eee:	4623      	mov	r3, r4
 8008ef0:	469a      	mov	sl, r3
 8008ef2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008ef6:	b10a      	cbz	r2, 8008efc <_svfiprintf_r+0x60>
 8008ef8:	2a25      	cmp	r2, #37	@ 0x25
 8008efa:	d1f9      	bne.n	8008ef0 <_svfiprintf_r+0x54>
 8008efc:	ebba 0b04 	subs.w	fp, sl, r4
 8008f00:	d00b      	beq.n	8008f1a <_svfiprintf_r+0x7e>
 8008f02:	465b      	mov	r3, fp
 8008f04:	4622      	mov	r2, r4
 8008f06:	4629      	mov	r1, r5
 8008f08:	4638      	mov	r0, r7
 8008f0a:	f7ff ff6b 	bl	8008de4 <__ssputs_r>
 8008f0e:	3001      	adds	r0, #1
 8008f10:	f000 80a7 	beq.w	8009062 <_svfiprintf_r+0x1c6>
 8008f14:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008f16:	445a      	add	r2, fp
 8008f18:	9209      	str	r2, [sp, #36]	@ 0x24
 8008f1a:	f89a 3000 	ldrb.w	r3, [sl]
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	f000 809f 	beq.w	8009062 <_svfiprintf_r+0x1c6>
 8008f24:	2300      	movs	r3, #0
 8008f26:	f04f 32ff 	mov.w	r2, #4294967295
 8008f2a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008f2e:	f10a 0a01 	add.w	sl, sl, #1
 8008f32:	9304      	str	r3, [sp, #16]
 8008f34:	9307      	str	r3, [sp, #28]
 8008f36:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008f3a:	931a      	str	r3, [sp, #104]	@ 0x68
 8008f3c:	4654      	mov	r4, sl
 8008f3e:	2205      	movs	r2, #5
 8008f40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f44:	484e      	ldr	r0, [pc, #312]	@ (8009080 <_svfiprintf_r+0x1e4>)
 8008f46:	f7fd fcba 	bl	80068be <memchr>
 8008f4a:	9a04      	ldr	r2, [sp, #16]
 8008f4c:	b9d8      	cbnz	r0, 8008f86 <_svfiprintf_r+0xea>
 8008f4e:	06d0      	lsls	r0, r2, #27
 8008f50:	bf44      	itt	mi
 8008f52:	2320      	movmi	r3, #32
 8008f54:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008f58:	0711      	lsls	r1, r2, #28
 8008f5a:	bf44      	itt	mi
 8008f5c:	232b      	movmi	r3, #43	@ 0x2b
 8008f5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008f62:	f89a 3000 	ldrb.w	r3, [sl]
 8008f66:	2b2a      	cmp	r3, #42	@ 0x2a
 8008f68:	d015      	beq.n	8008f96 <_svfiprintf_r+0xfa>
 8008f6a:	4654      	mov	r4, sl
 8008f6c:	2000      	movs	r0, #0
 8008f6e:	f04f 0c0a 	mov.w	ip, #10
 8008f72:	9a07      	ldr	r2, [sp, #28]
 8008f74:	4621      	mov	r1, r4
 8008f76:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008f7a:	3b30      	subs	r3, #48	@ 0x30
 8008f7c:	2b09      	cmp	r3, #9
 8008f7e:	d94b      	bls.n	8009018 <_svfiprintf_r+0x17c>
 8008f80:	b1b0      	cbz	r0, 8008fb0 <_svfiprintf_r+0x114>
 8008f82:	9207      	str	r2, [sp, #28]
 8008f84:	e014      	b.n	8008fb0 <_svfiprintf_r+0x114>
 8008f86:	eba0 0308 	sub.w	r3, r0, r8
 8008f8a:	fa09 f303 	lsl.w	r3, r9, r3
 8008f8e:	4313      	orrs	r3, r2
 8008f90:	46a2      	mov	sl, r4
 8008f92:	9304      	str	r3, [sp, #16]
 8008f94:	e7d2      	b.n	8008f3c <_svfiprintf_r+0xa0>
 8008f96:	9b03      	ldr	r3, [sp, #12]
 8008f98:	1d19      	adds	r1, r3, #4
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	9103      	str	r1, [sp, #12]
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	bfbb      	ittet	lt
 8008fa2:	425b      	neglt	r3, r3
 8008fa4:	f042 0202 	orrlt.w	r2, r2, #2
 8008fa8:	9307      	strge	r3, [sp, #28]
 8008faa:	9307      	strlt	r3, [sp, #28]
 8008fac:	bfb8      	it	lt
 8008fae:	9204      	strlt	r2, [sp, #16]
 8008fb0:	7823      	ldrb	r3, [r4, #0]
 8008fb2:	2b2e      	cmp	r3, #46	@ 0x2e
 8008fb4:	d10a      	bne.n	8008fcc <_svfiprintf_r+0x130>
 8008fb6:	7863      	ldrb	r3, [r4, #1]
 8008fb8:	2b2a      	cmp	r3, #42	@ 0x2a
 8008fba:	d132      	bne.n	8009022 <_svfiprintf_r+0x186>
 8008fbc:	9b03      	ldr	r3, [sp, #12]
 8008fbe:	3402      	adds	r4, #2
 8008fc0:	1d1a      	adds	r2, r3, #4
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	9203      	str	r2, [sp, #12]
 8008fc6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008fca:	9305      	str	r3, [sp, #20]
 8008fcc:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8009084 <_svfiprintf_r+0x1e8>
 8008fd0:	2203      	movs	r2, #3
 8008fd2:	4650      	mov	r0, sl
 8008fd4:	7821      	ldrb	r1, [r4, #0]
 8008fd6:	f7fd fc72 	bl	80068be <memchr>
 8008fda:	b138      	cbz	r0, 8008fec <_svfiprintf_r+0x150>
 8008fdc:	2240      	movs	r2, #64	@ 0x40
 8008fde:	9b04      	ldr	r3, [sp, #16]
 8008fe0:	eba0 000a 	sub.w	r0, r0, sl
 8008fe4:	4082      	lsls	r2, r0
 8008fe6:	4313      	orrs	r3, r2
 8008fe8:	3401      	adds	r4, #1
 8008fea:	9304      	str	r3, [sp, #16]
 8008fec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ff0:	2206      	movs	r2, #6
 8008ff2:	4825      	ldr	r0, [pc, #148]	@ (8009088 <_svfiprintf_r+0x1ec>)
 8008ff4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008ff8:	f7fd fc61 	bl	80068be <memchr>
 8008ffc:	2800      	cmp	r0, #0
 8008ffe:	d036      	beq.n	800906e <_svfiprintf_r+0x1d2>
 8009000:	4b22      	ldr	r3, [pc, #136]	@ (800908c <_svfiprintf_r+0x1f0>)
 8009002:	bb1b      	cbnz	r3, 800904c <_svfiprintf_r+0x1b0>
 8009004:	9b03      	ldr	r3, [sp, #12]
 8009006:	3307      	adds	r3, #7
 8009008:	f023 0307 	bic.w	r3, r3, #7
 800900c:	3308      	adds	r3, #8
 800900e:	9303      	str	r3, [sp, #12]
 8009010:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009012:	4433      	add	r3, r6
 8009014:	9309      	str	r3, [sp, #36]	@ 0x24
 8009016:	e76a      	b.n	8008eee <_svfiprintf_r+0x52>
 8009018:	460c      	mov	r4, r1
 800901a:	2001      	movs	r0, #1
 800901c:	fb0c 3202 	mla	r2, ip, r2, r3
 8009020:	e7a8      	b.n	8008f74 <_svfiprintf_r+0xd8>
 8009022:	2300      	movs	r3, #0
 8009024:	f04f 0c0a 	mov.w	ip, #10
 8009028:	4619      	mov	r1, r3
 800902a:	3401      	adds	r4, #1
 800902c:	9305      	str	r3, [sp, #20]
 800902e:	4620      	mov	r0, r4
 8009030:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009034:	3a30      	subs	r2, #48	@ 0x30
 8009036:	2a09      	cmp	r2, #9
 8009038:	d903      	bls.n	8009042 <_svfiprintf_r+0x1a6>
 800903a:	2b00      	cmp	r3, #0
 800903c:	d0c6      	beq.n	8008fcc <_svfiprintf_r+0x130>
 800903e:	9105      	str	r1, [sp, #20]
 8009040:	e7c4      	b.n	8008fcc <_svfiprintf_r+0x130>
 8009042:	4604      	mov	r4, r0
 8009044:	2301      	movs	r3, #1
 8009046:	fb0c 2101 	mla	r1, ip, r1, r2
 800904a:	e7f0      	b.n	800902e <_svfiprintf_r+0x192>
 800904c:	ab03      	add	r3, sp, #12
 800904e:	9300      	str	r3, [sp, #0]
 8009050:	462a      	mov	r2, r5
 8009052:	4638      	mov	r0, r7
 8009054:	4b0e      	ldr	r3, [pc, #56]	@ (8009090 <_svfiprintf_r+0x1f4>)
 8009056:	a904      	add	r1, sp, #16
 8009058:	f7fc fbcc 	bl	80057f4 <_printf_float>
 800905c:	1c42      	adds	r2, r0, #1
 800905e:	4606      	mov	r6, r0
 8009060:	d1d6      	bne.n	8009010 <_svfiprintf_r+0x174>
 8009062:	89ab      	ldrh	r3, [r5, #12]
 8009064:	065b      	lsls	r3, r3, #25
 8009066:	f53f af2d 	bmi.w	8008ec4 <_svfiprintf_r+0x28>
 800906a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800906c:	e72c      	b.n	8008ec8 <_svfiprintf_r+0x2c>
 800906e:	ab03      	add	r3, sp, #12
 8009070:	9300      	str	r3, [sp, #0]
 8009072:	462a      	mov	r2, r5
 8009074:	4638      	mov	r0, r7
 8009076:	4b06      	ldr	r3, [pc, #24]	@ (8009090 <_svfiprintf_r+0x1f4>)
 8009078:	a904      	add	r1, sp, #16
 800907a:	f7fc fe59 	bl	8005d30 <_printf_i>
 800907e:	e7ed      	b.n	800905c <_svfiprintf_r+0x1c0>
 8009080:	0800a221 	.word	0x0800a221
 8009084:	0800a227 	.word	0x0800a227
 8009088:	0800a22b 	.word	0x0800a22b
 800908c:	080057f5 	.word	0x080057f5
 8009090:	08008de5 	.word	0x08008de5

08009094 <__sflush_r>:
 8009094:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800909a:	0716      	lsls	r6, r2, #28
 800909c:	4605      	mov	r5, r0
 800909e:	460c      	mov	r4, r1
 80090a0:	d454      	bmi.n	800914c <__sflush_r+0xb8>
 80090a2:	684b      	ldr	r3, [r1, #4]
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	dc02      	bgt.n	80090ae <__sflush_r+0x1a>
 80090a8:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	dd48      	ble.n	8009140 <__sflush_r+0xac>
 80090ae:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80090b0:	2e00      	cmp	r6, #0
 80090b2:	d045      	beq.n	8009140 <__sflush_r+0xac>
 80090b4:	2300      	movs	r3, #0
 80090b6:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80090ba:	682f      	ldr	r7, [r5, #0]
 80090bc:	6a21      	ldr	r1, [r4, #32]
 80090be:	602b      	str	r3, [r5, #0]
 80090c0:	d030      	beq.n	8009124 <__sflush_r+0x90>
 80090c2:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80090c4:	89a3      	ldrh	r3, [r4, #12]
 80090c6:	0759      	lsls	r1, r3, #29
 80090c8:	d505      	bpl.n	80090d6 <__sflush_r+0x42>
 80090ca:	6863      	ldr	r3, [r4, #4]
 80090cc:	1ad2      	subs	r2, r2, r3
 80090ce:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80090d0:	b10b      	cbz	r3, 80090d6 <__sflush_r+0x42>
 80090d2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80090d4:	1ad2      	subs	r2, r2, r3
 80090d6:	2300      	movs	r3, #0
 80090d8:	4628      	mov	r0, r5
 80090da:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80090dc:	6a21      	ldr	r1, [r4, #32]
 80090de:	47b0      	blx	r6
 80090e0:	1c43      	adds	r3, r0, #1
 80090e2:	89a3      	ldrh	r3, [r4, #12]
 80090e4:	d106      	bne.n	80090f4 <__sflush_r+0x60>
 80090e6:	6829      	ldr	r1, [r5, #0]
 80090e8:	291d      	cmp	r1, #29
 80090ea:	d82b      	bhi.n	8009144 <__sflush_r+0xb0>
 80090ec:	4a28      	ldr	r2, [pc, #160]	@ (8009190 <__sflush_r+0xfc>)
 80090ee:	410a      	asrs	r2, r1
 80090f0:	07d6      	lsls	r6, r2, #31
 80090f2:	d427      	bmi.n	8009144 <__sflush_r+0xb0>
 80090f4:	2200      	movs	r2, #0
 80090f6:	6062      	str	r2, [r4, #4]
 80090f8:	6922      	ldr	r2, [r4, #16]
 80090fa:	04d9      	lsls	r1, r3, #19
 80090fc:	6022      	str	r2, [r4, #0]
 80090fe:	d504      	bpl.n	800910a <__sflush_r+0x76>
 8009100:	1c42      	adds	r2, r0, #1
 8009102:	d101      	bne.n	8009108 <__sflush_r+0x74>
 8009104:	682b      	ldr	r3, [r5, #0]
 8009106:	b903      	cbnz	r3, 800910a <__sflush_r+0x76>
 8009108:	6560      	str	r0, [r4, #84]	@ 0x54
 800910a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800910c:	602f      	str	r7, [r5, #0]
 800910e:	b1b9      	cbz	r1, 8009140 <__sflush_r+0xac>
 8009110:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009114:	4299      	cmp	r1, r3
 8009116:	d002      	beq.n	800911e <__sflush_r+0x8a>
 8009118:	4628      	mov	r0, r5
 800911a:	f7fe fa41 	bl	80075a0 <_free_r>
 800911e:	2300      	movs	r3, #0
 8009120:	6363      	str	r3, [r4, #52]	@ 0x34
 8009122:	e00d      	b.n	8009140 <__sflush_r+0xac>
 8009124:	2301      	movs	r3, #1
 8009126:	4628      	mov	r0, r5
 8009128:	47b0      	blx	r6
 800912a:	4602      	mov	r2, r0
 800912c:	1c50      	adds	r0, r2, #1
 800912e:	d1c9      	bne.n	80090c4 <__sflush_r+0x30>
 8009130:	682b      	ldr	r3, [r5, #0]
 8009132:	2b00      	cmp	r3, #0
 8009134:	d0c6      	beq.n	80090c4 <__sflush_r+0x30>
 8009136:	2b1d      	cmp	r3, #29
 8009138:	d001      	beq.n	800913e <__sflush_r+0xaa>
 800913a:	2b16      	cmp	r3, #22
 800913c:	d11d      	bne.n	800917a <__sflush_r+0xe6>
 800913e:	602f      	str	r7, [r5, #0]
 8009140:	2000      	movs	r0, #0
 8009142:	e021      	b.n	8009188 <__sflush_r+0xf4>
 8009144:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009148:	b21b      	sxth	r3, r3
 800914a:	e01a      	b.n	8009182 <__sflush_r+0xee>
 800914c:	690f      	ldr	r7, [r1, #16]
 800914e:	2f00      	cmp	r7, #0
 8009150:	d0f6      	beq.n	8009140 <__sflush_r+0xac>
 8009152:	0793      	lsls	r3, r2, #30
 8009154:	bf18      	it	ne
 8009156:	2300      	movne	r3, #0
 8009158:	680e      	ldr	r6, [r1, #0]
 800915a:	bf08      	it	eq
 800915c:	694b      	ldreq	r3, [r1, #20]
 800915e:	1bf6      	subs	r6, r6, r7
 8009160:	600f      	str	r7, [r1, #0]
 8009162:	608b      	str	r3, [r1, #8]
 8009164:	2e00      	cmp	r6, #0
 8009166:	ddeb      	ble.n	8009140 <__sflush_r+0xac>
 8009168:	4633      	mov	r3, r6
 800916a:	463a      	mov	r2, r7
 800916c:	4628      	mov	r0, r5
 800916e:	6a21      	ldr	r1, [r4, #32]
 8009170:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8009174:	47e0      	blx	ip
 8009176:	2800      	cmp	r0, #0
 8009178:	dc07      	bgt.n	800918a <__sflush_r+0xf6>
 800917a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800917e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009182:	f04f 30ff 	mov.w	r0, #4294967295
 8009186:	81a3      	strh	r3, [r4, #12]
 8009188:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800918a:	4407      	add	r7, r0
 800918c:	1a36      	subs	r6, r6, r0
 800918e:	e7e9      	b.n	8009164 <__sflush_r+0xd0>
 8009190:	dfbffffe 	.word	0xdfbffffe

08009194 <_fflush_r>:
 8009194:	b538      	push	{r3, r4, r5, lr}
 8009196:	690b      	ldr	r3, [r1, #16]
 8009198:	4605      	mov	r5, r0
 800919a:	460c      	mov	r4, r1
 800919c:	b913      	cbnz	r3, 80091a4 <_fflush_r+0x10>
 800919e:	2500      	movs	r5, #0
 80091a0:	4628      	mov	r0, r5
 80091a2:	bd38      	pop	{r3, r4, r5, pc}
 80091a4:	b118      	cbz	r0, 80091ae <_fflush_r+0x1a>
 80091a6:	6a03      	ldr	r3, [r0, #32]
 80091a8:	b90b      	cbnz	r3, 80091ae <_fflush_r+0x1a>
 80091aa:	f7fd f97d 	bl	80064a8 <__sinit>
 80091ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d0f3      	beq.n	800919e <_fflush_r+0xa>
 80091b6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80091b8:	07d0      	lsls	r0, r2, #31
 80091ba:	d404      	bmi.n	80091c6 <_fflush_r+0x32>
 80091bc:	0599      	lsls	r1, r3, #22
 80091be:	d402      	bmi.n	80091c6 <_fflush_r+0x32>
 80091c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80091c2:	f7fd fb7a 	bl	80068ba <__retarget_lock_acquire_recursive>
 80091c6:	4628      	mov	r0, r5
 80091c8:	4621      	mov	r1, r4
 80091ca:	f7ff ff63 	bl	8009094 <__sflush_r>
 80091ce:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80091d0:	4605      	mov	r5, r0
 80091d2:	07da      	lsls	r2, r3, #31
 80091d4:	d4e4      	bmi.n	80091a0 <_fflush_r+0xc>
 80091d6:	89a3      	ldrh	r3, [r4, #12]
 80091d8:	059b      	lsls	r3, r3, #22
 80091da:	d4e1      	bmi.n	80091a0 <_fflush_r+0xc>
 80091dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80091de:	f7fd fb6d 	bl	80068bc <__retarget_lock_release_recursive>
 80091e2:	e7dd      	b.n	80091a0 <_fflush_r+0xc>

080091e4 <__swhatbuf_r>:
 80091e4:	b570      	push	{r4, r5, r6, lr}
 80091e6:	460c      	mov	r4, r1
 80091e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80091ec:	4615      	mov	r5, r2
 80091ee:	2900      	cmp	r1, #0
 80091f0:	461e      	mov	r6, r3
 80091f2:	b096      	sub	sp, #88	@ 0x58
 80091f4:	da0c      	bge.n	8009210 <__swhatbuf_r+0x2c>
 80091f6:	89a3      	ldrh	r3, [r4, #12]
 80091f8:	2100      	movs	r1, #0
 80091fa:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80091fe:	bf14      	ite	ne
 8009200:	2340      	movne	r3, #64	@ 0x40
 8009202:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009206:	2000      	movs	r0, #0
 8009208:	6031      	str	r1, [r6, #0]
 800920a:	602b      	str	r3, [r5, #0]
 800920c:	b016      	add	sp, #88	@ 0x58
 800920e:	bd70      	pop	{r4, r5, r6, pc}
 8009210:	466a      	mov	r2, sp
 8009212:	f000 f875 	bl	8009300 <_fstat_r>
 8009216:	2800      	cmp	r0, #0
 8009218:	dbed      	blt.n	80091f6 <__swhatbuf_r+0x12>
 800921a:	9901      	ldr	r1, [sp, #4]
 800921c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009220:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009224:	4259      	negs	r1, r3
 8009226:	4159      	adcs	r1, r3
 8009228:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800922c:	e7eb      	b.n	8009206 <__swhatbuf_r+0x22>

0800922e <__smakebuf_r>:
 800922e:	898b      	ldrh	r3, [r1, #12]
 8009230:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009232:	079d      	lsls	r5, r3, #30
 8009234:	4606      	mov	r6, r0
 8009236:	460c      	mov	r4, r1
 8009238:	d507      	bpl.n	800924a <__smakebuf_r+0x1c>
 800923a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800923e:	6023      	str	r3, [r4, #0]
 8009240:	6123      	str	r3, [r4, #16]
 8009242:	2301      	movs	r3, #1
 8009244:	6163      	str	r3, [r4, #20]
 8009246:	b003      	add	sp, #12
 8009248:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800924a:	466a      	mov	r2, sp
 800924c:	ab01      	add	r3, sp, #4
 800924e:	f7ff ffc9 	bl	80091e4 <__swhatbuf_r>
 8009252:	9f00      	ldr	r7, [sp, #0]
 8009254:	4605      	mov	r5, r0
 8009256:	4639      	mov	r1, r7
 8009258:	4630      	mov	r0, r6
 800925a:	f7fe fa13 	bl	8007684 <_malloc_r>
 800925e:	b948      	cbnz	r0, 8009274 <__smakebuf_r+0x46>
 8009260:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009264:	059a      	lsls	r2, r3, #22
 8009266:	d4ee      	bmi.n	8009246 <__smakebuf_r+0x18>
 8009268:	f023 0303 	bic.w	r3, r3, #3
 800926c:	f043 0302 	orr.w	r3, r3, #2
 8009270:	81a3      	strh	r3, [r4, #12]
 8009272:	e7e2      	b.n	800923a <__smakebuf_r+0xc>
 8009274:	89a3      	ldrh	r3, [r4, #12]
 8009276:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800927a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800927e:	81a3      	strh	r3, [r4, #12]
 8009280:	9b01      	ldr	r3, [sp, #4]
 8009282:	6020      	str	r0, [r4, #0]
 8009284:	b15b      	cbz	r3, 800929e <__smakebuf_r+0x70>
 8009286:	4630      	mov	r0, r6
 8009288:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800928c:	f000 f84a 	bl	8009324 <_isatty_r>
 8009290:	b128      	cbz	r0, 800929e <__smakebuf_r+0x70>
 8009292:	89a3      	ldrh	r3, [r4, #12]
 8009294:	f023 0303 	bic.w	r3, r3, #3
 8009298:	f043 0301 	orr.w	r3, r3, #1
 800929c:	81a3      	strh	r3, [r4, #12]
 800929e:	89a3      	ldrh	r3, [r4, #12]
 80092a0:	431d      	orrs	r5, r3
 80092a2:	81a5      	strh	r5, [r4, #12]
 80092a4:	e7cf      	b.n	8009246 <__smakebuf_r+0x18>

080092a6 <memmove>:
 80092a6:	4288      	cmp	r0, r1
 80092a8:	b510      	push	{r4, lr}
 80092aa:	eb01 0402 	add.w	r4, r1, r2
 80092ae:	d902      	bls.n	80092b6 <memmove+0x10>
 80092b0:	4284      	cmp	r4, r0
 80092b2:	4623      	mov	r3, r4
 80092b4:	d807      	bhi.n	80092c6 <memmove+0x20>
 80092b6:	1e43      	subs	r3, r0, #1
 80092b8:	42a1      	cmp	r1, r4
 80092ba:	d008      	beq.n	80092ce <memmove+0x28>
 80092bc:	f811 2b01 	ldrb.w	r2, [r1], #1
 80092c0:	f803 2f01 	strb.w	r2, [r3, #1]!
 80092c4:	e7f8      	b.n	80092b8 <memmove+0x12>
 80092c6:	4601      	mov	r1, r0
 80092c8:	4402      	add	r2, r0
 80092ca:	428a      	cmp	r2, r1
 80092cc:	d100      	bne.n	80092d0 <memmove+0x2a>
 80092ce:	bd10      	pop	{r4, pc}
 80092d0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80092d4:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80092d8:	e7f7      	b.n	80092ca <memmove+0x24>

080092da <strncmp>:
 80092da:	b510      	push	{r4, lr}
 80092dc:	b16a      	cbz	r2, 80092fa <strncmp+0x20>
 80092de:	3901      	subs	r1, #1
 80092e0:	1884      	adds	r4, r0, r2
 80092e2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80092e6:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80092ea:	429a      	cmp	r2, r3
 80092ec:	d103      	bne.n	80092f6 <strncmp+0x1c>
 80092ee:	42a0      	cmp	r0, r4
 80092f0:	d001      	beq.n	80092f6 <strncmp+0x1c>
 80092f2:	2a00      	cmp	r2, #0
 80092f4:	d1f5      	bne.n	80092e2 <strncmp+0x8>
 80092f6:	1ad0      	subs	r0, r2, r3
 80092f8:	bd10      	pop	{r4, pc}
 80092fa:	4610      	mov	r0, r2
 80092fc:	e7fc      	b.n	80092f8 <strncmp+0x1e>
	...

08009300 <_fstat_r>:
 8009300:	b538      	push	{r3, r4, r5, lr}
 8009302:	2300      	movs	r3, #0
 8009304:	4d06      	ldr	r5, [pc, #24]	@ (8009320 <_fstat_r+0x20>)
 8009306:	4604      	mov	r4, r0
 8009308:	4608      	mov	r0, r1
 800930a:	4611      	mov	r1, r2
 800930c:	602b      	str	r3, [r5, #0]
 800930e:	f7f8 f89f 	bl	8001450 <_fstat>
 8009312:	1c43      	adds	r3, r0, #1
 8009314:	d102      	bne.n	800931c <_fstat_r+0x1c>
 8009316:	682b      	ldr	r3, [r5, #0]
 8009318:	b103      	cbz	r3, 800931c <_fstat_r+0x1c>
 800931a:	6023      	str	r3, [r4, #0]
 800931c:	bd38      	pop	{r3, r4, r5, pc}
 800931e:	bf00      	nop
 8009320:	20003154 	.word	0x20003154

08009324 <_isatty_r>:
 8009324:	b538      	push	{r3, r4, r5, lr}
 8009326:	2300      	movs	r3, #0
 8009328:	4d05      	ldr	r5, [pc, #20]	@ (8009340 <_isatty_r+0x1c>)
 800932a:	4604      	mov	r4, r0
 800932c:	4608      	mov	r0, r1
 800932e:	602b      	str	r3, [r5, #0]
 8009330:	f7f8 f89d 	bl	800146e <_isatty>
 8009334:	1c43      	adds	r3, r0, #1
 8009336:	d102      	bne.n	800933e <_isatty_r+0x1a>
 8009338:	682b      	ldr	r3, [r5, #0]
 800933a:	b103      	cbz	r3, 800933e <_isatty_r+0x1a>
 800933c:	6023      	str	r3, [r4, #0]
 800933e:	bd38      	pop	{r3, r4, r5, pc}
 8009340:	20003154 	.word	0x20003154

08009344 <_sbrk_r>:
 8009344:	b538      	push	{r3, r4, r5, lr}
 8009346:	2300      	movs	r3, #0
 8009348:	4d05      	ldr	r5, [pc, #20]	@ (8009360 <_sbrk_r+0x1c>)
 800934a:	4604      	mov	r4, r0
 800934c:	4608      	mov	r0, r1
 800934e:	602b      	str	r3, [r5, #0]
 8009350:	f7f8 f8a4 	bl	800149c <_sbrk>
 8009354:	1c43      	adds	r3, r0, #1
 8009356:	d102      	bne.n	800935e <_sbrk_r+0x1a>
 8009358:	682b      	ldr	r3, [r5, #0]
 800935a:	b103      	cbz	r3, 800935e <_sbrk_r+0x1a>
 800935c:	6023      	str	r3, [r4, #0]
 800935e:	bd38      	pop	{r3, r4, r5, pc}
 8009360:	20003154 	.word	0x20003154

08009364 <nan>:
 8009364:	2000      	movs	r0, #0
 8009366:	4901      	ldr	r1, [pc, #4]	@ (800936c <nan+0x8>)
 8009368:	4770      	bx	lr
 800936a:	bf00      	nop
 800936c:	7ff80000 	.word	0x7ff80000

08009370 <__assert_func>:
 8009370:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009372:	4614      	mov	r4, r2
 8009374:	461a      	mov	r2, r3
 8009376:	4b09      	ldr	r3, [pc, #36]	@ (800939c <__assert_func+0x2c>)
 8009378:	4605      	mov	r5, r0
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	68d8      	ldr	r0, [r3, #12]
 800937e:	b954      	cbnz	r4, 8009396 <__assert_func+0x26>
 8009380:	4b07      	ldr	r3, [pc, #28]	@ (80093a0 <__assert_func+0x30>)
 8009382:	461c      	mov	r4, r3
 8009384:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009388:	9100      	str	r1, [sp, #0]
 800938a:	462b      	mov	r3, r5
 800938c:	4905      	ldr	r1, [pc, #20]	@ (80093a4 <__assert_func+0x34>)
 800938e:	f000 fba7 	bl	8009ae0 <fiprintf>
 8009392:	f000 fbb7 	bl	8009b04 <abort>
 8009396:	4b04      	ldr	r3, [pc, #16]	@ (80093a8 <__assert_func+0x38>)
 8009398:	e7f4      	b.n	8009384 <__assert_func+0x14>
 800939a:	bf00      	nop
 800939c:	20000420 	.word	0x20000420
 80093a0:	0800a275 	.word	0x0800a275
 80093a4:	0800a247 	.word	0x0800a247
 80093a8:	0800a23a 	.word	0x0800a23a

080093ac <_calloc_r>:
 80093ac:	b570      	push	{r4, r5, r6, lr}
 80093ae:	fba1 5402 	umull	r5, r4, r1, r2
 80093b2:	b93c      	cbnz	r4, 80093c4 <_calloc_r+0x18>
 80093b4:	4629      	mov	r1, r5
 80093b6:	f7fe f965 	bl	8007684 <_malloc_r>
 80093ba:	4606      	mov	r6, r0
 80093bc:	b928      	cbnz	r0, 80093ca <_calloc_r+0x1e>
 80093be:	2600      	movs	r6, #0
 80093c0:	4630      	mov	r0, r6
 80093c2:	bd70      	pop	{r4, r5, r6, pc}
 80093c4:	220c      	movs	r2, #12
 80093c6:	6002      	str	r2, [r0, #0]
 80093c8:	e7f9      	b.n	80093be <_calloc_r+0x12>
 80093ca:	462a      	mov	r2, r5
 80093cc:	4621      	mov	r1, r4
 80093ce:	f7fd f9f7 	bl	80067c0 <memset>
 80093d2:	e7f5      	b.n	80093c0 <_calloc_r+0x14>

080093d4 <rshift>:
 80093d4:	6903      	ldr	r3, [r0, #16]
 80093d6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80093da:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80093de:	f100 0414 	add.w	r4, r0, #20
 80093e2:	ea4f 1261 	mov.w	r2, r1, asr #5
 80093e6:	dd46      	ble.n	8009476 <rshift+0xa2>
 80093e8:	f011 011f 	ands.w	r1, r1, #31
 80093ec:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80093f0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80093f4:	d10c      	bne.n	8009410 <rshift+0x3c>
 80093f6:	4629      	mov	r1, r5
 80093f8:	f100 0710 	add.w	r7, r0, #16
 80093fc:	42b1      	cmp	r1, r6
 80093fe:	d335      	bcc.n	800946c <rshift+0x98>
 8009400:	1a9b      	subs	r3, r3, r2
 8009402:	009b      	lsls	r3, r3, #2
 8009404:	1eea      	subs	r2, r5, #3
 8009406:	4296      	cmp	r6, r2
 8009408:	bf38      	it	cc
 800940a:	2300      	movcc	r3, #0
 800940c:	4423      	add	r3, r4
 800940e:	e015      	b.n	800943c <rshift+0x68>
 8009410:	46a1      	mov	r9, r4
 8009412:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009416:	f1c1 0820 	rsb	r8, r1, #32
 800941a:	40cf      	lsrs	r7, r1
 800941c:	f105 0e04 	add.w	lr, r5, #4
 8009420:	4576      	cmp	r6, lr
 8009422:	46f4      	mov	ip, lr
 8009424:	d816      	bhi.n	8009454 <rshift+0x80>
 8009426:	1a9a      	subs	r2, r3, r2
 8009428:	0092      	lsls	r2, r2, #2
 800942a:	3a04      	subs	r2, #4
 800942c:	3501      	adds	r5, #1
 800942e:	42ae      	cmp	r6, r5
 8009430:	bf38      	it	cc
 8009432:	2200      	movcc	r2, #0
 8009434:	18a3      	adds	r3, r4, r2
 8009436:	50a7      	str	r7, [r4, r2]
 8009438:	b107      	cbz	r7, 800943c <rshift+0x68>
 800943a:	3304      	adds	r3, #4
 800943c:	42a3      	cmp	r3, r4
 800943e:	eba3 0204 	sub.w	r2, r3, r4
 8009442:	bf08      	it	eq
 8009444:	2300      	moveq	r3, #0
 8009446:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800944a:	6102      	str	r2, [r0, #16]
 800944c:	bf08      	it	eq
 800944e:	6143      	streq	r3, [r0, #20]
 8009450:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009454:	f8dc c000 	ldr.w	ip, [ip]
 8009458:	fa0c fc08 	lsl.w	ip, ip, r8
 800945c:	ea4c 0707 	orr.w	r7, ip, r7
 8009460:	f849 7b04 	str.w	r7, [r9], #4
 8009464:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009468:	40cf      	lsrs	r7, r1
 800946a:	e7d9      	b.n	8009420 <rshift+0x4c>
 800946c:	f851 cb04 	ldr.w	ip, [r1], #4
 8009470:	f847 cf04 	str.w	ip, [r7, #4]!
 8009474:	e7c2      	b.n	80093fc <rshift+0x28>
 8009476:	4623      	mov	r3, r4
 8009478:	e7e0      	b.n	800943c <rshift+0x68>

0800947a <__hexdig_fun>:
 800947a:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800947e:	2b09      	cmp	r3, #9
 8009480:	d802      	bhi.n	8009488 <__hexdig_fun+0xe>
 8009482:	3820      	subs	r0, #32
 8009484:	b2c0      	uxtb	r0, r0
 8009486:	4770      	bx	lr
 8009488:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800948c:	2b05      	cmp	r3, #5
 800948e:	d801      	bhi.n	8009494 <__hexdig_fun+0x1a>
 8009490:	3847      	subs	r0, #71	@ 0x47
 8009492:	e7f7      	b.n	8009484 <__hexdig_fun+0xa>
 8009494:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8009498:	2b05      	cmp	r3, #5
 800949a:	d801      	bhi.n	80094a0 <__hexdig_fun+0x26>
 800949c:	3827      	subs	r0, #39	@ 0x27
 800949e:	e7f1      	b.n	8009484 <__hexdig_fun+0xa>
 80094a0:	2000      	movs	r0, #0
 80094a2:	4770      	bx	lr

080094a4 <__gethex>:
 80094a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094a8:	468a      	mov	sl, r1
 80094aa:	4690      	mov	r8, r2
 80094ac:	b085      	sub	sp, #20
 80094ae:	9302      	str	r3, [sp, #8]
 80094b0:	680b      	ldr	r3, [r1, #0]
 80094b2:	9001      	str	r0, [sp, #4]
 80094b4:	1c9c      	adds	r4, r3, #2
 80094b6:	46a1      	mov	r9, r4
 80094b8:	f814 0b01 	ldrb.w	r0, [r4], #1
 80094bc:	2830      	cmp	r0, #48	@ 0x30
 80094be:	d0fa      	beq.n	80094b6 <__gethex+0x12>
 80094c0:	eba9 0303 	sub.w	r3, r9, r3
 80094c4:	f1a3 0b02 	sub.w	fp, r3, #2
 80094c8:	f7ff ffd7 	bl	800947a <__hexdig_fun>
 80094cc:	4605      	mov	r5, r0
 80094ce:	2800      	cmp	r0, #0
 80094d0:	d168      	bne.n	80095a4 <__gethex+0x100>
 80094d2:	2201      	movs	r2, #1
 80094d4:	4648      	mov	r0, r9
 80094d6:	499f      	ldr	r1, [pc, #636]	@ (8009754 <__gethex+0x2b0>)
 80094d8:	f7ff feff 	bl	80092da <strncmp>
 80094dc:	4607      	mov	r7, r0
 80094de:	2800      	cmp	r0, #0
 80094e0:	d167      	bne.n	80095b2 <__gethex+0x10e>
 80094e2:	f899 0001 	ldrb.w	r0, [r9, #1]
 80094e6:	4626      	mov	r6, r4
 80094e8:	f7ff ffc7 	bl	800947a <__hexdig_fun>
 80094ec:	2800      	cmp	r0, #0
 80094ee:	d062      	beq.n	80095b6 <__gethex+0x112>
 80094f0:	4623      	mov	r3, r4
 80094f2:	7818      	ldrb	r0, [r3, #0]
 80094f4:	4699      	mov	r9, r3
 80094f6:	2830      	cmp	r0, #48	@ 0x30
 80094f8:	f103 0301 	add.w	r3, r3, #1
 80094fc:	d0f9      	beq.n	80094f2 <__gethex+0x4e>
 80094fe:	f7ff ffbc 	bl	800947a <__hexdig_fun>
 8009502:	fab0 f580 	clz	r5, r0
 8009506:	f04f 0b01 	mov.w	fp, #1
 800950a:	096d      	lsrs	r5, r5, #5
 800950c:	464a      	mov	r2, r9
 800950e:	4616      	mov	r6, r2
 8009510:	7830      	ldrb	r0, [r6, #0]
 8009512:	3201      	adds	r2, #1
 8009514:	f7ff ffb1 	bl	800947a <__hexdig_fun>
 8009518:	2800      	cmp	r0, #0
 800951a:	d1f8      	bne.n	800950e <__gethex+0x6a>
 800951c:	2201      	movs	r2, #1
 800951e:	4630      	mov	r0, r6
 8009520:	498c      	ldr	r1, [pc, #560]	@ (8009754 <__gethex+0x2b0>)
 8009522:	f7ff feda 	bl	80092da <strncmp>
 8009526:	2800      	cmp	r0, #0
 8009528:	d13f      	bne.n	80095aa <__gethex+0x106>
 800952a:	b944      	cbnz	r4, 800953e <__gethex+0x9a>
 800952c:	1c74      	adds	r4, r6, #1
 800952e:	4622      	mov	r2, r4
 8009530:	4616      	mov	r6, r2
 8009532:	7830      	ldrb	r0, [r6, #0]
 8009534:	3201      	adds	r2, #1
 8009536:	f7ff ffa0 	bl	800947a <__hexdig_fun>
 800953a:	2800      	cmp	r0, #0
 800953c:	d1f8      	bne.n	8009530 <__gethex+0x8c>
 800953e:	1ba4      	subs	r4, r4, r6
 8009540:	00a7      	lsls	r7, r4, #2
 8009542:	7833      	ldrb	r3, [r6, #0]
 8009544:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8009548:	2b50      	cmp	r3, #80	@ 0x50
 800954a:	d13e      	bne.n	80095ca <__gethex+0x126>
 800954c:	7873      	ldrb	r3, [r6, #1]
 800954e:	2b2b      	cmp	r3, #43	@ 0x2b
 8009550:	d033      	beq.n	80095ba <__gethex+0x116>
 8009552:	2b2d      	cmp	r3, #45	@ 0x2d
 8009554:	d034      	beq.n	80095c0 <__gethex+0x11c>
 8009556:	2400      	movs	r4, #0
 8009558:	1c71      	adds	r1, r6, #1
 800955a:	7808      	ldrb	r0, [r1, #0]
 800955c:	f7ff ff8d 	bl	800947a <__hexdig_fun>
 8009560:	1e43      	subs	r3, r0, #1
 8009562:	b2db      	uxtb	r3, r3
 8009564:	2b18      	cmp	r3, #24
 8009566:	d830      	bhi.n	80095ca <__gethex+0x126>
 8009568:	f1a0 0210 	sub.w	r2, r0, #16
 800956c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009570:	f7ff ff83 	bl	800947a <__hexdig_fun>
 8009574:	f100 3cff 	add.w	ip, r0, #4294967295
 8009578:	fa5f fc8c 	uxtb.w	ip, ip
 800957c:	f1bc 0f18 	cmp.w	ip, #24
 8009580:	f04f 030a 	mov.w	r3, #10
 8009584:	d91e      	bls.n	80095c4 <__gethex+0x120>
 8009586:	b104      	cbz	r4, 800958a <__gethex+0xe6>
 8009588:	4252      	negs	r2, r2
 800958a:	4417      	add	r7, r2
 800958c:	f8ca 1000 	str.w	r1, [sl]
 8009590:	b1ed      	cbz	r5, 80095ce <__gethex+0x12a>
 8009592:	f1bb 0f00 	cmp.w	fp, #0
 8009596:	bf0c      	ite	eq
 8009598:	2506      	moveq	r5, #6
 800959a:	2500      	movne	r5, #0
 800959c:	4628      	mov	r0, r5
 800959e:	b005      	add	sp, #20
 80095a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095a4:	2500      	movs	r5, #0
 80095a6:	462c      	mov	r4, r5
 80095a8:	e7b0      	b.n	800950c <__gethex+0x68>
 80095aa:	2c00      	cmp	r4, #0
 80095ac:	d1c7      	bne.n	800953e <__gethex+0x9a>
 80095ae:	4627      	mov	r7, r4
 80095b0:	e7c7      	b.n	8009542 <__gethex+0x9e>
 80095b2:	464e      	mov	r6, r9
 80095b4:	462f      	mov	r7, r5
 80095b6:	2501      	movs	r5, #1
 80095b8:	e7c3      	b.n	8009542 <__gethex+0x9e>
 80095ba:	2400      	movs	r4, #0
 80095bc:	1cb1      	adds	r1, r6, #2
 80095be:	e7cc      	b.n	800955a <__gethex+0xb6>
 80095c0:	2401      	movs	r4, #1
 80095c2:	e7fb      	b.n	80095bc <__gethex+0x118>
 80095c4:	fb03 0002 	mla	r0, r3, r2, r0
 80095c8:	e7ce      	b.n	8009568 <__gethex+0xc4>
 80095ca:	4631      	mov	r1, r6
 80095cc:	e7de      	b.n	800958c <__gethex+0xe8>
 80095ce:	4629      	mov	r1, r5
 80095d0:	eba6 0309 	sub.w	r3, r6, r9
 80095d4:	3b01      	subs	r3, #1
 80095d6:	2b07      	cmp	r3, #7
 80095d8:	dc0a      	bgt.n	80095f0 <__gethex+0x14c>
 80095da:	9801      	ldr	r0, [sp, #4]
 80095dc:	f7fe f8de 	bl	800779c <_Balloc>
 80095e0:	4604      	mov	r4, r0
 80095e2:	b940      	cbnz	r0, 80095f6 <__gethex+0x152>
 80095e4:	4602      	mov	r2, r0
 80095e6:	21e4      	movs	r1, #228	@ 0xe4
 80095e8:	4b5b      	ldr	r3, [pc, #364]	@ (8009758 <__gethex+0x2b4>)
 80095ea:	485c      	ldr	r0, [pc, #368]	@ (800975c <__gethex+0x2b8>)
 80095ec:	f7ff fec0 	bl	8009370 <__assert_func>
 80095f0:	3101      	adds	r1, #1
 80095f2:	105b      	asrs	r3, r3, #1
 80095f4:	e7ef      	b.n	80095d6 <__gethex+0x132>
 80095f6:	2300      	movs	r3, #0
 80095f8:	f100 0a14 	add.w	sl, r0, #20
 80095fc:	4655      	mov	r5, sl
 80095fe:	469b      	mov	fp, r3
 8009600:	45b1      	cmp	r9, r6
 8009602:	d337      	bcc.n	8009674 <__gethex+0x1d0>
 8009604:	f845 bb04 	str.w	fp, [r5], #4
 8009608:	eba5 050a 	sub.w	r5, r5, sl
 800960c:	10ad      	asrs	r5, r5, #2
 800960e:	6125      	str	r5, [r4, #16]
 8009610:	4658      	mov	r0, fp
 8009612:	f7fe f9b5 	bl	8007980 <__hi0bits>
 8009616:	016d      	lsls	r5, r5, #5
 8009618:	f8d8 6000 	ldr.w	r6, [r8]
 800961c:	1a2d      	subs	r5, r5, r0
 800961e:	42b5      	cmp	r5, r6
 8009620:	dd54      	ble.n	80096cc <__gethex+0x228>
 8009622:	1bad      	subs	r5, r5, r6
 8009624:	4629      	mov	r1, r5
 8009626:	4620      	mov	r0, r4
 8009628:	f7fe fd3d 	bl	80080a6 <__any_on>
 800962c:	4681      	mov	r9, r0
 800962e:	b178      	cbz	r0, 8009650 <__gethex+0x1ac>
 8009630:	f04f 0901 	mov.w	r9, #1
 8009634:	1e6b      	subs	r3, r5, #1
 8009636:	1159      	asrs	r1, r3, #5
 8009638:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800963c:	f003 021f 	and.w	r2, r3, #31
 8009640:	fa09 f202 	lsl.w	r2, r9, r2
 8009644:	420a      	tst	r2, r1
 8009646:	d003      	beq.n	8009650 <__gethex+0x1ac>
 8009648:	454b      	cmp	r3, r9
 800964a:	dc36      	bgt.n	80096ba <__gethex+0x216>
 800964c:	f04f 0902 	mov.w	r9, #2
 8009650:	4629      	mov	r1, r5
 8009652:	4620      	mov	r0, r4
 8009654:	f7ff febe 	bl	80093d4 <rshift>
 8009658:	442f      	add	r7, r5
 800965a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800965e:	42bb      	cmp	r3, r7
 8009660:	da42      	bge.n	80096e8 <__gethex+0x244>
 8009662:	4621      	mov	r1, r4
 8009664:	9801      	ldr	r0, [sp, #4]
 8009666:	f7fe f8d9 	bl	800781c <_Bfree>
 800966a:	2300      	movs	r3, #0
 800966c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800966e:	25a3      	movs	r5, #163	@ 0xa3
 8009670:	6013      	str	r3, [r2, #0]
 8009672:	e793      	b.n	800959c <__gethex+0xf8>
 8009674:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8009678:	2a2e      	cmp	r2, #46	@ 0x2e
 800967a:	d012      	beq.n	80096a2 <__gethex+0x1fe>
 800967c:	2b20      	cmp	r3, #32
 800967e:	d104      	bne.n	800968a <__gethex+0x1e6>
 8009680:	f845 bb04 	str.w	fp, [r5], #4
 8009684:	f04f 0b00 	mov.w	fp, #0
 8009688:	465b      	mov	r3, fp
 800968a:	7830      	ldrb	r0, [r6, #0]
 800968c:	9303      	str	r3, [sp, #12]
 800968e:	f7ff fef4 	bl	800947a <__hexdig_fun>
 8009692:	9b03      	ldr	r3, [sp, #12]
 8009694:	f000 000f 	and.w	r0, r0, #15
 8009698:	4098      	lsls	r0, r3
 800969a:	ea4b 0b00 	orr.w	fp, fp, r0
 800969e:	3304      	adds	r3, #4
 80096a0:	e7ae      	b.n	8009600 <__gethex+0x15c>
 80096a2:	45b1      	cmp	r9, r6
 80096a4:	d8ea      	bhi.n	800967c <__gethex+0x1d8>
 80096a6:	2201      	movs	r2, #1
 80096a8:	4630      	mov	r0, r6
 80096aa:	492a      	ldr	r1, [pc, #168]	@ (8009754 <__gethex+0x2b0>)
 80096ac:	9303      	str	r3, [sp, #12]
 80096ae:	f7ff fe14 	bl	80092da <strncmp>
 80096b2:	9b03      	ldr	r3, [sp, #12]
 80096b4:	2800      	cmp	r0, #0
 80096b6:	d1e1      	bne.n	800967c <__gethex+0x1d8>
 80096b8:	e7a2      	b.n	8009600 <__gethex+0x15c>
 80096ba:	4620      	mov	r0, r4
 80096bc:	1ea9      	subs	r1, r5, #2
 80096be:	f7fe fcf2 	bl	80080a6 <__any_on>
 80096c2:	2800      	cmp	r0, #0
 80096c4:	d0c2      	beq.n	800964c <__gethex+0x1a8>
 80096c6:	f04f 0903 	mov.w	r9, #3
 80096ca:	e7c1      	b.n	8009650 <__gethex+0x1ac>
 80096cc:	da09      	bge.n	80096e2 <__gethex+0x23e>
 80096ce:	1b75      	subs	r5, r6, r5
 80096d0:	4621      	mov	r1, r4
 80096d2:	462a      	mov	r2, r5
 80096d4:	9801      	ldr	r0, [sp, #4]
 80096d6:	f7fe fab7 	bl	8007c48 <__lshift>
 80096da:	4604      	mov	r4, r0
 80096dc:	1b7f      	subs	r7, r7, r5
 80096de:	f100 0a14 	add.w	sl, r0, #20
 80096e2:	f04f 0900 	mov.w	r9, #0
 80096e6:	e7b8      	b.n	800965a <__gethex+0x1b6>
 80096e8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80096ec:	42bd      	cmp	r5, r7
 80096ee:	dd6f      	ble.n	80097d0 <__gethex+0x32c>
 80096f0:	1bed      	subs	r5, r5, r7
 80096f2:	42ae      	cmp	r6, r5
 80096f4:	dc34      	bgt.n	8009760 <__gethex+0x2bc>
 80096f6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80096fa:	2b02      	cmp	r3, #2
 80096fc:	d022      	beq.n	8009744 <__gethex+0x2a0>
 80096fe:	2b03      	cmp	r3, #3
 8009700:	d024      	beq.n	800974c <__gethex+0x2a8>
 8009702:	2b01      	cmp	r3, #1
 8009704:	d115      	bne.n	8009732 <__gethex+0x28e>
 8009706:	42ae      	cmp	r6, r5
 8009708:	d113      	bne.n	8009732 <__gethex+0x28e>
 800970a:	2e01      	cmp	r6, #1
 800970c:	d10b      	bne.n	8009726 <__gethex+0x282>
 800970e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009712:	9a02      	ldr	r2, [sp, #8]
 8009714:	2562      	movs	r5, #98	@ 0x62
 8009716:	6013      	str	r3, [r2, #0]
 8009718:	2301      	movs	r3, #1
 800971a:	6123      	str	r3, [r4, #16]
 800971c:	f8ca 3000 	str.w	r3, [sl]
 8009720:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009722:	601c      	str	r4, [r3, #0]
 8009724:	e73a      	b.n	800959c <__gethex+0xf8>
 8009726:	4620      	mov	r0, r4
 8009728:	1e71      	subs	r1, r6, #1
 800972a:	f7fe fcbc 	bl	80080a6 <__any_on>
 800972e:	2800      	cmp	r0, #0
 8009730:	d1ed      	bne.n	800970e <__gethex+0x26a>
 8009732:	4621      	mov	r1, r4
 8009734:	9801      	ldr	r0, [sp, #4]
 8009736:	f7fe f871 	bl	800781c <_Bfree>
 800973a:	2300      	movs	r3, #0
 800973c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800973e:	2550      	movs	r5, #80	@ 0x50
 8009740:	6013      	str	r3, [r2, #0]
 8009742:	e72b      	b.n	800959c <__gethex+0xf8>
 8009744:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009746:	2b00      	cmp	r3, #0
 8009748:	d1f3      	bne.n	8009732 <__gethex+0x28e>
 800974a:	e7e0      	b.n	800970e <__gethex+0x26a>
 800974c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800974e:	2b00      	cmp	r3, #0
 8009750:	d1dd      	bne.n	800970e <__gethex+0x26a>
 8009752:	e7ee      	b.n	8009732 <__gethex+0x28e>
 8009754:	0800a0c8 	.word	0x0800a0c8
 8009758:	08009f5f 	.word	0x08009f5f
 800975c:	0800a276 	.word	0x0800a276
 8009760:	1e6f      	subs	r7, r5, #1
 8009762:	f1b9 0f00 	cmp.w	r9, #0
 8009766:	d130      	bne.n	80097ca <__gethex+0x326>
 8009768:	b127      	cbz	r7, 8009774 <__gethex+0x2d0>
 800976a:	4639      	mov	r1, r7
 800976c:	4620      	mov	r0, r4
 800976e:	f7fe fc9a 	bl	80080a6 <__any_on>
 8009772:	4681      	mov	r9, r0
 8009774:	2301      	movs	r3, #1
 8009776:	4629      	mov	r1, r5
 8009778:	1b76      	subs	r6, r6, r5
 800977a:	2502      	movs	r5, #2
 800977c:	117a      	asrs	r2, r7, #5
 800977e:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8009782:	f007 071f 	and.w	r7, r7, #31
 8009786:	40bb      	lsls	r3, r7
 8009788:	4213      	tst	r3, r2
 800978a:	4620      	mov	r0, r4
 800978c:	bf18      	it	ne
 800978e:	f049 0902 	orrne.w	r9, r9, #2
 8009792:	f7ff fe1f 	bl	80093d4 <rshift>
 8009796:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800979a:	f1b9 0f00 	cmp.w	r9, #0
 800979e:	d047      	beq.n	8009830 <__gethex+0x38c>
 80097a0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80097a4:	2b02      	cmp	r3, #2
 80097a6:	d015      	beq.n	80097d4 <__gethex+0x330>
 80097a8:	2b03      	cmp	r3, #3
 80097aa:	d017      	beq.n	80097dc <__gethex+0x338>
 80097ac:	2b01      	cmp	r3, #1
 80097ae:	d109      	bne.n	80097c4 <__gethex+0x320>
 80097b0:	f019 0f02 	tst.w	r9, #2
 80097b4:	d006      	beq.n	80097c4 <__gethex+0x320>
 80097b6:	f8da 3000 	ldr.w	r3, [sl]
 80097ba:	ea49 0903 	orr.w	r9, r9, r3
 80097be:	f019 0f01 	tst.w	r9, #1
 80097c2:	d10e      	bne.n	80097e2 <__gethex+0x33e>
 80097c4:	f045 0510 	orr.w	r5, r5, #16
 80097c8:	e032      	b.n	8009830 <__gethex+0x38c>
 80097ca:	f04f 0901 	mov.w	r9, #1
 80097ce:	e7d1      	b.n	8009774 <__gethex+0x2d0>
 80097d0:	2501      	movs	r5, #1
 80097d2:	e7e2      	b.n	800979a <__gethex+0x2f6>
 80097d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80097d6:	f1c3 0301 	rsb	r3, r3, #1
 80097da:	930f      	str	r3, [sp, #60]	@ 0x3c
 80097dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d0f0      	beq.n	80097c4 <__gethex+0x320>
 80097e2:	f04f 0c00 	mov.w	ip, #0
 80097e6:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80097ea:	f104 0314 	add.w	r3, r4, #20
 80097ee:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80097f2:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80097f6:	4618      	mov	r0, r3
 80097f8:	f853 2b04 	ldr.w	r2, [r3], #4
 80097fc:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009800:	d01b      	beq.n	800983a <__gethex+0x396>
 8009802:	3201      	adds	r2, #1
 8009804:	6002      	str	r2, [r0, #0]
 8009806:	2d02      	cmp	r5, #2
 8009808:	f104 0314 	add.w	r3, r4, #20
 800980c:	d13c      	bne.n	8009888 <__gethex+0x3e4>
 800980e:	f8d8 2000 	ldr.w	r2, [r8]
 8009812:	3a01      	subs	r2, #1
 8009814:	42b2      	cmp	r2, r6
 8009816:	d109      	bne.n	800982c <__gethex+0x388>
 8009818:	2201      	movs	r2, #1
 800981a:	1171      	asrs	r1, r6, #5
 800981c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009820:	f006 061f 	and.w	r6, r6, #31
 8009824:	fa02 f606 	lsl.w	r6, r2, r6
 8009828:	421e      	tst	r6, r3
 800982a:	d13a      	bne.n	80098a2 <__gethex+0x3fe>
 800982c:	f045 0520 	orr.w	r5, r5, #32
 8009830:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009832:	601c      	str	r4, [r3, #0]
 8009834:	9b02      	ldr	r3, [sp, #8]
 8009836:	601f      	str	r7, [r3, #0]
 8009838:	e6b0      	b.n	800959c <__gethex+0xf8>
 800983a:	4299      	cmp	r1, r3
 800983c:	f843 cc04 	str.w	ip, [r3, #-4]
 8009840:	d8d9      	bhi.n	80097f6 <__gethex+0x352>
 8009842:	68a3      	ldr	r3, [r4, #8]
 8009844:	459b      	cmp	fp, r3
 8009846:	db17      	blt.n	8009878 <__gethex+0x3d4>
 8009848:	6861      	ldr	r1, [r4, #4]
 800984a:	9801      	ldr	r0, [sp, #4]
 800984c:	3101      	adds	r1, #1
 800984e:	f7fd ffa5 	bl	800779c <_Balloc>
 8009852:	4681      	mov	r9, r0
 8009854:	b918      	cbnz	r0, 800985e <__gethex+0x3ba>
 8009856:	4602      	mov	r2, r0
 8009858:	2184      	movs	r1, #132	@ 0x84
 800985a:	4b19      	ldr	r3, [pc, #100]	@ (80098c0 <__gethex+0x41c>)
 800985c:	e6c5      	b.n	80095ea <__gethex+0x146>
 800985e:	6922      	ldr	r2, [r4, #16]
 8009860:	f104 010c 	add.w	r1, r4, #12
 8009864:	3202      	adds	r2, #2
 8009866:	0092      	lsls	r2, r2, #2
 8009868:	300c      	adds	r0, #12
 800986a:	f7fd f836 	bl	80068da <memcpy>
 800986e:	4621      	mov	r1, r4
 8009870:	9801      	ldr	r0, [sp, #4]
 8009872:	f7fd ffd3 	bl	800781c <_Bfree>
 8009876:	464c      	mov	r4, r9
 8009878:	6923      	ldr	r3, [r4, #16]
 800987a:	1c5a      	adds	r2, r3, #1
 800987c:	6122      	str	r2, [r4, #16]
 800987e:	2201      	movs	r2, #1
 8009880:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009884:	615a      	str	r2, [r3, #20]
 8009886:	e7be      	b.n	8009806 <__gethex+0x362>
 8009888:	6922      	ldr	r2, [r4, #16]
 800988a:	455a      	cmp	r2, fp
 800988c:	dd0b      	ble.n	80098a6 <__gethex+0x402>
 800988e:	2101      	movs	r1, #1
 8009890:	4620      	mov	r0, r4
 8009892:	f7ff fd9f 	bl	80093d4 <rshift>
 8009896:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800989a:	3701      	adds	r7, #1
 800989c:	42bb      	cmp	r3, r7
 800989e:	f6ff aee0 	blt.w	8009662 <__gethex+0x1be>
 80098a2:	2501      	movs	r5, #1
 80098a4:	e7c2      	b.n	800982c <__gethex+0x388>
 80098a6:	f016 061f 	ands.w	r6, r6, #31
 80098aa:	d0fa      	beq.n	80098a2 <__gethex+0x3fe>
 80098ac:	4453      	add	r3, sl
 80098ae:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80098b2:	f7fe f865 	bl	8007980 <__hi0bits>
 80098b6:	f1c6 0620 	rsb	r6, r6, #32
 80098ba:	42b0      	cmp	r0, r6
 80098bc:	dbe7      	blt.n	800988e <__gethex+0x3ea>
 80098be:	e7f0      	b.n	80098a2 <__gethex+0x3fe>
 80098c0:	08009f5f 	.word	0x08009f5f

080098c4 <L_shift>:
 80098c4:	f1c2 0208 	rsb	r2, r2, #8
 80098c8:	0092      	lsls	r2, r2, #2
 80098ca:	b570      	push	{r4, r5, r6, lr}
 80098cc:	f1c2 0620 	rsb	r6, r2, #32
 80098d0:	6843      	ldr	r3, [r0, #4]
 80098d2:	6804      	ldr	r4, [r0, #0]
 80098d4:	fa03 f506 	lsl.w	r5, r3, r6
 80098d8:	432c      	orrs	r4, r5
 80098da:	40d3      	lsrs	r3, r2
 80098dc:	6004      	str	r4, [r0, #0]
 80098de:	f840 3f04 	str.w	r3, [r0, #4]!
 80098e2:	4288      	cmp	r0, r1
 80098e4:	d3f4      	bcc.n	80098d0 <L_shift+0xc>
 80098e6:	bd70      	pop	{r4, r5, r6, pc}

080098e8 <__match>:
 80098e8:	b530      	push	{r4, r5, lr}
 80098ea:	6803      	ldr	r3, [r0, #0]
 80098ec:	3301      	adds	r3, #1
 80098ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80098f2:	b914      	cbnz	r4, 80098fa <__match+0x12>
 80098f4:	6003      	str	r3, [r0, #0]
 80098f6:	2001      	movs	r0, #1
 80098f8:	bd30      	pop	{r4, r5, pc}
 80098fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80098fe:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8009902:	2d19      	cmp	r5, #25
 8009904:	bf98      	it	ls
 8009906:	3220      	addls	r2, #32
 8009908:	42a2      	cmp	r2, r4
 800990a:	d0f0      	beq.n	80098ee <__match+0x6>
 800990c:	2000      	movs	r0, #0
 800990e:	e7f3      	b.n	80098f8 <__match+0x10>

08009910 <__hexnan>:
 8009910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009914:	2500      	movs	r5, #0
 8009916:	680b      	ldr	r3, [r1, #0]
 8009918:	4682      	mov	sl, r0
 800991a:	115e      	asrs	r6, r3, #5
 800991c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009920:	f013 031f 	ands.w	r3, r3, #31
 8009924:	bf18      	it	ne
 8009926:	3604      	addne	r6, #4
 8009928:	1f37      	subs	r7, r6, #4
 800992a:	4690      	mov	r8, r2
 800992c:	46b9      	mov	r9, r7
 800992e:	463c      	mov	r4, r7
 8009930:	46ab      	mov	fp, r5
 8009932:	b087      	sub	sp, #28
 8009934:	6801      	ldr	r1, [r0, #0]
 8009936:	9301      	str	r3, [sp, #4]
 8009938:	f846 5c04 	str.w	r5, [r6, #-4]
 800993c:	9502      	str	r5, [sp, #8]
 800993e:	784a      	ldrb	r2, [r1, #1]
 8009940:	1c4b      	adds	r3, r1, #1
 8009942:	9303      	str	r3, [sp, #12]
 8009944:	b342      	cbz	r2, 8009998 <__hexnan+0x88>
 8009946:	4610      	mov	r0, r2
 8009948:	9105      	str	r1, [sp, #20]
 800994a:	9204      	str	r2, [sp, #16]
 800994c:	f7ff fd95 	bl	800947a <__hexdig_fun>
 8009950:	2800      	cmp	r0, #0
 8009952:	d151      	bne.n	80099f8 <__hexnan+0xe8>
 8009954:	9a04      	ldr	r2, [sp, #16]
 8009956:	9905      	ldr	r1, [sp, #20]
 8009958:	2a20      	cmp	r2, #32
 800995a:	d818      	bhi.n	800998e <__hexnan+0x7e>
 800995c:	9b02      	ldr	r3, [sp, #8]
 800995e:	459b      	cmp	fp, r3
 8009960:	dd13      	ble.n	800998a <__hexnan+0x7a>
 8009962:	454c      	cmp	r4, r9
 8009964:	d206      	bcs.n	8009974 <__hexnan+0x64>
 8009966:	2d07      	cmp	r5, #7
 8009968:	dc04      	bgt.n	8009974 <__hexnan+0x64>
 800996a:	462a      	mov	r2, r5
 800996c:	4649      	mov	r1, r9
 800996e:	4620      	mov	r0, r4
 8009970:	f7ff ffa8 	bl	80098c4 <L_shift>
 8009974:	4544      	cmp	r4, r8
 8009976:	d952      	bls.n	8009a1e <__hexnan+0x10e>
 8009978:	2300      	movs	r3, #0
 800997a:	f1a4 0904 	sub.w	r9, r4, #4
 800997e:	f844 3c04 	str.w	r3, [r4, #-4]
 8009982:	461d      	mov	r5, r3
 8009984:	464c      	mov	r4, r9
 8009986:	f8cd b008 	str.w	fp, [sp, #8]
 800998a:	9903      	ldr	r1, [sp, #12]
 800998c:	e7d7      	b.n	800993e <__hexnan+0x2e>
 800998e:	2a29      	cmp	r2, #41	@ 0x29
 8009990:	d157      	bne.n	8009a42 <__hexnan+0x132>
 8009992:	3102      	adds	r1, #2
 8009994:	f8ca 1000 	str.w	r1, [sl]
 8009998:	f1bb 0f00 	cmp.w	fp, #0
 800999c:	d051      	beq.n	8009a42 <__hexnan+0x132>
 800999e:	454c      	cmp	r4, r9
 80099a0:	d206      	bcs.n	80099b0 <__hexnan+0xa0>
 80099a2:	2d07      	cmp	r5, #7
 80099a4:	dc04      	bgt.n	80099b0 <__hexnan+0xa0>
 80099a6:	462a      	mov	r2, r5
 80099a8:	4649      	mov	r1, r9
 80099aa:	4620      	mov	r0, r4
 80099ac:	f7ff ff8a 	bl	80098c4 <L_shift>
 80099b0:	4544      	cmp	r4, r8
 80099b2:	d936      	bls.n	8009a22 <__hexnan+0x112>
 80099b4:	4623      	mov	r3, r4
 80099b6:	f1a8 0204 	sub.w	r2, r8, #4
 80099ba:	f853 1b04 	ldr.w	r1, [r3], #4
 80099be:	429f      	cmp	r7, r3
 80099c0:	f842 1f04 	str.w	r1, [r2, #4]!
 80099c4:	d2f9      	bcs.n	80099ba <__hexnan+0xaa>
 80099c6:	1b3b      	subs	r3, r7, r4
 80099c8:	f023 0303 	bic.w	r3, r3, #3
 80099cc:	3304      	adds	r3, #4
 80099ce:	3401      	adds	r4, #1
 80099d0:	3e03      	subs	r6, #3
 80099d2:	42b4      	cmp	r4, r6
 80099d4:	bf88      	it	hi
 80099d6:	2304      	movhi	r3, #4
 80099d8:	2200      	movs	r2, #0
 80099da:	4443      	add	r3, r8
 80099dc:	f843 2b04 	str.w	r2, [r3], #4
 80099e0:	429f      	cmp	r7, r3
 80099e2:	d2fb      	bcs.n	80099dc <__hexnan+0xcc>
 80099e4:	683b      	ldr	r3, [r7, #0]
 80099e6:	b91b      	cbnz	r3, 80099f0 <__hexnan+0xe0>
 80099e8:	4547      	cmp	r7, r8
 80099ea:	d128      	bne.n	8009a3e <__hexnan+0x12e>
 80099ec:	2301      	movs	r3, #1
 80099ee:	603b      	str	r3, [r7, #0]
 80099f0:	2005      	movs	r0, #5
 80099f2:	b007      	add	sp, #28
 80099f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099f8:	3501      	adds	r5, #1
 80099fa:	2d08      	cmp	r5, #8
 80099fc:	f10b 0b01 	add.w	fp, fp, #1
 8009a00:	dd06      	ble.n	8009a10 <__hexnan+0x100>
 8009a02:	4544      	cmp	r4, r8
 8009a04:	d9c1      	bls.n	800998a <__hexnan+0x7a>
 8009a06:	2300      	movs	r3, #0
 8009a08:	2501      	movs	r5, #1
 8009a0a:	f844 3c04 	str.w	r3, [r4, #-4]
 8009a0e:	3c04      	subs	r4, #4
 8009a10:	6822      	ldr	r2, [r4, #0]
 8009a12:	f000 000f 	and.w	r0, r0, #15
 8009a16:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8009a1a:	6020      	str	r0, [r4, #0]
 8009a1c:	e7b5      	b.n	800998a <__hexnan+0x7a>
 8009a1e:	2508      	movs	r5, #8
 8009a20:	e7b3      	b.n	800998a <__hexnan+0x7a>
 8009a22:	9b01      	ldr	r3, [sp, #4]
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d0dd      	beq.n	80099e4 <__hexnan+0xd4>
 8009a28:	f04f 32ff 	mov.w	r2, #4294967295
 8009a2c:	f1c3 0320 	rsb	r3, r3, #32
 8009a30:	40da      	lsrs	r2, r3
 8009a32:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8009a36:	4013      	ands	r3, r2
 8009a38:	f846 3c04 	str.w	r3, [r6, #-4]
 8009a3c:	e7d2      	b.n	80099e4 <__hexnan+0xd4>
 8009a3e:	3f04      	subs	r7, #4
 8009a40:	e7d0      	b.n	80099e4 <__hexnan+0xd4>
 8009a42:	2004      	movs	r0, #4
 8009a44:	e7d5      	b.n	80099f2 <__hexnan+0xe2>

08009a46 <__ascii_mbtowc>:
 8009a46:	b082      	sub	sp, #8
 8009a48:	b901      	cbnz	r1, 8009a4c <__ascii_mbtowc+0x6>
 8009a4a:	a901      	add	r1, sp, #4
 8009a4c:	b142      	cbz	r2, 8009a60 <__ascii_mbtowc+0x1a>
 8009a4e:	b14b      	cbz	r3, 8009a64 <__ascii_mbtowc+0x1e>
 8009a50:	7813      	ldrb	r3, [r2, #0]
 8009a52:	600b      	str	r3, [r1, #0]
 8009a54:	7812      	ldrb	r2, [r2, #0]
 8009a56:	1e10      	subs	r0, r2, #0
 8009a58:	bf18      	it	ne
 8009a5a:	2001      	movne	r0, #1
 8009a5c:	b002      	add	sp, #8
 8009a5e:	4770      	bx	lr
 8009a60:	4610      	mov	r0, r2
 8009a62:	e7fb      	b.n	8009a5c <__ascii_mbtowc+0x16>
 8009a64:	f06f 0001 	mvn.w	r0, #1
 8009a68:	e7f8      	b.n	8009a5c <__ascii_mbtowc+0x16>

08009a6a <_realloc_r>:
 8009a6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a6e:	4680      	mov	r8, r0
 8009a70:	4615      	mov	r5, r2
 8009a72:	460c      	mov	r4, r1
 8009a74:	b921      	cbnz	r1, 8009a80 <_realloc_r+0x16>
 8009a76:	4611      	mov	r1, r2
 8009a78:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009a7c:	f7fd be02 	b.w	8007684 <_malloc_r>
 8009a80:	b92a      	cbnz	r2, 8009a8e <_realloc_r+0x24>
 8009a82:	f7fd fd8d 	bl	80075a0 <_free_r>
 8009a86:	2400      	movs	r4, #0
 8009a88:	4620      	mov	r0, r4
 8009a8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a8e:	f000 f840 	bl	8009b12 <_malloc_usable_size_r>
 8009a92:	4285      	cmp	r5, r0
 8009a94:	4606      	mov	r6, r0
 8009a96:	d802      	bhi.n	8009a9e <_realloc_r+0x34>
 8009a98:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8009a9c:	d8f4      	bhi.n	8009a88 <_realloc_r+0x1e>
 8009a9e:	4629      	mov	r1, r5
 8009aa0:	4640      	mov	r0, r8
 8009aa2:	f7fd fdef 	bl	8007684 <_malloc_r>
 8009aa6:	4607      	mov	r7, r0
 8009aa8:	2800      	cmp	r0, #0
 8009aaa:	d0ec      	beq.n	8009a86 <_realloc_r+0x1c>
 8009aac:	42b5      	cmp	r5, r6
 8009aae:	462a      	mov	r2, r5
 8009ab0:	4621      	mov	r1, r4
 8009ab2:	bf28      	it	cs
 8009ab4:	4632      	movcs	r2, r6
 8009ab6:	f7fc ff10 	bl	80068da <memcpy>
 8009aba:	4621      	mov	r1, r4
 8009abc:	4640      	mov	r0, r8
 8009abe:	f7fd fd6f 	bl	80075a0 <_free_r>
 8009ac2:	463c      	mov	r4, r7
 8009ac4:	e7e0      	b.n	8009a88 <_realloc_r+0x1e>

08009ac6 <__ascii_wctomb>:
 8009ac6:	4603      	mov	r3, r0
 8009ac8:	4608      	mov	r0, r1
 8009aca:	b141      	cbz	r1, 8009ade <__ascii_wctomb+0x18>
 8009acc:	2aff      	cmp	r2, #255	@ 0xff
 8009ace:	d904      	bls.n	8009ada <__ascii_wctomb+0x14>
 8009ad0:	228a      	movs	r2, #138	@ 0x8a
 8009ad2:	f04f 30ff 	mov.w	r0, #4294967295
 8009ad6:	601a      	str	r2, [r3, #0]
 8009ad8:	4770      	bx	lr
 8009ada:	2001      	movs	r0, #1
 8009adc:	700a      	strb	r2, [r1, #0]
 8009ade:	4770      	bx	lr

08009ae0 <fiprintf>:
 8009ae0:	b40e      	push	{r1, r2, r3}
 8009ae2:	b503      	push	{r0, r1, lr}
 8009ae4:	4601      	mov	r1, r0
 8009ae6:	ab03      	add	r3, sp, #12
 8009ae8:	4805      	ldr	r0, [pc, #20]	@ (8009b00 <fiprintf+0x20>)
 8009aea:	f853 2b04 	ldr.w	r2, [r3], #4
 8009aee:	6800      	ldr	r0, [r0, #0]
 8009af0:	9301      	str	r3, [sp, #4]
 8009af2:	f000 f83d 	bl	8009b70 <_vfiprintf_r>
 8009af6:	b002      	add	sp, #8
 8009af8:	f85d eb04 	ldr.w	lr, [sp], #4
 8009afc:	b003      	add	sp, #12
 8009afe:	4770      	bx	lr
 8009b00:	20000420 	.word	0x20000420

08009b04 <abort>:
 8009b04:	2006      	movs	r0, #6
 8009b06:	b508      	push	{r3, lr}
 8009b08:	f000 f972 	bl	8009df0 <raise>
 8009b0c:	2001      	movs	r0, #1
 8009b0e:	f7f7 fc50 	bl	80013b2 <_exit>

08009b12 <_malloc_usable_size_r>:
 8009b12:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009b16:	1f18      	subs	r0, r3, #4
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	bfbc      	itt	lt
 8009b1c:	580b      	ldrlt	r3, [r1, r0]
 8009b1e:	18c0      	addlt	r0, r0, r3
 8009b20:	4770      	bx	lr

08009b22 <__sfputc_r>:
 8009b22:	6893      	ldr	r3, [r2, #8]
 8009b24:	b410      	push	{r4}
 8009b26:	3b01      	subs	r3, #1
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	6093      	str	r3, [r2, #8]
 8009b2c:	da07      	bge.n	8009b3e <__sfputc_r+0x1c>
 8009b2e:	6994      	ldr	r4, [r2, #24]
 8009b30:	42a3      	cmp	r3, r4
 8009b32:	db01      	blt.n	8009b38 <__sfputc_r+0x16>
 8009b34:	290a      	cmp	r1, #10
 8009b36:	d102      	bne.n	8009b3e <__sfputc_r+0x1c>
 8009b38:	bc10      	pop	{r4}
 8009b3a:	f7fc bdac 	b.w	8006696 <__swbuf_r>
 8009b3e:	6813      	ldr	r3, [r2, #0]
 8009b40:	1c58      	adds	r0, r3, #1
 8009b42:	6010      	str	r0, [r2, #0]
 8009b44:	7019      	strb	r1, [r3, #0]
 8009b46:	4608      	mov	r0, r1
 8009b48:	bc10      	pop	{r4}
 8009b4a:	4770      	bx	lr

08009b4c <__sfputs_r>:
 8009b4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b4e:	4606      	mov	r6, r0
 8009b50:	460f      	mov	r7, r1
 8009b52:	4614      	mov	r4, r2
 8009b54:	18d5      	adds	r5, r2, r3
 8009b56:	42ac      	cmp	r4, r5
 8009b58:	d101      	bne.n	8009b5e <__sfputs_r+0x12>
 8009b5a:	2000      	movs	r0, #0
 8009b5c:	e007      	b.n	8009b6e <__sfputs_r+0x22>
 8009b5e:	463a      	mov	r2, r7
 8009b60:	4630      	mov	r0, r6
 8009b62:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b66:	f7ff ffdc 	bl	8009b22 <__sfputc_r>
 8009b6a:	1c43      	adds	r3, r0, #1
 8009b6c:	d1f3      	bne.n	8009b56 <__sfputs_r+0xa>
 8009b6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009b70 <_vfiprintf_r>:
 8009b70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b74:	460d      	mov	r5, r1
 8009b76:	4614      	mov	r4, r2
 8009b78:	4698      	mov	r8, r3
 8009b7a:	4606      	mov	r6, r0
 8009b7c:	b09d      	sub	sp, #116	@ 0x74
 8009b7e:	b118      	cbz	r0, 8009b88 <_vfiprintf_r+0x18>
 8009b80:	6a03      	ldr	r3, [r0, #32]
 8009b82:	b90b      	cbnz	r3, 8009b88 <_vfiprintf_r+0x18>
 8009b84:	f7fc fc90 	bl	80064a8 <__sinit>
 8009b88:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009b8a:	07d9      	lsls	r1, r3, #31
 8009b8c:	d405      	bmi.n	8009b9a <_vfiprintf_r+0x2a>
 8009b8e:	89ab      	ldrh	r3, [r5, #12]
 8009b90:	059a      	lsls	r2, r3, #22
 8009b92:	d402      	bmi.n	8009b9a <_vfiprintf_r+0x2a>
 8009b94:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009b96:	f7fc fe90 	bl	80068ba <__retarget_lock_acquire_recursive>
 8009b9a:	89ab      	ldrh	r3, [r5, #12]
 8009b9c:	071b      	lsls	r3, r3, #28
 8009b9e:	d501      	bpl.n	8009ba4 <_vfiprintf_r+0x34>
 8009ba0:	692b      	ldr	r3, [r5, #16]
 8009ba2:	b99b      	cbnz	r3, 8009bcc <_vfiprintf_r+0x5c>
 8009ba4:	4629      	mov	r1, r5
 8009ba6:	4630      	mov	r0, r6
 8009ba8:	f7fc fdb4 	bl	8006714 <__swsetup_r>
 8009bac:	b170      	cbz	r0, 8009bcc <_vfiprintf_r+0x5c>
 8009bae:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009bb0:	07dc      	lsls	r4, r3, #31
 8009bb2:	d504      	bpl.n	8009bbe <_vfiprintf_r+0x4e>
 8009bb4:	f04f 30ff 	mov.w	r0, #4294967295
 8009bb8:	b01d      	add	sp, #116	@ 0x74
 8009bba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bbe:	89ab      	ldrh	r3, [r5, #12]
 8009bc0:	0598      	lsls	r0, r3, #22
 8009bc2:	d4f7      	bmi.n	8009bb4 <_vfiprintf_r+0x44>
 8009bc4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009bc6:	f7fc fe79 	bl	80068bc <__retarget_lock_release_recursive>
 8009bca:	e7f3      	b.n	8009bb4 <_vfiprintf_r+0x44>
 8009bcc:	2300      	movs	r3, #0
 8009bce:	9309      	str	r3, [sp, #36]	@ 0x24
 8009bd0:	2320      	movs	r3, #32
 8009bd2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009bd6:	2330      	movs	r3, #48	@ 0x30
 8009bd8:	f04f 0901 	mov.w	r9, #1
 8009bdc:	f8cd 800c 	str.w	r8, [sp, #12]
 8009be0:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8009d8c <_vfiprintf_r+0x21c>
 8009be4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009be8:	4623      	mov	r3, r4
 8009bea:	469a      	mov	sl, r3
 8009bec:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009bf0:	b10a      	cbz	r2, 8009bf6 <_vfiprintf_r+0x86>
 8009bf2:	2a25      	cmp	r2, #37	@ 0x25
 8009bf4:	d1f9      	bne.n	8009bea <_vfiprintf_r+0x7a>
 8009bf6:	ebba 0b04 	subs.w	fp, sl, r4
 8009bfa:	d00b      	beq.n	8009c14 <_vfiprintf_r+0xa4>
 8009bfc:	465b      	mov	r3, fp
 8009bfe:	4622      	mov	r2, r4
 8009c00:	4629      	mov	r1, r5
 8009c02:	4630      	mov	r0, r6
 8009c04:	f7ff ffa2 	bl	8009b4c <__sfputs_r>
 8009c08:	3001      	adds	r0, #1
 8009c0a:	f000 80a7 	beq.w	8009d5c <_vfiprintf_r+0x1ec>
 8009c0e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009c10:	445a      	add	r2, fp
 8009c12:	9209      	str	r2, [sp, #36]	@ 0x24
 8009c14:	f89a 3000 	ldrb.w	r3, [sl]
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	f000 809f 	beq.w	8009d5c <_vfiprintf_r+0x1ec>
 8009c1e:	2300      	movs	r3, #0
 8009c20:	f04f 32ff 	mov.w	r2, #4294967295
 8009c24:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009c28:	f10a 0a01 	add.w	sl, sl, #1
 8009c2c:	9304      	str	r3, [sp, #16]
 8009c2e:	9307      	str	r3, [sp, #28]
 8009c30:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009c34:	931a      	str	r3, [sp, #104]	@ 0x68
 8009c36:	4654      	mov	r4, sl
 8009c38:	2205      	movs	r2, #5
 8009c3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c3e:	4853      	ldr	r0, [pc, #332]	@ (8009d8c <_vfiprintf_r+0x21c>)
 8009c40:	f7fc fe3d 	bl	80068be <memchr>
 8009c44:	9a04      	ldr	r2, [sp, #16]
 8009c46:	b9d8      	cbnz	r0, 8009c80 <_vfiprintf_r+0x110>
 8009c48:	06d1      	lsls	r1, r2, #27
 8009c4a:	bf44      	itt	mi
 8009c4c:	2320      	movmi	r3, #32
 8009c4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009c52:	0713      	lsls	r3, r2, #28
 8009c54:	bf44      	itt	mi
 8009c56:	232b      	movmi	r3, #43	@ 0x2b
 8009c58:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009c5c:	f89a 3000 	ldrb.w	r3, [sl]
 8009c60:	2b2a      	cmp	r3, #42	@ 0x2a
 8009c62:	d015      	beq.n	8009c90 <_vfiprintf_r+0x120>
 8009c64:	4654      	mov	r4, sl
 8009c66:	2000      	movs	r0, #0
 8009c68:	f04f 0c0a 	mov.w	ip, #10
 8009c6c:	9a07      	ldr	r2, [sp, #28]
 8009c6e:	4621      	mov	r1, r4
 8009c70:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009c74:	3b30      	subs	r3, #48	@ 0x30
 8009c76:	2b09      	cmp	r3, #9
 8009c78:	d94b      	bls.n	8009d12 <_vfiprintf_r+0x1a2>
 8009c7a:	b1b0      	cbz	r0, 8009caa <_vfiprintf_r+0x13a>
 8009c7c:	9207      	str	r2, [sp, #28]
 8009c7e:	e014      	b.n	8009caa <_vfiprintf_r+0x13a>
 8009c80:	eba0 0308 	sub.w	r3, r0, r8
 8009c84:	fa09 f303 	lsl.w	r3, r9, r3
 8009c88:	4313      	orrs	r3, r2
 8009c8a:	46a2      	mov	sl, r4
 8009c8c:	9304      	str	r3, [sp, #16]
 8009c8e:	e7d2      	b.n	8009c36 <_vfiprintf_r+0xc6>
 8009c90:	9b03      	ldr	r3, [sp, #12]
 8009c92:	1d19      	adds	r1, r3, #4
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	9103      	str	r1, [sp, #12]
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	bfbb      	ittet	lt
 8009c9c:	425b      	neglt	r3, r3
 8009c9e:	f042 0202 	orrlt.w	r2, r2, #2
 8009ca2:	9307      	strge	r3, [sp, #28]
 8009ca4:	9307      	strlt	r3, [sp, #28]
 8009ca6:	bfb8      	it	lt
 8009ca8:	9204      	strlt	r2, [sp, #16]
 8009caa:	7823      	ldrb	r3, [r4, #0]
 8009cac:	2b2e      	cmp	r3, #46	@ 0x2e
 8009cae:	d10a      	bne.n	8009cc6 <_vfiprintf_r+0x156>
 8009cb0:	7863      	ldrb	r3, [r4, #1]
 8009cb2:	2b2a      	cmp	r3, #42	@ 0x2a
 8009cb4:	d132      	bne.n	8009d1c <_vfiprintf_r+0x1ac>
 8009cb6:	9b03      	ldr	r3, [sp, #12]
 8009cb8:	3402      	adds	r4, #2
 8009cba:	1d1a      	adds	r2, r3, #4
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	9203      	str	r2, [sp, #12]
 8009cc0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009cc4:	9305      	str	r3, [sp, #20]
 8009cc6:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8009d90 <_vfiprintf_r+0x220>
 8009cca:	2203      	movs	r2, #3
 8009ccc:	4650      	mov	r0, sl
 8009cce:	7821      	ldrb	r1, [r4, #0]
 8009cd0:	f7fc fdf5 	bl	80068be <memchr>
 8009cd4:	b138      	cbz	r0, 8009ce6 <_vfiprintf_r+0x176>
 8009cd6:	2240      	movs	r2, #64	@ 0x40
 8009cd8:	9b04      	ldr	r3, [sp, #16]
 8009cda:	eba0 000a 	sub.w	r0, r0, sl
 8009cde:	4082      	lsls	r2, r0
 8009ce0:	4313      	orrs	r3, r2
 8009ce2:	3401      	adds	r4, #1
 8009ce4:	9304      	str	r3, [sp, #16]
 8009ce6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009cea:	2206      	movs	r2, #6
 8009cec:	4829      	ldr	r0, [pc, #164]	@ (8009d94 <_vfiprintf_r+0x224>)
 8009cee:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009cf2:	f7fc fde4 	bl	80068be <memchr>
 8009cf6:	2800      	cmp	r0, #0
 8009cf8:	d03f      	beq.n	8009d7a <_vfiprintf_r+0x20a>
 8009cfa:	4b27      	ldr	r3, [pc, #156]	@ (8009d98 <_vfiprintf_r+0x228>)
 8009cfc:	bb1b      	cbnz	r3, 8009d46 <_vfiprintf_r+0x1d6>
 8009cfe:	9b03      	ldr	r3, [sp, #12]
 8009d00:	3307      	adds	r3, #7
 8009d02:	f023 0307 	bic.w	r3, r3, #7
 8009d06:	3308      	adds	r3, #8
 8009d08:	9303      	str	r3, [sp, #12]
 8009d0a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d0c:	443b      	add	r3, r7
 8009d0e:	9309      	str	r3, [sp, #36]	@ 0x24
 8009d10:	e76a      	b.n	8009be8 <_vfiprintf_r+0x78>
 8009d12:	460c      	mov	r4, r1
 8009d14:	2001      	movs	r0, #1
 8009d16:	fb0c 3202 	mla	r2, ip, r2, r3
 8009d1a:	e7a8      	b.n	8009c6e <_vfiprintf_r+0xfe>
 8009d1c:	2300      	movs	r3, #0
 8009d1e:	f04f 0c0a 	mov.w	ip, #10
 8009d22:	4619      	mov	r1, r3
 8009d24:	3401      	adds	r4, #1
 8009d26:	9305      	str	r3, [sp, #20]
 8009d28:	4620      	mov	r0, r4
 8009d2a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009d2e:	3a30      	subs	r2, #48	@ 0x30
 8009d30:	2a09      	cmp	r2, #9
 8009d32:	d903      	bls.n	8009d3c <_vfiprintf_r+0x1cc>
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d0c6      	beq.n	8009cc6 <_vfiprintf_r+0x156>
 8009d38:	9105      	str	r1, [sp, #20]
 8009d3a:	e7c4      	b.n	8009cc6 <_vfiprintf_r+0x156>
 8009d3c:	4604      	mov	r4, r0
 8009d3e:	2301      	movs	r3, #1
 8009d40:	fb0c 2101 	mla	r1, ip, r1, r2
 8009d44:	e7f0      	b.n	8009d28 <_vfiprintf_r+0x1b8>
 8009d46:	ab03      	add	r3, sp, #12
 8009d48:	9300      	str	r3, [sp, #0]
 8009d4a:	462a      	mov	r2, r5
 8009d4c:	4630      	mov	r0, r6
 8009d4e:	4b13      	ldr	r3, [pc, #76]	@ (8009d9c <_vfiprintf_r+0x22c>)
 8009d50:	a904      	add	r1, sp, #16
 8009d52:	f7fb fd4f 	bl	80057f4 <_printf_float>
 8009d56:	4607      	mov	r7, r0
 8009d58:	1c78      	adds	r0, r7, #1
 8009d5a:	d1d6      	bne.n	8009d0a <_vfiprintf_r+0x19a>
 8009d5c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009d5e:	07d9      	lsls	r1, r3, #31
 8009d60:	d405      	bmi.n	8009d6e <_vfiprintf_r+0x1fe>
 8009d62:	89ab      	ldrh	r3, [r5, #12]
 8009d64:	059a      	lsls	r2, r3, #22
 8009d66:	d402      	bmi.n	8009d6e <_vfiprintf_r+0x1fe>
 8009d68:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009d6a:	f7fc fda7 	bl	80068bc <__retarget_lock_release_recursive>
 8009d6e:	89ab      	ldrh	r3, [r5, #12]
 8009d70:	065b      	lsls	r3, r3, #25
 8009d72:	f53f af1f 	bmi.w	8009bb4 <_vfiprintf_r+0x44>
 8009d76:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009d78:	e71e      	b.n	8009bb8 <_vfiprintf_r+0x48>
 8009d7a:	ab03      	add	r3, sp, #12
 8009d7c:	9300      	str	r3, [sp, #0]
 8009d7e:	462a      	mov	r2, r5
 8009d80:	4630      	mov	r0, r6
 8009d82:	4b06      	ldr	r3, [pc, #24]	@ (8009d9c <_vfiprintf_r+0x22c>)
 8009d84:	a904      	add	r1, sp, #16
 8009d86:	f7fb ffd3 	bl	8005d30 <_printf_i>
 8009d8a:	e7e4      	b.n	8009d56 <_vfiprintf_r+0x1e6>
 8009d8c:	0800a221 	.word	0x0800a221
 8009d90:	0800a227 	.word	0x0800a227
 8009d94:	0800a22b 	.word	0x0800a22b
 8009d98:	080057f5 	.word	0x080057f5
 8009d9c:	08009b4d 	.word	0x08009b4d

08009da0 <_raise_r>:
 8009da0:	291f      	cmp	r1, #31
 8009da2:	b538      	push	{r3, r4, r5, lr}
 8009da4:	4605      	mov	r5, r0
 8009da6:	460c      	mov	r4, r1
 8009da8:	d904      	bls.n	8009db4 <_raise_r+0x14>
 8009daa:	2316      	movs	r3, #22
 8009dac:	6003      	str	r3, [r0, #0]
 8009dae:	f04f 30ff 	mov.w	r0, #4294967295
 8009db2:	bd38      	pop	{r3, r4, r5, pc}
 8009db4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009db6:	b112      	cbz	r2, 8009dbe <_raise_r+0x1e>
 8009db8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009dbc:	b94b      	cbnz	r3, 8009dd2 <_raise_r+0x32>
 8009dbe:	4628      	mov	r0, r5
 8009dc0:	f000 f830 	bl	8009e24 <_getpid_r>
 8009dc4:	4622      	mov	r2, r4
 8009dc6:	4601      	mov	r1, r0
 8009dc8:	4628      	mov	r0, r5
 8009dca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009dce:	f000 b817 	b.w	8009e00 <_kill_r>
 8009dd2:	2b01      	cmp	r3, #1
 8009dd4:	d00a      	beq.n	8009dec <_raise_r+0x4c>
 8009dd6:	1c59      	adds	r1, r3, #1
 8009dd8:	d103      	bne.n	8009de2 <_raise_r+0x42>
 8009dda:	2316      	movs	r3, #22
 8009ddc:	6003      	str	r3, [r0, #0]
 8009dde:	2001      	movs	r0, #1
 8009de0:	e7e7      	b.n	8009db2 <_raise_r+0x12>
 8009de2:	2100      	movs	r1, #0
 8009de4:	4620      	mov	r0, r4
 8009de6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009dea:	4798      	blx	r3
 8009dec:	2000      	movs	r0, #0
 8009dee:	e7e0      	b.n	8009db2 <_raise_r+0x12>

08009df0 <raise>:
 8009df0:	4b02      	ldr	r3, [pc, #8]	@ (8009dfc <raise+0xc>)
 8009df2:	4601      	mov	r1, r0
 8009df4:	6818      	ldr	r0, [r3, #0]
 8009df6:	f7ff bfd3 	b.w	8009da0 <_raise_r>
 8009dfa:	bf00      	nop
 8009dfc:	20000420 	.word	0x20000420

08009e00 <_kill_r>:
 8009e00:	b538      	push	{r3, r4, r5, lr}
 8009e02:	2300      	movs	r3, #0
 8009e04:	4d06      	ldr	r5, [pc, #24]	@ (8009e20 <_kill_r+0x20>)
 8009e06:	4604      	mov	r4, r0
 8009e08:	4608      	mov	r0, r1
 8009e0a:	4611      	mov	r1, r2
 8009e0c:	602b      	str	r3, [r5, #0]
 8009e0e:	f7f7 fac0 	bl	8001392 <_kill>
 8009e12:	1c43      	adds	r3, r0, #1
 8009e14:	d102      	bne.n	8009e1c <_kill_r+0x1c>
 8009e16:	682b      	ldr	r3, [r5, #0]
 8009e18:	b103      	cbz	r3, 8009e1c <_kill_r+0x1c>
 8009e1a:	6023      	str	r3, [r4, #0]
 8009e1c:	bd38      	pop	{r3, r4, r5, pc}
 8009e1e:	bf00      	nop
 8009e20:	20003154 	.word	0x20003154

08009e24 <_getpid_r>:
 8009e24:	f7f7 baae 	b.w	8001384 <_getpid>

08009e28 <_init>:
 8009e28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e2a:	bf00      	nop
 8009e2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e2e:	bc08      	pop	{r3}
 8009e30:	469e      	mov	lr, r3
 8009e32:	4770      	bx	lr

08009e34 <_fini>:
 8009e34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e36:	bf00      	nop
 8009e38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e3a:	bc08      	pop	{r3}
 8009e3c:	469e      	mov	lr, r3
 8009e3e:	4770      	bx	lr
