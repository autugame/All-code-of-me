
FreeRTOS-DynamicCAndD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009168  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004d8  08009278  08009278  0000a278  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009750  08009750  0000b5dc  2**0
                  CONTENTS
  4 .ARM          00000008  08009750  08009750  0000a750  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009758  08009758  0000b5dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009758  08009758  0000a758  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800975c  0800975c  0000a75c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000005dc  20000000  08009760  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002b88  200005dc  08009d3c  0000b5dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20003164  08009d3c  0000c164  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000b5dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011ffa  00000000  00000000  0000b605  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000030e9  00000000  00000000  0001d5ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001300  00000000  00000000  000206e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000edf  00000000  00000000  000219e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b860  00000000  00000000  000228c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000178fe  00000000  00000000  0003e127  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009c0a1  00000000  00000000  00055a25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f1ac6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000063cc  00000000  00000000  000f1b0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  000f7ed8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200005dc 	.word	0x200005dc
 800012c:	00000000 	.word	0x00000000
 8000130:	08009260 	.word	0x08009260

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200005e0 	.word	0x200005e0
 800014c:	08009260 	.word	0x08009260

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_d2lz>:
 8000b68:	b538      	push	{r3, r4, r5, lr}
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	4604      	mov	r4, r0
 8000b70:	460d      	mov	r5, r1
 8000b72:	f7ff ff23 	bl	80009bc <__aeabi_dcmplt>
 8000b76:	b928      	cbnz	r0, 8000b84 <__aeabi_d2lz+0x1c>
 8000b78:	4620      	mov	r0, r4
 8000b7a:	4629      	mov	r1, r5
 8000b7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000b80:	f000 b80a 	b.w	8000b98 <__aeabi_d2ulz>
 8000b84:	4620      	mov	r0, r4
 8000b86:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000b8a:	f000 f805 	bl	8000b98 <__aeabi_d2ulz>
 8000b8e:	4240      	negs	r0, r0
 8000b90:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b94:	bd38      	pop	{r3, r4, r5, pc}
 8000b96:	bf00      	nop

08000b98 <__aeabi_d2ulz>:
 8000b98:	b5d0      	push	{r4, r6, r7, lr}
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	4b0b      	ldr	r3, [pc, #44]	@ (8000bcc <__aeabi_d2ulz+0x34>)
 8000b9e:	4606      	mov	r6, r0
 8000ba0:	460f      	mov	r7, r1
 8000ba2:	f7ff fc99 	bl	80004d8 <__aeabi_dmul>
 8000ba6:	f7ff ff6f 	bl	8000a88 <__aeabi_d2uiz>
 8000baa:	4604      	mov	r4, r0
 8000bac:	f7ff fc1a 	bl	80003e4 <__aeabi_ui2d>
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	4b07      	ldr	r3, [pc, #28]	@ (8000bd0 <__aeabi_d2ulz+0x38>)
 8000bb4:	f7ff fc90 	bl	80004d8 <__aeabi_dmul>
 8000bb8:	4602      	mov	r2, r0
 8000bba:	460b      	mov	r3, r1
 8000bbc:	4630      	mov	r0, r6
 8000bbe:	4639      	mov	r1, r7
 8000bc0:	f7ff fad2 	bl	8000168 <__aeabi_dsub>
 8000bc4:	f7ff ff60 	bl	8000a88 <__aeabi_d2uiz>
 8000bc8:	4621      	mov	r1, r4
 8000bca:	bdd0      	pop	{r4, r6, r7, pc}
 8000bcc:	3df00000 	.word	0x3df00000
 8000bd0:	41f00000 	.word	0x41f00000

08000bd4 <StartTask>:
#define TASK3_PRIORITY 1
TaskHandle_t Task3Handle;
static void Task3(void *pvParameters);

static void StartTask(void *pvParameters)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b084      	sub	sp, #16
 8000bd8:	af02      	add	r7, sp, #8
 8000bda:	6078      	str	r0, [r7, #4]
	taskENTER_CRITICAL();
 8000bdc:	f002 fe7c 	bl	80038d8 <vPortEnterCritical>
	//Create three tasks.
	xTaskCreate(Task1, "Task1", TASK1_STACK, NULL, TASK1_PRIORITY, &Task1Handle);
 8000be0:	4b13      	ldr	r3, [pc, #76]	@ (8000c30 <StartTask+0x5c>)
 8000be2:	9301      	str	r3, [sp, #4]
 8000be4:	2301      	movs	r3, #1
 8000be6:	9300      	str	r3, [sp, #0]
 8000be8:	2300      	movs	r3, #0
 8000bea:	2280      	movs	r2, #128	@ 0x80
 8000bec:	4911      	ldr	r1, [pc, #68]	@ (8000c34 <StartTask+0x60>)
 8000bee:	4812      	ldr	r0, [pc, #72]	@ (8000c38 <StartTask+0x64>)
 8000bf0:	f003 f98f 	bl	8003f12 <xTaskCreate>
	xTaskCreate(Task2, "Task2", TASK2_STACK, NULL, TASK2_PRIORITY, &Task2Handle);
 8000bf4:	4b11      	ldr	r3, [pc, #68]	@ (8000c3c <StartTask+0x68>)
 8000bf6:	9301      	str	r3, [sp, #4]
 8000bf8:	2301      	movs	r3, #1
 8000bfa:	9300      	str	r3, [sp, #0]
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	2280      	movs	r2, #128	@ 0x80
 8000c00:	490f      	ldr	r1, [pc, #60]	@ (8000c40 <StartTask+0x6c>)
 8000c02:	4810      	ldr	r0, [pc, #64]	@ (8000c44 <StartTask+0x70>)
 8000c04:	f003 f985 	bl	8003f12 <xTaskCreate>
	xTaskCreate(Task3, "Task3", TASK3_STACK, NULL, TASK3_PRIORITY, &Task3Handle);
 8000c08:	4b0f      	ldr	r3, [pc, #60]	@ (8000c48 <StartTask+0x74>)
 8000c0a:	9301      	str	r3, [sp, #4]
 8000c0c:	2301      	movs	r3, #1
 8000c0e:	9300      	str	r3, [sp, #0]
 8000c10:	2300      	movs	r3, #0
 8000c12:	2280      	movs	r2, #128	@ 0x80
 8000c14:	490d      	ldr	r1, [pc, #52]	@ (8000c4c <StartTask+0x78>)
 8000c16:	480e      	ldr	r0, [pc, #56]	@ (8000c50 <StartTask+0x7c>)
 8000c18:	f003 f97b 	bl	8003f12 <xTaskCreate>
	//Delete itself.
	vTaskDelete(NULL);
 8000c1c:	2000      	movs	r0, #0
 8000c1e:	f003 fa97 	bl	8004150 <vTaskDelete>
	taskEXIT_CRITICAL();
 8000c22:	f002 fe73 	bl	800390c <vPortExitCritical>
}
 8000c26:	bf00      	nop
 8000c28:	3708      	adds	r7, #8
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	200005fc 	.word	0x200005fc
 8000c34:	08009278 	.word	0x08009278
 8000c38:	08000c55 	.word	0x08000c55
 8000c3c:	20000600 	.word	0x20000600
 8000c40:	08009280 	.word	0x08009280
 8000c44:	08000c79 	.word	0x08000c79
 8000c48:	20000604 	.word	0x20000604
 8000c4c:	08009288 	.word	0x08009288
 8000c50:	08000c9d 	.word	0x08000c9d

08000c54 <Task1>:

static void Task1(void *pvParameters)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b082      	sub	sp, #8
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
	while (1)
	{
		printf("Task1 is running!\n");
 8000c5c:	4805      	ldr	r0, [pc, #20]	@ (8000c74 <Task1+0x20>)
 8000c5e:	f004 fecb 	bl	80059f8 <puts>
		LED_Toggle(LED1);
 8000c62:	2001      	movs	r0, #1
 8000c64:	f000 f8ea 	bl	8000e3c <LED_Toggle>
		vTaskDelay(1000);
 8000c68:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000c6c:	f003 fb00 	bl	8004270 <vTaskDelay>
		printf("Task1 is running!\n");
 8000c70:	bf00      	nop
 8000c72:	e7f3      	b.n	8000c5c <Task1+0x8>
 8000c74:	08009290 	.word	0x08009290

08000c78 <Task2>:
	}
}

static void Task2(void *pvParameters)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b082      	sub	sp, #8
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
	while (1)
	{
		printf("Task2 is running!\n");
 8000c80:	4805      	ldr	r0, [pc, #20]	@ (8000c98 <Task2+0x20>)
 8000c82:	f004 feb9 	bl	80059f8 <puts>
		LED_Toggle(LED2);
 8000c86:	2002      	movs	r0, #2
 8000c88:	f000 f8d8 	bl	8000e3c <LED_Toggle>
		vTaskDelay(1000);
 8000c8c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000c90:	f003 faee 	bl	8004270 <vTaskDelay>
		printf("Task2 is running!\n");
 8000c94:	bf00      	nop
 8000c96:	e7f3      	b.n	8000c80 <Task2+0x8>
 8000c98:	080092a4 	.word	0x080092a4

08000c9c <Task3>:
	}
}

static void Task3(void *pvParameters)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b084      	sub	sp, #16
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
	while (1)
	{
		printf("Task3 is running!\n");
 8000ca4:	480f      	ldr	r0, [pc, #60]	@ (8000ce4 <Task3+0x48>)
 8000ca6:	f004 fea7 	bl	80059f8 <puts>
		uint8_t key = Key_Scan();
 8000caa:	f000 f8e1 	bl	8000e70 <Key_Scan>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	73fb      	strb	r3, [r7, #15]
		if (key == KEY1)
 8000cb2:	7bfb      	ldrb	r3, [r7, #15]
 8000cb4:	2b01      	cmp	r3, #1
 8000cb6:	d10f      	bne.n	8000cd8 <Task3+0x3c>
		{
			if (Task1Handle != NULL)
 8000cb8:	4b0b      	ldr	r3, [pc, #44]	@ (8000ce8 <Task3+0x4c>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d00b      	beq.n	8000cd8 <Task3+0x3c>
			{
				vTaskDelete(Task1Handle);
 8000cc0:	4b09      	ldr	r3, [pc, #36]	@ (8000ce8 <Task3+0x4c>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f003 fa43 	bl	8004150 <vTaskDelete>
				Task1Handle = NULL;
 8000cca:	4b07      	ldr	r3, [pc, #28]	@ (8000ce8 <Task3+0x4c>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	601a      	str	r2, [r3, #0]
				LED_Control(LED1, OFF);
 8000cd0:	2100      	movs	r1, #0
 8000cd2:	2001      	movs	r0, #1
 8000cd4:	f000 f87a 	bl	8000dcc <LED_Control>
			}
		}
		vTaskDelay(1000);
 8000cd8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000cdc:	f003 fac8 	bl	8004270 <vTaskDelay>
	{
 8000ce0:	e7e0      	b.n	8000ca4 <Task3+0x8>
 8000ce2:	bf00      	nop
 8000ce4:	080092b8 	.word	0x080092b8
 8000ce8:	200005fc 	.word	0x200005fc

08000cec <FreeRTOSStart>:
	}
}

void FreeRTOSStart()
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b082      	sub	sp, #8
 8000cf0:	af02      	add	r7, sp, #8
	//Create a startup task.
	xTaskCreate(StartTask, "StartTask", START_TASK_STACK, NULL, START_TASK_PRIORITY, &startTaskHandle);
 8000cf2:	4b07      	ldr	r3, [pc, #28]	@ (8000d10 <FreeRTOSStart+0x24>)
 8000cf4:	9301      	str	r3, [sp, #4]
 8000cf6:	2301      	movs	r3, #1
 8000cf8:	9300      	str	r3, [sp, #0]
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	2280      	movs	r2, #128	@ 0x80
 8000cfe:	4905      	ldr	r1, [pc, #20]	@ (8000d14 <FreeRTOSStart+0x28>)
 8000d00:	4805      	ldr	r0, [pc, #20]	@ (8000d18 <FreeRTOSStart+0x2c>)
 8000d02:	f003 f906 	bl	8003f12 <xTaskCreate>
	//Start the scheduler.
	vTaskStartScheduler();
 8000d06:	f003 fb21 	bl	800434c <vTaskStartScheduler>
}
 8000d0a:	bf00      	nop
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	200005f8 	.word	0x200005f8
 8000d14:	080092cc 	.word	0x080092cc
 8000d18:	08000bd5 	.word	0x08000bd5

08000d1c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b088      	sub	sp, #32
 8000d20:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d22:	f107 0310 	add.w	r3, r7, #16
 8000d26:	2200      	movs	r2, #0
 8000d28:	601a      	str	r2, [r3, #0]
 8000d2a:	605a      	str	r2, [r3, #4]
 8000d2c:	609a      	str	r2, [r3, #8]
 8000d2e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d30:	4b23      	ldr	r3, [pc, #140]	@ (8000dc0 <MX_GPIO_Init+0xa4>)
 8000d32:	699b      	ldr	r3, [r3, #24]
 8000d34:	4a22      	ldr	r2, [pc, #136]	@ (8000dc0 <MX_GPIO_Init+0xa4>)
 8000d36:	f043 0320 	orr.w	r3, r3, #32
 8000d3a:	6193      	str	r3, [r2, #24]
 8000d3c:	4b20      	ldr	r3, [pc, #128]	@ (8000dc0 <MX_GPIO_Init+0xa4>)
 8000d3e:	699b      	ldr	r3, [r3, #24]
 8000d40:	f003 0320 	and.w	r3, r3, #32
 8000d44:	60fb      	str	r3, [r7, #12]
 8000d46:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d48:	4b1d      	ldr	r3, [pc, #116]	@ (8000dc0 <MX_GPIO_Init+0xa4>)
 8000d4a:	699b      	ldr	r3, [r3, #24]
 8000d4c:	4a1c      	ldr	r2, [pc, #112]	@ (8000dc0 <MX_GPIO_Init+0xa4>)
 8000d4e:	f043 0304 	orr.w	r3, r3, #4
 8000d52:	6193      	str	r3, [r2, #24]
 8000d54:	4b1a      	ldr	r3, [pc, #104]	@ (8000dc0 <MX_GPIO_Init+0xa4>)
 8000d56:	699b      	ldr	r3, [r3, #24]
 8000d58:	f003 0304 	and.w	r3, r3, #4
 8000d5c:	60bb      	str	r3, [r7, #8]
 8000d5e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d60:	4b17      	ldr	r3, [pc, #92]	@ (8000dc0 <MX_GPIO_Init+0xa4>)
 8000d62:	699b      	ldr	r3, [r3, #24]
 8000d64:	4a16      	ldr	r2, [pc, #88]	@ (8000dc0 <MX_GPIO_Init+0xa4>)
 8000d66:	f043 0308 	orr.w	r3, r3, #8
 8000d6a:	6193      	str	r3, [r2, #24]
 8000d6c:	4b14      	ldr	r3, [pc, #80]	@ (8000dc0 <MX_GPIO_Init+0xa4>)
 8000d6e:	699b      	ldr	r3, [r3, #24]
 8000d70:	f003 0308 	and.w	r3, r3, #8
 8000d74:	607b      	str	r3, [r7, #4]
 8000d76:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 8000d78:	2200      	movs	r2, #0
 8000d7a:	2106      	movs	r1, #6
 8000d7c:	4811      	ldr	r0, [pc, #68]	@ (8000dc4 <MX_GPIO_Init+0xa8>)
 8000d7e:	f000 ff8c 	bl	8001c9a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA1 PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8000d82:	2306      	movs	r3, #6
 8000d84:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d86:	2301      	movs	r3, #1
 8000d88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d8e:	2302      	movs	r3, #2
 8000d90:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d92:	f107 0310 	add.w	r3, r7, #16
 8000d96:	4619      	mov	r1, r3
 8000d98:	480a      	ldr	r0, [pc, #40]	@ (8000dc4 <MX_GPIO_Init+0xa8>)
 8000d9a:	f000 fde3 	bl	8001964 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_10;
 8000d9e:	f240 4301 	movw	r3, #1025	@ 0x401
 8000da2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000da4:	2300      	movs	r3, #0
 8000da6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000da8:	2301      	movs	r3, #1
 8000daa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dac:	f107 0310 	add.w	r3, r7, #16
 8000db0:	4619      	mov	r1, r3
 8000db2:	4805      	ldr	r0, [pc, #20]	@ (8000dc8 <MX_GPIO_Init+0xac>)
 8000db4:	f000 fdd6 	bl	8001964 <HAL_GPIO_Init>

}
 8000db8:	bf00      	nop
 8000dba:	3720      	adds	r7, #32
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	40021000 	.word	0x40021000
 8000dc4:	40010800 	.word	0x40010800
 8000dc8:	40010c00 	.word	0x40010c00

08000dcc <LED_Control>:

/* USER CODE BEGIN 2 */
void LED_Control(uint8_t device, uint8_t cmd)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b082      	sub	sp, #8
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	460a      	mov	r2, r1
 8000dd6:	71fb      	strb	r3, [r7, #7]
 8000dd8:	4613      	mov	r3, r2
 8000dda:	71bb      	strb	r3, [r7, #6]
	if (device == LED1)
 8000ddc:	79fb      	ldrb	r3, [r7, #7]
 8000dde:	2b01      	cmp	r3, #1
 8000de0:	d111      	bne.n	8000e06 <LED_Control+0x3a>
	{
		if (cmd == ON)
 8000de2:	79bb      	ldrb	r3, [r7, #6]
 8000de4:	2b01      	cmp	r3, #1
 8000de6:	d105      	bne.n	8000df4 <LED_Control+0x28>
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 8000de8:	2201      	movs	r2, #1
 8000dea:	2102      	movs	r1, #2
 8000dec:	4812      	ldr	r0, [pc, #72]	@ (8000e38 <LED_Control+0x6c>)
 8000dee:	f000 ff54 	bl	8001c9a <HAL_GPIO_WritePin>
		else if (cmd == OFF)
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
		}
	}
}
 8000df2:	e01c      	b.n	8000e2e <LED_Control+0x62>
		else if (cmd == OFF)
 8000df4:	79bb      	ldrb	r3, [r7, #6]
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d119      	bne.n	8000e2e <LED_Control+0x62>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	2102      	movs	r1, #2
 8000dfe:	480e      	ldr	r0, [pc, #56]	@ (8000e38 <LED_Control+0x6c>)
 8000e00:	f000 ff4b 	bl	8001c9a <HAL_GPIO_WritePin>
}
 8000e04:	e013      	b.n	8000e2e <LED_Control+0x62>
	else if (device == LED2)
 8000e06:	79fb      	ldrb	r3, [r7, #7]
 8000e08:	2b02      	cmp	r3, #2
 8000e0a:	d110      	bne.n	8000e2e <LED_Control+0x62>
		if (cmd == ON)
 8000e0c:	79bb      	ldrb	r3, [r7, #6]
 8000e0e:	2b01      	cmp	r3, #1
 8000e10:	d105      	bne.n	8000e1e <LED_Control+0x52>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 8000e12:	2201      	movs	r2, #1
 8000e14:	2104      	movs	r1, #4
 8000e16:	4808      	ldr	r0, [pc, #32]	@ (8000e38 <LED_Control+0x6c>)
 8000e18:	f000 ff3f 	bl	8001c9a <HAL_GPIO_WritePin>
}
 8000e1c:	e007      	b.n	8000e2e <LED_Control+0x62>
		else if (cmd == OFF)
 8000e1e:	79bb      	ldrb	r3, [r7, #6]
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d104      	bne.n	8000e2e <LED_Control+0x62>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 8000e24:	2200      	movs	r2, #0
 8000e26:	2104      	movs	r1, #4
 8000e28:	4803      	ldr	r0, [pc, #12]	@ (8000e38 <LED_Control+0x6c>)
 8000e2a:	f000 ff36 	bl	8001c9a <HAL_GPIO_WritePin>
}
 8000e2e:	bf00      	nop
 8000e30:	3708      	adds	r7, #8
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	40010800 	.word	0x40010800

08000e3c <LED_Toggle>:
void LED_Toggle(uint8_t device)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b082      	sub	sp, #8
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	4603      	mov	r3, r0
 8000e44:	71fb      	strb	r3, [r7, #7]
	if (device == LED1)
 8000e46:	79fb      	ldrb	r3, [r7, #7]
 8000e48:	2b01      	cmp	r3, #1
 8000e4a:	d104      	bne.n	8000e56 <LED_Toggle+0x1a>
	{
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1);
 8000e4c:	2102      	movs	r1, #2
 8000e4e:	4807      	ldr	r0, [pc, #28]	@ (8000e6c <LED_Toggle+0x30>)
 8000e50:	f000 ff3b 	bl	8001cca <HAL_GPIO_TogglePin>
	}
	else if (device == LED2)
	{
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_2);
	}
}
 8000e54:	e006      	b.n	8000e64 <LED_Toggle+0x28>
	else if (device == LED2)
 8000e56:	79fb      	ldrb	r3, [r7, #7]
 8000e58:	2b02      	cmp	r3, #2
 8000e5a:	d103      	bne.n	8000e64 <LED_Toggle+0x28>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_2);
 8000e5c:	2104      	movs	r1, #4
 8000e5e:	4803      	ldr	r0, [pc, #12]	@ (8000e6c <LED_Toggle+0x30>)
 8000e60:	f000 ff33 	bl	8001cca <HAL_GPIO_TogglePin>
}
 8000e64:	bf00      	nop
 8000e66:	3708      	adds	r7, #8
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	40010800 	.word	0x40010800

08000e70 <Key_Scan>:
uint8_t Key_Scan()
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b082      	sub	sp, #8
 8000e74:	af00      	add	r7, sp, #0
	static uint32_t oldUWTick = 0;
	if ((uwTick - oldUWTick) < 200) return 0;
 8000e76:	4b14      	ldr	r3, [pc, #80]	@ (8000ec8 <Key_Scan+0x58>)
 8000e78:	681a      	ldr	r2, [r3, #0]
 8000e7a:	4b14      	ldr	r3, [pc, #80]	@ (8000ecc <Key_Scan+0x5c>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	1ad3      	subs	r3, r2, r3
 8000e80:	2bc7      	cmp	r3, #199	@ 0xc7
 8000e82:	d801      	bhi.n	8000e88 <Key_Scan+0x18>
 8000e84:	2300      	movs	r3, #0
 8000e86:	e01a      	b.n	8000ebe <Key_Scan+0x4e>
	oldUWTick = uwTick;
 8000e88:	4b0f      	ldr	r3, [pc, #60]	@ (8000ec8 <Key_Scan+0x58>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4a0f      	ldr	r2, [pc, #60]	@ (8000ecc <Key_Scan+0x5c>)
 8000e8e:	6013      	str	r3, [r2, #0]
	uint8_t keyval = 0;
 8000e90:	2300      	movs	r3, #0
 8000e92:	71fb      	strb	r3, [r7, #7]
	if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == GPIO_PIN_RESET)
 8000e94:	2101      	movs	r1, #1
 8000e96:	480e      	ldr	r0, [pc, #56]	@ (8000ed0 <Key_Scan+0x60>)
 8000e98:	f000 fee8 	bl	8001c6c <HAL_GPIO_ReadPin>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d102      	bne.n	8000ea8 <Key_Scan+0x38>
	{
		keyval = KEY1;
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	71fb      	strb	r3, [r7, #7]
 8000ea6:	e009      	b.n	8000ebc <Key_Scan+0x4c>
	}
	else if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_10) == GPIO_PIN_RESET)
 8000ea8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000eac:	4808      	ldr	r0, [pc, #32]	@ (8000ed0 <Key_Scan+0x60>)
 8000eae:	f000 fedd 	bl	8001c6c <HAL_GPIO_ReadPin>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d101      	bne.n	8000ebc <Key_Scan+0x4c>
	{
		keyval = KEY2;
 8000eb8:	2302      	movs	r3, #2
 8000eba:	71fb      	strb	r3, [r7, #7]
	}
	return keyval;
 8000ebc:	79fb      	ldrb	r3, [r7, #7]
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	3708      	adds	r7, #8
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	200006f4 	.word	0x200006f4
 8000ecc:	20000608 	.word	0x20000608
 8000ed0:	40010c00 	.word	0x40010c00

08000ed4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ed8:	4b12      	ldr	r3, [pc, #72]	@ (8000f24 <MX_I2C1_Init+0x50>)
 8000eda:	4a13      	ldr	r2, [pc, #76]	@ (8000f28 <MX_I2C1_Init+0x54>)
 8000edc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000ede:	4b11      	ldr	r3, [pc, #68]	@ (8000f24 <MX_I2C1_Init+0x50>)
 8000ee0:	4a12      	ldr	r2, [pc, #72]	@ (8000f2c <MX_I2C1_Init+0x58>)
 8000ee2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ee4:	4b0f      	ldr	r3, [pc, #60]	@ (8000f24 <MX_I2C1_Init+0x50>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000eea:	4b0e      	ldr	r3, [pc, #56]	@ (8000f24 <MX_I2C1_Init+0x50>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ef0:	4b0c      	ldr	r3, [pc, #48]	@ (8000f24 <MX_I2C1_Init+0x50>)
 8000ef2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000ef6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ef8:	4b0a      	ldr	r3, [pc, #40]	@ (8000f24 <MX_I2C1_Init+0x50>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000efe:	4b09      	ldr	r3, [pc, #36]	@ (8000f24 <MX_I2C1_Init+0x50>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f04:	4b07      	ldr	r3, [pc, #28]	@ (8000f24 <MX_I2C1_Init+0x50>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f0a:	4b06      	ldr	r3, [pc, #24]	@ (8000f24 <MX_I2C1_Init+0x50>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f10:	4804      	ldr	r0, [pc, #16]	@ (8000f24 <MX_I2C1_Init+0x50>)
 8000f12:	f000 fef3 	bl	8001cfc <HAL_I2C_Init>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d001      	beq.n	8000f20 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000f1c:	f000 f8c4 	bl	80010a8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000f20:	bf00      	nop
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	2000060c 	.word	0x2000060c
 8000f28:	40005400 	.word	0x40005400
 8000f2c:	000186a0 	.word	0x000186a0

08000f30 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b08a      	sub	sp, #40	@ 0x28
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f38:	f107 0314 	add.w	r3, r7, #20
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	601a      	str	r2, [r3, #0]
 8000f40:	605a      	str	r2, [r3, #4]
 8000f42:	609a      	str	r2, [r3, #8]
 8000f44:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	4a1d      	ldr	r2, [pc, #116]	@ (8000fc0 <HAL_I2C_MspInit+0x90>)
 8000f4c:	4293      	cmp	r3, r2
 8000f4e:	d132      	bne.n	8000fb6 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f50:	4b1c      	ldr	r3, [pc, #112]	@ (8000fc4 <HAL_I2C_MspInit+0x94>)
 8000f52:	699b      	ldr	r3, [r3, #24]
 8000f54:	4a1b      	ldr	r2, [pc, #108]	@ (8000fc4 <HAL_I2C_MspInit+0x94>)
 8000f56:	f043 0308 	orr.w	r3, r3, #8
 8000f5a:	6193      	str	r3, [r2, #24]
 8000f5c:	4b19      	ldr	r3, [pc, #100]	@ (8000fc4 <HAL_I2C_MspInit+0x94>)
 8000f5e:	699b      	ldr	r3, [r3, #24]
 8000f60:	f003 0308 	and.w	r3, r3, #8
 8000f64:	613b      	str	r3, [r7, #16]
 8000f66:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000f68:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000f6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f6e:	2312      	movs	r3, #18
 8000f70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f72:	2303      	movs	r3, #3
 8000f74:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f76:	f107 0314 	add.w	r3, r7, #20
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	4812      	ldr	r0, [pc, #72]	@ (8000fc8 <HAL_I2C_MspInit+0x98>)
 8000f7e:	f000 fcf1 	bl	8001964 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8000f82:	4b12      	ldr	r3, [pc, #72]	@ (8000fcc <HAL_I2C_MspInit+0x9c>)
 8000f84:	685b      	ldr	r3, [r3, #4]
 8000f86:	627b      	str	r3, [r7, #36]	@ 0x24
 8000f88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f8a:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8000f8e:	627b      	str	r3, [r7, #36]	@ 0x24
 8000f90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f92:	f043 0302 	orr.w	r3, r3, #2
 8000f96:	627b      	str	r3, [r7, #36]	@ 0x24
 8000f98:	4a0c      	ldr	r2, [pc, #48]	@ (8000fcc <HAL_I2C_MspInit+0x9c>)
 8000f9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f9c:	6053      	str	r3, [r2, #4]

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f9e:	4b09      	ldr	r3, [pc, #36]	@ (8000fc4 <HAL_I2C_MspInit+0x94>)
 8000fa0:	69db      	ldr	r3, [r3, #28]
 8000fa2:	4a08      	ldr	r2, [pc, #32]	@ (8000fc4 <HAL_I2C_MspInit+0x94>)
 8000fa4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000fa8:	61d3      	str	r3, [r2, #28]
 8000faa:	4b06      	ldr	r3, [pc, #24]	@ (8000fc4 <HAL_I2C_MspInit+0x94>)
 8000fac:	69db      	ldr	r3, [r3, #28]
 8000fae:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000fb2:	60fb      	str	r3, [r7, #12]
 8000fb4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000fb6:	bf00      	nop
 8000fb8:	3728      	adds	r7, #40	@ 0x28
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	40005400 	.word	0x40005400
 8000fc4:	40021000 	.word	0x40021000
 8000fc8:	40010c00 	.word	0x40010c00
 8000fcc:	40010000 	.word	0x40010000

08000fd0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fd4:	f000 fbb4 	bl	8001740 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fd8:	f000 f80e 	bl	8000ff8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fdc:	f7ff fe9e 	bl	8000d1c <MX_GPIO_Init>
  MX_I2C1_Init();
 8000fe0:	f7ff ff78 	bl	8000ed4 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000fe4:	f000 fafe 	bl	80015e4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  OLED_Init();
 8000fe8:	f000 f8b8 	bl	800115c <OLED_Init>
  OLED_Test();
 8000fec:	f000 f942 	bl	8001274 <OLED_Test>
  FreeRTOSStart();
 8000ff0:	f7ff fe7c 	bl	8000cec <FreeRTOSStart>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000ff4:	bf00      	nop
 8000ff6:	e7fd      	b.n	8000ff4 <main+0x24>

08000ff8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b090      	sub	sp, #64	@ 0x40
 8000ffc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ffe:	f107 0318 	add.w	r3, r7, #24
 8001002:	2228      	movs	r2, #40	@ 0x28
 8001004:	2100      	movs	r1, #0
 8001006:	4618      	mov	r0, r3
 8001008:	f004 fdf6 	bl	8005bf8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800100c:	1d3b      	adds	r3, r7, #4
 800100e:	2200      	movs	r2, #0
 8001010:	601a      	str	r2, [r3, #0]
 8001012:	605a      	str	r2, [r3, #4]
 8001014:	609a      	str	r2, [r3, #8]
 8001016:	60da      	str	r2, [r3, #12]
 8001018:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800101a:	2301      	movs	r3, #1
 800101c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800101e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001022:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001024:	2300      	movs	r3, #0
 8001026:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001028:	2301      	movs	r3, #1
 800102a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800102c:	2302      	movs	r3, #2
 800102e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001030:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001034:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001036:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800103a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800103c:	f107 0318 	add.w	r3, r7, #24
 8001040:	4618      	mov	r0, r3
 8001042:	f001 fb07 	bl	8002654 <HAL_RCC_OscConfig>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d001      	beq.n	8001050 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800104c:	f000 f82c 	bl	80010a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001050:	230f      	movs	r3, #15
 8001052:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001054:	2302      	movs	r3, #2
 8001056:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001058:	2300      	movs	r3, #0
 800105a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800105c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001060:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001062:	2300      	movs	r3, #0
 8001064:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001066:	1d3b      	adds	r3, r7, #4
 8001068:	2102      	movs	r1, #2
 800106a:	4618      	mov	r0, r3
 800106c:	f001 fd74 	bl	8002b58 <HAL_RCC_ClockConfig>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d001      	beq.n	800107a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001076:	f000 f817 	bl	80010a8 <Error_Handler>
  }
}
 800107a:	bf00      	nop
 800107c:	3740      	adds	r7, #64	@ 0x40
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
	...

08001084 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	4a04      	ldr	r2, [pc, #16]	@ (80010a4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001092:	4293      	cmp	r3, r2
 8001094:	d101      	bne.n	800109a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001096:	f000 fb69 	bl	800176c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800109a:	bf00      	nop
 800109c:	3708      	adds	r7, #8
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	40000800 	.word	0x40000800

080010a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010ac:	b672      	cpsid	i
}
 80010ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010b0:	bf00      	nop
 80010b2:	e7fd      	b.n	80010b0 <Error_Handler+0x8>

080010b4 <WriteCMD>:
static void SetPosition(uint8_t x, uint8_t page);
static void GetNUMPOST(uint32_t num, uint8_t length, uint8_t* array);

//Private functions.
static void WriteCMD(uint8_t cmd)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b086      	sub	sp, #24
 80010b8:	af04      	add	r7, sp, #16
 80010ba:	4603      	mov	r3, r0
 80010bc:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, OLED_DEV_ADDRESS, OLED_CMD_ADDRESS, I2C_MEMADD_SIZE_8BIT, &cmd, 1, 0x100);
 80010be:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80010c2:	9302      	str	r3, [sp, #8]
 80010c4:	2301      	movs	r3, #1
 80010c6:	9301      	str	r3, [sp, #4]
 80010c8:	1dfb      	adds	r3, r7, #7
 80010ca:	9300      	str	r3, [sp, #0]
 80010cc:	2301      	movs	r3, #1
 80010ce:	2200      	movs	r2, #0
 80010d0:	2178      	movs	r1, #120	@ 0x78
 80010d2:	4803      	ldr	r0, [pc, #12]	@ (80010e0 <WriteCMD+0x2c>)
 80010d4:	f000 ff56 	bl	8001f84 <HAL_I2C_Mem_Write>
}
 80010d8:	bf00      	nop
 80010da:	3708      	adds	r7, #8
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	2000060c 	.word	0x2000060c

080010e4 <WriteData>:
static void WriteData(uint8_t data)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b086      	sub	sp, #24
 80010e8:	af04      	add	r7, sp, #16
 80010ea:	4603      	mov	r3, r0
 80010ec:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, OLED_DEV_ADDRESS, OLED_DATA_ADDRESS, I2C_MEMADD_SIZE_8BIT, &data, 1, 0x100);
 80010ee:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80010f2:	9302      	str	r3, [sp, #8]
 80010f4:	2301      	movs	r3, #1
 80010f6:	9301      	str	r3, [sp, #4]
 80010f8:	1dfb      	adds	r3, r7, #7
 80010fa:	9300      	str	r3, [sp, #0]
 80010fc:	2301      	movs	r3, #1
 80010fe:	2240      	movs	r2, #64	@ 0x40
 8001100:	2178      	movs	r1, #120	@ 0x78
 8001102:	4803      	ldr	r0, [pc, #12]	@ (8001110 <WriteData+0x2c>)
 8001104:	f000 ff3e 	bl	8001f84 <HAL_I2C_Mem_Write>
}
 8001108:	bf00      	nop
 800110a:	3708      	adds	r7, #8
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	2000060c 	.word	0x2000060c

08001114 <SetPosition>:
//Setting the screen pointer.
static void SetPosition(uint8_t x, uint8_t page)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0
 800111a:	4603      	mov	r3, r0
 800111c:	460a      	mov	r2, r1
 800111e:	71fb      	strb	r3, [r7, #7]
 8001120:	4613      	mov	r3, r2
 8001122:	71bb      	strb	r3, [r7, #6]
	WriteCMD(0x00 | (x & 0x0F));
 8001124:	79fb      	ldrb	r3, [r7, #7]
 8001126:	f003 030f 	and.w	r3, r3, #15
 800112a:	b2db      	uxtb	r3, r3
 800112c:	4618      	mov	r0, r3
 800112e:	f7ff ffc1 	bl	80010b4 <WriteCMD>
	WriteCMD(0x10 | (x & 0xF0) >> 4);
 8001132:	79fb      	ldrb	r3, [r7, #7]
 8001134:	091b      	lsrs	r3, r3, #4
 8001136:	b2db      	uxtb	r3, r3
 8001138:	f043 0310 	orr.w	r3, r3, #16
 800113c:	b2db      	uxtb	r3, r3
 800113e:	4618      	mov	r0, r3
 8001140:	f7ff ffb8 	bl	80010b4 <WriteCMD>
	WriteCMD(0xB0 | page);
 8001144:	79bb      	ldrb	r3, [r7, #6]
 8001146:	f063 034f 	orn	r3, r3, #79	@ 0x4f
 800114a:	b2db      	uxtb	r3, r3
 800114c:	4618      	mov	r0, r3
 800114e:	f7ff ffb1 	bl	80010b4 <WriteCMD>
}
 8001152:	bf00      	nop
 8001154:	3708      	adds	r7, #8
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
	...

0800115c <OLED_Init>:
	}
}

//Public functions.
void OLED_Init()
{
 800115c:	b5b0      	push	{r4, r5, r7, lr}
 800115e:	b086      	sub	sp, #24
 8001160:	af00      	add	r7, sp, #0
	uint8_t cmdData[]={
 8001162:	4b12      	ldr	r3, [pc, #72]	@ (80011ac <OLED_Init+0x50>)
 8001164:	463c      	mov	r4, r7
 8001166:	461d      	mov	r5, r3
 8001168:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800116a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800116c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001170:	6020      	str	r0, [r4, #0]
 8001172:	3404      	adds	r4, #4
 8001174:	8021      	strh	r1, [r4, #0]
 8001176:	3402      	adds	r4, #2
 8001178:	0c0b      	lsrs	r3, r1, #16
 800117a:	7023      	strb	r3, [r4, #0]
			0xAE, 0xD5, 0x80, 0xA8, 0x3F, 0xD3, 0x00, 0x40,0xA1, 0xC8, 0xDA,
			0x12, 0x81, 0xCF, 0xD9, 0xF1, 0xDB, 0x40, 0xA4, 0xA6,0x8D, 0x14,
			0xAF};
	for (uint8_t i = 0; i < 23; i++)
 800117c:	2300      	movs	r3, #0
 800117e:	75fb      	strb	r3, [r7, #23]
 8001180:	e00a      	b.n	8001198 <OLED_Init+0x3c>
	{
		WriteCMD(cmdData[i]);
 8001182:	7dfb      	ldrb	r3, [r7, #23]
 8001184:	3318      	adds	r3, #24
 8001186:	443b      	add	r3, r7
 8001188:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800118c:	4618      	mov	r0, r3
 800118e:	f7ff ff91 	bl	80010b4 <WriteCMD>
	for (uint8_t i = 0; i < 23; i++)
 8001192:	7dfb      	ldrb	r3, [r7, #23]
 8001194:	3301      	adds	r3, #1
 8001196:	75fb      	strb	r3, [r7, #23]
 8001198:	7dfb      	ldrb	r3, [r7, #23]
 800119a:	2b16      	cmp	r3, #22
 800119c:	d9f1      	bls.n	8001182 <OLED_Init+0x26>
	}
	OLED_Clear();
 800119e:	f000 f807 	bl	80011b0 <OLED_Clear>
}
 80011a2:	bf00      	nop
 80011a4:	3718      	adds	r7, #24
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bdb0      	pop	{r4, r5, r7, pc}
 80011aa:	bf00      	nop
 80011ac:	080092d8 	.word	0x080092d8

080011b0 <OLED_Clear>:
//Clear the entire screen.
void OLED_Clear()
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < 128; i++)
 80011b6:	2300      	movs	r3, #0
 80011b8:	71fb      	strb	r3, [r7, #7]
 80011ba:	e014      	b.n	80011e6 <OLED_Clear+0x36>
	{
		for (uint8_t j = 0; j < 8; j++)
 80011bc:	2300      	movs	r3, #0
 80011be:	71bb      	strb	r3, [r7, #6]
 80011c0:	e00b      	b.n	80011da <OLED_Clear+0x2a>
		{
			SetPosition(i, j);
 80011c2:	79ba      	ldrb	r2, [r7, #6]
 80011c4:	79fb      	ldrb	r3, [r7, #7]
 80011c6:	4611      	mov	r1, r2
 80011c8:	4618      	mov	r0, r3
 80011ca:	f7ff ffa3 	bl	8001114 <SetPosition>
			WriteData(0x00);
 80011ce:	2000      	movs	r0, #0
 80011d0:	f7ff ff88 	bl	80010e4 <WriteData>
		for (uint8_t j = 0; j < 8; j++)
 80011d4:	79bb      	ldrb	r3, [r7, #6]
 80011d6:	3301      	adds	r3, #1
 80011d8:	71bb      	strb	r3, [r7, #6]
 80011da:	79bb      	ldrb	r3, [r7, #6]
 80011dc:	2b07      	cmp	r3, #7
 80011de:	d9f0      	bls.n	80011c2 <OLED_Clear+0x12>
	for (uint8_t i = 0; i < 128; i++)
 80011e0:	79fb      	ldrb	r3, [r7, #7]
 80011e2:	3301      	adds	r3, #1
 80011e4:	71fb      	strb	r3, [r7, #7]
 80011e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	dae6      	bge.n	80011bc <OLED_Clear+0xc>
		}
	}
}
 80011ee:	bf00      	nop
 80011f0:	bf00      	nop
 80011f2:	3708      	adds	r7, #8
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}

080011f8 <OLED_ShowIMG>:
			}
			break;
	}
}
void OLED_ShowIMG(uint8_t x, uint8_t page, uint8_t imgWeight, uint8_t imgHeight, const uint8_t bmp[])
{
 80011f8:	b590      	push	{r4, r7, lr}
 80011fa:	b085      	sub	sp, #20
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	4604      	mov	r4, r0
 8001200:	4608      	mov	r0, r1
 8001202:	4611      	mov	r1, r2
 8001204:	461a      	mov	r2, r3
 8001206:	4623      	mov	r3, r4
 8001208:	71fb      	strb	r3, [r7, #7]
 800120a:	4603      	mov	r3, r0
 800120c:	71bb      	strb	r3, [r7, #6]
 800120e:	460b      	mov	r3, r1
 8001210:	717b      	strb	r3, [r7, #5]
 8001212:	4613      	mov	r3, r2
 8001214:	713b      	strb	r3, [r7, #4]
	for (uint8_t i = 0; i < imgHeight; i++)
 8001216:	2300      	movs	r3, #0
 8001218:	73fb      	strb	r3, [r7, #15]
 800121a:	e022      	b.n	8001262 <OLED_ShowIMG+0x6a>
	{
		SetPosition(x, page + i);
 800121c:	79ba      	ldrb	r2, [r7, #6]
 800121e:	7bfb      	ldrb	r3, [r7, #15]
 8001220:	4413      	add	r3, r2
 8001222:	b2da      	uxtb	r2, r3
 8001224:	79fb      	ldrb	r3, [r7, #7]
 8001226:	4611      	mov	r1, r2
 8001228:	4618      	mov	r0, r3
 800122a:	f7ff ff73 	bl	8001114 <SetPosition>
		for (uint8_t j = 0; j < imgWeight; j++)
 800122e:	2300      	movs	r3, #0
 8001230:	73bb      	strb	r3, [r7, #14]
 8001232:	e00f      	b.n	8001254 <OLED_ShowIMG+0x5c>
		{
			WriteData(bmp[i * imgWeight + j]);
 8001234:	7bfb      	ldrb	r3, [r7, #15]
 8001236:	797a      	ldrb	r2, [r7, #5]
 8001238:	fb03 f202 	mul.w	r2, r3, r2
 800123c:	7bbb      	ldrb	r3, [r7, #14]
 800123e:	4413      	add	r3, r2
 8001240:	461a      	mov	r2, r3
 8001242:	6a3b      	ldr	r3, [r7, #32]
 8001244:	4413      	add	r3, r2
 8001246:	781b      	ldrb	r3, [r3, #0]
 8001248:	4618      	mov	r0, r3
 800124a:	f7ff ff4b 	bl	80010e4 <WriteData>
		for (uint8_t j = 0; j < imgWeight; j++)
 800124e:	7bbb      	ldrb	r3, [r7, #14]
 8001250:	3301      	adds	r3, #1
 8001252:	73bb      	strb	r3, [r7, #14]
 8001254:	7bba      	ldrb	r2, [r7, #14]
 8001256:	797b      	ldrb	r3, [r7, #5]
 8001258:	429a      	cmp	r2, r3
 800125a:	d3eb      	bcc.n	8001234 <OLED_ShowIMG+0x3c>
	for (uint8_t i = 0; i < imgHeight; i++)
 800125c:	7bfb      	ldrb	r3, [r7, #15]
 800125e:	3301      	adds	r3, #1
 8001260:	73fb      	strb	r3, [r7, #15]
 8001262:	7bfa      	ldrb	r2, [r7, #15]
 8001264:	793b      	ldrb	r3, [r7, #4]
 8001266:	429a      	cmp	r2, r3
 8001268:	d3d8      	bcc.n	800121c <OLED_ShowIMG+0x24>
		}
	}
}
 800126a:	bf00      	nop
 800126c:	bf00      	nop
 800126e:	3714      	adds	r7, #20
 8001270:	46bd      	mov	sp, r7
 8001272:	bd90      	pop	{r4, r7, pc}

08001274 <OLED_Test>:
			break;
	}
}

void OLED_Test()
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b082      	sub	sp, #8
 8001278:	af02      	add	r7, sp, #8
	//OLED_ShowString(0, 0, "Hello world!", VI_VIII_DOT_MATRIX);
	//OLED_ShowString(0, 1, "Hello world!", VIII_XVI_DOT_MATRIX);
	//OLED_ShowIMG(0, 0, 48, 6, image);
	OLED_ShowIMG(0, 0, 128, 8, BMP1);
 800127a:	4b05      	ldr	r3, [pc, #20]	@ (8001290 <OLED_Test+0x1c>)
 800127c:	9300      	str	r3, [sp, #0]
 800127e:	2308      	movs	r3, #8
 8001280:	2280      	movs	r2, #128	@ 0x80
 8001282:	2100      	movs	r1, #0
 8001284:	2000      	movs	r0, #0
 8001286:	f7ff ffb7 	bl	80011f8 <OLED_ShowIMG>
	//OLED_ShowNUM(0, 0, 123, 3, VI_VIII_DOT_MATRIX);
	//OLED_ShowNUM(0, 1, 123, 3, VIII_XVI_DOT_MATRIX);
}
 800128a:	bf00      	nop
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}
 8001290:	20000000 	.word	0x20000000

08001294 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001294:	b480      	push	{r7}
 8001296:	b085      	sub	sp, #20
 8001298:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800129a:	4b15      	ldr	r3, [pc, #84]	@ (80012f0 <HAL_MspInit+0x5c>)
 800129c:	699b      	ldr	r3, [r3, #24]
 800129e:	4a14      	ldr	r2, [pc, #80]	@ (80012f0 <HAL_MspInit+0x5c>)
 80012a0:	f043 0301 	orr.w	r3, r3, #1
 80012a4:	6193      	str	r3, [r2, #24]
 80012a6:	4b12      	ldr	r3, [pc, #72]	@ (80012f0 <HAL_MspInit+0x5c>)
 80012a8:	699b      	ldr	r3, [r3, #24]
 80012aa:	f003 0301 	and.w	r3, r3, #1
 80012ae:	60bb      	str	r3, [r7, #8]
 80012b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012b2:	4b0f      	ldr	r3, [pc, #60]	@ (80012f0 <HAL_MspInit+0x5c>)
 80012b4:	69db      	ldr	r3, [r3, #28]
 80012b6:	4a0e      	ldr	r2, [pc, #56]	@ (80012f0 <HAL_MspInit+0x5c>)
 80012b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012bc:	61d3      	str	r3, [r2, #28]
 80012be:	4b0c      	ldr	r3, [pc, #48]	@ (80012f0 <HAL_MspInit+0x5c>)
 80012c0:	69db      	ldr	r3, [r3, #28]
 80012c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012c6:	607b      	str	r3, [r7, #4]
 80012c8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80012ca:	4b0a      	ldr	r3, [pc, #40]	@ (80012f4 <HAL_MspInit+0x60>)
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	60fb      	str	r3, [r7, #12]
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80012d6:	60fb      	str	r3, [r7, #12]
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80012de:	60fb      	str	r3, [r7, #12]
 80012e0:	4a04      	ldr	r2, [pc, #16]	@ (80012f4 <HAL_MspInit+0x60>)
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012e6:	bf00      	nop
 80012e8:	3714      	adds	r7, #20
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bc80      	pop	{r7}
 80012ee:	4770      	bx	lr
 80012f0:	40021000 	.word	0x40021000
 80012f4:	40010000 	.word	0x40010000

080012f8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b08e      	sub	sp, #56	@ 0x38
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001300:	2300      	movs	r3, #0
 8001302:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001304:	2300      	movs	r3, #0
 8001306:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 8001308:	2300      	movs	r3, #0
 800130a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 800130e:	4b34      	ldr	r3, [pc, #208]	@ (80013e0 <HAL_InitTick+0xe8>)
 8001310:	69db      	ldr	r3, [r3, #28]
 8001312:	4a33      	ldr	r2, [pc, #204]	@ (80013e0 <HAL_InitTick+0xe8>)
 8001314:	f043 0304 	orr.w	r3, r3, #4
 8001318:	61d3      	str	r3, [r2, #28]
 800131a:	4b31      	ldr	r3, [pc, #196]	@ (80013e0 <HAL_InitTick+0xe8>)
 800131c:	69db      	ldr	r3, [r3, #28]
 800131e:	f003 0304 	and.w	r3, r3, #4
 8001322:	60fb      	str	r3, [r7, #12]
 8001324:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001326:	f107 0210 	add.w	r2, r7, #16
 800132a:	f107 0314 	add.w	r3, r7, #20
 800132e:	4611      	mov	r1, r2
 8001330:	4618      	mov	r0, r3
 8001332:	f001 fd81 	bl	8002e38 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001336:	6a3b      	ldr	r3, [r7, #32]
 8001338:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800133a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800133c:	2b00      	cmp	r3, #0
 800133e:	d103      	bne.n	8001348 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001340:	f001 fd52 	bl	8002de8 <HAL_RCC_GetPCLK1Freq>
 8001344:	6378      	str	r0, [r7, #52]	@ 0x34
 8001346:	e004      	b.n	8001352 <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001348:	f001 fd4e 	bl	8002de8 <HAL_RCC_GetPCLK1Freq>
 800134c:	4603      	mov	r3, r0
 800134e:	005b      	lsls	r3, r3, #1
 8001350:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001352:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001354:	4a23      	ldr	r2, [pc, #140]	@ (80013e4 <HAL_InitTick+0xec>)
 8001356:	fba2 2303 	umull	r2, r3, r2, r3
 800135a:	0c9b      	lsrs	r3, r3, #18
 800135c:	3b01      	subs	r3, #1
 800135e:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8001360:	4b21      	ldr	r3, [pc, #132]	@ (80013e8 <HAL_InitTick+0xf0>)
 8001362:	4a22      	ldr	r2, [pc, #136]	@ (80013ec <HAL_InitTick+0xf4>)
 8001364:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8001366:	4b20      	ldr	r3, [pc, #128]	@ (80013e8 <HAL_InitTick+0xf0>)
 8001368:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800136c:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 800136e:	4a1e      	ldr	r2, [pc, #120]	@ (80013e8 <HAL_InitTick+0xf0>)
 8001370:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001372:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8001374:	4b1c      	ldr	r3, [pc, #112]	@ (80013e8 <HAL_InitTick+0xf0>)
 8001376:	2200      	movs	r2, #0
 8001378:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800137a:	4b1b      	ldr	r3, [pc, #108]	@ (80013e8 <HAL_InitTick+0xf0>)
 800137c:	2200      	movs	r2, #0
 800137e:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001380:	4b19      	ldr	r3, [pc, #100]	@ (80013e8 <HAL_InitTick+0xf0>)
 8001382:	2200      	movs	r2, #0
 8001384:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 8001386:	4818      	ldr	r0, [pc, #96]	@ (80013e8 <HAL_InitTick+0xf0>)
 8001388:	f001 fda4 	bl	8002ed4 <HAL_TIM_Base_Init>
 800138c:	4603      	mov	r3, r0
 800138e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001392:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001396:	2b00      	cmp	r3, #0
 8001398:	d11b      	bne.n	80013d2 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 800139a:	4813      	ldr	r0, [pc, #76]	@ (80013e8 <HAL_InitTick+0xf0>)
 800139c:	f001 fdf2 	bl	8002f84 <HAL_TIM_Base_Start_IT>
 80013a0:	4603      	mov	r3, r0
 80013a2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80013a6:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d111      	bne.n	80013d2 <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80013ae:	201e      	movs	r0, #30
 80013b0:	f000 fac9 	bl	8001946 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2b0f      	cmp	r3, #15
 80013b8:	d808      	bhi.n	80013cc <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 80013ba:	2200      	movs	r2, #0
 80013bc:	6879      	ldr	r1, [r7, #4]
 80013be:	201e      	movs	r0, #30
 80013c0:	f000 faa5 	bl	800190e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80013c4:	4a0a      	ldr	r2, [pc, #40]	@ (80013f0 <HAL_InitTick+0xf8>)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	6013      	str	r3, [r2, #0]
 80013ca:	e002      	b.n	80013d2 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 80013cc:	2301      	movs	r3, #1
 80013ce:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80013d2:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	3738      	adds	r7, #56	@ 0x38
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	40021000 	.word	0x40021000
 80013e4:	431bde83 	.word	0x431bde83
 80013e8:	20000660 	.word	0x20000660
 80013ec:	40000800 	.word	0x40000800
 80013f0:	20000404 	.word	0x20000404

080013f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80013f8:	bf00      	nop
 80013fa:	e7fd      	b.n	80013f8 <NMI_Handler+0x4>

080013fc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001400:	bf00      	nop
 8001402:	e7fd      	b.n	8001400 <HardFault_Handler+0x4>

08001404 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001408:	bf00      	nop
 800140a:	e7fd      	b.n	8001408 <MemManage_Handler+0x4>

0800140c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001410:	bf00      	nop
 8001412:	e7fd      	b.n	8001410 <BusFault_Handler+0x4>

08001414 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001418:	bf00      	nop
 800141a:	e7fd      	b.n	8001418 <UsageFault_Handler+0x4>

0800141c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001420:	bf00      	nop
 8001422:	46bd      	mov	sp, r7
 8001424:	bc80      	pop	{r7}
 8001426:	4770      	bx	lr

08001428 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800142c:	f003 fac0 	bl	80049b0 <xTaskGetSchedulerState>
 8001430:	4603      	mov	r3, r0
 8001432:	2b01      	cmp	r3, #1
 8001434:	d001      	beq.n	800143a <SysTick_Handler+0x12>
  {
	  xPortSysTickHandler();
 8001436:	f002 faa7 	bl	8003988 <xPortSysTickHandler>
  }
  /* USER CODE END SysTick_IRQn 1 */
}
 800143a:	bf00      	nop
 800143c:	bd80      	pop	{r7, pc}
	...

08001440 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001444:	4802      	ldr	r0, [pc, #8]	@ (8001450 <TIM4_IRQHandler+0x10>)
 8001446:	f001 fdef 	bl	8003028 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800144a:	bf00      	nop
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	20000660 	.word	0x20000660

08001454 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0
  return 1;
 8001458:	2301      	movs	r3, #1
}
 800145a:	4618      	mov	r0, r3
 800145c:	46bd      	mov	sp, r7
 800145e:	bc80      	pop	{r7}
 8001460:	4770      	bx	lr

08001462 <_kill>:

int _kill(int pid, int sig)
{
 8001462:	b580      	push	{r7, lr}
 8001464:	b082      	sub	sp, #8
 8001466:	af00      	add	r7, sp, #0
 8001468:	6078      	str	r0, [r7, #4]
 800146a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800146c:	f004 fc16 	bl	8005c9c <__errno>
 8001470:	4603      	mov	r3, r0
 8001472:	2216      	movs	r2, #22
 8001474:	601a      	str	r2, [r3, #0]
  return -1;
 8001476:	f04f 33ff 	mov.w	r3, #4294967295
}
 800147a:	4618      	mov	r0, r3
 800147c:	3708      	adds	r7, #8
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}

08001482 <_exit>:

void _exit (int status)
{
 8001482:	b580      	push	{r7, lr}
 8001484:	b082      	sub	sp, #8
 8001486:	af00      	add	r7, sp, #0
 8001488:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800148a:	f04f 31ff 	mov.w	r1, #4294967295
 800148e:	6878      	ldr	r0, [r7, #4]
 8001490:	f7ff ffe7 	bl	8001462 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001494:	bf00      	nop
 8001496:	e7fd      	b.n	8001494 <_exit+0x12>

08001498 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b086      	sub	sp, #24
 800149c:	af00      	add	r7, sp, #0
 800149e:	60f8      	str	r0, [r7, #12]
 80014a0:	60b9      	str	r1, [r7, #8]
 80014a2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014a4:	2300      	movs	r3, #0
 80014a6:	617b      	str	r3, [r7, #20]
 80014a8:	e00a      	b.n	80014c0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80014aa:	f3af 8000 	nop.w
 80014ae:	4601      	mov	r1, r0
 80014b0:	68bb      	ldr	r3, [r7, #8]
 80014b2:	1c5a      	adds	r2, r3, #1
 80014b4:	60ba      	str	r2, [r7, #8]
 80014b6:	b2ca      	uxtb	r2, r1
 80014b8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014ba:	697b      	ldr	r3, [r7, #20]
 80014bc:	3301      	adds	r3, #1
 80014be:	617b      	str	r3, [r7, #20]
 80014c0:	697a      	ldr	r2, [r7, #20]
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	429a      	cmp	r2, r3
 80014c6:	dbf0      	blt.n	80014aa <_read+0x12>
  }

  return len;
 80014c8:	687b      	ldr	r3, [r7, #4]
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	3718      	adds	r7, #24
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}

080014d2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80014d2:	b580      	push	{r7, lr}
 80014d4:	b086      	sub	sp, #24
 80014d6:	af00      	add	r7, sp, #0
 80014d8:	60f8      	str	r0, [r7, #12]
 80014da:	60b9      	str	r1, [r7, #8]
 80014dc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014de:	2300      	movs	r3, #0
 80014e0:	617b      	str	r3, [r7, #20]
 80014e2:	e009      	b.n	80014f8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80014e4:	68bb      	ldr	r3, [r7, #8]
 80014e6:	1c5a      	adds	r2, r3, #1
 80014e8:	60ba      	str	r2, [r7, #8]
 80014ea:	781b      	ldrb	r3, [r3, #0]
 80014ec:	4618      	mov	r0, r3
 80014ee:	f000 f8ef 	bl	80016d0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014f2:	697b      	ldr	r3, [r7, #20]
 80014f4:	3301      	adds	r3, #1
 80014f6:	617b      	str	r3, [r7, #20]
 80014f8:	697a      	ldr	r2, [r7, #20]
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	429a      	cmp	r2, r3
 80014fe:	dbf1      	blt.n	80014e4 <_write+0x12>
  }
  return len;
 8001500:	687b      	ldr	r3, [r7, #4]
}
 8001502:	4618      	mov	r0, r3
 8001504:	3718      	adds	r7, #24
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}

0800150a <_close>:

int _close(int file)
{
 800150a:	b480      	push	{r7}
 800150c:	b083      	sub	sp, #12
 800150e:	af00      	add	r7, sp, #0
 8001510:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001512:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001516:	4618      	mov	r0, r3
 8001518:	370c      	adds	r7, #12
 800151a:	46bd      	mov	sp, r7
 800151c:	bc80      	pop	{r7}
 800151e:	4770      	bx	lr

08001520 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001520:	b480      	push	{r7}
 8001522:	b083      	sub	sp, #12
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
 8001528:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001530:	605a      	str	r2, [r3, #4]
  return 0;
 8001532:	2300      	movs	r3, #0
}
 8001534:	4618      	mov	r0, r3
 8001536:	370c      	adds	r7, #12
 8001538:	46bd      	mov	sp, r7
 800153a:	bc80      	pop	{r7}
 800153c:	4770      	bx	lr

0800153e <_isatty>:

int _isatty(int file)
{
 800153e:	b480      	push	{r7}
 8001540:	b083      	sub	sp, #12
 8001542:	af00      	add	r7, sp, #0
 8001544:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001546:	2301      	movs	r3, #1
}
 8001548:	4618      	mov	r0, r3
 800154a:	370c      	adds	r7, #12
 800154c:	46bd      	mov	sp, r7
 800154e:	bc80      	pop	{r7}
 8001550:	4770      	bx	lr

08001552 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001552:	b480      	push	{r7}
 8001554:	b085      	sub	sp, #20
 8001556:	af00      	add	r7, sp, #0
 8001558:	60f8      	str	r0, [r7, #12]
 800155a:	60b9      	str	r1, [r7, #8]
 800155c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800155e:	2300      	movs	r3, #0
}
 8001560:	4618      	mov	r0, r3
 8001562:	3714      	adds	r7, #20
 8001564:	46bd      	mov	sp, r7
 8001566:	bc80      	pop	{r7}
 8001568:	4770      	bx	lr
	...

0800156c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b086      	sub	sp, #24
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001574:	4a14      	ldr	r2, [pc, #80]	@ (80015c8 <_sbrk+0x5c>)
 8001576:	4b15      	ldr	r3, [pc, #84]	@ (80015cc <_sbrk+0x60>)
 8001578:	1ad3      	subs	r3, r2, r3
 800157a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800157c:	697b      	ldr	r3, [r7, #20]
 800157e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001580:	4b13      	ldr	r3, [pc, #76]	@ (80015d0 <_sbrk+0x64>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	2b00      	cmp	r3, #0
 8001586:	d102      	bne.n	800158e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001588:	4b11      	ldr	r3, [pc, #68]	@ (80015d0 <_sbrk+0x64>)
 800158a:	4a12      	ldr	r2, [pc, #72]	@ (80015d4 <_sbrk+0x68>)
 800158c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800158e:	4b10      	ldr	r3, [pc, #64]	@ (80015d0 <_sbrk+0x64>)
 8001590:	681a      	ldr	r2, [r3, #0]
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	4413      	add	r3, r2
 8001596:	693a      	ldr	r2, [r7, #16]
 8001598:	429a      	cmp	r2, r3
 800159a:	d207      	bcs.n	80015ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800159c:	f004 fb7e 	bl	8005c9c <__errno>
 80015a0:	4603      	mov	r3, r0
 80015a2:	220c      	movs	r2, #12
 80015a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015a6:	f04f 33ff 	mov.w	r3, #4294967295
 80015aa:	e009      	b.n	80015c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015ac:	4b08      	ldr	r3, [pc, #32]	@ (80015d0 <_sbrk+0x64>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015b2:	4b07      	ldr	r3, [pc, #28]	@ (80015d0 <_sbrk+0x64>)
 80015b4:	681a      	ldr	r2, [r3, #0]
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	4413      	add	r3, r2
 80015ba:	4a05      	ldr	r2, [pc, #20]	@ (80015d0 <_sbrk+0x64>)
 80015bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015be:	68fb      	ldr	r3, [r7, #12]
}
 80015c0:	4618      	mov	r0, r3
 80015c2:	3718      	adds	r7, #24
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	20005000 	.word	0x20005000
 80015cc:	00000400 	.word	0x00000400
 80015d0:	200006a8 	.word	0x200006a8
 80015d4:	20003168 	.word	0x20003168

080015d8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015dc:	bf00      	nop
 80015de:	46bd      	mov	sp, r7
 80015e0:	bc80      	pop	{r7}
 80015e2:	4770      	bx	lr

080015e4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80015e8:	4b11      	ldr	r3, [pc, #68]	@ (8001630 <MX_USART1_UART_Init+0x4c>)
 80015ea:	4a12      	ldr	r2, [pc, #72]	@ (8001634 <MX_USART1_UART_Init+0x50>)
 80015ec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80015ee:	4b10      	ldr	r3, [pc, #64]	@ (8001630 <MX_USART1_UART_Init+0x4c>)
 80015f0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80015f4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80015f6:	4b0e      	ldr	r3, [pc, #56]	@ (8001630 <MX_USART1_UART_Init+0x4c>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80015fc:	4b0c      	ldr	r3, [pc, #48]	@ (8001630 <MX_USART1_UART_Init+0x4c>)
 80015fe:	2200      	movs	r2, #0
 8001600:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001602:	4b0b      	ldr	r3, [pc, #44]	@ (8001630 <MX_USART1_UART_Init+0x4c>)
 8001604:	2200      	movs	r2, #0
 8001606:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001608:	4b09      	ldr	r3, [pc, #36]	@ (8001630 <MX_USART1_UART_Init+0x4c>)
 800160a:	220c      	movs	r2, #12
 800160c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800160e:	4b08      	ldr	r3, [pc, #32]	@ (8001630 <MX_USART1_UART_Init+0x4c>)
 8001610:	2200      	movs	r2, #0
 8001612:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001614:	4b06      	ldr	r3, [pc, #24]	@ (8001630 <MX_USART1_UART_Init+0x4c>)
 8001616:	2200      	movs	r2, #0
 8001618:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800161a:	4805      	ldr	r0, [pc, #20]	@ (8001630 <MX_USART1_UART_Init+0x4c>)
 800161c:	f001 fe98 	bl	8003350 <HAL_UART_Init>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d001      	beq.n	800162a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001626:	f7ff fd3f 	bl	80010a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800162a:	bf00      	nop
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	200006ac 	.word	0x200006ac
 8001634:	40013800 	.word	0x40013800

08001638 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b088      	sub	sp, #32
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001640:	f107 0310 	add.w	r3, r7, #16
 8001644:	2200      	movs	r2, #0
 8001646:	601a      	str	r2, [r3, #0]
 8001648:	605a      	str	r2, [r3, #4]
 800164a:	609a      	str	r2, [r3, #8]
 800164c:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4a1c      	ldr	r2, [pc, #112]	@ (80016c4 <HAL_UART_MspInit+0x8c>)
 8001654:	4293      	cmp	r3, r2
 8001656:	d131      	bne.n	80016bc <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001658:	4b1b      	ldr	r3, [pc, #108]	@ (80016c8 <HAL_UART_MspInit+0x90>)
 800165a:	699b      	ldr	r3, [r3, #24]
 800165c:	4a1a      	ldr	r2, [pc, #104]	@ (80016c8 <HAL_UART_MspInit+0x90>)
 800165e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001662:	6193      	str	r3, [r2, #24]
 8001664:	4b18      	ldr	r3, [pc, #96]	@ (80016c8 <HAL_UART_MspInit+0x90>)
 8001666:	699b      	ldr	r3, [r3, #24]
 8001668:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800166c:	60fb      	str	r3, [r7, #12]
 800166e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001670:	4b15      	ldr	r3, [pc, #84]	@ (80016c8 <HAL_UART_MspInit+0x90>)
 8001672:	699b      	ldr	r3, [r3, #24]
 8001674:	4a14      	ldr	r2, [pc, #80]	@ (80016c8 <HAL_UART_MspInit+0x90>)
 8001676:	f043 0304 	orr.w	r3, r3, #4
 800167a:	6193      	str	r3, [r2, #24]
 800167c:	4b12      	ldr	r3, [pc, #72]	@ (80016c8 <HAL_UART_MspInit+0x90>)
 800167e:	699b      	ldr	r3, [r3, #24]
 8001680:	f003 0304 	and.w	r3, r3, #4
 8001684:	60bb      	str	r3, [r7, #8]
 8001686:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001688:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800168c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800168e:	2302      	movs	r3, #2
 8001690:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001692:	2303      	movs	r3, #3
 8001694:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001696:	f107 0310 	add.w	r3, r7, #16
 800169a:	4619      	mov	r1, r3
 800169c:	480b      	ldr	r0, [pc, #44]	@ (80016cc <HAL_UART_MspInit+0x94>)
 800169e:	f000 f961 	bl	8001964 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80016a2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80016a6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016a8:	2300      	movs	r3, #0
 80016aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ac:	2300      	movs	r3, #0
 80016ae:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016b0:	f107 0310 	add.w	r3, r7, #16
 80016b4:	4619      	mov	r1, r3
 80016b6:	4805      	ldr	r0, [pc, #20]	@ (80016cc <HAL_UART_MspInit+0x94>)
 80016b8:	f000 f954 	bl	8001964 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80016bc:	bf00      	nop
 80016be:	3720      	adds	r7, #32
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	40013800 	.word	0x40013800
 80016c8:	40021000 	.word	0x40021000
 80016cc:	40010800 	.word	0x40010800

080016d0 <__io_putchar>:
  }
}

/* USER CODE BEGIN 1 */
int __io_putchar(int ch)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b082      	sub	sp, #8
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80016d8:	1d39      	adds	r1, r7, #4
 80016da:	f04f 33ff 	mov.w	r3, #4294967295
 80016de:	2201      	movs	r2, #1
 80016e0:	4803      	ldr	r0, [pc, #12]	@ (80016f0 <__io_putchar+0x20>)
 80016e2:	f001 fe85 	bl	80033f0 <HAL_UART_Transmit>
  return ch;
 80016e6:	687b      	ldr	r3, [r7, #4]
}
 80016e8:	4618      	mov	r0, r3
 80016ea:	3708      	adds	r7, #8
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	200006ac 	.word	0x200006ac

080016f4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80016f4:	f7ff ff70 	bl	80015d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80016f8:	480b      	ldr	r0, [pc, #44]	@ (8001728 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80016fa:	490c      	ldr	r1, [pc, #48]	@ (800172c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80016fc:	4a0c      	ldr	r2, [pc, #48]	@ (8001730 <LoopFillZerobss+0x16>)
  movs r3, #0
 80016fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001700:	e002      	b.n	8001708 <LoopCopyDataInit>

08001702 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001702:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001704:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001706:	3304      	adds	r3, #4

08001708 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001708:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800170a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800170c:	d3f9      	bcc.n	8001702 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800170e:	4a09      	ldr	r2, [pc, #36]	@ (8001734 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001710:	4c09      	ldr	r4, [pc, #36]	@ (8001738 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001712:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001714:	e001      	b.n	800171a <LoopFillZerobss>

08001716 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001716:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001718:	3204      	adds	r2, #4

0800171a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800171a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800171c:	d3fb      	bcc.n	8001716 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800171e:	f004 fac3 	bl	8005ca8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001722:	f7ff fc55 	bl	8000fd0 <main>
  bx lr
 8001726:	4770      	bx	lr
  ldr r0, =_sdata
 8001728:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800172c:	200005dc 	.word	0x200005dc
  ldr r2, =_sidata
 8001730:	08009760 	.word	0x08009760
  ldr r2, =_sbss
 8001734:	200005dc 	.word	0x200005dc
  ldr r4, =_ebss
 8001738:	20003164 	.word	0x20003164

0800173c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800173c:	e7fe      	b.n	800173c <ADC1_2_IRQHandler>
	...

08001740 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001744:	4b08      	ldr	r3, [pc, #32]	@ (8001768 <HAL_Init+0x28>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4a07      	ldr	r2, [pc, #28]	@ (8001768 <HAL_Init+0x28>)
 800174a:	f043 0310 	orr.w	r3, r3, #16
 800174e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001750:	2003      	movs	r0, #3
 8001752:	f000 f8d1 	bl	80018f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001756:	2001      	movs	r0, #1
 8001758:	f7ff fdce 	bl	80012f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800175c:	f7ff fd9a 	bl	8001294 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001760:	2300      	movs	r3, #0
}
 8001762:	4618      	mov	r0, r3
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	40022000 	.word	0x40022000

0800176c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001770:	4b05      	ldr	r3, [pc, #20]	@ (8001788 <HAL_IncTick+0x1c>)
 8001772:	781b      	ldrb	r3, [r3, #0]
 8001774:	461a      	mov	r2, r3
 8001776:	4b05      	ldr	r3, [pc, #20]	@ (800178c <HAL_IncTick+0x20>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4413      	add	r3, r2
 800177c:	4a03      	ldr	r2, [pc, #12]	@ (800178c <HAL_IncTick+0x20>)
 800177e:	6013      	str	r3, [r2, #0]
}
 8001780:	bf00      	nop
 8001782:	46bd      	mov	sp, r7
 8001784:	bc80      	pop	{r7}
 8001786:	4770      	bx	lr
 8001788:	20000408 	.word	0x20000408
 800178c:	200006f4 	.word	0x200006f4

08001790 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001790:	b480      	push	{r7}
 8001792:	af00      	add	r7, sp, #0
  return uwTick;
 8001794:	4b02      	ldr	r3, [pc, #8]	@ (80017a0 <HAL_GetTick+0x10>)
 8001796:	681b      	ldr	r3, [r3, #0]
}
 8001798:	4618      	mov	r0, r3
 800179a:	46bd      	mov	sp, r7
 800179c:	bc80      	pop	{r7}
 800179e:	4770      	bx	lr
 80017a0:	200006f4 	.word	0x200006f4

080017a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b085      	sub	sp, #20
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	f003 0307 	and.w	r3, r3, #7
 80017b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017b4:	4b0c      	ldr	r3, [pc, #48]	@ (80017e8 <__NVIC_SetPriorityGrouping+0x44>)
 80017b6:	68db      	ldr	r3, [r3, #12]
 80017b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017ba:	68ba      	ldr	r2, [r7, #8]
 80017bc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80017c0:	4013      	ands	r3, r2
 80017c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017c8:	68bb      	ldr	r3, [r7, #8]
 80017ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017cc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80017d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80017d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017d6:	4a04      	ldr	r2, [pc, #16]	@ (80017e8 <__NVIC_SetPriorityGrouping+0x44>)
 80017d8:	68bb      	ldr	r3, [r7, #8]
 80017da:	60d3      	str	r3, [r2, #12]
}
 80017dc:	bf00      	nop
 80017de:	3714      	adds	r7, #20
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bc80      	pop	{r7}
 80017e4:	4770      	bx	lr
 80017e6:	bf00      	nop
 80017e8:	e000ed00 	.word	0xe000ed00

080017ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017f0:	4b04      	ldr	r3, [pc, #16]	@ (8001804 <__NVIC_GetPriorityGrouping+0x18>)
 80017f2:	68db      	ldr	r3, [r3, #12]
 80017f4:	0a1b      	lsrs	r3, r3, #8
 80017f6:	f003 0307 	and.w	r3, r3, #7
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bc80      	pop	{r7}
 8001800:	4770      	bx	lr
 8001802:	bf00      	nop
 8001804:	e000ed00 	.word	0xe000ed00

08001808 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001808:	b480      	push	{r7}
 800180a:	b083      	sub	sp, #12
 800180c:	af00      	add	r7, sp, #0
 800180e:	4603      	mov	r3, r0
 8001810:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001812:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001816:	2b00      	cmp	r3, #0
 8001818:	db0b      	blt.n	8001832 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800181a:	79fb      	ldrb	r3, [r7, #7]
 800181c:	f003 021f 	and.w	r2, r3, #31
 8001820:	4906      	ldr	r1, [pc, #24]	@ (800183c <__NVIC_EnableIRQ+0x34>)
 8001822:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001826:	095b      	lsrs	r3, r3, #5
 8001828:	2001      	movs	r0, #1
 800182a:	fa00 f202 	lsl.w	r2, r0, r2
 800182e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001832:	bf00      	nop
 8001834:	370c      	adds	r7, #12
 8001836:	46bd      	mov	sp, r7
 8001838:	bc80      	pop	{r7}
 800183a:	4770      	bx	lr
 800183c:	e000e100 	.word	0xe000e100

08001840 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001840:	b480      	push	{r7}
 8001842:	b083      	sub	sp, #12
 8001844:	af00      	add	r7, sp, #0
 8001846:	4603      	mov	r3, r0
 8001848:	6039      	str	r1, [r7, #0]
 800184a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800184c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001850:	2b00      	cmp	r3, #0
 8001852:	db0a      	blt.n	800186a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	b2da      	uxtb	r2, r3
 8001858:	490c      	ldr	r1, [pc, #48]	@ (800188c <__NVIC_SetPriority+0x4c>)
 800185a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800185e:	0112      	lsls	r2, r2, #4
 8001860:	b2d2      	uxtb	r2, r2
 8001862:	440b      	add	r3, r1
 8001864:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001868:	e00a      	b.n	8001880 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	b2da      	uxtb	r2, r3
 800186e:	4908      	ldr	r1, [pc, #32]	@ (8001890 <__NVIC_SetPriority+0x50>)
 8001870:	79fb      	ldrb	r3, [r7, #7]
 8001872:	f003 030f 	and.w	r3, r3, #15
 8001876:	3b04      	subs	r3, #4
 8001878:	0112      	lsls	r2, r2, #4
 800187a:	b2d2      	uxtb	r2, r2
 800187c:	440b      	add	r3, r1
 800187e:	761a      	strb	r2, [r3, #24]
}
 8001880:	bf00      	nop
 8001882:	370c      	adds	r7, #12
 8001884:	46bd      	mov	sp, r7
 8001886:	bc80      	pop	{r7}
 8001888:	4770      	bx	lr
 800188a:	bf00      	nop
 800188c:	e000e100 	.word	0xe000e100
 8001890:	e000ed00 	.word	0xe000ed00

08001894 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001894:	b480      	push	{r7}
 8001896:	b089      	sub	sp, #36	@ 0x24
 8001898:	af00      	add	r7, sp, #0
 800189a:	60f8      	str	r0, [r7, #12]
 800189c:	60b9      	str	r1, [r7, #8]
 800189e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	f003 0307 	and.w	r3, r3, #7
 80018a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018a8:	69fb      	ldr	r3, [r7, #28]
 80018aa:	f1c3 0307 	rsb	r3, r3, #7
 80018ae:	2b04      	cmp	r3, #4
 80018b0:	bf28      	it	cs
 80018b2:	2304      	movcs	r3, #4
 80018b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018b6:	69fb      	ldr	r3, [r7, #28]
 80018b8:	3304      	adds	r3, #4
 80018ba:	2b06      	cmp	r3, #6
 80018bc:	d902      	bls.n	80018c4 <NVIC_EncodePriority+0x30>
 80018be:	69fb      	ldr	r3, [r7, #28]
 80018c0:	3b03      	subs	r3, #3
 80018c2:	e000      	b.n	80018c6 <NVIC_EncodePriority+0x32>
 80018c4:	2300      	movs	r3, #0
 80018c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018c8:	f04f 32ff 	mov.w	r2, #4294967295
 80018cc:	69bb      	ldr	r3, [r7, #24]
 80018ce:	fa02 f303 	lsl.w	r3, r2, r3
 80018d2:	43da      	mvns	r2, r3
 80018d4:	68bb      	ldr	r3, [r7, #8]
 80018d6:	401a      	ands	r2, r3
 80018d8:	697b      	ldr	r3, [r7, #20]
 80018da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018dc:	f04f 31ff 	mov.w	r1, #4294967295
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	fa01 f303 	lsl.w	r3, r1, r3
 80018e6:	43d9      	mvns	r1, r3
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018ec:	4313      	orrs	r3, r2
         );
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	3724      	adds	r7, #36	@ 0x24
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bc80      	pop	{r7}
 80018f6:	4770      	bx	lr

080018f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b082      	sub	sp, #8
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001900:	6878      	ldr	r0, [r7, #4]
 8001902:	f7ff ff4f 	bl	80017a4 <__NVIC_SetPriorityGrouping>
}
 8001906:	bf00      	nop
 8001908:	3708      	adds	r7, #8
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}

0800190e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800190e:	b580      	push	{r7, lr}
 8001910:	b086      	sub	sp, #24
 8001912:	af00      	add	r7, sp, #0
 8001914:	4603      	mov	r3, r0
 8001916:	60b9      	str	r1, [r7, #8]
 8001918:	607a      	str	r2, [r7, #4]
 800191a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800191c:	2300      	movs	r3, #0
 800191e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001920:	f7ff ff64 	bl	80017ec <__NVIC_GetPriorityGrouping>
 8001924:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001926:	687a      	ldr	r2, [r7, #4]
 8001928:	68b9      	ldr	r1, [r7, #8]
 800192a:	6978      	ldr	r0, [r7, #20]
 800192c:	f7ff ffb2 	bl	8001894 <NVIC_EncodePriority>
 8001930:	4602      	mov	r2, r0
 8001932:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001936:	4611      	mov	r1, r2
 8001938:	4618      	mov	r0, r3
 800193a:	f7ff ff81 	bl	8001840 <__NVIC_SetPriority>
}
 800193e:	bf00      	nop
 8001940:	3718      	adds	r7, #24
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}

08001946 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001946:	b580      	push	{r7, lr}
 8001948:	b082      	sub	sp, #8
 800194a:	af00      	add	r7, sp, #0
 800194c:	4603      	mov	r3, r0
 800194e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001950:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001954:	4618      	mov	r0, r3
 8001956:	f7ff ff57 	bl	8001808 <__NVIC_EnableIRQ>
}
 800195a:	bf00      	nop
 800195c:	3708      	adds	r7, #8
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
	...

08001964 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001964:	b480      	push	{r7}
 8001966:	b08b      	sub	sp, #44	@ 0x2c
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
 800196c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800196e:	2300      	movs	r3, #0
 8001970:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001972:	2300      	movs	r3, #0
 8001974:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001976:	e169      	b.n	8001c4c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001978:	2201      	movs	r2, #1
 800197a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800197c:	fa02 f303 	lsl.w	r3, r2, r3
 8001980:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	69fa      	ldr	r2, [r7, #28]
 8001988:	4013      	ands	r3, r2
 800198a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800198c:	69ba      	ldr	r2, [r7, #24]
 800198e:	69fb      	ldr	r3, [r7, #28]
 8001990:	429a      	cmp	r2, r3
 8001992:	f040 8158 	bne.w	8001c46 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	4a9a      	ldr	r2, [pc, #616]	@ (8001c04 <HAL_GPIO_Init+0x2a0>)
 800199c:	4293      	cmp	r3, r2
 800199e:	d05e      	beq.n	8001a5e <HAL_GPIO_Init+0xfa>
 80019a0:	4a98      	ldr	r2, [pc, #608]	@ (8001c04 <HAL_GPIO_Init+0x2a0>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d875      	bhi.n	8001a92 <HAL_GPIO_Init+0x12e>
 80019a6:	4a98      	ldr	r2, [pc, #608]	@ (8001c08 <HAL_GPIO_Init+0x2a4>)
 80019a8:	4293      	cmp	r3, r2
 80019aa:	d058      	beq.n	8001a5e <HAL_GPIO_Init+0xfa>
 80019ac:	4a96      	ldr	r2, [pc, #600]	@ (8001c08 <HAL_GPIO_Init+0x2a4>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d86f      	bhi.n	8001a92 <HAL_GPIO_Init+0x12e>
 80019b2:	4a96      	ldr	r2, [pc, #600]	@ (8001c0c <HAL_GPIO_Init+0x2a8>)
 80019b4:	4293      	cmp	r3, r2
 80019b6:	d052      	beq.n	8001a5e <HAL_GPIO_Init+0xfa>
 80019b8:	4a94      	ldr	r2, [pc, #592]	@ (8001c0c <HAL_GPIO_Init+0x2a8>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d869      	bhi.n	8001a92 <HAL_GPIO_Init+0x12e>
 80019be:	4a94      	ldr	r2, [pc, #592]	@ (8001c10 <HAL_GPIO_Init+0x2ac>)
 80019c0:	4293      	cmp	r3, r2
 80019c2:	d04c      	beq.n	8001a5e <HAL_GPIO_Init+0xfa>
 80019c4:	4a92      	ldr	r2, [pc, #584]	@ (8001c10 <HAL_GPIO_Init+0x2ac>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d863      	bhi.n	8001a92 <HAL_GPIO_Init+0x12e>
 80019ca:	4a92      	ldr	r2, [pc, #584]	@ (8001c14 <HAL_GPIO_Init+0x2b0>)
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d046      	beq.n	8001a5e <HAL_GPIO_Init+0xfa>
 80019d0:	4a90      	ldr	r2, [pc, #576]	@ (8001c14 <HAL_GPIO_Init+0x2b0>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d85d      	bhi.n	8001a92 <HAL_GPIO_Init+0x12e>
 80019d6:	2b12      	cmp	r3, #18
 80019d8:	d82a      	bhi.n	8001a30 <HAL_GPIO_Init+0xcc>
 80019da:	2b12      	cmp	r3, #18
 80019dc:	d859      	bhi.n	8001a92 <HAL_GPIO_Init+0x12e>
 80019de:	a201      	add	r2, pc, #4	@ (adr r2, 80019e4 <HAL_GPIO_Init+0x80>)
 80019e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019e4:	08001a5f 	.word	0x08001a5f
 80019e8:	08001a39 	.word	0x08001a39
 80019ec:	08001a4b 	.word	0x08001a4b
 80019f0:	08001a8d 	.word	0x08001a8d
 80019f4:	08001a93 	.word	0x08001a93
 80019f8:	08001a93 	.word	0x08001a93
 80019fc:	08001a93 	.word	0x08001a93
 8001a00:	08001a93 	.word	0x08001a93
 8001a04:	08001a93 	.word	0x08001a93
 8001a08:	08001a93 	.word	0x08001a93
 8001a0c:	08001a93 	.word	0x08001a93
 8001a10:	08001a93 	.word	0x08001a93
 8001a14:	08001a93 	.word	0x08001a93
 8001a18:	08001a93 	.word	0x08001a93
 8001a1c:	08001a93 	.word	0x08001a93
 8001a20:	08001a93 	.word	0x08001a93
 8001a24:	08001a93 	.word	0x08001a93
 8001a28:	08001a41 	.word	0x08001a41
 8001a2c:	08001a55 	.word	0x08001a55
 8001a30:	4a79      	ldr	r2, [pc, #484]	@ (8001c18 <HAL_GPIO_Init+0x2b4>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d013      	beq.n	8001a5e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001a36:	e02c      	b.n	8001a92 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	68db      	ldr	r3, [r3, #12]
 8001a3c:	623b      	str	r3, [r7, #32]
          break;
 8001a3e:	e029      	b.n	8001a94 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	68db      	ldr	r3, [r3, #12]
 8001a44:	3304      	adds	r3, #4
 8001a46:	623b      	str	r3, [r7, #32]
          break;
 8001a48:	e024      	b.n	8001a94 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	68db      	ldr	r3, [r3, #12]
 8001a4e:	3308      	adds	r3, #8
 8001a50:	623b      	str	r3, [r7, #32]
          break;
 8001a52:	e01f      	b.n	8001a94 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	68db      	ldr	r3, [r3, #12]
 8001a58:	330c      	adds	r3, #12
 8001a5a:	623b      	str	r3, [r7, #32]
          break;
 8001a5c:	e01a      	b.n	8001a94 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	689b      	ldr	r3, [r3, #8]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d102      	bne.n	8001a6c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001a66:	2304      	movs	r3, #4
 8001a68:	623b      	str	r3, [r7, #32]
          break;
 8001a6a:	e013      	b.n	8001a94 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	689b      	ldr	r3, [r3, #8]
 8001a70:	2b01      	cmp	r3, #1
 8001a72:	d105      	bne.n	8001a80 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a74:	2308      	movs	r3, #8
 8001a76:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	69fa      	ldr	r2, [r7, #28]
 8001a7c:	611a      	str	r2, [r3, #16]
          break;
 8001a7e:	e009      	b.n	8001a94 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a80:	2308      	movs	r3, #8
 8001a82:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	69fa      	ldr	r2, [r7, #28]
 8001a88:	615a      	str	r2, [r3, #20]
          break;
 8001a8a:	e003      	b.n	8001a94 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	623b      	str	r3, [r7, #32]
          break;
 8001a90:	e000      	b.n	8001a94 <HAL_GPIO_Init+0x130>
          break;
 8001a92:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001a94:	69bb      	ldr	r3, [r7, #24]
 8001a96:	2bff      	cmp	r3, #255	@ 0xff
 8001a98:	d801      	bhi.n	8001a9e <HAL_GPIO_Init+0x13a>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	e001      	b.n	8001aa2 <HAL_GPIO_Init+0x13e>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	3304      	adds	r3, #4
 8001aa2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001aa4:	69bb      	ldr	r3, [r7, #24]
 8001aa6:	2bff      	cmp	r3, #255	@ 0xff
 8001aa8:	d802      	bhi.n	8001ab0 <HAL_GPIO_Init+0x14c>
 8001aaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aac:	009b      	lsls	r3, r3, #2
 8001aae:	e002      	b.n	8001ab6 <HAL_GPIO_Init+0x152>
 8001ab0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ab2:	3b08      	subs	r3, #8
 8001ab4:	009b      	lsls	r3, r3, #2
 8001ab6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	681a      	ldr	r2, [r3, #0]
 8001abc:	210f      	movs	r1, #15
 8001abe:	693b      	ldr	r3, [r7, #16]
 8001ac0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ac4:	43db      	mvns	r3, r3
 8001ac6:	401a      	ands	r2, r3
 8001ac8:	6a39      	ldr	r1, [r7, #32]
 8001aca:	693b      	ldr	r3, [r7, #16]
 8001acc:	fa01 f303 	lsl.w	r3, r1, r3
 8001ad0:	431a      	orrs	r2, r3
 8001ad2:	697b      	ldr	r3, [r7, #20]
 8001ad4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	f000 80b1 	beq.w	8001c46 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001ae4:	4b4d      	ldr	r3, [pc, #308]	@ (8001c1c <HAL_GPIO_Init+0x2b8>)
 8001ae6:	699b      	ldr	r3, [r3, #24]
 8001ae8:	4a4c      	ldr	r2, [pc, #304]	@ (8001c1c <HAL_GPIO_Init+0x2b8>)
 8001aea:	f043 0301 	orr.w	r3, r3, #1
 8001aee:	6193      	str	r3, [r2, #24]
 8001af0:	4b4a      	ldr	r3, [pc, #296]	@ (8001c1c <HAL_GPIO_Init+0x2b8>)
 8001af2:	699b      	ldr	r3, [r3, #24]
 8001af4:	f003 0301 	and.w	r3, r3, #1
 8001af8:	60bb      	str	r3, [r7, #8]
 8001afa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001afc:	4a48      	ldr	r2, [pc, #288]	@ (8001c20 <HAL_GPIO_Init+0x2bc>)
 8001afe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b00:	089b      	lsrs	r3, r3, #2
 8001b02:	3302      	adds	r3, #2
 8001b04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b08:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001b0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b0c:	f003 0303 	and.w	r3, r3, #3
 8001b10:	009b      	lsls	r3, r3, #2
 8001b12:	220f      	movs	r2, #15
 8001b14:	fa02 f303 	lsl.w	r3, r2, r3
 8001b18:	43db      	mvns	r3, r3
 8001b1a:	68fa      	ldr	r2, [r7, #12]
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	4a40      	ldr	r2, [pc, #256]	@ (8001c24 <HAL_GPIO_Init+0x2c0>)
 8001b24:	4293      	cmp	r3, r2
 8001b26:	d013      	beq.n	8001b50 <HAL_GPIO_Init+0x1ec>
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	4a3f      	ldr	r2, [pc, #252]	@ (8001c28 <HAL_GPIO_Init+0x2c4>)
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	d00d      	beq.n	8001b4c <HAL_GPIO_Init+0x1e8>
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	4a3e      	ldr	r2, [pc, #248]	@ (8001c2c <HAL_GPIO_Init+0x2c8>)
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d007      	beq.n	8001b48 <HAL_GPIO_Init+0x1e4>
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	4a3d      	ldr	r2, [pc, #244]	@ (8001c30 <HAL_GPIO_Init+0x2cc>)
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d101      	bne.n	8001b44 <HAL_GPIO_Init+0x1e0>
 8001b40:	2303      	movs	r3, #3
 8001b42:	e006      	b.n	8001b52 <HAL_GPIO_Init+0x1ee>
 8001b44:	2304      	movs	r3, #4
 8001b46:	e004      	b.n	8001b52 <HAL_GPIO_Init+0x1ee>
 8001b48:	2302      	movs	r3, #2
 8001b4a:	e002      	b.n	8001b52 <HAL_GPIO_Init+0x1ee>
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	e000      	b.n	8001b52 <HAL_GPIO_Init+0x1ee>
 8001b50:	2300      	movs	r3, #0
 8001b52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b54:	f002 0203 	and.w	r2, r2, #3
 8001b58:	0092      	lsls	r2, r2, #2
 8001b5a:	4093      	lsls	r3, r2
 8001b5c:	68fa      	ldr	r2, [r7, #12]
 8001b5e:	4313      	orrs	r3, r2
 8001b60:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001b62:	492f      	ldr	r1, [pc, #188]	@ (8001c20 <HAL_GPIO_Init+0x2bc>)
 8001b64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b66:	089b      	lsrs	r3, r3, #2
 8001b68:	3302      	adds	r3, #2
 8001b6a:	68fa      	ldr	r2, [r7, #12]
 8001b6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d006      	beq.n	8001b8a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001b7c:	4b2d      	ldr	r3, [pc, #180]	@ (8001c34 <HAL_GPIO_Init+0x2d0>)
 8001b7e:	689a      	ldr	r2, [r3, #8]
 8001b80:	492c      	ldr	r1, [pc, #176]	@ (8001c34 <HAL_GPIO_Init+0x2d0>)
 8001b82:	69bb      	ldr	r3, [r7, #24]
 8001b84:	4313      	orrs	r3, r2
 8001b86:	608b      	str	r3, [r1, #8]
 8001b88:	e006      	b.n	8001b98 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001b8a:	4b2a      	ldr	r3, [pc, #168]	@ (8001c34 <HAL_GPIO_Init+0x2d0>)
 8001b8c:	689a      	ldr	r2, [r3, #8]
 8001b8e:	69bb      	ldr	r3, [r7, #24]
 8001b90:	43db      	mvns	r3, r3
 8001b92:	4928      	ldr	r1, [pc, #160]	@ (8001c34 <HAL_GPIO_Init+0x2d0>)
 8001b94:	4013      	ands	r3, r2
 8001b96:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d006      	beq.n	8001bb2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001ba4:	4b23      	ldr	r3, [pc, #140]	@ (8001c34 <HAL_GPIO_Init+0x2d0>)
 8001ba6:	68da      	ldr	r2, [r3, #12]
 8001ba8:	4922      	ldr	r1, [pc, #136]	@ (8001c34 <HAL_GPIO_Init+0x2d0>)
 8001baa:	69bb      	ldr	r3, [r7, #24]
 8001bac:	4313      	orrs	r3, r2
 8001bae:	60cb      	str	r3, [r1, #12]
 8001bb0:	e006      	b.n	8001bc0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001bb2:	4b20      	ldr	r3, [pc, #128]	@ (8001c34 <HAL_GPIO_Init+0x2d0>)
 8001bb4:	68da      	ldr	r2, [r3, #12]
 8001bb6:	69bb      	ldr	r3, [r7, #24]
 8001bb8:	43db      	mvns	r3, r3
 8001bba:	491e      	ldr	r1, [pc, #120]	@ (8001c34 <HAL_GPIO_Init+0x2d0>)
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d006      	beq.n	8001bda <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001bcc:	4b19      	ldr	r3, [pc, #100]	@ (8001c34 <HAL_GPIO_Init+0x2d0>)
 8001bce:	685a      	ldr	r2, [r3, #4]
 8001bd0:	4918      	ldr	r1, [pc, #96]	@ (8001c34 <HAL_GPIO_Init+0x2d0>)
 8001bd2:	69bb      	ldr	r3, [r7, #24]
 8001bd4:	4313      	orrs	r3, r2
 8001bd6:	604b      	str	r3, [r1, #4]
 8001bd8:	e006      	b.n	8001be8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001bda:	4b16      	ldr	r3, [pc, #88]	@ (8001c34 <HAL_GPIO_Init+0x2d0>)
 8001bdc:	685a      	ldr	r2, [r3, #4]
 8001bde:	69bb      	ldr	r3, [r7, #24]
 8001be0:	43db      	mvns	r3, r3
 8001be2:	4914      	ldr	r1, [pc, #80]	@ (8001c34 <HAL_GPIO_Init+0x2d0>)
 8001be4:	4013      	ands	r3, r2
 8001be6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d021      	beq.n	8001c38 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001bf4:	4b0f      	ldr	r3, [pc, #60]	@ (8001c34 <HAL_GPIO_Init+0x2d0>)
 8001bf6:	681a      	ldr	r2, [r3, #0]
 8001bf8:	490e      	ldr	r1, [pc, #56]	@ (8001c34 <HAL_GPIO_Init+0x2d0>)
 8001bfa:	69bb      	ldr	r3, [r7, #24]
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	600b      	str	r3, [r1, #0]
 8001c00:	e021      	b.n	8001c46 <HAL_GPIO_Init+0x2e2>
 8001c02:	bf00      	nop
 8001c04:	10320000 	.word	0x10320000
 8001c08:	10310000 	.word	0x10310000
 8001c0c:	10220000 	.word	0x10220000
 8001c10:	10210000 	.word	0x10210000
 8001c14:	10120000 	.word	0x10120000
 8001c18:	10110000 	.word	0x10110000
 8001c1c:	40021000 	.word	0x40021000
 8001c20:	40010000 	.word	0x40010000
 8001c24:	40010800 	.word	0x40010800
 8001c28:	40010c00 	.word	0x40010c00
 8001c2c:	40011000 	.word	0x40011000
 8001c30:	40011400 	.word	0x40011400
 8001c34:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001c38:	4b0b      	ldr	r3, [pc, #44]	@ (8001c68 <HAL_GPIO_Init+0x304>)
 8001c3a:	681a      	ldr	r2, [r3, #0]
 8001c3c:	69bb      	ldr	r3, [r7, #24]
 8001c3e:	43db      	mvns	r3, r3
 8001c40:	4909      	ldr	r1, [pc, #36]	@ (8001c68 <HAL_GPIO_Init+0x304>)
 8001c42:	4013      	ands	r3, r2
 8001c44:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001c46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c48:	3301      	adds	r3, #1
 8001c4a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	681a      	ldr	r2, [r3, #0]
 8001c50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c52:	fa22 f303 	lsr.w	r3, r2, r3
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	f47f ae8e 	bne.w	8001978 <HAL_GPIO_Init+0x14>
  }
}
 8001c5c:	bf00      	nop
 8001c5e:	bf00      	nop
 8001c60:	372c      	adds	r7, #44	@ 0x2c
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bc80      	pop	{r7}
 8001c66:	4770      	bx	lr
 8001c68:	40010400 	.word	0x40010400

08001c6c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b085      	sub	sp, #20
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
 8001c74:	460b      	mov	r3, r1
 8001c76:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	689a      	ldr	r2, [r3, #8]
 8001c7c:	887b      	ldrh	r3, [r7, #2]
 8001c7e:	4013      	ands	r3, r2
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d002      	beq.n	8001c8a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001c84:	2301      	movs	r3, #1
 8001c86:	73fb      	strb	r3, [r7, #15]
 8001c88:	e001      	b.n	8001c8e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001c8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	3714      	adds	r7, #20
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bc80      	pop	{r7}
 8001c98:	4770      	bx	lr

08001c9a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c9a:	b480      	push	{r7}
 8001c9c:	b083      	sub	sp, #12
 8001c9e:	af00      	add	r7, sp, #0
 8001ca0:	6078      	str	r0, [r7, #4]
 8001ca2:	460b      	mov	r3, r1
 8001ca4:	807b      	strh	r3, [r7, #2]
 8001ca6:	4613      	mov	r3, r2
 8001ca8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001caa:	787b      	ldrb	r3, [r7, #1]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d003      	beq.n	8001cb8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001cb0:	887a      	ldrh	r2, [r7, #2]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001cb6:	e003      	b.n	8001cc0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001cb8:	887b      	ldrh	r3, [r7, #2]
 8001cba:	041a      	lsls	r2, r3, #16
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	611a      	str	r2, [r3, #16]
}
 8001cc0:	bf00      	nop
 8001cc2:	370c      	adds	r7, #12
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bc80      	pop	{r7}
 8001cc8:	4770      	bx	lr

08001cca <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001cca:	b480      	push	{r7}
 8001ccc:	b085      	sub	sp, #20
 8001cce:	af00      	add	r7, sp, #0
 8001cd0:	6078      	str	r0, [r7, #4]
 8001cd2:	460b      	mov	r3, r1
 8001cd4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	68db      	ldr	r3, [r3, #12]
 8001cda:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001cdc:	887a      	ldrh	r2, [r7, #2]
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	4013      	ands	r3, r2
 8001ce2:	041a      	lsls	r2, r3, #16
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	43d9      	mvns	r1, r3
 8001ce8:	887b      	ldrh	r3, [r7, #2]
 8001cea:	400b      	ands	r3, r1
 8001cec:	431a      	orrs	r2, r3
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	611a      	str	r2, [r3, #16]
}
 8001cf2:	bf00      	nop
 8001cf4:	3714      	adds	r7, #20
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bc80      	pop	{r7}
 8001cfa:	4770      	bx	lr

08001cfc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b084      	sub	sp, #16
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d101      	bne.n	8001d0e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	e12b      	b.n	8001f66 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001d14:	b2db      	uxtb	r3, r3
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d106      	bne.n	8001d28 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001d22:	6878      	ldr	r0, [r7, #4]
 8001d24:	f7ff f904 	bl	8000f30 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2224      	movs	r2, #36	@ 0x24
 8001d2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	681a      	ldr	r2, [r3, #0]
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f022 0201 	bic.w	r2, r2, #1
 8001d3e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	681a      	ldr	r2, [r3, #0]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001d4e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	681a      	ldr	r2, [r3, #0]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001d5e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001d60:	f001 f842 	bl	8002de8 <HAL_RCC_GetPCLK1Freq>
 8001d64:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	4a81      	ldr	r2, [pc, #516]	@ (8001f70 <HAL_I2C_Init+0x274>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d807      	bhi.n	8001d80 <HAL_I2C_Init+0x84>
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	4a80      	ldr	r2, [pc, #512]	@ (8001f74 <HAL_I2C_Init+0x278>)
 8001d74:	4293      	cmp	r3, r2
 8001d76:	bf94      	ite	ls
 8001d78:	2301      	movls	r3, #1
 8001d7a:	2300      	movhi	r3, #0
 8001d7c:	b2db      	uxtb	r3, r3
 8001d7e:	e006      	b.n	8001d8e <HAL_I2C_Init+0x92>
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	4a7d      	ldr	r2, [pc, #500]	@ (8001f78 <HAL_I2C_Init+0x27c>)
 8001d84:	4293      	cmp	r3, r2
 8001d86:	bf94      	ite	ls
 8001d88:	2301      	movls	r3, #1
 8001d8a:	2300      	movhi	r3, #0
 8001d8c:	b2db      	uxtb	r3, r3
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d001      	beq.n	8001d96 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001d92:	2301      	movs	r3, #1
 8001d94:	e0e7      	b.n	8001f66 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	4a78      	ldr	r2, [pc, #480]	@ (8001f7c <HAL_I2C_Init+0x280>)
 8001d9a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d9e:	0c9b      	lsrs	r3, r3, #18
 8001da0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	68ba      	ldr	r2, [r7, #8]
 8001db2:	430a      	orrs	r2, r1
 8001db4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	6a1b      	ldr	r3, [r3, #32]
 8001dbc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	4a6a      	ldr	r2, [pc, #424]	@ (8001f70 <HAL_I2C_Init+0x274>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d802      	bhi.n	8001dd0 <HAL_I2C_Init+0xd4>
 8001dca:	68bb      	ldr	r3, [r7, #8]
 8001dcc:	3301      	adds	r3, #1
 8001dce:	e009      	b.n	8001de4 <HAL_I2C_Init+0xe8>
 8001dd0:	68bb      	ldr	r3, [r7, #8]
 8001dd2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001dd6:	fb02 f303 	mul.w	r3, r2, r3
 8001dda:	4a69      	ldr	r2, [pc, #420]	@ (8001f80 <HAL_I2C_Init+0x284>)
 8001ddc:	fba2 2303 	umull	r2, r3, r2, r3
 8001de0:	099b      	lsrs	r3, r3, #6
 8001de2:	3301      	adds	r3, #1
 8001de4:	687a      	ldr	r2, [r7, #4]
 8001de6:	6812      	ldr	r2, [r2, #0]
 8001de8:	430b      	orrs	r3, r1
 8001dea:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	69db      	ldr	r3, [r3, #28]
 8001df2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001df6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	495c      	ldr	r1, [pc, #368]	@ (8001f70 <HAL_I2C_Init+0x274>)
 8001e00:	428b      	cmp	r3, r1
 8001e02:	d819      	bhi.n	8001e38 <HAL_I2C_Init+0x13c>
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	1e59      	subs	r1, r3, #1
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	005b      	lsls	r3, r3, #1
 8001e0e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e12:	1c59      	adds	r1, r3, #1
 8001e14:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001e18:	400b      	ands	r3, r1
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d00a      	beq.n	8001e34 <HAL_I2C_Init+0x138>
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	1e59      	subs	r1, r3, #1
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	005b      	lsls	r3, r3, #1
 8001e28:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e2c:	3301      	adds	r3, #1
 8001e2e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e32:	e051      	b.n	8001ed8 <HAL_I2C_Init+0x1dc>
 8001e34:	2304      	movs	r3, #4
 8001e36:	e04f      	b.n	8001ed8 <HAL_I2C_Init+0x1dc>
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	689b      	ldr	r3, [r3, #8]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d111      	bne.n	8001e64 <HAL_I2C_Init+0x168>
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	1e58      	subs	r0, r3, #1
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6859      	ldr	r1, [r3, #4]
 8001e48:	460b      	mov	r3, r1
 8001e4a:	005b      	lsls	r3, r3, #1
 8001e4c:	440b      	add	r3, r1
 8001e4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e52:	3301      	adds	r3, #1
 8001e54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	bf0c      	ite	eq
 8001e5c:	2301      	moveq	r3, #1
 8001e5e:	2300      	movne	r3, #0
 8001e60:	b2db      	uxtb	r3, r3
 8001e62:	e012      	b.n	8001e8a <HAL_I2C_Init+0x18e>
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	1e58      	subs	r0, r3, #1
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6859      	ldr	r1, [r3, #4]
 8001e6c:	460b      	mov	r3, r1
 8001e6e:	009b      	lsls	r3, r3, #2
 8001e70:	440b      	add	r3, r1
 8001e72:	0099      	lsls	r1, r3, #2
 8001e74:	440b      	add	r3, r1
 8001e76:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e7a:	3301      	adds	r3, #1
 8001e7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	bf0c      	ite	eq
 8001e84:	2301      	moveq	r3, #1
 8001e86:	2300      	movne	r3, #0
 8001e88:	b2db      	uxtb	r3, r3
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d001      	beq.n	8001e92 <HAL_I2C_Init+0x196>
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e022      	b.n	8001ed8 <HAL_I2C_Init+0x1dc>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	689b      	ldr	r3, [r3, #8]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d10e      	bne.n	8001eb8 <HAL_I2C_Init+0x1bc>
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	1e58      	subs	r0, r3, #1
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6859      	ldr	r1, [r3, #4]
 8001ea2:	460b      	mov	r3, r1
 8001ea4:	005b      	lsls	r3, r3, #1
 8001ea6:	440b      	add	r3, r1
 8001ea8:	fbb0 f3f3 	udiv	r3, r0, r3
 8001eac:	3301      	adds	r3, #1
 8001eae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001eb2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001eb6:	e00f      	b.n	8001ed8 <HAL_I2C_Init+0x1dc>
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	1e58      	subs	r0, r3, #1
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6859      	ldr	r1, [r3, #4]
 8001ec0:	460b      	mov	r3, r1
 8001ec2:	009b      	lsls	r3, r3, #2
 8001ec4:	440b      	add	r3, r1
 8001ec6:	0099      	lsls	r1, r3, #2
 8001ec8:	440b      	add	r3, r1
 8001eca:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ece:	3301      	adds	r3, #1
 8001ed0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ed4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001ed8:	6879      	ldr	r1, [r7, #4]
 8001eda:	6809      	ldr	r1, [r1, #0]
 8001edc:	4313      	orrs	r3, r2
 8001ede:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	69da      	ldr	r2, [r3, #28]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6a1b      	ldr	r3, [r3, #32]
 8001ef2:	431a      	orrs	r2, r3
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	430a      	orrs	r2, r1
 8001efa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	689b      	ldr	r3, [r3, #8]
 8001f02:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001f06:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001f0a:	687a      	ldr	r2, [r7, #4]
 8001f0c:	6911      	ldr	r1, [r2, #16]
 8001f0e:	687a      	ldr	r2, [r7, #4]
 8001f10:	68d2      	ldr	r2, [r2, #12]
 8001f12:	4311      	orrs	r1, r2
 8001f14:	687a      	ldr	r2, [r7, #4]
 8001f16:	6812      	ldr	r2, [r2, #0]
 8001f18:	430b      	orrs	r3, r1
 8001f1a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	68db      	ldr	r3, [r3, #12]
 8001f22:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	695a      	ldr	r2, [r3, #20]
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	699b      	ldr	r3, [r3, #24]
 8001f2e:	431a      	orrs	r2, r3
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	430a      	orrs	r2, r1
 8001f36:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	681a      	ldr	r2, [r3, #0]
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f042 0201 	orr.w	r2, r2, #1
 8001f46:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2220      	movs	r2, #32
 8001f52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2200      	movs	r2, #0
 8001f5a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2200      	movs	r2, #0
 8001f60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001f64:	2300      	movs	r3, #0
}
 8001f66:	4618      	mov	r0, r3
 8001f68:	3710      	adds	r7, #16
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}
 8001f6e:	bf00      	nop
 8001f70:	000186a0 	.word	0x000186a0
 8001f74:	001e847f 	.word	0x001e847f
 8001f78:	003d08ff 	.word	0x003d08ff
 8001f7c:	431bde83 	.word	0x431bde83
 8001f80:	10624dd3 	.word	0x10624dd3

08001f84 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b088      	sub	sp, #32
 8001f88:	af02      	add	r7, sp, #8
 8001f8a:	60f8      	str	r0, [r7, #12]
 8001f8c:	4608      	mov	r0, r1
 8001f8e:	4611      	mov	r1, r2
 8001f90:	461a      	mov	r2, r3
 8001f92:	4603      	mov	r3, r0
 8001f94:	817b      	strh	r3, [r7, #10]
 8001f96:	460b      	mov	r3, r1
 8001f98:	813b      	strh	r3, [r7, #8]
 8001f9a:	4613      	mov	r3, r2
 8001f9c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001f9e:	f7ff fbf7 	bl	8001790 <HAL_GetTick>
 8001fa2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001faa:	b2db      	uxtb	r3, r3
 8001fac:	2b20      	cmp	r3, #32
 8001fae:	f040 80d9 	bne.w	8002164 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001fb2:	697b      	ldr	r3, [r7, #20]
 8001fb4:	9300      	str	r3, [sp, #0]
 8001fb6:	2319      	movs	r3, #25
 8001fb8:	2201      	movs	r2, #1
 8001fba:	496d      	ldr	r1, [pc, #436]	@ (8002170 <HAL_I2C_Mem_Write+0x1ec>)
 8001fbc:	68f8      	ldr	r0, [r7, #12]
 8001fbe:	f000 f971 	bl	80022a4 <I2C_WaitOnFlagUntilTimeout>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d001      	beq.n	8001fcc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001fc8:	2302      	movs	r3, #2
 8001fca:	e0cc      	b.n	8002166 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001fd2:	2b01      	cmp	r3, #1
 8001fd4:	d101      	bne.n	8001fda <HAL_I2C_Mem_Write+0x56>
 8001fd6:	2302      	movs	r3, #2
 8001fd8:	e0c5      	b.n	8002166 <HAL_I2C_Mem_Write+0x1e2>
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	2201      	movs	r2, #1
 8001fde:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f003 0301 	and.w	r3, r3, #1
 8001fec:	2b01      	cmp	r3, #1
 8001fee:	d007      	beq.n	8002000 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	681a      	ldr	r2, [r3, #0]
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f042 0201 	orr.w	r2, r2, #1
 8001ffe:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	681a      	ldr	r2, [r3, #0]
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800200e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	2221      	movs	r2, #33	@ 0x21
 8002014:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	2240      	movs	r2, #64	@ 0x40
 800201c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	2200      	movs	r2, #0
 8002024:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	6a3a      	ldr	r2, [r7, #32]
 800202a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002030:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002036:	b29a      	uxth	r2, r3
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	4a4d      	ldr	r2, [pc, #308]	@ (8002174 <HAL_I2C_Mem_Write+0x1f0>)
 8002040:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002042:	88f8      	ldrh	r0, [r7, #6]
 8002044:	893a      	ldrh	r2, [r7, #8]
 8002046:	8979      	ldrh	r1, [r7, #10]
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	9301      	str	r3, [sp, #4]
 800204c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800204e:	9300      	str	r3, [sp, #0]
 8002050:	4603      	mov	r3, r0
 8002052:	68f8      	ldr	r0, [r7, #12]
 8002054:	f000 f890 	bl	8002178 <I2C_RequestMemoryWrite>
 8002058:	4603      	mov	r3, r0
 800205a:	2b00      	cmp	r3, #0
 800205c:	d052      	beq.n	8002104 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800205e:	2301      	movs	r3, #1
 8002060:	e081      	b.n	8002166 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002062:	697a      	ldr	r2, [r7, #20]
 8002064:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002066:	68f8      	ldr	r0, [r7, #12]
 8002068:	f000 fa36 	bl	80024d8 <I2C_WaitOnTXEFlagUntilTimeout>
 800206c:	4603      	mov	r3, r0
 800206e:	2b00      	cmp	r3, #0
 8002070:	d00d      	beq.n	800208e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002076:	2b04      	cmp	r3, #4
 8002078:	d107      	bne.n	800208a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	681a      	ldr	r2, [r3, #0]
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002088:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	e06b      	b.n	8002166 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002092:	781a      	ldrb	r2, [r3, #0]
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800209e:	1c5a      	adds	r2, r3, #1
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020a8:	3b01      	subs	r3, #1
 80020aa:	b29a      	uxth	r2, r3
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020b4:	b29b      	uxth	r3, r3
 80020b6:	3b01      	subs	r3, #1
 80020b8:	b29a      	uxth	r2, r3
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	695b      	ldr	r3, [r3, #20]
 80020c4:	f003 0304 	and.w	r3, r3, #4
 80020c8:	2b04      	cmp	r3, #4
 80020ca:	d11b      	bne.n	8002104 <HAL_I2C_Mem_Write+0x180>
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d017      	beq.n	8002104 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020d8:	781a      	ldrb	r2, [r3, #0]
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020e4:	1c5a      	adds	r2, r3, #1
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020ee:	3b01      	subs	r3, #1
 80020f0:	b29a      	uxth	r2, r3
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020fa:	b29b      	uxth	r3, r3
 80020fc:	3b01      	subs	r3, #1
 80020fe:	b29a      	uxth	r2, r3
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002108:	2b00      	cmp	r3, #0
 800210a:	d1aa      	bne.n	8002062 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800210c:	697a      	ldr	r2, [r7, #20]
 800210e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002110:	68f8      	ldr	r0, [r7, #12]
 8002112:	f000 fa29 	bl	8002568 <I2C_WaitOnBTFFlagUntilTimeout>
 8002116:	4603      	mov	r3, r0
 8002118:	2b00      	cmp	r3, #0
 800211a:	d00d      	beq.n	8002138 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002120:	2b04      	cmp	r3, #4
 8002122:	d107      	bne.n	8002134 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	681a      	ldr	r2, [r3, #0]
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002132:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002134:	2301      	movs	r3, #1
 8002136:	e016      	b.n	8002166 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	681a      	ldr	r2, [r3, #0]
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002146:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	2220      	movs	r2, #32
 800214c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	2200      	movs	r2, #0
 8002154:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	2200      	movs	r2, #0
 800215c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002160:	2300      	movs	r3, #0
 8002162:	e000      	b.n	8002166 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002164:	2302      	movs	r3, #2
  }
}
 8002166:	4618      	mov	r0, r3
 8002168:	3718      	adds	r7, #24
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}
 800216e:	bf00      	nop
 8002170:	00100002 	.word	0x00100002
 8002174:	ffff0000 	.word	0xffff0000

08002178 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b088      	sub	sp, #32
 800217c:	af02      	add	r7, sp, #8
 800217e:	60f8      	str	r0, [r7, #12]
 8002180:	4608      	mov	r0, r1
 8002182:	4611      	mov	r1, r2
 8002184:	461a      	mov	r2, r3
 8002186:	4603      	mov	r3, r0
 8002188:	817b      	strh	r3, [r7, #10]
 800218a:	460b      	mov	r3, r1
 800218c:	813b      	strh	r3, [r7, #8]
 800218e:	4613      	mov	r3, r2
 8002190:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	681a      	ldr	r2, [r3, #0]
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80021a0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80021a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021a4:	9300      	str	r3, [sp, #0]
 80021a6:	6a3b      	ldr	r3, [r7, #32]
 80021a8:	2200      	movs	r2, #0
 80021aa:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80021ae:	68f8      	ldr	r0, [r7, #12]
 80021b0:	f000 f878 	bl	80022a4 <I2C_WaitOnFlagUntilTimeout>
 80021b4:	4603      	mov	r3, r0
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d00d      	beq.n	80021d6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021c4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80021c8:	d103      	bne.n	80021d2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80021d0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80021d2:	2303      	movs	r3, #3
 80021d4:	e05f      	b.n	8002296 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80021d6:	897b      	ldrh	r3, [r7, #10]
 80021d8:	b2db      	uxtb	r3, r3
 80021da:	461a      	mov	r2, r3
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80021e4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80021e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021e8:	6a3a      	ldr	r2, [r7, #32]
 80021ea:	492d      	ldr	r1, [pc, #180]	@ (80022a0 <I2C_RequestMemoryWrite+0x128>)
 80021ec:	68f8      	ldr	r0, [r7, #12]
 80021ee:	f000 f8d3 	bl	8002398 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80021f2:	4603      	mov	r3, r0
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d001      	beq.n	80021fc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80021f8:	2301      	movs	r3, #1
 80021fa:	e04c      	b.n	8002296 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021fc:	2300      	movs	r3, #0
 80021fe:	617b      	str	r3, [r7, #20]
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	695b      	ldr	r3, [r3, #20]
 8002206:	617b      	str	r3, [r7, #20]
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	699b      	ldr	r3, [r3, #24]
 800220e:	617b      	str	r3, [r7, #20]
 8002210:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002212:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002214:	6a39      	ldr	r1, [r7, #32]
 8002216:	68f8      	ldr	r0, [r7, #12]
 8002218:	f000 f95e 	bl	80024d8 <I2C_WaitOnTXEFlagUntilTimeout>
 800221c:	4603      	mov	r3, r0
 800221e:	2b00      	cmp	r3, #0
 8002220:	d00d      	beq.n	800223e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002226:	2b04      	cmp	r3, #4
 8002228:	d107      	bne.n	800223a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	681a      	ldr	r2, [r3, #0]
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002238:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800223a:	2301      	movs	r3, #1
 800223c:	e02b      	b.n	8002296 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800223e:	88fb      	ldrh	r3, [r7, #6]
 8002240:	2b01      	cmp	r3, #1
 8002242:	d105      	bne.n	8002250 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002244:	893b      	ldrh	r3, [r7, #8]
 8002246:	b2da      	uxtb	r2, r3
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	611a      	str	r2, [r3, #16]
 800224e:	e021      	b.n	8002294 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002250:	893b      	ldrh	r3, [r7, #8]
 8002252:	0a1b      	lsrs	r3, r3, #8
 8002254:	b29b      	uxth	r3, r3
 8002256:	b2da      	uxtb	r2, r3
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800225e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002260:	6a39      	ldr	r1, [r7, #32]
 8002262:	68f8      	ldr	r0, [r7, #12]
 8002264:	f000 f938 	bl	80024d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002268:	4603      	mov	r3, r0
 800226a:	2b00      	cmp	r3, #0
 800226c:	d00d      	beq.n	800228a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002272:	2b04      	cmp	r3, #4
 8002274:	d107      	bne.n	8002286 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	681a      	ldr	r2, [r3, #0]
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002284:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002286:	2301      	movs	r3, #1
 8002288:	e005      	b.n	8002296 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800228a:	893b      	ldrh	r3, [r7, #8]
 800228c:	b2da      	uxtb	r2, r3
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002294:	2300      	movs	r3, #0
}
 8002296:	4618      	mov	r0, r3
 8002298:	3718      	adds	r7, #24
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}
 800229e:	bf00      	nop
 80022a0:	00010002 	.word	0x00010002

080022a4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b084      	sub	sp, #16
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	60f8      	str	r0, [r7, #12]
 80022ac:	60b9      	str	r1, [r7, #8]
 80022ae:	603b      	str	r3, [r7, #0]
 80022b0:	4613      	mov	r3, r2
 80022b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80022b4:	e048      	b.n	8002348 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022bc:	d044      	beq.n	8002348 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022be:	f7ff fa67 	bl	8001790 <HAL_GetTick>
 80022c2:	4602      	mov	r2, r0
 80022c4:	69bb      	ldr	r3, [r7, #24]
 80022c6:	1ad3      	subs	r3, r2, r3
 80022c8:	683a      	ldr	r2, [r7, #0]
 80022ca:	429a      	cmp	r2, r3
 80022cc:	d302      	bcc.n	80022d4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d139      	bne.n	8002348 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80022d4:	68bb      	ldr	r3, [r7, #8]
 80022d6:	0c1b      	lsrs	r3, r3, #16
 80022d8:	b2db      	uxtb	r3, r3
 80022da:	2b01      	cmp	r3, #1
 80022dc:	d10d      	bne.n	80022fa <I2C_WaitOnFlagUntilTimeout+0x56>
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	695b      	ldr	r3, [r3, #20]
 80022e4:	43da      	mvns	r2, r3
 80022e6:	68bb      	ldr	r3, [r7, #8]
 80022e8:	4013      	ands	r3, r2
 80022ea:	b29b      	uxth	r3, r3
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	bf0c      	ite	eq
 80022f0:	2301      	moveq	r3, #1
 80022f2:	2300      	movne	r3, #0
 80022f4:	b2db      	uxtb	r3, r3
 80022f6:	461a      	mov	r2, r3
 80022f8:	e00c      	b.n	8002314 <I2C_WaitOnFlagUntilTimeout+0x70>
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	699b      	ldr	r3, [r3, #24]
 8002300:	43da      	mvns	r2, r3
 8002302:	68bb      	ldr	r3, [r7, #8]
 8002304:	4013      	ands	r3, r2
 8002306:	b29b      	uxth	r3, r3
 8002308:	2b00      	cmp	r3, #0
 800230a:	bf0c      	ite	eq
 800230c:	2301      	moveq	r3, #1
 800230e:	2300      	movne	r3, #0
 8002310:	b2db      	uxtb	r3, r3
 8002312:	461a      	mov	r2, r3
 8002314:	79fb      	ldrb	r3, [r7, #7]
 8002316:	429a      	cmp	r2, r3
 8002318:	d116      	bne.n	8002348 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	2200      	movs	r2, #0
 800231e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	2220      	movs	r2, #32
 8002324:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	2200      	movs	r2, #0
 800232c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002334:	f043 0220 	orr.w	r2, r3, #32
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	2200      	movs	r2, #0
 8002340:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002344:	2301      	movs	r3, #1
 8002346:	e023      	b.n	8002390 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	0c1b      	lsrs	r3, r3, #16
 800234c:	b2db      	uxtb	r3, r3
 800234e:	2b01      	cmp	r3, #1
 8002350:	d10d      	bne.n	800236e <I2C_WaitOnFlagUntilTimeout+0xca>
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	695b      	ldr	r3, [r3, #20]
 8002358:	43da      	mvns	r2, r3
 800235a:	68bb      	ldr	r3, [r7, #8]
 800235c:	4013      	ands	r3, r2
 800235e:	b29b      	uxth	r3, r3
 8002360:	2b00      	cmp	r3, #0
 8002362:	bf0c      	ite	eq
 8002364:	2301      	moveq	r3, #1
 8002366:	2300      	movne	r3, #0
 8002368:	b2db      	uxtb	r3, r3
 800236a:	461a      	mov	r2, r3
 800236c:	e00c      	b.n	8002388 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	699b      	ldr	r3, [r3, #24]
 8002374:	43da      	mvns	r2, r3
 8002376:	68bb      	ldr	r3, [r7, #8]
 8002378:	4013      	ands	r3, r2
 800237a:	b29b      	uxth	r3, r3
 800237c:	2b00      	cmp	r3, #0
 800237e:	bf0c      	ite	eq
 8002380:	2301      	moveq	r3, #1
 8002382:	2300      	movne	r3, #0
 8002384:	b2db      	uxtb	r3, r3
 8002386:	461a      	mov	r2, r3
 8002388:	79fb      	ldrb	r3, [r7, #7]
 800238a:	429a      	cmp	r2, r3
 800238c:	d093      	beq.n	80022b6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800238e:	2300      	movs	r3, #0
}
 8002390:	4618      	mov	r0, r3
 8002392:	3710      	adds	r7, #16
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}

08002398 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b084      	sub	sp, #16
 800239c:	af00      	add	r7, sp, #0
 800239e:	60f8      	str	r0, [r7, #12]
 80023a0:	60b9      	str	r1, [r7, #8]
 80023a2:	607a      	str	r2, [r7, #4]
 80023a4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80023a6:	e071      	b.n	800248c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	695b      	ldr	r3, [r3, #20]
 80023ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80023b6:	d123      	bne.n	8002400 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	681a      	ldr	r2, [r3, #0]
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80023c6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80023d0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	2200      	movs	r2, #0
 80023d6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	2220      	movs	r2, #32
 80023dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	2200      	movs	r2, #0
 80023e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023ec:	f043 0204 	orr.w	r2, r3, #4
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	2200      	movs	r2, #0
 80023f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80023fc:	2301      	movs	r3, #1
 80023fe:	e067      	b.n	80024d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002406:	d041      	beq.n	800248c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002408:	f7ff f9c2 	bl	8001790 <HAL_GetTick>
 800240c:	4602      	mov	r2, r0
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	1ad3      	subs	r3, r2, r3
 8002412:	687a      	ldr	r2, [r7, #4]
 8002414:	429a      	cmp	r2, r3
 8002416:	d302      	bcc.n	800241e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d136      	bne.n	800248c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800241e:	68bb      	ldr	r3, [r7, #8]
 8002420:	0c1b      	lsrs	r3, r3, #16
 8002422:	b2db      	uxtb	r3, r3
 8002424:	2b01      	cmp	r3, #1
 8002426:	d10c      	bne.n	8002442 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	695b      	ldr	r3, [r3, #20]
 800242e:	43da      	mvns	r2, r3
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	4013      	ands	r3, r2
 8002434:	b29b      	uxth	r3, r3
 8002436:	2b00      	cmp	r3, #0
 8002438:	bf14      	ite	ne
 800243a:	2301      	movne	r3, #1
 800243c:	2300      	moveq	r3, #0
 800243e:	b2db      	uxtb	r3, r3
 8002440:	e00b      	b.n	800245a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	699b      	ldr	r3, [r3, #24]
 8002448:	43da      	mvns	r2, r3
 800244a:	68bb      	ldr	r3, [r7, #8]
 800244c:	4013      	ands	r3, r2
 800244e:	b29b      	uxth	r3, r3
 8002450:	2b00      	cmp	r3, #0
 8002452:	bf14      	ite	ne
 8002454:	2301      	movne	r3, #1
 8002456:	2300      	moveq	r3, #0
 8002458:	b2db      	uxtb	r3, r3
 800245a:	2b00      	cmp	r3, #0
 800245c:	d016      	beq.n	800248c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	2200      	movs	r2, #0
 8002462:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	2220      	movs	r2, #32
 8002468:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	2200      	movs	r2, #0
 8002470:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002478:	f043 0220 	orr.w	r2, r3, #32
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	2200      	movs	r2, #0
 8002484:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002488:	2301      	movs	r3, #1
 800248a:	e021      	b.n	80024d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800248c:	68bb      	ldr	r3, [r7, #8]
 800248e:	0c1b      	lsrs	r3, r3, #16
 8002490:	b2db      	uxtb	r3, r3
 8002492:	2b01      	cmp	r3, #1
 8002494:	d10c      	bne.n	80024b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	695b      	ldr	r3, [r3, #20]
 800249c:	43da      	mvns	r2, r3
 800249e:	68bb      	ldr	r3, [r7, #8]
 80024a0:	4013      	ands	r3, r2
 80024a2:	b29b      	uxth	r3, r3
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	bf14      	ite	ne
 80024a8:	2301      	movne	r3, #1
 80024aa:	2300      	moveq	r3, #0
 80024ac:	b2db      	uxtb	r3, r3
 80024ae:	e00b      	b.n	80024c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	699b      	ldr	r3, [r3, #24]
 80024b6:	43da      	mvns	r2, r3
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	4013      	ands	r3, r2
 80024bc:	b29b      	uxth	r3, r3
 80024be:	2b00      	cmp	r3, #0
 80024c0:	bf14      	ite	ne
 80024c2:	2301      	movne	r3, #1
 80024c4:	2300      	moveq	r3, #0
 80024c6:	b2db      	uxtb	r3, r3
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	f47f af6d 	bne.w	80023a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80024ce:	2300      	movs	r3, #0
}
 80024d0:	4618      	mov	r0, r3
 80024d2:	3710      	adds	r7, #16
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}

080024d8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b084      	sub	sp, #16
 80024dc:	af00      	add	r7, sp, #0
 80024de:	60f8      	str	r0, [r7, #12]
 80024e0:	60b9      	str	r1, [r7, #8]
 80024e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80024e4:	e034      	b.n	8002550 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80024e6:	68f8      	ldr	r0, [r7, #12]
 80024e8:	f000 f886 	bl	80025f8 <I2C_IsAcknowledgeFailed>
 80024ec:	4603      	mov	r3, r0
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d001      	beq.n	80024f6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80024f2:	2301      	movs	r3, #1
 80024f4:	e034      	b.n	8002560 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024f6:	68bb      	ldr	r3, [r7, #8]
 80024f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024fc:	d028      	beq.n	8002550 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024fe:	f7ff f947 	bl	8001790 <HAL_GetTick>
 8002502:	4602      	mov	r2, r0
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	1ad3      	subs	r3, r2, r3
 8002508:	68ba      	ldr	r2, [r7, #8]
 800250a:	429a      	cmp	r2, r3
 800250c:	d302      	bcc.n	8002514 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800250e:	68bb      	ldr	r3, [r7, #8]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d11d      	bne.n	8002550 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	695b      	ldr	r3, [r3, #20]
 800251a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800251e:	2b80      	cmp	r3, #128	@ 0x80
 8002520:	d016      	beq.n	8002550 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	2200      	movs	r2, #0
 8002526:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	2220      	movs	r2, #32
 800252c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	2200      	movs	r2, #0
 8002534:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800253c:	f043 0220 	orr.w	r2, r3, #32
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	2200      	movs	r2, #0
 8002548:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800254c:	2301      	movs	r3, #1
 800254e:	e007      	b.n	8002560 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	695b      	ldr	r3, [r3, #20]
 8002556:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800255a:	2b80      	cmp	r3, #128	@ 0x80
 800255c:	d1c3      	bne.n	80024e6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800255e:	2300      	movs	r3, #0
}
 8002560:	4618      	mov	r0, r3
 8002562:	3710      	adds	r7, #16
 8002564:	46bd      	mov	sp, r7
 8002566:	bd80      	pop	{r7, pc}

08002568 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b084      	sub	sp, #16
 800256c:	af00      	add	r7, sp, #0
 800256e:	60f8      	str	r0, [r7, #12]
 8002570:	60b9      	str	r1, [r7, #8]
 8002572:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002574:	e034      	b.n	80025e0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002576:	68f8      	ldr	r0, [r7, #12]
 8002578:	f000 f83e 	bl	80025f8 <I2C_IsAcknowledgeFailed>
 800257c:	4603      	mov	r3, r0
 800257e:	2b00      	cmp	r3, #0
 8002580:	d001      	beq.n	8002586 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002582:	2301      	movs	r3, #1
 8002584:	e034      	b.n	80025f0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002586:	68bb      	ldr	r3, [r7, #8]
 8002588:	f1b3 3fff 	cmp.w	r3, #4294967295
 800258c:	d028      	beq.n	80025e0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800258e:	f7ff f8ff 	bl	8001790 <HAL_GetTick>
 8002592:	4602      	mov	r2, r0
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	1ad3      	subs	r3, r2, r3
 8002598:	68ba      	ldr	r2, [r7, #8]
 800259a:	429a      	cmp	r2, r3
 800259c:	d302      	bcc.n	80025a4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800259e:	68bb      	ldr	r3, [r7, #8]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d11d      	bne.n	80025e0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	695b      	ldr	r3, [r3, #20]
 80025aa:	f003 0304 	and.w	r3, r3, #4
 80025ae:	2b04      	cmp	r3, #4
 80025b0:	d016      	beq.n	80025e0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	2200      	movs	r2, #0
 80025b6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	2220      	movs	r2, #32
 80025bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	2200      	movs	r2, #0
 80025c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025cc:	f043 0220 	orr.w	r2, r3, #32
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	2200      	movs	r2, #0
 80025d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80025dc:	2301      	movs	r3, #1
 80025de:	e007      	b.n	80025f0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	695b      	ldr	r3, [r3, #20]
 80025e6:	f003 0304 	and.w	r3, r3, #4
 80025ea:	2b04      	cmp	r3, #4
 80025ec:	d1c3      	bne.n	8002576 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80025ee:	2300      	movs	r3, #0
}
 80025f0:	4618      	mov	r0, r3
 80025f2:	3710      	adds	r7, #16
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bd80      	pop	{r7, pc}

080025f8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b083      	sub	sp, #12
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	695b      	ldr	r3, [r3, #20]
 8002606:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800260a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800260e:	d11b      	bne.n	8002648 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002618:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2200      	movs	r2, #0
 800261e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2220      	movs	r2, #32
 8002624:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2200      	movs	r2, #0
 800262c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002634:	f043 0204 	orr.w	r2, r3, #4
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2200      	movs	r2, #0
 8002640:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002644:	2301      	movs	r3, #1
 8002646:	e000      	b.n	800264a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002648:	2300      	movs	r3, #0
}
 800264a:	4618      	mov	r0, r3
 800264c:	370c      	adds	r7, #12
 800264e:	46bd      	mov	sp, r7
 8002650:	bc80      	pop	{r7}
 8002652:	4770      	bx	lr

08002654 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b086      	sub	sp, #24
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d101      	bne.n	8002666 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002662:	2301      	movs	r3, #1
 8002664:	e272      	b.n	8002b4c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f003 0301 	and.w	r3, r3, #1
 800266e:	2b00      	cmp	r3, #0
 8002670:	f000 8087 	beq.w	8002782 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002674:	4b92      	ldr	r3, [pc, #584]	@ (80028c0 <HAL_RCC_OscConfig+0x26c>)
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	f003 030c 	and.w	r3, r3, #12
 800267c:	2b04      	cmp	r3, #4
 800267e:	d00c      	beq.n	800269a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002680:	4b8f      	ldr	r3, [pc, #572]	@ (80028c0 <HAL_RCC_OscConfig+0x26c>)
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	f003 030c 	and.w	r3, r3, #12
 8002688:	2b08      	cmp	r3, #8
 800268a:	d112      	bne.n	80026b2 <HAL_RCC_OscConfig+0x5e>
 800268c:	4b8c      	ldr	r3, [pc, #560]	@ (80028c0 <HAL_RCC_OscConfig+0x26c>)
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002694:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002698:	d10b      	bne.n	80026b2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800269a:	4b89      	ldr	r3, [pc, #548]	@ (80028c0 <HAL_RCC_OscConfig+0x26c>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d06c      	beq.n	8002780 <HAL_RCC_OscConfig+0x12c>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d168      	bne.n	8002780 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
 80026b0:	e24c      	b.n	8002b4c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80026ba:	d106      	bne.n	80026ca <HAL_RCC_OscConfig+0x76>
 80026bc:	4b80      	ldr	r3, [pc, #512]	@ (80028c0 <HAL_RCC_OscConfig+0x26c>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a7f      	ldr	r2, [pc, #508]	@ (80028c0 <HAL_RCC_OscConfig+0x26c>)
 80026c2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026c6:	6013      	str	r3, [r2, #0]
 80026c8:	e02e      	b.n	8002728 <HAL_RCC_OscConfig+0xd4>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d10c      	bne.n	80026ec <HAL_RCC_OscConfig+0x98>
 80026d2:	4b7b      	ldr	r3, [pc, #492]	@ (80028c0 <HAL_RCC_OscConfig+0x26c>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4a7a      	ldr	r2, [pc, #488]	@ (80028c0 <HAL_RCC_OscConfig+0x26c>)
 80026d8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80026dc:	6013      	str	r3, [r2, #0]
 80026de:	4b78      	ldr	r3, [pc, #480]	@ (80028c0 <HAL_RCC_OscConfig+0x26c>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4a77      	ldr	r2, [pc, #476]	@ (80028c0 <HAL_RCC_OscConfig+0x26c>)
 80026e4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80026e8:	6013      	str	r3, [r2, #0]
 80026ea:	e01d      	b.n	8002728 <HAL_RCC_OscConfig+0xd4>
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80026f4:	d10c      	bne.n	8002710 <HAL_RCC_OscConfig+0xbc>
 80026f6:	4b72      	ldr	r3, [pc, #456]	@ (80028c0 <HAL_RCC_OscConfig+0x26c>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4a71      	ldr	r2, [pc, #452]	@ (80028c0 <HAL_RCC_OscConfig+0x26c>)
 80026fc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002700:	6013      	str	r3, [r2, #0]
 8002702:	4b6f      	ldr	r3, [pc, #444]	@ (80028c0 <HAL_RCC_OscConfig+0x26c>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4a6e      	ldr	r2, [pc, #440]	@ (80028c0 <HAL_RCC_OscConfig+0x26c>)
 8002708:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800270c:	6013      	str	r3, [r2, #0]
 800270e:	e00b      	b.n	8002728 <HAL_RCC_OscConfig+0xd4>
 8002710:	4b6b      	ldr	r3, [pc, #428]	@ (80028c0 <HAL_RCC_OscConfig+0x26c>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a6a      	ldr	r2, [pc, #424]	@ (80028c0 <HAL_RCC_OscConfig+0x26c>)
 8002716:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800271a:	6013      	str	r3, [r2, #0]
 800271c:	4b68      	ldr	r3, [pc, #416]	@ (80028c0 <HAL_RCC_OscConfig+0x26c>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a67      	ldr	r2, [pc, #412]	@ (80028c0 <HAL_RCC_OscConfig+0x26c>)
 8002722:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002726:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d013      	beq.n	8002758 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002730:	f7ff f82e 	bl	8001790 <HAL_GetTick>
 8002734:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002736:	e008      	b.n	800274a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002738:	f7ff f82a 	bl	8001790 <HAL_GetTick>
 800273c:	4602      	mov	r2, r0
 800273e:	693b      	ldr	r3, [r7, #16]
 8002740:	1ad3      	subs	r3, r2, r3
 8002742:	2b64      	cmp	r3, #100	@ 0x64
 8002744:	d901      	bls.n	800274a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002746:	2303      	movs	r3, #3
 8002748:	e200      	b.n	8002b4c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800274a:	4b5d      	ldr	r3, [pc, #372]	@ (80028c0 <HAL_RCC_OscConfig+0x26c>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002752:	2b00      	cmp	r3, #0
 8002754:	d0f0      	beq.n	8002738 <HAL_RCC_OscConfig+0xe4>
 8002756:	e014      	b.n	8002782 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002758:	f7ff f81a 	bl	8001790 <HAL_GetTick>
 800275c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800275e:	e008      	b.n	8002772 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002760:	f7ff f816 	bl	8001790 <HAL_GetTick>
 8002764:	4602      	mov	r2, r0
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	1ad3      	subs	r3, r2, r3
 800276a:	2b64      	cmp	r3, #100	@ 0x64
 800276c:	d901      	bls.n	8002772 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800276e:	2303      	movs	r3, #3
 8002770:	e1ec      	b.n	8002b4c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002772:	4b53      	ldr	r3, [pc, #332]	@ (80028c0 <HAL_RCC_OscConfig+0x26c>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800277a:	2b00      	cmp	r3, #0
 800277c:	d1f0      	bne.n	8002760 <HAL_RCC_OscConfig+0x10c>
 800277e:	e000      	b.n	8002782 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002780:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f003 0302 	and.w	r3, r3, #2
 800278a:	2b00      	cmp	r3, #0
 800278c:	d063      	beq.n	8002856 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800278e:	4b4c      	ldr	r3, [pc, #304]	@ (80028c0 <HAL_RCC_OscConfig+0x26c>)
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	f003 030c 	and.w	r3, r3, #12
 8002796:	2b00      	cmp	r3, #0
 8002798:	d00b      	beq.n	80027b2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800279a:	4b49      	ldr	r3, [pc, #292]	@ (80028c0 <HAL_RCC_OscConfig+0x26c>)
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	f003 030c 	and.w	r3, r3, #12
 80027a2:	2b08      	cmp	r3, #8
 80027a4:	d11c      	bne.n	80027e0 <HAL_RCC_OscConfig+0x18c>
 80027a6:	4b46      	ldr	r3, [pc, #280]	@ (80028c0 <HAL_RCC_OscConfig+0x26c>)
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d116      	bne.n	80027e0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027b2:	4b43      	ldr	r3, [pc, #268]	@ (80028c0 <HAL_RCC_OscConfig+0x26c>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f003 0302 	and.w	r3, r3, #2
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d005      	beq.n	80027ca <HAL_RCC_OscConfig+0x176>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	691b      	ldr	r3, [r3, #16]
 80027c2:	2b01      	cmp	r3, #1
 80027c4:	d001      	beq.n	80027ca <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80027c6:	2301      	movs	r3, #1
 80027c8:	e1c0      	b.n	8002b4c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027ca:	4b3d      	ldr	r3, [pc, #244]	@ (80028c0 <HAL_RCC_OscConfig+0x26c>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	695b      	ldr	r3, [r3, #20]
 80027d6:	00db      	lsls	r3, r3, #3
 80027d8:	4939      	ldr	r1, [pc, #228]	@ (80028c0 <HAL_RCC_OscConfig+0x26c>)
 80027da:	4313      	orrs	r3, r2
 80027dc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027de:	e03a      	b.n	8002856 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	691b      	ldr	r3, [r3, #16]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d020      	beq.n	800282a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027e8:	4b36      	ldr	r3, [pc, #216]	@ (80028c4 <HAL_RCC_OscConfig+0x270>)
 80027ea:	2201      	movs	r2, #1
 80027ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027ee:	f7fe ffcf 	bl	8001790 <HAL_GetTick>
 80027f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027f4:	e008      	b.n	8002808 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027f6:	f7fe ffcb 	bl	8001790 <HAL_GetTick>
 80027fa:	4602      	mov	r2, r0
 80027fc:	693b      	ldr	r3, [r7, #16]
 80027fe:	1ad3      	subs	r3, r2, r3
 8002800:	2b02      	cmp	r3, #2
 8002802:	d901      	bls.n	8002808 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002804:	2303      	movs	r3, #3
 8002806:	e1a1      	b.n	8002b4c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002808:	4b2d      	ldr	r3, [pc, #180]	@ (80028c0 <HAL_RCC_OscConfig+0x26c>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f003 0302 	and.w	r3, r3, #2
 8002810:	2b00      	cmp	r3, #0
 8002812:	d0f0      	beq.n	80027f6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002814:	4b2a      	ldr	r3, [pc, #168]	@ (80028c0 <HAL_RCC_OscConfig+0x26c>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	695b      	ldr	r3, [r3, #20]
 8002820:	00db      	lsls	r3, r3, #3
 8002822:	4927      	ldr	r1, [pc, #156]	@ (80028c0 <HAL_RCC_OscConfig+0x26c>)
 8002824:	4313      	orrs	r3, r2
 8002826:	600b      	str	r3, [r1, #0]
 8002828:	e015      	b.n	8002856 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800282a:	4b26      	ldr	r3, [pc, #152]	@ (80028c4 <HAL_RCC_OscConfig+0x270>)
 800282c:	2200      	movs	r2, #0
 800282e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002830:	f7fe ffae 	bl	8001790 <HAL_GetTick>
 8002834:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002836:	e008      	b.n	800284a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002838:	f7fe ffaa 	bl	8001790 <HAL_GetTick>
 800283c:	4602      	mov	r2, r0
 800283e:	693b      	ldr	r3, [r7, #16]
 8002840:	1ad3      	subs	r3, r2, r3
 8002842:	2b02      	cmp	r3, #2
 8002844:	d901      	bls.n	800284a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002846:	2303      	movs	r3, #3
 8002848:	e180      	b.n	8002b4c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800284a:	4b1d      	ldr	r3, [pc, #116]	@ (80028c0 <HAL_RCC_OscConfig+0x26c>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f003 0302 	and.w	r3, r3, #2
 8002852:	2b00      	cmp	r3, #0
 8002854:	d1f0      	bne.n	8002838 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f003 0308 	and.w	r3, r3, #8
 800285e:	2b00      	cmp	r3, #0
 8002860:	d03a      	beq.n	80028d8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	699b      	ldr	r3, [r3, #24]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d019      	beq.n	800289e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800286a:	4b17      	ldr	r3, [pc, #92]	@ (80028c8 <HAL_RCC_OscConfig+0x274>)
 800286c:	2201      	movs	r2, #1
 800286e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002870:	f7fe ff8e 	bl	8001790 <HAL_GetTick>
 8002874:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002876:	e008      	b.n	800288a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002878:	f7fe ff8a 	bl	8001790 <HAL_GetTick>
 800287c:	4602      	mov	r2, r0
 800287e:	693b      	ldr	r3, [r7, #16]
 8002880:	1ad3      	subs	r3, r2, r3
 8002882:	2b02      	cmp	r3, #2
 8002884:	d901      	bls.n	800288a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002886:	2303      	movs	r3, #3
 8002888:	e160      	b.n	8002b4c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800288a:	4b0d      	ldr	r3, [pc, #52]	@ (80028c0 <HAL_RCC_OscConfig+0x26c>)
 800288c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800288e:	f003 0302 	and.w	r3, r3, #2
 8002892:	2b00      	cmp	r3, #0
 8002894:	d0f0      	beq.n	8002878 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002896:	2001      	movs	r0, #1
 8002898:	f000 fafe 	bl	8002e98 <RCC_Delay>
 800289c:	e01c      	b.n	80028d8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800289e:	4b0a      	ldr	r3, [pc, #40]	@ (80028c8 <HAL_RCC_OscConfig+0x274>)
 80028a0:	2200      	movs	r2, #0
 80028a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028a4:	f7fe ff74 	bl	8001790 <HAL_GetTick>
 80028a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028aa:	e00f      	b.n	80028cc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028ac:	f7fe ff70 	bl	8001790 <HAL_GetTick>
 80028b0:	4602      	mov	r2, r0
 80028b2:	693b      	ldr	r3, [r7, #16]
 80028b4:	1ad3      	subs	r3, r2, r3
 80028b6:	2b02      	cmp	r3, #2
 80028b8:	d908      	bls.n	80028cc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80028ba:	2303      	movs	r3, #3
 80028bc:	e146      	b.n	8002b4c <HAL_RCC_OscConfig+0x4f8>
 80028be:	bf00      	nop
 80028c0:	40021000 	.word	0x40021000
 80028c4:	42420000 	.word	0x42420000
 80028c8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028cc:	4b92      	ldr	r3, [pc, #584]	@ (8002b18 <HAL_RCC_OscConfig+0x4c4>)
 80028ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028d0:	f003 0302 	and.w	r3, r3, #2
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d1e9      	bne.n	80028ac <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f003 0304 	and.w	r3, r3, #4
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	f000 80a6 	beq.w	8002a32 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028e6:	2300      	movs	r3, #0
 80028e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028ea:	4b8b      	ldr	r3, [pc, #556]	@ (8002b18 <HAL_RCC_OscConfig+0x4c4>)
 80028ec:	69db      	ldr	r3, [r3, #28]
 80028ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d10d      	bne.n	8002912 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028f6:	4b88      	ldr	r3, [pc, #544]	@ (8002b18 <HAL_RCC_OscConfig+0x4c4>)
 80028f8:	69db      	ldr	r3, [r3, #28]
 80028fa:	4a87      	ldr	r2, [pc, #540]	@ (8002b18 <HAL_RCC_OscConfig+0x4c4>)
 80028fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002900:	61d3      	str	r3, [r2, #28]
 8002902:	4b85      	ldr	r3, [pc, #532]	@ (8002b18 <HAL_RCC_OscConfig+0x4c4>)
 8002904:	69db      	ldr	r3, [r3, #28]
 8002906:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800290a:	60bb      	str	r3, [r7, #8]
 800290c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800290e:	2301      	movs	r3, #1
 8002910:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002912:	4b82      	ldr	r3, [pc, #520]	@ (8002b1c <HAL_RCC_OscConfig+0x4c8>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800291a:	2b00      	cmp	r3, #0
 800291c:	d118      	bne.n	8002950 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800291e:	4b7f      	ldr	r3, [pc, #508]	@ (8002b1c <HAL_RCC_OscConfig+0x4c8>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4a7e      	ldr	r2, [pc, #504]	@ (8002b1c <HAL_RCC_OscConfig+0x4c8>)
 8002924:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002928:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800292a:	f7fe ff31 	bl	8001790 <HAL_GetTick>
 800292e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002930:	e008      	b.n	8002944 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002932:	f7fe ff2d 	bl	8001790 <HAL_GetTick>
 8002936:	4602      	mov	r2, r0
 8002938:	693b      	ldr	r3, [r7, #16]
 800293a:	1ad3      	subs	r3, r2, r3
 800293c:	2b64      	cmp	r3, #100	@ 0x64
 800293e:	d901      	bls.n	8002944 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002940:	2303      	movs	r3, #3
 8002942:	e103      	b.n	8002b4c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002944:	4b75      	ldr	r3, [pc, #468]	@ (8002b1c <HAL_RCC_OscConfig+0x4c8>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800294c:	2b00      	cmp	r3, #0
 800294e:	d0f0      	beq.n	8002932 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	68db      	ldr	r3, [r3, #12]
 8002954:	2b01      	cmp	r3, #1
 8002956:	d106      	bne.n	8002966 <HAL_RCC_OscConfig+0x312>
 8002958:	4b6f      	ldr	r3, [pc, #444]	@ (8002b18 <HAL_RCC_OscConfig+0x4c4>)
 800295a:	6a1b      	ldr	r3, [r3, #32]
 800295c:	4a6e      	ldr	r2, [pc, #440]	@ (8002b18 <HAL_RCC_OscConfig+0x4c4>)
 800295e:	f043 0301 	orr.w	r3, r3, #1
 8002962:	6213      	str	r3, [r2, #32]
 8002964:	e02d      	b.n	80029c2 <HAL_RCC_OscConfig+0x36e>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	68db      	ldr	r3, [r3, #12]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d10c      	bne.n	8002988 <HAL_RCC_OscConfig+0x334>
 800296e:	4b6a      	ldr	r3, [pc, #424]	@ (8002b18 <HAL_RCC_OscConfig+0x4c4>)
 8002970:	6a1b      	ldr	r3, [r3, #32]
 8002972:	4a69      	ldr	r2, [pc, #420]	@ (8002b18 <HAL_RCC_OscConfig+0x4c4>)
 8002974:	f023 0301 	bic.w	r3, r3, #1
 8002978:	6213      	str	r3, [r2, #32]
 800297a:	4b67      	ldr	r3, [pc, #412]	@ (8002b18 <HAL_RCC_OscConfig+0x4c4>)
 800297c:	6a1b      	ldr	r3, [r3, #32]
 800297e:	4a66      	ldr	r2, [pc, #408]	@ (8002b18 <HAL_RCC_OscConfig+0x4c4>)
 8002980:	f023 0304 	bic.w	r3, r3, #4
 8002984:	6213      	str	r3, [r2, #32]
 8002986:	e01c      	b.n	80029c2 <HAL_RCC_OscConfig+0x36e>
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	68db      	ldr	r3, [r3, #12]
 800298c:	2b05      	cmp	r3, #5
 800298e:	d10c      	bne.n	80029aa <HAL_RCC_OscConfig+0x356>
 8002990:	4b61      	ldr	r3, [pc, #388]	@ (8002b18 <HAL_RCC_OscConfig+0x4c4>)
 8002992:	6a1b      	ldr	r3, [r3, #32]
 8002994:	4a60      	ldr	r2, [pc, #384]	@ (8002b18 <HAL_RCC_OscConfig+0x4c4>)
 8002996:	f043 0304 	orr.w	r3, r3, #4
 800299a:	6213      	str	r3, [r2, #32]
 800299c:	4b5e      	ldr	r3, [pc, #376]	@ (8002b18 <HAL_RCC_OscConfig+0x4c4>)
 800299e:	6a1b      	ldr	r3, [r3, #32]
 80029a0:	4a5d      	ldr	r2, [pc, #372]	@ (8002b18 <HAL_RCC_OscConfig+0x4c4>)
 80029a2:	f043 0301 	orr.w	r3, r3, #1
 80029a6:	6213      	str	r3, [r2, #32]
 80029a8:	e00b      	b.n	80029c2 <HAL_RCC_OscConfig+0x36e>
 80029aa:	4b5b      	ldr	r3, [pc, #364]	@ (8002b18 <HAL_RCC_OscConfig+0x4c4>)
 80029ac:	6a1b      	ldr	r3, [r3, #32]
 80029ae:	4a5a      	ldr	r2, [pc, #360]	@ (8002b18 <HAL_RCC_OscConfig+0x4c4>)
 80029b0:	f023 0301 	bic.w	r3, r3, #1
 80029b4:	6213      	str	r3, [r2, #32]
 80029b6:	4b58      	ldr	r3, [pc, #352]	@ (8002b18 <HAL_RCC_OscConfig+0x4c4>)
 80029b8:	6a1b      	ldr	r3, [r3, #32]
 80029ba:	4a57      	ldr	r2, [pc, #348]	@ (8002b18 <HAL_RCC_OscConfig+0x4c4>)
 80029bc:	f023 0304 	bic.w	r3, r3, #4
 80029c0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	68db      	ldr	r3, [r3, #12]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d015      	beq.n	80029f6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029ca:	f7fe fee1 	bl	8001790 <HAL_GetTick>
 80029ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029d0:	e00a      	b.n	80029e8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029d2:	f7fe fedd 	bl	8001790 <HAL_GetTick>
 80029d6:	4602      	mov	r2, r0
 80029d8:	693b      	ldr	r3, [r7, #16]
 80029da:	1ad3      	subs	r3, r2, r3
 80029dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d901      	bls.n	80029e8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80029e4:	2303      	movs	r3, #3
 80029e6:	e0b1      	b.n	8002b4c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029e8:	4b4b      	ldr	r3, [pc, #300]	@ (8002b18 <HAL_RCC_OscConfig+0x4c4>)
 80029ea:	6a1b      	ldr	r3, [r3, #32]
 80029ec:	f003 0302 	and.w	r3, r3, #2
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d0ee      	beq.n	80029d2 <HAL_RCC_OscConfig+0x37e>
 80029f4:	e014      	b.n	8002a20 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029f6:	f7fe fecb 	bl	8001790 <HAL_GetTick>
 80029fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029fc:	e00a      	b.n	8002a14 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029fe:	f7fe fec7 	bl	8001790 <HAL_GetTick>
 8002a02:	4602      	mov	r2, r0
 8002a04:	693b      	ldr	r3, [r7, #16]
 8002a06:	1ad3      	subs	r3, r2, r3
 8002a08:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d901      	bls.n	8002a14 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002a10:	2303      	movs	r3, #3
 8002a12:	e09b      	b.n	8002b4c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a14:	4b40      	ldr	r3, [pc, #256]	@ (8002b18 <HAL_RCC_OscConfig+0x4c4>)
 8002a16:	6a1b      	ldr	r3, [r3, #32]
 8002a18:	f003 0302 	and.w	r3, r3, #2
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d1ee      	bne.n	80029fe <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002a20:	7dfb      	ldrb	r3, [r7, #23]
 8002a22:	2b01      	cmp	r3, #1
 8002a24:	d105      	bne.n	8002a32 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a26:	4b3c      	ldr	r3, [pc, #240]	@ (8002b18 <HAL_RCC_OscConfig+0x4c4>)
 8002a28:	69db      	ldr	r3, [r3, #28]
 8002a2a:	4a3b      	ldr	r2, [pc, #236]	@ (8002b18 <HAL_RCC_OscConfig+0x4c4>)
 8002a2c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002a30:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	69db      	ldr	r3, [r3, #28]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	f000 8087 	beq.w	8002b4a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a3c:	4b36      	ldr	r3, [pc, #216]	@ (8002b18 <HAL_RCC_OscConfig+0x4c4>)
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	f003 030c 	and.w	r3, r3, #12
 8002a44:	2b08      	cmp	r3, #8
 8002a46:	d061      	beq.n	8002b0c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	69db      	ldr	r3, [r3, #28]
 8002a4c:	2b02      	cmp	r3, #2
 8002a4e:	d146      	bne.n	8002ade <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a50:	4b33      	ldr	r3, [pc, #204]	@ (8002b20 <HAL_RCC_OscConfig+0x4cc>)
 8002a52:	2200      	movs	r2, #0
 8002a54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a56:	f7fe fe9b 	bl	8001790 <HAL_GetTick>
 8002a5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a5c:	e008      	b.n	8002a70 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a5e:	f7fe fe97 	bl	8001790 <HAL_GetTick>
 8002a62:	4602      	mov	r2, r0
 8002a64:	693b      	ldr	r3, [r7, #16]
 8002a66:	1ad3      	subs	r3, r2, r3
 8002a68:	2b02      	cmp	r3, #2
 8002a6a:	d901      	bls.n	8002a70 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002a6c:	2303      	movs	r3, #3
 8002a6e:	e06d      	b.n	8002b4c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a70:	4b29      	ldr	r3, [pc, #164]	@ (8002b18 <HAL_RCC_OscConfig+0x4c4>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d1f0      	bne.n	8002a5e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6a1b      	ldr	r3, [r3, #32]
 8002a80:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a84:	d108      	bne.n	8002a98 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002a86:	4b24      	ldr	r3, [pc, #144]	@ (8002b18 <HAL_RCC_OscConfig+0x4c4>)
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	689b      	ldr	r3, [r3, #8]
 8002a92:	4921      	ldr	r1, [pc, #132]	@ (8002b18 <HAL_RCC_OscConfig+0x4c4>)
 8002a94:	4313      	orrs	r3, r2
 8002a96:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a98:	4b1f      	ldr	r3, [pc, #124]	@ (8002b18 <HAL_RCC_OscConfig+0x4c4>)
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6a19      	ldr	r1, [r3, #32]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aa8:	430b      	orrs	r3, r1
 8002aaa:	491b      	ldr	r1, [pc, #108]	@ (8002b18 <HAL_RCC_OscConfig+0x4c4>)
 8002aac:	4313      	orrs	r3, r2
 8002aae:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ab0:	4b1b      	ldr	r3, [pc, #108]	@ (8002b20 <HAL_RCC_OscConfig+0x4cc>)
 8002ab2:	2201      	movs	r2, #1
 8002ab4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ab6:	f7fe fe6b 	bl	8001790 <HAL_GetTick>
 8002aba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002abc:	e008      	b.n	8002ad0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002abe:	f7fe fe67 	bl	8001790 <HAL_GetTick>
 8002ac2:	4602      	mov	r2, r0
 8002ac4:	693b      	ldr	r3, [r7, #16]
 8002ac6:	1ad3      	subs	r3, r2, r3
 8002ac8:	2b02      	cmp	r3, #2
 8002aca:	d901      	bls.n	8002ad0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002acc:	2303      	movs	r3, #3
 8002ace:	e03d      	b.n	8002b4c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ad0:	4b11      	ldr	r3, [pc, #68]	@ (8002b18 <HAL_RCC_OscConfig+0x4c4>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d0f0      	beq.n	8002abe <HAL_RCC_OscConfig+0x46a>
 8002adc:	e035      	b.n	8002b4a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ade:	4b10      	ldr	r3, [pc, #64]	@ (8002b20 <HAL_RCC_OscConfig+0x4cc>)
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ae4:	f7fe fe54 	bl	8001790 <HAL_GetTick>
 8002ae8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002aea:	e008      	b.n	8002afe <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002aec:	f7fe fe50 	bl	8001790 <HAL_GetTick>
 8002af0:	4602      	mov	r2, r0
 8002af2:	693b      	ldr	r3, [r7, #16]
 8002af4:	1ad3      	subs	r3, r2, r3
 8002af6:	2b02      	cmp	r3, #2
 8002af8:	d901      	bls.n	8002afe <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002afa:	2303      	movs	r3, #3
 8002afc:	e026      	b.n	8002b4c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002afe:	4b06      	ldr	r3, [pc, #24]	@ (8002b18 <HAL_RCC_OscConfig+0x4c4>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d1f0      	bne.n	8002aec <HAL_RCC_OscConfig+0x498>
 8002b0a:	e01e      	b.n	8002b4a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	69db      	ldr	r3, [r3, #28]
 8002b10:	2b01      	cmp	r3, #1
 8002b12:	d107      	bne.n	8002b24 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002b14:	2301      	movs	r3, #1
 8002b16:	e019      	b.n	8002b4c <HAL_RCC_OscConfig+0x4f8>
 8002b18:	40021000 	.word	0x40021000
 8002b1c:	40007000 	.word	0x40007000
 8002b20:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002b24:	4b0b      	ldr	r3, [pc, #44]	@ (8002b54 <HAL_RCC_OscConfig+0x500>)
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6a1b      	ldr	r3, [r3, #32]
 8002b34:	429a      	cmp	r2, r3
 8002b36:	d106      	bne.n	8002b46 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b42:	429a      	cmp	r2, r3
 8002b44:	d001      	beq.n	8002b4a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002b46:	2301      	movs	r3, #1
 8002b48:	e000      	b.n	8002b4c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002b4a:	2300      	movs	r3, #0
}
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	3718      	adds	r7, #24
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bd80      	pop	{r7, pc}
 8002b54:	40021000 	.word	0x40021000

08002b58 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b084      	sub	sp, #16
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
 8002b60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d101      	bne.n	8002b6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	e0d0      	b.n	8002d0e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002b6c:	4b6a      	ldr	r3, [pc, #424]	@ (8002d18 <HAL_RCC_ClockConfig+0x1c0>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f003 0307 	and.w	r3, r3, #7
 8002b74:	683a      	ldr	r2, [r7, #0]
 8002b76:	429a      	cmp	r2, r3
 8002b78:	d910      	bls.n	8002b9c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b7a:	4b67      	ldr	r3, [pc, #412]	@ (8002d18 <HAL_RCC_ClockConfig+0x1c0>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f023 0207 	bic.w	r2, r3, #7
 8002b82:	4965      	ldr	r1, [pc, #404]	@ (8002d18 <HAL_RCC_ClockConfig+0x1c0>)
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	4313      	orrs	r3, r2
 8002b88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b8a:	4b63      	ldr	r3, [pc, #396]	@ (8002d18 <HAL_RCC_ClockConfig+0x1c0>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f003 0307 	and.w	r3, r3, #7
 8002b92:	683a      	ldr	r2, [r7, #0]
 8002b94:	429a      	cmp	r2, r3
 8002b96:	d001      	beq.n	8002b9c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	e0b8      	b.n	8002d0e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f003 0302 	and.w	r3, r3, #2
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d020      	beq.n	8002bea <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f003 0304 	and.w	r3, r3, #4
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d005      	beq.n	8002bc0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002bb4:	4b59      	ldr	r3, [pc, #356]	@ (8002d1c <HAL_RCC_ClockConfig+0x1c4>)
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	4a58      	ldr	r2, [pc, #352]	@ (8002d1c <HAL_RCC_ClockConfig+0x1c4>)
 8002bba:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002bbe:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f003 0308 	and.w	r3, r3, #8
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d005      	beq.n	8002bd8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002bcc:	4b53      	ldr	r3, [pc, #332]	@ (8002d1c <HAL_RCC_ClockConfig+0x1c4>)
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	4a52      	ldr	r2, [pc, #328]	@ (8002d1c <HAL_RCC_ClockConfig+0x1c4>)
 8002bd2:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002bd6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bd8:	4b50      	ldr	r3, [pc, #320]	@ (8002d1c <HAL_RCC_ClockConfig+0x1c4>)
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	689b      	ldr	r3, [r3, #8]
 8002be4:	494d      	ldr	r1, [pc, #308]	@ (8002d1c <HAL_RCC_ClockConfig+0x1c4>)
 8002be6:	4313      	orrs	r3, r2
 8002be8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f003 0301 	and.w	r3, r3, #1
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d040      	beq.n	8002c78 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	2b01      	cmp	r3, #1
 8002bfc:	d107      	bne.n	8002c0e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bfe:	4b47      	ldr	r3, [pc, #284]	@ (8002d1c <HAL_RCC_ClockConfig+0x1c4>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d115      	bne.n	8002c36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	e07f      	b.n	8002d0e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	2b02      	cmp	r3, #2
 8002c14:	d107      	bne.n	8002c26 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c16:	4b41      	ldr	r3, [pc, #260]	@ (8002d1c <HAL_RCC_ClockConfig+0x1c4>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d109      	bne.n	8002c36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	e073      	b.n	8002d0e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c26:	4b3d      	ldr	r3, [pc, #244]	@ (8002d1c <HAL_RCC_ClockConfig+0x1c4>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f003 0302 	and.w	r3, r3, #2
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d101      	bne.n	8002c36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c32:	2301      	movs	r3, #1
 8002c34:	e06b      	b.n	8002d0e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c36:	4b39      	ldr	r3, [pc, #228]	@ (8002d1c <HAL_RCC_ClockConfig+0x1c4>)
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	f023 0203 	bic.w	r2, r3, #3
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	4936      	ldr	r1, [pc, #216]	@ (8002d1c <HAL_RCC_ClockConfig+0x1c4>)
 8002c44:	4313      	orrs	r3, r2
 8002c46:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c48:	f7fe fda2 	bl	8001790 <HAL_GetTick>
 8002c4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c4e:	e00a      	b.n	8002c66 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c50:	f7fe fd9e 	bl	8001790 <HAL_GetTick>
 8002c54:	4602      	mov	r2, r0
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	1ad3      	subs	r3, r2, r3
 8002c5a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d901      	bls.n	8002c66 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c62:	2303      	movs	r3, #3
 8002c64:	e053      	b.n	8002d0e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c66:	4b2d      	ldr	r3, [pc, #180]	@ (8002d1c <HAL_RCC_ClockConfig+0x1c4>)
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	f003 020c 	and.w	r2, r3, #12
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	009b      	lsls	r3, r3, #2
 8002c74:	429a      	cmp	r2, r3
 8002c76:	d1eb      	bne.n	8002c50 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002c78:	4b27      	ldr	r3, [pc, #156]	@ (8002d18 <HAL_RCC_ClockConfig+0x1c0>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f003 0307 	and.w	r3, r3, #7
 8002c80:	683a      	ldr	r2, [r7, #0]
 8002c82:	429a      	cmp	r2, r3
 8002c84:	d210      	bcs.n	8002ca8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c86:	4b24      	ldr	r3, [pc, #144]	@ (8002d18 <HAL_RCC_ClockConfig+0x1c0>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f023 0207 	bic.w	r2, r3, #7
 8002c8e:	4922      	ldr	r1, [pc, #136]	@ (8002d18 <HAL_RCC_ClockConfig+0x1c0>)
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	4313      	orrs	r3, r2
 8002c94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c96:	4b20      	ldr	r3, [pc, #128]	@ (8002d18 <HAL_RCC_ClockConfig+0x1c0>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f003 0307 	and.w	r3, r3, #7
 8002c9e:	683a      	ldr	r2, [r7, #0]
 8002ca0:	429a      	cmp	r2, r3
 8002ca2:	d001      	beq.n	8002ca8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	e032      	b.n	8002d0e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f003 0304 	and.w	r3, r3, #4
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d008      	beq.n	8002cc6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002cb4:	4b19      	ldr	r3, [pc, #100]	@ (8002d1c <HAL_RCC_ClockConfig+0x1c4>)
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	68db      	ldr	r3, [r3, #12]
 8002cc0:	4916      	ldr	r1, [pc, #88]	@ (8002d1c <HAL_RCC_ClockConfig+0x1c4>)
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f003 0308 	and.w	r3, r3, #8
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d009      	beq.n	8002ce6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002cd2:	4b12      	ldr	r3, [pc, #72]	@ (8002d1c <HAL_RCC_ClockConfig+0x1c4>)
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	691b      	ldr	r3, [r3, #16]
 8002cde:	00db      	lsls	r3, r3, #3
 8002ce0:	490e      	ldr	r1, [pc, #56]	@ (8002d1c <HAL_RCC_ClockConfig+0x1c4>)
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002ce6:	f000 f821 	bl	8002d2c <HAL_RCC_GetSysClockFreq>
 8002cea:	4602      	mov	r2, r0
 8002cec:	4b0b      	ldr	r3, [pc, #44]	@ (8002d1c <HAL_RCC_ClockConfig+0x1c4>)
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	091b      	lsrs	r3, r3, #4
 8002cf2:	f003 030f 	and.w	r3, r3, #15
 8002cf6:	490a      	ldr	r1, [pc, #40]	@ (8002d20 <HAL_RCC_ClockConfig+0x1c8>)
 8002cf8:	5ccb      	ldrb	r3, [r1, r3]
 8002cfa:	fa22 f303 	lsr.w	r3, r2, r3
 8002cfe:	4a09      	ldr	r2, [pc, #36]	@ (8002d24 <HAL_RCC_ClockConfig+0x1cc>)
 8002d00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002d02:	4b09      	ldr	r3, [pc, #36]	@ (8002d28 <HAL_RCC_ClockConfig+0x1d0>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4618      	mov	r0, r3
 8002d08:	f7fe faf6 	bl	80012f8 <HAL_InitTick>

  return HAL_OK;
 8002d0c:	2300      	movs	r3, #0
}
 8002d0e:	4618      	mov	r0, r3
 8002d10:	3710      	adds	r7, #16
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bd80      	pop	{r7, pc}
 8002d16:	bf00      	nop
 8002d18:	40022000 	.word	0x40022000
 8002d1c:	40021000 	.word	0x40021000
 8002d20:	080092f8 	.word	0x080092f8
 8002d24:	20000400 	.word	0x20000400
 8002d28:	20000404 	.word	0x20000404

08002d2c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b087      	sub	sp, #28
 8002d30:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002d32:	2300      	movs	r3, #0
 8002d34:	60fb      	str	r3, [r7, #12]
 8002d36:	2300      	movs	r3, #0
 8002d38:	60bb      	str	r3, [r7, #8]
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	617b      	str	r3, [r7, #20]
 8002d3e:	2300      	movs	r3, #0
 8002d40:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002d42:	2300      	movs	r3, #0
 8002d44:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002d46:	4b1e      	ldr	r3, [pc, #120]	@ (8002dc0 <HAL_RCC_GetSysClockFreq+0x94>)
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	f003 030c 	and.w	r3, r3, #12
 8002d52:	2b04      	cmp	r3, #4
 8002d54:	d002      	beq.n	8002d5c <HAL_RCC_GetSysClockFreq+0x30>
 8002d56:	2b08      	cmp	r3, #8
 8002d58:	d003      	beq.n	8002d62 <HAL_RCC_GetSysClockFreq+0x36>
 8002d5a:	e027      	b.n	8002dac <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002d5c:	4b19      	ldr	r3, [pc, #100]	@ (8002dc4 <HAL_RCC_GetSysClockFreq+0x98>)
 8002d5e:	613b      	str	r3, [r7, #16]
      break;
 8002d60:	e027      	b.n	8002db2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	0c9b      	lsrs	r3, r3, #18
 8002d66:	f003 030f 	and.w	r3, r3, #15
 8002d6a:	4a17      	ldr	r2, [pc, #92]	@ (8002dc8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002d6c:	5cd3      	ldrb	r3, [r2, r3]
 8002d6e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d010      	beq.n	8002d9c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002d7a:	4b11      	ldr	r3, [pc, #68]	@ (8002dc0 <HAL_RCC_GetSysClockFreq+0x94>)
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	0c5b      	lsrs	r3, r3, #17
 8002d80:	f003 0301 	and.w	r3, r3, #1
 8002d84:	4a11      	ldr	r2, [pc, #68]	@ (8002dcc <HAL_RCC_GetSysClockFreq+0xa0>)
 8002d86:	5cd3      	ldrb	r3, [r2, r3]
 8002d88:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	4a0d      	ldr	r2, [pc, #52]	@ (8002dc4 <HAL_RCC_GetSysClockFreq+0x98>)
 8002d8e:	fb03 f202 	mul.w	r2, r3, r2
 8002d92:	68bb      	ldr	r3, [r7, #8]
 8002d94:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d98:	617b      	str	r3, [r7, #20]
 8002d9a:	e004      	b.n	8002da6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	4a0c      	ldr	r2, [pc, #48]	@ (8002dd0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002da0:	fb02 f303 	mul.w	r3, r2, r3
 8002da4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002da6:	697b      	ldr	r3, [r7, #20]
 8002da8:	613b      	str	r3, [r7, #16]
      break;
 8002daa:	e002      	b.n	8002db2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002dac:	4b05      	ldr	r3, [pc, #20]	@ (8002dc4 <HAL_RCC_GetSysClockFreq+0x98>)
 8002dae:	613b      	str	r3, [r7, #16]
      break;
 8002db0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002db2:	693b      	ldr	r3, [r7, #16]
}
 8002db4:	4618      	mov	r0, r3
 8002db6:	371c      	adds	r7, #28
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bc80      	pop	{r7}
 8002dbc:	4770      	bx	lr
 8002dbe:	bf00      	nop
 8002dc0:	40021000 	.word	0x40021000
 8002dc4:	007a1200 	.word	0x007a1200
 8002dc8:	08009310 	.word	0x08009310
 8002dcc:	08009320 	.word	0x08009320
 8002dd0:	003d0900 	.word	0x003d0900

08002dd4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002dd8:	4b02      	ldr	r3, [pc, #8]	@ (8002de4 <HAL_RCC_GetHCLKFreq+0x10>)
 8002dda:	681b      	ldr	r3, [r3, #0]
}
 8002ddc:	4618      	mov	r0, r3
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bc80      	pop	{r7}
 8002de2:	4770      	bx	lr
 8002de4:	20000400 	.word	0x20000400

08002de8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002dec:	f7ff fff2 	bl	8002dd4 <HAL_RCC_GetHCLKFreq>
 8002df0:	4602      	mov	r2, r0
 8002df2:	4b05      	ldr	r3, [pc, #20]	@ (8002e08 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	0a1b      	lsrs	r3, r3, #8
 8002df8:	f003 0307 	and.w	r3, r3, #7
 8002dfc:	4903      	ldr	r1, [pc, #12]	@ (8002e0c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002dfe:	5ccb      	ldrb	r3, [r1, r3]
 8002e00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e04:	4618      	mov	r0, r3
 8002e06:	bd80      	pop	{r7, pc}
 8002e08:	40021000 	.word	0x40021000
 8002e0c:	08009308 	.word	0x08009308

08002e10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002e14:	f7ff ffde 	bl	8002dd4 <HAL_RCC_GetHCLKFreq>
 8002e18:	4602      	mov	r2, r0
 8002e1a:	4b05      	ldr	r3, [pc, #20]	@ (8002e30 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	0adb      	lsrs	r3, r3, #11
 8002e20:	f003 0307 	and.w	r3, r3, #7
 8002e24:	4903      	ldr	r1, [pc, #12]	@ (8002e34 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e26:	5ccb      	ldrb	r3, [r1, r3]
 8002e28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	bd80      	pop	{r7, pc}
 8002e30:	40021000 	.word	0x40021000
 8002e34:	08009308 	.word	0x08009308

08002e38 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	b083      	sub	sp, #12
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
 8002e40:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	220f      	movs	r2, #15
 8002e46:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002e48:	4b11      	ldr	r3, [pc, #68]	@ (8002e90 <HAL_RCC_GetClockConfig+0x58>)
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	f003 0203 	and.w	r2, r3, #3
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002e54:	4b0e      	ldr	r3, [pc, #56]	@ (8002e90 <HAL_RCC_GetClockConfig+0x58>)
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002e60:	4b0b      	ldr	r3, [pc, #44]	@ (8002e90 <HAL_RCC_GetClockConfig+0x58>)
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002e6c:	4b08      	ldr	r3, [pc, #32]	@ (8002e90 <HAL_RCC_GetClockConfig+0x58>)
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	08db      	lsrs	r3, r3, #3
 8002e72:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002e7a:	4b06      	ldr	r3, [pc, #24]	@ (8002e94 <HAL_RCC_GetClockConfig+0x5c>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f003 0207 	and.w	r2, r3, #7
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8002e86:	bf00      	nop
 8002e88:	370c      	adds	r7, #12
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bc80      	pop	{r7}
 8002e8e:	4770      	bx	lr
 8002e90:	40021000 	.word	0x40021000
 8002e94:	40022000 	.word	0x40022000

08002e98 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	b085      	sub	sp, #20
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002ea0:	4b0a      	ldr	r3, [pc, #40]	@ (8002ecc <RCC_Delay+0x34>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a0a      	ldr	r2, [pc, #40]	@ (8002ed0 <RCC_Delay+0x38>)
 8002ea6:	fba2 2303 	umull	r2, r3, r2, r3
 8002eaa:	0a5b      	lsrs	r3, r3, #9
 8002eac:	687a      	ldr	r2, [r7, #4]
 8002eae:	fb02 f303 	mul.w	r3, r2, r3
 8002eb2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002eb4:	bf00      	nop
  }
  while (Delay --);
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	1e5a      	subs	r2, r3, #1
 8002eba:	60fa      	str	r2, [r7, #12]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d1f9      	bne.n	8002eb4 <RCC_Delay+0x1c>
}
 8002ec0:	bf00      	nop
 8002ec2:	bf00      	nop
 8002ec4:	3714      	adds	r7, #20
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bc80      	pop	{r7}
 8002eca:	4770      	bx	lr
 8002ecc:	20000400 	.word	0x20000400
 8002ed0:	10624dd3 	.word	0x10624dd3

08002ed4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b082      	sub	sp, #8
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d101      	bne.n	8002ee6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	e041      	b.n	8002f6a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002eec:	b2db      	uxtb	r3, r3
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d106      	bne.n	8002f00 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002efa:	6878      	ldr	r0, [r7, #4]
 8002efc:	f000 f839 	bl	8002f72 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2202      	movs	r2, #2
 8002f04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681a      	ldr	r2, [r3, #0]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	3304      	adds	r3, #4
 8002f10:	4619      	mov	r1, r3
 8002f12:	4610      	mov	r0, r2
 8002f14:	f000 f99c 	bl	8003250 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2201      	movs	r2, #1
 8002f1c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2201      	movs	r2, #1
 8002f24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2201      	movs	r2, #1
 8002f2c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2201      	movs	r2, #1
 8002f34:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2201      	movs	r2, #1
 8002f44:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2201      	movs	r2, #1
 8002f4c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2201      	movs	r2, #1
 8002f54:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2201      	movs	r2, #1
 8002f5c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2201      	movs	r2, #1
 8002f64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002f68:	2300      	movs	r3, #0
}
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	3708      	adds	r7, #8
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}

08002f72 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002f72:	b480      	push	{r7}
 8002f74:	b083      	sub	sp, #12
 8002f76:	af00      	add	r7, sp, #0
 8002f78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002f7a:	bf00      	nop
 8002f7c:	370c      	adds	r7, #12
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bc80      	pop	{r7}
 8002f82:	4770      	bx	lr

08002f84 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002f84:	b480      	push	{r7}
 8002f86:	b085      	sub	sp, #20
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f92:	b2db      	uxtb	r3, r3
 8002f94:	2b01      	cmp	r3, #1
 8002f96:	d001      	beq.n	8002f9c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002f98:	2301      	movs	r3, #1
 8002f9a:	e03a      	b.n	8003012 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2202      	movs	r2, #2
 8002fa0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	68da      	ldr	r2, [r3, #12]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f042 0201 	orr.w	r2, r2, #1
 8002fb2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a18      	ldr	r2, [pc, #96]	@ (800301c <HAL_TIM_Base_Start_IT+0x98>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d00e      	beq.n	8002fdc <HAL_TIM_Base_Start_IT+0x58>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002fc6:	d009      	beq.n	8002fdc <HAL_TIM_Base_Start_IT+0x58>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a14      	ldr	r2, [pc, #80]	@ (8003020 <HAL_TIM_Base_Start_IT+0x9c>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d004      	beq.n	8002fdc <HAL_TIM_Base_Start_IT+0x58>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4a13      	ldr	r2, [pc, #76]	@ (8003024 <HAL_TIM_Base_Start_IT+0xa0>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d111      	bne.n	8003000 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	689b      	ldr	r3, [r3, #8]
 8002fe2:	f003 0307 	and.w	r3, r3, #7
 8002fe6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	2b06      	cmp	r3, #6
 8002fec:	d010      	beq.n	8003010 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	681a      	ldr	r2, [r3, #0]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f042 0201 	orr.w	r2, r2, #1
 8002ffc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ffe:	e007      	b.n	8003010 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	681a      	ldr	r2, [r3, #0]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f042 0201 	orr.w	r2, r2, #1
 800300e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003010:	2300      	movs	r3, #0
}
 8003012:	4618      	mov	r0, r3
 8003014:	3714      	adds	r7, #20
 8003016:	46bd      	mov	sp, r7
 8003018:	bc80      	pop	{r7}
 800301a:	4770      	bx	lr
 800301c:	40012c00 	.word	0x40012c00
 8003020:	40000400 	.word	0x40000400
 8003024:	40000800 	.word	0x40000800

08003028 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b084      	sub	sp, #16
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	68db      	ldr	r3, [r3, #12]
 8003036:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	691b      	ldr	r3, [r3, #16]
 800303e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	f003 0302 	and.w	r3, r3, #2
 8003046:	2b00      	cmp	r3, #0
 8003048:	d020      	beq.n	800308c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	f003 0302 	and.w	r3, r3, #2
 8003050:	2b00      	cmp	r3, #0
 8003052:	d01b      	beq.n	800308c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f06f 0202 	mvn.w	r2, #2
 800305c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2201      	movs	r2, #1
 8003062:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	699b      	ldr	r3, [r3, #24]
 800306a:	f003 0303 	and.w	r3, r3, #3
 800306e:	2b00      	cmp	r3, #0
 8003070:	d003      	beq.n	800307a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003072:	6878      	ldr	r0, [r7, #4]
 8003074:	f000 f8d1 	bl	800321a <HAL_TIM_IC_CaptureCallback>
 8003078:	e005      	b.n	8003086 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800307a:	6878      	ldr	r0, [r7, #4]
 800307c:	f000 f8c4 	bl	8003208 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003080:	6878      	ldr	r0, [r7, #4]
 8003082:	f000 f8d3 	bl	800322c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2200      	movs	r2, #0
 800308a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800308c:	68bb      	ldr	r3, [r7, #8]
 800308e:	f003 0304 	and.w	r3, r3, #4
 8003092:	2b00      	cmp	r3, #0
 8003094:	d020      	beq.n	80030d8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	f003 0304 	and.w	r3, r3, #4
 800309c:	2b00      	cmp	r3, #0
 800309e:	d01b      	beq.n	80030d8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f06f 0204 	mvn.w	r2, #4
 80030a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2202      	movs	r2, #2
 80030ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	699b      	ldr	r3, [r3, #24]
 80030b6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d003      	beq.n	80030c6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030be:	6878      	ldr	r0, [r7, #4]
 80030c0:	f000 f8ab 	bl	800321a <HAL_TIM_IC_CaptureCallback>
 80030c4:	e005      	b.n	80030d2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030c6:	6878      	ldr	r0, [r7, #4]
 80030c8:	f000 f89e 	bl	8003208 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030cc:	6878      	ldr	r0, [r7, #4]
 80030ce:	f000 f8ad 	bl	800322c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2200      	movs	r2, #0
 80030d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80030d8:	68bb      	ldr	r3, [r7, #8]
 80030da:	f003 0308 	and.w	r3, r3, #8
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d020      	beq.n	8003124 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	f003 0308 	and.w	r3, r3, #8
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d01b      	beq.n	8003124 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f06f 0208 	mvn.w	r2, #8
 80030f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2204      	movs	r2, #4
 80030fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	69db      	ldr	r3, [r3, #28]
 8003102:	f003 0303 	and.w	r3, r3, #3
 8003106:	2b00      	cmp	r3, #0
 8003108:	d003      	beq.n	8003112 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800310a:	6878      	ldr	r0, [r7, #4]
 800310c:	f000 f885 	bl	800321a <HAL_TIM_IC_CaptureCallback>
 8003110:	e005      	b.n	800311e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003112:	6878      	ldr	r0, [r7, #4]
 8003114:	f000 f878 	bl	8003208 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003118:	6878      	ldr	r0, [r7, #4]
 800311a:	f000 f887 	bl	800322c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2200      	movs	r2, #0
 8003122:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	f003 0310 	and.w	r3, r3, #16
 800312a:	2b00      	cmp	r3, #0
 800312c:	d020      	beq.n	8003170 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	f003 0310 	and.w	r3, r3, #16
 8003134:	2b00      	cmp	r3, #0
 8003136:	d01b      	beq.n	8003170 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f06f 0210 	mvn.w	r2, #16
 8003140:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2208      	movs	r2, #8
 8003146:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	69db      	ldr	r3, [r3, #28]
 800314e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003152:	2b00      	cmp	r3, #0
 8003154:	d003      	beq.n	800315e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003156:	6878      	ldr	r0, [r7, #4]
 8003158:	f000 f85f 	bl	800321a <HAL_TIM_IC_CaptureCallback>
 800315c:	e005      	b.n	800316a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800315e:	6878      	ldr	r0, [r7, #4]
 8003160:	f000 f852 	bl	8003208 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003164:	6878      	ldr	r0, [r7, #4]
 8003166:	f000 f861 	bl	800322c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2200      	movs	r2, #0
 800316e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	f003 0301 	and.w	r3, r3, #1
 8003176:	2b00      	cmp	r3, #0
 8003178:	d00c      	beq.n	8003194 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	f003 0301 	and.w	r3, r3, #1
 8003180:	2b00      	cmp	r3, #0
 8003182:	d007      	beq.n	8003194 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f06f 0201 	mvn.w	r2, #1
 800318c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800318e:	6878      	ldr	r0, [r7, #4]
 8003190:	f7fd ff78 	bl	8001084 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800319a:	2b00      	cmp	r3, #0
 800319c:	d00c      	beq.n	80031b8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d007      	beq.n	80031b8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80031b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80031b2:	6878      	ldr	r0, [r7, #4]
 80031b4:	f000 f8c3 	bl	800333e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d00c      	beq.n	80031dc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d007      	beq.n	80031dc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80031d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80031d6:	6878      	ldr	r0, [r7, #4]
 80031d8:	f000 f831 	bl	800323e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80031dc:	68bb      	ldr	r3, [r7, #8]
 80031de:	f003 0320 	and.w	r3, r3, #32
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d00c      	beq.n	8003200 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	f003 0320 	and.w	r3, r3, #32
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d007      	beq.n	8003200 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f06f 0220 	mvn.w	r2, #32
 80031f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80031fa:	6878      	ldr	r0, [r7, #4]
 80031fc:	f000 f896 	bl	800332c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003200:	bf00      	nop
 8003202:	3710      	adds	r7, #16
 8003204:	46bd      	mov	sp, r7
 8003206:	bd80      	pop	{r7, pc}

08003208 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003208:	b480      	push	{r7}
 800320a:	b083      	sub	sp, #12
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003210:	bf00      	nop
 8003212:	370c      	adds	r7, #12
 8003214:	46bd      	mov	sp, r7
 8003216:	bc80      	pop	{r7}
 8003218:	4770      	bx	lr

0800321a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800321a:	b480      	push	{r7}
 800321c:	b083      	sub	sp, #12
 800321e:	af00      	add	r7, sp, #0
 8003220:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003222:	bf00      	nop
 8003224:	370c      	adds	r7, #12
 8003226:	46bd      	mov	sp, r7
 8003228:	bc80      	pop	{r7}
 800322a:	4770      	bx	lr

0800322c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800322c:	b480      	push	{r7}
 800322e:	b083      	sub	sp, #12
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003234:	bf00      	nop
 8003236:	370c      	adds	r7, #12
 8003238:	46bd      	mov	sp, r7
 800323a:	bc80      	pop	{r7}
 800323c:	4770      	bx	lr

0800323e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800323e:	b480      	push	{r7}
 8003240:	b083      	sub	sp, #12
 8003242:	af00      	add	r7, sp, #0
 8003244:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003246:	bf00      	nop
 8003248:	370c      	adds	r7, #12
 800324a:	46bd      	mov	sp, r7
 800324c:	bc80      	pop	{r7}
 800324e:	4770      	bx	lr

08003250 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003250:	b480      	push	{r7}
 8003252:	b085      	sub	sp, #20
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
 8003258:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	4a2f      	ldr	r2, [pc, #188]	@ (8003320 <TIM_Base_SetConfig+0xd0>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d00b      	beq.n	8003280 <TIM_Base_SetConfig+0x30>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800326e:	d007      	beq.n	8003280 <TIM_Base_SetConfig+0x30>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	4a2c      	ldr	r2, [pc, #176]	@ (8003324 <TIM_Base_SetConfig+0xd4>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d003      	beq.n	8003280 <TIM_Base_SetConfig+0x30>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	4a2b      	ldr	r2, [pc, #172]	@ (8003328 <TIM_Base_SetConfig+0xd8>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d108      	bne.n	8003292 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003286:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	68fa      	ldr	r2, [r7, #12]
 800328e:	4313      	orrs	r3, r2
 8003290:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	4a22      	ldr	r2, [pc, #136]	@ (8003320 <TIM_Base_SetConfig+0xd0>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d00b      	beq.n	80032b2 <TIM_Base_SetConfig+0x62>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80032a0:	d007      	beq.n	80032b2 <TIM_Base_SetConfig+0x62>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	4a1f      	ldr	r2, [pc, #124]	@ (8003324 <TIM_Base_SetConfig+0xd4>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d003      	beq.n	80032b2 <TIM_Base_SetConfig+0x62>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	4a1e      	ldr	r2, [pc, #120]	@ (8003328 <TIM_Base_SetConfig+0xd8>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d108      	bne.n	80032c4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80032b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	68db      	ldr	r3, [r3, #12]
 80032be:	68fa      	ldr	r2, [r7, #12]
 80032c0:	4313      	orrs	r3, r2
 80032c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	695b      	ldr	r3, [r3, #20]
 80032ce:	4313      	orrs	r3, r2
 80032d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	68fa      	ldr	r2, [r7, #12]
 80032d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	689a      	ldr	r2, [r3, #8]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	681a      	ldr	r2, [r3, #0]
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	4a0d      	ldr	r2, [pc, #52]	@ (8003320 <TIM_Base_SetConfig+0xd0>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d103      	bne.n	80032f8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	691a      	ldr	r2, [r3, #16]
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2201      	movs	r2, #1
 80032fc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	691b      	ldr	r3, [r3, #16]
 8003302:	f003 0301 	and.w	r3, r3, #1
 8003306:	2b00      	cmp	r3, #0
 8003308:	d005      	beq.n	8003316 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	691b      	ldr	r3, [r3, #16]
 800330e:	f023 0201 	bic.w	r2, r3, #1
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	611a      	str	r2, [r3, #16]
  }
}
 8003316:	bf00      	nop
 8003318:	3714      	adds	r7, #20
 800331a:	46bd      	mov	sp, r7
 800331c:	bc80      	pop	{r7}
 800331e:	4770      	bx	lr
 8003320:	40012c00 	.word	0x40012c00
 8003324:	40000400 	.word	0x40000400
 8003328:	40000800 	.word	0x40000800

0800332c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800332c:	b480      	push	{r7}
 800332e:	b083      	sub	sp, #12
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003334:	bf00      	nop
 8003336:	370c      	adds	r7, #12
 8003338:	46bd      	mov	sp, r7
 800333a:	bc80      	pop	{r7}
 800333c:	4770      	bx	lr

0800333e <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800333e:	b480      	push	{r7}
 8003340:	b083      	sub	sp, #12
 8003342:	af00      	add	r7, sp, #0
 8003344:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003346:	bf00      	nop
 8003348:	370c      	adds	r7, #12
 800334a:	46bd      	mov	sp, r7
 800334c:	bc80      	pop	{r7}
 800334e:	4770      	bx	lr

08003350 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b082      	sub	sp, #8
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d101      	bne.n	8003362 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800335e:	2301      	movs	r3, #1
 8003360:	e042      	b.n	80033e8 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003368:	b2db      	uxtb	r3, r3
 800336a:	2b00      	cmp	r3, #0
 800336c:	d106      	bne.n	800337c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2200      	movs	r2, #0
 8003372:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003376:	6878      	ldr	r0, [r7, #4]
 8003378:	f7fe f95e 	bl	8001638 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2224      	movs	r2, #36	@ 0x24
 8003380:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	68da      	ldr	r2, [r3, #12]
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003392:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003394:	6878      	ldr	r0, [r7, #4]
 8003396:	f000 f971 	bl	800367c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	691a      	ldr	r2, [r3, #16]
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80033a8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	695a      	ldr	r2, [r3, #20]
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80033b8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	68da      	ldr	r2, [r3, #12]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80033c8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2200      	movs	r2, #0
 80033ce:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2220      	movs	r2, #32
 80033d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2220      	movs	r2, #32
 80033dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2200      	movs	r2, #0
 80033e4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80033e6:	2300      	movs	r3, #0
}
 80033e8:	4618      	mov	r0, r3
 80033ea:	3708      	adds	r7, #8
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bd80      	pop	{r7, pc}

080033f0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b08a      	sub	sp, #40	@ 0x28
 80033f4:	af02      	add	r7, sp, #8
 80033f6:	60f8      	str	r0, [r7, #12]
 80033f8:	60b9      	str	r1, [r7, #8]
 80033fa:	603b      	str	r3, [r7, #0]
 80033fc:	4613      	mov	r3, r2
 80033fe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003400:	2300      	movs	r3, #0
 8003402:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800340a:	b2db      	uxtb	r3, r3
 800340c:	2b20      	cmp	r3, #32
 800340e:	d175      	bne.n	80034fc <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003410:	68bb      	ldr	r3, [r7, #8]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d002      	beq.n	800341c <HAL_UART_Transmit+0x2c>
 8003416:	88fb      	ldrh	r3, [r7, #6]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d101      	bne.n	8003420 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800341c:	2301      	movs	r3, #1
 800341e:	e06e      	b.n	80034fe <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	2200      	movs	r2, #0
 8003424:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	2221      	movs	r2, #33	@ 0x21
 800342a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800342e:	f7fe f9af 	bl	8001790 <HAL_GetTick>
 8003432:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	88fa      	ldrh	r2, [r7, #6]
 8003438:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	88fa      	ldrh	r2, [r7, #6]
 800343e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	689b      	ldr	r3, [r3, #8]
 8003444:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003448:	d108      	bne.n	800345c <HAL_UART_Transmit+0x6c>
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	691b      	ldr	r3, [r3, #16]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d104      	bne.n	800345c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003452:	2300      	movs	r3, #0
 8003454:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003456:	68bb      	ldr	r3, [r7, #8]
 8003458:	61bb      	str	r3, [r7, #24]
 800345a:	e003      	b.n	8003464 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003460:	2300      	movs	r3, #0
 8003462:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003464:	e02e      	b.n	80034c4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	9300      	str	r3, [sp, #0]
 800346a:	697b      	ldr	r3, [r7, #20]
 800346c:	2200      	movs	r2, #0
 800346e:	2180      	movs	r1, #128	@ 0x80
 8003470:	68f8      	ldr	r0, [r7, #12]
 8003472:	f000 f848 	bl	8003506 <UART_WaitOnFlagUntilTimeout>
 8003476:	4603      	mov	r3, r0
 8003478:	2b00      	cmp	r3, #0
 800347a:	d005      	beq.n	8003488 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	2220      	movs	r2, #32
 8003480:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003484:	2303      	movs	r3, #3
 8003486:	e03a      	b.n	80034fe <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003488:	69fb      	ldr	r3, [r7, #28]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d10b      	bne.n	80034a6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800348e:	69bb      	ldr	r3, [r7, #24]
 8003490:	881b      	ldrh	r3, [r3, #0]
 8003492:	461a      	mov	r2, r3
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800349c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800349e:	69bb      	ldr	r3, [r7, #24]
 80034a0:	3302      	adds	r3, #2
 80034a2:	61bb      	str	r3, [r7, #24]
 80034a4:	e007      	b.n	80034b6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80034a6:	69fb      	ldr	r3, [r7, #28]
 80034a8:	781a      	ldrb	r2, [r3, #0]
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80034b0:	69fb      	ldr	r3, [r7, #28]
 80034b2:	3301      	adds	r3, #1
 80034b4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80034ba:	b29b      	uxth	r3, r3
 80034bc:	3b01      	subs	r3, #1
 80034be:	b29a      	uxth	r2, r3
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80034c8:	b29b      	uxth	r3, r3
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d1cb      	bne.n	8003466 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	9300      	str	r3, [sp, #0]
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	2200      	movs	r2, #0
 80034d6:	2140      	movs	r1, #64	@ 0x40
 80034d8:	68f8      	ldr	r0, [r7, #12]
 80034da:	f000 f814 	bl	8003506 <UART_WaitOnFlagUntilTimeout>
 80034de:	4603      	mov	r3, r0
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d005      	beq.n	80034f0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	2220      	movs	r2, #32
 80034e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80034ec:	2303      	movs	r3, #3
 80034ee:	e006      	b.n	80034fe <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	2220      	movs	r2, #32
 80034f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80034f8:	2300      	movs	r3, #0
 80034fa:	e000      	b.n	80034fe <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80034fc:	2302      	movs	r3, #2
  }
}
 80034fe:	4618      	mov	r0, r3
 8003500:	3720      	adds	r7, #32
 8003502:	46bd      	mov	sp, r7
 8003504:	bd80      	pop	{r7, pc}

08003506 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003506:	b580      	push	{r7, lr}
 8003508:	b086      	sub	sp, #24
 800350a:	af00      	add	r7, sp, #0
 800350c:	60f8      	str	r0, [r7, #12]
 800350e:	60b9      	str	r1, [r7, #8]
 8003510:	603b      	str	r3, [r7, #0]
 8003512:	4613      	mov	r3, r2
 8003514:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003516:	e03b      	b.n	8003590 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003518:	6a3b      	ldr	r3, [r7, #32]
 800351a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800351e:	d037      	beq.n	8003590 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003520:	f7fe f936 	bl	8001790 <HAL_GetTick>
 8003524:	4602      	mov	r2, r0
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	1ad3      	subs	r3, r2, r3
 800352a:	6a3a      	ldr	r2, [r7, #32]
 800352c:	429a      	cmp	r2, r3
 800352e:	d302      	bcc.n	8003536 <UART_WaitOnFlagUntilTimeout+0x30>
 8003530:	6a3b      	ldr	r3, [r7, #32]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d101      	bne.n	800353a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003536:	2303      	movs	r3, #3
 8003538:	e03a      	b.n	80035b0 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	68db      	ldr	r3, [r3, #12]
 8003540:	f003 0304 	and.w	r3, r3, #4
 8003544:	2b00      	cmp	r3, #0
 8003546:	d023      	beq.n	8003590 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	2b80      	cmp	r3, #128	@ 0x80
 800354c:	d020      	beq.n	8003590 <UART_WaitOnFlagUntilTimeout+0x8a>
 800354e:	68bb      	ldr	r3, [r7, #8]
 8003550:	2b40      	cmp	r3, #64	@ 0x40
 8003552:	d01d      	beq.n	8003590 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f003 0308 	and.w	r3, r3, #8
 800355e:	2b08      	cmp	r3, #8
 8003560:	d116      	bne.n	8003590 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003562:	2300      	movs	r3, #0
 8003564:	617b      	str	r3, [r7, #20]
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	617b      	str	r3, [r7, #20]
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	617b      	str	r3, [r7, #20]
 8003576:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003578:	68f8      	ldr	r0, [r7, #12]
 800357a:	f000 f81d 	bl	80035b8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	2208      	movs	r2, #8
 8003582:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	2200      	movs	r2, #0
 8003588:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800358c:	2301      	movs	r3, #1
 800358e:	e00f      	b.n	80035b0 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	681a      	ldr	r2, [r3, #0]
 8003596:	68bb      	ldr	r3, [r7, #8]
 8003598:	4013      	ands	r3, r2
 800359a:	68ba      	ldr	r2, [r7, #8]
 800359c:	429a      	cmp	r2, r3
 800359e:	bf0c      	ite	eq
 80035a0:	2301      	moveq	r3, #1
 80035a2:	2300      	movne	r3, #0
 80035a4:	b2db      	uxtb	r3, r3
 80035a6:	461a      	mov	r2, r3
 80035a8:	79fb      	ldrb	r3, [r7, #7]
 80035aa:	429a      	cmp	r2, r3
 80035ac:	d0b4      	beq.n	8003518 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80035ae:	2300      	movs	r3, #0
}
 80035b0:	4618      	mov	r0, r3
 80035b2:	3718      	adds	r7, #24
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bd80      	pop	{r7, pc}

080035b8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80035b8:	b480      	push	{r7}
 80035ba:	b095      	sub	sp, #84	@ 0x54
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	330c      	adds	r3, #12
 80035c6:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035ca:	e853 3f00 	ldrex	r3, [r3]
 80035ce:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80035d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035d2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80035d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	330c      	adds	r3, #12
 80035de:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80035e0:	643a      	str	r2, [r7, #64]	@ 0x40
 80035e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035e4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80035e6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80035e8:	e841 2300 	strex	r3, r2, [r1]
 80035ec:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80035ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d1e5      	bne.n	80035c0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	3314      	adds	r3, #20
 80035fa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035fc:	6a3b      	ldr	r3, [r7, #32]
 80035fe:	e853 3f00 	ldrex	r3, [r3]
 8003602:	61fb      	str	r3, [r7, #28]
   return(result);
 8003604:	69fb      	ldr	r3, [r7, #28]
 8003606:	f023 0301 	bic.w	r3, r3, #1
 800360a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	3314      	adds	r3, #20
 8003612:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003614:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003616:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003618:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800361a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800361c:	e841 2300 	strex	r3, r2, [r1]
 8003620:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003622:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003624:	2b00      	cmp	r3, #0
 8003626:	d1e5      	bne.n	80035f4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800362c:	2b01      	cmp	r3, #1
 800362e:	d119      	bne.n	8003664 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	330c      	adds	r3, #12
 8003636:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	e853 3f00 	ldrex	r3, [r3]
 800363e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	f023 0310 	bic.w	r3, r3, #16
 8003646:	647b      	str	r3, [r7, #68]	@ 0x44
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	330c      	adds	r3, #12
 800364e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003650:	61ba      	str	r2, [r7, #24]
 8003652:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003654:	6979      	ldr	r1, [r7, #20]
 8003656:	69ba      	ldr	r2, [r7, #24]
 8003658:	e841 2300 	strex	r3, r2, [r1]
 800365c:	613b      	str	r3, [r7, #16]
   return(result);
 800365e:	693b      	ldr	r3, [r7, #16]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d1e5      	bne.n	8003630 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2220      	movs	r2, #32
 8003668:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2200      	movs	r2, #0
 8003670:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003672:	bf00      	nop
 8003674:	3754      	adds	r7, #84	@ 0x54
 8003676:	46bd      	mov	sp, r7
 8003678:	bc80      	pop	{r7}
 800367a:	4770      	bx	lr

0800367c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b084      	sub	sp, #16
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	691b      	ldr	r3, [r3, #16]
 800368a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	68da      	ldr	r2, [r3, #12]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	430a      	orrs	r2, r1
 8003698:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	689a      	ldr	r2, [r3, #8]
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	691b      	ldr	r3, [r3, #16]
 80036a2:	431a      	orrs	r2, r3
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	695b      	ldr	r3, [r3, #20]
 80036a8:	4313      	orrs	r3, r2
 80036aa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	68db      	ldr	r3, [r3, #12]
 80036b2:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80036b6:	f023 030c 	bic.w	r3, r3, #12
 80036ba:	687a      	ldr	r2, [r7, #4]
 80036bc:	6812      	ldr	r2, [r2, #0]
 80036be:	68b9      	ldr	r1, [r7, #8]
 80036c0:	430b      	orrs	r3, r1
 80036c2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	695b      	ldr	r3, [r3, #20]
 80036ca:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	699a      	ldr	r2, [r3, #24]
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	430a      	orrs	r2, r1
 80036d8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4a2c      	ldr	r2, [pc, #176]	@ (8003790 <UART_SetConfig+0x114>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d103      	bne.n	80036ec <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80036e4:	f7ff fb94 	bl	8002e10 <HAL_RCC_GetPCLK2Freq>
 80036e8:	60f8      	str	r0, [r7, #12]
 80036ea:	e002      	b.n	80036f2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80036ec:	f7ff fb7c 	bl	8002de8 <HAL_RCC_GetPCLK1Freq>
 80036f0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80036f2:	68fa      	ldr	r2, [r7, #12]
 80036f4:	4613      	mov	r3, r2
 80036f6:	009b      	lsls	r3, r3, #2
 80036f8:	4413      	add	r3, r2
 80036fa:	009a      	lsls	r2, r3, #2
 80036fc:	441a      	add	r2, r3
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	009b      	lsls	r3, r3, #2
 8003704:	fbb2 f3f3 	udiv	r3, r2, r3
 8003708:	4a22      	ldr	r2, [pc, #136]	@ (8003794 <UART_SetConfig+0x118>)
 800370a:	fba2 2303 	umull	r2, r3, r2, r3
 800370e:	095b      	lsrs	r3, r3, #5
 8003710:	0119      	lsls	r1, r3, #4
 8003712:	68fa      	ldr	r2, [r7, #12]
 8003714:	4613      	mov	r3, r2
 8003716:	009b      	lsls	r3, r3, #2
 8003718:	4413      	add	r3, r2
 800371a:	009a      	lsls	r2, r3, #2
 800371c:	441a      	add	r2, r3
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	009b      	lsls	r3, r3, #2
 8003724:	fbb2 f2f3 	udiv	r2, r2, r3
 8003728:	4b1a      	ldr	r3, [pc, #104]	@ (8003794 <UART_SetConfig+0x118>)
 800372a:	fba3 0302 	umull	r0, r3, r3, r2
 800372e:	095b      	lsrs	r3, r3, #5
 8003730:	2064      	movs	r0, #100	@ 0x64
 8003732:	fb00 f303 	mul.w	r3, r0, r3
 8003736:	1ad3      	subs	r3, r2, r3
 8003738:	011b      	lsls	r3, r3, #4
 800373a:	3332      	adds	r3, #50	@ 0x32
 800373c:	4a15      	ldr	r2, [pc, #84]	@ (8003794 <UART_SetConfig+0x118>)
 800373e:	fba2 2303 	umull	r2, r3, r2, r3
 8003742:	095b      	lsrs	r3, r3, #5
 8003744:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003748:	4419      	add	r1, r3
 800374a:	68fa      	ldr	r2, [r7, #12]
 800374c:	4613      	mov	r3, r2
 800374e:	009b      	lsls	r3, r3, #2
 8003750:	4413      	add	r3, r2
 8003752:	009a      	lsls	r2, r3, #2
 8003754:	441a      	add	r2, r3
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	009b      	lsls	r3, r3, #2
 800375c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003760:	4b0c      	ldr	r3, [pc, #48]	@ (8003794 <UART_SetConfig+0x118>)
 8003762:	fba3 0302 	umull	r0, r3, r3, r2
 8003766:	095b      	lsrs	r3, r3, #5
 8003768:	2064      	movs	r0, #100	@ 0x64
 800376a:	fb00 f303 	mul.w	r3, r0, r3
 800376e:	1ad3      	subs	r3, r2, r3
 8003770:	011b      	lsls	r3, r3, #4
 8003772:	3332      	adds	r3, #50	@ 0x32
 8003774:	4a07      	ldr	r2, [pc, #28]	@ (8003794 <UART_SetConfig+0x118>)
 8003776:	fba2 2303 	umull	r2, r3, r2, r3
 800377a:	095b      	lsrs	r3, r3, #5
 800377c:	f003 020f 	and.w	r2, r3, #15
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	440a      	add	r2, r1
 8003786:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003788:	bf00      	nop
 800378a:	3710      	adds	r7, #16
 800378c:	46bd      	mov	sp, r7
 800378e:	bd80      	pop	{r7, pc}
 8003790:	40013800 	.word	0x40013800
 8003794:	51eb851f 	.word	0x51eb851f

08003798 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8003798:	b480      	push	{r7}
 800379a:	b085      	sub	sp, #20
 800379c:	af00      	add	r7, sp, #0
 800379e:	60f8      	str	r0, [r7, #12]
 80037a0:	60b9      	str	r1, [r7, #8]
 80037a2:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */
    pxTopOfStack--;                                                      /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	3b04      	subs	r3, #4
 80037a8:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80037b0:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	3b04      	subs	r3, #4
 80037b6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80037b8:	68bb      	ldr	r3, [r7, #8]
 80037ba:	f023 0201 	bic.w	r2, r3, #1
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	3b04      	subs	r3, #4
 80037c6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80037c8:	4a08      	ldr	r2, [pc, #32]	@ (80037ec <pxPortInitialiseStack+0x54>)
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 5;                                                   /* R12, R3, R2 and R1. */
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	3b14      	subs	r3, #20
 80037d2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters;                        /* R0 */
 80037d4:	687a      	ldr	r2, [r7, #4]
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 8;                                                   /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	3b20      	subs	r3, #32
 80037de:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80037e0:	68fb      	ldr	r3, [r7, #12]
}
 80037e2:	4618      	mov	r0, r3
 80037e4:	3714      	adds	r7, #20
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bc80      	pop	{r7}
 80037ea:	4770      	bx	lr
 80037ec:	080037f1 	.word	0x080037f1

080037f0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80037f0:	b480      	push	{r7}
 80037f2:	b083      	sub	sp, #12
 80037f4:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0UL;
 80037f6:	2300      	movs	r3, #0
 80037f8:	603b      	str	r3, [r7, #0]

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
    uint32_t ulNewBASEPRI;

    __asm volatile
 80037fa:	f04f 03bf 	mov.w	r3, #191	@ 0xbf
 80037fe:	f383 8811 	msr	BASEPRI, r3
 8003802:	f3bf 8f6f 	isb	sy
 8003806:	f3bf 8f4f 	dsb	sy
 800380a:	607b      	str	r3, [r7, #4]
        "   msr basepri, %0                                         \n" \
        "   isb                                                     \n" \
        "   dsb                                                     \n" \
        : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );
}
 800380c:	bf00      	nop
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800380e:	bf00      	nop
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d0fc      	beq.n	8003810 <prvTaskExitError+0x20>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8003816:	bf00      	nop
 8003818:	bf00      	nop
 800381a:	370c      	adds	r7, #12
 800381c:	46bd      	mov	sp, r7
 800381e:	bc80      	pop	{r7}
 8003820:	4770      	bx	lr
	...

08003830 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8003830:	4b07      	ldr	r3, [pc, #28]	@ (8003850 <pxCurrentTCBConst2>)
 8003832:	6819      	ldr	r1, [r3, #0]
 8003834:	6808      	ldr	r0, [r1, #0]
 8003836:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800383a:	f380 8809 	msr	PSP, r0
 800383e:	f3bf 8f6f 	isb	sy
 8003842:	f04f 0000 	mov.w	r0, #0
 8003846:	f380 8811 	msr	BASEPRI, r0
 800384a:	f04e 0e0d 	orr.w	lr, lr, #13
 800384e:	4770      	bx	lr

08003850 <pxCurrentTCBConst2>:
 8003850:	20002f14 	.word	0x20002f14
        "   bx r14                          \n"
        "                                   \n"
        "   .align 4                        \n"
        "pxCurrentTCBConst2: .word pxCurrentTCB             \n"
        );
}
 8003854:	bf00      	nop
 8003856:	bf00      	nop

08003858 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
    __asm volatile (
 8003858:	4806      	ldr	r0, [pc, #24]	@ (8003874 <prvPortStartFirstTask+0x1c>)
 800385a:	6800      	ldr	r0, [r0, #0]
 800385c:	6800      	ldr	r0, [r0, #0]
 800385e:	f380 8808 	msr	MSP, r0
 8003862:	b662      	cpsie	i
 8003864:	b661      	cpsie	f
 8003866:	f3bf 8f4f 	dsb	sy
 800386a:	f3bf 8f6f 	isb	sy
 800386e:	df00      	svc	0
 8003870:	bf00      	nop
 8003872:	0000      	.short	0x0000
 8003874:	e000ed08 	.word	0xe000ed08
        " isb                   \n"
        " svc 0                 \n" /* System call to start first task. */
        " nop                   \n"
        " .ltorg                \n"
        );
}
 8003878:	bf00      	nop
 800387a:	bf00      	nop

0800387c <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b082      	sub	sp, #8
 8003880:	af00      	add	r7, sp, #0
     * configCHECK_HANDLER_INSTALLATION to 0 in their FreeRTOSConfig.h. Direct
     * routing, which is validated here when configCHECK_HANDLER_INSTALLATION
     * is 1, should be preferred when possible. */
    #if ( configCHECK_HANDLER_INSTALLATION == 1 )
    {
        const portISR_t * const pxVectorTable = portSCB_VTOR_REG;
 8003882:	4b11      	ldr	r3, [pc, #68]	@ (80038c8 <xPortStartScheduler+0x4c>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	607b      	str	r3, [r7, #4]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts, and make SVCall
     * the highest priority. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8003888:	4b10      	ldr	r3, [pc, #64]	@ (80038cc <xPortStartScheduler+0x50>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a0f      	ldr	r2, [pc, #60]	@ (80038cc <xPortStartScheduler+0x50>)
 800388e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003892:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8003894:	4b0d      	ldr	r3, [pc, #52]	@ (80038cc <xPortStartScheduler+0x50>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a0c      	ldr	r2, [pc, #48]	@ (80038cc <xPortStartScheduler+0x50>)
 800389a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800389e:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR2_REG = 0;
 80038a0:	4b0b      	ldr	r3, [pc, #44]	@ (80038d0 <xPortStartScheduler+0x54>)
 80038a2:	2200      	movs	r2, #0
 80038a4:	601a      	str	r2, [r3, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80038a6:	f000 f891 	bl	80039cc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80038aa:	4b0a      	ldr	r3, [pc, #40]	@ (80038d4 <xPortStartScheduler+0x58>)
 80038ac:	2200      	movs	r2, #0
 80038ae:	601a      	str	r2, [r3, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80038b0:	f7ff ffd2 	bl	8003858 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80038b4:	f000 ff86 	bl	80047c4 <vTaskSwitchContext>
    prvTaskExitError();
 80038b8:	f7ff ff9a 	bl	80037f0 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80038bc:	2300      	movs	r3, #0
}
 80038be:	4618      	mov	r0, r3
 80038c0:	3708      	adds	r7, #8
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bd80      	pop	{r7, pc}
 80038c6:	bf00      	nop
 80038c8:	e000ed08 	.word	0xe000ed08
 80038cc:	e000ed20 	.word	0xe000ed20
 80038d0:	e000ed1c 	.word	0xe000ed1c
 80038d4:	2000040c 	.word	0x2000040c

080038d8 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80038d8:	b480      	push	{r7}
 80038da:	b083      	sub	sp, #12
 80038dc:	af00      	add	r7, sp, #0
    __asm volatile
 80038de:	f04f 03bf 	mov.w	r3, #191	@ 0xbf
 80038e2:	f383 8811 	msr	BASEPRI, r3
 80038e6:	f3bf 8f6f 	isb	sy
 80038ea:	f3bf 8f4f 	dsb	sy
 80038ee:	607b      	str	r3, [r7, #4]
}
 80038f0:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80038f2:	4b05      	ldr	r3, [pc, #20]	@ (8003908 <vPortEnterCritical+0x30>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	3301      	adds	r3, #1
 80038f8:	4a03      	ldr	r2, [pc, #12]	@ (8003908 <vPortEnterCritical+0x30>)
 80038fa:	6013      	str	r3, [r2, #0]
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
    }
}
 80038fc:	bf00      	nop
 80038fe:	370c      	adds	r7, #12
 8003900:	46bd      	mov	sp, r7
 8003902:	bc80      	pop	{r7}
 8003904:	4770      	bx	lr
 8003906:	bf00      	nop
 8003908:	2000040c 	.word	0x2000040c

0800390c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800390c:	b480      	push	{r7}
 800390e:	b083      	sub	sp, #12
 8003910:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
    uxCriticalNesting--;
 8003912:	4b0a      	ldr	r3, [pc, #40]	@ (800393c <vPortExitCritical+0x30>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	3b01      	subs	r3, #1
 8003918:	4a08      	ldr	r2, [pc, #32]	@ (800393c <vPortExitCritical+0x30>)
 800391a:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 800391c:	4b07      	ldr	r3, [pc, #28]	@ (800393c <vPortExitCritical+0x30>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d105      	bne.n	8003930 <vPortExitCritical+0x24>
 8003924:	2300      	movs	r3, #0
 8003926:	607b      	str	r3, [r7, #4]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
    __asm volatile
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	f383 8811 	msr	BASEPRI, r3
    (
        "   msr basepri, %0 " ::"r" ( ulNewMaskValue ) : "memory"
    );
}
 800392e:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8003930:	bf00      	nop
 8003932:	370c      	adds	r7, #12
 8003934:	46bd      	mov	sp, r7
 8003936:	bc80      	pop	{r7}
 8003938:	4770      	bx	lr
 800393a:	bf00      	nop
 800393c:	2000040c 	.word	0x2000040c

08003940 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8003940:	f3ef 8009 	mrs	r0, PSP
 8003944:	f3bf 8f6f 	isb	sy
 8003948:	4b0d      	ldr	r3, [pc, #52]	@ (8003980 <pxCurrentTCBConst>)
 800394a:	681a      	ldr	r2, [r3, #0]
 800394c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003950:	6010      	str	r0, [r2, #0]
 8003952:	e92d 4008 	stmdb	sp!, {r3, lr}
 8003956:	f04f 00bf 	mov.w	r0, #191	@ 0xbf
 800395a:	f380 8811 	msr	BASEPRI, r0
 800395e:	f000 ff31 	bl	80047c4 <vTaskSwitchContext>
 8003962:	f04f 0000 	mov.w	r0, #0
 8003966:	f380 8811 	msr	BASEPRI, r0
 800396a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800396e:	6819      	ldr	r1, [r3, #0]
 8003970:	6808      	ldr	r0, [r1, #0]
 8003972:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003976:	f380 8809 	msr	PSP, r0
 800397a:	f3bf 8f6f 	isb	sy
 800397e:	4770      	bx	lr

08003980 <pxCurrentTCBConst>:
 8003980:	20002f14 	.word	0x20002f14
        "                                       \n"
        "   .align 4                            \n"
        "pxCurrentTCBConst: .word pxCurrentTCB  \n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8003984:	bf00      	nop
 8003986:	bf00      	nop

08003988 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b082      	sub	sp, #8
 800398c:	af00      	add	r7, sp, #0
    __asm volatile
 800398e:	f04f 03bf 	mov.w	r3, #191	@ 0xbf
 8003992:	f383 8811 	msr	BASEPRI, r3
 8003996:	f3bf 8f6f 	isb	sy
 800399a:	f3bf 8f4f 	dsb	sy
 800399e:	607b      	str	r3, [r7, #4]
}
 80039a0:	bf00      	nop
     * known. */
    portDISABLE_INTERRUPTS();
    traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80039a2:	f000 fe07 	bl	80045b4 <xTaskIncrementTick>
 80039a6:	4603      	mov	r3, r0
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d003      	beq.n	80039b4 <xPortSysTickHandler+0x2c>
        {
            traceISR_EXIT_TO_SCHEDULER();

            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80039ac:	4b06      	ldr	r3, [pc, #24]	@ (80039c8 <xPortSysTickHandler+0x40>)
 80039ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80039b2:	601a      	str	r2, [r3, #0]
 80039b4:	2300      	movs	r3, #0
 80039b6:	603b      	str	r3, [r7, #0]
    __asm volatile
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	f383 8811 	msr	BASEPRI, r3
}
 80039be:	bf00      	nop
        {
            traceISR_EXIT();
        }
    }
    portENABLE_INTERRUPTS();
}
 80039c0:	bf00      	nop
 80039c2:	3708      	adds	r7, #8
 80039c4:	46bd      	mov	sp, r7
 80039c6:	bd80      	pop	{r7, pc}
 80039c8:	e000ed04 	.word	0xe000ed04

080039cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80039cc:	b480      	push	{r7}
 80039ce:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80039d0:	4b07      	ldr	r3, [pc, #28]	@ (80039f0 <vPortSetupTimerInterrupt+0x24>)
 80039d2:	2200      	movs	r2, #0
 80039d4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80039d6:	4b07      	ldr	r3, [pc, #28]	@ (80039f4 <vPortSetupTimerInterrupt+0x28>)
 80039d8:	2200      	movs	r2, #0
 80039da:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80039dc:	4b06      	ldr	r3, [pc, #24]	@ (80039f8 <vPortSetupTimerInterrupt+0x2c>)
 80039de:	4a07      	ldr	r2, [pc, #28]	@ (80039fc <vPortSetupTimerInterrupt+0x30>)
 80039e0:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80039e2:	4b03      	ldr	r3, [pc, #12]	@ (80039f0 <vPortSetupTimerInterrupt+0x24>)
 80039e4:	2207      	movs	r2, #7
 80039e6:	601a      	str	r2, [r3, #0]
}
 80039e8:	bf00      	nop
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bc80      	pop	{r7}
 80039ee:	4770      	bx	lr
 80039f0:	e000e010 	.word	0xe000e010
 80039f4:	e000e018 	.word	0xe000e018
 80039f8:	e000e014 	.word	0xe000e014
 80039fc:	0001193f 	.word	0x0001193f

08003a00 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = ( size_t ) 0U;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b088      	sub	sp, #32
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8003a08:	2300      	movs	r3, #0
 8003a0a:	617b      	str	r3, [r7, #20]
    size_t xAdditionalRequiredSize;

    if( xWantedSize > 0 )
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d022      	beq.n	8003a58 <pvPortMalloc+0x58>
    {
        /* The wanted size must be increased so it can contain a BlockLink_t
         * structure in addition to the requested amount of bytes. */
        if( heapADD_WILL_OVERFLOW( xWantedSize, xHeapStructSize ) == 0 )
 8003a12:	2308      	movs	r3, #8
 8003a14:	43db      	mvns	r3, r3
 8003a16:	687a      	ldr	r2, [r7, #4]
 8003a18:	429a      	cmp	r2, r3
 8003a1a:	d81b      	bhi.n	8003a54 <pvPortMalloc+0x54>
        {
            xWantedSize += xHeapStructSize;
 8003a1c:	2208      	movs	r2, #8
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	4413      	add	r3, r2
 8003a22:	607b      	str	r3, [r7, #4]

            /* Ensure that blocks are always aligned to the required number
             * of bytes. */
            if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	f003 0307 	and.w	r3, r3, #7
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d014      	beq.n	8003a58 <pvPortMalloc+0x58>
            {
                /* Byte alignment required. */
                xAdditionalRequiredSize = portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	f003 0307 	and.w	r3, r3, #7
 8003a34:	f1c3 0308 	rsb	r3, r3, #8
 8003a38:	613b      	str	r3, [r7, #16]

                if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8003a3a:	693b      	ldr	r3, [r7, #16]
 8003a3c:	43db      	mvns	r3, r3
 8003a3e:	687a      	ldr	r2, [r7, #4]
 8003a40:	429a      	cmp	r2, r3
 8003a42:	d804      	bhi.n	8003a4e <pvPortMalloc+0x4e>
                {
                    xWantedSize += xAdditionalRequiredSize;
 8003a44:	687a      	ldr	r2, [r7, #4]
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	4413      	add	r3, r2
 8003a4a:	607b      	str	r3, [r7, #4]
 8003a4c:	e004      	b.n	8003a58 <pvPortMalloc+0x58>
                }
                else
                {
                    xWantedSize = 0;
 8003a4e:	2300      	movs	r3, #0
 8003a50:	607b      	str	r3, [r7, #4]
 8003a52:	e001      	b.n	8003a58 <pvPortMalloc+0x58>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            xWantedSize = 0;
 8003a54:	2300      	movs	r3, #0
 8003a56:	607b      	str	r3, [r7, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    vTaskSuspendAll();
 8003a58:	f000 fca6 	bl	80043a8 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8003a5c:	4b3a      	ldr	r3, [pc, #232]	@ (8003b48 <pvPortMalloc+0x148>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d101      	bne.n	8003a68 <pvPortMalloc+0x68>
        {
            prvHeapInit();
 8003a64:	f000 f8b8 	bl	8003bd8 <prvHeapInit>

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	db64      	blt.n	8003b38 <pvPortMalloc+0x138>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d061      	beq.n	8003b38 <pvPortMalloc+0x138>
 8003a74:	4b35      	ldr	r3, [pc, #212]	@ (8003b4c <pvPortMalloc+0x14c>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	687a      	ldr	r2, [r7, #4]
 8003a7a:	429a      	cmp	r2, r3
 8003a7c:	d85c      	bhi.n	8003b38 <pvPortMalloc+0x138>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8003a7e:	4b34      	ldr	r3, [pc, #208]	@ (8003b50 <pvPortMalloc+0x150>)
 8003a80:	61bb      	str	r3, [r7, #24]
                pxBlock = heapPROTECT_BLOCK_POINTER( xStart.pxNextFreeBlock );
 8003a82:	4b33      	ldr	r3, [pc, #204]	@ (8003b50 <pvPortMalloc+0x150>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	61fb      	str	r3, [r7, #28]
                heapVALIDATE_BLOCK_POINTER( pxBlock );

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
 8003a88:	e004      	b.n	8003a94 <pvPortMalloc+0x94>
                {
                    pxPreviousBlock = pxBlock;
 8003a8a:	69fb      	ldr	r3, [r7, #28]
 8003a8c:	61bb      	str	r3, [r7, #24]
                    pxBlock = heapPROTECT_BLOCK_POINTER( pxBlock->pxNextFreeBlock );
 8003a8e:	69fb      	ldr	r3, [r7, #28]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	61fb      	str	r3, [r7, #28]
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
 8003a94:	69fb      	ldr	r3, [r7, #28]
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	687a      	ldr	r2, [r7, #4]
 8003a9a:	429a      	cmp	r2, r3
 8003a9c:	d903      	bls.n	8003aa6 <pvPortMalloc+0xa6>
 8003a9e:	69fb      	ldr	r3, [r7, #28]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d1f1      	bne.n	8003a8a <pvPortMalloc+0x8a>
                    heapVALIDATE_BLOCK_POINTER( pxBlock );
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8003aa6:	4b28      	ldr	r3, [pc, #160]	@ (8003b48 <pvPortMalloc+0x148>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	69fa      	ldr	r2, [r7, #28]
 8003aac:	429a      	cmp	r2, r3
 8003aae:	d043      	beq.n	8003b38 <pvPortMalloc+0x138>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxPreviousBlock->pxNextFreeBlock ) ) + xHeapStructSize );
 8003ab0:	69bb      	ldr	r3, [r7, #24]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	2208      	movs	r2, #8
 8003ab6:	4413      	add	r3, r2
 8003ab8:	617b      	str	r3, [r7, #20]
                    heapVALIDATE_BLOCK_POINTER( pvReturn );

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003aba:	69fb      	ldr	r3, [r7, #28]
 8003abc:	681a      	ldr	r2, [r3, #0]
 8003abe:	69bb      	ldr	r3, [r7, #24]
 8003ac0:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    configASSERT( heapSUBTRACT_WILL_UNDERFLOW( pxBlock->xBlockSize, xWantedSize ) == 0 );

                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003ac2:	69fb      	ldr	r3, [r7, #28]
 8003ac4:	685a      	ldr	r2, [r3, #4]
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	1ad2      	subs	r2, r2, r3
 8003aca:	2308      	movs	r3, #8
 8003acc:	005b      	lsls	r3, r3, #1
 8003ace:	429a      	cmp	r2, r3
 8003ad0:	d913      	bls.n	8003afa <pvPortMalloc+0xfa>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003ad2:	69fa      	ldr	r2, [r7, #28]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	4413      	add	r3, r2
 8003ad8:	60fb      	str	r3, [r7, #12]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003ada:	69fb      	ldr	r3, [r7, #28]
 8003adc:	685a      	ldr	r2, [r3, #4]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	1ad2      	subs	r2, r2, r3
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8003ae6:	69fb      	ldr	r3, [r7, #28]
 8003ae8:	687a      	ldr	r2, [r7, #4]
 8003aea:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        pxNewBlockLink->pxNextFreeBlock = pxPreviousBlock->pxNextFreeBlock;
 8003aec:	69bb      	ldr	r3, [r7, #24]
 8003aee:	681a      	ldr	r2, [r3, #0]
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	601a      	str	r2, [r3, #0]
                        pxPreviousBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxNewBlockLink );
 8003af4:	69bb      	ldr	r3, [r7, #24]
 8003af6:	68fa      	ldr	r2, [r7, #12]
 8003af8:	601a      	str	r2, [r3, #0]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003afa:	4b14      	ldr	r3, [pc, #80]	@ (8003b4c <pvPortMalloc+0x14c>)
 8003afc:	681a      	ldr	r2, [r3, #0]
 8003afe:	69fb      	ldr	r3, [r7, #28]
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	1ad3      	subs	r3, r2, r3
 8003b04:	4a11      	ldr	r2, [pc, #68]	@ (8003b4c <pvPortMalloc+0x14c>)
 8003b06:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003b08:	4b10      	ldr	r3, [pc, #64]	@ (8003b4c <pvPortMalloc+0x14c>)
 8003b0a:	681a      	ldr	r2, [r3, #0]
 8003b0c:	4b11      	ldr	r3, [pc, #68]	@ (8003b54 <pvPortMalloc+0x154>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	429a      	cmp	r2, r3
 8003b12:	d203      	bcs.n	8003b1c <pvPortMalloc+0x11c>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003b14:	4b0d      	ldr	r3, [pc, #52]	@ (8003b4c <pvPortMalloc+0x14c>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a0e      	ldr	r2, [pc, #56]	@ (8003b54 <pvPortMalloc+0x154>)
 8003b1a:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8003b1c:	69fb      	ldr	r3, [r7, #28]
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003b24:	69fb      	ldr	r3, [r7, #28]
 8003b26:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8003b28:	69fb      	ldr	r3, [r7, #28]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8003b2e:	4b0a      	ldr	r3, [pc, #40]	@ (8003b58 <pvPortMalloc+0x158>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	3301      	adds	r3, #1
 8003b34:	4a08      	ldr	r2, [pc, #32]	@ (8003b58 <pvPortMalloc+0x158>)
 8003b36:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8003b38:	f000 fc44 	bl	80043c4 <xTaskResumeAll>
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
    return pvReturn;
 8003b3c:	697b      	ldr	r3, [r7, #20]
}
 8003b3e:	4618      	mov	r0, r3
 8003b40:	3720      	adds	r7, #32
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bd80      	pop	{r7, pc}
 8003b46:	bf00      	nop
 8003b48:	20002f00 	.word	0x20002f00
 8003b4c:	20002f04 	.word	0x20002f04
 8003b50:	20002ef8 	.word	0x20002ef8
 8003b54:	20002f08 	.word	0x20002f08
 8003b58:	20002f0c 	.word	0x20002f0c

08003b5c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b084      	sub	sp, #16
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	60fb      	str	r3, [r7, #12]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d02b      	beq.n	8003bc6 <vPortFree+0x6a>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8003b6e:	2308      	movs	r3, #8
 8003b70:	425b      	negs	r3, r3
 8003b72:	68fa      	ldr	r2, [r7, #12]
 8003b74:	4413      	add	r3, r2
 8003b76:	60fb      	str	r3, [r7, #12]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	60bb      	str	r3, [r7, #8]

        heapVALIDATE_BLOCK_POINTER( pxLink );
        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
        configASSERT( pxLink->pxNextFreeBlock == NULL );

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	0fdb      	lsrs	r3, r3, #31
 8003b82:	f003 0301 	and.w	r3, r3, #1
 8003b86:	b2db      	uxtb	r3, r3
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d01c      	beq.n	8003bc6 <vPortFree+0x6a>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8003b8c:	68bb      	ldr	r3, [r7, #8]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d118      	bne.n	8003bc6 <vPortFree+0x6a>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8003b94:	68bb      	ldr	r3, [r7, #8]
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003b9c:	68bb      	ldr	r3, [r7, #8]
 8003b9e:	605a      	str	r2, [r3, #4]
                        ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                    }
                }
                #endif

                vTaskSuspendAll();
 8003ba0:	f000 fc02 	bl	80043a8 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8003ba4:	68bb      	ldr	r3, [r7, #8]
 8003ba6:	685a      	ldr	r2, [r3, #4]
 8003ba8:	4b09      	ldr	r3, [pc, #36]	@ (8003bd0 <vPortFree+0x74>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4413      	add	r3, r2
 8003bae:	4a08      	ldr	r2, [pc, #32]	@ (8003bd0 <vPortFree+0x74>)
 8003bb0:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003bb2:	68b8      	ldr	r0, [r7, #8]
 8003bb4:	f000 f86a 	bl	8003c8c <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8003bb8:	4b06      	ldr	r3, [pc, #24]	@ (8003bd4 <vPortFree+0x78>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	3301      	adds	r3, #1
 8003bbe:	4a05      	ldr	r2, [pc, #20]	@ (8003bd4 <vPortFree+0x78>)
 8003bc0:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8003bc2:	f000 fbff 	bl	80043c4 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8003bc6:	bf00      	nop
 8003bc8:	3710      	adds	r7, #16
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bd80      	pop	{r7, pc}
 8003bce:	bf00      	nop
 8003bd0:	20002f04 	.word	0x20002f04
 8003bd4:	20002f10 	.word	0x20002f10

08003bd8 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8003bd8:	b480      	push	{r7}
 8003bda:	b085      	sub	sp, #20
 8003bdc:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    portPOINTER_SIZE_TYPE uxStartAddress, uxEndAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003bde:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8003be2:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxStartAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8003be4:	4b24      	ldr	r3, [pc, #144]	@ (8003c78 <prvHeapInit+0xa0>)
 8003be6:	60fb      	str	r3, [r7, #12]

    if( ( uxStartAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	f003 0307 	and.w	r3, r3, #7
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d00c      	beq.n	8003c0c <prvHeapInit+0x34>
    {
        uxStartAddress += ( portBYTE_ALIGNMENT - 1 );
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	3307      	adds	r3, #7
 8003bf6:	60fb      	str	r3, [r7, #12]
        uxStartAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	f023 0307 	bic.w	r3, r3, #7
 8003bfe:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= ( size_t ) ( uxStartAddress - ( portPOINTER_SIZE_TYPE ) ucHeap );
 8003c00:	68ba      	ldr	r2, [r7, #8]
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	1ad3      	subs	r3, r2, r3
 8003c06:	4a1c      	ldr	r2, [pc, #112]	@ (8003c78 <prvHeapInit+0xa0>)
 8003c08:	4413      	add	r3, r2
 8003c0a:	60bb      	str	r3, [r7, #8]
    }
    #endif

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) heapPROTECT_BLOCK_POINTER( uxStartAddress );
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	4a1b      	ldr	r2, [pc, #108]	@ (8003c7c <prvHeapInit+0xa4>)
 8003c10:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8003c12:	4b1a      	ldr	r3, [pc, #104]	@ (8003c7c <prvHeapInit+0xa4>)
 8003c14:	2200      	movs	r2, #0
 8003c16:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxEndAddress = uxStartAddress + ( portPOINTER_SIZE_TYPE ) xTotalHeapSize;
 8003c18:	68fa      	ldr	r2, [r7, #12]
 8003c1a:	68bb      	ldr	r3, [r7, #8]
 8003c1c:	4413      	add	r3, r2
 8003c1e:	607b      	str	r3, [r7, #4]
    uxEndAddress -= ( portPOINTER_SIZE_TYPE ) xHeapStructSize;
 8003c20:	2208      	movs	r2, #8
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	1a9b      	subs	r3, r3, r2
 8003c26:	607b      	str	r3, [r7, #4]
    uxEndAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	f023 0307 	bic.w	r3, r3, #7
 8003c2e:	607b      	str	r3, [r7, #4]
    pxEnd = ( BlockLink_t * ) uxEndAddress;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	4a13      	ldr	r2, [pc, #76]	@ (8003c80 <prvHeapInit+0xa8>)
 8003c34:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8003c36:	4b12      	ldr	r3, [pc, #72]	@ (8003c80 <prvHeapInit+0xa8>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( NULL );
 8003c3e:	4b10      	ldr	r3, [pc, #64]	@ (8003c80 <prvHeapInit+0xa8>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	2200      	movs	r2, #0
 8003c44:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) uxStartAddress;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxEndAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	687a      	ldr	r2, [r7, #4]
 8003c4e:	1ad2      	subs	r2, r2, r3
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 8003c54:	4b0a      	ldr	r3, [pc, #40]	@ (8003c80 <prvHeapInit+0xa8>)
 8003c56:	681a      	ldr	r2, [r3, #0]
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	4a08      	ldr	r2, [pc, #32]	@ (8003c84 <prvHeapInit+0xac>)
 8003c62:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	4a07      	ldr	r2, [pc, #28]	@ (8003c88 <prvHeapInit+0xb0>)
 8003c6a:	6013      	str	r3, [r2, #0]
}
 8003c6c:	bf00      	nop
 8003c6e:	3714      	adds	r7, #20
 8003c70:	46bd      	mov	sp, r7
 8003c72:	bc80      	pop	{r7}
 8003c74:	4770      	bx	lr
 8003c76:	bf00      	nop
 8003c78:	200006f8 	.word	0x200006f8
 8003c7c:	20002ef8 	.word	0x20002ef8
 8003c80:	20002f00 	.word	0x20002f00
 8003c84:	20002f08 	.word	0x20002f08
 8003c88:	20002f04 	.word	0x20002f04

08003c8c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	b085      	sub	sp, #20
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) < pxBlockToInsert; pxIterator = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 8003c94:	4b27      	ldr	r3, [pc, #156]	@ (8003d34 <prvInsertBlockIntoFreeList+0xa8>)
 8003c96:	60fb      	str	r3, [r7, #12]
 8003c98:	e002      	b.n	8003ca0 <prvInsertBlockIntoFreeList+0x14>
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	60fb      	str	r3, [r7, #12]
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	687a      	ldr	r2, [r7, #4]
 8003ca6:	429a      	cmp	r2, r3
 8003ca8:	d8f7      	bhi.n	8003c9a <prvInsertBlockIntoFreeList+0xe>
        heapVALIDATE_BLOCK_POINTER( pxIterator );
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	685b      	ldr	r3, [r3, #4]
 8003cb2:	68ba      	ldr	r2, [r7, #8]
 8003cb4:	4413      	add	r3, r2
 8003cb6:	687a      	ldr	r2, [r7, #4]
 8003cb8:	429a      	cmp	r2, r3
 8003cba:	d108      	bne.n	8003cce <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	685a      	ldr	r2, [r3, #4]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	441a      	add	r2, r3
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	68ba      	ldr	r2, [r7, #8]
 8003cd8:	441a      	add	r2, r3
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	429a      	cmp	r2, r3
 8003ce0:	d118      	bne.n	8003d14 <prvInsertBlockIntoFreeList+0x88>
    {
        if( heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) != pxEnd )
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681a      	ldr	r2, [r3, #0]
 8003ce6:	4b14      	ldr	r3, [pc, #80]	@ (8003d38 <prvInsertBlockIntoFreeList+0xac>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	429a      	cmp	r2, r3
 8003cec:	d00d      	beq.n	8003d0a <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->xBlockSize;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	685a      	ldr	r2, [r3, #4]
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	441a      	add	r2, r3
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->pxNextFreeBlock;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	681a      	ldr	r2, [r3, #0]
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	601a      	str	r2, [r3, #0]
 8003d08:	e008      	b.n	8003d1c <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 8003d0a:	4b0b      	ldr	r3, [pc, #44]	@ (8003d38 <prvInsertBlockIntoFreeList+0xac>)
 8003d0c:	681a      	ldr	r2, [r3, #0]
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	601a      	str	r2, [r3, #0]
 8003d12:	e003      	b.n	8003d1c <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681a      	ldr	r2, [r3, #0]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8003d1c:	68fa      	ldr	r2, [r7, #12]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	429a      	cmp	r2, r3
 8003d22:	d002      	beq.n	8003d2a <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxBlockToInsert );
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	687a      	ldr	r2, [r7, #4]
 8003d28:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003d2a:	bf00      	nop
 8003d2c:	3714      	adds	r7, #20
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bc80      	pop	{r7}
 8003d32:	4770      	bx	lr
 8003d34:	20002ef8 	.word	0x20002ef8
 8003d38:	20002f00 	.word	0x20002f00

08003d3c <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b083      	sub	sp, #12
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialise( pxList );

    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	f103 0208 	add.w	r2, r3, #8
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	f04f 32ff 	mov.w	r2, #4294967295
 8003d54:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	f103 0208 	add.w	r2, r3, #8
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	f103 0208 	add.w	r2, r3, #8
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	601a      	str	r2, [r3, #0]
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );

    traceRETURN_vListInitialise();
}
 8003d70:	bf00      	nop
 8003d72:	370c      	adds	r7, #12
 8003d74:	46bd      	mov	sp, r7
 8003d76:	bc80      	pop	{r7}
 8003d78:	4770      	bx	lr

08003d7a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003d7a:	b480      	push	{r7}
 8003d7c:	b083      	sub	sp, #12
 8003d7e:	af00      	add	r7, sp, #0
 8003d80:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialiseItem( pxItem );

    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2200      	movs	r2, #0
 8003d86:	611a      	str	r2, [r3, #16]
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );

    traceRETURN_vListInitialiseItem();
}
 8003d88:	bf00      	nop
 8003d8a:	370c      	adds	r7, #12
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	bc80      	pop	{r7}
 8003d90:	4770      	bx	lr

08003d92 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8003d92:	b480      	push	{r7}
 8003d94:	b085      	sub	sp, #20
 8003d96:	af00      	add	r7, sp, #0
 8003d98:	6078      	str	r0, [r7, #4]
 8003d9a:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	68fa      	ldr	r2, [r7, #12]
 8003da6:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	689a      	ldr	r2, [r3, #8]
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	689b      	ldr	r3, [r3, #8]
 8003db4:	683a      	ldr	r2, [r7, #0]
 8003db6:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	683a      	ldr	r2, [r7, #0]
 8003dbc:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	687a      	ldr	r2, [r7, #4]
 8003dc2:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	1c5a      	adds	r2, r3, #1
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	601a      	str	r2, [r3, #0]

    traceRETURN_vListInsertEnd();
}
 8003dce:	bf00      	nop
 8003dd0:	3714      	adds	r7, #20
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bc80      	pop	{r7}
 8003dd6:	4770      	bx	lr

08003dd8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8003dd8:	b480      	push	{r7}
 8003dda:	b085      	sub	sp, #20
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
 8003de0:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8003de8:	68bb      	ldr	r3, [r7, #8]
 8003dea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dee:	d103      	bne.n	8003df8 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	691b      	ldr	r3, [r3, #16]
 8003df4:	60fb      	str	r3, [r7, #12]
 8003df6:	e00c      	b.n	8003e12 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	3308      	adds	r3, #8
 8003dfc:	60fb      	str	r3, [r7, #12]
 8003dfe:	e002      	b.n	8003e06 <vListInsert+0x2e>
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	60fb      	str	r3, [r7, #12]
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	685b      	ldr	r3, [r3, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	68ba      	ldr	r2, [r7, #8]
 8003e0e:	429a      	cmp	r2, r3
 8003e10:	d2f6      	bcs.n	8003e00 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	685a      	ldr	r2, [r3, #4]
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	683a      	ldr	r2, [r7, #0]
 8003e20:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	68fa      	ldr	r2, [r7, #12]
 8003e26:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	683a      	ldr	r2, [r7, #0]
 8003e2c:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	687a      	ldr	r2, [r7, #4]
 8003e32:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	1c5a      	adds	r2, r3, #1
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	601a      	str	r2, [r3, #0]

    traceRETURN_vListInsert();
}
 8003e3e:	bf00      	nop
 8003e40:	3714      	adds	r7, #20
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bc80      	pop	{r7}
 8003e46:	4770      	bx	lr

08003e48 <uxListRemove>:
/*-----------------------------------------------------------*/


UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003e48:	b480      	push	{r7}
 8003e4a:	b085      	sub	sp, #20
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
    /* The list item knows which list it is in.  Obtain the list from the list
     * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	691b      	ldr	r3, [r3, #16]
 8003e54:	60fb      	str	r3, [r7, #12]

    traceENTER_uxListRemove( pxItemToRemove );

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	687a      	ldr	r2, [r7, #4]
 8003e5c:	6892      	ldr	r2, [r2, #8]
 8003e5e:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	689b      	ldr	r3, [r3, #8]
 8003e64:	687a      	ldr	r2, [r7, #4]
 8003e66:	6852      	ldr	r2, [r2, #4]
 8003e68:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	687a      	ldr	r2, [r7, #4]
 8003e70:	429a      	cmp	r2, r3
 8003e72:	d103      	bne.n	8003e7c <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	689a      	ldr	r2, [r3, #8]
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems - 1U );
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	1e5a      	subs	r2, r3, #1
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	601a      	str	r2, [r3, #0]

    traceRETURN_uxListRemove( pxList->uxNumberOfItems );

    return pxList->uxNumberOfItems;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
}
 8003e90:	4618      	mov	r0, r3
 8003e92:	3714      	adds	r7, #20
 8003e94:	46bd      	mov	sp, r7
 8003e96:	bc80      	pop	{r7}
 8003e98:	4770      	bx	lr

08003e9a <prvCreateTask>:
                                  const char * const pcName,
                                  const configSTACK_DEPTH_TYPE uxStackDepth,
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask )
    {
 8003e9a:	b580      	push	{r7, lr}
 8003e9c:	b08a      	sub	sp, #40	@ 0x28
 8003e9e:	af04      	add	r7, sp, #16
 8003ea0:	60f8      	str	r0, [r7, #12]
 8003ea2:	60b9      	str	r1, [r7, #8]
 8003ea4:	607a      	str	r2, [r7, #4]
 8003ea6:	603b      	str	r3, [r7, #0]

            /* Allocate space for the stack used by the task being created. */
            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxStack = pvPortMallocStack( ( ( ( size_t ) uxStackDepth ) * sizeof( StackType_t ) ) );
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	009b      	lsls	r3, r3, #2
 8003eac:	4618      	mov	r0, r3
 8003eae:	f7ff fda7 	bl	8003a00 <pvPortMalloc>
 8003eb2:	6138      	str	r0, [r7, #16]

            if( pxStack != NULL )
 8003eb4:	693b      	ldr	r3, [r7, #16]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d013      	beq.n	8003ee2 <prvCreateTask+0x48>
            {
                /* Allocate space for the TCB. */
                /* MISRA Ref 11.5.1 [Malloc memory assignment] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                /* coverity[misra_c_2012_rule_11_5_violation] */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 8003eba:	2054      	movs	r0, #84	@ 0x54
 8003ebc:	f7ff fda0 	bl	8003a00 <pvPortMalloc>
 8003ec0:	6178      	str	r0, [r7, #20]

                if( pxNewTCB != NULL )
 8003ec2:	697b      	ldr	r3, [r7, #20]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d008      	beq.n	8003eda <prvCreateTask+0x40>
                {
                    ( void ) memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8003ec8:	2254      	movs	r2, #84	@ 0x54
 8003eca:	2100      	movs	r1, #0
 8003ecc:	6978      	ldr	r0, [r7, #20]
 8003ece:	f001 fe93 	bl	8005bf8 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8003ed2:	697b      	ldr	r3, [r7, #20]
 8003ed4:	693a      	ldr	r2, [r7, #16]
 8003ed6:	631a      	str	r2, [r3, #48]	@ 0x30
 8003ed8:	e005      	b.n	8003ee6 <prvCreateTask+0x4c>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8003eda:	6938      	ldr	r0, [r7, #16]
 8003edc:	f7ff fe3e 	bl	8003b5c <vPortFree>
 8003ee0:	e001      	b.n	8003ee6 <prvCreateTask+0x4c>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	617b      	str	r3, [r7, #20]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8003ee6:	697b      	ldr	r3, [r7, #20]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d00d      	beq.n	8003f08 <prvCreateTask+0x6e>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003eec:	2300      	movs	r3, #0
 8003eee:	9303      	str	r3, [sp, #12]
 8003ef0:	697b      	ldr	r3, [r7, #20]
 8003ef2:	9302      	str	r3, [sp, #8]
 8003ef4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ef6:	9301      	str	r3, [sp, #4]
 8003ef8:	6a3b      	ldr	r3, [r7, #32]
 8003efa:	9300      	str	r3, [sp, #0]
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	687a      	ldr	r2, [r7, #4]
 8003f00:	68b9      	ldr	r1, [r7, #8]
 8003f02:	68f8      	ldr	r0, [r7, #12]
 8003f04:	f000 f828 	bl	8003f58 <prvInitialiseNewTask>
        }

        return pxNewTCB;
 8003f08:	697b      	ldr	r3, [r7, #20]
    }
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	3718      	adds	r7, #24
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	bd80      	pop	{r7, pc}

08003f12 <xTaskCreate>:
                            const char * const pcName,
                            const configSTACK_DEPTH_TYPE uxStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8003f12:	b580      	push	{r7, lr}
 8003f14:	b088      	sub	sp, #32
 8003f16:	af02      	add	r7, sp, #8
 8003f18:	60f8      	str	r0, [r7, #12]
 8003f1a:	60b9      	str	r1, [r7, #8]
 8003f1c:	607a      	str	r2, [r7, #4]
 8003f1e:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        BaseType_t xReturn;

        traceENTER_xTaskCreate( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );

        pxNewTCB = prvCreateTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );
 8003f20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f22:	9301      	str	r3, [sp, #4]
 8003f24:	6a3b      	ldr	r3, [r7, #32]
 8003f26:	9300      	str	r3, [sp, #0]
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	687a      	ldr	r2, [r7, #4]
 8003f2c:	68b9      	ldr	r1, [r7, #8]
 8003f2e:	68f8      	ldr	r0, [r7, #12]
 8003f30:	f7ff ffb3 	bl	8003e9a <prvCreateTask>
 8003f34:	6138      	str	r0, [r7, #16]

        if( pxNewTCB != NULL )
 8003f36:	693b      	ldr	r3, [r7, #16]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d005      	beq.n	8003f48 <xTaskCreate+0x36>
                /* Set the task's affinity before scheduling it. */
                pxNewTCB->uxCoreAffinityMask = configTASK_DEFAULT_CORE_AFFINITY;
            }
            #endif

            prvAddNewTaskToReadyList( pxNewTCB );
 8003f3c:	6938      	ldr	r0, [r7, #16]
 8003f3e:	f000 f873 	bl	8004028 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8003f42:	2301      	movs	r3, #1
 8003f44:	617b      	str	r3, [r7, #20]
 8003f46:	e002      	b.n	8003f4e <xTaskCreate+0x3c>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003f48:	f04f 33ff 	mov.w	r3, #4294967295
 8003f4c:	617b      	str	r3, [r7, #20]
        }

        traceRETURN_xTaskCreate( xReturn );

        return xReturn;
 8003f4e:	697b      	ldr	r3, [r7, #20]
    }
 8003f50:	4618      	mov	r0, r3
 8003f52:	3718      	adds	r7, #24
 8003f54:	46bd      	mov	sp, r7
 8003f56:	bd80      	pop	{r7, pc}

08003f58 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b086      	sub	sp, #24
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	60f8      	str	r0, [r7, #12]
 8003f60:	60b9      	str	r1, [r7, #8]
 8003f62:	607a      	str	r2, [r7, #4]
 8003f64:	603b      	str	r3, [r7, #0]
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 ] );
 8003f66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f68:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003f70:	3b01      	subs	r3, #1
 8003f72:	009b      	lsls	r3, r3, #2
 8003f74:	4413      	add	r3, r2
 8003f76:	613b      	str	r3, [r7, #16]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 8003f78:	693b      	ldr	r3, [r7, #16]
 8003f7a:	f023 0307 	bic.w	r3, r3, #7
 8003f7e:	613b      	str	r3, [r7, #16]
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d01e      	beq.n	8003fc4 <prvInitialiseNewTask+0x6c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003f86:	2300      	movs	r3, #0
 8003f88:	617b      	str	r3, [r7, #20]
 8003f8a:	e012      	b.n	8003fb2 <prvInitialiseNewTask+0x5a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003f8c:	68ba      	ldr	r2, [r7, #8]
 8003f8e:	697b      	ldr	r3, [r7, #20]
 8003f90:	4413      	add	r3, r2
 8003f92:	7819      	ldrb	r1, [r3, #0]
 8003f94:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003f96:	697b      	ldr	r3, [r7, #20]
 8003f98:	4413      	add	r3, r2
 8003f9a:	3334      	adds	r3, #52	@ 0x34
 8003f9c:	460a      	mov	r2, r1
 8003f9e:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8003fa0:	68ba      	ldr	r2, [r7, #8]
 8003fa2:	697b      	ldr	r3, [r7, #20]
 8003fa4:	4413      	add	r3, r2
 8003fa6:	781b      	ldrb	r3, [r3, #0]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d006      	beq.n	8003fba <prvInitialiseNewTask+0x62>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003fac:	697b      	ldr	r3, [r7, #20]
 8003fae:	3301      	adds	r3, #1
 8003fb0:	617b      	str	r3, [r7, #20]
 8003fb2:	697b      	ldr	r3, [r7, #20]
 8003fb4:	2b0f      	cmp	r3, #15
 8003fb6:	d9e9      	bls.n	8003f8c <prvInitialiseNewTask+0x34>
 8003fb8:	e000      	b.n	8003fbc <prvInitialiseNewTask+0x64>
            {
                break;
 8003fba:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1U ] = '\0';
 8003fbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003fc4:	6a3b      	ldr	r3, [r7, #32]
 8003fc6:	2b04      	cmp	r3, #4
 8003fc8:	d901      	bls.n	8003fce <prvInitialiseNewTask+0x76>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003fca:	2304      	movs	r3, #4
 8003fcc:	623b      	str	r3, [r7, #32]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8003fce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fd0:	6a3a      	ldr	r2, [r7, #32]
 8003fd2:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8003fd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fd6:	6a3a      	ldr	r2, [r7, #32]
 8003fd8:	645a      	str	r2, [r3, #68]	@ 0x44
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003fda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fdc:	3304      	adds	r3, #4
 8003fde:	4618      	mov	r0, r3
 8003fe0:	f7ff fecb 	bl	8003d7a <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003fe4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fe6:	3318      	adds	r3, #24
 8003fe8:	4618      	mov	r0, r3
 8003fea:	f7ff fec6 	bl	8003d7a <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003fee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ff0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003ff2:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority );
 8003ff4:	6a3b      	ldr	r3, [r7, #32]
 8003ff6:	f1c3 0205 	rsb	r2, r3, #5
 8003ffa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ffc:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003ffe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004000:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004002:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004004:	683a      	ldr	r2, [r7, #0]
 8004006:	68f9      	ldr	r1, [r7, #12]
 8004008:	6938      	ldr	r0, [r7, #16]
 800400a:	f7ff fbc5 	bl	8003798 <pxPortInitialiseStack>
 800400e:	4602      	mov	r2, r0
 8004010:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004012:	601a      	str	r2, [r3, #0]
            pxNewTCB->uxTaskAttributes |= taskATTRIBUTE_IS_IDLE;
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES > 1 ) */

    if( pxCreatedTask != NULL )
 8004014:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004016:	2b00      	cmp	r3, #0
 8004018:	d002      	beq.n	8004020 <prvInitialiseNewTask+0xc8>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800401a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800401c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800401e:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004020:	bf00      	nop
 8004022:	3718      	adds	r7, #24
 8004024:	46bd      	mov	sp, r7
 8004026:	bd80      	pop	{r7, pc}

08004028 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )

    static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
    {
 8004028:	b580      	push	{r7, lr}
 800402a:	b084      	sub	sp, #16
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
        /* Ensure interrupts don't access the task lists while the lists are being
         * updated. */
        taskENTER_CRITICAL();
 8004030:	f7ff fc52 	bl	80038d8 <vPortEnterCritical>
        {
            uxCurrentNumberOfTasks = ( UBaseType_t ) ( uxCurrentNumberOfTasks + 1U );
 8004034:	4b3f      	ldr	r3, [pc, #252]	@ (8004134 <prvAddNewTaskToReadyList+0x10c>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	3301      	adds	r3, #1
 800403a:	4a3e      	ldr	r2, [pc, #248]	@ (8004134 <prvAddNewTaskToReadyList+0x10c>)
 800403c:	6013      	str	r3, [r2, #0]

            if( pxCurrentTCB == NULL )
 800403e:	4b3e      	ldr	r3, [pc, #248]	@ (8004138 <prvAddNewTaskToReadyList+0x110>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d109      	bne.n	800405a <prvAddNewTaskToReadyList+0x32>
            {
                /* There are no other tasks, or all the other tasks are in
                 * the suspended state - make this the current task. */
                pxCurrentTCB = pxNewTCB;
 8004046:	4a3c      	ldr	r2, [pc, #240]	@ (8004138 <prvAddNewTaskToReadyList+0x110>)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6013      	str	r3, [r2, #0]

                if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800404c:	4b39      	ldr	r3, [pc, #228]	@ (8004134 <prvAddNewTaskToReadyList+0x10c>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	2b01      	cmp	r3, #1
 8004052:	d110      	bne.n	8004076 <prvAddNewTaskToReadyList+0x4e>
                {
                    /* This is the first task to be created so do the preliminary
                     * initialisation required.  We will not recover if this call
                     * fails, but we will report the failure. */
                    prvInitialiseTaskLists();
 8004054:	f000 fc14 	bl	8004880 <prvInitialiseTaskLists>
 8004058:	e00d      	b.n	8004076 <prvAddNewTaskToReadyList+0x4e>
            else
            {
                /* If the scheduler is not already running, make this task the
                 * current task if it is the highest priority task to be created
                 * so far. */
                if( xSchedulerRunning == pdFALSE )
 800405a:	4b38      	ldr	r3, [pc, #224]	@ (800413c <prvAddNewTaskToReadyList+0x114>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d109      	bne.n	8004076 <prvAddNewTaskToReadyList+0x4e>
                {
                    if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004062:	4b35      	ldr	r3, [pc, #212]	@ (8004138 <prvAddNewTaskToReadyList+0x110>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800406c:	429a      	cmp	r2, r3
 800406e:	d802      	bhi.n	8004076 <prvAddNewTaskToReadyList+0x4e>
                    {
                        pxCurrentTCB = pxNewTCB;
 8004070:	4a31      	ldr	r2, [pc, #196]	@ (8004138 <prvAddNewTaskToReadyList+0x110>)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6013      	str	r3, [r2, #0]
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            uxTaskNumber++;
 8004076:	4b32      	ldr	r3, [pc, #200]	@ (8004140 <prvAddNewTaskToReadyList+0x118>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	3301      	adds	r3, #1
 800407c:	4a30      	ldr	r2, [pc, #192]	@ (8004140 <prvAddNewTaskToReadyList+0x118>)
 800407e:	6013      	str	r3, [r2, #0]
                pxNewTCB->uxTCBNumber = uxTaskNumber;
            }
            #endif /* configUSE_TRACE_FACILITY */
            traceTASK_CREATE( pxNewTCB );

            prvAddTaskToReadyList( pxNewTCB );
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004084:	2201      	movs	r2, #1
 8004086:	409a      	lsls	r2, r3
 8004088:	4b2e      	ldr	r3, [pc, #184]	@ (8004144 <prvAddNewTaskToReadyList+0x11c>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4313      	orrs	r3, r2
 800408e:	4a2d      	ldr	r2, [pc, #180]	@ (8004144 <prvAddNewTaskToReadyList+0x11c>)
 8004090:	6013      	str	r3, [r2, #0]
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004096:	492c      	ldr	r1, [pc, #176]	@ (8004148 <prvAddNewTaskToReadyList+0x120>)
 8004098:	4613      	mov	r3, r2
 800409a:	009b      	lsls	r3, r3, #2
 800409c:	4413      	add	r3, r2
 800409e:	009b      	lsls	r3, r3, #2
 80040a0:	440b      	add	r3, r1
 80040a2:	3304      	adds	r3, #4
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	60fb      	str	r3, [r7, #12]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	68fa      	ldr	r2, [r7, #12]
 80040ac:	609a      	str	r2, [r3, #8]
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	689a      	ldr	r2, [r3, #8]
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	60da      	str	r2, [r3, #12]
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	689b      	ldr	r3, [r3, #8]
 80040ba:	687a      	ldr	r2, [r7, #4]
 80040bc:	3204      	adds	r2, #4
 80040be:	605a      	str	r2, [r3, #4]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	1d1a      	adds	r2, r3, #4
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	609a      	str	r2, [r3, #8]
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80040cc:	4613      	mov	r3, r2
 80040ce:	009b      	lsls	r3, r3, #2
 80040d0:	4413      	add	r3, r2
 80040d2:	009b      	lsls	r3, r3, #2
 80040d4:	4a1c      	ldr	r2, [pc, #112]	@ (8004148 <prvAddNewTaskToReadyList+0x120>)
 80040d6:	441a      	add	r2, r3
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	615a      	str	r2, [r3, #20]
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80040e0:	4919      	ldr	r1, [pc, #100]	@ (8004148 <prvAddNewTaskToReadyList+0x120>)
 80040e2:	4613      	mov	r3, r2
 80040e4:	009b      	lsls	r3, r3, #2
 80040e6:	4413      	add	r3, r2
 80040e8:	009b      	lsls	r3, r3, #2
 80040ea:	440b      	add	r3, r1
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	687a      	ldr	r2, [r7, #4]
 80040f0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80040f2:	1c59      	adds	r1, r3, #1
 80040f4:	4814      	ldr	r0, [pc, #80]	@ (8004148 <prvAddNewTaskToReadyList+0x120>)
 80040f6:	4613      	mov	r3, r2
 80040f8:	009b      	lsls	r3, r3, #2
 80040fa:	4413      	add	r3, r2
 80040fc:	009b      	lsls	r3, r3, #2
 80040fe:	4403      	add	r3, r0
 8004100:	6019      	str	r1, [r3, #0]

            portSETUP_TCB( pxNewTCB );
        }
        taskEXIT_CRITICAL();
 8004102:	f7ff fc03 	bl	800390c <vPortExitCritical>

        if( xSchedulerRunning != pdFALSE )
 8004106:	4b0d      	ldr	r3, [pc, #52]	@ (800413c <prvAddNewTaskToReadyList+0x114>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d00e      	beq.n	800412c <prvAddNewTaskToReadyList+0x104>
        {
            /* If the created task is of a higher priority than the current task
             * then it should run now. */
            taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxNewTCB );
 800410e:	4b0a      	ldr	r3, [pc, #40]	@ (8004138 <prvAddNewTaskToReadyList+0x110>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004118:	429a      	cmp	r2, r3
 800411a:	d207      	bcs.n	800412c <prvAddNewTaskToReadyList+0x104>
 800411c:	4b0b      	ldr	r3, [pc, #44]	@ (800414c <prvAddNewTaskToReadyList+0x124>)
 800411e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004122:	601a      	str	r2, [r3, #0]
 8004124:	f3bf 8f4f 	dsb	sy
 8004128:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 800412c:	bf00      	nop
 800412e:	3710      	adds	r7, #16
 8004130:	46bd      	mov	sp, r7
 8004132:	bd80      	pop	{r7, pc}
 8004134:	20002fec 	.word	0x20002fec
 8004138:	20002f14 	.word	0x20002f14
 800413c:	20002ff8 	.word	0x20002ff8
 8004140:	20003008 	.word	0x20003008
 8004144:	20002ff4 	.word	0x20002ff4
 8004148:	20002f18 	.word	0x20002f18
 800414c:	e000ed04 	.word	0xe000ed04

08004150 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    void vTaskDelete( TaskHandle_t xTaskToDelete )
    {
 8004150:	b580      	push	{r7, lr}
 8004152:	b086      	sub	sp, #24
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;
        BaseType_t xDeleteTCBInIdleTask = pdFALSE;
 8004158:	2300      	movs	r3, #0
 800415a:	617b      	str	r3, [r7, #20]
        BaseType_t xTaskIsRunningOrYielding;

        traceENTER_vTaskDelete( xTaskToDelete );

        taskENTER_CRITICAL();
 800415c:	f7ff fbbc 	bl	80038d8 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the calling task that is
             * being deleted. */
            pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d102      	bne.n	800416c <vTaskDelete+0x1c>
 8004166:	4b39      	ldr	r3, [pc, #228]	@ (800424c <vTaskDelete+0xfc>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	e000      	b.n	800416e <vTaskDelete+0x1e>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	613b      	str	r3, [r7, #16]

            /* Remove task from the ready/delayed list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004170:	693b      	ldr	r3, [r7, #16]
 8004172:	3304      	adds	r3, #4
 8004174:	4618      	mov	r0, r3
 8004176:	f7ff fe67 	bl	8003e48 <uxListRemove>
 800417a:	4603      	mov	r3, r0
 800417c:	2b00      	cmp	r3, #0
 800417e:	d115      	bne.n	80041ac <vTaskDelete+0x5c>
            {
                taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004180:	693b      	ldr	r3, [r7, #16]
 8004182:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004184:	4932      	ldr	r1, [pc, #200]	@ (8004250 <vTaskDelete+0x100>)
 8004186:	4613      	mov	r3, r2
 8004188:	009b      	lsls	r3, r3, #2
 800418a:	4413      	add	r3, r2
 800418c:	009b      	lsls	r3, r3, #2
 800418e:	440b      	add	r3, r1
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d10a      	bne.n	80041ac <vTaskDelete+0x5c>
 8004196:	693b      	ldr	r3, [r7, #16]
 8004198:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800419a:	2201      	movs	r2, #1
 800419c:	fa02 f303 	lsl.w	r3, r2, r3
 80041a0:	43da      	mvns	r2, r3
 80041a2:	4b2c      	ldr	r3, [pc, #176]	@ (8004254 <vTaskDelete+0x104>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4013      	ands	r3, r2
 80041a8:	4a2a      	ldr	r2, [pc, #168]	@ (8004254 <vTaskDelete+0x104>)
 80041aa:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80041ac:	693b      	ldr	r3, [r7, #16]
 80041ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d004      	beq.n	80041be <vTaskDelete+0x6e>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80041b4:	693b      	ldr	r3, [r7, #16]
 80041b6:	3318      	adds	r3, #24
 80041b8:	4618      	mov	r0, r3
 80041ba:	f7ff fe45 	bl	8003e48 <uxListRemove>

            /* Increment the uxTaskNumber also so kernel aware debuggers can
             * detect that the task lists need re-generating.  This is done before
             * portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
             * not return. */
            uxTaskNumber++;
 80041be:	4b26      	ldr	r3, [pc, #152]	@ (8004258 <vTaskDelete+0x108>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	3301      	adds	r3, #1
 80041c4:	4a24      	ldr	r2, [pc, #144]	@ (8004258 <vTaskDelete+0x108>)
 80041c6:	6013      	str	r3, [r2, #0]

            /* Use temp variable as distinct sequence points for reading volatile
             * variables prior to a logical operator to ensure compliance with
             * MISRA C 2012 Rule 13.5. */
            xTaskIsRunningOrYielding = taskTASK_IS_RUNNING_OR_SCHEDULED_TO_YIELD( pxTCB );
 80041c8:	4b20      	ldr	r3, [pc, #128]	@ (800424c <vTaskDelete+0xfc>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	693a      	ldr	r2, [r7, #16]
 80041ce:	429a      	cmp	r2, r3
 80041d0:	d101      	bne.n	80041d6 <vTaskDelete+0x86>
 80041d2:	2301      	movs	r3, #1
 80041d4:	e000      	b.n	80041d8 <vTaskDelete+0x88>
 80041d6:	2300      	movs	r3, #0
 80041d8:	60fb      	str	r3, [r7, #12]

            /* If the task is running (or yielding), we must add it to the
             * termination list so that an idle task can delete it when it is
             * no longer running. */
            if( ( xSchedulerRunning != pdFALSE ) && ( xTaskIsRunningOrYielding != pdFALSE ) )
 80041da:	4b20      	ldr	r3, [pc, #128]	@ (800425c <vTaskDelete+0x10c>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d010      	beq.n	8004204 <vTaskDelete+0xb4>
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d00d      	beq.n	8004204 <vTaskDelete+0xb4>
                 * deleted. This cannot complete when the task is still running
                 * on a core, as a context switch to another task is required.
                 * Place the task in the termination list. The idle task will check
                 * the termination list and free up any memory allocated by the
                 * scheduler for the TCB and stack of the deleted task. */
                vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 80041e8:	693b      	ldr	r3, [r7, #16]
 80041ea:	3304      	adds	r3, #4
 80041ec:	4619      	mov	r1, r3
 80041ee:	481c      	ldr	r0, [pc, #112]	@ (8004260 <vTaskDelete+0x110>)
 80041f0:	f7ff fdcf 	bl	8003d92 <vListInsertEnd>

                /* Increment the ucTasksDeleted variable so the idle task knows
                 * there is a task that has been deleted and that it should therefore
                 * check the xTasksWaitingTermination list. */
                ++uxDeletedTasksWaitingCleanUp;
 80041f4:	4b1b      	ldr	r3, [pc, #108]	@ (8004264 <vTaskDelete+0x114>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	3301      	adds	r3, #1
 80041fa:	4a1a      	ldr	r2, [pc, #104]	@ (8004264 <vTaskDelete+0x114>)
 80041fc:	6013      	str	r3, [r2, #0]
                /* Call the delete hook before portPRE_TASK_DELETE_HOOK() as
                 * portPRE_TASK_DELETE_HOOK() does not return in the Win32 port. */
                traceTASK_DELETE( pxTCB );

                /* Delete the task TCB in idle task. */
                xDeleteTCBInIdleTask = pdTRUE;
 80041fe:	2301      	movs	r3, #1
 8004200:	617b      	str	r3, [r7, #20]
 8004202:	e006      	b.n	8004212 <vTaskDelete+0xc2>
                }
                #endif /* #if ( configNUMBER_OF_CORES > 1 ) */
            }
            else
            {
                --uxCurrentNumberOfTasks;
 8004204:	4b18      	ldr	r3, [pc, #96]	@ (8004268 <vTaskDelete+0x118>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	3b01      	subs	r3, #1
 800420a:	4a17      	ldr	r2, [pc, #92]	@ (8004268 <vTaskDelete+0x118>)
 800420c:	6013      	str	r3, [r2, #0]
                traceTASK_DELETE( pxTCB );

                /* Reset the next expected unblock time in case it referred to
                 * the task that has just been deleted. */
                prvResetNextTaskUnblockTime();
 800420e:	f000 fbb5 	bl	800497c <prvResetNextTaskUnblockTime>
            }
        }
        taskEXIT_CRITICAL();
 8004212:	f7ff fb7b 	bl	800390c <vPortExitCritical>

        /* If the task is not deleting itself, call prvDeleteTCB from outside of
         * critical section. If a task deletes itself, prvDeleteTCB is called
         * from prvCheckTasksWaitingTermination which is called from Idle task. */
        if( xDeleteTCBInIdleTask != pdTRUE )
 8004216:	697b      	ldr	r3, [r7, #20]
 8004218:	2b01      	cmp	r3, #1
 800421a:	d002      	beq.n	8004222 <vTaskDelete+0xd2>
        {
            prvDeleteTCB( pxTCB );
 800421c:	6938      	ldr	r0, [r7, #16]
 800421e:	f000 fb9d 	bl	800495c <prvDeleteTCB>

        /* Force a reschedule if it is the currently running task that has just
         * been deleted. */
        #if ( configNUMBER_OF_CORES == 1 )
        {
            if( xSchedulerRunning != pdFALSE )
 8004222:	4b0e      	ldr	r3, [pc, #56]	@ (800425c <vTaskDelete+0x10c>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d00c      	beq.n	8004244 <vTaskDelete+0xf4>
            {
                if( pxTCB == pxCurrentTCB )
 800422a:	4b08      	ldr	r3, [pc, #32]	@ (800424c <vTaskDelete+0xfc>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	693a      	ldr	r2, [r7, #16]
 8004230:	429a      	cmp	r2, r3
 8004232:	d107      	bne.n	8004244 <vTaskDelete+0xf4>
                {
                    configASSERT( uxSchedulerSuspended == 0 );
                    taskYIELD_WITHIN_API();
 8004234:	4b0d      	ldr	r3, [pc, #52]	@ (800426c <vTaskDelete+0x11c>)
 8004236:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800423a:	601a      	str	r2, [r3, #0]
 800423c:	f3bf 8f4f 	dsb	sy
 8004240:	f3bf 8f6f 	isb	sy
            }
        }
        #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

        traceRETURN_vTaskDelete();
    }
 8004244:	bf00      	nop
 8004246:	3718      	adds	r7, #24
 8004248:	46bd      	mov	sp, r7
 800424a:	bd80      	pop	{r7, pc}
 800424c:	20002f14 	.word	0x20002f14
 8004250:	20002f18 	.word	0x20002f18
 8004254:	20002ff4 	.word	0x20002ff4
 8004258:	20003008 	.word	0x20003008
 800425c:	20002ff8 	.word	0x20002ff8
 8004260:	20002fc0 	.word	0x20002fc0
 8004264:	20002fd4 	.word	0x20002fd4
 8004268:	20002fec 	.word	0x20002fec
 800426c:	e000ed04 	.word	0xe000ed04

08004270 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8004270:	b580      	push	{r7, lr}
 8004272:	b084      	sub	sp, #16
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8004278:	2300      	movs	r3, #0
 800427a:	60fb      	str	r3, [r7, #12]

        traceENTER_vTaskDelay( xTicksToDelay );

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d008      	beq.n	8004294 <vTaskDelay+0x24>
        {
            vTaskSuspendAll();
 8004282:	f000 f891 	bl	80043a8 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004286:	2100      	movs	r1, #0
 8004288:	6878      	ldr	r0, [r7, #4]
 800428a:	f000 fbaf 	bl	80049ec <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 800428e:	f000 f899 	bl	80043c4 <xTaskResumeAll>
 8004292:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d107      	bne.n	80042aa <vTaskDelay+0x3a>
        {
            taskYIELD_WITHIN_API();
 800429a:	4b06      	ldr	r3, [pc, #24]	@ (80042b4 <vTaskDelay+0x44>)
 800429c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80042a0:	601a      	str	r2, [r3, #0]
 80042a2:	f3bf 8f4f 	dsb	sy
 80042a6:	f3bf 8f6f 	isb	sy
        {
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_vTaskDelay();
    }
 80042aa:	bf00      	nop
 80042ac:	3710      	adds	r7, #16
 80042ae:	46bd      	mov	sp, r7
 80042b0:	bd80      	pop	{r7, pc}
 80042b2:	bf00      	nop
 80042b4:	e000ed04 	.word	0xe000ed04

080042b8 <prvCreateIdleTasks>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

static BaseType_t prvCreateIdleTasks( void )
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b08a      	sub	sp, #40	@ 0x28
 80042bc:	af02      	add	r7, sp, #8
    BaseType_t xReturn = pdPASS;
 80042be:	2301      	movs	r3, #1
 80042c0:	61fb      	str	r3, [r7, #28]
    BaseType_t xCoreID;
    char cIdleName[ configMAX_TASK_NAME_LEN ];
    TaskFunction_t pxIdleTaskFunction = NULL;
 80042c2:	2300      	movs	r3, #0
 80042c4:	613b      	str	r3, [r7, #16]
    BaseType_t xIdleTaskNameIndex;

    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 80042c6:	2300      	movs	r3, #0
 80042c8:	617b      	str	r3, [r7, #20]
 80042ca:	e011      	b.n	80042f0 <prvCreateIdleTasks+0x38>
    {
        cIdleName[ xIdleTaskNameIndex ] = configIDLE_TASK_NAME[ xIdleTaskNameIndex ];
 80042cc:	4a1c      	ldr	r2, [pc, #112]	@ (8004340 <prvCreateIdleTasks+0x88>)
 80042ce:	697b      	ldr	r3, [r7, #20]
 80042d0:	4413      	add	r3, r2
 80042d2:	7819      	ldrb	r1, [r3, #0]
 80042d4:	463a      	mov	r2, r7
 80042d6:	697b      	ldr	r3, [r7, #20]
 80042d8:	4413      	add	r3, r2
 80042da:	460a      	mov	r2, r1
 80042dc:	701a      	strb	r2, [r3, #0]

        /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
         * configMAX_TASK_NAME_LEN characters just in case the memory after the
         * string is not accessible (extremely unlikely). */
        if( cIdleName[ xIdleTaskNameIndex ] == ( char ) 0x00 )
 80042de:	463a      	mov	r2, r7
 80042e0:	697b      	ldr	r3, [r7, #20]
 80042e2:	4413      	add	r3, r2
 80042e4:	781b      	ldrb	r3, [r3, #0]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d006      	beq.n	80042f8 <prvCreateIdleTasks+0x40>
    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 80042ea:	697b      	ldr	r3, [r7, #20]
 80042ec:	3301      	adds	r3, #1
 80042ee:	617b      	str	r3, [r7, #20]
 80042f0:	697b      	ldr	r3, [r7, #20]
 80042f2:	2b0f      	cmp	r3, #15
 80042f4:	ddea      	ble.n	80042cc <prvCreateIdleTasks+0x14>
 80042f6:	e000      	b.n	80042fa <prvCreateIdleTasks+0x42>
        {
            break;
 80042f8:	bf00      	nop
            mtCOVERAGE_TEST_MARKER();
        }
    }

    /* Add each idle task at the lowest priority. */
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 80042fa:	2300      	movs	r3, #0
 80042fc:	61bb      	str	r3, [r7, #24]
 80042fe:	e015      	b.n	800432c <prvCreateIdleTasks+0x74>
    {
        #if ( configNUMBER_OF_CORES == 1 )
        {
            pxIdleTaskFunction = prvIdleTask;
 8004300:	4b10      	ldr	r3, [pc, #64]	@ (8004344 <prvCreateIdleTasks+0x8c>)
 8004302:	613b      	str	r3, [r7, #16]
            }
        }
        #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( pxIdleTaskFunction,
 8004304:	69bb      	ldr	r3, [r7, #24]
 8004306:	009b      	lsls	r3, r3, #2
 8004308:	4a0f      	ldr	r2, [pc, #60]	@ (8004348 <prvCreateIdleTasks+0x90>)
 800430a:	4413      	add	r3, r2
 800430c:	4639      	mov	r1, r7
 800430e:	9301      	str	r3, [sp, #4]
 8004310:	2300      	movs	r3, #0
 8004312:	9300      	str	r3, [sp, #0]
 8004314:	2300      	movs	r3, #0
 8004316:	2280      	movs	r2, #128	@ 0x80
 8004318:	6938      	ldr	r0, [r7, #16]
 800431a:	f7ff fdfa 	bl	8003f12 <xTaskCreate>
 800431e:	61f8      	str	r0, [r7, #28]
                                   &xIdleTaskHandles[ xCoreID ] );
        }
        #endif /* configSUPPORT_STATIC_ALLOCATION */

        /* Break the loop if any of the idle task is failed to be created. */
        if( xReturn == pdFAIL )
 8004320:	69fb      	ldr	r3, [r7, #28]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d006      	beq.n	8004334 <prvCreateIdleTasks+0x7c>
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 8004326:	69bb      	ldr	r3, [r7, #24]
 8004328:	3301      	adds	r3, #1
 800432a:	61bb      	str	r3, [r7, #24]
 800432c:	69bb      	ldr	r3, [r7, #24]
 800432e:	2b00      	cmp	r3, #0
 8004330:	dde6      	ble.n	8004300 <prvCreateIdleTasks+0x48>
 8004332:	e000      	b.n	8004336 <prvCreateIdleTasks+0x7e>
        {
            break;
 8004334:	bf00      	nop
            }
            #endif
        }
    }

    return xReturn;
 8004336:	69fb      	ldr	r3, [r7, #28]
}
 8004338:	4618      	mov	r0, r3
 800433a:	3720      	adds	r7, #32
 800433c:	46bd      	mov	sp, r7
 800433e:	bd80      	pop	{r7, pc}
 8004340:	080092f0 	.word	0x080092f0
 8004344:	08004851 	.word	0x08004851
 8004348:	20003010 	.word	0x20003010

0800434c <vTaskStartScheduler>:

/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b082      	sub	sp, #8
 8004350:	af00      	add	r7, sp, #0
         * the number of bits as confNUMBER_OF_CORES. */
        configASSERT( ( sizeof( UBaseType_t ) * taskBITS_PER_BYTE ) >= configNUMBER_OF_CORES );
    }
    #endif /* #if ( configUSE_CORE_AFFINITY == 1 ) && ( configNUMBER_OF_CORES > 1 ) */

    xReturn = prvCreateIdleTasks();
 8004352:	f7ff ffb1 	bl	80042b8 <prvCreateIdleTasks>
 8004356:	6078      	str	r0, [r7, #4]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2b01      	cmp	r3, #1
 800435c:	d115      	bne.n	800438a <vTaskStartScheduler+0x3e>
    __asm volatile
 800435e:	f04f 03bf 	mov.w	r3, #191	@ 0xbf
 8004362:	f383 8811 	msr	BASEPRI, r3
 8004366:	f3bf 8f6f 	isb	sy
 800436a:	f3bf 8f4f 	dsb	sy
 800436e:	603b      	str	r3, [r7, #0]
}
 8004370:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8004372:	4b09      	ldr	r3, [pc, #36]	@ (8004398 <vTaskStartScheduler+0x4c>)
 8004374:	f04f 32ff 	mov.w	r2, #4294967295
 8004378:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800437a:	4b08      	ldr	r3, [pc, #32]	@ (800439c <vTaskStartScheduler+0x50>)
 800437c:	2201      	movs	r2, #1
 800437e:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004380:	4b07      	ldr	r3, [pc, #28]	@ (80043a0 <vTaskStartScheduler+0x54>)
 8004382:	2200      	movs	r2, #0
 8004384:	601a      	str	r2, [r3, #0]
        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */

        /* The return value for xPortStartScheduler is not required
         * hence using a void datatype. */
        ( void ) xPortStartScheduler();
 8004386:	f7ff fa79 	bl	800387c <xPortStartScheduler>
     * meaning xIdleTaskHandles are not used anywhere else. */
    ( void ) xIdleTaskHandles;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800438a:	4b06      	ldr	r3, [pc, #24]	@ (80043a4 <vTaskStartScheduler+0x58>)
 800438c:	681b      	ldr	r3, [r3, #0]

    traceRETURN_vTaskStartScheduler();
}
 800438e:	bf00      	nop
 8004390:	3708      	adds	r7, #8
 8004392:	46bd      	mov	sp, r7
 8004394:	bd80      	pop	{r7, pc}
 8004396:	bf00      	nop
 8004398:	2000300c 	.word	0x2000300c
 800439c:	20002ff8 	.word	0x20002ff8
 80043a0:	20002ff0 	.word	0x20002ff0
 80043a4:	20000410 	.word	0x20000410

080043a8 <vTaskSuspendAll>:
    traceRETURN_vTaskEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80043a8:	b480      	push	{r7}
 80043aa:	af00      	add	r7, sp, #0
         * do not otherwise exhibit real time behaviour. */
        portSOFTWARE_BARRIER();

        /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
         * is used to allow calls to vTaskSuspendAll() to nest. */
        uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended + 1U );
 80043ac:	4b04      	ldr	r3, [pc, #16]	@ (80043c0 <vTaskSuspendAll+0x18>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	3301      	adds	r3, #1
 80043b2:	4a03      	ldr	r2, [pc, #12]	@ (80043c0 <vTaskSuspendAll+0x18>)
 80043b4:	6013      	str	r3, [r2, #0]
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_vTaskSuspendAll();
}
 80043b6:	bf00      	nop
 80043b8:	46bd      	mov	sp, r7
 80043ba:	bc80      	pop	{r7}
 80043bc:	4770      	bx	lr
 80043be:	bf00      	nop
 80043c0:	20003014 	.word	0x20003014

080043c4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b088      	sub	sp, #32
 80043c8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80043ca:	2300      	movs	r3, #0
 80043cc:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 80043ce:	2300      	movs	r3, #0
 80043d0:	61bb      	str	r3, [r7, #24]
        /* It is possible that an ISR caused a task to be removed from an event
         * list while the scheduler was suspended.  If this was the case then the
         * removed task will have been added to the xPendingReadyList.  Once the
         * scheduler has been resumed it is safe to move all the pending ready
         * tasks from this list into their appropriate ready list. */
        taskENTER_CRITICAL();
 80043d2:	f7ff fa81 	bl	80038d8 <vPortEnterCritical>
        {
            BaseType_t xCoreID;
            xCoreID = ( BaseType_t ) portGET_CORE_ID();
 80043d6:	2300      	movs	r3, #0
 80043d8:	613b      	str	r3, [r7, #16]

            /* If uxSchedulerSuspended is zero then this function does not match a
             * previous call to vTaskSuspendAll(). */
            configASSERT( uxSchedulerSuspended != 0U );

            uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended - 1U );
 80043da:	4b6d      	ldr	r3, [pc, #436]	@ (8004590 <xTaskResumeAll+0x1cc>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	3b01      	subs	r3, #1
 80043e0:	4a6b      	ldr	r2, [pc, #428]	@ (8004590 <xTaskResumeAll+0x1cc>)
 80043e2:	6013      	str	r3, [r2, #0]
            portRELEASE_TASK_LOCK();

            if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 80043e4:	4b6a      	ldr	r3, [pc, #424]	@ (8004590 <xTaskResumeAll+0x1cc>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	f040 80ca 	bne.w	8004582 <xTaskResumeAll+0x1be>
            {
                if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80043ee:	4b69      	ldr	r3, [pc, #420]	@ (8004594 <xTaskResumeAll+0x1d0>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	f000 80c5 	beq.w	8004582 <xTaskResumeAll+0x1be>
                {
                    /* Move any readied tasks from the pending list into the
                     * appropriate ready list. */
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80043f8:	e08e      	b.n	8004518 <xTaskResumeAll+0x154>
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80043fa:	4b67      	ldr	r3, [pc, #412]	@ (8004598 <xTaskResumeAll+0x1d4>)
 80043fc:	68db      	ldr	r3, [r3, #12]
 80043fe:	68db      	ldr	r3, [r3, #12]
 8004400:	61fb      	str	r3, [r7, #28]
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8004402:	69fb      	ldr	r3, [r7, #28]
 8004404:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004406:	60fb      	str	r3, [r7, #12]
 8004408:	69fb      	ldr	r3, [r7, #28]
 800440a:	69db      	ldr	r3, [r3, #28]
 800440c:	69fa      	ldr	r2, [r7, #28]
 800440e:	6a12      	ldr	r2, [r2, #32]
 8004410:	609a      	str	r2, [r3, #8]
 8004412:	69fb      	ldr	r3, [r7, #28]
 8004414:	6a1b      	ldr	r3, [r3, #32]
 8004416:	69fa      	ldr	r2, [r7, #28]
 8004418:	69d2      	ldr	r2, [r2, #28]
 800441a:	605a      	str	r2, [r3, #4]
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	685a      	ldr	r2, [r3, #4]
 8004420:	69fb      	ldr	r3, [r7, #28]
 8004422:	3318      	adds	r3, #24
 8004424:	429a      	cmp	r2, r3
 8004426:	d103      	bne.n	8004430 <xTaskResumeAll+0x6c>
 8004428:	69fb      	ldr	r3, [r7, #28]
 800442a:	6a1a      	ldr	r2, [r3, #32]
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	605a      	str	r2, [r3, #4]
 8004430:	69fb      	ldr	r3, [r7, #28]
 8004432:	2200      	movs	r2, #0
 8004434:	629a      	str	r2, [r3, #40]	@ 0x28
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	1e5a      	subs	r2, r3, #1
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	601a      	str	r2, [r3, #0]
                        portMEMORY_BARRIER();
                        listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8004440:	69fb      	ldr	r3, [r7, #28]
 8004442:	695b      	ldr	r3, [r3, #20]
 8004444:	60bb      	str	r3, [r7, #8]
 8004446:	69fb      	ldr	r3, [r7, #28]
 8004448:	689b      	ldr	r3, [r3, #8]
 800444a:	69fa      	ldr	r2, [r7, #28]
 800444c:	68d2      	ldr	r2, [r2, #12]
 800444e:	609a      	str	r2, [r3, #8]
 8004450:	69fb      	ldr	r3, [r7, #28]
 8004452:	68db      	ldr	r3, [r3, #12]
 8004454:	69fa      	ldr	r2, [r7, #28]
 8004456:	6892      	ldr	r2, [r2, #8]
 8004458:	605a      	str	r2, [r3, #4]
 800445a:	68bb      	ldr	r3, [r7, #8]
 800445c:	685a      	ldr	r2, [r3, #4]
 800445e:	69fb      	ldr	r3, [r7, #28]
 8004460:	3304      	adds	r3, #4
 8004462:	429a      	cmp	r2, r3
 8004464:	d103      	bne.n	800446e <xTaskResumeAll+0xaa>
 8004466:	69fb      	ldr	r3, [r7, #28]
 8004468:	68da      	ldr	r2, [r3, #12]
 800446a:	68bb      	ldr	r3, [r7, #8]
 800446c:	605a      	str	r2, [r3, #4]
 800446e:	69fb      	ldr	r3, [r7, #28]
 8004470:	2200      	movs	r2, #0
 8004472:	615a      	str	r2, [r3, #20]
 8004474:	68bb      	ldr	r3, [r7, #8]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	1e5a      	subs	r2, r3, #1
 800447a:	68bb      	ldr	r3, [r7, #8]
 800447c:	601a      	str	r2, [r3, #0]
                        prvAddTaskToReadyList( pxTCB );
 800447e:	69fb      	ldr	r3, [r7, #28]
 8004480:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004482:	2201      	movs	r2, #1
 8004484:	409a      	lsls	r2, r3
 8004486:	4b45      	ldr	r3, [pc, #276]	@ (800459c <xTaskResumeAll+0x1d8>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4313      	orrs	r3, r2
 800448c:	4a43      	ldr	r2, [pc, #268]	@ (800459c <xTaskResumeAll+0x1d8>)
 800448e:	6013      	str	r3, [r2, #0]
 8004490:	69fb      	ldr	r3, [r7, #28]
 8004492:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004494:	4942      	ldr	r1, [pc, #264]	@ (80045a0 <xTaskResumeAll+0x1dc>)
 8004496:	4613      	mov	r3, r2
 8004498:	009b      	lsls	r3, r3, #2
 800449a:	4413      	add	r3, r2
 800449c:	009b      	lsls	r3, r3, #2
 800449e:	440b      	add	r3, r1
 80044a0:	3304      	adds	r3, #4
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	607b      	str	r3, [r7, #4]
 80044a6:	69fb      	ldr	r3, [r7, #28]
 80044a8:	687a      	ldr	r2, [r7, #4]
 80044aa:	609a      	str	r2, [r3, #8]
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	689a      	ldr	r2, [r3, #8]
 80044b0:	69fb      	ldr	r3, [r7, #28]
 80044b2:	60da      	str	r2, [r3, #12]
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	689b      	ldr	r3, [r3, #8]
 80044b8:	69fa      	ldr	r2, [r7, #28]
 80044ba:	3204      	adds	r2, #4
 80044bc:	605a      	str	r2, [r3, #4]
 80044be:	69fb      	ldr	r3, [r7, #28]
 80044c0:	1d1a      	adds	r2, r3, #4
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	609a      	str	r2, [r3, #8]
 80044c6:	69fb      	ldr	r3, [r7, #28]
 80044c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80044ca:	4613      	mov	r3, r2
 80044cc:	009b      	lsls	r3, r3, #2
 80044ce:	4413      	add	r3, r2
 80044d0:	009b      	lsls	r3, r3, #2
 80044d2:	4a33      	ldr	r2, [pc, #204]	@ (80045a0 <xTaskResumeAll+0x1dc>)
 80044d4:	441a      	add	r2, r3
 80044d6:	69fb      	ldr	r3, [r7, #28]
 80044d8:	615a      	str	r2, [r3, #20]
 80044da:	69fb      	ldr	r3, [r7, #28]
 80044dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80044de:	4930      	ldr	r1, [pc, #192]	@ (80045a0 <xTaskResumeAll+0x1dc>)
 80044e0:	4613      	mov	r3, r2
 80044e2:	009b      	lsls	r3, r3, #2
 80044e4:	4413      	add	r3, r2
 80044e6:	009b      	lsls	r3, r3, #2
 80044e8:	440b      	add	r3, r1
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	69fa      	ldr	r2, [r7, #28]
 80044ee:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80044f0:	1c59      	adds	r1, r3, #1
 80044f2:	482b      	ldr	r0, [pc, #172]	@ (80045a0 <xTaskResumeAll+0x1dc>)
 80044f4:	4613      	mov	r3, r2
 80044f6:	009b      	lsls	r3, r3, #2
 80044f8:	4413      	add	r3, r2
 80044fa:	009b      	lsls	r3, r3, #2
 80044fc:	4403      	add	r3, r0
 80044fe:	6019      	str	r1, [r3, #0]

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            /* If the moved task has a priority higher than the current
                             * task then a yield must be performed. */
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004500:	69fb      	ldr	r3, [r7, #28]
 8004502:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004504:	4b27      	ldr	r3, [pc, #156]	@ (80045a4 <xTaskResumeAll+0x1e0>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800450a:	429a      	cmp	r2, r3
 800450c:	d904      	bls.n	8004518 <xTaskResumeAll+0x154>
                            {
                                xYieldPendings[ xCoreID ] = pdTRUE;
 800450e:	4a26      	ldr	r2, [pc, #152]	@ (80045a8 <xTaskResumeAll+0x1e4>)
 8004510:	693b      	ldr	r3, [r7, #16]
 8004512:	2101      	movs	r1, #1
 8004514:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004518:	4b1f      	ldr	r3, [pc, #124]	@ (8004598 <xTaskResumeAll+0x1d4>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	2b00      	cmp	r3, #0
 800451e:	f47f af6c 	bne.w	80043fa <xTaskResumeAll+0x36>
                             * which sets xYieldPendings for the current core to pdTRUE. */
                        }
                        #endif /* #if ( configNUMBER_OF_CORES == 1 ) */
                    }

                    if( pxTCB != NULL )
 8004522:	69fb      	ldr	r3, [r7, #28]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d001      	beq.n	800452c <xTaskResumeAll+0x168>
                         * which may have prevented the next unblock time from being
                         * re-calculated, in which case re-calculate it now.  Mainly
                         * important for low power tickless implementations, where
                         * this can prevent an unnecessary exit from low power
                         * state. */
                        prvResetNextTaskUnblockTime();
 8004528:	f000 fa28 	bl	800497c <prvResetNextTaskUnblockTime>
                     * It should be safe to call xTaskIncrementTick here from any core
                     * since we are in a critical section and xTaskIncrementTick itself
                     * protects itself within a critical section. Suspending the scheduler
                     * from any core causes xTaskIncrementTick to increment uxPendedCounts. */
                    {
                        TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800452c:	4b1f      	ldr	r3, [pc, #124]	@ (80045ac <xTaskResumeAll+0x1e8>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	617b      	str	r3, [r7, #20]

                        if( xPendedCounts > ( TickType_t ) 0U )
 8004532:	697b      	ldr	r3, [r7, #20]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d012      	beq.n	800455e <xTaskResumeAll+0x19a>
                        {
                            do
                            {
                                if( xTaskIncrementTick() != pdFALSE )
 8004538:	f000 f83c 	bl	80045b4 <xTaskIncrementTick>
 800453c:	4603      	mov	r3, r0
 800453e:	2b00      	cmp	r3, #0
 8004540:	d004      	beq.n	800454c <xTaskResumeAll+0x188>
                                {
                                    /* Other cores are interrupted from
                                     * within xTaskIncrementTick(). */
                                    xYieldPendings[ xCoreID ] = pdTRUE;
 8004542:	4a19      	ldr	r2, [pc, #100]	@ (80045a8 <xTaskResumeAll+0x1e4>)
 8004544:	693b      	ldr	r3, [r7, #16]
 8004546:	2101      	movs	r1, #1
 8004548:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                else
                                {
                                    mtCOVERAGE_TEST_MARKER();
                                }

                                --xPendedCounts;
 800454c:	697b      	ldr	r3, [r7, #20]
 800454e:	3b01      	subs	r3, #1
 8004550:	617b      	str	r3, [r7, #20]
                            } while( xPendedCounts > ( TickType_t ) 0U );
 8004552:	697b      	ldr	r3, [r7, #20]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d1ef      	bne.n	8004538 <xTaskResumeAll+0x174>

                            xPendedTicks = 0;
 8004558:	4b14      	ldr	r3, [pc, #80]	@ (80045ac <xTaskResumeAll+0x1e8>)
 800455a:	2200      	movs	r2, #0
 800455c:	601a      	str	r2, [r3, #0]
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }

                    if( xYieldPendings[ xCoreID ] != pdFALSE )
 800455e:	4a12      	ldr	r2, [pc, #72]	@ (80045a8 <xTaskResumeAll+0x1e4>)
 8004560:	693b      	ldr	r3, [r7, #16]
 8004562:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d00b      	beq.n	8004582 <xTaskResumeAll+0x1be>
                    {
                        #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 800456a:	2301      	movs	r3, #1
 800456c:	61bb      	str	r3, [r7, #24]
                        }
                        #endif /* #if ( configUSE_PREEMPTION != 0 ) */

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            taskYIELD_TASK_CORE_IF_USING_PREEMPTION( pxCurrentTCB );
 800456e:	4b0d      	ldr	r3, [pc, #52]	@ (80045a4 <xTaskResumeAll+0x1e0>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	4b0f      	ldr	r3, [pc, #60]	@ (80045b0 <xTaskResumeAll+0x1ec>)
 8004574:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004578:	601a      	str	r2, [r3, #0]
 800457a:	f3bf 8f4f 	dsb	sy
 800457e:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8004582:	f7ff f9c3 	bl	800390c <vPortExitCritical>
    }

    traceRETURN_xTaskResumeAll( xAlreadyYielded );

    return xAlreadyYielded;
 8004586:	69bb      	ldr	r3, [r7, #24]
}
 8004588:	4618      	mov	r0, r3
 800458a:	3720      	adds	r7, #32
 800458c:	46bd      	mov	sp, r7
 800458e:	bd80      	pop	{r7, pc}
 8004590:	20003014 	.word	0x20003014
 8004594:	20002fec 	.word	0x20002fec
 8004598:	20002fac 	.word	0x20002fac
 800459c:	20002ff4 	.word	0x20002ff4
 80045a0:	20002f18 	.word	0x20002f18
 80045a4:	20002f14 	.word	0x20002f14
 80045a8:	20003000 	.word	0x20003000
 80045ac:	20002ffc 	.word	0x20002ffc
 80045b0:	e000ed04 	.word	0xe000ed04

080045b4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b088      	sub	sp, #32
 80045b8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80045ba:	2300      	movs	r3, #0
 80045bc:	61fb      	str	r3, [r7, #28]

    /* Tick increment should occur on every kernel timer event. Core 0 has the
     * responsibility to increment the tick, or increment the pended ticks if the
     * scheduler is suspended.  If pended ticks is greater than zero, the core that
     * calls xTaskResumeAll has the responsibility to increment the tick. */
    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 80045be:	4b76      	ldr	r3, [pc, #472]	@ (8004798 <xTaskIncrementTick+0x1e4>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	f040 80de 	bne.w	8004784 <xTaskIncrementTick+0x1d0>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80045c8:	4b74      	ldr	r3, [pc, #464]	@ (800479c <xTaskIncrementTick+0x1e8>)
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	3301      	adds	r3, #1
 80045ce:	61bb      	str	r3, [r7, #24]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80045d0:	4a72      	ldr	r2, [pc, #456]	@ (800479c <xTaskIncrementTick+0x1e8>)
 80045d2:	69bb      	ldr	r3, [r7, #24]
 80045d4:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U )
 80045d6:	69bb      	ldr	r3, [r7, #24]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d110      	bne.n	80045fe <xTaskIncrementTick+0x4a>
        {
            taskSWITCH_DELAYED_LISTS();
 80045dc:	4b70      	ldr	r3, [pc, #448]	@ (80047a0 <xTaskIncrementTick+0x1ec>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	617b      	str	r3, [r7, #20]
 80045e2:	4b70      	ldr	r3, [pc, #448]	@ (80047a4 <xTaskIncrementTick+0x1f0>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4a6e      	ldr	r2, [pc, #440]	@ (80047a0 <xTaskIncrementTick+0x1ec>)
 80045e8:	6013      	str	r3, [r2, #0]
 80045ea:	4a6e      	ldr	r2, [pc, #440]	@ (80047a4 <xTaskIncrementTick+0x1f0>)
 80045ec:	697b      	ldr	r3, [r7, #20]
 80045ee:	6013      	str	r3, [r2, #0]
 80045f0:	4b6d      	ldr	r3, [pc, #436]	@ (80047a8 <xTaskIncrementTick+0x1f4>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	3301      	adds	r3, #1
 80045f6:	4a6c      	ldr	r2, [pc, #432]	@ (80047a8 <xTaskIncrementTick+0x1f4>)
 80045f8:	6013      	str	r3, [r2, #0]
 80045fa:	f000 f9bf 	bl	800497c <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80045fe:	4b6b      	ldr	r3, [pc, #428]	@ (80047ac <xTaskIncrementTick+0x1f8>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	69ba      	ldr	r2, [r7, #24]
 8004604:	429a      	cmp	r2, r3
 8004606:	f0c0 80a8 	bcc.w	800475a <xTaskIncrementTick+0x1a6>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800460a:	4b65      	ldr	r3, [pc, #404]	@ (80047a0 <xTaskIncrementTick+0x1ec>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d104      	bne.n	800461e <xTaskIncrementTick+0x6a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY;
 8004614:	4b65      	ldr	r3, [pc, #404]	@ (80047ac <xTaskIncrementTick+0x1f8>)
 8004616:	f04f 32ff 	mov.w	r2, #4294967295
 800461a:	601a      	str	r2, [r3, #0]
                    break;
 800461c:	e09d      	b.n	800475a <xTaskIncrementTick+0x1a6>
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    /* MISRA Ref 11.5.3 [Void pointer assignment] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                    /* coverity[misra_c_2012_rule_11_5_violation] */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800461e:	4b60      	ldr	r3, [pc, #384]	@ (80047a0 <xTaskIncrementTick+0x1ec>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	68db      	ldr	r3, [r3, #12]
 8004624:	68db      	ldr	r3, [r3, #12]
 8004626:	613b      	str	r3, [r7, #16]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004628:	693b      	ldr	r3, [r7, #16]
 800462a:	685b      	ldr	r3, [r3, #4]
 800462c:	60fb      	str	r3, [r7, #12]

                    if( xConstTickCount < xItemValue )
 800462e:	69ba      	ldr	r2, [r7, #24]
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	429a      	cmp	r2, r3
 8004634:	d203      	bcs.n	800463e <xTaskIncrementTick+0x8a>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8004636:	4a5d      	ldr	r2, [pc, #372]	@ (80047ac <xTaskIncrementTick+0x1f8>)
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	6013      	str	r3, [r2, #0]
                        break;
 800463c:	e08d      	b.n	800475a <xTaskIncrementTick+0x1a6>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800463e:	693b      	ldr	r3, [r7, #16]
 8004640:	695b      	ldr	r3, [r3, #20]
 8004642:	60bb      	str	r3, [r7, #8]
 8004644:	693b      	ldr	r3, [r7, #16]
 8004646:	689b      	ldr	r3, [r3, #8]
 8004648:	693a      	ldr	r2, [r7, #16]
 800464a:	68d2      	ldr	r2, [r2, #12]
 800464c:	609a      	str	r2, [r3, #8]
 800464e:	693b      	ldr	r3, [r7, #16]
 8004650:	68db      	ldr	r3, [r3, #12]
 8004652:	693a      	ldr	r2, [r7, #16]
 8004654:	6892      	ldr	r2, [r2, #8]
 8004656:	605a      	str	r2, [r3, #4]
 8004658:	68bb      	ldr	r3, [r7, #8]
 800465a:	685a      	ldr	r2, [r3, #4]
 800465c:	693b      	ldr	r3, [r7, #16]
 800465e:	3304      	adds	r3, #4
 8004660:	429a      	cmp	r2, r3
 8004662:	d103      	bne.n	800466c <xTaskIncrementTick+0xb8>
 8004664:	693b      	ldr	r3, [r7, #16]
 8004666:	68da      	ldr	r2, [r3, #12]
 8004668:	68bb      	ldr	r3, [r7, #8]
 800466a:	605a      	str	r2, [r3, #4]
 800466c:	693b      	ldr	r3, [r7, #16]
 800466e:	2200      	movs	r2, #0
 8004670:	615a      	str	r2, [r3, #20]
 8004672:	68bb      	ldr	r3, [r7, #8]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	1e5a      	subs	r2, r3, #1
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800467c:	693b      	ldr	r3, [r7, #16]
 800467e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004680:	2b00      	cmp	r3, #0
 8004682:	d01e      	beq.n	80046c2 <xTaskIncrementTick+0x10e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8004684:	693b      	ldr	r3, [r7, #16]
 8004686:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004688:	607b      	str	r3, [r7, #4]
 800468a:	693b      	ldr	r3, [r7, #16]
 800468c:	69db      	ldr	r3, [r3, #28]
 800468e:	693a      	ldr	r2, [r7, #16]
 8004690:	6a12      	ldr	r2, [r2, #32]
 8004692:	609a      	str	r2, [r3, #8]
 8004694:	693b      	ldr	r3, [r7, #16]
 8004696:	6a1b      	ldr	r3, [r3, #32]
 8004698:	693a      	ldr	r2, [r7, #16]
 800469a:	69d2      	ldr	r2, [r2, #28]
 800469c:	605a      	str	r2, [r3, #4]
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	685a      	ldr	r2, [r3, #4]
 80046a2:	693b      	ldr	r3, [r7, #16]
 80046a4:	3318      	adds	r3, #24
 80046a6:	429a      	cmp	r2, r3
 80046a8:	d103      	bne.n	80046b2 <xTaskIncrementTick+0xfe>
 80046aa:	693b      	ldr	r3, [r7, #16]
 80046ac:	6a1a      	ldr	r2, [r3, #32]
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	605a      	str	r2, [r3, #4]
 80046b2:	693b      	ldr	r3, [r7, #16]
 80046b4:	2200      	movs	r2, #0
 80046b6:	629a      	str	r2, [r3, #40]	@ 0x28
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	1e5a      	subs	r2, r3, #1
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80046c2:	693b      	ldr	r3, [r7, #16]
 80046c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046c6:	2201      	movs	r2, #1
 80046c8:	409a      	lsls	r2, r3
 80046ca:	4b39      	ldr	r3, [pc, #228]	@ (80047b0 <xTaskIncrementTick+0x1fc>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4313      	orrs	r3, r2
 80046d0:	4a37      	ldr	r2, [pc, #220]	@ (80047b0 <xTaskIncrementTick+0x1fc>)
 80046d2:	6013      	str	r3, [r2, #0]
 80046d4:	693b      	ldr	r3, [r7, #16]
 80046d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80046d8:	4936      	ldr	r1, [pc, #216]	@ (80047b4 <xTaskIncrementTick+0x200>)
 80046da:	4613      	mov	r3, r2
 80046dc:	009b      	lsls	r3, r3, #2
 80046de:	4413      	add	r3, r2
 80046e0:	009b      	lsls	r3, r3, #2
 80046e2:	440b      	add	r3, r1
 80046e4:	3304      	adds	r3, #4
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	603b      	str	r3, [r7, #0]
 80046ea:	693b      	ldr	r3, [r7, #16]
 80046ec:	683a      	ldr	r2, [r7, #0]
 80046ee:	609a      	str	r2, [r3, #8]
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	689a      	ldr	r2, [r3, #8]
 80046f4:	693b      	ldr	r3, [r7, #16]
 80046f6:	60da      	str	r2, [r3, #12]
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	689b      	ldr	r3, [r3, #8]
 80046fc:	693a      	ldr	r2, [r7, #16]
 80046fe:	3204      	adds	r2, #4
 8004700:	605a      	str	r2, [r3, #4]
 8004702:	693b      	ldr	r3, [r7, #16]
 8004704:	1d1a      	adds	r2, r3, #4
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	609a      	str	r2, [r3, #8]
 800470a:	693b      	ldr	r3, [r7, #16]
 800470c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800470e:	4613      	mov	r3, r2
 8004710:	009b      	lsls	r3, r3, #2
 8004712:	4413      	add	r3, r2
 8004714:	009b      	lsls	r3, r3, #2
 8004716:	4a27      	ldr	r2, [pc, #156]	@ (80047b4 <xTaskIncrementTick+0x200>)
 8004718:	441a      	add	r2, r3
 800471a:	693b      	ldr	r3, [r7, #16]
 800471c:	615a      	str	r2, [r3, #20]
 800471e:	693b      	ldr	r3, [r7, #16]
 8004720:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004722:	4924      	ldr	r1, [pc, #144]	@ (80047b4 <xTaskIncrementTick+0x200>)
 8004724:	4613      	mov	r3, r2
 8004726:	009b      	lsls	r3, r3, #2
 8004728:	4413      	add	r3, r2
 800472a:	009b      	lsls	r3, r3, #2
 800472c:	440b      	add	r3, r1
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	693a      	ldr	r2, [r7, #16]
 8004732:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004734:	1c59      	adds	r1, r3, #1
 8004736:	481f      	ldr	r0, [pc, #124]	@ (80047b4 <xTaskIncrementTick+0x200>)
 8004738:	4613      	mov	r3, r2
 800473a:	009b      	lsls	r3, r3, #2
 800473c:	4413      	add	r3, r2
 800473e:	009b      	lsls	r3, r3, #2
 8004740:	4403      	add	r3, r0
 8004742:	6019      	str	r1, [r3, #0]
                             * task.
                             * The case of equal priority tasks sharing
                             * processing time (which happens when both
                             * preemption and time slicing are on) is
                             * handled below.*/
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004744:	693b      	ldr	r3, [r7, #16]
 8004746:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004748:	4b1b      	ldr	r3, [pc, #108]	@ (80047b8 <xTaskIncrementTick+0x204>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800474e:	429a      	cmp	r2, r3
 8004750:	f67f af5b 	bls.w	800460a <xTaskIncrementTick+0x56>
                            {
                                xSwitchRequired = pdTRUE;
 8004754:	2301      	movs	r3, #1
 8004756:	61fb      	str	r3, [r7, #28]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004758:	e757      	b.n	800460a <xTaskIncrementTick+0x56>
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > 1U )
 800475a:	4b17      	ldr	r3, [pc, #92]	@ (80047b8 <xTaskIncrementTick+0x204>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004760:	4914      	ldr	r1, [pc, #80]	@ (80047b4 <xTaskIncrementTick+0x200>)
 8004762:	4613      	mov	r3, r2
 8004764:	009b      	lsls	r3, r3, #2
 8004766:	4413      	add	r3, r2
 8004768:	009b      	lsls	r3, r3, #2
 800476a:	440b      	add	r3, r1
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	2b01      	cmp	r3, #1
 8004770:	d901      	bls.n	8004776 <xTaskIncrementTick+0x1c2>
                {
                    xSwitchRequired = pdTRUE;
 8004772:	2301      	movs	r3, #1
 8004774:	61fb      	str	r3, [r7, #28]
        #if ( configUSE_PREEMPTION == 1 )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                /* For single core the core ID is always 0. */
                if( xYieldPendings[ 0 ] != pdFALSE )
 8004776:	4b11      	ldr	r3, [pc, #68]	@ (80047bc <xTaskIncrementTick+0x208>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d007      	beq.n	800478e <xTaskIncrementTick+0x1da>
                {
                    xSwitchRequired = pdTRUE;
 800477e:	2301      	movs	r3, #1
 8004780:	61fb      	str	r3, [r7, #28]
 8004782:	e004      	b.n	800478e <xTaskIncrementTick+0x1da>
        }
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    else
    {
        xPendedTicks += 1U;
 8004784:	4b0e      	ldr	r3, [pc, #56]	@ (80047c0 <xTaskIncrementTick+0x20c>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	3301      	adds	r3, #1
 800478a:	4a0d      	ldr	r2, [pc, #52]	@ (80047c0 <xTaskIncrementTick+0x20c>)
 800478c:	6013      	str	r3, [r2, #0]
        #endif
    }

    traceRETURN_xTaskIncrementTick( xSwitchRequired );

    return xSwitchRequired;
 800478e:	69fb      	ldr	r3, [r7, #28]
}
 8004790:	4618      	mov	r0, r3
 8004792:	3720      	adds	r7, #32
 8004794:	46bd      	mov	sp, r7
 8004796:	bd80      	pop	{r7, pc}
 8004798:	20003014 	.word	0x20003014
 800479c:	20002ff0 	.word	0x20002ff0
 80047a0:	20002fa4 	.word	0x20002fa4
 80047a4:	20002fa8 	.word	0x20002fa8
 80047a8:	20003004 	.word	0x20003004
 80047ac:	2000300c 	.word	0x2000300c
 80047b0:	20002ff4 	.word	0x20002ff4
 80047b4:	20002f18 	.word	0x20002f18
 80047b8:	20002f14 	.word	0x20002f14
 80047bc:	20003000 	.word	0x20003000
 80047c0:	20002ffc 	.word	0x20002ffc

080047c4 <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )
    void vTaskSwitchContext( void )
    {
 80047c4:	b480      	push	{r7}
 80047c6:	b085      	sub	sp, #20
 80047c8:	af00      	add	r7, sp, #0
        traceENTER_vTaskSwitchContext();

        if( uxSchedulerSuspended != ( UBaseType_t ) 0U )
 80047ca:	4b1c      	ldr	r3, [pc, #112]	@ (800483c <vTaskSwitchContext+0x78>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d003      	beq.n	80047da <vTaskSwitchContext+0x16>
        {
            /* The scheduler is currently suspended - do not allow a context
             * switch. */
            xYieldPendings[ 0 ] = pdTRUE;
 80047d2:	4b1b      	ldr	r3, [pc, #108]	@ (8004840 <vTaskSwitchContext+0x7c>)
 80047d4:	2201      	movs	r2, #1
 80047d6:	601a      	str	r2, [r3, #0]
            }
            #endif
        }

        traceRETURN_vTaskSwitchContext();
    }
 80047d8:	e02b      	b.n	8004832 <vTaskSwitchContext+0x6e>
            xYieldPendings[ 0 ] = pdFALSE;
 80047da:	4b19      	ldr	r3, [pc, #100]	@ (8004840 <vTaskSwitchContext+0x7c>)
 80047dc:	2200      	movs	r2, #0
 80047de:	601a      	str	r2, [r3, #0]
            taskSELECT_HIGHEST_PRIORITY_TASK();
 80047e0:	4b18      	ldr	r3, [pc, #96]	@ (8004844 <vTaskSwitchContext+0x80>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	607b      	str	r3, [r7, #4]
        __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	fab3 f383 	clz	r3, r3
 80047ec:	70fb      	strb	r3, [r7, #3]
        return ucReturn;
 80047ee:	78fb      	ldrb	r3, [r7, #3]
 80047f0:	f1c3 031f 	rsb	r3, r3, #31
 80047f4:	60fb      	str	r3, [r7, #12]
 80047f6:	68fa      	ldr	r2, [r7, #12]
 80047f8:	4613      	mov	r3, r2
 80047fa:	009b      	lsls	r3, r3, #2
 80047fc:	4413      	add	r3, r2
 80047fe:	009b      	lsls	r3, r3, #2
 8004800:	4a11      	ldr	r2, [pc, #68]	@ (8004848 <vTaskSwitchContext+0x84>)
 8004802:	4413      	add	r3, r2
 8004804:	60bb      	str	r3, [r7, #8]
 8004806:	68bb      	ldr	r3, [r7, #8]
 8004808:	685b      	ldr	r3, [r3, #4]
 800480a:	685a      	ldr	r2, [r3, #4]
 800480c:	68bb      	ldr	r3, [r7, #8]
 800480e:	605a      	str	r2, [r3, #4]
 8004810:	68bb      	ldr	r3, [r7, #8]
 8004812:	685a      	ldr	r2, [r3, #4]
 8004814:	68bb      	ldr	r3, [r7, #8]
 8004816:	3308      	adds	r3, #8
 8004818:	429a      	cmp	r2, r3
 800481a:	d103      	bne.n	8004824 <vTaskSwitchContext+0x60>
 800481c:	68bb      	ldr	r3, [r7, #8]
 800481e:	68da      	ldr	r2, [r3, #12]
 8004820:	68bb      	ldr	r3, [r7, #8]
 8004822:	605a      	str	r2, [r3, #4]
 8004824:	68bb      	ldr	r3, [r7, #8]
 8004826:	685b      	ldr	r3, [r3, #4]
 8004828:	68db      	ldr	r3, [r3, #12]
 800482a:	4a08      	ldr	r2, [pc, #32]	@ (800484c <vTaskSwitchContext+0x88>)
 800482c:	6013      	str	r3, [r2, #0]
            portTASK_SWITCH_HOOK( pxCurrentTCB );
 800482e:	4b07      	ldr	r3, [pc, #28]	@ (800484c <vTaskSwitchContext+0x88>)
 8004830:	681b      	ldr	r3, [r3, #0]
    }
 8004832:	bf00      	nop
 8004834:	3714      	adds	r7, #20
 8004836:	46bd      	mov	sp, r7
 8004838:	bc80      	pop	{r7}
 800483a:	4770      	bx	lr
 800483c:	20003014 	.word	0x20003014
 8004840:	20003000 	.word	0x20003000
 8004844:	20002ff4 	.word	0x20002ff4
 8004848:	20002f18 	.word	0x20002f18
 800484c:	20002f14 	.word	0x20002f14

08004850 <prvIdleTask>:
 * void prvIdleTask( void *pvParameters );
 *
 */

static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b082      	sub	sp, #8
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]

    for( ; configCONTROL_INFINITE_LOOP(); )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8004858:	f000 f852 	bl	8004900 <prvCheckTasksWaitingTermination>
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains one more task than the
             * number of idle tasks, which is equal to the configured numbers of cores
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) configNUMBER_OF_CORES )
 800485c:	4b06      	ldr	r3, [pc, #24]	@ (8004878 <prvIdleTask+0x28>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	2b01      	cmp	r3, #1
 8004862:	d9f9      	bls.n	8004858 <prvIdleTask+0x8>
            {
                taskYIELD();
 8004864:	4b05      	ldr	r3, [pc, #20]	@ (800487c <prvIdleTask+0x2c>)
 8004866:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800486a:	601a      	str	r2, [r3, #0]
 800486c:	f3bf 8f4f 	dsb	sy
 8004870:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8004874:	e7f0      	b.n	8004858 <prvIdleTask+0x8>
 8004876:	bf00      	nop
 8004878:	20002f18 	.word	0x20002f18
 800487c:	e000ed04 	.word	0xe000ed04

08004880 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b082      	sub	sp, #8
 8004884:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004886:	2300      	movs	r3, #0
 8004888:	607b      	str	r3, [r7, #4]
 800488a:	e00c      	b.n	80048a6 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800488c:	687a      	ldr	r2, [r7, #4]
 800488e:	4613      	mov	r3, r2
 8004890:	009b      	lsls	r3, r3, #2
 8004892:	4413      	add	r3, r2
 8004894:	009b      	lsls	r3, r3, #2
 8004896:	4a12      	ldr	r2, [pc, #72]	@ (80048e0 <prvInitialiseTaskLists+0x60>)
 8004898:	4413      	add	r3, r2
 800489a:	4618      	mov	r0, r3
 800489c:	f7ff fa4e 	bl	8003d3c <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	3301      	adds	r3, #1
 80048a4:	607b      	str	r3, [r7, #4]
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2b04      	cmp	r3, #4
 80048aa:	d9ef      	bls.n	800488c <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80048ac:	480d      	ldr	r0, [pc, #52]	@ (80048e4 <prvInitialiseTaskLists+0x64>)
 80048ae:	f7ff fa45 	bl	8003d3c <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80048b2:	480d      	ldr	r0, [pc, #52]	@ (80048e8 <prvInitialiseTaskLists+0x68>)
 80048b4:	f7ff fa42 	bl	8003d3c <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80048b8:	480c      	ldr	r0, [pc, #48]	@ (80048ec <prvInitialiseTaskLists+0x6c>)
 80048ba:	f7ff fa3f 	bl	8003d3c <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 80048be:	480c      	ldr	r0, [pc, #48]	@ (80048f0 <prvInitialiseTaskLists+0x70>)
 80048c0:	f7ff fa3c 	bl	8003d3c <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 80048c4:	480b      	ldr	r0, [pc, #44]	@ (80048f4 <prvInitialiseTaskLists+0x74>)
 80048c6:	f7ff fa39 	bl	8003d3c <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80048ca:	4b0b      	ldr	r3, [pc, #44]	@ (80048f8 <prvInitialiseTaskLists+0x78>)
 80048cc:	4a05      	ldr	r2, [pc, #20]	@ (80048e4 <prvInitialiseTaskLists+0x64>)
 80048ce:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80048d0:	4b0a      	ldr	r3, [pc, #40]	@ (80048fc <prvInitialiseTaskLists+0x7c>)
 80048d2:	4a05      	ldr	r2, [pc, #20]	@ (80048e8 <prvInitialiseTaskLists+0x68>)
 80048d4:	601a      	str	r2, [r3, #0]
}
 80048d6:	bf00      	nop
 80048d8:	3708      	adds	r7, #8
 80048da:	46bd      	mov	sp, r7
 80048dc:	bd80      	pop	{r7, pc}
 80048de:	bf00      	nop
 80048e0:	20002f18 	.word	0x20002f18
 80048e4:	20002f7c 	.word	0x20002f7c
 80048e8:	20002f90 	.word	0x20002f90
 80048ec:	20002fac 	.word	0x20002fac
 80048f0:	20002fc0 	.word	0x20002fc0
 80048f4:	20002fd8 	.word	0x20002fd8
 80048f8:	20002fa4 	.word	0x20002fa4
 80048fc:	20002fa8 	.word	0x20002fa8

08004900 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b082      	sub	sp, #8
 8004904:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004906:	e019      	b.n	800493c <prvCheckTasksWaitingTermination+0x3c>
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                taskENTER_CRITICAL();
 8004908:	f7fe ffe6 	bl	80038d8 <vPortEnterCritical>
                {
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800490c:	4b10      	ldr	r3, [pc, #64]	@ (8004950 <prvCheckTasksWaitingTermination+0x50>)
 800490e:	68db      	ldr	r3, [r3, #12]
 8004910:	68db      	ldr	r3, [r3, #12]
 8004912:	607b      	str	r3, [r7, #4]
                        ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	3304      	adds	r3, #4
 8004918:	4618      	mov	r0, r3
 800491a:	f7ff fa95 	bl	8003e48 <uxListRemove>
                        --uxCurrentNumberOfTasks;
 800491e:	4b0d      	ldr	r3, [pc, #52]	@ (8004954 <prvCheckTasksWaitingTermination+0x54>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	3b01      	subs	r3, #1
 8004924:	4a0b      	ldr	r2, [pc, #44]	@ (8004954 <prvCheckTasksWaitingTermination+0x54>)
 8004926:	6013      	str	r3, [r2, #0]
                        --uxDeletedTasksWaitingCleanUp;
 8004928:	4b0b      	ldr	r3, [pc, #44]	@ (8004958 <prvCheckTasksWaitingTermination+0x58>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	3b01      	subs	r3, #1
 800492e:	4a0a      	ldr	r2, [pc, #40]	@ (8004958 <prvCheckTasksWaitingTermination+0x58>)
 8004930:	6013      	str	r3, [r2, #0]
                    }
                }
                taskEXIT_CRITICAL();
 8004932:	f7fe ffeb 	bl	800390c <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8004936:	6878      	ldr	r0, [r7, #4]
 8004938:	f000 f810 	bl	800495c <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800493c:	4b06      	ldr	r3, [pc, #24]	@ (8004958 <prvCheckTasksWaitingTermination+0x58>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d1e1      	bne.n	8004908 <prvCheckTasksWaitingTermination+0x8>
            }
            #endif /* #if( configNUMBER_OF_CORES == 1 ) */
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8004944:	bf00      	nop
 8004946:	bf00      	nop
 8004948:	3708      	adds	r7, #8
 800494a:	46bd      	mov	sp, r7
 800494c:	bd80      	pop	{r7, pc}
 800494e:	bf00      	nop
 8004950:	20002fc0 	.word	0x20002fc0
 8004954:	20002fec 	.word	0x20002fec
 8004958:	20002fd4 	.word	0x20002fd4

0800495c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 800495c:	b580      	push	{r7, lr}
 800495e:	b082      	sub	sp, #8
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004968:	4618      	mov	r0, r3
 800496a:	f7ff f8f7 	bl	8003b5c <vPortFree>
            vPortFree( pxTCB );
 800496e:	6878      	ldr	r0, [r7, #4]
 8004970:	f7ff f8f4 	bl	8003b5c <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8004974:	bf00      	nop
 8004976:	3708      	adds	r7, #8
 8004978:	46bd      	mov	sp, r7
 800497a:	bd80      	pop	{r7, pc}

0800497c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800497c:	b480      	push	{r7}
 800497e:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004980:	4b09      	ldr	r3, [pc, #36]	@ (80049a8 <prvResetNextTaskUnblockTime+0x2c>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d104      	bne.n	8004994 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800498a:	4b08      	ldr	r3, [pc, #32]	@ (80049ac <prvResetNextTaskUnblockTime+0x30>)
 800498c:	f04f 32ff 	mov.w	r2, #4294967295
 8004990:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8004992:	e005      	b.n	80049a0 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004994:	4b04      	ldr	r3, [pc, #16]	@ (80049a8 <prvResetNextTaskUnblockTime+0x2c>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	68db      	ldr	r3, [r3, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4a03      	ldr	r2, [pc, #12]	@ (80049ac <prvResetNextTaskUnblockTime+0x30>)
 800499e:	6013      	str	r3, [r2, #0]
}
 80049a0:	bf00      	nop
 80049a2:	46bd      	mov	sp, r7
 80049a4:	bc80      	pop	{r7}
 80049a6:	4770      	bx	lr
 80049a8:	20002fa4 	.word	0x20002fa4
 80049ac:	2000300c 	.word	0x2000300c

080049b0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 80049b0:	b480      	push	{r7}
 80049b2:	b083      	sub	sp, #12
 80049b4:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        traceENTER_xTaskGetSchedulerState();

        if( xSchedulerRunning == pdFALSE )
 80049b6:	4b0b      	ldr	r3, [pc, #44]	@ (80049e4 <xTaskGetSchedulerState+0x34>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d102      	bne.n	80049c4 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 80049be:	2301      	movs	r3, #1
 80049c0:	607b      	str	r3, [r7, #4]
 80049c2:	e008      	b.n	80049d6 <xTaskGetSchedulerState+0x26>
        {
            #if ( configNUMBER_OF_CORES > 1 )
                taskENTER_CRITICAL();
            #endif
            {
                if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 80049c4:	4b08      	ldr	r3, [pc, #32]	@ (80049e8 <xTaskGetSchedulerState+0x38>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d102      	bne.n	80049d2 <xTaskGetSchedulerState+0x22>
                {
                    xReturn = taskSCHEDULER_RUNNING;
 80049cc:	2302      	movs	r3, #2
 80049ce:	607b      	str	r3, [r7, #4]
 80049d0:	e001      	b.n	80049d6 <xTaskGetSchedulerState+0x26>
                }
                else
                {
                    xReturn = taskSCHEDULER_SUSPENDED;
 80049d2:	2300      	movs	r3, #0
 80049d4:	607b      	str	r3, [r7, #4]
            #endif
        }

        traceRETURN_xTaskGetSchedulerState( xReturn );

        return xReturn;
 80049d6:	687b      	ldr	r3, [r7, #4]
    }
 80049d8:	4618      	mov	r0, r3
 80049da:	370c      	adds	r7, #12
 80049dc:	46bd      	mov	sp, r7
 80049de:	bc80      	pop	{r7}
 80049e0:	4770      	bx	lr
 80049e2:	bf00      	nop
 80049e4:	20002ff8 	.word	0x20002ff8
 80049e8:	20003014 	.word	0x20003014

080049ec <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b088      	sub	sp, #32
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
 80049f4:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80049f6:	4b37      	ldr	r3, [pc, #220]	@ (8004ad4 <prvAddCurrentTaskToDelayedList+0xe8>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	61fb      	str	r3, [r7, #28]
    List_t * const pxDelayedList = pxDelayedTaskList;
 80049fc:	4b36      	ldr	r3, [pc, #216]	@ (8004ad8 <prvAddCurrentTaskToDelayedList+0xec>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	61bb      	str	r3, [r7, #24]
    List_t * const pxOverflowDelayedList = pxOverflowDelayedTaskList;
 8004a02:	4b36      	ldr	r3, [pc, #216]	@ (8004adc <prvAddCurrentTaskToDelayedList+0xf0>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004a08:	4b35      	ldr	r3, [pc, #212]	@ (8004ae0 <prvAddCurrentTaskToDelayedList+0xf4>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	3304      	adds	r3, #4
 8004a0e:	4618      	mov	r0, r3
 8004a10:	f7ff fa1a 	bl	8003e48 <uxListRemove>
 8004a14:	4603      	mov	r3, r0
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d10b      	bne.n	8004a32 <prvAddCurrentTaskToDelayedList+0x46>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8004a1a:	4b31      	ldr	r3, [pc, #196]	@ (8004ae0 <prvAddCurrentTaskToDelayedList+0xf4>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a20:	2201      	movs	r2, #1
 8004a22:	fa02 f303 	lsl.w	r3, r2, r3
 8004a26:	43da      	mvns	r2, r3
 8004a28:	4b2e      	ldr	r3, [pc, #184]	@ (8004ae4 <prvAddCurrentTaskToDelayedList+0xf8>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4013      	ands	r3, r2
 8004a2e:	4a2d      	ldr	r2, [pc, #180]	@ (8004ae4 <prvAddCurrentTaskToDelayedList+0xf8>)
 8004a30:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a38:	d124      	bne.n	8004a84 <prvAddCurrentTaskToDelayedList+0x98>
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d021      	beq.n	8004a84 <prvAddCurrentTaskToDelayedList+0x98>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004a40:	4b29      	ldr	r3, [pc, #164]	@ (8004ae8 <prvAddCurrentTaskToDelayedList+0xfc>)
 8004a42:	685b      	ldr	r3, [r3, #4]
 8004a44:	613b      	str	r3, [r7, #16]
 8004a46:	4b26      	ldr	r3, [pc, #152]	@ (8004ae0 <prvAddCurrentTaskToDelayedList+0xf4>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	693a      	ldr	r2, [r7, #16]
 8004a4c:	609a      	str	r2, [r3, #8]
 8004a4e:	4b24      	ldr	r3, [pc, #144]	@ (8004ae0 <prvAddCurrentTaskToDelayedList+0xf4>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	693a      	ldr	r2, [r7, #16]
 8004a54:	6892      	ldr	r2, [r2, #8]
 8004a56:	60da      	str	r2, [r3, #12]
 8004a58:	4b21      	ldr	r3, [pc, #132]	@ (8004ae0 <prvAddCurrentTaskToDelayedList+0xf4>)
 8004a5a:	681a      	ldr	r2, [r3, #0]
 8004a5c:	693b      	ldr	r3, [r7, #16]
 8004a5e:	689b      	ldr	r3, [r3, #8]
 8004a60:	3204      	adds	r2, #4
 8004a62:	605a      	str	r2, [r3, #4]
 8004a64:	4b1e      	ldr	r3, [pc, #120]	@ (8004ae0 <prvAddCurrentTaskToDelayedList+0xf4>)
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	1d1a      	adds	r2, r3, #4
 8004a6a:	693b      	ldr	r3, [r7, #16]
 8004a6c:	609a      	str	r2, [r3, #8]
 8004a6e:	4b1c      	ldr	r3, [pc, #112]	@ (8004ae0 <prvAddCurrentTaskToDelayedList+0xf4>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	4a1d      	ldr	r2, [pc, #116]	@ (8004ae8 <prvAddCurrentTaskToDelayedList+0xfc>)
 8004a74:	615a      	str	r2, [r3, #20]
 8004a76:	4b1c      	ldr	r3, [pc, #112]	@ (8004ae8 <prvAddCurrentTaskToDelayedList+0xfc>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	3301      	adds	r3, #1
 8004a7c:	4a1a      	ldr	r2, [pc, #104]	@ (8004ae8 <prvAddCurrentTaskToDelayedList+0xfc>)
 8004a7e:	6013      	str	r3, [r2, #0]
 8004a80:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8004a82:	e022      	b.n	8004aca <prvAddCurrentTaskToDelayedList+0xde>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8004a84:	69fa      	ldr	r2, [r7, #28]
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	4413      	add	r3, r2
 8004a8a:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004a8c:	4b14      	ldr	r3, [pc, #80]	@ (8004ae0 <prvAddCurrentTaskToDelayedList+0xf4>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	68fa      	ldr	r2, [r7, #12]
 8004a92:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8004a94:	68fa      	ldr	r2, [r7, #12]
 8004a96:	69fb      	ldr	r3, [r7, #28]
 8004a98:	429a      	cmp	r2, r3
 8004a9a:	d207      	bcs.n	8004aac <prvAddCurrentTaskToDelayedList+0xc0>
                vListInsert( pxOverflowDelayedList, &( pxCurrentTCB->xStateListItem ) );
 8004a9c:	4b10      	ldr	r3, [pc, #64]	@ (8004ae0 <prvAddCurrentTaskToDelayedList+0xf4>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	3304      	adds	r3, #4
 8004aa2:	4619      	mov	r1, r3
 8004aa4:	6978      	ldr	r0, [r7, #20]
 8004aa6:	f7ff f997 	bl	8003dd8 <vListInsert>
}
 8004aaa:	e00e      	b.n	8004aca <prvAddCurrentTaskToDelayedList+0xde>
                vListInsert( pxDelayedList, &( pxCurrentTCB->xStateListItem ) );
 8004aac:	4b0c      	ldr	r3, [pc, #48]	@ (8004ae0 <prvAddCurrentTaskToDelayedList+0xf4>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	3304      	adds	r3, #4
 8004ab2:	4619      	mov	r1, r3
 8004ab4:	69b8      	ldr	r0, [r7, #24]
 8004ab6:	f7ff f98f 	bl	8003dd8 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8004aba:	4b0c      	ldr	r3, [pc, #48]	@ (8004aec <prvAddCurrentTaskToDelayedList+0x100>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	68fa      	ldr	r2, [r7, #12]
 8004ac0:	429a      	cmp	r2, r3
 8004ac2:	d202      	bcs.n	8004aca <prvAddCurrentTaskToDelayedList+0xde>
                    xNextTaskUnblockTime = xTimeToWake;
 8004ac4:	4a09      	ldr	r2, [pc, #36]	@ (8004aec <prvAddCurrentTaskToDelayedList+0x100>)
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	6013      	str	r3, [r2, #0]
}
 8004aca:	bf00      	nop
 8004acc:	3720      	adds	r7, #32
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	bd80      	pop	{r7, pc}
 8004ad2:	bf00      	nop
 8004ad4:	20002ff0 	.word	0x20002ff0
 8004ad8:	20002fa4 	.word	0x20002fa4
 8004adc:	20002fa8 	.word	0x20002fa8
 8004ae0:	20002f14 	.word	0x20002f14
 8004ae4:	20002ff4 	.word	0x20002ff4
 8004ae8:	20002fd8 	.word	0x20002fd8
 8004aec:	2000300c 	.word	0x2000300c

08004af0 <__cvt>:
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004af6:	461d      	mov	r5, r3
 8004af8:	bfbb      	ittet	lt
 8004afa:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8004afe:	461d      	movlt	r5, r3
 8004b00:	2300      	movge	r3, #0
 8004b02:	232d      	movlt	r3, #45	@ 0x2d
 8004b04:	b088      	sub	sp, #32
 8004b06:	4614      	mov	r4, r2
 8004b08:	bfb8      	it	lt
 8004b0a:	4614      	movlt	r4, r2
 8004b0c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8004b0e:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8004b10:	7013      	strb	r3, [r2, #0]
 8004b12:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004b14:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8004b18:	f023 0820 	bic.w	r8, r3, #32
 8004b1c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004b20:	d005      	beq.n	8004b2e <__cvt+0x3e>
 8004b22:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8004b26:	d100      	bne.n	8004b2a <__cvt+0x3a>
 8004b28:	3601      	adds	r6, #1
 8004b2a:	2302      	movs	r3, #2
 8004b2c:	e000      	b.n	8004b30 <__cvt+0x40>
 8004b2e:	2303      	movs	r3, #3
 8004b30:	aa07      	add	r2, sp, #28
 8004b32:	9204      	str	r2, [sp, #16]
 8004b34:	aa06      	add	r2, sp, #24
 8004b36:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004b3a:	e9cd 3600 	strd	r3, r6, [sp]
 8004b3e:	4622      	mov	r2, r4
 8004b40:	462b      	mov	r3, r5
 8004b42:	f001 f981 	bl	8005e48 <_dtoa_r>
 8004b46:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8004b4a:	4607      	mov	r7, r0
 8004b4c:	d119      	bne.n	8004b82 <__cvt+0x92>
 8004b4e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8004b50:	07db      	lsls	r3, r3, #31
 8004b52:	d50e      	bpl.n	8004b72 <__cvt+0x82>
 8004b54:	eb00 0906 	add.w	r9, r0, r6
 8004b58:	2200      	movs	r2, #0
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	4620      	mov	r0, r4
 8004b5e:	4629      	mov	r1, r5
 8004b60:	f7fb ff22 	bl	80009a8 <__aeabi_dcmpeq>
 8004b64:	b108      	cbz	r0, 8004b6a <__cvt+0x7a>
 8004b66:	f8cd 901c 	str.w	r9, [sp, #28]
 8004b6a:	2230      	movs	r2, #48	@ 0x30
 8004b6c:	9b07      	ldr	r3, [sp, #28]
 8004b6e:	454b      	cmp	r3, r9
 8004b70:	d31e      	bcc.n	8004bb0 <__cvt+0xc0>
 8004b72:	4638      	mov	r0, r7
 8004b74:	9b07      	ldr	r3, [sp, #28]
 8004b76:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8004b78:	1bdb      	subs	r3, r3, r7
 8004b7a:	6013      	str	r3, [r2, #0]
 8004b7c:	b008      	add	sp, #32
 8004b7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b82:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004b86:	eb00 0906 	add.w	r9, r0, r6
 8004b8a:	d1e5      	bne.n	8004b58 <__cvt+0x68>
 8004b8c:	7803      	ldrb	r3, [r0, #0]
 8004b8e:	2b30      	cmp	r3, #48	@ 0x30
 8004b90:	d10a      	bne.n	8004ba8 <__cvt+0xb8>
 8004b92:	2200      	movs	r2, #0
 8004b94:	2300      	movs	r3, #0
 8004b96:	4620      	mov	r0, r4
 8004b98:	4629      	mov	r1, r5
 8004b9a:	f7fb ff05 	bl	80009a8 <__aeabi_dcmpeq>
 8004b9e:	b918      	cbnz	r0, 8004ba8 <__cvt+0xb8>
 8004ba0:	f1c6 0601 	rsb	r6, r6, #1
 8004ba4:	f8ca 6000 	str.w	r6, [sl]
 8004ba8:	f8da 3000 	ldr.w	r3, [sl]
 8004bac:	4499      	add	r9, r3
 8004bae:	e7d3      	b.n	8004b58 <__cvt+0x68>
 8004bb0:	1c59      	adds	r1, r3, #1
 8004bb2:	9107      	str	r1, [sp, #28]
 8004bb4:	701a      	strb	r2, [r3, #0]
 8004bb6:	e7d9      	b.n	8004b6c <__cvt+0x7c>

08004bb8 <__exponent>:
 8004bb8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004bba:	2900      	cmp	r1, #0
 8004bbc:	bfb6      	itet	lt
 8004bbe:	232d      	movlt	r3, #45	@ 0x2d
 8004bc0:	232b      	movge	r3, #43	@ 0x2b
 8004bc2:	4249      	neglt	r1, r1
 8004bc4:	2909      	cmp	r1, #9
 8004bc6:	7002      	strb	r2, [r0, #0]
 8004bc8:	7043      	strb	r3, [r0, #1]
 8004bca:	dd29      	ble.n	8004c20 <__exponent+0x68>
 8004bcc:	f10d 0307 	add.w	r3, sp, #7
 8004bd0:	461d      	mov	r5, r3
 8004bd2:	270a      	movs	r7, #10
 8004bd4:	fbb1 f6f7 	udiv	r6, r1, r7
 8004bd8:	461a      	mov	r2, r3
 8004bda:	fb07 1416 	mls	r4, r7, r6, r1
 8004bde:	3430      	adds	r4, #48	@ 0x30
 8004be0:	f802 4c01 	strb.w	r4, [r2, #-1]
 8004be4:	460c      	mov	r4, r1
 8004be6:	2c63      	cmp	r4, #99	@ 0x63
 8004be8:	4631      	mov	r1, r6
 8004bea:	f103 33ff 	add.w	r3, r3, #4294967295
 8004bee:	dcf1      	bgt.n	8004bd4 <__exponent+0x1c>
 8004bf0:	3130      	adds	r1, #48	@ 0x30
 8004bf2:	1e94      	subs	r4, r2, #2
 8004bf4:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004bf8:	4623      	mov	r3, r4
 8004bfa:	1c41      	adds	r1, r0, #1
 8004bfc:	42ab      	cmp	r3, r5
 8004bfe:	d30a      	bcc.n	8004c16 <__exponent+0x5e>
 8004c00:	f10d 0309 	add.w	r3, sp, #9
 8004c04:	1a9b      	subs	r3, r3, r2
 8004c06:	42ac      	cmp	r4, r5
 8004c08:	bf88      	it	hi
 8004c0a:	2300      	movhi	r3, #0
 8004c0c:	3302      	adds	r3, #2
 8004c0e:	4403      	add	r3, r0
 8004c10:	1a18      	subs	r0, r3, r0
 8004c12:	b003      	add	sp, #12
 8004c14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004c16:	f813 6b01 	ldrb.w	r6, [r3], #1
 8004c1a:	f801 6f01 	strb.w	r6, [r1, #1]!
 8004c1e:	e7ed      	b.n	8004bfc <__exponent+0x44>
 8004c20:	2330      	movs	r3, #48	@ 0x30
 8004c22:	3130      	adds	r1, #48	@ 0x30
 8004c24:	7083      	strb	r3, [r0, #2]
 8004c26:	70c1      	strb	r1, [r0, #3]
 8004c28:	1d03      	adds	r3, r0, #4
 8004c2a:	e7f1      	b.n	8004c10 <__exponent+0x58>

08004c2c <_printf_float>:
 8004c2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c30:	b091      	sub	sp, #68	@ 0x44
 8004c32:	460c      	mov	r4, r1
 8004c34:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8004c38:	4616      	mov	r6, r2
 8004c3a:	461f      	mov	r7, r3
 8004c3c:	4605      	mov	r5, r0
 8004c3e:	f000 ffe3 	bl	8005c08 <_localeconv_r>
 8004c42:	6803      	ldr	r3, [r0, #0]
 8004c44:	4618      	mov	r0, r3
 8004c46:	9308      	str	r3, [sp, #32]
 8004c48:	f7fb fa82 	bl	8000150 <strlen>
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	930e      	str	r3, [sp, #56]	@ 0x38
 8004c50:	f8d8 3000 	ldr.w	r3, [r8]
 8004c54:	9009      	str	r0, [sp, #36]	@ 0x24
 8004c56:	3307      	adds	r3, #7
 8004c58:	f023 0307 	bic.w	r3, r3, #7
 8004c5c:	f103 0208 	add.w	r2, r3, #8
 8004c60:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004c64:	f8d4 b000 	ldr.w	fp, [r4]
 8004c68:	f8c8 2000 	str.w	r2, [r8]
 8004c6c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004c70:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8004c74:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004c76:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8004c7a:	f04f 32ff 	mov.w	r2, #4294967295
 8004c7e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8004c82:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8004c86:	4b9c      	ldr	r3, [pc, #624]	@ (8004ef8 <_printf_float+0x2cc>)
 8004c88:	f7fb fec0 	bl	8000a0c <__aeabi_dcmpun>
 8004c8c:	bb70      	cbnz	r0, 8004cec <_printf_float+0xc0>
 8004c8e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8004c92:	f04f 32ff 	mov.w	r2, #4294967295
 8004c96:	4b98      	ldr	r3, [pc, #608]	@ (8004ef8 <_printf_float+0x2cc>)
 8004c98:	f7fb fe9a 	bl	80009d0 <__aeabi_dcmple>
 8004c9c:	bb30      	cbnz	r0, 8004cec <_printf_float+0xc0>
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	4640      	mov	r0, r8
 8004ca4:	4649      	mov	r1, r9
 8004ca6:	f7fb fe89 	bl	80009bc <__aeabi_dcmplt>
 8004caa:	b110      	cbz	r0, 8004cb2 <_printf_float+0x86>
 8004cac:	232d      	movs	r3, #45	@ 0x2d
 8004cae:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004cb2:	4a92      	ldr	r2, [pc, #584]	@ (8004efc <_printf_float+0x2d0>)
 8004cb4:	4b92      	ldr	r3, [pc, #584]	@ (8004f00 <_printf_float+0x2d4>)
 8004cb6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8004cba:	bf94      	ite	ls
 8004cbc:	4690      	movls	r8, r2
 8004cbe:	4698      	movhi	r8, r3
 8004cc0:	2303      	movs	r3, #3
 8004cc2:	f04f 0900 	mov.w	r9, #0
 8004cc6:	6123      	str	r3, [r4, #16]
 8004cc8:	f02b 0304 	bic.w	r3, fp, #4
 8004ccc:	6023      	str	r3, [r4, #0]
 8004cce:	4633      	mov	r3, r6
 8004cd0:	4621      	mov	r1, r4
 8004cd2:	4628      	mov	r0, r5
 8004cd4:	9700      	str	r7, [sp, #0]
 8004cd6:	aa0f      	add	r2, sp, #60	@ 0x3c
 8004cd8:	f000 f9d4 	bl	8005084 <_printf_common>
 8004cdc:	3001      	adds	r0, #1
 8004cde:	f040 8090 	bne.w	8004e02 <_printf_float+0x1d6>
 8004ce2:	f04f 30ff 	mov.w	r0, #4294967295
 8004ce6:	b011      	add	sp, #68	@ 0x44
 8004ce8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004cec:	4642      	mov	r2, r8
 8004cee:	464b      	mov	r3, r9
 8004cf0:	4640      	mov	r0, r8
 8004cf2:	4649      	mov	r1, r9
 8004cf4:	f7fb fe8a 	bl	8000a0c <__aeabi_dcmpun>
 8004cf8:	b148      	cbz	r0, 8004d0e <_printf_float+0xe2>
 8004cfa:	464b      	mov	r3, r9
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	bfb8      	it	lt
 8004d00:	232d      	movlt	r3, #45	@ 0x2d
 8004d02:	4a80      	ldr	r2, [pc, #512]	@ (8004f04 <_printf_float+0x2d8>)
 8004d04:	bfb8      	it	lt
 8004d06:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8004d0a:	4b7f      	ldr	r3, [pc, #508]	@ (8004f08 <_printf_float+0x2dc>)
 8004d0c:	e7d3      	b.n	8004cb6 <_printf_float+0x8a>
 8004d0e:	6863      	ldr	r3, [r4, #4]
 8004d10:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8004d14:	1c5a      	adds	r2, r3, #1
 8004d16:	d13f      	bne.n	8004d98 <_printf_float+0x16c>
 8004d18:	2306      	movs	r3, #6
 8004d1a:	6063      	str	r3, [r4, #4]
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8004d22:	6023      	str	r3, [r4, #0]
 8004d24:	9206      	str	r2, [sp, #24]
 8004d26:	aa0e      	add	r2, sp, #56	@ 0x38
 8004d28:	e9cd a204 	strd	sl, r2, [sp, #16]
 8004d2c:	aa0d      	add	r2, sp, #52	@ 0x34
 8004d2e:	9203      	str	r2, [sp, #12]
 8004d30:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8004d34:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8004d38:	6863      	ldr	r3, [r4, #4]
 8004d3a:	4642      	mov	r2, r8
 8004d3c:	9300      	str	r3, [sp, #0]
 8004d3e:	4628      	mov	r0, r5
 8004d40:	464b      	mov	r3, r9
 8004d42:	910a      	str	r1, [sp, #40]	@ 0x28
 8004d44:	f7ff fed4 	bl	8004af0 <__cvt>
 8004d48:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8004d4a:	4680      	mov	r8, r0
 8004d4c:	2947      	cmp	r1, #71	@ 0x47
 8004d4e:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8004d50:	d128      	bne.n	8004da4 <_printf_float+0x178>
 8004d52:	1cc8      	adds	r0, r1, #3
 8004d54:	db02      	blt.n	8004d5c <_printf_float+0x130>
 8004d56:	6863      	ldr	r3, [r4, #4]
 8004d58:	4299      	cmp	r1, r3
 8004d5a:	dd40      	ble.n	8004dde <_printf_float+0x1b2>
 8004d5c:	f1aa 0a02 	sub.w	sl, sl, #2
 8004d60:	fa5f fa8a 	uxtb.w	sl, sl
 8004d64:	4652      	mov	r2, sl
 8004d66:	3901      	subs	r1, #1
 8004d68:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8004d6c:	910d      	str	r1, [sp, #52]	@ 0x34
 8004d6e:	f7ff ff23 	bl	8004bb8 <__exponent>
 8004d72:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004d74:	4681      	mov	r9, r0
 8004d76:	1813      	adds	r3, r2, r0
 8004d78:	2a01      	cmp	r2, #1
 8004d7a:	6123      	str	r3, [r4, #16]
 8004d7c:	dc02      	bgt.n	8004d84 <_printf_float+0x158>
 8004d7e:	6822      	ldr	r2, [r4, #0]
 8004d80:	07d2      	lsls	r2, r2, #31
 8004d82:	d501      	bpl.n	8004d88 <_printf_float+0x15c>
 8004d84:	3301      	adds	r3, #1
 8004d86:	6123      	str	r3, [r4, #16]
 8004d88:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d09e      	beq.n	8004cce <_printf_float+0xa2>
 8004d90:	232d      	movs	r3, #45	@ 0x2d
 8004d92:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004d96:	e79a      	b.n	8004cce <_printf_float+0xa2>
 8004d98:	2947      	cmp	r1, #71	@ 0x47
 8004d9a:	d1bf      	bne.n	8004d1c <_printf_float+0xf0>
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d1bd      	bne.n	8004d1c <_printf_float+0xf0>
 8004da0:	2301      	movs	r3, #1
 8004da2:	e7ba      	b.n	8004d1a <_printf_float+0xee>
 8004da4:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004da8:	d9dc      	bls.n	8004d64 <_printf_float+0x138>
 8004daa:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8004dae:	d118      	bne.n	8004de2 <_printf_float+0x1b6>
 8004db0:	2900      	cmp	r1, #0
 8004db2:	6863      	ldr	r3, [r4, #4]
 8004db4:	dd0b      	ble.n	8004dce <_printf_float+0x1a2>
 8004db6:	6121      	str	r1, [r4, #16]
 8004db8:	b913      	cbnz	r3, 8004dc0 <_printf_float+0x194>
 8004dba:	6822      	ldr	r2, [r4, #0]
 8004dbc:	07d0      	lsls	r0, r2, #31
 8004dbe:	d502      	bpl.n	8004dc6 <_printf_float+0x19a>
 8004dc0:	3301      	adds	r3, #1
 8004dc2:	440b      	add	r3, r1
 8004dc4:	6123      	str	r3, [r4, #16]
 8004dc6:	f04f 0900 	mov.w	r9, #0
 8004dca:	65a1      	str	r1, [r4, #88]	@ 0x58
 8004dcc:	e7dc      	b.n	8004d88 <_printf_float+0x15c>
 8004dce:	b913      	cbnz	r3, 8004dd6 <_printf_float+0x1aa>
 8004dd0:	6822      	ldr	r2, [r4, #0]
 8004dd2:	07d2      	lsls	r2, r2, #31
 8004dd4:	d501      	bpl.n	8004dda <_printf_float+0x1ae>
 8004dd6:	3302      	adds	r3, #2
 8004dd8:	e7f4      	b.n	8004dc4 <_printf_float+0x198>
 8004dda:	2301      	movs	r3, #1
 8004ddc:	e7f2      	b.n	8004dc4 <_printf_float+0x198>
 8004dde:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8004de2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004de4:	4299      	cmp	r1, r3
 8004de6:	db05      	blt.n	8004df4 <_printf_float+0x1c8>
 8004de8:	6823      	ldr	r3, [r4, #0]
 8004dea:	6121      	str	r1, [r4, #16]
 8004dec:	07d8      	lsls	r0, r3, #31
 8004dee:	d5ea      	bpl.n	8004dc6 <_printf_float+0x19a>
 8004df0:	1c4b      	adds	r3, r1, #1
 8004df2:	e7e7      	b.n	8004dc4 <_printf_float+0x198>
 8004df4:	2900      	cmp	r1, #0
 8004df6:	bfcc      	ite	gt
 8004df8:	2201      	movgt	r2, #1
 8004dfa:	f1c1 0202 	rsble	r2, r1, #2
 8004dfe:	4413      	add	r3, r2
 8004e00:	e7e0      	b.n	8004dc4 <_printf_float+0x198>
 8004e02:	6823      	ldr	r3, [r4, #0]
 8004e04:	055a      	lsls	r2, r3, #21
 8004e06:	d407      	bmi.n	8004e18 <_printf_float+0x1ec>
 8004e08:	6923      	ldr	r3, [r4, #16]
 8004e0a:	4642      	mov	r2, r8
 8004e0c:	4631      	mov	r1, r6
 8004e0e:	4628      	mov	r0, r5
 8004e10:	47b8      	blx	r7
 8004e12:	3001      	adds	r0, #1
 8004e14:	d12b      	bne.n	8004e6e <_printf_float+0x242>
 8004e16:	e764      	b.n	8004ce2 <_printf_float+0xb6>
 8004e18:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004e1c:	f240 80dc 	bls.w	8004fd8 <_printf_float+0x3ac>
 8004e20:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004e24:	2200      	movs	r2, #0
 8004e26:	2300      	movs	r3, #0
 8004e28:	f7fb fdbe 	bl	80009a8 <__aeabi_dcmpeq>
 8004e2c:	2800      	cmp	r0, #0
 8004e2e:	d033      	beq.n	8004e98 <_printf_float+0x26c>
 8004e30:	2301      	movs	r3, #1
 8004e32:	4631      	mov	r1, r6
 8004e34:	4628      	mov	r0, r5
 8004e36:	4a35      	ldr	r2, [pc, #212]	@ (8004f0c <_printf_float+0x2e0>)
 8004e38:	47b8      	blx	r7
 8004e3a:	3001      	adds	r0, #1
 8004e3c:	f43f af51 	beq.w	8004ce2 <_printf_float+0xb6>
 8004e40:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8004e44:	4543      	cmp	r3, r8
 8004e46:	db02      	blt.n	8004e4e <_printf_float+0x222>
 8004e48:	6823      	ldr	r3, [r4, #0]
 8004e4a:	07d8      	lsls	r0, r3, #31
 8004e4c:	d50f      	bpl.n	8004e6e <_printf_float+0x242>
 8004e4e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004e52:	4631      	mov	r1, r6
 8004e54:	4628      	mov	r0, r5
 8004e56:	47b8      	blx	r7
 8004e58:	3001      	adds	r0, #1
 8004e5a:	f43f af42 	beq.w	8004ce2 <_printf_float+0xb6>
 8004e5e:	f04f 0900 	mov.w	r9, #0
 8004e62:	f108 38ff 	add.w	r8, r8, #4294967295
 8004e66:	f104 0a1a 	add.w	sl, r4, #26
 8004e6a:	45c8      	cmp	r8, r9
 8004e6c:	dc09      	bgt.n	8004e82 <_printf_float+0x256>
 8004e6e:	6823      	ldr	r3, [r4, #0]
 8004e70:	079b      	lsls	r3, r3, #30
 8004e72:	f100 8102 	bmi.w	800507a <_printf_float+0x44e>
 8004e76:	68e0      	ldr	r0, [r4, #12]
 8004e78:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004e7a:	4298      	cmp	r0, r3
 8004e7c:	bfb8      	it	lt
 8004e7e:	4618      	movlt	r0, r3
 8004e80:	e731      	b.n	8004ce6 <_printf_float+0xba>
 8004e82:	2301      	movs	r3, #1
 8004e84:	4652      	mov	r2, sl
 8004e86:	4631      	mov	r1, r6
 8004e88:	4628      	mov	r0, r5
 8004e8a:	47b8      	blx	r7
 8004e8c:	3001      	adds	r0, #1
 8004e8e:	f43f af28 	beq.w	8004ce2 <_printf_float+0xb6>
 8004e92:	f109 0901 	add.w	r9, r9, #1
 8004e96:	e7e8      	b.n	8004e6a <_printf_float+0x23e>
 8004e98:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	dc38      	bgt.n	8004f10 <_printf_float+0x2e4>
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	4631      	mov	r1, r6
 8004ea2:	4628      	mov	r0, r5
 8004ea4:	4a19      	ldr	r2, [pc, #100]	@ (8004f0c <_printf_float+0x2e0>)
 8004ea6:	47b8      	blx	r7
 8004ea8:	3001      	adds	r0, #1
 8004eaa:	f43f af1a 	beq.w	8004ce2 <_printf_float+0xb6>
 8004eae:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8004eb2:	ea59 0303 	orrs.w	r3, r9, r3
 8004eb6:	d102      	bne.n	8004ebe <_printf_float+0x292>
 8004eb8:	6823      	ldr	r3, [r4, #0]
 8004eba:	07d9      	lsls	r1, r3, #31
 8004ebc:	d5d7      	bpl.n	8004e6e <_printf_float+0x242>
 8004ebe:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004ec2:	4631      	mov	r1, r6
 8004ec4:	4628      	mov	r0, r5
 8004ec6:	47b8      	blx	r7
 8004ec8:	3001      	adds	r0, #1
 8004eca:	f43f af0a 	beq.w	8004ce2 <_printf_float+0xb6>
 8004ece:	f04f 0a00 	mov.w	sl, #0
 8004ed2:	f104 0b1a 	add.w	fp, r4, #26
 8004ed6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004ed8:	425b      	negs	r3, r3
 8004eda:	4553      	cmp	r3, sl
 8004edc:	dc01      	bgt.n	8004ee2 <_printf_float+0x2b6>
 8004ede:	464b      	mov	r3, r9
 8004ee0:	e793      	b.n	8004e0a <_printf_float+0x1de>
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	465a      	mov	r2, fp
 8004ee6:	4631      	mov	r1, r6
 8004ee8:	4628      	mov	r0, r5
 8004eea:	47b8      	blx	r7
 8004eec:	3001      	adds	r0, #1
 8004eee:	f43f aef8 	beq.w	8004ce2 <_printf_float+0xb6>
 8004ef2:	f10a 0a01 	add.w	sl, sl, #1
 8004ef6:	e7ee      	b.n	8004ed6 <_printf_float+0x2aa>
 8004ef8:	7fefffff 	.word	0x7fefffff
 8004efc:	08009322 	.word	0x08009322
 8004f00:	08009326 	.word	0x08009326
 8004f04:	0800932a 	.word	0x0800932a
 8004f08:	0800932e 	.word	0x0800932e
 8004f0c:	08009332 	.word	0x08009332
 8004f10:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004f12:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8004f16:	4553      	cmp	r3, sl
 8004f18:	bfa8      	it	ge
 8004f1a:	4653      	movge	r3, sl
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	4699      	mov	r9, r3
 8004f20:	dc36      	bgt.n	8004f90 <_printf_float+0x364>
 8004f22:	f04f 0b00 	mov.w	fp, #0
 8004f26:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004f2a:	f104 021a 	add.w	r2, r4, #26
 8004f2e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004f30:	930a      	str	r3, [sp, #40]	@ 0x28
 8004f32:	eba3 0309 	sub.w	r3, r3, r9
 8004f36:	455b      	cmp	r3, fp
 8004f38:	dc31      	bgt.n	8004f9e <_printf_float+0x372>
 8004f3a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004f3c:	459a      	cmp	sl, r3
 8004f3e:	dc3a      	bgt.n	8004fb6 <_printf_float+0x38a>
 8004f40:	6823      	ldr	r3, [r4, #0]
 8004f42:	07da      	lsls	r2, r3, #31
 8004f44:	d437      	bmi.n	8004fb6 <_printf_float+0x38a>
 8004f46:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004f48:	ebaa 0903 	sub.w	r9, sl, r3
 8004f4c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004f4e:	ebaa 0303 	sub.w	r3, sl, r3
 8004f52:	4599      	cmp	r9, r3
 8004f54:	bfa8      	it	ge
 8004f56:	4699      	movge	r9, r3
 8004f58:	f1b9 0f00 	cmp.w	r9, #0
 8004f5c:	dc33      	bgt.n	8004fc6 <_printf_float+0x39a>
 8004f5e:	f04f 0800 	mov.w	r8, #0
 8004f62:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004f66:	f104 0b1a 	add.w	fp, r4, #26
 8004f6a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004f6c:	ebaa 0303 	sub.w	r3, sl, r3
 8004f70:	eba3 0309 	sub.w	r3, r3, r9
 8004f74:	4543      	cmp	r3, r8
 8004f76:	f77f af7a 	ble.w	8004e6e <_printf_float+0x242>
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	465a      	mov	r2, fp
 8004f7e:	4631      	mov	r1, r6
 8004f80:	4628      	mov	r0, r5
 8004f82:	47b8      	blx	r7
 8004f84:	3001      	adds	r0, #1
 8004f86:	f43f aeac 	beq.w	8004ce2 <_printf_float+0xb6>
 8004f8a:	f108 0801 	add.w	r8, r8, #1
 8004f8e:	e7ec      	b.n	8004f6a <_printf_float+0x33e>
 8004f90:	4642      	mov	r2, r8
 8004f92:	4631      	mov	r1, r6
 8004f94:	4628      	mov	r0, r5
 8004f96:	47b8      	blx	r7
 8004f98:	3001      	adds	r0, #1
 8004f9a:	d1c2      	bne.n	8004f22 <_printf_float+0x2f6>
 8004f9c:	e6a1      	b.n	8004ce2 <_printf_float+0xb6>
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	4631      	mov	r1, r6
 8004fa2:	4628      	mov	r0, r5
 8004fa4:	920a      	str	r2, [sp, #40]	@ 0x28
 8004fa6:	47b8      	blx	r7
 8004fa8:	3001      	adds	r0, #1
 8004faa:	f43f ae9a 	beq.w	8004ce2 <_printf_float+0xb6>
 8004fae:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004fb0:	f10b 0b01 	add.w	fp, fp, #1
 8004fb4:	e7bb      	b.n	8004f2e <_printf_float+0x302>
 8004fb6:	4631      	mov	r1, r6
 8004fb8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004fbc:	4628      	mov	r0, r5
 8004fbe:	47b8      	blx	r7
 8004fc0:	3001      	adds	r0, #1
 8004fc2:	d1c0      	bne.n	8004f46 <_printf_float+0x31a>
 8004fc4:	e68d      	b.n	8004ce2 <_printf_float+0xb6>
 8004fc6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004fc8:	464b      	mov	r3, r9
 8004fca:	4631      	mov	r1, r6
 8004fcc:	4628      	mov	r0, r5
 8004fce:	4442      	add	r2, r8
 8004fd0:	47b8      	blx	r7
 8004fd2:	3001      	adds	r0, #1
 8004fd4:	d1c3      	bne.n	8004f5e <_printf_float+0x332>
 8004fd6:	e684      	b.n	8004ce2 <_printf_float+0xb6>
 8004fd8:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8004fdc:	f1ba 0f01 	cmp.w	sl, #1
 8004fe0:	dc01      	bgt.n	8004fe6 <_printf_float+0x3ba>
 8004fe2:	07db      	lsls	r3, r3, #31
 8004fe4:	d536      	bpl.n	8005054 <_printf_float+0x428>
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	4642      	mov	r2, r8
 8004fea:	4631      	mov	r1, r6
 8004fec:	4628      	mov	r0, r5
 8004fee:	47b8      	blx	r7
 8004ff0:	3001      	adds	r0, #1
 8004ff2:	f43f ae76 	beq.w	8004ce2 <_printf_float+0xb6>
 8004ff6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004ffa:	4631      	mov	r1, r6
 8004ffc:	4628      	mov	r0, r5
 8004ffe:	47b8      	blx	r7
 8005000:	3001      	adds	r0, #1
 8005002:	f43f ae6e 	beq.w	8004ce2 <_printf_float+0xb6>
 8005006:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800500a:	2200      	movs	r2, #0
 800500c:	2300      	movs	r3, #0
 800500e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005012:	f7fb fcc9 	bl	80009a8 <__aeabi_dcmpeq>
 8005016:	b9c0      	cbnz	r0, 800504a <_printf_float+0x41e>
 8005018:	4653      	mov	r3, sl
 800501a:	f108 0201 	add.w	r2, r8, #1
 800501e:	4631      	mov	r1, r6
 8005020:	4628      	mov	r0, r5
 8005022:	47b8      	blx	r7
 8005024:	3001      	adds	r0, #1
 8005026:	d10c      	bne.n	8005042 <_printf_float+0x416>
 8005028:	e65b      	b.n	8004ce2 <_printf_float+0xb6>
 800502a:	2301      	movs	r3, #1
 800502c:	465a      	mov	r2, fp
 800502e:	4631      	mov	r1, r6
 8005030:	4628      	mov	r0, r5
 8005032:	47b8      	blx	r7
 8005034:	3001      	adds	r0, #1
 8005036:	f43f ae54 	beq.w	8004ce2 <_printf_float+0xb6>
 800503a:	f108 0801 	add.w	r8, r8, #1
 800503e:	45d0      	cmp	r8, sl
 8005040:	dbf3      	blt.n	800502a <_printf_float+0x3fe>
 8005042:	464b      	mov	r3, r9
 8005044:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005048:	e6e0      	b.n	8004e0c <_printf_float+0x1e0>
 800504a:	f04f 0800 	mov.w	r8, #0
 800504e:	f104 0b1a 	add.w	fp, r4, #26
 8005052:	e7f4      	b.n	800503e <_printf_float+0x412>
 8005054:	2301      	movs	r3, #1
 8005056:	4642      	mov	r2, r8
 8005058:	e7e1      	b.n	800501e <_printf_float+0x3f2>
 800505a:	2301      	movs	r3, #1
 800505c:	464a      	mov	r2, r9
 800505e:	4631      	mov	r1, r6
 8005060:	4628      	mov	r0, r5
 8005062:	47b8      	blx	r7
 8005064:	3001      	adds	r0, #1
 8005066:	f43f ae3c 	beq.w	8004ce2 <_printf_float+0xb6>
 800506a:	f108 0801 	add.w	r8, r8, #1
 800506e:	68e3      	ldr	r3, [r4, #12]
 8005070:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8005072:	1a5b      	subs	r3, r3, r1
 8005074:	4543      	cmp	r3, r8
 8005076:	dcf0      	bgt.n	800505a <_printf_float+0x42e>
 8005078:	e6fd      	b.n	8004e76 <_printf_float+0x24a>
 800507a:	f04f 0800 	mov.w	r8, #0
 800507e:	f104 0919 	add.w	r9, r4, #25
 8005082:	e7f4      	b.n	800506e <_printf_float+0x442>

08005084 <_printf_common>:
 8005084:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005088:	4616      	mov	r6, r2
 800508a:	4698      	mov	r8, r3
 800508c:	688a      	ldr	r2, [r1, #8]
 800508e:	690b      	ldr	r3, [r1, #16]
 8005090:	4607      	mov	r7, r0
 8005092:	4293      	cmp	r3, r2
 8005094:	bfb8      	it	lt
 8005096:	4613      	movlt	r3, r2
 8005098:	6033      	str	r3, [r6, #0]
 800509a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800509e:	460c      	mov	r4, r1
 80050a0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80050a4:	b10a      	cbz	r2, 80050aa <_printf_common+0x26>
 80050a6:	3301      	adds	r3, #1
 80050a8:	6033      	str	r3, [r6, #0]
 80050aa:	6823      	ldr	r3, [r4, #0]
 80050ac:	0699      	lsls	r1, r3, #26
 80050ae:	bf42      	ittt	mi
 80050b0:	6833      	ldrmi	r3, [r6, #0]
 80050b2:	3302      	addmi	r3, #2
 80050b4:	6033      	strmi	r3, [r6, #0]
 80050b6:	6825      	ldr	r5, [r4, #0]
 80050b8:	f015 0506 	ands.w	r5, r5, #6
 80050bc:	d106      	bne.n	80050cc <_printf_common+0x48>
 80050be:	f104 0a19 	add.w	sl, r4, #25
 80050c2:	68e3      	ldr	r3, [r4, #12]
 80050c4:	6832      	ldr	r2, [r6, #0]
 80050c6:	1a9b      	subs	r3, r3, r2
 80050c8:	42ab      	cmp	r3, r5
 80050ca:	dc2b      	bgt.n	8005124 <_printf_common+0xa0>
 80050cc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80050d0:	6822      	ldr	r2, [r4, #0]
 80050d2:	3b00      	subs	r3, #0
 80050d4:	bf18      	it	ne
 80050d6:	2301      	movne	r3, #1
 80050d8:	0692      	lsls	r2, r2, #26
 80050da:	d430      	bmi.n	800513e <_printf_common+0xba>
 80050dc:	4641      	mov	r1, r8
 80050de:	4638      	mov	r0, r7
 80050e0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80050e4:	47c8      	blx	r9
 80050e6:	3001      	adds	r0, #1
 80050e8:	d023      	beq.n	8005132 <_printf_common+0xae>
 80050ea:	6823      	ldr	r3, [r4, #0]
 80050ec:	6922      	ldr	r2, [r4, #16]
 80050ee:	f003 0306 	and.w	r3, r3, #6
 80050f2:	2b04      	cmp	r3, #4
 80050f4:	bf14      	ite	ne
 80050f6:	2500      	movne	r5, #0
 80050f8:	6833      	ldreq	r3, [r6, #0]
 80050fa:	f04f 0600 	mov.w	r6, #0
 80050fe:	bf08      	it	eq
 8005100:	68e5      	ldreq	r5, [r4, #12]
 8005102:	f104 041a 	add.w	r4, r4, #26
 8005106:	bf08      	it	eq
 8005108:	1aed      	subeq	r5, r5, r3
 800510a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800510e:	bf08      	it	eq
 8005110:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005114:	4293      	cmp	r3, r2
 8005116:	bfc4      	itt	gt
 8005118:	1a9b      	subgt	r3, r3, r2
 800511a:	18ed      	addgt	r5, r5, r3
 800511c:	42b5      	cmp	r5, r6
 800511e:	d11a      	bne.n	8005156 <_printf_common+0xd2>
 8005120:	2000      	movs	r0, #0
 8005122:	e008      	b.n	8005136 <_printf_common+0xb2>
 8005124:	2301      	movs	r3, #1
 8005126:	4652      	mov	r2, sl
 8005128:	4641      	mov	r1, r8
 800512a:	4638      	mov	r0, r7
 800512c:	47c8      	blx	r9
 800512e:	3001      	adds	r0, #1
 8005130:	d103      	bne.n	800513a <_printf_common+0xb6>
 8005132:	f04f 30ff 	mov.w	r0, #4294967295
 8005136:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800513a:	3501      	adds	r5, #1
 800513c:	e7c1      	b.n	80050c2 <_printf_common+0x3e>
 800513e:	2030      	movs	r0, #48	@ 0x30
 8005140:	18e1      	adds	r1, r4, r3
 8005142:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005146:	1c5a      	adds	r2, r3, #1
 8005148:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800514c:	4422      	add	r2, r4
 800514e:	3302      	adds	r3, #2
 8005150:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005154:	e7c2      	b.n	80050dc <_printf_common+0x58>
 8005156:	2301      	movs	r3, #1
 8005158:	4622      	mov	r2, r4
 800515a:	4641      	mov	r1, r8
 800515c:	4638      	mov	r0, r7
 800515e:	47c8      	blx	r9
 8005160:	3001      	adds	r0, #1
 8005162:	d0e6      	beq.n	8005132 <_printf_common+0xae>
 8005164:	3601      	adds	r6, #1
 8005166:	e7d9      	b.n	800511c <_printf_common+0x98>

08005168 <_printf_i>:
 8005168:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800516c:	7e0f      	ldrb	r7, [r1, #24]
 800516e:	4691      	mov	r9, r2
 8005170:	2f78      	cmp	r7, #120	@ 0x78
 8005172:	4680      	mov	r8, r0
 8005174:	460c      	mov	r4, r1
 8005176:	469a      	mov	sl, r3
 8005178:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800517a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800517e:	d807      	bhi.n	8005190 <_printf_i+0x28>
 8005180:	2f62      	cmp	r7, #98	@ 0x62
 8005182:	d80a      	bhi.n	800519a <_printf_i+0x32>
 8005184:	2f00      	cmp	r7, #0
 8005186:	f000 80d3 	beq.w	8005330 <_printf_i+0x1c8>
 800518a:	2f58      	cmp	r7, #88	@ 0x58
 800518c:	f000 80ba 	beq.w	8005304 <_printf_i+0x19c>
 8005190:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005194:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005198:	e03a      	b.n	8005210 <_printf_i+0xa8>
 800519a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800519e:	2b15      	cmp	r3, #21
 80051a0:	d8f6      	bhi.n	8005190 <_printf_i+0x28>
 80051a2:	a101      	add	r1, pc, #4	@ (adr r1, 80051a8 <_printf_i+0x40>)
 80051a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80051a8:	08005201 	.word	0x08005201
 80051ac:	08005215 	.word	0x08005215
 80051b0:	08005191 	.word	0x08005191
 80051b4:	08005191 	.word	0x08005191
 80051b8:	08005191 	.word	0x08005191
 80051bc:	08005191 	.word	0x08005191
 80051c0:	08005215 	.word	0x08005215
 80051c4:	08005191 	.word	0x08005191
 80051c8:	08005191 	.word	0x08005191
 80051cc:	08005191 	.word	0x08005191
 80051d0:	08005191 	.word	0x08005191
 80051d4:	08005317 	.word	0x08005317
 80051d8:	0800523f 	.word	0x0800523f
 80051dc:	080052d1 	.word	0x080052d1
 80051e0:	08005191 	.word	0x08005191
 80051e4:	08005191 	.word	0x08005191
 80051e8:	08005339 	.word	0x08005339
 80051ec:	08005191 	.word	0x08005191
 80051f0:	0800523f 	.word	0x0800523f
 80051f4:	08005191 	.word	0x08005191
 80051f8:	08005191 	.word	0x08005191
 80051fc:	080052d9 	.word	0x080052d9
 8005200:	6833      	ldr	r3, [r6, #0]
 8005202:	1d1a      	adds	r2, r3, #4
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	6032      	str	r2, [r6, #0]
 8005208:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800520c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005210:	2301      	movs	r3, #1
 8005212:	e09e      	b.n	8005352 <_printf_i+0x1ea>
 8005214:	6833      	ldr	r3, [r6, #0]
 8005216:	6820      	ldr	r0, [r4, #0]
 8005218:	1d19      	adds	r1, r3, #4
 800521a:	6031      	str	r1, [r6, #0]
 800521c:	0606      	lsls	r6, r0, #24
 800521e:	d501      	bpl.n	8005224 <_printf_i+0xbc>
 8005220:	681d      	ldr	r5, [r3, #0]
 8005222:	e003      	b.n	800522c <_printf_i+0xc4>
 8005224:	0645      	lsls	r5, r0, #25
 8005226:	d5fb      	bpl.n	8005220 <_printf_i+0xb8>
 8005228:	f9b3 5000 	ldrsh.w	r5, [r3]
 800522c:	2d00      	cmp	r5, #0
 800522e:	da03      	bge.n	8005238 <_printf_i+0xd0>
 8005230:	232d      	movs	r3, #45	@ 0x2d
 8005232:	426d      	negs	r5, r5
 8005234:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005238:	230a      	movs	r3, #10
 800523a:	4859      	ldr	r0, [pc, #356]	@ (80053a0 <_printf_i+0x238>)
 800523c:	e011      	b.n	8005262 <_printf_i+0xfa>
 800523e:	6821      	ldr	r1, [r4, #0]
 8005240:	6833      	ldr	r3, [r6, #0]
 8005242:	0608      	lsls	r0, r1, #24
 8005244:	f853 5b04 	ldr.w	r5, [r3], #4
 8005248:	d402      	bmi.n	8005250 <_printf_i+0xe8>
 800524a:	0649      	lsls	r1, r1, #25
 800524c:	bf48      	it	mi
 800524e:	b2ad      	uxthmi	r5, r5
 8005250:	2f6f      	cmp	r7, #111	@ 0x6f
 8005252:	6033      	str	r3, [r6, #0]
 8005254:	bf14      	ite	ne
 8005256:	230a      	movne	r3, #10
 8005258:	2308      	moveq	r3, #8
 800525a:	4851      	ldr	r0, [pc, #324]	@ (80053a0 <_printf_i+0x238>)
 800525c:	2100      	movs	r1, #0
 800525e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005262:	6866      	ldr	r6, [r4, #4]
 8005264:	2e00      	cmp	r6, #0
 8005266:	bfa8      	it	ge
 8005268:	6821      	ldrge	r1, [r4, #0]
 800526a:	60a6      	str	r6, [r4, #8]
 800526c:	bfa4      	itt	ge
 800526e:	f021 0104 	bicge.w	r1, r1, #4
 8005272:	6021      	strge	r1, [r4, #0]
 8005274:	b90d      	cbnz	r5, 800527a <_printf_i+0x112>
 8005276:	2e00      	cmp	r6, #0
 8005278:	d04b      	beq.n	8005312 <_printf_i+0x1aa>
 800527a:	4616      	mov	r6, r2
 800527c:	fbb5 f1f3 	udiv	r1, r5, r3
 8005280:	fb03 5711 	mls	r7, r3, r1, r5
 8005284:	5dc7      	ldrb	r7, [r0, r7]
 8005286:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800528a:	462f      	mov	r7, r5
 800528c:	42bb      	cmp	r3, r7
 800528e:	460d      	mov	r5, r1
 8005290:	d9f4      	bls.n	800527c <_printf_i+0x114>
 8005292:	2b08      	cmp	r3, #8
 8005294:	d10b      	bne.n	80052ae <_printf_i+0x146>
 8005296:	6823      	ldr	r3, [r4, #0]
 8005298:	07df      	lsls	r7, r3, #31
 800529a:	d508      	bpl.n	80052ae <_printf_i+0x146>
 800529c:	6923      	ldr	r3, [r4, #16]
 800529e:	6861      	ldr	r1, [r4, #4]
 80052a0:	4299      	cmp	r1, r3
 80052a2:	bfde      	ittt	le
 80052a4:	2330      	movle	r3, #48	@ 0x30
 80052a6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80052aa:	f106 36ff 	addle.w	r6, r6, #4294967295
 80052ae:	1b92      	subs	r2, r2, r6
 80052b0:	6122      	str	r2, [r4, #16]
 80052b2:	464b      	mov	r3, r9
 80052b4:	4621      	mov	r1, r4
 80052b6:	4640      	mov	r0, r8
 80052b8:	f8cd a000 	str.w	sl, [sp]
 80052bc:	aa03      	add	r2, sp, #12
 80052be:	f7ff fee1 	bl	8005084 <_printf_common>
 80052c2:	3001      	adds	r0, #1
 80052c4:	d14a      	bne.n	800535c <_printf_i+0x1f4>
 80052c6:	f04f 30ff 	mov.w	r0, #4294967295
 80052ca:	b004      	add	sp, #16
 80052cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052d0:	6823      	ldr	r3, [r4, #0]
 80052d2:	f043 0320 	orr.w	r3, r3, #32
 80052d6:	6023      	str	r3, [r4, #0]
 80052d8:	2778      	movs	r7, #120	@ 0x78
 80052da:	4832      	ldr	r0, [pc, #200]	@ (80053a4 <_printf_i+0x23c>)
 80052dc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80052e0:	6823      	ldr	r3, [r4, #0]
 80052e2:	6831      	ldr	r1, [r6, #0]
 80052e4:	061f      	lsls	r7, r3, #24
 80052e6:	f851 5b04 	ldr.w	r5, [r1], #4
 80052ea:	d402      	bmi.n	80052f2 <_printf_i+0x18a>
 80052ec:	065f      	lsls	r7, r3, #25
 80052ee:	bf48      	it	mi
 80052f0:	b2ad      	uxthmi	r5, r5
 80052f2:	6031      	str	r1, [r6, #0]
 80052f4:	07d9      	lsls	r1, r3, #31
 80052f6:	bf44      	itt	mi
 80052f8:	f043 0320 	orrmi.w	r3, r3, #32
 80052fc:	6023      	strmi	r3, [r4, #0]
 80052fe:	b11d      	cbz	r5, 8005308 <_printf_i+0x1a0>
 8005300:	2310      	movs	r3, #16
 8005302:	e7ab      	b.n	800525c <_printf_i+0xf4>
 8005304:	4826      	ldr	r0, [pc, #152]	@ (80053a0 <_printf_i+0x238>)
 8005306:	e7e9      	b.n	80052dc <_printf_i+0x174>
 8005308:	6823      	ldr	r3, [r4, #0]
 800530a:	f023 0320 	bic.w	r3, r3, #32
 800530e:	6023      	str	r3, [r4, #0]
 8005310:	e7f6      	b.n	8005300 <_printf_i+0x198>
 8005312:	4616      	mov	r6, r2
 8005314:	e7bd      	b.n	8005292 <_printf_i+0x12a>
 8005316:	6833      	ldr	r3, [r6, #0]
 8005318:	6825      	ldr	r5, [r4, #0]
 800531a:	1d18      	adds	r0, r3, #4
 800531c:	6961      	ldr	r1, [r4, #20]
 800531e:	6030      	str	r0, [r6, #0]
 8005320:	062e      	lsls	r6, r5, #24
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	d501      	bpl.n	800532a <_printf_i+0x1c2>
 8005326:	6019      	str	r1, [r3, #0]
 8005328:	e002      	b.n	8005330 <_printf_i+0x1c8>
 800532a:	0668      	lsls	r0, r5, #25
 800532c:	d5fb      	bpl.n	8005326 <_printf_i+0x1be>
 800532e:	8019      	strh	r1, [r3, #0]
 8005330:	2300      	movs	r3, #0
 8005332:	4616      	mov	r6, r2
 8005334:	6123      	str	r3, [r4, #16]
 8005336:	e7bc      	b.n	80052b2 <_printf_i+0x14a>
 8005338:	6833      	ldr	r3, [r6, #0]
 800533a:	2100      	movs	r1, #0
 800533c:	1d1a      	adds	r2, r3, #4
 800533e:	6032      	str	r2, [r6, #0]
 8005340:	681e      	ldr	r6, [r3, #0]
 8005342:	6862      	ldr	r2, [r4, #4]
 8005344:	4630      	mov	r0, r6
 8005346:	f000 fcd6 	bl	8005cf6 <memchr>
 800534a:	b108      	cbz	r0, 8005350 <_printf_i+0x1e8>
 800534c:	1b80      	subs	r0, r0, r6
 800534e:	6060      	str	r0, [r4, #4]
 8005350:	6863      	ldr	r3, [r4, #4]
 8005352:	6123      	str	r3, [r4, #16]
 8005354:	2300      	movs	r3, #0
 8005356:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800535a:	e7aa      	b.n	80052b2 <_printf_i+0x14a>
 800535c:	4632      	mov	r2, r6
 800535e:	4649      	mov	r1, r9
 8005360:	4640      	mov	r0, r8
 8005362:	6923      	ldr	r3, [r4, #16]
 8005364:	47d0      	blx	sl
 8005366:	3001      	adds	r0, #1
 8005368:	d0ad      	beq.n	80052c6 <_printf_i+0x15e>
 800536a:	6823      	ldr	r3, [r4, #0]
 800536c:	079b      	lsls	r3, r3, #30
 800536e:	d413      	bmi.n	8005398 <_printf_i+0x230>
 8005370:	68e0      	ldr	r0, [r4, #12]
 8005372:	9b03      	ldr	r3, [sp, #12]
 8005374:	4298      	cmp	r0, r3
 8005376:	bfb8      	it	lt
 8005378:	4618      	movlt	r0, r3
 800537a:	e7a6      	b.n	80052ca <_printf_i+0x162>
 800537c:	2301      	movs	r3, #1
 800537e:	4632      	mov	r2, r6
 8005380:	4649      	mov	r1, r9
 8005382:	4640      	mov	r0, r8
 8005384:	47d0      	blx	sl
 8005386:	3001      	adds	r0, #1
 8005388:	d09d      	beq.n	80052c6 <_printf_i+0x15e>
 800538a:	3501      	adds	r5, #1
 800538c:	68e3      	ldr	r3, [r4, #12]
 800538e:	9903      	ldr	r1, [sp, #12]
 8005390:	1a5b      	subs	r3, r3, r1
 8005392:	42ab      	cmp	r3, r5
 8005394:	dcf2      	bgt.n	800537c <_printf_i+0x214>
 8005396:	e7eb      	b.n	8005370 <_printf_i+0x208>
 8005398:	2500      	movs	r5, #0
 800539a:	f104 0619 	add.w	r6, r4, #25
 800539e:	e7f5      	b.n	800538c <_printf_i+0x224>
 80053a0:	08009334 	.word	0x08009334
 80053a4:	08009345 	.word	0x08009345

080053a8 <_scanf_float>:
 80053a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053ac:	b087      	sub	sp, #28
 80053ae:	9303      	str	r3, [sp, #12]
 80053b0:	688b      	ldr	r3, [r1, #8]
 80053b2:	4617      	mov	r7, r2
 80053b4:	1e5a      	subs	r2, r3, #1
 80053b6:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80053ba:	bf82      	ittt	hi
 80053bc:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80053c0:	eb03 0b05 	addhi.w	fp, r3, r5
 80053c4:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80053c8:	460a      	mov	r2, r1
 80053ca:	f04f 0500 	mov.w	r5, #0
 80053ce:	bf88      	it	hi
 80053d0:	608b      	strhi	r3, [r1, #8]
 80053d2:	680b      	ldr	r3, [r1, #0]
 80053d4:	4680      	mov	r8, r0
 80053d6:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 80053da:	f842 3b1c 	str.w	r3, [r2], #28
 80053de:	460c      	mov	r4, r1
 80053e0:	bf98      	it	ls
 80053e2:	f04f 0b00 	movls.w	fp, #0
 80053e6:	4616      	mov	r6, r2
 80053e8:	46aa      	mov	sl, r5
 80053ea:	46a9      	mov	r9, r5
 80053ec:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80053f0:	9201      	str	r2, [sp, #4]
 80053f2:	9502      	str	r5, [sp, #8]
 80053f4:	68a2      	ldr	r2, [r4, #8]
 80053f6:	b152      	cbz	r2, 800540e <_scanf_float+0x66>
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	781b      	ldrb	r3, [r3, #0]
 80053fc:	2b4e      	cmp	r3, #78	@ 0x4e
 80053fe:	d865      	bhi.n	80054cc <_scanf_float+0x124>
 8005400:	2b40      	cmp	r3, #64	@ 0x40
 8005402:	d83d      	bhi.n	8005480 <_scanf_float+0xd8>
 8005404:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8005408:	b2c8      	uxtb	r0, r1
 800540a:	280e      	cmp	r0, #14
 800540c:	d93b      	bls.n	8005486 <_scanf_float+0xde>
 800540e:	f1b9 0f00 	cmp.w	r9, #0
 8005412:	d003      	beq.n	800541c <_scanf_float+0x74>
 8005414:	6823      	ldr	r3, [r4, #0]
 8005416:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800541a:	6023      	str	r3, [r4, #0]
 800541c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005420:	f1ba 0f01 	cmp.w	sl, #1
 8005424:	f200 8118 	bhi.w	8005658 <_scanf_float+0x2b0>
 8005428:	9b01      	ldr	r3, [sp, #4]
 800542a:	429e      	cmp	r6, r3
 800542c:	f200 8109 	bhi.w	8005642 <_scanf_float+0x29a>
 8005430:	2001      	movs	r0, #1
 8005432:	b007      	add	sp, #28
 8005434:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005438:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800543c:	2a0d      	cmp	r2, #13
 800543e:	d8e6      	bhi.n	800540e <_scanf_float+0x66>
 8005440:	a101      	add	r1, pc, #4	@ (adr r1, 8005448 <_scanf_float+0xa0>)
 8005442:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005446:	bf00      	nop
 8005448:	0800558f 	.word	0x0800558f
 800544c:	0800540f 	.word	0x0800540f
 8005450:	0800540f 	.word	0x0800540f
 8005454:	0800540f 	.word	0x0800540f
 8005458:	080055ef 	.word	0x080055ef
 800545c:	080055c7 	.word	0x080055c7
 8005460:	0800540f 	.word	0x0800540f
 8005464:	0800540f 	.word	0x0800540f
 8005468:	0800559d 	.word	0x0800559d
 800546c:	0800540f 	.word	0x0800540f
 8005470:	0800540f 	.word	0x0800540f
 8005474:	0800540f 	.word	0x0800540f
 8005478:	0800540f 	.word	0x0800540f
 800547c:	08005555 	.word	0x08005555
 8005480:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8005484:	e7da      	b.n	800543c <_scanf_float+0x94>
 8005486:	290e      	cmp	r1, #14
 8005488:	d8c1      	bhi.n	800540e <_scanf_float+0x66>
 800548a:	a001      	add	r0, pc, #4	@ (adr r0, 8005490 <_scanf_float+0xe8>)
 800548c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8005490:	08005545 	.word	0x08005545
 8005494:	0800540f 	.word	0x0800540f
 8005498:	08005545 	.word	0x08005545
 800549c:	080055db 	.word	0x080055db
 80054a0:	0800540f 	.word	0x0800540f
 80054a4:	080054ed 	.word	0x080054ed
 80054a8:	0800552b 	.word	0x0800552b
 80054ac:	0800552b 	.word	0x0800552b
 80054b0:	0800552b 	.word	0x0800552b
 80054b4:	0800552b 	.word	0x0800552b
 80054b8:	0800552b 	.word	0x0800552b
 80054bc:	0800552b 	.word	0x0800552b
 80054c0:	0800552b 	.word	0x0800552b
 80054c4:	0800552b 	.word	0x0800552b
 80054c8:	0800552b 	.word	0x0800552b
 80054cc:	2b6e      	cmp	r3, #110	@ 0x6e
 80054ce:	d809      	bhi.n	80054e4 <_scanf_float+0x13c>
 80054d0:	2b60      	cmp	r3, #96	@ 0x60
 80054d2:	d8b1      	bhi.n	8005438 <_scanf_float+0x90>
 80054d4:	2b54      	cmp	r3, #84	@ 0x54
 80054d6:	d07b      	beq.n	80055d0 <_scanf_float+0x228>
 80054d8:	2b59      	cmp	r3, #89	@ 0x59
 80054da:	d198      	bne.n	800540e <_scanf_float+0x66>
 80054dc:	2d07      	cmp	r5, #7
 80054de:	d196      	bne.n	800540e <_scanf_float+0x66>
 80054e0:	2508      	movs	r5, #8
 80054e2:	e02c      	b.n	800553e <_scanf_float+0x196>
 80054e4:	2b74      	cmp	r3, #116	@ 0x74
 80054e6:	d073      	beq.n	80055d0 <_scanf_float+0x228>
 80054e8:	2b79      	cmp	r3, #121	@ 0x79
 80054ea:	e7f6      	b.n	80054da <_scanf_float+0x132>
 80054ec:	6821      	ldr	r1, [r4, #0]
 80054ee:	05c8      	lsls	r0, r1, #23
 80054f0:	d51b      	bpl.n	800552a <_scanf_float+0x182>
 80054f2:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80054f6:	6021      	str	r1, [r4, #0]
 80054f8:	f109 0901 	add.w	r9, r9, #1
 80054fc:	f1bb 0f00 	cmp.w	fp, #0
 8005500:	d003      	beq.n	800550a <_scanf_float+0x162>
 8005502:	3201      	adds	r2, #1
 8005504:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005508:	60a2      	str	r2, [r4, #8]
 800550a:	68a3      	ldr	r3, [r4, #8]
 800550c:	3b01      	subs	r3, #1
 800550e:	60a3      	str	r3, [r4, #8]
 8005510:	6923      	ldr	r3, [r4, #16]
 8005512:	3301      	adds	r3, #1
 8005514:	6123      	str	r3, [r4, #16]
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	3b01      	subs	r3, #1
 800551a:	2b00      	cmp	r3, #0
 800551c:	607b      	str	r3, [r7, #4]
 800551e:	f340 8087 	ble.w	8005630 <_scanf_float+0x288>
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	3301      	adds	r3, #1
 8005526:	603b      	str	r3, [r7, #0]
 8005528:	e764      	b.n	80053f4 <_scanf_float+0x4c>
 800552a:	eb1a 0105 	adds.w	r1, sl, r5
 800552e:	f47f af6e 	bne.w	800540e <_scanf_float+0x66>
 8005532:	460d      	mov	r5, r1
 8005534:	468a      	mov	sl, r1
 8005536:	6822      	ldr	r2, [r4, #0]
 8005538:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800553c:	6022      	str	r2, [r4, #0]
 800553e:	f806 3b01 	strb.w	r3, [r6], #1
 8005542:	e7e2      	b.n	800550a <_scanf_float+0x162>
 8005544:	6822      	ldr	r2, [r4, #0]
 8005546:	0610      	lsls	r0, r2, #24
 8005548:	f57f af61 	bpl.w	800540e <_scanf_float+0x66>
 800554c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005550:	6022      	str	r2, [r4, #0]
 8005552:	e7f4      	b.n	800553e <_scanf_float+0x196>
 8005554:	f1ba 0f00 	cmp.w	sl, #0
 8005558:	d10e      	bne.n	8005578 <_scanf_float+0x1d0>
 800555a:	f1b9 0f00 	cmp.w	r9, #0
 800555e:	d10e      	bne.n	800557e <_scanf_float+0x1d6>
 8005560:	6822      	ldr	r2, [r4, #0]
 8005562:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8005566:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800556a:	d108      	bne.n	800557e <_scanf_float+0x1d6>
 800556c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8005570:	f04f 0a01 	mov.w	sl, #1
 8005574:	6022      	str	r2, [r4, #0]
 8005576:	e7e2      	b.n	800553e <_scanf_float+0x196>
 8005578:	f1ba 0f02 	cmp.w	sl, #2
 800557c:	d055      	beq.n	800562a <_scanf_float+0x282>
 800557e:	2d01      	cmp	r5, #1
 8005580:	d002      	beq.n	8005588 <_scanf_float+0x1e0>
 8005582:	2d04      	cmp	r5, #4
 8005584:	f47f af43 	bne.w	800540e <_scanf_float+0x66>
 8005588:	3501      	adds	r5, #1
 800558a:	b2ed      	uxtb	r5, r5
 800558c:	e7d7      	b.n	800553e <_scanf_float+0x196>
 800558e:	f1ba 0f01 	cmp.w	sl, #1
 8005592:	f47f af3c 	bne.w	800540e <_scanf_float+0x66>
 8005596:	f04f 0a02 	mov.w	sl, #2
 800559a:	e7d0      	b.n	800553e <_scanf_float+0x196>
 800559c:	b97d      	cbnz	r5, 80055be <_scanf_float+0x216>
 800559e:	f1b9 0f00 	cmp.w	r9, #0
 80055a2:	f47f af37 	bne.w	8005414 <_scanf_float+0x6c>
 80055a6:	6822      	ldr	r2, [r4, #0]
 80055a8:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80055ac:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80055b0:	f040 8103 	bne.w	80057ba <_scanf_float+0x412>
 80055b4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80055b8:	2501      	movs	r5, #1
 80055ba:	6022      	str	r2, [r4, #0]
 80055bc:	e7bf      	b.n	800553e <_scanf_float+0x196>
 80055be:	2d03      	cmp	r5, #3
 80055c0:	d0e2      	beq.n	8005588 <_scanf_float+0x1e0>
 80055c2:	2d05      	cmp	r5, #5
 80055c4:	e7de      	b.n	8005584 <_scanf_float+0x1dc>
 80055c6:	2d02      	cmp	r5, #2
 80055c8:	f47f af21 	bne.w	800540e <_scanf_float+0x66>
 80055cc:	2503      	movs	r5, #3
 80055ce:	e7b6      	b.n	800553e <_scanf_float+0x196>
 80055d0:	2d06      	cmp	r5, #6
 80055d2:	f47f af1c 	bne.w	800540e <_scanf_float+0x66>
 80055d6:	2507      	movs	r5, #7
 80055d8:	e7b1      	b.n	800553e <_scanf_float+0x196>
 80055da:	6822      	ldr	r2, [r4, #0]
 80055dc:	0591      	lsls	r1, r2, #22
 80055de:	f57f af16 	bpl.w	800540e <_scanf_float+0x66>
 80055e2:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 80055e6:	6022      	str	r2, [r4, #0]
 80055e8:	f8cd 9008 	str.w	r9, [sp, #8]
 80055ec:	e7a7      	b.n	800553e <_scanf_float+0x196>
 80055ee:	6822      	ldr	r2, [r4, #0]
 80055f0:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 80055f4:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80055f8:	d006      	beq.n	8005608 <_scanf_float+0x260>
 80055fa:	0550      	lsls	r0, r2, #21
 80055fc:	f57f af07 	bpl.w	800540e <_scanf_float+0x66>
 8005600:	f1b9 0f00 	cmp.w	r9, #0
 8005604:	f000 80d9 	beq.w	80057ba <_scanf_float+0x412>
 8005608:	0591      	lsls	r1, r2, #22
 800560a:	bf58      	it	pl
 800560c:	9902      	ldrpl	r1, [sp, #8]
 800560e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8005612:	bf58      	it	pl
 8005614:	eba9 0101 	subpl.w	r1, r9, r1
 8005618:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800561c:	f04f 0900 	mov.w	r9, #0
 8005620:	bf58      	it	pl
 8005622:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8005626:	6022      	str	r2, [r4, #0]
 8005628:	e789      	b.n	800553e <_scanf_float+0x196>
 800562a:	f04f 0a03 	mov.w	sl, #3
 800562e:	e786      	b.n	800553e <_scanf_float+0x196>
 8005630:	4639      	mov	r1, r7
 8005632:	4640      	mov	r0, r8
 8005634:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8005638:	4798      	blx	r3
 800563a:	2800      	cmp	r0, #0
 800563c:	f43f aeda 	beq.w	80053f4 <_scanf_float+0x4c>
 8005640:	e6e5      	b.n	800540e <_scanf_float+0x66>
 8005642:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005646:	463a      	mov	r2, r7
 8005648:	4640      	mov	r0, r8
 800564a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800564e:	4798      	blx	r3
 8005650:	6923      	ldr	r3, [r4, #16]
 8005652:	3b01      	subs	r3, #1
 8005654:	6123      	str	r3, [r4, #16]
 8005656:	e6e7      	b.n	8005428 <_scanf_float+0x80>
 8005658:	1e6b      	subs	r3, r5, #1
 800565a:	2b06      	cmp	r3, #6
 800565c:	d824      	bhi.n	80056a8 <_scanf_float+0x300>
 800565e:	2d02      	cmp	r5, #2
 8005660:	d836      	bhi.n	80056d0 <_scanf_float+0x328>
 8005662:	9b01      	ldr	r3, [sp, #4]
 8005664:	429e      	cmp	r6, r3
 8005666:	f67f aee3 	bls.w	8005430 <_scanf_float+0x88>
 800566a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800566e:	463a      	mov	r2, r7
 8005670:	4640      	mov	r0, r8
 8005672:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005676:	4798      	blx	r3
 8005678:	6923      	ldr	r3, [r4, #16]
 800567a:	3b01      	subs	r3, #1
 800567c:	6123      	str	r3, [r4, #16]
 800567e:	e7f0      	b.n	8005662 <_scanf_float+0x2ba>
 8005680:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005684:	463a      	mov	r2, r7
 8005686:	4640      	mov	r0, r8
 8005688:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800568c:	4798      	blx	r3
 800568e:	6923      	ldr	r3, [r4, #16]
 8005690:	3b01      	subs	r3, #1
 8005692:	6123      	str	r3, [r4, #16]
 8005694:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005698:	fa5f fa8a 	uxtb.w	sl, sl
 800569c:	f1ba 0f02 	cmp.w	sl, #2
 80056a0:	d1ee      	bne.n	8005680 <_scanf_float+0x2d8>
 80056a2:	3d03      	subs	r5, #3
 80056a4:	b2ed      	uxtb	r5, r5
 80056a6:	1b76      	subs	r6, r6, r5
 80056a8:	6823      	ldr	r3, [r4, #0]
 80056aa:	05da      	lsls	r2, r3, #23
 80056ac:	d530      	bpl.n	8005710 <_scanf_float+0x368>
 80056ae:	055b      	lsls	r3, r3, #21
 80056b0:	d511      	bpl.n	80056d6 <_scanf_float+0x32e>
 80056b2:	9b01      	ldr	r3, [sp, #4]
 80056b4:	429e      	cmp	r6, r3
 80056b6:	f67f aebb 	bls.w	8005430 <_scanf_float+0x88>
 80056ba:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80056be:	463a      	mov	r2, r7
 80056c0:	4640      	mov	r0, r8
 80056c2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80056c6:	4798      	blx	r3
 80056c8:	6923      	ldr	r3, [r4, #16]
 80056ca:	3b01      	subs	r3, #1
 80056cc:	6123      	str	r3, [r4, #16]
 80056ce:	e7f0      	b.n	80056b2 <_scanf_float+0x30a>
 80056d0:	46aa      	mov	sl, r5
 80056d2:	46b3      	mov	fp, r6
 80056d4:	e7de      	b.n	8005694 <_scanf_float+0x2ec>
 80056d6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80056da:	6923      	ldr	r3, [r4, #16]
 80056dc:	2965      	cmp	r1, #101	@ 0x65
 80056de:	f103 33ff 	add.w	r3, r3, #4294967295
 80056e2:	f106 35ff 	add.w	r5, r6, #4294967295
 80056e6:	6123      	str	r3, [r4, #16]
 80056e8:	d00c      	beq.n	8005704 <_scanf_float+0x35c>
 80056ea:	2945      	cmp	r1, #69	@ 0x45
 80056ec:	d00a      	beq.n	8005704 <_scanf_float+0x35c>
 80056ee:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80056f2:	463a      	mov	r2, r7
 80056f4:	4640      	mov	r0, r8
 80056f6:	4798      	blx	r3
 80056f8:	6923      	ldr	r3, [r4, #16]
 80056fa:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80056fe:	3b01      	subs	r3, #1
 8005700:	1eb5      	subs	r5, r6, #2
 8005702:	6123      	str	r3, [r4, #16]
 8005704:	463a      	mov	r2, r7
 8005706:	4640      	mov	r0, r8
 8005708:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800570c:	4798      	blx	r3
 800570e:	462e      	mov	r6, r5
 8005710:	6822      	ldr	r2, [r4, #0]
 8005712:	f012 0210 	ands.w	r2, r2, #16
 8005716:	d001      	beq.n	800571c <_scanf_float+0x374>
 8005718:	2000      	movs	r0, #0
 800571a:	e68a      	b.n	8005432 <_scanf_float+0x8a>
 800571c:	7032      	strb	r2, [r6, #0]
 800571e:	6823      	ldr	r3, [r4, #0]
 8005720:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005724:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005728:	d11c      	bne.n	8005764 <_scanf_float+0x3bc>
 800572a:	9b02      	ldr	r3, [sp, #8]
 800572c:	454b      	cmp	r3, r9
 800572e:	eba3 0209 	sub.w	r2, r3, r9
 8005732:	d123      	bne.n	800577c <_scanf_float+0x3d4>
 8005734:	2200      	movs	r2, #0
 8005736:	4640      	mov	r0, r8
 8005738:	9901      	ldr	r1, [sp, #4]
 800573a:	f002 fced 	bl	8008118 <_strtod_r>
 800573e:	9b03      	ldr	r3, [sp, #12]
 8005740:	6825      	ldr	r5, [r4, #0]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f015 0f02 	tst.w	r5, #2
 8005748:	4606      	mov	r6, r0
 800574a:	460f      	mov	r7, r1
 800574c:	f103 0204 	add.w	r2, r3, #4
 8005750:	d01f      	beq.n	8005792 <_scanf_float+0x3ea>
 8005752:	9903      	ldr	r1, [sp, #12]
 8005754:	600a      	str	r2, [r1, #0]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	e9c3 6700 	strd	r6, r7, [r3]
 800575c:	68e3      	ldr	r3, [r4, #12]
 800575e:	3301      	adds	r3, #1
 8005760:	60e3      	str	r3, [r4, #12]
 8005762:	e7d9      	b.n	8005718 <_scanf_float+0x370>
 8005764:	9b04      	ldr	r3, [sp, #16]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d0e4      	beq.n	8005734 <_scanf_float+0x38c>
 800576a:	9905      	ldr	r1, [sp, #20]
 800576c:	230a      	movs	r3, #10
 800576e:	4640      	mov	r0, r8
 8005770:	3101      	adds	r1, #1
 8005772:	f002 fd51 	bl	8008218 <_strtol_r>
 8005776:	9b04      	ldr	r3, [sp, #16]
 8005778:	9e05      	ldr	r6, [sp, #20]
 800577a:	1ac2      	subs	r2, r0, r3
 800577c:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8005780:	429e      	cmp	r6, r3
 8005782:	bf28      	it	cs
 8005784:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8005788:	4630      	mov	r0, r6
 800578a:	490d      	ldr	r1, [pc, #52]	@ (80057c0 <_scanf_float+0x418>)
 800578c:	f000 f93c 	bl	8005a08 <siprintf>
 8005790:	e7d0      	b.n	8005734 <_scanf_float+0x38c>
 8005792:	076d      	lsls	r5, r5, #29
 8005794:	d4dd      	bmi.n	8005752 <_scanf_float+0x3aa>
 8005796:	9d03      	ldr	r5, [sp, #12]
 8005798:	602a      	str	r2, [r5, #0]
 800579a:	681d      	ldr	r5, [r3, #0]
 800579c:	4602      	mov	r2, r0
 800579e:	460b      	mov	r3, r1
 80057a0:	f7fb f934 	bl	8000a0c <__aeabi_dcmpun>
 80057a4:	b120      	cbz	r0, 80057b0 <_scanf_float+0x408>
 80057a6:	4807      	ldr	r0, [pc, #28]	@ (80057c4 <_scanf_float+0x41c>)
 80057a8:	f000 fac2 	bl	8005d30 <nanf>
 80057ac:	6028      	str	r0, [r5, #0]
 80057ae:	e7d5      	b.n	800575c <_scanf_float+0x3b4>
 80057b0:	4630      	mov	r0, r6
 80057b2:	4639      	mov	r1, r7
 80057b4:	f7fb f988 	bl	8000ac8 <__aeabi_d2f>
 80057b8:	e7f8      	b.n	80057ac <_scanf_float+0x404>
 80057ba:	f04f 0900 	mov.w	r9, #0
 80057be:	e62d      	b.n	800541c <_scanf_float+0x74>
 80057c0:	08009356 	.word	0x08009356
 80057c4:	080096ed 	.word	0x080096ed

080057c8 <std>:
 80057c8:	2300      	movs	r3, #0
 80057ca:	b510      	push	{r4, lr}
 80057cc:	4604      	mov	r4, r0
 80057ce:	e9c0 3300 	strd	r3, r3, [r0]
 80057d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80057d6:	6083      	str	r3, [r0, #8]
 80057d8:	8181      	strh	r1, [r0, #12]
 80057da:	6643      	str	r3, [r0, #100]	@ 0x64
 80057dc:	81c2      	strh	r2, [r0, #14]
 80057de:	6183      	str	r3, [r0, #24]
 80057e0:	4619      	mov	r1, r3
 80057e2:	2208      	movs	r2, #8
 80057e4:	305c      	adds	r0, #92	@ 0x5c
 80057e6:	f000 fa07 	bl	8005bf8 <memset>
 80057ea:	4b0d      	ldr	r3, [pc, #52]	@ (8005820 <std+0x58>)
 80057ec:	6224      	str	r4, [r4, #32]
 80057ee:	6263      	str	r3, [r4, #36]	@ 0x24
 80057f0:	4b0c      	ldr	r3, [pc, #48]	@ (8005824 <std+0x5c>)
 80057f2:	62a3      	str	r3, [r4, #40]	@ 0x28
 80057f4:	4b0c      	ldr	r3, [pc, #48]	@ (8005828 <std+0x60>)
 80057f6:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80057f8:	4b0c      	ldr	r3, [pc, #48]	@ (800582c <std+0x64>)
 80057fa:	6323      	str	r3, [r4, #48]	@ 0x30
 80057fc:	4b0c      	ldr	r3, [pc, #48]	@ (8005830 <std+0x68>)
 80057fe:	429c      	cmp	r4, r3
 8005800:	d006      	beq.n	8005810 <std+0x48>
 8005802:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005806:	4294      	cmp	r4, r2
 8005808:	d002      	beq.n	8005810 <std+0x48>
 800580a:	33d0      	adds	r3, #208	@ 0xd0
 800580c:	429c      	cmp	r4, r3
 800580e:	d105      	bne.n	800581c <std+0x54>
 8005810:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005814:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005818:	f000 ba6a 	b.w	8005cf0 <__retarget_lock_init_recursive>
 800581c:	bd10      	pop	{r4, pc}
 800581e:	bf00      	nop
 8005820:	08005a49 	.word	0x08005a49
 8005824:	08005a6b 	.word	0x08005a6b
 8005828:	08005aa3 	.word	0x08005aa3
 800582c:	08005ac7 	.word	0x08005ac7
 8005830:	20003018 	.word	0x20003018

08005834 <stdio_exit_handler>:
 8005834:	4a02      	ldr	r2, [pc, #8]	@ (8005840 <stdio_exit_handler+0xc>)
 8005836:	4903      	ldr	r1, [pc, #12]	@ (8005844 <stdio_exit_handler+0x10>)
 8005838:	4803      	ldr	r0, [pc, #12]	@ (8005848 <stdio_exit_handler+0x14>)
 800583a:	f000 b869 	b.w	8005910 <_fwalk_sglue>
 800583e:	bf00      	nop
 8005840:	20000414 	.word	0x20000414
 8005844:	080085cd 	.word	0x080085cd
 8005848:	20000424 	.word	0x20000424

0800584c <cleanup_stdio>:
 800584c:	6841      	ldr	r1, [r0, #4]
 800584e:	4b0c      	ldr	r3, [pc, #48]	@ (8005880 <cleanup_stdio+0x34>)
 8005850:	b510      	push	{r4, lr}
 8005852:	4299      	cmp	r1, r3
 8005854:	4604      	mov	r4, r0
 8005856:	d001      	beq.n	800585c <cleanup_stdio+0x10>
 8005858:	f002 feb8 	bl	80085cc <_fflush_r>
 800585c:	68a1      	ldr	r1, [r4, #8]
 800585e:	4b09      	ldr	r3, [pc, #36]	@ (8005884 <cleanup_stdio+0x38>)
 8005860:	4299      	cmp	r1, r3
 8005862:	d002      	beq.n	800586a <cleanup_stdio+0x1e>
 8005864:	4620      	mov	r0, r4
 8005866:	f002 feb1 	bl	80085cc <_fflush_r>
 800586a:	68e1      	ldr	r1, [r4, #12]
 800586c:	4b06      	ldr	r3, [pc, #24]	@ (8005888 <cleanup_stdio+0x3c>)
 800586e:	4299      	cmp	r1, r3
 8005870:	d004      	beq.n	800587c <cleanup_stdio+0x30>
 8005872:	4620      	mov	r0, r4
 8005874:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005878:	f002 bea8 	b.w	80085cc <_fflush_r>
 800587c:	bd10      	pop	{r4, pc}
 800587e:	bf00      	nop
 8005880:	20003018 	.word	0x20003018
 8005884:	20003080 	.word	0x20003080
 8005888:	200030e8 	.word	0x200030e8

0800588c <global_stdio_init.part.0>:
 800588c:	b510      	push	{r4, lr}
 800588e:	4b0b      	ldr	r3, [pc, #44]	@ (80058bc <global_stdio_init.part.0+0x30>)
 8005890:	4c0b      	ldr	r4, [pc, #44]	@ (80058c0 <global_stdio_init.part.0+0x34>)
 8005892:	4a0c      	ldr	r2, [pc, #48]	@ (80058c4 <global_stdio_init.part.0+0x38>)
 8005894:	4620      	mov	r0, r4
 8005896:	601a      	str	r2, [r3, #0]
 8005898:	2104      	movs	r1, #4
 800589a:	2200      	movs	r2, #0
 800589c:	f7ff ff94 	bl	80057c8 <std>
 80058a0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80058a4:	2201      	movs	r2, #1
 80058a6:	2109      	movs	r1, #9
 80058a8:	f7ff ff8e 	bl	80057c8 <std>
 80058ac:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80058b0:	2202      	movs	r2, #2
 80058b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80058b6:	2112      	movs	r1, #18
 80058b8:	f7ff bf86 	b.w	80057c8 <std>
 80058bc:	20003150 	.word	0x20003150
 80058c0:	20003018 	.word	0x20003018
 80058c4:	08005835 	.word	0x08005835

080058c8 <__sfp_lock_acquire>:
 80058c8:	4801      	ldr	r0, [pc, #4]	@ (80058d0 <__sfp_lock_acquire+0x8>)
 80058ca:	f000 ba12 	b.w	8005cf2 <__retarget_lock_acquire_recursive>
 80058ce:	bf00      	nop
 80058d0:	20003159 	.word	0x20003159

080058d4 <__sfp_lock_release>:
 80058d4:	4801      	ldr	r0, [pc, #4]	@ (80058dc <__sfp_lock_release+0x8>)
 80058d6:	f000 ba0d 	b.w	8005cf4 <__retarget_lock_release_recursive>
 80058da:	bf00      	nop
 80058dc:	20003159 	.word	0x20003159

080058e0 <__sinit>:
 80058e0:	b510      	push	{r4, lr}
 80058e2:	4604      	mov	r4, r0
 80058e4:	f7ff fff0 	bl	80058c8 <__sfp_lock_acquire>
 80058e8:	6a23      	ldr	r3, [r4, #32]
 80058ea:	b11b      	cbz	r3, 80058f4 <__sinit+0x14>
 80058ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80058f0:	f7ff bff0 	b.w	80058d4 <__sfp_lock_release>
 80058f4:	4b04      	ldr	r3, [pc, #16]	@ (8005908 <__sinit+0x28>)
 80058f6:	6223      	str	r3, [r4, #32]
 80058f8:	4b04      	ldr	r3, [pc, #16]	@ (800590c <__sinit+0x2c>)
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d1f5      	bne.n	80058ec <__sinit+0xc>
 8005900:	f7ff ffc4 	bl	800588c <global_stdio_init.part.0>
 8005904:	e7f2      	b.n	80058ec <__sinit+0xc>
 8005906:	bf00      	nop
 8005908:	0800584d 	.word	0x0800584d
 800590c:	20003150 	.word	0x20003150

08005910 <_fwalk_sglue>:
 8005910:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005914:	4607      	mov	r7, r0
 8005916:	4688      	mov	r8, r1
 8005918:	4614      	mov	r4, r2
 800591a:	2600      	movs	r6, #0
 800591c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005920:	f1b9 0901 	subs.w	r9, r9, #1
 8005924:	d505      	bpl.n	8005932 <_fwalk_sglue+0x22>
 8005926:	6824      	ldr	r4, [r4, #0]
 8005928:	2c00      	cmp	r4, #0
 800592a:	d1f7      	bne.n	800591c <_fwalk_sglue+0xc>
 800592c:	4630      	mov	r0, r6
 800592e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005932:	89ab      	ldrh	r3, [r5, #12]
 8005934:	2b01      	cmp	r3, #1
 8005936:	d907      	bls.n	8005948 <_fwalk_sglue+0x38>
 8005938:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800593c:	3301      	adds	r3, #1
 800593e:	d003      	beq.n	8005948 <_fwalk_sglue+0x38>
 8005940:	4629      	mov	r1, r5
 8005942:	4638      	mov	r0, r7
 8005944:	47c0      	blx	r8
 8005946:	4306      	orrs	r6, r0
 8005948:	3568      	adds	r5, #104	@ 0x68
 800594a:	e7e9      	b.n	8005920 <_fwalk_sglue+0x10>

0800594c <_puts_r>:
 800594c:	6a03      	ldr	r3, [r0, #32]
 800594e:	b570      	push	{r4, r5, r6, lr}
 8005950:	4605      	mov	r5, r0
 8005952:	460e      	mov	r6, r1
 8005954:	6884      	ldr	r4, [r0, #8]
 8005956:	b90b      	cbnz	r3, 800595c <_puts_r+0x10>
 8005958:	f7ff ffc2 	bl	80058e0 <__sinit>
 800595c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800595e:	07db      	lsls	r3, r3, #31
 8005960:	d405      	bmi.n	800596e <_puts_r+0x22>
 8005962:	89a3      	ldrh	r3, [r4, #12]
 8005964:	0598      	lsls	r0, r3, #22
 8005966:	d402      	bmi.n	800596e <_puts_r+0x22>
 8005968:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800596a:	f000 f9c2 	bl	8005cf2 <__retarget_lock_acquire_recursive>
 800596e:	89a3      	ldrh	r3, [r4, #12]
 8005970:	0719      	lsls	r1, r3, #28
 8005972:	d502      	bpl.n	800597a <_puts_r+0x2e>
 8005974:	6923      	ldr	r3, [r4, #16]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d135      	bne.n	80059e6 <_puts_r+0x9a>
 800597a:	4621      	mov	r1, r4
 800597c:	4628      	mov	r0, r5
 800597e:	f000 f8e5 	bl	8005b4c <__swsetup_r>
 8005982:	b380      	cbz	r0, 80059e6 <_puts_r+0x9a>
 8005984:	f04f 35ff 	mov.w	r5, #4294967295
 8005988:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800598a:	07da      	lsls	r2, r3, #31
 800598c:	d405      	bmi.n	800599a <_puts_r+0x4e>
 800598e:	89a3      	ldrh	r3, [r4, #12]
 8005990:	059b      	lsls	r3, r3, #22
 8005992:	d402      	bmi.n	800599a <_puts_r+0x4e>
 8005994:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005996:	f000 f9ad 	bl	8005cf4 <__retarget_lock_release_recursive>
 800599a:	4628      	mov	r0, r5
 800599c:	bd70      	pop	{r4, r5, r6, pc}
 800599e:	2b00      	cmp	r3, #0
 80059a0:	da04      	bge.n	80059ac <_puts_r+0x60>
 80059a2:	69a2      	ldr	r2, [r4, #24]
 80059a4:	429a      	cmp	r2, r3
 80059a6:	dc17      	bgt.n	80059d8 <_puts_r+0x8c>
 80059a8:	290a      	cmp	r1, #10
 80059aa:	d015      	beq.n	80059d8 <_puts_r+0x8c>
 80059ac:	6823      	ldr	r3, [r4, #0]
 80059ae:	1c5a      	adds	r2, r3, #1
 80059b0:	6022      	str	r2, [r4, #0]
 80059b2:	7019      	strb	r1, [r3, #0]
 80059b4:	68a3      	ldr	r3, [r4, #8]
 80059b6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80059ba:	3b01      	subs	r3, #1
 80059bc:	60a3      	str	r3, [r4, #8]
 80059be:	2900      	cmp	r1, #0
 80059c0:	d1ed      	bne.n	800599e <_puts_r+0x52>
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	da11      	bge.n	80059ea <_puts_r+0x9e>
 80059c6:	4622      	mov	r2, r4
 80059c8:	210a      	movs	r1, #10
 80059ca:	4628      	mov	r0, r5
 80059cc:	f000 f87f 	bl	8005ace <__swbuf_r>
 80059d0:	3001      	adds	r0, #1
 80059d2:	d0d7      	beq.n	8005984 <_puts_r+0x38>
 80059d4:	250a      	movs	r5, #10
 80059d6:	e7d7      	b.n	8005988 <_puts_r+0x3c>
 80059d8:	4622      	mov	r2, r4
 80059da:	4628      	mov	r0, r5
 80059dc:	f000 f877 	bl	8005ace <__swbuf_r>
 80059e0:	3001      	adds	r0, #1
 80059e2:	d1e7      	bne.n	80059b4 <_puts_r+0x68>
 80059e4:	e7ce      	b.n	8005984 <_puts_r+0x38>
 80059e6:	3e01      	subs	r6, #1
 80059e8:	e7e4      	b.n	80059b4 <_puts_r+0x68>
 80059ea:	6823      	ldr	r3, [r4, #0]
 80059ec:	1c5a      	adds	r2, r3, #1
 80059ee:	6022      	str	r2, [r4, #0]
 80059f0:	220a      	movs	r2, #10
 80059f2:	701a      	strb	r2, [r3, #0]
 80059f4:	e7ee      	b.n	80059d4 <_puts_r+0x88>
	...

080059f8 <puts>:
 80059f8:	4b02      	ldr	r3, [pc, #8]	@ (8005a04 <puts+0xc>)
 80059fa:	4601      	mov	r1, r0
 80059fc:	6818      	ldr	r0, [r3, #0]
 80059fe:	f7ff bfa5 	b.w	800594c <_puts_r>
 8005a02:	bf00      	nop
 8005a04:	20000420 	.word	0x20000420

08005a08 <siprintf>:
 8005a08:	b40e      	push	{r1, r2, r3}
 8005a0a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005a0e:	b500      	push	{lr}
 8005a10:	b09c      	sub	sp, #112	@ 0x70
 8005a12:	ab1d      	add	r3, sp, #116	@ 0x74
 8005a14:	9002      	str	r0, [sp, #8]
 8005a16:	9006      	str	r0, [sp, #24]
 8005a18:	9107      	str	r1, [sp, #28]
 8005a1a:	9104      	str	r1, [sp, #16]
 8005a1c:	4808      	ldr	r0, [pc, #32]	@ (8005a40 <siprintf+0x38>)
 8005a1e:	4909      	ldr	r1, [pc, #36]	@ (8005a44 <siprintf+0x3c>)
 8005a20:	f853 2b04 	ldr.w	r2, [r3], #4
 8005a24:	9105      	str	r1, [sp, #20]
 8005a26:	6800      	ldr	r0, [r0, #0]
 8005a28:	a902      	add	r1, sp, #8
 8005a2a:	9301      	str	r3, [sp, #4]
 8005a2c:	f002 fc52 	bl	80082d4 <_svfiprintf_r>
 8005a30:	2200      	movs	r2, #0
 8005a32:	9b02      	ldr	r3, [sp, #8]
 8005a34:	701a      	strb	r2, [r3, #0]
 8005a36:	b01c      	add	sp, #112	@ 0x70
 8005a38:	f85d eb04 	ldr.w	lr, [sp], #4
 8005a3c:	b003      	add	sp, #12
 8005a3e:	4770      	bx	lr
 8005a40:	20000420 	.word	0x20000420
 8005a44:	ffff0208 	.word	0xffff0208

08005a48 <__sread>:
 8005a48:	b510      	push	{r4, lr}
 8005a4a:	460c      	mov	r4, r1
 8005a4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a50:	f000 f900 	bl	8005c54 <_read_r>
 8005a54:	2800      	cmp	r0, #0
 8005a56:	bfab      	itete	ge
 8005a58:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005a5a:	89a3      	ldrhlt	r3, [r4, #12]
 8005a5c:	181b      	addge	r3, r3, r0
 8005a5e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005a62:	bfac      	ite	ge
 8005a64:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005a66:	81a3      	strhlt	r3, [r4, #12]
 8005a68:	bd10      	pop	{r4, pc}

08005a6a <__swrite>:
 8005a6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a6e:	461f      	mov	r7, r3
 8005a70:	898b      	ldrh	r3, [r1, #12]
 8005a72:	4605      	mov	r5, r0
 8005a74:	05db      	lsls	r3, r3, #23
 8005a76:	460c      	mov	r4, r1
 8005a78:	4616      	mov	r6, r2
 8005a7a:	d505      	bpl.n	8005a88 <__swrite+0x1e>
 8005a7c:	2302      	movs	r3, #2
 8005a7e:	2200      	movs	r2, #0
 8005a80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a84:	f000 f8d4 	bl	8005c30 <_lseek_r>
 8005a88:	89a3      	ldrh	r3, [r4, #12]
 8005a8a:	4632      	mov	r2, r6
 8005a8c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005a90:	81a3      	strh	r3, [r4, #12]
 8005a92:	4628      	mov	r0, r5
 8005a94:	463b      	mov	r3, r7
 8005a96:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005a9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005a9e:	f000 b8eb 	b.w	8005c78 <_write_r>

08005aa2 <__sseek>:
 8005aa2:	b510      	push	{r4, lr}
 8005aa4:	460c      	mov	r4, r1
 8005aa6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005aaa:	f000 f8c1 	bl	8005c30 <_lseek_r>
 8005aae:	1c43      	adds	r3, r0, #1
 8005ab0:	89a3      	ldrh	r3, [r4, #12]
 8005ab2:	bf15      	itete	ne
 8005ab4:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005ab6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005aba:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005abe:	81a3      	strheq	r3, [r4, #12]
 8005ac0:	bf18      	it	ne
 8005ac2:	81a3      	strhne	r3, [r4, #12]
 8005ac4:	bd10      	pop	{r4, pc}

08005ac6 <__sclose>:
 8005ac6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005aca:	f000 b8a1 	b.w	8005c10 <_close_r>

08005ace <__swbuf_r>:
 8005ace:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ad0:	460e      	mov	r6, r1
 8005ad2:	4614      	mov	r4, r2
 8005ad4:	4605      	mov	r5, r0
 8005ad6:	b118      	cbz	r0, 8005ae0 <__swbuf_r+0x12>
 8005ad8:	6a03      	ldr	r3, [r0, #32]
 8005ada:	b90b      	cbnz	r3, 8005ae0 <__swbuf_r+0x12>
 8005adc:	f7ff ff00 	bl	80058e0 <__sinit>
 8005ae0:	69a3      	ldr	r3, [r4, #24]
 8005ae2:	60a3      	str	r3, [r4, #8]
 8005ae4:	89a3      	ldrh	r3, [r4, #12]
 8005ae6:	071a      	lsls	r2, r3, #28
 8005ae8:	d501      	bpl.n	8005aee <__swbuf_r+0x20>
 8005aea:	6923      	ldr	r3, [r4, #16]
 8005aec:	b943      	cbnz	r3, 8005b00 <__swbuf_r+0x32>
 8005aee:	4621      	mov	r1, r4
 8005af0:	4628      	mov	r0, r5
 8005af2:	f000 f82b 	bl	8005b4c <__swsetup_r>
 8005af6:	b118      	cbz	r0, 8005b00 <__swbuf_r+0x32>
 8005af8:	f04f 37ff 	mov.w	r7, #4294967295
 8005afc:	4638      	mov	r0, r7
 8005afe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005b00:	6823      	ldr	r3, [r4, #0]
 8005b02:	6922      	ldr	r2, [r4, #16]
 8005b04:	b2f6      	uxtb	r6, r6
 8005b06:	1a98      	subs	r0, r3, r2
 8005b08:	6963      	ldr	r3, [r4, #20]
 8005b0a:	4637      	mov	r7, r6
 8005b0c:	4283      	cmp	r3, r0
 8005b0e:	dc05      	bgt.n	8005b1c <__swbuf_r+0x4e>
 8005b10:	4621      	mov	r1, r4
 8005b12:	4628      	mov	r0, r5
 8005b14:	f002 fd5a 	bl	80085cc <_fflush_r>
 8005b18:	2800      	cmp	r0, #0
 8005b1a:	d1ed      	bne.n	8005af8 <__swbuf_r+0x2a>
 8005b1c:	68a3      	ldr	r3, [r4, #8]
 8005b1e:	3b01      	subs	r3, #1
 8005b20:	60a3      	str	r3, [r4, #8]
 8005b22:	6823      	ldr	r3, [r4, #0]
 8005b24:	1c5a      	adds	r2, r3, #1
 8005b26:	6022      	str	r2, [r4, #0]
 8005b28:	701e      	strb	r6, [r3, #0]
 8005b2a:	6962      	ldr	r2, [r4, #20]
 8005b2c:	1c43      	adds	r3, r0, #1
 8005b2e:	429a      	cmp	r2, r3
 8005b30:	d004      	beq.n	8005b3c <__swbuf_r+0x6e>
 8005b32:	89a3      	ldrh	r3, [r4, #12]
 8005b34:	07db      	lsls	r3, r3, #31
 8005b36:	d5e1      	bpl.n	8005afc <__swbuf_r+0x2e>
 8005b38:	2e0a      	cmp	r6, #10
 8005b3a:	d1df      	bne.n	8005afc <__swbuf_r+0x2e>
 8005b3c:	4621      	mov	r1, r4
 8005b3e:	4628      	mov	r0, r5
 8005b40:	f002 fd44 	bl	80085cc <_fflush_r>
 8005b44:	2800      	cmp	r0, #0
 8005b46:	d0d9      	beq.n	8005afc <__swbuf_r+0x2e>
 8005b48:	e7d6      	b.n	8005af8 <__swbuf_r+0x2a>
	...

08005b4c <__swsetup_r>:
 8005b4c:	b538      	push	{r3, r4, r5, lr}
 8005b4e:	4b29      	ldr	r3, [pc, #164]	@ (8005bf4 <__swsetup_r+0xa8>)
 8005b50:	4605      	mov	r5, r0
 8005b52:	6818      	ldr	r0, [r3, #0]
 8005b54:	460c      	mov	r4, r1
 8005b56:	b118      	cbz	r0, 8005b60 <__swsetup_r+0x14>
 8005b58:	6a03      	ldr	r3, [r0, #32]
 8005b5a:	b90b      	cbnz	r3, 8005b60 <__swsetup_r+0x14>
 8005b5c:	f7ff fec0 	bl	80058e0 <__sinit>
 8005b60:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005b64:	0719      	lsls	r1, r3, #28
 8005b66:	d422      	bmi.n	8005bae <__swsetup_r+0x62>
 8005b68:	06da      	lsls	r2, r3, #27
 8005b6a:	d407      	bmi.n	8005b7c <__swsetup_r+0x30>
 8005b6c:	2209      	movs	r2, #9
 8005b6e:	602a      	str	r2, [r5, #0]
 8005b70:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005b74:	f04f 30ff 	mov.w	r0, #4294967295
 8005b78:	81a3      	strh	r3, [r4, #12]
 8005b7a:	e033      	b.n	8005be4 <__swsetup_r+0x98>
 8005b7c:	0758      	lsls	r0, r3, #29
 8005b7e:	d512      	bpl.n	8005ba6 <__swsetup_r+0x5a>
 8005b80:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005b82:	b141      	cbz	r1, 8005b96 <__swsetup_r+0x4a>
 8005b84:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005b88:	4299      	cmp	r1, r3
 8005b8a:	d002      	beq.n	8005b92 <__swsetup_r+0x46>
 8005b8c:	4628      	mov	r0, r5
 8005b8e:	f000 ff23 	bl	80069d8 <_free_r>
 8005b92:	2300      	movs	r3, #0
 8005b94:	6363      	str	r3, [r4, #52]	@ 0x34
 8005b96:	89a3      	ldrh	r3, [r4, #12]
 8005b98:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005b9c:	81a3      	strh	r3, [r4, #12]
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	6063      	str	r3, [r4, #4]
 8005ba2:	6923      	ldr	r3, [r4, #16]
 8005ba4:	6023      	str	r3, [r4, #0]
 8005ba6:	89a3      	ldrh	r3, [r4, #12]
 8005ba8:	f043 0308 	orr.w	r3, r3, #8
 8005bac:	81a3      	strh	r3, [r4, #12]
 8005bae:	6923      	ldr	r3, [r4, #16]
 8005bb0:	b94b      	cbnz	r3, 8005bc6 <__swsetup_r+0x7a>
 8005bb2:	89a3      	ldrh	r3, [r4, #12]
 8005bb4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005bb8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005bbc:	d003      	beq.n	8005bc6 <__swsetup_r+0x7a>
 8005bbe:	4621      	mov	r1, r4
 8005bc0:	4628      	mov	r0, r5
 8005bc2:	f002 fd50 	bl	8008666 <__smakebuf_r>
 8005bc6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005bca:	f013 0201 	ands.w	r2, r3, #1
 8005bce:	d00a      	beq.n	8005be6 <__swsetup_r+0x9a>
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	60a2      	str	r2, [r4, #8]
 8005bd4:	6962      	ldr	r2, [r4, #20]
 8005bd6:	4252      	negs	r2, r2
 8005bd8:	61a2      	str	r2, [r4, #24]
 8005bda:	6922      	ldr	r2, [r4, #16]
 8005bdc:	b942      	cbnz	r2, 8005bf0 <__swsetup_r+0xa4>
 8005bde:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005be2:	d1c5      	bne.n	8005b70 <__swsetup_r+0x24>
 8005be4:	bd38      	pop	{r3, r4, r5, pc}
 8005be6:	0799      	lsls	r1, r3, #30
 8005be8:	bf58      	it	pl
 8005bea:	6962      	ldrpl	r2, [r4, #20]
 8005bec:	60a2      	str	r2, [r4, #8]
 8005bee:	e7f4      	b.n	8005bda <__swsetup_r+0x8e>
 8005bf0:	2000      	movs	r0, #0
 8005bf2:	e7f7      	b.n	8005be4 <__swsetup_r+0x98>
 8005bf4:	20000420 	.word	0x20000420

08005bf8 <memset>:
 8005bf8:	4603      	mov	r3, r0
 8005bfa:	4402      	add	r2, r0
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d100      	bne.n	8005c02 <memset+0xa>
 8005c00:	4770      	bx	lr
 8005c02:	f803 1b01 	strb.w	r1, [r3], #1
 8005c06:	e7f9      	b.n	8005bfc <memset+0x4>

08005c08 <_localeconv_r>:
 8005c08:	4800      	ldr	r0, [pc, #0]	@ (8005c0c <_localeconv_r+0x4>)
 8005c0a:	4770      	bx	lr
 8005c0c:	20000560 	.word	0x20000560

08005c10 <_close_r>:
 8005c10:	b538      	push	{r3, r4, r5, lr}
 8005c12:	2300      	movs	r3, #0
 8005c14:	4d05      	ldr	r5, [pc, #20]	@ (8005c2c <_close_r+0x1c>)
 8005c16:	4604      	mov	r4, r0
 8005c18:	4608      	mov	r0, r1
 8005c1a:	602b      	str	r3, [r5, #0]
 8005c1c:	f7fb fc75 	bl	800150a <_close>
 8005c20:	1c43      	adds	r3, r0, #1
 8005c22:	d102      	bne.n	8005c2a <_close_r+0x1a>
 8005c24:	682b      	ldr	r3, [r5, #0]
 8005c26:	b103      	cbz	r3, 8005c2a <_close_r+0x1a>
 8005c28:	6023      	str	r3, [r4, #0]
 8005c2a:	bd38      	pop	{r3, r4, r5, pc}
 8005c2c:	20003154 	.word	0x20003154

08005c30 <_lseek_r>:
 8005c30:	b538      	push	{r3, r4, r5, lr}
 8005c32:	4604      	mov	r4, r0
 8005c34:	4608      	mov	r0, r1
 8005c36:	4611      	mov	r1, r2
 8005c38:	2200      	movs	r2, #0
 8005c3a:	4d05      	ldr	r5, [pc, #20]	@ (8005c50 <_lseek_r+0x20>)
 8005c3c:	602a      	str	r2, [r5, #0]
 8005c3e:	461a      	mov	r2, r3
 8005c40:	f7fb fc87 	bl	8001552 <_lseek>
 8005c44:	1c43      	adds	r3, r0, #1
 8005c46:	d102      	bne.n	8005c4e <_lseek_r+0x1e>
 8005c48:	682b      	ldr	r3, [r5, #0]
 8005c4a:	b103      	cbz	r3, 8005c4e <_lseek_r+0x1e>
 8005c4c:	6023      	str	r3, [r4, #0]
 8005c4e:	bd38      	pop	{r3, r4, r5, pc}
 8005c50:	20003154 	.word	0x20003154

08005c54 <_read_r>:
 8005c54:	b538      	push	{r3, r4, r5, lr}
 8005c56:	4604      	mov	r4, r0
 8005c58:	4608      	mov	r0, r1
 8005c5a:	4611      	mov	r1, r2
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	4d05      	ldr	r5, [pc, #20]	@ (8005c74 <_read_r+0x20>)
 8005c60:	602a      	str	r2, [r5, #0]
 8005c62:	461a      	mov	r2, r3
 8005c64:	f7fb fc18 	bl	8001498 <_read>
 8005c68:	1c43      	adds	r3, r0, #1
 8005c6a:	d102      	bne.n	8005c72 <_read_r+0x1e>
 8005c6c:	682b      	ldr	r3, [r5, #0]
 8005c6e:	b103      	cbz	r3, 8005c72 <_read_r+0x1e>
 8005c70:	6023      	str	r3, [r4, #0]
 8005c72:	bd38      	pop	{r3, r4, r5, pc}
 8005c74:	20003154 	.word	0x20003154

08005c78 <_write_r>:
 8005c78:	b538      	push	{r3, r4, r5, lr}
 8005c7a:	4604      	mov	r4, r0
 8005c7c:	4608      	mov	r0, r1
 8005c7e:	4611      	mov	r1, r2
 8005c80:	2200      	movs	r2, #0
 8005c82:	4d05      	ldr	r5, [pc, #20]	@ (8005c98 <_write_r+0x20>)
 8005c84:	602a      	str	r2, [r5, #0]
 8005c86:	461a      	mov	r2, r3
 8005c88:	f7fb fc23 	bl	80014d2 <_write>
 8005c8c:	1c43      	adds	r3, r0, #1
 8005c8e:	d102      	bne.n	8005c96 <_write_r+0x1e>
 8005c90:	682b      	ldr	r3, [r5, #0]
 8005c92:	b103      	cbz	r3, 8005c96 <_write_r+0x1e>
 8005c94:	6023      	str	r3, [r4, #0]
 8005c96:	bd38      	pop	{r3, r4, r5, pc}
 8005c98:	20003154 	.word	0x20003154

08005c9c <__errno>:
 8005c9c:	4b01      	ldr	r3, [pc, #4]	@ (8005ca4 <__errno+0x8>)
 8005c9e:	6818      	ldr	r0, [r3, #0]
 8005ca0:	4770      	bx	lr
 8005ca2:	bf00      	nop
 8005ca4:	20000420 	.word	0x20000420

08005ca8 <__libc_init_array>:
 8005ca8:	b570      	push	{r4, r5, r6, lr}
 8005caa:	2600      	movs	r6, #0
 8005cac:	4d0c      	ldr	r5, [pc, #48]	@ (8005ce0 <__libc_init_array+0x38>)
 8005cae:	4c0d      	ldr	r4, [pc, #52]	@ (8005ce4 <__libc_init_array+0x3c>)
 8005cb0:	1b64      	subs	r4, r4, r5
 8005cb2:	10a4      	asrs	r4, r4, #2
 8005cb4:	42a6      	cmp	r6, r4
 8005cb6:	d109      	bne.n	8005ccc <__libc_init_array+0x24>
 8005cb8:	f003 fad2 	bl	8009260 <_init>
 8005cbc:	2600      	movs	r6, #0
 8005cbe:	4d0a      	ldr	r5, [pc, #40]	@ (8005ce8 <__libc_init_array+0x40>)
 8005cc0:	4c0a      	ldr	r4, [pc, #40]	@ (8005cec <__libc_init_array+0x44>)
 8005cc2:	1b64      	subs	r4, r4, r5
 8005cc4:	10a4      	asrs	r4, r4, #2
 8005cc6:	42a6      	cmp	r6, r4
 8005cc8:	d105      	bne.n	8005cd6 <__libc_init_array+0x2e>
 8005cca:	bd70      	pop	{r4, r5, r6, pc}
 8005ccc:	f855 3b04 	ldr.w	r3, [r5], #4
 8005cd0:	4798      	blx	r3
 8005cd2:	3601      	adds	r6, #1
 8005cd4:	e7ee      	b.n	8005cb4 <__libc_init_array+0xc>
 8005cd6:	f855 3b04 	ldr.w	r3, [r5], #4
 8005cda:	4798      	blx	r3
 8005cdc:	3601      	adds	r6, #1
 8005cde:	e7f2      	b.n	8005cc6 <__libc_init_array+0x1e>
 8005ce0:	08009758 	.word	0x08009758
 8005ce4:	08009758 	.word	0x08009758
 8005ce8:	08009758 	.word	0x08009758
 8005cec:	0800975c 	.word	0x0800975c

08005cf0 <__retarget_lock_init_recursive>:
 8005cf0:	4770      	bx	lr

08005cf2 <__retarget_lock_acquire_recursive>:
 8005cf2:	4770      	bx	lr

08005cf4 <__retarget_lock_release_recursive>:
 8005cf4:	4770      	bx	lr

08005cf6 <memchr>:
 8005cf6:	4603      	mov	r3, r0
 8005cf8:	b510      	push	{r4, lr}
 8005cfa:	b2c9      	uxtb	r1, r1
 8005cfc:	4402      	add	r2, r0
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	4618      	mov	r0, r3
 8005d02:	d101      	bne.n	8005d08 <memchr+0x12>
 8005d04:	2000      	movs	r0, #0
 8005d06:	e003      	b.n	8005d10 <memchr+0x1a>
 8005d08:	7804      	ldrb	r4, [r0, #0]
 8005d0a:	3301      	adds	r3, #1
 8005d0c:	428c      	cmp	r4, r1
 8005d0e:	d1f6      	bne.n	8005cfe <memchr+0x8>
 8005d10:	bd10      	pop	{r4, pc}

08005d12 <memcpy>:
 8005d12:	440a      	add	r2, r1
 8005d14:	4291      	cmp	r1, r2
 8005d16:	f100 33ff 	add.w	r3, r0, #4294967295
 8005d1a:	d100      	bne.n	8005d1e <memcpy+0xc>
 8005d1c:	4770      	bx	lr
 8005d1e:	b510      	push	{r4, lr}
 8005d20:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005d24:	4291      	cmp	r1, r2
 8005d26:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005d2a:	d1f9      	bne.n	8005d20 <memcpy+0xe>
 8005d2c:	bd10      	pop	{r4, pc}
	...

08005d30 <nanf>:
 8005d30:	4800      	ldr	r0, [pc, #0]	@ (8005d34 <nanf+0x4>)
 8005d32:	4770      	bx	lr
 8005d34:	7fc00000 	.word	0x7fc00000

08005d38 <quorem>:
 8005d38:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d3c:	6903      	ldr	r3, [r0, #16]
 8005d3e:	690c      	ldr	r4, [r1, #16]
 8005d40:	4607      	mov	r7, r0
 8005d42:	42a3      	cmp	r3, r4
 8005d44:	db7e      	blt.n	8005e44 <quorem+0x10c>
 8005d46:	3c01      	subs	r4, #1
 8005d48:	00a3      	lsls	r3, r4, #2
 8005d4a:	f100 0514 	add.w	r5, r0, #20
 8005d4e:	f101 0814 	add.w	r8, r1, #20
 8005d52:	9300      	str	r3, [sp, #0]
 8005d54:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005d58:	9301      	str	r3, [sp, #4]
 8005d5a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005d5e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005d62:	3301      	adds	r3, #1
 8005d64:	429a      	cmp	r2, r3
 8005d66:	fbb2 f6f3 	udiv	r6, r2, r3
 8005d6a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005d6e:	d32e      	bcc.n	8005dce <quorem+0x96>
 8005d70:	f04f 0a00 	mov.w	sl, #0
 8005d74:	46c4      	mov	ip, r8
 8005d76:	46ae      	mov	lr, r5
 8005d78:	46d3      	mov	fp, sl
 8005d7a:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005d7e:	b298      	uxth	r0, r3
 8005d80:	fb06 a000 	mla	r0, r6, r0, sl
 8005d84:	0c1b      	lsrs	r3, r3, #16
 8005d86:	0c02      	lsrs	r2, r0, #16
 8005d88:	fb06 2303 	mla	r3, r6, r3, r2
 8005d8c:	f8de 2000 	ldr.w	r2, [lr]
 8005d90:	b280      	uxth	r0, r0
 8005d92:	b292      	uxth	r2, r2
 8005d94:	1a12      	subs	r2, r2, r0
 8005d96:	445a      	add	r2, fp
 8005d98:	f8de 0000 	ldr.w	r0, [lr]
 8005d9c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005da0:	b29b      	uxth	r3, r3
 8005da2:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8005da6:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8005daa:	b292      	uxth	r2, r2
 8005dac:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005db0:	45e1      	cmp	r9, ip
 8005db2:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8005db6:	f84e 2b04 	str.w	r2, [lr], #4
 8005dba:	d2de      	bcs.n	8005d7a <quorem+0x42>
 8005dbc:	9b00      	ldr	r3, [sp, #0]
 8005dbe:	58eb      	ldr	r3, [r5, r3]
 8005dc0:	b92b      	cbnz	r3, 8005dce <quorem+0x96>
 8005dc2:	9b01      	ldr	r3, [sp, #4]
 8005dc4:	3b04      	subs	r3, #4
 8005dc6:	429d      	cmp	r5, r3
 8005dc8:	461a      	mov	r2, r3
 8005dca:	d32f      	bcc.n	8005e2c <quorem+0xf4>
 8005dcc:	613c      	str	r4, [r7, #16]
 8005dce:	4638      	mov	r0, r7
 8005dd0:	f001 f9c2 	bl	8007158 <__mcmp>
 8005dd4:	2800      	cmp	r0, #0
 8005dd6:	db25      	blt.n	8005e24 <quorem+0xec>
 8005dd8:	4629      	mov	r1, r5
 8005dda:	2000      	movs	r0, #0
 8005ddc:	f858 2b04 	ldr.w	r2, [r8], #4
 8005de0:	f8d1 c000 	ldr.w	ip, [r1]
 8005de4:	fa1f fe82 	uxth.w	lr, r2
 8005de8:	fa1f f38c 	uxth.w	r3, ip
 8005dec:	eba3 030e 	sub.w	r3, r3, lr
 8005df0:	4403      	add	r3, r0
 8005df2:	0c12      	lsrs	r2, r2, #16
 8005df4:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8005df8:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8005dfc:	b29b      	uxth	r3, r3
 8005dfe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005e02:	45c1      	cmp	r9, r8
 8005e04:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005e08:	f841 3b04 	str.w	r3, [r1], #4
 8005e0c:	d2e6      	bcs.n	8005ddc <quorem+0xa4>
 8005e0e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005e12:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005e16:	b922      	cbnz	r2, 8005e22 <quorem+0xea>
 8005e18:	3b04      	subs	r3, #4
 8005e1a:	429d      	cmp	r5, r3
 8005e1c:	461a      	mov	r2, r3
 8005e1e:	d30b      	bcc.n	8005e38 <quorem+0x100>
 8005e20:	613c      	str	r4, [r7, #16]
 8005e22:	3601      	adds	r6, #1
 8005e24:	4630      	mov	r0, r6
 8005e26:	b003      	add	sp, #12
 8005e28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e2c:	6812      	ldr	r2, [r2, #0]
 8005e2e:	3b04      	subs	r3, #4
 8005e30:	2a00      	cmp	r2, #0
 8005e32:	d1cb      	bne.n	8005dcc <quorem+0x94>
 8005e34:	3c01      	subs	r4, #1
 8005e36:	e7c6      	b.n	8005dc6 <quorem+0x8e>
 8005e38:	6812      	ldr	r2, [r2, #0]
 8005e3a:	3b04      	subs	r3, #4
 8005e3c:	2a00      	cmp	r2, #0
 8005e3e:	d1ef      	bne.n	8005e20 <quorem+0xe8>
 8005e40:	3c01      	subs	r4, #1
 8005e42:	e7ea      	b.n	8005e1a <quorem+0xe2>
 8005e44:	2000      	movs	r0, #0
 8005e46:	e7ee      	b.n	8005e26 <quorem+0xee>

08005e48 <_dtoa_r>:
 8005e48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e4c:	4614      	mov	r4, r2
 8005e4e:	461d      	mov	r5, r3
 8005e50:	69c7      	ldr	r7, [r0, #28]
 8005e52:	b097      	sub	sp, #92	@ 0x5c
 8005e54:	4683      	mov	fp, r0
 8005e56:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8005e5a:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8005e5c:	b97f      	cbnz	r7, 8005e7e <_dtoa_r+0x36>
 8005e5e:	2010      	movs	r0, #16
 8005e60:	f000 fe02 	bl	8006a68 <malloc>
 8005e64:	4602      	mov	r2, r0
 8005e66:	f8cb 001c 	str.w	r0, [fp, #28]
 8005e6a:	b920      	cbnz	r0, 8005e76 <_dtoa_r+0x2e>
 8005e6c:	21ef      	movs	r1, #239	@ 0xef
 8005e6e:	4ba8      	ldr	r3, [pc, #672]	@ (8006110 <_dtoa_r+0x2c8>)
 8005e70:	48a8      	ldr	r0, [pc, #672]	@ (8006114 <_dtoa_r+0x2cc>)
 8005e72:	f002 fc99 	bl	80087a8 <__assert_func>
 8005e76:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8005e7a:	6007      	str	r7, [r0, #0]
 8005e7c:	60c7      	str	r7, [r0, #12]
 8005e7e:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005e82:	6819      	ldr	r1, [r3, #0]
 8005e84:	b159      	cbz	r1, 8005e9e <_dtoa_r+0x56>
 8005e86:	685a      	ldr	r2, [r3, #4]
 8005e88:	2301      	movs	r3, #1
 8005e8a:	4093      	lsls	r3, r2
 8005e8c:	604a      	str	r2, [r1, #4]
 8005e8e:	608b      	str	r3, [r1, #8]
 8005e90:	4658      	mov	r0, fp
 8005e92:	f000 fedf 	bl	8006c54 <_Bfree>
 8005e96:	2200      	movs	r2, #0
 8005e98:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005e9c:	601a      	str	r2, [r3, #0]
 8005e9e:	1e2b      	subs	r3, r5, #0
 8005ea0:	bfaf      	iteee	ge
 8005ea2:	2300      	movge	r3, #0
 8005ea4:	2201      	movlt	r2, #1
 8005ea6:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8005eaa:	9303      	strlt	r3, [sp, #12]
 8005eac:	bfa8      	it	ge
 8005eae:	6033      	strge	r3, [r6, #0]
 8005eb0:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8005eb4:	4b98      	ldr	r3, [pc, #608]	@ (8006118 <_dtoa_r+0x2d0>)
 8005eb6:	bfb8      	it	lt
 8005eb8:	6032      	strlt	r2, [r6, #0]
 8005eba:	ea33 0308 	bics.w	r3, r3, r8
 8005ebe:	d112      	bne.n	8005ee6 <_dtoa_r+0x9e>
 8005ec0:	f242 730f 	movw	r3, #9999	@ 0x270f
 8005ec4:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8005ec6:	6013      	str	r3, [r2, #0]
 8005ec8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8005ecc:	4323      	orrs	r3, r4
 8005ece:	f000 8550 	beq.w	8006972 <_dtoa_r+0xb2a>
 8005ed2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005ed4:	f8df a244 	ldr.w	sl, [pc, #580]	@ 800611c <_dtoa_r+0x2d4>
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	f000 8552 	beq.w	8006982 <_dtoa_r+0xb3a>
 8005ede:	f10a 0303 	add.w	r3, sl, #3
 8005ee2:	f000 bd4c 	b.w	800697e <_dtoa_r+0xb36>
 8005ee6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005eea:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8005eee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	2300      	movs	r3, #0
 8005ef6:	f7fa fd57 	bl	80009a8 <__aeabi_dcmpeq>
 8005efa:	4607      	mov	r7, r0
 8005efc:	b158      	cbz	r0, 8005f16 <_dtoa_r+0xce>
 8005efe:	2301      	movs	r3, #1
 8005f00:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8005f02:	6013      	str	r3, [r2, #0]
 8005f04:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005f06:	b113      	cbz	r3, 8005f0e <_dtoa_r+0xc6>
 8005f08:	4b85      	ldr	r3, [pc, #532]	@ (8006120 <_dtoa_r+0x2d8>)
 8005f0a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8005f0c:	6013      	str	r3, [r2, #0]
 8005f0e:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8006124 <_dtoa_r+0x2dc>
 8005f12:	f000 bd36 	b.w	8006982 <_dtoa_r+0xb3a>
 8005f16:	ab14      	add	r3, sp, #80	@ 0x50
 8005f18:	9301      	str	r3, [sp, #4]
 8005f1a:	ab15      	add	r3, sp, #84	@ 0x54
 8005f1c:	9300      	str	r3, [sp, #0]
 8005f1e:	4658      	mov	r0, fp
 8005f20:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8005f24:	f001 fa30 	bl	8007388 <__d2b>
 8005f28:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8005f2c:	4681      	mov	r9, r0
 8005f2e:	2e00      	cmp	r6, #0
 8005f30:	d077      	beq.n	8006022 <_dtoa_r+0x1da>
 8005f32:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005f36:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005f38:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8005f3c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005f40:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8005f44:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8005f48:	9712      	str	r7, [sp, #72]	@ 0x48
 8005f4a:	4619      	mov	r1, r3
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	4b76      	ldr	r3, [pc, #472]	@ (8006128 <_dtoa_r+0x2e0>)
 8005f50:	f7fa f90a 	bl	8000168 <__aeabi_dsub>
 8005f54:	a368      	add	r3, pc, #416	@ (adr r3, 80060f8 <_dtoa_r+0x2b0>)
 8005f56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f5a:	f7fa fabd 	bl	80004d8 <__aeabi_dmul>
 8005f5e:	a368      	add	r3, pc, #416	@ (adr r3, 8006100 <_dtoa_r+0x2b8>)
 8005f60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f64:	f7fa f902 	bl	800016c <__adddf3>
 8005f68:	4604      	mov	r4, r0
 8005f6a:	4630      	mov	r0, r6
 8005f6c:	460d      	mov	r5, r1
 8005f6e:	f7fa fa49 	bl	8000404 <__aeabi_i2d>
 8005f72:	a365      	add	r3, pc, #404	@ (adr r3, 8006108 <_dtoa_r+0x2c0>)
 8005f74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f78:	f7fa faae 	bl	80004d8 <__aeabi_dmul>
 8005f7c:	4602      	mov	r2, r0
 8005f7e:	460b      	mov	r3, r1
 8005f80:	4620      	mov	r0, r4
 8005f82:	4629      	mov	r1, r5
 8005f84:	f7fa f8f2 	bl	800016c <__adddf3>
 8005f88:	4604      	mov	r4, r0
 8005f8a:	460d      	mov	r5, r1
 8005f8c:	f7fa fd54 	bl	8000a38 <__aeabi_d2iz>
 8005f90:	2200      	movs	r2, #0
 8005f92:	4607      	mov	r7, r0
 8005f94:	2300      	movs	r3, #0
 8005f96:	4620      	mov	r0, r4
 8005f98:	4629      	mov	r1, r5
 8005f9a:	f7fa fd0f 	bl	80009bc <__aeabi_dcmplt>
 8005f9e:	b140      	cbz	r0, 8005fb2 <_dtoa_r+0x16a>
 8005fa0:	4638      	mov	r0, r7
 8005fa2:	f7fa fa2f 	bl	8000404 <__aeabi_i2d>
 8005fa6:	4622      	mov	r2, r4
 8005fa8:	462b      	mov	r3, r5
 8005faa:	f7fa fcfd 	bl	80009a8 <__aeabi_dcmpeq>
 8005fae:	b900      	cbnz	r0, 8005fb2 <_dtoa_r+0x16a>
 8005fb0:	3f01      	subs	r7, #1
 8005fb2:	2f16      	cmp	r7, #22
 8005fb4:	d853      	bhi.n	800605e <_dtoa_r+0x216>
 8005fb6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005fba:	4b5c      	ldr	r3, [pc, #368]	@ (800612c <_dtoa_r+0x2e4>)
 8005fbc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005fc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fc4:	f7fa fcfa 	bl	80009bc <__aeabi_dcmplt>
 8005fc8:	2800      	cmp	r0, #0
 8005fca:	d04a      	beq.n	8006062 <_dtoa_r+0x21a>
 8005fcc:	2300      	movs	r3, #0
 8005fce:	3f01      	subs	r7, #1
 8005fd0:	930f      	str	r3, [sp, #60]	@ 0x3c
 8005fd2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005fd4:	1b9b      	subs	r3, r3, r6
 8005fd6:	1e5a      	subs	r2, r3, #1
 8005fd8:	bf46      	itte	mi
 8005fda:	f1c3 0801 	rsbmi	r8, r3, #1
 8005fde:	2300      	movmi	r3, #0
 8005fe0:	f04f 0800 	movpl.w	r8, #0
 8005fe4:	9209      	str	r2, [sp, #36]	@ 0x24
 8005fe6:	bf48      	it	mi
 8005fe8:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8005fea:	2f00      	cmp	r7, #0
 8005fec:	db3b      	blt.n	8006066 <_dtoa_r+0x21e>
 8005fee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005ff0:	970e      	str	r7, [sp, #56]	@ 0x38
 8005ff2:	443b      	add	r3, r7
 8005ff4:	9309      	str	r3, [sp, #36]	@ 0x24
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	930a      	str	r3, [sp, #40]	@ 0x28
 8005ffa:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005ffc:	2b09      	cmp	r3, #9
 8005ffe:	d866      	bhi.n	80060ce <_dtoa_r+0x286>
 8006000:	2b05      	cmp	r3, #5
 8006002:	bfc4      	itt	gt
 8006004:	3b04      	subgt	r3, #4
 8006006:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8006008:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800600a:	bfc8      	it	gt
 800600c:	2400      	movgt	r4, #0
 800600e:	f1a3 0302 	sub.w	r3, r3, #2
 8006012:	bfd8      	it	le
 8006014:	2401      	movle	r4, #1
 8006016:	2b03      	cmp	r3, #3
 8006018:	d864      	bhi.n	80060e4 <_dtoa_r+0x29c>
 800601a:	e8df f003 	tbb	[pc, r3]
 800601e:	382b      	.short	0x382b
 8006020:	5636      	.short	0x5636
 8006022:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8006026:	441e      	add	r6, r3
 8006028:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800602c:	2b20      	cmp	r3, #32
 800602e:	bfc1      	itttt	gt
 8006030:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006034:	fa08 f803 	lslgt.w	r8, r8, r3
 8006038:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800603c:	fa24 f303 	lsrgt.w	r3, r4, r3
 8006040:	bfd6      	itet	le
 8006042:	f1c3 0320 	rsble	r3, r3, #32
 8006046:	ea48 0003 	orrgt.w	r0, r8, r3
 800604a:	fa04 f003 	lslle.w	r0, r4, r3
 800604e:	f7fa f9c9 	bl	80003e4 <__aeabi_ui2d>
 8006052:	2201      	movs	r2, #1
 8006054:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8006058:	3e01      	subs	r6, #1
 800605a:	9212      	str	r2, [sp, #72]	@ 0x48
 800605c:	e775      	b.n	8005f4a <_dtoa_r+0x102>
 800605e:	2301      	movs	r3, #1
 8006060:	e7b6      	b.n	8005fd0 <_dtoa_r+0x188>
 8006062:	900f      	str	r0, [sp, #60]	@ 0x3c
 8006064:	e7b5      	b.n	8005fd2 <_dtoa_r+0x18a>
 8006066:	427b      	negs	r3, r7
 8006068:	930a      	str	r3, [sp, #40]	@ 0x28
 800606a:	2300      	movs	r3, #0
 800606c:	eba8 0807 	sub.w	r8, r8, r7
 8006070:	930e      	str	r3, [sp, #56]	@ 0x38
 8006072:	e7c2      	b.n	8005ffa <_dtoa_r+0x1b2>
 8006074:	2300      	movs	r3, #0
 8006076:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006078:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800607a:	2b00      	cmp	r3, #0
 800607c:	dc35      	bgt.n	80060ea <_dtoa_r+0x2a2>
 800607e:	2301      	movs	r3, #1
 8006080:	461a      	mov	r2, r3
 8006082:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8006086:	9221      	str	r2, [sp, #132]	@ 0x84
 8006088:	e00b      	b.n	80060a2 <_dtoa_r+0x25a>
 800608a:	2301      	movs	r3, #1
 800608c:	e7f3      	b.n	8006076 <_dtoa_r+0x22e>
 800608e:	2300      	movs	r3, #0
 8006090:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006092:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006094:	18fb      	adds	r3, r7, r3
 8006096:	9308      	str	r3, [sp, #32]
 8006098:	3301      	adds	r3, #1
 800609a:	2b01      	cmp	r3, #1
 800609c:	9307      	str	r3, [sp, #28]
 800609e:	bfb8      	it	lt
 80060a0:	2301      	movlt	r3, #1
 80060a2:	2100      	movs	r1, #0
 80060a4:	2204      	movs	r2, #4
 80060a6:	f8db 001c 	ldr.w	r0, [fp, #28]
 80060aa:	f102 0514 	add.w	r5, r2, #20
 80060ae:	429d      	cmp	r5, r3
 80060b0:	d91f      	bls.n	80060f2 <_dtoa_r+0x2aa>
 80060b2:	6041      	str	r1, [r0, #4]
 80060b4:	4658      	mov	r0, fp
 80060b6:	f000 fd8d 	bl	8006bd4 <_Balloc>
 80060ba:	4682      	mov	sl, r0
 80060bc:	2800      	cmp	r0, #0
 80060be:	d139      	bne.n	8006134 <_dtoa_r+0x2ec>
 80060c0:	4602      	mov	r2, r0
 80060c2:	f240 11af 	movw	r1, #431	@ 0x1af
 80060c6:	4b1a      	ldr	r3, [pc, #104]	@ (8006130 <_dtoa_r+0x2e8>)
 80060c8:	e6d2      	b.n	8005e70 <_dtoa_r+0x28>
 80060ca:	2301      	movs	r3, #1
 80060cc:	e7e0      	b.n	8006090 <_dtoa_r+0x248>
 80060ce:	2401      	movs	r4, #1
 80060d0:	2300      	movs	r3, #0
 80060d2:	940b      	str	r4, [sp, #44]	@ 0x2c
 80060d4:	9320      	str	r3, [sp, #128]	@ 0x80
 80060d6:	f04f 33ff 	mov.w	r3, #4294967295
 80060da:	2200      	movs	r2, #0
 80060dc:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80060e0:	2312      	movs	r3, #18
 80060e2:	e7d0      	b.n	8006086 <_dtoa_r+0x23e>
 80060e4:	2301      	movs	r3, #1
 80060e6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80060e8:	e7f5      	b.n	80060d6 <_dtoa_r+0x28e>
 80060ea:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80060ec:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80060f0:	e7d7      	b.n	80060a2 <_dtoa_r+0x25a>
 80060f2:	3101      	adds	r1, #1
 80060f4:	0052      	lsls	r2, r2, #1
 80060f6:	e7d8      	b.n	80060aa <_dtoa_r+0x262>
 80060f8:	636f4361 	.word	0x636f4361
 80060fc:	3fd287a7 	.word	0x3fd287a7
 8006100:	8b60c8b3 	.word	0x8b60c8b3
 8006104:	3fc68a28 	.word	0x3fc68a28
 8006108:	509f79fb 	.word	0x509f79fb
 800610c:	3fd34413 	.word	0x3fd34413
 8006110:	08009368 	.word	0x08009368
 8006114:	0800937f 	.word	0x0800937f
 8006118:	7ff00000 	.word	0x7ff00000
 800611c:	08009364 	.word	0x08009364
 8006120:	08009333 	.word	0x08009333
 8006124:	08009332 	.word	0x08009332
 8006128:	3ff80000 	.word	0x3ff80000
 800612c:	08009478 	.word	0x08009478
 8006130:	080093d7 	.word	0x080093d7
 8006134:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006138:	6018      	str	r0, [r3, #0]
 800613a:	9b07      	ldr	r3, [sp, #28]
 800613c:	2b0e      	cmp	r3, #14
 800613e:	f200 80a4 	bhi.w	800628a <_dtoa_r+0x442>
 8006142:	2c00      	cmp	r4, #0
 8006144:	f000 80a1 	beq.w	800628a <_dtoa_r+0x442>
 8006148:	2f00      	cmp	r7, #0
 800614a:	dd33      	ble.n	80061b4 <_dtoa_r+0x36c>
 800614c:	4b86      	ldr	r3, [pc, #536]	@ (8006368 <_dtoa_r+0x520>)
 800614e:	f007 020f 	and.w	r2, r7, #15
 8006152:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006156:	05f8      	lsls	r0, r7, #23
 8006158:	e9d3 3400 	ldrd	r3, r4, [r3]
 800615c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006160:	ea4f 1427 	mov.w	r4, r7, asr #4
 8006164:	d516      	bpl.n	8006194 <_dtoa_r+0x34c>
 8006166:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800616a:	4b80      	ldr	r3, [pc, #512]	@ (800636c <_dtoa_r+0x524>)
 800616c:	2603      	movs	r6, #3
 800616e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006172:	f7fa fadb 	bl	800072c <__aeabi_ddiv>
 8006176:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800617a:	f004 040f 	and.w	r4, r4, #15
 800617e:	4d7b      	ldr	r5, [pc, #492]	@ (800636c <_dtoa_r+0x524>)
 8006180:	b954      	cbnz	r4, 8006198 <_dtoa_r+0x350>
 8006182:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006186:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800618a:	f7fa facf 	bl	800072c <__aeabi_ddiv>
 800618e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006192:	e028      	b.n	80061e6 <_dtoa_r+0x39e>
 8006194:	2602      	movs	r6, #2
 8006196:	e7f2      	b.n	800617e <_dtoa_r+0x336>
 8006198:	07e1      	lsls	r1, r4, #31
 800619a:	d508      	bpl.n	80061ae <_dtoa_r+0x366>
 800619c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80061a0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80061a4:	f7fa f998 	bl	80004d8 <__aeabi_dmul>
 80061a8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80061ac:	3601      	adds	r6, #1
 80061ae:	1064      	asrs	r4, r4, #1
 80061b0:	3508      	adds	r5, #8
 80061b2:	e7e5      	b.n	8006180 <_dtoa_r+0x338>
 80061b4:	f000 80d2 	beq.w	800635c <_dtoa_r+0x514>
 80061b8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80061bc:	427c      	negs	r4, r7
 80061be:	4b6a      	ldr	r3, [pc, #424]	@ (8006368 <_dtoa_r+0x520>)
 80061c0:	f004 020f 	and.w	r2, r4, #15
 80061c4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80061c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061cc:	f7fa f984 	bl	80004d8 <__aeabi_dmul>
 80061d0:	2602      	movs	r6, #2
 80061d2:	2300      	movs	r3, #0
 80061d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80061d8:	4d64      	ldr	r5, [pc, #400]	@ (800636c <_dtoa_r+0x524>)
 80061da:	1124      	asrs	r4, r4, #4
 80061dc:	2c00      	cmp	r4, #0
 80061de:	f040 80b2 	bne.w	8006346 <_dtoa_r+0x4fe>
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d1d3      	bne.n	800618e <_dtoa_r+0x346>
 80061e6:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80061ea:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	f000 80b7 	beq.w	8006360 <_dtoa_r+0x518>
 80061f2:	2200      	movs	r2, #0
 80061f4:	4620      	mov	r0, r4
 80061f6:	4629      	mov	r1, r5
 80061f8:	4b5d      	ldr	r3, [pc, #372]	@ (8006370 <_dtoa_r+0x528>)
 80061fa:	f7fa fbdf 	bl	80009bc <__aeabi_dcmplt>
 80061fe:	2800      	cmp	r0, #0
 8006200:	f000 80ae 	beq.w	8006360 <_dtoa_r+0x518>
 8006204:	9b07      	ldr	r3, [sp, #28]
 8006206:	2b00      	cmp	r3, #0
 8006208:	f000 80aa 	beq.w	8006360 <_dtoa_r+0x518>
 800620c:	9b08      	ldr	r3, [sp, #32]
 800620e:	2b00      	cmp	r3, #0
 8006210:	dd37      	ble.n	8006282 <_dtoa_r+0x43a>
 8006212:	1e7b      	subs	r3, r7, #1
 8006214:	4620      	mov	r0, r4
 8006216:	9304      	str	r3, [sp, #16]
 8006218:	2200      	movs	r2, #0
 800621a:	4629      	mov	r1, r5
 800621c:	4b55      	ldr	r3, [pc, #340]	@ (8006374 <_dtoa_r+0x52c>)
 800621e:	f7fa f95b 	bl	80004d8 <__aeabi_dmul>
 8006222:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006226:	9c08      	ldr	r4, [sp, #32]
 8006228:	3601      	adds	r6, #1
 800622a:	4630      	mov	r0, r6
 800622c:	f7fa f8ea 	bl	8000404 <__aeabi_i2d>
 8006230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006234:	f7fa f950 	bl	80004d8 <__aeabi_dmul>
 8006238:	2200      	movs	r2, #0
 800623a:	4b4f      	ldr	r3, [pc, #316]	@ (8006378 <_dtoa_r+0x530>)
 800623c:	f7f9 ff96 	bl	800016c <__adddf3>
 8006240:	4605      	mov	r5, r0
 8006242:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8006246:	2c00      	cmp	r4, #0
 8006248:	f040 809a 	bne.w	8006380 <_dtoa_r+0x538>
 800624c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006250:	2200      	movs	r2, #0
 8006252:	4b4a      	ldr	r3, [pc, #296]	@ (800637c <_dtoa_r+0x534>)
 8006254:	f7f9 ff88 	bl	8000168 <__aeabi_dsub>
 8006258:	4602      	mov	r2, r0
 800625a:	460b      	mov	r3, r1
 800625c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006260:	462a      	mov	r2, r5
 8006262:	4633      	mov	r3, r6
 8006264:	f7fa fbc8 	bl	80009f8 <__aeabi_dcmpgt>
 8006268:	2800      	cmp	r0, #0
 800626a:	f040 828e 	bne.w	800678a <_dtoa_r+0x942>
 800626e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006272:	462a      	mov	r2, r5
 8006274:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006278:	f7fa fba0 	bl	80009bc <__aeabi_dcmplt>
 800627c:	2800      	cmp	r0, #0
 800627e:	f040 8127 	bne.w	80064d0 <_dtoa_r+0x688>
 8006282:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8006286:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800628a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800628c:	2b00      	cmp	r3, #0
 800628e:	f2c0 8163 	blt.w	8006558 <_dtoa_r+0x710>
 8006292:	2f0e      	cmp	r7, #14
 8006294:	f300 8160 	bgt.w	8006558 <_dtoa_r+0x710>
 8006298:	4b33      	ldr	r3, [pc, #204]	@ (8006368 <_dtoa_r+0x520>)
 800629a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800629e:	e9d3 3400 	ldrd	r3, r4, [r3]
 80062a2:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80062a6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	da03      	bge.n	80062b4 <_dtoa_r+0x46c>
 80062ac:	9b07      	ldr	r3, [sp, #28]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	f340 8100 	ble.w	80064b4 <_dtoa_r+0x66c>
 80062b4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80062b8:	4656      	mov	r6, sl
 80062ba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80062be:	4620      	mov	r0, r4
 80062c0:	4629      	mov	r1, r5
 80062c2:	f7fa fa33 	bl	800072c <__aeabi_ddiv>
 80062c6:	f7fa fbb7 	bl	8000a38 <__aeabi_d2iz>
 80062ca:	4680      	mov	r8, r0
 80062cc:	f7fa f89a 	bl	8000404 <__aeabi_i2d>
 80062d0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80062d4:	f7fa f900 	bl	80004d8 <__aeabi_dmul>
 80062d8:	4602      	mov	r2, r0
 80062da:	460b      	mov	r3, r1
 80062dc:	4620      	mov	r0, r4
 80062de:	4629      	mov	r1, r5
 80062e0:	f7f9 ff42 	bl	8000168 <__aeabi_dsub>
 80062e4:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80062e8:	9d07      	ldr	r5, [sp, #28]
 80062ea:	f806 4b01 	strb.w	r4, [r6], #1
 80062ee:	eba6 040a 	sub.w	r4, r6, sl
 80062f2:	42a5      	cmp	r5, r4
 80062f4:	4602      	mov	r2, r0
 80062f6:	460b      	mov	r3, r1
 80062f8:	f040 8116 	bne.w	8006528 <_dtoa_r+0x6e0>
 80062fc:	f7f9 ff36 	bl	800016c <__adddf3>
 8006300:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006304:	4604      	mov	r4, r0
 8006306:	460d      	mov	r5, r1
 8006308:	f7fa fb76 	bl	80009f8 <__aeabi_dcmpgt>
 800630c:	2800      	cmp	r0, #0
 800630e:	f040 80f8 	bne.w	8006502 <_dtoa_r+0x6ba>
 8006312:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006316:	4620      	mov	r0, r4
 8006318:	4629      	mov	r1, r5
 800631a:	f7fa fb45 	bl	80009a8 <__aeabi_dcmpeq>
 800631e:	b118      	cbz	r0, 8006328 <_dtoa_r+0x4e0>
 8006320:	f018 0f01 	tst.w	r8, #1
 8006324:	f040 80ed 	bne.w	8006502 <_dtoa_r+0x6ba>
 8006328:	4649      	mov	r1, r9
 800632a:	4658      	mov	r0, fp
 800632c:	f000 fc92 	bl	8006c54 <_Bfree>
 8006330:	2300      	movs	r3, #0
 8006332:	7033      	strb	r3, [r6, #0]
 8006334:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8006336:	3701      	adds	r7, #1
 8006338:	601f      	str	r7, [r3, #0]
 800633a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800633c:	2b00      	cmp	r3, #0
 800633e:	f000 8320 	beq.w	8006982 <_dtoa_r+0xb3a>
 8006342:	601e      	str	r6, [r3, #0]
 8006344:	e31d      	b.n	8006982 <_dtoa_r+0xb3a>
 8006346:	07e2      	lsls	r2, r4, #31
 8006348:	d505      	bpl.n	8006356 <_dtoa_r+0x50e>
 800634a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800634e:	f7fa f8c3 	bl	80004d8 <__aeabi_dmul>
 8006352:	2301      	movs	r3, #1
 8006354:	3601      	adds	r6, #1
 8006356:	1064      	asrs	r4, r4, #1
 8006358:	3508      	adds	r5, #8
 800635a:	e73f      	b.n	80061dc <_dtoa_r+0x394>
 800635c:	2602      	movs	r6, #2
 800635e:	e742      	b.n	80061e6 <_dtoa_r+0x39e>
 8006360:	9c07      	ldr	r4, [sp, #28]
 8006362:	9704      	str	r7, [sp, #16]
 8006364:	e761      	b.n	800622a <_dtoa_r+0x3e2>
 8006366:	bf00      	nop
 8006368:	08009478 	.word	0x08009478
 800636c:	08009450 	.word	0x08009450
 8006370:	3ff00000 	.word	0x3ff00000
 8006374:	40240000 	.word	0x40240000
 8006378:	401c0000 	.word	0x401c0000
 800637c:	40140000 	.word	0x40140000
 8006380:	4b70      	ldr	r3, [pc, #448]	@ (8006544 <_dtoa_r+0x6fc>)
 8006382:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006384:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006388:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800638c:	4454      	add	r4, sl
 800638e:	2900      	cmp	r1, #0
 8006390:	d045      	beq.n	800641e <_dtoa_r+0x5d6>
 8006392:	2000      	movs	r0, #0
 8006394:	496c      	ldr	r1, [pc, #432]	@ (8006548 <_dtoa_r+0x700>)
 8006396:	f7fa f9c9 	bl	800072c <__aeabi_ddiv>
 800639a:	4633      	mov	r3, r6
 800639c:	462a      	mov	r2, r5
 800639e:	f7f9 fee3 	bl	8000168 <__aeabi_dsub>
 80063a2:	4656      	mov	r6, sl
 80063a4:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80063a8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80063ac:	f7fa fb44 	bl	8000a38 <__aeabi_d2iz>
 80063b0:	4605      	mov	r5, r0
 80063b2:	f7fa f827 	bl	8000404 <__aeabi_i2d>
 80063b6:	4602      	mov	r2, r0
 80063b8:	460b      	mov	r3, r1
 80063ba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80063be:	f7f9 fed3 	bl	8000168 <__aeabi_dsub>
 80063c2:	4602      	mov	r2, r0
 80063c4:	460b      	mov	r3, r1
 80063c6:	3530      	adds	r5, #48	@ 0x30
 80063c8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80063cc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80063d0:	f806 5b01 	strb.w	r5, [r6], #1
 80063d4:	f7fa faf2 	bl	80009bc <__aeabi_dcmplt>
 80063d8:	2800      	cmp	r0, #0
 80063da:	d163      	bne.n	80064a4 <_dtoa_r+0x65c>
 80063dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80063e0:	2000      	movs	r0, #0
 80063e2:	495a      	ldr	r1, [pc, #360]	@ (800654c <_dtoa_r+0x704>)
 80063e4:	f7f9 fec0 	bl	8000168 <__aeabi_dsub>
 80063e8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80063ec:	f7fa fae6 	bl	80009bc <__aeabi_dcmplt>
 80063f0:	2800      	cmp	r0, #0
 80063f2:	f040 8087 	bne.w	8006504 <_dtoa_r+0x6bc>
 80063f6:	42a6      	cmp	r6, r4
 80063f8:	f43f af43 	beq.w	8006282 <_dtoa_r+0x43a>
 80063fc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006400:	2200      	movs	r2, #0
 8006402:	4b53      	ldr	r3, [pc, #332]	@ (8006550 <_dtoa_r+0x708>)
 8006404:	f7fa f868 	bl	80004d8 <__aeabi_dmul>
 8006408:	2200      	movs	r2, #0
 800640a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800640e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006412:	4b4f      	ldr	r3, [pc, #316]	@ (8006550 <_dtoa_r+0x708>)
 8006414:	f7fa f860 	bl	80004d8 <__aeabi_dmul>
 8006418:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800641c:	e7c4      	b.n	80063a8 <_dtoa_r+0x560>
 800641e:	4631      	mov	r1, r6
 8006420:	4628      	mov	r0, r5
 8006422:	f7fa f859 	bl	80004d8 <__aeabi_dmul>
 8006426:	4656      	mov	r6, sl
 8006428:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800642c:	9413      	str	r4, [sp, #76]	@ 0x4c
 800642e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006432:	f7fa fb01 	bl	8000a38 <__aeabi_d2iz>
 8006436:	4605      	mov	r5, r0
 8006438:	f7f9 ffe4 	bl	8000404 <__aeabi_i2d>
 800643c:	4602      	mov	r2, r0
 800643e:	460b      	mov	r3, r1
 8006440:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006444:	f7f9 fe90 	bl	8000168 <__aeabi_dsub>
 8006448:	4602      	mov	r2, r0
 800644a:	460b      	mov	r3, r1
 800644c:	3530      	adds	r5, #48	@ 0x30
 800644e:	f806 5b01 	strb.w	r5, [r6], #1
 8006452:	42a6      	cmp	r6, r4
 8006454:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006458:	f04f 0200 	mov.w	r2, #0
 800645c:	d124      	bne.n	80064a8 <_dtoa_r+0x660>
 800645e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006462:	4b39      	ldr	r3, [pc, #228]	@ (8006548 <_dtoa_r+0x700>)
 8006464:	f7f9 fe82 	bl	800016c <__adddf3>
 8006468:	4602      	mov	r2, r0
 800646a:	460b      	mov	r3, r1
 800646c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006470:	f7fa fac2 	bl	80009f8 <__aeabi_dcmpgt>
 8006474:	2800      	cmp	r0, #0
 8006476:	d145      	bne.n	8006504 <_dtoa_r+0x6bc>
 8006478:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800647c:	2000      	movs	r0, #0
 800647e:	4932      	ldr	r1, [pc, #200]	@ (8006548 <_dtoa_r+0x700>)
 8006480:	f7f9 fe72 	bl	8000168 <__aeabi_dsub>
 8006484:	4602      	mov	r2, r0
 8006486:	460b      	mov	r3, r1
 8006488:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800648c:	f7fa fa96 	bl	80009bc <__aeabi_dcmplt>
 8006490:	2800      	cmp	r0, #0
 8006492:	f43f aef6 	beq.w	8006282 <_dtoa_r+0x43a>
 8006496:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8006498:	1e73      	subs	r3, r6, #1
 800649a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800649c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80064a0:	2b30      	cmp	r3, #48	@ 0x30
 80064a2:	d0f8      	beq.n	8006496 <_dtoa_r+0x64e>
 80064a4:	9f04      	ldr	r7, [sp, #16]
 80064a6:	e73f      	b.n	8006328 <_dtoa_r+0x4e0>
 80064a8:	4b29      	ldr	r3, [pc, #164]	@ (8006550 <_dtoa_r+0x708>)
 80064aa:	f7fa f815 	bl	80004d8 <__aeabi_dmul>
 80064ae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80064b2:	e7bc      	b.n	800642e <_dtoa_r+0x5e6>
 80064b4:	d10c      	bne.n	80064d0 <_dtoa_r+0x688>
 80064b6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80064ba:	2200      	movs	r2, #0
 80064bc:	4b25      	ldr	r3, [pc, #148]	@ (8006554 <_dtoa_r+0x70c>)
 80064be:	f7fa f80b 	bl	80004d8 <__aeabi_dmul>
 80064c2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80064c6:	f7fa fa8d 	bl	80009e4 <__aeabi_dcmpge>
 80064ca:	2800      	cmp	r0, #0
 80064cc:	f000 815b 	beq.w	8006786 <_dtoa_r+0x93e>
 80064d0:	2400      	movs	r4, #0
 80064d2:	4625      	mov	r5, r4
 80064d4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80064d6:	4656      	mov	r6, sl
 80064d8:	43db      	mvns	r3, r3
 80064da:	9304      	str	r3, [sp, #16]
 80064dc:	2700      	movs	r7, #0
 80064de:	4621      	mov	r1, r4
 80064e0:	4658      	mov	r0, fp
 80064e2:	f000 fbb7 	bl	8006c54 <_Bfree>
 80064e6:	2d00      	cmp	r5, #0
 80064e8:	d0dc      	beq.n	80064a4 <_dtoa_r+0x65c>
 80064ea:	b12f      	cbz	r7, 80064f8 <_dtoa_r+0x6b0>
 80064ec:	42af      	cmp	r7, r5
 80064ee:	d003      	beq.n	80064f8 <_dtoa_r+0x6b0>
 80064f0:	4639      	mov	r1, r7
 80064f2:	4658      	mov	r0, fp
 80064f4:	f000 fbae 	bl	8006c54 <_Bfree>
 80064f8:	4629      	mov	r1, r5
 80064fa:	4658      	mov	r0, fp
 80064fc:	f000 fbaa 	bl	8006c54 <_Bfree>
 8006500:	e7d0      	b.n	80064a4 <_dtoa_r+0x65c>
 8006502:	9704      	str	r7, [sp, #16]
 8006504:	4633      	mov	r3, r6
 8006506:	461e      	mov	r6, r3
 8006508:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800650c:	2a39      	cmp	r2, #57	@ 0x39
 800650e:	d107      	bne.n	8006520 <_dtoa_r+0x6d8>
 8006510:	459a      	cmp	sl, r3
 8006512:	d1f8      	bne.n	8006506 <_dtoa_r+0x6be>
 8006514:	9a04      	ldr	r2, [sp, #16]
 8006516:	3201      	adds	r2, #1
 8006518:	9204      	str	r2, [sp, #16]
 800651a:	2230      	movs	r2, #48	@ 0x30
 800651c:	f88a 2000 	strb.w	r2, [sl]
 8006520:	781a      	ldrb	r2, [r3, #0]
 8006522:	3201      	adds	r2, #1
 8006524:	701a      	strb	r2, [r3, #0]
 8006526:	e7bd      	b.n	80064a4 <_dtoa_r+0x65c>
 8006528:	2200      	movs	r2, #0
 800652a:	4b09      	ldr	r3, [pc, #36]	@ (8006550 <_dtoa_r+0x708>)
 800652c:	f7f9 ffd4 	bl	80004d8 <__aeabi_dmul>
 8006530:	2200      	movs	r2, #0
 8006532:	2300      	movs	r3, #0
 8006534:	4604      	mov	r4, r0
 8006536:	460d      	mov	r5, r1
 8006538:	f7fa fa36 	bl	80009a8 <__aeabi_dcmpeq>
 800653c:	2800      	cmp	r0, #0
 800653e:	f43f aebc 	beq.w	80062ba <_dtoa_r+0x472>
 8006542:	e6f1      	b.n	8006328 <_dtoa_r+0x4e0>
 8006544:	08009478 	.word	0x08009478
 8006548:	3fe00000 	.word	0x3fe00000
 800654c:	3ff00000 	.word	0x3ff00000
 8006550:	40240000 	.word	0x40240000
 8006554:	40140000 	.word	0x40140000
 8006558:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800655a:	2a00      	cmp	r2, #0
 800655c:	f000 80db 	beq.w	8006716 <_dtoa_r+0x8ce>
 8006560:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8006562:	2a01      	cmp	r2, #1
 8006564:	f300 80bf 	bgt.w	80066e6 <_dtoa_r+0x89e>
 8006568:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800656a:	2a00      	cmp	r2, #0
 800656c:	f000 80b7 	beq.w	80066de <_dtoa_r+0x896>
 8006570:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8006574:	4646      	mov	r6, r8
 8006576:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006578:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800657a:	2101      	movs	r1, #1
 800657c:	441a      	add	r2, r3
 800657e:	4658      	mov	r0, fp
 8006580:	4498      	add	r8, r3
 8006582:	9209      	str	r2, [sp, #36]	@ 0x24
 8006584:	f000 fc64 	bl	8006e50 <__i2b>
 8006588:	4605      	mov	r5, r0
 800658a:	b15e      	cbz	r6, 80065a4 <_dtoa_r+0x75c>
 800658c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800658e:	2b00      	cmp	r3, #0
 8006590:	dd08      	ble.n	80065a4 <_dtoa_r+0x75c>
 8006592:	42b3      	cmp	r3, r6
 8006594:	bfa8      	it	ge
 8006596:	4633      	movge	r3, r6
 8006598:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800659a:	eba8 0803 	sub.w	r8, r8, r3
 800659e:	1af6      	subs	r6, r6, r3
 80065a0:	1ad3      	subs	r3, r2, r3
 80065a2:	9309      	str	r3, [sp, #36]	@ 0x24
 80065a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80065a6:	b1f3      	cbz	r3, 80065e6 <_dtoa_r+0x79e>
 80065a8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	f000 80b7 	beq.w	800671e <_dtoa_r+0x8d6>
 80065b0:	b18c      	cbz	r4, 80065d6 <_dtoa_r+0x78e>
 80065b2:	4629      	mov	r1, r5
 80065b4:	4622      	mov	r2, r4
 80065b6:	4658      	mov	r0, fp
 80065b8:	f000 fd08 	bl	8006fcc <__pow5mult>
 80065bc:	464a      	mov	r2, r9
 80065be:	4601      	mov	r1, r0
 80065c0:	4605      	mov	r5, r0
 80065c2:	4658      	mov	r0, fp
 80065c4:	f000 fc5a 	bl	8006e7c <__multiply>
 80065c8:	4649      	mov	r1, r9
 80065ca:	9004      	str	r0, [sp, #16]
 80065cc:	4658      	mov	r0, fp
 80065ce:	f000 fb41 	bl	8006c54 <_Bfree>
 80065d2:	9b04      	ldr	r3, [sp, #16]
 80065d4:	4699      	mov	r9, r3
 80065d6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80065d8:	1b1a      	subs	r2, r3, r4
 80065da:	d004      	beq.n	80065e6 <_dtoa_r+0x79e>
 80065dc:	4649      	mov	r1, r9
 80065de:	4658      	mov	r0, fp
 80065e0:	f000 fcf4 	bl	8006fcc <__pow5mult>
 80065e4:	4681      	mov	r9, r0
 80065e6:	2101      	movs	r1, #1
 80065e8:	4658      	mov	r0, fp
 80065ea:	f000 fc31 	bl	8006e50 <__i2b>
 80065ee:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80065f0:	4604      	mov	r4, r0
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	f000 81c9 	beq.w	800698a <_dtoa_r+0xb42>
 80065f8:	461a      	mov	r2, r3
 80065fa:	4601      	mov	r1, r0
 80065fc:	4658      	mov	r0, fp
 80065fe:	f000 fce5 	bl	8006fcc <__pow5mult>
 8006602:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006604:	4604      	mov	r4, r0
 8006606:	2b01      	cmp	r3, #1
 8006608:	f300 808f 	bgt.w	800672a <_dtoa_r+0x8e2>
 800660c:	9b02      	ldr	r3, [sp, #8]
 800660e:	2b00      	cmp	r3, #0
 8006610:	f040 8087 	bne.w	8006722 <_dtoa_r+0x8da>
 8006614:	9b03      	ldr	r3, [sp, #12]
 8006616:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800661a:	2b00      	cmp	r3, #0
 800661c:	f040 8083 	bne.w	8006726 <_dtoa_r+0x8de>
 8006620:	9b03      	ldr	r3, [sp, #12]
 8006622:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006626:	0d1b      	lsrs	r3, r3, #20
 8006628:	051b      	lsls	r3, r3, #20
 800662a:	b12b      	cbz	r3, 8006638 <_dtoa_r+0x7f0>
 800662c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800662e:	f108 0801 	add.w	r8, r8, #1
 8006632:	3301      	adds	r3, #1
 8006634:	9309      	str	r3, [sp, #36]	@ 0x24
 8006636:	2301      	movs	r3, #1
 8006638:	930a      	str	r3, [sp, #40]	@ 0x28
 800663a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800663c:	2b00      	cmp	r3, #0
 800663e:	f000 81aa 	beq.w	8006996 <_dtoa_r+0xb4e>
 8006642:	6923      	ldr	r3, [r4, #16]
 8006644:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006648:	6918      	ldr	r0, [r3, #16]
 800664a:	f000 fbb5 	bl	8006db8 <__hi0bits>
 800664e:	f1c0 0020 	rsb	r0, r0, #32
 8006652:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006654:	4418      	add	r0, r3
 8006656:	f010 001f 	ands.w	r0, r0, #31
 800665a:	d071      	beq.n	8006740 <_dtoa_r+0x8f8>
 800665c:	f1c0 0320 	rsb	r3, r0, #32
 8006660:	2b04      	cmp	r3, #4
 8006662:	dd65      	ble.n	8006730 <_dtoa_r+0x8e8>
 8006664:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006666:	f1c0 001c 	rsb	r0, r0, #28
 800666a:	4403      	add	r3, r0
 800666c:	4480      	add	r8, r0
 800666e:	4406      	add	r6, r0
 8006670:	9309      	str	r3, [sp, #36]	@ 0x24
 8006672:	f1b8 0f00 	cmp.w	r8, #0
 8006676:	dd05      	ble.n	8006684 <_dtoa_r+0x83c>
 8006678:	4649      	mov	r1, r9
 800667a:	4642      	mov	r2, r8
 800667c:	4658      	mov	r0, fp
 800667e:	f000 fcff 	bl	8007080 <__lshift>
 8006682:	4681      	mov	r9, r0
 8006684:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006686:	2b00      	cmp	r3, #0
 8006688:	dd05      	ble.n	8006696 <_dtoa_r+0x84e>
 800668a:	4621      	mov	r1, r4
 800668c:	461a      	mov	r2, r3
 800668e:	4658      	mov	r0, fp
 8006690:	f000 fcf6 	bl	8007080 <__lshift>
 8006694:	4604      	mov	r4, r0
 8006696:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006698:	2b00      	cmp	r3, #0
 800669a:	d053      	beq.n	8006744 <_dtoa_r+0x8fc>
 800669c:	4621      	mov	r1, r4
 800669e:	4648      	mov	r0, r9
 80066a0:	f000 fd5a 	bl	8007158 <__mcmp>
 80066a4:	2800      	cmp	r0, #0
 80066a6:	da4d      	bge.n	8006744 <_dtoa_r+0x8fc>
 80066a8:	1e7b      	subs	r3, r7, #1
 80066aa:	4649      	mov	r1, r9
 80066ac:	9304      	str	r3, [sp, #16]
 80066ae:	220a      	movs	r2, #10
 80066b0:	2300      	movs	r3, #0
 80066b2:	4658      	mov	r0, fp
 80066b4:	f000 faf0 	bl	8006c98 <__multadd>
 80066b8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80066ba:	4681      	mov	r9, r0
 80066bc:	2b00      	cmp	r3, #0
 80066be:	f000 816c 	beq.w	800699a <_dtoa_r+0xb52>
 80066c2:	2300      	movs	r3, #0
 80066c4:	4629      	mov	r1, r5
 80066c6:	220a      	movs	r2, #10
 80066c8:	4658      	mov	r0, fp
 80066ca:	f000 fae5 	bl	8006c98 <__multadd>
 80066ce:	9b08      	ldr	r3, [sp, #32]
 80066d0:	4605      	mov	r5, r0
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	dc61      	bgt.n	800679a <_dtoa_r+0x952>
 80066d6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80066d8:	2b02      	cmp	r3, #2
 80066da:	dc3b      	bgt.n	8006754 <_dtoa_r+0x90c>
 80066dc:	e05d      	b.n	800679a <_dtoa_r+0x952>
 80066de:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80066e0:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80066e4:	e746      	b.n	8006574 <_dtoa_r+0x72c>
 80066e6:	9b07      	ldr	r3, [sp, #28]
 80066e8:	1e5c      	subs	r4, r3, #1
 80066ea:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80066ec:	42a3      	cmp	r3, r4
 80066ee:	bfbf      	itttt	lt
 80066f0:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80066f2:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 80066f4:	1ae3      	sublt	r3, r4, r3
 80066f6:	18d2      	addlt	r2, r2, r3
 80066f8:	bfa8      	it	ge
 80066fa:	1b1c      	subge	r4, r3, r4
 80066fc:	9b07      	ldr	r3, [sp, #28]
 80066fe:	bfbe      	ittt	lt
 8006700:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8006702:	920e      	strlt	r2, [sp, #56]	@ 0x38
 8006704:	2400      	movlt	r4, #0
 8006706:	2b00      	cmp	r3, #0
 8006708:	bfb5      	itete	lt
 800670a:	eba8 0603 	sublt.w	r6, r8, r3
 800670e:	4646      	movge	r6, r8
 8006710:	2300      	movlt	r3, #0
 8006712:	9b07      	ldrge	r3, [sp, #28]
 8006714:	e730      	b.n	8006578 <_dtoa_r+0x730>
 8006716:	4646      	mov	r6, r8
 8006718:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800671a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800671c:	e735      	b.n	800658a <_dtoa_r+0x742>
 800671e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006720:	e75c      	b.n	80065dc <_dtoa_r+0x794>
 8006722:	2300      	movs	r3, #0
 8006724:	e788      	b.n	8006638 <_dtoa_r+0x7f0>
 8006726:	9b02      	ldr	r3, [sp, #8]
 8006728:	e786      	b.n	8006638 <_dtoa_r+0x7f0>
 800672a:	2300      	movs	r3, #0
 800672c:	930a      	str	r3, [sp, #40]	@ 0x28
 800672e:	e788      	b.n	8006642 <_dtoa_r+0x7fa>
 8006730:	d09f      	beq.n	8006672 <_dtoa_r+0x82a>
 8006732:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006734:	331c      	adds	r3, #28
 8006736:	441a      	add	r2, r3
 8006738:	4498      	add	r8, r3
 800673a:	441e      	add	r6, r3
 800673c:	9209      	str	r2, [sp, #36]	@ 0x24
 800673e:	e798      	b.n	8006672 <_dtoa_r+0x82a>
 8006740:	4603      	mov	r3, r0
 8006742:	e7f6      	b.n	8006732 <_dtoa_r+0x8ea>
 8006744:	9b07      	ldr	r3, [sp, #28]
 8006746:	9704      	str	r7, [sp, #16]
 8006748:	2b00      	cmp	r3, #0
 800674a:	dc20      	bgt.n	800678e <_dtoa_r+0x946>
 800674c:	9308      	str	r3, [sp, #32]
 800674e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006750:	2b02      	cmp	r3, #2
 8006752:	dd1e      	ble.n	8006792 <_dtoa_r+0x94a>
 8006754:	9b08      	ldr	r3, [sp, #32]
 8006756:	2b00      	cmp	r3, #0
 8006758:	f47f aebc 	bne.w	80064d4 <_dtoa_r+0x68c>
 800675c:	4621      	mov	r1, r4
 800675e:	2205      	movs	r2, #5
 8006760:	4658      	mov	r0, fp
 8006762:	f000 fa99 	bl	8006c98 <__multadd>
 8006766:	4601      	mov	r1, r0
 8006768:	4604      	mov	r4, r0
 800676a:	4648      	mov	r0, r9
 800676c:	f000 fcf4 	bl	8007158 <__mcmp>
 8006770:	2800      	cmp	r0, #0
 8006772:	f77f aeaf 	ble.w	80064d4 <_dtoa_r+0x68c>
 8006776:	2331      	movs	r3, #49	@ 0x31
 8006778:	4656      	mov	r6, sl
 800677a:	f806 3b01 	strb.w	r3, [r6], #1
 800677e:	9b04      	ldr	r3, [sp, #16]
 8006780:	3301      	adds	r3, #1
 8006782:	9304      	str	r3, [sp, #16]
 8006784:	e6aa      	b.n	80064dc <_dtoa_r+0x694>
 8006786:	9c07      	ldr	r4, [sp, #28]
 8006788:	9704      	str	r7, [sp, #16]
 800678a:	4625      	mov	r5, r4
 800678c:	e7f3      	b.n	8006776 <_dtoa_r+0x92e>
 800678e:	9b07      	ldr	r3, [sp, #28]
 8006790:	9308      	str	r3, [sp, #32]
 8006792:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006794:	2b00      	cmp	r3, #0
 8006796:	f000 8104 	beq.w	80069a2 <_dtoa_r+0xb5a>
 800679a:	2e00      	cmp	r6, #0
 800679c:	dd05      	ble.n	80067aa <_dtoa_r+0x962>
 800679e:	4629      	mov	r1, r5
 80067a0:	4632      	mov	r2, r6
 80067a2:	4658      	mov	r0, fp
 80067a4:	f000 fc6c 	bl	8007080 <__lshift>
 80067a8:	4605      	mov	r5, r0
 80067aa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d05a      	beq.n	8006866 <_dtoa_r+0xa1e>
 80067b0:	4658      	mov	r0, fp
 80067b2:	6869      	ldr	r1, [r5, #4]
 80067b4:	f000 fa0e 	bl	8006bd4 <_Balloc>
 80067b8:	4606      	mov	r6, r0
 80067ba:	b928      	cbnz	r0, 80067c8 <_dtoa_r+0x980>
 80067bc:	4602      	mov	r2, r0
 80067be:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80067c2:	4b83      	ldr	r3, [pc, #524]	@ (80069d0 <_dtoa_r+0xb88>)
 80067c4:	f7ff bb54 	b.w	8005e70 <_dtoa_r+0x28>
 80067c8:	692a      	ldr	r2, [r5, #16]
 80067ca:	f105 010c 	add.w	r1, r5, #12
 80067ce:	3202      	adds	r2, #2
 80067d0:	0092      	lsls	r2, r2, #2
 80067d2:	300c      	adds	r0, #12
 80067d4:	f7ff fa9d 	bl	8005d12 <memcpy>
 80067d8:	2201      	movs	r2, #1
 80067da:	4631      	mov	r1, r6
 80067dc:	4658      	mov	r0, fp
 80067de:	f000 fc4f 	bl	8007080 <__lshift>
 80067e2:	462f      	mov	r7, r5
 80067e4:	4605      	mov	r5, r0
 80067e6:	f10a 0301 	add.w	r3, sl, #1
 80067ea:	9307      	str	r3, [sp, #28]
 80067ec:	9b08      	ldr	r3, [sp, #32]
 80067ee:	4453      	add	r3, sl
 80067f0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80067f2:	9b02      	ldr	r3, [sp, #8]
 80067f4:	f003 0301 	and.w	r3, r3, #1
 80067f8:	930a      	str	r3, [sp, #40]	@ 0x28
 80067fa:	9b07      	ldr	r3, [sp, #28]
 80067fc:	4621      	mov	r1, r4
 80067fe:	3b01      	subs	r3, #1
 8006800:	4648      	mov	r0, r9
 8006802:	9302      	str	r3, [sp, #8]
 8006804:	f7ff fa98 	bl	8005d38 <quorem>
 8006808:	4639      	mov	r1, r7
 800680a:	9008      	str	r0, [sp, #32]
 800680c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006810:	4648      	mov	r0, r9
 8006812:	f000 fca1 	bl	8007158 <__mcmp>
 8006816:	462a      	mov	r2, r5
 8006818:	9009      	str	r0, [sp, #36]	@ 0x24
 800681a:	4621      	mov	r1, r4
 800681c:	4658      	mov	r0, fp
 800681e:	f000 fcb7 	bl	8007190 <__mdiff>
 8006822:	68c2      	ldr	r2, [r0, #12]
 8006824:	4606      	mov	r6, r0
 8006826:	bb02      	cbnz	r2, 800686a <_dtoa_r+0xa22>
 8006828:	4601      	mov	r1, r0
 800682a:	4648      	mov	r0, r9
 800682c:	f000 fc94 	bl	8007158 <__mcmp>
 8006830:	4602      	mov	r2, r0
 8006832:	4631      	mov	r1, r6
 8006834:	4658      	mov	r0, fp
 8006836:	920c      	str	r2, [sp, #48]	@ 0x30
 8006838:	f000 fa0c 	bl	8006c54 <_Bfree>
 800683c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800683e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006840:	9e07      	ldr	r6, [sp, #28]
 8006842:	ea43 0102 	orr.w	r1, r3, r2
 8006846:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006848:	4319      	orrs	r1, r3
 800684a:	d110      	bne.n	800686e <_dtoa_r+0xa26>
 800684c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006850:	d029      	beq.n	80068a6 <_dtoa_r+0xa5e>
 8006852:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006854:	2b00      	cmp	r3, #0
 8006856:	dd02      	ble.n	800685e <_dtoa_r+0xa16>
 8006858:	9b08      	ldr	r3, [sp, #32]
 800685a:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800685e:	9b02      	ldr	r3, [sp, #8]
 8006860:	f883 8000 	strb.w	r8, [r3]
 8006864:	e63b      	b.n	80064de <_dtoa_r+0x696>
 8006866:	4628      	mov	r0, r5
 8006868:	e7bb      	b.n	80067e2 <_dtoa_r+0x99a>
 800686a:	2201      	movs	r2, #1
 800686c:	e7e1      	b.n	8006832 <_dtoa_r+0x9ea>
 800686e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006870:	2b00      	cmp	r3, #0
 8006872:	db04      	blt.n	800687e <_dtoa_r+0xa36>
 8006874:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8006876:	430b      	orrs	r3, r1
 8006878:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800687a:	430b      	orrs	r3, r1
 800687c:	d120      	bne.n	80068c0 <_dtoa_r+0xa78>
 800687e:	2a00      	cmp	r2, #0
 8006880:	dded      	ble.n	800685e <_dtoa_r+0xa16>
 8006882:	4649      	mov	r1, r9
 8006884:	2201      	movs	r2, #1
 8006886:	4658      	mov	r0, fp
 8006888:	f000 fbfa 	bl	8007080 <__lshift>
 800688c:	4621      	mov	r1, r4
 800688e:	4681      	mov	r9, r0
 8006890:	f000 fc62 	bl	8007158 <__mcmp>
 8006894:	2800      	cmp	r0, #0
 8006896:	dc03      	bgt.n	80068a0 <_dtoa_r+0xa58>
 8006898:	d1e1      	bne.n	800685e <_dtoa_r+0xa16>
 800689a:	f018 0f01 	tst.w	r8, #1
 800689e:	d0de      	beq.n	800685e <_dtoa_r+0xa16>
 80068a0:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80068a4:	d1d8      	bne.n	8006858 <_dtoa_r+0xa10>
 80068a6:	2339      	movs	r3, #57	@ 0x39
 80068a8:	9a02      	ldr	r2, [sp, #8]
 80068aa:	7013      	strb	r3, [r2, #0]
 80068ac:	4633      	mov	r3, r6
 80068ae:	461e      	mov	r6, r3
 80068b0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80068b4:	3b01      	subs	r3, #1
 80068b6:	2a39      	cmp	r2, #57	@ 0x39
 80068b8:	d052      	beq.n	8006960 <_dtoa_r+0xb18>
 80068ba:	3201      	adds	r2, #1
 80068bc:	701a      	strb	r2, [r3, #0]
 80068be:	e60e      	b.n	80064de <_dtoa_r+0x696>
 80068c0:	2a00      	cmp	r2, #0
 80068c2:	dd07      	ble.n	80068d4 <_dtoa_r+0xa8c>
 80068c4:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80068c8:	d0ed      	beq.n	80068a6 <_dtoa_r+0xa5e>
 80068ca:	9a02      	ldr	r2, [sp, #8]
 80068cc:	f108 0301 	add.w	r3, r8, #1
 80068d0:	7013      	strb	r3, [r2, #0]
 80068d2:	e604      	b.n	80064de <_dtoa_r+0x696>
 80068d4:	9b07      	ldr	r3, [sp, #28]
 80068d6:	9a07      	ldr	r2, [sp, #28]
 80068d8:	f803 8c01 	strb.w	r8, [r3, #-1]
 80068dc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80068de:	4293      	cmp	r3, r2
 80068e0:	d028      	beq.n	8006934 <_dtoa_r+0xaec>
 80068e2:	4649      	mov	r1, r9
 80068e4:	2300      	movs	r3, #0
 80068e6:	220a      	movs	r2, #10
 80068e8:	4658      	mov	r0, fp
 80068ea:	f000 f9d5 	bl	8006c98 <__multadd>
 80068ee:	42af      	cmp	r7, r5
 80068f0:	4681      	mov	r9, r0
 80068f2:	f04f 0300 	mov.w	r3, #0
 80068f6:	f04f 020a 	mov.w	r2, #10
 80068fa:	4639      	mov	r1, r7
 80068fc:	4658      	mov	r0, fp
 80068fe:	d107      	bne.n	8006910 <_dtoa_r+0xac8>
 8006900:	f000 f9ca 	bl	8006c98 <__multadd>
 8006904:	4607      	mov	r7, r0
 8006906:	4605      	mov	r5, r0
 8006908:	9b07      	ldr	r3, [sp, #28]
 800690a:	3301      	adds	r3, #1
 800690c:	9307      	str	r3, [sp, #28]
 800690e:	e774      	b.n	80067fa <_dtoa_r+0x9b2>
 8006910:	f000 f9c2 	bl	8006c98 <__multadd>
 8006914:	4629      	mov	r1, r5
 8006916:	4607      	mov	r7, r0
 8006918:	2300      	movs	r3, #0
 800691a:	220a      	movs	r2, #10
 800691c:	4658      	mov	r0, fp
 800691e:	f000 f9bb 	bl	8006c98 <__multadd>
 8006922:	4605      	mov	r5, r0
 8006924:	e7f0      	b.n	8006908 <_dtoa_r+0xac0>
 8006926:	9b08      	ldr	r3, [sp, #32]
 8006928:	2700      	movs	r7, #0
 800692a:	2b00      	cmp	r3, #0
 800692c:	bfcc      	ite	gt
 800692e:	461e      	movgt	r6, r3
 8006930:	2601      	movle	r6, #1
 8006932:	4456      	add	r6, sl
 8006934:	4649      	mov	r1, r9
 8006936:	2201      	movs	r2, #1
 8006938:	4658      	mov	r0, fp
 800693a:	f000 fba1 	bl	8007080 <__lshift>
 800693e:	4621      	mov	r1, r4
 8006940:	4681      	mov	r9, r0
 8006942:	f000 fc09 	bl	8007158 <__mcmp>
 8006946:	2800      	cmp	r0, #0
 8006948:	dcb0      	bgt.n	80068ac <_dtoa_r+0xa64>
 800694a:	d102      	bne.n	8006952 <_dtoa_r+0xb0a>
 800694c:	f018 0f01 	tst.w	r8, #1
 8006950:	d1ac      	bne.n	80068ac <_dtoa_r+0xa64>
 8006952:	4633      	mov	r3, r6
 8006954:	461e      	mov	r6, r3
 8006956:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800695a:	2a30      	cmp	r2, #48	@ 0x30
 800695c:	d0fa      	beq.n	8006954 <_dtoa_r+0xb0c>
 800695e:	e5be      	b.n	80064de <_dtoa_r+0x696>
 8006960:	459a      	cmp	sl, r3
 8006962:	d1a4      	bne.n	80068ae <_dtoa_r+0xa66>
 8006964:	9b04      	ldr	r3, [sp, #16]
 8006966:	3301      	adds	r3, #1
 8006968:	9304      	str	r3, [sp, #16]
 800696a:	2331      	movs	r3, #49	@ 0x31
 800696c:	f88a 3000 	strb.w	r3, [sl]
 8006970:	e5b5      	b.n	80064de <_dtoa_r+0x696>
 8006972:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006974:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80069d4 <_dtoa_r+0xb8c>
 8006978:	b11b      	cbz	r3, 8006982 <_dtoa_r+0xb3a>
 800697a:	f10a 0308 	add.w	r3, sl, #8
 800697e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8006980:	6013      	str	r3, [r2, #0]
 8006982:	4650      	mov	r0, sl
 8006984:	b017      	add	sp, #92	@ 0x5c
 8006986:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800698a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800698c:	2b01      	cmp	r3, #1
 800698e:	f77f ae3d 	ble.w	800660c <_dtoa_r+0x7c4>
 8006992:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006994:	930a      	str	r3, [sp, #40]	@ 0x28
 8006996:	2001      	movs	r0, #1
 8006998:	e65b      	b.n	8006652 <_dtoa_r+0x80a>
 800699a:	9b08      	ldr	r3, [sp, #32]
 800699c:	2b00      	cmp	r3, #0
 800699e:	f77f aed6 	ble.w	800674e <_dtoa_r+0x906>
 80069a2:	4656      	mov	r6, sl
 80069a4:	4621      	mov	r1, r4
 80069a6:	4648      	mov	r0, r9
 80069a8:	f7ff f9c6 	bl	8005d38 <quorem>
 80069ac:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80069b0:	9b08      	ldr	r3, [sp, #32]
 80069b2:	f806 8b01 	strb.w	r8, [r6], #1
 80069b6:	eba6 020a 	sub.w	r2, r6, sl
 80069ba:	4293      	cmp	r3, r2
 80069bc:	ddb3      	ble.n	8006926 <_dtoa_r+0xade>
 80069be:	4649      	mov	r1, r9
 80069c0:	2300      	movs	r3, #0
 80069c2:	220a      	movs	r2, #10
 80069c4:	4658      	mov	r0, fp
 80069c6:	f000 f967 	bl	8006c98 <__multadd>
 80069ca:	4681      	mov	r9, r0
 80069cc:	e7ea      	b.n	80069a4 <_dtoa_r+0xb5c>
 80069ce:	bf00      	nop
 80069d0:	080093d7 	.word	0x080093d7
 80069d4:	0800935b 	.word	0x0800935b

080069d8 <_free_r>:
 80069d8:	b538      	push	{r3, r4, r5, lr}
 80069da:	4605      	mov	r5, r0
 80069dc:	2900      	cmp	r1, #0
 80069de:	d040      	beq.n	8006a62 <_free_r+0x8a>
 80069e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80069e4:	1f0c      	subs	r4, r1, #4
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	bfb8      	it	lt
 80069ea:	18e4      	addlt	r4, r4, r3
 80069ec:	f000 f8e6 	bl	8006bbc <__malloc_lock>
 80069f0:	4a1c      	ldr	r2, [pc, #112]	@ (8006a64 <_free_r+0x8c>)
 80069f2:	6813      	ldr	r3, [r2, #0]
 80069f4:	b933      	cbnz	r3, 8006a04 <_free_r+0x2c>
 80069f6:	6063      	str	r3, [r4, #4]
 80069f8:	6014      	str	r4, [r2, #0]
 80069fa:	4628      	mov	r0, r5
 80069fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006a00:	f000 b8e2 	b.w	8006bc8 <__malloc_unlock>
 8006a04:	42a3      	cmp	r3, r4
 8006a06:	d908      	bls.n	8006a1a <_free_r+0x42>
 8006a08:	6820      	ldr	r0, [r4, #0]
 8006a0a:	1821      	adds	r1, r4, r0
 8006a0c:	428b      	cmp	r3, r1
 8006a0e:	bf01      	itttt	eq
 8006a10:	6819      	ldreq	r1, [r3, #0]
 8006a12:	685b      	ldreq	r3, [r3, #4]
 8006a14:	1809      	addeq	r1, r1, r0
 8006a16:	6021      	streq	r1, [r4, #0]
 8006a18:	e7ed      	b.n	80069f6 <_free_r+0x1e>
 8006a1a:	461a      	mov	r2, r3
 8006a1c:	685b      	ldr	r3, [r3, #4]
 8006a1e:	b10b      	cbz	r3, 8006a24 <_free_r+0x4c>
 8006a20:	42a3      	cmp	r3, r4
 8006a22:	d9fa      	bls.n	8006a1a <_free_r+0x42>
 8006a24:	6811      	ldr	r1, [r2, #0]
 8006a26:	1850      	adds	r0, r2, r1
 8006a28:	42a0      	cmp	r0, r4
 8006a2a:	d10b      	bne.n	8006a44 <_free_r+0x6c>
 8006a2c:	6820      	ldr	r0, [r4, #0]
 8006a2e:	4401      	add	r1, r0
 8006a30:	1850      	adds	r0, r2, r1
 8006a32:	4283      	cmp	r3, r0
 8006a34:	6011      	str	r1, [r2, #0]
 8006a36:	d1e0      	bne.n	80069fa <_free_r+0x22>
 8006a38:	6818      	ldr	r0, [r3, #0]
 8006a3a:	685b      	ldr	r3, [r3, #4]
 8006a3c:	4408      	add	r0, r1
 8006a3e:	6010      	str	r0, [r2, #0]
 8006a40:	6053      	str	r3, [r2, #4]
 8006a42:	e7da      	b.n	80069fa <_free_r+0x22>
 8006a44:	d902      	bls.n	8006a4c <_free_r+0x74>
 8006a46:	230c      	movs	r3, #12
 8006a48:	602b      	str	r3, [r5, #0]
 8006a4a:	e7d6      	b.n	80069fa <_free_r+0x22>
 8006a4c:	6820      	ldr	r0, [r4, #0]
 8006a4e:	1821      	adds	r1, r4, r0
 8006a50:	428b      	cmp	r3, r1
 8006a52:	bf01      	itttt	eq
 8006a54:	6819      	ldreq	r1, [r3, #0]
 8006a56:	685b      	ldreq	r3, [r3, #4]
 8006a58:	1809      	addeq	r1, r1, r0
 8006a5a:	6021      	streq	r1, [r4, #0]
 8006a5c:	6063      	str	r3, [r4, #4]
 8006a5e:	6054      	str	r4, [r2, #4]
 8006a60:	e7cb      	b.n	80069fa <_free_r+0x22>
 8006a62:	bd38      	pop	{r3, r4, r5, pc}
 8006a64:	20003160 	.word	0x20003160

08006a68 <malloc>:
 8006a68:	4b02      	ldr	r3, [pc, #8]	@ (8006a74 <malloc+0xc>)
 8006a6a:	4601      	mov	r1, r0
 8006a6c:	6818      	ldr	r0, [r3, #0]
 8006a6e:	f000 b825 	b.w	8006abc <_malloc_r>
 8006a72:	bf00      	nop
 8006a74:	20000420 	.word	0x20000420

08006a78 <sbrk_aligned>:
 8006a78:	b570      	push	{r4, r5, r6, lr}
 8006a7a:	4e0f      	ldr	r6, [pc, #60]	@ (8006ab8 <sbrk_aligned+0x40>)
 8006a7c:	460c      	mov	r4, r1
 8006a7e:	6831      	ldr	r1, [r6, #0]
 8006a80:	4605      	mov	r5, r0
 8006a82:	b911      	cbnz	r1, 8006a8a <sbrk_aligned+0x12>
 8006a84:	f001 fe7a 	bl	800877c <_sbrk_r>
 8006a88:	6030      	str	r0, [r6, #0]
 8006a8a:	4621      	mov	r1, r4
 8006a8c:	4628      	mov	r0, r5
 8006a8e:	f001 fe75 	bl	800877c <_sbrk_r>
 8006a92:	1c43      	adds	r3, r0, #1
 8006a94:	d103      	bne.n	8006a9e <sbrk_aligned+0x26>
 8006a96:	f04f 34ff 	mov.w	r4, #4294967295
 8006a9a:	4620      	mov	r0, r4
 8006a9c:	bd70      	pop	{r4, r5, r6, pc}
 8006a9e:	1cc4      	adds	r4, r0, #3
 8006aa0:	f024 0403 	bic.w	r4, r4, #3
 8006aa4:	42a0      	cmp	r0, r4
 8006aa6:	d0f8      	beq.n	8006a9a <sbrk_aligned+0x22>
 8006aa8:	1a21      	subs	r1, r4, r0
 8006aaa:	4628      	mov	r0, r5
 8006aac:	f001 fe66 	bl	800877c <_sbrk_r>
 8006ab0:	3001      	adds	r0, #1
 8006ab2:	d1f2      	bne.n	8006a9a <sbrk_aligned+0x22>
 8006ab4:	e7ef      	b.n	8006a96 <sbrk_aligned+0x1e>
 8006ab6:	bf00      	nop
 8006ab8:	2000315c 	.word	0x2000315c

08006abc <_malloc_r>:
 8006abc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ac0:	1ccd      	adds	r5, r1, #3
 8006ac2:	f025 0503 	bic.w	r5, r5, #3
 8006ac6:	3508      	adds	r5, #8
 8006ac8:	2d0c      	cmp	r5, #12
 8006aca:	bf38      	it	cc
 8006acc:	250c      	movcc	r5, #12
 8006ace:	2d00      	cmp	r5, #0
 8006ad0:	4606      	mov	r6, r0
 8006ad2:	db01      	blt.n	8006ad8 <_malloc_r+0x1c>
 8006ad4:	42a9      	cmp	r1, r5
 8006ad6:	d904      	bls.n	8006ae2 <_malloc_r+0x26>
 8006ad8:	230c      	movs	r3, #12
 8006ada:	6033      	str	r3, [r6, #0]
 8006adc:	2000      	movs	r0, #0
 8006ade:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006ae2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006bb8 <_malloc_r+0xfc>
 8006ae6:	f000 f869 	bl	8006bbc <__malloc_lock>
 8006aea:	f8d8 3000 	ldr.w	r3, [r8]
 8006aee:	461c      	mov	r4, r3
 8006af0:	bb44      	cbnz	r4, 8006b44 <_malloc_r+0x88>
 8006af2:	4629      	mov	r1, r5
 8006af4:	4630      	mov	r0, r6
 8006af6:	f7ff ffbf 	bl	8006a78 <sbrk_aligned>
 8006afa:	1c43      	adds	r3, r0, #1
 8006afc:	4604      	mov	r4, r0
 8006afe:	d158      	bne.n	8006bb2 <_malloc_r+0xf6>
 8006b00:	f8d8 4000 	ldr.w	r4, [r8]
 8006b04:	4627      	mov	r7, r4
 8006b06:	2f00      	cmp	r7, #0
 8006b08:	d143      	bne.n	8006b92 <_malloc_r+0xd6>
 8006b0a:	2c00      	cmp	r4, #0
 8006b0c:	d04b      	beq.n	8006ba6 <_malloc_r+0xea>
 8006b0e:	6823      	ldr	r3, [r4, #0]
 8006b10:	4639      	mov	r1, r7
 8006b12:	4630      	mov	r0, r6
 8006b14:	eb04 0903 	add.w	r9, r4, r3
 8006b18:	f001 fe30 	bl	800877c <_sbrk_r>
 8006b1c:	4581      	cmp	r9, r0
 8006b1e:	d142      	bne.n	8006ba6 <_malloc_r+0xea>
 8006b20:	6821      	ldr	r1, [r4, #0]
 8006b22:	4630      	mov	r0, r6
 8006b24:	1a6d      	subs	r5, r5, r1
 8006b26:	4629      	mov	r1, r5
 8006b28:	f7ff ffa6 	bl	8006a78 <sbrk_aligned>
 8006b2c:	3001      	adds	r0, #1
 8006b2e:	d03a      	beq.n	8006ba6 <_malloc_r+0xea>
 8006b30:	6823      	ldr	r3, [r4, #0]
 8006b32:	442b      	add	r3, r5
 8006b34:	6023      	str	r3, [r4, #0]
 8006b36:	f8d8 3000 	ldr.w	r3, [r8]
 8006b3a:	685a      	ldr	r2, [r3, #4]
 8006b3c:	bb62      	cbnz	r2, 8006b98 <_malloc_r+0xdc>
 8006b3e:	f8c8 7000 	str.w	r7, [r8]
 8006b42:	e00f      	b.n	8006b64 <_malloc_r+0xa8>
 8006b44:	6822      	ldr	r2, [r4, #0]
 8006b46:	1b52      	subs	r2, r2, r5
 8006b48:	d420      	bmi.n	8006b8c <_malloc_r+0xd0>
 8006b4a:	2a0b      	cmp	r2, #11
 8006b4c:	d917      	bls.n	8006b7e <_malloc_r+0xc2>
 8006b4e:	1961      	adds	r1, r4, r5
 8006b50:	42a3      	cmp	r3, r4
 8006b52:	6025      	str	r5, [r4, #0]
 8006b54:	bf18      	it	ne
 8006b56:	6059      	strne	r1, [r3, #4]
 8006b58:	6863      	ldr	r3, [r4, #4]
 8006b5a:	bf08      	it	eq
 8006b5c:	f8c8 1000 	streq.w	r1, [r8]
 8006b60:	5162      	str	r2, [r4, r5]
 8006b62:	604b      	str	r3, [r1, #4]
 8006b64:	4630      	mov	r0, r6
 8006b66:	f000 f82f 	bl	8006bc8 <__malloc_unlock>
 8006b6a:	f104 000b 	add.w	r0, r4, #11
 8006b6e:	1d23      	adds	r3, r4, #4
 8006b70:	f020 0007 	bic.w	r0, r0, #7
 8006b74:	1ac2      	subs	r2, r0, r3
 8006b76:	bf1c      	itt	ne
 8006b78:	1a1b      	subne	r3, r3, r0
 8006b7a:	50a3      	strne	r3, [r4, r2]
 8006b7c:	e7af      	b.n	8006ade <_malloc_r+0x22>
 8006b7e:	6862      	ldr	r2, [r4, #4]
 8006b80:	42a3      	cmp	r3, r4
 8006b82:	bf0c      	ite	eq
 8006b84:	f8c8 2000 	streq.w	r2, [r8]
 8006b88:	605a      	strne	r2, [r3, #4]
 8006b8a:	e7eb      	b.n	8006b64 <_malloc_r+0xa8>
 8006b8c:	4623      	mov	r3, r4
 8006b8e:	6864      	ldr	r4, [r4, #4]
 8006b90:	e7ae      	b.n	8006af0 <_malloc_r+0x34>
 8006b92:	463c      	mov	r4, r7
 8006b94:	687f      	ldr	r7, [r7, #4]
 8006b96:	e7b6      	b.n	8006b06 <_malloc_r+0x4a>
 8006b98:	461a      	mov	r2, r3
 8006b9a:	685b      	ldr	r3, [r3, #4]
 8006b9c:	42a3      	cmp	r3, r4
 8006b9e:	d1fb      	bne.n	8006b98 <_malloc_r+0xdc>
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	6053      	str	r3, [r2, #4]
 8006ba4:	e7de      	b.n	8006b64 <_malloc_r+0xa8>
 8006ba6:	230c      	movs	r3, #12
 8006ba8:	4630      	mov	r0, r6
 8006baa:	6033      	str	r3, [r6, #0]
 8006bac:	f000 f80c 	bl	8006bc8 <__malloc_unlock>
 8006bb0:	e794      	b.n	8006adc <_malloc_r+0x20>
 8006bb2:	6005      	str	r5, [r0, #0]
 8006bb4:	e7d6      	b.n	8006b64 <_malloc_r+0xa8>
 8006bb6:	bf00      	nop
 8006bb8:	20003160 	.word	0x20003160

08006bbc <__malloc_lock>:
 8006bbc:	4801      	ldr	r0, [pc, #4]	@ (8006bc4 <__malloc_lock+0x8>)
 8006bbe:	f7ff b898 	b.w	8005cf2 <__retarget_lock_acquire_recursive>
 8006bc2:	bf00      	nop
 8006bc4:	20003158 	.word	0x20003158

08006bc8 <__malloc_unlock>:
 8006bc8:	4801      	ldr	r0, [pc, #4]	@ (8006bd0 <__malloc_unlock+0x8>)
 8006bca:	f7ff b893 	b.w	8005cf4 <__retarget_lock_release_recursive>
 8006bce:	bf00      	nop
 8006bd0:	20003158 	.word	0x20003158

08006bd4 <_Balloc>:
 8006bd4:	b570      	push	{r4, r5, r6, lr}
 8006bd6:	69c6      	ldr	r6, [r0, #28]
 8006bd8:	4604      	mov	r4, r0
 8006bda:	460d      	mov	r5, r1
 8006bdc:	b976      	cbnz	r6, 8006bfc <_Balloc+0x28>
 8006bde:	2010      	movs	r0, #16
 8006be0:	f7ff ff42 	bl	8006a68 <malloc>
 8006be4:	4602      	mov	r2, r0
 8006be6:	61e0      	str	r0, [r4, #28]
 8006be8:	b920      	cbnz	r0, 8006bf4 <_Balloc+0x20>
 8006bea:	216b      	movs	r1, #107	@ 0x6b
 8006bec:	4b17      	ldr	r3, [pc, #92]	@ (8006c4c <_Balloc+0x78>)
 8006bee:	4818      	ldr	r0, [pc, #96]	@ (8006c50 <_Balloc+0x7c>)
 8006bf0:	f001 fdda 	bl	80087a8 <__assert_func>
 8006bf4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006bf8:	6006      	str	r6, [r0, #0]
 8006bfa:	60c6      	str	r6, [r0, #12]
 8006bfc:	69e6      	ldr	r6, [r4, #28]
 8006bfe:	68f3      	ldr	r3, [r6, #12]
 8006c00:	b183      	cbz	r3, 8006c24 <_Balloc+0x50>
 8006c02:	69e3      	ldr	r3, [r4, #28]
 8006c04:	68db      	ldr	r3, [r3, #12]
 8006c06:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006c0a:	b9b8      	cbnz	r0, 8006c3c <_Balloc+0x68>
 8006c0c:	2101      	movs	r1, #1
 8006c0e:	fa01 f605 	lsl.w	r6, r1, r5
 8006c12:	1d72      	adds	r2, r6, #5
 8006c14:	4620      	mov	r0, r4
 8006c16:	0092      	lsls	r2, r2, #2
 8006c18:	f001 fde4 	bl	80087e4 <_calloc_r>
 8006c1c:	b160      	cbz	r0, 8006c38 <_Balloc+0x64>
 8006c1e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006c22:	e00e      	b.n	8006c42 <_Balloc+0x6e>
 8006c24:	2221      	movs	r2, #33	@ 0x21
 8006c26:	2104      	movs	r1, #4
 8006c28:	4620      	mov	r0, r4
 8006c2a:	f001 fddb 	bl	80087e4 <_calloc_r>
 8006c2e:	69e3      	ldr	r3, [r4, #28]
 8006c30:	60f0      	str	r0, [r6, #12]
 8006c32:	68db      	ldr	r3, [r3, #12]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d1e4      	bne.n	8006c02 <_Balloc+0x2e>
 8006c38:	2000      	movs	r0, #0
 8006c3a:	bd70      	pop	{r4, r5, r6, pc}
 8006c3c:	6802      	ldr	r2, [r0, #0]
 8006c3e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006c42:	2300      	movs	r3, #0
 8006c44:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006c48:	e7f7      	b.n	8006c3a <_Balloc+0x66>
 8006c4a:	bf00      	nop
 8006c4c:	08009368 	.word	0x08009368
 8006c50:	080093e8 	.word	0x080093e8

08006c54 <_Bfree>:
 8006c54:	b570      	push	{r4, r5, r6, lr}
 8006c56:	69c6      	ldr	r6, [r0, #28]
 8006c58:	4605      	mov	r5, r0
 8006c5a:	460c      	mov	r4, r1
 8006c5c:	b976      	cbnz	r6, 8006c7c <_Bfree+0x28>
 8006c5e:	2010      	movs	r0, #16
 8006c60:	f7ff ff02 	bl	8006a68 <malloc>
 8006c64:	4602      	mov	r2, r0
 8006c66:	61e8      	str	r0, [r5, #28]
 8006c68:	b920      	cbnz	r0, 8006c74 <_Bfree+0x20>
 8006c6a:	218f      	movs	r1, #143	@ 0x8f
 8006c6c:	4b08      	ldr	r3, [pc, #32]	@ (8006c90 <_Bfree+0x3c>)
 8006c6e:	4809      	ldr	r0, [pc, #36]	@ (8006c94 <_Bfree+0x40>)
 8006c70:	f001 fd9a 	bl	80087a8 <__assert_func>
 8006c74:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006c78:	6006      	str	r6, [r0, #0]
 8006c7a:	60c6      	str	r6, [r0, #12]
 8006c7c:	b13c      	cbz	r4, 8006c8e <_Bfree+0x3a>
 8006c7e:	69eb      	ldr	r3, [r5, #28]
 8006c80:	6862      	ldr	r2, [r4, #4]
 8006c82:	68db      	ldr	r3, [r3, #12]
 8006c84:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006c88:	6021      	str	r1, [r4, #0]
 8006c8a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006c8e:	bd70      	pop	{r4, r5, r6, pc}
 8006c90:	08009368 	.word	0x08009368
 8006c94:	080093e8 	.word	0x080093e8

08006c98 <__multadd>:
 8006c98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c9c:	4607      	mov	r7, r0
 8006c9e:	460c      	mov	r4, r1
 8006ca0:	461e      	mov	r6, r3
 8006ca2:	2000      	movs	r0, #0
 8006ca4:	690d      	ldr	r5, [r1, #16]
 8006ca6:	f101 0c14 	add.w	ip, r1, #20
 8006caa:	f8dc 3000 	ldr.w	r3, [ip]
 8006cae:	3001      	adds	r0, #1
 8006cb0:	b299      	uxth	r1, r3
 8006cb2:	fb02 6101 	mla	r1, r2, r1, r6
 8006cb6:	0c1e      	lsrs	r6, r3, #16
 8006cb8:	0c0b      	lsrs	r3, r1, #16
 8006cba:	fb02 3306 	mla	r3, r2, r6, r3
 8006cbe:	b289      	uxth	r1, r1
 8006cc0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006cc4:	4285      	cmp	r5, r0
 8006cc6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006cca:	f84c 1b04 	str.w	r1, [ip], #4
 8006cce:	dcec      	bgt.n	8006caa <__multadd+0x12>
 8006cd0:	b30e      	cbz	r6, 8006d16 <__multadd+0x7e>
 8006cd2:	68a3      	ldr	r3, [r4, #8]
 8006cd4:	42ab      	cmp	r3, r5
 8006cd6:	dc19      	bgt.n	8006d0c <__multadd+0x74>
 8006cd8:	6861      	ldr	r1, [r4, #4]
 8006cda:	4638      	mov	r0, r7
 8006cdc:	3101      	adds	r1, #1
 8006cde:	f7ff ff79 	bl	8006bd4 <_Balloc>
 8006ce2:	4680      	mov	r8, r0
 8006ce4:	b928      	cbnz	r0, 8006cf2 <__multadd+0x5a>
 8006ce6:	4602      	mov	r2, r0
 8006ce8:	21ba      	movs	r1, #186	@ 0xba
 8006cea:	4b0c      	ldr	r3, [pc, #48]	@ (8006d1c <__multadd+0x84>)
 8006cec:	480c      	ldr	r0, [pc, #48]	@ (8006d20 <__multadd+0x88>)
 8006cee:	f001 fd5b 	bl	80087a8 <__assert_func>
 8006cf2:	6922      	ldr	r2, [r4, #16]
 8006cf4:	f104 010c 	add.w	r1, r4, #12
 8006cf8:	3202      	adds	r2, #2
 8006cfa:	0092      	lsls	r2, r2, #2
 8006cfc:	300c      	adds	r0, #12
 8006cfe:	f7ff f808 	bl	8005d12 <memcpy>
 8006d02:	4621      	mov	r1, r4
 8006d04:	4638      	mov	r0, r7
 8006d06:	f7ff ffa5 	bl	8006c54 <_Bfree>
 8006d0a:	4644      	mov	r4, r8
 8006d0c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006d10:	3501      	adds	r5, #1
 8006d12:	615e      	str	r6, [r3, #20]
 8006d14:	6125      	str	r5, [r4, #16]
 8006d16:	4620      	mov	r0, r4
 8006d18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d1c:	080093d7 	.word	0x080093d7
 8006d20:	080093e8 	.word	0x080093e8

08006d24 <__s2b>:
 8006d24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006d28:	4615      	mov	r5, r2
 8006d2a:	2209      	movs	r2, #9
 8006d2c:	461f      	mov	r7, r3
 8006d2e:	3308      	adds	r3, #8
 8006d30:	460c      	mov	r4, r1
 8006d32:	fb93 f3f2 	sdiv	r3, r3, r2
 8006d36:	4606      	mov	r6, r0
 8006d38:	2201      	movs	r2, #1
 8006d3a:	2100      	movs	r1, #0
 8006d3c:	429a      	cmp	r2, r3
 8006d3e:	db09      	blt.n	8006d54 <__s2b+0x30>
 8006d40:	4630      	mov	r0, r6
 8006d42:	f7ff ff47 	bl	8006bd4 <_Balloc>
 8006d46:	b940      	cbnz	r0, 8006d5a <__s2b+0x36>
 8006d48:	4602      	mov	r2, r0
 8006d4a:	21d3      	movs	r1, #211	@ 0xd3
 8006d4c:	4b18      	ldr	r3, [pc, #96]	@ (8006db0 <__s2b+0x8c>)
 8006d4e:	4819      	ldr	r0, [pc, #100]	@ (8006db4 <__s2b+0x90>)
 8006d50:	f001 fd2a 	bl	80087a8 <__assert_func>
 8006d54:	0052      	lsls	r2, r2, #1
 8006d56:	3101      	adds	r1, #1
 8006d58:	e7f0      	b.n	8006d3c <__s2b+0x18>
 8006d5a:	9b08      	ldr	r3, [sp, #32]
 8006d5c:	2d09      	cmp	r5, #9
 8006d5e:	6143      	str	r3, [r0, #20]
 8006d60:	f04f 0301 	mov.w	r3, #1
 8006d64:	6103      	str	r3, [r0, #16]
 8006d66:	dd16      	ble.n	8006d96 <__s2b+0x72>
 8006d68:	f104 0909 	add.w	r9, r4, #9
 8006d6c:	46c8      	mov	r8, r9
 8006d6e:	442c      	add	r4, r5
 8006d70:	f818 3b01 	ldrb.w	r3, [r8], #1
 8006d74:	4601      	mov	r1, r0
 8006d76:	220a      	movs	r2, #10
 8006d78:	4630      	mov	r0, r6
 8006d7a:	3b30      	subs	r3, #48	@ 0x30
 8006d7c:	f7ff ff8c 	bl	8006c98 <__multadd>
 8006d80:	45a0      	cmp	r8, r4
 8006d82:	d1f5      	bne.n	8006d70 <__s2b+0x4c>
 8006d84:	f1a5 0408 	sub.w	r4, r5, #8
 8006d88:	444c      	add	r4, r9
 8006d8a:	1b2d      	subs	r5, r5, r4
 8006d8c:	1963      	adds	r3, r4, r5
 8006d8e:	42bb      	cmp	r3, r7
 8006d90:	db04      	blt.n	8006d9c <__s2b+0x78>
 8006d92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006d96:	2509      	movs	r5, #9
 8006d98:	340a      	adds	r4, #10
 8006d9a:	e7f6      	b.n	8006d8a <__s2b+0x66>
 8006d9c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006da0:	4601      	mov	r1, r0
 8006da2:	220a      	movs	r2, #10
 8006da4:	4630      	mov	r0, r6
 8006da6:	3b30      	subs	r3, #48	@ 0x30
 8006da8:	f7ff ff76 	bl	8006c98 <__multadd>
 8006dac:	e7ee      	b.n	8006d8c <__s2b+0x68>
 8006dae:	bf00      	nop
 8006db0:	080093d7 	.word	0x080093d7
 8006db4:	080093e8 	.word	0x080093e8

08006db8 <__hi0bits>:
 8006db8:	4603      	mov	r3, r0
 8006dba:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8006dbe:	bf3a      	itte	cc
 8006dc0:	0403      	lslcc	r3, r0, #16
 8006dc2:	2010      	movcc	r0, #16
 8006dc4:	2000      	movcs	r0, #0
 8006dc6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006dca:	bf3c      	itt	cc
 8006dcc:	021b      	lslcc	r3, r3, #8
 8006dce:	3008      	addcc	r0, #8
 8006dd0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006dd4:	bf3c      	itt	cc
 8006dd6:	011b      	lslcc	r3, r3, #4
 8006dd8:	3004      	addcc	r0, #4
 8006dda:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006dde:	bf3c      	itt	cc
 8006de0:	009b      	lslcc	r3, r3, #2
 8006de2:	3002      	addcc	r0, #2
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	db05      	blt.n	8006df4 <__hi0bits+0x3c>
 8006de8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8006dec:	f100 0001 	add.w	r0, r0, #1
 8006df0:	bf08      	it	eq
 8006df2:	2020      	moveq	r0, #32
 8006df4:	4770      	bx	lr

08006df6 <__lo0bits>:
 8006df6:	6803      	ldr	r3, [r0, #0]
 8006df8:	4602      	mov	r2, r0
 8006dfa:	f013 0007 	ands.w	r0, r3, #7
 8006dfe:	d00b      	beq.n	8006e18 <__lo0bits+0x22>
 8006e00:	07d9      	lsls	r1, r3, #31
 8006e02:	d421      	bmi.n	8006e48 <__lo0bits+0x52>
 8006e04:	0798      	lsls	r0, r3, #30
 8006e06:	bf49      	itett	mi
 8006e08:	085b      	lsrmi	r3, r3, #1
 8006e0a:	089b      	lsrpl	r3, r3, #2
 8006e0c:	2001      	movmi	r0, #1
 8006e0e:	6013      	strmi	r3, [r2, #0]
 8006e10:	bf5c      	itt	pl
 8006e12:	2002      	movpl	r0, #2
 8006e14:	6013      	strpl	r3, [r2, #0]
 8006e16:	4770      	bx	lr
 8006e18:	b299      	uxth	r1, r3
 8006e1a:	b909      	cbnz	r1, 8006e20 <__lo0bits+0x2a>
 8006e1c:	2010      	movs	r0, #16
 8006e1e:	0c1b      	lsrs	r3, r3, #16
 8006e20:	b2d9      	uxtb	r1, r3
 8006e22:	b909      	cbnz	r1, 8006e28 <__lo0bits+0x32>
 8006e24:	3008      	adds	r0, #8
 8006e26:	0a1b      	lsrs	r3, r3, #8
 8006e28:	0719      	lsls	r1, r3, #28
 8006e2a:	bf04      	itt	eq
 8006e2c:	091b      	lsreq	r3, r3, #4
 8006e2e:	3004      	addeq	r0, #4
 8006e30:	0799      	lsls	r1, r3, #30
 8006e32:	bf04      	itt	eq
 8006e34:	089b      	lsreq	r3, r3, #2
 8006e36:	3002      	addeq	r0, #2
 8006e38:	07d9      	lsls	r1, r3, #31
 8006e3a:	d403      	bmi.n	8006e44 <__lo0bits+0x4e>
 8006e3c:	085b      	lsrs	r3, r3, #1
 8006e3e:	f100 0001 	add.w	r0, r0, #1
 8006e42:	d003      	beq.n	8006e4c <__lo0bits+0x56>
 8006e44:	6013      	str	r3, [r2, #0]
 8006e46:	4770      	bx	lr
 8006e48:	2000      	movs	r0, #0
 8006e4a:	4770      	bx	lr
 8006e4c:	2020      	movs	r0, #32
 8006e4e:	4770      	bx	lr

08006e50 <__i2b>:
 8006e50:	b510      	push	{r4, lr}
 8006e52:	460c      	mov	r4, r1
 8006e54:	2101      	movs	r1, #1
 8006e56:	f7ff febd 	bl	8006bd4 <_Balloc>
 8006e5a:	4602      	mov	r2, r0
 8006e5c:	b928      	cbnz	r0, 8006e6a <__i2b+0x1a>
 8006e5e:	f240 1145 	movw	r1, #325	@ 0x145
 8006e62:	4b04      	ldr	r3, [pc, #16]	@ (8006e74 <__i2b+0x24>)
 8006e64:	4804      	ldr	r0, [pc, #16]	@ (8006e78 <__i2b+0x28>)
 8006e66:	f001 fc9f 	bl	80087a8 <__assert_func>
 8006e6a:	2301      	movs	r3, #1
 8006e6c:	6144      	str	r4, [r0, #20]
 8006e6e:	6103      	str	r3, [r0, #16]
 8006e70:	bd10      	pop	{r4, pc}
 8006e72:	bf00      	nop
 8006e74:	080093d7 	.word	0x080093d7
 8006e78:	080093e8 	.word	0x080093e8

08006e7c <__multiply>:
 8006e7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e80:	4614      	mov	r4, r2
 8006e82:	690a      	ldr	r2, [r1, #16]
 8006e84:	6923      	ldr	r3, [r4, #16]
 8006e86:	460f      	mov	r7, r1
 8006e88:	429a      	cmp	r2, r3
 8006e8a:	bfa2      	ittt	ge
 8006e8c:	4623      	movge	r3, r4
 8006e8e:	460c      	movge	r4, r1
 8006e90:	461f      	movge	r7, r3
 8006e92:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8006e96:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8006e9a:	68a3      	ldr	r3, [r4, #8]
 8006e9c:	6861      	ldr	r1, [r4, #4]
 8006e9e:	eb0a 0609 	add.w	r6, sl, r9
 8006ea2:	42b3      	cmp	r3, r6
 8006ea4:	b085      	sub	sp, #20
 8006ea6:	bfb8      	it	lt
 8006ea8:	3101      	addlt	r1, #1
 8006eaa:	f7ff fe93 	bl	8006bd4 <_Balloc>
 8006eae:	b930      	cbnz	r0, 8006ebe <__multiply+0x42>
 8006eb0:	4602      	mov	r2, r0
 8006eb2:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8006eb6:	4b43      	ldr	r3, [pc, #268]	@ (8006fc4 <__multiply+0x148>)
 8006eb8:	4843      	ldr	r0, [pc, #268]	@ (8006fc8 <__multiply+0x14c>)
 8006eba:	f001 fc75 	bl	80087a8 <__assert_func>
 8006ebe:	f100 0514 	add.w	r5, r0, #20
 8006ec2:	462b      	mov	r3, r5
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006eca:	4543      	cmp	r3, r8
 8006ecc:	d321      	bcc.n	8006f12 <__multiply+0x96>
 8006ece:	f107 0114 	add.w	r1, r7, #20
 8006ed2:	f104 0214 	add.w	r2, r4, #20
 8006ed6:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8006eda:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8006ede:	9302      	str	r3, [sp, #8]
 8006ee0:	1b13      	subs	r3, r2, r4
 8006ee2:	3b15      	subs	r3, #21
 8006ee4:	f023 0303 	bic.w	r3, r3, #3
 8006ee8:	3304      	adds	r3, #4
 8006eea:	f104 0715 	add.w	r7, r4, #21
 8006eee:	42ba      	cmp	r2, r7
 8006ef0:	bf38      	it	cc
 8006ef2:	2304      	movcc	r3, #4
 8006ef4:	9301      	str	r3, [sp, #4]
 8006ef6:	9b02      	ldr	r3, [sp, #8]
 8006ef8:	9103      	str	r1, [sp, #12]
 8006efa:	428b      	cmp	r3, r1
 8006efc:	d80c      	bhi.n	8006f18 <__multiply+0x9c>
 8006efe:	2e00      	cmp	r6, #0
 8006f00:	dd03      	ble.n	8006f0a <__multiply+0x8e>
 8006f02:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d05a      	beq.n	8006fc0 <__multiply+0x144>
 8006f0a:	6106      	str	r6, [r0, #16]
 8006f0c:	b005      	add	sp, #20
 8006f0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f12:	f843 2b04 	str.w	r2, [r3], #4
 8006f16:	e7d8      	b.n	8006eca <__multiply+0x4e>
 8006f18:	f8b1 a000 	ldrh.w	sl, [r1]
 8006f1c:	f1ba 0f00 	cmp.w	sl, #0
 8006f20:	d023      	beq.n	8006f6a <__multiply+0xee>
 8006f22:	46a9      	mov	r9, r5
 8006f24:	f04f 0c00 	mov.w	ip, #0
 8006f28:	f104 0e14 	add.w	lr, r4, #20
 8006f2c:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006f30:	f8d9 3000 	ldr.w	r3, [r9]
 8006f34:	fa1f fb87 	uxth.w	fp, r7
 8006f38:	b29b      	uxth	r3, r3
 8006f3a:	fb0a 330b 	mla	r3, sl, fp, r3
 8006f3e:	4463      	add	r3, ip
 8006f40:	f8d9 c000 	ldr.w	ip, [r9]
 8006f44:	0c3f      	lsrs	r7, r7, #16
 8006f46:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8006f4a:	fb0a c707 	mla	r7, sl, r7, ip
 8006f4e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8006f52:	b29b      	uxth	r3, r3
 8006f54:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006f58:	4572      	cmp	r2, lr
 8006f5a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8006f5e:	f849 3b04 	str.w	r3, [r9], #4
 8006f62:	d8e3      	bhi.n	8006f2c <__multiply+0xb0>
 8006f64:	9b01      	ldr	r3, [sp, #4]
 8006f66:	f845 c003 	str.w	ip, [r5, r3]
 8006f6a:	9b03      	ldr	r3, [sp, #12]
 8006f6c:	3104      	adds	r1, #4
 8006f6e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8006f72:	f1b9 0f00 	cmp.w	r9, #0
 8006f76:	d021      	beq.n	8006fbc <__multiply+0x140>
 8006f78:	46ae      	mov	lr, r5
 8006f7a:	f04f 0a00 	mov.w	sl, #0
 8006f7e:	682b      	ldr	r3, [r5, #0]
 8006f80:	f104 0c14 	add.w	ip, r4, #20
 8006f84:	f8bc b000 	ldrh.w	fp, [ip]
 8006f88:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8006f8c:	b29b      	uxth	r3, r3
 8006f8e:	fb09 770b 	mla	r7, r9, fp, r7
 8006f92:	4457      	add	r7, sl
 8006f94:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006f98:	f84e 3b04 	str.w	r3, [lr], #4
 8006f9c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006fa0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006fa4:	f8be 3000 	ldrh.w	r3, [lr]
 8006fa8:	4562      	cmp	r2, ip
 8006faa:	fb09 330a 	mla	r3, r9, sl, r3
 8006fae:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8006fb2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006fb6:	d8e5      	bhi.n	8006f84 <__multiply+0x108>
 8006fb8:	9f01      	ldr	r7, [sp, #4]
 8006fba:	51eb      	str	r3, [r5, r7]
 8006fbc:	3504      	adds	r5, #4
 8006fbe:	e79a      	b.n	8006ef6 <__multiply+0x7a>
 8006fc0:	3e01      	subs	r6, #1
 8006fc2:	e79c      	b.n	8006efe <__multiply+0x82>
 8006fc4:	080093d7 	.word	0x080093d7
 8006fc8:	080093e8 	.word	0x080093e8

08006fcc <__pow5mult>:
 8006fcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006fd0:	4615      	mov	r5, r2
 8006fd2:	f012 0203 	ands.w	r2, r2, #3
 8006fd6:	4607      	mov	r7, r0
 8006fd8:	460e      	mov	r6, r1
 8006fda:	d007      	beq.n	8006fec <__pow5mult+0x20>
 8006fdc:	4c25      	ldr	r4, [pc, #148]	@ (8007074 <__pow5mult+0xa8>)
 8006fde:	3a01      	subs	r2, #1
 8006fe0:	2300      	movs	r3, #0
 8006fe2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006fe6:	f7ff fe57 	bl	8006c98 <__multadd>
 8006fea:	4606      	mov	r6, r0
 8006fec:	10ad      	asrs	r5, r5, #2
 8006fee:	d03d      	beq.n	800706c <__pow5mult+0xa0>
 8006ff0:	69fc      	ldr	r4, [r7, #28]
 8006ff2:	b97c      	cbnz	r4, 8007014 <__pow5mult+0x48>
 8006ff4:	2010      	movs	r0, #16
 8006ff6:	f7ff fd37 	bl	8006a68 <malloc>
 8006ffa:	4602      	mov	r2, r0
 8006ffc:	61f8      	str	r0, [r7, #28]
 8006ffe:	b928      	cbnz	r0, 800700c <__pow5mult+0x40>
 8007000:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007004:	4b1c      	ldr	r3, [pc, #112]	@ (8007078 <__pow5mult+0xac>)
 8007006:	481d      	ldr	r0, [pc, #116]	@ (800707c <__pow5mult+0xb0>)
 8007008:	f001 fbce 	bl	80087a8 <__assert_func>
 800700c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007010:	6004      	str	r4, [r0, #0]
 8007012:	60c4      	str	r4, [r0, #12]
 8007014:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007018:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800701c:	b94c      	cbnz	r4, 8007032 <__pow5mult+0x66>
 800701e:	f240 2171 	movw	r1, #625	@ 0x271
 8007022:	4638      	mov	r0, r7
 8007024:	f7ff ff14 	bl	8006e50 <__i2b>
 8007028:	2300      	movs	r3, #0
 800702a:	4604      	mov	r4, r0
 800702c:	f8c8 0008 	str.w	r0, [r8, #8]
 8007030:	6003      	str	r3, [r0, #0]
 8007032:	f04f 0900 	mov.w	r9, #0
 8007036:	07eb      	lsls	r3, r5, #31
 8007038:	d50a      	bpl.n	8007050 <__pow5mult+0x84>
 800703a:	4631      	mov	r1, r6
 800703c:	4622      	mov	r2, r4
 800703e:	4638      	mov	r0, r7
 8007040:	f7ff ff1c 	bl	8006e7c <__multiply>
 8007044:	4680      	mov	r8, r0
 8007046:	4631      	mov	r1, r6
 8007048:	4638      	mov	r0, r7
 800704a:	f7ff fe03 	bl	8006c54 <_Bfree>
 800704e:	4646      	mov	r6, r8
 8007050:	106d      	asrs	r5, r5, #1
 8007052:	d00b      	beq.n	800706c <__pow5mult+0xa0>
 8007054:	6820      	ldr	r0, [r4, #0]
 8007056:	b938      	cbnz	r0, 8007068 <__pow5mult+0x9c>
 8007058:	4622      	mov	r2, r4
 800705a:	4621      	mov	r1, r4
 800705c:	4638      	mov	r0, r7
 800705e:	f7ff ff0d 	bl	8006e7c <__multiply>
 8007062:	6020      	str	r0, [r4, #0]
 8007064:	f8c0 9000 	str.w	r9, [r0]
 8007068:	4604      	mov	r4, r0
 800706a:	e7e4      	b.n	8007036 <__pow5mult+0x6a>
 800706c:	4630      	mov	r0, r6
 800706e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007072:	bf00      	nop
 8007074:	08009444 	.word	0x08009444
 8007078:	08009368 	.word	0x08009368
 800707c:	080093e8 	.word	0x080093e8

08007080 <__lshift>:
 8007080:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007084:	460c      	mov	r4, r1
 8007086:	4607      	mov	r7, r0
 8007088:	4691      	mov	r9, r2
 800708a:	6923      	ldr	r3, [r4, #16]
 800708c:	6849      	ldr	r1, [r1, #4]
 800708e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007092:	68a3      	ldr	r3, [r4, #8]
 8007094:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007098:	f108 0601 	add.w	r6, r8, #1
 800709c:	42b3      	cmp	r3, r6
 800709e:	db0b      	blt.n	80070b8 <__lshift+0x38>
 80070a0:	4638      	mov	r0, r7
 80070a2:	f7ff fd97 	bl	8006bd4 <_Balloc>
 80070a6:	4605      	mov	r5, r0
 80070a8:	b948      	cbnz	r0, 80070be <__lshift+0x3e>
 80070aa:	4602      	mov	r2, r0
 80070ac:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80070b0:	4b27      	ldr	r3, [pc, #156]	@ (8007150 <__lshift+0xd0>)
 80070b2:	4828      	ldr	r0, [pc, #160]	@ (8007154 <__lshift+0xd4>)
 80070b4:	f001 fb78 	bl	80087a8 <__assert_func>
 80070b8:	3101      	adds	r1, #1
 80070ba:	005b      	lsls	r3, r3, #1
 80070bc:	e7ee      	b.n	800709c <__lshift+0x1c>
 80070be:	2300      	movs	r3, #0
 80070c0:	f100 0114 	add.w	r1, r0, #20
 80070c4:	f100 0210 	add.w	r2, r0, #16
 80070c8:	4618      	mov	r0, r3
 80070ca:	4553      	cmp	r3, sl
 80070cc:	db33      	blt.n	8007136 <__lshift+0xb6>
 80070ce:	6920      	ldr	r0, [r4, #16]
 80070d0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80070d4:	f104 0314 	add.w	r3, r4, #20
 80070d8:	f019 091f 	ands.w	r9, r9, #31
 80070dc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80070e0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80070e4:	d02b      	beq.n	800713e <__lshift+0xbe>
 80070e6:	468a      	mov	sl, r1
 80070e8:	2200      	movs	r2, #0
 80070ea:	f1c9 0e20 	rsb	lr, r9, #32
 80070ee:	6818      	ldr	r0, [r3, #0]
 80070f0:	fa00 f009 	lsl.w	r0, r0, r9
 80070f4:	4310      	orrs	r0, r2
 80070f6:	f84a 0b04 	str.w	r0, [sl], #4
 80070fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80070fe:	459c      	cmp	ip, r3
 8007100:	fa22 f20e 	lsr.w	r2, r2, lr
 8007104:	d8f3      	bhi.n	80070ee <__lshift+0x6e>
 8007106:	ebac 0304 	sub.w	r3, ip, r4
 800710a:	3b15      	subs	r3, #21
 800710c:	f023 0303 	bic.w	r3, r3, #3
 8007110:	3304      	adds	r3, #4
 8007112:	f104 0015 	add.w	r0, r4, #21
 8007116:	4584      	cmp	ip, r0
 8007118:	bf38      	it	cc
 800711a:	2304      	movcc	r3, #4
 800711c:	50ca      	str	r2, [r1, r3]
 800711e:	b10a      	cbz	r2, 8007124 <__lshift+0xa4>
 8007120:	f108 0602 	add.w	r6, r8, #2
 8007124:	3e01      	subs	r6, #1
 8007126:	4638      	mov	r0, r7
 8007128:	4621      	mov	r1, r4
 800712a:	612e      	str	r6, [r5, #16]
 800712c:	f7ff fd92 	bl	8006c54 <_Bfree>
 8007130:	4628      	mov	r0, r5
 8007132:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007136:	f842 0f04 	str.w	r0, [r2, #4]!
 800713a:	3301      	adds	r3, #1
 800713c:	e7c5      	b.n	80070ca <__lshift+0x4a>
 800713e:	3904      	subs	r1, #4
 8007140:	f853 2b04 	ldr.w	r2, [r3], #4
 8007144:	459c      	cmp	ip, r3
 8007146:	f841 2f04 	str.w	r2, [r1, #4]!
 800714a:	d8f9      	bhi.n	8007140 <__lshift+0xc0>
 800714c:	e7ea      	b.n	8007124 <__lshift+0xa4>
 800714e:	bf00      	nop
 8007150:	080093d7 	.word	0x080093d7
 8007154:	080093e8 	.word	0x080093e8

08007158 <__mcmp>:
 8007158:	4603      	mov	r3, r0
 800715a:	690a      	ldr	r2, [r1, #16]
 800715c:	6900      	ldr	r0, [r0, #16]
 800715e:	b530      	push	{r4, r5, lr}
 8007160:	1a80      	subs	r0, r0, r2
 8007162:	d10e      	bne.n	8007182 <__mcmp+0x2a>
 8007164:	3314      	adds	r3, #20
 8007166:	3114      	adds	r1, #20
 8007168:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800716c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007170:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007174:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007178:	4295      	cmp	r5, r2
 800717a:	d003      	beq.n	8007184 <__mcmp+0x2c>
 800717c:	d205      	bcs.n	800718a <__mcmp+0x32>
 800717e:	f04f 30ff 	mov.w	r0, #4294967295
 8007182:	bd30      	pop	{r4, r5, pc}
 8007184:	42a3      	cmp	r3, r4
 8007186:	d3f3      	bcc.n	8007170 <__mcmp+0x18>
 8007188:	e7fb      	b.n	8007182 <__mcmp+0x2a>
 800718a:	2001      	movs	r0, #1
 800718c:	e7f9      	b.n	8007182 <__mcmp+0x2a>
	...

08007190 <__mdiff>:
 8007190:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007194:	4689      	mov	r9, r1
 8007196:	4606      	mov	r6, r0
 8007198:	4611      	mov	r1, r2
 800719a:	4648      	mov	r0, r9
 800719c:	4614      	mov	r4, r2
 800719e:	f7ff ffdb 	bl	8007158 <__mcmp>
 80071a2:	1e05      	subs	r5, r0, #0
 80071a4:	d112      	bne.n	80071cc <__mdiff+0x3c>
 80071a6:	4629      	mov	r1, r5
 80071a8:	4630      	mov	r0, r6
 80071aa:	f7ff fd13 	bl	8006bd4 <_Balloc>
 80071ae:	4602      	mov	r2, r0
 80071b0:	b928      	cbnz	r0, 80071be <__mdiff+0x2e>
 80071b2:	f240 2137 	movw	r1, #567	@ 0x237
 80071b6:	4b3e      	ldr	r3, [pc, #248]	@ (80072b0 <__mdiff+0x120>)
 80071b8:	483e      	ldr	r0, [pc, #248]	@ (80072b4 <__mdiff+0x124>)
 80071ba:	f001 faf5 	bl	80087a8 <__assert_func>
 80071be:	2301      	movs	r3, #1
 80071c0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80071c4:	4610      	mov	r0, r2
 80071c6:	b003      	add	sp, #12
 80071c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071cc:	bfbc      	itt	lt
 80071ce:	464b      	movlt	r3, r9
 80071d0:	46a1      	movlt	r9, r4
 80071d2:	4630      	mov	r0, r6
 80071d4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80071d8:	bfba      	itte	lt
 80071da:	461c      	movlt	r4, r3
 80071dc:	2501      	movlt	r5, #1
 80071de:	2500      	movge	r5, #0
 80071e0:	f7ff fcf8 	bl	8006bd4 <_Balloc>
 80071e4:	4602      	mov	r2, r0
 80071e6:	b918      	cbnz	r0, 80071f0 <__mdiff+0x60>
 80071e8:	f240 2145 	movw	r1, #581	@ 0x245
 80071ec:	4b30      	ldr	r3, [pc, #192]	@ (80072b0 <__mdiff+0x120>)
 80071ee:	e7e3      	b.n	80071b8 <__mdiff+0x28>
 80071f0:	f100 0b14 	add.w	fp, r0, #20
 80071f4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80071f8:	f109 0310 	add.w	r3, r9, #16
 80071fc:	60c5      	str	r5, [r0, #12]
 80071fe:	f04f 0c00 	mov.w	ip, #0
 8007202:	f109 0514 	add.w	r5, r9, #20
 8007206:	46d9      	mov	r9, fp
 8007208:	6926      	ldr	r6, [r4, #16]
 800720a:	f104 0e14 	add.w	lr, r4, #20
 800720e:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007212:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007216:	9301      	str	r3, [sp, #4]
 8007218:	9b01      	ldr	r3, [sp, #4]
 800721a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800721e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007222:	b281      	uxth	r1, r0
 8007224:	9301      	str	r3, [sp, #4]
 8007226:	fa1f f38a 	uxth.w	r3, sl
 800722a:	1a5b      	subs	r3, r3, r1
 800722c:	0c00      	lsrs	r0, r0, #16
 800722e:	4463      	add	r3, ip
 8007230:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007234:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8007238:	b29b      	uxth	r3, r3
 800723a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800723e:	4576      	cmp	r6, lr
 8007240:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007244:	f849 3b04 	str.w	r3, [r9], #4
 8007248:	d8e6      	bhi.n	8007218 <__mdiff+0x88>
 800724a:	1b33      	subs	r3, r6, r4
 800724c:	3b15      	subs	r3, #21
 800724e:	f023 0303 	bic.w	r3, r3, #3
 8007252:	3415      	adds	r4, #21
 8007254:	3304      	adds	r3, #4
 8007256:	42a6      	cmp	r6, r4
 8007258:	bf38      	it	cc
 800725a:	2304      	movcc	r3, #4
 800725c:	441d      	add	r5, r3
 800725e:	445b      	add	r3, fp
 8007260:	461e      	mov	r6, r3
 8007262:	462c      	mov	r4, r5
 8007264:	4544      	cmp	r4, r8
 8007266:	d30e      	bcc.n	8007286 <__mdiff+0xf6>
 8007268:	f108 0103 	add.w	r1, r8, #3
 800726c:	1b49      	subs	r1, r1, r5
 800726e:	f021 0103 	bic.w	r1, r1, #3
 8007272:	3d03      	subs	r5, #3
 8007274:	45a8      	cmp	r8, r5
 8007276:	bf38      	it	cc
 8007278:	2100      	movcc	r1, #0
 800727a:	440b      	add	r3, r1
 800727c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007280:	b199      	cbz	r1, 80072aa <__mdiff+0x11a>
 8007282:	6117      	str	r7, [r2, #16]
 8007284:	e79e      	b.n	80071c4 <__mdiff+0x34>
 8007286:	46e6      	mov	lr, ip
 8007288:	f854 1b04 	ldr.w	r1, [r4], #4
 800728c:	fa1f fc81 	uxth.w	ip, r1
 8007290:	44f4      	add	ip, lr
 8007292:	0c08      	lsrs	r0, r1, #16
 8007294:	4471      	add	r1, lr
 8007296:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800729a:	b289      	uxth	r1, r1
 800729c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80072a0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80072a4:	f846 1b04 	str.w	r1, [r6], #4
 80072a8:	e7dc      	b.n	8007264 <__mdiff+0xd4>
 80072aa:	3f01      	subs	r7, #1
 80072ac:	e7e6      	b.n	800727c <__mdiff+0xec>
 80072ae:	bf00      	nop
 80072b0:	080093d7 	.word	0x080093d7
 80072b4:	080093e8 	.word	0x080093e8

080072b8 <__ulp>:
 80072b8:	4b0e      	ldr	r3, [pc, #56]	@ (80072f4 <__ulp+0x3c>)
 80072ba:	400b      	ands	r3, r1
 80072bc:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	dc08      	bgt.n	80072d6 <__ulp+0x1e>
 80072c4:	425b      	negs	r3, r3
 80072c6:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80072ca:	ea4f 5223 	mov.w	r2, r3, asr #20
 80072ce:	da04      	bge.n	80072da <__ulp+0x22>
 80072d0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80072d4:	4113      	asrs	r3, r2
 80072d6:	2200      	movs	r2, #0
 80072d8:	e008      	b.n	80072ec <__ulp+0x34>
 80072da:	f1a2 0314 	sub.w	r3, r2, #20
 80072de:	2b1e      	cmp	r3, #30
 80072e0:	bfd6      	itet	le
 80072e2:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80072e6:	2201      	movgt	r2, #1
 80072e8:	40da      	lsrle	r2, r3
 80072ea:	2300      	movs	r3, #0
 80072ec:	4619      	mov	r1, r3
 80072ee:	4610      	mov	r0, r2
 80072f0:	4770      	bx	lr
 80072f2:	bf00      	nop
 80072f4:	7ff00000 	.word	0x7ff00000

080072f8 <__b2d>:
 80072f8:	6902      	ldr	r2, [r0, #16]
 80072fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072fc:	f100 0614 	add.w	r6, r0, #20
 8007300:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 8007304:	f852 4c04 	ldr.w	r4, [r2, #-4]
 8007308:	4f1e      	ldr	r7, [pc, #120]	@ (8007384 <__b2d+0x8c>)
 800730a:	4620      	mov	r0, r4
 800730c:	f7ff fd54 	bl	8006db8 <__hi0bits>
 8007310:	4603      	mov	r3, r0
 8007312:	f1c0 0020 	rsb	r0, r0, #32
 8007316:	2b0a      	cmp	r3, #10
 8007318:	f1a2 0504 	sub.w	r5, r2, #4
 800731c:	6008      	str	r0, [r1, #0]
 800731e:	dc12      	bgt.n	8007346 <__b2d+0x4e>
 8007320:	42ae      	cmp	r6, r5
 8007322:	bf2c      	ite	cs
 8007324:	2200      	movcs	r2, #0
 8007326:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800732a:	f1c3 0c0b 	rsb	ip, r3, #11
 800732e:	3315      	adds	r3, #21
 8007330:	fa24 fe0c 	lsr.w	lr, r4, ip
 8007334:	fa04 f303 	lsl.w	r3, r4, r3
 8007338:	fa22 f20c 	lsr.w	r2, r2, ip
 800733c:	ea4e 0107 	orr.w	r1, lr, r7
 8007340:	431a      	orrs	r2, r3
 8007342:	4610      	mov	r0, r2
 8007344:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007346:	42ae      	cmp	r6, r5
 8007348:	bf36      	itet	cc
 800734a:	f1a2 0508 	subcc.w	r5, r2, #8
 800734e:	2200      	movcs	r2, #0
 8007350:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8007354:	3b0b      	subs	r3, #11
 8007356:	d012      	beq.n	800737e <__b2d+0x86>
 8007358:	f1c3 0720 	rsb	r7, r3, #32
 800735c:	fa22 f107 	lsr.w	r1, r2, r7
 8007360:	409c      	lsls	r4, r3
 8007362:	430c      	orrs	r4, r1
 8007364:	42b5      	cmp	r5, r6
 8007366:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 800736a:	bf94      	ite	ls
 800736c:	2400      	movls	r4, #0
 800736e:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 8007372:	409a      	lsls	r2, r3
 8007374:	40fc      	lsrs	r4, r7
 8007376:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800737a:	4322      	orrs	r2, r4
 800737c:	e7e1      	b.n	8007342 <__b2d+0x4a>
 800737e:	ea44 0107 	orr.w	r1, r4, r7
 8007382:	e7de      	b.n	8007342 <__b2d+0x4a>
 8007384:	3ff00000 	.word	0x3ff00000

08007388 <__d2b>:
 8007388:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800738c:	2101      	movs	r1, #1
 800738e:	4690      	mov	r8, r2
 8007390:	4699      	mov	r9, r3
 8007392:	9e08      	ldr	r6, [sp, #32]
 8007394:	f7ff fc1e 	bl	8006bd4 <_Balloc>
 8007398:	4604      	mov	r4, r0
 800739a:	b930      	cbnz	r0, 80073aa <__d2b+0x22>
 800739c:	4602      	mov	r2, r0
 800739e:	f240 310f 	movw	r1, #783	@ 0x30f
 80073a2:	4b23      	ldr	r3, [pc, #140]	@ (8007430 <__d2b+0xa8>)
 80073a4:	4823      	ldr	r0, [pc, #140]	@ (8007434 <__d2b+0xac>)
 80073a6:	f001 f9ff 	bl	80087a8 <__assert_func>
 80073aa:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80073ae:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80073b2:	b10d      	cbz	r5, 80073b8 <__d2b+0x30>
 80073b4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80073b8:	9301      	str	r3, [sp, #4]
 80073ba:	f1b8 0300 	subs.w	r3, r8, #0
 80073be:	d024      	beq.n	800740a <__d2b+0x82>
 80073c0:	4668      	mov	r0, sp
 80073c2:	9300      	str	r3, [sp, #0]
 80073c4:	f7ff fd17 	bl	8006df6 <__lo0bits>
 80073c8:	e9dd 1200 	ldrd	r1, r2, [sp]
 80073cc:	b1d8      	cbz	r0, 8007406 <__d2b+0x7e>
 80073ce:	f1c0 0320 	rsb	r3, r0, #32
 80073d2:	fa02 f303 	lsl.w	r3, r2, r3
 80073d6:	430b      	orrs	r3, r1
 80073d8:	40c2      	lsrs	r2, r0
 80073da:	6163      	str	r3, [r4, #20]
 80073dc:	9201      	str	r2, [sp, #4]
 80073de:	9b01      	ldr	r3, [sp, #4]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	bf0c      	ite	eq
 80073e4:	2201      	moveq	r2, #1
 80073e6:	2202      	movne	r2, #2
 80073e8:	61a3      	str	r3, [r4, #24]
 80073ea:	6122      	str	r2, [r4, #16]
 80073ec:	b1ad      	cbz	r5, 800741a <__d2b+0x92>
 80073ee:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80073f2:	4405      	add	r5, r0
 80073f4:	6035      	str	r5, [r6, #0]
 80073f6:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80073fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80073fc:	6018      	str	r0, [r3, #0]
 80073fe:	4620      	mov	r0, r4
 8007400:	b002      	add	sp, #8
 8007402:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8007406:	6161      	str	r1, [r4, #20]
 8007408:	e7e9      	b.n	80073de <__d2b+0x56>
 800740a:	a801      	add	r0, sp, #4
 800740c:	f7ff fcf3 	bl	8006df6 <__lo0bits>
 8007410:	9b01      	ldr	r3, [sp, #4]
 8007412:	2201      	movs	r2, #1
 8007414:	6163      	str	r3, [r4, #20]
 8007416:	3020      	adds	r0, #32
 8007418:	e7e7      	b.n	80073ea <__d2b+0x62>
 800741a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800741e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007422:	6030      	str	r0, [r6, #0]
 8007424:	6918      	ldr	r0, [r3, #16]
 8007426:	f7ff fcc7 	bl	8006db8 <__hi0bits>
 800742a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800742e:	e7e4      	b.n	80073fa <__d2b+0x72>
 8007430:	080093d7 	.word	0x080093d7
 8007434:	080093e8 	.word	0x080093e8

08007438 <__ratio>:
 8007438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800743c:	b085      	sub	sp, #20
 800743e:	e9cd 1000 	strd	r1, r0, [sp]
 8007442:	a902      	add	r1, sp, #8
 8007444:	f7ff ff58 	bl	80072f8 <__b2d>
 8007448:	468b      	mov	fp, r1
 800744a:	4606      	mov	r6, r0
 800744c:	460f      	mov	r7, r1
 800744e:	9800      	ldr	r0, [sp, #0]
 8007450:	a903      	add	r1, sp, #12
 8007452:	f7ff ff51 	bl	80072f8 <__b2d>
 8007456:	460d      	mov	r5, r1
 8007458:	9b01      	ldr	r3, [sp, #4]
 800745a:	4689      	mov	r9, r1
 800745c:	6919      	ldr	r1, [r3, #16]
 800745e:	9b00      	ldr	r3, [sp, #0]
 8007460:	4604      	mov	r4, r0
 8007462:	691b      	ldr	r3, [r3, #16]
 8007464:	4630      	mov	r0, r6
 8007466:	1ac9      	subs	r1, r1, r3
 8007468:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800746c:	1a9b      	subs	r3, r3, r2
 800746e:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8007472:	2b00      	cmp	r3, #0
 8007474:	bfcd      	iteet	gt
 8007476:	463a      	movgt	r2, r7
 8007478:	462a      	movle	r2, r5
 800747a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800747e:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8007482:	bfd8      	it	le
 8007484:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8007488:	464b      	mov	r3, r9
 800748a:	4622      	mov	r2, r4
 800748c:	4659      	mov	r1, fp
 800748e:	f7f9 f94d 	bl	800072c <__aeabi_ddiv>
 8007492:	b005      	add	sp, #20
 8007494:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007498 <__copybits>:
 8007498:	3901      	subs	r1, #1
 800749a:	b570      	push	{r4, r5, r6, lr}
 800749c:	1149      	asrs	r1, r1, #5
 800749e:	6914      	ldr	r4, [r2, #16]
 80074a0:	3101      	adds	r1, #1
 80074a2:	f102 0314 	add.w	r3, r2, #20
 80074a6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80074aa:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80074ae:	1f05      	subs	r5, r0, #4
 80074b0:	42a3      	cmp	r3, r4
 80074b2:	d30c      	bcc.n	80074ce <__copybits+0x36>
 80074b4:	1aa3      	subs	r3, r4, r2
 80074b6:	3b11      	subs	r3, #17
 80074b8:	f023 0303 	bic.w	r3, r3, #3
 80074bc:	3211      	adds	r2, #17
 80074be:	42a2      	cmp	r2, r4
 80074c0:	bf88      	it	hi
 80074c2:	2300      	movhi	r3, #0
 80074c4:	4418      	add	r0, r3
 80074c6:	2300      	movs	r3, #0
 80074c8:	4288      	cmp	r0, r1
 80074ca:	d305      	bcc.n	80074d8 <__copybits+0x40>
 80074cc:	bd70      	pop	{r4, r5, r6, pc}
 80074ce:	f853 6b04 	ldr.w	r6, [r3], #4
 80074d2:	f845 6f04 	str.w	r6, [r5, #4]!
 80074d6:	e7eb      	b.n	80074b0 <__copybits+0x18>
 80074d8:	f840 3b04 	str.w	r3, [r0], #4
 80074dc:	e7f4      	b.n	80074c8 <__copybits+0x30>

080074de <__any_on>:
 80074de:	f100 0214 	add.w	r2, r0, #20
 80074e2:	6900      	ldr	r0, [r0, #16]
 80074e4:	114b      	asrs	r3, r1, #5
 80074e6:	4298      	cmp	r0, r3
 80074e8:	b510      	push	{r4, lr}
 80074ea:	db11      	blt.n	8007510 <__any_on+0x32>
 80074ec:	dd0a      	ble.n	8007504 <__any_on+0x26>
 80074ee:	f011 011f 	ands.w	r1, r1, #31
 80074f2:	d007      	beq.n	8007504 <__any_on+0x26>
 80074f4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80074f8:	fa24 f001 	lsr.w	r0, r4, r1
 80074fc:	fa00 f101 	lsl.w	r1, r0, r1
 8007500:	428c      	cmp	r4, r1
 8007502:	d10b      	bne.n	800751c <__any_on+0x3e>
 8007504:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007508:	4293      	cmp	r3, r2
 800750a:	d803      	bhi.n	8007514 <__any_on+0x36>
 800750c:	2000      	movs	r0, #0
 800750e:	bd10      	pop	{r4, pc}
 8007510:	4603      	mov	r3, r0
 8007512:	e7f7      	b.n	8007504 <__any_on+0x26>
 8007514:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007518:	2900      	cmp	r1, #0
 800751a:	d0f5      	beq.n	8007508 <__any_on+0x2a>
 800751c:	2001      	movs	r0, #1
 800751e:	e7f6      	b.n	800750e <__any_on+0x30>

08007520 <sulp>:
 8007520:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007524:	460f      	mov	r7, r1
 8007526:	4690      	mov	r8, r2
 8007528:	f7ff fec6 	bl	80072b8 <__ulp>
 800752c:	4604      	mov	r4, r0
 800752e:	460d      	mov	r5, r1
 8007530:	f1b8 0f00 	cmp.w	r8, #0
 8007534:	d011      	beq.n	800755a <sulp+0x3a>
 8007536:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800753a:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800753e:	2b00      	cmp	r3, #0
 8007540:	dd0b      	ble.n	800755a <sulp+0x3a>
 8007542:	2400      	movs	r4, #0
 8007544:	051b      	lsls	r3, r3, #20
 8007546:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800754a:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800754e:	4622      	mov	r2, r4
 8007550:	462b      	mov	r3, r5
 8007552:	f7f8 ffc1 	bl	80004d8 <__aeabi_dmul>
 8007556:	4604      	mov	r4, r0
 8007558:	460d      	mov	r5, r1
 800755a:	4620      	mov	r0, r4
 800755c:	4629      	mov	r1, r5
 800755e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007562:	0000      	movs	r0, r0
 8007564:	0000      	movs	r0, r0
	...

08007568 <_strtod_l>:
 8007568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800756c:	b09f      	sub	sp, #124	@ 0x7c
 800756e:	9217      	str	r2, [sp, #92]	@ 0x5c
 8007570:	2200      	movs	r2, #0
 8007572:	460c      	mov	r4, r1
 8007574:	921a      	str	r2, [sp, #104]	@ 0x68
 8007576:	f04f 0a00 	mov.w	sl, #0
 800757a:	f04f 0b00 	mov.w	fp, #0
 800757e:	460a      	mov	r2, r1
 8007580:	9005      	str	r0, [sp, #20]
 8007582:	9219      	str	r2, [sp, #100]	@ 0x64
 8007584:	7811      	ldrb	r1, [r2, #0]
 8007586:	292b      	cmp	r1, #43	@ 0x2b
 8007588:	d048      	beq.n	800761c <_strtod_l+0xb4>
 800758a:	d836      	bhi.n	80075fa <_strtod_l+0x92>
 800758c:	290d      	cmp	r1, #13
 800758e:	d830      	bhi.n	80075f2 <_strtod_l+0x8a>
 8007590:	2908      	cmp	r1, #8
 8007592:	d830      	bhi.n	80075f6 <_strtod_l+0x8e>
 8007594:	2900      	cmp	r1, #0
 8007596:	d039      	beq.n	800760c <_strtod_l+0xa4>
 8007598:	2200      	movs	r2, #0
 800759a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800759c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800759e:	782a      	ldrb	r2, [r5, #0]
 80075a0:	2a30      	cmp	r2, #48	@ 0x30
 80075a2:	f040 80b1 	bne.w	8007708 <_strtod_l+0x1a0>
 80075a6:	786a      	ldrb	r2, [r5, #1]
 80075a8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80075ac:	2a58      	cmp	r2, #88	@ 0x58
 80075ae:	d16c      	bne.n	800768a <_strtod_l+0x122>
 80075b0:	9302      	str	r3, [sp, #8]
 80075b2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80075b4:	4a8e      	ldr	r2, [pc, #568]	@ (80077f0 <_strtod_l+0x288>)
 80075b6:	9301      	str	r3, [sp, #4]
 80075b8:	ab1a      	add	r3, sp, #104	@ 0x68
 80075ba:	9300      	str	r3, [sp, #0]
 80075bc:	9805      	ldr	r0, [sp, #20]
 80075be:	ab1b      	add	r3, sp, #108	@ 0x6c
 80075c0:	a919      	add	r1, sp, #100	@ 0x64
 80075c2:	f001 f98b 	bl	80088dc <__gethex>
 80075c6:	f010 060f 	ands.w	r6, r0, #15
 80075ca:	4604      	mov	r4, r0
 80075cc:	d005      	beq.n	80075da <_strtod_l+0x72>
 80075ce:	2e06      	cmp	r6, #6
 80075d0:	d126      	bne.n	8007620 <_strtod_l+0xb8>
 80075d2:	2300      	movs	r3, #0
 80075d4:	3501      	adds	r5, #1
 80075d6:	9519      	str	r5, [sp, #100]	@ 0x64
 80075d8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80075da:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80075dc:	2b00      	cmp	r3, #0
 80075de:	f040 8584 	bne.w	80080ea <_strtod_l+0xb82>
 80075e2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80075e4:	b1bb      	cbz	r3, 8007616 <_strtod_l+0xae>
 80075e6:	4650      	mov	r0, sl
 80075e8:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 80075ec:	b01f      	add	sp, #124	@ 0x7c
 80075ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075f2:	2920      	cmp	r1, #32
 80075f4:	d1d0      	bne.n	8007598 <_strtod_l+0x30>
 80075f6:	3201      	adds	r2, #1
 80075f8:	e7c3      	b.n	8007582 <_strtod_l+0x1a>
 80075fa:	292d      	cmp	r1, #45	@ 0x2d
 80075fc:	d1cc      	bne.n	8007598 <_strtod_l+0x30>
 80075fe:	2101      	movs	r1, #1
 8007600:	910b      	str	r1, [sp, #44]	@ 0x2c
 8007602:	1c51      	adds	r1, r2, #1
 8007604:	9119      	str	r1, [sp, #100]	@ 0x64
 8007606:	7852      	ldrb	r2, [r2, #1]
 8007608:	2a00      	cmp	r2, #0
 800760a:	d1c7      	bne.n	800759c <_strtod_l+0x34>
 800760c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800760e:	9419      	str	r4, [sp, #100]	@ 0x64
 8007610:	2b00      	cmp	r3, #0
 8007612:	f040 8568 	bne.w	80080e6 <_strtod_l+0xb7e>
 8007616:	4650      	mov	r0, sl
 8007618:	4659      	mov	r1, fp
 800761a:	e7e7      	b.n	80075ec <_strtod_l+0x84>
 800761c:	2100      	movs	r1, #0
 800761e:	e7ef      	b.n	8007600 <_strtod_l+0x98>
 8007620:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8007622:	b13a      	cbz	r2, 8007634 <_strtod_l+0xcc>
 8007624:	2135      	movs	r1, #53	@ 0x35
 8007626:	a81c      	add	r0, sp, #112	@ 0x70
 8007628:	f7ff ff36 	bl	8007498 <__copybits>
 800762c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800762e:	9805      	ldr	r0, [sp, #20]
 8007630:	f7ff fb10 	bl	8006c54 <_Bfree>
 8007634:	3e01      	subs	r6, #1
 8007636:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8007638:	2e04      	cmp	r6, #4
 800763a:	d806      	bhi.n	800764a <_strtod_l+0xe2>
 800763c:	e8df f006 	tbb	[pc, r6]
 8007640:	201d0314 	.word	0x201d0314
 8007644:	14          	.byte	0x14
 8007645:	00          	.byte	0x00
 8007646:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800764a:	05e1      	lsls	r1, r4, #23
 800764c:	bf48      	it	mi
 800764e:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8007652:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007656:	0d1b      	lsrs	r3, r3, #20
 8007658:	051b      	lsls	r3, r3, #20
 800765a:	2b00      	cmp	r3, #0
 800765c:	d1bd      	bne.n	80075da <_strtod_l+0x72>
 800765e:	f7fe fb1d 	bl	8005c9c <__errno>
 8007662:	2322      	movs	r3, #34	@ 0x22
 8007664:	6003      	str	r3, [r0, #0]
 8007666:	e7b8      	b.n	80075da <_strtod_l+0x72>
 8007668:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800766c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8007670:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8007674:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8007678:	e7e7      	b.n	800764a <_strtod_l+0xe2>
 800767a:	f8df b178 	ldr.w	fp, [pc, #376]	@ 80077f4 <_strtod_l+0x28c>
 800767e:	e7e4      	b.n	800764a <_strtod_l+0xe2>
 8007680:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8007684:	f04f 3aff 	mov.w	sl, #4294967295
 8007688:	e7df      	b.n	800764a <_strtod_l+0xe2>
 800768a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800768c:	1c5a      	adds	r2, r3, #1
 800768e:	9219      	str	r2, [sp, #100]	@ 0x64
 8007690:	785b      	ldrb	r3, [r3, #1]
 8007692:	2b30      	cmp	r3, #48	@ 0x30
 8007694:	d0f9      	beq.n	800768a <_strtod_l+0x122>
 8007696:	2b00      	cmp	r3, #0
 8007698:	d09f      	beq.n	80075da <_strtod_l+0x72>
 800769a:	2301      	movs	r3, #1
 800769c:	9309      	str	r3, [sp, #36]	@ 0x24
 800769e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80076a0:	220a      	movs	r2, #10
 80076a2:	930c      	str	r3, [sp, #48]	@ 0x30
 80076a4:	2300      	movs	r3, #0
 80076a6:	461f      	mov	r7, r3
 80076a8:	9308      	str	r3, [sp, #32]
 80076aa:	930a      	str	r3, [sp, #40]	@ 0x28
 80076ac:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80076ae:	7805      	ldrb	r5, [r0, #0]
 80076b0:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 80076b4:	b2d9      	uxtb	r1, r3
 80076b6:	2909      	cmp	r1, #9
 80076b8:	d928      	bls.n	800770c <_strtod_l+0x1a4>
 80076ba:	2201      	movs	r2, #1
 80076bc:	494e      	ldr	r1, [pc, #312]	@ (80077f8 <_strtod_l+0x290>)
 80076be:	f001 f828 	bl	8008712 <strncmp>
 80076c2:	2800      	cmp	r0, #0
 80076c4:	d032      	beq.n	800772c <_strtod_l+0x1c4>
 80076c6:	2000      	movs	r0, #0
 80076c8:	462a      	mov	r2, r5
 80076ca:	4681      	mov	r9, r0
 80076cc:	463d      	mov	r5, r7
 80076ce:	4603      	mov	r3, r0
 80076d0:	2a65      	cmp	r2, #101	@ 0x65
 80076d2:	d001      	beq.n	80076d8 <_strtod_l+0x170>
 80076d4:	2a45      	cmp	r2, #69	@ 0x45
 80076d6:	d114      	bne.n	8007702 <_strtod_l+0x19a>
 80076d8:	b91d      	cbnz	r5, 80076e2 <_strtod_l+0x17a>
 80076da:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80076dc:	4302      	orrs	r2, r0
 80076de:	d095      	beq.n	800760c <_strtod_l+0xa4>
 80076e0:	2500      	movs	r5, #0
 80076e2:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80076e4:	1c62      	adds	r2, r4, #1
 80076e6:	9219      	str	r2, [sp, #100]	@ 0x64
 80076e8:	7862      	ldrb	r2, [r4, #1]
 80076ea:	2a2b      	cmp	r2, #43	@ 0x2b
 80076ec:	d077      	beq.n	80077de <_strtod_l+0x276>
 80076ee:	2a2d      	cmp	r2, #45	@ 0x2d
 80076f0:	d07b      	beq.n	80077ea <_strtod_l+0x282>
 80076f2:	f04f 0c00 	mov.w	ip, #0
 80076f6:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80076fa:	2909      	cmp	r1, #9
 80076fc:	f240 8082 	bls.w	8007804 <_strtod_l+0x29c>
 8007700:	9419      	str	r4, [sp, #100]	@ 0x64
 8007702:	f04f 0800 	mov.w	r8, #0
 8007706:	e0a2      	b.n	800784e <_strtod_l+0x2e6>
 8007708:	2300      	movs	r3, #0
 800770a:	e7c7      	b.n	800769c <_strtod_l+0x134>
 800770c:	2f08      	cmp	r7, #8
 800770e:	bfd5      	itete	le
 8007710:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8007712:	9908      	ldrgt	r1, [sp, #32]
 8007714:	fb02 3301 	mlale	r3, r2, r1, r3
 8007718:	fb02 3301 	mlagt	r3, r2, r1, r3
 800771c:	f100 0001 	add.w	r0, r0, #1
 8007720:	bfd4      	ite	le
 8007722:	930a      	strle	r3, [sp, #40]	@ 0x28
 8007724:	9308      	strgt	r3, [sp, #32]
 8007726:	3701      	adds	r7, #1
 8007728:	9019      	str	r0, [sp, #100]	@ 0x64
 800772a:	e7bf      	b.n	80076ac <_strtod_l+0x144>
 800772c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800772e:	1c5a      	adds	r2, r3, #1
 8007730:	9219      	str	r2, [sp, #100]	@ 0x64
 8007732:	785a      	ldrb	r2, [r3, #1]
 8007734:	b37f      	cbz	r7, 8007796 <_strtod_l+0x22e>
 8007736:	4681      	mov	r9, r0
 8007738:	463d      	mov	r5, r7
 800773a:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800773e:	2b09      	cmp	r3, #9
 8007740:	d912      	bls.n	8007768 <_strtod_l+0x200>
 8007742:	2301      	movs	r3, #1
 8007744:	e7c4      	b.n	80076d0 <_strtod_l+0x168>
 8007746:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007748:	3001      	adds	r0, #1
 800774a:	1c5a      	adds	r2, r3, #1
 800774c:	9219      	str	r2, [sp, #100]	@ 0x64
 800774e:	785a      	ldrb	r2, [r3, #1]
 8007750:	2a30      	cmp	r2, #48	@ 0x30
 8007752:	d0f8      	beq.n	8007746 <_strtod_l+0x1de>
 8007754:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8007758:	2b08      	cmp	r3, #8
 800775a:	f200 84cb 	bhi.w	80080f4 <_strtod_l+0xb8c>
 800775e:	4681      	mov	r9, r0
 8007760:	2000      	movs	r0, #0
 8007762:	4605      	mov	r5, r0
 8007764:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007766:	930c      	str	r3, [sp, #48]	@ 0x30
 8007768:	3a30      	subs	r2, #48	@ 0x30
 800776a:	f100 0301 	add.w	r3, r0, #1
 800776e:	d02a      	beq.n	80077c6 <_strtod_l+0x25e>
 8007770:	4499      	add	r9, r3
 8007772:	210a      	movs	r1, #10
 8007774:	462b      	mov	r3, r5
 8007776:	eb00 0c05 	add.w	ip, r0, r5
 800777a:	4563      	cmp	r3, ip
 800777c:	d10d      	bne.n	800779a <_strtod_l+0x232>
 800777e:	1c69      	adds	r1, r5, #1
 8007780:	4401      	add	r1, r0
 8007782:	4428      	add	r0, r5
 8007784:	2808      	cmp	r0, #8
 8007786:	dc16      	bgt.n	80077b6 <_strtod_l+0x24e>
 8007788:	230a      	movs	r3, #10
 800778a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800778c:	fb03 2300 	mla	r3, r3, r0, r2
 8007790:	930a      	str	r3, [sp, #40]	@ 0x28
 8007792:	2300      	movs	r3, #0
 8007794:	e018      	b.n	80077c8 <_strtod_l+0x260>
 8007796:	4638      	mov	r0, r7
 8007798:	e7da      	b.n	8007750 <_strtod_l+0x1e8>
 800779a:	2b08      	cmp	r3, #8
 800779c:	f103 0301 	add.w	r3, r3, #1
 80077a0:	dc03      	bgt.n	80077aa <_strtod_l+0x242>
 80077a2:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80077a4:	434e      	muls	r6, r1
 80077a6:	960a      	str	r6, [sp, #40]	@ 0x28
 80077a8:	e7e7      	b.n	800777a <_strtod_l+0x212>
 80077aa:	2b10      	cmp	r3, #16
 80077ac:	bfde      	ittt	le
 80077ae:	9e08      	ldrle	r6, [sp, #32]
 80077b0:	434e      	mulle	r6, r1
 80077b2:	9608      	strle	r6, [sp, #32]
 80077b4:	e7e1      	b.n	800777a <_strtod_l+0x212>
 80077b6:	280f      	cmp	r0, #15
 80077b8:	dceb      	bgt.n	8007792 <_strtod_l+0x22a>
 80077ba:	230a      	movs	r3, #10
 80077bc:	9808      	ldr	r0, [sp, #32]
 80077be:	fb03 2300 	mla	r3, r3, r0, r2
 80077c2:	9308      	str	r3, [sp, #32]
 80077c4:	e7e5      	b.n	8007792 <_strtod_l+0x22a>
 80077c6:	4629      	mov	r1, r5
 80077c8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80077ca:	460d      	mov	r5, r1
 80077cc:	1c50      	adds	r0, r2, #1
 80077ce:	9019      	str	r0, [sp, #100]	@ 0x64
 80077d0:	7852      	ldrb	r2, [r2, #1]
 80077d2:	4618      	mov	r0, r3
 80077d4:	e7b1      	b.n	800773a <_strtod_l+0x1d2>
 80077d6:	f04f 0900 	mov.w	r9, #0
 80077da:	2301      	movs	r3, #1
 80077dc:	e77d      	b.n	80076da <_strtod_l+0x172>
 80077de:	f04f 0c00 	mov.w	ip, #0
 80077e2:	1ca2      	adds	r2, r4, #2
 80077e4:	9219      	str	r2, [sp, #100]	@ 0x64
 80077e6:	78a2      	ldrb	r2, [r4, #2]
 80077e8:	e785      	b.n	80076f6 <_strtod_l+0x18e>
 80077ea:	f04f 0c01 	mov.w	ip, #1
 80077ee:	e7f8      	b.n	80077e2 <_strtod_l+0x27a>
 80077f0:	08009558 	.word	0x08009558
 80077f4:	7ff00000 	.word	0x7ff00000
 80077f8:	08009540 	.word	0x08009540
 80077fc:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80077fe:	1c51      	adds	r1, r2, #1
 8007800:	9119      	str	r1, [sp, #100]	@ 0x64
 8007802:	7852      	ldrb	r2, [r2, #1]
 8007804:	2a30      	cmp	r2, #48	@ 0x30
 8007806:	d0f9      	beq.n	80077fc <_strtod_l+0x294>
 8007808:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800780c:	2908      	cmp	r1, #8
 800780e:	f63f af78 	bhi.w	8007702 <_strtod_l+0x19a>
 8007812:	f04f 080a 	mov.w	r8, #10
 8007816:	3a30      	subs	r2, #48	@ 0x30
 8007818:	920e      	str	r2, [sp, #56]	@ 0x38
 800781a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800781c:	920f      	str	r2, [sp, #60]	@ 0x3c
 800781e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007820:	1c56      	adds	r6, r2, #1
 8007822:	9619      	str	r6, [sp, #100]	@ 0x64
 8007824:	7852      	ldrb	r2, [r2, #1]
 8007826:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800782a:	f1be 0f09 	cmp.w	lr, #9
 800782e:	d939      	bls.n	80078a4 <_strtod_l+0x33c>
 8007830:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8007832:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8007836:	1a76      	subs	r6, r6, r1
 8007838:	2e08      	cmp	r6, #8
 800783a:	dc03      	bgt.n	8007844 <_strtod_l+0x2dc>
 800783c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800783e:	4588      	cmp	r8, r1
 8007840:	bfa8      	it	ge
 8007842:	4688      	movge	r8, r1
 8007844:	f1bc 0f00 	cmp.w	ip, #0
 8007848:	d001      	beq.n	800784e <_strtod_l+0x2e6>
 800784a:	f1c8 0800 	rsb	r8, r8, #0
 800784e:	2d00      	cmp	r5, #0
 8007850:	d14e      	bne.n	80078f0 <_strtod_l+0x388>
 8007852:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007854:	4308      	orrs	r0, r1
 8007856:	f47f aec0 	bne.w	80075da <_strtod_l+0x72>
 800785a:	2b00      	cmp	r3, #0
 800785c:	f47f aed6 	bne.w	800760c <_strtod_l+0xa4>
 8007860:	2a69      	cmp	r2, #105	@ 0x69
 8007862:	d028      	beq.n	80078b6 <_strtod_l+0x34e>
 8007864:	dc25      	bgt.n	80078b2 <_strtod_l+0x34a>
 8007866:	2a49      	cmp	r2, #73	@ 0x49
 8007868:	d025      	beq.n	80078b6 <_strtod_l+0x34e>
 800786a:	2a4e      	cmp	r2, #78	@ 0x4e
 800786c:	f47f aece 	bne.w	800760c <_strtod_l+0xa4>
 8007870:	499a      	ldr	r1, [pc, #616]	@ (8007adc <_strtod_l+0x574>)
 8007872:	a819      	add	r0, sp, #100	@ 0x64
 8007874:	f001 fa54 	bl	8008d20 <__match>
 8007878:	2800      	cmp	r0, #0
 800787a:	f43f aec7 	beq.w	800760c <_strtod_l+0xa4>
 800787e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007880:	781b      	ldrb	r3, [r3, #0]
 8007882:	2b28      	cmp	r3, #40	@ 0x28
 8007884:	d12e      	bne.n	80078e4 <_strtod_l+0x37c>
 8007886:	4996      	ldr	r1, [pc, #600]	@ (8007ae0 <_strtod_l+0x578>)
 8007888:	aa1c      	add	r2, sp, #112	@ 0x70
 800788a:	a819      	add	r0, sp, #100	@ 0x64
 800788c:	f001 fa5c 	bl	8008d48 <__hexnan>
 8007890:	2805      	cmp	r0, #5
 8007892:	d127      	bne.n	80078e4 <_strtod_l+0x37c>
 8007894:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8007896:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800789a:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800789e:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80078a2:	e69a      	b.n	80075da <_strtod_l+0x72>
 80078a4:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80078a6:	fb08 2101 	mla	r1, r8, r1, r2
 80078aa:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80078ae:	920e      	str	r2, [sp, #56]	@ 0x38
 80078b0:	e7b5      	b.n	800781e <_strtod_l+0x2b6>
 80078b2:	2a6e      	cmp	r2, #110	@ 0x6e
 80078b4:	e7da      	b.n	800786c <_strtod_l+0x304>
 80078b6:	498b      	ldr	r1, [pc, #556]	@ (8007ae4 <_strtod_l+0x57c>)
 80078b8:	a819      	add	r0, sp, #100	@ 0x64
 80078ba:	f001 fa31 	bl	8008d20 <__match>
 80078be:	2800      	cmp	r0, #0
 80078c0:	f43f aea4 	beq.w	800760c <_strtod_l+0xa4>
 80078c4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80078c6:	4988      	ldr	r1, [pc, #544]	@ (8007ae8 <_strtod_l+0x580>)
 80078c8:	3b01      	subs	r3, #1
 80078ca:	a819      	add	r0, sp, #100	@ 0x64
 80078cc:	9319      	str	r3, [sp, #100]	@ 0x64
 80078ce:	f001 fa27 	bl	8008d20 <__match>
 80078d2:	b910      	cbnz	r0, 80078da <_strtod_l+0x372>
 80078d4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80078d6:	3301      	adds	r3, #1
 80078d8:	9319      	str	r3, [sp, #100]	@ 0x64
 80078da:	f04f 0a00 	mov.w	sl, #0
 80078de:	f8df b20c 	ldr.w	fp, [pc, #524]	@ 8007aec <_strtod_l+0x584>
 80078e2:	e67a      	b.n	80075da <_strtod_l+0x72>
 80078e4:	4882      	ldr	r0, [pc, #520]	@ (8007af0 <_strtod_l+0x588>)
 80078e6:	f000 ff59 	bl	800879c <nan>
 80078ea:	4682      	mov	sl, r0
 80078ec:	468b      	mov	fp, r1
 80078ee:	e674      	b.n	80075da <_strtod_l+0x72>
 80078f0:	eba8 0309 	sub.w	r3, r8, r9
 80078f4:	2f00      	cmp	r7, #0
 80078f6:	bf08      	it	eq
 80078f8:	462f      	moveq	r7, r5
 80078fa:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80078fc:	2d10      	cmp	r5, #16
 80078fe:	462c      	mov	r4, r5
 8007900:	9309      	str	r3, [sp, #36]	@ 0x24
 8007902:	bfa8      	it	ge
 8007904:	2410      	movge	r4, #16
 8007906:	f7f8 fd6d 	bl	80003e4 <__aeabi_ui2d>
 800790a:	2d09      	cmp	r5, #9
 800790c:	4682      	mov	sl, r0
 800790e:	468b      	mov	fp, r1
 8007910:	dc11      	bgt.n	8007936 <_strtod_l+0x3ce>
 8007912:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007914:	2b00      	cmp	r3, #0
 8007916:	f43f ae60 	beq.w	80075da <_strtod_l+0x72>
 800791a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800791c:	dd76      	ble.n	8007a0c <_strtod_l+0x4a4>
 800791e:	2b16      	cmp	r3, #22
 8007920:	dc5d      	bgt.n	80079de <_strtod_l+0x476>
 8007922:	4974      	ldr	r1, [pc, #464]	@ (8007af4 <_strtod_l+0x58c>)
 8007924:	4652      	mov	r2, sl
 8007926:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800792a:	465b      	mov	r3, fp
 800792c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007930:	f7f8 fdd2 	bl	80004d8 <__aeabi_dmul>
 8007934:	e7d9      	b.n	80078ea <_strtod_l+0x382>
 8007936:	4b6f      	ldr	r3, [pc, #444]	@ (8007af4 <_strtod_l+0x58c>)
 8007938:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800793c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8007940:	f7f8 fdca 	bl	80004d8 <__aeabi_dmul>
 8007944:	4682      	mov	sl, r0
 8007946:	9808      	ldr	r0, [sp, #32]
 8007948:	468b      	mov	fp, r1
 800794a:	f7f8 fd4b 	bl	80003e4 <__aeabi_ui2d>
 800794e:	4602      	mov	r2, r0
 8007950:	460b      	mov	r3, r1
 8007952:	4650      	mov	r0, sl
 8007954:	4659      	mov	r1, fp
 8007956:	f7f8 fc09 	bl	800016c <__adddf3>
 800795a:	2d0f      	cmp	r5, #15
 800795c:	4682      	mov	sl, r0
 800795e:	468b      	mov	fp, r1
 8007960:	ddd7      	ble.n	8007912 <_strtod_l+0x3aa>
 8007962:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007964:	1b2c      	subs	r4, r5, r4
 8007966:	441c      	add	r4, r3
 8007968:	2c00      	cmp	r4, #0
 800796a:	f340 8096 	ble.w	8007a9a <_strtod_l+0x532>
 800796e:	f014 030f 	ands.w	r3, r4, #15
 8007972:	d00a      	beq.n	800798a <_strtod_l+0x422>
 8007974:	495f      	ldr	r1, [pc, #380]	@ (8007af4 <_strtod_l+0x58c>)
 8007976:	4652      	mov	r2, sl
 8007978:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800797c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007980:	465b      	mov	r3, fp
 8007982:	f7f8 fda9 	bl	80004d8 <__aeabi_dmul>
 8007986:	4682      	mov	sl, r0
 8007988:	468b      	mov	fp, r1
 800798a:	f034 040f 	bics.w	r4, r4, #15
 800798e:	d073      	beq.n	8007a78 <_strtod_l+0x510>
 8007990:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8007994:	dd48      	ble.n	8007a28 <_strtod_l+0x4c0>
 8007996:	2400      	movs	r4, #0
 8007998:	46a0      	mov	r8, r4
 800799a:	46a1      	mov	r9, r4
 800799c:	940a      	str	r4, [sp, #40]	@ 0x28
 800799e:	2322      	movs	r3, #34	@ 0x22
 80079a0:	f04f 0a00 	mov.w	sl, #0
 80079a4:	9a05      	ldr	r2, [sp, #20]
 80079a6:	f8df b144 	ldr.w	fp, [pc, #324]	@ 8007aec <_strtod_l+0x584>
 80079aa:	6013      	str	r3, [r2, #0]
 80079ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	f43f ae13 	beq.w	80075da <_strtod_l+0x72>
 80079b4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80079b6:	9805      	ldr	r0, [sp, #20]
 80079b8:	f7ff f94c 	bl	8006c54 <_Bfree>
 80079bc:	4649      	mov	r1, r9
 80079be:	9805      	ldr	r0, [sp, #20]
 80079c0:	f7ff f948 	bl	8006c54 <_Bfree>
 80079c4:	4641      	mov	r1, r8
 80079c6:	9805      	ldr	r0, [sp, #20]
 80079c8:	f7ff f944 	bl	8006c54 <_Bfree>
 80079cc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80079ce:	9805      	ldr	r0, [sp, #20]
 80079d0:	f7ff f940 	bl	8006c54 <_Bfree>
 80079d4:	4621      	mov	r1, r4
 80079d6:	9805      	ldr	r0, [sp, #20]
 80079d8:	f7ff f93c 	bl	8006c54 <_Bfree>
 80079dc:	e5fd      	b.n	80075da <_strtod_l+0x72>
 80079de:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80079e0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 80079e4:	4293      	cmp	r3, r2
 80079e6:	dbbc      	blt.n	8007962 <_strtod_l+0x3fa>
 80079e8:	4c42      	ldr	r4, [pc, #264]	@ (8007af4 <_strtod_l+0x58c>)
 80079ea:	f1c5 050f 	rsb	r5, r5, #15
 80079ee:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80079f2:	4652      	mov	r2, sl
 80079f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80079f8:	465b      	mov	r3, fp
 80079fa:	f7f8 fd6d 	bl	80004d8 <__aeabi_dmul>
 80079fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a00:	1b5d      	subs	r5, r3, r5
 8007a02:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8007a06:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007a0a:	e791      	b.n	8007930 <_strtod_l+0x3c8>
 8007a0c:	3316      	adds	r3, #22
 8007a0e:	dba8      	blt.n	8007962 <_strtod_l+0x3fa>
 8007a10:	4b38      	ldr	r3, [pc, #224]	@ (8007af4 <_strtod_l+0x58c>)
 8007a12:	eba9 0808 	sub.w	r8, r9, r8
 8007a16:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8007a1a:	4650      	mov	r0, sl
 8007a1c:	e9d8 2300 	ldrd	r2, r3, [r8]
 8007a20:	4659      	mov	r1, fp
 8007a22:	f7f8 fe83 	bl	800072c <__aeabi_ddiv>
 8007a26:	e760      	b.n	80078ea <_strtod_l+0x382>
 8007a28:	4b33      	ldr	r3, [pc, #204]	@ (8007af8 <_strtod_l+0x590>)
 8007a2a:	4650      	mov	r0, sl
 8007a2c:	9308      	str	r3, [sp, #32]
 8007a2e:	2300      	movs	r3, #0
 8007a30:	4659      	mov	r1, fp
 8007a32:	461e      	mov	r6, r3
 8007a34:	1124      	asrs	r4, r4, #4
 8007a36:	2c01      	cmp	r4, #1
 8007a38:	dc21      	bgt.n	8007a7e <_strtod_l+0x516>
 8007a3a:	b10b      	cbz	r3, 8007a40 <_strtod_l+0x4d8>
 8007a3c:	4682      	mov	sl, r0
 8007a3e:	468b      	mov	fp, r1
 8007a40:	492d      	ldr	r1, [pc, #180]	@ (8007af8 <_strtod_l+0x590>)
 8007a42:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8007a46:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8007a4a:	4652      	mov	r2, sl
 8007a4c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007a50:	465b      	mov	r3, fp
 8007a52:	f7f8 fd41 	bl	80004d8 <__aeabi_dmul>
 8007a56:	4b25      	ldr	r3, [pc, #148]	@ (8007aec <_strtod_l+0x584>)
 8007a58:	460a      	mov	r2, r1
 8007a5a:	400b      	ands	r3, r1
 8007a5c:	4927      	ldr	r1, [pc, #156]	@ (8007afc <_strtod_l+0x594>)
 8007a5e:	4682      	mov	sl, r0
 8007a60:	428b      	cmp	r3, r1
 8007a62:	d898      	bhi.n	8007996 <_strtod_l+0x42e>
 8007a64:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8007a68:	428b      	cmp	r3, r1
 8007a6a:	bf86      	itte	hi
 8007a6c:	f04f 3aff 	movhi.w	sl, #4294967295
 8007a70:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 8007b00 <_strtod_l+0x598>
 8007a74:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8007a78:	2300      	movs	r3, #0
 8007a7a:	9308      	str	r3, [sp, #32]
 8007a7c:	e07a      	b.n	8007b74 <_strtod_l+0x60c>
 8007a7e:	07e2      	lsls	r2, r4, #31
 8007a80:	d505      	bpl.n	8007a8e <_strtod_l+0x526>
 8007a82:	9b08      	ldr	r3, [sp, #32]
 8007a84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a88:	f7f8 fd26 	bl	80004d8 <__aeabi_dmul>
 8007a8c:	2301      	movs	r3, #1
 8007a8e:	9a08      	ldr	r2, [sp, #32]
 8007a90:	3601      	adds	r6, #1
 8007a92:	3208      	adds	r2, #8
 8007a94:	1064      	asrs	r4, r4, #1
 8007a96:	9208      	str	r2, [sp, #32]
 8007a98:	e7cd      	b.n	8007a36 <_strtod_l+0x4ce>
 8007a9a:	d0ed      	beq.n	8007a78 <_strtod_l+0x510>
 8007a9c:	4264      	negs	r4, r4
 8007a9e:	f014 020f 	ands.w	r2, r4, #15
 8007aa2:	d00a      	beq.n	8007aba <_strtod_l+0x552>
 8007aa4:	4b13      	ldr	r3, [pc, #76]	@ (8007af4 <_strtod_l+0x58c>)
 8007aa6:	4650      	mov	r0, sl
 8007aa8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007aac:	4659      	mov	r1, fp
 8007aae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ab2:	f7f8 fe3b 	bl	800072c <__aeabi_ddiv>
 8007ab6:	4682      	mov	sl, r0
 8007ab8:	468b      	mov	fp, r1
 8007aba:	1124      	asrs	r4, r4, #4
 8007abc:	d0dc      	beq.n	8007a78 <_strtod_l+0x510>
 8007abe:	2c1f      	cmp	r4, #31
 8007ac0:	dd20      	ble.n	8007b04 <_strtod_l+0x59c>
 8007ac2:	2400      	movs	r4, #0
 8007ac4:	46a0      	mov	r8, r4
 8007ac6:	46a1      	mov	r9, r4
 8007ac8:	940a      	str	r4, [sp, #40]	@ 0x28
 8007aca:	2322      	movs	r3, #34	@ 0x22
 8007acc:	9a05      	ldr	r2, [sp, #20]
 8007ace:	f04f 0a00 	mov.w	sl, #0
 8007ad2:	f04f 0b00 	mov.w	fp, #0
 8007ad6:	6013      	str	r3, [r2, #0]
 8007ad8:	e768      	b.n	80079ac <_strtod_l+0x444>
 8007ada:	bf00      	nop
 8007adc:	0800932f 	.word	0x0800932f
 8007ae0:	08009544 	.word	0x08009544
 8007ae4:	08009327 	.word	0x08009327
 8007ae8:	0800935e 	.word	0x0800935e
 8007aec:	7ff00000 	.word	0x7ff00000
 8007af0:	080096ed 	.word	0x080096ed
 8007af4:	08009478 	.word	0x08009478
 8007af8:	08009450 	.word	0x08009450
 8007afc:	7ca00000 	.word	0x7ca00000
 8007b00:	7fefffff 	.word	0x7fefffff
 8007b04:	f014 0310 	ands.w	r3, r4, #16
 8007b08:	bf18      	it	ne
 8007b0a:	236a      	movne	r3, #106	@ 0x6a
 8007b0c:	4650      	mov	r0, sl
 8007b0e:	9308      	str	r3, [sp, #32]
 8007b10:	4659      	mov	r1, fp
 8007b12:	2300      	movs	r3, #0
 8007b14:	4ea9      	ldr	r6, [pc, #676]	@ (8007dbc <_strtod_l+0x854>)
 8007b16:	07e2      	lsls	r2, r4, #31
 8007b18:	d504      	bpl.n	8007b24 <_strtod_l+0x5bc>
 8007b1a:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007b1e:	f7f8 fcdb 	bl	80004d8 <__aeabi_dmul>
 8007b22:	2301      	movs	r3, #1
 8007b24:	1064      	asrs	r4, r4, #1
 8007b26:	f106 0608 	add.w	r6, r6, #8
 8007b2a:	d1f4      	bne.n	8007b16 <_strtod_l+0x5ae>
 8007b2c:	b10b      	cbz	r3, 8007b32 <_strtod_l+0x5ca>
 8007b2e:	4682      	mov	sl, r0
 8007b30:	468b      	mov	fp, r1
 8007b32:	9b08      	ldr	r3, [sp, #32]
 8007b34:	b1b3      	cbz	r3, 8007b64 <_strtod_l+0x5fc>
 8007b36:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8007b3a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	4659      	mov	r1, fp
 8007b42:	dd0f      	ble.n	8007b64 <_strtod_l+0x5fc>
 8007b44:	2b1f      	cmp	r3, #31
 8007b46:	dd57      	ble.n	8007bf8 <_strtod_l+0x690>
 8007b48:	2b34      	cmp	r3, #52	@ 0x34
 8007b4a:	bfd8      	it	le
 8007b4c:	f04f 33ff 	movle.w	r3, #4294967295
 8007b50:	f04f 0a00 	mov.w	sl, #0
 8007b54:	bfcf      	iteee	gt
 8007b56:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8007b5a:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8007b5e:	4093      	lslle	r3, r2
 8007b60:	ea03 0b01 	andle.w	fp, r3, r1
 8007b64:	2200      	movs	r2, #0
 8007b66:	2300      	movs	r3, #0
 8007b68:	4650      	mov	r0, sl
 8007b6a:	4659      	mov	r1, fp
 8007b6c:	f7f8 ff1c 	bl	80009a8 <__aeabi_dcmpeq>
 8007b70:	2800      	cmp	r0, #0
 8007b72:	d1a6      	bne.n	8007ac2 <_strtod_l+0x55a>
 8007b74:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007b76:	463a      	mov	r2, r7
 8007b78:	9300      	str	r3, [sp, #0]
 8007b7a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8007b7c:	462b      	mov	r3, r5
 8007b7e:	9805      	ldr	r0, [sp, #20]
 8007b80:	f7ff f8d0 	bl	8006d24 <__s2b>
 8007b84:	900a      	str	r0, [sp, #40]	@ 0x28
 8007b86:	2800      	cmp	r0, #0
 8007b88:	f43f af05 	beq.w	8007996 <_strtod_l+0x42e>
 8007b8c:	2400      	movs	r4, #0
 8007b8e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007b90:	eba9 0308 	sub.w	r3, r9, r8
 8007b94:	2a00      	cmp	r2, #0
 8007b96:	bfa8      	it	ge
 8007b98:	2300      	movge	r3, #0
 8007b9a:	46a0      	mov	r8, r4
 8007b9c:	9312      	str	r3, [sp, #72]	@ 0x48
 8007b9e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8007ba2:	9316      	str	r3, [sp, #88]	@ 0x58
 8007ba4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007ba6:	9805      	ldr	r0, [sp, #20]
 8007ba8:	6859      	ldr	r1, [r3, #4]
 8007baa:	f7ff f813 	bl	8006bd4 <_Balloc>
 8007bae:	4681      	mov	r9, r0
 8007bb0:	2800      	cmp	r0, #0
 8007bb2:	f43f aef4 	beq.w	800799e <_strtod_l+0x436>
 8007bb6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007bb8:	300c      	adds	r0, #12
 8007bba:	691a      	ldr	r2, [r3, #16]
 8007bbc:	f103 010c 	add.w	r1, r3, #12
 8007bc0:	3202      	adds	r2, #2
 8007bc2:	0092      	lsls	r2, r2, #2
 8007bc4:	f7fe f8a5 	bl	8005d12 <memcpy>
 8007bc8:	ab1c      	add	r3, sp, #112	@ 0x70
 8007bca:	9301      	str	r3, [sp, #4]
 8007bcc:	ab1b      	add	r3, sp, #108	@ 0x6c
 8007bce:	9300      	str	r3, [sp, #0]
 8007bd0:	4652      	mov	r2, sl
 8007bd2:	465b      	mov	r3, fp
 8007bd4:	9805      	ldr	r0, [sp, #20]
 8007bd6:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8007bda:	f7ff fbd5 	bl	8007388 <__d2b>
 8007bde:	901a      	str	r0, [sp, #104]	@ 0x68
 8007be0:	2800      	cmp	r0, #0
 8007be2:	f43f aedc 	beq.w	800799e <_strtod_l+0x436>
 8007be6:	2101      	movs	r1, #1
 8007be8:	9805      	ldr	r0, [sp, #20]
 8007bea:	f7ff f931 	bl	8006e50 <__i2b>
 8007bee:	4680      	mov	r8, r0
 8007bf0:	b948      	cbnz	r0, 8007c06 <_strtod_l+0x69e>
 8007bf2:	f04f 0800 	mov.w	r8, #0
 8007bf6:	e6d2      	b.n	800799e <_strtod_l+0x436>
 8007bf8:	f04f 32ff 	mov.w	r2, #4294967295
 8007bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8007c00:	ea03 0a0a 	and.w	sl, r3, sl
 8007c04:	e7ae      	b.n	8007b64 <_strtod_l+0x5fc>
 8007c06:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8007c08:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8007c0a:	2d00      	cmp	r5, #0
 8007c0c:	bfab      	itete	ge
 8007c0e:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8007c10:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8007c12:	18ef      	addge	r7, r5, r3
 8007c14:	1b5e      	sublt	r6, r3, r5
 8007c16:	9b08      	ldr	r3, [sp, #32]
 8007c18:	bfa8      	it	ge
 8007c1a:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8007c1c:	eba5 0503 	sub.w	r5, r5, r3
 8007c20:	4415      	add	r5, r2
 8007c22:	4b67      	ldr	r3, [pc, #412]	@ (8007dc0 <_strtod_l+0x858>)
 8007c24:	f105 35ff 	add.w	r5, r5, #4294967295
 8007c28:	bfb8      	it	lt
 8007c2a:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8007c2c:	429d      	cmp	r5, r3
 8007c2e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8007c32:	da50      	bge.n	8007cd6 <_strtod_l+0x76e>
 8007c34:	1b5b      	subs	r3, r3, r5
 8007c36:	2b1f      	cmp	r3, #31
 8007c38:	f04f 0101 	mov.w	r1, #1
 8007c3c:	eba2 0203 	sub.w	r2, r2, r3
 8007c40:	dc3d      	bgt.n	8007cbe <_strtod_l+0x756>
 8007c42:	fa01 f303 	lsl.w	r3, r1, r3
 8007c46:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007c48:	2300      	movs	r3, #0
 8007c4a:	9310      	str	r3, [sp, #64]	@ 0x40
 8007c4c:	18bd      	adds	r5, r7, r2
 8007c4e:	9b08      	ldr	r3, [sp, #32]
 8007c50:	42af      	cmp	r7, r5
 8007c52:	4416      	add	r6, r2
 8007c54:	441e      	add	r6, r3
 8007c56:	463b      	mov	r3, r7
 8007c58:	bfa8      	it	ge
 8007c5a:	462b      	movge	r3, r5
 8007c5c:	42b3      	cmp	r3, r6
 8007c5e:	bfa8      	it	ge
 8007c60:	4633      	movge	r3, r6
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	bfc2      	ittt	gt
 8007c66:	1aed      	subgt	r5, r5, r3
 8007c68:	1af6      	subgt	r6, r6, r3
 8007c6a:	1aff      	subgt	r7, r7, r3
 8007c6c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	dd16      	ble.n	8007ca0 <_strtod_l+0x738>
 8007c72:	4641      	mov	r1, r8
 8007c74:	461a      	mov	r2, r3
 8007c76:	9805      	ldr	r0, [sp, #20]
 8007c78:	f7ff f9a8 	bl	8006fcc <__pow5mult>
 8007c7c:	4680      	mov	r8, r0
 8007c7e:	2800      	cmp	r0, #0
 8007c80:	d0b7      	beq.n	8007bf2 <_strtod_l+0x68a>
 8007c82:	4601      	mov	r1, r0
 8007c84:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8007c86:	9805      	ldr	r0, [sp, #20]
 8007c88:	f7ff f8f8 	bl	8006e7c <__multiply>
 8007c8c:	900e      	str	r0, [sp, #56]	@ 0x38
 8007c8e:	2800      	cmp	r0, #0
 8007c90:	f43f ae85 	beq.w	800799e <_strtod_l+0x436>
 8007c94:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007c96:	9805      	ldr	r0, [sp, #20]
 8007c98:	f7fe ffdc 	bl	8006c54 <_Bfree>
 8007c9c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007c9e:	931a      	str	r3, [sp, #104]	@ 0x68
 8007ca0:	2d00      	cmp	r5, #0
 8007ca2:	dc1d      	bgt.n	8007ce0 <_strtod_l+0x778>
 8007ca4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	dd23      	ble.n	8007cf2 <_strtod_l+0x78a>
 8007caa:	4649      	mov	r1, r9
 8007cac:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8007cae:	9805      	ldr	r0, [sp, #20]
 8007cb0:	f7ff f98c 	bl	8006fcc <__pow5mult>
 8007cb4:	4681      	mov	r9, r0
 8007cb6:	b9e0      	cbnz	r0, 8007cf2 <_strtod_l+0x78a>
 8007cb8:	f04f 0900 	mov.w	r9, #0
 8007cbc:	e66f      	b.n	800799e <_strtod_l+0x436>
 8007cbe:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8007cc2:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8007cc6:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8007cca:	35e2      	adds	r5, #226	@ 0xe2
 8007ccc:	fa01 f305 	lsl.w	r3, r1, r5
 8007cd0:	9310      	str	r3, [sp, #64]	@ 0x40
 8007cd2:	9113      	str	r1, [sp, #76]	@ 0x4c
 8007cd4:	e7ba      	b.n	8007c4c <_strtod_l+0x6e4>
 8007cd6:	2300      	movs	r3, #0
 8007cd8:	9310      	str	r3, [sp, #64]	@ 0x40
 8007cda:	2301      	movs	r3, #1
 8007cdc:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007cde:	e7b5      	b.n	8007c4c <_strtod_l+0x6e4>
 8007ce0:	462a      	mov	r2, r5
 8007ce2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007ce4:	9805      	ldr	r0, [sp, #20]
 8007ce6:	f7ff f9cb 	bl	8007080 <__lshift>
 8007cea:	901a      	str	r0, [sp, #104]	@ 0x68
 8007cec:	2800      	cmp	r0, #0
 8007cee:	d1d9      	bne.n	8007ca4 <_strtod_l+0x73c>
 8007cf0:	e655      	b.n	800799e <_strtod_l+0x436>
 8007cf2:	2e00      	cmp	r6, #0
 8007cf4:	dd07      	ble.n	8007d06 <_strtod_l+0x79e>
 8007cf6:	4649      	mov	r1, r9
 8007cf8:	4632      	mov	r2, r6
 8007cfa:	9805      	ldr	r0, [sp, #20]
 8007cfc:	f7ff f9c0 	bl	8007080 <__lshift>
 8007d00:	4681      	mov	r9, r0
 8007d02:	2800      	cmp	r0, #0
 8007d04:	d0d8      	beq.n	8007cb8 <_strtod_l+0x750>
 8007d06:	2f00      	cmp	r7, #0
 8007d08:	dd08      	ble.n	8007d1c <_strtod_l+0x7b4>
 8007d0a:	4641      	mov	r1, r8
 8007d0c:	463a      	mov	r2, r7
 8007d0e:	9805      	ldr	r0, [sp, #20]
 8007d10:	f7ff f9b6 	bl	8007080 <__lshift>
 8007d14:	4680      	mov	r8, r0
 8007d16:	2800      	cmp	r0, #0
 8007d18:	f43f ae41 	beq.w	800799e <_strtod_l+0x436>
 8007d1c:	464a      	mov	r2, r9
 8007d1e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007d20:	9805      	ldr	r0, [sp, #20]
 8007d22:	f7ff fa35 	bl	8007190 <__mdiff>
 8007d26:	4604      	mov	r4, r0
 8007d28:	2800      	cmp	r0, #0
 8007d2a:	f43f ae38 	beq.w	800799e <_strtod_l+0x436>
 8007d2e:	68c3      	ldr	r3, [r0, #12]
 8007d30:	4641      	mov	r1, r8
 8007d32:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007d34:	2300      	movs	r3, #0
 8007d36:	60c3      	str	r3, [r0, #12]
 8007d38:	f7ff fa0e 	bl	8007158 <__mcmp>
 8007d3c:	2800      	cmp	r0, #0
 8007d3e:	da45      	bge.n	8007dcc <_strtod_l+0x864>
 8007d40:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007d42:	ea53 030a 	orrs.w	r3, r3, sl
 8007d46:	d16b      	bne.n	8007e20 <_strtod_l+0x8b8>
 8007d48:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d167      	bne.n	8007e20 <_strtod_l+0x8b8>
 8007d50:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007d54:	0d1b      	lsrs	r3, r3, #20
 8007d56:	051b      	lsls	r3, r3, #20
 8007d58:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8007d5c:	d960      	bls.n	8007e20 <_strtod_l+0x8b8>
 8007d5e:	6963      	ldr	r3, [r4, #20]
 8007d60:	b913      	cbnz	r3, 8007d68 <_strtod_l+0x800>
 8007d62:	6923      	ldr	r3, [r4, #16]
 8007d64:	2b01      	cmp	r3, #1
 8007d66:	dd5b      	ble.n	8007e20 <_strtod_l+0x8b8>
 8007d68:	4621      	mov	r1, r4
 8007d6a:	2201      	movs	r2, #1
 8007d6c:	9805      	ldr	r0, [sp, #20]
 8007d6e:	f7ff f987 	bl	8007080 <__lshift>
 8007d72:	4641      	mov	r1, r8
 8007d74:	4604      	mov	r4, r0
 8007d76:	f7ff f9ef 	bl	8007158 <__mcmp>
 8007d7a:	2800      	cmp	r0, #0
 8007d7c:	dd50      	ble.n	8007e20 <_strtod_l+0x8b8>
 8007d7e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007d82:	9a08      	ldr	r2, [sp, #32]
 8007d84:	0d1b      	lsrs	r3, r3, #20
 8007d86:	051b      	lsls	r3, r3, #20
 8007d88:	2a00      	cmp	r2, #0
 8007d8a:	d06a      	beq.n	8007e62 <_strtod_l+0x8fa>
 8007d8c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8007d90:	d867      	bhi.n	8007e62 <_strtod_l+0x8fa>
 8007d92:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8007d96:	f67f ae98 	bls.w	8007aca <_strtod_l+0x562>
 8007d9a:	4650      	mov	r0, sl
 8007d9c:	4659      	mov	r1, fp
 8007d9e:	4b09      	ldr	r3, [pc, #36]	@ (8007dc4 <_strtod_l+0x85c>)
 8007da0:	2200      	movs	r2, #0
 8007da2:	f7f8 fb99 	bl	80004d8 <__aeabi_dmul>
 8007da6:	4b08      	ldr	r3, [pc, #32]	@ (8007dc8 <_strtod_l+0x860>)
 8007da8:	4682      	mov	sl, r0
 8007daa:	400b      	ands	r3, r1
 8007dac:	468b      	mov	fp, r1
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	f47f ae00 	bne.w	80079b4 <_strtod_l+0x44c>
 8007db4:	2322      	movs	r3, #34	@ 0x22
 8007db6:	9a05      	ldr	r2, [sp, #20]
 8007db8:	6013      	str	r3, [r2, #0]
 8007dba:	e5fb      	b.n	80079b4 <_strtod_l+0x44c>
 8007dbc:	08009570 	.word	0x08009570
 8007dc0:	fffffc02 	.word	0xfffffc02
 8007dc4:	39500000 	.word	0x39500000
 8007dc8:	7ff00000 	.word	0x7ff00000
 8007dcc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8007dd0:	d165      	bne.n	8007e9e <_strtod_l+0x936>
 8007dd2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8007dd4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007dd8:	b35a      	cbz	r2, 8007e32 <_strtod_l+0x8ca>
 8007dda:	4a99      	ldr	r2, [pc, #612]	@ (8008040 <_strtod_l+0xad8>)
 8007ddc:	4293      	cmp	r3, r2
 8007dde:	d12b      	bne.n	8007e38 <_strtod_l+0x8d0>
 8007de0:	9b08      	ldr	r3, [sp, #32]
 8007de2:	4651      	mov	r1, sl
 8007de4:	b303      	cbz	r3, 8007e28 <_strtod_l+0x8c0>
 8007de6:	465a      	mov	r2, fp
 8007de8:	4b96      	ldr	r3, [pc, #600]	@ (8008044 <_strtod_l+0xadc>)
 8007dea:	4013      	ands	r3, r2
 8007dec:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8007df0:	f04f 32ff 	mov.w	r2, #4294967295
 8007df4:	d81b      	bhi.n	8007e2e <_strtod_l+0x8c6>
 8007df6:	0d1b      	lsrs	r3, r3, #20
 8007df8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8007dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8007e00:	4299      	cmp	r1, r3
 8007e02:	d119      	bne.n	8007e38 <_strtod_l+0x8d0>
 8007e04:	4b90      	ldr	r3, [pc, #576]	@ (8008048 <_strtod_l+0xae0>)
 8007e06:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007e08:	429a      	cmp	r2, r3
 8007e0a:	d102      	bne.n	8007e12 <_strtod_l+0x8aa>
 8007e0c:	3101      	adds	r1, #1
 8007e0e:	f43f adc6 	beq.w	800799e <_strtod_l+0x436>
 8007e12:	f04f 0a00 	mov.w	sl, #0
 8007e16:	4b8b      	ldr	r3, [pc, #556]	@ (8008044 <_strtod_l+0xadc>)
 8007e18:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007e1a:	401a      	ands	r2, r3
 8007e1c:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8007e20:	9b08      	ldr	r3, [sp, #32]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d1b9      	bne.n	8007d9a <_strtod_l+0x832>
 8007e26:	e5c5      	b.n	80079b4 <_strtod_l+0x44c>
 8007e28:	f04f 33ff 	mov.w	r3, #4294967295
 8007e2c:	e7e8      	b.n	8007e00 <_strtod_l+0x898>
 8007e2e:	4613      	mov	r3, r2
 8007e30:	e7e6      	b.n	8007e00 <_strtod_l+0x898>
 8007e32:	ea53 030a 	orrs.w	r3, r3, sl
 8007e36:	d0a2      	beq.n	8007d7e <_strtod_l+0x816>
 8007e38:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007e3a:	b1db      	cbz	r3, 8007e74 <_strtod_l+0x90c>
 8007e3c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007e3e:	4213      	tst	r3, r2
 8007e40:	d0ee      	beq.n	8007e20 <_strtod_l+0x8b8>
 8007e42:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007e44:	4650      	mov	r0, sl
 8007e46:	4659      	mov	r1, fp
 8007e48:	9a08      	ldr	r2, [sp, #32]
 8007e4a:	b1bb      	cbz	r3, 8007e7c <_strtod_l+0x914>
 8007e4c:	f7ff fb68 	bl	8007520 <sulp>
 8007e50:	4602      	mov	r2, r0
 8007e52:	460b      	mov	r3, r1
 8007e54:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007e58:	f7f8 f988 	bl	800016c <__adddf3>
 8007e5c:	4682      	mov	sl, r0
 8007e5e:	468b      	mov	fp, r1
 8007e60:	e7de      	b.n	8007e20 <_strtod_l+0x8b8>
 8007e62:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8007e66:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8007e6a:	f04f 3aff 	mov.w	sl, #4294967295
 8007e6e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8007e72:	e7d5      	b.n	8007e20 <_strtod_l+0x8b8>
 8007e74:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007e76:	ea13 0f0a 	tst.w	r3, sl
 8007e7a:	e7e1      	b.n	8007e40 <_strtod_l+0x8d8>
 8007e7c:	f7ff fb50 	bl	8007520 <sulp>
 8007e80:	4602      	mov	r2, r0
 8007e82:	460b      	mov	r3, r1
 8007e84:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007e88:	f7f8 f96e 	bl	8000168 <__aeabi_dsub>
 8007e8c:	2200      	movs	r2, #0
 8007e8e:	2300      	movs	r3, #0
 8007e90:	4682      	mov	sl, r0
 8007e92:	468b      	mov	fp, r1
 8007e94:	f7f8 fd88 	bl	80009a8 <__aeabi_dcmpeq>
 8007e98:	2800      	cmp	r0, #0
 8007e9a:	d0c1      	beq.n	8007e20 <_strtod_l+0x8b8>
 8007e9c:	e615      	b.n	8007aca <_strtod_l+0x562>
 8007e9e:	4641      	mov	r1, r8
 8007ea0:	4620      	mov	r0, r4
 8007ea2:	f7ff fac9 	bl	8007438 <__ratio>
 8007ea6:	2200      	movs	r2, #0
 8007ea8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8007eac:	4606      	mov	r6, r0
 8007eae:	460f      	mov	r7, r1
 8007eb0:	f7f8 fd8e 	bl	80009d0 <__aeabi_dcmple>
 8007eb4:	2800      	cmp	r0, #0
 8007eb6:	d06d      	beq.n	8007f94 <_strtod_l+0xa2c>
 8007eb8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d178      	bne.n	8007fb0 <_strtod_l+0xa48>
 8007ebe:	f1ba 0f00 	cmp.w	sl, #0
 8007ec2:	d156      	bne.n	8007f72 <_strtod_l+0xa0a>
 8007ec4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007ec6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d158      	bne.n	8007f80 <_strtod_l+0xa18>
 8007ece:	2200      	movs	r2, #0
 8007ed0:	4630      	mov	r0, r6
 8007ed2:	4639      	mov	r1, r7
 8007ed4:	4b5d      	ldr	r3, [pc, #372]	@ (800804c <_strtod_l+0xae4>)
 8007ed6:	f7f8 fd71 	bl	80009bc <__aeabi_dcmplt>
 8007eda:	2800      	cmp	r0, #0
 8007edc:	d157      	bne.n	8007f8e <_strtod_l+0xa26>
 8007ede:	4630      	mov	r0, r6
 8007ee0:	4639      	mov	r1, r7
 8007ee2:	2200      	movs	r2, #0
 8007ee4:	4b5a      	ldr	r3, [pc, #360]	@ (8008050 <_strtod_l+0xae8>)
 8007ee6:	f7f8 faf7 	bl	80004d8 <__aeabi_dmul>
 8007eea:	4606      	mov	r6, r0
 8007eec:	460f      	mov	r7, r1
 8007eee:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8007ef2:	9606      	str	r6, [sp, #24]
 8007ef4:	9307      	str	r3, [sp, #28]
 8007ef6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007efa:	4d52      	ldr	r5, [pc, #328]	@ (8008044 <_strtod_l+0xadc>)
 8007efc:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8007f00:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007f02:	401d      	ands	r5, r3
 8007f04:	4b53      	ldr	r3, [pc, #332]	@ (8008054 <_strtod_l+0xaec>)
 8007f06:	429d      	cmp	r5, r3
 8007f08:	f040 80aa 	bne.w	8008060 <_strtod_l+0xaf8>
 8007f0c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007f0e:	4650      	mov	r0, sl
 8007f10:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8007f14:	4659      	mov	r1, fp
 8007f16:	f7ff f9cf 	bl	80072b8 <__ulp>
 8007f1a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007f1e:	f7f8 fadb 	bl	80004d8 <__aeabi_dmul>
 8007f22:	4652      	mov	r2, sl
 8007f24:	465b      	mov	r3, fp
 8007f26:	f7f8 f921 	bl	800016c <__adddf3>
 8007f2a:	460b      	mov	r3, r1
 8007f2c:	4945      	ldr	r1, [pc, #276]	@ (8008044 <_strtod_l+0xadc>)
 8007f2e:	4a4a      	ldr	r2, [pc, #296]	@ (8008058 <_strtod_l+0xaf0>)
 8007f30:	4019      	ands	r1, r3
 8007f32:	4291      	cmp	r1, r2
 8007f34:	4682      	mov	sl, r0
 8007f36:	d942      	bls.n	8007fbe <_strtod_l+0xa56>
 8007f38:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007f3a:	4b43      	ldr	r3, [pc, #268]	@ (8008048 <_strtod_l+0xae0>)
 8007f3c:	429a      	cmp	r2, r3
 8007f3e:	d103      	bne.n	8007f48 <_strtod_l+0x9e0>
 8007f40:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007f42:	3301      	adds	r3, #1
 8007f44:	f43f ad2b 	beq.w	800799e <_strtod_l+0x436>
 8007f48:	f04f 3aff 	mov.w	sl, #4294967295
 8007f4c:	f8df b0f8 	ldr.w	fp, [pc, #248]	@ 8008048 <_strtod_l+0xae0>
 8007f50:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007f52:	9805      	ldr	r0, [sp, #20]
 8007f54:	f7fe fe7e 	bl	8006c54 <_Bfree>
 8007f58:	4649      	mov	r1, r9
 8007f5a:	9805      	ldr	r0, [sp, #20]
 8007f5c:	f7fe fe7a 	bl	8006c54 <_Bfree>
 8007f60:	4641      	mov	r1, r8
 8007f62:	9805      	ldr	r0, [sp, #20]
 8007f64:	f7fe fe76 	bl	8006c54 <_Bfree>
 8007f68:	4621      	mov	r1, r4
 8007f6a:	9805      	ldr	r0, [sp, #20]
 8007f6c:	f7fe fe72 	bl	8006c54 <_Bfree>
 8007f70:	e618      	b.n	8007ba4 <_strtod_l+0x63c>
 8007f72:	f1ba 0f01 	cmp.w	sl, #1
 8007f76:	d103      	bne.n	8007f80 <_strtod_l+0xa18>
 8007f78:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	f43f ada5 	beq.w	8007aca <_strtod_l+0x562>
 8007f80:	2200      	movs	r2, #0
 8007f82:	4b36      	ldr	r3, [pc, #216]	@ (800805c <_strtod_l+0xaf4>)
 8007f84:	2600      	movs	r6, #0
 8007f86:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007f8a:	4f30      	ldr	r7, [pc, #192]	@ (800804c <_strtod_l+0xae4>)
 8007f8c:	e7b3      	b.n	8007ef6 <_strtod_l+0x98e>
 8007f8e:	2600      	movs	r6, #0
 8007f90:	4f2f      	ldr	r7, [pc, #188]	@ (8008050 <_strtod_l+0xae8>)
 8007f92:	e7ac      	b.n	8007eee <_strtod_l+0x986>
 8007f94:	4630      	mov	r0, r6
 8007f96:	4639      	mov	r1, r7
 8007f98:	4b2d      	ldr	r3, [pc, #180]	@ (8008050 <_strtod_l+0xae8>)
 8007f9a:	2200      	movs	r2, #0
 8007f9c:	f7f8 fa9c 	bl	80004d8 <__aeabi_dmul>
 8007fa0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007fa2:	4606      	mov	r6, r0
 8007fa4:	460f      	mov	r7, r1
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d0a1      	beq.n	8007eee <_strtod_l+0x986>
 8007faa:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8007fae:	e7a2      	b.n	8007ef6 <_strtod_l+0x98e>
 8007fb0:	2200      	movs	r2, #0
 8007fb2:	4b26      	ldr	r3, [pc, #152]	@ (800804c <_strtod_l+0xae4>)
 8007fb4:	4616      	mov	r6, r2
 8007fb6:	461f      	mov	r7, r3
 8007fb8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007fbc:	e79b      	b.n	8007ef6 <_strtod_l+0x98e>
 8007fbe:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8007fc2:	9b08      	ldr	r3, [sp, #32]
 8007fc4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d1c1      	bne.n	8007f50 <_strtod_l+0x9e8>
 8007fcc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007fd0:	0d1b      	lsrs	r3, r3, #20
 8007fd2:	051b      	lsls	r3, r3, #20
 8007fd4:	429d      	cmp	r5, r3
 8007fd6:	d1bb      	bne.n	8007f50 <_strtod_l+0x9e8>
 8007fd8:	4630      	mov	r0, r6
 8007fda:	4639      	mov	r1, r7
 8007fdc:	f7f8 fdc4 	bl	8000b68 <__aeabi_d2lz>
 8007fe0:	f7f8 fa4c 	bl	800047c <__aeabi_l2d>
 8007fe4:	4602      	mov	r2, r0
 8007fe6:	460b      	mov	r3, r1
 8007fe8:	4630      	mov	r0, r6
 8007fea:	4639      	mov	r1, r7
 8007fec:	f7f8 f8bc 	bl	8000168 <__aeabi_dsub>
 8007ff0:	460b      	mov	r3, r1
 8007ff2:	4602      	mov	r2, r0
 8007ff4:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8007ff8:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8007ffc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007ffe:	ea46 060a 	orr.w	r6, r6, sl
 8008002:	431e      	orrs	r6, r3
 8008004:	d069      	beq.n	80080da <_strtod_l+0xb72>
 8008006:	a30a      	add	r3, pc, #40	@ (adr r3, 8008030 <_strtod_l+0xac8>)
 8008008:	e9d3 2300 	ldrd	r2, r3, [r3]
 800800c:	f7f8 fcd6 	bl	80009bc <__aeabi_dcmplt>
 8008010:	2800      	cmp	r0, #0
 8008012:	f47f accf 	bne.w	80079b4 <_strtod_l+0x44c>
 8008016:	a308      	add	r3, pc, #32	@ (adr r3, 8008038 <_strtod_l+0xad0>)
 8008018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800801c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008020:	f7f8 fcea 	bl	80009f8 <__aeabi_dcmpgt>
 8008024:	2800      	cmp	r0, #0
 8008026:	d093      	beq.n	8007f50 <_strtod_l+0x9e8>
 8008028:	e4c4      	b.n	80079b4 <_strtod_l+0x44c>
 800802a:	bf00      	nop
 800802c:	f3af 8000 	nop.w
 8008030:	94a03595 	.word	0x94a03595
 8008034:	3fdfffff 	.word	0x3fdfffff
 8008038:	35afe535 	.word	0x35afe535
 800803c:	3fe00000 	.word	0x3fe00000
 8008040:	000fffff 	.word	0x000fffff
 8008044:	7ff00000 	.word	0x7ff00000
 8008048:	7fefffff 	.word	0x7fefffff
 800804c:	3ff00000 	.word	0x3ff00000
 8008050:	3fe00000 	.word	0x3fe00000
 8008054:	7fe00000 	.word	0x7fe00000
 8008058:	7c9fffff 	.word	0x7c9fffff
 800805c:	bff00000 	.word	0xbff00000
 8008060:	9b08      	ldr	r3, [sp, #32]
 8008062:	b323      	cbz	r3, 80080ae <_strtod_l+0xb46>
 8008064:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8008068:	d821      	bhi.n	80080ae <_strtod_l+0xb46>
 800806a:	a327      	add	r3, pc, #156	@ (adr r3, 8008108 <_strtod_l+0xba0>)
 800806c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008070:	4630      	mov	r0, r6
 8008072:	4639      	mov	r1, r7
 8008074:	f7f8 fcac 	bl	80009d0 <__aeabi_dcmple>
 8008078:	b1a0      	cbz	r0, 80080a4 <_strtod_l+0xb3c>
 800807a:	4639      	mov	r1, r7
 800807c:	4630      	mov	r0, r6
 800807e:	f7f8 fd03 	bl	8000a88 <__aeabi_d2uiz>
 8008082:	2801      	cmp	r0, #1
 8008084:	bf38      	it	cc
 8008086:	2001      	movcc	r0, #1
 8008088:	f7f8 f9ac 	bl	80003e4 <__aeabi_ui2d>
 800808c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800808e:	4606      	mov	r6, r0
 8008090:	460f      	mov	r7, r1
 8008092:	b9fb      	cbnz	r3, 80080d4 <_strtod_l+0xb6c>
 8008094:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008098:	9014      	str	r0, [sp, #80]	@ 0x50
 800809a:	9315      	str	r3, [sp, #84]	@ 0x54
 800809c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 80080a0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80080a4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80080a6:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 80080aa:	1b5b      	subs	r3, r3, r5
 80080ac:	9311      	str	r3, [sp, #68]	@ 0x44
 80080ae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80080b2:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 80080b6:	f7ff f8ff 	bl	80072b8 <__ulp>
 80080ba:	4602      	mov	r2, r0
 80080bc:	460b      	mov	r3, r1
 80080be:	4650      	mov	r0, sl
 80080c0:	4659      	mov	r1, fp
 80080c2:	f7f8 fa09 	bl	80004d8 <__aeabi_dmul>
 80080c6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80080ca:	f7f8 f84f 	bl	800016c <__adddf3>
 80080ce:	4682      	mov	sl, r0
 80080d0:	468b      	mov	fp, r1
 80080d2:	e776      	b.n	8007fc2 <_strtod_l+0xa5a>
 80080d4:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 80080d8:	e7e0      	b.n	800809c <_strtod_l+0xb34>
 80080da:	a30d      	add	r3, pc, #52	@ (adr r3, 8008110 <_strtod_l+0xba8>)
 80080dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080e0:	f7f8 fc6c 	bl	80009bc <__aeabi_dcmplt>
 80080e4:	e79e      	b.n	8008024 <_strtod_l+0xabc>
 80080e6:	2300      	movs	r3, #0
 80080e8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80080ea:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80080ec:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80080ee:	6013      	str	r3, [r2, #0]
 80080f0:	f7ff ba77 	b.w	80075e2 <_strtod_l+0x7a>
 80080f4:	2a65      	cmp	r2, #101	@ 0x65
 80080f6:	f43f ab6e 	beq.w	80077d6 <_strtod_l+0x26e>
 80080fa:	2a45      	cmp	r2, #69	@ 0x45
 80080fc:	f43f ab6b 	beq.w	80077d6 <_strtod_l+0x26e>
 8008100:	2301      	movs	r3, #1
 8008102:	f7ff bba6 	b.w	8007852 <_strtod_l+0x2ea>
 8008106:	bf00      	nop
 8008108:	ffc00000 	.word	0xffc00000
 800810c:	41dfffff 	.word	0x41dfffff
 8008110:	94a03595 	.word	0x94a03595
 8008114:	3fcfffff 	.word	0x3fcfffff

08008118 <_strtod_r>:
 8008118:	4b01      	ldr	r3, [pc, #4]	@ (8008120 <_strtod_r+0x8>)
 800811a:	f7ff ba25 	b.w	8007568 <_strtod_l>
 800811e:	bf00      	nop
 8008120:	20000470 	.word	0x20000470

08008124 <_strtol_l.constprop.0>:
 8008124:	2b24      	cmp	r3, #36	@ 0x24
 8008126:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800812a:	4686      	mov	lr, r0
 800812c:	4690      	mov	r8, r2
 800812e:	d801      	bhi.n	8008134 <_strtol_l.constprop.0+0x10>
 8008130:	2b01      	cmp	r3, #1
 8008132:	d106      	bne.n	8008142 <_strtol_l.constprop.0+0x1e>
 8008134:	f7fd fdb2 	bl	8005c9c <__errno>
 8008138:	2316      	movs	r3, #22
 800813a:	6003      	str	r3, [r0, #0]
 800813c:	2000      	movs	r0, #0
 800813e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008142:	460d      	mov	r5, r1
 8008144:	4833      	ldr	r0, [pc, #204]	@ (8008214 <_strtol_l.constprop.0+0xf0>)
 8008146:	462a      	mov	r2, r5
 8008148:	f815 4b01 	ldrb.w	r4, [r5], #1
 800814c:	5d06      	ldrb	r6, [r0, r4]
 800814e:	f016 0608 	ands.w	r6, r6, #8
 8008152:	d1f8      	bne.n	8008146 <_strtol_l.constprop.0+0x22>
 8008154:	2c2d      	cmp	r4, #45	@ 0x2d
 8008156:	d12d      	bne.n	80081b4 <_strtol_l.constprop.0+0x90>
 8008158:	2601      	movs	r6, #1
 800815a:	782c      	ldrb	r4, [r5, #0]
 800815c:	1c95      	adds	r5, r2, #2
 800815e:	f033 0210 	bics.w	r2, r3, #16
 8008162:	d109      	bne.n	8008178 <_strtol_l.constprop.0+0x54>
 8008164:	2c30      	cmp	r4, #48	@ 0x30
 8008166:	d12a      	bne.n	80081be <_strtol_l.constprop.0+0x9a>
 8008168:	782a      	ldrb	r2, [r5, #0]
 800816a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800816e:	2a58      	cmp	r2, #88	@ 0x58
 8008170:	d125      	bne.n	80081be <_strtol_l.constprop.0+0x9a>
 8008172:	2310      	movs	r3, #16
 8008174:	786c      	ldrb	r4, [r5, #1]
 8008176:	3502      	adds	r5, #2
 8008178:	2200      	movs	r2, #0
 800817a:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800817e:	f10c 3cff 	add.w	ip, ip, #4294967295
 8008182:	fbbc f9f3 	udiv	r9, ip, r3
 8008186:	4610      	mov	r0, r2
 8008188:	fb03 ca19 	mls	sl, r3, r9, ip
 800818c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8008190:	2f09      	cmp	r7, #9
 8008192:	d81b      	bhi.n	80081cc <_strtol_l.constprop.0+0xa8>
 8008194:	463c      	mov	r4, r7
 8008196:	42a3      	cmp	r3, r4
 8008198:	dd27      	ble.n	80081ea <_strtol_l.constprop.0+0xc6>
 800819a:	1c57      	adds	r7, r2, #1
 800819c:	d007      	beq.n	80081ae <_strtol_l.constprop.0+0x8a>
 800819e:	4581      	cmp	r9, r0
 80081a0:	d320      	bcc.n	80081e4 <_strtol_l.constprop.0+0xc0>
 80081a2:	d101      	bne.n	80081a8 <_strtol_l.constprop.0+0x84>
 80081a4:	45a2      	cmp	sl, r4
 80081a6:	db1d      	blt.n	80081e4 <_strtol_l.constprop.0+0xc0>
 80081a8:	2201      	movs	r2, #1
 80081aa:	fb00 4003 	mla	r0, r0, r3, r4
 80081ae:	f815 4b01 	ldrb.w	r4, [r5], #1
 80081b2:	e7eb      	b.n	800818c <_strtol_l.constprop.0+0x68>
 80081b4:	2c2b      	cmp	r4, #43	@ 0x2b
 80081b6:	bf04      	itt	eq
 80081b8:	782c      	ldrbeq	r4, [r5, #0]
 80081ba:	1c95      	addeq	r5, r2, #2
 80081bc:	e7cf      	b.n	800815e <_strtol_l.constprop.0+0x3a>
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d1da      	bne.n	8008178 <_strtol_l.constprop.0+0x54>
 80081c2:	2c30      	cmp	r4, #48	@ 0x30
 80081c4:	bf0c      	ite	eq
 80081c6:	2308      	moveq	r3, #8
 80081c8:	230a      	movne	r3, #10
 80081ca:	e7d5      	b.n	8008178 <_strtol_l.constprop.0+0x54>
 80081cc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80081d0:	2f19      	cmp	r7, #25
 80081d2:	d801      	bhi.n	80081d8 <_strtol_l.constprop.0+0xb4>
 80081d4:	3c37      	subs	r4, #55	@ 0x37
 80081d6:	e7de      	b.n	8008196 <_strtol_l.constprop.0+0x72>
 80081d8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80081dc:	2f19      	cmp	r7, #25
 80081de:	d804      	bhi.n	80081ea <_strtol_l.constprop.0+0xc6>
 80081e0:	3c57      	subs	r4, #87	@ 0x57
 80081e2:	e7d8      	b.n	8008196 <_strtol_l.constprop.0+0x72>
 80081e4:	f04f 32ff 	mov.w	r2, #4294967295
 80081e8:	e7e1      	b.n	80081ae <_strtol_l.constprop.0+0x8a>
 80081ea:	1c53      	adds	r3, r2, #1
 80081ec:	d108      	bne.n	8008200 <_strtol_l.constprop.0+0xdc>
 80081ee:	2322      	movs	r3, #34	@ 0x22
 80081f0:	4660      	mov	r0, ip
 80081f2:	f8ce 3000 	str.w	r3, [lr]
 80081f6:	f1b8 0f00 	cmp.w	r8, #0
 80081fa:	d0a0      	beq.n	800813e <_strtol_l.constprop.0+0x1a>
 80081fc:	1e69      	subs	r1, r5, #1
 80081fe:	e006      	b.n	800820e <_strtol_l.constprop.0+0xea>
 8008200:	b106      	cbz	r6, 8008204 <_strtol_l.constprop.0+0xe0>
 8008202:	4240      	negs	r0, r0
 8008204:	f1b8 0f00 	cmp.w	r8, #0
 8008208:	d099      	beq.n	800813e <_strtol_l.constprop.0+0x1a>
 800820a:	2a00      	cmp	r2, #0
 800820c:	d1f6      	bne.n	80081fc <_strtol_l.constprop.0+0xd8>
 800820e:	f8c8 1000 	str.w	r1, [r8]
 8008212:	e794      	b.n	800813e <_strtol_l.constprop.0+0x1a>
 8008214:	08009599 	.word	0x08009599

08008218 <_strtol_r>:
 8008218:	f7ff bf84 	b.w	8008124 <_strtol_l.constprop.0>

0800821c <__ssputs_r>:
 800821c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008220:	461f      	mov	r7, r3
 8008222:	688e      	ldr	r6, [r1, #8]
 8008224:	4682      	mov	sl, r0
 8008226:	42be      	cmp	r6, r7
 8008228:	460c      	mov	r4, r1
 800822a:	4690      	mov	r8, r2
 800822c:	680b      	ldr	r3, [r1, #0]
 800822e:	d82d      	bhi.n	800828c <__ssputs_r+0x70>
 8008230:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008234:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008238:	d026      	beq.n	8008288 <__ssputs_r+0x6c>
 800823a:	6965      	ldr	r5, [r4, #20]
 800823c:	6909      	ldr	r1, [r1, #16]
 800823e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008242:	eba3 0901 	sub.w	r9, r3, r1
 8008246:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800824a:	1c7b      	adds	r3, r7, #1
 800824c:	444b      	add	r3, r9
 800824e:	106d      	asrs	r5, r5, #1
 8008250:	429d      	cmp	r5, r3
 8008252:	bf38      	it	cc
 8008254:	461d      	movcc	r5, r3
 8008256:	0553      	lsls	r3, r2, #21
 8008258:	d527      	bpl.n	80082aa <__ssputs_r+0x8e>
 800825a:	4629      	mov	r1, r5
 800825c:	f7fe fc2e 	bl	8006abc <_malloc_r>
 8008260:	4606      	mov	r6, r0
 8008262:	b360      	cbz	r0, 80082be <__ssputs_r+0xa2>
 8008264:	464a      	mov	r2, r9
 8008266:	6921      	ldr	r1, [r4, #16]
 8008268:	f7fd fd53 	bl	8005d12 <memcpy>
 800826c:	89a3      	ldrh	r3, [r4, #12]
 800826e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008272:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008276:	81a3      	strh	r3, [r4, #12]
 8008278:	6126      	str	r6, [r4, #16]
 800827a:	444e      	add	r6, r9
 800827c:	6026      	str	r6, [r4, #0]
 800827e:	463e      	mov	r6, r7
 8008280:	6165      	str	r5, [r4, #20]
 8008282:	eba5 0509 	sub.w	r5, r5, r9
 8008286:	60a5      	str	r5, [r4, #8]
 8008288:	42be      	cmp	r6, r7
 800828a:	d900      	bls.n	800828e <__ssputs_r+0x72>
 800828c:	463e      	mov	r6, r7
 800828e:	4632      	mov	r2, r6
 8008290:	4641      	mov	r1, r8
 8008292:	6820      	ldr	r0, [r4, #0]
 8008294:	f000 fa23 	bl	80086de <memmove>
 8008298:	2000      	movs	r0, #0
 800829a:	68a3      	ldr	r3, [r4, #8]
 800829c:	1b9b      	subs	r3, r3, r6
 800829e:	60a3      	str	r3, [r4, #8]
 80082a0:	6823      	ldr	r3, [r4, #0]
 80082a2:	4433      	add	r3, r6
 80082a4:	6023      	str	r3, [r4, #0]
 80082a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082aa:	462a      	mov	r2, r5
 80082ac:	f000 fdf9 	bl	8008ea2 <_realloc_r>
 80082b0:	4606      	mov	r6, r0
 80082b2:	2800      	cmp	r0, #0
 80082b4:	d1e0      	bne.n	8008278 <__ssputs_r+0x5c>
 80082b6:	4650      	mov	r0, sl
 80082b8:	6921      	ldr	r1, [r4, #16]
 80082ba:	f7fe fb8d 	bl	80069d8 <_free_r>
 80082be:	230c      	movs	r3, #12
 80082c0:	f8ca 3000 	str.w	r3, [sl]
 80082c4:	89a3      	ldrh	r3, [r4, #12]
 80082c6:	f04f 30ff 	mov.w	r0, #4294967295
 80082ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80082ce:	81a3      	strh	r3, [r4, #12]
 80082d0:	e7e9      	b.n	80082a6 <__ssputs_r+0x8a>
	...

080082d4 <_svfiprintf_r>:
 80082d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082d8:	4698      	mov	r8, r3
 80082da:	898b      	ldrh	r3, [r1, #12]
 80082dc:	4607      	mov	r7, r0
 80082de:	061b      	lsls	r3, r3, #24
 80082e0:	460d      	mov	r5, r1
 80082e2:	4614      	mov	r4, r2
 80082e4:	b09d      	sub	sp, #116	@ 0x74
 80082e6:	d510      	bpl.n	800830a <_svfiprintf_r+0x36>
 80082e8:	690b      	ldr	r3, [r1, #16]
 80082ea:	b973      	cbnz	r3, 800830a <_svfiprintf_r+0x36>
 80082ec:	2140      	movs	r1, #64	@ 0x40
 80082ee:	f7fe fbe5 	bl	8006abc <_malloc_r>
 80082f2:	6028      	str	r0, [r5, #0]
 80082f4:	6128      	str	r0, [r5, #16]
 80082f6:	b930      	cbnz	r0, 8008306 <_svfiprintf_r+0x32>
 80082f8:	230c      	movs	r3, #12
 80082fa:	603b      	str	r3, [r7, #0]
 80082fc:	f04f 30ff 	mov.w	r0, #4294967295
 8008300:	b01d      	add	sp, #116	@ 0x74
 8008302:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008306:	2340      	movs	r3, #64	@ 0x40
 8008308:	616b      	str	r3, [r5, #20]
 800830a:	2300      	movs	r3, #0
 800830c:	9309      	str	r3, [sp, #36]	@ 0x24
 800830e:	2320      	movs	r3, #32
 8008310:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008314:	2330      	movs	r3, #48	@ 0x30
 8008316:	f04f 0901 	mov.w	r9, #1
 800831a:	f8cd 800c 	str.w	r8, [sp, #12]
 800831e:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80084b8 <_svfiprintf_r+0x1e4>
 8008322:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008326:	4623      	mov	r3, r4
 8008328:	469a      	mov	sl, r3
 800832a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800832e:	b10a      	cbz	r2, 8008334 <_svfiprintf_r+0x60>
 8008330:	2a25      	cmp	r2, #37	@ 0x25
 8008332:	d1f9      	bne.n	8008328 <_svfiprintf_r+0x54>
 8008334:	ebba 0b04 	subs.w	fp, sl, r4
 8008338:	d00b      	beq.n	8008352 <_svfiprintf_r+0x7e>
 800833a:	465b      	mov	r3, fp
 800833c:	4622      	mov	r2, r4
 800833e:	4629      	mov	r1, r5
 8008340:	4638      	mov	r0, r7
 8008342:	f7ff ff6b 	bl	800821c <__ssputs_r>
 8008346:	3001      	adds	r0, #1
 8008348:	f000 80a7 	beq.w	800849a <_svfiprintf_r+0x1c6>
 800834c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800834e:	445a      	add	r2, fp
 8008350:	9209      	str	r2, [sp, #36]	@ 0x24
 8008352:	f89a 3000 	ldrb.w	r3, [sl]
 8008356:	2b00      	cmp	r3, #0
 8008358:	f000 809f 	beq.w	800849a <_svfiprintf_r+0x1c6>
 800835c:	2300      	movs	r3, #0
 800835e:	f04f 32ff 	mov.w	r2, #4294967295
 8008362:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008366:	f10a 0a01 	add.w	sl, sl, #1
 800836a:	9304      	str	r3, [sp, #16]
 800836c:	9307      	str	r3, [sp, #28]
 800836e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008372:	931a      	str	r3, [sp, #104]	@ 0x68
 8008374:	4654      	mov	r4, sl
 8008376:	2205      	movs	r2, #5
 8008378:	f814 1b01 	ldrb.w	r1, [r4], #1
 800837c:	484e      	ldr	r0, [pc, #312]	@ (80084b8 <_svfiprintf_r+0x1e4>)
 800837e:	f7fd fcba 	bl	8005cf6 <memchr>
 8008382:	9a04      	ldr	r2, [sp, #16]
 8008384:	b9d8      	cbnz	r0, 80083be <_svfiprintf_r+0xea>
 8008386:	06d0      	lsls	r0, r2, #27
 8008388:	bf44      	itt	mi
 800838a:	2320      	movmi	r3, #32
 800838c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008390:	0711      	lsls	r1, r2, #28
 8008392:	bf44      	itt	mi
 8008394:	232b      	movmi	r3, #43	@ 0x2b
 8008396:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800839a:	f89a 3000 	ldrb.w	r3, [sl]
 800839e:	2b2a      	cmp	r3, #42	@ 0x2a
 80083a0:	d015      	beq.n	80083ce <_svfiprintf_r+0xfa>
 80083a2:	4654      	mov	r4, sl
 80083a4:	2000      	movs	r0, #0
 80083a6:	f04f 0c0a 	mov.w	ip, #10
 80083aa:	9a07      	ldr	r2, [sp, #28]
 80083ac:	4621      	mov	r1, r4
 80083ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 80083b2:	3b30      	subs	r3, #48	@ 0x30
 80083b4:	2b09      	cmp	r3, #9
 80083b6:	d94b      	bls.n	8008450 <_svfiprintf_r+0x17c>
 80083b8:	b1b0      	cbz	r0, 80083e8 <_svfiprintf_r+0x114>
 80083ba:	9207      	str	r2, [sp, #28]
 80083bc:	e014      	b.n	80083e8 <_svfiprintf_r+0x114>
 80083be:	eba0 0308 	sub.w	r3, r0, r8
 80083c2:	fa09 f303 	lsl.w	r3, r9, r3
 80083c6:	4313      	orrs	r3, r2
 80083c8:	46a2      	mov	sl, r4
 80083ca:	9304      	str	r3, [sp, #16]
 80083cc:	e7d2      	b.n	8008374 <_svfiprintf_r+0xa0>
 80083ce:	9b03      	ldr	r3, [sp, #12]
 80083d0:	1d19      	adds	r1, r3, #4
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	9103      	str	r1, [sp, #12]
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	bfbb      	ittet	lt
 80083da:	425b      	neglt	r3, r3
 80083dc:	f042 0202 	orrlt.w	r2, r2, #2
 80083e0:	9307      	strge	r3, [sp, #28]
 80083e2:	9307      	strlt	r3, [sp, #28]
 80083e4:	bfb8      	it	lt
 80083e6:	9204      	strlt	r2, [sp, #16]
 80083e8:	7823      	ldrb	r3, [r4, #0]
 80083ea:	2b2e      	cmp	r3, #46	@ 0x2e
 80083ec:	d10a      	bne.n	8008404 <_svfiprintf_r+0x130>
 80083ee:	7863      	ldrb	r3, [r4, #1]
 80083f0:	2b2a      	cmp	r3, #42	@ 0x2a
 80083f2:	d132      	bne.n	800845a <_svfiprintf_r+0x186>
 80083f4:	9b03      	ldr	r3, [sp, #12]
 80083f6:	3402      	adds	r4, #2
 80083f8:	1d1a      	adds	r2, r3, #4
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	9203      	str	r2, [sp, #12]
 80083fe:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008402:	9305      	str	r3, [sp, #20]
 8008404:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80084bc <_svfiprintf_r+0x1e8>
 8008408:	2203      	movs	r2, #3
 800840a:	4650      	mov	r0, sl
 800840c:	7821      	ldrb	r1, [r4, #0]
 800840e:	f7fd fc72 	bl	8005cf6 <memchr>
 8008412:	b138      	cbz	r0, 8008424 <_svfiprintf_r+0x150>
 8008414:	2240      	movs	r2, #64	@ 0x40
 8008416:	9b04      	ldr	r3, [sp, #16]
 8008418:	eba0 000a 	sub.w	r0, r0, sl
 800841c:	4082      	lsls	r2, r0
 800841e:	4313      	orrs	r3, r2
 8008420:	3401      	adds	r4, #1
 8008422:	9304      	str	r3, [sp, #16]
 8008424:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008428:	2206      	movs	r2, #6
 800842a:	4825      	ldr	r0, [pc, #148]	@ (80084c0 <_svfiprintf_r+0x1ec>)
 800842c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008430:	f7fd fc61 	bl	8005cf6 <memchr>
 8008434:	2800      	cmp	r0, #0
 8008436:	d036      	beq.n	80084a6 <_svfiprintf_r+0x1d2>
 8008438:	4b22      	ldr	r3, [pc, #136]	@ (80084c4 <_svfiprintf_r+0x1f0>)
 800843a:	bb1b      	cbnz	r3, 8008484 <_svfiprintf_r+0x1b0>
 800843c:	9b03      	ldr	r3, [sp, #12]
 800843e:	3307      	adds	r3, #7
 8008440:	f023 0307 	bic.w	r3, r3, #7
 8008444:	3308      	adds	r3, #8
 8008446:	9303      	str	r3, [sp, #12]
 8008448:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800844a:	4433      	add	r3, r6
 800844c:	9309      	str	r3, [sp, #36]	@ 0x24
 800844e:	e76a      	b.n	8008326 <_svfiprintf_r+0x52>
 8008450:	460c      	mov	r4, r1
 8008452:	2001      	movs	r0, #1
 8008454:	fb0c 3202 	mla	r2, ip, r2, r3
 8008458:	e7a8      	b.n	80083ac <_svfiprintf_r+0xd8>
 800845a:	2300      	movs	r3, #0
 800845c:	f04f 0c0a 	mov.w	ip, #10
 8008460:	4619      	mov	r1, r3
 8008462:	3401      	adds	r4, #1
 8008464:	9305      	str	r3, [sp, #20]
 8008466:	4620      	mov	r0, r4
 8008468:	f810 2b01 	ldrb.w	r2, [r0], #1
 800846c:	3a30      	subs	r2, #48	@ 0x30
 800846e:	2a09      	cmp	r2, #9
 8008470:	d903      	bls.n	800847a <_svfiprintf_r+0x1a6>
 8008472:	2b00      	cmp	r3, #0
 8008474:	d0c6      	beq.n	8008404 <_svfiprintf_r+0x130>
 8008476:	9105      	str	r1, [sp, #20]
 8008478:	e7c4      	b.n	8008404 <_svfiprintf_r+0x130>
 800847a:	4604      	mov	r4, r0
 800847c:	2301      	movs	r3, #1
 800847e:	fb0c 2101 	mla	r1, ip, r1, r2
 8008482:	e7f0      	b.n	8008466 <_svfiprintf_r+0x192>
 8008484:	ab03      	add	r3, sp, #12
 8008486:	9300      	str	r3, [sp, #0]
 8008488:	462a      	mov	r2, r5
 800848a:	4638      	mov	r0, r7
 800848c:	4b0e      	ldr	r3, [pc, #56]	@ (80084c8 <_svfiprintf_r+0x1f4>)
 800848e:	a904      	add	r1, sp, #16
 8008490:	f7fc fbcc 	bl	8004c2c <_printf_float>
 8008494:	1c42      	adds	r2, r0, #1
 8008496:	4606      	mov	r6, r0
 8008498:	d1d6      	bne.n	8008448 <_svfiprintf_r+0x174>
 800849a:	89ab      	ldrh	r3, [r5, #12]
 800849c:	065b      	lsls	r3, r3, #25
 800849e:	f53f af2d 	bmi.w	80082fc <_svfiprintf_r+0x28>
 80084a2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80084a4:	e72c      	b.n	8008300 <_svfiprintf_r+0x2c>
 80084a6:	ab03      	add	r3, sp, #12
 80084a8:	9300      	str	r3, [sp, #0]
 80084aa:	462a      	mov	r2, r5
 80084ac:	4638      	mov	r0, r7
 80084ae:	4b06      	ldr	r3, [pc, #24]	@ (80084c8 <_svfiprintf_r+0x1f4>)
 80084b0:	a904      	add	r1, sp, #16
 80084b2:	f7fc fe59 	bl	8005168 <_printf_i>
 80084b6:	e7ed      	b.n	8008494 <_svfiprintf_r+0x1c0>
 80084b8:	08009699 	.word	0x08009699
 80084bc:	0800969f 	.word	0x0800969f
 80084c0:	080096a3 	.word	0x080096a3
 80084c4:	08004c2d 	.word	0x08004c2d
 80084c8:	0800821d 	.word	0x0800821d

080084cc <__sflush_r>:
 80084cc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80084d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084d2:	0716      	lsls	r6, r2, #28
 80084d4:	4605      	mov	r5, r0
 80084d6:	460c      	mov	r4, r1
 80084d8:	d454      	bmi.n	8008584 <__sflush_r+0xb8>
 80084da:	684b      	ldr	r3, [r1, #4]
 80084dc:	2b00      	cmp	r3, #0
 80084de:	dc02      	bgt.n	80084e6 <__sflush_r+0x1a>
 80084e0:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	dd48      	ble.n	8008578 <__sflush_r+0xac>
 80084e6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80084e8:	2e00      	cmp	r6, #0
 80084ea:	d045      	beq.n	8008578 <__sflush_r+0xac>
 80084ec:	2300      	movs	r3, #0
 80084ee:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80084f2:	682f      	ldr	r7, [r5, #0]
 80084f4:	6a21      	ldr	r1, [r4, #32]
 80084f6:	602b      	str	r3, [r5, #0]
 80084f8:	d030      	beq.n	800855c <__sflush_r+0x90>
 80084fa:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80084fc:	89a3      	ldrh	r3, [r4, #12]
 80084fe:	0759      	lsls	r1, r3, #29
 8008500:	d505      	bpl.n	800850e <__sflush_r+0x42>
 8008502:	6863      	ldr	r3, [r4, #4]
 8008504:	1ad2      	subs	r2, r2, r3
 8008506:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008508:	b10b      	cbz	r3, 800850e <__sflush_r+0x42>
 800850a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800850c:	1ad2      	subs	r2, r2, r3
 800850e:	2300      	movs	r3, #0
 8008510:	4628      	mov	r0, r5
 8008512:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008514:	6a21      	ldr	r1, [r4, #32]
 8008516:	47b0      	blx	r6
 8008518:	1c43      	adds	r3, r0, #1
 800851a:	89a3      	ldrh	r3, [r4, #12]
 800851c:	d106      	bne.n	800852c <__sflush_r+0x60>
 800851e:	6829      	ldr	r1, [r5, #0]
 8008520:	291d      	cmp	r1, #29
 8008522:	d82b      	bhi.n	800857c <__sflush_r+0xb0>
 8008524:	4a28      	ldr	r2, [pc, #160]	@ (80085c8 <__sflush_r+0xfc>)
 8008526:	410a      	asrs	r2, r1
 8008528:	07d6      	lsls	r6, r2, #31
 800852a:	d427      	bmi.n	800857c <__sflush_r+0xb0>
 800852c:	2200      	movs	r2, #0
 800852e:	6062      	str	r2, [r4, #4]
 8008530:	6922      	ldr	r2, [r4, #16]
 8008532:	04d9      	lsls	r1, r3, #19
 8008534:	6022      	str	r2, [r4, #0]
 8008536:	d504      	bpl.n	8008542 <__sflush_r+0x76>
 8008538:	1c42      	adds	r2, r0, #1
 800853a:	d101      	bne.n	8008540 <__sflush_r+0x74>
 800853c:	682b      	ldr	r3, [r5, #0]
 800853e:	b903      	cbnz	r3, 8008542 <__sflush_r+0x76>
 8008540:	6560      	str	r0, [r4, #84]	@ 0x54
 8008542:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008544:	602f      	str	r7, [r5, #0]
 8008546:	b1b9      	cbz	r1, 8008578 <__sflush_r+0xac>
 8008548:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800854c:	4299      	cmp	r1, r3
 800854e:	d002      	beq.n	8008556 <__sflush_r+0x8a>
 8008550:	4628      	mov	r0, r5
 8008552:	f7fe fa41 	bl	80069d8 <_free_r>
 8008556:	2300      	movs	r3, #0
 8008558:	6363      	str	r3, [r4, #52]	@ 0x34
 800855a:	e00d      	b.n	8008578 <__sflush_r+0xac>
 800855c:	2301      	movs	r3, #1
 800855e:	4628      	mov	r0, r5
 8008560:	47b0      	blx	r6
 8008562:	4602      	mov	r2, r0
 8008564:	1c50      	adds	r0, r2, #1
 8008566:	d1c9      	bne.n	80084fc <__sflush_r+0x30>
 8008568:	682b      	ldr	r3, [r5, #0]
 800856a:	2b00      	cmp	r3, #0
 800856c:	d0c6      	beq.n	80084fc <__sflush_r+0x30>
 800856e:	2b1d      	cmp	r3, #29
 8008570:	d001      	beq.n	8008576 <__sflush_r+0xaa>
 8008572:	2b16      	cmp	r3, #22
 8008574:	d11d      	bne.n	80085b2 <__sflush_r+0xe6>
 8008576:	602f      	str	r7, [r5, #0]
 8008578:	2000      	movs	r0, #0
 800857a:	e021      	b.n	80085c0 <__sflush_r+0xf4>
 800857c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008580:	b21b      	sxth	r3, r3
 8008582:	e01a      	b.n	80085ba <__sflush_r+0xee>
 8008584:	690f      	ldr	r7, [r1, #16]
 8008586:	2f00      	cmp	r7, #0
 8008588:	d0f6      	beq.n	8008578 <__sflush_r+0xac>
 800858a:	0793      	lsls	r3, r2, #30
 800858c:	bf18      	it	ne
 800858e:	2300      	movne	r3, #0
 8008590:	680e      	ldr	r6, [r1, #0]
 8008592:	bf08      	it	eq
 8008594:	694b      	ldreq	r3, [r1, #20]
 8008596:	1bf6      	subs	r6, r6, r7
 8008598:	600f      	str	r7, [r1, #0]
 800859a:	608b      	str	r3, [r1, #8]
 800859c:	2e00      	cmp	r6, #0
 800859e:	ddeb      	ble.n	8008578 <__sflush_r+0xac>
 80085a0:	4633      	mov	r3, r6
 80085a2:	463a      	mov	r2, r7
 80085a4:	4628      	mov	r0, r5
 80085a6:	6a21      	ldr	r1, [r4, #32]
 80085a8:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 80085ac:	47e0      	blx	ip
 80085ae:	2800      	cmp	r0, #0
 80085b0:	dc07      	bgt.n	80085c2 <__sflush_r+0xf6>
 80085b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80085b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80085ba:	f04f 30ff 	mov.w	r0, #4294967295
 80085be:	81a3      	strh	r3, [r4, #12]
 80085c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80085c2:	4407      	add	r7, r0
 80085c4:	1a36      	subs	r6, r6, r0
 80085c6:	e7e9      	b.n	800859c <__sflush_r+0xd0>
 80085c8:	dfbffffe 	.word	0xdfbffffe

080085cc <_fflush_r>:
 80085cc:	b538      	push	{r3, r4, r5, lr}
 80085ce:	690b      	ldr	r3, [r1, #16]
 80085d0:	4605      	mov	r5, r0
 80085d2:	460c      	mov	r4, r1
 80085d4:	b913      	cbnz	r3, 80085dc <_fflush_r+0x10>
 80085d6:	2500      	movs	r5, #0
 80085d8:	4628      	mov	r0, r5
 80085da:	bd38      	pop	{r3, r4, r5, pc}
 80085dc:	b118      	cbz	r0, 80085e6 <_fflush_r+0x1a>
 80085de:	6a03      	ldr	r3, [r0, #32]
 80085e0:	b90b      	cbnz	r3, 80085e6 <_fflush_r+0x1a>
 80085e2:	f7fd f97d 	bl	80058e0 <__sinit>
 80085e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d0f3      	beq.n	80085d6 <_fflush_r+0xa>
 80085ee:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80085f0:	07d0      	lsls	r0, r2, #31
 80085f2:	d404      	bmi.n	80085fe <_fflush_r+0x32>
 80085f4:	0599      	lsls	r1, r3, #22
 80085f6:	d402      	bmi.n	80085fe <_fflush_r+0x32>
 80085f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80085fa:	f7fd fb7a 	bl	8005cf2 <__retarget_lock_acquire_recursive>
 80085fe:	4628      	mov	r0, r5
 8008600:	4621      	mov	r1, r4
 8008602:	f7ff ff63 	bl	80084cc <__sflush_r>
 8008606:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008608:	4605      	mov	r5, r0
 800860a:	07da      	lsls	r2, r3, #31
 800860c:	d4e4      	bmi.n	80085d8 <_fflush_r+0xc>
 800860e:	89a3      	ldrh	r3, [r4, #12]
 8008610:	059b      	lsls	r3, r3, #22
 8008612:	d4e1      	bmi.n	80085d8 <_fflush_r+0xc>
 8008614:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008616:	f7fd fb6d 	bl	8005cf4 <__retarget_lock_release_recursive>
 800861a:	e7dd      	b.n	80085d8 <_fflush_r+0xc>

0800861c <__swhatbuf_r>:
 800861c:	b570      	push	{r4, r5, r6, lr}
 800861e:	460c      	mov	r4, r1
 8008620:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008624:	4615      	mov	r5, r2
 8008626:	2900      	cmp	r1, #0
 8008628:	461e      	mov	r6, r3
 800862a:	b096      	sub	sp, #88	@ 0x58
 800862c:	da0c      	bge.n	8008648 <__swhatbuf_r+0x2c>
 800862e:	89a3      	ldrh	r3, [r4, #12]
 8008630:	2100      	movs	r1, #0
 8008632:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008636:	bf14      	ite	ne
 8008638:	2340      	movne	r3, #64	@ 0x40
 800863a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800863e:	2000      	movs	r0, #0
 8008640:	6031      	str	r1, [r6, #0]
 8008642:	602b      	str	r3, [r5, #0]
 8008644:	b016      	add	sp, #88	@ 0x58
 8008646:	bd70      	pop	{r4, r5, r6, pc}
 8008648:	466a      	mov	r2, sp
 800864a:	f000 f875 	bl	8008738 <_fstat_r>
 800864e:	2800      	cmp	r0, #0
 8008650:	dbed      	blt.n	800862e <__swhatbuf_r+0x12>
 8008652:	9901      	ldr	r1, [sp, #4]
 8008654:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008658:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800865c:	4259      	negs	r1, r3
 800865e:	4159      	adcs	r1, r3
 8008660:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008664:	e7eb      	b.n	800863e <__swhatbuf_r+0x22>

08008666 <__smakebuf_r>:
 8008666:	898b      	ldrh	r3, [r1, #12]
 8008668:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800866a:	079d      	lsls	r5, r3, #30
 800866c:	4606      	mov	r6, r0
 800866e:	460c      	mov	r4, r1
 8008670:	d507      	bpl.n	8008682 <__smakebuf_r+0x1c>
 8008672:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008676:	6023      	str	r3, [r4, #0]
 8008678:	6123      	str	r3, [r4, #16]
 800867a:	2301      	movs	r3, #1
 800867c:	6163      	str	r3, [r4, #20]
 800867e:	b003      	add	sp, #12
 8008680:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008682:	466a      	mov	r2, sp
 8008684:	ab01      	add	r3, sp, #4
 8008686:	f7ff ffc9 	bl	800861c <__swhatbuf_r>
 800868a:	9f00      	ldr	r7, [sp, #0]
 800868c:	4605      	mov	r5, r0
 800868e:	4639      	mov	r1, r7
 8008690:	4630      	mov	r0, r6
 8008692:	f7fe fa13 	bl	8006abc <_malloc_r>
 8008696:	b948      	cbnz	r0, 80086ac <__smakebuf_r+0x46>
 8008698:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800869c:	059a      	lsls	r2, r3, #22
 800869e:	d4ee      	bmi.n	800867e <__smakebuf_r+0x18>
 80086a0:	f023 0303 	bic.w	r3, r3, #3
 80086a4:	f043 0302 	orr.w	r3, r3, #2
 80086a8:	81a3      	strh	r3, [r4, #12]
 80086aa:	e7e2      	b.n	8008672 <__smakebuf_r+0xc>
 80086ac:	89a3      	ldrh	r3, [r4, #12]
 80086ae:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80086b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80086b6:	81a3      	strh	r3, [r4, #12]
 80086b8:	9b01      	ldr	r3, [sp, #4]
 80086ba:	6020      	str	r0, [r4, #0]
 80086bc:	b15b      	cbz	r3, 80086d6 <__smakebuf_r+0x70>
 80086be:	4630      	mov	r0, r6
 80086c0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80086c4:	f000 f84a 	bl	800875c <_isatty_r>
 80086c8:	b128      	cbz	r0, 80086d6 <__smakebuf_r+0x70>
 80086ca:	89a3      	ldrh	r3, [r4, #12]
 80086cc:	f023 0303 	bic.w	r3, r3, #3
 80086d0:	f043 0301 	orr.w	r3, r3, #1
 80086d4:	81a3      	strh	r3, [r4, #12]
 80086d6:	89a3      	ldrh	r3, [r4, #12]
 80086d8:	431d      	orrs	r5, r3
 80086da:	81a5      	strh	r5, [r4, #12]
 80086dc:	e7cf      	b.n	800867e <__smakebuf_r+0x18>

080086de <memmove>:
 80086de:	4288      	cmp	r0, r1
 80086e0:	b510      	push	{r4, lr}
 80086e2:	eb01 0402 	add.w	r4, r1, r2
 80086e6:	d902      	bls.n	80086ee <memmove+0x10>
 80086e8:	4284      	cmp	r4, r0
 80086ea:	4623      	mov	r3, r4
 80086ec:	d807      	bhi.n	80086fe <memmove+0x20>
 80086ee:	1e43      	subs	r3, r0, #1
 80086f0:	42a1      	cmp	r1, r4
 80086f2:	d008      	beq.n	8008706 <memmove+0x28>
 80086f4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80086f8:	f803 2f01 	strb.w	r2, [r3, #1]!
 80086fc:	e7f8      	b.n	80086f0 <memmove+0x12>
 80086fe:	4601      	mov	r1, r0
 8008700:	4402      	add	r2, r0
 8008702:	428a      	cmp	r2, r1
 8008704:	d100      	bne.n	8008708 <memmove+0x2a>
 8008706:	bd10      	pop	{r4, pc}
 8008708:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800870c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008710:	e7f7      	b.n	8008702 <memmove+0x24>

08008712 <strncmp>:
 8008712:	b510      	push	{r4, lr}
 8008714:	b16a      	cbz	r2, 8008732 <strncmp+0x20>
 8008716:	3901      	subs	r1, #1
 8008718:	1884      	adds	r4, r0, r2
 800871a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800871e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8008722:	429a      	cmp	r2, r3
 8008724:	d103      	bne.n	800872e <strncmp+0x1c>
 8008726:	42a0      	cmp	r0, r4
 8008728:	d001      	beq.n	800872e <strncmp+0x1c>
 800872a:	2a00      	cmp	r2, #0
 800872c:	d1f5      	bne.n	800871a <strncmp+0x8>
 800872e:	1ad0      	subs	r0, r2, r3
 8008730:	bd10      	pop	{r4, pc}
 8008732:	4610      	mov	r0, r2
 8008734:	e7fc      	b.n	8008730 <strncmp+0x1e>
	...

08008738 <_fstat_r>:
 8008738:	b538      	push	{r3, r4, r5, lr}
 800873a:	2300      	movs	r3, #0
 800873c:	4d06      	ldr	r5, [pc, #24]	@ (8008758 <_fstat_r+0x20>)
 800873e:	4604      	mov	r4, r0
 8008740:	4608      	mov	r0, r1
 8008742:	4611      	mov	r1, r2
 8008744:	602b      	str	r3, [r5, #0]
 8008746:	f7f8 feeb 	bl	8001520 <_fstat>
 800874a:	1c43      	adds	r3, r0, #1
 800874c:	d102      	bne.n	8008754 <_fstat_r+0x1c>
 800874e:	682b      	ldr	r3, [r5, #0]
 8008750:	b103      	cbz	r3, 8008754 <_fstat_r+0x1c>
 8008752:	6023      	str	r3, [r4, #0]
 8008754:	bd38      	pop	{r3, r4, r5, pc}
 8008756:	bf00      	nop
 8008758:	20003154 	.word	0x20003154

0800875c <_isatty_r>:
 800875c:	b538      	push	{r3, r4, r5, lr}
 800875e:	2300      	movs	r3, #0
 8008760:	4d05      	ldr	r5, [pc, #20]	@ (8008778 <_isatty_r+0x1c>)
 8008762:	4604      	mov	r4, r0
 8008764:	4608      	mov	r0, r1
 8008766:	602b      	str	r3, [r5, #0]
 8008768:	f7f8 fee9 	bl	800153e <_isatty>
 800876c:	1c43      	adds	r3, r0, #1
 800876e:	d102      	bne.n	8008776 <_isatty_r+0x1a>
 8008770:	682b      	ldr	r3, [r5, #0]
 8008772:	b103      	cbz	r3, 8008776 <_isatty_r+0x1a>
 8008774:	6023      	str	r3, [r4, #0]
 8008776:	bd38      	pop	{r3, r4, r5, pc}
 8008778:	20003154 	.word	0x20003154

0800877c <_sbrk_r>:
 800877c:	b538      	push	{r3, r4, r5, lr}
 800877e:	2300      	movs	r3, #0
 8008780:	4d05      	ldr	r5, [pc, #20]	@ (8008798 <_sbrk_r+0x1c>)
 8008782:	4604      	mov	r4, r0
 8008784:	4608      	mov	r0, r1
 8008786:	602b      	str	r3, [r5, #0]
 8008788:	f7f8 fef0 	bl	800156c <_sbrk>
 800878c:	1c43      	adds	r3, r0, #1
 800878e:	d102      	bne.n	8008796 <_sbrk_r+0x1a>
 8008790:	682b      	ldr	r3, [r5, #0]
 8008792:	b103      	cbz	r3, 8008796 <_sbrk_r+0x1a>
 8008794:	6023      	str	r3, [r4, #0]
 8008796:	bd38      	pop	{r3, r4, r5, pc}
 8008798:	20003154 	.word	0x20003154

0800879c <nan>:
 800879c:	2000      	movs	r0, #0
 800879e:	4901      	ldr	r1, [pc, #4]	@ (80087a4 <nan+0x8>)
 80087a0:	4770      	bx	lr
 80087a2:	bf00      	nop
 80087a4:	7ff80000 	.word	0x7ff80000

080087a8 <__assert_func>:
 80087a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80087aa:	4614      	mov	r4, r2
 80087ac:	461a      	mov	r2, r3
 80087ae:	4b09      	ldr	r3, [pc, #36]	@ (80087d4 <__assert_func+0x2c>)
 80087b0:	4605      	mov	r5, r0
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	68d8      	ldr	r0, [r3, #12]
 80087b6:	b954      	cbnz	r4, 80087ce <__assert_func+0x26>
 80087b8:	4b07      	ldr	r3, [pc, #28]	@ (80087d8 <__assert_func+0x30>)
 80087ba:	461c      	mov	r4, r3
 80087bc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80087c0:	9100      	str	r1, [sp, #0]
 80087c2:	462b      	mov	r3, r5
 80087c4:	4905      	ldr	r1, [pc, #20]	@ (80087dc <__assert_func+0x34>)
 80087c6:	f000 fba7 	bl	8008f18 <fiprintf>
 80087ca:	f000 fbb7 	bl	8008f3c <abort>
 80087ce:	4b04      	ldr	r3, [pc, #16]	@ (80087e0 <__assert_func+0x38>)
 80087d0:	e7f4      	b.n	80087bc <__assert_func+0x14>
 80087d2:	bf00      	nop
 80087d4:	20000420 	.word	0x20000420
 80087d8:	080096ed 	.word	0x080096ed
 80087dc:	080096bf 	.word	0x080096bf
 80087e0:	080096b2 	.word	0x080096b2

080087e4 <_calloc_r>:
 80087e4:	b570      	push	{r4, r5, r6, lr}
 80087e6:	fba1 5402 	umull	r5, r4, r1, r2
 80087ea:	b93c      	cbnz	r4, 80087fc <_calloc_r+0x18>
 80087ec:	4629      	mov	r1, r5
 80087ee:	f7fe f965 	bl	8006abc <_malloc_r>
 80087f2:	4606      	mov	r6, r0
 80087f4:	b928      	cbnz	r0, 8008802 <_calloc_r+0x1e>
 80087f6:	2600      	movs	r6, #0
 80087f8:	4630      	mov	r0, r6
 80087fa:	bd70      	pop	{r4, r5, r6, pc}
 80087fc:	220c      	movs	r2, #12
 80087fe:	6002      	str	r2, [r0, #0]
 8008800:	e7f9      	b.n	80087f6 <_calloc_r+0x12>
 8008802:	462a      	mov	r2, r5
 8008804:	4621      	mov	r1, r4
 8008806:	f7fd f9f7 	bl	8005bf8 <memset>
 800880a:	e7f5      	b.n	80087f8 <_calloc_r+0x14>

0800880c <rshift>:
 800880c:	6903      	ldr	r3, [r0, #16]
 800880e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008812:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008816:	f100 0414 	add.w	r4, r0, #20
 800881a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800881e:	dd46      	ble.n	80088ae <rshift+0xa2>
 8008820:	f011 011f 	ands.w	r1, r1, #31
 8008824:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008828:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800882c:	d10c      	bne.n	8008848 <rshift+0x3c>
 800882e:	4629      	mov	r1, r5
 8008830:	f100 0710 	add.w	r7, r0, #16
 8008834:	42b1      	cmp	r1, r6
 8008836:	d335      	bcc.n	80088a4 <rshift+0x98>
 8008838:	1a9b      	subs	r3, r3, r2
 800883a:	009b      	lsls	r3, r3, #2
 800883c:	1eea      	subs	r2, r5, #3
 800883e:	4296      	cmp	r6, r2
 8008840:	bf38      	it	cc
 8008842:	2300      	movcc	r3, #0
 8008844:	4423      	add	r3, r4
 8008846:	e015      	b.n	8008874 <rshift+0x68>
 8008848:	46a1      	mov	r9, r4
 800884a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800884e:	f1c1 0820 	rsb	r8, r1, #32
 8008852:	40cf      	lsrs	r7, r1
 8008854:	f105 0e04 	add.w	lr, r5, #4
 8008858:	4576      	cmp	r6, lr
 800885a:	46f4      	mov	ip, lr
 800885c:	d816      	bhi.n	800888c <rshift+0x80>
 800885e:	1a9a      	subs	r2, r3, r2
 8008860:	0092      	lsls	r2, r2, #2
 8008862:	3a04      	subs	r2, #4
 8008864:	3501      	adds	r5, #1
 8008866:	42ae      	cmp	r6, r5
 8008868:	bf38      	it	cc
 800886a:	2200      	movcc	r2, #0
 800886c:	18a3      	adds	r3, r4, r2
 800886e:	50a7      	str	r7, [r4, r2]
 8008870:	b107      	cbz	r7, 8008874 <rshift+0x68>
 8008872:	3304      	adds	r3, #4
 8008874:	42a3      	cmp	r3, r4
 8008876:	eba3 0204 	sub.w	r2, r3, r4
 800887a:	bf08      	it	eq
 800887c:	2300      	moveq	r3, #0
 800887e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008882:	6102      	str	r2, [r0, #16]
 8008884:	bf08      	it	eq
 8008886:	6143      	streq	r3, [r0, #20]
 8008888:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800888c:	f8dc c000 	ldr.w	ip, [ip]
 8008890:	fa0c fc08 	lsl.w	ip, ip, r8
 8008894:	ea4c 0707 	orr.w	r7, ip, r7
 8008898:	f849 7b04 	str.w	r7, [r9], #4
 800889c:	f85e 7b04 	ldr.w	r7, [lr], #4
 80088a0:	40cf      	lsrs	r7, r1
 80088a2:	e7d9      	b.n	8008858 <rshift+0x4c>
 80088a4:	f851 cb04 	ldr.w	ip, [r1], #4
 80088a8:	f847 cf04 	str.w	ip, [r7, #4]!
 80088ac:	e7c2      	b.n	8008834 <rshift+0x28>
 80088ae:	4623      	mov	r3, r4
 80088b0:	e7e0      	b.n	8008874 <rshift+0x68>

080088b2 <__hexdig_fun>:
 80088b2:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 80088b6:	2b09      	cmp	r3, #9
 80088b8:	d802      	bhi.n	80088c0 <__hexdig_fun+0xe>
 80088ba:	3820      	subs	r0, #32
 80088bc:	b2c0      	uxtb	r0, r0
 80088be:	4770      	bx	lr
 80088c0:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 80088c4:	2b05      	cmp	r3, #5
 80088c6:	d801      	bhi.n	80088cc <__hexdig_fun+0x1a>
 80088c8:	3847      	subs	r0, #71	@ 0x47
 80088ca:	e7f7      	b.n	80088bc <__hexdig_fun+0xa>
 80088cc:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 80088d0:	2b05      	cmp	r3, #5
 80088d2:	d801      	bhi.n	80088d8 <__hexdig_fun+0x26>
 80088d4:	3827      	subs	r0, #39	@ 0x27
 80088d6:	e7f1      	b.n	80088bc <__hexdig_fun+0xa>
 80088d8:	2000      	movs	r0, #0
 80088da:	4770      	bx	lr

080088dc <__gethex>:
 80088dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088e0:	468a      	mov	sl, r1
 80088e2:	4690      	mov	r8, r2
 80088e4:	b085      	sub	sp, #20
 80088e6:	9302      	str	r3, [sp, #8]
 80088e8:	680b      	ldr	r3, [r1, #0]
 80088ea:	9001      	str	r0, [sp, #4]
 80088ec:	1c9c      	adds	r4, r3, #2
 80088ee:	46a1      	mov	r9, r4
 80088f0:	f814 0b01 	ldrb.w	r0, [r4], #1
 80088f4:	2830      	cmp	r0, #48	@ 0x30
 80088f6:	d0fa      	beq.n	80088ee <__gethex+0x12>
 80088f8:	eba9 0303 	sub.w	r3, r9, r3
 80088fc:	f1a3 0b02 	sub.w	fp, r3, #2
 8008900:	f7ff ffd7 	bl	80088b2 <__hexdig_fun>
 8008904:	4605      	mov	r5, r0
 8008906:	2800      	cmp	r0, #0
 8008908:	d168      	bne.n	80089dc <__gethex+0x100>
 800890a:	2201      	movs	r2, #1
 800890c:	4648      	mov	r0, r9
 800890e:	499f      	ldr	r1, [pc, #636]	@ (8008b8c <__gethex+0x2b0>)
 8008910:	f7ff feff 	bl	8008712 <strncmp>
 8008914:	4607      	mov	r7, r0
 8008916:	2800      	cmp	r0, #0
 8008918:	d167      	bne.n	80089ea <__gethex+0x10e>
 800891a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800891e:	4626      	mov	r6, r4
 8008920:	f7ff ffc7 	bl	80088b2 <__hexdig_fun>
 8008924:	2800      	cmp	r0, #0
 8008926:	d062      	beq.n	80089ee <__gethex+0x112>
 8008928:	4623      	mov	r3, r4
 800892a:	7818      	ldrb	r0, [r3, #0]
 800892c:	4699      	mov	r9, r3
 800892e:	2830      	cmp	r0, #48	@ 0x30
 8008930:	f103 0301 	add.w	r3, r3, #1
 8008934:	d0f9      	beq.n	800892a <__gethex+0x4e>
 8008936:	f7ff ffbc 	bl	80088b2 <__hexdig_fun>
 800893a:	fab0 f580 	clz	r5, r0
 800893e:	f04f 0b01 	mov.w	fp, #1
 8008942:	096d      	lsrs	r5, r5, #5
 8008944:	464a      	mov	r2, r9
 8008946:	4616      	mov	r6, r2
 8008948:	7830      	ldrb	r0, [r6, #0]
 800894a:	3201      	adds	r2, #1
 800894c:	f7ff ffb1 	bl	80088b2 <__hexdig_fun>
 8008950:	2800      	cmp	r0, #0
 8008952:	d1f8      	bne.n	8008946 <__gethex+0x6a>
 8008954:	2201      	movs	r2, #1
 8008956:	4630      	mov	r0, r6
 8008958:	498c      	ldr	r1, [pc, #560]	@ (8008b8c <__gethex+0x2b0>)
 800895a:	f7ff feda 	bl	8008712 <strncmp>
 800895e:	2800      	cmp	r0, #0
 8008960:	d13f      	bne.n	80089e2 <__gethex+0x106>
 8008962:	b944      	cbnz	r4, 8008976 <__gethex+0x9a>
 8008964:	1c74      	adds	r4, r6, #1
 8008966:	4622      	mov	r2, r4
 8008968:	4616      	mov	r6, r2
 800896a:	7830      	ldrb	r0, [r6, #0]
 800896c:	3201      	adds	r2, #1
 800896e:	f7ff ffa0 	bl	80088b2 <__hexdig_fun>
 8008972:	2800      	cmp	r0, #0
 8008974:	d1f8      	bne.n	8008968 <__gethex+0x8c>
 8008976:	1ba4      	subs	r4, r4, r6
 8008978:	00a7      	lsls	r7, r4, #2
 800897a:	7833      	ldrb	r3, [r6, #0]
 800897c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8008980:	2b50      	cmp	r3, #80	@ 0x50
 8008982:	d13e      	bne.n	8008a02 <__gethex+0x126>
 8008984:	7873      	ldrb	r3, [r6, #1]
 8008986:	2b2b      	cmp	r3, #43	@ 0x2b
 8008988:	d033      	beq.n	80089f2 <__gethex+0x116>
 800898a:	2b2d      	cmp	r3, #45	@ 0x2d
 800898c:	d034      	beq.n	80089f8 <__gethex+0x11c>
 800898e:	2400      	movs	r4, #0
 8008990:	1c71      	adds	r1, r6, #1
 8008992:	7808      	ldrb	r0, [r1, #0]
 8008994:	f7ff ff8d 	bl	80088b2 <__hexdig_fun>
 8008998:	1e43      	subs	r3, r0, #1
 800899a:	b2db      	uxtb	r3, r3
 800899c:	2b18      	cmp	r3, #24
 800899e:	d830      	bhi.n	8008a02 <__gethex+0x126>
 80089a0:	f1a0 0210 	sub.w	r2, r0, #16
 80089a4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80089a8:	f7ff ff83 	bl	80088b2 <__hexdig_fun>
 80089ac:	f100 3cff 	add.w	ip, r0, #4294967295
 80089b0:	fa5f fc8c 	uxtb.w	ip, ip
 80089b4:	f1bc 0f18 	cmp.w	ip, #24
 80089b8:	f04f 030a 	mov.w	r3, #10
 80089bc:	d91e      	bls.n	80089fc <__gethex+0x120>
 80089be:	b104      	cbz	r4, 80089c2 <__gethex+0xe6>
 80089c0:	4252      	negs	r2, r2
 80089c2:	4417      	add	r7, r2
 80089c4:	f8ca 1000 	str.w	r1, [sl]
 80089c8:	b1ed      	cbz	r5, 8008a06 <__gethex+0x12a>
 80089ca:	f1bb 0f00 	cmp.w	fp, #0
 80089ce:	bf0c      	ite	eq
 80089d0:	2506      	moveq	r5, #6
 80089d2:	2500      	movne	r5, #0
 80089d4:	4628      	mov	r0, r5
 80089d6:	b005      	add	sp, #20
 80089d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089dc:	2500      	movs	r5, #0
 80089de:	462c      	mov	r4, r5
 80089e0:	e7b0      	b.n	8008944 <__gethex+0x68>
 80089e2:	2c00      	cmp	r4, #0
 80089e4:	d1c7      	bne.n	8008976 <__gethex+0x9a>
 80089e6:	4627      	mov	r7, r4
 80089e8:	e7c7      	b.n	800897a <__gethex+0x9e>
 80089ea:	464e      	mov	r6, r9
 80089ec:	462f      	mov	r7, r5
 80089ee:	2501      	movs	r5, #1
 80089f0:	e7c3      	b.n	800897a <__gethex+0x9e>
 80089f2:	2400      	movs	r4, #0
 80089f4:	1cb1      	adds	r1, r6, #2
 80089f6:	e7cc      	b.n	8008992 <__gethex+0xb6>
 80089f8:	2401      	movs	r4, #1
 80089fa:	e7fb      	b.n	80089f4 <__gethex+0x118>
 80089fc:	fb03 0002 	mla	r0, r3, r2, r0
 8008a00:	e7ce      	b.n	80089a0 <__gethex+0xc4>
 8008a02:	4631      	mov	r1, r6
 8008a04:	e7de      	b.n	80089c4 <__gethex+0xe8>
 8008a06:	4629      	mov	r1, r5
 8008a08:	eba6 0309 	sub.w	r3, r6, r9
 8008a0c:	3b01      	subs	r3, #1
 8008a0e:	2b07      	cmp	r3, #7
 8008a10:	dc0a      	bgt.n	8008a28 <__gethex+0x14c>
 8008a12:	9801      	ldr	r0, [sp, #4]
 8008a14:	f7fe f8de 	bl	8006bd4 <_Balloc>
 8008a18:	4604      	mov	r4, r0
 8008a1a:	b940      	cbnz	r0, 8008a2e <__gethex+0x152>
 8008a1c:	4602      	mov	r2, r0
 8008a1e:	21e4      	movs	r1, #228	@ 0xe4
 8008a20:	4b5b      	ldr	r3, [pc, #364]	@ (8008b90 <__gethex+0x2b4>)
 8008a22:	485c      	ldr	r0, [pc, #368]	@ (8008b94 <__gethex+0x2b8>)
 8008a24:	f7ff fec0 	bl	80087a8 <__assert_func>
 8008a28:	3101      	adds	r1, #1
 8008a2a:	105b      	asrs	r3, r3, #1
 8008a2c:	e7ef      	b.n	8008a0e <__gethex+0x132>
 8008a2e:	2300      	movs	r3, #0
 8008a30:	f100 0a14 	add.w	sl, r0, #20
 8008a34:	4655      	mov	r5, sl
 8008a36:	469b      	mov	fp, r3
 8008a38:	45b1      	cmp	r9, r6
 8008a3a:	d337      	bcc.n	8008aac <__gethex+0x1d0>
 8008a3c:	f845 bb04 	str.w	fp, [r5], #4
 8008a40:	eba5 050a 	sub.w	r5, r5, sl
 8008a44:	10ad      	asrs	r5, r5, #2
 8008a46:	6125      	str	r5, [r4, #16]
 8008a48:	4658      	mov	r0, fp
 8008a4a:	f7fe f9b5 	bl	8006db8 <__hi0bits>
 8008a4e:	016d      	lsls	r5, r5, #5
 8008a50:	f8d8 6000 	ldr.w	r6, [r8]
 8008a54:	1a2d      	subs	r5, r5, r0
 8008a56:	42b5      	cmp	r5, r6
 8008a58:	dd54      	ble.n	8008b04 <__gethex+0x228>
 8008a5a:	1bad      	subs	r5, r5, r6
 8008a5c:	4629      	mov	r1, r5
 8008a5e:	4620      	mov	r0, r4
 8008a60:	f7fe fd3d 	bl	80074de <__any_on>
 8008a64:	4681      	mov	r9, r0
 8008a66:	b178      	cbz	r0, 8008a88 <__gethex+0x1ac>
 8008a68:	f04f 0901 	mov.w	r9, #1
 8008a6c:	1e6b      	subs	r3, r5, #1
 8008a6e:	1159      	asrs	r1, r3, #5
 8008a70:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8008a74:	f003 021f 	and.w	r2, r3, #31
 8008a78:	fa09 f202 	lsl.w	r2, r9, r2
 8008a7c:	420a      	tst	r2, r1
 8008a7e:	d003      	beq.n	8008a88 <__gethex+0x1ac>
 8008a80:	454b      	cmp	r3, r9
 8008a82:	dc36      	bgt.n	8008af2 <__gethex+0x216>
 8008a84:	f04f 0902 	mov.w	r9, #2
 8008a88:	4629      	mov	r1, r5
 8008a8a:	4620      	mov	r0, r4
 8008a8c:	f7ff febe 	bl	800880c <rshift>
 8008a90:	442f      	add	r7, r5
 8008a92:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008a96:	42bb      	cmp	r3, r7
 8008a98:	da42      	bge.n	8008b20 <__gethex+0x244>
 8008a9a:	4621      	mov	r1, r4
 8008a9c:	9801      	ldr	r0, [sp, #4]
 8008a9e:	f7fe f8d9 	bl	8006c54 <_Bfree>
 8008aa2:	2300      	movs	r3, #0
 8008aa4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008aa6:	25a3      	movs	r5, #163	@ 0xa3
 8008aa8:	6013      	str	r3, [r2, #0]
 8008aaa:	e793      	b.n	80089d4 <__gethex+0xf8>
 8008aac:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8008ab0:	2a2e      	cmp	r2, #46	@ 0x2e
 8008ab2:	d012      	beq.n	8008ada <__gethex+0x1fe>
 8008ab4:	2b20      	cmp	r3, #32
 8008ab6:	d104      	bne.n	8008ac2 <__gethex+0x1e6>
 8008ab8:	f845 bb04 	str.w	fp, [r5], #4
 8008abc:	f04f 0b00 	mov.w	fp, #0
 8008ac0:	465b      	mov	r3, fp
 8008ac2:	7830      	ldrb	r0, [r6, #0]
 8008ac4:	9303      	str	r3, [sp, #12]
 8008ac6:	f7ff fef4 	bl	80088b2 <__hexdig_fun>
 8008aca:	9b03      	ldr	r3, [sp, #12]
 8008acc:	f000 000f 	and.w	r0, r0, #15
 8008ad0:	4098      	lsls	r0, r3
 8008ad2:	ea4b 0b00 	orr.w	fp, fp, r0
 8008ad6:	3304      	adds	r3, #4
 8008ad8:	e7ae      	b.n	8008a38 <__gethex+0x15c>
 8008ada:	45b1      	cmp	r9, r6
 8008adc:	d8ea      	bhi.n	8008ab4 <__gethex+0x1d8>
 8008ade:	2201      	movs	r2, #1
 8008ae0:	4630      	mov	r0, r6
 8008ae2:	492a      	ldr	r1, [pc, #168]	@ (8008b8c <__gethex+0x2b0>)
 8008ae4:	9303      	str	r3, [sp, #12]
 8008ae6:	f7ff fe14 	bl	8008712 <strncmp>
 8008aea:	9b03      	ldr	r3, [sp, #12]
 8008aec:	2800      	cmp	r0, #0
 8008aee:	d1e1      	bne.n	8008ab4 <__gethex+0x1d8>
 8008af0:	e7a2      	b.n	8008a38 <__gethex+0x15c>
 8008af2:	4620      	mov	r0, r4
 8008af4:	1ea9      	subs	r1, r5, #2
 8008af6:	f7fe fcf2 	bl	80074de <__any_on>
 8008afa:	2800      	cmp	r0, #0
 8008afc:	d0c2      	beq.n	8008a84 <__gethex+0x1a8>
 8008afe:	f04f 0903 	mov.w	r9, #3
 8008b02:	e7c1      	b.n	8008a88 <__gethex+0x1ac>
 8008b04:	da09      	bge.n	8008b1a <__gethex+0x23e>
 8008b06:	1b75      	subs	r5, r6, r5
 8008b08:	4621      	mov	r1, r4
 8008b0a:	462a      	mov	r2, r5
 8008b0c:	9801      	ldr	r0, [sp, #4]
 8008b0e:	f7fe fab7 	bl	8007080 <__lshift>
 8008b12:	4604      	mov	r4, r0
 8008b14:	1b7f      	subs	r7, r7, r5
 8008b16:	f100 0a14 	add.w	sl, r0, #20
 8008b1a:	f04f 0900 	mov.w	r9, #0
 8008b1e:	e7b8      	b.n	8008a92 <__gethex+0x1b6>
 8008b20:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8008b24:	42bd      	cmp	r5, r7
 8008b26:	dd6f      	ble.n	8008c08 <__gethex+0x32c>
 8008b28:	1bed      	subs	r5, r5, r7
 8008b2a:	42ae      	cmp	r6, r5
 8008b2c:	dc34      	bgt.n	8008b98 <__gethex+0x2bc>
 8008b2e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008b32:	2b02      	cmp	r3, #2
 8008b34:	d022      	beq.n	8008b7c <__gethex+0x2a0>
 8008b36:	2b03      	cmp	r3, #3
 8008b38:	d024      	beq.n	8008b84 <__gethex+0x2a8>
 8008b3a:	2b01      	cmp	r3, #1
 8008b3c:	d115      	bne.n	8008b6a <__gethex+0x28e>
 8008b3e:	42ae      	cmp	r6, r5
 8008b40:	d113      	bne.n	8008b6a <__gethex+0x28e>
 8008b42:	2e01      	cmp	r6, #1
 8008b44:	d10b      	bne.n	8008b5e <__gethex+0x282>
 8008b46:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008b4a:	9a02      	ldr	r2, [sp, #8]
 8008b4c:	2562      	movs	r5, #98	@ 0x62
 8008b4e:	6013      	str	r3, [r2, #0]
 8008b50:	2301      	movs	r3, #1
 8008b52:	6123      	str	r3, [r4, #16]
 8008b54:	f8ca 3000 	str.w	r3, [sl]
 8008b58:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008b5a:	601c      	str	r4, [r3, #0]
 8008b5c:	e73a      	b.n	80089d4 <__gethex+0xf8>
 8008b5e:	4620      	mov	r0, r4
 8008b60:	1e71      	subs	r1, r6, #1
 8008b62:	f7fe fcbc 	bl	80074de <__any_on>
 8008b66:	2800      	cmp	r0, #0
 8008b68:	d1ed      	bne.n	8008b46 <__gethex+0x26a>
 8008b6a:	4621      	mov	r1, r4
 8008b6c:	9801      	ldr	r0, [sp, #4]
 8008b6e:	f7fe f871 	bl	8006c54 <_Bfree>
 8008b72:	2300      	movs	r3, #0
 8008b74:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008b76:	2550      	movs	r5, #80	@ 0x50
 8008b78:	6013      	str	r3, [r2, #0]
 8008b7a:	e72b      	b.n	80089d4 <__gethex+0xf8>
 8008b7c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d1f3      	bne.n	8008b6a <__gethex+0x28e>
 8008b82:	e7e0      	b.n	8008b46 <__gethex+0x26a>
 8008b84:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d1dd      	bne.n	8008b46 <__gethex+0x26a>
 8008b8a:	e7ee      	b.n	8008b6a <__gethex+0x28e>
 8008b8c:	08009540 	.word	0x08009540
 8008b90:	080093d7 	.word	0x080093d7
 8008b94:	080096ee 	.word	0x080096ee
 8008b98:	1e6f      	subs	r7, r5, #1
 8008b9a:	f1b9 0f00 	cmp.w	r9, #0
 8008b9e:	d130      	bne.n	8008c02 <__gethex+0x326>
 8008ba0:	b127      	cbz	r7, 8008bac <__gethex+0x2d0>
 8008ba2:	4639      	mov	r1, r7
 8008ba4:	4620      	mov	r0, r4
 8008ba6:	f7fe fc9a 	bl	80074de <__any_on>
 8008baa:	4681      	mov	r9, r0
 8008bac:	2301      	movs	r3, #1
 8008bae:	4629      	mov	r1, r5
 8008bb0:	1b76      	subs	r6, r6, r5
 8008bb2:	2502      	movs	r5, #2
 8008bb4:	117a      	asrs	r2, r7, #5
 8008bb6:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8008bba:	f007 071f 	and.w	r7, r7, #31
 8008bbe:	40bb      	lsls	r3, r7
 8008bc0:	4213      	tst	r3, r2
 8008bc2:	4620      	mov	r0, r4
 8008bc4:	bf18      	it	ne
 8008bc6:	f049 0902 	orrne.w	r9, r9, #2
 8008bca:	f7ff fe1f 	bl	800880c <rshift>
 8008bce:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8008bd2:	f1b9 0f00 	cmp.w	r9, #0
 8008bd6:	d047      	beq.n	8008c68 <__gethex+0x38c>
 8008bd8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008bdc:	2b02      	cmp	r3, #2
 8008bde:	d015      	beq.n	8008c0c <__gethex+0x330>
 8008be0:	2b03      	cmp	r3, #3
 8008be2:	d017      	beq.n	8008c14 <__gethex+0x338>
 8008be4:	2b01      	cmp	r3, #1
 8008be6:	d109      	bne.n	8008bfc <__gethex+0x320>
 8008be8:	f019 0f02 	tst.w	r9, #2
 8008bec:	d006      	beq.n	8008bfc <__gethex+0x320>
 8008bee:	f8da 3000 	ldr.w	r3, [sl]
 8008bf2:	ea49 0903 	orr.w	r9, r9, r3
 8008bf6:	f019 0f01 	tst.w	r9, #1
 8008bfa:	d10e      	bne.n	8008c1a <__gethex+0x33e>
 8008bfc:	f045 0510 	orr.w	r5, r5, #16
 8008c00:	e032      	b.n	8008c68 <__gethex+0x38c>
 8008c02:	f04f 0901 	mov.w	r9, #1
 8008c06:	e7d1      	b.n	8008bac <__gethex+0x2d0>
 8008c08:	2501      	movs	r5, #1
 8008c0a:	e7e2      	b.n	8008bd2 <__gethex+0x2f6>
 8008c0c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008c0e:	f1c3 0301 	rsb	r3, r3, #1
 8008c12:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008c14:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d0f0      	beq.n	8008bfc <__gethex+0x320>
 8008c1a:	f04f 0c00 	mov.w	ip, #0
 8008c1e:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008c22:	f104 0314 	add.w	r3, r4, #20
 8008c26:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8008c2a:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8008c2e:	4618      	mov	r0, r3
 8008c30:	f853 2b04 	ldr.w	r2, [r3], #4
 8008c34:	f1b2 3fff 	cmp.w	r2, #4294967295
 8008c38:	d01b      	beq.n	8008c72 <__gethex+0x396>
 8008c3a:	3201      	adds	r2, #1
 8008c3c:	6002      	str	r2, [r0, #0]
 8008c3e:	2d02      	cmp	r5, #2
 8008c40:	f104 0314 	add.w	r3, r4, #20
 8008c44:	d13c      	bne.n	8008cc0 <__gethex+0x3e4>
 8008c46:	f8d8 2000 	ldr.w	r2, [r8]
 8008c4a:	3a01      	subs	r2, #1
 8008c4c:	42b2      	cmp	r2, r6
 8008c4e:	d109      	bne.n	8008c64 <__gethex+0x388>
 8008c50:	2201      	movs	r2, #1
 8008c52:	1171      	asrs	r1, r6, #5
 8008c54:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008c58:	f006 061f 	and.w	r6, r6, #31
 8008c5c:	fa02 f606 	lsl.w	r6, r2, r6
 8008c60:	421e      	tst	r6, r3
 8008c62:	d13a      	bne.n	8008cda <__gethex+0x3fe>
 8008c64:	f045 0520 	orr.w	r5, r5, #32
 8008c68:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008c6a:	601c      	str	r4, [r3, #0]
 8008c6c:	9b02      	ldr	r3, [sp, #8]
 8008c6e:	601f      	str	r7, [r3, #0]
 8008c70:	e6b0      	b.n	80089d4 <__gethex+0xf8>
 8008c72:	4299      	cmp	r1, r3
 8008c74:	f843 cc04 	str.w	ip, [r3, #-4]
 8008c78:	d8d9      	bhi.n	8008c2e <__gethex+0x352>
 8008c7a:	68a3      	ldr	r3, [r4, #8]
 8008c7c:	459b      	cmp	fp, r3
 8008c7e:	db17      	blt.n	8008cb0 <__gethex+0x3d4>
 8008c80:	6861      	ldr	r1, [r4, #4]
 8008c82:	9801      	ldr	r0, [sp, #4]
 8008c84:	3101      	adds	r1, #1
 8008c86:	f7fd ffa5 	bl	8006bd4 <_Balloc>
 8008c8a:	4681      	mov	r9, r0
 8008c8c:	b918      	cbnz	r0, 8008c96 <__gethex+0x3ba>
 8008c8e:	4602      	mov	r2, r0
 8008c90:	2184      	movs	r1, #132	@ 0x84
 8008c92:	4b19      	ldr	r3, [pc, #100]	@ (8008cf8 <__gethex+0x41c>)
 8008c94:	e6c5      	b.n	8008a22 <__gethex+0x146>
 8008c96:	6922      	ldr	r2, [r4, #16]
 8008c98:	f104 010c 	add.w	r1, r4, #12
 8008c9c:	3202      	adds	r2, #2
 8008c9e:	0092      	lsls	r2, r2, #2
 8008ca0:	300c      	adds	r0, #12
 8008ca2:	f7fd f836 	bl	8005d12 <memcpy>
 8008ca6:	4621      	mov	r1, r4
 8008ca8:	9801      	ldr	r0, [sp, #4]
 8008caa:	f7fd ffd3 	bl	8006c54 <_Bfree>
 8008cae:	464c      	mov	r4, r9
 8008cb0:	6923      	ldr	r3, [r4, #16]
 8008cb2:	1c5a      	adds	r2, r3, #1
 8008cb4:	6122      	str	r2, [r4, #16]
 8008cb6:	2201      	movs	r2, #1
 8008cb8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008cbc:	615a      	str	r2, [r3, #20]
 8008cbe:	e7be      	b.n	8008c3e <__gethex+0x362>
 8008cc0:	6922      	ldr	r2, [r4, #16]
 8008cc2:	455a      	cmp	r2, fp
 8008cc4:	dd0b      	ble.n	8008cde <__gethex+0x402>
 8008cc6:	2101      	movs	r1, #1
 8008cc8:	4620      	mov	r0, r4
 8008cca:	f7ff fd9f 	bl	800880c <rshift>
 8008cce:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008cd2:	3701      	adds	r7, #1
 8008cd4:	42bb      	cmp	r3, r7
 8008cd6:	f6ff aee0 	blt.w	8008a9a <__gethex+0x1be>
 8008cda:	2501      	movs	r5, #1
 8008cdc:	e7c2      	b.n	8008c64 <__gethex+0x388>
 8008cde:	f016 061f 	ands.w	r6, r6, #31
 8008ce2:	d0fa      	beq.n	8008cda <__gethex+0x3fe>
 8008ce4:	4453      	add	r3, sl
 8008ce6:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8008cea:	f7fe f865 	bl	8006db8 <__hi0bits>
 8008cee:	f1c6 0620 	rsb	r6, r6, #32
 8008cf2:	42b0      	cmp	r0, r6
 8008cf4:	dbe7      	blt.n	8008cc6 <__gethex+0x3ea>
 8008cf6:	e7f0      	b.n	8008cda <__gethex+0x3fe>
 8008cf8:	080093d7 	.word	0x080093d7

08008cfc <L_shift>:
 8008cfc:	f1c2 0208 	rsb	r2, r2, #8
 8008d00:	0092      	lsls	r2, r2, #2
 8008d02:	b570      	push	{r4, r5, r6, lr}
 8008d04:	f1c2 0620 	rsb	r6, r2, #32
 8008d08:	6843      	ldr	r3, [r0, #4]
 8008d0a:	6804      	ldr	r4, [r0, #0]
 8008d0c:	fa03 f506 	lsl.w	r5, r3, r6
 8008d10:	432c      	orrs	r4, r5
 8008d12:	40d3      	lsrs	r3, r2
 8008d14:	6004      	str	r4, [r0, #0]
 8008d16:	f840 3f04 	str.w	r3, [r0, #4]!
 8008d1a:	4288      	cmp	r0, r1
 8008d1c:	d3f4      	bcc.n	8008d08 <L_shift+0xc>
 8008d1e:	bd70      	pop	{r4, r5, r6, pc}

08008d20 <__match>:
 8008d20:	b530      	push	{r4, r5, lr}
 8008d22:	6803      	ldr	r3, [r0, #0]
 8008d24:	3301      	adds	r3, #1
 8008d26:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008d2a:	b914      	cbnz	r4, 8008d32 <__match+0x12>
 8008d2c:	6003      	str	r3, [r0, #0]
 8008d2e:	2001      	movs	r0, #1
 8008d30:	bd30      	pop	{r4, r5, pc}
 8008d32:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008d36:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8008d3a:	2d19      	cmp	r5, #25
 8008d3c:	bf98      	it	ls
 8008d3e:	3220      	addls	r2, #32
 8008d40:	42a2      	cmp	r2, r4
 8008d42:	d0f0      	beq.n	8008d26 <__match+0x6>
 8008d44:	2000      	movs	r0, #0
 8008d46:	e7f3      	b.n	8008d30 <__match+0x10>

08008d48 <__hexnan>:
 8008d48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d4c:	2500      	movs	r5, #0
 8008d4e:	680b      	ldr	r3, [r1, #0]
 8008d50:	4682      	mov	sl, r0
 8008d52:	115e      	asrs	r6, r3, #5
 8008d54:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008d58:	f013 031f 	ands.w	r3, r3, #31
 8008d5c:	bf18      	it	ne
 8008d5e:	3604      	addne	r6, #4
 8008d60:	1f37      	subs	r7, r6, #4
 8008d62:	4690      	mov	r8, r2
 8008d64:	46b9      	mov	r9, r7
 8008d66:	463c      	mov	r4, r7
 8008d68:	46ab      	mov	fp, r5
 8008d6a:	b087      	sub	sp, #28
 8008d6c:	6801      	ldr	r1, [r0, #0]
 8008d6e:	9301      	str	r3, [sp, #4]
 8008d70:	f846 5c04 	str.w	r5, [r6, #-4]
 8008d74:	9502      	str	r5, [sp, #8]
 8008d76:	784a      	ldrb	r2, [r1, #1]
 8008d78:	1c4b      	adds	r3, r1, #1
 8008d7a:	9303      	str	r3, [sp, #12]
 8008d7c:	b342      	cbz	r2, 8008dd0 <__hexnan+0x88>
 8008d7e:	4610      	mov	r0, r2
 8008d80:	9105      	str	r1, [sp, #20]
 8008d82:	9204      	str	r2, [sp, #16]
 8008d84:	f7ff fd95 	bl	80088b2 <__hexdig_fun>
 8008d88:	2800      	cmp	r0, #0
 8008d8a:	d151      	bne.n	8008e30 <__hexnan+0xe8>
 8008d8c:	9a04      	ldr	r2, [sp, #16]
 8008d8e:	9905      	ldr	r1, [sp, #20]
 8008d90:	2a20      	cmp	r2, #32
 8008d92:	d818      	bhi.n	8008dc6 <__hexnan+0x7e>
 8008d94:	9b02      	ldr	r3, [sp, #8]
 8008d96:	459b      	cmp	fp, r3
 8008d98:	dd13      	ble.n	8008dc2 <__hexnan+0x7a>
 8008d9a:	454c      	cmp	r4, r9
 8008d9c:	d206      	bcs.n	8008dac <__hexnan+0x64>
 8008d9e:	2d07      	cmp	r5, #7
 8008da0:	dc04      	bgt.n	8008dac <__hexnan+0x64>
 8008da2:	462a      	mov	r2, r5
 8008da4:	4649      	mov	r1, r9
 8008da6:	4620      	mov	r0, r4
 8008da8:	f7ff ffa8 	bl	8008cfc <L_shift>
 8008dac:	4544      	cmp	r4, r8
 8008dae:	d952      	bls.n	8008e56 <__hexnan+0x10e>
 8008db0:	2300      	movs	r3, #0
 8008db2:	f1a4 0904 	sub.w	r9, r4, #4
 8008db6:	f844 3c04 	str.w	r3, [r4, #-4]
 8008dba:	461d      	mov	r5, r3
 8008dbc:	464c      	mov	r4, r9
 8008dbe:	f8cd b008 	str.w	fp, [sp, #8]
 8008dc2:	9903      	ldr	r1, [sp, #12]
 8008dc4:	e7d7      	b.n	8008d76 <__hexnan+0x2e>
 8008dc6:	2a29      	cmp	r2, #41	@ 0x29
 8008dc8:	d157      	bne.n	8008e7a <__hexnan+0x132>
 8008dca:	3102      	adds	r1, #2
 8008dcc:	f8ca 1000 	str.w	r1, [sl]
 8008dd0:	f1bb 0f00 	cmp.w	fp, #0
 8008dd4:	d051      	beq.n	8008e7a <__hexnan+0x132>
 8008dd6:	454c      	cmp	r4, r9
 8008dd8:	d206      	bcs.n	8008de8 <__hexnan+0xa0>
 8008dda:	2d07      	cmp	r5, #7
 8008ddc:	dc04      	bgt.n	8008de8 <__hexnan+0xa0>
 8008dde:	462a      	mov	r2, r5
 8008de0:	4649      	mov	r1, r9
 8008de2:	4620      	mov	r0, r4
 8008de4:	f7ff ff8a 	bl	8008cfc <L_shift>
 8008de8:	4544      	cmp	r4, r8
 8008dea:	d936      	bls.n	8008e5a <__hexnan+0x112>
 8008dec:	4623      	mov	r3, r4
 8008dee:	f1a8 0204 	sub.w	r2, r8, #4
 8008df2:	f853 1b04 	ldr.w	r1, [r3], #4
 8008df6:	429f      	cmp	r7, r3
 8008df8:	f842 1f04 	str.w	r1, [r2, #4]!
 8008dfc:	d2f9      	bcs.n	8008df2 <__hexnan+0xaa>
 8008dfe:	1b3b      	subs	r3, r7, r4
 8008e00:	f023 0303 	bic.w	r3, r3, #3
 8008e04:	3304      	adds	r3, #4
 8008e06:	3401      	adds	r4, #1
 8008e08:	3e03      	subs	r6, #3
 8008e0a:	42b4      	cmp	r4, r6
 8008e0c:	bf88      	it	hi
 8008e0e:	2304      	movhi	r3, #4
 8008e10:	2200      	movs	r2, #0
 8008e12:	4443      	add	r3, r8
 8008e14:	f843 2b04 	str.w	r2, [r3], #4
 8008e18:	429f      	cmp	r7, r3
 8008e1a:	d2fb      	bcs.n	8008e14 <__hexnan+0xcc>
 8008e1c:	683b      	ldr	r3, [r7, #0]
 8008e1e:	b91b      	cbnz	r3, 8008e28 <__hexnan+0xe0>
 8008e20:	4547      	cmp	r7, r8
 8008e22:	d128      	bne.n	8008e76 <__hexnan+0x12e>
 8008e24:	2301      	movs	r3, #1
 8008e26:	603b      	str	r3, [r7, #0]
 8008e28:	2005      	movs	r0, #5
 8008e2a:	b007      	add	sp, #28
 8008e2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e30:	3501      	adds	r5, #1
 8008e32:	2d08      	cmp	r5, #8
 8008e34:	f10b 0b01 	add.w	fp, fp, #1
 8008e38:	dd06      	ble.n	8008e48 <__hexnan+0x100>
 8008e3a:	4544      	cmp	r4, r8
 8008e3c:	d9c1      	bls.n	8008dc2 <__hexnan+0x7a>
 8008e3e:	2300      	movs	r3, #0
 8008e40:	2501      	movs	r5, #1
 8008e42:	f844 3c04 	str.w	r3, [r4, #-4]
 8008e46:	3c04      	subs	r4, #4
 8008e48:	6822      	ldr	r2, [r4, #0]
 8008e4a:	f000 000f 	and.w	r0, r0, #15
 8008e4e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8008e52:	6020      	str	r0, [r4, #0]
 8008e54:	e7b5      	b.n	8008dc2 <__hexnan+0x7a>
 8008e56:	2508      	movs	r5, #8
 8008e58:	e7b3      	b.n	8008dc2 <__hexnan+0x7a>
 8008e5a:	9b01      	ldr	r3, [sp, #4]
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d0dd      	beq.n	8008e1c <__hexnan+0xd4>
 8008e60:	f04f 32ff 	mov.w	r2, #4294967295
 8008e64:	f1c3 0320 	rsb	r3, r3, #32
 8008e68:	40da      	lsrs	r2, r3
 8008e6a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8008e6e:	4013      	ands	r3, r2
 8008e70:	f846 3c04 	str.w	r3, [r6, #-4]
 8008e74:	e7d2      	b.n	8008e1c <__hexnan+0xd4>
 8008e76:	3f04      	subs	r7, #4
 8008e78:	e7d0      	b.n	8008e1c <__hexnan+0xd4>
 8008e7a:	2004      	movs	r0, #4
 8008e7c:	e7d5      	b.n	8008e2a <__hexnan+0xe2>

08008e7e <__ascii_mbtowc>:
 8008e7e:	b082      	sub	sp, #8
 8008e80:	b901      	cbnz	r1, 8008e84 <__ascii_mbtowc+0x6>
 8008e82:	a901      	add	r1, sp, #4
 8008e84:	b142      	cbz	r2, 8008e98 <__ascii_mbtowc+0x1a>
 8008e86:	b14b      	cbz	r3, 8008e9c <__ascii_mbtowc+0x1e>
 8008e88:	7813      	ldrb	r3, [r2, #0]
 8008e8a:	600b      	str	r3, [r1, #0]
 8008e8c:	7812      	ldrb	r2, [r2, #0]
 8008e8e:	1e10      	subs	r0, r2, #0
 8008e90:	bf18      	it	ne
 8008e92:	2001      	movne	r0, #1
 8008e94:	b002      	add	sp, #8
 8008e96:	4770      	bx	lr
 8008e98:	4610      	mov	r0, r2
 8008e9a:	e7fb      	b.n	8008e94 <__ascii_mbtowc+0x16>
 8008e9c:	f06f 0001 	mvn.w	r0, #1
 8008ea0:	e7f8      	b.n	8008e94 <__ascii_mbtowc+0x16>

08008ea2 <_realloc_r>:
 8008ea2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ea6:	4680      	mov	r8, r0
 8008ea8:	4615      	mov	r5, r2
 8008eaa:	460c      	mov	r4, r1
 8008eac:	b921      	cbnz	r1, 8008eb8 <_realloc_r+0x16>
 8008eae:	4611      	mov	r1, r2
 8008eb0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008eb4:	f7fd be02 	b.w	8006abc <_malloc_r>
 8008eb8:	b92a      	cbnz	r2, 8008ec6 <_realloc_r+0x24>
 8008eba:	f7fd fd8d 	bl	80069d8 <_free_r>
 8008ebe:	2400      	movs	r4, #0
 8008ec0:	4620      	mov	r0, r4
 8008ec2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ec6:	f000 f840 	bl	8008f4a <_malloc_usable_size_r>
 8008eca:	4285      	cmp	r5, r0
 8008ecc:	4606      	mov	r6, r0
 8008ece:	d802      	bhi.n	8008ed6 <_realloc_r+0x34>
 8008ed0:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008ed4:	d8f4      	bhi.n	8008ec0 <_realloc_r+0x1e>
 8008ed6:	4629      	mov	r1, r5
 8008ed8:	4640      	mov	r0, r8
 8008eda:	f7fd fdef 	bl	8006abc <_malloc_r>
 8008ede:	4607      	mov	r7, r0
 8008ee0:	2800      	cmp	r0, #0
 8008ee2:	d0ec      	beq.n	8008ebe <_realloc_r+0x1c>
 8008ee4:	42b5      	cmp	r5, r6
 8008ee6:	462a      	mov	r2, r5
 8008ee8:	4621      	mov	r1, r4
 8008eea:	bf28      	it	cs
 8008eec:	4632      	movcs	r2, r6
 8008eee:	f7fc ff10 	bl	8005d12 <memcpy>
 8008ef2:	4621      	mov	r1, r4
 8008ef4:	4640      	mov	r0, r8
 8008ef6:	f7fd fd6f 	bl	80069d8 <_free_r>
 8008efa:	463c      	mov	r4, r7
 8008efc:	e7e0      	b.n	8008ec0 <_realloc_r+0x1e>

08008efe <__ascii_wctomb>:
 8008efe:	4603      	mov	r3, r0
 8008f00:	4608      	mov	r0, r1
 8008f02:	b141      	cbz	r1, 8008f16 <__ascii_wctomb+0x18>
 8008f04:	2aff      	cmp	r2, #255	@ 0xff
 8008f06:	d904      	bls.n	8008f12 <__ascii_wctomb+0x14>
 8008f08:	228a      	movs	r2, #138	@ 0x8a
 8008f0a:	f04f 30ff 	mov.w	r0, #4294967295
 8008f0e:	601a      	str	r2, [r3, #0]
 8008f10:	4770      	bx	lr
 8008f12:	2001      	movs	r0, #1
 8008f14:	700a      	strb	r2, [r1, #0]
 8008f16:	4770      	bx	lr

08008f18 <fiprintf>:
 8008f18:	b40e      	push	{r1, r2, r3}
 8008f1a:	b503      	push	{r0, r1, lr}
 8008f1c:	4601      	mov	r1, r0
 8008f1e:	ab03      	add	r3, sp, #12
 8008f20:	4805      	ldr	r0, [pc, #20]	@ (8008f38 <fiprintf+0x20>)
 8008f22:	f853 2b04 	ldr.w	r2, [r3], #4
 8008f26:	6800      	ldr	r0, [r0, #0]
 8008f28:	9301      	str	r3, [sp, #4]
 8008f2a:	f000 f83d 	bl	8008fa8 <_vfiprintf_r>
 8008f2e:	b002      	add	sp, #8
 8008f30:	f85d eb04 	ldr.w	lr, [sp], #4
 8008f34:	b003      	add	sp, #12
 8008f36:	4770      	bx	lr
 8008f38:	20000420 	.word	0x20000420

08008f3c <abort>:
 8008f3c:	2006      	movs	r0, #6
 8008f3e:	b508      	push	{r3, lr}
 8008f40:	f000 f972 	bl	8009228 <raise>
 8008f44:	2001      	movs	r0, #1
 8008f46:	f7f8 fa9c 	bl	8001482 <_exit>

08008f4a <_malloc_usable_size_r>:
 8008f4a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008f4e:	1f18      	subs	r0, r3, #4
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	bfbc      	itt	lt
 8008f54:	580b      	ldrlt	r3, [r1, r0]
 8008f56:	18c0      	addlt	r0, r0, r3
 8008f58:	4770      	bx	lr

08008f5a <__sfputc_r>:
 8008f5a:	6893      	ldr	r3, [r2, #8]
 8008f5c:	b410      	push	{r4}
 8008f5e:	3b01      	subs	r3, #1
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	6093      	str	r3, [r2, #8]
 8008f64:	da07      	bge.n	8008f76 <__sfputc_r+0x1c>
 8008f66:	6994      	ldr	r4, [r2, #24]
 8008f68:	42a3      	cmp	r3, r4
 8008f6a:	db01      	blt.n	8008f70 <__sfputc_r+0x16>
 8008f6c:	290a      	cmp	r1, #10
 8008f6e:	d102      	bne.n	8008f76 <__sfputc_r+0x1c>
 8008f70:	bc10      	pop	{r4}
 8008f72:	f7fc bdac 	b.w	8005ace <__swbuf_r>
 8008f76:	6813      	ldr	r3, [r2, #0]
 8008f78:	1c58      	adds	r0, r3, #1
 8008f7a:	6010      	str	r0, [r2, #0]
 8008f7c:	7019      	strb	r1, [r3, #0]
 8008f7e:	4608      	mov	r0, r1
 8008f80:	bc10      	pop	{r4}
 8008f82:	4770      	bx	lr

08008f84 <__sfputs_r>:
 8008f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f86:	4606      	mov	r6, r0
 8008f88:	460f      	mov	r7, r1
 8008f8a:	4614      	mov	r4, r2
 8008f8c:	18d5      	adds	r5, r2, r3
 8008f8e:	42ac      	cmp	r4, r5
 8008f90:	d101      	bne.n	8008f96 <__sfputs_r+0x12>
 8008f92:	2000      	movs	r0, #0
 8008f94:	e007      	b.n	8008fa6 <__sfputs_r+0x22>
 8008f96:	463a      	mov	r2, r7
 8008f98:	4630      	mov	r0, r6
 8008f9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f9e:	f7ff ffdc 	bl	8008f5a <__sfputc_r>
 8008fa2:	1c43      	adds	r3, r0, #1
 8008fa4:	d1f3      	bne.n	8008f8e <__sfputs_r+0xa>
 8008fa6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008fa8 <_vfiprintf_r>:
 8008fa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fac:	460d      	mov	r5, r1
 8008fae:	4614      	mov	r4, r2
 8008fb0:	4698      	mov	r8, r3
 8008fb2:	4606      	mov	r6, r0
 8008fb4:	b09d      	sub	sp, #116	@ 0x74
 8008fb6:	b118      	cbz	r0, 8008fc0 <_vfiprintf_r+0x18>
 8008fb8:	6a03      	ldr	r3, [r0, #32]
 8008fba:	b90b      	cbnz	r3, 8008fc0 <_vfiprintf_r+0x18>
 8008fbc:	f7fc fc90 	bl	80058e0 <__sinit>
 8008fc0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008fc2:	07d9      	lsls	r1, r3, #31
 8008fc4:	d405      	bmi.n	8008fd2 <_vfiprintf_r+0x2a>
 8008fc6:	89ab      	ldrh	r3, [r5, #12]
 8008fc8:	059a      	lsls	r2, r3, #22
 8008fca:	d402      	bmi.n	8008fd2 <_vfiprintf_r+0x2a>
 8008fcc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008fce:	f7fc fe90 	bl	8005cf2 <__retarget_lock_acquire_recursive>
 8008fd2:	89ab      	ldrh	r3, [r5, #12]
 8008fd4:	071b      	lsls	r3, r3, #28
 8008fd6:	d501      	bpl.n	8008fdc <_vfiprintf_r+0x34>
 8008fd8:	692b      	ldr	r3, [r5, #16]
 8008fda:	b99b      	cbnz	r3, 8009004 <_vfiprintf_r+0x5c>
 8008fdc:	4629      	mov	r1, r5
 8008fde:	4630      	mov	r0, r6
 8008fe0:	f7fc fdb4 	bl	8005b4c <__swsetup_r>
 8008fe4:	b170      	cbz	r0, 8009004 <_vfiprintf_r+0x5c>
 8008fe6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008fe8:	07dc      	lsls	r4, r3, #31
 8008fea:	d504      	bpl.n	8008ff6 <_vfiprintf_r+0x4e>
 8008fec:	f04f 30ff 	mov.w	r0, #4294967295
 8008ff0:	b01d      	add	sp, #116	@ 0x74
 8008ff2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ff6:	89ab      	ldrh	r3, [r5, #12]
 8008ff8:	0598      	lsls	r0, r3, #22
 8008ffa:	d4f7      	bmi.n	8008fec <_vfiprintf_r+0x44>
 8008ffc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008ffe:	f7fc fe79 	bl	8005cf4 <__retarget_lock_release_recursive>
 8009002:	e7f3      	b.n	8008fec <_vfiprintf_r+0x44>
 8009004:	2300      	movs	r3, #0
 8009006:	9309      	str	r3, [sp, #36]	@ 0x24
 8009008:	2320      	movs	r3, #32
 800900a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800900e:	2330      	movs	r3, #48	@ 0x30
 8009010:	f04f 0901 	mov.w	r9, #1
 8009014:	f8cd 800c 	str.w	r8, [sp, #12]
 8009018:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 80091c4 <_vfiprintf_r+0x21c>
 800901c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009020:	4623      	mov	r3, r4
 8009022:	469a      	mov	sl, r3
 8009024:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009028:	b10a      	cbz	r2, 800902e <_vfiprintf_r+0x86>
 800902a:	2a25      	cmp	r2, #37	@ 0x25
 800902c:	d1f9      	bne.n	8009022 <_vfiprintf_r+0x7a>
 800902e:	ebba 0b04 	subs.w	fp, sl, r4
 8009032:	d00b      	beq.n	800904c <_vfiprintf_r+0xa4>
 8009034:	465b      	mov	r3, fp
 8009036:	4622      	mov	r2, r4
 8009038:	4629      	mov	r1, r5
 800903a:	4630      	mov	r0, r6
 800903c:	f7ff ffa2 	bl	8008f84 <__sfputs_r>
 8009040:	3001      	adds	r0, #1
 8009042:	f000 80a7 	beq.w	8009194 <_vfiprintf_r+0x1ec>
 8009046:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009048:	445a      	add	r2, fp
 800904a:	9209      	str	r2, [sp, #36]	@ 0x24
 800904c:	f89a 3000 	ldrb.w	r3, [sl]
 8009050:	2b00      	cmp	r3, #0
 8009052:	f000 809f 	beq.w	8009194 <_vfiprintf_r+0x1ec>
 8009056:	2300      	movs	r3, #0
 8009058:	f04f 32ff 	mov.w	r2, #4294967295
 800905c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009060:	f10a 0a01 	add.w	sl, sl, #1
 8009064:	9304      	str	r3, [sp, #16]
 8009066:	9307      	str	r3, [sp, #28]
 8009068:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800906c:	931a      	str	r3, [sp, #104]	@ 0x68
 800906e:	4654      	mov	r4, sl
 8009070:	2205      	movs	r2, #5
 8009072:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009076:	4853      	ldr	r0, [pc, #332]	@ (80091c4 <_vfiprintf_r+0x21c>)
 8009078:	f7fc fe3d 	bl	8005cf6 <memchr>
 800907c:	9a04      	ldr	r2, [sp, #16]
 800907e:	b9d8      	cbnz	r0, 80090b8 <_vfiprintf_r+0x110>
 8009080:	06d1      	lsls	r1, r2, #27
 8009082:	bf44      	itt	mi
 8009084:	2320      	movmi	r3, #32
 8009086:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800908a:	0713      	lsls	r3, r2, #28
 800908c:	bf44      	itt	mi
 800908e:	232b      	movmi	r3, #43	@ 0x2b
 8009090:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009094:	f89a 3000 	ldrb.w	r3, [sl]
 8009098:	2b2a      	cmp	r3, #42	@ 0x2a
 800909a:	d015      	beq.n	80090c8 <_vfiprintf_r+0x120>
 800909c:	4654      	mov	r4, sl
 800909e:	2000      	movs	r0, #0
 80090a0:	f04f 0c0a 	mov.w	ip, #10
 80090a4:	9a07      	ldr	r2, [sp, #28]
 80090a6:	4621      	mov	r1, r4
 80090a8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80090ac:	3b30      	subs	r3, #48	@ 0x30
 80090ae:	2b09      	cmp	r3, #9
 80090b0:	d94b      	bls.n	800914a <_vfiprintf_r+0x1a2>
 80090b2:	b1b0      	cbz	r0, 80090e2 <_vfiprintf_r+0x13a>
 80090b4:	9207      	str	r2, [sp, #28]
 80090b6:	e014      	b.n	80090e2 <_vfiprintf_r+0x13a>
 80090b8:	eba0 0308 	sub.w	r3, r0, r8
 80090bc:	fa09 f303 	lsl.w	r3, r9, r3
 80090c0:	4313      	orrs	r3, r2
 80090c2:	46a2      	mov	sl, r4
 80090c4:	9304      	str	r3, [sp, #16]
 80090c6:	e7d2      	b.n	800906e <_vfiprintf_r+0xc6>
 80090c8:	9b03      	ldr	r3, [sp, #12]
 80090ca:	1d19      	adds	r1, r3, #4
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	9103      	str	r1, [sp, #12]
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	bfbb      	ittet	lt
 80090d4:	425b      	neglt	r3, r3
 80090d6:	f042 0202 	orrlt.w	r2, r2, #2
 80090da:	9307      	strge	r3, [sp, #28]
 80090dc:	9307      	strlt	r3, [sp, #28]
 80090de:	bfb8      	it	lt
 80090e0:	9204      	strlt	r2, [sp, #16]
 80090e2:	7823      	ldrb	r3, [r4, #0]
 80090e4:	2b2e      	cmp	r3, #46	@ 0x2e
 80090e6:	d10a      	bne.n	80090fe <_vfiprintf_r+0x156>
 80090e8:	7863      	ldrb	r3, [r4, #1]
 80090ea:	2b2a      	cmp	r3, #42	@ 0x2a
 80090ec:	d132      	bne.n	8009154 <_vfiprintf_r+0x1ac>
 80090ee:	9b03      	ldr	r3, [sp, #12]
 80090f0:	3402      	adds	r4, #2
 80090f2:	1d1a      	adds	r2, r3, #4
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	9203      	str	r2, [sp, #12]
 80090f8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80090fc:	9305      	str	r3, [sp, #20]
 80090fe:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 80091c8 <_vfiprintf_r+0x220>
 8009102:	2203      	movs	r2, #3
 8009104:	4650      	mov	r0, sl
 8009106:	7821      	ldrb	r1, [r4, #0]
 8009108:	f7fc fdf5 	bl	8005cf6 <memchr>
 800910c:	b138      	cbz	r0, 800911e <_vfiprintf_r+0x176>
 800910e:	2240      	movs	r2, #64	@ 0x40
 8009110:	9b04      	ldr	r3, [sp, #16]
 8009112:	eba0 000a 	sub.w	r0, r0, sl
 8009116:	4082      	lsls	r2, r0
 8009118:	4313      	orrs	r3, r2
 800911a:	3401      	adds	r4, #1
 800911c:	9304      	str	r3, [sp, #16]
 800911e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009122:	2206      	movs	r2, #6
 8009124:	4829      	ldr	r0, [pc, #164]	@ (80091cc <_vfiprintf_r+0x224>)
 8009126:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800912a:	f7fc fde4 	bl	8005cf6 <memchr>
 800912e:	2800      	cmp	r0, #0
 8009130:	d03f      	beq.n	80091b2 <_vfiprintf_r+0x20a>
 8009132:	4b27      	ldr	r3, [pc, #156]	@ (80091d0 <_vfiprintf_r+0x228>)
 8009134:	bb1b      	cbnz	r3, 800917e <_vfiprintf_r+0x1d6>
 8009136:	9b03      	ldr	r3, [sp, #12]
 8009138:	3307      	adds	r3, #7
 800913a:	f023 0307 	bic.w	r3, r3, #7
 800913e:	3308      	adds	r3, #8
 8009140:	9303      	str	r3, [sp, #12]
 8009142:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009144:	443b      	add	r3, r7
 8009146:	9309      	str	r3, [sp, #36]	@ 0x24
 8009148:	e76a      	b.n	8009020 <_vfiprintf_r+0x78>
 800914a:	460c      	mov	r4, r1
 800914c:	2001      	movs	r0, #1
 800914e:	fb0c 3202 	mla	r2, ip, r2, r3
 8009152:	e7a8      	b.n	80090a6 <_vfiprintf_r+0xfe>
 8009154:	2300      	movs	r3, #0
 8009156:	f04f 0c0a 	mov.w	ip, #10
 800915a:	4619      	mov	r1, r3
 800915c:	3401      	adds	r4, #1
 800915e:	9305      	str	r3, [sp, #20]
 8009160:	4620      	mov	r0, r4
 8009162:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009166:	3a30      	subs	r2, #48	@ 0x30
 8009168:	2a09      	cmp	r2, #9
 800916a:	d903      	bls.n	8009174 <_vfiprintf_r+0x1cc>
 800916c:	2b00      	cmp	r3, #0
 800916e:	d0c6      	beq.n	80090fe <_vfiprintf_r+0x156>
 8009170:	9105      	str	r1, [sp, #20]
 8009172:	e7c4      	b.n	80090fe <_vfiprintf_r+0x156>
 8009174:	4604      	mov	r4, r0
 8009176:	2301      	movs	r3, #1
 8009178:	fb0c 2101 	mla	r1, ip, r1, r2
 800917c:	e7f0      	b.n	8009160 <_vfiprintf_r+0x1b8>
 800917e:	ab03      	add	r3, sp, #12
 8009180:	9300      	str	r3, [sp, #0]
 8009182:	462a      	mov	r2, r5
 8009184:	4630      	mov	r0, r6
 8009186:	4b13      	ldr	r3, [pc, #76]	@ (80091d4 <_vfiprintf_r+0x22c>)
 8009188:	a904      	add	r1, sp, #16
 800918a:	f7fb fd4f 	bl	8004c2c <_printf_float>
 800918e:	4607      	mov	r7, r0
 8009190:	1c78      	adds	r0, r7, #1
 8009192:	d1d6      	bne.n	8009142 <_vfiprintf_r+0x19a>
 8009194:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009196:	07d9      	lsls	r1, r3, #31
 8009198:	d405      	bmi.n	80091a6 <_vfiprintf_r+0x1fe>
 800919a:	89ab      	ldrh	r3, [r5, #12]
 800919c:	059a      	lsls	r2, r3, #22
 800919e:	d402      	bmi.n	80091a6 <_vfiprintf_r+0x1fe>
 80091a0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80091a2:	f7fc fda7 	bl	8005cf4 <__retarget_lock_release_recursive>
 80091a6:	89ab      	ldrh	r3, [r5, #12]
 80091a8:	065b      	lsls	r3, r3, #25
 80091aa:	f53f af1f 	bmi.w	8008fec <_vfiprintf_r+0x44>
 80091ae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80091b0:	e71e      	b.n	8008ff0 <_vfiprintf_r+0x48>
 80091b2:	ab03      	add	r3, sp, #12
 80091b4:	9300      	str	r3, [sp, #0]
 80091b6:	462a      	mov	r2, r5
 80091b8:	4630      	mov	r0, r6
 80091ba:	4b06      	ldr	r3, [pc, #24]	@ (80091d4 <_vfiprintf_r+0x22c>)
 80091bc:	a904      	add	r1, sp, #16
 80091be:	f7fb ffd3 	bl	8005168 <_printf_i>
 80091c2:	e7e4      	b.n	800918e <_vfiprintf_r+0x1e6>
 80091c4:	08009699 	.word	0x08009699
 80091c8:	0800969f 	.word	0x0800969f
 80091cc:	080096a3 	.word	0x080096a3
 80091d0:	08004c2d 	.word	0x08004c2d
 80091d4:	08008f85 	.word	0x08008f85

080091d8 <_raise_r>:
 80091d8:	291f      	cmp	r1, #31
 80091da:	b538      	push	{r3, r4, r5, lr}
 80091dc:	4605      	mov	r5, r0
 80091de:	460c      	mov	r4, r1
 80091e0:	d904      	bls.n	80091ec <_raise_r+0x14>
 80091e2:	2316      	movs	r3, #22
 80091e4:	6003      	str	r3, [r0, #0]
 80091e6:	f04f 30ff 	mov.w	r0, #4294967295
 80091ea:	bd38      	pop	{r3, r4, r5, pc}
 80091ec:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80091ee:	b112      	cbz	r2, 80091f6 <_raise_r+0x1e>
 80091f0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80091f4:	b94b      	cbnz	r3, 800920a <_raise_r+0x32>
 80091f6:	4628      	mov	r0, r5
 80091f8:	f000 f830 	bl	800925c <_getpid_r>
 80091fc:	4622      	mov	r2, r4
 80091fe:	4601      	mov	r1, r0
 8009200:	4628      	mov	r0, r5
 8009202:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009206:	f000 b817 	b.w	8009238 <_kill_r>
 800920a:	2b01      	cmp	r3, #1
 800920c:	d00a      	beq.n	8009224 <_raise_r+0x4c>
 800920e:	1c59      	adds	r1, r3, #1
 8009210:	d103      	bne.n	800921a <_raise_r+0x42>
 8009212:	2316      	movs	r3, #22
 8009214:	6003      	str	r3, [r0, #0]
 8009216:	2001      	movs	r0, #1
 8009218:	e7e7      	b.n	80091ea <_raise_r+0x12>
 800921a:	2100      	movs	r1, #0
 800921c:	4620      	mov	r0, r4
 800921e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009222:	4798      	blx	r3
 8009224:	2000      	movs	r0, #0
 8009226:	e7e0      	b.n	80091ea <_raise_r+0x12>

08009228 <raise>:
 8009228:	4b02      	ldr	r3, [pc, #8]	@ (8009234 <raise+0xc>)
 800922a:	4601      	mov	r1, r0
 800922c:	6818      	ldr	r0, [r3, #0]
 800922e:	f7ff bfd3 	b.w	80091d8 <_raise_r>
 8009232:	bf00      	nop
 8009234:	20000420 	.word	0x20000420

08009238 <_kill_r>:
 8009238:	b538      	push	{r3, r4, r5, lr}
 800923a:	2300      	movs	r3, #0
 800923c:	4d06      	ldr	r5, [pc, #24]	@ (8009258 <_kill_r+0x20>)
 800923e:	4604      	mov	r4, r0
 8009240:	4608      	mov	r0, r1
 8009242:	4611      	mov	r1, r2
 8009244:	602b      	str	r3, [r5, #0]
 8009246:	f7f8 f90c 	bl	8001462 <_kill>
 800924a:	1c43      	adds	r3, r0, #1
 800924c:	d102      	bne.n	8009254 <_kill_r+0x1c>
 800924e:	682b      	ldr	r3, [r5, #0]
 8009250:	b103      	cbz	r3, 8009254 <_kill_r+0x1c>
 8009252:	6023      	str	r3, [r4, #0]
 8009254:	bd38      	pop	{r3, r4, r5, pc}
 8009256:	bf00      	nop
 8009258:	20003154 	.word	0x20003154

0800925c <_getpid_r>:
 800925c:	f7f8 b8fa 	b.w	8001454 <_getpid>

08009260 <_init>:
 8009260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009262:	bf00      	nop
 8009264:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009266:	bc08      	pop	{r3}
 8009268:	469e      	mov	lr, r3
 800926a:	4770      	bx	lr

0800926c <_fini>:
 800926c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800926e:	bf00      	nop
 8009270:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009272:	bc08      	pop	{r3}
 8009274:	469e      	mov	lr, r3
 8009276:	4770      	bx	lr
